
Base_FreeRTOS_Org.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f938  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  0800fad8  0800fad8  0001fad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010380  08010380  000301f4  2**0
                  CONTENTS
  4 .ARM          00000000  08010380  08010380  000301f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010380  08010380  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010380  08010380  00020380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010384  08010384  00020384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08010388  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000136c8  200001f8  0801057c  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200138c0  0801057c  000338c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6eb  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002554  00000000  00000000  0003d90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0003fe68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  00040a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001273d  00000000  00000000  00041580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e61b  00000000  00000000  00053cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062567  00000000  00000000  000622d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c483f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004678  00000000  00000000  000c4890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fac0 	.word	0x0800fac0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800fac0 	.word	0x0800fac0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder

int main(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b08d      	sub	sp, #52	; 0x34
 8000cbc:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
	SCB -> CPACR |= (0xF << 20);
 8000cbe:	4ba5      	ldr	r3, [pc, #660]	; (8000f54 <main+0x29c>)
 8000cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc4:	4aa3      	ldr	r2, [pc, #652]	; (8000f54 <main+0x29c>)
 8000cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	//Activamos el contador
   	DWT -> CTRL    |= (1 << 0);
 8000cce:	4ba2      	ldr	r3, [pc, #648]	; (8000f58 <main+0x2a0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4aa1      	ldr	r2, [pc, #644]	; (8000f58 <main+0x2a0>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6013      	str	r3, [r2, #0]
//	/* Primero configuramos */
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
//	SEGGER_SYSVIEW_Start();

   	RCC_enableMaxFrequencies(RCC_100MHz);
 8000cda:	2008      	movs	r0, #8
 8000cdc:	f008 fcce 	bl	800967c <RCC_enableMaxFrequencies>
	inSystem ();
 8000ce0:	f000 f97c 	bl	8000fdc <inSystem>

	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z);
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	489d      	ldr	r0, [pc, #628]	; (8000f5c <main+0x2a4>)
 8000ce8:	f001 f83e 	bl	8001d68 <calibracionGyros>
 8000cec:	ee10 3a10 	vmov	r3, s0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fc41 	bl	8000578 <__aeabi_f2d>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	4999      	ldr	r1, [pc, #612]	; (8000f60 <main+0x2a8>)
 8000cfc:	e9c1 2300 	strd	r2, r3, [r1]


	/////////////////////////////////TAREA DEL MENU//////////////////////////////////////

	xReturned = xTaskCreate(
 8000d00:	4b98      	ldr	r3, [pc, #608]	; (8000f64 <main+0x2ac>)
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2303      	movs	r3, #3
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	22c8      	movs	r2, #200	; 0xc8
 8000d0c:	4996      	ldr	r1, [pc, #600]	; (8000f68 <main+0x2b0>)
 8000d0e:	4897      	ldr	r0, [pc, #604]	; (8000f6c <main+0x2b4>)
 8000d10:	f003 fb70 	bl	80043f4 <xTaskCreate>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a96      	ldr	r2, [pc, #600]	; (8000f70 <main+0x2b8>)
 8000d18:	6013      	str	r3, [r2, #0]
					NULL,                   // parametro pasado a la tarea
					3,                      // Prioridad de la tarea
					&xHandleTask_Menu );    // Handler de la tarea respectiva


	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000d1a:	4b95      	ldr	r3, [pc, #596]	; (8000f70 <main+0x2b8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d00a      	beq.n	8000d38 <main+0x80>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d26:	f383 8811 	msr	BASEPRI, r3
 8000d2a:	f3bf 8f6f 	isb	sy
 8000d2e:	f3bf 8f4f 	dsb	sy
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000d34:	bf00      	nop
 8000d36:	e7fe      	b.n	8000d36 <main+0x7e>


	/////////////////////////////////TAREA DE IMPRESIÓN//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Print, "Task-Print",STACK_SIZE,NULL,3,&xHandleTask_Print );
 8000d38:	4b8e      	ldr	r3, [pc, #568]	; (8000f74 <main+0x2bc>)
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2300      	movs	r3, #0
 8000d42:	22c8      	movs	r2, #200	; 0xc8
 8000d44:	498c      	ldr	r1, [pc, #560]	; (8000f78 <main+0x2c0>)
 8000d46:	488d      	ldr	r0, [pc, #564]	; (8000f7c <main+0x2c4>)
 8000d48:	f003 fb54 	bl	80043f4 <xTaskCreate>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4a88      	ldr	r2, [pc, #544]	; (8000f70 <main+0x2b8>)
 8000d50:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000d52:	4b87      	ldr	r3, [pc, #540]	; (8000f70 <main+0x2b8>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d00a      	beq.n	8000d70 <main+0xb8>
        __asm volatile
 8000d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d5e:	f383 8811 	msr	BASEPRI, r3
 8000d62:	f3bf 8f6f 	isb	sy
 8000d66:	f3bf 8f4f 	dsb	sy
 8000d6a:	623b      	str	r3, [r7, #32]
    }
 8000d6c:	bf00      	nop
 8000d6e:	e7fe      	b.n	8000d6e <main+0xb6>

	 /////////////////////////////////TAREA DE COMANDOS //////////////////////////////////////

	xReturned = xTaskCreate(vTask_Commands,"Task-Commands",STACK_SIZE,NULL,3,&xHandleTask_Commands );
 8000d70:	4b83      	ldr	r3, [pc, #524]	; (8000f80 <main+0x2c8>)
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	2303      	movs	r3, #3
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	22c8      	movs	r2, #200	; 0xc8
 8000d7c:	4981      	ldr	r1, [pc, #516]	; (8000f84 <main+0x2cc>)
 8000d7e:	4882      	ldr	r0, [pc, #520]	; (8000f88 <main+0x2d0>)
 8000d80:	f003 fb38 	bl	80043f4 <xTaskCreate>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4a7a      	ldr	r2, [pc, #488]	; (8000f70 <main+0x2b8>)
 8000d88:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000d8a:	4b79      	ldr	r3, [pc, #484]	; (8000f70 <main+0x2b8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d00a      	beq.n	8000da8 <main+0xf0>
        __asm volatile
 8000d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d96:	f383 8811 	msr	BASEPRI, r3
 8000d9a:	f3bf 8f6f 	isb	sy
 8000d9e:	f3bf 8f4f 	dsb	sy
 8000da2:	61fb      	str	r3, [r7, #28]
    }
 8000da4:	bf00      	nop
 8000da6:	e7fe      	b.n	8000da6 <main+0xee>

	 /////////////////////////////////TAREA DE STOP //////////////////////////////////////


	xReturned = xTaskCreate(vTask_Stop,"Task-Stop",STACK_SIZE,NULL,3,&xHandleTask_Stop );
 8000da8:	4b78      	ldr	r3, [pc, #480]	; (8000f8c <main+0x2d4>)
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	2303      	movs	r3, #3
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2300      	movs	r3, #0
 8000db2:	22c8      	movs	r2, #200	; 0xc8
 8000db4:	4976      	ldr	r1, [pc, #472]	; (8000f90 <main+0x2d8>)
 8000db6:	4877      	ldr	r0, [pc, #476]	; (8000f94 <main+0x2dc>)
 8000db8:	f003 fb1c 	bl	80043f4 <xTaskCreate>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4a6c      	ldr	r2, [pc, #432]	; (8000f70 <main+0x2b8>)
 8000dc0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000dc2:	4b6b      	ldr	r3, [pc, #428]	; (8000f70 <main+0x2b8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d00a      	beq.n	8000de0 <main+0x128>
        __asm volatile
 8000dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dce:	f383 8811 	msr	BASEPRI, r3
 8000dd2:	f3bf 8f6f 	isb	sy
 8000dd6:	f3bf 8f4f 	dsb	sy
 8000dda:	61bb      	str	r3, [r7, #24]
    }
 8000ddc:	bf00      	nop
 8000dde:	e7fe      	b.n	8000dde <main+0x126>

	 /////////////////////////////////TAREA DE GO//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Go,"Task-Go",STACK_SIZE,NULL,3,&xHandleTask_Go );
 8000de0:	4b6d      	ldr	r3, [pc, #436]	; (8000f98 <main+0x2e0>)
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	2303      	movs	r3, #3
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2300      	movs	r3, #0
 8000dea:	22c8      	movs	r2, #200	; 0xc8
 8000dec:	496b      	ldr	r1, [pc, #428]	; (8000f9c <main+0x2e4>)
 8000dee:	486c      	ldr	r0, [pc, #432]	; (8000fa0 <main+0x2e8>)
 8000df0:	f003 fb00 	bl	80043f4 <xTaskCreate>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4a5e      	ldr	r2, [pc, #376]	; (8000f70 <main+0x2b8>)
 8000df8:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000dfa:	4b5d      	ldr	r3, [pc, #372]	; (8000f70 <main+0x2b8>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d00a      	beq.n	8000e18 <main+0x160>
        __asm volatile
 8000e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e06:	f383 8811 	msr	BASEPRI, r3
 8000e0a:	f3bf 8f6f 	isb	sy
 8000e0e:	f3bf 8f4f 	dsb	sy
 8000e12:	617b      	str	r3, [r7, #20]
    }
 8000e14:	bf00      	nop
 8000e16:	e7fe      	b.n	8000e16 <main+0x15e>

	 /////////////////////////////////TAREA DE PID//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Control,"Task-Control",STACK_SIZE,NULL,3,&xHandleTask_Control );
 8000e18:	4b62      	ldr	r3, [pc, #392]	; (8000fa4 <main+0x2ec>)
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2300      	movs	r3, #0
 8000e22:	22c8      	movs	r2, #200	; 0xc8
 8000e24:	4960      	ldr	r1, [pc, #384]	; (8000fa8 <main+0x2f0>)
 8000e26:	4861      	ldr	r0, [pc, #388]	; (8000fac <main+0x2f4>)
 8000e28:	f003 fae4 	bl	80043f4 <xTaskCreate>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4a50      	ldr	r2, [pc, #320]	; (8000f70 <main+0x2b8>)
 8000e30:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e32:	4b4f      	ldr	r3, [pc, #316]	; (8000f70 <main+0x2b8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d00a      	beq.n	8000e50 <main+0x198>
        __asm volatile
 8000e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3e:	f383 8811 	msr	BASEPRI, r3
 8000e42:	f3bf 8f6f 	isb	sy
 8000e46:	f3bf 8f4f 	dsb	sy
 8000e4a:	613b      	str	r3, [r7, #16]
    }
 8000e4c:	bf00      	nop
 8000e4e:	e7fe      	b.n	8000e4e <main+0x196>

	 /////////////////////////////////TAREA DE IR A//////////////////////////////////////

	xReturned = xTaskCreate(vTask_GoTo,"Task-GoTo",STACK_SIZE,NULL,3,&xHandleTask_GoTo );
 8000e50:	4b57      	ldr	r3, [pc, #348]	; (8000fb0 <main+0x2f8>)
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	2303      	movs	r3, #3
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	22c8      	movs	r2, #200	; 0xc8
 8000e5c:	4955      	ldr	r1, [pc, #340]	; (8000fb4 <main+0x2fc>)
 8000e5e:	4856      	ldr	r0, [pc, #344]	; (8000fb8 <main+0x300>)
 8000e60:	f003 fac8 	bl	80043f4 <xTaskCreate>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4a42      	ldr	r2, [pc, #264]	; (8000f70 <main+0x2b8>)
 8000e68:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e6a:	4b41      	ldr	r3, [pc, #260]	; (8000f70 <main+0x2b8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d00a      	beq.n	8000e88 <main+0x1d0>
        __asm volatile
 8000e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e76:	f383 8811 	msr	BASEPRI, r3
 8000e7a:	f3bf 8f6f 	isb	sy
 8000e7e:	f3bf 8f4f 	dsb	sy
 8000e82:	60fb      	str	r3, [r7, #12]
    }
 8000e84:	bf00      	nop
 8000e86:	e7fe      	b.n	8000e86 <main+0x1ce>

	 /////////////////////////////////TAREA DE NO OPERACION//////////////////////////////////////

	xReturned = xTaskCreate(vTask_NOP,"Task-NOP",STACK_SIZE,NULL,3,&xHandleTask_NOP );
 8000e88:	4b4c      	ldr	r3, [pc, #304]	; (8000fbc <main+0x304>)
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2300      	movs	r3, #0
 8000e92:	22c8      	movs	r2, #200	; 0xc8
 8000e94:	494a      	ldr	r1, [pc, #296]	; (8000fc0 <main+0x308>)
 8000e96:	484b      	ldr	r0, [pc, #300]	; (8000fc4 <main+0x30c>)
 8000e98:	f003 faac 	bl	80043f4 <xTaskCreate>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4a34      	ldr	r2, [pc, #208]	; (8000f70 <main+0x2b8>)
 8000ea0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000ea2:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <main+0x2b8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d00a      	beq.n	8000ec0 <main+0x208>
        __asm volatile
 8000eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eae:	f383 8811 	msr	BASEPRI, r3
 8000eb2:	f3bf 8f6f 	isb	sy
 8000eb6:	f3bf 8f4f 	dsb	sy
 8000eba:	60bb      	str	r3, [r7, #8]
    }
 8000ebc:	bf00      	nop
 8000ebe:	e7fe      	b.n	8000ebe <main+0x206>


	 //Creacion de colas
	 // Para cada funcion de crear se tiene que definir el largo de la cola,, y el
	 // largo de cada elemento de la cola.
	 xQueue_InputData = xQueueCreate(20,sizeof(char));
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	2014      	movs	r0, #20
 8000ec6:	f002 fd49 	bl	800395c <xQueueGenericCreate>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4a3e      	ldr	r2, [pc, #248]	; (8000fc8 <main+0x310>)
 8000ece:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_InputData != NULL);// Verificamos que se creo la cola correctamente
 8000ed0:	4b3d      	ldr	r3, [pc, #244]	; (8000fc8 <main+0x310>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d10a      	bne.n	8000eee <main+0x236>
        __asm volatile
 8000ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000edc:	f383 8811 	msr	BASEPRI, r3
 8000ee0:	f3bf 8f6f 	isb	sy
 8000ee4:	f3bf 8f4f 	dsb	sy
 8000ee8:	607b      	str	r3, [r7, #4]
    }
 8000eea:	bf00      	nop
 8000eec:	e7fe      	b.n	8000eec <main+0x234>

	 //XQueue_Print = xQueueCreate (10, sizeof (struct AMessage *))
	 xQueue_Print = xQueueCreate(10,sizeof(size_t));
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2104      	movs	r1, #4
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f002 fd32 	bl	800395c <xQueueGenericCreate>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a34      	ldr	r2, [pc, #208]	; (8000fcc <main+0x314>)
 8000efc:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_Print != NULL); // Verificamos que se creo la cola correctamente
 8000efe:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <main+0x314>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10a      	bne.n	8000f1c <main+0x264>
        __asm volatile
 8000f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f0a:	f383 8811 	msr	BASEPRI, r3
 8000f0e:	f3bf 8f6f 	isb	sy
 8000f12:	f3bf 8f4f 	dsb	sy
 8000f16:	603b      	str	r3, [r7, #0]
    }
 8000f18:	bf00      	nop
 8000f1a:	e7fe      	b.n	8000f1a <main+0x262>
	 //Creando el timer de FreeRTOS


	 /* Start the created tasks running. */

	 handler_led_timer = xTimerCreate("led_timer",
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <main+0x318>)
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	2201      	movs	r2, #1
 8000f24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f28:	482a      	ldr	r0, [pc, #168]	; (8000fd4 <main+0x31c>)
 8000f2a:	f004 fb39 	bl	80055a0 <xTimerCreate>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <main+0x320>)
 8000f32:	6013      	str	r3, [r2, #0]
			 	 	 	 	 	 	 pdMS_TO_TICKS(500),
									 pdTRUE,
									 (void *) 1,
									 led_state_callback);

	 xTimerStart(handler_led_timer, portMAX_DELAY);
 8000f34:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <main+0x320>)
 8000f36:	681c      	ldr	r4, [r3, #0]
 8000f38:	f003 fc9e 	bl	8004878 <xTaskGetTickCount>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2300      	movs	r3, #0
 8000f46:	2101      	movs	r1, #1
 8000f48:	4620      	mov	r0, r4
 8000f4a:	f004 fb85 	bl	8005658 <xTimerGenericCommand>

	 // Definicion del semaforo para saltar interrupciiones y definir tareas de diferentes prioridades



	 vTaskStartScheduler();
 8000f4e:	f003 fb97 	bl	8004680 <vTaskStartScheduler>


    /* Loop forever */
	while(1){
 8000f52:	e7fe      	b.n	8000f52 <main+0x29a>
 8000f54:	e000ed00 	.word	0xe000ed00
 8000f58:	e0001000 	.word	0xe0001000
 8000f5c:	200003f8 	.word	0x200003f8
 8000f60:	20000ac0 	.word	0x20000ac0
 8000f64:	20000218 	.word	0x20000218
 8000f68:	0800fbbc 	.word	0x0800fbbc
 8000f6c:	08001491 	.word	0x08001491
 8000f70:	20000214 	.word	0x20000214
 8000f74:	2000021c 	.word	0x2000021c
 8000f78:	0800fbc8 	.word	0x0800fbc8
 8000f7c:	0800198d 	.word	0x0800198d
 8000f80:	20000220 	.word	0x20000220
 8000f84:	0800fbd4 	.word	0x0800fbd4
 8000f88:	08001629 	.word	0x08001629
 8000f8c:	20000224 	.word	0x20000224
 8000f90:	0800fbe4 	.word	0x0800fbe4
 8000f94:	08001669 	.word	0x08001669
 8000f98:	20000228 	.word	0x20000228
 8000f9c:	0800fbf0 	.word	0x0800fbf0
 8000fa0:	080016e5 	.word	0x080016e5
 8000fa4:	2000022c 	.word	0x2000022c
 8000fa8:	0800fbf8 	.word	0x0800fbf8
 8000fac:	0800172d 	.word	0x0800172d
 8000fb0:	20000230 	.word	0x20000230
 8000fb4:	0800fc08 	.word	0x0800fc08
 8000fb8:	08001889 	.word	0x08001889
 8000fbc:	20000234 	.word	0x20000234
 8000fc0:	0800fc14 	.word	0x0800fc14
 8000fc4:	080019bd 	.word	0x080019bd
 8000fc8:	2000023c 	.word	0x2000023c
 8000fcc:	20000238 	.word	0x20000238
 8000fd0:	08003545 	.word	0x08003545
 8000fd4:	0800fc20 	.word	0x0800fc20
 8000fd8:	20000240 	.word	0x20000240

08000fdc <inSystem>:

	}
}


void inSystem (void){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af02      	add	r7, sp, #8
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000fe2:	4bb0      	ldr	r3, [pc, #704]	; (80012a4 <inSystem+0x2c8>)
 8000fe4:	4ab0      	ldr	r2, [pc, #704]	; (80012a8 <inSystem+0x2cc>)
 8000fe6:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000fe8:	4bae      	ldr	r3, [pc, #696]	; (80012a4 <inSystem+0x2c8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000fee:	4bad      	ldr	r3, [pc, #692]	; (80012a4 <inSystem+0x2c8>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000ff4:	4bab      	ldr	r3, [pc, #684]	; (80012a4 <inSystem+0x2c8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000ffa:	4baa      	ldr	r3, [pc, #680]	; (80012a4 <inSystem+0x2c8>)
 8000ffc:	2205      	movs	r2, #5
 8000ffe:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001000:	4ba8      	ldr	r3, [pc, #672]	; (80012a4 <inSystem+0x2c8>)
 8001002:	2200      	movs	r2, #0
 8001004:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8001006:	4ba7      	ldr	r3, [pc, #668]	; (80012a4 <inSystem+0x2c8>)
 8001008:	2202      	movs	r2, #2
 800100a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 800100c:	48a5      	ldr	r0, [pc, #660]	; (80012a4 <inSystem+0x2c8>)
 800100e:	f007 f831 	bl	8008074 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8001012:	2101      	movs	r1, #1
 8001014:	48a3      	ldr	r0, [pc, #652]	; (80012a4 <inSystem+0x2c8>)
 8001016:	f007 f957 	bl	80082c8 <GPIO_WritePin>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 800101a:	f005 fa95 	bl	8006548 <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array, &parameters_Pos_Robot, &parameters_Path_Robot, &parameter_PID_distace, Mode_dir);
 800101e:	4ba3      	ldr	r3, [pc, #652]	; (80012ac <inSystem+0x2d0>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	f8ad 3000 	strh.w	r3, [sp]
 8001026:	4ba2      	ldr	r3, [pc, #648]	; (80012b0 <inSystem+0x2d4>)
 8001028:	4aa2      	ldr	r2, [pc, #648]	; (80012b4 <inSystem+0x2d8>)
 800102a:	49a3      	ldr	r1, [pc, #652]	; (80012b8 <inSystem+0x2dc>)
 800102c:	48a3      	ldr	r0, [pc, #652]	; (80012bc <inSystem+0x2e0>)
 800102e:	f001 fd7f 	bl	8002b30 <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 8001032:	4ba3      	ldr	r3, [pc, #652]	; (80012c0 <inSystem+0x2e4>)
 8001034:	4a9c      	ldr	r2, [pc, #624]	; (80012a8 <inSystem+0x2cc>)
 8001036:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001038:	4ba1      	ldr	r3, [pc, #644]	; (80012c0 <inSystem+0x2e4>)
 800103a:	2202      	movs	r2, #2
 800103c:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800103e:	4ba0      	ldr	r3, [pc, #640]	; (80012c0 <inSystem+0x2e4>)
 8001040:	2202      	movs	r2, #2
 8001042:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001044:	4b9e      	ldr	r3, [pc, #632]	; (80012c0 <inSystem+0x2e4>)
 8001046:	2200      	movs	r2, #0
 8001048:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 800104a:	4b9d      	ldr	r3, [pc, #628]	; (80012c0 <inSystem+0x2e4>)
 800104c:	2200      	movs	r2, #0
 800104e:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001050:	4b9b      	ldr	r3, [pc, #620]	; (80012c0 <inSystem+0x2e4>)
 8001052:	2200      	movs	r2, #0
 8001054:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001056:	4b9a      	ldr	r3, [pc, #616]	; (80012c0 <inSystem+0x2e4>)
 8001058:	2202      	movs	r2, #2
 800105a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 800105c:	4898      	ldr	r0, [pc, #608]	; (80012c0 <inSystem+0x2e4>)
 800105e:	f007 f809 	bl	8008074 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 8001062:	4b98      	ldr	r3, [pc, #608]	; (80012c4 <inSystem+0x2e8>)
 8001064:	4a98      	ldr	r2, [pc, #608]	; (80012c8 <inSystem+0x2ec>)
 8001066:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 8001068:	4b96      	ldr	r3, [pc, #600]	; (80012c4 <inSystem+0x2e8>)
 800106a:	2200      	movs	r2, #0
 800106c:	721a      	strb	r2, [r3, #8]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 800106e:	4b95      	ldr	r3, [pc, #596]	; (80012c4 <inSystem+0x2e8>)
 8001070:	4a96      	ldr	r2, [pc, #600]	; (80012cc <inSystem+0x2f0>)
 8001072:	619a      	str	r2, [r3, #24]
//	counter = fixed_dutty;
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 8001074:	4993      	ldr	r1, [pc, #588]	; (80012c4 <inSystem+0x2e8>)
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	4b95      	ldr	r3, [pc, #596]	; (80012d0 <inSystem+0x2f4>)
 800107c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8001080:	4b90      	ldr	r3, [pc, #576]	; (80012c4 <inSystem+0x2e8>)
 8001082:	2264      	movs	r2, #100	; 0x64
 8001084:	60da      	str	r2, [r3, #12]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8001086:	4b8f      	ldr	r3, [pc, #572]	; (80012c4 <inSystem+0x2e8>)
 8001088:	2201      	movs	r2, #1
 800108a:	771a      	strb	r2, [r3, #28]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 800108c:	4b8d      	ldr	r3, [pc, #564]	; (80012c4 <inSystem+0x2e8>)
 800108e:	2201      	movs	r2, #1
 8001090:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_1);
 8001092:	488c      	ldr	r0, [pc, #560]	; (80012c4 <inSystem+0x2e8>)
 8001094:	f007 fdf6 	bl	8008c84 <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 8001098:	488a      	ldr	r0, [pc, #552]	; (80012c4 <inSystem+0x2e8>)
 800109a:	f007 fedd 	bl	8008e58 <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 800109e:	4b8d      	ldr	r3, [pc, #564]	; (80012d4 <inSystem+0x2f8>)
 80010a0:	4a81      	ldr	r2, [pc, #516]	; (80012a8 <inSystem+0x2cc>)
 80010a2:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 80010a4:	4b8b      	ldr	r3, [pc, #556]	; (80012d4 <inSystem+0x2f8>)
 80010a6:	2202      	movs	r2, #2
 80010a8:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80010aa:	4b8a      	ldr	r3, [pc, #552]	; (80012d4 <inSystem+0x2f8>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80010b0:	4b88      	ldr	r3, [pc, #544]	; (80012d4 <inSystem+0x2f8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 80010b6:	4b87      	ldr	r3, [pc, #540]	; (80012d4 <inSystem+0x2f8>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010bc:	4b85      	ldr	r3, [pc, #532]	; (80012d4 <inSystem+0x2f8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80010c2:	4b84      	ldr	r3, [pc, #528]	; (80012d4 <inSystem+0x2f8>)
 80010c4:	2202      	movs	r2, #2
 80010c6:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 80010c8:	4882      	ldr	r0, [pc, #520]	; (80012d4 <inSystem+0x2f8>)
 80010ca:	f006 ffd3 	bl	8008074 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 80010ce:	4b82      	ldr	r3, [pc, #520]	; (80012d8 <inSystem+0x2fc>)
 80010d0:	4a7d      	ldr	r2, [pc, #500]	; (80012c8 <inSystem+0x2ec>)
 80010d2:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 80010d4:	4b80      	ldr	r3, [pc, #512]	; (80012d8 <inSystem+0x2fc>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	721a      	strb	r2, [r3, #8]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 80010da:	4b7f      	ldr	r3, [pc, #508]	; (80012d8 <inSystem+0x2fc>)
 80010dc:	4a7b      	ldr	r2, [pc, #492]	; (80012cc <inSystem+0x2f0>)
 80010de:	619a      	str	r2, [r3, #24]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 80010e0:	497d      	ldr	r1, [pc, #500]	; (80012d8 <inSystem+0x2fc>)
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	4b7a      	ldr	r3, [pc, #488]	; (80012d0 <inSystem+0x2f4>)
 80010e8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 80010ec:	4b7a      	ldr	r3, [pc, #488]	; (80012d8 <inSystem+0x2fc>)
 80010ee:	2264      	movs	r2, #100	; 0x64
 80010f0:	60da      	str	r2, [r3, #12]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 80010f2:	4b79      	ldr	r3, [pc, #484]	; (80012d8 <inSystem+0x2fc>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	771a      	strb	r2, [r3, #28]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 80010f8:	4b77      	ldr	r3, [pc, #476]	; (80012d8 <inSystem+0x2fc>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_2);
 80010fe:	4876      	ldr	r0, [pc, #472]	; (80012d8 <inSystem+0x2fc>)
 8001100:	f007 fdc0 	bl	8008c84 <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 8001104:	4874      	ldr	r0, [pc, #464]	; (80012d8 <inSystem+0x2fc>)
 8001106:	f007 fea7 	bl	8008e58 <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 800110a:	4b74      	ldr	r3, [pc, #464]	; (80012dc <inSystem+0x300>)
 800110c:	4a74      	ldr	r2, [pc, #464]	; (80012e0 <inSystem+0x304>)
 800110e:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001110:	4b72      	ldr	r3, [pc, #456]	; (80012dc <inSystem+0x300>)
 8001112:	2200      	movs	r2, #0
 8001114:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001116:	4b71      	ldr	r3, [pc, #452]	; (80012dc <inSystem+0x300>)
 8001118:	2201      	movs	r2, #1
 800111a:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 800111c:	4b6f      	ldr	r3, [pc, #444]	; (80012dc <inSystem+0x300>)
 800111e:	220a      	movs	r2, #10
 8001120:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001122:	4b6e      	ldr	r3, [pc, #440]	; (80012dc <inSystem+0x300>)
 8001124:	2200      	movs	r2, #0
 8001126:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001128:	4b6c      	ldr	r3, [pc, #432]	; (80012dc <inSystem+0x300>)
 800112a:	2200      	movs	r2, #0
 800112c:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800112e:	4b6b      	ldr	r3, [pc, #428]	; (80012dc <inSystem+0x300>)
 8001130:	2202      	movs	r2, #2
 8001132:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 8001134:	4869      	ldr	r0, [pc, #420]	; (80012dc <inSystem+0x300>)
 8001136:	f006 ff9d 	bl	8008074 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 800113a:	2100      	movs	r1, #0
 800113c:	4867      	ldr	r0, [pc, #412]	; (80012dc <inSystem+0x300>)
 800113e:	f007 f8ee 	bl	800831e <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 8001142:	4b68      	ldr	r3, [pc, #416]	; (80012e4 <inSystem+0x308>)
 8001144:	4a66      	ldr	r2, [pc, #408]	; (80012e0 <inSystem+0x304>)
 8001146:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001148:	4b66      	ldr	r3, [pc, #408]	; (80012e4 <inSystem+0x308>)
 800114a:	2200      	movs	r2, #0
 800114c:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800114e:	4b65      	ldr	r3, [pc, #404]	; (80012e4 <inSystem+0x308>)
 8001150:	2201      	movs	r2, #1
 8001152:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 8001154:	4b63      	ldr	r3, [pc, #396]	; (80012e4 <inSystem+0x308>)
 8001156:	220b      	movs	r2, #11
 8001158:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800115a:	4b62      	ldr	r3, [pc, #392]	; (80012e4 <inSystem+0x308>)
 800115c:	2200      	movs	r2, #0
 800115e:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001160:	4b60      	ldr	r3, [pc, #384]	; (80012e4 <inSystem+0x308>)
 8001162:	2200      	movs	r2, #0
 8001164:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001166:	4b5f      	ldr	r3, [pc, #380]	; (80012e4 <inSystem+0x308>)
 8001168:	2202      	movs	r2, #2
 800116a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 800116c:	485d      	ldr	r0, [pc, #372]	; (80012e4 <inSystem+0x308>)
 800116e:	f006 ff81 	bl	8008074 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 8001172:	2100      	movs	r1, #0
 8001174:	485b      	ldr	r0, [pc, #364]	; (80012e4 <inSystem+0x308>)
 8001176:	f007 f8d2 	bl	800831e <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 800117a:	4b5b      	ldr	r3, [pc, #364]	; (80012e8 <inSystem+0x30c>)
 800117c:	4a58      	ldr	r2, [pc, #352]	; (80012e0 <inSystem+0x304>)
 800117e:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001180:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <inSystem+0x30c>)
 8001182:	2200      	movs	r2, #0
 8001184:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001186:	4b58      	ldr	r3, [pc, #352]	; (80012e8 <inSystem+0x30c>)
 8001188:	2201      	movs	r2, #1
 800118a:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 800118c:	4b56      	ldr	r3, [pc, #344]	; (80012e8 <inSystem+0x30c>)
 800118e:	220c      	movs	r2, #12
 8001190:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001192:	4b55      	ldr	r3, [pc, #340]	; (80012e8 <inSystem+0x30c>)
 8001194:	2200      	movs	r2, #0
 8001196:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001198:	4b53      	ldr	r3, [pc, #332]	; (80012e8 <inSystem+0x30c>)
 800119a:	2200      	movs	r2, #0
 800119c:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800119e:	4b52      	ldr	r3, [pc, #328]	; (80012e8 <inSystem+0x30c>)
 80011a0:	2202      	movs	r2, #2
 80011a2:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 80011a4:	4850      	ldr	r0, [pc, #320]	; (80012e8 <inSystem+0x30c>)
 80011a6:	f006 ff65 	bl	8008074 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default SET
 80011aa:	2100      	movs	r1, #0
 80011ac:	484e      	ldr	r0, [pc, #312]	; (80012e8 <inSystem+0x30c>)
 80011ae:	f007 f8b6 	bl	800831e <GPIO_WritePin_Afopt>
	handler_Motor_Array[0]->configMotor.dir = SET;
 80011b2:	4b42      	ldr	r3, [pc, #264]	; (80012bc <inSystem+0x2e0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2201      	movs	r2, #1
 80011b8:	771a      	strb	r2, [r3, #28]

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 80011ba:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <inSystem+0x310>)
 80011bc:	4a4c      	ldr	r2, [pc, #304]	; (80012f0 <inSystem+0x314>)
 80011be:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80011c0:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <inSystem+0x310>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80011c6:	4b49      	ldr	r3, [pc, #292]	; (80012ec <inSystem+0x310>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 80011cc:	4b47      	ldr	r3, [pc, #284]	; (80012ec <inSystem+0x310>)
 80011ce:	2202      	movs	r2, #2
 80011d0:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80011d2:	4b46      	ldr	r3, [pc, #280]	; (80012ec <inSystem+0x310>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011d8:	4b44      	ldr	r3, [pc, #272]	; (80012ec <inSystem+0x310>)
 80011da:	2200      	movs	r2, #0
 80011dc:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80011de:	4b43      	ldr	r3, [pc, #268]	; (80012ec <inSystem+0x310>)
 80011e0:	2202      	movs	r2, #2
 80011e2:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 80011e4:	4841      	ldr	r0, [pc, #260]	; (80012ec <inSystem+0x310>)
 80011e6:	f006 ff45 	bl	8008074 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default SET
 80011ea:	2100      	movs	r1, #0
 80011ec:	483f      	ldr	r0, [pc, #252]	; (80012ec <inSystem+0x310>)
 80011ee:	f007 f896 	bl	800831e <GPIO_WritePin_Afopt>
	handler_Motor_Array[1]->configMotor.dir = SET;
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <inSystem+0x2e0>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	771a      	strb	r2, [r3, #28]
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 80011fa:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <inSystem+0x318>)
 80011fc:	4a38      	ldr	r2, [pc, #224]	; (80012e0 <inSystem+0x304>)
 80011fe:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001200:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <inSystem+0x318>)
 8001202:	2200      	movs	r2, #0
 8001204:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <inSystem+0x318>)
 8001208:	2200      	movs	r2, #0
 800120a:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 800120c:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <inSystem+0x318>)
 800120e:	2201      	movs	r2, #1
 8001210:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001212:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <inSystem+0x318>)
 8001214:	2200      	movs	r2, #0
 8001216:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <inSystem+0x318>)
 800121a:	2200      	movs	r2, #0
 800121c:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800121e:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <inSystem+0x318>)
 8001220:	2202      	movs	r2, #2
 8001222:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 8001224:	4b34      	ldr	r3, [pc, #208]	; (80012f8 <inSystem+0x31c>)
 8001226:	4a33      	ldr	r2, [pc, #204]	; (80012f4 <inSystem+0x318>)
 8001228:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 800122a:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <inSystem+0x31c>)
 800122c:	2202      	movs	r2, #2
 800122e:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 8001230:	4831      	ldr	r0, [pc, #196]	; (80012f8 <inSystem+0x31c>)
 8001232:	f005 fe57 	bl	8006ee4 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_1, e_EXTI_PRIORITY_6);
 8001236:	2106      	movs	r1, #6
 8001238:	482f      	ldr	r0, [pc, #188]	; (80012f8 <inSystem+0x31c>)
 800123a:	f006 fcfb 	bl	8007c34 <exti_Set_Priority>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 800123e:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <inSystem+0x320>)
 8001240:	4a27      	ldr	r2, [pc, #156]	; (80012e0 <inSystem+0x304>)
 8001242:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <inSystem+0x320>)
 8001246:	2200      	movs	r2, #0
 8001248:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 800124a:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <inSystem+0x320>)
 800124c:	2200      	movs	r2, #0
 800124e:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8001250:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <inSystem+0x320>)
 8001252:	2203      	movs	r2, #3
 8001254:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001256:	4b29      	ldr	r3, [pc, #164]	; (80012fc <inSystem+0x320>)
 8001258:	2200      	movs	r2, #0
 800125a:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <inSystem+0x320>)
 800125e:	2200      	movs	r2, #0
 8001260:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001262:	4b26      	ldr	r3, [pc, #152]	; (80012fc <inSystem+0x320>)
 8001264:	2202      	movs	r2, #2
 8001266:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 8001268:	4b25      	ldr	r3, [pc, #148]	; (8001300 <inSystem+0x324>)
 800126a:	4a24      	ldr	r2, [pc, #144]	; (80012fc <inSystem+0x320>)
 800126c:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 800126e:	4b24      	ldr	r3, [pc, #144]	; (8001300 <inSystem+0x324>)
 8001270:	2202      	movs	r2, #2
 8001272:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 8001274:	4822      	ldr	r0, [pc, #136]	; (8001300 <inSystem+0x324>)
 8001276:	f005 fe35 	bl	8006ee4 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_2, e_EXTI_PRIORITY_6);
 800127a:	2106      	movs	r1, #6
 800127c:	4820      	ldr	r0, [pc, #128]	; (8001300 <inSystem+0x324>)
 800127e:	f006 fcd9 	bl	8007c34 <exti_Set_Priority>
		/////////A2 TX // A3 RX PARA USART 2 /////////
		////////A9 TX // A10 RX PARA USART 1 ////////

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <inSystem+0x328>)
 8001284:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <inSystem+0x2cc>)
 8001286:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <inSystem+0x328>)
 800128a:	2207      	movs	r2, #7
 800128c:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <inSystem+0x328>)
 8001290:	2202      	movs	r2, #2
 8001292:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <inSystem+0x328>)
 8001296:	2200      	movs	r2, #0
 8001298:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <inSystem+0x328>)
 800129c:	2209      	movs	r2, #9
 800129e:	711a      	strb	r2, [r3, #4]
 80012a0:	e032      	b.n	8001308 <inSystem+0x32c>
 80012a2:	bf00      	nop
 80012a4:	20000244 	.word	0x20000244
 80012a8:	40020000 	.word	0x40020000
 80012ac:	2000051c 	.word	0x2000051c
 80012b0:	20000530 	.word	0x20000530
 80012b4:	20000550 	.word	0x20000550
 80012b8:	20000a70 	.word	0x20000a70
 80012bc:	20000408 	.word	0x20000408
 80012c0:	20000250 	.word	0x20000250
 80012c4:	20000318 	.word	0x20000318
 80012c8:	40000c00 	.word	0x40000c00
 80012cc:	41e00000 	.word	0x41e00000
 80012d0:	40408000 	.word	0x40408000
 80012d4:	2000025c 	.word	0x2000025c
 80012d8:	20000338 	.word	0x20000338
 80012dc:	2000028c 	.word	0x2000028c
 80012e0:	40020800 	.word	0x40020800
 80012e4:	20000280 	.word	0x20000280
 80012e8:	200002a4 	.word	0x200002a4
 80012ec:	20000298 	.word	0x20000298
 80012f0:	40020c00 	.word	0x40020c00
 80012f4:	200002b0 	.word	0x200002b0
 80012f8:	200002e0 	.word	0x200002e0
 80012fc:	200002bc 	.word	0x200002bc
 8001300:	200002e8 	.word	0x200002e8
 8001304:	20000274 	.word	0x20000274
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001308:	4b54      	ldr	r3, [pc, #336]	; (800145c <inSystem+0x480>)
 800130a:	2200      	movs	r2, #0
 800130c:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800130e:	4b53      	ldr	r3, [pc, #332]	; (800145c <inSystem+0x480>)
 8001310:	2203      	movs	r2, #3
 8001312:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 8001314:	4851      	ldr	r0, [pc, #324]	; (800145c <inSystem+0x480>)
 8001316:	f006 fead 	bl	8008074 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 800131a:	4b51      	ldr	r3, [pc, #324]	; (8001460 <inSystem+0x484>)
 800131c:	4a51      	ldr	r2, [pc, #324]	; (8001464 <inSystem+0x488>)
 800131e:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8001320:	4b4f      	ldr	r3, [pc, #316]	; (8001460 <inSystem+0x484>)
 8001322:	2207      	movs	r2, #7
 8001324:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001326:	4b4e      	ldr	r3, [pc, #312]	; (8001460 <inSystem+0x484>)
 8001328:	2202      	movs	r2, #2
 800132a:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800132c:	4b4c      	ldr	r3, [pc, #304]	; (8001460 <inSystem+0x484>)
 800132e:	2200      	movs	r2, #0
 8001330:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 8001332:	4b4b      	ldr	r3, [pc, #300]	; (8001460 <inSystem+0x484>)
 8001334:	220a      	movs	r2, #10
 8001336:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001338:	4b49      	ldr	r3, [pc, #292]	; (8001460 <inSystem+0x484>)
 800133a:	2200      	movs	r2, #0
 800133c:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800133e:	4b48      	ldr	r3, [pc, #288]	; (8001460 <inSystem+0x484>)
 8001340:	2203      	movs	r2, #3
 8001342:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 8001344:	4846      	ldr	r0, [pc, #280]	; (8001460 <inSystem+0x484>)
 8001346:	f006 fe95 	bl	8008074 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART1;
 800134a:	4b47      	ldr	r3, [pc, #284]	; (8001468 <inSystem+0x48c>)
 800134c:	4a47      	ldr	r2, [pc, #284]	; (800146c <inSystem+0x490>)
 800134e:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_100MHz_VELOCITY;
 8001350:	4b45      	ldr	r3, [pc, #276]	; (8001468 <inSystem+0x48c>)
 8001352:	4a47      	ldr	r2, [pc, #284]	; (8001470 <inSystem+0x494>)
 8001354:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8001356:	4b44      	ldr	r3, [pc, #272]	; (8001468 <inSystem+0x48c>)
 8001358:	2201      	movs	r2, #1
 800135a:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 800135c:	4b42      	ldr	r3, [pc, #264]	; (8001468 <inSystem+0x48c>)
 800135e:	2201      	movs	r2, #1
 8001360:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8001362:	4b41      	ldr	r3, [pc, #260]	; (8001468 <inSystem+0x48c>)
 8001364:	2200      	movs	r2, #0
 8001366:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8001368:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <inSystem+0x48c>)
 800136a:	2202      	movs	r2, #2
 800136c:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 800136e:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <inSystem+0x48c>)
 8001370:	2200      	movs	r2, #0
 8001372:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8001374:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <inSystem+0x48c>)
 8001376:	2200      	movs	r2, #0
 8001378:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 800137a:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <inSystem+0x48c>)
 800137c:	2200      	movs	r2, #0
 800137e:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 8001380:	4839      	ldr	r0, [pc, #228]	; (8001468 <inSystem+0x48c>)
 8001382:	f008 fcf9 	bl	8009d78 <USART_Config>
	usart_Set_Priority(&handlerUSART, e_USART_PRIORITY_6);
 8001386:	2106      	movs	r1, #6
 8001388:	4837      	ldr	r0, [pc, #220]	; (8001468 <inSystem+0x48c>)
 800138a:	f009 f9a9 	bl	800a6e0 <usart_Set_Priority>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 800138e:	4b39      	ldr	r3, [pc, #228]	; (8001474 <inSystem+0x498>)
 8001390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001394:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8001396:	4b37      	ldr	r3, [pc, #220]	; (8001474 <inSystem+0x498>)
 8001398:	2201      	movs	r2, #1
 800139a:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 800139c:	4b35      	ldr	r3, [pc, #212]	; (8001474 <inSystem+0x498>)
 800139e:	2200      	movs	r2, #0
 80013a0:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 80013a2:	4b34      	ldr	r3, [pc, #208]	; (8001474 <inSystem+0x498>)
 80013a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013a8:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 80013aa:	4b32      	ldr	r3, [pc, #200]	; (8001474 <inSystem+0x498>)
 80013ac:	2210      	movs	r2, #16
 80013ae:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 80013b0:	4830      	ldr	r0, [pc, #192]	; (8001474 <inSystem+0x498>)
 80013b2:	f005 f8e5 	bl	8006580 <BasicTimer_Config>
	TIM_SetPriority(&handlerTIM2_PARAMETROS_MOVIMIENTO, e_TIM_PRIORITY_6);
 80013b6:	2106      	movs	r1, #6
 80013b8:	482e      	ldr	r0, [pc, #184]	; (8001474 <inSystem+0x498>)
 80013ba:	f005 fa9f 	bl	80068fc <TIM_SetPriority>
	startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 80013be:	482d      	ldr	r0, [pc, #180]	; (8001474 <inSystem+0x498>)
 80013c0:	f005 fd24 	bl	8006e0c <startTimer>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 80013c4:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <inSystem+0x49c>)
 80013c6:	4a2d      	ldr	r2, [pc, #180]	; (800147c <inSystem+0x4a0>)
 80013c8:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80013ca:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <inSystem+0x49c>)
 80013cc:	2204      	movs	r2, #4
 80013ce:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80013d0:	4b29      	ldr	r3, [pc, #164]	; (8001478 <inSystem+0x49c>)
 80013d2:	2202      	movs	r2, #2
 80013d4:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 80013d6:	4b28      	ldr	r3, [pc, #160]	; (8001478 <inSystem+0x49c>)
 80013d8:	2208      	movs	r2, #8
 80013da:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80013dc:	4b26      	ldr	r3, [pc, #152]	; (8001478 <inSystem+0x49c>)
 80013de:	2201      	movs	r2, #1
 80013e0:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013e2:	4b25      	ldr	r3, [pc, #148]	; (8001478 <inSystem+0x49c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80013e8:	4b23      	ldr	r3, [pc, #140]	; (8001478 <inSystem+0x49c>)
 80013ea:	2202      	movs	r2, #2
 80013ec:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <inSystem+0x4a4>)
 80013f0:	4a22      	ldr	r2, [pc, #136]	; (800147c <inSystem+0x4a0>)
 80013f2:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <inSystem+0x4a4>)
 80013f6:	2204      	movs	r2, #4
 80013f8:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <inSystem+0x4a4>)
 80013fc:	2202      	movs	r2, #2
 80013fe:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <inSystem+0x4a4>)
 8001402:	2209      	movs	r2, #9
 8001404:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <inSystem+0x4a4>)
 8001408:	2201      	movs	r2, #1
 800140a:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <inSystem+0x4a4>)
 800140e:	2200      	movs	r2, #0
 8001410:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <inSystem+0x4a4>)
 8001414:	2202      	movs	r2, #2
 8001416:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <inSystem+0x4a8>)
 800141a:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <inSystem+0x4ac>)
 800141c:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <inSystem+0x4a8>)
 8001420:	2232      	movs	r2, #50	; 0x32
 8001422:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <inSystem+0x4a8>)
 8001426:	2268      	movs	r2, #104	; 0x68
 8001428:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <inSystem+0x4a8>)
 800142c:	2201      	movs	r2, #1
 800142e:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <inSystem+0x4b0>)
 8001432:	4a11      	ldr	r2, [pc, #68]	; (8001478 <inSystem+0x49c>)
 8001434:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <inSystem+0x4b0>)
 8001438:	4a11      	ldr	r2, [pc, #68]	; (8001480 <inSystem+0x4a4>)
 800143a:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <inSystem+0x4b0>)
 800143e:	4a11      	ldr	r2, [pc, #68]	; (8001484 <inSystem+0x4a8>)
 8001440:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <inSystem+0x4b0>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <inSystem+0x4b0>)
 800144a:	2200      	movs	r2, #0
 800144c:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 800144e:	480f      	ldr	r0, [pc, #60]	; (800148c <inSystem+0x4b0>)
 8001450:	f006 ffc8 	bl	80083e4 <configMPUAccel>

}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000274 	.word	0x20000274
 8001460:	20000268 	.word	0x20000268
 8001464:	40020000 	.word	0x40020000
 8001468:	20000358 	.word	0x20000358
 800146c:	40011000 	.word	0x40011000
 8001470:	05f5e100 	.word	0x05f5e100
 8001474:	200002f0 	.word	0x200002f0
 8001478:	200002c8 	.word	0x200002c8
 800147c:	40020400 	.word	0x40020400
 8001480:	200002d4 	.word	0x200002d4
 8001484:	200003ec 	.word	0x200003ec
 8001488:	40005400 	.word	0x40005400
 800148c:	200003f8 	.word	0x200003f8

08001490 <vTask_Menu>:


//////////////////////////////////////////////////////////////////////// MENU STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Menu( void * pvParameters ){
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af02      	add	r7, sp, #8
 8001496:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t *cmd;

	const char* msg_menu = "\n===============================================\n"
 8001498:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <vTask_Menu+0x168>)
 800149a:	60fb      	str	r3, [r7, #12]
						   "Enter your choice here:";

	while (1){

		// Envia a imprimir en la consola lo que se debe mostrar en el menu
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 800149c:	4b57      	ldr	r3, [pc, #348]	; (80015fc <vTask_Menu+0x16c>)
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	f107 010c 	add.w	r1, r7, #12
 80014a4:	2300      	movs	r3, #0
 80014a6:	f04f 32ff 	mov.w	r2, #4294967295
 80014aa:	f002 fad9 	bl	8003a60 <xQueueGenericSend>

		// Se queda esperando a recibir el comando que se debe ejecutar
		xTaskNotifyWait (0,0,&cmd_addr, portMAX_DELAY);
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	f04f 32ff 	mov.w	r2, #4294967295
 80014b6:	9200      	str	r2, [sp, #0]
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2000      	movs	r0, #0
 80014be:	f003 fd75 	bl	8004fac <xTaskGenericNotifyWait>
		cmd = (command_t *) cmd_addr;
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	617b      	str	r3, [r7, #20]

		if (end){
 80014c6:	4b4e      	ldr	r3, [pc, #312]	; (8001600 <vTask_Menu+0x170>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00c      	beq.n	80014e8 <vTask_Menu+0x58>

			 next_state = sMainMenu; // Cambiamos el estado actual al de menu
 80014ce:	4b4d      	ldr	r3, [pc, #308]	; (8001604 <vTask_Menu+0x174>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
			 end = RESET; // Bajamos la bandera
 80014d4:	4b4a      	ldr	r3, [pc, #296]	; (8001600 <vTask_Menu+0x170>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]

			 //Reseteamos la cola para recibir nuevos comandos
			 xQueueReset(xQueue_InputData);
 80014da:	4b4b      	ldr	r3, [pc, #300]	; (8001608 <vTask_Menu+0x178>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 f9d3 	bl	800388c <xQueueGenericReset>
 80014e6:	e7d9      	b.n	800149c <vTask_Menu+0xc>
		}else{

			// El comando recibido solo tener el largo de 1 caracter
			if(cmd->functionType != -1){
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f0:	d055      	beq.n	800159e <vTask_Menu+0x10e>

				switch (cmd->functionType) {
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d03c      	beq.n	8001574 <vTask_Menu+0xe4>
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	dc79      	bgt.n	80015f2 <vTask_Menu+0x162>
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d002      	beq.n	8001508 <vTask_Menu+0x78>
 8001502:	2b02      	cmp	r3, #2
 8001504:	d01b      	beq.n	800153e <vTask_Menu+0xae>

						break;
					}
					default:{
						///////
						continue;}
 8001506:	e074      	b.n	80015f2 <vTask_Menu+0x162>
						xQueueSend(xQueue_Print,&msg_option_1,portMAX_DELAY);
 8001508:	4b3c      	ldr	r3, [pc, #240]	; (80015fc <vTask_Menu+0x16c>)
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	2300      	movs	r3, #0
 800150e:	f04f 32ff 	mov.w	r2, #4294967295
 8001512:	493e      	ldr	r1, [pc, #248]	; (800160c <vTask_Menu+0x17c>)
 8001514:	f002 faa4 	bl	8003a60 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001518:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <vTask_Menu+0x178>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f002 f9b4 	bl	800388c <xQueueGenericReset>
						next_state = sGo;
 8001524:	4b37      	ldr	r3, [pc, #220]	; (8001604 <vTask_Menu+0x174>)
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Go, 0 ,eNoAction); // NOS VAMOS AL ESTADO sGo
 800152a:	4b39      	ldr	r3, [pc, #228]	; (8001610 <vTask_Menu+0x180>)
 800152c:	6818      	ldr	r0, [r3, #0]
 800152e:	2300      	movs	r3, #0
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2300      	movs	r3, #0
 8001534:	2200      	movs	r2, #0
 8001536:	2100      	movs	r1, #0
 8001538:	f003 fdb8 	bl	80050ac <xTaskGenericNotify>
						break;
 800153c:	e05a      	b.n	80015f4 <vTask_Menu+0x164>
						xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 800153e:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <vTask_Menu+0x16c>)
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	2300      	movs	r3, #0
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	4932      	ldr	r1, [pc, #200]	; (8001614 <vTask_Menu+0x184>)
 800154a:	f002 fa89 	bl	8003a60 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 800154e:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <vTask_Menu+0x178>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f002 f999 	bl	800388c <xQueueGenericReset>
						next_state = sGoTo;
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <vTask_Menu+0x174>)
 800155c:	2202      	movs	r2, #2
 800155e:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_GoTo, 0 ,eNoAction); // NOS VAMOS AL ESTADO sGo
 8001560:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <vTask_Menu+0x188>)
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	2300      	movs	r3, #0
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2300      	movs	r3, #0
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	f003 fd9d 	bl	80050ac <xTaskGenericNotify>
						break;
 8001572:	e03f      	b.n	80015f4 <vTask_Menu+0x164>
						xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <vTask_Menu+0x16c>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	2300      	movs	r3, #0
 800157a:	f04f 32ff 	mov.w	r2, #4294967295
 800157e:	4925      	ldr	r1, [pc, #148]	; (8001614 <vTask_Menu+0x184>)
 8001580:	f002 fa6e 	bl	8003a60 <xQueueGenericSend>
						next_state = sMainMenu;
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <vTask_Menu+0x174>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Menu,0,eNoAction);
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <vTask_Menu+0x18c>)
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	2300      	movs	r3, #0
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2300      	movs	r3, #0
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	f003 fd88 	bl	80050ac <xTaskGenericNotify>
						break;
 800159c:	e02a      	b.n	80015f4 <vTask_Menu+0x164>
				}

			}else{
				xQueueSend(xQueue_Print, &msg_invalid,portMAX_DELAY);
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <vTask_Menu+0x16c>)
 80015a0:	6818      	ldr	r0, [r3, #0]
 80015a2:	2300      	movs	r3, #0
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295
 80015a8:	491d      	ldr	r1, [pc, #116]	; (8001620 <vTask_Menu+0x190>)
 80015aa:	f002 fa59 	bl	8003a60 <xQueueGenericSend>
				//Aca se deberia notificar cambiar la variable next_state y notificar
				wrong_command = RESET; // RESETEAMOS LA BANDERA
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <vTask_Menu+0x194>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
				xQueueReset(xQueue_InputData); // Reseteamos la cola que recibe los comandos
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <vTask_Menu+0x178>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f002 f966 	bl	800388c <xQueueGenericReset>
				memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2240      	movs	r2, #64	; 0x40
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f009 fb52 	bl	800ac70 <memset>

				xTaskNotify(xHandleTask_Menu,0,eNoAction); // Notificamos a la funcion menu para que pueda inmediatamente mandar de nuevo el menu
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <vTask_Menu+0x18c>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	2300      	movs	r3, #0
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2300      	movs	r3, #0
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	f003 fd67 	bl	80050ac <xTaskGenericNotify>
				xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2300      	movs	r3, #0
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2000      	movs	r0, #0
 80015ec:	f003 fcde 	bl	8004fac <xTaskGenericNotifyWait>
 80015f0:	e754      	b.n	800149c <vTask_Menu+0xc>
						continue;}
 80015f2:	bf00      	nop
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 80015f4:	e752      	b.n	800149c <vTask_Menu+0xc>
 80015f6:	bf00      	nop
 80015f8:	0800fc2c 	.word	0x0800fc2c
 80015fc:	20000238 	.word	0x20000238
 8001600:	20000527 	.word	0x20000527
 8001604:	2000051e 	.word	0x2000051e
 8001608:	2000023c 	.word	0x2000023c
 800160c:	20000008 	.word	0x20000008
 8001610:	20000228 	.word	0x20000228
 8001614:	2000000c 	.word	0x2000000c
 8001618:	20000230 	.word	0x20000230
 800161c:	20000218 	.word	0x20000218
 8001620:	20000004 	.word	0x20000004
 8001624:	20000526 	.word	0x20000526

08001628 <vTask_Commands>:
	}// Fin del loop de esta tarea

}


void vTask_Commands( void * pvParameters ){
 8001628:	b580      	push	{r7, lr}
 800162a:	b096      	sub	sp, #88	; 0x58
 800162c:	af02      	add	r7, sp, #8
 800162e:	6078      	str	r0, [r7, #4]

	BaseType_t notify_status = {0};
 8001630:	2300      	movs	r3, #0
 8001632:	64fb      	str	r3, [r7, #76]	; 0x4c
	command_t cmd = {0};
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	2244      	movs	r2, #68	; 0x44
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f009 fb17 	bl	800ac70 <memset>

   while(1){

	   //Esperamos la notificacion desde la interrupcion
	   notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2300      	movs	r3, #0
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2000      	movs	r0, #0
 8001650:	f003 fcac 	bl	8004fac <xTaskGenericNotifyWait>
 8001654:	64f8      	str	r0, [r7, #76]	; 0x4c

	   //Cuando es verdadero significa que se recibio una notificacion
	   if (notify_status == pdPASS){
 8001656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001658:	2b01      	cmp	r3, #1
 800165a:	d1f2      	bne.n	8001642 <vTask_Commands+0x1a>

		   process_command(&cmd);
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4618      	mov	r0, r3
 8001662:	f000 f9e7 	bl	8001a34 <process_command>
	   notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001666:	e7ec      	b.n	8001642 <vTask_Commands+0x1a>

08001668 <vTask_Stop>:


////////////////////////////////////////////////////////////////////////STOP STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Stop( void * pvParameters ){
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af02      	add	r7, sp, #8
 800166e:	6078      	str	r0, [r7, #4]

	while(1){
		 //Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2300      	movs	r3, #0
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	2000      	movs	r0, #0
 800167e:	f003 fc95 	bl	8004fac <xTaskGenericNotifyWait>

		 // Este comando lo que busca es apagar el robot y detenerlo de su estado de movimiento
		stop(handler_Motor_Array); // Apagamos los motores
 8001682:	4810      	ldr	r0, [pc, #64]	; (80016c4 <vTask_Stop+0x5c>)
 8001684:	f001 fa2f 	bl	8002ae6 <stop>

		// Bajamos las banderas de movimiento alguno
		flag_Go_Straigh   = RESET;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <vTask_Stop+0x60>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
		flag_GoTo_Straigh = RESET;
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <vTask_Stop+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
		flag_Roll         = RESET;
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <vTask_Stop+0x68>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
		flag_RollTo       = RESET;
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <vTask_Stop+0x6c>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
		Mode_dir.Mode     = None;
 80016a0:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <vTask_Stop+0x70>)
 80016a2:	2202      	movs	r2, #2
 80016a4:	701a      	strb	r2, [r3, #0]

		 if (end){
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <vTask_Stop+0x74>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0e0      	beq.n	8001670 <vTask_Stop+0x8>
			 xTaskNotify(xHandleTask_Menu,0, eNoAction);
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <vTask_Stop+0x78>)
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	2300      	movs	r3, #0
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2300      	movs	r3, #0
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	f003 fcf6 	bl	80050ac <xTaskGenericNotify>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80016c0:	e7d6      	b.n	8001670 <vTask_Stop+0x8>
 80016c2:	bf00      	nop
 80016c4:	20000408 	.word	0x20000408
 80016c8:	20000521 	.word	0x20000521
 80016cc:	20000522 	.word	0x20000522
 80016d0:	20000524 	.word	0x20000524
 80016d4:	20000525 	.word	0x20000525
 80016d8:	2000051c 	.word	0x2000051c
 80016dc:	20000527 	.word	0x20000527
 80016e0:	20000218 	.word	0x20000218

080016e4 <vTask_Go>:


////////////////////////////////////////////////////////////////////////GO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Go( void * pvParameters ){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	6078      	str	r0, [r7, #4]


	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2300      	movs	r3, #0
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	2000      	movs	r0, #0
 80016fa:	f003 fc57 	bl	8004fac <xTaskGenericNotifyWait>

		// Si estamos aqui se quiere solo que el robot vaya hacia adelante y el linea recta
		Mode_dir.Mode = Line;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <vTask_Go+0x3c>)
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <vTask_Go+0x40>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <vTask_Go+0x3c>)
 800170c:	705a      	strb	r2, [r3, #1]

		resetParameters();
 800170e:	f001 ff03 	bl	8003518 <resetParameters>

		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001712:	4b03      	ldr	r3, [pc, #12]	; (8001720 <vTask_Go+0x3c>)
 8001714:	6819      	ldr	r1, [r3, #0]
 8001716:	4804      	ldr	r0, [pc, #16]	; (8001728 <vTask_Go+0x44>)
 8001718:	f001 f8fa 	bl	8002910 <On_motor_Straigh_Roll>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800171c:	e7e6      	b.n	80016ec <vTask_Go+0x8>
 800171e:	bf00      	nop
 8001720:	2000051c 	.word	0x2000051c
 8001724:	20000490 	.word	0x20000490
 8001728:	20000408 	.word	0x20000408

0800172c <vTask_Control>:


}


void vTask_Control( void * pvParameters ){
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af06      	add	r7, sp, #24
 8001732:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2300      	movs	r3, #0
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2000      	movs	r0, #0
 8001742:	f003 fc33 	bl	8004fac <xTaskGenericNotifyWait>

		 switch (next_state) {
 8001746:	4b41      	ldr	r3, [pc, #260]	; (800184c <vTask_Control+0x120>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d002      	beq.n	8001754 <vTask_Control+0x28>
 800174e:	2b02      	cmp	r3, #2
 8001750:	d01c      	beq.n	800178c <vTask_Control+0x60>
				}


				break;
			}
			default:{break;}
 8001752:	e07a      	b.n	800184a <vTask_Control+0x11e>
				go(handler_Motor_Array,
 8001754:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <vTask_Control+0x124>)
 8001756:	ed93 7b00 	vldr	d7, [r3]
 800175a:	4b3e      	ldr	r3, [pc, #248]	; (8001854 <vTask_Control+0x128>)
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001762:	4b3d      	ldr	r3, [pc, #244]	; (8001858 <vTask_Control+0x12c>)
 8001764:	9304      	str	r3, [sp, #16]
 8001766:	4b3d      	ldr	r3, [pc, #244]	; (800185c <vTask_Control+0x130>)
 8001768:	9303      	str	r3, [sp, #12]
 800176a:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <vTask_Control+0x134>)
 800176c:	9302      	str	r3, [sp, #8]
 800176e:	4b3d      	ldr	r3, [pc, #244]	; (8001864 <vTask_Control+0x138>)
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <vTask_Control+0x13c>)
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	eeb0 0a47 	vmov.f32	s0, s14
 800177a:	eef0 0a67 	vmov.f32	s1, s15
 800177e:	4b3b      	ldr	r3, [pc, #236]	; (800186c <vTask_Control+0x140>)
 8001780:	4a3b      	ldr	r2, [pc, #236]	; (8001870 <vTask_Control+0x144>)
 8001782:	493c      	ldr	r1, [pc, #240]	; (8001874 <vTask_Control+0x148>)
 8001784:	483c      	ldr	r0, [pc, #240]	; (8001878 <vTask_Control+0x14c>)
 8001786:	f001 fc5d 	bl	8003044 <go>
				break;
 800178a:	e05e      	b.n	800184a <vTask_Control+0x11e>
				distance_to_go = distance_traveled(&parameters_Path_Robot, parameters_Pos_Robot.xg_position, parameters_Pos_Robot.yg_position);
 800178c:	4b38      	ldr	r3, [pc, #224]	; (8001870 <vTask_Control+0x144>)
 800178e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001792:	4b37      	ldr	r3, [pc, #220]	; (8001870 <vTask_Control+0x144>)
 8001794:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8001798:	eeb0 1a46 	vmov.f32	s2, s12
 800179c:	eef0 1a66 	vmov.f32	s3, s13
 80017a0:	eeb0 0a47 	vmov.f32	s0, s14
 80017a4:	eef0 0a67 	vmov.f32	s1, s15
 80017a8:	4830      	ldr	r0, [pc, #192]	; (800186c <vTask_Control+0x140>)
 80017aa:	f007 fa29 	bl	8008c00 <distance_traveled>
 80017ae:	eeb0 7a40 	vmov.f32	s14, s0
 80017b2:	eef0 7a60 	vmov.f32	s15, s1
 80017b6:	4b31      	ldr	r3, [pc, #196]	; (800187c <vTask_Control+0x150>)
 80017b8:	ed83 7b00 	vstr	d7, [r3]
				go(handler_Motor_Array,
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <vTask_Control+0x124>)
 80017be:	ed93 7b00 	vldr	d7, [r3]
 80017c2:	4b24      	ldr	r3, [pc, #144]	; (8001854 <vTask_Control+0x128>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <vTask_Control+0x12c>)
 80017cc:	9304      	str	r3, [sp, #16]
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <vTask_Control+0x130>)
 80017d0:	9303      	str	r3, [sp, #12]
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <vTask_Control+0x134>)
 80017d4:	9302      	str	r3, [sp, #8]
 80017d6:	4b23      	ldr	r3, [pc, #140]	; (8001864 <vTask_Control+0x138>)
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	4b23      	ldr	r3, [pc, #140]	; (8001868 <vTask_Control+0x13c>)
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	eeb0 0a47 	vmov.f32	s0, s14
 80017e2:	eef0 0a67 	vmov.f32	s1, s15
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <vTask_Control+0x140>)
 80017e8:	4a21      	ldr	r2, [pc, #132]	; (8001870 <vTask_Control+0x144>)
 80017ea:	4922      	ldr	r1, [pc, #136]	; (8001874 <vTask_Control+0x148>)
 80017ec:	4822      	ldr	r0, [pc, #136]	; (8001878 <vTask_Control+0x14c>)
 80017ee:	f001 fc29 	bl	8003044 <go>
				if (!(abs(distance_to_go) < parameters_Path_Robot.line_Distance)){
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <vTask_Control+0x150>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff f9c4 	bl	8000b88 <__aeabi_d2iz>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	bfb8      	it	lt
 8001806:	425b      	neglt	r3, r3
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fea3 	bl	8000554 <__aeabi_i2d>
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <vTask_Control+0x140>)
 8001810:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001814:	2401      	movs	r4, #1
 8001816:	f7ff f979 	bl	8000b0c <__aeabi_dcmplt>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <vTask_Control+0xf8>
 8001820:	2300      	movs	r3, #0
 8001822:	461c      	mov	r4, r3
 8001824:	b2e3      	uxtb	r3, r4
 8001826:	f083 0301 	eor.w	r3, r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00b      	beq.n	8001848 <vTask_Control+0x11c>
					end = SET;
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <vTask_Control+0x154>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 8001836:	4b13      	ldr	r3, [pc, #76]	; (8001884 <vTask_Control+0x158>)
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	2300      	movs	r3, #0
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2300      	movs	r3, #0
 8001840:	2200      	movs	r2, #0
 8001842:	2100      	movs	r1, #0
 8001844:	f003 fc32 	bl	80050ac <xTaskGenericNotify>
				break;
 8001848:	bf00      	nop
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800184a:	e773      	b.n	8001734 <vTask_Control+0x8>
 800184c:	2000051e 	.word	0x2000051e
 8001850:	20000ac0 	.word	0x20000ac0
 8001854:	2000051c 	.word	0x2000051c
 8001858:	200004dc 	.word	0x200004dc
 800185c:	20000523 	.word	0x20000523
 8001860:	20000520 	.word	0x20000520
 8001864:	2000051f 	.word	0x2000051f
 8001868:	20000530 	.word	0x20000530
 800186c:	20000550 	.word	0x20000550
 8001870:	20000a70 	.word	0x20000a70
 8001874:	200003f8 	.word	0x200003f8
 8001878:	20000408 	.word	0x20000408
 800187c:	20000ae0 	.word	0x20000ae0
 8001880:	20000527 	.word	0x20000527
 8001884:	20000224 	.word	0x20000224

08001888 <vTask_GoTo>:
////////////////////////////////////////////////////////////////////////GOTO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void vTask_GoTo( void * pvParameters ){
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af02      	add	r7, sp, #8
 800188e:	6078      	str	r0, [r7, #4]
	// En esta tarea querremos ir solo hacia un punto deseado por el usuario

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2300      	movs	r3, #0
 8001898:	2200      	movs	r2, #0
 800189a:	2100      	movs	r1, #0
 800189c:	2000      	movs	r0, #0
 800189e:	f003 fb85 	bl	8004fac <xTaskGenericNotifyWait>

		// Si estamos aqui se quiere solo que el robot vaya hacia adelante y el linea recta
		Mode_dir.Mode = Line;
 80018a2:	4b34      	ldr	r3, [pc, #208]	; (8001974 <vTask_GoTo+0xec>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 80018a8:	4b33      	ldr	r3, [pc, #204]	; (8001978 <vTask_GoTo+0xf0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b31      	ldr	r3, [pc, #196]	; (8001974 <vTask_GoTo+0xec>)
 80018b0:	705a      	strb	r2, [r3, #1]

		// Almacenamos la distancia en milimetros a recorrer
		parameters_Path_Robot.line_Distance = sparam;
 80018b2:	4b32      	ldr	r3, [pc, #200]	; (800197c <vTask_GoTo+0xf4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe3c 	bl	8000534 <__aeabi_ui2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	492f      	ldr	r1, [pc, #188]	; (8001980 <vTask_GoTo+0xf8>)
 80018c2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

		resetParameters();
 80018c6:	f001 fe27 	bl	8003518 <resetParameters>

		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 80018ca:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <vTask_GoTo+0xec>)
 80018cc:	6819      	ldr	r1, [r3, #0]
 80018ce:	482d      	ldr	r0, [pc, #180]	; (8001984 <vTask_GoTo+0xfc>)
 80018d0:	f001 f81e 	bl	8002910 <On_motor_Straigh_Roll>

		// seteamos la posicion inicial como la posicion actual global del robot
		parameters_Path_Robot.start_position_x = parameters_Pos_Robot.xg_position;
 80018d4:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <vTask_GoTo+0x100>)
 80018d6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80018da:	4929      	ldr	r1, [pc, #164]	; (8001980 <vTask_GoTo+0xf8>)
 80018dc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		parameters_Path_Robot.start_position_y = parameters_Pos_Robot.yg_position;
 80018e0:	4b29      	ldr	r3, [pc, #164]	; (8001988 <vTask_GoTo+0x100>)
 80018e2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80018e6:	4926      	ldr	r1, [pc, #152]	; (8001980 <vTask_GoTo+0xf8>)
 80018e8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		// seteamos la posicion final usando parametros polares

		//Usando el angulo actual global con respecto al eje x se tiene que
		parameters_Path_Robot.goal_Position_x = parameters_Path_Robot.line_Distance * cos(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_x ; // usando la funcion coseno para hallar la coordenada x de llegada
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <vTask_GoTo+0xf8>)
 80018ee:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80018f2:	4b25      	ldr	r3, [pc, #148]	; (8001988 <vTask_GoTo+0x100>)
 80018f4:	ed93 7b04 	vldr	d7, [r3, #16]
 80018f8:	eeb0 0a47 	vmov.f32	s0, s14
 80018fc:	eef0 0a67 	vmov.f32	s1, s15
 8001900:	f00b febe 	bl	800d680 <cos>
 8001904:	ec53 2b10 	vmov	r2, r3, d0
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7fe fe8c 	bl	8000628 <__aeabi_dmul>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <vTask_GoTo+0xf8>)
 800191a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800191e:	f7fe fccd 	bl	80002bc <__adddf3>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4916      	ldr	r1, [pc, #88]	; (8001980 <vTask_GoTo+0xf8>)
 8001928:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		parameters_Path_Robot.goal_Position_y = parameters_Path_Robot.line_Distance * sin(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_y ; //usando la funcion coseno para hallar la coordenada y de llegada
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <vTask_GoTo+0xf8>)
 800192e:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <vTask_GoTo+0x100>)
 8001934:	ed93 7b04 	vldr	d7, [r3, #16]
 8001938:	eeb0 0a47 	vmov.f32	s0, s14
 800193c:	eef0 0a67 	vmov.f32	s1, s15
 8001940:	f00b ff3a 	bl	800d7b8 <sin>
 8001944:	ec53 2b10 	vmov	r2, r3, d0
 8001948:	4620      	mov	r0, r4
 800194a:	4629      	mov	r1, r5
 800194c:	f7fe fe6c 	bl	8000628 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <vTask_GoTo+0xf8>)
 800195a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800195e:	f7fe fcad 	bl	80002bc <__adddf3>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4906      	ldr	r1, [pc, #24]	; (8001980 <vTask_GoTo+0xf8>)
 8001968:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		// definimos los parametros del camino en funcion de la situacion actual
		calculation_parameter_distance(&parameters_Path_Robot);
 800196c:	4804      	ldr	r0, [pc, #16]	; (8001980 <vTask_GoTo+0xf8>)
 800196e:	f007 f85b 	bl	8008a28 <calculation_parameter_distance>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001972:	e78d      	b.n	8001890 <vTask_GoTo+0x8>
 8001974:	2000051c 	.word	0x2000051c
 8001978:	20000490 	.word	0x20000490
 800197c:	20000494 	.word	0x20000494
 8001980:	20000550 	.word	0x20000550
 8001984:	20000408 	.word	0x20000408
 8001988:	20000a70 	.word	0x20000a70

0800198c <vTask_Print>:





void vTask_Print( void * pvParameters ){
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

	uint32_t *msg;

   while(1){

	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <vTask_Print+0x28>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f107 010c 	add.w	r1, r7, #12
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fa05 	bl	8003db0 <xQueueReceive>
	   //usart write command
	   writeMsg(&handlerUSART, (char*) msg);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4619      	mov	r1, r3
 80019aa:	4803      	ldr	r0, [pc, #12]	; (80019b8 <vTask_Print+0x2c>)
 80019ac:	f008 fdd2 	bl	800a554 <writeMsg>
	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 80019b0:	e7f0      	b.n	8001994 <vTask_Print+0x8>
 80019b2:	bf00      	nop
 80019b4:	20000238 	.word	0x20000238
 80019b8:	20000358 	.word	0x20000358

080019bc <vTask_NOP>:
   }
}


void vTask_NOP( void * pvParameters ){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af06      	add	r7, sp, #24
 80019c2:	6078      	str	r0, [r7, #4]

	// esta tarea se ejecuta cada vez que haya una interrupcion del timer, es solo para calcular los datos necesarios cuando no hay operacion

	 while(1){
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2300      	movs	r3, #0
 80019cc:	2200      	movs	r2, #0
 80019ce:	2100      	movs	r1, #0
 80019d0:	2000      	movs	r0, #0
 80019d2:	f003 faeb 	bl	8004fac <xTaskGenericNotifyWait>

		 NOP(handler_Motor_Array,
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <vTask_NOP+0x50>)
 80019d8:	ed93 7b00 	vldr	d7, [r3]
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <vTask_NOP+0x54>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	f8ad 3010 	strh.w	r3, [sp, #16]
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <vTask_NOP+0x58>)
 80019e6:	9303      	str	r3, [sp, #12]
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <vTask_NOP+0x5c>)
 80019ea:	9302      	str	r3, [sp, #8]
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <vTask_NOP+0x60>)
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <vTask_NOP+0x64>)
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	eeb0 0a47 	vmov.f32	s0, s14
 80019f8:	eef0 0a67 	vmov.f32	s1, s15
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <vTask_NOP+0x68>)
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <vTask_NOP+0x6c>)
 8001a00:	490a      	ldr	r1, [pc, #40]	; (8001a2c <vTask_NOP+0x70>)
 8001a02:	480b      	ldr	r0, [pc, #44]	; (8001a30 <vTask_NOP+0x74>)
 8001a04:	f001 fbb2 	bl	800316c <NOP>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001a08:	e7dc      	b.n	80019c4 <vTask_NOP+0x8>
 8001a0a:	bf00      	nop
 8001a0c:	20000ac0 	.word	0x20000ac0
 8001a10:	2000051c 	.word	0x2000051c
 8001a14:	2000049c 	.word	0x2000049c
 8001a18:	20000523 	.word	0x20000523
 8001a1c:	20000520 	.word	0x20000520
 8001a20:	2000051f 	.word	0x2000051f
 8001a24:	20000550 	.word	0x20000550
 8001a28:	20000a70 	.word	0x20000a70
 8001a2c:	200003f8 	.word	0x200003f8
 8001a30:	20000408 	.word	0x20000408

08001a34 <process_command>:
			Mode_dir);
	}

}

void process_command (command_t *cmd){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af02      	add	r7, sp, #8
 8001a3a:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f837 	bl	8001ab0 <extract_command>


	if (next_state == sMainMenu){
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <process_command+0x68>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <process_command+0x2a>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <process_command+0x6c>)
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	2300      	movs	r3, #0
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	2303      	movs	r3, #3
 8001a56:	2100      	movs	r1, #0
 8001a58:	f003 fb28 	bl	80050ac <xTaskGenericNotify>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
	}


}
 8001a5c:	e019      	b.n	8001a92 <process_command+0x5e>
	}else if (!wrong_command){
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <process_command+0x70>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10c      	bne.n	8001a80 <process_command+0x4c>
		end = SET;
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <process_command+0x74>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	701a      	strb	r2, [r3, #0]
		xTaskNotify(xHandleTask_Stop,0, eNoAction);
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <process_command+0x78>)
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	2300      	movs	r3, #0
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2300      	movs	r3, #0
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	f003 fb17 	bl	80050ac <xTaskGenericNotify>
}
 8001a7e:	e008      	b.n	8001a92 <process_command+0x5e>
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <process_command+0x6c>)
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	2300      	movs	r3, #0
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	f003 fb0d 	bl	80050ac <xTaskGenericNotify>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000051e 	.word	0x2000051e
 8001aa0:	20000218 	.word	0x20000218
 8001aa4:	20000526 	.word	0x20000526
 8001aa8:	20000527 	.word	0x20000527
 8001aac:	20000224 	.word	0x20000224

08001ab0 <extract_command>:


int extract_command (command_t *cmd){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af04      	add	r7, sp, #16
 8001ab6:	6078      	str	r0, [r7, #4]

	uint8_t item;
	uint8_t counter_j = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;

	status = uxQueueMessagesWaiting(xQueue_InputData);
 8001abc:	4b37      	ldr	r3, [pc, #220]	; (8001b9c <extract_command+0xec>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fae4 	bl	800408e <uxQueueMessagesWaiting>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	613b      	str	r3, [r7, #16]
	if (status == 0){
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <extract_command+0x26>
		return -1;
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	e05e      	b.n	8001b94 <extract_command+0xe4>
	}

	if (wrong_command){
 8001ad6:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <extract_command+0xf0>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d010      	beq.n	8001b00 <extract_command+0x50>
				// si se llego aqui es porque se mando un comando erronio, por lo que hay resetear y mandar de nuevo
				cmd->functionType = -1;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40
				memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2240      	movs	r2, #64	; 0x40
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f009 f8bf 	bl	800ac70 <memset>
				xQueueReset(xQueue_InputData);
 8001af2:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <extract_command+0xec>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f001 fec7 	bl	800388c <xQueueGenericReset>
 8001afe:	e048      	b.n	8001b92 <extract_command+0xe2>
	}else{

		do{
			// Recibimos un elemento y lo montamos en el item ademas no deseamos bloquarlo
			status = xQueueReceive(xQueue_InputData, &item,0);
 8001b00:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <extract_command+0xec>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f107 010f 	add.w	r1, r7, #15
 8001b08:	2200      	movs	r2, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 f950 	bl	8003db0 <xQueueReceive>
 8001b10:	6138      	str	r0, [r7, #16]
			if(status == pdTRUE){
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d106      	bne.n	8001b26 <extract_command+0x76>

				//vamos llenando el arreglo del comando
				cmd->payload[counter_j++] = item;
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	75fa      	strb	r2, [r7, #23]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	7bf9      	ldrb	r1, [r7, #15]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	5499      	strb	r1, [r3, r2]

			}
		}while(item != '#');
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	2b23      	cmp	r3, #35	; 0x23
 8001b2a:	d1e9      	bne.n	8001b00 <extract_command+0x50>

		cmd->payload[counter_j] = '\0'; // Agregamos la terminacion nula para que tengamos un string
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	2100      	movs	r1, #0
 8001b32:	54d1      	strb	r1, [r2, r3]

		// Del comando entregado extraemos toda la informacion necesaria para poder usarla luego en los estados necesarios
//		sscanf((char *) cmd->payload, "%s %u %u %u %s", data ,&firstParameter, &secondParameter, &thirdParameter, userMsg);

		extract_info(cmd, data, firstParameter, secondParameter, thirdParameter, &fparam, &sparam, &tparam);
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <extract_command+0xf4>)
 8001b36:	9303      	str	r3, [sp, #12]
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <extract_command+0xf8>)
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <extract_command+0xfc>)
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <extract_command+0x100>)
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <extract_command+0x104>)
 8001b46:	4a1c      	ldr	r2, [pc, #112]	; (8001bb8 <extract_command+0x108>)
 8001b48:	491c      	ldr	r1, [pc, #112]	; (8001bbc <extract_command+0x10c>)
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f001 fb38 	bl	80031c0 <extract_info>

		memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2240      	movs	r2, #64	; 0x40
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f009 f88a 	bl	800ac70 <memset>
		xQueueReset(xQueue_InputData);
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <extract_command+0xec>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2100      	movs	r1, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f001 fe92 	bl	800388c <xQueueGenericReset>

		if (strcmp(data, "sGo") == 0){
 8001b68:	4915      	ldr	r1, [pc, #84]	; (8001bc0 <extract_command+0x110>)
 8001b6a:	4814      	ldr	r0, [pc, #80]	; (8001bbc <extract_command+0x10c>)
 8001b6c:	f7fe fb38 	bl	80001e0 <strcmp>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d103      	bne.n	8001b7e <extract_command+0xce>
			cmd->functionType = 1;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b7c:	e009      	b.n	8001b92 <extract_command+0xe2>
		}
		else if (strcmp(data, "sGoTo") == 0){
 8001b7e:	4911      	ldr	r1, [pc, #68]	; (8001bc4 <extract_command+0x114>)
 8001b80:	480e      	ldr	r0, [pc, #56]	; (8001bbc <extract_command+0x10c>)
 8001b82:	f7fe fb2d 	bl	80001e0 <strcmp>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <extract_command+0xe2>
			cmd->functionType = 2;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
		}

	}
	return 0;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	2000023c 	.word	0x2000023c
 8001ba0:	20000526 	.word	0x20000526
 8001ba4:	20000498 	.word	0x20000498
 8001ba8:	20000494 	.word	0x20000494
 8001bac:	20000490 	.word	0x20000490
 8001bb0:	20000484 	.word	0x20000484
 8001bb4:	20000478 	.word	0x20000478
 8001bb8:	2000046c 	.word	0x2000046c
 8001bbc:	2000049c 	.word	0x2000049c
 8001bc0:	0800fd08 	.word	0x0800fd08
 8001bc4:	0800fd0c 	.word	0x0800fd0c

08001bc8 <callback_extInt1>:

//Interrupciones de Exti
void callback_extInt1(void){
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != None){
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <callback_extInt1+0x24>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d005      	beq.n	8001be0 <callback_extInt1+0x18>
		handler_Motor_Array[0]->parametersMotor.counts++;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <callback_extInt1+0x28>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	791a      	ldrb	r2, [r3, #4]
 8001bda:	3201      	adds	r2, #1
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	711a      	strb	r2, [r3, #4]
	}
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	2000051c 	.word	0x2000051c
 8001bf0:	20000408 	.word	0x20000408

08001bf4 <callback_extInt3>:

void callback_extInt3(void){
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != None){
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <callback_extInt3+0x24>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d005      	beq.n	8001c0c <callback_extInt3+0x18>
		handler_Motor_Array[1]->parametersMotor.counts++;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <callback_extInt3+0x28>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	791a      	ldrb	r2, [r3, #4]
 8001c06:	3201      	adds	r2, #1
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	711a      	strb	r2, [r3, #4]
	}
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	2000051c 	.word	0x2000051c
 8001c1c:	20000408 	.word	0x20000408

08001c20 <usart1Rx_Callback>:



//Interripcion USART2
void usart1Rx_Callback(void){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af02      	add	r7, sp, #8

	rxData = getRxData();
 8001c26:	f008 fcbd 	bl	800a5a4 <getRxData>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <usart1Rx_Callback+0xac>)
 8001c30:	701a      	strb	r2, [r3, #0]
	writeChar(&handlerUSART, rxData);
 8001c32:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <usart1Rx_Callback+0xac>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	4619      	mov	r1, r3
 8001c38:	4825      	ldr	r0, [pc, #148]	; (8001cd0 <usart1Rx_Callback+0xb0>)
 8001c3a:	f008 fc73 	bl	800a524 <writeChar>

	if (rxData == '\r'){
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <usart1Rx_Callback+0xac>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b0d      	cmp	r3, #13
 8001c44:	d102      	bne.n	8001c4c <usart1Rx_Callback+0x2c>
		wrong_command = SET;
 8001c46:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <usart1Rx_Callback+0xb4>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
	}
	BaseType_t xHigerPriorituTaskWoken;
	(void) xHigerPriorituTaskWoken;
	xHigerPriorituTaskWoken = pdFALSE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <usart1Rx_Callback+0xb8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f002 fb48 	bl	80042ea <xQueueIsQueueFullFromISR>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <usart1Rx_Callback+0xbc>)
 8001c5e:	6013      	str	r3, [r2, #0]
	// Si retorna que aun tiene espacio entoncesretorna falso

	if (xReturned != pdTRUE ){
 8001c60:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <usart1Rx_Callback+0xbc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d007      	beq.n	8001c78 <usart1Rx_Callback+0x58>

		xQueueSendToBackFromISR(xQueue_InputData,
 8001c68:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <usart1Rx_Callback+0xb8>)
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2200      	movs	r2, #0
 8001c70:	4916      	ldr	r1, [pc, #88]	; (8001ccc <usart1Rx_Callback+0xac>)
 8001c72:	f001 fff3 	bl	8003c5c <xQueueGenericSendFromISR>
 8001c76:	e011      	b.n	8001c9c <usart1Rx_Callback+0x7c>
								NULL);

	}else{


		if (rxData == '#'){
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <usart1Rx_Callback+0xac>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b23      	cmp	r3, #35	; 0x23
 8001c7e:	d10d      	bne.n	8001c9c <usart1Rx_Callback+0x7c>

			xQueueReceiveFromISR(xQueue_InputData,
 8001c80:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <usart1Rx_Callback+0xb8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2200      	movs	r2, #0
 8001c86:	4911      	ldr	r1, [pc, #68]	; (8001ccc <usart1Rx_Callback+0xac>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 f971 	bl	8003f70 <xQueueReceiveFromISR>
								 (void *) &rxData,
								 NULL);
			xQueueSendToBackFromISR(xQueue_InputData,
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <usart1Rx_Callback+0xb8>)
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	2300      	movs	r3, #0
 8001c94:	2200      	movs	r2, #0
 8001c96:	490d      	ldr	r1, [pc, #52]	; (8001ccc <usart1Rx_Callback+0xac>)
 8001c98:	f001 ffe0 	bl	8003c5c <xQueueGenericSendFromISR>
									,NULL);
		}

	}

	if (rxData == '#' || rxData == '\r'){
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <usart1Rx_Callback+0xac>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b23      	cmp	r3, #35	; 0x23
 8001ca2:	d003      	beq.n	8001cac <usart1Rx_Callback+0x8c>
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <usart1Rx_Callback+0xac>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b0d      	cmp	r3, #13
 8001caa:	d10a      	bne.n	8001cc2 <usart1Rx_Callback+0xa2>
		// Se manda la notificacion de la tarea que se quiere mover al estado de RUN
		xTaskNotifyFromISR(xHandleTask_Commands,
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <usart1Rx_Callback+0xc0>)
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	f003 fad5 	bl	800526c <xTaskGenericNotifyFromISR>
						   eNoAction,
						   NULL);
//		xSemaphoreGiveFromISR(xSemaphore_Handle, &xHigerPriorituTaskWoken);

	}
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000468 	.word	0x20000468
 8001cd0:	20000358 	.word	0x20000358
 8001cd4:	20000526 	.word	0x20000526
 8001cd8:	2000023c 	.word	0x2000023c
 8001cdc:	20000214 	.word	0x20000214
 8001ce0:	20000220 	.word	0x20000220

08001ce4 <BasicTimer2_Callback>:

//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2

void BasicTimer2_Callback(void){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af02      	add	r7, sp, #8

	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <BasicTimer2_Callback+0x68>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 8001cf0:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <BasicTimer2_Callback+0x6c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <BasicTimer2_Callback+0x70>)
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d803      	bhi.n	8001d06 <BasicTimer2_Callback+0x22>
			flag_measurements = SET;
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <BasicTimer2_Callback+0x74>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	e005      	b.n	8001d12 <BasicTimer2_Callback+0x2e>
	}else{ counting_action++; }
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <BasicTimer2_Callback+0x70>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <BasicTimer2_Callback+0x70>)
 8001d10:	801a      	strh	r2, [r3, #0]


	if (Mode_dir.Mode != None){
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <BasicTimer2_Callback+0x78>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d00b      	beq.n	8001d32 <BasicTimer2_Callback+0x4e>
		// Solo cuando estemos en alguna operacion diferente a None, se despierta la tarea de control
		xTaskNotifyFromISR(xHandleTask_Control,
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <BasicTimer2_Callback+0x7c>)
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	2300      	movs	r3, #0
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2300      	movs	r3, #0
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	f003 fa9e 	bl	800526c <xTaskGenericNotifyFromISR>
		// SI estamos aqui es porque estamos en estado de NO operation
		xTaskNotify(xHandleTask_NOP,0, eNoAction);
	}

	// EN LA FUNCION 'GO' ESTAN LAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 8001d30:	e008      	b.n	8001d44 <BasicTimer2_Callback+0x60>
		xTaskNotify(xHandleTask_NOP,0, eNoAction);
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <BasicTimer2_Callback+0x80>)
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	2300      	movs	r3, #0
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2100      	movs	r1, #0
 8001d40:	f003 f9b4 	bl	80050ac <xTaskGenericNotify>
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000051f 	.word	0x2000051f
 8001d50:	20000010 	.word	0x20000010
 8001d54:	2000052a 	.word	0x2000052a
 8001d58:	20000520 	.word	0x20000520
 8001d5c:	2000051c 	.word	0x2000051c
 8001d60:	2000022c 	.word	0x2000022c
 8001d64:	20000234 	.word	0x20000234

08001d68 <calibracionGyros>:
//Definicion de funciones varias


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 8001d74:	23c8      	movs	r3, #200	; 0xc8
 8001d76:	827b      	strh	r3, [r7, #18]
	float     medidas    = 0;
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
	float     suma       = 0;
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
	uint8_t   contador   = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	76fb      	strb	r3, [r7, #27]
	float     promedio   = 0;
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]

	switch (axis) {
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d061      	beq.n	8001e58 <calibracionGyros+0xf0>
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	dc70      	bgt.n	8001e7a <calibracionGyros+0x112>
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d015      	beq.n	8001dc8 <calibracionGyros+0x60>
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d037      	beq.n	8001e10 <calibracionGyros+0xa8>
				delay_ms(1); // esperamos 1 milisegundo
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 8001da0:	e06b      	b.n	8001e7a <calibracionGyros+0x112>
				medidas = readGyro_X(ptrMPUAccel);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f006 fca8 	bl	80086f8 <readGyro_X>
 8001da8:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001dac:	ed97 7a07 	vldr	s14, [r7, #28]
 8001db0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db8:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001dbc:	7efb      	ldrb	r3, [r7, #27]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f004 fd62 	bl	800688c <delay_ms>
			while (contador < numMedidas){
 8001dc8:	7efb      	ldrb	r3, [r7, #27]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	8a7a      	ldrh	r2, [r7, #18]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d8e7      	bhi.n	8001da2 <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 8001dd2:	8a7b      	ldrh	r3, [r7, #18]
 8001dd4:	ee07 3a90 	vmov	s15, r3
 8001dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ddc:	edd7 6a07 	vldr	s13, [r7, #28]
 8001de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de4:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001de8:	e048      	b.n	8001e7c <calibracionGyros+0x114>
				medidas = readGyro_Y(ptrMPUAccel);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f006 fd0c 	bl	8008808 <readGyro_Y>
 8001df0:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001df4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001df8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e00:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001e04:	7efb      	ldrb	r3, [r7, #27]
 8001e06:	3301      	adds	r3, #1
 8001e08:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f004 fd3e 	bl	800688c <delay_ms>
			while (contador < numMedidas){
 8001e10:	7efb      	ldrb	r3, [r7, #27]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	8a7a      	ldrh	r2, [r7, #18]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d8e7      	bhi.n	8001dea <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 8001e1a:	8a7b      	ldrh	r3, [r7, #18]
 8001e1c:	ee07 3a90 	vmov	s15, r3
 8001e20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e24:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e2c:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001e30:	e024      	b.n	8001e7c <calibracionGyros+0x114>
				medidas = readGyro_Z(ptrMPUAccel);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f006 fd70 	bl	8008918 <readGyro_Z>
 8001e38:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001e3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e48:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001e4c:	7efb      	ldrb	r3, [r7, #27]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001e52:	2001      	movs	r0, #1
 8001e54:	f004 fd1a 	bl	800688c <delay_ms>
			while (contador < numMedidas){
 8001e58:	7efb      	ldrb	r3, [r7, #27]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	8a7a      	ldrh	r2, [r7, #18]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d8e7      	bhi.n	8001e32 <calibracionGyros+0xca>
			promedio = suma / numMedidas;
 8001e62:	8a7b      	ldrh	r3, [r7, #18]
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e74:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001e78:	e000      	b.n	8001e7c <calibracionGyros+0x114>
			break;
 8001e7a:	bf00      	nop
		}
	}


	return promedio;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	ee07 3a90 	vmov	s15, r3
}
 8001e82:	eeb0 0a67 	vmov.f32	s0, s15
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <getAngle>:


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6178      	str	r0, [r7, #20]
 8001e94:	ed87 0a04 	vstr	s0, [r7, #16]
 8001e98:	ed87 1b02 	vstr	d1, [r7, #8]
 8001e9c:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 8001e9e:	6978      	ldr	r0, [r7, #20]
 8001ea0:	f006 fd3a 	bl	8008918 <readGyro_Z>
 8001ea4:	ee10 3a10 	vmov	r3, s0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb65 	bl	8000578 <__aeabi_f2d>
 8001eae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eb2:	f7fe fa01 	bl	80002b8 <__aeabi_dsub>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f7fe feab 	bl	8000c18 <__aeabi_d2f>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 8001ec6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eca:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001ece:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ed2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001f38 <getAngle+0xac>
 8001ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eda:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee2:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 8001ee6:	69b8      	ldr	r0, [r7, #24]
 8001ee8:	f7fe fb46 	bl	8000578 <__aeabi_f2d>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <getAngle+0xb0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fb3c 	bl	8000578 <__aeabi_f2d>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f06:	f7fe f9d9 	bl	80002bc <__adddf3>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	f7fe fe81 	bl	8000c18 <__aeabi_d2f>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4a08      	ldr	r2, [pc, #32]	; (8001f3c <getAngle+0xb0>)
 8001f1a:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <getAngle+0xb4>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <getAngle+0xb8>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <getAngle+0xb8>)
 8001f2c:	801a      	strh	r2, [r3, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	447a0000 	.word	0x447a0000
 8001f3c:	20000ac8 	.word	0x20000ac8
 8001f40:	200002f0 	.word	0x200002f0
 8001f44:	20000528 	.word	0x20000528

08001f48 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_dir_t operation_mode_dir){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	ed2d 8b02 	vpush	{d8}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	80ba      	strh	r2, [r7, #4]

	//Verificamos el modo
	if(operation_mode_dir.Mode == Line){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 8001f58:	793b      	ldrb	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f040 81d4 	bne.w	8002308 <get_measuremets_parameters+0x3c0>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8001f60:	4bab      	ldr	r3, [pc, #684]	; (8002210 <get_measuremets_parameters+0x2c8>)
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4bab      	ldr	r3, [pc, #684]	; (8002214 <get_measuremets_parameters+0x2cc>)
 8001f68:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 8001f6a:	4bab      	ldr	r3, [pc, #684]	; (8002218 <get_measuremets_parameters+0x2d0>)
 8001f6c:	edd3 6a00 	vldr	s13, [r3]
 8001f70:	4baa      	ldr	r3, [pc, #680]	; (800221c <get_measuremets_parameters+0x2d4>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	ee07 3a90 	vmov	s15, r3
 8001f78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f80:	4ba7      	ldr	r3, [pc, #668]	; (8002220 <get_measuremets_parameters+0x2d8>)
 8001f82:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8001f86:	4ba6      	ldr	r3, [pc, #664]	; (8002220 <get_measuremets_parameters+0x2d8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe faf4 	bl	8000578 <__aeabi_f2d>
 8001f90:	a39b      	add	r3, pc, #620	; (adr r3, 8002200 <get_measuremets_parameters+0x2b8>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	f7fe fb47 	bl	8000628 <__aeabi_dmul>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	4b9f      	ldr	r3, [pc, #636]	; (8002224 <get_measuremets_parameters+0x2dc>)
 8001fa8:	f7fe fc68 	bl	800087c <__aeabi_ddiv>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	68b9      	ldr	r1, [r7, #8]
 8001fb2:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001fb6:	4b98      	ldr	r3, [pc, #608]	; (8002218 <get_measuremets_parameters+0x2d0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fadc 	bl	8000578 <__aeabi_f2d>
 8001fc0:	a38f      	add	r3, pc, #572	; (adr r3, 8002200 <get_measuremets_parameters+0x2b8>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	f7fe fb2f 	bl	8000628 <__aeabi_dmul>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4610      	mov	r0, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	4b93      	ldr	r3, [pc, #588]	; (8002224 <get_measuremets_parameters+0x2dc>)
 8001fd8:	f7fe fc50 	bl	800087c <__aeabi_ddiv>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	ec43 2b17 	vmov	d7, r2, r3
 8001fe4:	eeb0 0a47 	vmov.f32	s0, s14
 8001fe8:	eef0 0a67 	vmov.f32	s1, s15
 8001fec:	f00b fbe4 	bl	800d7b8 <sin>
 8001ff0:	eeb0 8a40 	vmov.f32	s16, s0
 8001ff4:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001ff8:	4b87      	ldr	r3, [pc, #540]	; (8002218 <get_measuremets_parameters+0x2d0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fabb 	bl	8000578 <__aeabi_f2d>
 8002002:	a37f      	add	r3, pc, #508	; (adr r3, 8002200 <get_measuremets_parameters+0x2b8>)
 8002004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002008:	f7fe fb0e 	bl	8000628 <__aeabi_dmul>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	4b82      	ldr	r3, [pc, #520]	; (8002224 <get_measuremets_parameters+0x2dc>)
 800201a:	f7fe fc2f 	bl	800087c <__aeabi_ddiv>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	ec43 2b17 	vmov	d7, r2, r3
 8002026:	eeb0 0a47 	vmov.f32	s0, s14
 800202a:	eef0 0a67 	vmov.f32	s1, s15
 800202e:	f00b fb27 	bl	800d680 <cos>
 8002032:	eeb0 7a40 	vmov.f32	s14, s0
 8002036:	eef0 7a60 	vmov.f32	s15, s1
 800203a:	eeb0 1a47 	vmov.f32	s2, s14
 800203e:	eef0 1a67 	vmov.f32	s3, s15
 8002042:	eeb0 0a48 	vmov.f32	s0, s16
 8002046:	eef0 0a68 	vmov.f32	s1, s17
 800204a:	f00b fc0d 	bl	800d868 <atan2>
 800204e:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002052:	a36d      	add	r3, pc, #436	; (adr r3, 8002208 <get_measuremets_parameters+0x2c0>)
 8002054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002058:	f7fe fae6 	bl	8000628 <__aeabi_dmul>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800206a:	f7fe f927 	bl	80002bc <__adddf3>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	e9c1 2306 	strd	r2, r3, [r1, #24]

			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800207e:	a360      	add	r3, pc, #384	; (adr r3, 8002200 <get_measuremets_parameters+0x2b8>)
 8002080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002084:	f7fe fad0 	bl	8000628 <__aeabi_dmul>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	4b63      	ldr	r3, [pc, #396]	; (8002224 <get_measuremets_parameters+0x2dc>)
 8002096:	f7fe fbf1 	bl	800087c <__aeabi_ddiv>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	ec43 2b17 	vmov	d7, r2, r3
 80020a2:	eeb0 0a47 	vmov.f32	s0, s14
 80020a6:	eef0 0a67 	vmov.f32	s1, s15
 80020aa:	f00b fb85 	bl	800d7b8 <sin>
 80020ae:	eeb0 8a40 	vmov.f32	s16, s0
 80020b2:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80020bc:	a350      	add	r3, pc, #320	; (adr r3, 8002200 <get_measuremets_parameters+0x2b8>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe fab1 	bl	8000628 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	4b54      	ldr	r3, [pc, #336]	; (8002224 <get_measuremets_parameters+0x2dc>)
 80020d4:	f7fe fbd2 	bl	800087c <__aeabi_ddiv>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	ec43 2b17 	vmov	d7, r2, r3
 80020e0:	eeb0 0a47 	vmov.f32	s0, s14
 80020e4:	eef0 0a67 	vmov.f32	s1, s15
 80020e8:	f00b faca 	bl	800d680 <cos>
 80020ec:	eeb0 7a40 	vmov.f32	s14, s0
 80020f0:	eef0 7a60 	vmov.f32	s15, s1
 80020f4:	eeb0 1a47 	vmov.f32	s2, s14
 80020f8:	eef0 1a67 	vmov.f32	s3, s15
 80020fc:	eeb0 0a48 	vmov.f32	s0, s16
 8002100:	eef0 0a68 	vmov.f32	s1, s17
 8002104:	f00b fbb0 	bl	800d868 <atan2>
 8002108:	eeb0 7a40 	vmov.f32	s14, s0
 800210c:	eef0 7a60 	vmov.f32	s15, s1
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	ed83 7b04 	vstr	d7, [r3, #16]

			// Con la siguiente accion conseguimos que el angulo que deseamos solo este dentro del rango [-pi,pi]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	ed93 7b02 	vldr	d7, [r3, #8]
 800211c:	eeb0 0a47 	vmov.f32	s0, s14
 8002120:	eef0 0a67 	vmov.f32	s1, s15
 8002124:	f00b fb48 	bl	800d7b8 <sin>
 8002128:	eeb0 8a40 	vmov.f32	s16, s0
 800212c:	eef0 8a60 	vmov.f32	s17, s1
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	ed93 7b02 	vldr	d7, [r3, #8]
 8002136:	eeb0 0a47 	vmov.f32	s0, s14
 800213a:	eef0 0a67 	vmov.f32	s1, s15
 800213e:	f00b fa9f 	bl	800d680 <cos>
 8002142:	eeb0 7a40 	vmov.f32	s14, s0
 8002146:	eef0 7a60 	vmov.f32	s15, s1
 800214a:	eeb0 1a47 	vmov.f32	s2, s14
 800214e:	eef0 1a67 	vmov.f32	s3, s15
 8002152:	eeb0 0a48 	vmov.f32	s0, s16
 8002156:	eef0 0a68 	vmov.f32	s1, s17
 800215a:	f00b fb85 	bl	800d868 <atan2>
 800215e:	eeb0 7a40 	vmov.f32	s14, s0
 8002162:	eef0 7a60 	vmov.f32	s15, s1
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	ed83 7b02 	vstr	d7, [r3, #8]
														cos(ptrParameter_position->rad_relativo));

			//Calculamos la velocidad
			if (operation_mode_dir.direction_s_r == SET){
 800216c:	797b      	ldrb	r3, [r7, #5]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d15e      	bne.n	8002230 <get_measuremets_parameters+0x2e8>

				// SI estamos aqui se tiene una direccion deseada hacia adelante
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	791b      	ldrb	r3, [r3, #4]
 8002178:	ee07 3a90 	vmov	s15, r3
 800217c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002180:	4b29      	ldr	r3, [pc, #164]	; (8002228 <get_measuremets_parameters+0x2e0>)
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3304      	adds	r3, #4
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	791b      	ldrb	r3, [r3, #4]
 800219a:	ee07 3a90 	vmov	s15, r3
 800219e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021a2:	4b22      	ldr	r3, [pc, #136]	; (800222c <get_measuremets_parameters+0x2e4>)
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3304      	adds	r3, #4
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b2:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	edd3 6a03 	vldr	s13, [r3, #12]
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <get_measuremets_parameters+0x2cc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	ee07 3a90 	vmov	s15, r3
 80021c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d2:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3304      	adds	r3, #4
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	edd3 6a03 	vldr	s13, [r3, #12]
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <get_measuremets_parameters+0x2cc>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	ee07 3a90 	vmov	s15, r3
 80021e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3304      	adds	r3, #4
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f6:	edc3 7a02 	vstr	s15, [r3, #8]
 80021fa:	e065      	b.n	80022c8 <get_measuremets_parameters+0x380>
 80021fc:	f3af 8000 	nop.w
 8002200:	54442d18 	.word	0x54442d18
 8002204:	400921fb 	.word	0x400921fb
 8002208:	1a63c1f8 	.word	0x1a63c1f8
 800220c:	404ca5dc 	.word	0x404ca5dc
 8002210:	20000528 	.word	0x20000528
 8002214:	2000052c 	.word	0x2000052c
 8002218:	20000ac8 	.word	0x20000ac8
 800221c:	2000052a 	.word	0x2000052a
 8002220:	20000acc 	.word	0x20000acc
 8002224:	40668000 	.word	0x40668000
 8002228:	20000014 	.word	0x20000014
 800222c:	20000018 	.word	0x20000018

			}else{
				// SI estamos aqui se tiene una direccion deseada hacia atras
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	791b      	ldrb	r3, [r3, #4]
 8002236:	ee07 3a90 	vmov	s15, r3
 800223a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800223e:	4b2c      	ldr	r3, [pc, #176]	; (80022f0 <get_measuremets_parameters+0x3a8>)
 8002240:	edd3 7a00 	vldr	s15, [r3]
 8002244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	eef1 7a67 	vneg.f32	s15, s15
 8002250:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3304      	adds	r3, #4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	791b      	ldrb	r3, [r3, #4]
 800225c:	ee07 3a90 	vmov	s15, r3
 8002260:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002264:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <get_measuremets_parameters+0x3ac>)
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3304      	adds	r3, #4
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	eef1 7a67 	vneg.f32	s15, s15
 8002278:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	edd3 7a03 	vldr	s15, [r3, #12]
 8002284:	eef1 6a67 	vneg.f32	s13, s15
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <get_measuremets_parameters+0x3b0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	ee07 3a90 	vmov	s15, r3
 8002290:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800229c:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3304      	adds	r3, #4
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80022aa:	eef1 6a67 	vneg.f32	s13, s15
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <get_measuremets_parameters+0x3b0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3304      	adds	r3, #4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022c4:	edc3 7a02 	vstr	s15, [r3, #8]

			}

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2200      	movs	r2, #0
 80022ce:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3304      	adds	r3, #4
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <get_measuremets_parameters+0x3b4>)
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <get_measuremets_parameters+0x3b8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <get_measuremets_parameters+0x3bc>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	801a      	strh	r2, [r3, #0]
		time_accumulated = 0;

		//Reiniciamos el contador de acción
		counting_action  = 0;}

}
 80022ee:	e2f0      	b.n	80028d2 <get_measuremets_parameters+0x98a>
 80022f0:	20000014 	.word	0x20000014
 80022f4:	20000018 	.word	0x20000018
 80022f8:	2000052c 	.word	0x2000052c
 80022fc:	20000ac8 	.word	0x20000ac8
 8002300:	20000528 	.word	0x20000528
 8002304:	2000052a 	.word	0x2000052a
	else if(operation_mode_dir.Mode == Roll)
 8002308:	793b      	ldrb	r3, [r7, #4]
 800230a:	2b01      	cmp	r3, #1
 800230c:	f040 81c8 	bne.w	80026a0 <get_measuremets_parameters+0x758>
			time_accion = time_accumulated;
 8002310:	4bad      	ldr	r3, [pc, #692]	; (80025c8 <get_measuremets_parameters+0x680>)
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	4bad      	ldr	r3, [pc, #692]	; (80025cc <get_measuremets_parameters+0x684>)
 8002318:	601a      	str	r2, [r3, #0]
			promAng = sum_ang / counting_action;
 800231a:	4bad      	ldr	r3, [pc, #692]	; (80025d0 <get_measuremets_parameters+0x688>)
 800231c:	edd3 6a00 	vldr	s13, [r3]
 8002320:	4bac      	ldr	r3, [pc, #688]	; (80025d4 <get_measuremets_parameters+0x68c>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	ee07 3a90 	vmov	s15, r3
 8002328:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800232c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002330:	4ba9      	ldr	r3, [pc, #676]	; (80025d8 <get_measuremets_parameters+0x690>)
 8002332:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8002336:	4ba8      	ldr	r3, [pc, #672]	; (80025d8 <get_measuremets_parameters+0x690>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe f91c 	bl	8000578 <__aeabi_f2d>
 8002340:	a39d      	add	r3, pc, #628	; (adr r3, 80025b8 <get_measuremets_parameters+0x670>)
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	f7fe f96f 	bl	8000628 <__aeabi_dmul>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	4ba1      	ldr	r3, [pc, #644]	; (80025dc <get_measuremets_parameters+0x694>)
 8002358:	f7fe fa90 	bl	800087c <__aeabi_ddiv>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002366:	4b9a      	ldr	r3, [pc, #616]	; (80025d0 <get_measuremets_parameters+0x688>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe f904 	bl	8000578 <__aeabi_f2d>
 8002370:	a391      	add	r3, pc, #580	; (adr r3, 80025b8 <get_measuremets_parameters+0x670>)
 8002372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002376:	f7fe f957 	bl	8000628 <__aeabi_dmul>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	4b95      	ldr	r3, [pc, #596]	; (80025dc <get_measuremets_parameters+0x694>)
 8002388:	f7fe fa78 	bl	800087c <__aeabi_ddiv>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	ec43 2b17 	vmov	d7, r2, r3
 8002394:	eeb0 0a47 	vmov.f32	s0, s14
 8002398:	eef0 0a67 	vmov.f32	s1, s15
 800239c:	f00b fa0c 	bl	800d7b8 <sin>
 80023a0:	eeb0 8a40 	vmov.f32	s16, s0
 80023a4:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 80023a8:	4b89      	ldr	r3, [pc, #548]	; (80025d0 <get_measuremets_parameters+0x688>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f8e3 	bl	8000578 <__aeabi_f2d>
 80023b2:	a381      	add	r3, pc, #516	; (adr r3, 80025b8 <get_measuremets_parameters+0x670>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fe f936 	bl	8000628 <__aeabi_dmul>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	4b84      	ldr	r3, [pc, #528]	; (80025dc <get_measuremets_parameters+0x694>)
 80023ca:	f7fe fa57 	bl	800087c <__aeabi_ddiv>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	ec43 2b17 	vmov	d7, r2, r3
 80023d6:	eeb0 0a47 	vmov.f32	s0, s14
 80023da:	eef0 0a67 	vmov.f32	s1, s15
 80023de:	f00b f94f 	bl	800d680 <cos>
 80023e2:	eeb0 7a40 	vmov.f32	s14, s0
 80023e6:	eef0 7a60 	vmov.f32	s15, s1
 80023ea:	eeb0 1a47 	vmov.f32	s2, s14
 80023ee:	eef0 1a67 	vmov.f32	s3, s15
 80023f2:	eeb0 0a48 	vmov.f32	s0, s16
 80023f6:	eef0 0a68 	vmov.f32	s1, s17
 80023fa:	f00b fa35 	bl	800d868 <atan2>
 80023fe:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002402:	a36f      	add	r3, pc, #444	; (adr r3, 80025c0 <get_measuremets_parameters+0x678>)
 8002404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002408:	f7fe f90e 	bl	8000628 <__aeabi_dmul>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800241a:	f7fd ff4f 	bl	80002bc <__adddf3>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800242e:	a362      	add	r3, pc, #392	; (adr r3, 80025b8 <get_measuremets_parameters+0x670>)
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	f7fe f8f8 	bl	8000628 <__aeabi_dmul>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	4b65      	ldr	r3, [pc, #404]	; (80025dc <get_measuremets_parameters+0x694>)
 8002446:	f7fe fa19 	bl	800087c <__aeabi_ddiv>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	ec43 2b17 	vmov	d7, r2, r3
 8002452:	eeb0 0a47 	vmov.f32	s0, s14
 8002456:	eef0 0a67 	vmov.f32	s1, s15
 800245a:	f00b f9ad 	bl	800d7b8 <sin>
 800245e:	eeb0 8a40 	vmov.f32	s16, s0
 8002462:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800246c:	a352      	add	r3, pc, #328	; (adr r3, 80025b8 <get_measuremets_parameters+0x670>)
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	f7fe f8d9 	bl	8000628 <__aeabi_dmul>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	4b56      	ldr	r3, [pc, #344]	; (80025dc <get_measuremets_parameters+0x694>)
 8002484:	f7fe f9fa 	bl	800087c <__aeabi_ddiv>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	ec43 2b17 	vmov	d7, r2, r3
 8002490:	eeb0 0a47 	vmov.f32	s0, s14
 8002494:	eef0 0a67 	vmov.f32	s1, s15
 8002498:	f00b f8f2 	bl	800d680 <cos>
 800249c:	eeb0 7a40 	vmov.f32	s14, s0
 80024a0:	eef0 7a60 	vmov.f32	s15, s1
 80024a4:	eeb0 1a47 	vmov.f32	s2, s14
 80024a8:	eef0 1a67 	vmov.f32	s3, s15
 80024ac:	eeb0 0a48 	vmov.f32	s0, s16
 80024b0:	eef0 0a68 	vmov.f32	s1, s17
 80024b4:	f00b f9d8 	bl	800d868 <atan2>
 80024b8:	eeb0 7a40 	vmov.f32	s14, s0
 80024bc:	eef0 7a60 	vmov.f32	s15, s1
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	ed83 7b04 	vstr	d7, [r3, #16]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	ed93 7b02 	vldr	d7, [r3, #8]
 80024cc:	eeb0 0a47 	vmov.f32	s0, s14
 80024d0:	eef0 0a67 	vmov.f32	s1, s15
 80024d4:	f00b f970 	bl	800d7b8 <sin>
 80024d8:	eeb0 8a40 	vmov.f32	s16, s0
 80024dc:	eef0 8a60 	vmov.f32	s17, s1
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	ed93 7b02 	vldr	d7, [r3, #8]
 80024e6:	eeb0 0a47 	vmov.f32	s0, s14
 80024ea:	eef0 0a67 	vmov.f32	s1, s15
 80024ee:	f00b f8c7 	bl	800d680 <cos>
 80024f2:	eeb0 7a40 	vmov.f32	s14, s0
 80024f6:	eef0 7a60 	vmov.f32	s15, s1
 80024fa:	eeb0 1a47 	vmov.f32	s2, s14
 80024fe:	eef0 1a67 	vmov.f32	s3, s15
 8002502:	eeb0 0a48 	vmov.f32	s0, s16
 8002506:	eef0 0a68 	vmov.f32	s1, s17
 800250a:	f00b f9ad 	bl	800d868 <atan2>
 800250e:	eeb0 7a40 	vmov.f32	s14, s0
 8002512:	eef0 7a60 	vmov.f32	s15, s1
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	ed83 7b02 	vstr	d7, [r3, #8]
			if (operation_mode_dir.direction_s_r == SET){
 800251c:	797b      	ldrb	r3, [r7, #5]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d162      	bne.n	80025e8 <get_measuremets_parameters+0x6a0>
				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	791b      	ldrb	r3, [r3, #4]
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <get_measuremets_parameters+0x698>)
 8002532:	edd3 7a00 	vldr	s15, [r3]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3304      	adds	r3, #4
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	791b      	ldrb	r3, [r3, #4]
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <get_measuremets_parameters+0x69c>)
 8002554:	edd3 7a00 	vldr	s15, [r3]
 8002558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3304      	adds	r3, #4
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	eef1 7a67 	vneg.f32	s15, s15
 8002566:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002572:	4b16      	ldr	r3, [pc, #88]	; (80025cc <get_measuremets_parameters+0x684>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002586:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	3304      	adds	r3, #4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	edd3 7a03 	vldr	s15, [r3, #12]
 8002594:	eef1 6a67 	vneg.f32	s13, s15
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <get_measuremets_parameters+0x684>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3304      	adds	r3, #4
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ae:	edc3 7a02 	vstr	s15, [r3, #8]
 80025b2:	e061      	b.n	8002678 <get_measuremets_parameters+0x730>
 80025b4:	f3af 8000 	nop.w
 80025b8:	54442d18 	.word	0x54442d18
 80025bc:	400921fb 	.word	0x400921fb
 80025c0:	1a63c1f8 	.word	0x1a63c1f8
 80025c4:	404ca5dc 	.word	0x404ca5dc
 80025c8:	20000528 	.word	0x20000528
 80025cc:	2000052c 	.word	0x2000052c
 80025d0:	20000ac8 	.word	0x20000ac8
 80025d4:	2000052a 	.word	0x2000052a
 80025d8:	20000acc 	.word	0x20000acc
 80025dc:	40668000 	.word	0x40668000
 80025e0:	20000014 	.word	0x20000014
 80025e4:	20000018 	.word	0x20000018
				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	791b      	ldrb	r3, [r3, #4]
 80025ee:	ee07 3a90 	vmov	s15, r3
 80025f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025f6:	4bbe      	ldr	r3, [pc, #760]	; (80028f0 <get_measuremets_parameters+0x9a8>)
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	eef1 7a67 	vneg.f32	s15, s15
 8002608:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3304      	adds	r3, #4
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	791b      	ldrb	r3, [r3, #4]
 8002614:	ee07 3a90 	vmov	s15, r3
 8002618:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800261c:	4bb5      	ldr	r3, [pc, #724]	; (80028f4 <get_measuremets_parameters+0x9ac>)
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3304      	adds	r3, #4
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262c:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	edd3 7a03 	vldr	s15, [r3, #12]
 8002638:	eef1 6a67 	vneg.f32	s13, s15
 800263c:	4bae      	ldr	r3, [pc, #696]	; (80028f8 <get_measuremets_parameters+0x9b0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	ee07 3a90 	vmov	s15, r3
 8002644:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002650:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3304      	adds	r3, #4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	edd3 6a03 	vldr	s13, [r3, #12]
 800265e:	4ba6      	ldr	r3, [pc, #664]	; (80028f8 <get_measuremets_parameters+0x9b0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	ee07 3a90 	vmov	s15, r3
 8002666:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3304      	adds	r3, #4
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002674:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2200      	movs	r2, #0
 800267e:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3304      	adds	r3, #4
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2200      	movs	r2, #0
 8002688:	711a      	strb	r2, [r3, #4]
			sum_ang = 0;
 800268a:	4b9c      	ldr	r3, [pc, #624]	; (80028fc <get_measuremets_parameters+0x9b4>)
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
			time_accumulated = 0;
 8002692:	4b9b      	ldr	r3, [pc, #620]	; (8002900 <get_measuremets_parameters+0x9b8>)
 8002694:	2200      	movs	r2, #0
 8002696:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 8002698:	4b9a      	ldr	r3, [pc, #616]	; (8002904 <get_measuremets_parameters+0x9bc>)
 800269a:	2200      	movs	r2, #0
 800269c:	801a      	strh	r2, [r3, #0]
}
 800269e:	e118      	b.n	80028d2 <get_measuremets_parameters+0x98a>
		time_accion = time_accumulated;
 80026a0:	4b97      	ldr	r3, [pc, #604]	; (8002900 <get_measuremets_parameters+0x9b8>)
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b94      	ldr	r3, [pc, #592]	; (80028f8 <get_measuremets_parameters+0x9b0>)
 80026a8:	601a      	str	r2, [r3, #0]
		promAng = sum_ang / counting_action;
 80026aa:	4b94      	ldr	r3, [pc, #592]	; (80028fc <get_measuremets_parameters+0x9b4>)
 80026ac:	edd3 6a00 	vldr	s13, [r3]
 80026b0:	4b94      	ldr	r3, [pc, #592]	; (8002904 <get_measuremets_parameters+0x9bc>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	ee07 3a90 	vmov	s15, r3
 80026b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026c0:	4b91      	ldr	r3, [pc, #580]	; (8002908 <get_measuremets_parameters+0x9c0>)
 80026c2:	edc3 7a00 	vstr	s15, [r3]
		ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 80026c6:	4b90      	ldr	r3, [pc, #576]	; (8002908 <get_measuremets_parameters+0x9c0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd ff54 	bl	8000578 <__aeabi_f2d>
 80026d0:	a383      	add	r3, pc, #524	; (adr r3, 80028e0 <get_measuremets_parameters+0x998>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	f7fd ffa7 	bl	8000628 <__aeabi_dmul>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4610      	mov	r0, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	4b89      	ldr	r3, [pc, #548]	; (800290c <get_measuremets_parameters+0x9c4>)
 80026e8:	f7fe f8c8 	bl	800087c <__aeabi_ddiv>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80026f6:	4b81      	ldr	r3, [pc, #516]	; (80028fc <get_measuremets_parameters+0x9b4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd ff3c 	bl	8000578 <__aeabi_f2d>
 8002700:	a377      	add	r3, pc, #476	; (adr r3, 80028e0 <get_measuremets_parameters+0x998>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	f7fd ff8f 	bl	8000628 <__aeabi_dmul>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	4b7d      	ldr	r3, [pc, #500]	; (800290c <get_measuremets_parameters+0x9c4>)
 8002718:	f7fe f8b0 	bl	800087c <__aeabi_ddiv>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	ec43 2b17 	vmov	d7, r2, r3
 8002724:	eeb0 0a47 	vmov.f32	s0, s14
 8002728:	eef0 0a67 	vmov.f32	s1, s15
 800272c:	f00b f844 	bl	800d7b8 <sin>
 8002730:	eeb0 8a40 	vmov.f32	s16, s0
 8002734:	eef0 8a60 	vmov.f32	s17, s1
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002738:	4b70      	ldr	r3, [pc, #448]	; (80028fc <get_measuremets_parameters+0x9b4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd ff1b 	bl	8000578 <__aeabi_f2d>
 8002742:	a367      	add	r3, pc, #412	; (adr r3, 80028e0 <get_measuremets_parameters+0x998>)
 8002744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002748:	f7fd ff6e 	bl	8000628 <__aeabi_dmul>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	4b6c      	ldr	r3, [pc, #432]	; (800290c <get_measuremets_parameters+0x9c4>)
 800275a:	f7fe f88f 	bl	800087c <__aeabi_ddiv>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	ec43 2b17 	vmov	d7, r2, r3
 8002766:	eeb0 0a47 	vmov.f32	s0, s14
 800276a:	eef0 0a67 	vmov.f32	s1, s15
 800276e:	f00a ff87 	bl	800d680 <cos>
 8002772:	eeb0 7a40 	vmov.f32	s14, s0
 8002776:	eef0 7a60 	vmov.f32	s15, s1
 800277a:	eeb0 1a47 	vmov.f32	s2, s14
 800277e:	eef0 1a67 	vmov.f32	s3, s15
 8002782:	eeb0 0a48 	vmov.f32	s0, s16
 8002786:	eef0 0a68 	vmov.f32	s1, s17
 800278a:	f00b f86d 	bl	800d868 <atan2>
 800278e:	ec51 0b10 	vmov	r0, r1, d0
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002792:	a355      	add	r3, pc, #340	; (adr r3, 80028e8 <get_measuremets_parameters+0x9a0>)
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	f7fd ff46 	bl	8000628 <__aeabi_dmul>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4610      	mov	r0, r2
 80027a2:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80027aa:	f7fd fd87 	bl	80002bc <__adddf3>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80027be:	a348      	add	r3, pc, #288	; (adr r3, 80028e0 <get_measuremets_parameters+0x998>)
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	f7fd ff30 	bl	8000628 <__aeabi_dmul>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	4b4d      	ldr	r3, [pc, #308]	; (800290c <get_measuremets_parameters+0x9c4>)
 80027d6:	f7fe f851 	bl	800087c <__aeabi_ddiv>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	ec43 2b17 	vmov	d7, r2, r3
 80027e2:	eeb0 0a47 	vmov.f32	s0, s14
 80027e6:	eef0 0a67 	vmov.f32	s1, s15
 80027ea:	f00a ffe5 	bl	800d7b8 <sin>
 80027ee:	eeb0 8a40 	vmov.f32	s16, s0
 80027f2:	eef0 8a60 	vmov.f32	s17, s1
												  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80027fc:	a338      	add	r3, pc, #224	; (adr r3, 80028e0 <get_measuremets_parameters+0x998>)
 80027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002802:	f7fd ff11 	bl	8000628 <__aeabi_dmul>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4610      	mov	r0, r2
 800280c:	4619      	mov	r1, r3
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	4b3e      	ldr	r3, [pc, #248]	; (800290c <get_measuremets_parameters+0x9c4>)
 8002814:	f7fe f832 	bl	800087c <__aeabi_ddiv>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	ec43 2b17 	vmov	d7, r2, r3
 8002820:	eeb0 0a47 	vmov.f32	s0, s14
 8002824:	eef0 0a67 	vmov.f32	s1, s15
 8002828:	f00a ff2a 	bl	800d680 <cos>
 800282c:	eeb0 7a40 	vmov.f32	s14, s0
 8002830:	eef0 7a60 	vmov.f32	s15, s1
 8002834:	eeb0 1a47 	vmov.f32	s2, s14
 8002838:	eef0 1a67 	vmov.f32	s3, s15
 800283c:	eeb0 0a48 	vmov.f32	s0, s16
 8002840:	eef0 0a68 	vmov.f32	s1, s17
 8002844:	f00b f810 	bl	800d868 <atan2>
 8002848:	eeb0 7a40 	vmov.f32	s14, s0
 800284c:	eef0 7a60 	vmov.f32	s15, s1
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	ed83 7b04 	vstr	d7, [r3, #16]
		ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	ed93 7b02 	vldr	d7, [r3, #8]
 800285c:	eeb0 0a47 	vmov.f32	s0, s14
 8002860:	eef0 0a67 	vmov.f32	s1, s15
 8002864:	f00a ffa8 	bl	800d7b8 <sin>
 8002868:	eeb0 8a40 	vmov.f32	s16, s0
 800286c:	eef0 8a60 	vmov.f32	s17, s1
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	ed93 7b02 	vldr	d7, [r3, #8]
 8002876:	eeb0 0a47 	vmov.f32	s0, s14
 800287a:	eef0 0a67 	vmov.f32	s1, s15
 800287e:	f00a feff 	bl	800d680 <cos>
 8002882:	eeb0 7a40 	vmov.f32	s14, s0
 8002886:	eef0 7a60 	vmov.f32	s15, s1
 800288a:	eeb0 1a47 	vmov.f32	s2, s14
 800288e:	eef0 1a67 	vmov.f32	s3, s15
 8002892:	eeb0 0a48 	vmov.f32	s0, s16
 8002896:	eef0 0a68 	vmov.f32	s1, s17
 800289a:	f00a ffe5 	bl	800d868 <atan2>
 800289e:	eeb0 7a40 	vmov.f32	s14, s0
 80028a2:	eef0 7a60 	vmov.f32	s15, s1
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	ed83 7b02 	vstr	d7, [r3, #8]
		ptrMotorHandler[0]->parametersMotor.counts = 0;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2200      	movs	r2, #0
 80028b2:	711a      	strb	r2, [r3, #4]
		ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3304      	adds	r3, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	711a      	strb	r2, [r3, #4]
		sum_ang = 0;
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <get_measuremets_parameters+0x9b4>)
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
		time_accumulated = 0;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <get_measuremets_parameters+0x9b8>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	801a      	strh	r2, [r3, #0]
		counting_action  = 0;}
 80028cc:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <get_measuremets_parameters+0x9bc>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	801a      	strh	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	ecbd 8b02 	vpop	{d8}
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	54442d18 	.word	0x54442d18
 80028e4:	400921fb 	.word	0x400921fb
 80028e8:	1a63c1f8 	.word	0x1a63c1f8
 80028ec:	404ca5dc 	.word	0x404ca5dc
 80028f0:	20000014 	.word	0x20000014
 80028f4:	20000018 	.word	0x20000018
 80028f8:	2000052c 	.word	0x2000052c
 80028fc:	20000ac8 	.word	0x20000ac8
 8002900:	20000528 	.word	0x20000528
 8002904:	2000052a 	.word	0x2000052a
 8002908:	20000acc 	.word	0x20000acc
 800290c:	40668000 	.word	0x40668000

08002910 <On_motor_Straigh_Roll>:


void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == Line){
 800291a:	783b      	ldrb	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d120      	bne.n	8002962 <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8002920:	6839      	ldr	r1, [r7, #0]
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f844 	bl	80029b0 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	4618      	mov	r0, r3
 8002930:	f006 faa4 	bl	8008e7c <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f005 fcee 	bl	800831e <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3304      	adds	r3, #4
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	4618      	mov	r0, r3
 800294c:	f006 fa96 	bl	8008e7c <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3304      	adds	r3, #4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	2101      	movs	r1, #1
 800295a:	4618      	mov	r0, r3
 800295c:	f005 fcdf 	bl	800831e <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 8002960:	e022      	b.n	80029a8 <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == Roll){
 8002962:	783b      	ldrb	r3, [r7, #0]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d11f      	bne.n	80029a8 <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8002968:	6839      	ldr	r1, [r7, #0]
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f820 	bl	80029b0 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	4618      	mov	r0, r3
 8002978:	f006 fa80 	bl	8008e7c <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	2101      	movs	r1, #1
 8002984:	4618      	mov	r0, r3
 8002986:	f005 fcca 	bl	800831e <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3304      	adds	r3, #4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	4618      	mov	r0, r3
 8002994:	f006 fa72 	bl	8008e7c <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3304      	adds	r3, #4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	2101      	movs	r1, #1
 80029a2:	4618      	mov	r0, r3
 80029a4:	f005 fcbb 	bl	800831e <GPIO_WritePin_Afopt>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == Line){
 80029ba:	783b      	ldrb	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d143      	bne.n	8002a48 <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	7f1a      	ldrb	r2, [r3, #28]
 80029c6:	787b      	ldrb	r3, [r7, #1]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d018      	beq.n	80029fe <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	787a      	ldrb	r2, [r7, #1]
 80029d2:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6a1a      	ldr	r2, [r3, #32]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	7f1b      	ldrb	r3, [r3, #28]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf0c      	ite	eq
 80029e4:	2301      	moveq	r3, #1
 80029e6:	2300      	movne	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	4619      	mov	r1, r3
 80029ec:	4610      	mov	r0, r2
 80029ee:	f005 fc96 	bl	800831e <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	4618      	mov	r0, r3
 80029fa:	f006 fdff 	bl	80095fc <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	7f1a      	ldrb	r2, [r3, #28]
 8002a06:	787b      	ldrb	r3, [r7, #1]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d068      	beq.n	8002ade <set_direction_straigh_roll+0x12e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	787a      	ldrb	r2, [r7, #1]
 8002a14:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6a1a      	ldr	r2, [r3, #32]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3304      	adds	r3, #4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	7f1b      	ldrb	r3, [r3, #28]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	bf0c      	ite	eq
 8002a2a:	2301      	moveq	r3, #1
 8002a2c:	2300      	movne	r3, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	4619      	mov	r1, r3
 8002a32:	4610      	mov	r0, r2
 8002a34:	f005 fc73 	bl	800831e <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	4618      	mov	r0, r3
 8002a42:	f006 fddb 	bl	80095fc <PWMx_Toggle>
			}
			// Puede que no analice ningun if y simplemente no haga nada


	}
}
 8002a46:	e04a      	b.n	8002ade <set_direction_straigh_roll+0x12e>
	}else if (operation_mode_dir.Mode == Roll){
 8002a48:	783b      	ldrb	r3, [r7, #0]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d147      	bne.n	8002ade <set_direction_straigh_roll+0x12e>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	7f1a      	ldrb	r2, [r3, #28]
 8002a54:	787b      	ldrb	r3, [r7, #1]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d11d      	bne.n	8002a96 <set_direction_straigh_roll+0xe6>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 8002a5a:	787b      	ldrb	r3, [r7, #1]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6a1a      	ldr	r2, [r3, #32]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	7f1b      	ldrb	r3, [r3, #28]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bf0c      	ite	eq
 8002a7c:	2301      	moveq	r3, #1
 8002a7e:	2300      	movne	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f005 fc4a 	bl	800831e <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	4618      	mov	r0, r3
 8002a92:	f006 fdb3 	bl	80095fc <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	7f1a      	ldrb	r2, [r3, #28]
 8002a9e:	787b      	ldrb	r3, [r7, #1]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d01c      	beq.n	8002ade <set_direction_straigh_roll+0x12e>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	787a      	ldrb	r2, [r7, #1]
 8002aac:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6a1a      	ldr	r2, [r3, #32]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	7f1b      	ldrb	r3, [r3, #28]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4610      	mov	r0, r2
 8002acc:	f005 fc27 	bl	800831e <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f006 fd8f 	bl	80095fc <PWMx_Toggle>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <stop>:

	}
}


void stop (Motor_Handler_t *ptrMotorhandler[2]){
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]

	//DESACTIVAMOS EL MOTOR
	// APAGAMOS EL MOTOR 1 (LEFT)
		//Se enciende el motor 1
		disableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	4618      	mov	r0, r3
 8002af6:	f006 fd41 	bl	800957c <disableOutput>
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN, RESET); // Apagamos el motor 1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f005 fc0b 	bl	800831e <GPIO_WritePin_Afopt>
		// APAGAMOS EL MOTOR 2 (Right)
		//Se enciende el motor 2
		disableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	4618      	mov	r0, r3
 8002b12:	f006 fd33 	bl	800957c <disableOutput>
		GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f005 fbfc 	bl	800831e <GPIO_WritePin_Afopt>


}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <int_Config_Motor>:

void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2],
		              Parameters_Position_t *ptrPosHandler,
					  Parameters_Path_t *ptrPathHandler ,
					  PID_Parameters_t *ptrPIDHandler,
					  state_dir_t operation_mode_dir){
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a85      	ldr	r2, [pc, #532]	; (8002d58 <int_Config_Motor+0x228>)
 8002b42:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a84      	ldr	r2, [pc, #528]	; (8002d5c <int_Config_Motor+0x22c>)
 8002b4a:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a83      	ldr	r2, [pc, #524]	; (8002d60 <int_Config_Motor+0x230>)
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a82      	ldr	r2, [pc, #520]	; (8002d64 <int_Config_Motor+0x234>)
 8002b5a:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM = &handlerPWM_1;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a81      	ldr	r2, [pc, #516]	; (8002d68 <int_Config_Motor+0x238>)
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a74      	ldr	r2, [pc, #464]	; (8002d6c <int_Config_Motor+0x23c>)
 8002b9c:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a6f      	ldr	r2, [pc, #444]	; (8002d70 <int_Config_Motor+0x240>)
 8002bb2:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	4a6e      	ldr	r2, [pc, #440]	; (8002d74 <int_Config_Motor+0x244>)
 8002bba:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a66      	ldr	r2, [pc, #408]	; (8002d5c <int_Config_Motor+0x22c>)
 8002bc4:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a6a      	ldr	r2, [pc, #424]	; (8002d78 <int_Config_Motor+0x248>)
 8002bce:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a69      	ldr	r2, [pc, #420]	; (8002d7c <int_Config_Motor+0x24c>)
 8002bd8:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a67      	ldr	r2, [pc, #412]	; (8002d80 <int_Config_Motor+0x250>)
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3304      	adds	r3, #4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3304      	adds	r3, #4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3304      	adds	r3, #4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a51      	ldr	r2, [pc, #324]	; (8002d6c <int_Config_Motor+0x23c>)
 8002c26:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a4c      	ldr	r2, [pc, #304]	; (8002d70 <int_Config_Motor+0x240>)
 8002c40:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 1.0;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c68:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	4a45      	ldr	r2, [pc, #276]	; (8002d84 <int_Config_Motor+0x254>)
 8002c6e:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 0.8;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	4a45      	ldr	r2, [pc, #276]	; (8002d88 <int_Config_Motor+0x258>)
 8002c74:	619a      	str	r2, [r3, #24]

	//-------------- Parametros de posicion---------------
	ptrPosHandler->grad_global   = 0;
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrPosHandler->rad_global    = 0;
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrPosHandler->grad_relativo = 0;
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e9c1 2300 	strd	r2, r3, [r1]
	ptrPosHandler->rad_relativo  = 0;
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrPosHandler->xr_position   = 0;
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrPosHandler->yr_position   = 0;
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrPosHandler->xg_position   = ptrPosHandler->xg_position_inicial = 0;
 8002cca:	68b9      	ldr	r1, [r7, #8]
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPosHandler->yg_position   = ptrPosHandler->yg_position_inicial = 0;
 8002ce4:	68b9      	ldr	r1, [r7, #8]
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	//--------------Parametros de Path-----------------
	ptrPathHandler->angle = 0;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	649a      	str	r2, [r3, #72]	; 0x48
	ptrPathHandler->goal_Position_x = ptrPathHandler->goal_Position_y = 0;
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ptrPathHandler->line_Distance = 0;
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPathHandler->start_position_x = ptrPathHandler->start_position_y = 0;
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50


	// Seteamos la direccion el modo de operacion en None
	operation_mode_dir.Mode = None;
 8002d46:	2302      	movs	r3, #2
 8002d48:	763b      	strb	r3, [r7, #24]
}
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000410 	.word	0x20000410
 8002d5c:	41e00000 	.word	0x41e00000
 8002d60:	2000028c 	.word	0x2000028c
 8002d64:	200002a4 	.word	0x200002a4
 8002d68:	20000318 	.word	0x20000318
 8002d6c:	437a0000 	.word	0x437a0000
 8002d70:	42c80000 	.word	0x42c80000
 8002d74:	2000043c 	.word	0x2000043c
 8002d78:	20000280 	.word	0x20000280
 8002d7c:	20000298 	.word	0x20000298
 8002d80:	20000338 	.word	0x20000338
 8002d84:	3dcccccd 	.word	0x3dcccccd
 8002d88:	3f4ccccd 	.word	0x3f4ccccd

08002d8c <PID_control>:


void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,
		        Parameters_Path_t *ptrPathHandler,
				Parameters_Position_t *ptrPosHandler,
				PID_Parameters_t *ptrPIDHandler){
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]

	//Conversion de tiempo
	float sampling_time = ((float) (handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period * timeAction_TIMER_Sampling) / 1000); //[s]
 8002d9a:	4b6f      	ldr	r3, [pc, #444]	; (8002f58 <PID_control+0x1cc>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	4a6f      	ldr	r2, [pc, #444]	; (8002f5c <PID_control+0x1d0>)
 8002da0:	7812      	ldrb	r2, [r2, #0]
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dae:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8002f60 <PID_control+0x1d4>
 8002db2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002db6:	edc7 7a05 	vstr	s15, [r7, #20]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8002dc6:	eeb0 1a46 	vmov.f32	s2, s12
 8002dca:	eef0 1a66 	vmov.f32	s3, s13
 8002dce:	eeb0 0a47 	vmov.f32	s0, s14
 8002dd2:	eef0 0a67 	vmov.f32	s1, s15
 8002dd6:	68b8      	ldr	r0, [r7, #8]
 8002dd8:	f005 fece 	bl	8008b78 <distance_to_straight_line>
 8002ddc:	ec51 0b10 	vmov	r0, r1, d0
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	4b5f      	ldr	r3, [pc, #380]	; (8002f64 <PID_control+0x1d8>)
 8002de6:	f7fd fd49 	bl	800087c <__aeabi_ddiv>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4610      	mov	r0, r2
 8002df0:	4619      	mov	r1, r3
 8002df2:	f7fd ff11 	bl	8000c18 <__aeabi_d2f>
 8002df6:	4603      	mov	r3, r0
 8002df8:	613b      	str	r3, [r7, #16]

	//Aplicacion del PID par el control de la distancia del robot al centro
	PID_calc(ptrPIDHandler, sampling_time, 0,  distance_recta);
 8002dfa:	ed97 1a04 	vldr	s2, [r7, #16]
 8002dfe:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8002f68 <PID_control+0x1dc>
 8002e02:	ed97 0a05 	vldr	s0, [r7, #20]
 8002e06:	6838      	ldr	r0, [r7, #0]
 8002e08:	f000 f8bc 	bl	8002f84 <PID_calc>

	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint - ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 8002e0c:	4b57      	ldr	r3, [pc, #348]	; (8002f6c <PID_control+0x1e0>)
 8002e0e:	ed93 7a00 	vldr	s14, [r3]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	edd3 7a00 	vldr	s15, [r3]
 8002e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e1c:	4b54      	ldr	r3, [pc, #336]	; (8002f70 <PID_control+0x1e4>)
 8002e1e:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint + ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	ed93 7a00 	vldr	s14, [r3]
 8002e28:	4b50      	ldr	r3, [pc, #320]	; (8002f6c <PID_control+0x1e0>)
 8002e2a:	edd3 7a00 	vldr	s15, [r3]
 8002e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e32:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <PID_control+0x1e8>)
 8002e34:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4b4c      	ldr	r3, [pc, #304]	; (8002f70 <PID_control+0x1e4>)
 8002e40:	edd3 7a00 	vldr	s15, [r3]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e4c:	eeb0 1a47 	vmov.f32	s2, s14
 8002e50:	eef0 0a67 	vmov.f32	s1, s15
 8002e54:	ed97 0a05 	vldr	s0, [r7, #20]
 8002e58:	4610      	mov	r0, r2
 8002e5a:	f000 f893 	bl	8002f84 <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	3304      	adds	r3, #4
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4b43      	ldr	r3, [pc, #268]	; (8002f74 <PID_control+0x1e8>)
 8002e68:	edd3 7a00 	vldr	s15, [r3]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e76:	eeb0 1a47 	vmov.f32	s2, s14
 8002e7a:	eef0 0a67 	vmov.f32	s1, s15
 8002e7e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002e82:	4610      	mov	r0, r2
 8002e84:	f000 f87e 	bl	8002f84 <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	edd3 7a00 	vldr	s15, [r3]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea2:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	ed93 7a05 	vldr	s14, [r3, #20]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	edd3 7a00 	vldr	s15, [r3]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec6:	edc3 7a05 	vstr	s15, [r3, #20]

	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ed2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002f78 <PID_control+0x1ec>
 8002ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ede:	db04      	blt.n	8002eea <PID_control+0x15e>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a25      	ldr	r2, [pc, #148]	; (8002f7c <PID_control+0x1f0>)
 8002ee6:	615a      	str	r2, [r3, #20]
 8002ee8:	e00e      	b.n	8002f08 <PID_control+0x17c>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ef2:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efe:	d803      	bhi.n	8002f08 <PID_control+0x17c>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <PID_control+0x1f4>)
 8002f06:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f12:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002f78 <PID_control+0x1ec>
 8002f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1e:	db05      	blt.n	8002f2c <PID_control+0x1a0>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3304      	adds	r3, #4
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a15      	ldr	r2, [pc, #84]	; (8002f7c <PID_control+0x1f0>)
 8002f28:	615a      	str	r2, [r3, #20]
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
	}

}
 8002f2a:	e011      	b.n	8002f50 <PID_control+0x1c4>
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f36:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f42:	d900      	bls.n	8002f46 <PID_control+0x1ba>
}
 8002f44:	e004      	b.n	8002f50 <PID_control+0x1c4>
		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0c      	ldr	r2, [pc, #48]	; (8002f80 <PID_control+0x1f4>)
 8002f4e:	615a      	str	r2, [r3, #20]
}
 8002f50:	bf00      	nop
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200002f0 	.word	0x200002f0
 8002f5c:	20000010 	.word	0x20000010
 8002f60:	447a0000 	.word	0x447a0000
 8002f64:	408f4000 	.word	0x408f4000
 8002f68:	00000000 	.word	0x00000000
 8002f6c:	20000ad0 	.word	0x20000ad0
 8002f70:	20000ad4 	.word	0x20000ad4
 8002f74:	20000ad8 	.word	0x20000ad8
 8002f78:	42700000 	.word	0x42700000
 8002f7c:	42700000 	.word	0x42700000
 8002f80:	41b80000 	.word	0x41b80000

08002f84 <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler,
		      float time_of_sampling,
			  float setpoint,
			  float current_measure){
 8002f84:	b480      	push	{r7}
 8002f86:	b089      	sub	sp, #36	; 0x24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f90:	edc7 0a01 	vstr	s1, [r7, #4]
 8002f94:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 8002f98:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f9c:	edd7 7a00 	vldr	s15, [r7]
 8002fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	ed93 7a04 	vldr	s14, [r3, #16]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fba:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	edd3 6a01 	vldr	s13, [r3, #4]
 8002fca:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	ed93 7a05 	vldr	s14, [r3, #20]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fec:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd*(ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003002:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003006:	ee67 6a27 	vmul.f32	s13, s14, s15
 800300a:	ed97 7a02 	vldr	s14, [r7, #8]
 800300e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003012:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 8003016:	ed97 7a07 	vldr	s14, [r7, #28]
 800301a:	edd7 7a06 	vldr	s15, [r7, #24]
 800301e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003022:	edd7 7a05 	vldr	s15, [r7, #20]
 8003026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	60da      	str	r2, [r3, #12]
}
 8003038:	bf00      	nop
 800303a:	3724      	adds	r7, #36	; 0x24
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <go>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	6178      	str	r0, [r7, #20]
 800304c:	6139      	str	r1, [r7, #16]
 800304e:	60fa      	str	r2, [r7, #12]
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 800305e:	68f9      	ldr	r1, [r7, #12]
 8003060:	ed97 1b00 	vldr	d1, [r7]
 8003064:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8003168 <go+0x124>
 8003068:	6938      	ldr	r0, [r7, #16]
 800306a:	f7fe ff0f 	bl	8001e8c <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8003074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <go+0x4e>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 800307c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800307e:	68f9      	ldr	r1, [r7, #12]
 8003080:	6978      	ldr	r0, [r7, #20]
 8003082:	f7fe ff61 	bl	8001f48 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
		//Levandamos la bandera de control
		*fcontrol = SET;
 800308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
	}

	// Control
	if (*fcontrol){
 8003092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d061      	beq.n	800315e <go+0x11a>

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	3304      	adds	r3, #4
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	ed93 7a03 	vldr	s14, [r3, #12]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80030ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80030b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80030b8:	ee16 0a90 	vmov	r0, s13
 80030bc:	f7fd fa5c 	bl	8000578 <__aeabi_f2d>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	e9c7 2306 	strd	r2, r3, [r7, #24]

		ptrPosHandler->xr_position = distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	ed93 7b04 	vldr	d7, [r3, #16]
 80030ce:	eeb0 0a47 	vmov.f32	s0, s14
 80030d2:	eef0 0a67 	vmov.f32	s1, s15
 80030d6:	f00a fad3 	bl	800d680 <cos>
 80030da:	ec51 0b10 	vmov	r0, r1, d0
 80030de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e2:	f7fd faa1 	bl	8000628 <__aeabi_dmul>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	68f9      	ldr	r1, [r7, #12]
 80030ec:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position = distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	ed93 7b04 	vldr	d7, [r3, #16]
 80030f6:	eeb0 0a47 	vmov.f32	s0, s14
 80030fa:	eef0 0a67 	vmov.f32	s1, s15
 80030fe:	f00a fb5b 	bl	800d7b8 <sin>
 8003102:	ec51 0b10 	vmov	r0, r1, d0
 8003106:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800310a:	f7fd fa8d 	bl	8000628 <__aeabi_dmul>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	68f9      	ldr	r1, [r7, #12]
 8003114:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003124:	f7fd f8ca 	bl	80002bc <__adddf3>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	68f9      	ldr	r1, [r7, #12]
 800312e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800313e:	f7fd f8bd 	bl	80002bc <__adddf3>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	68f9      	ldr	r1, [r7, #12]
 8003148:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		//Convertimos el valor y imprimimos en la terminal
//		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
//
//		writeMsg(&handlerUSART, buff);

		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler);
 800314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	6978      	ldr	r0, [r7, #20]
 8003154:	f7ff fe1a 	bl	8002d8c <PID_control>

		*fcontrol = RESET;
 8003158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
	}
}
 800315e:	bf00      	nop
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	00000000 	.word	0x00000000

0800316c <NOP>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6178      	str	r0, [r7, #20]
 8003174:	6139      	str	r1, [r7, #16]
 8003176:	60fa      	str	r2, [r7, #12]
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <NOP+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8003186:	68f9      	ldr	r1, [r7, #12]
 8003188:	ed97 1b00 	vldr	d1, [r7]
 800318c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80031bc <NOP+0x50>
 8003190:	6938      	ldr	r0, [r7, #16]
 8003192:	f7fe fe7b 	bl	8001e8c <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <NOP+0x48>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 80031a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031a6:	68f9      	ldr	r1, [r7, #12]
 80031a8:	6978      	ldr	r0, [r7, #20]
 80031aa:	f7fe fecd 	bl	8001f48 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
	}

}
 80031b4:	bf00      	nop
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	00000000 	.word	0x00000000

080031c0 <extract_info>:
				   unsigned char firstParameter[10],
				   unsigned char secondParameter[10],
				   unsigned char thirdParameter[10],
				   unsigned int *fparam,
				   unsigned int *sparam,
				   unsigned int *tparam){
 80031c0:	b5b0      	push	{r4, r5, r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	603b      	str	r3, [r7, #0]

	int counter = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
	uint8_t count_f = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	763b      	strb	r3, [r7, #24]
	uint8_t count_s = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75fb      	strb	r3, [r7, #23]
	uint8_t count_t = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	75bb      	strb	r3, [r7, #22]

	uint8_t len_f = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	76fb      	strb	r3, [r7, #27]
	uint8_t len_s = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	76bb      	strb	r3, [r7, #26]
	uint8_t len_t = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	767b      	strb	r3, [r7, #25]



	while (1){

		while (cmd->payload[counter] != ' '){
 80031ea:	e00a      	b.n	8003202 <extract_info+0x42>

			data[counter] = cmd->payload[counter];
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	4413      	add	r3, r2
 80031f2:	68f9      	ldr	r1, [r7, #12]
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	440a      	add	r2, r1
 80031f8:	7812      	ldrb	r2, [r2, #0]
 80031fa:	701a      	strb	r2, [r3, #0]

			counter++;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	3301      	adds	r3, #1
 8003200:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	4413      	add	r3, r2
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b20      	cmp	r3, #32
 800320c:	d1ee      	bne.n	80031ec <extract_info+0x2c>
		}

		// Le agregamos a data la terminacion nula
		data[counter] = '\0';
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	4413      	add	r3, r2
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	3301      	adds	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	4413      	add	r3, r2
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b23      	cmp	r3, #35	; 0x23
 8003228:	f000 8088 	beq.w	800333c <extract_info+0x17c>
			break;
		}

		count_f = counter;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	763b      	strb	r3, [r7, #24]

		// Buscamos el firstParameter en el string
		while (cmd->payload[counter] != ' '){
 8003230:	e00d      	b.n	800324e <extract_info+0x8e>

			firstParameter[counter - count_f] = cmd->payload[counter];
 8003232:	7e3b      	ldrb	r3, [r7, #24]
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	461a      	mov	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	68f9      	ldr	r1, [r7, #12]
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	440a      	add	r2, r1
 8003244:	7812      	ldrb	r2, [r2, #0]
 8003246:	701a      	strb	r2, [r3, #0]

			counter++;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	3301      	adds	r3, #1
 800324c:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	4413      	add	r3, r2
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b20      	cmp	r3, #32
 8003258:	d1eb      	bne.n	8003232 <extract_info+0x72>
		}

		len_f = counter - count_f; // Longitud del first parameter
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	b2da      	uxtb	r2, r3
 800325e:	7e3b      	ldrb	r3, [r7, #24]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	76fb      	strb	r3, [r7, #27]

		// Le agregamos a data la terminacion nula
		firstParameter[counter - count_f] = '\0';
 8003264:	7e3b      	ldrb	r3, [r7, #24]
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	461a      	mov	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	3301      	adds	r3, #1
 8003278:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	4413      	add	r3, r2
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b23      	cmp	r3, #35	; 0x23
 8003284:	d05c      	beq.n	8003340 <extract_info+0x180>
			break;
		}

		count_s = counter;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	75fb      	strb	r3, [r7, #23]

		// Buscamos el secondParameter en el string
		while (cmd->payload[counter] != ' '){
 800328a:	e00d      	b.n	80032a8 <extract_info+0xe8>

			secondParameter[counter - count_s] = cmd->payload[counter];
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	461a      	mov	r2, r3
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	4413      	add	r3, r2
 8003298:	68f9      	ldr	r1, [r7, #12]
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	440a      	add	r2, r1
 800329e:	7812      	ldrb	r2, [r2, #0]
 80032a0:	701a      	strb	r2, [r3, #0]

			counter++;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3301      	adds	r3, #1
 80032a6:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	4413      	add	r3, r2
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d1eb      	bne.n	800328c <extract_info+0xcc>
		}

		len_s = counter - count_s; // Longitud del second parameter
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	76bb      	strb	r3, [r7, #26]

		// Le agregamos a data la terminacion nula
		secondParameter[counter - count_s] = '\0';
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	4413      	add	r3, r2
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3301      	adds	r3, #1
 80032d2:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	4413      	add	r3, r2
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b23      	cmp	r3, #35	; 0x23
 80032de:	d031      	beq.n	8003344 <extract_info+0x184>
			break;
		}

		count_t = counter;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	75bb      	strb	r3, [r7, #22]

		// Buscamos el thirdParameter en el string
		while (cmd->payload[counter] != ' '){
 80032e4:	e00d      	b.n	8003302 <extract_info+0x142>

			thirdParameter[counter - count_t] = cmd->payload[counter];
 80032e6:	7dbb      	ldrb	r3, [r7, #22]
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	4413      	add	r3, r2
 80032f2:	68f9      	ldr	r1, [r7, #12]
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	440a      	add	r2, r1
 80032f8:	7812      	ldrb	r2, [r2, #0]
 80032fa:	701a      	strb	r2, [r3, #0]

			counter++;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	3301      	adds	r3, #1
 8003300:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b20      	cmp	r3, #32
 800330c:	d1eb      	bne.n	80032e6 <extract_info+0x126>
		}

		len_t = counter - count_t; // Longitud del second parameter
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	b2da      	uxtb	r2, r3
 8003312:	7dbb      	ldrb	r3, [r7, #22]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	767b      	strb	r3, [r7, #25]

		// Le agregamos a data la terminacion nula
		thirdParameter[counter - count_t] = '\0';
 8003318:	7dbb      	ldrb	r3, [r7, #22]
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	461a      	mov	r2, r3
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	4413      	add	r3, r2
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	3301      	adds	r3, #1
 800332c:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	4413      	add	r3, r2
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b23      	cmp	r3, #35	; 0x23
 8003338:	d006      	beq.n	8003348 <extract_info+0x188>
		while (cmd->payload[counter] != ' '){
 800333a:	e762      	b.n	8003202 <extract_info+0x42>
			break;
 800333c:	bf00      	nop
 800333e:	e004      	b.n	800334a <extract_info+0x18a>
			break;
 8003340:	bf00      	nop
 8003342:	e002      	b.n	800334a <extract_info+0x18a>
			break;
 8003344:	bf00      	nop
 8003346:	e000      	b.n	800334a <extract_info+0x18a>
			break;
 8003348:	bf00      	nop
		}
	}

	counter = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]

	////////////////////////////////Bloque para convertir a valores enteros los first second y third parametros///////////////////

	// Comenzamos con el primer parametro

	if (len_f == 0){
 800334e:	7efb      	ldrb	r3, [r7, #27]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <extract_info+0x198>
		return 1; // Si se llega aca es porque no hay primer parametro, por loq ue no habra ni segundo ni tercero
 8003354:	2301      	movs	r3, #1
 8003356:	e0d6      	b.n	8003506 <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en fistParameters que necesita ser convertido en un numero

	for (counter = len_f-1; counter > -1; counter--){
 8003358:	7efb      	ldrb	r3, [r7, #27]
 800335a:	3b01      	subs	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	e03c      	b.n	80033da <extract_info+0x21a>

		*fparam += (firstParameter[abs(counter - (len_f-1))] -48) * pow(10,counter);
 8003360:	7efb      	ldrb	r3, [r7, #27]
 8003362:	3b01      	subs	r3, #1
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	bfb8      	it	lt
 800336c:	425b      	neglt	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	3b30      	subs	r3, #48	; 0x30
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd f8eb 	bl	8000554 <__aeabi_i2d>
 800337e:	4604      	mov	r4, r0
 8003380:	460d      	mov	r5, r1
 8003382:	69f8      	ldr	r0, [r7, #28]
 8003384:	f7fd f8e6 	bl	8000554 <__aeabi_i2d>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	ec43 2b11 	vmov	d1, r2, r3
 8003390:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8003510 <extract_info+0x350>
 8003394:	f00a fa6a 	bl	800d86c <pow>
 8003398:	ec53 2b10 	vmov	r2, r3, d0
 800339c:	4620      	mov	r0, r4
 800339e:	4629      	mov	r1, r5
 80033a0:	f7fd f942 	bl	8000628 <__aeabi_dmul>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4614      	mov	r4, r2
 80033aa:	461d      	mov	r5, r3
 80033ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fd f8bf 	bl	8000534 <__aeabi_ui2d>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4620      	mov	r0, r4
 80033bc:	4629      	mov	r1, r5
 80033be:	f7fc ff7d 	bl	80002bc <__adddf3>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	f7fd fc05 	bl	8000bd8 <__aeabi_d2uiz>
 80033ce:	4602      	mov	r2, r0
 80033d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d2:	601a      	str	r2, [r3, #0]
	for (counter = len_f-1; counter > -1; counter--){
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	dabf      	bge.n	8003360 <extract_info+0x1a0>

	// CONSTRUIDO EL PRIMER PARAMETRO, se hace lo mismo para el segundo y el tercero

	// Comenzamos con el segundo parametro

	if (len_s == 0){
 80033e0:	7ebb      	ldrb	r3, [r7, #26]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <extract_info+0x22a>
		return 2; // Si se llega aca es porque no hay segundo parametro, por lo que no habra tercer parametro
 80033e6:	2302      	movs	r3, #2
 80033e8:	e08d      	b.n	8003506 <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en secondParameter que necesita ser convertido en un numero

	for (counter = len_s-1; counter > -1; counter--){
 80033ea:	7ebb      	ldrb	r3, [r7, #26]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	e03c      	b.n	800346c <extract_info+0x2ac>

		*sparam += (secondParameter[abs(counter - (len_s-1))]-48) * pow(10,counter);
 80033f2:	7ebb      	ldrb	r3, [r7, #26]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	bfb8      	it	lt
 80033fe:	425b      	neglt	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	4413      	add	r3, r2
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	3b30      	subs	r3, #48	; 0x30
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd f8a2 	bl	8000554 <__aeabi_i2d>
 8003410:	4604      	mov	r4, r0
 8003412:	460d      	mov	r5, r1
 8003414:	69f8      	ldr	r0, [r7, #28]
 8003416:	f7fd f89d 	bl	8000554 <__aeabi_i2d>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	ec43 2b11 	vmov	d1, r2, r3
 8003422:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8003510 <extract_info+0x350>
 8003426:	f00a fa21 	bl	800d86c <pow>
 800342a:	ec53 2b10 	vmov	r2, r3, d0
 800342e:	4620      	mov	r0, r4
 8003430:	4629      	mov	r1, r5
 8003432:	f7fd f8f9 	bl	8000628 <__aeabi_dmul>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4614      	mov	r4, r2
 800343c:	461d      	mov	r5, r3
 800343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd f876 	bl	8000534 <__aeabi_ui2d>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4620      	mov	r0, r4
 800344e:	4629      	mov	r1, r5
 8003450:	f7fc ff34 	bl	80002bc <__adddf3>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	f7fd fbbc 	bl	8000bd8 <__aeabi_d2uiz>
 8003460:	4602      	mov	r2, r0
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	601a      	str	r2, [r3, #0]
	for (counter = len_s-1; counter > -1; counter--){
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3b01      	subs	r3, #1
 800346a:	61fb      	str	r3, [r7, #28]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b00      	cmp	r3, #0
 8003470:	dabf      	bge.n	80033f2 <extract_info+0x232>
	}

	// Comenzamos con el tercer parametro

	if (len_t == 0){
 8003472:	7e7b      	ldrb	r3, [r7, #25]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <extract_info+0x2bc>
		return 3; // Si se llega aca es porque no hay tercer parametro, por lo que no habra tercer parametro
 8003478:	2303      	movs	r3, #3
 800347a:	e044      	b.n	8003506 <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en thirdParameter que necesita ser convertido en un numero

	for (counter = len_t-1; counter > -1; counter--){
 800347c:	7e7b      	ldrb	r3, [r7, #25]
 800347e:	3b01      	subs	r3, #1
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	e03c      	b.n	80034fe <extract_info+0x33e>

		*tparam += (thirdParameter[abs(counter - (len_t-1))] - 48) * pow(10,counter);
 8003484:	7e7b      	ldrb	r3, [r7, #25]
 8003486:	3b01      	subs	r3, #1
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	bfb8      	it	lt
 8003490:	425b      	neglt	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	4413      	add	r3, r2
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	3b30      	subs	r3, #48	; 0x30
 800349c:	4618      	mov	r0, r3
 800349e:	f7fd f859 	bl	8000554 <__aeabi_i2d>
 80034a2:	4604      	mov	r4, r0
 80034a4:	460d      	mov	r5, r1
 80034a6:	69f8      	ldr	r0, [r7, #28]
 80034a8:	f7fd f854 	bl	8000554 <__aeabi_i2d>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	ec43 2b11 	vmov	d1, r2, r3
 80034b4:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8003510 <extract_info+0x350>
 80034b8:	f00a f9d8 	bl	800d86c <pow>
 80034bc:	ec53 2b10 	vmov	r2, r3, d0
 80034c0:	4620      	mov	r0, r4
 80034c2:	4629      	mov	r1, r5
 80034c4:	f7fd f8b0 	bl	8000628 <__aeabi_dmul>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4614      	mov	r4, r2
 80034ce:	461d      	mov	r5, r3
 80034d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd f82d 	bl	8000534 <__aeabi_ui2d>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4620      	mov	r0, r4
 80034e0:	4629      	mov	r1, r5
 80034e2:	f7fc feeb 	bl	80002bc <__adddf3>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	f7fd fb73 	bl	8000bd8 <__aeabi_d2uiz>
 80034f2:	4602      	mov	r2, r0
 80034f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f6:	601a      	str	r2, [r3, #0]
	for (counter = len_t-1; counter > -1; counter--){
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	2b00      	cmp	r3, #0
 8003502:	dabf      	bge.n	8003484 <extract_info+0x2c4>
	}


	////////////// SI SE LLEGA HASTA ACA ES PORQUE YA TODO ESTA CONVERTIDO///////////////

	return 0;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3720      	adds	r7, #32
 800350a:	46bd      	mov	sp, r7
 800350c:	bdb0      	pop	{r4, r5, r7, pc}
 800350e:	bf00      	nop
 8003510:	00000000 	.word	0x00000000
 8003514:	40240000 	.word	0x40240000

08003518 <resetParameters>:


void resetParameters(void){
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
	fparam = 0;
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <resetParameters+0x20>)
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
	sparam = 0;
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <resetParameters+0x24>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
	tparam = 0;
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <resetParameters+0x28>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
}
 800352e:	bf00      	nop
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	20000490 	.word	0x20000490
 800353c:	20000494 	.word	0x20000494
 8003540:	20000498 	.word	0x20000498

08003544 <led_state_callback>:




void led_state_callback (TimerHandle_t xTimer){
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

	GPIOxTooglePin(&handlerPinA5);
 800354c:	4803      	ldr	r0, [pc, #12]	; (800355c <led_state_callback+0x18>)
 800354e:	f004 ff32 	bl	80083b6 <GPIOxTooglePin>

}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000244 	.word	0x20000244

08003560 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800356a:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <ITM_SendChar+0x48>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a0e      	ldr	r2, [pc, #56]	; (80035a8 <ITM_SendChar+0x48>)
 8003570:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003574:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <ITM_SendChar+0x4c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a0c      	ldr	r2, [pc, #48]	; (80035ac <ITM_SendChar+0x4c>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8003582:	bf00      	nop
 8003584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f8      	beq.n	8003584 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8003592:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	6013      	str	r3, [r2, #0]
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	e000edfc 	.word	0xe000edfc
 80035ac:	e0000e00 	.word	0xe0000e00

080035b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
	return 1;
 80035b4:	2301      	movs	r3, #1
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <_kill>:

int _kill(int pid, int sig)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035ca:	f007 fb11 	bl	800abf0 <__errno>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2216      	movs	r2, #22
 80035d2:	601a      	str	r2, [r3, #0]
	return -1;
 80035d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <_exit>:

void _exit (int status)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035e8:	f04f 31ff 	mov.w	r1, #4294967295
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff ffe7 	bl	80035c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80035f2:	e7fe      	b.n	80035f2 <_exit+0x12>

080035f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	e00a      	b.n	800361c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003606:	f3af 8000 	nop.w
 800360a:	4601      	mov	r1, r0
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	60ba      	str	r2, [r7, #8]
 8003612:	b2ca      	uxtb	r2, r1
 8003614:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	3301      	adds	r3, #1
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	429a      	cmp	r2, r3
 8003622:	dbf0      	blt.n	8003606 <_read+0x12>
	}

return len;
 8003624:	687b      	ldr	r3, [r7, #4]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b086      	sub	sp, #24
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e009      	b.n	8003654 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	60ba      	str	r2, [r7, #8]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff ff89 	bl	8003560 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	3301      	adds	r3, #1
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	dbf1      	blt.n	8003640 <_write+0x12>
	}
	return len;
 800365c:	687b      	ldr	r3, [r7, #4]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <_close>:

int _close(int file)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
	return -1;
 800366e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800368e:	605a      	str	r2, [r3, #4]
	return 0;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <_isatty>:

int _isatty(int file)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
	return 1;
 80036a6:	2301      	movs	r3, #1
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
	return 0;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036d0:	480d      	ldr	r0, [pc, #52]	; (8003708 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80036d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036d8:	480c      	ldr	r0, [pc, #48]	; (800370c <LoopForever+0x6>)
  ldr r1, =_edata
 80036da:	490d      	ldr	r1, [pc, #52]	; (8003710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036dc:	4a0d      	ldr	r2, [pc, #52]	; (8003714 <LoopForever+0xe>)
  movs r3, #0
 80036de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036e0:	e002      	b.n	80036e8 <LoopCopyDataInit>

080036e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036e6:	3304      	adds	r3, #4

080036e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036ec:	d3f9      	bcc.n	80036e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ee:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036f0:	4c0a      	ldr	r4, [pc, #40]	; (800371c <LoopForever+0x16>)
  movs r3, #0
 80036f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036f4:	e001      	b.n	80036fa <LoopFillZerobss>

080036f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036f8:	3204      	adds	r2, #4

080036fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036fc:	d3fb      	bcc.n	80036f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80036fe:	f007 fa7d 	bl	800abfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003702:	f7fd fad9 	bl	8000cb8 <main>

08003706 <LoopForever>:

LoopForever:
    b LoopForever
 8003706:	e7fe      	b.n	8003706 <LoopForever>
  ldr   r0, =_estack
 8003708:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800370c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003710:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003714:	08010388 	.word	0x08010388
  ldr r2, =_sbss
 8003718:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800371c:	200138c0 	.word	0x200138c0

08003720 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003720:	e7fe      	b.n	8003720 <ADC_IRQHandler>

08003722 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f103 0208 	add.w	r2, r3, #8
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f04f 32ff 	mov.w	r2, #4294967295
 800373a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f103 0208 	add.w	r2, r3, #8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f103 0208 	add.w	r2, r3, #8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	d103      	bne.n	80037e4 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	e00c      	b.n	80037fe <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3308      	adds	r3, #8
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e002      	b.n	80037f2 <vListInsert+0x2e>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d2f6      	bcs.n	80037ec <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	601a      	str	r2, [r3, #0]
}
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003836:	b480      	push	{r7}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6892      	ldr	r2, [r2, #8]
 800384c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6852      	ldr	r2, [r2, #4]
 8003856:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	429a      	cmp	r2, r3
 8003860:	d103      	bne.n	800386a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	1e5a      	subs	r2, r3, #1
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <xQueueGenericReset+0x2a>
        __asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	60bb      	str	r3, [r7, #8]
    }
 80038b2:	bf00      	nop
 80038b4:	e7fe      	b.n	80038b4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80038b6:	f002 fadf 	bl	8005e78 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	68f9      	ldr	r1, [r7, #12]
 80038c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	441a      	add	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e6:	3b01      	subs	r3, #1
 80038e8:	68f9      	ldr	r1, [r7, #12]
 80038ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	441a      	add	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	22ff      	movs	r2, #255	; 0xff
 80038fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	22ff      	movs	r2, #255	; 0xff
 8003902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d114      	bne.n	8003936 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01a      	beq.n	800394a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3310      	adds	r3, #16
 8003918:	4618      	mov	r0, r3
 800391a:	f001 f913 	bl	8004b44 <xTaskRemoveFromEventList>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d012      	beq.n	800394a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <xQueueGenericReset+0xcc>)
 8003926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	e009      	b.n	800394a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3310      	adds	r3, #16
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff fef1 	bl	8003722 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3324      	adds	r3, #36	; 0x24
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff feec 	bl	8003722 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800394a:	f002 fac5 	bl	8005ed8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800394e:	2301      	movs	r3, #1
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	e000ed04 	.word	0xe000ed04

0800395c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800395c:	b580      	push	{r7, lr}
 800395e:	b08c      	sub	sp, #48	; 0x30
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	4613      	mov	r3, r2
 8003968:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <xQueueGenericCreate+0x2a>
        __asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	61bb      	str	r3, [r7, #24]
    }
 8003982:	bf00      	nop
 8003984:	e7fe      	b.n	8003984 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	fb02 f303 	mul.w	r3, r2, r3
 800398e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d006      	beq.n	80039a4 <xQueueGenericCreate+0x48>
 8003996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d101      	bne.n	80039a8 <xQueueGenericCreate+0x4c>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <xQueueGenericCreate+0x4e>
 80039a8:	2300      	movs	r3, #0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10a      	bne.n	80039c4 <xQueueGenericCreate+0x68>
        __asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	617b      	str	r3, [r7, #20]
    }
 80039c0:	bf00      	nop
 80039c2:	e7fe      	b.n	80039c2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80039ca:	d90a      	bls.n	80039e2 <xQueueGenericCreate+0x86>
        __asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	613b      	str	r3, [r7, #16]
    }
 80039de:	bf00      	nop
 80039e0:	e7fe      	b.n	80039e0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	3350      	adds	r3, #80	; 0x50
 80039e6:	4618      	mov	r0, r3
 80039e8:	f002 fb68 	bl	80060bc <pvPortMalloc>
 80039ec:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00d      	beq.n	8003a10 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	3350      	adds	r3, #80	; 0x50
 80039fc:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039fe:	79fa      	ldrb	r2, [r7, #7]
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f805 	bl	8003a1a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003a10:	6a3b      	ldr	r3, [r7, #32]
    }
 8003a12:	4618      	mov	r0, r3
 8003a14:	3728      	adds	r7, #40	; 0x28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d103      	bne.n	8003a36 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	e002      	b.n	8003a3c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a48:	2101      	movs	r1, #1
 8003a4a:	69b8      	ldr	r0, [r7, #24]
 8003a4c:	f7ff ff1e 	bl	800388c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003a58:	bf00      	nop
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08e      	sub	sp, #56	; 0x38
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10a      	bne.n	8003a92 <xQueueGenericSend+0x32>
        __asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003a8e:	bf00      	nop
 8003a90:	e7fe      	b.n	8003a90 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d103      	bne.n	8003aa0 <xQueueGenericSend+0x40>
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <xQueueGenericSend+0x44>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <xQueueGenericSend+0x46>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <xQueueGenericSend+0x60>
        __asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003abc:	bf00      	nop
 8003abe:	e7fe      	b.n	8003abe <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d103      	bne.n	8003ace <xQueueGenericSend+0x6e>
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <xQueueGenericSend+0x72>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <xQueueGenericSend+0x74>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <xQueueGenericSend+0x8e>
        __asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	623b      	str	r3, [r7, #32]
    }
 8003aea:	bf00      	nop
 8003aec:	e7fe      	b.n	8003aec <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003aee:	f001 f9c5 	bl	8004e7c <xTaskGetSchedulerState>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <xQueueGenericSend+0x9e>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <xQueueGenericSend+0xa2>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <xQueueGenericSend+0xa4>
 8003b02:	2300      	movs	r3, #0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10a      	bne.n	8003b1e <xQueueGenericSend+0xbe>
        __asm volatile
 8003b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	61fb      	str	r3, [r7, #28]
    }
 8003b1a:	bf00      	nop
 8003b1c:	e7fe      	b.n	8003b1c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003b1e:	f002 f9ab 	bl	8005e78 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d302      	bcc.n	8003b34 <xQueueGenericSend+0xd4>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d129      	bne.n	8003b88 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b3a:	f000 fac6 	bl	80040ca <prvCopyDataToQueue>
 8003b3e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d010      	beq.n	8003b6a <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	3324      	adds	r3, #36	; 0x24
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fff9 	bl	8004b44 <xTaskRemoveFromEventList>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d013      	beq.n	8003b80 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003b58:	4b3f      	ldr	r3, [pc, #252]	; (8003c58 <xQueueGenericSend+0x1f8>)
 8003b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	e00a      	b.n	8003b80 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003b70:	4b39      	ldr	r3, [pc, #228]	; (8003c58 <xQueueGenericSend+0x1f8>)
 8003b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003b80:	f002 f9aa 	bl	8005ed8 <vPortExitCritical>
                return pdPASS;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e063      	b.n	8003c50 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d103      	bne.n	8003b96 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003b8e:	f002 f9a3 	bl	8005ed8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e05c      	b.n	8003c50 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003b9c:	f107 0314 	add.w	r3, r7, #20
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 f831 	bl	8004c08 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003baa:	f002 f995 	bl	8005ed8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003bae:	f000 fdb9 	bl	8004724 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003bb2:	f002 f961 	bl	8005e78 <vPortEnterCritical>
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bbc:	b25b      	sxtb	r3, r3
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d103      	bne.n	8003bcc <xQueueGenericSend+0x16c>
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bd2:	b25b      	sxtb	r3, r3
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d103      	bne.n	8003be2 <xQueueGenericSend+0x182>
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003be2:	f002 f979 	bl	8005ed8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003be6:	1d3a      	adds	r2, r7, #4
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	4611      	mov	r1, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f001 f820 	bl	8004c34 <xTaskCheckForTimeOut>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d124      	bne.n	8003c44 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003bfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bfc:	f000 fb5d 	bl	80042ba <prvIsQueueFull>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d018      	beq.n	8003c38 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	3310      	adds	r3, #16
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 ff48 	bl	8004aa4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c16:	f000 fae8 	bl	80041ea <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003c1a:	f000 fd91 	bl	8004740 <xTaskResumeAll>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f47f af7c 	bne.w	8003b1e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003c26:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <xQueueGenericSend+0x1f8>)
 8003c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	e772      	b.n	8003b1e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c3a:	f000 fad6 	bl	80041ea <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003c3e:	f000 fd7f 	bl	8004740 <xTaskResumeAll>
 8003c42:	e76c      	b.n	8003b1e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c46:	f000 fad0 	bl	80041ea <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003c4a:	f000 fd79 	bl	8004740 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003c4e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3738      	adds	r7, #56	; 0x38
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	e000ed04 	.word	0xe000ed04

08003c5c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b090      	sub	sp, #64	; 0x40
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d103      	bne.n	8003c98 <xQueueGenericSendFromISR+0x3c>
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <xQueueGenericSendFromISR+0x40>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <xQueueGenericSendFromISR+0x42>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10a      	bne.n	8003cb8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003cb4:	bf00      	nop
 8003cb6:	e7fe      	b.n	8003cb6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d103      	bne.n	8003cc6 <xQueueGenericSendFromISR+0x6a>
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <xQueueGenericSendFromISR+0x6e>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <xQueueGenericSendFromISR+0x70>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10a      	bne.n	8003ce6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	623b      	str	r3, [r7, #32]
    }
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ce6:	f002 f9a9 	bl	800603c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003cea:	f3ef 8211 	mrs	r2, BASEPRI
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	61fa      	str	r2, [r7, #28]
 8003d00:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003d02:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d302      	bcc.n	8003d18 <xQueueGenericSendFromISR+0xbc>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d13e      	bne.n	8003d96 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d2e:	f000 f9cc 	bl	80040ca <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003d32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d112      	bne.n	8003d62 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d025      	beq.n	8003d90 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	3324      	adds	r3, #36	; 0x24
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fefb 	bl	8004b44 <xTaskRemoveFromEventList>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01d      	beq.n	8003d90 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01a      	beq.n	8003d90 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	e016      	b.n	8003d90 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003d62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003d66:	2b7f      	cmp	r3, #127	; 0x7f
 8003d68:	d10a      	bne.n	8003d80 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	617b      	str	r3, [r7, #20]
    }
 8003d7c:	bf00      	nop
 8003d7e:	e7fe      	b.n	8003d7e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d84:	3301      	adds	r3, #1
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	b25a      	sxtb	r2, r3
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003d90:	2301      	movs	r3, #1
 8003d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003d94:	e001      	b.n	8003d9a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003da4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3740      	adds	r7, #64	; 0x40
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08c      	sub	sp, #48	; 0x30
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10a      	bne.n	8003de0 <xQueueReceive+0x30>
        __asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	623b      	str	r3, [r7, #32]
    }
 8003ddc:	bf00      	nop
 8003dde:	e7fe      	b.n	8003dde <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d103      	bne.n	8003dee <xQueueReceive+0x3e>
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <xQueueReceive+0x42>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <xQueueReceive+0x44>
 8003df2:	2300      	movs	r3, #0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10a      	bne.n	8003e0e <xQueueReceive+0x5e>
        __asm volatile
 8003df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfc:	f383 8811 	msr	BASEPRI, r3
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	61fb      	str	r3, [r7, #28]
    }
 8003e0a:	bf00      	nop
 8003e0c:	e7fe      	b.n	8003e0c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e0e:	f001 f835 	bl	8004e7c <xTaskGetSchedulerState>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d102      	bne.n	8003e1e <xQueueReceive+0x6e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <xQueueReceive+0x72>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <xQueueReceive+0x74>
 8003e22:	2300      	movs	r3, #0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <xQueueReceive+0x8e>
        __asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	61bb      	str	r3, [r7, #24]
    }
 8003e3a:	bf00      	nop
 8003e3c:	e7fe      	b.n	8003e3c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003e3e:	f002 f81b 	bl	8005e78 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d01f      	beq.n	8003e8e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e52:	f000 f9a4 	bl	800419e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	1e5a      	subs	r2, r3, #1
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00f      	beq.n	8003e86 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	3310      	adds	r3, #16
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fe6a 	bl	8004b44 <xTaskRemoveFromEventList>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003e76:	4b3d      	ldr	r3, [pc, #244]	; (8003f6c <xQueueReceive+0x1bc>)
 8003e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003e86:	f002 f827 	bl	8005ed8 <vPortExitCritical>
                return pdPASS;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e069      	b.n	8003f62 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d103      	bne.n	8003e9c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003e94:	f002 f820 	bl	8005ed8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e062      	b.n	8003f62 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003ea2:	f107 0310 	add.w	r3, r7, #16
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 feae 	bl	8004c08 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003eac:	2301      	movs	r3, #1
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003eb0:	f002 f812 	bl	8005ed8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003eb4:	f000 fc36 	bl	8004724 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003eb8:	f001 ffde 	bl	8005e78 <vPortEnterCritical>
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ec2:	b25b      	sxtb	r3, r3
 8003ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec8:	d103      	bne.n	8003ed2 <xQueueReceive+0x122>
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ed8:	b25b      	sxtb	r3, r3
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d103      	bne.n	8003ee8 <xQueueReceive+0x138>
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ee8:	f001 fff6 	bl	8005ed8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003eec:	1d3a      	adds	r2, r7, #4
 8003eee:	f107 0310 	add.w	r3, r7, #16
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fe9d 	bl	8004c34 <xTaskCheckForTimeOut>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d123      	bne.n	8003f48 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f02:	f000 f9c4 	bl	800428e <prvIsQueueEmpty>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d017      	beq.n	8003f3c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	3324      	adds	r3, #36	; 0x24
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	4611      	mov	r1, r2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fdc5 	bl	8004aa4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f1c:	f000 f965 	bl	80041ea <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003f20:	f000 fc0e 	bl	8004740 <xTaskResumeAll>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d189      	bne.n	8003e3e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003f2a:	4b10      	ldr	r3, [pc, #64]	; (8003f6c <xQueueReceive+0x1bc>)
 8003f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	e780      	b.n	8003e3e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f3e:	f000 f954 	bl	80041ea <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003f42:	f000 fbfd 	bl	8004740 <xTaskResumeAll>
 8003f46:	e77a      	b.n	8003e3e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f4a:	f000 f94e 	bl	80041ea <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003f4e:	f000 fbf7 	bl	8004740 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f54:	f000 f99b 	bl	800428e <prvIsQueueEmpty>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f43f af6f 	beq.w	8003e3e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003f60:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3730      	adds	r7, #48	; 0x30
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	e000ed04 	.word	0xe000ed04

08003f70 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b090      	sub	sp, #64	; 0x40
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10a      	bne.n	8003f9c <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003f98:	bf00      	nop
 8003f9a:	e7fe      	b.n	8003f9a <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d103      	bne.n	8003faa <xQueueReceiveFromISR+0x3a>
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <xQueueReceiveFromISR+0x3e>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <xQueueReceiveFromISR+0x40>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fca:	f002 f837 	bl	800603c <vPortValidateInterruptPriority>
        __asm volatile
 8003fce:	f3ef 8211 	mrs	r2, BASEPRI
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	623a      	str	r2, [r7, #32]
 8003fe4:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8003fe6:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fe8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d03e      	beq.n	8004074 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004004:	f000 f8cb 	bl	800419e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	1e5a      	subs	r2, r3, #1
 800400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400e:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004010:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d112      	bne.n	8004040 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800401a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d025      	beq.n	800406e <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004024:	3310      	adds	r3, #16
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fd8c 	bl	8004b44 <xTaskRemoveFromEventList>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01d      	beq.n	800406e <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01a      	beq.n	800406e <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e016      	b.n	800406e <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8004040:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004044:	2b7f      	cmp	r3, #127	; 0x7f
 8004046:	d10a      	bne.n	800405e <xQueueReceiveFromISR+0xee>
        __asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	61bb      	str	r3, [r7, #24]
    }
 800405a:	bf00      	nop
 800405c:	e7fe      	b.n	800405c <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800405e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004062:	3301      	adds	r3, #1
 8004064:	b2db      	uxtb	r3, r3
 8004066:	b25a      	sxtb	r2, r3
 8004068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 800406e:	2301      	movs	r3, #1
 8004070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004072:	e001      	b.n	8004078 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8004074:	2300      	movs	r3, #0
 8004076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407a:	617b      	str	r3, [r7, #20]
        __asm volatile
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f383 8811 	msr	BASEPRI, r3
    }
 8004082:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004086:	4618      	mov	r0, r3
 8004088:	3740      	adds	r7, #64	; 0x40
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	60bb      	str	r3, [r7, #8]
    }
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80040b2:	f001 fee1 	bl	8005e78 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80040bc:	f001 ff0c 	bl	8005ed8 <vPortExitCritical>

    return uxReturn;
 80040c0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b086      	sub	sp, #24
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040de:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10d      	bne.n	8004104 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d14d      	bne.n	800418c <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fedf 	bl	8004eb8 <xTaskPriorityDisinherit>
 80040fa:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	609a      	str	r2, [r3, #8]
 8004102:	e043      	b.n	800418c <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d119      	bne.n	800413e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6858      	ldr	r0, [r3, #4]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	461a      	mov	r2, r3
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	f006 fd9d 	bl	800ac54 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	441a      	add	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	429a      	cmp	r2, r3
 8004132:	d32b      	bcc.n	800418c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	605a      	str	r2, [r3, #4]
 800413c:	e026      	b.n	800418c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	68d8      	ldr	r0, [r3, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	461a      	mov	r2, r3
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	f006 fd83 	bl	800ac54 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	425b      	negs	r3, r3
 8004158:	441a      	add	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d207      	bcs.n	800417a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	425b      	negs	r3, r3
 8004174:	441a      	add	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d105      	bne.n	800418c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	3b01      	subs	r3, #1
 800418a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004194:	697b      	ldr	r3, [r7, #20]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d018      	beq.n	80041e2 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	441a      	add	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d303      	bcc.n	80041d2 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68d9      	ldr	r1, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	461a      	mov	r2, r3
 80041dc:	6838      	ldr	r0, [r7, #0]
 80041de:	f006 fd39 	bl	800ac54 <memcpy>
    }
}
 80041e2:	bf00      	nop
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80041f2:	f001 fe41 	bl	8005e78 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041fc:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80041fe:	e011      	b.n	8004224 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	2b00      	cmp	r3, #0
 8004206:	d012      	beq.n	800422e <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3324      	adds	r3, #36	; 0x24
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fc99 	bl	8004b44 <xTaskRemoveFromEventList>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004218:	f000 fd72 	bl	8004d00 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	3b01      	subs	r3, #1
 8004220:	b2db      	uxtb	r3, r3
 8004222:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004228:	2b00      	cmp	r3, #0
 800422a:	dce9      	bgt.n	8004200 <prvUnlockQueue+0x16>
 800422c:	e000      	b.n	8004230 <prvUnlockQueue+0x46>
                        break;
 800422e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	22ff      	movs	r2, #255	; 0xff
 8004234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004238:	f001 fe4e 	bl	8005ed8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800423c:	f001 fe1c 	bl	8005e78 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004246:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004248:	e011      	b.n	800426e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d012      	beq.n	8004278 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3310      	adds	r3, #16
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fc74 	bl	8004b44 <xTaskRemoveFromEventList>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004262:	f000 fd4d 	bl	8004d00 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004266:	7bbb      	ldrb	r3, [r7, #14]
 8004268:	3b01      	subs	r3, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800426e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004272:	2b00      	cmp	r3, #0
 8004274:	dce9      	bgt.n	800424a <prvUnlockQueue+0x60>
 8004276:	e000      	b.n	800427a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004278:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	22ff      	movs	r2, #255	; 0xff
 800427e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004282:	f001 fe29 	bl	8005ed8 <vPortExitCritical>
}
 8004286:	bf00      	nop
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004296:	f001 fdef 	bl	8005e78 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d102      	bne.n	80042a8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80042a2:	2301      	movs	r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	e001      	b.n	80042ac <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80042ac:	f001 fe14 	bl	8005ed8 <vPortExitCritical>

    return xReturn;
 80042b0:	68fb      	ldr	r3, [r7, #12]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80042c2:	f001 fdd9 	bl	8005e78 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d102      	bne.n	80042d8 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80042d2:	2301      	movs	r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	e001      	b.n	80042dc <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80042dc:	f001 fdfc 	bl	8005ed8 <vPortExitCritical>

    return xReturn;
 80042e0:	68fb      	ldr	r3, [r7, #12]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80042ea:	b480      	push	{r7}
 80042ec:	b087      	sub	sp, #28
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10a      	bne.n	8004312 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 80042fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004300:	f383 8811 	msr	BASEPRI, r3
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	60fb      	str	r3, [r7, #12]
    }
 800430e:	bf00      	nop
 8004310:	e7fe      	b.n	8004310 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431a:	429a      	cmp	r2, r3
 800431c:	d102      	bne.n	8004324 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 800431e:	2301      	movs	r3, #1
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	e001      	b.n	8004328 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004328:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800432a:	4618      	mov	r0, r3
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	e014      	b.n	8004372 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004348:	4a0f      	ldr	r2, [pc, #60]	; (8004388 <vQueueAddToRegistry+0x50>)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10b      	bne.n	800436c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004354:	490c      	ldr	r1, [pc, #48]	; (8004388 <vQueueAddToRegistry+0x50>)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800435e:	4a0a      	ldr	r2, [pc, #40]	; (8004388 <vQueueAddToRegistry+0x50>)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4413      	add	r3, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800436a:	e006      	b.n	800437a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3301      	adds	r3, #1
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b07      	cmp	r3, #7
 8004376:	d9e7      	bls.n	8004348 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	20000ae8 	.word	0x20000ae8

0800438c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800439c:	f001 fd6c 	bl	8005e78 <vPortEnterCritical>
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043a6:	b25b      	sxtb	r3, r3
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d103      	bne.n	80043b6 <vQueueWaitForMessageRestricted+0x2a>
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043bc:	b25b      	sxtb	r3, r3
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d103      	bne.n	80043cc <vQueueWaitForMessageRestricted+0x40>
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043cc:	f001 fd84 	bl	8005ed8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d106      	bne.n	80043e6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	3324      	adds	r3, #36	; 0x24
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	68b9      	ldr	r1, [r7, #8]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fb83 	bl	8004aec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80043e6:	6978      	ldr	r0, [r7, #20]
 80043e8:	f7ff feff 	bl	80041ea <prvUnlockQueue>
    }
 80043ec:	bf00      	nop
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08c      	sub	sp, #48	; 0x30
 80043f8:	af04      	add	r7, sp, #16
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4618      	mov	r0, r3
 800440a:	f001 fe57 	bl	80060bc <pvPortMalloc>
 800440e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00e      	beq.n	8004434 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004416:	2058      	movs	r0, #88	; 0x58
 8004418:	f001 fe50 	bl	80060bc <pvPortMalloc>
 800441c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	631a      	str	r2, [r3, #48]	; 0x30
 800442a:	e005      	b.n	8004438 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800442c:	6978      	ldr	r0, [r7, #20]
 800442e:	f001 ff25 	bl	800627c <vPortFree>
 8004432:	e001      	b.n	8004438 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004434:	2300      	movs	r3, #0
 8004436:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d013      	beq.n	8004466 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800443e:	88fa      	ldrh	r2, [r7, #6]
 8004440:	2300      	movs	r3, #0
 8004442:	9303      	str	r3, [sp, #12]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	9302      	str	r3, [sp, #8]
 8004448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f80e 	bl	8004476 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800445a:	69f8      	ldr	r0, [r7, #28]
 800445c:	f000 f8a2 	bl	80045a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004460:	2301      	movs	r3, #1
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	e002      	b.n	800446c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800446c:	69bb      	ldr	r3, [r7, #24]
    }
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b088      	sub	sp, #32
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	461a      	mov	r2, r3
 800448e:	21a5      	movs	r1, #165	; 0xa5
 8004490:	f006 fbee 	bl	800ac70 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800449e:	3b01      	subs	r3, #1
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	f023 0307 	bic.w	r3, r3, #7
 80044ac:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <prvInitialiseNewTask+0x58>
        __asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	617b      	str	r3, [r7, #20]
    }
 80044ca:	bf00      	nop
 80044cc:	e7fe      	b.n	80044cc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01f      	beq.n	8004514 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044d4:	2300      	movs	r3, #0
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	e012      	b.n	8004500 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	4413      	add	r3, r2
 80044e0:	7819      	ldrb	r1, [r3, #0]
 80044e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	4413      	add	r3, r2
 80044e8:	3334      	adds	r3, #52	; 0x34
 80044ea:	460a      	mov	r2, r1
 80044ec:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	4413      	add	r3, r2
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d006      	beq.n	8004508 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	3301      	adds	r3, #1
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	2b09      	cmp	r3, #9
 8004504:	d9e9      	bls.n	80044da <prvInitialiseNewTask+0x64>
 8004506:	e000      	b.n	800450a <prvInitialiseNewTask+0x94>
            {
                break;
 8004508:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004512:	e003      	b.n	800451c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	2b04      	cmp	r3, #4
 8004520:	d901      	bls.n	8004526 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004522:	2304      	movs	r3, #4
 8004524:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800452a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004530:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	2200      	movs	r2, #0
 8004536:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	3304      	adds	r3, #4
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff f910 	bl	8003762 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	3318      	adds	r3, #24
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff f90b 	bl	8003762 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004550:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	f1c3 0205 	rsb	r2, r3, #5
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004560:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	3350      	adds	r3, #80	; 0x50
 8004566:	2204      	movs	r2, #4
 8004568:	2100      	movs	r1, #0
 800456a:	4618      	mov	r0, r3
 800456c:	f006 fb80 	bl	800ac70 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	3354      	adds	r3, #84	; 0x54
 8004574:	2201      	movs	r2, #1
 8004576:	2100      	movs	r1, #0
 8004578:	4618      	mov	r0, r3
 800457a:	f006 fb79 	bl	800ac70 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	68f9      	ldr	r1, [r7, #12]
 8004582:	69b8      	ldr	r0, [r7, #24]
 8004584:	f001 fb48 	bl	8005c18 <pxPortInitialiseStack>
 8004588:	4602      	mov	r2, r0
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004598:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800459a:	bf00      	nop
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80045ac:	f001 fc64 	bl	8005e78 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80045b0:	4b2c      	ldr	r3, [pc, #176]	; (8004664 <prvAddNewTaskToReadyList+0xc0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3301      	adds	r3, #1
 80045b6:	4a2b      	ldr	r2, [pc, #172]	; (8004664 <prvAddNewTaskToReadyList+0xc0>)
 80045b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80045ba:	4b2b      	ldr	r3, [pc, #172]	; (8004668 <prvAddNewTaskToReadyList+0xc4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d109      	bne.n	80045d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80045c2:	4a29      	ldr	r2, [pc, #164]	; (8004668 <prvAddNewTaskToReadyList+0xc4>)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045c8:	4b26      	ldr	r3, [pc, #152]	; (8004664 <prvAddNewTaskToReadyList+0xc0>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d110      	bne.n	80045f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80045d0:	f000 fbba 	bl	8004d48 <prvInitialiseTaskLists>
 80045d4:	e00d      	b.n	80045f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80045d6:	4b25      	ldr	r3, [pc, #148]	; (800466c <prvAddNewTaskToReadyList+0xc8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045de:	4b22      	ldr	r3, [pc, #136]	; (8004668 <prvAddNewTaskToReadyList+0xc4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d802      	bhi.n	80045f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80045ec:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <prvAddNewTaskToReadyList+0xc4>)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80045f2:	4b1f      	ldr	r3, [pc, #124]	; (8004670 <prvAddNewTaskToReadyList+0xcc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3301      	adds	r3, #1
 80045f8:	4a1d      	ldr	r2, [pc, #116]	; (8004670 <prvAddNewTaskToReadyList+0xcc>)
 80045fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045fc:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <prvAddNewTaskToReadyList+0xcc>)
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	2201      	movs	r2, #1
 800460a:	409a      	lsls	r2, r3
 800460c:	4b19      	ldr	r3, [pc, #100]	; (8004674 <prvAddNewTaskToReadyList+0xd0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4313      	orrs	r3, r2
 8004612:	4a18      	ldr	r2, [pc, #96]	; (8004674 <prvAddNewTaskToReadyList+0xd0>)
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4a15      	ldr	r2, [pc, #84]	; (8004678 <prvAddNewTaskToReadyList+0xd4>)
 8004624:	441a      	add	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3304      	adds	r3, #4
 800462a:	4619      	mov	r1, r3
 800462c:	4610      	mov	r0, r2
 800462e:	f7ff f8a5 	bl	800377c <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004632:	f001 fc51 	bl	8005ed8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004636:	4b0d      	ldr	r3, [pc, #52]	; (800466c <prvAddNewTaskToReadyList+0xc8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00e      	beq.n	800465c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800463e:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <prvAddNewTaskToReadyList+0xc4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	429a      	cmp	r2, r3
 800464a:	d207      	bcs.n	800465c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <prvAddNewTaskToReadyList+0xd8>)
 800464e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20000c00 	.word	0x20000c00
 8004668:	20000b28 	.word	0x20000b28
 800466c:	20000c0c 	.word	0x20000c0c
 8004670:	20000c1c 	.word	0x20000c1c
 8004674:	20000c08 	.word	0x20000c08
 8004678:	20000b2c 	.word	0x20000b2c
 800467c:	e000ed04 	.word	0xe000ed04

08004680 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004686:	4b20      	ldr	r3, [pc, #128]	; (8004708 <vTaskStartScheduler+0x88>)
 8004688:	9301      	str	r3, [sp, #4]
 800468a:	2300      	movs	r3, #0
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	2300      	movs	r3, #0
 8004690:	2282      	movs	r2, #130	; 0x82
 8004692:	491e      	ldr	r1, [pc, #120]	; (800470c <vTaskStartScheduler+0x8c>)
 8004694:	481e      	ldr	r0, [pc, #120]	; (8004710 <vTaskStartScheduler+0x90>)
 8004696:	f7ff fead 	bl	80043f4 <xTaskCreate>
 800469a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d102      	bne.n	80046a8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80046a2:	f000 ff4b 	bl	800553c <xTimerCreateTimerTask>
 80046a6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d116      	bne.n	80046dc <vTaskStartScheduler+0x5c>
        __asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	60bb      	str	r3, [r7, #8]
    }
 80046c0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80046c2:	4b14      	ldr	r3, [pc, #80]	; (8004714 <vTaskStartScheduler+0x94>)
 80046c4:	f04f 32ff 	mov.w	r2, #4294967295
 80046c8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80046ca:	4b13      	ldr	r3, [pc, #76]	; (8004718 <vTaskStartScheduler+0x98>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046d0:	4b12      	ldr	r3, [pc, #72]	; (800471c <vTaskStartScheduler+0x9c>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80046d6:	f001 fb2d 	bl	8005d34 <xPortStartScheduler>
 80046da:	e00e      	b.n	80046fa <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e2:	d10a      	bne.n	80046fa <vTaskStartScheduler+0x7a>
        __asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	607b      	str	r3, [r7, #4]
    }
 80046f6:	bf00      	nop
 80046f8:	e7fe      	b.n	80046f8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <vTaskStartScheduler+0xa0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
}
 80046fe:	bf00      	nop
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000c24 	.word	0x20000c24
 800470c:	0800fd14 	.word	0x0800fd14
 8004710:	08004d19 	.word	0x08004d19
 8004714:	20000c20 	.word	0x20000c20
 8004718:	20000c0c 	.word	0x20000c0c
 800471c:	20000c04 	.word	0x20000c04
 8004720:	2000001c 	.word	0x2000001c

08004724 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004728:	4b04      	ldr	r3, [pc, #16]	; (800473c <vTaskSuspendAll+0x18>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3301      	adds	r3, #1
 800472e:	4a03      	ldr	r2, [pc, #12]	; (800473c <vTaskSuspendAll+0x18>)
 8004730:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004732:	bf00      	nop
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	20000c28 	.word	0x20000c28

08004740 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800474e:	4b41      	ldr	r3, [pc, #260]	; (8004854 <xTaskResumeAll+0x114>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <xTaskResumeAll+0x2c>
        __asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	603b      	str	r3, [r7, #0]
    }
 8004768:	bf00      	nop
 800476a:	e7fe      	b.n	800476a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800476c:	f001 fb84 	bl	8005e78 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004770:	4b38      	ldr	r3, [pc, #224]	; (8004854 <xTaskResumeAll+0x114>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3b01      	subs	r3, #1
 8004776:	4a37      	ldr	r2, [pc, #220]	; (8004854 <xTaskResumeAll+0x114>)
 8004778:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800477a:	4b36      	ldr	r3, [pc, #216]	; (8004854 <xTaskResumeAll+0x114>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d161      	bne.n	8004846 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004782:	4b35      	ldr	r3, [pc, #212]	; (8004858 <xTaskResumeAll+0x118>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d05d      	beq.n	8004846 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800478a:	e02e      	b.n	80047ea <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800478c:	4b33      	ldr	r3, [pc, #204]	; (800485c <xTaskResumeAll+0x11c>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3318      	adds	r3, #24
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff f84c 	bl	8003836 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff f847 	bl	8003836 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	2201      	movs	r2, #1
 80047ae:	409a      	lsls	r2, r3
 80047b0:	4b2b      	ldr	r3, [pc, #172]	; (8004860 <xTaskResumeAll+0x120>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	4a2a      	ldr	r2, [pc, #168]	; (8004860 <xTaskResumeAll+0x120>)
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4a27      	ldr	r2, [pc, #156]	; (8004864 <xTaskResumeAll+0x124>)
 80047c8:	441a      	add	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3304      	adds	r3, #4
 80047ce:	4619      	mov	r1, r3
 80047d0:	4610      	mov	r0, r2
 80047d2:	f7fe ffd3 	bl	800377c <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047da:	4b23      	ldr	r3, [pc, #140]	; (8004868 <xTaskResumeAll+0x128>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d302      	bcc.n	80047ea <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80047e4:	4b21      	ldr	r3, [pc, #132]	; (800486c <xTaskResumeAll+0x12c>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047ea:	4b1c      	ldr	r3, [pc, #112]	; (800485c <xTaskResumeAll+0x11c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1cc      	bne.n	800478c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80047f8:	f000 fb24 	bl	8004e44 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047fc:	4b1c      	ldr	r3, [pc, #112]	; (8004870 <xTaskResumeAll+0x130>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d010      	beq.n	800482a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004808:	f000 f846 	bl	8004898 <xTaskIncrementTick>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8004812:	4b16      	ldr	r3, [pc, #88]	; (800486c <xTaskResumeAll+0x12c>)
 8004814:	2201      	movs	r2, #1
 8004816:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3b01      	subs	r3, #1
 800481c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f1      	bne.n	8004808 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004824:	4b12      	ldr	r3, [pc, #72]	; (8004870 <xTaskResumeAll+0x130>)
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800482a:	4b10      	ldr	r3, [pc, #64]	; (800486c <xTaskResumeAll+0x12c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004832:	2301      	movs	r3, #1
 8004834:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004836:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <xTaskResumeAll+0x134>)
 8004838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004846:	f001 fb47 	bl	8005ed8 <vPortExitCritical>

    return xAlreadyYielded;
 800484a:	68bb      	ldr	r3, [r7, #8]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20000c28 	.word	0x20000c28
 8004858:	20000c00 	.word	0x20000c00
 800485c:	20000bc0 	.word	0x20000bc0
 8004860:	20000c08 	.word	0x20000c08
 8004864:	20000b2c 	.word	0x20000b2c
 8004868:	20000b28 	.word	0x20000b28
 800486c:	20000c14 	.word	0x20000c14
 8004870:	20000c10 	.word	0x20000c10
 8004874:	e000ed04 	.word	0xe000ed04

08004878 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800487e:	4b05      	ldr	r3, [pc, #20]	; (8004894 <xTaskGetTickCount+0x1c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004884:	687b      	ldr	r3, [r7, #4]
}
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000c04 	.word	0x20000c04

08004898 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048a2:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <xTaskIncrementTick+0x128>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d17f      	bne.n	80049aa <xTaskIncrementTick+0x112>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048aa:	4b46      	ldr	r3, [pc, #280]	; (80049c4 <xTaskIncrementTick+0x12c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3301      	adds	r3, #1
 80048b0:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80048b2:	4a44      	ldr	r2, [pc, #272]	; (80049c4 <xTaskIncrementTick+0x12c>)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d120      	bne.n	8004900 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80048be:	4b42      	ldr	r3, [pc, #264]	; (80049c8 <xTaskIncrementTick+0x130>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <xTaskIncrementTick+0x46>
        __asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	603b      	str	r3, [r7, #0]
    }
 80048da:	bf00      	nop
 80048dc:	e7fe      	b.n	80048dc <xTaskIncrementTick+0x44>
 80048de:	4b3a      	ldr	r3, [pc, #232]	; (80049c8 <xTaskIncrementTick+0x130>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	4b39      	ldr	r3, [pc, #228]	; (80049cc <xTaskIncrementTick+0x134>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a37      	ldr	r2, [pc, #220]	; (80049c8 <xTaskIncrementTick+0x130>)
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	4a37      	ldr	r2, [pc, #220]	; (80049cc <xTaskIncrementTick+0x134>)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	4b37      	ldr	r3, [pc, #220]	; (80049d0 <xTaskIncrementTick+0x138>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3301      	adds	r3, #1
 80048f8:	4a35      	ldr	r2, [pc, #212]	; (80049d0 <xTaskIncrementTick+0x138>)
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	f000 faa2 	bl	8004e44 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004900:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <xTaskIncrementTick+0x13c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	429a      	cmp	r2, r3
 8004908:	d348      	bcc.n	800499c <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800490a:	4b2f      	ldr	r3, [pc, #188]	; (80049c8 <xTaskIncrementTick+0x130>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d104      	bne.n	800491e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004914:	4b2f      	ldr	r3, [pc, #188]	; (80049d4 <xTaskIncrementTick+0x13c>)
 8004916:	f04f 32ff 	mov.w	r2, #4294967295
 800491a:	601a      	str	r2, [r3, #0]
                    break;
 800491c:	e03e      	b.n	800499c <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800491e:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <xTaskIncrementTick+0x130>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	429a      	cmp	r2, r3
 8004934:	d203      	bcs.n	800493e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004936:	4a27      	ldr	r2, [pc, #156]	; (80049d4 <xTaskIncrementTick+0x13c>)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800493c:	e02e      	b.n	800499c <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	3304      	adds	r3, #4
 8004942:	4618      	mov	r0, r3
 8004944:	f7fe ff77 	bl	8003836 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494c:	2b00      	cmp	r3, #0
 800494e:	d004      	beq.n	800495a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	3318      	adds	r3, #24
 8004954:	4618      	mov	r0, r3
 8004956:	f7fe ff6e 	bl	8003836 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	2201      	movs	r2, #1
 8004960:	409a      	lsls	r2, r3
 8004962:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <xTaskIncrementTick+0x140>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4313      	orrs	r3, r2
 8004968:	4a1b      	ldr	r2, [pc, #108]	; (80049d8 <xTaskIncrementTick+0x140>)
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4a18      	ldr	r2, [pc, #96]	; (80049dc <xTaskIncrementTick+0x144>)
 800497a:	441a      	add	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	3304      	adds	r3, #4
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f7fe fefa 	bl	800377c <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498c:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <xTaskIncrementTick+0x148>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	429a      	cmp	r2, r3
 8004994:	d3b9      	bcc.n	800490a <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8004996:	2301      	movs	r3, #1
 8004998:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800499a:	e7b6      	b.n	800490a <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800499c:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <xTaskIncrementTick+0x14c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <xTaskIncrementTick+0x11c>
                {
                    xSwitchRequired = pdTRUE;
 80049a4:	2301      	movs	r3, #1
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	e004      	b.n	80049b4 <xTaskIncrementTick+0x11c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80049aa:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <xTaskIncrementTick+0x150>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3301      	adds	r3, #1
 80049b0:	4a0d      	ldr	r2, [pc, #52]	; (80049e8 <xTaskIncrementTick+0x150>)
 80049b2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80049b4:	697b      	ldr	r3, [r7, #20]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000c28 	.word	0x20000c28
 80049c4:	20000c04 	.word	0x20000c04
 80049c8:	20000bb8 	.word	0x20000bb8
 80049cc:	20000bbc 	.word	0x20000bbc
 80049d0:	20000c18 	.word	0x20000c18
 80049d4:	20000c20 	.word	0x20000c20
 80049d8:	20000c08 	.word	0x20000c08
 80049dc:	20000b2c 	.word	0x20000b2c
 80049e0:	20000b28 	.word	0x20000b28
 80049e4:	20000c14 	.word	0x20000c14
 80049e8:	20000c10 	.word	0x20000c10

080049ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049f2:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <vTaskSwitchContext+0xa4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80049fa:	4b26      	ldr	r3, [pc, #152]	; (8004a94 <vTaskSwitchContext+0xa8>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004a00:	e03f      	b.n	8004a82 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004a02:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <vTaskSwitchContext+0xa8>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a08:	4b23      	ldr	r3, [pc, #140]	; (8004a98 <vTaskSwitchContext+0xac>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	fab3 f383 	clz	r3, r3
 8004a14:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004a16:	7afb      	ldrb	r3, [r7, #11]
 8004a18:	f1c3 031f 	rsb	r3, r3, #31
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	491f      	ldr	r1, [pc, #124]	; (8004a9c <vTaskSwitchContext+0xb0>)
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10a      	bne.n	8004a48 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	607b      	str	r3, [r7, #4]
    }
 8004a44:	bf00      	nop
 8004a46:	e7fe      	b.n	8004a46 <vTaskSwitchContext+0x5a>
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4a12      	ldr	r2, [pc, #72]	; (8004a9c <vTaskSwitchContext+0xb0>)
 8004a54:	4413      	add	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	3308      	adds	r3, #8
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d104      	bne.n	8004a78 <vTaskSwitchContext+0x8c>
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	605a      	str	r2, [r3, #4]
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	4a08      	ldr	r2, [pc, #32]	; (8004aa0 <vTaskSwitchContext+0xb4>)
 8004a80:	6013      	str	r3, [r2, #0]
}
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	20000c28 	.word	0x20000c28
 8004a94:	20000c14 	.word	0x20000c14
 8004a98:	20000c08 	.word	0x20000c08
 8004a9c:	20000b2c 	.word	0x20000b2c
 8004aa0:	20000b28 	.word	0x20000b28

08004aa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	60fb      	str	r3, [r7, #12]
    }
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004aca:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <vTaskPlaceOnEventList+0x44>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3318      	adds	r3, #24
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fe fe76 	bl	80037c4 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ad8:	2101      	movs	r1, #1
 8004ada:	6838      	ldr	r0, [r7, #0]
 8004adc:	f000 fcc8 	bl	8005470 <prvAddCurrentTaskToDelayedList>
}
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000b28 	.word	0x20000b28

08004aec <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10a      	bne.n	8004b14 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	617b      	str	r3, [r7, #20]
    }
 8004b10:	bf00      	nop
 8004b12:	e7fe      	b.n	8004b12 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b14:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3318      	adds	r3, #24
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7fe fe2d 	bl	800377c <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004b28:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	68b8      	ldr	r0, [r7, #8]
 8004b32:	f000 fc9d 	bl	8005470 <prvAddCurrentTaskToDelayedList>
    }
 8004b36:	bf00      	nop
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000b28 	.word	0x20000b28

08004b44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10a      	bne.n	8004b70 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	60fb      	str	r3, [r7, #12]
    }
 8004b6c:	bf00      	nop
 8004b6e:	e7fe      	b.n	8004b6e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	3318      	adds	r3, #24
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fe fe5e 	bl	8003836 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b7a:	4b1d      	ldr	r3, [pc, #116]	; (8004bf0 <xTaskRemoveFromEventList+0xac>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d11c      	bne.n	8004bbc <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	3304      	adds	r3, #4
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fe fe55 	bl	8003836 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	2201      	movs	r2, #1
 8004b92:	409a      	lsls	r2, r3
 8004b94:	4b17      	ldr	r3, [pc, #92]	; (8004bf4 <xTaskRemoveFromEventList+0xb0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <xTaskRemoveFromEventList+0xb0>)
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4a13      	ldr	r2, [pc, #76]	; (8004bf8 <xTaskRemoveFromEventList+0xb4>)
 8004bac:	441a      	add	r2, r3
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	f7fe fde1 	bl	800377c <vListInsertEnd>
 8004bba:	e005      	b.n	8004bc8 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	3318      	adds	r3, #24
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	480e      	ldr	r0, [pc, #56]	; (8004bfc <xTaskRemoveFromEventList+0xb8>)
 8004bc4:	f7fe fdda 	bl	800377c <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <xTaskRemoveFromEventList+0xbc>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d905      	bls.n	8004be2 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004bda:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <xTaskRemoveFromEventList+0xc0>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	e001      	b.n	8004be6 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8004be2:	2300      	movs	r3, #0
 8004be4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004be6:	697b      	ldr	r3, [r7, #20]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	20000c28 	.word	0x20000c28
 8004bf4:	20000c08 	.word	0x20000c08
 8004bf8:	20000b2c 	.word	0x20000b2c
 8004bfc:	20000bc0 	.word	0x20000bc0
 8004c00:	20000b28 	.word	0x20000b28
 8004c04:	20000c14 	.word	0x20000c14

08004c08 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c10:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <vTaskInternalSetTimeOutState+0x24>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <vTaskInternalSetTimeOutState+0x28>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	605a      	str	r2, [r3, #4]
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	20000c18 	.word	0x20000c18
 8004c30:	20000c04 	.word	0x20000c04

08004c34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10a      	bne.n	8004c5a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	613b      	str	r3, [r7, #16]
    }
 8004c56:	bf00      	nop
 8004c58:	e7fe      	b.n	8004c58 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60fb      	str	r3, [r7, #12]
    }
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004c76:	f001 f8ff 	bl	8005e78 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004c7a:	4b1f      	ldr	r3, [pc, #124]	; (8004cf8 <xTaskCheckForTimeOut+0xc4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d102      	bne.n	8004c9a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	e026      	b.n	8004ce8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4b17      	ldr	r3, [pc, #92]	; (8004cfc <xTaskCheckForTimeOut+0xc8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d00a      	beq.n	8004cbc <xTaskCheckForTimeOut+0x88>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d305      	bcc.n	8004cbc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	e015      	b.n	8004ce8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d20b      	bcs.n	8004cde <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	1ad2      	subs	r2, r2, r3
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff ff98 	bl	8004c08 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	e004      	b.n	8004ce8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004ce8:	f001 f8f6 	bl	8005ed8 <vPortExitCritical>

    return xReturn;
 8004cec:	69fb      	ldr	r3, [r7, #28]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000c04 	.word	0x20000c04
 8004cfc:	20000c18 	.word	0x20000c18

08004d00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004d04:	4b03      	ldr	r3, [pc, #12]	; (8004d14 <vTaskMissedYield+0x14>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	601a      	str	r2, [r3, #0]
}
 8004d0a:	bf00      	nop
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	20000c14 	.word	0x20000c14

08004d18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004d20:	f000 f852 	bl	8004dc8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <prvIdleTask+0x28>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d9f9      	bls.n	8004d20 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <prvIdleTask+0x2c>)
 8004d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004d3c:	e7f0      	b.n	8004d20 <prvIdleTask+0x8>
 8004d3e:	bf00      	nop
 8004d40:	20000b2c 	.word	0x20000b2c
 8004d44:	e000ed04 	.word	0xe000ed04

08004d48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d4e:	2300      	movs	r3, #0
 8004d50:	607b      	str	r3, [r7, #4]
 8004d52:	e00c      	b.n	8004d6e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4a12      	ldr	r2, [pc, #72]	; (8004da8 <prvInitialiseTaskLists+0x60>)
 8004d60:	4413      	add	r3, r2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe fcdd 	bl	8003722 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d9ef      	bls.n	8004d54 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004d74:	480d      	ldr	r0, [pc, #52]	; (8004dac <prvInitialiseTaskLists+0x64>)
 8004d76:	f7fe fcd4 	bl	8003722 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004d7a:	480d      	ldr	r0, [pc, #52]	; (8004db0 <prvInitialiseTaskLists+0x68>)
 8004d7c:	f7fe fcd1 	bl	8003722 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004d80:	480c      	ldr	r0, [pc, #48]	; (8004db4 <prvInitialiseTaskLists+0x6c>)
 8004d82:	f7fe fcce 	bl	8003722 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004d86:	480c      	ldr	r0, [pc, #48]	; (8004db8 <prvInitialiseTaskLists+0x70>)
 8004d88:	f7fe fccb 	bl	8003722 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004d8c:	480b      	ldr	r0, [pc, #44]	; (8004dbc <prvInitialiseTaskLists+0x74>)
 8004d8e:	f7fe fcc8 	bl	8003722 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004d92:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <prvInitialiseTaskLists+0x78>)
 8004d94:	4a05      	ldr	r2, [pc, #20]	; (8004dac <prvInitialiseTaskLists+0x64>)
 8004d96:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d98:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <prvInitialiseTaskLists+0x7c>)
 8004d9a:	4a05      	ldr	r2, [pc, #20]	; (8004db0 <prvInitialiseTaskLists+0x68>)
 8004d9c:	601a      	str	r2, [r3, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000b2c 	.word	0x20000b2c
 8004dac:	20000b90 	.word	0x20000b90
 8004db0:	20000ba4 	.word	0x20000ba4
 8004db4:	20000bc0 	.word	0x20000bc0
 8004db8:	20000bd4 	.word	0x20000bd4
 8004dbc:	20000bec 	.word	0x20000bec
 8004dc0:	20000bb8 	.word	0x20000bb8
 8004dc4:	20000bbc 	.word	0x20000bbc

08004dc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dce:	e019      	b.n	8004e04 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004dd0:	f001 f852 	bl	8005e78 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dd4:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <prvCheckTasksWaitingTermination+0x50>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fe fd28 	bl	8003836 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004de6:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <prvCheckTasksWaitingTermination+0x54>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	4a0b      	ldr	r2, [pc, #44]	; (8004e1c <prvCheckTasksWaitingTermination+0x54>)
 8004dee:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004df0:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <prvCheckTasksWaitingTermination+0x58>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <prvCheckTasksWaitingTermination+0x58>)
 8004df8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004dfa:	f001 f86d 	bl	8005ed8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f810 	bl	8004e24 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <prvCheckTasksWaitingTermination+0x58>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e1      	bne.n	8004dd0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000bd4 	.word	0x20000bd4
 8004e1c:	20000c00 	.word	0x20000c00
 8004e20:	20000be8 	.word	0x20000be8

08004e24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	4618      	mov	r0, r3
 8004e32:	f001 fa23 	bl	800627c <vPortFree>
                vPortFree( pxTCB );
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f001 fa20 	bl	800627c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <prvResetNextTaskUnblockTime+0x30>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d104      	bne.n	8004e5c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004e52:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <prvResetNextTaskUnblockTime+0x34>)
 8004e54:	f04f 32ff 	mov.w	r2, #4294967295
 8004e58:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004e5a:	e005      	b.n	8004e68 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <prvResetNextTaskUnblockTime+0x30>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a04      	ldr	r2, [pc, #16]	; (8004e78 <prvResetNextTaskUnblockTime+0x34>)
 8004e66:	6013      	str	r3, [r2, #0]
}
 8004e68:	bf00      	nop
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000bb8 	.word	0x20000bb8
 8004e78:	20000c20 	.word	0x20000c20

08004e7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004e82:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <xTaskGetSchedulerState+0x34>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d102      	bne.n	8004e90 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	607b      	str	r3, [r7, #4]
 8004e8e:	e008      	b.n	8004ea2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e90:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <xTaskGetSchedulerState+0x38>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d102      	bne.n	8004e9e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	607b      	str	r3, [r7, #4]
 8004e9c:	e001      	b.n	8004ea2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004ea2:	687b      	ldr	r3, [r7, #4]
    }
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	20000c0c 	.word	0x20000c0c
 8004eb4:	20000c28 	.word	0x20000c28

08004eb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d063      	beq.n	8004f96 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004ece:	4b34      	ldr	r3, [pc, #208]	; (8004fa0 <xTaskPriorityDisinherit+0xe8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d00a      	beq.n	8004eee <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	60fb      	str	r3, [r7, #12]
    }
 8004eea:	bf00      	nop
 8004eec:	e7fe      	b.n	8004eec <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	60bb      	str	r3, [r7, #8]
    }
 8004f08:	bf00      	nop
 8004f0a:	e7fe      	b.n	8004f0a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f10:	1e5a      	subs	r2, r3, #1
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d039      	beq.n	8004f96 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d135      	bne.n	8004f96 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe fc81 	bl	8003836 <uxListRemove>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10a      	bne.n	8004f50 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	2201      	movs	r2, #1
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	43da      	mvns	r2, r3
 8004f46:	4b17      	ldr	r3, [pc, #92]	; (8004fa4 <xTaskPriorityDisinherit+0xec>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	4a15      	ldr	r2, [pc, #84]	; (8004fa4 <xTaskPriorityDisinherit+0xec>)
 8004f4e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	f1c3 0205 	rsb	r2, r3, #5
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	2201      	movs	r2, #1
 8004f6a:	409a      	lsls	r2, r3
 8004f6c:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <xTaskPriorityDisinherit+0xec>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	4a0c      	ldr	r2, [pc, #48]	; (8004fa4 <xTaskPriorityDisinherit+0xec>)
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4a09      	ldr	r2, [pc, #36]	; (8004fa8 <xTaskPriorityDisinherit+0xf0>)
 8004f84:	441a      	add	r2, r3
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	f7fe fbf5 	bl	800377c <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004f92:	2301      	movs	r3, #1
 8004f94:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004f96:	697b      	ldr	r3, [r7, #20]
    }
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20000b28 	.word	0x20000b28
 8004fa4:	20000c08 	.word	0x20000c08
 8004fa8:	20000b2c 	.word	0x20000b2c

08004fac <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	613b      	str	r3, [r7, #16]
    }
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8004fd6:	f000 ff4f 	bl	8005e78 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004fda:	4b32      	ldr	r3, [pc, #200]	; (80050a4 <xTaskGenericNotifyWait+0xf8>)
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3354      	adds	r3, #84	; 0x54
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d022      	beq.n	8005032 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8004fec:	4b2d      	ldr	r3, [pc, #180]	; (80050a4 <xTaskGenericNotifyWait+0xf8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	3214      	adds	r2, #20
 8004ff4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	43d2      	mvns	r2, r2
 8004ffc:	4011      	ands	r1, r2
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	3214      	adds	r2, #20
 8005002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8005006:	4b27      	ldr	r3, [pc, #156]	; (80050a4 <xTaskGenericNotifyWait+0xf8>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4413      	add	r3, r2
 800500e:	3354      	adds	r3, #84	; 0x54
 8005010:	2201      	movs	r2, #1
 8005012:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00b      	beq.n	8005032 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800501a:	2101      	movs	r1, #1
 800501c:	6a38      	ldr	r0, [r7, #32]
 800501e:	f000 fa27 	bl	8005470 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8005022:	4b21      	ldr	r3, [pc, #132]	; (80050a8 <xTaskGenericNotifyWait+0xfc>)
 8005024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005032:	f000 ff51 	bl	8005ed8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8005036:	f000 ff1f 	bl	8005e78 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d007      	beq.n	8005050 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8005040:	4b18      	ldr	r3, [pc, #96]	; (80050a4 <xTaskGenericNotifyWait+0xf8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	3214      	adds	r2, #20
 8005048:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005050:	4b14      	ldr	r3, [pc, #80]	; (80050a4 <xTaskGenericNotifyWait+0xf8>)
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	3354      	adds	r3, #84	; 0x54
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d002      	beq.n	8005068 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	e00e      	b.n	8005086 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8005068:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <xTaskGenericNotifyWait+0xf8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	3214      	adds	r2, #20
 8005070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	43d2      	mvns	r2, r2
 8005078:	4011      	ands	r1, r2
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	3214      	adds	r2, #20
 800507e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005082:	2301      	movs	r3, #1
 8005084:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005086:	4b07      	ldr	r3, [pc, #28]	; (80050a4 <xTaskGenericNotifyWait+0xf8>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4413      	add	r3, r2
 800508e:	3354      	adds	r3, #84	; 0x54
 8005090:	2200      	movs	r2, #0
 8005092:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005094:	f000 ff20 	bl	8005ed8 <vPortExitCritical>

        return xReturn;
 8005098:	697b      	ldr	r3, [r7, #20]
    }
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20000b28 	.word	0x20000b28
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08c      	sub	sp, #48	; 0x30
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80050ba:	2301      	movs	r3, #1
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <xTaskGenericNotify+0x2e>
        __asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	623b      	str	r3, [r7, #32]
    }
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <xTaskGenericNotify+0x4a>
        __asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	61fb      	str	r3, [r7, #28]
    }
 80050f2:	bf00      	nop
 80050f4:	e7fe      	b.n	80050f4 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80050fa:	f000 febd 	bl	8005e78 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	2b00      	cmp	r3, #0
 8005102:	d006      	beq.n	8005112 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	3214      	adds	r2, #20
 800510a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4413      	add	r3, r2
 8005118:	3354      	adds	r3, #84	; 0x54
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	4413      	add	r3, r2
 8005126:	3354      	adds	r3, #84	; 0x54
 8005128:	2202      	movs	r2, #2
 800512a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	2b04      	cmp	r3, #4
 8005130:	d83b      	bhi.n	80051aa <xTaskGenericNotify+0xfe>
 8005132:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <xTaskGenericNotify+0x8c>)
 8005134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005138:	080051c9 	.word	0x080051c9
 800513c:	0800514d 	.word	0x0800514d
 8005140:	08005169 	.word	0x08005169
 8005144:	08005181 	.word	0x08005181
 8005148:	0800518f 	.word	0x0800518f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	3214      	adds	r2, #20
 8005152:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	ea42 0103 	orr.w	r1, r2, r3
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	3214      	adds	r2, #20
 8005162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005166:	e032      	b.n	80051ce <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	3214      	adds	r2, #20
 800516e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005172:	1c59      	adds	r1, r3, #1
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	3214      	adds	r2, #20
 800517a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800517e:	e026      	b.n	80051ce <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	3214      	adds	r2, #20
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800518c:	e01f      	b.n	80051ce <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800518e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005192:	2b02      	cmp	r3, #2
 8005194:	d006      	beq.n	80051a4 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	3214      	adds	r2, #20
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80051a2:	e014      	b.n	80051ce <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80051a8:	e011      	b.n	80051ce <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80051aa:	4b2b      	ldr	r3, [pc, #172]	; (8005258 <xTaskGenericNotify+0x1ac>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00c      	beq.n	80051cc <xTaskGenericNotify+0x120>
        __asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	61bb      	str	r3, [r7, #24]
    }
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <xTaskGenericNotify+0x11a>
                    break;
 80051c8:	bf00      	nop
 80051ca:	e000      	b.n	80051ce <xTaskGenericNotify+0x122>

                    break;
 80051cc:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80051ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d139      	bne.n	800524a <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d8:	3304      	adds	r3, #4
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe fb2b 	bl	8003836 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	2201      	movs	r2, #1
 80051e6:	409a      	lsls	r2, r3
 80051e8:	4b1c      	ldr	r3, [pc, #112]	; (800525c <xTaskGenericNotify+0x1b0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	4a1b      	ldr	r2, [pc, #108]	; (800525c <xTaskGenericNotify+0x1b0>)
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4a18      	ldr	r2, [pc, #96]	; (8005260 <xTaskGenericNotify+0x1b4>)
 8005200:	441a      	add	r2, r3
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	3304      	adds	r3, #4
 8005206:	4619      	mov	r1, r3
 8005208:	4610      	mov	r0, r2
 800520a:	f7fe fab7 	bl	800377c <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <xTaskGenericNotify+0x180>
        __asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	617b      	str	r3, [r7, #20]
    }
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005230:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <xTaskGenericNotify+0x1b8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	429a      	cmp	r2, r3
 8005238:	d907      	bls.n	800524a <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800523a:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <xTaskGenericNotify+0x1bc>)
 800523c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800524a:	f000 fe45 	bl	8005ed8 <vPortExitCritical>

        return xReturn;
 800524e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8005250:	4618      	mov	r0, r3
 8005252:	3730      	adds	r7, #48	; 0x30
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20000c04 	.word	0x20000c04
 800525c:	20000c08 	.word	0x20000c08
 8005260:	20000b2c 	.word	0x20000b2c
 8005264:	20000b28 	.word	0x20000b28
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800526c:	b580      	push	{r7, lr}
 800526e:	b090      	sub	sp, #64	; 0x40
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800527a:	2301      	movs	r3, #1
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8005296:	bf00      	nop
 8005298:	e7fe      	b.n	8005298 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052b6:	f000 fec1 	bl	800603c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 80052be:	f3ef 8211 	mrs	r2, BASEPRI
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	627a      	str	r2, [r7, #36]	; 0x24
 80052d4:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052d8:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80052da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d006      	beq.n	80052ee <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80052e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	3214      	adds	r2, #20
 80052e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80052ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ec:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80052ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4413      	add	r3, r2
 80052f4:	3354      	adds	r3, #84	; 0x54
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80052fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4413      	add	r3, r2
 8005302:	3354      	adds	r3, #84	; 0x54
 8005304:	2202      	movs	r2, #2
 8005306:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	2b04      	cmp	r3, #4
 800530c:	d83b      	bhi.n	8005386 <xTaskGenericNotifyFromISR+0x11a>
 800530e:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <xTaskGenericNotifyFromISR+0xa8>)
 8005310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005314:	080053a5 	.word	0x080053a5
 8005318:	08005329 	.word	0x08005329
 800531c:	08005345 	.word	0x08005345
 8005320:	0800535d 	.word	0x0800535d
 8005324:	0800536b 	.word	0x0800536b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	3214      	adds	r2, #20
 800532e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	ea42 0103 	orr.w	r1, r2, r3
 8005338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	3214      	adds	r2, #20
 800533e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005342:	e032      	b.n	80053aa <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	3214      	adds	r2, #20
 800534a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800534e:	1c59      	adds	r1, r3, #1
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	3214      	adds	r2, #20
 8005356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800535a:	e026      	b.n	80053aa <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800535c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	3214      	adds	r2, #20
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005368:	e01f      	b.n	80053aa <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800536a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800536e:	2b02      	cmp	r3, #2
 8005370:	d006      	beq.n	8005380 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	3214      	adds	r2, #20
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800537e:	e014      	b.n	80053aa <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8005380:	2300      	movs	r3, #0
 8005382:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8005384:	e011      	b.n	80053aa <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005386:	4b33      	ldr	r3, [pc, #204]	; (8005454 <xTaskGenericNotifyFromISR+0x1e8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00c      	beq.n	80053a8 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	61fb      	str	r3, [r7, #28]
    }
 80053a0:	bf00      	nop
 80053a2:	e7fe      	b.n	80053a2 <xTaskGenericNotifyFromISR+0x136>
                    break;
 80053a4:	bf00      	nop
 80053a6:	e000      	b.n	80053aa <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80053a8:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80053aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d145      	bne.n	800543e <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	61bb      	str	r3, [r7, #24]
    }
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053d0:	4b21      	ldr	r3, [pc, #132]	; (8005458 <xTaskGenericNotifyFromISR+0x1ec>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d11c      	bne.n	8005412 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053da:	3304      	adds	r3, #4
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fe fa2a 	bl	8003836 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80053e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	2201      	movs	r2, #1
 80053e8:	409a      	lsls	r2, r3
 80053ea:	4b1c      	ldr	r3, [pc, #112]	; (800545c <xTaskGenericNotifyFromISR+0x1f0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	4a1a      	ldr	r2, [pc, #104]	; (800545c <xTaskGenericNotifyFromISR+0x1f0>)
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4a17      	ldr	r2, [pc, #92]	; (8005460 <xTaskGenericNotifyFromISR+0x1f4>)
 8005402:	441a      	add	r2, r3
 8005404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005406:	3304      	adds	r3, #4
 8005408:	4619      	mov	r1, r3
 800540a:	4610      	mov	r0, r2
 800540c:	f7fe f9b6 	bl	800377c <vListInsertEnd>
 8005410:	e005      	b.n	800541e <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005414:	3318      	adds	r3, #24
 8005416:	4619      	mov	r1, r3
 8005418:	4812      	ldr	r0, [pc, #72]	; (8005464 <xTaskGenericNotifyFromISR+0x1f8>)
 800541a:	f7fe f9af 	bl	800377c <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800541e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005422:	4b11      	ldr	r3, [pc, #68]	; (8005468 <xTaskGenericNotifyFromISR+0x1fc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	429a      	cmp	r2, r3
 800542a:	d908      	bls.n	800543e <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800542c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8005432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005434:	2201      	movs	r2, #1
 8005436:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <xTaskGenericNotifyFromISR+0x200>)
 800543a:	2201      	movs	r2, #1
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005440:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f383 8811 	msr	BASEPRI, r3
    }
 8005448:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800544a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 800544c:	4618      	mov	r0, r3
 800544e:	3740      	adds	r7, #64	; 0x40
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20000c04 	.word	0x20000c04
 8005458:	20000c28 	.word	0x20000c28
 800545c:	20000c08 	.word	0x20000c08
 8005460:	20000b2c 	.word	0x20000b2c
 8005464:	20000bc0 	.word	0x20000bc0
 8005468:	20000b28 	.word	0x20000b28
 800546c:	20000c14 	.word	0x20000c14

08005470 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800547a:	4b29      	ldr	r3, [pc, #164]	; (8005520 <prvAddCurrentTaskToDelayedList+0xb0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005480:	4b28      	ldr	r3, [pc, #160]	; (8005524 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3304      	adds	r3, #4
 8005486:	4618      	mov	r0, r3
 8005488:	f7fe f9d5 	bl	8003836 <uxListRemove>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005492:	4b24      	ldr	r3, [pc, #144]	; (8005524 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	2201      	movs	r2, #1
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43da      	mvns	r2, r3
 80054a0:	4b21      	ldr	r3, [pc, #132]	; (8005528 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4013      	ands	r3, r2
 80054a6:	4a20      	ldr	r2, [pc, #128]	; (8005528 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054a8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b0:	d10a      	bne.n	80054c8 <prvAddCurrentTaskToDelayedList+0x58>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d007      	beq.n	80054c8 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054b8:	4b1a      	ldr	r3, [pc, #104]	; (8005524 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3304      	adds	r3, #4
 80054be:	4619      	mov	r1, r3
 80054c0:	481a      	ldr	r0, [pc, #104]	; (800552c <prvAddCurrentTaskToDelayedList+0xbc>)
 80054c2:	f7fe f95b 	bl	800377c <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80054c6:	e026      	b.n	8005516 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054d0:	4b14      	ldr	r3, [pc, #80]	; (8005524 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d209      	bcs.n	80054f4 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054e0:	4b13      	ldr	r3, [pc, #76]	; (8005530 <prvAddCurrentTaskToDelayedList+0xc0>)
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4b0f      	ldr	r3, [pc, #60]	; (8005524 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3304      	adds	r3, #4
 80054ea:	4619      	mov	r1, r3
 80054ec:	4610      	mov	r0, r2
 80054ee:	f7fe f969 	bl	80037c4 <vListInsert>
}
 80054f2:	e010      	b.n	8005516 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054f4:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <prvAddCurrentTaskToDelayedList+0xc4>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3304      	adds	r3, #4
 80054fe:	4619      	mov	r1, r3
 8005500:	4610      	mov	r0, r2
 8005502:	f7fe f95f 	bl	80037c4 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	429a      	cmp	r2, r3
 800550e:	d202      	bcs.n	8005516 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005510:	4a09      	ldr	r2, [pc, #36]	; (8005538 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6013      	str	r3, [r2, #0]
}
 8005516:	bf00      	nop
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20000c04 	.word	0x20000c04
 8005524:	20000b28 	.word	0x20000b28
 8005528:	20000c08 	.word	0x20000c08
 800552c:	20000bec 	.word	0x20000bec
 8005530:	20000bbc 	.word	0x20000bbc
 8005534:	20000bb8 	.word	0x20000bb8
 8005538:	20000c20 	.word	0x20000c20

0800553c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005542:	2300      	movs	r3, #0
 8005544:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005546:	f000 fb31 	bl	8005bac <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800554a:	4b11      	ldr	r3, [pc, #68]	; (8005590 <xTimerCreateTimerTask+0x54>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00b      	beq.n	800556a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005552:	4b10      	ldr	r3, [pc, #64]	; (8005594 <xTimerCreateTimerTask+0x58>)
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	2302      	movs	r3, #2
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	2300      	movs	r3, #0
 800555c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005560:	490d      	ldr	r1, [pc, #52]	; (8005598 <xTimerCreateTimerTask+0x5c>)
 8005562:	480e      	ldr	r0, [pc, #56]	; (800559c <xTimerCreateTimerTask+0x60>)
 8005564:	f7fe ff46 	bl	80043f4 <xTaskCreate>
 8005568:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	603b      	str	r3, [r7, #0]
    }
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005586:	687b      	ldr	r3, [r7, #4]
    }
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20000c5c 	.word	0x20000c5c
 8005594:	20000c60 	.word	0x20000c60
 8005598:	0800fd1c 	.word	0x0800fd1c
 800559c:	0800578d 	.word	0x0800578d

080055a0 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80055ae:	202c      	movs	r0, #44	; 0x2c
 80055b0:	f000 fd84 	bl	80060bc <pvPortMalloc>
 80055b4:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00d      	beq.n	80055d8 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	9301      	str	r3, [sp, #4]
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 f805 	bl	80055e2 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80055d8:	697b      	ldr	r3, [r7, #20]
        }
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b086      	sub	sp, #24
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
 80055ee:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10a      	bne.n	800560c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	617b      	str	r3, [r7, #20]
    }
 8005608:	bf00      	nop
 800560a:	e7fe      	b.n	800560a <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	2b00      	cmp	r3, #0
 8005610:	d01e      	beq.n	8005650 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8005612:	f000 facb 	bl	8005bac <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	6a3a      	ldr	r2, [r7, #32]
 800562c:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	3304      	adds	r3, #4
 8005632:	4618      	mov	r0, r3
 8005634:	f7fe f895 	bl	8003762 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005644:	f043 0304 	orr.w	r3, r3, #4
 8005648:	b2da      	uxtb	r2, r3
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8005650:	bf00      	nop
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005658:	b580      	push	{r7, lr}
 800565a:	b08a      	sub	sp, #40	; 0x28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005666:	2300      	movs	r3, #0
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <xTimerGenericCommand+0x2e>
        __asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	623b      	str	r3, [r7, #32]
    }
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005686:	4b1a      	ldr	r3, [pc, #104]	; (80056f0 <xTimerGenericCommand+0x98>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d02a      	beq.n	80056e4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2b05      	cmp	r3, #5
 800569e:	dc18      	bgt.n	80056d2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80056a0:	f7ff fbec 	bl	8004e7c <xTaskGetSchedulerState>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d109      	bne.n	80056be <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80056aa:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <xTimerGenericCommand+0x98>)
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	f107 0114 	add.w	r1, r7, #20
 80056b2:	2300      	movs	r3, #0
 80056b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b6:	f7fe f9d3 	bl	8003a60 <xQueueGenericSend>
 80056ba:	6278      	str	r0, [r7, #36]	; 0x24
 80056bc:	e012      	b.n	80056e4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80056be:	4b0c      	ldr	r3, [pc, #48]	; (80056f0 <xTimerGenericCommand+0x98>)
 80056c0:	6818      	ldr	r0, [r3, #0]
 80056c2:	f107 0114 	add.w	r1, r7, #20
 80056c6:	2300      	movs	r3, #0
 80056c8:	2200      	movs	r2, #0
 80056ca:	f7fe f9c9 	bl	8003a60 <xQueueGenericSend>
 80056ce:	6278      	str	r0, [r7, #36]	; 0x24
 80056d0:	e008      	b.n	80056e4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80056d2:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <xTimerGenericCommand+0x98>)
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	f107 0114 	add.w	r1, r7, #20
 80056da:	2300      	movs	r3, #0
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	f7fe fabd 	bl	8003c5c <xQueueGenericSendFromISR>
 80056e2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80056e6:	4618      	mov	r0, r3
 80056e8:	3728      	adds	r7, #40	; 0x28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000c5c 	.word	0x20000c5c

080056f4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056fe:	4b22      	ldr	r3, [pc, #136]	; (8005788 <prvProcessExpiredTimer+0x94>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	3304      	adds	r3, #4
 800570c:	4618      	mov	r0, r3
 800570e:	f7fe f892 	bl	8003836 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b00      	cmp	r3, #0
 800571e:	d022      	beq.n	8005766 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	699a      	ldr	r2, [r3, #24]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	18d1      	adds	r1, r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	6978      	ldr	r0, [r7, #20]
 800572e:	f000 f8d1 	bl	80058d4 <prvInsertTimerInActiveList>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01f      	beq.n	8005778 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005738:	2300      	movs	r3, #0
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	2300      	movs	r3, #0
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	2100      	movs	r1, #0
 8005742:	6978      	ldr	r0, [r7, #20]
 8005744:	f7ff ff88 	bl	8005658 <xTimerGenericCommand>
 8005748:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d113      	bne.n	8005778 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	60fb      	str	r3, [r7, #12]
    }
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800576c:	f023 0301 	bic.w	r3, r3, #1
 8005770:	b2da      	uxtb	r2, r3
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	6978      	ldr	r0, [r7, #20]
 800577e:	4798      	blx	r3
    }
 8005780:	bf00      	nop
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20000c54 	.word	0x20000c54

0800578c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005794:	f107 0308 	add.w	r3, r7, #8
 8005798:	4618      	mov	r0, r3
 800579a:	f000 f857 	bl	800584c <prvGetNextExpireTime>
 800579e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	4619      	mov	r1, r3
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f803 	bl	80057b0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80057aa:	f000 f8d5 	bl	8005958 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057ae:	e7f1      	b.n	8005794 <prvTimerTask+0x8>

080057b0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80057ba:	f7fe ffb3 	bl	8004724 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057be:	f107 0308 	add.w	r3, r7, #8
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 f866 	bl	8005894 <prvSampleTimeNow>
 80057c8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d130      	bne.n	8005832 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <prvProcessTimerOrBlockTask+0x3c>
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d806      	bhi.n	80057ec <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80057de:	f7fe ffaf 	bl	8004740 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80057e2:	68f9      	ldr	r1, [r7, #12]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff ff85 	bl	80056f4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80057ea:	e024      	b.n	8005836 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d008      	beq.n	8005804 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80057f2:	4b13      	ldr	r3, [pc, #76]	; (8005840 <prvProcessTimerOrBlockTask+0x90>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <prvProcessTimerOrBlockTask+0x50>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <prvProcessTimerOrBlockTask+0x52>
 8005800:	2300      	movs	r3, #0
 8005802:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005804:	4b0f      	ldr	r3, [pc, #60]	; (8005844 <prvProcessTimerOrBlockTask+0x94>)
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	4619      	mov	r1, r3
 8005812:	f7fe fdbb 	bl	800438c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005816:	f7fe ff93 	bl	8004740 <xTaskResumeAll>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005820:	4b09      	ldr	r3, [pc, #36]	; (8005848 <prvProcessTimerOrBlockTask+0x98>)
 8005822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
    }
 8005830:	e001      	b.n	8005836 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005832:	f7fe ff85 	bl	8004740 <xTaskResumeAll>
    }
 8005836:	bf00      	nop
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000c58 	.word	0x20000c58
 8005844:	20000c5c 	.word	0x20000c5c
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005854:	4b0e      	ldr	r3, [pc, #56]	; (8005890 <prvGetNextExpireTime+0x44>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <prvGetNextExpireTime+0x16>
 800585e:	2201      	movs	r2, #1
 8005860:	e000      	b.n	8005864 <prvGetNextExpireTime+0x18>
 8005862:	2200      	movs	r2, #0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d105      	bne.n	800587c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <prvGetNextExpireTime+0x44>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	e001      	b.n	8005880 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005880:	68fb      	ldr	r3, [r7, #12]
    }
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	20000c54 	.word	0x20000c54

08005894 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800589c:	f7fe ffec 	bl	8004878 <xTaskGetTickCount>
 80058a0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80058a2:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <prvSampleTimeNow+0x3c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d205      	bcs.n	80058b8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80058ac:	f000 f91a 	bl	8005ae4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	e002      	b.n	80058be <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80058be:	4a04      	ldr	r2, [pc, #16]	; (80058d0 <prvSampleTimeNow+0x3c>)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80058c4:	68fb      	ldr	r3, [r7, #12]
    }
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000c64 	.word	0x20000c64

080058d4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d812      	bhi.n	8005920 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	1ad2      	subs	r2, r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	429a      	cmp	r2, r3
 8005906:	d302      	bcc.n	800590e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005908:	2301      	movs	r3, #1
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	e01b      	b.n	8005946 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800590e:	4b10      	ldr	r3, [pc, #64]	; (8005950 <prvInsertTimerInActiveList+0x7c>)
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3304      	adds	r3, #4
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f7fd ff53 	bl	80037c4 <vListInsert>
 800591e:	e012      	b.n	8005946 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d206      	bcs.n	8005936 <prvInsertTimerInActiveList+0x62>
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d302      	bcc.n	8005936 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005930:	2301      	movs	r3, #1
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	e007      	b.n	8005946 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005936:	4b07      	ldr	r3, [pc, #28]	; (8005954 <prvInsertTimerInActiveList+0x80>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3304      	adds	r3, #4
 800593e:	4619      	mov	r1, r3
 8005940:	4610      	mov	r0, r2
 8005942:	f7fd ff3f 	bl	80037c4 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005946:	697b      	ldr	r3, [r7, #20]
    }
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000c58 	.word	0x20000c58
 8005954:	20000c54 	.word	0x20000c54

08005958 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005958:	b580      	push	{r7, lr}
 800595a:	b08c      	sub	sp, #48	; 0x30
 800595c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800595e:	e0ae      	b.n	8005abe <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	f2c0 80aa 	blt.w	8005abc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d004      	beq.n	800597e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	3304      	adds	r3, #4
 8005978:	4618      	mov	r0, r3
 800597a:	f7fd ff5c 	bl	8003836 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800597e:	1d3b      	adds	r3, r7, #4
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff ff87 	bl	8005894 <prvSampleTimeNow>
 8005986:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b09      	cmp	r3, #9
 800598c:	f200 8097 	bhi.w	8005abe <prvProcessReceivedCommands+0x166>
 8005990:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <prvProcessReceivedCommands+0x40>)
 8005992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005996:	bf00      	nop
 8005998:	080059c1 	.word	0x080059c1
 800599c:	080059c1 	.word	0x080059c1
 80059a0:	080059c1 	.word	0x080059c1
 80059a4:	08005a35 	.word	0x08005a35
 80059a8:	08005a49 	.word	0x08005a49
 80059ac:	08005a93 	.word	0x08005a93
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	080059c1 	.word	0x080059c1
 80059b8:	08005a35 	.word	0x08005a35
 80059bc:	08005a49 	.word	0x08005a49
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059c6:	f043 0301 	orr.w	r3, r3, #1
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	18d1      	adds	r1, r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a3a      	ldr	r2, [r7, #32]
 80059de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059e0:	f7ff ff78 	bl	80058d4 <prvInsertTimerInActiveList>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d069      	beq.n	8005abe <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059f0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d05e      	beq.n	8005abe <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	441a      	add	r2, r3
 8005a08:	2300      	movs	r3, #0
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	2100      	movs	r1, #0
 8005a10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a12:	f7ff fe21 	bl	8005658 <xTimerGenericCommand>
 8005a16:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d14f      	bne.n	8005abe <prvProcessReceivedCommands+0x166>
        __asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	61bb      	str	r3, [r7, #24]
    }
 8005a30:	bf00      	nop
 8005a32:	e7fe      	b.n	8005a32 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005a46:	e03a      	b.n	8005abe <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	617b      	str	r3, [r7, #20]
    }
 8005a7a:	bf00      	nop
 8005a7c:	e7fe      	b.n	8005a7c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	18d1      	adds	r1, r2, r3
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	6a3a      	ldr	r2, [r7, #32]
 8005a8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a8c:	f7ff ff22 	bl	80058d4 <prvInsertTimerInActiveList>
                        break;
 8005a90:	e015      	b.n	8005abe <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d103      	bne.n	8005aa8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8005aa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005aa2:	f000 fbeb 	bl	800627c <vPortFree>
 8005aa6:	e00a      	b.n	8005abe <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aae:	f023 0301 	bic.w	r3, r3, #1
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005aba:	e000      	b.n	8005abe <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005abc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005abe:	4b08      	ldr	r3, [pc, #32]	; (8005ae0 <prvProcessReceivedCommands+0x188>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f107 0108 	add.w	r1, r7, #8
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fe f971 	bl	8003db0 <xQueueReceive>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f47f af45 	bne.w	8005960 <prvProcessReceivedCommands+0x8>
        }
    }
 8005ad6:	bf00      	nop
 8005ad8:	bf00      	nop
 8005ada:	3728      	adds	r7, #40	; 0x28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	20000c5c 	.word	0x20000c5c

08005ae4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b088      	sub	sp, #32
 8005ae8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005aea:	e048      	b.n	8005b7e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005aec:	4b2d      	ldr	r3, [pc, #180]	; (8005ba4 <prvSwitchTimerLists+0xc0>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af6:	4b2b      	ldr	r3, [pc, #172]	; (8005ba4 <prvSwitchTimerLists+0xc0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3304      	adds	r3, #4
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fd fe96 	bl	8003836 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d02e      	beq.n	8005b7e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4413      	add	r3, r2
 8005b28:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d90e      	bls.n	8005b50 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b3e:	4b19      	ldr	r3, [pc, #100]	; (8005ba4 <prvSwitchTimerLists+0xc0>)
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3304      	adds	r3, #4
 8005b46:	4619      	mov	r1, r3
 8005b48:	4610      	mov	r0, r2
 8005b4a:	f7fd fe3b 	bl	80037c4 <vListInsert>
 8005b4e:	e016      	b.n	8005b7e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b50:	2300      	movs	r3, #0
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	2300      	movs	r3, #0
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	2100      	movs	r1, #0
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f7ff fd7c 	bl	8005658 <xTimerGenericCommand>
 8005b60:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	603b      	str	r3, [r7, #0]
    }
 8005b7a:	bf00      	nop
 8005b7c:	e7fe      	b.n	8005b7c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b7e:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <prvSwitchTimerLists+0xc0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1b1      	bne.n	8005aec <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005b88:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <prvSwitchTimerLists+0xc0>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005b8e:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <prvSwitchTimerLists+0xc4>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a04      	ldr	r2, [pc, #16]	; (8005ba4 <prvSwitchTimerLists+0xc0>)
 8005b94:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005b96:	4a04      	ldr	r2, [pc, #16]	; (8005ba8 <prvSwitchTimerLists+0xc4>)
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	6013      	str	r3, [r2, #0]
    }
 8005b9c:	bf00      	nop
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	20000c54 	.word	0x20000c54
 8005ba8:	20000c58 	.word	0x20000c58

08005bac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005bb0:	f000 f962 	bl	8005e78 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005bb4:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <prvCheckForValidListAndQueue+0x54>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d11d      	bne.n	8005bf8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005bbc:	4811      	ldr	r0, [pc, #68]	; (8005c04 <prvCheckForValidListAndQueue+0x58>)
 8005bbe:	f7fd fdb0 	bl	8003722 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005bc2:	4811      	ldr	r0, [pc, #68]	; (8005c08 <prvCheckForValidListAndQueue+0x5c>)
 8005bc4:	f7fd fdad 	bl	8003722 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005bc8:	4b10      	ldr	r3, [pc, #64]	; (8005c0c <prvCheckForValidListAndQueue+0x60>)
 8005bca:	4a0e      	ldr	r2, [pc, #56]	; (8005c04 <prvCheckForValidListAndQueue+0x58>)
 8005bcc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005bce:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <prvCheckForValidListAndQueue+0x64>)
 8005bd0:	4a0d      	ldr	r2, [pc, #52]	; (8005c08 <prvCheckForValidListAndQueue+0x5c>)
 8005bd2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	210c      	movs	r1, #12
 8005bd8:	200a      	movs	r0, #10
 8005bda:	f7fd febf 	bl	800395c <xQueueGenericCreate>
 8005bde:	4603      	mov	r3, r0
 8005be0:	4a07      	ldr	r2, [pc, #28]	; (8005c00 <prvCheckForValidListAndQueue+0x54>)
 8005be2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005be4:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <prvCheckForValidListAndQueue+0x54>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005bec:	4b04      	ldr	r3, [pc, #16]	; (8005c00 <prvCheckForValidListAndQueue+0x54>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4908      	ldr	r1, [pc, #32]	; (8005c14 <prvCheckForValidListAndQueue+0x68>)
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fba0 	bl	8004338 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005bf8:	f000 f96e 	bl	8005ed8 <vPortExitCritical>
    }
 8005bfc:	bf00      	nop
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20000c5c 	.word	0x20000c5c
 8005c04:	20000c2c 	.word	0x20000c2c
 8005c08:	20000c40 	.word	0x20000c40
 8005c0c:	20000c54 	.word	0x20000c54
 8005c10:	20000c58 	.word	0x20000c58
 8005c14:	0800fd24 	.word	0x0800fd24

08005c18 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3b04      	subs	r3, #4
 8005c28:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c30:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3b04      	subs	r3, #4
 8005c36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f023 0201 	bic.w	r2, r3, #1
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	3b04      	subs	r3, #4
 8005c46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005c48:	4a0c      	ldr	r2, [pc, #48]	; (8005c7c <pxPortInitialiseStack+0x64>)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3b14      	subs	r3, #20
 8005c52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3b04      	subs	r3, #4
 8005c5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f06f 0202 	mvn.w	r2, #2
 8005c66:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3b20      	subs	r3, #32
 8005c6c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	08005c81 	.word	0x08005c81

08005c80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005c8a:	4b12      	ldr	r3, [pc, #72]	; (8005cd4 <prvTaskExitError+0x54>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c92:	d00a      	beq.n	8005caa <prvTaskExitError+0x2a>
        __asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	60fb      	str	r3, [r7, #12]
    }
 8005ca6:	bf00      	nop
 8005ca8:	e7fe      	b.n	8005ca8 <prvTaskExitError+0x28>
        __asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	60bb      	str	r3, [r7, #8]
    }
 8005cbc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005cbe:	bf00      	nop
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0fc      	beq.n	8005cc0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005cc6:	bf00      	nop
 8005cc8:	bf00      	nop
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	20000020 	.word	0x20000020
	...

08005ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005ce0:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <pxCurrentTCBConst2>)
 8005ce2:	6819      	ldr	r1, [r3, #0]
 8005ce4:	6808      	ldr	r0, [r1, #0]
 8005ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cea:	f380 8809 	msr	PSP, r0
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f04f 0000 	mov.w	r0, #0
 8005cf6:	f380 8811 	msr	BASEPRI, r0
 8005cfa:	4770      	bx	lr
 8005cfc:	f3af 8000 	nop.w

08005d00 <pxCurrentTCBConst2>:
 8005d00:	20000b28 	.word	0x20000b28
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop

08005d08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005d08:	4808      	ldr	r0, [pc, #32]	; (8005d2c <prvPortStartFirstTask+0x24>)
 8005d0a:	6800      	ldr	r0, [r0, #0]
 8005d0c:	6800      	ldr	r0, [r0, #0]
 8005d0e:	f380 8808 	msr	MSP, r0
 8005d12:	f04f 0000 	mov.w	r0, #0
 8005d16:	f380 8814 	msr	CONTROL, r0
 8005d1a:	b662      	cpsie	i
 8005d1c:	b661      	cpsie	f
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	df00      	svc	0
 8005d28:	bf00      	nop
 8005d2a:	0000      	.short	0x0000
 8005d2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop

08005d34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d3a:	4b46      	ldr	r3, [pc, #280]	; (8005e54 <xPortStartScheduler+0x120>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a46      	ldr	r2, [pc, #280]	; (8005e58 <xPortStartScheduler+0x124>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d10a      	bne.n	8005d5a <xPortStartScheduler+0x26>
        __asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	613b      	str	r3, [r7, #16]
    }
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d5a:	4b3e      	ldr	r3, [pc, #248]	; (8005e54 <xPortStartScheduler+0x120>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a3f      	ldr	r2, [pc, #252]	; (8005e5c <xPortStartScheduler+0x128>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d10a      	bne.n	8005d7a <xPortStartScheduler+0x46>
        __asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	60fb      	str	r3, [r7, #12]
    }
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d7a:	4b39      	ldr	r3, [pc, #228]	; (8005e60 <xPortStartScheduler+0x12c>)
 8005d7c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	22ff      	movs	r2, #255	; 0xff
 8005d8a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	4b31      	ldr	r3, [pc, #196]	; (8005e64 <xPortStartScheduler+0x130>)
 8005da0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005da2:	4b31      	ldr	r3, [pc, #196]	; (8005e68 <xPortStartScheduler+0x134>)
 8005da4:	2207      	movs	r2, #7
 8005da6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005da8:	e009      	b.n	8005dbe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8005daa:	4b2f      	ldr	r3, [pc, #188]	; (8005e68 <xPortStartScheduler+0x134>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	4a2d      	ldr	r2, [pc, #180]	; (8005e68 <xPortStartScheduler+0x134>)
 8005db2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dbe:	78fb      	ldrb	r3, [r7, #3]
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc6:	2b80      	cmp	r3, #128	; 0x80
 8005dc8:	d0ef      	beq.n	8005daa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005dca:	4b27      	ldr	r3, [pc, #156]	; (8005e68 <xPortStartScheduler+0x134>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f1c3 0307 	rsb	r3, r3, #7
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d00a      	beq.n	8005dec <xPortStartScheduler+0xb8>
        __asm volatile
 8005dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	60bb      	str	r3, [r7, #8]
    }
 8005de8:	bf00      	nop
 8005dea:	e7fe      	b.n	8005dea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005dec:	4b1e      	ldr	r3, [pc, #120]	; (8005e68 <xPortStartScheduler+0x134>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	4a1d      	ldr	r2, [pc, #116]	; (8005e68 <xPortStartScheduler+0x134>)
 8005df4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005df6:	4b1c      	ldr	r3, [pc, #112]	; (8005e68 <xPortStartScheduler+0x134>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dfe:	4a1a      	ldr	r2, [pc, #104]	; (8005e68 <xPortStartScheduler+0x134>)
 8005e00:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005e0a:	4b18      	ldr	r3, [pc, #96]	; (8005e6c <xPortStartScheduler+0x138>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a17      	ldr	r2, [pc, #92]	; (8005e6c <xPortStartScheduler+0x138>)
 8005e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e14:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005e16:	4b15      	ldr	r3, [pc, #84]	; (8005e6c <xPortStartScheduler+0x138>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a14      	ldr	r2, [pc, #80]	; (8005e6c <xPortStartScheduler+0x138>)
 8005e1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e20:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005e22:	f000 f8db 	bl	8005fdc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005e26:	4b12      	ldr	r3, [pc, #72]	; (8005e70 <xPortStartScheduler+0x13c>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005e2c:	f000 f8fa 	bl	8006024 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e30:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <xPortStartScheduler+0x140>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a0f      	ldr	r2, [pc, #60]	; (8005e74 <xPortStartScheduler+0x140>)
 8005e36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005e3a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005e3c:	f7ff ff64 	bl	8005d08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005e40:	f7fe fdd4 	bl	80049ec <vTaskSwitchContext>
    prvTaskExitError();
 8005e44:	f7ff ff1c 	bl	8005c80 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	e000ed00 	.word	0xe000ed00
 8005e58:	410fc271 	.word	0x410fc271
 8005e5c:	410fc270 	.word	0x410fc270
 8005e60:	e000e400 	.word	0xe000e400
 8005e64:	20000c68 	.word	0x20000c68
 8005e68:	20000c6c 	.word	0x20000c6c
 8005e6c:	e000ed20 	.word	0xe000ed20
 8005e70:	20000020 	.word	0x20000020
 8005e74:	e000ef34 	.word	0xe000ef34

08005e78 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
        __asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	607b      	str	r3, [r7, #4]
    }
 8005e90:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005e92:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <vPortEnterCritical+0x58>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3301      	adds	r3, #1
 8005e98:	4a0d      	ldr	r2, [pc, #52]	; (8005ed0 <vPortEnterCritical+0x58>)
 8005e9a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005e9c:	4b0c      	ldr	r3, [pc, #48]	; (8005ed0 <vPortEnterCritical+0x58>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d10f      	bne.n	8005ec4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ea4:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <vPortEnterCritical+0x5c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <vPortEnterCritical+0x4c>
        __asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	603b      	str	r3, [r7, #0]
    }
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <vPortEnterCritical+0x4a>
    }
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	20000020 	.word	0x20000020
 8005ed4:	e000ed04 	.word	0xe000ed04

08005ed8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005ede:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <vPortExitCritical+0x50>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <vPortExitCritical+0x24>
        __asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	607b      	str	r3, [r7, #4]
    }
 8005ef8:	bf00      	nop
 8005efa:	e7fe      	b.n	8005efa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <vPortExitCritical+0x50>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	4a09      	ldr	r2, [pc, #36]	; (8005f28 <vPortExitCritical+0x50>)
 8005f04:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005f06:	4b08      	ldr	r3, [pc, #32]	; (8005f28 <vPortExitCritical+0x50>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d105      	bne.n	8005f1a <vPortExitCritical+0x42>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	f383 8811 	msr	BASEPRI, r3
    }
 8005f18:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	20000020 	.word	0x20000020
 8005f2c:	00000000 	.word	0x00000000

08005f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005f30:	f3ef 8009 	mrs	r0, PSP
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	4b15      	ldr	r3, [pc, #84]	; (8005f90 <pxCurrentTCBConst>)
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	f01e 0f10 	tst.w	lr, #16
 8005f40:	bf08      	it	eq
 8005f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4a:	6010      	str	r0, [r2, #0]
 8005f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f54:	f380 8811 	msr	BASEPRI, r0
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f7fe fd44 	bl	80049ec <vTaskSwitchContext>
 8005f64:	f04f 0000 	mov.w	r0, #0
 8005f68:	f380 8811 	msr	BASEPRI, r0
 8005f6c:	bc09      	pop	{r0, r3}
 8005f6e:	6819      	ldr	r1, [r3, #0]
 8005f70:	6808      	ldr	r0, [r1, #0]
 8005f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f76:	f01e 0f10 	tst.w	lr, #16
 8005f7a:	bf08      	it	eq
 8005f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f80:	f380 8809 	msr	PSP, r0
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	f3af 8000 	nop.w

08005f90 <pxCurrentTCBConst>:
 8005f90:	20000b28 	.word	0x20000b28
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop

08005f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
        __asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	607b      	str	r3, [r7, #4]
    }
 8005fb0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005fb2:	f7fe fc71 	bl	8004898 <xTaskIncrementTick>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fbc:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <SysTick_Handler+0x40>)
 8005fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	f383 8811 	msr	BASEPRI, r3
    }
 8005fce:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	e000ed04 	.word	0xe000ed04

08005fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <vPortSetupTimerInterrupt+0x34>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005fe6:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <vPortSetupTimerInterrupt+0x38>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005fec:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <vPortSetupTimerInterrupt+0x3c>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a0a      	ldr	r2, [pc, #40]	; (800601c <vPortSetupTimerInterrupt+0x40>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	099b      	lsrs	r3, r3, #6
 8005ff8:	4a09      	ldr	r2, [pc, #36]	; (8006020 <vPortSetupTimerInterrupt+0x44>)
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ffe:	4b04      	ldr	r3, [pc, #16]	; (8006010 <vPortSetupTimerInterrupt+0x34>)
 8006000:	2207      	movs	r2, #7
 8006002:	601a      	str	r2, [r3, #0]
}
 8006004:	bf00      	nop
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	e000e010 	.word	0xe000e010
 8006014:	e000e018 	.word	0xe000e018
 8006018:	20000000 	.word	0x20000000
 800601c:	10624dd3 	.word	0x10624dd3
 8006020:	e000e014 	.word	0xe000e014

08006024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006034 <vPortEnableVFP+0x10>
 8006028:	6801      	ldr	r1, [r0, #0]
 800602a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800602e:	6001      	str	r1, [r0, #0]
 8006030:	4770      	bx	lr
 8006032:	0000      	.short	0x0000
 8006034:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006038:	bf00      	nop
 800603a:	bf00      	nop

0800603c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006042:	f3ef 8305 	mrs	r3, IPSR
 8006046:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b0f      	cmp	r3, #15
 800604c:	d914      	bls.n	8006078 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800604e:	4a17      	ldr	r2, [pc, #92]	; (80060ac <vPortValidateInterruptPriority+0x70>)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4413      	add	r3, r2
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006058:	4b15      	ldr	r3, [pc, #84]	; (80060b0 <vPortValidateInterruptPriority+0x74>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	7afa      	ldrb	r2, [r7, #11]
 800605e:	429a      	cmp	r2, r3
 8006060:	d20a      	bcs.n	8006078 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	607b      	str	r3, [r7, #4]
    }
 8006074:	bf00      	nop
 8006076:	e7fe      	b.n	8006076 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006078:	4b0e      	ldr	r3, [pc, #56]	; (80060b4 <vPortValidateInterruptPriority+0x78>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006080:	4b0d      	ldr	r3, [pc, #52]	; (80060b8 <vPortValidateInterruptPriority+0x7c>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	429a      	cmp	r2, r3
 8006086:	d90a      	bls.n	800609e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	603b      	str	r3, [r7, #0]
    }
 800609a:	bf00      	nop
 800609c:	e7fe      	b.n	800609c <vPortValidateInterruptPriority+0x60>
    }
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	e000e3f0 	.word	0xe000e3f0
 80060b0:	20000c68 	.word	0x20000c68
 80060b4:	e000ed0c 	.word	0xe000ed0c
 80060b8:	20000c6c 	.word	0x20000c6c

080060bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08a      	sub	sp, #40	; 0x28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80060c8:	f7fe fb2c 	bl	8004724 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80060cc:	4b65      	ldr	r3, [pc, #404]	; (8006264 <pvPortMalloc+0x1a8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80060d4:	f000 f934 	bl	8006340 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060d8:	4b63      	ldr	r3, [pc, #396]	; (8006268 <pvPortMalloc+0x1ac>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4013      	ands	r3, r2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f040 80a7 	bne.w	8006234 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d02d      	beq.n	8006148 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80060ec:	2208      	movs	r2, #8
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d227      	bcs.n	8006148 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80060f8:	2208      	movs	r2, #8
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4413      	add	r3, r2
 80060fe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	2b00      	cmp	r3, #0
 8006108:	d021      	beq.n	800614e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f023 0307 	bic.w	r3, r3, #7
 8006110:	3308      	adds	r3, #8
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	429a      	cmp	r2, r3
 8006116:	d214      	bcs.n	8006142 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f023 0307 	bic.w	r3, r3, #7
 800611e:	3308      	adds	r3, #8
 8006120:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	2b00      	cmp	r3, #0
 800612a:	d010      	beq.n	800614e <pvPortMalloc+0x92>
        __asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	617b      	str	r3, [r7, #20]
    }
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006146:	e002      	b.n	800614e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	607b      	str	r3, [r7, #4]
 800614c:	e000      	b.n	8006150 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800614e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d06e      	beq.n	8006234 <pvPortMalloc+0x178>
 8006156:	4b45      	ldr	r3, [pc, #276]	; (800626c <pvPortMalloc+0x1b0>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	429a      	cmp	r2, r3
 800615e:	d869      	bhi.n	8006234 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006160:	4b43      	ldr	r3, [pc, #268]	; (8006270 <pvPortMalloc+0x1b4>)
 8006162:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006164:	4b42      	ldr	r3, [pc, #264]	; (8006270 <pvPortMalloc+0x1b4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800616a:	e004      	b.n	8006176 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	429a      	cmp	r2, r3
 800617e:	d903      	bls.n	8006188 <pvPortMalloc+0xcc>
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1f1      	bne.n	800616c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006188:	4b36      	ldr	r3, [pc, #216]	; (8006264 <pvPortMalloc+0x1a8>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618e:	429a      	cmp	r2, r3
 8006190:	d050      	beq.n	8006234 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2208      	movs	r2, #8
 8006198:	4413      	add	r3, r2
 800619a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	1ad2      	subs	r2, r2, r3
 80061ac:	2308      	movs	r3, #8
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d91f      	bls.n	80061f4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4413      	add	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <pvPortMalloc+0x120>
        __asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	613b      	str	r3, [r7, #16]
    }
 80061d8:	bf00      	nop
 80061da:	e7fe      	b.n	80061da <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	1ad2      	subs	r2, r2, r3
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061ee:	69b8      	ldr	r0, [r7, #24]
 80061f0:	f000 f908 	bl	8006404 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061f4:	4b1d      	ldr	r3, [pc, #116]	; (800626c <pvPortMalloc+0x1b0>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	4a1b      	ldr	r2, [pc, #108]	; (800626c <pvPortMalloc+0x1b0>)
 8006200:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006202:	4b1a      	ldr	r3, [pc, #104]	; (800626c <pvPortMalloc+0x1b0>)
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	4b1b      	ldr	r3, [pc, #108]	; (8006274 <pvPortMalloc+0x1b8>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d203      	bcs.n	8006216 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800620e:	4b17      	ldr	r3, [pc, #92]	; (800626c <pvPortMalloc+0x1b0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a18      	ldr	r2, [pc, #96]	; (8006274 <pvPortMalloc+0x1b8>)
 8006214:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	4b13      	ldr	r3, [pc, #76]	; (8006268 <pvPortMalloc+0x1ac>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	431a      	orrs	r2, r3
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800622a:	4b13      	ldr	r3, [pc, #76]	; (8006278 <pvPortMalloc+0x1bc>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3301      	adds	r3, #1
 8006230:	4a11      	ldr	r2, [pc, #68]	; (8006278 <pvPortMalloc+0x1bc>)
 8006232:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006234:	f7fe fa84 	bl	8004740 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <pvPortMalloc+0x19c>
        __asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	60fb      	str	r3, [r7, #12]
    }
 8006254:	bf00      	nop
 8006256:	e7fe      	b.n	8006256 <pvPortMalloc+0x19a>
    return pvReturn;
 8006258:	69fb      	ldr	r3, [r7, #28]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3728      	adds	r7, #40	; 0x28
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20013878 	.word	0x20013878
 8006268:	2001388c 	.word	0x2001388c
 800626c:	2001387c 	.word	0x2001387c
 8006270:	20013870 	.word	0x20013870
 8006274:	20013880 	.word	0x20013880
 8006278:	20013884 	.word	0x20013884

0800627c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d04d      	beq.n	800632a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800628e:	2308      	movs	r3, #8
 8006290:	425b      	negs	r3, r3
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4413      	add	r3, r2
 8006296:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	4b24      	ldr	r3, [pc, #144]	; (8006334 <vPortFree+0xb8>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4013      	ands	r3, r2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10a      	bne.n	80062c0 <vPortFree+0x44>
        __asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	60fb      	str	r3, [r7, #12]
    }
 80062bc:	bf00      	nop
 80062be:	e7fe      	b.n	80062be <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <vPortFree+0x62>
        __asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	60bb      	str	r3, [r7, #8]
    }
 80062da:	bf00      	nop
 80062dc:	e7fe      	b.n	80062dc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	4b14      	ldr	r3, [pc, #80]	; (8006334 <vPortFree+0xb8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4013      	ands	r3, r2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d01e      	beq.n	800632a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d11a      	bne.n	800632a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	4b0e      	ldr	r3, [pc, #56]	; (8006334 <vPortFree+0xb8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	43db      	mvns	r3, r3
 80062fe:	401a      	ands	r2, r3
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006304:	f7fe fa0e 	bl	8004724 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <vPortFree+0xbc>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4413      	add	r3, r2
 8006312:	4a09      	ldr	r2, [pc, #36]	; (8006338 <vPortFree+0xbc>)
 8006314:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006316:	6938      	ldr	r0, [r7, #16]
 8006318:	f000 f874 	bl	8006404 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800631c:	4b07      	ldr	r3, [pc, #28]	; (800633c <vPortFree+0xc0>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3301      	adds	r3, #1
 8006322:	4a06      	ldr	r2, [pc, #24]	; (800633c <vPortFree+0xc0>)
 8006324:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006326:	f7fe fa0b 	bl	8004740 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800632a:	bf00      	nop
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	2001388c 	.word	0x2001388c
 8006338:	2001387c 	.word	0x2001387c
 800633c:	20013888 	.word	0x20013888

08006340 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006346:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800634a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800634c:	4b27      	ldr	r3, [pc, #156]	; (80063ec <prvHeapInit+0xac>)
 800634e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00c      	beq.n	8006374 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	3307      	adds	r3, #7
 800635e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0307 	bic.w	r3, r3, #7
 8006366:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	4a1f      	ldr	r2, [pc, #124]	; (80063ec <prvHeapInit+0xac>)
 8006370:	4413      	add	r3, r2
 8006372:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006378:	4a1d      	ldr	r2, [pc, #116]	; (80063f0 <prvHeapInit+0xb0>)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800637e:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <prvHeapInit+0xb0>)
 8006380:	2200      	movs	r2, #0
 8006382:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	4413      	add	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800638c:	2208      	movs	r2, #8
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	1a9b      	subs	r3, r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 0307 	bic.w	r3, r3, #7
 800639a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4a15      	ldr	r2, [pc, #84]	; (80063f4 <prvHeapInit+0xb4>)
 80063a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80063a2:	4b14      	ldr	r3, [pc, #80]	; (80063f4 <prvHeapInit+0xb4>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2200      	movs	r2, #0
 80063a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80063aa:	4b12      	ldr	r3, [pc, #72]	; (80063f4 <prvHeapInit+0xb4>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	1ad2      	subs	r2, r2, r3
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80063c0:	4b0c      	ldr	r3, [pc, #48]	; (80063f4 <prvHeapInit+0xb4>)
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	4a0a      	ldr	r2, [pc, #40]	; (80063f8 <prvHeapInit+0xb8>)
 80063ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	4a09      	ldr	r2, [pc, #36]	; (80063fc <prvHeapInit+0xbc>)
 80063d6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80063d8:	4b09      	ldr	r3, [pc, #36]	; (8006400 <prvHeapInit+0xc0>)
 80063da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80063de:	601a      	str	r2, [r3, #0]
}
 80063e0:	bf00      	nop
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	20000c70 	.word	0x20000c70
 80063f0:	20013870 	.word	0x20013870
 80063f4:	20013878 	.word	0x20013878
 80063f8:	20013880 	.word	0x20013880
 80063fc:	2001387c 	.word	0x2001387c
 8006400:	2001388c 	.word	0x2001388c

08006404 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800640c:	4b28      	ldr	r3, [pc, #160]	; (80064b0 <prvInsertBlockIntoFreeList+0xac>)
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	e002      	b.n	8006418 <prvInsertBlockIntoFreeList+0x14>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	429a      	cmp	r2, r3
 8006420:	d8f7      	bhi.n	8006412 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	4413      	add	r3, r2
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	429a      	cmp	r2, r3
 8006432:	d108      	bne.n	8006446 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	441a      	add	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	441a      	add	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d118      	bne.n	800648c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	4b15      	ldr	r3, [pc, #84]	; (80064b4 <prvInsertBlockIntoFreeList+0xb0>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d00d      	beq.n	8006482 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	441a      	add	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	e008      	b.n	8006494 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006482:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <prvInsertBlockIntoFreeList+0xb0>)
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	e003      	b.n	8006494 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	429a      	cmp	r2, r3
 800649a:	d002      	beq.n	80064a2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80064a2:	bf00      	nop
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	20013870 	.word	0x20013870
 80064b4:	20013878 	.word	0x20013878

080064b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	db0b      	blt.n	80064e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	f003 021f 	and.w	r2, r3, #31
 80064d0:	4907      	ldr	r1, [pc, #28]	; (80064f0 <__NVIC_EnableIRQ+0x38>)
 80064d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	2001      	movs	r0, #1
 80064da:	fa00 f202 	lsl.w	r2, r0, r2
 80064de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	e000e100 	.word	0xe000e100

080064f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	4603      	mov	r3, r0
 80064fc:	6039      	str	r1, [r7, #0]
 80064fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006504:	2b00      	cmp	r3, #0
 8006506:	db0a      	blt.n	800651e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	b2da      	uxtb	r2, r3
 800650c:	490c      	ldr	r1, [pc, #48]	; (8006540 <__NVIC_SetPriority+0x4c>)
 800650e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006512:	0112      	lsls	r2, r2, #4
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	440b      	add	r3, r1
 8006518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800651c:	e00a      	b.n	8006534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	b2da      	uxtb	r2, r3
 8006522:	4908      	ldr	r1, [pc, #32]	; (8006544 <__NVIC_SetPriority+0x50>)
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	3b04      	subs	r3, #4
 800652c:	0112      	lsls	r2, r2, #4
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	440b      	add	r3, r1
 8006532:	761a      	strb	r2, [r3, #24]
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	e000e100 	.word	0xe000e100
 8006544:	e000ed00 	.word	0xe000ed00

08006548 <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 800654c:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <inTIM4+0x30>)
 800654e:	4a0b      	ldr	r2, [pc, #44]	; (800657c <inTIM4+0x34>)
 8006550:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8006552:	4b09      	ldr	r3, [pc, #36]	; (8006578 <inTIM4+0x30>)
 8006554:	2200      	movs	r2, #0
 8006556:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8006558:	4b07      	ldr	r3, [pc, #28]	; (8006578 <inTIM4+0x30>)
 800655a:	2200      	movs	r2, #0
 800655c:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 800655e:	4b06      	ldr	r3, [pc, #24]	; (8006578 <inTIM4+0x30>)
 8006560:	f242 7210 	movw	r2, #10000	; 0x2710
 8006564:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 8006566:	4b04      	ldr	r3, [pc, #16]	; (8006578 <inTIM4+0x30>)
 8006568:	220a      	movs	r2, #10
 800656a:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 800656c:	4802      	ldr	r0, [pc, #8]	; (8006578 <inTIM4+0x30>)
 800656e:	f000 f807 	bl	8006580 <BasicTimer_Config>

}
 8006572:	bf00      	nop
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000304 	.word	0x20000304
 800657c:	40000800 	.word	0x40000800

08006580 <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8006588:	2300      	movs	r3, #0
 800658a:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 800658c:	2300      	movs	r3, #0
 800658e:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006590:	b672      	cpsid	i
}
 8006592:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a85      	ldr	r2, [pc, #532]	; (80067b0 <BasicTimer_Config+0x230>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d106      	bne.n	80065ac <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800659e:	4b85      	ldr	r3, [pc, #532]	; (80067b4 <BasicTimer_Config+0x234>)
 80065a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a2:	4a84      	ldr	r2, [pc, #528]	; (80067b4 <BasicTimer_Config+0x234>)
 80065a4:	f043 0301 	orr.w	r3, r3, #1
 80065a8:	6453      	str	r3, [r2, #68]	; 0x44
 80065aa:	e030      	b.n	800660e <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b4:	d106      	bne.n	80065c4 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80065b6:	4b7f      	ldr	r3, [pc, #508]	; (80067b4 <BasicTimer_Config+0x234>)
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	4a7e      	ldr	r2, [pc, #504]	; (80067b4 <BasicTimer_Config+0x234>)
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	6413      	str	r3, [r2, #64]	; 0x40
 80065c2:	e024      	b.n	800660e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a7b      	ldr	r2, [pc, #492]	; (80067b8 <BasicTimer_Config+0x238>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d106      	bne.n	80065dc <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80065ce:	4b79      	ldr	r3, [pc, #484]	; (80067b4 <BasicTimer_Config+0x234>)
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	4a78      	ldr	r2, [pc, #480]	; (80067b4 <BasicTimer_Config+0x234>)
 80065d4:	f043 0302 	orr.w	r3, r3, #2
 80065d8:	6413      	str	r3, [r2, #64]	; 0x40
 80065da:	e018      	b.n	800660e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a76      	ldr	r2, [pc, #472]	; (80067bc <BasicTimer_Config+0x23c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d106      	bne.n	80065f4 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80065e6:	4b73      	ldr	r3, [pc, #460]	; (80067b4 <BasicTimer_Config+0x234>)
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	4a72      	ldr	r2, [pc, #456]	; (80067b4 <BasicTimer_Config+0x234>)
 80065ec:	f043 0304 	orr.w	r3, r3, #4
 80065f0:	6413      	str	r3, [r2, #64]	; 0x40
 80065f2:	e00c      	b.n	800660e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a71      	ldr	r2, [pc, #452]	; (80067c0 <BasicTimer_Config+0x240>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d106      	bne.n	800660c <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80065fe:	4b6d      	ldr	r3, [pc, #436]	; (80067b4 <BasicTimer_Config+0x234>)
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	4a6c      	ldr	r2, [pc, #432]	; (80067b4 <BasicTimer_Config+0x234>)
 8006604:	f043 0308 	orr.w	r3, r3, #8
 8006608:	6413      	str	r3, [r2, #64]	; 0x40
 800660a:	e000      	b.n	800660e <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 800660c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800661c:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6892      	ldr	r2, [r2, #8]
 8006626:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	791b      	ldrb	r3, [r3, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	f040 80d3 	bne.w	80067d8 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0210 	bic.w	r2, r2, #16
 8006640:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2ba0      	cmp	r3, #160	; 0xa0
 800664c:	d022      	beq.n	8006694 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2bc8      	cmp	r3, #200	; 0xc8
 8006652:	d01f      	beq.n	8006694 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800665a:	d01b      	beq.n	8006694 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006662:	d017      	beq.n	8006694 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800666a:	d013      	beq.n	8006694 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8006672:	d00f      	beq.n	8006694 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800667a:	d00b      	beq.n	8006694 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8006682:	d007      	beq.n	8006694 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800668a:	d003      	beq.n	8006694 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006692:	d10b      	bne.n	80066ac <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	2264      	movs	r2, #100	; 0x64
 800669a:	fb02 f303 	mul.w	r3, r2, r3
 800669e:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	3a01      	subs	r2, #1
 80066a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80066aa:	e07c      	b.n	80067a6 <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80066b2:	d029      	beq.n	8006708 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80066ba:	d025      	beq.n	8006708 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d020      	beq.n	8006708 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80066cc:	d01c      	beq.n	8006708 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d017      	beq.n	8006708 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f241 7270 	movw	r2, #6000	; 0x1770
 80066de:	4293      	cmp	r3, r2
 80066e0:	d012      	beq.n	8006708 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f641 3258 	movw	r2, #7000	; 0x1b58
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00d      	beq.n	8006708 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80066f2:	d009      	beq.n	8006708 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f242 3228 	movw	r2, #9000	; 0x2328
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d004      	beq.n	8006708 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f242 7210 	movw	r2, #10000	; 0x2710
 8006704:	4293      	cmp	r3, r2
 8006706:	d10c      	bne.n	8006722 <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68da      	ldr	r2, [r3, #12]
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	3a01      	subs	r2, #1
 800671e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006720:	e041      	b.n	80067a6 <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8006728:	d028      	beq.n	800677c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006730:	4293      	cmp	r3, r2
 8006732:	d023      	beq.n	800677c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f247 5230 	movw	r2, #30000	; 0x7530
 800673a:	4293      	cmp	r3, r2
 800673c:	d01e      	beq.n	800677c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f649 4240 	movw	r2, #40000	; 0x9c40
 8006744:	4293      	cmp	r3, r2
 8006746:	d019      	beq.n	800677c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800674e:	4293      	cmp	r3, r2
 8006750:	d014      	beq.n	800677c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006758:	4293      	cmp	r3, r2
 800675a:	d00f      	beq.n	800677c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4a19      	ldr	r2, [pc, #100]	; (80067c4 <BasicTimer_Config+0x244>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d00b      	beq.n	800677c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	4a18      	ldr	r2, [pc, #96]	; (80067c8 <BasicTimer_Config+0x248>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d007      	beq.n	800677c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	4a17      	ldr	r2, [pc, #92]	; (80067cc <BasicTimer_Config+0x24c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d003      	beq.n	800677c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	4a16      	ldr	r2, [pc, #88]	; (80067d0 <BasicTimer_Config+0x250>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d108      	bne.n	800678e <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	3a01      	subs	r2, #1
 800678a:	62da      	str	r2, [r3, #44]	; 0x2c
 800678c:	e00b      	b.n	80067a6 <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	4a10      	ldr	r2, [pc, #64]	; (80067d4 <BasicTimer_Config+0x254>)
 8006794:	fba2 2303 	umull	r2, r3, r2, r3
 8006798:	08db      	lsrs	r3, r3, #3
 800679a:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	3a01      	subs	r2, #1
 80067a4:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2200      	movs	r2, #0
 80067ac:	625a      	str	r2, [r3, #36]	; 0x24
 80067ae:	e027      	b.n	8006800 <BasicTimer_Config+0x280>
 80067b0:	40010000 	.word	0x40010000
 80067b4:	40023800 	.word	0x40023800
 80067b8:	40000400 	.word	0x40000400
 80067bc:	40000800 	.word	0x40000800
 80067c0:	40000c00 	.word	0x40000c00
 80067c4:	00011170 	.word	0x00011170
 80067c8:	00013880 	.word	0x00013880
 80067cc:	00015f90 	.word	0x00015f90
 80067d0:	000186a0 	.word	0x000186a0
 80067d4:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0210 	orr.w	r2, r2, #16
 80067e6:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3a01      	subs	r2, #1
 80067f2:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3a01      	subs	r2, #1
 80067fe:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	7c1b      	ldrb	r3, [r3, #16]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d12d      	bne.n	8006864 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006820:	d103      	bne.n	800682a <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 8006822:	201c      	movs	r0, #28
 8006824:	f7ff fe48 	bl	80064b8 <__NVIC_EnableIRQ>
 8006828:	e024      	b.n	8006874 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a14      	ldr	r2, [pc, #80]	; (8006880 <BasicTimer_Config+0x300>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d103      	bne.n	800683c <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8006834:	201d      	movs	r0, #29
 8006836:	f7ff fe3f 	bl	80064b8 <__NVIC_EnableIRQ>
 800683a:	e01b      	b.n	8006874 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a10      	ldr	r2, [pc, #64]	; (8006884 <BasicTimer_Config+0x304>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d103      	bne.n	800684e <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 8006846:	201e      	movs	r0, #30
 8006848:	f7ff fe36 	bl	80064b8 <__NVIC_EnableIRQ>
 800684c:	e012      	b.n	8006874 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a0d      	ldr	r2, [pc, #52]	; (8006888 <BasicTimer_Config+0x308>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d103      	bne.n	8006860 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 8006858:	2032      	movs	r0, #50	; 0x32
 800685a:	f7ff fe2d 	bl	80064b8 <__NVIC_EnableIRQ>
 800685e:	e009      	b.n	8006874 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 8006860:	bf00      	nop
 8006862:	e007      	b.n	8006874 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0201 	bic.w	r2, r2, #1
 8006872:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8006874:	b662      	cpsie	i
}
 8006876:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8006878:	bf00      	nop
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	40000400 	.word	0x40000400
 8006884:	40000800 	.word	0x40000800
 8006888:	40000c00 	.word	0x40000c00

0800688c <delay_ms>:

void delay_ms(uint16_t time_to_wait_ms){
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	4603      	mov	r3, r0
 8006894:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 8006896:	4818      	ldr	r0, [pc, #96]	; (80068f8 <delay_ms+0x6c>)
 8006898:	f000 fab8 	bl	8006e0c <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 800689c:	88fb      	ldrh	r3, [r7, #6]
 800689e:	461a      	mov	r2, r3
 80068a0:	0092      	lsls	r2, r2, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 80068b0:	e016      	b.n	80068e0 <delay_ms+0x54>
		if (handlerTIM4_time.ptrTIMx->SR & TIM_SR_UIF)  {
 80068b2:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <delay_ms+0x6c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00f      	beq.n	80068e0 <delay_ms+0x54>
			CNT += handlerTIM4_time.ptrTIMx->ARR + 1;
 80068c0:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <delay_ms+0x6c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	3301      	adds	r3, #1
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	89fb      	ldrh	r3, [r7, #14]
 80068cc:	4413      	add	r3, r2
 80068ce:	81fb      	strh	r3, [r7, #14]
			handlerTIM4_time.ptrTIMx->SR &= ~TIM_SR_UIF;
 80068d0:	4b09      	ldr	r3, [pc, #36]	; (80068f8 <delay_ms+0x6c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691a      	ldr	r2, [r3, #16]
 80068d6:	4b08      	ldr	r3, [pc, #32]	; (80068f8 <delay_ms+0x6c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0201 	bic.w	r2, r2, #1
 80068de:	611a      	str	r2, [r3, #16]
	while (CNT < limit){
 80068e0:	89fa      	ldrh	r2, [r7, #14]
 80068e2:	89bb      	ldrh	r3, [r7, #12]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d3e4      	bcc.n	80068b2 <delay_ms+0x26>
		}
	}
	stopTimer(&handlerTIM4_time);
 80068e8:	4803      	ldr	r0, [pc, #12]	; (80068f8 <delay_ms+0x6c>)
 80068ea:	f000 faa1 	bl	8006e30 <stopTimer>
}
 80068ee:	bf00      	nop
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20000304 	.word	0x20000304

080068fc <TIM_SetPriority>:


void TIM_SetPriority (BasicTimer_Handler_t *ptrBTimerHandler, uint8_t newPriority){
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8006908:	b672      	cpsid	i
}
 800690a:	bf00      	nop

	__disable_irq();

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006914:	d105      	bne.n	8006922 <TIM_SetPriority+0x26>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_SetPriority(TIM2_IRQn, newPriority);
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	4619      	mov	r1, r3
 800691a:	201c      	movs	r0, #28
 800691c:	f7ff fdea 	bl	80064f4 <__NVIC_SetPriority>
 8006920:	e021      	b.n	8006966 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a13      	ldr	r2, [pc, #76]	; (8006974 <TIM_SetPriority+0x78>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d105      	bne.n	8006938 <TIM_SetPriority+0x3c>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_SetPriority(TIM3_IRQn, newPriority);
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	4619      	mov	r1, r3
 8006930:	201d      	movs	r0, #29
 8006932:	f7ff fddf 	bl	80064f4 <__NVIC_SetPriority>
 8006936:	e016      	b.n	8006966 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a0e      	ldr	r2, [pc, #56]	; (8006978 <TIM_SetPriority+0x7c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d105      	bne.n	800694e <TIM_SetPriority+0x52>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_SetPriority(TIM4_IRQn, newPriority);
 8006942:	78fb      	ldrb	r3, [r7, #3]
 8006944:	4619      	mov	r1, r3
 8006946:	201e      	movs	r0, #30
 8006948:	f7ff fdd4 	bl	80064f4 <__NVIC_SetPriority>
 800694c:	e00b      	b.n	8006966 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a0a      	ldr	r2, [pc, #40]	; (800697c <TIM_SetPriority+0x80>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d105      	bne.n	8006964 <TIM_SetPriority+0x68>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_SetPriority(TIM5_IRQn, newPriority);
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	4619      	mov	r1, r3
 800695c:	2032      	movs	r0, #50	; 0x32
 800695e:	f7ff fdc9 	bl	80064f4 <__NVIC_SetPriority>
 8006962:	e000      	b.n	8006966 <TIM_SetPriority+0x6a>
	}
	else{
		__NOP();
 8006964:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8006966:	b662      	cpsie	i
}
 8006968:	bf00      	nop
	}

	__enable_irq();

}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40000400 	.word	0x40000400
 8006978:	40000800 	.word	0x40000800
 800697c:	40000c00 	.word	0x40000c00

08006980 <BasicTimer3_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void){
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006984:	bf00      	nop
}
 8006986:	bf00      	nop
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006994:	bf00      	nop
}
 8006996:	bf00      	nop
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80069a4:	bf00      	nop
}
 80069a6:	bf00      	nop
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 80069b0:	b480      	push	{r7}
 80069b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80069b4:	bf00      	nop
}
 80069b6:	bf00      	nop
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80069c4:	bf00      	nop
}
 80069c6:	bf00      	nop
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80069d4:	bf00      	nop
}
 80069d6:	bf00      	nop
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80069e4:	bf00      	nop
}
 80069e6:	bf00      	nop
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80069f4:	bf00      	nop
}
 80069f6:	bf00      	nop
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006a04:	bf00      	nop
}
 8006a06:	bf00      	nop
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006a14:	bf00      	nop
}
 8006a16:	bf00      	nop
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006a24:	bf00      	nop
}
 8006a26:	bf00      	nop
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006a34:	bf00      	nop
}
 8006a36:	bf00      	nop
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006a44:	bf00      	nop
}
 8006a46:	bf00      	nop
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006a54:	bf00      	nop
}
 8006a56:	bf00      	nop
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8006a60:	b480      	push	{r7}
 8006a62:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006a64:	bf00      	nop
}
 8006a66:	bf00      	nop
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8006a70:	b480      	push	{r7}
 8006a72:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006a74:	bf00      	nop
}
 8006a76:	bf00      	nop
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8006a80:	b480      	push	{r7}
 8006a82:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006a84:	bf00      	nop
}
 8006a86:	bf00      	nop
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8006a90:	b480      	push	{r7}
 8006a92:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006a94:	bf00      	nop
}
 8006a96:	bf00      	nop
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8006aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00a      	beq.n	8006ac8 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8006ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006abc:	f023 0301 	bic.w	r3, r3, #1
 8006ac0:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 8006ac2:	f7fb f90f 	bl	8001ce4 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 8006ac6:	e066      	b.n	8006b96 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8006ac8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d012      	beq.n	8006afc <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 8006ad6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006ae0:	f023 0302 	bic.w	r3, r3, #2
 8006ae4:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 8006ae6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006af4:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 8006af6:	f7ff ff5b 	bl	80069b0 <Capture_TIM2_Ch1_Callback>
}
 8006afa:	e04c      	b.n	8006b96 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8006afc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d012      	beq.n	8006b30 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 8006b0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006b14:	f023 0304 	bic.w	r3, r3, #4
 8006b18:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 8006b1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006b24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b28:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 8006b2a:	f7ff ff49 	bl	80069c0 <Capture_TIM2_Ch2_Callback>
}
 8006b2e:	e032      	b.n	8006b96 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8006b30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d012      	beq.n	8006b64 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 8006b3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006b48:	f023 0308 	bic.w	r3, r3, #8
 8006b4c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 8006b4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006b58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b5c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 8006b5e:	f7ff ff37 	bl	80069d0 <Capture_TIM2_Ch3_Callback>
}
 8006b62:	e018      	b.n	8006b96 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8006b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f003 0310 	and.w	r3, r3, #16
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d011      	beq.n	8006b96 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8006b72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006b7c:	f023 0310 	bic.w	r3, r3, #16
 8006b80:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8006b82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b90:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8006b92:	f7ff ff25 	bl	80069e0 <Capture_TIM2_Ch4_Callback>
}
 8006b96:	bf00      	nop
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8006ba0:	4b31      	ldr	r3, [pc, #196]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d008      	beq.n	8006bbe <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 8006bac:	4b2e      	ldr	r3, [pc, #184]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	4a2d      	ldr	r2, [pc, #180]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006bb2:	f023 0301 	bic.w	r3, r3, #1
 8006bb6:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8006bb8:	f7ff fee2 	bl	8006980 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 8006bbc:	e052      	b.n	8006c64 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 8006bbe:	4b2a      	ldr	r3, [pc, #168]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00e      	beq.n	8006be8 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 8006bca:	4b27      	ldr	r3, [pc, #156]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	4a26      	ldr	r2, [pc, #152]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006bd0:	f023 0302 	bic.w	r3, r3, #2
 8006bd4:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 8006bd6:	4b24      	ldr	r3, [pc, #144]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	4a23      	ldr	r2, [pc, #140]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006be0:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 8006be2:	f7ff ff05 	bl	80069f0 <Capture_TIM3_Ch1_Callback>
}
 8006be6:	e03d      	b.n	8006c64 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8006be8:	4b1f      	ldr	r3, [pc, #124]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00e      	beq.n	8006c12 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8006bf4:	4b1c      	ldr	r3, [pc, #112]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	4a1b      	ldr	r2, [pc, #108]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006bfa:	f023 0304 	bic.w	r3, r3, #4
 8006bfe:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 8006c00:	4b19      	ldr	r3, [pc, #100]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	4a18      	ldr	r2, [pc, #96]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006c06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c0a:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 8006c0c:	f7ff fef8 	bl	8006a00 <Capture_TIM3_Ch2_Callback>
}
 8006c10:	e028      	b.n	8006c64 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 8006c12:	4b15      	ldr	r3, [pc, #84]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00e      	beq.n	8006c3c <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 8006c1e:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	4a11      	ldr	r2, [pc, #68]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006c24:	f023 0308 	bic.w	r3, r3, #8
 8006c28:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 8006c2a:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	4a0e      	ldr	r2, [pc, #56]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006c30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c34:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8006c36:	f7ff feeb 	bl	8006a10 <Capture_TIM3_Ch3_Callback>
}
 8006c3a:	e013      	b.n	8006c64 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 8006c3c:	4b0a      	ldr	r3, [pc, #40]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	f003 0310 	and.w	r3, r3, #16
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00d      	beq.n	8006c64 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8006c48:	4b07      	ldr	r3, [pc, #28]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	4a06      	ldr	r2, [pc, #24]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006c4e:	f023 0310 	bic.w	r3, r3, #16
 8006c52:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8006c54:	4b04      	ldr	r3, [pc, #16]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	4a03      	ldr	r2, [pc, #12]	; (8006c68 <TIM3_IRQHandler+0xcc>)
 8006c5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c5e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8006c60:	f7ff fede 	bl	8006a20 <Capture_TIM3_Ch4_Callback>
}
 8006c64:	bf00      	nop
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40000400 	.word	0x40000400

08006c6c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8006c70:	4b31      	ldr	r3, [pc, #196]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d008      	beq.n	8006c8e <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 8006c7c:	4b2e      	ldr	r3, [pc, #184]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	4a2d      	ldr	r2, [pc, #180]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8006c88:	f7ff fe82 	bl	8006990 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 8006c8c:	e052      	b.n	8006d34 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 8006c8e:	4b2a      	ldr	r3, [pc, #168]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00e      	beq.n	8006cb8 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 8006c9a:	4b27      	ldr	r3, [pc, #156]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	4a26      	ldr	r2, [pc, #152]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006ca0:	f023 0302 	bic.w	r3, r3, #2
 8006ca4:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8006ca6:	4b24      	ldr	r3, [pc, #144]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	4a23      	ldr	r2, [pc, #140]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cb0:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8006cb2:	f7ff febd 	bl	8006a30 <Capture_TIM4_Ch1_Callback>
}
 8006cb6:	e03d      	b.n	8006d34 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8006cb8:	4b1f      	ldr	r3, [pc, #124]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00e      	beq.n	8006ce2 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8006cc4:	4b1c      	ldr	r3, [pc, #112]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	4a1b      	ldr	r2, [pc, #108]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006cca:	f023 0304 	bic.w	r3, r3, #4
 8006cce:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8006cd0:	4b19      	ldr	r3, [pc, #100]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	4a18      	ldr	r2, [pc, #96]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006cd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cda:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8006cdc:	f7ff fec8 	bl	8006a70 <Capture_TIM5_Ch2_Callback>
}
 8006ce0:	e028      	b.n	8006d34 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8006ce2:	4b15      	ldr	r3, [pc, #84]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 0308 	and.w	r3, r3, #8
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00e      	beq.n	8006d0c <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 8006cee:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	4a11      	ldr	r2, [pc, #68]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006cf4:	f023 0308 	bic.w	r3, r3, #8
 8006cf8:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 8006cfa:	4b0f      	ldr	r3, [pc, #60]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	4a0e      	ldr	r2, [pc, #56]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006d00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d04:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 8006d06:	f7ff fe9b 	bl	8006a40 <Capture_TIM4_Ch3_Callback>
}
 8006d0a:	e013      	b.n	8006d34 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	f003 0310 	and.w	r3, r3, #16
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00d      	beq.n	8006d34 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8006d18:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	4a06      	ldr	r2, [pc, #24]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006d1e:	f023 0310 	bic.w	r3, r3, #16
 8006d22:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8006d24:	4b04      	ldr	r3, [pc, #16]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	4a03      	ldr	r2, [pc, #12]	; (8006d38 <TIM4_IRQHandler+0xcc>)
 8006d2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d2e:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8006d30:	f7ff fe8e 	bl	8006a50 <Capture_TIM4_Ch4_Callback>
}
 8006d34:	bf00      	nop
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40000800 	.word	0x40000800

08006d3c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8006d40:	4b31      	ldr	r3, [pc, #196]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 8006d4c:	4b2e      	ldr	r3, [pc, #184]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	4a2d      	ldr	r2, [pc, #180]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006d52:	f023 0301 	bic.w	r3, r3, #1
 8006d56:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8006d58:	f7ff fe22 	bl	80069a0 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 8006d5c:	e052      	b.n	8006e04 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 8006d5e:	4b2a      	ldr	r3, [pc, #168]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00e      	beq.n	8006d88 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 8006d6a:	4b27      	ldr	r3, [pc, #156]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	4a26      	ldr	r2, [pc, #152]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006d70:	f023 0302 	bic.w	r3, r3, #2
 8006d74:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8006d76:	4b24      	ldr	r3, [pc, #144]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	4a23      	ldr	r2, [pc, #140]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d80:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8006d82:	f7ff fe6d 	bl	8006a60 <Capture_TIM5_Ch1_Callback>
}
 8006d86:	e03d      	b.n	8006e04 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8006d88:	4b1f      	ldr	r3, [pc, #124]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00e      	beq.n	8006db2 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8006d94:	4b1c      	ldr	r3, [pc, #112]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	4a1b      	ldr	r2, [pc, #108]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006d9a:	f023 0304 	bic.w	r3, r3, #4
 8006d9e:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8006da0:	4b19      	ldr	r3, [pc, #100]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	4a18      	ldr	r2, [pc, #96]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006da6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006daa:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8006dac:	f7ff fe60 	bl	8006a70 <Capture_TIM5_Ch2_Callback>
}
 8006db0:	e028      	b.n	8006e04 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8006db2:	4b15      	ldr	r3, [pc, #84]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f003 0308 	and.w	r3, r3, #8
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00e      	beq.n	8006ddc <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 8006dbe:	4b12      	ldr	r3, [pc, #72]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	4a11      	ldr	r2, [pc, #68]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006dc4:	f023 0308 	bic.w	r3, r3, #8
 8006dc8:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 8006dca:	4b0f      	ldr	r3, [pc, #60]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	4a0e      	ldr	r2, [pc, #56]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006dd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dd4:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 8006dd6:	f7ff fe53 	bl	8006a80 <Capture_TIM5_Ch3_Callback>
}
 8006dda:	e013      	b.n	8006e04 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	f003 0310 	and.w	r3, r3, #16
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00d      	beq.n	8006e04 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8006de8:	4b07      	ldr	r3, [pc, #28]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	4a06      	ldr	r2, [pc, #24]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006dee:	f023 0310 	bic.w	r3, r3, #16
 8006df2:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8006df4:	4b04      	ldr	r3, [pc, #16]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	4a03      	ldr	r2, [pc, #12]	; (8006e08 <TIM5_IRQHandler+0xcc>)
 8006dfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dfe:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8006e00:	f7ff fe46 	bl	8006a90 <Capture_TIM5_Ch4_Callback>
}
 8006e04:	bf00      	nop
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	40000c00 	.word	0x40000c00

08006e0c <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0201 	orr.w	r2, r2, #1
 8006e22:	601a      	str	r2, [r3, #0]
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0201 	bic.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <__NVIC_EnableIRQ>:
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	db0b      	blt.n	8006e7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e66:	79fb      	ldrb	r3, [r7, #7]
 8006e68:	f003 021f 	and.w	r2, r3, #31
 8006e6c:	4907      	ldr	r1, [pc, #28]	; (8006e8c <__NVIC_EnableIRQ+0x38>)
 8006e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	2001      	movs	r0, #1
 8006e76:	fa00 f202 	lsl.w	r2, r0, r2
 8006e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006e7e:	bf00      	nop
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	e000e100 	.word	0xe000e100

08006e90 <__NVIC_SetPriority>:
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	6039      	str	r1, [r7, #0]
 8006e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	db0a      	blt.n	8006eba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	490c      	ldr	r1, [pc, #48]	; (8006edc <__NVIC_SetPriority+0x4c>)
 8006eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eae:	0112      	lsls	r2, r2, #4
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	440b      	add	r3, r1
 8006eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006eb8:	e00a      	b.n	8006ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	4908      	ldr	r1, [pc, #32]	; (8006ee0 <__NVIC_SetPriority+0x50>)
 8006ec0:	79fb      	ldrb	r3, [r7, #7]
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	3b04      	subs	r3, #4
 8006ec8:	0112      	lsls	r2, r2, #4
 8006eca:	b2d2      	uxtb	r2, r2
 8006ecc:	440b      	add	r3, r1
 8006ece:	761a      	strb	r2, [r3, #24]
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	e000e100 	.word	0xe000e100
 8006ee0:	e000ed00 	.word	0xe000ed00

08006ee4 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f001 f8bf 	bl	8008074 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 8006ef6:	4b96      	ldr	r3, [pc, #600]	; (8007150 <extInt_Config+0x26c>)
 8006ef8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006efc:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	791b      	ldrb	r3, [r3, #4]
 8006f04:	2b0f      	cmp	r3, #15
 8006f06:	f200 85cd 	bhi.w	8007aa4 <extInt_Config+0xbc0>
 8006f0a:	a201      	add	r2, pc, #4	; (adr r2, 8006f10 <extInt_Config+0x2c>)
 8006f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f10:	08006f51 	.word	0x08006f51
 8006f14:	08007007 	.word	0x08007007
 8006f18:	080070bd 	.word	0x080070bd
 8006f1c:	08007193 	.word	0x08007193
 8006f20:	08007249 	.word	0x08007249
 8006f24:	080072f7 	.word	0x080072f7
 8006f28:	080073bd 	.word	0x080073bd
 8006f2c:	08007465 	.word	0x08007465
 8006f30:	0800750d 	.word	0x0800750d
 8006f34:	080075b5 	.word	0x080075b5
 8006f38:	0800767b 	.word	0x0800767b
 8006f3c:	08007723 	.word	0x08007723
 8006f40:	080077cb 	.word	0x080077cb
 8006f44:	08007891 	.word	0x08007891
 8006f48:	08007937 	.word	0x08007937
 8006f4c:	080079df 	.word	0x080079df
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8006f50:	4b80      	ldr	r3, [pc, #512]	; (8007154 <extInt_Config+0x270>)
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	4a7f      	ldr	r2, [pc, #508]	; (8007154 <extInt_Config+0x270>)
 8006f56:	f023 030f 	bic.w	r3, r3, #15
 8006f5a:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a7d      	ldr	r2, [pc, #500]	; (8007158 <extInt_Config+0x274>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d105      	bne.n	8006f74 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8006f68:	4b7a      	ldr	r3, [pc, #488]	; (8007154 <extInt_Config+0x270>)
 8006f6a:	4a7a      	ldr	r2, [pc, #488]	; (8007154 <extInt_Config+0x270>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006f70:	f000 bd9a 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a78      	ldr	r2, [pc, #480]	; (800715c <extInt_Config+0x278>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d107      	bne.n	8006f90 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8006f80:	4b74      	ldr	r3, [pc, #464]	; (8007154 <extInt_Config+0x270>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	4a73      	ldr	r2, [pc, #460]	; (8007154 <extInt_Config+0x270>)
 8006f86:	f043 0301 	orr.w	r3, r3, #1
 8006f8a:	6093      	str	r3, [r2, #8]
					break;
 8006f8c:	f000 bd8c 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a72      	ldr	r2, [pc, #456]	; (8007160 <extInt_Config+0x27c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d107      	bne.n	8006fac <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8006f9c:	4b6d      	ldr	r3, [pc, #436]	; (8007154 <extInt_Config+0x270>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	4a6c      	ldr	r2, [pc, #432]	; (8007154 <extInt_Config+0x270>)
 8006fa2:	f043 0302 	orr.w	r3, r3, #2
 8006fa6:	6093      	str	r3, [r2, #8]
					break;
 8006fa8:	f000 bd7e 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a6c      	ldr	r2, [pc, #432]	; (8007164 <extInt_Config+0x280>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d107      	bne.n	8006fc8 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8006fb8:	4b66      	ldr	r3, [pc, #408]	; (8007154 <extInt_Config+0x270>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	4a65      	ldr	r2, [pc, #404]	; (8007154 <extInt_Config+0x270>)
 8006fbe:	f043 0303 	orr.w	r3, r3, #3
 8006fc2:	6093      	str	r3, [r2, #8]
					break;
 8006fc4:	f000 bd70 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a66      	ldr	r2, [pc, #408]	; (8007168 <extInt_Config+0x284>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d107      	bne.n	8006fe4 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8006fd4:	4b5f      	ldr	r3, [pc, #380]	; (8007154 <extInt_Config+0x270>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	4a5e      	ldr	r2, [pc, #376]	; (8007154 <extInt_Config+0x270>)
 8006fda:	f043 0304 	orr.w	r3, r3, #4
 8006fde:	6093      	str	r3, [r2, #8]
					break;
 8006fe0:	f000 bd62 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a60      	ldr	r2, [pc, #384]	; (800716c <extInt_Config+0x288>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d107      	bne.n	8007000 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8006ff0:	4b58      	ldr	r3, [pc, #352]	; (8007154 <extInt_Config+0x270>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	4a57      	ldr	r2, [pc, #348]	; (8007154 <extInt_Config+0x270>)
 8006ff6:	f043 0307 	orr.w	r3, r3, #7
 8006ffa:	6093      	str	r3, [r2, #8]
					break;
 8006ffc:	f000 bd54 	b.w	8007aa8 <extInt_Config+0xbc4>
						__NOP();
 8007000:	bf00      	nop
					break;
 8007002:	f000 bd51 	b.w	8007aa8 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8007006:	4b53      	ldr	r3, [pc, #332]	; (8007154 <extInt_Config+0x270>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	4a52      	ldr	r2, [pc, #328]	; (8007154 <extInt_Config+0x270>)
 800700c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007010:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a4f      	ldr	r2, [pc, #316]	; (8007158 <extInt_Config+0x274>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d105      	bne.n	800702a <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 800701e:	4b4d      	ldr	r3, [pc, #308]	; (8007154 <extInt_Config+0x270>)
 8007020:	4a4c      	ldr	r2, [pc, #304]	; (8007154 <extInt_Config+0x270>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8007026:	f000 bd3f 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a4a      	ldr	r2, [pc, #296]	; (800715c <extInt_Config+0x278>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d107      	bne.n	8007046 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8007036:	4b47      	ldr	r3, [pc, #284]	; (8007154 <extInt_Config+0x270>)
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	4a46      	ldr	r2, [pc, #280]	; (8007154 <extInt_Config+0x270>)
 800703c:	f043 0310 	orr.w	r3, r3, #16
 8007040:	6093      	str	r3, [r2, #8]
					break;
 8007042:	f000 bd31 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a44      	ldr	r2, [pc, #272]	; (8007160 <extInt_Config+0x27c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d107      	bne.n	8007062 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8007052:	4b40      	ldr	r3, [pc, #256]	; (8007154 <extInt_Config+0x270>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	4a3f      	ldr	r2, [pc, #252]	; (8007154 <extInt_Config+0x270>)
 8007058:	f043 0320 	orr.w	r3, r3, #32
 800705c:	6093      	str	r3, [r2, #8]
					break;
 800705e:	f000 bd23 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a3e      	ldr	r2, [pc, #248]	; (8007164 <extInt_Config+0x280>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d107      	bne.n	800707e <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 800706e:	4b39      	ldr	r3, [pc, #228]	; (8007154 <extInt_Config+0x270>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	4a38      	ldr	r2, [pc, #224]	; (8007154 <extInt_Config+0x270>)
 8007074:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007078:	6093      	str	r3, [r2, #8]
					break;
 800707a:	f000 bd15 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a38      	ldr	r2, [pc, #224]	; (8007168 <extInt_Config+0x284>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d107      	bne.n	800709a <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800708a:	4b32      	ldr	r3, [pc, #200]	; (8007154 <extInt_Config+0x270>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	4a31      	ldr	r2, [pc, #196]	; (8007154 <extInt_Config+0x270>)
 8007090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007094:	6093      	str	r3, [r2, #8]
					break;
 8007096:	f000 bd07 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a32      	ldr	r2, [pc, #200]	; (800716c <extInt_Config+0x288>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d107      	bne.n	80070b6 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 80070a6:	4b2b      	ldr	r3, [pc, #172]	; (8007154 <extInt_Config+0x270>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	4a2a      	ldr	r2, [pc, #168]	; (8007154 <extInt_Config+0x270>)
 80070ac:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80070b0:	6093      	str	r3, [r2, #8]
					break;
 80070b2:	f000 bcf9 	b.w	8007aa8 <extInt_Config+0xbc4>
						__NOP();
 80070b6:	bf00      	nop
					break;
 80070b8:	f000 bcf6 	b.w	8007aa8 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 80070bc:	4b25      	ldr	r3, [pc, #148]	; (8007154 <extInt_Config+0x270>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	4a24      	ldr	r2, [pc, #144]	; (8007154 <extInt_Config+0x270>)
 80070c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80070c6:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a22      	ldr	r2, [pc, #136]	; (8007158 <extInt_Config+0x274>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d105      	bne.n	80070e0 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 80070d4:	4b1f      	ldr	r3, [pc, #124]	; (8007154 <extInt_Config+0x270>)
 80070d6:	4a1f      	ldr	r2, [pc, #124]	; (8007154 <extInt_Config+0x270>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80070dc:	f000 bce4 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1d      	ldr	r2, [pc, #116]	; (800715c <extInt_Config+0x278>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d107      	bne.n	80070fc <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 80070ec:	4b19      	ldr	r3, [pc, #100]	; (8007154 <extInt_Config+0x270>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	4a18      	ldr	r2, [pc, #96]	; (8007154 <extInt_Config+0x270>)
 80070f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070f6:	6093      	str	r3, [r2, #8]
					break;
 80070f8:	f000 bcd6 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a17      	ldr	r2, [pc, #92]	; (8007160 <extInt_Config+0x27c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d107      	bne.n	8007118 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8007108:	4b12      	ldr	r3, [pc, #72]	; (8007154 <extInt_Config+0x270>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	4a11      	ldr	r2, [pc, #68]	; (8007154 <extInt_Config+0x270>)
 800710e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007112:	6093      	str	r3, [r2, #8]
					break;
 8007114:	f000 bcc8 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a11      	ldr	r2, [pc, #68]	; (8007164 <extInt_Config+0x280>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d107      	bne.n	8007134 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8007124:	4b0b      	ldr	r3, [pc, #44]	; (8007154 <extInt_Config+0x270>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	4a0a      	ldr	r2, [pc, #40]	; (8007154 <extInt_Config+0x270>)
 800712a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800712e:	6093      	str	r3, [r2, #8]
					break;
 8007130:	f000 bcba 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a0b      	ldr	r2, [pc, #44]	; (8007168 <extInt_Config+0x284>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d117      	bne.n	8007170 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8007140:	4b04      	ldr	r3, [pc, #16]	; (8007154 <extInt_Config+0x270>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	4a03      	ldr	r2, [pc, #12]	; (8007154 <extInt_Config+0x270>)
 8007146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800714a:	6093      	str	r3, [r2, #8]
					break;
 800714c:	f000 bcac 	b.w	8007aa8 <extInt_Config+0xbc4>
 8007150:	40023800 	.word	0x40023800
 8007154:	40013800 	.word	0x40013800
 8007158:	40020000 	.word	0x40020000
 800715c:	40020400 	.word	0x40020400
 8007160:	40020800 	.word	0x40020800
 8007164:	40020c00 	.word	0x40020c00
 8007168:	40021000 	.word	0x40021000
 800716c:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a8a      	ldr	r2, [pc, #552]	; (80073a0 <extInt_Config+0x4bc>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d107      	bne.n	800718c <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 800717c:	4b89      	ldr	r3, [pc, #548]	; (80073a4 <extInt_Config+0x4c0>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	4a88      	ldr	r2, [pc, #544]	; (80073a4 <extInt_Config+0x4c0>)
 8007182:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007186:	6093      	str	r3, [r2, #8]
					break;
 8007188:	f000 bc8e 	b.w	8007aa8 <extInt_Config+0xbc4>
						__NOP();
 800718c:	bf00      	nop
					break;
 800718e:	f000 bc8b 	b.w	8007aa8 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8007192:	4b84      	ldr	r3, [pc, #528]	; (80073a4 <extInt_Config+0x4c0>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	4a83      	ldr	r2, [pc, #524]	; (80073a4 <extInt_Config+0x4c0>)
 8007198:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800719c:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a80      	ldr	r2, [pc, #512]	; (80073a8 <extInt_Config+0x4c4>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d105      	bne.n	80071b6 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 80071aa:	4b7e      	ldr	r3, [pc, #504]	; (80073a4 <extInt_Config+0x4c0>)
 80071ac:	4a7d      	ldr	r2, [pc, #500]	; (80073a4 <extInt_Config+0x4c0>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80071b2:	f000 bc79 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a7b      	ldr	r2, [pc, #492]	; (80073ac <extInt_Config+0x4c8>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d107      	bne.n	80071d2 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 80071c2:	4b78      	ldr	r3, [pc, #480]	; (80073a4 <extInt_Config+0x4c0>)
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	4a77      	ldr	r2, [pc, #476]	; (80073a4 <extInt_Config+0x4c0>)
 80071c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071cc:	6093      	str	r3, [r2, #8]
					break;
 80071ce:	f000 bc6b 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a75      	ldr	r2, [pc, #468]	; (80073b0 <extInt_Config+0x4cc>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d107      	bne.n	80071ee <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 80071de:	4b71      	ldr	r3, [pc, #452]	; (80073a4 <extInt_Config+0x4c0>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	4a70      	ldr	r2, [pc, #448]	; (80073a4 <extInt_Config+0x4c0>)
 80071e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80071e8:	6093      	str	r3, [r2, #8]
					break;
 80071ea:	f000 bc5d 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a6f      	ldr	r2, [pc, #444]	; (80073b4 <extInt_Config+0x4d0>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d107      	bne.n	800720a <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 80071fa:	4b6a      	ldr	r3, [pc, #424]	; (80073a4 <extInt_Config+0x4c0>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	4a69      	ldr	r2, [pc, #420]	; (80073a4 <extInt_Config+0x4c0>)
 8007200:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8007204:	6093      	str	r3, [r2, #8]
					break;
 8007206:	f000 bc4f 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a69      	ldr	r2, [pc, #420]	; (80073b8 <extInt_Config+0x4d4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d107      	bne.n	8007226 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8007216:	4b63      	ldr	r3, [pc, #396]	; (80073a4 <extInt_Config+0x4c0>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	4a62      	ldr	r2, [pc, #392]	; (80073a4 <extInt_Config+0x4c0>)
 800721c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007220:	6093      	str	r3, [r2, #8]
					break;
 8007222:	f000 bc41 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a5c      	ldr	r2, [pc, #368]	; (80073a0 <extInt_Config+0x4bc>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d107      	bne.n	8007242 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8007232:	4b5c      	ldr	r3, [pc, #368]	; (80073a4 <extInt_Config+0x4c0>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	4a5b      	ldr	r2, [pc, #364]	; (80073a4 <extInt_Config+0x4c0>)
 8007238:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800723c:	6093      	str	r3, [r2, #8]
					break;
 800723e:	f000 bc33 	b.w	8007aa8 <extInt_Config+0xbc4>
						__NOP();
 8007242:	bf00      	nop
					break;
 8007244:	f000 bc30 	b.w	8007aa8 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8007248:	4b56      	ldr	r3, [pc, #344]	; (80073a4 <extInt_Config+0x4c0>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	4a55      	ldr	r2, [pc, #340]	; (80073a4 <extInt_Config+0x4c0>)
 800724e:	f023 030f 	bic.w	r3, r3, #15
 8007252:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a53      	ldr	r2, [pc, #332]	; (80073a8 <extInt_Config+0x4c4>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d105      	bne.n	800726c <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8007260:	4b50      	ldr	r3, [pc, #320]	; (80073a4 <extInt_Config+0x4c0>)
 8007262:	4a50      	ldr	r2, [pc, #320]	; (80073a4 <extInt_Config+0x4c0>)
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8007268:	f000 bc1e 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a4e      	ldr	r2, [pc, #312]	; (80073ac <extInt_Config+0x4c8>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d107      	bne.n	8007288 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8007278:	4b4a      	ldr	r3, [pc, #296]	; (80073a4 <extInt_Config+0x4c0>)
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	4a49      	ldr	r2, [pc, #292]	; (80073a4 <extInt_Config+0x4c0>)
 800727e:	f043 0301 	orr.w	r3, r3, #1
 8007282:	60d3      	str	r3, [r2, #12]
					break;
 8007284:	f000 bc10 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a48      	ldr	r2, [pc, #288]	; (80073b0 <extInt_Config+0x4cc>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d107      	bne.n	80072a4 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8007294:	4b43      	ldr	r3, [pc, #268]	; (80073a4 <extInt_Config+0x4c0>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	4a42      	ldr	r2, [pc, #264]	; (80073a4 <extInt_Config+0x4c0>)
 800729a:	f043 0302 	orr.w	r3, r3, #2
 800729e:	60d3      	str	r3, [r2, #12]
					break;
 80072a0:	f000 bc02 	b.w	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a42      	ldr	r2, [pc, #264]	; (80073b4 <extInt_Config+0x4d0>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d106      	bne.n	80072be <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 80072b0:	4b3c      	ldr	r3, [pc, #240]	; (80073a4 <extInt_Config+0x4c0>)
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	4a3b      	ldr	r2, [pc, #236]	; (80073a4 <extInt_Config+0x4c0>)
 80072b6:	f043 0303 	orr.w	r3, r3, #3
 80072ba:	60d3      	str	r3, [r2, #12]
					break;
 80072bc:	e3f4      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a3c      	ldr	r2, [pc, #240]	; (80073b8 <extInt_Config+0x4d4>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d106      	bne.n	80072d8 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 80072ca:	4b36      	ldr	r3, [pc, #216]	; (80073a4 <extInt_Config+0x4c0>)
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	4a35      	ldr	r2, [pc, #212]	; (80073a4 <extInt_Config+0x4c0>)
 80072d0:	f043 0304 	orr.w	r3, r3, #4
 80072d4:	60d3      	str	r3, [r2, #12]
					break;
 80072d6:	e3e7      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a30      	ldr	r2, [pc, #192]	; (80073a0 <extInt_Config+0x4bc>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d106      	bne.n	80072f2 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 80072e4:	4b2f      	ldr	r3, [pc, #188]	; (80073a4 <extInt_Config+0x4c0>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	4a2e      	ldr	r2, [pc, #184]	; (80073a4 <extInt_Config+0x4c0>)
 80072ea:	f043 0307 	orr.w	r3, r3, #7
 80072ee:	60d3      	str	r3, [r2, #12]
					break;
 80072f0:	e3da      	b.n	8007aa8 <extInt_Config+0xbc4>
						__NOP();
 80072f2:	bf00      	nop
					break;
 80072f4:	e3d8      	b.n	8007aa8 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 80072f6:	4b2b      	ldr	r3, [pc, #172]	; (80073a4 <extInt_Config+0x4c0>)
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	4a2a      	ldr	r2, [pc, #168]	; (80073a4 <extInt_Config+0x4c0>)
 80072fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007300:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a27      	ldr	r2, [pc, #156]	; (80073a8 <extInt_Config+0x4c4>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d104      	bne.n	8007318 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 800730e:	4b25      	ldr	r3, [pc, #148]	; (80073a4 <extInt_Config+0x4c0>)
 8007310:	4a24      	ldr	r2, [pc, #144]	; (80073a4 <extInt_Config+0x4c0>)
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8007316:	e3c7      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a23      	ldr	r2, [pc, #140]	; (80073ac <extInt_Config+0x4c8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d106      	bne.n	8007332 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8007324:	4b1f      	ldr	r3, [pc, #124]	; (80073a4 <extInt_Config+0x4c0>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	4a1e      	ldr	r2, [pc, #120]	; (80073a4 <extInt_Config+0x4c0>)
 800732a:	f043 0310 	orr.w	r3, r3, #16
 800732e:	60d3      	str	r3, [r2, #12]
					break;
 8007330:	e3ba      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a1d      	ldr	r2, [pc, #116]	; (80073b0 <extInt_Config+0x4cc>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d106      	bne.n	800734c <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 800733e:	4b19      	ldr	r3, [pc, #100]	; (80073a4 <extInt_Config+0x4c0>)
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	4a18      	ldr	r2, [pc, #96]	; (80073a4 <extInt_Config+0x4c0>)
 8007344:	f043 0320 	orr.w	r3, r3, #32
 8007348:	60d3      	str	r3, [r2, #12]
					break;
 800734a:	e3ad      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a18      	ldr	r2, [pc, #96]	; (80073b4 <extInt_Config+0x4d0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d106      	bne.n	8007366 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8007358:	4b12      	ldr	r3, [pc, #72]	; (80073a4 <extInt_Config+0x4c0>)
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	4a11      	ldr	r2, [pc, #68]	; (80073a4 <extInt_Config+0x4c0>)
 800735e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007362:	60d3      	str	r3, [r2, #12]
					break;
 8007364:	e3a0      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a12      	ldr	r2, [pc, #72]	; (80073b8 <extInt_Config+0x4d4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d106      	bne.n	8007380 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8007372:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <extInt_Config+0x4c0>)
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	4a0b      	ldr	r2, [pc, #44]	; (80073a4 <extInt_Config+0x4c0>)
 8007378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800737c:	60d3      	str	r3, [r2, #12]
					break;
 800737e:	e393      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a06      	ldr	r2, [pc, #24]	; (80073a0 <extInt_Config+0x4bc>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d106      	bne.n	800739a <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 800738c:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <extInt_Config+0x4c0>)
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	4a04      	ldr	r2, [pc, #16]	; (80073a4 <extInt_Config+0x4c0>)
 8007392:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007396:	60d3      	str	r3, [r2, #12]
					break;
 8007398:	e386      	b.n	8007aa8 <extInt_Config+0xbc4>
						__NOP();
 800739a:	bf00      	nop
					break;
 800739c:	e384      	b.n	8007aa8 <extInt_Config+0xbc4>
 800739e:	bf00      	nop
 80073a0:	40021c00 	.word	0x40021c00
 80073a4:	40013800 	.word	0x40013800
 80073a8:	40020000 	.word	0x40020000
 80073ac:	40020400 	.word	0x40020400
 80073b0:	40020800 	.word	0x40020800
 80073b4:	40020c00 	.word	0x40020c00
 80073b8:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 80073bc:	4b86      	ldr	r3, [pc, #536]	; (80075d8 <extInt_Config+0x6f4>)
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	4a85      	ldr	r2, [pc, #532]	; (80075d8 <extInt_Config+0x6f4>)
 80073c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80073c6:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a83      	ldr	r2, [pc, #524]	; (80075dc <extInt_Config+0x6f8>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d104      	bne.n	80073de <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 80073d4:	4b80      	ldr	r3, [pc, #512]	; (80075d8 <extInt_Config+0x6f4>)
 80073d6:	4a80      	ldr	r2, [pc, #512]	; (80075d8 <extInt_Config+0x6f4>)
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80073dc:	e364      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a7e      	ldr	r2, [pc, #504]	; (80075e0 <extInt_Config+0x6fc>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d106      	bne.n	80073f8 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 80073ea:	4b7b      	ldr	r3, [pc, #492]	; (80075d8 <extInt_Config+0x6f4>)
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	4a7a      	ldr	r2, [pc, #488]	; (80075d8 <extInt_Config+0x6f4>)
 80073f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073f4:	60d3      	str	r3, [r2, #12]
					break;
 80073f6:	e357      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a79      	ldr	r2, [pc, #484]	; (80075e4 <extInt_Config+0x700>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d106      	bne.n	8007412 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8007404:	4b74      	ldr	r3, [pc, #464]	; (80075d8 <extInt_Config+0x6f4>)
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	4a73      	ldr	r2, [pc, #460]	; (80075d8 <extInt_Config+0x6f4>)
 800740a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800740e:	60d3      	str	r3, [r2, #12]
					break;
 8007410:	e34a      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a73      	ldr	r2, [pc, #460]	; (80075e8 <extInt_Config+0x704>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d106      	bne.n	800742c <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800741e:	4b6e      	ldr	r3, [pc, #440]	; (80075d8 <extInt_Config+0x6f4>)
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	4a6d      	ldr	r2, [pc, #436]	; (80075d8 <extInt_Config+0x6f4>)
 8007424:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007428:	60d3      	str	r3, [r2, #12]
					break;
 800742a:	e33d      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a6e      	ldr	r2, [pc, #440]	; (80075ec <extInt_Config+0x708>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d106      	bne.n	8007446 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8007438:	4b67      	ldr	r3, [pc, #412]	; (80075d8 <extInt_Config+0x6f4>)
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	4a66      	ldr	r2, [pc, #408]	; (80075d8 <extInt_Config+0x6f4>)
 800743e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007442:	60d3      	str	r3, [r2, #12]
					break;
 8007444:	e330      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a68      	ldr	r2, [pc, #416]	; (80075f0 <extInt_Config+0x70c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d106      	bne.n	8007460 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8007452:	4b61      	ldr	r3, [pc, #388]	; (80075d8 <extInt_Config+0x6f4>)
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	4a60      	ldr	r2, [pc, #384]	; (80075d8 <extInt_Config+0x6f4>)
 8007458:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800745c:	60d3      	str	r3, [r2, #12]
					break;
 800745e:	e323      	b.n	8007aa8 <extInt_Config+0xbc4>
						__NOP();
 8007460:	bf00      	nop
					break;
 8007462:	e321      	b.n	8007aa8 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8007464:	4b5c      	ldr	r3, [pc, #368]	; (80075d8 <extInt_Config+0x6f4>)
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	4a5b      	ldr	r2, [pc, #364]	; (80075d8 <extInt_Config+0x6f4>)
 800746a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800746e:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a59      	ldr	r2, [pc, #356]	; (80075dc <extInt_Config+0x6f8>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d104      	bne.n	8007486 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 800747c:	4b56      	ldr	r3, [pc, #344]	; (80075d8 <extInt_Config+0x6f4>)
 800747e:	4a56      	ldr	r2, [pc, #344]	; (80075d8 <extInt_Config+0x6f4>)
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8007484:	e310      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a54      	ldr	r2, [pc, #336]	; (80075e0 <extInt_Config+0x6fc>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d106      	bne.n	80074a0 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8007492:	4b51      	ldr	r3, [pc, #324]	; (80075d8 <extInt_Config+0x6f4>)
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	4a50      	ldr	r2, [pc, #320]	; (80075d8 <extInt_Config+0x6f4>)
 8007498:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800749c:	60d3      	str	r3, [r2, #12]
					break;
 800749e:	e303      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a4f      	ldr	r2, [pc, #316]	; (80075e4 <extInt_Config+0x700>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d106      	bne.n	80074ba <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 80074ac:	4b4a      	ldr	r3, [pc, #296]	; (80075d8 <extInt_Config+0x6f4>)
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	4a49      	ldr	r2, [pc, #292]	; (80075d8 <extInt_Config+0x6f4>)
 80074b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80074b6:	60d3      	str	r3, [r2, #12]
					break;
 80074b8:	e2f6      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a49      	ldr	r2, [pc, #292]	; (80075e8 <extInt_Config+0x704>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d106      	bne.n	80074d4 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 80074c6:	4b44      	ldr	r3, [pc, #272]	; (80075d8 <extInt_Config+0x6f4>)
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	4a43      	ldr	r2, [pc, #268]	; (80075d8 <extInt_Config+0x6f4>)
 80074cc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80074d0:	60d3      	str	r3, [r2, #12]
					break;
 80074d2:	e2e9      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a44      	ldr	r2, [pc, #272]	; (80075ec <extInt_Config+0x708>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d106      	bne.n	80074ee <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 80074e0:	4b3d      	ldr	r3, [pc, #244]	; (80075d8 <extInt_Config+0x6f4>)
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	4a3c      	ldr	r2, [pc, #240]	; (80075d8 <extInt_Config+0x6f4>)
 80074e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074ea:	60d3      	str	r3, [r2, #12]
					break;
 80074ec:	e2dc      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a3e      	ldr	r2, [pc, #248]	; (80075f0 <extInt_Config+0x70c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d106      	bne.n	8007508 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 80074fa:	4b37      	ldr	r3, [pc, #220]	; (80075d8 <extInt_Config+0x6f4>)
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	4a36      	ldr	r2, [pc, #216]	; (80075d8 <extInt_Config+0x6f4>)
 8007500:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8007504:	60d3      	str	r3, [r2, #12]
					break;
 8007506:	e2cf      	b.n	8007aa8 <extInt_Config+0xbc4>
						__NOP();
 8007508:	bf00      	nop
					break;
 800750a:	e2cd      	b.n	8007aa8 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 800750c:	4b32      	ldr	r3, [pc, #200]	; (80075d8 <extInt_Config+0x6f4>)
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	4a31      	ldr	r2, [pc, #196]	; (80075d8 <extInt_Config+0x6f4>)
 8007512:	f023 030f 	bic.w	r3, r3, #15
 8007516:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a2f      	ldr	r2, [pc, #188]	; (80075dc <extInt_Config+0x6f8>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d104      	bne.n	800752e <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8007524:	4b2c      	ldr	r3, [pc, #176]	; (80075d8 <extInt_Config+0x6f4>)
 8007526:	4a2c      	ldr	r2, [pc, #176]	; (80075d8 <extInt_Config+0x6f4>)
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800752c:	e2bc      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a2a      	ldr	r2, [pc, #168]	; (80075e0 <extInt_Config+0x6fc>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d106      	bne.n	8007548 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800753a:	4b27      	ldr	r3, [pc, #156]	; (80075d8 <extInt_Config+0x6f4>)
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	4a26      	ldr	r2, [pc, #152]	; (80075d8 <extInt_Config+0x6f4>)
 8007540:	f043 0301 	orr.w	r3, r3, #1
 8007544:	6113      	str	r3, [r2, #16]
					break;
 8007546:	e2af      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a25      	ldr	r2, [pc, #148]	; (80075e4 <extInt_Config+0x700>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d106      	bne.n	8007562 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8007554:	4b20      	ldr	r3, [pc, #128]	; (80075d8 <extInt_Config+0x6f4>)
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	4a1f      	ldr	r2, [pc, #124]	; (80075d8 <extInt_Config+0x6f4>)
 800755a:	f043 0302 	orr.w	r3, r3, #2
 800755e:	6113      	str	r3, [r2, #16]
					break;
 8007560:	e2a2      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a1f      	ldr	r2, [pc, #124]	; (80075e8 <extInt_Config+0x704>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d106      	bne.n	800757c <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 800756e:	4b1a      	ldr	r3, [pc, #104]	; (80075d8 <extInt_Config+0x6f4>)
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	4a19      	ldr	r2, [pc, #100]	; (80075d8 <extInt_Config+0x6f4>)
 8007574:	f043 0303 	orr.w	r3, r3, #3
 8007578:	6113      	str	r3, [r2, #16]
					break;
 800757a:	e295      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a1a      	ldr	r2, [pc, #104]	; (80075ec <extInt_Config+0x708>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d106      	bne.n	8007596 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8007588:	4b13      	ldr	r3, [pc, #76]	; (80075d8 <extInt_Config+0x6f4>)
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	4a12      	ldr	r2, [pc, #72]	; (80075d8 <extInt_Config+0x6f4>)
 800758e:	f043 0304 	orr.w	r3, r3, #4
 8007592:	6113      	str	r3, [r2, #16]
					break;
 8007594:	e288      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a14      	ldr	r2, [pc, #80]	; (80075f0 <extInt_Config+0x70c>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d106      	bne.n	80075b0 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 80075a2:	4b0d      	ldr	r3, [pc, #52]	; (80075d8 <extInt_Config+0x6f4>)
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	4a0c      	ldr	r2, [pc, #48]	; (80075d8 <extInt_Config+0x6f4>)
 80075a8:	f043 0307 	orr.w	r3, r3, #7
 80075ac:	6113      	str	r3, [r2, #16]
					break;
 80075ae:	e27b      	b.n	8007aa8 <extInt_Config+0xbc4>
						__NOP();
 80075b0:	bf00      	nop
					break;
 80075b2:	e279      	b.n	8007aa8 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 80075b4:	4b08      	ldr	r3, [pc, #32]	; (80075d8 <extInt_Config+0x6f4>)
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	4a07      	ldr	r2, [pc, #28]	; (80075d8 <extInt_Config+0x6f4>)
 80075ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075be:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a05      	ldr	r2, [pc, #20]	; (80075dc <extInt_Config+0x6f8>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d113      	bne.n	80075f4 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 80075cc:	4b02      	ldr	r3, [pc, #8]	; (80075d8 <extInt_Config+0x6f4>)
 80075ce:	4a02      	ldr	r2, [pc, #8]	; (80075d8 <extInt_Config+0x6f4>)
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 80075d4:	e268      	b.n	8007aa8 <extInt_Config+0xbc4>
 80075d6:	bf00      	nop
 80075d8:	40013800 	.word	0x40013800
 80075dc:	40020000 	.word	0x40020000
 80075e0:	40020400 	.word	0x40020400
 80075e4:	40020800 	.word	0x40020800
 80075e8:	40020c00 	.word	0x40020c00
 80075ec:	40021000 	.word	0x40021000
 80075f0:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a83      	ldr	r2, [pc, #524]	; (8007808 <extInt_Config+0x924>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d106      	bne.n	800760e <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8007600:	4b82      	ldr	r3, [pc, #520]	; (800780c <extInt_Config+0x928>)
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	4a81      	ldr	r2, [pc, #516]	; (800780c <extInt_Config+0x928>)
 8007606:	f043 0310 	orr.w	r3, r3, #16
 800760a:	6113      	str	r3, [r2, #16]
					break;
 800760c:	e24c      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a7e      	ldr	r2, [pc, #504]	; (8007810 <extInt_Config+0x92c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d106      	bne.n	8007628 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800761a:	4b7c      	ldr	r3, [pc, #496]	; (800780c <extInt_Config+0x928>)
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	4a7b      	ldr	r2, [pc, #492]	; (800780c <extInt_Config+0x928>)
 8007620:	f043 0320 	orr.w	r3, r3, #32
 8007624:	6113      	str	r3, [r2, #16]
					break;
 8007626:	e23f      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a79      	ldr	r2, [pc, #484]	; (8007814 <extInt_Config+0x930>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d106      	bne.n	8007642 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8007634:	4b75      	ldr	r3, [pc, #468]	; (800780c <extInt_Config+0x928>)
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	4a74      	ldr	r2, [pc, #464]	; (800780c <extInt_Config+0x928>)
 800763a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800763e:	6113      	str	r3, [r2, #16]
					break;
 8007640:	e232      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a73      	ldr	r2, [pc, #460]	; (8007818 <extInt_Config+0x934>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d106      	bne.n	800765c <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 800764e:	4b6f      	ldr	r3, [pc, #444]	; (800780c <extInt_Config+0x928>)
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	4a6e      	ldr	r2, [pc, #440]	; (800780c <extInt_Config+0x928>)
 8007654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007658:	6113      	str	r3, [r2, #16]
					break;
 800765a:	e225      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a6e      	ldr	r2, [pc, #440]	; (800781c <extInt_Config+0x938>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d106      	bne.n	8007676 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8007668:	4b68      	ldr	r3, [pc, #416]	; (800780c <extInt_Config+0x928>)
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	4a67      	ldr	r2, [pc, #412]	; (800780c <extInt_Config+0x928>)
 800766e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007672:	6113      	str	r3, [r2, #16]
					break;
 8007674:	e218      	b.n	8007aa8 <extInt_Config+0xbc4>
						__NOP();
 8007676:	bf00      	nop
					break;
 8007678:	e216      	b.n	8007aa8 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 800767a:	4b64      	ldr	r3, [pc, #400]	; (800780c <extInt_Config+0x928>)
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	4a63      	ldr	r2, [pc, #396]	; (800780c <extInt_Config+0x928>)
 8007680:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007684:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a64      	ldr	r2, [pc, #400]	; (8007820 <extInt_Config+0x93c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d104      	bne.n	800769c <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8007692:	4b5e      	ldr	r3, [pc, #376]	; (800780c <extInt_Config+0x928>)
 8007694:	4a5d      	ldr	r2, [pc, #372]	; (800780c <extInt_Config+0x928>)
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800769a:	e205      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a59      	ldr	r2, [pc, #356]	; (8007808 <extInt_Config+0x924>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d106      	bne.n	80076b6 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 80076a8:	4b58      	ldr	r3, [pc, #352]	; (800780c <extInt_Config+0x928>)
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	4a57      	ldr	r2, [pc, #348]	; (800780c <extInt_Config+0x928>)
 80076ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076b2:	6113      	str	r3, [r2, #16]
					break;
 80076b4:	e1f8      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a54      	ldr	r2, [pc, #336]	; (8007810 <extInt_Config+0x92c>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d106      	bne.n	80076d0 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 80076c2:	4b52      	ldr	r3, [pc, #328]	; (800780c <extInt_Config+0x928>)
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	4a51      	ldr	r2, [pc, #324]	; (800780c <extInt_Config+0x928>)
 80076c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076cc:	6113      	str	r3, [r2, #16]
					break;
 80076ce:	e1eb      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a4f      	ldr	r2, [pc, #316]	; (8007814 <extInt_Config+0x930>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d106      	bne.n	80076ea <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 80076dc:	4b4b      	ldr	r3, [pc, #300]	; (800780c <extInt_Config+0x928>)
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	4a4a      	ldr	r2, [pc, #296]	; (800780c <extInt_Config+0x928>)
 80076e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80076e6:	6113      	str	r3, [r2, #16]
					break;
 80076e8:	e1de      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a49      	ldr	r2, [pc, #292]	; (8007818 <extInt_Config+0x934>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d106      	bne.n	8007704 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 80076f6:	4b45      	ldr	r3, [pc, #276]	; (800780c <extInt_Config+0x928>)
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	4a44      	ldr	r2, [pc, #272]	; (800780c <extInt_Config+0x928>)
 80076fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007700:	6113      	str	r3, [r2, #16]
					break;
 8007702:	e1d1      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a44      	ldr	r2, [pc, #272]	; (800781c <extInt_Config+0x938>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d106      	bne.n	800771e <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8007710:	4b3e      	ldr	r3, [pc, #248]	; (800780c <extInt_Config+0x928>)
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	4a3d      	ldr	r2, [pc, #244]	; (800780c <extInt_Config+0x928>)
 8007716:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800771a:	6113      	str	r3, [r2, #16]
					break;
 800771c:	e1c4      	b.n	8007aa8 <extInt_Config+0xbc4>
						__NOP();
 800771e:	bf00      	nop
					break;
 8007720:	e1c2      	b.n	8007aa8 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8007722:	4b3a      	ldr	r3, [pc, #232]	; (800780c <extInt_Config+0x928>)
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	4a39      	ldr	r2, [pc, #228]	; (800780c <extInt_Config+0x928>)
 8007728:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800772c:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a3a      	ldr	r2, [pc, #232]	; (8007820 <extInt_Config+0x93c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d104      	bne.n	8007744 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800773a:	4b34      	ldr	r3, [pc, #208]	; (800780c <extInt_Config+0x928>)
 800773c:	4a33      	ldr	r2, [pc, #204]	; (800780c <extInt_Config+0x928>)
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8007742:	e1b1      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a2f      	ldr	r2, [pc, #188]	; (8007808 <extInt_Config+0x924>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d106      	bne.n	800775e <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8007750:	4b2e      	ldr	r3, [pc, #184]	; (800780c <extInt_Config+0x928>)
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	4a2d      	ldr	r2, [pc, #180]	; (800780c <extInt_Config+0x928>)
 8007756:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800775a:	6113      	str	r3, [r2, #16]
					break;
 800775c:	e1a4      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a2a      	ldr	r2, [pc, #168]	; (8007810 <extInt_Config+0x92c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d106      	bne.n	8007778 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 800776a:	4b28      	ldr	r3, [pc, #160]	; (800780c <extInt_Config+0x928>)
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	4a27      	ldr	r2, [pc, #156]	; (800780c <extInt_Config+0x928>)
 8007770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007774:	6113      	str	r3, [r2, #16]
					break;
 8007776:	e197      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a25      	ldr	r2, [pc, #148]	; (8007814 <extInt_Config+0x930>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d106      	bne.n	8007792 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8007784:	4b21      	ldr	r3, [pc, #132]	; (800780c <extInt_Config+0x928>)
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	4a20      	ldr	r2, [pc, #128]	; (800780c <extInt_Config+0x928>)
 800778a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800778e:	6113      	str	r3, [r2, #16]
					break;
 8007790:	e18a      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1f      	ldr	r2, [pc, #124]	; (8007818 <extInt_Config+0x934>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d106      	bne.n	80077ac <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800779e:	4b1b      	ldr	r3, [pc, #108]	; (800780c <extInt_Config+0x928>)
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	4a1a      	ldr	r2, [pc, #104]	; (800780c <extInt_Config+0x928>)
 80077a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077a8:	6113      	str	r3, [r2, #16]
					break;
 80077aa:	e17d      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a1a      	ldr	r2, [pc, #104]	; (800781c <extInt_Config+0x938>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d106      	bne.n	80077c6 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 80077b8:	4b14      	ldr	r3, [pc, #80]	; (800780c <extInt_Config+0x928>)
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	4a13      	ldr	r2, [pc, #76]	; (800780c <extInt_Config+0x928>)
 80077be:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80077c2:	6113      	str	r3, [r2, #16]
					break;
 80077c4:	e170      	b.n	8007aa8 <extInt_Config+0xbc4>
						__NOP();
 80077c6:	bf00      	nop
					break;
 80077c8:	e16e      	b.n	8007aa8 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 80077ca:	4b10      	ldr	r3, [pc, #64]	; (800780c <extInt_Config+0x928>)
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	4a0f      	ldr	r2, [pc, #60]	; (800780c <extInt_Config+0x928>)
 80077d0:	f023 030f 	bic.w	r3, r3, #15
 80077d4:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a10      	ldr	r2, [pc, #64]	; (8007820 <extInt_Config+0x93c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d104      	bne.n	80077ec <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 80077e2:	4b0a      	ldr	r3, [pc, #40]	; (800780c <extInt_Config+0x928>)
 80077e4:	4a09      	ldr	r2, [pc, #36]	; (800780c <extInt_Config+0x928>)
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 80077ea:	e15d      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a05      	ldr	r2, [pc, #20]	; (8007808 <extInt_Config+0x924>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d115      	bne.n	8007824 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 80077f8:	4b04      	ldr	r3, [pc, #16]	; (800780c <extInt_Config+0x928>)
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	4a03      	ldr	r2, [pc, #12]	; (800780c <extInt_Config+0x928>)
 80077fe:	f043 0301 	orr.w	r3, r3, #1
 8007802:	6153      	str	r3, [r2, #20]
					break;
 8007804:	e150      	b.n	8007aa8 <extInt_Config+0xbc4>
 8007806:	bf00      	nop
 8007808:	40020400 	.word	0x40020400
 800780c:	40013800 	.word	0x40013800
 8007810:	40020800 	.word	0x40020800
 8007814:	40020c00 	.word	0x40020c00
 8007818:	40021000 	.word	0x40021000
 800781c:	40021c00 	.word	0x40021c00
 8007820:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a89      	ldr	r2, [pc, #548]	; (8007a50 <extInt_Config+0xb6c>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d106      	bne.n	800783e <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8007830:	4b88      	ldr	r3, [pc, #544]	; (8007a54 <extInt_Config+0xb70>)
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	4a87      	ldr	r2, [pc, #540]	; (8007a54 <extInt_Config+0xb70>)
 8007836:	f043 0302 	orr.w	r3, r3, #2
 800783a:	6153      	str	r3, [r2, #20]
					break;
 800783c:	e134      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a84      	ldr	r2, [pc, #528]	; (8007a58 <extInt_Config+0xb74>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d106      	bne.n	8007858 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800784a:	4b82      	ldr	r3, [pc, #520]	; (8007a54 <extInt_Config+0xb70>)
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	4a81      	ldr	r2, [pc, #516]	; (8007a54 <extInt_Config+0xb70>)
 8007850:	f043 0303 	orr.w	r3, r3, #3
 8007854:	6153      	str	r3, [r2, #20]
					break;
 8007856:	e127      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a7f      	ldr	r2, [pc, #508]	; (8007a5c <extInt_Config+0xb78>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d106      	bne.n	8007872 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8007864:	4b7b      	ldr	r3, [pc, #492]	; (8007a54 <extInt_Config+0xb70>)
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	4a7a      	ldr	r2, [pc, #488]	; (8007a54 <extInt_Config+0xb70>)
 800786a:	f043 0304 	orr.w	r3, r3, #4
 800786e:	6153      	str	r3, [r2, #20]
					break;
 8007870:	e11a      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a79      	ldr	r2, [pc, #484]	; (8007a60 <extInt_Config+0xb7c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d106      	bne.n	800788c <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 800787e:	4b75      	ldr	r3, [pc, #468]	; (8007a54 <extInt_Config+0xb70>)
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	4a74      	ldr	r2, [pc, #464]	; (8007a54 <extInt_Config+0xb70>)
 8007884:	f043 0307 	orr.w	r3, r3, #7
 8007888:	6153      	str	r3, [r2, #20]
					break;
 800788a:	e10d      	b.n	8007aa8 <extInt_Config+0xbc4>
						__NOP();
 800788c:	bf00      	nop
					break;
 800788e:	e10b      	b.n	8007aa8 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8007890:	4b70      	ldr	r3, [pc, #448]	; (8007a54 <extInt_Config+0xb70>)
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	4a6f      	ldr	r2, [pc, #444]	; (8007a54 <extInt_Config+0xb70>)
 8007896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800789a:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a70      	ldr	r2, [pc, #448]	; (8007a64 <extInt_Config+0xb80>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d104      	bne.n	80078b2 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 80078a8:	4b6a      	ldr	r3, [pc, #424]	; (8007a54 <extInt_Config+0xb70>)
 80078aa:	4a6a      	ldr	r2, [pc, #424]	; (8007a54 <extInt_Config+0xb70>)
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	6153      	str	r3, [r2, #20]
 80078b0:	e041      	b.n	8007936 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a6b      	ldr	r2, [pc, #428]	; (8007a68 <extInt_Config+0xb84>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d106      	bne.n	80078cc <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 80078be:	4b65      	ldr	r3, [pc, #404]	; (8007a54 <extInt_Config+0xb70>)
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	4a64      	ldr	r2, [pc, #400]	; (8007a54 <extInt_Config+0xb70>)
 80078c4:	f043 0310 	orr.w	r3, r3, #16
 80078c8:	6153      	str	r3, [r2, #20]
 80078ca:	e034      	b.n	8007936 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a5f      	ldr	r2, [pc, #380]	; (8007a50 <extInt_Config+0xb6c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d106      	bne.n	80078e6 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 80078d8:	4b5e      	ldr	r3, [pc, #376]	; (8007a54 <extInt_Config+0xb70>)
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	4a5d      	ldr	r2, [pc, #372]	; (8007a54 <extInt_Config+0xb70>)
 80078de:	f043 0320 	orr.w	r3, r3, #32
 80078e2:	6153      	str	r3, [r2, #20]
 80078e4:	e027      	b.n	8007936 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a5a      	ldr	r2, [pc, #360]	; (8007a58 <extInt_Config+0xb74>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d106      	bne.n	8007900 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 80078f2:	4b58      	ldr	r3, [pc, #352]	; (8007a54 <extInt_Config+0xb70>)
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	4a57      	ldr	r2, [pc, #348]	; (8007a54 <extInt_Config+0xb70>)
 80078f8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80078fc:	6153      	str	r3, [r2, #20]
 80078fe:	e01a      	b.n	8007936 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a55      	ldr	r2, [pc, #340]	; (8007a5c <extInt_Config+0xb78>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d106      	bne.n	800791a <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 800790c:	4b51      	ldr	r3, [pc, #324]	; (8007a54 <extInt_Config+0xb70>)
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	4a50      	ldr	r2, [pc, #320]	; (8007a54 <extInt_Config+0xb70>)
 8007912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007916:	6153      	str	r3, [r2, #20]
 8007918:	e00d      	b.n	8007936 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a4f      	ldr	r2, [pc, #316]	; (8007a60 <extInt_Config+0xb7c>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d106      	bne.n	8007934 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8007926:	4b4b      	ldr	r3, [pc, #300]	; (8007a54 <extInt_Config+0xb70>)
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	4a4a      	ldr	r2, [pc, #296]	; (8007a54 <extInt_Config+0xb70>)
 800792c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007930:	6153      	str	r3, [r2, #20]
 8007932:	e000      	b.n	8007936 <extInt_Config+0xa52>

					} else {
						__NOP();
 8007934:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8007936:	4b47      	ldr	r3, [pc, #284]	; (8007a54 <extInt_Config+0xb70>)
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	4a46      	ldr	r2, [pc, #280]	; (8007a54 <extInt_Config+0xb70>)
 800793c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007940:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a46      	ldr	r2, [pc, #280]	; (8007a64 <extInt_Config+0xb80>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d104      	bne.n	8007958 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 800794e:	4b41      	ldr	r3, [pc, #260]	; (8007a54 <extInt_Config+0xb70>)
 8007950:	4a40      	ldr	r2, [pc, #256]	; (8007a54 <extInt_Config+0xb70>)
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8007956:	e0a7      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a42      	ldr	r2, [pc, #264]	; (8007a68 <extInt_Config+0xb84>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d106      	bne.n	8007972 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8007964:	4b3b      	ldr	r3, [pc, #236]	; (8007a54 <extInt_Config+0xb70>)
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	4a3a      	ldr	r2, [pc, #232]	; (8007a54 <extInt_Config+0xb70>)
 800796a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800796e:	6153      	str	r3, [r2, #20]
					break;
 8007970:	e09a      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a35      	ldr	r2, [pc, #212]	; (8007a50 <extInt_Config+0xb6c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d106      	bne.n	800798c <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 800797e:	4b35      	ldr	r3, [pc, #212]	; (8007a54 <extInt_Config+0xb70>)
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	4a34      	ldr	r2, [pc, #208]	; (8007a54 <extInt_Config+0xb70>)
 8007984:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007988:	6153      	str	r3, [r2, #20]
					break;
 800798a:	e08d      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a31      	ldr	r2, [pc, #196]	; (8007a58 <extInt_Config+0xb74>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d106      	bne.n	80079a6 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8007998:	4b2e      	ldr	r3, [pc, #184]	; (8007a54 <extInt_Config+0xb70>)
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	4a2d      	ldr	r2, [pc, #180]	; (8007a54 <extInt_Config+0xb70>)
 800799e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80079a2:	6153      	str	r3, [r2, #20]
					break;
 80079a4:	e080      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a2b      	ldr	r2, [pc, #172]	; (8007a5c <extInt_Config+0xb78>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d106      	bne.n	80079c0 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 80079b2:	4b28      	ldr	r3, [pc, #160]	; (8007a54 <extInt_Config+0xb70>)
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	4a27      	ldr	r2, [pc, #156]	; (8007a54 <extInt_Config+0xb70>)
 80079b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079bc:	6153      	str	r3, [r2, #20]
					break;
 80079be:	e073      	b.n	8007aa8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a26      	ldr	r2, [pc, #152]	; (8007a60 <extInt_Config+0xb7c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d106      	bne.n	80079da <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 80079cc:	4b21      	ldr	r3, [pc, #132]	; (8007a54 <extInt_Config+0xb70>)
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	4a20      	ldr	r2, [pc, #128]	; (8007a54 <extInt_Config+0xb70>)
 80079d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80079d6:	6153      	str	r3, [r2, #20]
					break;
 80079d8:	e066      	b.n	8007aa8 <extInt_Config+0xbc4>
						__NOP();
 80079da:	bf00      	nop
					break;
 80079dc:	e064      	b.n	8007aa8 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 80079de:	4b1d      	ldr	r3, [pc, #116]	; (8007a54 <extInt_Config+0xb70>)
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	4a1c      	ldr	r2, [pc, #112]	; (8007a54 <extInt_Config+0xb70>)
 80079e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079e8:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a1c      	ldr	r2, [pc, #112]	; (8007a64 <extInt_Config+0xb80>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d104      	bne.n	8007a00 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 80079f6:	4b17      	ldr	r3, [pc, #92]	; (8007a54 <extInt_Config+0xb70>)
 80079f8:	4a16      	ldr	r2, [pc, #88]	; (8007a54 <extInt_Config+0xb70>)
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 80079fe:	e053      	b.n	8007aa8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a18      	ldr	r2, [pc, #96]	; (8007a68 <extInt_Config+0xb84>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d106      	bne.n	8007a1a <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8007a0c:	4b11      	ldr	r3, [pc, #68]	; (8007a54 <extInt_Config+0xb70>)
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	4a10      	ldr	r2, [pc, #64]	; (8007a54 <extInt_Config+0xb70>)
 8007a12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a16:	6153      	str	r3, [r2, #20]
						break;
 8007a18:	e046      	b.n	8007aa8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a0b      	ldr	r2, [pc, #44]	; (8007a50 <extInt_Config+0xb6c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d106      	bne.n	8007a34 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8007a26:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <extInt_Config+0xb70>)
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	4a0a      	ldr	r2, [pc, #40]	; (8007a54 <extInt_Config+0xb70>)
 8007a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007a30:	6153      	str	r3, [r2, #20]
						break;
 8007a32:	e039      	b.n	8007aa8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a07      	ldr	r2, [pc, #28]	; (8007a58 <extInt_Config+0xb74>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d115      	bne.n	8007a6c <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8007a40:	4b04      	ldr	r3, [pc, #16]	; (8007a54 <extInt_Config+0xb70>)
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	4a03      	ldr	r2, [pc, #12]	; (8007a54 <extInt_Config+0xb70>)
 8007a46:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8007a4a:	6153      	str	r3, [r2, #20]
						break;
 8007a4c:	e02c      	b.n	8007aa8 <extInt_Config+0xbc4>
 8007a4e:	bf00      	nop
 8007a50:	40020800 	.word	0x40020800
 8007a54:	40013800 	.word	0x40013800
 8007a58:	40020c00 	.word	0x40020c00
 8007a5c:	40021000 	.word	0x40021000
 8007a60:	40021c00 	.word	0x40021c00
 8007a64:	40020000 	.word	0x40020000
 8007a68:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a6c      	ldr	r2, [pc, #432]	; (8007c24 <extInt_Config+0xd40>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d106      	bne.n	8007a86 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8007a78:	4b6b      	ldr	r3, [pc, #428]	; (8007c28 <extInt_Config+0xd44>)
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	4a6a      	ldr	r2, [pc, #424]	; (8007c28 <extInt_Config+0xd44>)
 8007a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a82:	6153      	str	r3, [r2, #20]
						break;
 8007a84:	e010      	b.n	8007aa8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a67      	ldr	r2, [pc, #412]	; (8007c2c <extInt_Config+0xd48>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d106      	bne.n	8007aa0 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8007a92:	4b65      	ldr	r3, [pc, #404]	; (8007c28 <extInt_Config+0xd44>)
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	4a64      	ldr	r2, [pc, #400]	; (8007c28 <extInt_Config+0xd44>)
 8007a98:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8007a9c:	6153      	str	r3, [r2, #20]
						break;
 8007a9e:	e003      	b.n	8007aa8 <extInt_Config+0xbc4>
							__NOP();
 8007aa0:	bf00      	nop
						break;
 8007aa2:	e001      	b.n	8007aa8 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8007aa4:	bf00      	nop
						break;
 8007aa6:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	791b      	ldrb	r3, [r3, #4]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d020      	beq.n	8007af2 <extInt_Config+0xc0e>
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	dc37      	bgt.n	8007b24 <extInt_Config+0xc40>
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d002      	beq.n	8007abe <extInt_Config+0xbda>
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d00d      	beq.n	8007ad8 <extInt_Config+0xbf4>
 8007abc:	e032      	b.n	8007b24 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007abe:	4b5c      	ldr	r3, [pc, #368]	; (8007c30 <extInt_Config+0xd4c>)
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	6812      	ldr	r2, [r2, #0]
 8007ac6:	7912      	ldrb	r2, [r2, #4]
 8007ac8:	4611      	mov	r1, r2
 8007aca:	2201      	movs	r2, #1
 8007acc:	408a      	lsls	r2, r1
 8007ace:	4611      	mov	r1, r2
 8007ad0:	4a57      	ldr	r2, [pc, #348]	; (8007c30 <extInt_Config+0xd4c>)
 8007ad2:	430b      	orrs	r3, r1
 8007ad4:	60d3      	str	r3, [r2, #12]

		break;
 8007ad6:	e027      	b.n	8007b28 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007ad8:	4b55      	ldr	r3, [pc, #340]	; (8007c30 <extInt_Config+0xd4c>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6812      	ldr	r2, [r2, #0]
 8007ae0:	7912      	ldrb	r2, [r2, #4]
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	408a      	lsls	r2, r1
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4a51      	ldr	r2, [pc, #324]	; (8007c30 <extInt_Config+0xd4c>)
 8007aec:	430b      	orrs	r3, r1
 8007aee:	6093      	str	r3, [r2, #8]

		break;
 8007af0:	e01a      	b.n	8007b28 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007af2:	4b4f      	ldr	r3, [pc, #316]	; (8007c30 <extInt_Config+0xd4c>)
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6812      	ldr	r2, [r2, #0]
 8007afa:	7912      	ldrb	r2, [r2, #4]
 8007afc:	4611      	mov	r1, r2
 8007afe:	2201      	movs	r2, #1
 8007b00:	408a      	lsls	r2, r1
 8007b02:	4611      	mov	r1, r2
 8007b04:	4a4a      	ldr	r2, [pc, #296]	; (8007c30 <extInt_Config+0xd4c>)
 8007b06:	430b      	orrs	r3, r1
 8007b08:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007b0a:	4b49      	ldr	r3, [pc, #292]	; (8007c30 <extInt_Config+0xd4c>)
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	6812      	ldr	r2, [r2, #0]
 8007b12:	7912      	ldrb	r2, [r2, #4]
 8007b14:	4611      	mov	r1, r2
 8007b16:	2201      	movs	r2, #1
 8007b18:	408a      	lsls	r2, r1
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	4a44      	ldr	r2, [pc, #272]	; (8007c30 <extInt_Config+0xd4c>)
 8007b1e:	430b      	orrs	r3, r1
 8007b20:	6093      	str	r3, [r2, #8]

		break;
 8007b22:	e001      	b.n	8007b28 <extInt_Config+0xc44>

	}default :{

		__NOP();
 8007b24:	bf00      	nop
		break;
 8007b26:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8007b28:	b672      	cpsid	i
}
 8007b2a:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007b2c:	4b40      	ldr	r3, [pc, #256]	; (8007c30 <extInt_Config+0xd4c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	6812      	ldr	r2, [r2, #0]
 8007b34:	7912      	ldrb	r2, [r2, #4]
 8007b36:	4611      	mov	r1, r2
 8007b38:	2201      	movs	r2, #1
 8007b3a:	408a      	lsls	r2, r1
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	4a3c      	ldr	r2, [pc, #240]	; (8007c30 <extInt_Config+0xd4c>)
 8007b40:	430b      	orrs	r3, r1
 8007b42:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	791b      	ldrb	r3, [r3, #4]
 8007b4a:	2b0f      	cmp	r3, #15
 8007b4c:	d862      	bhi.n	8007c14 <extInt_Config+0xd30>
 8007b4e:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <extInt_Config+0xc70>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b95 	.word	0x08007b95
 8007b58:	08007b9d 	.word	0x08007b9d
 8007b5c:	08007ba5 	.word	0x08007ba5
 8007b60:	08007bad 	.word	0x08007bad
 8007b64:	08007bb5 	.word	0x08007bb5
 8007b68:	08007bbd 	.word	0x08007bbd
 8007b6c:	08007bc5 	.word	0x08007bc5
 8007b70:	08007bcd 	.word	0x08007bcd
 8007b74:	08007bd5 	.word	0x08007bd5
 8007b78:	08007bdd 	.word	0x08007bdd
 8007b7c:	08007be5 	.word	0x08007be5
 8007b80:	08007bed 	.word	0x08007bed
 8007b84:	08007bf5 	.word	0x08007bf5
 8007b88:	08007bfd 	.word	0x08007bfd
 8007b8c:	08007c05 	.word	0x08007c05
 8007b90:	08007c0d 	.word	0x08007c0d
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8007b94:	2006      	movs	r0, #6
 8007b96:	f7ff f95d 	bl	8006e54 <__NVIC_EnableIRQ>
			break;
 8007b9a:	e03d      	b.n	8007c18 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 8007b9c:	2007      	movs	r0, #7
 8007b9e:	f7ff f959 	bl	8006e54 <__NVIC_EnableIRQ>
			break;
 8007ba2:	e039      	b.n	8007c18 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8007ba4:	2008      	movs	r0, #8
 8007ba6:	f7ff f955 	bl	8006e54 <__NVIC_EnableIRQ>
			break;
 8007baa:	e035      	b.n	8007c18 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 8007bac:	2009      	movs	r0, #9
 8007bae:	f7ff f951 	bl	8006e54 <__NVIC_EnableIRQ>
			break;
 8007bb2:	e031      	b.n	8007c18 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8007bb4:	200a      	movs	r0, #10
 8007bb6:	f7ff f94d 	bl	8006e54 <__NVIC_EnableIRQ>
			break;
 8007bba:	e02d      	b.n	8007c18 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007bbc:	2017      	movs	r0, #23
 8007bbe:	f7ff f949 	bl	8006e54 <__NVIC_EnableIRQ>
			break;
 8007bc2:	e029      	b.n	8007c18 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007bc4:	2017      	movs	r0, #23
 8007bc6:	f7ff f945 	bl	8006e54 <__NVIC_EnableIRQ>
			break;
 8007bca:	e025      	b.n	8007c18 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007bcc:	2017      	movs	r0, #23
 8007bce:	f7ff f941 	bl	8006e54 <__NVIC_EnableIRQ>
			break;
 8007bd2:	e021      	b.n	8007c18 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007bd4:	2017      	movs	r0, #23
 8007bd6:	f7ff f93d 	bl	8006e54 <__NVIC_EnableIRQ>
			break;
 8007bda:	e01d      	b.n	8007c18 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007bdc:	2017      	movs	r0, #23
 8007bde:	f7ff f939 	bl	8006e54 <__NVIC_EnableIRQ>
			break;
 8007be2:	e019      	b.n	8007c18 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007be4:	2028      	movs	r0, #40	; 0x28
 8007be6:	f7ff f935 	bl	8006e54 <__NVIC_EnableIRQ>
			break;
 8007bea:	e015      	b.n	8007c18 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007bec:	2028      	movs	r0, #40	; 0x28
 8007bee:	f7ff f931 	bl	8006e54 <__NVIC_EnableIRQ>
			break;
 8007bf2:	e011      	b.n	8007c18 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007bf4:	2028      	movs	r0, #40	; 0x28
 8007bf6:	f7ff f92d 	bl	8006e54 <__NVIC_EnableIRQ>
			break;
 8007bfa:	e00d      	b.n	8007c18 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007bfc:	2028      	movs	r0, #40	; 0x28
 8007bfe:	f7ff f929 	bl	8006e54 <__NVIC_EnableIRQ>
			break;
 8007c02:	e009      	b.n	8007c18 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007c04:	2028      	movs	r0, #40	; 0x28
 8007c06:	f7ff f925 	bl	8006e54 <__NVIC_EnableIRQ>
			break;
 8007c0a:	e005      	b.n	8007c18 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007c0c:	2028      	movs	r0, #40	; 0x28
 8007c0e:	f7ff f921 	bl	8006e54 <__NVIC_EnableIRQ>
			break;
 8007c12:	e001      	b.n	8007c18 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 8007c14:	bf00      	nop
			break;
 8007c16:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8007c18:	b662      	cpsie	i
}
 8007c1a:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 8007c1c:	bf00      	nop
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	40021000 	.word	0x40021000
 8007c28:	40013800 	.word	0x40013800
 8007c2c:	40021c00 	.word	0x40021c00
 8007c30:	40013c00 	.word	0x40013c00

08007c34 <exti_Set_Priority>:

// Con esta funcion se setea la prioridad
void exti_Set_Priority (EXTI_Config_t *extiConfig, uint8_t newPriority){
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c40:	b672      	cpsid	i
}
 8007c42:	bf00      	nop

	__disable_irq();

		//Debemos patricular la interupcion en el NVIC para ello debemos hacerlo apra cada una de las posibles opciones
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	791b      	ldrb	r3, [r3, #4]
 8007c4a:	2b0f      	cmp	r3, #15
 8007c4c:	f200 8084 	bhi.w	8007d58 <exti_Set_Priority+0x124>
 8007c50:	a201      	add	r2, pc, #4	; (adr r2, 8007c58 <exti_Set_Priority+0x24>)
 8007c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c56:	bf00      	nop
 8007c58:	08007c99 	.word	0x08007c99
 8007c5c:	08007ca5 	.word	0x08007ca5
 8007c60:	08007cb1 	.word	0x08007cb1
 8007c64:	08007cbd 	.word	0x08007cbd
 8007c68:	08007cc9 	.word	0x08007cc9
 8007c6c:	08007cd5 	.word	0x08007cd5
 8007c70:	08007ce1 	.word	0x08007ce1
 8007c74:	08007ced 	.word	0x08007ced
 8007c78:	08007cf9 	.word	0x08007cf9
 8007c7c:	08007d05 	.word	0x08007d05
 8007c80:	08007d11 	.word	0x08007d11
 8007c84:	08007d1d 	.word	0x08007d1d
 8007c88:	08007d29 	.word	0x08007d29
 8007c8c:	08007d35 	.word	0x08007d35
 8007c90:	08007d41 	.word	0x08007d41
 8007c94:	08007d4d 	.word	0x08007d4d
			case 0: {
				__NVIC_SetPriority(EXTI0_IRQn, newPriority);
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	2006      	movs	r0, #6
 8007c9e:	f7ff f8f7 	bl	8006e90 <__NVIC_SetPriority>
				break;
 8007ca2:	e05b      	b.n	8007d5c <exti_Set_Priority+0x128>
			}

			case 1: {
				__NVIC_SetPriority(EXTI1_IRQn, newPriority);
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	2007      	movs	r0, #7
 8007caa:	f7ff f8f1 	bl	8006e90 <__NVIC_SetPriority>
				break;
 8007cae:	e055      	b.n	8007d5c <exti_Set_Priority+0x128>
			}
			case 2: {
				__NVIC_SetPriority(EXTI2_IRQn, newPriority);
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	2008      	movs	r0, #8
 8007cb6:	f7ff f8eb 	bl	8006e90 <__NVIC_SetPriority>
				break;
 8007cba:	e04f      	b.n	8007d5c <exti_Set_Priority+0x128>
			}
			case 3: {
				__NVIC_SetPriority(EXTI3_IRQn, newPriority);
 8007cbc:	78fb      	ldrb	r3, [r7, #3]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	2009      	movs	r0, #9
 8007cc2:	f7ff f8e5 	bl	8006e90 <__NVIC_SetPriority>
				break;
 8007cc6:	e049      	b.n	8007d5c <exti_Set_Priority+0x128>
			}
			case 4: {
				__NVIC_SetPriority(EXTI4_IRQn, newPriority);
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	200a      	movs	r0, #10
 8007cce:	f7ff f8df 	bl	8006e90 <__NVIC_SetPriority>
				break;
 8007cd2:	e043      	b.n	8007d5c <exti_Set_Priority+0x128>
			}
			case 5: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8007cd4:	78fb      	ldrb	r3, [r7, #3]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	2017      	movs	r0, #23
 8007cda:	f7ff f8d9 	bl	8006e90 <__NVIC_SetPriority>
				break;
 8007cde:	e03d      	b.n	8007d5c <exti_Set_Priority+0x128>
			}
			case 6: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	2017      	movs	r0, #23
 8007ce6:	f7ff f8d3 	bl	8006e90 <__NVIC_SetPriority>
				break;
 8007cea:	e037      	b.n	8007d5c <exti_Set_Priority+0x128>
			}
			case 7: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8007cec:	78fb      	ldrb	r3, [r7, #3]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	2017      	movs	r0, #23
 8007cf2:	f7ff f8cd 	bl	8006e90 <__NVIC_SetPriority>
				break;
 8007cf6:	e031      	b.n	8007d5c <exti_Set_Priority+0x128>
			}
			case 8: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8007cf8:	78fb      	ldrb	r3, [r7, #3]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	2017      	movs	r0, #23
 8007cfe:	f7ff f8c7 	bl	8006e90 <__NVIC_SetPriority>
				break;
 8007d02:	e02b      	b.n	8007d5c <exti_Set_Priority+0x128>
			}
			case 9: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8007d04:	78fb      	ldrb	r3, [r7, #3]
 8007d06:	4619      	mov	r1, r3
 8007d08:	2017      	movs	r0, #23
 8007d0a:	f7ff f8c1 	bl	8006e90 <__NVIC_SetPriority>
				break;
 8007d0e:	e025      	b.n	8007d5c <exti_Set_Priority+0x128>
			}
			case 10: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	4619      	mov	r1, r3
 8007d14:	2028      	movs	r0, #40	; 0x28
 8007d16:	f7ff f8bb 	bl	8006e90 <__NVIC_SetPriority>
				break;
 8007d1a:	e01f      	b.n	8007d5c <exti_Set_Priority+0x128>
			}
			case 11: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007d1c:	78fb      	ldrb	r3, [r7, #3]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	2028      	movs	r0, #40	; 0x28
 8007d22:	f7ff f8b5 	bl	8006e90 <__NVIC_SetPriority>
				break;
 8007d26:	e019      	b.n	8007d5c <exti_Set_Priority+0x128>
			}
			case 12: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007d28:	78fb      	ldrb	r3, [r7, #3]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	2028      	movs	r0, #40	; 0x28
 8007d2e:	f7ff f8af 	bl	8006e90 <__NVIC_SetPriority>
				break;
 8007d32:	e013      	b.n	8007d5c <exti_Set_Priority+0x128>
			}
			case 13: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007d34:	78fb      	ldrb	r3, [r7, #3]
 8007d36:	4619      	mov	r1, r3
 8007d38:	2028      	movs	r0, #40	; 0x28
 8007d3a:	f7ff f8a9 	bl	8006e90 <__NVIC_SetPriority>
				break;
 8007d3e:	e00d      	b.n	8007d5c <exti_Set_Priority+0x128>
			}
			case 14: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	4619      	mov	r1, r3
 8007d44:	2028      	movs	r0, #40	; 0x28
 8007d46:	f7ff f8a3 	bl	8006e90 <__NVIC_SetPriority>
				break;
 8007d4a:	e007      	b.n	8007d5c <exti_Set_Priority+0x128>
			}
			case 15: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007d4c:	78fb      	ldrb	r3, [r7, #3]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	2028      	movs	r0, #40	; 0x28
 8007d52:	f7ff f89d 	bl	8006e90 <__NVIC_SetPriority>
				break;
 8007d56:	e001      	b.n	8007d5c <exti_Set_Priority+0x128>
			}

			default: {
				__NOP();
 8007d58:	bf00      	nop
				break;
 8007d5a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8007d5c:	b662      	cpsie	i
}
 8007d5e:	bf00      	nop

		}

	__enable_irq();

}
 8007d60:	bf00      	nop
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <callback_extInt0>:

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
	__NOP();
 8007d6c:	bf00      	nop
}
 8007d6e:	bf00      	nop
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 8007d78:	b480      	push	{r7}
 8007d7a:	af00      	add	r7, sp, #0
	__NOP();
 8007d7c:	bf00      	nop
}
 8007d7e:	bf00      	nop
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 8007d88:	b480      	push	{r7}
 8007d8a:	af00      	add	r7, sp, #0
	__NOP();
 8007d8c:	bf00      	nop
}
 8007d8e:	bf00      	nop
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
	__NOP();
 8007d9c:	bf00      	nop
}
 8007d9e:	bf00      	nop
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 8007da8:	b480      	push	{r7}
 8007daa:	af00      	add	r7, sp, #0
	__NOP();
 8007dac:	bf00      	nop
}
 8007dae:	bf00      	nop
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
	__NOP();
 8007dbc:	bf00      	nop
}
 8007dbe:	bf00      	nop
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 8007dc8:	b480      	push	{r7}
 8007dca:	af00      	add	r7, sp, #0
	__NOP();
 8007dcc:	bf00      	nop
}
 8007dce:	bf00      	nop
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8007dd8:	b480      	push	{r7}
 8007dda:	af00      	add	r7, sp, #0
	__NOP();
 8007ddc:	bf00      	nop
}
 8007dde:	bf00      	nop
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8007de8:	b480      	push	{r7}
 8007dea:	af00      	add	r7, sp, #0
	__NOP();
 8007dec:	bf00      	nop
}
 8007dee:	bf00      	nop
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8007df8:	b480      	push	{r7}
 8007dfa:	af00      	add	r7, sp, #0
	__NOP();
 8007dfc:	bf00      	nop
}
 8007dfe:	bf00      	nop
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8007e08:	b480      	push	{r7}
 8007e0a:	af00      	add	r7, sp, #0
	__NOP();
 8007e0c:	bf00      	nop
}
 8007e0e:	bf00      	nop
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8007e18:	b480      	push	{r7}
 8007e1a:	af00      	add	r7, sp, #0
	__NOP();
 8007e1c:	bf00      	nop
}
 8007e1e:	bf00      	nop
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8007e28:	b480      	push	{r7}
 8007e2a:	af00      	add	r7, sp, #0
	__NOP();
 8007e2c:	bf00      	nop
}
 8007e2e:	bf00      	nop
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0
	__NOP();
 8007e3c:	bf00      	nop
}
 8007e3e:	bf00      	nop
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8007e4c:	4b07      	ldr	r3, [pc, #28]	; (8007e6c <EXTI0_IRQHandler+0x24>)
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d007      	beq.n	8007e68 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8007e58:	4b04      	ldr	r3, [pc, #16]	; (8007e6c <EXTI0_IRQHandler+0x24>)
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	4a03      	ldr	r2, [pc, #12]	; (8007e6c <EXTI0_IRQHandler+0x24>)
 8007e5e:	f043 0301 	orr.w	r3, r3, #1
 8007e62:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8007e64:	f7ff ff80 	bl	8007d68 <callback_extInt0>
	}
}
 8007e68:	bf00      	nop
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	40013c00 	.word	0x40013c00

08007e70 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8007e74:	4b07      	ldr	r3, [pc, #28]	; (8007e94 <EXTI1_IRQHandler+0x24>)
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d007      	beq.n	8007e90 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8007e80:	4b04      	ldr	r3, [pc, #16]	; (8007e94 <EXTI1_IRQHandler+0x24>)
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	4a03      	ldr	r2, [pc, #12]	; (8007e94 <EXTI1_IRQHandler+0x24>)
 8007e86:	f043 0302 	orr.w	r3, r3, #2
 8007e8a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 8007e8c:	f7f9 fe9c 	bl	8001bc8 <callback_extInt1>
	}
}
 8007e90:	bf00      	nop
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	40013c00 	.word	0x40013c00

08007e98 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 8007e9c:	4b07      	ldr	r3, [pc, #28]	; (8007ebc <EXTI2_IRQHandler+0x24>)
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d007      	beq.n	8007eb8 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8007ea8:	4b04      	ldr	r3, [pc, #16]	; (8007ebc <EXTI2_IRQHandler+0x24>)
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	4a03      	ldr	r2, [pc, #12]	; (8007ebc <EXTI2_IRQHandler+0x24>)
 8007eae:	f043 0304 	orr.w	r3, r3, #4
 8007eb2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8007eb4:	f7ff ff60 	bl	8007d78 <callback_extInt2>
	}
}
 8007eb8:	bf00      	nop
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	40013c00 	.word	0x40013c00

08007ec0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8007ec4:	4b07      	ldr	r3, [pc, #28]	; (8007ee4 <EXTI3_IRQHandler+0x24>)
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	f003 0308 	and.w	r3, r3, #8
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d007      	beq.n	8007ee0 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8007ed0:	4b04      	ldr	r3, [pc, #16]	; (8007ee4 <EXTI3_IRQHandler+0x24>)
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	4a03      	ldr	r2, [pc, #12]	; (8007ee4 <EXTI3_IRQHandler+0x24>)
 8007ed6:	f043 0308 	orr.w	r3, r3, #8
 8007eda:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8007edc:	f7f9 fe8a 	bl	8001bf4 <callback_extInt3>
	}
}
 8007ee0:	bf00      	nop
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	40013c00 	.word	0x40013c00

08007ee8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8007eec:	4b07      	ldr	r3, [pc, #28]	; (8007f0c <EXTI4_IRQHandler+0x24>)
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	f003 0310 	and.w	r3, r3, #16
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d007      	beq.n	8007f08 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8007ef8:	4b04      	ldr	r3, [pc, #16]	; (8007f0c <EXTI4_IRQHandler+0x24>)
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	4a03      	ldr	r2, [pc, #12]	; (8007f0c <EXTI4_IRQHandler+0x24>)
 8007efe:	f043 0310 	orr.w	r3, r3, #16
 8007f02:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 8007f04:	f7ff ff40 	bl	8007d88 <callback_extInt4>
	}
}
 8007f08:	bf00      	nop
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	40013c00 	.word	0x40013c00

08007f10 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 8007f14:	4b26      	ldr	r3, [pc, #152]	; (8007fb0 <EXTI9_5_IRQHandler+0xa0>)
 8007f16:	695b      	ldr	r3, [r3, #20]
 8007f18:	f003 0320 	and.w	r3, r3, #32
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d008      	beq.n	8007f32 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8007f20:	4b23      	ldr	r3, [pc, #140]	; (8007fb0 <EXTI9_5_IRQHandler+0xa0>)
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	4a22      	ldr	r2, [pc, #136]	; (8007fb0 <EXTI9_5_IRQHandler+0xa0>)
 8007f26:	f043 0320 	orr.w	r3, r3, #32
 8007f2a:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 8007f2c:	f7ff ff34 	bl	8007d98 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 8007f30:	e03c      	b.n	8007fac <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 8007f32:	4b1f      	ldr	r3, [pc, #124]	; (8007fb0 <EXTI9_5_IRQHandler+0xa0>)
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d008      	beq.n	8007f50 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8007f3e:	4b1c      	ldr	r3, [pc, #112]	; (8007fb0 <EXTI9_5_IRQHandler+0xa0>)
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	4a1b      	ldr	r2, [pc, #108]	; (8007fb0 <EXTI9_5_IRQHandler+0xa0>)
 8007f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f48:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 8007f4a:	f7ff ff2d 	bl	8007da8 <callback_extInt6>
}
 8007f4e:	e02d      	b.n	8007fac <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 8007f50:	4b17      	ldr	r3, [pc, #92]	; (8007fb0 <EXTI9_5_IRQHandler+0xa0>)
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d008      	beq.n	8007f6e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8007f5c:	4b14      	ldr	r3, [pc, #80]	; (8007fb0 <EXTI9_5_IRQHandler+0xa0>)
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	4a13      	ldr	r2, [pc, #76]	; (8007fb0 <EXTI9_5_IRQHandler+0xa0>)
 8007f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f66:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8007f68:	f7ff ff26 	bl	8007db8 <callback_extInt7>
}
 8007f6c:	e01e      	b.n	8007fac <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 8007f6e:	4b10      	ldr	r3, [pc, #64]	; (8007fb0 <EXTI9_5_IRQHandler+0xa0>)
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d008      	beq.n	8007f8c <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8007f7a:	4b0d      	ldr	r3, [pc, #52]	; (8007fb0 <EXTI9_5_IRQHandler+0xa0>)
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	4a0c      	ldr	r2, [pc, #48]	; (8007fb0 <EXTI9_5_IRQHandler+0xa0>)
 8007f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f84:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 8007f86:	f7ff ff1f 	bl	8007dc8 <callback_extInt8>
}
 8007f8a:	e00f      	b.n	8007fac <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 8007f8c:	4b08      	ldr	r3, [pc, #32]	; (8007fb0 <EXTI9_5_IRQHandler+0xa0>)
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d008      	beq.n	8007faa <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 8007f98:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <EXTI9_5_IRQHandler+0xa0>)
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	4a04      	ldr	r2, [pc, #16]	; (8007fb0 <EXTI9_5_IRQHandler+0xa0>)
 8007f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007fa2:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8007fa4:	f7ff ff18 	bl	8007dd8 <callback_extInt9>
}
 8007fa8:	e000      	b.n	8007fac <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8007faa:	bf00      	nop
}
 8007fac:	bf00      	nop
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	40013c00 	.word	0x40013c00

08007fb4 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8007fb8:	4b2d      	ldr	r3, [pc, #180]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d008      	beq.n	8007fd6 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8007fc4:	4b2a      	ldr	r3, [pc, #168]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	4a29      	ldr	r2, [pc, #164]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 8007fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007fce:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8007fd0:	f7ff ff0a 	bl	8007de8 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 8007fd4:	e049      	b.n	800806a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 8007fd6:	4b26      	ldr	r3, [pc, #152]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d008      	beq.n	8007ff4 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8007fe2:	4b23      	ldr	r3, [pc, #140]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	4a22      	ldr	r2, [pc, #136]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 8007fe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007fec:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 8007fee:	f7ff ff03 	bl	8007df8 <callback_extInt11>
}
 8007ff2:	e03a      	b.n	800806a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 8007ff4:	4b1e      	ldr	r3, [pc, #120]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 8007ff6:	695b      	ldr	r3, [r3, #20]
 8007ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d008      	beq.n	8008012 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8008000:	4b1b      	ldr	r3, [pc, #108]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	4a1a      	ldr	r2, [pc, #104]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 8008006:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800800a:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 800800c:	f7ff fefc 	bl	8007e08 <callback_extInt12>
}
 8008010:	e02b      	b.n	800806a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 8008012:	4b17      	ldr	r3, [pc, #92]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d008      	beq.n	8008030 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 800801e:	4b14      	ldr	r3, [pc, #80]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	4a13      	ldr	r2, [pc, #76]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 8008024:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008028:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 800802a:	f7ff fef5 	bl	8007e18 <callback_extInt13>
}
 800802e:	e01c      	b.n	800806a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 8008030:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 8008032:	695b      	ldr	r3, [r3, #20]
 8008034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d008      	beq.n	800804e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 800803c:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	4a0b      	ldr	r2, [pc, #44]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 8008042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008046:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8008048:	f7ff feee 	bl	8007e28 <callback_extInt14>
}
 800804c:	e00d      	b.n	800806a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 800804e:	4b08      	ldr	r3, [pc, #32]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d007      	beq.n	800806a <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 800805a:	4b05      	ldr	r3, [pc, #20]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	4a04      	ldr	r2, [pc, #16]	; (8008070 <EXTI15_10_IRQHandler+0xbc>)
 8008060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008064:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 8008066:	f7ff fee7 	bl	8007e38 <callback_extInt15>
}
 800806a:	bf00      	nop
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	40013c00 	.word	0x40013c00

08008074 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8008080:	2300      	movs	r3, #0
 8008082:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a88      	ldr	r2, [pc, #544]	; (80082ac <GPIO_Config+0x238>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d106      	bne.n	800809c <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 800808e:	4b88      	ldr	r3, [pc, #544]	; (80082b0 <GPIO_Config+0x23c>)
 8008090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008092:	4a87      	ldr	r2, [pc, #540]	; (80082b0 <GPIO_Config+0x23c>)
 8008094:	f043 0301 	orr.w	r3, r3, #1
 8008098:	6313      	str	r3, [r2, #48]	; 0x30
 800809a:	e03a      	b.n	8008112 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a84      	ldr	r2, [pc, #528]	; (80082b4 <GPIO_Config+0x240>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d106      	bne.n	80080b4 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 80080a6:	4b82      	ldr	r3, [pc, #520]	; (80082b0 <GPIO_Config+0x23c>)
 80080a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080aa:	4a81      	ldr	r2, [pc, #516]	; (80082b0 <GPIO_Config+0x23c>)
 80080ac:	f043 0302 	orr.w	r3, r3, #2
 80080b0:	6313      	str	r3, [r2, #48]	; 0x30
 80080b2:	e02e      	b.n	8008112 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a7f      	ldr	r2, [pc, #508]	; (80082b8 <GPIO_Config+0x244>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d106      	bne.n	80080cc <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 80080be:	4b7c      	ldr	r3, [pc, #496]	; (80082b0 <GPIO_Config+0x23c>)
 80080c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c2:	4a7b      	ldr	r2, [pc, #492]	; (80082b0 <GPIO_Config+0x23c>)
 80080c4:	f043 0304 	orr.w	r3, r3, #4
 80080c8:	6313      	str	r3, [r2, #48]	; 0x30
 80080ca:	e022      	b.n	8008112 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a7a      	ldr	r2, [pc, #488]	; (80082bc <GPIO_Config+0x248>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d106      	bne.n	80080e4 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 80080d6:	4b76      	ldr	r3, [pc, #472]	; (80082b0 <GPIO_Config+0x23c>)
 80080d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080da:	4a75      	ldr	r2, [pc, #468]	; (80082b0 <GPIO_Config+0x23c>)
 80080dc:	f043 0308 	orr.w	r3, r3, #8
 80080e0:	6313      	str	r3, [r2, #48]	; 0x30
 80080e2:	e016      	b.n	8008112 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a75      	ldr	r2, [pc, #468]	; (80082c0 <GPIO_Config+0x24c>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d106      	bne.n	80080fc <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 80080ee:	4b70      	ldr	r3, [pc, #448]	; (80082b0 <GPIO_Config+0x23c>)
 80080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f2:	4a6f      	ldr	r2, [pc, #444]	; (80082b0 <GPIO_Config+0x23c>)
 80080f4:	f043 0310 	orr.w	r3, r3, #16
 80080f8:	6313      	str	r3, [r2, #48]	; 0x30
 80080fa:	e00a      	b.n	8008112 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a70      	ldr	r2, [pc, #448]	; (80082c4 <GPIO_Config+0x250>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d105      	bne.n	8008112 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8008106:	4b6a      	ldr	r3, [pc, #424]	; (80082b0 <GPIO_Config+0x23c>)
 8008108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810a:	4a69      	ldr	r2, [pc, #420]	; (80082b0 <GPIO_Config+0x23c>)
 800810c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008110:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	795b      	ldrb	r3, [r3, #5]
 8008116:	2b02      	cmp	r3, #2
 8008118:	d143      	bne.n	80081a2 <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	791b      	ldrb	r3, [r3, #4]
 800811e:	2b07      	cmp	r3, #7
 8008120:	d81f      	bhi.n	8008162 <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	791b      	ldrb	r3, [r3, #4]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6a1a      	ldr	r2, [r3, #32]
 8008130:	210f      	movs	r1, #15
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	fa01 f303 	lsl.w	r3, r1, r3
 8008138:	43db      	mvns	r3, r3
 800813a:	4619      	mov	r1, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	400a      	ands	r2, r1
 8008142:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6a1a      	ldr	r2, [r3, #32]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	7a5b      	ldrb	r3, [r3, #9]
 800814e:	4619      	mov	r1, r3
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	fa01 f303 	lsl.w	r3, r1, r3
 8008156:	4619      	mov	r1, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	621a      	str	r2, [r3, #32]
 8008160:	e01f      	b.n	80081a2 <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	791b      	ldrb	r3, [r3, #4]
 8008166:	3b08      	subs	r3, #8
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008172:	210f      	movs	r1, #15
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	fa01 f303 	lsl.w	r3, r1, r3
 800817a:	43db      	mvns	r3, r3
 800817c:	4619      	mov	r1, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	400a      	ands	r2, r1
 8008184:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	7a5b      	ldrb	r3, [r3, #9]
 8008190:	4619      	mov	r1, r3
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	fa01 f303 	lsl.w	r3, r1, r3
 8008198:	4619      	mov	r1, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	430a      	orrs	r2, r1
 80081a0:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	795b      	ldrb	r3, [r3, #5]
 80081a6:	461a      	mov	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	791b      	ldrb	r3, [r3, #4]
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	fa02 f303 	lsl.w	r3, r2, r3
 80081b2:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	791b      	ldrb	r3, [r3, #4]
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	2103      	movs	r1, #3
 80081c2:	fa01 f303 	lsl.w	r3, r1, r3
 80081c6:	43db      	mvns	r3, r3
 80081c8:	4619      	mov	r1, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	400a      	ands	r2, r1
 80081d0:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6819      	ldr	r1, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	430a      	orrs	r2, r1
 80081e0:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	7a1b      	ldrb	r3, [r3, #8]
 80081e6:	461a      	mov	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	791b      	ldrb	r3, [r3, #4]
 80081ec:	fa02 f303 	lsl.w	r3, r2, r3
 80081f0:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	791b      	ldrb	r3, [r3, #4]
 80081fc:	4619      	mov	r1, r3
 80081fe:	2301      	movs	r3, #1
 8008200:	408b      	lsls	r3, r1
 8008202:	43db      	mvns	r3, r3
 8008204:	4619      	mov	r1, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	400a      	ands	r2, r1
 800820c:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6859      	ldr	r1, [r3, #4]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	430a      	orrs	r2, r1
 800821c:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	799b      	ldrb	r3, [r3, #6]
 8008222:	461a      	mov	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	791b      	ldrb	r3, [r3, #4]
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	fa02 f303 	lsl.w	r3, r2, r3
 800822e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689a      	ldr	r2, [r3, #8]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	791b      	ldrb	r3, [r3, #4]
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	2103      	movs	r1, #3
 800823e:	fa01 f303 	lsl.w	r3, r1, r3
 8008242:	43db      	mvns	r3, r3
 8008244:	4619      	mov	r1, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	400a      	ands	r2, r1
 800824c:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6899      	ldr	r1, [r3, #8]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	430a      	orrs	r2, r1
 800825c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	79db      	ldrb	r3, [r3, #7]
 8008262:	461a      	mov	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	791b      	ldrb	r3, [r3, #4]
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	fa02 f303 	lsl.w	r3, r2, r3
 800826e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	791b      	ldrb	r3, [r3, #4]
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	2103      	movs	r1, #3
 800827e:	fa01 f303 	lsl.w	r3, r1, r3
 8008282:	43db      	mvns	r3, r3
 8008284:	4619      	mov	r1, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	400a      	ands	r2, r1
 800828c:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68d9      	ldr	r1, [r3, #12]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	430a      	orrs	r2, r1
 800829c:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 800829e:	bf00      	nop
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	40020000 	.word	0x40020000
 80082b0:	40023800 	.word	0x40023800
 80082b4:	40020400 	.word	0x40020400
 80082b8:	40020800 	.word	0x40020800
 80082bc:	40020c00 	.word	0x40020c00
 80082c0:	40021000 	.word	0x40021000
 80082c4:	40021c00 	.word	0x40021c00

080082c8 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	460b      	mov	r3, r1
 80082d2:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 80082d4:	78fb      	ldrb	r3, [r7, #3]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d10d      	bne.n	80082f6 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	699a      	ldr	r2, [r3, #24]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	791b      	ldrb	r3, [r3, #4]
 80082e4:	4619      	mov	r1, r3
 80082e6:	2301      	movs	r3, #1
 80082e8:	408b      	lsls	r3, r1
 80082ea:	4619      	mov	r1, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 80082f4:	e00d      	b.n	8008312 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	699a      	ldr	r2, [r3, #24]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	791b      	ldrb	r3, [r3, #4]
 8008300:	3310      	adds	r3, #16
 8008302:	2101      	movs	r1, #1
 8008304:	fa01 f303 	lsl.w	r3, r1, r3
 8008308:	4619      	mov	r1, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	430a      	orrs	r2, r1
 8008310:	619a      	str	r2, [r3, #24]
}
 8008312:	bf00      	nop
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	460b      	mov	r3, r1
 8008328:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 800832a:	78fb      	ldrb	r3, [r7, #3]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10d      	bne.n	800834c <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699a      	ldr	r2, [r3, #24]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	791b      	ldrb	r3, [r3, #4]
 800833a:	4619      	mov	r1, r3
 800833c:	2301      	movs	r3, #1
 800833e:	408b      	lsls	r3, r1
 8008340:	4619      	mov	r1, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	430a      	orrs	r2, r1
 8008348:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 800834a:	e00d      	b.n	8008368 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	699a      	ldr	r2, [r3, #24]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	791b      	ldrb	r3, [r3, #4]
 8008356:	3310      	adds	r3, #16
 8008358:	2101      	movs	r1, #1
 800835a:	fa01 f303 	lsl.w	r3, r1, r3
 800835e:	4619      	mov	r1, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	430a      	orrs	r2, r1
 8008366:	619a      	str	r2, [r3, #24]
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 800837c:	2300      	movs	r3, #0
 800837e:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	791b      	ldrb	r3, [r3, #4]
 8008384:	461a      	mov	r2, r3
 8008386:	2301      	movs	r3, #1
 8008388:	4093      	lsls	r3, r2
 800838a:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8008394:	897b      	ldrh	r3, [r7, #10]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	4013      	ands	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	791b      	ldrb	r3, [r3, #4]
 80083a0:	461a      	mov	r2, r3
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	40d3      	lsrs	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]

	return pinValue;
 80083a8:	68fb      	ldr	r3, [r7, #12]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7ff ffd8 	bl	8008374 <GPIO_ReadPin>
 80083c4:	4603      	mov	r3, r0
 80083c6:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	bf0c      	ite	eq
 80083ce:	2301      	moveq	r3, #1
 80083d0:	2300      	movne	r3, #0
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7ff ff76 	bl	80082c8 <GPIO_WritePin>
}
 80083dc:	bf00      	nop
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <configMPUAccel>:
#include "I2CDriver.h"
#include "GPIOxDriver.h"
#include "BasicTimer.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7ff fe3b 	bl	8008074 <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff fe36 	bl	8008074 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	4618      	mov	r0, r3
 800840e:	f002 f99d 	bl	800a74c <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 8008412:	e004      	b.n	800841e <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f94f 	bl	80086b8 <WHOIAM>
 800841a:	4603      	mov	r3, r0
 800841c:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d0f7      	beq.n	8008414 <configMPUAccel+0x30>
	}


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 8008424:	216b      	movs	r1, #107	; 0x6b
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f8f1 	bl	800860e <readData>
 800842c:	4603      	mov	r3, r0
 800842e:	73bb      	strb	r3, [r7, #14]

	byte &=  ~byte;
 8008430:	2300      	movs	r3, #0
 8008432:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	461a      	mov	r2, r3
 8008438:	216b      	movs	r1, #107	; 0x6b
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f89c 	bl	8008578 <writeData>

	byte = readData(ptrMPUAccel, 0x6B);
 8008440:	216b      	movs	r1, #107	; 0x6b
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f8e3 	bl	800860e <readData>
 8008448:	4603      	mov	r3, r0
 800844a:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 800844c:	211c      	movs	r1, #28
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f8dd 	bl	800860e <readData>
 8008454:	4603      	mov	r3, r0
 8008456:	73bb      	strb	r3, [r7, #14]

		byte &= ~(0b00011000) ;
 8008458:	7bbb      	ldrb	r3, [r7, #14]
 800845a:	f023 0318 	bic.w	r3, r3, #24
 800845e:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b03      	cmp	r3, #3
 8008466:	d833      	bhi.n	80084d0 <configMPUAccel+0xec>
 8008468:	a201      	add	r2, pc, #4	; (adr r2, 8008470 <configMPUAccel+0x8c>)
 800846a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846e:	bf00      	nop
 8008470:	08008481 	.word	0x08008481
 8008474:	0800848f 	.word	0x0800848f
 8008478:	080084a5 	.word	0x080084a5
 800847c:	080084bb 	.word	0x080084bb
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	461a      	mov	r2, r3
 8008484:	211c      	movs	r1, #28
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f876 	bl	8008578 <writeData>


				break;
 800848c:	e021      	b.n	80084d2 <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 800848e:	7bbb      	ldrb	r3, [r7, #14]
 8008490:	f043 0308 	orr.w	r3, r3, #8
 8008494:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	461a      	mov	r2, r3
 800849a:	211c      	movs	r1, #28
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f86b 	bl	8008578 <writeData>


				break;
 80084a2:	e016      	b.n	80084d2 <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	f043 0310 	orr.w	r3, r3, #16
 80084aa:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	461a      	mov	r2, r3
 80084b0:	211c      	movs	r1, #28
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f860 	bl	8008578 <writeData>


				break;
 80084b8:	e00b      	b.n	80084d2 <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	f043 0318 	orr.w	r3, r3, #24
 80084c0:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
 80084c4:	461a      	mov	r2, r3
 80084c6:	211c      	movs	r1, #28
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f855 	bl	8008578 <writeData>


				break;
 80084ce:	e000      	b.n	80084d2 <configMPUAccel+0xee>
			}default:{
				break;
 80084d0:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 80084d2:	211c      	movs	r1, #28
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f89a 	bl	800860e <readData>
 80084da:	4603      	mov	r3, r0
 80084dc:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 80084de:	211b      	movs	r1, #27
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f894 	bl	800860e <readData>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	f023 0318 	bic.w	r3, r3, #24
 80084f0:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	785b      	ldrb	r3, [r3, #1]
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d832      	bhi.n	8008560 <configMPUAccel+0x17c>
 80084fa:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <configMPUAccel+0x11c>)
 80084fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008500:	08008511 	.word	0x08008511
 8008504:	0800851f 	.word	0x0800851f
 8008508:	08008535 	.word	0x08008535
 800850c:	0800854b 	.word	0x0800854b
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 8008510:	7bbb      	ldrb	r3, [r7, #14]
 8008512:	461a      	mov	r2, r3
 8008514:	211b      	movs	r1, #27
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f82e 	bl	8008578 <writeData>


				break;
 800851c:	e021      	b.n	8008562 <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 800851e:	7bbb      	ldrb	r3, [r7, #14]
 8008520:	f043 0308 	orr.w	r3, r3, #8
 8008524:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8008526:	7bbb      	ldrb	r3, [r7, #14]
 8008528:	461a      	mov	r2, r3
 800852a:	211b      	movs	r1, #27
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f823 	bl	8008578 <writeData>


				break;
 8008532:	e016      	b.n	8008562 <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 8008534:	7bbb      	ldrb	r3, [r7, #14]
 8008536:	f043 0310 	orr.w	r3, r3, #16
 800853a:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	461a      	mov	r2, r3
 8008540:	211b      	movs	r1, #27
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f818 	bl	8008578 <writeData>


				break;
 8008548:	e00b      	b.n	8008562 <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 800854a:	7bbb      	ldrb	r3, [r7, #14]
 800854c:	f043 0318 	orr.w	r3, r3, #24
 8008550:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	461a      	mov	r2, r3
 8008556:	211b      	movs	r1, #27
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f80d 	bl	8008578 <writeData>


				break;
 800855e:	e000      	b.n	8008562 <configMPUAccel+0x17e>
			}default:{
				break;
 8008560:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 8008562:	211b      	movs	r1, #27
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f852 	bl	800860e <readData>
 800856a:	4603      	mov	r3, r0
 800856c:	73bb      	strb	r3, [r7, #14]


}
 800856e:	bf00      	nop
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop

08008578 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	70fb      	strb	r3, [r7, #3]
 8008584:	4613      	mov	r3, r2
 8008586:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	695a      	ldr	r2, [r3, #20]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800859a:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f002 fa43 	bl	800aa2c <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68d8      	ldr	r0, [r3, #12]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	791b      	ldrb	r3, [r3, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	4619      	mov	r1, r3
 80085b4:	f002 faa5 	bl	800ab02 <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	78fa      	ldrb	r2, [r7, #3]
 80085be:	4611      	mov	r1, r2
 80085c0:	4618      	mov	r0, r3
 80085c2:	f002 fac6 	bl	800ab52 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80085c6:	e000      	b.n	80085ca <writeData+0x52>
		__NOP();
 80085c8:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1f6      	bne.n	80085c8 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	78ba      	ldrb	r2, [r7, #2]
 80085e0:	4611      	mov	r1, r2
 80085e2:	4618      	mov	r0, r3
 80085e4:	f002 facf 	bl	800ab86 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80085e8:	e000      	b.n	80085ec <writeData+0x74>
		__NOP();
 80085ea:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	695b      	ldr	r3, [r3, #20]
 80085f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1f6      	bne.n	80085ea <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	4618      	mov	r0, r3
 8008602:	f002 fa01 	bl	800aa08 <i2c_stopTransaction>



}
 8008606:	bf00      	nop
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 800860e:	b580      	push	{r7, lr}
 8008610:	b084      	sub	sp, #16
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	460b      	mov	r3, r1
 8008618:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 800861a:	2300      	movs	r3, #0
 800861c:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	695a      	ldr	r2, [r3, #20]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008630:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	4618      	mov	r0, r3
 8008638:	f002 f9f8 	bl	800aa2c <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68d8      	ldr	r0, [r3, #12]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	791b      	ldrb	r3, [r3, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	4619      	mov	r1, r3
 800864a:	f002 fa5a 	bl	800ab02 <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	78fa      	ldrb	r2, [r7, #3]
 8008654:	4611      	mov	r1, r2
 8008656:	4618      	mov	r0, r3
 8008658:	f002 fa7b 	bl	800ab52 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800865c:	e000      	b.n	8008660 <readData+0x52>
		__NOP();
 800865e:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1f6      	bne.n	800865e <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	4618      	mov	r0, r3
 8008676:	f002 fa0a 	bl	800aa8e <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68d8      	ldr	r0, [r3, #12]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	791b      	ldrb	r3, [r3, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	4619      	mov	r1, r3
 8008688:	f002 fa3b 	bl	800ab02 <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	4618      	mov	r0, r3
 8008692:	f002 fa24 	bl	800aade <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	4618      	mov	r0, r3
 800869c:	f002 f9b4 	bl	800aa08 <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f002 fa88 	bl	800abba <i2c_readDataByte>
 80086aa:	4603      	mov	r3, r0
 80086ac:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 80086c8:	2175      	movs	r1, #117	; 0x75
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7ff ff9f 	bl	800860e <readData>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80086da:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	085b      	lsrs	r3, r3, #1
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bf14      	ite	ne
 80086e6:	2301      	movne	r3, #1
 80086e8:	2300      	moveq	r3, #0
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	73bb      	strb	r3, [r7, #14]

	return rdy;
 80086ee:	7bbb      	ldrb	r3, [r7, #14]

}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 8008700:	2300      	movs	r3, #0
 8008702:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 8008704:	2300      	movs	r3, #0
 8008706:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 800870c:	f04f 0200 	mov.w	r2, #0
 8008710:	f04f 0300 	mov.w	r3, #0
 8008714:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 8008718:	2143      	movs	r1, #67	; 0x43
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7ff ff77 	bl	800860e <readData>
 8008720:	4603      	mov	r3, r0
 8008722:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 8008724:	2144      	movs	r1, #68	; 0x44
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7ff ff71 	bl	800860e <readData>
 800872c:	4603      	mov	r3, r0
 800872e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 8008730:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008734:	021b      	lsls	r3, r3, #8
 8008736:	b21a      	sxth	r2, r3
 8008738:	89bb      	ldrh	r3, [r7, #12]
 800873a:	4313      	orrs	r3, r2
 800873c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	2b03      	cmp	r3, #3
 8008744:	d846      	bhi.n	80087d4 <readGyro_X+0xdc>
 8008746:	a201      	add	r2, pc, #4	; (adr r2, 800874c <readGyro_X+0x54>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	0800875d 	.word	0x0800875d
 8008750:	0800877b 	.word	0x0800877b
 8008754:	08008799 	.word	0x08008799
 8008758:	080087b7 	.word	0x080087b7
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 800875c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008760:	4618      	mov	r0, r3
 8008762:	f7f7 fef7 	bl	8000554 <__aeabi_i2d>
 8008766:	a325      	add	r3, pc, #148	; (adr r3, 80087fc <readGyro_X+0x104>)
 8008768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876c:	f7f8 f886 	bl	800087c <__aeabi_ddiv>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008778:	e02d      	b.n	80087d6 <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 800877a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800877e:	4618      	mov	r0, r3
 8008780:	f7f7 fee8 	bl	8000554 <__aeabi_i2d>
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	4b19      	ldr	r3, [pc, #100]	; (80087f0 <readGyro_X+0xf8>)
 800878a:	f7f8 f877 	bl	800087c <__aeabi_ddiv>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008796:	e01e      	b.n	80087d6 <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 8008798:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800879c:	4618      	mov	r0, r3
 800879e:	f7f7 fed9 	bl	8000554 <__aeabi_i2d>
 80087a2:	f04f 0200 	mov.w	r2, #0
 80087a6:	4b13      	ldr	r3, [pc, #76]	; (80087f4 <readGyro_X+0xfc>)
 80087a8:	f7f8 f868 	bl	800087c <__aeabi_ddiv>
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80087b4:	e00f      	b.n	80087d6 <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 80087b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7f7 feca 	bl	8000554 <__aeabi_i2d>
 80087c0:	f04f 0200 	mov.w	r2, #0
 80087c4:	4b0c      	ldr	r3, [pc, #48]	; (80087f8 <readGyro_X+0x100>)
 80087c6:	f7f8 f859 	bl	800087c <__aeabi_ddiv>
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80087d2:	e000      	b.n	80087d6 <readGyro_X+0xde>
		}default:{
			break;
 80087d4:	bf00      	nop
		}

	}

	return GYROX_R;
 80087d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80087da:	f7f8 fa1d 	bl	8000c18 <__aeabi_d2f>
 80087de:	4603      	mov	r3, r0
 80087e0:	ee07 3a90 	vmov	s15, r3

}
 80087e4:	eeb0 0a67 	vmov.f32	s0, s15
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	40508000 	.word	0x40508000
 80087f4:	40408000 	.word	0x40408000
 80087f8:	40300000 	.word	0x40300000
 80087fc:	00000000 	.word	0x00000000
 8008800:	40606000 	.word	0x40606000
 8008804:	00000000 	.word	0x00000000

08008808 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 8008810:	2300      	movs	r3, #0
 8008812:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 8008814:	2300      	movs	r3, #0
 8008816:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 8008818:	2300      	movs	r3, #0
 800881a:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 800881c:	f04f 0200 	mov.w	r2, #0
 8008820:	f04f 0300 	mov.w	r3, #0
 8008824:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 8008828:	2145      	movs	r1, #69	; 0x45
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff feef 	bl	800860e <readData>
 8008830:	4603      	mov	r3, r0
 8008832:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 8008834:	2146      	movs	r1, #70	; 0x46
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7ff fee9 	bl	800860e <readData>
 800883c:	4603      	mov	r3, r0
 800883e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 8008840:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008844:	021b      	lsls	r3, r3, #8
 8008846:	b21a      	sxth	r2, r3
 8008848:	89bb      	ldrh	r3, [r7, #12]
 800884a:	4313      	orrs	r3, r2
 800884c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	2b03      	cmp	r3, #3
 8008854:	d846      	bhi.n	80088e4 <readGyro_Y+0xdc>
 8008856:	a201      	add	r2, pc, #4	; (adr r2, 800885c <readGyro_Y+0x54>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	0800886d 	.word	0x0800886d
 8008860:	0800888b 	.word	0x0800888b
 8008864:	080088a9 	.word	0x080088a9
 8008868:	080088c7 	.word	0x080088c7
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 800886c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008870:	4618      	mov	r0, r3
 8008872:	f7f7 fe6f 	bl	8000554 <__aeabi_i2d>
 8008876:	a325      	add	r3, pc, #148	; (adr r3, 800890c <readGyro_Y+0x104>)
 8008878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887c:	f7f7 fffe 	bl	800087c <__aeabi_ddiv>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008888:	e02d      	b.n	80088e6 <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 800888a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800888e:	4618      	mov	r0, r3
 8008890:	f7f7 fe60 	bl	8000554 <__aeabi_i2d>
 8008894:	f04f 0200 	mov.w	r2, #0
 8008898:	4b19      	ldr	r3, [pc, #100]	; (8008900 <readGyro_Y+0xf8>)
 800889a:	f7f7 ffef 	bl	800087c <__aeabi_ddiv>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80088a6:	e01e      	b.n	80088e6 <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 80088a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7f7 fe51 	bl	8000554 <__aeabi_i2d>
 80088b2:	f04f 0200 	mov.w	r2, #0
 80088b6:	4b13      	ldr	r3, [pc, #76]	; (8008904 <readGyro_Y+0xfc>)
 80088b8:	f7f7 ffe0 	bl	800087c <__aeabi_ddiv>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80088c4:	e00f      	b.n	80088e6 <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 80088c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7f7 fe42 	bl	8000554 <__aeabi_i2d>
 80088d0:	f04f 0200 	mov.w	r2, #0
 80088d4:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <readGyro_Y+0x100>)
 80088d6:	f7f7 ffd1 	bl	800087c <__aeabi_ddiv>
 80088da:	4602      	mov	r2, r0
 80088dc:	460b      	mov	r3, r1
 80088de:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80088e2:	e000      	b.n	80088e6 <readGyro_Y+0xde>
		}default:{
			break;
 80088e4:	bf00      	nop
		}

	}

	return GYROY_R;
 80088e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80088ea:	f7f8 f995 	bl	8000c18 <__aeabi_d2f>
 80088ee:	4603      	mov	r3, r0
 80088f0:	ee07 3a90 	vmov	s15, r3

}
 80088f4:	eeb0 0a67 	vmov.f32	s0, s15
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	40508000 	.word	0x40508000
 8008904:	40408000 	.word	0x40408000
 8008908:	40300000 	.word	0x40300000
 800890c:	00000000 	.word	0x00000000
 8008910:	40606000 	.word	0x40606000
 8008914:	00000000 	.word	0x00000000

08008918 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 8008924:	2300      	movs	r3, #0
 8008926:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8008928:	2300      	movs	r3, #0
 800892a:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 800892c:	f04f 0200 	mov.w	r2, #0
 8008930:	f04f 0300 	mov.w	r3, #0
 8008934:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8008938:	2147      	movs	r1, #71	; 0x47
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7ff fe67 	bl	800860e <readData>
 8008940:	4603      	mov	r3, r0
 8008942:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 8008944:	2148      	movs	r1, #72	; 0x48
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7ff fe61 	bl	800860e <readData>
 800894c:	4603      	mov	r3, r0
 800894e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8008950:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008954:	021b      	lsls	r3, r3, #8
 8008956:	b21a      	sxth	r2, r3
 8008958:	89bb      	ldrh	r3, [r7, #12]
 800895a:	4313      	orrs	r3, r2
 800895c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	785b      	ldrb	r3, [r3, #1]
 8008962:	2b03      	cmp	r3, #3
 8008964:	d846      	bhi.n	80089f4 <readGyro_Z+0xdc>
 8008966:	a201      	add	r2, pc, #4	; (adr r2, 800896c <readGyro_Z+0x54>)
 8008968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896c:	0800897d 	.word	0x0800897d
 8008970:	0800899b 	.word	0x0800899b
 8008974:	080089b9 	.word	0x080089b9
 8008978:	080089d7 	.word	0x080089d7
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 800897c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008980:	4618      	mov	r0, r3
 8008982:	f7f7 fde7 	bl	8000554 <__aeabi_i2d>
 8008986:	a325      	add	r3, pc, #148	; (adr r3, 8008a1c <readGyro_Z+0x104>)
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	f7f7 ff76 	bl	800087c <__aeabi_ddiv>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008998:	e02d      	b.n	80089f6 <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 800899a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800899e:	4618      	mov	r0, r3
 80089a0:	f7f7 fdd8 	bl	8000554 <__aeabi_i2d>
 80089a4:	f04f 0200 	mov.w	r2, #0
 80089a8:	4b19      	ldr	r3, [pc, #100]	; (8008a10 <readGyro_Z+0xf8>)
 80089aa:	f7f7 ff67 	bl	800087c <__aeabi_ddiv>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80089b6:	e01e      	b.n	80089f6 <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 80089b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80089bc:	4618      	mov	r0, r3
 80089be:	f7f7 fdc9 	bl	8000554 <__aeabi_i2d>
 80089c2:	f04f 0200 	mov.w	r2, #0
 80089c6:	4b13      	ldr	r3, [pc, #76]	; (8008a14 <readGyro_Z+0xfc>)
 80089c8:	f7f7 ff58 	bl	800087c <__aeabi_ddiv>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80089d4:	e00f      	b.n	80089f6 <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 80089d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80089da:	4618      	mov	r0, r3
 80089dc:	f7f7 fdba 	bl	8000554 <__aeabi_i2d>
 80089e0:	f04f 0200 	mov.w	r2, #0
 80089e4:	4b0c      	ldr	r3, [pc, #48]	; (8008a18 <readGyro_Z+0x100>)
 80089e6:	f7f7 ff49 	bl	800087c <__aeabi_ddiv>
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80089f2:	e000      	b.n	80089f6 <readGyro_Z+0xde>
		}default:{
			break;
 80089f4:	bf00      	nop
		}

	}

	return GYROZ_R;
 80089f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80089fa:	f7f8 f90d 	bl	8000c18 <__aeabi_d2f>
 80089fe:	4603      	mov	r3, r0
 8008a00:	ee07 3a90 	vmov	s15, r3

}
 8008a04:	eeb0 0a67 	vmov.f32	s0, s15
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	40508000 	.word	0x40508000
 8008a14:	40408000 	.word	0x40408000
 8008a18:	40300000 	.word	0x40300000
 8008a1c:	00000000 	.word	0x00000000
 8008a20:	40606000 	.word	0x40606000
 8008a24:	00000000 	.word	0x00000000

08008a28 <calculation_parameter_distance>:

}

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8008a28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008a2c:	b08a      	sub	sp, #40	; 0x28
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6178      	str	r0, [r7, #20]
	// Obteniendo en el desarrollo como resultado:
	// -((pos final y - pos inicial y) * pos actual global x - (pos final x - pos inicial x) * pos actual global y)/ magnitud del director



	double director_x = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008a3e:	f7f7 fc3b 	bl	80002b8 <__aeabi_dsub>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double director_y = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8008a56:	f7f7 fc2f 	bl	80002b8 <__aeabi_dsub>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->magnitude_director = sqrt(pow(director_x,2)+pow(director_y,2));
 8008a62:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8008b70 <calculation_parameter_distance+0x148>
 8008a66:	ed97 0b08 	vldr	d0, [r7, #32]
 8008a6a:	f004 feff 	bl	800d86c <pow>
 8008a6e:	ec59 8b10 	vmov	r8, r9, d0
 8008a72:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8008b70 <calculation_parameter_distance+0x148>
 8008a76:	ed97 0b06 	vldr	d0, [r7, #24]
 8008a7a:	f004 fef7 	bl	800d86c <pow>
 8008a7e:	ec53 2b10 	vmov	r2, r3, d0
 8008a82:	4640      	mov	r0, r8
 8008a84:	4649      	mov	r1, r9
 8008a86:	f7f7 fc19 	bl	80002bc <__adddf3>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	ec43 2b17 	vmov	d7, r2, r3
 8008a92:	eeb0 0a47 	vmov.f32	s0, s14
 8008a96:	eef0 0a67 	vmov.f32	s1, s15
 8008a9a:	f004 ff57 	bl	800d94c <sqrt>
 8008a9e:	eeb0 7a40 	vmov.f32	s14, s0
 8008aa2:	eef0 7a60 	vmov.f32	s15, s1
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->proy_Parte_1 = director_x;
 8008aac:	6979      	ldr	r1, [r7, #20]
 8008aae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ab2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->proy_Parte_2 = director_y;
 8008ab6:	6979      	ldr	r1, [r7, #20]
 8008ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008abc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->proy_Parte_1_2 = -1 * director_x * ptrParameterPath->start_position_x - director_y * ptrParameterPath->start_position_y;
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	60bb      	str	r3, [r7, #8]
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008ad2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ad6:	f7f7 fda7 	bl	8000628 <__aeabi_dmul>
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	4690      	mov	r8, r2
 8008ae0:	4699      	mov	r9, r3
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8008ae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008aec:	f7f7 fd9c 	bl	8000628 <__aeabi_dmul>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	4640      	mov	r0, r8
 8008af6:	4649      	mov	r1, r9
 8008af8:	f7f7 fbde 	bl	80002b8 <__aeabi_dsub>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	6979      	ldr	r1, [r7, #20]
 8008b02:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->dis_point_Parte_1 = director_y;
 8008b06:	6979      	ldr	r1, [r7, #20]
 8008b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b0c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->dis_point_Parte_2 = -1 * director_x;
 8008b10:	6a3c      	ldr	r4, [r7, #32]
 8008b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b14:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	603b      	str	r3, [r7, #0]
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008b28:	607b      	str	r3, [r7, #4]
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008b30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b34:	f7f7 fd78 	bl	8000628 <__aeabi_dmul>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4614      	mov	r4, r2
 8008b3e:	461d      	mov	r5, r3
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8008b46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b4a:	f7f7 fd6d 	bl	8000628 <__aeabi_dmul>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	4620      	mov	r0, r4
 8008b54:	4629      	mov	r1, r5
 8008b56:	f7f7 fbb1 	bl	80002bc <__adddf3>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	6979      	ldr	r1, [r7, #20]
 8008b60:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8008b64:	bf00      	nop
 8008b66:	3728      	adds	r7, #40	; 0x28
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008b6e:	bf00      	nop
 8008b70:	00000000 	.word	0x00000000
 8008b74:	40000000 	.word	0x40000000

08008b78 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8008b78:	b5b0      	push	{r4, r5, r7, lr}
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6178      	str	r0, [r7, #20]
 8008b80:	ed87 0b02 	vstr	d0, [r7, #8]
 8008b84:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8008b8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b92:	f7f7 fd49 	bl	8000628 <__aeabi_dmul>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4614      	mov	r4, r2
 8008b9c:	461d      	mov	r5, r3
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8008ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ba8:	f7f7 fd3e 	bl	8000628 <__aeabi_dmul>
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	f7f7 fb82 	bl	80002bc <__adddf3>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / ptrParameterPath->magnitude_director);
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008bc6:	f7f7 fb79 	bl	80002bc <__adddf3>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4610      	mov	r0, r2
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd8:	f7f7 fe50 	bl	800087c <__aeabi_ddiv>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8008be0:	4611      	mov	r1, r2
 8008be2:	61b9      	str	r1, [r7, #24]
 8008be4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008be8:	61fb      	str	r3, [r7, #28]

	return distance;
 8008bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008bee:	ec43 2b17 	vmov	d7, r2, r3
}
 8008bf2:	eeb0 0a47 	vmov.f32	s0, s14
 8008bf6:	eef0 0a67 	vmov.f32	s1, s15
 8008bfa:	3720      	adds	r7, #32
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bdb0      	pop	{r4, r5, r7, pc}

08008c00 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8008c00:	b5b0      	push	{r4, r5, r7, lr}
 8008c02:	b088      	sub	sp, #32
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6178      	str	r0, [r7, #20]
 8008c08:	ed87 0b02 	vstr	d0, [r7, #8]
 8008c0c:	ed87 1b00 	vstr	d1, [r7]
	//Calculo de la distancia viajada relativo a la linea recta
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008c16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c1a:	f7f7 fd05 	bl	8000628 <__aeabi_dmul>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4614      	mov	r4, r2
 8008c24:	461d      	mov	r5, r3
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c30:	f7f7 fcfa 	bl	8000628 <__aeabi_dmul>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4620      	mov	r0, r4
 8008c3a:	4629      	mov	r1, r5
 8008c3c:	f7f7 fb3e 	bl	80002bc <__adddf3>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4610      	mov	r0, r2
 8008c46:	4619      	mov	r1, r3
			+ ptrParameterPath->proy_Parte_1_2) / ptrParameterPath->magnitude_director;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008c4e:	f7f7 fb35 	bl	80002bc <__adddf3>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4610      	mov	r0, r2
 8008c58:	4619      	mov	r1, r3
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 8008c60:	f7f7 fe0c 	bl	800087c <__aeabi_ddiv>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 8008c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c70:	ec43 2b17 	vmov	d7, r2, r3
}
 8008c74:	eeb0 0a47 	vmov.f32	s0, s14
 8008c78:	eef0 0a67 	vmov.f32	s1, s15
 8008c7c:	3720      	adds	r7, #32
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008c84 <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a6c      	ldr	r2, [pc, #432]	; (8008e44 <pwm_Config+0x1c0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d106      	bne.n	8008ca4 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8008c96:	4b6c      	ldr	r3, [pc, #432]	; (8008e48 <pwm_Config+0x1c4>)
 8008c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c9a:	4a6b      	ldr	r2, [pc, #428]	; (8008e48 <pwm_Config+0x1c4>)
 8008c9c:	f043 0301 	orr.w	r3, r3, #1
 8008ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8008ca2:	e030      	b.n	8008d06 <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cac:	d106      	bne.n	8008cbc <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8008cae:	4b66      	ldr	r3, [pc, #408]	; (8008e48 <pwm_Config+0x1c4>)
 8008cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb2:	4a65      	ldr	r2, [pc, #404]	; (8008e48 <pwm_Config+0x1c4>)
 8008cb4:	f043 0301 	orr.w	r3, r3, #1
 8008cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8008cba:	e024      	b.n	8008d06 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a62      	ldr	r2, [pc, #392]	; (8008e4c <pwm_Config+0x1c8>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d106      	bne.n	8008cd4 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8008cc6:	4b60      	ldr	r3, [pc, #384]	; (8008e48 <pwm_Config+0x1c4>)
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cca:	4a5f      	ldr	r2, [pc, #380]	; (8008e48 <pwm_Config+0x1c4>)
 8008ccc:	f043 0302 	orr.w	r3, r3, #2
 8008cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8008cd2:	e018      	b.n	8008d06 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a5d      	ldr	r2, [pc, #372]	; (8008e50 <pwm_Config+0x1cc>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d106      	bne.n	8008cec <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8008cde:	4b5a      	ldr	r3, [pc, #360]	; (8008e48 <pwm_Config+0x1c4>)
 8008ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce2:	4a59      	ldr	r2, [pc, #356]	; (8008e48 <pwm_Config+0x1c4>)
 8008ce4:	f043 0304 	orr.w	r3, r3, #4
 8008ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8008cea:	e00c      	b.n	8008d06 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a58      	ldr	r2, [pc, #352]	; (8008e54 <pwm_Config+0x1d0>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d106      	bne.n	8008d04 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8008cf6:	4b54      	ldr	r3, [pc, #336]	; (8008e48 <pwm_Config+0x1c4>)
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfa:	4a53      	ldr	r2, [pc, #332]	; (8008e48 <pwm_Config+0x1c4>)
 8008cfc:	f043 0308 	orr.w	r3, r3, #8
 8008d00:	6413      	str	r3, [r2, #64]	; 0x40
 8008d02:	e000      	b.n	8008d06 <pwm_Config+0x82>
	}
	else{
		__NOP();
 8008d04:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008d14:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	7f5b      	ldrb	r3, [r3, #29]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d106      	bne.n	8008d2c <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f930 	bl	8008f84 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fa67 	bl	80091f8 <setDuttyCycle>
 8008d2a:	e005      	b.n	8008d38 <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f929 	bl	8008f84 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fb38 	bl	80093a8 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f022 0210 	bic.w	r2, r2, #16
 8008d46:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	7a1b      	ldrb	r3, [r3, #8]
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d86f      	bhi.n	8008e38 <pwm_Config+0x1b4>
 8008d58:	a201      	add	r2, pc, #4	; (adr r2, 8008d60 <pwm_Config+0xdc>)
 8008d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5e:	bf00      	nop
 8008d60:	08008d71 	.word	0x08008d71
 8008d64:	08008da3 	.word	0x08008da3
 8008d68:	08008dd5 	.word	0x08008dd5
 8008d6c:	08008e07 	.word	0x08008e07
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	699a      	ldr	r2, [r3, #24]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f022 0203 	bic.w	r2, r2, #3
 8008d7e:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	699a      	ldr	r2, [r3, #24]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008d8e:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	699a      	ldr	r2, [r3, #24]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f042 0208 	orr.w	r2, r2, #8
 8008d9e:	619a      	str	r2, [r3, #24]


		break;
 8008da0:	e04b      	b.n	8008e3a <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	699a      	ldr	r2, [r3, #24]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008db0:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	699a      	ldr	r2, [r3, #24]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8008dc0:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	699a      	ldr	r2, [r3, #24]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dd0:	619a      	str	r2, [r3, #24]

		break;
 8008dd2:	e032      	b.n	8008e3a <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	69da      	ldr	r2, [r3, #28]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f022 0203 	bic.w	r2, r2, #3
 8008de2:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	69da      	ldr	r2, [r3, #28]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008df2:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	69da      	ldr	r2, [r3, #28]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f042 0208 	orr.w	r2, r2, #8
 8008e02:	61da      	str	r2, [r3, #28]

		break;
 8008e04:	e019      	b.n	8008e3a <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	69da      	ldr	r2, [r3, #28]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008e14:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	69da      	ldr	r2, [r3, #28]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8008e24:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	69da      	ldr	r2, [r3, #28]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e34:	61da      	str	r2, [r3, #28]

		break;
 8008e36:	e000      	b.n	8008e3a <pwm_Config+0x1b6>
	}

	default:{
		break;
 8008e38:	bf00      	nop
	}// fin del switch-case




}
 8008e3a:	bf00      	nop
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	40010000 	.word	0x40010000
 8008e48:	40023800 	.word	0x40023800
 8008e4c:	40000400 	.word	0x40000400
 8008e50:	40000800 	.word	0x40000800
 8008e54:	40000c00 	.word	0x40000c00

08008e58 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f042 0201 	orr.w	r2, r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]

}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a3d      	ldr	r2, [pc, #244]	; (8008f80 <enableOutput+0x104>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d13a      	bne.n	8008f04 <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e9c:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	7a1b      	ldrb	r3, [r3, #8]
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d862      	bhi.n	8008f6c <enableOutput+0xf0>
 8008ea6:	a201      	add	r2, pc, #4	; (adr r2, 8008eac <enableOutput+0x30>)
 8008ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eac:	08008ebd 	.word	0x08008ebd
 8008eb0:	08008ecf 	.word	0x08008ecf
 8008eb4:	08008ee1 	.word	0x08008ee1
 8008eb8:	08008ef3 	.word	0x08008ef3
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6a1a      	ldr	r2, [r3, #32]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0201 	orr.w	r2, r2, #1
 8008eca:	621a      	str	r2, [r3, #32]

				break;
 8008ecc:	e051      	b.n	8008f72 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6a1a      	ldr	r2, [r3, #32]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f042 0210 	orr.w	r2, r2, #16
 8008edc:	621a      	str	r2, [r3, #32]

				break;
 8008ede:	e048      	b.n	8008f72 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6a1a      	ldr	r2, [r3, #32]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008eee:	621a      	str	r2, [r3, #32]

				break;
 8008ef0:	e03f      	b.n	8008f72 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6a1a      	ldr	r2, [r3, #32]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f00:	621a      	str	r2, [r3, #32]

				break;
 8008f02:	e036      	b.n	8008f72 <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	7a1b      	ldrb	r3, [r3, #8]
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d831      	bhi.n	8008f70 <enableOutput+0xf4>
 8008f0c:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <enableOutput+0x98>)
 8008f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f12:	bf00      	nop
 8008f14:	08008f25 	.word	0x08008f25
 8008f18:	08008f37 	.word	0x08008f37
 8008f1c:	08008f49 	.word	0x08008f49
 8008f20:	08008f5b 	.word	0x08008f5b
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6a1a      	ldr	r2, [r3, #32]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f042 0201 	orr.w	r2, r2, #1
 8008f32:	621a      	str	r2, [r3, #32]

				break;
 8008f34:	e01d      	b.n	8008f72 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6a1a      	ldr	r2, [r3, #32]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f042 0210 	orr.w	r2, r2, #16
 8008f44:	621a      	str	r2, [r3, #32]

				break;
 8008f46:	e014      	b.n	8008f72 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6a1a      	ldr	r2, [r3, #32]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f56:	621a      	str	r2, [r3, #32]

				break;
 8008f58:	e00b      	b.n	8008f72 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6a1a      	ldr	r2, [r3, #32]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f68:	621a      	str	r2, [r3, #32]

				break;
 8008f6a:	e002      	b.n	8008f72 <enableOutput+0xf6>
				break;
 8008f6c:	bf00      	nop
 8008f6e:	e000      	b.n	8008f72 <enableOutput+0xf6>
			}

			default: {
				break;
 8008f70:	bf00      	nop
			}

		}
	}
	return SET;
 8008f72:	2301      	movs	r3, #1
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	40010000 	.word	0x40010000

08008f84 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	68d2      	ldr	r2, [r2, #12]
 8008f98:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b10      	cmp	r3, #16
 8008fa4:	d01a      	beq.n	8008fdc <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2b14      	cmp	r3, #20
 8008faa:	d017      	beq.n	8008fdc <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2b1e      	cmp	r3, #30
 8008fb0:	d014      	beq.n	8008fdc <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2b28      	cmp	r3, #40	; 0x28
 8008fb6:	d011      	beq.n	8008fdc <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2b32      	cmp	r3, #50	; 0x32
 8008fbc:	d00e      	beq.n	8008fdc <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b3c      	cmp	r3, #60	; 0x3c
 8008fc2:	d00b      	beq.n	8008fdc <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b46      	cmp	r3, #70	; 0x46
 8008fc8:	d008      	beq.n	8008fdc <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b50      	cmp	r3, #80	; 0x50
 8008fce:	d005      	beq.n	8008fdc <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b5a      	cmp	r3, #90	; 0x5a
 8008fd4:	d002      	beq.n	8008fdc <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b64      	cmp	r3, #100	; 0x64
 8008fda:	d118      	bne.n	800900e <setFrequency+0x8a>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008fe2:	f04f 0200 	mov.w	r2, #0
 8008fe6:	4b7b      	ldr	r3, [pc, #492]	; (80091d4 <setFrequency+0x250>)
 8008fe8:	f7f7 fb1e 	bl	8000628 <__aeabi_dmul>
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	f7f7 fdf0 	bl	8000bd8 <__aeabi_d2uiz>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	4b76      	ldr	r3, [pc, #472]	; (80091d8 <setFrequency+0x254>)
 8008ffe:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8009000:	4b75      	ldr	r3, [pc, #468]	; (80091d8 <setFrequency+0x254>)
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	1e5a      	subs	r2, r3, #1
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	62da      	str	r2, [r3, #44]	; 0x2c
 800900c:	e0dd      	b.n	80091ca <setFrequency+0x246>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2ba0      	cmp	r3, #160	; 0xa0
 8009012:	d022      	beq.n	800905a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_20MHz_10us)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2bc8      	cmp	r3, #200	; 0xc8
 8009018:	d01f      	beq.n	800905a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_30MHz_10us)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009020:	d01b      	beq.n	800905a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_40MHz_10us)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009028:	d017      	beq.n	800905a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_50MHz_10us)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009030:	d013      	beq.n	800905a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_60MHz_10us)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009038:	d00f      	beq.n	800905a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_70MHz_10us)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009040:	d00b      	beq.n	800905a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_80MHz_10us)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009048:	d007      	beq.n	800905a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_90MHz_10us)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009050:	d003      	beq.n	800905a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009058:	d118      	bne.n	800908c <setFrequency+0x108>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009060:	f04f 0200 	mov.w	r2, #0
 8009064:	4b5d      	ldr	r3, [pc, #372]	; (80091dc <setFrequency+0x258>)
 8009066:	f7f7 fadf 	bl	8000628 <__aeabi_dmul>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	4610      	mov	r0, r2
 8009070:	4619      	mov	r1, r3
 8009072:	f7f7 fdb1 	bl	8000bd8 <__aeabi_d2uiz>
 8009076:	4603      	mov	r3, r0
 8009078:	b29a      	uxth	r2, r3
 800907a:	4b57      	ldr	r3, [pc, #348]	; (80091d8 <setFrequency+0x254>)
 800907c:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800907e:	4b56      	ldr	r3, [pc, #344]	; (80091d8 <setFrequency+0x254>)
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	1e5a      	subs	r2, r3, #1
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	62da      	str	r2, [r3, #44]	; 0x2c
 800908a:	e09e      	b.n	80091ca <setFrequency+0x246>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009092:	d029      	beq.n	80090e8 <setFrequency+0x164>
		   || (speed == PWM_SPEED_20MHz_100us)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800909a:	d025      	beq.n	80090e8 <setFrequency+0x164>
		   || (speed == PWM_SPEED_30MHz_100us)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d020      	beq.n	80090e8 <setFrequency+0x164>
		   || (speed == PWM_SPEED_40MHz_100us)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80090ac:	d01c      	beq.n	80090e8 <setFrequency+0x164>
		   || (speed == PWM_SPEED_50MHz_100us)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d017      	beq.n	80090e8 <setFrequency+0x164>
		   || (speed == PWM_SPEED_60MHz_100us)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f241 7270 	movw	r2, #6000	; 0x1770
 80090be:	4293      	cmp	r3, r2
 80090c0:	d012      	beq.n	80090e8 <setFrequency+0x164>
		   || (speed == PWM_SPEED_70MHz_100us)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f641 3258 	movw	r2, #7000	; 0x1b58
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d00d      	beq.n	80090e8 <setFrequency+0x164>
		   || (speed == PWM_SPEED_80MHz_100us)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80090d2:	d009      	beq.n	80090e8 <setFrequency+0x164>
		   || (speed == PWM_SPEED_90MHz_100us)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f242 3228 	movw	r2, #9000	; 0x2328
 80090da:	4293      	cmp	r3, r2
 80090dc:	d004      	beq.n	80090e8 <setFrequency+0x164>
		   || (speed == PWM_SPEED_100MHz_100us)){
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d118      	bne.n	800911a <setFrequency+0x196>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80090ee:	f04f 0200 	mov.w	r2, #0
 80090f2:	4b3b      	ldr	r3, [pc, #236]	; (80091e0 <setFrequency+0x25c>)
 80090f4:	f7f7 fa98 	bl	8000628 <__aeabi_dmul>
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	4610      	mov	r0, r2
 80090fe:	4619      	mov	r1, r3
 8009100:	f7f7 fd6a 	bl	8000bd8 <__aeabi_d2uiz>
 8009104:	4603      	mov	r3, r0
 8009106:	b29a      	uxth	r2, r3
 8009108:	4b33      	ldr	r3, [pc, #204]	; (80091d8 <setFrequency+0x254>)
 800910a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800910c:	4b32      	ldr	r3, [pc, #200]	; (80091d8 <setFrequency+0x254>)
 800910e:	881b      	ldrh	r3, [r3, #0]
 8009110:	1e5a      	subs	r2, r3, #1
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	62da      	str	r2, [r3, #44]	; 0x2c
 8009118:	e057      	b.n	80091ca <setFrequency+0x246>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8009120:	d028      	beq.n	8009174 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_20MHz_1ms)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f644 6220 	movw	r2, #20000	; 0x4e20
 8009128:	4293      	cmp	r3, r2
 800912a:	d023      	beq.n	8009174 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_30MHz_1ms)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f247 5230 	movw	r2, #30000	; 0x7530
 8009132:	4293      	cmp	r3, r2
 8009134:	d01e      	beq.n	8009174 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_40MHz_1ms)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f649 4240 	movw	r2, #40000	; 0x9c40
 800913c:	4293      	cmp	r3, r2
 800913e:	d019      	beq.n	8009174 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_50MHz_1ms)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009146:	4293      	cmp	r3, r2
 8009148:	d014      	beq.n	8009174 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_60MHz_1ms)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8009150:	4293      	cmp	r3, r2
 8009152:	d00f      	beq.n	8009174 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_70MHz_1ms)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4a23      	ldr	r2, [pc, #140]	; (80091e4 <setFrequency+0x260>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d00b      	beq.n	8009174 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_80MHz_1ms)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4a22      	ldr	r2, [pc, #136]	; (80091e8 <setFrequency+0x264>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d007      	beq.n	8009174 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_90MHz_1ms)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	4a21      	ldr	r2, [pc, #132]	; (80091ec <setFrequency+0x268>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d003      	beq.n	8009174 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4a20      	ldr	r2, [pc, #128]	; (80091f0 <setFrequency+0x26c>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d111      	bne.n	8009198 <setFrequency+0x214>

		periodo = ptrPwmHandler->config.periodo;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800917a:	4610      	mov	r0, r2
 800917c:	4619      	mov	r1, r3
 800917e:	f7f7 fd2b 	bl	8000bd8 <__aeabi_d2uiz>
 8009182:	4603      	mov	r3, r0
 8009184:	b29a      	uxth	r2, r3
 8009186:	4b14      	ldr	r3, [pc, #80]	; (80091d8 <setFrequency+0x254>)
 8009188:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800918a:	4b13      	ldr	r3, [pc, #76]	; (80091d8 <setFrequency+0x254>)
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	1e5a      	subs	r2, r3, #1
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	62da      	str	r2, [r3, #44]	; 0x2c
 8009196:	e018      	b.n	80091ca <setFrequency+0x246>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800919e:	f04f 0200 	mov.w	r2, #0
 80091a2:	4b14      	ldr	r3, [pc, #80]	; (80091f4 <setFrequency+0x270>)
 80091a4:	f7f7 fb6a 	bl	800087c <__aeabi_ddiv>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	4610      	mov	r0, r2
 80091ae:	4619      	mov	r1, r3
 80091b0:	f7f7 fd12 	bl	8000bd8 <__aeabi_d2uiz>
 80091b4:	4603      	mov	r3, r0
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <setFrequency+0x254>)
 80091ba:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80091bc:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <setFrequency+0x254>)
 80091be:	881b      	ldrh	r3, [r3, #0]
 80091c0:	1e5a      	subs	r2, r3, #1
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 80091c8:	bf00      	nop
 80091ca:	bf00      	nop
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	408f4000 	.word	0x408f4000
 80091d8:	20013890 	.word	0x20013890
 80091dc:	40590000 	.word	0x40590000
 80091e0:	40240000 	.word	0x40240000
 80091e4:	00011170 	.word	0x00011170
 80091e8:	00013880 	.word	0x00013880
 80091ec:	00015f90 	.word	0x00015f90
 80091f0:	000186a0 	.word	0x000186a0
 80091f4:	40340000 	.word	0x40340000

080091f8 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 80091f8:	b590      	push	{r4, r7, lr}
 80091fa:	b08b      	sub	sp, #44	; 0x2c
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	7a1b      	ldrb	r3, [r3, #8]
 8009204:	2b03      	cmp	r3, #3
 8009206:	f200 80c3 	bhi.w	8009390 <setDuttyCycle+0x198>
 800920a:	a201      	add	r2, pc, #4	; (adr r2, 8009210 <setDuttyCycle+0x18>)
 800920c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009210:	08009221 	.word	0x08009221
 8009214:	0800927d 	.word	0x0800927d
 8009218:	080092d9 	.word	0x080092d9
 800921c:	08009335 	.word	0x08009335
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	ed93 7a06 	vldr	s14, [r3, #24]
 8009226:	4b5d      	ldr	r3, [pc, #372]	; (800939c <setDuttyCycle+0x1a4>)
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	ee07 3a90 	vmov	s15, r3
 800922e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009236:	ee17 0a90 	vmov	r0, s15
 800923a:	f7f7 f99d 	bl	8000578 <__aeabi_f2d>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 8009246:	f04f 0200 	mov.w	r2, #0
 800924a:	4b55      	ldr	r3, [pc, #340]	; (80093a0 <setDuttyCycle+0x1a8>)
 800924c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009250:	f7f7 fb14 	bl	800087c <__aeabi_ddiv>
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	4610      	mov	r0, r2
 800925a:	4619      	mov	r1, r3
 800925c:	f04f 0200 	mov.w	r2, #0
 8009260:	4b50      	ldr	r3, [pc, #320]	; (80093a4 <setDuttyCycle+0x1ac>)
 8009262:	f7f7 f829 	bl	80002b8 <__aeabi_dsub>
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	4610      	mov	r0, r2
 800926c:	4619      	mov	r1, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681c      	ldr	r4, [r3, #0]
 8009272:	f7f7 fcb1 	bl	8000bd8 <__aeabi_d2uiz>
 8009276:	4603      	mov	r3, r0
 8009278:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 800927a:	e08a      	b.n	8009392 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	ed93 7a06 	vldr	s14, [r3, #24]
 8009282:	4b46      	ldr	r3, [pc, #280]	; (800939c <setDuttyCycle+0x1a4>)
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	ee07 3a90 	vmov	s15, r3
 800928a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800928e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009292:	ee17 0a90 	vmov	r0, s15
 8009296:	f7f7 f96f 	bl	8000578 <__aeabi_f2d>
 800929a:	4602      	mov	r2, r0
 800929c:	460b      	mov	r3, r1
 800929e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 80092a2:	f04f 0200 	mov.w	r2, #0
 80092a6:	4b3e      	ldr	r3, [pc, #248]	; (80093a0 <setDuttyCycle+0x1a8>)
 80092a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80092ac:	f7f7 fae6 	bl	800087c <__aeabi_ddiv>
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	4610      	mov	r0, r2
 80092b6:	4619      	mov	r1, r3
 80092b8:	f04f 0200 	mov.w	r2, #0
 80092bc:	4b39      	ldr	r3, [pc, #228]	; (80093a4 <setDuttyCycle+0x1ac>)
 80092be:	f7f6 fffb 	bl	80002b8 <__aeabi_dsub>
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	4610      	mov	r0, r2
 80092c8:	4619      	mov	r1, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681c      	ldr	r4, [r3, #0]
 80092ce:	f7f7 fc83 	bl	8000bd8 <__aeabi_d2uiz>
 80092d2:	4603      	mov	r3, r0
 80092d4:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 80092d6:	e05c      	b.n	8009392 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	ed93 7a06 	vldr	s14, [r3, #24]
 80092de:	4b2f      	ldr	r3, [pc, #188]	; (800939c <setDuttyCycle+0x1a4>)
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	ee07 3a90 	vmov	s15, r3
 80092e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ee:	ee17 0a90 	vmov	r0, s15
 80092f2:	f7f7 f941 	bl	8000578 <__aeabi_f2d>
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 80092fe:	f04f 0200 	mov.w	r2, #0
 8009302:	4b27      	ldr	r3, [pc, #156]	; (80093a0 <setDuttyCycle+0x1a8>)
 8009304:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009308:	f7f7 fab8 	bl	800087c <__aeabi_ddiv>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	4610      	mov	r0, r2
 8009312:	4619      	mov	r1, r3
 8009314:	f04f 0200 	mov.w	r2, #0
 8009318:	4b22      	ldr	r3, [pc, #136]	; (80093a4 <setDuttyCycle+0x1ac>)
 800931a:	f7f6 ffcd 	bl	80002b8 <__aeabi_dsub>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	4610      	mov	r0, r2
 8009324:	4619      	mov	r1, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681c      	ldr	r4, [r3, #0]
 800932a:	f7f7 fc55 	bl	8000bd8 <__aeabi_d2uiz>
 800932e:	4603      	mov	r3, r0
 8009330:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8009332:	e02e      	b.n	8009392 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	ed93 7a06 	vldr	s14, [r3, #24]
 800933a:	4b18      	ldr	r3, [pc, #96]	; (800939c <setDuttyCycle+0x1a4>)
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800934a:	ee17 0a90 	vmov	r0, s15
 800934e:	f7f7 f913 	bl	8000578 <__aeabi_f2d>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 800935a:	f04f 0200 	mov.w	r2, #0
 800935e:	4b10      	ldr	r3, [pc, #64]	; (80093a0 <setDuttyCycle+0x1a8>)
 8009360:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009364:	f7f7 fa8a 	bl	800087c <__aeabi_ddiv>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	4610      	mov	r0, r2
 800936e:	4619      	mov	r1, r3
 8009370:	f04f 0200 	mov.w	r2, #0
 8009374:	4b0b      	ldr	r3, [pc, #44]	; (80093a4 <setDuttyCycle+0x1ac>)
 8009376:	f7f6 ff9f 	bl	80002b8 <__aeabi_dsub>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	4610      	mov	r0, r2
 8009380:	4619      	mov	r1, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681c      	ldr	r4, [r3, #0]
 8009386:	f7f7 fc27 	bl	8000bd8 <__aeabi_d2uiz>
 800938a:	4603      	mov	r3, r0
 800938c:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800938e:	e000      	b.n	8009392 <setDuttyCycle+0x19a>
	}

	default:{
		break;
 8009390:	bf00      	nop
	}

	}// fin del switch-case

}
 8009392:	bf00      	nop
 8009394:	372c      	adds	r7, #44	; 0x2c
 8009396:	46bd      	mov	sp, r7
 8009398:	bd90      	pop	{r4, r7, pc}
 800939a:	bf00      	nop
 800939c:	20013890 	.word	0x20013890
 80093a0:	40590000 	.word	0x40590000
 80093a4:	3ff00000 	.word	0x3ff00000

080093a8 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 80093a8:	b590      	push	{r4, r7, lr}
 80093aa:	b08b      	sub	sp, #44	; 0x2c
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	7a1b      	ldrb	r3, [r3, #8]
 80093b4:	2b03      	cmp	r3, #3
 80093b6:	f200 80d3 	bhi.w	8009560 <setDuttyCycleAfOpt+0x1b8>
 80093ba:	a201      	add	r2, pc, #4	; (adr r2, 80093c0 <setDuttyCycleAfOpt+0x18>)
 80093bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c0:	080093d1 	.word	0x080093d1
 80093c4:	08009435 	.word	0x08009435
 80093c8:	08009499 	.word	0x08009499
 80093cc:	080094fd 	.word	0x080094fd
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80093d6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800956c <setDuttyCycleAfOpt+0x1c4>
 80093da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80093de:	4b64      	ldr	r3, [pc, #400]	; (8009570 <setDuttyCycleAfOpt+0x1c8>)
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	ee07 3a90 	vmov	s15, r3
 80093e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ee:	ee17 0a90 	vmov	r0, s15
 80093f2:	f7f7 f8c1 	bl	8000578 <__aeabi_f2d>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 80093fe:	f04f 0200 	mov.w	r2, #0
 8009402:	4b5c      	ldr	r3, [pc, #368]	; (8009574 <setDuttyCycleAfOpt+0x1cc>)
 8009404:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009408:	f7f7 fa38 	bl	800087c <__aeabi_ddiv>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4610      	mov	r0, r2
 8009412:	4619      	mov	r1, r3
 8009414:	f04f 0200 	mov.w	r2, #0
 8009418:	4b57      	ldr	r3, [pc, #348]	; (8009578 <setDuttyCycleAfOpt+0x1d0>)
 800941a:	f7f6 ff4d 	bl	80002b8 <__aeabi_dsub>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4610      	mov	r0, r2
 8009424:	4619      	mov	r1, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681c      	ldr	r4, [r3, #0]
 800942a:	f7f7 fbd5 	bl	8000bd8 <__aeabi_d2uiz>
 800942e:	4603      	mov	r3, r0
 8009430:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8009432:	e096      	b.n	8009562 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	edd3 7a06 	vldr	s15, [r3, #24]
 800943a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800956c <setDuttyCycleAfOpt+0x1c4>
 800943e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009442:	4b4b      	ldr	r3, [pc, #300]	; (8009570 <setDuttyCycleAfOpt+0x1c8>)
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	ee07 3a90 	vmov	s15, r3
 800944a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800944e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009452:	ee17 0a90 	vmov	r0, s15
 8009456:	f7f7 f88f 	bl	8000578 <__aeabi_f2d>
 800945a:	4602      	mov	r2, r0
 800945c:	460b      	mov	r3, r1
 800945e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 8009462:	f04f 0200 	mov.w	r2, #0
 8009466:	4b43      	ldr	r3, [pc, #268]	; (8009574 <setDuttyCycleAfOpt+0x1cc>)
 8009468:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800946c:	f7f7 fa06 	bl	800087c <__aeabi_ddiv>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4610      	mov	r0, r2
 8009476:	4619      	mov	r1, r3
 8009478:	f04f 0200 	mov.w	r2, #0
 800947c:	4b3e      	ldr	r3, [pc, #248]	; (8009578 <setDuttyCycleAfOpt+0x1d0>)
 800947e:	f7f6 ff1b 	bl	80002b8 <__aeabi_dsub>
 8009482:	4602      	mov	r2, r0
 8009484:	460b      	mov	r3, r1
 8009486:	4610      	mov	r0, r2
 8009488:	4619      	mov	r1, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681c      	ldr	r4, [r3, #0]
 800948e:	f7f7 fba3 	bl	8000bd8 <__aeabi_d2uiz>
 8009492:	4603      	mov	r3, r0
 8009494:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8009496:	e064      	b.n	8009562 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	edd3 7a06 	vldr	s15, [r3, #24]
 800949e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800956c <setDuttyCycleAfOpt+0x1c4>
 80094a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80094a6:	4b32      	ldr	r3, [pc, #200]	; (8009570 <setDuttyCycleAfOpt+0x1c8>)
 80094a8:	881b      	ldrh	r3, [r3, #0]
 80094aa:	ee07 3a90 	vmov	s15, r3
 80094ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094b6:	ee17 0a90 	vmov	r0, s15
 80094ba:	f7f7 f85d 	bl	8000578 <__aeabi_f2d>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 80094c6:	f04f 0200 	mov.w	r2, #0
 80094ca:	4b2a      	ldr	r3, [pc, #168]	; (8009574 <setDuttyCycleAfOpt+0x1cc>)
 80094cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80094d0:	f7f7 f9d4 	bl	800087c <__aeabi_ddiv>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4610      	mov	r0, r2
 80094da:	4619      	mov	r1, r3
 80094dc:	f04f 0200 	mov.w	r2, #0
 80094e0:	4b25      	ldr	r3, [pc, #148]	; (8009578 <setDuttyCycleAfOpt+0x1d0>)
 80094e2:	f7f6 fee9 	bl	80002b8 <__aeabi_dsub>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	4610      	mov	r0, r2
 80094ec:	4619      	mov	r1, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681c      	ldr	r4, [r3, #0]
 80094f2:	f7f7 fb71 	bl	8000bd8 <__aeabi_d2uiz>
 80094f6:	4603      	mov	r3, r0
 80094f8:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 80094fa:	e032      	b.n	8009562 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8009502:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800956c <setDuttyCycleAfOpt+0x1c4>
 8009506:	ee37 7a67 	vsub.f32	s14, s14, s15
 800950a:	4b19      	ldr	r3, [pc, #100]	; (8009570 <setDuttyCycleAfOpt+0x1c8>)
 800950c:	881b      	ldrh	r3, [r3, #0]
 800950e:	ee07 3a90 	vmov	s15, r3
 8009512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951a:	ee17 0a90 	vmov	r0, s15
 800951e:	f7f7 f82b 	bl	8000578 <__aeabi_f2d>
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 800952a:	f04f 0200 	mov.w	r2, #0
 800952e:	4b11      	ldr	r3, [pc, #68]	; (8009574 <setDuttyCycleAfOpt+0x1cc>)
 8009530:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009534:	f7f7 f9a2 	bl	800087c <__aeabi_ddiv>
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	4610      	mov	r0, r2
 800953e:	4619      	mov	r1, r3
 8009540:	f04f 0200 	mov.w	r2, #0
 8009544:	4b0c      	ldr	r3, [pc, #48]	; (8009578 <setDuttyCycleAfOpt+0x1d0>)
 8009546:	f7f6 feb7 	bl	80002b8 <__aeabi_dsub>
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	4610      	mov	r0, r2
 8009550:	4619      	mov	r1, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681c      	ldr	r4, [r3, #0]
 8009556:	f7f7 fb3f 	bl	8000bd8 <__aeabi_d2uiz>
 800955a:	4603      	mov	r3, r0
 800955c:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800955e:	e000      	b.n	8009562 <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 8009560:	bf00      	nop
	}

	}// fin del switch-case


}
 8009562:	bf00      	nop
 8009564:	372c      	adds	r7, #44	; 0x2c
 8009566:	46bd      	mov	sp, r7
 8009568:	bd90      	pop	{r4, r7, pc}
 800956a:	bf00      	nop
 800956c:	42c80000 	.word	0x42c80000
 8009570:	20013890 	.word	0x20013890
 8009574:	40590000 	.word	0x40590000
 8009578:	3ff00000 	.word	0x3ff00000

0800957c <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	7a1b      	ldrb	r3, [r3, #8]
 8009588:	2b03      	cmp	r3, #3
 800958a:	d82f      	bhi.n	80095ec <disableOutput+0x70>
 800958c:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <disableOutput+0x18>)
 800958e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009592:	bf00      	nop
 8009594:	080095a5 	.word	0x080095a5
 8009598:	080095b7 	.word	0x080095b7
 800959c:	080095c9 	.word	0x080095c9
 80095a0:	080095db 	.word	0x080095db
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	6a1a      	ldr	r2, [r3, #32]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f022 0201 	bic.w	r2, r2, #1
 80095b2:	621a      	str	r2, [r3, #32]

			break;
 80095b4:	e01b      	b.n	80095ee <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6a1a      	ldr	r2, [r3, #32]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f022 0210 	bic.w	r2, r2, #16
 80095c4:	621a      	str	r2, [r3, #32]

			break;
 80095c6:	e012      	b.n	80095ee <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6a1a      	ldr	r2, [r3, #32]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095d6:	621a      	str	r2, [r3, #32]

			break;
 80095d8:	e009      	b.n	80095ee <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	6a1a      	ldr	r2, [r3, #32]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80095e8:	621a      	str	r2, [r3, #32]

			break;
 80095ea:	e000      	b.n	80095ee <disableOutput+0x72>
		}

		default: {
			break;
 80095ec:	bf00      	nop
		}
		}

	return RESET;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <PWMx_Toggle>:

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	7a1b      	ldrb	r3, [r3, #8]
 8009608:	2b03      	cmp	r3, #3
 800960a:	d82f      	bhi.n	800966c <PWMx_Toggle+0x70>
 800960c:	a201      	add	r2, pc, #4	; (adr r2, 8009614 <PWMx_Toggle+0x18>)
 800960e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009612:	bf00      	nop
 8009614:	08009625 	.word	0x08009625
 8009618:	08009637 	.word	0x08009637
 800961c:	08009649 	.word	0x08009649
 8009620:	0800965b 	.word	0x0800965b
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6a1a      	ldr	r2, [r3, #32]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f082 0202 	eor.w	r2, r2, #2
 8009632:	621a      	str	r2, [r3, #32]

				break;
 8009634:	e01b      	b.n	800966e <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6a1a      	ldr	r2, [r3, #32]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f082 0220 	eor.w	r2, r2, #32
 8009644:	621a      	str	r2, [r3, #32]

				break;
 8009646:	e012      	b.n	800966e <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6a1a      	ldr	r2, [r3, #32]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8009656:	621a      	str	r2, [r3, #32]

				break;
 8009658:	e009      	b.n	800966e <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	6a1a      	ldr	r2, [r3, #32]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8009668:	621a      	str	r2, [r3, #32]

				break;
 800966a:	e000      	b.n	800966e <PWMx_Toggle+0x72>
			}

			default: {
				break;
 800966c:	bf00      	nop
			}
			}


}
 800966e:	bf00      	nop
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop

0800967c <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	4603      	mov	r3, r0
 8009684:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 8009686:	4b92      	ldr	r3, [pc, #584]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a91      	ldr	r2, [pc, #580]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800968c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009690:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8009692:	4b8f      	ldr	r3, [pc, #572]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009698:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 800969a:	4b8e      	ldr	r3, [pc, #568]	; (80098d4 <RCC_enableMaxFrequencies+0x258>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a8d      	ldr	r2, [pc, #564]	; (80098d4 <RCC_enableMaxFrequencies+0x258>)
 80096a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096a4:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 80096a6:	4b8a      	ldr	r3, [pc, #552]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	4a89      	ldr	r2, [pc, #548]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80096ac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80096b0:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 80096b2:	79fb      	ldrb	r3, [r7, #7]
 80096b4:	2b08      	cmp	r3, #8
 80096b6:	f200 82fc 	bhi.w	8009cb2 <RCC_enableMaxFrequencies+0x636>
 80096ba:	a201      	add	r2, pc, #4	; (adr r2, 80096c0 <RCC_enableMaxFrequencies+0x44>)
 80096bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c0:	080096e5 	.word	0x080096e5
 80096c4:	08009787 	.word	0x08009787
 80096c8:	08009829 	.word	0x08009829
 80096cc:	080098dd 	.word	0x080098dd
 80096d0:	0800997f 	.word	0x0800997f
 80096d4:	08009a21 	.word	0x08009a21
 80096d8:	08009acd 	.word	0x08009acd
 80096dc:	08009b6f 	.word	0x08009b6f
 80096e0:	08009c11 	.word	0x08009c11
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80096e4:	4b7a      	ldr	r3, [pc, #488]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	4a79      	ldr	r2, [pc, #484]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80096ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096ee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80096f0:	4b77      	ldr	r3, [pc, #476]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	4a76      	ldr	r2, [pc, #472]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80096f6:	f043 0310 	orr.w	r3, r3, #16
 80096fa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80096fc:	4b74      	ldr	r3, [pc, #464]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	4a73      	ldr	r2, [pc, #460]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009702:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800970a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800970c:	4b70      	ldr	r3, [pc, #448]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	4a6f      	ldr	r2, [pc, #444]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009712:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8009716:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009718:	4b6d      	ldr	r3, [pc, #436]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	4a6c      	ldr	r2, [pc, #432]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800971e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009722:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8009724:	4b6a      	ldr	r3, [pc, #424]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	4a69      	ldr	r2, [pc, #420]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800972a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800972e:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009730:	4b67      	ldr	r3, [pc, #412]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	4a66      	ldr	r2, [pc, #408]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800973a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800973c:	4b64      	ldr	r3, [pc, #400]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	4a63      	ldr	r2, [pc, #396]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009742:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009746:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8009748:	4b61      	ldr	r3, [pc, #388]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	4a60      	ldr	r2, [pc, #384]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800974e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009752:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009754:	4b5e      	ldr	r3, [pc, #376]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a5d      	ldr	r2, [pc, #372]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800975a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800975e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009760:	e000      	b.n	8009764 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 8009762:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009764:	4b5a      	ldr	r3, [pc, #360]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d0f8      	beq.n	8009762 <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009770:	4b59      	ldr	r3, [pc, #356]	; (80098d8 <RCC_enableMaxFrequencies+0x25c>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a58      	ldr	r2, [pc, #352]	; (80098d8 <RCC_enableMaxFrequencies+0x25c>)
 8009776:	f023 030f 	bic.w	r3, r3, #15
 800977a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800977c:	4b56      	ldr	r3, [pc, #344]	; (80098d8 <RCC_enableMaxFrequencies+0x25c>)
 800977e:	4a56      	ldr	r2, [pc, #344]	; (80098d8 <RCC_enableMaxFrequencies+0x25c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6013      	str	r3, [r2, #0]

			break;
 8009784:	e296      	b.n	8009cb4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009786:	4b52      	ldr	r3, [pc, #328]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	4a51      	ldr	r2, [pc, #324]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800978c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009790:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009792:	4b4f      	ldr	r3, [pc, #316]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	4a4e      	ldr	r2, [pc, #312]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009798:	f043 0310 	orr.w	r3, r3, #16
 800979c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800979e:	4b4c      	ldr	r3, [pc, #304]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	4a4b      	ldr	r2, [pc, #300]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80097a4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80097a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ac:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 80097ae:	4b48      	ldr	r3, [pc, #288]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	4a47      	ldr	r2, [pc, #284]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80097b4:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 80097b8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80097ba:	4b45      	ldr	r3, [pc, #276]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	4a44      	ldr	r2, [pc, #272]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80097c0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80097c4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 80097c6:	4b42      	ldr	r3, [pc, #264]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	4a41      	ldr	r2, [pc, #260]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80097cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097d0:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80097d2:	4b3f      	ldr	r3, [pc, #252]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	4a3e      	ldr	r2, [pc, #248]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80097d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097dc:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80097de:	4b3c      	ldr	r3, [pc, #240]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	4a3b      	ldr	r2, [pc, #236]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80097e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80097e8:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80097ea:	4b39      	ldr	r3, [pc, #228]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	4a38      	ldr	r2, [pc, #224]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80097f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097f4:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80097f6:	4b36      	ldr	r3, [pc, #216]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a35      	ldr	r2, [pc, #212]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80097fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009800:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009802:	e000      	b.n	8009806 <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 8009804:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009806:	4b32      	ldr	r3, [pc, #200]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d0f8      	beq.n	8009804 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009812:	4b31      	ldr	r3, [pc, #196]	; (80098d8 <RCC_enableMaxFrequencies+0x25c>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a30      	ldr	r2, [pc, #192]	; (80098d8 <RCC_enableMaxFrequencies+0x25c>)
 8009818:	f023 030f 	bic.w	r3, r3, #15
 800981c:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800981e:	4b2e      	ldr	r3, [pc, #184]	; (80098d8 <RCC_enableMaxFrequencies+0x25c>)
 8009820:	4a2d      	ldr	r2, [pc, #180]	; (80098d8 <RCC_enableMaxFrequencies+0x25c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	6013      	str	r3, [r2, #0]

			break;
 8009826:	e245      	b.n	8009cb4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009828:	4b29      	ldr	r3, [pc, #164]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	4a28      	ldr	r2, [pc, #160]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800982e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009832:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009834:	4b26      	ldr	r3, [pc, #152]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	4a25      	ldr	r2, [pc, #148]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800983a:	f043 0310 	orr.w	r3, r3, #16
 800983e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009840:	4b23      	ldr	r3, [pc, #140]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	4a22      	ldr	r2, [pc, #136]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009846:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800984a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800984e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 8009850:	4b1f      	ldr	r3, [pc, #124]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	4a1e      	ldr	r2, [pc, #120]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009856:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 800985a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800985c:	4b1c      	ldr	r3, [pc, #112]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	4a1b      	ldr	r2, [pc, #108]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009862:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009866:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8009868:	4b19      	ldr	r3, [pc, #100]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	4a18      	ldr	r2, [pc, #96]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800986e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009872:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009874:	4b16      	ldr	r3, [pc, #88]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	4a15      	ldr	r2, [pc, #84]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800987a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800987e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009880:	4b13      	ldr	r3, [pc, #76]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	4a12      	ldr	r2, [pc, #72]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009886:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800988a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800988c:	4b10      	ldr	r3, [pc, #64]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	4a0f      	ldr	r2, [pc, #60]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 8009892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009896:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009898:	4b0d      	ldr	r3, [pc, #52]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a0c      	ldr	r2, [pc, #48]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 800989e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098a2:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80098a4:	e000      	b.n	80098a8 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 80098a6:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80098a8:	4b09      	ldr	r3, [pc, #36]	; (80098d0 <RCC_enableMaxFrequencies+0x254>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d0f8      	beq.n	80098a6 <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80098b4:	4b08      	ldr	r3, [pc, #32]	; (80098d8 <RCC_enableMaxFrequencies+0x25c>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a07      	ldr	r2, [pc, #28]	; (80098d8 <RCC_enableMaxFrequencies+0x25c>)
 80098ba:	f023 030f 	bic.w	r3, r3, #15
 80098be:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80098c0:	4b05      	ldr	r3, [pc, #20]	; (80098d8 <RCC_enableMaxFrequencies+0x25c>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a04      	ldr	r2, [pc, #16]	; (80098d8 <RCC_enableMaxFrequencies+0x25c>)
 80098c6:	f043 0301 	orr.w	r3, r3, #1
 80098ca:	6013      	str	r3, [r2, #0]


			break;
 80098cc:	e1f2      	b.n	8009cb4 <RCC_enableMaxFrequencies+0x638>
 80098ce:	bf00      	nop
 80098d0:	40023800 	.word	0x40023800
 80098d4:	40007000 	.word	0x40007000
 80098d8:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80098dc:	4b79      	ldr	r3, [pc, #484]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	4a78      	ldr	r2, [pc, #480]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80098e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80098e6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80098e8:	4b76      	ldr	r3, [pc, #472]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	4a75      	ldr	r2, [pc, #468]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80098ee:	f043 0310 	orr.w	r3, r3, #16
 80098f2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80098f4:	4b73      	ldr	r3, [pc, #460]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	4a72      	ldr	r2, [pc, #456]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80098fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80098fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009902:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8009904:	4b6f      	ldr	r3, [pc, #444]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	4a6e      	ldr	r2, [pc, #440]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 800990a:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800990e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009910:	4b6c      	ldr	r3, [pc, #432]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	4a6b      	ldr	r2, [pc, #428]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009916:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800991a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800991c:	4b69      	ldr	r3, [pc, #420]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 800991e:	4a69      	ldr	r2, [pc, #420]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009924:	4b67      	ldr	r3, [pc, #412]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	4a66      	ldr	r2, [pc, #408]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 800992a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800992e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009930:	4b64      	ldr	r3, [pc, #400]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	4a63      	ldr	r2, [pc, #396]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009936:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800993a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800993c:	4b61      	ldr	r3, [pc, #388]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	4a60      	ldr	r2, [pc, #384]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009946:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009948:	4b5e      	ldr	r3, [pc, #376]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a5d      	ldr	r2, [pc, #372]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 800994e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009952:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009954:	e000      	b.n	8009958 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 8009956:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009958:	4b5a      	ldr	r3, [pc, #360]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d0f8      	beq.n	8009956 <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009964:	4b58      	ldr	r3, [pc, #352]	; (8009ac8 <RCC_enableMaxFrequencies+0x44c>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a57      	ldr	r2, [pc, #348]	; (8009ac8 <RCC_enableMaxFrequencies+0x44c>)
 800996a:	f023 030f 	bic.w	r3, r3, #15
 800996e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8009970:	4b55      	ldr	r3, [pc, #340]	; (8009ac8 <RCC_enableMaxFrequencies+0x44c>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a54      	ldr	r2, [pc, #336]	; (8009ac8 <RCC_enableMaxFrequencies+0x44c>)
 8009976:	f043 0301 	orr.w	r3, r3, #1
 800997a:	6013      	str	r3, [r2, #0]

			break;
 800997c:	e19a      	b.n	8009cb4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800997e:	4b51      	ldr	r3, [pc, #324]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	4a50      	ldr	r2, [pc, #320]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009984:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009988:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800998a:	4b4e      	ldr	r3, [pc, #312]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	4a4d      	ldr	r2, [pc, #308]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009990:	f043 0310 	orr.w	r3, r3, #16
 8009994:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009996:	4b4b      	ldr	r3, [pc, #300]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	4a4a      	ldr	r2, [pc, #296]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 800999c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80099a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099a4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 80099a6:	4b47      	ldr	r3, [pc, #284]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	4a46      	ldr	r2, [pc, #280]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80099ac:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 80099b0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80099b2:	4b44      	ldr	r3, [pc, #272]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	4a43      	ldr	r2, [pc, #268]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80099b8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80099bc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80099be:	4b41      	ldr	r3, [pc, #260]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80099c0:	4a40      	ldr	r2, [pc, #256]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80099c6:	4b3f      	ldr	r3, [pc, #252]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	4a3e      	ldr	r2, [pc, #248]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80099cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099d0:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80099d2:	4b3c      	ldr	r3, [pc, #240]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	4a3b      	ldr	r2, [pc, #236]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80099d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099dc:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80099de:	4b39      	ldr	r3, [pc, #228]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	4a38      	ldr	r2, [pc, #224]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80099e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099e8:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80099ea:	4b36      	ldr	r3, [pc, #216]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a35      	ldr	r2, [pc, #212]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80099f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099f4:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80099f6:	e000      	b.n	80099fa <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 80099f8:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80099fa:	4b32      	ldr	r3, [pc, #200]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d0f8      	beq.n	80099f8 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009a06:	4b30      	ldr	r3, [pc, #192]	; (8009ac8 <RCC_enableMaxFrequencies+0x44c>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a2f      	ldr	r2, [pc, #188]	; (8009ac8 <RCC_enableMaxFrequencies+0x44c>)
 8009a0c:	f023 030f 	bic.w	r3, r3, #15
 8009a10:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8009a12:	4b2d      	ldr	r3, [pc, #180]	; (8009ac8 <RCC_enableMaxFrequencies+0x44c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a2c      	ldr	r2, [pc, #176]	; (8009ac8 <RCC_enableMaxFrequencies+0x44c>)
 8009a18:	f043 0301 	orr.w	r3, r3, #1
 8009a1c:	6013      	str	r3, [r2, #0]

			break;
 8009a1e:	e149      	b.n	8009cb4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009a20:	4b28      	ldr	r3, [pc, #160]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	4a27      	ldr	r2, [pc, #156]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009a2a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009a2c:	4b25      	ldr	r3, [pc, #148]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	4a24      	ldr	r2, [pc, #144]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a32:	f043 0310 	orr.w	r3, r3, #16
 8009a36:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009a38:	4b22      	ldr	r3, [pc, #136]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	4a21      	ldr	r2, [pc, #132]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a46:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 8009a48:	4b1e      	ldr	r3, [pc, #120]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	4a1d      	ldr	r2, [pc, #116]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a4e:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8009a52:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009a54:	4b1b      	ldr	r3, [pc, #108]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	4a1a      	ldr	r2, [pc, #104]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a5a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009a5e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009a60:	4b18      	ldr	r3, [pc, #96]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a62:	4a18      	ldr	r2, [pc, #96]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009a68:	4b16      	ldr	r3, [pc, #88]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	4a15      	ldr	r2, [pc, #84]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a72:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009a74:	4b13      	ldr	r3, [pc, #76]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	4a12      	ldr	r2, [pc, #72]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a7e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8009a80:	4b10      	ldr	r3, [pc, #64]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	4a0f      	ldr	r2, [pc, #60]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009a8a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009a8c:	4b0d      	ldr	r3, [pc, #52]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a0c      	ldr	r2, [pc, #48]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a96:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009a98:	e000      	b.n	8009a9c <RCC_enableMaxFrequencies+0x420>
				__NOP();
 8009a9a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009a9c:	4b09      	ldr	r3, [pc, #36]	; (8009ac4 <RCC_enableMaxFrequencies+0x448>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d0f8      	beq.n	8009a9a <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009aa8:	4b07      	ldr	r3, [pc, #28]	; (8009ac8 <RCC_enableMaxFrequencies+0x44c>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a06      	ldr	r2, [pc, #24]	; (8009ac8 <RCC_enableMaxFrequencies+0x44c>)
 8009aae:	f023 030f 	bic.w	r3, r3, #15
 8009ab2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8009ab4:	4b04      	ldr	r3, [pc, #16]	; (8009ac8 <RCC_enableMaxFrequencies+0x44c>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a03      	ldr	r2, [pc, #12]	; (8009ac8 <RCC_enableMaxFrequencies+0x44c>)
 8009aba:	f043 0302 	orr.w	r3, r3, #2
 8009abe:	6013      	str	r3, [r2, #0]

			break;
 8009ac0:	e0f8      	b.n	8009cb4 <RCC_enableMaxFrequencies+0x638>
 8009ac2:	bf00      	nop
 8009ac4:	40023800 	.word	0x40023800
 8009ac8:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009acc:	4b84      	ldr	r3, [pc, #528]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	4a83      	ldr	r2, [pc, #524]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009ad6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009ad8:	4b81      	ldr	r3, [pc, #516]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	4a80      	ldr	r2, [pc, #512]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009ade:	f043 0310 	orr.w	r3, r3, #16
 8009ae2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009ae4:	4b7e      	ldr	r3, [pc, #504]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	4a7d      	ldr	r2, [pc, #500]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009aea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009af2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 8009af4:	4b7a      	ldr	r3, [pc, #488]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	4a79      	ldr	r2, [pc, #484]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009afa:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8009afe:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009b00:	4b77      	ldr	r3, [pc, #476]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	4a76      	ldr	r2, [pc, #472]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b06:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009b0a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009b0c:	4b74      	ldr	r3, [pc, #464]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b0e:	4a74      	ldr	r2, [pc, #464]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009b14:	4b72      	ldr	r3, [pc, #456]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	4a71      	ldr	r2, [pc, #452]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b1e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009b20:	4b6f      	ldr	r3, [pc, #444]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	4a6e      	ldr	r2, [pc, #440]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b2a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8009b2c:	4b6c      	ldr	r3, [pc, #432]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	4a6b      	ldr	r2, [pc, #428]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b36:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009b38:	4b69      	ldr	r3, [pc, #420]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a68      	ldr	r2, [pc, #416]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b42:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009b44:	e000      	b.n	8009b48 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 8009b46:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009b48:	4b65      	ldr	r3, [pc, #404]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d0f8      	beq.n	8009b46 <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009b54:	4b63      	ldr	r3, [pc, #396]	; (8009ce4 <RCC_enableMaxFrequencies+0x668>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a62      	ldr	r2, [pc, #392]	; (8009ce4 <RCC_enableMaxFrequencies+0x668>)
 8009b5a:	f023 030f 	bic.w	r3, r3, #15
 8009b5e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8009b60:	4b60      	ldr	r3, [pc, #384]	; (8009ce4 <RCC_enableMaxFrequencies+0x668>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a5f      	ldr	r2, [pc, #380]	; (8009ce4 <RCC_enableMaxFrequencies+0x668>)
 8009b66:	f043 0302 	orr.w	r3, r3, #2
 8009b6a:	6013      	str	r3, [r2, #0]

			break;
 8009b6c:	e0a2      	b.n	8009cb4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009b6e:	4b5c      	ldr	r3, [pc, #368]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	4a5b      	ldr	r2, [pc, #364]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009b78:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009b7a:	4b59      	ldr	r3, [pc, #356]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	4a58      	ldr	r2, [pc, #352]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b80:	f043 0310 	orr.w	r3, r3, #16
 8009b84:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009b86:	4b56      	ldr	r3, [pc, #344]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	4a55      	ldr	r2, [pc, #340]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b8c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b94:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8009b96:	4b52      	ldr	r3, [pc, #328]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	4a51      	ldr	r2, [pc, #324]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009b9c:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8009ba0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009ba2:	4b4f      	ldr	r3, [pc, #316]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	4a4e      	ldr	r2, [pc, #312]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009ba8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009bac:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009bae:	4b4c      	ldr	r3, [pc, #304]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009bb0:	4a4b      	ldr	r2, [pc, #300]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009bb6:	4b4a      	ldr	r3, [pc, #296]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	4a49      	ldr	r2, [pc, #292]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bc0:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009bc2:	4b47      	ldr	r3, [pc, #284]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	4a46      	ldr	r2, [pc, #280]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009bc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009bcc:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8009bce:	4b44      	ldr	r3, [pc, #272]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	4a43      	ldr	r2, [pc, #268]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009bd8:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009bda:	4b41      	ldr	r3, [pc, #260]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a40      	ldr	r2, [pc, #256]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009be0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009be4:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009be6:	e000      	b.n	8009bea <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 8009be8:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009bea:	4b3d      	ldr	r3, [pc, #244]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0f8      	beq.n	8009be8 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009bf6:	4b3b      	ldr	r3, [pc, #236]	; (8009ce4 <RCC_enableMaxFrequencies+0x668>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a3a      	ldr	r2, [pc, #232]	; (8009ce4 <RCC_enableMaxFrequencies+0x668>)
 8009bfc:	f023 030f 	bic.w	r3, r3, #15
 8009c00:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8009c02:	4b38      	ldr	r3, [pc, #224]	; (8009ce4 <RCC_enableMaxFrequencies+0x668>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a37      	ldr	r2, [pc, #220]	; (8009ce4 <RCC_enableMaxFrequencies+0x668>)
 8009c08:	f043 0302 	orr.w	r3, r3, #2
 8009c0c:	6013      	str	r3, [r2, #0]

			break;
 8009c0e:	e051      	b.n	8009cb4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009c10:	4b33      	ldr	r3, [pc, #204]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	4a32      	ldr	r2, [pc, #200]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009c1a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8009c1c:	4b30      	ldr	r3, [pc, #192]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	4a2f      	ldr	r2, [pc, #188]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c22:	f043 0308 	orr.w	r3, r3, #8
 8009c26:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009c28:	4b2d      	ldr	r3, [pc, #180]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	4a2c      	ldr	r2, [pc, #176]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c36:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8009c38:	4b29      	ldr	r3, [pc, #164]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	4a28      	ldr	r2, [pc, #160]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c3e:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8009c42:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009c44:	4b26      	ldr	r3, [pc, #152]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	4a25      	ldr	r2, [pc, #148]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009c4e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009c50:	4b23      	ldr	r3, [pc, #140]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c52:	4a23      	ldr	r2, [pc, #140]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009c58:	4b21      	ldr	r3, [pc, #132]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	4a20      	ldr	r2, [pc, #128]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c62:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009c64:	4b1e      	ldr	r3, [pc, #120]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	4a1d      	ldr	r2, [pc, #116]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c6e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8009c70:	4b1b      	ldr	r3, [pc, #108]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	4a1a      	ldr	r2, [pc, #104]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c7a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009c7c:	4b18      	ldr	r3, [pc, #96]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a17      	ldr	r2, [pc, #92]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c86:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009c88:	e000      	b.n	8009c8c <RCC_enableMaxFrequencies+0x610>
				__NOP();
 8009c8a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009c8c:	4b14      	ldr	r3, [pc, #80]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d0f8      	beq.n	8009c8a <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009c98:	4b12      	ldr	r3, [pc, #72]	; (8009ce4 <RCC_enableMaxFrequencies+0x668>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a11      	ldr	r2, [pc, #68]	; (8009ce4 <RCC_enableMaxFrequencies+0x668>)
 8009c9e:	f023 030f 	bic.w	r3, r3, #15
 8009ca2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8009ca4:	4b0f      	ldr	r3, [pc, #60]	; (8009ce4 <RCC_enableMaxFrequencies+0x668>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a0e      	ldr	r2, [pc, #56]	; (8009ce4 <RCC_enableMaxFrequencies+0x668>)
 8009caa:	f043 0303 	orr.w	r3, r3, #3
 8009cae:	6013      	str	r3, [r2, #0]

			break;
 8009cb0:	e000      	b.n	8009cb4 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 8009cb2:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8009cb4:	4b0a      	ldr	r3, [pc, #40]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	4a09      	ldr	r2, [pc, #36]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009cba:	f043 0302 	orr.w	r3, r3, #2
 8009cbe:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8009cc0:	e000      	b.n	8009cc4 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 8009cc2:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8009cc4:	4b06      	ldr	r3, [pc, #24]	; (8009ce0 <RCC_enableMaxFrequencies+0x664>)
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	f003 0308 	and.w	r3, r3, #8
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d0f8      	beq.n	8009cc2 <RCC_enableMaxFrequencies+0x646>
	}

//	SystemCoreClockUpdate();

}
 8009cd0:	bf00      	nop
 8009cd2:	bf00      	nop
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	40023800 	.word	0x40023800
 8009ce4:	40023c00 	.word	0x40023c00

08009ce8 <__NVIC_EnableIRQ>:
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	db0b      	blt.n	8009d12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009cfa:	79fb      	ldrb	r3, [r7, #7]
 8009cfc:	f003 021f 	and.w	r2, r3, #31
 8009d00:	4907      	ldr	r1, [pc, #28]	; (8009d20 <__NVIC_EnableIRQ+0x38>)
 8009d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d06:	095b      	lsrs	r3, r3, #5
 8009d08:	2001      	movs	r0, #1
 8009d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8009d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009d12:	bf00      	nop
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	e000e100 	.word	0xe000e100

08009d24 <__NVIC_SetPriority>:
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	6039      	str	r1, [r7, #0]
 8009d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	db0a      	blt.n	8009d4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	b2da      	uxtb	r2, r3
 8009d3c:	490c      	ldr	r1, [pc, #48]	; (8009d70 <__NVIC_SetPriority+0x4c>)
 8009d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d42:	0112      	lsls	r2, r2, #4
 8009d44:	b2d2      	uxtb	r2, r2
 8009d46:	440b      	add	r3, r1
 8009d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009d4c:	e00a      	b.n	8009d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	4908      	ldr	r1, [pc, #32]	; (8009d74 <__NVIC_SetPriority+0x50>)
 8009d54:	79fb      	ldrb	r3, [r7, #7]
 8009d56:	f003 030f 	and.w	r3, r3, #15
 8009d5a:	3b04      	subs	r3, #4
 8009d5c:	0112      	lsls	r2, r2, #4
 8009d5e:	b2d2      	uxtb	r2, r2
 8009d60:	440b      	add	r3, r1
 8009d62:	761a      	strb	r2, [r3, #24]
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	e000e100 	.word	0xe000e100
 8009d74:	e000ed00 	.word	0xe000ed00

08009d78 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8009d78:	b590      	push	{r4, r7, lr}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d80:	b672      	cpsid	i
}
 8009d82:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a91      	ldr	r2, [pc, #580]	; (8009fd0 <USART_Config+0x258>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d106      	bne.n	8009d9c <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8009d8e:	4b91      	ldr	r3, [pc, #580]	; (8009fd4 <USART_Config+0x25c>)
 8009d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d92:	4a90      	ldr	r2, [pc, #576]	; (8009fd4 <USART_Config+0x25c>)
 8009d94:	f043 0310 	orr.w	r3, r3, #16
 8009d98:	6453      	str	r3, [r2, #68]	; 0x44
 8009d9a:	e018      	b.n	8009dce <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a8d      	ldr	r2, [pc, #564]	; (8009fd8 <USART_Config+0x260>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d106      	bne.n	8009db4 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8009da6:	4b8b      	ldr	r3, [pc, #556]	; (8009fd4 <USART_Config+0x25c>)
 8009da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009daa:	4a8a      	ldr	r2, [pc, #552]	; (8009fd4 <USART_Config+0x25c>)
 8009dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009db0:	6413      	str	r3, [r2, #64]	; 0x40
 8009db2:	e00c      	b.n	8009dce <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a88      	ldr	r2, [pc, #544]	; (8009fdc <USART_Config+0x264>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d106      	bne.n	8009dcc <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8009dbe:	4b85      	ldr	r3, [pc, #532]	; (8009fd4 <USART_Config+0x25c>)
 8009dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dc2:	4a84      	ldr	r2, [pc, #528]	; (8009fd4 <USART_Config+0x25c>)
 8009dc4:	f043 0320 	orr.w	r3, r3, #32
 8009dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8009dca:	e000      	b.n	8009dce <USART_Config+0x56>
	}
	else{
		__NOP();
 8009dcc:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	7a5b      	ldrb	r3, [r3, #9]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d025      	beq.n	8009e32 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	7a5b      	ldrb	r3, [r3, #9]
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d110      	bne.n	8009e10 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	68da      	ldr	r2, [r3, #12]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009dfc:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68da      	ldr	r2, [r3, #12]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e0c:	60da      	str	r2, [r3, #12]
 8009e0e:	e018      	b.n	8009e42 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68da      	ldr	r2, [r3, #12]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e1e:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68da      	ldr	r2, [r3, #12]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e2e:	60da      	str	r2, [r3, #12]
 8009e30:	e007      	b.n	8009e42 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68da      	ldr	r2, [r3, #12]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e40:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	7a1b      	ldrb	r3, [r3, #8]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d108      	bne.n	8009e5c <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68da      	ldr	r2, [r3, #12]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e58:	60da      	str	r2, [r3, #12]
 8009e5a:	e007      	b.n	8009e6c <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68da      	ldr	r2, [r3, #12]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009e6a:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	7a9b      	ldrb	r3, [r3, #10]
 8009e70:	2b03      	cmp	r3, #3
 8009e72:	d82f      	bhi.n	8009ed4 <USART_Config+0x15c>
 8009e74:	a201      	add	r2, pc, #4	; (adr r2, 8009e7c <USART_Config+0x104>)
 8009e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7a:	bf00      	nop
 8009e7c:	08009e8d 	.word	0x08009e8d
 8009e80:	08009e9f 	.word	0x08009e9f
 8009e84:	08009eb1 	.word	0x08009eb1
 8009e88:	08009ec3 	.word	0x08009ec3
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	691a      	ldr	r2, [r3, #16]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009e9a:	611a      	str	r2, [r3, #16]
			break;
 8009e9c:	e023      	b.n	8009ee6 <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	691a      	ldr	r2, [r3, #16]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009eac:	611a      	str	r2, [r3, #16]
			break;
 8009eae:	e01a      	b.n	8009ee6 <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	691a      	ldr	r2, [r3, #16]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ebe:	611a      	str	r2, [r3, #16]
			break;
 8009ec0:	e011      	b.n	8009ee6 <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	691a      	ldr	r2, [r3, #16]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8009ed0:	611a      	str	r2, [r3, #16]
			break;
 8009ed2:	e008      	b.n	8009ee6 <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	691a      	ldr	r2, [r3, #16]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009ee2:	611a      	str	r2, [r3, #16]
			break;
 8009ee4:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68da      	ldr	r2, [r3, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681c      	ldr	r4, [r3, #0]
 8009eee:	4611      	mov	r1, r2
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 f8d9 	bl	800a0a8 <brrCalculus>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	799b      	ldrb	r3, [r3, #6]
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	d82e      	bhi.n	8009f60 <USART_Config+0x1e8>
 8009f02:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <USART_Config+0x190>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f19 	.word	0x08009f19
 8009f0c:	08009f2b 	.word	0x08009f2b
 8009f10:	08009f3d 	.word	0x08009f3d
 8009f14:	08009f4f 	.word	0x08009f4f
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68da      	ldr	r2, [r3, #12]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f042 0208 	orr.w	r2, r2, #8
 8009f26:	60da      	str	r2, [r3, #12]
			break;
 8009f28:	e023      	b.n	8009f72 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68da      	ldr	r2, [r3, #12]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f042 0204 	orr.w	r2, r2, #4
 8009f38:	60da      	str	r2, [r3, #12]
			break;
 8009f3a:	e01a      	b.n	8009f72 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	68da      	ldr	r2, [r3, #12]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f042 020c 	orr.w	r2, r2, #12
 8009f4a:	60da      	str	r2, [r3, #12]
			break;
 8009f4c:	e011      	b.n	8009f72 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68da      	ldr	r2, [r3, #12]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f022 020c 	bic.w	r2, r2, #12
 8009f5c:	60da      	str	r2, [r3, #12]
			break;
 8009f5e:	e008      	b.n	8009f72 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68da      	ldr	r2, [r3, #12]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f022 020c 	bic.w	r2, r2, #12
 8009f6e:	60da      	str	r2, [r3, #12]
			break;
 8009f70:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	799b      	ldrb	r3, [r3, #6]
 8009f76:	2b03      	cmp	r3, #3
 8009f78:	d008      	beq.n	8009f8c <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68da      	ldr	r2, [r3, #12]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f88:	60da      	str	r2, [r3, #12]
 8009f8a:	e007      	b.n	8009f9c <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68da      	ldr	r2, [r3, #12]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f9a:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	795b      	ldrb	r3, [r3, #5]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d139      	bne.n	800a018 <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68da      	ldr	r2, [r3, #12]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f042 0220 	orr.w	r2, r2, #32
 8009fb2:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a05      	ldr	r2, [pc, #20]	; (8009fd0 <USART_Config+0x258>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d110      	bne.n	8009fe0 <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8009fbe:	2025      	movs	r0, #37	; 0x25
 8009fc0:	f7ff fe92 	bl	8009ce8 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	2025      	movs	r0, #37	; 0x25
 8009fc8:	f7ff feac 	bl	8009d24 <__NVIC_SetPriority>
 8009fcc:	e02c      	b.n	800a028 <USART_Config+0x2b0>
 8009fce:	bf00      	nop
 8009fd0:	40011000 	.word	0x40011000
 8009fd4:	40023800 	.word	0x40023800
 8009fd8:	40004400 	.word	0x40004400
 8009fdc:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a2c      	ldr	r2, [pc, #176]	; (800a098 <USART_Config+0x320>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d107      	bne.n	8009ffa <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8009fea:	2026      	movs	r0, #38	; 0x26
 8009fec:	f7ff fe7c 	bl	8009ce8 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 8009ff0:	2101      	movs	r1, #1
 8009ff2:	2026      	movs	r0, #38	; 0x26
 8009ff4:	f7ff fe96 	bl	8009d24 <__NVIC_SetPriority>
 8009ff8:	e016      	b.n	800a028 <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a27      	ldr	r2, [pc, #156]	; (800a09c <USART_Config+0x324>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d107      	bne.n	800a014 <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800a004:	2047      	movs	r0, #71	; 0x47
 800a006:	f7ff fe6f 	bl	8009ce8 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 800a00a:	2101      	movs	r1, #1
 800a00c:	2047      	movs	r0, #71	; 0x47
 800a00e:	f7ff fe89 	bl	8009d24 <__NVIC_SetPriority>
 800a012:	e009      	b.n	800a028 <USART_Config+0x2b0>
		}
		else{
				__NOP();
 800a014:	bf00      	nop
 800a016:	e007      	b.n	800a028 <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68da      	ldr	r2, [r3, #12]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 0220 	bic.w	r2, r2, #32
 800a026:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	791b      	ldrb	r3, [r3, #4]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d124      	bne.n	800a07a <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68da      	ldr	r2, [r3, #12]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a03e:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a16      	ldr	r2, [pc, #88]	; (800a0a0 <USART_Config+0x328>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d103      	bne.n	800a052 <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800a04a:	2025      	movs	r0, #37	; 0x25
 800a04c:	f7ff fe4c 	bl	8009ce8 <__NVIC_EnableIRQ>
 800a050:	e01b      	b.n	800a08a <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a10      	ldr	r2, [pc, #64]	; (800a098 <USART_Config+0x320>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d103      	bne.n	800a064 <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800a05c:	2026      	movs	r0, #38	; 0x26
 800a05e:	f7ff fe43 	bl	8009ce8 <__NVIC_EnableIRQ>
 800a062:	e012      	b.n	800a08a <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a0c      	ldr	r2, [pc, #48]	; (800a09c <USART_Config+0x324>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d103      	bne.n	800a076 <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800a06e:	2047      	movs	r0, #71	; 0x47
 800a070:	f7ff fe3a 	bl	8009ce8 <__NVIC_EnableIRQ>
 800a074:	e009      	b.n	800a08a <USART_Config+0x312>
		}
		else{
				__NOP();
 800a076:	bf00      	nop
 800a078:	e007      	b.n	800a08a <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68da      	ldr	r2, [r3, #12]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a088:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800a08a:	b662      	cpsie	i
}
 800a08c:	bf00      	nop
	}

	__enable_irq();
}
 800a08e:	bf00      	nop
 800a090:	370c      	adds	r7, #12
 800a092:	46bd      	mov	sp, r7
 800a094:	bd90      	pop	{r4, r7, pc}
 800a096:	bf00      	nop
 800a098:	40004400 	.word	0x40004400
 800a09c:	40011400 	.word	0x40011400
 800a0a0:	40011000 	.word	0x40011000
 800a0a4:	00000000 	.word	0x00000000

0800a0a8 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 800a0a8:	b5b0      	push	{r4, r5, r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	79db      	ldrb	r3, [r3, #7]
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	f200 8217 	bhi.w	800a4ea <brrCalculus+0x442>
 800a0bc:	a201      	add	r2, pc, #4	; (adr r2, 800a0c4 <brrCalculus+0x1c>)
 800a0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c2:	bf00      	nop
 800a0c4:	0800a0d5 	.word	0x0800a0d5
 800a0c8:	0800a1cf 	.word	0x0800a1cf
 800a0cc:	0800a2e9 	.word	0x0800a2e9
 800a0d0:	0800a3f1 	.word	0x0800a3f1

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 800a0d4:	4980      	ldr	r1, [pc, #512]	; (800a2d8 <brrCalculus+0x230>)
 800a0d6:	a37c      	add	r3, pc, #496	; (adr r3, 800a2c8 <brrCalculus+0x220>)
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	ee07 3a90 	vmov	s15, r3
 800a0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ea:	ee17 0a90 	vmov	r0, s15
 800a0ee:	f7f6 fa43 	bl	8000578 <__aeabi_f2d>
 800a0f2:	4b79      	ldr	r3, [pc, #484]	; (800a2d8 <brrCalculus+0x230>)
 800a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f8:	f7f6 fa96 	bl	8000628 <__aeabi_dmul>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	460b      	mov	r3, r1
 800a100:	4975      	ldr	r1, [pc, #468]	; (800a2d8 <brrCalculus+0x230>)
 800a102:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800a106:	4b74      	ldr	r3, [pc, #464]	; (800a2d8 <brrCalculus+0x230>)
 800a108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10c:	4610      	mov	r0, r2
 800a10e:	4619      	mov	r1, r3
 800a110:	f7f6 fd3a 	bl	8000b88 <__aeabi_d2iz>
 800a114:	4603      	mov	r3, r0
 800a116:	b29a      	uxth	r2, r3
 800a118:	4b70      	ldr	r3, [pc, #448]	; (800a2dc <brrCalculus+0x234>)
 800a11a:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800a11c:	4b6e      	ldr	r3, [pc, #440]	; (800a2d8 <brrCalculus+0x230>)
 800a11e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a122:	4b6d      	ldr	r3, [pc, #436]	; (800a2d8 <brrCalculus+0x230>)
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	4610      	mov	r0, r2
 800a12a:	4619      	mov	r1, r3
 800a12c:	f7f6 fd2c 	bl	8000b88 <__aeabi_d2iz>
 800a130:	4603      	mov	r3, r0
 800a132:	4618      	mov	r0, r3
 800a134:	f7f6 fa0e 	bl	8000554 <__aeabi_i2d>
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	4620      	mov	r0, r4
 800a13e:	4629      	mov	r1, r5
 800a140:	f7f6 f8ba 	bl	80002b8 <__aeabi_dsub>
 800a144:	4602      	mov	r2, r0
 800a146:	460b      	mov	r3, r1
 800a148:	4610      	mov	r0, r2
 800a14a:	4619      	mov	r1, r3
 800a14c:	f7f6 fd64 	bl	8000c18 <__aeabi_d2f>
 800a150:	4603      	mov	r3, r0
 800a152:	4a63      	ldr	r2, [pc, #396]	; (800a2e0 <brrCalculus+0x238>)
 800a154:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800a156:	4b62      	ldr	r3, [pc, #392]	; (800a2e0 <brrCalculus+0x238>)
 800a158:	edd3 7a00 	vldr	s15, [r3]
 800a15c:	2004      	movs	r0, #4
 800a15e:	eeb0 0a67 	vmov.f32	s0, s15
 800a162:	f000 fa6d 	bl	800a640 <roundToNDecimals>
 800a166:	eef0 7a40 	vmov.f32	s15, s0
 800a16a:	4b5d      	ldr	r3, [pc, #372]	; (800a2e0 <brrCalculus+0x238>)
 800a16c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800a170:	4b5b      	ldr	r3, [pc, #364]	; (800a2e0 <brrCalculus+0x238>)
 800a172:	edd3 7a00 	vldr	s15, [r3]
 800a176:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800a17a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a17e:	4b58      	ldr	r3, [pc, #352]	; (800a2e0 <brrCalculus+0x238>)
 800a180:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800a184:	4b56      	ldr	r3, [pc, #344]	; (800a2e0 <brrCalculus+0x238>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4618      	mov	r0, r3
 800a18a:	f7f6 f9f5 	bl	8000578 <__aeabi_f2d>
 800a18e:	4602      	mov	r2, r0
 800a190:	460b      	mov	r3, r1
 800a192:	ec43 2b10 	vmov	d0, r2, r3
 800a196:	f003 fac7 	bl	800d728 <round>
 800a19a:	ec53 2b10 	vmov	r2, r3, d0
 800a19e:	4610      	mov	r0, r2
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	f7f6 fd39 	bl	8000c18 <__aeabi_d2f>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	4a4d      	ldr	r2, [pc, #308]	; (800a2e0 <brrCalculus+0x238>)
 800a1aa:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800a1ac:	4b4b      	ldr	r3, [pc, #300]	; (800a2dc <brrCalculus+0x234>)
 800a1ae:	881b      	ldrh	r3, [r3, #0]
 800a1b0:	011b      	lsls	r3, r3, #4
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	4b4a      	ldr	r3, [pc, #296]	; (800a2e0 <brrCalculus+0x238>)
 800a1b6:	edd3 7a00 	vldr	s15, [r3]
 800a1ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1be:	ee17 3a90 	vmov	r3, s15
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	4b46      	ldr	r3, [pc, #280]	; (800a2e4 <brrCalculus+0x23c>)
 800a1ca:	801a      	strh	r2, [r3, #0]


		break;
 800a1cc:	e18f      	b.n	800a4ee <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 800a1ce:	4942      	ldr	r1, [pc, #264]	; (800a2d8 <brrCalculus+0x230>)
 800a1d0:	a33f      	add	r3, pc, #252	; (adr r3, 800a2d0 <brrCalculus+0x228>)
 800a1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d6:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	ee07 3a90 	vmov	s15, r3
 800a1e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1e4:	ee17 0a90 	vmov	r0, s15
 800a1e8:	f7f6 f9c6 	bl	8000578 <__aeabi_f2d>
 800a1ec:	4b3a      	ldr	r3, [pc, #232]	; (800a2d8 <brrCalculus+0x230>)
 800a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f2:	f7f6 fa19 	bl	8000628 <__aeabi_dmul>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4937      	ldr	r1, [pc, #220]	; (800a2d8 <brrCalculus+0x230>)
 800a1fc:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800a200:	4b35      	ldr	r3, [pc, #212]	; (800a2d8 <brrCalculus+0x230>)
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	4610      	mov	r0, r2
 800a208:	4619      	mov	r1, r3
 800a20a:	f7f6 fcbd 	bl	8000b88 <__aeabi_d2iz>
 800a20e:	4603      	mov	r3, r0
 800a210:	b29a      	uxth	r2, r3
 800a212:	4b32      	ldr	r3, [pc, #200]	; (800a2dc <brrCalculus+0x234>)
 800a214:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800a216:	4b30      	ldr	r3, [pc, #192]	; (800a2d8 <brrCalculus+0x230>)
 800a218:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a21c:	4b2e      	ldr	r3, [pc, #184]	; (800a2d8 <brrCalculus+0x230>)
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	4610      	mov	r0, r2
 800a224:	4619      	mov	r1, r3
 800a226:	f7f6 fcaf 	bl	8000b88 <__aeabi_d2iz>
 800a22a:	4603      	mov	r3, r0
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7f6 f991 	bl	8000554 <__aeabi_i2d>
 800a232:	4602      	mov	r2, r0
 800a234:	460b      	mov	r3, r1
 800a236:	4620      	mov	r0, r4
 800a238:	4629      	mov	r1, r5
 800a23a:	f7f6 f83d 	bl	80002b8 <__aeabi_dsub>
 800a23e:	4602      	mov	r2, r0
 800a240:	460b      	mov	r3, r1
 800a242:	4610      	mov	r0, r2
 800a244:	4619      	mov	r1, r3
 800a246:	f7f6 fce7 	bl	8000c18 <__aeabi_d2f>
 800a24a:	4603      	mov	r3, r0
 800a24c:	4a24      	ldr	r2, [pc, #144]	; (800a2e0 <brrCalculus+0x238>)
 800a24e:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800a250:	4b23      	ldr	r3, [pc, #140]	; (800a2e0 <brrCalculus+0x238>)
 800a252:	edd3 7a00 	vldr	s15, [r3]
 800a256:	2004      	movs	r0, #4
 800a258:	eeb0 0a67 	vmov.f32	s0, s15
 800a25c:	f000 f9f0 	bl	800a640 <roundToNDecimals>
 800a260:	eef0 7a40 	vmov.f32	s15, s0
 800a264:	4b1e      	ldr	r3, [pc, #120]	; (800a2e0 <brrCalculus+0x238>)
 800a266:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800a26a:	4b1d      	ldr	r3, [pc, #116]	; (800a2e0 <brrCalculus+0x238>)
 800a26c:	edd3 7a00 	vldr	s15, [r3]
 800a270:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800a274:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a278:	4b19      	ldr	r3, [pc, #100]	; (800a2e0 <brrCalculus+0x238>)
 800a27a:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800a27e:	4b18      	ldr	r3, [pc, #96]	; (800a2e0 <brrCalculus+0x238>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4618      	mov	r0, r3
 800a284:	f7f6 f978 	bl	8000578 <__aeabi_f2d>
 800a288:	4602      	mov	r2, r0
 800a28a:	460b      	mov	r3, r1
 800a28c:	ec43 2b10 	vmov	d0, r2, r3
 800a290:	f003 fa4a 	bl	800d728 <round>
 800a294:	ec53 2b10 	vmov	r2, r3, d0
 800a298:	4610      	mov	r0, r2
 800a29a:	4619      	mov	r1, r3
 800a29c:	f7f6 fcbc 	bl	8000c18 <__aeabi_d2f>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	4a0f      	ldr	r2, [pc, #60]	; (800a2e0 <brrCalculus+0x238>)
 800a2a4:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800a2a6:	4b0d      	ldr	r3, [pc, #52]	; (800a2dc <brrCalculus+0x234>)
 800a2a8:	881b      	ldrh	r3, [r3, #0]
 800a2aa:	011b      	lsls	r3, r3, #4
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	4b0c      	ldr	r3, [pc, #48]	; (800a2e0 <brrCalculus+0x238>)
 800a2b0:	edd3 7a00 	vldr	s15, [r3]
 800a2b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2b8:	ee17 3a90 	vmov	r3, s15
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	4b08      	ldr	r3, [pc, #32]	; (800a2e4 <brrCalculus+0x23c>)
 800a2c4:	801a      	strh	r2, [r3, #0]


		break;
 800a2c6:	e112      	b.n	800a4ee <brrCalculus+0x446>
 800a2c8:	b4e81b4f 	.word	0xb4e81b4f
 800a2cc:	3edb4e81 	.word	0x3edb4e81
 800a2d0:	b4e81b4f 	.word	0xb4e81b4f
 800a2d4:	3ecb4e81 	.word	0x3ecb4e81
 800a2d8:	200138a0 	.word	0x200138a0
 800a2dc:	20013894 	.word	0x20013894
 800a2e0:	20013898 	.word	0x20013898
 800a2e4:	20013892 	.word	0x20013892
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 800a2e8:	4989      	ldr	r1, [pc, #548]	; (800a510 <brrCalculus+0x468>)
 800a2ea:	a385      	add	r3, pc, #532	; (adr r3, 800a500 <brrCalculus+0x458>)
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	ee07 3a90 	vmov	s15, r3
 800a2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2fe:	ee17 0a90 	vmov	r0, s15
 800a302:	f7f6 f939 	bl	8000578 <__aeabi_f2d>
 800a306:	4b82      	ldr	r3, [pc, #520]	; (800a510 <brrCalculus+0x468>)
 800a308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30c:	f7f6 f98c 	bl	8000628 <__aeabi_dmul>
 800a310:	4602      	mov	r2, r0
 800a312:	460b      	mov	r3, r1
 800a314:	497e      	ldr	r1, [pc, #504]	; (800a510 <brrCalculus+0x468>)
 800a316:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800a31a:	4b7d      	ldr	r3, [pc, #500]	; (800a510 <brrCalculus+0x468>)
 800a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a320:	4610      	mov	r0, r2
 800a322:	4619      	mov	r1, r3
 800a324:	f7f6 fc30 	bl	8000b88 <__aeabi_d2iz>
 800a328:	4603      	mov	r3, r0
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	4b79      	ldr	r3, [pc, #484]	; (800a514 <brrCalculus+0x46c>)
 800a32e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800a330:	4b77      	ldr	r3, [pc, #476]	; (800a510 <brrCalculus+0x468>)
 800a332:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a336:	4b76      	ldr	r3, [pc, #472]	; (800a510 <brrCalculus+0x468>)
 800a338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33c:	4610      	mov	r0, r2
 800a33e:	4619      	mov	r1, r3
 800a340:	f7f6 fc22 	bl	8000b88 <__aeabi_d2iz>
 800a344:	4603      	mov	r3, r0
 800a346:	4618      	mov	r0, r3
 800a348:	f7f6 f904 	bl	8000554 <__aeabi_i2d>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4620      	mov	r0, r4
 800a352:	4629      	mov	r1, r5
 800a354:	f7f5 ffb0 	bl	80002b8 <__aeabi_dsub>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4610      	mov	r0, r2
 800a35e:	4619      	mov	r1, r3
 800a360:	f7f6 fc5a 	bl	8000c18 <__aeabi_d2f>
 800a364:	4603      	mov	r3, r0
 800a366:	4a6c      	ldr	r2, [pc, #432]	; (800a518 <brrCalculus+0x470>)
 800a368:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800a36a:	4b6b      	ldr	r3, [pc, #428]	; (800a518 <brrCalculus+0x470>)
 800a36c:	edd3 7a00 	vldr	s15, [r3]
 800a370:	2004      	movs	r0, #4
 800a372:	eeb0 0a67 	vmov.f32	s0, s15
 800a376:	f000 f963 	bl	800a640 <roundToNDecimals>
 800a37a:	eef0 7a40 	vmov.f32	s15, s0
 800a37e:	4b66      	ldr	r3, [pc, #408]	; (800a518 <brrCalculus+0x470>)
 800a380:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800a384:	4b64      	ldr	r3, [pc, #400]	; (800a518 <brrCalculus+0x470>)
 800a386:	edd3 7a00 	vldr	s15, [r3]
 800a38a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800a38e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a392:	4b61      	ldr	r3, [pc, #388]	; (800a518 <brrCalculus+0x470>)
 800a394:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 800a398:	4b5f      	ldr	r3, [pc, #380]	; (800a518 <brrCalculus+0x470>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7f6 f8eb 	bl	8000578 <__aeabi_f2d>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	ec43 2b10 	vmov	d0, r2, r3
 800a3aa:	f003 f9bd 	bl	800d728 <round>
 800a3ae:	ec51 0b10 	vmov	r0, r1, d0
 800a3b2:	f04f 0200 	mov.w	r2, #0
 800a3b6:	4b59      	ldr	r3, [pc, #356]	; (800a51c <brrCalculus+0x474>)
 800a3b8:	f7f5 ff80 	bl	80002bc <__adddf3>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	460b      	mov	r3, r1
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	f7f6 fc28 	bl	8000c18 <__aeabi_d2f>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	4a53      	ldr	r2, [pc, #332]	; (800a518 <brrCalculus+0x470>)
 800a3cc:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800a3ce:	4b51      	ldr	r3, [pc, #324]	; (800a514 <brrCalculus+0x46c>)
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	011b      	lsls	r3, r3, #4
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	4b50      	ldr	r3, [pc, #320]	; (800a518 <brrCalculus+0x470>)
 800a3d8:	edd3 7a00 	vldr	s15, [r3]
 800a3dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3e0:	ee17 3a90 	vmov	r3, s15
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	4b4d      	ldr	r3, [pc, #308]	; (800a520 <brrCalculus+0x478>)
 800a3ec:	801a      	strh	r2, [r3, #0]


		break;
 800a3ee:	e07e      	b.n	800a4ee <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 800a3f0:	4947      	ldr	r1, [pc, #284]	; (800a510 <brrCalculus+0x468>)
 800a3f2:	a345      	add	r3, pc, #276	; (adr r3, 800a508 <brrCalculus+0x460>)
 800a3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f8:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	ee07 3a90 	vmov	s15, r3
 800a402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a406:	ee17 0a90 	vmov	r0, s15
 800a40a:	f7f6 f8b5 	bl	8000578 <__aeabi_f2d>
 800a40e:	4b40      	ldr	r3, [pc, #256]	; (800a510 <brrCalculus+0x468>)
 800a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a414:	f7f6 f908 	bl	8000628 <__aeabi_dmul>
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	493c      	ldr	r1, [pc, #240]	; (800a510 <brrCalculus+0x468>)
 800a41e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800a422:	4b3b      	ldr	r3, [pc, #236]	; (800a510 <brrCalculus+0x468>)
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	4610      	mov	r0, r2
 800a42a:	4619      	mov	r1, r3
 800a42c:	f7f6 fbac 	bl	8000b88 <__aeabi_d2iz>
 800a430:	4603      	mov	r3, r0
 800a432:	b29a      	uxth	r2, r3
 800a434:	4b37      	ldr	r3, [pc, #220]	; (800a514 <brrCalculus+0x46c>)
 800a436:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800a438:	4b35      	ldr	r3, [pc, #212]	; (800a510 <brrCalculus+0x468>)
 800a43a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a43e:	4b34      	ldr	r3, [pc, #208]	; (800a510 <brrCalculus+0x468>)
 800a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a444:	4610      	mov	r0, r2
 800a446:	4619      	mov	r1, r3
 800a448:	f7f6 fb9e 	bl	8000b88 <__aeabi_d2iz>
 800a44c:	4603      	mov	r3, r0
 800a44e:	4618      	mov	r0, r3
 800a450:	f7f6 f880 	bl	8000554 <__aeabi_i2d>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	4620      	mov	r0, r4
 800a45a:	4629      	mov	r1, r5
 800a45c:	f7f5 ff2c 	bl	80002b8 <__aeabi_dsub>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4610      	mov	r0, r2
 800a466:	4619      	mov	r1, r3
 800a468:	f7f6 fbd6 	bl	8000c18 <__aeabi_d2f>
 800a46c:	4603      	mov	r3, r0
 800a46e:	4a2a      	ldr	r2, [pc, #168]	; (800a518 <brrCalculus+0x470>)
 800a470:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800a472:	4b29      	ldr	r3, [pc, #164]	; (800a518 <brrCalculus+0x470>)
 800a474:	edd3 7a00 	vldr	s15, [r3]
 800a478:	2004      	movs	r0, #4
 800a47a:	eeb0 0a67 	vmov.f32	s0, s15
 800a47e:	f000 f8df 	bl	800a640 <roundToNDecimals>
 800a482:	eef0 7a40 	vmov.f32	s15, s0
 800a486:	4b24      	ldr	r3, [pc, #144]	; (800a518 <brrCalculus+0x470>)
 800a488:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800a48c:	4b22      	ldr	r3, [pc, #136]	; (800a518 <brrCalculus+0x470>)
 800a48e:	edd3 7a00 	vldr	s15, [r3]
 800a492:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800a496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a49a:	4b1f      	ldr	r3, [pc, #124]	; (800a518 <brrCalculus+0x470>)
 800a49c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800a4a0:	4b1d      	ldr	r3, [pc, #116]	; (800a518 <brrCalculus+0x470>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7f6 f867 	bl	8000578 <__aeabi_f2d>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	ec43 2b10 	vmov	d0, r2, r3
 800a4b2:	f003 f939 	bl	800d728 <round>
 800a4b6:	ec53 2b10 	vmov	r2, r3, d0
 800a4ba:	4610      	mov	r0, r2
 800a4bc:	4619      	mov	r1, r3
 800a4be:	f7f6 fbab 	bl	8000c18 <__aeabi_d2f>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	4a14      	ldr	r2, [pc, #80]	; (800a518 <brrCalculus+0x470>)
 800a4c6:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800a4c8:	4b12      	ldr	r3, [pc, #72]	; (800a514 <brrCalculus+0x46c>)
 800a4ca:	881b      	ldrh	r3, [r3, #0]
 800a4cc:	011b      	lsls	r3, r3, #4
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	4b11      	ldr	r3, [pc, #68]	; (800a518 <brrCalculus+0x470>)
 800a4d2:	edd3 7a00 	vldr	s15, [r3]
 800a4d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4da:	ee17 3a90 	vmov	r3, s15
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	4b0e      	ldr	r3, [pc, #56]	; (800a520 <brrCalculus+0x478>)
 800a4e6:	801a      	strh	r2, [r3, #0]


		break;
 800a4e8:	e001      	b.n	800a4ee <brrCalculus+0x446>
	}
	default:{

		__NOP();
 800a4ea:	bf00      	nop
		break;
 800a4ec:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 800a4ee:	4b0c      	ldr	r3, [pc, #48]	; (800a520 <brrCalculus+0x478>)
 800a4f0:	881b      	ldrh	r3, [r3, #0]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bdb0      	pop	{r4, r5, r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	f3af 8000 	nop.w
 800a500:	789abcdf 	.word	0x789abcdf
 800a504:	3ec23456 	.word	0x3ec23456
 800a508:	789abcdf 	.word	0x789abcdf
 800a50c:	3ea23456 	.word	0x3ea23456
 800a510:	200138a0 	.word	0x200138a0
 800a514:	20013894 	.word	0x20013894
 800a518:	20013898 	.word	0x20013898
 800a51c:	3ff00000 	.word	0x3ff00000
 800a520:	20013892 	.word	0x20013892

0800a524 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800a52e:	e000      	b.n	800a532 <writeChar+0xe>
		__NOP();
 800a530:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d0f7      	beq.n	800a530 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	605a      	str	r2, [r3, #4]

}
 800a548:	bf00      	nop
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 800a55e:	e008      	b.n	800a572 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	4619      	mov	r1, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7ff ffdc 	bl	800a524 <writeChar>
		msgToSend ++ ;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	3301      	adds	r3, #1
 800a570:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1f2      	bne.n	800a560 <writeMsg+0xc>
	}
}
 800a57a:	bf00      	nop
 800a57c:	bf00      	nop
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <usart2Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
 800a584:	b480      	push	{r7}
 800a586:	af00      	add	r7, sp, #0
	__NOP();
 800a588:	bf00      	nop
}
 800a58a:	bf00      	nop
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <usart6Rx_Callback>:
__attribute__((weak))	void usart1Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart6Rx_Callback(void){
 800a594:	b480      	push	{r7}
 800a596:	af00      	add	r7, sp, #0
	__NOP();
 800a598:	bf00      	nop
}
 800a59a:	bf00      	nop
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 800a5a4:	b480      	push	{r7}
 800a5a6:	af00      	add	r7, sp, #0
	return auxRxData;
 800a5a8:	4b03      	ldr	r3, [pc, #12]	; (800a5b8 <getRxData+0x14>)
 800a5aa:	781b      	ldrb	r3, [r3, #0]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	200138a8 	.word	0x200138a8

0800a5bc <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 800a5c0:	4b07      	ldr	r3, [pc, #28]	; (800a5e0 <USART2_IRQHandler+0x24>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 0320 	and.w	r3, r3, #32
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d006      	beq.n	800a5da <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 800a5cc:	4b04      	ldr	r3, [pc, #16]	; (800a5e0 <USART2_IRQHandler+0x24>)
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	4b04      	ldr	r3, [pc, #16]	; (800a5e4 <USART2_IRQHandler+0x28>)
 800a5d4:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 800a5d6:	f7ff ffd5 	bl	800a584 <usart2Rx_Callback>
	}

}
 800a5da:	bf00      	nop
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	40004400 	.word	0x40004400
 800a5e4:	200138a8 	.word	0x200138a8

0800a5e8 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 800a5ec:	4b07      	ldr	r3, [pc, #28]	; (800a60c <USART1_IRQHandler+0x24>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 0320 	and.w	r3, r3, #32
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d006      	beq.n	800a606 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 800a5f8:	4b04      	ldr	r3, [pc, #16]	; (800a60c <USART1_IRQHandler+0x24>)
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	b2da      	uxtb	r2, r3
 800a5fe:	4b04      	ldr	r3, [pc, #16]	; (800a610 <USART1_IRQHandler+0x28>)
 800a600:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 800a602:	f7f7 fb0d 	bl	8001c20 <usart1Rx_Callback>
	}
}
 800a606:	bf00      	nop
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	40011000 	.word	0x40011000
 800a610:	200138a8 	.word	0x200138a8

0800a614 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 800a614:	b580      	push	{r7, lr}
 800a616:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 800a618:	4b07      	ldr	r3, [pc, #28]	; (800a638 <USART6_IRQHandler+0x24>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f003 0320 	and.w	r3, r3, #32
 800a620:	2b00      	cmp	r3, #0
 800a622:	d006      	beq.n	800a632 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 800a624:	4b04      	ldr	r3, [pc, #16]	; (800a638 <USART6_IRQHandler+0x24>)
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	4b04      	ldr	r3, [pc, #16]	; (800a63c <USART6_IRQHandler+0x28>)
 800a62c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800a62e:	f7ff ffb1 	bl	800a594 <usart6Rx_Callback>
	}

}
 800a632:	bf00      	nop
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	40011400 	.word	0x40011400
 800a63c:	200138a8 	.word	0x200138a8

0800a640 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	ed87 0a01 	vstr	s0, [r7, #4]
 800a64a:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 800a64c:	6838      	ldr	r0, [r7, #0]
 800a64e:	f7f5 ff81 	bl	8000554 <__aeabi_i2d>
 800a652:	4602      	mov	r2, r0
 800a654:	460b      	mov	r3, r1
 800a656:	ec43 2b11 	vmov	d1, r2, r3
 800a65a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 800a6d8 <roundToNDecimals+0x98>
 800a65e:	f003 f905 	bl	800d86c <pow>
 800a662:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7f5 ff86 	bl	8000578 <__aeabi_f2d>
 800a66c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a670:	f7f5 ffda 	bl	8000628 <__aeabi_dmul>
 800a674:	4602      	mov	r2, r0
 800a676:	460b      	mov	r3, r1
 800a678:	4610      	mov	r0, r2
 800a67a:	4619      	mov	r1, r3
 800a67c:	f7f6 facc 	bl	8000c18 <__aeabi_d2f>
 800a680:	4603      	mov	r3, r0
 800a682:	607b      	str	r3, [r7, #4]

    number = round(number);
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f7f5 ff77 	bl	8000578 <__aeabi_f2d>
 800a68a:	4602      	mov	r2, r0
 800a68c:	460b      	mov	r3, r1
 800a68e:	ec43 2b10 	vmov	d0, r2, r3
 800a692:	f003 f849 	bl	800d728 <round>
 800a696:	ec53 2b10 	vmov	r2, r3, d0
 800a69a:	4610      	mov	r0, r2
 800a69c:	4619      	mov	r1, r3
 800a69e:	f7f6 fabb 	bl	8000c18 <__aeabi_d2f>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	607b      	str	r3, [r7, #4]

    number /= factor;
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7f5 ff66 	bl	8000578 <__aeabi_f2d>
 800a6ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6b0:	f7f6 f8e4 	bl	800087c <__aeabi_ddiv>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	4610      	mov	r0, r2
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	f7f6 faac 	bl	8000c18 <__aeabi_d2f>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	607b      	str	r3, [r7, #4]

    return number;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	ee07 3a90 	vmov	s15, r3
}
 800a6ca:	eeb0 0a67 	vmov.f32	s0, s15
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	f3af 8000 	nop.w
 800a6d8:	00000000 	.word	0x00000000
 800a6dc:	40240000 	.word	0x40240000

0800a6e0 <usart_Set_Priority>:

void usart_Set_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority){
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6ec:	b672      	cpsid	i
}
 800a6ee:	bf00      	nop

	__disable_irq();


	if(ptrUsartHandler->ptrUSARTx == USART1){
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a12      	ldr	r2, [pc, #72]	; (800a740 <usart_Set_Priority+0x60>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d105      	bne.n	800a706 <usart_Set_Priority+0x26>
				// Seteamos la prioridad en NVIC para la interrupción del USART1
		__NVIC_SetPriority(USART1_IRQn, newPriority);
 800a6fa:	78fb      	ldrb	r3, [r7, #3]
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	2025      	movs	r0, #37	; 0x25
 800a700:	f7ff fb10 	bl	8009d24 <__NVIC_SetPriority>
 800a704:	e016      	b.n	800a734 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a0e      	ldr	r2, [pc, #56]	; (800a744 <usart_Set_Priority+0x64>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d105      	bne.n	800a71c <usart_Set_Priority+0x3c>
				// Seteamos la prioridad en NVIC para la interrupción del USART2
		__NVIC_SetPriority(USART2_IRQn, newPriority);
 800a710:	78fb      	ldrb	r3, [r7, #3]
 800a712:	4619      	mov	r1, r3
 800a714:	2026      	movs	r0, #38	; 0x26
 800a716:	f7ff fb05 	bl	8009d24 <__NVIC_SetPriority>
 800a71a:	e00b      	b.n	800a734 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a09      	ldr	r2, [pc, #36]	; (800a748 <usart_Set_Priority+0x68>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d105      	bne.n	800a732 <usart_Set_Priority+0x52>
			// Seteamos la prioridad en NVIC para la interrupción del USART6
		__NVIC_SetPriority(USART6_IRQn, newPriority);
 800a726:	78fb      	ldrb	r3, [r7, #3]
 800a728:	4619      	mov	r1, r3
 800a72a:	2047      	movs	r0, #71	; 0x47
 800a72c:	f7ff fafa 	bl	8009d24 <__NVIC_SetPriority>
 800a730:	e000      	b.n	800a734 <usart_Set_Priority+0x54>
	}
	else{
			__NOP();
 800a732:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800a734:	b662      	cpsie	i
}
 800a736:	bf00      	nop



	__enable_irq();

}
 800a738:	bf00      	nop
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	40011000 	.word	0x40011000
 800a744:	40004400 	.word	0x40004400
 800a748:	40011400 	.word	0x40011400

0800a74c <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
//
//	ptrDMA_handler[1]->ptrDMAType = DMA1;
//	ptrDMA_handler[1]->ptrDMAStream = DMA1_Stream6;

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a89      	ldr	r2, [pc, #548]	; (800a980 <i2c_config+0x234>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d106      	bne.n	800a76c <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 800a75e:	4b89      	ldr	r3, [pc, #548]	; (800a984 <i2c_config+0x238>)
 800a760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a762:	4a88      	ldr	r2, [pc, #544]	; (800a984 <i2c_config+0x238>)
 800a764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a768:	6413      	str	r3, [r2, #64]	; 0x40
 800a76a:	e016      	b.n	800a79a <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a85      	ldr	r2, [pc, #532]	; (800a988 <i2c_config+0x23c>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d106      	bne.n	800a784 <i2c_config+0x38>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 800a776:	4b83      	ldr	r3, [pc, #524]	; (800a984 <i2c_config+0x238>)
 800a778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77a:	4a82      	ldr	r2, [pc, #520]	; (800a984 <i2c_config+0x238>)
 800a77c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a780:	6413      	str	r3, [r2, #64]	; 0x40
 800a782:	e00a      	b.n	800a79a <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a80      	ldr	r2, [pc, #512]	; (800a98c <i2c_config+0x240>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d105      	bne.n	800a79a <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 800a78e:	4b7d      	ldr	r3, [pc, #500]	; (800a984 <i2c_config+0x238>)
 800a790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a792:	4a7c      	ldr	r2, [pc, #496]	; (800a984 <i2c_config+0x238>)
 800a794:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a798:	6413      	str	r3, [r2, #64]	; 0x40
	}



	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f022 0201 	bic.w	r2, r2, #1
 800a7a8:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a7aa:	e000      	b.n	800a7ae <i2c_config+0x62>
		__NOP();
 800a7ac:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	699b      	ldr	r3, [r3, #24]
 800a7b4:	f003 0302 	and.w	r3, r3, #2
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1f7      	bne.n	800a7ac <i2c_config+0x60>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7ca:	601a      	str	r2, [r3, #0]

	__NOP();
 800a7cc:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7dc:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	685a      	ldr	r2, [r3, #4]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800a7ec:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	79db      	ldrb	r3, [r3, #7]
 800a7f2:	2b10      	cmp	r3, #16
 800a7f4:	d108      	bne.n	800a808 <i2c_config+0xbc>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f042 0210 	orr.w	r2, r2, #16
 800a804:	605a      	str	r2, [r3, #4]
 800a806:	e018      	b.n	800a83a <i2c_config+0xee>

	}else if(ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_25_MHz_FOR_I2C){
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	79db      	ldrb	r3, [r3, #7]
 800a80c:	2b19      	cmp	r3, #25
 800a80e:	d108      	bne.n	800a822 <i2c_config+0xd6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_25_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	685a      	ldr	r2, [r3, #4]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f042 0219 	orr.w	r2, r2, #25
 800a81e:	605a      	str	r2, [r3, #4]
 800a820:	e00b      	b.n	800a83a <i2c_config+0xee>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	79db      	ldrb	r3, [r3, #7]
 800a826:	2b32      	cmp	r3, #50	; 0x32
 800a828:	d107      	bne.n	800a83a <i2c_config+0xee>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	685a      	ldr	r2, [r3, #4]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 800a838:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2200      	movs	r2, #0
 800a840:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2200      	movs	r2, #0
 800a848:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	795b      	ldrb	r3, [r3, #5]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d15c      	bne.n	800a90c <i2c_config+0x1c0>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	69da      	ldr	r2, [r3, #28]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a860:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	79db      	ldrb	r3, [r3, #7]
 800a866:	2b32      	cmp	r3, #50	; 0x32
 800a868:	d03f      	beq.n	800a8ea <i2c_config+0x19e>
 800a86a:	2b32      	cmp	r3, #50	; 0x32
 800a86c:	f300 80b2 	bgt.w	800a9d4 <i2c_config+0x288>
 800a870:	2b19      	cmp	r3, #25
 800a872:	d029      	beq.n	800a8c8 <i2c_config+0x17c>
 800a874:	2b19      	cmp	r3, #25
 800a876:	f300 80ad 	bgt.w	800a9d4 <i2c_config+0x288>
 800a87a:	2b04      	cmp	r3, #4
 800a87c:	d002      	beq.n	800a884 <i2c_config+0x138>
 800a87e:	2b10      	cmp	r3, #16
 800a880:	d011      	beq.n	800a8a6 <i2c_config+0x15a>


				break;
			}default:{

				break;
 800a882:	e0a7      	b.n	800a9d4 <i2c_config+0x288>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	69da      	ldr	r2, [r3, #28]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f042 0214 	orr.w	r2, r2, #20
 800a892:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	6a1a      	ldr	r2, [r3, #32]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f042 0205 	orr.w	r2, r2, #5
 800a8a2:	621a      	str	r2, [r3, #32]
				break;
 800a8a4:	e099      	b.n	800a9da <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	69da      	ldr	r2, [r3, #28]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800a8b4:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	6a1a      	ldr	r2, [r3, #32]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f042 0211 	orr.w	r2, r2, #17
 800a8c4:	621a      	str	r2, [r3, #32]
				break;
 800a8c6:	e088      	b.n	800a9da <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_25MHz << I2C_CCR_CCR_Pos);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	69da      	ldr	r2, [r3, #28]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 800a8d6:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_25MHz;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	6a1a      	ldr	r2, [r3, #32]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f042 0215 	orr.w	r2, r2, #21
 800a8e6:	621a      	str	r2, [r3, #32]
				break;
 800a8e8:	e077      	b.n	800a9da <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	69da      	ldr	r2, [r3, #28]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 800a8f8:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	6a1a      	ldr	r2, [r3, #32]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 800a908:	621a      	str	r2, [r3, #32]
				break;
 800a90a:	e066      	b.n	800a9da <i2c_config+0x28e>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	69da      	ldr	r2, [r3, #28]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a91a:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	79db      	ldrb	r3, [r3, #7]
 800a920:	2b32      	cmp	r3, #50	; 0x32
 800a922:	d046      	beq.n	800a9b2 <i2c_config+0x266>
 800a924:	2b32      	cmp	r3, #50	; 0x32
 800a926:	dc57      	bgt.n	800a9d8 <i2c_config+0x28c>
 800a928:	2b19      	cmp	r3, #25
 800a92a:	d031      	beq.n	800a990 <i2c_config+0x244>
 800a92c:	2b19      	cmp	r3, #25
 800a92e:	dc53      	bgt.n	800a9d8 <i2c_config+0x28c>
 800a930:	2b04      	cmp	r3, #4
 800a932:	d002      	beq.n	800a93a <i2c_config+0x1ee>
 800a934:	2b10      	cmp	r3, #16
 800a936:	d011      	beq.n	800a95c <i2c_config+0x210>


				break;
			}default:{

				break;
 800a938:	e04e      	b.n	800a9d8 <i2c_config+0x28c>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	69da      	ldr	r2, [r3, #28]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f042 0203 	orr.w	r2, r2, #3
 800a948:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	6a1a      	ldr	r2, [r3, #32]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f042 0202 	orr.w	r2, r2, #2
 800a958:	621a      	str	r2, [r3, #32]
				break;
 800a95a:	e03e      	b.n	800a9da <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	69da      	ldr	r2, [r3, #28]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f042 020d 	orr.w	r2, r2, #13
 800a96a:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	6a1a      	ldr	r2, [r3, #32]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f042 0206 	orr.w	r2, r2, #6
 800a97a:	621a      	str	r2, [r3, #32]
				break;
 800a97c:	e02d      	b.n	800a9da <i2c_config+0x28e>
 800a97e:	bf00      	nop
 800a980:	40005400 	.word	0x40005400
 800a984:	40023800 	.word	0x40023800
 800a988:	40005800 	.word	0x40005800
 800a98c:	40005c00 	.word	0x40005c00
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_25MHz << I2C_CCR_CCR_Pos);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	69da      	ldr	r2, [r3, #28]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f042 0215 	orr.w	r2, r2, #21
 800a99e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_25MHz;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	6a1a      	ldr	r2, [r3, #32]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f042 0208 	orr.w	r2, r2, #8
 800a9ae:	621a      	str	r2, [r3, #32]
				break;
 800a9b0:	e013      	b.n	800a9da <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	69da      	ldr	r2, [r3, #28]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800a9c0:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	6a1a      	ldr	r2, [r3, #32]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f042 0210 	orr.w	r2, r2, #16
 800a9d0:	621a      	str	r2, [r3, #32]
				break;
 800a9d2:	e002      	b.n	800a9da <i2c_config+0x28e>
				break;
 800a9d4:	bf00      	nop
 800a9d6:	e002      	b.n	800a9de <i2c_config+0x292>
				break;
 800a9d8:	bf00      	nop

		}

	}

	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a9da:	e000      	b.n	800a9de <i2c_config+0x292>
		__NOP();
 800a9dc:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	f003 0302 	and.w	r3, r3, #2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1f7      	bne.n	800a9dc <i2c_config+0x290>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f042 0201 	orr.w	r2, r2, #1
 800a9fa:	601a      	str	r2, [r3, #0]


}
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa1e:	601a      	str	r2, [r3, #0]
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	7a1b      	ldrb	r3, [r3, #8]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d009      	beq.n	800aa50 <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	685a      	ldr	r2, [r3, #4]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa4a:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800aa4c:	e000      	b.n	800aa50 <i2c_startTransaction+0x24>
		__NOP();
 800aa4e:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	f003 0302 	and.w	r3, r3, #2
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1f7      	bne.n	800aa4e <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa6c:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800aa6e:	e000      	b.n	800aa72 <i2c_startTransaction+0x46>
		__NOP();
 800aa70:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	f003 0301 	and.w	r3, r3, #1
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d0f7      	beq.n	800aa70 <i2c_startTransaction+0x44>
	}
}
 800aa80:	bf00      	nop
 800aa82:	bf00      	nop
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 800aa8e:	b480      	push	{r7}
 800aa90:	b083      	sub	sp, #12
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	7a1b      	ldrb	r3, [r3, #8]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d007      	beq.n	800aaae <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	685a      	ldr	r2, [r3, #4]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aaac:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aabc:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800aabe:	e000      	b.n	800aac2 <i2c_reStartTransaction+0x34>
		__NOP();
 800aac0:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	f003 0301 	and.w	r3, r3, #1
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d0f7      	beq.n	800aac0 <i2c_reStartTransaction+0x32>
	}
}
 800aad0:	bf00      	nop
 800aad2:	bf00      	nop
 800aad4:	370c      	adds	r7, #12
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 800aade:	b480      	push	{r7}
 800aae0:	b083      	sub	sp, #12
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aaf4:	601a      	str	r2, [r3, #0]
}
 800aaf6:	bf00      	nop
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800ab02:	b480      	push	{r7}
 800ab04:	b085      	sub	sp, #20
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	70fb      	strb	r3, [r7, #3]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 800ab12:	2300      	movs	r3, #0
 800ab14:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 800ab16:	78fb      	ldrb	r3, [r7, #3]
 800ab18:	005a      	lsls	r2, r3, #1
 800ab1a:	78bb      	ldrb	r3, [r7, #2]
 800ab1c:	431a      	orrs	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800ab24:	e000      	b.n	800ab28 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 800ab26:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	695b      	ldr	r3, [r3, #20]
 800ab2e:	f003 0302 	and.w	r3, r3, #2
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d0f7      	beq.n	800ab26 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	695b      	ldr	r3, [r3, #20]
 800ab3c:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	73fb      	strb	r3, [r7, #15]

}
 800ab46:	bf00      	nop
 800ab48:	3714      	adds	r7, #20
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr

0800ab52 <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800ab52:	b480      	push	{r7}
 800ab54:	b083      	sub	sp, #12
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	78fa      	ldrb	r2, [r7, #3]
 800ab64:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800ab66:	e000      	b.n	800ab6a <i2c_sendMemoryAddress+0x18>
		__NOP();
 800ab68:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d0f7      	beq.n	800ab68 <i2c_sendMemoryAddress+0x16>
	}
}
 800ab78:	bf00      	nop
 800ab7a:	bf00      	nop
 800ab7c:	370c      	adds	r7, #12
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
 800ab8e:	460b      	mov	r3, r1
 800ab90:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	78fa      	ldrb	r2, [r7, #3]
 800ab98:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800ab9a:	e000      	b.n	800ab9e <i2c_sendDataByte+0x18>
		__NOP();
 800ab9c:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	695b      	ldr	r3, [r3, #20]
 800aba4:	f003 0304 	and.w	r3, r3, #4
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d0f7      	beq.n	800ab9c <i2c_sendDataByte+0x16>
	}
}
 800abac:	bf00      	nop
 800abae:	bf00      	nop
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 800abba:	b480      	push	{r7}
 800abbc:	b083      	sub	sp, #12
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800abc2:	e000      	b.n	800abc6 <i2c_readDataByte+0xc>
		__NOP();
 800abc4:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	695b      	ldr	r3, [r3, #20]
 800abcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d0f7      	beq.n	800abc4 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	b2da      	uxtb	r2, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	799b      	ldrb	r3, [r3, #6]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <__errno>:
 800abf0:	4b01      	ldr	r3, [pc, #4]	; (800abf8 <__errno+0x8>)
 800abf2:	6818      	ldr	r0, [r3, #0]
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	20000024 	.word	0x20000024

0800abfc <__libc_init_array>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	4d0d      	ldr	r5, [pc, #52]	; (800ac34 <__libc_init_array+0x38>)
 800ac00:	4c0d      	ldr	r4, [pc, #52]	; (800ac38 <__libc_init_array+0x3c>)
 800ac02:	1b64      	subs	r4, r4, r5
 800ac04:	10a4      	asrs	r4, r4, #2
 800ac06:	2600      	movs	r6, #0
 800ac08:	42a6      	cmp	r6, r4
 800ac0a:	d109      	bne.n	800ac20 <__libc_init_array+0x24>
 800ac0c:	4d0b      	ldr	r5, [pc, #44]	; (800ac3c <__libc_init_array+0x40>)
 800ac0e:	4c0c      	ldr	r4, [pc, #48]	; (800ac40 <__libc_init_array+0x44>)
 800ac10:	f004 ff56 	bl	800fac0 <_init>
 800ac14:	1b64      	subs	r4, r4, r5
 800ac16:	10a4      	asrs	r4, r4, #2
 800ac18:	2600      	movs	r6, #0
 800ac1a:	42a6      	cmp	r6, r4
 800ac1c:	d105      	bne.n	800ac2a <__libc_init_array+0x2e>
 800ac1e:	bd70      	pop	{r4, r5, r6, pc}
 800ac20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac24:	4798      	blx	r3
 800ac26:	3601      	adds	r6, #1
 800ac28:	e7ee      	b.n	800ac08 <__libc_init_array+0xc>
 800ac2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac2e:	4798      	blx	r3
 800ac30:	3601      	adds	r6, #1
 800ac32:	e7f2      	b.n	800ac1a <__libc_init_array+0x1e>
 800ac34:	08010380 	.word	0x08010380
 800ac38:	08010380 	.word	0x08010380
 800ac3c:	08010380 	.word	0x08010380
 800ac40:	08010384 	.word	0x08010384

0800ac44 <malloc>:
 800ac44:	4b02      	ldr	r3, [pc, #8]	; (800ac50 <malloc+0xc>)
 800ac46:	4601      	mov	r1, r0
 800ac48:	6818      	ldr	r0, [r3, #0]
 800ac4a:	f000 b885 	b.w	800ad58 <_malloc_r>
 800ac4e:	bf00      	nop
 800ac50:	20000024 	.word	0x20000024

0800ac54 <memcpy>:
 800ac54:	440a      	add	r2, r1
 800ac56:	4291      	cmp	r1, r2
 800ac58:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac5c:	d100      	bne.n	800ac60 <memcpy+0xc>
 800ac5e:	4770      	bx	lr
 800ac60:	b510      	push	{r4, lr}
 800ac62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac6a:	4291      	cmp	r1, r2
 800ac6c:	d1f9      	bne.n	800ac62 <memcpy+0xe>
 800ac6e:	bd10      	pop	{r4, pc}

0800ac70 <memset>:
 800ac70:	4402      	add	r2, r0
 800ac72:	4603      	mov	r3, r0
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d100      	bne.n	800ac7a <memset+0xa>
 800ac78:	4770      	bx	lr
 800ac7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac7e:	e7f9      	b.n	800ac74 <memset+0x4>

0800ac80 <_free_r>:
 800ac80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac82:	2900      	cmp	r1, #0
 800ac84:	d044      	beq.n	800ad10 <_free_r+0x90>
 800ac86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac8a:	9001      	str	r0, [sp, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f1a1 0404 	sub.w	r4, r1, #4
 800ac92:	bfb8      	it	lt
 800ac94:	18e4      	addlt	r4, r4, r3
 800ac96:	f001 fbcd 	bl	800c434 <__malloc_lock>
 800ac9a:	4a1e      	ldr	r2, [pc, #120]	; (800ad14 <_free_r+0x94>)
 800ac9c:	9801      	ldr	r0, [sp, #4]
 800ac9e:	6813      	ldr	r3, [r2, #0]
 800aca0:	b933      	cbnz	r3, 800acb0 <_free_r+0x30>
 800aca2:	6063      	str	r3, [r4, #4]
 800aca4:	6014      	str	r4, [r2, #0]
 800aca6:	b003      	add	sp, #12
 800aca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acac:	f001 bbc8 	b.w	800c440 <__malloc_unlock>
 800acb0:	42a3      	cmp	r3, r4
 800acb2:	d908      	bls.n	800acc6 <_free_r+0x46>
 800acb4:	6825      	ldr	r5, [r4, #0]
 800acb6:	1961      	adds	r1, r4, r5
 800acb8:	428b      	cmp	r3, r1
 800acba:	bf01      	itttt	eq
 800acbc:	6819      	ldreq	r1, [r3, #0]
 800acbe:	685b      	ldreq	r3, [r3, #4]
 800acc0:	1949      	addeq	r1, r1, r5
 800acc2:	6021      	streq	r1, [r4, #0]
 800acc4:	e7ed      	b.n	800aca2 <_free_r+0x22>
 800acc6:	461a      	mov	r2, r3
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	b10b      	cbz	r3, 800acd0 <_free_r+0x50>
 800accc:	42a3      	cmp	r3, r4
 800acce:	d9fa      	bls.n	800acc6 <_free_r+0x46>
 800acd0:	6811      	ldr	r1, [r2, #0]
 800acd2:	1855      	adds	r5, r2, r1
 800acd4:	42a5      	cmp	r5, r4
 800acd6:	d10b      	bne.n	800acf0 <_free_r+0x70>
 800acd8:	6824      	ldr	r4, [r4, #0]
 800acda:	4421      	add	r1, r4
 800acdc:	1854      	adds	r4, r2, r1
 800acde:	42a3      	cmp	r3, r4
 800ace0:	6011      	str	r1, [r2, #0]
 800ace2:	d1e0      	bne.n	800aca6 <_free_r+0x26>
 800ace4:	681c      	ldr	r4, [r3, #0]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	6053      	str	r3, [r2, #4]
 800acea:	4421      	add	r1, r4
 800acec:	6011      	str	r1, [r2, #0]
 800acee:	e7da      	b.n	800aca6 <_free_r+0x26>
 800acf0:	d902      	bls.n	800acf8 <_free_r+0x78>
 800acf2:	230c      	movs	r3, #12
 800acf4:	6003      	str	r3, [r0, #0]
 800acf6:	e7d6      	b.n	800aca6 <_free_r+0x26>
 800acf8:	6825      	ldr	r5, [r4, #0]
 800acfa:	1961      	adds	r1, r4, r5
 800acfc:	428b      	cmp	r3, r1
 800acfe:	bf04      	itt	eq
 800ad00:	6819      	ldreq	r1, [r3, #0]
 800ad02:	685b      	ldreq	r3, [r3, #4]
 800ad04:	6063      	str	r3, [r4, #4]
 800ad06:	bf04      	itt	eq
 800ad08:	1949      	addeq	r1, r1, r5
 800ad0a:	6021      	streq	r1, [r4, #0]
 800ad0c:	6054      	str	r4, [r2, #4]
 800ad0e:	e7ca      	b.n	800aca6 <_free_r+0x26>
 800ad10:	b003      	add	sp, #12
 800ad12:	bd30      	pop	{r4, r5, pc}
 800ad14:	200138ac 	.word	0x200138ac

0800ad18 <sbrk_aligned>:
 800ad18:	b570      	push	{r4, r5, r6, lr}
 800ad1a:	4e0e      	ldr	r6, [pc, #56]	; (800ad54 <sbrk_aligned+0x3c>)
 800ad1c:	460c      	mov	r4, r1
 800ad1e:	6831      	ldr	r1, [r6, #0]
 800ad20:	4605      	mov	r5, r0
 800ad22:	b911      	cbnz	r1, 800ad2a <sbrk_aligned+0x12>
 800ad24:	f000 fcf6 	bl	800b714 <_sbrk_r>
 800ad28:	6030      	str	r0, [r6, #0]
 800ad2a:	4621      	mov	r1, r4
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	f000 fcf1 	bl	800b714 <_sbrk_r>
 800ad32:	1c43      	adds	r3, r0, #1
 800ad34:	d00a      	beq.n	800ad4c <sbrk_aligned+0x34>
 800ad36:	1cc4      	adds	r4, r0, #3
 800ad38:	f024 0403 	bic.w	r4, r4, #3
 800ad3c:	42a0      	cmp	r0, r4
 800ad3e:	d007      	beq.n	800ad50 <sbrk_aligned+0x38>
 800ad40:	1a21      	subs	r1, r4, r0
 800ad42:	4628      	mov	r0, r5
 800ad44:	f000 fce6 	bl	800b714 <_sbrk_r>
 800ad48:	3001      	adds	r0, #1
 800ad4a:	d101      	bne.n	800ad50 <sbrk_aligned+0x38>
 800ad4c:	f04f 34ff 	mov.w	r4, #4294967295
 800ad50:	4620      	mov	r0, r4
 800ad52:	bd70      	pop	{r4, r5, r6, pc}
 800ad54:	200138b0 	.word	0x200138b0

0800ad58 <_malloc_r>:
 800ad58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad5c:	1ccd      	adds	r5, r1, #3
 800ad5e:	f025 0503 	bic.w	r5, r5, #3
 800ad62:	3508      	adds	r5, #8
 800ad64:	2d0c      	cmp	r5, #12
 800ad66:	bf38      	it	cc
 800ad68:	250c      	movcc	r5, #12
 800ad6a:	2d00      	cmp	r5, #0
 800ad6c:	4607      	mov	r7, r0
 800ad6e:	db01      	blt.n	800ad74 <_malloc_r+0x1c>
 800ad70:	42a9      	cmp	r1, r5
 800ad72:	d905      	bls.n	800ad80 <_malloc_r+0x28>
 800ad74:	230c      	movs	r3, #12
 800ad76:	603b      	str	r3, [r7, #0]
 800ad78:	2600      	movs	r6, #0
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad80:	4e2e      	ldr	r6, [pc, #184]	; (800ae3c <_malloc_r+0xe4>)
 800ad82:	f001 fb57 	bl	800c434 <__malloc_lock>
 800ad86:	6833      	ldr	r3, [r6, #0]
 800ad88:	461c      	mov	r4, r3
 800ad8a:	bb34      	cbnz	r4, 800adda <_malloc_r+0x82>
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	4638      	mov	r0, r7
 800ad90:	f7ff ffc2 	bl	800ad18 <sbrk_aligned>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	4604      	mov	r4, r0
 800ad98:	d14d      	bne.n	800ae36 <_malloc_r+0xde>
 800ad9a:	6834      	ldr	r4, [r6, #0]
 800ad9c:	4626      	mov	r6, r4
 800ad9e:	2e00      	cmp	r6, #0
 800ada0:	d140      	bne.n	800ae24 <_malloc_r+0xcc>
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	4631      	mov	r1, r6
 800ada6:	4638      	mov	r0, r7
 800ada8:	eb04 0803 	add.w	r8, r4, r3
 800adac:	f000 fcb2 	bl	800b714 <_sbrk_r>
 800adb0:	4580      	cmp	r8, r0
 800adb2:	d13a      	bne.n	800ae2a <_malloc_r+0xd2>
 800adb4:	6821      	ldr	r1, [r4, #0]
 800adb6:	3503      	adds	r5, #3
 800adb8:	1a6d      	subs	r5, r5, r1
 800adba:	f025 0503 	bic.w	r5, r5, #3
 800adbe:	3508      	adds	r5, #8
 800adc0:	2d0c      	cmp	r5, #12
 800adc2:	bf38      	it	cc
 800adc4:	250c      	movcc	r5, #12
 800adc6:	4629      	mov	r1, r5
 800adc8:	4638      	mov	r0, r7
 800adca:	f7ff ffa5 	bl	800ad18 <sbrk_aligned>
 800adce:	3001      	adds	r0, #1
 800add0:	d02b      	beq.n	800ae2a <_malloc_r+0xd2>
 800add2:	6823      	ldr	r3, [r4, #0]
 800add4:	442b      	add	r3, r5
 800add6:	6023      	str	r3, [r4, #0]
 800add8:	e00e      	b.n	800adf8 <_malloc_r+0xa0>
 800adda:	6822      	ldr	r2, [r4, #0]
 800addc:	1b52      	subs	r2, r2, r5
 800adde:	d41e      	bmi.n	800ae1e <_malloc_r+0xc6>
 800ade0:	2a0b      	cmp	r2, #11
 800ade2:	d916      	bls.n	800ae12 <_malloc_r+0xba>
 800ade4:	1961      	adds	r1, r4, r5
 800ade6:	42a3      	cmp	r3, r4
 800ade8:	6025      	str	r5, [r4, #0]
 800adea:	bf18      	it	ne
 800adec:	6059      	strne	r1, [r3, #4]
 800adee:	6863      	ldr	r3, [r4, #4]
 800adf0:	bf08      	it	eq
 800adf2:	6031      	streq	r1, [r6, #0]
 800adf4:	5162      	str	r2, [r4, r5]
 800adf6:	604b      	str	r3, [r1, #4]
 800adf8:	4638      	mov	r0, r7
 800adfa:	f104 060b 	add.w	r6, r4, #11
 800adfe:	f001 fb1f 	bl	800c440 <__malloc_unlock>
 800ae02:	f026 0607 	bic.w	r6, r6, #7
 800ae06:	1d23      	adds	r3, r4, #4
 800ae08:	1af2      	subs	r2, r6, r3
 800ae0a:	d0b6      	beq.n	800ad7a <_malloc_r+0x22>
 800ae0c:	1b9b      	subs	r3, r3, r6
 800ae0e:	50a3      	str	r3, [r4, r2]
 800ae10:	e7b3      	b.n	800ad7a <_malloc_r+0x22>
 800ae12:	6862      	ldr	r2, [r4, #4]
 800ae14:	42a3      	cmp	r3, r4
 800ae16:	bf0c      	ite	eq
 800ae18:	6032      	streq	r2, [r6, #0]
 800ae1a:	605a      	strne	r2, [r3, #4]
 800ae1c:	e7ec      	b.n	800adf8 <_malloc_r+0xa0>
 800ae1e:	4623      	mov	r3, r4
 800ae20:	6864      	ldr	r4, [r4, #4]
 800ae22:	e7b2      	b.n	800ad8a <_malloc_r+0x32>
 800ae24:	4634      	mov	r4, r6
 800ae26:	6876      	ldr	r6, [r6, #4]
 800ae28:	e7b9      	b.n	800ad9e <_malloc_r+0x46>
 800ae2a:	230c      	movs	r3, #12
 800ae2c:	603b      	str	r3, [r7, #0]
 800ae2e:	4638      	mov	r0, r7
 800ae30:	f001 fb06 	bl	800c440 <__malloc_unlock>
 800ae34:	e7a1      	b.n	800ad7a <_malloc_r+0x22>
 800ae36:	6025      	str	r5, [r4, #0]
 800ae38:	e7de      	b.n	800adf8 <_malloc_r+0xa0>
 800ae3a:	bf00      	nop
 800ae3c:	200138ac 	.word	0x200138ac

0800ae40 <__cvt>:
 800ae40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae44:	ec55 4b10 	vmov	r4, r5, d0
 800ae48:	2d00      	cmp	r5, #0
 800ae4a:	460e      	mov	r6, r1
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	462b      	mov	r3, r5
 800ae50:	bfbb      	ittet	lt
 800ae52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae56:	461d      	movlt	r5, r3
 800ae58:	2300      	movge	r3, #0
 800ae5a:	232d      	movlt	r3, #45	; 0x2d
 800ae5c:	700b      	strb	r3, [r1, #0]
 800ae5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae64:	4691      	mov	r9, r2
 800ae66:	f023 0820 	bic.w	r8, r3, #32
 800ae6a:	bfbc      	itt	lt
 800ae6c:	4622      	movlt	r2, r4
 800ae6e:	4614      	movlt	r4, r2
 800ae70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae74:	d005      	beq.n	800ae82 <__cvt+0x42>
 800ae76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae7a:	d100      	bne.n	800ae7e <__cvt+0x3e>
 800ae7c:	3601      	adds	r6, #1
 800ae7e:	2102      	movs	r1, #2
 800ae80:	e000      	b.n	800ae84 <__cvt+0x44>
 800ae82:	2103      	movs	r1, #3
 800ae84:	ab03      	add	r3, sp, #12
 800ae86:	9301      	str	r3, [sp, #4]
 800ae88:	ab02      	add	r3, sp, #8
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	ec45 4b10 	vmov	d0, r4, r5
 800ae90:	4653      	mov	r3, sl
 800ae92:	4632      	mov	r2, r6
 800ae94:	f000 fcdc 	bl	800b850 <_dtoa_r>
 800ae98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae9c:	4607      	mov	r7, r0
 800ae9e:	d102      	bne.n	800aea6 <__cvt+0x66>
 800aea0:	f019 0f01 	tst.w	r9, #1
 800aea4:	d022      	beq.n	800aeec <__cvt+0xac>
 800aea6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aeaa:	eb07 0906 	add.w	r9, r7, r6
 800aeae:	d110      	bne.n	800aed2 <__cvt+0x92>
 800aeb0:	783b      	ldrb	r3, [r7, #0]
 800aeb2:	2b30      	cmp	r3, #48	; 0x30
 800aeb4:	d10a      	bne.n	800aecc <__cvt+0x8c>
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	2300      	movs	r3, #0
 800aeba:	4620      	mov	r0, r4
 800aebc:	4629      	mov	r1, r5
 800aebe:	f7f5 fe1b 	bl	8000af8 <__aeabi_dcmpeq>
 800aec2:	b918      	cbnz	r0, 800aecc <__cvt+0x8c>
 800aec4:	f1c6 0601 	rsb	r6, r6, #1
 800aec8:	f8ca 6000 	str.w	r6, [sl]
 800aecc:	f8da 3000 	ldr.w	r3, [sl]
 800aed0:	4499      	add	r9, r3
 800aed2:	2200      	movs	r2, #0
 800aed4:	2300      	movs	r3, #0
 800aed6:	4620      	mov	r0, r4
 800aed8:	4629      	mov	r1, r5
 800aeda:	f7f5 fe0d 	bl	8000af8 <__aeabi_dcmpeq>
 800aede:	b108      	cbz	r0, 800aee4 <__cvt+0xa4>
 800aee0:	f8cd 900c 	str.w	r9, [sp, #12]
 800aee4:	2230      	movs	r2, #48	; 0x30
 800aee6:	9b03      	ldr	r3, [sp, #12]
 800aee8:	454b      	cmp	r3, r9
 800aeea:	d307      	bcc.n	800aefc <__cvt+0xbc>
 800aeec:	9b03      	ldr	r3, [sp, #12]
 800aeee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aef0:	1bdb      	subs	r3, r3, r7
 800aef2:	4638      	mov	r0, r7
 800aef4:	6013      	str	r3, [r2, #0]
 800aef6:	b004      	add	sp, #16
 800aef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aefc:	1c59      	adds	r1, r3, #1
 800aefe:	9103      	str	r1, [sp, #12]
 800af00:	701a      	strb	r2, [r3, #0]
 800af02:	e7f0      	b.n	800aee6 <__cvt+0xa6>

0800af04 <__exponent>:
 800af04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af06:	4603      	mov	r3, r0
 800af08:	2900      	cmp	r1, #0
 800af0a:	bfb8      	it	lt
 800af0c:	4249      	neglt	r1, r1
 800af0e:	f803 2b02 	strb.w	r2, [r3], #2
 800af12:	bfb4      	ite	lt
 800af14:	222d      	movlt	r2, #45	; 0x2d
 800af16:	222b      	movge	r2, #43	; 0x2b
 800af18:	2909      	cmp	r1, #9
 800af1a:	7042      	strb	r2, [r0, #1]
 800af1c:	dd2a      	ble.n	800af74 <__exponent+0x70>
 800af1e:	f10d 0407 	add.w	r4, sp, #7
 800af22:	46a4      	mov	ip, r4
 800af24:	270a      	movs	r7, #10
 800af26:	46a6      	mov	lr, r4
 800af28:	460a      	mov	r2, r1
 800af2a:	fb91 f6f7 	sdiv	r6, r1, r7
 800af2e:	fb07 1516 	mls	r5, r7, r6, r1
 800af32:	3530      	adds	r5, #48	; 0x30
 800af34:	2a63      	cmp	r2, #99	; 0x63
 800af36:	f104 34ff 	add.w	r4, r4, #4294967295
 800af3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800af3e:	4631      	mov	r1, r6
 800af40:	dcf1      	bgt.n	800af26 <__exponent+0x22>
 800af42:	3130      	adds	r1, #48	; 0x30
 800af44:	f1ae 0502 	sub.w	r5, lr, #2
 800af48:	f804 1c01 	strb.w	r1, [r4, #-1]
 800af4c:	1c44      	adds	r4, r0, #1
 800af4e:	4629      	mov	r1, r5
 800af50:	4561      	cmp	r1, ip
 800af52:	d30a      	bcc.n	800af6a <__exponent+0x66>
 800af54:	f10d 0209 	add.w	r2, sp, #9
 800af58:	eba2 020e 	sub.w	r2, r2, lr
 800af5c:	4565      	cmp	r5, ip
 800af5e:	bf88      	it	hi
 800af60:	2200      	movhi	r2, #0
 800af62:	4413      	add	r3, r2
 800af64:	1a18      	subs	r0, r3, r0
 800af66:	b003      	add	sp, #12
 800af68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af72:	e7ed      	b.n	800af50 <__exponent+0x4c>
 800af74:	2330      	movs	r3, #48	; 0x30
 800af76:	3130      	adds	r1, #48	; 0x30
 800af78:	7083      	strb	r3, [r0, #2]
 800af7a:	70c1      	strb	r1, [r0, #3]
 800af7c:	1d03      	adds	r3, r0, #4
 800af7e:	e7f1      	b.n	800af64 <__exponent+0x60>

0800af80 <_printf_float>:
 800af80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af84:	ed2d 8b02 	vpush	{d8}
 800af88:	b08d      	sub	sp, #52	; 0x34
 800af8a:	460c      	mov	r4, r1
 800af8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af90:	4616      	mov	r6, r2
 800af92:	461f      	mov	r7, r3
 800af94:	4605      	mov	r5, r0
 800af96:	f001 fa49 	bl	800c42c <_localeconv_r>
 800af9a:	f8d0 a000 	ldr.w	sl, [r0]
 800af9e:	4650      	mov	r0, sl
 800afa0:	f7f5 f928 	bl	80001f4 <strlen>
 800afa4:	2300      	movs	r3, #0
 800afa6:	930a      	str	r3, [sp, #40]	; 0x28
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	9305      	str	r3, [sp, #20]
 800afac:	f8d8 3000 	ldr.w	r3, [r8]
 800afb0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800afb4:	3307      	adds	r3, #7
 800afb6:	f023 0307 	bic.w	r3, r3, #7
 800afba:	f103 0208 	add.w	r2, r3, #8
 800afbe:	f8c8 2000 	str.w	r2, [r8]
 800afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800afca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800afce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800afd2:	9307      	str	r3, [sp, #28]
 800afd4:	f8cd 8018 	str.w	r8, [sp, #24]
 800afd8:	ee08 0a10 	vmov	s16, r0
 800afdc:	4b9f      	ldr	r3, [pc, #636]	; (800b25c <_printf_float+0x2dc>)
 800afde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afe2:	f04f 32ff 	mov.w	r2, #4294967295
 800afe6:	f7f5 fdb9 	bl	8000b5c <__aeabi_dcmpun>
 800afea:	bb88      	cbnz	r0, 800b050 <_printf_float+0xd0>
 800afec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aff0:	4b9a      	ldr	r3, [pc, #616]	; (800b25c <_printf_float+0x2dc>)
 800aff2:	f04f 32ff 	mov.w	r2, #4294967295
 800aff6:	f7f5 fd93 	bl	8000b20 <__aeabi_dcmple>
 800affa:	bb48      	cbnz	r0, 800b050 <_printf_float+0xd0>
 800affc:	2200      	movs	r2, #0
 800affe:	2300      	movs	r3, #0
 800b000:	4640      	mov	r0, r8
 800b002:	4649      	mov	r1, r9
 800b004:	f7f5 fd82 	bl	8000b0c <__aeabi_dcmplt>
 800b008:	b110      	cbz	r0, 800b010 <_printf_float+0x90>
 800b00a:	232d      	movs	r3, #45	; 0x2d
 800b00c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b010:	4b93      	ldr	r3, [pc, #588]	; (800b260 <_printf_float+0x2e0>)
 800b012:	4894      	ldr	r0, [pc, #592]	; (800b264 <_printf_float+0x2e4>)
 800b014:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b018:	bf94      	ite	ls
 800b01a:	4698      	movls	r8, r3
 800b01c:	4680      	movhi	r8, r0
 800b01e:	2303      	movs	r3, #3
 800b020:	6123      	str	r3, [r4, #16]
 800b022:	9b05      	ldr	r3, [sp, #20]
 800b024:	f023 0204 	bic.w	r2, r3, #4
 800b028:	6022      	str	r2, [r4, #0]
 800b02a:	f04f 0900 	mov.w	r9, #0
 800b02e:	9700      	str	r7, [sp, #0]
 800b030:	4633      	mov	r3, r6
 800b032:	aa0b      	add	r2, sp, #44	; 0x2c
 800b034:	4621      	mov	r1, r4
 800b036:	4628      	mov	r0, r5
 800b038:	f000 f9d8 	bl	800b3ec <_printf_common>
 800b03c:	3001      	adds	r0, #1
 800b03e:	f040 8090 	bne.w	800b162 <_printf_float+0x1e2>
 800b042:	f04f 30ff 	mov.w	r0, #4294967295
 800b046:	b00d      	add	sp, #52	; 0x34
 800b048:	ecbd 8b02 	vpop	{d8}
 800b04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b050:	4642      	mov	r2, r8
 800b052:	464b      	mov	r3, r9
 800b054:	4640      	mov	r0, r8
 800b056:	4649      	mov	r1, r9
 800b058:	f7f5 fd80 	bl	8000b5c <__aeabi_dcmpun>
 800b05c:	b140      	cbz	r0, 800b070 <_printf_float+0xf0>
 800b05e:	464b      	mov	r3, r9
 800b060:	2b00      	cmp	r3, #0
 800b062:	bfbc      	itt	lt
 800b064:	232d      	movlt	r3, #45	; 0x2d
 800b066:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b06a:	487f      	ldr	r0, [pc, #508]	; (800b268 <_printf_float+0x2e8>)
 800b06c:	4b7f      	ldr	r3, [pc, #508]	; (800b26c <_printf_float+0x2ec>)
 800b06e:	e7d1      	b.n	800b014 <_printf_float+0x94>
 800b070:	6863      	ldr	r3, [r4, #4]
 800b072:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b076:	9206      	str	r2, [sp, #24]
 800b078:	1c5a      	adds	r2, r3, #1
 800b07a:	d13f      	bne.n	800b0fc <_printf_float+0x17c>
 800b07c:	2306      	movs	r3, #6
 800b07e:	6063      	str	r3, [r4, #4]
 800b080:	9b05      	ldr	r3, [sp, #20]
 800b082:	6861      	ldr	r1, [r4, #4]
 800b084:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b088:	2300      	movs	r3, #0
 800b08a:	9303      	str	r3, [sp, #12]
 800b08c:	ab0a      	add	r3, sp, #40	; 0x28
 800b08e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b092:	ab09      	add	r3, sp, #36	; 0x24
 800b094:	ec49 8b10 	vmov	d0, r8, r9
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	6022      	str	r2, [r4, #0]
 800b09c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	f7ff fecd 	bl	800ae40 <__cvt>
 800b0a6:	9b06      	ldr	r3, [sp, #24]
 800b0a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0aa:	2b47      	cmp	r3, #71	; 0x47
 800b0ac:	4680      	mov	r8, r0
 800b0ae:	d108      	bne.n	800b0c2 <_printf_float+0x142>
 800b0b0:	1cc8      	adds	r0, r1, #3
 800b0b2:	db02      	blt.n	800b0ba <_printf_float+0x13a>
 800b0b4:	6863      	ldr	r3, [r4, #4]
 800b0b6:	4299      	cmp	r1, r3
 800b0b8:	dd41      	ble.n	800b13e <_printf_float+0x1be>
 800b0ba:	f1ab 0b02 	sub.w	fp, fp, #2
 800b0be:	fa5f fb8b 	uxtb.w	fp, fp
 800b0c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b0c6:	d820      	bhi.n	800b10a <_printf_float+0x18a>
 800b0c8:	3901      	subs	r1, #1
 800b0ca:	465a      	mov	r2, fp
 800b0cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b0d0:	9109      	str	r1, [sp, #36]	; 0x24
 800b0d2:	f7ff ff17 	bl	800af04 <__exponent>
 800b0d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0d8:	1813      	adds	r3, r2, r0
 800b0da:	2a01      	cmp	r2, #1
 800b0dc:	4681      	mov	r9, r0
 800b0de:	6123      	str	r3, [r4, #16]
 800b0e0:	dc02      	bgt.n	800b0e8 <_printf_float+0x168>
 800b0e2:	6822      	ldr	r2, [r4, #0]
 800b0e4:	07d2      	lsls	r2, r2, #31
 800b0e6:	d501      	bpl.n	800b0ec <_printf_float+0x16c>
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	6123      	str	r3, [r4, #16]
 800b0ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d09c      	beq.n	800b02e <_printf_float+0xae>
 800b0f4:	232d      	movs	r3, #45	; 0x2d
 800b0f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0fa:	e798      	b.n	800b02e <_printf_float+0xae>
 800b0fc:	9a06      	ldr	r2, [sp, #24]
 800b0fe:	2a47      	cmp	r2, #71	; 0x47
 800b100:	d1be      	bne.n	800b080 <_printf_float+0x100>
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1bc      	bne.n	800b080 <_printf_float+0x100>
 800b106:	2301      	movs	r3, #1
 800b108:	e7b9      	b.n	800b07e <_printf_float+0xfe>
 800b10a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b10e:	d118      	bne.n	800b142 <_printf_float+0x1c2>
 800b110:	2900      	cmp	r1, #0
 800b112:	6863      	ldr	r3, [r4, #4]
 800b114:	dd0b      	ble.n	800b12e <_printf_float+0x1ae>
 800b116:	6121      	str	r1, [r4, #16]
 800b118:	b913      	cbnz	r3, 800b120 <_printf_float+0x1a0>
 800b11a:	6822      	ldr	r2, [r4, #0]
 800b11c:	07d0      	lsls	r0, r2, #31
 800b11e:	d502      	bpl.n	800b126 <_printf_float+0x1a6>
 800b120:	3301      	adds	r3, #1
 800b122:	440b      	add	r3, r1
 800b124:	6123      	str	r3, [r4, #16]
 800b126:	65a1      	str	r1, [r4, #88]	; 0x58
 800b128:	f04f 0900 	mov.w	r9, #0
 800b12c:	e7de      	b.n	800b0ec <_printf_float+0x16c>
 800b12e:	b913      	cbnz	r3, 800b136 <_printf_float+0x1b6>
 800b130:	6822      	ldr	r2, [r4, #0]
 800b132:	07d2      	lsls	r2, r2, #31
 800b134:	d501      	bpl.n	800b13a <_printf_float+0x1ba>
 800b136:	3302      	adds	r3, #2
 800b138:	e7f4      	b.n	800b124 <_printf_float+0x1a4>
 800b13a:	2301      	movs	r3, #1
 800b13c:	e7f2      	b.n	800b124 <_printf_float+0x1a4>
 800b13e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b144:	4299      	cmp	r1, r3
 800b146:	db05      	blt.n	800b154 <_printf_float+0x1d4>
 800b148:	6823      	ldr	r3, [r4, #0]
 800b14a:	6121      	str	r1, [r4, #16]
 800b14c:	07d8      	lsls	r0, r3, #31
 800b14e:	d5ea      	bpl.n	800b126 <_printf_float+0x1a6>
 800b150:	1c4b      	adds	r3, r1, #1
 800b152:	e7e7      	b.n	800b124 <_printf_float+0x1a4>
 800b154:	2900      	cmp	r1, #0
 800b156:	bfd4      	ite	le
 800b158:	f1c1 0202 	rsble	r2, r1, #2
 800b15c:	2201      	movgt	r2, #1
 800b15e:	4413      	add	r3, r2
 800b160:	e7e0      	b.n	800b124 <_printf_float+0x1a4>
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	055a      	lsls	r2, r3, #21
 800b166:	d407      	bmi.n	800b178 <_printf_float+0x1f8>
 800b168:	6923      	ldr	r3, [r4, #16]
 800b16a:	4642      	mov	r2, r8
 800b16c:	4631      	mov	r1, r6
 800b16e:	4628      	mov	r0, r5
 800b170:	47b8      	blx	r7
 800b172:	3001      	adds	r0, #1
 800b174:	d12c      	bne.n	800b1d0 <_printf_float+0x250>
 800b176:	e764      	b.n	800b042 <_printf_float+0xc2>
 800b178:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b17c:	f240 80e0 	bls.w	800b340 <_printf_float+0x3c0>
 800b180:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b184:	2200      	movs	r2, #0
 800b186:	2300      	movs	r3, #0
 800b188:	f7f5 fcb6 	bl	8000af8 <__aeabi_dcmpeq>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d034      	beq.n	800b1fa <_printf_float+0x27a>
 800b190:	4a37      	ldr	r2, [pc, #220]	; (800b270 <_printf_float+0x2f0>)
 800b192:	2301      	movs	r3, #1
 800b194:	4631      	mov	r1, r6
 800b196:	4628      	mov	r0, r5
 800b198:	47b8      	blx	r7
 800b19a:	3001      	adds	r0, #1
 800b19c:	f43f af51 	beq.w	800b042 <_printf_float+0xc2>
 800b1a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	db02      	blt.n	800b1ae <_printf_float+0x22e>
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	07d8      	lsls	r0, r3, #31
 800b1ac:	d510      	bpl.n	800b1d0 <_printf_float+0x250>
 800b1ae:	ee18 3a10 	vmov	r3, s16
 800b1b2:	4652      	mov	r2, sl
 800b1b4:	4631      	mov	r1, r6
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	47b8      	blx	r7
 800b1ba:	3001      	adds	r0, #1
 800b1bc:	f43f af41 	beq.w	800b042 <_printf_float+0xc2>
 800b1c0:	f04f 0800 	mov.w	r8, #0
 800b1c4:	f104 091a 	add.w	r9, r4, #26
 800b1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	4543      	cmp	r3, r8
 800b1ce:	dc09      	bgt.n	800b1e4 <_printf_float+0x264>
 800b1d0:	6823      	ldr	r3, [r4, #0]
 800b1d2:	079b      	lsls	r3, r3, #30
 800b1d4:	f100 8105 	bmi.w	800b3e2 <_printf_float+0x462>
 800b1d8:	68e0      	ldr	r0, [r4, #12]
 800b1da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1dc:	4298      	cmp	r0, r3
 800b1de:	bfb8      	it	lt
 800b1e0:	4618      	movlt	r0, r3
 800b1e2:	e730      	b.n	800b046 <_printf_float+0xc6>
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	464a      	mov	r2, r9
 800b1e8:	4631      	mov	r1, r6
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	47b8      	blx	r7
 800b1ee:	3001      	adds	r0, #1
 800b1f0:	f43f af27 	beq.w	800b042 <_printf_float+0xc2>
 800b1f4:	f108 0801 	add.w	r8, r8, #1
 800b1f8:	e7e6      	b.n	800b1c8 <_printf_float+0x248>
 800b1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	dc39      	bgt.n	800b274 <_printf_float+0x2f4>
 800b200:	4a1b      	ldr	r2, [pc, #108]	; (800b270 <_printf_float+0x2f0>)
 800b202:	2301      	movs	r3, #1
 800b204:	4631      	mov	r1, r6
 800b206:	4628      	mov	r0, r5
 800b208:	47b8      	blx	r7
 800b20a:	3001      	adds	r0, #1
 800b20c:	f43f af19 	beq.w	800b042 <_printf_float+0xc2>
 800b210:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b214:	4313      	orrs	r3, r2
 800b216:	d102      	bne.n	800b21e <_printf_float+0x29e>
 800b218:	6823      	ldr	r3, [r4, #0]
 800b21a:	07d9      	lsls	r1, r3, #31
 800b21c:	d5d8      	bpl.n	800b1d0 <_printf_float+0x250>
 800b21e:	ee18 3a10 	vmov	r3, s16
 800b222:	4652      	mov	r2, sl
 800b224:	4631      	mov	r1, r6
 800b226:	4628      	mov	r0, r5
 800b228:	47b8      	blx	r7
 800b22a:	3001      	adds	r0, #1
 800b22c:	f43f af09 	beq.w	800b042 <_printf_float+0xc2>
 800b230:	f04f 0900 	mov.w	r9, #0
 800b234:	f104 0a1a 	add.w	sl, r4, #26
 800b238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b23a:	425b      	negs	r3, r3
 800b23c:	454b      	cmp	r3, r9
 800b23e:	dc01      	bgt.n	800b244 <_printf_float+0x2c4>
 800b240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b242:	e792      	b.n	800b16a <_printf_float+0x1ea>
 800b244:	2301      	movs	r3, #1
 800b246:	4652      	mov	r2, sl
 800b248:	4631      	mov	r1, r6
 800b24a:	4628      	mov	r0, r5
 800b24c:	47b8      	blx	r7
 800b24e:	3001      	adds	r0, #1
 800b250:	f43f aef7 	beq.w	800b042 <_printf_float+0xc2>
 800b254:	f109 0901 	add.w	r9, r9, #1
 800b258:	e7ee      	b.n	800b238 <_printf_float+0x2b8>
 800b25a:	bf00      	nop
 800b25c:	7fefffff 	.word	0x7fefffff
 800b260:	0800fd30 	.word	0x0800fd30
 800b264:	0800fd34 	.word	0x0800fd34
 800b268:	0800fd3c 	.word	0x0800fd3c
 800b26c:	0800fd38 	.word	0x0800fd38
 800b270:	0800fd40 	.word	0x0800fd40
 800b274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b276:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b278:	429a      	cmp	r2, r3
 800b27a:	bfa8      	it	ge
 800b27c:	461a      	movge	r2, r3
 800b27e:	2a00      	cmp	r2, #0
 800b280:	4691      	mov	r9, r2
 800b282:	dc37      	bgt.n	800b2f4 <_printf_float+0x374>
 800b284:	f04f 0b00 	mov.w	fp, #0
 800b288:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b28c:	f104 021a 	add.w	r2, r4, #26
 800b290:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b292:	9305      	str	r3, [sp, #20]
 800b294:	eba3 0309 	sub.w	r3, r3, r9
 800b298:	455b      	cmp	r3, fp
 800b29a:	dc33      	bgt.n	800b304 <_printf_float+0x384>
 800b29c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	db3b      	blt.n	800b31c <_printf_float+0x39c>
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	07da      	lsls	r2, r3, #31
 800b2a8:	d438      	bmi.n	800b31c <_printf_float+0x39c>
 800b2aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2ac:	9a05      	ldr	r2, [sp, #20]
 800b2ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2b0:	1a9a      	subs	r2, r3, r2
 800b2b2:	eba3 0901 	sub.w	r9, r3, r1
 800b2b6:	4591      	cmp	r9, r2
 800b2b8:	bfa8      	it	ge
 800b2ba:	4691      	movge	r9, r2
 800b2bc:	f1b9 0f00 	cmp.w	r9, #0
 800b2c0:	dc35      	bgt.n	800b32e <_printf_float+0x3ae>
 800b2c2:	f04f 0800 	mov.w	r8, #0
 800b2c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2ca:	f104 0a1a 	add.w	sl, r4, #26
 800b2ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2d2:	1a9b      	subs	r3, r3, r2
 800b2d4:	eba3 0309 	sub.w	r3, r3, r9
 800b2d8:	4543      	cmp	r3, r8
 800b2da:	f77f af79 	ble.w	800b1d0 <_printf_float+0x250>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	4652      	mov	r2, sl
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	47b8      	blx	r7
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	f43f aeaa 	beq.w	800b042 <_printf_float+0xc2>
 800b2ee:	f108 0801 	add.w	r8, r8, #1
 800b2f2:	e7ec      	b.n	800b2ce <_printf_float+0x34e>
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	4631      	mov	r1, r6
 800b2f8:	4642      	mov	r2, r8
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	47b8      	blx	r7
 800b2fe:	3001      	adds	r0, #1
 800b300:	d1c0      	bne.n	800b284 <_printf_float+0x304>
 800b302:	e69e      	b.n	800b042 <_printf_float+0xc2>
 800b304:	2301      	movs	r3, #1
 800b306:	4631      	mov	r1, r6
 800b308:	4628      	mov	r0, r5
 800b30a:	9205      	str	r2, [sp, #20]
 800b30c:	47b8      	blx	r7
 800b30e:	3001      	adds	r0, #1
 800b310:	f43f ae97 	beq.w	800b042 <_printf_float+0xc2>
 800b314:	9a05      	ldr	r2, [sp, #20]
 800b316:	f10b 0b01 	add.w	fp, fp, #1
 800b31a:	e7b9      	b.n	800b290 <_printf_float+0x310>
 800b31c:	ee18 3a10 	vmov	r3, s16
 800b320:	4652      	mov	r2, sl
 800b322:	4631      	mov	r1, r6
 800b324:	4628      	mov	r0, r5
 800b326:	47b8      	blx	r7
 800b328:	3001      	adds	r0, #1
 800b32a:	d1be      	bne.n	800b2aa <_printf_float+0x32a>
 800b32c:	e689      	b.n	800b042 <_printf_float+0xc2>
 800b32e:	9a05      	ldr	r2, [sp, #20]
 800b330:	464b      	mov	r3, r9
 800b332:	4442      	add	r2, r8
 800b334:	4631      	mov	r1, r6
 800b336:	4628      	mov	r0, r5
 800b338:	47b8      	blx	r7
 800b33a:	3001      	adds	r0, #1
 800b33c:	d1c1      	bne.n	800b2c2 <_printf_float+0x342>
 800b33e:	e680      	b.n	800b042 <_printf_float+0xc2>
 800b340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b342:	2a01      	cmp	r2, #1
 800b344:	dc01      	bgt.n	800b34a <_printf_float+0x3ca>
 800b346:	07db      	lsls	r3, r3, #31
 800b348:	d538      	bpl.n	800b3bc <_printf_float+0x43c>
 800b34a:	2301      	movs	r3, #1
 800b34c:	4642      	mov	r2, r8
 800b34e:	4631      	mov	r1, r6
 800b350:	4628      	mov	r0, r5
 800b352:	47b8      	blx	r7
 800b354:	3001      	adds	r0, #1
 800b356:	f43f ae74 	beq.w	800b042 <_printf_float+0xc2>
 800b35a:	ee18 3a10 	vmov	r3, s16
 800b35e:	4652      	mov	r2, sl
 800b360:	4631      	mov	r1, r6
 800b362:	4628      	mov	r0, r5
 800b364:	47b8      	blx	r7
 800b366:	3001      	adds	r0, #1
 800b368:	f43f ae6b 	beq.w	800b042 <_printf_float+0xc2>
 800b36c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b370:	2200      	movs	r2, #0
 800b372:	2300      	movs	r3, #0
 800b374:	f7f5 fbc0 	bl	8000af8 <__aeabi_dcmpeq>
 800b378:	b9d8      	cbnz	r0, 800b3b2 <_printf_float+0x432>
 800b37a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b37c:	f108 0201 	add.w	r2, r8, #1
 800b380:	3b01      	subs	r3, #1
 800b382:	4631      	mov	r1, r6
 800b384:	4628      	mov	r0, r5
 800b386:	47b8      	blx	r7
 800b388:	3001      	adds	r0, #1
 800b38a:	d10e      	bne.n	800b3aa <_printf_float+0x42a>
 800b38c:	e659      	b.n	800b042 <_printf_float+0xc2>
 800b38e:	2301      	movs	r3, #1
 800b390:	4652      	mov	r2, sl
 800b392:	4631      	mov	r1, r6
 800b394:	4628      	mov	r0, r5
 800b396:	47b8      	blx	r7
 800b398:	3001      	adds	r0, #1
 800b39a:	f43f ae52 	beq.w	800b042 <_printf_float+0xc2>
 800b39e:	f108 0801 	add.w	r8, r8, #1
 800b3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	4543      	cmp	r3, r8
 800b3a8:	dcf1      	bgt.n	800b38e <_printf_float+0x40e>
 800b3aa:	464b      	mov	r3, r9
 800b3ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b3b0:	e6dc      	b.n	800b16c <_printf_float+0x1ec>
 800b3b2:	f04f 0800 	mov.w	r8, #0
 800b3b6:	f104 0a1a 	add.w	sl, r4, #26
 800b3ba:	e7f2      	b.n	800b3a2 <_printf_float+0x422>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	4642      	mov	r2, r8
 800b3c0:	e7df      	b.n	800b382 <_printf_float+0x402>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	464a      	mov	r2, r9
 800b3c6:	4631      	mov	r1, r6
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	47b8      	blx	r7
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	f43f ae38 	beq.w	800b042 <_printf_float+0xc2>
 800b3d2:	f108 0801 	add.w	r8, r8, #1
 800b3d6:	68e3      	ldr	r3, [r4, #12]
 800b3d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3da:	1a5b      	subs	r3, r3, r1
 800b3dc:	4543      	cmp	r3, r8
 800b3de:	dcf0      	bgt.n	800b3c2 <_printf_float+0x442>
 800b3e0:	e6fa      	b.n	800b1d8 <_printf_float+0x258>
 800b3e2:	f04f 0800 	mov.w	r8, #0
 800b3e6:	f104 0919 	add.w	r9, r4, #25
 800b3ea:	e7f4      	b.n	800b3d6 <_printf_float+0x456>

0800b3ec <_printf_common>:
 800b3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3f0:	4616      	mov	r6, r2
 800b3f2:	4699      	mov	r9, r3
 800b3f4:	688a      	ldr	r2, [r1, #8]
 800b3f6:	690b      	ldr	r3, [r1, #16]
 800b3f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	bfb8      	it	lt
 800b400:	4613      	movlt	r3, r2
 800b402:	6033      	str	r3, [r6, #0]
 800b404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b408:	4607      	mov	r7, r0
 800b40a:	460c      	mov	r4, r1
 800b40c:	b10a      	cbz	r2, 800b412 <_printf_common+0x26>
 800b40e:	3301      	adds	r3, #1
 800b410:	6033      	str	r3, [r6, #0]
 800b412:	6823      	ldr	r3, [r4, #0]
 800b414:	0699      	lsls	r1, r3, #26
 800b416:	bf42      	ittt	mi
 800b418:	6833      	ldrmi	r3, [r6, #0]
 800b41a:	3302      	addmi	r3, #2
 800b41c:	6033      	strmi	r3, [r6, #0]
 800b41e:	6825      	ldr	r5, [r4, #0]
 800b420:	f015 0506 	ands.w	r5, r5, #6
 800b424:	d106      	bne.n	800b434 <_printf_common+0x48>
 800b426:	f104 0a19 	add.w	sl, r4, #25
 800b42a:	68e3      	ldr	r3, [r4, #12]
 800b42c:	6832      	ldr	r2, [r6, #0]
 800b42e:	1a9b      	subs	r3, r3, r2
 800b430:	42ab      	cmp	r3, r5
 800b432:	dc26      	bgt.n	800b482 <_printf_common+0x96>
 800b434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b438:	1e13      	subs	r3, r2, #0
 800b43a:	6822      	ldr	r2, [r4, #0]
 800b43c:	bf18      	it	ne
 800b43e:	2301      	movne	r3, #1
 800b440:	0692      	lsls	r2, r2, #26
 800b442:	d42b      	bmi.n	800b49c <_printf_common+0xb0>
 800b444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b448:	4649      	mov	r1, r9
 800b44a:	4638      	mov	r0, r7
 800b44c:	47c0      	blx	r8
 800b44e:	3001      	adds	r0, #1
 800b450:	d01e      	beq.n	800b490 <_printf_common+0xa4>
 800b452:	6823      	ldr	r3, [r4, #0]
 800b454:	68e5      	ldr	r5, [r4, #12]
 800b456:	6832      	ldr	r2, [r6, #0]
 800b458:	f003 0306 	and.w	r3, r3, #6
 800b45c:	2b04      	cmp	r3, #4
 800b45e:	bf08      	it	eq
 800b460:	1aad      	subeq	r5, r5, r2
 800b462:	68a3      	ldr	r3, [r4, #8]
 800b464:	6922      	ldr	r2, [r4, #16]
 800b466:	bf0c      	ite	eq
 800b468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b46c:	2500      	movne	r5, #0
 800b46e:	4293      	cmp	r3, r2
 800b470:	bfc4      	itt	gt
 800b472:	1a9b      	subgt	r3, r3, r2
 800b474:	18ed      	addgt	r5, r5, r3
 800b476:	2600      	movs	r6, #0
 800b478:	341a      	adds	r4, #26
 800b47a:	42b5      	cmp	r5, r6
 800b47c:	d11a      	bne.n	800b4b4 <_printf_common+0xc8>
 800b47e:	2000      	movs	r0, #0
 800b480:	e008      	b.n	800b494 <_printf_common+0xa8>
 800b482:	2301      	movs	r3, #1
 800b484:	4652      	mov	r2, sl
 800b486:	4649      	mov	r1, r9
 800b488:	4638      	mov	r0, r7
 800b48a:	47c0      	blx	r8
 800b48c:	3001      	adds	r0, #1
 800b48e:	d103      	bne.n	800b498 <_printf_common+0xac>
 800b490:	f04f 30ff 	mov.w	r0, #4294967295
 800b494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b498:	3501      	adds	r5, #1
 800b49a:	e7c6      	b.n	800b42a <_printf_common+0x3e>
 800b49c:	18e1      	adds	r1, r4, r3
 800b49e:	1c5a      	adds	r2, r3, #1
 800b4a0:	2030      	movs	r0, #48	; 0x30
 800b4a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4a6:	4422      	add	r2, r4
 800b4a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4b0:	3302      	adds	r3, #2
 800b4b2:	e7c7      	b.n	800b444 <_printf_common+0x58>
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	4649      	mov	r1, r9
 800b4ba:	4638      	mov	r0, r7
 800b4bc:	47c0      	blx	r8
 800b4be:	3001      	adds	r0, #1
 800b4c0:	d0e6      	beq.n	800b490 <_printf_common+0xa4>
 800b4c2:	3601      	adds	r6, #1
 800b4c4:	e7d9      	b.n	800b47a <_printf_common+0x8e>
	...

0800b4c8 <_printf_i>:
 800b4c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4cc:	7e0f      	ldrb	r7, [r1, #24]
 800b4ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4d0:	2f78      	cmp	r7, #120	; 0x78
 800b4d2:	4691      	mov	r9, r2
 800b4d4:	4680      	mov	r8, r0
 800b4d6:	460c      	mov	r4, r1
 800b4d8:	469a      	mov	sl, r3
 800b4da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4de:	d807      	bhi.n	800b4f0 <_printf_i+0x28>
 800b4e0:	2f62      	cmp	r7, #98	; 0x62
 800b4e2:	d80a      	bhi.n	800b4fa <_printf_i+0x32>
 800b4e4:	2f00      	cmp	r7, #0
 800b4e6:	f000 80d8 	beq.w	800b69a <_printf_i+0x1d2>
 800b4ea:	2f58      	cmp	r7, #88	; 0x58
 800b4ec:	f000 80a3 	beq.w	800b636 <_printf_i+0x16e>
 800b4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4f8:	e03a      	b.n	800b570 <_printf_i+0xa8>
 800b4fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4fe:	2b15      	cmp	r3, #21
 800b500:	d8f6      	bhi.n	800b4f0 <_printf_i+0x28>
 800b502:	a101      	add	r1, pc, #4	; (adr r1, 800b508 <_printf_i+0x40>)
 800b504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b508:	0800b561 	.word	0x0800b561
 800b50c:	0800b575 	.word	0x0800b575
 800b510:	0800b4f1 	.word	0x0800b4f1
 800b514:	0800b4f1 	.word	0x0800b4f1
 800b518:	0800b4f1 	.word	0x0800b4f1
 800b51c:	0800b4f1 	.word	0x0800b4f1
 800b520:	0800b575 	.word	0x0800b575
 800b524:	0800b4f1 	.word	0x0800b4f1
 800b528:	0800b4f1 	.word	0x0800b4f1
 800b52c:	0800b4f1 	.word	0x0800b4f1
 800b530:	0800b4f1 	.word	0x0800b4f1
 800b534:	0800b681 	.word	0x0800b681
 800b538:	0800b5a5 	.word	0x0800b5a5
 800b53c:	0800b663 	.word	0x0800b663
 800b540:	0800b4f1 	.word	0x0800b4f1
 800b544:	0800b4f1 	.word	0x0800b4f1
 800b548:	0800b6a3 	.word	0x0800b6a3
 800b54c:	0800b4f1 	.word	0x0800b4f1
 800b550:	0800b5a5 	.word	0x0800b5a5
 800b554:	0800b4f1 	.word	0x0800b4f1
 800b558:	0800b4f1 	.word	0x0800b4f1
 800b55c:	0800b66b 	.word	0x0800b66b
 800b560:	682b      	ldr	r3, [r5, #0]
 800b562:	1d1a      	adds	r2, r3, #4
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	602a      	str	r2, [r5, #0]
 800b568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b56c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b570:	2301      	movs	r3, #1
 800b572:	e0a3      	b.n	800b6bc <_printf_i+0x1f4>
 800b574:	6820      	ldr	r0, [r4, #0]
 800b576:	6829      	ldr	r1, [r5, #0]
 800b578:	0606      	lsls	r6, r0, #24
 800b57a:	f101 0304 	add.w	r3, r1, #4
 800b57e:	d50a      	bpl.n	800b596 <_printf_i+0xce>
 800b580:	680e      	ldr	r6, [r1, #0]
 800b582:	602b      	str	r3, [r5, #0]
 800b584:	2e00      	cmp	r6, #0
 800b586:	da03      	bge.n	800b590 <_printf_i+0xc8>
 800b588:	232d      	movs	r3, #45	; 0x2d
 800b58a:	4276      	negs	r6, r6
 800b58c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b590:	485e      	ldr	r0, [pc, #376]	; (800b70c <_printf_i+0x244>)
 800b592:	230a      	movs	r3, #10
 800b594:	e019      	b.n	800b5ca <_printf_i+0x102>
 800b596:	680e      	ldr	r6, [r1, #0]
 800b598:	602b      	str	r3, [r5, #0]
 800b59a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b59e:	bf18      	it	ne
 800b5a0:	b236      	sxthne	r6, r6
 800b5a2:	e7ef      	b.n	800b584 <_printf_i+0xbc>
 800b5a4:	682b      	ldr	r3, [r5, #0]
 800b5a6:	6820      	ldr	r0, [r4, #0]
 800b5a8:	1d19      	adds	r1, r3, #4
 800b5aa:	6029      	str	r1, [r5, #0]
 800b5ac:	0601      	lsls	r1, r0, #24
 800b5ae:	d501      	bpl.n	800b5b4 <_printf_i+0xec>
 800b5b0:	681e      	ldr	r6, [r3, #0]
 800b5b2:	e002      	b.n	800b5ba <_printf_i+0xf2>
 800b5b4:	0646      	lsls	r6, r0, #25
 800b5b6:	d5fb      	bpl.n	800b5b0 <_printf_i+0xe8>
 800b5b8:	881e      	ldrh	r6, [r3, #0]
 800b5ba:	4854      	ldr	r0, [pc, #336]	; (800b70c <_printf_i+0x244>)
 800b5bc:	2f6f      	cmp	r7, #111	; 0x6f
 800b5be:	bf0c      	ite	eq
 800b5c0:	2308      	moveq	r3, #8
 800b5c2:	230a      	movne	r3, #10
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5ca:	6865      	ldr	r5, [r4, #4]
 800b5cc:	60a5      	str	r5, [r4, #8]
 800b5ce:	2d00      	cmp	r5, #0
 800b5d0:	bfa2      	ittt	ge
 800b5d2:	6821      	ldrge	r1, [r4, #0]
 800b5d4:	f021 0104 	bicge.w	r1, r1, #4
 800b5d8:	6021      	strge	r1, [r4, #0]
 800b5da:	b90e      	cbnz	r6, 800b5e0 <_printf_i+0x118>
 800b5dc:	2d00      	cmp	r5, #0
 800b5de:	d04d      	beq.n	800b67c <_printf_i+0x1b4>
 800b5e0:	4615      	mov	r5, r2
 800b5e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5e6:	fb03 6711 	mls	r7, r3, r1, r6
 800b5ea:	5dc7      	ldrb	r7, [r0, r7]
 800b5ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5f0:	4637      	mov	r7, r6
 800b5f2:	42bb      	cmp	r3, r7
 800b5f4:	460e      	mov	r6, r1
 800b5f6:	d9f4      	bls.n	800b5e2 <_printf_i+0x11a>
 800b5f8:	2b08      	cmp	r3, #8
 800b5fa:	d10b      	bne.n	800b614 <_printf_i+0x14c>
 800b5fc:	6823      	ldr	r3, [r4, #0]
 800b5fe:	07de      	lsls	r6, r3, #31
 800b600:	d508      	bpl.n	800b614 <_printf_i+0x14c>
 800b602:	6923      	ldr	r3, [r4, #16]
 800b604:	6861      	ldr	r1, [r4, #4]
 800b606:	4299      	cmp	r1, r3
 800b608:	bfde      	ittt	le
 800b60a:	2330      	movle	r3, #48	; 0x30
 800b60c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b610:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b614:	1b52      	subs	r2, r2, r5
 800b616:	6122      	str	r2, [r4, #16]
 800b618:	f8cd a000 	str.w	sl, [sp]
 800b61c:	464b      	mov	r3, r9
 800b61e:	aa03      	add	r2, sp, #12
 800b620:	4621      	mov	r1, r4
 800b622:	4640      	mov	r0, r8
 800b624:	f7ff fee2 	bl	800b3ec <_printf_common>
 800b628:	3001      	adds	r0, #1
 800b62a:	d14c      	bne.n	800b6c6 <_printf_i+0x1fe>
 800b62c:	f04f 30ff 	mov.w	r0, #4294967295
 800b630:	b004      	add	sp, #16
 800b632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b636:	4835      	ldr	r0, [pc, #212]	; (800b70c <_printf_i+0x244>)
 800b638:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b63c:	6829      	ldr	r1, [r5, #0]
 800b63e:	6823      	ldr	r3, [r4, #0]
 800b640:	f851 6b04 	ldr.w	r6, [r1], #4
 800b644:	6029      	str	r1, [r5, #0]
 800b646:	061d      	lsls	r5, r3, #24
 800b648:	d514      	bpl.n	800b674 <_printf_i+0x1ac>
 800b64a:	07df      	lsls	r7, r3, #31
 800b64c:	bf44      	itt	mi
 800b64e:	f043 0320 	orrmi.w	r3, r3, #32
 800b652:	6023      	strmi	r3, [r4, #0]
 800b654:	b91e      	cbnz	r6, 800b65e <_printf_i+0x196>
 800b656:	6823      	ldr	r3, [r4, #0]
 800b658:	f023 0320 	bic.w	r3, r3, #32
 800b65c:	6023      	str	r3, [r4, #0]
 800b65e:	2310      	movs	r3, #16
 800b660:	e7b0      	b.n	800b5c4 <_printf_i+0xfc>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	f043 0320 	orr.w	r3, r3, #32
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	2378      	movs	r3, #120	; 0x78
 800b66c:	4828      	ldr	r0, [pc, #160]	; (800b710 <_printf_i+0x248>)
 800b66e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b672:	e7e3      	b.n	800b63c <_printf_i+0x174>
 800b674:	0659      	lsls	r1, r3, #25
 800b676:	bf48      	it	mi
 800b678:	b2b6      	uxthmi	r6, r6
 800b67a:	e7e6      	b.n	800b64a <_printf_i+0x182>
 800b67c:	4615      	mov	r5, r2
 800b67e:	e7bb      	b.n	800b5f8 <_printf_i+0x130>
 800b680:	682b      	ldr	r3, [r5, #0]
 800b682:	6826      	ldr	r6, [r4, #0]
 800b684:	6961      	ldr	r1, [r4, #20]
 800b686:	1d18      	adds	r0, r3, #4
 800b688:	6028      	str	r0, [r5, #0]
 800b68a:	0635      	lsls	r5, r6, #24
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	d501      	bpl.n	800b694 <_printf_i+0x1cc>
 800b690:	6019      	str	r1, [r3, #0]
 800b692:	e002      	b.n	800b69a <_printf_i+0x1d2>
 800b694:	0670      	lsls	r0, r6, #25
 800b696:	d5fb      	bpl.n	800b690 <_printf_i+0x1c8>
 800b698:	8019      	strh	r1, [r3, #0]
 800b69a:	2300      	movs	r3, #0
 800b69c:	6123      	str	r3, [r4, #16]
 800b69e:	4615      	mov	r5, r2
 800b6a0:	e7ba      	b.n	800b618 <_printf_i+0x150>
 800b6a2:	682b      	ldr	r3, [r5, #0]
 800b6a4:	1d1a      	adds	r2, r3, #4
 800b6a6:	602a      	str	r2, [r5, #0]
 800b6a8:	681d      	ldr	r5, [r3, #0]
 800b6aa:	6862      	ldr	r2, [r4, #4]
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f7f4 fdae 	bl	8000210 <memchr>
 800b6b4:	b108      	cbz	r0, 800b6ba <_printf_i+0x1f2>
 800b6b6:	1b40      	subs	r0, r0, r5
 800b6b8:	6060      	str	r0, [r4, #4]
 800b6ba:	6863      	ldr	r3, [r4, #4]
 800b6bc:	6123      	str	r3, [r4, #16]
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6c4:	e7a8      	b.n	800b618 <_printf_i+0x150>
 800b6c6:	6923      	ldr	r3, [r4, #16]
 800b6c8:	462a      	mov	r2, r5
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	4640      	mov	r0, r8
 800b6ce:	47d0      	blx	sl
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	d0ab      	beq.n	800b62c <_printf_i+0x164>
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	079b      	lsls	r3, r3, #30
 800b6d8:	d413      	bmi.n	800b702 <_printf_i+0x23a>
 800b6da:	68e0      	ldr	r0, [r4, #12]
 800b6dc:	9b03      	ldr	r3, [sp, #12]
 800b6de:	4298      	cmp	r0, r3
 800b6e0:	bfb8      	it	lt
 800b6e2:	4618      	movlt	r0, r3
 800b6e4:	e7a4      	b.n	800b630 <_printf_i+0x168>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	4632      	mov	r2, r6
 800b6ea:	4649      	mov	r1, r9
 800b6ec:	4640      	mov	r0, r8
 800b6ee:	47d0      	blx	sl
 800b6f0:	3001      	adds	r0, #1
 800b6f2:	d09b      	beq.n	800b62c <_printf_i+0x164>
 800b6f4:	3501      	adds	r5, #1
 800b6f6:	68e3      	ldr	r3, [r4, #12]
 800b6f8:	9903      	ldr	r1, [sp, #12]
 800b6fa:	1a5b      	subs	r3, r3, r1
 800b6fc:	42ab      	cmp	r3, r5
 800b6fe:	dcf2      	bgt.n	800b6e6 <_printf_i+0x21e>
 800b700:	e7eb      	b.n	800b6da <_printf_i+0x212>
 800b702:	2500      	movs	r5, #0
 800b704:	f104 0619 	add.w	r6, r4, #25
 800b708:	e7f5      	b.n	800b6f6 <_printf_i+0x22e>
 800b70a:	bf00      	nop
 800b70c:	0800fd42 	.word	0x0800fd42
 800b710:	0800fd53 	.word	0x0800fd53

0800b714 <_sbrk_r>:
 800b714:	b538      	push	{r3, r4, r5, lr}
 800b716:	4d06      	ldr	r5, [pc, #24]	; (800b730 <_sbrk_r+0x1c>)
 800b718:	2300      	movs	r3, #0
 800b71a:	4604      	mov	r4, r0
 800b71c:	4608      	mov	r0, r1
 800b71e:	602b      	str	r3, [r5, #0]
 800b720:	f004 f9c0 	bl	800faa4 <_sbrk>
 800b724:	1c43      	adds	r3, r0, #1
 800b726:	d102      	bne.n	800b72e <_sbrk_r+0x1a>
 800b728:	682b      	ldr	r3, [r5, #0]
 800b72a:	b103      	cbz	r3, 800b72e <_sbrk_r+0x1a>
 800b72c:	6023      	str	r3, [r4, #0]
 800b72e:	bd38      	pop	{r3, r4, r5, pc}
 800b730:	200138b4 	.word	0x200138b4

0800b734 <quorem>:
 800b734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b738:	6903      	ldr	r3, [r0, #16]
 800b73a:	690c      	ldr	r4, [r1, #16]
 800b73c:	42a3      	cmp	r3, r4
 800b73e:	4607      	mov	r7, r0
 800b740:	f2c0 8081 	blt.w	800b846 <quorem+0x112>
 800b744:	3c01      	subs	r4, #1
 800b746:	f101 0814 	add.w	r8, r1, #20
 800b74a:	f100 0514 	add.w	r5, r0, #20
 800b74e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b752:	9301      	str	r3, [sp, #4]
 800b754:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b758:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b75c:	3301      	adds	r3, #1
 800b75e:	429a      	cmp	r2, r3
 800b760:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b764:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b768:	fbb2 f6f3 	udiv	r6, r2, r3
 800b76c:	d331      	bcc.n	800b7d2 <quorem+0x9e>
 800b76e:	f04f 0e00 	mov.w	lr, #0
 800b772:	4640      	mov	r0, r8
 800b774:	46ac      	mov	ip, r5
 800b776:	46f2      	mov	sl, lr
 800b778:	f850 2b04 	ldr.w	r2, [r0], #4
 800b77c:	b293      	uxth	r3, r2
 800b77e:	fb06 e303 	mla	r3, r6, r3, lr
 800b782:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b786:	b29b      	uxth	r3, r3
 800b788:	ebaa 0303 	sub.w	r3, sl, r3
 800b78c:	f8dc a000 	ldr.w	sl, [ip]
 800b790:	0c12      	lsrs	r2, r2, #16
 800b792:	fa13 f38a 	uxtah	r3, r3, sl
 800b796:	fb06 e202 	mla	r2, r6, r2, lr
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	9b00      	ldr	r3, [sp, #0]
 800b79e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b7a2:	b292      	uxth	r2, r2
 800b7a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b7a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7ac:	f8bd 3000 	ldrh.w	r3, [sp]
 800b7b0:	4581      	cmp	r9, r0
 800b7b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7b6:	f84c 3b04 	str.w	r3, [ip], #4
 800b7ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b7be:	d2db      	bcs.n	800b778 <quorem+0x44>
 800b7c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800b7c4:	b92b      	cbnz	r3, 800b7d2 <quorem+0x9e>
 800b7c6:	9b01      	ldr	r3, [sp, #4]
 800b7c8:	3b04      	subs	r3, #4
 800b7ca:	429d      	cmp	r5, r3
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	d32e      	bcc.n	800b82e <quorem+0xfa>
 800b7d0:	613c      	str	r4, [r7, #16]
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	f001 f8bc 	bl	800c950 <__mcmp>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	db24      	blt.n	800b826 <quorem+0xf2>
 800b7dc:	3601      	adds	r6, #1
 800b7de:	4628      	mov	r0, r5
 800b7e0:	f04f 0c00 	mov.w	ip, #0
 800b7e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7e8:	f8d0 e000 	ldr.w	lr, [r0]
 800b7ec:	b293      	uxth	r3, r2
 800b7ee:	ebac 0303 	sub.w	r3, ip, r3
 800b7f2:	0c12      	lsrs	r2, r2, #16
 800b7f4:	fa13 f38e 	uxtah	r3, r3, lr
 800b7f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b7fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b800:	b29b      	uxth	r3, r3
 800b802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b806:	45c1      	cmp	r9, r8
 800b808:	f840 3b04 	str.w	r3, [r0], #4
 800b80c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b810:	d2e8      	bcs.n	800b7e4 <quorem+0xb0>
 800b812:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b81a:	b922      	cbnz	r2, 800b826 <quorem+0xf2>
 800b81c:	3b04      	subs	r3, #4
 800b81e:	429d      	cmp	r5, r3
 800b820:	461a      	mov	r2, r3
 800b822:	d30a      	bcc.n	800b83a <quorem+0x106>
 800b824:	613c      	str	r4, [r7, #16]
 800b826:	4630      	mov	r0, r6
 800b828:	b003      	add	sp, #12
 800b82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b82e:	6812      	ldr	r2, [r2, #0]
 800b830:	3b04      	subs	r3, #4
 800b832:	2a00      	cmp	r2, #0
 800b834:	d1cc      	bne.n	800b7d0 <quorem+0x9c>
 800b836:	3c01      	subs	r4, #1
 800b838:	e7c7      	b.n	800b7ca <quorem+0x96>
 800b83a:	6812      	ldr	r2, [r2, #0]
 800b83c:	3b04      	subs	r3, #4
 800b83e:	2a00      	cmp	r2, #0
 800b840:	d1f0      	bne.n	800b824 <quorem+0xf0>
 800b842:	3c01      	subs	r4, #1
 800b844:	e7eb      	b.n	800b81e <quorem+0xea>
 800b846:	2000      	movs	r0, #0
 800b848:	e7ee      	b.n	800b828 <quorem+0xf4>
 800b84a:	0000      	movs	r0, r0
 800b84c:	0000      	movs	r0, r0
	...

0800b850 <_dtoa_r>:
 800b850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b854:	ed2d 8b04 	vpush	{d8-d9}
 800b858:	ec57 6b10 	vmov	r6, r7, d0
 800b85c:	b093      	sub	sp, #76	; 0x4c
 800b85e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b860:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b864:	9106      	str	r1, [sp, #24]
 800b866:	ee10 aa10 	vmov	sl, s0
 800b86a:	4604      	mov	r4, r0
 800b86c:	9209      	str	r2, [sp, #36]	; 0x24
 800b86e:	930c      	str	r3, [sp, #48]	; 0x30
 800b870:	46bb      	mov	fp, r7
 800b872:	b975      	cbnz	r5, 800b892 <_dtoa_r+0x42>
 800b874:	2010      	movs	r0, #16
 800b876:	f7ff f9e5 	bl	800ac44 <malloc>
 800b87a:	4602      	mov	r2, r0
 800b87c:	6260      	str	r0, [r4, #36]	; 0x24
 800b87e:	b920      	cbnz	r0, 800b88a <_dtoa_r+0x3a>
 800b880:	4ba7      	ldr	r3, [pc, #668]	; (800bb20 <_dtoa_r+0x2d0>)
 800b882:	21ea      	movs	r1, #234	; 0xea
 800b884:	48a7      	ldr	r0, [pc, #668]	; (800bb24 <_dtoa_r+0x2d4>)
 800b886:	f001 f97b 	bl	800cb80 <__assert_func>
 800b88a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b88e:	6005      	str	r5, [r0, #0]
 800b890:	60c5      	str	r5, [r0, #12]
 800b892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b894:	6819      	ldr	r1, [r3, #0]
 800b896:	b151      	cbz	r1, 800b8ae <_dtoa_r+0x5e>
 800b898:	685a      	ldr	r2, [r3, #4]
 800b89a:	604a      	str	r2, [r1, #4]
 800b89c:	2301      	movs	r3, #1
 800b89e:	4093      	lsls	r3, r2
 800b8a0:	608b      	str	r3, [r1, #8]
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f000 fe12 	bl	800c4cc <_Bfree>
 800b8a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	601a      	str	r2, [r3, #0]
 800b8ae:	1e3b      	subs	r3, r7, #0
 800b8b0:	bfaa      	itet	ge
 800b8b2:	2300      	movge	r3, #0
 800b8b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b8b8:	f8c8 3000 	strge.w	r3, [r8]
 800b8bc:	4b9a      	ldr	r3, [pc, #616]	; (800bb28 <_dtoa_r+0x2d8>)
 800b8be:	bfbc      	itt	lt
 800b8c0:	2201      	movlt	r2, #1
 800b8c2:	f8c8 2000 	strlt.w	r2, [r8]
 800b8c6:	ea33 030b 	bics.w	r3, r3, fp
 800b8ca:	d11b      	bne.n	800b904 <_dtoa_r+0xb4>
 800b8cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800b8d2:	6013      	str	r3, [r2, #0]
 800b8d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8d8:	4333      	orrs	r3, r6
 800b8da:	f000 8592 	beq.w	800c402 <_dtoa_r+0xbb2>
 800b8de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8e0:	b963      	cbnz	r3, 800b8fc <_dtoa_r+0xac>
 800b8e2:	4b92      	ldr	r3, [pc, #584]	; (800bb2c <_dtoa_r+0x2dc>)
 800b8e4:	e022      	b.n	800b92c <_dtoa_r+0xdc>
 800b8e6:	4b92      	ldr	r3, [pc, #584]	; (800bb30 <_dtoa_r+0x2e0>)
 800b8e8:	9301      	str	r3, [sp, #4]
 800b8ea:	3308      	adds	r3, #8
 800b8ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8ee:	6013      	str	r3, [r2, #0]
 800b8f0:	9801      	ldr	r0, [sp, #4]
 800b8f2:	b013      	add	sp, #76	; 0x4c
 800b8f4:	ecbd 8b04 	vpop	{d8-d9}
 800b8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fc:	4b8b      	ldr	r3, [pc, #556]	; (800bb2c <_dtoa_r+0x2dc>)
 800b8fe:	9301      	str	r3, [sp, #4]
 800b900:	3303      	adds	r3, #3
 800b902:	e7f3      	b.n	800b8ec <_dtoa_r+0x9c>
 800b904:	2200      	movs	r2, #0
 800b906:	2300      	movs	r3, #0
 800b908:	4650      	mov	r0, sl
 800b90a:	4659      	mov	r1, fp
 800b90c:	f7f5 f8f4 	bl	8000af8 <__aeabi_dcmpeq>
 800b910:	ec4b ab19 	vmov	d9, sl, fp
 800b914:	4680      	mov	r8, r0
 800b916:	b158      	cbz	r0, 800b930 <_dtoa_r+0xe0>
 800b918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b91a:	2301      	movs	r3, #1
 800b91c:	6013      	str	r3, [r2, #0]
 800b91e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b920:	2b00      	cmp	r3, #0
 800b922:	f000 856b 	beq.w	800c3fc <_dtoa_r+0xbac>
 800b926:	4883      	ldr	r0, [pc, #524]	; (800bb34 <_dtoa_r+0x2e4>)
 800b928:	6018      	str	r0, [r3, #0]
 800b92a:	1e43      	subs	r3, r0, #1
 800b92c:	9301      	str	r3, [sp, #4]
 800b92e:	e7df      	b.n	800b8f0 <_dtoa_r+0xa0>
 800b930:	ec4b ab10 	vmov	d0, sl, fp
 800b934:	aa10      	add	r2, sp, #64	; 0x40
 800b936:	a911      	add	r1, sp, #68	; 0x44
 800b938:	4620      	mov	r0, r4
 800b93a:	f001 f8af 	bl	800ca9c <__d2b>
 800b93e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b942:	ee08 0a10 	vmov	s16, r0
 800b946:	2d00      	cmp	r5, #0
 800b948:	f000 8084 	beq.w	800ba54 <_dtoa_r+0x204>
 800b94c:	ee19 3a90 	vmov	r3, s19
 800b950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b954:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b958:	4656      	mov	r6, sl
 800b95a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b95e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b962:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b966:	4b74      	ldr	r3, [pc, #464]	; (800bb38 <_dtoa_r+0x2e8>)
 800b968:	2200      	movs	r2, #0
 800b96a:	4630      	mov	r0, r6
 800b96c:	4639      	mov	r1, r7
 800b96e:	f7f4 fca3 	bl	80002b8 <__aeabi_dsub>
 800b972:	a365      	add	r3, pc, #404	; (adr r3, 800bb08 <_dtoa_r+0x2b8>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	f7f4 fe56 	bl	8000628 <__aeabi_dmul>
 800b97c:	a364      	add	r3, pc, #400	; (adr r3, 800bb10 <_dtoa_r+0x2c0>)
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f7f4 fc9b 	bl	80002bc <__adddf3>
 800b986:	4606      	mov	r6, r0
 800b988:	4628      	mov	r0, r5
 800b98a:	460f      	mov	r7, r1
 800b98c:	f7f4 fde2 	bl	8000554 <__aeabi_i2d>
 800b990:	a361      	add	r3, pc, #388	; (adr r3, 800bb18 <_dtoa_r+0x2c8>)
 800b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b996:	f7f4 fe47 	bl	8000628 <__aeabi_dmul>
 800b99a:	4602      	mov	r2, r0
 800b99c:	460b      	mov	r3, r1
 800b99e:	4630      	mov	r0, r6
 800b9a0:	4639      	mov	r1, r7
 800b9a2:	f7f4 fc8b 	bl	80002bc <__adddf3>
 800b9a6:	4606      	mov	r6, r0
 800b9a8:	460f      	mov	r7, r1
 800b9aa:	f7f5 f8ed 	bl	8000b88 <__aeabi_d2iz>
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	9000      	str	r0, [sp, #0]
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	4639      	mov	r1, r7
 800b9b8:	f7f5 f8a8 	bl	8000b0c <__aeabi_dcmplt>
 800b9bc:	b150      	cbz	r0, 800b9d4 <_dtoa_r+0x184>
 800b9be:	9800      	ldr	r0, [sp, #0]
 800b9c0:	f7f4 fdc8 	bl	8000554 <__aeabi_i2d>
 800b9c4:	4632      	mov	r2, r6
 800b9c6:	463b      	mov	r3, r7
 800b9c8:	f7f5 f896 	bl	8000af8 <__aeabi_dcmpeq>
 800b9cc:	b910      	cbnz	r0, 800b9d4 <_dtoa_r+0x184>
 800b9ce:	9b00      	ldr	r3, [sp, #0]
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	9300      	str	r3, [sp, #0]
 800b9d4:	9b00      	ldr	r3, [sp, #0]
 800b9d6:	2b16      	cmp	r3, #22
 800b9d8:	d85a      	bhi.n	800ba90 <_dtoa_r+0x240>
 800b9da:	9a00      	ldr	r2, [sp, #0]
 800b9dc:	4b57      	ldr	r3, [pc, #348]	; (800bb3c <_dtoa_r+0x2ec>)
 800b9de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e6:	ec51 0b19 	vmov	r0, r1, d9
 800b9ea:	f7f5 f88f 	bl	8000b0c <__aeabi_dcmplt>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	d050      	beq.n	800ba94 <_dtoa_r+0x244>
 800b9f2:	9b00      	ldr	r3, [sp, #0]
 800b9f4:	3b01      	subs	r3, #1
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9fe:	1b5d      	subs	r5, r3, r5
 800ba00:	1e6b      	subs	r3, r5, #1
 800ba02:	9305      	str	r3, [sp, #20]
 800ba04:	bf45      	ittet	mi
 800ba06:	f1c5 0301 	rsbmi	r3, r5, #1
 800ba0a:	9304      	strmi	r3, [sp, #16]
 800ba0c:	2300      	movpl	r3, #0
 800ba0e:	2300      	movmi	r3, #0
 800ba10:	bf4c      	ite	mi
 800ba12:	9305      	strmi	r3, [sp, #20]
 800ba14:	9304      	strpl	r3, [sp, #16]
 800ba16:	9b00      	ldr	r3, [sp, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	db3d      	blt.n	800ba98 <_dtoa_r+0x248>
 800ba1c:	9b05      	ldr	r3, [sp, #20]
 800ba1e:	9a00      	ldr	r2, [sp, #0]
 800ba20:	920a      	str	r2, [sp, #40]	; 0x28
 800ba22:	4413      	add	r3, r2
 800ba24:	9305      	str	r3, [sp, #20]
 800ba26:	2300      	movs	r3, #0
 800ba28:	9307      	str	r3, [sp, #28]
 800ba2a:	9b06      	ldr	r3, [sp, #24]
 800ba2c:	2b09      	cmp	r3, #9
 800ba2e:	f200 8089 	bhi.w	800bb44 <_dtoa_r+0x2f4>
 800ba32:	2b05      	cmp	r3, #5
 800ba34:	bfc4      	itt	gt
 800ba36:	3b04      	subgt	r3, #4
 800ba38:	9306      	strgt	r3, [sp, #24]
 800ba3a:	9b06      	ldr	r3, [sp, #24]
 800ba3c:	f1a3 0302 	sub.w	r3, r3, #2
 800ba40:	bfcc      	ite	gt
 800ba42:	2500      	movgt	r5, #0
 800ba44:	2501      	movle	r5, #1
 800ba46:	2b03      	cmp	r3, #3
 800ba48:	f200 8087 	bhi.w	800bb5a <_dtoa_r+0x30a>
 800ba4c:	e8df f003 	tbb	[pc, r3]
 800ba50:	59383a2d 	.word	0x59383a2d
 800ba54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ba58:	441d      	add	r5, r3
 800ba5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ba5e:	2b20      	cmp	r3, #32
 800ba60:	bfc1      	itttt	gt
 800ba62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba6a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ba6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba72:	bfda      	itte	le
 800ba74:	f1c3 0320 	rsble	r3, r3, #32
 800ba78:	fa06 f003 	lslle.w	r0, r6, r3
 800ba7c:	4318      	orrgt	r0, r3
 800ba7e:	f7f4 fd59 	bl	8000534 <__aeabi_ui2d>
 800ba82:	2301      	movs	r3, #1
 800ba84:	4606      	mov	r6, r0
 800ba86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ba8a:	3d01      	subs	r5, #1
 800ba8c:	930e      	str	r3, [sp, #56]	; 0x38
 800ba8e:	e76a      	b.n	800b966 <_dtoa_r+0x116>
 800ba90:	2301      	movs	r3, #1
 800ba92:	e7b2      	b.n	800b9fa <_dtoa_r+0x1aa>
 800ba94:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba96:	e7b1      	b.n	800b9fc <_dtoa_r+0x1ac>
 800ba98:	9b04      	ldr	r3, [sp, #16]
 800ba9a:	9a00      	ldr	r2, [sp, #0]
 800ba9c:	1a9b      	subs	r3, r3, r2
 800ba9e:	9304      	str	r3, [sp, #16]
 800baa0:	4253      	negs	r3, r2
 800baa2:	9307      	str	r3, [sp, #28]
 800baa4:	2300      	movs	r3, #0
 800baa6:	930a      	str	r3, [sp, #40]	; 0x28
 800baa8:	e7bf      	b.n	800ba2a <_dtoa_r+0x1da>
 800baaa:	2300      	movs	r3, #0
 800baac:	9308      	str	r3, [sp, #32]
 800baae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	dc55      	bgt.n	800bb60 <_dtoa_r+0x310>
 800bab4:	2301      	movs	r3, #1
 800bab6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800baba:	461a      	mov	r2, r3
 800babc:	9209      	str	r2, [sp, #36]	; 0x24
 800babe:	e00c      	b.n	800bada <_dtoa_r+0x28a>
 800bac0:	2301      	movs	r3, #1
 800bac2:	e7f3      	b.n	800baac <_dtoa_r+0x25c>
 800bac4:	2300      	movs	r3, #0
 800bac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bac8:	9308      	str	r3, [sp, #32]
 800baca:	9b00      	ldr	r3, [sp, #0]
 800bacc:	4413      	add	r3, r2
 800bace:	9302      	str	r3, [sp, #8]
 800bad0:	3301      	adds	r3, #1
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	9303      	str	r3, [sp, #12]
 800bad6:	bfb8      	it	lt
 800bad8:	2301      	movlt	r3, #1
 800bada:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800badc:	2200      	movs	r2, #0
 800bade:	6042      	str	r2, [r0, #4]
 800bae0:	2204      	movs	r2, #4
 800bae2:	f102 0614 	add.w	r6, r2, #20
 800bae6:	429e      	cmp	r6, r3
 800bae8:	6841      	ldr	r1, [r0, #4]
 800baea:	d93d      	bls.n	800bb68 <_dtoa_r+0x318>
 800baec:	4620      	mov	r0, r4
 800baee:	f000 fcad 	bl	800c44c <_Balloc>
 800baf2:	9001      	str	r0, [sp, #4]
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d13b      	bne.n	800bb70 <_dtoa_r+0x320>
 800baf8:	4b11      	ldr	r3, [pc, #68]	; (800bb40 <_dtoa_r+0x2f0>)
 800bafa:	4602      	mov	r2, r0
 800bafc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bb00:	e6c0      	b.n	800b884 <_dtoa_r+0x34>
 800bb02:	2301      	movs	r3, #1
 800bb04:	e7df      	b.n	800bac6 <_dtoa_r+0x276>
 800bb06:	bf00      	nop
 800bb08:	636f4361 	.word	0x636f4361
 800bb0c:	3fd287a7 	.word	0x3fd287a7
 800bb10:	8b60c8b3 	.word	0x8b60c8b3
 800bb14:	3fc68a28 	.word	0x3fc68a28
 800bb18:	509f79fb 	.word	0x509f79fb
 800bb1c:	3fd34413 	.word	0x3fd34413
 800bb20:	0800fd71 	.word	0x0800fd71
 800bb24:	0800fd88 	.word	0x0800fd88
 800bb28:	7ff00000 	.word	0x7ff00000
 800bb2c:	0800fd6d 	.word	0x0800fd6d
 800bb30:	0800fd64 	.word	0x0800fd64
 800bb34:	0800fd41 	.word	0x0800fd41
 800bb38:	3ff80000 	.word	0x3ff80000
 800bb3c:	0800fe78 	.word	0x0800fe78
 800bb40:	0800fde3 	.word	0x0800fde3
 800bb44:	2501      	movs	r5, #1
 800bb46:	2300      	movs	r3, #0
 800bb48:	9306      	str	r3, [sp, #24]
 800bb4a:	9508      	str	r5, [sp, #32]
 800bb4c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb54:	2200      	movs	r2, #0
 800bb56:	2312      	movs	r3, #18
 800bb58:	e7b0      	b.n	800babc <_dtoa_r+0x26c>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	9308      	str	r3, [sp, #32]
 800bb5e:	e7f5      	b.n	800bb4c <_dtoa_r+0x2fc>
 800bb60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb66:	e7b8      	b.n	800bada <_dtoa_r+0x28a>
 800bb68:	3101      	adds	r1, #1
 800bb6a:	6041      	str	r1, [r0, #4]
 800bb6c:	0052      	lsls	r2, r2, #1
 800bb6e:	e7b8      	b.n	800bae2 <_dtoa_r+0x292>
 800bb70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb72:	9a01      	ldr	r2, [sp, #4]
 800bb74:	601a      	str	r2, [r3, #0]
 800bb76:	9b03      	ldr	r3, [sp, #12]
 800bb78:	2b0e      	cmp	r3, #14
 800bb7a:	f200 809d 	bhi.w	800bcb8 <_dtoa_r+0x468>
 800bb7e:	2d00      	cmp	r5, #0
 800bb80:	f000 809a 	beq.w	800bcb8 <_dtoa_r+0x468>
 800bb84:	9b00      	ldr	r3, [sp, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	dd32      	ble.n	800bbf0 <_dtoa_r+0x3a0>
 800bb8a:	4ab7      	ldr	r2, [pc, #732]	; (800be68 <_dtoa_r+0x618>)
 800bb8c:	f003 030f 	and.w	r3, r3, #15
 800bb90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb98:	9b00      	ldr	r3, [sp, #0]
 800bb9a:	05d8      	lsls	r0, r3, #23
 800bb9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bba0:	d516      	bpl.n	800bbd0 <_dtoa_r+0x380>
 800bba2:	4bb2      	ldr	r3, [pc, #712]	; (800be6c <_dtoa_r+0x61c>)
 800bba4:	ec51 0b19 	vmov	r0, r1, d9
 800bba8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbac:	f7f4 fe66 	bl	800087c <__aeabi_ddiv>
 800bbb0:	f007 070f 	and.w	r7, r7, #15
 800bbb4:	4682      	mov	sl, r0
 800bbb6:	468b      	mov	fp, r1
 800bbb8:	2503      	movs	r5, #3
 800bbba:	4eac      	ldr	r6, [pc, #688]	; (800be6c <_dtoa_r+0x61c>)
 800bbbc:	b957      	cbnz	r7, 800bbd4 <_dtoa_r+0x384>
 800bbbe:	4642      	mov	r2, r8
 800bbc0:	464b      	mov	r3, r9
 800bbc2:	4650      	mov	r0, sl
 800bbc4:	4659      	mov	r1, fp
 800bbc6:	f7f4 fe59 	bl	800087c <__aeabi_ddiv>
 800bbca:	4682      	mov	sl, r0
 800bbcc:	468b      	mov	fp, r1
 800bbce:	e028      	b.n	800bc22 <_dtoa_r+0x3d2>
 800bbd0:	2502      	movs	r5, #2
 800bbd2:	e7f2      	b.n	800bbba <_dtoa_r+0x36a>
 800bbd4:	07f9      	lsls	r1, r7, #31
 800bbd6:	d508      	bpl.n	800bbea <_dtoa_r+0x39a>
 800bbd8:	4640      	mov	r0, r8
 800bbda:	4649      	mov	r1, r9
 800bbdc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bbe0:	f7f4 fd22 	bl	8000628 <__aeabi_dmul>
 800bbe4:	3501      	adds	r5, #1
 800bbe6:	4680      	mov	r8, r0
 800bbe8:	4689      	mov	r9, r1
 800bbea:	107f      	asrs	r7, r7, #1
 800bbec:	3608      	adds	r6, #8
 800bbee:	e7e5      	b.n	800bbbc <_dtoa_r+0x36c>
 800bbf0:	f000 809b 	beq.w	800bd2a <_dtoa_r+0x4da>
 800bbf4:	9b00      	ldr	r3, [sp, #0]
 800bbf6:	4f9d      	ldr	r7, [pc, #628]	; (800be6c <_dtoa_r+0x61c>)
 800bbf8:	425e      	negs	r6, r3
 800bbfa:	4b9b      	ldr	r3, [pc, #620]	; (800be68 <_dtoa_r+0x618>)
 800bbfc:	f006 020f 	and.w	r2, r6, #15
 800bc00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc08:	ec51 0b19 	vmov	r0, r1, d9
 800bc0c:	f7f4 fd0c 	bl	8000628 <__aeabi_dmul>
 800bc10:	1136      	asrs	r6, r6, #4
 800bc12:	4682      	mov	sl, r0
 800bc14:	468b      	mov	fp, r1
 800bc16:	2300      	movs	r3, #0
 800bc18:	2502      	movs	r5, #2
 800bc1a:	2e00      	cmp	r6, #0
 800bc1c:	d17a      	bne.n	800bd14 <_dtoa_r+0x4c4>
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1d3      	bne.n	800bbca <_dtoa_r+0x37a>
 800bc22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	f000 8082 	beq.w	800bd2e <_dtoa_r+0x4de>
 800bc2a:	4b91      	ldr	r3, [pc, #580]	; (800be70 <_dtoa_r+0x620>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	4650      	mov	r0, sl
 800bc30:	4659      	mov	r1, fp
 800bc32:	f7f4 ff6b 	bl	8000b0c <__aeabi_dcmplt>
 800bc36:	2800      	cmp	r0, #0
 800bc38:	d079      	beq.n	800bd2e <_dtoa_r+0x4de>
 800bc3a:	9b03      	ldr	r3, [sp, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d076      	beq.n	800bd2e <_dtoa_r+0x4de>
 800bc40:	9b02      	ldr	r3, [sp, #8]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	dd36      	ble.n	800bcb4 <_dtoa_r+0x464>
 800bc46:	9b00      	ldr	r3, [sp, #0]
 800bc48:	4650      	mov	r0, sl
 800bc4a:	4659      	mov	r1, fp
 800bc4c:	1e5f      	subs	r7, r3, #1
 800bc4e:	2200      	movs	r2, #0
 800bc50:	4b88      	ldr	r3, [pc, #544]	; (800be74 <_dtoa_r+0x624>)
 800bc52:	f7f4 fce9 	bl	8000628 <__aeabi_dmul>
 800bc56:	9e02      	ldr	r6, [sp, #8]
 800bc58:	4682      	mov	sl, r0
 800bc5a:	468b      	mov	fp, r1
 800bc5c:	3501      	adds	r5, #1
 800bc5e:	4628      	mov	r0, r5
 800bc60:	f7f4 fc78 	bl	8000554 <__aeabi_i2d>
 800bc64:	4652      	mov	r2, sl
 800bc66:	465b      	mov	r3, fp
 800bc68:	f7f4 fcde 	bl	8000628 <__aeabi_dmul>
 800bc6c:	4b82      	ldr	r3, [pc, #520]	; (800be78 <_dtoa_r+0x628>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f7f4 fb24 	bl	80002bc <__adddf3>
 800bc74:	46d0      	mov	r8, sl
 800bc76:	46d9      	mov	r9, fp
 800bc78:	4682      	mov	sl, r0
 800bc7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bc7e:	2e00      	cmp	r6, #0
 800bc80:	d158      	bne.n	800bd34 <_dtoa_r+0x4e4>
 800bc82:	4b7e      	ldr	r3, [pc, #504]	; (800be7c <_dtoa_r+0x62c>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	4640      	mov	r0, r8
 800bc88:	4649      	mov	r1, r9
 800bc8a:	f7f4 fb15 	bl	80002b8 <__aeabi_dsub>
 800bc8e:	4652      	mov	r2, sl
 800bc90:	465b      	mov	r3, fp
 800bc92:	4680      	mov	r8, r0
 800bc94:	4689      	mov	r9, r1
 800bc96:	f7f4 ff57 	bl	8000b48 <__aeabi_dcmpgt>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	f040 8295 	bne.w	800c1ca <_dtoa_r+0x97a>
 800bca0:	4652      	mov	r2, sl
 800bca2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bca6:	4640      	mov	r0, r8
 800bca8:	4649      	mov	r1, r9
 800bcaa:	f7f4 ff2f 	bl	8000b0c <__aeabi_dcmplt>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	f040 8289 	bne.w	800c1c6 <_dtoa_r+0x976>
 800bcb4:	ec5b ab19 	vmov	sl, fp, d9
 800bcb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f2c0 8148 	blt.w	800bf50 <_dtoa_r+0x700>
 800bcc0:	9a00      	ldr	r2, [sp, #0]
 800bcc2:	2a0e      	cmp	r2, #14
 800bcc4:	f300 8144 	bgt.w	800bf50 <_dtoa_r+0x700>
 800bcc8:	4b67      	ldr	r3, [pc, #412]	; (800be68 <_dtoa_r+0x618>)
 800bcca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bcd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f280 80d5 	bge.w	800be84 <_dtoa_r+0x634>
 800bcda:	9b03      	ldr	r3, [sp, #12]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f300 80d1 	bgt.w	800be84 <_dtoa_r+0x634>
 800bce2:	f040 826f 	bne.w	800c1c4 <_dtoa_r+0x974>
 800bce6:	4b65      	ldr	r3, [pc, #404]	; (800be7c <_dtoa_r+0x62c>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	4640      	mov	r0, r8
 800bcec:	4649      	mov	r1, r9
 800bcee:	f7f4 fc9b 	bl	8000628 <__aeabi_dmul>
 800bcf2:	4652      	mov	r2, sl
 800bcf4:	465b      	mov	r3, fp
 800bcf6:	f7f4 ff1d 	bl	8000b34 <__aeabi_dcmpge>
 800bcfa:	9e03      	ldr	r6, [sp, #12]
 800bcfc:	4637      	mov	r7, r6
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	f040 8245 	bne.w	800c18e <_dtoa_r+0x93e>
 800bd04:	9d01      	ldr	r5, [sp, #4]
 800bd06:	2331      	movs	r3, #49	; 0x31
 800bd08:	f805 3b01 	strb.w	r3, [r5], #1
 800bd0c:	9b00      	ldr	r3, [sp, #0]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	9300      	str	r3, [sp, #0]
 800bd12:	e240      	b.n	800c196 <_dtoa_r+0x946>
 800bd14:	07f2      	lsls	r2, r6, #31
 800bd16:	d505      	bpl.n	800bd24 <_dtoa_r+0x4d4>
 800bd18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd1c:	f7f4 fc84 	bl	8000628 <__aeabi_dmul>
 800bd20:	3501      	adds	r5, #1
 800bd22:	2301      	movs	r3, #1
 800bd24:	1076      	asrs	r6, r6, #1
 800bd26:	3708      	adds	r7, #8
 800bd28:	e777      	b.n	800bc1a <_dtoa_r+0x3ca>
 800bd2a:	2502      	movs	r5, #2
 800bd2c:	e779      	b.n	800bc22 <_dtoa_r+0x3d2>
 800bd2e:	9f00      	ldr	r7, [sp, #0]
 800bd30:	9e03      	ldr	r6, [sp, #12]
 800bd32:	e794      	b.n	800bc5e <_dtoa_r+0x40e>
 800bd34:	9901      	ldr	r1, [sp, #4]
 800bd36:	4b4c      	ldr	r3, [pc, #304]	; (800be68 <_dtoa_r+0x618>)
 800bd38:	4431      	add	r1, r6
 800bd3a:	910d      	str	r1, [sp, #52]	; 0x34
 800bd3c:	9908      	ldr	r1, [sp, #32]
 800bd3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bd42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd46:	2900      	cmp	r1, #0
 800bd48:	d043      	beq.n	800bdd2 <_dtoa_r+0x582>
 800bd4a:	494d      	ldr	r1, [pc, #308]	; (800be80 <_dtoa_r+0x630>)
 800bd4c:	2000      	movs	r0, #0
 800bd4e:	f7f4 fd95 	bl	800087c <__aeabi_ddiv>
 800bd52:	4652      	mov	r2, sl
 800bd54:	465b      	mov	r3, fp
 800bd56:	f7f4 faaf 	bl	80002b8 <__aeabi_dsub>
 800bd5a:	9d01      	ldr	r5, [sp, #4]
 800bd5c:	4682      	mov	sl, r0
 800bd5e:	468b      	mov	fp, r1
 800bd60:	4649      	mov	r1, r9
 800bd62:	4640      	mov	r0, r8
 800bd64:	f7f4 ff10 	bl	8000b88 <__aeabi_d2iz>
 800bd68:	4606      	mov	r6, r0
 800bd6a:	f7f4 fbf3 	bl	8000554 <__aeabi_i2d>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	460b      	mov	r3, r1
 800bd72:	4640      	mov	r0, r8
 800bd74:	4649      	mov	r1, r9
 800bd76:	f7f4 fa9f 	bl	80002b8 <__aeabi_dsub>
 800bd7a:	3630      	adds	r6, #48	; 0x30
 800bd7c:	f805 6b01 	strb.w	r6, [r5], #1
 800bd80:	4652      	mov	r2, sl
 800bd82:	465b      	mov	r3, fp
 800bd84:	4680      	mov	r8, r0
 800bd86:	4689      	mov	r9, r1
 800bd88:	f7f4 fec0 	bl	8000b0c <__aeabi_dcmplt>
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	d163      	bne.n	800be58 <_dtoa_r+0x608>
 800bd90:	4642      	mov	r2, r8
 800bd92:	464b      	mov	r3, r9
 800bd94:	4936      	ldr	r1, [pc, #216]	; (800be70 <_dtoa_r+0x620>)
 800bd96:	2000      	movs	r0, #0
 800bd98:	f7f4 fa8e 	bl	80002b8 <__aeabi_dsub>
 800bd9c:	4652      	mov	r2, sl
 800bd9e:	465b      	mov	r3, fp
 800bda0:	f7f4 feb4 	bl	8000b0c <__aeabi_dcmplt>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	f040 80b5 	bne.w	800bf14 <_dtoa_r+0x6c4>
 800bdaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdac:	429d      	cmp	r5, r3
 800bdae:	d081      	beq.n	800bcb4 <_dtoa_r+0x464>
 800bdb0:	4b30      	ldr	r3, [pc, #192]	; (800be74 <_dtoa_r+0x624>)
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	4650      	mov	r0, sl
 800bdb6:	4659      	mov	r1, fp
 800bdb8:	f7f4 fc36 	bl	8000628 <__aeabi_dmul>
 800bdbc:	4b2d      	ldr	r3, [pc, #180]	; (800be74 <_dtoa_r+0x624>)
 800bdbe:	4682      	mov	sl, r0
 800bdc0:	468b      	mov	fp, r1
 800bdc2:	4640      	mov	r0, r8
 800bdc4:	4649      	mov	r1, r9
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f7f4 fc2e 	bl	8000628 <__aeabi_dmul>
 800bdcc:	4680      	mov	r8, r0
 800bdce:	4689      	mov	r9, r1
 800bdd0:	e7c6      	b.n	800bd60 <_dtoa_r+0x510>
 800bdd2:	4650      	mov	r0, sl
 800bdd4:	4659      	mov	r1, fp
 800bdd6:	f7f4 fc27 	bl	8000628 <__aeabi_dmul>
 800bdda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bddc:	9d01      	ldr	r5, [sp, #4]
 800bdde:	930f      	str	r3, [sp, #60]	; 0x3c
 800bde0:	4682      	mov	sl, r0
 800bde2:	468b      	mov	fp, r1
 800bde4:	4649      	mov	r1, r9
 800bde6:	4640      	mov	r0, r8
 800bde8:	f7f4 fece 	bl	8000b88 <__aeabi_d2iz>
 800bdec:	4606      	mov	r6, r0
 800bdee:	f7f4 fbb1 	bl	8000554 <__aeabi_i2d>
 800bdf2:	3630      	adds	r6, #48	; 0x30
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	4640      	mov	r0, r8
 800bdfa:	4649      	mov	r1, r9
 800bdfc:	f7f4 fa5c 	bl	80002b8 <__aeabi_dsub>
 800be00:	f805 6b01 	strb.w	r6, [r5], #1
 800be04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be06:	429d      	cmp	r5, r3
 800be08:	4680      	mov	r8, r0
 800be0a:	4689      	mov	r9, r1
 800be0c:	f04f 0200 	mov.w	r2, #0
 800be10:	d124      	bne.n	800be5c <_dtoa_r+0x60c>
 800be12:	4b1b      	ldr	r3, [pc, #108]	; (800be80 <_dtoa_r+0x630>)
 800be14:	4650      	mov	r0, sl
 800be16:	4659      	mov	r1, fp
 800be18:	f7f4 fa50 	bl	80002bc <__adddf3>
 800be1c:	4602      	mov	r2, r0
 800be1e:	460b      	mov	r3, r1
 800be20:	4640      	mov	r0, r8
 800be22:	4649      	mov	r1, r9
 800be24:	f7f4 fe90 	bl	8000b48 <__aeabi_dcmpgt>
 800be28:	2800      	cmp	r0, #0
 800be2a:	d173      	bne.n	800bf14 <_dtoa_r+0x6c4>
 800be2c:	4652      	mov	r2, sl
 800be2e:	465b      	mov	r3, fp
 800be30:	4913      	ldr	r1, [pc, #76]	; (800be80 <_dtoa_r+0x630>)
 800be32:	2000      	movs	r0, #0
 800be34:	f7f4 fa40 	bl	80002b8 <__aeabi_dsub>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	4640      	mov	r0, r8
 800be3e:	4649      	mov	r1, r9
 800be40:	f7f4 fe64 	bl	8000b0c <__aeabi_dcmplt>
 800be44:	2800      	cmp	r0, #0
 800be46:	f43f af35 	beq.w	800bcb4 <_dtoa_r+0x464>
 800be4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800be4c:	1e6b      	subs	r3, r5, #1
 800be4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800be50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be54:	2b30      	cmp	r3, #48	; 0x30
 800be56:	d0f8      	beq.n	800be4a <_dtoa_r+0x5fa>
 800be58:	9700      	str	r7, [sp, #0]
 800be5a:	e049      	b.n	800bef0 <_dtoa_r+0x6a0>
 800be5c:	4b05      	ldr	r3, [pc, #20]	; (800be74 <_dtoa_r+0x624>)
 800be5e:	f7f4 fbe3 	bl	8000628 <__aeabi_dmul>
 800be62:	4680      	mov	r8, r0
 800be64:	4689      	mov	r9, r1
 800be66:	e7bd      	b.n	800bde4 <_dtoa_r+0x594>
 800be68:	0800fe78 	.word	0x0800fe78
 800be6c:	0800fe50 	.word	0x0800fe50
 800be70:	3ff00000 	.word	0x3ff00000
 800be74:	40240000 	.word	0x40240000
 800be78:	401c0000 	.word	0x401c0000
 800be7c:	40140000 	.word	0x40140000
 800be80:	3fe00000 	.word	0x3fe00000
 800be84:	9d01      	ldr	r5, [sp, #4]
 800be86:	4656      	mov	r6, sl
 800be88:	465f      	mov	r7, fp
 800be8a:	4642      	mov	r2, r8
 800be8c:	464b      	mov	r3, r9
 800be8e:	4630      	mov	r0, r6
 800be90:	4639      	mov	r1, r7
 800be92:	f7f4 fcf3 	bl	800087c <__aeabi_ddiv>
 800be96:	f7f4 fe77 	bl	8000b88 <__aeabi_d2iz>
 800be9a:	4682      	mov	sl, r0
 800be9c:	f7f4 fb5a 	bl	8000554 <__aeabi_i2d>
 800bea0:	4642      	mov	r2, r8
 800bea2:	464b      	mov	r3, r9
 800bea4:	f7f4 fbc0 	bl	8000628 <__aeabi_dmul>
 800bea8:	4602      	mov	r2, r0
 800beaa:	460b      	mov	r3, r1
 800beac:	4630      	mov	r0, r6
 800beae:	4639      	mov	r1, r7
 800beb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800beb4:	f7f4 fa00 	bl	80002b8 <__aeabi_dsub>
 800beb8:	f805 6b01 	strb.w	r6, [r5], #1
 800bebc:	9e01      	ldr	r6, [sp, #4]
 800bebe:	9f03      	ldr	r7, [sp, #12]
 800bec0:	1bae      	subs	r6, r5, r6
 800bec2:	42b7      	cmp	r7, r6
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	d135      	bne.n	800bf36 <_dtoa_r+0x6e6>
 800beca:	f7f4 f9f7 	bl	80002bc <__adddf3>
 800bece:	4642      	mov	r2, r8
 800bed0:	464b      	mov	r3, r9
 800bed2:	4606      	mov	r6, r0
 800bed4:	460f      	mov	r7, r1
 800bed6:	f7f4 fe37 	bl	8000b48 <__aeabi_dcmpgt>
 800beda:	b9d0      	cbnz	r0, 800bf12 <_dtoa_r+0x6c2>
 800bedc:	4642      	mov	r2, r8
 800bede:	464b      	mov	r3, r9
 800bee0:	4630      	mov	r0, r6
 800bee2:	4639      	mov	r1, r7
 800bee4:	f7f4 fe08 	bl	8000af8 <__aeabi_dcmpeq>
 800bee8:	b110      	cbz	r0, 800bef0 <_dtoa_r+0x6a0>
 800beea:	f01a 0f01 	tst.w	sl, #1
 800beee:	d110      	bne.n	800bf12 <_dtoa_r+0x6c2>
 800bef0:	4620      	mov	r0, r4
 800bef2:	ee18 1a10 	vmov	r1, s16
 800bef6:	f000 fae9 	bl	800c4cc <_Bfree>
 800befa:	2300      	movs	r3, #0
 800befc:	9800      	ldr	r0, [sp, #0]
 800befe:	702b      	strb	r3, [r5, #0]
 800bf00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf02:	3001      	adds	r0, #1
 800bf04:	6018      	str	r0, [r3, #0]
 800bf06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f43f acf1 	beq.w	800b8f0 <_dtoa_r+0xa0>
 800bf0e:	601d      	str	r5, [r3, #0]
 800bf10:	e4ee      	b.n	800b8f0 <_dtoa_r+0xa0>
 800bf12:	9f00      	ldr	r7, [sp, #0]
 800bf14:	462b      	mov	r3, r5
 800bf16:	461d      	mov	r5, r3
 800bf18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf1c:	2a39      	cmp	r2, #57	; 0x39
 800bf1e:	d106      	bne.n	800bf2e <_dtoa_r+0x6de>
 800bf20:	9a01      	ldr	r2, [sp, #4]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d1f7      	bne.n	800bf16 <_dtoa_r+0x6c6>
 800bf26:	9901      	ldr	r1, [sp, #4]
 800bf28:	2230      	movs	r2, #48	; 0x30
 800bf2a:	3701      	adds	r7, #1
 800bf2c:	700a      	strb	r2, [r1, #0]
 800bf2e:	781a      	ldrb	r2, [r3, #0]
 800bf30:	3201      	adds	r2, #1
 800bf32:	701a      	strb	r2, [r3, #0]
 800bf34:	e790      	b.n	800be58 <_dtoa_r+0x608>
 800bf36:	4ba6      	ldr	r3, [pc, #664]	; (800c1d0 <_dtoa_r+0x980>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f7f4 fb75 	bl	8000628 <__aeabi_dmul>
 800bf3e:	2200      	movs	r2, #0
 800bf40:	2300      	movs	r3, #0
 800bf42:	4606      	mov	r6, r0
 800bf44:	460f      	mov	r7, r1
 800bf46:	f7f4 fdd7 	bl	8000af8 <__aeabi_dcmpeq>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d09d      	beq.n	800be8a <_dtoa_r+0x63a>
 800bf4e:	e7cf      	b.n	800bef0 <_dtoa_r+0x6a0>
 800bf50:	9a08      	ldr	r2, [sp, #32]
 800bf52:	2a00      	cmp	r2, #0
 800bf54:	f000 80d7 	beq.w	800c106 <_dtoa_r+0x8b6>
 800bf58:	9a06      	ldr	r2, [sp, #24]
 800bf5a:	2a01      	cmp	r2, #1
 800bf5c:	f300 80ba 	bgt.w	800c0d4 <_dtoa_r+0x884>
 800bf60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf62:	2a00      	cmp	r2, #0
 800bf64:	f000 80b2 	beq.w	800c0cc <_dtoa_r+0x87c>
 800bf68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf6c:	9e07      	ldr	r6, [sp, #28]
 800bf6e:	9d04      	ldr	r5, [sp, #16]
 800bf70:	9a04      	ldr	r2, [sp, #16]
 800bf72:	441a      	add	r2, r3
 800bf74:	9204      	str	r2, [sp, #16]
 800bf76:	9a05      	ldr	r2, [sp, #20]
 800bf78:	2101      	movs	r1, #1
 800bf7a:	441a      	add	r2, r3
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	9205      	str	r2, [sp, #20]
 800bf80:	f000 fb5c 	bl	800c63c <__i2b>
 800bf84:	4607      	mov	r7, r0
 800bf86:	2d00      	cmp	r5, #0
 800bf88:	dd0c      	ble.n	800bfa4 <_dtoa_r+0x754>
 800bf8a:	9b05      	ldr	r3, [sp, #20]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	dd09      	ble.n	800bfa4 <_dtoa_r+0x754>
 800bf90:	42ab      	cmp	r3, r5
 800bf92:	9a04      	ldr	r2, [sp, #16]
 800bf94:	bfa8      	it	ge
 800bf96:	462b      	movge	r3, r5
 800bf98:	1ad2      	subs	r2, r2, r3
 800bf9a:	9204      	str	r2, [sp, #16]
 800bf9c:	9a05      	ldr	r2, [sp, #20]
 800bf9e:	1aed      	subs	r5, r5, r3
 800bfa0:	1ad3      	subs	r3, r2, r3
 800bfa2:	9305      	str	r3, [sp, #20]
 800bfa4:	9b07      	ldr	r3, [sp, #28]
 800bfa6:	b31b      	cbz	r3, 800bff0 <_dtoa_r+0x7a0>
 800bfa8:	9b08      	ldr	r3, [sp, #32]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	f000 80af 	beq.w	800c10e <_dtoa_r+0x8be>
 800bfb0:	2e00      	cmp	r6, #0
 800bfb2:	dd13      	ble.n	800bfdc <_dtoa_r+0x78c>
 800bfb4:	4639      	mov	r1, r7
 800bfb6:	4632      	mov	r2, r6
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f000 fbff 	bl	800c7bc <__pow5mult>
 800bfbe:	ee18 2a10 	vmov	r2, s16
 800bfc2:	4601      	mov	r1, r0
 800bfc4:	4607      	mov	r7, r0
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f000 fb4e 	bl	800c668 <__multiply>
 800bfcc:	ee18 1a10 	vmov	r1, s16
 800bfd0:	4680      	mov	r8, r0
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f000 fa7a 	bl	800c4cc <_Bfree>
 800bfd8:	ee08 8a10 	vmov	s16, r8
 800bfdc:	9b07      	ldr	r3, [sp, #28]
 800bfde:	1b9a      	subs	r2, r3, r6
 800bfe0:	d006      	beq.n	800bff0 <_dtoa_r+0x7a0>
 800bfe2:	ee18 1a10 	vmov	r1, s16
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	f000 fbe8 	bl	800c7bc <__pow5mult>
 800bfec:	ee08 0a10 	vmov	s16, r0
 800bff0:	2101      	movs	r1, #1
 800bff2:	4620      	mov	r0, r4
 800bff4:	f000 fb22 	bl	800c63c <__i2b>
 800bff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	4606      	mov	r6, r0
 800bffe:	f340 8088 	ble.w	800c112 <_dtoa_r+0x8c2>
 800c002:	461a      	mov	r2, r3
 800c004:	4601      	mov	r1, r0
 800c006:	4620      	mov	r0, r4
 800c008:	f000 fbd8 	bl	800c7bc <__pow5mult>
 800c00c:	9b06      	ldr	r3, [sp, #24]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	4606      	mov	r6, r0
 800c012:	f340 8081 	ble.w	800c118 <_dtoa_r+0x8c8>
 800c016:	f04f 0800 	mov.w	r8, #0
 800c01a:	6933      	ldr	r3, [r6, #16]
 800c01c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c020:	6918      	ldr	r0, [r3, #16]
 800c022:	f000 fabb 	bl	800c59c <__hi0bits>
 800c026:	f1c0 0020 	rsb	r0, r0, #32
 800c02a:	9b05      	ldr	r3, [sp, #20]
 800c02c:	4418      	add	r0, r3
 800c02e:	f010 001f 	ands.w	r0, r0, #31
 800c032:	f000 8092 	beq.w	800c15a <_dtoa_r+0x90a>
 800c036:	f1c0 0320 	rsb	r3, r0, #32
 800c03a:	2b04      	cmp	r3, #4
 800c03c:	f340 808a 	ble.w	800c154 <_dtoa_r+0x904>
 800c040:	f1c0 001c 	rsb	r0, r0, #28
 800c044:	9b04      	ldr	r3, [sp, #16]
 800c046:	4403      	add	r3, r0
 800c048:	9304      	str	r3, [sp, #16]
 800c04a:	9b05      	ldr	r3, [sp, #20]
 800c04c:	4403      	add	r3, r0
 800c04e:	4405      	add	r5, r0
 800c050:	9305      	str	r3, [sp, #20]
 800c052:	9b04      	ldr	r3, [sp, #16]
 800c054:	2b00      	cmp	r3, #0
 800c056:	dd07      	ble.n	800c068 <_dtoa_r+0x818>
 800c058:	ee18 1a10 	vmov	r1, s16
 800c05c:	461a      	mov	r2, r3
 800c05e:	4620      	mov	r0, r4
 800c060:	f000 fc06 	bl	800c870 <__lshift>
 800c064:	ee08 0a10 	vmov	s16, r0
 800c068:	9b05      	ldr	r3, [sp, #20]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	dd05      	ble.n	800c07a <_dtoa_r+0x82a>
 800c06e:	4631      	mov	r1, r6
 800c070:	461a      	mov	r2, r3
 800c072:	4620      	mov	r0, r4
 800c074:	f000 fbfc 	bl	800c870 <__lshift>
 800c078:	4606      	mov	r6, r0
 800c07a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d06e      	beq.n	800c15e <_dtoa_r+0x90e>
 800c080:	ee18 0a10 	vmov	r0, s16
 800c084:	4631      	mov	r1, r6
 800c086:	f000 fc63 	bl	800c950 <__mcmp>
 800c08a:	2800      	cmp	r0, #0
 800c08c:	da67      	bge.n	800c15e <_dtoa_r+0x90e>
 800c08e:	9b00      	ldr	r3, [sp, #0]
 800c090:	3b01      	subs	r3, #1
 800c092:	ee18 1a10 	vmov	r1, s16
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	220a      	movs	r2, #10
 800c09a:	2300      	movs	r3, #0
 800c09c:	4620      	mov	r0, r4
 800c09e:	f000 fa37 	bl	800c510 <__multadd>
 800c0a2:	9b08      	ldr	r3, [sp, #32]
 800c0a4:	ee08 0a10 	vmov	s16, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f000 81b1 	beq.w	800c410 <_dtoa_r+0xbc0>
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	4639      	mov	r1, r7
 800c0b2:	220a      	movs	r2, #10
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	f000 fa2b 	bl	800c510 <__multadd>
 800c0ba:	9b02      	ldr	r3, [sp, #8]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	4607      	mov	r7, r0
 800c0c0:	f300 808e 	bgt.w	800c1e0 <_dtoa_r+0x990>
 800c0c4:	9b06      	ldr	r3, [sp, #24]
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	dc51      	bgt.n	800c16e <_dtoa_r+0x91e>
 800c0ca:	e089      	b.n	800c1e0 <_dtoa_r+0x990>
 800c0cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0d2:	e74b      	b.n	800bf6c <_dtoa_r+0x71c>
 800c0d4:	9b03      	ldr	r3, [sp, #12]
 800c0d6:	1e5e      	subs	r6, r3, #1
 800c0d8:	9b07      	ldr	r3, [sp, #28]
 800c0da:	42b3      	cmp	r3, r6
 800c0dc:	bfbf      	itttt	lt
 800c0de:	9b07      	ldrlt	r3, [sp, #28]
 800c0e0:	9607      	strlt	r6, [sp, #28]
 800c0e2:	1af2      	sublt	r2, r6, r3
 800c0e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c0e6:	bfb6      	itet	lt
 800c0e8:	189b      	addlt	r3, r3, r2
 800c0ea:	1b9e      	subge	r6, r3, r6
 800c0ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c0ee:	9b03      	ldr	r3, [sp, #12]
 800c0f0:	bfb8      	it	lt
 800c0f2:	2600      	movlt	r6, #0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	bfb7      	itett	lt
 800c0f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c0fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c100:	1a9d      	sublt	r5, r3, r2
 800c102:	2300      	movlt	r3, #0
 800c104:	e734      	b.n	800bf70 <_dtoa_r+0x720>
 800c106:	9e07      	ldr	r6, [sp, #28]
 800c108:	9d04      	ldr	r5, [sp, #16]
 800c10a:	9f08      	ldr	r7, [sp, #32]
 800c10c:	e73b      	b.n	800bf86 <_dtoa_r+0x736>
 800c10e:	9a07      	ldr	r2, [sp, #28]
 800c110:	e767      	b.n	800bfe2 <_dtoa_r+0x792>
 800c112:	9b06      	ldr	r3, [sp, #24]
 800c114:	2b01      	cmp	r3, #1
 800c116:	dc18      	bgt.n	800c14a <_dtoa_r+0x8fa>
 800c118:	f1ba 0f00 	cmp.w	sl, #0
 800c11c:	d115      	bne.n	800c14a <_dtoa_r+0x8fa>
 800c11e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c122:	b993      	cbnz	r3, 800c14a <_dtoa_r+0x8fa>
 800c124:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c128:	0d1b      	lsrs	r3, r3, #20
 800c12a:	051b      	lsls	r3, r3, #20
 800c12c:	b183      	cbz	r3, 800c150 <_dtoa_r+0x900>
 800c12e:	9b04      	ldr	r3, [sp, #16]
 800c130:	3301      	adds	r3, #1
 800c132:	9304      	str	r3, [sp, #16]
 800c134:	9b05      	ldr	r3, [sp, #20]
 800c136:	3301      	adds	r3, #1
 800c138:	9305      	str	r3, [sp, #20]
 800c13a:	f04f 0801 	mov.w	r8, #1
 800c13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c140:	2b00      	cmp	r3, #0
 800c142:	f47f af6a 	bne.w	800c01a <_dtoa_r+0x7ca>
 800c146:	2001      	movs	r0, #1
 800c148:	e76f      	b.n	800c02a <_dtoa_r+0x7da>
 800c14a:	f04f 0800 	mov.w	r8, #0
 800c14e:	e7f6      	b.n	800c13e <_dtoa_r+0x8ee>
 800c150:	4698      	mov	r8, r3
 800c152:	e7f4      	b.n	800c13e <_dtoa_r+0x8ee>
 800c154:	f43f af7d 	beq.w	800c052 <_dtoa_r+0x802>
 800c158:	4618      	mov	r0, r3
 800c15a:	301c      	adds	r0, #28
 800c15c:	e772      	b.n	800c044 <_dtoa_r+0x7f4>
 800c15e:	9b03      	ldr	r3, [sp, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	dc37      	bgt.n	800c1d4 <_dtoa_r+0x984>
 800c164:	9b06      	ldr	r3, [sp, #24]
 800c166:	2b02      	cmp	r3, #2
 800c168:	dd34      	ble.n	800c1d4 <_dtoa_r+0x984>
 800c16a:	9b03      	ldr	r3, [sp, #12]
 800c16c:	9302      	str	r3, [sp, #8]
 800c16e:	9b02      	ldr	r3, [sp, #8]
 800c170:	b96b      	cbnz	r3, 800c18e <_dtoa_r+0x93e>
 800c172:	4631      	mov	r1, r6
 800c174:	2205      	movs	r2, #5
 800c176:	4620      	mov	r0, r4
 800c178:	f000 f9ca 	bl	800c510 <__multadd>
 800c17c:	4601      	mov	r1, r0
 800c17e:	4606      	mov	r6, r0
 800c180:	ee18 0a10 	vmov	r0, s16
 800c184:	f000 fbe4 	bl	800c950 <__mcmp>
 800c188:	2800      	cmp	r0, #0
 800c18a:	f73f adbb 	bgt.w	800bd04 <_dtoa_r+0x4b4>
 800c18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c190:	9d01      	ldr	r5, [sp, #4]
 800c192:	43db      	mvns	r3, r3
 800c194:	9300      	str	r3, [sp, #0]
 800c196:	f04f 0800 	mov.w	r8, #0
 800c19a:	4631      	mov	r1, r6
 800c19c:	4620      	mov	r0, r4
 800c19e:	f000 f995 	bl	800c4cc <_Bfree>
 800c1a2:	2f00      	cmp	r7, #0
 800c1a4:	f43f aea4 	beq.w	800bef0 <_dtoa_r+0x6a0>
 800c1a8:	f1b8 0f00 	cmp.w	r8, #0
 800c1ac:	d005      	beq.n	800c1ba <_dtoa_r+0x96a>
 800c1ae:	45b8      	cmp	r8, r7
 800c1b0:	d003      	beq.n	800c1ba <_dtoa_r+0x96a>
 800c1b2:	4641      	mov	r1, r8
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	f000 f989 	bl	800c4cc <_Bfree>
 800c1ba:	4639      	mov	r1, r7
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f000 f985 	bl	800c4cc <_Bfree>
 800c1c2:	e695      	b.n	800bef0 <_dtoa_r+0x6a0>
 800c1c4:	2600      	movs	r6, #0
 800c1c6:	4637      	mov	r7, r6
 800c1c8:	e7e1      	b.n	800c18e <_dtoa_r+0x93e>
 800c1ca:	9700      	str	r7, [sp, #0]
 800c1cc:	4637      	mov	r7, r6
 800c1ce:	e599      	b.n	800bd04 <_dtoa_r+0x4b4>
 800c1d0:	40240000 	.word	0x40240000
 800c1d4:	9b08      	ldr	r3, [sp, #32]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	f000 80ca 	beq.w	800c370 <_dtoa_r+0xb20>
 800c1dc:	9b03      	ldr	r3, [sp, #12]
 800c1de:	9302      	str	r3, [sp, #8]
 800c1e0:	2d00      	cmp	r5, #0
 800c1e2:	dd05      	ble.n	800c1f0 <_dtoa_r+0x9a0>
 800c1e4:	4639      	mov	r1, r7
 800c1e6:	462a      	mov	r2, r5
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f000 fb41 	bl	800c870 <__lshift>
 800c1ee:	4607      	mov	r7, r0
 800c1f0:	f1b8 0f00 	cmp.w	r8, #0
 800c1f4:	d05b      	beq.n	800c2ae <_dtoa_r+0xa5e>
 800c1f6:	6879      	ldr	r1, [r7, #4]
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	f000 f927 	bl	800c44c <_Balloc>
 800c1fe:	4605      	mov	r5, r0
 800c200:	b928      	cbnz	r0, 800c20e <_dtoa_r+0x9be>
 800c202:	4b87      	ldr	r3, [pc, #540]	; (800c420 <_dtoa_r+0xbd0>)
 800c204:	4602      	mov	r2, r0
 800c206:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c20a:	f7ff bb3b 	b.w	800b884 <_dtoa_r+0x34>
 800c20e:	693a      	ldr	r2, [r7, #16]
 800c210:	3202      	adds	r2, #2
 800c212:	0092      	lsls	r2, r2, #2
 800c214:	f107 010c 	add.w	r1, r7, #12
 800c218:	300c      	adds	r0, #12
 800c21a:	f7fe fd1b 	bl	800ac54 <memcpy>
 800c21e:	2201      	movs	r2, #1
 800c220:	4629      	mov	r1, r5
 800c222:	4620      	mov	r0, r4
 800c224:	f000 fb24 	bl	800c870 <__lshift>
 800c228:	9b01      	ldr	r3, [sp, #4]
 800c22a:	f103 0901 	add.w	r9, r3, #1
 800c22e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c232:	4413      	add	r3, r2
 800c234:	9305      	str	r3, [sp, #20]
 800c236:	f00a 0301 	and.w	r3, sl, #1
 800c23a:	46b8      	mov	r8, r7
 800c23c:	9304      	str	r3, [sp, #16]
 800c23e:	4607      	mov	r7, r0
 800c240:	4631      	mov	r1, r6
 800c242:	ee18 0a10 	vmov	r0, s16
 800c246:	f7ff fa75 	bl	800b734 <quorem>
 800c24a:	4641      	mov	r1, r8
 800c24c:	9002      	str	r0, [sp, #8]
 800c24e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c252:	ee18 0a10 	vmov	r0, s16
 800c256:	f000 fb7b 	bl	800c950 <__mcmp>
 800c25a:	463a      	mov	r2, r7
 800c25c:	9003      	str	r0, [sp, #12]
 800c25e:	4631      	mov	r1, r6
 800c260:	4620      	mov	r0, r4
 800c262:	f000 fb91 	bl	800c988 <__mdiff>
 800c266:	68c2      	ldr	r2, [r0, #12]
 800c268:	f109 3bff 	add.w	fp, r9, #4294967295
 800c26c:	4605      	mov	r5, r0
 800c26e:	bb02      	cbnz	r2, 800c2b2 <_dtoa_r+0xa62>
 800c270:	4601      	mov	r1, r0
 800c272:	ee18 0a10 	vmov	r0, s16
 800c276:	f000 fb6b 	bl	800c950 <__mcmp>
 800c27a:	4602      	mov	r2, r0
 800c27c:	4629      	mov	r1, r5
 800c27e:	4620      	mov	r0, r4
 800c280:	9207      	str	r2, [sp, #28]
 800c282:	f000 f923 	bl	800c4cc <_Bfree>
 800c286:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c28a:	ea43 0102 	orr.w	r1, r3, r2
 800c28e:	9b04      	ldr	r3, [sp, #16]
 800c290:	430b      	orrs	r3, r1
 800c292:	464d      	mov	r5, r9
 800c294:	d10f      	bne.n	800c2b6 <_dtoa_r+0xa66>
 800c296:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c29a:	d02a      	beq.n	800c2f2 <_dtoa_r+0xaa2>
 800c29c:	9b03      	ldr	r3, [sp, #12]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	dd02      	ble.n	800c2a8 <_dtoa_r+0xa58>
 800c2a2:	9b02      	ldr	r3, [sp, #8]
 800c2a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c2a8:	f88b a000 	strb.w	sl, [fp]
 800c2ac:	e775      	b.n	800c19a <_dtoa_r+0x94a>
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	e7ba      	b.n	800c228 <_dtoa_r+0x9d8>
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	e7e2      	b.n	800c27c <_dtoa_r+0xa2c>
 800c2b6:	9b03      	ldr	r3, [sp, #12]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	db04      	blt.n	800c2c6 <_dtoa_r+0xa76>
 800c2bc:	9906      	ldr	r1, [sp, #24]
 800c2be:	430b      	orrs	r3, r1
 800c2c0:	9904      	ldr	r1, [sp, #16]
 800c2c2:	430b      	orrs	r3, r1
 800c2c4:	d122      	bne.n	800c30c <_dtoa_r+0xabc>
 800c2c6:	2a00      	cmp	r2, #0
 800c2c8:	ddee      	ble.n	800c2a8 <_dtoa_r+0xa58>
 800c2ca:	ee18 1a10 	vmov	r1, s16
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 facd 	bl	800c870 <__lshift>
 800c2d6:	4631      	mov	r1, r6
 800c2d8:	ee08 0a10 	vmov	s16, r0
 800c2dc:	f000 fb38 	bl	800c950 <__mcmp>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	dc03      	bgt.n	800c2ec <_dtoa_r+0xa9c>
 800c2e4:	d1e0      	bne.n	800c2a8 <_dtoa_r+0xa58>
 800c2e6:	f01a 0f01 	tst.w	sl, #1
 800c2ea:	d0dd      	beq.n	800c2a8 <_dtoa_r+0xa58>
 800c2ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2f0:	d1d7      	bne.n	800c2a2 <_dtoa_r+0xa52>
 800c2f2:	2339      	movs	r3, #57	; 0x39
 800c2f4:	f88b 3000 	strb.w	r3, [fp]
 800c2f8:	462b      	mov	r3, r5
 800c2fa:	461d      	mov	r5, r3
 800c2fc:	3b01      	subs	r3, #1
 800c2fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c302:	2a39      	cmp	r2, #57	; 0x39
 800c304:	d071      	beq.n	800c3ea <_dtoa_r+0xb9a>
 800c306:	3201      	adds	r2, #1
 800c308:	701a      	strb	r2, [r3, #0]
 800c30a:	e746      	b.n	800c19a <_dtoa_r+0x94a>
 800c30c:	2a00      	cmp	r2, #0
 800c30e:	dd07      	ble.n	800c320 <_dtoa_r+0xad0>
 800c310:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c314:	d0ed      	beq.n	800c2f2 <_dtoa_r+0xaa2>
 800c316:	f10a 0301 	add.w	r3, sl, #1
 800c31a:	f88b 3000 	strb.w	r3, [fp]
 800c31e:	e73c      	b.n	800c19a <_dtoa_r+0x94a>
 800c320:	9b05      	ldr	r3, [sp, #20]
 800c322:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c326:	4599      	cmp	r9, r3
 800c328:	d047      	beq.n	800c3ba <_dtoa_r+0xb6a>
 800c32a:	ee18 1a10 	vmov	r1, s16
 800c32e:	2300      	movs	r3, #0
 800c330:	220a      	movs	r2, #10
 800c332:	4620      	mov	r0, r4
 800c334:	f000 f8ec 	bl	800c510 <__multadd>
 800c338:	45b8      	cmp	r8, r7
 800c33a:	ee08 0a10 	vmov	s16, r0
 800c33e:	f04f 0300 	mov.w	r3, #0
 800c342:	f04f 020a 	mov.w	r2, #10
 800c346:	4641      	mov	r1, r8
 800c348:	4620      	mov	r0, r4
 800c34a:	d106      	bne.n	800c35a <_dtoa_r+0xb0a>
 800c34c:	f000 f8e0 	bl	800c510 <__multadd>
 800c350:	4680      	mov	r8, r0
 800c352:	4607      	mov	r7, r0
 800c354:	f109 0901 	add.w	r9, r9, #1
 800c358:	e772      	b.n	800c240 <_dtoa_r+0x9f0>
 800c35a:	f000 f8d9 	bl	800c510 <__multadd>
 800c35e:	4639      	mov	r1, r7
 800c360:	4680      	mov	r8, r0
 800c362:	2300      	movs	r3, #0
 800c364:	220a      	movs	r2, #10
 800c366:	4620      	mov	r0, r4
 800c368:	f000 f8d2 	bl	800c510 <__multadd>
 800c36c:	4607      	mov	r7, r0
 800c36e:	e7f1      	b.n	800c354 <_dtoa_r+0xb04>
 800c370:	9b03      	ldr	r3, [sp, #12]
 800c372:	9302      	str	r3, [sp, #8]
 800c374:	9d01      	ldr	r5, [sp, #4]
 800c376:	ee18 0a10 	vmov	r0, s16
 800c37a:	4631      	mov	r1, r6
 800c37c:	f7ff f9da 	bl	800b734 <quorem>
 800c380:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c384:	9b01      	ldr	r3, [sp, #4]
 800c386:	f805 ab01 	strb.w	sl, [r5], #1
 800c38a:	1aea      	subs	r2, r5, r3
 800c38c:	9b02      	ldr	r3, [sp, #8]
 800c38e:	4293      	cmp	r3, r2
 800c390:	dd09      	ble.n	800c3a6 <_dtoa_r+0xb56>
 800c392:	ee18 1a10 	vmov	r1, s16
 800c396:	2300      	movs	r3, #0
 800c398:	220a      	movs	r2, #10
 800c39a:	4620      	mov	r0, r4
 800c39c:	f000 f8b8 	bl	800c510 <__multadd>
 800c3a0:	ee08 0a10 	vmov	s16, r0
 800c3a4:	e7e7      	b.n	800c376 <_dtoa_r+0xb26>
 800c3a6:	9b02      	ldr	r3, [sp, #8]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	bfc8      	it	gt
 800c3ac:	461d      	movgt	r5, r3
 800c3ae:	9b01      	ldr	r3, [sp, #4]
 800c3b0:	bfd8      	it	le
 800c3b2:	2501      	movle	r5, #1
 800c3b4:	441d      	add	r5, r3
 800c3b6:	f04f 0800 	mov.w	r8, #0
 800c3ba:	ee18 1a10 	vmov	r1, s16
 800c3be:	2201      	movs	r2, #1
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	f000 fa55 	bl	800c870 <__lshift>
 800c3c6:	4631      	mov	r1, r6
 800c3c8:	ee08 0a10 	vmov	s16, r0
 800c3cc:	f000 fac0 	bl	800c950 <__mcmp>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	dc91      	bgt.n	800c2f8 <_dtoa_r+0xaa8>
 800c3d4:	d102      	bne.n	800c3dc <_dtoa_r+0xb8c>
 800c3d6:	f01a 0f01 	tst.w	sl, #1
 800c3da:	d18d      	bne.n	800c2f8 <_dtoa_r+0xaa8>
 800c3dc:	462b      	mov	r3, r5
 800c3de:	461d      	mov	r5, r3
 800c3e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3e4:	2a30      	cmp	r2, #48	; 0x30
 800c3e6:	d0fa      	beq.n	800c3de <_dtoa_r+0xb8e>
 800c3e8:	e6d7      	b.n	800c19a <_dtoa_r+0x94a>
 800c3ea:	9a01      	ldr	r2, [sp, #4]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d184      	bne.n	800c2fa <_dtoa_r+0xaaa>
 800c3f0:	9b00      	ldr	r3, [sp, #0]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	9300      	str	r3, [sp, #0]
 800c3f6:	2331      	movs	r3, #49	; 0x31
 800c3f8:	7013      	strb	r3, [r2, #0]
 800c3fa:	e6ce      	b.n	800c19a <_dtoa_r+0x94a>
 800c3fc:	4b09      	ldr	r3, [pc, #36]	; (800c424 <_dtoa_r+0xbd4>)
 800c3fe:	f7ff ba95 	b.w	800b92c <_dtoa_r+0xdc>
 800c402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c404:	2b00      	cmp	r3, #0
 800c406:	f47f aa6e 	bne.w	800b8e6 <_dtoa_r+0x96>
 800c40a:	4b07      	ldr	r3, [pc, #28]	; (800c428 <_dtoa_r+0xbd8>)
 800c40c:	f7ff ba8e 	b.w	800b92c <_dtoa_r+0xdc>
 800c410:	9b02      	ldr	r3, [sp, #8]
 800c412:	2b00      	cmp	r3, #0
 800c414:	dcae      	bgt.n	800c374 <_dtoa_r+0xb24>
 800c416:	9b06      	ldr	r3, [sp, #24]
 800c418:	2b02      	cmp	r3, #2
 800c41a:	f73f aea8 	bgt.w	800c16e <_dtoa_r+0x91e>
 800c41e:	e7a9      	b.n	800c374 <_dtoa_r+0xb24>
 800c420:	0800fde3 	.word	0x0800fde3
 800c424:	0800fd40 	.word	0x0800fd40
 800c428:	0800fd64 	.word	0x0800fd64

0800c42c <_localeconv_r>:
 800c42c:	4800      	ldr	r0, [pc, #0]	; (800c430 <_localeconv_r+0x4>)
 800c42e:	4770      	bx	lr
 800c430:	20000178 	.word	0x20000178

0800c434 <__malloc_lock>:
 800c434:	4801      	ldr	r0, [pc, #4]	; (800c43c <__malloc_lock+0x8>)
 800c436:	f000 bbd4 	b.w	800cbe2 <__retarget_lock_acquire_recursive>
 800c43a:	bf00      	nop
 800c43c:	200138b8 	.word	0x200138b8

0800c440 <__malloc_unlock>:
 800c440:	4801      	ldr	r0, [pc, #4]	; (800c448 <__malloc_unlock+0x8>)
 800c442:	f000 bbcf 	b.w	800cbe4 <__retarget_lock_release_recursive>
 800c446:	bf00      	nop
 800c448:	200138b8 	.word	0x200138b8

0800c44c <_Balloc>:
 800c44c:	b570      	push	{r4, r5, r6, lr}
 800c44e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c450:	4604      	mov	r4, r0
 800c452:	460d      	mov	r5, r1
 800c454:	b976      	cbnz	r6, 800c474 <_Balloc+0x28>
 800c456:	2010      	movs	r0, #16
 800c458:	f7fe fbf4 	bl	800ac44 <malloc>
 800c45c:	4602      	mov	r2, r0
 800c45e:	6260      	str	r0, [r4, #36]	; 0x24
 800c460:	b920      	cbnz	r0, 800c46c <_Balloc+0x20>
 800c462:	4b18      	ldr	r3, [pc, #96]	; (800c4c4 <_Balloc+0x78>)
 800c464:	4818      	ldr	r0, [pc, #96]	; (800c4c8 <_Balloc+0x7c>)
 800c466:	2166      	movs	r1, #102	; 0x66
 800c468:	f000 fb8a 	bl	800cb80 <__assert_func>
 800c46c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c470:	6006      	str	r6, [r0, #0]
 800c472:	60c6      	str	r6, [r0, #12]
 800c474:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c476:	68f3      	ldr	r3, [r6, #12]
 800c478:	b183      	cbz	r3, 800c49c <_Balloc+0x50>
 800c47a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c482:	b9b8      	cbnz	r0, 800c4b4 <_Balloc+0x68>
 800c484:	2101      	movs	r1, #1
 800c486:	fa01 f605 	lsl.w	r6, r1, r5
 800c48a:	1d72      	adds	r2, r6, #5
 800c48c:	0092      	lsls	r2, r2, #2
 800c48e:	4620      	mov	r0, r4
 800c490:	f000 fb60 	bl	800cb54 <_calloc_r>
 800c494:	b160      	cbz	r0, 800c4b0 <_Balloc+0x64>
 800c496:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c49a:	e00e      	b.n	800c4ba <_Balloc+0x6e>
 800c49c:	2221      	movs	r2, #33	; 0x21
 800c49e:	2104      	movs	r1, #4
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	f000 fb57 	bl	800cb54 <_calloc_r>
 800c4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4a8:	60f0      	str	r0, [r6, #12]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1e4      	bne.n	800c47a <_Balloc+0x2e>
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	bd70      	pop	{r4, r5, r6, pc}
 800c4b4:	6802      	ldr	r2, [r0, #0]
 800c4b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4c0:	e7f7      	b.n	800c4b2 <_Balloc+0x66>
 800c4c2:	bf00      	nop
 800c4c4:	0800fd71 	.word	0x0800fd71
 800c4c8:	0800fdf4 	.word	0x0800fdf4

0800c4cc <_Bfree>:
 800c4cc:	b570      	push	{r4, r5, r6, lr}
 800c4ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4d0:	4605      	mov	r5, r0
 800c4d2:	460c      	mov	r4, r1
 800c4d4:	b976      	cbnz	r6, 800c4f4 <_Bfree+0x28>
 800c4d6:	2010      	movs	r0, #16
 800c4d8:	f7fe fbb4 	bl	800ac44 <malloc>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	6268      	str	r0, [r5, #36]	; 0x24
 800c4e0:	b920      	cbnz	r0, 800c4ec <_Bfree+0x20>
 800c4e2:	4b09      	ldr	r3, [pc, #36]	; (800c508 <_Bfree+0x3c>)
 800c4e4:	4809      	ldr	r0, [pc, #36]	; (800c50c <_Bfree+0x40>)
 800c4e6:	218a      	movs	r1, #138	; 0x8a
 800c4e8:	f000 fb4a 	bl	800cb80 <__assert_func>
 800c4ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4f0:	6006      	str	r6, [r0, #0]
 800c4f2:	60c6      	str	r6, [r0, #12]
 800c4f4:	b13c      	cbz	r4, 800c506 <_Bfree+0x3a>
 800c4f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c4f8:	6862      	ldr	r2, [r4, #4]
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c500:	6021      	str	r1, [r4, #0]
 800c502:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c506:	bd70      	pop	{r4, r5, r6, pc}
 800c508:	0800fd71 	.word	0x0800fd71
 800c50c:	0800fdf4 	.word	0x0800fdf4

0800c510 <__multadd>:
 800c510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c514:	690d      	ldr	r5, [r1, #16]
 800c516:	4607      	mov	r7, r0
 800c518:	460c      	mov	r4, r1
 800c51a:	461e      	mov	r6, r3
 800c51c:	f101 0c14 	add.w	ip, r1, #20
 800c520:	2000      	movs	r0, #0
 800c522:	f8dc 3000 	ldr.w	r3, [ip]
 800c526:	b299      	uxth	r1, r3
 800c528:	fb02 6101 	mla	r1, r2, r1, r6
 800c52c:	0c1e      	lsrs	r6, r3, #16
 800c52e:	0c0b      	lsrs	r3, r1, #16
 800c530:	fb02 3306 	mla	r3, r2, r6, r3
 800c534:	b289      	uxth	r1, r1
 800c536:	3001      	adds	r0, #1
 800c538:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c53c:	4285      	cmp	r5, r0
 800c53e:	f84c 1b04 	str.w	r1, [ip], #4
 800c542:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c546:	dcec      	bgt.n	800c522 <__multadd+0x12>
 800c548:	b30e      	cbz	r6, 800c58e <__multadd+0x7e>
 800c54a:	68a3      	ldr	r3, [r4, #8]
 800c54c:	42ab      	cmp	r3, r5
 800c54e:	dc19      	bgt.n	800c584 <__multadd+0x74>
 800c550:	6861      	ldr	r1, [r4, #4]
 800c552:	4638      	mov	r0, r7
 800c554:	3101      	adds	r1, #1
 800c556:	f7ff ff79 	bl	800c44c <_Balloc>
 800c55a:	4680      	mov	r8, r0
 800c55c:	b928      	cbnz	r0, 800c56a <__multadd+0x5a>
 800c55e:	4602      	mov	r2, r0
 800c560:	4b0c      	ldr	r3, [pc, #48]	; (800c594 <__multadd+0x84>)
 800c562:	480d      	ldr	r0, [pc, #52]	; (800c598 <__multadd+0x88>)
 800c564:	21b5      	movs	r1, #181	; 0xb5
 800c566:	f000 fb0b 	bl	800cb80 <__assert_func>
 800c56a:	6922      	ldr	r2, [r4, #16]
 800c56c:	3202      	adds	r2, #2
 800c56e:	f104 010c 	add.w	r1, r4, #12
 800c572:	0092      	lsls	r2, r2, #2
 800c574:	300c      	adds	r0, #12
 800c576:	f7fe fb6d 	bl	800ac54 <memcpy>
 800c57a:	4621      	mov	r1, r4
 800c57c:	4638      	mov	r0, r7
 800c57e:	f7ff ffa5 	bl	800c4cc <_Bfree>
 800c582:	4644      	mov	r4, r8
 800c584:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c588:	3501      	adds	r5, #1
 800c58a:	615e      	str	r6, [r3, #20]
 800c58c:	6125      	str	r5, [r4, #16]
 800c58e:	4620      	mov	r0, r4
 800c590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c594:	0800fde3 	.word	0x0800fde3
 800c598:	0800fdf4 	.word	0x0800fdf4

0800c59c <__hi0bits>:
 800c59c:	0c03      	lsrs	r3, r0, #16
 800c59e:	041b      	lsls	r3, r3, #16
 800c5a0:	b9d3      	cbnz	r3, 800c5d8 <__hi0bits+0x3c>
 800c5a2:	0400      	lsls	r0, r0, #16
 800c5a4:	2310      	movs	r3, #16
 800c5a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c5aa:	bf04      	itt	eq
 800c5ac:	0200      	lsleq	r0, r0, #8
 800c5ae:	3308      	addeq	r3, #8
 800c5b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c5b4:	bf04      	itt	eq
 800c5b6:	0100      	lsleq	r0, r0, #4
 800c5b8:	3304      	addeq	r3, #4
 800c5ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c5be:	bf04      	itt	eq
 800c5c0:	0080      	lsleq	r0, r0, #2
 800c5c2:	3302      	addeq	r3, #2
 800c5c4:	2800      	cmp	r0, #0
 800c5c6:	db05      	blt.n	800c5d4 <__hi0bits+0x38>
 800c5c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c5cc:	f103 0301 	add.w	r3, r3, #1
 800c5d0:	bf08      	it	eq
 800c5d2:	2320      	moveq	r3, #32
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	4770      	bx	lr
 800c5d8:	2300      	movs	r3, #0
 800c5da:	e7e4      	b.n	800c5a6 <__hi0bits+0xa>

0800c5dc <__lo0bits>:
 800c5dc:	6803      	ldr	r3, [r0, #0]
 800c5de:	f013 0207 	ands.w	r2, r3, #7
 800c5e2:	4601      	mov	r1, r0
 800c5e4:	d00b      	beq.n	800c5fe <__lo0bits+0x22>
 800c5e6:	07da      	lsls	r2, r3, #31
 800c5e8:	d423      	bmi.n	800c632 <__lo0bits+0x56>
 800c5ea:	0798      	lsls	r0, r3, #30
 800c5ec:	bf49      	itett	mi
 800c5ee:	085b      	lsrmi	r3, r3, #1
 800c5f0:	089b      	lsrpl	r3, r3, #2
 800c5f2:	2001      	movmi	r0, #1
 800c5f4:	600b      	strmi	r3, [r1, #0]
 800c5f6:	bf5c      	itt	pl
 800c5f8:	600b      	strpl	r3, [r1, #0]
 800c5fa:	2002      	movpl	r0, #2
 800c5fc:	4770      	bx	lr
 800c5fe:	b298      	uxth	r0, r3
 800c600:	b9a8      	cbnz	r0, 800c62e <__lo0bits+0x52>
 800c602:	0c1b      	lsrs	r3, r3, #16
 800c604:	2010      	movs	r0, #16
 800c606:	b2da      	uxtb	r2, r3
 800c608:	b90a      	cbnz	r2, 800c60e <__lo0bits+0x32>
 800c60a:	3008      	adds	r0, #8
 800c60c:	0a1b      	lsrs	r3, r3, #8
 800c60e:	071a      	lsls	r2, r3, #28
 800c610:	bf04      	itt	eq
 800c612:	091b      	lsreq	r3, r3, #4
 800c614:	3004      	addeq	r0, #4
 800c616:	079a      	lsls	r2, r3, #30
 800c618:	bf04      	itt	eq
 800c61a:	089b      	lsreq	r3, r3, #2
 800c61c:	3002      	addeq	r0, #2
 800c61e:	07da      	lsls	r2, r3, #31
 800c620:	d403      	bmi.n	800c62a <__lo0bits+0x4e>
 800c622:	085b      	lsrs	r3, r3, #1
 800c624:	f100 0001 	add.w	r0, r0, #1
 800c628:	d005      	beq.n	800c636 <__lo0bits+0x5a>
 800c62a:	600b      	str	r3, [r1, #0]
 800c62c:	4770      	bx	lr
 800c62e:	4610      	mov	r0, r2
 800c630:	e7e9      	b.n	800c606 <__lo0bits+0x2a>
 800c632:	2000      	movs	r0, #0
 800c634:	4770      	bx	lr
 800c636:	2020      	movs	r0, #32
 800c638:	4770      	bx	lr
	...

0800c63c <__i2b>:
 800c63c:	b510      	push	{r4, lr}
 800c63e:	460c      	mov	r4, r1
 800c640:	2101      	movs	r1, #1
 800c642:	f7ff ff03 	bl	800c44c <_Balloc>
 800c646:	4602      	mov	r2, r0
 800c648:	b928      	cbnz	r0, 800c656 <__i2b+0x1a>
 800c64a:	4b05      	ldr	r3, [pc, #20]	; (800c660 <__i2b+0x24>)
 800c64c:	4805      	ldr	r0, [pc, #20]	; (800c664 <__i2b+0x28>)
 800c64e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c652:	f000 fa95 	bl	800cb80 <__assert_func>
 800c656:	2301      	movs	r3, #1
 800c658:	6144      	str	r4, [r0, #20]
 800c65a:	6103      	str	r3, [r0, #16]
 800c65c:	bd10      	pop	{r4, pc}
 800c65e:	bf00      	nop
 800c660:	0800fde3 	.word	0x0800fde3
 800c664:	0800fdf4 	.word	0x0800fdf4

0800c668 <__multiply>:
 800c668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66c:	4691      	mov	r9, r2
 800c66e:	690a      	ldr	r2, [r1, #16]
 800c670:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c674:	429a      	cmp	r2, r3
 800c676:	bfb8      	it	lt
 800c678:	460b      	movlt	r3, r1
 800c67a:	460c      	mov	r4, r1
 800c67c:	bfbc      	itt	lt
 800c67e:	464c      	movlt	r4, r9
 800c680:	4699      	movlt	r9, r3
 800c682:	6927      	ldr	r7, [r4, #16]
 800c684:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c688:	68a3      	ldr	r3, [r4, #8]
 800c68a:	6861      	ldr	r1, [r4, #4]
 800c68c:	eb07 060a 	add.w	r6, r7, sl
 800c690:	42b3      	cmp	r3, r6
 800c692:	b085      	sub	sp, #20
 800c694:	bfb8      	it	lt
 800c696:	3101      	addlt	r1, #1
 800c698:	f7ff fed8 	bl	800c44c <_Balloc>
 800c69c:	b930      	cbnz	r0, 800c6ac <__multiply+0x44>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	4b44      	ldr	r3, [pc, #272]	; (800c7b4 <__multiply+0x14c>)
 800c6a2:	4845      	ldr	r0, [pc, #276]	; (800c7b8 <__multiply+0x150>)
 800c6a4:	f240 115d 	movw	r1, #349	; 0x15d
 800c6a8:	f000 fa6a 	bl	800cb80 <__assert_func>
 800c6ac:	f100 0514 	add.w	r5, r0, #20
 800c6b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c6b4:	462b      	mov	r3, r5
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	4543      	cmp	r3, r8
 800c6ba:	d321      	bcc.n	800c700 <__multiply+0x98>
 800c6bc:	f104 0314 	add.w	r3, r4, #20
 800c6c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c6c4:	f109 0314 	add.w	r3, r9, #20
 800c6c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c6cc:	9202      	str	r2, [sp, #8]
 800c6ce:	1b3a      	subs	r2, r7, r4
 800c6d0:	3a15      	subs	r2, #21
 800c6d2:	f022 0203 	bic.w	r2, r2, #3
 800c6d6:	3204      	adds	r2, #4
 800c6d8:	f104 0115 	add.w	r1, r4, #21
 800c6dc:	428f      	cmp	r7, r1
 800c6de:	bf38      	it	cc
 800c6e0:	2204      	movcc	r2, #4
 800c6e2:	9201      	str	r2, [sp, #4]
 800c6e4:	9a02      	ldr	r2, [sp, #8]
 800c6e6:	9303      	str	r3, [sp, #12]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d80c      	bhi.n	800c706 <__multiply+0x9e>
 800c6ec:	2e00      	cmp	r6, #0
 800c6ee:	dd03      	ble.n	800c6f8 <__multiply+0x90>
 800c6f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d05a      	beq.n	800c7ae <__multiply+0x146>
 800c6f8:	6106      	str	r6, [r0, #16]
 800c6fa:	b005      	add	sp, #20
 800c6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c700:	f843 2b04 	str.w	r2, [r3], #4
 800c704:	e7d8      	b.n	800c6b8 <__multiply+0x50>
 800c706:	f8b3 a000 	ldrh.w	sl, [r3]
 800c70a:	f1ba 0f00 	cmp.w	sl, #0
 800c70e:	d024      	beq.n	800c75a <__multiply+0xf2>
 800c710:	f104 0e14 	add.w	lr, r4, #20
 800c714:	46a9      	mov	r9, r5
 800c716:	f04f 0c00 	mov.w	ip, #0
 800c71a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c71e:	f8d9 1000 	ldr.w	r1, [r9]
 800c722:	fa1f fb82 	uxth.w	fp, r2
 800c726:	b289      	uxth	r1, r1
 800c728:	fb0a 110b 	mla	r1, sl, fp, r1
 800c72c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c730:	f8d9 2000 	ldr.w	r2, [r9]
 800c734:	4461      	add	r1, ip
 800c736:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c73a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c73e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c742:	b289      	uxth	r1, r1
 800c744:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c748:	4577      	cmp	r7, lr
 800c74a:	f849 1b04 	str.w	r1, [r9], #4
 800c74e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c752:	d8e2      	bhi.n	800c71a <__multiply+0xb2>
 800c754:	9a01      	ldr	r2, [sp, #4]
 800c756:	f845 c002 	str.w	ip, [r5, r2]
 800c75a:	9a03      	ldr	r2, [sp, #12]
 800c75c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c760:	3304      	adds	r3, #4
 800c762:	f1b9 0f00 	cmp.w	r9, #0
 800c766:	d020      	beq.n	800c7aa <__multiply+0x142>
 800c768:	6829      	ldr	r1, [r5, #0]
 800c76a:	f104 0c14 	add.w	ip, r4, #20
 800c76e:	46ae      	mov	lr, r5
 800c770:	f04f 0a00 	mov.w	sl, #0
 800c774:	f8bc b000 	ldrh.w	fp, [ip]
 800c778:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c77c:	fb09 220b 	mla	r2, r9, fp, r2
 800c780:	4492      	add	sl, r2
 800c782:	b289      	uxth	r1, r1
 800c784:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c788:	f84e 1b04 	str.w	r1, [lr], #4
 800c78c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c790:	f8be 1000 	ldrh.w	r1, [lr]
 800c794:	0c12      	lsrs	r2, r2, #16
 800c796:	fb09 1102 	mla	r1, r9, r2, r1
 800c79a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c79e:	4567      	cmp	r7, ip
 800c7a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7a4:	d8e6      	bhi.n	800c774 <__multiply+0x10c>
 800c7a6:	9a01      	ldr	r2, [sp, #4]
 800c7a8:	50a9      	str	r1, [r5, r2]
 800c7aa:	3504      	adds	r5, #4
 800c7ac:	e79a      	b.n	800c6e4 <__multiply+0x7c>
 800c7ae:	3e01      	subs	r6, #1
 800c7b0:	e79c      	b.n	800c6ec <__multiply+0x84>
 800c7b2:	bf00      	nop
 800c7b4:	0800fde3 	.word	0x0800fde3
 800c7b8:	0800fdf4 	.word	0x0800fdf4

0800c7bc <__pow5mult>:
 800c7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7c0:	4615      	mov	r5, r2
 800c7c2:	f012 0203 	ands.w	r2, r2, #3
 800c7c6:	4606      	mov	r6, r0
 800c7c8:	460f      	mov	r7, r1
 800c7ca:	d007      	beq.n	800c7dc <__pow5mult+0x20>
 800c7cc:	4c25      	ldr	r4, [pc, #148]	; (800c864 <__pow5mult+0xa8>)
 800c7ce:	3a01      	subs	r2, #1
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7d6:	f7ff fe9b 	bl	800c510 <__multadd>
 800c7da:	4607      	mov	r7, r0
 800c7dc:	10ad      	asrs	r5, r5, #2
 800c7de:	d03d      	beq.n	800c85c <__pow5mult+0xa0>
 800c7e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c7e2:	b97c      	cbnz	r4, 800c804 <__pow5mult+0x48>
 800c7e4:	2010      	movs	r0, #16
 800c7e6:	f7fe fa2d 	bl	800ac44 <malloc>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	6270      	str	r0, [r6, #36]	; 0x24
 800c7ee:	b928      	cbnz	r0, 800c7fc <__pow5mult+0x40>
 800c7f0:	4b1d      	ldr	r3, [pc, #116]	; (800c868 <__pow5mult+0xac>)
 800c7f2:	481e      	ldr	r0, [pc, #120]	; (800c86c <__pow5mult+0xb0>)
 800c7f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c7f8:	f000 f9c2 	bl	800cb80 <__assert_func>
 800c7fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c800:	6004      	str	r4, [r0, #0]
 800c802:	60c4      	str	r4, [r0, #12]
 800c804:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c808:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c80c:	b94c      	cbnz	r4, 800c822 <__pow5mult+0x66>
 800c80e:	f240 2171 	movw	r1, #625	; 0x271
 800c812:	4630      	mov	r0, r6
 800c814:	f7ff ff12 	bl	800c63c <__i2b>
 800c818:	2300      	movs	r3, #0
 800c81a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c81e:	4604      	mov	r4, r0
 800c820:	6003      	str	r3, [r0, #0]
 800c822:	f04f 0900 	mov.w	r9, #0
 800c826:	07eb      	lsls	r3, r5, #31
 800c828:	d50a      	bpl.n	800c840 <__pow5mult+0x84>
 800c82a:	4639      	mov	r1, r7
 800c82c:	4622      	mov	r2, r4
 800c82e:	4630      	mov	r0, r6
 800c830:	f7ff ff1a 	bl	800c668 <__multiply>
 800c834:	4639      	mov	r1, r7
 800c836:	4680      	mov	r8, r0
 800c838:	4630      	mov	r0, r6
 800c83a:	f7ff fe47 	bl	800c4cc <_Bfree>
 800c83e:	4647      	mov	r7, r8
 800c840:	106d      	asrs	r5, r5, #1
 800c842:	d00b      	beq.n	800c85c <__pow5mult+0xa0>
 800c844:	6820      	ldr	r0, [r4, #0]
 800c846:	b938      	cbnz	r0, 800c858 <__pow5mult+0x9c>
 800c848:	4622      	mov	r2, r4
 800c84a:	4621      	mov	r1, r4
 800c84c:	4630      	mov	r0, r6
 800c84e:	f7ff ff0b 	bl	800c668 <__multiply>
 800c852:	6020      	str	r0, [r4, #0]
 800c854:	f8c0 9000 	str.w	r9, [r0]
 800c858:	4604      	mov	r4, r0
 800c85a:	e7e4      	b.n	800c826 <__pow5mult+0x6a>
 800c85c:	4638      	mov	r0, r7
 800c85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c862:	bf00      	nop
 800c864:	0800ff40 	.word	0x0800ff40
 800c868:	0800fd71 	.word	0x0800fd71
 800c86c:	0800fdf4 	.word	0x0800fdf4

0800c870 <__lshift>:
 800c870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c874:	460c      	mov	r4, r1
 800c876:	6849      	ldr	r1, [r1, #4]
 800c878:	6923      	ldr	r3, [r4, #16]
 800c87a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c87e:	68a3      	ldr	r3, [r4, #8]
 800c880:	4607      	mov	r7, r0
 800c882:	4691      	mov	r9, r2
 800c884:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c888:	f108 0601 	add.w	r6, r8, #1
 800c88c:	42b3      	cmp	r3, r6
 800c88e:	db0b      	blt.n	800c8a8 <__lshift+0x38>
 800c890:	4638      	mov	r0, r7
 800c892:	f7ff fddb 	bl	800c44c <_Balloc>
 800c896:	4605      	mov	r5, r0
 800c898:	b948      	cbnz	r0, 800c8ae <__lshift+0x3e>
 800c89a:	4602      	mov	r2, r0
 800c89c:	4b2a      	ldr	r3, [pc, #168]	; (800c948 <__lshift+0xd8>)
 800c89e:	482b      	ldr	r0, [pc, #172]	; (800c94c <__lshift+0xdc>)
 800c8a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c8a4:	f000 f96c 	bl	800cb80 <__assert_func>
 800c8a8:	3101      	adds	r1, #1
 800c8aa:	005b      	lsls	r3, r3, #1
 800c8ac:	e7ee      	b.n	800c88c <__lshift+0x1c>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	f100 0114 	add.w	r1, r0, #20
 800c8b4:	f100 0210 	add.w	r2, r0, #16
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	4553      	cmp	r3, sl
 800c8bc:	db37      	blt.n	800c92e <__lshift+0xbe>
 800c8be:	6920      	ldr	r0, [r4, #16]
 800c8c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8c4:	f104 0314 	add.w	r3, r4, #20
 800c8c8:	f019 091f 	ands.w	r9, r9, #31
 800c8cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c8d4:	d02f      	beq.n	800c936 <__lshift+0xc6>
 800c8d6:	f1c9 0e20 	rsb	lr, r9, #32
 800c8da:	468a      	mov	sl, r1
 800c8dc:	f04f 0c00 	mov.w	ip, #0
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	fa02 f209 	lsl.w	r2, r2, r9
 800c8e6:	ea42 020c 	orr.w	r2, r2, ip
 800c8ea:	f84a 2b04 	str.w	r2, [sl], #4
 800c8ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8f2:	4298      	cmp	r0, r3
 800c8f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c8f8:	d8f2      	bhi.n	800c8e0 <__lshift+0x70>
 800c8fa:	1b03      	subs	r3, r0, r4
 800c8fc:	3b15      	subs	r3, #21
 800c8fe:	f023 0303 	bic.w	r3, r3, #3
 800c902:	3304      	adds	r3, #4
 800c904:	f104 0215 	add.w	r2, r4, #21
 800c908:	4290      	cmp	r0, r2
 800c90a:	bf38      	it	cc
 800c90c:	2304      	movcc	r3, #4
 800c90e:	f841 c003 	str.w	ip, [r1, r3]
 800c912:	f1bc 0f00 	cmp.w	ip, #0
 800c916:	d001      	beq.n	800c91c <__lshift+0xac>
 800c918:	f108 0602 	add.w	r6, r8, #2
 800c91c:	3e01      	subs	r6, #1
 800c91e:	4638      	mov	r0, r7
 800c920:	612e      	str	r6, [r5, #16]
 800c922:	4621      	mov	r1, r4
 800c924:	f7ff fdd2 	bl	800c4cc <_Bfree>
 800c928:	4628      	mov	r0, r5
 800c92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c92e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c932:	3301      	adds	r3, #1
 800c934:	e7c1      	b.n	800c8ba <__lshift+0x4a>
 800c936:	3904      	subs	r1, #4
 800c938:	f853 2b04 	ldr.w	r2, [r3], #4
 800c93c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c940:	4298      	cmp	r0, r3
 800c942:	d8f9      	bhi.n	800c938 <__lshift+0xc8>
 800c944:	e7ea      	b.n	800c91c <__lshift+0xac>
 800c946:	bf00      	nop
 800c948:	0800fde3 	.word	0x0800fde3
 800c94c:	0800fdf4 	.word	0x0800fdf4

0800c950 <__mcmp>:
 800c950:	b530      	push	{r4, r5, lr}
 800c952:	6902      	ldr	r2, [r0, #16]
 800c954:	690c      	ldr	r4, [r1, #16]
 800c956:	1b12      	subs	r2, r2, r4
 800c958:	d10e      	bne.n	800c978 <__mcmp+0x28>
 800c95a:	f100 0314 	add.w	r3, r0, #20
 800c95e:	3114      	adds	r1, #20
 800c960:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c964:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c968:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c96c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c970:	42a5      	cmp	r5, r4
 800c972:	d003      	beq.n	800c97c <__mcmp+0x2c>
 800c974:	d305      	bcc.n	800c982 <__mcmp+0x32>
 800c976:	2201      	movs	r2, #1
 800c978:	4610      	mov	r0, r2
 800c97a:	bd30      	pop	{r4, r5, pc}
 800c97c:	4283      	cmp	r3, r0
 800c97e:	d3f3      	bcc.n	800c968 <__mcmp+0x18>
 800c980:	e7fa      	b.n	800c978 <__mcmp+0x28>
 800c982:	f04f 32ff 	mov.w	r2, #4294967295
 800c986:	e7f7      	b.n	800c978 <__mcmp+0x28>

0800c988 <__mdiff>:
 800c988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c98c:	460c      	mov	r4, r1
 800c98e:	4606      	mov	r6, r0
 800c990:	4611      	mov	r1, r2
 800c992:	4620      	mov	r0, r4
 800c994:	4690      	mov	r8, r2
 800c996:	f7ff ffdb 	bl	800c950 <__mcmp>
 800c99a:	1e05      	subs	r5, r0, #0
 800c99c:	d110      	bne.n	800c9c0 <__mdiff+0x38>
 800c99e:	4629      	mov	r1, r5
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	f7ff fd53 	bl	800c44c <_Balloc>
 800c9a6:	b930      	cbnz	r0, 800c9b6 <__mdiff+0x2e>
 800c9a8:	4b3a      	ldr	r3, [pc, #232]	; (800ca94 <__mdiff+0x10c>)
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	f240 2132 	movw	r1, #562	; 0x232
 800c9b0:	4839      	ldr	r0, [pc, #228]	; (800ca98 <__mdiff+0x110>)
 800c9b2:	f000 f8e5 	bl	800cb80 <__assert_func>
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c9bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c0:	bfa4      	itt	ge
 800c9c2:	4643      	movge	r3, r8
 800c9c4:	46a0      	movge	r8, r4
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c9cc:	bfa6      	itte	ge
 800c9ce:	461c      	movge	r4, r3
 800c9d0:	2500      	movge	r5, #0
 800c9d2:	2501      	movlt	r5, #1
 800c9d4:	f7ff fd3a 	bl	800c44c <_Balloc>
 800c9d8:	b920      	cbnz	r0, 800c9e4 <__mdiff+0x5c>
 800c9da:	4b2e      	ldr	r3, [pc, #184]	; (800ca94 <__mdiff+0x10c>)
 800c9dc:	4602      	mov	r2, r0
 800c9de:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c9e2:	e7e5      	b.n	800c9b0 <__mdiff+0x28>
 800c9e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c9e8:	6926      	ldr	r6, [r4, #16]
 800c9ea:	60c5      	str	r5, [r0, #12]
 800c9ec:	f104 0914 	add.w	r9, r4, #20
 800c9f0:	f108 0514 	add.w	r5, r8, #20
 800c9f4:	f100 0e14 	add.w	lr, r0, #20
 800c9f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c9fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca00:	f108 0210 	add.w	r2, r8, #16
 800ca04:	46f2      	mov	sl, lr
 800ca06:	2100      	movs	r1, #0
 800ca08:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca10:	fa1f f883 	uxth.w	r8, r3
 800ca14:	fa11 f18b 	uxtah	r1, r1, fp
 800ca18:	0c1b      	lsrs	r3, r3, #16
 800ca1a:	eba1 0808 	sub.w	r8, r1, r8
 800ca1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca26:	fa1f f888 	uxth.w	r8, r8
 800ca2a:	1419      	asrs	r1, r3, #16
 800ca2c:	454e      	cmp	r6, r9
 800ca2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca32:	f84a 3b04 	str.w	r3, [sl], #4
 800ca36:	d8e7      	bhi.n	800ca08 <__mdiff+0x80>
 800ca38:	1b33      	subs	r3, r6, r4
 800ca3a:	3b15      	subs	r3, #21
 800ca3c:	f023 0303 	bic.w	r3, r3, #3
 800ca40:	3304      	adds	r3, #4
 800ca42:	3415      	adds	r4, #21
 800ca44:	42a6      	cmp	r6, r4
 800ca46:	bf38      	it	cc
 800ca48:	2304      	movcc	r3, #4
 800ca4a:	441d      	add	r5, r3
 800ca4c:	4473      	add	r3, lr
 800ca4e:	469e      	mov	lr, r3
 800ca50:	462e      	mov	r6, r5
 800ca52:	4566      	cmp	r6, ip
 800ca54:	d30e      	bcc.n	800ca74 <__mdiff+0xec>
 800ca56:	f10c 0203 	add.w	r2, ip, #3
 800ca5a:	1b52      	subs	r2, r2, r5
 800ca5c:	f022 0203 	bic.w	r2, r2, #3
 800ca60:	3d03      	subs	r5, #3
 800ca62:	45ac      	cmp	ip, r5
 800ca64:	bf38      	it	cc
 800ca66:	2200      	movcc	r2, #0
 800ca68:	441a      	add	r2, r3
 800ca6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ca6e:	b17b      	cbz	r3, 800ca90 <__mdiff+0x108>
 800ca70:	6107      	str	r7, [r0, #16]
 800ca72:	e7a3      	b.n	800c9bc <__mdiff+0x34>
 800ca74:	f856 8b04 	ldr.w	r8, [r6], #4
 800ca78:	fa11 f288 	uxtah	r2, r1, r8
 800ca7c:	1414      	asrs	r4, r2, #16
 800ca7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ca82:	b292      	uxth	r2, r2
 800ca84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ca88:	f84e 2b04 	str.w	r2, [lr], #4
 800ca8c:	1421      	asrs	r1, r4, #16
 800ca8e:	e7e0      	b.n	800ca52 <__mdiff+0xca>
 800ca90:	3f01      	subs	r7, #1
 800ca92:	e7ea      	b.n	800ca6a <__mdiff+0xe2>
 800ca94:	0800fde3 	.word	0x0800fde3
 800ca98:	0800fdf4 	.word	0x0800fdf4

0800ca9c <__d2b>:
 800ca9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800caa0:	4689      	mov	r9, r1
 800caa2:	2101      	movs	r1, #1
 800caa4:	ec57 6b10 	vmov	r6, r7, d0
 800caa8:	4690      	mov	r8, r2
 800caaa:	f7ff fccf 	bl	800c44c <_Balloc>
 800caae:	4604      	mov	r4, r0
 800cab0:	b930      	cbnz	r0, 800cac0 <__d2b+0x24>
 800cab2:	4602      	mov	r2, r0
 800cab4:	4b25      	ldr	r3, [pc, #148]	; (800cb4c <__d2b+0xb0>)
 800cab6:	4826      	ldr	r0, [pc, #152]	; (800cb50 <__d2b+0xb4>)
 800cab8:	f240 310a 	movw	r1, #778	; 0x30a
 800cabc:	f000 f860 	bl	800cb80 <__assert_func>
 800cac0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cac4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cac8:	bb35      	cbnz	r5, 800cb18 <__d2b+0x7c>
 800caca:	2e00      	cmp	r6, #0
 800cacc:	9301      	str	r3, [sp, #4]
 800cace:	d028      	beq.n	800cb22 <__d2b+0x86>
 800cad0:	4668      	mov	r0, sp
 800cad2:	9600      	str	r6, [sp, #0]
 800cad4:	f7ff fd82 	bl	800c5dc <__lo0bits>
 800cad8:	9900      	ldr	r1, [sp, #0]
 800cada:	b300      	cbz	r0, 800cb1e <__d2b+0x82>
 800cadc:	9a01      	ldr	r2, [sp, #4]
 800cade:	f1c0 0320 	rsb	r3, r0, #32
 800cae2:	fa02 f303 	lsl.w	r3, r2, r3
 800cae6:	430b      	orrs	r3, r1
 800cae8:	40c2      	lsrs	r2, r0
 800caea:	6163      	str	r3, [r4, #20]
 800caec:	9201      	str	r2, [sp, #4]
 800caee:	9b01      	ldr	r3, [sp, #4]
 800caf0:	61a3      	str	r3, [r4, #24]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	bf14      	ite	ne
 800caf6:	2202      	movne	r2, #2
 800caf8:	2201      	moveq	r2, #1
 800cafa:	6122      	str	r2, [r4, #16]
 800cafc:	b1d5      	cbz	r5, 800cb34 <__d2b+0x98>
 800cafe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb02:	4405      	add	r5, r0
 800cb04:	f8c9 5000 	str.w	r5, [r9]
 800cb08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb0c:	f8c8 0000 	str.w	r0, [r8]
 800cb10:	4620      	mov	r0, r4
 800cb12:	b003      	add	sp, #12
 800cb14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb1c:	e7d5      	b.n	800caca <__d2b+0x2e>
 800cb1e:	6161      	str	r1, [r4, #20]
 800cb20:	e7e5      	b.n	800caee <__d2b+0x52>
 800cb22:	a801      	add	r0, sp, #4
 800cb24:	f7ff fd5a 	bl	800c5dc <__lo0bits>
 800cb28:	9b01      	ldr	r3, [sp, #4]
 800cb2a:	6163      	str	r3, [r4, #20]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	6122      	str	r2, [r4, #16]
 800cb30:	3020      	adds	r0, #32
 800cb32:	e7e3      	b.n	800cafc <__d2b+0x60>
 800cb34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb3c:	f8c9 0000 	str.w	r0, [r9]
 800cb40:	6918      	ldr	r0, [r3, #16]
 800cb42:	f7ff fd2b 	bl	800c59c <__hi0bits>
 800cb46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb4a:	e7df      	b.n	800cb0c <__d2b+0x70>
 800cb4c:	0800fde3 	.word	0x0800fde3
 800cb50:	0800fdf4 	.word	0x0800fdf4

0800cb54 <_calloc_r>:
 800cb54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb56:	fba1 2402 	umull	r2, r4, r1, r2
 800cb5a:	b94c      	cbnz	r4, 800cb70 <_calloc_r+0x1c>
 800cb5c:	4611      	mov	r1, r2
 800cb5e:	9201      	str	r2, [sp, #4]
 800cb60:	f7fe f8fa 	bl	800ad58 <_malloc_r>
 800cb64:	9a01      	ldr	r2, [sp, #4]
 800cb66:	4605      	mov	r5, r0
 800cb68:	b930      	cbnz	r0, 800cb78 <_calloc_r+0x24>
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	b003      	add	sp, #12
 800cb6e:	bd30      	pop	{r4, r5, pc}
 800cb70:	220c      	movs	r2, #12
 800cb72:	6002      	str	r2, [r0, #0]
 800cb74:	2500      	movs	r5, #0
 800cb76:	e7f8      	b.n	800cb6a <_calloc_r+0x16>
 800cb78:	4621      	mov	r1, r4
 800cb7a:	f7fe f879 	bl	800ac70 <memset>
 800cb7e:	e7f4      	b.n	800cb6a <_calloc_r+0x16>

0800cb80 <__assert_func>:
 800cb80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb82:	4614      	mov	r4, r2
 800cb84:	461a      	mov	r2, r3
 800cb86:	4b09      	ldr	r3, [pc, #36]	; (800cbac <__assert_func+0x2c>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4605      	mov	r5, r0
 800cb8c:	68d8      	ldr	r0, [r3, #12]
 800cb8e:	b14c      	cbz	r4, 800cba4 <__assert_func+0x24>
 800cb90:	4b07      	ldr	r3, [pc, #28]	; (800cbb0 <__assert_func+0x30>)
 800cb92:	9100      	str	r1, [sp, #0]
 800cb94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb98:	4906      	ldr	r1, [pc, #24]	; (800cbb4 <__assert_func+0x34>)
 800cb9a:	462b      	mov	r3, r5
 800cb9c:	f000 f80e 	bl	800cbbc <fiprintf>
 800cba0:	f000 fa5a 	bl	800d058 <abort>
 800cba4:	4b04      	ldr	r3, [pc, #16]	; (800cbb8 <__assert_func+0x38>)
 800cba6:	461c      	mov	r4, r3
 800cba8:	e7f3      	b.n	800cb92 <__assert_func+0x12>
 800cbaa:	bf00      	nop
 800cbac:	20000024 	.word	0x20000024
 800cbb0:	0800ff4c 	.word	0x0800ff4c
 800cbb4:	0800ff59 	.word	0x0800ff59
 800cbb8:	0800ff87 	.word	0x0800ff87

0800cbbc <fiprintf>:
 800cbbc:	b40e      	push	{r1, r2, r3}
 800cbbe:	b503      	push	{r0, r1, lr}
 800cbc0:	4601      	mov	r1, r0
 800cbc2:	ab03      	add	r3, sp, #12
 800cbc4:	4805      	ldr	r0, [pc, #20]	; (800cbdc <fiprintf+0x20>)
 800cbc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbca:	6800      	ldr	r0, [r0, #0]
 800cbcc:	9301      	str	r3, [sp, #4]
 800cbce:	f000 f845 	bl	800cc5c <_vfiprintf_r>
 800cbd2:	b002      	add	sp, #8
 800cbd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbd8:	b003      	add	sp, #12
 800cbda:	4770      	bx	lr
 800cbdc:	20000024 	.word	0x20000024

0800cbe0 <__retarget_lock_init_recursive>:
 800cbe0:	4770      	bx	lr

0800cbe2 <__retarget_lock_acquire_recursive>:
 800cbe2:	4770      	bx	lr

0800cbe4 <__retarget_lock_release_recursive>:
 800cbe4:	4770      	bx	lr

0800cbe6 <__ascii_mbtowc>:
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	b901      	cbnz	r1, 800cbec <__ascii_mbtowc+0x6>
 800cbea:	a901      	add	r1, sp, #4
 800cbec:	b142      	cbz	r2, 800cc00 <__ascii_mbtowc+0x1a>
 800cbee:	b14b      	cbz	r3, 800cc04 <__ascii_mbtowc+0x1e>
 800cbf0:	7813      	ldrb	r3, [r2, #0]
 800cbf2:	600b      	str	r3, [r1, #0]
 800cbf4:	7812      	ldrb	r2, [r2, #0]
 800cbf6:	1e10      	subs	r0, r2, #0
 800cbf8:	bf18      	it	ne
 800cbfa:	2001      	movne	r0, #1
 800cbfc:	b002      	add	sp, #8
 800cbfe:	4770      	bx	lr
 800cc00:	4610      	mov	r0, r2
 800cc02:	e7fb      	b.n	800cbfc <__ascii_mbtowc+0x16>
 800cc04:	f06f 0001 	mvn.w	r0, #1
 800cc08:	e7f8      	b.n	800cbfc <__ascii_mbtowc+0x16>

0800cc0a <__sfputc_r>:
 800cc0a:	6893      	ldr	r3, [r2, #8]
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	b410      	push	{r4}
 800cc12:	6093      	str	r3, [r2, #8]
 800cc14:	da08      	bge.n	800cc28 <__sfputc_r+0x1e>
 800cc16:	6994      	ldr	r4, [r2, #24]
 800cc18:	42a3      	cmp	r3, r4
 800cc1a:	db01      	blt.n	800cc20 <__sfputc_r+0x16>
 800cc1c:	290a      	cmp	r1, #10
 800cc1e:	d103      	bne.n	800cc28 <__sfputc_r+0x1e>
 800cc20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc24:	f000 b94a 	b.w	800cebc <__swbuf_r>
 800cc28:	6813      	ldr	r3, [r2, #0]
 800cc2a:	1c58      	adds	r0, r3, #1
 800cc2c:	6010      	str	r0, [r2, #0]
 800cc2e:	7019      	strb	r1, [r3, #0]
 800cc30:	4608      	mov	r0, r1
 800cc32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <__sfputs_r>:
 800cc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3a:	4606      	mov	r6, r0
 800cc3c:	460f      	mov	r7, r1
 800cc3e:	4614      	mov	r4, r2
 800cc40:	18d5      	adds	r5, r2, r3
 800cc42:	42ac      	cmp	r4, r5
 800cc44:	d101      	bne.n	800cc4a <__sfputs_r+0x12>
 800cc46:	2000      	movs	r0, #0
 800cc48:	e007      	b.n	800cc5a <__sfputs_r+0x22>
 800cc4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc4e:	463a      	mov	r2, r7
 800cc50:	4630      	mov	r0, r6
 800cc52:	f7ff ffda 	bl	800cc0a <__sfputc_r>
 800cc56:	1c43      	adds	r3, r0, #1
 800cc58:	d1f3      	bne.n	800cc42 <__sfputs_r+0xa>
 800cc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc5c <_vfiprintf_r>:
 800cc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc60:	460d      	mov	r5, r1
 800cc62:	b09d      	sub	sp, #116	; 0x74
 800cc64:	4614      	mov	r4, r2
 800cc66:	4698      	mov	r8, r3
 800cc68:	4606      	mov	r6, r0
 800cc6a:	b118      	cbz	r0, 800cc74 <_vfiprintf_r+0x18>
 800cc6c:	6983      	ldr	r3, [r0, #24]
 800cc6e:	b90b      	cbnz	r3, 800cc74 <_vfiprintf_r+0x18>
 800cc70:	f000 fb14 	bl	800d29c <__sinit>
 800cc74:	4b89      	ldr	r3, [pc, #548]	; (800ce9c <_vfiprintf_r+0x240>)
 800cc76:	429d      	cmp	r5, r3
 800cc78:	d11b      	bne.n	800ccb2 <_vfiprintf_r+0x56>
 800cc7a:	6875      	ldr	r5, [r6, #4]
 800cc7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc7e:	07d9      	lsls	r1, r3, #31
 800cc80:	d405      	bmi.n	800cc8e <_vfiprintf_r+0x32>
 800cc82:	89ab      	ldrh	r3, [r5, #12]
 800cc84:	059a      	lsls	r2, r3, #22
 800cc86:	d402      	bmi.n	800cc8e <_vfiprintf_r+0x32>
 800cc88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc8a:	f7ff ffaa 	bl	800cbe2 <__retarget_lock_acquire_recursive>
 800cc8e:	89ab      	ldrh	r3, [r5, #12]
 800cc90:	071b      	lsls	r3, r3, #28
 800cc92:	d501      	bpl.n	800cc98 <_vfiprintf_r+0x3c>
 800cc94:	692b      	ldr	r3, [r5, #16]
 800cc96:	b9eb      	cbnz	r3, 800ccd4 <_vfiprintf_r+0x78>
 800cc98:	4629      	mov	r1, r5
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f000 f96e 	bl	800cf7c <__swsetup_r>
 800cca0:	b1c0      	cbz	r0, 800ccd4 <_vfiprintf_r+0x78>
 800cca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cca4:	07dc      	lsls	r4, r3, #31
 800cca6:	d50e      	bpl.n	800ccc6 <_vfiprintf_r+0x6a>
 800cca8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccac:	b01d      	add	sp, #116	; 0x74
 800ccae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccb2:	4b7b      	ldr	r3, [pc, #492]	; (800cea0 <_vfiprintf_r+0x244>)
 800ccb4:	429d      	cmp	r5, r3
 800ccb6:	d101      	bne.n	800ccbc <_vfiprintf_r+0x60>
 800ccb8:	68b5      	ldr	r5, [r6, #8]
 800ccba:	e7df      	b.n	800cc7c <_vfiprintf_r+0x20>
 800ccbc:	4b79      	ldr	r3, [pc, #484]	; (800cea4 <_vfiprintf_r+0x248>)
 800ccbe:	429d      	cmp	r5, r3
 800ccc0:	bf08      	it	eq
 800ccc2:	68f5      	ldreq	r5, [r6, #12]
 800ccc4:	e7da      	b.n	800cc7c <_vfiprintf_r+0x20>
 800ccc6:	89ab      	ldrh	r3, [r5, #12]
 800ccc8:	0598      	lsls	r0, r3, #22
 800ccca:	d4ed      	bmi.n	800cca8 <_vfiprintf_r+0x4c>
 800cccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccce:	f7ff ff89 	bl	800cbe4 <__retarget_lock_release_recursive>
 800ccd2:	e7e9      	b.n	800cca8 <_vfiprintf_r+0x4c>
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	9309      	str	r3, [sp, #36]	; 0x24
 800ccd8:	2320      	movs	r3, #32
 800ccda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccde:	f8cd 800c 	str.w	r8, [sp, #12]
 800cce2:	2330      	movs	r3, #48	; 0x30
 800cce4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cea8 <_vfiprintf_r+0x24c>
 800cce8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccec:	f04f 0901 	mov.w	r9, #1
 800ccf0:	4623      	mov	r3, r4
 800ccf2:	469a      	mov	sl, r3
 800ccf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccf8:	b10a      	cbz	r2, 800ccfe <_vfiprintf_r+0xa2>
 800ccfa:	2a25      	cmp	r2, #37	; 0x25
 800ccfc:	d1f9      	bne.n	800ccf2 <_vfiprintf_r+0x96>
 800ccfe:	ebba 0b04 	subs.w	fp, sl, r4
 800cd02:	d00b      	beq.n	800cd1c <_vfiprintf_r+0xc0>
 800cd04:	465b      	mov	r3, fp
 800cd06:	4622      	mov	r2, r4
 800cd08:	4629      	mov	r1, r5
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	f7ff ff94 	bl	800cc38 <__sfputs_r>
 800cd10:	3001      	adds	r0, #1
 800cd12:	f000 80aa 	beq.w	800ce6a <_vfiprintf_r+0x20e>
 800cd16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd18:	445a      	add	r2, fp
 800cd1a:	9209      	str	r2, [sp, #36]	; 0x24
 800cd1c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	f000 80a2 	beq.w	800ce6a <_vfiprintf_r+0x20e>
 800cd26:	2300      	movs	r3, #0
 800cd28:	f04f 32ff 	mov.w	r2, #4294967295
 800cd2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd30:	f10a 0a01 	add.w	sl, sl, #1
 800cd34:	9304      	str	r3, [sp, #16]
 800cd36:	9307      	str	r3, [sp, #28]
 800cd38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd3c:	931a      	str	r3, [sp, #104]	; 0x68
 800cd3e:	4654      	mov	r4, sl
 800cd40:	2205      	movs	r2, #5
 800cd42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd46:	4858      	ldr	r0, [pc, #352]	; (800cea8 <_vfiprintf_r+0x24c>)
 800cd48:	f7f3 fa62 	bl	8000210 <memchr>
 800cd4c:	9a04      	ldr	r2, [sp, #16]
 800cd4e:	b9d8      	cbnz	r0, 800cd88 <_vfiprintf_r+0x12c>
 800cd50:	06d1      	lsls	r1, r2, #27
 800cd52:	bf44      	itt	mi
 800cd54:	2320      	movmi	r3, #32
 800cd56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd5a:	0713      	lsls	r3, r2, #28
 800cd5c:	bf44      	itt	mi
 800cd5e:	232b      	movmi	r3, #43	; 0x2b
 800cd60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd64:	f89a 3000 	ldrb.w	r3, [sl]
 800cd68:	2b2a      	cmp	r3, #42	; 0x2a
 800cd6a:	d015      	beq.n	800cd98 <_vfiprintf_r+0x13c>
 800cd6c:	9a07      	ldr	r2, [sp, #28]
 800cd6e:	4654      	mov	r4, sl
 800cd70:	2000      	movs	r0, #0
 800cd72:	f04f 0c0a 	mov.w	ip, #10
 800cd76:	4621      	mov	r1, r4
 800cd78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd7c:	3b30      	subs	r3, #48	; 0x30
 800cd7e:	2b09      	cmp	r3, #9
 800cd80:	d94e      	bls.n	800ce20 <_vfiprintf_r+0x1c4>
 800cd82:	b1b0      	cbz	r0, 800cdb2 <_vfiprintf_r+0x156>
 800cd84:	9207      	str	r2, [sp, #28]
 800cd86:	e014      	b.n	800cdb2 <_vfiprintf_r+0x156>
 800cd88:	eba0 0308 	sub.w	r3, r0, r8
 800cd8c:	fa09 f303 	lsl.w	r3, r9, r3
 800cd90:	4313      	orrs	r3, r2
 800cd92:	9304      	str	r3, [sp, #16]
 800cd94:	46a2      	mov	sl, r4
 800cd96:	e7d2      	b.n	800cd3e <_vfiprintf_r+0xe2>
 800cd98:	9b03      	ldr	r3, [sp, #12]
 800cd9a:	1d19      	adds	r1, r3, #4
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	9103      	str	r1, [sp, #12]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	bfbb      	ittet	lt
 800cda4:	425b      	neglt	r3, r3
 800cda6:	f042 0202 	orrlt.w	r2, r2, #2
 800cdaa:	9307      	strge	r3, [sp, #28]
 800cdac:	9307      	strlt	r3, [sp, #28]
 800cdae:	bfb8      	it	lt
 800cdb0:	9204      	strlt	r2, [sp, #16]
 800cdb2:	7823      	ldrb	r3, [r4, #0]
 800cdb4:	2b2e      	cmp	r3, #46	; 0x2e
 800cdb6:	d10c      	bne.n	800cdd2 <_vfiprintf_r+0x176>
 800cdb8:	7863      	ldrb	r3, [r4, #1]
 800cdba:	2b2a      	cmp	r3, #42	; 0x2a
 800cdbc:	d135      	bne.n	800ce2a <_vfiprintf_r+0x1ce>
 800cdbe:	9b03      	ldr	r3, [sp, #12]
 800cdc0:	1d1a      	adds	r2, r3, #4
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	9203      	str	r2, [sp, #12]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	bfb8      	it	lt
 800cdca:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdce:	3402      	adds	r4, #2
 800cdd0:	9305      	str	r3, [sp, #20]
 800cdd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ceb8 <_vfiprintf_r+0x25c>
 800cdd6:	7821      	ldrb	r1, [r4, #0]
 800cdd8:	2203      	movs	r2, #3
 800cdda:	4650      	mov	r0, sl
 800cddc:	f7f3 fa18 	bl	8000210 <memchr>
 800cde0:	b140      	cbz	r0, 800cdf4 <_vfiprintf_r+0x198>
 800cde2:	2340      	movs	r3, #64	; 0x40
 800cde4:	eba0 000a 	sub.w	r0, r0, sl
 800cde8:	fa03 f000 	lsl.w	r0, r3, r0
 800cdec:	9b04      	ldr	r3, [sp, #16]
 800cdee:	4303      	orrs	r3, r0
 800cdf0:	3401      	adds	r4, #1
 800cdf2:	9304      	str	r3, [sp, #16]
 800cdf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdf8:	482c      	ldr	r0, [pc, #176]	; (800ceac <_vfiprintf_r+0x250>)
 800cdfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdfe:	2206      	movs	r2, #6
 800ce00:	f7f3 fa06 	bl	8000210 <memchr>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d03f      	beq.n	800ce88 <_vfiprintf_r+0x22c>
 800ce08:	4b29      	ldr	r3, [pc, #164]	; (800ceb0 <_vfiprintf_r+0x254>)
 800ce0a:	bb1b      	cbnz	r3, 800ce54 <_vfiprintf_r+0x1f8>
 800ce0c:	9b03      	ldr	r3, [sp, #12]
 800ce0e:	3307      	adds	r3, #7
 800ce10:	f023 0307 	bic.w	r3, r3, #7
 800ce14:	3308      	adds	r3, #8
 800ce16:	9303      	str	r3, [sp, #12]
 800ce18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce1a:	443b      	add	r3, r7
 800ce1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce1e:	e767      	b.n	800ccf0 <_vfiprintf_r+0x94>
 800ce20:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce24:	460c      	mov	r4, r1
 800ce26:	2001      	movs	r0, #1
 800ce28:	e7a5      	b.n	800cd76 <_vfiprintf_r+0x11a>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	3401      	adds	r4, #1
 800ce2e:	9305      	str	r3, [sp, #20]
 800ce30:	4619      	mov	r1, r3
 800ce32:	f04f 0c0a 	mov.w	ip, #10
 800ce36:	4620      	mov	r0, r4
 800ce38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce3c:	3a30      	subs	r2, #48	; 0x30
 800ce3e:	2a09      	cmp	r2, #9
 800ce40:	d903      	bls.n	800ce4a <_vfiprintf_r+0x1ee>
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d0c5      	beq.n	800cdd2 <_vfiprintf_r+0x176>
 800ce46:	9105      	str	r1, [sp, #20]
 800ce48:	e7c3      	b.n	800cdd2 <_vfiprintf_r+0x176>
 800ce4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce4e:	4604      	mov	r4, r0
 800ce50:	2301      	movs	r3, #1
 800ce52:	e7f0      	b.n	800ce36 <_vfiprintf_r+0x1da>
 800ce54:	ab03      	add	r3, sp, #12
 800ce56:	9300      	str	r3, [sp, #0]
 800ce58:	462a      	mov	r2, r5
 800ce5a:	4b16      	ldr	r3, [pc, #88]	; (800ceb4 <_vfiprintf_r+0x258>)
 800ce5c:	a904      	add	r1, sp, #16
 800ce5e:	4630      	mov	r0, r6
 800ce60:	f7fe f88e 	bl	800af80 <_printf_float>
 800ce64:	4607      	mov	r7, r0
 800ce66:	1c78      	adds	r0, r7, #1
 800ce68:	d1d6      	bne.n	800ce18 <_vfiprintf_r+0x1bc>
 800ce6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce6c:	07d9      	lsls	r1, r3, #31
 800ce6e:	d405      	bmi.n	800ce7c <_vfiprintf_r+0x220>
 800ce70:	89ab      	ldrh	r3, [r5, #12]
 800ce72:	059a      	lsls	r2, r3, #22
 800ce74:	d402      	bmi.n	800ce7c <_vfiprintf_r+0x220>
 800ce76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce78:	f7ff feb4 	bl	800cbe4 <__retarget_lock_release_recursive>
 800ce7c:	89ab      	ldrh	r3, [r5, #12]
 800ce7e:	065b      	lsls	r3, r3, #25
 800ce80:	f53f af12 	bmi.w	800cca8 <_vfiprintf_r+0x4c>
 800ce84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce86:	e711      	b.n	800ccac <_vfiprintf_r+0x50>
 800ce88:	ab03      	add	r3, sp, #12
 800ce8a:	9300      	str	r3, [sp, #0]
 800ce8c:	462a      	mov	r2, r5
 800ce8e:	4b09      	ldr	r3, [pc, #36]	; (800ceb4 <_vfiprintf_r+0x258>)
 800ce90:	a904      	add	r1, sp, #16
 800ce92:	4630      	mov	r0, r6
 800ce94:	f7fe fb18 	bl	800b4c8 <_printf_i>
 800ce98:	e7e4      	b.n	800ce64 <_vfiprintf_r+0x208>
 800ce9a:	bf00      	nop
 800ce9c:	080100c4 	.word	0x080100c4
 800cea0:	080100e4 	.word	0x080100e4
 800cea4:	080100a4 	.word	0x080100a4
 800cea8:	0800ff92 	.word	0x0800ff92
 800ceac:	0800ff9c 	.word	0x0800ff9c
 800ceb0:	0800af81 	.word	0x0800af81
 800ceb4:	0800cc39 	.word	0x0800cc39
 800ceb8:	0800ff98 	.word	0x0800ff98

0800cebc <__swbuf_r>:
 800cebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cebe:	460e      	mov	r6, r1
 800cec0:	4614      	mov	r4, r2
 800cec2:	4605      	mov	r5, r0
 800cec4:	b118      	cbz	r0, 800cece <__swbuf_r+0x12>
 800cec6:	6983      	ldr	r3, [r0, #24]
 800cec8:	b90b      	cbnz	r3, 800cece <__swbuf_r+0x12>
 800ceca:	f000 f9e7 	bl	800d29c <__sinit>
 800cece:	4b21      	ldr	r3, [pc, #132]	; (800cf54 <__swbuf_r+0x98>)
 800ced0:	429c      	cmp	r4, r3
 800ced2:	d12b      	bne.n	800cf2c <__swbuf_r+0x70>
 800ced4:	686c      	ldr	r4, [r5, #4]
 800ced6:	69a3      	ldr	r3, [r4, #24]
 800ced8:	60a3      	str	r3, [r4, #8]
 800ceda:	89a3      	ldrh	r3, [r4, #12]
 800cedc:	071a      	lsls	r2, r3, #28
 800cede:	d52f      	bpl.n	800cf40 <__swbuf_r+0x84>
 800cee0:	6923      	ldr	r3, [r4, #16]
 800cee2:	b36b      	cbz	r3, 800cf40 <__swbuf_r+0x84>
 800cee4:	6923      	ldr	r3, [r4, #16]
 800cee6:	6820      	ldr	r0, [r4, #0]
 800cee8:	1ac0      	subs	r0, r0, r3
 800ceea:	6963      	ldr	r3, [r4, #20]
 800ceec:	b2f6      	uxtb	r6, r6
 800ceee:	4283      	cmp	r3, r0
 800cef0:	4637      	mov	r7, r6
 800cef2:	dc04      	bgt.n	800cefe <__swbuf_r+0x42>
 800cef4:	4621      	mov	r1, r4
 800cef6:	4628      	mov	r0, r5
 800cef8:	f000 f93c 	bl	800d174 <_fflush_r>
 800cefc:	bb30      	cbnz	r0, 800cf4c <__swbuf_r+0x90>
 800cefe:	68a3      	ldr	r3, [r4, #8]
 800cf00:	3b01      	subs	r3, #1
 800cf02:	60a3      	str	r3, [r4, #8]
 800cf04:	6823      	ldr	r3, [r4, #0]
 800cf06:	1c5a      	adds	r2, r3, #1
 800cf08:	6022      	str	r2, [r4, #0]
 800cf0a:	701e      	strb	r6, [r3, #0]
 800cf0c:	6963      	ldr	r3, [r4, #20]
 800cf0e:	3001      	adds	r0, #1
 800cf10:	4283      	cmp	r3, r0
 800cf12:	d004      	beq.n	800cf1e <__swbuf_r+0x62>
 800cf14:	89a3      	ldrh	r3, [r4, #12]
 800cf16:	07db      	lsls	r3, r3, #31
 800cf18:	d506      	bpl.n	800cf28 <__swbuf_r+0x6c>
 800cf1a:	2e0a      	cmp	r6, #10
 800cf1c:	d104      	bne.n	800cf28 <__swbuf_r+0x6c>
 800cf1e:	4621      	mov	r1, r4
 800cf20:	4628      	mov	r0, r5
 800cf22:	f000 f927 	bl	800d174 <_fflush_r>
 800cf26:	b988      	cbnz	r0, 800cf4c <__swbuf_r+0x90>
 800cf28:	4638      	mov	r0, r7
 800cf2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf2c:	4b0a      	ldr	r3, [pc, #40]	; (800cf58 <__swbuf_r+0x9c>)
 800cf2e:	429c      	cmp	r4, r3
 800cf30:	d101      	bne.n	800cf36 <__swbuf_r+0x7a>
 800cf32:	68ac      	ldr	r4, [r5, #8]
 800cf34:	e7cf      	b.n	800ced6 <__swbuf_r+0x1a>
 800cf36:	4b09      	ldr	r3, [pc, #36]	; (800cf5c <__swbuf_r+0xa0>)
 800cf38:	429c      	cmp	r4, r3
 800cf3a:	bf08      	it	eq
 800cf3c:	68ec      	ldreq	r4, [r5, #12]
 800cf3e:	e7ca      	b.n	800ced6 <__swbuf_r+0x1a>
 800cf40:	4621      	mov	r1, r4
 800cf42:	4628      	mov	r0, r5
 800cf44:	f000 f81a 	bl	800cf7c <__swsetup_r>
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	d0cb      	beq.n	800cee4 <__swbuf_r+0x28>
 800cf4c:	f04f 37ff 	mov.w	r7, #4294967295
 800cf50:	e7ea      	b.n	800cf28 <__swbuf_r+0x6c>
 800cf52:	bf00      	nop
 800cf54:	080100c4 	.word	0x080100c4
 800cf58:	080100e4 	.word	0x080100e4
 800cf5c:	080100a4 	.word	0x080100a4

0800cf60 <__ascii_wctomb>:
 800cf60:	b149      	cbz	r1, 800cf76 <__ascii_wctomb+0x16>
 800cf62:	2aff      	cmp	r2, #255	; 0xff
 800cf64:	bf85      	ittet	hi
 800cf66:	238a      	movhi	r3, #138	; 0x8a
 800cf68:	6003      	strhi	r3, [r0, #0]
 800cf6a:	700a      	strbls	r2, [r1, #0]
 800cf6c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf70:	bf98      	it	ls
 800cf72:	2001      	movls	r0, #1
 800cf74:	4770      	bx	lr
 800cf76:	4608      	mov	r0, r1
 800cf78:	4770      	bx	lr
	...

0800cf7c <__swsetup_r>:
 800cf7c:	4b32      	ldr	r3, [pc, #200]	; (800d048 <__swsetup_r+0xcc>)
 800cf7e:	b570      	push	{r4, r5, r6, lr}
 800cf80:	681d      	ldr	r5, [r3, #0]
 800cf82:	4606      	mov	r6, r0
 800cf84:	460c      	mov	r4, r1
 800cf86:	b125      	cbz	r5, 800cf92 <__swsetup_r+0x16>
 800cf88:	69ab      	ldr	r3, [r5, #24]
 800cf8a:	b913      	cbnz	r3, 800cf92 <__swsetup_r+0x16>
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	f000 f985 	bl	800d29c <__sinit>
 800cf92:	4b2e      	ldr	r3, [pc, #184]	; (800d04c <__swsetup_r+0xd0>)
 800cf94:	429c      	cmp	r4, r3
 800cf96:	d10f      	bne.n	800cfb8 <__swsetup_r+0x3c>
 800cf98:	686c      	ldr	r4, [r5, #4]
 800cf9a:	89a3      	ldrh	r3, [r4, #12]
 800cf9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cfa0:	0719      	lsls	r1, r3, #28
 800cfa2:	d42c      	bmi.n	800cffe <__swsetup_r+0x82>
 800cfa4:	06dd      	lsls	r5, r3, #27
 800cfa6:	d411      	bmi.n	800cfcc <__swsetup_r+0x50>
 800cfa8:	2309      	movs	r3, #9
 800cfaa:	6033      	str	r3, [r6, #0]
 800cfac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cfb0:	81a3      	strh	r3, [r4, #12]
 800cfb2:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb6:	e03e      	b.n	800d036 <__swsetup_r+0xba>
 800cfb8:	4b25      	ldr	r3, [pc, #148]	; (800d050 <__swsetup_r+0xd4>)
 800cfba:	429c      	cmp	r4, r3
 800cfbc:	d101      	bne.n	800cfc2 <__swsetup_r+0x46>
 800cfbe:	68ac      	ldr	r4, [r5, #8]
 800cfc0:	e7eb      	b.n	800cf9a <__swsetup_r+0x1e>
 800cfc2:	4b24      	ldr	r3, [pc, #144]	; (800d054 <__swsetup_r+0xd8>)
 800cfc4:	429c      	cmp	r4, r3
 800cfc6:	bf08      	it	eq
 800cfc8:	68ec      	ldreq	r4, [r5, #12]
 800cfca:	e7e6      	b.n	800cf9a <__swsetup_r+0x1e>
 800cfcc:	0758      	lsls	r0, r3, #29
 800cfce:	d512      	bpl.n	800cff6 <__swsetup_r+0x7a>
 800cfd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfd2:	b141      	cbz	r1, 800cfe6 <__swsetup_r+0x6a>
 800cfd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfd8:	4299      	cmp	r1, r3
 800cfda:	d002      	beq.n	800cfe2 <__swsetup_r+0x66>
 800cfdc:	4630      	mov	r0, r6
 800cfde:	f7fd fe4f 	bl	800ac80 <_free_r>
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	6363      	str	r3, [r4, #52]	; 0x34
 800cfe6:	89a3      	ldrh	r3, [r4, #12]
 800cfe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cfec:	81a3      	strh	r3, [r4, #12]
 800cfee:	2300      	movs	r3, #0
 800cff0:	6063      	str	r3, [r4, #4]
 800cff2:	6923      	ldr	r3, [r4, #16]
 800cff4:	6023      	str	r3, [r4, #0]
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	f043 0308 	orr.w	r3, r3, #8
 800cffc:	81a3      	strh	r3, [r4, #12]
 800cffe:	6923      	ldr	r3, [r4, #16]
 800d000:	b94b      	cbnz	r3, 800d016 <__swsetup_r+0x9a>
 800d002:	89a3      	ldrh	r3, [r4, #12]
 800d004:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d00c:	d003      	beq.n	800d016 <__swsetup_r+0x9a>
 800d00e:	4621      	mov	r1, r4
 800d010:	4630      	mov	r0, r6
 800d012:	f000 fa05 	bl	800d420 <__smakebuf_r>
 800d016:	89a0      	ldrh	r0, [r4, #12]
 800d018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d01c:	f010 0301 	ands.w	r3, r0, #1
 800d020:	d00a      	beq.n	800d038 <__swsetup_r+0xbc>
 800d022:	2300      	movs	r3, #0
 800d024:	60a3      	str	r3, [r4, #8]
 800d026:	6963      	ldr	r3, [r4, #20]
 800d028:	425b      	negs	r3, r3
 800d02a:	61a3      	str	r3, [r4, #24]
 800d02c:	6923      	ldr	r3, [r4, #16]
 800d02e:	b943      	cbnz	r3, 800d042 <__swsetup_r+0xc6>
 800d030:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d034:	d1ba      	bne.n	800cfac <__swsetup_r+0x30>
 800d036:	bd70      	pop	{r4, r5, r6, pc}
 800d038:	0781      	lsls	r1, r0, #30
 800d03a:	bf58      	it	pl
 800d03c:	6963      	ldrpl	r3, [r4, #20]
 800d03e:	60a3      	str	r3, [r4, #8]
 800d040:	e7f4      	b.n	800d02c <__swsetup_r+0xb0>
 800d042:	2000      	movs	r0, #0
 800d044:	e7f7      	b.n	800d036 <__swsetup_r+0xba>
 800d046:	bf00      	nop
 800d048:	20000024 	.word	0x20000024
 800d04c:	080100c4 	.word	0x080100c4
 800d050:	080100e4 	.word	0x080100e4
 800d054:	080100a4 	.word	0x080100a4

0800d058 <abort>:
 800d058:	b508      	push	{r3, lr}
 800d05a:	2006      	movs	r0, #6
 800d05c:	f000 fa48 	bl	800d4f0 <raise>
 800d060:	2001      	movs	r0, #1
 800d062:	f7f6 fabd 	bl	80035e0 <_exit>
	...

0800d068 <__sflush_r>:
 800d068:	898a      	ldrh	r2, [r1, #12]
 800d06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d06e:	4605      	mov	r5, r0
 800d070:	0710      	lsls	r0, r2, #28
 800d072:	460c      	mov	r4, r1
 800d074:	d458      	bmi.n	800d128 <__sflush_r+0xc0>
 800d076:	684b      	ldr	r3, [r1, #4]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	dc05      	bgt.n	800d088 <__sflush_r+0x20>
 800d07c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d07e:	2b00      	cmp	r3, #0
 800d080:	dc02      	bgt.n	800d088 <__sflush_r+0x20>
 800d082:	2000      	movs	r0, #0
 800d084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d08a:	2e00      	cmp	r6, #0
 800d08c:	d0f9      	beq.n	800d082 <__sflush_r+0x1a>
 800d08e:	2300      	movs	r3, #0
 800d090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d094:	682f      	ldr	r7, [r5, #0]
 800d096:	602b      	str	r3, [r5, #0]
 800d098:	d032      	beq.n	800d100 <__sflush_r+0x98>
 800d09a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d09c:	89a3      	ldrh	r3, [r4, #12]
 800d09e:	075a      	lsls	r2, r3, #29
 800d0a0:	d505      	bpl.n	800d0ae <__sflush_r+0x46>
 800d0a2:	6863      	ldr	r3, [r4, #4]
 800d0a4:	1ac0      	subs	r0, r0, r3
 800d0a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0a8:	b10b      	cbz	r3, 800d0ae <__sflush_r+0x46>
 800d0aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0ac:	1ac0      	subs	r0, r0, r3
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0b4:	6a21      	ldr	r1, [r4, #32]
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	47b0      	blx	r6
 800d0ba:	1c43      	adds	r3, r0, #1
 800d0bc:	89a3      	ldrh	r3, [r4, #12]
 800d0be:	d106      	bne.n	800d0ce <__sflush_r+0x66>
 800d0c0:	6829      	ldr	r1, [r5, #0]
 800d0c2:	291d      	cmp	r1, #29
 800d0c4:	d82c      	bhi.n	800d120 <__sflush_r+0xb8>
 800d0c6:	4a2a      	ldr	r2, [pc, #168]	; (800d170 <__sflush_r+0x108>)
 800d0c8:	40ca      	lsrs	r2, r1
 800d0ca:	07d6      	lsls	r6, r2, #31
 800d0cc:	d528      	bpl.n	800d120 <__sflush_r+0xb8>
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	6062      	str	r2, [r4, #4]
 800d0d2:	04d9      	lsls	r1, r3, #19
 800d0d4:	6922      	ldr	r2, [r4, #16]
 800d0d6:	6022      	str	r2, [r4, #0]
 800d0d8:	d504      	bpl.n	800d0e4 <__sflush_r+0x7c>
 800d0da:	1c42      	adds	r2, r0, #1
 800d0dc:	d101      	bne.n	800d0e2 <__sflush_r+0x7a>
 800d0de:	682b      	ldr	r3, [r5, #0]
 800d0e0:	b903      	cbnz	r3, 800d0e4 <__sflush_r+0x7c>
 800d0e2:	6560      	str	r0, [r4, #84]	; 0x54
 800d0e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0e6:	602f      	str	r7, [r5, #0]
 800d0e8:	2900      	cmp	r1, #0
 800d0ea:	d0ca      	beq.n	800d082 <__sflush_r+0x1a>
 800d0ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0f0:	4299      	cmp	r1, r3
 800d0f2:	d002      	beq.n	800d0fa <__sflush_r+0x92>
 800d0f4:	4628      	mov	r0, r5
 800d0f6:	f7fd fdc3 	bl	800ac80 <_free_r>
 800d0fa:	2000      	movs	r0, #0
 800d0fc:	6360      	str	r0, [r4, #52]	; 0x34
 800d0fe:	e7c1      	b.n	800d084 <__sflush_r+0x1c>
 800d100:	6a21      	ldr	r1, [r4, #32]
 800d102:	2301      	movs	r3, #1
 800d104:	4628      	mov	r0, r5
 800d106:	47b0      	blx	r6
 800d108:	1c41      	adds	r1, r0, #1
 800d10a:	d1c7      	bne.n	800d09c <__sflush_r+0x34>
 800d10c:	682b      	ldr	r3, [r5, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d0c4      	beq.n	800d09c <__sflush_r+0x34>
 800d112:	2b1d      	cmp	r3, #29
 800d114:	d001      	beq.n	800d11a <__sflush_r+0xb2>
 800d116:	2b16      	cmp	r3, #22
 800d118:	d101      	bne.n	800d11e <__sflush_r+0xb6>
 800d11a:	602f      	str	r7, [r5, #0]
 800d11c:	e7b1      	b.n	800d082 <__sflush_r+0x1a>
 800d11e:	89a3      	ldrh	r3, [r4, #12]
 800d120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d124:	81a3      	strh	r3, [r4, #12]
 800d126:	e7ad      	b.n	800d084 <__sflush_r+0x1c>
 800d128:	690f      	ldr	r7, [r1, #16]
 800d12a:	2f00      	cmp	r7, #0
 800d12c:	d0a9      	beq.n	800d082 <__sflush_r+0x1a>
 800d12e:	0793      	lsls	r3, r2, #30
 800d130:	680e      	ldr	r6, [r1, #0]
 800d132:	bf08      	it	eq
 800d134:	694b      	ldreq	r3, [r1, #20]
 800d136:	600f      	str	r7, [r1, #0]
 800d138:	bf18      	it	ne
 800d13a:	2300      	movne	r3, #0
 800d13c:	eba6 0807 	sub.w	r8, r6, r7
 800d140:	608b      	str	r3, [r1, #8]
 800d142:	f1b8 0f00 	cmp.w	r8, #0
 800d146:	dd9c      	ble.n	800d082 <__sflush_r+0x1a>
 800d148:	6a21      	ldr	r1, [r4, #32]
 800d14a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d14c:	4643      	mov	r3, r8
 800d14e:	463a      	mov	r2, r7
 800d150:	4628      	mov	r0, r5
 800d152:	47b0      	blx	r6
 800d154:	2800      	cmp	r0, #0
 800d156:	dc06      	bgt.n	800d166 <__sflush_r+0xfe>
 800d158:	89a3      	ldrh	r3, [r4, #12]
 800d15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d15e:	81a3      	strh	r3, [r4, #12]
 800d160:	f04f 30ff 	mov.w	r0, #4294967295
 800d164:	e78e      	b.n	800d084 <__sflush_r+0x1c>
 800d166:	4407      	add	r7, r0
 800d168:	eba8 0800 	sub.w	r8, r8, r0
 800d16c:	e7e9      	b.n	800d142 <__sflush_r+0xda>
 800d16e:	bf00      	nop
 800d170:	20400001 	.word	0x20400001

0800d174 <_fflush_r>:
 800d174:	b538      	push	{r3, r4, r5, lr}
 800d176:	690b      	ldr	r3, [r1, #16]
 800d178:	4605      	mov	r5, r0
 800d17a:	460c      	mov	r4, r1
 800d17c:	b913      	cbnz	r3, 800d184 <_fflush_r+0x10>
 800d17e:	2500      	movs	r5, #0
 800d180:	4628      	mov	r0, r5
 800d182:	bd38      	pop	{r3, r4, r5, pc}
 800d184:	b118      	cbz	r0, 800d18e <_fflush_r+0x1a>
 800d186:	6983      	ldr	r3, [r0, #24]
 800d188:	b90b      	cbnz	r3, 800d18e <_fflush_r+0x1a>
 800d18a:	f000 f887 	bl	800d29c <__sinit>
 800d18e:	4b14      	ldr	r3, [pc, #80]	; (800d1e0 <_fflush_r+0x6c>)
 800d190:	429c      	cmp	r4, r3
 800d192:	d11b      	bne.n	800d1cc <_fflush_r+0x58>
 800d194:	686c      	ldr	r4, [r5, #4]
 800d196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d0ef      	beq.n	800d17e <_fflush_r+0xa>
 800d19e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1a0:	07d0      	lsls	r0, r2, #31
 800d1a2:	d404      	bmi.n	800d1ae <_fflush_r+0x3a>
 800d1a4:	0599      	lsls	r1, r3, #22
 800d1a6:	d402      	bmi.n	800d1ae <_fflush_r+0x3a>
 800d1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1aa:	f7ff fd1a 	bl	800cbe2 <__retarget_lock_acquire_recursive>
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	4621      	mov	r1, r4
 800d1b2:	f7ff ff59 	bl	800d068 <__sflush_r>
 800d1b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1b8:	07da      	lsls	r2, r3, #31
 800d1ba:	4605      	mov	r5, r0
 800d1bc:	d4e0      	bmi.n	800d180 <_fflush_r+0xc>
 800d1be:	89a3      	ldrh	r3, [r4, #12]
 800d1c0:	059b      	lsls	r3, r3, #22
 800d1c2:	d4dd      	bmi.n	800d180 <_fflush_r+0xc>
 800d1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1c6:	f7ff fd0d 	bl	800cbe4 <__retarget_lock_release_recursive>
 800d1ca:	e7d9      	b.n	800d180 <_fflush_r+0xc>
 800d1cc:	4b05      	ldr	r3, [pc, #20]	; (800d1e4 <_fflush_r+0x70>)
 800d1ce:	429c      	cmp	r4, r3
 800d1d0:	d101      	bne.n	800d1d6 <_fflush_r+0x62>
 800d1d2:	68ac      	ldr	r4, [r5, #8]
 800d1d4:	e7df      	b.n	800d196 <_fflush_r+0x22>
 800d1d6:	4b04      	ldr	r3, [pc, #16]	; (800d1e8 <_fflush_r+0x74>)
 800d1d8:	429c      	cmp	r4, r3
 800d1da:	bf08      	it	eq
 800d1dc:	68ec      	ldreq	r4, [r5, #12]
 800d1de:	e7da      	b.n	800d196 <_fflush_r+0x22>
 800d1e0:	080100c4 	.word	0x080100c4
 800d1e4:	080100e4 	.word	0x080100e4
 800d1e8:	080100a4 	.word	0x080100a4

0800d1ec <std>:
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	b510      	push	{r4, lr}
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	e9c0 3300 	strd	r3, r3, [r0]
 800d1f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1fa:	6083      	str	r3, [r0, #8]
 800d1fc:	8181      	strh	r1, [r0, #12]
 800d1fe:	6643      	str	r3, [r0, #100]	; 0x64
 800d200:	81c2      	strh	r2, [r0, #14]
 800d202:	6183      	str	r3, [r0, #24]
 800d204:	4619      	mov	r1, r3
 800d206:	2208      	movs	r2, #8
 800d208:	305c      	adds	r0, #92	; 0x5c
 800d20a:	f7fd fd31 	bl	800ac70 <memset>
 800d20e:	4b05      	ldr	r3, [pc, #20]	; (800d224 <std+0x38>)
 800d210:	6263      	str	r3, [r4, #36]	; 0x24
 800d212:	4b05      	ldr	r3, [pc, #20]	; (800d228 <std+0x3c>)
 800d214:	62a3      	str	r3, [r4, #40]	; 0x28
 800d216:	4b05      	ldr	r3, [pc, #20]	; (800d22c <std+0x40>)
 800d218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d21a:	4b05      	ldr	r3, [pc, #20]	; (800d230 <std+0x44>)
 800d21c:	6224      	str	r4, [r4, #32]
 800d21e:	6323      	str	r3, [r4, #48]	; 0x30
 800d220:	bd10      	pop	{r4, pc}
 800d222:	bf00      	nop
 800d224:	0800d529 	.word	0x0800d529
 800d228:	0800d54b 	.word	0x0800d54b
 800d22c:	0800d583 	.word	0x0800d583
 800d230:	0800d5a7 	.word	0x0800d5a7

0800d234 <_cleanup_r>:
 800d234:	4901      	ldr	r1, [pc, #4]	; (800d23c <_cleanup_r+0x8>)
 800d236:	f000 b8af 	b.w	800d398 <_fwalk_reent>
 800d23a:	bf00      	nop
 800d23c:	0800d175 	.word	0x0800d175

0800d240 <__sfmoreglue>:
 800d240:	b570      	push	{r4, r5, r6, lr}
 800d242:	2268      	movs	r2, #104	; 0x68
 800d244:	1e4d      	subs	r5, r1, #1
 800d246:	4355      	muls	r5, r2
 800d248:	460e      	mov	r6, r1
 800d24a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d24e:	f7fd fd83 	bl	800ad58 <_malloc_r>
 800d252:	4604      	mov	r4, r0
 800d254:	b140      	cbz	r0, 800d268 <__sfmoreglue+0x28>
 800d256:	2100      	movs	r1, #0
 800d258:	e9c0 1600 	strd	r1, r6, [r0]
 800d25c:	300c      	adds	r0, #12
 800d25e:	60a0      	str	r0, [r4, #8]
 800d260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d264:	f7fd fd04 	bl	800ac70 <memset>
 800d268:	4620      	mov	r0, r4
 800d26a:	bd70      	pop	{r4, r5, r6, pc}

0800d26c <__sfp_lock_acquire>:
 800d26c:	4801      	ldr	r0, [pc, #4]	; (800d274 <__sfp_lock_acquire+0x8>)
 800d26e:	f7ff bcb8 	b.w	800cbe2 <__retarget_lock_acquire_recursive>
 800d272:	bf00      	nop
 800d274:	200138b9 	.word	0x200138b9

0800d278 <__sfp_lock_release>:
 800d278:	4801      	ldr	r0, [pc, #4]	; (800d280 <__sfp_lock_release+0x8>)
 800d27a:	f7ff bcb3 	b.w	800cbe4 <__retarget_lock_release_recursive>
 800d27e:	bf00      	nop
 800d280:	200138b9 	.word	0x200138b9

0800d284 <__sinit_lock_acquire>:
 800d284:	4801      	ldr	r0, [pc, #4]	; (800d28c <__sinit_lock_acquire+0x8>)
 800d286:	f7ff bcac 	b.w	800cbe2 <__retarget_lock_acquire_recursive>
 800d28a:	bf00      	nop
 800d28c:	200138ba 	.word	0x200138ba

0800d290 <__sinit_lock_release>:
 800d290:	4801      	ldr	r0, [pc, #4]	; (800d298 <__sinit_lock_release+0x8>)
 800d292:	f7ff bca7 	b.w	800cbe4 <__retarget_lock_release_recursive>
 800d296:	bf00      	nop
 800d298:	200138ba 	.word	0x200138ba

0800d29c <__sinit>:
 800d29c:	b510      	push	{r4, lr}
 800d29e:	4604      	mov	r4, r0
 800d2a0:	f7ff fff0 	bl	800d284 <__sinit_lock_acquire>
 800d2a4:	69a3      	ldr	r3, [r4, #24]
 800d2a6:	b11b      	cbz	r3, 800d2b0 <__sinit+0x14>
 800d2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2ac:	f7ff bff0 	b.w	800d290 <__sinit_lock_release>
 800d2b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d2b4:	6523      	str	r3, [r4, #80]	; 0x50
 800d2b6:	4b13      	ldr	r3, [pc, #76]	; (800d304 <__sinit+0x68>)
 800d2b8:	4a13      	ldr	r2, [pc, #76]	; (800d308 <__sinit+0x6c>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800d2be:	42a3      	cmp	r3, r4
 800d2c0:	bf04      	itt	eq
 800d2c2:	2301      	moveq	r3, #1
 800d2c4:	61a3      	streq	r3, [r4, #24]
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f000 f820 	bl	800d30c <__sfp>
 800d2cc:	6060      	str	r0, [r4, #4]
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f000 f81c 	bl	800d30c <__sfp>
 800d2d4:	60a0      	str	r0, [r4, #8]
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f000 f818 	bl	800d30c <__sfp>
 800d2dc:	2200      	movs	r2, #0
 800d2de:	60e0      	str	r0, [r4, #12]
 800d2e0:	2104      	movs	r1, #4
 800d2e2:	6860      	ldr	r0, [r4, #4]
 800d2e4:	f7ff ff82 	bl	800d1ec <std>
 800d2e8:	68a0      	ldr	r0, [r4, #8]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	2109      	movs	r1, #9
 800d2ee:	f7ff ff7d 	bl	800d1ec <std>
 800d2f2:	68e0      	ldr	r0, [r4, #12]
 800d2f4:	2202      	movs	r2, #2
 800d2f6:	2112      	movs	r1, #18
 800d2f8:	f7ff ff78 	bl	800d1ec <std>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	61a3      	str	r3, [r4, #24]
 800d300:	e7d2      	b.n	800d2a8 <__sinit+0xc>
 800d302:	bf00      	nop
 800d304:	0800fd2c 	.word	0x0800fd2c
 800d308:	0800d235 	.word	0x0800d235

0800d30c <__sfp>:
 800d30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d30e:	4607      	mov	r7, r0
 800d310:	f7ff ffac 	bl	800d26c <__sfp_lock_acquire>
 800d314:	4b1e      	ldr	r3, [pc, #120]	; (800d390 <__sfp+0x84>)
 800d316:	681e      	ldr	r6, [r3, #0]
 800d318:	69b3      	ldr	r3, [r6, #24]
 800d31a:	b913      	cbnz	r3, 800d322 <__sfp+0x16>
 800d31c:	4630      	mov	r0, r6
 800d31e:	f7ff ffbd 	bl	800d29c <__sinit>
 800d322:	3648      	adds	r6, #72	; 0x48
 800d324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d328:	3b01      	subs	r3, #1
 800d32a:	d503      	bpl.n	800d334 <__sfp+0x28>
 800d32c:	6833      	ldr	r3, [r6, #0]
 800d32e:	b30b      	cbz	r3, 800d374 <__sfp+0x68>
 800d330:	6836      	ldr	r6, [r6, #0]
 800d332:	e7f7      	b.n	800d324 <__sfp+0x18>
 800d334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d338:	b9d5      	cbnz	r5, 800d370 <__sfp+0x64>
 800d33a:	4b16      	ldr	r3, [pc, #88]	; (800d394 <__sfp+0x88>)
 800d33c:	60e3      	str	r3, [r4, #12]
 800d33e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d342:	6665      	str	r5, [r4, #100]	; 0x64
 800d344:	f7ff fc4c 	bl	800cbe0 <__retarget_lock_init_recursive>
 800d348:	f7ff ff96 	bl	800d278 <__sfp_lock_release>
 800d34c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d354:	6025      	str	r5, [r4, #0]
 800d356:	61a5      	str	r5, [r4, #24]
 800d358:	2208      	movs	r2, #8
 800d35a:	4629      	mov	r1, r5
 800d35c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d360:	f7fd fc86 	bl	800ac70 <memset>
 800d364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d36c:	4620      	mov	r0, r4
 800d36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d370:	3468      	adds	r4, #104	; 0x68
 800d372:	e7d9      	b.n	800d328 <__sfp+0x1c>
 800d374:	2104      	movs	r1, #4
 800d376:	4638      	mov	r0, r7
 800d378:	f7ff ff62 	bl	800d240 <__sfmoreglue>
 800d37c:	4604      	mov	r4, r0
 800d37e:	6030      	str	r0, [r6, #0]
 800d380:	2800      	cmp	r0, #0
 800d382:	d1d5      	bne.n	800d330 <__sfp+0x24>
 800d384:	f7ff ff78 	bl	800d278 <__sfp_lock_release>
 800d388:	230c      	movs	r3, #12
 800d38a:	603b      	str	r3, [r7, #0]
 800d38c:	e7ee      	b.n	800d36c <__sfp+0x60>
 800d38e:	bf00      	nop
 800d390:	0800fd2c 	.word	0x0800fd2c
 800d394:	ffff0001 	.word	0xffff0001

0800d398 <_fwalk_reent>:
 800d398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d39c:	4606      	mov	r6, r0
 800d39e:	4688      	mov	r8, r1
 800d3a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d3a4:	2700      	movs	r7, #0
 800d3a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d3aa:	f1b9 0901 	subs.w	r9, r9, #1
 800d3ae:	d505      	bpl.n	800d3bc <_fwalk_reent+0x24>
 800d3b0:	6824      	ldr	r4, [r4, #0]
 800d3b2:	2c00      	cmp	r4, #0
 800d3b4:	d1f7      	bne.n	800d3a6 <_fwalk_reent+0xe>
 800d3b6:	4638      	mov	r0, r7
 800d3b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3bc:	89ab      	ldrh	r3, [r5, #12]
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d907      	bls.n	800d3d2 <_fwalk_reent+0x3a>
 800d3c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	d003      	beq.n	800d3d2 <_fwalk_reent+0x3a>
 800d3ca:	4629      	mov	r1, r5
 800d3cc:	4630      	mov	r0, r6
 800d3ce:	47c0      	blx	r8
 800d3d0:	4307      	orrs	r7, r0
 800d3d2:	3568      	adds	r5, #104	; 0x68
 800d3d4:	e7e9      	b.n	800d3aa <_fwalk_reent+0x12>

0800d3d6 <__swhatbuf_r>:
 800d3d6:	b570      	push	{r4, r5, r6, lr}
 800d3d8:	460e      	mov	r6, r1
 800d3da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3de:	2900      	cmp	r1, #0
 800d3e0:	b096      	sub	sp, #88	; 0x58
 800d3e2:	4614      	mov	r4, r2
 800d3e4:	461d      	mov	r5, r3
 800d3e6:	da08      	bge.n	800d3fa <__swhatbuf_r+0x24>
 800d3e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	602a      	str	r2, [r5, #0]
 800d3f0:	061a      	lsls	r2, r3, #24
 800d3f2:	d410      	bmi.n	800d416 <__swhatbuf_r+0x40>
 800d3f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3f8:	e00e      	b.n	800d418 <__swhatbuf_r+0x42>
 800d3fa:	466a      	mov	r2, sp
 800d3fc:	f000 f8fa 	bl	800d5f4 <_fstat_r>
 800d400:	2800      	cmp	r0, #0
 800d402:	dbf1      	blt.n	800d3e8 <__swhatbuf_r+0x12>
 800d404:	9a01      	ldr	r2, [sp, #4]
 800d406:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d40a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d40e:	425a      	negs	r2, r3
 800d410:	415a      	adcs	r2, r3
 800d412:	602a      	str	r2, [r5, #0]
 800d414:	e7ee      	b.n	800d3f4 <__swhatbuf_r+0x1e>
 800d416:	2340      	movs	r3, #64	; 0x40
 800d418:	2000      	movs	r0, #0
 800d41a:	6023      	str	r3, [r4, #0]
 800d41c:	b016      	add	sp, #88	; 0x58
 800d41e:	bd70      	pop	{r4, r5, r6, pc}

0800d420 <__smakebuf_r>:
 800d420:	898b      	ldrh	r3, [r1, #12]
 800d422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d424:	079d      	lsls	r5, r3, #30
 800d426:	4606      	mov	r6, r0
 800d428:	460c      	mov	r4, r1
 800d42a:	d507      	bpl.n	800d43c <__smakebuf_r+0x1c>
 800d42c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d430:	6023      	str	r3, [r4, #0]
 800d432:	6123      	str	r3, [r4, #16]
 800d434:	2301      	movs	r3, #1
 800d436:	6163      	str	r3, [r4, #20]
 800d438:	b002      	add	sp, #8
 800d43a:	bd70      	pop	{r4, r5, r6, pc}
 800d43c:	ab01      	add	r3, sp, #4
 800d43e:	466a      	mov	r2, sp
 800d440:	f7ff ffc9 	bl	800d3d6 <__swhatbuf_r>
 800d444:	9900      	ldr	r1, [sp, #0]
 800d446:	4605      	mov	r5, r0
 800d448:	4630      	mov	r0, r6
 800d44a:	f7fd fc85 	bl	800ad58 <_malloc_r>
 800d44e:	b948      	cbnz	r0, 800d464 <__smakebuf_r+0x44>
 800d450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d454:	059a      	lsls	r2, r3, #22
 800d456:	d4ef      	bmi.n	800d438 <__smakebuf_r+0x18>
 800d458:	f023 0303 	bic.w	r3, r3, #3
 800d45c:	f043 0302 	orr.w	r3, r3, #2
 800d460:	81a3      	strh	r3, [r4, #12]
 800d462:	e7e3      	b.n	800d42c <__smakebuf_r+0xc>
 800d464:	4b0d      	ldr	r3, [pc, #52]	; (800d49c <__smakebuf_r+0x7c>)
 800d466:	62b3      	str	r3, [r6, #40]	; 0x28
 800d468:	89a3      	ldrh	r3, [r4, #12]
 800d46a:	6020      	str	r0, [r4, #0]
 800d46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d470:	81a3      	strh	r3, [r4, #12]
 800d472:	9b00      	ldr	r3, [sp, #0]
 800d474:	6163      	str	r3, [r4, #20]
 800d476:	9b01      	ldr	r3, [sp, #4]
 800d478:	6120      	str	r0, [r4, #16]
 800d47a:	b15b      	cbz	r3, 800d494 <__smakebuf_r+0x74>
 800d47c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d480:	4630      	mov	r0, r6
 800d482:	f000 f8c9 	bl	800d618 <_isatty_r>
 800d486:	b128      	cbz	r0, 800d494 <__smakebuf_r+0x74>
 800d488:	89a3      	ldrh	r3, [r4, #12]
 800d48a:	f023 0303 	bic.w	r3, r3, #3
 800d48e:	f043 0301 	orr.w	r3, r3, #1
 800d492:	81a3      	strh	r3, [r4, #12]
 800d494:	89a0      	ldrh	r0, [r4, #12]
 800d496:	4305      	orrs	r5, r0
 800d498:	81a5      	strh	r5, [r4, #12]
 800d49a:	e7cd      	b.n	800d438 <__smakebuf_r+0x18>
 800d49c:	0800d235 	.word	0x0800d235

0800d4a0 <_raise_r>:
 800d4a0:	291f      	cmp	r1, #31
 800d4a2:	b538      	push	{r3, r4, r5, lr}
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	460d      	mov	r5, r1
 800d4a8:	d904      	bls.n	800d4b4 <_raise_r+0x14>
 800d4aa:	2316      	movs	r3, #22
 800d4ac:	6003      	str	r3, [r0, #0]
 800d4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b2:	bd38      	pop	{r3, r4, r5, pc}
 800d4b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d4b6:	b112      	cbz	r2, 800d4be <_raise_r+0x1e>
 800d4b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4bc:	b94b      	cbnz	r3, 800d4d2 <_raise_r+0x32>
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f000 f830 	bl	800d524 <_getpid_r>
 800d4c4:	462a      	mov	r2, r5
 800d4c6:	4601      	mov	r1, r0
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4ce:	f000 b817 	b.w	800d500 <_kill_r>
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d00a      	beq.n	800d4ec <_raise_r+0x4c>
 800d4d6:	1c59      	adds	r1, r3, #1
 800d4d8:	d103      	bne.n	800d4e2 <_raise_r+0x42>
 800d4da:	2316      	movs	r3, #22
 800d4dc:	6003      	str	r3, [r0, #0]
 800d4de:	2001      	movs	r0, #1
 800d4e0:	e7e7      	b.n	800d4b2 <_raise_r+0x12>
 800d4e2:	2400      	movs	r4, #0
 800d4e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	4798      	blx	r3
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	e7e0      	b.n	800d4b2 <_raise_r+0x12>

0800d4f0 <raise>:
 800d4f0:	4b02      	ldr	r3, [pc, #8]	; (800d4fc <raise+0xc>)
 800d4f2:	4601      	mov	r1, r0
 800d4f4:	6818      	ldr	r0, [r3, #0]
 800d4f6:	f7ff bfd3 	b.w	800d4a0 <_raise_r>
 800d4fa:	bf00      	nop
 800d4fc:	20000024 	.word	0x20000024

0800d500 <_kill_r>:
 800d500:	b538      	push	{r3, r4, r5, lr}
 800d502:	4d07      	ldr	r5, [pc, #28]	; (800d520 <_kill_r+0x20>)
 800d504:	2300      	movs	r3, #0
 800d506:	4604      	mov	r4, r0
 800d508:	4608      	mov	r0, r1
 800d50a:	4611      	mov	r1, r2
 800d50c:	602b      	str	r3, [r5, #0]
 800d50e:	f7f6 f857 	bl	80035c0 <_kill>
 800d512:	1c43      	adds	r3, r0, #1
 800d514:	d102      	bne.n	800d51c <_kill_r+0x1c>
 800d516:	682b      	ldr	r3, [r5, #0]
 800d518:	b103      	cbz	r3, 800d51c <_kill_r+0x1c>
 800d51a:	6023      	str	r3, [r4, #0]
 800d51c:	bd38      	pop	{r3, r4, r5, pc}
 800d51e:	bf00      	nop
 800d520:	200138b4 	.word	0x200138b4

0800d524 <_getpid_r>:
 800d524:	f7f6 b844 	b.w	80035b0 <_getpid>

0800d528 <__sread>:
 800d528:	b510      	push	{r4, lr}
 800d52a:	460c      	mov	r4, r1
 800d52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d530:	f000 f894 	bl	800d65c <_read_r>
 800d534:	2800      	cmp	r0, #0
 800d536:	bfab      	itete	ge
 800d538:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d53a:	89a3      	ldrhlt	r3, [r4, #12]
 800d53c:	181b      	addge	r3, r3, r0
 800d53e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d542:	bfac      	ite	ge
 800d544:	6563      	strge	r3, [r4, #84]	; 0x54
 800d546:	81a3      	strhlt	r3, [r4, #12]
 800d548:	bd10      	pop	{r4, pc}

0800d54a <__swrite>:
 800d54a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d54e:	461f      	mov	r7, r3
 800d550:	898b      	ldrh	r3, [r1, #12]
 800d552:	05db      	lsls	r3, r3, #23
 800d554:	4605      	mov	r5, r0
 800d556:	460c      	mov	r4, r1
 800d558:	4616      	mov	r6, r2
 800d55a:	d505      	bpl.n	800d568 <__swrite+0x1e>
 800d55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d560:	2302      	movs	r3, #2
 800d562:	2200      	movs	r2, #0
 800d564:	f000 f868 	bl	800d638 <_lseek_r>
 800d568:	89a3      	ldrh	r3, [r4, #12]
 800d56a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d56e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d572:	81a3      	strh	r3, [r4, #12]
 800d574:	4632      	mov	r2, r6
 800d576:	463b      	mov	r3, r7
 800d578:	4628      	mov	r0, r5
 800d57a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d57e:	f000 b817 	b.w	800d5b0 <_write_r>

0800d582 <__sseek>:
 800d582:	b510      	push	{r4, lr}
 800d584:	460c      	mov	r4, r1
 800d586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d58a:	f000 f855 	bl	800d638 <_lseek_r>
 800d58e:	1c43      	adds	r3, r0, #1
 800d590:	89a3      	ldrh	r3, [r4, #12]
 800d592:	bf15      	itete	ne
 800d594:	6560      	strne	r0, [r4, #84]	; 0x54
 800d596:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d59a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d59e:	81a3      	strheq	r3, [r4, #12]
 800d5a0:	bf18      	it	ne
 800d5a2:	81a3      	strhne	r3, [r4, #12]
 800d5a4:	bd10      	pop	{r4, pc}

0800d5a6 <__sclose>:
 800d5a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5aa:	f000 b813 	b.w	800d5d4 <_close_r>
	...

0800d5b0 <_write_r>:
 800d5b0:	b538      	push	{r3, r4, r5, lr}
 800d5b2:	4d07      	ldr	r5, [pc, #28]	; (800d5d0 <_write_r+0x20>)
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	4608      	mov	r0, r1
 800d5b8:	4611      	mov	r1, r2
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	602a      	str	r2, [r5, #0]
 800d5be:	461a      	mov	r2, r3
 800d5c0:	f7f6 f835 	bl	800362e <_write>
 800d5c4:	1c43      	adds	r3, r0, #1
 800d5c6:	d102      	bne.n	800d5ce <_write_r+0x1e>
 800d5c8:	682b      	ldr	r3, [r5, #0]
 800d5ca:	b103      	cbz	r3, 800d5ce <_write_r+0x1e>
 800d5cc:	6023      	str	r3, [r4, #0]
 800d5ce:	bd38      	pop	{r3, r4, r5, pc}
 800d5d0:	200138b4 	.word	0x200138b4

0800d5d4 <_close_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	4d06      	ldr	r5, [pc, #24]	; (800d5f0 <_close_r+0x1c>)
 800d5d8:	2300      	movs	r3, #0
 800d5da:	4604      	mov	r4, r0
 800d5dc:	4608      	mov	r0, r1
 800d5de:	602b      	str	r3, [r5, #0]
 800d5e0:	f7f6 f841 	bl	8003666 <_close>
 800d5e4:	1c43      	adds	r3, r0, #1
 800d5e6:	d102      	bne.n	800d5ee <_close_r+0x1a>
 800d5e8:	682b      	ldr	r3, [r5, #0]
 800d5ea:	b103      	cbz	r3, 800d5ee <_close_r+0x1a>
 800d5ec:	6023      	str	r3, [r4, #0]
 800d5ee:	bd38      	pop	{r3, r4, r5, pc}
 800d5f0:	200138b4 	.word	0x200138b4

0800d5f4 <_fstat_r>:
 800d5f4:	b538      	push	{r3, r4, r5, lr}
 800d5f6:	4d07      	ldr	r5, [pc, #28]	; (800d614 <_fstat_r+0x20>)
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	4608      	mov	r0, r1
 800d5fe:	4611      	mov	r1, r2
 800d600:	602b      	str	r3, [r5, #0]
 800d602:	f7f6 f83c 	bl	800367e <_fstat>
 800d606:	1c43      	adds	r3, r0, #1
 800d608:	d102      	bne.n	800d610 <_fstat_r+0x1c>
 800d60a:	682b      	ldr	r3, [r5, #0]
 800d60c:	b103      	cbz	r3, 800d610 <_fstat_r+0x1c>
 800d60e:	6023      	str	r3, [r4, #0]
 800d610:	bd38      	pop	{r3, r4, r5, pc}
 800d612:	bf00      	nop
 800d614:	200138b4 	.word	0x200138b4

0800d618 <_isatty_r>:
 800d618:	b538      	push	{r3, r4, r5, lr}
 800d61a:	4d06      	ldr	r5, [pc, #24]	; (800d634 <_isatty_r+0x1c>)
 800d61c:	2300      	movs	r3, #0
 800d61e:	4604      	mov	r4, r0
 800d620:	4608      	mov	r0, r1
 800d622:	602b      	str	r3, [r5, #0]
 800d624:	f7f6 f83b 	bl	800369e <_isatty>
 800d628:	1c43      	adds	r3, r0, #1
 800d62a:	d102      	bne.n	800d632 <_isatty_r+0x1a>
 800d62c:	682b      	ldr	r3, [r5, #0]
 800d62e:	b103      	cbz	r3, 800d632 <_isatty_r+0x1a>
 800d630:	6023      	str	r3, [r4, #0]
 800d632:	bd38      	pop	{r3, r4, r5, pc}
 800d634:	200138b4 	.word	0x200138b4

0800d638 <_lseek_r>:
 800d638:	b538      	push	{r3, r4, r5, lr}
 800d63a:	4d07      	ldr	r5, [pc, #28]	; (800d658 <_lseek_r+0x20>)
 800d63c:	4604      	mov	r4, r0
 800d63e:	4608      	mov	r0, r1
 800d640:	4611      	mov	r1, r2
 800d642:	2200      	movs	r2, #0
 800d644:	602a      	str	r2, [r5, #0]
 800d646:	461a      	mov	r2, r3
 800d648:	f7f6 f834 	bl	80036b4 <_lseek>
 800d64c:	1c43      	adds	r3, r0, #1
 800d64e:	d102      	bne.n	800d656 <_lseek_r+0x1e>
 800d650:	682b      	ldr	r3, [r5, #0]
 800d652:	b103      	cbz	r3, 800d656 <_lseek_r+0x1e>
 800d654:	6023      	str	r3, [r4, #0]
 800d656:	bd38      	pop	{r3, r4, r5, pc}
 800d658:	200138b4 	.word	0x200138b4

0800d65c <_read_r>:
 800d65c:	b538      	push	{r3, r4, r5, lr}
 800d65e:	4d07      	ldr	r5, [pc, #28]	; (800d67c <_read_r+0x20>)
 800d660:	4604      	mov	r4, r0
 800d662:	4608      	mov	r0, r1
 800d664:	4611      	mov	r1, r2
 800d666:	2200      	movs	r2, #0
 800d668:	602a      	str	r2, [r5, #0]
 800d66a:	461a      	mov	r2, r3
 800d66c:	f7f5 ffc2 	bl	80035f4 <_read>
 800d670:	1c43      	adds	r3, r0, #1
 800d672:	d102      	bne.n	800d67a <_read_r+0x1e>
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	b103      	cbz	r3, 800d67a <_read_r+0x1e>
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	bd38      	pop	{r3, r4, r5, pc}
 800d67c:	200138b4 	.word	0x200138b4

0800d680 <cos>:
 800d680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d682:	ec53 2b10 	vmov	r2, r3, d0
 800d686:	4826      	ldr	r0, [pc, #152]	; (800d720 <cos+0xa0>)
 800d688:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d68c:	4281      	cmp	r1, r0
 800d68e:	dc06      	bgt.n	800d69e <cos+0x1e>
 800d690:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d718 <cos+0x98>
 800d694:	b005      	add	sp, #20
 800d696:	f85d eb04 	ldr.w	lr, [sp], #4
 800d69a:	f001 ba41 	b.w	800eb20 <__kernel_cos>
 800d69e:	4821      	ldr	r0, [pc, #132]	; (800d724 <cos+0xa4>)
 800d6a0:	4281      	cmp	r1, r0
 800d6a2:	dd09      	ble.n	800d6b8 <cos+0x38>
 800d6a4:	ee10 0a10 	vmov	r0, s0
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	f7f2 fe05 	bl	80002b8 <__aeabi_dsub>
 800d6ae:	ec41 0b10 	vmov	d0, r0, r1
 800d6b2:	b005      	add	sp, #20
 800d6b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6b8:	4668      	mov	r0, sp
 800d6ba:	f000 ff71 	bl	800e5a0 <__ieee754_rem_pio2>
 800d6be:	f000 0003 	and.w	r0, r0, #3
 800d6c2:	2801      	cmp	r0, #1
 800d6c4:	d00b      	beq.n	800d6de <cos+0x5e>
 800d6c6:	2802      	cmp	r0, #2
 800d6c8:	d016      	beq.n	800d6f8 <cos+0x78>
 800d6ca:	b9e0      	cbnz	r0, 800d706 <cos+0x86>
 800d6cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6d0:	ed9d 0b00 	vldr	d0, [sp]
 800d6d4:	f001 fa24 	bl	800eb20 <__kernel_cos>
 800d6d8:	ec51 0b10 	vmov	r0, r1, d0
 800d6dc:	e7e7      	b.n	800d6ae <cos+0x2e>
 800d6de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6e2:	ed9d 0b00 	vldr	d0, [sp]
 800d6e6:	f001 fe33 	bl	800f350 <__kernel_sin>
 800d6ea:	ec53 2b10 	vmov	r2, r3, d0
 800d6ee:	ee10 0a10 	vmov	r0, s0
 800d6f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d6f6:	e7da      	b.n	800d6ae <cos+0x2e>
 800d6f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6fc:	ed9d 0b00 	vldr	d0, [sp]
 800d700:	f001 fa0e 	bl	800eb20 <__kernel_cos>
 800d704:	e7f1      	b.n	800d6ea <cos+0x6a>
 800d706:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d70a:	ed9d 0b00 	vldr	d0, [sp]
 800d70e:	2001      	movs	r0, #1
 800d710:	f001 fe1e 	bl	800f350 <__kernel_sin>
 800d714:	e7e0      	b.n	800d6d8 <cos+0x58>
 800d716:	bf00      	nop
	...
 800d720:	3fe921fb 	.word	0x3fe921fb
 800d724:	7fefffff 	.word	0x7fefffff

0800d728 <round>:
 800d728:	ec51 0b10 	vmov	r0, r1, d0
 800d72c:	b570      	push	{r4, r5, r6, lr}
 800d72e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d732:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d736:	2c13      	cmp	r4, #19
 800d738:	ee10 2a10 	vmov	r2, s0
 800d73c:	460b      	mov	r3, r1
 800d73e:	dc19      	bgt.n	800d774 <round+0x4c>
 800d740:	2c00      	cmp	r4, #0
 800d742:	da09      	bge.n	800d758 <round+0x30>
 800d744:	3401      	adds	r4, #1
 800d746:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d74a:	d103      	bne.n	800d754 <round+0x2c>
 800d74c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d750:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d754:	2200      	movs	r2, #0
 800d756:	e028      	b.n	800d7aa <round+0x82>
 800d758:	4d15      	ldr	r5, [pc, #84]	; (800d7b0 <round+0x88>)
 800d75a:	4125      	asrs	r5, r4
 800d75c:	ea01 0605 	and.w	r6, r1, r5
 800d760:	4332      	orrs	r2, r6
 800d762:	d00e      	beq.n	800d782 <round+0x5a>
 800d764:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d768:	fa42 f404 	asr.w	r4, r2, r4
 800d76c:	4423      	add	r3, r4
 800d76e:	ea23 0305 	bic.w	r3, r3, r5
 800d772:	e7ef      	b.n	800d754 <round+0x2c>
 800d774:	2c33      	cmp	r4, #51	; 0x33
 800d776:	dd07      	ble.n	800d788 <round+0x60>
 800d778:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d77c:	d101      	bne.n	800d782 <round+0x5a>
 800d77e:	f7f2 fd9d 	bl	80002bc <__adddf3>
 800d782:	ec41 0b10 	vmov	d0, r0, r1
 800d786:	bd70      	pop	{r4, r5, r6, pc}
 800d788:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d78c:	f04f 35ff 	mov.w	r5, #4294967295
 800d790:	40f5      	lsrs	r5, r6
 800d792:	4228      	tst	r0, r5
 800d794:	d0f5      	beq.n	800d782 <round+0x5a>
 800d796:	2101      	movs	r1, #1
 800d798:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d79c:	fa01 f404 	lsl.w	r4, r1, r4
 800d7a0:	1912      	adds	r2, r2, r4
 800d7a2:	bf28      	it	cs
 800d7a4:	185b      	addcs	r3, r3, r1
 800d7a6:	ea22 0205 	bic.w	r2, r2, r5
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	4610      	mov	r0, r2
 800d7ae:	e7e8      	b.n	800d782 <round+0x5a>
 800d7b0:	000fffff 	.word	0x000fffff
 800d7b4:	00000000 	.word	0x00000000

0800d7b8 <sin>:
 800d7b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7ba:	ec53 2b10 	vmov	r2, r3, d0
 800d7be:	4828      	ldr	r0, [pc, #160]	; (800d860 <sin+0xa8>)
 800d7c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d7c4:	4281      	cmp	r1, r0
 800d7c6:	dc07      	bgt.n	800d7d8 <sin+0x20>
 800d7c8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d858 <sin+0xa0>
 800d7cc:	2000      	movs	r0, #0
 800d7ce:	b005      	add	sp, #20
 800d7d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7d4:	f001 bdbc 	b.w	800f350 <__kernel_sin>
 800d7d8:	4822      	ldr	r0, [pc, #136]	; (800d864 <sin+0xac>)
 800d7da:	4281      	cmp	r1, r0
 800d7dc:	dd09      	ble.n	800d7f2 <sin+0x3a>
 800d7de:	ee10 0a10 	vmov	r0, s0
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	f7f2 fd68 	bl	80002b8 <__aeabi_dsub>
 800d7e8:	ec41 0b10 	vmov	d0, r0, r1
 800d7ec:	b005      	add	sp, #20
 800d7ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7f2:	4668      	mov	r0, sp
 800d7f4:	f000 fed4 	bl	800e5a0 <__ieee754_rem_pio2>
 800d7f8:	f000 0003 	and.w	r0, r0, #3
 800d7fc:	2801      	cmp	r0, #1
 800d7fe:	d00c      	beq.n	800d81a <sin+0x62>
 800d800:	2802      	cmp	r0, #2
 800d802:	d011      	beq.n	800d828 <sin+0x70>
 800d804:	b9f0      	cbnz	r0, 800d844 <sin+0x8c>
 800d806:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d80a:	ed9d 0b00 	vldr	d0, [sp]
 800d80e:	2001      	movs	r0, #1
 800d810:	f001 fd9e 	bl	800f350 <__kernel_sin>
 800d814:	ec51 0b10 	vmov	r0, r1, d0
 800d818:	e7e6      	b.n	800d7e8 <sin+0x30>
 800d81a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d81e:	ed9d 0b00 	vldr	d0, [sp]
 800d822:	f001 f97d 	bl	800eb20 <__kernel_cos>
 800d826:	e7f5      	b.n	800d814 <sin+0x5c>
 800d828:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d82c:	ed9d 0b00 	vldr	d0, [sp]
 800d830:	2001      	movs	r0, #1
 800d832:	f001 fd8d 	bl	800f350 <__kernel_sin>
 800d836:	ec53 2b10 	vmov	r2, r3, d0
 800d83a:	ee10 0a10 	vmov	r0, s0
 800d83e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d842:	e7d1      	b.n	800d7e8 <sin+0x30>
 800d844:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d848:	ed9d 0b00 	vldr	d0, [sp]
 800d84c:	f001 f968 	bl	800eb20 <__kernel_cos>
 800d850:	e7f1      	b.n	800d836 <sin+0x7e>
 800d852:	bf00      	nop
 800d854:	f3af 8000 	nop.w
	...
 800d860:	3fe921fb 	.word	0x3fe921fb
 800d864:	7fefffff 	.word	0x7fefffff

0800d868 <atan2>:
 800d868:	f000 b89e 	b.w	800d9a8 <__ieee754_atan2>

0800d86c <pow>:
 800d86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86e:	ed2d 8b02 	vpush	{d8}
 800d872:	eeb0 8a40 	vmov.f32	s16, s0
 800d876:	eef0 8a60 	vmov.f32	s17, s1
 800d87a:	ec55 4b11 	vmov	r4, r5, d1
 800d87e:	f000 f95f 	bl	800db40 <__ieee754_pow>
 800d882:	4622      	mov	r2, r4
 800d884:	462b      	mov	r3, r5
 800d886:	4620      	mov	r0, r4
 800d888:	4629      	mov	r1, r5
 800d88a:	ec57 6b10 	vmov	r6, r7, d0
 800d88e:	f7f3 f965 	bl	8000b5c <__aeabi_dcmpun>
 800d892:	2800      	cmp	r0, #0
 800d894:	d13b      	bne.n	800d90e <pow+0xa2>
 800d896:	ec51 0b18 	vmov	r0, r1, d8
 800d89a:	2200      	movs	r2, #0
 800d89c:	2300      	movs	r3, #0
 800d89e:	f7f3 f92b 	bl	8000af8 <__aeabi_dcmpeq>
 800d8a2:	b1b8      	cbz	r0, 800d8d4 <pow+0x68>
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	f7f3 f924 	bl	8000af8 <__aeabi_dcmpeq>
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	d146      	bne.n	800d942 <pow+0xd6>
 800d8b4:	ec45 4b10 	vmov	d0, r4, r5
 800d8b8:	f001 ffe3 	bl	800f882 <finite>
 800d8bc:	b338      	cbz	r0, 800d90e <pow+0xa2>
 800d8be:	2200      	movs	r2, #0
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	4629      	mov	r1, r5
 800d8c6:	f7f3 f921 	bl	8000b0c <__aeabi_dcmplt>
 800d8ca:	b300      	cbz	r0, 800d90e <pow+0xa2>
 800d8cc:	f7fd f990 	bl	800abf0 <__errno>
 800d8d0:	2322      	movs	r3, #34	; 0x22
 800d8d2:	e01b      	b.n	800d90c <pow+0xa0>
 800d8d4:	ec47 6b10 	vmov	d0, r6, r7
 800d8d8:	f001 ffd3 	bl	800f882 <finite>
 800d8dc:	b9e0      	cbnz	r0, 800d918 <pow+0xac>
 800d8de:	eeb0 0a48 	vmov.f32	s0, s16
 800d8e2:	eef0 0a68 	vmov.f32	s1, s17
 800d8e6:	f001 ffcc 	bl	800f882 <finite>
 800d8ea:	b1a8      	cbz	r0, 800d918 <pow+0xac>
 800d8ec:	ec45 4b10 	vmov	d0, r4, r5
 800d8f0:	f001 ffc7 	bl	800f882 <finite>
 800d8f4:	b180      	cbz	r0, 800d918 <pow+0xac>
 800d8f6:	4632      	mov	r2, r6
 800d8f8:	463b      	mov	r3, r7
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	4639      	mov	r1, r7
 800d8fe:	f7f3 f92d 	bl	8000b5c <__aeabi_dcmpun>
 800d902:	2800      	cmp	r0, #0
 800d904:	d0e2      	beq.n	800d8cc <pow+0x60>
 800d906:	f7fd f973 	bl	800abf0 <__errno>
 800d90a:	2321      	movs	r3, #33	; 0x21
 800d90c:	6003      	str	r3, [r0, #0]
 800d90e:	ecbd 8b02 	vpop	{d8}
 800d912:	ec47 6b10 	vmov	d0, r6, r7
 800d916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d918:	2200      	movs	r2, #0
 800d91a:	2300      	movs	r3, #0
 800d91c:	4630      	mov	r0, r6
 800d91e:	4639      	mov	r1, r7
 800d920:	f7f3 f8ea 	bl	8000af8 <__aeabi_dcmpeq>
 800d924:	2800      	cmp	r0, #0
 800d926:	d0f2      	beq.n	800d90e <pow+0xa2>
 800d928:	eeb0 0a48 	vmov.f32	s0, s16
 800d92c:	eef0 0a68 	vmov.f32	s1, s17
 800d930:	f001 ffa7 	bl	800f882 <finite>
 800d934:	2800      	cmp	r0, #0
 800d936:	d0ea      	beq.n	800d90e <pow+0xa2>
 800d938:	ec45 4b10 	vmov	d0, r4, r5
 800d93c:	f001 ffa1 	bl	800f882 <finite>
 800d940:	e7c3      	b.n	800d8ca <pow+0x5e>
 800d942:	4f01      	ldr	r7, [pc, #4]	; (800d948 <pow+0xdc>)
 800d944:	2600      	movs	r6, #0
 800d946:	e7e2      	b.n	800d90e <pow+0xa2>
 800d948:	3ff00000 	.word	0x3ff00000

0800d94c <sqrt>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	ed2d 8b02 	vpush	{d8}
 800d952:	ec55 4b10 	vmov	r4, r5, d0
 800d956:	f001 f82f 	bl	800e9b8 <__ieee754_sqrt>
 800d95a:	4622      	mov	r2, r4
 800d95c:	462b      	mov	r3, r5
 800d95e:	4620      	mov	r0, r4
 800d960:	4629      	mov	r1, r5
 800d962:	eeb0 8a40 	vmov.f32	s16, s0
 800d966:	eef0 8a60 	vmov.f32	s17, s1
 800d96a:	f7f3 f8f7 	bl	8000b5c <__aeabi_dcmpun>
 800d96e:	b990      	cbnz	r0, 800d996 <sqrt+0x4a>
 800d970:	2200      	movs	r2, #0
 800d972:	2300      	movs	r3, #0
 800d974:	4620      	mov	r0, r4
 800d976:	4629      	mov	r1, r5
 800d978:	f7f3 f8c8 	bl	8000b0c <__aeabi_dcmplt>
 800d97c:	b158      	cbz	r0, 800d996 <sqrt+0x4a>
 800d97e:	f7fd f937 	bl	800abf0 <__errno>
 800d982:	2321      	movs	r3, #33	; 0x21
 800d984:	6003      	str	r3, [r0, #0]
 800d986:	2200      	movs	r2, #0
 800d988:	2300      	movs	r3, #0
 800d98a:	4610      	mov	r0, r2
 800d98c:	4619      	mov	r1, r3
 800d98e:	f7f2 ff75 	bl	800087c <__aeabi_ddiv>
 800d992:	ec41 0b18 	vmov	d8, r0, r1
 800d996:	eeb0 0a48 	vmov.f32	s0, s16
 800d99a:	eef0 0a68 	vmov.f32	s1, s17
 800d99e:	ecbd 8b02 	vpop	{d8}
 800d9a2:	bd38      	pop	{r3, r4, r5, pc}
 800d9a4:	0000      	movs	r0, r0
	...

0800d9a8 <__ieee754_atan2>:
 800d9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9ac:	ec57 6b11 	vmov	r6, r7, d1
 800d9b0:	4273      	negs	r3, r6
 800d9b2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800db38 <__ieee754_atan2+0x190>
 800d9b6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d9ba:	4333      	orrs	r3, r6
 800d9bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d9c0:	4573      	cmp	r3, lr
 800d9c2:	ec51 0b10 	vmov	r0, r1, d0
 800d9c6:	ee11 8a10 	vmov	r8, s2
 800d9ca:	d80a      	bhi.n	800d9e2 <__ieee754_atan2+0x3a>
 800d9cc:	4244      	negs	r4, r0
 800d9ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d9d2:	4304      	orrs	r4, r0
 800d9d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d9d8:	4574      	cmp	r4, lr
 800d9da:	ee10 9a10 	vmov	r9, s0
 800d9de:	468c      	mov	ip, r1
 800d9e0:	d907      	bls.n	800d9f2 <__ieee754_atan2+0x4a>
 800d9e2:	4632      	mov	r2, r6
 800d9e4:	463b      	mov	r3, r7
 800d9e6:	f7f2 fc69 	bl	80002bc <__adddf3>
 800d9ea:	ec41 0b10 	vmov	d0, r0, r1
 800d9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d9f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d9fa:	4334      	orrs	r4, r6
 800d9fc:	d103      	bne.n	800da06 <__ieee754_atan2+0x5e>
 800d9fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da02:	f001 bd95 	b.w	800f530 <atan>
 800da06:	17bc      	asrs	r4, r7, #30
 800da08:	f004 0402 	and.w	r4, r4, #2
 800da0c:	ea53 0909 	orrs.w	r9, r3, r9
 800da10:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800da14:	d107      	bne.n	800da26 <__ieee754_atan2+0x7e>
 800da16:	2c02      	cmp	r4, #2
 800da18:	d060      	beq.n	800dadc <__ieee754_atan2+0x134>
 800da1a:	2c03      	cmp	r4, #3
 800da1c:	d1e5      	bne.n	800d9ea <__ieee754_atan2+0x42>
 800da1e:	a142      	add	r1, pc, #264	; (adr r1, 800db28 <__ieee754_atan2+0x180>)
 800da20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da24:	e7e1      	b.n	800d9ea <__ieee754_atan2+0x42>
 800da26:	ea52 0808 	orrs.w	r8, r2, r8
 800da2a:	d106      	bne.n	800da3a <__ieee754_atan2+0x92>
 800da2c:	f1bc 0f00 	cmp.w	ip, #0
 800da30:	da5f      	bge.n	800daf2 <__ieee754_atan2+0x14a>
 800da32:	a13f      	add	r1, pc, #252	; (adr r1, 800db30 <__ieee754_atan2+0x188>)
 800da34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da38:	e7d7      	b.n	800d9ea <__ieee754_atan2+0x42>
 800da3a:	4572      	cmp	r2, lr
 800da3c:	d10f      	bne.n	800da5e <__ieee754_atan2+0xb6>
 800da3e:	4293      	cmp	r3, r2
 800da40:	f104 34ff 	add.w	r4, r4, #4294967295
 800da44:	d107      	bne.n	800da56 <__ieee754_atan2+0xae>
 800da46:	2c02      	cmp	r4, #2
 800da48:	d84c      	bhi.n	800dae4 <__ieee754_atan2+0x13c>
 800da4a:	4b35      	ldr	r3, [pc, #212]	; (800db20 <__ieee754_atan2+0x178>)
 800da4c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800da50:	e9d4 0100 	ldrd	r0, r1, [r4]
 800da54:	e7c9      	b.n	800d9ea <__ieee754_atan2+0x42>
 800da56:	2c02      	cmp	r4, #2
 800da58:	d848      	bhi.n	800daec <__ieee754_atan2+0x144>
 800da5a:	4b32      	ldr	r3, [pc, #200]	; (800db24 <__ieee754_atan2+0x17c>)
 800da5c:	e7f6      	b.n	800da4c <__ieee754_atan2+0xa4>
 800da5e:	4573      	cmp	r3, lr
 800da60:	d0e4      	beq.n	800da2c <__ieee754_atan2+0x84>
 800da62:	1a9b      	subs	r3, r3, r2
 800da64:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800da68:	ea4f 5223 	mov.w	r2, r3, asr #20
 800da6c:	da1e      	bge.n	800daac <__ieee754_atan2+0x104>
 800da6e:	2f00      	cmp	r7, #0
 800da70:	da01      	bge.n	800da76 <__ieee754_atan2+0xce>
 800da72:	323c      	adds	r2, #60	; 0x3c
 800da74:	db1e      	blt.n	800dab4 <__ieee754_atan2+0x10c>
 800da76:	4632      	mov	r2, r6
 800da78:	463b      	mov	r3, r7
 800da7a:	f7f2 feff 	bl	800087c <__aeabi_ddiv>
 800da7e:	ec41 0b10 	vmov	d0, r0, r1
 800da82:	f001 fef5 	bl	800f870 <fabs>
 800da86:	f001 fd53 	bl	800f530 <atan>
 800da8a:	ec51 0b10 	vmov	r0, r1, d0
 800da8e:	2c01      	cmp	r4, #1
 800da90:	d013      	beq.n	800daba <__ieee754_atan2+0x112>
 800da92:	2c02      	cmp	r4, #2
 800da94:	d015      	beq.n	800dac2 <__ieee754_atan2+0x11a>
 800da96:	2c00      	cmp	r4, #0
 800da98:	d0a7      	beq.n	800d9ea <__ieee754_atan2+0x42>
 800da9a:	a319      	add	r3, pc, #100	; (adr r3, 800db00 <__ieee754_atan2+0x158>)
 800da9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa0:	f7f2 fc0a 	bl	80002b8 <__aeabi_dsub>
 800daa4:	a318      	add	r3, pc, #96	; (adr r3, 800db08 <__ieee754_atan2+0x160>)
 800daa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daaa:	e014      	b.n	800dad6 <__ieee754_atan2+0x12e>
 800daac:	a118      	add	r1, pc, #96	; (adr r1, 800db10 <__ieee754_atan2+0x168>)
 800daae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dab2:	e7ec      	b.n	800da8e <__ieee754_atan2+0xe6>
 800dab4:	2000      	movs	r0, #0
 800dab6:	2100      	movs	r1, #0
 800dab8:	e7e9      	b.n	800da8e <__ieee754_atan2+0xe6>
 800daba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dabe:	4619      	mov	r1, r3
 800dac0:	e793      	b.n	800d9ea <__ieee754_atan2+0x42>
 800dac2:	a30f      	add	r3, pc, #60	; (adr r3, 800db00 <__ieee754_atan2+0x158>)
 800dac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac8:	f7f2 fbf6 	bl	80002b8 <__aeabi_dsub>
 800dacc:	4602      	mov	r2, r0
 800dace:	460b      	mov	r3, r1
 800dad0:	a10d      	add	r1, pc, #52	; (adr r1, 800db08 <__ieee754_atan2+0x160>)
 800dad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dad6:	f7f2 fbef 	bl	80002b8 <__aeabi_dsub>
 800dada:	e786      	b.n	800d9ea <__ieee754_atan2+0x42>
 800dadc:	a10a      	add	r1, pc, #40	; (adr r1, 800db08 <__ieee754_atan2+0x160>)
 800dade:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dae2:	e782      	b.n	800d9ea <__ieee754_atan2+0x42>
 800dae4:	a10c      	add	r1, pc, #48	; (adr r1, 800db18 <__ieee754_atan2+0x170>)
 800dae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800daea:	e77e      	b.n	800d9ea <__ieee754_atan2+0x42>
 800daec:	2000      	movs	r0, #0
 800daee:	2100      	movs	r1, #0
 800daf0:	e77b      	b.n	800d9ea <__ieee754_atan2+0x42>
 800daf2:	a107      	add	r1, pc, #28	; (adr r1, 800db10 <__ieee754_atan2+0x168>)
 800daf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800daf8:	e777      	b.n	800d9ea <__ieee754_atan2+0x42>
 800dafa:	bf00      	nop
 800dafc:	f3af 8000 	nop.w
 800db00:	33145c07 	.word	0x33145c07
 800db04:	3ca1a626 	.word	0x3ca1a626
 800db08:	54442d18 	.word	0x54442d18
 800db0c:	400921fb 	.word	0x400921fb
 800db10:	54442d18 	.word	0x54442d18
 800db14:	3ff921fb 	.word	0x3ff921fb
 800db18:	54442d18 	.word	0x54442d18
 800db1c:	3fe921fb 	.word	0x3fe921fb
 800db20:	08010108 	.word	0x08010108
 800db24:	08010120 	.word	0x08010120
 800db28:	54442d18 	.word	0x54442d18
 800db2c:	c00921fb 	.word	0xc00921fb
 800db30:	54442d18 	.word	0x54442d18
 800db34:	bff921fb 	.word	0xbff921fb
 800db38:	7ff00000 	.word	0x7ff00000
 800db3c:	00000000 	.word	0x00000000

0800db40 <__ieee754_pow>:
 800db40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db44:	ed2d 8b06 	vpush	{d8-d10}
 800db48:	b089      	sub	sp, #36	; 0x24
 800db4a:	ed8d 1b00 	vstr	d1, [sp]
 800db4e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800db52:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800db56:	ea58 0102 	orrs.w	r1, r8, r2
 800db5a:	ec57 6b10 	vmov	r6, r7, d0
 800db5e:	d115      	bne.n	800db8c <__ieee754_pow+0x4c>
 800db60:	19b3      	adds	r3, r6, r6
 800db62:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800db66:	4152      	adcs	r2, r2
 800db68:	4299      	cmp	r1, r3
 800db6a:	4b89      	ldr	r3, [pc, #548]	; (800dd90 <__ieee754_pow+0x250>)
 800db6c:	4193      	sbcs	r3, r2
 800db6e:	f080 84d2 	bcs.w	800e516 <__ieee754_pow+0x9d6>
 800db72:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db76:	4630      	mov	r0, r6
 800db78:	4639      	mov	r1, r7
 800db7a:	f7f2 fb9f 	bl	80002bc <__adddf3>
 800db7e:	ec41 0b10 	vmov	d0, r0, r1
 800db82:	b009      	add	sp, #36	; 0x24
 800db84:	ecbd 8b06 	vpop	{d8-d10}
 800db88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db8c:	4b81      	ldr	r3, [pc, #516]	; (800dd94 <__ieee754_pow+0x254>)
 800db8e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800db92:	429c      	cmp	r4, r3
 800db94:	ee10 aa10 	vmov	sl, s0
 800db98:	463d      	mov	r5, r7
 800db9a:	dc06      	bgt.n	800dbaa <__ieee754_pow+0x6a>
 800db9c:	d101      	bne.n	800dba2 <__ieee754_pow+0x62>
 800db9e:	2e00      	cmp	r6, #0
 800dba0:	d1e7      	bne.n	800db72 <__ieee754_pow+0x32>
 800dba2:	4598      	cmp	r8, r3
 800dba4:	dc01      	bgt.n	800dbaa <__ieee754_pow+0x6a>
 800dba6:	d10f      	bne.n	800dbc8 <__ieee754_pow+0x88>
 800dba8:	b172      	cbz	r2, 800dbc8 <__ieee754_pow+0x88>
 800dbaa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800dbae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800dbb2:	ea55 050a 	orrs.w	r5, r5, sl
 800dbb6:	d1dc      	bne.n	800db72 <__ieee754_pow+0x32>
 800dbb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dbbc:	18db      	adds	r3, r3, r3
 800dbbe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800dbc2:	4152      	adcs	r2, r2
 800dbc4:	429d      	cmp	r5, r3
 800dbc6:	e7d0      	b.n	800db6a <__ieee754_pow+0x2a>
 800dbc8:	2d00      	cmp	r5, #0
 800dbca:	da3b      	bge.n	800dc44 <__ieee754_pow+0x104>
 800dbcc:	4b72      	ldr	r3, [pc, #456]	; (800dd98 <__ieee754_pow+0x258>)
 800dbce:	4598      	cmp	r8, r3
 800dbd0:	dc51      	bgt.n	800dc76 <__ieee754_pow+0x136>
 800dbd2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800dbd6:	4598      	cmp	r8, r3
 800dbd8:	f340 84ac 	ble.w	800e534 <__ieee754_pow+0x9f4>
 800dbdc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dbe0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dbe4:	2b14      	cmp	r3, #20
 800dbe6:	dd0f      	ble.n	800dc08 <__ieee754_pow+0xc8>
 800dbe8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800dbec:	fa22 f103 	lsr.w	r1, r2, r3
 800dbf0:	fa01 f303 	lsl.w	r3, r1, r3
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	f040 849d 	bne.w	800e534 <__ieee754_pow+0x9f4>
 800dbfa:	f001 0101 	and.w	r1, r1, #1
 800dbfe:	f1c1 0302 	rsb	r3, r1, #2
 800dc02:	9304      	str	r3, [sp, #16]
 800dc04:	b182      	cbz	r2, 800dc28 <__ieee754_pow+0xe8>
 800dc06:	e05f      	b.n	800dcc8 <__ieee754_pow+0x188>
 800dc08:	2a00      	cmp	r2, #0
 800dc0a:	d15b      	bne.n	800dcc4 <__ieee754_pow+0x184>
 800dc0c:	f1c3 0314 	rsb	r3, r3, #20
 800dc10:	fa48 f103 	asr.w	r1, r8, r3
 800dc14:	fa01 f303 	lsl.w	r3, r1, r3
 800dc18:	4543      	cmp	r3, r8
 800dc1a:	f040 8488 	bne.w	800e52e <__ieee754_pow+0x9ee>
 800dc1e:	f001 0101 	and.w	r1, r1, #1
 800dc22:	f1c1 0302 	rsb	r3, r1, #2
 800dc26:	9304      	str	r3, [sp, #16]
 800dc28:	4b5c      	ldr	r3, [pc, #368]	; (800dd9c <__ieee754_pow+0x25c>)
 800dc2a:	4598      	cmp	r8, r3
 800dc2c:	d132      	bne.n	800dc94 <__ieee754_pow+0x154>
 800dc2e:	f1b9 0f00 	cmp.w	r9, #0
 800dc32:	f280 8478 	bge.w	800e526 <__ieee754_pow+0x9e6>
 800dc36:	4959      	ldr	r1, [pc, #356]	; (800dd9c <__ieee754_pow+0x25c>)
 800dc38:	4632      	mov	r2, r6
 800dc3a:	463b      	mov	r3, r7
 800dc3c:	2000      	movs	r0, #0
 800dc3e:	f7f2 fe1d 	bl	800087c <__aeabi_ddiv>
 800dc42:	e79c      	b.n	800db7e <__ieee754_pow+0x3e>
 800dc44:	2300      	movs	r3, #0
 800dc46:	9304      	str	r3, [sp, #16]
 800dc48:	2a00      	cmp	r2, #0
 800dc4a:	d13d      	bne.n	800dcc8 <__ieee754_pow+0x188>
 800dc4c:	4b51      	ldr	r3, [pc, #324]	; (800dd94 <__ieee754_pow+0x254>)
 800dc4e:	4598      	cmp	r8, r3
 800dc50:	d1ea      	bne.n	800dc28 <__ieee754_pow+0xe8>
 800dc52:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800dc56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800dc5a:	ea53 030a 	orrs.w	r3, r3, sl
 800dc5e:	f000 845a 	beq.w	800e516 <__ieee754_pow+0x9d6>
 800dc62:	4b4f      	ldr	r3, [pc, #316]	; (800dda0 <__ieee754_pow+0x260>)
 800dc64:	429c      	cmp	r4, r3
 800dc66:	dd08      	ble.n	800dc7a <__ieee754_pow+0x13a>
 800dc68:	f1b9 0f00 	cmp.w	r9, #0
 800dc6c:	f2c0 8457 	blt.w	800e51e <__ieee754_pow+0x9de>
 800dc70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc74:	e783      	b.n	800db7e <__ieee754_pow+0x3e>
 800dc76:	2302      	movs	r3, #2
 800dc78:	e7e5      	b.n	800dc46 <__ieee754_pow+0x106>
 800dc7a:	f1b9 0f00 	cmp.w	r9, #0
 800dc7e:	f04f 0000 	mov.w	r0, #0
 800dc82:	f04f 0100 	mov.w	r1, #0
 800dc86:	f6bf af7a 	bge.w	800db7e <__ieee754_pow+0x3e>
 800dc8a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800dc8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dc92:	e774      	b.n	800db7e <__ieee754_pow+0x3e>
 800dc94:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800dc98:	d106      	bne.n	800dca8 <__ieee754_pow+0x168>
 800dc9a:	4632      	mov	r2, r6
 800dc9c:	463b      	mov	r3, r7
 800dc9e:	4630      	mov	r0, r6
 800dca0:	4639      	mov	r1, r7
 800dca2:	f7f2 fcc1 	bl	8000628 <__aeabi_dmul>
 800dca6:	e76a      	b.n	800db7e <__ieee754_pow+0x3e>
 800dca8:	4b3e      	ldr	r3, [pc, #248]	; (800dda4 <__ieee754_pow+0x264>)
 800dcaa:	4599      	cmp	r9, r3
 800dcac:	d10c      	bne.n	800dcc8 <__ieee754_pow+0x188>
 800dcae:	2d00      	cmp	r5, #0
 800dcb0:	db0a      	blt.n	800dcc8 <__ieee754_pow+0x188>
 800dcb2:	ec47 6b10 	vmov	d0, r6, r7
 800dcb6:	b009      	add	sp, #36	; 0x24
 800dcb8:	ecbd 8b06 	vpop	{d8-d10}
 800dcbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc0:	f000 be7a 	b.w	800e9b8 <__ieee754_sqrt>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	9304      	str	r3, [sp, #16]
 800dcc8:	ec47 6b10 	vmov	d0, r6, r7
 800dccc:	f001 fdd0 	bl	800f870 <fabs>
 800dcd0:	ec51 0b10 	vmov	r0, r1, d0
 800dcd4:	f1ba 0f00 	cmp.w	sl, #0
 800dcd8:	d129      	bne.n	800dd2e <__ieee754_pow+0x1ee>
 800dcda:	b124      	cbz	r4, 800dce6 <__ieee754_pow+0x1a6>
 800dcdc:	4b2f      	ldr	r3, [pc, #188]	; (800dd9c <__ieee754_pow+0x25c>)
 800dcde:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d123      	bne.n	800dd2e <__ieee754_pow+0x1ee>
 800dce6:	f1b9 0f00 	cmp.w	r9, #0
 800dcea:	da05      	bge.n	800dcf8 <__ieee754_pow+0x1b8>
 800dcec:	4602      	mov	r2, r0
 800dcee:	460b      	mov	r3, r1
 800dcf0:	2000      	movs	r0, #0
 800dcf2:	492a      	ldr	r1, [pc, #168]	; (800dd9c <__ieee754_pow+0x25c>)
 800dcf4:	f7f2 fdc2 	bl	800087c <__aeabi_ddiv>
 800dcf8:	2d00      	cmp	r5, #0
 800dcfa:	f6bf af40 	bge.w	800db7e <__ieee754_pow+0x3e>
 800dcfe:	9b04      	ldr	r3, [sp, #16]
 800dd00:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dd04:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dd08:	4323      	orrs	r3, r4
 800dd0a:	d108      	bne.n	800dd1e <__ieee754_pow+0x1de>
 800dd0c:	4602      	mov	r2, r0
 800dd0e:	460b      	mov	r3, r1
 800dd10:	4610      	mov	r0, r2
 800dd12:	4619      	mov	r1, r3
 800dd14:	f7f2 fad0 	bl	80002b8 <__aeabi_dsub>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	e78f      	b.n	800dc3e <__ieee754_pow+0xfe>
 800dd1e:	9b04      	ldr	r3, [sp, #16]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	f47f af2c 	bne.w	800db7e <__ieee754_pow+0x3e>
 800dd26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	e727      	b.n	800db7e <__ieee754_pow+0x3e>
 800dd2e:	0feb      	lsrs	r3, r5, #31
 800dd30:	3b01      	subs	r3, #1
 800dd32:	9306      	str	r3, [sp, #24]
 800dd34:	9a06      	ldr	r2, [sp, #24]
 800dd36:	9b04      	ldr	r3, [sp, #16]
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	d102      	bne.n	800dd42 <__ieee754_pow+0x202>
 800dd3c:	4632      	mov	r2, r6
 800dd3e:	463b      	mov	r3, r7
 800dd40:	e7e6      	b.n	800dd10 <__ieee754_pow+0x1d0>
 800dd42:	4b19      	ldr	r3, [pc, #100]	; (800dda8 <__ieee754_pow+0x268>)
 800dd44:	4598      	cmp	r8, r3
 800dd46:	f340 80fb 	ble.w	800df40 <__ieee754_pow+0x400>
 800dd4a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800dd4e:	4598      	cmp	r8, r3
 800dd50:	4b13      	ldr	r3, [pc, #76]	; (800dda0 <__ieee754_pow+0x260>)
 800dd52:	dd0c      	ble.n	800dd6e <__ieee754_pow+0x22e>
 800dd54:	429c      	cmp	r4, r3
 800dd56:	dc0f      	bgt.n	800dd78 <__ieee754_pow+0x238>
 800dd58:	f1b9 0f00 	cmp.w	r9, #0
 800dd5c:	da0f      	bge.n	800dd7e <__ieee754_pow+0x23e>
 800dd5e:	2000      	movs	r0, #0
 800dd60:	b009      	add	sp, #36	; 0x24
 800dd62:	ecbd 8b06 	vpop	{d8-d10}
 800dd66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd6a:	f001 bbd6 	b.w	800f51a <__math_oflow>
 800dd6e:	429c      	cmp	r4, r3
 800dd70:	dbf2      	blt.n	800dd58 <__ieee754_pow+0x218>
 800dd72:	4b0a      	ldr	r3, [pc, #40]	; (800dd9c <__ieee754_pow+0x25c>)
 800dd74:	429c      	cmp	r4, r3
 800dd76:	dd19      	ble.n	800ddac <__ieee754_pow+0x26c>
 800dd78:	f1b9 0f00 	cmp.w	r9, #0
 800dd7c:	dcef      	bgt.n	800dd5e <__ieee754_pow+0x21e>
 800dd7e:	2000      	movs	r0, #0
 800dd80:	b009      	add	sp, #36	; 0x24
 800dd82:	ecbd 8b06 	vpop	{d8-d10}
 800dd86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8a:	f001 bbbd 	b.w	800f508 <__math_uflow>
 800dd8e:	bf00      	nop
 800dd90:	fff00000 	.word	0xfff00000
 800dd94:	7ff00000 	.word	0x7ff00000
 800dd98:	433fffff 	.word	0x433fffff
 800dd9c:	3ff00000 	.word	0x3ff00000
 800dda0:	3fefffff 	.word	0x3fefffff
 800dda4:	3fe00000 	.word	0x3fe00000
 800dda8:	41e00000 	.word	0x41e00000
 800ddac:	4b60      	ldr	r3, [pc, #384]	; (800df30 <__ieee754_pow+0x3f0>)
 800ddae:	2200      	movs	r2, #0
 800ddb0:	f7f2 fa82 	bl	80002b8 <__aeabi_dsub>
 800ddb4:	a354      	add	r3, pc, #336	; (adr r3, 800df08 <__ieee754_pow+0x3c8>)
 800ddb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddba:	4604      	mov	r4, r0
 800ddbc:	460d      	mov	r5, r1
 800ddbe:	f7f2 fc33 	bl	8000628 <__aeabi_dmul>
 800ddc2:	a353      	add	r3, pc, #332	; (adr r3, 800df10 <__ieee754_pow+0x3d0>)
 800ddc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc8:	4606      	mov	r6, r0
 800ddca:	460f      	mov	r7, r1
 800ddcc:	4620      	mov	r0, r4
 800ddce:	4629      	mov	r1, r5
 800ddd0:	f7f2 fc2a 	bl	8000628 <__aeabi_dmul>
 800ddd4:	4b57      	ldr	r3, [pc, #348]	; (800df34 <__ieee754_pow+0x3f4>)
 800ddd6:	4682      	mov	sl, r0
 800ddd8:	468b      	mov	fp, r1
 800ddda:	2200      	movs	r2, #0
 800dddc:	4620      	mov	r0, r4
 800ddde:	4629      	mov	r1, r5
 800dde0:	f7f2 fc22 	bl	8000628 <__aeabi_dmul>
 800dde4:	4602      	mov	r2, r0
 800dde6:	460b      	mov	r3, r1
 800dde8:	a14b      	add	r1, pc, #300	; (adr r1, 800df18 <__ieee754_pow+0x3d8>)
 800ddea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddee:	f7f2 fa63 	bl	80002b8 <__aeabi_dsub>
 800ddf2:	4622      	mov	r2, r4
 800ddf4:	462b      	mov	r3, r5
 800ddf6:	f7f2 fc17 	bl	8000628 <__aeabi_dmul>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	2000      	movs	r0, #0
 800de00:	494d      	ldr	r1, [pc, #308]	; (800df38 <__ieee754_pow+0x3f8>)
 800de02:	f7f2 fa59 	bl	80002b8 <__aeabi_dsub>
 800de06:	4622      	mov	r2, r4
 800de08:	4680      	mov	r8, r0
 800de0a:	4689      	mov	r9, r1
 800de0c:	462b      	mov	r3, r5
 800de0e:	4620      	mov	r0, r4
 800de10:	4629      	mov	r1, r5
 800de12:	f7f2 fc09 	bl	8000628 <__aeabi_dmul>
 800de16:	4602      	mov	r2, r0
 800de18:	460b      	mov	r3, r1
 800de1a:	4640      	mov	r0, r8
 800de1c:	4649      	mov	r1, r9
 800de1e:	f7f2 fc03 	bl	8000628 <__aeabi_dmul>
 800de22:	a33f      	add	r3, pc, #252	; (adr r3, 800df20 <__ieee754_pow+0x3e0>)
 800de24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de28:	f7f2 fbfe 	bl	8000628 <__aeabi_dmul>
 800de2c:	4602      	mov	r2, r0
 800de2e:	460b      	mov	r3, r1
 800de30:	4650      	mov	r0, sl
 800de32:	4659      	mov	r1, fp
 800de34:	f7f2 fa40 	bl	80002b8 <__aeabi_dsub>
 800de38:	4602      	mov	r2, r0
 800de3a:	460b      	mov	r3, r1
 800de3c:	4680      	mov	r8, r0
 800de3e:	4689      	mov	r9, r1
 800de40:	4630      	mov	r0, r6
 800de42:	4639      	mov	r1, r7
 800de44:	f7f2 fa3a 	bl	80002bc <__adddf3>
 800de48:	2000      	movs	r0, #0
 800de4a:	4632      	mov	r2, r6
 800de4c:	463b      	mov	r3, r7
 800de4e:	4604      	mov	r4, r0
 800de50:	460d      	mov	r5, r1
 800de52:	f7f2 fa31 	bl	80002b8 <__aeabi_dsub>
 800de56:	4602      	mov	r2, r0
 800de58:	460b      	mov	r3, r1
 800de5a:	4640      	mov	r0, r8
 800de5c:	4649      	mov	r1, r9
 800de5e:	f7f2 fa2b 	bl	80002b8 <__aeabi_dsub>
 800de62:	9b04      	ldr	r3, [sp, #16]
 800de64:	9a06      	ldr	r2, [sp, #24]
 800de66:	3b01      	subs	r3, #1
 800de68:	4313      	orrs	r3, r2
 800de6a:	4682      	mov	sl, r0
 800de6c:	468b      	mov	fp, r1
 800de6e:	f040 81e7 	bne.w	800e240 <__ieee754_pow+0x700>
 800de72:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800df28 <__ieee754_pow+0x3e8>
 800de76:	eeb0 8a47 	vmov.f32	s16, s14
 800de7a:	eef0 8a67 	vmov.f32	s17, s15
 800de7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800de82:	2600      	movs	r6, #0
 800de84:	4632      	mov	r2, r6
 800de86:	463b      	mov	r3, r7
 800de88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de8c:	f7f2 fa14 	bl	80002b8 <__aeabi_dsub>
 800de90:	4622      	mov	r2, r4
 800de92:	462b      	mov	r3, r5
 800de94:	f7f2 fbc8 	bl	8000628 <__aeabi_dmul>
 800de98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de9c:	4680      	mov	r8, r0
 800de9e:	4689      	mov	r9, r1
 800dea0:	4650      	mov	r0, sl
 800dea2:	4659      	mov	r1, fp
 800dea4:	f7f2 fbc0 	bl	8000628 <__aeabi_dmul>
 800dea8:	4602      	mov	r2, r0
 800deaa:	460b      	mov	r3, r1
 800deac:	4640      	mov	r0, r8
 800deae:	4649      	mov	r1, r9
 800deb0:	f7f2 fa04 	bl	80002bc <__adddf3>
 800deb4:	4632      	mov	r2, r6
 800deb6:	463b      	mov	r3, r7
 800deb8:	4680      	mov	r8, r0
 800deba:	4689      	mov	r9, r1
 800debc:	4620      	mov	r0, r4
 800debe:	4629      	mov	r1, r5
 800dec0:	f7f2 fbb2 	bl	8000628 <__aeabi_dmul>
 800dec4:	460b      	mov	r3, r1
 800dec6:	4604      	mov	r4, r0
 800dec8:	460d      	mov	r5, r1
 800deca:	4602      	mov	r2, r0
 800decc:	4649      	mov	r1, r9
 800dece:	4640      	mov	r0, r8
 800ded0:	f7f2 f9f4 	bl	80002bc <__adddf3>
 800ded4:	4b19      	ldr	r3, [pc, #100]	; (800df3c <__ieee754_pow+0x3fc>)
 800ded6:	4299      	cmp	r1, r3
 800ded8:	ec45 4b19 	vmov	d9, r4, r5
 800dedc:	4606      	mov	r6, r0
 800dede:	460f      	mov	r7, r1
 800dee0:	468b      	mov	fp, r1
 800dee2:	f340 82f1 	ble.w	800e4c8 <__ieee754_pow+0x988>
 800dee6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800deea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800deee:	4303      	orrs	r3, r0
 800def0:	f000 81e4 	beq.w	800e2bc <__ieee754_pow+0x77c>
 800def4:	ec51 0b18 	vmov	r0, r1, d8
 800def8:	2200      	movs	r2, #0
 800defa:	2300      	movs	r3, #0
 800defc:	f7f2 fe06 	bl	8000b0c <__aeabi_dcmplt>
 800df00:	3800      	subs	r0, #0
 800df02:	bf18      	it	ne
 800df04:	2001      	movne	r0, #1
 800df06:	e72b      	b.n	800dd60 <__ieee754_pow+0x220>
 800df08:	60000000 	.word	0x60000000
 800df0c:	3ff71547 	.word	0x3ff71547
 800df10:	f85ddf44 	.word	0xf85ddf44
 800df14:	3e54ae0b 	.word	0x3e54ae0b
 800df18:	55555555 	.word	0x55555555
 800df1c:	3fd55555 	.word	0x3fd55555
 800df20:	652b82fe 	.word	0x652b82fe
 800df24:	3ff71547 	.word	0x3ff71547
 800df28:	00000000 	.word	0x00000000
 800df2c:	bff00000 	.word	0xbff00000
 800df30:	3ff00000 	.word	0x3ff00000
 800df34:	3fd00000 	.word	0x3fd00000
 800df38:	3fe00000 	.word	0x3fe00000
 800df3c:	408fffff 	.word	0x408fffff
 800df40:	4bd5      	ldr	r3, [pc, #852]	; (800e298 <__ieee754_pow+0x758>)
 800df42:	402b      	ands	r3, r5
 800df44:	2200      	movs	r2, #0
 800df46:	b92b      	cbnz	r3, 800df54 <__ieee754_pow+0x414>
 800df48:	4bd4      	ldr	r3, [pc, #848]	; (800e29c <__ieee754_pow+0x75c>)
 800df4a:	f7f2 fb6d 	bl	8000628 <__aeabi_dmul>
 800df4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800df52:	460c      	mov	r4, r1
 800df54:	1523      	asrs	r3, r4, #20
 800df56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800df5a:	4413      	add	r3, r2
 800df5c:	9305      	str	r3, [sp, #20]
 800df5e:	4bd0      	ldr	r3, [pc, #832]	; (800e2a0 <__ieee754_pow+0x760>)
 800df60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800df64:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800df68:	429c      	cmp	r4, r3
 800df6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800df6e:	dd08      	ble.n	800df82 <__ieee754_pow+0x442>
 800df70:	4bcc      	ldr	r3, [pc, #816]	; (800e2a4 <__ieee754_pow+0x764>)
 800df72:	429c      	cmp	r4, r3
 800df74:	f340 8162 	ble.w	800e23c <__ieee754_pow+0x6fc>
 800df78:	9b05      	ldr	r3, [sp, #20]
 800df7a:	3301      	adds	r3, #1
 800df7c:	9305      	str	r3, [sp, #20]
 800df7e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800df82:	2400      	movs	r4, #0
 800df84:	00e3      	lsls	r3, r4, #3
 800df86:	9307      	str	r3, [sp, #28]
 800df88:	4bc7      	ldr	r3, [pc, #796]	; (800e2a8 <__ieee754_pow+0x768>)
 800df8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800df8e:	ed93 7b00 	vldr	d7, [r3]
 800df92:	4629      	mov	r1, r5
 800df94:	ec53 2b17 	vmov	r2, r3, d7
 800df98:	eeb0 9a47 	vmov.f32	s18, s14
 800df9c:	eef0 9a67 	vmov.f32	s19, s15
 800dfa0:	4682      	mov	sl, r0
 800dfa2:	f7f2 f989 	bl	80002b8 <__aeabi_dsub>
 800dfa6:	4652      	mov	r2, sl
 800dfa8:	4606      	mov	r6, r0
 800dfaa:	460f      	mov	r7, r1
 800dfac:	462b      	mov	r3, r5
 800dfae:	ec51 0b19 	vmov	r0, r1, d9
 800dfb2:	f7f2 f983 	bl	80002bc <__adddf3>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	460b      	mov	r3, r1
 800dfba:	2000      	movs	r0, #0
 800dfbc:	49bb      	ldr	r1, [pc, #748]	; (800e2ac <__ieee754_pow+0x76c>)
 800dfbe:	f7f2 fc5d 	bl	800087c <__aeabi_ddiv>
 800dfc2:	ec41 0b1a 	vmov	d10, r0, r1
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	460b      	mov	r3, r1
 800dfca:	4630      	mov	r0, r6
 800dfcc:	4639      	mov	r1, r7
 800dfce:	f7f2 fb2b 	bl	8000628 <__aeabi_dmul>
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfd8:	9302      	str	r3, [sp, #8]
 800dfda:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dfde:	46ab      	mov	fp, r5
 800dfe0:	106d      	asrs	r5, r5, #1
 800dfe2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800dfe6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800dfea:	ec41 0b18 	vmov	d8, r0, r1
 800dfee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800dff2:	2200      	movs	r2, #0
 800dff4:	4640      	mov	r0, r8
 800dff6:	4649      	mov	r1, r9
 800dff8:	4614      	mov	r4, r2
 800dffa:	461d      	mov	r5, r3
 800dffc:	f7f2 fb14 	bl	8000628 <__aeabi_dmul>
 800e000:	4602      	mov	r2, r0
 800e002:	460b      	mov	r3, r1
 800e004:	4630      	mov	r0, r6
 800e006:	4639      	mov	r1, r7
 800e008:	f7f2 f956 	bl	80002b8 <__aeabi_dsub>
 800e00c:	ec53 2b19 	vmov	r2, r3, d9
 800e010:	4606      	mov	r6, r0
 800e012:	460f      	mov	r7, r1
 800e014:	4620      	mov	r0, r4
 800e016:	4629      	mov	r1, r5
 800e018:	f7f2 f94e 	bl	80002b8 <__aeabi_dsub>
 800e01c:	4602      	mov	r2, r0
 800e01e:	460b      	mov	r3, r1
 800e020:	4650      	mov	r0, sl
 800e022:	4659      	mov	r1, fp
 800e024:	f7f2 f948 	bl	80002b8 <__aeabi_dsub>
 800e028:	4642      	mov	r2, r8
 800e02a:	464b      	mov	r3, r9
 800e02c:	f7f2 fafc 	bl	8000628 <__aeabi_dmul>
 800e030:	4602      	mov	r2, r0
 800e032:	460b      	mov	r3, r1
 800e034:	4630      	mov	r0, r6
 800e036:	4639      	mov	r1, r7
 800e038:	f7f2 f93e 	bl	80002b8 <__aeabi_dsub>
 800e03c:	ec53 2b1a 	vmov	r2, r3, d10
 800e040:	f7f2 faf2 	bl	8000628 <__aeabi_dmul>
 800e044:	ec53 2b18 	vmov	r2, r3, d8
 800e048:	ec41 0b19 	vmov	d9, r0, r1
 800e04c:	ec51 0b18 	vmov	r0, r1, d8
 800e050:	f7f2 faea 	bl	8000628 <__aeabi_dmul>
 800e054:	a37c      	add	r3, pc, #496	; (adr r3, 800e248 <__ieee754_pow+0x708>)
 800e056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05a:	4604      	mov	r4, r0
 800e05c:	460d      	mov	r5, r1
 800e05e:	f7f2 fae3 	bl	8000628 <__aeabi_dmul>
 800e062:	a37b      	add	r3, pc, #492	; (adr r3, 800e250 <__ieee754_pow+0x710>)
 800e064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e068:	f7f2 f928 	bl	80002bc <__adddf3>
 800e06c:	4622      	mov	r2, r4
 800e06e:	462b      	mov	r3, r5
 800e070:	f7f2 fada 	bl	8000628 <__aeabi_dmul>
 800e074:	a378      	add	r3, pc, #480	; (adr r3, 800e258 <__ieee754_pow+0x718>)
 800e076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07a:	f7f2 f91f 	bl	80002bc <__adddf3>
 800e07e:	4622      	mov	r2, r4
 800e080:	462b      	mov	r3, r5
 800e082:	f7f2 fad1 	bl	8000628 <__aeabi_dmul>
 800e086:	a376      	add	r3, pc, #472	; (adr r3, 800e260 <__ieee754_pow+0x720>)
 800e088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08c:	f7f2 f916 	bl	80002bc <__adddf3>
 800e090:	4622      	mov	r2, r4
 800e092:	462b      	mov	r3, r5
 800e094:	f7f2 fac8 	bl	8000628 <__aeabi_dmul>
 800e098:	a373      	add	r3, pc, #460	; (adr r3, 800e268 <__ieee754_pow+0x728>)
 800e09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09e:	f7f2 f90d 	bl	80002bc <__adddf3>
 800e0a2:	4622      	mov	r2, r4
 800e0a4:	462b      	mov	r3, r5
 800e0a6:	f7f2 fabf 	bl	8000628 <__aeabi_dmul>
 800e0aa:	a371      	add	r3, pc, #452	; (adr r3, 800e270 <__ieee754_pow+0x730>)
 800e0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b0:	f7f2 f904 	bl	80002bc <__adddf3>
 800e0b4:	4622      	mov	r2, r4
 800e0b6:	4606      	mov	r6, r0
 800e0b8:	460f      	mov	r7, r1
 800e0ba:	462b      	mov	r3, r5
 800e0bc:	4620      	mov	r0, r4
 800e0be:	4629      	mov	r1, r5
 800e0c0:	f7f2 fab2 	bl	8000628 <__aeabi_dmul>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	4630      	mov	r0, r6
 800e0ca:	4639      	mov	r1, r7
 800e0cc:	f7f2 faac 	bl	8000628 <__aeabi_dmul>
 800e0d0:	4642      	mov	r2, r8
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	460d      	mov	r5, r1
 800e0d6:	464b      	mov	r3, r9
 800e0d8:	ec51 0b18 	vmov	r0, r1, d8
 800e0dc:	f7f2 f8ee 	bl	80002bc <__adddf3>
 800e0e0:	ec53 2b19 	vmov	r2, r3, d9
 800e0e4:	f7f2 faa0 	bl	8000628 <__aeabi_dmul>
 800e0e8:	4622      	mov	r2, r4
 800e0ea:	462b      	mov	r3, r5
 800e0ec:	f7f2 f8e6 	bl	80002bc <__adddf3>
 800e0f0:	4642      	mov	r2, r8
 800e0f2:	4682      	mov	sl, r0
 800e0f4:	468b      	mov	fp, r1
 800e0f6:	464b      	mov	r3, r9
 800e0f8:	4640      	mov	r0, r8
 800e0fa:	4649      	mov	r1, r9
 800e0fc:	f7f2 fa94 	bl	8000628 <__aeabi_dmul>
 800e100:	4b6b      	ldr	r3, [pc, #428]	; (800e2b0 <__ieee754_pow+0x770>)
 800e102:	2200      	movs	r2, #0
 800e104:	4606      	mov	r6, r0
 800e106:	460f      	mov	r7, r1
 800e108:	f7f2 f8d8 	bl	80002bc <__adddf3>
 800e10c:	4652      	mov	r2, sl
 800e10e:	465b      	mov	r3, fp
 800e110:	f7f2 f8d4 	bl	80002bc <__adddf3>
 800e114:	2000      	movs	r0, #0
 800e116:	4604      	mov	r4, r0
 800e118:	460d      	mov	r5, r1
 800e11a:	4602      	mov	r2, r0
 800e11c:	460b      	mov	r3, r1
 800e11e:	4640      	mov	r0, r8
 800e120:	4649      	mov	r1, r9
 800e122:	f7f2 fa81 	bl	8000628 <__aeabi_dmul>
 800e126:	4b62      	ldr	r3, [pc, #392]	; (800e2b0 <__ieee754_pow+0x770>)
 800e128:	4680      	mov	r8, r0
 800e12a:	4689      	mov	r9, r1
 800e12c:	2200      	movs	r2, #0
 800e12e:	4620      	mov	r0, r4
 800e130:	4629      	mov	r1, r5
 800e132:	f7f2 f8c1 	bl	80002b8 <__aeabi_dsub>
 800e136:	4632      	mov	r2, r6
 800e138:	463b      	mov	r3, r7
 800e13a:	f7f2 f8bd 	bl	80002b8 <__aeabi_dsub>
 800e13e:	4602      	mov	r2, r0
 800e140:	460b      	mov	r3, r1
 800e142:	4650      	mov	r0, sl
 800e144:	4659      	mov	r1, fp
 800e146:	f7f2 f8b7 	bl	80002b8 <__aeabi_dsub>
 800e14a:	ec53 2b18 	vmov	r2, r3, d8
 800e14e:	f7f2 fa6b 	bl	8000628 <__aeabi_dmul>
 800e152:	4622      	mov	r2, r4
 800e154:	4606      	mov	r6, r0
 800e156:	460f      	mov	r7, r1
 800e158:	462b      	mov	r3, r5
 800e15a:	ec51 0b19 	vmov	r0, r1, d9
 800e15e:	f7f2 fa63 	bl	8000628 <__aeabi_dmul>
 800e162:	4602      	mov	r2, r0
 800e164:	460b      	mov	r3, r1
 800e166:	4630      	mov	r0, r6
 800e168:	4639      	mov	r1, r7
 800e16a:	f7f2 f8a7 	bl	80002bc <__adddf3>
 800e16e:	4606      	mov	r6, r0
 800e170:	460f      	mov	r7, r1
 800e172:	4602      	mov	r2, r0
 800e174:	460b      	mov	r3, r1
 800e176:	4640      	mov	r0, r8
 800e178:	4649      	mov	r1, r9
 800e17a:	f7f2 f89f 	bl	80002bc <__adddf3>
 800e17e:	a33e      	add	r3, pc, #248	; (adr r3, 800e278 <__ieee754_pow+0x738>)
 800e180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e184:	2000      	movs	r0, #0
 800e186:	4604      	mov	r4, r0
 800e188:	460d      	mov	r5, r1
 800e18a:	f7f2 fa4d 	bl	8000628 <__aeabi_dmul>
 800e18e:	4642      	mov	r2, r8
 800e190:	ec41 0b18 	vmov	d8, r0, r1
 800e194:	464b      	mov	r3, r9
 800e196:	4620      	mov	r0, r4
 800e198:	4629      	mov	r1, r5
 800e19a:	f7f2 f88d 	bl	80002b8 <__aeabi_dsub>
 800e19e:	4602      	mov	r2, r0
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	4639      	mov	r1, r7
 800e1a6:	f7f2 f887 	bl	80002b8 <__aeabi_dsub>
 800e1aa:	a335      	add	r3, pc, #212	; (adr r3, 800e280 <__ieee754_pow+0x740>)
 800e1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b0:	f7f2 fa3a 	bl	8000628 <__aeabi_dmul>
 800e1b4:	a334      	add	r3, pc, #208	; (adr r3, 800e288 <__ieee754_pow+0x748>)
 800e1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ba:	4606      	mov	r6, r0
 800e1bc:	460f      	mov	r7, r1
 800e1be:	4620      	mov	r0, r4
 800e1c0:	4629      	mov	r1, r5
 800e1c2:	f7f2 fa31 	bl	8000628 <__aeabi_dmul>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	4639      	mov	r1, r7
 800e1ce:	f7f2 f875 	bl	80002bc <__adddf3>
 800e1d2:	9a07      	ldr	r2, [sp, #28]
 800e1d4:	4b37      	ldr	r3, [pc, #220]	; (800e2b4 <__ieee754_pow+0x774>)
 800e1d6:	4413      	add	r3, r2
 800e1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1dc:	f7f2 f86e 	bl	80002bc <__adddf3>
 800e1e0:	4682      	mov	sl, r0
 800e1e2:	9805      	ldr	r0, [sp, #20]
 800e1e4:	468b      	mov	fp, r1
 800e1e6:	f7f2 f9b5 	bl	8000554 <__aeabi_i2d>
 800e1ea:	9a07      	ldr	r2, [sp, #28]
 800e1ec:	4b32      	ldr	r3, [pc, #200]	; (800e2b8 <__ieee754_pow+0x778>)
 800e1ee:	4413      	add	r3, r2
 800e1f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e1f4:	4606      	mov	r6, r0
 800e1f6:	460f      	mov	r7, r1
 800e1f8:	4652      	mov	r2, sl
 800e1fa:	465b      	mov	r3, fp
 800e1fc:	ec51 0b18 	vmov	r0, r1, d8
 800e200:	f7f2 f85c 	bl	80002bc <__adddf3>
 800e204:	4642      	mov	r2, r8
 800e206:	464b      	mov	r3, r9
 800e208:	f7f2 f858 	bl	80002bc <__adddf3>
 800e20c:	4632      	mov	r2, r6
 800e20e:	463b      	mov	r3, r7
 800e210:	f7f2 f854 	bl	80002bc <__adddf3>
 800e214:	2000      	movs	r0, #0
 800e216:	4632      	mov	r2, r6
 800e218:	463b      	mov	r3, r7
 800e21a:	4604      	mov	r4, r0
 800e21c:	460d      	mov	r5, r1
 800e21e:	f7f2 f84b 	bl	80002b8 <__aeabi_dsub>
 800e222:	4642      	mov	r2, r8
 800e224:	464b      	mov	r3, r9
 800e226:	f7f2 f847 	bl	80002b8 <__aeabi_dsub>
 800e22a:	ec53 2b18 	vmov	r2, r3, d8
 800e22e:	f7f2 f843 	bl	80002b8 <__aeabi_dsub>
 800e232:	4602      	mov	r2, r0
 800e234:	460b      	mov	r3, r1
 800e236:	4650      	mov	r0, sl
 800e238:	4659      	mov	r1, fp
 800e23a:	e610      	b.n	800de5e <__ieee754_pow+0x31e>
 800e23c:	2401      	movs	r4, #1
 800e23e:	e6a1      	b.n	800df84 <__ieee754_pow+0x444>
 800e240:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e290 <__ieee754_pow+0x750>
 800e244:	e617      	b.n	800de76 <__ieee754_pow+0x336>
 800e246:	bf00      	nop
 800e248:	4a454eef 	.word	0x4a454eef
 800e24c:	3fca7e28 	.word	0x3fca7e28
 800e250:	93c9db65 	.word	0x93c9db65
 800e254:	3fcd864a 	.word	0x3fcd864a
 800e258:	a91d4101 	.word	0xa91d4101
 800e25c:	3fd17460 	.word	0x3fd17460
 800e260:	518f264d 	.word	0x518f264d
 800e264:	3fd55555 	.word	0x3fd55555
 800e268:	db6fabff 	.word	0xdb6fabff
 800e26c:	3fdb6db6 	.word	0x3fdb6db6
 800e270:	33333303 	.word	0x33333303
 800e274:	3fe33333 	.word	0x3fe33333
 800e278:	e0000000 	.word	0xe0000000
 800e27c:	3feec709 	.word	0x3feec709
 800e280:	dc3a03fd 	.word	0xdc3a03fd
 800e284:	3feec709 	.word	0x3feec709
 800e288:	145b01f5 	.word	0x145b01f5
 800e28c:	be3e2fe0 	.word	0xbe3e2fe0
 800e290:	00000000 	.word	0x00000000
 800e294:	3ff00000 	.word	0x3ff00000
 800e298:	7ff00000 	.word	0x7ff00000
 800e29c:	43400000 	.word	0x43400000
 800e2a0:	0003988e 	.word	0x0003988e
 800e2a4:	000bb679 	.word	0x000bb679
 800e2a8:	08010138 	.word	0x08010138
 800e2ac:	3ff00000 	.word	0x3ff00000
 800e2b0:	40080000 	.word	0x40080000
 800e2b4:	08010158 	.word	0x08010158
 800e2b8:	08010148 	.word	0x08010148
 800e2bc:	a3b5      	add	r3, pc, #724	; (adr r3, 800e594 <__ieee754_pow+0xa54>)
 800e2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c2:	4640      	mov	r0, r8
 800e2c4:	4649      	mov	r1, r9
 800e2c6:	f7f1 fff9 	bl	80002bc <__adddf3>
 800e2ca:	4622      	mov	r2, r4
 800e2cc:	ec41 0b1a 	vmov	d10, r0, r1
 800e2d0:	462b      	mov	r3, r5
 800e2d2:	4630      	mov	r0, r6
 800e2d4:	4639      	mov	r1, r7
 800e2d6:	f7f1 ffef 	bl	80002b8 <__aeabi_dsub>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	460b      	mov	r3, r1
 800e2de:	ec51 0b1a 	vmov	r0, r1, d10
 800e2e2:	f7f2 fc31 	bl	8000b48 <__aeabi_dcmpgt>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	f47f ae04 	bne.w	800def4 <__ieee754_pow+0x3b4>
 800e2ec:	4aa4      	ldr	r2, [pc, #656]	; (800e580 <__ieee754_pow+0xa40>)
 800e2ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	f340 8108 	ble.w	800e508 <__ieee754_pow+0x9c8>
 800e2f8:	151b      	asrs	r3, r3, #20
 800e2fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e2fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e302:	fa4a f303 	asr.w	r3, sl, r3
 800e306:	445b      	add	r3, fp
 800e308:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e30c:	4e9d      	ldr	r6, [pc, #628]	; (800e584 <__ieee754_pow+0xa44>)
 800e30e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e312:	4116      	asrs	r6, r2
 800e314:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e318:	2000      	movs	r0, #0
 800e31a:	ea23 0106 	bic.w	r1, r3, r6
 800e31e:	f1c2 0214 	rsb	r2, r2, #20
 800e322:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e326:	fa4a fa02 	asr.w	sl, sl, r2
 800e32a:	f1bb 0f00 	cmp.w	fp, #0
 800e32e:	4602      	mov	r2, r0
 800e330:	460b      	mov	r3, r1
 800e332:	4620      	mov	r0, r4
 800e334:	4629      	mov	r1, r5
 800e336:	bfb8      	it	lt
 800e338:	f1ca 0a00 	rsblt	sl, sl, #0
 800e33c:	f7f1 ffbc 	bl	80002b8 <__aeabi_dsub>
 800e340:	ec41 0b19 	vmov	d9, r0, r1
 800e344:	4642      	mov	r2, r8
 800e346:	464b      	mov	r3, r9
 800e348:	ec51 0b19 	vmov	r0, r1, d9
 800e34c:	f7f1 ffb6 	bl	80002bc <__adddf3>
 800e350:	a37b      	add	r3, pc, #492	; (adr r3, 800e540 <__ieee754_pow+0xa00>)
 800e352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e356:	2000      	movs	r0, #0
 800e358:	4604      	mov	r4, r0
 800e35a:	460d      	mov	r5, r1
 800e35c:	f7f2 f964 	bl	8000628 <__aeabi_dmul>
 800e360:	ec53 2b19 	vmov	r2, r3, d9
 800e364:	4606      	mov	r6, r0
 800e366:	460f      	mov	r7, r1
 800e368:	4620      	mov	r0, r4
 800e36a:	4629      	mov	r1, r5
 800e36c:	f7f1 ffa4 	bl	80002b8 <__aeabi_dsub>
 800e370:	4602      	mov	r2, r0
 800e372:	460b      	mov	r3, r1
 800e374:	4640      	mov	r0, r8
 800e376:	4649      	mov	r1, r9
 800e378:	f7f1 ff9e 	bl	80002b8 <__aeabi_dsub>
 800e37c:	a372      	add	r3, pc, #456	; (adr r3, 800e548 <__ieee754_pow+0xa08>)
 800e37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e382:	f7f2 f951 	bl	8000628 <__aeabi_dmul>
 800e386:	a372      	add	r3, pc, #456	; (adr r3, 800e550 <__ieee754_pow+0xa10>)
 800e388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38c:	4680      	mov	r8, r0
 800e38e:	4689      	mov	r9, r1
 800e390:	4620      	mov	r0, r4
 800e392:	4629      	mov	r1, r5
 800e394:	f7f2 f948 	bl	8000628 <__aeabi_dmul>
 800e398:	4602      	mov	r2, r0
 800e39a:	460b      	mov	r3, r1
 800e39c:	4640      	mov	r0, r8
 800e39e:	4649      	mov	r1, r9
 800e3a0:	f7f1 ff8c 	bl	80002bc <__adddf3>
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	460d      	mov	r5, r1
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	4639      	mov	r1, r7
 800e3b0:	f7f1 ff84 	bl	80002bc <__adddf3>
 800e3b4:	4632      	mov	r2, r6
 800e3b6:	463b      	mov	r3, r7
 800e3b8:	4680      	mov	r8, r0
 800e3ba:	4689      	mov	r9, r1
 800e3bc:	f7f1 ff7c 	bl	80002b8 <__aeabi_dsub>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	4629      	mov	r1, r5
 800e3c8:	f7f1 ff76 	bl	80002b8 <__aeabi_dsub>
 800e3cc:	4642      	mov	r2, r8
 800e3ce:	4606      	mov	r6, r0
 800e3d0:	460f      	mov	r7, r1
 800e3d2:	464b      	mov	r3, r9
 800e3d4:	4640      	mov	r0, r8
 800e3d6:	4649      	mov	r1, r9
 800e3d8:	f7f2 f926 	bl	8000628 <__aeabi_dmul>
 800e3dc:	a35e      	add	r3, pc, #376	; (adr r3, 800e558 <__ieee754_pow+0xa18>)
 800e3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e2:	4604      	mov	r4, r0
 800e3e4:	460d      	mov	r5, r1
 800e3e6:	f7f2 f91f 	bl	8000628 <__aeabi_dmul>
 800e3ea:	a35d      	add	r3, pc, #372	; (adr r3, 800e560 <__ieee754_pow+0xa20>)
 800e3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f0:	f7f1 ff62 	bl	80002b8 <__aeabi_dsub>
 800e3f4:	4622      	mov	r2, r4
 800e3f6:	462b      	mov	r3, r5
 800e3f8:	f7f2 f916 	bl	8000628 <__aeabi_dmul>
 800e3fc:	a35a      	add	r3, pc, #360	; (adr r3, 800e568 <__ieee754_pow+0xa28>)
 800e3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e402:	f7f1 ff5b 	bl	80002bc <__adddf3>
 800e406:	4622      	mov	r2, r4
 800e408:	462b      	mov	r3, r5
 800e40a:	f7f2 f90d 	bl	8000628 <__aeabi_dmul>
 800e40e:	a358      	add	r3, pc, #352	; (adr r3, 800e570 <__ieee754_pow+0xa30>)
 800e410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e414:	f7f1 ff50 	bl	80002b8 <__aeabi_dsub>
 800e418:	4622      	mov	r2, r4
 800e41a:	462b      	mov	r3, r5
 800e41c:	f7f2 f904 	bl	8000628 <__aeabi_dmul>
 800e420:	a355      	add	r3, pc, #340	; (adr r3, 800e578 <__ieee754_pow+0xa38>)
 800e422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e426:	f7f1 ff49 	bl	80002bc <__adddf3>
 800e42a:	4622      	mov	r2, r4
 800e42c:	462b      	mov	r3, r5
 800e42e:	f7f2 f8fb 	bl	8000628 <__aeabi_dmul>
 800e432:	4602      	mov	r2, r0
 800e434:	460b      	mov	r3, r1
 800e436:	4640      	mov	r0, r8
 800e438:	4649      	mov	r1, r9
 800e43a:	f7f1 ff3d 	bl	80002b8 <__aeabi_dsub>
 800e43e:	4604      	mov	r4, r0
 800e440:	460d      	mov	r5, r1
 800e442:	4602      	mov	r2, r0
 800e444:	460b      	mov	r3, r1
 800e446:	4640      	mov	r0, r8
 800e448:	4649      	mov	r1, r9
 800e44a:	f7f2 f8ed 	bl	8000628 <__aeabi_dmul>
 800e44e:	2200      	movs	r2, #0
 800e450:	ec41 0b19 	vmov	d9, r0, r1
 800e454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e458:	4620      	mov	r0, r4
 800e45a:	4629      	mov	r1, r5
 800e45c:	f7f1 ff2c 	bl	80002b8 <__aeabi_dsub>
 800e460:	4602      	mov	r2, r0
 800e462:	460b      	mov	r3, r1
 800e464:	ec51 0b19 	vmov	r0, r1, d9
 800e468:	f7f2 fa08 	bl	800087c <__aeabi_ddiv>
 800e46c:	4632      	mov	r2, r6
 800e46e:	4604      	mov	r4, r0
 800e470:	460d      	mov	r5, r1
 800e472:	463b      	mov	r3, r7
 800e474:	4640      	mov	r0, r8
 800e476:	4649      	mov	r1, r9
 800e478:	f7f2 f8d6 	bl	8000628 <__aeabi_dmul>
 800e47c:	4632      	mov	r2, r6
 800e47e:	463b      	mov	r3, r7
 800e480:	f7f1 ff1c 	bl	80002bc <__adddf3>
 800e484:	4602      	mov	r2, r0
 800e486:	460b      	mov	r3, r1
 800e488:	4620      	mov	r0, r4
 800e48a:	4629      	mov	r1, r5
 800e48c:	f7f1 ff14 	bl	80002b8 <__aeabi_dsub>
 800e490:	4642      	mov	r2, r8
 800e492:	464b      	mov	r3, r9
 800e494:	f7f1 ff10 	bl	80002b8 <__aeabi_dsub>
 800e498:	460b      	mov	r3, r1
 800e49a:	4602      	mov	r2, r0
 800e49c:	493a      	ldr	r1, [pc, #232]	; (800e588 <__ieee754_pow+0xa48>)
 800e49e:	2000      	movs	r0, #0
 800e4a0:	f7f1 ff0a 	bl	80002b8 <__aeabi_dsub>
 800e4a4:	ec41 0b10 	vmov	d0, r0, r1
 800e4a8:	ee10 3a90 	vmov	r3, s1
 800e4ac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e4b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e4b4:	da2b      	bge.n	800e50e <__ieee754_pow+0x9ce>
 800e4b6:	4650      	mov	r0, sl
 800e4b8:	f001 fa6e 	bl	800f998 <scalbn>
 800e4bc:	ec51 0b10 	vmov	r0, r1, d0
 800e4c0:	ec53 2b18 	vmov	r2, r3, d8
 800e4c4:	f7ff bbed 	b.w	800dca2 <__ieee754_pow+0x162>
 800e4c8:	4b30      	ldr	r3, [pc, #192]	; (800e58c <__ieee754_pow+0xa4c>)
 800e4ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e4ce:	429e      	cmp	r6, r3
 800e4d0:	f77f af0c 	ble.w	800e2ec <__ieee754_pow+0x7ac>
 800e4d4:	4b2e      	ldr	r3, [pc, #184]	; (800e590 <__ieee754_pow+0xa50>)
 800e4d6:	440b      	add	r3, r1
 800e4d8:	4303      	orrs	r3, r0
 800e4da:	d009      	beq.n	800e4f0 <__ieee754_pow+0x9b0>
 800e4dc:	ec51 0b18 	vmov	r0, r1, d8
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	f7f2 fb12 	bl	8000b0c <__aeabi_dcmplt>
 800e4e8:	3800      	subs	r0, #0
 800e4ea:	bf18      	it	ne
 800e4ec:	2001      	movne	r0, #1
 800e4ee:	e447      	b.n	800dd80 <__ieee754_pow+0x240>
 800e4f0:	4622      	mov	r2, r4
 800e4f2:	462b      	mov	r3, r5
 800e4f4:	f7f1 fee0 	bl	80002b8 <__aeabi_dsub>
 800e4f8:	4642      	mov	r2, r8
 800e4fa:	464b      	mov	r3, r9
 800e4fc:	f7f2 fb1a 	bl	8000b34 <__aeabi_dcmpge>
 800e500:	2800      	cmp	r0, #0
 800e502:	f43f aef3 	beq.w	800e2ec <__ieee754_pow+0x7ac>
 800e506:	e7e9      	b.n	800e4dc <__ieee754_pow+0x99c>
 800e508:	f04f 0a00 	mov.w	sl, #0
 800e50c:	e71a      	b.n	800e344 <__ieee754_pow+0x804>
 800e50e:	ec51 0b10 	vmov	r0, r1, d0
 800e512:	4619      	mov	r1, r3
 800e514:	e7d4      	b.n	800e4c0 <__ieee754_pow+0x980>
 800e516:	491c      	ldr	r1, [pc, #112]	; (800e588 <__ieee754_pow+0xa48>)
 800e518:	2000      	movs	r0, #0
 800e51a:	f7ff bb30 	b.w	800db7e <__ieee754_pow+0x3e>
 800e51e:	2000      	movs	r0, #0
 800e520:	2100      	movs	r1, #0
 800e522:	f7ff bb2c 	b.w	800db7e <__ieee754_pow+0x3e>
 800e526:	4630      	mov	r0, r6
 800e528:	4639      	mov	r1, r7
 800e52a:	f7ff bb28 	b.w	800db7e <__ieee754_pow+0x3e>
 800e52e:	9204      	str	r2, [sp, #16]
 800e530:	f7ff bb7a 	b.w	800dc28 <__ieee754_pow+0xe8>
 800e534:	2300      	movs	r3, #0
 800e536:	f7ff bb64 	b.w	800dc02 <__ieee754_pow+0xc2>
 800e53a:	bf00      	nop
 800e53c:	f3af 8000 	nop.w
 800e540:	00000000 	.word	0x00000000
 800e544:	3fe62e43 	.word	0x3fe62e43
 800e548:	fefa39ef 	.word	0xfefa39ef
 800e54c:	3fe62e42 	.word	0x3fe62e42
 800e550:	0ca86c39 	.word	0x0ca86c39
 800e554:	be205c61 	.word	0xbe205c61
 800e558:	72bea4d0 	.word	0x72bea4d0
 800e55c:	3e663769 	.word	0x3e663769
 800e560:	c5d26bf1 	.word	0xc5d26bf1
 800e564:	3ebbbd41 	.word	0x3ebbbd41
 800e568:	af25de2c 	.word	0xaf25de2c
 800e56c:	3f11566a 	.word	0x3f11566a
 800e570:	16bebd93 	.word	0x16bebd93
 800e574:	3f66c16c 	.word	0x3f66c16c
 800e578:	5555553e 	.word	0x5555553e
 800e57c:	3fc55555 	.word	0x3fc55555
 800e580:	3fe00000 	.word	0x3fe00000
 800e584:	000fffff 	.word	0x000fffff
 800e588:	3ff00000 	.word	0x3ff00000
 800e58c:	4090cbff 	.word	0x4090cbff
 800e590:	3f6f3400 	.word	0x3f6f3400
 800e594:	652b82fe 	.word	0x652b82fe
 800e598:	3c971547 	.word	0x3c971547
 800e59c:	00000000 	.word	0x00000000

0800e5a0 <__ieee754_rem_pio2>:
 800e5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a4:	ed2d 8b02 	vpush	{d8}
 800e5a8:	ec55 4b10 	vmov	r4, r5, d0
 800e5ac:	4bca      	ldr	r3, [pc, #808]	; (800e8d8 <__ieee754_rem_pio2+0x338>)
 800e5ae:	b08b      	sub	sp, #44	; 0x2c
 800e5b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e5b4:	4598      	cmp	r8, r3
 800e5b6:	4682      	mov	sl, r0
 800e5b8:	9502      	str	r5, [sp, #8]
 800e5ba:	dc08      	bgt.n	800e5ce <__ieee754_rem_pio2+0x2e>
 800e5bc:	2200      	movs	r2, #0
 800e5be:	2300      	movs	r3, #0
 800e5c0:	ed80 0b00 	vstr	d0, [r0]
 800e5c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e5c8:	f04f 0b00 	mov.w	fp, #0
 800e5cc:	e028      	b.n	800e620 <__ieee754_rem_pio2+0x80>
 800e5ce:	4bc3      	ldr	r3, [pc, #780]	; (800e8dc <__ieee754_rem_pio2+0x33c>)
 800e5d0:	4598      	cmp	r8, r3
 800e5d2:	dc78      	bgt.n	800e6c6 <__ieee754_rem_pio2+0x126>
 800e5d4:	9b02      	ldr	r3, [sp, #8]
 800e5d6:	4ec2      	ldr	r6, [pc, #776]	; (800e8e0 <__ieee754_rem_pio2+0x340>)
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	ee10 0a10 	vmov	r0, s0
 800e5de:	a3b0      	add	r3, pc, #704	; (adr r3, 800e8a0 <__ieee754_rem_pio2+0x300>)
 800e5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e4:	4629      	mov	r1, r5
 800e5e6:	dd39      	ble.n	800e65c <__ieee754_rem_pio2+0xbc>
 800e5e8:	f7f1 fe66 	bl	80002b8 <__aeabi_dsub>
 800e5ec:	45b0      	cmp	r8, r6
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	460d      	mov	r5, r1
 800e5f2:	d01b      	beq.n	800e62c <__ieee754_rem_pio2+0x8c>
 800e5f4:	a3ac      	add	r3, pc, #688	; (adr r3, 800e8a8 <__ieee754_rem_pio2+0x308>)
 800e5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fa:	f7f1 fe5d 	bl	80002b8 <__aeabi_dsub>
 800e5fe:	4602      	mov	r2, r0
 800e600:	460b      	mov	r3, r1
 800e602:	e9ca 2300 	strd	r2, r3, [sl]
 800e606:	4620      	mov	r0, r4
 800e608:	4629      	mov	r1, r5
 800e60a:	f7f1 fe55 	bl	80002b8 <__aeabi_dsub>
 800e60e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e8a8 <__ieee754_rem_pio2+0x308>)
 800e610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e614:	f7f1 fe50 	bl	80002b8 <__aeabi_dsub>
 800e618:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e61c:	f04f 0b01 	mov.w	fp, #1
 800e620:	4658      	mov	r0, fp
 800e622:	b00b      	add	sp, #44	; 0x2c
 800e624:	ecbd 8b02 	vpop	{d8}
 800e628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e62c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e8b0 <__ieee754_rem_pio2+0x310>)
 800e62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e632:	f7f1 fe41 	bl	80002b8 <__aeabi_dsub>
 800e636:	a3a0      	add	r3, pc, #640	; (adr r3, 800e8b8 <__ieee754_rem_pio2+0x318>)
 800e638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63c:	4604      	mov	r4, r0
 800e63e:	460d      	mov	r5, r1
 800e640:	f7f1 fe3a 	bl	80002b8 <__aeabi_dsub>
 800e644:	4602      	mov	r2, r0
 800e646:	460b      	mov	r3, r1
 800e648:	e9ca 2300 	strd	r2, r3, [sl]
 800e64c:	4620      	mov	r0, r4
 800e64e:	4629      	mov	r1, r5
 800e650:	f7f1 fe32 	bl	80002b8 <__aeabi_dsub>
 800e654:	a398      	add	r3, pc, #608	; (adr r3, 800e8b8 <__ieee754_rem_pio2+0x318>)
 800e656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65a:	e7db      	b.n	800e614 <__ieee754_rem_pio2+0x74>
 800e65c:	f7f1 fe2e 	bl	80002bc <__adddf3>
 800e660:	45b0      	cmp	r8, r6
 800e662:	4604      	mov	r4, r0
 800e664:	460d      	mov	r5, r1
 800e666:	d016      	beq.n	800e696 <__ieee754_rem_pio2+0xf6>
 800e668:	a38f      	add	r3, pc, #572	; (adr r3, 800e8a8 <__ieee754_rem_pio2+0x308>)
 800e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66e:	f7f1 fe25 	bl	80002bc <__adddf3>
 800e672:	4602      	mov	r2, r0
 800e674:	460b      	mov	r3, r1
 800e676:	e9ca 2300 	strd	r2, r3, [sl]
 800e67a:	4620      	mov	r0, r4
 800e67c:	4629      	mov	r1, r5
 800e67e:	f7f1 fe1b 	bl	80002b8 <__aeabi_dsub>
 800e682:	a389      	add	r3, pc, #548	; (adr r3, 800e8a8 <__ieee754_rem_pio2+0x308>)
 800e684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e688:	f7f1 fe18 	bl	80002bc <__adddf3>
 800e68c:	f04f 3bff 	mov.w	fp, #4294967295
 800e690:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e694:	e7c4      	b.n	800e620 <__ieee754_rem_pio2+0x80>
 800e696:	a386      	add	r3, pc, #536	; (adr r3, 800e8b0 <__ieee754_rem_pio2+0x310>)
 800e698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69c:	f7f1 fe0e 	bl	80002bc <__adddf3>
 800e6a0:	a385      	add	r3, pc, #532	; (adr r3, 800e8b8 <__ieee754_rem_pio2+0x318>)
 800e6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a6:	4604      	mov	r4, r0
 800e6a8:	460d      	mov	r5, r1
 800e6aa:	f7f1 fe07 	bl	80002bc <__adddf3>
 800e6ae:	4602      	mov	r2, r0
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	e9ca 2300 	strd	r2, r3, [sl]
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	4629      	mov	r1, r5
 800e6ba:	f7f1 fdfd 	bl	80002b8 <__aeabi_dsub>
 800e6be:	a37e      	add	r3, pc, #504	; (adr r3, 800e8b8 <__ieee754_rem_pio2+0x318>)
 800e6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c4:	e7e0      	b.n	800e688 <__ieee754_rem_pio2+0xe8>
 800e6c6:	4b87      	ldr	r3, [pc, #540]	; (800e8e4 <__ieee754_rem_pio2+0x344>)
 800e6c8:	4598      	cmp	r8, r3
 800e6ca:	f300 80d9 	bgt.w	800e880 <__ieee754_rem_pio2+0x2e0>
 800e6ce:	f001 f8cf 	bl	800f870 <fabs>
 800e6d2:	ec55 4b10 	vmov	r4, r5, d0
 800e6d6:	ee10 0a10 	vmov	r0, s0
 800e6da:	a379      	add	r3, pc, #484	; (adr r3, 800e8c0 <__ieee754_rem_pio2+0x320>)
 800e6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e0:	4629      	mov	r1, r5
 800e6e2:	f7f1 ffa1 	bl	8000628 <__aeabi_dmul>
 800e6e6:	4b80      	ldr	r3, [pc, #512]	; (800e8e8 <__ieee754_rem_pio2+0x348>)
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f7f1 fde7 	bl	80002bc <__adddf3>
 800e6ee:	f7f2 fa4b 	bl	8000b88 <__aeabi_d2iz>
 800e6f2:	4683      	mov	fp, r0
 800e6f4:	f7f1 ff2e 	bl	8000554 <__aeabi_i2d>
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	ec43 2b18 	vmov	d8, r2, r3
 800e700:	a367      	add	r3, pc, #412	; (adr r3, 800e8a0 <__ieee754_rem_pio2+0x300>)
 800e702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e706:	f7f1 ff8f 	bl	8000628 <__aeabi_dmul>
 800e70a:	4602      	mov	r2, r0
 800e70c:	460b      	mov	r3, r1
 800e70e:	4620      	mov	r0, r4
 800e710:	4629      	mov	r1, r5
 800e712:	f7f1 fdd1 	bl	80002b8 <__aeabi_dsub>
 800e716:	a364      	add	r3, pc, #400	; (adr r3, 800e8a8 <__ieee754_rem_pio2+0x308>)
 800e718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71c:	4606      	mov	r6, r0
 800e71e:	460f      	mov	r7, r1
 800e720:	ec51 0b18 	vmov	r0, r1, d8
 800e724:	f7f1 ff80 	bl	8000628 <__aeabi_dmul>
 800e728:	f1bb 0f1f 	cmp.w	fp, #31
 800e72c:	4604      	mov	r4, r0
 800e72e:	460d      	mov	r5, r1
 800e730:	dc0d      	bgt.n	800e74e <__ieee754_rem_pio2+0x1ae>
 800e732:	4b6e      	ldr	r3, [pc, #440]	; (800e8ec <__ieee754_rem_pio2+0x34c>)
 800e734:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e73c:	4543      	cmp	r3, r8
 800e73e:	d006      	beq.n	800e74e <__ieee754_rem_pio2+0x1ae>
 800e740:	4622      	mov	r2, r4
 800e742:	462b      	mov	r3, r5
 800e744:	4630      	mov	r0, r6
 800e746:	4639      	mov	r1, r7
 800e748:	f7f1 fdb6 	bl	80002b8 <__aeabi_dsub>
 800e74c:	e00f      	b.n	800e76e <__ieee754_rem_pio2+0x1ce>
 800e74e:	462b      	mov	r3, r5
 800e750:	4622      	mov	r2, r4
 800e752:	4630      	mov	r0, r6
 800e754:	4639      	mov	r1, r7
 800e756:	f7f1 fdaf 	bl	80002b8 <__aeabi_dsub>
 800e75a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e75e:	9303      	str	r3, [sp, #12]
 800e760:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e764:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e768:	f1b8 0f10 	cmp.w	r8, #16
 800e76c:	dc02      	bgt.n	800e774 <__ieee754_rem_pio2+0x1d4>
 800e76e:	e9ca 0100 	strd	r0, r1, [sl]
 800e772:	e039      	b.n	800e7e8 <__ieee754_rem_pio2+0x248>
 800e774:	a34e      	add	r3, pc, #312	; (adr r3, 800e8b0 <__ieee754_rem_pio2+0x310>)
 800e776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77a:	ec51 0b18 	vmov	r0, r1, d8
 800e77e:	f7f1 ff53 	bl	8000628 <__aeabi_dmul>
 800e782:	4604      	mov	r4, r0
 800e784:	460d      	mov	r5, r1
 800e786:	4602      	mov	r2, r0
 800e788:	460b      	mov	r3, r1
 800e78a:	4630      	mov	r0, r6
 800e78c:	4639      	mov	r1, r7
 800e78e:	f7f1 fd93 	bl	80002b8 <__aeabi_dsub>
 800e792:	4602      	mov	r2, r0
 800e794:	460b      	mov	r3, r1
 800e796:	4680      	mov	r8, r0
 800e798:	4689      	mov	r9, r1
 800e79a:	4630      	mov	r0, r6
 800e79c:	4639      	mov	r1, r7
 800e79e:	f7f1 fd8b 	bl	80002b8 <__aeabi_dsub>
 800e7a2:	4622      	mov	r2, r4
 800e7a4:	462b      	mov	r3, r5
 800e7a6:	f7f1 fd87 	bl	80002b8 <__aeabi_dsub>
 800e7aa:	a343      	add	r3, pc, #268	; (adr r3, 800e8b8 <__ieee754_rem_pio2+0x318>)
 800e7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	460d      	mov	r5, r1
 800e7b4:	ec51 0b18 	vmov	r0, r1, d8
 800e7b8:	f7f1 ff36 	bl	8000628 <__aeabi_dmul>
 800e7bc:	4622      	mov	r2, r4
 800e7be:	462b      	mov	r3, r5
 800e7c0:	f7f1 fd7a 	bl	80002b8 <__aeabi_dsub>
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	460b      	mov	r3, r1
 800e7c8:	4604      	mov	r4, r0
 800e7ca:	460d      	mov	r5, r1
 800e7cc:	4640      	mov	r0, r8
 800e7ce:	4649      	mov	r1, r9
 800e7d0:	f7f1 fd72 	bl	80002b8 <__aeabi_dsub>
 800e7d4:	9a03      	ldr	r2, [sp, #12]
 800e7d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e7da:	1ad3      	subs	r3, r2, r3
 800e7dc:	2b31      	cmp	r3, #49	; 0x31
 800e7de:	dc24      	bgt.n	800e82a <__ieee754_rem_pio2+0x28a>
 800e7e0:	e9ca 0100 	strd	r0, r1, [sl]
 800e7e4:	4646      	mov	r6, r8
 800e7e6:	464f      	mov	r7, r9
 800e7e8:	e9da 8900 	ldrd	r8, r9, [sl]
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	4642      	mov	r2, r8
 800e7f0:	464b      	mov	r3, r9
 800e7f2:	4639      	mov	r1, r7
 800e7f4:	f7f1 fd60 	bl	80002b8 <__aeabi_dsub>
 800e7f8:	462b      	mov	r3, r5
 800e7fa:	4622      	mov	r2, r4
 800e7fc:	f7f1 fd5c 	bl	80002b8 <__aeabi_dsub>
 800e800:	9b02      	ldr	r3, [sp, #8]
 800e802:	2b00      	cmp	r3, #0
 800e804:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e808:	f6bf af0a 	bge.w	800e620 <__ieee754_rem_pio2+0x80>
 800e80c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e810:	f8ca 3004 	str.w	r3, [sl, #4]
 800e814:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e818:	f8ca 8000 	str.w	r8, [sl]
 800e81c:	f8ca 0008 	str.w	r0, [sl, #8]
 800e820:	f8ca 300c 	str.w	r3, [sl, #12]
 800e824:	f1cb 0b00 	rsb	fp, fp, #0
 800e828:	e6fa      	b.n	800e620 <__ieee754_rem_pio2+0x80>
 800e82a:	a327      	add	r3, pc, #156	; (adr r3, 800e8c8 <__ieee754_rem_pio2+0x328>)
 800e82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e830:	ec51 0b18 	vmov	r0, r1, d8
 800e834:	f7f1 fef8 	bl	8000628 <__aeabi_dmul>
 800e838:	4604      	mov	r4, r0
 800e83a:	460d      	mov	r5, r1
 800e83c:	4602      	mov	r2, r0
 800e83e:	460b      	mov	r3, r1
 800e840:	4640      	mov	r0, r8
 800e842:	4649      	mov	r1, r9
 800e844:	f7f1 fd38 	bl	80002b8 <__aeabi_dsub>
 800e848:	4602      	mov	r2, r0
 800e84a:	460b      	mov	r3, r1
 800e84c:	4606      	mov	r6, r0
 800e84e:	460f      	mov	r7, r1
 800e850:	4640      	mov	r0, r8
 800e852:	4649      	mov	r1, r9
 800e854:	f7f1 fd30 	bl	80002b8 <__aeabi_dsub>
 800e858:	4622      	mov	r2, r4
 800e85a:	462b      	mov	r3, r5
 800e85c:	f7f1 fd2c 	bl	80002b8 <__aeabi_dsub>
 800e860:	a31b      	add	r3, pc, #108	; (adr r3, 800e8d0 <__ieee754_rem_pio2+0x330>)
 800e862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e866:	4604      	mov	r4, r0
 800e868:	460d      	mov	r5, r1
 800e86a:	ec51 0b18 	vmov	r0, r1, d8
 800e86e:	f7f1 fedb 	bl	8000628 <__aeabi_dmul>
 800e872:	4622      	mov	r2, r4
 800e874:	462b      	mov	r3, r5
 800e876:	f7f1 fd1f 	bl	80002b8 <__aeabi_dsub>
 800e87a:	4604      	mov	r4, r0
 800e87c:	460d      	mov	r5, r1
 800e87e:	e75f      	b.n	800e740 <__ieee754_rem_pio2+0x1a0>
 800e880:	4b1b      	ldr	r3, [pc, #108]	; (800e8f0 <__ieee754_rem_pio2+0x350>)
 800e882:	4598      	cmp	r8, r3
 800e884:	dd36      	ble.n	800e8f4 <__ieee754_rem_pio2+0x354>
 800e886:	ee10 2a10 	vmov	r2, s0
 800e88a:	462b      	mov	r3, r5
 800e88c:	4620      	mov	r0, r4
 800e88e:	4629      	mov	r1, r5
 800e890:	f7f1 fd12 	bl	80002b8 <__aeabi_dsub>
 800e894:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e898:	e9ca 0100 	strd	r0, r1, [sl]
 800e89c:	e694      	b.n	800e5c8 <__ieee754_rem_pio2+0x28>
 800e89e:	bf00      	nop
 800e8a0:	54400000 	.word	0x54400000
 800e8a4:	3ff921fb 	.word	0x3ff921fb
 800e8a8:	1a626331 	.word	0x1a626331
 800e8ac:	3dd0b461 	.word	0x3dd0b461
 800e8b0:	1a600000 	.word	0x1a600000
 800e8b4:	3dd0b461 	.word	0x3dd0b461
 800e8b8:	2e037073 	.word	0x2e037073
 800e8bc:	3ba3198a 	.word	0x3ba3198a
 800e8c0:	6dc9c883 	.word	0x6dc9c883
 800e8c4:	3fe45f30 	.word	0x3fe45f30
 800e8c8:	2e000000 	.word	0x2e000000
 800e8cc:	3ba3198a 	.word	0x3ba3198a
 800e8d0:	252049c1 	.word	0x252049c1
 800e8d4:	397b839a 	.word	0x397b839a
 800e8d8:	3fe921fb 	.word	0x3fe921fb
 800e8dc:	4002d97b 	.word	0x4002d97b
 800e8e0:	3ff921fb 	.word	0x3ff921fb
 800e8e4:	413921fb 	.word	0x413921fb
 800e8e8:	3fe00000 	.word	0x3fe00000
 800e8ec:	08010168 	.word	0x08010168
 800e8f0:	7fefffff 	.word	0x7fefffff
 800e8f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e8f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e8fc:	ee10 0a10 	vmov	r0, s0
 800e900:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e904:	ee10 6a10 	vmov	r6, s0
 800e908:	460f      	mov	r7, r1
 800e90a:	f7f2 f93d 	bl	8000b88 <__aeabi_d2iz>
 800e90e:	f7f1 fe21 	bl	8000554 <__aeabi_i2d>
 800e912:	4602      	mov	r2, r0
 800e914:	460b      	mov	r3, r1
 800e916:	4630      	mov	r0, r6
 800e918:	4639      	mov	r1, r7
 800e91a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e91e:	f7f1 fccb 	bl	80002b8 <__aeabi_dsub>
 800e922:	4b23      	ldr	r3, [pc, #140]	; (800e9b0 <__ieee754_rem_pio2+0x410>)
 800e924:	2200      	movs	r2, #0
 800e926:	f7f1 fe7f 	bl	8000628 <__aeabi_dmul>
 800e92a:	460f      	mov	r7, r1
 800e92c:	4606      	mov	r6, r0
 800e92e:	f7f2 f92b 	bl	8000b88 <__aeabi_d2iz>
 800e932:	f7f1 fe0f 	bl	8000554 <__aeabi_i2d>
 800e936:	4602      	mov	r2, r0
 800e938:	460b      	mov	r3, r1
 800e93a:	4630      	mov	r0, r6
 800e93c:	4639      	mov	r1, r7
 800e93e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e942:	f7f1 fcb9 	bl	80002b8 <__aeabi_dsub>
 800e946:	4b1a      	ldr	r3, [pc, #104]	; (800e9b0 <__ieee754_rem_pio2+0x410>)
 800e948:	2200      	movs	r2, #0
 800e94a:	f7f1 fe6d 	bl	8000628 <__aeabi_dmul>
 800e94e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e952:	ad04      	add	r5, sp, #16
 800e954:	f04f 0803 	mov.w	r8, #3
 800e958:	46a9      	mov	r9, r5
 800e95a:	2600      	movs	r6, #0
 800e95c:	2700      	movs	r7, #0
 800e95e:	4632      	mov	r2, r6
 800e960:	463b      	mov	r3, r7
 800e962:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e966:	46c3      	mov	fp, r8
 800e968:	3d08      	subs	r5, #8
 800e96a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e96e:	f7f2 f8c3 	bl	8000af8 <__aeabi_dcmpeq>
 800e972:	2800      	cmp	r0, #0
 800e974:	d1f3      	bne.n	800e95e <__ieee754_rem_pio2+0x3be>
 800e976:	4b0f      	ldr	r3, [pc, #60]	; (800e9b4 <__ieee754_rem_pio2+0x414>)
 800e978:	9301      	str	r3, [sp, #4]
 800e97a:	2302      	movs	r3, #2
 800e97c:	9300      	str	r3, [sp, #0]
 800e97e:	4622      	mov	r2, r4
 800e980:	465b      	mov	r3, fp
 800e982:	4651      	mov	r1, sl
 800e984:	4648      	mov	r0, r9
 800e986:	f000 f993 	bl	800ecb0 <__kernel_rem_pio2>
 800e98a:	9b02      	ldr	r3, [sp, #8]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	4683      	mov	fp, r0
 800e990:	f6bf ae46 	bge.w	800e620 <__ieee754_rem_pio2+0x80>
 800e994:	e9da 2100 	ldrd	r2, r1, [sl]
 800e998:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e99c:	e9ca 2300 	strd	r2, r3, [sl]
 800e9a0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e9a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9a8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e9ac:	e73a      	b.n	800e824 <__ieee754_rem_pio2+0x284>
 800e9ae:	bf00      	nop
 800e9b0:	41700000 	.word	0x41700000
 800e9b4:	080101e8 	.word	0x080101e8

0800e9b8 <__ieee754_sqrt>:
 800e9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9bc:	ec55 4b10 	vmov	r4, r5, d0
 800e9c0:	4e55      	ldr	r6, [pc, #340]	; (800eb18 <__ieee754_sqrt+0x160>)
 800e9c2:	43ae      	bics	r6, r5
 800e9c4:	ee10 0a10 	vmov	r0, s0
 800e9c8:	ee10 3a10 	vmov	r3, s0
 800e9cc:	462a      	mov	r2, r5
 800e9ce:	4629      	mov	r1, r5
 800e9d0:	d110      	bne.n	800e9f4 <__ieee754_sqrt+0x3c>
 800e9d2:	ee10 2a10 	vmov	r2, s0
 800e9d6:	462b      	mov	r3, r5
 800e9d8:	f7f1 fe26 	bl	8000628 <__aeabi_dmul>
 800e9dc:	4602      	mov	r2, r0
 800e9de:	460b      	mov	r3, r1
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	4629      	mov	r1, r5
 800e9e4:	f7f1 fc6a 	bl	80002bc <__adddf3>
 800e9e8:	4604      	mov	r4, r0
 800e9ea:	460d      	mov	r5, r1
 800e9ec:	ec45 4b10 	vmov	d0, r4, r5
 800e9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9f4:	2d00      	cmp	r5, #0
 800e9f6:	dc10      	bgt.n	800ea1a <__ieee754_sqrt+0x62>
 800e9f8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e9fc:	4330      	orrs	r0, r6
 800e9fe:	d0f5      	beq.n	800e9ec <__ieee754_sqrt+0x34>
 800ea00:	b15d      	cbz	r5, 800ea1a <__ieee754_sqrt+0x62>
 800ea02:	ee10 2a10 	vmov	r2, s0
 800ea06:	462b      	mov	r3, r5
 800ea08:	ee10 0a10 	vmov	r0, s0
 800ea0c:	f7f1 fc54 	bl	80002b8 <__aeabi_dsub>
 800ea10:	4602      	mov	r2, r0
 800ea12:	460b      	mov	r3, r1
 800ea14:	f7f1 ff32 	bl	800087c <__aeabi_ddiv>
 800ea18:	e7e6      	b.n	800e9e8 <__ieee754_sqrt+0x30>
 800ea1a:	1512      	asrs	r2, r2, #20
 800ea1c:	d074      	beq.n	800eb08 <__ieee754_sqrt+0x150>
 800ea1e:	07d4      	lsls	r4, r2, #31
 800ea20:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ea24:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ea28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ea2c:	bf5e      	ittt	pl
 800ea2e:	0fda      	lsrpl	r2, r3, #31
 800ea30:	005b      	lslpl	r3, r3, #1
 800ea32:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ea36:	2400      	movs	r4, #0
 800ea38:	0fda      	lsrs	r2, r3, #31
 800ea3a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ea3e:	107f      	asrs	r7, r7, #1
 800ea40:	005b      	lsls	r3, r3, #1
 800ea42:	2516      	movs	r5, #22
 800ea44:	4620      	mov	r0, r4
 800ea46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ea4a:	1886      	adds	r6, r0, r2
 800ea4c:	428e      	cmp	r6, r1
 800ea4e:	bfde      	ittt	le
 800ea50:	1b89      	suble	r1, r1, r6
 800ea52:	18b0      	addle	r0, r6, r2
 800ea54:	18a4      	addle	r4, r4, r2
 800ea56:	0049      	lsls	r1, r1, #1
 800ea58:	3d01      	subs	r5, #1
 800ea5a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ea5e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ea62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ea66:	d1f0      	bne.n	800ea4a <__ieee754_sqrt+0x92>
 800ea68:	462a      	mov	r2, r5
 800ea6a:	f04f 0e20 	mov.w	lr, #32
 800ea6e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ea72:	4281      	cmp	r1, r0
 800ea74:	eb06 0c05 	add.w	ip, r6, r5
 800ea78:	dc02      	bgt.n	800ea80 <__ieee754_sqrt+0xc8>
 800ea7a:	d113      	bne.n	800eaa4 <__ieee754_sqrt+0xec>
 800ea7c:	459c      	cmp	ip, r3
 800ea7e:	d811      	bhi.n	800eaa4 <__ieee754_sqrt+0xec>
 800ea80:	f1bc 0f00 	cmp.w	ip, #0
 800ea84:	eb0c 0506 	add.w	r5, ip, r6
 800ea88:	da43      	bge.n	800eb12 <__ieee754_sqrt+0x15a>
 800ea8a:	2d00      	cmp	r5, #0
 800ea8c:	db41      	blt.n	800eb12 <__ieee754_sqrt+0x15a>
 800ea8e:	f100 0801 	add.w	r8, r0, #1
 800ea92:	1a09      	subs	r1, r1, r0
 800ea94:	459c      	cmp	ip, r3
 800ea96:	bf88      	it	hi
 800ea98:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ea9c:	eba3 030c 	sub.w	r3, r3, ip
 800eaa0:	4432      	add	r2, r6
 800eaa2:	4640      	mov	r0, r8
 800eaa4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800eaa8:	f1be 0e01 	subs.w	lr, lr, #1
 800eaac:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800eab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eab4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800eab8:	d1db      	bne.n	800ea72 <__ieee754_sqrt+0xba>
 800eaba:	430b      	orrs	r3, r1
 800eabc:	d006      	beq.n	800eacc <__ieee754_sqrt+0x114>
 800eabe:	1c50      	adds	r0, r2, #1
 800eac0:	bf13      	iteet	ne
 800eac2:	3201      	addne	r2, #1
 800eac4:	3401      	addeq	r4, #1
 800eac6:	4672      	moveq	r2, lr
 800eac8:	f022 0201 	bicne.w	r2, r2, #1
 800eacc:	1063      	asrs	r3, r4, #1
 800eace:	0852      	lsrs	r2, r2, #1
 800ead0:	07e1      	lsls	r1, r4, #31
 800ead2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ead6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800eada:	bf48      	it	mi
 800eadc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800eae0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800eae4:	4614      	mov	r4, r2
 800eae6:	e781      	b.n	800e9ec <__ieee754_sqrt+0x34>
 800eae8:	0ad9      	lsrs	r1, r3, #11
 800eaea:	3815      	subs	r0, #21
 800eaec:	055b      	lsls	r3, r3, #21
 800eaee:	2900      	cmp	r1, #0
 800eaf0:	d0fa      	beq.n	800eae8 <__ieee754_sqrt+0x130>
 800eaf2:	02cd      	lsls	r5, r1, #11
 800eaf4:	d50a      	bpl.n	800eb0c <__ieee754_sqrt+0x154>
 800eaf6:	f1c2 0420 	rsb	r4, r2, #32
 800eafa:	fa23 f404 	lsr.w	r4, r3, r4
 800eafe:	1e55      	subs	r5, r2, #1
 800eb00:	4093      	lsls	r3, r2
 800eb02:	4321      	orrs	r1, r4
 800eb04:	1b42      	subs	r2, r0, r5
 800eb06:	e78a      	b.n	800ea1e <__ieee754_sqrt+0x66>
 800eb08:	4610      	mov	r0, r2
 800eb0a:	e7f0      	b.n	800eaee <__ieee754_sqrt+0x136>
 800eb0c:	0049      	lsls	r1, r1, #1
 800eb0e:	3201      	adds	r2, #1
 800eb10:	e7ef      	b.n	800eaf2 <__ieee754_sqrt+0x13a>
 800eb12:	4680      	mov	r8, r0
 800eb14:	e7bd      	b.n	800ea92 <__ieee754_sqrt+0xda>
 800eb16:	bf00      	nop
 800eb18:	7ff00000 	.word	0x7ff00000
 800eb1c:	00000000 	.word	0x00000000

0800eb20 <__kernel_cos>:
 800eb20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb24:	ec57 6b10 	vmov	r6, r7, d0
 800eb28:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800eb2c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800eb30:	ed8d 1b00 	vstr	d1, [sp]
 800eb34:	da07      	bge.n	800eb46 <__kernel_cos+0x26>
 800eb36:	ee10 0a10 	vmov	r0, s0
 800eb3a:	4639      	mov	r1, r7
 800eb3c:	f7f2 f824 	bl	8000b88 <__aeabi_d2iz>
 800eb40:	2800      	cmp	r0, #0
 800eb42:	f000 8088 	beq.w	800ec56 <__kernel_cos+0x136>
 800eb46:	4632      	mov	r2, r6
 800eb48:	463b      	mov	r3, r7
 800eb4a:	4630      	mov	r0, r6
 800eb4c:	4639      	mov	r1, r7
 800eb4e:	f7f1 fd6b 	bl	8000628 <__aeabi_dmul>
 800eb52:	4b51      	ldr	r3, [pc, #324]	; (800ec98 <__kernel_cos+0x178>)
 800eb54:	2200      	movs	r2, #0
 800eb56:	4604      	mov	r4, r0
 800eb58:	460d      	mov	r5, r1
 800eb5a:	f7f1 fd65 	bl	8000628 <__aeabi_dmul>
 800eb5e:	a340      	add	r3, pc, #256	; (adr r3, 800ec60 <__kernel_cos+0x140>)
 800eb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb64:	4682      	mov	sl, r0
 800eb66:	468b      	mov	fp, r1
 800eb68:	4620      	mov	r0, r4
 800eb6a:	4629      	mov	r1, r5
 800eb6c:	f7f1 fd5c 	bl	8000628 <__aeabi_dmul>
 800eb70:	a33d      	add	r3, pc, #244	; (adr r3, 800ec68 <__kernel_cos+0x148>)
 800eb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb76:	f7f1 fba1 	bl	80002bc <__adddf3>
 800eb7a:	4622      	mov	r2, r4
 800eb7c:	462b      	mov	r3, r5
 800eb7e:	f7f1 fd53 	bl	8000628 <__aeabi_dmul>
 800eb82:	a33b      	add	r3, pc, #236	; (adr r3, 800ec70 <__kernel_cos+0x150>)
 800eb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb88:	f7f1 fb96 	bl	80002b8 <__aeabi_dsub>
 800eb8c:	4622      	mov	r2, r4
 800eb8e:	462b      	mov	r3, r5
 800eb90:	f7f1 fd4a 	bl	8000628 <__aeabi_dmul>
 800eb94:	a338      	add	r3, pc, #224	; (adr r3, 800ec78 <__kernel_cos+0x158>)
 800eb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9a:	f7f1 fb8f 	bl	80002bc <__adddf3>
 800eb9e:	4622      	mov	r2, r4
 800eba0:	462b      	mov	r3, r5
 800eba2:	f7f1 fd41 	bl	8000628 <__aeabi_dmul>
 800eba6:	a336      	add	r3, pc, #216	; (adr r3, 800ec80 <__kernel_cos+0x160>)
 800eba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebac:	f7f1 fb84 	bl	80002b8 <__aeabi_dsub>
 800ebb0:	4622      	mov	r2, r4
 800ebb2:	462b      	mov	r3, r5
 800ebb4:	f7f1 fd38 	bl	8000628 <__aeabi_dmul>
 800ebb8:	a333      	add	r3, pc, #204	; (adr r3, 800ec88 <__kernel_cos+0x168>)
 800ebba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebbe:	f7f1 fb7d 	bl	80002bc <__adddf3>
 800ebc2:	4622      	mov	r2, r4
 800ebc4:	462b      	mov	r3, r5
 800ebc6:	f7f1 fd2f 	bl	8000628 <__aeabi_dmul>
 800ebca:	4622      	mov	r2, r4
 800ebcc:	462b      	mov	r3, r5
 800ebce:	f7f1 fd2b 	bl	8000628 <__aeabi_dmul>
 800ebd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	460d      	mov	r5, r1
 800ebda:	4630      	mov	r0, r6
 800ebdc:	4639      	mov	r1, r7
 800ebde:	f7f1 fd23 	bl	8000628 <__aeabi_dmul>
 800ebe2:	460b      	mov	r3, r1
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	4629      	mov	r1, r5
 800ebe8:	4620      	mov	r0, r4
 800ebea:	f7f1 fb65 	bl	80002b8 <__aeabi_dsub>
 800ebee:	4b2b      	ldr	r3, [pc, #172]	; (800ec9c <__kernel_cos+0x17c>)
 800ebf0:	4598      	cmp	r8, r3
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	460f      	mov	r7, r1
 800ebf6:	dc10      	bgt.n	800ec1a <__kernel_cos+0xfa>
 800ebf8:	4602      	mov	r2, r0
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	4650      	mov	r0, sl
 800ebfe:	4659      	mov	r1, fp
 800ec00:	f7f1 fb5a 	bl	80002b8 <__aeabi_dsub>
 800ec04:	460b      	mov	r3, r1
 800ec06:	4926      	ldr	r1, [pc, #152]	; (800eca0 <__kernel_cos+0x180>)
 800ec08:	4602      	mov	r2, r0
 800ec0a:	2000      	movs	r0, #0
 800ec0c:	f7f1 fb54 	bl	80002b8 <__aeabi_dsub>
 800ec10:	ec41 0b10 	vmov	d0, r0, r1
 800ec14:	b003      	add	sp, #12
 800ec16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec1a:	4b22      	ldr	r3, [pc, #136]	; (800eca4 <__kernel_cos+0x184>)
 800ec1c:	4920      	ldr	r1, [pc, #128]	; (800eca0 <__kernel_cos+0x180>)
 800ec1e:	4598      	cmp	r8, r3
 800ec20:	bfcc      	ite	gt
 800ec22:	4d21      	ldrgt	r5, [pc, #132]	; (800eca8 <__kernel_cos+0x188>)
 800ec24:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ec28:	2400      	movs	r4, #0
 800ec2a:	4622      	mov	r2, r4
 800ec2c:	462b      	mov	r3, r5
 800ec2e:	2000      	movs	r0, #0
 800ec30:	f7f1 fb42 	bl	80002b8 <__aeabi_dsub>
 800ec34:	4622      	mov	r2, r4
 800ec36:	4680      	mov	r8, r0
 800ec38:	4689      	mov	r9, r1
 800ec3a:	462b      	mov	r3, r5
 800ec3c:	4650      	mov	r0, sl
 800ec3e:	4659      	mov	r1, fp
 800ec40:	f7f1 fb3a 	bl	80002b8 <__aeabi_dsub>
 800ec44:	4632      	mov	r2, r6
 800ec46:	463b      	mov	r3, r7
 800ec48:	f7f1 fb36 	bl	80002b8 <__aeabi_dsub>
 800ec4c:	4602      	mov	r2, r0
 800ec4e:	460b      	mov	r3, r1
 800ec50:	4640      	mov	r0, r8
 800ec52:	4649      	mov	r1, r9
 800ec54:	e7da      	b.n	800ec0c <__kernel_cos+0xec>
 800ec56:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ec90 <__kernel_cos+0x170>
 800ec5a:	e7db      	b.n	800ec14 <__kernel_cos+0xf4>
 800ec5c:	f3af 8000 	nop.w
 800ec60:	be8838d4 	.word	0xbe8838d4
 800ec64:	bda8fae9 	.word	0xbda8fae9
 800ec68:	bdb4b1c4 	.word	0xbdb4b1c4
 800ec6c:	3e21ee9e 	.word	0x3e21ee9e
 800ec70:	809c52ad 	.word	0x809c52ad
 800ec74:	3e927e4f 	.word	0x3e927e4f
 800ec78:	19cb1590 	.word	0x19cb1590
 800ec7c:	3efa01a0 	.word	0x3efa01a0
 800ec80:	16c15177 	.word	0x16c15177
 800ec84:	3f56c16c 	.word	0x3f56c16c
 800ec88:	5555554c 	.word	0x5555554c
 800ec8c:	3fa55555 	.word	0x3fa55555
 800ec90:	00000000 	.word	0x00000000
 800ec94:	3ff00000 	.word	0x3ff00000
 800ec98:	3fe00000 	.word	0x3fe00000
 800ec9c:	3fd33332 	.word	0x3fd33332
 800eca0:	3ff00000 	.word	0x3ff00000
 800eca4:	3fe90000 	.word	0x3fe90000
 800eca8:	3fd20000 	.word	0x3fd20000
 800ecac:	00000000 	.word	0x00000000

0800ecb0 <__kernel_rem_pio2>:
 800ecb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb4:	ed2d 8b02 	vpush	{d8}
 800ecb8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ecbc:	f112 0f14 	cmn.w	r2, #20
 800ecc0:	9308      	str	r3, [sp, #32]
 800ecc2:	9101      	str	r1, [sp, #4]
 800ecc4:	4bc4      	ldr	r3, [pc, #784]	; (800efd8 <__kernel_rem_pio2+0x328>)
 800ecc6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ecc8:	900b      	str	r0, [sp, #44]	; 0x2c
 800ecca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ecce:	9302      	str	r3, [sp, #8]
 800ecd0:	9b08      	ldr	r3, [sp, #32]
 800ecd2:	f103 33ff 	add.w	r3, r3, #4294967295
 800ecd6:	bfa8      	it	ge
 800ecd8:	1ed4      	subge	r4, r2, #3
 800ecda:	9306      	str	r3, [sp, #24]
 800ecdc:	bfb2      	itee	lt
 800ecde:	2400      	movlt	r4, #0
 800ece0:	2318      	movge	r3, #24
 800ece2:	fb94 f4f3 	sdivge	r4, r4, r3
 800ece6:	f06f 0317 	mvn.w	r3, #23
 800ecea:	fb04 3303 	mla	r3, r4, r3, r3
 800ecee:	eb03 0a02 	add.w	sl, r3, r2
 800ecf2:	9b02      	ldr	r3, [sp, #8]
 800ecf4:	9a06      	ldr	r2, [sp, #24]
 800ecf6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800efc8 <__kernel_rem_pio2+0x318>
 800ecfa:	eb03 0802 	add.w	r8, r3, r2
 800ecfe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ed00:	1aa7      	subs	r7, r4, r2
 800ed02:	ae22      	add	r6, sp, #136	; 0x88
 800ed04:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ed08:	2500      	movs	r5, #0
 800ed0a:	4545      	cmp	r5, r8
 800ed0c:	dd13      	ble.n	800ed36 <__kernel_rem_pio2+0x86>
 800ed0e:	9b08      	ldr	r3, [sp, #32]
 800ed10:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800efc8 <__kernel_rem_pio2+0x318>
 800ed14:	aa22      	add	r2, sp, #136	; 0x88
 800ed16:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ed1a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ed1e:	f04f 0800 	mov.w	r8, #0
 800ed22:	9b02      	ldr	r3, [sp, #8]
 800ed24:	4598      	cmp	r8, r3
 800ed26:	dc2f      	bgt.n	800ed88 <__kernel_rem_pio2+0xd8>
 800ed28:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ed2c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ed30:	462f      	mov	r7, r5
 800ed32:	2600      	movs	r6, #0
 800ed34:	e01b      	b.n	800ed6e <__kernel_rem_pio2+0xbe>
 800ed36:	42ef      	cmn	r7, r5
 800ed38:	d407      	bmi.n	800ed4a <__kernel_rem_pio2+0x9a>
 800ed3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ed3e:	f7f1 fc09 	bl	8000554 <__aeabi_i2d>
 800ed42:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ed46:	3501      	adds	r5, #1
 800ed48:	e7df      	b.n	800ed0a <__kernel_rem_pio2+0x5a>
 800ed4a:	ec51 0b18 	vmov	r0, r1, d8
 800ed4e:	e7f8      	b.n	800ed42 <__kernel_rem_pio2+0x92>
 800ed50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed54:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ed58:	f7f1 fc66 	bl	8000628 <__aeabi_dmul>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	460b      	mov	r3, r1
 800ed60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed64:	f7f1 faaa 	bl	80002bc <__adddf3>
 800ed68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed6c:	3601      	adds	r6, #1
 800ed6e:	9b06      	ldr	r3, [sp, #24]
 800ed70:	429e      	cmp	r6, r3
 800ed72:	f1a7 0708 	sub.w	r7, r7, #8
 800ed76:	ddeb      	ble.n	800ed50 <__kernel_rem_pio2+0xa0>
 800ed78:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ed7c:	f108 0801 	add.w	r8, r8, #1
 800ed80:	ecab 7b02 	vstmia	fp!, {d7}
 800ed84:	3508      	adds	r5, #8
 800ed86:	e7cc      	b.n	800ed22 <__kernel_rem_pio2+0x72>
 800ed88:	9b02      	ldr	r3, [sp, #8]
 800ed8a:	aa0e      	add	r2, sp, #56	; 0x38
 800ed8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed90:	930d      	str	r3, [sp, #52]	; 0x34
 800ed92:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ed94:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ed98:	9c02      	ldr	r4, [sp, #8]
 800ed9a:	930c      	str	r3, [sp, #48]	; 0x30
 800ed9c:	00e3      	lsls	r3, r4, #3
 800ed9e:	930a      	str	r3, [sp, #40]	; 0x28
 800eda0:	ab9a      	add	r3, sp, #616	; 0x268
 800eda2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eda6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800edaa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800edae:	ab72      	add	r3, sp, #456	; 0x1c8
 800edb0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800edb4:	46c3      	mov	fp, r8
 800edb6:	46a1      	mov	r9, r4
 800edb8:	f1b9 0f00 	cmp.w	r9, #0
 800edbc:	f1a5 0508 	sub.w	r5, r5, #8
 800edc0:	dc77      	bgt.n	800eeb2 <__kernel_rem_pio2+0x202>
 800edc2:	ec47 6b10 	vmov	d0, r6, r7
 800edc6:	4650      	mov	r0, sl
 800edc8:	f000 fde6 	bl	800f998 <scalbn>
 800edcc:	ec57 6b10 	vmov	r6, r7, d0
 800edd0:	2200      	movs	r2, #0
 800edd2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800edd6:	ee10 0a10 	vmov	r0, s0
 800edda:	4639      	mov	r1, r7
 800eddc:	f7f1 fc24 	bl	8000628 <__aeabi_dmul>
 800ede0:	ec41 0b10 	vmov	d0, r0, r1
 800ede4:	f000 fd58 	bl	800f898 <floor>
 800ede8:	4b7c      	ldr	r3, [pc, #496]	; (800efdc <__kernel_rem_pio2+0x32c>)
 800edea:	ec51 0b10 	vmov	r0, r1, d0
 800edee:	2200      	movs	r2, #0
 800edf0:	f7f1 fc1a 	bl	8000628 <__aeabi_dmul>
 800edf4:	4602      	mov	r2, r0
 800edf6:	460b      	mov	r3, r1
 800edf8:	4630      	mov	r0, r6
 800edfa:	4639      	mov	r1, r7
 800edfc:	f7f1 fa5c 	bl	80002b8 <__aeabi_dsub>
 800ee00:	460f      	mov	r7, r1
 800ee02:	4606      	mov	r6, r0
 800ee04:	f7f1 fec0 	bl	8000b88 <__aeabi_d2iz>
 800ee08:	9004      	str	r0, [sp, #16]
 800ee0a:	f7f1 fba3 	bl	8000554 <__aeabi_i2d>
 800ee0e:	4602      	mov	r2, r0
 800ee10:	460b      	mov	r3, r1
 800ee12:	4630      	mov	r0, r6
 800ee14:	4639      	mov	r1, r7
 800ee16:	f7f1 fa4f 	bl	80002b8 <__aeabi_dsub>
 800ee1a:	f1ba 0f00 	cmp.w	sl, #0
 800ee1e:	4606      	mov	r6, r0
 800ee20:	460f      	mov	r7, r1
 800ee22:	dd6d      	ble.n	800ef00 <__kernel_rem_pio2+0x250>
 800ee24:	1e62      	subs	r2, r4, #1
 800ee26:	ab0e      	add	r3, sp, #56	; 0x38
 800ee28:	9d04      	ldr	r5, [sp, #16]
 800ee2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ee2e:	f1ca 0118 	rsb	r1, sl, #24
 800ee32:	fa40 f301 	asr.w	r3, r0, r1
 800ee36:	441d      	add	r5, r3
 800ee38:	408b      	lsls	r3, r1
 800ee3a:	1ac0      	subs	r0, r0, r3
 800ee3c:	ab0e      	add	r3, sp, #56	; 0x38
 800ee3e:	9504      	str	r5, [sp, #16]
 800ee40:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ee44:	f1ca 0317 	rsb	r3, sl, #23
 800ee48:	fa40 fb03 	asr.w	fp, r0, r3
 800ee4c:	f1bb 0f00 	cmp.w	fp, #0
 800ee50:	dd65      	ble.n	800ef1e <__kernel_rem_pio2+0x26e>
 800ee52:	9b04      	ldr	r3, [sp, #16]
 800ee54:	2200      	movs	r2, #0
 800ee56:	3301      	adds	r3, #1
 800ee58:	9304      	str	r3, [sp, #16]
 800ee5a:	4615      	mov	r5, r2
 800ee5c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ee60:	4294      	cmp	r4, r2
 800ee62:	f300 809c 	bgt.w	800ef9e <__kernel_rem_pio2+0x2ee>
 800ee66:	f1ba 0f00 	cmp.w	sl, #0
 800ee6a:	dd07      	ble.n	800ee7c <__kernel_rem_pio2+0x1cc>
 800ee6c:	f1ba 0f01 	cmp.w	sl, #1
 800ee70:	f000 80c0 	beq.w	800eff4 <__kernel_rem_pio2+0x344>
 800ee74:	f1ba 0f02 	cmp.w	sl, #2
 800ee78:	f000 80c6 	beq.w	800f008 <__kernel_rem_pio2+0x358>
 800ee7c:	f1bb 0f02 	cmp.w	fp, #2
 800ee80:	d14d      	bne.n	800ef1e <__kernel_rem_pio2+0x26e>
 800ee82:	4632      	mov	r2, r6
 800ee84:	463b      	mov	r3, r7
 800ee86:	4956      	ldr	r1, [pc, #344]	; (800efe0 <__kernel_rem_pio2+0x330>)
 800ee88:	2000      	movs	r0, #0
 800ee8a:	f7f1 fa15 	bl	80002b8 <__aeabi_dsub>
 800ee8e:	4606      	mov	r6, r0
 800ee90:	460f      	mov	r7, r1
 800ee92:	2d00      	cmp	r5, #0
 800ee94:	d043      	beq.n	800ef1e <__kernel_rem_pio2+0x26e>
 800ee96:	4650      	mov	r0, sl
 800ee98:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800efd0 <__kernel_rem_pio2+0x320>
 800ee9c:	f000 fd7c 	bl	800f998 <scalbn>
 800eea0:	4630      	mov	r0, r6
 800eea2:	4639      	mov	r1, r7
 800eea4:	ec53 2b10 	vmov	r2, r3, d0
 800eea8:	f7f1 fa06 	bl	80002b8 <__aeabi_dsub>
 800eeac:	4606      	mov	r6, r0
 800eeae:	460f      	mov	r7, r1
 800eeb0:	e035      	b.n	800ef1e <__kernel_rem_pio2+0x26e>
 800eeb2:	4b4c      	ldr	r3, [pc, #304]	; (800efe4 <__kernel_rem_pio2+0x334>)
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	4630      	mov	r0, r6
 800eeb8:	4639      	mov	r1, r7
 800eeba:	f7f1 fbb5 	bl	8000628 <__aeabi_dmul>
 800eebe:	f7f1 fe63 	bl	8000b88 <__aeabi_d2iz>
 800eec2:	f7f1 fb47 	bl	8000554 <__aeabi_i2d>
 800eec6:	4602      	mov	r2, r0
 800eec8:	460b      	mov	r3, r1
 800eeca:	ec43 2b18 	vmov	d8, r2, r3
 800eece:	4b46      	ldr	r3, [pc, #280]	; (800efe8 <__kernel_rem_pio2+0x338>)
 800eed0:	2200      	movs	r2, #0
 800eed2:	f7f1 fba9 	bl	8000628 <__aeabi_dmul>
 800eed6:	4602      	mov	r2, r0
 800eed8:	460b      	mov	r3, r1
 800eeda:	4630      	mov	r0, r6
 800eedc:	4639      	mov	r1, r7
 800eede:	f7f1 f9eb 	bl	80002b8 <__aeabi_dsub>
 800eee2:	f7f1 fe51 	bl	8000b88 <__aeabi_d2iz>
 800eee6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eeea:	f84b 0b04 	str.w	r0, [fp], #4
 800eeee:	ec51 0b18 	vmov	r0, r1, d8
 800eef2:	f7f1 f9e3 	bl	80002bc <__adddf3>
 800eef6:	f109 39ff 	add.w	r9, r9, #4294967295
 800eefa:	4606      	mov	r6, r0
 800eefc:	460f      	mov	r7, r1
 800eefe:	e75b      	b.n	800edb8 <__kernel_rem_pio2+0x108>
 800ef00:	d106      	bne.n	800ef10 <__kernel_rem_pio2+0x260>
 800ef02:	1e63      	subs	r3, r4, #1
 800ef04:	aa0e      	add	r2, sp, #56	; 0x38
 800ef06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ef0a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ef0e:	e79d      	b.n	800ee4c <__kernel_rem_pio2+0x19c>
 800ef10:	4b36      	ldr	r3, [pc, #216]	; (800efec <__kernel_rem_pio2+0x33c>)
 800ef12:	2200      	movs	r2, #0
 800ef14:	f7f1 fe0e 	bl	8000b34 <__aeabi_dcmpge>
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	d13d      	bne.n	800ef98 <__kernel_rem_pio2+0x2e8>
 800ef1c:	4683      	mov	fp, r0
 800ef1e:	2200      	movs	r2, #0
 800ef20:	2300      	movs	r3, #0
 800ef22:	4630      	mov	r0, r6
 800ef24:	4639      	mov	r1, r7
 800ef26:	f7f1 fde7 	bl	8000af8 <__aeabi_dcmpeq>
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	f000 80c0 	beq.w	800f0b0 <__kernel_rem_pio2+0x400>
 800ef30:	1e65      	subs	r5, r4, #1
 800ef32:	462b      	mov	r3, r5
 800ef34:	2200      	movs	r2, #0
 800ef36:	9902      	ldr	r1, [sp, #8]
 800ef38:	428b      	cmp	r3, r1
 800ef3a:	da6c      	bge.n	800f016 <__kernel_rem_pio2+0x366>
 800ef3c:	2a00      	cmp	r2, #0
 800ef3e:	f000 8089 	beq.w	800f054 <__kernel_rem_pio2+0x3a4>
 800ef42:	ab0e      	add	r3, sp, #56	; 0x38
 800ef44:	f1aa 0a18 	sub.w	sl, sl, #24
 800ef48:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	f000 80ad 	beq.w	800f0ac <__kernel_rem_pio2+0x3fc>
 800ef52:	4650      	mov	r0, sl
 800ef54:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800efd0 <__kernel_rem_pio2+0x320>
 800ef58:	f000 fd1e 	bl	800f998 <scalbn>
 800ef5c:	ab9a      	add	r3, sp, #616	; 0x268
 800ef5e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ef62:	ec57 6b10 	vmov	r6, r7, d0
 800ef66:	00ec      	lsls	r4, r5, #3
 800ef68:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800ef6c:	46aa      	mov	sl, r5
 800ef6e:	f1ba 0f00 	cmp.w	sl, #0
 800ef72:	f280 80d6 	bge.w	800f122 <__kernel_rem_pio2+0x472>
 800ef76:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800efc8 <__kernel_rem_pio2+0x318>
 800ef7a:	462e      	mov	r6, r5
 800ef7c:	2e00      	cmp	r6, #0
 800ef7e:	f2c0 8104 	blt.w	800f18a <__kernel_rem_pio2+0x4da>
 800ef82:	ab72      	add	r3, sp, #456	; 0x1c8
 800ef84:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ef88:	f8df a064 	ldr.w	sl, [pc, #100]	; 800eff0 <__kernel_rem_pio2+0x340>
 800ef8c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ef90:	f04f 0800 	mov.w	r8, #0
 800ef94:	1baf      	subs	r7, r5, r6
 800ef96:	e0ea      	b.n	800f16e <__kernel_rem_pio2+0x4be>
 800ef98:	f04f 0b02 	mov.w	fp, #2
 800ef9c:	e759      	b.n	800ee52 <__kernel_rem_pio2+0x1a2>
 800ef9e:	f8d8 3000 	ldr.w	r3, [r8]
 800efa2:	b955      	cbnz	r5, 800efba <__kernel_rem_pio2+0x30a>
 800efa4:	b123      	cbz	r3, 800efb0 <__kernel_rem_pio2+0x300>
 800efa6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800efaa:	f8c8 3000 	str.w	r3, [r8]
 800efae:	2301      	movs	r3, #1
 800efb0:	3201      	adds	r2, #1
 800efb2:	f108 0804 	add.w	r8, r8, #4
 800efb6:	461d      	mov	r5, r3
 800efb8:	e752      	b.n	800ee60 <__kernel_rem_pio2+0x1b0>
 800efba:	1acb      	subs	r3, r1, r3
 800efbc:	f8c8 3000 	str.w	r3, [r8]
 800efc0:	462b      	mov	r3, r5
 800efc2:	e7f5      	b.n	800efb0 <__kernel_rem_pio2+0x300>
 800efc4:	f3af 8000 	nop.w
	...
 800efd4:	3ff00000 	.word	0x3ff00000
 800efd8:	08010330 	.word	0x08010330
 800efdc:	40200000 	.word	0x40200000
 800efe0:	3ff00000 	.word	0x3ff00000
 800efe4:	3e700000 	.word	0x3e700000
 800efe8:	41700000 	.word	0x41700000
 800efec:	3fe00000 	.word	0x3fe00000
 800eff0:	080102f0 	.word	0x080102f0
 800eff4:	1e62      	subs	r2, r4, #1
 800eff6:	ab0e      	add	r3, sp, #56	; 0x38
 800eff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800effc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f000:	a90e      	add	r1, sp, #56	; 0x38
 800f002:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f006:	e739      	b.n	800ee7c <__kernel_rem_pio2+0x1cc>
 800f008:	1e62      	subs	r2, r4, #1
 800f00a:	ab0e      	add	r3, sp, #56	; 0x38
 800f00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f010:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f014:	e7f4      	b.n	800f000 <__kernel_rem_pio2+0x350>
 800f016:	a90e      	add	r1, sp, #56	; 0x38
 800f018:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f01c:	3b01      	subs	r3, #1
 800f01e:	430a      	orrs	r2, r1
 800f020:	e789      	b.n	800ef36 <__kernel_rem_pio2+0x286>
 800f022:	3301      	adds	r3, #1
 800f024:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f028:	2900      	cmp	r1, #0
 800f02a:	d0fa      	beq.n	800f022 <__kernel_rem_pio2+0x372>
 800f02c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f02e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800f032:	446a      	add	r2, sp
 800f034:	3a98      	subs	r2, #152	; 0x98
 800f036:	920a      	str	r2, [sp, #40]	; 0x28
 800f038:	9a08      	ldr	r2, [sp, #32]
 800f03a:	18e3      	adds	r3, r4, r3
 800f03c:	18a5      	adds	r5, r4, r2
 800f03e:	aa22      	add	r2, sp, #136	; 0x88
 800f040:	f104 0801 	add.w	r8, r4, #1
 800f044:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f048:	9304      	str	r3, [sp, #16]
 800f04a:	9b04      	ldr	r3, [sp, #16]
 800f04c:	4543      	cmp	r3, r8
 800f04e:	da04      	bge.n	800f05a <__kernel_rem_pio2+0x3aa>
 800f050:	461c      	mov	r4, r3
 800f052:	e6a3      	b.n	800ed9c <__kernel_rem_pio2+0xec>
 800f054:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f056:	2301      	movs	r3, #1
 800f058:	e7e4      	b.n	800f024 <__kernel_rem_pio2+0x374>
 800f05a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f05c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f060:	f7f1 fa78 	bl	8000554 <__aeabi_i2d>
 800f064:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f06a:	46ab      	mov	fp, r5
 800f06c:	461c      	mov	r4, r3
 800f06e:	f04f 0900 	mov.w	r9, #0
 800f072:	2600      	movs	r6, #0
 800f074:	2700      	movs	r7, #0
 800f076:	9b06      	ldr	r3, [sp, #24]
 800f078:	4599      	cmp	r9, r3
 800f07a:	dd06      	ble.n	800f08a <__kernel_rem_pio2+0x3da>
 800f07c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f07e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f082:	f108 0801 	add.w	r8, r8, #1
 800f086:	930a      	str	r3, [sp, #40]	; 0x28
 800f088:	e7df      	b.n	800f04a <__kernel_rem_pio2+0x39a>
 800f08a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f08e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f092:	f7f1 fac9 	bl	8000628 <__aeabi_dmul>
 800f096:	4602      	mov	r2, r0
 800f098:	460b      	mov	r3, r1
 800f09a:	4630      	mov	r0, r6
 800f09c:	4639      	mov	r1, r7
 800f09e:	f7f1 f90d 	bl	80002bc <__adddf3>
 800f0a2:	f109 0901 	add.w	r9, r9, #1
 800f0a6:	4606      	mov	r6, r0
 800f0a8:	460f      	mov	r7, r1
 800f0aa:	e7e4      	b.n	800f076 <__kernel_rem_pio2+0x3c6>
 800f0ac:	3d01      	subs	r5, #1
 800f0ae:	e748      	b.n	800ef42 <__kernel_rem_pio2+0x292>
 800f0b0:	ec47 6b10 	vmov	d0, r6, r7
 800f0b4:	f1ca 0000 	rsb	r0, sl, #0
 800f0b8:	f000 fc6e 	bl	800f998 <scalbn>
 800f0bc:	ec57 6b10 	vmov	r6, r7, d0
 800f0c0:	4ba0      	ldr	r3, [pc, #640]	; (800f344 <__kernel_rem_pio2+0x694>)
 800f0c2:	ee10 0a10 	vmov	r0, s0
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	4639      	mov	r1, r7
 800f0ca:	f7f1 fd33 	bl	8000b34 <__aeabi_dcmpge>
 800f0ce:	b1f8      	cbz	r0, 800f110 <__kernel_rem_pio2+0x460>
 800f0d0:	4b9d      	ldr	r3, [pc, #628]	; (800f348 <__kernel_rem_pio2+0x698>)
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	4630      	mov	r0, r6
 800f0d6:	4639      	mov	r1, r7
 800f0d8:	f7f1 faa6 	bl	8000628 <__aeabi_dmul>
 800f0dc:	f7f1 fd54 	bl	8000b88 <__aeabi_d2iz>
 800f0e0:	4680      	mov	r8, r0
 800f0e2:	f7f1 fa37 	bl	8000554 <__aeabi_i2d>
 800f0e6:	4b97      	ldr	r3, [pc, #604]	; (800f344 <__kernel_rem_pio2+0x694>)
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	f7f1 fa9d 	bl	8000628 <__aeabi_dmul>
 800f0ee:	460b      	mov	r3, r1
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	4639      	mov	r1, r7
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	f7f1 f8df 	bl	80002b8 <__aeabi_dsub>
 800f0fa:	f7f1 fd45 	bl	8000b88 <__aeabi_d2iz>
 800f0fe:	1c65      	adds	r5, r4, #1
 800f100:	ab0e      	add	r3, sp, #56	; 0x38
 800f102:	f10a 0a18 	add.w	sl, sl, #24
 800f106:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f10a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f10e:	e720      	b.n	800ef52 <__kernel_rem_pio2+0x2a2>
 800f110:	4630      	mov	r0, r6
 800f112:	4639      	mov	r1, r7
 800f114:	f7f1 fd38 	bl	8000b88 <__aeabi_d2iz>
 800f118:	ab0e      	add	r3, sp, #56	; 0x38
 800f11a:	4625      	mov	r5, r4
 800f11c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f120:	e717      	b.n	800ef52 <__kernel_rem_pio2+0x2a2>
 800f122:	ab0e      	add	r3, sp, #56	; 0x38
 800f124:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f128:	f7f1 fa14 	bl	8000554 <__aeabi_i2d>
 800f12c:	4632      	mov	r2, r6
 800f12e:	463b      	mov	r3, r7
 800f130:	f7f1 fa7a 	bl	8000628 <__aeabi_dmul>
 800f134:	4b84      	ldr	r3, [pc, #528]	; (800f348 <__kernel_rem_pio2+0x698>)
 800f136:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800f13a:	2200      	movs	r2, #0
 800f13c:	4630      	mov	r0, r6
 800f13e:	4639      	mov	r1, r7
 800f140:	f7f1 fa72 	bl	8000628 <__aeabi_dmul>
 800f144:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f148:	4606      	mov	r6, r0
 800f14a:	460f      	mov	r7, r1
 800f14c:	e70f      	b.n	800ef6e <__kernel_rem_pio2+0x2be>
 800f14e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f152:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f156:	f7f1 fa67 	bl	8000628 <__aeabi_dmul>
 800f15a:	4602      	mov	r2, r0
 800f15c:	460b      	mov	r3, r1
 800f15e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f162:	f7f1 f8ab 	bl	80002bc <__adddf3>
 800f166:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f16a:	f108 0801 	add.w	r8, r8, #1
 800f16e:	9b02      	ldr	r3, [sp, #8]
 800f170:	4598      	cmp	r8, r3
 800f172:	dc01      	bgt.n	800f178 <__kernel_rem_pio2+0x4c8>
 800f174:	45b8      	cmp	r8, r7
 800f176:	ddea      	ble.n	800f14e <__kernel_rem_pio2+0x49e>
 800f178:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f17c:	ab4a      	add	r3, sp, #296	; 0x128
 800f17e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f182:	ed87 7b00 	vstr	d7, [r7]
 800f186:	3e01      	subs	r6, #1
 800f188:	e6f8      	b.n	800ef7c <__kernel_rem_pio2+0x2cc>
 800f18a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f18c:	2b02      	cmp	r3, #2
 800f18e:	dc0b      	bgt.n	800f1a8 <__kernel_rem_pio2+0x4f8>
 800f190:	2b00      	cmp	r3, #0
 800f192:	dc35      	bgt.n	800f200 <__kernel_rem_pio2+0x550>
 800f194:	d059      	beq.n	800f24a <__kernel_rem_pio2+0x59a>
 800f196:	9b04      	ldr	r3, [sp, #16]
 800f198:	f003 0007 	and.w	r0, r3, #7
 800f19c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f1a0:	ecbd 8b02 	vpop	{d8}
 800f1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1a8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f1aa:	2b03      	cmp	r3, #3
 800f1ac:	d1f3      	bne.n	800f196 <__kernel_rem_pio2+0x4e6>
 800f1ae:	ab4a      	add	r3, sp, #296	; 0x128
 800f1b0:	4423      	add	r3, r4
 800f1b2:	9306      	str	r3, [sp, #24]
 800f1b4:	461c      	mov	r4, r3
 800f1b6:	469a      	mov	sl, r3
 800f1b8:	9502      	str	r5, [sp, #8]
 800f1ba:	9b02      	ldr	r3, [sp, #8]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f1aa 0a08 	sub.w	sl, sl, #8
 800f1c2:	dc6b      	bgt.n	800f29c <__kernel_rem_pio2+0x5ec>
 800f1c4:	46aa      	mov	sl, r5
 800f1c6:	f1ba 0f01 	cmp.w	sl, #1
 800f1ca:	f1a4 0408 	sub.w	r4, r4, #8
 800f1ce:	f300 8085 	bgt.w	800f2dc <__kernel_rem_pio2+0x62c>
 800f1d2:	9c06      	ldr	r4, [sp, #24]
 800f1d4:	2000      	movs	r0, #0
 800f1d6:	3408      	adds	r4, #8
 800f1d8:	2100      	movs	r1, #0
 800f1da:	2d01      	cmp	r5, #1
 800f1dc:	f300 809d 	bgt.w	800f31a <__kernel_rem_pio2+0x66a>
 800f1e0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f1e4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800f1e8:	f1bb 0f00 	cmp.w	fp, #0
 800f1ec:	f040 809b 	bne.w	800f326 <__kernel_rem_pio2+0x676>
 800f1f0:	9b01      	ldr	r3, [sp, #4]
 800f1f2:	e9c3 5600 	strd	r5, r6, [r3]
 800f1f6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f1fa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f1fe:	e7ca      	b.n	800f196 <__kernel_rem_pio2+0x4e6>
 800f200:	3408      	adds	r4, #8
 800f202:	ab4a      	add	r3, sp, #296	; 0x128
 800f204:	441c      	add	r4, r3
 800f206:	462e      	mov	r6, r5
 800f208:	2000      	movs	r0, #0
 800f20a:	2100      	movs	r1, #0
 800f20c:	2e00      	cmp	r6, #0
 800f20e:	da36      	bge.n	800f27e <__kernel_rem_pio2+0x5ce>
 800f210:	f1bb 0f00 	cmp.w	fp, #0
 800f214:	d039      	beq.n	800f28a <__kernel_rem_pio2+0x5da>
 800f216:	4602      	mov	r2, r0
 800f218:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f21c:	9c01      	ldr	r4, [sp, #4]
 800f21e:	e9c4 2300 	strd	r2, r3, [r4]
 800f222:	4602      	mov	r2, r0
 800f224:	460b      	mov	r3, r1
 800f226:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f22a:	f7f1 f845 	bl	80002b8 <__aeabi_dsub>
 800f22e:	ae4c      	add	r6, sp, #304	; 0x130
 800f230:	2401      	movs	r4, #1
 800f232:	42a5      	cmp	r5, r4
 800f234:	da2c      	bge.n	800f290 <__kernel_rem_pio2+0x5e0>
 800f236:	f1bb 0f00 	cmp.w	fp, #0
 800f23a:	d002      	beq.n	800f242 <__kernel_rem_pio2+0x592>
 800f23c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f240:	4619      	mov	r1, r3
 800f242:	9b01      	ldr	r3, [sp, #4]
 800f244:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f248:	e7a5      	b.n	800f196 <__kernel_rem_pio2+0x4e6>
 800f24a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800f24e:	eb0d 0403 	add.w	r4, sp, r3
 800f252:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f256:	2000      	movs	r0, #0
 800f258:	2100      	movs	r1, #0
 800f25a:	2d00      	cmp	r5, #0
 800f25c:	da09      	bge.n	800f272 <__kernel_rem_pio2+0x5c2>
 800f25e:	f1bb 0f00 	cmp.w	fp, #0
 800f262:	d002      	beq.n	800f26a <__kernel_rem_pio2+0x5ba>
 800f264:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f268:	4619      	mov	r1, r3
 800f26a:	9b01      	ldr	r3, [sp, #4]
 800f26c:	e9c3 0100 	strd	r0, r1, [r3]
 800f270:	e791      	b.n	800f196 <__kernel_rem_pio2+0x4e6>
 800f272:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f276:	f7f1 f821 	bl	80002bc <__adddf3>
 800f27a:	3d01      	subs	r5, #1
 800f27c:	e7ed      	b.n	800f25a <__kernel_rem_pio2+0x5aa>
 800f27e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f282:	f7f1 f81b 	bl	80002bc <__adddf3>
 800f286:	3e01      	subs	r6, #1
 800f288:	e7c0      	b.n	800f20c <__kernel_rem_pio2+0x55c>
 800f28a:	4602      	mov	r2, r0
 800f28c:	460b      	mov	r3, r1
 800f28e:	e7c5      	b.n	800f21c <__kernel_rem_pio2+0x56c>
 800f290:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f294:	f7f1 f812 	bl	80002bc <__adddf3>
 800f298:	3401      	adds	r4, #1
 800f29a:	e7ca      	b.n	800f232 <__kernel_rem_pio2+0x582>
 800f29c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f2a0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f2a4:	9b02      	ldr	r3, [sp, #8]
 800f2a6:	3b01      	subs	r3, #1
 800f2a8:	9302      	str	r3, [sp, #8]
 800f2aa:	4632      	mov	r2, r6
 800f2ac:	463b      	mov	r3, r7
 800f2ae:	4640      	mov	r0, r8
 800f2b0:	4649      	mov	r1, r9
 800f2b2:	f7f1 f803 	bl	80002bc <__adddf3>
 800f2b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	460b      	mov	r3, r1
 800f2be:	4640      	mov	r0, r8
 800f2c0:	4649      	mov	r1, r9
 800f2c2:	f7f0 fff9 	bl	80002b8 <__aeabi_dsub>
 800f2c6:	4632      	mov	r2, r6
 800f2c8:	463b      	mov	r3, r7
 800f2ca:	f7f0 fff7 	bl	80002bc <__adddf3>
 800f2ce:	ed9d 7b08 	vldr	d7, [sp, #32]
 800f2d2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f2d6:	ed8a 7b00 	vstr	d7, [sl]
 800f2da:	e76e      	b.n	800f1ba <__kernel_rem_pio2+0x50a>
 800f2dc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f2e0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f2e4:	4640      	mov	r0, r8
 800f2e6:	4632      	mov	r2, r6
 800f2e8:	463b      	mov	r3, r7
 800f2ea:	4649      	mov	r1, r9
 800f2ec:	f7f0 ffe6 	bl	80002bc <__adddf3>
 800f2f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	460b      	mov	r3, r1
 800f2f8:	4640      	mov	r0, r8
 800f2fa:	4649      	mov	r1, r9
 800f2fc:	f7f0 ffdc 	bl	80002b8 <__aeabi_dsub>
 800f300:	4632      	mov	r2, r6
 800f302:	463b      	mov	r3, r7
 800f304:	f7f0 ffda 	bl	80002bc <__adddf3>
 800f308:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f30c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f310:	ed84 7b00 	vstr	d7, [r4]
 800f314:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f318:	e755      	b.n	800f1c6 <__kernel_rem_pio2+0x516>
 800f31a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f31e:	f7f0 ffcd 	bl	80002bc <__adddf3>
 800f322:	3d01      	subs	r5, #1
 800f324:	e759      	b.n	800f1da <__kernel_rem_pio2+0x52a>
 800f326:	9b01      	ldr	r3, [sp, #4]
 800f328:	9a01      	ldr	r2, [sp, #4]
 800f32a:	601d      	str	r5, [r3, #0]
 800f32c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f330:	605c      	str	r4, [r3, #4]
 800f332:	609f      	str	r7, [r3, #8]
 800f334:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f338:	60d3      	str	r3, [r2, #12]
 800f33a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f33e:	6110      	str	r0, [r2, #16]
 800f340:	6153      	str	r3, [r2, #20]
 800f342:	e728      	b.n	800f196 <__kernel_rem_pio2+0x4e6>
 800f344:	41700000 	.word	0x41700000
 800f348:	3e700000 	.word	0x3e700000
 800f34c:	00000000 	.word	0x00000000

0800f350 <__kernel_sin>:
 800f350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f354:	ed2d 8b04 	vpush	{d8-d9}
 800f358:	eeb0 8a41 	vmov.f32	s16, s2
 800f35c:	eef0 8a61 	vmov.f32	s17, s3
 800f360:	ec55 4b10 	vmov	r4, r5, d0
 800f364:	b083      	sub	sp, #12
 800f366:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f36a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f36e:	9001      	str	r0, [sp, #4]
 800f370:	da06      	bge.n	800f380 <__kernel_sin+0x30>
 800f372:	ee10 0a10 	vmov	r0, s0
 800f376:	4629      	mov	r1, r5
 800f378:	f7f1 fc06 	bl	8000b88 <__aeabi_d2iz>
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d051      	beq.n	800f424 <__kernel_sin+0xd4>
 800f380:	4622      	mov	r2, r4
 800f382:	462b      	mov	r3, r5
 800f384:	4620      	mov	r0, r4
 800f386:	4629      	mov	r1, r5
 800f388:	f7f1 f94e 	bl	8000628 <__aeabi_dmul>
 800f38c:	4682      	mov	sl, r0
 800f38e:	468b      	mov	fp, r1
 800f390:	4602      	mov	r2, r0
 800f392:	460b      	mov	r3, r1
 800f394:	4620      	mov	r0, r4
 800f396:	4629      	mov	r1, r5
 800f398:	f7f1 f946 	bl	8000628 <__aeabi_dmul>
 800f39c:	a341      	add	r3, pc, #260	; (adr r3, 800f4a4 <__kernel_sin+0x154>)
 800f39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a2:	4680      	mov	r8, r0
 800f3a4:	4689      	mov	r9, r1
 800f3a6:	4650      	mov	r0, sl
 800f3a8:	4659      	mov	r1, fp
 800f3aa:	f7f1 f93d 	bl	8000628 <__aeabi_dmul>
 800f3ae:	a33f      	add	r3, pc, #252	; (adr r3, 800f4ac <__kernel_sin+0x15c>)
 800f3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b4:	f7f0 ff80 	bl	80002b8 <__aeabi_dsub>
 800f3b8:	4652      	mov	r2, sl
 800f3ba:	465b      	mov	r3, fp
 800f3bc:	f7f1 f934 	bl	8000628 <__aeabi_dmul>
 800f3c0:	a33c      	add	r3, pc, #240	; (adr r3, 800f4b4 <__kernel_sin+0x164>)
 800f3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c6:	f7f0 ff79 	bl	80002bc <__adddf3>
 800f3ca:	4652      	mov	r2, sl
 800f3cc:	465b      	mov	r3, fp
 800f3ce:	f7f1 f92b 	bl	8000628 <__aeabi_dmul>
 800f3d2:	a33a      	add	r3, pc, #232	; (adr r3, 800f4bc <__kernel_sin+0x16c>)
 800f3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d8:	f7f0 ff6e 	bl	80002b8 <__aeabi_dsub>
 800f3dc:	4652      	mov	r2, sl
 800f3de:	465b      	mov	r3, fp
 800f3e0:	f7f1 f922 	bl	8000628 <__aeabi_dmul>
 800f3e4:	a337      	add	r3, pc, #220	; (adr r3, 800f4c4 <__kernel_sin+0x174>)
 800f3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ea:	f7f0 ff67 	bl	80002bc <__adddf3>
 800f3ee:	9b01      	ldr	r3, [sp, #4]
 800f3f0:	4606      	mov	r6, r0
 800f3f2:	460f      	mov	r7, r1
 800f3f4:	b9eb      	cbnz	r3, 800f432 <__kernel_sin+0xe2>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	4650      	mov	r0, sl
 800f3fc:	4659      	mov	r1, fp
 800f3fe:	f7f1 f913 	bl	8000628 <__aeabi_dmul>
 800f402:	a325      	add	r3, pc, #148	; (adr r3, 800f498 <__kernel_sin+0x148>)
 800f404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f408:	f7f0 ff56 	bl	80002b8 <__aeabi_dsub>
 800f40c:	4642      	mov	r2, r8
 800f40e:	464b      	mov	r3, r9
 800f410:	f7f1 f90a 	bl	8000628 <__aeabi_dmul>
 800f414:	4602      	mov	r2, r0
 800f416:	460b      	mov	r3, r1
 800f418:	4620      	mov	r0, r4
 800f41a:	4629      	mov	r1, r5
 800f41c:	f7f0 ff4e 	bl	80002bc <__adddf3>
 800f420:	4604      	mov	r4, r0
 800f422:	460d      	mov	r5, r1
 800f424:	ec45 4b10 	vmov	d0, r4, r5
 800f428:	b003      	add	sp, #12
 800f42a:	ecbd 8b04 	vpop	{d8-d9}
 800f42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f432:	4b1b      	ldr	r3, [pc, #108]	; (800f4a0 <__kernel_sin+0x150>)
 800f434:	ec51 0b18 	vmov	r0, r1, d8
 800f438:	2200      	movs	r2, #0
 800f43a:	f7f1 f8f5 	bl	8000628 <__aeabi_dmul>
 800f43e:	4632      	mov	r2, r6
 800f440:	ec41 0b19 	vmov	d9, r0, r1
 800f444:	463b      	mov	r3, r7
 800f446:	4640      	mov	r0, r8
 800f448:	4649      	mov	r1, r9
 800f44a:	f7f1 f8ed 	bl	8000628 <__aeabi_dmul>
 800f44e:	4602      	mov	r2, r0
 800f450:	460b      	mov	r3, r1
 800f452:	ec51 0b19 	vmov	r0, r1, d9
 800f456:	f7f0 ff2f 	bl	80002b8 <__aeabi_dsub>
 800f45a:	4652      	mov	r2, sl
 800f45c:	465b      	mov	r3, fp
 800f45e:	f7f1 f8e3 	bl	8000628 <__aeabi_dmul>
 800f462:	ec53 2b18 	vmov	r2, r3, d8
 800f466:	f7f0 ff27 	bl	80002b8 <__aeabi_dsub>
 800f46a:	a30b      	add	r3, pc, #44	; (adr r3, 800f498 <__kernel_sin+0x148>)
 800f46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f470:	4606      	mov	r6, r0
 800f472:	460f      	mov	r7, r1
 800f474:	4640      	mov	r0, r8
 800f476:	4649      	mov	r1, r9
 800f478:	f7f1 f8d6 	bl	8000628 <__aeabi_dmul>
 800f47c:	4602      	mov	r2, r0
 800f47e:	460b      	mov	r3, r1
 800f480:	4630      	mov	r0, r6
 800f482:	4639      	mov	r1, r7
 800f484:	f7f0 ff1a 	bl	80002bc <__adddf3>
 800f488:	4602      	mov	r2, r0
 800f48a:	460b      	mov	r3, r1
 800f48c:	4620      	mov	r0, r4
 800f48e:	4629      	mov	r1, r5
 800f490:	f7f0 ff12 	bl	80002b8 <__aeabi_dsub>
 800f494:	e7c4      	b.n	800f420 <__kernel_sin+0xd0>
 800f496:	bf00      	nop
 800f498:	55555549 	.word	0x55555549
 800f49c:	3fc55555 	.word	0x3fc55555
 800f4a0:	3fe00000 	.word	0x3fe00000
 800f4a4:	5acfd57c 	.word	0x5acfd57c
 800f4a8:	3de5d93a 	.word	0x3de5d93a
 800f4ac:	8a2b9ceb 	.word	0x8a2b9ceb
 800f4b0:	3e5ae5e6 	.word	0x3e5ae5e6
 800f4b4:	57b1fe7d 	.word	0x57b1fe7d
 800f4b8:	3ec71de3 	.word	0x3ec71de3
 800f4bc:	19c161d5 	.word	0x19c161d5
 800f4c0:	3f2a01a0 	.word	0x3f2a01a0
 800f4c4:	1110f8a6 	.word	0x1110f8a6
 800f4c8:	3f811111 	.word	0x3f811111

0800f4cc <with_errno>:
 800f4cc:	b570      	push	{r4, r5, r6, lr}
 800f4ce:	4604      	mov	r4, r0
 800f4d0:	460d      	mov	r5, r1
 800f4d2:	4616      	mov	r6, r2
 800f4d4:	f7fb fb8c 	bl	800abf0 <__errno>
 800f4d8:	4629      	mov	r1, r5
 800f4da:	6006      	str	r6, [r0, #0]
 800f4dc:	4620      	mov	r0, r4
 800f4de:	bd70      	pop	{r4, r5, r6, pc}

0800f4e0 <xflow>:
 800f4e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4e2:	4614      	mov	r4, r2
 800f4e4:	461d      	mov	r5, r3
 800f4e6:	b108      	cbz	r0, 800f4ec <xflow+0xc>
 800f4e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f4ec:	e9cd 2300 	strd	r2, r3, [sp]
 800f4f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	4629      	mov	r1, r5
 800f4f8:	f7f1 f896 	bl	8000628 <__aeabi_dmul>
 800f4fc:	2222      	movs	r2, #34	; 0x22
 800f4fe:	b003      	add	sp, #12
 800f500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f504:	f7ff bfe2 	b.w	800f4cc <with_errno>

0800f508 <__math_uflow>:
 800f508:	b508      	push	{r3, lr}
 800f50a:	2200      	movs	r2, #0
 800f50c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f510:	f7ff ffe6 	bl	800f4e0 <xflow>
 800f514:	ec41 0b10 	vmov	d0, r0, r1
 800f518:	bd08      	pop	{r3, pc}

0800f51a <__math_oflow>:
 800f51a:	b508      	push	{r3, lr}
 800f51c:	2200      	movs	r2, #0
 800f51e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f522:	f7ff ffdd 	bl	800f4e0 <xflow>
 800f526:	ec41 0b10 	vmov	d0, r0, r1
 800f52a:	bd08      	pop	{r3, pc}
 800f52c:	0000      	movs	r0, r0
	...

0800f530 <atan>:
 800f530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f534:	ec55 4b10 	vmov	r4, r5, d0
 800f538:	4bc3      	ldr	r3, [pc, #780]	; (800f848 <atan+0x318>)
 800f53a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f53e:	429e      	cmp	r6, r3
 800f540:	46ab      	mov	fp, r5
 800f542:	dd18      	ble.n	800f576 <atan+0x46>
 800f544:	4bc1      	ldr	r3, [pc, #772]	; (800f84c <atan+0x31c>)
 800f546:	429e      	cmp	r6, r3
 800f548:	dc01      	bgt.n	800f54e <atan+0x1e>
 800f54a:	d109      	bne.n	800f560 <atan+0x30>
 800f54c:	b144      	cbz	r4, 800f560 <atan+0x30>
 800f54e:	4622      	mov	r2, r4
 800f550:	462b      	mov	r3, r5
 800f552:	4620      	mov	r0, r4
 800f554:	4629      	mov	r1, r5
 800f556:	f7f0 feb1 	bl	80002bc <__adddf3>
 800f55a:	4604      	mov	r4, r0
 800f55c:	460d      	mov	r5, r1
 800f55e:	e006      	b.n	800f56e <atan+0x3e>
 800f560:	f1bb 0f00 	cmp.w	fp, #0
 800f564:	f300 8131 	bgt.w	800f7ca <atan+0x29a>
 800f568:	a59b      	add	r5, pc, #620	; (adr r5, 800f7d8 <atan+0x2a8>)
 800f56a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f56e:	ec45 4b10 	vmov	d0, r4, r5
 800f572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f576:	4bb6      	ldr	r3, [pc, #728]	; (800f850 <atan+0x320>)
 800f578:	429e      	cmp	r6, r3
 800f57a:	dc14      	bgt.n	800f5a6 <atan+0x76>
 800f57c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f580:	429e      	cmp	r6, r3
 800f582:	dc0d      	bgt.n	800f5a0 <atan+0x70>
 800f584:	a396      	add	r3, pc, #600	; (adr r3, 800f7e0 <atan+0x2b0>)
 800f586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58a:	ee10 0a10 	vmov	r0, s0
 800f58e:	4629      	mov	r1, r5
 800f590:	f7f0 fe94 	bl	80002bc <__adddf3>
 800f594:	4baf      	ldr	r3, [pc, #700]	; (800f854 <atan+0x324>)
 800f596:	2200      	movs	r2, #0
 800f598:	f7f1 fad6 	bl	8000b48 <__aeabi_dcmpgt>
 800f59c:	2800      	cmp	r0, #0
 800f59e:	d1e6      	bne.n	800f56e <atan+0x3e>
 800f5a0:	f04f 3aff 	mov.w	sl, #4294967295
 800f5a4:	e02b      	b.n	800f5fe <atan+0xce>
 800f5a6:	f000 f963 	bl	800f870 <fabs>
 800f5aa:	4bab      	ldr	r3, [pc, #684]	; (800f858 <atan+0x328>)
 800f5ac:	429e      	cmp	r6, r3
 800f5ae:	ec55 4b10 	vmov	r4, r5, d0
 800f5b2:	f300 80bf 	bgt.w	800f734 <atan+0x204>
 800f5b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f5ba:	429e      	cmp	r6, r3
 800f5bc:	f300 80a0 	bgt.w	800f700 <atan+0x1d0>
 800f5c0:	ee10 2a10 	vmov	r2, s0
 800f5c4:	ee10 0a10 	vmov	r0, s0
 800f5c8:	462b      	mov	r3, r5
 800f5ca:	4629      	mov	r1, r5
 800f5cc:	f7f0 fe76 	bl	80002bc <__adddf3>
 800f5d0:	4ba0      	ldr	r3, [pc, #640]	; (800f854 <atan+0x324>)
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	f7f0 fe70 	bl	80002b8 <__aeabi_dsub>
 800f5d8:	2200      	movs	r2, #0
 800f5da:	4606      	mov	r6, r0
 800f5dc:	460f      	mov	r7, r1
 800f5de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	4629      	mov	r1, r5
 800f5e6:	f7f0 fe69 	bl	80002bc <__adddf3>
 800f5ea:	4602      	mov	r2, r0
 800f5ec:	460b      	mov	r3, r1
 800f5ee:	4630      	mov	r0, r6
 800f5f0:	4639      	mov	r1, r7
 800f5f2:	f7f1 f943 	bl	800087c <__aeabi_ddiv>
 800f5f6:	f04f 0a00 	mov.w	sl, #0
 800f5fa:	4604      	mov	r4, r0
 800f5fc:	460d      	mov	r5, r1
 800f5fe:	4622      	mov	r2, r4
 800f600:	462b      	mov	r3, r5
 800f602:	4620      	mov	r0, r4
 800f604:	4629      	mov	r1, r5
 800f606:	f7f1 f80f 	bl	8000628 <__aeabi_dmul>
 800f60a:	4602      	mov	r2, r0
 800f60c:	460b      	mov	r3, r1
 800f60e:	4680      	mov	r8, r0
 800f610:	4689      	mov	r9, r1
 800f612:	f7f1 f809 	bl	8000628 <__aeabi_dmul>
 800f616:	a374      	add	r3, pc, #464	; (adr r3, 800f7e8 <atan+0x2b8>)
 800f618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61c:	4606      	mov	r6, r0
 800f61e:	460f      	mov	r7, r1
 800f620:	f7f1 f802 	bl	8000628 <__aeabi_dmul>
 800f624:	a372      	add	r3, pc, #456	; (adr r3, 800f7f0 <atan+0x2c0>)
 800f626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62a:	f7f0 fe47 	bl	80002bc <__adddf3>
 800f62e:	4632      	mov	r2, r6
 800f630:	463b      	mov	r3, r7
 800f632:	f7f0 fff9 	bl	8000628 <__aeabi_dmul>
 800f636:	a370      	add	r3, pc, #448	; (adr r3, 800f7f8 <atan+0x2c8>)
 800f638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f63c:	f7f0 fe3e 	bl	80002bc <__adddf3>
 800f640:	4632      	mov	r2, r6
 800f642:	463b      	mov	r3, r7
 800f644:	f7f0 fff0 	bl	8000628 <__aeabi_dmul>
 800f648:	a36d      	add	r3, pc, #436	; (adr r3, 800f800 <atan+0x2d0>)
 800f64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f64e:	f7f0 fe35 	bl	80002bc <__adddf3>
 800f652:	4632      	mov	r2, r6
 800f654:	463b      	mov	r3, r7
 800f656:	f7f0 ffe7 	bl	8000628 <__aeabi_dmul>
 800f65a:	a36b      	add	r3, pc, #428	; (adr r3, 800f808 <atan+0x2d8>)
 800f65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f660:	f7f0 fe2c 	bl	80002bc <__adddf3>
 800f664:	4632      	mov	r2, r6
 800f666:	463b      	mov	r3, r7
 800f668:	f7f0 ffde 	bl	8000628 <__aeabi_dmul>
 800f66c:	a368      	add	r3, pc, #416	; (adr r3, 800f810 <atan+0x2e0>)
 800f66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f672:	f7f0 fe23 	bl	80002bc <__adddf3>
 800f676:	4642      	mov	r2, r8
 800f678:	464b      	mov	r3, r9
 800f67a:	f7f0 ffd5 	bl	8000628 <__aeabi_dmul>
 800f67e:	a366      	add	r3, pc, #408	; (adr r3, 800f818 <atan+0x2e8>)
 800f680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f684:	4680      	mov	r8, r0
 800f686:	4689      	mov	r9, r1
 800f688:	4630      	mov	r0, r6
 800f68a:	4639      	mov	r1, r7
 800f68c:	f7f0 ffcc 	bl	8000628 <__aeabi_dmul>
 800f690:	a363      	add	r3, pc, #396	; (adr r3, 800f820 <atan+0x2f0>)
 800f692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f696:	f7f0 fe0f 	bl	80002b8 <__aeabi_dsub>
 800f69a:	4632      	mov	r2, r6
 800f69c:	463b      	mov	r3, r7
 800f69e:	f7f0 ffc3 	bl	8000628 <__aeabi_dmul>
 800f6a2:	a361      	add	r3, pc, #388	; (adr r3, 800f828 <atan+0x2f8>)
 800f6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a8:	f7f0 fe06 	bl	80002b8 <__aeabi_dsub>
 800f6ac:	4632      	mov	r2, r6
 800f6ae:	463b      	mov	r3, r7
 800f6b0:	f7f0 ffba 	bl	8000628 <__aeabi_dmul>
 800f6b4:	a35e      	add	r3, pc, #376	; (adr r3, 800f830 <atan+0x300>)
 800f6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ba:	f7f0 fdfd 	bl	80002b8 <__aeabi_dsub>
 800f6be:	4632      	mov	r2, r6
 800f6c0:	463b      	mov	r3, r7
 800f6c2:	f7f0 ffb1 	bl	8000628 <__aeabi_dmul>
 800f6c6:	a35c      	add	r3, pc, #368	; (adr r3, 800f838 <atan+0x308>)
 800f6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6cc:	f7f0 fdf4 	bl	80002b8 <__aeabi_dsub>
 800f6d0:	4632      	mov	r2, r6
 800f6d2:	463b      	mov	r3, r7
 800f6d4:	f7f0 ffa8 	bl	8000628 <__aeabi_dmul>
 800f6d8:	4602      	mov	r2, r0
 800f6da:	460b      	mov	r3, r1
 800f6dc:	4640      	mov	r0, r8
 800f6de:	4649      	mov	r1, r9
 800f6e0:	f7f0 fdec 	bl	80002bc <__adddf3>
 800f6e4:	4622      	mov	r2, r4
 800f6e6:	462b      	mov	r3, r5
 800f6e8:	f7f0 ff9e 	bl	8000628 <__aeabi_dmul>
 800f6ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	460b      	mov	r3, r1
 800f6f4:	d14b      	bne.n	800f78e <atan+0x25e>
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	4629      	mov	r1, r5
 800f6fa:	f7f0 fddd 	bl	80002b8 <__aeabi_dsub>
 800f6fe:	e72c      	b.n	800f55a <atan+0x2a>
 800f700:	ee10 0a10 	vmov	r0, s0
 800f704:	4b53      	ldr	r3, [pc, #332]	; (800f854 <atan+0x324>)
 800f706:	2200      	movs	r2, #0
 800f708:	4629      	mov	r1, r5
 800f70a:	f7f0 fdd5 	bl	80002b8 <__aeabi_dsub>
 800f70e:	4b51      	ldr	r3, [pc, #324]	; (800f854 <atan+0x324>)
 800f710:	4606      	mov	r6, r0
 800f712:	460f      	mov	r7, r1
 800f714:	2200      	movs	r2, #0
 800f716:	4620      	mov	r0, r4
 800f718:	4629      	mov	r1, r5
 800f71a:	f7f0 fdcf 	bl	80002bc <__adddf3>
 800f71e:	4602      	mov	r2, r0
 800f720:	460b      	mov	r3, r1
 800f722:	4630      	mov	r0, r6
 800f724:	4639      	mov	r1, r7
 800f726:	f7f1 f8a9 	bl	800087c <__aeabi_ddiv>
 800f72a:	f04f 0a01 	mov.w	sl, #1
 800f72e:	4604      	mov	r4, r0
 800f730:	460d      	mov	r5, r1
 800f732:	e764      	b.n	800f5fe <atan+0xce>
 800f734:	4b49      	ldr	r3, [pc, #292]	; (800f85c <atan+0x32c>)
 800f736:	429e      	cmp	r6, r3
 800f738:	da1d      	bge.n	800f776 <atan+0x246>
 800f73a:	ee10 0a10 	vmov	r0, s0
 800f73e:	4b48      	ldr	r3, [pc, #288]	; (800f860 <atan+0x330>)
 800f740:	2200      	movs	r2, #0
 800f742:	4629      	mov	r1, r5
 800f744:	f7f0 fdb8 	bl	80002b8 <__aeabi_dsub>
 800f748:	4b45      	ldr	r3, [pc, #276]	; (800f860 <atan+0x330>)
 800f74a:	4606      	mov	r6, r0
 800f74c:	460f      	mov	r7, r1
 800f74e:	2200      	movs	r2, #0
 800f750:	4620      	mov	r0, r4
 800f752:	4629      	mov	r1, r5
 800f754:	f7f0 ff68 	bl	8000628 <__aeabi_dmul>
 800f758:	4b3e      	ldr	r3, [pc, #248]	; (800f854 <atan+0x324>)
 800f75a:	2200      	movs	r2, #0
 800f75c:	f7f0 fdae 	bl	80002bc <__adddf3>
 800f760:	4602      	mov	r2, r0
 800f762:	460b      	mov	r3, r1
 800f764:	4630      	mov	r0, r6
 800f766:	4639      	mov	r1, r7
 800f768:	f7f1 f888 	bl	800087c <__aeabi_ddiv>
 800f76c:	f04f 0a02 	mov.w	sl, #2
 800f770:	4604      	mov	r4, r0
 800f772:	460d      	mov	r5, r1
 800f774:	e743      	b.n	800f5fe <atan+0xce>
 800f776:	462b      	mov	r3, r5
 800f778:	ee10 2a10 	vmov	r2, s0
 800f77c:	4939      	ldr	r1, [pc, #228]	; (800f864 <atan+0x334>)
 800f77e:	2000      	movs	r0, #0
 800f780:	f7f1 f87c 	bl	800087c <__aeabi_ddiv>
 800f784:	f04f 0a03 	mov.w	sl, #3
 800f788:	4604      	mov	r4, r0
 800f78a:	460d      	mov	r5, r1
 800f78c:	e737      	b.n	800f5fe <atan+0xce>
 800f78e:	4b36      	ldr	r3, [pc, #216]	; (800f868 <atan+0x338>)
 800f790:	4e36      	ldr	r6, [pc, #216]	; (800f86c <atan+0x33c>)
 800f792:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f796:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f79a:	e9da 2300 	ldrd	r2, r3, [sl]
 800f79e:	f7f0 fd8b 	bl	80002b8 <__aeabi_dsub>
 800f7a2:	4622      	mov	r2, r4
 800f7a4:	462b      	mov	r3, r5
 800f7a6:	f7f0 fd87 	bl	80002b8 <__aeabi_dsub>
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f7b2:	f7f0 fd81 	bl	80002b8 <__aeabi_dsub>
 800f7b6:	f1bb 0f00 	cmp.w	fp, #0
 800f7ba:	4604      	mov	r4, r0
 800f7bc:	460d      	mov	r5, r1
 800f7be:	f6bf aed6 	bge.w	800f56e <atan+0x3e>
 800f7c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f7c6:	461d      	mov	r5, r3
 800f7c8:	e6d1      	b.n	800f56e <atan+0x3e>
 800f7ca:	a51d      	add	r5, pc, #116	; (adr r5, 800f840 <atan+0x310>)
 800f7cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f7d0:	e6cd      	b.n	800f56e <atan+0x3e>
 800f7d2:	bf00      	nop
 800f7d4:	f3af 8000 	nop.w
 800f7d8:	54442d18 	.word	0x54442d18
 800f7dc:	bff921fb 	.word	0xbff921fb
 800f7e0:	8800759c 	.word	0x8800759c
 800f7e4:	7e37e43c 	.word	0x7e37e43c
 800f7e8:	e322da11 	.word	0xe322da11
 800f7ec:	3f90ad3a 	.word	0x3f90ad3a
 800f7f0:	24760deb 	.word	0x24760deb
 800f7f4:	3fa97b4b 	.word	0x3fa97b4b
 800f7f8:	a0d03d51 	.word	0xa0d03d51
 800f7fc:	3fb10d66 	.word	0x3fb10d66
 800f800:	c54c206e 	.word	0xc54c206e
 800f804:	3fb745cd 	.word	0x3fb745cd
 800f808:	920083ff 	.word	0x920083ff
 800f80c:	3fc24924 	.word	0x3fc24924
 800f810:	5555550d 	.word	0x5555550d
 800f814:	3fd55555 	.word	0x3fd55555
 800f818:	2c6a6c2f 	.word	0x2c6a6c2f
 800f81c:	bfa2b444 	.word	0xbfa2b444
 800f820:	52defd9a 	.word	0x52defd9a
 800f824:	3fadde2d 	.word	0x3fadde2d
 800f828:	af749a6d 	.word	0xaf749a6d
 800f82c:	3fb3b0f2 	.word	0x3fb3b0f2
 800f830:	fe231671 	.word	0xfe231671
 800f834:	3fbc71c6 	.word	0x3fbc71c6
 800f838:	9998ebc4 	.word	0x9998ebc4
 800f83c:	3fc99999 	.word	0x3fc99999
 800f840:	54442d18 	.word	0x54442d18
 800f844:	3ff921fb 	.word	0x3ff921fb
 800f848:	440fffff 	.word	0x440fffff
 800f84c:	7ff00000 	.word	0x7ff00000
 800f850:	3fdbffff 	.word	0x3fdbffff
 800f854:	3ff00000 	.word	0x3ff00000
 800f858:	3ff2ffff 	.word	0x3ff2ffff
 800f85c:	40038000 	.word	0x40038000
 800f860:	3ff80000 	.word	0x3ff80000
 800f864:	bff00000 	.word	0xbff00000
 800f868:	08010360 	.word	0x08010360
 800f86c:	08010340 	.word	0x08010340

0800f870 <fabs>:
 800f870:	ec51 0b10 	vmov	r0, r1, d0
 800f874:	ee10 2a10 	vmov	r2, s0
 800f878:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f87c:	ec43 2b10 	vmov	d0, r2, r3
 800f880:	4770      	bx	lr

0800f882 <finite>:
 800f882:	b082      	sub	sp, #8
 800f884:	ed8d 0b00 	vstr	d0, [sp]
 800f888:	9801      	ldr	r0, [sp, #4]
 800f88a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f88e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f892:	0fc0      	lsrs	r0, r0, #31
 800f894:	b002      	add	sp, #8
 800f896:	4770      	bx	lr

0800f898 <floor>:
 800f898:	ec51 0b10 	vmov	r0, r1, d0
 800f89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f8a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f8a8:	2e13      	cmp	r6, #19
 800f8aa:	ee10 5a10 	vmov	r5, s0
 800f8ae:	ee10 8a10 	vmov	r8, s0
 800f8b2:	460c      	mov	r4, r1
 800f8b4:	dc32      	bgt.n	800f91c <floor+0x84>
 800f8b6:	2e00      	cmp	r6, #0
 800f8b8:	da14      	bge.n	800f8e4 <floor+0x4c>
 800f8ba:	a333      	add	r3, pc, #204	; (adr r3, 800f988 <floor+0xf0>)
 800f8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c0:	f7f0 fcfc 	bl	80002bc <__adddf3>
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	f7f1 f93e 	bl	8000b48 <__aeabi_dcmpgt>
 800f8cc:	b138      	cbz	r0, 800f8de <floor+0x46>
 800f8ce:	2c00      	cmp	r4, #0
 800f8d0:	da57      	bge.n	800f982 <floor+0xea>
 800f8d2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f8d6:	431d      	orrs	r5, r3
 800f8d8:	d001      	beq.n	800f8de <floor+0x46>
 800f8da:	4c2d      	ldr	r4, [pc, #180]	; (800f990 <floor+0xf8>)
 800f8dc:	2500      	movs	r5, #0
 800f8de:	4621      	mov	r1, r4
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	e025      	b.n	800f930 <floor+0x98>
 800f8e4:	4f2b      	ldr	r7, [pc, #172]	; (800f994 <floor+0xfc>)
 800f8e6:	4137      	asrs	r7, r6
 800f8e8:	ea01 0307 	and.w	r3, r1, r7
 800f8ec:	4303      	orrs	r3, r0
 800f8ee:	d01f      	beq.n	800f930 <floor+0x98>
 800f8f0:	a325      	add	r3, pc, #148	; (adr r3, 800f988 <floor+0xf0>)
 800f8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f6:	f7f0 fce1 	bl	80002bc <__adddf3>
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	f7f1 f923 	bl	8000b48 <__aeabi_dcmpgt>
 800f902:	2800      	cmp	r0, #0
 800f904:	d0eb      	beq.n	800f8de <floor+0x46>
 800f906:	2c00      	cmp	r4, #0
 800f908:	bfbe      	ittt	lt
 800f90a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f90e:	fa43 f606 	asrlt.w	r6, r3, r6
 800f912:	19a4      	addlt	r4, r4, r6
 800f914:	ea24 0407 	bic.w	r4, r4, r7
 800f918:	2500      	movs	r5, #0
 800f91a:	e7e0      	b.n	800f8de <floor+0x46>
 800f91c:	2e33      	cmp	r6, #51	; 0x33
 800f91e:	dd0b      	ble.n	800f938 <floor+0xa0>
 800f920:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f924:	d104      	bne.n	800f930 <floor+0x98>
 800f926:	ee10 2a10 	vmov	r2, s0
 800f92a:	460b      	mov	r3, r1
 800f92c:	f7f0 fcc6 	bl	80002bc <__adddf3>
 800f930:	ec41 0b10 	vmov	d0, r0, r1
 800f934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f938:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f93c:	f04f 33ff 	mov.w	r3, #4294967295
 800f940:	fa23 f707 	lsr.w	r7, r3, r7
 800f944:	4207      	tst	r7, r0
 800f946:	d0f3      	beq.n	800f930 <floor+0x98>
 800f948:	a30f      	add	r3, pc, #60	; (adr r3, 800f988 <floor+0xf0>)
 800f94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f94e:	f7f0 fcb5 	bl	80002bc <__adddf3>
 800f952:	2200      	movs	r2, #0
 800f954:	2300      	movs	r3, #0
 800f956:	f7f1 f8f7 	bl	8000b48 <__aeabi_dcmpgt>
 800f95a:	2800      	cmp	r0, #0
 800f95c:	d0bf      	beq.n	800f8de <floor+0x46>
 800f95e:	2c00      	cmp	r4, #0
 800f960:	da02      	bge.n	800f968 <floor+0xd0>
 800f962:	2e14      	cmp	r6, #20
 800f964:	d103      	bne.n	800f96e <floor+0xd6>
 800f966:	3401      	adds	r4, #1
 800f968:	ea25 0507 	bic.w	r5, r5, r7
 800f96c:	e7b7      	b.n	800f8de <floor+0x46>
 800f96e:	2301      	movs	r3, #1
 800f970:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f974:	fa03 f606 	lsl.w	r6, r3, r6
 800f978:	4435      	add	r5, r6
 800f97a:	4545      	cmp	r5, r8
 800f97c:	bf38      	it	cc
 800f97e:	18e4      	addcc	r4, r4, r3
 800f980:	e7f2      	b.n	800f968 <floor+0xd0>
 800f982:	2500      	movs	r5, #0
 800f984:	462c      	mov	r4, r5
 800f986:	e7aa      	b.n	800f8de <floor+0x46>
 800f988:	8800759c 	.word	0x8800759c
 800f98c:	7e37e43c 	.word	0x7e37e43c
 800f990:	bff00000 	.word	0xbff00000
 800f994:	000fffff 	.word	0x000fffff

0800f998 <scalbn>:
 800f998:	b570      	push	{r4, r5, r6, lr}
 800f99a:	ec55 4b10 	vmov	r4, r5, d0
 800f99e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f9a2:	4606      	mov	r6, r0
 800f9a4:	462b      	mov	r3, r5
 800f9a6:	b99a      	cbnz	r2, 800f9d0 <scalbn+0x38>
 800f9a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f9ac:	4323      	orrs	r3, r4
 800f9ae:	d036      	beq.n	800fa1e <scalbn+0x86>
 800f9b0:	4b39      	ldr	r3, [pc, #228]	; (800fa98 <scalbn+0x100>)
 800f9b2:	4629      	mov	r1, r5
 800f9b4:	ee10 0a10 	vmov	r0, s0
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	f7f0 fe35 	bl	8000628 <__aeabi_dmul>
 800f9be:	4b37      	ldr	r3, [pc, #220]	; (800fa9c <scalbn+0x104>)
 800f9c0:	429e      	cmp	r6, r3
 800f9c2:	4604      	mov	r4, r0
 800f9c4:	460d      	mov	r5, r1
 800f9c6:	da10      	bge.n	800f9ea <scalbn+0x52>
 800f9c8:	a32b      	add	r3, pc, #172	; (adr r3, 800fa78 <scalbn+0xe0>)
 800f9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ce:	e03a      	b.n	800fa46 <scalbn+0xae>
 800f9d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f9d4:	428a      	cmp	r2, r1
 800f9d6:	d10c      	bne.n	800f9f2 <scalbn+0x5a>
 800f9d8:	ee10 2a10 	vmov	r2, s0
 800f9dc:	4620      	mov	r0, r4
 800f9de:	4629      	mov	r1, r5
 800f9e0:	f7f0 fc6c 	bl	80002bc <__adddf3>
 800f9e4:	4604      	mov	r4, r0
 800f9e6:	460d      	mov	r5, r1
 800f9e8:	e019      	b.n	800fa1e <scalbn+0x86>
 800f9ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f9ee:	460b      	mov	r3, r1
 800f9f0:	3a36      	subs	r2, #54	; 0x36
 800f9f2:	4432      	add	r2, r6
 800f9f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f9f8:	428a      	cmp	r2, r1
 800f9fa:	dd08      	ble.n	800fa0e <scalbn+0x76>
 800f9fc:	2d00      	cmp	r5, #0
 800f9fe:	a120      	add	r1, pc, #128	; (adr r1, 800fa80 <scalbn+0xe8>)
 800fa00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa04:	da1c      	bge.n	800fa40 <scalbn+0xa8>
 800fa06:	a120      	add	r1, pc, #128	; (adr r1, 800fa88 <scalbn+0xf0>)
 800fa08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa0c:	e018      	b.n	800fa40 <scalbn+0xa8>
 800fa0e:	2a00      	cmp	r2, #0
 800fa10:	dd08      	ble.n	800fa24 <scalbn+0x8c>
 800fa12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fa16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fa1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fa1e:	ec45 4b10 	vmov	d0, r4, r5
 800fa22:	bd70      	pop	{r4, r5, r6, pc}
 800fa24:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fa28:	da19      	bge.n	800fa5e <scalbn+0xc6>
 800fa2a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fa2e:	429e      	cmp	r6, r3
 800fa30:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800fa34:	dd0a      	ble.n	800fa4c <scalbn+0xb4>
 800fa36:	a112      	add	r1, pc, #72	; (adr r1, 800fa80 <scalbn+0xe8>)
 800fa38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d1e2      	bne.n	800fa06 <scalbn+0x6e>
 800fa40:	a30f      	add	r3, pc, #60	; (adr r3, 800fa80 <scalbn+0xe8>)
 800fa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa46:	f7f0 fdef 	bl	8000628 <__aeabi_dmul>
 800fa4a:	e7cb      	b.n	800f9e4 <scalbn+0x4c>
 800fa4c:	a10a      	add	r1, pc, #40	; (adr r1, 800fa78 <scalbn+0xe0>)
 800fa4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d0b8      	beq.n	800f9c8 <scalbn+0x30>
 800fa56:	a10e      	add	r1, pc, #56	; (adr r1, 800fa90 <scalbn+0xf8>)
 800fa58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa5c:	e7b4      	b.n	800f9c8 <scalbn+0x30>
 800fa5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fa62:	3236      	adds	r2, #54	; 0x36
 800fa64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fa68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fa6c:	4620      	mov	r0, r4
 800fa6e:	4b0c      	ldr	r3, [pc, #48]	; (800faa0 <scalbn+0x108>)
 800fa70:	2200      	movs	r2, #0
 800fa72:	e7e8      	b.n	800fa46 <scalbn+0xae>
 800fa74:	f3af 8000 	nop.w
 800fa78:	c2f8f359 	.word	0xc2f8f359
 800fa7c:	01a56e1f 	.word	0x01a56e1f
 800fa80:	8800759c 	.word	0x8800759c
 800fa84:	7e37e43c 	.word	0x7e37e43c
 800fa88:	8800759c 	.word	0x8800759c
 800fa8c:	fe37e43c 	.word	0xfe37e43c
 800fa90:	c2f8f359 	.word	0xc2f8f359
 800fa94:	81a56e1f 	.word	0x81a56e1f
 800fa98:	43500000 	.word	0x43500000
 800fa9c:	ffff3cb0 	.word	0xffff3cb0
 800faa0:	3c900000 	.word	0x3c900000

0800faa4 <_sbrk>:
 800faa4:	4a04      	ldr	r2, [pc, #16]	; (800fab8 <_sbrk+0x14>)
 800faa6:	6811      	ldr	r1, [r2, #0]
 800faa8:	4603      	mov	r3, r0
 800faaa:	b909      	cbnz	r1, 800fab0 <_sbrk+0xc>
 800faac:	4903      	ldr	r1, [pc, #12]	; (800fabc <_sbrk+0x18>)
 800faae:	6011      	str	r1, [r2, #0]
 800fab0:	6810      	ldr	r0, [r2, #0]
 800fab2:	4403      	add	r3, r0
 800fab4:	6013      	str	r3, [r2, #0]
 800fab6:	4770      	bx	lr
 800fab8:	200138bc 	.word	0x200138bc
 800fabc:	20000527 	.word	0x20000527

0800fac0 <_init>:
 800fac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fac2:	bf00      	nop
 800fac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fac6:	bc08      	pop	{r3}
 800fac8:	469e      	mov	lr, r3
 800faca:	4770      	bx	lr

0800facc <_fini>:
 800facc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800face:	bf00      	nop
 800fad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fad2:	bc08      	pop	{r3}
 800fad4:	469e      	mov	lr, r3
 800fad6:	4770      	bx	lr
