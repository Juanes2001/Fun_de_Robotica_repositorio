
Pruebas_sin_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008880  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08008a20  08008a20  00018a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eb0  08008eb0  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008eb0  08008eb0  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008eb0  08008eb0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eb0  08008eb0  00018eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008eb4  08008eb4  00018eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001d8  08009090  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08009090  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006223  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014cc  00000000  00000000  0002642b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e8  00000000  00000000  000278f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000530  00000000  00000000  00027ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012134  00000000  00000000  00028410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007745  00000000  00000000  0003a544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060f28  00000000  00000000  00041c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a2bb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002964  00000000  00000000  000a2c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a08 	.word	0x08008a08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08008a08 	.word	0x08008a08

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <main>:
uint32_t tiempo = 0;
float calibr    = 0;


int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0


	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <main+0x90>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <main+0x90>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88




	inSystem ();
 8000cac:	f000 f84a 	bl	8000d44 <inSystem>
	while(1){




		if (rxData != '\0'){
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <main+0x94>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d0fb      	beq.n	8000cb0 <main+0x18>
			writeChar(&handlerUSART1, rxData);
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <main+0x94>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	481c      	ldr	r0, [pc, #112]	; (8000d30 <main+0x98>)
 8000cc0:	f003 fe2c 	bl	800491c <writeChar>
			bufferReception[counterReception] = rxData;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <main+0x9c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <main+0x94>)
 8000ccc:	7819      	ldrb	r1, [r3, #0]
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <main+0xa0>)
 8000cd0:	5499      	strb	r1, [r3, r2]
			counterReception++;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <main+0x9c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <main+0x9c>)
 8000cdc:	701a      	strb	r2, [r3, #0]

			if (rxData == '@'){
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <main+0x94>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b40      	cmp	r3, #64	; 0x40
 8000ce4:	d10c      	bne.n	8000d00 <main+0x68>
				doneTransaction = SET;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <main+0xa4>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]

				bufferReception[counterReception-1] = '\0';
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <main+0x9c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <main+0xa0>)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	54d1      	strb	r1, [r2, r3]

				counterReception = 0;
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <main+0x9c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
 8000cfe:	e00f      	b.n	8000d20 <main+0x88>

			}else if (rxData == 'z'){
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <main+0x94>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b7a      	cmp	r3, #122	; 0x7a
 8000d06:	d10b      	bne.n	8000d20 <main+0x88>

				memset(bufferReception, 0, sizeof(bufferReception));
 8000d08:	2240      	movs	r2, #64	; 0x40
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	480a      	ldr	r0, [pc, #40]	; (8000d38 <main+0xa0>)
 8000d0e:	f004 f9f5 	bl	80050fc <memset>
				counterReception = 0;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <main+0x9c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
				writeMsg(&handlerUSART1, "Buffer Vaciado\n \r");
 8000d18:	4909      	ldr	r1, [pc, #36]	; (8000d40 <main+0xa8>)
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <main+0x98>)
 8000d1c:	f003 fe16 	bl	800494c <writeMsg>
			}

				rxData = '\0';
 8000d20:	4b02      	ldr	r3, [pc, #8]	; (8000d2c <main+0x94>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
		if (rxData != '\0'){
 8000d26:	e7c3      	b.n	8000cb0 <main+0x18>
 8000d28:	e000ed00 	.word	0xe000ed00
 8000d2c:	200003fa 	.word	0x200003fa
 8000d30:	2000030c 	.word	0x2000030c
 8000d34:	200003f8 	.word	0x200003f8
 8000d38:	200003b8 	.word	0x200003b8
 8000d3c:	200003f9 	.word	0x200003f9
 8000d40:	08008a20 	.word	0x08008a20

08000d44 <inSystem>:

	}
}


void inSystem (void){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0


	// Activamos la maxima velocidad del microcontrolador
	RCC_enableMaxFrequencies(RCC_100MHz);
 8000d48:	2008      	movs	r0, #8
 8000d4a:	f002 fecd 	bl	8003ae8 <RCC_enableMaxFrequencies>
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000d4e:	4bb0      	ldr	r3, [pc, #704]	; (8001010 <inSystem+0x2cc>)
 8000d50:	4ab0      	ldr	r2, [pc, #704]	; (8001014 <inSystem+0x2d0>)
 8000d52:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000d54:	4bae      	ldr	r3, [pc, #696]	; (8001010 <inSystem+0x2cc>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000d5a:	4bad      	ldr	r3, [pc, #692]	; (8001010 <inSystem+0x2cc>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000d60:	4bab      	ldr	r3, [pc, #684]	; (8001010 <inSystem+0x2cc>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000d66:	4baa      	ldr	r3, [pc, #680]	; (8001010 <inSystem+0x2cc>)
 8000d68:	2205      	movs	r2, #5
 8000d6a:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000d6c:	4ba8      	ldr	r3, [pc, #672]	; (8001010 <inSystem+0x2cc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000d72:	4ba7      	ldr	r3, [pc, #668]	; (8001010 <inSystem+0x2cc>)
 8000d74:	2202      	movs	r2, #2
 8000d76:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000d78:	48a5      	ldr	r0, [pc, #660]	; (8001010 <inSystem+0x2cc>)
 8000d7a:	f001 ff9b 	bl	8002cb4 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000d7e:	2101      	movs	r1, #1
 8000d80:	48a3      	ldr	r0, [pc, #652]	; (8001010 <inSystem+0x2cc>)
 8000d82:	f002 f8c1 	bl	8002f08 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 8000d86:	4ba4      	ldr	r3, [pc, #656]	; (8001018 <inSystem+0x2d4>)
 8000d88:	4aa4      	ldr	r2, [pc, #656]	; (800101c <inSystem+0x2d8>)
 8000d8a:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8000d8c:	4ba2      	ldr	r3, [pc, #648]	; (8001018 <inSystem+0x2d4>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8000d92:	4ba1      	ldr	r3, [pc, #644]	; (8001018 <inSystem+0x2d4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8000d98:	4b9f      	ldr	r3, [pc, #636]	; (8001018 <inSystem+0x2d4>)
 8000d9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d9e:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 1000;
 8000da0:	4b9d      	ldr	r3, [pc, #628]	; (8001018 <inSystem+0x2d4>)
 8000da2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000da6:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 8000da8:	489b      	ldr	r0, [pc, #620]	; (8001018 <inSystem+0x2d4>)
 8000daa:	f000 fb75 	bl	8001498 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8000dae:	489a      	ldr	r0, [pc, #616]	; (8001018 <inSystem+0x2d4>)
 8000db0:	f000 ff22 	bl	8001bf8 <startTimer>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 8000db4:	4b9a      	ldr	r3, [pc, #616]	; (8001020 <inSystem+0x2dc>)
 8000db6:	4a97      	ldr	r2, [pc, #604]	; (8001014 <inSystem+0x2d0>)
 8000db8:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000dba:	4b99      	ldr	r3, [pc, #612]	; (8001020 <inSystem+0x2dc>)
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000dc0:	4b97      	ldr	r3, [pc, #604]	; (8001020 <inSystem+0x2dc>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000dc6:	4b96      	ldr	r3, [pc, #600]	; (8001020 <inSystem+0x2dc>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8000dcc:	4b94      	ldr	r3, [pc, #592]	; (8001020 <inSystem+0x2dc>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000dd2:	4b93      	ldr	r3, [pc, #588]	; (8001020 <inSystem+0x2dc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000dd8:	4b91      	ldr	r3, [pc, #580]	; (8001020 <inSystem+0x2dc>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 8000dde:	4890      	ldr	r0, [pc, #576]	; (8001020 <inSystem+0x2dc>)
 8000de0:	f001 ff68 	bl	8002cb4 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 8000de4:	4b8f      	ldr	r3, [pc, #572]	; (8001024 <inSystem+0x2e0>)
 8000de6:	4a90      	ldr	r2, [pc, #576]	; (8001028 <inSystem+0x2e4>)
 8000de8:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 8000dea:	4b8e      	ldr	r3, [pc, #568]	; (8001024 <inSystem+0x2e0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle  = 0;
 8000df0:	4b8c      	ldr	r3, [pc, #560]	; (8001024 <inSystem+0x2e0>)
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
//	counter = 50;
	handlerPWM_1.config.periodo     = 40; // se maneja 25 hz por testeo
 8000df8:	4b8a      	ldr	r3, [pc, #552]	; (8001024 <inSystem+0x2e0>)
 8000dfa:	2228      	movs	r2, #40	; 0x28
 8000dfc:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8000dfe:	4b89      	ldr	r3, [pc, #548]	; (8001024 <inSystem+0x2e0>)
 8000e00:	2264      	movs	r2, #100	; 0x64
 8000e02:	609a      	str	r2, [r3, #8]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8000e04:	4b87      	ldr	r3, [pc, #540]	; (8001024 <inSystem+0x2e0>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	751a      	strb	r2, [r3, #20]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8000e0a:	4b86      	ldr	r3, [pc, #536]	; (8001024 <inSystem+0x2e0>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_1);
 8000e10:	4884      	ldr	r0, [pc, #528]	; (8001024 <inSystem+0x2e0>)
 8000e12:	f002 fa91 	bl	8003338 <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 8000e16:	4883      	ldr	r0, [pc, #524]	; (8001024 <inSystem+0x2e0>)
 8000e18:	f002 fb78 	bl	800350c <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 8000e1c:	4b83      	ldr	r3, [pc, #524]	; (800102c <inSystem+0x2e8>)
 8000e1e:	4a7d      	ldr	r2, [pc, #500]	; (8001014 <inSystem+0x2d0>)
 8000e20:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000e22:	4b82      	ldr	r3, [pc, #520]	; (800102c <inSystem+0x2e8>)
 8000e24:	2202      	movs	r2, #2
 8000e26:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000e28:	4b80      	ldr	r3, [pc, #512]	; (800102c <inSystem+0x2e8>)
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000e2e:	4b7f      	ldr	r3, [pc, #508]	; (800102c <inSystem+0x2e8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8000e34:	4b7d      	ldr	r3, [pc, #500]	; (800102c <inSystem+0x2e8>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000e3a:	4b7c      	ldr	r3, [pc, #496]	; (800102c <inSystem+0x2e8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000e40:	4b7a      	ldr	r3, [pc, #488]	; (800102c <inSystem+0x2e8>)
 8000e42:	2202      	movs	r2, #2
 8000e44:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 8000e46:	4879      	ldr	r0, [pc, #484]	; (800102c <inSystem+0x2e8>)
 8000e48:	f001 ff34 	bl	8002cb4 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 8000e4c:	4b78      	ldr	r3, [pc, #480]	; (8001030 <inSystem+0x2ec>)
 8000e4e:	4a76      	ldr	r2, [pc, #472]	; (8001028 <inSystem+0x2e4>)
 8000e50:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 8000e52:	4b77      	ldr	r3, [pc, #476]	; (8001030 <inSystem+0x2ec>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	711a      	strb	r2, [r3, #4]
	handlerPWM_2.config.duttyCicle  = 0;
 8000e58:	4b75      	ldr	r3, [pc, #468]	; (8001030 <inSystem+0x2ec>)
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
	handlerPWM_2.config.periodo     = 40;// se maneja 25 hz por testeo
 8000e60:	4b73      	ldr	r3, [pc, #460]	; (8001030 <inSystem+0x2ec>)
 8000e62:	2228      	movs	r2, #40	; 0x28
 8000e64:	819a      	strh	r2, [r3, #12]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 8000e66:	4b72      	ldr	r3, [pc, #456]	; (8001030 <inSystem+0x2ec>)
 8000e68:	2264      	movs	r2, #100	; 0x64
 8000e6a:	609a      	str	r2, [r3, #8]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 8000e6c:	4b70      	ldr	r3, [pc, #448]	; (8001030 <inSystem+0x2ec>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	751a      	strb	r2, [r3, #20]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8000e72:	4b6f      	ldr	r3, [pc, #444]	; (8001030 <inSystem+0x2ec>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_2);
 8000e78:	486d      	ldr	r0, [pc, #436]	; (8001030 <inSystem+0x2ec>)
 8000e7a:	f002 fa5d 	bl	8003338 <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 8000e7e:	486c      	ldr	r0, [pc, #432]	; (8001030 <inSystem+0x2ec>)
 8000e80:	f002 fb44 	bl	800350c <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 8000e84:	4b6b      	ldr	r3, [pc, #428]	; (8001034 <inSystem+0x2f0>)
 8000e86:	4a6c      	ldr	r2, [pc, #432]	; (8001038 <inSystem+0x2f4>)
 8000e88:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000e8a:	4b6a      	ldr	r3, [pc, #424]	; (8001034 <inSystem+0x2f0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8000e90:	4b68      	ldr	r3, [pc, #416]	; (8001034 <inSystem+0x2f0>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 8000e96:	4b67      	ldr	r3, [pc, #412]	; (8001034 <inSystem+0x2f0>)
 8000e98:	220a      	movs	r2, #10
 8000e9a:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000e9c:	4b65      	ldr	r3, [pc, #404]	; (8001034 <inSystem+0x2f0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000ea2:	4b64      	ldr	r3, [pc, #400]	; (8001034 <inSystem+0x2f0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000ea8:	4b62      	ldr	r3, [pc, #392]	; (8001034 <inSystem+0x2f0>)
 8000eaa:	2202      	movs	r2, #2
 8000eac:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 8000eae:	4861      	ldr	r0, [pc, #388]	; (8001034 <inSystem+0x2f0>)
 8000eb0:	f001 ff00 	bl	8002cb4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	485f      	ldr	r0, [pc, #380]	; (8001034 <inSystem+0x2f0>)
 8000eb8:	f002 f851 	bl	8002f5e <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 8000ebc:	4b5f      	ldr	r3, [pc, #380]	; (800103c <inSystem+0x2f8>)
 8000ebe:	4a5e      	ldr	r2, [pc, #376]	; (8001038 <inSystem+0x2f4>)
 8000ec0:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000ec2:	4b5e      	ldr	r3, [pc, #376]	; (800103c <inSystem+0x2f8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8000ec8:	4b5c      	ldr	r3, [pc, #368]	; (800103c <inSystem+0x2f8>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 8000ece:	4b5b      	ldr	r3, [pc, #364]	; (800103c <inSystem+0x2f8>)
 8000ed0:	220b      	movs	r2, #11
 8000ed2:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000ed4:	4b59      	ldr	r3, [pc, #356]	; (800103c <inSystem+0x2f8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000eda:	4b58      	ldr	r3, [pc, #352]	; (800103c <inSystem+0x2f8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000ee0:	4b56      	ldr	r3, [pc, #344]	; (800103c <inSystem+0x2f8>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 8000ee6:	4855      	ldr	r0, [pc, #340]	; (800103c <inSystem+0x2f8>)
 8000ee8:	f001 fee4 	bl	8002cb4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 8000eec:	2100      	movs	r1, #0
 8000eee:	4853      	ldr	r0, [pc, #332]	; (800103c <inSystem+0x2f8>)
 8000ef0:	f002 f835 	bl	8002f5e <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 8000ef4:	4b52      	ldr	r3, [pc, #328]	; (8001040 <inSystem+0x2fc>)
 8000ef6:	4a50      	ldr	r2, [pc, #320]	; (8001038 <inSystem+0x2f4>)
 8000ef8:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000efa:	4b51      	ldr	r3, [pc, #324]	; (8001040 <inSystem+0x2fc>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8000f00:	4b4f      	ldr	r3, [pc, #316]	; (8001040 <inSystem+0x2fc>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 8000f06:	4b4e      	ldr	r3, [pc, #312]	; (8001040 <inSystem+0x2fc>)
 8000f08:	220c      	movs	r2, #12
 8000f0a:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f0c:	4b4c      	ldr	r3, [pc, #304]	; (8001040 <inSystem+0x2fc>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f12:	4b4b      	ldr	r3, [pc, #300]	; (8001040 <inSystem+0x2fc>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000f18:	4b49      	ldr	r3, [pc, #292]	; (8001040 <inSystem+0x2fc>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 8000f1e:	4848      	ldr	r0, [pc, #288]	; (8001040 <inSystem+0x2fc>)
 8000f20:	f001 fec8 	bl	8002cb4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default
 8000f24:	2100      	movs	r1, #0
 8000f26:	4846      	ldr	r0, [pc, #280]	; (8001040 <inSystem+0x2fc>)
 8000f28:	f002 f819 	bl	8002f5e <GPIO_WritePin_Afopt>

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 8000f2c:	4b45      	ldr	r3, [pc, #276]	; (8001044 <inSystem+0x300>)
 8000f2e:	4a46      	ldr	r2, [pc, #280]	; (8001048 <inSystem+0x304>)
 8000f30:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000f32:	4b44      	ldr	r3, [pc, #272]	; (8001044 <inSystem+0x300>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8000f38:	4b42      	ldr	r3, [pc, #264]	; (8001044 <inSystem+0x300>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8000f3e:	4b41      	ldr	r3, [pc, #260]	; (8001044 <inSystem+0x300>)
 8000f40:	2202      	movs	r2, #2
 8000f42:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f44:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <inSystem+0x300>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f4a:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <inSystem+0x300>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000f50:	4b3c      	ldr	r3, [pc, #240]	; (8001044 <inSystem+0x300>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 8000f56:	483b      	ldr	r0, [pc, #236]	; (8001044 <inSystem+0x300>)
 8000f58:	f001 feac 	bl	8002cb4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4839      	ldr	r0, [pc, #228]	; (8001044 <inSystem+0x300>)
 8000f60:	f001 fffd 	bl	8002f5e <GPIO_WritePin_Afopt>
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 8000f64:	4b39      	ldr	r3, [pc, #228]	; (800104c <inSystem+0x308>)
 8000f66:	4a34      	ldr	r2, [pc, #208]	; (8001038 <inSystem+0x2f4>)
 8000f68:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000f6a:	4b38      	ldr	r3, [pc, #224]	; (800104c <inSystem+0x308>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8000f70:	4b36      	ldr	r3, [pc, #216]	; (800104c <inSystem+0x308>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8000f76:	4b35      	ldr	r3, [pc, #212]	; (800104c <inSystem+0x308>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f7c:	4b33      	ldr	r3, [pc, #204]	; (800104c <inSystem+0x308>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <inSystem+0x308>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <inSystem+0x308>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <inSystem+0x30c>)
 8000f90:	4a2e      	ldr	r2, [pc, #184]	; (800104c <inSystem+0x308>)
 8000f92:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8000f94:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <inSystem+0x30c>)
 8000f96:	2202      	movs	r2, #2
 8000f98:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 8000f9a:	482d      	ldr	r0, [pc, #180]	; (8001050 <inSystem+0x30c>)
 8000f9c:	f000 fe5c 	bl	8001c58 <extInt_Config>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <inSystem+0x310>)
 8000fa2:	4a25      	ldr	r2, [pc, #148]	; (8001038 <inSystem+0x2f4>)
 8000fa4:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000fa6:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <inSystem+0x310>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <inSystem+0x310>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	; (8001054 <inSystem+0x310>)
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	; (8001054 <inSystem+0x310>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <inSystem+0x310>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <inSystem+0x310>)
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <inSystem+0x314>)
 8000fcc:	4a21      	ldr	r2, [pc, #132]	; (8001054 <inSystem+0x310>)
 8000fce:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8000fd0:	4b21      	ldr	r3, [pc, #132]	; (8001058 <inSystem+0x314>)
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 8000fd6:	4820      	ldr	r0, [pc, #128]	; (8001058 <inSystem+0x314>)
 8000fd8:	f000 fe3e 	bl	8001c58 <extInt_Config>
	///////////////////////////////////////////Comunicación serial para comandos //////////////////////////////////////////////


	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <inSystem+0x318>)
 8000fde:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <inSystem+0x2d0>)
 8000fe0:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <inSystem+0x318>)
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <inSystem+0x318>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <inSystem+0x318>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <inSystem+0x318>)
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <inSystem+0x318>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <inSystem+0x318>)
 8001002:	2203      	movs	r2, #3
 8001004:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 8001006:	4815      	ldr	r0, [pc, #84]	; (800105c <inSystem+0x318>)
 8001008:	f001 fe54 	bl	8002cb4 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <inSystem+0x31c>)
 800100e:	e029      	b.n	8001064 <inSystem+0x320>
 8001010:	200001f4 	.word	0x200001f4
 8001014:	40020000 	.word	0x40020000
 8001018:	200002a0 	.word	0x200002a0
 800101c:	40000400 	.word	0x40000400
 8001020:	20000200 	.word	0x20000200
 8001024:	200002dc 	.word	0x200002dc
 8001028:	40000c00 	.word	0x40000c00
 800102c:	2000020c 	.word	0x2000020c
 8001030:	200002f4 	.word	0x200002f4
 8001034:	2000023c 	.word	0x2000023c
 8001038:	40020800 	.word	0x40020800
 800103c:	20000230 	.word	0x20000230
 8001040:	20000254 	.word	0x20000254
 8001044:	20000248 	.word	0x20000248
 8001048:	40020c00 	.word	0x40020c00
 800104c:	20000260 	.word	0x20000260
 8001050:	20000290 	.word	0x20000290
 8001054:	2000026c 	.word	0x2000026c
 8001058:	20000298 	.word	0x20000298
 800105c:	20000224 	.word	0x20000224
 8001060:	20000218 	.word	0x20000218
 8001064:	4a57      	ldr	r2, [pc, #348]	; (80011c4 <inSystem+0x480>)
 8001066:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8001068:	4b57      	ldr	r3, [pc, #348]	; (80011c8 <inSystem+0x484>)
 800106a:	2207      	movs	r2, #7
 800106c:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800106e:	4b56      	ldr	r3, [pc, #344]	; (80011c8 <inSystem+0x484>)
 8001070:	2202      	movs	r2, #2
 8001072:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001074:	4b54      	ldr	r3, [pc, #336]	; (80011c8 <inSystem+0x484>)
 8001076:	2200      	movs	r2, #0
 8001078:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 800107a:	4b53      	ldr	r3, [pc, #332]	; (80011c8 <inSystem+0x484>)
 800107c:	2203      	movs	r2, #3
 800107e:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001080:	4b51      	ldr	r3, [pc, #324]	; (80011c8 <inSystem+0x484>)
 8001082:	2200      	movs	r2, #0
 8001084:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8001086:	4b50      	ldr	r3, [pc, #320]	; (80011c8 <inSystem+0x484>)
 8001088:	2203      	movs	r2, #3
 800108a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 800108c:	484e      	ldr	r0, [pc, #312]	; (80011c8 <inSystem+0x484>)
 800108e:	f001 fe11 	bl	8002cb4 <GPIO_Config>

	handlerUSART1.ptrUSARTx                      = USART2;
 8001092:	4b4e      	ldr	r3, [pc, #312]	; (80011cc <inSystem+0x488>)
 8001094:	4a4e      	ldr	r2, [pc, #312]	; (80011d0 <inSystem+0x48c>)
 8001096:	601a      	str	r2, [r3, #0]
	handlerUSART1.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 8001098:	4b4c      	ldr	r3, [pc, #304]	; (80011cc <inSystem+0x488>)
 800109a:	4a4e      	ldr	r2, [pc, #312]	; (80011d4 <inSystem+0x490>)
 800109c:	60da      	str	r2, [r3, #12]
	handlerUSART1.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 800109e:	4b4b      	ldr	r3, [pc, #300]	; (80011cc <inSystem+0x488>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	71da      	strb	r2, [r3, #7]
	handlerUSART1.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 80010a4:	4b49      	ldr	r3, [pc, #292]	; (80011cc <inSystem+0x488>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	715a      	strb	r2, [r3, #5]
	handlerUSART1.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 80010aa:	4b48      	ldr	r3, [pc, #288]	; (80011cc <inSystem+0x488>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	711a      	strb	r2, [r3, #4]
	handlerUSART1.USART_Config.USART_mode        = USART_MODE_RXTX;
 80010b0:	4b46      	ldr	r3, [pc, #280]	; (80011cc <inSystem+0x488>)
 80010b2:	2202      	movs	r2, #2
 80010b4:	719a      	strb	r2, [r3, #6]
	handlerUSART1.USART_Config.USART_parity      = USART_PARITY_NONE;
 80010b6:	4b45      	ldr	r3, [pc, #276]	; (80011cc <inSystem+0x488>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	725a      	strb	r2, [r3, #9]
	handlerUSART1.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 80010bc:	4b43      	ldr	r3, [pc, #268]	; (80011cc <inSystem+0x488>)
 80010be:	2200      	movs	r2, #0
 80010c0:	729a      	strb	r2, [r3, #10]
	handlerUSART1.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 80010c2:	4b42      	ldr	r3, [pc, #264]	; (80011cc <inSystem+0x488>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART1);
 80010c8:	4840      	ldr	r0, [pc, #256]	; (80011cc <inSystem+0x488>)
 80010ca:	f003 f85f 	bl	800418c <USART_Config>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_vel.ptrTIMx                           = TIM2;
 80010ce:	4b42      	ldr	r3, [pc, #264]	; (80011d8 <inSystem+0x494>)
 80010d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d4:	601a      	str	r2, [r3, #0]
	handlerTIM2_vel.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 80010d6:	4b40      	ldr	r3, [pc, #256]	; (80011d8 <inSystem+0x494>)
 80010d8:	2201      	movs	r2, #1
 80010da:	741a      	strb	r2, [r3, #16]
	handlerTIM2_vel.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 80010dc:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <inSystem+0x494>)
 80010de:	2200      	movs	r2, #0
 80010e0:	711a      	strb	r2, [r3, #4]
	handlerTIM2_vel.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 80010e2:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <inSystem+0x494>)
 80010e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010e8:	609a      	str	r2, [r3, #8]
	handlerTIM2_vel.TIMx_Config.TIMx_period           = 80;
 80010ea:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <inSystem+0x494>)
 80010ec:	2250      	movs	r2, #80	; 0x50
 80010ee:	60da      	str	r2, [r3, #12]
	Ts = handlerTIM2_vel.TIMx_Config.TIMx_period;
 80010f0:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <inSystem+0x494>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010fc:	4b37      	ldr	r3, [pc, #220]	; (80011dc <inSystem+0x498>)
 80010fe:	edc3 7a00 	vstr	s15, [r3]
	BasicTimer_Config(&handlerTIM2_vel);
 8001102:	4835      	ldr	r0, [pc, #212]	; (80011d8 <inSystem+0x494>)
 8001104:	f000 f9c8 	bl	8001498 <BasicTimer_Config>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

		////////////////////////////////Configuracion PINES B8 (SCL) B9 (SDA) e I2C1 //////////////////////////////////////////////

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 8001108:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <inSystem+0x49c>)
 800110a:	4a36      	ldr	r2, [pc, #216]	; (80011e4 <inSystem+0x4a0>)
 800110c:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 800110e:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <inSystem+0x49c>)
 8001110:	2204      	movs	r2, #4
 8001112:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001114:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <inSystem+0x49c>)
 8001116:	2202      	movs	r2, #2
 8001118:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 800111a:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <inSystem+0x49c>)
 800111c:	2208      	movs	r2, #8
 800111e:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001120:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <inSystem+0x49c>)
 8001122:	2201      	movs	r2, #1
 8001124:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001126:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <inSystem+0x49c>)
 8001128:	2200      	movs	r2, #0
 800112a:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800112c:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <inSystem+0x49c>)
 800112e:	2203      	movs	r2, #3
 8001130:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 8001132:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <inSystem+0x4a4>)
 8001134:	4a2b      	ldr	r2, [pc, #172]	; (80011e4 <inSystem+0x4a0>)
 8001136:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001138:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <inSystem+0x4a4>)
 800113a:	2204      	movs	r2, #4
 800113c:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800113e:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <inSystem+0x4a4>)
 8001140:	2202      	movs	r2, #2
 8001142:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 8001144:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <inSystem+0x4a4>)
 8001146:	2209      	movs	r2, #9
 8001148:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <inSystem+0x4a4>)
 800114c:	2201      	movs	r2, #1
 800114e:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001150:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <inSystem+0x4a4>)
 8001152:	2200      	movs	r2, #0
 8001154:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8001156:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <inSystem+0x4a4>)
 8001158:	2203      	movs	r2, #3
 800115a:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <inSystem+0x4a8>)
 800115e:	4a24      	ldr	r2, [pc, #144]	; (80011f0 <inSystem+0x4ac>)
 8001160:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 8001162:	4b22      	ldr	r3, [pc, #136]	; (80011ec <inSystem+0x4a8>)
 8001164:	2232      	movs	r2, #50	; 0x32
 8001166:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 8001168:	4b20      	ldr	r3, [pc, #128]	; (80011ec <inSystem+0x4a8>)
 800116a:	2268      	movs	r2, #104	; 0x68
 800116c:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <inSystem+0x4a8>)
 8001170:	2201      	movs	r2, #1
 8001172:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <inSystem+0x4b0>)
 8001176:	4a1a      	ldr	r2, [pc, #104]	; (80011e0 <inSystem+0x49c>)
 8001178:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 800117a:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <inSystem+0x4b0>)
 800117c:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <inSystem+0x4a4>)
 800117e:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <inSystem+0x4b0>)
 8001182:	4a1a      	ldr	r2, [pc, #104]	; (80011ec <inSystem+0x4a8>)
 8001184:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 8001186:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <inSystem+0x4b0>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <inSystem+0x4b0>)
 800118e:	2200      	movs	r2, #0
 8001190:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 8001192:	4818      	ldr	r0, [pc, #96]	; (80011f4 <inSystem+0x4b0>)
 8001194:	f001 ff46 	bl	8003024 <configMPUAccel>

	////////////////////////////////Timer 5 para contador de tiempo ////////////////////////////////////



	handlerTIM4_time.ptrTIMx                           = TIM4;
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <inSystem+0x4b4>)
 800119a:	4a18      	ldr	r2, [pc, #96]	; (80011fc <inSystem+0x4b8>)
 800119c:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <inSystem+0x4b4>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <inSystem+0x4b4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <inSystem+0x4b4>)
 80011ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80011b0:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 100;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <inSystem+0x4b4>)
 80011b4:	2264      	movs	r2, #100	; 0x64
 80011b6:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 80011b8:	480f      	ldr	r0, [pc, #60]	; (80011f8 <inSystem+0x4b4>)
 80011ba:	f000 f96d 	bl	8001498 <BasicTimer_Config>

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40020000 	.word	0x40020000
 80011c8:	20000218 	.word	0x20000218
 80011cc:	2000030c 	.word	0x2000030c
 80011d0:	40004400 	.word	0x40004400
 80011d4:	02faf080 	.word	0x02faf080
 80011d8:	200002b4 	.word	0x200002b4
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20000278 	.word	0x20000278
 80011e4:	40020400 	.word	0x40020400
 80011e8:	20000284 	.word	0x20000284
 80011ec:	200003a0 	.word	0x200003a0
 80011f0:	40005400 	.word	0x40005400
 80011f4:	200003a8 	.word	0x200003a8
 80011f8:	200002c8 	.word	0x200002c8
 80011fc:	40000800 	.word	0x40000800

08001200 <usart2Rx_Callback>:
	return u_2;
}


// Interrupcion usart 1
void usart2Rx_Callback(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

	rxData = getRxData();
 8001204:	f003 fbca 	bl	800499c <getRxData>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b01      	ldr	r3, [pc, #4]	; (8001214 <usart2Rx_Callback+0x14>)
 800120e:	701a      	strb	r2, [r3, #0]

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200003fa 	.word	0x200003fa

08001218 <BasicTimer4_Callback>:

//Interrupcion Timer 4
void BasicTimer4_Callback(void){
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

	flagGyro = SET;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <BasicTimer4_Callback+0x20>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
	tiempo += 1;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <BasicTimer4_Callback+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <BasicTimer4_Callback+0x24>)
 800122a:	6013      	str	r3, [r2, #0]

}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	200003fc 	.word	0x200003fc
 800123c:	20000400 	.word	0x20000400

08001240 <BasicTimer3_Callback>:

//Interrupción Timer 3
void BasicTimer3_Callback(void){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0

	GPIOxTooglePin(&handlerPinA5);
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <BasicTimer3_Callback+0x1c>)
 8001246:	f001 fed6 	bl	8002ff6 <GPIOxTooglePin>
	counterTIM3++;
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <BasicTimer3_Callback+0x20>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	3301      	adds	r3, #1
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b03      	ldr	r3, [pc, #12]	; (8001260 <BasicTimer3_Callback+0x20>)
 8001254:	801a      	strh	r2, [r3, #0]

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200001f4 	.word	0x200001f4
 8001260:	200003fe 	.word	0x200003fe

08001264 <BasicTimer2_Callback>:

//Interrupcion Timer 2

void BasicTimer2_Callback(void){
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

	flagT2 = SET;
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <BasicTimer2_Callback+0x14>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]


}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	200003fb 	.word	0x200003fb

0800127c <callback_extInt1>:


//Interrupciones de Exti
void callback_extInt1(void){
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0


}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <callback_extInt3>:

void callback_extInt3(void){
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0


}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <ITM_SendChar+0x48>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <ITM_SendChar+0x48>)
 80012a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012ac:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <ITM_SendChar+0x4c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <ITM_SendChar+0x4c>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80012ba:	bf00      	nop
 80012bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f8      	beq.n	80012bc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80012ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	6013      	str	r3, [r2, #0]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000edfc 	.word	0xe000edfc
 80012e4:	e0000e00 	.word	0xe0000e00

080012e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
	return 1;
 80012ec:	2301      	movs	r3, #1
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <_kill>:

int _kill(int pid, int sig)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001302:	f003 fec9 	bl	8005098 <__errno>
 8001306:	4603      	mov	r3, r0
 8001308:	2216      	movs	r2, #22
 800130a:	601a      	str	r2, [r3, #0]
	return -1;
 800130c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <_exit>:

void _exit (int status)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ffe7 	bl	80012f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800132a:	e7fe      	b.n	800132a <_exit+0x12>

0800132c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	e00a      	b.n	8001354 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800133e:	f3af 8000 	nop.w
 8001342:	4601      	mov	r1, r0
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	60ba      	str	r2, [r7, #8]
 800134a:	b2ca      	uxtb	r2, r1
 800134c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	dbf0      	blt.n	800133e <_read+0x12>
	}

return len;
 800135c:	687b      	ldr	r3, [r7, #4]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e009      	b.n	800138c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	60ba      	str	r2, [r7, #8]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff89 	bl	8001298 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	429a      	cmp	r2, r3
 8001392:	dbf1      	blt.n	8001378 <_write+0x12>
	}
	return len;
 8001394:	687b      	ldr	r3, [r7, #4]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <_close>:

int _close(int file)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
	return -1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013c6:	605a      	str	r2, [r3, #4]
	return 0;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <_isatty>:

int _isatty(int file)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
	return 1;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
	return 0;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800140a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800140c:	f003 fb64 	bl	8004ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <LoopForever+0x6>)
  ldr r1, =_edata
 8001412:	490d      	ldr	r1, [pc, #52]	; (8001448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <LoopForever+0xe>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001418:	e002      	b.n	8001420 <LoopCopyDataInit>

0800141a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800141c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141e:	3304      	adds	r3, #4

08001420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001424:	d3f9      	bcc.n	800141a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001428:	4c0a      	ldr	r4, [pc, #40]	; (8001454 <LoopForever+0x16>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800142c:	e001      	b.n	8001432 <LoopFillZerobss>

0800142e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001430:	3204      	adds	r2, #4

08001432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001434:	d3fb      	bcc.n	800142e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001436:	f003 fe35 	bl	80050a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800143a:	f7ff fc2d 	bl	8000c98 <main>

0800143e <LoopForever>:

LoopForever:
    b LoopForever
 800143e:	e7fe      	b.n	800143e <LoopForever>
  ldr   r0, =_estack
 8001440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001448:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800144c:	08008eb8 	.word	0x08008eb8
  ldr r2, =_sbss
 8001450:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001454:	20000430 	.word	0x20000430

08001458 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC_IRQHandler>
	...

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <__NVIC_EnableIRQ+0x38>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100

08001498 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a85      	ldr	r2, [pc, #532]	; (80016c8 <BasicTimer_Config+0x230>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d106      	bne.n	80014c4 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80014b6:	4b85      	ldr	r3, [pc, #532]	; (80016cc <BasicTimer_Config+0x234>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a84      	ldr	r2, [pc, #528]	; (80016cc <BasicTimer_Config+0x234>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	e030      	b.n	8001526 <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014cc:	d106      	bne.n	80014dc <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80014ce:	4b7f      	ldr	r3, [pc, #508]	; (80016cc <BasicTimer_Config+0x234>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a7e      	ldr	r2, [pc, #504]	; (80016cc <BasicTimer_Config+0x234>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	e024      	b.n	8001526 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a7b      	ldr	r2, [pc, #492]	; (80016d0 <BasicTimer_Config+0x238>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d106      	bne.n	80014f4 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80014e6:	4b79      	ldr	r3, [pc, #484]	; (80016cc <BasicTimer_Config+0x234>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a78      	ldr	r2, [pc, #480]	; (80016cc <BasicTimer_Config+0x234>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	e018      	b.n	8001526 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a76      	ldr	r2, [pc, #472]	; (80016d4 <BasicTimer_Config+0x23c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d106      	bne.n	800150c <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80014fe:	4b73      	ldr	r3, [pc, #460]	; (80016cc <BasicTimer_Config+0x234>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a72      	ldr	r2, [pc, #456]	; (80016cc <BasicTimer_Config+0x234>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	e00c      	b.n	8001526 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a71      	ldr	r2, [pc, #452]	; (80016d8 <BasicTimer_Config+0x240>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d106      	bne.n	8001524 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001516:	4b6d      	ldr	r3, [pc, #436]	; (80016cc <BasicTimer_Config+0x234>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a6c      	ldr	r2, [pc, #432]	; (80016cc <BasicTimer_Config+0x234>)
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	e000      	b.n	8001526 <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8001524:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001534:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6892      	ldr	r2, [r2, #8]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	791b      	ldrb	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	f040 80d3 	bne.w	80016f0 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0210 	bic.w	r2, r2, #16
 8001558:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2ba0      	cmp	r3, #160	; 0xa0
 8001564:	d022      	beq.n	80015ac <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	2bc8      	cmp	r3, #200	; 0xc8
 800156a:	d01f      	beq.n	80015ac <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001572:	d01b      	beq.n	80015ac <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800157a:	d017      	beq.n	80015ac <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001582:	d013      	beq.n	80015ac <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800158a:	d00f      	beq.n	80015ac <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001592:	d00b      	beq.n	80015ac <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800159a:	d007      	beq.n	80015ac <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80015a2:	d003      	beq.n	80015ac <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015aa:	d10b      	bne.n	80015c4 <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2264      	movs	r2, #100	; 0x64
 80015b2:	fb02 f303 	mul.w	r3, r2, r3
 80015b6:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	3a01      	subs	r2, #1
 80015c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80015c2:	e07c      	b.n	80016be <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80015ca:	d029      	beq.n	8001620 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015d2:	d025      	beq.n	8001620 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80015da:	4293      	cmp	r3, r2
 80015dc:	d020      	beq.n	8001620 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80015e4:	d01c      	beq.n	8001620 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d017      	beq.n	8001620 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	f241 7270 	movw	r2, #6000	; 0x1770
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d012      	beq.n	8001620 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800160a:	d009      	beq.n	8001620 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f242 3228 	movw	r2, #9000	; 0x2328
 8001612:	4293      	cmp	r3, r2
 8001614:	d004      	beq.n	8001620 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	f242 7210 	movw	r2, #10000	; 0x2710
 800161c:	4293      	cmp	r3, r2
 800161e:	d10c      	bne.n	800163a <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	3a01      	subs	r2, #1
 8001636:	62da      	str	r2, [r3, #44]	; 0x2c
 8001638:	e041      	b.n	80016be <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001640:	d028      	beq.n	8001694 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001648:	4293      	cmp	r3, r2
 800164a:	d023      	beq.n	8001694 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f247 5230 	movw	r2, #30000	; 0x7530
 8001652:	4293      	cmp	r3, r2
 8001654:	d01e      	beq.n	8001694 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f649 4240 	movw	r2, #40000	; 0x9c40
 800165c:	4293      	cmp	r3, r2
 800165e:	d019      	beq.n	8001694 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001666:	4293      	cmp	r3, r2
 8001668:	d014      	beq.n	8001694 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001670:	4293      	cmp	r3, r2
 8001672:	d00f      	beq.n	8001694 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4a19      	ldr	r2, [pc, #100]	; (80016dc <BasicTimer_Config+0x244>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d00b      	beq.n	8001694 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4a18      	ldr	r2, [pc, #96]	; (80016e0 <BasicTimer_Config+0x248>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d007      	beq.n	8001694 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <BasicTimer_Config+0x24c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d003      	beq.n	8001694 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <BasicTimer_Config+0x250>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d108      	bne.n	80016a6 <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	3a01      	subs	r2, #1
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80016a4:	e00b      	b.n	80016be <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <BasicTimer_Config+0x254>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	08db      	lsrs	r3, r3, #3
 80016b2:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	3a01      	subs	r2, #1
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2200      	movs	r2, #0
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24
 80016c6:	e027      	b.n	8001718 <BasicTimer_Config+0x280>
 80016c8:	40010000 	.word	0x40010000
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40000400 	.word	0x40000400
 80016d4:	40000800 	.word	0x40000800
 80016d8:	40000c00 	.word	0x40000c00
 80016dc:	00011170 	.word	0x00011170
 80016e0:	00013880 	.word	0x00013880
 80016e4:	00015f90 	.word	0x00015f90
 80016e8:	000186a0 	.word	0x000186a0
 80016ec:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0210 	orr.w	r2, r2, #16
 80016fe:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3a01      	subs	r2, #1
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3a01      	subs	r2, #1
 8001716:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0201 	orr.w	r2, r2, #1
 8001726:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001730:	d103      	bne.n	800173a <BasicTimer_Config+0x2a2>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001732:	201c      	movs	r0, #28
 8001734:	f7ff fe92 	bl	800145c <__NVIC_EnableIRQ>
 8001738:	e01b      	b.n	8001772 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a10      	ldr	r2, [pc, #64]	; (8001780 <BasicTimer_Config+0x2e8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d103      	bne.n	800174c <BasicTimer_Config+0x2b4>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001744:	201d      	movs	r0, #29
 8001746:	f7ff fe89 	bl	800145c <__NVIC_EnableIRQ>
 800174a:	e012      	b.n	8001772 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <BasicTimer_Config+0x2ec>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d103      	bne.n	800175e <BasicTimer_Config+0x2c6>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001756:	201e      	movs	r0, #30
 8001758:	f7ff fe80 	bl	800145c <__NVIC_EnableIRQ>
 800175c:	e009      	b.n	8001772 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a09      	ldr	r2, [pc, #36]	; (8001788 <BasicTimer_Config+0x2f0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d103      	bne.n	8001770 <BasicTimer_Config+0x2d8>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001768:	2032      	movs	r0, #50	; 0x32
 800176a:	f7ff fe77 	bl	800145c <__NVIC_EnableIRQ>
 800176e:	e000      	b.n	8001772 <BasicTimer_Config+0x2da>
	}
	else{
		__NOP();
 8001770:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001772:	b662      	cpsie	i
}
 8001774:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40000400 	.word	0x40000400
 8001784:	40000800 	.word	0x40000800
 8001788:	40000c00 	.word	0x40000c00

0800178c <BasicTimer5_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer5_Callback(void){
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001790:	bf00      	nop
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80017a0:	bf00      	nop
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80017b0:	bf00      	nop
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80017c0:	bf00      	nop
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80017d0:	bf00      	nop
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80017e0:	bf00      	nop
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80017f0:	bf00      	nop
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001800:	bf00      	nop
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001810:	bf00      	nop
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001820:	bf00      	nop
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001830:	bf00      	nop
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001840:	bf00      	nop
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001850:	bf00      	nop
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001860:	bf00      	nop
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001870:	bf00      	nop
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001880:	bf00      	nop
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8001890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00a      	beq.n	80018b4 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 800189e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 80018ae:	f7ff fcd9 	bl	8001264 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 80018b2:	e066      	b.n	8001982 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 80018b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d012      	beq.n	80018e8 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 80018c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018cc:	f023 0302 	bic.w	r3, r3, #2
 80018d0:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 80018d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018e0:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 80018e2:	f7ff ff5b 	bl	800179c <Capture_TIM2_Ch1_Callback>
}
 80018e6:	e04c      	b.n	8001982 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 80018e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d012      	beq.n	800191c <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 80018f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 8001906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001910:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001914:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 8001916:	f7ff ff49 	bl	80017ac <Capture_TIM2_Ch2_Callback>
}
 800191a:	e032      	b.n	8001982 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 800191c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d012      	beq.n	8001950 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 800192a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001934:	f023 0308 	bic.w	r3, r3, #8
 8001938:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 800193a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001944:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001948:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800194a:	f7ff ff37 	bl	80017bc <Capture_TIM2_Ch3_Callback>
}
 800194e:	e018      	b.n	8001982 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8001950:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	2b00      	cmp	r3, #0
 800195c:	d011      	beq.n	8001982 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 800195e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001968:	f023 0310 	bic.w	r3, r3, #16
 800196c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 800196e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001978:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800197c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 800197e:	f7ff ff25 	bl	80017cc <Capture_TIM2_Ch4_Callback>
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 8001998:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	4a2d      	ldr	r2, [pc, #180]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 800199e:	f023 0301 	bic.w	r3, r3, #1
 80019a2:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 80019a4:	f7ff fc4c 	bl	8001240 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 80019a8:	e052      	b.n	8001a50 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00e      	beq.n	80019d4 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 80019b6:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	4a26      	ldr	r2, [pc, #152]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 80019bc:	f023 0302 	bic.w	r3, r3, #2
 80019c0:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 80019c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019cc:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 80019ce:	f7ff ff05 	bl	80017dc <Capture_TIM3_Ch1_Callback>
}
 80019d2:	e03d      	b.n	8001a50 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00e      	beq.n	80019fe <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 80019e0:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	4a1b      	ldr	r2, [pc, #108]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 80019e6:	f023 0304 	bic.w	r3, r3, #4
 80019ea:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 80019f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019f6:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 80019f8:	f7ff fef8 	bl	80017ec <Capture_TIM3_Ch2_Callback>
}
 80019fc:	e028      	b.n	8001a50 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00e      	beq.n	8001a28 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	4a11      	ldr	r2, [pc, #68]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 8001a10:	f023 0308 	bic.w	r3, r3, #8
 8001a14:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 8001a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a20:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8001a22:	f7ff feeb 	bl	80017fc <Capture_TIM3_Ch3_Callback>
}
 8001a26:	e013      	b.n	8001a50 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00d      	beq.n	8001a50 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 8001a3a:	f023 0310 	bic.w	r3, r3, #16
 8001a3e:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <TIM3_IRQHandler+0xcc>)
 8001a46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a4a:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8001a4c:	f7ff fede 	bl	800180c <Capture_TIM3_Ch4_Callback>
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40000400 	.word	0x40000400

08001a58 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8001a5c:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 8001a68:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	4a2d      	ldr	r2, [pc, #180]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001a6e:	f023 0301 	bic.w	r3, r3, #1
 8001a72:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8001a74:	f7ff fbd0 	bl	8001218 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 8001a78:	e052      	b.n	8001b20 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00e      	beq.n	8001aa4 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 8001a86:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	4a26      	ldr	r2, [pc, #152]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001a8c:	f023 0302 	bic.w	r3, r3, #2
 8001a90:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	4a23      	ldr	r2, [pc, #140]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a9c:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8001a9e:	f7ff febd 	bl	800181c <Capture_TIM4_Ch1_Callback>
}
 8001aa2:	e03d      	b.n	8001b20 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00e      	beq.n	8001ace <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	4a1b      	ldr	r2, [pc, #108]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001ab6:	f023 0304 	bic.w	r3, r3, #4
 8001aba:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	4a18      	ldr	r2, [pc, #96]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ac6:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8001ac8:	f7ff fec8 	bl	800185c <Capture_TIM5_Ch2_Callback>
}
 8001acc:	e028      	b.n	8001b20 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00e      	beq.n	8001af8 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	4a11      	ldr	r2, [pc, #68]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001ae0:	f023 0308 	bic.w	r3, r3, #8
 8001ae4:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001af0:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 8001af2:	f7ff fe9b 	bl	800182c <Capture_TIM4_Ch3_Callback>
}
 8001af6:	e013      	b.n	8001b20 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00d      	beq.n	8001b20 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001b0a:	f023 0310 	bic.w	r3, r3, #16
 8001b0e:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	4a03      	ldr	r2, [pc, #12]	; (8001b24 <TIM4_IRQHandler+0xcc>)
 8001b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b1a:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8001b1c:	f7ff fe8e 	bl	800183c <Capture_TIM4_Ch4_Callback>
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40000800 	.word	0x40000800

08001b28 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 8001b38:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	4a2d      	ldr	r2, [pc, #180]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8001b44:	f7ff fe22 	bl	800178c <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 8001b48:	e052      	b.n	8001bf0 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 8001b4a:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00e      	beq.n	8001b74 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 8001b56:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001b5c:	f023 0302 	bic.w	r3, r3, #2
 8001b60:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8001b62:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	4a23      	ldr	r2, [pc, #140]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b6c:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8001b6e:	f7ff fe6d 	bl	800184c <Capture_TIM5_Ch1_Callback>
}
 8001b72:	e03d      	b.n	8001bf0 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8001b74:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00e      	beq.n	8001b9e <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8001b80:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	4a1b      	ldr	r2, [pc, #108]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001b86:	f023 0304 	bic.w	r3, r3, #4
 8001b8a:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	4a18      	ldr	r2, [pc, #96]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001b92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b96:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8001b98:	f7ff fe60 	bl	800185c <Capture_TIM5_Ch2_Callback>
}
 8001b9c:	e028      	b.n	8001bf0 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00e      	beq.n	8001bc8 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001bb0:	f023 0308 	bic.w	r3, r3, #8
 8001bb4:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001bbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bc0:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 8001bc2:	f7ff fe53 	bl	800186c <Capture_TIM5_Ch3_Callback>
}
 8001bc6:	e013      	b.n	8001bf0 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00d      	beq.n	8001bf0 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001bda:	f023 0310 	bic.w	r3, r3, #16
 8001bde:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	4a03      	ldr	r2, [pc, #12]	; (8001bf4 <TIM5_IRQHandler+0xcc>)
 8001be6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bea:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8001bec:	f7ff fe46 	bl	800187c <Capture_TIM5_Ch4_Callback>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40000c00 	.word	0x40000c00

08001bf8 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <__NVIC_EnableIRQ>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	db0b      	blt.n	8001c46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	f003 021f 	and.w	r2, r3, #31
 8001c34:	4907      	ldr	r1, [pc, #28]	; (8001c54 <__NVIC_EnableIRQ+0x38>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000e100 	.word	0xe000e100

08001c58 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f001 f825 	bl	8002cb4 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 8001c6a:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <extInt_Config+0x26c>)
 8001c6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c70:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	791b      	ldrb	r3, [r3, #4]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	f200 85cd 	bhi.w	8002818 <extInt_Config+0xbc0>
 8001c7e:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <extInt_Config+0x2c>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001cc5 	.word	0x08001cc5
 8001c88:	08001d7b 	.word	0x08001d7b
 8001c8c:	08001e31 	.word	0x08001e31
 8001c90:	08001f07 	.word	0x08001f07
 8001c94:	08001fbd 	.word	0x08001fbd
 8001c98:	0800206b 	.word	0x0800206b
 8001c9c:	08002131 	.word	0x08002131
 8001ca0:	080021d9 	.word	0x080021d9
 8001ca4:	08002281 	.word	0x08002281
 8001ca8:	08002329 	.word	0x08002329
 8001cac:	080023ef 	.word	0x080023ef
 8001cb0:	08002497 	.word	0x08002497
 8001cb4:	0800253f 	.word	0x0800253f
 8001cb8:	08002605 	.word	0x08002605
 8001cbc:	080026ab 	.word	0x080026ab
 8001cc0:	08002753 	.word	0x08002753
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8001cc4:	4b80      	ldr	r3, [pc, #512]	; (8001ec8 <extInt_Config+0x270>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a7f      	ldr	r2, [pc, #508]	; (8001ec8 <extInt_Config+0x270>)
 8001cca:	f023 030f 	bic.w	r3, r3, #15
 8001cce:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a7d      	ldr	r2, [pc, #500]	; (8001ecc <extInt_Config+0x274>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d105      	bne.n	8001ce8 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8001cdc:	4b7a      	ldr	r3, [pc, #488]	; (8001ec8 <extInt_Config+0x270>)
 8001cde:	4a7a      	ldr	r2, [pc, #488]	; (8001ec8 <extInt_Config+0x270>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8001ce4:	f000 bd9a 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a78      	ldr	r2, [pc, #480]	; (8001ed0 <extInt_Config+0x278>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d107      	bne.n	8001d04 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8001cf4:	4b74      	ldr	r3, [pc, #464]	; (8001ec8 <extInt_Config+0x270>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	4a73      	ldr	r2, [pc, #460]	; (8001ec8 <extInt_Config+0x270>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6093      	str	r3, [r2, #8]
					break;
 8001d00:	f000 bd8c 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a72      	ldr	r2, [pc, #456]	; (8001ed4 <extInt_Config+0x27c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d107      	bne.n	8001d20 <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8001d10:	4b6d      	ldr	r3, [pc, #436]	; (8001ec8 <extInt_Config+0x270>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4a6c      	ldr	r2, [pc, #432]	; (8001ec8 <extInt_Config+0x270>)
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	6093      	str	r3, [r2, #8]
					break;
 8001d1c:	f000 bd7e 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a6c      	ldr	r2, [pc, #432]	; (8001ed8 <extInt_Config+0x280>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d107      	bne.n	8001d3c <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8001d2c:	4b66      	ldr	r3, [pc, #408]	; (8001ec8 <extInt_Config+0x270>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4a65      	ldr	r2, [pc, #404]	; (8001ec8 <extInt_Config+0x270>)
 8001d32:	f043 0303 	orr.w	r3, r3, #3
 8001d36:	6093      	str	r3, [r2, #8]
					break;
 8001d38:	f000 bd70 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a66      	ldr	r2, [pc, #408]	; (8001edc <extInt_Config+0x284>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d107      	bne.n	8001d58 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8001d48:	4b5f      	ldr	r3, [pc, #380]	; (8001ec8 <extInt_Config+0x270>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4a5e      	ldr	r2, [pc, #376]	; (8001ec8 <extInt_Config+0x270>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6093      	str	r3, [r2, #8]
					break;
 8001d54:	f000 bd62 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a60      	ldr	r2, [pc, #384]	; (8001ee0 <extInt_Config+0x288>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d107      	bne.n	8001d74 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8001d64:	4b58      	ldr	r3, [pc, #352]	; (8001ec8 <extInt_Config+0x270>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4a57      	ldr	r2, [pc, #348]	; (8001ec8 <extInt_Config+0x270>)
 8001d6a:	f043 0307 	orr.w	r3, r3, #7
 8001d6e:	6093      	str	r3, [r2, #8]
					break;
 8001d70:	f000 bd54 	b.w	800281c <extInt_Config+0xbc4>
						__NOP();
 8001d74:	bf00      	nop
					break;
 8001d76:	f000 bd51 	b.w	800281c <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8001d7a:	4b53      	ldr	r3, [pc, #332]	; (8001ec8 <extInt_Config+0x270>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	4a52      	ldr	r2, [pc, #328]	; (8001ec8 <extInt_Config+0x270>)
 8001d80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d84:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a4f      	ldr	r2, [pc, #316]	; (8001ecc <extInt_Config+0x274>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d105      	bne.n	8001d9e <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8001d92:	4b4d      	ldr	r3, [pc, #308]	; (8001ec8 <extInt_Config+0x270>)
 8001d94:	4a4c      	ldr	r2, [pc, #304]	; (8001ec8 <extInt_Config+0x270>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8001d9a:	f000 bd3f 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a4a      	ldr	r2, [pc, #296]	; (8001ed0 <extInt_Config+0x278>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d107      	bne.n	8001dba <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8001daa:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <extInt_Config+0x270>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	4a46      	ldr	r2, [pc, #280]	; (8001ec8 <extInt_Config+0x270>)
 8001db0:	f043 0310 	orr.w	r3, r3, #16
 8001db4:	6093      	str	r3, [r2, #8]
					break;
 8001db6:	f000 bd31 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a44      	ldr	r2, [pc, #272]	; (8001ed4 <extInt_Config+0x27c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d107      	bne.n	8001dd6 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8001dc6:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <extInt_Config+0x270>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	4a3f      	ldr	r2, [pc, #252]	; (8001ec8 <extInt_Config+0x270>)
 8001dcc:	f043 0320 	orr.w	r3, r3, #32
 8001dd0:	6093      	str	r3, [r2, #8]
					break;
 8001dd2:	f000 bd23 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a3e      	ldr	r2, [pc, #248]	; (8001ed8 <extInt_Config+0x280>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d107      	bne.n	8001df2 <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8001de2:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <extInt_Config+0x270>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	4a38      	ldr	r2, [pc, #224]	; (8001ec8 <extInt_Config+0x270>)
 8001de8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001dec:	6093      	str	r3, [r2, #8]
					break;
 8001dee:	f000 bd15 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a38      	ldr	r2, [pc, #224]	; (8001edc <extInt_Config+0x284>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d107      	bne.n	8001e0e <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8001dfe:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <extInt_Config+0x270>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	4a31      	ldr	r2, [pc, #196]	; (8001ec8 <extInt_Config+0x270>)
 8001e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e08:	6093      	str	r3, [r2, #8]
					break;
 8001e0a:	f000 bd07 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a32      	ldr	r2, [pc, #200]	; (8001ee0 <extInt_Config+0x288>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d107      	bne.n	8001e2a <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8001e1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <extInt_Config+0x270>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	4a2a      	ldr	r2, [pc, #168]	; (8001ec8 <extInt_Config+0x270>)
 8001e20:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001e24:	6093      	str	r3, [r2, #8]
					break;
 8001e26:	f000 bcf9 	b.w	800281c <extInt_Config+0xbc4>
						__NOP();
 8001e2a:	bf00      	nop
					break;
 8001e2c:	f000 bcf6 	b.w	800281c <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <extInt_Config+0x270>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4a24      	ldr	r2, [pc, #144]	; (8001ec8 <extInt_Config+0x270>)
 8001e36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e3a:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <extInt_Config+0x274>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d105      	bne.n	8001e54 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <extInt_Config+0x270>)
 8001e4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <extInt_Config+0x270>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8001e50:	f000 bce4 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <extInt_Config+0x278>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d107      	bne.n	8001e70 <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <extInt_Config+0x270>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <extInt_Config+0x270>)
 8001e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6a:	6093      	str	r3, [r2, #8]
					break;
 8001e6c:	f000 bcd6 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <extInt_Config+0x27c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d107      	bne.n	8001e8c <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <extInt_Config+0x270>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	4a11      	ldr	r2, [pc, #68]	; (8001ec8 <extInt_Config+0x270>)
 8001e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e86:	6093      	str	r3, [r2, #8]
					break;
 8001e88:	f000 bcc8 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a11      	ldr	r2, [pc, #68]	; (8001ed8 <extInt_Config+0x280>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d107      	bne.n	8001ea8 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <extInt_Config+0x270>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <extInt_Config+0x270>)
 8001e9e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ea2:	6093      	str	r3, [r2, #8]
					break;
 8001ea4:	f000 bcba 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a0b      	ldr	r2, [pc, #44]	; (8001edc <extInt_Config+0x284>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d117      	bne.n	8001ee4 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8001eb4:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <extInt_Config+0x270>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	4a03      	ldr	r2, [pc, #12]	; (8001ec8 <extInt_Config+0x270>)
 8001eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ebe:	6093      	str	r3, [r2, #8]
					break;
 8001ec0:	f000 bcac 	b.w	800281c <extInt_Config+0xbc4>
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40013800 	.word	0x40013800
 8001ecc:	40020000 	.word	0x40020000
 8001ed0:	40020400 	.word	0x40020400
 8001ed4:	40020800 	.word	0x40020800
 8001ed8:	40020c00 	.word	0x40020c00
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a8a      	ldr	r2, [pc, #552]	; (8002114 <extInt_Config+0x4bc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d107      	bne.n	8001f00 <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8001ef0:	4b89      	ldr	r3, [pc, #548]	; (8002118 <extInt_Config+0x4c0>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4a88      	ldr	r2, [pc, #544]	; (8002118 <extInt_Config+0x4c0>)
 8001ef6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001efa:	6093      	str	r3, [r2, #8]
					break;
 8001efc:	f000 bc8e 	b.w	800281c <extInt_Config+0xbc4>
						__NOP();
 8001f00:	bf00      	nop
					break;
 8001f02:	f000 bc8b 	b.w	800281c <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8001f06:	4b84      	ldr	r3, [pc, #528]	; (8002118 <extInt_Config+0x4c0>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	4a83      	ldr	r2, [pc, #524]	; (8002118 <extInt_Config+0x4c0>)
 8001f0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f10:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a80      	ldr	r2, [pc, #512]	; (800211c <extInt_Config+0x4c4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d105      	bne.n	8001f2a <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8001f1e:	4b7e      	ldr	r3, [pc, #504]	; (8002118 <extInt_Config+0x4c0>)
 8001f20:	4a7d      	ldr	r2, [pc, #500]	; (8002118 <extInt_Config+0x4c0>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8001f26:	f000 bc79 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a7b      	ldr	r2, [pc, #492]	; (8002120 <extInt_Config+0x4c8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d107      	bne.n	8001f46 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8001f36:	4b78      	ldr	r3, [pc, #480]	; (8002118 <extInt_Config+0x4c0>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	4a77      	ldr	r2, [pc, #476]	; (8002118 <extInt_Config+0x4c0>)
 8001f3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f40:	6093      	str	r3, [r2, #8]
					break;
 8001f42:	f000 bc6b 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a75      	ldr	r2, [pc, #468]	; (8002124 <extInt_Config+0x4cc>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d107      	bne.n	8001f62 <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8001f52:	4b71      	ldr	r3, [pc, #452]	; (8002118 <extInt_Config+0x4c0>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	4a70      	ldr	r2, [pc, #448]	; (8002118 <extInt_Config+0x4c0>)
 8001f58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f5c:	6093      	str	r3, [r2, #8]
					break;
 8001f5e:	f000 bc5d 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a6f      	ldr	r2, [pc, #444]	; (8002128 <extInt_Config+0x4d0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d107      	bne.n	8001f7e <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8001f6e:	4b6a      	ldr	r3, [pc, #424]	; (8002118 <extInt_Config+0x4c0>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	4a69      	ldr	r2, [pc, #420]	; (8002118 <extInt_Config+0x4c0>)
 8001f74:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001f78:	6093      	str	r3, [r2, #8]
					break;
 8001f7a:	f000 bc4f 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a69      	ldr	r2, [pc, #420]	; (800212c <extInt_Config+0x4d4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d107      	bne.n	8001f9a <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8001f8a:	4b63      	ldr	r3, [pc, #396]	; (8002118 <extInt_Config+0x4c0>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	4a62      	ldr	r2, [pc, #392]	; (8002118 <extInt_Config+0x4c0>)
 8001f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f94:	6093      	str	r3, [r2, #8]
					break;
 8001f96:	f000 bc41 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a5c      	ldr	r2, [pc, #368]	; (8002114 <extInt_Config+0x4bc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d107      	bne.n	8001fb6 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8001fa6:	4b5c      	ldr	r3, [pc, #368]	; (8002118 <extInt_Config+0x4c0>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	4a5b      	ldr	r2, [pc, #364]	; (8002118 <extInt_Config+0x4c0>)
 8001fac:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001fb0:	6093      	str	r3, [r2, #8]
					break;
 8001fb2:	f000 bc33 	b.w	800281c <extInt_Config+0xbc4>
						__NOP();
 8001fb6:	bf00      	nop
					break;
 8001fb8:	f000 bc30 	b.w	800281c <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8001fbc:	4b56      	ldr	r3, [pc, #344]	; (8002118 <extInt_Config+0x4c0>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a55      	ldr	r2, [pc, #340]	; (8002118 <extInt_Config+0x4c0>)
 8001fc2:	f023 030f 	bic.w	r3, r3, #15
 8001fc6:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a53      	ldr	r2, [pc, #332]	; (800211c <extInt_Config+0x4c4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d105      	bne.n	8001fe0 <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8001fd4:	4b50      	ldr	r3, [pc, #320]	; (8002118 <extInt_Config+0x4c0>)
 8001fd6:	4a50      	ldr	r2, [pc, #320]	; (8002118 <extInt_Config+0x4c0>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8001fdc:	f000 bc1e 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a4e      	ldr	r2, [pc, #312]	; (8002120 <extInt_Config+0x4c8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d107      	bne.n	8001ffc <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8001fec:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <extInt_Config+0x4c0>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a49      	ldr	r2, [pc, #292]	; (8002118 <extInt_Config+0x4c0>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	60d3      	str	r3, [r2, #12]
					break;
 8001ff8:	f000 bc10 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a48      	ldr	r2, [pc, #288]	; (8002124 <extInt_Config+0x4cc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d107      	bne.n	8002018 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8002008:	4b43      	ldr	r3, [pc, #268]	; (8002118 <extInt_Config+0x4c0>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4a42      	ldr	r2, [pc, #264]	; (8002118 <extInt_Config+0x4c0>)
 800200e:	f043 0302 	orr.w	r3, r3, #2
 8002012:	60d3      	str	r3, [r2, #12]
					break;
 8002014:	f000 bc02 	b.w	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a42      	ldr	r2, [pc, #264]	; (8002128 <extInt_Config+0x4d0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d106      	bne.n	8002032 <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8002024:	4b3c      	ldr	r3, [pc, #240]	; (8002118 <extInt_Config+0x4c0>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4a3b      	ldr	r2, [pc, #236]	; (8002118 <extInt_Config+0x4c0>)
 800202a:	f043 0303 	orr.w	r3, r3, #3
 800202e:	60d3      	str	r3, [r2, #12]
					break;
 8002030:	e3f4      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a3c      	ldr	r2, [pc, #240]	; (800212c <extInt_Config+0x4d4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d106      	bne.n	800204c <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 800203e:	4b36      	ldr	r3, [pc, #216]	; (8002118 <extInt_Config+0x4c0>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	4a35      	ldr	r2, [pc, #212]	; (8002118 <extInt_Config+0x4c0>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	60d3      	str	r3, [r2, #12]
					break;
 800204a:	e3e7      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a30      	ldr	r2, [pc, #192]	; (8002114 <extInt_Config+0x4bc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d106      	bne.n	8002066 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8002058:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <extInt_Config+0x4c0>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4a2e      	ldr	r2, [pc, #184]	; (8002118 <extInt_Config+0x4c0>)
 800205e:	f043 0307 	orr.w	r3, r3, #7
 8002062:	60d3      	str	r3, [r2, #12]
					break;
 8002064:	e3da      	b.n	800281c <extInt_Config+0xbc4>
						__NOP();
 8002066:	bf00      	nop
					break;
 8002068:	e3d8      	b.n	800281c <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 800206a:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <extInt_Config+0x4c0>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	4a2a      	ldr	r2, [pc, #168]	; (8002118 <extInt_Config+0x4c0>)
 8002070:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002074:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a27      	ldr	r2, [pc, #156]	; (800211c <extInt_Config+0x4c4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d104      	bne.n	800208c <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8002082:	4b25      	ldr	r3, [pc, #148]	; (8002118 <extInt_Config+0x4c0>)
 8002084:	4a24      	ldr	r2, [pc, #144]	; (8002118 <extInt_Config+0x4c0>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 800208a:	e3c7      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a23      	ldr	r2, [pc, #140]	; (8002120 <extInt_Config+0x4c8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d106      	bne.n	80020a6 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8002098:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <extInt_Config+0x4c0>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <extInt_Config+0x4c0>)
 800209e:	f043 0310 	orr.w	r3, r3, #16
 80020a2:	60d3      	str	r3, [r2, #12]
					break;
 80020a4:	e3ba      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <extInt_Config+0x4cc>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d106      	bne.n	80020c0 <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 80020b2:	4b19      	ldr	r3, [pc, #100]	; (8002118 <extInt_Config+0x4c0>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	4a18      	ldr	r2, [pc, #96]	; (8002118 <extInt_Config+0x4c0>)
 80020b8:	f043 0320 	orr.w	r3, r3, #32
 80020bc:	60d3      	str	r3, [r2, #12]
					break;
 80020be:	e3ad      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a18      	ldr	r2, [pc, #96]	; (8002128 <extInt_Config+0x4d0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d106      	bne.n	80020da <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <extInt_Config+0x4c0>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a11      	ldr	r2, [pc, #68]	; (8002118 <extInt_Config+0x4c0>)
 80020d2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80020d6:	60d3      	str	r3, [r2, #12]
					break;
 80020d8:	e3a0      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a12      	ldr	r2, [pc, #72]	; (800212c <extInt_Config+0x4d4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d106      	bne.n	80020f4 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80020e6:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <extInt_Config+0x4c0>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <extInt_Config+0x4c0>)
 80020ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020f0:	60d3      	str	r3, [r2, #12]
					break;
 80020f2:	e393      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a06      	ldr	r2, [pc, #24]	; (8002114 <extInt_Config+0x4bc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d106      	bne.n	800210e <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <extInt_Config+0x4c0>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <extInt_Config+0x4c0>)
 8002106:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800210a:	60d3      	str	r3, [r2, #12]
					break;
 800210c:	e386      	b.n	800281c <extInt_Config+0xbc4>
						__NOP();
 800210e:	bf00      	nop
					break;
 8002110:	e384      	b.n	800281c <extInt_Config+0xbc4>
 8002112:	bf00      	nop
 8002114:	40021c00 	.word	0x40021c00
 8002118:	40013800 	.word	0x40013800
 800211c:	40020000 	.word	0x40020000
 8002120:	40020400 	.word	0x40020400
 8002124:	40020800 	.word	0x40020800
 8002128:	40020c00 	.word	0x40020c00
 800212c:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8002130:	4b86      	ldr	r3, [pc, #536]	; (800234c <extInt_Config+0x6f4>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4a85      	ldr	r2, [pc, #532]	; (800234c <extInt_Config+0x6f4>)
 8002136:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800213a:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a83      	ldr	r2, [pc, #524]	; (8002350 <extInt_Config+0x6f8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d104      	bne.n	8002152 <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8002148:	4b80      	ldr	r3, [pc, #512]	; (800234c <extInt_Config+0x6f4>)
 800214a:	4a80      	ldr	r2, [pc, #512]	; (800234c <extInt_Config+0x6f4>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8002150:	e364      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a7e      	ldr	r2, [pc, #504]	; (8002354 <extInt_Config+0x6fc>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d106      	bne.n	800216c <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 800215e:	4b7b      	ldr	r3, [pc, #492]	; (800234c <extInt_Config+0x6f4>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	4a7a      	ldr	r2, [pc, #488]	; (800234c <extInt_Config+0x6f4>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002168:	60d3      	str	r3, [r2, #12]
					break;
 800216a:	e357      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a79      	ldr	r2, [pc, #484]	; (8002358 <extInt_Config+0x700>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d106      	bne.n	8002186 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8002178:	4b74      	ldr	r3, [pc, #464]	; (800234c <extInt_Config+0x6f4>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a73      	ldr	r2, [pc, #460]	; (800234c <extInt_Config+0x6f4>)
 800217e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002182:	60d3      	str	r3, [r2, #12]
					break;
 8002184:	e34a      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a73      	ldr	r2, [pc, #460]	; (800235c <extInt_Config+0x704>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d106      	bne.n	80021a0 <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8002192:	4b6e      	ldr	r3, [pc, #440]	; (800234c <extInt_Config+0x6f4>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	4a6d      	ldr	r2, [pc, #436]	; (800234c <extInt_Config+0x6f4>)
 8002198:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800219c:	60d3      	str	r3, [r2, #12]
					break;
 800219e:	e33d      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a6e      	ldr	r2, [pc, #440]	; (8002360 <extInt_Config+0x708>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d106      	bne.n	80021ba <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 80021ac:	4b67      	ldr	r3, [pc, #412]	; (800234c <extInt_Config+0x6f4>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4a66      	ldr	r2, [pc, #408]	; (800234c <extInt_Config+0x6f4>)
 80021b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021b6:	60d3      	str	r3, [r2, #12]
					break;
 80021b8:	e330      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a68      	ldr	r2, [pc, #416]	; (8002364 <extInt_Config+0x70c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d106      	bne.n	80021d4 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80021c6:	4b61      	ldr	r3, [pc, #388]	; (800234c <extInt_Config+0x6f4>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	4a60      	ldr	r2, [pc, #384]	; (800234c <extInt_Config+0x6f4>)
 80021cc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021d0:	60d3      	str	r3, [r2, #12]
					break;
 80021d2:	e323      	b.n	800281c <extInt_Config+0xbc4>
						__NOP();
 80021d4:	bf00      	nop
					break;
 80021d6:	e321      	b.n	800281c <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 80021d8:	4b5c      	ldr	r3, [pc, #368]	; (800234c <extInt_Config+0x6f4>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4a5b      	ldr	r2, [pc, #364]	; (800234c <extInt_Config+0x6f4>)
 80021de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021e2:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a59      	ldr	r2, [pc, #356]	; (8002350 <extInt_Config+0x6f8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d104      	bne.n	80021fa <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80021f0:	4b56      	ldr	r3, [pc, #344]	; (800234c <extInt_Config+0x6f4>)
 80021f2:	4a56      	ldr	r2, [pc, #344]	; (800234c <extInt_Config+0x6f4>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80021f8:	e310      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a54      	ldr	r2, [pc, #336]	; (8002354 <extInt_Config+0x6fc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d106      	bne.n	8002214 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8002206:	4b51      	ldr	r3, [pc, #324]	; (800234c <extInt_Config+0x6f4>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	4a50      	ldr	r2, [pc, #320]	; (800234c <extInt_Config+0x6f4>)
 800220c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002210:	60d3      	str	r3, [r2, #12]
					break;
 8002212:	e303      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a4f      	ldr	r2, [pc, #316]	; (8002358 <extInt_Config+0x700>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d106      	bne.n	800222e <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8002220:	4b4a      	ldr	r3, [pc, #296]	; (800234c <extInt_Config+0x6f4>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a49      	ldr	r2, [pc, #292]	; (800234c <extInt_Config+0x6f4>)
 8002226:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800222a:	60d3      	str	r3, [r2, #12]
					break;
 800222c:	e2f6      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a49      	ldr	r2, [pc, #292]	; (800235c <extInt_Config+0x704>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d106      	bne.n	8002248 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 800223a:	4b44      	ldr	r3, [pc, #272]	; (800234c <extInt_Config+0x6f4>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	4a43      	ldr	r2, [pc, #268]	; (800234c <extInt_Config+0x6f4>)
 8002240:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002244:	60d3      	str	r3, [r2, #12]
					break;
 8002246:	e2e9      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a44      	ldr	r2, [pc, #272]	; (8002360 <extInt_Config+0x708>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d106      	bne.n	8002262 <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8002254:	4b3d      	ldr	r3, [pc, #244]	; (800234c <extInt_Config+0x6f4>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a3c      	ldr	r2, [pc, #240]	; (800234c <extInt_Config+0x6f4>)
 800225a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800225e:	60d3      	str	r3, [r2, #12]
					break;
 8002260:	e2dc      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a3e      	ldr	r2, [pc, #248]	; (8002364 <extInt_Config+0x70c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d106      	bne.n	800227c <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800226e:	4b37      	ldr	r3, [pc, #220]	; (800234c <extInt_Config+0x6f4>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	4a36      	ldr	r2, [pc, #216]	; (800234c <extInt_Config+0x6f4>)
 8002274:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002278:	60d3      	str	r3, [r2, #12]
					break;
 800227a:	e2cf      	b.n	800281c <extInt_Config+0xbc4>
						__NOP();
 800227c:	bf00      	nop
					break;
 800227e:	e2cd      	b.n	800281c <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8002280:	4b32      	ldr	r3, [pc, #200]	; (800234c <extInt_Config+0x6f4>)
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	4a31      	ldr	r2, [pc, #196]	; (800234c <extInt_Config+0x6f4>)
 8002286:	f023 030f 	bic.w	r3, r3, #15
 800228a:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2f      	ldr	r2, [pc, #188]	; (8002350 <extInt_Config+0x6f8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d104      	bne.n	80022a2 <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8002298:	4b2c      	ldr	r3, [pc, #176]	; (800234c <extInt_Config+0x6f4>)
 800229a:	4a2c      	ldr	r2, [pc, #176]	; (800234c <extInt_Config+0x6f4>)
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 80022a0:	e2bc      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a2a      	ldr	r2, [pc, #168]	; (8002354 <extInt_Config+0x6fc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d106      	bne.n	80022bc <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 80022ae:	4b27      	ldr	r3, [pc, #156]	; (800234c <extInt_Config+0x6f4>)
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	4a26      	ldr	r2, [pc, #152]	; (800234c <extInt_Config+0x6f4>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6113      	str	r3, [r2, #16]
					break;
 80022ba:	e2af      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a25      	ldr	r2, [pc, #148]	; (8002358 <extInt_Config+0x700>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d106      	bne.n	80022d6 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 80022c8:	4b20      	ldr	r3, [pc, #128]	; (800234c <extInt_Config+0x6f4>)
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	4a1f      	ldr	r2, [pc, #124]	; (800234c <extInt_Config+0x6f4>)
 80022ce:	f043 0302 	orr.w	r3, r3, #2
 80022d2:	6113      	str	r3, [r2, #16]
					break;
 80022d4:	e2a2      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1f      	ldr	r2, [pc, #124]	; (800235c <extInt_Config+0x704>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d106      	bne.n	80022f0 <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 80022e2:	4b1a      	ldr	r3, [pc, #104]	; (800234c <extInt_Config+0x6f4>)
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	4a19      	ldr	r2, [pc, #100]	; (800234c <extInt_Config+0x6f4>)
 80022e8:	f043 0303 	orr.w	r3, r3, #3
 80022ec:	6113      	str	r3, [r2, #16]
					break;
 80022ee:	e295      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <extInt_Config+0x708>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d106      	bne.n	800230a <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 80022fc:	4b13      	ldr	r3, [pc, #76]	; (800234c <extInt_Config+0x6f4>)
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	4a12      	ldr	r2, [pc, #72]	; (800234c <extInt_Config+0x6f4>)
 8002302:	f043 0304 	orr.w	r3, r3, #4
 8002306:	6113      	str	r3, [r2, #16]
					break;
 8002308:	e288      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <extInt_Config+0x70c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d106      	bne.n	8002324 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8002316:	4b0d      	ldr	r3, [pc, #52]	; (800234c <extInt_Config+0x6f4>)
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	4a0c      	ldr	r2, [pc, #48]	; (800234c <extInt_Config+0x6f4>)
 800231c:	f043 0307 	orr.w	r3, r3, #7
 8002320:	6113      	str	r3, [r2, #16]
					break;
 8002322:	e27b      	b.n	800281c <extInt_Config+0xbc4>
						__NOP();
 8002324:	bf00      	nop
					break;
 8002326:	e279      	b.n	800281c <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <extInt_Config+0x6f4>)
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	4a07      	ldr	r2, [pc, #28]	; (800234c <extInt_Config+0x6f4>)
 800232e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002332:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a05      	ldr	r2, [pc, #20]	; (8002350 <extInt_Config+0x6f8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d113      	bne.n	8002368 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8002340:	4b02      	ldr	r3, [pc, #8]	; (800234c <extInt_Config+0x6f4>)
 8002342:	4a02      	ldr	r2, [pc, #8]	; (800234c <extInt_Config+0x6f4>)
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002348:	e268      	b.n	800281c <extInt_Config+0xbc4>
 800234a:	bf00      	nop
 800234c:	40013800 	.word	0x40013800
 8002350:	40020000 	.word	0x40020000
 8002354:	40020400 	.word	0x40020400
 8002358:	40020800 	.word	0x40020800
 800235c:	40020c00 	.word	0x40020c00
 8002360:	40021000 	.word	0x40021000
 8002364:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a83      	ldr	r2, [pc, #524]	; (800257c <extInt_Config+0x924>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d106      	bne.n	8002382 <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8002374:	4b82      	ldr	r3, [pc, #520]	; (8002580 <extInt_Config+0x928>)
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	4a81      	ldr	r2, [pc, #516]	; (8002580 <extInt_Config+0x928>)
 800237a:	f043 0310 	orr.w	r3, r3, #16
 800237e:	6113      	str	r3, [r2, #16]
					break;
 8002380:	e24c      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a7e      	ldr	r2, [pc, #504]	; (8002584 <extInt_Config+0x92c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d106      	bne.n	800239c <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800238e:	4b7c      	ldr	r3, [pc, #496]	; (8002580 <extInt_Config+0x928>)
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	4a7b      	ldr	r2, [pc, #492]	; (8002580 <extInt_Config+0x928>)
 8002394:	f043 0320 	orr.w	r3, r3, #32
 8002398:	6113      	str	r3, [r2, #16]
					break;
 800239a:	e23f      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a79      	ldr	r2, [pc, #484]	; (8002588 <extInt_Config+0x930>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d106      	bne.n	80023b6 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 80023a8:	4b75      	ldr	r3, [pc, #468]	; (8002580 <extInt_Config+0x928>)
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	4a74      	ldr	r2, [pc, #464]	; (8002580 <extInt_Config+0x928>)
 80023ae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80023b2:	6113      	str	r3, [r2, #16]
					break;
 80023b4:	e232      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a73      	ldr	r2, [pc, #460]	; (800258c <extInt_Config+0x934>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d106      	bne.n	80023d0 <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 80023c2:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <extInt_Config+0x928>)
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	4a6e      	ldr	r2, [pc, #440]	; (8002580 <extInt_Config+0x928>)
 80023c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023cc:	6113      	str	r3, [r2, #16]
					break;
 80023ce:	e225      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a6e      	ldr	r2, [pc, #440]	; (8002590 <extInt_Config+0x938>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d106      	bne.n	80023ea <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 80023dc:	4b68      	ldr	r3, [pc, #416]	; (8002580 <extInt_Config+0x928>)
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	4a67      	ldr	r2, [pc, #412]	; (8002580 <extInt_Config+0x928>)
 80023e2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80023e6:	6113      	str	r3, [r2, #16]
					break;
 80023e8:	e218      	b.n	800281c <extInt_Config+0xbc4>
						__NOP();
 80023ea:	bf00      	nop
					break;
 80023ec:	e216      	b.n	800281c <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 80023ee:	4b64      	ldr	r3, [pc, #400]	; (8002580 <extInt_Config+0x928>)
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	4a63      	ldr	r2, [pc, #396]	; (8002580 <extInt_Config+0x928>)
 80023f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023f8:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a64      	ldr	r2, [pc, #400]	; (8002594 <extInt_Config+0x93c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d104      	bne.n	8002410 <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8002406:	4b5e      	ldr	r3, [pc, #376]	; (8002580 <extInt_Config+0x928>)
 8002408:	4a5d      	ldr	r2, [pc, #372]	; (8002580 <extInt_Config+0x928>)
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800240e:	e205      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a59      	ldr	r2, [pc, #356]	; (800257c <extInt_Config+0x924>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d106      	bne.n	800242a <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 800241c:	4b58      	ldr	r3, [pc, #352]	; (8002580 <extInt_Config+0x928>)
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	4a57      	ldr	r2, [pc, #348]	; (8002580 <extInt_Config+0x928>)
 8002422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002426:	6113      	str	r3, [r2, #16]
					break;
 8002428:	e1f8      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a54      	ldr	r2, [pc, #336]	; (8002584 <extInt_Config+0x92c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d106      	bne.n	8002444 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8002436:	4b52      	ldr	r3, [pc, #328]	; (8002580 <extInt_Config+0x928>)
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	4a51      	ldr	r2, [pc, #324]	; (8002580 <extInt_Config+0x928>)
 800243c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002440:	6113      	str	r3, [r2, #16]
					break;
 8002442:	e1eb      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a4f      	ldr	r2, [pc, #316]	; (8002588 <extInt_Config+0x930>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d106      	bne.n	800245e <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8002450:	4b4b      	ldr	r3, [pc, #300]	; (8002580 <extInt_Config+0x928>)
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	4a4a      	ldr	r2, [pc, #296]	; (8002580 <extInt_Config+0x928>)
 8002456:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800245a:	6113      	str	r3, [r2, #16]
					break;
 800245c:	e1de      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a49      	ldr	r2, [pc, #292]	; (800258c <extInt_Config+0x934>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d106      	bne.n	8002478 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 800246a:	4b45      	ldr	r3, [pc, #276]	; (8002580 <extInt_Config+0x928>)
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	4a44      	ldr	r2, [pc, #272]	; (8002580 <extInt_Config+0x928>)
 8002470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002474:	6113      	str	r3, [r2, #16]
					break;
 8002476:	e1d1      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a44      	ldr	r2, [pc, #272]	; (8002590 <extInt_Config+0x938>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d106      	bne.n	8002492 <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8002484:	4b3e      	ldr	r3, [pc, #248]	; (8002580 <extInt_Config+0x928>)
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	4a3d      	ldr	r2, [pc, #244]	; (8002580 <extInt_Config+0x928>)
 800248a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800248e:	6113      	str	r3, [r2, #16]
					break;
 8002490:	e1c4      	b.n	800281c <extInt_Config+0xbc4>
						__NOP();
 8002492:	bf00      	nop
					break;
 8002494:	e1c2      	b.n	800281c <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8002496:	4b3a      	ldr	r3, [pc, #232]	; (8002580 <extInt_Config+0x928>)
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	4a39      	ldr	r2, [pc, #228]	; (8002580 <extInt_Config+0x928>)
 800249c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024a0:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a3a      	ldr	r2, [pc, #232]	; (8002594 <extInt_Config+0x93c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d104      	bne.n	80024b8 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 80024ae:	4b34      	ldr	r3, [pc, #208]	; (8002580 <extInt_Config+0x928>)
 80024b0:	4a33      	ldr	r2, [pc, #204]	; (8002580 <extInt_Config+0x928>)
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 80024b6:	e1b1      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a2f      	ldr	r2, [pc, #188]	; (800257c <extInt_Config+0x924>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d106      	bne.n	80024d2 <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80024c4:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <extInt_Config+0x928>)
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	4a2d      	ldr	r2, [pc, #180]	; (8002580 <extInt_Config+0x928>)
 80024ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024ce:	6113      	str	r3, [r2, #16]
					break;
 80024d0:	e1a4      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a2a      	ldr	r2, [pc, #168]	; (8002584 <extInt_Config+0x92c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d106      	bne.n	80024ec <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80024de:	4b28      	ldr	r3, [pc, #160]	; (8002580 <extInt_Config+0x928>)
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	4a27      	ldr	r2, [pc, #156]	; (8002580 <extInt_Config+0x928>)
 80024e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024e8:	6113      	str	r3, [r2, #16]
					break;
 80024ea:	e197      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a25      	ldr	r2, [pc, #148]	; (8002588 <extInt_Config+0x930>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d106      	bne.n	8002506 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 80024f8:	4b21      	ldr	r3, [pc, #132]	; (8002580 <extInt_Config+0x928>)
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	4a20      	ldr	r2, [pc, #128]	; (8002580 <extInt_Config+0x928>)
 80024fe:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002502:	6113      	str	r3, [r2, #16]
					break;
 8002504:	e18a      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1f      	ldr	r2, [pc, #124]	; (800258c <extInt_Config+0x934>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d106      	bne.n	8002520 <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <extInt_Config+0x928>)
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	4a1a      	ldr	r2, [pc, #104]	; (8002580 <extInt_Config+0x928>)
 8002518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800251c:	6113      	str	r3, [r2, #16]
					break;
 800251e:	e17d      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1a      	ldr	r2, [pc, #104]	; (8002590 <extInt_Config+0x938>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d106      	bne.n	800253a <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <extInt_Config+0x928>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	4a13      	ldr	r2, [pc, #76]	; (8002580 <extInt_Config+0x928>)
 8002532:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002536:	6113      	str	r3, [r2, #16]
					break;
 8002538:	e170      	b.n	800281c <extInt_Config+0xbc4>
						__NOP();
 800253a:	bf00      	nop
					break;
 800253c:	e16e      	b.n	800281c <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <extInt_Config+0x928>)
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	4a0f      	ldr	r2, [pc, #60]	; (8002580 <extInt_Config+0x928>)
 8002544:	f023 030f 	bic.w	r3, r3, #15
 8002548:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a10      	ldr	r2, [pc, #64]	; (8002594 <extInt_Config+0x93c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d104      	bne.n	8002560 <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <extInt_Config+0x928>)
 8002558:	4a09      	ldr	r2, [pc, #36]	; (8002580 <extInt_Config+0x928>)
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 800255e:	e15d      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <extInt_Config+0x924>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d115      	bne.n	8002598 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <extInt_Config+0x928>)
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	4a03      	ldr	r2, [pc, #12]	; (8002580 <extInt_Config+0x928>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6153      	str	r3, [r2, #20]
					break;
 8002578:	e150      	b.n	800281c <extInt_Config+0xbc4>
 800257a:	bf00      	nop
 800257c:	40020400 	.word	0x40020400
 8002580:	40013800 	.word	0x40013800
 8002584:	40020800 	.word	0x40020800
 8002588:	40020c00 	.word	0x40020c00
 800258c:	40021000 	.word	0x40021000
 8002590:	40021c00 	.word	0x40021c00
 8002594:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a89      	ldr	r2, [pc, #548]	; (80027c4 <extInt_Config+0xb6c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d106      	bne.n	80025b2 <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 80025a4:	4b88      	ldr	r3, [pc, #544]	; (80027c8 <extInt_Config+0xb70>)
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	4a87      	ldr	r2, [pc, #540]	; (80027c8 <extInt_Config+0xb70>)
 80025aa:	f043 0302 	orr.w	r3, r3, #2
 80025ae:	6153      	str	r3, [r2, #20]
					break;
 80025b0:	e134      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a84      	ldr	r2, [pc, #528]	; (80027cc <extInt_Config+0xb74>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d106      	bne.n	80025cc <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 80025be:	4b82      	ldr	r3, [pc, #520]	; (80027c8 <extInt_Config+0xb70>)
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	4a81      	ldr	r2, [pc, #516]	; (80027c8 <extInt_Config+0xb70>)
 80025c4:	f043 0303 	orr.w	r3, r3, #3
 80025c8:	6153      	str	r3, [r2, #20]
					break;
 80025ca:	e127      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a7f      	ldr	r2, [pc, #508]	; (80027d0 <extInt_Config+0xb78>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d106      	bne.n	80025e6 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80025d8:	4b7b      	ldr	r3, [pc, #492]	; (80027c8 <extInt_Config+0xb70>)
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	4a7a      	ldr	r2, [pc, #488]	; (80027c8 <extInt_Config+0xb70>)
 80025de:	f043 0304 	orr.w	r3, r3, #4
 80025e2:	6153      	str	r3, [r2, #20]
					break;
 80025e4:	e11a      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a79      	ldr	r2, [pc, #484]	; (80027d4 <extInt_Config+0xb7c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d106      	bne.n	8002600 <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80025f2:	4b75      	ldr	r3, [pc, #468]	; (80027c8 <extInt_Config+0xb70>)
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	4a74      	ldr	r2, [pc, #464]	; (80027c8 <extInt_Config+0xb70>)
 80025f8:	f043 0307 	orr.w	r3, r3, #7
 80025fc:	6153      	str	r3, [r2, #20]
					break;
 80025fe:	e10d      	b.n	800281c <extInt_Config+0xbc4>
						__NOP();
 8002600:	bf00      	nop
					break;
 8002602:	e10b      	b.n	800281c <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8002604:	4b70      	ldr	r3, [pc, #448]	; (80027c8 <extInt_Config+0xb70>)
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	4a6f      	ldr	r2, [pc, #444]	; (80027c8 <extInt_Config+0xb70>)
 800260a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800260e:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a70      	ldr	r2, [pc, #448]	; (80027d8 <extInt_Config+0xb80>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d104      	bne.n	8002626 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 800261c:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <extInt_Config+0xb70>)
 800261e:	4a6a      	ldr	r2, [pc, #424]	; (80027c8 <extInt_Config+0xb70>)
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	6153      	str	r3, [r2, #20]
 8002624:	e041      	b.n	80026aa <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a6b      	ldr	r2, [pc, #428]	; (80027dc <extInt_Config+0xb84>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d106      	bne.n	8002640 <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8002632:	4b65      	ldr	r3, [pc, #404]	; (80027c8 <extInt_Config+0xb70>)
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	4a64      	ldr	r2, [pc, #400]	; (80027c8 <extInt_Config+0xb70>)
 8002638:	f043 0310 	orr.w	r3, r3, #16
 800263c:	6153      	str	r3, [r2, #20]
 800263e:	e034      	b.n	80026aa <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a5f      	ldr	r2, [pc, #380]	; (80027c4 <extInt_Config+0xb6c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d106      	bne.n	800265a <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 800264c:	4b5e      	ldr	r3, [pc, #376]	; (80027c8 <extInt_Config+0xb70>)
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	4a5d      	ldr	r2, [pc, #372]	; (80027c8 <extInt_Config+0xb70>)
 8002652:	f043 0320 	orr.w	r3, r3, #32
 8002656:	6153      	str	r3, [r2, #20]
 8002658:	e027      	b.n	80026aa <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a5a      	ldr	r2, [pc, #360]	; (80027cc <extInt_Config+0xb74>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d106      	bne.n	8002674 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8002666:	4b58      	ldr	r3, [pc, #352]	; (80027c8 <extInt_Config+0xb70>)
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	4a57      	ldr	r2, [pc, #348]	; (80027c8 <extInt_Config+0xb70>)
 800266c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002670:	6153      	str	r3, [r2, #20]
 8002672:	e01a      	b.n	80026aa <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a55      	ldr	r2, [pc, #340]	; (80027d0 <extInt_Config+0xb78>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d106      	bne.n	800268e <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8002680:	4b51      	ldr	r3, [pc, #324]	; (80027c8 <extInt_Config+0xb70>)
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	4a50      	ldr	r2, [pc, #320]	; (80027c8 <extInt_Config+0xb70>)
 8002686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800268a:	6153      	str	r3, [r2, #20]
 800268c:	e00d      	b.n	80026aa <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a4f      	ldr	r2, [pc, #316]	; (80027d4 <extInt_Config+0xb7c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d106      	bne.n	80026a8 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 800269a:	4b4b      	ldr	r3, [pc, #300]	; (80027c8 <extInt_Config+0xb70>)
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	4a4a      	ldr	r2, [pc, #296]	; (80027c8 <extInt_Config+0xb70>)
 80026a0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80026a4:	6153      	str	r3, [r2, #20]
 80026a6:	e000      	b.n	80026aa <extInt_Config+0xa52>

					} else {
						__NOP();
 80026a8:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 80026aa:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <extInt_Config+0xb70>)
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	4a46      	ldr	r2, [pc, #280]	; (80027c8 <extInt_Config+0xb70>)
 80026b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026b4:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a46      	ldr	r2, [pc, #280]	; (80027d8 <extInt_Config+0xb80>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d104      	bne.n	80026cc <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 80026c2:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <extInt_Config+0xb70>)
 80026c4:	4a40      	ldr	r2, [pc, #256]	; (80027c8 <extInt_Config+0xb70>)
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 80026ca:	e0a7      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a42      	ldr	r2, [pc, #264]	; (80027dc <extInt_Config+0xb84>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d106      	bne.n	80026e6 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80026d8:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <extInt_Config+0xb70>)
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	4a3a      	ldr	r2, [pc, #232]	; (80027c8 <extInt_Config+0xb70>)
 80026de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e2:	6153      	str	r3, [r2, #20]
					break;
 80026e4:	e09a      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a35      	ldr	r2, [pc, #212]	; (80027c4 <extInt_Config+0xb6c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d106      	bne.n	8002700 <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 80026f2:	4b35      	ldr	r3, [pc, #212]	; (80027c8 <extInt_Config+0xb70>)
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	4a34      	ldr	r2, [pc, #208]	; (80027c8 <extInt_Config+0xb70>)
 80026f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026fc:	6153      	str	r3, [r2, #20]
					break;
 80026fe:	e08d      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a31      	ldr	r2, [pc, #196]	; (80027cc <extInt_Config+0xb74>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d106      	bne.n	800271a <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 800270c:	4b2e      	ldr	r3, [pc, #184]	; (80027c8 <extInt_Config+0xb70>)
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	4a2d      	ldr	r2, [pc, #180]	; (80027c8 <extInt_Config+0xb70>)
 8002712:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002716:	6153      	str	r3, [r2, #20]
					break;
 8002718:	e080      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a2b      	ldr	r2, [pc, #172]	; (80027d0 <extInt_Config+0xb78>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d106      	bne.n	8002734 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8002726:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <extInt_Config+0xb70>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	4a27      	ldr	r2, [pc, #156]	; (80027c8 <extInt_Config+0xb70>)
 800272c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002730:	6153      	str	r3, [r2, #20]
					break;
 8002732:	e073      	b.n	800281c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a26      	ldr	r2, [pc, #152]	; (80027d4 <extInt_Config+0xb7c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d106      	bne.n	800274e <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8002740:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <extInt_Config+0xb70>)
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	4a20      	ldr	r2, [pc, #128]	; (80027c8 <extInt_Config+0xb70>)
 8002746:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800274a:	6153      	str	r3, [r2, #20]
					break;
 800274c:	e066      	b.n	800281c <extInt_Config+0xbc4>
						__NOP();
 800274e:	bf00      	nop
					break;
 8002750:	e064      	b.n	800281c <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <extInt_Config+0xb70>)
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <extInt_Config+0xb70>)
 8002758:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800275c:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <extInt_Config+0xb80>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d104      	bne.n	8002774 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <extInt_Config+0xb70>)
 800276c:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <extInt_Config+0xb70>)
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 8002772:	e053      	b.n	800281c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a18      	ldr	r2, [pc, #96]	; (80027dc <extInt_Config+0xb84>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d106      	bne.n	800278e <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <extInt_Config+0xb70>)
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	4a10      	ldr	r2, [pc, #64]	; (80027c8 <extInt_Config+0xb70>)
 8002786:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800278a:	6153      	str	r3, [r2, #20]
						break;
 800278c:	e046      	b.n	800281c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <extInt_Config+0xb6c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d106      	bne.n	80027a8 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <extInt_Config+0xb70>)
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <extInt_Config+0xb70>)
 80027a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027a4:	6153      	str	r3, [r2, #20]
						break;
 80027a6:	e039      	b.n	800281c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a07      	ldr	r2, [pc, #28]	; (80027cc <extInt_Config+0xb74>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d115      	bne.n	80027e0 <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <extInt_Config+0xb70>)
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	4a03      	ldr	r2, [pc, #12]	; (80027c8 <extInt_Config+0xb70>)
 80027ba:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80027be:	6153      	str	r3, [r2, #20]
						break;
 80027c0:	e02c      	b.n	800281c <extInt_Config+0xbc4>
 80027c2:	bf00      	nop
 80027c4:	40020800 	.word	0x40020800
 80027c8:	40013800 	.word	0x40013800
 80027cc:	40020c00 	.word	0x40020c00
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40021c00 	.word	0x40021c00
 80027d8:	40020000 	.word	0x40020000
 80027dc:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a6c      	ldr	r2, [pc, #432]	; (8002998 <extInt_Config+0xd40>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d106      	bne.n	80027fa <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80027ec:	4b6b      	ldr	r3, [pc, #428]	; (800299c <extInt_Config+0xd44>)
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	4a6a      	ldr	r2, [pc, #424]	; (800299c <extInt_Config+0xd44>)
 80027f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f6:	6153      	str	r3, [r2, #20]
						break;
 80027f8:	e010      	b.n	800281c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a67      	ldr	r2, [pc, #412]	; (80029a0 <extInt_Config+0xd48>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d106      	bne.n	8002814 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8002806:	4b65      	ldr	r3, [pc, #404]	; (800299c <extInt_Config+0xd44>)
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	4a64      	ldr	r2, [pc, #400]	; (800299c <extInt_Config+0xd44>)
 800280c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002810:	6153      	str	r3, [r2, #20]
						break;
 8002812:	e003      	b.n	800281c <extInt_Config+0xbc4>
							__NOP();
 8002814:	bf00      	nop
						break;
 8002816:	e001      	b.n	800281c <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8002818:	bf00      	nop
						break;
 800281a:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	791b      	ldrb	r3, [r3, #4]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d020      	beq.n	8002866 <extInt_Config+0xc0e>
 8002824:	2b02      	cmp	r3, #2
 8002826:	dc37      	bgt.n	8002898 <extInt_Config+0xc40>
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <extInt_Config+0xbda>
 800282c:	2b01      	cmp	r3, #1
 800282e:	d00d      	beq.n	800284c <extInt_Config+0xbf4>
 8002830:	e032      	b.n	8002898 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002832:	4b5c      	ldr	r3, [pc, #368]	; (80029a4 <extInt_Config+0xd4c>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	7912      	ldrb	r2, [r2, #4]
 800283c:	4611      	mov	r1, r2
 800283e:	2201      	movs	r2, #1
 8002840:	408a      	lsls	r2, r1
 8002842:	4611      	mov	r1, r2
 8002844:	4a57      	ldr	r2, [pc, #348]	; (80029a4 <extInt_Config+0xd4c>)
 8002846:	430b      	orrs	r3, r1
 8002848:	60d3      	str	r3, [r2, #12]

		break;
 800284a:	e027      	b.n	800289c <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800284c:	4b55      	ldr	r3, [pc, #340]	; (80029a4 <extInt_Config+0xd4c>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	7912      	ldrb	r2, [r2, #4]
 8002856:	4611      	mov	r1, r2
 8002858:	2201      	movs	r2, #1
 800285a:	408a      	lsls	r2, r1
 800285c:	4611      	mov	r1, r2
 800285e:	4a51      	ldr	r2, [pc, #324]	; (80029a4 <extInt_Config+0xd4c>)
 8002860:	430b      	orrs	r3, r1
 8002862:	6093      	str	r3, [r2, #8]

		break;
 8002864:	e01a      	b.n	800289c <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002866:	4b4f      	ldr	r3, [pc, #316]	; (80029a4 <extInt_Config+0xd4c>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	7912      	ldrb	r2, [r2, #4]
 8002870:	4611      	mov	r1, r2
 8002872:	2201      	movs	r2, #1
 8002874:	408a      	lsls	r2, r1
 8002876:	4611      	mov	r1, r2
 8002878:	4a4a      	ldr	r2, [pc, #296]	; (80029a4 <extInt_Config+0xd4c>)
 800287a:	430b      	orrs	r3, r1
 800287c:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800287e:	4b49      	ldr	r3, [pc, #292]	; (80029a4 <extInt_Config+0xd4c>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	7912      	ldrb	r2, [r2, #4]
 8002888:	4611      	mov	r1, r2
 800288a:	2201      	movs	r2, #1
 800288c:	408a      	lsls	r2, r1
 800288e:	4611      	mov	r1, r2
 8002890:	4a44      	ldr	r2, [pc, #272]	; (80029a4 <extInt_Config+0xd4c>)
 8002892:	430b      	orrs	r3, r1
 8002894:	6093      	str	r3, [r2, #8]

		break;
 8002896:	e001      	b.n	800289c <extInt_Config+0xc44>

	}default :{

		__NOP();
 8002898:	bf00      	nop
		break;
 800289a:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 800289c:	b672      	cpsid	i
}
 800289e:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80028a0:	4b40      	ldr	r3, [pc, #256]	; (80029a4 <extInt_Config+0xd4c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	7912      	ldrb	r2, [r2, #4]
 80028aa:	4611      	mov	r1, r2
 80028ac:	2201      	movs	r2, #1
 80028ae:	408a      	lsls	r2, r1
 80028b0:	4611      	mov	r1, r2
 80028b2:	4a3c      	ldr	r2, [pc, #240]	; (80029a4 <extInt_Config+0xd4c>)
 80028b4:	430b      	orrs	r3, r1
 80028b6:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	791b      	ldrb	r3, [r3, #4]
 80028be:	2b0f      	cmp	r3, #15
 80028c0:	d862      	bhi.n	8002988 <extInt_Config+0xd30>
 80028c2:	a201      	add	r2, pc, #4	; (adr r2, 80028c8 <extInt_Config+0xc70>)
 80028c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c8:	08002909 	.word	0x08002909
 80028cc:	08002911 	.word	0x08002911
 80028d0:	08002919 	.word	0x08002919
 80028d4:	08002921 	.word	0x08002921
 80028d8:	08002929 	.word	0x08002929
 80028dc:	08002931 	.word	0x08002931
 80028e0:	08002939 	.word	0x08002939
 80028e4:	08002941 	.word	0x08002941
 80028e8:	08002949 	.word	0x08002949
 80028ec:	08002951 	.word	0x08002951
 80028f0:	08002959 	.word	0x08002959
 80028f4:	08002961 	.word	0x08002961
 80028f8:	08002969 	.word	0x08002969
 80028fc:	08002971 	.word	0x08002971
 8002900:	08002979 	.word	0x08002979
 8002904:	08002981 	.word	0x08002981
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8002908:	2006      	movs	r0, #6
 800290a:	f7ff f987 	bl	8001c1c <__NVIC_EnableIRQ>
			break;
 800290e:	e03d      	b.n	800298c <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 8002910:	2007      	movs	r0, #7
 8002912:	f7ff f983 	bl	8001c1c <__NVIC_EnableIRQ>
			break;
 8002916:	e039      	b.n	800298c <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8002918:	2008      	movs	r0, #8
 800291a:	f7ff f97f 	bl	8001c1c <__NVIC_EnableIRQ>
			break;
 800291e:	e035      	b.n	800298c <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 8002920:	2009      	movs	r0, #9
 8002922:	f7ff f97b 	bl	8001c1c <__NVIC_EnableIRQ>
			break;
 8002926:	e031      	b.n	800298c <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8002928:	200a      	movs	r0, #10
 800292a:	f7ff f977 	bl	8001c1c <__NVIC_EnableIRQ>
			break;
 800292e:	e02d      	b.n	800298c <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002930:	2017      	movs	r0, #23
 8002932:	f7ff f973 	bl	8001c1c <__NVIC_EnableIRQ>
			break;
 8002936:	e029      	b.n	800298c <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002938:	2017      	movs	r0, #23
 800293a:	f7ff f96f 	bl	8001c1c <__NVIC_EnableIRQ>
			break;
 800293e:	e025      	b.n	800298c <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002940:	2017      	movs	r0, #23
 8002942:	f7ff f96b 	bl	8001c1c <__NVIC_EnableIRQ>
			break;
 8002946:	e021      	b.n	800298c <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002948:	2017      	movs	r0, #23
 800294a:	f7ff f967 	bl	8001c1c <__NVIC_EnableIRQ>
			break;
 800294e:	e01d      	b.n	800298c <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002950:	2017      	movs	r0, #23
 8002952:	f7ff f963 	bl	8001c1c <__NVIC_EnableIRQ>
			break;
 8002956:	e019      	b.n	800298c <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002958:	2028      	movs	r0, #40	; 0x28
 800295a:	f7ff f95f 	bl	8001c1c <__NVIC_EnableIRQ>
			break;
 800295e:	e015      	b.n	800298c <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002960:	2028      	movs	r0, #40	; 0x28
 8002962:	f7ff f95b 	bl	8001c1c <__NVIC_EnableIRQ>
			break;
 8002966:	e011      	b.n	800298c <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002968:	2028      	movs	r0, #40	; 0x28
 800296a:	f7ff f957 	bl	8001c1c <__NVIC_EnableIRQ>
			break;
 800296e:	e00d      	b.n	800298c <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002970:	2028      	movs	r0, #40	; 0x28
 8002972:	f7ff f953 	bl	8001c1c <__NVIC_EnableIRQ>
			break;
 8002976:	e009      	b.n	800298c <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002978:	2028      	movs	r0, #40	; 0x28
 800297a:	f7ff f94f 	bl	8001c1c <__NVIC_EnableIRQ>
			break;
 800297e:	e005      	b.n	800298c <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002980:	2028      	movs	r0, #40	; 0x28
 8002982:	f7ff f94b 	bl	8001c1c <__NVIC_EnableIRQ>
			break;
 8002986:	e001      	b.n	800298c <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 8002988:	bf00      	nop
			break;
 800298a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800298c:	b662      	cpsie	i
}
 800298e:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40021000 	.word	0x40021000
 800299c:	40013800 	.word	0x40013800
 80029a0:	40021c00 	.word	0x40021c00
 80029a4:	40013c00 	.word	0x40013c00

080029a8 <callback_extInt0>:
	__enable_irq();

}

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
	__NOP();
 80029ac:	bf00      	nop
}
 80029ae:	bf00      	nop
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
	__NOP();
 80029bc:	bf00      	nop
}
 80029be:	bf00      	nop
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
	__NOP();
 80029cc:	bf00      	nop
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
	__NOP();
 80029dc:	bf00      	nop
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
	__NOP();
 80029ec:	bf00      	nop
}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
	__NOP();
 80029fc:	bf00      	nop
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
	__NOP();
 8002a0c:	bf00      	nop
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
	__NOP();
 8002a1c:	bf00      	nop
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
	__NOP();
 8002a2c:	bf00      	nop
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
	__NOP();
 8002a3c:	bf00      	nop
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
	__NOP();
 8002a4c:	bf00      	nop
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
	__NOP();
 8002a5c:	bf00      	nop
}
 8002a5e:	bf00      	nop
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
	__NOP();
 8002a6c:	bf00      	nop
}
 8002a6e:	bf00      	nop
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
	__NOP();
 8002a7c:	bf00      	nop
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8002a8c:	4b07      	ldr	r3, [pc, #28]	; (8002aac <EXTI0_IRQHandler+0x24>)
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d007      	beq.n	8002aa8 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <EXTI0_IRQHandler+0x24>)
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	4a03      	ldr	r2, [pc, #12]	; (8002aac <EXTI0_IRQHandler+0x24>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8002aa4:	f7ff ff80 	bl	80029a8 <callback_extInt0>
	}
}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40013c00 	.word	0x40013c00

08002ab0 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8002ab4:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <EXTI1_IRQHandler+0x24>)
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d007      	beq.n	8002ad0 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <EXTI1_IRQHandler+0x24>)
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	4a03      	ldr	r2, [pc, #12]	; (8002ad4 <EXTI1_IRQHandler+0x24>)
 8002ac6:	f043 0302 	orr.w	r3, r3, #2
 8002aca:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 8002acc:	f7fe fbd6 	bl	800127c <callback_extInt1>
	}
}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40013c00 	.word	0x40013c00

08002ad8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 8002adc:	4b07      	ldr	r3, [pc, #28]	; (8002afc <EXTI2_IRQHandler+0x24>)
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <EXTI2_IRQHandler+0x24>)
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	4a03      	ldr	r2, [pc, #12]	; (8002afc <EXTI2_IRQHandler+0x24>)
 8002aee:	f043 0304 	orr.w	r3, r3, #4
 8002af2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8002af4:	f7ff ff60 	bl	80029b8 <callback_extInt2>
	}
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40013c00 	.word	0x40013c00

08002b00 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8002b04:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <EXTI3_IRQHandler+0x24>)
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d007      	beq.n	8002b20 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <EXTI3_IRQHandler+0x24>)
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	4a03      	ldr	r2, [pc, #12]	; (8002b24 <EXTI3_IRQHandler+0x24>)
 8002b16:	f043 0308 	orr.w	r3, r3, #8
 8002b1a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8002b1c:	f7fe fbb5 	bl	800128a <callback_extInt3>
	}
}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40013c00 	.word	0x40013c00

08002b28 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <EXTI4_IRQHandler+0x24>)
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <EXTI4_IRQHandler+0x24>)
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	4a03      	ldr	r2, [pc, #12]	; (8002b4c <EXTI4_IRQHandler+0x24>)
 8002b3e:	f043 0310 	orr.w	r3, r3, #16
 8002b42:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 8002b44:	f7ff ff40 	bl	80029c8 <callback_extInt4>
	}
}
 8002b48:	bf00      	nop
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40013c00 	.word	0x40013c00

08002b50 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 8002b54:	4b26      	ldr	r3, [pc, #152]	; (8002bf0 <EXTI9_5_IRQHandler+0xa0>)
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8002b60:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <EXTI9_5_IRQHandler+0xa0>)
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	4a22      	ldr	r2, [pc, #136]	; (8002bf0 <EXTI9_5_IRQHandler+0xa0>)
 8002b66:	f043 0320 	orr.w	r3, r3, #32
 8002b6a:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 8002b6c:	f7ff ff34 	bl	80029d8 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 8002b70:	e03c      	b.n	8002bec <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 8002b72:	4b1f      	ldr	r3, [pc, #124]	; (8002bf0 <EXTI9_5_IRQHandler+0xa0>)
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <EXTI9_5_IRQHandler+0xa0>)
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <EXTI9_5_IRQHandler+0xa0>)
 8002b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b88:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 8002b8a:	f7ff ff2d 	bl	80029e8 <callback_extInt6>
}
 8002b8e:	e02d      	b.n	8002bec <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 8002b90:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <EXTI9_5_IRQHandler+0xa0>)
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8002b9c:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <EXTI9_5_IRQHandler+0xa0>)
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <EXTI9_5_IRQHandler+0xa0>)
 8002ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba6:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8002ba8:	f7ff ff26 	bl	80029f8 <callback_extInt7>
}
 8002bac:	e01e      	b.n	8002bec <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <EXTI9_5_IRQHandler+0xa0>)
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d008      	beq.n	8002bcc <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <EXTI9_5_IRQHandler+0xa0>)
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	4a0c      	ldr	r2, [pc, #48]	; (8002bf0 <EXTI9_5_IRQHandler+0xa0>)
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc4:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 8002bc6:	f7ff ff1f 	bl	8002a08 <callback_extInt8>
}
 8002bca:	e00f      	b.n	8002bec <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <EXTI9_5_IRQHandler+0xa0>)
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <EXTI9_5_IRQHandler+0xa0>)
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <EXTI9_5_IRQHandler+0xa0>)
 8002bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be2:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8002be4:	f7ff ff18 	bl	8002a18 <callback_extInt9>
}
 8002be8:	e000      	b.n	8002bec <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8002bea:	bf00      	nop
}
 8002bec:	bf00      	nop
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40013c00 	.word	0x40013c00

08002bf4 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8002c04:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	4a29      	ldr	r2, [pc, #164]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8002c10:	f7ff ff0a 	bl	8002a28 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 8002c14:	e049      	b.n	8002caa <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 8002c16:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8002c22:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	4a22      	ldr	r2, [pc, #136]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002c28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c2c:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 8002c2e:	f7ff ff03 	bl	8002a38 <callback_extInt11>
}
 8002c32:	e03a      	b.n	8002caa <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 8002c34:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8002c40:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	4a1a      	ldr	r2, [pc, #104]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002c46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c4a:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 8002c4c:	f7ff fefc 	bl	8002a48 <callback_extInt12>
}
 8002c50:	e02b      	b.n	8002caa <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 8002c52:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8002c5e:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002c64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c68:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 8002c6a:	f7ff fef5 	bl	8002a58 <callback_extInt13>
}
 8002c6e:	e01c      	b.n	8002caa <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	4a0b      	ldr	r2, [pc, #44]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c86:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8002c88:	f7ff feee 	bl	8002a68 <callback_extInt14>
}
 8002c8c:	e00d      	b.n	8002caa <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d007      	beq.n	8002caa <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <EXTI15_10_IRQHandler+0xbc>)
 8002ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca4:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 8002ca6:	f7ff fee7 	bl	8002a78 <callback_extInt15>
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40013c00 	.word	0x40013c00

08002cb4 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a88      	ldr	r2, [pc, #544]	; (8002eec <GPIO_Config+0x238>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d106      	bne.n	8002cdc <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8002cce:	4b88      	ldr	r3, [pc, #544]	; (8002ef0 <GPIO_Config+0x23c>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a87      	ldr	r2, [pc, #540]	; (8002ef0 <GPIO_Config+0x23c>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	e03a      	b.n	8002d52 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a84      	ldr	r2, [pc, #528]	; (8002ef4 <GPIO_Config+0x240>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d106      	bne.n	8002cf4 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8002ce6:	4b82      	ldr	r3, [pc, #520]	; (8002ef0 <GPIO_Config+0x23c>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	4a81      	ldr	r2, [pc, #516]	; (8002ef0 <GPIO_Config+0x23c>)
 8002cec:	f043 0302 	orr.w	r3, r3, #2
 8002cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf2:	e02e      	b.n	8002d52 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a7f      	ldr	r2, [pc, #508]	; (8002ef8 <GPIO_Config+0x244>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d106      	bne.n	8002d0c <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8002cfe:	4b7c      	ldr	r3, [pc, #496]	; (8002ef0 <GPIO_Config+0x23c>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a7b      	ldr	r2, [pc, #492]	; (8002ef0 <GPIO_Config+0x23c>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	e022      	b.n	8002d52 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a7a      	ldr	r2, [pc, #488]	; (8002efc <GPIO_Config+0x248>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d106      	bne.n	8002d24 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8002d16:	4b76      	ldr	r3, [pc, #472]	; (8002ef0 <GPIO_Config+0x23c>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	4a75      	ldr	r2, [pc, #468]	; (8002ef0 <GPIO_Config+0x23c>)
 8002d1c:	f043 0308 	orr.w	r3, r3, #8
 8002d20:	6313      	str	r3, [r2, #48]	; 0x30
 8002d22:	e016      	b.n	8002d52 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a75      	ldr	r2, [pc, #468]	; (8002f00 <GPIO_Config+0x24c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d106      	bne.n	8002d3c <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8002d2e:	4b70      	ldr	r3, [pc, #448]	; (8002ef0 <GPIO_Config+0x23c>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a6f      	ldr	r2, [pc, #444]	; (8002ef0 <GPIO_Config+0x23c>)
 8002d34:	f043 0310 	orr.w	r3, r3, #16
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	e00a      	b.n	8002d52 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a70      	ldr	r2, [pc, #448]	; (8002f04 <GPIO_Config+0x250>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d105      	bne.n	8002d52 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8002d46:	4b6a      	ldr	r3, [pc, #424]	; (8002ef0 <GPIO_Config+0x23c>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a69      	ldr	r2, [pc, #420]	; (8002ef0 <GPIO_Config+0x23c>)
 8002d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	795b      	ldrb	r3, [r3, #5]
 8002d56:	461a      	mov	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	791b      	ldrb	r3, [r3, #4]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	791b      	ldrb	r3, [r3, #4]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	2103      	movs	r1, #3
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	4619      	mov	r1, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	400a      	ands	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6819      	ldr	r1, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	7a1b      	ldrb	r3, [r3, #8]
 8002d96:	461a      	mov	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	791b      	ldrb	r3, [r3, #4]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	791b      	ldrb	r3, [r3, #4]
 8002dac:	4619      	mov	r1, r3
 8002dae:	2301      	movs	r3, #1
 8002db0:	408b      	lsls	r3, r1
 8002db2:	43db      	mvns	r3, r3
 8002db4:	4619      	mov	r1, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	400a      	ands	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	799b      	ldrb	r3, [r3, #6]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	791b      	ldrb	r3, [r3, #4]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	791b      	ldrb	r3, [r3, #4]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	2103      	movs	r1, #3
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	4619      	mov	r1, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6899      	ldr	r1, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	79db      	ldrb	r3, [r3, #7]
 8002e12:	461a      	mov	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	791b      	ldrb	r3, [r3, #4]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	791b      	ldrb	r3, [r3, #4]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	2103      	movs	r1, #3
 8002e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	4619      	mov	r1, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	400a      	ands	r2, r1
 8002e3c:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68d9      	ldr	r1, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	795b      	ldrb	r3, [r3, #5]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d143      	bne.n	8002ede <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	791b      	ldrb	r3, [r3, #4]
 8002e5a:	2b07      	cmp	r3, #7
 8002e5c:	d81f      	bhi.n	8002e9e <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	791b      	ldrb	r3, [r3, #4]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6a1a      	ldr	r2, [r3, #32]
 8002e6c:	210f      	movs	r1, #15
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	4619      	mov	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	400a      	ands	r2, r1
 8002e7e:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6a1a      	ldr	r2, [r3, #32]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7a5b      	ldrb	r3, [r3, #9]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e92:	4619      	mov	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 8002e9c:	e01f      	b.n	8002ede <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	791b      	ldrb	r3, [r3, #4]
 8002ea2:	3b08      	subs	r3, #8
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eae:	210f      	movs	r1, #15
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	4619      	mov	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	400a      	ands	r2, r1
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	7a5b      	ldrb	r3, [r3, #9]
 8002ecc:	4619      	mov	r1, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40020000 	.word	0x40020000
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40020400 	.word	0x40020400
 8002ef8:	40020800 	.word	0x40020800
 8002efc:	40020c00 	.word	0x40020c00
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40021c00 	.word	0x40021c00

08002f08 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d10d      	bne.n	8002f36 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	791b      	ldrb	r3, [r3, #4]
 8002f24:	4619      	mov	r1, r3
 8002f26:	2301      	movs	r3, #1
 8002f28:	408b      	lsls	r3, r1
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8002f34:	e00d      	b.n	8002f52 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699a      	ldr	r2, [r3, #24]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	791b      	ldrb	r3, [r3, #4]
 8002f40:	3310      	adds	r3, #16
 8002f42:	2101      	movs	r1, #1
 8002f44:	fa01 f303 	lsl.w	r3, r1, r3
 8002f48:	4619      	mov	r1, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	619a      	str	r2, [r3, #24]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	460b      	mov	r3, r1
 8002f68:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10d      	bne.n	8002f8c <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	791b      	ldrb	r3, [r3, #4]
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	408b      	lsls	r3, r1
 8002f80:	4619      	mov	r1, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 8002f8a:	e00d      	b.n	8002fa8 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	791b      	ldrb	r3, [r3, #4]
 8002f96:	3310      	adds	r3, #16
 8002f98:	2101      	movs	r1, #1
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	619a      	str	r2, [r3, #24]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	791b      	ldrb	r3, [r3, #4]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	4093      	lsls	r3, r2
 8002fca:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8002fd4:	897b      	ldrh	r3, [r7, #10]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	791b      	ldrb	r3, [r3, #4]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	40d3      	lsrs	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff ffd8 	bl	8002fb4 <GPIO_ReadPin>
 8003004:	4603      	mov	r3, r0
 8003006:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf0c      	ite	eq
 800300e:	2301      	moveq	r3, #1
 8003010:	2300      	movne	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	4619      	mov	r1, r3
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ff76 	bl	8002f08 <GPIO_WritePin>
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <configMPUAccel>:
#include "MPUAccel.h"
#include "I2CDriver.h"
#include "GPIOxDriver.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fe3b 	bl	8002cb4 <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fe36 	bl	8002cb4 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4618      	mov	r0, r3
 800304e:	f001 fdd5 	bl	8004bfc <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 8003052:	e004      	b.n	800305e <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f94f 	bl	80032f8 <WHOIAM>
 800305a:	4603      	mov	r3, r0
 800305c:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f7      	beq.n	8003054 <configMPUAccel+0x30>
	}

	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 8003064:	216b      	movs	r1, #107	; 0x6b
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f8f1 	bl	800324e <readData>
 800306c:	4603      	mov	r3, r0
 800306e:	73bb      	strb	r3, [r7, #14]
	byte &=  ~byte;
 8003070:	2300      	movs	r3, #0
 8003072:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 8003074:	7bbb      	ldrb	r3, [r7, #14]
 8003076:	461a      	mov	r2, r3
 8003078:	216b      	movs	r1, #107	; 0x6b
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f89c 	bl	80031b8 <writeData>
	byte = readData(ptrMPUAccel, 0x6B);
 8003080:	216b      	movs	r1, #107	; 0x6b
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f8e3 	bl	800324e <readData>
 8003088:	4603      	mov	r3, r0
 800308a:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 800308c:	211c      	movs	r1, #28
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f8dd 	bl	800324e <readData>
 8003094:	4603      	mov	r3, r0
 8003096:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 8003098:	7bbb      	ldrb	r3, [r7, #14]
 800309a:	f023 0318 	bic.w	r3, r3, #24
 800309e:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d833      	bhi.n	8003110 <configMPUAccel+0xec>
 80030a8:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <configMPUAccel+0x8c>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030c1 	.word	0x080030c1
 80030b4:	080030cf 	.word	0x080030cf
 80030b8:	080030e5 	.word	0x080030e5
 80030bc:	080030fb 	.word	0x080030fb
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 80030c0:	7bbb      	ldrb	r3, [r7, #14]
 80030c2:	461a      	mov	r2, r3
 80030c4:	211c      	movs	r1, #28
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f876 	bl	80031b8 <writeData>

				break;
 80030cc:	e021      	b.n	8003112 <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 80030ce:	7bbb      	ldrb	r3, [r7, #14]
 80030d0:	f043 0308 	orr.w	r3, r3, #8
 80030d4:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80030d6:	7bbb      	ldrb	r3, [r7, #14]
 80030d8:	461a      	mov	r2, r3
 80030da:	211c      	movs	r1, #28
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f86b 	bl	80031b8 <writeData>

				break;
 80030e2:	e016      	b.n	8003112 <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 80030e4:	7bbb      	ldrb	r3, [r7, #14]
 80030e6:	f043 0310 	orr.w	r3, r3, #16
 80030ea:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80030ec:	7bbb      	ldrb	r3, [r7, #14]
 80030ee:	461a      	mov	r2, r3
 80030f0:	211c      	movs	r1, #28
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f860 	bl	80031b8 <writeData>

				break;
 80030f8:	e00b      	b.n	8003112 <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 80030fa:	7bbb      	ldrb	r3, [r7, #14]
 80030fc:	f043 0318 	orr.w	r3, r3, #24
 8003100:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8003102:	7bbb      	ldrb	r3, [r7, #14]
 8003104:	461a      	mov	r2, r3
 8003106:	211c      	movs	r1, #28
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f855 	bl	80031b8 <writeData>

				break;
 800310e:	e000      	b.n	8003112 <configMPUAccel+0xee>
			}default:{
				break;
 8003110:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 8003112:	211c      	movs	r1, #28
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f89a 	bl	800324e <readData>
 800311a:	4603      	mov	r3, r0
 800311c:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 800311e:	211b      	movs	r1, #27
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f894 	bl	800324e <readData>
 8003126:	4603      	mov	r3, r0
 8003128:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 800312a:	7bbb      	ldrb	r3, [r7, #14]
 800312c:	f023 0318 	bic.w	r3, r3, #24
 8003130:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	785b      	ldrb	r3, [r3, #1]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d832      	bhi.n	80031a0 <configMPUAccel+0x17c>
 800313a:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <configMPUAccel+0x11c>)
 800313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003140:	08003151 	.word	0x08003151
 8003144:	0800315f 	.word	0x0800315f
 8003148:	08003175 	.word	0x08003175
 800314c:	0800318b 	.word	0x0800318b
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 8003150:	7bbb      	ldrb	r3, [r7, #14]
 8003152:	461a      	mov	r2, r3
 8003154:	211b      	movs	r1, #27
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f82e 	bl	80031b8 <writeData>

				break;
 800315c:	e021      	b.n	80031a2 <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 800315e:	7bbb      	ldrb	r3, [r7, #14]
 8003160:	f043 0308 	orr.w	r3, r3, #8
 8003164:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8003166:	7bbb      	ldrb	r3, [r7, #14]
 8003168:	461a      	mov	r2, r3
 800316a:	211b      	movs	r1, #27
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f823 	bl	80031b8 <writeData>

				break;
 8003172:	e016      	b.n	80031a2 <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 8003174:	7bbb      	ldrb	r3, [r7, #14]
 8003176:	f043 0310 	orr.w	r3, r3, #16
 800317a:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800317c:	7bbb      	ldrb	r3, [r7, #14]
 800317e:	461a      	mov	r2, r3
 8003180:	211b      	movs	r1, #27
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f818 	bl	80031b8 <writeData>

				break;
 8003188:	e00b      	b.n	80031a2 <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 800318a:	7bbb      	ldrb	r3, [r7, #14]
 800318c:	f043 0318 	orr.w	r3, r3, #24
 8003190:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8003192:	7bbb      	ldrb	r3, [r7, #14]
 8003194:	461a      	mov	r2, r3
 8003196:	211b      	movs	r1, #27
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f80d 	bl	80031b8 <writeData>

				break;
 800319e:	e000      	b.n	80031a2 <configMPUAccel+0x17e>
			}default:{
				break;
 80031a0:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 80031a2:	211b      	movs	r1, #27
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f852 	bl	800324e <readData>
 80031aa:	4603      	mov	r3, r0
 80031ac:	73bb      	strb	r3, [r7, #14]


}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop

080031b8 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
 80031c4:	4613      	mov	r3, r2
 80031c6:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695a      	ldr	r2, [r3, #20]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031da:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f001 fe8f 	bl	8004f04 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68d8      	ldr	r0, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	791b      	ldrb	r3, [r3, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	4619      	mov	r1, r3
 80031f4:	f001 fed9 	bl	8004faa <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f001 fefa 	bl	8004ffa <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003206:	e000      	b.n	800320a <writeData+0x52>
		__NOP();
 8003208:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f6      	bne.n	8003208 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	78ba      	ldrb	r2, [r7, #2]
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f001 ff03 	bl	800502e <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003228:	e000      	b.n	800322c <writeData+0x74>
		__NOP();
 800322a:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1f6      	bne.n	800322a <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4618      	mov	r0, r3
 8003242:	f001 fe4d 	bl	8004ee0 <i2c_stopTransaction>



}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	460b      	mov	r3, r1
 8003258:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003270:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	4618      	mov	r0, r3
 8003278:	f001 fe44 	bl	8004f04 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68d8      	ldr	r0, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	791b      	ldrb	r3, [r3, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	4619      	mov	r1, r3
 800328a:	f001 fe8e 	bl	8004faa <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f001 feaf 	bl	8004ffa <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800329c:	e000      	b.n	80032a0 <readData+0x52>
		__NOP();
 800329e:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f6      	bne.n	800329e <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f001 fe4a 	bl	8004f4e <i2c_reStartTransaction>

	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68d8      	ldr	r0, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	791b      	ldrb	r3, [r3, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	4619      	mov	r1, r3
 80032c8:	f001 fe6f 	bl	8004faa <i2c_sendSlaveAddressRW>

	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f001 fe58 	bl	8004f86 <i2c_sendNoAck>

	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	4618      	mov	r0, r3
 80032dc:	f001 fe00 	bl	8004ee0 <i2c_stopTransaction>

	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 febc 	bl	8005062 <i2c_readDataByte>
 80032ea:	4603      	mov	r3, r0
 80032ec:	73fb      	strb	r3, [r7, #15]

	return auxRead;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 8003308:	2175      	movs	r1, #117	; 0x75
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ff9f 	bl	800324e <readData>
 8003310:	4603      	mov	r3, r0
 8003312:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800331a:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf14      	ite	ne
 8003326:	2301      	movne	r3, #1
 8003328:	2300      	moveq	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	73bb      	strb	r3, [r7, #14]

	return rdy;
 800332e:	7bbb      	ldrb	r3, [r7, #14]

}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a6c      	ldr	r2, [pc, #432]	; (80034f8 <pwm_Config+0x1c0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d106      	bne.n	8003358 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800334a:	4b6c      	ldr	r3, [pc, #432]	; (80034fc <pwm_Config+0x1c4>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	4a6b      	ldr	r2, [pc, #428]	; (80034fc <pwm_Config+0x1c4>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6453      	str	r3, [r2, #68]	; 0x44
 8003356:	e030      	b.n	80033ba <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003360:	d106      	bne.n	8003370 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8003362:	4b66      	ldr	r3, [pc, #408]	; (80034fc <pwm_Config+0x1c4>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	4a65      	ldr	r2, [pc, #404]	; (80034fc <pwm_Config+0x1c4>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6413      	str	r3, [r2, #64]	; 0x40
 800336e:	e024      	b.n	80033ba <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a62      	ldr	r2, [pc, #392]	; (8003500 <pwm_Config+0x1c8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d106      	bne.n	8003388 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800337a:	4b60      	ldr	r3, [pc, #384]	; (80034fc <pwm_Config+0x1c4>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	4a5f      	ldr	r2, [pc, #380]	; (80034fc <pwm_Config+0x1c4>)
 8003380:	f043 0302 	orr.w	r3, r3, #2
 8003384:	6413      	str	r3, [r2, #64]	; 0x40
 8003386:	e018      	b.n	80033ba <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a5d      	ldr	r2, [pc, #372]	; (8003504 <pwm_Config+0x1cc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d106      	bne.n	80033a0 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8003392:	4b5a      	ldr	r3, [pc, #360]	; (80034fc <pwm_Config+0x1c4>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	4a59      	ldr	r2, [pc, #356]	; (80034fc <pwm_Config+0x1c4>)
 8003398:	f043 0304 	orr.w	r3, r3, #4
 800339c:	6413      	str	r3, [r2, #64]	; 0x40
 800339e:	e00c      	b.n	80033ba <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a58      	ldr	r2, [pc, #352]	; (8003508 <pwm_Config+0x1d0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d106      	bne.n	80033b8 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80033aa:	4b54      	ldr	r3, [pc, #336]	; (80034fc <pwm_Config+0x1c4>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	4a53      	ldr	r2, [pc, #332]	; (80034fc <pwm_Config+0x1c4>)
 80033b0:	f043 0308 	orr.w	r3, r3, #8
 80033b4:	6413      	str	r3, [r2, #64]	; 0x40
 80033b6:	e000      	b.n	80033ba <pwm_Config+0x82>
	}
	else{
		__NOP();
 80033b8:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033c8:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	7d5b      	ldrb	r3, [r3, #21]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f8ac 	bl	8003530 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f9c3 	bl	8003764 <setDuttyCycle>
 80033de:	e005      	b.n	80033ec <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f8a5 	bl	8003530 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa94 	bl	8003914 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0210 	bic.w	r2, r2, #16
 80033fa:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2200      	movs	r2, #0
 8003402:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	791b      	ldrb	r3, [r3, #4]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d86f      	bhi.n	80034ec <pwm_Config+0x1b4>
 800340c:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <pwm_Config+0xdc>)
 800340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003412:	bf00      	nop
 8003414:	08003425 	.word	0x08003425
 8003418:	08003457 	.word	0x08003457
 800341c:	08003489 	.word	0x08003489
 8003420:	080034bb 	.word	0x080034bb
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0203 	bic.w	r2, r2, #3
 8003432:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003442:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0208 	orr.w	r2, r2, #8
 8003452:	619a      	str	r2, [r3, #24]


		break;
 8003454:	e04b      	b.n	80034ee <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699a      	ldr	r2, [r3, #24]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003464:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699a      	ldr	r2, [r3, #24]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003474:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003484:	619a      	str	r2, [r3, #24]

		break;
 8003486:	e032      	b.n	80034ee <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0203 	bic.w	r2, r2, #3
 8003496:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80034a6:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0208 	orr.w	r2, r2, #8
 80034b6:	61da      	str	r2, [r3, #28]

		break;
 80034b8:	e019      	b.n	80034ee <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034c8:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69da      	ldr	r2, [r3, #28]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80034d8:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e8:	61da      	str	r2, [r3, #28]

		break;
 80034ea:	e000      	b.n	80034ee <pwm_Config+0x1b6>
	}

	default:{
		break;
 80034ec:	bf00      	nop
	}// fin del switch-case




}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40010000 	.word	0x40010000
 80034fc:	40023800 	.word	0x40023800
 8003500:	40000400 	.word	0x40000400
 8003504:	40000800 	.word	0x40000800
 8003508:	40000c00 	.word	0x40000c00

0800350c <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6892      	ldr	r2, [r2, #8]
 8003544:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_10us )
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2ba0      	cmp	r3, #160	; 0xa0
 8003550:	d022      	beq.n	8003598 <setFrequency+0x68>
     ||(speed == PWM_SPEED_20MHz_10us)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2bc8      	cmp	r3, #200	; 0xc8
 8003556:	d01f      	beq.n	8003598 <setFrequency+0x68>
     ||(speed == PWM_SPEED_30MHz_10us)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800355e:	d01b      	beq.n	8003598 <setFrequency+0x68>
     ||(speed == PWM_SPEED_40MHz_10us)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003566:	d017      	beq.n	8003598 <setFrequency+0x68>
     ||(speed == PWM_SPEED_50MHz_10us)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800356e:	d013      	beq.n	8003598 <setFrequency+0x68>
     ||(speed == PWM_SPEED_60MHz_10us)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003576:	d00f      	beq.n	8003598 <setFrequency+0x68>
     ||(speed == PWM_SPEED_70MHz_10us)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800357e:	d00b      	beq.n	8003598 <setFrequency+0x68>
     ||(speed == PWM_SPEED_80MHz_10us)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003586:	d007      	beq.n	8003598 <setFrequency+0x68>
     ||(speed == PWM_SPEED_90MHz_10us)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800358e:	d003      	beq.n	8003598 <setFrequency+0x68>
     ||(speed == PWM_SPEED_100MHz_10us)){
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003596:	d111      	bne.n	80035bc <setFrequency+0x8c>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	899b      	ldrh	r3, [r3, #12]
 800359c:	461a      	mov	r2, r3
 800359e:	0152      	lsls	r2, r2, #5
 80035a0:	1ad2      	subs	r2, r2, r3
 80035a2:	0092      	lsls	r2, r2, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	4b68      	ldr	r3, [pc, #416]	; (800374c <setFrequency+0x21c>)
 80035ac:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80035ae:	4b67      	ldr	r3, [pc, #412]	; (800374c <setFrequency+0x21c>)
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	1e5a      	subs	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80035ba:	e0c0      	b.n	800373e <setFrequency+0x20e>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2ba0      	cmp	r3, #160	; 0xa0
 80035c0:	d022      	beq.n	8003608 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_20MHz_10us)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2bc8      	cmp	r3, #200	; 0xc8
 80035c6:	d01f      	beq.n	8003608 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_30MHz_10us)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80035ce:	d01b      	beq.n	8003608 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_40MHz_10us)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80035d6:	d017      	beq.n	8003608 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_50MHz_10us)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80035de:	d013      	beq.n	8003608 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_60MHz_10us)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80035e6:	d00f      	beq.n	8003608 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_70MHz_10us)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80035ee:	d00b      	beq.n	8003608 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_80MHz_10us)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80035f6:	d007      	beq.n	8003608 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_90MHz_10us)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80035fe:	d003      	beq.n	8003608 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003606:	d114      	bne.n	8003632 <setFrequency+0x102>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	899b      	ldrh	r3, [r3, #12]
 800360c:	461a      	mov	r2, r3
 800360e:	0092      	lsls	r2, r2, #2
 8003610:	4413      	add	r3, r2
 8003612:	461a      	mov	r2, r3
 8003614:	0091      	lsls	r1, r2, #2
 8003616:	461a      	mov	r2, r3
 8003618:	460b      	mov	r3, r1
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	b29a      	uxth	r2, r3
 8003620:	4b4a      	ldr	r3, [pc, #296]	; (800374c <setFrequency+0x21c>)
 8003622:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8003624:	4b49      	ldr	r3, [pc, #292]	; (800374c <setFrequency+0x21c>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	1e5a      	subs	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003630:	e085      	b.n	800373e <setFrequency+0x20e>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003638:	d029      	beq.n	800368e <setFrequency+0x15e>
		   || (speed == PWM_SPEED_20MHz_100us)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003640:	d025      	beq.n	800368e <setFrequency+0x15e>
		   || (speed == PWM_SPEED_30MHz_100us)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003648:	4293      	cmp	r3, r2
 800364a:	d020      	beq.n	800368e <setFrequency+0x15e>
		   || (speed == PWM_SPEED_40MHz_100us)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003652:	d01c      	beq.n	800368e <setFrequency+0x15e>
		   || (speed == PWM_SPEED_50MHz_100us)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f241 3288 	movw	r2, #5000	; 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d017      	beq.n	800368e <setFrequency+0x15e>
		   || (speed == PWM_SPEED_60MHz_100us)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f241 7270 	movw	r2, #6000	; 0x1770
 8003664:	4293      	cmp	r3, r2
 8003666:	d012      	beq.n	800368e <setFrequency+0x15e>
		   || (speed == PWM_SPEED_70MHz_100us)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f641 3258 	movw	r2, #7000	; 0x1b58
 800366e:	4293      	cmp	r3, r2
 8003670:	d00d      	beq.n	800368e <setFrequency+0x15e>
		   || (speed == PWM_SPEED_80MHz_100us)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003678:	d009      	beq.n	800368e <setFrequency+0x15e>
		   || (speed == PWM_SPEED_90MHz_100us)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f242 3228 	movw	r2, #9000	; 0x2328
 8003680:	4293      	cmp	r3, r2
 8003682:	d004      	beq.n	800368e <setFrequency+0x15e>
		   || (speed == PWM_SPEED_100MHz_100us)){
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f242 7210 	movw	r2, #10000	; 0x2710
 800368a:	4293      	cmp	r3, r2
 800368c:	d10f      	bne.n	80036ae <setFrequency+0x17e>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	899b      	ldrh	r3, [r3, #12]
 8003692:	461a      	mov	r2, r3
 8003694:	0092      	lsls	r2, r2, #2
 8003696:	4413      	add	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	4b2b      	ldr	r3, [pc, #172]	; (800374c <setFrequency+0x21c>)
 800369e:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80036a0:	4b2a      	ldr	r3, [pc, #168]	; (800374c <setFrequency+0x21c>)
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	1e5a      	subs	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80036ac:	e047      	b.n	800373e <setFrequency+0x20e>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80036b4:	d028      	beq.n	8003708 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_20MHz_1ms)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80036bc:	4293      	cmp	r3, r2
 80036be:	d023      	beq.n	8003708 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_30MHz_1ms)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f247 5230 	movw	r2, #30000	; 0x7530
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d01e      	beq.n	8003708 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_40MHz_1ms)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f649 4240 	movw	r2, #40000	; 0x9c40
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d019      	beq.n	8003708 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_50MHz_1ms)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80036da:	4293      	cmp	r3, r2
 80036dc:	d014      	beq.n	8003708 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_60MHz_1ms)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00f      	beq.n	8003708 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_70MHz_1ms)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a19      	ldr	r2, [pc, #100]	; (8003750 <setFrequency+0x220>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00b      	beq.n	8003708 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_80MHz_1ms)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a18      	ldr	r2, [pc, #96]	; (8003754 <setFrequency+0x224>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d007      	beq.n	8003708 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_90MHz_1ms)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a17      	ldr	r2, [pc, #92]	; (8003758 <setFrequency+0x228>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d003      	beq.n	8003708 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a16      	ldr	r2, [pc, #88]	; (800375c <setFrequency+0x22c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d10a      	bne.n	800371e <setFrequency+0x1ee>

		periodo = ptrPwmHandler->config.periodo;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	899a      	ldrh	r2, [r3, #12]
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <setFrequency+0x21c>)
 800370e:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8003710:	4b0e      	ldr	r3, [pc, #56]	; (800374c <setFrequency+0x21c>)
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	1e5a      	subs	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c
 800371c:	e00f      	b.n	800373e <setFrequency+0x20e>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	899b      	ldrh	r3, [r3, #12]
 8003722:	4a0f      	ldr	r2, [pc, #60]	; (8003760 <setFrequency+0x230>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	091b      	lsrs	r3, r3, #4
 800372a:	b29a      	uxth	r2, r3
 800372c:	4b07      	ldr	r3, [pc, #28]	; (800374c <setFrequency+0x21c>)
 800372e:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <setFrequency+0x21c>)
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	1e5a      	subs	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20000404 	.word	0x20000404
 8003750:	00011170 	.word	0x00011170
 8003754:	00013880 	.word	0x00013880
 8003758:	00015f90 	.word	0x00015f90
 800375c:	000186a0 	.word	0x000186a0
 8003760:	cccccccd 	.word	0xcccccccd

08003764 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b08b      	sub	sp, #44	; 0x2c
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	791b      	ldrb	r3, [r3, #4]
 8003770:	2b03      	cmp	r3, #3
 8003772:	f200 80c3 	bhi.w	80038fc <setDuttyCycle+0x198>
 8003776:	a201      	add	r2, pc, #4	; (adr r2, 800377c <setDuttyCycle+0x18>)
 8003778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377c:	0800378d 	.word	0x0800378d
 8003780:	080037e9 	.word	0x080037e9
 8003784:	08003845 	.word	0x08003845
 8003788:	080038a1 	.word	0x080038a1
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	ed93 7a04 	vldr	s14, [r3, #16]
 8003792:	4b5d      	ldr	r3, [pc, #372]	; (8003908 <setDuttyCycle+0x1a4>)
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800379e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a2:	ee17 0a90 	vmov	r0, s15
 80037a6:	f7fc fed7 	bl	8000558 <__aeabi_f2d>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	4b55      	ldr	r3, [pc, #340]	; (800390c <setDuttyCycle+0x1a8>)
 80037b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037bc:	f7fd f84e 	bl	800085c <__aeabi_ddiv>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4610      	mov	r0, r2
 80037c6:	4619      	mov	r1, r3
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	4b50      	ldr	r3, [pc, #320]	; (8003910 <setDuttyCycle+0x1ac>)
 80037ce:	f7fc fd63 	bl	8000298 <__aeabi_dsub>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681c      	ldr	r4, [r3, #0]
 80037de:	f7fd f9eb 	bl	8000bb8 <__aeabi_d2uiz>
 80037e2:	4603      	mov	r3, r0
 80037e4:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 80037e6:	e08a      	b.n	80038fe <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	ed93 7a04 	vldr	s14, [r3, #16]
 80037ee:	4b46      	ldr	r3, [pc, #280]	; (8003908 <setDuttyCycle+0x1a4>)
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fe:	ee17 0a90 	vmov	r0, s15
 8003802:	f7fc fea9 	bl	8000558 <__aeabi_f2d>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	4b3e      	ldr	r3, [pc, #248]	; (800390c <setDuttyCycle+0x1a8>)
 8003814:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003818:	f7fd f820 	bl	800085c <__aeabi_ddiv>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	4b39      	ldr	r3, [pc, #228]	; (8003910 <setDuttyCycle+0x1ac>)
 800382a:	f7fc fd35 	bl	8000298 <__aeabi_dsub>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681c      	ldr	r4, [r3, #0]
 800383a:	f7fd f9bd 	bl	8000bb8 <__aeabi_d2uiz>
 800383e:	4603      	mov	r3, r0
 8003840:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8003842:	e05c      	b.n	80038fe <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	ed93 7a04 	vldr	s14, [r3, #16]
 800384a:	4b2f      	ldr	r3, [pc, #188]	; (8003908 <setDuttyCycle+0x1a4>)
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385a:	ee17 0a90 	vmov	r0, s15
 800385e:	f7fc fe7b 	bl	8000558 <__aeabi_f2d>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	4b27      	ldr	r3, [pc, #156]	; (800390c <setDuttyCycle+0x1a8>)
 8003870:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003874:	f7fc fff2 	bl	800085c <__aeabi_ddiv>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4610      	mov	r0, r2
 800387e:	4619      	mov	r1, r3
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	4b22      	ldr	r3, [pc, #136]	; (8003910 <setDuttyCycle+0x1ac>)
 8003886:	f7fc fd07 	bl	8000298 <__aeabi_dsub>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4610      	mov	r0, r2
 8003890:	4619      	mov	r1, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681c      	ldr	r4, [r3, #0]
 8003896:	f7fd f98f 	bl	8000bb8 <__aeabi_d2uiz>
 800389a:	4603      	mov	r3, r0
 800389c:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800389e:	e02e      	b.n	80038fe <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	ed93 7a04 	vldr	s14, [r3, #16]
 80038a6:	4b18      	ldr	r3, [pc, #96]	; (8003908 <setDuttyCycle+0x1a4>)
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b6:	ee17 0a90 	vmov	r0, s15
 80038ba:	f7fc fe4d 	bl	8000558 <__aeabi_f2d>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <setDuttyCycle+0x1a8>)
 80038cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80038d0:	f7fc ffc4 	bl	800085c <__aeabi_ddiv>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <setDuttyCycle+0x1ac>)
 80038e2:	f7fc fcd9 	bl	8000298 <__aeabi_dsub>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4610      	mov	r0, r2
 80038ec:	4619      	mov	r1, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681c      	ldr	r4, [r3, #0]
 80038f2:	f7fd f961 	bl	8000bb8 <__aeabi_d2uiz>
 80038f6:	4603      	mov	r3, r0
 80038f8:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 80038fa:	e000      	b.n	80038fe <setDuttyCycle+0x19a>
	}

	default:{
		break;
 80038fc:	bf00      	nop
	}

	}// fin del switch-case

}
 80038fe:	bf00      	nop
 8003900:	372c      	adds	r7, #44	; 0x2c
 8003902:	46bd      	mov	sp, r7
 8003904:	bd90      	pop	{r4, r7, pc}
 8003906:	bf00      	nop
 8003908:	20000404 	.word	0x20000404
 800390c:	40590000 	.word	0x40590000
 8003910:	3ff00000 	.word	0x3ff00000

08003914 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b08b      	sub	sp, #44	; 0x2c
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	791b      	ldrb	r3, [r3, #4]
 8003920:	2b03      	cmp	r3, #3
 8003922:	f200 80d3 	bhi.w	8003acc <setDuttyCycleAfOpt+0x1b8>
 8003926:	a201      	add	r2, pc, #4	; (adr r2, 800392c <setDuttyCycleAfOpt+0x18>)
 8003928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392c:	0800393d 	.word	0x0800393d
 8003930:	080039a1 	.word	0x080039a1
 8003934:	08003a05 	.word	0x08003a05
 8003938:	08003a69 	.word	0x08003a69
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003942:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8003ad8 <setDuttyCycleAfOpt+0x1c4>
 8003946:	ee37 7a67 	vsub.f32	s14, s14, s15
 800394a:	4b64      	ldr	r3, [pc, #400]	; (8003adc <setDuttyCycleAfOpt+0x1c8>)
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395a:	ee17 0a90 	vmov	r0, s15
 800395e:	f7fc fdfb 	bl	8000558 <__aeabi_f2d>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	4b5c      	ldr	r3, [pc, #368]	; (8003ae0 <setDuttyCycleAfOpt+0x1cc>)
 8003970:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003974:	f7fc ff72 	bl	800085c <__aeabi_ddiv>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	4b57      	ldr	r3, [pc, #348]	; (8003ae4 <setDuttyCycleAfOpt+0x1d0>)
 8003986:	f7fc fc87 	bl	8000298 <__aeabi_dsub>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4610      	mov	r0, r2
 8003990:	4619      	mov	r1, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681c      	ldr	r4, [r3, #0]
 8003996:	f7fd f90f 	bl	8000bb8 <__aeabi_d2uiz>
 800399a:	4603      	mov	r3, r0
 800399c:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 800399e:	e096      	b.n	8003ace <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80039a6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003ad8 <setDuttyCycleAfOpt+0x1c4>
 80039aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039ae:	4b4b      	ldr	r3, [pc, #300]	; (8003adc <setDuttyCycleAfOpt+0x1c8>)
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	ee07 3a90 	vmov	s15, r3
 80039b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	ee17 0a90 	vmov	r0, s15
 80039c2:	f7fc fdc9 	bl	8000558 <__aeabi_f2d>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	4b43      	ldr	r3, [pc, #268]	; (8003ae0 <setDuttyCycleAfOpt+0x1cc>)
 80039d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039d8:	f7fc ff40 	bl	800085c <__aeabi_ddiv>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4610      	mov	r0, r2
 80039e2:	4619      	mov	r1, r3
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	4b3e      	ldr	r3, [pc, #248]	; (8003ae4 <setDuttyCycleAfOpt+0x1d0>)
 80039ea:	f7fc fc55 	bl	8000298 <__aeabi_dsub>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681c      	ldr	r4, [r3, #0]
 80039fa:	f7fd f8dd 	bl	8000bb8 <__aeabi_d2uiz>
 80039fe:	4603      	mov	r3, r0
 8003a00:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8003a02:	e064      	b.n	8003ace <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a0a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003ad8 <setDuttyCycleAfOpt+0x1c4>
 8003a0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a12:	4b32      	ldr	r3, [pc, #200]	; (8003adc <setDuttyCycleAfOpt+0x1c8>)
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a22:	ee17 0a90 	vmov	r0, s15
 8003a26:	f7fc fd97 	bl	8000558 <__aeabi_f2d>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	4b2a      	ldr	r3, [pc, #168]	; (8003ae0 <setDuttyCycleAfOpt+0x1cc>)
 8003a38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a3c:	f7fc ff0e 	bl	800085c <__aeabi_ddiv>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4610      	mov	r0, r2
 8003a46:	4619      	mov	r1, r3
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <setDuttyCycleAfOpt+0x1d0>)
 8003a4e:	f7fc fc23 	bl	8000298 <__aeabi_dsub>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4610      	mov	r0, r2
 8003a58:	4619      	mov	r1, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681c      	ldr	r4, [r3, #0]
 8003a5e:	f7fd f8ab 	bl	8000bb8 <__aeabi_d2uiz>
 8003a62:	4603      	mov	r3, r0
 8003a64:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8003a66:	e032      	b.n	8003ace <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a6e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003ad8 <setDuttyCycleAfOpt+0x1c4>
 8003a72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a76:	4b19      	ldr	r3, [pc, #100]	; (8003adc <setDuttyCycleAfOpt+0x1c8>)
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a86:	ee17 0a90 	vmov	r0, s15
 8003a8a:	f7fc fd65 	bl	8000558 <__aeabi_f2d>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <setDuttyCycleAfOpt+0x1cc>)
 8003a9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003aa0:	f7fc fedc 	bl	800085c <__aeabi_ddiv>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <setDuttyCycleAfOpt+0x1d0>)
 8003ab2:	f7fc fbf1 	bl	8000298 <__aeabi_dsub>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4610      	mov	r0, r2
 8003abc:	4619      	mov	r1, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681c      	ldr	r4, [r3, #0]
 8003ac2:	f7fd f879 	bl	8000bb8 <__aeabi_d2uiz>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8003aca:	e000      	b.n	8003ace <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 8003acc:	bf00      	nop
	}

	}// fin del switch-case


}
 8003ace:	bf00      	nop
 8003ad0:	372c      	adds	r7, #44	; 0x2c
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd90      	pop	{r4, r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	42c80000 	.word	0x42c80000
 8003adc:	20000404 	.word	0x20000404
 8003ae0:	40590000 	.word	0x40590000
 8003ae4:	3ff00000 	.word	0x3ff00000

08003ae8 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 8003af2:	4b92      	ldr	r3, [pc, #584]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a91      	ldr	r2, [pc, #580]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003af8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003afc:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003afe:	4b8f      	ldr	r3, [pc, #572]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 8003b06:	4b8e      	ldr	r3, [pc, #568]	; (8003d40 <RCC_enableMaxFrequencies+0x258>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a8d      	ldr	r2, [pc, #564]	; (8003d40 <RCC_enableMaxFrequencies+0x258>)
 8003b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b10:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 8003b12:	4b8a      	ldr	r3, [pc, #552]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	4a89      	ldr	r2, [pc, #548]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003b18:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b1c:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	f200 82fc 	bhi.w	800411e <RCC_enableMaxFrequencies+0x636>
 8003b26:	a201      	add	r2, pc, #4	; (adr r2, 8003b2c <RCC_enableMaxFrequencies+0x44>)
 8003b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2c:	08003b51 	.word	0x08003b51
 8003b30:	08003bf3 	.word	0x08003bf3
 8003b34:	08003c95 	.word	0x08003c95
 8003b38:	08003d49 	.word	0x08003d49
 8003b3c:	08003deb 	.word	0x08003deb
 8003b40:	08003e8d 	.word	0x08003e8d
 8003b44:	08003f39 	.word	0x08003f39
 8003b48:	08003fdb 	.word	0x08003fdb
 8003b4c:	0800407d 	.word	0x0800407d
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003b50:	4b7a      	ldr	r3, [pc, #488]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4a79      	ldr	r2, [pc, #484]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003b56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b5a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003b5c:	4b77      	ldr	r3, [pc, #476]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4a76      	ldr	r2, [pc, #472]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003b62:	f043 0310 	orr.w	r3, r3, #16
 8003b66:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003b68:	4b74      	ldr	r3, [pc, #464]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	4a73      	ldr	r2, [pc, #460]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003b6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b76:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8003b78:	4b70      	ldr	r3, [pc, #448]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4a6f      	ldr	r2, [pc, #444]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003b7e:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8003b82:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003b84:	4b6d      	ldr	r3, [pc, #436]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	4a6c      	ldr	r2, [pc, #432]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003b8a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003b8e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8003b90:	4b6a      	ldr	r3, [pc, #424]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4a69      	ldr	r2, [pc, #420]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9a:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003b9c:	4b67      	ldr	r3, [pc, #412]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4a66      	ldr	r2, [pc, #408]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003ba8:	4b64      	ldr	r3, [pc, #400]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4a63      	ldr	r2, [pc, #396]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003bae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bb2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8003bb4:	4b61      	ldr	r3, [pc, #388]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4a60      	ldr	r2, [pc, #384]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003bba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bbe:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003bc0:	4b5e      	ldr	r3, [pc, #376]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a5d      	ldr	r2, [pc, #372]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bca:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003bcc:	e000      	b.n	8003bd0 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 8003bce:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003bd0:	4b5a      	ldr	r3, [pc, #360]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f8      	beq.n	8003bce <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003bdc:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <RCC_enableMaxFrequencies+0x25c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a58      	ldr	r2, [pc, #352]	; (8003d44 <RCC_enableMaxFrequencies+0x25c>)
 8003be2:	f023 030f 	bic.w	r3, r3, #15
 8003be6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8003be8:	4b56      	ldr	r3, [pc, #344]	; (8003d44 <RCC_enableMaxFrequencies+0x25c>)
 8003bea:	4a56      	ldr	r2, [pc, #344]	; (8003d44 <RCC_enableMaxFrequencies+0x25c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6013      	str	r3, [r2, #0]

			break;
 8003bf0:	e296      	b.n	8004120 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003bf2:	4b52      	ldr	r3, [pc, #328]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4a51      	ldr	r2, [pc, #324]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003bf8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bfc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003bfe:	4b4f      	ldr	r3, [pc, #316]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4a4e      	ldr	r2, [pc, #312]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c04:	f043 0310 	orr.w	r3, r3, #16
 8003c08:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003c0a:	4b4c      	ldr	r3, [pc, #304]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4a4b      	ldr	r2, [pc, #300]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c10:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c18:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8003c1a:	4b48      	ldr	r3, [pc, #288]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4a47      	ldr	r2, [pc, #284]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c20:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8003c24:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003c26:	4b45      	ldr	r3, [pc, #276]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4a44      	ldr	r2, [pc, #272]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c2c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c30:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 8003c32:	4b42      	ldr	r3, [pc, #264]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	4a41      	ldr	r2, [pc, #260]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3c:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003c3e:	4b3f      	ldr	r3, [pc, #252]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	4a3e      	ldr	r2, [pc, #248]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c48:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003c4a:	4b3c      	ldr	r3, [pc, #240]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	4a3b      	ldr	r2, [pc, #236]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c54:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8003c56:	4b39      	ldr	r3, [pc, #228]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	4a38      	ldr	r2, [pc, #224]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c60:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003c62:	4b36      	ldr	r3, [pc, #216]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a35      	ldr	r2, [pc, #212]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6c:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003c6e:	e000      	b.n	8003c72 <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 8003c70:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003c72:	4b32      	ldr	r3, [pc, #200]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f8      	beq.n	8003c70 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003c7e:	4b31      	ldr	r3, [pc, #196]	; (8003d44 <RCC_enableMaxFrequencies+0x25c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a30      	ldr	r2, [pc, #192]	; (8003d44 <RCC_enableMaxFrequencies+0x25c>)
 8003c84:	f023 030f 	bic.w	r3, r3, #15
 8003c88:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8003c8a:	4b2e      	ldr	r3, [pc, #184]	; (8003d44 <RCC_enableMaxFrequencies+0x25c>)
 8003c8c:	4a2d      	ldr	r2, [pc, #180]	; (8003d44 <RCC_enableMaxFrequencies+0x25c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6013      	str	r3, [r2, #0]

			break;
 8003c92:	e245      	b.n	8004120 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003c94:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4a28      	ldr	r2, [pc, #160]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003c9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c9e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003ca0:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4a25      	ldr	r2, [pc, #148]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003ca6:	f043 0310 	orr.w	r3, r3, #16
 8003caa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003cac:	4b23      	ldr	r3, [pc, #140]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4a22      	ldr	r2, [pc, #136]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003cb2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 8003cbc:	4b1f      	ldr	r3, [pc, #124]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4a1e      	ldr	r2, [pc, #120]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003cc2:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8003cc6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003cc8:	4b1c      	ldr	r3, [pc, #112]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003cce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003cd2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8003cd4:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cde:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003ce0:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cea:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003cec:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003cf2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003cf6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8003cf8:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	4a0f      	ldr	r2, [pc, #60]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003cfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d02:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003d04:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a0c      	ldr	r2, [pc, #48]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d0e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003d10:	e000      	b.n	8003d14 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 8003d12:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003d14:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <RCC_enableMaxFrequencies+0x254>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f8      	beq.n	8003d12 <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003d20:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <RCC_enableMaxFrequencies+0x25c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a07      	ldr	r2, [pc, #28]	; (8003d44 <RCC_enableMaxFrequencies+0x25c>)
 8003d26:	f023 030f 	bic.w	r3, r3, #15
 8003d2a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <RCC_enableMaxFrequencies+0x25c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <RCC_enableMaxFrequencies+0x25c>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6013      	str	r3, [r2, #0]


			break;
 8003d38:	e1f2      	b.n	8004120 <RCC_enableMaxFrequencies+0x638>
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40007000 	.word	0x40007000
 8003d44:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003d48:	4b79      	ldr	r3, [pc, #484]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	4a78      	ldr	r2, [pc, #480]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003d4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d52:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003d54:	4b76      	ldr	r3, [pc, #472]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4a75      	ldr	r2, [pc, #468]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003d5a:	f043 0310 	orr.w	r3, r3, #16
 8003d5e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003d60:	4b73      	ldr	r3, [pc, #460]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4a72      	ldr	r2, [pc, #456]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003d66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d6e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8003d70:	4b6f      	ldr	r3, [pc, #444]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a6e      	ldr	r2, [pc, #440]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003d76:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8003d7a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003d7c:	4b6c      	ldr	r3, [pc, #432]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4a6b      	ldr	r2, [pc, #428]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003d82:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003d86:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8003d88:	4b69      	ldr	r3, [pc, #420]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003d8a:	4a69      	ldr	r2, [pc, #420]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003d90:	4b67      	ldr	r3, [pc, #412]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4a66      	ldr	r2, [pc, #408]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d9a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003d9c:	4b64      	ldr	r3, [pc, #400]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4a63      	ldr	r2, [pc, #396]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003da2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003da6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8003da8:	4b61      	ldr	r3, [pc, #388]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4a60      	ldr	r2, [pc, #384]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003db2:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003db4:	4b5e      	ldr	r3, [pc, #376]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a5d      	ldr	r2, [pc, #372]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dbe:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003dc0:	e000      	b.n	8003dc4 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 8003dc2:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003dc4:	4b5a      	ldr	r3, [pc, #360]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f8      	beq.n	8003dc2 <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003dd0:	4b58      	ldr	r3, [pc, #352]	; (8003f34 <RCC_enableMaxFrequencies+0x44c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a57      	ldr	r2, [pc, #348]	; (8003f34 <RCC_enableMaxFrequencies+0x44c>)
 8003dd6:	f023 030f 	bic.w	r3, r3, #15
 8003dda:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8003ddc:	4b55      	ldr	r3, [pc, #340]	; (8003f34 <RCC_enableMaxFrequencies+0x44c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a54      	ldr	r2, [pc, #336]	; (8003f34 <RCC_enableMaxFrequencies+0x44c>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6013      	str	r3, [r2, #0]

			break;
 8003de8:	e19a      	b.n	8004120 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003dea:	4b51      	ldr	r3, [pc, #324]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4a50      	ldr	r2, [pc, #320]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003df0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003df4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003df6:	4b4e      	ldr	r3, [pc, #312]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4a4d      	ldr	r2, [pc, #308]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003dfc:	f043 0310 	orr.w	r3, r3, #16
 8003e00:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003e02:	4b4b      	ldr	r3, [pc, #300]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4a4a      	ldr	r2, [pc, #296]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e08:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e10:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8003e12:	4b47      	ldr	r3, [pc, #284]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	4a46      	ldr	r2, [pc, #280]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e18:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8003e1c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003e1e:	4b44      	ldr	r3, [pc, #272]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	4a43      	ldr	r2, [pc, #268]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e24:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003e28:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8003e2a:	4b41      	ldr	r3, [pc, #260]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e2c:	4a40      	ldr	r2, [pc, #256]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003e32:	4b3f      	ldr	r3, [pc, #252]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	4a3e      	ldr	r2, [pc, #248]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e3c:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003e3e:	4b3c      	ldr	r3, [pc, #240]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	4a3b      	ldr	r2, [pc, #236]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e48:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8003e4a:	4b39      	ldr	r3, [pc, #228]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	4a38      	ldr	r2, [pc, #224]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e54:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003e56:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a35      	ldr	r2, [pc, #212]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e60:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003e62:	e000      	b.n	8003e66 <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 8003e64:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003e66:	4b32      	ldr	r3, [pc, #200]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f8      	beq.n	8003e64 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003e72:	4b30      	ldr	r3, [pc, #192]	; (8003f34 <RCC_enableMaxFrequencies+0x44c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a2f      	ldr	r2, [pc, #188]	; (8003f34 <RCC_enableMaxFrequencies+0x44c>)
 8003e78:	f023 030f 	bic.w	r3, r3, #15
 8003e7c:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8003e7e:	4b2d      	ldr	r3, [pc, #180]	; (8003f34 <RCC_enableMaxFrequencies+0x44c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a2c      	ldr	r2, [pc, #176]	; (8003f34 <RCC_enableMaxFrequencies+0x44c>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6013      	str	r3, [r2, #0]

			break;
 8003e8a:	e149      	b.n	8004120 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003e8c:	4b28      	ldr	r3, [pc, #160]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4a27      	ldr	r2, [pc, #156]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e96:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4a24      	ldr	r2, [pc, #144]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003e9e:	f043 0310 	orr.w	r3, r3, #16
 8003ea2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003ea4:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4a21      	ldr	r2, [pc, #132]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003eaa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eb2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 8003eb4:	4b1e      	ldr	r3, [pc, #120]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	4a1d      	ldr	r2, [pc, #116]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003eba:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8003ebe:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	4a1a      	ldr	r2, [pc, #104]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003ec6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003eca:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8003ecc:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003ece:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a15      	ldr	r2, [pc, #84]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ede:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003ee0:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003ee6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003eea:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8003eec:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a0f      	ldr	r2, [pc, #60]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003ef2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ef6:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a0c      	ldr	r2, [pc, #48]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f02:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003f04:	e000      	b.n	8003f08 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 8003f06:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <RCC_enableMaxFrequencies+0x448>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f8      	beq.n	8003f06 <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003f14:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <RCC_enableMaxFrequencies+0x44c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a06      	ldr	r2, [pc, #24]	; (8003f34 <RCC_enableMaxFrequencies+0x44c>)
 8003f1a:	f023 030f 	bic.w	r3, r3, #15
 8003f1e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8003f20:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <RCC_enableMaxFrequencies+0x44c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a03      	ldr	r2, [pc, #12]	; (8003f34 <RCC_enableMaxFrequencies+0x44c>)
 8003f26:	f043 0302 	orr.w	r3, r3, #2
 8003f2a:	6013      	str	r3, [r2, #0]

			break;
 8003f2c:	e0f8      	b.n	8004120 <RCC_enableMaxFrequencies+0x638>
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003f38:	4b83      	ldr	r3, [pc, #524]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4a82      	ldr	r2, [pc, #520]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f42:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003f44:	4b80      	ldr	r3, [pc, #512]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4a7f      	ldr	r2, [pc, #508]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f4a:	f043 0310 	orr.w	r3, r3, #16
 8003f4e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003f50:	4b7d      	ldr	r3, [pc, #500]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4a7c      	ldr	r2, [pc, #496]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f5e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 8003f60:	4b79      	ldr	r3, [pc, #484]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	4a78      	ldr	r2, [pc, #480]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f66:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003f6a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003f6c:	4b76      	ldr	r3, [pc, #472]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	4a75      	ldr	r2, [pc, #468]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f72:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003f76:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8003f78:	4b73      	ldr	r3, [pc, #460]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f7a:	4a73      	ldr	r2, [pc, #460]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003f80:	4b71      	ldr	r3, [pc, #452]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	4a70      	ldr	r2, [pc, #448]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f8a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003f8c:	4b6e      	ldr	r3, [pc, #440]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4a6d      	ldr	r2, [pc, #436]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f96:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8003f98:	4b6b      	ldr	r3, [pc, #428]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4a6a      	ldr	r2, [pc, #424]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003f9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fa2:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003fa4:	4b68      	ldr	r3, [pc, #416]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a67      	ldr	r2, [pc, #412]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fae:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003fb0:	e000      	b.n	8003fb4 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 8003fb2:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003fb4:	4b64      	ldr	r3, [pc, #400]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f8      	beq.n	8003fb2 <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003fc0:	4b62      	ldr	r3, [pc, #392]	; (800414c <RCC_enableMaxFrequencies+0x664>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a61      	ldr	r2, [pc, #388]	; (800414c <RCC_enableMaxFrequencies+0x664>)
 8003fc6:	f023 030f 	bic.w	r3, r3, #15
 8003fca:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8003fcc:	4b5f      	ldr	r3, [pc, #380]	; (800414c <RCC_enableMaxFrequencies+0x664>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a5e      	ldr	r2, [pc, #376]	; (800414c <RCC_enableMaxFrequencies+0x664>)
 8003fd2:	f043 0302 	orr.w	r3, r3, #2
 8003fd6:	6013      	str	r3, [r2, #0]

			break;
 8003fd8:	e0a2      	b.n	8004120 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003fda:	4b5b      	ldr	r3, [pc, #364]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4a5a      	ldr	r2, [pc, #360]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003fe0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fe4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003fe6:	4b58      	ldr	r3, [pc, #352]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4a57      	ldr	r2, [pc, #348]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003fec:	f043 0310 	orr.w	r3, r3, #16
 8003ff0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003ff2:	4b55      	ldr	r3, [pc, #340]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4a54      	ldr	r2, [pc, #336]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8003ff8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004000:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8004002:	4b51      	ldr	r3, [pc, #324]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4a50      	ldr	r2, [pc, #320]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8004008:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 800400c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800400e:	4b4e      	ldr	r3, [pc, #312]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	4a4d      	ldr	r2, [pc, #308]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8004014:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004018:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800401a:	4b4b      	ldr	r3, [pc, #300]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 800401c:	4a4a      	ldr	r2, [pc, #296]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8004022:	4b49      	ldr	r3, [pc, #292]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	4a48      	ldr	r2, [pc, #288]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8004028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800402c:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800402e:	4b46      	ldr	r3, [pc, #280]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	4a45      	ldr	r2, [pc, #276]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8004034:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004038:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800403a:	4b43      	ldr	r3, [pc, #268]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	4a42      	ldr	r2, [pc, #264]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8004040:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004044:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8004046:	4b40      	ldr	r3, [pc, #256]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a3f      	ldr	r2, [pc, #252]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 800404c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004050:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004052:	e000      	b.n	8004056 <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 8004054:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004056:	4b3c      	ldr	r3, [pc, #240]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f8      	beq.n	8004054 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8004062:	4b3a      	ldr	r3, [pc, #232]	; (800414c <RCC_enableMaxFrequencies+0x664>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a39      	ldr	r2, [pc, #228]	; (800414c <RCC_enableMaxFrequencies+0x664>)
 8004068:	f023 030f 	bic.w	r3, r3, #15
 800406c:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800406e:	4b37      	ldr	r3, [pc, #220]	; (800414c <RCC_enableMaxFrequencies+0x664>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a36      	ldr	r2, [pc, #216]	; (800414c <RCC_enableMaxFrequencies+0x664>)
 8004074:	f043 0302 	orr.w	r3, r3, #2
 8004078:	6013      	str	r3, [r2, #0]

			break;
 800407a:	e051      	b.n	8004120 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800407c:	4b32      	ldr	r3, [pc, #200]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4a31      	ldr	r2, [pc, #196]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8004082:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004086:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8004088:	4b2f      	ldr	r3, [pc, #188]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	4a2e      	ldr	r2, [pc, #184]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 800408e:	f043 0308 	orr.w	r3, r3, #8
 8004092:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8004094:	4b2c      	ldr	r3, [pc, #176]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4a2b      	ldr	r2, [pc, #172]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 800409a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800409e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 80040a4:	4b28      	ldr	r3, [pc, #160]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	4a27      	ldr	r2, [pc, #156]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 80040aa:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 80040ae:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80040b0:	4b25      	ldr	r3, [pc, #148]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	4a24      	ldr	r2, [pc, #144]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 80040b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80040ba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80040bc:	4b22      	ldr	r3, [pc, #136]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 80040be:	4a22      	ldr	r2, [pc, #136]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80040c4:	4b20      	ldr	r3, [pc, #128]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4a1f      	ldr	r2, [pc, #124]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 80040ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ce:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80040d0:	4b1d      	ldr	r3, [pc, #116]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a1c      	ldr	r2, [pc, #112]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 80040d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040da:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80040dc:	4b1a      	ldr	r3, [pc, #104]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4a19      	ldr	r2, [pc, #100]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 80040e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040e6:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80040e8:	4b17      	ldr	r3, [pc, #92]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a16      	ldr	r2, [pc, #88]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 80040ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040f2:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80040f4:	e000      	b.n	80040f8 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 80040f6:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80040f8:	4b13      	ldr	r3, [pc, #76]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f8      	beq.n	80040f6 <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <RCC_enableMaxFrequencies+0x664>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a10      	ldr	r2, [pc, #64]	; (800414c <RCC_enableMaxFrequencies+0x664>)
 800410a:	f023 030f 	bic.w	r3, r3, #15
 800410e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8004110:	4b0e      	ldr	r3, [pc, #56]	; (800414c <RCC_enableMaxFrequencies+0x664>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a0d      	ldr	r2, [pc, #52]	; (800414c <RCC_enableMaxFrequencies+0x664>)
 8004116:	f043 0303 	orr.w	r3, r3, #3
 800411a:	6013      	str	r3, [r2, #0]

			break;
 800411c:	e000      	b.n	8004120 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 800411e:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004120:	4b09      	ldr	r3, [pc, #36]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4a08      	ldr	r2, [pc, #32]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8004126:	f043 0302 	orr.w	r3, r3, #2
 800412a:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800412c:	e000      	b.n	8004130 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 800412e:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <RCC_enableMaxFrequencies+0x660>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f8      	beq.n	800412e <RCC_enableMaxFrequencies+0x646>
	}

	SystemCoreClockUpdate();
 800413c:	f000 fcde 	bl	8004afc <SystemCoreClockUpdate>

}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40023800 	.word	0x40023800
 800414c:	40023c00 	.word	0x40023c00

08004150 <__NVIC_EnableIRQ>:
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800415a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415e:	2b00      	cmp	r3, #0
 8004160:	db0b      	blt.n	800417a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	f003 021f 	and.w	r2, r3, #31
 8004168:	4907      	ldr	r1, [pc, #28]	; (8004188 <__NVIC_EnableIRQ+0x38>)
 800416a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2001      	movs	r0, #1
 8004172:	fa00 f202 	lsl.w	r2, r0, r2
 8004176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	e000e100 	.word	0xe000e100

0800418c <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8004194:	b672      	cpsid	i
}
 8004196:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a8f      	ldr	r2, [pc, #572]	; (80043dc <USART_Config+0x250>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d106      	bne.n	80041b0 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80041a2:	4b8f      	ldr	r3, [pc, #572]	; (80043e0 <USART_Config+0x254>)
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	4a8e      	ldr	r2, [pc, #568]	; (80043e0 <USART_Config+0x254>)
 80041a8:	f043 0310 	orr.w	r3, r3, #16
 80041ac:	6453      	str	r3, [r2, #68]	; 0x44
 80041ae:	e018      	b.n	80041e2 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a8b      	ldr	r2, [pc, #556]	; (80043e4 <USART_Config+0x258>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d106      	bne.n	80041c8 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80041ba:	4b89      	ldr	r3, [pc, #548]	; (80043e0 <USART_Config+0x254>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	4a88      	ldr	r2, [pc, #544]	; (80043e0 <USART_Config+0x254>)
 80041c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c4:	6413      	str	r3, [r2, #64]	; 0x40
 80041c6:	e00c      	b.n	80041e2 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a86      	ldr	r2, [pc, #536]	; (80043e8 <USART_Config+0x25c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d106      	bne.n	80041e0 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 80041d2:	4b83      	ldr	r3, [pc, #524]	; (80043e0 <USART_Config+0x254>)
 80041d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d6:	4a82      	ldr	r2, [pc, #520]	; (80043e0 <USART_Config+0x254>)
 80041d8:	f043 0320 	orr.w	r3, r3, #32
 80041dc:	6453      	str	r3, [r2, #68]	; 0x44
 80041de:	e000      	b.n	80041e2 <USART_Config+0x56>
	}
	else{
		__NOP();
 80041e0:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2200      	movs	r2, #0
 80041e8:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	7a5b      	ldrb	r3, [r3, #9]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d025      	beq.n	8004246 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	7a5b      	ldrb	r3, [r3, #9]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d110      	bne.n	8004224 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004210:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004220:	60da      	str	r2, [r3, #12]
 8004222:	e018      	b.n	8004256 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004232:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004242:	60da      	str	r2, [r3, #12]
 8004244:	e007      	b.n	8004256 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004254:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	7a1b      	ldrb	r3, [r3, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d108      	bne.n	8004270 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800426c:	60da      	str	r2, [r3, #12]
 800426e:	e007      	b.n	8004280 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800427e:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	7a9b      	ldrb	r3, [r3, #10]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d82f      	bhi.n	80042e8 <USART_Config+0x15c>
 8004288:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <USART_Config+0x104>)
 800428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428e:	bf00      	nop
 8004290:	080042a1 	.word	0x080042a1
 8004294:	080042b3 	.word	0x080042b3
 8004298:	080042c5 	.word	0x080042c5
 800429c:	080042d7 	.word	0x080042d7
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80042ae:	611a      	str	r2, [r3, #16]
			break;
 80042b0:	e023      	b.n	80042fa <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042c0:	611a      	str	r2, [r3, #16]
			break;
 80042c2:	e01a      	b.n	80042fa <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042d2:	611a      	str	r2, [r3, #16]
			break;
 80042d4:	e011      	b.n	80042fa <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80042e4:	611a      	str	r2, [r3, #16]
			break;
 80042e6:	e008      	b.n	80042fa <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80042f6:	611a      	str	r2, [r3, #16]
			break;
 80042f8:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681c      	ldr	r4, [r3, #0]
 8004302:	4611      	mov	r1, r2
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f8cb 	bl	80044a0 <brrCalculus>
 800430a:	4603      	mov	r3, r0
 800430c:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	799b      	ldrb	r3, [r3, #6]
 8004312:	2b03      	cmp	r3, #3
 8004314:	d82e      	bhi.n	8004374 <USART_Config+0x1e8>
 8004316:	a201      	add	r2, pc, #4	; (adr r2, 800431c <USART_Config+0x190>)
 8004318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431c:	0800432d 	.word	0x0800432d
 8004320:	0800433f 	.word	0x0800433f
 8004324:	08004351 	.word	0x08004351
 8004328:	08004363 	.word	0x08004363
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0208 	orr.w	r2, r2, #8
 800433a:	60da      	str	r2, [r3, #12]
			break;
 800433c:	e023      	b.n	8004386 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0204 	orr.w	r2, r2, #4
 800434c:	60da      	str	r2, [r3, #12]
			break;
 800434e:	e01a      	b.n	8004386 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 020c 	orr.w	r2, r2, #12
 800435e:	60da      	str	r2, [r3, #12]
			break;
 8004360:	e011      	b.n	8004386 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 020c 	bic.w	r2, r2, #12
 8004370:	60da      	str	r2, [r3, #12]
			break;
 8004372:	e008      	b.n	8004386 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 020c 	bic.w	r2, r2, #12
 8004382:	60da      	str	r2, [r3, #12]
			break;
 8004384:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	799b      	ldrb	r3, [r3, #6]
 800438a:	2b03      	cmp	r3, #3
 800438c:	d008      	beq.n	80043a0 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800439c:	60da      	str	r2, [r3, #12]
 800439e:	e007      	b.n	80043b0 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ae:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	795b      	ldrb	r3, [r3, #5]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d12d      	bne.n	8004414 <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0220 	orr.w	r2, r2, #32
 80043c6:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a03      	ldr	r2, [pc, #12]	; (80043dc <USART_Config+0x250>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d10c      	bne.n	80043ec <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 80043d2:	2025      	movs	r0, #37	; 0x25
 80043d4:	f7ff febc 	bl	8004150 <__NVIC_EnableIRQ>
 80043d8:	e024      	b.n	8004424 <USART_Config+0x298>
 80043da:	bf00      	nop
 80043dc:	40011000 	.word	0x40011000
 80043e0:	40023800 	.word	0x40023800
 80043e4:	40004400 	.word	0x40004400
 80043e8:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a28      	ldr	r2, [pc, #160]	; (8004494 <USART_Config+0x308>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d103      	bne.n	80043fe <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 80043f6:	2026      	movs	r0, #38	; 0x26
 80043f8:	f7ff feaa 	bl	8004150 <__NVIC_EnableIRQ>
 80043fc:	e012      	b.n	8004424 <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a25      	ldr	r2, [pc, #148]	; (8004498 <USART_Config+0x30c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d103      	bne.n	8004410 <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8004408:	2047      	movs	r0, #71	; 0x47
 800440a:	f7ff fea1 	bl	8004150 <__NVIC_EnableIRQ>
 800440e:	e009      	b.n	8004424 <USART_Config+0x298>
		}
		else{
				__NOP();
 8004410:	bf00      	nop
 8004412:	e007      	b.n	8004424 <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0220 	bic.w	r2, r2, #32
 8004422:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	791b      	ldrb	r3, [r3, #4]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d124      	bne.n	8004476 <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800443a:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a16      	ldr	r2, [pc, #88]	; (800449c <USART_Config+0x310>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d103      	bne.n	800444e <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8004446:	2025      	movs	r0, #37	; 0x25
 8004448:	f7ff fe82 	bl	8004150 <__NVIC_EnableIRQ>
 800444c:	e01b      	b.n	8004486 <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a10      	ldr	r2, [pc, #64]	; (8004494 <USART_Config+0x308>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d103      	bne.n	8004460 <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8004458:	2026      	movs	r0, #38	; 0x26
 800445a:	f7ff fe79 	bl	8004150 <__NVIC_EnableIRQ>
 800445e:	e012      	b.n	8004486 <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <USART_Config+0x30c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d103      	bne.n	8004472 <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800446a:	2047      	movs	r0, #71	; 0x47
 800446c:	f7ff fe70 	bl	8004150 <__NVIC_EnableIRQ>
 8004470:	e009      	b.n	8004486 <USART_Config+0x2fa>
		}
		else{
				__NOP();
 8004472:	bf00      	nop
 8004474:	e007      	b.n	8004486 <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004484:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004486:	b662      	cpsie	i
}
 8004488:	bf00      	nop
	}

	__enable_irq();
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bd90      	pop	{r4, r7, pc}
 8004492:	bf00      	nop
 8004494:	40004400 	.word	0x40004400
 8004498:	40011400 	.word	0x40011400
 800449c:	40011000 	.word	0x40011000

080044a0 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 80044a0:	b5b0      	push	{r4, r5, r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	79db      	ldrb	r3, [r3, #7]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	f200 8217 	bhi.w	80048e2 <brrCalculus+0x442>
 80044b4:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <brrCalculus+0x1c>)
 80044b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ba:	bf00      	nop
 80044bc:	080044cd 	.word	0x080044cd
 80044c0:	080045c7 	.word	0x080045c7
 80044c4:	080046e1 	.word	0x080046e1
 80044c8:	080047e9 	.word	0x080047e9

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 80044cc:	4980      	ldr	r1, [pc, #512]	; (80046d0 <brrCalculus+0x230>)
 80044ce:	a37c      	add	r3, pc, #496	; (adr r3, 80046c0 <brrCalculus+0x220>)
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e2:	ee17 0a90 	vmov	r0, s15
 80044e6:	f7fc f837 	bl	8000558 <__aeabi_f2d>
 80044ea:	4b79      	ldr	r3, [pc, #484]	; (80046d0 <brrCalculus+0x230>)
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	f7fc f88a 	bl	8000608 <__aeabi_dmul>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4975      	ldr	r1, [pc, #468]	; (80046d0 <brrCalculus+0x230>)
 80044fa:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80044fe:	4b74      	ldr	r3, [pc, #464]	; (80046d0 <brrCalculus+0x230>)
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	4610      	mov	r0, r2
 8004506:	4619      	mov	r1, r3
 8004508:	f7fc fb2e 	bl	8000b68 <__aeabi_d2iz>
 800450c:	4603      	mov	r3, r0
 800450e:	b29a      	uxth	r2, r3
 8004510:	4b70      	ldr	r3, [pc, #448]	; (80046d4 <brrCalculus+0x234>)
 8004512:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004514:	4b6e      	ldr	r3, [pc, #440]	; (80046d0 <brrCalculus+0x230>)
 8004516:	e9d3 4500 	ldrd	r4, r5, [r3]
 800451a:	4b6d      	ldr	r3, [pc, #436]	; (80046d0 <brrCalculus+0x230>)
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	f7fc fb20 	bl	8000b68 <__aeabi_d2iz>
 8004528:	4603      	mov	r3, r0
 800452a:	4618      	mov	r0, r3
 800452c:	f7fc f802 	bl	8000534 <__aeabi_i2d>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4620      	mov	r0, r4
 8004536:	4629      	mov	r1, r5
 8004538:	f7fb feae 	bl	8000298 <__aeabi_dsub>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	f7fc fb58 	bl	8000bf8 <__aeabi_d2f>
 8004548:	4603      	mov	r3, r0
 800454a:	4a63      	ldr	r2, [pc, #396]	; (80046d8 <brrCalculus+0x238>)
 800454c:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800454e:	4b62      	ldr	r3, [pc, #392]	; (80046d8 <brrCalculus+0x238>)
 8004550:	edd3 7a00 	vldr	s15, [r3]
 8004554:	2004      	movs	r0, #4
 8004556:	eeb0 0a67 	vmov.f32	s0, s15
 800455a:	f000 fa6d 	bl	8004a38 <roundToNDecimals>
 800455e:	eef0 7a40 	vmov.f32	s15, s0
 8004562:	4b5d      	ldr	r3, [pc, #372]	; (80046d8 <brrCalculus+0x238>)
 8004564:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8004568:	4b5b      	ldr	r3, [pc, #364]	; (80046d8 <brrCalculus+0x238>)
 800456a:	edd3 7a00 	vldr	s15, [r3]
 800456e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004576:	4b58      	ldr	r3, [pc, #352]	; (80046d8 <brrCalculus+0x238>)
 8004578:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800457c:	4b56      	ldr	r3, [pc, #344]	; (80046d8 <brrCalculus+0x238>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7fb ffe9 	bl	8000558 <__aeabi_f2d>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	ec43 2b10 	vmov	d0, r2, r3
 800458e:	f003 facb 	bl	8007b28 <round>
 8004592:	ec53 2b10 	vmov	r2, r3, d0
 8004596:	4610      	mov	r0, r2
 8004598:	4619      	mov	r1, r3
 800459a:	f7fc fb2d 	bl	8000bf8 <__aeabi_d2f>
 800459e:	4603      	mov	r3, r0
 80045a0:	4a4d      	ldr	r2, [pc, #308]	; (80046d8 <brrCalculus+0x238>)
 80045a2:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80045a4:	4b4b      	ldr	r3, [pc, #300]	; (80046d4 <brrCalculus+0x234>)
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	4b4a      	ldr	r3, [pc, #296]	; (80046d8 <brrCalculus+0x238>)
 80045ae:	edd3 7a00 	vldr	s15, [r3]
 80045b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b6:	ee17 3a90 	vmov	r3, s15
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	4313      	orrs	r3, r2
 80045be:	b29a      	uxth	r2, r3
 80045c0:	4b46      	ldr	r3, [pc, #280]	; (80046dc <brrCalculus+0x23c>)
 80045c2:	801a      	strh	r2, [r3, #0]


		break;
 80045c4:	e18f      	b.n	80048e6 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 80045c6:	4942      	ldr	r1, [pc, #264]	; (80046d0 <brrCalculus+0x230>)
 80045c8:	a33f      	add	r3, pc, #252	; (adr r3, 80046c8 <brrCalculus+0x228>)
 80045ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ce:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045dc:	ee17 0a90 	vmov	r0, s15
 80045e0:	f7fb ffba 	bl	8000558 <__aeabi_f2d>
 80045e4:	4b3a      	ldr	r3, [pc, #232]	; (80046d0 <brrCalculus+0x230>)
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	f7fc f80d 	bl	8000608 <__aeabi_dmul>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4937      	ldr	r1, [pc, #220]	; (80046d0 <brrCalculus+0x230>)
 80045f4:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80045f8:	4b35      	ldr	r3, [pc, #212]	; (80046d0 <brrCalculus+0x230>)
 80045fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fe:	4610      	mov	r0, r2
 8004600:	4619      	mov	r1, r3
 8004602:	f7fc fab1 	bl	8000b68 <__aeabi_d2iz>
 8004606:	4603      	mov	r3, r0
 8004608:	b29a      	uxth	r2, r3
 800460a:	4b32      	ldr	r3, [pc, #200]	; (80046d4 <brrCalculus+0x234>)
 800460c:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800460e:	4b30      	ldr	r3, [pc, #192]	; (80046d0 <brrCalculus+0x230>)
 8004610:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004614:	4b2e      	ldr	r3, [pc, #184]	; (80046d0 <brrCalculus+0x230>)
 8004616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461a:	4610      	mov	r0, r2
 800461c:	4619      	mov	r1, r3
 800461e:	f7fc faa3 	bl	8000b68 <__aeabi_d2iz>
 8004622:	4603      	mov	r3, r0
 8004624:	4618      	mov	r0, r3
 8004626:	f7fb ff85 	bl	8000534 <__aeabi_i2d>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4620      	mov	r0, r4
 8004630:	4629      	mov	r1, r5
 8004632:	f7fb fe31 	bl	8000298 <__aeabi_dsub>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4610      	mov	r0, r2
 800463c:	4619      	mov	r1, r3
 800463e:	f7fc fadb 	bl	8000bf8 <__aeabi_d2f>
 8004642:	4603      	mov	r3, r0
 8004644:	4a24      	ldr	r2, [pc, #144]	; (80046d8 <brrCalculus+0x238>)
 8004646:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004648:	4b23      	ldr	r3, [pc, #140]	; (80046d8 <brrCalculus+0x238>)
 800464a:	edd3 7a00 	vldr	s15, [r3]
 800464e:	2004      	movs	r0, #4
 8004650:	eeb0 0a67 	vmov.f32	s0, s15
 8004654:	f000 f9f0 	bl	8004a38 <roundToNDecimals>
 8004658:	eef0 7a40 	vmov.f32	s15, s0
 800465c:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <brrCalculus+0x238>)
 800465e:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8004662:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <brrCalculus+0x238>)
 8004664:	edd3 7a00 	vldr	s15, [r3]
 8004668:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800466c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004670:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <brrCalculus+0x238>)
 8004672:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8004676:	4b18      	ldr	r3, [pc, #96]	; (80046d8 <brrCalculus+0x238>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f7fb ff6c 	bl	8000558 <__aeabi_f2d>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	ec43 2b10 	vmov	d0, r2, r3
 8004688:	f003 fa4e 	bl	8007b28 <round>
 800468c:	ec53 2b10 	vmov	r2, r3, d0
 8004690:	4610      	mov	r0, r2
 8004692:	4619      	mov	r1, r3
 8004694:	f7fc fab0 	bl	8000bf8 <__aeabi_d2f>
 8004698:	4603      	mov	r3, r0
 800469a:	4a0f      	ldr	r2, [pc, #60]	; (80046d8 <brrCalculus+0x238>)
 800469c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800469e:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <brrCalculus+0x234>)
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <brrCalculus+0x238>)
 80046a8:	edd3 7a00 	vldr	s15, [r3]
 80046ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b0:	ee17 3a90 	vmov	r3, s15
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	4313      	orrs	r3, r2
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	4b08      	ldr	r3, [pc, #32]	; (80046dc <brrCalculus+0x23c>)
 80046bc:	801a      	strh	r2, [r3, #0]


		break;
 80046be:	e112      	b.n	80048e6 <brrCalculus+0x446>
 80046c0:	b4e81b4f 	.word	0xb4e81b4f
 80046c4:	3edb4e81 	.word	0x3edb4e81
 80046c8:	b4e81b4f 	.word	0xb4e81b4f
 80046cc:	3ecb4e81 	.word	0x3ecb4e81
 80046d0:	20000410 	.word	0x20000410
 80046d4:	20000408 	.word	0x20000408
 80046d8:	2000040c 	.word	0x2000040c
 80046dc:	20000406 	.word	0x20000406
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 80046e0:	4989      	ldr	r1, [pc, #548]	; (8004908 <brrCalculus+0x468>)
 80046e2:	a385      	add	r3, pc, #532	; (adr r3, 80048f8 <brrCalculus+0x458>)
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f6:	ee17 0a90 	vmov	r0, s15
 80046fa:	f7fb ff2d 	bl	8000558 <__aeabi_f2d>
 80046fe:	4b82      	ldr	r3, [pc, #520]	; (8004908 <brrCalculus+0x468>)
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	f7fb ff80 	bl	8000608 <__aeabi_dmul>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	497e      	ldr	r1, [pc, #504]	; (8004908 <brrCalculus+0x468>)
 800470e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8004712:	4b7d      	ldr	r3, [pc, #500]	; (8004908 <brrCalculus+0x468>)
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	4610      	mov	r0, r2
 800471a:	4619      	mov	r1, r3
 800471c:	f7fc fa24 	bl	8000b68 <__aeabi_d2iz>
 8004720:	4603      	mov	r3, r0
 8004722:	b29a      	uxth	r2, r3
 8004724:	4b79      	ldr	r3, [pc, #484]	; (800490c <brrCalculus+0x46c>)
 8004726:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004728:	4b77      	ldr	r3, [pc, #476]	; (8004908 <brrCalculus+0x468>)
 800472a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800472e:	4b76      	ldr	r3, [pc, #472]	; (8004908 <brrCalculus+0x468>)
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	4610      	mov	r0, r2
 8004736:	4619      	mov	r1, r3
 8004738:	f7fc fa16 	bl	8000b68 <__aeabi_d2iz>
 800473c:	4603      	mov	r3, r0
 800473e:	4618      	mov	r0, r3
 8004740:	f7fb fef8 	bl	8000534 <__aeabi_i2d>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4620      	mov	r0, r4
 800474a:	4629      	mov	r1, r5
 800474c:	f7fb fda4 	bl	8000298 <__aeabi_dsub>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4610      	mov	r0, r2
 8004756:	4619      	mov	r1, r3
 8004758:	f7fc fa4e 	bl	8000bf8 <__aeabi_d2f>
 800475c:	4603      	mov	r3, r0
 800475e:	4a6c      	ldr	r2, [pc, #432]	; (8004910 <brrCalculus+0x470>)
 8004760:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004762:	4b6b      	ldr	r3, [pc, #428]	; (8004910 <brrCalculus+0x470>)
 8004764:	edd3 7a00 	vldr	s15, [r3]
 8004768:	2004      	movs	r0, #4
 800476a:	eeb0 0a67 	vmov.f32	s0, s15
 800476e:	f000 f963 	bl	8004a38 <roundToNDecimals>
 8004772:	eef0 7a40 	vmov.f32	s15, s0
 8004776:	4b66      	ldr	r3, [pc, #408]	; (8004910 <brrCalculus+0x470>)
 8004778:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800477c:	4b64      	ldr	r3, [pc, #400]	; (8004910 <brrCalculus+0x470>)
 800477e:	edd3 7a00 	vldr	s15, [r3]
 8004782:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004786:	ee67 7a87 	vmul.f32	s15, s15, s14
 800478a:	4b61      	ldr	r3, [pc, #388]	; (8004910 <brrCalculus+0x470>)
 800478c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8004790:	4b5f      	ldr	r3, [pc, #380]	; (8004910 <brrCalculus+0x470>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f7fb fedf 	bl	8000558 <__aeabi_f2d>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	ec43 2b10 	vmov	d0, r2, r3
 80047a2:	f003 f9c1 	bl	8007b28 <round>
 80047a6:	ec51 0b10 	vmov	r0, r1, d0
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	4b59      	ldr	r3, [pc, #356]	; (8004914 <brrCalculus+0x474>)
 80047b0:	f7fb fd74 	bl	800029c <__adddf3>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	f7fc fa1c 	bl	8000bf8 <__aeabi_d2f>
 80047c0:	4603      	mov	r3, r0
 80047c2:	4a53      	ldr	r2, [pc, #332]	; (8004910 <brrCalculus+0x470>)
 80047c4:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80047c6:	4b51      	ldr	r3, [pc, #324]	; (800490c <brrCalculus+0x46c>)
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	4b50      	ldr	r3, [pc, #320]	; (8004910 <brrCalculus+0x470>)
 80047d0:	edd3 7a00 	vldr	s15, [r3]
 80047d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d8:	ee17 3a90 	vmov	r3, s15
 80047dc:	b29b      	uxth	r3, r3
 80047de:	4313      	orrs	r3, r2
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	4b4d      	ldr	r3, [pc, #308]	; (8004918 <brrCalculus+0x478>)
 80047e4:	801a      	strh	r2, [r3, #0]


		break;
 80047e6:	e07e      	b.n	80048e6 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 80047e8:	4947      	ldr	r1, [pc, #284]	; (8004908 <brrCalculus+0x468>)
 80047ea:	a345      	add	r3, pc, #276	; (adr r3, 8004900 <brrCalculus+0x460>)
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fe:	ee17 0a90 	vmov	r0, s15
 8004802:	f7fb fea9 	bl	8000558 <__aeabi_f2d>
 8004806:	4b40      	ldr	r3, [pc, #256]	; (8004908 <brrCalculus+0x468>)
 8004808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480c:	f7fb fefc 	bl	8000608 <__aeabi_dmul>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	493c      	ldr	r1, [pc, #240]	; (8004908 <brrCalculus+0x468>)
 8004816:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800481a:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <brrCalculus+0x468>)
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	4610      	mov	r0, r2
 8004822:	4619      	mov	r1, r3
 8004824:	f7fc f9a0 	bl	8000b68 <__aeabi_d2iz>
 8004828:	4603      	mov	r3, r0
 800482a:	b29a      	uxth	r2, r3
 800482c:	4b37      	ldr	r3, [pc, #220]	; (800490c <brrCalculus+0x46c>)
 800482e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004830:	4b35      	ldr	r3, [pc, #212]	; (8004908 <brrCalculus+0x468>)
 8004832:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004836:	4b34      	ldr	r3, [pc, #208]	; (8004908 <brrCalculus+0x468>)
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	4610      	mov	r0, r2
 800483e:	4619      	mov	r1, r3
 8004840:	f7fc f992 	bl	8000b68 <__aeabi_d2iz>
 8004844:	4603      	mov	r3, r0
 8004846:	4618      	mov	r0, r3
 8004848:	f7fb fe74 	bl	8000534 <__aeabi_i2d>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4620      	mov	r0, r4
 8004852:	4629      	mov	r1, r5
 8004854:	f7fb fd20 	bl	8000298 <__aeabi_dsub>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4610      	mov	r0, r2
 800485e:	4619      	mov	r1, r3
 8004860:	f7fc f9ca 	bl	8000bf8 <__aeabi_d2f>
 8004864:	4603      	mov	r3, r0
 8004866:	4a2a      	ldr	r2, [pc, #168]	; (8004910 <brrCalculus+0x470>)
 8004868:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800486a:	4b29      	ldr	r3, [pc, #164]	; (8004910 <brrCalculus+0x470>)
 800486c:	edd3 7a00 	vldr	s15, [r3]
 8004870:	2004      	movs	r0, #4
 8004872:	eeb0 0a67 	vmov.f32	s0, s15
 8004876:	f000 f8df 	bl	8004a38 <roundToNDecimals>
 800487a:	eef0 7a40 	vmov.f32	s15, s0
 800487e:	4b24      	ldr	r3, [pc, #144]	; (8004910 <brrCalculus+0x470>)
 8004880:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8004884:	4b22      	ldr	r3, [pc, #136]	; (8004910 <brrCalculus+0x470>)
 8004886:	edd3 7a00 	vldr	s15, [r3]
 800488a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800488e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004892:	4b1f      	ldr	r3, [pc, #124]	; (8004910 <brrCalculus+0x470>)
 8004894:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8004898:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <brrCalculus+0x470>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f7fb fe5b 	bl	8000558 <__aeabi_f2d>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	ec43 2b10 	vmov	d0, r2, r3
 80048aa:	f003 f93d 	bl	8007b28 <round>
 80048ae:	ec53 2b10 	vmov	r2, r3, d0
 80048b2:	4610      	mov	r0, r2
 80048b4:	4619      	mov	r1, r3
 80048b6:	f7fc f99f 	bl	8000bf8 <__aeabi_d2f>
 80048ba:	4603      	mov	r3, r0
 80048bc:	4a14      	ldr	r2, [pc, #80]	; (8004910 <brrCalculus+0x470>)
 80048be:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80048c0:	4b12      	ldr	r3, [pc, #72]	; (800490c <brrCalculus+0x46c>)
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	4b11      	ldr	r3, [pc, #68]	; (8004910 <brrCalculus+0x470>)
 80048ca:	edd3 7a00 	vldr	s15, [r3]
 80048ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048d2:	ee17 3a90 	vmov	r3, s15
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	4313      	orrs	r3, r2
 80048da:	b29a      	uxth	r2, r3
 80048dc:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <brrCalculus+0x478>)
 80048de:	801a      	strh	r2, [r3, #0]


		break;
 80048e0:	e001      	b.n	80048e6 <brrCalculus+0x446>
	}
	default:{

		__NOP();
 80048e2:	bf00      	nop
		break;
 80048e4:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 80048e6:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <brrCalculus+0x478>)
 80048e8:	881b      	ldrh	r3, [r3, #0]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bdb0      	pop	{r4, r5, r7, pc}
 80048f2:	bf00      	nop
 80048f4:	f3af 8000 	nop.w
 80048f8:	789abcdf 	.word	0x789abcdf
 80048fc:	3ec23456 	.word	0x3ec23456
 8004900:	789abcdf 	.word	0x789abcdf
 8004904:	3ea23456 	.word	0x3ea23456
 8004908:	20000410 	.word	0x20000410
 800490c:	20000408 	.word	0x20000408
 8004910:	2000040c 	.word	0x2000040c
 8004914:	3ff00000 	.word	0x3ff00000
 8004918:	20000406 	.word	0x20000406

0800491c <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8004926:	e000      	b.n	800492a <writeChar+0xe>
		__NOP();
 8004928:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f7      	beq.n	8004928 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	605a      	str	r2, [r3, #4]

}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 8004956:	e008      	b.n	800496a <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff ffdc 	bl	800491c <writeChar>
		msgToSend ++ ;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	3301      	adds	r3, #1
 8004968:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f2      	bne.n	8004958 <writeMsg+0xc>
	}
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
	__NOP();
 8004980:	bf00      	nop
}
 8004982:	bf00      	nop
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
	__NOP();
 8004990:	bf00      	nop
}
 8004992:	bf00      	nop
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
	return auxRxData;
 80049a0:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <getRxData+0x14>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	20000418 	.word	0x20000418

080049b4 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 80049b8:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <USART2_IRQHandler+0x24>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d006      	beq.n	80049d2 <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 80049c4:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <USART2_IRQHandler+0x24>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	4b04      	ldr	r3, [pc, #16]	; (80049dc <USART2_IRQHandler+0x28>)
 80049cc:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 80049ce:	f7fc fc17 	bl	8001200 <usart2Rx_Callback>
	}

}
 80049d2:	bf00      	nop
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40004400 	.word	0x40004400
 80049dc:	20000418 	.word	0x20000418

080049e0 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 80049e4:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <USART1_IRQHandler+0x24>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d006      	beq.n	80049fe <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 80049f0:	4b04      	ldr	r3, [pc, #16]	; (8004a04 <USART1_IRQHandler+0x24>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <USART1_IRQHandler+0x28>)
 80049f8:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 80049fa:	f7ff ffbf 	bl	800497c <usart1Rx_Callback>
	}
}
 80049fe:	bf00      	nop
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40011000 	.word	0x40011000
 8004a08:	20000418 	.word	0x20000418

08004a0c <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8004a10:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <USART6_IRQHandler+0x24>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d006      	beq.n	8004a2a <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8004a1c:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <USART6_IRQHandler+0x24>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <USART6_IRQHandler+0x28>)
 8004a24:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8004a26:	f7ff ffb1 	bl	800498c <usart6Rx_Callback>
	}

}
 8004a2a:	bf00      	nop
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40011400 	.word	0x40011400
 8004a34:	20000418 	.word	0x20000418

08004a38 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004a42:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 8004a44:	6838      	ldr	r0, [r7, #0]
 8004a46:	f7fb fd75 	bl	8000534 <__aeabi_i2d>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	ec43 2b11 	vmov	d1, r2, r3
 8004a52:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8004ad0 <roundToNDecimals+0x98>
 8004a56:	f003 f8ad 	bl	8007bb4 <pow>
 8004a5a:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fb fd7a 	bl	8000558 <__aeabi_f2d>
 8004a64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a68:	f7fb fdce 	bl	8000608 <__aeabi_dmul>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	f7fc f8c0 	bl	8000bf8 <__aeabi_d2f>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	607b      	str	r3, [r7, #4]

    number = round(number);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7fb fd6b 	bl	8000558 <__aeabi_f2d>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	ec43 2b10 	vmov	d0, r2, r3
 8004a8a:	f003 f84d 	bl	8007b28 <round>
 8004a8e:	ec53 2b10 	vmov	r2, r3, d0
 8004a92:	4610      	mov	r0, r2
 8004a94:	4619      	mov	r1, r3
 8004a96:	f7fc f8af 	bl	8000bf8 <__aeabi_d2f>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	607b      	str	r3, [r7, #4]

    number /= factor;
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fb fd5a 	bl	8000558 <__aeabi_f2d>
 8004aa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aa8:	f7fb fed8 	bl	800085c <__aeabi_ddiv>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	f7fc f8a0 	bl	8000bf8 <__aeabi_d2f>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	607b      	str	r3, [r7, #4]

    return number;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	ee07 3a90 	vmov	s15, r3
}
 8004ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	f3af 8000 	nop.w
 8004ad0:	00000000 	.word	0x00000000
 8004ad4:	40240000 	.word	0x40240000

08004ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <SystemInit+0x20>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae2:	4a05      	ldr	r2, [pc, #20]	; (8004af8 <SystemInit+0x20>)
 8004ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004aec:	bf00      	nop
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	2302      	movs	r3, #2
 8004b14:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004b16:	4b34      	ldr	r3, [pc, #208]	; (8004be8 <SystemCoreClockUpdate+0xec>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d011      	beq.n	8004b4a <SystemCoreClockUpdate+0x4e>
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d844      	bhi.n	8004bb6 <SystemCoreClockUpdate+0xba>
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <SystemCoreClockUpdate+0x3e>
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d004      	beq.n	8004b42 <SystemCoreClockUpdate+0x46>
 8004b38:	e03d      	b.n	8004bb6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004b3a:	4b2c      	ldr	r3, [pc, #176]	; (8004bec <SystemCoreClockUpdate+0xf0>)
 8004b3c:	4a2c      	ldr	r2, [pc, #176]	; (8004bf0 <SystemCoreClockUpdate+0xf4>)
 8004b3e:	601a      	str	r2, [r3, #0]
      break;
 8004b40:	e03d      	b.n	8004bbe <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004b42:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <SystemCoreClockUpdate+0xf0>)
 8004b44:	4a2b      	ldr	r2, [pc, #172]	; (8004bf4 <SystemCoreClockUpdate+0xf8>)
 8004b46:	601a      	str	r2, [r3, #0]
      break;
 8004b48:	e039      	b.n	8004bbe <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004b4a:	4b27      	ldr	r3, [pc, #156]	; (8004be8 <SystemCoreClockUpdate+0xec>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	0d9b      	lsrs	r3, r3, #22
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b56:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <SystemCoreClockUpdate+0xec>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b5e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00c      	beq.n	8004b80 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004b66:	4a23      	ldr	r2, [pc, #140]	; (8004bf4 <SystemCoreClockUpdate+0xf8>)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	4a1e      	ldr	r2, [pc, #120]	; (8004be8 <SystemCoreClockUpdate+0xec>)
 8004b70:	6852      	ldr	r2, [r2, #4]
 8004b72:	0992      	lsrs	r2, r2, #6
 8004b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b78:	fb02 f303 	mul.w	r3, r2, r3
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	e00b      	b.n	8004b98 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004b80:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <SystemCoreClockUpdate+0xf4>)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b88:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <SystemCoreClockUpdate+0xec>)
 8004b8a:	6852      	ldr	r2, [r2, #4]
 8004b8c:	0992      	lsrs	r2, r2, #6
 8004b8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004b98:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <SystemCoreClockUpdate+0xec>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	0c1b      	lsrs	r3, r3, #16
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	4a0e      	ldr	r2, [pc, #56]	; (8004bec <SystemCoreClockUpdate+0xf0>)
 8004bb2:	6013      	str	r3, [r2, #0]
      break;
 8004bb4:	e003      	b.n	8004bbe <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <SystemCoreClockUpdate+0xf0>)
 8004bb8:	4a0d      	ldr	r2, [pc, #52]	; (8004bf0 <SystemCoreClockUpdate+0xf4>)
 8004bba:	601a      	str	r2, [r3, #0]
      break;
 8004bbc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004bbe:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <SystemCoreClockUpdate+0xec>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	091b      	lsrs	r3, r3, #4
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	4a0b      	ldr	r2, [pc, #44]	; (8004bf8 <SystemCoreClockUpdate+0xfc>)
 8004bca:	5cd3      	ldrb	r3, [r2, r3]
 8004bcc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <SystemCoreClockUpdate+0xf0>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd8:	4a04      	ldr	r2, [pc, #16]	; (8004bec <SystemCoreClockUpdate+0xf0>)
 8004bda:	6013      	str	r3, [r2, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40023800 	.word	0x40023800
 8004bec:	20000004 	.word	0x20000004
 8004bf0:	00f42400 	.word	0x00f42400
 8004bf4:	017d7840 	.word	0x017d7840
 8004bf8:	08008a90 	.word	0x08008a90

08004bfc <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a89      	ldr	r2, [pc, #548]	; (8004e30 <i2c_config+0x234>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d112      	bne.n	8004c34 <i2c_config+0x38>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 8004c0e:	4b89      	ldr	r3, [pc, #548]	; (8004e34 <i2c_config+0x238>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	4a88      	ldr	r2, [pc, #544]	; (8004e34 <i2c_config+0x238>)
 8004c14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c18:	6413      	str	r3, [r2, #64]	; 0x40
		RCC ->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 8004c1a:	4b86      	ldr	r3, [pc, #536]	; (8004e34 <i2c_config+0x238>)
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	4a85      	ldr	r2, [pc, #532]	; (8004e34 <i2c_config+0x238>)
 8004c20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c24:	6213      	str	r3, [r2, #32]
		RCC ->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 8004c26:	4b83      	ldr	r3, [pc, #524]	; (8004e34 <i2c_config+0x238>)
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	4a82      	ldr	r2, [pc, #520]	; (8004e34 <i2c_config+0x238>)
 8004c2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c30:	6213      	str	r3, [r2, #32]
 8004c32:	e016      	b.n	8004c62 <i2c_config+0x66>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a7f      	ldr	r2, [pc, #508]	; (8004e38 <i2c_config+0x23c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d106      	bne.n	8004c4c <i2c_config+0x50>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 8004c3e:	4b7d      	ldr	r3, [pc, #500]	; (8004e34 <i2c_config+0x238>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	4a7c      	ldr	r2, [pc, #496]	; (8004e34 <i2c_config+0x238>)
 8004c44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c48:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4a:	e00a      	b.n	8004c62 <i2c_config+0x66>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a7a      	ldr	r2, [pc, #488]	; (8004e3c <i2c_config+0x240>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d105      	bne.n	8004c62 <i2c_config+0x66>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 8004c56:	4b77      	ldr	r3, [pc, #476]	; (8004e34 <i2c_config+0x238>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	4a76      	ldr	r2, [pc, #472]	; (8004e34 <i2c_config+0x238>)
 8004c5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c60:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8004c72:	e000      	b.n	8004c76 <i2c_config+0x7a>
		__NOP();
 8004c74:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f7      	bne.n	8004c74 <i2c_config+0x78>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c92:	601a      	str	r2, [r3, #0]

	//Esperamos un rato
	for(uint32_t i = 0 ; i < 16 * pow(10,6); i++){
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e003      	b.n	8004ca2 <i2c_config+0xa6>
		__NOP();
 8004c9a:	bf00      	nop
	for(uint32_t i = 0 ; i < 16 * pow(10,6); i++){
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4a66      	ldr	r2, [pc, #408]	; (8004e40 <i2c_config+0x244>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d3f7      	bcc.n	8004c9a <i2c_config+0x9e>
	}


	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cb8:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004cc8:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	79db      	ldrb	r3, [r3, #7]
 8004cce:	2b10      	cmp	r3, #16
 8004cd0:	d108      	bne.n	8004ce4 <i2c_config+0xe8>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0210 	orr.w	r2, r2, #16
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	e00b      	b.n	8004cfc <i2c_config+0x100>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	79db      	ldrb	r3, [r3, #7]
 8004ce8:	2b32      	cmp	r3, #50	; 0x32
 8004cea:	d107      	bne.n	8004cfc <i2c_config+0x100>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8004cfa:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */
	//Nos aseguramos de que el periferico está desactivado
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(0b1);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2200      	movs	r2, #0
 8004d12:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	795b      	ldrb	r3, [r3, #5]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d15c      	bne.n	8004dde <i2c_config+0x1e2>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69da      	ldr	r2, [r3, #28]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d32:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	79db      	ldrb	r3, [r3, #7]
 8004d38:	2b32      	cmp	r3, #50	; 0x32
 8004d3a:	d03f      	beq.n	8004dbc <i2c_config+0x1c0>
 8004d3c:	2b32      	cmp	r3, #50	; 0x32
 8004d3e:	f300 80b4 	bgt.w	8004eaa <i2c_config+0x2ae>
 8004d42:	2b14      	cmp	r3, #20
 8004d44:	d029      	beq.n	8004d9a <i2c_config+0x19e>
 8004d46:	2b14      	cmp	r3, #20
 8004d48:	f300 80af 	bgt.w	8004eaa <i2c_config+0x2ae>
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	d002      	beq.n	8004d56 <i2c_config+0x15a>
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d011      	beq.n	8004d78 <i2c_config+0x17c>


				break;
			}default:{

				break;
 8004d54:	e0a9      	b.n	8004eaa <i2c_config+0x2ae>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0214 	orr.w	r2, r2, #20
 8004d64:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6a1a      	ldr	r2, [r3, #32]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0205 	orr.w	r2, r2, #5
 8004d74:	621a      	str	r2, [r3, #32]
				break;
 8004d76:	e09b      	b.n	8004eb0 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004d86:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6a1a      	ldr	r2, [r3, #32]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0211 	orr.w	r2, r2, #17
 8004d96:	621a      	str	r2, [r3, #32]
				break;
 8004d98:	e08a      	b.n	8004eb0 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_20MHz << I2C_CCR_CCR_Pos);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69da      	ldr	r2, [r3, #28]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8004da8:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_20MHz;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6a1a      	ldr	r2, [r3, #32]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0215 	orr.w	r2, r2, #21
 8004db8:	621a      	str	r2, [r3, #32]
				break;
 8004dba:	e079      	b.n	8004eb0 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69da      	ldr	r2, [r3, #28]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 8004dca:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6a1a      	ldr	r2, [r3, #32]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 8004dda:	621a      	str	r2, [r3, #32]
				break;
 8004ddc:	e068      	b.n	8004eb0 <i2c_config+0x2b4>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dec:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	79db      	ldrb	r3, [r3, #7]
 8004df2:	2b32      	cmp	r3, #50	; 0x32
 8004df4:	d048      	beq.n	8004e88 <i2c_config+0x28c>
 8004df6:	2b32      	cmp	r3, #50	; 0x32
 8004df8:	dc59      	bgt.n	8004eae <i2c_config+0x2b2>
 8004dfa:	2b14      	cmp	r3, #20
 8004dfc:	d033      	beq.n	8004e66 <i2c_config+0x26a>
 8004dfe:	2b14      	cmp	r3, #20
 8004e00:	dc55      	bgt.n	8004eae <i2c_config+0x2b2>
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d002      	beq.n	8004e0c <i2c_config+0x210>
 8004e06:	2b10      	cmp	r3, #16
 8004e08:	d01c      	beq.n	8004e44 <i2c_config+0x248>


				break;
			}default:{

				break;
 8004e0a:	e050      	b.n	8004eae <i2c_config+0x2b2>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69da      	ldr	r2, [r3, #28]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0203 	orr.w	r2, r2, #3
 8004e1a:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6a1a      	ldr	r2, [r3, #32]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0202 	orr.w	r2, r2, #2
 8004e2a:	621a      	str	r2, [r3, #32]
				break;
 8004e2c:	e040      	b.n	8004eb0 <i2c_config+0x2b4>
 8004e2e:	bf00      	nop
 8004e30:	40005400 	.word	0x40005400
 8004e34:	40023800 	.word	0x40023800
 8004e38:	40005800 	.word	0x40005800
 8004e3c:	40005c00 	.word	0x40005c00
 8004e40:	00f42400 	.word	0x00f42400
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69da      	ldr	r2, [r3, #28]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 020d 	orr.w	r2, r2, #13
 8004e52:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6a1a      	ldr	r2, [r3, #32]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0206 	orr.w	r2, r2, #6
 8004e62:	621a      	str	r2, [r3, #32]
				break;
 8004e64:	e024      	b.n	8004eb0 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_20MHz << I2C_CCR_CCR_Pos);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0211 	orr.w	r2, r2, #17
 8004e74:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_20MHz;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6a1a      	ldr	r2, [r3, #32]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f042 0207 	orr.w	r2, r2, #7
 8004e84:	621a      	str	r2, [r3, #32]
				break;
 8004e86:	e013      	b.n	8004eb0 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69da      	ldr	r2, [r3, #28]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8004e96:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6a1a      	ldr	r2, [r3, #32]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0210 	orr.w	r2, r2, #16
 8004ea6:	621a      	str	r2, [r3, #32]
				break;
 8004ea8:	e002      	b.n	8004eb0 <i2c_config+0x2b4>
				break;
 8004eaa:	bf00      	nop
 8004eac:	e002      	b.n	8004eb4 <i2c_config+0x2b8>
				break;
 8004eae:	bf00      	nop
			}

		}

	}
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8004eb0:	e000      	b.n	8004eb4 <i2c_config+0x2b8>
		__NOP();
 8004eb2:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f7      	bne.n	8004eb2 <i2c_config+0x2b6>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0201 	orr.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

}
 8004ed2:	bf00      	nop
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop

08004ee0 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef6:	601a      	str	r2, [r3, #0]
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8004f0c:	e000      	b.n	8004f10 <i2c_startTransaction+0xc>
		__NOP();
 8004f0e:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f7      	bne.n	8004f0e <i2c_startTransaction+0xa>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f2c:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8004f2e:	e000      	b.n	8004f32 <i2c_startTransaction+0x2e>
		__NOP();
 8004f30:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0f7      	beq.n	8004f30 <i2c_startTransaction+0x2c>
	}
}
 8004f40:	bf00      	nop
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f64:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8004f66:	e000      	b.n	8004f6a <i2c_reStartTransaction+0x1c>
		__NOP();
 8004f68:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f7      	beq.n	8004f68 <i2c_reStartTransaction+0x1a>
	}
}
 8004f78:	bf00      	nop
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9c:	601a      	str	r2, [r3, #0]
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 8004faa:	b480      	push	{r7}
 8004fac:	b085      	sub	sp, #20
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	70fb      	strb	r3, [r7, #3]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8004fbe:	78fb      	ldrb	r3, [r7, #3]
 8004fc0:	005a      	lsls	r2, r3, #1
 8004fc2:	78bb      	ldrb	r3, [r7, #2]
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8004fcc:	e000      	b.n	8004fd0 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8004fce:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0f7      	beq.n	8004fce <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	73fb      	strb	r3, [r7, #15]

}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	460b      	mov	r3, r1
 8005004:	70fb      	strb	r3, [r7, #3]
	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	78fa      	ldrb	r2, [r7, #3]
 800500c:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800500e:	e000      	b.n	8005012 <i2c_sendMemoryAddress+0x18>
		__NOP();
 8005010:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f7      	beq.n	8005010 <i2c_sendMemoryAddress+0x16>
	}
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	460b      	mov	r3, r1
 8005038:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	78fa      	ldrb	r2, [r7, #3]
 8005040:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8005042:	e000      	b.n	8005046 <i2c_sendDataByte+0x18>
		__NOP();
 8005044:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f7      	beq.n	8005044 <i2c_sendDataByte+0x16>
	}
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800506a:	e000      	b.n	800506e <i2c_readDataByte+0xc>
		__NOP();
 800506c:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0f7      	beq.n	800506c <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	b2da      	uxtb	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	799b      	ldrb	r3, [r3, #6]
}
 800508c:	4618      	mov	r0, r3
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <__errno>:
 8005098:	4b01      	ldr	r3, [pc, #4]	; (80050a0 <__errno+0x8>)
 800509a:	6818      	ldr	r0, [r3, #0]
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	20000008 	.word	0x20000008

080050a4 <__libc_init_array>:
 80050a4:	b570      	push	{r4, r5, r6, lr}
 80050a6:	4d0d      	ldr	r5, [pc, #52]	; (80050dc <__libc_init_array+0x38>)
 80050a8:	4c0d      	ldr	r4, [pc, #52]	; (80050e0 <__libc_init_array+0x3c>)
 80050aa:	1b64      	subs	r4, r4, r5
 80050ac:	10a4      	asrs	r4, r4, #2
 80050ae:	2600      	movs	r6, #0
 80050b0:	42a6      	cmp	r6, r4
 80050b2:	d109      	bne.n	80050c8 <__libc_init_array+0x24>
 80050b4:	4d0b      	ldr	r5, [pc, #44]	; (80050e4 <__libc_init_array+0x40>)
 80050b6:	4c0c      	ldr	r4, [pc, #48]	; (80050e8 <__libc_init_array+0x44>)
 80050b8:	f003 fca6 	bl	8008a08 <_init>
 80050bc:	1b64      	subs	r4, r4, r5
 80050be:	10a4      	asrs	r4, r4, #2
 80050c0:	2600      	movs	r6, #0
 80050c2:	42a6      	cmp	r6, r4
 80050c4:	d105      	bne.n	80050d2 <__libc_init_array+0x2e>
 80050c6:	bd70      	pop	{r4, r5, r6, pc}
 80050c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050cc:	4798      	blx	r3
 80050ce:	3601      	adds	r6, #1
 80050d0:	e7ee      	b.n	80050b0 <__libc_init_array+0xc>
 80050d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d6:	4798      	blx	r3
 80050d8:	3601      	adds	r6, #1
 80050da:	e7f2      	b.n	80050c2 <__libc_init_array+0x1e>
 80050dc:	08008eb0 	.word	0x08008eb0
 80050e0:	08008eb0 	.word	0x08008eb0
 80050e4:	08008eb0 	.word	0x08008eb0
 80050e8:	08008eb4 	.word	0x08008eb4

080050ec <malloc>:
 80050ec:	4b02      	ldr	r3, [pc, #8]	; (80050f8 <malloc+0xc>)
 80050ee:	4601      	mov	r1, r0
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	f000 b877 	b.w	80051e4 <_malloc_r>
 80050f6:	bf00      	nop
 80050f8:	20000008 	.word	0x20000008

080050fc <memset>:
 80050fc:	4402      	add	r2, r0
 80050fe:	4603      	mov	r3, r0
 8005100:	4293      	cmp	r3, r2
 8005102:	d100      	bne.n	8005106 <memset+0xa>
 8005104:	4770      	bx	lr
 8005106:	f803 1b01 	strb.w	r1, [r3], #1
 800510a:	e7f9      	b.n	8005100 <memset+0x4>

0800510c <_free_r>:
 800510c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800510e:	2900      	cmp	r1, #0
 8005110:	d044      	beq.n	800519c <_free_r+0x90>
 8005112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005116:	9001      	str	r0, [sp, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	f1a1 0404 	sub.w	r4, r1, #4
 800511e:	bfb8      	it	lt
 8005120:	18e4      	addlt	r4, r4, r3
 8005122:	f001 fc53 	bl	80069cc <__malloc_lock>
 8005126:	4a1e      	ldr	r2, [pc, #120]	; (80051a0 <_free_r+0x94>)
 8005128:	9801      	ldr	r0, [sp, #4]
 800512a:	6813      	ldr	r3, [r2, #0]
 800512c:	b933      	cbnz	r3, 800513c <_free_r+0x30>
 800512e:	6063      	str	r3, [r4, #4]
 8005130:	6014      	str	r4, [r2, #0]
 8005132:	b003      	add	sp, #12
 8005134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005138:	f001 bc4e 	b.w	80069d8 <__malloc_unlock>
 800513c:	42a3      	cmp	r3, r4
 800513e:	d908      	bls.n	8005152 <_free_r+0x46>
 8005140:	6825      	ldr	r5, [r4, #0]
 8005142:	1961      	adds	r1, r4, r5
 8005144:	428b      	cmp	r3, r1
 8005146:	bf01      	itttt	eq
 8005148:	6819      	ldreq	r1, [r3, #0]
 800514a:	685b      	ldreq	r3, [r3, #4]
 800514c:	1949      	addeq	r1, r1, r5
 800514e:	6021      	streq	r1, [r4, #0]
 8005150:	e7ed      	b.n	800512e <_free_r+0x22>
 8005152:	461a      	mov	r2, r3
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	b10b      	cbz	r3, 800515c <_free_r+0x50>
 8005158:	42a3      	cmp	r3, r4
 800515a:	d9fa      	bls.n	8005152 <_free_r+0x46>
 800515c:	6811      	ldr	r1, [r2, #0]
 800515e:	1855      	adds	r5, r2, r1
 8005160:	42a5      	cmp	r5, r4
 8005162:	d10b      	bne.n	800517c <_free_r+0x70>
 8005164:	6824      	ldr	r4, [r4, #0]
 8005166:	4421      	add	r1, r4
 8005168:	1854      	adds	r4, r2, r1
 800516a:	42a3      	cmp	r3, r4
 800516c:	6011      	str	r1, [r2, #0]
 800516e:	d1e0      	bne.n	8005132 <_free_r+0x26>
 8005170:	681c      	ldr	r4, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	6053      	str	r3, [r2, #4]
 8005176:	4421      	add	r1, r4
 8005178:	6011      	str	r1, [r2, #0]
 800517a:	e7da      	b.n	8005132 <_free_r+0x26>
 800517c:	d902      	bls.n	8005184 <_free_r+0x78>
 800517e:	230c      	movs	r3, #12
 8005180:	6003      	str	r3, [r0, #0]
 8005182:	e7d6      	b.n	8005132 <_free_r+0x26>
 8005184:	6825      	ldr	r5, [r4, #0]
 8005186:	1961      	adds	r1, r4, r5
 8005188:	428b      	cmp	r3, r1
 800518a:	bf04      	itt	eq
 800518c:	6819      	ldreq	r1, [r3, #0]
 800518e:	685b      	ldreq	r3, [r3, #4]
 8005190:	6063      	str	r3, [r4, #4]
 8005192:	bf04      	itt	eq
 8005194:	1949      	addeq	r1, r1, r5
 8005196:	6021      	streq	r1, [r4, #0]
 8005198:	6054      	str	r4, [r2, #4]
 800519a:	e7ca      	b.n	8005132 <_free_r+0x26>
 800519c:	b003      	add	sp, #12
 800519e:	bd30      	pop	{r4, r5, pc}
 80051a0:	2000041c 	.word	0x2000041c

080051a4 <sbrk_aligned>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	4e0e      	ldr	r6, [pc, #56]	; (80051e0 <sbrk_aligned+0x3c>)
 80051a8:	460c      	mov	r4, r1
 80051aa:	6831      	ldr	r1, [r6, #0]
 80051ac:	4605      	mov	r5, r0
 80051ae:	b911      	cbnz	r1, 80051b6 <sbrk_aligned+0x12>
 80051b0:	f000 fcf6 	bl	8005ba0 <_sbrk_r>
 80051b4:	6030      	str	r0, [r6, #0]
 80051b6:	4621      	mov	r1, r4
 80051b8:	4628      	mov	r0, r5
 80051ba:	f000 fcf1 	bl	8005ba0 <_sbrk_r>
 80051be:	1c43      	adds	r3, r0, #1
 80051c0:	d00a      	beq.n	80051d8 <sbrk_aligned+0x34>
 80051c2:	1cc4      	adds	r4, r0, #3
 80051c4:	f024 0403 	bic.w	r4, r4, #3
 80051c8:	42a0      	cmp	r0, r4
 80051ca:	d007      	beq.n	80051dc <sbrk_aligned+0x38>
 80051cc:	1a21      	subs	r1, r4, r0
 80051ce:	4628      	mov	r0, r5
 80051d0:	f000 fce6 	bl	8005ba0 <_sbrk_r>
 80051d4:	3001      	adds	r0, #1
 80051d6:	d101      	bne.n	80051dc <sbrk_aligned+0x38>
 80051d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80051dc:	4620      	mov	r0, r4
 80051de:	bd70      	pop	{r4, r5, r6, pc}
 80051e0:	20000420 	.word	0x20000420

080051e4 <_malloc_r>:
 80051e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e8:	1ccd      	adds	r5, r1, #3
 80051ea:	f025 0503 	bic.w	r5, r5, #3
 80051ee:	3508      	adds	r5, #8
 80051f0:	2d0c      	cmp	r5, #12
 80051f2:	bf38      	it	cc
 80051f4:	250c      	movcc	r5, #12
 80051f6:	2d00      	cmp	r5, #0
 80051f8:	4607      	mov	r7, r0
 80051fa:	db01      	blt.n	8005200 <_malloc_r+0x1c>
 80051fc:	42a9      	cmp	r1, r5
 80051fe:	d905      	bls.n	800520c <_malloc_r+0x28>
 8005200:	230c      	movs	r3, #12
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	2600      	movs	r6, #0
 8005206:	4630      	mov	r0, r6
 8005208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800520c:	4e2e      	ldr	r6, [pc, #184]	; (80052c8 <_malloc_r+0xe4>)
 800520e:	f001 fbdd 	bl	80069cc <__malloc_lock>
 8005212:	6833      	ldr	r3, [r6, #0]
 8005214:	461c      	mov	r4, r3
 8005216:	bb34      	cbnz	r4, 8005266 <_malloc_r+0x82>
 8005218:	4629      	mov	r1, r5
 800521a:	4638      	mov	r0, r7
 800521c:	f7ff ffc2 	bl	80051a4 <sbrk_aligned>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	4604      	mov	r4, r0
 8005224:	d14d      	bne.n	80052c2 <_malloc_r+0xde>
 8005226:	6834      	ldr	r4, [r6, #0]
 8005228:	4626      	mov	r6, r4
 800522a:	2e00      	cmp	r6, #0
 800522c:	d140      	bne.n	80052b0 <_malloc_r+0xcc>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	4631      	mov	r1, r6
 8005232:	4638      	mov	r0, r7
 8005234:	eb04 0803 	add.w	r8, r4, r3
 8005238:	f000 fcb2 	bl	8005ba0 <_sbrk_r>
 800523c:	4580      	cmp	r8, r0
 800523e:	d13a      	bne.n	80052b6 <_malloc_r+0xd2>
 8005240:	6821      	ldr	r1, [r4, #0]
 8005242:	3503      	adds	r5, #3
 8005244:	1a6d      	subs	r5, r5, r1
 8005246:	f025 0503 	bic.w	r5, r5, #3
 800524a:	3508      	adds	r5, #8
 800524c:	2d0c      	cmp	r5, #12
 800524e:	bf38      	it	cc
 8005250:	250c      	movcc	r5, #12
 8005252:	4629      	mov	r1, r5
 8005254:	4638      	mov	r0, r7
 8005256:	f7ff ffa5 	bl	80051a4 <sbrk_aligned>
 800525a:	3001      	adds	r0, #1
 800525c:	d02b      	beq.n	80052b6 <_malloc_r+0xd2>
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	442b      	add	r3, r5
 8005262:	6023      	str	r3, [r4, #0]
 8005264:	e00e      	b.n	8005284 <_malloc_r+0xa0>
 8005266:	6822      	ldr	r2, [r4, #0]
 8005268:	1b52      	subs	r2, r2, r5
 800526a:	d41e      	bmi.n	80052aa <_malloc_r+0xc6>
 800526c:	2a0b      	cmp	r2, #11
 800526e:	d916      	bls.n	800529e <_malloc_r+0xba>
 8005270:	1961      	adds	r1, r4, r5
 8005272:	42a3      	cmp	r3, r4
 8005274:	6025      	str	r5, [r4, #0]
 8005276:	bf18      	it	ne
 8005278:	6059      	strne	r1, [r3, #4]
 800527a:	6863      	ldr	r3, [r4, #4]
 800527c:	bf08      	it	eq
 800527e:	6031      	streq	r1, [r6, #0]
 8005280:	5162      	str	r2, [r4, r5]
 8005282:	604b      	str	r3, [r1, #4]
 8005284:	4638      	mov	r0, r7
 8005286:	f104 060b 	add.w	r6, r4, #11
 800528a:	f001 fba5 	bl	80069d8 <__malloc_unlock>
 800528e:	f026 0607 	bic.w	r6, r6, #7
 8005292:	1d23      	adds	r3, r4, #4
 8005294:	1af2      	subs	r2, r6, r3
 8005296:	d0b6      	beq.n	8005206 <_malloc_r+0x22>
 8005298:	1b9b      	subs	r3, r3, r6
 800529a:	50a3      	str	r3, [r4, r2]
 800529c:	e7b3      	b.n	8005206 <_malloc_r+0x22>
 800529e:	6862      	ldr	r2, [r4, #4]
 80052a0:	42a3      	cmp	r3, r4
 80052a2:	bf0c      	ite	eq
 80052a4:	6032      	streq	r2, [r6, #0]
 80052a6:	605a      	strne	r2, [r3, #4]
 80052a8:	e7ec      	b.n	8005284 <_malloc_r+0xa0>
 80052aa:	4623      	mov	r3, r4
 80052ac:	6864      	ldr	r4, [r4, #4]
 80052ae:	e7b2      	b.n	8005216 <_malloc_r+0x32>
 80052b0:	4634      	mov	r4, r6
 80052b2:	6876      	ldr	r6, [r6, #4]
 80052b4:	e7b9      	b.n	800522a <_malloc_r+0x46>
 80052b6:	230c      	movs	r3, #12
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	4638      	mov	r0, r7
 80052bc:	f001 fb8c 	bl	80069d8 <__malloc_unlock>
 80052c0:	e7a1      	b.n	8005206 <_malloc_r+0x22>
 80052c2:	6025      	str	r5, [r4, #0]
 80052c4:	e7de      	b.n	8005284 <_malloc_r+0xa0>
 80052c6:	bf00      	nop
 80052c8:	2000041c 	.word	0x2000041c

080052cc <__cvt>:
 80052cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052d0:	ec55 4b10 	vmov	r4, r5, d0
 80052d4:	2d00      	cmp	r5, #0
 80052d6:	460e      	mov	r6, r1
 80052d8:	4619      	mov	r1, r3
 80052da:	462b      	mov	r3, r5
 80052dc:	bfbb      	ittet	lt
 80052de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80052e2:	461d      	movlt	r5, r3
 80052e4:	2300      	movge	r3, #0
 80052e6:	232d      	movlt	r3, #45	; 0x2d
 80052e8:	700b      	strb	r3, [r1, #0]
 80052ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80052f0:	4691      	mov	r9, r2
 80052f2:	f023 0820 	bic.w	r8, r3, #32
 80052f6:	bfbc      	itt	lt
 80052f8:	4622      	movlt	r2, r4
 80052fa:	4614      	movlt	r4, r2
 80052fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005300:	d005      	beq.n	800530e <__cvt+0x42>
 8005302:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005306:	d100      	bne.n	800530a <__cvt+0x3e>
 8005308:	3601      	adds	r6, #1
 800530a:	2102      	movs	r1, #2
 800530c:	e000      	b.n	8005310 <__cvt+0x44>
 800530e:	2103      	movs	r1, #3
 8005310:	ab03      	add	r3, sp, #12
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	ab02      	add	r3, sp, #8
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	ec45 4b10 	vmov	d0, r4, r5
 800531c:	4653      	mov	r3, sl
 800531e:	4632      	mov	r2, r6
 8005320:	f000 fd42 	bl	8005da8 <_dtoa_r>
 8005324:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005328:	4607      	mov	r7, r0
 800532a:	d102      	bne.n	8005332 <__cvt+0x66>
 800532c:	f019 0f01 	tst.w	r9, #1
 8005330:	d022      	beq.n	8005378 <__cvt+0xac>
 8005332:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005336:	eb07 0906 	add.w	r9, r7, r6
 800533a:	d110      	bne.n	800535e <__cvt+0x92>
 800533c:	783b      	ldrb	r3, [r7, #0]
 800533e:	2b30      	cmp	r3, #48	; 0x30
 8005340:	d10a      	bne.n	8005358 <__cvt+0x8c>
 8005342:	2200      	movs	r2, #0
 8005344:	2300      	movs	r3, #0
 8005346:	4620      	mov	r0, r4
 8005348:	4629      	mov	r1, r5
 800534a:	f7fb fbc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800534e:	b918      	cbnz	r0, 8005358 <__cvt+0x8c>
 8005350:	f1c6 0601 	rsb	r6, r6, #1
 8005354:	f8ca 6000 	str.w	r6, [sl]
 8005358:	f8da 3000 	ldr.w	r3, [sl]
 800535c:	4499      	add	r9, r3
 800535e:	2200      	movs	r2, #0
 8005360:	2300      	movs	r3, #0
 8005362:	4620      	mov	r0, r4
 8005364:	4629      	mov	r1, r5
 8005366:	f7fb fbb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800536a:	b108      	cbz	r0, 8005370 <__cvt+0xa4>
 800536c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005370:	2230      	movs	r2, #48	; 0x30
 8005372:	9b03      	ldr	r3, [sp, #12]
 8005374:	454b      	cmp	r3, r9
 8005376:	d307      	bcc.n	8005388 <__cvt+0xbc>
 8005378:	9b03      	ldr	r3, [sp, #12]
 800537a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800537c:	1bdb      	subs	r3, r3, r7
 800537e:	4638      	mov	r0, r7
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	b004      	add	sp, #16
 8005384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005388:	1c59      	adds	r1, r3, #1
 800538a:	9103      	str	r1, [sp, #12]
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e7f0      	b.n	8005372 <__cvt+0xa6>

08005390 <__exponent>:
 8005390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005392:	4603      	mov	r3, r0
 8005394:	2900      	cmp	r1, #0
 8005396:	bfb8      	it	lt
 8005398:	4249      	neglt	r1, r1
 800539a:	f803 2b02 	strb.w	r2, [r3], #2
 800539e:	bfb4      	ite	lt
 80053a0:	222d      	movlt	r2, #45	; 0x2d
 80053a2:	222b      	movge	r2, #43	; 0x2b
 80053a4:	2909      	cmp	r1, #9
 80053a6:	7042      	strb	r2, [r0, #1]
 80053a8:	dd2a      	ble.n	8005400 <__exponent+0x70>
 80053aa:	f10d 0407 	add.w	r4, sp, #7
 80053ae:	46a4      	mov	ip, r4
 80053b0:	270a      	movs	r7, #10
 80053b2:	46a6      	mov	lr, r4
 80053b4:	460a      	mov	r2, r1
 80053b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80053ba:	fb07 1516 	mls	r5, r7, r6, r1
 80053be:	3530      	adds	r5, #48	; 0x30
 80053c0:	2a63      	cmp	r2, #99	; 0x63
 80053c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80053c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80053ca:	4631      	mov	r1, r6
 80053cc:	dcf1      	bgt.n	80053b2 <__exponent+0x22>
 80053ce:	3130      	adds	r1, #48	; 0x30
 80053d0:	f1ae 0502 	sub.w	r5, lr, #2
 80053d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80053d8:	1c44      	adds	r4, r0, #1
 80053da:	4629      	mov	r1, r5
 80053dc:	4561      	cmp	r1, ip
 80053de:	d30a      	bcc.n	80053f6 <__exponent+0x66>
 80053e0:	f10d 0209 	add.w	r2, sp, #9
 80053e4:	eba2 020e 	sub.w	r2, r2, lr
 80053e8:	4565      	cmp	r5, ip
 80053ea:	bf88      	it	hi
 80053ec:	2200      	movhi	r2, #0
 80053ee:	4413      	add	r3, r2
 80053f0:	1a18      	subs	r0, r3, r0
 80053f2:	b003      	add	sp, #12
 80053f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80053fe:	e7ed      	b.n	80053dc <__exponent+0x4c>
 8005400:	2330      	movs	r3, #48	; 0x30
 8005402:	3130      	adds	r1, #48	; 0x30
 8005404:	7083      	strb	r3, [r0, #2]
 8005406:	70c1      	strb	r1, [r0, #3]
 8005408:	1d03      	adds	r3, r0, #4
 800540a:	e7f1      	b.n	80053f0 <__exponent+0x60>

0800540c <_printf_float>:
 800540c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005410:	ed2d 8b02 	vpush	{d8}
 8005414:	b08d      	sub	sp, #52	; 0x34
 8005416:	460c      	mov	r4, r1
 8005418:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800541c:	4616      	mov	r6, r2
 800541e:	461f      	mov	r7, r3
 8005420:	4605      	mov	r5, r0
 8005422:	f001 faaf 	bl	8006984 <_localeconv_r>
 8005426:	f8d0 a000 	ldr.w	sl, [r0]
 800542a:	4650      	mov	r0, sl
 800542c:	f7fa fed8 	bl	80001e0 <strlen>
 8005430:	2300      	movs	r3, #0
 8005432:	930a      	str	r3, [sp, #40]	; 0x28
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	9305      	str	r3, [sp, #20]
 8005438:	f8d8 3000 	ldr.w	r3, [r8]
 800543c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005440:	3307      	adds	r3, #7
 8005442:	f023 0307 	bic.w	r3, r3, #7
 8005446:	f103 0208 	add.w	r2, r3, #8
 800544a:	f8c8 2000 	str.w	r2, [r8]
 800544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005452:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005456:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800545a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800545e:	9307      	str	r3, [sp, #28]
 8005460:	f8cd 8018 	str.w	r8, [sp, #24]
 8005464:	ee08 0a10 	vmov	s16, r0
 8005468:	4b9f      	ldr	r3, [pc, #636]	; (80056e8 <_printf_float+0x2dc>)
 800546a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800546e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005472:	f7fb fb63 	bl	8000b3c <__aeabi_dcmpun>
 8005476:	bb88      	cbnz	r0, 80054dc <_printf_float+0xd0>
 8005478:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800547c:	4b9a      	ldr	r3, [pc, #616]	; (80056e8 <_printf_float+0x2dc>)
 800547e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005482:	f7fb fb3d 	bl	8000b00 <__aeabi_dcmple>
 8005486:	bb48      	cbnz	r0, 80054dc <_printf_float+0xd0>
 8005488:	2200      	movs	r2, #0
 800548a:	2300      	movs	r3, #0
 800548c:	4640      	mov	r0, r8
 800548e:	4649      	mov	r1, r9
 8005490:	f7fb fb2c 	bl	8000aec <__aeabi_dcmplt>
 8005494:	b110      	cbz	r0, 800549c <_printf_float+0x90>
 8005496:	232d      	movs	r3, #45	; 0x2d
 8005498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800549c:	4b93      	ldr	r3, [pc, #588]	; (80056ec <_printf_float+0x2e0>)
 800549e:	4894      	ldr	r0, [pc, #592]	; (80056f0 <_printf_float+0x2e4>)
 80054a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80054a4:	bf94      	ite	ls
 80054a6:	4698      	movls	r8, r3
 80054a8:	4680      	movhi	r8, r0
 80054aa:	2303      	movs	r3, #3
 80054ac:	6123      	str	r3, [r4, #16]
 80054ae:	9b05      	ldr	r3, [sp, #20]
 80054b0:	f023 0204 	bic.w	r2, r3, #4
 80054b4:	6022      	str	r2, [r4, #0]
 80054b6:	f04f 0900 	mov.w	r9, #0
 80054ba:	9700      	str	r7, [sp, #0]
 80054bc:	4633      	mov	r3, r6
 80054be:	aa0b      	add	r2, sp, #44	; 0x2c
 80054c0:	4621      	mov	r1, r4
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 f9d8 	bl	8005878 <_printf_common>
 80054c8:	3001      	adds	r0, #1
 80054ca:	f040 8090 	bne.w	80055ee <_printf_float+0x1e2>
 80054ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054d2:	b00d      	add	sp, #52	; 0x34
 80054d4:	ecbd 8b02 	vpop	{d8}
 80054d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054dc:	4642      	mov	r2, r8
 80054de:	464b      	mov	r3, r9
 80054e0:	4640      	mov	r0, r8
 80054e2:	4649      	mov	r1, r9
 80054e4:	f7fb fb2a 	bl	8000b3c <__aeabi_dcmpun>
 80054e8:	b140      	cbz	r0, 80054fc <_printf_float+0xf0>
 80054ea:	464b      	mov	r3, r9
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	bfbc      	itt	lt
 80054f0:	232d      	movlt	r3, #45	; 0x2d
 80054f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054f6:	487f      	ldr	r0, [pc, #508]	; (80056f4 <_printf_float+0x2e8>)
 80054f8:	4b7f      	ldr	r3, [pc, #508]	; (80056f8 <_printf_float+0x2ec>)
 80054fa:	e7d1      	b.n	80054a0 <_printf_float+0x94>
 80054fc:	6863      	ldr	r3, [r4, #4]
 80054fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005502:	9206      	str	r2, [sp, #24]
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	d13f      	bne.n	8005588 <_printf_float+0x17c>
 8005508:	2306      	movs	r3, #6
 800550a:	6063      	str	r3, [r4, #4]
 800550c:	9b05      	ldr	r3, [sp, #20]
 800550e:	6861      	ldr	r1, [r4, #4]
 8005510:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005514:	2300      	movs	r3, #0
 8005516:	9303      	str	r3, [sp, #12]
 8005518:	ab0a      	add	r3, sp, #40	; 0x28
 800551a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800551e:	ab09      	add	r3, sp, #36	; 0x24
 8005520:	ec49 8b10 	vmov	d0, r8, r9
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	6022      	str	r2, [r4, #0]
 8005528:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800552c:	4628      	mov	r0, r5
 800552e:	f7ff fecd 	bl	80052cc <__cvt>
 8005532:	9b06      	ldr	r3, [sp, #24]
 8005534:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005536:	2b47      	cmp	r3, #71	; 0x47
 8005538:	4680      	mov	r8, r0
 800553a:	d108      	bne.n	800554e <_printf_float+0x142>
 800553c:	1cc8      	adds	r0, r1, #3
 800553e:	db02      	blt.n	8005546 <_printf_float+0x13a>
 8005540:	6863      	ldr	r3, [r4, #4]
 8005542:	4299      	cmp	r1, r3
 8005544:	dd41      	ble.n	80055ca <_printf_float+0x1be>
 8005546:	f1ab 0b02 	sub.w	fp, fp, #2
 800554a:	fa5f fb8b 	uxtb.w	fp, fp
 800554e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005552:	d820      	bhi.n	8005596 <_printf_float+0x18a>
 8005554:	3901      	subs	r1, #1
 8005556:	465a      	mov	r2, fp
 8005558:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800555c:	9109      	str	r1, [sp, #36]	; 0x24
 800555e:	f7ff ff17 	bl	8005390 <__exponent>
 8005562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005564:	1813      	adds	r3, r2, r0
 8005566:	2a01      	cmp	r2, #1
 8005568:	4681      	mov	r9, r0
 800556a:	6123      	str	r3, [r4, #16]
 800556c:	dc02      	bgt.n	8005574 <_printf_float+0x168>
 800556e:	6822      	ldr	r2, [r4, #0]
 8005570:	07d2      	lsls	r2, r2, #31
 8005572:	d501      	bpl.n	8005578 <_printf_float+0x16c>
 8005574:	3301      	adds	r3, #1
 8005576:	6123      	str	r3, [r4, #16]
 8005578:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800557c:	2b00      	cmp	r3, #0
 800557e:	d09c      	beq.n	80054ba <_printf_float+0xae>
 8005580:	232d      	movs	r3, #45	; 0x2d
 8005582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005586:	e798      	b.n	80054ba <_printf_float+0xae>
 8005588:	9a06      	ldr	r2, [sp, #24]
 800558a:	2a47      	cmp	r2, #71	; 0x47
 800558c:	d1be      	bne.n	800550c <_printf_float+0x100>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1bc      	bne.n	800550c <_printf_float+0x100>
 8005592:	2301      	movs	r3, #1
 8005594:	e7b9      	b.n	800550a <_printf_float+0xfe>
 8005596:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800559a:	d118      	bne.n	80055ce <_printf_float+0x1c2>
 800559c:	2900      	cmp	r1, #0
 800559e:	6863      	ldr	r3, [r4, #4]
 80055a0:	dd0b      	ble.n	80055ba <_printf_float+0x1ae>
 80055a2:	6121      	str	r1, [r4, #16]
 80055a4:	b913      	cbnz	r3, 80055ac <_printf_float+0x1a0>
 80055a6:	6822      	ldr	r2, [r4, #0]
 80055a8:	07d0      	lsls	r0, r2, #31
 80055aa:	d502      	bpl.n	80055b2 <_printf_float+0x1a6>
 80055ac:	3301      	adds	r3, #1
 80055ae:	440b      	add	r3, r1
 80055b0:	6123      	str	r3, [r4, #16]
 80055b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80055b4:	f04f 0900 	mov.w	r9, #0
 80055b8:	e7de      	b.n	8005578 <_printf_float+0x16c>
 80055ba:	b913      	cbnz	r3, 80055c2 <_printf_float+0x1b6>
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	07d2      	lsls	r2, r2, #31
 80055c0:	d501      	bpl.n	80055c6 <_printf_float+0x1ba>
 80055c2:	3302      	adds	r3, #2
 80055c4:	e7f4      	b.n	80055b0 <_printf_float+0x1a4>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e7f2      	b.n	80055b0 <_printf_float+0x1a4>
 80055ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80055ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d0:	4299      	cmp	r1, r3
 80055d2:	db05      	blt.n	80055e0 <_printf_float+0x1d4>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	6121      	str	r1, [r4, #16]
 80055d8:	07d8      	lsls	r0, r3, #31
 80055da:	d5ea      	bpl.n	80055b2 <_printf_float+0x1a6>
 80055dc:	1c4b      	adds	r3, r1, #1
 80055de:	e7e7      	b.n	80055b0 <_printf_float+0x1a4>
 80055e0:	2900      	cmp	r1, #0
 80055e2:	bfd4      	ite	le
 80055e4:	f1c1 0202 	rsble	r2, r1, #2
 80055e8:	2201      	movgt	r2, #1
 80055ea:	4413      	add	r3, r2
 80055ec:	e7e0      	b.n	80055b0 <_printf_float+0x1a4>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	055a      	lsls	r2, r3, #21
 80055f2:	d407      	bmi.n	8005604 <_printf_float+0x1f8>
 80055f4:	6923      	ldr	r3, [r4, #16]
 80055f6:	4642      	mov	r2, r8
 80055f8:	4631      	mov	r1, r6
 80055fa:	4628      	mov	r0, r5
 80055fc:	47b8      	blx	r7
 80055fe:	3001      	adds	r0, #1
 8005600:	d12c      	bne.n	800565c <_printf_float+0x250>
 8005602:	e764      	b.n	80054ce <_printf_float+0xc2>
 8005604:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005608:	f240 80e0 	bls.w	80057cc <_printf_float+0x3c0>
 800560c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005610:	2200      	movs	r2, #0
 8005612:	2300      	movs	r3, #0
 8005614:	f7fb fa60 	bl	8000ad8 <__aeabi_dcmpeq>
 8005618:	2800      	cmp	r0, #0
 800561a:	d034      	beq.n	8005686 <_printf_float+0x27a>
 800561c:	4a37      	ldr	r2, [pc, #220]	; (80056fc <_printf_float+0x2f0>)
 800561e:	2301      	movs	r3, #1
 8005620:	4631      	mov	r1, r6
 8005622:	4628      	mov	r0, r5
 8005624:	47b8      	blx	r7
 8005626:	3001      	adds	r0, #1
 8005628:	f43f af51 	beq.w	80054ce <_printf_float+0xc2>
 800562c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005630:	429a      	cmp	r2, r3
 8005632:	db02      	blt.n	800563a <_printf_float+0x22e>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	07d8      	lsls	r0, r3, #31
 8005638:	d510      	bpl.n	800565c <_printf_float+0x250>
 800563a:	ee18 3a10 	vmov	r3, s16
 800563e:	4652      	mov	r2, sl
 8005640:	4631      	mov	r1, r6
 8005642:	4628      	mov	r0, r5
 8005644:	47b8      	blx	r7
 8005646:	3001      	adds	r0, #1
 8005648:	f43f af41 	beq.w	80054ce <_printf_float+0xc2>
 800564c:	f04f 0800 	mov.w	r8, #0
 8005650:	f104 091a 	add.w	r9, r4, #26
 8005654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005656:	3b01      	subs	r3, #1
 8005658:	4543      	cmp	r3, r8
 800565a:	dc09      	bgt.n	8005670 <_printf_float+0x264>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	079b      	lsls	r3, r3, #30
 8005660:	f100 8105 	bmi.w	800586e <_printf_float+0x462>
 8005664:	68e0      	ldr	r0, [r4, #12]
 8005666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005668:	4298      	cmp	r0, r3
 800566a:	bfb8      	it	lt
 800566c:	4618      	movlt	r0, r3
 800566e:	e730      	b.n	80054d2 <_printf_float+0xc6>
 8005670:	2301      	movs	r3, #1
 8005672:	464a      	mov	r2, r9
 8005674:	4631      	mov	r1, r6
 8005676:	4628      	mov	r0, r5
 8005678:	47b8      	blx	r7
 800567a:	3001      	adds	r0, #1
 800567c:	f43f af27 	beq.w	80054ce <_printf_float+0xc2>
 8005680:	f108 0801 	add.w	r8, r8, #1
 8005684:	e7e6      	b.n	8005654 <_printf_float+0x248>
 8005686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005688:	2b00      	cmp	r3, #0
 800568a:	dc39      	bgt.n	8005700 <_printf_float+0x2f4>
 800568c:	4a1b      	ldr	r2, [pc, #108]	; (80056fc <_printf_float+0x2f0>)
 800568e:	2301      	movs	r3, #1
 8005690:	4631      	mov	r1, r6
 8005692:	4628      	mov	r0, r5
 8005694:	47b8      	blx	r7
 8005696:	3001      	adds	r0, #1
 8005698:	f43f af19 	beq.w	80054ce <_printf_float+0xc2>
 800569c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056a0:	4313      	orrs	r3, r2
 80056a2:	d102      	bne.n	80056aa <_printf_float+0x29e>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	07d9      	lsls	r1, r3, #31
 80056a8:	d5d8      	bpl.n	800565c <_printf_float+0x250>
 80056aa:	ee18 3a10 	vmov	r3, s16
 80056ae:	4652      	mov	r2, sl
 80056b0:	4631      	mov	r1, r6
 80056b2:	4628      	mov	r0, r5
 80056b4:	47b8      	blx	r7
 80056b6:	3001      	adds	r0, #1
 80056b8:	f43f af09 	beq.w	80054ce <_printf_float+0xc2>
 80056bc:	f04f 0900 	mov.w	r9, #0
 80056c0:	f104 0a1a 	add.w	sl, r4, #26
 80056c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c6:	425b      	negs	r3, r3
 80056c8:	454b      	cmp	r3, r9
 80056ca:	dc01      	bgt.n	80056d0 <_printf_float+0x2c4>
 80056cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ce:	e792      	b.n	80055f6 <_printf_float+0x1ea>
 80056d0:	2301      	movs	r3, #1
 80056d2:	4652      	mov	r2, sl
 80056d4:	4631      	mov	r1, r6
 80056d6:	4628      	mov	r0, r5
 80056d8:	47b8      	blx	r7
 80056da:	3001      	adds	r0, #1
 80056dc:	f43f aef7 	beq.w	80054ce <_printf_float+0xc2>
 80056e0:	f109 0901 	add.w	r9, r9, #1
 80056e4:	e7ee      	b.n	80056c4 <_printf_float+0x2b8>
 80056e6:	bf00      	nop
 80056e8:	7fefffff 	.word	0x7fefffff
 80056ec:	08008aa4 	.word	0x08008aa4
 80056f0:	08008aa8 	.word	0x08008aa8
 80056f4:	08008ab0 	.word	0x08008ab0
 80056f8:	08008aac 	.word	0x08008aac
 80056fc:	08008ab4 	.word	0x08008ab4
 8005700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005704:	429a      	cmp	r2, r3
 8005706:	bfa8      	it	ge
 8005708:	461a      	movge	r2, r3
 800570a:	2a00      	cmp	r2, #0
 800570c:	4691      	mov	r9, r2
 800570e:	dc37      	bgt.n	8005780 <_printf_float+0x374>
 8005710:	f04f 0b00 	mov.w	fp, #0
 8005714:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005718:	f104 021a 	add.w	r2, r4, #26
 800571c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800571e:	9305      	str	r3, [sp, #20]
 8005720:	eba3 0309 	sub.w	r3, r3, r9
 8005724:	455b      	cmp	r3, fp
 8005726:	dc33      	bgt.n	8005790 <_printf_float+0x384>
 8005728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800572c:	429a      	cmp	r2, r3
 800572e:	db3b      	blt.n	80057a8 <_printf_float+0x39c>
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	07da      	lsls	r2, r3, #31
 8005734:	d438      	bmi.n	80057a8 <_printf_float+0x39c>
 8005736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005738:	9a05      	ldr	r2, [sp, #20]
 800573a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800573c:	1a9a      	subs	r2, r3, r2
 800573e:	eba3 0901 	sub.w	r9, r3, r1
 8005742:	4591      	cmp	r9, r2
 8005744:	bfa8      	it	ge
 8005746:	4691      	movge	r9, r2
 8005748:	f1b9 0f00 	cmp.w	r9, #0
 800574c:	dc35      	bgt.n	80057ba <_printf_float+0x3ae>
 800574e:	f04f 0800 	mov.w	r8, #0
 8005752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005756:	f104 0a1a 	add.w	sl, r4, #26
 800575a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800575e:	1a9b      	subs	r3, r3, r2
 8005760:	eba3 0309 	sub.w	r3, r3, r9
 8005764:	4543      	cmp	r3, r8
 8005766:	f77f af79 	ble.w	800565c <_printf_float+0x250>
 800576a:	2301      	movs	r3, #1
 800576c:	4652      	mov	r2, sl
 800576e:	4631      	mov	r1, r6
 8005770:	4628      	mov	r0, r5
 8005772:	47b8      	blx	r7
 8005774:	3001      	adds	r0, #1
 8005776:	f43f aeaa 	beq.w	80054ce <_printf_float+0xc2>
 800577a:	f108 0801 	add.w	r8, r8, #1
 800577e:	e7ec      	b.n	800575a <_printf_float+0x34e>
 8005780:	4613      	mov	r3, r2
 8005782:	4631      	mov	r1, r6
 8005784:	4642      	mov	r2, r8
 8005786:	4628      	mov	r0, r5
 8005788:	47b8      	blx	r7
 800578a:	3001      	adds	r0, #1
 800578c:	d1c0      	bne.n	8005710 <_printf_float+0x304>
 800578e:	e69e      	b.n	80054ce <_printf_float+0xc2>
 8005790:	2301      	movs	r3, #1
 8005792:	4631      	mov	r1, r6
 8005794:	4628      	mov	r0, r5
 8005796:	9205      	str	r2, [sp, #20]
 8005798:	47b8      	blx	r7
 800579a:	3001      	adds	r0, #1
 800579c:	f43f ae97 	beq.w	80054ce <_printf_float+0xc2>
 80057a0:	9a05      	ldr	r2, [sp, #20]
 80057a2:	f10b 0b01 	add.w	fp, fp, #1
 80057a6:	e7b9      	b.n	800571c <_printf_float+0x310>
 80057a8:	ee18 3a10 	vmov	r3, s16
 80057ac:	4652      	mov	r2, sl
 80057ae:	4631      	mov	r1, r6
 80057b0:	4628      	mov	r0, r5
 80057b2:	47b8      	blx	r7
 80057b4:	3001      	adds	r0, #1
 80057b6:	d1be      	bne.n	8005736 <_printf_float+0x32a>
 80057b8:	e689      	b.n	80054ce <_printf_float+0xc2>
 80057ba:	9a05      	ldr	r2, [sp, #20]
 80057bc:	464b      	mov	r3, r9
 80057be:	4442      	add	r2, r8
 80057c0:	4631      	mov	r1, r6
 80057c2:	4628      	mov	r0, r5
 80057c4:	47b8      	blx	r7
 80057c6:	3001      	adds	r0, #1
 80057c8:	d1c1      	bne.n	800574e <_printf_float+0x342>
 80057ca:	e680      	b.n	80054ce <_printf_float+0xc2>
 80057cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057ce:	2a01      	cmp	r2, #1
 80057d0:	dc01      	bgt.n	80057d6 <_printf_float+0x3ca>
 80057d2:	07db      	lsls	r3, r3, #31
 80057d4:	d538      	bpl.n	8005848 <_printf_float+0x43c>
 80057d6:	2301      	movs	r3, #1
 80057d8:	4642      	mov	r2, r8
 80057da:	4631      	mov	r1, r6
 80057dc:	4628      	mov	r0, r5
 80057de:	47b8      	blx	r7
 80057e0:	3001      	adds	r0, #1
 80057e2:	f43f ae74 	beq.w	80054ce <_printf_float+0xc2>
 80057e6:	ee18 3a10 	vmov	r3, s16
 80057ea:	4652      	mov	r2, sl
 80057ec:	4631      	mov	r1, r6
 80057ee:	4628      	mov	r0, r5
 80057f0:	47b8      	blx	r7
 80057f2:	3001      	adds	r0, #1
 80057f4:	f43f ae6b 	beq.w	80054ce <_printf_float+0xc2>
 80057f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057fc:	2200      	movs	r2, #0
 80057fe:	2300      	movs	r3, #0
 8005800:	f7fb f96a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005804:	b9d8      	cbnz	r0, 800583e <_printf_float+0x432>
 8005806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005808:	f108 0201 	add.w	r2, r8, #1
 800580c:	3b01      	subs	r3, #1
 800580e:	4631      	mov	r1, r6
 8005810:	4628      	mov	r0, r5
 8005812:	47b8      	blx	r7
 8005814:	3001      	adds	r0, #1
 8005816:	d10e      	bne.n	8005836 <_printf_float+0x42a>
 8005818:	e659      	b.n	80054ce <_printf_float+0xc2>
 800581a:	2301      	movs	r3, #1
 800581c:	4652      	mov	r2, sl
 800581e:	4631      	mov	r1, r6
 8005820:	4628      	mov	r0, r5
 8005822:	47b8      	blx	r7
 8005824:	3001      	adds	r0, #1
 8005826:	f43f ae52 	beq.w	80054ce <_printf_float+0xc2>
 800582a:	f108 0801 	add.w	r8, r8, #1
 800582e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005830:	3b01      	subs	r3, #1
 8005832:	4543      	cmp	r3, r8
 8005834:	dcf1      	bgt.n	800581a <_printf_float+0x40e>
 8005836:	464b      	mov	r3, r9
 8005838:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800583c:	e6dc      	b.n	80055f8 <_printf_float+0x1ec>
 800583e:	f04f 0800 	mov.w	r8, #0
 8005842:	f104 0a1a 	add.w	sl, r4, #26
 8005846:	e7f2      	b.n	800582e <_printf_float+0x422>
 8005848:	2301      	movs	r3, #1
 800584a:	4642      	mov	r2, r8
 800584c:	e7df      	b.n	800580e <_printf_float+0x402>
 800584e:	2301      	movs	r3, #1
 8005850:	464a      	mov	r2, r9
 8005852:	4631      	mov	r1, r6
 8005854:	4628      	mov	r0, r5
 8005856:	47b8      	blx	r7
 8005858:	3001      	adds	r0, #1
 800585a:	f43f ae38 	beq.w	80054ce <_printf_float+0xc2>
 800585e:	f108 0801 	add.w	r8, r8, #1
 8005862:	68e3      	ldr	r3, [r4, #12]
 8005864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005866:	1a5b      	subs	r3, r3, r1
 8005868:	4543      	cmp	r3, r8
 800586a:	dcf0      	bgt.n	800584e <_printf_float+0x442>
 800586c:	e6fa      	b.n	8005664 <_printf_float+0x258>
 800586e:	f04f 0800 	mov.w	r8, #0
 8005872:	f104 0919 	add.w	r9, r4, #25
 8005876:	e7f4      	b.n	8005862 <_printf_float+0x456>

08005878 <_printf_common>:
 8005878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800587c:	4616      	mov	r6, r2
 800587e:	4699      	mov	r9, r3
 8005880:	688a      	ldr	r2, [r1, #8]
 8005882:	690b      	ldr	r3, [r1, #16]
 8005884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005888:	4293      	cmp	r3, r2
 800588a:	bfb8      	it	lt
 800588c:	4613      	movlt	r3, r2
 800588e:	6033      	str	r3, [r6, #0]
 8005890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005894:	4607      	mov	r7, r0
 8005896:	460c      	mov	r4, r1
 8005898:	b10a      	cbz	r2, 800589e <_printf_common+0x26>
 800589a:	3301      	adds	r3, #1
 800589c:	6033      	str	r3, [r6, #0]
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	0699      	lsls	r1, r3, #26
 80058a2:	bf42      	ittt	mi
 80058a4:	6833      	ldrmi	r3, [r6, #0]
 80058a6:	3302      	addmi	r3, #2
 80058a8:	6033      	strmi	r3, [r6, #0]
 80058aa:	6825      	ldr	r5, [r4, #0]
 80058ac:	f015 0506 	ands.w	r5, r5, #6
 80058b0:	d106      	bne.n	80058c0 <_printf_common+0x48>
 80058b2:	f104 0a19 	add.w	sl, r4, #25
 80058b6:	68e3      	ldr	r3, [r4, #12]
 80058b8:	6832      	ldr	r2, [r6, #0]
 80058ba:	1a9b      	subs	r3, r3, r2
 80058bc:	42ab      	cmp	r3, r5
 80058be:	dc26      	bgt.n	800590e <_printf_common+0x96>
 80058c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058c4:	1e13      	subs	r3, r2, #0
 80058c6:	6822      	ldr	r2, [r4, #0]
 80058c8:	bf18      	it	ne
 80058ca:	2301      	movne	r3, #1
 80058cc:	0692      	lsls	r2, r2, #26
 80058ce:	d42b      	bmi.n	8005928 <_printf_common+0xb0>
 80058d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058d4:	4649      	mov	r1, r9
 80058d6:	4638      	mov	r0, r7
 80058d8:	47c0      	blx	r8
 80058da:	3001      	adds	r0, #1
 80058dc:	d01e      	beq.n	800591c <_printf_common+0xa4>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	68e5      	ldr	r5, [r4, #12]
 80058e2:	6832      	ldr	r2, [r6, #0]
 80058e4:	f003 0306 	and.w	r3, r3, #6
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	bf08      	it	eq
 80058ec:	1aad      	subeq	r5, r5, r2
 80058ee:	68a3      	ldr	r3, [r4, #8]
 80058f0:	6922      	ldr	r2, [r4, #16]
 80058f2:	bf0c      	ite	eq
 80058f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058f8:	2500      	movne	r5, #0
 80058fa:	4293      	cmp	r3, r2
 80058fc:	bfc4      	itt	gt
 80058fe:	1a9b      	subgt	r3, r3, r2
 8005900:	18ed      	addgt	r5, r5, r3
 8005902:	2600      	movs	r6, #0
 8005904:	341a      	adds	r4, #26
 8005906:	42b5      	cmp	r5, r6
 8005908:	d11a      	bne.n	8005940 <_printf_common+0xc8>
 800590a:	2000      	movs	r0, #0
 800590c:	e008      	b.n	8005920 <_printf_common+0xa8>
 800590e:	2301      	movs	r3, #1
 8005910:	4652      	mov	r2, sl
 8005912:	4649      	mov	r1, r9
 8005914:	4638      	mov	r0, r7
 8005916:	47c0      	blx	r8
 8005918:	3001      	adds	r0, #1
 800591a:	d103      	bne.n	8005924 <_printf_common+0xac>
 800591c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005924:	3501      	adds	r5, #1
 8005926:	e7c6      	b.n	80058b6 <_printf_common+0x3e>
 8005928:	18e1      	adds	r1, r4, r3
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	2030      	movs	r0, #48	; 0x30
 800592e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005932:	4422      	add	r2, r4
 8005934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800593c:	3302      	adds	r3, #2
 800593e:	e7c7      	b.n	80058d0 <_printf_common+0x58>
 8005940:	2301      	movs	r3, #1
 8005942:	4622      	mov	r2, r4
 8005944:	4649      	mov	r1, r9
 8005946:	4638      	mov	r0, r7
 8005948:	47c0      	blx	r8
 800594a:	3001      	adds	r0, #1
 800594c:	d0e6      	beq.n	800591c <_printf_common+0xa4>
 800594e:	3601      	adds	r6, #1
 8005950:	e7d9      	b.n	8005906 <_printf_common+0x8e>
	...

08005954 <_printf_i>:
 8005954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005958:	7e0f      	ldrb	r7, [r1, #24]
 800595a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800595c:	2f78      	cmp	r7, #120	; 0x78
 800595e:	4691      	mov	r9, r2
 8005960:	4680      	mov	r8, r0
 8005962:	460c      	mov	r4, r1
 8005964:	469a      	mov	sl, r3
 8005966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800596a:	d807      	bhi.n	800597c <_printf_i+0x28>
 800596c:	2f62      	cmp	r7, #98	; 0x62
 800596e:	d80a      	bhi.n	8005986 <_printf_i+0x32>
 8005970:	2f00      	cmp	r7, #0
 8005972:	f000 80d8 	beq.w	8005b26 <_printf_i+0x1d2>
 8005976:	2f58      	cmp	r7, #88	; 0x58
 8005978:	f000 80a3 	beq.w	8005ac2 <_printf_i+0x16e>
 800597c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005984:	e03a      	b.n	80059fc <_printf_i+0xa8>
 8005986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800598a:	2b15      	cmp	r3, #21
 800598c:	d8f6      	bhi.n	800597c <_printf_i+0x28>
 800598e:	a101      	add	r1, pc, #4	; (adr r1, 8005994 <_printf_i+0x40>)
 8005990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005994:	080059ed 	.word	0x080059ed
 8005998:	08005a01 	.word	0x08005a01
 800599c:	0800597d 	.word	0x0800597d
 80059a0:	0800597d 	.word	0x0800597d
 80059a4:	0800597d 	.word	0x0800597d
 80059a8:	0800597d 	.word	0x0800597d
 80059ac:	08005a01 	.word	0x08005a01
 80059b0:	0800597d 	.word	0x0800597d
 80059b4:	0800597d 	.word	0x0800597d
 80059b8:	0800597d 	.word	0x0800597d
 80059bc:	0800597d 	.word	0x0800597d
 80059c0:	08005b0d 	.word	0x08005b0d
 80059c4:	08005a31 	.word	0x08005a31
 80059c8:	08005aef 	.word	0x08005aef
 80059cc:	0800597d 	.word	0x0800597d
 80059d0:	0800597d 	.word	0x0800597d
 80059d4:	08005b2f 	.word	0x08005b2f
 80059d8:	0800597d 	.word	0x0800597d
 80059dc:	08005a31 	.word	0x08005a31
 80059e0:	0800597d 	.word	0x0800597d
 80059e4:	0800597d 	.word	0x0800597d
 80059e8:	08005af7 	.word	0x08005af7
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	1d1a      	adds	r2, r3, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	602a      	str	r2, [r5, #0]
 80059f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059fc:	2301      	movs	r3, #1
 80059fe:	e0a3      	b.n	8005b48 <_printf_i+0x1f4>
 8005a00:	6820      	ldr	r0, [r4, #0]
 8005a02:	6829      	ldr	r1, [r5, #0]
 8005a04:	0606      	lsls	r6, r0, #24
 8005a06:	f101 0304 	add.w	r3, r1, #4
 8005a0a:	d50a      	bpl.n	8005a22 <_printf_i+0xce>
 8005a0c:	680e      	ldr	r6, [r1, #0]
 8005a0e:	602b      	str	r3, [r5, #0]
 8005a10:	2e00      	cmp	r6, #0
 8005a12:	da03      	bge.n	8005a1c <_printf_i+0xc8>
 8005a14:	232d      	movs	r3, #45	; 0x2d
 8005a16:	4276      	negs	r6, r6
 8005a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a1c:	485e      	ldr	r0, [pc, #376]	; (8005b98 <_printf_i+0x244>)
 8005a1e:	230a      	movs	r3, #10
 8005a20:	e019      	b.n	8005a56 <_printf_i+0x102>
 8005a22:	680e      	ldr	r6, [r1, #0]
 8005a24:	602b      	str	r3, [r5, #0]
 8005a26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a2a:	bf18      	it	ne
 8005a2c:	b236      	sxthne	r6, r6
 8005a2e:	e7ef      	b.n	8005a10 <_printf_i+0xbc>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	6820      	ldr	r0, [r4, #0]
 8005a34:	1d19      	adds	r1, r3, #4
 8005a36:	6029      	str	r1, [r5, #0]
 8005a38:	0601      	lsls	r1, r0, #24
 8005a3a:	d501      	bpl.n	8005a40 <_printf_i+0xec>
 8005a3c:	681e      	ldr	r6, [r3, #0]
 8005a3e:	e002      	b.n	8005a46 <_printf_i+0xf2>
 8005a40:	0646      	lsls	r6, r0, #25
 8005a42:	d5fb      	bpl.n	8005a3c <_printf_i+0xe8>
 8005a44:	881e      	ldrh	r6, [r3, #0]
 8005a46:	4854      	ldr	r0, [pc, #336]	; (8005b98 <_printf_i+0x244>)
 8005a48:	2f6f      	cmp	r7, #111	; 0x6f
 8005a4a:	bf0c      	ite	eq
 8005a4c:	2308      	moveq	r3, #8
 8005a4e:	230a      	movne	r3, #10
 8005a50:	2100      	movs	r1, #0
 8005a52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a56:	6865      	ldr	r5, [r4, #4]
 8005a58:	60a5      	str	r5, [r4, #8]
 8005a5a:	2d00      	cmp	r5, #0
 8005a5c:	bfa2      	ittt	ge
 8005a5e:	6821      	ldrge	r1, [r4, #0]
 8005a60:	f021 0104 	bicge.w	r1, r1, #4
 8005a64:	6021      	strge	r1, [r4, #0]
 8005a66:	b90e      	cbnz	r6, 8005a6c <_printf_i+0x118>
 8005a68:	2d00      	cmp	r5, #0
 8005a6a:	d04d      	beq.n	8005b08 <_printf_i+0x1b4>
 8005a6c:	4615      	mov	r5, r2
 8005a6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a72:	fb03 6711 	mls	r7, r3, r1, r6
 8005a76:	5dc7      	ldrb	r7, [r0, r7]
 8005a78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a7c:	4637      	mov	r7, r6
 8005a7e:	42bb      	cmp	r3, r7
 8005a80:	460e      	mov	r6, r1
 8005a82:	d9f4      	bls.n	8005a6e <_printf_i+0x11a>
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d10b      	bne.n	8005aa0 <_printf_i+0x14c>
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	07de      	lsls	r6, r3, #31
 8005a8c:	d508      	bpl.n	8005aa0 <_printf_i+0x14c>
 8005a8e:	6923      	ldr	r3, [r4, #16]
 8005a90:	6861      	ldr	r1, [r4, #4]
 8005a92:	4299      	cmp	r1, r3
 8005a94:	bfde      	ittt	le
 8005a96:	2330      	movle	r3, #48	; 0x30
 8005a98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005aa0:	1b52      	subs	r2, r2, r5
 8005aa2:	6122      	str	r2, [r4, #16]
 8005aa4:	f8cd a000 	str.w	sl, [sp]
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	aa03      	add	r2, sp, #12
 8005aac:	4621      	mov	r1, r4
 8005aae:	4640      	mov	r0, r8
 8005ab0:	f7ff fee2 	bl	8005878 <_printf_common>
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	d14c      	bne.n	8005b52 <_printf_i+0x1fe>
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005abc:	b004      	add	sp, #16
 8005abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac2:	4835      	ldr	r0, [pc, #212]	; (8005b98 <_printf_i+0x244>)
 8005ac4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ac8:	6829      	ldr	r1, [r5, #0]
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ad0:	6029      	str	r1, [r5, #0]
 8005ad2:	061d      	lsls	r5, r3, #24
 8005ad4:	d514      	bpl.n	8005b00 <_printf_i+0x1ac>
 8005ad6:	07df      	lsls	r7, r3, #31
 8005ad8:	bf44      	itt	mi
 8005ada:	f043 0320 	orrmi.w	r3, r3, #32
 8005ade:	6023      	strmi	r3, [r4, #0]
 8005ae0:	b91e      	cbnz	r6, 8005aea <_printf_i+0x196>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	f023 0320 	bic.w	r3, r3, #32
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	2310      	movs	r3, #16
 8005aec:	e7b0      	b.n	8005a50 <_printf_i+0xfc>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	f043 0320 	orr.w	r3, r3, #32
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	2378      	movs	r3, #120	; 0x78
 8005af8:	4828      	ldr	r0, [pc, #160]	; (8005b9c <_printf_i+0x248>)
 8005afa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005afe:	e7e3      	b.n	8005ac8 <_printf_i+0x174>
 8005b00:	0659      	lsls	r1, r3, #25
 8005b02:	bf48      	it	mi
 8005b04:	b2b6      	uxthmi	r6, r6
 8005b06:	e7e6      	b.n	8005ad6 <_printf_i+0x182>
 8005b08:	4615      	mov	r5, r2
 8005b0a:	e7bb      	b.n	8005a84 <_printf_i+0x130>
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	6826      	ldr	r6, [r4, #0]
 8005b10:	6961      	ldr	r1, [r4, #20]
 8005b12:	1d18      	adds	r0, r3, #4
 8005b14:	6028      	str	r0, [r5, #0]
 8005b16:	0635      	lsls	r5, r6, #24
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	d501      	bpl.n	8005b20 <_printf_i+0x1cc>
 8005b1c:	6019      	str	r1, [r3, #0]
 8005b1e:	e002      	b.n	8005b26 <_printf_i+0x1d2>
 8005b20:	0670      	lsls	r0, r6, #25
 8005b22:	d5fb      	bpl.n	8005b1c <_printf_i+0x1c8>
 8005b24:	8019      	strh	r1, [r3, #0]
 8005b26:	2300      	movs	r3, #0
 8005b28:	6123      	str	r3, [r4, #16]
 8005b2a:	4615      	mov	r5, r2
 8005b2c:	e7ba      	b.n	8005aa4 <_printf_i+0x150>
 8005b2e:	682b      	ldr	r3, [r5, #0]
 8005b30:	1d1a      	adds	r2, r3, #4
 8005b32:	602a      	str	r2, [r5, #0]
 8005b34:	681d      	ldr	r5, [r3, #0]
 8005b36:	6862      	ldr	r2, [r4, #4]
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f7fa fb58 	bl	80001f0 <memchr>
 8005b40:	b108      	cbz	r0, 8005b46 <_printf_i+0x1f2>
 8005b42:	1b40      	subs	r0, r0, r5
 8005b44:	6060      	str	r0, [r4, #4]
 8005b46:	6863      	ldr	r3, [r4, #4]
 8005b48:	6123      	str	r3, [r4, #16]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b50:	e7a8      	b.n	8005aa4 <_printf_i+0x150>
 8005b52:	6923      	ldr	r3, [r4, #16]
 8005b54:	462a      	mov	r2, r5
 8005b56:	4649      	mov	r1, r9
 8005b58:	4640      	mov	r0, r8
 8005b5a:	47d0      	blx	sl
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d0ab      	beq.n	8005ab8 <_printf_i+0x164>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	079b      	lsls	r3, r3, #30
 8005b64:	d413      	bmi.n	8005b8e <_printf_i+0x23a>
 8005b66:	68e0      	ldr	r0, [r4, #12]
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	4298      	cmp	r0, r3
 8005b6c:	bfb8      	it	lt
 8005b6e:	4618      	movlt	r0, r3
 8005b70:	e7a4      	b.n	8005abc <_printf_i+0x168>
 8005b72:	2301      	movs	r3, #1
 8005b74:	4632      	mov	r2, r6
 8005b76:	4649      	mov	r1, r9
 8005b78:	4640      	mov	r0, r8
 8005b7a:	47d0      	blx	sl
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d09b      	beq.n	8005ab8 <_printf_i+0x164>
 8005b80:	3501      	adds	r5, #1
 8005b82:	68e3      	ldr	r3, [r4, #12]
 8005b84:	9903      	ldr	r1, [sp, #12]
 8005b86:	1a5b      	subs	r3, r3, r1
 8005b88:	42ab      	cmp	r3, r5
 8005b8a:	dcf2      	bgt.n	8005b72 <_printf_i+0x21e>
 8005b8c:	e7eb      	b.n	8005b66 <_printf_i+0x212>
 8005b8e:	2500      	movs	r5, #0
 8005b90:	f104 0619 	add.w	r6, r4, #25
 8005b94:	e7f5      	b.n	8005b82 <_printf_i+0x22e>
 8005b96:	bf00      	nop
 8005b98:	08008ab6 	.word	0x08008ab6
 8005b9c:	08008ac7 	.word	0x08008ac7

08005ba0 <_sbrk_r>:
 8005ba0:	b538      	push	{r3, r4, r5, lr}
 8005ba2:	4d06      	ldr	r5, [pc, #24]	; (8005bbc <_sbrk_r+0x1c>)
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	4608      	mov	r0, r1
 8005baa:	602b      	str	r3, [r5, #0]
 8005bac:	f002 ff1e 	bl	80089ec <_sbrk>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_sbrk_r+0x1a>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_sbrk_r+0x1a>
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	20000424 	.word	0x20000424

08005bc0 <__sread>:
 8005bc0:	b510      	push	{r4, lr}
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc8:	f001 faa6 	bl	8007118 <_read_r>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	bfab      	itete	ge
 8005bd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8005bd4:	181b      	addge	r3, r3, r0
 8005bd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bda:	bfac      	ite	ge
 8005bdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bde:	81a3      	strhlt	r3, [r4, #12]
 8005be0:	bd10      	pop	{r4, pc}

08005be2 <__swrite>:
 8005be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be6:	461f      	mov	r7, r3
 8005be8:	898b      	ldrh	r3, [r1, #12]
 8005bea:	05db      	lsls	r3, r3, #23
 8005bec:	4605      	mov	r5, r0
 8005bee:	460c      	mov	r4, r1
 8005bf0:	4616      	mov	r6, r2
 8005bf2:	d505      	bpl.n	8005c00 <__swrite+0x1e>
 8005bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f000 fec6 	bl	800698c <_lseek_r>
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c0a:	81a3      	strh	r3, [r4, #12]
 8005c0c:	4632      	mov	r2, r6
 8005c0e:	463b      	mov	r3, r7
 8005c10:	4628      	mov	r0, r5
 8005c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c16:	f000 b817 	b.w	8005c48 <_write_r>

08005c1a <__sseek>:
 8005c1a:	b510      	push	{r4, lr}
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c22:	f000 feb3 	bl	800698c <_lseek_r>
 8005c26:	1c43      	adds	r3, r0, #1
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	bf15      	itete	ne
 8005c2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c36:	81a3      	strheq	r3, [r4, #12]
 8005c38:	bf18      	it	ne
 8005c3a:	81a3      	strhne	r3, [r4, #12]
 8005c3c:	bd10      	pop	{r4, pc}

08005c3e <__sclose>:
 8005c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c42:	f000 b813 	b.w	8005c6c <_close_r>
	...

08005c48 <_write_r>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	4d07      	ldr	r5, [pc, #28]	; (8005c68 <_write_r+0x20>)
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	4608      	mov	r0, r1
 8005c50:	4611      	mov	r1, r2
 8005c52:	2200      	movs	r2, #0
 8005c54:	602a      	str	r2, [r5, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	f7fb fb85 	bl	8001366 <_write>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_write_r+0x1e>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_write_r+0x1e>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	20000424 	.word	0x20000424

08005c6c <_close_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4d06      	ldr	r5, [pc, #24]	; (8005c88 <_close_r+0x1c>)
 8005c70:	2300      	movs	r3, #0
 8005c72:	4604      	mov	r4, r0
 8005c74:	4608      	mov	r0, r1
 8005c76:	602b      	str	r3, [r5, #0]
 8005c78:	f7fb fb91 	bl	800139e <_close>
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d102      	bne.n	8005c86 <_close_r+0x1a>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	b103      	cbz	r3, 8005c86 <_close_r+0x1a>
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	bd38      	pop	{r3, r4, r5, pc}
 8005c88:	20000424 	.word	0x20000424

08005c8c <quorem>:
 8005c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c90:	6903      	ldr	r3, [r0, #16]
 8005c92:	690c      	ldr	r4, [r1, #16]
 8005c94:	42a3      	cmp	r3, r4
 8005c96:	4607      	mov	r7, r0
 8005c98:	f2c0 8081 	blt.w	8005d9e <quorem+0x112>
 8005c9c:	3c01      	subs	r4, #1
 8005c9e:	f101 0814 	add.w	r8, r1, #20
 8005ca2:	f100 0514 	add.w	r5, r0, #20
 8005ca6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005caa:	9301      	str	r3, [sp, #4]
 8005cac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005cbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cc4:	d331      	bcc.n	8005d2a <quorem+0x9e>
 8005cc6:	f04f 0e00 	mov.w	lr, #0
 8005cca:	4640      	mov	r0, r8
 8005ccc:	46ac      	mov	ip, r5
 8005cce:	46f2      	mov	sl, lr
 8005cd0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cd4:	b293      	uxth	r3, r2
 8005cd6:	fb06 e303 	mla	r3, r6, r3, lr
 8005cda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	ebaa 0303 	sub.w	r3, sl, r3
 8005ce4:	f8dc a000 	ldr.w	sl, [ip]
 8005ce8:	0c12      	lsrs	r2, r2, #16
 8005cea:	fa13 f38a 	uxtah	r3, r3, sl
 8005cee:	fb06 e202 	mla	r2, r6, r2, lr
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	9b00      	ldr	r3, [sp, #0]
 8005cf6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005cfa:	b292      	uxth	r2, r2
 8005cfc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d04:	f8bd 3000 	ldrh.w	r3, [sp]
 8005d08:	4581      	cmp	r9, r0
 8005d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d0e:	f84c 3b04 	str.w	r3, [ip], #4
 8005d12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d16:	d2db      	bcs.n	8005cd0 <quorem+0x44>
 8005d18:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d1c:	b92b      	cbnz	r3, 8005d2a <quorem+0x9e>
 8005d1e:	9b01      	ldr	r3, [sp, #4]
 8005d20:	3b04      	subs	r3, #4
 8005d22:	429d      	cmp	r5, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	d32e      	bcc.n	8005d86 <quorem+0xfa>
 8005d28:	613c      	str	r4, [r7, #16]
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	f001 f8dc 	bl	8006ee8 <__mcmp>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	db24      	blt.n	8005d7e <quorem+0xf2>
 8005d34:	3601      	adds	r6, #1
 8005d36:	4628      	mov	r0, r5
 8005d38:	f04f 0c00 	mov.w	ip, #0
 8005d3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d40:	f8d0 e000 	ldr.w	lr, [r0]
 8005d44:	b293      	uxth	r3, r2
 8005d46:	ebac 0303 	sub.w	r3, ip, r3
 8005d4a:	0c12      	lsrs	r2, r2, #16
 8005d4c:	fa13 f38e 	uxtah	r3, r3, lr
 8005d50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d5e:	45c1      	cmp	r9, r8
 8005d60:	f840 3b04 	str.w	r3, [r0], #4
 8005d64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d68:	d2e8      	bcs.n	8005d3c <quorem+0xb0>
 8005d6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d72:	b922      	cbnz	r2, 8005d7e <quorem+0xf2>
 8005d74:	3b04      	subs	r3, #4
 8005d76:	429d      	cmp	r5, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	d30a      	bcc.n	8005d92 <quorem+0x106>
 8005d7c:	613c      	str	r4, [r7, #16]
 8005d7e:	4630      	mov	r0, r6
 8005d80:	b003      	add	sp, #12
 8005d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	3b04      	subs	r3, #4
 8005d8a:	2a00      	cmp	r2, #0
 8005d8c:	d1cc      	bne.n	8005d28 <quorem+0x9c>
 8005d8e:	3c01      	subs	r4, #1
 8005d90:	e7c7      	b.n	8005d22 <quorem+0x96>
 8005d92:	6812      	ldr	r2, [r2, #0]
 8005d94:	3b04      	subs	r3, #4
 8005d96:	2a00      	cmp	r2, #0
 8005d98:	d1f0      	bne.n	8005d7c <quorem+0xf0>
 8005d9a:	3c01      	subs	r4, #1
 8005d9c:	e7eb      	b.n	8005d76 <quorem+0xea>
 8005d9e:	2000      	movs	r0, #0
 8005da0:	e7ee      	b.n	8005d80 <quorem+0xf4>
 8005da2:	0000      	movs	r0, r0
 8005da4:	0000      	movs	r0, r0
	...

08005da8 <_dtoa_r>:
 8005da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	ed2d 8b04 	vpush	{d8-d9}
 8005db0:	ec57 6b10 	vmov	r6, r7, d0
 8005db4:	b093      	sub	sp, #76	; 0x4c
 8005db6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005db8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005dbc:	9106      	str	r1, [sp, #24]
 8005dbe:	ee10 aa10 	vmov	sl, s0
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	9209      	str	r2, [sp, #36]	; 0x24
 8005dc6:	930c      	str	r3, [sp, #48]	; 0x30
 8005dc8:	46bb      	mov	fp, r7
 8005dca:	b975      	cbnz	r5, 8005dea <_dtoa_r+0x42>
 8005dcc:	2010      	movs	r0, #16
 8005dce:	f7ff f98d 	bl	80050ec <malloc>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	6260      	str	r0, [r4, #36]	; 0x24
 8005dd6:	b920      	cbnz	r0, 8005de2 <_dtoa_r+0x3a>
 8005dd8:	4ba7      	ldr	r3, [pc, #668]	; (8006078 <_dtoa_r+0x2d0>)
 8005dda:	21ea      	movs	r1, #234	; 0xea
 8005ddc:	48a7      	ldr	r0, [pc, #668]	; (800607c <_dtoa_r+0x2d4>)
 8005dde:	f001 f9ad 	bl	800713c <__assert_func>
 8005de2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005de6:	6005      	str	r5, [r0, #0]
 8005de8:	60c5      	str	r5, [r0, #12]
 8005dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dec:	6819      	ldr	r1, [r3, #0]
 8005dee:	b151      	cbz	r1, 8005e06 <_dtoa_r+0x5e>
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	604a      	str	r2, [r1, #4]
 8005df4:	2301      	movs	r3, #1
 8005df6:	4093      	lsls	r3, r2
 8005df8:	608b      	str	r3, [r1, #8]
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f000 fe32 	bl	8006a64 <_Bfree>
 8005e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	1e3b      	subs	r3, r7, #0
 8005e08:	bfaa      	itet	ge
 8005e0a:	2300      	movge	r3, #0
 8005e0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005e10:	f8c8 3000 	strge.w	r3, [r8]
 8005e14:	4b9a      	ldr	r3, [pc, #616]	; (8006080 <_dtoa_r+0x2d8>)
 8005e16:	bfbc      	itt	lt
 8005e18:	2201      	movlt	r2, #1
 8005e1a:	f8c8 2000 	strlt.w	r2, [r8]
 8005e1e:	ea33 030b 	bics.w	r3, r3, fp
 8005e22:	d11b      	bne.n	8005e5c <_dtoa_r+0xb4>
 8005e24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e26:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e30:	4333      	orrs	r3, r6
 8005e32:	f000 8592 	beq.w	800695a <_dtoa_r+0xbb2>
 8005e36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e38:	b963      	cbnz	r3, 8005e54 <_dtoa_r+0xac>
 8005e3a:	4b92      	ldr	r3, [pc, #584]	; (8006084 <_dtoa_r+0x2dc>)
 8005e3c:	e022      	b.n	8005e84 <_dtoa_r+0xdc>
 8005e3e:	4b92      	ldr	r3, [pc, #584]	; (8006088 <_dtoa_r+0x2e0>)
 8005e40:	9301      	str	r3, [sp, #4]
 8005e42:	3308      	adds	r3, #8
 8005e44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	9801      	ldr	r0, [sp, #4]
 8005e4a:	b013      	add	sp, #76	; 0x4c
 8005e4c:	ecbd 8b04 	vpop	{d8-d9}
 8005e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e54:	4b8b      	ldr	r3, [pc, #556]	; (8006084 <_dtoa_r+0x2dc>)
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	3303      	adds	r3, #3
 8005e5a:	e7f3      	b.n	8005e44 <_dtoa_r+0x9c>
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2300      	movs	r3, #0
 8005e60:	4650      	mov	r0, sl
 8005e62:	4659      	mov	r1, fp
 8005e64:	f7fa fe38 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e68:	ec4b ab19 	vmov	d9, sl, fp
 8005e6c:	4680      	mov	r8, r0
 8005e6e:	b158      	cbz	r0, 8005e88 <_dtoa_r+0xe0>
 8005e70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e72:	2301      	movs	r3, #1
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 856b 	beq.w	8006954 <_dtoa_r+0xbac>
 8005e7e:	4883      	ldr	r0, [pc, #524]	; (800608c <_dtoa_r+0x2e4>)
 8005e80:	6018      	str	r0, [r3, #0]
 8005e82:	1e43      	subs	r3, r0, #1
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	e7df      	b.n	8005e48 <_dtoa_r+0xa0>
 8005e88:	ec4b ab10 	vmov	d0, sl, fp
 8005e8c:	aa10      	add	r2, sp, #64	; 0x40
 8005e8e:	a911      	add	r1, sp, #68	; 0x44
 8005e90:	4620      	mov	r0, r4
 8005e92:	f001 f8cf 	bl	8007034 <__d2b>
 8005e96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005e9a:	ee08 0a10 	vmov	s16, r0
 8005e9e:	2d00      	cmp	r5, #0
 8005ea0:	f000 8084 	beq.w	8005fac <_dtoa_r+0x204>
 8005ea4:	ee19 3a90 	vmov	r3, s19
 8005ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005eb0:	4656      	mov	r6, sl
 8005eb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005eb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005eba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005ebe:	4b74      	ldr	r3, [pc, #464]	; (8006090 <_dtoa_r+0x2e8>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	4639      	mov	r1, r7
 8005ec6:	f7fa f9e7 	bl	8000298 <__aeabi_dsub>
 8005eca:	a365      	add	r3, pc, #404	; (adr r3, 8006060 <_dtoa_r+0x2b8>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f7fa fb9a 	bl	8000608 <__aeabi_dmul>
 8005ed4:	a364      	add	r3, pc, #400	; (adr r3, 8006068 <_dtoa_r+0x2c0>)
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f7fa f9df 	bl	800029c <__adddf3>
 8005ede:	4606      	mov	r6, r0
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	460f      	mov	r7, r1
 8005ee4:	f7fa fb26 	bl	8000534 <__aeabi_i2d>
 8005ee8:	a361      	add	r3, pc, #388	; (adr r3, 8006070 <_dtoa_r+0x2c8>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa fb8b 	bl	8000608 <__aeabi_dmul>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	4639      	mov	r1, r7
 8005efa:	f7fa f9cf 	bl	800029c <__adddf3>
 8005efe:	4606      	mov	r6, r0
 8005f00:	460f      	mov	r7, r1
 8005f02:	f7fa fe31 	bl	8000b68 <__aeabi_d2iz>
 8005f06:	2200      	movs	r2, #0
 8005f08:	9000      	str	r0, [sp, #0]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	4639      	mov	r1, r7
 8005f10:	f7fa fdec 	bl	8000aec <__aeabi_dcmplt>
 8005f14:	b150      	cbz	r0, 8005f2c <_dtoa_r+0x184>
 8005f16:	9800      	ldr	r0, [sp, #0]
 8005f18:	f7fa fb0c 	bl	8000534 <__aeabi_i2d>
 8005f1c:	4632      	mov	r2, r6
 8005f1e:	463b      	mov	r3, r7
 8005f20:	f7fa fdda 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f24:	b910      	cbnz	r0, 8005f2c <_dtoa_r+0x184>
 8005f26:	9b00      	ldr	r3, [sp, #0]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	9b00      	ldr	r3, [sp, #0]
 8005f2e:	2b16      	cmp	r3, #22
 8005f30:	d85a      	bhi.n	8005fe8 <_dtoa_r+0x240>
 8005f32:	9a00      	ldr	r2, [sp, #0]
 8005f34:	4b57      	ldr	r3, [pc, #348]	; (8006094 <_dtoa_r+0x2ec>)
 8005f36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	ec51 0b19 	vmov	r0, r1, d9
 8005f42:	f7fa fdd3 	bl	8000aec <__aeabi_dcmplt>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d050      	beq.n	8005fec <_dtoa_r+0x244>
 8005f4a:	9b00      	ldr	r3, [sp, #0]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	2300      	movs	r3, #0
 8005f52:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f56:	1b5d      	subs	r5, r3, r5
 8005f58:	1e6b      	subs	r3, r5, #1
 8005f5a:	9305      	str	r3, [sp, #20]
 8005f5c:	bf45      	ittet	mi
 8005f5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f62:	9304      	strmi	r3, [sp, #16]
 8005f64:	2300      	movpl	r3, #0
 8005f66:	2300      	movmi	r3, #0
 8005f68:	bf4c      	ite	mi
 8005f6a:	9305      	strmi	r3, [sp, #20]
 8005f6c:	9304      	strpl	r3, [sp, #16]
 8005f6e:	9b00      	ldr	r3, [sp, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	db3d      	blt.n	8005ff0 <_dtoa_r+0x248>
 8005f74:	9b05      	ldr	r3, [sp, #20]
 8005f76:	9a00      	ldr	r2, [sp, #0]
 8005f78:	920a      	str	r2, [sp, #40]	; 0x28
 8005f7a:	4413      	add	r3, r2
 8005f7c:	9305      	str	r3, [sp, #20]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	9307      	str	r3, [sp, #28]
 8005f82:	9b06      	ldr	r3, [sp, #24]
 8005f84:	2b09      	cmp	r3, #9
 8005f86:	f200 8089 	bhi.w	800609c <_dtoa_r+0x2f4>
 8005f8a:	2b05      	cmp	r3, #5
 8005f8c:	bfc4      	itt	gt
 8005f8e:	3b04      	subgt	r3, #4
 8005f90:	9306      	strgt	r3, [sp, #24]
 8005f92:	9b06      	ldr	r3, [sp, #24]
 8005f94:	f1a3 0302 	sub.w	r3, r3, #2
 8005f98:	bfcc      	ite	gt
 8005f9a:	2500      	movgt	r5, #0
 8005f9c:	2501      	movle	r5, #1
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	f200 8087 	bhi.w	80060b2 <_dtoa_r+0x30a>
 8005fa4:	e8df f003 	tbb	[pc, r3]
 8005fa8:	59383a2d 	.word	0x59383a2d
 8005fac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005fb0:	441d      	add	r5, r3
 8005fb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	bfc1      	itttt	gt
 8005fba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005fbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005fc2:	fa0b f303 	lslgt.w	r3, fp, r3
 8005fc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005fca:	bfda      	itte	le
 8005fcc:	f1c3 0320 	rsble	r3, r3, #32
 8005fd0:	fa06 f003 	lslle.w	r0, r6, r3
 8005fd4:	4318      	orrgt	r0, r3
 8005fd6:	f7fa fa9d 	bl	8000514 <__aeabi_ui2d>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4606      	mov	r6, r0
 8005fde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005fe2:	3d01      	subs	r5, #1
 8005fe4:	930e      	str	r3, [sp, #56]	; 0x38
 8005fe6:	e76a      	b.n	8005ebe <_dtoa_r+0x116>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e7b2      	b.n	8005f52 <_dtoa_r+0x1aa>
 8005fec:	900b      	str	r0, [sp, #44]	; 0x2c
 8005fee:	e7b1      	b.n	8005f54 <_dtoa_r+0x1ac>
 8005ff0:	9b04      	ldr	r3, [sp, #16]
 8005ff2:	9a00      	ldr	r2, [sp, #0]
 8005ff4:	1a9b      	subs	r3, r3, r2
 8005ff6:	9304      	str	r3, [sp, #16]
 8005ff8:	4253      	negs	r3, r2
 8005ffa:	9307      	str	r3, [sp, #28]
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8006000:	e7bf      	b.n	8005f82 <_dtoa_r+0x1da>
 8006002:	2300      	movs	r3, #0
 8006004:	9308      	str	r3, [sp, #32]
 8006006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006008:	2b00      	cmp	r3, #0
 800600a:	dc55      	bgt.n	80060b8 <_dtoa_r+0x310>
 800600c:	2301      	movs	r3, #1
 800600e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006012:	461a      	mov	r2, r3
 8006014:	9209      	str	r2, [sp, #36]	; 0x24
 8006016:	e00c      	b.n	8006032 <_dtoa_r+0x28a>
 8006018:	2301      	movs	r3, #1
 800601a:	e7f3      	b.n	8006004 <_dtoa_r+0x25c>
 800601c:	2300      	movs	r3, #0
 800601e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006020:	9308      	str	r3, [sp, #32]
 8006022:	9b00      	ldr	r3, [sp, #0]
 8006024:	4413      	add	r3, r2
 8006026:	9302      	str	r3, [sp, #8]
 8006028:	3301      	adds	r3, #1
 800602a:	2b01      	cmp	r3, #1
 800602c:	9303      	str	r3, [sp, #12]
 800602e:	bfb8      	it	lt
 8006030:	2301      	movlt	r3, #1
 8006032:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006034:	2200      	movs	r2, #0
 8006036:	6042      	str	r2, [r0, #4]
 8006038:	2204      	movs	r2, #4
 800603a:	f102 0614 	add.w	r6, r2, #20
 800603e:	429e      	cmp	r6, r3
 8006040:	6841      	ldr	r1, [r0, #4]
 8006042:	d93d      	bls.n	80060c0 <_dtoa_r+0x318>
 8006044:	4620      	mov	r0, r4
 8006046:	f000 fccd 	bl	80069e4 <_Balloc>
 800604a:	9001      	str	r0, [sp, #4]
 800604c:	2800      	cmp	r0, #0
 800604e:	d13b      	bne.n	80060c8 <_dtoa_r+0x320>
 8006050:	4b11      	ldr	r3, [pc, #68]	; (8006098 <_dtoa_r+0x2f0>)
 8006052:	4602      	mov	r2, r0
 8006054:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006058:	e6c0      	b.n	8005ddc <_dtoa_r+0x34>
 800605a:	2301      	movs	r3, #1
 800605c:	e7df      	b.n	800601e <_dtoa_r+0x276>
 800605e:	bf00      	nop
 8006060:	636f4361 	.word	0x636f4361
 8006064:	3fd287a7 	.word	0x3fd287a7
 8006068:	8b60c8b3 	.word	0x8b60c8b3
 800606c:	3fc68a28 	.word	0x3fc68a28
 8006070:	509f79fb 	.word	0x509f79fb
 8006074:	3fd34413 	.word	0x3fd34413
 8006078:	08008ae5 	.word	0x08008ae5
 800607c:	08008afc 	.word	0x08008afc
 8006080:	7ff00000 	.word	0x7ff00000
 8006084:	08008ae1 	.word	0x08008ae1
 8006088:	08008ad8 	.word	0x08008ad8
 800608c:	08008ab5 	.word	0x08008ab5
 8006090:	3ff80000 	.word	0x3ff80000
 8006094:	08008bf0 	.word	0x08008bf0
 8006098:	08008b57 	.word	0x08008b57
 800609c:	2501      	movs	r5, #1
 800609e:	2300      	movs	r3, #0
 80060a0:	9306      	str	r3, [sp, #24]
 80060a2:	9508      	str	r5, [sp, #32]
 80060a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060ac:	2200      	movs	r2, #0
 80060ae:	2312      	movs	r3, #18
 80060b0:	e7b0      	b.n	8006014 <_dtoa_r+0x26c>
 80060b2:	2301      	movs	r3, #1
 80060b4:	9308      	str	r3, [sp, #32]
 80060b6:	e7f5      	b.n	80060a4 <_dtoa_r+0x2fc>
 80060b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060be:	e7b8      	b.n	8006032 <_dtoa_r+0x28a>
 80060c0:	3101      	adds	r1, #1
 80060c2:	6041      	str	r1, [r0, #4]
 80060c4:	0052      	lsls	r2, r2, #1
 80060c6:	e7b8      	b.n	800603a <_dtoa_r+0x292>
 80060c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060ca:	9a01      	ldr	r2, [sp, #4]
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	9b03      	ldr	r3, [sp, #12]
 80060d0:	2b0e      	cmp	r3, #14
 80060d2:	f200 809d 	bhi.w	8006210 <_dtoa_r+0x468>
 80060d6:	2d00      	cmp	r5, #0
 80060d8:	f000 809a 	beq.w	8006210 <_dtoa_r+0x468>
 80060dc:	9b00      	ldr	r3, [sp, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	dd32      	ble.n	8006148 <_dtoa_r+0x3a0>
 80060e2:	4ab7      	ldr	r2, [pc, #732]	; (80063c0 <_dtoa_r+0x618>)
 80060e4:	f003 030f 	and.w	r3, r3, #15
 80060e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060f0:	9b00      	ldr	r3, [sp, #0]
 80060f2:	05d8      	lsls	r0, r3, #23
 80060f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80060f8:	d516      	bpl.n	8006128 <_dtoa_r+0x380>
 80060fa:	4bb2      	ldr	r3, [pc, #712]	; (80063c4 <_dtoa_r+0x61c>)
 80060fc:	ec51 0b19 	vmov	r0, r1, d9
 8006100:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006104:	f7fa fbaa 	bl	800085c <__aeabi_ddiv>
 8006108:	f007 070f 	and.w	r7, r7, #15
 800610c:	4682      	mov	sl, r0
 800610e:	468b      	mov	fp, r1
 8006110:	2503      	movs	r5, #3
 8006112:	4eac      	ldr	r6, [pc, #688]	; (80063c4 <_dtoa_r+0x61c>)
 8006114:	b957      	cbnz	r7, 800612c <_dtoa_r+0x384>
 8006116:	4642      	mov	r2, r8
 8006118:	464b      	mov	r3, r9
 800611a:	4650      	mov	r0, sl
 800611c:	4659      	mov	r1, fp
 800611e:	f7fa fb9d 	bl	800085c <__aeabi_ddiv>
 8006122:	4682      	mov	sl, r0
 8006124:	468b      	mov	fp, r1
 8006126:	e028      	b.n	800617a <_dtoa_r+0x3d2>
 8006128:	2502      	movs	r5, #2
 800612a:	e7f2      	b.n	8006112 <_dtoa_r+0x36a>
 800612c:	07f9      	lsls	r1, r7, #31
 800612e:	d508      	bpl.n	8006142 <_dtoa_r+0x39a>
 8006130:	4640      	mov	r0, r8
 8006132:	4649      	mov	r1, r9
 8006134:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006138:	f7fa fa66 	bl	8000608 <__aeabi_dmul>
 800613c:	3501      	adds	r5, #1
 800613e:	4680      	mov	r8, r0
 8006140:	4689      	mov	r9, r1
 8006142:	107f      	asrs	r7, r7, #1
 8006144:	3608      	adds	r6, #8
 8006146:	e7e5      	b.n	8006114 <_dtoa_r+0x36c>
 8006148:	f000 809b 	beq.w	8006282 <_dtoa_r+0x4da>
 800614c:	9b00      	ldr	r3, [sp, #0]
 800614e:	4f9d      	ldr	r7, [pc, #628]	; (80063c4 <_dtoa_r+0x61c>)
 8006150:	425e      	negs	r6, r3
 8006152:	4b9b      	ldr	r3, [pc, #620]	; (80063c0 <_dtoa_r+0x618>)
 8006154:	f006 020f 	and.w	r2, r6, #15
 8006158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	ec51 0b19 	vmov	r0, r1, d9
 8006164:	f7fa fa50 	bl	8000608 <__aeabi_dmul>
 8006168:	1136      	asrs	r6, r6, #4
 800616a:	4682      	mov	sl, r0
 800616c:	468b      	mov	fp, r1
 800616e:	2300      	movs	r3, #0
 8006170:	2502      	movs	r5, #2
 8006172:	2e00      	cmp	r6, #0
 8006174:	d17a      	bne.n	800626c <_dtoa_r+0x4c4>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1d3      	bne.n	8006122 <_dtoa_r+0x37a>
 800617a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 8082 	beq.w	8006286 <_dtoa_r+0x4de>
 8006182:	4b91      	ldr	r3, [pc, #580]	; (80063c8 <_dtoa_r+0x620>)
 8006184:	2200      	movs	r2, #0
 8006186:	4650      	mov	r0, sl
 8006188:	4659      	mov	r1, fp
 800618a:	f7fa fcaf 	bl	8000aec <__aeabi_dcmplt>
 800618e:	2800      	cmp	r0, #0
 8006190:	d079      	beq.n	8006286 <_dtoa_r+0x4de>
 8006192:	9b03      	ldr	r3, [sp, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d076      	beq.n	8006286 <_dtoa_r+0x4de>
 8006198:	9b02      	ldr	r3, [sp, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	dd36      	ble.n	800620c <_dtoa_r+0x464>
 800619e:	9b00      	ldr	r3, [sp, #0]
 80061a0:	4650      	mov	r0, sl
 80061a2:	4659      	mov	r1, fp
 80061a4:	1e5f      	subs	r7, r3, #1
 80061a6:	2200      	movs	r2, #0
 80061a8:	4b88      	ldr	r3, [pc, #544]	; (80063cc <_dtoa_r+0x624>)
 80061aa:	f7fa fa2d 	bl	8000608 <__aeabi_dmul>
 80061ae:	9e02      	ldr	r6, [sp, #8]
 80061b0:	4682      	mov	sl, r0
 80061b2:	468b      	mov	fp, r1
 80061b4:	3501      	adds	r5, #1
 80061b6:	4628      	mov	r0, r5
 80061b8:	f7fa f9bc 	bl	8000534 <__aeabi_i2d>
 80061bc:	4652      	mov	r2, sl
 80061be:	465b      	mov	r3, fp
 80061c0:	f7fa fa22 	bl	8000608 <__aeabi_dmul>
 80061c4:	4b82      	ldr	r3, [pc, #520]	; (80063d0 <_dtoa_r+0x628>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	f7fa f868 	bl	800029c <__adddf3>
 80061cc:	46d0      	mov	r8, sl
 80061ce:	46d9      	mov	r9, fp
 80061d0:	4682      	mov	sl, r0
 80061d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	d158      	bne.n	800628c <_dtoa_r+0x4e4>
 80061da:	4b7e      	ldr	r3, [pc, #504]	; (80063d4 <_dtoa_r+0x62c>)
 80061dc:	2200      	movs	r2, #0
 80061de:	4640      	mov	r0, r8
 80061e0:	4649      	mov	r1, r9
 80061e2:	f7fa f859 	bl	8000298 <__aeabi_dsub>
 80061e6:	4652      	mov	r2, sl
 80061e8:	465b      	mov	r3, fp
 80061ea:	4680      	mov	r8, r0
 80061ec:	4689      	mov	r9, r1
 80061ee:	f7fa fc9b 	bl	8000b28 <__aeabi_dcmpgt>
 80061f2:	2800      	cmp	r0, #0
 80061f4:	f040 8295 	bne.w	8006722 <_dtoa_r+0x97a>
 80061f8:	4652      	mov	r2, sl
 80061fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80061fe:	4640      	mov	r0, r8
 8006200:	4649      	mov	r1, r9
 8006202:	f7fa fc73 	bl	8000aec <__aeabi_dcmplt>
 8006206:	2800      	cmp	r0, #0
 8006208:	f040 8289 	bne.w	800671e <_dtoa_r+0x976>
 800620c:	ec5b ab19 	vmov	sl, fp, d9
 8006210:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006212:	2b00      	cmp	r3, #0
 8006214:	f2c0 8148 	blt.w	80064a8 <_dtoa_r+0x700>
 8006218:	9a00      	ldr	r2, [sp, #0]
 800621a:	2a0e      	cmp	r2, #14
 800621c:	f300 8144 	bgt.w	80064a8 <_dtoa_r+0x700>
 8006220:	4b67      	ldr	r3, [pc, #412]	; (80063c0 <_dtoa_r+0x618>)
 8006222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006226:	e9d3 8900 	ldrd	r8, r9, [r3]
 800622a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622c:	2b00      	cmp	r3, #0
 800622e:	f280 80d5 	bge.w	80063dc <_dtoa_r+0x634>
 8006232:	9b03      	ldr	r3, [sp, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	f300 80d1 	bgt.w	80063dc <_dtoa_r+0x634>
 800623a:	f040 826f 	bne.w	800671c <_dtoa_r+0x974>
 800623e:	4b65      	ldr	r3, [pc, #404]	; (80063d4 <_dtoa_r+0x62c>)
 8006240:	2200      	movs	r2, #0
 8006242:	4640      	mov	r0, r8
 8006244:	4649      	mov	r1, r9
 8006246:	f7fa f9df 	bl	8000608 <__aeabi_dmul>
 800624a:	4652      	mov	r2, sl
 800624c:	465b      	mov	r3, fp
 800624e:	f7fa fc61 	bl	8000b14 <__aeabi_dcmpge>
 8006252:	9e03      	ldr	r6, [sp, #12]
 8006254:	4637      	mov	r7, r6
 8006256:	2800      	cmp	r0, #0
 8006258:	f040 8245 	bne.w	80066e6 <_dtoa_r+0x93e>
 800625c:	9d01      	ldr	r5, [sp, #4]
 800625e:	2331      	movs	r3, #49	; 0x31
 8006260:	f805 3b01 	strb.w	r3, [r5], #1
 8006264:	9b00      	ldr	r3, [sp, #0]
 8006266:	3301      	adds	r3, #1
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	e240      	b.n	80066ee <_dtoa_r+0x946>
 800626c:	07f2      	lsls	r2, r6, #31
 800626e:	d505      	bpl.n	800627c <_dtoa_r+0x4d4>
 8006270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006274:	f7fa f9c8 	bl	8000608 <__aeabi_dmul>
 8006278:	3501      	adds	r5, #1
 800627a:	2301      	movs	r3, #1
 800627c:	1076      	asrs	r6, r6, #1
 800627e:	3708      	adds	r7, #8
 8006280:	e777      	b.n	8006172 <_dtoa_r+0x3ca>
 8006282:	2502      	movs	r5, #2
 8006284:	e779      	b.n	800617a <_dtoa_r+0x3d2>
 8006286:	9f00      	ldr	r7, [sp, #0]
 8006288:	9e03      	ldr	r6, [sp, #12]
 800628a:	e794      	b.n	80061b6 <_dtoa_r+0x40e>
 800628c:	9901      	ldr	r1, [sp, #4]
 800628e:	4b4c      	ldr	r3, [pc, #304]	; (80063c0 <_dtoa_r+0x618>)
 8006290:	4431      	add	r1, r6
 8006292:	910d      	str	r1, [sp, #52]	; 0x34
 8006294:	9908      	ldr	r1, [sp, #32]
 8006296:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800629a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800629e:	2900      	cmp	r1, #0
 80062a0:	d043      	beq.n	800632a <_dtoa_r+0x582>
 80062a2:	494d      	ldr	r1, [pc, #308]	; (80063d8 <_dtoa_r+0x630>)
 80062a4:	2000      	movs	r0, #0
 80062a6:	f7fa fad9 	bl	800085c <__aeabi_ddiv>
 80062aa:	4652      	mov	r2, sl
 80062ac:	465b      	mov	r3, fp
 80062ae:	f7f9 fff3 	bl	8000298 <__aeabi_dsub>
 80062b2:	9d01      	ldr	r5, [sp, #4]
 80062b4:	4682      	mov	sl, r0
 80062b6:	468b      	mov	fp, r1
 80062b8:	4649      	mov	r1, r9
 80062ba:	4640      	mov	r0, r8
 80062bc:	f7fa fc54 	bl	8000b68 <__aeabi_d2iz>
 80062c0:	4606      	mov	r6, r0
 80062c2:	f7fa f937 	bl	8000534 <__aeabi_i2d>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4640      	mov	r0, r8
 80062cc:	4649      	mov	r1, r9
 80062ce:	f7f9 ffe3 	bl	8000298 <__aeabi_dsub>
 80062d2:	3630      	adds	r6, #48	; 0x30
 80062d4:	f805 6b01 	strb.w	r6, [r5], #1
 80062d8:	4652      	mov	r2, sl
 80062da:	465b      	mov	r3, fp
 80062dc:	4680      	mov	r8, r0
 80062de:	4689      	mov	r9, r1
 80062e0:	f7fa fc04 	bl	8000aec <__aeabi_dcmplt>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d163      	bne.n	80063b0 <_dtoa_r+0x608>
 80062e8:	4642      	mov	r2, r8
 80062ea:	464b      	mov	r3, r9
 80062ec:	4936      	ldr	r1, [pc, #216]	; (80063c8 <_dtoa_r+0x620>)
 80062ee:	2000      	movs	r0, #0
 80062f0:	f7f9 ffd2 	bl	8000298 <__aeabi_dsub>
 80062f4:	4652      	mov	r2, sl
 80062f6:	465b      	mov	r3, fp
 80062f8:	f7fa fbf8 	bl	8000aec <__aeabi_dcmplt>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	f040 80b5 	bne.w	800646c <_dtoa_r+0x6c4>
 8006302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006304:	429d      	cmp	r5, r3
 8006306:	d081      	beq.n	800620c <_dtoa_r+0x464>
 8006308:	4b30      	ldr	r3, [pc, #192]	; (80063cc <_dtoa_r+0x624>)
 800630a:	2200      	movs	r2, #0
 800630c:	4650      	mov	r0, sl
 800630e:	4659      	mov	r1, fp
 8006310:	f7fa f97a 	bl	8000608 <__aeabi_dmul>
 8006314:	4b2d      	ldr	r3, [pc, #180]	; (80063cc <_dtoa_r+0x624>)
 8006316:	4682      	mov	sl, r0
 8006318:	468b      	mov	fp, r1
 800631a:	4640      	mov	r0, r8
 800631c:	4649      	mov	r1, r9
 800631e:	2200      	movs	r2, #0
 8006320:	f7fa f972 	bl	8000608 <__aeabi_dmul>
 8006324:	4680      	mov	r8, r0
 8006326:	4689      	mov	r9, r1
 8006328:	e7c6      	b.n	80062b8 <_dtoa_r+0x510>
 800632a:	4650      	mov	r0, sl
 800632c:	4659      	mov	r1, fp
 800632e:	f7fa f96b 	bl	8000608 <__aeabi_dmul>
 8006332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006334:	9d01      	ldr	r5, [sp, #4]
 8006336:	930f      	str	r3, [sp, #60]	; 0x3c
 8006338:	4682      	mov	sl, r0
 800633a:	468b      	mov	fp, r1
 800633c:	4649      	mov	r1, r9
 800633e:	4640      	mov	r0, r8
 8006340:	f7fa fc12 	bl	8000b68 <__aeabi_d2iz>
 8006344:	4606      	mov	r6, r0
 8006346:	f7fa f8f5 	bl	8000534 <__aeabi_i2d>
 800634a:	3630      	adds	r6, #48	; 0x30
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4640      	mov	r0, r8
 8006352:	4649      	mov	r1, r9
 8006354:	f7f9 ffa0 	bl	8000298 <__aeabi_dsub>
 8006358:	f805 6b01 	strb.w	r6, [r5], #1
 800635c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800635e:	429d      	cmp	r5, r3
 8006360:	4680      	mov	r8, r0
 8006362:	4689      	mov	r9, r1
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	d124      	bne.n	80063b4 <_dtoa_r+0x60c>
 800636a:	4b1b      	ldr	r3, [pc, #108]	; (80063d8 <_dtoa_r+0x630>)
 800636c:	4650      	mov	r0, sl
 800636e:	4659      	mov	r1, fp
 8006370:	f7f9 ff94 	bl	800029c <__adddf3>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4640      	mov	r0, r8
 800637a:	4649      	mov	r1, r9
 800637c:	f7fa fbd4 	bl	8000b28 <__aeabi_dcmpgt>
 8006380:	2800      	cmp	r0, #0
 8006382:	d173      	bne.n	800646c <_dtoa_r+0x6c4>
 8006384:	4652      	mov	r2, sl
 8006386:	465b      	mov	r3, fp
 8006388:	4913      	ldr	r1, [pc, #76]	; (80063d8 <_dtoa_r+0x630>)
 800638a:	2000      	movs	r0, #0
 800638c:	f7f9 ff84 	bl	8000298 <__aeabi_dsub>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4640      	mov	r0, r8
 8006396:	4649      	mov	r1, r9
 8006398:	f7fa fba8 	bl	8000aec <__aeabi_dcmplt>
 800639c:	2800      	cmp	r0, #0
 800639e:	f43f af35 	beq.w	800620c <_dtoa_r+0x464>
 80063a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80063a4:	1e6b      	subs	r3, r5, #1
 80063a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80063a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063ac:	2b30      	cmp	r3, #48	; 0x30
 80063ae:	d0f8      	beq.n	80063a2 <_dtoa_r+0x5fa>
 80063b0:	9700      	str	r7, [sp, #0]
 80063b2:	e049      	b.n	8006448 <_dtoa_r+0x6a0>
 80063b4:	4b05      	ldr	r3, [pc, #20]	; (80063cc <_dtoa_r+0x624>)
 80063b6:	f7fa f927 	bl	8000608 <__aeabi_dmul>
 80063ba:	4680      	mov	r8, r0
 80063bc:	4689      	mov	r9, r1
 80063be:	e7bd      	b.n	800633c <_dtoa_r+0x594>
 80063c0:	08008bf0 	.word	0x08008bf0
 80063c4:	08008bc8 	.word	0x08008bc8
 80063c8:	3ff00000 	.word	0x3ff00000
 80063cc:	40240000 	.word	0x40240000
 80063d0:	401c0000 	.word	0x401c0000
 80063d4:	40140000 	.word	0x40140000
 80063d8:	3fe00000 	.word	0x3fe00000
 80063dc:	9d01      	ldr	r5, [sp, #4]
 80063de:	4656      	mov	r6, sl
 80063e0:	465f      	mov	r7, fp
 80063e2:	4642      	mov	r2, r8
 80063e4:	464b      	mov	r3, r9
 80063e6:	4630      	mov	r0, r6
 80063e8:	4639      	mov	r1, r7
 80063ea:	f7fa fa37 	bl	800085c <__aeabi_ddiv>
 80063ee:	f7fa fbbb 	bl	8000b68 <__aeabi_d2iz>
 80063f2:	4682      	mov	sl, r0
 80063f4:	f7fa f89e 	bl	8000534 <__aeabi_i2d>
 80063f8:	4642      	mov	r2, r8
 80063fa:	464b      	mov	r3, r9
 80063fc:	f7fa f904 	bl	8000608 <__aeabi_dmul>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4630      	mov	r0, r6
 8006406:	4639      	mov	r1, r7
 8006408:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800640c:	f7f9 ff44 	bl	8000298 <__aeabi_dsub>
 8006410:	f805 6b01 	strb.w	r6, [r5], #1
 8006414:	9e01      	ldr	r6, [sp, #4]
 8006416:	9f03      	ldr	r7, [sp, #12]
 8006418:	1bae      	subs	r6, r5, r6
 800641a:	42b7      	cmp	r7, r6
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	d135      	bne.n	800648e <_dtoa_r+0x6e6>
 8006422:	f7f9 ff3b 	bl	800029c <__adddf3>
 8006426:	4642      	mov	r2, r8
 8006428:	464b      	mov	r3, r9
 800642a:	4606      	mov	r6, r0
 800642c:	460f      	mov	r7, r1
 800642e:	f7fa fb7b 	bl	8000b28 <__aeabi_dcmpgt>
 8006432:	b9d0      	cbnz	r0, 800646a <_dtoa_r+0x6c2>
 8006434:	4642      	mov	r2, r8
 8006436:	464b      	mov	r3, r9
 8006438:	4630      	mov	r0, r6
 800643a:	4639      	mov	r1, r7
 800643c:	f7fa fb4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006440:	b110      	cbz	r0, 8006448 <_dtoa_r+0x6a0>
 8006442:	f01a 0f01 	tst.w	sl, #1
 8006446:	d110      	bne.n	800646a <_dtoa_r+0x6c2>
 8006448:	4620      	mov	r0, r4
 800644a:	ee18 1a10 	vmov	r1, s16
 800644e:	f000 fb09 	bl	8006a64 <_Bfree>
 8006452:	2300      	movs	r3, #0
 8006454:	9800      	ldr	r0, [sp, #0]
 8006456:	702b      	strb	r3, [r5, #0]
 8006458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800645a:	3001      	adds	r0, #1
 800645c:	6018      	str	r0, [r3, #0]
 800645e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006460:	2b00      	cmp	r3, #0
 8006462:	f43f acf1 	beq.w	8005e48 <_dtoa_r+0xa0>
 8006466:	601d      	str	r5, [r3, #0]
 8006468:	e4ee      	b.n	8005e48 <_dtoa_r+0xa0>
 800646a:	9f00      	ldr	r7, [sp, #0]
 800646c:	462b      	mov	r3, r5
 800646e:	461d      	mov	r5, r3
 8006470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006474:	2a39      	cmp	r2, #57	; 0x39
 8006476:	d106      	bne.n	8006486 <_dtoa_r+0x6de>
 8006478:	9a01      	ldr	r2, [sp, #4]
 800647a:	429a      	cmp	r2, r3
 800647c:	d1f7      	bne.n	800646e <_dtoa_r+0x6c6>
 800647e:	9901      	ldr	r1, [sp, #4]
 8006480:	2230      	movs	r2, #48	; 0x30
 8006482:	3701      	adds	r7, #1
 8006484:	700a      	strb	r2, [r1, #0]
 8006486:	781a      	ldrb	r2, [r3, #0]
 8006488:	3201      	adds	r2, #1
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	e790      	b.n	80063b0 <_dtoa_r+0x608>
 800648e:	4ba6      	ldr	r3, [pc, #664]	; (8006728 <_dtoa_r+0x980>)
 8006490:	2200      	movs	r2, #0
 8006492:	f7fa f8b9 	bl	8000608 <__aeabi_dmul>
 8006496:	2200      	movs	r2, #0
 8006498:	2300      	movs	r3, #0
 800649a:	4606      	mov	r6, r0
 800649c:	460f      	mov	r7, r1
 800649e:	f7fa fb1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d09d      	beq.n	80063e2 <_dtoa_r+0x63a>
 80064a6:	e7cf      	b.n	8006448 <_dtoa_r+0x6a0>
 80064a8:	9a08      	ldr	r2, [sp, #32]
 80064aa:	2a00      	cmp	r2, #0
 80064ac:	f000 80d7 	beq.w	800665e <_dtoa_r+0x8b6>
 80064b0:	9a06      	ldr	r2, [sp, #24]
 80064b2:	2a01      	cmp	r2, #1
 80064b4:	f300 80ba 	bgt.w	800662c <_dtoa_r+0x884>
 80064b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064ba:	2a00      	cmp	r2, #0
 80064bc:	f000 80b2 	beq.w	8006624 <_dtoa_r+0x87c>
 80064c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064c4:	9e07      	ldr	r6, [sp, #28]
 80064c6:	9d04      	ldr	r5, [sp, #16]
 80064c8:	9a04      	ldr	r2, [sp, #16]
 80064ca:	441a      	add	r2, r3
 80064cc:	9204      	str	r2, [sp, #16]
 80064ce:	9a05      	ldr	r2, [sp, #20]
 80064d0:	2101      	movs	r1, #1
 80064d2:	441a      	add	r2, r3
 80064d4:	4620      	mov	r0, r4
 80064d6:	9205      	str	r2, [sp, #20]
 80064d8:	f000 fb7c 	bl	8006bd4 <__i2b>
 80064dc:	4607      	mov	r7, r0
 80064de:	2d00      	cmp	r5, #0
 80064e0:	dd0c      	ble.n	80064fc <_dtoa_r+0x754>
 80064e2:	9b05      	ldr	r3, [sp, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	dd09      	ble.n	80064fc <_dtoa_r+0x754>
 80064e8:	42ab      	cmp	r3, r5
 80064ea:	9a04      	ldr	r2, [sp, #16]
 80064ec:	bfa8      	it	ge
 80064ee:	462b      	movge	r3, r5
 80064f0:	1ad2      	subs	r2, r2, r3
 80064f2:	9204      	str	r2, [sp, #16]
 80064f4:	9a05      	ldr	r2, [sp, #20]
 80064f6:	1aed      	subs	r5, r5, r3
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	9305      	str	r3, [sp, #20]
 80064fc:	9b07      	ldr	r3, [sp, #28]
 80064fe:	b31b      	cbz	r3, 8006548 <_dtoa_r+0x7a0>
 8006500:	9b08      	ldr	r3, [sp, #32]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 80af 	beq.w	8006666 <_dtoa_r+0x8be>
 8006508:	2e00      	cmp	r6, #0
 800650a:	dd13      	ble.n	8006534 <_dtoa_r+0x78c>
 800650c:	4639      	mov	r1, r7
 800650e:	4632      	mov	r2, r6
 8006510:	4620      	mov	r0, r4
 8006512:	f000 fc1f 	bl	8006d54 <__pow5mult>
 8006516:	ee18 2a10 	vmov	r2, s16
 800651a:	4601      	mov	r1, r0
 800651c:	4607      	mov	r7, r0
 800651e:	4620      	mov	r0, r4
 8006520:	f000 fb6e 	bl	8006c00 <__multiply>
 8006524:	ee18 1a10 	vmov	r1, s16
 8006528:	4680      	mov	r8, r0
 800652a:	4620      	mov	r0, r4
 800652c:	f000 fa9a 	bl	8006a64 <_Bfree>
 8006530:	ee08 8a10 	vmov	s16, r8
 8006534:	9b07      	ldr	r3, [sp, #28]
 8006536:	1b9a      	subs	r2, r3, r6
 8006538:	d006      	beq.n	8006548 <_dtoa_r+0x7a0>
 800653a:	ee18 1a10 	vmov	r1, s16
 800653e:	4620      	mov	r0, r4
 8006540:	f000 fc08 	bl	8006d54 <__pow5mult>
 8006544:	ee08 0a10 	vmov	s16, r0
 8006548:	2101      	movs	r1, #1
 800654a:	4620      	mov	r0, r4
 800654c:	f000 fb42 	bl	8006bd4 <__i2b>
 8006550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006552:	2b00      	cmp	r3, #0
 8006554:	4606      	mov	r6, r0
 8006556:	f340 8088 	ble.w	800666a <_dtoa_r+0x8c2>
 800655a:	461a      	mov	r2, r3
 800655c:	4601      	mov	r1, r0
 800655e:	4620      	mov	r0, r4
 8006560:	f000 fbf8 	bl	8006d54 <__pow5mult>
 8006564:	9b06      	ldr	r3, [sp, #24]
 8006566:	2b01      	cmp	r3, #1
 8006568:	4606      	mov	r6, r0
 800656a:	f340 8081 	ble.w	8006670 <_dtoa_r+0x8c8>
 800656e:	f04f 0800 	mov.w	r8, #0
 8006572:	6933      	ldr	r3, [r6, #16]
 8006574:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006578:	6918      	ldr	r0, [r3, #16]
 800657a:	f000 fadb 	bl	8006b34 <__hi0bits>
 800657e:	f1c0 0020 	rsb	r0, r0, #32
 8006582:	9b05      	ldr	r3, [sp, #20]
 8006584:	4418      	add	r0, r3
 8006586:	f010 001f 	ands.w	r0, r0, #31
 800658a:	f000 8092 	beq.w	80066b2 <_dtoa_r+0x90a>
 800658e:	f1c0 0320 	rsb	r3, r0, #32
 8006592:	2b04      	cmp	r3, #4
 8006594:	f340 808a 	ble.w	80066ac <_dtoa_r+0x904>
 8006598:	f1c0 001c 	rsb	r0, r0, #28
 800659c:	9b04      	ldr	r3, [sp, #16]
 800659e:	4403      	add	r3, r0
 80065a0:	9304      	str	r3, [sp, #16]
 80065a2:	9b05      	ldr	r3, [sp, #20]
 80065a4:	4403      	add	r3, r0
 80065a6:	4405      	add	r5, r0
 80065a8:	9305      	str	r3, [sp, #20]
 80065aa:	9b04      	ldr	r3, [sp, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	dd07      	ble.n	80065c0 <_dtoa_r+0x818>
 80065b0:	ee18 1a10 	vmov	r1, s16
 80065b4:	461a      	mov	r2, r3
 80065b6:	4620      	mov	r0, r4
 80065b8:	f000 fc26 	bl	8006e08 <__lshift>
 80065bc:	ee08 0a10 	vmov	s16, r0
 80065c0:	9b05      	ldr	r3, [sp, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	dd05      	ble.n	80065d2 <_dtoa_r+0x82a>
 80065c6:	4631      	mov	r1, r6
 80065c8:	461a      	mov	r2, r3
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 fc1c 	bl	8006e08 <__lshift>
 80065d0:	4606      	mov	r6, r0
 80065d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d06e      	beq.n	80066b6 <_dtoa_r+0x90e>
 80065d8:	ee18 0a10 	vmov	r0, s16
 80065dc:	4631      	mov	r1, r6
 80065de:	f000 fc83 	bl	8006ee8 <__mcmp>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	da67      	bge.n	80066b6 <_dtoa_r+0x90e>
 80065e6:	9b00      	ldr	r3, [sp, #0]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	ee18 1a10 	vmov	r1, s16
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	220a      	movs	r2, #10
 80065f2:	2300      	movs	r3, #0
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 fa57 	bl	8006aa8 <__multadd>
 80065fa:	9b08      	ldr	r3, [sp, #32]
 80065fc:	ee08 0a10 	vmov	s16, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 81b1 	beq.w	8006968 <_dtoa_r+0xbc0>
 8006606:	2300      	movs	r3, #0
 8006608:	4639      	mov	r1, r7
 800660a:	220a      	movs	r2, #10
 800660c:	4620      	mov	r0, r4
 800660e:	f000 fa4b 	bl	8006aa8 <__multadd>
 8006612:	9b02      	ldr	r3, [sp, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	4607      	mov	r7, r0
 8006618:	f300 808e 	bgt.w	8006738 <_dtoa_r+0x990>
 800661c:	9b06      	ldr	r3, [sp, #24]
 800661e:	2b02      	cmp	r3, #2
 8006620:	dc51      	bgt.n	80066c6 <_dtoa_r+0x91e>
 8006622:	e089      	b.n	8006738 <_dtoa_r+0x990>
 8006624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006626:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800662a:	e74b      	b.n	80064c4 <_dtoa_r+0x71c>
 800662c:	9b03      	ldr	r3, [sp, #12]
 800662e:	1e5e      	subs	r6, r3, #1
 8006630:	9b07      	ldr	r3, [sp, #28]
 8006632:	42b3      	cmp	r3, r6
 8006634:	bfbf      	itttt	lt
 8006636:	9b07      	ldrlt	r3, [sp, #28]
 8006638:	9607      	strlt	r6, [sp, #28]
 800663a:	1af2      	sublt	r2, r6, r3
 800663c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800663e:	bfb6      	itet	lt
 8006640:	189b      	addlt	r3, r3, r2
 8006642:	1b9e      	subge	r6, r3, r6
 8006644:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006646:	9b03      	ldr	r3, [sp, #12]
 8006648:	bfb8      	it	lt
 800664a:	2600      	movlt	r6, #0
 800664c:	2b00      	cmp	r3, #0
 800664e:	bfb7      	itett	lt
 8006650:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006654:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006658:	1a9d      	sublt	r5, r3, r2
 800665a:	2300      	movlt	r3, #0
 800665c:	e734      	b.n	80064c8 <_dtoa_r+0x720>
 800665e:	9e07      	ldr	r6, [sp, #28]
 8006660:	9d04      	ldr	r5, [sp, #16]
 8006662:	9f08      	ldr	r7, [sp, #32]
 8006664:	e73b      	b.n	80064de <_dtoa_r+0x736>
 8006666:	9a07      	ldr	r2, [sp, #28]
 8006668:	e767      	b.n	800653a <_dtoa_r+0x792>
 800666a:	9b06      	ldr	r3, [sp, #24]
 800666c:	2b01      	cmp	r3, #1
 800666e:	dc18      	bgt.n	80066a2 <_dtoa_r+0x8fa>
 8006670:	f1ba 0f00 	cmp.w	sl, #0
 8006674:	d115      	bne.n	80066a2 <_dtoa_r+0x8fa>
 8006676:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800667a:	b993      	cbnz	r3, 80066a2 <_dtoa_r+0x8fa>
 800667c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006680:	0d1b      	lsrs	r3, r3, #20
 8006682:	051b      	lsls	r3, r3, #20
 8006684:	b183      	cbz	r3, 80066a8 <_dtoa_r+0x900>
 8006686:	9b04      	ldr	r3, [sp, #16]
 8006688:	3301      	adds	r3, #1
 800668a:	9304      	str	r3, [sp, #16]
 800668c:	9b05      	ldr	r3, [sp, #20]
 800668e:	3301      	adds	r3, #1
 8006690:	9305      	str	r3, [sp, #20]
 8006692:	f04f 0801 	mov.w	r8, #1
 8006696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006698:	2b00      	cmp	r3, #0
 800669a:	f47f af6a 	bne.w	8006572 <_dtoa_r+0x7ca>
 800669e:	2001      	movs	r0, #1
 80066a0:	e76f      	b.n	8006582 <_dtoa_r+0x7da>
 80066a2:	f04f 0800 	mov.w	r8, #0
 80066a6:	e7f6      	b.n	8006696 <_dtoa_r+0x8ee>
 80066a8:	4698      	mov	r8, r3
 80066aa:	e7f4      	b.n	8006696 <_dtoa_r+0x8ee>
 80066ac:	f43f af7d 	beq.w	80065aa <_dtoa_r+0x802>
 80066b0:	4618      	mov	r0, r3
 80066b2:	301c      	adds	r0, #28
 80066b4:	e772      	b.n	800659c <_dtoa_r+0x7f4>
 80066b6:	9b03      	ldr	r3, [sp, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	dc37      	bgt.n	800672c <_dtoa_r+0x984>
 80066bc:	9b06      	ldr	r3, [sp, #24]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	dd34      	ble.n	800672c <_dtoa_r+0x984>
 80066c2:	9b03      	ldr	r3, [sp, #12]
 80066c4:	9302      	str	r3, [sp, #8]
 80066c6:	9b02      	ldr	r3, [sp, #8]
 80066c8:	b96b      	cbnz	r3, 80066e6 <_dtoa_r+0x93e>
 80066ca:	4631      	mov	r1, r6
 80066cc:	2205      	movs	r2, #5
 80066ce:	4620      	mov	r0, r4
 80066d0:	f000 f9ea 	bl	8006aa8 <__multadd>
 80066d4:	4601      	mov	r1, r0
 80066d6:	4606      	mov	r6, r0
 80066d8:	ee18 0a10 	vmov	r0, s16
 80066dc:	f000 fc04 	bl	8006ee8 <__mcmp>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	f73f adbb 	bgt.w	800625c <_dtoa_r+0x4b4>
 80066e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e8:	9d01      	ldr	r5, [sp, #4]
 80066ea:	43db      	mvns	r3, r3
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	f04f 0800 	mov.w	r8, #0
 80066f2:	4631      	mov	r1, r6
 80066f4:	4620      	mov	r0, r4
 80066f6:	f000 f9b5 	bl	8006a64 <_Bfree>
 80066fa:	2f00      	cmp	r7, #0
 80066fc:	f43f aea4 	beq.w	8006448 <_dtoa_r+0x6a0>
 8006700:	f1b8 0f00 	cmp.w	r8, #0
 8006704:	d005      	beq.n	8006712 <_dtoa_r+0x96a>
 8006706:	45b8      	cmp	r8, r7
 8006708:	d003      	beq.n	8006712 <_dtoa_r+0x96a>
 800670a:	4641      	mov	r1, r8
 800670c:	4620      	mov	r0, r4
 800670e:	f000 f9a9 	bl	8006a64 <_Bfree>
 8006712:	4639      	mov	r1, r7
 8006714:	4620      	mov	r0, r4
 8006716:	f000 f9a5 	bl	8006a64 <_Bfree>
 800671a:	e695      	b.n	8006448 <_dtoa_r+0x6a0>
 800671c:	2600      	movs	r6, #0
 800671e:	4637      	mov	r7, r6
 8006720:	e7e1      	b.n	80066e6 <_dtoa_r+0x93e>
 8006722:	9700      	str	r7, [sp, #0]
 8006724:	4637      	mov	r7, r6
 8006726:	e599      	b.n	800625c <_dtoa_r+0x4b4>
 8006728:	40240000 	.word	0x40240000
 800672c:	9b08      	ldr	r3, [sp, #32]
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 80ca 	beq.w	80068c8 <_dtoa_r+0xb20>
 8006734:	9b03      	ldr	r3, [sp, #12]
 8006736:	9302      	str	r3, [sp, #8]
 8006738:	2d00      	cmp	r5, #0
 800673a:	dd05      	ble.n	8006748 <_dtoa_r+0x9a0>
 800673c:	4639      	mov	r1, r7
 800673e:	462a      	mov	r2, r5
 8006740:	4620      	mov	r0, r4
 8006742:	f000 fb61 	bl	8006e08 <__lshift>
 8006746:	4607      	mov	r7, r0
 8006748:	f1b8 0f00 	cmp.w	r8, #0
 800674c:	d05b      	beq.n	8006806 <_dtoa_r+0xa5e>
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	4620      	mov	r0, r4
 8006752:	f000 f947 	bl	80069e4 <_Balloc>
 8006756:	4605      	mov	r5, r0
 8006758:	b928      	cbnz	r0, 8006766 <_dtoa_r+0x9be>
 800675a:	4b87      	ldr	r3, [pc, #540]	; (8006978 <_dtoa_r+0xbd0>)
 800675c:	4602      	mov	r2, r0
 800675e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006762:	f7ff bb3b 	b.w	8005ddc <_dtoa_r+0x34>
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	3202      	adds	r2, #2
 800676a:	0092      	lsls	r2, r2, #2
 800676c:	f107 010c 	add.w	r1, r7, #12
 8006770:	300c      	adds	r0, #12
 8006772:	f000 f91d 	bl	80069b0 <memcpy>
 8006776:	2201      	movs	r2, #1
 8006778:	4629      	mov	r1, r5
 800677a:	4620      	mov	r0, r4
 800677c:	f000 fb44 	bl	8006e08 <__lshift>
 8006780:	9b01      	ldr	r3, [sp, #4]
 8006782:	f103 0901 	add.w	r9, r3, #1
 8006786:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800678a:	4413      	add	r3, r2
 800678c:	9305      	str	r3, [sp, #20]
 800678e:	f00a 0301 	and.w	r3, sl, #1
 8006792:	46b8      	mov	r8, r7
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	4607      	mov	r7, r0
 8006798:	4631      	mov	r1, r6
 800679a:	ee18 0a10 	vmov	r0, s16
 800679e:	f7ff fa75 	bl	8005c8c <quorem>
 80067a2:	4641      	mov	r1, r8
 80067a4:	9002      	str	r0, [sp, #8]
 80067a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80067aa:	ee18 0a10 	vmov	r0, s16
 80067ae:	f000 fb9b 	bl	8006ee8 <__mcmp>
 80067b2:	463a      	mov	r2, r7
 80067b4:	9003      	str	r0, [sp, #12]
 80067b6:	4631      	mov	r1, r6
 80067b8:	4620      	mov	r0, r4
 80067ba:	f000 fbb1 	bl	8006f20 <__mdiff>
 80067be:	68c2      	ldr	r2, [r0, #12]
 80067c0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80067c4:	4605      	mov	r5, r0
 80067c6:	bb02      	cbnz	r2, 800680a <_dtoa_r+0xa62>
 80067c8:	4601      	mov	r1, r0
 80067ca:	ee18 0a10 	vmov	r0, s16
 80067ce:	f000 fb8b 	bl	8006ee8 <__mcmp>
 80067d2:	4602      	mov	r2, r0
 80067d4:	4629      	mov	r1, r5
 80067d6:	4620      	mov	r0, r4
 80067d8:	9207      	str	r2, [sp, #28]
 80067da:	f000 f943 	bl	8006a64 <_Bfree>
 80067de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80067e2:	ea43 0102 	orr.w	r1, r3, r2
 80067e6:	9b04      	ldr	r3, [sp, #16]
 80067e8:	430b      	orrs	r3, r1
 80067ea:	464d      	mov	r5, r9
 80067ec:	d10f      	bne.n	800680e <_dtoa_r+0xa66>
 80067ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80067f2:	d02a      	beq.n	800684a <_dtoa_r+0xaa2>
 80067f4:	9b03      	ldr	r3, [sp, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	dd02      	ble.n	8006800 <_dtoa_r+0xa58>
 80067fa:	9b02      	ldr	r3, [sp, #8]
 80067fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006800:	f88b a000 	strb.w	sl, [fp]
 8006804:	e775      	b.n	80066f2 <_dtoa_r+0x94a>
 8006806:	4638      	mov	r0, r7
 8006808:	e7ba      	b.n	8006780 <_dtoa_r+0x9d8>
 800680a:	2201      	movs	r2, #1
 800680c:	e7e2      	b.n	80067d4 <_dtoa_r+0xa2c>
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	db04      	blt.n	800681e <_dtoa_r+0xa76>
 8006814:	9906      	ldr	r1, [sp, #24]
 8006816:	430b      	orrs	r3, r1
 8006818:	9904      	ldr	r1, [sp, #16]
 800681a:	430b      	orrs	r3, r1
 800681c:	d122      	bne.n	8006864 <_dtoa_r+0xabc>
 800681e:	2a00      	cmp	r2, #0
 8006820:	ddee      	ble.n	8006800 <_dtoa_r+0xa58>
 8006822:	ee18 1a10 	vmov	r1, s16
 8006826:	2201      	movs	r2, #1
 8006828:	4620      	mov	r0, r4
 800682a:	f000 faed 	bl	8006e08 <__lshift>
 800682e:	4631      	mov	r1, r6
 8006830:	ee08 0a10 	vmov	s16, r0
 8006834:	f000 fb58 	bl	8006ee8 <__mcmp>
 8006838:	2800      	cmp	r0, #0
 800683a:	dc03      	bgt.n	8006844 <_dtoa_r+0xa9c>
 800683c:	d1e0      	bne.n	8006800 <_dtoa_r+0xa58>
 800683e:	f01a 0f01 	tst.w	sl, #1
 8006842:	d0dd      	beq.n	8006800 <_dtoa_r+0xa58>
 8006844:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006848:	d1d7      	bne.n	80067fa <_dtoa_r+0xa52>
 800684a:	2339      	movs	r3, #57	; 0x39
 800684c:	f88b 3000 	strb.w	r3, [fp]
 8006850:	462b      	mov	r3, r5
 8006852:	461d      	mov	r5, r3
 8006854:	3b01      	subs	r3, #1
 8006856:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800685a:	2a39      	cmp	r2, #57	; 0x39
 800685c:	d071      	beq.n	8006942 <_dtoa_r+0xb9a>
 800685e:	3201      	adds	r2, #1
 8006860:	701a      	strb	r2, [r3, #0]
 8006862:	e746      	b.n	80066f2 <_dtoa_r+0x94a>
 8006864:	2a00      	cmp	r2, #0
 8006866:	dd07      	ble.n	8006878 <_dtoa_r+0xad0>
 8006868:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800686c:	d0ed      	beq.n	800684a <_dtoa_r+0xaa2>
 800686e:	f10a 0301 	add.w	r3, sl, #1
 8006872:	f88b 3000 	strb.w	r3, [fp]
 8006876:	e73c      	b.n	80066f2 <_dtoa_r+0x94a>
 8006878:	9b05      	ldr	r3, [sp, #20]
 800687a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800687e:	4599      	cmp	r9, r3
 8006880:	d047      	beq.n	8006912 <_dtoa_r+0xb6a>
 8006882:	ee18 1a10 	vmov	r1, s16
 8006886:	2300      	movs	r3, #0
 8006888:	220a      	movs	r2, #10
 800688a:	4620      	mov	r0, r4
 800688c:	f000 f90c 	bl	8006aa8 <__multadd>
 8006890:	45b8      	cmp	r8, r7
 8006892:	ee08 0a10 	vmov	s16, r0
 8006896:	f04f 0300 	mov.w	r3, #0
 800689a:	f04f 020a 	mov.w	r2, #10
 800689e:	4641      	mov	r1, r8
 80068a0:	4620      	mov	r0, r4
 80068a2:	d106      	bne.n	80068b2 <_dtoa_r+0xb0a>
 80068a4:	f000 f900 	bl	8006aa8 <__multadd>
 80068a8:	4680      	mov	r8, r0
 80068aa:	4607      	mov	r7, r0
 80068ac:	f109 0901 	add.w	r9, r9, #1
 80068b0:	e772      	b.n	8006798 <_dtoa_r+0x9f0>
 80068b2:	f000 f8f9 	bl	8006aa8 <__multadd>
 80068b6:	4639      	mov	r1, r7
 80068b8:	4680      	mov	r8, r0
 80068ba:	2300      	movs	r3, #0
 80068bc:	220a      	movs	r2, #10
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 f8f2 	bl	8006aa8 <__multadd>
 80068c4:	4607      	mov	r7, r0
 80068c6:	e7f1      	b.n	80068ac <_dtoa_r+0xb04>
 80068c8:	9b03      	ldr	r3, [sp, #12]
 80068ca:	9302      	str	r3, [sp, #8]
 80068cc:	9d01      	ldr	r5, [sp, #4]
 80068ce:	ee18 0a10 	vmov	r0, s16
 80068d2:	4631      	mov	r1, r6
 80068d4:	f7ff f9da 	bl	8005c8c <quorem>
 80068d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80068dc:	9b01      	ldr	r3, [sp, #4]
 80068de:	f805 ab01 	strb.w	sl, [r5], #1
 80068e2:	1aea      	subs	r2, r5, r3
 80068e4:	9b02      	ldr	r3, [sp, #8]
 80068e6:	4293      	cmp	r3, r2
 80068e8:	dd09      	ble.n	80068fe <_dtoa_r+0xb56>
 80068ea:	ee18 1a10 	vmov	r1, s16
 80068ee:	2300      	movs	r3, #0
 80068f0:	220a      	movs	r2, #10
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 f8d8 	bl	8006aa8 <__multadd>
 80068f8:	ee08 0a10 	vmov	s16, r0
 80068fc:	e7e7      	b.n	80068ce <_dtoa_r+0xb26>
 80068fe:	9b02      	ldr	r3, [sp, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	bfc8      	it	gt
 8006904:	461d      	movgt	r5, r3
 8006906:	9b01      	ldr	r3, [sp, #4]
 8006908:	bfd8      	it	le
 800690a:	2501      	movle	r5, #1
 800690c:	441d      	add	r5, r3
 800690e:	f04f 0800 	mov.w	r8, #0
 8006912:	ee18 1a10 	vmov	r1, s16
 8006916:	2201      	movs	r2, #1
 8006918:	4620      	mov	r0, r4
 800691a:	f000 fa75 	bl	8006e08 <__lshift>
 800691e:	4631      	mov	r1, r6
 8006920:	ee08 0a10 	vmov	s16, r0
 8006924:	f000 fae0 	bl	8006ee8 <__mcmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	dc91      	bgt.n	8006850 <_dtoa_r+0xaa8>
 800692c:	d102      	bne.n	8006934 <_dtoa_r+0xb8c>
 800692e:	f01a 0f01 	tst.w	sl, #1
 8006932:	d18d      	bne.n	8006850 <_dtoa_r+0xaa8>
 8006934:	462b      	mov	r3, r5
 8006936:	461d      	mov	r5, r3
 8006938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800693c:	2a30      	cmp	r2, #48	; 0x30
 800693e:	d0fa      	beq.n	8006936 <_dtoa_r+0xb8e>
 8006940:	e6d7      	b.n	80066f2 <_dtoa_r+0x94a>
 8006942:	9a01      	ldr	r2, [sp, #4]
 8006944:	429a      	cmp	r2, r3
 8006946:	d184      	bne.n	8006852 <_dtoa_r+0xaaa>
 8006948:	9b00      	ldr	r3, [sp, #0]
 800694a:	3301      	adds	r3, #1
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	2331      	movs	r3, #49	; 0x31
 8006950:	7013      	strb	r3, [r2, #0]
 8006952:	e6ce      	b.n	80066f2 <_dtoa_r+0x94a>
 8006954:	4b09      	ldr	r3, [pc, #36]	; (800697c <_dtoa_r+0xbd4>)
 8006956:	f7ff ba95 	b.w	8005e84 <_dtoa_r+0xdc>
 800695a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800695c:	2b00      	cmp	r3, #0
 800695e:	f47f aa6e 	bne.w	8005e3e <_dtoa_r+0x96>
 8006962:	4b07      	ldr	r3, [pc, #28]	; (8006980 <_dtoa_r+0xbd8>)
 8006964:	f7ff ba8e 	b.w	8005e84 <_dtoa_r+0xdc>
 8006968:	9b02      	ldr	r3, [sp, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	dcae      	bgt.n	80068cc <_dtoa_r+0xb24>
 800696e:	9b06      	ldr	r3, [sp, #24]
 8006970:	2b02      	cmp	r3, #2
 8006972:	f73f aea8 	bgt.w	80066c6 <_dtoa_r+0x91e>
 8006976:	e7a9      	b.n	80068cc <_dtoa_r+0xb24>
 8006978:	08008b57 	.word	0x08008b57
 800697c:	08008ab4 	.word	0x08008ab4
 8006980:	08008ad8 	.word	0x08008ad8

08006984 <_localeconv_r>:
 8006984:	4800      	ldr	r0, [pc, #0]	; (8006988 <_localeconv_r+0x4>)
 8006986:	4770      	bx	lr
 8006988:	2000015c 	.word	0x2000015c

0800698c <_lseek_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4d07      	ldr	r5, [pc, #28]	; (80069ac <_lseek_r+0x20>)
 8006990:	4604      	mov	r4, r0
 8006992:	4608      	mov	r0, r1
 8006994:	4611      	mov	r1, r2
 8006996:	2200      	movs	r2, #0
 8006998:	602a      	str	r2, [r5, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f7fa fd26 	bl	80013ec <_lseek>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d102      	bne.n	80069aa <_lseek_r+0x1e>
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	b103      	cbz	r3, 80069aa <_lseek_r+0x1e>
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
 80069ac:	20000424 	.word	0x20000424

080069b0 <memcpy>:
 80069b0:	440a      	add	r2, r1
 80069b2:	4291      	cmp	r1, r2
 80069b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80069b8:	d100      	bne.n	80069bc <memcpy+0xc>
 80069ba:	4770      	bx	lr
 80069bc:	b510      	push	{r4, lr}
 80069be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069c6:	4291      	cmp	r1, r2
 80069c8:	d1f9      	bne.n	80069be <memcpy+0xe>
 80069ca:	bd10      	pop	{r4, pc}

080069cc <__malloc_lock>:
 80069cc:	4801      	ldr	r0, [pc, #4]	; (80069d4 <__malloc_lock+0x8>)
 80069ce:	f000 bd9d 	b.w	800750c <__retarget_lock_acquire_recursive>
 80069d2:	bf00      	nop
 80069d4:	20000428 	.word	0x20000428

080069d8 <__malloc_unlock>:
 80069d8:	4801      	ldr	r0, [pc, #4]	; (80069e0 <__malloc_unlock+0x8>)
 80069da:	f000 bd98 	b.w	800750e <__retarget_lock_release_recursive>
 80069de:	bf00      	nop
 80069e0:	20000428 	.word	0x20000428

080069e4 <_Balloc>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069e8:	4604      	mov	r4, r0
 80069ea:	460d      	mov	r5, r1
 80069ec:	b976      	cbnz	r6, 8006a0c <_Balloc+0x28>
 80069ee:	2010      	movs	r0, #16
 80069f0:	f7fe fb7c 	bl	80050ec <malloc>
 80069f4:	4602      	mov	r2, r0
 80069f6:	6260      	str	r0, [r4, #36]	; 0x24
 80069f8:	b920      	cbnz	r0, 8006a04 <_Balloc+0x20>
 80069fa:	4b18      	ldr	r3, [pc, #96]	; (8006a5c <_Balloc+0x78>)
 80069fc:	4818      	ldr	r0, [pc, #96]	; (8006a60 <_Balloc+0x7c>)
 80069fe:	2166      	movs	r1, #102	; 0x66
 8006a00:	f000 fb9c 	bl	800713c <__assert_func>
 8006a04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a08:	6006      	str	r6, [r0, #0]
 8006a0a:	60c6      	str	r6, [r0, #12]
 8006a0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006a0e:	68f3      	ldr	r3, [r6, #12]
 8006a10:	b183      	cbz	r3, 8006a34 <_Balloc+0x50>
 8006a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a1a:	b9b8      	cbnz	r0, 8006a4c <_Balloc+0x68>
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	fa01 f605 	lsl.w	r6, r1, r5
 8006a22:	1d72      	adds	r2, r6, #5
 8006a24:	0092      	lsls	r2, r2, #2
 8006a26:	4620      	mov	r0, r4
 8006a28:	f000 fb60 	bl	80070ec <_calloc_r>
 8006a2c:	b160      	cbz	r0, 8006a48 <_Balloc+0x64>
 8006a2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a32:	e00e      	b.n	8006a52 <_Balloc+0x6e>
 8006a34:	2221      	movs	r2, #33	; 0x21
 8006a36:	2104      	movs	r1, #4
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 fb57 	bl	80070ec <_calloc_r>
 8006a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a40:	60f0      	str	r0, [r6, #12]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e4      	bne.n	8006a12 <_Balloc+0x2e>
 8006a48:	2000      	movs	r0, #0
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
 8006a4c:	6802      	ldr	r2, [r0, #0]
 8006a4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a52:	2300      	movs	r3, #0
 8006a54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a58:	e7f7      	b.n	8006a4a <_Balloc+0x66>
 8006a5a:	bf00      	nop
 8006a5c:	08008ae5 	.word	0x08008ae5
 8006a60:	08008b68 	.word	0x08008b68

08006a64 <_Bfree>:
 8006a64:	b570      	push	{r4, r5, r6, lr}
 8006a66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a68:	4605      	mov	r5, r0
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	b976      	cbnz	r6, 8006a8c <_Bfree+0x28>
 8006a6e:	2010      	movs	r0, #16
 8006a70:	f7fe fb3c 	bl	80050ec <malloc>
 8006a74:	4602      	mov	r2, r0
 8006a76:	6268      	str	r0, [r5, #36]	; 0x24
 8006a78:	b920      	cbnz	r0, 8006a84 <_Bfree+0x20>
 8006a7a:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <_Bfree+0x3c>)
 8006a7c:	4809      	ldr	r0, [pc, #36]	; (8006aa4 <_Bfree+0x40>)
 8006a7e:	218a      	movs	r1, #138	; 0x8a
 8006a80:	f000 fb5c 	bl	800713c <__assert_func>
 8006a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a88:	6006      	str	r6, [r0, #0]
 8006a8a:	60c6      	str	r6, [r0, #12]
 8006a8c:	b13c      	cbz	r4, 8006a9e <_Bfree+0x3a>
 8006a8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a90:	6862      	ldr	r2, [r4, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a98:	6021      	str	r1, [r4, #0]
 8006a9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	08008ae5 	.word	0x08008ae5
 8006aa4:	08008b68 	.word	0x08008b68

08006aa8 <__multadd>:
 8006aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aac:	690d      	ldr	r5, [r1, #16]
 8006aae:	4607      	mov	r7, r0
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	461e      	mov	r6, r3
 8006ab4:	f101 0c14 	add.w	ip, r1, #20
 8006ab8:	2000      	movs	r0, #0
 8006aba:	f8dc 3000 	ldr.w	r3, [ip]
 8006abe:	b299      	uxth	r1, r3
 8006ac0:	fb02 6101 	mla	r1, r2, r1, r6
 8006ac4:	0c1e      	lsrs	r6, r3, #16
 8006ac6:	0c0b      	lsrs	r3, r1, #16
 8006ac8:	fb02 3306 	mla	r3, r2, r6, r3
 8006acc:	b289      	uxth	r1, r1
 8006ace:	3001      	adds	r0, #1
 8006ad0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ad4:	4285      	cmp	r5, r0
 8006ad6:	f84c 1b04 	str.w	r1, [ip], #4
 8006ada:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ade:	dcec      	bgt.n	8006aba <__multadd+0x12>
 8006ae0:	b30e      	cbz	r6, 8006b26 <__multadd+0x7e>
 8006ae2:	68a3      	ldr	r3, [r4, #8]
 8006ae4:	42ab      	cmp	r3, r5
 8006ae6:	dc19      	bgt.n	8006b1c <__multadd+0x74>
 8006ae8:	6861      	ldr	r1, [r4, #4]
 8006aea:	4638      	mov	r0, r7
 8006aec:	3101      	adds	r1, #1
 8006aee:	f7ff ff79 	bl	80069e4 <_Balloc>
 8006af2:	4680      	mov	r8, r0
 8006af4:	b928      	cbnz	r0, 8006b02 <__multadd+0x5a>
 8006af6:	4602      	mov	r2, r0
 8006af8:	4b0c      	ldr	r3, [pc, #48]	; (8006b2c <__multadd+0x84>)
 8006afa:	480d      	ldr	r0, [pc, #52]	; (8006b30 <__multadd+0x88>)
 8006afc:	21b5      	movs	r1, #181	; 0xb5
 8006afe:	f000 fb1d 	bl	800713c <__assert_func>
 8006b02:	6922      	ldr	r2, [r4, #16]
 8006b04:	3202      	adds	r2, #2
 8006b06:	f104 010c 	add.w	r1, r4, #12
 8006b0a:	0092      	lsls	r2, r2, #2
 8006b0c:	300c      	adds	r0, #12
 8006b0e:	f7ff ff4f 	bl	80069b0 <memcpy>
 8006b12:	4621      	mov	r1, r4
 8006b14:	4638      	mov	r0, r7
 8006b16:	f7ff ffa5 	bl	8006a64 <_Bfree>
 8006b1a:	4644      	mov	r4, r8
 8006b1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b20:	3501      	adds	r5, #1
 8006b22:	615e      	str	r6, [r3, #20]
 8006b24:	6125      	str	r5, [r4, #16]
 8006b26:	4620      	mov	r0, r4
 8006b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b2c:	08008b57 	.word	0x08008b57
 8006b30:	08008b68 	.word	0x08008b68

08006b34 <__hi0bits>:
 8006b34:	0c03      	lsrs	r3, r0, #16
 8006b36:	041b      	lsls	r3, r3, #16
 8006b38:	b9d3      	cbnz	r3, 8006b70 <__hi0bits+0x3c>
 8006b3a:	0400      	lsls	r0, r0, #16
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b42:	bf04      	itt	eq
 8006b44:	0200      	lsleq	r0, r0, #8
 8006b46:	3308      	addeq	r3, #8
 8006b48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b4c:	bf04      	itt	eq
 8006b4e:	0100      	lsleq	r0, r0, #4
 8006b50:	3304      	addeq	r3, #4
 8006b52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b56:	bf04      	itt	eq
 8006b58:	0080      	lsleq	r0, r0, #2
 8006b5a:	3302      	addeq	r3, #2
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	db05      	blt.n	8006b6c <__hi0bits+0x38>
 8006b60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b64:	f103 0301 	add.w	r3, r3, #1
 8006b68:	bf08      	it	eq
 8006b6a:	2320      	moveq	r3, #32
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	4770      	bx	lr
 8006b70:	2300      	movs	r3, #0
 8006b72:	e7e4      	b.n	8006b3e <__hi0bits+0xa>

08006b74 <__lo0bits>:
 8006b74:	6803      	ldr	r3, [r0, #0]
 8006b76:	f013 0207 	ands.w	r2, r3, #7
 8006b7a:	4601      	mov	r1, r0
 8006b7c:	d00b      	beq.n	8006b96 <__lo0bits+0x22>
 8006b7e:	07da      	lsls	r2, r3, #31
 8006b80:	d423      	bmi.n	8006bca <__lo0bits+0x56>
 8006b82:	0798      	lsls	r0, r3, #30
 8006b84:	bf49      	itett	mi
 8006b86:	085b      	lsrmi	r3, r3, #1
 8006b88:	089b      	lsrpl	r3, r3, #2
 8006b8a:	2001      	movmi	r0, #1
 8006b8c:	600b      	strmi	r3, [r1, #0]
 8006b8e:	bf5c      	itt	pl
 8006b90:	600b      	strpl	r3, [r1, #0]
 8006b92:	2002      	movpl	r0, #2
 8006b94:	4770      	bx	lr
 8006b96:	b298      	uxth	r0, r3
 8006b98:	b9a8      	cbnz	r0, 8006bc6 <__lo0bits+0x52>
 8006b9a:	0c1b      	lsrs	r3, r3, #16
 8006b9c:	2010      	movs	r0, #16
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	b90a      	cbnz	r2, 8006ba6 <__lo0bits+0x32>
 8006ba2:	3008      	adds	r0, #8
 8006ba4:	0a1b      	lsrs	r3, r3, #8
 8006ba6:	071a      	lsls	r2, r3, #28
 8006ba8:	bf04      	itt	eq
 8006baa:	091b      	lsreq	r3, r3, #4
 8006bac:	3004      	addeq	r0, #4
 8006bae:	079a      	lsls	r2, r3, #30
 8006bb0:	bf04      	itt	eq
 8006bb2:	089b      	lsreq	r3, r3, #2
 8006bb4:	3002      	addeq	r0, #2
 8006bb6:	07da      	lsls	r2, r3, #31
 8006bb8:	d403      	bmi.n	8006bc2 <__lo0bits+0x4e>
 8006bba:	085b      	lsrs	r3, r3, #1
 8006bbc:	f100 0001 	add.w	r0, r0, #1
 8006bc0:	d005      	beq.n	8006bce <__lo0bits+0x5a>
 8006bc2:	600b      	str	r3, [r1, #0]
 8006bc4:	4770      	bx	lr
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	e7e9      	b.n	8006b9e <__lo0bits+0x2a>
 8006bca:	2000      	movs	r0, #0
 8006bcc:	4770      	bx	lr
 8006bce:	2020      	movs	r0, #32
 8006bd0:	4770      	bx	lr
	...

08006bd4 <__i2b>:
 8006bd4:	b510      	push	{r4, lr}
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	2101      	movs	r1, #1
 8006bda:	f7ff ff03 	bl	80069e4 <_Balloc>
 8006bde:	4602      	mov	r2, r0
 8006be0:	b928      	cbnz	r0, 8006bee <__i2b+0x1a>
 8006be2:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <__i2b+0x24>)
 8006be4:	4805      	ldr	r0, [pc, #20]	; (8006bfc <__i2b+0x28>)
 8006be6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006bea:	f000 faa7 	bl	800713c <__assert_func>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	6144      	str	r4, [r0, #20]
 8006bf2:	6103      	str	r3, [r0, #16]
 8006bf4:	bd10      	pop	{r4, pc}
 8006bf6:	bf00      	nop
 8006bf8:	08008b57 	.word	0x08008b57
 8006bfc:	08008b68 	.word	0x08008b68

08006c00 <__multiply>:
 8006c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c04:	4691      	mov	r9, r2
 8006c06:	690a      	ldr	r2, [r1, #16]
 8006c08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	bfb8      	it	lt
 8006c10:	460b      	movlt	r3, r1
 8006c12:	460c      	mov	r4, r1
 8006c14:	bfbc      	itt	lt
 8006c16:	464c      	movlt	r4, r9
 8006c18:	4699      	movlt	r9, r3
 8006c1a:	6927      	ldr	r7, [r4, #16]
 8006c1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c20:	68a3      	ldr	r3, [r4, #8]
 8006c22:	6861      	ldr	r1, [r4, #4]
 8006c24:	eb07 060a 	add.w	r6, r7, sl
 8006c28:	42b3      	cmp	r3, r6
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	bfb8      	it	lt
 8006c2e:	3101      	addlt	r1, #1
 8006c30:	f7ff fed8 	bl	80069e4 <_Balloc>
 8006c34:	b930      	cbnz	r0, 8006c44 <__multiply+0x44>
 8006c36:	4602      	mov	r2, r0
 8006c38:	4b44      	ldr	r3, [pc, #272]	; (8006d4c <__multiply+0x14c>)
 8006c3a:	4845      	ldr	r0, [pc, #276]	; (8006d50 <__multiply+0x150>)
 8006c3c:	f240 115d 	movw	r1, #349	; 0x15d
 8006c40:	f000 fa7c 	bl	800713c <__assert_func>
 8006c44:	f100 0514 	add.w	r5, r0, #20
 8006c48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	2200      	movs	r2, #0
 8006c50:	4543      	cmp	r3, r8
 8006c52:	d321      	bcc.n	8006c98 <__multiply+0x98>
 8006c54:	f104 0314 	add.w	r3, r4, #20
 8006c58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c5c:	f109 0314 	add.w	r3, r9, #20
 8006c60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c64:	9202      	str	r2, [sp, #8]
 8006c66:	1b3a      	subs	r2, r7, r4
 8006c68:	3a15      	subs	r2, #21
 8006c6a:	f022 0203 	bic.w	r2, r2, #3
 8006c6e:	3204      	adds	r2, #4
 8006c70:	f104 0115 	add.w	r1, r4, #21
 8006c74:	428f      	cmp	r7, r1
 8006c76:	bf38      	it	cc
 8006c78:	2204      	movcc	r2, #4
 8006c7a:	9201      	str	r2, [sp, #4]
 8006c7c:	9a02      	ldr	r2, [sp, #8]
 8006c7e:	9303      	str	r3, [sp, #12]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d80c      	bhi.n	8006c9e <__multiply+0x9e>
 8006c84:	2e00      	cmp	r6, #0
 8006c86:	dd03      	ble.n	8006c90 <__multiply+0x90>
 8006c88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d05a      	beq.n	8006d46 <__multiply+0x146>
 8006c90:	6106      	str	r6, [r0, #16]
 8006c92:	b005      	add	sp, #20
 8006c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c98:	f843 2b04 	str.w	r2, [r3], #4
 8006c9c:	e7d8      	b.n	8006c50 <__multiply+0x50>
 8006c9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ca2:	f1ba 0f00 	cmp.w	sl, #0
 8006ca6:	d024      	beq.n	8006cf2 <__multiply+0xf2>
 8006ca8:	f104 0e14 	add.w	lr, r4, #20
 8006cac:	46a9      	mov	r9, r5
 8006cae:	f04f 0c00 	mov.w	ip, #0
 8006cb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006cb6:	f8d9 1000 	ldr.w	r1, [r9]
 8006cba:	fa1f fb82 	uxth.w	fp, r2
 8006cbe:	b289      	uxth	r1, r1
 8006cc0:	fb0a 110b 	mla	r1, sl, fp, r1
 8006cc4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006cc8:	f8d9 2000 	ldr.w	r2, [r9]
 8006ccc:	4461      	add	r1, ip
 8006cce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cd2:	fb0a c20b 	mla	r2, sl, fp, ip
 8006cd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006cda:	b289      	uxth	r1, r1
 8006cdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ce0:	4577      	cmp	r7, lr
 8006ce2:	f849 1b04 	str.w	r1, [r9], #4
 8006ce6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cea:	d8e2      	bhi.n	8006cb2 <__multiply+0xb2>
 8006cec:	9a01      	ldr	r2, [sp, #4]
 8006cee:	f845 c002 	str.w	ip, [r5, r2]
 8006cf2:	9a03      	ldr	r2, [sp, #12]
 8006cf4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	f1b9 0f00 	cmp.w	r9, #0
 8006cfe:	d020      	beq.n	8006d42 <__multiply+0x142>
 8006d00:	6829      	ldr	r1, [r5, #0]
 8006d02:	f104 0c14 	add.w	ip, r4, #20
 8006d06:	46ae      	mov	lr, r5
 8006d08:	f04f 0a00 	mov.w	sl, #0
 8006d0c:	f8bc b000 	ldrh.w	fp, [ip]
 8006d10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d14:	fb09 220b 	mla	r2, r9, fp, r2
 8006d18:	4492      	add	sl, r2
 8006d1a:	b289      	uxth	r1, r1
 8006d1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006d20:	f84e 1b04 	str.w	r1, [lr], #4
 8006d24:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d28:	f8be 1000 	ldrh.w	r1, [lr]
 8006d2c:	0c12      	lsrs	r2, r2, #16
 8006d2e:	fb09 1102 	mla	r1, r9, r2, r1
 8006d32:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006d36:	4567      	cmp	r7, ip
 8006d38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d3c:	d8e6      	bhi.n	8006d0c <__multiply+0x10c>
 8006d3e:	9a01      	ldr	r2, [sp, #4]
 8006d40:	50a9      	str	r1, [r5, r2]
 8006d42:	3504      	adds	r5, #4
 8006d44:	e79a      	b.n	8006c7c <__multiply+0x7c>
 8006d46:	3e01      	subs	r6, #1
 8006d48:	e79c      	b.n	8006c84 <__multiply+0x84>
 8006d4a:	bf00      	nop
 8006d4c:	08008b57 	.word	0x08008b57
 8006d50:	08008b68 	.word	0x08008b68

08006d54 <__pow5mult>:
 8006d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d58:	4615      	mov	r5, r2
 8006d5a:	f012 0203 	ands.w	r2, r2, #3
 8006d5e:	4606      	mov	r6, r0
 8006d60:	460f      	mov	r7, r1
 8006d62:	d007      	beq.n	8006d74 <__pow5mult+0x20>
 8006d64:	4c25      	ldr	r4, [pc, #148]	; (8006dfc <__pow5mult+0xa8>)
 8006d66:	3a01      	subs	r2, #1
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d6e:	f7ff fe9b 	bl	8006aa8 <__multadd>
 8006d72:	4607      	mov	r7, r0
 8006d74:	10ad      	asrs	r5, r5, #2
 8006d76:	d03d      	beq.n	8006df4 <__pow5mult+0xa0>
 8006d78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d7a:	b97c      	cbnz	r4, 8006d9c <__pow5mult+0x48>
 8006d7c:	2010      	movs	r0, #16
 8006d7e:	f7fe f9b5 	bl	80050ec <malloc>
 8006d82:	4602      	mov	r2, r0
 8006d84:	6270      	str	r0, [r6, #36]	; 0x24
 8006d86:	b928      	cbnz	r0, 8006d94 <__pow5mult+0x40>
 8006d88:	4b1d      	ldr	r3, [pc, #116]	; (8006e00 <__pow5mult+0xac>)
 8006d8a:	481e      	ldr	r0, [pc, #120]	; (8006e04 <__pow5mult+0xb0>)
 8006d8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d90:	f000 f9d4 	bl	800713c <__assert_func>
 8006d94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d98:	6004      	str	r4, [r0, #0]
 8006d9a:	60c4      	str	r4, [r0, #12]
 8006d9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006da0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006da4:	b94c      	cbnz	r4, 8006dba <__pow5mult+0x66>
 8006da6:	f240 2171 	movw	r1, #625	; 0x271
 8006daa:	4630      	mov	r0, r6
 8006dac:	f7ff ff12 	bl	8006bd4 <__i2b>
 8006db0:	2300      	movs	r3, #0
 8006db2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006db6:	4604      	mov	r4, r0
 8006db8:	6003      	str	r3, [r0, #0]
 8006dba:	f04f 0900 	mov.w	r9, #0
 8006dbe:	07eb      	lsls	r3, r5, #31
 8006dc0:	d50a      	bpl.n	8006dd8 <__pow5mult+0x84>
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	f7ff ff1a 	bl	8006c00 <__multiply>
 8006dcc:	4639      	mov	r1, r7
 8006dce:	4680      	mov	r8, r0
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	f7ff fe47 	bl	8006a64 <_Bfree>
 8006dd6:	4647      	mov	r7, r8
 8006dd8:	106d      	asrs	r5, r5, #1
 8006dda:	d00b      	beq.n	8006df4 <__pow5mult+0xa0>
 8006ddc:	6820      	ldr	r0, [r4, #0]
 8006dde:	b938      	cbnz	r0, 8006df0 <__pow5mult+0x9c>
 8006de0:	4622      	mov	r2, r4
 8006de2:	4621      	mov	r1, r4
 8006de4:	4630      	mov	r0, r6
 8006de6:	f7ff ff0b 	bl	8006c00 <__multiply>
 8006dea:	6020      	str	r0, [r4, #0]
 8006dec:	f8c0 9000 	str.w	r9, [r0]
 8006df0:	4604      	mov	r4, r0
 8006df2:	e7e4      	b.n	8006dbe <__pow5mult+0x6a>
 8006df4:	4638      	mov	r0, r7
 8006df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dfa:	bf00      	nop
 8006dfc:	08008cb8 	.word	0x08008cb8
 8006e00:	08008ae5 	.word	0x08008ae5
 8006e04:	08008b68 	.word	0x08008b68

08006e08 <__lshift>:
 8006e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	6849      	ldr	r1, [r1, #4]
 8006e10:	6923      	ldr	r3, [r4, #16]
 8006e12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e16:	68a3      	ldr	r3, [r4, #8]
 8006e18:	4607      	mov	r7, r0
 8006e1a:	4691      	mov	r9, r2
 8006e1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e20:	f108 0601 	add.w	r6, r8, #1
 8006e24:	42b3      	cmp	r3, r6
 8006e26:	db0b      	blt.n	8006e40 <__lshift+0x38>
 8006e28:	4638      	mov	r0, r7
 8006e2a:	f7ff fddb 	bl	80069e4 <_Balloc>
 8006e2e:	4605      	mov	r5, r0
 8006e30:	b948      	cbnz	r0, 8006e46 <__lshift+0x3e>
 8006e32:	4602      	mov	r2, r0
 8006e34:	4b2a      	ldr	r3, [pc, #168]	; (8006ee0 <__lshift+0xd8>)
 8006e36:	482b      	ldr	r0, [pc, #172]	; (8006ee4 <__lshift+0xdc>)
 8006e38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e3c:	f000 f97e 	bl	800713c <__assert_func>
 8006e40:	3101      	adds	r1, #1
 8006e42:	005b      	lsls	r3, r3, #1
 8006e44:	e7ee      	b.n	8006e24 <__lshift+0x1c>
 8006e46:	2300      	movs	r3, #0
 8006e48:	f100 0114 	add.w	r1, r0, #20
 8006e4c:	f100 0210 	add.w	r2, r0, #16
 8006e50:	4618      	mov	r0, r3
 8006e52:	4553      	cmp	r3, sl
 8006e54:	db37      	blt.n	8006ec6 <__lshift+0xbe>
 8006e56:	6920      	ldr	r0, [r4, #16]
 8006e58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e5c:	f104 0314 	add.w	r3, r4, #20
 8006e60:	f019 091f 	ands.w	r9, r9, #31
 8006e64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e6c:	d02f      	beq.n	8006ece <__lshift+0xc6>
 8006e6e:	f1c9 0e20 	rsb	lr, r9, #32
 8006e72:	468a      	mov	sl, r1
 8006e74:	f04f 0c00 	mov.w	ip, #0
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	fa02 f209 	lsl.w	r2, r2, r9
 8006e7e:	ea42 020c 	orr.w	r2, r2, ip
 8006e82:	f84a 2b04 	str.w	r2, [sl], #4
 8006e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e8a:	4298      	cmp	r0, r3
 8006e8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006e90:	d8f2      	bhi.n	8006e78 <__lshift+0x70>
 8006e92:	1b03      	subs	r3, r0, r4
 8006e94:	3b15      	subs	r3, #21
 8006e96:	f023 0303 	bic.w	r3, r3, #3
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	f104 0215 	add.w	r2, r4, #21
 8006ea0:	4290      	cmp	r0, r2
 8006ea2:	bf38      	it	cc
 8006ea4:	2304      	movcc	r3, #4
 8006ea6:	f841 c003 	str.w	ip, [r1, r3]
 8006eaa:	f1bc 0f00 	cmp.w	ip, #0
 8006eae:	d001      	beq.n	8006eb4 <__lshift+0xac>
 8006eb0:	f108 0602 	add.w	r6, r8, #2
 8006eb4:	3e01      	subs	r6, #1
 8006eb6:	4638      	mov	r0, r7
 8006eb8:	612e      	str	r6, [r5, #16]
 8006eba:	4621      	mov	r1, r4
 8006ebc:	f7ff fdd2 	bl	8006a64 <_Bfree>
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006eca:	3301      	adds	r3, #1
 8006ecc:	e7c1      	b.n	8006e52 <__lshift+0x4a>
 8006ece:	3904      	subs	r1, #4
 8006ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ed4:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ed8:	4298      	cmp	r0, r3
 8006eda:	d8f9      	bhi.n	8006ed0 <__lshift+0xc8>
 8006edc:	e7ea      	b.n	8006eb4 <__lshift+0xac>
 8006ede:	bf00      	nop
 8006ee0:	08008b57 	.word	0x08008b57
 8006ee4:	08008b68 	.word	0x08008b68

08006ee8 <__mcmp>:
 8006ee8:	b530      	push	{r4, r5, lr}
 8006eea:	6902      	ldr	r2, [r0, #16]
 8006eec:	690c      	ldr	r4, [r1, #16]
 8006eee:	1b12      	subs	r2, r2, r4
 8006ef0:	d10e      	bne.n	8006f10 <__mcmp+0x28>
 8006ef2:	f100 0314 	add.w	r3, r0, #20
 8006ef6:	3114      	adds	r1, #20
 8006ef8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006efc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006f00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006f04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006f08:	42a5      	cmp	r5, r4
 8006f0a:	d003      	beq.n	8006f14 <__mcmp+0x2c>
 8006f0c:	d305      	bcc.n	8006f1a <__mcmp+0x32>
 8006f0e:	2201      	movs	r2, #1
 8006f10:	4610      	mov	r0, r2
 8006f12:	bd30      	pop	{r4, r5, pc}
 8006f14:	4283      	cmp	r3, r0
 8006f16:	d3f3      	bcc.n	8006f00 <__mcmp+0x18>
 8006f18:	e7fa      	b.n	8006f10 <__mcmp+0x28>
 8006f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f1e:	e7f7      	b.n	8006f10 <__mcmp+0x28>

08006f20 <__mdiff>:
 8006f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	460c      	mov	r4, r1
 8006f26:	4606      	mov	r6, r0
 8006f28:	4611      	mov	r1, r2
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	4690      	mov	r8, r2
 8006f2e:	f7ff ffdb 	bl	8006ee8 <__mcmp>
 8006f32:	1e05      	subs	r5, r0, #0
 8006f34:	d110      	bne.n	8006f58 <__mdiff+0x38>
 8006f36:	4629      	mov	r1, r5
 8006f38:	4630      	mov	r0, r6
 8006f3a:	f7ff fd53 	bl	80069e4 <_Balloc>
 8006f3e:	b930      	cbnz	r0, 8006f4e <__mdiff+0x2e>
 8006f40:	4b3a      	ldr	r3, [pc, #232]	; (800702c <__mdiff+0x10c>)
 8006f42:	4602      	mov	r2, r0
 8006f44:	f240 2132 	movw	r1, #562	; 0x232
 8006f48:	4839      	ldr	r0, [pc, #228]	; (8007030 <__mdiff+0x110>)
 8006f4a:	f000 f8f7 	bl	800713c <__assert_func>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f58:	bfa4      	itt	ge
 8006f5a:	4643      	movge	r3, r8
 8006f5c:	46a0      	movge	r8, r4
 8006f5e:	4630      	mov	r0, r6
 8006f60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f64:	bfa6      	itte	ge
 8006f66:	461c      	movge	r4, r3
 8006f68:	2500      	movge	r5, #0
 8006f6a:	2501      	movlt	r5, #1
 8006f6c:	f7ff fd3a 	bl	80069e4 <_Balloc>
 8006f70:	b920      	cbnz	r0, 8006f7c <__mdiff+0x5c>
 8006f72:	4b2e      	ldr	r3, [pc, #184]	; (800702c <__mdiff+0x10c>)
 8006f74:	4602      	mov	r2, r0
 8006f76:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006f7a:	e7e5      	b.n	8006f48 <__mdiff+0x28>
 8006f7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f80:	6926      	ldr	r6, [r4, #16]
 8006f82:	60c5      	str	r5, [r0, #12]
 8006f84:	f104 0914 	add.w	r9, r4, #20
 8006f88:	f108 0514 	add.w	r5, r8, #20
 8006f8c:	f100 0e14 	add.w	lr, r0, #20
 8006f90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f98:	f108 0210 	add.w	r2, r8, #16
 8006f9c:	46f2      	mov	sl, lr
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	f859 3b04 	ldr.w	r3, [r9], #4
 8006fa4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006fa8:	fa1f f883 	uxth.w	r8, r3
 8006fac:	fa11 f18b 	uxtah	r1, r1, fp
 8006fb0:	0c1b      	lsrs	r3, r3, #16
 8006fb2:	eba1 0808 	sub.w	r8, r1, r8
 8006fb6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006fba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006fbe:	fa1f f888 	uxth.w	r8, r8
 8006fc2:	1419      	asrs	r1, r3, #16
 8006fc4:	454e      	cmp	r6, r9
 8006fc6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006fca:	f84a 3b04 	str.w	r3, [sl], #4
 8006fce:	d8e7      	bhi.n	8006fa0 <__mdiff+0x80>
 8006fd0:	1b33      	subs	r3, r6, r4
 8006fd2:	3b15      	subs	r3, #21
 8006fd4:	f023 0303 	bic.w	r3, r3, #3
 8006fd8:	3304      	adds	r3, #4
 8006fda:	3415      	adds	r4, #21
 8006fdc:	42a6      	cmp	r6, r4
 8006fde:	bf38      	it	cc
 8006fe0:	2304      	movcc	r3, #4
 8006fe2:	441d      	add	r5, r3
 8006fe4:	4473      	add	r3, lr
 8006fe6:	469e      	mov	lr, r3
 8006fe8:	462e      	mov	r6, r5
 8006fea:	4566      	cmp	r6, ip
 8006fec:	d30e      	bcc.n	800700c <__mdiff+0xec>
 8006fee:	f10c 0203 	add.w	r2, ip, #3
 8006ff2:	1b52      	subs	r2, r2, r5
 8006ff4:	f022 0203 	bic.w	r2, r2, #3
 8006ff8:	3d03      	subs	r5, #3
 8006ffa:	45ac      	cmp	ip, r5
 8006ffc:	bf38      	it	cc
 8006ffe:	2200      	movcc	r2, #0
 8007000:	441a      	add	r2, r3
 8007002:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007006:	b17b      	cbz	r3, 8007028 <__mdiff+0x108>
 8007008:	6107      	str	r7, [r0, #16]
 800700a:	e7a3      	b.n	8006f54 <__mdiff+0x34>
 800700c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007010:	fa11 f288 	uxtah	r2, r1, r8
 8007014:	1414      	asrs	r4, r2, #16
 8007016:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800701a:	b292      	uxth	r2, r2
 800701c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007020:	f84e 2b04 	str.w	r2, [lr], #4
 8007024:	1421      	asrs	r1, r4, #16
 8007026:	e7e0      	b.n	8006fea <__mdiff+0xca>
 8007028:	3f01      	subs	r7, #1
 800702a:	e7ea      	b.n	8007002 <__mdiff+0xe2>
 800702c:	08008b57 	.word	0x08008b57
 8007030:	08008b68 	.word	0x08008b68

08007034 <__d2b>:
 8007034:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007038:	4689      	mov	r9, r1
 800703a:	2101      	movs	r1, #1
 800703c:	ec57 6b10 	vmov	r6, r7, d0
 8007040:	4690      	mov	r8, r2
 8007042:	f7ff fccf 	bl	80069e4 <_Balloc>
 8007046:	4604      	mov	r4, r0
 8007048:	b930      	cbnz	r0, 8007058 <__d2b+0x24>
 800704a:	4602      	mov	r2, r0
 800704c:	4b25      	ldr	r3, [pc, #148]	; (80070e4 <__d2b+0xb0>)
 800704e:	4826      	ldr	r0, [pc, #152]	; (80070e8 <__d2b+0xb4>)
 8007050:	f240 310a 	movw	r1, #778	; 0x30a
 8007054:	f000 f872 	bl	800713c <__assert_func>
 8007058:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800705c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007060:	bb35      	cbnz	r5, 80070b0 <__d2b+0x7c>
 8007062:	2e00      	cmp	r6, #0
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	d028      	beq.n	80070ba <__d2b+0x86>
 8007068:	4668      	mov	r0, sp
 800706a:	9600      	str	r6, [sp, #0]
 800706c:	f7ff fd82 	bl	8006b74 <__lo0bits>
 8007070:	9900      	ldr	r1, [sp, #0]
 8007072:	b300      	cbz	r0, 80070b6 <__d2b+0x82>
 8007074:	9a01      	ldr	r2, [sp, #4]
 8007076:	f1c0 0320 	rsb	r3, r0, #32
 800707a:	fa02 f303 	lsl.w	r3, r2, r3
 800707e:	430b      	orrs	r3, r1
 8007080:	40c2      	lsrs	r2, r0
 8007082:	6163      	str	r3, [r4, #20]
 8007084:	9201      	str	r2, [sp, #4]
 8007086:	9b01      	ldr	r3, [sp, #4]
 8007088:	61a3      	str	r3, [r4, #24]
 800708a:	2b00      	cmp	r3, #0
 800708c:	bf14      	ite	ne
 800708e:	2202      	movne	r2, #2
 8007090:	2201      	moveq	r2, #1
 8007092:	6122      	str	r2, [r4, #16]
 8007094:	b1d5      	cbz	r5, 80070cc <__d2b+0x98>
 8007096:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800709a:	4405      	add	r5, r0
 800709c:	f8c9 5000 	str.w	r5, [r9]
 80070a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80070a4:	f8c8 0000 	str.w	r0, [r8]
 80070a8:	4620      	mov	r0, r4
 80070aa:	b003      	add	sp, #12
 80070ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070b4:	e7d5      	b.n	8007062 <__d2b+0x2e>
 80070b6:	6161      	str	r1, [r4, #20]
 80070b8:	e7e5      	b.n	8007086 <__d2b+0x52>
 80070ba:	a801      	add	r0, sp, #4
 80070bc:	f7ff fd5a 	bl	8006b74 <__lo0bits>
 80070c0:	9b01      	ldr	r3, [sp, #4]
 80070c2:	6163      	str	r3, [r4, #20]
 80070c4:	2201      	movs	r2, #1
 80070c6:	6122      	str	r2, [r4, #16]
 80070c8:	3020      	adds	r0, #32
 80070ca:	e7e3      	b.n	8007094 <__d2b+0x60>
 80070cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80070d4:	f8c9 0000 	str.w	r0, [r9]
 80070d8:	6918      	ldr	r0, [r3, #16]
 80070da:	f7ff fd2b 	bl	8006b34 <__hi0bits>
 80070de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070e2:	e7df      	b.n	80070a4 <__d2b+0x70>
 80070e4:	08008b57 	.word	0x08008b57
 80070e8:	08008b68 	.word	0x08008b68

080070ec <_calloc_r>:
 80070ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070ee:	fba1 2402 	umull	r2, r4, r1, r2
 80070f2:	b94c      	cbnz	r4, 8007108 <_calloc_r+0x1c>
 80070f4:	4611      	mov	r1, r2
 80070f6:	9201      	str	r2, [sp, #4]
 80070f8:	f7fe f874 	bl	80051e4 <_malloc_r>
 80070fc:	9a01      	ldr	r2, [sp, #4]
 80070fe:	4605      	mov	r5, r0
 8007100:	b930      	cbnz	r0, 8007110 <_calloc_r+0x24>
 8007102:	4628      	mov	r0, r5
 8007104:	b003      	add	sp, #12
 8007106:	bd30      	pop	{r4, r5, pc}
 8007108:	220c      	movs	r2, #12
 800710a:	6002      	str	r2, [r0, #0]
 800710c:	2500      	movs	r5, #0
 800710e:	e7f8      	b.n	8007102 <_calloc_r+0x16>
 8007110:	4621      	mov	r1, r4
 8007112:	f7fd fff3 	bl	80050fc <memset>
 8007116:	e7f4      	b.n	8007102 <_calloc_r+0x16>

08007118 <_read_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4d07      	ldr	r5, [pc, #28]	; (8007138 <_read_r+0x20>)
 800711c:	4604      	mov	r4, r0
 800711e:	4608      	mov	r0, r1
 8007120:	4611      	mov	r1, r2
 8007122:	2200      	movs	r2, #0
 8007124:	602a      	str	r2, [r5, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	f7fa f900 	bl	800132c <_read>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d102      	bne.n	8007136 <_read_r+0x1e>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	b103      	cbz	r3, 8007136 <_read_r+0x1e>
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	20000424 	.word	0x20000424

0800713c <__assert_func>:
 800713c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800713e:	4614      	mov	r4, r2
 8007140:	461a      	mov	r2, r3
 8007142:	4b09      	ldr	r3, [pc, #36]	; (8007168 <__assert_func+0x2c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4605      	mov	r5, r0
 8007148:	68d8      	ldr	r0, [r3, #12]
 800714a:	b14c      	cbz	r4, 8007160 <__assert_func+0x24>
 800714c:	4b07      	ldr	r3, [pc, #28]	; (800716c <__assert_func+0x30>)
 800714e:	9100      	str	r1, [sp, #0]
 8007150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007154:	4906      	ldr	r1, [pc, #24]	; (8007170 <__assert_func+0x34>)
 8007156:	462b      	mov	r3, r5
 8007158:	f000 f9a6 	bl	80074a8 <fiprintf>
 800715c:	f000 fc12 	bl	8007984 <abort>
 8007160:	4b04      	ldr	r3, [pc, #16]	; (8007174 <__assert_func+0x38>)
 8007162:	461c      	mov	r4, r3
 8007164:	e7f3      	b.n	800714e <__assert_func+0x12>
 8007166:	bf00      	nop
 8007168:	20000008 	.word	0x20000008
 800716c:	08008cc4 	.word	0x08008cc4
 8007170:	08008cd1 	.word	0x08008cd1
 8007174:	08008cff 	.word	0x08008cff

08007178 <__sflush_r>:
 8007178:	898a      	ldrh	r2, [r1, #12]
 800717a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800717e:	4605      	mov	r5, r0
 8007180:	0710      	lsls	r0, r2, #28
 8007182:	460c      	mov	r4, r1
 8007184:	d458      	bmi.n	8007238 <__sflush_r+0xc0>
 8007186:	684b      	ldr	r3, [r1, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	dc05      	bgt.n	8007198 <__sflush_r+0x20>
 800718c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800718e:	2b00      	cmp	r3, #0
 8007190:	dc02      	bgt.n	8007198 <__sflush_r+0x20>
 8007192:	2000      	movs	r0, #0
 8007194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800719a:	2e00      	cmp	r6, #0
 800719c:	d0f9      	beq.n	8007192 <__sflush_r+0x1a>
 800719e:	2300      	movs	r3, #0
 80071a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071a4:	682f      	ldr	r7, [r5, #0]
 80071a6:	602b      	str	r3, [r5, #0]
 80071a8:	d032      	beq.n	8007210 <__sflush_r+0x98>
 80071aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	075a      	lsls	r2, r3, #29
 80071b0:	d505      	bpl.n	80071be <__sflush_r+0x46>
 80071b2:	6863      	ldr	r3, [r4, #4]
 80071b4:	1ac0      	subs	r0, r0, r3
 80071b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071b8:	b10b      	cbz	r3, 80071be <__sflush_r+0x46>
 80071ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071bc:	1ac0      	subs	r0, r0, r3
 80071be:	2300      	movs	r3, #0
 80071c0:	4602      	mov	r2, r0
 80071c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071c4:	6a21      	ldr	r1, [r4, #32]
 80071c6:	4628      	mov	r0, r5
 80071c8:	47b0      	blx	r6
 80071ca:	1c43      	adds	r3, r0, #1
 80071cc:	89a3      	ldrh	r3, [r4, #12]
 80071ce:	d106      	bne.n	80071de <__sflush_r+0x66>
 80071d0:	6829      	ldr	r1, [r5, #0]
 80071d2:	291d      	cmp	r1, #29
 80071d4:	d82c      	bhi.n	8007230 <__sflush_r+0xb8>
 80071d6:	4a2a      	ldr	r2, [pc, #168]	; (8007280 <__sflush_r+0x108>)
 80071d8:	40ca      	lsrs	r2, r1
 80071da:	07d6      	lsls	r6, r2, #31
 80071dc:	d528      	bpl.n	8007230 <__sflush_r+0xb8>
 80071de:	2200      	movs	r2, #0
 80071e0:	6062      	str	r2, [r4, #4]
 80071e2:	04d9      	lsls	r1, r3, #19
 80071e4:	6922      	ldr	r2, [r4, #16]
 80071e6:	6022      	str	r2, [r4, #0]
 80071e8:	d504      	bpl.n	80071f4 <__sflush_r+0x7c>
 80071ea:	1c42      	adds	r2, r0, #1
 80071ec:	d101      	bne.n	80071f2 <__sflush_r+0x7a>
 80071ee:	682b      	ldr	r3, [r5, #0]
 80071f0:	b903      	cbnz	r3, 80071f4 <__sflush_r+0x7c>
 80071f2:	6560      	str	r0, [r4, #84]	; 0x54
 80071f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071f6:	602f      	str	r7, [r5, #0]
 80071f8:	2900      	cmp	r1, #0
 80071fa:	d0ca      	beq.n	8007192 <__sflush_r+0x1a>
 80071fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007200:	4299      	cmp	r1, r3
 8007202:	d002      	beq.n	800720a <__sflush_r+0x92>
 8007204:	4628      	mov	r0, r5
 8007206:	f7fd ff81 	bl	800510c <_free_r>
 800720a:	2000      	movs	r0, #0
 800720c:	6360      	str	r0, [r4, #52]	; 0x34
 800720e:	e7c1      	b.n	8007194 <__sflush_r+0x1c>
 8007210:	6a21      	ldr	r1, [r4, #32]
 8007212:	2301      	movs	r3, #1
 8007214:	4628      	mov	r0, r5
 8007216:	47b0      	blx	r6
 8007218:	1c41      	adds	r1, r0, #1
 800721a:	d1c7      	bne.n	80071ac <__sflush_r+0x34>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0c4      	beq.n	80071ac <__sflush_r+0x34>
 8007222:	2b1d      	cmp	r3, #29
 8007224:	d001      	beq.n	800722a <__sflush_r+0xb2>
 8007226:	2b16      	cmp	r3, #22
 8007228:	d101      	bne.n	800722e <__sflush_r+0xb6>
 800722a:	602f      	str	r7, [r5, #0]
 800722c:	e7b1      	b.n	8007192 <__sflush_r+0x1a>
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007234:	81a3      	strh	r3, [r4, #12]
 8007236:	e7ad      	b.n	8007194 <__sflush_r+0x1c>
 8007238:	690f      	ldr	r7, [r1, #16]
 800723a:	2f00      	cmp	r7, #0
 800723c:	d0a9      	beq.n	8007192 <__sflush_r+0x1a>
 800723e:	0793      	lsls	r3, r2, #30
 8007240:	680e      	ldr	r6, [r1, #0]
 8007242:	bf08      	it	eq
 8007244:	694b      	ldreq	r3, [r1, #20]
 8007246:	600f      	str	r7, [r1, #0]
 8007248:	bf18      	it	ne
 800724a:	2300      	movne	r3, #0
 800724c:	eba6 0807 	sub.w	r8, r6, r7
 8007250:	608b      	str	r3, [r1, #8]
 8007252:	f1b8 0f00 	cmp.w	r8, #0
 8007256:	dd9c      	ble.n	8007192 <__sflush_r+0x1a>
 8007258:	6a21      	ldr	r1, [r4, #32]
 800725a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800725c:	4643      	mov	r3, r8
 800725e:	463a      	mov	r2, r7
 8007260:	4628      	mov	r0, r5
 8007262:	47b0      	blx	r6
 8007264:	2800      	cmp	r0, #0
 8007266:	dc06      	bgt.n	8007276 <__sflush_r+0xfe>
 8007268:	89a3      	ldrh	r3, [r4, #12]
 800726a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800726e:	81a3      	strh	r3, [r4, #12]
 8007270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007274:	e78e      	b.n	8007194 <__sflush_r+0x1c>
 8007276:	4407      	add	r7, r0
 8007278:	eba8 0800 	sub.w	r8, r8, r0
 800727c:	e7e9      	b.n	8007252 <__sflush_r+0xda>
 800727e:	bf00      	nop
 8007280:	20400001 	.word	0x20400001

08007284 <_fflush_r>:
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	690b      	ldr	r3, [r1, #16]
 8007288:	4605      	mov	r5, r0
 800728a:	460c      	mov	r4, r1
 800728c:	b913      	cbnz	r3, 8007294 <_fflush_r+0x10>
 800728e:	2500      	movs	r5, #0
 8007290:	4628      	mov	r0, r5
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	b118      	cbz	r0, 800729e <_fflush_r+0x1a>
 8007296:	6983      	ldr	r3, [r0, #24]
 8007298:	b90b      	cbnz	r3, 800729e <_fflush_r+0x1a>
 800729a:	f000 f887 	bl	80073ac <__sinit>
 800729e:	4b14      	ldr	r3, [pc, #80]	; (80072f0 <_fflush_r+0x6c>)
 80072a0:	429c      	cmp	r4, r3
 80072a2:	d11b      	bne.n	80072dc <_fflush_r+0x58>
 80072a4:	686c      	ldr	r4, [r5, #4]
 80072a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0ef      	beq.n	800728e <_fflush_r+0xa>
 80072ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072b0:	07d0      	lsls	r0, r2, #31
 80072b2:	d404      	bmi.n	80072be <_fflush_r+0x3a>
 80072b4:	0599      	lsls	r1, r3, #22
 80072b6:	d402      	bmi.n	80072be <_fflush_r+0x3a>
 80072b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072ba:	f000 f927 	bl	800750c <__retarget_lock_acquire_recursive>
 80072be:	4628      	mov	r0, r5
 80072c0:	4621      	mov	r1, r4
 80072c2:	f7ff ff59 	bl	8007178 <__sflush_r>
 80072c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072c8:	07da      	lsls	r2, r3, #31
 80072ca:	4605      	mov	r5, r0
 80072cc:	d4e0      	bmi.n	8007290 <_fflush_r+0xc>
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	059b      	lsls	r3, r3, #22
 80072d2:	d4dd      	bmi.n	8007290 <_fflush_r+0xc>
 80072d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072d6:	f000 f91a 	bl	800750e <__retarget_lock_release_recursive>
 80072da:	e7d9      	b.n	8007290 <_fflush_r+0xc>
 80072dc:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <_fflush_r+0x70>)
 80072de:	429c      	cmp	r4, r3
 80072e0:	d101      	bne.n	80072e6 <_fflush_r+0x62>
 80072e2:	68ac      	ldr	r4, [r5, #8]
 80072e4:	e7df      	b.n	80072a6 <_fflush_r+0x22>
 80072e6:	4b04      	ldr	r3, [pc, #16]	; (80072f8 <_fflush_r+0x74>)
 80072e8:	429c      	cmp	r4, r3
 80072ea:	bf08      	it	eq
 80072ec:	68ec      	ldreq	r4, [r5, #12]
 80072ee:	e7da      	b.n	80072a6 <_fflush_r+0x22>
 80072f0:	08008e24 	.word	0x08008e24
 80072f4:	08008e44 	.word	0x08008e44
 80072f8:	08008e04 	.word	0x08008e04

080072fc <std>:
 80072fc:	2300      	movs	r3, #0
 80072fe:	b510      	push	{r4, lr}
 8007300:	4604      	mov	r4, r0
 8007302:	e9c0 3300 	strd	r3, r3, [r0]
 8007306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800730a:	6083      	str	r3, [r0, #8]
 800730c:	8181      	strh	r1, [r0, #12]
 800730e:	6643      	str	r3, [r0, #100]	; 0x64
 8007310:	81c2      	strh	r2, [r0, #14]
 8007312:	6183      	str	r3, [r0, #24]
 8007314:	4619      	mov	r1, r3
 8007316:	2208      	movs	r2, #8
 8007318:	305c      	adds	r0, #92	; 0x5c
 800731a:	f7fd feef 	bl	80050fc <memset>
 800731e:	4b05      	ldr	r3, [pc, #20]	; (8007334 <std+0x38>)
 8007320:	6263      	str	r3, [r4, #36]	; 0x24
 8007322:	4b05      	ldr	r3, [pc, #20]	; (8007338 <std+0x3c>)
 8007324:	62a3      	str	r3, [r4, #40]	; 0x28
 8007326:	4b05      	ldr	r3, [pc, #20]	; (800733c <std+0x40>)
 8007328:	62e3      	str	r3, [r4, #44]	; 0x2c
 800732a:	4b05      	ldr	r3, [pc, #20]	; (8007340 <std+0x44>)
 800732c:	6224      	str	r4, [r4, #32]
 800732e:	6323      	str	r3, [r4, #48]	; 0x30
 8007330:	bd10      	pop	{r4, pc}
 8007332:	bf00      	nop
 8007334:	08005bc1 	.word	0x08005bc1
 8007338:	08005be3 	.word	0x08005be3
 800733c:	08005c1b 	.word	0x08005c1b
 8007340:	08005c3f 	.word	0x08005c3f

08007344 <_cleanup_r>:
 8007344:	4901      	ldr	r1, [pc, #4]	; (800734c <_cleanup_r+0x8>)
 8007346:	f000 b8c1 	b.w	80074cc <_fwalk_reent>
 800734a:	bf00      	nop
 800734c:	08007285 	.word	0x08007285

08007350 <__sfmoreglue>:
 8007350:	b570      	push	{r4, r5, r6, lr}
 8007352:	2268      	movs	r2, #104	; 0x68
 8007354:	1e4d      	subs	r5, r1, #1
 8007356:	4355      	muls	r5, r2
 8007358:	460e      	mov	r6, r1
 800735a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800735e:	f7fd ff41 	bl	80051e4 <_malloc_r>
 8007362:	4604      	mov	r4, r0
 8007364:	b140      	cbz	r0, 8007378 <__sfmoreglue+0x28>
 8007366:	2100      	movs	r1, #0
 8007368:	e9c0 1600 	strd	r1, r6, [r0]
 800736c:	300c      	adds	r0, #12
 800736e:	60a0      	str	r0, [r4, #8]
 8007370:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007374:	f7fd fec2 	bl	80050fc <memset>
 8007378:	4620      	mov	r0, r4
 800737a:	bd70      	pop	{r4, r5, r6, pc}

0800737c <__sfp_lock_acquire>:
 800737c:	4801      	ldr	r0, [pc, #4]	; (8007384 <__sfp_lock_acquire+0x8>)
 800737e:	f000 b8c5 	b.w	800750c <__retarget_lock_acquire_recursive>
 8007382:	bf00      	nop
 8007384:	20000429 	.word	0x20000429

08007388 <__sfp_lock_release>:
 8007388:	4801      	ldr	r0, [pc, #4]	; (8007390 <__sfp_lock_release+0x8>)
 800738a:	f000 b8c0 	b.w	800750e <__retarget_lock_release_recursive>
 800738e:	bf00      	nop
 8007390:	20000429 	.word	0x20000429

08007394 <__sinit_lock_acquire>:
 8007394:	4801      	ldr	r0, [pc, #4]	; (800739c <__sinit_lock_acquire+0x8>)
 8007396:	f000 b8b9 	b.w	800750c <__retarget_lock_acquire_recursive>
 800739a:	bf00      	nop
 800739c:	2000042a 	.word	0x2000042a

080073a0 <__sinit_lock_release>:
 80073a0:	4801      	ldr	r0, [pc, #4]	; (80073a8 <__sinit_lock_release+0x8>)
 80073a2:	f000 b8b4 	b.w	800750e <__retarget_lock_release_recursive>
 80073a6:	bf00      	nop
 80073a8:	2000042a 	.word	0x2000042a

080073ac <__sinit>:
 80073ac:	b510      	push	{r4, lr}
 80073ae:	4604      	mov	r4, r0
 80073b0:	f7ff fff0 	bl	8007394 <__sinit_lock_acquire>
 80073b4:	69a3      	ldr	r3, [r4, #24]
 80073b6:	b11b      	cbz	r3, 80073c0 <__sinit+0x14>
 80073b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073bc:	f7ff bff0 	b.w	80073a0 <__sinit_lock_release>
 80073c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80073c4:	6523      	str	r3, [r4, #80]	; 0x50
 80073c6:	4b13      	ldr	r3, [pc, #76]	; (8007414 <__sinit+0x68>)
 80073c8:	4a13      	ldr	r2, [pc, #76]	; (8007418 <__sinit+0x6c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80073ce:	42a3      	cmp	r3, r4
 80073d0:	bf04      	itt	eq
 80073d2:	2301      	moveq	r3, #1
 80073d4:	61a3      	streq	r3, [r4, #24]
 80073d6:	4620      	mov	r0, r4
 80073d8:	f000 f820 	bl	800741c <__sfp>
 80073dc:	6060      	str	r0, [r4, #4]
 80073de:	4620      	mov	r0, r4
 80073e0:	f000 f81c 	bl	800741c <__sfp>
 80073e4:	60a0      	str	r0, [r4, #8]
 80073e6:	4620      	mov	r0, r4
 80073e8:	f000 f818 	bl	800741c <__sfp>
 80073ec:	2200      	movs	r2, #0
 80073ee:	60e0      	str	r0, [r4, #12]
 80073f0:	2104      	movs	r1, #4
 80073f2:	6860      	ldr	r0, [r4, #4]
 80073f4:	f7ff ff82 	bl	80072fc <std>
 80073f8:	68a0      	ldr	r0, [r4, #8]
 80073fa:	2201      	movs	r2, #1
 80073fc:	2109      	movs	r1, #9
 80073fe:	f7ff ff7d 	bl	80072fc <std>
 8007402:	68e0      	ldr	r0, [r4, #12]
 8007404:	2202      	movs	r2, #2
 8007406:	2112      	movs	r1, #18
 8007408:	f7ff ff78 	bl	80072fc <std>
 800740c:	2301      	movs	r3, #1
 800740e:	61a3      	str	r3, [r4, #24]
 8007410:	e7d2      	b.n	80073b8 <__sinit+0xc>
 8007412:	bf00      	nop
 8007414:	08008aa0 	.word	0x08008aa0
 8007418:	08007345 	.word	0x08007345

0800741c <__sfp>:
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	4607      	mov	r7, r0
 8007420:	f7ff ffac 	bl	800737c <__sfp_lock_acquire>
 8007424:	4b1e      	ldr	r3, [pc, #120]	; (80074a0 <__sfp+0x84>)
 8007426:	681e      	ldr	r6, [r3, #0]
 8007428:	69b3      	ldr	r3, [r6, #24]
 800742a:	b913      	cbnz	r3, 8007432 <__sfp+0x16>
 800742c:	4630      	mov	r0, r6
 800742e:	f7ff ffbd 	bl	80073ac <__sinit>
 8007432:	3648      	adds	r6, #72	; 0x48
 8007434:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007438:	3b01      	subs	r3, #1
 800743a:	d503      	bpl.n	8007444 <__sfp+0x28>
 800743c:	6833      	ldr	r3, [r6, #0]
 800743e:	b30b      	cbz	r3, 8007484 <__sfp+0x68>
 8007440:	6836      	ldr	r6, [r6, #0]
 8007442:	e7f7      	b.n	8007434 <__sfp+0x18>
 8007444:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007448:	b9d5      	cbnz	r5, 8007480 <__sfp+0x64>
 800744a:	4b16      	ldr	r3, [pc, #88]	; (80074a4 <__sfp+0x88>)
 800744c:	60e3      	str	r3, [r4, #12]
 800744e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007452:	6665      	str	r5, [r4, #100]	; 0x64
 8007454:	f000 f859 	bl	800750a <__retarget_lock_init_recursive>
 8007458:	f7ff ff96 	bl	8007388 <__sfp_lock_release>
 800745c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007460:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007464:	6025      	str	r5, [r4, #0]
 8007466:	61a5      	str	r5, [r4, #24]
 8007468:	2208      	movs	r2, #8
 800746a:	4629      	mov	r1, r5
 800746c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007470:	f7fd fe44 	bl	80050fc <memset>
 8007474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800747c:	4620      	mov	r0, r4
 800747e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007480:	3468      	adds	r4, #104	; 0x68
 8007482:	e7d9      	b.n	8007438 <__sfp+0x1c>
 8007484:	2104      	movs	r1, #4
 8007486:	4638      	mov	r0, r7
 8007488:	f7ff ff62 	bl	8007350 <__sfmoreglue>
 800748c:	4604      	mov	r4, r0
 800748e:	6030      	str	r0, [r6, #0]
 8007490:	2800      	cmp	r0, #0
 8007492:	d1d5      	bne.n	8007440 <__sfp+0x24>
 8007494:	f7ff ff78 	bl	8007388 <__sfp_lock_release>
 8007498:	230c      	movs	r3, #12
 800749a:	603b      	str	r3, [r7, #0]
 800749c:	e7ee      	b.n	800747c <__sfp+0x60>
 800749e:	bf00      	nop
 80074a0:	08008aa0 	.word	0x08008aa0
 80074a4:	ffff0001 	.word	0xffff0001

080074a8 <fiprintf>:
 80074a8:	b40e      	push	{r1, r2, r3}
 80074aa:	b503      	push	{r0, r1, lr}
 80074ac:	4601      	mov	r1, r0
 80074ae:	ab03      	add	r3, sp, #12
 80074b0:	4805      	ldr	r0, [pc, #20]	; (80074c8 <fiprintf+0x20>)
 80074b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b6:	6800      	ldr	r0, [r0, #0]
 80074b8:	9301      	str	r3, [sp, #4]
 80074ba:	f000 f865 	bl	8007588 <_vfiprintf_r>
 80074be:	b002      	add	sp, #8
 80074c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80074c4:	b003      	add	sp, #12
 80074c6:	4770      	bx	lr
 80074c8:	20000008 	.word	0x20000008

080074cc <_fwalk_reent>:
 80074cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074d0:	4606      	mov	r6, r0
 80074d2:	4688      	mov	r8, r1
 80074d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074d8:	2700      	movs	r7, #0
 80074da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074de:	f1b9 0901 	subs.w	r9, r9, #1
 80074e2:	d505      	bpl.n	80074f0 <_fwalk_reent+0x24>
 80074e4:	6824      	ldr	r4, [r4, #0]
 80074e6:	2c00      	cmp	r4, #0
 80074e8:	d1f7      	bne.n	80074da <_fwalk_reent+0xe>
 80074ea:	4638      	mov	r0, r7
 80074ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074f0:	89ab      	ldrh	r3, [r5, #12]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d907      	bls.n	8007506 <_fwalk_reent+0x3a>
 80074f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074fa:	3301      	adds	r3, #1
 80074fc:	d003      	beq.n	8007506 <_fwalk_reent+0x3a>
 80074fe:	4629      	mov	r1, r5
 8007500:	4630      	mov	r0, r6
 8007502:	47c0      	blx	r8
 8007504:	4307      	orrs	r7, r0
 8007506:	3568      	adds	r5, #104	; 0x68
 8007508:	e7e9      	b.n	80074de <_fwalk_reent+0x12>

0800750a <__retarget_lock_init_recursive>:
 800750a:	4770      	bx	lr

0800750c <__retarget_lock_acquire_recursive>:
 800750c:	4770      	bx	lr

0800750e <__retarget_lock_release_recursive>:
 800750e:	4770      	bx	lr

08007510 <__ascii_mbtowc>:
 8007510:	b082      	sub	sp, #8
 8007512:	b901      	cbnz	r1, 8007516 <__ascii_mbtowc+0x6>
 8007514:	a901      	add	r1, sp, #4
 8007516:	b142      	cbz	r2, 800752a <__ascii_mbtowc+0x1a>
 8007518:	b14b      	cbz	r3, 800752e <__ascii_mbtowc+0x1e>
 800751a:	7813      	ldrb	r3, [r2, #0]
 800751c:	600b      	str	r3, [r1, #0]
 800751e:	7812      	ldrb	r2, [r2, #0]
 8007520:	1e10      	subs	r0, r2, #0
 8007522:	bf18      	it	ne
 8007524:	2001      	movne	r0, #1
 8007526:	b002      	add	sp, #8
 8007528:	4770      	bx	lr
 800752a:	4610      	mov	r0, r2
 800752c:	e7fb      	b.n	8007526 <__ascii_mbtowc+0x16>
 800752e:	f06f 0001 	mvn.w	r0, #1
 8007532:	e7f8      	b.n	8007526 <__ascii_mbtowc+0x16>

08007534 <__sfputc_r>:
 8007534:	6893      	ldr	r3, [r2, #8]
 8007536:	3b01      	subs	r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	b410      	push	{r4}
 800753c:	6093      	str	r3, [r2, #8]
 800753e:	da08      	bge.n	8007552 <__sfputc_r+0x1e>
 8007540:	6994      	ldr	r4, [r2, #24]
 8007542:	42a3      	cmp	r3, r4
 8007544:	db01      	blt.n	800754a <__sfputc_r+0x16>
 8007546:	290a      	cmp	r1, #10
 8007548:	d103      	bne.n	8007552 <__sfputc_r+0x1e>
 800754a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800754e:	f000 b94b 	b.w	80077e8 <__swbuf_r>
 8007552:	6813      	ldr	r3, [r2, #0]
 8007554:	1c58      	adds	r0, r3, #1
 8007556:	6010      	str	r0, [r2, #0]
 8007558:	7019      	strb	r1, [r3, #0]
 800755a:	4608      	mov	r0, r1
 800755c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007560:	4770      	bx	lr

08007562 <__sfputs_r>:
 8007562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007564:	4606      	mov	r6, r0
 8007566:	460f      	mov	r7, r1
 8007568:	4614      	mov	r4, r2
 800756a:	18d5      	adds	r5, r2, r3
 800756c:	42ac      	cmp	r4, r5
 800756e:	d101      	bne.n	8007574 <__sfputs_r+0x12>
 8007570:	2000      	movs	r0, #0
 8007572:	e007      	b.n	8007584 <__sfputs_r+0x22>
 8007574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007578:	463a      	mov	r2, r7
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff ffda 	bl	8007534 <__sfputc_r>
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	d1f3      	bne.n	800756c <__sfputs_r+0xa>
 8007584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007588 <_vfiprintf_r>:
 8007588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758c:	460d      	mov	r5, r1
 800758e:	b09d      	sub	sp, #116	; 0x74
 8007590:	4614      	mov	r4, r2
 8007592:	4698      	mov	r8, r3
 8007594:	4606      	mov	r6, r0
 8007596:	b118      	cbz	r0, 80075a0 <_vfiprintf_r+0x18>
 8007598:	6983      	ldr	r3, [r0, #24]
 800759a:	b90b      	cbnz	r3, 80075a0 <_vfiprintf_r+0x18>
 800759c:	f7ff ff06 	bl	80073ac <__sinit>
 80075a0:	4b89      	ldr	r3, [pc, #548]	; (80077c8 <_vfiprintf_r+0x240>)
 80075a2:	429d      	cmp	r5, r3
 80075a4:	d11b      	bne.n	80075de <_vfiprintf_r+0x56>
 80075a6:	6875      	ldr	r5, [r6, #4]
 80075a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075aa:	07d9      	lsls	r1, r3, #31
 80075ac:	d405      	bmi.n	80075ba <_vfiprintf_r+0x32>
 80075ae:	89ab      	ldrh	r3, [r5, #12]
 80075b0:	059a      	lsls	r2, r3, #22
 80075b2:	d402      	bmi.n	80075ba <_vfiprintf_r+0x32>
 80075b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075b6:	f7ff ffa9 	bl	800750c <__retarget_lock_acquire_recursive>
 80075ba:	89ab      	ldrh	r3, [r5, #12]
 80075bc:	071b      	lsls	r3, r3, #28
 80075be:	d501      	bpl.n	80075c4 <_vfiprintf_r+0x3c>
 80075c0:	692b      	ldr	r3, [r5, #16]
 80075c2:	b9eb      	cbnz	r3, 8007600 <_vfiprintf_r+0x78>
 80075c4:	4629      	mov	r1, r5
 80075c6:	4630      	mov	r0, r6
 80075c8:	f000 f96e 	bl	80078a8 <__swsetup_r>
 80075cc:	b1c0      	cbz	r0, 8007600 <_vfiprintf_r+0x78>
 80075ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075d0:	07dc      	lsls	r4, r3, #31
 80075d2:	d50e      	bpl.n	80075f2 <_vfiprintf_r+0x6a>
 80075d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075d8:	b01d      	add	sp, #116	; 0x74
 80075da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075de:	4b7b      	ldr	r3, [pc, #492]	; (80077cc <_vfiprintf_r+0x244>)
 80075e0:	429d      	cmp	r5, r3
 80075e2:	d101      	bne.n	80075e8 <_vfiprintf_r+0x60>
 80075e4:	68b5      	ldr	r5, [r6, #8]
 80075e6:	e7df      	b.n	80075a8 <_vfiprintf_r+0x20>
 80075e8:	4b79      	ldr	r3, [pc, #484]	; (80077d0 <_vfiprintf_r+0x248>)
 80075ea:	429d      	cmp	r5, r3
 80075ec:	bf08      	it	eq
 80075ee:	68f5      	ldreq	r5, [r6, #12]
 80075f0:	e7da      	b.n	80075a8 <_vfiprintf_r+0x20>
 80075f2:	89ab      	ldrh	r3, [r5, #12]
 80075f4:	0598      	lsls	r0, r3, #22
 80075f6:	d4ed      	bmi.n	80075d4 <_vfiprintf_r+0x4c>
 80075f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075fa:	f7ff ff88 	bl	800750e <__retarget_lock_release_recursive>
 80075fe:	e7e9      	b.n	80075d4 <_vfiprintf_r+0x4c>
 8007600:	2300      	movs	r3, #0
 8007602:	9309      	str	r3, [sp, #36]	; 0x24
 8007604:	2320      	movs	r3, #32
 8007606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800760a:	f8cd 800c 	str.w	r8, [sp, #12]
 800760e:	2330      	movs	r3, #48	; 0x30
 8007610:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80077d4 <_vfiprintf_r+0x24c>
 8007614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007618:	f04f 0901 	mov.w	r9, #1
 800761c:	4623      	mov	r3, r4
 800761e:	469a      	mov	sl, r3
 8007620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007624:	b10a      	cbz	r2, 800762a <_vfiprintf_r+0xa2>
 8007626:	2a25      	cmp	r2, #37	; 0x25
 8007628:	d1f9      	bne.n	800761e <_vfiprintf_r+0x96>
 800762a:	ebba 0b04 	subs.w	fp, sl, r4
 800762e:	d00b      	beq.n	8007648 <_vfiprintf_r+0xc0>
 8007630:	465b      	mov	r3, fp
 8007632:	4622      	mov	r2, r4
 8007634:	4629      	mov	r1, r5
 8007636:	4630      	mov	r0, r6
 8007638:	f7ff ff93 	bl	8007562 <__sfputs_r>
 800763c:	3001      	adds	r0, #1
 800763e:	f000 80aa 	beq.w	8007796 <_vfiprintf_r+0x20e>
 8007642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007644:	445a      	add	r2, fp
 8007646:	9209      	str	r2, [sp, #36]	; 0x24
 8007648:	f89a 3000 	ldrb.w	r3, [sl]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 80a2 	beq.w	8007796 <_vfiprintf_r+0x20e>
 8007652:	2300      	movs	r3, #0
 8007654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800765c:	f10a 0a01 	add.w	sl, sl, #1
 8007660:	9304      	str	r3, [sp, #16]
 8007662:	9307      	str	r3, [sp, #28]
 8007664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007668:	931a      	str	r3, [sp, #104]	; 0x68
 800766a:	4654      	mov	r4, sl
 800766c:	2205      	movs	r2, #5
 800766e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007672:	4858      	ldr	r0, [pc, #352]	; (80077d4 <_vfiprintf_r+0x24c>)
 8007674:	f7f8 fdbc 	bl	80001f0 <memchr>
 8007678:	9a04      	ldr	r2, [sp, #16]
 800767a:	b9d8      	cbnz	r0, 80076b4 <_vfiprintf_r+0x12c>
 800767c:	06d1      	lsls	r1, r2, #27
 800767e:	bf44      	itt	mi
 8007680:	2320      	movmi	r3, #32
 8007682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007686:	0713      	lsls	r3, r2, #28
 8007688:	bf44      	itt	mi
 800768a:	232b      	movmi	r3, #43	; 0x2b
 800768c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007690:	f89a 3000 	ldrb.w	r3, [sl]
 8007694:	2b2a      	cmp	r3, #42	; 0x2a
 8007696:	d015      	beq.n	80076c4 <_vfiprintf_r+0x13c>
 8007698:	9a07      	ldr	r2, [sp, #28]
 800769a:	4654      	mov	r4, sl
 800769c:	2000      	movs	r0, #0
 800769e:	f04f 0c0a 	mov.w	ip, #10
 80076a2:	4621      	mov	r1, r4
 80076a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076a8:	3b30      	subs	r3, #48	; 0x30
 80076aa:	2b09      	cmp	r3, #9
 80076ac:	d94e      	bls.n	800774c <_vfiprintf_r+0x1c4>
 80076ae:	b1b0      	cbz	r0, 80076de <_vfiprintf_r+0x156>
 80076b0:	9207      	str	r2, [sp, #28]
 80076b2:	e014      	b.n	80076de <_vfiprintf_r+0x156>
 80076b4:	eba0 0308 	sub.w	r3, r0, r8
 80076b8:	fa09 f303 	lsl.w	r3, r9, r3
 80076bc:	4313      	orrs	r3, r2
 80076be:	9304      	str	r3, [sp, #16]
 80076c0:	46a2      	mov	sl, r4
 80076c2:	e7d2      	b.n	800766a <_vfiprintf_r+0xe2>
 80076c4:	9b03      	ldr	r3, [sp, #12]
 80076c6:	1d19      	adds	r1, r3, #4
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	9103      	str	r1, [sp, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	bfbb      	ittet	lt
 80076d0:	425b      	neglt	r3, r3
 80076d2:	f042 0202 	orrlt.w	r2, r2, #2
 80076d6:	9307      	strge	r3, [sp, #28]
 80076d8:	9307      	strlt	r3, [sp, #28]
 80076da:	bfb8      	it	lt
 80076dc:	9204      	strlt	r2, [sp, #16]
 80076de:	7823      	ldrb	r3, [r4, #0]
 80076e0:	2b2e      	cmp	r3, #46	; 0x2e
 80076e2:	d10c      	bne.n	80076fe <_vfiprintf_r+0x176>
 80076e4:	7863      	ldrb	r3, [r4, #1]
 80076e6:	2b2a      	cmp	r3, #42	; 0x2a
 80076e8:	d135      	bne.n	8007756 <_vfiprintf_r+0x1ce>
 80076ea:	9b03      	ldr	r3, [sp, #12]
 80076ec:	1d1a      	adds	r2, r3, #4
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	9203      	str	r2, [sp, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	bfb8      	it	lt
 80076f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80076fa:	3402      	adds	r4, #2
 80076fc:	9305      	str	r3, [sp, #20]
 80076fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80077e4 <_vfiprintf_r+0x25c>
 8007702:	7821      	ldrb	r1, [r4, #0]
 8007704:	2203      	movs	r2, #3
 8007706:	4650      	mov	r0, sl
 8007708:	f7f8 fd72 	bl	80001f0 <memchr>
 800770c:	b140      	cbz	r0, 8007720 <_vfiprintf_r+0x198>
 800770e:	2340      	movs	r3, #64	; 0x40
 8007710:	eba0 000a 	sub.w	r0, r0, sl
 8007714:	fa03 f000 	lsl.w	r0, r3, r0
 8007718:	9b04      	ldr	r3, [sp, #16]
 800771a:	4303      	orrs	r3, r0
 800771c:	3401      	adds	r4, #1
 800771e:	9304      	str	r3, [sp, #16]
 8007720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007724:	482c      	ldr	r0, [pc, #176]	; (80077d8 <_vfiprintf_r+0x250>)
 8007726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800772a:	2206      	movs	r2, #6
 800772c:	f7f8 fd60 	bl	80001f0 <memchr>
 8007730:	2800      	cmp	r0, #0
 8007732:	d03f      	beq.n	80077b4 <_vfiprintf_r+0x22c>
 8007734:	4b29      	ldr	r3, [pc, #164]	; (80077dc <_vfiprintf_r+0x254>)
 8007736:	bb1b      	cbnz	r3, 8007780 <_vfiprintf_r+0x1f8>
 8007738:	9b03      	ldr	r3, [sp, #12]
 800773a:	3307      	adds	r3, #7
 800773c:	f023 0307 	bic.w	r3, r3, #7
 8007740:	3308      	adds	r3, #8
 8007742:	9303      	str	r3, [sp, #12]
 8007744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007746:	443b      	add	r3, r7
 8007748:	9309      	str	r3, [sp, #36]	; 0x24
 800774a:	e767      	b.n	800761c <_vfiprintf_r+0x94>
 800774c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007750:	460c      	mov	r4, r1
 8007752:	2001      	movs	r0, #1
 8007754:	e7a5      	b.n	80076a2 <_vfiprintf_r+0x11a>
 8007756:	2300      	movs	r3, #0
 8007758:	3401      	adds	r4, #1
 800775a:	9305      	str	r3, [sp, #20]
 800775c:	4619      	mov	r1, r3
 800775e:	f04f 0c0a 	mov.w	ip, #10
 8007762:	4620      	mov	r0, r4
 8007764:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007768:	3a30      	subs	r2, #48	; 0x30
 800776a:	2a09      	cmp	r2, #9
 800776c:	d903      	bls.n	8007776 <_vfiprintf_r+0x1ee>
 800776e:	2b00      	cmp	r3, #0
 8007770:	d0c5      	beq.n	80076fe <_vfiprintf_r+0x176>
 8007772:	9105      	str	r1, [sp, #20]
 8007774:	e7c3      	b.n	80076fe <_vfiprintf_r+0x176>
 8007776:	fb0c 2101 	mla	r1, ip, r1, r2
 800777a:	4604      	mov	r4, r0
 800777c:	2301      	movs	r3, #1
 800777e:	e7f0      	b.n	8007762 <_vfiprintf_r+0x1da>
 8007780:	ab03      	add	r3, sp, #12
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	462a      	mov	r2, r5
 8007786:	4b16      	ldr	r3, [pc, #88]	; (80077e0 <_vfiprintf_r+0x258>)
 8007788:	a904      	add	r1, sp, #16
 800778a:	4630      	mov	r0, r6
 800778c:	f7fd fe3e 	bl	800540c <_printf_float>
 8007790:	4607      	mov	r7, r0
 8007792:	1c78      	adds	r0, r7, #1
 8007794:	d1d6      	bne.n	8007744 <_vfiprintf_r+0x1bc>
 8007796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007798:	07d9      	lsls	r1, r3, #31
 800779a:	d405      	bmi.n	80077a8 <_vfiprintf_r+0x220>
 800779c:	89ab      	ldrh	r3, [r5, #12]
 800779e:	059a      	lsls	r2, r3, #22
 80077a0:	d402      	bmi.n	80077a8 <_vfiprintf_r+0x220>
 80077a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077a4:	f7ff feb3 	bl	800750e <__retarget_lock_release_recursive>
 80077a8:	89ab      	ldrh	r3, [r5, #12]
 80077aa:	065b      	lsls	r3, r3, #25
 80077ac:	f53f af12 	bmi.w	80075d4 <_vfiprintf_r+0x4c>
 80077b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077b2:	e711      	b.n	80075d8 <_vfiprintf_r+0x50>
 80077b4:	ab03      	add	r3, sp, #12
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	462a      	mov	r2, r5
 80077ba:	4b09      	ldr	r3, [pc, #36]	; (80077e0 <_vfiprintf_r+0x258>)
 80077bc:	a904      	add	r1, sp, #16
 80077be:	4630      	mov	r0, r6
 80077c0:	f7fe f8c8 	bl	8005954 <_printf_i>
 80077c4:	e7e4      	b.n	8007790 <_vfiprintf_r+0x208>
 80077c6:	bf00      	nop
 80077c8:	08008e24 	.word	0x08008e24
 80077cc:	08008e44 	.word	0x08008e44
 80077d0:	08008e04 	.word	0x08008e04
 80077d4:	08008e6e 	.word	0x08008e6e
 80077d8:	08008e78 	.word	0x08008e78
 80077dc:	0800540d 	.word	0x0800540d
 80077e0:	08007563 	.word	0x08007563
 80077e4:	08008e74 	.word	0x08008e74

080077e8 <__swbuf_r>:
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	460e      	mov	r6, r1
 80077ec:	4614      	mov	r4, r2
 80077ee:	4605      	mov	r5, r0
 80077f0:	b118      	cbz	r0, 80077fa <__swbuf_r+0x12>
 80077f2:	6983      	ldr	r3, [r0, #24]
 80077f4:	b90b      	cbnz	r3, 80077fa <__swbuf_r+0x12>
 80077f6:	f7ff fdd9 	bl	80073ac <__sinit>
 80077fa:	4b21      	ldr	r3, [pc, #132]	; (8007880 <__swbuf_r+0x98>)
 80077fc:	429c      	cmp	r4, r3
 80077fe:	d12b      	bne.n	8007858 <__swbuf_r+0x70>
 8007800:	686c      	ldr	r4, [r5, #4]
 8007802:	69a3      	ldr	r3, [r4, #24]
 8007804:	60a3      	str	r3, [r4, #8]
 8007806:	89a3      	ldrh	r3, [r4, #12]
 8007808:	071a      	lsls	r2, r3, #28
 800780a:	d52f      	bpl.n	800786c <__swbuf_r+0x84>
 800780c:	6923      	ldr	r3, [r4, #16]
 800780e:	b36b      	cbz	r3, 800786c <__swbuf_r+0x84>
 8007810:	6923      	ldr	r3, [r4, #16]
 8007812:	6820      	ldr	r0, [r4, #0]
 8007814:	1ac0      	subs	r0, r0, r3
 8007816:	6963      	ldr	r3, [r4, #20]
 8007818:	b2f6      	uxtb	r6, r6
 800781a:	4283      	cmp	r3, r0
 800781c:	4637      	mov	r7, r6
 800781e:	dc04      	bgt.n	800782a <__swbuf_r+0x42>
 8007820:	4621      	mov	r1, r4
 8007822:	4628      	mov	r0, r5
 8007824:	f7ff fd2e 	bl	8007284 <_fflush_r>
 8007828:	bb30      	cbnz	r0, 8007878 <__swbuf_r+0x90>
 800782a:	68a3      	ldr	r3, [r4, #8]
 800782c:	3b01      	subs	r3, #1
 800782e:	60a3      	str	r3, [r4, #8]
 8007830:	6823      	ldr	r3, [r4, #0]
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	6022      	str	r2, [r4, #0]
 8007836:	701e      	strb	r6, [r3, #0]
 8007838:	6963      	ldr	r3, [r4, #20]
 800783a:	3001      	adds	r0, #1
 800783c:	4283      	cmp	r3, r0
 800783e:	d004      	beq.n	800784a <__swbuf_r+0x62>
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	07db      	lsls	r3, r3, #31
 8007844:	d506      	bpl.n	8007854 <__swbuf_r+0x6c>
 8007846:	2e0a      	cmp	r6, #10
 8007848:	d104      	bne.n	8007854 <__swbuf_r+0x6c>
 800784a:	4621      	mov	r1, r4
 800784c:	4628      	mov	r0, r5
 800784e:	f7ff fd19 	bl	8007284 <_fflush_r>
 8007852:	b988      	cbnz	r0, 8007878 <__swbuf_r+0x90>
 8007854:	4638      	mov	r0, r7
 8007856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007858:	4b0a      	ldr	r3, [pc, #40]	; (8007884 <__swbuf_r+0x9c>)
 800785a:	429c      	cmp	r4, r3
 800785c:	d101      	bne.n	8007862 <__swbuf_r+0x7a>
 800785e:	68ac      	ldr	r4, [r5, #8]
 8007860:	e7cf      	b.n	8007802 <__swbuf_r+0x1a>
 8007862:	4b09      	ldr	r3, [pc, #36]	; (8007888 <__swbuf_r+0xa0>)
 8007864:	429c      	cmp	r4, r3
 8007866:	bf08      	it	eq
 8007868:	68ec      	ldreq	r4, [r5, #12]
 800786a:	e7ca      	b.n	8007802 <__swbuf_r+0x1a>
 800786c:	4621      	mov	r1, r4
 800786e:	4628      	mov	r0, r5
 8007870:	f000 f81a 	bl	80078a8 <__swsetup_r>
 8007874:	2800      	cmp	r0, #0
 8007876:	d0cb      	beq.n	8007810 <__swbuf_r+0x28>
 8007878:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800787c:	e7ea      	b.n	8007854 <__swbuf_r+0x6c>
 800787e:	bf00      	nop
 8007880:	08008e24 	.word	0x08008e24
 8007884:	08008e44 	.word	0x08008e44
 8007888:	08008e04 	.word	0x08008e04

0800788c <__ascii_wctomb>:
 800788c:	b149      	cbz	r1, 80078a2 <__ascii_wctomb+0x16>
 800788e:	2aff      	cmp	r2, #255	; 0xff
 8007890:	bf85      	ittet	hi
 8007892:	238a      	movhi	r3, #138	; 0x8a
 8007894:	6003      	strhi	r3, [r0, #0]
 8007896:	700a      	strbls	r2, [r1, #0]
 8007898:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800789c:	bf98      	it	ls
 800789e:	2001      	movls	r0, #1
 80078a0:	4770      	bx	lr
 80078a2:	4608      	mov	r0, r1
 80078a4:	4770      	bx	lr
	...

080078a8 <__swsetup_r>:
 80078a8:	4b32      	ldr	r3, [pc, #200]	; (8007974 <__swsetup_r+0xcc>)
 80078aa:	b570      	push	{r4, r5, r6, lr}
 80078ac:	681d      	ldr	r5, [r3, #0]
 80078ae:	4606      	mov	r6, r0
 80078b0:	460c      	mov	r4, r1
 80078b2:	b125      	cbz	r5, 80078be <__swsetup_r+0x16>
 80078b4:	69ab      	ldr	r3, [r5, #24]
 80078b6:	b913      	cbnz	r3, 80078be <__swsetup_r+0x16>
 80078b8:	4628      	mov	r0, r5
 80078ba:	f7ff fd77 	bl	80073ac <__sinit>
 80078be:	4b2e      	ldr	r3, [pc, #184]	; (8007978 <__swsetup_r+0xd0>)
 80078c0:	429c      	cmp	r4, r3
 80078c2:	d10f      	bne.n	80078e4 <__swsetup_r+0x3c>
 80078c4:	686c      	ldr	r4, [r5, #4]
 80078c6:	89a3      	ldrh	r3, [r4, #12]
 80078c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078cc:	0719      	lsls	r1, r3, #28
 80078ce:	d42c      	bmi.n	800792a <__swsetup_r+0x82>
 80078d0:	06dd      	lsls	r5, r3, #27
 80078d2:	d411      	bmi.n	80078f8 <__swsetup_r+0x50>
 80078d4:	2309      	movs	r3, #9
 80078d6:	6033      	str	r3, [r6, #0]
 80078d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078dc:	81a3      	strh	r3, [r4, #12]
 80078de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078e2:	e03e      	b.n	8007962 <__swsetup_r+0xba>
 80078e4:	4b25      	ldr	r3, [pc, #148]	; (800797c <__swsetup_r+0xd4>)
 80078e6:	429c      	cmp	r4, r3
 80078e8:	d101      	bne.n	80078ee <__swsetup_r+0x46>
 80078ea:	68ac      	ldr	r4, [r5, #8]
 80078ec:	e7eb      	b.n	80078c6 <__swsetup_r+0x1e>
 80078ee:	4b24      	ldr	r3, [pc, #144]	; (8007980 <__swsetup_r+0xd8>)
 80078f0:	429c      	cmp	r4, r3
 80078f2:	bf08      	it	eq
 80078f4:	68ec      	ldreq	r4, [r5, #12]
 80078f6:	e7e6      	b.n	80078c6 <__swsetup_r+0x1e>
 80078f8:	0758      	lsls	r0, r3, #29
 80078fa:	d512      	bpl.n	8007922 <__swsetup_r+0x7a>
 80078fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078fe:	b141      	cbz	r1, 8007912 <__swsetup_r+0x6a>
 8007900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007904:	4299      	cmp	r1, r3
 8007906:	d002      	beq.n	800790e <__swsetup_r+0x66>
 8007908:	4630      	mov	r0, r6
 800790a:	f7fd fbff 	bl	800510c <_free_r>
 800790e:	2300      	movs	r3, #0
 8007910:	6363      	str	r3, [r4, #52]	; 0x34
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007918:	81a3      	strh	r3, [r4, #12]
 800791a:	2300      	movs	r3, #0
 800791c:	6063      	str	r3, [r4, #4]
 800791e:	6923      	ldr	r3, [r4, #16]
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	f043 0308 	orr.w	r3, r3, #8
 8007928:	81a3      	strh	r3, [r4, #12]
 800792a:	6923      	ldr	r3, [r4, #16]
 800792c:	b94b      	cbnz	r3, 8007942 <__swsetup_r+0x9a>
 800792e:	89a3      	ldrh	r3, [r4, #12]
 8007930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007938:	d003      	beq.n	8007942 <__swsetup_r+0x9a>
 800793a:	4621      	mov	r1, r4
 800793c:	4630      	mov	r0, r6
 800793e:	f000 f84d 	bl	80079dc <__smakebuf_r>
 8007942:	89a0      	ldrh	r0, [r4, #12]
 8007944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007948:	f010 0301 	ands.w	r3, r0, #1
 800794c:	d00a      	beq.n	8007964 <__swsetup_r+0xbc>
 800794e:	2300      	movs	r3, #0
 8007950:	60a3      	str	r3, [r4, #8]
 8007952:	6963      	ldr	r3, [r4, #20]
 8007954:	425b      	negs	r3, r3
 8007956:	61a3      	str	r3, [r4, #24]
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	b943      	cbnz	r3, 800796e <__swsetup_r+0xc6>
 800795c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007960:	d1ba      	bne.n	80078d8 <__swsetup_r+0x30>
 8007962:	bd70      	pop	{r4, r5, r6, pc}
 8007964:	0781      	lsls	r1, r0, #30
 8007966:	bf58      	it	pl
 8007968:	6963      	ldrpl	r3, [r4, #20]
 800796a:	60a3      	str	r3, [r4, #8]
 800796c:	e7f4      	b.n	8007958 <__swsetup_r+0xb0>
 800796e:	2000      	movs	r0, #0
 8007970:	e7f7      	b.n	8007962 <__swsetup_r+0xba>
 8007972:	bf00      	nop
 8007974:	20000008 	.word	0x20000008
 8007978:	08008e24 	.word	0x08008e24
 800797c:	08008e44 	.word	0x08008e44
 8007980:	08008e04 	.word	0x08008e04

08007984 <abort>:
 8007984:	b508      	push	{r3, lr}
 8007986:	2006      	movs	r0, #6
 8007988:	f000 f890 	bl	8007aac <raise>
 800798c:	2001      	movs	r0, #1
 800798e:	f7f9 fcc3 	bl	8001318 <_exit>

08007992 <__swhatbuf_r>:
 8007992:	b570      	push	{r4, r5, r6, lr}
 8007994:	460e      	mov	r6, r1
 8007996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800799a:	2900      	cmp	r1, #0
 800799c:	b096      	sub	sp, #88	; 0x58
 800799e:	4614      	mov	r4, r2
 80079a0:	461d      	mov	r5, r3
 80079a2:	da08      	bge.n	80079b6 <__swhatbuf_r+0x24>
 80079a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	602a      	str	r2, [r5, #0]
 80079ac:	061a      	lsls	r2, r3, #24
 80079ae:	d410      	bmi.n	80079d2 <__swhatbuf_r+0x40>
 80079b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079b4:	e00e      	b.n	80079d4 <__swhatbuf_r+0x42>
 80079b6:	466a      	mov	r2, sp
 80079b8:	f000 f894 	bl	8007ae4 <_fstat_r>
 80079bc:	2800      	cmp	r0, #0
 80079be:	dbf1      	blt.n	80079a4 <__swhatbuf_r+0x12>
 80079c0:	9a01      	ldr	r2, [sp, #4]
 80079c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80079c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80079ca:	425a      	negs	r2, r3
 80079cc:	415a      	adcs	r2, r3
 80079ce:	602a      	str	r2, [r5, #0]
 80079d0:	e7ee      	b.n	80079b0 <__swhatbuf_r+0x1e>
 80079d2:	2340      	movs	r3, #64	; 0x40
 80079d4:	2000      	movs	r0, #0
 80079d6:	6023      	str	r3, [r4, #0]
 80079d8:	b016      	add	sp, #88	; 0x58
 80079da:	bd70      	pop	{r4, r5, r6, pc}

080079dc <__smakebuf_r>:
 80079dc:	898b      	ldrh	r3, [r1, #12]
 80079de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079e0:	079d      	lsls	r5, r3, #30
 80079e2:	4606      	mov	r6, r0
 80079e4:	460c      	mov	r4, r1
 80079e6:	d507      	bpl.n	80079f8 <__smakebuf_r+0x1c>
 80079e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	6123      	str	r3, [r4, #16]
 80079f0:	2301      	movs	r3, #1
 80079f2:	6163      	str	r3, [r4, #20]
 80079f4:	b002      	add	sp, #8
 80079f6:	bd70      	pop	{r4, r5, r6, pc}
 80079f8:	ab01      	add	r3, sp, #4
 80079fa:	466a      	mov	r2, sp
 80079fc:	f7ff ffc9 	bl	8007992 <__swhatbuf_r>
 8007a00:	9900      	ldr	r1, [sp, #0]
 8007a02:	4605      	mov	r5, r0
 8007a04:	4630      	mov	r0, r6
 8007a06:	f7fd fbed 	bl	80051e4 <_malloc_r>
 8007a0a:	b948      	cbnz	r0, 8007a20 <__smakebuf_r+0x44>
 8007a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a10:	059a      	lsls	r2, r3, #22
 8007a12:	d4ef      	bmi.n	80079f4 <__smakebuf_r+0x18>
 8007a14:	f023 0303 	bic.w	r3, r3, #3
 8007a18:	f043 0302 	orr.w	r3, r3, #2
 8007a1c:	81a3      	strh	r3, [r4, #12]
 8007a1e:	e7e3      	b.n	80079e8 <__smakebuf_r+0xc>
 8007a20:	4b0d      	ldr	r3, [pc, #52]	; (8007a58 <__smakebuf_r+0x7c>)
 8007a22:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	6020      	str	r0, [r4, #0]
 8007a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2c:	81a3      	strh	r3, [r4, #12]
 8007a2e:	9b00      	ldr	r3, [sp, #0]
 8007a30:	6163      	str	r3, [r4, #20]
 8007a32:	9b01      	ldr	r3, [sp, #4]
 8007a34:	6120      	str	r0, [r4, #16]
 8007a36:	b15b      	cbz	r3, 8007a50 <__smakebuf_r+0x74>
 8007a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f000 f863 	bl	8007b08 <_isatty_r>
 8007a42:	b128      	cbz	r0, 8007a50 <__smakebuf_r+0x74>
 8007a44:	89a3      	ldrh	r3, [r4, #12]
 8007a46:	f023 0303 	bic.w	r3, r3, #3
 8007a4a:	f043 0301 	orr.w	r3, r3, #1
 8007a4e:	81a3      	strh	r3, [r4, #12]
 8007a50:	89a0      	ldrh	r0, [r4, #12]
 8007a52:	4305      	orrs	r5, r0
 8007a54:	81a5      	strh	r5, [r4, #12]
 8007a56:	e7cd      	b.n	80079f4 <__smakebuf_r+0x18>
 8007a58:	08007345 	.word	0x08007345

08007a5c <_raise_r>:
 8007a5c:	291f      	cmp	r1, #31
 8007a5e:	b538      	push	{r3, r4, r5, lr}
 8007a60:	4604      	mov	r4, r0
 8007a62:	460d      	mov	r5, r1
 8007a64:	d904      	bls.n	8007a70 <_raise_r+0x14>
 8007a66:	2316      	movs	r3, #22
 8007a68:	6003      	str	r3, [r0, #0]
 8007a6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a72:	b112      	cbz	r2, 8007a7a <_raise_r+0x1e>
 8007a74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a78:	b94b      	cbnz	r3, 8007a8e <_raise_r+0x32>
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 f830 	bl	8007ae0 <_getpid_r>
 8007a80:	462a      	mov	r2, r5
 8007a82:	4601      	mov	r1, r0
 8007a84:	4620      	mov	r0, r4
 8007a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a8a:	f000 b817 	b.w	8007abc <_kill_r>
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d00a      	beq.n	8007aa8 <_raise_r+0x4c>
 8007a92:	1c59      	adds	r1, r3, #1
 8007a94:	d103      	bne.n	8007a9e <_raise_r+0x42>
 8007a96:	2316      	movs	r3, #22
 8007a98:	6003      	str	r3, [r0, #0]
 8007a9a:	2001      	movs	r0, #1
 8007a9c:	e7e7      	b.n	8007a6e <_raise_r+0x12>
 8007a9e:	2400      	movs	r4, #0
 8007aa0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	4798      	blx	r3
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	e7e0      	b.n	8007a6e <_raise_r+0x12>

08007aac <raise>:
 8007aac:	4b02      	ldr	r3, [pc, #8]	; (8007ab8 <raise+0xc>)
 8007aae:	4601      	mov	r1, r0
 8007ab0:	6818      	ldr	r0, [r3, #0]
 8007ab2:	f7ff bfd3 	b.w	8007a5c <_raise_r>
 8007ab6:	bf00      	nop
 8007ab8:	20000008 	.word	0x20000008

08007abc <_kill_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4d07      	ldr	r5, [pc, #28]	; (8007adc <_kill_r+0x20>)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	4608      	mov	r0, r1
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	602b      	str	r3, [r5, #0]
 8007aca:	f7f9 fc15 	bl	80012f8 <_kill>
 8007ace:	1c43      	adds	r3, r0, #1
 8007ad0:	d102      	bne.n	8007ad8 <_kill_r+0x1c>
 8007ad2:	682b      	ldr	r3, [r5, #0]
 8007ad4:	b103      	cbz	r3, 8007ad8 <_kill_r+0x1c>
 8007ad6:	6023      	str	r3, [r4, #0]
 8007ad8:	bd38      	pop	{r3, r4, r5, pc}
 8007ada:	bf00      	nop
 8007adc:	20000424 	.word	0x20000424

08007ae0 <_getpid_r>:
 8007ae0:	f7f9 bc02 	b.w	80012e8 <_getpid>

08007ae4 <_fstat_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4d07      	ldr	r5, [pc, #28]	; (8007b04 <_fstat_r+0x20>)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	4604      	mov	r4, r0
 8007aec:	4608      	mov	r0, r1
 8007aee:	4611      	mov	r1, r2
 8007af0:	602b      	str	r3, [r5, #0]
 8007af2:	f7f9 fc60 	bl	80013b6 <_fstat>
 8007af6:	1c43      	adds	r3, r0, #1
 8007af8:	d102      	bne.n	8007b00 <_fstat_r+0x1c>
 8007afa:	682b      	ldr	r3, [r5, #0]
 8007afc:	b103      	cbz	r3, 8007b00 <_fstat_r+0x1c>
 8007afe:	6023      	str	r3, [r4, #0]
 8007b00:	bd38      	pop	{r3, r4, r5, pc}
 8007b02:	bf00      	nop
 8007b04:	20000424 	.word	0x20000424

08007b08 <_isatty_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d06      	ldr	r5, [pc, #24]	; (8007b24 <_isatty_r+0x1c>)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	602b      	str	r3, [r5, #0]
 8007b14:	f7f9 fc5f 	bl	80013d6 <_isatty>
 8007b18:	1c43      	adds	r3, r0, #1
 8007b1a:	d102      	bne.n	8007b22 <_isatty_r+0x1a>
 8007b1c:	682b      	ldr	r3, [r5, #0]
 8007b1e:	b103      	cbz	r3, 8007b22 <_isatty_r+0x1a>
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
 8007b24:	20000424 	.word	0x20000424

08007b28 <round>:
 8007b28:	ec51 0b10 	vmov	r0, r1, d0
 8007b2c:	b570      	push	{r4, r5, r6, lr}
 8007b2e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8007b32:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8007b36:	2c13      	cmp	r4, #19
 8007b38:	ee10 2a10 	vmov	r2, s0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	dc19      	bgt.n	8007b74 <round+0x4c>
 8007b40:	2c00      	cmp	r4, #0
 8007b42:	da09      	bge.n	8007b58 <round+0x30>
 8007b44:	3401      	adds	r4, #1
 8007b46:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007b4a:	d103      	bne.n	8007b54 <round+0x2c>
 8007b4c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007b50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007b54:	2200      	movs	r2, #0
 8007b56:	e028      	b.n	8007baa <round+0x82>
 8007b58:	4d15      	ldr	r5, [pc, #84]	; (8007bb0 <round+0x88>)
 8007b5a:	4125      	asrs	r5, r4
 8007b5c:	ea01 0605 	and.w	r6, r1, r5
 8007b60:	4332      	orrs	r2, r6
 8007b62:	d00e      	beq.n	8007b82 <round+0x5a>
 8007b64:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007b68:	fa42 f404 	asr.w	r4, r2, r4
 8007b6c:	4423      	add	r3, r4
 8007b6e:	ea23 0305 	bic.w	r3, r3, r5
 8007b72:	e7ef      	b.n	8007b54 <round+0x2c>
 8007b74:	2c33      	cmp	r4, #51	; 0x33
 8007b76:	dd07      	ble.n	8007b88 <round+0x60>
 8007b78:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007b7c:	d101      	bne.n	8007b82 <round+0x5a>
 8007b7e:	f7f8 fb8d 	bl	800029c <__adddf3>
 8007b82:	ec41 0b10 	vmov	d0, r0, r1
 8007b86:	bd70      	pop	{r4, r5, r6, pc}
 8007b88:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8007b8c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007b90:	40f5      	lsrs	r5, r6
 8007b92:	4228      	tst	r0, r5
 8007b94:	d0f5      	beq.n	8007b82 <round+0x5a>
 8007b96:	2101      	movs	r1, #1
 8007b98:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007b9c:	fa01 f404 	lsl.w	r4, r1, r4
 8007ba0:	1912      	adds	r2, r2, r4
 8007ba2:	bf28      	it	cs
 8007ba4:	185b      	addcs	r3, r3, r1
 8007ba6:	ea22 0205 	bic.w	r2, r2, r5
 8007baa:	4619      	mov	r1, r3
 8007bac:	4610      	mov	r0, r2
 8007bae:	e7e8      	b.n	8007b82 <round+0x5a>
 8007bb0:	000fffff 	.word	0x000fffff

08007bb4 <pow>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	ed2d 8b02 	vpush	{d8}
 8007bba:	eeb0 8a40 	vmov.f32	s16, s0
 8007bbe:	eef0 8a60 	vmov.f32	s17, s1
 8007bc2:	ec55 4b11 	vmov	r4, r5, d1
 8007bc6:	f000 f867 	bl	8007c98 <__ieee754_pow>
 8007bca:	4622      	mov	r2, r4
 8007bcc:	462b      	mov	r3, r5
 8007bce:	4620      	mov	r0, r4
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	ec57 6b10 	vmov	r6, r7, d0
 8007bd6:	f7f8 ffb1 	bl	8000b3c <__aeabi_dcmpun>
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	d13b      	bne.n	8007c56 <pow+0xa2>
 8007bde:	ec51 0b18 	vmov	r0, r1, d8
 8007be2:	2200      	movs	r2, #0
 8007be4:	2300      	movs	r3, #0
 8007be6:	f7f8 ff77 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bea:	b1b8      	cbz	r0, 8007c1c <pow+0x68>
 8007bec:	2200      	movs	r2, #0
 8007bee:	2300      	movs	r3, #0
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	f7f8 ff70 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d146      	bne.n	8007c8a <pow+0xd6>
 8007bfc:	ec45 4b10 	vmov	d0, r4, r5
 8007c00:	f000 fe63 	bl	80088ca <finite>
 8007c04:	b338      	cbz	r0, 8007c56 <pow+0xa2>
 8007c06:	2200      	movs	r2, #0
 8007c08:	2300      	movs	r3, #0
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	f7f8 ff6d 	bl	8000aec <__aeabi_dcmplt>
 8007c12:	b300      	cbz	r0, 8007c56 <pow+0xa2>
 8007c14:	f7fd fa40 	bl	8005098 <__errno>
 8007c18:	2322      	movs	r3, #34	; 0x22
 8007c1a:	e01b      	b.n	8007c54 <pow+0xa0>
 8007c1c:	ec47 6b10 	vmov	d0, r6, r7
 8007c20:	f000 fe53 	bl	80088ca <finite>
 8007c24:	b9e0      	cbnz	r0, 8007c60 <pow+0xac>
 8007c26:	eeb0 0a48 	vmov.f32	s0, s16
 8007c2a:	eef0 0a68 	vmov.f32	s1, s17
 8007c2e:	f000 fe4c 	bl	80088ca <finite>
 8007c32:	b1a8      	cbz	r0, 8007c60 <pow+0xac>
 8007c34:	ec45 4b10 	vmov	d0, r4, r5
 8007c38:	f000 fe47 	bl	80088ca <finite>
 8007c3c:	b180      	cbz	r0, 8007c60 <pow+0xac>
 8007c3e:	4632      	mov	r2, r6
 8007c40:	463b      	mov	r3, r7
 8007c42:	4630      	mov	r0, r6
 8007c44:	4639      	mov	r1, r7
 8007c46:	f7f8 ff79 	bl	8000b3c <__aeabi_dcmpun>
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d0e2      	beq.n	8007c14 <pow+0x60>
 8007c4e:	f7fd fa23 	bl	8005098 <__errno>
 8007c52:	2321      	movs	r3, #33	; 0x21
 8007c54:	6003      	str	r3, [r0, #0]
 8007c56:	ecbd 8b02 	vpop	{d8}
 8007c5a:	ec47 6b10 	vmov	d0, r6, r7
 8007c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c60:	2200      	movs	r2, #0
 8007c62:	2300      	movs	r3, #0
 8007c64:	4630      	mov	r0, r6
 8007c66:	4639      	mov	r1, r7
 8007c68:	f7f8 ff36 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d0f2      	beq.n	8007c56 <pow+0xa2>
 8007c70:	eeb0 0a48 	vmov.f32	s0, s16
 8007c74:	eef0 0a68 	vmov.f32	s1, s17
 8007c78:	f000 fe27 	bl	80088ca <finite>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	d0ea      	beq.n	8007c56 <pow+0xa2>
 8007c80:	ec45 4b10 	vmov	d0, r4, r5
 8007c84:	f000 fe21 	bl	80088ca <finite>
 8007c88:	e7c3      	b.n	8007c12 <pow+0x5e>
 8007c8a:	4f01      	ldr	r7, [pc, #4]	; (8007c90 <pow+0xdc>)
 8007c8c:	2600      	movs	r6, #0
 8007c8e:	e7e2      	b.n	8007c56 <pow+0xa2>
 8007c90:	3ff00000 	.word	0x3ff00000
 8007c94:	00000000 	.word	0x00000000

08007c98 <__ieee754_pow>:
 8007c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	ed2d 8b06 	vpush	{d8-d10}
 8007ca0:	b089      	sub	sp, #36	; 0x24
 8007ca2:	ed8d 1b00 	vstr	d1, [sp]
 8007ca6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007caa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007cae:	ea58 0102 	orrs.w	r1, r8, r2
 8007cb2:	ec57 6b10 	vmov	r6, r7, d0
 8007cb6:	d115      	bne.n	8007ce4 <__ieee754_pow+0x4c>
 8007cb8:	19b3      	adds	r3, r6, r6
 8007cba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007cbe:	4152      	adcs	r2, r2
 8007cc0:	4299      	cmp	r1, r3
 8007cc2:	4b89      	ldr	r3, [pc, #548]	; (8007ee8 <__ieee754_pow+0x250>)
 8007cc4:	4193      	sbcs	r3, r2
 8007cc6:	f080 84d2 	bcs.w	800866e <__ieee754_pow+0x9d6>
 8007cca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cce:	4630      	mov	r0, r6
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	f7f8 fae3 	bl	800029c <__adddf3>
 8007cd6:	ec41 0b10 	vmov	d0, r0, r1
 8007cda:	b009      	add	sp, #36	; 0x24
 8007cdc:	ecbd 8b06 	vpop	{d8-d10}
 8007ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce4:	4b81      	ldr	r3, [pc, #516]	; (8007eec <__ieee754_pow+0x254>)
 8007ce6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007cea:	429c      	cmp	r4, r3
 8007cec:	ee10 aa10 	vmov	sl, s0
 8007cf0:	463d      	mov	r5, r7
 8007cf2:	dc06      	bgt.n	8007d02 <__ieee754_pow+0x6a>
 8007cf4:	d101      	bne.n	8007cfa <__ieee754_pow+0x62>
 8007cf6:	2e00      	cmp	r6, #0
 8007cf8:	d1e7      	bne.n	8007cca <__ieee754_pow+0x32>
 8007cfa:	4598      	cmp	r8, r3
 8007cfc:	dc01      	bgt.n	8007d02 <__ieee754_pow+0x6a>
 8007cfe:	d10f      	bne.n	8007d20 <__ieee754_pow+0x88>
 8007d00:	b172      	cbz	r2, 8007d20 <__ieee754_pow+0x88>
 8007d02:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007d06:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007d0a:	ea55 050a 	orrs.w	r5, r5, sl
 8007d0e:	d1dc      	bne.n	8007cca <__ieee754_pow+0x32>
 8007d10:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d14:	18db      	adds	r3, r3, r3
 8007d16:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007d1a:	4152      	adcs	r2, r2
 8007d1c:	429d      	cmp	r5, r3
 8007d1e:	e7d0      	b.n	8007cc2 <__ieee754_pow+0x2a>
 8007d20:	2d00      	cmp	r5, #0
 8007d22:	da3b      	bge.n	8007d9c <__ieee754_pow+0x104>
 8007d24:	4b72      	ldr	r3, [pc, #456]	; (8007ef0 <__ieee754_pow+0x258>)
 8007d26:	4598      	cmp	r8, r3
 8007d28:	dc51      	bgt.n	8007dce <__ieee754_pow+0x136>
 8007d2a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007d2e:	4598      	cmp	r8, r3
 8007d30:	f340 84ac 	ble.w	800868c <__ieee754_pow+0x9f4>
 8007d34:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007d38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007d3c:	2b14      	cmp	r3, #20
 8007d3e:	dd0f      	ble.n	8007d60 <__ieee754_pow+0xc8>
 8007d40:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007d44:	fa22 f103 	lsr.w	r1, r2, r3
 8007d48:	fa01 f303 	lsl.w	r3, r1, r3
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	f040 849d 	bne.w	800868c <__ieee754_pow+0x9f4>
 8007d52:	f001 0101 	and.w	r1, r1, #1
 8007d56:	f1c1 0302 	rsb	r3, r1, #2
 8007d5a:	9304      	str	r3, [sp, #16]
 8007d5c:	b182      	cbz	r2, 8007d80 <__ieee754_pow+0xe8>
 8007d5e:	e05f      	b.n	8007e20 <__ieee754_pow+0x188>
 8007d60:	2a00      	cmp	r2, #0
 8007d62:	d15b      	bne.n	8007e1c <__ieee754_pow+0x184>
 8007d64:	f1c3 0314 	rsb	r3, r3, #20
 8007d68:	fa48 f103 	asr.w	r1, r8, r3
 8007d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d70:	4543      	cmp	r3, r8
 8007d72:	f040 8488 	bne.w	8008686 <__ieee754_pow+0x9ee>
 8007d76:	f001 0101 	and.w	r1, r1, #1
 8007d7a:	f1c1 0302 	rsb	r3, r1, #2
 8007d7e:	9304      	str	r3, [sp, #16]
 8007d80:	4b5c      	ldr	r3, [pc, #368]	; (8007ef4 <__ieee754_pow+0x25c>)
 8007d82:	4598      	cmp	r8, r3
 8007d84:	d132      	bne.n	8007dec <__ieee754_pow+0x154>
 8007d86:	f1b9 0f00 	cmp.w	r9, #0
 8007d8a:	f280 8478 	bge.w	800867e <__ieee754_pow+0x9e6>
 8007d8e:	4959      	ldr	r1, [pc, #356]	; (8007ef4 <__ieee754_pow+0x25c>)
 8007d90:	4632      	mov	r2, r6
 8007d92:	463b      	mov	r3, r7
 8007d94:	2000      	movs	r0, #0
 8007d96:	f7f8 fd61 	bl	800085c <__aeabi_ddiv>
 8007d9a:	e79c      	b.n	8007cd6 <__ieee754_pow+0x3e>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	9304      	str	r3, [sp, #16]
 8007da0:	2a00      	cmp	r2, #0
 8007da2:	d13d      	bne.n	8007e20 <__ieee754_pow+0x188>
 8007da4:	4b51      	ldr	r3, [pc, #324]	; (8007eec <__ieee754_pow+0x254>)
 8007da6:	4598      	cmp	r8, r3
 8007da8:	d1ea      	bne.n	8007d80 <__ieee754_pow+0xe8>
 8007daa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007dae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007db2:	ea53 030a 	orrs.w	r3, r3, sl
 8007db6:	f000 845a 	beq.w	800866e <__ieee754_pow+0x9d6>
 8007dba:	4b4f      	ldr	r3, [pc, #316]	; (8007ef8 <__ieee754_pow+0x260>)
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	dd08      	ble.n	8007dd2 <__ieee754_pow+0x13a>
 8007dc0:	f1b9 0f00 	cmp.w	r9, #0
 8007dc4:	f2c0 8457 	blt.w	8008676 <__ieee754_pow+0x9de>
 8007dc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dcc:	e783      	b.n	8007cd6 <__ieee754_pow+0x3e>
 8007dce:	2302      	movs	r3, #2
 8007dd0:	e7e5      	b.n	8007d9e <__ieee754_pow+0x106>
 8007dd2:	f1b9 0f00 	cmp.w	r9, #0
 8007dd6:	f04f 0000 	mov.w	r0, #0
 8007dda:	f04f 0100 	mov.w	r1, #0
 8007dde:	f6bf af7a 	bge.w	8007cd6 <__ieee754_pow+0x3e>
 8007de2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007de6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007dea:	e774      	b.n	8007cd6 <__ieee754_pow+0x3e>
 8007dec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007df0:	d106      	bne.n	8007e00 <__ieee754_pow+0x168>
 8007df2:	4632      	mov	r2, r6
 8007df4:	463b      	mov	r3, r7
 8007df6:	4630      	mov	r0, r6
 8007df8:	4639      	mov	r1, r7
 8007dfa:	f7f8 fc05 	bl	8000608 <__aeabi_dmul>
 8007dfe:	e76a      	b.n	8007cd6 <__ieee754_pow+0x3e>
 8007e00:	4b3e      	ldr	r3, [pc, #248]	; (8007efc <__ieee754_pow+0x264>)
 8007e02:	4599      	cmp	r9, r3
 8007e04:	d10c      	bne.n	8007e20 <__ieee754_pow+0x188>
 8007e06:	2d00      	cmp	r5, #0
 8007e08:	db0a      	blt.n	8007e20 <__ieee754_pow+0x188>
 8007e0a:	ec47 6b10 	vmov	d0, r6, r7
 8007e0e:	b009      	add	sp, #36	; 0x24
 8007e10:	ecbd 8b06 	vpop	{d8-d10}
 8007e14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e18:	f000 bc6c 	b.w	80086f4 <__ieee754_sqrt>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	9304      	str	r3, [sp, #16]
 8007e20:	ec47 6b10 	vmov	d0, r6, r7
 8007e24:	f000 fd48 	bl	80088b8 <fabs>
 8007e28:	ec51 0b10 	vmov	r0, r1, d0
 8007e2c:	f1ba 0f00 	cmp.w	sl, #0
 8007e30:	d129      	bne.n	8007e86 <__ieee754_pow+0x1ee>
 8007e32:	b124      	cbz	r4, 8007e3e <__ieee754_pow+0x1a6>
 8007e34:	4b2f      	ldr	r3, [pc, #188]	; (8007ef4 <__ieee754_pow+0x25c>)
 8007e36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d123      	bne.n	8007e86 <__ieee754_pow+0x1ee>
 8007e3e:	f1b9 0f00 	cmp.w	r9, #0
 8007e42:	da05      	bge.n	8007e50 <__ieee754_pow+0x1b8>
 8007e44:	4602      	mov	r2, r0
 8007e46:	460b      	mov	r3, r1
 8007e48:	2000      	movs	r0, #0
 8007e4a:	492a      	ldr	r1, [pc, #168]	; (8007ef4 <__ieee754_pow+0x25c>)
 8007e4c:	f7f8 fd06 	bl	800085c <__aeabi_ddiv>
 8007e50:	2d00      	cmp	r5, #0
 8007e52:	f6bf af40 	bge.w	8007cd6 <__ieee754_pow+0x3e>
 8007e56:	9b04      	ldr	r3, [sp, #16]
 8007e58:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007e5c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007e60:	4323      	orrs	r3, r4
 8007e62:	d108      	bne.n	8007e76 <__ieee754_pow+0x1de>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	f7f8 fa14 	bl	8000298 <__aeabi_dsub>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	e78f      	b.n	8007d96 <__ieee754_pow+0xfe>
 8007e76:	9b04      	ldr	r3, [sp, #16]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	f47f af2c 	bne.w	8007cd6 <__ieee754_pow+0x3e>
 8007e7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e82:	4619      	mov	r1, r3
 8007e84:	e727      	b.n	8007cd6 <__ieee754_pow+0x3e>
 8007e86:	0feb      	lsrs	r3, r5, #31
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	9306      	str	r3, [sp, #24]
 8007e8c:	9a06      	ldr	r2, [sp, #24]
 8007e8e:	9b04      	ldr	r3, [sp, #16]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	d102      	bne.n	8007e9a <__ieee754_pow+0x202>
 8007e94:	4632      	mov	r2, r6
 8007e96:	463b      	mov	r3, r7
 8007e98:	e7e6      	b.n	8007e68 <__ieee754_pow+0x1d0>
 8007e9a:	4b19      	ldr	r3, [pc, #100]	; (8007f00 <__ieee754_pow+0x268>)
 8007e9c:	4598      	cmp	r8, r3
 8007e9e:	f340 80fb 	ble.w	8008098 <__ieee754_pow+0x400>
 8007ea2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007ea6:	4598      	cmp	r8, r3
 8007ea8:	4b13      	ldr	r3, [pc, #76]	; (8007ef8 <__ieee754_pow+0x260>)
 8007eaa:	dd0c      	ble.n	8007ec6 <__ieee754_pow+0x22e>
 8007eac:	429c      	cmp	r4, r3
 8007eae:	dc0f      	bgt.n	8007ed0 <__ieee754_pow+0x238>
 8007eb0:	f1b9 0f00 	cmp.w	r9, #0
 8007eb4:	da0f      	bge.n	8007ed6 <__ieee754_pow+0x23e>
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	b009      	add	sp, #36	; 0x24
 8007eba:	ecbd 8b06 	vpop	{d8-d10}
 8007ebe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec2:	f000 bcf0 	b.w	80088a6 <__math_oflow>
 8007ec6:	429c      	cmp	r4, r3
 8007ec8:	dbf2      	blt.n	8007eb0 <__ieee754_pow+0x218>
 8007eca:	4b0a      	ldr	r3, [pc, #40]	; (8007ef4 <__ieee754_pow+0x25c>)
 8007ecc:	429c      	cmp	r4, r3
 8007ece:	dd19      	ble.n	8007f04 <__ieee754_pow+0x26c>
 8007ed0:	f1b9 0f00 	cmp.w	r9, #0
 8007ed4:	dcef      	bgt.n	8007eb6 <__ieee754_pow+0x21e>
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	b009      	add	sp, #36	; 0x24
 8007eda:	ecbd 8b06 	vpop	{d8-d10}
 8007ede:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee2:	f000 bcd7 	b.w	8008894 <__math_uflow>
 8007ee6:	bf00      	nop
 8007ee8:	fff00000 	.word	0xfff00000
 8007eec:	7ff00000 	.word	0x7ff00000
 8007ef0:	433fffff 	.word	0x433fffff
 8007ef4:	3ff00000 	.word	0x3ff00000
 8007ef8:	3fefffff 	.word	0x3fefffff
 8007efc:	3fe00000 	.word	0x3fe00000
 8007f00:	41e00000 	.word	0x41e00000
 8007f04:	4b60      	ldr	r3, [pc, #384]	; (8008088 <__ieee754_pow+0x3f0>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	f7f8 f9c6 	bl	8000298 <__aeabi_dsub>
 8007f0c:	a354      	add	r3, pc, #336	; (adr r3, 8008060 <__ieee754_pow+0x3c8>)
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	4604      	mov	r4, r0
 8007f14:	460d      	mov	r5, r1
 8007f16:	f7f8 fb77 	bl	8000608 <__aeabi_dmul>
 8007f1a:	a353      	add	r3, pc, #332	; (adr r3, 8008068 <__ieee754_pow+0x3d0>)
 8007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f20:	4606      	mov	r6, r0
 8007f22:	460f      	mov	r7, r1
 8007f24:	4620      	mov	r0, r4
 8007f26:	4629      	mov	r1, r5
 8007f28:	f7f8 fb6e 	bl	8000608 <__aeabi_dmul>
 8007f2c:	4b57      	ldr	r3, [pc, #348]	; (800808c <__ieee754_pow+0x3f4>)
 8007f2e:	4682      	mov	sl, r0
 8007f30:	468b      	mov	fp, r1
 8007f32:	2200      	movs	r2, #0
 8007f34:	4620      	mov	r0, r4
 8007f36:	4629      	mov	r1, r5
 8007f38:	f7f8 fb66 	bl	8000608 <__aeabi_dmul>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	a14b      	add	r1, pc, #300	; (adr r1, 8008070 <__ieee754_pow+0x3d8>)
 8007f42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f46:	f7f8 f9a7 	bl	8000298 <__aeabi_dsub>
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	462b      	mov	r3, r5
 8007f4e:	f7f8 fb5b 	bl	8000608 <__aeabi_dmul>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	2000      	movs	r0, #0
 8007f58:	494d      	ldr	r1, [pc, #308]	; (8008090 <__ieee754_pow+0x3f8>)
 8007f5a:	f7f8 f99d 	bl	8000298 <__aeabi_dsub>
 8007f5e:	4622      	mov	r2, r4
 8007f60:	4680      	mov	r8, r0
 8007f62:	4689      	mov	r9, r1
 8007f64:	462b      	mov	r3, r5
 8007f66:	4620      	mov	r0, r4
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f7f8 fb4d 	bl	8000608 <__aeabi_dmul>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4640      	mov	r0, r8
 8007f74:	4649      	mov	r1, r9
 8007f76:	f7f8 fb47 	bl	8000608 <__aeabi_dmul>
 8007f7a:	a33f      	add	r3, pc, #252	; (adr r3, 8008078 <__ieee754_pow+0x3e0>)
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	f7f8 fb42 	bl	8000608 <__aeabi_dmul>
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	4650      	mov	r0, sl
 8007f8a:	4659      	mov	r1, fp
 8007f8c:	f7f8 f984 	bl	8000298 <__aeabi_dsub>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4680      	mov	r8, r0
 8007f96:	4689      	mov	r9, r1
 8007f98:	4630      	mov	r0, r6
 8007f9a:	4639      	mov	r1, r7
 8007f9c:	f7f8 f97e 	bl	800029c <__adddf3>
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	4632      	mov	r2, r6
 8007fa4:	463b      	mov	r3, r7
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	460d      	mov	r5, r1
 8007faa:	f7f8 f975 	bl	8000298 <__aeabi_dsub>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	f7f8 f96f 	bl	8000298 <__aeabi_dsub>
 8007fba:	9b04      	ldr	r3, [sp, #16]
 8007fbc:	9a06      	ldr	r2, [sp, #24]
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	4682      	mov	sl, r0
 8007fc4:	468b      	mov	fp, r1
 8007fc6:	f040 81e7 	bne.w	8008398 <__ieee754_pow+0x700>
 8007fca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008080 <__ieee754_pow+0x3e8>
 8007fce:	eeb0 8a47 	vmov.f32	s16, s14
 8007fd2:	eef0 8a67 	vmov.f32	s17, s15
 8007fd6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007fda:	2600      	movs	r6, #0
 8007fdc:	4632      	mov	r2, r6
 8007fde:	463b      	mov	r3, r7
 8007fe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fe4:	f7f8 f958 	bl	8000298 <__aeabi_dsub>
 8007fe8:	4622      	mov	r2, r4
 8007fea:	462b      	mov	r3, r5
 8007fec:	f7f8 fb0c 	bl	8000608 <__aeabi_dmul>
 8007ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ff4:	4680      	mov	r8, r0
 8007ff6:	4689      	mov	r9, r1
 8007ff8:	4650      	mov	r0, sl
 8007ffa:	4659      	mov	r1, fp
 8007ffc:	f7f8 fb04 	bl	8000608 <__aeabi_dmul>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	4640      	mov	r0, r8
 8008006:	4649      	mov	r1, r9
 8008008:	f7f8 f948 	bl	800029c <__adddf3>
 800800c:	4632      	mov	r2, r6
 800800e:	463b      	mov	r3, r7
 8008010:	4680      	mov	r8, r0
 8008012:	4689      	mov	r9, r1
 8008014:	4620      	mov	r0, r4
 8008016:	4629      	mov	r1, r5
 8008018:	f7f8 faf6 	bl	8000608 <__aeabi_dmul>
 800801c:	460b      	mov	r3, r1
 800801e:	4604      	mov	r4, r0
 8008020:	460d      	mov	r5, r1
 8008022:	4602      	mov	r2, r0
 8008024:	4649      	mov	r1, r9
 8008026:	4640      	mov	r0, r8
 8008028:	f7f8 f938 	bl	800029c <__adddf3>
 800802c:	4b19      	ldr	r3, [pc, #100]	; (8008094 <__ieee754_pow+0x3fc>)
 800802e:	4299      	cmp	r1, r3
 8008030:	ec45 4b19 	vmov	d9, r4, r5
 8008034:	4606      	mov	r6, r0
 8008036:	460f      	mov	r7, r1
 8008038:	468b      	mov	fp, r1
 800803a:	f340 82f1 	ble.w	8008620 <__ieee754_pow+0x988>
 800803e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008042:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008046:	4303      	orrs	r3, r0
 8008048:	f000 81e4 	beq.w	8008414 <__ieee754_pow+0x77c>
 800804c:	ec51 0b18 	vmov	r0, r1, d8
 8008050:	2200      	movs	r2, #0
 8008052:	2300      	movs	r3, #0
 8008054:	f7f8 fd4a 	bl	8000aec <__aeabi_dcmplt>
 8008058:	3800      	subs	r0, #0
 800805a:	bf18      	it	ne
 800805c:	2001      	movne	r0, #1
 800805e:	e72b      	b.n	8007eb8 <__ieee754_pow+0x220>
 8008060:	60000000 	.word	0x60000000
 8008064:	3ff71547 	.word	0x3ff71547
 8008068:	f85ddf44 	.word	0xf85ddf44
 800806c:	3e54ae0b 	.word	0x3e54ae0b
 8008070:	55555555 	.word	0x55555555
 8008074:	3fd55555 	.word	0x3fd55555
 8008078:	652b82fe 	.word	0x652b82fe
 800807c:	3ff71547 	.word	0x3ff71547
 8008080:	00000000 	.word	0x00000000
 8008084:	bff00000 	.word	0xbff00000
 8008088:	3ff00000 	.word	0x3ff00000
 800808c:	3fd00000 	.word	0x3fd00000
 8008090:	3fe00000 	.word	0x3fe00000
 8008094:	408fffff 	.word	0x408fffff
 8008098:	4bd5      	ldr	r3, [pc, #852]	; (80083f0 <__ieee754_pow+0x758>)
 800809a:	402b      	ands	r3, r5
 800809c:	2200      	movs	r2, #0
 800809e:	b92b      	cbnz	r3, 80080ac <__ieee754_pow+0x414>
 80080a0:	4bd4      	ldr	r3, [pc, #848]	; (80083f4 <__ieee754_pow+0x75c>)
 80080a2:	f7f8 fab1 	bl	8000608 <__aeabi_dmul>
 80080a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80080aa:	460c      	mov	r4, r1
 80080ac:	1523      	asrs	r3, r4, #20
 80080ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80080b2:	4413      	add	r3, r2
 80080b4:	9305      	str	r3, [sp, #20]
 80080b6:	4bd0      	ldr	r3, [pc, #832]	; (80083f8 <__ieee754_pow+0x760>)
 80080b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80080bc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80080c0:	429c      	cmp	r4, r3
 80080c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80080c6:	dd08      	ble.n	80080da <__ieee754_pow+0x442>
 80080c8:	4bcc      	ldr	r3, [pc, #816]	; (80083fc <__ieee754_pow+0x764>)
 80080ca:	429c      	cmp	r4, r3
 80080cc:	f340 8162 	ble.w	8008394 <__ieee754_pow+0x6fc>
 80080d0:	9b05      	ldr	r3, [sp, #20]
 80080d2:	3301      	adds	r3, #1
 80080d4:	9305      	str	r3, [sp, #20]
 80080d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80080da:	2400      	movs	r4, #0
 80080dc:	00e3      	lsls	r3, r4, #3
 80080de:	9307      	str	r3, [sp, #28]
 80080e0:	4bc7      	ldr	r3, [pc, #796]	; (8008400 <__ieee754_pow+0x768>)
 80080e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080e6:	ed93 7b00 	vldr	d7, [r3]
 80080ea:	4629      	mov	r1, r5
 80080ec:	ec53 2b17 	vmov	r2, r3, d7
 80080f0:	eeb0 9a47 	vmov.f32	s18, s14
 80080f4:	eef0 9a67 	vmov.f32	s19, s15
 80080f8:	4682      	mov	sl, r0
 80080fa:	f7f8 f8cd 	bl	8000298 <__aeabi_dsub>
 80080fe:	4652      	mov	r2, sl
 8008100:	4606      	mov	r6, r0
 8008102:	460f      	mov	r7, r1
 8008104:	462b      	mov	r3, r5
 8008106:	ec51 0b19 	vmov	r0, r1, d9
 800810a:	f7f8 f8c7 	bl	800029c <__adddf3>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	2000      	movs	r0, #0
 8008114:	49bb      	ldr	r1, [pc, #748]	; (8008404 <__ieee754_pow+0x76c>)
 8008116:	f7f8 fba1 	bl	800085c <__aeabi_ddiv>
 800811a:	ec41 0b1a 	vmov	d10, r0, r1
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	4630      	mov	r0, r6
 8008124:	4639      	mov	r1, r7
 8008126:	f7f8 fa6f 	bl	8000608 <__aeabi_dmul>
 800812a:	2300      	movs	r3, #0
 800812c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008130:	9302      	str	r3, [sp, #8]
 8008132:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008136:	46ab      	mov	fp, r5
 8008138:	106d      	asrs	r5, r5, #1
 800813a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800813e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008142:	ec41 0b18 	vmov	d8, r0, r1
 8008146:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800814a:	2200      	movs	r2, #0
 800814c:	4640      	mov	r0, r8
 800814e:	4649      	mov	r1, r9
 8008150:	4614      	mov	r4, r2
 8008152:	461d      	mov	r5, r3
 8008154:	f7f8 fa58 	bl	8000608 <__aeabi_dmul>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4630      	mov	r0, r6
 800815e:	4639      	mov	r1, r7
 8008160:	f7f8 f89a 	bl	8000298 <__aeabi_dsub>
 8008164:	ec53 2b19 	vmov	r2, r3, d9
 8008168:	4606      	mov	r6, r0
 800816a:	460f      	mov	r7, r1
 800816c:	4620      	mov	r0, r4
 800816e:	4629      	mov	r1, r5
 8008170:	f7f8 f892 	bl	8000298 <__aeabi_dsub>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	4650      	mov	r0, sl
 800817a:	4659      	mov	r1, fp
 800817c:	f7f8 f88c 	bl	8000298 <__aeabi_dsub>
 8008180:	4642      	mov	r2, r8
 8008182:	464b      	mov	r3, r9
 8008184:	f7f8 fa40 	bl	8000608 <__aeabi_dmul>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4630      	mov	r0, r6
 800818e:	4639      	mov	r1, r7
 8008190:	f7f8 f882 	bl	8000298 <__aeabi_dsub>
 8008194:	ec53 2b1a 	vmov	r2, r3, d10
 8008198:	f7f8 fa36 	bl	8000608 <__aeabi_dmul>
 800819c:	ec53 2b18 	vmov	r2, r3, d8
 80081a0:	ec41 0b19 	vmov	d9, r0, r1
 80081a4:	ec51 0b18 	vmov	r0, r1, d8
 80081a8:	f7f8 fa2e 	bl	8000608 <__aeabi_dmul>
 80081ac:	a37c      	add	r3, pc, #496	; (adr r3, 80083a0 <__ieee754_pow+0x708>)
 80081ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b2:	4604      	mov	r4, r0
 80081b4:	460d      	mov	r5, r1
 80081b6:	f7f8 fa27 	bl	8000608 <__aeabi_dmul>
 80081ba:	a37b      	add	r3, pc, #492	; (adr r3, 80083a8 <__ieee754_pow+0x710>)
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	f7f8 f86c 	bl	800029c <__adddf3>
 80081c4:	4622      	mov	r2, r4
 80081c6:	462b      	mov	r3, r5
 80081c8:	f7f8 fa1e 	bl	8000608 <__aeabi_dmul>
 80081cc:	a378      	add	r3, pc, #480	; (adr r3, 80083b0 <__ieee754_pow+0x718>)
 80081ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d2:	f7f8 f863 	bl	800029c <__adddf3>
 80081d6:	4622      	mov	r2, r4
 80081d8:	462b      	mov	r3, r5
 80081da:	f7f8 fa15 	bl	8000608 <__aeabi_dmul>
 80081de:	a376      	add	r3, pc, #472	; (adr r3, 80083b8 <__ieee754_pow+0x720>)
 80081e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e4:	f7f8 f85a 	bl	800029c <__adddf3>
 80081e8:	4622      	mov	r2, r4
 80081ea:	462b      	mov	r3, r5
 80081ec:	f7f8 fa0c 	bl	8000608 <__aeabi_dmul>
 80081f0:	a373      	add	r3, pc, #460	; (adr r3, 80083c0 <__ieee754_pow+0x728>)
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	f7f8 f851 	bl	800029c <__adddf3>
 80081fa:	4622      	mov	r2, r4
 80081fc:	462b      	mov	r3, r5
 80081fe:	f7f8 fa03 	bl	8000608 <__aeabi_dmul>
 8008202:	a371      	add	r3, pc, #452	; (adr r3, 80083c8 <__ieee754_pow+0x730>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f8 f848 	bl	800029c <__adddf3>
 800820c:	4622      	mov	r2, r4
 800820e:	4606      	mov	r6, r0
 8008210:	460f      	mov	r7, r1
 8008212:	462b      	mov	r3, r5
 8008214:	4620      	mov	r0, r4
 8008216:	4629      	mov	r1, r5
 8008218:	f7f8 f9f6 	bl	8000608 <__aeabi_dmul>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4630      	mov	r0, r6
 8008222:	4639      	mov	r1, r7
 8008224:	f7f8 f9f0 	bl	8000608 <__aeabi_dmul>
 8008228:	4642      	mov	r2, r8
 800822a:	4604      	mov	r4, r0
 800822c:	460d      	mov	r5, r1
 800822e:	464b      	mov	r3, r9
 8008230:	ec51 0b18 	vmov	r0, r1, d8
 8008234:	f7f8 f832 	bl	800029c <__adddf3>
 8008238:	ec53 2b19 	vmov	r2, r3, d9
 800823c:	f7f8 f9e4 	bl	8000608 <__aeabi_dmul>
 8008240:	4622      	mov	r2, r4
 8008242:	462b      	mov	r3, r5
 8008244:	f7f8 f82a 	bl	800029c <__adddf3>
 8008248:	4642      	mov	r2, r8
 800824a:	4682      	mov	sl, r0
 800824c:	468b      	mov	fp, r1
 800824e:	464b      	mov	r3, r9
 8008250:	4640      	mov	r0, r8
 8008252:	4649      	mov	r1, r9
 8008254:	f7f8 f9d8 	bl	8000608 <__aeabi_dmul>
 8008258:	4b6b      	ldr	r3, [pc, #428]	; (8008408 <__ieee754_pow+0x770>)
 800825a:	2200      	movs	r2, #0
 800825c:	4606      	mov	r6, r0
 800825e:	460f      	mov	r7, r1
 8008260:	f7f8 f81c 	bl	800029c <__adddf3>
 8008264:	4652      	mov	r2, sl
 8008266:	465b      	mov	r3, fp
 8008268:	f7f8 f818 	bl	800029c <__adddf3>
 800826c:	2000      	movs	r0, #0
 800826e:	4604      	mov	r4, r0
 8008270:	460d      	mov	r5, r1
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	4640      	mov	r0, r8
 8008278:	4649      	mov	r1, r9
 800827a:	f7f8 f9c5 	bl	8000608 <__aeabi_dmul>
 800827e:	4b62      	ldr	r3, [pc, #392]	; (8008408 <__ieee754_pow+0x770>)
 8008280:	4680      	mov	r8, r0
 8008282:	4689      	mov	r9, r1
 8008284:	2200      	movs	r2, #0
 8008286:	4620      	mov	r0, r4
 8008288:	4629      	mov	r1, r5
 800828a:	f7f8 f805 	bl	8000298 <__aeabi_dsub>
 800828e:	4632      	mov	r2, r6
 8008290:	463b      	mov	r3, r7
 8008292:	f7f8 f801 	bl	8000298 <__aeabi_dsub>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4650      	mov	r0, sl
 800829c:	4659      	mov	r1, fp
 800829e:	f7f7 fffb 	bl	8000298 <__aeabi_dsub>
 80082a2:	ec53 2b18 	vmov	r2, r3, d8
 80082a6:	f7f8 f9af 	bl	8000608 <__aeabi_dmul>
 80082aa:	4622      	mov	r2, r4
 80082ac:	4606      	mov	r6, r0
 80082ae:	460f      	mov	r7, r1
 80082b0:	462b      	mov	r3, r5
 80082b2:	ec51 0b19 	vmov	r0, r1, d9
 80082b6:	f7f8 f9a7 	bl	8000608 <__aeabi_dmul>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	4630      	mov	r0, r6
 80082c0:	4639      	mov	r1, r7
 80082c2:	f7f7 ffeb 	bl	800029c <__adddf3>
 80082c6:	4606      	mov	r6, r0
 80082c8:	460f      	mov	r7, r1
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4640      	mov	r0, r8
 80082d0:	4649      	mov	r1, r9
 80082d2:	f7f7 ffe3 	bl	800029c <__adddf3>
 80082d6:	a33e      	add	r3, pc, #248	; (adr r3, 80083d0 <__ieee754_pow+0x738>)
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	2000      	movs	r0, #0
 80082de:	4604      	mov	r4, r0
 80082e0:	460d      	mov	r5, r1
 80082e2:	f7f8 f991 	bl	8000608 <__aeabi_dmul>
 80082e6:	4642      	mov	r2, r8
 80082e8:	ec41 0b18 	vmov	d8, r0, r1
 80082ec:	464b      	mov	r3, r9
 80082ee:	4620      	mov	r0, r4
 80082f0:	4629      	mov	r1, r5
 80082f2:	f7f7 ffd1 	bl	8000298 <__aeabi_dsub>
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	4630      	mov	r0, r6
 80082fc:	4639      	mov	r1, r7
 80082fe:	f7f7 ffcb 	bl	8000298 <__aeabi_dsub>
 8008302:	a335      	add	r3, pc, #212	; (adr r3, 80083d8 <__ieee754_pow+0x740>)
 8008304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008308:	f7f8 f97e 	bl	8000608 <__aeabi_dmul>
 800830c:	a334      	add	r3, pc, #208	; (adr r3, 80083e0 <__ieee754_pow+0x748>)
 800830e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008312:	4606      	mov	r6, r0
 8008314:	460f      	mov	r7, r1
 8008316:	4620      	mov	r0, r4
 8008318:	4629      	mov	r1, r5
 800831a:	f7f8 f975 	bl	8000608 <__aeabi_dmul>
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	4630      	mov	r0, r6
 8008324:	4639      	mov	r1, r7
 8008326:	f7f7 ffb9 	bl	800029c <__adddf3>
 800832a:	9a07      	ldr	r2, [sp, #28]
 800832c:	4b37      	ldr	r3, [pc, #220]	; (800840c <__ieee754_pow+0x774>)
 800832e:	4413      	add	r3, r2
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	f7f7 ffb2 	bl	800029c <__adddf3>
 8008338:	4682      	mov	sl, r0
 800833a:	9805      	ldr	r0, [sp, #20]
 800833c:	468b      	mov	fp, r1
 800833e:	f7f8 f8f9 	bl	8000534 <__aeabi_i2d>
 8008342:	9a07      	ldr	r2, [sp, #28]
 8008344:	4b32      	ldr	r3, [pc, #200]	; (8008410 <__ieee754_pow+0x778>)
 8008346:	4413      	add	r3, r2
 8008348:	e9d3 8900 	ldrd	r8, r9, [r3]
 800834c:	4606      	mov	r6, r0
 800834e:	460f      	mov	r7, r1
 8008350:	4652      	mov	r2, sl
 8008352:	465b      	mov	r3, fp
 8008354:	ec51 0b18 	vmov	r0, r1, d8
 8008358:	f7f7 ffa0 	bl	800029c <__adddf3>
 800835c:	4642      	mov	r2, r8
 800835e:	464b      	mov	r3, r9
 8008360:	f7f7 ff9c 	bl	800029c <__adddf3>
 8008364:	4632      	mov	r2, r6
 8008366:	463b      	mov	r3, r7
 8008368:	f7f7 ff98 	bl	800029c <__adddf3>
 800836c:	2000      	movs	r0, #0
 800836e:	4632      	mov	r2, r6
 8008370:	463b      	mov	r3, r7
 8008372:	4604      	mov	r4, r0
 8008374:	460d      	mov	r5, r1
 8008376:	f7f7 ff8f 	bl	8000298 <__aeabi_dsub>
 800837a:	4642      	mov	r2, r8
 800837c:	464b      	mov	r3, r9
 800837e:	f7f7 ff8b 	bl	8000298 <__aeabi_dsub>
 8008382:	ec53 2b18 	vmov	r2, r3, d8
 8008386:	f7f7 ff87 	bl	8000298 <__aeabi_dsub>
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	4650      	mov	r0, sl
 8008390:	4659      	mov	r1, fp
 8008392:	e610      	b.n	8007fb6 <__ieee754_pow+0x31e>
 8008394:	2401      	movs	r4, #1
 8008396:	e6a1      	b.n	80080dc <__ieee754_pow+0x444>
 8008398:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80083e8 <__ieee754_pow+0x750>
 800839c:	e617      	b.n	8007fce <__ieee754_pow+0x336>
 800839e:	bf00      	nop
 80083a0:	4a454eef 	.word	0x4a454eef
 80083a4:	3fca7e28 	.word	0x3fca7e28
 80083a8:	93c9db65 	.word	0x93c9db65
 80083ac:	3fcd864a 	.word	0x3fcd864a
 80083b0:	a91d4101 	.word	0xa91d4101
 80083b4:	3fd17460 	.word	0x3fd17460
 80083b8:	518f264d 	.word	0x518f264d
 80083bc:	3fd55555 	.word	0x3fd55555
 80083c0:	db6fabff 	.word	0xdb6fabff
 80083c4:	3fdb6db6 	.word	0x3fdb6db6
 80083c8:	33333303 	.word	0x33333303
 80083cc:	3fe33333 	.word	0x3fe33333
 80083d0:	e0000000 	.word	0xe0000000
 80083d4:	3feec709 	.word	0x3feec709
 80083d8:	dc3a03fd 	.word	0xdc3a03fd
 80083dc:	3feec709 	.word	0x3feec709
 80083e0:	145b01f5 	.word	0x145b01f5
 80083e4:	be3e2fe0 	.word	0xbe3e2fe0
 80083e8:	00000000 	.word	0x00000000
 80083ec:	3ff00000 	.word	0x3ff00000
 80083f0:	7ff00000 	.word	0x7ff00000
 80083f4:	43400000 	.word	0x43400000
 80083f8:	0003988e 	.word	0x0003988e
 80083fc:	000bb679 	.word	0x000bb679
 8008400:	08008e80 	.word	0x08008e80
 8008404:	3ff00000 	.word	0x3ff00000
 8008408:	40080000 	.word	0x40080000
 800840c:	08008ea0 	.word	0x08008ea0
 8008410:	08008e90 	.word	0x08008e90
 8008414:	a3b5      	add	r3, pc, #724	; (adr r3, 80086ec <__ieee754_pow+0xa54>)
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	4640      	mov	r0, r8
 800841c:	4649      	mov	r1, r9
 800841e:	f7f7 ff3d 	bl	800029c <__adddf3>
 8008422:	4622      	mov	r2, r4
 8008424:	ec41 0b1a 	vmov	d10, r0, r1
 8008428:	462b      	mov	r3, r5
 800842a:	4630      	mov	r0, r6
 800842c:	4639      	mov	r1, r7
 800842e:	f7f7 ff33 	bl	8000298 <__aeabi_dsub>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	ec51 0b1a 	vmov	r0, r1, d10
 800843a:	f7f8 fb75 	bl	8000b28 <__aeabi_dcmpgt>
 800843e:	2800      	cmp	r0, #0
 8008440:	f47f ae04 	bne.w	800804c <__ieee754_pow+0x3b4>
 8008444:	4aa4      	ldr	r2, [pc, #656]	; (80086d8 <__ieee754_pow+0xa40>)
 8008446:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800844a:	4293      	cmp	r3, r2
 800844c:	f340 8108 	ble.w	8008660 <__ieee754_pow+0x9c8>
 8008450:	151b      	asrs	r3, r3, #20
 8008452:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008456:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800845a:	fa4a f303 	asr.w	r3, sl, r3
 800845e:	445b      	add	r3, fp
 8008460:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008464:	4e9d      	ldr	r6, [pc, #628]	; (80086dc <__ieee754_pow+0xa44>)
 8008466:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800846a:	4116      	asrs	r6, r2
 800846c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008470:	2000      	movs	r0, #0
 8008472:	ea23 0106 	bic.w	r1, r3, r6
 8008476:	f1c2 0214 	rsb	r2, r2, #20
 800847a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800847e:	fa4a fa02 	asr.w	sl, sl, r2
 8008482:	f1bb 0f00 	cmp.w	fp, #0
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	4620      	mov	r0, r4
 800848c:	4629      	mov	r1, r5
 800848e:	bfb8      	it	lt
 8008490:	f1ca 0a00 	rsblt	sl, sl, #0
 8008494:	f7f7 ff00 	bl	8000298 <__aeabi_dsub>
 8008498:	ec41 0b19 	vmov	d9, r0, r1
 800849c:	4642      	mov	r2, r8
 800849e:	464b      	mov	r3, r9
 80084a0:	ec51 0b19 	vmov	r0, r1, d9
 80084a4:	f7f7 fefa 	bl	800029c <__adddf3>
 80084a8:	a37b      	add	r3, pc, #492	; (adr r3, 8008698 <__ieee754_pow+0xa00>)
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	2000      	movs	r0, #0
 80084b0:	4604      	mov	r4, r0
 80084b2:	460d      	mov	r5, r1
 80084b4:	f7f8 f8a8 	bl	8000608 <__aeabi_dmul>
 80084b8:	ec53 2b19 	vmov	r2, r3, d9
 80084bc:	4606      	mov	r6, r0
 80084be:	460f      	mov	r7, r1
 80084c0:	4620      	mov	r0, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	f7f7 fee8 	bl	8000298 <__aeabi_dsub>
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4640      	mov	r0, r8
 80084ce:	4649      	mov	r1, r9
 80084d0:	f7f7 fee2 	bl	8000298 <__aeabi_dsub>
 80084d4:	a372      	add	r3, pc, #456	; (adr r3, 80086a0 <__ieee754_pow+0xa08>)
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	f7f8 f895 	bl	8000608 <__aeabi_dmul>
 80084de:	a372      	add	r3, pc, #456	; (adr r3, 80086a8 <__ieee754_pow+0xa10>)
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	4680      	mov	r8, r0
 80084e6:	4689      	mov	r9, r1
 80084e8:	4620      	mov	r0, r4
 80084ea:	4629      	mov	r1, r5
 80084ec:	f7f8 f88c 	bl	8000608 <__aeabi_dmul>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4640      	mov	r0, r8
 80084f6:	4649      	mov	r1, r9
 80084f8:	f7f7 fed0 	bl	800029c <__adddf3>
 80084fc:	4604      	mov	r4, r0
 80084fe:	460d      	mov	r5, r1
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4630      	mov	r0, r6
 8008506:	4639      	mov	r1, r7
 8008508:	f7f7 fec8 	bl	800029c <__adddf3>
 800850c:	4632      	mov	r2, r6
 800850e:	463b      	mov	r3, r7
 8008510:	4680      	mov	r8, r0
 8008512:	4689      	mov	r9, r1
 8008514:	f7f7 fec0 	bl	8000298 <__aeabi_dsub>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	4620      	mov	r0, r4
 800851e:	4629      	mov	r1, r5
 8008520:	f7f7 feba 	bl	8000298 <__aeabi_dsub>
 8008524:	4642      	mov	r2, r8
 8008526:	4606      	mov	r6, r0
 8008528:	460f      	mov	r7, r1
 800852a:	464b      	mov	r3, r9
 800852c:	4640      	mov	r0, r8
 800852e:	4649      	mov	r1, r9
 8008530:	f7f8 f86a 	bl	8000608 <__aeabi_dmul>
 8008534:	a35e      	add	r3, pc, #376	; (adr r3, 80086b0 <__ieee754_pow+0xa18>)
 8008536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853a:	4604      	mov	r4, r0
 800853c:	460d      	mov	r5, r1
 800853e:	f7f8 f863 	bl	8000608 <__aeabi_dmul>
 8008542:	a35d      	add	r3, pc, #372	; (adr r3, 80086b8 <__ieee754_pow+0xa20>)
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	f7f7 fea6 	bl	8000298 <__aeabi_dsub>
 800854c:	4622      	mov	r2, r4
 800854e:	462b      	mov	r3, r5
 8008550:	f7f8 f85a 	bl	8000608 <__aeabi_dmul>
 8008554:	a35a      	add	r3, pc, #360	; (adr r3, 80086c0 <__ieee754_pow+0xa28>)
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	f7f7 fe9f 	bl	800029c <__adddf3>
 800855e:	4622      	mov	r2, r4
 8008560:	462b      	mov	r3, r5
 8008562:	f7f8 f851 	bl	8000608 <__aeabi_dmul>
 8008566:	a358      	add	r3, pc, #352	; (adr r3, 80086c8 <__ieee754_pow+0xa30>)
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	f7f7 fe94 	bl	8000298 <__aeabi_dsub>
 8008570:	4622      	mov	r2, r4
 8008572:	462b      	mov	r3, r5
 8008574:	f7f8 f848 	bl	8000608 <__aeabi_dmul>
 8008578:	a355      	add	r3, pc, #340	; (adr r3, 80086d0 <__ieee754_pow+0xa38>)
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f7f7 fe8d 	bl	800029c <__adddf3>
 8008582:	4622      	mov	r2, r4
 8008584:	462b      	mov	r3, r5
 8008586:	f7f8 f83f 	bl	8000608 <__aeabi_dmul>
 800858a:	4602      	mov	r2, r0
 800858c:	460b      	mov	r3, r1
 800858e:	4640      	mov	r0, r8
 8008590:	4649      	mov	r1, r9
 8008592:	f7f7 fe81 	bl	8000298 <__aeabi_dsub>
 8008596:	4604      	mov	r4, r0
 8008598:	460d      	mov	r5, r1
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	4640      	mov	r0, r8
 80085a0:	4649      	mov	r1, r9
 80085a2:	f7f8 f831 	bl	8000608 <__aeabi_dmul>
 80085a6:	2200      	movs	r2, #0
 80085a8:	ec41 0b19 	vmov	d9, r0, r1
 80085ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085b0:	4620      	mov	r0, r4
 80085b2:	4629      	mov	r1, r5
 80085b4:	f7f7 fe70 	bl	8000298 <__aeabi_dsub>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	ec51 0b19 	vmov	r0, r1, d9
 80085c0:	f7f8 f94c 	bl	800085c <__aeabi_ddiv>
 80085c4:	4632      	mov	r2, r6
 80085c6:	4604      	mov	r4, r0
 80085c8:	460d      	mov	r5, r1
 80085ca:	463b      	mov	r3, r7
 80085cc:	4640      	mov	r0, r8
 80085ce:	4649      	mov	r1, r9
 80085d0:	f7f8 f81a 	bl	8000608 <__aeabi_dmul>
 80085d4:	4632      	mov	r2, r6
 80085d6:	463b      	mov	r3, r7
 80085d8:	f7f7 fe60 	bl	800029c <__adddf3>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4620      	mov	r0, r4
 80085e2:	4629      	mov	r1, r5
 80085e4:	f7f7 fe58 	bl	8000298 <__aeabi_dsub>
 80085e8:	4642      	mov	r2, r8
 80085ea:	464b      	mov	r3, r9
 80085ec:	f7f7 fe54 	bl	8000298 <__aeabi_dsub>
 80085f0:	460b      	mov	r3, r1
 80085f2:	4602      	mov	r2, r0
 80085f4:	493a      	ldr	r1, [pc, #232]	; (80086e0 <__ieee754_pow+0xa48>)
 80085f6:	2000      	movs	r0, #0
 80085f8:	f7f7 fe4e 	bl	8000298 <__aeabi_dsub>
 80085fc:	ec41 0b10 	vmov	d0, r0, r1
 8008600:	ee10 3a90 	vmov	r3, s1
 8008604:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800860c:	da2b      	bge.n	8008666 <__ieee754_pow+0x9ce>
 800860e:	4650      	mov	r0, sl
 8008610:	f000 f966 	bl	80088e0 <scalbn>
 8008614:	ec51 0b10 	vmov	r0, r1, d0
 8008618:	ec53 2b18 	vmov	r2, r3, d8
 800861c:	f7ff bbed 	b.w	8007dfa <__ieee754_pow+0x162>
 8008620:	4b30      	ldr	r3, [pc, #192]	; (80086e4 <__ieee754_pow+0xa4c>)
 8008622:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008626:	429e      	cmp	r6, r3
 8008628:	f77f af0c 	ble.w	8008444 <__ieee754_pow+0x7ac>
 800862c:	4b2e      	ldr	r3, [pc, #184]	; (80086e8 <__ieee754_pow+0xa50>)
 800862e:	440b      	add	r3, r1
 8008630:	4303      	orrs	r3, r0
 8008632:	d009      	beq.n	8008648 <__ieee754_pow+0x9b0>
 8008634:	ec51 0b18 	vmov	r0, r1, d8
 8008638:	2200      	movs	r2, #0
 800863a:	2300      	movs	r3, #0
 800863c:	f7f8 fa56 	bl	8000aec <__aeabi_dcmplt>
 8008640:	3800      	subs	r0, #0
 8008642:	bf18      	it	ne
 8008644:	2001      	movne	r0, #1
 8008646:	e447      	b.n	8007ed8 <__ieee754_pow+0x240>
 8008648:	4622      	mov	r2, r4
 800864a:	462b      	mov	r3, r5
 800864c:	f7f7 fe24 	bl	8000298 <__aeabi_dsub>
 8008650:	4642      	mov	r2, r8
 8008652:	464b      	mov	r3, r9
 8008654:	f7f8 fa5e 	bl	8000b14 <__aeabi_dcmpge>
 8008658:	2800      	cmp	r0, #0
 800865a:	f43f aef3 	beq.w	8008444 <__ieee754_pow+0x7ac>
 800865e:	e7e9      	b.n	8008634 <__ieee754_pow+0x99c>
 8008660:	f04f 0a00 	mov.w	sl, #0
 8008664:	e71a      	b.n	800849c <__ieee754_pow+0x804>
 8008666:	ec51 0b10 	vmov	r0, r1, d0
 800866a:	4619      	mov	r1, r3
 800866c:	e7d4      	b.n	8008618 <__ieee754_pow+0x980>
 800866e:	491c      	ldr	r1, [pc, #112]	; (80086e0 <__ieee754_pow+0xa48>)
 8008670:	2000      	movs	r0, #0
 8008672:	f7ff bb30 	b.w	8007cd6 <__ieee754_pow+0x3e>
 8008676:	2000      	movs	r0, #0
 8008678:	2100      	movs	r1, #0
 800867a:	f7ff bb2c 	b.w	8007cd6 <__ieee754_pow+0x3e>
 800867e:	4630      	mov	r0, r6
 8008680:	4639      	mov	r1, r7
 8008682:	f7ff bb28 	b.w	8007cd6 <__ieee754_pow+0x3e>
 8008686:	9204      	str	r2, [sp, #16]
 8008688:	f7ff bb7a 	b.w	8007d80 <__ieee754_pow+0xe8>
 800868c:	2300      	movs	r3, #0
 800868e:	f7ff bb64 	b.w	8007d5a <__ieee754_pow+0xc2>
 8008692:	bf00      	nop
 8008694:	f3af 8000 	nop.w
 8008698:	00000000 	.word	0x00000000
 800869c:	3fe62e43 	.word	0x3fe62e43
 80086a0:	fefa39ef 	.word	0xfefa39ef
 80086a4:	3fe62e42 	.word	0x3fe62e42
 80086a8:	0ca86c39 	.word	0x0ca86c39
 80086ac:	be205c61 	.word	0xbe205c61
 80086b0:	72bea4d0 	.word	0x72bea4d0
 80086b4:	3e663769 	.word	0x3e663769
 80086b8:	c5d26bf1 	.word	0xc5d26bf1
 80086bc:	3ebbbd41 	.word	0x3ebbbd41
 80086c0:	af25de2c 	.word	0xaf25de2c
 80086c4:	3f11566a 	.word	0x3f11566a
 80086c8:	16bebd93 	.word	0x16bebd93
 80086cc:	3f66c16c 	.word	0x3f66c16c
 80086d0:	5555553e 	.word	0x5555553e
 80086d4:	3fc55555 	.word	0x3fc55555
 80086d8:	3fe00000 	.word	0x3fe00000
 80086dc:	000fffff 	.word	0x000fffff
 80086e0:	3ff00000 	.word	0x3ff00000
 80086e4:	4090cbff 	.word	0x4090cbff
 80086e8:	3f6f3400 	.word	0x3f6f3400
 80086ec:	652b82fe 	.word	0x652b82fe
 80086f0:	3c971547 	.word	0x3c971547

080086f4 <__ieee754_sqrt>:
 80086f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f8:	ec55 4b10 	vmov	r4, r5, d0
 80086fc:	4e55      	ldr	r6, [pc, #340]	; (8008854 <__ieee754_sqrt+0x160>)
 80086fe:	43ae      	bics	r6, r5
 8008700:	ee10 0a10 	vmov	r0, s0
 8008704:	ee10 3a10 	vmov	r3, s0
 8008708:	462a      	mov	r2, r5
 800870a:	4629      	mov	r1, r5
 800870c:	d110      	bne.n	8008730 <__ieee754_sqrt+0x3c>
 800870e:	ee10 2a10 	vmov	r2, s0
 8008712:	462b      	mov	r3, r5
 8008714:	f7f7 ff78 	bl	8000608 <__aeabi_dmul>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4620      	mov	r0, r4
 800871e:	4629      	mov	r1, r5
 8008720:	f7f7 fdbc 	bl	800029c <__adddf3>
 8008724:	4604      	mov	r4, r0
 8008726:	460d      	mov	r5, r1
 8008728:	ec45 4b10 	vmov	d0, r4, r5
 800872c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008730:	2d00      	cmp	r5, #0
 8008732:	dc10      	bgt.n	8008756 <__ieee754_sqrt+0x62>
 8008734:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008738:	4330      	orrs	r0, r6
 800873a:	d0f5      	beq.n	8008728 <__ieee754_sqrt+0x34>
 800873c:	b15d      	cbz	r5, 8008756 <__ieee754_sqrt+0x62>
 800873e:	ee10 2a10 	vmov	r2, s0
 8008742:	462b      	mov	r3, r5
 8008744:	ee10 0a10 	vmov	r0, s0
 8008748:	f7f7 fda6 	bl	8000298 <__aeabi_dsub>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	f7f8 f884 	bl	800085c <__aeabi_ddiv>
 8008754:	e7e6      	b.n	8008724 <__ieee754_sqrt+0x30>
 8008756:	1512      	asrs	r2, r2, #20
 8008758:	d074      	beq.n	8008844 <__ieee754_sqrt+0x150>
 800875a:	07d4      	lsls	r4, r2, #31
 800875c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008760:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008764:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008768:	bf5e      	ittt	pl
 800876a:	0fda      	lsrpl	r2, r3, #31
 800876c:	005b      	lslpl	r3, r3, #1
 800876e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008772:	2400      	movs	r4, #0
 8008774:	0fda      	lsrs	r2, r3, #31
 8008776:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800877a:	107f      	asrs	r7, r7, #1
 800877c:	005b      	lsls	r3, r3, #1
 800877e:	2516      	movs	r5, #22
 8008780:	4620      	mov	r0, r4
 8008782:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008786:	1886      	adds	r6, r0, r2
 8008788:	428e      	cmp	r6, r1
 800878a:	bfde      	ittt	le
 800878c:	1b89      	suble	r1, r1, r6
 800878e:	18b0      	addle	r0, r6, r2
 8008790:	18a4      	addle	r4, r4, r2
 8008792:	0049      	lsls	r1, r1, #1
 8008794:	3d01      	subs	r5, #1
 8008796:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800879a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800879e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80087a2:	d1f0      	bne.n	8008786 <__ieee754_sqrt+0x92>
 80087a4:	462a      	mov	r2, r5
 80087a6:	f04f 0e20 	mov.w	lr, #32
 80087aa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80087ae:	4281      	cmp	r1, r0
 80087b0:	eb06 0c05 	add.w	ip, r6, r5
 80087b4:	dc02      	bgt.n	80087bc <__ieee754_sqrt+0xc8>
 80087b6:	d113      	bne.n	80087e0 <__ieee754_sqrt+0xec>
 80087b8:	459c      	cmp	ip, r3
 80087ba:	d811      	bhi.n	80087e0 <__ieee754_sqrt+0xec>
 80087bc:	f1bc 0f00 	cmp.w	ip, #0
 80087c0:	eb0c 0506 	add.w	r5, ip, r6
 80087c4:	da43      	bge.n	800884e <__ieee754_sqrt+0x15a>
 80087c6:	2d00      	cmp	r5, #0
 80087c8:	db41      	blt.n	800884e <__ieee754_sqrt+0x15a>
 80087ca:	f100 0801 	add.w	r8, r0, #1
 80087ce:	1a09      	subs	r1, r1, r0
 80087d0:	459c      	cmp	ip, r3
 80087d2:	bf88      	it	hi
 80087d4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80087d8:	eba3 030c 	sub.w	r3, r3, ip
 80087dc:	4432      	add	r2, r6
 80087de:	4640      	mov	r0, r8
 80087e0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80087e4:	f1be 0e01 	subs.w	lr, lr, #1
 80087e8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80087ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80087f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80087f4:	d1db      	bne.n	80087ae <__ieee754_sqrt+0xba>
 80087f6:	430b      	orrs	r3, r1
 80087f8:	d006      	beq.n	8008808 <__ieee754_sqrt+0x114>
 80087fa:	1c50      	adds	r0, r2, #1
 80087fc:	bf13      	iteet	ne
 80087fe:	3201      	addne	r2, #1
 8008800:	3401      	addeq	r4, #1
 8008802:	4672      	moveq	r2, lr
 8008804:	f022 0201 	bicne.w	r2, r2, #1
 8008808:	1063      	asrs	r3, r4, #1
 800880a:	0852      	lsrs	r2, r2, #1
 800880c:	07e1      	lsls	r1, r4, #31
 800880e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008812:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008816:	bf48      	it	mi
 8008818:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800881c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008820:	4614      	mov	r4, r2
 8008822:	e781      	b.n	8008728 <__ieee754_sqrt+0x34>
 8008824:	0ad9      	lsrs	r1, r3, #11
 8008826:	3815      	subs	r0, #21
 8008828:	055b      	lsls	r3, r3, #21
 800882a:	2900      	cmp	r1, #0
 800882c:	d0fa      	beq.n	8008824 <__ieee754_sqrt+0x130>
 800882e:	02cd      	lsls	r5, r1, #11
 8008830:	d50a      	bpl.n	8008848 <__ieee754_sqrt+0x154>
 8008832:	f1c2 0420 	rsb	r4, r2, #32
 8008836:	fa23 f404 	lsr.w	r4, r3, r4
 800883a:	1e55      	subs	r5, r2, #1
 800883c:	4093      	lsls	r3, r2
 800883e:	4321      	orrs	r1, r4
 8008840:	1b42      	subs	r2, r0, r5
 8008842:	e78a      	b.n	800875a <__ieee754_sqrt+0x66>
 8008844:	4610      	mov	r0, r2
 8008846:	e7f0      	b.n	800882a <__ieee754_sqrt+0x136>
 8008848:	0049      	lsls	r1, r1, #1
 800884a:	3201      	adds	r2, #1
 800884c:	e7ef      	b.n	800882e <__ieee754_sqrt+0x13a>
 800884e:	4680      	mov	r8, r0
 8008850:	e7bd      	b.n	80087ce <__ieee754_sqrt+0xda>
 8008852:	bf00      	nop
 8008854:	7ff00000 	.word	0x7ff00000

08008858 <with_errno>:
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	4604      	mov	r4, r0
 800885c:	460d      	mov	r5, r1
 800885e:	4616      	mov	r6, r2
 8008860:	f7fc fc1a 	bl	8005098 <__errno>
 8008864:	4629      	mov	r1, r5
 8008866:	6006      	str	r6, [r0, #0]
 8008868:	4620      	mov	r0, r4
 800886a:	bd70      	pop	{r4, r5, r6, pc}

0800886c <xflow>:
 800886c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800886e:	4614      	mov	r4, r2
 8008870:	461d      	mov	r5, r3
 8008872:	b108      	cbz	r0, 8008878 <xflow+0xc>
 8008874:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008878:	e9cd 2300 	strd	r2, r3, [sp]
 800887c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008880:	4620      	mov	r0, r4
 8008882:	4629      	mov	r1, r5
 8008884:	f7f7 fec0 	bl	8000608 <__aeabi_dmul>
 8008888:	2222      	movs	r2, #34	; 0x22
 800888a:	b003      	add	sp, #12
 800888c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008890:	f7ff bfe2 	b.w	8008858 <with_errno>

08008894 <__math_uflow>:
 8008894:	b508      	push	{r3, lr}
 8008896:	2200      	movs	r2, #0
 8008898:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800889c:	f7ff ffe6 	bl	800886c <xflow>
 80088a0:	ec41 0b10 	vmov	d0, r0, r1
 80088a4:	bd08      	pop	{r3, pc}

080088a6 <__math_oflow>:
 80088a6:	b508      	push	{r3, lr}
 80088a8:	2200      	movs	r2, #0
 80088aa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80088ae:	f7ff ffdd 	bl	800886c <xflow>
 80088b2:	ec41 0b10 	vmov	d0, r0, r1
 80088b6:	bd08      	pop	{r3, pc}

080088b8 <fabs>:
 80088b8:	ec51 0b10 	vmov	r0, r1, d0
 80088bc:	ee10 2a10 	vmov	r2, s0
 80088c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80088c4:	ec43 2b10 	vmov	d0, r2, r3
 80088c8:	4770      	bx	lr

080088ca <finite>:
 80088ca:	b082      	sub	sp, #8
 80088cc:	ed8d 0b00 	vstr	d0, [sp]
 80088d0:	9801      	ldr	r0, [sp, #4]
 80088d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80088d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80088da:	0fc0      	lsrs	r0, r0, #31
 80088dc:	b002      	add	sp, #8
 80088de:	4770      	bx	lr

080088e0 <scalbn>:
 80088e0:	b570      	push	{r4, r5, r6, lr}
 80088e2:	ec55 4b10 	vmov	r4, r5, d0
 80088e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80088ea:	4606      	mov	r6, r0
 80088ec:	462b      	mov	r3, r5
 80088ee:	b99a      	cbnz	r2, 8008918 <scalbn+0x38>
 80088f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80088f4:	4323      	orrs	r3, r4
 80088f6:	d036      	beq.n	8008966 <scalbn+0x86>
 80088f8:	4b39      	ldr	r3, [pc, #228]	; (80089e0 <scalbn+0x100>)
 80088fa:	4629      	mov	r1, r5
 80088fc:	ee10 0a10 	vmov	r0, s0
 8008900:	2200      	movs	r2, #0
 8008902:	f7f7 fe81 	bl	8000608 <__aeabi_dmul>
 8008906:	4b37      	ldr	r3, [pc, #220]	; (80089e4 <scalbn+0x104>)
 8008908:	429e      	cmp	r6, r3
 800890a:	4604      	mov	r4, r0
 800890c:	460d      	mov	r5, r1
 800890e:	da10      	bge.n	8008932 <scalbn+0x52>
 8008910:	a32b      	add	r3, pc, #172	; (adr r3, 80089c0 <scalbn+0xe0>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	e03a      	b.n	800898e <scalbn+0xae>
 8008918:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800891c:	428a      	cmp	r2, r1
 800891e:	d10c      	bne.n	800893a <scalbn+0x5a>
 8008920:	ee10 2a10 	vmov	r2, s0
 8008924:	4620      	mov	r0, r4
 8008926:	4629      	mov	r1, r5
 8008928:	f7f7 fcb8 	bl	800029c <__adddf3>
 800892c:	4604      	mov	r4, r0
 800892e:	460d      	mov	r5, r1
 8008930:	e019      	b.n	8008966 <scalbn+0x86>
 8008932:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008936:	460b      	mov	r3, r1
 8008938:	3a36      	subs	r2, #54	; 0x36
 800893a:	4432      	add	r2, r6
 800893c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008940:	428a      	cmp	r2, r1
 8008942:	dd08      	ble.n	8008956 <scalbn+0x76>
 8008944:	2d00      	cmp	r5, #0
 8008946:	a120      	add	r1, pc, #128	; (adr r1, 80089c8 <scalbn+0xe8>)
 8008948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800894c:	da1c      	bge.n	8008988 <scalbn+0xa8>
 800894e:	a120      	add	r1, pc, #128	; (adr r1, 80089d0 <scalbn+0xf0>)
 8008950:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008954:	e018      	b.n	8008988 <scalbn+0xa8>
 8008956:	2a00      	cmp	r2, #0
 8008958:	dd08      	ble.n	800896c <scalbn+0x8c>
 800895a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800895e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008962:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008966:	ec45 4b10 	vmov	d0, r4, r5
 800896a:	bd70      	pop	{r4, r5, r6, pc}
 800896c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008970:	da19      	bge.n	80089a6 <scalbn+0xc6>
 8008972:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008976:	429e      	cmp	r6, r3
 8008978:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800897c:	dd0a      	ble.n	8008994 <scalbn+0xb4>
 800897e:	a112      	add	r1, pc, #72	; (adr r1, 80089c8 <scalbn+0xe8>)
 8008980:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e2      	bne.n	800894e <scalbn+0x6e>
 8008988:	a30f      	add	r3, pc, #60	; (adr r3, 80089c8 <scalbn+0xe8>)
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	f7f7 fe3b 	bl	8000608 <__aeabi_dmul>
 8008992:	e7cb      	b.n	800892c <scalbn+0x4c>
 8008994:	a10a      	add	r1, pc, #40	; (adr r1, 80089c0 <scalbn+0xe0>)
 8008996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d0b8      	beq.n	8008910 <scalbn+0x30>
 800899e:	a10e      	add	r1, pc, #56	; (adr r1, 80089d8 <scalbn+0xf8>)
 80089a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089a4:	e7b4      	b.n	8008910 <scalbn+0x30>
 80089a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80089aa:	3236      	adds	r2, #54	; 0x36
 80089ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80089b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80089b4:	4620      	mov	r0, r4
 80089b6:	4b0c      	ldr	r3, [pc, #48]	; (80089e8 <scalbn+0x108>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	e7e8      	b.n	800898e <scalbn+0xae>
 80089bc:	f3af 8000 	nop.w
 80089c0:	c2f8f359 	.word	0xc2f8f359
 80089c4:	01a56e1f 	.word	0x01a56e1f
 80089c8:	8800759c 	.word	0x8800759c
 80089cc:	7e37e43c 	.word	0x7e37e43c
 80089d0:	8800759c 	.word	0x8800759c
 80089d4:	fe37e43c 	.word	0xfe37e43c
 80089d8:	c2f8f359 	.word	0xc2f8f359
 80089dc:	81a56e1f 	.word	0x81a56e1f
 80089e0:	43500000 	.word	0x43500000
 80089e4:	ffff3cb0 	.word	0xffff3cb0
 80089e8:	3c900000 	.word	0x3c900000

080089ec <_sbrk>:
 80089ec:	4a04      	ldr	r2, [pc, #16]	; (8008a00 <_sbrk+0x14>)
 80089ee:	6811      	ldr	r1, [r2, #0]
 80089f0:	4603      	mov	r3, r0
 80089f2:	b909      	cbnz	r1, 80089f8 <_sbrk+0xc>
 80089f4:	4903      	ldr	r1, [pc, #12]	; (8008a04 <_sbrk+0x18>)
 80089f6:	6011      	str	r1, [r2, #0]
 80089f8:	6810      	ldr	r0, [r2, #0]
 80089fa:	4403      	add	r3, r0
 80089fc:	6013      	str	r3, [r2, #0]
 80089fe:	4770      	bx	lr
 8008a00:	2000042c 	.word	0x2000042c
 8008a04:	20000430 	.word	0x20000430

08008a08 <_init>:
 8008a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0a:	bf00      	nop
 8008a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a0e:	bc08      	pop	{r3}
 8008a10:	469e      	mov	lr, r3
 8008a12:	4770      	bx	lr

08008a14 <_fini>:
 8008a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a16:	bf00      	nop
 8008a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a1a:	bc08      	pop	{r3}
 8008a1c:	469e      	mov	lr, r3
 8008a1e:	4770      	bx	lr
