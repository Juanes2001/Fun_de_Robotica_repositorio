
Pruebas_sin_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08009e60  08009e60  00019e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3f8  0800a3f8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3f8  0800a3f8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3f8  0800a3f8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3f8  0800a3f8  0001a3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3fc  0800a3fc  0001a3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200001e0  0800a5e0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  0800a5e0  000205c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005cd2  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000140a  00000000  00000000  00025ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  000272f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000520  00000000  00000000  000278c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011d56  00000000  00000000  00027de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000752a  00000000  00000000  00039b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060860  00000000  00000000  00041068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a18c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d48  00000000  00000000  000a1918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e48 	.word	0x08009e48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009e48 	.word	0x08009e48

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
//TaskHandle_t xHandleTask2 = NULL;

//extern void SEGGER_UART_init(uint32_t);

int main(void)
{
 8000cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000cbc:	b08a      	sub	sp, #40	; 0x28
 8000cbe:	af08      	add	r7, sp, #32


	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000cc0:	4b89      	ldr	r3, [pc, #548]	; (8000ee8 <main+0x230>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a88      	ldr	r2, [pc, #544]	; (8000ee8 <main+0x230>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
	//SEGGER_SYSVIEW_Start();


	inSystem ();
 8000cd0:	f000 f9f2 	bl	80010b8 <inSystem>
//		}




		if (rxData != '\0'){
 8000cd4:	4b85      	ldr	r3, [pc, #532]	; (8000eec <main+0x234>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d036      	beq.n	8000d4a <main+0x92>
			writeChar(&handlerUSART1, rxData);
 8000cdc:	4b83      	ldr	r3, [pc, #524]	; (8000eec <main+0x234>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4883      	ldr	r0, [pc, #524]	; (8000ef0 <main+0x238>)
 8000ce4:	f004 fa46 	bl	8005174 <writeChar>
			bufferReception[counterReception] = rxData;
 8000ce8:	4b82      	ldr	r3, [pc, #520]	; (8000ef4 <main+0x23c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b7f      	ldr	r3, [pc, #508]	; (8000eec <main+0x234>)
 8000cf0:	7819      	ldrb	r1, [r3, #0]
 8000cf2:	4b81      	ldr	r3, [pc, #516]	; (8000ef8 <main+0x240>)
 8000cf4:	5499      	strb	r1, [r3, r2]
			counterReception++;
 8000cf6:	4b7f      	ldr	r3, [pc, #508]	; (8000ef4 <main+0x23c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b7d      	ldr	r3, [pc, #500]	; (8000ef4 <main+0x23c>)
 8000d00:	701a      	strb	r2, [r3, #0]

			if (rxData == '@'){
 8000d02:	4b7a      	ldr	r3, [pc, #488]	; (8000eec <main+0x234>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b40      	cmp	r3, #64	; 0x40
 8000d08:	d10c      	bne.n	8000d24 <main+0x6c>
				doneTransaction = SET;
 8000d0a:	4b7c      	ldr	r3, [pc, #496]	; (8000efc <main+0x244>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]

				bufferReception[counterReception-1] = '\0';
 8000d10:	4b78      	ldr	r3, [pc, #480]	; (8000ef4 <main+0x23c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	4a78      	ldr	r2, [pc, #480]	; (8000ef8 <main+0x240>)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	54d1      	strb	r1, [r2, r3]

				counterReception = 0;
 8000d1c:	4b75      	ldr	r3, [pc, #468]	; (8000ef4 <main+0x23c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	e00f      	b.n	8000d44 <main+0x8c>

			}else if (rxData == 'z'){
 8000d24:	4b71      	ldr	r3, [pc, #452]	; (8000eec <main+0x234>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b7a      	cmp	r3, #122	; 0x7a
 8000d2a:	d10b      	bne.n	8000d44 <main+0x8c>

				memset(bufferReception, 0, sizeof(bufferReception));
 8000d2c:	2240      	movs	r2, #64	; 0x40
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4871      	ldr	r0, [pc, #452]	; (8000ef8 <main+0x240>)
 8000d32:	f004 fd7d 	bl	8005830 <memset>
				counterReception = 0;
 8000d36:	4b6f      	ldr	r3, [pc, #444]	; (8000ef4 <main+0x23c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
				writeMsg(&handlerUSART1, "Buffer Vaciado\n \r");
 8000d3c:	4970      	ldr	r1, [pc, #448]	; (8000f00 <main+0x248>)
 8000d3e:	486c      	ldr	r0, [pc, #432]	; (8000ef0 <main+0x238>)
 8000d40:	f004 fa30 	bl	80051a4 <writeMsg>
			}

				rxData = '\0';
 8000d44:	4b69      	ldr	r3, [pc, #420]	; (8000eec <main+0x234>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]

			}

		if (doneTransaction){
 8000d4a:	4b6c      	ldr	r3, [pc, #432]	; (8000efc <main+0x244>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d005      	beq.n	8000d5e <main+0xa6>
			parseCommands(bufferReception);
 8000d52:	4869      	ldr	r0, [pc, #420]	; (8000ef8 <main+0x240>)
 8000d54:	f000 fc2a 	bl	80015ac <parseCommands>
			doneTransaction = RESET;
 8000d58:	4b68      	ldr	r3, [pc, #416]	; (8000efc <main+0x244>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
		}


		if

		(enableChangePWM)
 8000d5e:	4b69      	ldr	r3, [pc, #420]	; (8000f04 <main+0x24c>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 8161 	beq.w	800102a <main+0x372>

//		( ( (dist_1 < distance) && (dist_2 < distance) ) )
		{


			if (flagT2){
 8000d68:	4b67      	ldr	r3, [pc, #412]	; (8000f08 <main+0x250>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0b1      	beq.n	8000cd4 <main+0x1c>
//
//					}



				controlM1 = handlerMotor1.configM1.counts_M1;
 8000d70:	4b66      	ldr	r3, [pc, #408]	; (8000f0c <main+0x254>)
 8000d72:	8c1a      	ldrh	r2, [r3, #32]
 8000d74:	4b66      	ldr	r3, [pc, #408]	; (8000f10 <main+0x258>)
 8000d76:	801a      	strh	r2, [r3, #0]
				controlM2 = handlerMotor2.configM2.counts_M2;
 8000d78:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <main+0x25c>)
 8000d7a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000d7e:	4b66      	ldr	r3, [pc, #408]	; (8000f18 <main+0x260>)
 8000d80:	801a      	strh	r2, [r3, #0]

				diferenceM1 = abs(controlM1 - controlM1_prev);
 8000d82:	4b63      	ldr	r3, [pc, #396]	; (8000f10 <main+0x258>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b64      	ldr	r3, [pc, #400]	; (8000f1c <main+0x264>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bfb8      	it	lt
 8000d92:	425b      	neglt	r3, r3
 8000d94:	ee07 3a90 	vmov	s15, r3
 8000d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9c:	4b60      	ldr	r3, [pc, #384]	; (8000f20 <main+0x268>)
 8000d9e:	edc3 7a00 	vstr	s15, [r3]
				diferenceM2 = abs(controlM2 - controlM2_prev);
 8000da2:	4b5d      	ldr	r3, [pc, #372]	; (8000f18 <main+0x260>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b5e      	ldr	r3, [pc, #376]	; (8000f24 <main+0x26c>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	bfb8      	it	lt
 8000db2:	425b      	neglt	r3, r3
 8000db4:	ee07 3a90 	vmov	s15, r3
 8000db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dbc:	4b5a      	ldr	r3, [pc, #360]	; (8000f28 <main+0x270>)
 8000dbe:	edc3 7a00 	vstr	s15, [r3]

				controlM1_prev = controlM1;
 8000dc2:	4b53      	ldr	r3, [pc, #332]	; (8000f10 <main+0x258>)
 8000dc4:	881a      	ldrh	r2, [r3, #0]
 8000dc6:	4b55      	ldr	r3, [pc, #340]	; (8000f1c <main+0x264>)
 8000dc8:	801a      	strh	r2, [r3, #0]
				controlM2_prev = controlM2;
 8000dca:	4b53      	ldr	r3, [pc, #332]	; (8000f18 <main+0x260>)
 8000dcc:	881a      	ldrh	r2, [r3, #0]
 8000dce:	4b55      	ldr	r3, [pc, #340]	; (8000f24 <main+0x26c>)
 8000dd0:	801a      	strh	r2, [r3, #0]

				uAM1 = PID(&handlerMotor1, diferenceM1, 1, setPoint);
 8000dd2:	4b53      	ldr	r3, [pc, #332]	; (8000f20 <main+0x268>)
 8000dd4:	edd3 7a00 	vldr	s15, [r3]
 8000dd8:	4b54      	ldr	r3, [pc, #336]	; (8000f2c <main+0x274>)
 8000dda:	ed93 7a00 	vldr	s14, [r3]
 8000dde:	eef0 0a47 	vmov.f32	s1, s14
 8000de2:	2101      	movs	r1, #1
 8000de4:	eeb0 0a67 	vmov.f32	s0, s15
 8000de8:	4848      	ldr	r0, [pc, #288]	; (8000f0c <main+0x254>)
 8000dea:	f003 f8a7 	bl	8003f3c <PID>
 8000dee:	ec53 2b10 	vmov	r2, r3, d0
 8000df2:	4610      	mov	r0, r2
 8000df4:	4619      	mov	r1, r3
 8000df6:	f7ff ff0f 	bl	8000c18 <__aeabi_d2f>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a4c      	ldr	r2, [pc, #304]	; (8000f30 <main+0x278>)
 8000dfe:	6013      	str	r3, [r2, #0]
				uAM2 = PID(&handlerMotor2, diferenceM2, 2, setPoint);
 8000e00:	4b49      	ldr	r3, [pc, #292]	; (8000f28 <main+0x270>)
 8000e02:	edd3 7a00 	vldr	s15, [r3]
 8000e06:	4b49      	ldr	r3, [pc, #292]	; (8000f2c <main+0x274>)
 8000e08:	ed93 7a00 	vldr	s14, [r3]
 8000e0c:	eef0 0a47 	vmov.f32	s1, s14
 8000e10:	2102      	movs	r1, #2
 8000e12:	eeb0 0a67 	vmov.f32	s0, s15
 8000e16:	483f      	ldr	r0, [pc, #252]	; (8000f14 <main+0x25c>)
 8000e18:	f003 f890 	bl	8003f3c <PID>
 8000e1c:	ec53 2b10 	vmov	r2, r3, d0
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f7ff fef8 	bl	8000c18 <__aeabi_d2f>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a42      	ldr	r2, [pc, #264]	; (8000f34 <main+0x27c>)
 8000e2c:	6013      	str	r3, [r2, #0]

				PM1 = map(uAM1, 0 , 600 , 0, 100);
 8000e2e:	4b40      	ldr	r3, [pc, #256]	; (8000f30 <main+0x278>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fba0 	bl	8000578 <__aeabi_f2d>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8000ed0 <main+0x218>
 8000e40:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8000ed8 <main+0x220>
 8000e44:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8000ee0 <main+0x228>
 8000e48:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8000ed8 <main+0x220>
 8000e4c:	ec43 2b10 	vmov	d0, r2, r3
 8000e50:	f003 f926 	bl	80040a0 <map>
 8000e54:	ec53 2b10 	vmov	r2, r3, d0
 8000e58:	4610      	mov	r0, r2
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f7ff fedc 	bl	8000c18 <__aeabi_d2f>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4a35      	ldr	r2, [pc, #212]	; (8000f38 <main+0x280>)
 8000e64:	6013      	str	r3, [r2, #0]
				PM2 = map(uAM2, 0 , 600 , 0, 100);
 8000e66:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <main+0x27c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fb84 	bl	8000578 <__aeabi_f2d>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8000ed0 <main+0x218>
 8000e78:	ed9f 3b17 	vldr	d3, [pc, #92]	; 8000ed8 <main+0x220>
 8000e7c:	ed9f 2b18 	vldr	d2, [pc, #96]	; 8000ee0 <main+0x228>
 8000e80:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8000ed8 <main+0x220>
 8000e84:	ec43 2b10 	vmov	d0, r2, r3
 8000e88:	f003 f90a 	bl	80040a0 <map>
 8000e8c:	ec53 2b10 	vmov	r2, r3, d0
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	f7ff fec0 	bl	8000c18 <__aeabi_d2f>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4a28      	ldr	r2, [pc, #160]	; (8000f3c <main+0x284>)
 8000e9c:	6013      	str	r3, [r2, #0]

				if (PM1 < 0 || PM2 < 0){
 8000e9e:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <main+0x280>)
 8000ea0:	edd3 7a00 	vldr	s15, [r3]
 8000ea4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eac:	d407      	bmi.n	8000ebe <main+0x206>
 8000eae:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <main+0x284>)
 8000eb0:	edd3 7a00 	vldr	s15, [r3]
 8000eb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	d540      	bpl.n	8000f40 <main+0x288>

					PM1 = 0;
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <main+0x280>)
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
					PM2 = 0;
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <main+0x284>)
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e051      	b.n	8000f74 <main+0x2bc>
 8000ed0:	00000000 	.word	0x00000000
 8000ed4:	40590000 	.word	0x40590000
	...
 8000ee4:	4082c000 	.word	0x4082c000
 8000ee8:	e000ed00 	.word	0xe000ed00
 8000eec:	20000492 	.word	0x20000492
 8000ef0:	20000314 	.word	0x20000314
 8000ef4:	20000490 	.word	0x20000490
 8000ef8:	20000450 	.word	0x20000450
 8000efc:	20000491 	.word	0x20000491
 8000f00:	08009e60 	.word	0x08009e60
 8000f04:	20000543 	.word	0x20000543
 8000f08:	20000542 	.word	0x20000542
 8000f0c:	200003a8 	.word	0x200003a8
 8000f10:	20000560 	.word	0x20000560
 8000f14:	200003f0 	.word	0x200003f0
 8000f18:	20000562 	.word	0x20000562
 8000f1c:	20000564 	.word	0x20000564
 8000f20:	2000056c 	.word	0x2000056c
 8000f24:	20000566 	.word	0x20000566
 8000f28:	20000570 	.word	0x20000570
 8000f2c:	20000574 	.word	0x20000574
 8000f30:	20000584 	.word	0x20000584
 8000f34:	20000588 	.word	0x20000588
 8000f38:	2000057c 	.word	0x2000057c
 8000f3c:	20000580 	.word	0x20000580

				}else if (PM1 > 100 || PM2 > 100){
 8000f40:	4b4a      	ldr	r3, [pc, #296]	; (800106c <main+0x3b4>)
 8000f42:	edd3 7a00 	vldr	s15, [r3]
 8000f46:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001070 <main+0x3b8>
 8000f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f52:	dc09      	bgt.n	8000f68 <main+0x2b0>
 8000f54:	4b47      	ldr	r3, [pc, #284]	; (8001074 <main+0x3bc>)
 8000f56:	edd3 7a00 	vldr	s15, [r3]
 8000f5a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001070 <main+0x3b8>
 8000f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f66:	dd05      	ble.n	8000f74 <main+0x2bc>

					PM1 = 100;
 8000f68:	4b40      	ldr	r3, [pc, #256]	; (800106c <main+0x3b4>)
 8000f6a:	4a43      	ldr	r2, [pc, #268]	; (8001078 <main+0x3c0>)
 8000f6c:	601a      	str	r2, [r3, #0]
					PM2 = 100;
 8000f6e:	4b41      	ldr	r3, [pc, #260]	; (8001074 <main+0x3bc>)
 8000f70:	4a41      	ldr	r2, [pc, #260]	; (8001078 <main+0x3c0>)
 8000f72:	601a      	str	r2, [r3, #0]
				}

				dist_1 = distanceM1();
 8000f74:	f000 fd30 	bl	80019d8 <distanceM1>
 8000f78:	eeb0 7a40 	vmov.f32	s14, s0
 8000f7c:	eef0 7a60 	vmov.f32	s15, s1
 8000f80:	4b3e      	ldr	r3, [pc, #248]	; (800107c <main+0x3c4>)
 8000f82:	ed83 7b00 	vstr	d7, [r3]
				dist_2 = distanceM2();
 8000f86:	f000 fd57 	bl	8001a38 <distanceM2>
 8000f8a:	eeb0 7a40 	vmov.f32	s14, s0
 8000f8e:	eef0 7a60 	vmov.f32	s15, s1
 8000f92:	4b3b      	ldr	r3, [pc, #236]	; (8001080 <main+0x3c8>)
 8000f94:	ed83 7b00 	vstr	d7, [r3]

				updateDuttyCycleAfOpt(&handlerPWM_1, PM1);
 8000f98:	4b34      	ldr	r3, [pc, #208]	; (800106c <main+0x3b4>)
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa2:	4838      	ldr	r0, [pc, #224]	; (8001084 <main+0x3cc>)
 8000fa4:	f003 fc40 	bl	8004828 <updateDuttyCycleAfOpt>
				updateDuttyCycleAfOpt(&handlerPWM_2, PM2);
 8000fa8:	4b32      	ldr	r3, [pc, #200]	; (8001074 <main+0x3bc>)
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb2:	4835      	ldr	r0, [pc, #212]	; (8001088 <main+0x3d0>)
 8000fb4:	f003 fc38 	bl	8004828 <updateDuttyCycleAfOpt>

				sprintf (bufferMsg, //"%u\t%u\t%.3f\t%.3f\t
 8000fb8:	4b2c      	ldr	r3, [pc, #176]	; (800106c <main+0x3b4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fadb 	bl	8000578 <__aeabi_f2d>
 8000fc2:	e9c7 0100 	strd	r0, r1, [r7]
 8000fc6:	4b2b      	ldr	r3, [pc, #172]	; (8001074 <main+0x3bc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fad4 	bl	8000578 <__aeabi_f2d>
 8000fd0:	4604      	mov	r4, r0
 8000fd2:	460d      	mov	r5, r1
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <main+0x3d4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff facd 	bl	8000578 <__aeabi_f2d>
 8000fde:	4680      	mov	r8, r0
 8000fe0:	4689      	mov	r9, r1
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <main+0x3d8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fac6 	bl	8000578 <__aeabi_f2d>
 8000fec:	4682      	mov	sl, r0
 8000fee:	468b      	mov	fp, r1
 8000ff0:	4b28      	ldr	r3, [pc, #160]	; (8001094 <main+0x3dc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fabf 	bl	8000578 <__aeabi_f2d>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001002:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001006:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800100a:	e9cd 4500 	strd	r4, r5, [sp]
 800100e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001012:	4921      	ldr	r1, [pc, #132]	; (8001098 <main+0x3e0>)
 8001014:	4821      	ldr	r0, [pc, #132]	; (800109c <main+0x3e4>)
 8001016:	f005 f96d 	bl	80062f4 <siprintf>
						// counter_M1, counter_M2,

//						 counterPWM1, diferenceM1, diferenceM2
						//, dist_1 ,dist_2
						);
				writeMsg(&handlerUSART1, bufferMsg);
 800101a:	4920      	ldr	r1, [pc, #128]	; (800109c <main+0x3e4>)
 800101c:	4820      	ldr	r0, [pc, #128]	; (80010a0 <main+0x3e8>)
 800101e:	f004 f8c1 	bl	80051a4 <writeMsg>
//				counterPWM1 += 0.1;
//				counterPWM2 += 0.1;



				flagT2 = RESET;
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <main+0x3ec>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e654      	b.n	8000cd4 <main+0x1c>

			}

		}else if (flagGyro){
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <main+0x3f0>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	f43f ae50 	beq.w	8000cd4 <main+0x1c>

			dps = readGyro_Z (&handler_MPUAccel_6050);
 8001034:	481d      	ldr	r0, [pc, #116]	; (80010ac <main+0x3f4>)
 8001036:	f002 fd6b 	bl	8003b10 <readGyro_Z>
 800103a:	eef0 7a40 	vmov.f32	s15, s0
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <main+0x3f8>)
 8001040:	edc3 7a00 	vstr	s15, [r3]

			sprintf (bufferMsg, //"%u\t%u\t%.3f\t%.3f\t
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <main+0x3f8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa95 	bl	8000578 <__aeabi_f2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4918      	ldr	r1, [pc, #96]	; (80010b4 <main+0x3fc>)
 8001054:	4811      	ldr	r0, [pc, #68]	; (800109c <main+0x3e4>)
 8001056:	f005 f94d 	bl	80062f4 <siprintf>
			// counter_M1, counter_M2,

	//						 counterPWM1, diferenceM1, diferenceM2
			//, dist_1 ,dist_2
			);
			writeMsg(&handlerUSART1, bufferMsg);
 800105a:	4910      	ldr	r1, [pc, #64]	; (800109c <main+0x3e4>)
 800105c:	4810      	ldr	r0, [pc, #64]	; (80010a0 <main+0x3e8>)
 800105e:	f004 f8a1 	bl	80051a4 <writeMsg>

			flagGyro = RESET;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <main+0x3f0>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
		if (rxData != '\0'){
 8001068:	e634      	b.n	8000cd4 <main+0x1c>
 800106a:	bf00      	nop
 800106c:	2000057c 	.word	0x2000057c
 8001070:	42c80000 	.word	0x42c80000
 8001074:	20000580 	.word	0x20000580
 8001078:	42c80000 	.word	0x42c80000
 800107c:	20000550 	.word	0x20000550
 8001080:	20000558 	.word	0x20000558
 8001084:	200002e4 	.word	0x200002e4
 8001088:	200002fc 	.word	0x200002fc
 800108c:	2000056c 	.word	0x2000056c
 8001090:	20000570 	.word	0x20000570
 8001094:	20000574 	.word	0x20000574
 8001098:	08009e74 	.word	0x08009e74
 800109c:	20000500 	.word	0x20000500
 80010a0:	20000314 	.word	0x20000314
 80010a4:	20000542 	.word	0x20000542
 80010a8:	20000544 	.word	0x20000544
 80010ac:	20000440 	.word	0x20000440
 80010b0:	2000058c 	.word	0x2000058c
 80010b4:	08009e90 	.word	0x08009e90

080010b8 <inSystem>:

	}
}


void inSystem (void){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0


	// Activamos la maxima velocidad del microcontrolador
	RCC_enableMaxFrequencies();
 80010bc:	f003 fc04 	bl	80048c8 <RCC_enableMaxFrequencies>
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 80010c0:	4bb0      	ldr	r3, [pc, #704]	; (8001384 <inSystem+0x2cc>)
 80010c2:	4ab1      	ldr	r2, [pc, #708]	; (8001388 <inSystem+0x2d0>)
 80010c4:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 80010c6:	4baf      	ldr	r3, [pc, #700]	; (8001384 <inSystem+0x2cc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80010cc:	4bad      	ldr	r3, [pc, #692]	; (8001384 <inSystem+0x2cc>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 80010d2:	4bac      	ldr	r3, [pc, #688]	; (8001384 <inSystem+0x2cc>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80010d8:	4baa      	ldr	r3, [pc, #680]	; (8001384 <inSystem+0x2cc>)
 80010da:	2205      	movs	r2, #5
 80010dc:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010de:	4ba9      	ldr	r3, [pc, #676]	; (8001384 <inSystem+0x2cc>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 80010e4:	4ba7      	ldr	r3, [pc, #668]	; (8001384 <inSystem+0x2cc>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 80010ea:	48a6      	ldr	r0, [pc, #664]	; (8001384 <inSystem+0x2cc>)
 80010ec:	f002 f9cc 	bl	8003488 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 80010f0:	2101      	movs	r1, #1
 80010f2:	48a4      	ldr	r0, [pc, #656]	; (8001384 <inSystem+0x2cc>)
 80010f4:	f002 faf2 	bl	80036dc <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 80010f8:	4ba4      	ldr	r3, [pc, #656]	; (800138c <inSystem+0x2d4>)
 80010fa:	4aa5      	ldr	r2, [pc, #660]	; (8001390 <inSystem+0x2d8>)
 80010fc:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 80010fe:	4ba3      	ldr	r3, [pc, #652]	; (800138c <inSystem+0x2d4>)
 8001100:	2201      	movs	r2, #1
 8001102:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8001104:	4ba1      	ldr	r3, [pc, #644]	; (800138c <inSystem+0x2d4>)
 8001106:	2200      	movs	r2, #0
 8001108:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 800110a:	4ba0      	ldr	r3, [pc, #640]	; (800138c <inSystem+0x2d4>)
 800110c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001110:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 1000;
 8001112:	4b9e      	ldr	r3, [pc, #632]	; (800138c <inSystem+0x2d4>)
 8001114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001118:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 800111a:	489c      	ldr	r0, [pc, #624]	; (800138c <inSystem+0x2d4>)
 800111c:	f000 fe1c 	bl	8001d58 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8001120:	489a      	ldr	r0, [pc, #616]	; (800138c <inSystem+0x2d4>)
 8001122:	f001 f941 	bl	80023a8 <startTimer>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 8001126:	4b9b      	ldr	r3, [pc, #620]	; (8001394 <inSystem+0x2dc>)
 8001128:	4a97      	ldr	r2, [pc, #604]	; (8001388 <inSystem+0x2d0>)
 800112a:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 800112c:	4b99      	ldr	r3, [pc, #612]	; (8001394 <inSystem+0x2dc>)
 800112e:	2202      	movs	r2, #2
 8001130:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001132:	4b98      	ldr	r3, [pc, #608]	; (8001394 <inSystem+0x2dc>)
 8001134:	2202      	movs	r2, #2
 8001136:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001138:	4b96      	ldr	r3, [pc, #600]	; (8001394 <inSystem+0x2dc>)
 800113a:	2200      	movs	r2, #0
 800113c:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 800113e:	4b95      	ldr	r3, [pc, #596]	; (8001394 <inSystem+0x2dc>)
 8001140:	2200      	movs	r2, #0
 8001142:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001144:	4b93      	ldr	r3, [pc, #588]	; (8001394 <inSystem+0x2dc>)
 8001146:	2200      	movs	r2, #0
 8001148:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800114a:	4b92      	ldr	r3, [pc, #584]	; (8001394 <inSystem+0x2dc>)
 800114c:	2202      	movs	r2, #2
 800114e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 8001150:	4890      	ldr	r0, [pc, #576]	; (8001394 <inSystem+0x2dc>)
 8001152:	f002 f999 	bl	8003488 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 8001156:	4b90      	ldr	r3, [pc, #576]	; (8001398 <inSystem+0x2e0>)
 8001158:	4a90      	ldr	r2, [pc, #576]	; (800139c <inSystem+0x2e4>)
 800115a:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 800115c:	4b8e      	ldr	r3, [pc, #568]	; (8001398 <inSystem+0x2e0>)
 800115e:	2200      	movs	r2, #0
 8001160:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle  = 0;
 8001162:	4b8d      	ldr	r3, [pc, #564]	; (8001398 <inSystem+0x2e0>)
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
//	counter = 50;
	handlerPWM_1.config.periodo     = 40; // se maneja 25 hz por testeo
 800116a:	4b8b      	ldr	r3, [pc, #556]	; (8001398 <inSystem+0x2e0>)
 800116c:	2228      	movs	r2, #40	; 0x28
 800116e:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8001170:	4b89      	ldr	r3, [pc, #548]	; (8001398 <inSystem+0x2e0>)
 8001172:	2264      	movs	r2, #100	; 0x64
 8001174:	609a      	str	r2, [r3, #8]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8001176:	4b88      	ldr	r3, [pc, #544]	; (8001398 <inSystem+0x2e0>)
 8001178:	2201      	movs	r2, #1
 800117a:	751a      	strb	r2, [r3, #20]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 800117c:	4b86      	ldr	r3, [pc, #536]	; (8001398 <inSystem+0x2e0>)
 800117e:	2201      	movs	r2, #1
 8001180:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_1);
 8001182:	4885      	ldr	r0, [pc, #532]	; (8001398 <inSystem+0x2e0>)
 8001184:	f002 ffda 	bl	800413c <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 8001188:	4883      	ldr	r0, [pc, #524]	; (8001398 <inSystem+0x2e0>)
 800118a:	f003 f8b9 	bl	8004300 <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 800118e:	4b84      	ldr	r3, [pc, #528]	; (80013a0 <inSystem+0x2e8>)
 8001190:	4a7d      	ldr	r2, [pc, #500]	; (8001388 <inSystem+0x2d0>)
 8001192:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001194:	4b82      	ldr	r3, [pc, #520]	; (80013a0 <inSystem+0x2e8>)
 8001196:	2202      	movs	r2, #2
 8001198:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800119a:	4b81      	ldr	r3, [pc, #516]	; (80013a0 <inSystem+0x2e8>)
 800119c:	2202      	movs	r2, #2
 800119e:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80011a0:	4b7f      	ldr	r3, [pc, #508]	; (80013a0 <inSystem+0x2e8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 80011a6:	4b7e      	ldr	r3, [pc, #504]	; (80013a0 <inSystem+0x2e8>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011ac:	4b7c      	ldr	r3, [pc, #496]	; (80013a0 <inSystem+0x2e8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80011b2:	4b7b      	ldr	r3, [pc, #492]	; (80013a0 <inSystem+0x2e8>)
 80011b4:	2202      	movs	r2, #2
 80011b6:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 80011b8:	4879      	ldr	r0, [pc, #484]	; (80013a0 <inSystem+0x2e8>)
 80011ba:	f002 f965 	bl	8003488 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 80011be:	4b79      	ldr	r3, [pc, #484]	; (80013a4 <inSystem+0x2ec>)
 80011c0:	4a76      	ldr	r2, [pc, #472]	; (800139c <inSystem+0x2e4>)
 80011c2:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 80011c4:	4b77      	ldr	r3, [pc, #476]	; (80013a4 <inSystem+0x2ec>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	711a      	strb	r2, [r3, #4]
	handlerPWM_2.config.duttyCicle  = 0;
 80011ca:	4b76      	ldr	r3, [pc, #472]	; (80013a4 <inSystem+0x2ec>)
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
	handlerPWM_2.config.periodo     = 40;// se maneja 25 hz por testeo
 80011d2:	4b74      	ldr	r3, [pc, #464]	; (80013a4 <inSystem+0x2ec>)
 80011d4:	2228      	movs	r2, #40	; 0x28
 80011d6:	819a      	strh	r2, [r3, #12]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 80011d8:	4b72      	ldr	r3, [pc, #456]	; (80013a4 <inSystem+0x2ec>)
 80011da:	2264      	movs	r2, #100	; 0x64
 80011dc:	609a      	str	r2, [r3, #8]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 80011de:	4b71      	ldr	r3, [pc, #452]	; (80013a4 <inSystem+0x2ec>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	751a      	strb	r2, [r3, #20]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 80011e4:	4b6f      	ldr	r3, [pc, #444]	; (80013a4 <inSystem+0x2ec>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_2);
 80011ea:	486e      	ldr	r0, [pc, #440]	; (80013a4 <inSystem+0x2ec>)
 80011ec:	f002 ffa6 	bl	800413c <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 80011f0:	486c      	ldr	r0, [pc, #432]	; (80013a4 <inSystem+0x2ec>)
 80011f2:	f003 f885 	bl	8004300 <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 80011f6:	4b6c      	ldr	r3, [pc, #432]	; (80013a8 <inSystem+0x2f0>)
 80011f8:	4a6c      	ldr	r2, [pc, #432]	; (80013ac <inSystem+0x2f4>)
 80011fa:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80011fc:	4b6a      	ldr	r3, [pc, #424]	; (80013a8 <inSystem+0x2f0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001202:	4b69      	ldr	r3, [pc, #420]	; (80013a8 <inSystem+0x2f0>)
 8001204:	2201      	movs	r2, #1
 8001206:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 8001208:	4b67      	ldr	r3, [pc, #412]	; (80013a8 <inSystem+0x2f0>)
 800120a:	220a      	movs	r2, #10
 800120c:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800120e:	4b66      	ldr	r3, [pc, #408]	; (80013a8 <inSystem+0x2f0>)
 8001210:	2200      	movs	r2, #0
 8001212:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001214:	4b64      	ldr	r3, [pc, #400]	; (80013a8 <inSystem+0x2f0>)
 8001216:	2200      	movs	r2, #0
 8001218:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800121a:	4b63      	ldr	r3, [pc, #396]	; (80013a8 <inSystem+0x2f0>)
 800121c:	2202      	movs	r2, #2
 800121e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 8001220:	4861      	ldr	r0, [pc, #388]	; (80013a8 <inSystem+0x2f0>)
 8001222:	f002 f931 	bl	8003488 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 8001226:	2100      	movs	r1, #0
 8001228:	485f      	ldr	r0, [pc, #380]	; (80013a8 <inSystem+0x2f0>)
 800122a:	f002 fa82 	bl	8003732 <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 800122e:	4b60      	ldr	r3, [pc, #384]	; (80013b0 <inSystem+0x2f8>)
 8001230:	4a5e      	ldr	r2, [pc, #376]	; (80013ac <inSystem+0x2f4>)
 8001232:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001234:	4b5e      	ldr	r3, [pc, #376]	; (80013b0 <inSystem+0x2f8>)
 8001236:	2200      	movs	r2, #0
 8001238:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800123a:	4b5d      	ldr	r3, [pc, #372]	; (80013b0 <inSystem+0x2f8>)
 800123c:	2201      	movs	r2, #1
 800123e:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 8001240:	4b5b      	ldr	r3, [pc, #364]	; (80013b0 <inSystem+0x2f8>)
 8001242:	220b      	movs	r2, #11
 8001244:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001246:	4b5a      	ldr	r3, [pc, #360]	; (80013b0 <inSystem+0x2f8>)
 8001248:	2200      	movs	r2, #0
 800124a:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800124c:	4b58      	ldr	r3, [pc, #352]	; (80013b0 <inSystem+0x2f8>)
 800124e:	2200      	movs	r2, #0
 8001250:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001252:	4b57      	ldr	r3, [pc, #348]	; (80013b0 <inSystem+0x2f8>)
 8001254:	2202      	movs	r2, #2
 8001256:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 8001258:	4855      	ldr	r0, [pc, #340]	; (80013b0 <inSystem+0x2f8>)
 800125a:	f002 f915 	bl	8003488 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 800125e:	2100      	movs	r1, #0
 8001260:	4853      	ldr	r0, [pc, #332]	; (80013b0 <inSystem+0x2f8>)
 8001262:	f002 fa66 	bl	8003732 <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 8001266:	4b53      	ldr	r3, [pc, #332]	; (80013b4 <inSystem+0x2fc>)
 8001268:	4a50      	ldr	r2, [pc, #320]	; (80013ac <inSystem+0x2f4>)
 800126a:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800126c:	4b51      	ldr	r3, [pc, #324]	; (80013b4 <inSystem+0x2fc>)
 800126e:	2200      	movs	r2, #0
 8001270:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001272:	4b50      	ldr	r3, [pc, #320]	; (80013b4 <inSystem+0x2fc>)
 8001274:	2201      	movs	r2, #1
 8001276:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 8001278:	4b4e      	ldr	r3, [pc, #312]	; (80013b4 <inSystem+0x2fc>)
 800127a:	220c      	movs	r2, #12
 800127c:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800127e:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <inSystem+0x2fc>)
 8001280:	2200      	movs	r2, #0
 8001282:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001284:	4b4b      	ldr	r3, [pc, #300]	; (80013b4 <inSystem+0x2fc>)
 8001286:	2200      	movs	r2, #0
 8001288:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800128a:	4b4a      	ldr	r3, [pc, #296]	; (80013b4 <inSystem+0x2fc>)
 800128c:	2202      	movs	r2, #2
 800128e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 8001290:	4848      	ldr	r0, [pc, #288]	; (80013b4 <inSystem+0x2fc>)
 8001292:	f002 f8f9 	bl	8003488 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default
 8001296:	2100      	movs	r1, #0
 8001298:	4846      	ldr	r0, [pc, #280]	; (80013b4 <inSystem+0x2fc>)
 800129a:	f002 fa4a 	bl	8003732 <GPIO_WritePin_Afopt>

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 800129e:	4b46      	ldr	r3, [pc, #280]	; (80013b8 <inSystem+0x300>)
 80012a0:	4a46      	ldr	r2, [pc, #280]	; (80013bc <inSystem+0x304>)
 80012a2:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80012a4:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <inSystem+0x300>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80012aa:	4b43      	ldr	r3, [pc, #268]	; (80013b8 <inSystem+0x300>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 80012b0:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <inSystem+0x300>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80012b6:	4b40      	ldr	r3, [pc, #256]	; (80013b8 <inSystem+0x300>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80012bc:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <inSystem+0x300>)
 80012be:	2200      	movs	r2, #0
 80012c0:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80012c2:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <inSystem+0x300>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 80012c8:	483b      	ldr	r0, [pc, #236]	; (80013b8 <inSystem+0x300>)
 80012ca:	f002 f8dd 	bl	8003488 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default
 80012ce:	2100      	movs	r1, #0
 80012d0:	4839      	ldr	r0, [pc, #228]	; (80013b8 <inSystem+0x300>)
 80012d2:	f002 fa2e 	bl	8003732 <GPIO_WritePin_Afopt>
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 80012d6:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <inSystem+0x308>)
 80012d8:	4a34      	ldr	r2, [pc, #208]	; (80013ac <inSystem+0x2f4>)
 80012da:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80012dc:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <inSystem+0x308>)
 80012de:	2200      	movs	r2, #0
 80012e0:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80012e2:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <inSystem+0x308>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 80012e8:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <inSystem+0x308>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80012ee:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <inSystem+0x308>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80012f4:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <inSystem+0x308>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80012fa:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <inSystem+0x308>)
 80012fc:	2202      	movs	r2, #2
 80012fe:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 8001300:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <inSystem+0x30c>)
 8001302:	4a2f      	ldr	r2, [pc, #188]	; (80013c0 <inSystem+0x308>)
 8001304:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001306:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <inSystem+0x30c>)
 8001308:	2202      	movs	r2, #2
 800130a:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 800130c:	482d      	ldr	r0, [pc, #180]	; (80013c4 <inSystem+0x30c>)
 800130e:	f001 f88d 	bl	800242c <extInt_Config>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 8001312:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <inSystem+0x310>)
 8001314:	4a25      	ldr	r2, [pc, #148]	; (80013ac <inSystem+0x2f4>)
 8001316:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <inSystem+0x310>)
 800131a:	2200      	movs	r2, #0
 800131c:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <inSystem+0x310>)
 8001320:	2200      	movs	r2, #0
 8001322:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <inSystem+0x310>)
 8001326:	2203      	movs	r2, #3
 8001328:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800132a:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <inSystem+0x310>)
 800132c:	2200      	movs	r2, #0
 800132e:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001330:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <inSystem+0x310>)
 8001332:	2200      	movs	r2, #0
 8001334:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <inSystem+0x310>)
 8001338:	2202      	movs	r2, #2
 800133a:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 800133c:	4b23      	ldr	r3, [pc, #140]	; (80013cc <inSystem+0x314>)
 800133e:	4a22      	ldr	r2, [pc, #136]	; (80013c8 <inSystem+0x310>)
 8001340:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <inSystem+0x314>)
 8001344:	2202      	movs	r2, #2
 8001346:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 8001348:	4820      	ldr	r0, [pc, #128]	; (80013cc <inSystem+0x314>)
 800134a:	f001 f86f 	bl	800242c <extInt_Config>
	///////////////////////////////////////////Comunicación serial para comandos //////////////////////////////////////////////


	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <inSystem+0x318>)
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <inSystem+0x2d0>)
 8001352:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <inSystem+0x318>)
 8001356:	2207      	movs	r2, #7
 8001358:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <inSystem+0x318>)
 800135c:	2202      	movs	r2, #2
 800135e:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <inSystem+0x318>)
 8001362:	2200      	movs	r2, #0
 8001364:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <inSystem+0x318>)
 8001368:	2202      	movs	r2, #2
 800136a:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <inSystem+0x318>)
 800136e:	2200      	movs	r2, #0
 8001370:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <inSystem+0x318>)
 8001374:	2203      	movs	r2, #3
 8001376:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 8001378:	4815      	ldr	r0, [pc, #84]	; (80013d0 <inSystem+0x318>)
 800137a:	f002 f885 	bl	8003488 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <inSystem+0x31c>)
 8001380:	e02a      	b.n	80013d8 <inSystem+0x320>
 8001382:	bf00      	nop
 8001384:	200001fc 	.word	0x200001fc
 8001388:	40020000 	.word	0x40020000
 800138c:	200002a8 	.word	0x200002a8
 8001390:	40000400 	.word	0x40000400
 8001394:	20000208 	.word	0x20000208
 8001398:	200002e4 	.word	0x200002e4
 800139c:	40000c00 	.word	0x40000c00
 80013a0:	20000214 	.word	0x20000214
 80013a4:	200002fc 	.word	0x200002fc
 80013a8:	20000244 	.word	0x20000244
 80013ac:	40020800 	.word	0x40020800
 80013b0:	20000238 	.word	0x20000238
 80013b4:	2000025c 	.word	0x2000025c
 80013b8:	20000250 	.word	0x20000250
 80013bc:	40020c00 	.word	0x40020c00
 80013c0:	20000268 	.word	0x20000268
 80013c4:	20000298 	.word	0x20000298
 80013c8:	20000274 	.word	0x20000274
 80013cc:	200002a0 	.word	0x200002a0
 80013d0:	2000022c 	.word	0x2000022c
 80013d4:	20000220 	.word	0x20000220
 80013d8:	4a63      	ldr	r2, [pc, #396]	; (8001568 <inSystem+0x4b0>)
 80013da:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80013dc:	4b63      	ldr	r3, [pc, #396]	; (800156c <inSystem+0x4b4>)
 80013de:	2207      	movs	r2, #7
 80013e0:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80013e2:	4b62      	ldr	r3, [pc, #392]	; (800156c <inSystem+0x4b4>)
 80013e4:	2202      	movs	r2, #2
 80013e6:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80013e8:	4b60      	ldr	r3, [pc, #384]	; (800156c <inSystem+0x4b4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 80013ee:	4b5f      	ldr	r3, [pc, #380]	; (800156c <inSystem+0x4b4>)
 80013f0:	2203      	movs	r2, #3
 80013f2:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013f4:	4b5d      	ldr	r3, [pc, #372]	; (800156c <inSystem+0x4b4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80013fa:	4b5c      	ldr	r3, [pc, #368]	; (800156c <inSystem+0x4b4>)
 80013fc:	2203      	movs	r2, #3
 80013fe:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 8001400:	485a      	ldr	r0, [pc, #360]	; (800156c <inSystem+0x4b4>)
 8001402:	f002 f841 	bl	8003488 <GPIO_Config>

	handlerUSART1.ptrUSARTx                      = USART2;
 8001406:	4b5a      	ldr	r3, [pc, #360]	; (8001570 <inSystem+0x4b8>)
 8001408:	4a5a      	ldr	r2, [pc, #360]	; (8001574 <inSystem+0x4bc>)
 800140a:	601a      	str	r2, [r3, #0]
	handlerUSART1.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 800140c:	4b58      	ldr	r3, [pc, #352]	; (8001570 <inSystem+0x4b8>)
 800140e:	4a5a      	ldr	r2, [pc, #360]	; (8001578 <inSystem+0x4c0>)
 8001410:	60da      	str	r2, [r3, #12]
	handlerUSART1.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8001412:	4b57      	ldr	r3, [pc, #348]	; (8001570 <inSystem+0x4b8>)
 8001414:	2201      	movs	r2, #1
 8001416:	71da      	strb	r2, [r3, #7]
	handlerUSART1.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8001418:	4b55      	ldr	r3, [pc, #340]	; (8001570 <inSystem+0x4b8>)
 800141a:	2201      	movs	r2, #1
 800141c:	715a      	strb	r2, [r3, #5]
	handlerUSART1.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 800141e:	4b54      	ldr	r3, [pc, #336]	; (8001570 <inSystem+0x4b8>)
 8001420:	2200      	movs	r2, #0
 8001422:	711a      	strb	r2, [r3, #4]
	handlerUSART1.USART_Config.USART_mode        = USART_MODE_RXTX;
 8001424:	4b52      	ldr	r3, [pc, #328]	; (8001570 <inSystem+0x4b8>)
 8001426:	2202      	movs	r2, #2
 8001428:	719a      	strb	r2, [r3, #6]
	handlerUSART1.USART_Config.USART_parity      = USART_PARITY_NONE;
 800142a:	4b51      	ldr	r3, [pc, #324]	; (8001570 <inSystem+0x4b8>)
 800142c:	2200      	movs	r2, #0
 800142e:	725a      	strb	r2, [r3, #9]
	handlerUSART1.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8001430:	4b4f      	ldr	r3, [pc, #316]	; (8001570 <inSystem+0x4b8>)
 8001432:	2200      	movs	r2, #0
 8001434:	729a      	strb	r2, [r3, #10]
	handlerUSART1.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8001436:	4b4e      	ldr	r3, [pc, #312]	; (8001570 <inSystem+0x4b8>)
 8001438:	2200      	movs	r2, #0
 800143a:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART1);
 800143c:	484c      	ldr	r0, [pc, #304]	; (8001570 <inSystem+0x4b8>)
 800143e:	f003 fad1 	bl	80049e4 <USART_Config>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_vel.ptrTIMx                           = TIM2;
 8001442:	4b4e      	ldr	r3, [pc, #312]	; (800157c <inSystem+0x4c4>)
 8001444:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001448:	601a      	str	r2, [r3, #0]
	handlerTIM2_vel.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 800144a:	4b4c      	ldr	r3, [pc, #304]	; (800157c <inSystem+0x4c4>)
 800144c:	2201      	movs	r2, #1
 800144e:	741a      	strb	r2, [r3, #16]
	handlerTIM2_vel.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8001450:	4b4a      	ldr	r3, [pc, #296]	; (800157c <inSystem+0x4c4>)
 8001452:	2200      	movs	r2, #0
 8001454:	711a      	strb	r2, [r3, #4]
	handlerTIM2_vel.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 8001456:	4b49      	ldr	r3, [pc, #292]	; (800157c <inSystem+0x4c4>)
 8001458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800145c:	609a      	str	r2, [r3, #8]
	handlerTIM2_vel.TIMx_Config.TIMx_period           = 80;
 800145e:	4b47      	ldr	r3, [pc, #284]	; (800157c <inSystem+0x4c4>)
 8001460:	2250      	movs	r2, #80	; 0x50
 8001462:	60da      	str	r2, [r3, #12]
	Ts = handlerTIM2_vel.TIMx_Config.TIMx_period;
 8001464:	4b45      	ldr	r3, [pc, #276]	; (800157c <inSystem+0x4c4>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	ee07 3a90 	vmov	s15, r3
 800146c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001470:	4b43      	ldr	r3, [pc, #268]	; (8001580 <inSystem+0x4c8>)
 8001472:	edc3 7a00 	vstr	s15, [r3]
	BasicTimer_Config(&handlerTIM2_vel);
 8001476:	4841      	ldr	r0, [pc, #260]	; (800157c <inSystem+0x4c4>)
 8001478:	f000 fc6e 	bl	8001d58 <BasicTimer_Config>
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Motores 1 y 2//////////////////////////////////////////////


	handlerMotor1.configM1.e_M1   = 0;
 800147c:	4b41      	ldr	r3, [pc, #260]	; (8001584 <inSystem+0x4cc>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
	handlerMotor1.configM1.e_M1_1 = 0;
 8001484:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <inSystem+0x4cc>)
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
	handlerMotor1.configM1.e_M1_2 = 0;
 800148c:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <inSystem+0x4cc>)
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	61da      	str	r2, [r3, #28]


	handlerMotor2.configM2.e_M2   = 0;
 8001494:	4b3c      	ldr	r3, [pc, #240]	; (8001588 <inSystem+0x4d0>)
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	639a      	str	r2, [r3, #56]	; 0x38
	handlerMotor2.configM2.e_M2_1 = 0;
 800149c:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <inSystem+0x4d0>)
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	63da      	str	r2, [r3, #60]	; 0x3c
	handlerMotor2.configM2.e_M2_2 = 0;
 80014a4:	4b38      	ldr	r3, [pc, #224]	; (8001588 <inSystem+0x4d0>)
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	641a      	str	r2, [r3, #64]	; 0x40

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

		////////////////////////////////Configuracion PINES B8 (SCL) B9 (SDA) e I2C1 //////////////////////////////////////////////

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 80014ac:	4b37      	ldr	r3, [pc, #220]	; (800158c <inSystem+0x4d4>)
 80014ae:	4a38      	ldr	r2, [pc, #224]	; (8001590 <inSystem+0x4d8>)
 80014b0:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80014b2:	4b36      	ldr	r3, [pc, #216]	; (800158c <inSystem+0x4d4>)
 80014b4:	2204      	movs	r2, #4
 80014b6:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80014b8:	4b34      	ldr	r3, [pc, #208]	; (800158c <inSystem+0x4d4>)
 80014ba:	2202      	movs	r2, #2
 80014bc:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 80014be:	4b33      	ldr	r3, [pc, #204]	; (800158c <inSystem+0x4d4>)
 80014c0:	2208      	movs	r2, #8
 80014c2:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80014c4:	4b31      	ldr	r3, [pc, #196]	; (800158c <inSystem+0x4d4>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80014ca:	4b30      	ldr	r3, [pc, #192]	; (800158c <inSystem+0x4d4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80014d0:	4b2e      	ldr	r3, [pc, #184]	; (800158c <inSystem+0x4d4>)
 80014d2:	2203      	movs	r2, #3
 80014d4:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <inSystem+0x4dc>)
 80014d8:	4a2d      	ldr	r2, [pc, #180]	; (8001590 <inSystem+0x4d8>)
 80014da:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <inSystem+0x4dc>)
 80014de:	2204      	movs	r2, #4
 80014e0:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80014e2:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <inSystem+0x4dc>)
 80014e4:	2202      	movs	r2, #2
 80014e6:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <inSystem+0x4dc>)
 80014ea:	2209      	movs	r2, #9
 80014ec:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80014ee:	4b29      	ldr	r3, [pc, #164]	; (8001594 <inSystem+0x4dc>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <inSystem+0x4dc>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <inSystem+0x4dc>)
 80014fc:	2203      	movs	r2, #3
 80014fe:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 8001500:	4b25      	ldr	r3, [pc, #148]	; (8001598 <inSystem+0x4e0>)
 8001502:	4a26      	ldr	r2, [pc, #152]	; (800159c <inSystem+0x4e4>)
 8001504:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <inSystem+0x4e0>)
 8001508:	2232      	movs	r2, #50	; 0x32
 800150a:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <inSystem+0x4e0>)
 800150e:	2268      	movs	r2, #104	; 0x68
 8001510:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <inSystem+0x4e0>)
 8001514:	2201      	movs	r2, #1
 8001516:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 8001518:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <inSystem+0x4e8>)
 800151a:	4a1c      	ldr	r2, [pc, #112]	; (800158c <inSystem+0x4d4>)
 800151c:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <inSystem+0x4e8>)
 8001520:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <inSystem+0x4dc>)
 8001522:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <inSystem+0x4e8>)
 8001526:	4a1c      	ldr	r2, [pc, #112]	; (8001598 <inSystem+0x4e0>)
 8001528:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_4G;
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <inSystem+0x4e8>)
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_500;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <inSystem+0x4e8>)
 8001532:	2201      	movs	r2, #1
 8001534:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 8001536:	481a      	ldr	r0, [pc, #104]	; (80015a0 <inSystem+0x4e8>)
 8001538:	f002 f960 	bl	80037fc <configMPUAccel>

	////////////////////////////////Timer 5 para contador de tiempo ////////////////////////////////////



	handlerTIM5_time.ptrTIMx                           = TIM5;
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <inSystem+0x4ec>)
 800153e:	4a1a      	ldr	r2, [pc, #104]	; (80015a8 <inSystem+0x4f0>)
 8001540:	601a      	str	r2, [r3, #0]
	handlerTIM5_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <inSystem+0x4ec>)
 8001544:	2201      	movs	r2, #1
 8001546:	741a      	strb	r2, [r3, #16]
	handlerTIM5_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <inSystem+0x4ec>)
 800154a:	2200      	movs	r2, #0
 800154c:	711a      	strb	r2, [r3, #4]
	handlerTIM5_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <inSystem+0x4ec>)
 8001550:	f242 7210 	movw	r2, #10000	; 0x2710
 8001554:	609a      	str	r2, [r3, #8]
	handlerTIM5_time.TIMx_Config.TIMx_period           = 1000;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <inSystem+0x4ec>)
 8001558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800155c:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM5_time);
 800155e:	4811      	ldr	r0, [pc, #68]	; (80015a4 <inSystem+0x4ec>)
 8001560:	f000 fbfa 	bl	8001d58 <BasicTimer_Config>

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40020000 	.word	0x40020000
 800156c:	20000220 	.word	0x20000220
 8001570:	20000314 	.word	0x20000314
 8001574:	40004400 	.word	0x40004400
 8001578:	02faf080 	.word	0x02faf080
 800157c:	200002bc 	.word	0x200002bc
 8001580:	2000000c 	.word	0x2000000c
 8001584:	200003a8 	.word	0x200003a8
 8001588:	200003f0 	.word	0x200003f0
 800158c:	20000280 	.word	0x20000280
 8001590:	40020400 	.word	0x40020400
 8001594:	2000028c 	.word	0x2000028c
 8001598:	20000438 	.word	0x20000438
 800159c:	40005400 	.word	0x40005400
 80015a0:	20000440 	.word	0x20000440
 80015a4:	200002d0 	.word	0x200002d0
 80015a8:	40000c00 	.word	0x40000c00

080015ac <parseCommands>:


void parseCommands(char *stringVector){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af04      	add	r7, sp, #16
 80015b2:	6078      	str	r0, [r7, #4]

	sscanf(stringVector, "%s %u %u %u %s", cmd ,&firstParameter, &secondParameter, &thirdParameter, userMsg);
 80015b4:	4bb1      	ldr	r3, [pc, #708]	; (800187c <parseCommands+0x2d0>)
 80015b6:	9302      	str	r3, [sp, #8]
 80015b8:	4bb1      	ldr	r3, [pc, #708]	; (8001880 <parseCommands+0x2d4>)
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	4bb1      	ldr	r3, [pc, #708]	; (8001884 <parseCommands+0x2d8>)
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	4bb1      	ldr	r3, [pc, #708]	; (8001888 <parseCommands+0x2dc>)
 80015c2:	4ab2      	ldr	r2, [pc, #712]	; (800188c <parseCommands+0x2e0>)
 80015c4:	49b2      	ldr	r1, [pc, #712]	; (8001890 <parseCommands+0x2e4>)
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f004 feb4 	bl	8006334 <siscanf>




	if (strcmp(cmd, "help") == 0){
 80015cc:	49b1      	ldr	r1, [pc, #708]	; (8001894 <parseCommands+0x2e8>)
 80015ce:	48af      	ldr	r0, [pc, #700]	; (800188c <parseCommands+0x2e0>)
 80015d0:	f7fe fe06 	bl	80001e0 <strcmp>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d118      	bne.n	800160c <parseCommands+0x60>

		writeMsg(&handlerUSART1, "HELP MENU CMD : \n");
 80015da:	49af      	ldr	r1, [pc, #700]	; (8001898 <parseCommands+0x2ec>)
 80015dc:	48af      	ldr	r0, [pc, #700]	; (800189c <parseCommands+0x2f0>)
 80015de:	f003 fde1 	bl	80051a4 <writeMsg>
		writeMsg(&handlerUSART1, "1)  start #setPoint #dir --- setPoint de 0 a 9 ---  dir 0 CW 1 CCW \n");
 80015e2:	49af      	ldr	r1, [pc, #700]	; (80018a0 <parseCommands+0x2f4>)
 80015e4:	48ad      	ldr	r0, [pc, #692]	; (800189c <parseCommands+0x2f0>)
 80015e6:	f003 fddd 	bl	80051a4 <writeMsg>
		writeMsg(&handlerUSART1, "2)  goTo #dutty #dir #distance  -----dutty de 0 a 100 ||  dir 0 CW 1 CCW || Distancia en mm \n" );
 80015ea:	49ae      	ldr	r1, [pc, #696]	; (80018a4 <parseCommands+0x2f8>)
 80015ec:	48ab      	ldr	r0, [pc, #684]	; (800189c <parseCommands+0x2f0>)
 80015ee:	f003 fdd9 	bl	80051a4 <writeMsg>
		writeMsg(&handlerUSART1, "3)  off \n");
 80015f2:	49ad      	ldr	r1, [pc, #692]	; (80018a8 <parseCommands+0x2fc>)
 80015f4:	48a9      	ldr	r0, [pc, #676]	; (800189c <parseCommands+0x2f0>)
 80015f6:	f003 fdd5 	bl	80051a4 <writeMsg>
		writeMsg(&handlerUSART1, "4)  gyro \n");
 80015fa:	49ac      	ldr	r1, [pc, #688]	; (80018ac <parseCommands+0x300>)
 80015fc:	48a7      	ldr	r0, [pc, #668]	; (800189c <parseCommands+0x2f0>)
 80015fe:	f003 fdd1 	bl	80051a4 <writeMsg>
		writeMsg(&handlerUSART1, " \n");
 8001602:	49ab      	ldr	r1, [pc, #684]	; (80018b0 <parseCommands+0x304>)
 8001604:	48a5      	ldr	r0, [pc, #660]	; (800189c <parseCommands+0x2f0>)
 8001606:	f003 fdcd 	bl	80051a4 <writeMsg>


	}


}
 800160a:	e1c2      	b.n	8001992 <parseCommands+0x3e6>
	}else if (strcmp(cmd, "start") == 0){
 800160c:	49a9      	ldr	r1, [pc, #676]	; (80018b4 <parseCommands+0x308>)
 800160e:	489f      	ldr	r0, [pc, #636]	; (800188c <parseCommands+0x2e0>)
 8001610:	f7fe fde6 	bl	80001e0 <strcmp>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d154      	bne.n	80016c4 <parseCommands+0x118>
		dist_1 = 0;
 800161a:	49a7      	ldr	r1, [pc, #668]	; (80018b8 <parseCommands+0x30c>)
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	e9c1 2300 	strd	r2, r3, [r1]
		dist_2 = 0;
 8001628:	49a4      	ldr	r1, [pc, #656]	; (80018bc <parseCommands+0x310>)
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	e9c1 2300 	strd	r2, r3, [r1]
		handlerMotor1.configM1.counts_M1 = 0;
 8001636:	4ba2      	ldr	r3, [pc, #648]	; (80018c0 <parseCommands+0x314>)
 8001638:	2200      	movs	r2, #0
 800163a:	841a      	strh	r2, [r3, #32]
		handlerMotor2.configM2.counts_M2 = 0;
 800163c:	4ba1      	ldr	r3, [pc, #644]	; (80018c4 <parseCommands+0x318>)
 800163e:	2200      	movs	r2, #0
 8001640:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		setPoint = firstParameter;
 8001644:	4b90      	ldr	r3, [pc, #576]	; (8001888 <parseCommands+0x2dc>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	ee07 3a90 	vmov	s15, r3
 800164c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001650:	4b9d      	ldr	r3, [pc, #628]	; (80018c8 <parseCommands+0x31c>)
 8001652:	edc3 7a00 	vstr	s15, [r3]
		if (!flagPWM_1){
 8001656:	4b9d      	ldr	r3, [pc, #628]	; (80018cc <parseCommands+0x320>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d112      	bne.n	8001684 <parseCommands+0xd8>
			GPIO_WritePin_Afopt(&handlerIn1PinC12, secondParameter);
 800165e:	4b89      	ldr	r3, [pc, #548]	; (8001884 <parseCommands+0x2d8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	4619      	mov	r1, r3
 8001666:	489a      	ldr	r0, [pc, #616]	; (80018d0 <parseCommands+0x324>)
 8001668:	f002 f863 	bl	8003732 <GPIO_WritePin_Afopt>
			flagPWM_1 = enableOutput(&handlerPWM_1);
 800166c:	4899      	ldr	r0, [pc, #612]	; (80018d4 <parseCommands+0x328>)
 800166e:	f002 fe59 	bl	8004324 <enableOutput>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	4b95      	ldr	r3, [pc, #596]	; (80018cc <parseCommands+0x320>)
 8001678:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn1PinC10,SET);
 800167a:	2101      	movs	r1, #1
 800167c:	4896      	ldr	r0, [pc, #600]	; (80018d8 <parseCommands+0x32c>)
 800167e:	f002 f858 	bl	8003732 <GPIO_WritePin_Afopt>
 8001682:	e000      	b.n	8001686 <parseCommands+0xda>
			__NOP();
 8001684:	bf00      	nop
		if (!flagPWM_2){
 8001686:	4b95      	ldr	r3, [pc, #596]	; (80018dc <parseCommands+0x330>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d112      	bne.n	80016b4 <parseCommands+0x108>
			GPIO_WritePin_Afopt(&handlerIn2PinD2, secondParameter);
 800168e:	4b7d      	ldr	r3, [pc, #500]	; (8001884 <parseCommands+0x2d8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	4619      	mov	r1, r3
 8001696:	4892      	ldr	r0, [pc, #584]	; (80018e0 <parseCommands+0x334>)
 8001698:	f002 f84b 	bl	8003732 <GPIO_WritePin_Afopt>
			flagPWM_2 = enableOutput(&handlerPWM_2);
 800169c:	4891      	ldr	r0, [pc, #580]	; (80018e4 <parseCommands+0x338>)
 800169e:	f002 fe41 	bl	8004324 <enableOutput>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b8d      	ldr	r3, [pc, #564]	; (80018dc <parseCommands+0x330>)
 80016a8:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn2PinC11,SET);
 80016aa:	2101      	movs	r1, #1
 80016ac:	488e      	ldr	r0, [pc, #568]	; (80018e8 <parseCommands+0x33c>)
 80016ae:	f002 f840 	bl	8003732 <GPIO_WritePin_Afopt>
 80016b2:	e000      	b.n	80016b6 <parseCommands+0x10a>
			__NOP();
 80016b4:	bf00      	nop
		startTimer(&handlerTIM2_vel);
 80016b6:	488d      	ldr	r0, [pc, #564]	; (80018ec <parseCommands+0x340>)
 80016b8:	f000 fe76 	bl	80023a8 <startTimer>
		enableChangePWM = SET;
 80016bc:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <parseCommands+0x344>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
}
 80016c2:	e166      	b.n	8001992 <parseCommands+0x3e6>
	}else if (strcmp(cmd, "goTo") == 0){
 80016c4:	498b      	ldr	r1, [pc, #556]	; (80018f4 <parseCommands+0x348>)
 80016c6:	4871      	ldr	r0, [pc, #452]	; (800188c <parseCommands+0x2e0>)
 80016c8:	f7fe fd8a 	bl	80001e0 <strcmp>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 8120 	bne.w	8001914 <parseCommands+0x368>
		dist_1 = 0;
 80016d4:	4978      	ldr	r1, [pc, #480]	; (80018b8 <parseCommands+0x30c>)
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	e9c1 2300 	strd	r2, r3, [r1]
		dist_2 = 0;
 80016e2:	4976      	ldr	r1, [pc, #472]	; (80018bc <parseCommands+0x310>)
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9c1 2300 	strd	r2, r3, [r1]
		handlerMotor1.configM1.counts_M1 = 0;
 80016f0:	4b73      	ldr	r3, [pc, #460]	; (80018c0 <parseCommands+0x314>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	841a      	strh	r2, [r3, #32]
		handlerMotor2.configM2.counts_M2 = 0;
 80016f6:	4b73      	ldr	r3, [pc, #460]	; (80018c4 <parseCommands+0x318>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		distance = thirdParameter;
 80016fe:	4b60      	ldr	r3, [pc, #384]	; (8001880 <parseCommands+0x2d4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b29a      	uxth	r2, r3
 8001704:	4b7c      	ldr	r3, [pc, #496]	; (80018f8 <parseCommands+0x34c>)
 8001706:	801a      	strh	r2, [r3, #0]
		setPoint = thirdParameter;
 8001708:	4b5d      	ldr	r3, [pc, #372]	; (8001880 <parseCommands+0x2d4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001714:	4b6c      	ldr	r3, [pc, #432]	; (80018c8 <parseCommands+0x31c>)
 8001716:	edc3 7a00 	vstr	s15, [r3]
		if (!flagPWM_1){
 800171a:	4b6c      	ldr	r3, [pc, #432]	; (80018cc <parseCommands+0x320>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d14f      	bne.n	80017c2 <parseCommands+0x216>
			handlerMotor1.configM1.u_M1_1 = setPoint / k;
 8001722:	4b69      	ldr	r3, [pc, #420]	; (80018c8 <parseCommands+0x31c>)
 8001724:	edd3 6a00 	vldr	s13, [r3]
 8001728:	4b74      	ldr	r3, [pc, #464]	; (80018fc <parseCommands+0x350>)
 800172a:	ed93 7a00 	vldr	s14, [r3]
 800172e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001732:	4b63      	ldr	r3, [pc, #396]	; (80018c0 <parseCommands+0x314>)
 8001734:	edc3 7a01 	vstr	s15, [r3, #4]
			setConstants(&handlerMotor1, 1, k, tau, theta, Ts);
 8001738:	4b70      	ldr	r3, [pc, #448]	; (80018fc <parseCommands+0x350>)
 800173a:	ed93 7a00 	vldr	s14, [r3]
 800173e:	4b70      	ldr	r3, [pc, #448]	; (8001900 <parseCommands+0x354>)
 8001740:	edd3 6a00 	vldr	s13, [r3]
 8001744:	4b6f      	ldr	r3, [pc, #444]	; (8001904 <parseCommands+0x358>)
 8001746:	ed93 6a00 	vldr	s12, [r3]
 800174a:	4b6f      	ldr	r3, [pc, #444]	; (8001908 <parseCommands+0x35c>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001754:	ee17 3a90 	vmov	r3, s15
 8001758:	b29b      	uxth	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	eeb0 1a46 	vmov.f32	s2, s12
 8001760:	eef0 0a66 	vmov.f32	s1, s13
 8001764:	eeb0 0a47 	vmov.f32	s0, s14
 8001768:	2101      	movs	r1, #1
 800176a:	4855      	ldr	r0, [pc, #340]	; (80018c0 <parseCommands+0x314>)
 800176c:	f002 fa34 	bl	8003bd8 <setConstants>
			updateDuttyCycleAfOpt(&handlerPWM_1, firstParameter);
 8001770:	4b45      	ldr	r3, [pc, #276]	; (8001888 <parseCommands+0x2dc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800177c:	eeb0 0a67 	vmov.f32	s0, s15
 8001780:	4854      	ldr	r0, [pc, #336]	; (80018d4 <parseCommands+0x328>)
 8001782:	f003 f851 	bl	8004828 <updateDuttyCycleAfOpt>
			counterPWM1 = showPWMBfOpt(&handlerPWM_1);
 8001786:	4853      	ldr	r0, [pc, #332]	; (80018d4 <parseCommands+0x328>)
 8001788:	f002 fff2 	bl	8004770 <showPWMBfOpt>
 800178c:	4603      	mov	r3, r0
 800178e:	ee07 3a90 	vmov	s15, r3
 8001792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001796:	4b5d      	ldr	r3, [pc, #372]	; (800190c <parseCommands+0x360>)
 8001798:	edc3 7a00 	vstr	s15, [r3]
			GPIO_WritePin_Afopt(&handlerIn1PinC12, secondParameter);
 800179c:	4b39      	ldr	r3, [pc, #228]	; (8001884 <parseCommands+0x2d8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	4619      	mov	r1, r3
 80017a4:	484a      	ldr	r0, [pc, #296]	; (80018d0 <parseCommands+0x324>)
 80017a6:	f001 ffc4 	bl	8003732 <GPIO_WritePin_Afopt>
			flagPWM_1 = enableOutput(&handlerPWM_1);
 80017aa:	484a      	ldr	r0, [pc, #296]	; (80018d4 <parseCommands+0x328>)
 80017ac:	f002 fdba 	bl	8004324 <enableOutput>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b45      	ldr	r3, [pc, #276]	; (80018cc <parseCommands+0x320>)
 80017b6:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn1PinC10,SET);
 80017b8:	2101      	movs	r1, #1
 80017ba:	4847      	ldr	r0, [pc, #284]	; (80018d8 <parseCommands+0x32c>)
 80017bc:	f001 ffb9 	bl	8003732 <GPIO_WritePin_Afopt>
 80017c0:	e000      	b.n	80017c4 <parseCommands+0x218>
			__NOP();
 80017c2:	bf00      	nop
		if (!flagPWM_2){
 80017c4:	4b45      	ldr	r3, [pc, #276]	; (80018dc <parseCommands+0x330>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d14f      	bne.n	800186c <parseCommands+0x2c0>
			handlerMotor2.configM2.u_M2_1 = setPoint / k;
 80017cc:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <parseCommands+0x31c>)
 80017ce:	edd3 6a00 	vldr	s13, [r3]
 80017d2:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <parseCommands+0x350>)
 80017d4:	ed93 7a00 	vldr	s14, [r3]
 80017d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017dc:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <parseCommands+0x318>)
 80017de:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			setConstants(&handlerMotor2, 2, k, tau, theta, Ts);
 80017e2:	4b46      	ldr	r3, [pc, #280]	; (80018fc <parseCommands+0x350>)
 80017e4:	ed93 7a00 	vldr	s14, [r3]
 80017e8:	4b45      	ldr	r3, [pc, #276]	; (8001900 <parseCommands+0x354>)
 80017ea:	edd3 6a00 	vldr	s13, [r3]
 80017ee:	4b45      	ldr	r3, [pc, #276]	; (8001904 <parseCommands+0x358>)
 80017f0:	ed93 6a00 	vldr	s12, [r3]
 80017f4:	4b44      	ldr	r3, [pc, #272]	; (8001908 <parseCommands+0x35c>)
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017fe:	ee17 3a90 	vmov	r3, s15
 8001802:	b29b      	uxth	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	eeb0 1a46 	vmov.f32	s2, s12
 800180a:	eef0 0a66 	vmov.f32	s1, s13
 800180e:	eeb0 0a47 	vmov.f32	s0, s14
 8001812:	2102      	movs	r1, #2
 8001814:	482b      	ldr	r0, [pc, #172]	; (80018c4 <parseCommands+0x318>)
 8001816:	f002 f9df 	bl	8003bd8 <setConstants>
			updateDuttyCycleAfOpt(&handlerPWM_2, firstParameter);
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <parseCommands+0x2dc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	482e      	ldr	r0, [pc, #184]	; (80018e4 <parseCommands+0x338>)
 800182c:	f002 fffc 	bl	8004828 <updateDuttyCycleAfOpt>
			counterPWM2 = showPWMBfOpt(&handlerPWM_2);
 8001830:	482c      	ldr	r0, [pc, #176]	; (80018e4 <parseCommands+0x338>)
 8001832:	f002 ff9d 	bl	8004770 <showPWMBfOpt>
 8001836:	4603      	mov	r3, r0
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001840:	4b33      	ldr	r3, [pc, #204]	; (8001910 <parseCommands+0x364>)
 8001842:	edc3 7a00 	vstr	s15, [r3]
			GPIO_WritePin_Afopt(&handlerIn2PinD2, secondParameter);
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <parseCommands+0x2d8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	4619      	mov	r1, r3
 800184e:	4824      	ldr	r0, [pc, #144]	; (80018e0 <parseCommands+0x334>)
 8001850:	f001 ff6f 	bl	8003732 <GPIO_WritePin_Afopt>
			flagPWM_2 = enableOutput(&handlerPWM_2);
 8001854:	4823      	ldr	r0, [pc, #140]	; (80018e4 <parseCommands+0x338>)
 8001856:	f002 fd65 	bl	8004324 <enableOutput>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <parseCommands+0x330>)
 8001860:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn2PinC11,SET);
 8001862:	2101      	movs	r1, #1
 8001864:	4820      	ldr	r0, [pc, #128]	; (80018e8 <parseCommands+0x33c>)
 8001866:	f001 ff64 	bl	8003732 <GPIO_WritePin_Afopt>
 800186a:	e000      	b.n	800186e <parseCommands+0x2c2>
			__NOP();
 800186c:	bf00      	nop
		startTimer(&handlerTIM2_vel);
 800186e:	481f      	ldr	r0, [pc, #124]	; (80018ec <parseCommands+0x340>)
 8001870:	f000 fd9a 	bl	80023a8 <startTimer>
		enableChangePWM = SET;
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <parseCommands+0x344>)
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
}
 800187a:	e08a      	b.n	8001992 <parseCommands+0x3e6>
 800187c:	200004c0 	.word	0x200004c0
 8001880:	200004bc 	.word	0x200004bc
 8001884:	200004b8 	.word	0x200004b8
 8001888:	200004b4 	.word	0x200004b4
 800188c:	20000494 	.word	0x20000494
 8001890:	08009e98 	.word	0x08009e98
 8001894:	08009ea8 	.word	0x08009ea8
 8001898:	08009eb0 	.word	0x08009eb0
 800189c:	20000314 	.word	0x20000314
 80018a0:	08009ec4 	.word	0x08009ec4
 80018a4:	08009f0c 	.word	0x08009f0c
 80018a8:	08009f6c 	.word	0x08009f6c
 80018ac:	08009f78 	.word	0x08009f78
 80018b0:	08009f84 	.word	0x08009f84
 80018b4:	08009f88 	.word	0x08009f88
 80018b8:	20000550 	.word	0x20000550
 80018bc:	20000558 	.word	0x20000558
 80018c0:	200003a8 	.word	0x200003a8
 80018c4:	200003f0 	.word	0x200003f0
 80018c8:	20000574 	.word	0x20000574
 80018cc:	20000540 	.word	0x20000540
 80018d0:	2000025c 	.word	0x2000025c
 80018d4:	200002e4 	.word	0x200002e4
 80018d8:	20000244 	.word	0x20000244
 80018dc:	20000541 	.word	0x20000541
 80018e0:	20000250 	.word	0x20000250
 80018e4:	200002fc 	.word	0x200002fc
 80018e8:	20000238 	.word	0x20000238
 80018ec:	200002bc 	.word	0x200002bc
 80018f0:	20000543 	.word	0x20000543
 80018f4:	08009f90 	.word	0x08009f90
 80018f8:	20000578 	.word	0x20000578
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000004 	.word	0x20000004
 8001904:	20000008 	.word	0x20000008
 8001908:	2000000c 	.word	0x2000000c
 800190c:	20000548 	.word	0x20000548
 8001910:	2000054c 	.word	0x2000054c
	}else if (strcmp(cmd, "off") == 0){
 8001914:	4921      	ldr	r1, [pc, #132]	; (800199c <parseCommands+0x3f0>)
 8001916:	4822      	ldr	r0, [pc, #136]	; (80019a0 <parseCommands+0x3f4>)
 8001918:	f7fe fc62 	bl	80001e0 <strcmp>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d128      	bne.n	8001974 <parseCommands+0x3c8>
		if (flagPWM_1){
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <parseCommands+0x3f8>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00b      	beq.n	8001942 <parseCommands+0x396>
			flagPWM_1 = disableOutput(&handlerPWM_1);
 800192a:	481f      	ldr	r0, [pc, #124]	; (80019a8 <parseCommands+0x3fc>)
 800192c:	f002 ff8c 	bl	8004848 <disableOutput>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <parseCommands+0x3f8>)
 8001936:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn1PinC10,RESET);
 8001938:	2100      	movs	r1, #0
 800193a:	481c      	ldr	r0, [pc, #112]	; (80019ac <parseCommands+0x400>)
 800193c:	f001 fef9 	bl	8003732 <GPIO_WritePin_Afopt>
 8001940:	e000      	b.n	8001944 <parseCommands+0x398>
			__NOP();
 8001942:	bf00      	nop
		if (flagPWM_2){
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <parseCommands+0x404>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00b      	beq.n	8001964 <parseCommands+0x3b8>
			flagPWM_2 = disableOutput(&handlerPWM_2);
 800194c:	4819      	ldr	r0, [pc, #100]	; (80019b4 <parseCommands+0x408>)
 800194e:	f002 ff7b 	bl	8004848 <disableOutput>
 8001952:	4603      	mov	r3, r0
 8001954:	461a      	mov	r2, r3
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <parseCommands+0x404>)
 8001958:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn2PinC11,RESET);
 800195a:	2100      	movs	r1, #0
 800195c:	4816      	ldr	r0, [pc, #88]	; (80019b8 <parseCommands+0x40c>)
 800195e:	f001 fee8 	bl	8003732 <GPIO_WritePin_Afopt>
 8001962:	e000      	b.n	8001966 <parseCommands+0x3ba>
			__NOP();
 8001964:	bf00      	nop
		stopTimer(&handlerTIM2_vel);
 8001966:	4815      	ldr	r0, [pc, #84]	; (80019bc <parseCommands+0x410>)
 8001968:	f000 fd30 	bl	80023cc <stopTimer>
		enableChangePWM = RESET;
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <parseCommands+0x414>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
}
 8001972:	e00e      	b.n	8001992 <parseCommands+0x3e6>
	}else if (strcmp(cmd, "gyro") == 0){
 8001974:	4913      	ldr	r1, [pc, #76]	; (80019c4 <parseCommands+0x418>)
 8001976:	480a      	ldr	r0, [pc, #40]	; (80019a0 <parseCommands+0x3f4>)
 8001978:	f7fe fc32 	bl	80001e0 <strcmp>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d103      	bne.n	800198a <parseCommands+0x3de>
		startTimer(&handlerTIM5_time);
 8001982:	4811      	ldr	r0, [pc, #68]	; (80019c8 <parseCommands+0x41c>)
 8001984:	f000 fd10 	bl	80023a8 <startTimer>
}
 8001988:	e003      	b.n	8001992 <parseCommands+0x3e6>
		writeMsg(&handlerUSART1, "Comando Incorrecto :c \n");
 800198a:	4910      	ldr	r1, [pc, #64]	; (80019cc <parseCommands+0x420>)
 800198c:	4810      	ldr	r0, [pc, #64]	; (80019d0 <parseCommands+0x424>)
 800198e:	f003 fc09 	bl	80051a4 <writeMsg>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	08009f98 	.word	0x08009f98
 80019a0:	20000494 	.word	0x20000494
 80019a4:	20000540 	.word	0x20000540
 80019a8:	200002e4 	.word	0x200002e4
 80019ac:	20000244 	.word	0x20000244
 80019b0:	20000541 	.word	0x20000541
 80019b4:	200002fc 	.word	0x200002fc
 80019b8:	20000238 	.word	0x20000238
 80019bc:	200002bc 	.word	0x200002bc
 80019c0:	20000543 	.word	0x20000543
 80019c4:	08009f9c 	.word	0x08009f9c
 80019c8:	200002d0 	.word	0x200002d0
 80019cc:	08009fa4 	.word	0x08009fa4
 80019d0:	20000314 	.word	0x20000314
 80019d4:	00000000 	.word	0x00000000

080019d8 <distanceM1>:



double distanceM1 (void){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0

	double u_1;

	u_1 = M_PI * (51.45) * handlerMotor1.configM1.counts_M1/ (72) ;
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <distanceM1+0x58>)
 80019e0:	8c1b      	ldrh	r3, [r3, #32]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fdb6 	bl	8000554 <__aeabi_i2d>
 80019e8:	a30f      	add	r3, pc, #60	; (adr r3, 8001a28 <distanceM1+0x50>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	f7fe fe1b 	bl	8000628 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <distanceM1+0x5c>)
 8001a00:	f7fe ff3c 	bl	800087c <__aeabi_ddiv>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	e9c7 2300 	strd	r2, r3, [r7]

	return u_1;
 8001a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a10:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a14:	eeb0 0a47 	vmov.f32	s0, s14
 8001a18:	eef0 0a67 	vmov.f32	s1, s15
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	f3af 8000 	nop.w
 8001a28:	71f1350d 	.word	0x71f1350d
 8001a2c:	40643451 	.word	0x40643451
 8001a30:	200003a8 	.word	0x200003a8
 8001a34:	40520000 	.word	0x40520000

08001a38 <distanceM2>:

double distanceM2 (void){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0

	double u_2;

	u_2 = M_PI * (51.70) * handlerMotor2.configM2.counts_M2/ (72) ;
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <distanceM2+0x58>)
 8001a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fd85 	bl	8000554 <__aeabi_i2d>
 8001a4a:	a30f      	add	r3, pc, #60	; (adr r3, 8001a88 <distanceM2+0x50>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	f7fe fdea 	bl	8000628 <__aeabi_dmul>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <distanceM2+0x5c>)
 8001a62:	f7fe ff0b 	bl	800087c <__aeabi_ddiv>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	e9c7 2300 	strd	r2, r3, [r7]

	return u_2;
 8001a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a72:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a76:	eeb0 0a47 	vmov.f32	s0, s14
 8001a7a:	eef0 0a67 	vmov.f32	s1, s15
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	f3af 8000 	nop.w
 8001a88:	6d45793b 	.word	0x6d45793b
 8001a8c:	40644d73 	.word	0x40644d73
 8001a90:	200003f0 	.word	0x200003f0
 8001a94:	40520000 	.word	0x40520000

08001a98 <usart2Rx_Callback>:


// Interrupcion usart 1
void usart2Rx_Callback(void){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0

	rxData = getRxData();
 8001a9c:	f003 fbaa 	bl	80051f4 <getRxData>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b01      	ldr	r3, [pc, #4]	; (8001aac <usart2Rx_Callback+0x14>)
 8001aa6:	701a      	strb	r2, [r3, #0]

}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000492 	.word	0x20000492

08001ab0 <BasicTimer5_Callback>:

//Interrupcion Timer 5
void BasicTimer5_Callback(void){
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

	flagGyro = SET;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <BasicTimer5_Callback+0x20>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
	tiempo += 1;
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <BasicTimer5_Callback+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <BasicTimer5_Callback+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]

}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000544 	.word	0x20000544
 8001ad4:	20000590 	.word	0x20000590

08001ad8 <BasicTimer3_Callback>:

//Interrupción Timer 3
void BasicTimer3_Callback(void){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0

	GPIOxTooglePin(&handlerPinA5);
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <BasicTimer3_Callback+0x1c>)
 8001ade:	f001 fe74 	bl	80037ca <GPIOxTooglePin>
	counterTIM3++;
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <BasicTimer3_Callback+0x20>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <BasicTimer3_Callback+0x20>)
 8001aec:	801a      	strh	r2, [r3, #0]

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200001fc 	.word	0x200001fc
 8001af8:	20000568 	.word	0x20000568

08001afc <BasicTimer2_Callback>:

//Interrupcion Timer 2

void BasicTimer2_Callback(void){
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

	flagT2 = SET;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <BasicTimer2_Callback+0x14>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]


}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	20000542 	.word	0x20000542

08001b14 <callback_extInt1>:


//Interrupciones de Exti
void callback_extInt1(void){
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

	handlerMotor1.configM1.counts_M1++;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <callback_extInt1+0x1c>)
 8001b1a:	8c1b      	ldrh	r3, [r3, #32]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <callback_extInt1+0x1c>)
 8001b22:	841a      	strh	r2, [r3, #32]

}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	200003a8 	.word	0x200003a8

08001b34 <callback_extInt3>:

void callback_extInt3(void){
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

	handlerMotor2.configM2.counts_M2++;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <callback_extInt3+0x20>)
 8001b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b3e:	3301      	adds	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <callback_extInt3+0x20>)
 8001b44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200003f0 	.word	0x200003f0

08001b58 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <ITM_SendChar+0x48>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <ITM_SendChar+0x48>)
 8001b68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b6c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <ITM_SendChar+0x4c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <ITM_SendChar+0x4c>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001b7a:	bf00      	nop
 8001b7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f8      	beq.n	8001b7c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001b8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	6013      	str	r3, [r2, #0]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000edfc 	.word	0xe000edfc
 8001ba4:	e0000e00 	.word	0xe0000e00

08001ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
	return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_kill>:

int _kill(int pid, int sig)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bc2:	f003 fe03 	bl	80057cc <__errno>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2216      	movs	r2, #22
 8001bca:	601a      	str	r2, [r3, #0]
	return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_exit>:

void _exit (int status)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ffe7 	bl	8001bb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bea:	e7fe      	b.n	8001bea <_exit+0x12>

08001bec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e00a      	b.n	8001c14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bfe:	f3af 8000 	nop.w
 8001c02:	4601      	mov	r1, r0
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	60ba      	str	r2, [r7, #8]
 8001c0a:	b2ca      	uxtb	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dbf0      	blt.n	8001bfe <_read+0x12>
	}

return len;
 8001c1c:	687b      	ldr	r3, [r7, #4]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e009      	b.n	8001c4c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	60ba      	str	r2, [r7, #8]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff89 	bl	8001b58 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dbf1      	blt.n	8001c38 <_write+0x12>
	}
	return len;
 8001c54:	687b      	ldr	r3, [r7, #4]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_close>:

int _close(int file)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
	return -1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c86:	605a      	str	r2, [r3, #4]
	return 0;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <_isatty>:

int _isatty(int file)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
	return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ccc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd0:	480c      	ldr	r0, [pc, #48]	; (8001d04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cd2:	490d      	ldr	r1, [pc, #52]	; (8001d08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <LoopForever+0xe>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd8:	e002      	b.n	8001ce0 <LoopCopyDataInit>

08001cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cde:	3304      	adds	r3, #4

08001ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce4:	d3f9      	bcc.n	8001cda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ce8:	4c0a      	ldr	r4, [pc, #40]	; (8001d14 <LoopForever+0x16>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cec:	e001      	b.n	8001cf2 <LoopFillZerobss>

08001cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf0:	3204      	adds	r2, #4

08001cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf4:	d3fb      	bcc.n	8001cee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cf6:	f003 fd6f 	bl	80057d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cfa:	f7fe ffdd 	bl	8000cb8 <main>

08001cfe <LoopForever>:

LoopForever:
    b LoopForever
 8001cfe:	e7fe      	b.n	8001cfe <LoopForever>
  ldr   r0, =_estack
 8001d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d0c:	0800a400 	.word	0x0800a400
  ldr r2, =_sbss
 8001d10:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d14:	200005c0 	.word	0x200005c0

08001d18 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC_IRQHandler>
	...

08001d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	db0b      	blt.n	8001d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	f003 021f 	and.w	r2, r3, #31
 8001d34:	4907      	ldr	r1, [pc, #28]	; (8001d54 <__NVIC_EnableIRQ+0x38>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000e100 	.word	0xe000e100

08001d58 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
	stopTimer(ptrBTimerHandler);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fb2f 	bl	80023cc <stopTimer>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d6e:	b672      	cpsid	i
}
 8001d70:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a6c      	ldr	r2, [pc, #432]	; (8001f28 <BasicTimer_Config+0x1d0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d106      	bne.n	8001d8a <BasicTimer_Config+0x32>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001d7c:	4b6b      	ldr	r3, [pc, #428]	; (8001f2c <BasicTimer_Config+0x1d4>)
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	4a6a      	ldr	r2, [pc, #424]	; (8001f2c <BasicTimer_Config+0x1d4>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6453      	str	r3, [r2, #68]	; 0x44
 8001d88:	e030      	b.n	8001dec <BasicTimer_Config+0x94>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d92:	d106      	bne.n	8001da2 <BasicTimer_Config+0x4a>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001d94:	4b65      	ldr	r3, [pc, #404]	; (8001f2c <BasicTimer_Config+0x1d4>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	4a64      	ldr	r2, [pc, #400]	; (8001f2c <BasicTimer_Config+0x1d4>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001da0:	e024      	b.n	8001dec <BasicTimer_Config+0x94>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a62      	ldr	r2, [pc, #392]	; (8001f30 <BasicTimer_Config+0x1d8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d106      	bne.n	8001dba <BasicTimer_Config+0x62>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001dac:	4b5f      	ldr	r3, [pc, #380]	; (8001f2c <BasicTimer_Config+0x1d4>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	4a5e      	ldr	r2, [pc, #376]	; (8001f2c <BasicTimer_Config+0x1d4>)
 8001db2:	f043 0302 	orr.w	r3, r3, #2
 8001db6:	6413      	str	r3, [r2, #64]	; 0x40
 8001db8:	e018      	b.n	8001dec <BasicTimer_Config+0x94>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a5d      	ldr	r2, [pc, #372]	; (8001f34 <BasicTimer_Config+0x1dc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d106      	bne.n	8001dd2 <BasicTimer_Config+0x7a>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001dc4:	4b59      	ldr	r3, [pc, #356]	; (8001f2c <BasicTimer_Config+0x1d4>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4a58      	ldr	r2, [pc, #352]	; (8001f2c <BasicTimer_Config+0x1d4>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd0:	e00c      	b.n	8001dec <BasicTimer_Config+0x94>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a58      	ldr	r2, [pc, #352]	; (8001f38 <BasicTimer_Config+0x1e0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d106      	bne.n	8001dea <BasicTimer_Config+0x92>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001ddc:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <BasicTimer_Config+0x1d4>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	4a52      	ldr	r2, [pc, #328]	; (8001f2c <BasicTimer_Config+0x1d4>)
 8001de2:	f043 0308 	orr.w	r3, r3, #8
 8001de6:	6413      	str	r3, [r2, #64]	; 0x40
 8001de8:	e000      	b.n	8001dec <BasicTimer_Config+0x94>
	}
	else{
		__NOP();
 8001dea:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001dfa:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6892      	ldr	r2, [r2, #8]
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	791b      	ldrb	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d144      	bne.n	8001e98 <BasicTimer_Config+0x140>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0210 	bic.w	r2, r2, #16
 8001e1c:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2ba0      	cmp	r3, #160	; 0xa0
 8001e28:	d003      	beq.n	8001e32 <BasicTimer_Config+0xda>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e30:	d10b      	bne.n	8001e4a <BasicTimer_Config+0xf2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2264      	movs	r2, #100	; 0x64
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	3a01      	subs	r2, #1
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e48:	e021      	b.n	8001e8e <BasicTimer_Config+0x136>

		}else if ((speed == BTIMER_SPEED_16MHz_100us ) || (speed == BTIMER_SPEED_100MHz_100us)){
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001e50:	d004      	beq.n	8001e5c <BasicTimer_Config+0x104>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d10c      	bne.n	8001e76 <BasicTimer_Config+0x11e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	3a01      	subs	r2, #1
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e74:	e00b      	b.n	8001e8e <BasicTimer_Config+0x136>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms )){
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001e7c:	d107      	bne.n	8001e8e <BasicTimer_Config+0x136>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period    ;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	3a01      	subs	r2, #1
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c

		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24
 8001e96:	e013      	b.n	8001ec0 <BasicTimer_Config+0x168>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0210 	orr.w	r2, r2, #16
 8001ea6:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3a01      	subs	r2, #1
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3a01      	subs	r2, #1
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed8:	d103      	bne.n	8001ee2 <BasicTimer_Config+0x18a>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001eda:	201c      	movs	r0, #28
 8001edc:	f7ff ff1e 	bl	8001d1c <__NVIC_EnableIRQ>
 8001ee0:	e01b      	b.n	8001f1a <BasicTimer_Config+0x1c2>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <BasicTimer_Config+0x1d8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d103      	bne.n	8001ef4 <BasicTimer_Config+0x19c>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001eec:	201d      	movs	r0, #29
 8001eee:	f7ff ff15 	bl	8001d1c <__NVIC_EnableIRQ>
 8001ef2:	e012      	b.n	8001f1a <BasicTimer_Config+0x1c2>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0e      	ldr	r2, [pc, #56]	; (8001f34 <BasicTimer_Config+0x1dc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d103      	bne.n	8001f06 <BasicTimer_Config+0x1ae>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001efe:	201e      	movs	r0, #30
 8001f00:	f7ff ff0c 	bl	8001d1c <__NVIC_EnableIRQ>
 8001f04:	e009      	b.n	8001f1a <BasicTimer_Config+0x1c2>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <BasicTimer_Config+0x1e0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d103      	bne.n	8001f18 <BasicTimer_Config+0x1c0>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001f10:	2032      	movs	r0, #50	; 0x32
 8001f12:	f7ff ff03 	bl	8001d1c <__NVIC_EnableIRQ>
 8001f16:	e000      	b.n	8001f1a <BasicTimer_Config+0x1c2>
	}
	else{
		__NOP();
 8001f18:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001f1a:	b662      	cpsie	i
}
 8001f1c:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40000400 	.word	0x40000400
 8001f34:	40000800 	.word	0x40000800
 8001f38:	40000c00 	.word	0x40000c00

08001f3c <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f40:	bf00      	nop
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <Capture_TIM2_Ch1_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f50:	bf00      	nop
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f60:	bf00      	nop
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f70:	bf00      	nop
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f80:	bf00      	nop
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f90:	bf00      	nop
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001fa0:	bf00      	nop
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001fb0:	bf00      	nop
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001fc0:	bf00      	nop
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001fd0:	bf00      	nop
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001fe0:	bf00      	nop
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001ff0:	bf00      	nop
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002000:	bf00      	nop
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002010:	bf00      	nop
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002020:	bf00      	nop
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002030:	bf00      	nop
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8002040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 800204e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 800205e:	f7ff fd4d 	bl	8001afc <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 8002062:	e066      	b.n	8002132 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8002064:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d012      	beq.n	8002098 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 8002072:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800207c:	f023 0302 	bic.w	r3, r3, #2
 8002080:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 8002082:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800208c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002090:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 8002092:	f7ff ff5b 	bl	8001f4c <Capture_TIM2_Ch1_Callback>
}
 8002096:	e04c      	b.n	8002132 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8002098:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d012      	beq.n	80020cc <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 80020a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 80020b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020c4:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 80020c6:	f7ff ff49 	bl	8001f5c <Capture_TIM2_Ch2_Callback>
}
 80020ca:	e032      	b.n	8002132 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 80020cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d012      	beq.n	8002100 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 80020da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020e4:	f023 0308 	bic.w	r3, r3, #8
 80020e8:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 80020ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020f8:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 80020fa:	f7ff ff37 	bl	8001f6c <Capture_TIM2_Ch3_Callback>
}
 80020fe:	e018      	b.n	8002132 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8002100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	d011      	beq.n	8002132 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 800210e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002118:	f023 0310 	bic.w	r3, r3, #16
 800211c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 800211e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800212c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 800212e:	f7ff ff25 	bl	8001f7c <Capture_TIM2_Ch4_Callback>
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 800213c:	4b31      	ldr	r3, [pc, #196]	; (8002204 <TIM3_IRQHandler+0xcc>)
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 8002148:	4b2e      	ldr	r3, [pc, #184]	; (8002204 <TIM3_IRQHandler+0xcc>)
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	4a2d      	ldr	r2, [pc, #180]	; (8002204 <TIM3_IRQHandler+0xcc>)
 800214e:	f023 0301 	bic.w	r3, r3, #1
 8002152:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8002154:	f7ff fcc0 	bl	8001ad8 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 8002158:	e052      	b.n	8002200 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 800215a:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <TIM3_IRQHandler+0xcc>)
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00e      	beq.n	8002184 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 8002166:	4b27      	ldr	r3, [pc, #156]	; (8002204 <TIM3_IRQHandler+0xcc>)
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	4a26      	ldr	r2, [pc, #152]	; (8002204 <TIM3_IRQHandler+0xcc>)
 800216c:	f023 0302 	bic.w	r3, r3, #2
 8002170:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <TIM3_IRQHandler+0xcc>)
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	4a23      	ldr	r2, [pc, #140]	; (8002204 <TIM3_IRQHandler+0xcc>)
 8002178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800217c:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 800217e:	f7ff ff05 	bl	8001f8c <Capture_TIM3_Ch1_Callback>
}
 8002182:	e03d      	b.n	8002200 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <TIM3_IRQHandler+0xcc>)
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00e      	beq.n	80021ae <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <TIM3_IRQHandler+0xcc>)
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4a1b      	ldr	r2, [pc, #108]	; (8002204 <TIM3_IRQHandler+0xcc>)
 8002196:	f023 0304 	bic.w	r3, r3, #4
 800219a:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <TIM3_IRQHandler+0xcc>)
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	4a18      	ldr	r2, [pc, #96]	; (8002204 <TIM3_IRQHandler+0xcc>)
 80021a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021a6:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 80021a8:	f7ff fef8 	bl	8001f9c <Capture_TIM3_Ch2_Callback>
}
 80021ac:	e028      	b.n	8002200 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <TIM3_IRQHandler+0xcc>)
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00e      	beq.n	80021d8 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <TIM3_IRQHandler+0xcc>)
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	4a11      	ldr	r2, [pc, #68]	; (8002204 <TIM3_IRQHandler+0xcc>)
 80021c0:	f023 0308 	bic.w	r3, r3, #8
 80021c4:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <TIM3_IRQHandler+0xcc>)
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <TIM3_IRQHandler+0xcc>)
 80021cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021d0:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 80021d2:	f7ff feeb 	bl	8001fac <Capture_TIM3_Ch3_Callback>
}
 80021d6:	e013      	b.n	8002200 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <TIM3_IRQHandler+0xcc>)
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00d      	beq.n	8002200 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <TIM3_IRQHandler+0xcc>)
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	4a06      	ldr	r2, [pc, #24]	; (8002204 <TIM3_IRQHandler+0xcc>)
 80021ea:	f023 0310 	bic.w	r3, r3, #16
 80021ee:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <TIM3_IRQHandler+0xcc>)
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	4a03      	ldr	r2, [pc, #12]	; (8002204 <TIM3_IRQHandler+0xcc>)
 80021f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021fa:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 80021fc:	f7ff fede 	bl	8001fbc <Capture_TIM3_Ch4_Callback>
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40000400 	.word	0x40000400

08002208 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 8002218:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	4a2d      	ldr	r2, [pc, #180]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 800221e:	f023 0301 	bic.w	r3, r3, #1
 8002222:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8002224:	f7ff fe8a 	bl	8001f3c <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 8002228:	e052      	b.n	80022d0 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 800222a:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00e      	beq.n	8002254 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 8002236:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	4a26      	ldr	r2, [pc, #152]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 800223c:	f023 0302 	bic.w	r3, r3, #2
 8002240:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8002242:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	4a23      	ldr	r2, [pc, #140]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 8002248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800224c:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 800224e:	f7ff febd 	bl	8001fcc <Capture_TIM4_Ch1_Callback>
}
 8002252:	e03d      	b.n	80022d0 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00e      	beq.n	800227e <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8002260:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 8002266:	f023 0304 	bic.w	r3, r3, #4
 800226a:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 8002272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002276:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8002278:	f7ff fec8 	bl	800200c <Capture_TIM5_Ch2_Callback>
}
 800227c:	e028      	b.n	80022d0 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00e      	beq.n	80022a8 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 8002290:	f023 0308 	bic.w	r3, r3, #8
 8002294:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 800229c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022a0:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 80022a2:	f7ff fe9b 	bl	8001fdc <Capture_TIM4_Ch3_Callback>
}
 80022a6:	e013      	b.n	80022d0 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00d      	beq.n	80022d0 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	4a06      	ldr	r2, [pc, #24]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 80022ba:	f023 0310 	bic.w	r3, r3, #16
 80022be:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	4a03      	ldr	r2, [pc, #12]	; (80022d4 <TIM4_IRQHandler+0xcc>)
 80022c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022ca:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 80022cc:	f7ff fe8e 	bl	8001fec <Capture_TIM4_Ch4_Callback>
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40000800 	.word	0x40000800

080022d8 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 80022e8:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	4a2d      	ldr	r2, [pc, #180]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 80022f4:	f7ff fbdc 	bl	8001ab0 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 80022f8:	e052      	b.n	80023a0 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 80022fa:	4b2a      	ldr	r3, [pc, #168]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00e      	beq.n	8002324 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 8002306:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	4a26      	ldr	r2, [pc, #152]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 800230c:	f023 0302 	bic.w	r3, r3, #2
 8002310:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	4a23      	ldr	r2, [pc, #140]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 8002318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800231c:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 800231e:	f7ff fe6d 	bl	8001ffc <Capture_TIM5_Ch1_Callback>
}
 8002322:	e03d      	b.n	80023a0 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00e      	beq.n	800234e <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8002330:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 8002336:	f023 0304 	bic.w	r3, r3, #4
 800233a:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 8002342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002346:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8002348:	f7ff fe60 	bl	800200c <Capture_TIM5_Ch2_Callback>
}
 800234c:	e028      	b.n	80023a0 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00e      	beq.n	8002378 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 800235a:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 8002360:	f023 0308 	bic.w	r3, r3, #8
 8002364:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	4a0e      	ldr	r2, [pc, #56]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 800236c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002370:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 8002372:	f7ff fe53 	bl	800201c <Capture_TIM5_Ch3_Callback>
}
 8002376:	e013      	b.n	80023a0 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00d      	beq.n	80023a0 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	4a06      	ldr	r2, [pc, #24]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 800238a:	f023 0310 	bic.w	r3, r3, #16
 800238e:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	4a03      	ldr	r2, [pc, #12]	; (80023a4 <TIM5_IRQHandler+0xcc>)
 8002396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800239a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 800239c:	f7ff fe46 	bl	800202c <Capture_TIM5_Ch4_Callback>
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40000c00 	.word	0x40000c00

080023a8 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <__NVIC_EnableIRQ>:
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db0b      	blt.n	800241a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	4907      	ldr	r1, [pc, #28]	; (8002428 <__NVIC_EnableIRQ+0x38>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e100 	.word	0xe000e100

0800242c <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f001 f825 	bl	8003488 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 800243e:	4b96      	ldr	r3, [pc, #600]	; (8002698 <extInt_Config+0x26c>)
 8002440:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002444:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	791b      	ldrb	r3, [r3, #4]
 800244c:	2b0f      	cmp	r3, #15
 800244e:	f200 85cd 	bhi.w	8002fec <extInt_Config+0xbc0>
 8002452:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <extInt_Config+0x2c>)
 8002454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002458:	08002499 	.word	0x08002499
 800245c:	0800254f 	.word	0x0800254f
 8002460:	08002605 	.word	0x08002605
 8002464:	080026db 	.word	0x080026db
 8002468:	08002791 	.word	0x08002791
 800246c:	0800283f 	.word	0x0800283f
 8002470:	08002905 	.word	0x08002905
 8002474:	080029ad 	.word	0x080029ad
 8002478:	08002a55 	.word	0x08002a55
 800247c:	08002afd 	.word	0x08002afd
 8002480:	08002bc3 	.word	0x08002bc3
 8002484:	08002c6b 	.word	0x08002c6b
 8002488:	08002d13 	.word	0x08002d13
 800248c:	08002dd9 	.word	0x08002dd9
 8002490:	08002e7f 	.word	0x08002e7f
 8002494:	08002f27 	.word	0x08002f27
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8002498:	4b80      	ldr	r3, [pc, #512]	; (800269c <extInt_Config+0x270>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a7f      	ldr	r2, [pc, #508]	; (800269c <extInt_Config+0x270>)
 800249e:	f023 030f 	bic.w	r3, r3, #15
 80024a2:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a7d      	ldr	r2, [pc, #500]	; (80026a0 <extInt_Config+0x274>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d105      	bne.n	80024bc <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80024b0:	4b7a      	ldr	r3, [pc, #488]	; (800269c <extInt_Config+0x270>)
 80024b2:	4a7a      	ldr	r2, [pc, #488]	; (800269c <extInt_Config+0x270>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80024b8:	f000 bd9a 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a78      	ldr	r2, [pc, #480]	; (80026a4 <extInt_Config+0x278>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d107      	bne.n	80024d8 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80024c8:	4b74      	ldr	r3, [pc, #464]	; (800269c <extInt_Config+0x270>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a73      	ldr	r2, [pc, #460]	; (800269c <extInt_Config+0x270>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6093      	str	r3, [r2, #8]
					break;
 80024d4:	f000 bd8c 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a72      	ldr	r2, [pc, #456]	; (80026a8 <extInt_Config+0x27c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d107      	bne.n	80024f4 <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 80024e4:	4b6d      	ldr	r3, [pc, #436]	; (800269c <extInt_Config+0x270>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a6c      	ldr	r2, [pc, #432]	; (800269c <extInt_Config+0x270>)
 80024ea:	f043 0302 	orr.w	r3, r3, #2
 80024ee:	6093      	str	r3, [r2, #8]
					break;
 80024f0:	f000 bd7e 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a6c      	ldr	r2, [pc, #432]	; (80026ac <extInt_Config+0x280>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d107      	bne.n	8002510 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8002500:	4b66      	ldr	r3, [pc, #408]	; (800269c <extInt_Config+0x270>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a65      	ldr	r2, [pc, #404]	; (800269c <extInt_Config+0x270>)
 8002506:	f043 0303 	orr.w	r3, r3, #3
 800250a:	6093      	str	r3, [r2, #8]
					break;
 800250c:	f000 bd70 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a66      	ldr	r2, [pc, #408]	; (80026b0 <extInt_Config+0x284>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d107      	bne.n	800252c <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 800251c:	4b5f      	ldr	r3, [pc, #380]	; (800269c <extInt_Config+0x270>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	4a5e      	ldr	r2, [pc, #376]	; (800269c <extInt_Config+0x270>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	6093      	str	r3, [r2, #8]
					break;
 8002528:	f000 bd62 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a60      	ldr	r2, [pc, #384]	; (80026b4 <extInt_Config+0x288>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d107      	bne.n	8002548 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8002538:	4b58      	ldr	r3, [pc, #352]	; (800269c <extInt_Config+0x270>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	4a57      	ldr	r2, [pc, #348]	; (800269c <extInt_Config+0x270>)
 800253e:	f043 0307 	orr.w	r3, r3, #7
 8002542:	6093      	str	r3, [r2, #8]
					break;
 8002544:	f000 bd54 	b.w	8002ff0 <extInt_Config+0xbc4>
						__NOP();
 8002548:	bf00      	nop
					break;
 800254a:	f000 bd51 	b.w	8002ff0 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 800254e:	4b53      	ldr	r3, [pc, #332]	; (800269c <extInt_Config+0x270>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4a52      	ldr	r2, [pc, #328]	; (800269c <extInt_Config+0x270>)
 8002554:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002558:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a4f      	ldr	r2, [pc, #316]	; (80026a0 <extInt_Config+0x274>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d105      	bne.n	8002572 <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8002566:	4b4d      	ldr	r3, [pc, #308]	; (800269c <extInt_Config+0x270>)
 8002568:	4a4c      	ldr	r2, [pc, #304]	; (800269c <extInt_Config+0x270>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 800256e:	f000 bd3f 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a4a      	ldr	r2, [pc, #296]	; (80026a4 <extInt_Config+0x278>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d107      	bne.n	800258e <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 800257e:	4b47      	ldr	r3, [pc, #284]	; (800269c <extInt_Config+0x270>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	4a46      	ldr	r2, [pc, #280]	; (800269c <extInt_Config+0x270>)
 8002584:	f043 0310 	orr.w	r3, r3, #16
 8002588:	6093      	str	r3, [r2, #8]
					break;
 800258a:	f000 bd31 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a44      	ldr	r2, [pc, #272]	; (80026a8 <extInt_Config+0x27c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d107      	bne.n	80025aa <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 800259a:	4b40      	ldr	r3, [pc, #256]	; (800269c <extInt_Config+0x270>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	4a3f      	ldr	r2, [pc, #252]	; (800269c <extInt_Config+0x270>)
 80025a0:	f043 0320 	orr.w	r3, r3, #32
 80025a4:	6093      	str	r3, [r2, #8]
					break;
 80025a6:	f000 bd23 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a3e      	ldr	r2, [pc, #248]	; (80026ac <extInt_Config+0x280>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d107      	bne.n	80025c6 <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80025b6:	4b39      	ldr	r3, [pc, #228]	; (800269c <extInt_Config+0x270>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	4a38      	ldr	r2, [pc, #224]	; (800269c <extInt_Config+0x270>)
 80025bc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80025c0:	6093      	str	r3, [r2, #8]
					break;
 80025c2:	f000 bd15 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a38      	ldr	r2, [pc, #224]	; (80026b0 <extInt_Config+0x284>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d107      	bne.n	80025e2 <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 80025d2:	4b32      	ldr	r3, [pc, #200]	; (800269c <extInt_Config+0x270>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	4a31      	ldr	r2, [pc, #196]	; (800269c <extInt_Config+0x270>)
 80025d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025dc:	6093      	str	r3, [r2, #8]
					break;
 80025de:	f000 bd07 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a32      	ldr	r2, [pc, #200]	; (80026b4 <extInt_Config+0x288>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d107      	bne.n	80025fe <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 80025ee:	4b2b      	ldr	r3, [pc, #172]	; (800269c <extInt_Config+0x270>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	4a2a      	ldr	r2, [pc, #168]	; (800269c <extInt_Config+0x270>)
 80025f4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80025f8:	6093      	str	r3, [r2, #8]
					break;
 80025fa:	f000 bcf9 	b.w	8002ff0 <extInt_Config+0xbc4>
						__NOP();
 80025fe:	bf00      	nop
					break;
 8002600:	f000 bcf6 	b.w	8002ff0 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8002604:	4b25      	ldr	r3, [pc, #148]	; (800269c <extInt_Config+0x270>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4a24      	ldr	r2, [pc, #144]	; (800269c <extInt_Config+0x270>)
 800260a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800260e:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a22      	ldr	r2, [pc, #136]	; (80026a0 <extInt_Config+0x274>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d105      	bne.n	8002628 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 800261c:	4b1f      	ldr	r3, [pc, #124]	; (800269c <extInt_Config+0x270>)
 800261e:	4a1f      	ldr	r2, [pc, #124]	; (800269c <extInt_Config+0x270>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8002624:	f000 bce4 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <extInt_Config+0x278>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d107      	bne.n	8002644 <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8002634:	4b19      	ldr	r3, [pc, #100]	; (800269c <extInt_Config+0x270>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	4a18      	ldr	r2, [pc, #96]	; (800269c <extInt_Config+0x270>)
 800263a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263e:	6093      	str	r3, [r2, #8]
					break;
 8002640:	f000 bcd6 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a17      	ldr	r2, [pc, #92]	; (80026a8 <extInt_Config+0x27c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d107      	bne.n	8002660 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <extInt_Config+0x270>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	4a11      	ldr	r2, [pc, #68]	; (800269c <extInt_Config+0x270>)
 8002656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800265a:	6093      	str	r3, [r2, #8]
					break;
 800265c:	f000 bcc8 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a11      	ldr	r2, [pc, #68]	; (80026ac <extInt_Config+0x280>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d107      	bne.n	800267c <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <extInt_Config+0x270>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	4a0a      	ldr	r2, [pc, #40]	; (800269c <extInt_Config+0x270>)
 8002672:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002676:	6093      	str	r3, [r2, #8]
					break;
 8002678:	f000 bcba 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <extInt_Config+0x284>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d117      	bne.n	80026b8 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <extInt_Config+0x270>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a03      	ldr	r2, [pc, #12]	; (800269c <extInt_Config+0x270>)
 800268e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002692:	6093      	str	r3, [r2, #8]
					break;
 8002694:	f000 bcac 	b.w	8002ff0 <extInt_Config+0xbc4>
 8002698:	40023800 	.word	0x40023800
 800269c:	40013800 	.word	0x40013800
 80026a0:	40020000 	.word	0x40020000
 80026a4:	40020400 	.word	0x40020400
 80026a8:	40020800 	.word	0x40020800
 80026ac:	40020c00 	.word	0x40020c00
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a8a      	ldr	r2, [pc, #552]	; (80028e8 <extInt_Config+0x4bc>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d107      	bne.n	80026d4 <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80026c4:	4b89      	ldr	r3, [pc, #548]	; (80028ec <extInt_Config+0x4c0>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4a88      	ldr	r2, [pc, #544]	; (80028ec <extInt_Config+0x4c0>)
 80026ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ce:	6093      	str	r3, [r2, #8]
					break;
 80026d0:	f000 bc8e 	b.w	8002ff0 <extInt_Config+0xbc4>
						__NOP();
 80026d4:	bf00      	nop
					break;
 80026d6:	f000 bc8b 	b.w	8002ff0 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 80026da:	4b84      	ldr	r3, [pc, #528]	; (80028ec <extInt_Config+0x4c0>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	4a83      	ldr	r2, [pc, #524]	; (80028ec <extInt_Config+0x4c0>)
 80026e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026e4:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a80      	ldr	r2, [pc, #512]	; (80028f0 <extInt_Config+0x4c4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d105      	bne.n	80026fe <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 80026f2:	4b7e      	ldr	r3, [pc, #504]	; (80028ec <extInt_Config+0x4c0>)
 80026f4:	4a7d      	ldr	r2, [pc, #500]	; (80028ec <extInt_Config+0x4c0>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80026fa:	f000 bc79 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a7b      	ldr	r2, [pc, #492]	; (80028f4 <extInt_Config+0x4c8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d107      	bne.n	800271a <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 800270a:	4b78      	ldr	r3, [pc, #480]	; (80028ec <extInt_Config+0x4c0>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	4a77      	ldr	r2, [pc, #476]	; (80028ec <extInt_Config+0x4c0>)
 8002710:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002714:	6093      	str	r3, [r2, #8]
					break;
 8002716:	f000 bc6b 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a75      	ldr	r2, [pc, #468]	; (80028f8 <extInt_Config+0x4cc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d107      	bne.n	8002736 <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8002726:	4b71      	ldr	r3, [pc, #452]	; (80028ec <extInt_Config+0x4c0>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	4a70      	ldr	r2, [pc, #448]	; (80028ec <extInt_Config+0x4c0>)
 800272c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002730:	6093      	str	r3, [r2, #8]
					break;
 8002732:	f000 bc5d 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a6f      	ldr	r2, [pc, #444]	; (80028fc <extInt_Config+0x4d0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d107      	bne.n	8002752 <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8002742:	4b6a      	ldr	r3, [pc, #424]	; (80028ec <extInt_Config+0x4c0>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	4a69      	ldr	r2, [pc, #420]	; (80028ec <extInt_Config+0x4c0>)
 8002748:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800274c:	6093      	str	r3, [r2, #8]
					break;
 800274e:	f000 bc4f 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a69      	ldr	r2, [pc, #420]	; (8002900 <extInt_Config+0x4d4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d107      	bne.n	800276e <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 800275e:	4b63      	ldr	r3, [pc, #396]	; (80028ec <extInt_Config+0x4c0>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	4a62      	ldr	r2, [pc, #392]	; (80028ec <extInt_Config+0x4c0>)
 8002764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002768:	6093      	str	r3, [r2, #8]
					break;
 800276a:	f000 bc41 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a5c      	ldr	r2, [pc, #368]	; (80028e8 <extInt_Config+0x4bc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d107      	bne.n	800278a <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 800277a:	4b5c      	ldr	r3, [pc, #368]	; (80028ec <extInt_Config+0x4c0>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	4a5b      	ldr	r2, [pc, #364]	; (80028ec <extInt_Config+0x4c0>)
 8002780:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002784:	6093      	str	r3, [r2, #8]
					break;
 8002786:	f000 bc33 	b.w	8002ff0 <extInt_Config+0xbc4>
						__NOP();
 800278a:	bf00      	nop
					break;
 800278c:	f000 bc30 	b.w	8002ff0 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8002790:	4b56      	ldr	r3, [pc, #344]	; (80028ec <extInt_Config+0x4c0>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4a55      	ldr	r2, [pc, #340]	; (80028ec <extInt_Config+0x4c0>)
 8002796:	f023 030f 	bic.w	r3, r3, #15
 800279a:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a53      	ldr	r2, [pc, #332]	; (80028f0 <extInt_Config+0x4c4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d105      	bne.n	80027b4 <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80027a8:	4b50      	ldr	r3, [pc, #320]	; (80028ec <extInt_Config+0x4c0>)
 80027aa:	4a50      	ldr	r2, [pc, #320]	; (80028ec <extInt_Config+0x4c0>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80027b0:	f000 bc1e 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a4e      	ldr	r2, [pc, #312]	; (80028f4 <extInt_Config+0x4c8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d107      	bne.n	80027d0 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80027c0:	4b4a      	ldr	r3, [pc, #296]	; (80028ec <extInt_Config+0x4c0>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a49      	ldr	r2, [pc, #292]	; (80028ec <extInt_Config+0x4c0>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	60d3      	str	r3, [r2, #12]
					break;
 80027cc:	f000 bc10 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a48      	ldr	r2, [pc, #288]	; (80028f8 <extInt_Config+0x4cc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d107      	bne.n	80027ec <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 80027dc:	4b43      	ldr	r3, [pc, #268]	; (80028ec <extInt_Config+0x4c0>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a42      	ldr	r2, [pc, #264]	; (80028ec <extInt_Config+0x4c0>)
 80027e2:	f043 0302 	orr.w	r3, r3, #2
 80027e6:	60d3      	str	r3, [r2, #12]
					break;
 80027e8:	f000 bc02 	b.w	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a42      	ldr	r2, [pc, #264]	; (80028fc <extInt_Config+0x4d0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d106      	bne.n	8002806 <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 80027f8:	4b3c      	ldr	r3, [pc, #240]	; (80028ec <extInt_Config+0x4c0>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a3b      	ldr	r2, [pc, #236]	; (80028ec <extInt_Config+0x4c0>)
 80027fe:	f043 0303 	orr.w	r3, r3, #3
 8002802:	60d3      	str	r3, [r2, #12]
					break;
 8002804:	e3f4      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a3c      	ldr	r2, [pc, #240]	; (8002900 <extInt_Config+0x4d4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d106      	bne.n	8002820 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8002812:	4b36      	ldr	r3, [pc, #216]	; (80028ec <extInt_Config+0x4c0>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	4a35      	ldr	r2, [pc, #212]	; (80028ec <extInt_Config+0x4c0>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	60d3      	str	r3, [r2, #12]
					break;
 800281e:	e3e7      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a30      	ldr	r2, [pc, #192]	; (80028e8 <extInt_Config+0x4bc>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d106      	bne.n	800283a <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 800282c:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <extInt_Config+0x4c0>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4a2e      	ldr	r2, [pc, #184]	; (80028ec <extInt_Config+0x4c0>)
 8002832:	f043 0307 	orr.w	r3, r3, #7
 8002836:	60d3      	str	r3, [r2, #12]
					break;
 8002838:	e3da      	b.n	8002ff0 <extInt_Config+0xbc4>
						__NOP();
 800283a:	bf00      	nop
					break;
 800283c:	e3d8      	b.n	8002ff0 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 800283e:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <extInt_Config+0x4c0>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	4a2a      	ldr	r2, [pc, #168]	; (80028ec <extInt_Config+0x4c0>)
 8002844:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002848:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a27      	ldr	r2, [pc, #156]	; (80028f0 <extInt_Config+0x4c4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d104      	bne.n	8002860 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8002856:	4b25      	ldr	r3, [pc, #148]	; (80028ec <extInt_Config+0x4c0>)
 8002858:	4a24      	ldr	r2, [pc, #144]	; (80028ec <extInt_Config+0x4c0>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 800285e:	e3c7      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a23      	ldr	r2, [pc, #140]	; (80028f4 <extInt_Config+0x4c8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d106      	bne.n	800287a <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 800286c:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <extInt_Config+0x4c0>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4a1e      	ldr	r2, [pc, #120]	; (80028ec <extInt_Config+0x4c0>)
 8002872:	f043 0310 	orr.w	r3, r3, #16
 8002876:	60d3      	str	r3, [r2, #12]
					break;
 8002878:	e3ba      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a1d      	ldr	r2, [pc, #116]	; (80028f8 <extInt_Config+0x4cc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d106      	bne.n	8002894 <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8002886:	4b19      	ldr	r3, [pc, #100]	; (80028ec <extInt_Config+0x4c0>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	4a18      	ldr	r2, [pc, #96]	; (80028ec <extInt_Config+0x4c0>)
 800288c:	f043 0320 	orr.w	r3, r3, #32
 8002890:	60d3      	str	r3, [r2, #12]
					break;
 8002892:	e3ad      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a18      	ldr	r2, [pc, #96]	; (80028fc <extInt_Config+0x4d0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d106      	bne.n	80028ae <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <extInt_Config+0x4c0>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a11      	ldr	r2, [pc, #68]	; (80028ec <extInt_Config+0x4c0>)
 80028a6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80028aa:	60d3      	str	r3, [r2, #12]
					break;
 80028ac:	e3a0      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a12      	ldr	r2, [pc, #72]	; (8002900 <extInt_Config+0x4d4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d106      	bne.n	80028c8 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80028ba:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <extInt_Config+0x4c0>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <extInt_Config+0x4c0>)
 80028c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028c4:	60d3      	str	r3, [r2, #12]
					break;
 80028c6:	e393      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a06      	ldr	r2, [pc, #24]	; (80028e8 <extInt_Config+0x4bc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d106      	bne.n	80028e2 <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <extInt_Config+0x4c0>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a04      	ldr	r2, [pc, #16]	; (80028ec <extInt_Config+0x4c0>)
 80028da:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80028de:	60d3      	str	r3, [r2, #12]
					break;
 80028e0:	e386      	b.n	8002ff0 <extInt_Config+0xbc4>
						__NOP();
 80028e2:	bf00      	nop
					break;
 80028e4:	e384      	b.n	8002ff0 <extInt_Config+0xbc4>
 80028e6:	bf00      	nop
 80028e8:	40021c00 	.word	0x40021c00
 80028ec:	40013800 	.word	0x40013800
 80028f0:	40020000 	.word	0x40020000
 80028f4:	40020400 	.word	0x40020400
 80028f8:	40020800 	.word	0x40020800
 80028fc:	40020c00 	.word	0x40020c00
 8002900:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8002904:	4b86      	ldr	r3, [pc, #536]	; (8002b20 <extInt_Config+0x6f4>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4a85      	ldr	r2, [pc, #532]	; (8002b20 <extInt_Config+0x6f4>)
 800290a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800290e:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a83      	ldr	r2, [pc, #524]	; (8002b24 <extInt_Config+0x6f8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d104      	bne.n	8002926 <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 800291c:	4b80      	ldr	r3, [pc, #512]	; (8002b20 <extInt_Config+0x6f4>)
 800291e:	4a80      	ldr	r2, [pc, #512]	; (8002b20 <extInt_Config+0x6f4>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8002924:	e364      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a7e      	ldr	r2, [pc, #504]	; (8002b28 <extInt_Config+0x6fc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d106      	bne.n	8002940 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8002932:	4b7b      	ldr	r3, [pc, #492]	; (8002b20 <extInt_Config+0x6f4>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	4a7a      	ldr	r2, [pc, #488]	; (8002b20 <extInt_Config+0x6f4>)
 8002938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293c:	60d3      	str	r3, [r2, #12]
					break;
 800293e:	e357      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a79      	ldr	r2, [pc, #484]	; (8002b2c <extInt_Config+0x700>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d106      	bne.n	800295a <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 800294c:	4b74      	ldr	r3, [pc, #464]	; (8002b20 <extInt_Config+0x6f4>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a73      	ldr	r2, [pc, #460]	; (8002b20 <extInt_Config+0x6f4>)
 8002952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002956:	60d3      	str	r3, [r2, #12]
					break;
 8002958:	e34a      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a73      	ldr	r2, [pc, #460]	; (8002b30 <extInt_Config+0x704>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d106      	bne.n	8002974 <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8002966:	4b6e      	ldr	r3, [pc, #440]	; (8002b20 <extInt_Config+0x6f4>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	4a6d      	ldr	r2, [pc, #436]	; (8002b20 <extInt_Config+0x6f4>)
 800296c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002970:	60d3      	str	r3, [r2, #12]
					break;
 8002972:	e33d      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a6e      	ldr	r2, [pc, #440]	; (8002b34 <extInt_Config+0x708>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d106      	bne.n	800298e <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8002980:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <extInt_Config+0x6f4>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4a66      	ldr	r2, [pc, #408]	; (8002b20 <extInt_Config+0x6f4>)
 8002986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298a:	60d3      	str	r3, [r2, #12]
					break;
 800298c:	e330      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a68      	ldr	r2, [pc, #416]	; (8002b38 <extInt_Config+0x70c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d106      	bne.n	80029a8 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 800299a:	4b61      	ldr	r3, [pc, #388]	; (8002b20 <extInt_Config+0x6f4>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	4a60      	ldr	r2, [pc, #384]	; (8002b20 <extInt_Config+0x6f4>)
 80029a0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029a4:	60d3      	str	r3, [r2, #12]
					break;
 80029a6:	e323      	b.n	8002ff0 <extInt_Config+0xbc4>
						__NOP();
 80029a8:	bf00      	nop
					break;
 80029aa:	e321      	b.n	8002ff0 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 80029ac:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <extInt_Config+0x6f4>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a5b      	ldr	r2, [pc, #364]	; (8002b20 <extInt_Config+0x6f4>)
 80029b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029b6:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a59      	ldr	r2, [pc, #356]	; (8002b24 <extInt_Config+0x6f8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d104      	bne.n	80029ce <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80029c4:	4b56      	ldr	r3, [pc, #344]	; (8002b20 <extInt_Config+0x6f4>)
 80029c6:	4a56      	ldr	r2, [pc, #344]	; (8002b20 <extInt_Config+0x6f4>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80029cc:	e310      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a54      	ldr	r2, [pc, #336]	; (8002b28 <extInt_Config+0x6fc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d106      	bne.n	80029e8 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 80029da:	4b51      	ldr	r3, [pc, #324]	; (8002b20 <extInt_Config+0x6f4>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	4a50      	ldr	r2, [pc, #320]	; (8002b20 <extInt_Config+0x6f4>)
 80029e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029e4:	60d3      	str	r3, [r2, #12]
					break;
 80029e6:	e303      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a4f      	ldr	r2, [pc, #316]	; (8002b2c <extInt_Config+0x700>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d106      	bne.n	8002a02 <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 80029f4:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <extInt_Config+0x6f4>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4a49      	ldr	r2, [pc, #292]	; (8002b20 <extInt_Config+0x6f4>)
 80029fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029fe:	60d3      	str	r3, [r2, #12]
					break;
 8002a00:	e2f6      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a49      	ldr	r2, [pc, #292]	; (8002b30 <extInt_Config+0x704>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d106      	bne.n	8002a1c <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8002a0e:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <extInt_Config+0x6f4>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	4a43      	ldr	r2, [pc, #268]	; (8002b20 <extInt_Config+0x6f4>)
 8002a14:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002a18:	60d3      	str	r3, [r2, #12]
					break;
 8002a1a:	e2e9      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a44      	ldr	r2, [pc, #272]	; (8002b34 <extInt_Config+0x708>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d106      	bne.n	8002a36 <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8002a28:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <extInt_Config+0x6f4>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a3c      	ldr	r2, [pc, #240]	; (8002b20 <extInt_Config+0x6f4>)
 8002a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a32:	60d3      	str	r3, [r2, #12]
					break;
 8002a34:	e2dc      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a3e      	ldr	r2, [pc, #248]	; (8002b38 <extInt_Config+0x70c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d106      	bne.n	8002a50 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8002a42:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <extInt_Config+0x6f4>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	4a36      	ldr	r2, [pc, #216]	; (8002b20 <extInt_Config+0x6f4>)
 8002a48:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002a4c:	60d3      	str	r3, [r2, #12]
					break;
 8002a4e:	e2cf      	b.n	8002ff0 <extInt_Config+0xbc4>
						__NOP();
 8002a50:	bf00      	nop
					break;
 8002a52:	e2cd      	b.n	8002ff0 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8002a54:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <extInt_Config+0x6f4>)
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	4a31      	ldr	r2, [pc, #196]	; (8002b20 <extInt_Config+0x6f4>)
 8002a5a:	f023 030f 	bic.w	r3, r3, #15
 8002a5e:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a2f      	ldr	r2, [pc, #188]	; (8002b24 <extInt_Config+0x6f8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d104      	bne.n	8002a76 <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8002a6c:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <extInt_Config+0x6f4>)
 8002a6e:	4a2c      	ldr	r2, [pc, #176]	; (8002b20 <extInt_Config+0x6f4>)
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002a74:	e2bc      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a2a      	ldr	r2, [pc, #168]	; (8002b28 <extInt_Config+0x6fc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d106      	bne.n	8002a90 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8002a82:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <extInt_Config+0x6f4>)
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <extInt_Config+0x6f4>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6113      	str	r3, [r2, #16]
					break;
 8002a8e:	e2af      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a25      	ldr	r2, [pc, #148]	; (8002b2c <extInt_Config+0x700>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d106      	bne.n	8002aaa <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8002a9c:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <extInt_Config+0x6f4>)
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	4a1f      	ldr	r2, [pc, #124]	; (8002b20 <extInt_Config+0x6f4>)
 8002aa2:	f043 0302 	orr.w	r3, r3, #2
 8002aa6:	6113      	str	r3, [r2, #16]
					break;
 8002aa8:	e2a2      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	; (8002b30 <extInt_Config+0x704>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d106      	bne.n	8002ac4 <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <extInt_Config+0x6f4>)
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	4a19      	ldr	r2, [pc, #100]	; (8002b20 <extInt_Config+0x6f4>)
 8002abc:	f043 0303 	orr.w	r3, r3, #3
 8002ac0:	6113      	str	r3, [r2, #16]
					break;
 8002ac2:	e295      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1a      	ldr	r2, [pc, #104]	; (8002b34 <extInt_Config+0x708>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d106      	bne.n	8002ade <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <extInt_Config+0x6f4>)
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <extInt_Config+0x6f4>)
 8002ad6:	f043 0304 	orr.w	r3, r3, #4
 8002ada:	6113      	str	r3, [r2, #16]
					break;
 8002adc:	e288      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <extInt_Config+0x70c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d106      	bne.n	8002af8 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <extInt_Config+0x6f4>)
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <extInt_Config+0x6f4>)
 8002af0:	f043 0307 	orr.w	r3, r3, #7
 8002af4:	6113      	str	r3, [r2, #16]
					break;
 8002af6:	e27b      	b.n	8002ff0 <extInt_Config+0xbc4>
						__NOP();
 8002af8:	bf00      	nop
					break;
 8002afa:	e279      	b.n	8002ff0 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <extInt_Config+0x6f4>)
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	4a07      	ldr	r2, [pc, #28]	; (8002b20 <extInt_Config+0x6f4>)
 8002b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b06:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a05      	ldr	r2, [pc, #20]	; (8002b24 <extInt_Config+0x6f8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d113      	bne.n	8002b3c <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8002b14:	4b02      	ldr	r3, [pc, #8]	; (8002b20 <extInt_Config+0x6f4>)
 8002b16:	4a02      	ldr	r2, [pc, #8]	; (8002b20 <extInt_Config+0x6f4>)
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002b1c:	e268      	b.n	8002ff0 <extInt_Config+0xbc4>
 8002b1e:	bf00      	nop
 8002b20:	40013800 	.word	0x40013800
 8002b24:	40020000 	.word	0x40020000
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	40020800 	.word	0x40020800
 8002b30:	40020c00 	.word	0x40020c00
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a83      	ldr	r2, [pc, #524]	; (8002d50 <extInt_Config+0x924>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d106      	bne.n	8002b56 <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8002b48:	4b82      	ldr	r3, [pc, #520]	; (8002d54 <extInt_Config+0x928>)
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	4a81      	ldr	r2, [pc, #516]	; (8002d54 <extInt_Config+0x928>)
 8002b4e:	f043 0310 	orr.w	r3, r3, #16
 8002b52:	6113      	str	r3, [r2, #16]
					break;
 8002b54:	e24c      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a7e      	ldr	r2, [pc, #504]	; (8002d58 <extInt_Config+0x92c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d106      	bne.n	8002b70 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8002b62:	4b7c      	ldr	r3, [pc, #496]	; (8002d54 <extInt_Config+0x928>)
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	4a7b      	ldr	r2, [pc, #492]	; (8002d54 <extInt_Config+0x928>)
 8002b68:	f043 0320 	orr.w	r3, r3, #32
 8002b6c:	6113      	str	r3, [r2, #16]
					break;
 8002b6e:	e23f      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a79      	ldr	r2, [pc, #484]	; (8002d5c <extInt_Config+0x930>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d106      	bne.n	8002b8a <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8002b7c:	4b75      	ldr	r3, [pc, #468]	; (8002d54 <extInt_Config+0x928>)
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	4a74      	ldr	r2, [pc, #464]	; (8002d54 <extInt_Config+0x928>)
 8002b82:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002b86:	6113      	str	r3, [r2, #16]
					break;
 8002b88:	e232      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a73      	ldr	r2, [pc, #460]	; (8002d60 <extInt_Config+0x934>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d106      	bne.n	8002ba4 <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8002b96:	4b6f      	ldr	r3, [pc, #444]	; (8002d54 <extInt_Config+0x928>)
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	4a6e      	ldr	r2, [pc, #440]	; (8002d54 <extInt_Config+0x928>)
 8002b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba0:	6113      	str	r3, [r2, #16]
					break;
 8002ba2:	e225      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a6e      	ldr	r2, [pc, #440]	; (8002d64 <extInt_Config+0x938>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d106      	bne.n	8002bbe <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8002bb0:	4b68      	ldr	r3, [pc, #416]	; (8002d54 <extInt_Config+0x928>)
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	4a67      	ldr	r2, [pc, #412]	; (8002d54 <extInt_Config+0x928>)
 8002bb6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002bba:	6113      	str	r3, [r2, #16]
					break;
 8002bbc:	e218      	b.n	8002ff0 <extInt_Config+0xbc4>
						__NOP();
 8002bbe:	bf00      	nop
					break;
 8002bc0:	e216      	b.n	8002ff0 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8002bc2:	4b64      	ldr	r3, [pc, #400]	; (8002d54 <extInt_Config+0x928>)
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	4a63      	ldr	r2, [pc, #396]	; (8002d54 <extInt_Config+0x928>)
 8002bc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bcc:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a64      	ldr	r2, [pc, #400]	; (8002d68 <extInt_Config+0x93c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d104      	bne.n	8002be4 <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8002bda:	4b5e      	ldr	r3, [pc, #376]	; (8002d54 <extInt_Config+0x928>)
 8002bdc:	4a5d      	ldr	r2, [pc, #372]	; (8002d54 <extInt_Config+0x928>)
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002be2:	e205      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a59      	ldr	r2, [pc, #356]	; (8002d50 <extInt_Config+0x924>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d106      	bne.n	8002bfe <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8002bf0:	4b58      	ldr	r3, [pc, #352]	; (8002d54 <extInt_Config+0x928>)
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	4a57      	ldr	r2, [pc, #348]	; (8002d54 <extInt_Config+0x928>)
 8002bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfa:	6113      	str	r3, [r2, #16]
					break;
 8002bfc:	e1f8      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a54      	ldr	r2, [pc, #336]	; (8002d58 <extInt_Config+0x92c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d106      	bne.n	8002c18 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8002c0a:	4b52      	ldr	r3, [pc, #328]	; (8002d54 <extInt_Config+0x928>)
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	4a51      	ldr	r2, [pc, #324]	; (8002d54 <extInt_Config+0x928>)
 8002c10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c14:	6113      	str	r3, [r2, #16]
					break;
 8002c16:	e1eb      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a4f      	ldr	r2, [pc, #316]	; (8002d5c <extInt_Config+0x930>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d106      	bne.n	8002c32 <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8002c24:	4b4b      	ldr	r3, [pc, #300]	; (8002d54 <extInt_Config+0x928>)
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	4a4a      	ldr	r2, [pc, #296]	; (8002d54 <extInt_Config+0x928>)
 8002c2a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002c2e:	6113      	str	r3, [r2, #16]
					break;
 8002c30:	e1de      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a49      	ldr	r2, [pc, #292]	; (8002d60 <extInt_Config+0x934>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d106      	bne.n	8002c4c <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8002c3e:	4b45      	ldr	r3, [pc, #276]	; (8002d54 <extInt_Config+0x928>)
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	4a44      	ldr	r2, [pc, #272]	; (8002d54 <extInt_Config+0x928>)
 8002c44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c48:	6113      	str	r3, [r2, #16]
					break;
 8002c4a:	e1d1      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a44      	ldr	r2, [pc, #272]	; (8002d64 <extInt_Config+0x938>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d106      	bne.n	8002c66 <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8002c58:	4b3e      	ldr	r3, [pc, #248]	; (8002d54 <extInt_Config+0x928>)
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	4a3d      	ldr	r2, [pc, #244]	; (8002d54 <extInt_Config+0x928>)
 8002c5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c62:	6113      	str	r3, [r2, #16]
					break;
 8002c64:	e1c4      	b.n	8002ff0 <extInt_Config+0xbc4>
						__NOP();
 8002c66:	bf00      	nop
					break;
 8002c68:	e1c2      	b.n	8002ff0 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8002c6a:	4b3a      	ldr	r3, [pc, #232]	; (8002d54 <extInt_Config+0x928>)
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	4a39      	ldr	r2, [pc, #228]	; (8002d54 <extInt_Config+0x928>)
 8002c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c74:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a3a      	ldr	r2, [pc, #232]	; (8002d68 <extInt_Config+0x93c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d104      	bne.n	8002c8c <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8002c82:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <extInt_Config+0x928>)
 8002c84:	4a33      	ldr	r2, [pc, #204]	; (8002d54 <extInt_Config+0x928>)
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002c8a:	e1b1      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2f      	ldr	r2, [pc, #188]	; (8002d50 <extInt_Config+0x924>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d106      	bne.n	8002ca6 <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8002c98:	4b2e      	ldr	r3, [pc, #184]	; (8002d54 <extInt_Config+0x928>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	4a2d      	ldr	r2, [pc, #180]	; (8002d54 <extInt_Config+0x928>)
 8002c9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ca2:	6113      	str	r3, [r2, #16]
					break;
 8002ca4:	e1a4      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a2a      	ldr	r2, [pc, #168]	; (8002d58 <extInt_Config+0x92c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d106      	bne.n	8002cc0 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8002cb2:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <extInt_Config+0x928>)
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	4a27      	ldr	r2, [pc, #156]	; (8002d54 <extInt_Config+0x928>)
 8002cb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cbc:	6113      	str	r3, [r2, #16]
					break;
 8002cbe:	e197      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a25      	ldr	r2, [pc, #148]	; (8002d5c <extInt_Config+0x930>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d106      	bne.n	8002cda <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8002ccc:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <extInt_Config+0x928>)
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	4a20      	ldr	r2, [pc, #128]	; (8002d54 <extInt_Config+0x928>)
 8002cd2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002cd6:	6113      	str	r3, [r2, #16]
					break;
 8002cd8:	e18a      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1f      	ldr	r2, [pc, #124]	; (8002d60 <extInt_Config+0x934>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d106      	bne.n	8002cf4 <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <extInt_Config+0x928>)
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	4a1a      	ldr	r2, [pc, #104]	; (8002d54 <extInt_Config+0x928>)
 8002cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf0:	6113      	str	r3, [r2, #16]
					break;
 8002cf2:	e17d      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1a      	ldr	r2, [pc, #104]	; (8002d64 <extInt_Config+0x938>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d106      	bne.n	8002d0e <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <extInt_Config+0x928>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	4a13      	ldr	r2, [pc, #76]	; (8002d54 <extInt_Config+0x928>)
 8002d06:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002d0a:	6113      	str	r3, [r2, #16]
					break;
 8002d0c:	e170      	b.n	8002ff0 <extInt_Config+0xbc4>
						__NOP();
 8002d0e:	bf00      	nop
					break;
 8002d10:	e16e      	b.n	8002ff0 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <extInt_Config+0x928>)
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	4a0f      	ldr	r2, [pc, #60]	; (8002d54 <extInt_Config+0x928>)
 8002d18:	f023 030f 	bic.w	r3, r3, #15
 8002d1c:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a10      	ldr	r2, [pc, #64]	; (8002d68 <extInt_Config+0x93c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d104      	bne.n	8002d34 <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <extInt_Config+0x928>)
 8002d2c:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <extInt_Config+0x928>)
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8002d32:	e15d      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <extInt_Config+0x924>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d115      	bne.n	8002d6c <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8002d40:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <extInt_Config+0x928>)
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	4a03      	ldr	r2, [pc, #12]	; (8002d54 <extInt_Config+0x928>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6153      	str	r3, [r2, #20]
					break;
 8002d4c:	e150      	b.n	8002ff0 <extInt_Config+0xbc4>
 8002d4e:	bf00      	nop
 8002d50:	40020400 	.word	0x40020400
 8002d54:	40013800 	.word	0x40013800
 8002d58:	40020800 	.word	0x40020800
 8002d5c:	40020c00 	.word	0x40020c00
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40021c00 	.word	0x40021c00
 8002d68:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a89      	ldr	r2, [pc, #548]	; (8002f98 <extInt_Config+0xb6c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d106      	bne.n	8002d86 <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8002d78:	4b88      	ldr	r3, [pc, #544]	; (8002f9c <extInt_Config+0xb70>)
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	4a87      	ldr	r2, [pc, #540]	; (8002f9c <extInt_Config+0xb70>)
 8002d7e:	f043 0302 	orr.w	r3, r3, #2
 8002d82:	6153      	str	r3, [r2, #20]
					break;
 8002d84:	e134      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a84      	ldr	r2, [pc, #528]	; (8002fa0 <extInt_Config+0xb74>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d106      	bne.n	8002da0 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8002d92:	4b82      	ldr	r3, [pc, #520]	; (8002f9c <extInt_Config+0xb70>)
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	4a81      	ldr	r2, [pc, #516]	; (8002f9c <extInt_Config+0xb70>)
 8002d98:	f043 0303 	orr.w	r3, r3, #3
 8002d9c:	6153      	str	r3, [r2, #20]
					break;
 8002d9e:	e127      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a7f      	ldr	r2, [pc, #508]	; (8002fa4 <extInt_Config+0xb78>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d106      	bne.n	8002dba <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8002dac:	4b7b      	ldr	r3, [pc, #492]	; (8002f9c <extInt_Config+0xb70>)
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	4a7a      	ldr	r2, [pc, #488]	; (8002f9c <extInt_Config+0xb70>)
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	6153      	str	r3, [r2, #20]
					break;
 8002db8:	e11a      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a79      	ldr	r2, [pc, #484]	; (8002fa8 <extInt_Config+0xb7c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d106      	bne.n	8002dd4 <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8002dc6:	4b75      	ldr	r3, [pc, #468]	; (8002f9c <extInt_Config+0xb70>)
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	4a74      	ldr	r2, [pc, #464]	; (8002f9c <extInt_Config+0xb70>)
 8002dcc:	f043 0307 	orr.w	r3, r3, #7
 8002dd0:	6153      	str	r3, [r2, #20]
					break;
 8002dd2:	e10d      	b.n	8002ff0 <extInt_Config+0xbc4>
						__NOP();
 8002dd4:	bf00      	nop
					break;
 8002dd6:	e10b      	b.n	8002ff0 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8002dd8:	4b70      	ldr	r3, [pc, #448]	; (8002f9c <extInt_Config+0xb70>)
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	4a6f      	ldr	r2, [pc, #444]	; (8002f9c <extInt_Config+0xb70>)
 8002dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002de2:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a70      	ldr	r2, [pc, #448]	; (8002fac <extInt_Config+0xb80>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d104      	bne.n	8002dfa <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8002df0:	4b6a      	ldr	r3, [pc, #424]	; (8002f9c <extInt_Config+0xb70>)
 8002df2:	4a6a      	ldr	r2, [pc, #424]	; (8002f9c <extInt_Config+0xb70>)
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	6153      	str	r3, [r2, #20]
 8002df8:	e041      	b.n	8002e7e <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a6b      	ldr	r2, [pc, #428]	; (8002fb0 <extInt_Config+0xb84>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d106      	bne.n	8002e14 <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8002e06:	4b65      	ldr	r3, [pc, #404]	; (8002f9c <extInt_Config+0xb70>)
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	4a64      	ldr	r2, [pc, #400]	; (8002f9c <extInt_Config+0xb70>)
 8002e0c:	f043 0310 	orr.w	r3, r3, #16
 8002e10:	6153      	str	r3, [r2, #20]
 8002e12:	e034      	b.n	8002e7e <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a5f      	ldr	r2, [pc, #380]	; (8002f98 <extInt_Config+0xb6c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d106      	bne.n	8002e2e <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8002e20:	4b5e      	ldr	r3, [pc, #376]	; (8002f9c <extInt_Config+0xb70>)
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	4a5d      	ldr	r2, [pc, #372]	; (8002f9c <extInt_Config+0xb70>)
 8002e26:	f043 0320 	orr.w	r3, r3, #32
 8002e2a:	6153      	str	r3, [r2, #20]
 8002e2c:	e027      	b.n	8002e7e <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a5a      	ldr	r2, [pc, #360]	; (8002fa0 <extInt_Config+0xb74>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d106      	bne.n	8002e48 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8002e3a:	4b58      	ldr	r3, [pc, #352]	; (8002f9c <extInt_Config+0xb70>)
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	4a57      	ldr	r2, [pc, #348]	; (8002f9c <extInt_Config+0xb70>)
 8002e40:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002e44:	6153      	str	r3, [r2, #20]
 8002e46:	e01a      	b.n	8002e7e <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a55      	ldr	r2, [pc, #340]	; (8002fa4 <extInt_Config+0xb78>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d106      	bne.n	8002e62 <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8002e54:	4b51      	ldr	r3, [pc, #324]	; (8002f9c <extInt_Config+0xb70>)
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	4a50      	ldr	r2, [pc, #320]	; (8002f9c <extInt_Config+0xb70>)
 8002e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e5e:	6153      	str	r3, [r2, #20]
 8002e60:	e00d      	b.n	8002e7e <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a4f      	ldr	r2, [pc, #316]	; (8002fa8 <extInt_Config+0xb7c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d106      	bne.n	8002e7c <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8002e6e:	4b4b      	ldr	r3, [pc, #300]	; (8002f9c <extInt_Config+0xb70>)
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	4a4a      	ldr	r2, [pc, #296]	; (8002f9c <extInt_Config+0xb70>)
 8002e74:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002e78:	6153      	str	r3, [r2, #20]
 8002e7a:	e000      	b.n	8002e7e <extInt_Config+0xa52>

					} else {
						__NOP();
 8002e7c:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8002e7e:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <extInt_Config+0xb70>)
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	4a46      	ldr	r2, [pc, #280]	; (8002f9c <extInt_Config+0xb70>)
 8002e84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e88:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a46      	ldr	r2, [pc, #280]	; (8002fac <extInt_Config+0xb80>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d104      	bne.n	8002ea0 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8002e96:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <extInt_Config+0xb70>)
 8002e98:	4a40      	ldr	r2, [pc, #256]	; (8002f9c <extInt_Config+0xb70>)
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8002e9e:	e0a7      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a42      	ldr	r2, [pc, #264]	; (8002fb0 <extInt_Config+0xb84>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d106      	bne.n	8002eba <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8002eac:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <extInt_Config+0xb70>)
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	4a3a      	ldr	r2, [pc, #232]	; (8002f9c <extInt_Config+0xb70>)
 8002eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb6:	6153      	str	r3, [r2, #20]
					break;
 8002eb8:	e09a      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a35      	ldr	r2, [pc, #212]	; (8002f98 <extInt_Config+0xb6c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d106      	bne.n	8002ed4 <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8002ec6:	4b35      	ldr	r3, [pc, #212]	; (8002f9c <extInt_Config+0xb70>)
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	4a34      	ldr	r2, [pc, #208]	; (8002f9c <extInt_Config+0xb70>)
 8002ecc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ed0:	6153      	str	r3, [r2, #20]
					break;
 8002ed2:	e08d      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a31      	ldr	r2, [pc, #196]	; (8002fa0 <extInt_Config+0xb74>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d106      	bne.n	8002eee <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8002ee0:	4b2e      	ldr	r3, [pc, #184]	; (8002f9c <extInt_Config+0xb70>)
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	4a2d      	ldr	r2, [pc, #180]	; (8002f9c <extInt_Config+0xb70>)
 8002ee6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002eea:	6153      	str	r3, [r2, #20]
					break;
 8002eec:	e080      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a2b      	ldr	r2, [pc, #172]	; (8002fa4 <extInt_Config+0xb78>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d106      	bne.n	8002f08 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8002efa:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <extInt_Config+0xb70>)
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	4a27      	ldr	r2, [pc, #156]	; (8002f9c <extInt_Config+0xb70>)
 8002f00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f04:	6153      	str	r3, [r2, #20]
					break;
 8002f06:	e073      	b.n	8002ff0 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a26      	ldr	r2, [pc, #152]	; (8002fa8 <extInt_Config+0xb7c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d106      	bne.n	8002f22 <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8002f14:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <extInt_Config+0xb70>)
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	4a20      	ldr	r2, [pc, #128]	; (8002f9c <extInt_Config+0xb70>)
 8002f1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f1e:	6153      	str	r3, [r2, #20]
					break;
 8002f20:	e066      	b.n	8002ff0 <extInt_Config+0xbc4>
						__NOP();
 8002f22:	bf00      	nop
					break;
 8002f24:	e064      	b.n	8002ff0 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8002f26:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <extInt_Config+0xb70>)
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	4a1c      	ldr	r2, [pc, #112]	; (8002f9c <extInt_Config+0xb70>)
 8002f2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f30:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1c      	ldr	r2, [pc, #112]	; (8002fac <extInt_Config+0xb80>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d104      	bne.n	8002f48 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8002f3e:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <extInt_Config+0xb70>)
 8002f40:	4a16      	ldr	r2, [pc, #88]	; (8002f9c <extInt_Config+0xb70>)
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 8002f46:	e053      	b.n	8002ff0 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a18      	ldr	r2, [pc, #96]	; (8002fb0 <extInt_Config+0xb84>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d106      	bne.n	8002f62 <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <extInt_Config+0xb70>)
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	4a10      	ldr	r2, [pc, #64]	; (8002f9c <extInt_Config+0xb70>)
 8002f5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f5e:	6153      	str	r3, [r2, #20]
						break;
 8002f60:	e046      	b.n	8002ff0 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0b      	ldr	r2, [pc, #44]	; (8002f98 <extInt_Config+0xb6c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d106      	bne.n	8002f7c <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <extInt_Config+0xb70>)
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <extInt_Config+0xb70>)
 8002f74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f78:	6153      	str	r3, [r2, #20]
						break;
 8002f7a:	e039      	b.n	8002ff0 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a07      	ldr	r2, [pc, #28]	; (8002fa0 <extInt_Config+0xb74>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d115      	bne.n	8002fb4 <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8002f88:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <extInt_Config+0xb70>)
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	4a03      	ldr	r2, [pc, #12]	; (8002f9c <extInt_Config+0xb70>)
 8002f8e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002f92:	6153      	str	r3, [r2, #20]
						break;
 8002f94:	e02c      	b.n	8002ff0 <extInt_Config+0xbc4>
 8002f96:	bf00      	nop
 8002f98:	40020800 	.word	0x40020800
 8002f9c:	40013800 	.word	0x40013800
 8002fa0:	40020c00 	.word	0x40020c00
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40021c00 	.word	0x40021c00
 8002fac:	40020000 	.word	0x40020000
 8002fb0:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a6c      	ldr	r2, [pc, #432]	; (800316c <extInt_Config+0xd40>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d106      	bne.n	8002fce <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8002fc0:	4b6b      	ldr	r3, [pc, #428]	; (8003170 <extInt_Config+0xd44>)
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	4a6a      	ldr	r2, [pc, #424]	; (8003170 <extInt_Config+0xd44>)
 8002fc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fca:	6153      	str	r3, [r2, #20]
						break;
 8002fcc:	e010      	b.n	8002ff0 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a67      	ldr	r2, [pc, #412]	; (8003174 <extInt_Config+0xd48>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d106      	bne.n	8002fe8 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8002fda:	4b65      	ldr	r3, [pc, #404]	; (8003170 <extInt_Config+0xd44>)
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	4a64      	ldr	r2, [pc, #400]	; (8003170 <extInt_Config+0xd44>)
 8002fe0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002fe4:	6153      	str	r3, [r2, #20]
						break;
 8002fe6:	e003      	b.n	8002ff0 <extInt_Config+0xbc4>
							__NOP();
 8002fe8:	bf00      	nop
						break;
 8002fea:	e001      	b.n	8002ff0 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8002fec:	bf00      	nop
						break;
 8002fee:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	791b      	ldrb	r3, [r3, #4]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d020      	beq.n	800303a <extInt_Config+0xc0e>
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	dc37      	bgt.n	800306c <extInt_Config+0xc40>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <extInt_Config+0xbda>
 8003000:	2b01      	cmp	r3, #1
 8003002:	d00d      	beq.n	8003020 <extInt_Config+0xbf4>
 8003004:	e032      	b.n	800306c <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003006:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <extInt_Config+0xd4c>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	7912      	ldrb	r2, [r2, #4]
 8003010:	4611      	mov	r1, r2
 8003012:	2201      	movs	r2, #1
 8003014:	408a      	lsls	r2, r1
 8003016:	4611      	mov	r1, r2
 8003018:	4a57      	ldr	r2, [pc, #348]	; (8003178 <extInt_Config+0xd4c>)
 800301a:	430b      	orrs	r3, r1
 800301c:	60d3      	str	r3, [r2, #12]

		break;
 800301e:	e027      	b.n	8003070 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003020:	4b55      	ldr	r3, [pc, #340]	; (8003178 <extInt_Config+0xd4c>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	7912      	ldrb	r2, [r2, #4]
 800302a:	4611      	mov	r1, r2
 800302c:	2201      	movs	r2, #1
 800302e:	408a      	lsls	r2, r1
 8003030:	4611      	mov	r1, r2
 8003032:	4a51      	ldr	r2, [pc, #324]	; (8003178 <extInt_Config+0xd4c>)
 8003034:	430b      	orrs	r3, r1
 8003036:	6093      	str	r3, [r2, #8]

		break;
 8003038:	e01a      	b.n	8003070 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800303a:	4b4f      	ldr	r3, [pc, #316]	; (8003178 <extInt_Config+0xd4c>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	7912      	ldrb	r2, [r2, #4]
 8003044:	4611      	mov	r1, r2
 8003046:	2201      	movs	r2, #1
 8003048:	408a      	lsls	r2, r1
 800304a:	4611      	mov	r1, r2
 800304c:	4a4a      	ldr	r2, [pc, #296]	; (8003178 <extInt_Config+0xd4c>)
 800304e:	430b      	orrs	r3, r1
 8003050:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003052:	4b49      	ldr	r3, [pc, #292]	; (8003178 <extInt_Config+0xd4c>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	7912      	ldrb	r2, [r2, #4]
 800305c:	4611      	mov	r1, r2
 800305e:	2201      	movs	r2, #1
 8003060:	408a      	lsls	r2, r1
 8003062:	4611      	mov	r1, r2
 8003064:	4a44      	ldr	r2, [pc, #272]	; (8003178 <extInt_Config+0xd4c>)
 8003066:	430b      	orrs	r3, r1
 8003068:	6093      	str	r3, [r2, #8]

		break;
 800306a:	e001      	b.n	8003070 <extInt_Config+0xc44>

	}default :{

		__NOP();
 800306c:	bf00      	nop
		break;
 800306e:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8003070:	b672      	cpsid	i
}
 8003072:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003074:	4b40      	ldr	r3, [pc, #256]	; (8003178 <extInt_Config+0xd4c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	7912      	ldrb	r2, [r2, #4]
 800307e:	4611      	mov	r1, r2
 8003080:	2201      	movs	r2, #1
 8003082:	408a      	lsls	r2, r1
 8003084:	4611      	mov	r1, r2
 8003086:	4a3c      	ldr	r2, [pc, #240]	; (8003178 <extInt_Config+0xd4c>)
 8003088:	430b      	orrs	r3, r1
 800308a:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	791b      	ldrb	r3, [r3, #4]
 8003092:	2b0f      	cmp	r3, #15
 8003094:	d862      	bhi.n	800315c <extInt_Config+0xd30>
 8003096:	a201      	add	r2, pc, #4	; (adr r2, 800309c <extInt_Config+0xc70>)
 8003098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309c:	080030dd 	.word	0x080030dd
 80030a0:	080030e5 	.word	0x080030e5
 80030a4:	080030ed 	.word	0x080030ed
 80030a8:	080030f5 	.word	0x080030f5
 80030ac:	080030fd 	.word	0x080030fd
 80030b0:	08003105 	.word	0x08003105
 80030b4:	0800310d 	.word	0x0800310d
 80030b8:	08003115 	.word	0x08003115
 80030bc:	0800311d 	.word	0x0800311d
 80030c0:	08003125 	.word	0x08003125
 80030c4:	0800312d 	.word	0x0800312d
 80030c8:	08003135 	.word	0x08003135
 80030cc:	0800313d 	.word	0x0800313d
 80030d0:	08003145 	.word	0x08003145
 80030d4:	0800314d 	.word	0x0800314d
 80030d8:	08003155 	.word	0x08003155
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 80030dc:	2006      	movs	r0, #6
 80030de:	f7ff f987 	bl	80023f0 <__NVIC_EnableIRQ>
			break;
 80030e2:	e03d      	b.n	8003160 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 80030e4:	2007      	movs	r0, #7
 80030e6:	f7ff f983 	bl	80023f0 <__NVIC_EnableIRQ>
			break;
 80030ea:	e039      	b.n	8003160 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 80030ec:	2008      	movs	r0, #8
 80030ee:	f7ff f97f 	bl	80023f0 <__NVIC_EnableIRQ>
			break;
 80030f2:	e035      	b.n	8003160 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 80030f4:	2009      	movs	r0, #9
 80030f6:	f7ff f97b 	bl	80023f0 <__NVIC_EnableIRQ>
			break;
 80030fa:	e031      	b.n	8003160 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 80030fc:	200a      	movs	r0, #10
 80030fe:	f7ff f977 	bl	80023f0 <__NVIC_EnableIRQ>
			break;
 8003102:	e02d      	b.n	8003160 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003104:	2017      	movs	r0, #23
 8003106:	f7ff f973 	bl	80023f0 <__NVIC_EnableIRQ>
			break;
 800310a:	e029      	b.n	8003160 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800310c:	2017      	movs	r0, #23
 800310e:	f7ff f96f 	bl	80023f0 <__NVIC_EnableIRQ>
			break;
 8003112:	e025      	b.n	8003160 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003114:	2017      	movs	r0, #23
 8003116:	f7ff f96b 	bl	80023f0 <__NVIC_EnableIRQ>
			break;
 800311a:	e021      	b.n	8003160 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800311c:	2017      	movs	r0, #23
 800311e:	f7ff f967 	bl	80023f0 <__NVIC_EnableIRQ>
			break;
 8003122:	e01d      	b.n	8003160 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003124:	2017      	movs	r0, #23
 8003126:	f7ff f963 	bl	80023f0 <__NVIC_EnableIRQ>
			break;
 800312a:	e019      	b.n	8003160 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800312c:	2028      	movs	r0, #40	; 0x28
 800312e:	f7ff f95f 	bl	80023f0 <__NVIC_EnableIRQ>
			break;
 8003132:	e015      	b.n	8003160 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003134:	2028      	movs	r0, #40	; 0x28
 8003136:	f7ff f95b 	bl	80023f0 <__NVIC_EnableIRQ>
			break;
 800313a:	e011      	b.n	8003160 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800313c:	2028      	movs	r0, #40	; 0x28
 800313e:	f7ff f957 	bl	80023f0 <__NVIC_EnableIRQ>
			break;
 8003142:	e00d      	b.n	8003160 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003144:	2028      	movs	r0, #40	; 0x28
 8003146:	f7ff f953 	bl	80023f0 <__NVIC_EnableIRQ>
			break;
 800314a:	e009      	b.n	8003160 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800314c:	2028      	movs	r0, #40	; 0x28
 800314e:	f7ff f94f 	bl	80023f0 <__NVIC_EnableIRQ>
			break;
 8003152:	e005      	b.n	8003160 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003154:	2028      	movs	r0, #40	; 0x28
 8003156:	f7ff f94b 	bl	80023f0 <__NVIC_EnableIRQ>
			break;
 800315a:	e001      	b.n	8003160 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 800315c:	bf00      	nop
			break;
 800315e:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003160:	b662      	cpsie	i
}
 8003162:	bf00      	nop
	}

	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021000 	.word	0x40021000
 8003170:	40013800 	.word	0x40013800
 8003174:	40021c00 	.word	0x40021c00
 8003178:	40013c00 	.word	0x40013c00

0800317c <callback_extInt0>:

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
	__NOP();
 8003180:	bf00      	nop
}
 8003182:	bf00      	nop
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
	__NOP();
 8003190:	bf00      	nop
}
 8003192:	bf00      	nop
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
	__NOP();
 80031a0:	bf00      	nop
}
 80031a2:	bf00      	nop
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
	__NOP();
 80031b0:	bf00      	nop
}
 80031b2:	bf00      	nop
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
	__NOP();
 80031c0:	bf00      	nop
}
 80031c2:	bf00      	nop
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
	__NOP();
 80031d0:	bf00      	nop
}
 80031d2:	bf00      	nop
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
	__NOP();
 80031e0:	bf00      	nop
}
 80031e2:	bf00      	nop
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
	__NOP();
 80031f0:	bf00      	nop
}
 80031f2:	bf00      	nop
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
	__NOP();
 8003200:	bf00      	nop
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
	__NOP();
 8003210:	bf00      	nop
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
	__NOP();
 8003220:	bf00      	nop
}
 8003222:	bf00      	nop
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
	__NOP();
 8003230:	bf00      	nop
}
 8003232:	bf00      	nop
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
	__NOP();
 8003240:	bf00      	nop
}
 8003242:	bf00      	nop
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
	__NOP();
 8003250:	bf00      	nop
}
 8003252:	bf00      	nop
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <EXTI0_IRQHandler+0x24>)
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <EXTI0_IRQHandler+0x24>)
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	4a03      	ldr	r2, [pc, #12]	; (8003280 <EXTI0_IRQHandler+0x24>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8003278:	f7ff ff80 	bl	800317c <callback_extInt0>
	}
}
 800327c:	bf00      	nop
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40013c00 	.word	0x40013c00

08003284 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8003288:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <EXTI1_IRQHandler+0x24>)
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <EXTI1_IRQHandler+0x24>)
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	4a03      	ldr	r2, [pc, #12]	; (80032a8 <EXTI1_IRQHandler+0x24>)
 800329a:	f043 0302 	orr.w	r3, r3, #2
 800329e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 80032a0:	f7fe fc38 	bl	8001b14 <callback_extInt1>
	}
}
 80032a4:	bf00      	nop
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40013c00 	.word	0x40013c00

080032ac <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <EXTI2_IRQHandler+0x24>)
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <EXTI2_IRQHandler+0x24>)
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	4a03      	ldr	r2, [pc, #12]	; (80032d0 <EXTI2_IRQHandler+0x24>)
 80032c2:	f043 0304 	orr.w	r3, r3, #4
 80032c6:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 80032c8:	f7ff ff60 	bl	800318c <callback_extInt2>
	}
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40013c00 	.word	0x40013c00

080032d4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 80032d8:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <EXTI3_IRQHandler+0x24>)
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <EXTI3_IRQHandler+0x24>)
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	4a03      	ldr	r2, [pc, #12]	; (80032f8 <EXTI3_IRQHandler+0x24>)
 80032ea:	f043 0308 	orr.w	r3, r3, #8
 80032ee:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 80032f0:	f7fe fc20 	bl	8001b34 <callback_extInt3>
	}
}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40013c00 	.word	0x40013c00

080032fc <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8003300:	4b07      	ldr	r3, [pc, #28]	; (8003320 <EXTI4_IRQHandler+0x24>)
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <EXTI4_IRQHandler+0x24>)
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	4a03      	ldr	r2, [pc, #12]	; (8003320 <EXTI4_IRQHandler+0x24>)
 8003312:	f043 0310 	orr.w	r3, r3, #16
 8003316:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 8003318:	f7ff ff40 	bl	800319c <callback_extInt4>
	}
}
 800331c:	bf00      	nop
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40013c00 	.word	0x40013c00

08003324 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 8003328:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <EXTI9_5_IRQHandler+0xa0>)
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8003334:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <EXTI9_5_IRQHandler+0xa0>)
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	4a22      	ldr	r2, [pc, #136]	; (80033c4 <EXTI9_5_IRQHandler+0xa0>)
 800333a:	f043 0320 	orr.w	r3, r3, #32
 800333e:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 8003340:	f7ff ff34 	bl	80031ac <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 8003344:	e03c      	b.n	80033c0 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 8003346:	4b1f      	ldr	r3, [pc, #124]	; (80033c4 <EXTI9_5_IRQHandler+0xa0>)
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d008      	beq.n	8003364 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8003352:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <EXTI9_5_IRQHandler+0xa0>)
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <EXTI9_5_IRQHandler+0xa0>)
 8003358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800335c:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 800335e:	f7ff ff2d 	bl	80031bc <callback_extInt6>
}
 8003362:	e02d      	b.n	80033c0 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 8003364:	4b17      	ldr	r3, [pc, #92]	; (80033c4 <EXTI9_5_IRQHandler+0xa0>)
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8003370:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <EXTI9_5_IRQHandler+0xa0>)
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <EXTI9_5_IRQHandler+0xa0>)
 8003376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337a:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 800337c:	f7ff ff26 	bl	80031cc <callback_extInt7>
}
 8003380:	e01e      	b.n	80033c0 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 8003382:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <EXTI9_5_IRQHandler+0xa0>)
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d008      	beq.n	80033a0 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 800338e:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <EXTI9_5_IRQHandler+0xa0>)
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	4a0c      	ldr	r2, [pc, #48]	; (80033c4 <EXTI9_5_IRQHandler+0xa0>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003398:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 800339a:	f7ff ff1f 	bl	80031dc <callback_extInt8>
}
 800339e:	e00f      	b.n	80033c0 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <EXTI9_5_IRQHandler+0xa0>)
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <EXTI9_5_IRQHandler+0xa0>)
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	4a04      	ldr	r2, [pc, #16]	; (80033c4 <EXTI9_5_IRQHandler+0xa0>)
 80033b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033b6:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 80033b8:	f7ff ff18 	bl	80031ec <callback_extInt9>
}
 80033bc:	e000      	b.n	80033c0 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 80033be:	bf00      	nop
}
 80033c0:	bf00      	nop
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40013c00 	.word	0x40013c00

080033c8 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 80033cc:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 80033d8:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	4a29      	ldr	r2, [pc, #164]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 80033de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033e2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 80033e4:	f7ff ff0a 	bl	80031fc <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 80033e8:	e049      	b.n	800347e <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 80033ea:	4b26      	ldr	r3, [pc, #152]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 80033f6:	4b23      	ldr	r3, [pc, #140]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	4a22      	ldr	r2, [pc, #136]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 80033fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003400:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 8003402:	f7ff ff03 	bl	800320c <callback_extInt11>
}
 8003406:	e03a      	b.n	800347e <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 8003408:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	4a1a      	ldr	r2, [pc, #104]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 800341a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800341e:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 8003420:	f7ff fefc 	bl	800321c <callback_extInt12>
}
 8003424:	e02b      	b.n	800347e <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	4a13      	ldr	r2, [pc, #76]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 8003438:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800343c:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 800343e:	f7ff fef5 	bl	800322c <callback_extInt13>
}
 8003442:	e01c      	b.n	800347e <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 8003456:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800345a:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 800345c:	f7ff feee 	bl	800323c <callback_extInt14>
}
 8003460:	e00d      	b.n	800347e <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	4a04      	ldr	r2, [pc, #16]	; (8003484 <EXTI15_10_IRQHandler+0xbc>)
 8003474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003478:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 800347a:	f7ff fee7 	bl	800324c <callback_extInt15>
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40013c00 	.word	0x40013c00

08003488 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a88      	ldr	r2, [pc, #544]	; (80036c0 <GPIO_Config+0x238>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d106      	bne.n	80034b0 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 80034a2:	4b88      	ldr	r3, [pc, #544]	; (80036c4 <GPIO_Config+0x23c>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	4a87      	ldr	r2, [pc, #540]	; (80036c4 <GPIO_Config+0x23c>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6313      	str	r3, [r2, #48]	; 0x30
 80034ae:	e03a      	b.n	8003526 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a84      	ldr	r2, [pc, #528]	; (80036c8 <GPIO_Config+0x240>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d106      	bne.n	80034c8 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 80034ba:	4b82      	ldr	r3, [pc, #520]	; (80036c4 <GPIO_Config+0x23c>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	4a81      	ldr	r2, [pc, #516]	; (80036c4 <GPIO_Config+0x23c>)
 80034c0:	f043 0302 	orr.w	r3, r3, #2
 80034c4:	6313      	str	r3, [r2, #48]	; 0x30
 80034c6:	e02e      	b.n	8003526 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a7f      	ldr	r2, [pc, #508]	; (80036cc <GPIO_Config+0x244>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d106      	bne.n	80034e0 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 80034d2:	4b7c      	ldr	r3, [pc, #496]	; (80036c4 <GPIO_Config+0x23c>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	4a7b      	ldr	r2, [pc, #492]	; (80036c4 <GPIO_Config+0x23c>)
 80034d8:	f043 0304 	orr.w	r3, r3, #4
 80034dc:	6313      	str	r3, [r2, #48]	; 0x30
 80034de:	e022      	b.n	8003526 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a7a      	ldr	r2, [pc, #488]	; (80036d0 <GPIO_Config+0x248>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d106      	bne.n	80034f8 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 80034ea:	4b76      	ldr	r3, [pc, #472]	; (80036c4 <GPIO_Config+0x23c>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	4a75      	ldr	r2, [pc, #468]	; (80036c4 <GPIO_Config+0x23c>)
 80034f0:	f043 0308 	orr.w	r3, r3, #8
 80034f4:	6313      	str	r3, [r2, #48]	; 0x30
 80034f6:	e016      	b.n	8003526 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a75      	ldr	r2, [pc, #468]	; (80036d4 <GPIO_Config+0x24c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d106      	bne.n	8003510 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8003502:	4b70      	ldr	r3, [pc, #448]	; (80036c4 <GPIO_Config+0x23c>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4a6f      	ldr	r2, [pc, #444]	; (80036c4 <GPIO_Config+0x23c>)
 8003508:	f043 0310 	orr.w	r3, r3, #16
 800350c:	6313      	str	r3, [r2, #48]	; 0x30
 800350e:	e00a      	b.n	8003526 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a70      	ldr	r2, [pc, #448]	; (80036d8 <GPIO_Config+0x250>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d105      	bne.n	8003526 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 800351a:	4b6a      	ldr	r3, [pc, #424]	; (80036c4 <GPIO_Config+0x23c>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4a69      	ldr	r2, [pc, #420]	; (80036c4 <GPIO_Config+0x23c>)
 8003520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003524:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	795b      	ldrb	r3, [r3, #5]
 800352a:	461a      	mov	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	791b      	ldrb	r3, [r3, #4]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	791b      	ldrb	r3, [r3, #4]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	2103      	movs	r1, #3
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	4619      	mov	r1, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	400a      	ands	r2, r1
 8003554:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6819      	ldr	r1, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	430a      	orrs	r2, r1
 8003564:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	7a1b      	ldrb	r3, [r3, #8]
 800356a:	461a      	mov	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	791b      	ldrb	r3, [r3, #4]
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	791b      	ldrb	r3, [r3, #4]
 8003580:	4619      	mov	r1, r3
 8003582:	2301      	movs	r3, #1
 8003584:	408b      	lsls	r3, r1
 8003586:	43db      	mvns	r3, r3
 8003588:	4619      	mov	r1, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	400a      	ands	r2, r1
 8003590:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6859      	ldr	r1, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	799b      	ldrb	r3, [r3, #6]
 80035a6:	461a      	mov	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	791b      	ldrb	r3, [r3, #4]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	791b      	ldrb	r3, [r3, #4]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	2103      	movs	r1, #3
 80035c2:	fa01 f303 	lsl.w	r3, r1, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	4619      	mov	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	400a      	ands	r2, r1
 80035d0:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6899      	ldr	r1, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	430a      	orrs	r2, r1
 80035e0:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	79db      	ldrb	r3, [r3, #7]
 80035e6:	461a      	mov	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	791b      	ldrb	r3, [r3, #4]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	791b      	ldrb	r3, [r3, #4]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	2103      	movs	r1, #3
 8003602:	fa01 f303 	lsl.w	r3, r1, r3
 8003606:	43db      	mvns	r3, r3
 8003608:	4619      	mov	r1, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	400a      	ands	r2, r1
 8003610:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68d9      	ldr	r1, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	430a      	orrs	r2, r1
 8003620:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	795b      	ldrb	r3, [r3, #5]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d143      	bne.n	80036b2 <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	791b      	ldrb	r3, [r3, #4]
 800362e:	2b07      	cmp	r3, #7
 8003630:	d81f      	bhi.n	8003672 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	791b      	ldrb	r3, [r3, #4]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6a1a      	ldr	r2, [r3, #32]
 8003640:	210f      	movs	r1, #15
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	fa01 f303 	lsl.w	r3, r1, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	4619      	mov	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	400a      	ands	r2, r1
 8003652:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6a1a      	ldr	r2, [r3, #32]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	7a5b      	ldrb	r3, [r3, #9]
 800365e:	4619      	mov	r1, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	fa01 f303 	lsl.w	r3, r1, r3
 8003666:	4619      	mov	r1, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 8003670:	e01f      	b.n	80036b2 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	791b      	ldrb	r3, [r3, #4]
 8003676:	3b08      	subs	r3, #8
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003682:	210f      	movs	r1, #15
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	fa01 f303 	lsl.w	r3, r1, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	4619      	mov	r1, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	400a      	ands	r2, r1
 8003694:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	7a5b      	ldrb	r3, [r3, #9]
 80036a0:	4619      	mov	r1, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	fa01 f303 	lsl.w	r3, r1, r3
 80036a8:	4619      	mov	r1, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40020000 	.word	0x40020000
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40020400 	.word	0x40020400
 80036cc:	40020800 	.word	0x40020800
 80036d0:	40020c00 	.word	0x40020c00
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40021c00 	.word	0x40021c00

080036dc <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d10d      	bne.n	800370a <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699a      	ldr	r2, [r3, #24]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	791b      	ldrb	r3, [r3, #4]
 80036f8:	4619      	mov	r1, r3
 80036fa:	2301      	movs	r3, #1
 80036fc:	408b      	lsls	r3, r1
 80036fe:	4619      	mov	r1, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8003708:	e00d      	b.n	8003726 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699a      	ldr	r2, [r3, #24]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	791b      	ldrb	r3, [r3, #4]
 8003714:	3310      	adds	r3, #16
 8003716:	2101      	movs	r1, #1
 8003718:	fa01 f303 	lsl.w	r3, r1, r3
 800371c:	4619      	mov	r1, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	619a      	str	r2, [r3, #24]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10d      	bne.n	8003760 <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	791b      	ldrb	r3, [r3, #4]
 800374e:	4619      	mov	r1, r3
 8003750:	2301      	movs	r3, #1
 8003752:	408b      	lsls	r3, r1
 8003754:	4619      	mov	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 800375e:	e00d      	b.n	800377c <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	791b      	ldrb	r3, [r3, #4]
 800376a:	3310      	adds	r3, #16
 800376c:	2101      	movs	r1, #1
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	4619      	mov	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	619a      	str	r2, [r3, #24]
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	791b      	ldrb	r3, [r3, #4]
 8003798:	461a      	mov	r2, r3
 800379a:	2301      	movs	r3, #1
 800379c:	4093      	lsls	r3, r2
 800379e:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 80037a8:	897b      	ldrh	r3, [r7, #10]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	791b      	ldrb	r3, [r3, #4]
 80037b4:	461a      	mov	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	40d3      	lsrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]

	return pinValue;
 80037bc:	68fb      	ldr	r3, [r7, #12]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
		uint8_t state = GPIO_ReadPin (pPinState);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff ffd8 	bl	8003788 <GPIO_ReadPin>
 80037d8:	4603      	mov	r3, r0
 80037da:	73fb      	strb	r3, [r7, #15]
		if (state== SET){
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d104      	bne.n	80037ec <GPIOxTooglePin+0x22>
			GPIO_WritePin(pPinState, RESET);
 80037e2:	2100      	movs	r1, #0
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff ff79 	bl	80036dc <GPIO_WritePin>
		else{
			GPIO_WritePin(pPinState, SET);
		}


}
 80037ea:	e003      	b.n	80037f4 <GPIOxTooglePin+0x2a>
			GPIO_WritePin(pPinState, SET);
 80037ec:	2101      	movs	r1, #1
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff ff74 	bl	80036dc <GPIO_WritePin>
}
 80037f4:	bf00      	nop
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <configMPUAccel>:
#include "MPUAccel.h"
#include "I2CDriver.h"
#include "GPIOxDriver.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fe39 	bl	8003488 <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fe34 	bl	8003488 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4618      	mov	r0, r3
 8003826:	f001 fd83 	bl	8005330 <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 800382a:	e004      	b.n	8003836 <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f94f 	bl	8003ad0 <WHOIAM>
 8003832:	4603      	mov	r3, r0
 8003834:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f7      	beq.n	800382c <configMPUAccel+0x30>
	}

	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 800383c:	216b      	movs	r1, #107	; 0x6b
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f8f1 	bl	8003a26 <readData>
 8003844:	4603      	mov	r3, r0
 8003846:	73bb      	strb	r3, [r7, #14]
	byte &=  ~byte;
 8003848:	2300      	movs	r3, #0
 800384a:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 800384c:	7bbb      	ldrb	r3, [r7, #14]
 800384e:	461a      	mov	r2, r3
 8003850:	216b      	movs	r1, #107	; 0x6b
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f89c 	bl	8003990 <writeData>
	byte = readData(ptrMPUAccel, 0x6B);
 8003858:	216b      	movs	r1, #107	; 0x6b
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8e3 	bl	8003a26 <readData>
 8003860:	4603      	mov	r3, r0
 8003862:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 8003864:	211c      	movs	r1, #28
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f8dd 	bl	8003a26 <readData>
 800386c:	4603      	mov	r3, r0
 800386e:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 8003870:	7bbb      	ldrb	r3, [r7, #14]
 8003872:	f023 0318 	bic.w	r3, r3, #24
 8003876:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b03      	cmp	r3, #3
 800387e:	d833      	bhi.n	80038e8 <configMPUAccel+0xec>
 8003880:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <configMPUAccel+0x8c>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	08003899 	.word	0x08003899
 800388c:	080038a7 	.word	0x080038a7
 8003890:	080038bd 	.word	0x080038bd
 8003894:	080038d3 	.word	0x080038d3
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 8003898:	7bbb      	ldrb	r3, [r7, #14]
 800389a:	461a      	mov	r2, r3
 800389c:	211c      	movs	r1, #28
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f876 	bl	8003990 <writeData>

				break;
 80038a4:	e021      	b.n	80038ea <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 80038a6:	7bbb      	ldrb	r3, [r7, #14]
 80038a8:	f043 0308 	orr.w	r3, r3, #8
 80038ac:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80038ae:	7bbb      	ldrb	r3, [r7, #14]
 80038b0:	461a      	mov	r2, r3
 80038b2:	211c      	movs	r1, #28
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f86b 	bl	8003990 <writeData>

				break;
 80038ba:	e016      	b.n	80038ea <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 80038bc:	7bbb      	ldrb	r3, [r7, #14]
 80038be:	f043 0310 	orr.w	r3, r3, #16
 80038c2:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80038c4:	7bbb      	ldrb	r3, [r7, #14]
 80038c6:	461a      	mov	r2, r3
 80038c8:	211c      	movs	r1, #28
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f860 	bl	8003990 <writeData>

				break;
 80038d0:	e00b      	b.n	80038ea <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 80038d2:	7bbb      	ldrb	r3, [r7, #14]
 80038d4:	f043 0318 	orr.w	r3, r3, #24
 80038d8:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80038da:	7bbb      	ldrb	r3, [r7, #14]
 80038dc:	461a      	mov	r2, r3
 80038de:	211c      	movs	r1, #28
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f855 	bl	8003990 <writeData>

				break;
 80038e6:	e000      	b.n	80038ea <configMPUAccel+0xee>
			}default:{
				break;
 80038e8:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 80038ea:	211c      	movs	r1, #28
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f89a 	bl	8003a26 <readData>
 80038f2:	4603      	mov	r3, r0
 80038f4:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 80038f6:	211b      	movs	r1, #27
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f894 	bl	8003a26 <readData>
 80038fe:	4603      	mov	r3, r0
 8003900:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 8003902:	7bbb      	ldrb	r3, [r7, #14]
 8003904:	f023 0318 	bic.w	r3, r3, #24
 8003908:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	785b      	ldrb	r3, [r3, #1]
 800390e:	2b03      	cmp	r3, #3
 8003910:	d832      	bhi.n	8003978 <configMPUAccel+0x17c>
 8003912:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <configMPUAccel+0x11c>)
 8003914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003918:	08003929 	.word	0x08003929
 800391c:	08003937 	.word	0x08003937
 8003920:	0800394d 	.word	0x0800394d
 8003924:	08003963 	.word	0x08003963
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 8003928:	7bbb      	ldrb	r3, [r7, #14]
 800392a:	461a      	mov	r2, r3
 800392c:	211b      	movs	r1, #27
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f82e 	bl	8003990 <writeData>

				break;
 8003934:	e021      	b.n	800397a <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 8003936:	7bbb      	ldrb	r3, [r7, #14]
 8003938:	f043 0308 	orr.w	r3, r3, #8
 800393c:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800393e:	7bbb      	ldrb	r3, [r7, #14]
 8003940:	461a      	mov	r2, r3
 8003942:	211b      	movs	r1, #27
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f823 	bl	8003990 <writeData>

				break;
 800394a:	e016      	b.n	800397a <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 800394c:	7bbb      	ldrb	r3, [r7, #14]
 800394e:	f043 0310 	orr.w	r3, r3, #16
 8003952:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8003954:	7bbb      	ldrb	r3, [r7, #14]
 8003956:	461a      	mov	r2, r3
 8003958:	211b      	movs	r1, #27
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f818 	bl	8003990 <writeData>

				break;
 8003960:	e00b      	b.n	800397a <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 8003962:	7bbb      	ldrb	r3, [r7, #14]
 8003964:	f043 0318 	orr.w	r3, r3, #24
 8003968:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800396a:	7bbb      	ldrb	r3, [r7, #14]
 800396c:	461a      	mov	r2, r3
 800396e:	211b      	movs	r1, #27
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f80d 	bl	8003990 <writeData>

				break;
 8003976:	e000      	b.n	800397a <configMPUAccel+0x17e>
			}default:{
				break;
 8003978:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 800397a:	211b      	movs	r1, #27
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f852 	bl	8003a26 <readData>
 8003982:	4603      	mov	r3, r0
 8003984:	73bb      	strb	r3, [r7, #14]


}
 8003986:	bf00      	nop
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop

08003990 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	70fb      	strb	r3, [r7, #3]
 800399c:	4613      	mov	r3, r2
 800399e:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695a      	ldr	r2, [r3, #20]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b2:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 fe3d 	bl	8005638 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68d8      	ldr	r0, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	791b      	ldrb	r3, [r3, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	4619      	mov	r1, r3
 80039cc:	f001 fe87 	bl	80056de <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 fea8 	bl	800572e <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80039de:	e000      	b.n	80039e2 <writeData+0x52>
		__NOP();
 80039e0:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f6      	bne.n	80039e0 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	78ba      	ldrb	r2, [r7, #2]
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 feb1 	bl	8005762 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003a00:	e000      	b.n	8003a04 <writeData+0x74>
		__NOP();
 8003a02:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f6      	bne.n	8003a02 <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 fdfb 	bl	8005614 <i2c_stopTransaction>



}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	460b      	mov	r3, r1
 8003a30:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a48:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 fdf2 	bl	8005638 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68d8      	ldr	r0, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	791b      	ldrb	r3, [r3, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	4619      	mov	r1, r3
 8003a62:	f001 fe3c 	bl	80056de <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f001 fe5d 	bl	800572e <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003a74:	e000      	b.n	8003a78 <readData+0x52>
		__NOP();
 8003a76:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f6      	bne.n	8003a76 <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 fdf8 	bl	8005682 <i2c_reStartTransaction>

	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68d8      	ldr	r0, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	791b      	ldrb	r3, [r3, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f001 fe1d 	bl	80056de <i2c_sendSlaveAddressRW>

	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f001 fe06 	bl	80056ba <i2c_sendNoAck>

	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f001 fdae 	bl	8005614 <i2c_stopTransaction>

	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f001 fe6a 	bl	8005796 <i2c_readDataByte>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	73fb      	strb	r3, [r7, #15]

	return auxRead;
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 8003ae0:	2175      	movs	r1, #117	; 0x75
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff ff9f 	bl	8003a26 <readData>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003af2:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8003b06:	7bbb      	ldrb	r3, [r7, #14]

}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <readGyro_Z>:

	return GYROY;

}

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	uint16_t GYROZ_H = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	817b      	strh	r3, [r7, #10]
	uint16_t GYROZ_L = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	813b      	strh	r3, [r7, #8]
	float    GYROZ   = 0;
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8003b26:	2147      	movs	r1, #71	; 0x47
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ff7c 	bl	8003a26 <readData>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	817b      	strh	r3, [r7, #10]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 8003b32:	2148      	movs	r1, #72	; 0x48
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff ff76 	bl	8003a26 <readData>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	813b      	strh	r3, [r7, #8]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8003b3e:	897b      	ldrh	r3, [r7, #10]
 8003b40:	021a      	lsls	r2, r3, #8
 8003b42:	893b      	ldrh	r3, [r7, #8]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b4e:	edc7 7a03 	vstr	s15, [r7, #12]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	785b      	ldrb	r3, [r3, #1]
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d82e      	bhi.n	8003bb8 <readGyro_Z+0xa8>
 8003b5a:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <readGyro_Z+0x50>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003b71 	.word	0x08003b71
 8003b64:	08003b83 	.word	0x08003b83
 8003b68:	08003b95 	.word	0x08003b95
 8003b6c:	08003ba7 	.word	0x08003ba7
		case GYRO_250 :{

			GYROZ /= GYRO_250_SENS;
 8003b70:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b74:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003bcc <readGyro_Z+0xbc>
 8003b78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b7c:	edc7 7a03 	vstr	s15, [r7, #12]

			break;
 8003b80:	e01b      	b.n	8003bba <readGyro_Z+0xaa>
		}case GYRO_500 :{

			GYROZ /= GYRO_500_SENS;
 8003b82:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b86:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003bd0 <readGyro_Z+0xc0>
 8003b8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b8e:	edc7 7a03 	vstr	s15, [r7, #12]

			break;
 8003b92:	e012      	b.n	8003bba <readGyro_Z+0xaa>
		}case GYRO_1000 :{

			GYROZ /= GYRO_1000_SENS;
 8003b94:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b98:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003bd4 <readGyro_Z+0xc4>
 8003b9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ba0:	edc7 7a03 	vstr	s15, [r7, #12]

			break;
 8003ba4:	e009      	b.n	8003bba <readGyro_Z+0xaa>
		}case GYRO_2000 :{

			GYROZ /= GYRO_2000_SENS;
 8003ba6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003baa:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8003bae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bb2:	edc7 7a03 	vstr	s15, [r7, #12]

			break;
 8003bb6:	e000      	b.n	8003bba <readGyro_Z+0xaa>
		}default:{
			break;
 8003bb8:	bf00      	nop
		}

	}

	return GYROZ;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	ee07 3a90 	vmov	s15, r3

}
 8003bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	43030000 	.word	0x43030000
 8003bd0:	42840000 	.word	0x42840000
 8003bd4:	42040000 	.word	0x42040000

08003bd8 <setConstants>:

#include "MotorsDriver.h"
#include "PwmDriver.h"


void setConstants(Motor_Handler_t *ptrMotorHandler, uint8_t motor , float k, float tau, float theta, uint16_t Ts){
 8003bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bdc:	b08a      	sub	sp, #40	; 0x28
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6178      	str	r0, [r7, #20]
 8003be2:	460b      	mov	r3, r1
 8003be4:	ed87 0a03 	vstr	s0, [r7, #12]
 8003be8:	edc7 0a02 	vstr	s1, [r7, #8]
 8003bec:	ed87 1a01 	vstr	s2, [r7, #4]
 8003bf0:	74fb      	strb	r3, [r7, #19]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	823b      	strh	r3, [r7, #16]

	float kp   = 0;
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
	float taoi = 0;
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	623b      	str	r3, [r7, #32]
	float taod = 0;
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]

	kp   = (1.2*tau)/(k*theta);
 8003c08:	68b8      	ldr	r0, [r7, #8]
 8003c0a:	f7fc fcb5 	bl	8000578 <__aeabi_f2d>
 8003c0e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003c12:	4bc8      	ldr	r3, [pc, #800]	; (8003f34 <setConstants+0x35c>)
 8003c14:	f7fc fd08 	bl	8000628 <__aeabi_dmul>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4614      	mov	r4, r2
 8003c1e:	461d      	mov	r5, r3
 8003c20:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c24:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2c:	ee17 0a90 	vmov	r0, s15
 8003c30:	f7fc fca2 	bl	8000578 <__aeabi_f2d>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4620      	mov	r0, r4
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	f7fc fe1e 	bl	800087c <__aeabi_ddiv>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	f7fc ffe6 	bl	8000c18 <__aeabi_d2f>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
	taoi = 2*theta;
 8003c50:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c58:	edc7 7a08 	vstr	s15, [r7, #32]
	taod = 0.5*theta;
 8003c5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c60:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c68:	edc7 7a07 	vstr	s15, [r7, #28]

	switch (motor) {
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d003      	beq.n	8003c7a <setConstants+0xa2>
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	f000 80ac 	beq.w	8003dd0 <setConstants+0x1f8>
 8003c78:	e155      	b.n	8003f26 <setConstants+0x34e>

		case 1:{

			ptrMotorHandler->configM1.q_M1_0 = kp*(1+Ts/(2.0*taoi)+taod/Ts);
 8003c7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c7c:	f7fc fc7c 	bl	8000578 <__aeabi_f2d>
 8003c80:	4604      	mov	r4, r0
 8003c82:	460d      	mov	r5, r1
 8003c84:	8a3b      	ldrh	r3, [r7, #16]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fc fc64 	bl	8000554 <__aeabi_i2d>
 8003c8c:	4680      	mov	r8, r0
 8003c8e:	4689      	mov	r9, r1
 8003c90:	6a38      	ldr	r0, [r7, #32]
 8003c92:	f7fc fc71 	bl	8000578 <__aeabi_f2d>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	f7fc fb0f 	bl	80002bc <__adddf3>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4640      	mov	r0, r8
 8003ca4:	4649      	mov	r1, r9
 8003ca6:	f7fc fde9 	bl	800087c <__aeabi_ddiv>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	4ba0      	ldr	r3, [pc, #640]	; (8003f38 <setConstants+0x360>)
 8003cb8:	f7fc fb00 	bl	80002bc <__adddf3>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4690      	mov	r8, r2
 8003cc2:	4699      	mov	r9, r3
 8003cc4:	8a3b      	ldrh	r3, [r7, #16]
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cce:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003cd6:	ee16 0a90 	vmov	r0, s13
 8003cda:	f7fc fc4d 	bl	8000578 <__aeabi_f2d>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4640      	mov	r0, r8
 8003ce4:	4649      	mov	r1, r9
 8003ce6:	f7fc fae9 	bl	80002bc <__adddf3>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4620      	mov	r0, r4
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	f7fc fc99 	bl	8000628 <__aeabi_dmul>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f7fc ff8b 	bl	8000c18 <__aeabi_d2f>
 8003d02:	4602      	mov	r2, r0
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	609a      	str	r2, [r3, #8]
			ptrMotorHandler->configM1.q_M1_1 = -kp*(1-Ts/(2.0*taoi)+(2.0*taod)/Ts);
 8003d08:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d0c:	eef1 7a67 	vneg.f32	s15, s15
 8003d10:	ee17 3a90 	vmov	r3, s15
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fc fc2f 	bl	8000578 <__aeabi_f2d>
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	460d      	mov	r5, r1
 8003d1e:	8a3b      	ldrh	r3, [r7, #16]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fc fc17 	bl	8000554 <__aeabi_i2d>
 8003d26:	4680      	mov	r8, r0
 8003d28:	4689      	mov	r9, r1
 8003d2a:	6a38      	ldr	r0, [r7, #32]
 8003d2c:	f7fc fc24 	bl	8000578 <__aeabi_f2d>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	f7fc fac2 	bl	80002bc <__adddf3>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4640      	mov	r0, r8
 8003d3e:	4649      	mov	r1, r9
 8003d40:	f7fc fd9c 	bl	800087c <__aeabi_ddiv>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	f04f 0000 	mov.w	r0, #0
 8003d4c:	497a      	ldr	r1, [pc, #488]	; (8003f38 <setConstants+0x360>)
 8003d4e:	f7fc fab3 	bl	80002b8 <__aeabi_dsub>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4690      	mov	r8, r2
 8003d58:	4699      	mov	r9, r3
 8003d5a:	69f8      	ldr	r0, [r7, #28]
 8003d5c:	f7fc fc0c 	bl	8000578 <__aeabi_f2d>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	f7fc faaa 	bl	80002bc <__adddf3>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4692      	mov	sl, r2
 8003d6e:	469b      	mov	fp, r3
 8003d70:	8a3b      	ldrh	r3, [r7, #16]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fc fbee 	bl	8000554 <__aeabi_i2d>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4650      	mov	r0, sl
 8003d7e:	4659      	mov	r1, fp
 8003d80:	f7fc fd7c 	bl	800087c <__aeabi_ddiv>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4640      	mov	r0, r8
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	f7fc fa96 	bl	80002bc <__adddf3>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4620      	mov	r0, r4
 8003d96:	4629      	mov	r1, r5
 8003d98:	f7fc fc46 	bl	8000628 <__aeabi_dmul>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4610      	mov	r0, r2
 8003da2:	4619      	mov	r1, r3
 8003da4:	f7fc ff38 	bl	8000c18 <__aeabi_d2f>
 8003da8:	4602      	mov	r2, r0
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	60da      	str	r2, [r3, #12]
			ptrMotorHandler->configM1.q_M1_2 = (kp*taod)/Ts;
 8003dae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003db2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003db6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003dba:	8a3b      	ldrh	r3, [r7, #16]
 8003dbc:	ee07 3a90 	vmov	s15, r3
 8003dc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	edc3 7a04 	vstr	s15, [r3, #16]

			break;
 8003dce:	e0ac      	b.n	8003f2a <setConstants+0x352>
		}case 2:{

			ptrMotorHandler->configM2.q_M2_0 = kp*(1+Ts/(2.0*taoi)+taod/Ts);
 8003dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dd2:	f7fc fbd1 	bl	8000578 <__aeabi_f2d>
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	460d      	mov	r5, r1
 8003dda:	8a3b      	ldrh	r3, [r7, #16]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fc fbb9 	bl	8000554 <__aeabi_i2d>
 8003de2:	4680      	mov	r8, r0
 8003de4:	4689      	mov	r9, r1
 8003de6:	6a38      	ldr	r0, [r7, #32]
 8003de8:	f7fc fbc6 	bl	8000578 <__aeabi_f2d>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	f7fc fa64 	bl	80002bc <__adddf3>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4640      	mov	r0, r8
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	f7fc fd3e 	bl	800087c <__aeabi_ddiv>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	4b4a      	ldr	r3, [pc, #296]	; (8003f38 <setConstants+0x360>)
 8003e0e:	f7fc fa55 	bl	80002bc <__adddf3>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4690      	mov	r8, r2
 8003e18:	4699      	mov	r9, r3
 8003e1a:	8a3b      	ldrh	r3, [r7, #16]
 8003e1c:	ee07 3a90 	vmov	s15, r3
 8003e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e24:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e2c:	ee16 0a90 	vmov	r0, s13
 8003e30:	f7fc fba2 	bl	8000578 <__aeabi_f2d>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4640      	mov	r0, r8
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	f7fc fa3e 	bl	80002bc <__adddf3>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4620      	mov	r0, r4
 8003e46:	4629      	mov	r1, r5
 8003e48:	f7fc fbee 	bl	8000628 <__aeabi_dmul>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4610      	mov	r0, r2
 8003e52:	4619      	mov	r1, r3
 8003e54:	f7fc fee0 	bl	8000c18 <__aeabi_d2f>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	62da      	str	r2, [r3, #44]	; 0x2c
			ptrMotorHandler->configM2.q_M2_1 = -kp*(1-Ts/(2.0*taoi)+(2.0*taod)/Ts);
 8003e5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e62:	eef1 7a67 	vneg.f32	s15, s15
 8003e66:	ee17 3a90 	vmov	r3, s15
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fc fb84 	bl	8000578 <__aeabi_f2d>
 8003e70:	4604      	mov	r4, r0
 8003e72:	460d      	mov	r5, r1
 8003e74:	8a3b      	ldrh	r3, [r7, #16]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fc fb6c 	bl	8000554 <__aeabi_i2d>
 8003e7c:	4680      	mov	r8, r0
 8003e7e:	4689      	mov	r9, r1
 8003e80:	6a38      	ldr	r0, [r7, #32]
 8003e82:	f7fc fb79 	bl	8000578 <__aeabi_f2d>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	f7fc fa17 	bl	80002bc <__adddf3>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4640      	mov	r0, r8
 8003e94:	4649      	mov	r1, r9
 8003e96:	f7fc fcf1 	bl	800087c <__aeabi_ddiv>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	f04f 0000 	mov.w	r0, #0
 8003ea2:	4925      	ldr	r1, [pc, #148]	; (8003f38 <setConstants+0x360>)
 8003ea4:	f7fc fa08 	bl	80002b8 <__aeabi_dsub>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4690      	mov	r8, r2
 8003eae:	4699      	mov	r9, r3
 8003eb0:	69f8      	ldr	r0, [r7, #28]
 8003eb2:	f7fc fb61 	bl	8000578 <__aeabi_f2d>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	f7fc f9ff 	bl	80002bc <__adddf3>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4692      	mov	sl, r2
 8003ec4:	469b      	mov	fp, r3
 8003ec6:	8a3b      	ldrh	r3, [r7, #16]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fc fb43 	bl	8000554 <__aeabi_i2d>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4650      	mov	r0, sl
 8003ed4:	4659      	mov	r1, fp
 8003ed6:	f7fc fcd1 	bl	800087c <__aeabi_ddiv>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4640      	mov	r0, r8
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	f7fc f9eb 	bl	80002bc <__adddf3>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4620      	mov	r0, r4
 8003eec:	4629      	mov	r1, r5
 8003eee:	f7fc fb9b 	bl	8000628 <__aeabi_dmul>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4619      	mov	r1, r3
 8003efa:	f7fc fe8d 	bl	8000c18 <__aeabi_d2f>
 8003efe:	4602      	mov	r2, r0
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	631a      	str	r2, [r3, #48]	; 0x30
			ptrMotorHandler->configM2.q_M2_2 = (kp*taod)/Ts;
 8003f04:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003f08:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f0c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003f10:	8a3b      	ldrh	r3, [r7, #16]
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			break;
 8003f24:	e001      	b.n	8003f2a <setConstants+0x352>
		}default :{

			__NOP();
 8003f26:	bf00      	nop
			break;
 8003f28:	bf00      	nop
		}

	}

}
 8003f2a:	bf00      	nop
 8003f2c:	3728      	adds	r7, #40	; 0x28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f34:	3ff33333 	.word	0x3ff33333
 8003f38:	3ff00000 	.word	0x3ff00000

08003f3c <PID>:

double PID(Motor_Handler_t *ptrMotorHandler, float measure , uint8_t motor, float setpoint ){
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	edc7 0a00 	vstr	s1, [r7]
 8003f4e:	71fb      	strb	r3, [r7, #7]

	float u,p_0,p_1,p_2;


	switch (motor) {
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d002      	beq.n	8003f5c <PID+0x20>
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d049      	beq.n	8003fee <PID+0xb2>
 8003f5a:	e091      	b.n	8004080 <PID+0x144>

		case 1:{


			ptrMotorHandler->configM1.e_M1 = setpoint - measure;
 8003f5c:	ed97 7a00 	vldr	s14, [r7]
 8003f60:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	edc3 7a05 	vstr	s15, [r3, #20]

			p_0 = ptrMotorHandler->configM1.q_M1_0 * ptrMotorHandler->configM1.e_M1;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	ed93 7a02 	vldr	s14, [r3, #8]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	edd3 7a05 	vldr	s15, [r3, #20]
 8003f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7e:	edc7 7a06 	vstr	s15, [r7, #24]
			p_1 = ptrMotorHandler->configM1.q_M1_1 * ptrMotorHandler->configM1.e_M1_1;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f92:	edc7 7a05 	vstr	s15, [r7, #20]
			p_2 = ptrMotorHandler->configM1.q_M1_2 * ptrMotorHandler->configM1.e_M1_2;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	ed93 7a04 	vldr	s14, [r3, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa6:	edc7 7a04 	vstr	s15, [r7, #16]

			ptrMotorHandler->configM1.u_M1 = ptrMotorHandler->configM1.u_M1_1 + p_0 + p_1 + p_2;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fc0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	edc3 7a00 	vstr	s15, [r3]
			u = ptrMotorHandler->configM1.u_M1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	61fb      	str	r3, [r7, #28]

			// Actualizamos los datos

			ptrMotorHandler->configM1.e_M1_1 = ptrMotorHandler->configM1.e_M1;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	619a      	str	r2, [r3, #24]
			ptrMotorHandler->configM1.e_M1_1 = ptrMotorHandler->configM1.e_M1_2;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	69da      	ldr	r2, [r3, #28]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	619a      	str	r2, [r3, #24]
			ptrMotorHandler->configM1.u_M1_1 = ptrMotorHandler->configM1.u_M1;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	605a      	str	r2, [r3, #4]


			break;
 8003fec:	e04a      	b.n	8004084 <PID+0x148>
		}case 2:{

			ptrMotorHandler->configM2.e_M2 = setpoint - measure;
 8003fee:	ed97 7a00 	vldr	s14, [r7]
 8003ff2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			p_0 = ptrMotorHandler->configM2.q_M2_0 * ptrMotorHandler->configM2.e_M2;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800400c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004010:	edc7 7a06 	vstr	s15, [r7, #24]
			p_1 = ptrMotorHandler->configM2.q_M2_1 * ptrMotorHandler->configM2.e_M2_1;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004024:	edc7 7a05 	vstr	s15, [r7, #20]
			p_2 = ptrMotorHandler->configM2.q_M2_2 * ptrMotorHandler->configM2.e_M2_2;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004038:	edc7 7a04 	vstr	s15, [r7, #16]

			ptrMotorHandler->configM2.u_M2 = ptrMotorHandler->configM2.u_M2_1 + p_0 + p_1 + p_2;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004042:	edd7 7a06 	vldr	s15, [r7, #24]
 8004046:	ee37 7a27 	vadd.f32	s14, s14, s15
 800404a:	edd7 7a05 	vldr	s15, [r7, #20]
 800404e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004052:	edd7 7a04 	vldr	s15, [r7, #16]
 8004056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			u = ptrMotorHandler->configM2.u_M2;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	61fb      	str	r3, [r7, #28]

			// Actualizamos los datos

			ptrMotorHandler->configM2.e_M2_1 = ptrMotorHandler->configM2.e_M2;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	63da      	str	r2, [r3, #60]	; 0x3c
			ptrMotorHandler->configM2.e_M2_1 = ptrMotorHandler->configM2.e_M2_2;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	63da      	str	r2, [r3, #60]	; 0x3c
			ptrMotorHandler->configM2.u_M2_1 = ptrMotorHandler->configM2.u_M2;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	629a      	str	r2, [r3, #40]	; 0x28


			break;
 800407e:	e001      	b.n	8004084 <PID+0x148>
		}default :{

			__NOP();
 8004080:	bf00      	nop
			break;
 8004082:	bf00      	nop
		}

	}

	return u;
 8004084:	69f8      	ldr	r0, [r7, #28]
 8004086:	f7fc fa77 	bl	8000578 <__aeabi_f2d>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	ec43 2b17 	vmov	d7, r2, r3

}
 8004092:	eeb0 0a47 	vmov.f32	s0, s14
 8004096:	eef0 0a67 	vmov.f32	s1, s15
 800409a:	3720      	adds	r7, #32
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <map>:

double map(double x, double in_min, double in_max, double out_min, double out_max){
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b092      	sub	sp, #72	; 0x48
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	ed87 0b08 	vstr	d0, [r7, #32]
 80040aa:	ed87 1b06 	vstr	d1, [r7, #24]
 80040ae:	ed87 2b04 	vstr	d2, [r7, #16]
 80040b2:	ed87 3b02 	vstr	d3, [r7, #8]
 80040b6:	ed87 4b00 	vstr	d4, [r7]

	double primera = (x - in_min);
 80040ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80040c2:	f7fc f8f9 	bl	80002b8 <__aeabi_dsub>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double segundo = (out_max - out_min);
 80040ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040d6:	f7fc f8ef 	bl	80002b8 <__aeabi_dsub>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double tercero = (in_max - in_min);
 80040e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80040ea:	f7fc f8e5 	bl	80002b8 <__aeabi_dsub>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	double result = (primera * segundo / tercero ) + out_min;
 80040f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80040fe:	f7fc fa93 	bl	8000628 <__aeabi_dmul>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800410e:	f7fc fbb5 	bl	800087c <__aeabi_ddiv>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800411a:	f7fc f8cf 	bl	80002bc <__adddf3>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return  result;
 8004126:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800412a:	ec43 2b17 	vmov	d7, r2, r3
}
 800412e:	eeb0 0a47 	vmov.f32	s0, s14
 8004132:	eef0 0a67 	vmov.f32	s1, s15
 8004136:	3748      	adds	r7, #72	; 0x48
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <pwm_Config>:
#include "PwmDriver.h"

uint16_t periodo = 0;

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a68      	ldr	r2, [pc, #416]	; (80042ec <pwm_Config+0x1b0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d106      	bne.n	800415c <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800414e:	4b68      	ldr	r3, [pc, #416]	; (80042f0 <pwm_Config+0x1b4>)
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	4a67      	ldr	r2, [pc, #412]	; (80042f0 <pwm_Config+0x1b4>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6453      	str	r3, [r2, #68]	; 0x44
 800415a:	e030      	b.n	80041be <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d106      	bne.n	8004174 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004166:	4b62      	ldr	r3, [pc, #392]	; (80042f0 <pwm_Config+0x1b4>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	4a61      	ldr	r2, [pc, #388]	; (80042f0 <pwm_Config+0x1b4>)
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	6413      	str	r3, [r2, #64]	; 0x40
 8004172:	e024      	b.n	80041be <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a5e      	ldr	r2, [pc, #376]	; (80042f4 <pwm_Config+0x1b8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d106      	bne.n	800418c <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800417e:	4b5c      	ldr	r3, [pc, #368]	; (80042f0 <pwm_Config+0x1b4>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	4a5b      	ldr	r2, [pc, #364]	; (80042f0 <pwm_Config+0x1b4>)
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
 800418a:	e018      	b.n	80041be <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a59      	ldr	r2, [pc, #356]	; (80042f8 <pwm_Config+0x1bc>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d106      	bne.n	80041a4 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8004196:	4b56      	ldr	r3, [pc, #344]	; (80042f0 <pwm_Config+0x1b4>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	4a55      	ldr	r2, [pc, #340]	; (80042f0 <pwm_Config+0x1b4>)
 800419c:	f043 0304 	orr.w	r3, r3, #4
 80041a0:	6413      	str	r3, [r2, #64]	; 0x40
 80041a2:	e00c      	b.n	80041be <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a54      	ldr	r2, [pc, #336]	; (80042fc <pwm_Config+0x1c0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d106      	bne.n	80041bc <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80041ae:	4b50      	ldr	r3, [pc, #320]	; (80042f0 <pwm_Config+0x1b4>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	4a4f      	ldr	r2, [pc, #316]	; (80042f0 <pwm_Config+0x1b4>)
 80041b4:	f043 0308 	orr.w	r3, r3, #8
 80041b8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ba:	e000      	b.n	80041be <pwm_Config+0x82>
	}
	else{
		__NOP();
 80041bc:	bf00      	nop



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	7d5b      	ldrb	r3, [r3, #21]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <pwm_Config+0x98>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f8ec 	bl	80043a4 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f95b 	bl	8004488 <setDuttyCycle>
 80041d2:	e005      	b.n	80041e0 <pwm_Config+0xa4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f8e5 	bl	80043a4 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fa04 	bl	80045e8 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0210 	bic.w	r2, r2, #16
 80041ee:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2200      	movs	r2, #0
 80041f6:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	791b      	ldrb	r3, [r3, #4]
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d86f      	bhi.n	80042e0 <pwm_Config+0x1a4>
 8004200:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <pwm_Config+0xcc>)
 8004202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004206:	bf00      	nop
 8004208:	08004219 	.word	0x08004219
 800420c:	0800424b 	.word	0x0800424b
 8004210:	0800427d 	.word	0x0800427d
 8004214:	080042af 	.word	0x080042af
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0203 	bic.w	r2, r2, #3
 8004226:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004236:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699a      	ldr	r2, [r3, #24]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0208 	orr.w	r2, r2, #8
 8004246:	619a      	str	r2, [r3, #24]


		break;
 8004248:	e04b      	b.n	80042e2 <pwm_Config+0x1a6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699a      	ldr	r2, [r3, #24]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004258:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699a      	ldr	r2, [r3, #24]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8004268:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699a      	ldr	r2, [r3, #24]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004278:	619a      	str	r2, [r3, #24]

		break;
 800427a:	e032      	b.n	80042e2 <pwm_Config+0x1a6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69da      	ldr	r2, [r3, #28]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0203 	bic.w	r2, r2, #3
 800428a:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69da      	ldr	r2, [r3, #28]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800429a:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0208 	orr.w	r2, r2, #8
 80042aa:	61da      	str	r2, [r3, #28]

		break;
 80042ac:	e019      	b.n	80042e2 <pwm_Config+0x1a6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69da      	ldr	r2, [r3, #28]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80042bc:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80042cc:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042dc:	61da      	str	r2, [r3, #28]

		break;
 80042de:	e000      	b.n	80042e2 <pwm_Config+0x1a6>
	}

	default:{
		break;
 80042e0:	bf00      	nop
	}// fin del switch-case




}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40010000 	.word	0x40010000
 80042f0:	40023800 	.word	0x40023800
 80042f4:	40000400 	.word	0x40000400
 80042f8:	40000800 	.word	0x40000800
 80042fc:	40000c00 	.word	0x40000c00

08004300 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]

}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	791b      	ldrb	r3, [r3, #4]
 8004330:	2b03      	cmp	r3, #3
 8004332:	d82f      	bhi.n	8004394 <enableOutput+0x70>
 8004334:	a201      	add	r2, pc, #4	; (adr r2, 800433c <enableOutput+0x18>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	0800434d 	.word	0x0800434d
 8004340:	0800435f 	.word	0x0800435f
 8004344:	08004371 	.word	0x08004371
 8004348:	08004383 	.word	0x08004383
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6a1a      	ldr	r2, [r3, #32]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	621a      	str	r2, [r3, #32]

		break;
 800435c:	e01b      	b.n	8004396 <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6a1a      	ldr	r2, [r3, #32]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0210 	orr.w	r2, r2, #16
 800436c:	621a      	str	r2, [r3, #32]

		break;
 800436e:	e012      	b.n	8004396 <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 3
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437e:	621a      	str	r2, [r3, #32]

		break;
 8004380:	e009      	b.n	8004396 <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 4
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6a1a      	ldr	r2, [r3, #32]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004390:	621a      	str	r2, [r3, #32]

		break;
 8004392:	e000      	b.n	8004396 <enableOutput+0x72>
	}

	default: {
		break;
 8004394:	bf00      	nop
	}
	}

	return SET;
 8004396:	2301      	movs	r3, #1
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6892      	ldr	r2, [r2, #8]
 80043b8:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if  ((speed == PWM_SPEED_16MHz_1us ) || (speed == PWM_SPEED_100MHz_1us)) {
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d002      	beq.n	80043cc <setFrequency+0x28>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2b64      	cmp	r3, #100	; 0x64
 80043ca:	d111      	bne.n	80043f0 <setFrequency+0x4c>

		periodo = ptrPwmHandler->config.periodo * 1000  ;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	899b      	ldrh	r3, [r3, #12]
 80043d0:	461a      	mov	r2, r3
 80043d2:	0152      	lsls	r2, r2, #5
 80043d4:	1ad2      	subs	r2, r2, r3
 80043d6:	0092      	lsls	r2, r2, #2
 80043d8:	4413      	add	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	b29a      	uxth	r2, r3
 80043de:	4b29      	ldr	r3, [pc, #164]	; (8004484 <setFrequency+0xe0>)
 80043e0:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80043e2:	4b28      	ldr	r3, [pc, #160]	; (8004484 <setFrequency+0xe0>)
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	1e5a      	subs	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80043ee:	e043      	b.n	8004478 <setFrequency+0xd4>


	}else if ((speed == PWM_SPEED_16MHz_10us ) || (speed == PWM_SPEED_100MHz_10us)){
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2ba0      	cmp	r3, #160	; 0xa0
 80043f4:	d003      	beq.n	80043fe <setFrequency+0x5a>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043fc:	d114      	bne.n	8004428 <setFrequency+0x84>

		periodo = ptrPwmHandler->config.periodo * 100  ;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	899b      	ldrh	r3, [r3, #12]
 8004402:	461a      	mov	r2, r3
 8004404:	0092      	lsls	r2, r2, #2
 8004406:	4413      	add	r3, r2
 8004408:	461a      	mov	r2, r3
 800440a:	0091      	lsls	r1, r2, #2
 800440c:	461a      	mov	r2, r3
 800440e:	460b      	mov	r3, r1
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	b29a      	uxth	r2, r3
 8004416:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <setFrequency+0xe0>)
 8004418:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800441a:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <setFrequency+0xe0>)
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	1e5a      	subs	r2, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	62da      	str	r2, [r3, #44]	; 0x2c
 8004426:	e027      	b.n	8004478 <setFrequency+0xd4>

	}else if ((speed == PWM_SPEED_16MHz_100us ) || (speed == PWM_SPEED_100MHz_100us)){
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800442e:	d004      	beq.n	800443a <setFrequency+0x96>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f242 7210 	movw	r2, #10000	; 0x2710
 8004436:	4293      	cmp	r3, r2
 8004438:	d10f      	bne.n	800445a <setFrequency+0xb6>

		periodo = ptrPwmHandler->config.periodo * 10  ;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	899b      	ldrh	r3, [r3, #12]
 800443e:	461a      	mov	r2, r3
 8004440:	0092      	lsls	r2, r2, #2
 8004442:	4413      	add	r3, r2
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <setFrequency+0xe0>)
 800444a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800444c:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <setFrequency+0xe0>)
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	1e5a      	subs	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	62da      	str	r2, [r3, #44]	; 0x2c
 8004458:	e00e      	b.n	8004478 <setFrequency+0xd4>


	}else if ((speed == PWM_SPEED_16MHz_1ms )){
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004460:	d10a      	bne.n	8004478 <setFrequency+0xd4>

		periodo = ptrPwmHandler->config.periodo   ;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	899a      	ldrh	r2, [r3, #12]
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <setFrequency+0xe0>)
 8004468:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <setFrequency+0xe0>)
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	1e5a      	subs	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	62da      	str	r2, [r3, #44]	; 0x2c

	}

}
 8004476:	e7ff      	b.n	8004478 <setFrequency+0xd4>
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	20000594 	.word	0x20000594

08004488 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b08b      	sub	sp, #44	; 0x2c
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	791b      	ldrb	r3, [r3, #4]
 8004494:	2b03      	cmp	r3, #3
 8004496:	f200 809f 	bhi.w	80045d8 <setDuttyCycle+0x150>
 800449a:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <setDuttyCycle+0x18>)
 800449c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a0:	080044b1 	.word	0x080044b1
 80044a4:	080044fb 	.word	0x080044fb
 80044a8:	08004545 	.word	0x08004545
 80044ac:	0800458f 	.word	0x0800458f
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	ed93 7a04 	vldr	s14, [r3, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	899b      	ldrh	r3, [r3, #12]
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c6:	ee17 0a90 	vmov	r0, s15
 80044ca:	f7fc f855 	bl	8000578 <__aeabi_f2d>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100;
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	4b42      	ldr	r3, [pc, #264]	; (80045e4 <setDuttyCycle+0x15c>)
 80044dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044e0:	f7fc f9cc 	bl	800087c <__aeabi_ddiv>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4610      	mov	r0, r2
 80044ea:	4619      	mov	r1, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681c      	ldr	r4, [r3, #0]
 80044f0:	f7fc fb72 	bl	8000bd8 <__aeabi_d2uiz>
 80044f4:	4603      	mov	r3, r0
 80044f6:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 80044f8:	e06f      	b.n	80045da <setDuttyCycle+0x152>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	899b      	ldrh	r3, [r3, #12]
 8004504:	ee07 3a90 	vmov	s15, r3
 8004508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800450c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004510:	ee17 0a90 	vmov	r0, s15
 8004514:	f7fc f830 	bl	8000578 <__aeabi_f2d>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100;
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	4b2f      	ldr	r3, [pc, #188]	; (80045e4 <setDuttyCycle+0x15c>)
 8004526:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800452a:	f7fc f9a7 	bl	800087c <__aeabi_ddiv>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4610      	mov	r0, r2
 8004534:	4619      	mov	r1, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681c      	ldr	r4, [r3, #0]
 800453a:	f7fc fb4d 	bl	8000bd8 <__aeabi_d2uiz>
 800453e:	4603      	mov	r3, r0
 8004540:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8004542:	e04a      	b.n	80045da <setDuttyCycle+0x152>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	ed93 7a04 	vldr	s14, [r3, #16]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	899b      	ldrh	r3, [r3, #12]
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455a:	ee17 0a90 	vmov	r0, s15
 800455e:	f7fc f80b 	bl	8000578 <__aeabi_f2d>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100;
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	4b1d      	ldr	r3, [pc, #116]	; (80045e4 <setDuttyCycle+0x15c>)
 8004570:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004574:	f7fc f982 	bl	800087c <__aeabi_ddiv>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4610      	mov	r0, r2
 800457e:	4619      	mov	r1, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681c      	ldr	r4, [r3, #0]
 8004584:	f7fc fb28 	bl	8000bd8 <__aeabi_d2uiz>
 8004588:	4603      	mov	r3, r0
 800458a:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800458c:	e025      	b.n	80045da <setDuttyCycle+0x152>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	ed93 7a04 	vldr	s14, [r3, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	899b      	ldrh	r3, [r3, #12]
 8004598:	ee07 3a90 	vmov	s15, r3
 800459c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a4:	ee17 0a90 	vmov	r0, s15
 80045a8:	f7fb ffe6 	bl	8000578 <__aeabi_f2d>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100;
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <setDuttyCycle+0x15c>)
 80045ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80045be:	f7fc f95d 	bl	800087c <__aeabi_ddiv>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4610      	mov	r0, r2
 80045c8:	4619      	mov	r1, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681c      	ldr	r4, [r3, #0]
 80045ce:	f7fc fb03 	bl	8000bd8 <__aeabi_d2uiz>
 80045d2:	4603      	mov	r3, r0
 80045d4:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 80045d6:	e000      	b.n	80045da <setDuttyCycle+0x152>
	}

	default:{
		break;
 80045d8:	bf00      	nop
	}

	}// fin del switch-case

}
 80045da:	bf00      	nop
 80045dc:	372c      	adds	r7, #44	; 0x2c
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd90      	pop	{r4, r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40590000 	.word	0x40590000

080045e8 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b08b      	sub	sp, #44	; 0x2c
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	791b      	ldrb	r3, [r3, #4]
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	f200 80af 	bhi.w	8004758 <setDuttyCycleAfOpt+0x170>
 80045fa:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <setDuttyCycleAfOpt+0x18>)
 80045fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004600:	08004611 	.word	0x08004611
 8004604:	08004663 	.word	0x08004663
 8004608:	080046b5 	.word	0x080046b5
 800460c:	08004707 	.word	0x08004707
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	edd3 7a04 	vldr	s15, [r3, #16]
 8004616:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8004764 <setDuttyCycleAfOpt+0x17c>
 800461a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800461e:	4b52      	ldr	r3, [pc, #328]	; (8004768 <setDuttyCycleAfOpt+0x180>)
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800462a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462e:	ee17 0a90 	vmov	r0, s15
 8004632:	f7fb ffa1 	bl	8000578 <__aeabi_f2d>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100;
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	4b4a      	ldr	r3, [pc, #296]	; (800476c <setDuttyCycleAfOpt+0x184>)
 8004644:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004648:	f7fc f918 	bl	800087c <__aeabi_ddiv>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4610      	mov	r0, r2
 8004652:	4619      	mov	r1, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681c      	ldr	r4, [r3, #0]
 8004658:	f7fc fabe 	bl	8000bd8 <__aeabi_d2uiz>
 800465c:	4603      	mov	r3, r0
 800465e:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8004660:	e07b      	b.n	800475a <setDuttyCycleAfOpt+0x172>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	edd3 7a04 	vldr	s15, [r3, #16]
 8004668:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004764 <setDuttyCycleAfOpt+0x17c>
 800466c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004670:	4b3d      	ldr	r3, [pc, #244]	; (8004768 <setDuttyCycleAfOpt+0x180>)
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	ee07 3a90 	vmov	s15, r3
 8004678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800467c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004680:	ee17 0a90 	vmov	r0, s15
 8004684:	f7fb ff78 	bl	8000578 <__aeabi_f2d>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100;
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	4b35      	ldr	r3, [pc, #212]	; (800476c <setDuttyCycleAfOpt+0x184>)
 8004696:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800469a:	f7fc f8ef 	bl	800087c <__aeabi_ddiv>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4610      	mov	r0, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681c      	ldr	r4, [r3, #0]
 80046aa:	f7fc fa95 	bl	8000bd8 <__aeabi_d2uiz>
 80046ae:	4603      	mov	r3, r0
 80046b0:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 80046b2:	e052      	b.n	800475a <setDuttyCycleAfOpt+0x172>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80046ba:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004764 <setDuttyCycleAfOpt+0x17c>
 80046be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046c2:	4b29      	ldr	r3, [pc, #164]	; (8004768 <setDuttyCycleAfOpt+0x180>)
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d2:	ee17 0a90 	vmov	r0, s15
 80046d6:	f7fb ff4f 	bl	8000578 <__aeabi_f2d>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100;
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	4b21      	ldr	r3, [pc, #132]	; (800476c <setDuttyCycleAfOpt+0x184>)
 80046e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046ec:	f7fc f8c6 	bl	800087c <__aeabi_ddiv>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4610      	mov	r0, r2
 80046f6:	4619      	mov	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681c      	ldr	r4, [r3, #0]
 80046fc:	f7fc fa6c 	bl	8000bd8 <__aeabi_d2uiz>
 8004700:	4603      	mov	r3, r0
 8004702:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8004704:	e029      	b.n	800475a <setDuttyCycleAfOpt+0x172>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	edd3 7a04 	vldr	s15, [r3, #16]
 800470c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004764 <setDuttyCycleAfOpt+0x17c>
 8004710:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004714:	4b14      	ldr	r3, [pc, #80]	; (8004768 <setDuttyCycleAfOpt+0x180>)
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	ee07 3a90 	vmov	s15, r3
 800471c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004724:	ee17 0a90 	vmov	r0, s15
 8004728:	f7fb ff26 	bl	8000578 <__aeabi_f2d>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100;
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	4b0c      	ldr	r3, [pc, #48]	; (800476c <setDuttyCycleAfOpt+0x184>)
 800473a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800473e:	f7fc f89d 	bl	800087c <__aeabi_ddiv>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4610      	mov	r0, r2
 8004748:	4619      	mov	r1, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681c      	ldr	r4, [r3, #0]
 800474e:	f7fc fa43 	bl	8000bd8 <__aeabi_d2uiz>
 8004752:	4603      	mov	r3, r0
 8004754:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8004756:	e000      	b.n	800475a <setDuttyCycleAfOpt+0x172>
	}

	default:{
		break;
 8004758:	bf00      	nop
	}

	}// fin del switch-case


}
 800475a:	bf00      	nop
 800475c:	372c      	adds	r7, #44	; 0x2c
 800475e:	46bd      	mov	sp, r7
 8004760:	bd90      	pop	{r4, r7, pc}
 8004762:	bf00      	nop
 8004764:	42c80000 	.word	0x42c80000
 8004768:	20000594 	.word	0x20000594
 800476c:	40590000 	.word	0x40590000

08004770 <showPWMBfOpt>:

	return PWMdutty;

}

uint8_t showPWMBfOpt (PWM_Handler_t *ptrPwmHandler){
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]

	uint8_t PWMdutty = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	73fb      	strb	r3, [r7, #15]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	791b      	ldrb	r3, [r3, #4]
 8004780:	2b03      	cmp	r3, #3
 8004782:	d847      	bhi.n	8004814 <showPWMBfOpt+0xa4>
 8004784:	a201      	add	r2, pc, #4	; (adr r2, 800478c <showPWMBfOpt+0x1c>)
 8004786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478a:	bf00      	nop
 800478c:	0800479d 	.word	0x0800479d
 8004790:	080047bb 	.word	0x080047bb
 8004794:	080047d9 	.word	0x080047d9
 8004798:	080047f7 	.word	0x080047f7
	case PWM_CHANNEL_1:{

		PWMdutty = 100-(ptrPwmHandler->ptrTIMx->CCR1)*100 / periodo;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a2:	2264      	movs	r2, #100	; 0x64
 80047a4:	fb02 f303 	mul.w	r3, r2, r3
 80047a8:	4a1e      	ldr	r2, [pc, #120]	; (8004824 <showPWMBfOpt+0xb4>)
 80047aa:	8812      	ldrh	r2, [r2, #0]
 80047ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80047b6:	73fb      	strb	r3, [r7, #15]
		break;
 80047b8:	e02d      	b.n	8004816 <showPWMBfOpt+0xa6>
	}

	case PWM_CHANNEL_2:{
		PWMdutty = 100-(ptrPwmHandler->ptrTIMx->CCR2)*100 / periodo;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	2264      	movs	r2, #100	; 0x64
 80047c2:	fb02 f303 	mul.w	r3, r2, r3
 80047c6:	4a17      	ldr	r2, [pc, #92]	; (8004824 <showPWMBfOpt+0xb4>)
 80047c8:	8812      	ldrh	r2, [r2, #0]
 80047ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80047d4:	73fb      	strb	r3, [r7, #15]
		break;
 80047d6:	e01e      	b.n	8004816 <showPWMBfOpt+0xa6>
	}

	case PWM_CHANNEL_3:{
		PWMdutty = 100-(ptrPwmHandler->ptrTIMx->CCR3)*100 / periodo;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	2264      	movs	r2, #100	; 0x64
 80047e0:	fb02 f303 	mul.w	r3, r2, r3
 80047e4:	4a0f      	ldr	r2, [pc, #60]	; (8004824 <showPWMBfOpt+0xb4>)
 80047e6:	8812      	ldrh	r2, [r2, #0]
 80047e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80047f2:	73fb      	strb	r3, [r7, #15]
		break;
 80047f4:	e00f      	b.n	8004816 <showPWMBfOpt+0xa6>
	}

	case PWM_CHANNEL_4:{
		PWMdutty = 100-(ptrPwmHandler->ptrTIMx->CCR4)*100 / periodo;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	2264      	movs	r2, #100	; 0x64
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	4a08      	ldr	r2, [pc, #32]	; (8004824 <showPWMBfOpt+0xb4>)
 8004804:	8812      	ldrh	r2, [r2, #0]
 8004806:	fbb3 f3f2 	udiv	r3, r3, r2
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004810:	73fb      	strb	r3, [r7, #15]
		break;
 8004812:	e000      	b.n	8004816 <showPWMBfOpt+0xa6>
	}

	default:{
		break;
 8004814:	bf00      	nop
	}

	}// fin del switch-case

	return PWMdutty;
 8004816:	7bfb      	ldrb	r3, [r7, #15]

}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	20000594 	.word	0x20000594

08004828 <updateDuttyCycleAfOpt>:
	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
    setDuttyCycle(ptrPwmHandler);
}


void updateDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler, float newDutty){
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	ed87 0a00 	vstr	s0, [r7]

	// Actualizamos el registro que manipula el dutty
	ptrPwmHandler->config.duttyCicle = newDutty;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	611a      	str	r2, [r3, #16]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
	setDuttyCycleAfOpt(ptrPwmHandler);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff fed4 	bl	80045e8 <setDuttyCycleAfOpt>

}
 8004840:	bf00      	nop
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	791b      	ldrb	r3, [r3, #4]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d82f      	bhi.n	80048b8 <disableOutput+0x70>
 8004858:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <disableOutput+0x18>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004871 	.word	0x08004871
 8004864:	08004883 	.word	0x08004883
 8004868:	08004895 	.word	0x08004895
 800486c:	080048a7 	.word	0x080048a7
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6a1a      	ldr	r2, [r3, #32]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0201 	bic.w	r2, r2, #1
 800487e:	621a      	str	r2, [r3, #32]

			break;
 8004880:	e01b      	b.n	80048ba <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6a1a      	ldr	r2, [r3, #32]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0210 	bic.w	r2, r2, #16
 8004890:	621a      	str	r2, [r3, #32]

			break;
 8004892:	e012      	b.n	80048ba <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6a1a      	ldr	r2, [r3, #32]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048a2:	621a      	str	r2, [r3, #32]

			break;
 80048a4:	e009      	b.n	80048ba <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6a1a      	ldr	r2, [r3, #32]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048b4:	621a      	str	r2, [r3, #32]

			break;
 80048b6:	e000      	b.n	80048ba <disableOutput+0x72>
		}

		default: {
			break;
 80048b8:	bf00      	nop
		}
		}

	return RESET;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(void){
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0


	//Nos aseguramos que el PLL esta apagado para asi hacer la configuracion del mismo, ademas selecc
	RCC->CR &= ~(RCC_CR_PLLON);
 80048cc:	4b33      	ldr	r3, [pc, #204]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a32      	ldr	r2, [pc, #200]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 80048d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048d6:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80048d8:	4b30      	ldr	r3, [pc, #192]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 80048da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048de:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de 100MHz
	PWR->CR |= (0b11 << 14);
 80048e0:	4b2f      	ldr	r3, [pc, #188]	; (80049a0 <RCC_enableMaxFrequencies+0xd8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a2e      	ldr	r2, [pc, #184]	; (80049a0 <RCC_enableMaxFrequencies+0xd8>)
 80048e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048ea:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= 0;
 80048ec:	4b2b      	ldr	r3, [pc, #172]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	4b2a      	ldr	r3, [pc, #168]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	605a      	str	r2, [r3, #4]

	//Montamos sobre el RCC_PLL config las subdivisiones necesarias para obtener la salida de frecuencia de reloj que deseamos
	RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 80048f6:	4b29      	ldr	r3, [pc, #164]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4a28      	ldr	r2, [pc, #160]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 80048fc:	f043 0308 	orr.w	r3, r3, #8
 8004900:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8004902:	4b26      	ldr	r3, [pc, #152]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	4a25      	ldr	r2, [pc, #148]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 8004908:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800490c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800490e:	4b23      	ldr	r3, [pc, #140]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	4a22      	ldr	r2, [pc, #136]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 8004914:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004918:	6053      	str	r3, [r2, #4]

	//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
	RCC->CR |= RCC_CR_PLLON;
 800491a:	4b20      	ldr	r3, [pc, #128]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1f      	ldr	r2, [pc, #124]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 8004920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004924:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004926:	e000      	b.n	800492a <RCC_enableMaxFrequencies+0x62>
		__NOP();
 8004928:	bf00      	nop
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 800492a:	4b1c      	ldr	r3, [pc, #112]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0f8      	beq.n	8004928 <RCC_enableMaxFrequencies+0x60>
	}

	//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
	RCC->CFGR &= ~(0b111 << 13);
 8004936:	4b19      	ldr	r3, [pc, #100]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	4a18      	ldr	r2, [pc, #96]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 800493c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004940:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b100 << 10);
 8004942:	4b16      	ldr	r3, [pc, #88]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	4a15      	ldr	r2, [pc, #84]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 8004948:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800494c:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~(0xF << 4);
 800494e:	4b13      	ldr	r3, [pc, #76]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	4a12      	ldr	r2, [pc, #72]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 8004954:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004958:	6093      	str	r3, [r2, #8]

	//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
	FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800495a:	4b12      	ldr	r3, [pc, #72]	; (80049a4 <RCC_enableMaxFrequencies+0xdc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a11      	ldr	r2, [pc, #68]	; (80049a4 <RCC_enableMaxFrequencies+0xdc>)
 8004960:	f023 030f 	bic.w	r3, r3, #15
 8004964:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8004966:	4b0f      	ldr	r3, [pc, #60]	; (80049a4 <RCC_enableMaxFrequencies+0xdc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a0e      	ldr	r2, [pc, #56]	; (80049a4 <RCC_enableMaxFrequencies+0xdc>)
 800496c:	f043 0303 	orr.w	r3, r3, #3
 8004970:	6013      	str	r3, [r2, #0]


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004972:	4b0a      	ldr	r3, [pc, #40]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	4a09      	ldr	r2, [pc, #36]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 8004978:	f043 0302 	orr.w	r3, r3, #2
 800497c:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800497e:	e000      	b.n	8004982 <RCC_enableMaxFrequencies+0xba>
		__NOP();
 8004980:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8004982:	4b06      	ldr	r3, [pc, #24]	; (800499c <RCC_enableMaxFrequencies+0xd4>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f8      	beq.n	8004980 <RCC_enableMaxFrequencies+0xb8>
	}



}
 800498e:	bf00      	nop
 8004990:	bf00      	nop
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40023800 	.word	0x40023800
 80049a0:	40007000 	.word	0x40007000
 80049a4:	40023c00 	.word	0x40023c00

080049a8 <__NVIC_EnableIRQ>:
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	db0b      	blt.n	80049d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	f003 021f 	and.w	r2, r3, #31
 80049c0:	4907      	ldr	r1, [pc, #28]	; (80049e0 <__NVIC_EnableIRQ+0x38>)
 80049c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	2001      	movs	r0, #1
 80049ca:	fa00 f202 	lsl.w	r2, r0, r2
 80049ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	e000e100 	.word	0xe000e100

080049e4 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 80049e4:	b590      	push	{r4, r7, lr}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80049ec:	b672      	cpsid	i
}
 80049ee:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a8f      	ldr	r2, [pc, #572]	; (8004c34 <USART_Config+0x250>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d106      	bne.n	8004a08 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80049fa:	4b8f      	ldr	r3, [pc, #572]	; (8004c38 <USART_Config+0x254>)
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	4a8e      	ldr	r2, [pc, #568]	; (8004c38 <USART_Config+0x254>)
 8004a00:	f043 0310 	orr.w	r3, r3, #16
 8004a04:	6453      	str	r3, [r2, #68]	; 0x44
 8004a06:	e018      	b.n	8004a3a <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a8b      	ldr	r2, [pc, #556]	; (8004c3c <USART_Config+0x258>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d106      	bne.n	8004a20 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8004a12:	4b89      	ldr	r3, [pc, #548]	; (8004c38 <USART_Config+0x254>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	4a88      	ldr	r2, [pc, #544]	; (8004c38 <USART_Config+0x254>)
 8004a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a1e:	e00c      	b.n	8004a3a <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a86      	ldr	r2, [pc, #536]	; (8004c40 <USART_Config+0x25c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d106      	bne.n	8004a38 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8004a2a:	4b83      	ldr	r3, [pc, #524]	; (8004c38 <USART_Config+0x254>)
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2e:	4a82      	ldr	r2, [pc, #520]	; (8004c38 <USART_Config+0x254>)
 8004a30:	f043 0320 	orr.w	r3, r3, #32
 8004a34:	6453      	str	r3, [r2, #68]	; 0x44
 8004a36:	e000      	b.n	8004a3a <USART_Config+0x56>
	}
	else{
		__NOP();
 8004a38:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2200      	movs	r2, #0
 8004a48:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	7a5b      	ldrb	r3, [r3, #9]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d025      	beq.n	8004a9e <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	7a5b      	ldrb	r3, [r3, #9]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d110      	bne.n	8004a7c <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a68:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a78:	60da      	str	r2, [r3, #12]
 8004a7a:	e018      	b.n	8004aae <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8a:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a9a:	60da      	str	r2, [r3, #12]
 8004a9c:	e007      	b.n	8004aae <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aac:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	7a1b      	ldrb	r3, [r3, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d108      	bne.n	8004ac8 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	e007      	b.n	8004ad8 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ad6:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	7a9b      	ldrb	r3, [r3, #10]
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d82f      	bhi.n	8004b40 <USART_Config+0x15c>
 8004ae0:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <USART_Config+0x104>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004af9 	.word	0x08004af9
 8004aec:	08004b0b 	.word	0x08004b0b
 8004af0:	08004b1d 	.word	0x08004b1d
 8004af4:	08004b2f 	.word	0x08004b2f
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004b06:	611a      	str	r2, [r3, #16]
		break;
 8004b08:	e023      	b.n	8004b52 <USART_Config+0x16e>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b18:	611a      	str	r2, [r3, #16]
		break;
 8004b1a:	e01a      	b.n	8004b52 <USART_Config+0x16e>
	}
	case USART_STOPBIT_2: {
		// Debemoscargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691a      	ldr	r2, [r3, #16]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b2a:	611a      	str	r2, [r3, #16]
		break;
 8004b2c:	e011      	b.n	8004b52 <USART_Config+0x16e>
	}
	case USART_STOPBIT_1_5: {
		// Debemoscargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004b3c:	611a      	str	r2, [r3, #16]
		break;
 8004b3e:	e008      	b.n	8004b52 <USART_Config+0x16e>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004b4e:	611a      	str	r2, [r3, #16]
		break;
 8004b50:	bf00      	nop
	}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681c      	ldr	r4, [r3, #0]
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f8cb 	bl	8004cf8 <brrCalculus>
 8004b62:	4603      	mov	r3, r0
 8004b64:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	799b      	ldrb	r3, [r3, #6]
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d82e      	bhi.n	8004bcc <USART_Config+0x1e8>
 8004b6e:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <USART_Config+0x190>)
 8004b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b74:	08004b85 	.word	0x08004b85
 8004b78:	08004b97 	.word	0x08004b97
 8004b7c:	08004ba9 	.word	0x08004ba9
 8004b80:	08004bbb 	.word	0x08004bbb
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0208 	orr.w	r2, r2, #8
 8004b92:	60da      	str	r2, [r3, #12]
		break;
 8004b94:	e023      	b.n	8004bde <USART_Config+0x1fa>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0204 	orr.w	r2, r2, #4
 8004ba4:	60da      	str	r2, [r3, #12]
		break;
 8004ba6:	e01a      	b.n	8004bde <USART_Config+0x1fa>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 020c 	orr.w	r2, r2, #12
 8004bb6:	60da      	str	r2, [r3, #12]
		break;
 8004bb8:	e011      	b.n	8004bde <USART_Config+0x1fa>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 020c 	bic.w	r2, r2, #12
 8004bc8:	60da      	str	r2, [r3, #12]
		break;
 8004bca:	e008      	b.n	8004bde <USART_Config+0x1fa>
	}
	
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 020c 	bic.w	r2, r2, #12
 8004bda:	60da      	str	r2, [r3, #12]
		break;
 8004bdc:	bf00      	nop
	}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	799b      	ldrb	r3, [r3, #6]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d008      	beq.n	8004bf8 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bf4:	60da      	str	r2, [r3, #12]
 8004bf6:	e007      	b.n	8004c08 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c06:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	795b      	ldrb	r3, [r3, #5]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d12d      	bne.n	8004c6c <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0220 	orr.w	r2, r2, #32
 8004c1e:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a03      	ldr	r2, [pc, #12]	; (8004c34 <USART_Config+0x250>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d10c      	bne.n	8004c44 <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8004c2a:	2025      	movs	r0, #37	; 0x25
 8004c2c:	f7ff febc 	bl	80049a8 <__NVIC_EnableIRQ>
 8004c30:	e024      	b.n	8004c7c <USART_Config+0x298>
 8004c32:	bf00      	nop
 8004c34:	40011000 	.word	0x40011000
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40004400 	.word	0x40004400
 8004c40:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a28      	ldr	r2, [pc, #160]	; (8004cec <USART_Config+0x308>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d103      	bne.n	8004c56 <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8004c4e:	2026      	movs	r0, #38	; 0x26
 8004c50:	f7ff feaa 	bl	80049a8 <__NVIC_EnableIRQ>
 8004c54:	e012      	b.n	8004c7c <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a25      	ldr	r2, [pc, #148]	; (8004cf0 <USART_Config+0x30c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d103      	bne.n	8004c68 <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8004c60:	2047      	movs	r0, #71	; 0x47
 8004c62:	f7ff fea1 	bl	80049a8 <__NVIC_EnableIRQ>
 8004c66:	e009      	b.n	8004c7c <USART_Config+0x298>
		}
		else{
				__NOP();
 8004c68:	bf00      	nop
 8004c6a:	e007      	b.n	8004c7c <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0220 	bic.w	r2, r2, #32
 8004c7a:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	791b      	ldrb	r3, [r3, #4]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d124      	bne.n	8004cce <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c92:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <USART_Config+0x310>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d103      	bne.n	8004ca6 <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8004c9e:	2025      	movs	r0, #37	; 0x25
 8004ca0:	f7ff fe82 	bl	80049a8 <__NVIC_EnableIRQ>
 8004ca4:	e01b      	b.n	8004cde <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a10      	ldr	r2, [pc, #64]	; (8004cec <USART_Config+0x308>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d103      	bne.n	8004cb8 <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8004cb0:	2026      	movs	r0, #38	; 0x26
 8004cb2:	f7ff fe79 	bl	80049a8 <__NVIC_EnableIRQ>
 8004cb6:	e012      	b.n	8004cde <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a0c      	ldr	r2, [pc, #48]	; (8004cf0 <USART_Config+0x30c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d103      	bne.n	8004cca <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8004cc2:	2047      	movs	r0, #71	; 0x47
 8004cc4:	f7ff fe70 	bl	80049a8 <__NVIC_EnableIRQ>
 8004cc8:	e009      	b.n	8004cde <USART_Config+0x2fa>
		}
		else{
				__NOP();
 8004cca:	bf00      	nop
 8004ccc:	e007      	b.n	8004cde <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cdc:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004cde:	b662      	cpsie	i
}
 8004ce0:	bf00      	nop
	}

	__enable_irq();
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd90      	pop	{r4, r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40004400 	.word	0x40004400
 8004cf0:	40011400 	.word	0x40011400
 8004cf4:	40011000 	.word	0x40011000

08004cf8 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8004cf8:	b5b0      	push	{r4, r5, r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	79db      	ldrb	r3, [r3, #7]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	f200 8217 	bhi.w	800513a <brrCalculus+0x442>
 8004d0c:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <brrCalculus+0x1c>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d25 	.word	0x08004d25
 8004d18:	08004e1f 	.word	0x08004e1f
 8004d1c:	08004f39 	.word	0x08004f39
 8004d20:	08005041 	.word	0x08005041

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8004d24:	4980      	ldr	r1, [pc, #512]	; (8004f28 <brrCalculus+0x230>)
 8004d26:	a37c      	add	r3, pc, #496	; (adr r3, 8004f18 <brrCalculus+0x220>)
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3a:	ee17 0a90 	vmov	r0, s15
 8004d3e:	f7fb fc1b 	bl	8000578 <__aeabi_f2d>
 8004d42:	4b79      	ldr	r3, [pc, #484]	; (8004f28 <brrCalculus+0x230>)
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f7fb fc6e 	bl	8000628 <__aeabi_dmul>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4975      	ldr	r1, [pc, #468]	; (8004f28 <brrCalculus+0x230>)
 8004d52:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8004d56:	4b74      	ldr	r3, [pc, #464]	; (8004f28 <brrCalculus+0x230>)
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4619      	mov	r1, r3
 8004d60:	f7fb ff12 	bl	8000b88 <__aeabi_d2iz>
 8004d64:	4603      	mov	r3, r0
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	4b70      	ldr	r3, [pc, #448]	; (8004f2c <brrCalculus+0x234>)
 8004d6a:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004d6c:	4b6e      	ldr	r3, [pc, #440]	; (8004f28 <brrCalculus+0x230>)
 8004d6e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004d72:	4b6d      	ldr	r3, [pc, #436]	; (8004f28 <brrCalculus+0x230>)
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	4610      	mov	r0, r2
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	f7fb ff04 	bl	8000b88 <__aeabi_d2iz>
 8004d80:	4603      	mov	r3, r0
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fb fbe6 	bl	8000554 <__aeabi_i2d>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	4629      	mov	r1, r5
 8004d90:	f7fb fa92 	bl	80002b8 <__aeabi_dsub>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4610      	mov	r0, r2
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	f7fb ff3c 	bl	8000c18 <__aeabi_d2f>
 8004da0:	4603      	mov	r3, r0
 8004da2:	4a63      	ldr	r2, [pc, #396]	; (8004f30 <brrCalculus+0x238>)
 8004da4:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004da6:	4b62      	ldr	r3, [pc, #392]	; (8004f30 <brrCalculus+0x238>)
 8004da8:	edd3 7a00 	vldr	s15, [r3]
 8004dac:	2004      	movs	r0, #4
 8004dae:	eeb0 0a67 	vmov.f32	s0, s15
 8004db2:	f000 fa6d 	bl	8005290 <roundToNDecimals>
 8004db6:	eef0 7a40 	vmov.f32	s15, s0
 8004dba:	4b5d      	ldr	r3, [pc, #372]	; (8004f30 <brrCalculus+0x238>)
 8004dbc:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8004dc0:	4b5b      	ldr	r3, [pc, #364]	; (8004f30 <brrCalculus+0x238>)
 8004dc2:	edd3 7a00 	vldr	s15, [r3]
 8004dc6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004dca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dce:	4b58      	ldr	r3, [pc, #352]	; (8004f30 <brrCalculus+0x238>)
 8004dd0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8004dd4:	4b56      	ldr	r3, [pc, #344]	; (8004f30 <brrCalculus+0x238>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fb fbcd 	bl	8000578 <__aeabi_f2d>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	ec43 2b10 	vmov	d0, r2, r3
 8004de6:	f004 f8c1 	bl	8008f6c <round>
 8004dea:	ec53 2b10 	vmov	r2, r3, d0
 8004dee:	4610      	mov	r0, r2
 8004df0:	4619      	mov	r1, r3
 8004df2:	f7fb ff11 	bl	8000c18 <__aeabi_d2f>
 8004df6:	4603      	mov	r3, r0
 8004df8:	4a4d      	ldr	r2, [pc, #308]	; (8004f30 <brrCalculus+0x238>)
 8004dfa:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8004dfc:	4b4b      	ldr	r3, [pc, #300]	; (8004f2c <brrCalculus+0x234>)
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	4b4a      	ldr	r3, [pc, #296]	; (8004f30 <brrCalculus+0x238>)
 8004e06:	edd3 7a00 	vldr	s15, [r3]
 8004e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e0e:	ee17 3a90 	vmov	r3, s15
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	4313      	orrs	r3, r2
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	4b46      	ldr	r3, [pc, #280]	; (8004f34 <brrCalculus+0x23c>)
 8004e1a:	801a      	strh	r2, [r3, #0]


		break;
 8004e1c:	e18f      	b.n	800513e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 8004e1e:	4942      	ldr	r1, [pc, #264]	; (8004f28 <brrCalculus+0x230>)
 8004e20:	a33f      	add	r3, pc, #252	; (adr r3, 8004f20 <brrCalculus+0x228>)
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e34:	ee17 0a90 	vmov	r0, s15
 8004e38:	f7fb fb9e 	bl	8000578 <__aeabi_f2d>
 8004e3c:	4b3a      	ldr	r3, [pc, #232]	; (8004f28 <brrCalculus+0x230>)
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	f7fb fbf1 	bl	8000628 <__aeabi_dmul>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4937      	ldr	r1, [pc, #220]	; (8004f28 <brrCalculus+0x230>)
 8004e4c:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8004e50:	4b35      	ldr	r3, [pc, #212]	; (8004f28 <brrCalculus+0x230>)
 8004e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e56:	4610      	mov	r0, r2
 8004e58:	4619      	mov	r1, r3
 8004e5a:	f7fb fe95 	bl	8000b88 <__aeabi_d2iz>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	4b32      	ldr	r3, [pc, #200]	; (8004f2c <brrCalculus+0x234>)
 8004e64:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004e66:	4b30      	ldr	r3, [pc, #192]	; (8004f28 <brrCalculus+0x230>)
 8004e68:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004e6c:	4b2e      	ldr	r3, [pc, #184]	; (8004f28 <brrCalculus+0x230>)
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	4610      	mov	r0, r2
 8004e74:	4619      	mov	r1, r3
 8004e76:	f7fb fe87 	bl	8000b88 <__aeabi_d2iz>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fb fb69 	bl	8000554 <__aeabi_i2d>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4620      	mov	r0, r4
 8004e88:	4629      	mov	r1, r5
 8004e8a:	f7fb fa15 	bl	80002b8 <__aeabi_dsub>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4610      	mov	r0, r2
 8004e94:	4619      	mov	r1, r3
 8004e96:	f7fb febf 	bl	8000c18 <__aeabi_d2f>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4a24      	ldr	r2, [pc, #144]	; (8004f30 <brrCalculus+0x238>)
 8004e9e:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004ea0:	4b23      	ldr	r3, [pc, #140]	; (8004f30 <brrCalculus+0x238>)
 8004ea2:	edd3 7a00 	vldr	s15, [r3]
 8004ea6:	2004      	movs	r0, #4
 8004ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8004eac:	f000 f9f0 	bl	8005290 <roundToNDecimals>
 8004eb0:	eef0 7a40 	vmov.f32	s15, s0
 8004eb4:	4b1e      	ldr	r3, [pc, #120]	; (8004f30 <brrCalculus+0x238>)
 8004eb6:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8004eba:	4b1d      	ldr	r3, [pc, #116]	; (8004f30 <brrCalculus+0x238>)
 8004ebc:	edd3 7a00 	vldr	s15, [r3]
 8004ec0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ec8:	4b19      	ldr	r3, [pc, #100]	; (8004f30 <brrCalculus+0x238>)
 8004eca:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8004ece:	4b18      	ldr	r3, [pc, #96]	; (8004f30 <brrCalculus+0x238>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fb fb50 	bl	8000578 <__aeabi_f2d>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	ec43 2b10 	vmov	d0, r2, r3
 8004ee0:	f004 f844 	bl	8008f6c <round>
 8004ee4:	ec53 2b10 	vmov	r2, r3, d0
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4619      	mov	r1, r3
 8004eec:	f7fb fe94 	bl	8000c18 <__aeabi_d2f>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	4a0f      	ldr	r2, [pc, #60]	; (8004f30 <brrCalculus+0x238>)
 8004ef4:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <brrCalculus+0x234>)
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <brrCalculus+0x238>)
 8004f00:	edd3 7a00 	vldr	s15, [r3]
 8004f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f08:	ee17 3a90 	vmov	r3, s15
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	4b08      	ldr	r3, [pc, #32]	; (8004f34 <brrCalculus+0x23c>)
 8004f14:	801a      	strh	r2, [r3, #0]


		break;
 8004f16:	e112      	b.n	800513e <brrCalculus+0x446>
 8004f18:	b4e81b4f 	.word	0xb4e81b4f
 8004f1c:	3edb4e81 	.word	0x3edb4e81
 8004f20:	b4e81b4f 	.word	0xb4e81b4f
 8004f24:	3ecb4e81 	.word	0x3ecb4e81
 8004f28:	200005a0 	.word	0x200005a0
 8004f2c:	20000598 	.word	0x20000598
 8004f30:	2000059c 	.word	0x2000059c
 8004f34:	20000596 	.word	0x20000596
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8004f38:	4989      	ldr	r1, [pc, #548]	; (8005160 <brrCalculus+0x468>)
 8004f3a:	a385      	add	r3, pc, #532	; (adr r3, 8005150 <brrCalculus+0x458>)
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4e:	ee17 0a90 	vmov	r0, s15
 8004f52:	f7fb fb11 	bl	8000578 <__aeabi_f2d>
 8004f56:	4b82      	ldr	r3, [pc, #520]	; (8005160 <brrCalculus+0x468>)
 8004f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5c:	f7fb fb64 	bl	8000628 <__aeabi_dmul>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	497e      	ldr	r1, [pc, #504]	; (8005160 <brrCalculus+0x468>)
 8004f66:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8004f6a:	4b7d      	ldr	r3, [pc, #500]	; (8005160 <brrCalculus+0x468>)
 8004f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f70:	4610      	mov	r0, r2
 8004f72:	4619      	mov	r1, r3
 8004f74:	f7fb fe08 	bl	8000b88 <__aeabi_d2iz>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	4b79      	ldr	r3, [pc, #484]	; (8005164 <brrCalculus+0x46c>)
 8004f7e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004f80:	4b77      	ldr	r3, [pc, #476]	; (8005160 <brrCalculus+0x468>)
 8004f82:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004f86:	4b76      	ldr	r3, [pc, #472]	; (8005160 <brrCalculus+0x468>)
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	f7fb fdfa 	bl	8000b88 <__aeabi_d2iz>
 8004f94:	4603      	mov	r3, r0
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fb fadc 	bl	8000554 <__aeabi_i2d>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	f7fb f988 	bl	80002b8 <__aeabi_dsub>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4610      	mov	r0, r2
 8004fae:	4619      	mov	r1, r3
 8004fb0:	f7fb fe32 	bl	8000c18 <__aeabi_d2f>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	4a6c      	ldr	r2, [pc, #432]	; (8005168 <brrCalculus+0x470>)
 8004fb8:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004fba:	4b6b      	ldr	r3, [pc, #428]	; (8005168 <brrCalculus+0x470>)
 8004fbc:	edd3 7a00 	vldr	s15, [r3]
 8004fc0:	2004      	movs	r0, #4
 8004fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8004fc6:	f000 f963 	bl	8005290 <roundToNDecimals>
 8004fca:	eef0 7a40 	vmov.f32	s15, s0
 8004fce:	4b66      	ldr	r3, [pc, #408]	; (8005168 <brrCalculus+0x470>)
 8004fd0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8004fd4:	4b64      	ldr	r3, [pc, #400]	; (8005168 <brrCalculus+0x470>)
 8004fd6:	edd3 7a00 	vldr	s15, [r3]
 8004fda:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fe2:	4b61      	ldr	r3, [pc, #388]	; (8005168 <brrCalculus+0x470>)
 8004fe4:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8004fe8:	4b5f      	ldr	r3, [pc, #380]	; (8005168 <brrCalculus+0x470>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fb fac3 	bl	8000578 <__aeabi_f2d>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	ec43 2b10 	vmov	d0, r2, r3
 8004ffa:	f003 ffb7 	bl	8008f6c <round>
 8004ffe:	ec51 0b10 	vmov	r0, r1, d0
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	4b59      	ldr	r3, [pc, #356]	; (800516c <brrCalculus+0x474>)
 8005008:	f7fb f958 	bl	80002bc <__adddf3>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4610      	mov	r0, r2
 8005012:	4619      	mov	r1, r3
 8005014:	f7fb fe00 	bl	8000c18 <__aeabi_d2f>
 8005018:	4603      	mov	r3, r0
 800501a:	4a53      	ldr	r2, [pc, #332]	; (8005168 <brrCalculus+0x470>)
 800501c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800501e:	4b51      	ldr	r3, [pc, #324]	; (8005164 <brrCalculus+0x46c>)
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	b29a      	uxth	r2, r3
 8005026:	4b50      	ldr	r3, [pc, #320]	; (8005168 <brrCalculus+0x470>)
 8005028:	edd3 7a00 	vldr	s15, [r3]
 800502c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005030:	ee17 3a90 	vmov	r3, s15
 8005034:	b29b      	uxth	r3, r3
 8005036:	4313      	orrs	r3, r2
 8005038:	b29a      	uxth	r2, r3
 800503a:	4b4d      	ldr	r3, [pc, #308]	; (8005170 <brrCalculus+0x478>)
 800503c:	801a      	strh	r2, [r3, #0]


		break;
 800503e:	e07e      	b.n	800513e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8005040:	4947      	ldr	r1, [pc, #284]	; (8005160 <brrCalculus+0x468>)
 8005042:	a345      	add	r3, pc, #276	; (adr r3, 8005158 <brrCalculus+0x460>)
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005056:	ee17 0a90 	vmov	r0, s15
 800505a:	f7fb fa8d 	bl	8000578 <__aeabi_f2d>
 800505e:	4b40      	ldr	r3, [pc, #256]	; (8005160 <brrCalculus+0x468>)
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	f7fb fae0 	bl	8000628 <__aeabi_dmul>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	493c      	ldr	r1, [pc, #240]	; (8005160 <brrCalculus+0x468>)
 800506e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8005072:	4b3b      	ldr	r3, [pc, #236]	; (8005160 <brrCalculus+0x468>)
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	4610      	mov	r0, r2
 800507a:	4619      	mov	r1, r3
 800507c:	f7fb fd84 	bl	8000b88 <__aeabi_d2iz>
 8005080:	4603      	mov	r3, r0
 8005082:	b29a      	uxth	r2, r3
 8005084:	4b37      	ldr	r3, [pc, #220]	; (8005164 <brrCalculus+0x46c>)
 8005086:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8005088:	4b35      	ldr	r3, [pc, #212]	; (8005160 <brrCalculus+0x468>)
 800508a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800508e:	4b34      	ldr	r3, [pc, #208]	; (8005160 <brrCalculus+0x468>)
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	4610      	mov	r0, r2
 8005096:	4619      	mov	r1, r3
 8005098:	f7fb fd76 	bl	8000b88 <__aeabi_d2iz>
 800509c:	4603      	mov	r3, r0
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fb fa58 	bl	8000554 <__aeabi_i2d>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4620      	mov	r0, r4
 80050aa:	4629      	mov	r1, r5
 80050ac:	f7fb f904 	bl	80002b8 <__aeabi_dsub>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4610      	mov	r0, r2
 80050b6:	4619      	mov	r1, r3
 80050b8:	f7fb fdae 	bl	8000c18 <__aeabi_d2f>
 80050bc:	4603      	mov	r3, r0
 80050be:	4a2a      	ldr	r2, [pc, #168]	; (8005168 <brrCalculus+0x470>)
 80050c0:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80050c2:	4b29      	ldr	r3, [pc, #164]	; (8005168 <brrCalculus+0x470>)
 80050c4:	edd3 7a00 	vldr	s15, [r3]
 80050c8:	2004      	movs	r0, #4
 80050ca:	eeb0 0a67 	vmov.f32	s0, s15
 80050ce:	f000 f8df 	bl	8005290 <roundToNDecimals>
 80050d2:	eef0 7a40 	vmov.f32	s15, s0
 80050d6:	4b24      	ldr	r3, [pc, #144]	; (8005168 <brrCalculus+0x470>)
 80050d8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80050dc:	4b22      	ldr	r3, [pc, #136]	; (8005168 <brrCalculus+0x470>)
 80050de:	edd3 7a00 	vldr	s15, [r3]
 80050e2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80050e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050ea:	4b1f      	ldr	r3, [pc, #124]	; (8005168 <brrCalculus+0x470>)
 80050ec:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80050f0:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <brrCalculus+0x470>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fb fa3f 	bl	8000578 <__aeabi_f2d>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	ec43 2b10 	vmov	d0, r2, r3
 8005102:	f003 ff33 	bl	8008f6c <round>
 8005106:	ec53 2b10 	vmov	r2, r3, d0
 800510a:	4610      	mov	r0, r2
 800510c:	4619      	mov	r1, r3
 800510e:	f7fb fd83 	bl	8000c18 <__aeabi_d2f>
 8005112:	4603      	mov	r3, r0
 8005114:	4a14      	ldr	r2, [pc, #80]	; (8005168 <brrCalculus+0x470>)
 8005116:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8005118:	4b12      	ldr	r3, [pc, #72]	; (8005164 <brrCalculus+0x46c>)
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	b29a      	uxth	r2, r3
 8005120:	4b11      	ldr	r3, [pc, #68]	; (8005168 <brrCalculus+0x470>)
 8005122:	edd3 7a00 	vldr	s15, [r3]
 8005126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800512a:	ee17 3a90 	vmov	r3, s15
 800512e:	b29b      	uxth	r3, r3
 8005130:	4313      	orrs	r3, r2
 8005132:	b29a      	uxth	r2, r3
 8005134:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <brrCalculus+0x478>)
 8005136:	801a      	strh	r2, [r3, #0]


		break;
 8005138:	e001      	b.n	800513e <brrCalculus+0x446>
	}
	default:{

		__NOP();
 800513a:	bf00      	nop
		break;
 800513c:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <brrCalculus+0x478>)
 8005140:	881b      	ldrh	r3, [r3, #0]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bdb0      	pop	{r4, r5, r7, pc}
 800514a:	bf00      	nop
 800514c:	f3af 8000 	nop.w
 8005150:	789abcdf 	.word	0x789abcdf
 8005154:	3ec23456 	.word	0x3ec23456
 8005158:	789abcdf 	.word	0x789abcdf
 800515c:	3ea23456 	.word	0x3ea23456
 8005160:	200005a0 	.word	0x200005a0
 8005164:	20000598 	.word	0x20000598
 8005168:	2000059c 	.word	0x2000059c
 800516c:	3ff00000 	.word	0x3ff00000
 8005170:	20000596 	.word	0x20000596

08005174 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800517e:	e000      	b.n	8005182 <writeChar+0xe>
		__NOP();
 8005180:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f7      	beq.n	8005180 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	605a      	str	r2, [r3, #4]

}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, char* msgToSend){
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 80051ae:	e008      	b.n	80051c2 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	4619      	mov	r1, r3
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7ff ffdc 	bl	8005174 <writeChar>
		msgToSend ++ ;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	3301      	adds	r3, #1
 80051c0:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f2      	bne.n	80051b0 <writeMsg+0xc>
	}
}
 80051ca:	bf00      	nop
 80051cc:	bf00      	nop
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
	__NOP();
 80051d8:	bf00      	nop
}
 80051da:	bf00      	nop
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
	__NOP();
 80051e8:	bf00      	nop
}
 80051ea:	bf00      	nop
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
	return auxRxData;
 80051f8:	4b03      	ldr	r3, [pc, #12]	; (8005208 <getRxData+0x14>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	200005a8 	.word	0x200005a8

0800520c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <USART2_IRQHandler+0x24>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d006      	beq.n	800522a <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 800521c:	4b04      	ldr	r3, [pc, #16]	; (8005230 <USART2_IRQHandler+0x24>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	4b04      	ldr	r3, [pc, #16]	; (8005234 <USART2_IRQHandler+0x28>)
 8005224:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8005226:	f7fc fc37 	bl	8001a98 <usart2Rx_Callback>
	}

}
 800522a:	bf00      	nop
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40004400 	.word	0x40004400
 8005234:	200005a8 	.word	0x200005a8

08005238 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 800523c:	4b07      	ldr	r3, [pc, #28]	; (800525c <USART1_IRQHandler+0x24>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b00      	cmp	r3, #0
 8005246:	d006      	beq.n	8005256 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8005248:	4b04      	ldr	r3, [pc, #16]	; (800525c <USART1_IRQHandler+0x24>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	4b04      	ldr	r3, [pc, #16]	; (8005260 <USART1_IRQHandler+0x28>)
 8005250:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8005252:	f7ff ffbf 	bl	80051d4 <usart1Rx_Callback>
	}
}
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40011000 	.word	0x40011000
 8005260:	200005a8 	.word	0x200005a8

08005264 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8005268:	4b07      	ldr	r3, [pc, #28]	; (8005288 <USART6_IRQHandler+0x24>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b00      	cmp	r3, #0
 8005272:	d006      	beq.n	8005282 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8005274:	4b04      	ldr	r3, [pc, #16]	; (8005288 <USART6_IRQHandler+0x24>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	4b04      	ldr	r3, [pc, #16]	; (800528c <USART6_IRQHandler+0x28>)
 800527c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800527e:	f7ff ffb1 	bl	80051e4 <usart6Rx_Callback>
	}

}
 8005282:	bf00      	nop
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40011400 	.word	0x40011400
 800528c:	200005a8 	.word	0x200005a8

08005290 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	ed87 0a01 	vstr	s0, [r7, #4]
 800529a:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 800529c:	6838      	ldr	r0, [r7, #0]
 800529e:	f7fb f959 	bl	8000554 <__aeabi_i2d>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	ec43 2b11 	vmov	d1, r2, r3
 80052aa:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8005328 <roundToNDecimals+0x98>
 80052ae:	f003 fea3 	bl	8008ff8 <pow>
 80052b2:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fb f95e 	bl	8000578 <__aeabi_f2d>
 80052bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052c0:	f7fb f9b2 	bl	8000628 <__aeabi_dmul>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4610      	mov	r0, r2
 80052ca:	4619      	mov	r1, r3
 80052cc:	f7fb fca4 	bl	8000c18 <__aeabi_d2f>
 80052d0:	4603      	mov	r3, r0
 80052d2:	607b      	str	r3, [r7, #4]

    number = round(number);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7fb f94f 	bl	8000578 <__aeabi_f2d>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	ec43 2b10 	vmov	d0, r2, r3
 80052e2:	f003 fe43 	bl	8008f6c <round>
 80052e6:	ec53 2b10 	vmov	r2, r3, d0
 80052ea:	4610      	mov	r0, r2
 80052ec:	4619      	mov	r1, r3
 80052ee:	f7fb fc93 	bl	8000c18 <__aeabi_d2f>
 80052f2:	4603      	mov	r3, r0
 80052f4:	607b      	str	r3, [r7, #4]

    number /= factor;
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fb f93e 	bl	8000578 <__aeabi_f2d>
 80052fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005300:	f7fb fabc 	bl	800087c <__aeabi_ddiv>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4610      	mov	r0, r2
 800530a:	4619      	mov	r1, r3
 800530c:	f7fb fc84 	bl	8000c18 <__aeabi_d2f>
 8005310:	4603      	mov	r3, r0
 8005312:	607b      	str	r3, [r7, #4]

    return number;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	ee07 3a90 	vmov	s15, r3
}
 800531a:	eeb0 0a67 	vmov.f32	s0, s15
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	f3af 8000 	nop.w
 8005328:	00000000 	.word	0x00000000
 800532c:	40240000 	.word	0x40240000

08005330 <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a89      	ldr	r2, [pc, #548]	; (8005564 <i2c_config+0x234>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d112      	bne.n	8005368 <i2c_config+0x38>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 8005342:	4b89      	ldr	r3, [pc, #548]	; (8005568 <i2c_config+0x238>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	4a88      	ldr	r2, [pc, #544]	; (8005568 <i2c_config+0x238>)
 8005348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800534c:	6413      	str	r3, [r2, #64]	; 0x40
		RCC ->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 800534e:	4b86      	ldr	r3, [pc, #536]	; (8005568 <i2c_config+0x238>)
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	4a85      	ldr	r2, [pc, #532]	; (8005568 <i2c_config+0x238>)
 8005354:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005358:	6213      	str	r3, [r2, #32]
		RCC ->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 800535a:	4b83      	ldr	r3, [pc, #524]	; (8005568 <i2c_config+0x238>)
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	4a82      	ldr	r2, [pc, #520]	; (8005568 <i2c_config+0x238>)
 8005360:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005364:	6213      	str	r3, [r2, #32]
 8005366:	e016      	b.n	8005396 <i2c_config+0x66>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a7f      	ldr	r2, [pc, #508]	; (800556c <i2c_config+0x23c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d106      	bne.n	8005380 <i2c_config+0x50>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 8005372:	4b7d      	ldr	r3, [pc, #500]	; (8005568 <i2c_config+0x238>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	4a7c      	ldr	r2, [pc, #496]	; (8005568 <i2c_config+0x238>)
 8005378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800537c:	6413      	str	r3, [r2, #64]	; 0x40
 800537e:	e00a      	b.n	8005396 <i2c_config+0x66>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a7a      	ldr	r2, [pc, #488]	; (8005570 <i2c_config+0x240>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d105      	bne.n	8005396 <i2c_config+0x66>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 800538a:	4b77      	ldr	r3, [pc, #476]	; (8005568 <i2c_config+0x238>)
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	4a76      	ldr	r2, [pc, #472]	; (8005568 <i2c_config+0x238>)
 8005390:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005394:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0201 	bic.w	r2, r2, #1
 80053a4:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80053a6:	e000      	b.n	80053aa <i2c_config+0x7a>
		__NOP();
 80053a8:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f7      	bne.n	80053a8 <i2c_config+0x78>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053c6:	601a      	str	r2, [r3, #0]

	//Esperamos un rato
	for(uint32_t i = 0 ; i < 16 * pow(10,6); i++){
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e003      	b.n	80053d6 <i2c_config+0xa6>
		__NOP();
 80053ce:	bf00      	nop
	for(uint32_t i = 0 ; i < 16 * pow(10,6); i++){
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3301      	adds	r3, #1
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4a66      	ldr	r2, [pc, #408]	; (8005574 <i2c_config+0x244>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d3f7      	bcc.n	80053ce <i2c_config+0x9e>
	}


	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053ec:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80053fc:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	79db      	ldrb	r3, [r3, #7]
 8005402:	2b10      	cmp	r3, #16
 8005404:	d108      	bne.n	8005418 <i2c_config+0xe8>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0210 	orr.w	r2, r2, #16
 8005414:	605a      	str	r2, [r3, #4]
 8005416:	e00b      	b.n	8005430 <i2c_config+0x100>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	79db      	ldrb	r3, [r3, #7]
 800541c:	2b32      	cmp	r3, #50	; 0x32
 800541e:	d107      	bne.n	8005430 <i2c_config+0x100>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 800542e:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */
	//Nos aseguramos de que el periferico está desactivado
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(0b1);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2200      	movs	r2, #0
 8005446:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2200      	movs	r2, #0
 800544e:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	795b      	ldrb	r3, [r3, #5]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d15c      	bne.n	8005512 <i2c_config+0x1e2>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69da      	ldr	r2, [r3, #28]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005466:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	79db      	ldrb	r3, [r3, #7]
 800546c:	2b32      	cmp	r3, #50	; 0x32
 800546e:	d03f      	beq.n	80054f0 <i2c_config+0x1c0>
 8005470:	2b32      	cmp	r3, #50	; 0x32
 8005472:	f300 80b4 	bgt.w	80055de <i2c_config+0x2ae>
 8005476:	2b14      	cmp	r3, #20
 8005478:	d029      	beq.n	80054ce <i2c_config+0x19e>
 800547a:	2b14      	cmp	r3, #20
 800547c:	f300 80af 	bgt.w	80055de <i2c_config+0x2ae>
 8005480:	2b04      	cmp	r3, #4
 8005482:	d002      	beq.n	800548a <i2c_config+0x15a>
 8005484:	2b10      	cmp	r3, #16
 8005486:	d011      	beq.n	80054ac <i2c_config+0x17c>


				break;
			}default:{

				break;
 8005488:	e0a9      	b.n	80055de <i2c_config+0x2ae>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0214 	orr.w	r2, r2, #20
 8005498:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6a1a      	ldr	r2, [r3, #32]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 0205 	orr.w	r2, r2, #5
 80054a8:	621a      	str	r2, [r3, #32]
				break;
 80054aa:	e09b      	b.n	80055e4 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69da      	ldr	r2, [r3, #28]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80054ba:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6a1a      	ldr	r2, [r3, #32]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0211 	orr.w	r2, r2, #17
 80054ca:	621a      	str	r2, [r3, #32]
				break;
 80054cc:	e08a      	b.n	80055e4 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_20MHz << I2C_CCR_CCR_Pos);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 80054dc:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_20MHz;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6a1a      	ldr	r2, [r3, #32]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0215 	orr.w	r2, r2, #21
 80054ec:	621a      	str	r2, [r3, #32]
				break;
 80054ee:	e079      	b.n	80055e4 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69da      	ldr	r2, [r3, #28]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 80054fe:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6a1a      	ldr	r2, [r3, #32]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 800550e:	621a      	str	r2, [r3, #32]
				break;
 8005510:	e068      	b.n	80055e4 <i2c_config+0x2b4>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005520:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	79db      	ldrb	r3, [r3, #7]
 8005526:	2b32      	cmp	r3, #50	; 0x32
 8005528:	d048      	beq.n	80055bc <i2c_config+0x28c>
 800552a:	2b32      	cmp	r3, #50	; 0x32
 800552c:	dc59      	bgt.n	80055e2 <i2c_config+0x2b2>
 800552e:	2b14      	cmp	r3, #20
 8005530:	d033      	beq.n	800559a <i2c_config+0x26a>
 8005532:	2b14      	cmp	r3, #20
 8005534:	dc55      	bgt.n	80055e2 <i2c_config+0x2b2>
 8005536:	2b04      	cmp	r3, #4
 8005538:	d002      	beq.n	8005540 <i2c_config+0x210>
 800553a:	2b10      	cmp	r3, #16
 800553c:	d01c      	beq.n	8005578 <i2c_config+0x248>


				break;
			}default:{

				break;
 800553e:	e050      	b.n	80055e2 <i2c_config+0x2b2>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69da      	ldr	r2, [r3, #28]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0203 	orr.w	r2, r2, #3
 800554e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6a1a      	ldr	r2, [r3, #32]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0202 	orr.w	r2, r2, #2
 800555e:	621a      	str	r2, [r3, #32]
				break;
 8005560:	e040      	b.n	80055e4 <i2c_config+0x2b4>
 8005562:	bf00      	nop
 8005564:	40005400 	.word	0x40005400
 8005568:	40023800 	.word	0x40023800
 800556c:	40005800 	.word	0x40005800
 8005570:	40005c00 	.word	0x40005c00
 8005574:	00f42400 	.word	0x00f42400
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	69da      	ldr	r2, [r3, #28]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 020d 	orr.w	r2, r2, #13
 8005586:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6a1a      	ldr	r2, [r3, #32]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0206 	orr.w	r2, r2, #6
 8005596:	621a      	str	r2, [r3, #32]
				break;
 8005598:	e024      	b.n	80055e4 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_20MHz << I2C_CCR_CCR_Pos);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0211 	orr.w	r2, r2, #17
 80055a8:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_20MHz;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6a1a      	ldr	r2, [r3, #32]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f042 0207 	orr.w	r2, r2, #7
 80055b8:	621a      	str	r2, [r3, #32]
				break;
 80055ba:	e013      	b.n	80055e4 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69da      	ldr	r2, [r3, #28]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 80055ca:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6a1a      	ldr	r2, [r3, #32]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0210 	orr.w	r2, r2, #16
 80055da:	621a      	str	r2, [r3, #32]
				break;
 80055dc:	e002      	b.n	80055e4 <i2c_config+0x2b4>
				break;
 80055de:	bf00      	nop
 80055e0:	e002      	b.n	80055e8 <i2c_config+0x2b8>
				break;
 80055e2:	bf00      	nop
			}

		}

	}
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80055e4:	e000      	b.n	80055e8 <i2c_config+0x2b8>
		__NOP();
 80055e6:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f7      	bne.n	80055e6 <i2c_config+0x2b6>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0201 	orr.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]

}
 8005606:	bf00      	nop
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop

08005614 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562a:	601a      	str	r2, [r3, #0]
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8005640:	e000      	b.n	8005644 <i2c_startTransaction+0xc>
		__NOP();
 8005642:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f7      	bne.n	8005642 <i2c_startTransaction+0xa>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005660:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8005662:	e000      	b.n	8005666 <i2c_startTransaction+0x2e>
		__NOP();
 8005664:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0f7      	beq.n	8005664 <i2c_startTransaction+0x2c>
	}
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005698:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800569a:	e000      	b.n	800569e <i2c_reStartTransaction+0x1c>
		__NOP();
 800569c:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f7      	beq.n	800569c <i2c_reStartTransaction+0x1a>
	}
}
 80056ac:	bf00      	nop
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d0:	601a      	str	r2, [r3, #0]
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	460b      	mov	r3, r1
 80056e8:	70fb      	strb	r3, [r7, #3]
 80056ea:	4613      	mov	r3, r2
 80056ec:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	005a      	lsls	r2, r3, #1
 80056f6:	78bb      	ldrb	r3, [r7, #2]
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8005700:	e000      	b.n	8005704 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8005702:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0f7      	beq.n	8005702 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	73fb      	strb	r3, [r7, #15]

}
 8005722:	bf00      	nop
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	460b      	mov	r3, r1
 8005738:	70fb      	strb	r3, [r7, #3]
	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	78fa      	ldrb	r2, [r7, #3]
 8005740:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8005742:	e000      	b.n	8005746 <i2c_sendMemoryAddress+0x18>
		__NOP();
 8005744:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0f7      	beq.n	8005744 <i2c_sendMemoryAddress+0x16>
	}
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	460b      	mov	r3, r1
 800576c:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	78fa      	ldrb	r2, [r7, #3]
 8005774:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8005776:	e000      	b.n	800577a <i2c_sendDataByte+0x18>
		__NOP();
 8005778:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0f7      	beq.n	8005778 <i2c_sendDataByte+0x16>
	}
}
 8005788:	bf00      	nop
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800579e:	e000      	b.n	80057a2 <i2c_readDataByte+0xc>
		__NOP();
 80057a0:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0f7      	beq.n	80057a0 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	799b      	ldrb	r3, [r3, #6]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <__errno>:
 80057cc:	4b01      	ldr	r3, [pc, #4]	; (80057d4 <__errno+0x8>)
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	20000010 	.word	0x20000010

080057d8 <__libc_init_array>:
 80057d8:	b570      	push	{r4, r5, r6, lr}
 80057da:	4d0d      	ldr	r5, [pc, #52]	; (8005810 <__libc_init_array+0x38>)
 80057dc:	4c0d      	ldr	r4, [pc, #52]	; (8005814 <__libc_init_array+0x3c>)
 80057de:	1b64      	subs	r4, r4, r5
 80057e0:	10a4      	asrs	r4, r4, #2
 80057e2:	2600      	movs	r6, #0
 80057e4:	42a6      	cmp	r6, r4
 80057e6:	d109      	bne.n	80057fc <__libc_init_array+0x24>
 80057e8:	4d0b      	ldr	r5, [pc, #44]	; (8005818 <__libc_init_array+0x40>)
 80057ea:	4c0c      	ldr	r4, [pc, #48]	; (800581c <__libc_init_array+0x44>)
 80057ec:	f004 fb2c 	bl	8009e48 <_init>
 80057f0:	1b64      	subs	r4, r4, r5
 80057f2:	10a4      	asrs	r4, r4, #2
 80057f4:	2600      	movs	r6, #0
 80057f6:	42a6      	cmp	r6, r4
 80057f8:	d105      	bne.n	8005806 <__libc_init_array+0x2e>
 80057fa:	bd70      	pop	{r4, r5, r6, pc}
 80057fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005800:	4798      	blx	r3
 8005802:	3601      	adds	r6, #1
 8005804:	e7ee      	b.n	80057e4 <__libc_init_array+0xc>
 8005806:	f855 3b04 	ldr.w	r3, [r5], #4
 800580a:	4798      	blx	r3
 800580c:	3601      	adds	r6, #1
 800580e:	e7f2      	b.n	80057f6 <__libc_init_array+0x1e>
 8005810:	0800a3f8 	.word	0x0800a3f8
 8005814:	0800a3f8 	.word	0x0800a3f8
 8005818:	0800a3f8 	.word	0x0800a3f8
 800581c:	0800a3fc 	.word	0x0800a3fc

08005820 <malloc>:
 8005820:	4b02      	ldr	r3, [pc, #8]	; (800582c <malloc+0xc>)
 8005822:	4601      	mov	r1, r0
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	f000 b877 	b.w	8005918 <_malloc_r>
 800582a:	bf00      	nop
 800582c:	20000010 	.word	0x20000010

08005830 <memset>:
 8005830:	4402      	add	r2, r0
 8005832:	4603      	mov	r3, r0
 8005834:	4293      	cmp	r3, r2
 8005836:	d100      	bne.n	800583a <memset+0xa>
 8005838:	4770      	bx	lr
 800583a:	f803 1b01 	strb.w	r1, [r3], #1
 800583e:	e7f9      	b.n	8005834 <memset+0x4>

08005840 <_free_r>:
 8005840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005842:	2900      	cmp	r1, #0
 8005844:	d044      	beq.n	80058d0 <_free_r+0x90>
 8005846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800584a:	9001      	str	r0, [sp, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f1a1 0404 	sub.w	r4, r1, #4
 8005852:	bfb8      	it	lt
 8005854:	18e4      	addlt	r4, r4, r3
 8005856:	f001 fca1 	bl	800719c <__malloc_lock>
 800585a:	4a1e      	ldr	r2, [pc, #120]	; (80058d4 <_free_r+0x94>)
 800585c:	9801      	ldr	r0, [sp, #4]
 800585e:	6813      	ldr	r3, [r2, #0]
 8005860:	b933      	cbnz	r3, 8005870 <_free_r+0x30>
 8005862:	6063      	str	r3, [r4, #4]
 8005864:	6014      	str	r4, [r2, #0]
 8005866:	b003      	add	sp, #12
 8005868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800586c:	f001 bc9c 	b.w	80071a8 <__malloc_unlock>
 8005870:	42a3      	cmp	r3, r4
 8005872:	d908      	bls.n	8005886 <_free_r+0x46>
 8005874:	6825      	ldr	r5, [r4, #0]
 8005876:	1961      	adds	r1, r4, r5
 8005878:	428b      	cmp	r3, r1
 800587a:	bf01      	itttt	eq
 800587c:	6819      	ldreq	r1, [r3, #0]
 800587e:	685b      	ldreq	r3, [r3, #4]
 8005880:	1949      	addeq	r1, r1, r5
 8005882:	6021      	streq	r1, [r4, #0]
 8005884:	e7ed      	b.n	8005862 <_free_r+0x22>
 8005886:	461a      	mov	r2, r3
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	b10b      	cbz	r3, 8005890 <_free_r+0x50>
 800588c:	42a3      	cmp	r3, r4
 800588e:	d9fa      	bls.n	8005886 <_free_r+0x46>
 8005890:	6811      	ldr	r1, [r2, #0]
 8005892:	1855      	adds	r5, r2, r1
 8005894:	42a5      	cmp	r5, r4
 8005896:	d10b      	bne.n	80058b0 <_free_r+0x70>
 8005898:	6824      	ldr	r4, [r4, #0]
 800589a:	4421      	add	r1, r4
 800589c:	1854      	adds	r4, r2, r1
 800589e:	42a3      	cmp	r3, r4
 80058a0:	6011      	str	r1, [r2, #0]
 80058a2:	d1e0      	bne.n	8005866 <_free_r+0x26>
 80058a4:	681c      	ldr	r4, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	6053      	str	r3, [r2, #4]
 80058aa:	4421      	add	r1, r4
 80058ac:	6011      	str	r1, [r2, #0]
 80058ae:	e7da      	b.n	8005866 <_free_r+0x26>
 80058b0:	d902      	bls.n	80058b8 <_free_r+0x78>
 80058b2:	230c      	movs	r3, #12
 80058b4:	6003      	str	r3, [r0, #0]
 80058b6:	e7d6      	b.n	8005866 <_free_r+0x26>
 80058b8:	6825      	ldr	r5, [r4, #0]
 80058ba:	1961      	adds	r1, r4, r5
 80058bc:	428b      	cmp	r3, r1
 80058be:	bf04      	itt	eq
 80058c0:	6819      	ldreq	r1, [r3, #0]
 80058c2:	685b      	ldreq	r3, [r3, #4]
 80058c4:	6063      	str	r3, [r4, #4]
 80058c6:	bf04      	itt	eq
 80058c8:	1949      	addeq	r1, r1, r5
 80058ca:	6021      	streq	r1, [r4, #0]
 80058cc:	6054      	str	r4, [r2, #4]
 80058ce:	e7ca      	b.n	8005866 <_free_r+0x26>
 80058d0:	b003      	add	sp, #12
 80058d2:	bd30      	pop	{r4, r5, pc}
 80058d4:	200005ac 	.word	0x200005ac

080058d8 <sbrk_aligned>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	4e0e      	ldr	r6, [pc, #56]	; (8005914 <sbrk_aligned+0x3c>)
 80058dc:	460c      	mov	r4, r1
 80058de:	6831      	ldr	r1, [r6, #0]
 80058e0:	4605      	mov	r5, r0
 80058e2:	b911      	cbnz	r1, 80058ea <sbrk_aligned+0x12>
 80058e4:	f000 fcf6 	bl	80062d4 <_sbrk_r>
 80058e8:	6030      	str	r0, [r6, #0]
 80058ea:	4621      	mov	r1, r4
 80058ec:	4628      	mov	r0, r5
 80058ee:	f000 fcf1 	bl	80062d4 <_sbrk_r>
 80058f2:	1c43      	adds	r3, r0, #1
 80058f4:	d00a      	beq.n	800590c <sbrk_aligned+0x34>
 80058f6:	1cc4      	adds	r4, r0, #3
 80058f8:	f024 0403 	bic.w	r4, r4, #3
 80058fc:	42a0      	cmp	r0, r4
 80058fe:	d007      	beq.n	8005910 <sbrk_aligned+0x38>
 8005900:	1a21      	subs	r1, r4, r0
 8005902:	4628      	mov	r0, r5
 8005904:	f000 fce6 	bl	80062d4 <_sbrk_r>
 8005908:	3001      	adds	r0, #1
 800590a:	d101      	bne.n	8005910 <sbrk_aligned+0x38>
 800590c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005910:	4620      	mov	r0, r4
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	200005b0 	.word	0x200005b0

08005918 <_malloc_r>:
 8005918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800591c:	1ccd      	adds	r5, r1, #3
 800591e:	f025 0503 	bic.w	r5, r5, #3
 8005922:	3508      	adds	r5, #8
 8005924:	2d0c      	cmp	r5, #12
 8005926:	bf38      	it	cc
 8005928:	250c      	movcc	r5, #12
 800592a:	2d00      	cmp	r5, #0
 800592c:	4607      	mov	r7, r0
 800592e:	db01      	blt.n	8005934 <_malloc_r+0x1c>
 8005930:	42a9      	cmp	r1, r5
 8005932:	d905      	bls.n	8005940 <_malloc_r+0x28>
 8005934:	230c      	movs	r3, #12
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	2600      	movs	r6, #0
 800593a:	4630      	mov	r0, r6
 800593c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005940:	4e2e      	ldr	r6, [pc, #184]	; (80059fc <_malloc_r+0xe4>)
 8005942:	f001 fc2b 	bl	800719c <__malloc_lock>
 8005946:	6833      	ldr	r3, [r6, #0]
 8005948:	461c      	mov	r4, r3
 800594a:	bb34      	cbnz	r4, 800599a <_malloc_r+0x82>
 800594c:	4629      	mov	r1, r5
 800594e:	4638      	mov	r0, r7
 8005950:	f7ff ffc2 	bl	80058d8 <sbrk_aligned>
 8005954:	1c43      	adds	r3, r0, #1
 8005956:	4604      	mov	r4, r0
 8005958:	d14d      	bne.n	80059f6 <_malloc_r+0xde>
 800595a:	6834      	ldr	r4, [r6, #0]
 800595c:	4626      	mov	r6, r4
 800595e:	2e00      	cmp	r6, #0
 8005960:	d140      	bne.n	80059e4 <_malloc_r+0xcc>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	4631      	mov	r1, r6
 8005966:	4638      	mov	r0, r7
 8005968:	eb04 0803 	add.w	r8, r4, r3
 800596c:	f000 fcb2 	bl	80062d4 <_sbrk_r>
 8005970:	4580      	cmp	r8, r0
 8005972:	d13a      	bne.n	80059ea <_malloc_r+0xd2>
 8005974:	6821      	ldr	r1, [r4, #0]
 8005976:	3503      	adds	r5, #3
 8005978:	1a6d      	subs	r5, r5, r1
 800597a:	f025 0503 	bic.w	r5, r5, #3
 800597e:	3508      	adds	r5, #8
 8005980:	2d0c      	cmp	r5, #12
 8005982:	bf38      	it	cc
 8005984:	250c      	movcc	r5, #12
 8005986:	4629      	mov	r1, r5
 8005988:	4638      	mov	r0, r7
 800598a:	f7ff ffa5 	bl	80058d8 <sbrk_aligned>
 800598e:	3001      	adds	r0, #1
 8005990:	d02b      	beq.n	80059ea <_malloc_r+0xd2>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	442b      	add	r3, r5
 8005996:	6023      	str	r3, [r4, #0]
 8005998:	e00e      	b.n	80059b8 <_malloc_r+0xa0>
 800599a:	6822      	ldr	r2, [r4, #0]
 800599c:	1b52      	subs	r2, r2, r5
 800599e:	d41e      	bmi.n	80059de <_malloc_r+0xc6>
 80059a0:	2a0b      	cmp	r2, #11
 80059a2:	d916      	bls.n	80059d2 <_malloc_r+0xba>
 80059a4:	1961      	adds	r1, r4, r5
 80059a6:	42a3      	cmp	r3, r4
 80059a8:	6025      	str	r5, [r4, #0]
 80059aa:	bf18      	it	ne
 80059ac:	6059      	strne	r1, [r3, #4]
 80059ae:	6863      	ldr	r3, [r4, #4]
 80059b0:	bf08      	it	eq
 80059b2:	6031      	streq	r1, [r6, #0]
 80059b4:	5162      	str	r2, [r4, r5]
 80059b6:	604b      	str	r3, [r1, #4]
 80059b8:	4638      	mov	r0, r7
 80059ba:	f104 060b 	add.w	r6, r4, #11
 80059be:	f001 fbf3 	bl	80071a8 <__malloc_unlock>
 80059c2:	f026 0607 	bic.w	r6, r6, #7
 80059c6:	1d23      	adds	r3, r4, #4
 80059c8:	1af2      	subs	r2, r6, r3
 80059ca:	d0b6      	beq.n	800593a <_malloc_r+0x22>
 80059cc:	1b9b      	subs	r3, r3, r6
 80059ce:	50a3      	str	r3, [r4, r2]
 80059d0:	e7b3      	b.n	800593a <_malloc_r+0x22>
 80059d2:	6862      	ldr	r2, [r4, #4]
 80059d4:	42a3      	cmp	r3, r4
 80059d6:	bf0c      	ite	eq
 80059d8:	6032      	streq	r2, [r6, #0]
 80059da:	605a      	strne	r2, [r3, #4]
 80059dc:	e7ec      	b.n	80059b8 <_malloc_r+0xa0>
 80059de:	4623      	mov	r3, r4
 80059e0:	6864      	ldr	r4, [r4, #4]
 80059e2:	e7b2      	b.n	800594a <_malloc_r+0x32>
 80059e4:	4634      	mov	r4, r6
 80059e6:	6876      	ldr	r6, [r6, #4]
 80059e8:	e7b9      	b.n	800595e <_malloc_r+0x46>
 80059ea:	230c      	movs	r3, #12
 80059ec:	603b      	str	r3, [r7, #0]
 80059ee:	4638      	mov	r0, r7
 80059f0:	f001 fbda 	bl	80071a8 <__malloc_unlock>
 80059f4:	e7a1      	b.n	800593a <_malloc_r+0x22>
 80059f6:	6025      	str	r5, [r4, #0]
 80059f8:	e7de      	b.n	80059b8 <_malloc_r+0xa0>
 80059fa:	bf00      	nop
 80059fc:	200005ac 	.word	0x200005ac

08005a00 <__cvt>:
 8005a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a04:	ec55 4b10 	vmov	r4, r5, d0
 8005a08:	2d00      	cmp	r5, #0
 8005a0a:	460e      	mov	r6, r1
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	462b      	mov	r3, r5
 8005a10:	bfbb      	ittet	lt
 8005a12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a16:	461d      	movlt	r5, r3
 8005a18:	2300      	movge	r3, #0
 8005a1a:	232d      	movlt	r3, #45	; 0x2d
 8005a1c:	700b      	strb	r3, [r1, #0]
 8005a1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a24:	4691      	mov	r9, r2
 8005a26:	f023 0820 	bic.w	r8, r3, #32
 8005a2a:	bfbc      	itt	lt
 8005a2c:	4622      	movlt	r2, r4
 8005a2e:	4614      	movlt	r4, r2
 8005a30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a34:	d005      	beq.n	8005a42 <__cvt+0x42>
 8005a36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a3a:	d100      	bne.n	8005a3e <__cvt+0x3e>
 8005a3c:	3601      	adds	r6, #1
 8005a3e:	2102      	movs	r1, #2
 8005a40:	e000      	b.n	8005a44 <__cvt+0x44>
 8005a42:	2103      	movs	r1, #3
 8005a44:	ab03      	add	r3, sp, #12
 8005a46:	9301      	str	r3, [sp, #4]
 8005a48:	ab02      	add	r3, sp, #8
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	ec45 4b10 	vmov	d0, r4, r5
 8005a50:	4653      	mov	r3, sl
 8005a52:	4632      	mov	r2, r6
 8005a54:	f000 fd90 	bl	8006578 <_dtoa_r>
 8005a58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	d102      	bne.n	8005a66 <__cvt+0x66>
 8005a60:	f019 0f01 	tst.w	r9, #1
 8005a64:	d022      	beq.n	8005aac <__cvt+0xac>
 8005a66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a6a:	eb07 0906 	add.w	r9, r7, r6
 8005a6e:	d110      	bne.n	8005a92 <__cvt+0x92>
 8005a70:	783b      	ldrb	r3, [r7, #0]
 8005a72:	2b30      	cmp	r3, #48	; 0x30
 8005a74:	d10a      	bne.n	8005a8c <__cvt+0x8c>
 8005a76:	2200      	movs	r2, #0
 8005a78:	2300      	movs	r3, #0
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	f7fb f83b 	bl	8000af8 <__aeabi_dcmpeq>
 8005a82:	b918      	cbnz	r0, 8005a8c <__cvt+0x8c>
 8005a84:	f1c6 0601 	rsb	r6, r6, #1
 8005a88:	f8ca 6000 	str.w	r6, [sl]
 8005a8c:	f8da 3000 	ldr.w	r3, [sl]
 8005a90:	4499      	add	r9, r3
 8005a92:	2200      	movs	r2, #0
 8005a94:	2300      	movs	r3, #0
 8005a96:	4620      	mov	r0, r4
 8005a98:	4629      	mov	r1, r5
 8005a9a:	f7fb f82d 	bl	8000af8 <__aeabi_dcmpeq>
 8005a9e:	b108      	cbz	r0, 8005aa4 <__cvt+0xa4>
 8005aa0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005aa4:	2230      	movs	r2, #48	; 0x30
 8005aa6:	9b03      	ldr	r3, [sp, #12]
 8005aa8:	454b      	cmp	r3, r9
 8005aaa:	d307      	bcc.n	8005abc <__cvt+0xbc>
 8005aac:	9b03      	ldr	r3, [sp, #12]
 8005aae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ab0:	1bdb      	subs	r3, r3, r7
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	b004      	add	sp, #16
 8005ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005abc:	1c59      	adds	r1, r3, #1
 8005abe:	9103      	str	r1, [sp, #12]
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	e7f0      	b.n	8005aa6 <__cvt+0xa6>

08005ac4 <__exponent>:
 8005ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2900      	cmp	r1, #0
 8005aca:	bfb8      	it	lt
 8005acc:	4249      	neglt	r1, r1
 8005ace:	f803 2b02 	strb.w	r2, [r3], #2
 8005ad2:	bfb4      	ite	lt
 8005ad4:	222d      	movlt	r2, #45	; 0x2d
 8005ad6:	222b      	movge	r2, #43	; 0x2b
 8005ad8:	2909      	cmp	r1, #9
 8005ada:	7042      	strb	r2, [r0, #1]
 8005adc:	dd2a      	ble.n	8005b34 <__exponent+0x70>
 8005ade:	f10d 0407 	add.w	r4, sp, #7
 8005ae2:	46a4      	mov	ip, r4
 8005ae4:	270a      	movs	r7, #10
 8005ae6:	46a6      	mov	lr, r4
 8005ae8:	460a      	mov	r2, r1
 8005aea:	fb91 f6f7 	sdiv	r6, r1, r7
 8005aee:	fb07 1516 	mls	r5, r7, r6, r1
 8005af2:	3530      	adds	r5, #48	; 0x30
 8005af4:	2a63      	cmp	r2, #99	; 0x63
 8005af6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005afa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005afe:	4631      	mov	r1, r6
 8005b00:	dcf1      	bgt.n	8005ae6 <__exponent+0x22>
 8005b02:	3130      	adds	r1, #48	; 0x30
 8005b04:	f1ae 0502 	sub.w	r5, lr, #2
 8005b08:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b0c:	1c44      	adds	r4, r0, #1
 8005b0e:	4629      	mov	r1, r5
 8005b10:	4561      	cmp	r1, ip
 8005b12:	d30a      	bcc.n	8005b2a <__exponent+0x66>
 8005b14:	f10d 0209 	add.w	r2, sp, #9
 8005b18:	eba2 020e 	sub.w	r2, r2, lr
 8005b1c:	4565      	cmp	r5, ip
 8005b1e:	bf88      	it	hi
 8005b20:	2200      	movhi	r2, #0
 8005b22:	4413      	add	r3, r2
 8005b24:	1a18      	subs	r0, r3, r0
 8005b26:	b003      	add	sp, #12
 8005b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b32:	e7ed      	b.n	8005b10 <__exponent+0x4c>
 8005b34:	2330      	movs	r3, #48	; 0x30
 8005b36:	3130      	adds	r1, #48	; 0x30
 8005b38:	7083      	strb	r3, [r0, #2]
 8005b3a:	70c1      	strb	r1, [r0, #3]
 8005b3c:	1d03      	adds	r3, r0, #4
 8005b3e:	e7f1      	b.n	8005b24 <__exponent+0x60>

08005b40 <_printf_float>:
 8005b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b44:	ed2d 8b02 	vpush	{d8}
 8005b48:	b08d      	sub	sp, #52	; 0x34
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b50:	4616      	mov	r6, r2
 8005b52:	461f      	mov	r7, r3
 8005b54:	4605      	mov	r5, r0
 8005b56:	f001 fafd 	bl	8007154 <_localeconv_r>
 8005b5a:	f8d0 a000 	ldr.w	sl, [r0]
 8005b5e:	4650      	mov	r0, sl
 8005b60:	f7fa fb48 	bl	80001f4 <strlen>
 8005b64:	2300      	movs	r3, #0
 8005b66:	930a      	str	r3, [sp, #40]	; 0x28
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	9305      	str	r3, [sp, #20]
 8005b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b74:	3307      	adds	r3, #7
 8005b76:	f023 0307 	bic.w	r3, r3, #7
 8005b7a:	f103 0208 	add.w	r2, r3, #8
 8005b7e:	f8c8 2000 	str.w	r2, [r8]
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b92:	9307      	str	r3, [sp, #28]
 8005b94:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b98:	ee08 0a10 	vmov	s16, r0
 8005b9c:	4b9f      	ldr	r3, [pc, #636]	; (8005e1c <_printf_float+0x2dc>)
 8005b9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ba6:	f7fa ffd9 	bl	8000b5c <__aeabi_dcmpun>
 8005baa:	bb88      	cbnz	r0, 8005c10 <_printf_float+0xd0>
 8005bac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bb0:	4b9a      	ldr	r3, [pc, #616]	; (8005e1c <_printf_float+0x2dc>)
 8005bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bb6:	f7fa ffb3 	bl	8000b20 <__aeabi_dcmple>
 8005bba:	bb48      	cbnz	r0, 8005c10 <_printf_float+0xd0>
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	4640      	mov	r0, r8
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	f7fa ffa2 	bl	8000b0c <__aeabi_dcmplt>
 8005bc8:	b110      	cbz	r0, 8005bd0 <_printf_float+0x90>
 8005bca:	232d      	movs	r3, #45	; 0x2d
 8005bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bd0:	4b93      	ldr	r3, [pc, #588]	; (8005e20 <_printf_float+0x2e0>)
 8005bd2:	4894      	ldr	r0, [pc, #592]	; (8005e24 <_printf_float+0x2e4>)
 8005bd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005bd8:	bf94      	ite	ls
 8005bda:	4698      	movls	r8, r3
 8005bdc:	4680      	movhi	r8, r0
 8005bde:	2303      	movs	r3, #3
 8005be0:	6123      	str	r3, [r4, #16]
 8005be2:	9b05      	ldr	r3, [sp, #20]
 8005be4:	f023 0204 	bic.w	r2, r3, #4
 8005be8:	6022      	str	r2, [r4, #0]
 8005bea:	f04f 0900 	mov.w	r9, #0
 8005bee:	9700      	str	r7, [sp, #0]
 8005bf0:	4633      	mov	r3, r6
 8005bf2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f000 f9d8 	bl	8005fac <_printf_common>
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	f040 8090 	bne.w	8005d22 <_printf_float+0x1e2>
 8005c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c06:	b00d      	add	sp, #52	; 0x34
 8005c08:	ecbd 8b02 	vpop	{d8}
 8005c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c10:	4642      	mov	r2, r8
 8005c12:	464b      	mov	r3, r9
 8005c14:	4640      	mov	r0, r8
 8005c16:	4649      	mov	r1, r9
 8005c18:	f7fa ffa0 	bl	8000b5c <__aeabi_dcmpun>
 8005c1c:	b140      	cbz	r0, 8005c30 <_printf_float+0xf0>
 8005c1e:	464b      	mov	r3, r9
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	bfbc      	itt	lt
 8005c24:	232d      	movlt	r3, #45	; 0x2d
 8005c26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c2a:	487f      	ldr	r0, [pc, #508]	; (8005e28 <_printf_float+0x2e8>)
 8005c2c:	4b7f      	ldr	r3, [pc, #508]	; (8005e2c <_printf_float+0x2ec>)
 8005c2e:	e7d1      	b.n	8005bd4 <_printf_float+0x94>
 8005c30:	6863      	ldr	r3, [r4, #4]
 8005c32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c36:	9206      	str	r2, [sp, #24]
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	d13f      	bne.n	8005cbc <_printf_float+0x17c>
 8005c3c:	2306      	movs	r3, #6
 8005c3e:	6063      	str	r3, [r4, #4]
 8005c40:	9b05      	ldr	r3, [sp, #20]
 8005c42:	6861      	ldr	r1, [r4, #4]
 8005c44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c48:	2300      	movs	r3, #0
 8005c4a:	9303      	str	r3, [sp, #12]
 8005c4c:	ab0a      	add	r3, sp, #40	; 0x28
 8005c4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c52:	ab09      	add	r3, sp, #36	; 0x24
 8005c54:	ec49 8b10 	vmov	d0, r8, r9
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	6022      	str	r2, [r4, #0]
 8005c5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c60:	4628      	mov	r0, r5
 8005c62:	f7ff fecd 	bl	8005a00 <__cvt>
 8005c66:	9b06      	ldr	r3, [sp, #24]
 8005c68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c6a:	2b47      	cmp	r3, #71	; 0x47
 8005c6c:	4680      	mov	r8, r0
 8005c6e:	d108      	bne.n	8005c82 <_printf_float+0x142>
 8005c70:	1cc8      	adds	r0, r1, #3
 8005c72:	db02      	blt.n	8005c7a <_printf_float+0x13a>
 8005c74:	6863      	ldr	r3, [r4, #4]
 8005c76:	4299      	cmp	r1, r3
 8005c78:	dd41      	ble.n	8005cfe <_printf_float+0x1be>
 8005c7a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005c7e:	fa5f fb8b 	uxtb.w	fp, fp
 8005c82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c86:	d820      	bhi.n	8005cca <_printf_float+0x18a>
 8005c88:	3901      	subs	r1, #1
 8005c8a:	465a      	mov	r2, fp
 8005c8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c90:	9109      	str	r1, [sp, #36]	; 0x24
 8005c92:	f7ff ff17 	bl	8005ac4 <__exponent>
 8005c96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c98:	1813      	adds	r3, r2, r0
 8005c9a:	2a01      	cmp	r2, #1
 8005c9c:	4681      	mov	r9, r0
 8005c9e:	6123      	str	r3, [r4, #16]
 8005ca0:	dc02      	bgt.n	8005ca8 <_printf_float+0x168>
 8005ca2:	6822      	ldr	r2, [r4, #0]
 8005ca4:	07d2      	lsls	r2, r2, #31
 8005ca6:	d501      	bpl.n	8005cac <_printf_float+0x16c>
 8005ca8:	3301      	adds	r3, #1
 8005caa:	6123      	str	r3, [r4, #16]
 8005cac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d09c      	beq.n	8005bee <_printf_float+0xae>
 8005cb4:	232d      	movs	r3, #45	; 0x2d
 8005cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cba:	e798      	b.n	8005bee <_printf_float+0xae>
 8005cbc:	9a06      	ldr	r2, [sp, #24]
 8005cbe:	2a47      	cmp	r2, #71	; 0x47
 8005cc0:	d1be      	bne.n	8005c40 <_printf_float+0x100>
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1bc      	bne.n	8005c40 <_printf_float+0x100>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e7b9      	b.n	8005c3e <_printf_float+0xfe>
 8005cca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005cce:	d118      	bne.n	8005d02 <_printf_float+0x1c2>
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	6863      	ldr	r3, [r4, #4]
 8005cd4:	dd0b      	ble.n	8005cee <_printf_float+0x1ae>
 8005cd6:	6121      	str	r1, [r4, #16]
 8005cd8:	b913      	cbnz	r3, 8005ce0 <_printf_float+0x1a0>
 8005cda:	6822      	ldr	r2, [r4, #0]
 8005cdc:	07d0      	lsls	r0, r2, #31
 8005cde:	d502      	bpl.n	8005ce6 <_printf_float+0x1a6>
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	440b      	add	r3, r1
 8005ce4:	6123      	str	r3, [r4, #16]
 8005ce6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ce8:	f04f 0900 	mov.w	r9, #0
 8005cec:	e7de      	b.n	8005cac <_printf_float+0x16c>
 8005cee:	b913      	cbnz	r3, 8005cf6 <_printf_float+0x1b6>
 8005cf0:	6822      	ldr	r2, [r4, #0]
 8005cf2:	07d2      	lsls	r2, r2, #31
 8005cf4:	d501      	bpl.n	8005cfa <_printf_float+0x1ba>
 8005cf6:	3302      	adds	r3, #2
 8005cf8:	e7f4      	b.n	8005ce4 <_printf_float+0x1a4>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e7f2      	b.n	8005ce4 <_printf_float+0x1a4>
 8005cfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d04:	4299      	cmp	r1, r3
 8005d06:	db05      	blt.n	8005d14 <_printf_float+0x1d4>
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	6121      	str	r1, [r4, #16]
 8005d0c:	07d8      	lsls	r0, r3, #31
 8005d0e:	d5ea      	bpl.n	8005ce6 <_printf_float+0x1a6>
 8005d10:	1c4b      	adds	r3, r1, #1
 8005d12:	e7e7      	b.n	8005ce4 <_printf_float+0x1a4>
 8005d14:	2900      	cmp	r1, #0
 8005d16:	bfd4      	ite	le
 8005d18:	f1c1 0202 	rsble	r2, r1, #2
 8005d1c:	2201      	movgt	r2, #1
 8005d1e:	4413      	add	r3, r2
 8005d20:	e7e0      	b.n	8005ce4 <_printf_float+0x1a4>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	055a      	lsls	r2, r3, #21
 8005d26:	d407      	bmi.n	8005d38 <_printf_float+0x1f8>
 8005d28:	6923      	ldr	r3, [r4, #16]
 8005d2a:	4642      	mov	r2, r8
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	4628      	mov	r0, r5
 8005d30:	47b8      	blx	r7
 8005d32:	3001      	adds	r0, #1
 8005d34:	d12c      	bne.n	8005d90 <_printf_float+0x250>
 8005d36:	e764      	b.n	8005c02 <_printf_float+0xc2>
 8005d38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d3c:	f240 80e0 	bls.w	8005f00 <_printf_float+0x3c0>
 8005d40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d44:	2200      	movs	r2, #0
 8005d46:	2300      	movs	r3, #0
 8005d48:	f7fa fed6 	bl	8000af8 <__aeabi_dcmpeq>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d034      	beq.n	8005dba <_printf_float+0x27a>
 8005d50:	4a37      	ldr	r2, [pc, #220]	; (8005e30 <_printf_float+0x2f0>)
 8005d52:	2301      	movs	r3, #1
 8005d54:	4631      	mov	r1, r6
 8005d56:	4628      	mov	r0, r5
 8005d58:	47b8      	blx	r7
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	f43f af51 	beq.w	8005c02 <_printf_float+0xc2>
 8005d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d64:	429a      	cmp	r2, r3
 8005d66:	db02      	blt.n	8005d6e <_printf_float+0x22e>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	07d8      	lsls	r0, r3, #31
 8005d6c:	d510      	bpl.n	8005d90 <_printf_float+0x250>
 8005d6e:	ee18 3a10 	vmov	r3, s16
 8005d72:	4652      	mov	r2, sl
 8005d74:	4631      	mov	r1, r6
 8005d76:	4628      	mov	r0, r5
 8005d78:	47b8      	blx	r7
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	f43f af41 	beq.w	8005c02 <_printf_float+0xc2>
 8005d80:	f04f 0800 	mov.w	r8, #0
 8005d84:	f104 091a 	add.w	r9, r4, #26
 8005d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	4543      	cmp	r3, r8
 8005d8e:	dc09      	bgt.n	8005da4 <_printf_float+0x264>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	079b      	lsls	r3, r3, #30
 8005d94:	f100 8105 	bmi.w	8005fa2 <_printf_float+0x462>
 8005d98:	68e0      	ldr	r0, [r4, #12]
 8005d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d9c:	4298      	cmp	r0, r3
 8005d9e:	bfb8      	it	lt
 8005da0:	4618      	movlt	r0, r3
 8005da2:	e730      	b.n	8005c06 <_printf_float+0xc6>
 8005da4:	2301      	movs	r3, #1
 8005da6:	464a      	mov	r2, r9
 8005da8:	4631      	mov	r1, r6
 8005daa:	4628      	mov	r0, r5
 8005dac:	47b8      	blx	r7
 8005dae:	3001      	adds	r0, #1
 8005db0:	f43f af27 	beq.w	8005c02 <_printf_float+0xc2>
 8005db4:	f108 0801 	add.w	r8, r8, #1
 8005db8:	e7e6      	b.n	8005d88 <_printf_float+0x248>
 8005dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dc39      	bgt.n	8005e34 <_printf_float+0x2f4>
 8005dc0:	4a1b      	ldr	r2, [pc, #108]	; (8005e30 <_printf_float+0x2f0>)
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	47b8      	blx	r7
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f43f af19 	beq.w	8005c02 <_printf_float+0xc2>
 8005dd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	d102      	bne.n	8005dde <_printf_float+0x29e>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	07d9      	lsls	r1, r3, #31
 8005ddc:	d5d8      	bpl.n	8005d90 <_printf_float+0x250>
 8005dde:	ee18 3a10 	vmov	r3, s16
 8005de2:	4652      	mov	r2, sl
 8005de4:	4631      	mov	r1, r6
 8005de6:	4628      	mov	r0, r5
 8005de8:	47b8      	blx	r7
 8005dea:	3001      	adds	r0, #1
 8005dec:	f43f af09 	beq.w	8005c02 <_printf_float+0xc2>
 8005df0:	f04f 0900 	mov.w	r9, #0
 8005df4:	f104 0a1a 	add.w	sl, r4, #26
 8005df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dfa:	425b      	negs	r3, r3
 8005dfc:	454b      	cmp	r3, r9
 8005dfe:	dc01      	bgt.n	8005e04 <_printf_float+0x2c4>
 8005e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e02:	e792      	b.n	8005d2a <_printf_float+0x1ea>
 8005e04:	2301      	movs	r3, #1
 8005e06:	4652      	mov	r2, sl
 8005e08:	4631      	mov	r1, r6
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	47b8      	blx	r7
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f43f aef7 	beq.w	8005c02 <_printf_float+0xc2>
 8005e14:	f109 0901 	add.w	r9, r9, #1
 8005e18:	e7ee      	b.n	8005df8 <_printf_float+0x2b8>
 8005e1a:	bf00      	nop
 8005e1c:	7fefffff 	.word	0x7fefffff
 8005e20:	08009fcc 	.word	0x08009fcc
 8005e24:	08009fd0 	.word	0x08009fd0
 8005e28:	08009fd8 	.word	0x08009fd8
 8005e2c:	08009fd4 	.word	0x08009fd4
 8005e30:	0800a201 	.word	0x0800a201
 8005e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	bfa8      	it	ge
 8005e3c:	461a      	movge	r2, r3
 8005e3e:	2a00      	cmp	r2, #0
 8005e40:	4691      	mov	r9, r2
 8005e42:	dc37      	bgt.n	8005eb4 <_printf_float+0x374>
 8005e44:	f04f 0b00 	mov.w	fp, #0
 8005e48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e4c:	f104 021a 	add.w	r2, r4, #26
 8005e50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e52:	9305      	str	r3, [sp, #20]
 8005e54:	eba3 0309 	sub.w	r3, r3, r9
 8005e58:	455b      	cmp	r3, fp
 8005e5a:	dc33      	bgt.n	8005ec4 <_printf_float+0x384>
 8005e5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e60:	429a      	cmp	r2, r3
 8005e62:	db3b      	blt.n	8005edc <_printf_float+0x39c>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	07da      	lsls	r2, r3, #31
 8005e68:	d438      	bmi.n	8005edc <_printf_float+0x39c>
 8005e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e6c:	9a05      	ldr	r2, [sp, #20]
 8005e6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e70:	1a9a      	subs	r2, r3, r2
 8005e72:	eba3 0901 	sub.w	r9, r3, r1
 8005e76:	4591      	cmp	r9, r2
 8005e78:	bfa8      	it	ge
 8005e7a:	4691      	movge	r9, r2
 8005e7c:	f1b9 0f00 	cmp.w	r9, #0
 8005e80:	dc35      	bgt.n	8005eee <_printf_float+0x3ae>
 8005e82:	f04f 0800 	mov.w	r8, #0
 8005e86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e8a:	f104 0a1a 	add.w	sl, r4, #26
 8005e8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e92:	1a9b      	subs	r3, r3, r2
 8005e94:	eba3 0309 	sub.w	r3, r3, r9
 8005e98:	4543      	cmp	r3, r8
 8005e9a:	f77f af79 	ble.w	8005d90 <_printf_float+0x250>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	4652      	mov	r2, sl
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	47b8      	blx	r7
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	f43f aeaa 	beq.w	8005c02 <_printf_float+0xc2>
 8005eae:	f108 0801 	add.w	r8, r8, #1
 8005eb2:	e7ec      	b.n	8005e8e <_printf_float+0x34e>
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	4642      	mov	r2, r8
 8005eba:	4628      	mov	r0, r5
 8005ebc:	47b8      	blx	r7
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	d1c0      	bne.n	8005e44 <_printf_float+0x304>
 8005ec2:	e69e      	b.n	8005c02 <_printf_float+0xc2>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4628      	mov	r0, r5
 8005eca:	9205      	str	r2, [sp, #20]
 8005ecc:	47b8      	blx	r7
 8005ece:	3001      	adds	r0, #1
 8005ed0:	f43f ae97 	beq.w	8005c02 <_printf_float+0xc2>
 8005ed4:	9a05      	ldr	r2, [sp, #20]
 8005ed6:	f10b 0b01 	add.w	fp, fp, #1
 8005eda:	e7b9      	b.n	8005e50 <_printf_float+0x310>
 8005edc:	ee18 3a10 	vmov	r3, s16
 8005ee0:	4652      	mov	r2, sl
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	47b8      	blx	r7
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d1be      	bne.n	8005e6a <_printf_float+0x32a>
 8005eec:	e689      	b.n	8005c02 <_printf_float+0xc2>
 8005eee:	9a05      	ldr	r2, [sp, #20]
 8005ef0:	464b      	mov	r3, r9
 8005ef2:	4442      	add	r2, r8
 8005ef4:	4631      	mov	r1, r6
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	47b8      	blx	r7
 8005efa:	3001      	adds	r0, #1
 8005efc:	d1c1      	bne.n	8005e82 <_printf_float+0x342>
 8005efe:	e680      	b.n	8005c02 <_printf_float+0xc2>
 8005f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f02:	2a01      	cmp	r2, #1
 8005f04:	dc01      	bgt.n	8005f0a <_printf_float+0x3ca>
 8005f06:	07db      	lsls	r3, r3, #31
 8005f08:	d538      	bpl.n	8005f7c <_printf_float+0x43c>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	4642      	mov	r2, r8
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4628      	mov	r0, r5
 8005f12:	47b8      	blx	r7
 8005f14:	3001      	adds	r0, #1
 8005f16:	f43f ae74 	beq.w	8005c02 <_printf_float+0xc2>
 8005f1a:	ee18 3a10 	vmov	r3, s16
 8005f1e:	4652      	mov	r2, sl
 8005f20:	4631      	mov	r1, r6
 8005f22:	4628      	mov	r0, r5
 8005f24:	47b8      	blx	r7
 8005f26:	3001      	adds	r0, #1
 8005f28:	f43f ae6b 	beq.w	8005c02 <_printf_float+0xc2>
 8005f2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f30:	2200      	movs	r2, #0
 8005f32:	2300      	movs	r3, #0
 8005f34:	f7fa fde0 	bl	8000af8 <__aeabi_dcmpeq>
 8005f38:	b9d8      	cbnz	r0, 8005f72 <_printf_float+0x432>
 8005f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f3c:	f108 0201 	add.w	r2, r8, #1
 8005f40:	3b01      	subs	r3, #1
 8005f42:	4631      	mov	r1, r6
 8005f44:	4628      	mov	r0, r5
 8005f46:	47b8      	blx	r7
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d10e      	bne.n	8005f6a <_printf_float+0x42a>
 8005f4c:	e659      	b.n	8005c02 <_printf_float+0xc2>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	4652      	mov	r2, sl
 8005f52:	4631      	mov	r1, r6
 8005f54:	4628      	mov	r0, r5
 8005f56:	47b8      	blx	r7
 8005f58:	3001      	adds	r0, #1
 8005f5a:	f43f ae52 	beq.w	8005c02 <_printf_float+0xc2>
 8005f5e:	f108 0801 	add.w	r8, r8, #1
 8005f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f64:	3b01      	subs	r3, #1
 8005f66:	4543      	cmp	r3, r8
 8005f68:	dcf1      	bgt.n	8005f4e <_printf_float+0x40e>
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f70:	e6dc      	b.n	8005d2c <_printf_float+0x1ec>
 8005f72:	f04f 0800 	mov.w	r8, #0
 8005f76:	f104 0a1a 	add.w	sl, r4, #26
 8005f7a:	e7f2      	b.n	8005f62 <_printf_float+0x422>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	4642      	mov	r2, r8
 8005f80:	e7df      	b.n	8005f42 <_printf_float+0x402>
 8005f82:	2301      	movs	r3, #1
 8005f84:	464a      	mov	r2, r9
 8005f86:	4631      	mov	r1, r6
 8005f88:	4628      	mov	r0, r5
 8005f8a:	47b8      	blx	r7
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	f43f ae38 	beq.w	8005c02 <_printf_float+0xc2>
 8005f92:	f108 0801 	add.w	r8, r8, #1
 8005f96:	68e3      	ldr	r3, [r4, #12]
 8005f98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f9a:	1a5b      	subs	r3, r3, r1
 8005f9c:	4543      	cmp	r3, r8
 8005f9e:	dcf0      	bgt.n	8005f82 <_printf_float+0x442>
 8005fa0:	e6fa      	b.n	8005d98 <_printf_float+0x258>
 8005fa2:	f04f 0800 	mov.w	r8, #0
 8005fa6:	f104 0919 	add.w	r9, r4, #25
 8005faa:	e7f4      	b.n	8005f96 <_printf_float+0x456>

08005fac <_printf_common>:
 8005fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb0:	4616      	mov	r6, r2
 8005fb2:	4699      	mov	r9, r3
 8005fb4:	688a      	ldr	r2, [r1, #8]
 8005fb6:	690b      	ldr	r3, [r1, #16]
 8005fb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	bfb8      	it	lt
 8005fc0:	4613      	movlt	r3, r2
 8005fc2:	6033      	str	r3, [r6, #0]
 8005fc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fc8:	4607      	mov	r7, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	b10a      	cbz	r2, 8005fd2 <_printf_common+0x26>
 8005fce:	3301      	adds	r3, #1
 8005fd0:	6033      	str	r3, [r6, #0]
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	0699      	lsls	r1, r3, #26
 8005fd6:	bf42      	ittt	mi
 8005fd8:	6833      	ldrmi	r3, [r6, #0]
 8005fda:	3302      	addmi	r3, #2
 8005fdc:	6033      	strmi	r3, [r6, #0]
 8005fde:	6825      	ldr	r5, [r4, #0]
 8005fe0:	f015 0506 	ands.w	r5, r5, #6
 8005fe4:	d106      	bne.n	8005ff4 <_printf_common+0x48>
 8005fe6:	f104 0a19 	add.w	sl, r4, #25
 8005fea:	68e3      	ldr	r3, [r4, #12]
 8005fec:	6832      	ldr	r2, [r6, #0]
 8005fee:	1a9b      	subs	r3, r3, r2
 8005ff0:	42ab      	cmp	r3, r5
 8005ff2:	dc26      	bgt.n	8006042 <_printf_common+0x96>
 8005ff4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ff8:	1e13      	subs	r3, r2, #0
 8005ffa:	6822      	ldr	r2, [r4, #0]
 8005ffc:	bf18      	it	ne
 8005ffe:	2301      	movne	r3, #1
 8006000:	0692      	lsls	r2, r2, #26
 8006002:	d42b      	bmi.n	800605c <_printf_common+0xb0>
 8006004:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006008:	4649      	mov	r1, r9
 800600a:	4638      	mov	r0, r7
 800600c:	47c0      	blx	r8
 800600e:	3001      	adds	r0, #1
 8006010:	d01e      	beq.n	8006050 <_printf_common+0xa4>
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	68e5      	ldr	r5, [r4, #12]
 8006016:	6832      	ldr	r2, [r6, #0]
 8006018:	f003 0306 	and.w	r3, r3, #6
 800601c:	2b04      	cmp	r3, #4
 800601e:	bf08      	it	eq
 8006020:	1aad      	subeq	r5, r5, r2
 8006022:	68a3      	ldr	r3, [r4, #8]
 8006024:	6922      	ldr	r2, [r4, #16]
 8006026:	bf0c      	ite	eq
 8006028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800602c:	2500      	movne	r5, #0
 800602e:	4293      	cmp	r3, r2
 8006030:	bfc4      	itt	gt
 8006032:	1a9b      	subgt	r3, r3, r2
 8006034:	18ed      	addgt	r5, r5, r3
 8006036:	2600      	movs	r6, #0
 8006038:	341a      	adds	r4, #26
 800603a:	42b5      	cmp	r5, r6
 800603c:	d11a      	bne.n	8006074 <_printf_common+0xc8>
 800603e:	2000      	movs	r0, #0
 8006040:	e008      	b.n	8006054 <_printf_common+0xa8>
 8006042:	2301      	movs	r3, #1
 8006044:	4652      	mov	r2, sl
 8006046:	4649      	mov	r1, r9
 8006048:	4638      	mov	r0, r7
 800604a:	47c0      	blx	r8
 800604c:	3001      	adds	r0, #1
 800604e:	d103      	bne.n	8006058 <_printf_common+0xac>
 8006050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006058:	3501      	adds	r5, #1
 800605a:	e7c6      	b.n	8005fea <_printf_common+0x3e>
 800605c:	18e1      	adds	r1, r4, r3
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	2030      	movs	r0, #48	; 0x30
 8006062:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006066:	4422      	add	r2, r4
 8006068:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800606c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006070:	3302      	adds	r3, #2
 8006072:	e7c7      	b.n	8006004 <_printf_common+0x58>
 8006074:	2301      	movs	r3, #1
 8006076:	4622      	mov	r2, r4
 8006078:	4649      	mov	r1, r9
 800607a:	4638      	mov	r0, r7
 800607c:	47c0      	blx	r8
 800607e:	3001      	adds	r0, #1
 8006080:	d0e6      	beq.n	8006050 <_printf_common+0xa4>
 8006082:	3601      	adds	r6, #1
 8006084:	e7d9      	b.n	800603a <_printf_common+0x8e>
	...

08006088 <_printf_i>:
 8006088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800608c:	7e0f      	ldrb	r7, [r1, #24]
 800608e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006090:	2f78      	cmp	r7, #120	; 0x78
 8006092:	4691      	mov	r9, r2
 8006094:	4680      	mov	r8, r0
 8006096:	460c      	mov	r4, r1
 8006098:	469a      	mov	sl, r3
 800609a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800609e:	d807      	bhi.n	80060b0 <_printf_i+0x28>
 80060a0:	2f62      	cmp	r7, #98	; 0x62
 80060a2:	d80a      	bhi.n	80060ba <_printf_i+0x32>
 80060a4:	2f00      	cmp	r7, #0
 80060a6:	f000 80d8 	beq.w	800625a <_printf_i+0x1d2>
 80060aa:	2f58      	cmp	r7, #88	; 0x58
 80060ac:	f000 80a3 	beq.w	80061f6 <_printf_i+0x16e>
 80060b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060b8:	e03a      	b.n	8006130 <_printf_i+0xa8>
 80060ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060be:	2b15      	cmp	r3, #21
 80060c0:	d8f6      	bhi.n	80060b0 <_printf_i+0x28>
 80060c2:	a101      	add	r1, pc, #4	; (adr r1, 80060c8 <_printf_i+0x40>)
 80060c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060c8:	08006121 	.word	0x08006121
 80060cc:	08006135 	.word	0x08006135
 80060d0:	080060b1 	.word	0x080060b1
 80060d4:	080060b1 	.word	0x080060b1
 80060d8:	080060b1 	.word	0x080060b1
 80060dc:	080060b1 	.word	0x080060b1
 80060e0:	08006135 	.word	0x08006135
 80060e4:	080060b1 	.word	0x080060b1
 80060e8:	080060b1 	.word	0x080060b1
 80060ec:	080060b1 	.word	0x080060b1
 80060f0:	080060b1 	.word	0x080060b1
 80060f4:	08006241 	.word	0x08006241
 80060f8:	08006165 	.word	0x08006165
 80060fc:	08006223 	.word	0x08006223
 8006100:	080060b1 	.word	0x080060b1
 8006104:	080060b1 	.word	0x080060b1
 8006108:	08006263 	.word	0x08006263
 800610c:	080060b1 	.word	0x080060b1
 8006110:	08006165 	.word	0x08006165
 8006114:	080060b1 	.word	0x080060b1
 8006118:	080060b1 	.word	0x080060b1
 800611c:	0800622b 	.word	0x0800622b
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	1d1a      	adds	r2, r3, #4
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	602a      	str	r2, [r5, #0]
 8006128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800612c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006130:	2301      	movs	r3, #1
 8006132:	e0a3      	b.n	800627c <_printf_i+0x1f4>
 8006134:	6820      	ldr	r0, [r4, #0]
 8006136:	6829      	ldr	r1, [r5, #0]
 8006138:	0606      	lsls	r6, r0, #24
 800613a:	f101 0304 	add.w	r3, r1, #4
 800613e:	d50a      	bpl.n	8006156 <_printf_i+0xce>
 8006140:	680e      	ldr	r6, [r1, #0]
 8006142:	602b      	str	r3, [r5, #0]
 8006144:	2e00      	cmp	r6, #0
 8006146:	da03      	bge.n	8006150 <_printf_i+0xc8>
 8006148:	232d      	movs	r3, #45	; 0x2d
 800614a:	4276      	negs	r6, r6
 800614c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006150:	485e      	ldr	r0, [pc, #376]	; (80062cc <_printf_i+0x244>)
 8006152:	230a      	movs	r3, #10
 8006154:	e019      	b.n	800618a <_printf_i+0x102>
 8006156:	680e      	ldr	r6, [r1, #0]
 8006158:	602b      	str	r3, [r5, #0]
 800615a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800615e:	bf18      	it	ne
 8006160:	b236      	sxthne	r6, r6
 8006162:	e7ef      	b.n	8006144 <_printf_i+0xbc>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	6820      	ldr	r0, [r4, #0]
 8006168:	1d19      	adds	r1, r3, #4
 800616a:	6029      	str	r1, [r5, #0]
 800616c:	0601      	lsls	r1, r0, #24
 800616e:	d501      	bpl.n	8006174 <_printf_i+0xec>
 8006170:	681e      	ldr	r6, [r3, #0]
 8006172:	e002      	b.n	800617a <_printf_i+0xf2>
 8006174:	0646      	lsls	r6, r0, #25
 8006176:	d5fb      	bpl.n	8006170 <_printf_i+0xe8>
 8006178:	881e      	ldrh	r6, [r3, #0]
 800617a:	4854      	ldr	r0, [pc, #336]	; (80062cc <_printf_i+0x244>)
 800617c:	2f6f      	cmp	r7, #111	; 0x6f
 800617e:	bf0c      	ite	eq
 8006180:	2308      	moveq	r3, #8
 8006182:	230a      	movne	r3, #10
 8006184:	2100      	movs	r1, #0
 8006186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800618a:	6865      	ldr	r5, [r4, #4]
 800618c:	60a5      	str	r5, [r4, #8]
 800618e:	2d00      	cmp	r5, #0
 8006190:	bfa2      	ittt	ge
 8006192:	6821      	ldrge	r1, [r4, #0]
 8006194:	f021 0104 	bicge.w	r1, r1, #4
 8006198:	6021      	strge	r1, [r4, #0]
 800619a:	b90e      	cbnz	r6, 80061a0 <_printf_i+0x118>
 800619c:	2d00      	cmp	r5, #0
 800619e:	d04d      	beq.n	800623c <_printf_i+0x1b4>
 80061a0:	4615      	mov	r5, r2
 80061a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80061a6:	fb03 6711 	mls	r7, r3, r1, r6
 80061aa:	5dc7      	ldrb	r7, [r0, r7]
 80061ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061b0:	4637      	mov	r7, r6
 80061b2:	42bb      	cmp	r3, r7
 80061b4:	460e      	mov	r6, r1
 80061b6:	d9f4      	bls.n	80061a2 <_printf_i+0x11a>
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d10b      	bne.n	80061d4 <_printf_i+0x14c>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	07de      	lsls	r6, r3, #31
 80061c0:	d508      	bpl.n	80061d4 <_printf_i+0x14c>
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	6861      	ldr	r1, [r4, #4]
 80061c6:	4299      	cmp	r1, r3
 80061c8:	bfde      	ittt	le
 80061ca:	2330      	movle	r3, #48	; 0x30
 80061cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80061d4:	1b52      	subs	r2, r2, r5
 80061d6:	6122      	str	r2, [r4, #16]
 80061d8:	f8cd a000 	str.w	sl, [sp]
 80061dc:	464b      	mov	r3, r9
 80061de:	aa03      	add	r2, sp, #12
 80061e0:	4621      	mov	r1, r4
 80061e2:	4640      	mov	r0, r8
 80061e4:	f7ff fee2 	bl	8005fac <_printf_common>
 80061e8:	3001      	adds	r0, #1
 80061ea:	d14c      	bne.n	8006286 <_printf_i+0x1fe>
 80061ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061f0:	b004      	add	sp, #16
 80061f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f6:	4835      	ldr	r0, [pc, #212]	; (80062cc <_printf_i+0x244>)
 80061f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80061fc:	6829      	ldr	r1, [r5, #0]
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	f851 6b04 	ldr.w	r6, [r1], #4
 8006204:	6029      	str	r1, [r5, #0]
 8006206:	061d      	lsls	r5, r3, #24
 8006208:	d514      	bpl.n	8006234 <_printf_i+0x1ac>
 800620a:	07df      	lsls	r7, r3, #31
 800620c:	bf44      	itt	mi
 800620e:	f043 0320 	orrmi.w	r3, r3, #32
 8006212:	6023      	strmi	r3, [r4, #0]
 8006214:	b91e      	cbnz	r6, 800621e <_printf_i+0x196>
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	f023 0320 	bic.w	r3, r3, #32
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	2310      	movs	r3, #16
 8006220:	e7b0      	b.n	8006184 <_printf_i+0xfc>
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	f043 0320 	orr.w	r3, r3, #32
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	2378      	movs	r3, #120	; 0x78
 800622c:	4828      	ldr	r0, [pc, #160]	; (80062d0 <_printf_i+0x248>)
 800622e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006232:	e7e3      	b.n	80061fc <_printf_i+0x174>
 8006234:	0659      	lsls	r1, r3, #25
 8006236:	bf48      	it	mi
 8006238:	b2b6      	uxthmi	r6, r6
 800623a:	e7e6      	b.n	800620a <_printf_i+0x182>
 800623c:	4615      	mov	r5, r2
 800623e:	e7bb      	b.n	80061b8 <_printf_i+0x130>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	6826      	ldr	r6, [r4, #0]
 8006244:	6961      	ldr	r1, [r4, #20]
 8006246:	1d18      	adds	r0, r3, #4
 8006248:	6028      	str	r0, [r5, #0]
 800624a:	0635      	lsls	r5, r6, #24
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	d501      	bpl.n	8006254 <_printf_i+0x1cc>
 8006250:	6019      	str	r1, [r3, #0]
 8006252:	e002      	b.n	800625a <_printf_i+0x1d2>
 8006254:	0670      	lsls	r0, r6, #25
 8006256:	d5fb      	bpl.n	8006250 <_printf_i+0x1c8>
 8006258:	8019      	strh	r1, [r3, #0]
 800625a:	2300      	movs	r3, #0
 800625c:	6123      	str	r3, [r4, #16]
 800625e:	4615      	mov	r5, r2
 8006260:	e7ba      	b.n	80061d8 <_printf_i+0x150>
 8006262:	682b      	ldr	r3, [r5, #0]
 8006264:	1d1a      	adds	r2, r3, #4
 8006266:	602a      	str	r2, [r5, #0]
 8006268:	681d      	ldr	r5, [r3, #0]
 800626a:	6862      	ldr	r2, [r4, #4]
 800626c:	2100      	movs	r1, #0
 800626e:	4628      	mov	r0, r5
 8006270:	f7f9 ffce 	bl	8000210 <memchr>
 8006274:	b108      	cbz	r0, 800627a <_printf_i+0x1f2>
 8006276:	1b40      	subs	r0, r0, r5
 8006278:	6060      	str	r0, [r4, #4]
 800627a:	6863      	ldr	r3, [r4, #4]
 800627c:	6123      	str	r3, [r4, #16]
 800627e:	2300      	movs	r3, #0
 8006280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006284:	e7a8      	b.n	80061d8 <_printf_i+0x150>
 8006286:	6923      	ldr	r3, [r4, #16]
 8006288:	462a      	mov	r2, r5
 800628a:	4649      	mov	r1, r9
 800628c:	4640      	mov	r0, r8
 800628e:	47d0      	blx	sl
 8006290:	3001      	adds	r0, #1
 8006292:	d0ab      	beq.n	80061ec <_printf_i+0x164>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	079b      	lsls	r3, r3, #30
 8006298:	d413      	bmi.n	80062c2 <_printf_i+0x23a>
 800629a:	68e0      	ldr	r0, [r4, #12]
 800629c:	9b03      	ldr	r3, [sp, #12]
 800629e:	4298      	cmp	r0, r3
 80062a0:	bfb8      	it	lt
 80062a2:	4618      	movlt	r0, r3
 80062a4:	e7a4      	b.n	80061f0 <_printf_i+0x168>
 80062a6:	2301      	movs	r3, #1
 80062a8:	4632      	mov	r2, r6
 80062aa:	4649      	mov	r1, r9
 80062ac:	4640      	mov	r0, r8
 80062ae:	47d0      	blx	sl
 80062b0:	3001      	adds	r0, #1
 80062b2:	d09b      	beq.n	80061ec <_printf_i+0x164>
 80062b4:	3501      	adds	r5, #1
 80062b6:	68e3      	ldr	r3, [r4, #12]
 80062b8:	9903      	ldr	r1, [sp, #12]
 80062ba:	1a5b      	subs	r3, r3, r1
 80062bc:	42ab      	cmp	r3, r5
 80062be:	dcf2      	bgt.n	80062a6 <_printf_i+0x21e>
 80062c0:	e7eb      	b.n	800629a <_printf_i+0x212>
 80062c2:	2500      	movs	r5, #0
 80062c4:	f104 0619 	add.w	r6, r4, #25
 80062c8:	e7f5      	b.n	80062b6 <_printf_i+0x22e>
 80062ca:	bf00      	nop
 80062cc:	08009fdc 	.word	0x08009fdc
 80062d0:	08009fed 	.word	0x08009fed

080062d4 <_sbrk_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4d06      	ldr	r5, [pc, #24]	; (80062f0 <_sbrk_r+0x1c>)
 80062d8:	2300      	movs	r3, #0
 80062da:	4604      	mov	r4, r0
 80062dc:	4608      	mov	r0, r1
 80062de:	602b      	str	r3, [r5, #0]
 80062e0:	f003 fda4 	bl	8009e2c <_sbrk>
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	d102      	bne.n	80062ee <_sbrk_r+0x1a>
 80062e8:	682b      	ldr	r3, [r5, #0]
 80062ea:	b103      	cbz	r3, 80062ee <_sbrk_r+0x1a>
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	bd38      	pop	{r3, r4, r5, pc}
 80062f0:	200005b4 	.word	0x200005b4

080062f4 <siprintf>:
 80062f4:	b40e      	push	{r1, r2, r3}
 80062f6:	b500      	push	{lr}
 80062f8:	b09c      	sub	sp, #112	; 0x70
 80062fa:	ab1d      	add	r3, sp, #116	; 0x74
 80062fc:	9002      	str	r0, [sp, #8]
 80062fe:	9006      	str	r0, [sp, #24]
 8006300:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006304:	4809      	ldr	r0, [pc, #36]	; (800632c <siprintf+0x38>)
 8006306:	9107      	str	r1, [sp, #28]
 8006308:	9104      	str	r1, [sp, #16]
 800630a:	4909      	ldr	r1, [pc, #36]	; (8006330 <siprintf+0x3c>)
 800630c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006310:	9105      	str	r1, [sp, #20]
 8006312:	6800      	ldr	r0, [r0, #0]
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	a902      	add	r1, sp, #8
 8006318:	f001 fb42 	bl	80079a0 <_svfiprintf_r>
 800631c:	9b02      	ldr	r3, [sp, #8]
 800631e:	2200      	movs	r2, #0
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	b01c      	add	sp, #112	; 0x70
 8006324:	f85d eb04 	ldr.w	lr, [sp], #4
 8006328:	b003      	add	sp, #12
 800632a:	4770      	bx	lr
 800632c:	20000010 	.word	0x20000010
 8006330:	ffff0208 	.word	0xffff0208

08006334 <siscanf>:
 8006334:	b40e      	push	{r1, r2, r3}
 8006336:	b510      	push	{r4, lr}
 8006338:	b09f      	sub	sp, #124	; 0x7c
 800633a:	ac21      	add	r4, sp, #132	; 0x84
 800633c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006340:	f854 2b04 	ldr.w	r2, [r4], #4
 8006344:	9201      	str	r2, [sp, #4]
 8006346:	f8ad 101c 	strh.w	r1, [sp, #28]
 800634a:	9004      	str	r0, [sp, #16]
 800634c:	9008      	str	r0, [sp, #32]
 800634e:	f7f9 ff51 	bl	80001f4 <strlen>
 8006352:	4b0c      	ldr	r3, [pc, #48]	; (8006384 <siscanf+0x50>)
 8006354:	9005      	str	r0, [sp, #20]
 8006356:	9009      	str	r0, [sp, #36]	; 0x24
 8006358:	930d      	str	r3, [sp, #52]	; 0x34
 800635a:	480b      	ldr	r0, [pc, #44]	; (8006388 <siscanf+0x54>)
 800635c:	9a01      	ldr	r2, [sp, #4]
 800635e:	6800      	ldr	r0, [r0, #0]
 8006360:	9403      	str	r4, [sp, #12]
 8006362:	2300      	movs	r3, #0
 8006364:	9311      	str	r3, [sp, #68]	; 0x44
 8006366:	9316      	str	r3, [sp, #88]	; 0x58
 8006368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800636c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006370:	a904      	add	r1, sp, #16
 8006372:	4623      	mov	r3, r4
 8006374:	f001 fc6e 	bl	8007c54 <__ssvfiscanf_r>
 8006378:	b01f      	add	sp, #124	; 0x7c
 800637a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800637e:	b003      	add	sp, #12
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	080063af 	.word	0x080063af
 8006388:	20000010 	.word	0x20000010

0800638c <__sread>:
 800638c:	b510      	push	{r4, lr}
 800638e:	460c      	mov	r4, r1
 8006390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006394:	f001 ff28 	bl	80081e8 <_read_r>
 8006398:	2800      	cmp	r0, #0
 800639a:	bfab      	itete	ge
 800639c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800639e:	89a3      	ldrhlt	r3, [r4, #12]
 80063a0:	181b      	addge	r3, r3, r0
 80063a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063a6:	bfac      	ite	ge
 80063a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80063aa:	81a3      	strhlt	r3, [r4, #12]
 80063ac:	bd10      	pop	{r4, pc}

080063ae <__seofread>:
 80063ae:	2000      	movs	r0, #0
 80063b0:	4770      	bx	lr

080063b2 <__swrite>:
 80063b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b6:	461f      	mov	r7, r3
 80063b8:	898b      	ldrh	r3, [r1, #12]
 80063ba:	05db      	lsls	r3, r3, #23
 80063bc:	4605      	mov	r5, r0
 80063be:	460c      	mov	r4, r1
 80063c0:	4616      	mov	r6, r2
 80063c2:	d505      	bpl.n	80063d0 <__swrite+0x1e>
 80063c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c8:	2302      	movs	r3, #2
 80063ca:	2200      	movs	r2, #0
 80063cc:	f000 fec6 	bl	800715c <_lseek_r>
 80063d0:	89a3      	ldrh	r3, [r4, #12]
 80063d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063da:	81a3      	strh	r3, [r4, #12]
 80063dc:	4632      	mov	r2, r6
 80063de:	463b      	mov	r3, r7
 80063e0:	4628      	mov	r0, r5
 80063e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063e6:	f000 b817 	b.w	8006418 <_write_r>

080063ea <__sseek>:
 80063ea:	b510      	push	{r4, lr}
 80063ec:	460c      	mov	r4, r1
 80063ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f2:	f000 feb3 	bl	800715c <_lseek_r>
 80063f6:	1c43      	adds	r3, r0, #1
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	bf15      	itete	ne
 80063fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80063fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006406:	81a3      	strheq	r3, [r4, #12]
 8006408:	bf18      	it	ne
 800640a:	81a3      	strhne	r3, [r4, #12]
 800640c:	bd10      	pop	{r4, pc}

0800640e <__sclose>:
 800640e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006412:	f000 b813 	b.w	800643c <_close_r>
	...

08006418 <_write_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	4d07      	ldr	r5, [pc, #28]	; (8006438 <_write_r+0x20>)
 800641c:	4604      	mov	r4, r0
 800641e:	4608      	mov	r0, r1
 8006420:	4611      	mov	r1, r2
 8006422:	2200      	movs	r2, #0
 8006424:	602a      	str	r2, [r5, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	f7fb fbfd 	bl	8001c26 <_write>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d102      	bne.n	8006436 <_write_r+0x1e>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	b103      	cbz	r3, 8006436 <_write_r+0x1e>
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	bd38      	pop	{r3, r4, r5, pc}
 8006438:	200005b4 	.word	0x200005b4

0800643c <_close_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4d06      	ldr	r5, [pc, #24]	; (8006458 <_close_r+0x1c>)
 8006440:	2300      	movs	r3, #0
 8006442:	4604      	mov	r4, r0
 8006444:	4608      	mov	r0, r1
 8006446:	602b      	str	r3, [r5, #0]
 8006448:	f7fb fc09 	bl	8001c5e <_close>
 800644c:	1c43      	adds	r3, r0, #1
 800644e:	d102      	bne.n	8006456 <_close_r+0x1a>
 8006450:	682b      	ldr	r3, [r5, #0]
 8006452:	b103      	cbz	r3, 8006456 <_close_r+0x1a>
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	bd38      	pop	{r3, r4, r5, pc}
 8006458:	200005b4 	.word	0x200005b4

0800645c <quorem>:
 800645c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006460:	6903      	ldr	r3, [r0, #16]
 8006462:	690c      	ldr	r4, [r1, #16]
 8006464:	42a3      	cmp	r3, r4
 8006466:	4607      	mov	r7, r0
 8006468:	f2c0 8081 	blt.w	800656e <quorem+0x112>
 800646c:	3c01      	subs	r4, #1
 800646e:	f101 0814 	add.w	r8, r1, #20
 8006472:	f100 0514 	add.w	r5, r0, #20
 8006476:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006480:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006484:	3301      	adds	r3, #1
 8006486:	429a      	cmp	r2, r3
 8006488:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800648c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006490:	fbb2 f6f3 	udiv	r6, r2, r3
 8006494:	d331      	bcc.n	80064fa <quorem+0x9e>
 8006496:	f04f 0e00 	mov.w	lr, #0
 800649a:	4640      	mov	r0, r8
 800649c:	46ac      	mov	ip, r5
 800649e:	46f2      	mov	sl, lr
 80064a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80064a4:	b293      	uxth	r3, r2
 80064a6:	fb06 e303 	mla	r3, r6, r3, lr
 80064aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	ebaa 0303 	sub.w	r3, sl, r3
 80064b4:	f8dc a000 	ldr.w	sl, [ip]
 80064b8:	0c12      	lsrs	r2, r2, #16
 80064ba:	fa13 f38a 	uxtah	r3, r3, sl
 80064be:	fb06 e202 	mla	r2, r6, r2, lr
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	9b00      	ldr	r3, [sp, #0]
 80064c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064ca:	b292      	uxth	r2, r2
 80064cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80064d8:	4581      	cmp	r9, r0
 80064da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064de:	f84c 3b04 	str.w	r3, [ip], #4
 80064e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064e6:	d2db      	bcs.n	80064a0 <quorem+0x44>
 80064e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80064ec:	b92b      	cbnz	r3, 80064fa <quorem+0x9e>
 80064ee:	9b01      	ldr	r3, [sp, #4]
 80064f0:	3b04      	subs	r3, #4
 80064f2:	429d      	cmp	r5, r3
 80064f4:	461a      	mov	r2, r3
 80064f6:	d32e      	bcc.n	8006556 <quorem+0xfa>
 80064f8:	613c      	str	r4, [r7, #16]
 80064fa:	4638      	mov	r0, r7
 80064fc:	f001 f8dc 	bl	80076b8 <__mcmp>
 8006500:	2800      	cmp	r0, #0
 8006502:	db24      	blt.n	800654e <quorem+0xf2>
 8006504:	3601      	adds	r6, #1
 8006506:	4628      	mov	r0, r5
 8006508:	f04f 0c00 	mov.w	ip, #0
 800650c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006510:	f8d0 e000 	ldr.w	lr, [r0]
 8006514:	b293      	uxth	r3, r2
 8006516:	ebac 0303 	sub.w	r3, ip, r3
 800651a:	0c12      	lsrs	r2, r2, #16
 800651c:	fa13 f38e 	uxtah	r3, r3, lr
 8006520:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006524:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006528:	b29b      	uxth	r3, r3
 800652a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800652e:	45c1      	cmp	r9, r8
 8006530:	f840 3b04 	str.w	r3, [r0], #4
 8006534:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006538:	d2e8      	bcs.n	800650c <quorem+0xb0>
 800653a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800653e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006542:	b922      	cbnz	r2, 800654e <quorem+0xf2>
 8006544:	3b04      	subs	r3, #4
 8006546:	429d      	cmp	r5, r3
 8006548:	461a      	mov	r2, r3
 800654a:	d30a      	bcc.n	8006562 <quorem+0x106>
 800654c:	613c      	str	r4, [r7, #16]
 800654e:	4630      	mov	r0, r6
 8006550:	b003      	add	sp, #12
 8006552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	3b04      	subs	r3, #4
 800655a:	2a00      	cmp	r2, #0
 800655c:	d1cc      	bne.n	80064f8 <quorem+0x9c>
 800655e:	3c01      	subs	r4, #1
 8006560:	e7c7      	b.n	80064f2 <quorem+0x96>
 8006562:	6812      	ldr	r2, [r2, #0]
 8006564:	3b04      	subs	r3, #4
 8006566:	2a00      	cmp	r2, #0
 8006568:	d1f0      	bne.n	800654c <quorem+0xf0>
 800656a:	3c01      	subs	r4, #1
 800656c:	e7eb      	b.n	8006546 <quorem+0xea>
 800656e:	2000      	movs	r0, #0
 8006570:	e7ee      	b.n	8006550 <quorem+0xf4>
 8006572:	0000      	movs	r0, r0
 8006574:	0000      	movs	r0, r0
	...

08006578 <_dtoa_r>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	ed2d 8b04 	vpush	{d8-d9}
 8006580:	ec57 6b10 	vmov	r6, r7, d0
 8006584:	b093      	sub	sp, #76	; 0x4c
 8006586:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006588:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800658c:	9106      	str	r1, [sp, #24]
 800658e:	ee10 aa10 	vmov	sl, s0
 8006592:	4604      	mov	r4, r0
 8006594:	9209      	str	r2, [sp, #36]	; 0x24
 8006596:	930c      	str	r3, [sp, #48]	; 0x30
 8006598:	46bb      	mov	fp, r7
 800659a:	b975      	cbnz	r5, 80065ba <_dtoa_r+0x42>
 800659c:	2010      	movs	r0, #16
 800659e:	f7ff f93f 	bl	8005820 <malloc>
 80065a2:	4602      	mov	r2, r0
 80065a4:	6260      	str	r0, [r4, #36]	; 0x24
 80065a6:	b920      	cbnz	r0, 80065b2 <_dtoa_r+0x3a>
 80065a8:	4ba7      	ldr	r3, [pc, #668]	; (8006848 <_dtoa_r+0x2d0>)
 80065aa:	21ea      	movs	r1, #234	; 0xea
 80065ac:	48a7      	ldr	r0, [pc, #668]	; (800684c <_dtoa_r+0x2d4>)
 80065ae:	f001 ff97 	bl	80084e0 <__assert_func>
 80065b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065b6:	6005      	str	r5, [r0, #0]
 80065b8:	60c5      	str	r5, [r0, #12]
 80065ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065bc:	6819      	ldr	r1, [r3, #0]
 80065be:	b151      	cbz	r1, 80065d6 <_dtoa_r+0x5e>
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	604a      	str	r2, [r1, #4]
 80065c4:	2301      	movs	r3, #1
 80065c6:	4093      	lsls	r3, r2
 80065c8:	608b      	str	r3, [r1, #8]
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 fe32 	bl	8007234 <_Bfree>
 80065d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	1e3b      	subs	r3, r7, #0
 80065d8:	bfaa      	itet	ge
 80065da:	2300      	movge	r3, #0
 80065dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80065e0:	f8c8 3000 	strge.w	r3, [r8]
 80065e4:	4b9a      	ldr	r3, [pc, #616]	; (8006850 <_dtoa_r+0x2d8>)
 80065e6:	bfbc      	itt	lt
 80065e8:	2201      	movlt	r2, #1
 80065ea:	f8c8 2000 	strlt.w	r2, [r8]
 80065ee:	ea33 030b 	bics.w	r3, r3, fp
 80065f2:	d11b      	bne.n	800662c <_dtoa_r+0xb4>
 80065f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006600:	4333      	orrs	r3, r6
 8006602:	f000 8592 	beq.w	800712a <_dtoa_r+0xbb2>
 8006606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006608:	b963      	cbnz	r3, 8006624 <_dtoa_r+0xac>
 800660a:	4b92      	ldr	r3, [pc, #584]	; (8006854 <_dtoa_r+0x2dc>)
 800660c:	e022      	b.n	8006654 <_dtoa_r+0xdc>
 800660e:	4b92      	ldr	r3, [pc, #584]	; (8006858 <_dtoa_r+0x2e0>)
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	3308      	adds	r3, #8
 8006614:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	9801      	ldr	r0, [sp, #4]
 800661a:	b013      	add	sp, #76	; 0x4c
 800661c:	ecbd 8b04 	vpop	{d8-d9}
 8006620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006624:	4b8b      	ldr	r3, [pc, #556]	; (8006854 <_dtoa_r+0x2dc>)
 8006626:	9301      	str	r3, [sp, #4]
 8006628:	3303      	adds	r3, #3
 800662a:	e7f3      	b.n	8006614 <_dtoa_r+0x9c>
 800662c:	2200      	movs	r2, #0
 800662e:	2300      	movs	r3, #0
 8006630:	4650      	mov	r0, sl
 8006632:	4659      	mov	r1, fp
 8006634:	f7fa fa60 	bl	8000af8 <__aeabi_dcmpeq>
 8006638:	ec4b ab19 	vmov	d9, sl, fp
 800663c:	4680      	mov	r8, r0
 800663e:	b158      	cbz	r0, 8006658 <_dtoa_r+0xe0>
 8006640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006642:	2301      	movs	r3, #1
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 856b 	beq.w	8007124 <_dtoa_r+0xbac>
 800664e:	4883      	ldr	r0, [pc, #524]	; (800685c <_dtoa_r+0x2e4>)
 8006650:	6018      	str	r0, [r3, #0]
 8006652:	1e43      	subs	r3, r0, #1
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	e7df      	b.n	8006618 <_dtoa_r+0xa0>
 8006658:	ec4b ab10 	vmov	d0, sl, fp
 800665c:	aa10      	add	r2, sp, #64	; 0x40
 800665e:	a911      	add	r1, sp, #68	; 0x44
 8006660:	4620      	mov	r0, r4
 8006662:	f001 f8cf 	bl	8007804 <__d2b>
 8006666:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800666a:	ee08 0a10 	vmov	s16, r0
 800666e:	2d00      	cmp	r5, #0
 8006670:	f000 8084 	beq.w	800677c <_dtoa_r+0x204>
 8006674:	ee19 3a90 	vmov	r3, s19
 8006678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800667c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006680:	4656      	mov	r6, sl
 8006682:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006686:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800668a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800668e:	4b74      	ldr	r3, [pc, #464]	; (8006860 <_dtoa_r+0x2e8>)
 8006690:	2200      	movs	r2, #0
 8006692:	4630      	mov	r0, r6
 8006694:	4639      	mov	r1, r7
 8006696:	f7f9 fe0f 	bl	80002b8 <__aeabi_dsub>
 800669a:	a365      	add	r3, pc, #404	; (adr r3, 8006830 <_dtoa_r+0x2b8>)
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	f7f9 ffc2 	bl	8000628 <__aeabi_dmul>
 80066a4:	a364      	add	r3, pc, #400	; (adr r3, 8006838 <_dtoa_r+0x2c0>)
 80066a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066aa:	f7f9 fe07 	bl	80002bc <__adddf3>
 80066ae:	4606      	mov	r6, r0
 80066b0:	4628      	mov	r0, r5
 80066b2:	460f      	mov	r7, r1
 80066b4:	f7f9 ff4e 	bl	8000554 <__aeabi_i2d>
 80066b8:	a361      	add	r3, pc, #388	; (adr r3, 8006840 <_dtoa_r+0x2c8>)
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	f7f9 ffb3 	bl	8000628 <__aeabi_dmul>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4630      	mov	r0, r6
 80066c8:	4639      	mov	r1, r7
 80066ca:	f7f9 fdf7 	bl	80002bc <__adddf3>
 80066ce:	4606      	mov	r6, r0
 80066d0:	460f      	mov	r7, r1
 80066d2:	f7fa fa59 	bl	8000b88 <__aeabi_d2iz>
 80066d6:	2200      	movs	r2, #0
 80066d8:	9000      	str	r0, [sp, #0]
 80066da:	2300      	movs	r3, #0
 80066dc:	4630      	mov	r0, r6
 80066de:	4639      	mov	r1, r7
 80066e0:	f7fa fa14 	bl	8000b0c <__aeabi_dcmplt>
 80066e4:	b150      	cbz	r0, 80066fc <_dtoa_r+0x184>
 80066e6:	9800      	ldr	r0, [sp, #0]
 80066e8:	f7f9 ff34 	bl	8000554 <__aeabi_i2d>
 80066ec:	4632      	mov	r2, r6
 80066ee:	463b      	mov	r3, r7
 80066f0:	f7fa fa02 	bl	8000af8 <__aeabi_dcmpeq>
 80066f4:	b910      	cbnz	r0, 80066fc <_dtoa_r+0x184>
 80066f6:	9b00      	ldr	r3, [sp, #0]
 80066f8:	3b01      	subs	r3, #1
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	9b00      	ldr	r3, [sp, #0]
 80066fe:	2b16      	cmp	r3, #22
 8006700:	d85a      	bhi.n	80067b8 <_dtoa_r+0x240>
 8006702:	9a00      	ldr	r2, [sp, #0]
 8006704:	4b57      	ldr	r3, [pc, #348]	; (8006864 <_dtoa_r+0x2ec>)
 8006706:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	ec51 0b19 	vmov	r0, r1, d9
 8006712:	f7fa f9fb 	bl	8000b0c <__aeabi_dcmplt>
 8006716:	2800      	cmp	r0, #0
 8006718:	d050      	beq.n	80067bc <_dtoa_r+0x244>
 800671a:	9b00      	ldr	r3, [sp, #0]
 800671c:	3b01      	subs	r3, #1
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	2300      	movs	r3, #0
 8006722:	930b      	str	r3, [sp, #44]	; 0x2c
 8006724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006726:	1b5d      	subs	r5, r3, r5
 8006728:	1e6b      	subs	r3, r5, #1
 800672a:	9305      	str	r3, [sp, #20]
 800672c:	bf45      	ittet	mi
 800672e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006732:	9304      	strmi	r3, [sp, #16]
 8006734:	2300      	movpl	r3, #0
 8006736:	2300      	movmi	r3, #0
 8006738:	bf4c      	ite	mi
 800673a:	9305      	strmi	r3, [sp, #20]
 800673c:	9304      	strpl	r3, [sp, #16]
 800673e:	9b00      	ldr	r3, [sp, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	db3d      	blt.n	80067c0 <_dtoa_r+0x248>
 8006744:	9b05      	ldr	r3, [sp, #20]
 8006746:	9a00      	ldr	r2, [sp, #0]
 8006748:	920a      	str	r2, [sp, #40]	; 0x28
 800674a:	4413      	add	r3, r2
 800674c:	9305      	str	r3, [sp, #20]
 800674e:	2300      	movs	r3, #0
 8006750:	9307      	str	r3, [sp, #28]
 8006752:	9b06      	ldr	r3, [sp, #24]
 8006754:	2b09      	cmp	r3, #9
 8006756:	f200 8089 	bhi.w	800686c <_dtoa_r+0x2f4>
 800675a:	2b05      	cmp	r3, #5
 800675c:	bfc4      	itt	gt
 800675e:	3b04      	subgt	r3, #4
 8006760:	9306      	strgt	r3, [sp, #24]
 8006762:	9b06      	ldr	r3, [sp, #24]
 8006764:	f1a3 0302 	sub.w	r3, r3, #2
 8006768:	bfcc      	ite	gt
 800676a:	2500      	movgt	r5, #0
 800676c:	2501      	movle	r5, #1
 800676e:	2b03      	cmp	r3, #3
 8006770:	f200 8087 	bhi.w	8006882 <_dtoa_r+0x30a>
 8006774:	e8df f003 	tbb	[pc, r3]
 8006778:	59383a2d 	.word	0x59383a2d
 800677c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006780:	441d      	add	r5, r3
 8006782:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006786:	2b20      	cmp	r3, #32
 8006788:	bfc1      	itttt	gt
 800678a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800678e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006792:	fa0b f303 	lslgt.w	r3, fp, r3
 8006796:	fa26 f000 	lsrgt.w	r0, r6, r0
 800679a:	bfda      	itte	le
 800679c:	f1c3 0320 	rsble	r3, r3, #32
 80067a0:	fa06 f003 	lslle.w	r0, r6, r3
 80067a4:	4318      	orrgt	r0, r3
 80067a6:	f7f9 fec5 	bl	8000534 <__aeabi_ui2d>
 80067aa:	2301      	movs	r3, #1
 80067ac:	4606      	mov	r6, r0
 80067ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80067b2:	3d01      	subs	r5, #1
 80067b4:	930e      	str	r3, [sp, #56]	; 0x38
 80067b6:	e76a      	b.n	800668e <_dtoa_r+0x116>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e7b2      	b.n	8006722 <_dtoa_r+0x1aa>
 80067bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80067be:	e7b1      	b.n	8006724 <_dtoa_r+0x1ac>
 80067c0:	9b04      	ldr	r3, [sp, #16]
 80067c2:	9a00      	ldr	r2, [sp, #0]
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	9304      	str	r3, [sp, #16]
 80067c8:	4253      	negs	r3, r2
 80067ca:	9307      	str	r3, [sp, #28]
 80067cc:	2300      	movs	r3, #0
 80067ce:	930a      	str	r3, [sp, #40]	; 0x28
 80067d0:	e7bf      	b.n	8006752 <_dtoa_r+0x1da>
 80067d2:	2300      	movs	r3, #0
 80067d4:	9308      	str	r3, [sp, #32]
 80067d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d8:	2b00      	cmp	r3, #0
 80067da:	dc55      	bgt.n	8006888 <_dtoa_r+0x310>
 80067dc:	2301      	movs	r3, #1
 80067de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067e2:	461a      	mov	r2, r3
 80067e4:	9209      	str	r2, [sp, #36]	; 0x24
 80067e6:	e00c      	b.n	8006802 <_dtoa_r+0x28a>
 80067e8:	2301      	movs	r3, #1
 80067ea:	e7f3      	b.n	80067d4 <_dtoa_r+0x25c>
 80067ec:	2300      	movs	r3, #0
 80067ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067f0:	9308      	str	r3, [sp, #32]
 80067f2:	9b00      	ldr	r3, [sp, #0]
 80067f4:	4413      	add	r3, r2
 80067f6:	9302      	str	r3, [sp, #8]
 80067f8:	3301      	adds	r3, #1
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	9303      	str	r3, [sp, #12]
 80067fe:	bfb8      	it	lt
 8006800:	2301      	movlt	r3, #1
 8006802:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006804:	2200      	movs	r2, #0
 8006806:	6042      	str	r2, [r0, #4]
 8006808:	2204      	movs	r2, #4
 800680a:	f102 0614 	add.w	r6, r2, #20
 800680e:	429e      	cmp	r6, r3
 8006810:	6841      	ldr	r1, [r0, #4]
 8006812:	d93d      	bls.n	8006890 <_dtoa_r+0x318>
 8006814:	4620      	mov	r0, r4
 8006816:	f000 fccd 	bl	80071b4 <_Balloc>
 800681a:	9001      	str	r0, [sp, #4]
 800681c:	2800      	cmp	r0, #0
 800681e:	d13b      	bne.n	8006898 <_dtoa_r+0x320>
 8006820:	4b11      	ldr	r3, [pc, #68]	; (8006868 <_dtoa_r+0x2f0>)
 8006822:	4602      	mov	r2, r0
 8006824:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006828:	e6c0      	b.n	80065ac <_dtoa_r+0x34>
 800682a:	2301      	movs	r3, #1
 800682c:	e7df      	b.n	80067ee <_dtoa_r+0x276>
 800682e:	bf00      	nop
 8006830:	636f4361 	.word	0x636f4361
 8006834:	3fd287a7 	.word	0x3fd287a7
 8006838:	8b60c8b3 	.word	0x8b60c8b3
 800683c:	3fc68a28 	.word	0x3fc68a28
 8006840:	509f79fb 	.word	0x509f79fb
 8006844:	3fd34413 	.word	0x3fd34413
 8006848:	0800a00b 	.word	0x0800a00b
 800684c:	0800a022 	.word	0x0800a022
 8006850:	7ff00000 	.word	0x7ff00000
 8006854:	0800a007 	.word	0x0800a007
 8006858:	08009ffe 	.word	0x08009ffe
 800685c:	0800a202 	.word	0x0800a202
 8006860:	3ff80000 	.word	0x3ff80000
 8006864:	0800a118 	.word	0x0800a118
 8006868:	0800a07d 	.word	0x0800a07d
 800686c:	2501      	movs	r5, #1
 800686e:	2300      	movs	r3, #0
 8006870:	9306      	str	r3, [sp, #24]
 8006872:	9508      	str	r5, [sp, #32]
 8006874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006878:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800687c:	2200      	movs	r2, #0
 800687e:	2312      	movs	r3, #18
 8006880:	e7b0      	b.n	80067e4 <_dtoa_r+0x26c>
 8006882:	2301      	movs	r3, #1
 8006884:	9308      	str	r3, [sp, #32]
 8006886:	e7f5      	b.n	8006874 <_dtoa_r+0x2fc>
 8006888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800688a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800688e:	e7b8      	b.n	8006802 <_dtoa_r+0x28a>
 8006890:	3101      	adds	r1, #1
 8006892:	6041      	str	r1, [r0, #4]
 8006894:	0052      	lsls	r2, r2, #1
 8006896:	e7b8      	b.n	800680a <_dtoa_r+0x292>
 8006898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800689a:	9a01      	ldr	r2, [sp, #4]
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	9b03      	ldr	r3, [sp, #12]
 80068a0:	2b0e      	cmp	r3, #14
 80068a2:	f200 809d 	bhi.w	80069e0 <_dtoa_r+0x468>
 80068a6:	2d00      	cmp	r5, #0
 80068a8:	f000 809a 	beq.w	80069e0 <_dtoa_r+0x468>
 80068ac:	9b00      	ldr	r3, [sp, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	dd32      	ble.n	8006918 <_dtoa_r+0x3a0>
 80068b2:	4ab7      	ldr	r2, [pc, #732]	; (8006b90 <_dtoa_r+0x618>)
 80068b4:	f003 030f 	and.w	r3, r3, #15
 80068b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068c0:	9b00      	ldr	r3, [sp, #0]
 80068c2:	05d8      	lsls	r0, r3, #23
 80068c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80068c8:	d516      	bpl.n	80068f8 <_dtoa_r+0x380>
 80068ca:	4bb2      	ldr	r3, [pc, #712]	; (8006b94 <_dtoa_r+0x61c>)
 80068cc:	ec51 0b19 	vmov	r0, r1, d9
 80068d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068d4:	f7f9 ffd2 	bl	800087c <__aeabi_ddiv>
 80068d8:	f007 070f 	and.w	r7, r7, #15
 80068dc:	4682      	mov	sl, r0
 80068de:	468b      	mov	fp, r1
 80068e0:	2503      	movs	r5, #3
 80068e2:	4eac      	ldr	r6, [pc, #688]	; (8006b94 <_dtoa_r+0x61c>)
 80068e4:	b957      	cbnz	r7, 80068fc <_dtoa_r+0x384>
 80068e6:	4642      	mov	r2, r8
 80068e8:	464b      	mov	r3, r9
 80068ea:	4650      	mov	r0, sl
 80068ec:	4659      	mov	r1, fp
 80068ee:	f7f9 ffc5 	bl	800087c <__aeabi_ddiv>
 80068f2:	4682      	mov	sl, r0
 80068f4:	468b      	mov	fp, r1
 80068f6:	e028      	b.n	800694a <_dtoa_r+0x3d2>
 80068f8:	2502      	movs	r5, #2
 80068fa:	e7f2      	b.n	80068e2 <_dtoa_r+0x36a>
 80068fc:	07f9      	lsls	r1, r7, #31
 80068fe:	d508      	bpl.n	8006912 <_dtoa_r+0x39a>
 8006900:	4640      	mov	r0, r8
 8006902:	4649      	mov	r1, r9
 8006904:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006908:	f7f9 fe8e 	bl	8000628 <__aeabi_dmul>
 800690c:	3501      	adds	r5, #1
 800690e:	4680      	mov	r8, r0
 8006910:	4689      	mov	r9, r1
 8006912:	107f      	asrs	r7, r7, #1
 8006914:	3608      	adds	r6, #8
 8006916:	e7e5      	b.n	80068e4 <_dtoa_r+0x36c>
 8006918:	f000 809b 	beq.w	8006a52 <_dtoa_r+0x4da>
 800691c:	9b00      	ldr	r3, [sp, #0]
 800691e:	4f9d      	ldr	r7, [pc, #628]	; (8006b94 <_dtoa_r+0x61c>)
 8006920:	425e      	negs	r6, r3
 8006922:	4b9b      	ldr	r3, [pc, #620]	; (8006b90 <_dtoa_r+0x618>)
 8006924:	f006 020f 	and.w	r2, r6, #15
 8006928:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	ec51 0b19 	vmov	r0, r1, d9
 8006934:	f7f9 fe78 	bl	8000628 <__aeabi_dmul>
 8006938:	1136      	asrs	r6, r6, #4
 800693a:	4682      	mov	sl, r0
 800693c:	468b      	mov	fp, r1
 800693e:	2300      	movs	r3, #0
 8006940:	2502      	movs	r5, #2
 8006942:	2e00      	cmp	r6, #0
 8006944:	d17a      	bne.n	8006a3c <_dtoa_r+0x4c4>
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1d3      	bne.n	80068f2 <_dtoa_r+0x37a>
 800694a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 8082 	beq.w	8006a56 <_dtoa_r+0x4de>
 8006952:	4b91      	ldr	r3, [pc, #580]	; (8006b98 <_dtoa_r+0x620>)
 8006954:	2200      	movs	r2, #0
 8006956:	4650      	mov	r0, sl
 8006958:	4659      	mov	r1, fp
 800695a:	f7fa f8d7 	bl	8000b0c <__aeabi_dcmplt>
 800695e:	2800      	cmp	r0, #0
 8006960:	d079      	beq.n	8006a56 <_dtoa_r+0x4de>
 8006962:	9b03      	ldr	r3, [sp, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d076      	beq.n	8006a56 <_dtoa_r+0x4de>
 8006968:	9b02      	ldr	r3, [sp, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	dd36      	ble.n	80069dc <_dtoa_r+0x464>
 800696e:	9b00      	ldr	r3, [sp, #0]
 8006970:	4650      	mov	r0, sl
 8006972:	4659      	mov	r1, fp
 8006974:	1e5f      	subs	r7, r3, #1
 8006976:	2200      	movs	r2, #0
 8006978:	4b88      	ldr	r3, [pc, #544]	; (8006b9c <_dtoa_r+0x624>)
 800697a:	f7f9 fe55 	bl	8000628 <__aeabi_dmul>
 800697e:	9e02      	ldr	r6, [sp, #8]
 8006980:	4682      	mov	sl, r0
 8006982:	468b      	mov	fp, r1
 8006984:	3501      	adds	r5, #1
 8006986:	4628      	mov	r0, r5
 8006988:	f7f9 fde4 	bl	8000554 <__aeabi_i2d>
 800698c:	4652      	mov	r2, sl
 800698e:	465b      	mov	r3, fp
 8006990:	f7f9 fe4a 	bl	8000628 <__aeabi_dmul>
 8006994:	4b82      	ldr	r3, [pc, #520]	; (8006ba0 <_dtoa_r+0x628>)
 8006996:	2200      	movs	r2, #0
 8006998:	f7f9 fc90 	bl	80002bc <__adddf3>
 800699c:	46d0      	mov	r8, sl
 800699e:	46d9      	mov	r9, fp
 80069a0:	4682      	mov	sl, r0
 80069a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80069a6:	2e00      	cmp	r6, #0
 80069a8:	d158      	bne.n	8006a5c <_dtoa_r+0x4e4>
 80069aa:	4b7e      	ldr	r3, [pc, #504]	; (8006ba4 <_dtoa_r+0x62c>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	4640      	mov	r0, r8
 80069b0:	4649      	mov	r1, r9
 80069b2:	f7f9 fc81 	bl	80002b8 <__aeabi_dsub>
 80069b6:	4652      	mov	r2, sl
 80069b8:	465b      	mov	r3, fp
 80069ba:	4680      	mov	r8, r0
 80069bc:	4689      	mov	r9, r1
 80069be:	f7fa f8c3 	bl	8000b48 <__aeabi_dcmpgt>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	f040 8295 	bne.w	8006ef2 <_dtoa_r+0x97a>
 80069c8:	4652      	mov	r2, sl
 80069ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80069ce:	4640      	mov	r0, r8
 80069d0:	4649      	mov	r1, r9
 80069d2:	f7fa f89b 	bl	8000b0c <__aeabi_dcmplt>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f040 8289 	bne.w	8006eee <_dtoa_r+0x976>
 80069dc:	ec5b ab19 	vmov	sl, fp, d9
 80069e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f2c0 8148 	blt.w	8006c78 <_dtoa_r+0x700>
 80069e8:	9a00      	ldr	r2, [sp, #0]
 80069ea:	2a0e      	cmp	r2, #14
 80069ec:	f300 8144 	bgt.w	8006c78 <_dtoa_r+0x700>
 80069f0:	4b67      	ldr	r3, [pc, #412]	; (8006b90 <_dtoa_r+0x618>)
 80069f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f280 80d5 	bge.w	8006bac <_dtoa_r+0x634>
 8006a02:	9b03      	ldr	r3, [sp, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f300 80d1 	bgt.w	8006bac <_dtoa_r+0x634>
 8006a0a:	f040 826f 	bne.w	8006eec <_dtoa_r+0x974>
 8006a0e:	4b65      	ldr	r3, [pc, #404]	; (8006ba4 <_dtoa_r+0x62c>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	4640      	mov	r0, r8
 8006a14:	4649      	mov	r1, r9
 8006a16:	f7f9 fe07 	bl	8000628 <__aeabi_dmul>
 8006a1a:	4652      	mov	r2, sl
 8006a1c:	465b      	mov	r3, fp
 8006a1e:	f7fa f889 	bl	8000b34 <__aeabi_dcmpge>
 8006a22:	9e03      	ldr	r6, [sp, #12]
 8006a24:	4637      	mov	r7, r6
 8006a26:	2800      	cmp	r0, #0
 8006a28:	f040 8245 	bne.w	8006eb6 <_dtoa_r+0x93e>
 8006a2c:	9d01      	ldr	r5, [sp, #4]
 8006a2e:	2331      	movs	r3, #49	; 0x31
 8006a30:	f805 3b01 	strb.w	r3, [r5], #1
 8006a34:	9b00      	ldr	r3, [sp, #0]
 8006a36:	3301      	adds	r3, #1
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	e240      	b.n	8006ebe <_dtoa_r+0x946>
 8006a3c:	07f2      	lsls	r2, r6, #31
 8006a3e:	d505      	bpl.n	8006a4c <_dtoa_r+0x4d4>
 8006a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a44:	f7f9 fdf0 	bl	8000628 <__aeabi_dmul>
 8006a48:	3501      	adds	r5, #1
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	1076      	asrs	r6, r6, #1
 8006a4e:	3708      	adds	r7, #8
 8006a50:	e777      	b.n	8006942 <_dtoa_r+0x3ca>
 8006a52:	2502      	movs	r5, #2
 8006a54:	e779      	b.n	800694a <_dtoa_r+0x3d2>
 8006a56:	9f00      	ldr	r7, [sp, #0]
 8006a58:	9e03      	ldr	r6, [sp, #12]
 8006a5a:	e794      	b.n	8006986 <_dtoa_r+0x40e>
 8006a5c:	9901      	ldr	r1, [sp, #4]
 8006a5e:	4b4c      	ldr	r3, [pc, #304]	; (8006b90 <_dtoa_r+0x618>)
 8006a60:	4431      	add	r1, r6
 8006a62:	910d      	str	r1, [sp, #52]	; 0x34
 8006a64:	9908      	ldr	r1, [sp, #32]
 8006a66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a6e:	2900      	cmp	r1, #0
 8006a70:	d043      	beq.n	8006afa <_dtoa_r+0x582>
 8006a72:	494d      	ldr	r1, [pc, #308]	; (8006ba8 <_dtoa_r+0x630>)
 8006a74:	2000      	movs	r0, #0
 8006a76:	f7f9 ff01 	bl	800087c <__aeabi_ddiv>
 8006a7a:	4652      	mov	r2, sl
 8006a7c:	465b      	mov	r3, fp
 8006a7e:	f7f9 fc1b 	bl	80002b8 <__aeabi_dsub>
 8006a82:	9d01      	ldr	r5, [sp, #4]
 8006a84:	4682      	mov	sl, r0
 8006a86:	468b      	mov	fp, r1
 8006a88:	4649      	mov	r1, r9
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	f7fa f87c 	bl	8000b88 <__aeabi_d2iz>
 8006a90:	4606      	mov	r6, r0
 8006a92:	f7f9 fd5f 	bl	8000554 <__aeabi_i2d>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	f7f9 fc0b 	bl	80002b8 <__aeabi_dsub>
 8006aa2:	3630      	adds	r6, #48	; 0x30
 8006aa4:	f805 6b01 	strb.w	r6, [r5], #1
 8006aa8:	4652      	mov	r2, sl
 8006aaa:	465b      	mov	r3, fp
 8006aac:	4680      	mov	r8, r0
 8006aae:	4689      	mov	r9, r1
 8006ab0:	f7fa f82c 	bl	8000b0c <__aeabi_dcmplt>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d163      	bne.n	8006b80 <_dtoa_r+0x608>
 8006ab8:	4642      	mov	r2, r8
 8006aba:	464b      	mov	r3, r9
 8006abc:	4936      	ldr	r1, [pc, #216]	; (8006b98 <_dtoa_r+0x620>)
 8006abe:	2000      	movs	r0, #0
 8006ac0:	f7f9 fbfa 	bl	80002b8 <__aeabi_dsub>
 8006ac4:	4652      	mov	r2, sl
 8006ac6:	465b      	mov	r3, fp
 8006ac8:	f7fa f820 	bl	8000b0c <__aeabi_dcmplt>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	f040 80b5 	bne.w	8006c3c <_dtoa_r+0x6c4>
 8006ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ad4:	429d      	cmp	r5, r3
 8006ad6:	d081      	beq.n	80069dc <_dtoa_r+0x464>
 8006ad8:	4b30      	ldr	r3, [pc, #192]	; (8006b9c <_dtoa_r+0x624>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	4650      	mov	r0, sl
 8006ade:	4659      	mov	r1, fp
 8006ae0:	f7f9 fda2 	bl	8000628 <__aeabi_dmul>
 8006ae4:	4b2d      	ldr	r3, [pc, #180]	; (8006b9c <_dtoa_r+0x624>)
 8006ae6:	4682      	mov	sl, r0
 8006ae8:	468b      	mov	fp, r1
 8006aea:	4640      	mov	r0, r8
 8006aec:	4649      	mov	r1, r9
 8006aee:	2200      	movs	r2, #0
 8006af0:	f7f9 fd9a 	bl	8000628 <__aeabi_dmul>
 8006af4:	4680      	mov	r8, r0
 8006af6:	4689      	mov	r9, r1
 8006af8:	e7c6      	b.n	8006a88 <_dtoa_r+0x510>
 8006afa:	4650      	mov	r0, sl
 8006afc:	4659      	mov	r1, fp
 8006afe:	f7f9 fd93 	bl	8000628 <__aeabi_dmul>
 8006b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b04:	9d01      	ldr	r5, [sp, #4]
 8006b06:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b08:	4682      	mov	sl, r0
 8006b0a:	468b      	mov	fp, r1
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	4640      	mov	r0, r8
 8006b10:	f7fa f83a 	bl	8000b88 <__aeabi_d2iz>
 8006b14:	4606      	mov	r6, r0
 8006b16:	f7f9 fd1d 	bl	8000554 <__aeabi_i2d>
 8006b1a:	3630      	adds	r6, #48	; 0x30
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4640      	mov	r0, r8
 8006b22:	4649      	mov	r1, r9
 8006b24:	f7f9 fbc8 	bl	80002b8 <__aeabi_dsub>
 8006b28:	f805 6b01 	strb.w	r6, [r5], #1
 8006b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b2e:	429d      	cmp	r5, r3
 8006b30:	4680      	mov	r8, r0
 8006b32:	4689      	mov	r9, r1
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	d124      	bne.n	8006b84 <_dtoa_r+0x60c>
 8006b3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ba8 <_dtoa_r+0x630>)
 8006b3c:	4650      	mov	r0, sl
 8006b3e:	4659      	mov	r1, fp
 8006b40:	f7f9 fbbc 	bl	80002bc <__adddf3>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4640      	mov	r0, r8
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	f7f9 fffc 	bl	8000b48 <__aeabi_dcmpgt>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d173      	bne.n	8006c3c <_dtoa_r+0x6c4>
 8006b54:	4652      	mov	r2, sl
 8006b56:	465b      	mov	r3, fp
 8006b58:	4913      	ldr	r1, [pc, #76]	; (8006ba8 <_dtoa_r+0x630>)
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	f7f9 fbac 	bl	80002b8 <__aeabi_dsub>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4640      	mov	r0, r8
 8006b66:	4649      	mov	r1, r9
 8006b68:	f7f9 ffd0 	bl	8000b0c <__aeabi_dcmplt>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	f43f af35 	beq.w	80069dc <_dtoa_r+0x464>
 8006b72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b74:	1e6b      	subs	r3, r5, #1
 8006b76:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b7c:	2b30      	cmp	r3, #48	; 0x30
 8006b7e:	d0f8      	beq.n	8006b72 <_dtoa_r+0x5fa>
 8006b80:	9700      	str	r7, [sp, #0]
 8006b82:	e049      	b.n	8006c18 <_dtoa_r+0x6a0>
 8006b84:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <_dtoa_r+0x624>)
 8006b86:	f7f9 fd4f 	bl	8000628 <__aeabi_dmul>
 8006b8a:	4680      	mov	r8, r0
 8006b8c:	4689      	mov	r9, r1
 8006b8e:	e7bd      	b.n	8006b0c <_dtoa_r+0x594>
 8006b90:	0800a118 	.word	0x0800a118
 8006b94:	0800a0f0 	.word	0x0800a0f0
 8006b98:	3ff00000 	.word	0x3ff00000
 8006b9c:	40240000 	.word	0x40240000
 8006ba0:	401c0000 	.word	0x401c0000
 8006ba4:	40140000 	.word	0x40140000
 8006ba8:	3fe00000 	.word	0x3fe00000
 8006bac:	9d01      	ldr	r5, [sp, #4]
 8006bae:	4656      	mov	r6, sl
 8006bb0:	465f      	mov	r7, fp
 8006bb2:	4642      	mov	r2, r8
 8006bb4:	464b      	mov	r3, r9
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	4639      	mov	r1, r7
 8006bba:	f7f9 fe5f 	bl	800087c <__aeabi_ddiv>
 8006bbe:	f7f9 ffe3 	bl	8000b88 <__aeabi_d2iz>
 8006bc2:	4682      	mov	sl, r0
 8006bc4:	f7f9 fcc6 	bl	8000554 <__aeabi_i2d>
 8006bc8:	4642      	mov	r2, r8
 8006bca:	464b      	mov	r3, r9
 8006bcc:	f7f9 fd2c 	bl	8000628 <__aeabi_dmul>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006bdc:	f7f9 fb6c 	bl	80002b8 <__aeabi_dsub>
 8006be0:	f805 6b01 	strb.w	r6, [r5], #1
 8006be4:	9e01      	ldr	r6, [sp, #4]
 8006be6:	9f03      	ldr	r7, [sp, #12]
 8006be8:	1bae      	subs	r6, r5, r6
 8006bea:	42b7      	cmp	r7, r6
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	d135      	bne.n	8006c5e <_dtoa_r+0x6e6>
 8006bf2:	f7f9 fb63 	bl	80002bc <__adddf3>
 8006bf6:	4642      	mov	r2, r8
 8006bf8:	464b      	mov	r3, r9
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	460f      	mov	r7, r1
 8006bfe:	f7f9 ffa3 	bl	8000b48 <__aeabi_dcmpgt>
 8006c02:	b9d0      	cbnz	r0, 8006c3a <_dtoa_r+0x6c2>
 8006c04:	4642      	mov	r2, r8
 8006c06:	464b      	mov	r3, r9
 8006c08:	4630      	mov	r0, r6
 8006c0a:	4639      	mov	r1, r7
 8006c0c:	f7f9 ff74 	bl	8000af8 <__aeabi_dcmpeq>
 8006c10:	b110      	cbz	r0, 8006c18 <_dtoa_r+0x6a0>
 8006c12:	f01a 0f01 	tst.w	sl, #1
 8006c16:	d110      	bne.n	8006c3a <_dtoa_r+0x6c2>
 8006c18:	4620      	mov	r0, r4
 8006c1a:	ee18 1a10 	vmov	r1, s16
 8006c1e:	f000 fb09 	bl	8007234 <_Bfree>
 8006c22:	2300      	movs	r3, #0
 8006c24:	9800      	ldr	r0, [sp, #0]
 8006c26:	702b      	strb	r3, [r5, #0]
 8006c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	6018      	str	r0, [r3, #0]
 8006c2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f43f acf1 	beq.w	8006618 <_dtoa_r+0xa0>
 8006c36:	601d      	str	r5, [r3, #0]
 8006c38:	e4ee      	b.n	8006618 <_dtoa_r+0xa0>
 8006c3a:	9f00      	ldr	r7, [sp, #0]
 8006c3c:	462b      	mov	r3, r5
 8006c3e:	461d      	mov	r5, r3
 8006c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c44:	2a39      	cmp	r2, #57	; 0x39
 8006c46:	d106      	bne.n	8006c56 <_dtoa_r+0x6de>
 8006c48:	9a01      	ldr	r2, [sp, #4]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d1f7      	bne.n	8006c3e <_dtoa_r+0x6c6>
 8006c4e:	9901      	ldr	r1, [sp, #4]
 8006c50:	2230      	movs	r2, #48	; 0x30
 8006c52:	3701      	adds	r7, #1
 8006c54:	700a      	strb	r2, [r1, #0]
 8006c56:	781a      	ldrb	r2, [r3, #0]
 8006c58:	3201      	adds	r2, #1
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	e790      	b.n	8006b80 <_dtoa_r+0x608>
 8006c5e:	4ba6      	ldr	r3, [pc, #664]	; (8006ef8 <_dtoa_r+0x980>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	f7f9 fce1 	bl	8000628 <__aeabi_dmul>
 8006c66:	2200      	movs	r2, #0
 8006c68:	2300      	movs	r3, #0
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	460f      	mov	r7, r1
 8006c6e:	f7f9 ff43 	bl	8000af8 <__aeabi_dcmpeq>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d09d      	beq.n	8006bb2 <_dtoa_r+0x63a>
 8006c76:	e7cf      	b.n	8006c18 <_dtoa_r+0x6a0>
 8006c78:	9a08      	ldr	r2, [sp, #32]
 8006c7a:	2a00      	cmp	r2, #0
 8006c7c:	f000 80d7 	beq.w	8006e2e <_dtoa_r+0x8b6>
 8006c80:	9a06      	ldr	r2, [sp, #24]
 8006c82:	2a01      	cmp	r2, #1
 8006c84:	f300 80ba 	bgt.w	8006dfc <_dtoa_r+0x884>
 8006c88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c8a:	2a00      	cmp	r2, #0
 8006c8c:	f000 80b2 	beq.w	8006df4 <_dtoa_r+0x87c>
 8006c90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c94:	9e07      	ldr	r6, [sp, #28]
 8006c96:	9d04      	ldr	r5, [sp, #16]
 8006c98:	9a04      	ldr	r2, [sp, #16]
 8006c9a:	441a      	add	r2, r3
 8006c9c:	9204      	str	r2, [sp, #16]
 8006c9e:	9a05      	ldr	r2, [sp, #20]
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	441a      	add	r2, r3
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	9205      	str	r2, [sp, #20]
 8006ca8:	f000 fb7c 	bl	80073a4 <__i2b>
 8006cac:	4607      	mov	r7, r0
 8006cae:	2d00      	cmp	r5, #0
 8006cb0:	dd0c      	ble.n	8006ccc <_dtoa_r+0x754>
 8006cb2:	9b05      	ldr	r3, [sp, #20]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	dd09      	ble.n	8006ccc <_dtoa_r+0x754>
 8006cb8:	42ab      	cmp	r3, r5
 8006cba:	9a04      	ldr	r2, [sp, #16]
 8006cbc:	bfa8      	it	ge
 8006cbe:	462b      	movge	r3, r5
 8006cc0:	1ad2      	subs	r2, r2, r3
 8006cc2:	9204      	str	r2, [sp, #16]
 8006cc4:	9a05      	ldr	r2, [sp, #20]
 8006cc6:	1aed      	subs	r5, r5, r3
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	9305      	str	r3, [sp, #20]
 8006ccc:	9b07      	ldr	r3, [sp, #28]
 8006cce:	b31b      	cbz	r3, 8006d18 <_dtoa_r+0x7a0>
 8006cd0:	9b08      	ldr	r3, [sp, #32]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 80af 	beq.w	8006e36 <_dtoa_r+0x8be>
 8006cd8:	2e00      	cmp	r6, #0
 8006cda:	dd13      	ble.n	8006d04 <_dtoa_r+0x78c>
 8006cdc:	4639      	mov	r1, r7
 8006cde:	4632      	mov	r2, r6
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f000 fc1f 	bl	8007524 <__pow5mult>
 8006ce6:	ee18 2a10 	vmov	r2, s16
 8006cea:	4601      	mov	r1, r0
 8006cec:	4607      	mov	r7, r0
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f000 fb6e 	bl	80073d0 <__multiply>
 8006cf4:	ee18 1a10 	vmov	r1, s16
 8006cf8:	4680      	mov	r8, r0
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f000 fa9a 	bl	8007234 <_Bfree>
 8006d00:	ee08 8a10 	vmov	s16, r8
 8006d04:	9b07      	ldr	r3, [sp, #28]
 8006d06:	1b9a      	subs	r2, r3, r6
 8006d08:	d006      	beq.n	8006d18 <_dtoa_r+0x7a0>
 8006d0a:	ee18 1a10 	vmov	r1, s16
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f000 fc08 	bl	8007524 <__pow5mult>
 8006d14:	ee08 0a10 	vmov	s16, r0
 8006d18:	2101      	movs	r1, #1
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 fb42 	bl	80073a4 <__i2b>
 8006d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	4606      	mov	r6, r0
 8006d26:	f340 8088 	ble.w	8006e3a <_dtoa_r+0x8c2>
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	4601      	mov	r1, r0
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f000 fbf8 	bl	8007524 <__pow5mult>
 8006d34:	9b06      	ldr	r3, [sp, #24]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	4606      	mov	r6, r0
 8006d3a:	f340 8081 	ble.w	8006e40 <_dtoa_r+0x8c8>
 8006d3e:	f04f 0800 	mov.w	r8, #0
 8006d42:	6933      	ldr	r3, [r6, #16]
 8006d44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d48:	6918      	ldr	r0, [r3, #16]
 8006d4a:	f000 fadb 	bl	8007304 <__hi0bits>
 8006d4e:	f1c0 0020 	rsb	r0, r0, #32
 8006d52:	9b05      	ldr	r3, [sp, #20]
 8006d54:	4418      	add	r0, r3
 8006d56:	f010 001f 	ands.w	r0, r0, #31
 8006d5a:	f000 8092 	beq.w	8006e82 <_dtoa_r+0x90a>
 8006d5e:	f1c0 0320 	rsb	r3, r0, #32
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	f340 808a 	ble.w	8006e7c <_dtoa_r+0x904>
 8006d68:	f1c0 001c 	rsb	r0, r0, #28
 8006d6c:	9b04      	ldr	r3, [sp, #16]
 8006d6e:	4403      	add	r3, r0
 8006d70:	9304      	str	r3, [sp, #16]
 8006d72:	9b05      	ldr	r3, [sp, #20]
 8006d74:	4403      	add	r3, r0
 8006d76:	4405      	add	r5, r0
 8006d78:	9305      	str	r3, [sp, #20]
 8006d7a:	9b04      	ldr	r3, [sp, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	dd07      	ble.n	8006d90 <_dtoa_r+0x818>
 8006d80:	ee18 1a10 	vmov	r1, s16
 8006d84:	461a      	mov	r2, r3
 8006d86:	4620      	mov	r0, r4
 8006d88:	f000 fc26 	bl	80075d8 <__lshift>
 8006d8c:	ee08 0a10 	vmov	s16, r0
 8006d90:	9b05      	ldr	r3, [sp, #20]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	dd05      	ble.n	8006da2 <_dtoa_r+0x82a>
 8006d96:	4631      	mov	r1, r6
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 fc1c 	bl	80075d8 <__lshift>
 8006da0:	4606      	mov	r6, r0
 8006da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d06e      	beq.n	8006e86 <_dtoa_r+0x90e>
 8006da8:	ee18 0a10 	vmov	r0, s16
 8006dac:	4631      	mov	r1, r6
 8006dae:	f000 fc83 	bl	80076b8 <__mcmp>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	da67      	bge.n	8006e86 <_dtoa_r+0x90e>
 8006db6:	9b00      	ldr	r3, [sp, #0]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	ee18 1a10 	vmov	r1, s16
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	220a      	movs	r2, #10
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 fa57 	bl	8007278 <__multadd>
 8006dca:	9b08      	ldr	r3, [sp, #32]
 8006dcc:	ee08 0a10 	vmov	s16, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 81b1 	beq.w	8007138 <_dtoa_r+0xbc0>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	4639      	mov	r1, r7
 8006dda:	220a      	movs	r2, #10
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 fa4b 	bl	8007278 <__multadd>
 8006de2:	9b02      	ldr	r3, [sp, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	4607      	mov	r7, r0
 8006de8:	f300 808e 	bgt.w	8006f08 <_dtoa_r+0x990>
 8006dec:	9b06      	ldr	r3, [sp, #24]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	dc51      	bgt.n	8006e96 <_dtoa_r+0x91e>
 8006df2:	e089      	b.n	8006f08 <_dtoa_r+0x990>
 8006df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006df6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006dfa:	e74b      	b.n	8006c94 <_dtoa_r+0x71c>
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	1e5e      	subs	r6, r3, #1
 8006e00:	9b07      	ldr	r3, [sp, #28]
 8006e02:	42b3      	cmp	r3, r6
 8006e04:	bfbf      	itttt	lt
 8006e06:	9b07      	ldrlt	r3, [sp, #28]
 8006e08:	9607      	strlt	r6, [sp, #28]
 8006e0a:	1af2      	sublt	r2, r6, r3
 8006e0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e0e:	bfb6      	itet	lt
 8006e10:	189b      	addlt	r3, r3, r2
 8006e12:	1b9e      	subge	r6, r3, r6
 8006e14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006e16:	9b03      	ldr	r3, [sp, #12]
 8006e18:	bfb8      	it	lt
 8006e1a:	2600      	movlt	r6, #0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	bfb7      	itett	lt
 8006e20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006e24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006e28:	1a9d      	sublt	r5, r3, r2
 8006e2a:	2300      	movlt	r3, #0
 8006e2c:	e734      	b.n	8006c98 <_dtoa_r+0x720>
 8006e2e:	9e07      	ldr	r6, [sp, #28]
 8006e30:	9d04      	ldr	r5, [sp, #16]
 8006e32:	9f08      	ldr	r7, [sp, #32]
 8006e34:	e73b      	b.n	8006cae <_dtoa_r+0x736>
 8006e36:	9a07      	ldr	r2, [sp, #28]
 8006e38:	e767      	b.n	8006d0a <_dtoa_r+0x792>
 8006e3a:	9b06      	ldr	r3, [sp, #24]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	dc18      	bgt.n	8006e72 <_dtoa_r+0x8fa>
 8006e40:	f1ba 0f00 	cmp.w	sl, #0
 8006e44:	d115      	bne.n	8006e72 <_dtoa_r+0x8fa>
 8006e46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e4a:	b993      	cbnz	r3, 8006e72 <_dtoa_r+0x8fa>
 8006e4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e50:	0d1b      	lsrs	r3, r3, #20
 8006e52:	051b      	lsls	r3, r3, #20
 8006e54:	b183      	cbz	r3, 8006e78 <_dtoa_r+0x900>
 8006e56:	9b04      	ldr	r3, [sp, #16]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	9304      	str	r3, [sp, #16]
 8006e5c:	9b05      	ldr	r3, [sp, #20]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	9305      	str	r3, [sp, #20]
 8006e62:	f04f 0801 	mov.w	r8, #1
 8006e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f47f af6a 	bne.w	8006d42 <_dtoa_r+0x7ca>
 8006e6e:	2001      	movs	r0, #1
 8006e70:	e76f      	b.n	8006d52 <_dtoa_r+0x7da>
 8006e72:	f04f 0800 	mov.w	r8, #0
 8006e76:	e7f6      	b.n	8006e66 <_dtoa_r+0x8ee>
 8006e78:	4698      	mov	r8, r3
 8006e7a:	e7f4      	b.n	8006e66 <_dtoa_r+0x8ee>
 8006e7c:	f43f af7d 	beq.w	8006d7a <_dtoa_r+0x802>
 8006e80:	4618      	mov	r0, r3
 8006e82:	301c      	adds	r0, #28
 8006e84:	e772      	b.n	8006d6c <_dtoa_r+0x7f4>
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	dc37      	bgt.n	8006efc <_dtoa_r+0x984>
 8006e8c:	9b06      	ldr	r3, [sp, #24]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	dd34      	ble.n	8006efc <_dtoa_r+0x984>
 8006e92:	9b03      	ldr	r3, [sp, #12]
 8006e94:	9302      	str	r3, [sp, #8]
 8006e96:	9b02      	ldr	r3, [sp, #8]
 8006e98:	b96b      	cbnz	r3, 8006eb6 <_dtoa_r+0x93e>
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	2205      	movs	r2, #5
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f000 f9ea 	bl	8007278 <__multadd>
 8006ea4:	4601      	mov	r1, r0
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	ee18 0a10 	vmov	r0, s16
 8006eac:	f000 fc04 	bl	80076b8 <__mcmp>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	f73f adbb 	bgt.w	8006a2c <_dtoa_r+0x4b4>
 8006eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb8:	9d01      	ldr	r5, [sp, #4]
 8006eba:	43db      	mvns	r3, r3
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	f04f 0800 	mov.w	r8, #0
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f000 f9b5 	bl	8007234 <_Bfree>
 8006eca:	2f00      	cmp	r7, #0
 8006ecc:	f43f aea4 	beq.w	8006c18 <_dtoa_r+0x6a0>
 8006ed0:	f1b8 0f00 	cmp.w	r8, #0
 8006ed4:	d005      	beq.n	8006ee2 <_dtoa_r+0x96a>
 8006ed6:	45b8      	cmp	r8, r7
 8006ed8:	d003      	beq.n	8006ee2 <_dtoa_r+0x96a>
 8006eda:	4641      	mov	r1, r8
 8006edc:	4620      	mov	r0, r4
 8006ede:	f000 f9a9 	bl	8007234 <_Bfree>
 8006ee2:	4639      	mov	r1, r7
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f000 f9a5 	bl	8007234 <_Bfree>
 8006eea:	e695      	b.n	8006c18 <_dtoa_r+0x6a0>
 8006eec:	2600      	movs	r6, #0
 8006eee:	4637      	mov	r7, r6
 8006ef0:	e7e1      	b.n	8006eb6 <_dtoa_r+0x93e>
 8006ef2:	9700      	str	r7, [sp, #0]
 8006ef4:	4637      	mov	r7, r6
 8006ef6:	e599      	b.n	8006a2c <_dtoa_r+0x4b4>
 8006ef8:	40240000 	.word	0x40240000
 8006efc:	9b08      	ldr	r3, [sp, #32]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 80ca 	beq.w	8007098 <_dtoa_r+0xb20>
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	9302      	str	r3, [sp, #8]
 8006f08:	2d00      	cmp	r5, #0
 8006f0a:	dd05      	ble.n	8006f18 <_dtoa_r+0x9a0>
 8006f0c:	4639      	mov	r1, r7
 8006f0e:	462a      	mov	r2, r5
 8006f10:	4620      	mov	r0, r4
 8006f12:	f000 fb61 	bl	80075d8 <__lshift>
 8006f16:	4607      	mov	r7, r0
 8006f18:	f1b8 0f00 	cmp.w	r8, #0
 8006f1c:	d05b      	beq.n	8006fd6 <_dtoa_r+0xa5e>
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 f947 	bl	80071b4 <_Balloc>
 8006f26:	4605      	mov	r5, r0
 8006f28:	b928      	cbnz	r0, 8006f36 <_dtoa_r+0x9be>
 8006f2a:	4b87      	ldr	r3, [pc, #540]	; (8007148 <_dtoa_r+0xbd0>)
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f32:	f7ff bb3b 	b.w	80065ac <_dtoa_r+0x34>
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	3202      	adds	r2, #2
 8006f3a:	0092      	lsls	r2, r2, #2
 8006f3c:	f107 010c 	add.w	r1, r7, #12
 8006f40:	300c      	adds	r0, #12
 8006f42:	f000 f91d 	bl	8007180 <memcpy>
 8006f46:	2201      	movs	r2, #1
 8006f48:	4629      	mov	r1, r5
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f000 fb44 	bl	80075d8 <__lshift>
 8006f50:	9b01      	ldr	r3, [sp, #4]
 8006f52:	f103 0901 	add.w	r9, r3, #1
 8006f56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	9305      	str	r3, [sp, #20]
 8006f5e:	f00a 0301 	and.w	r3, sl, #1
 8006f62:	46b8      	mov	r8, r7
 8006f64:	9304      	str	r3, [sp, #16]
 8006f66:	4607      	mov	r7, r0
 8006f68:	4631      	mov	r1, r6
 8006f6a:	ee18 0a10 	vmov	r0, s16
 8006f6e:	f7ff fa75 	bl	800645c <quorem>
 8006f72:	4641      	mov	r1, r8
 8006f74:	9002      	str	r0, [sp, #8]
 8006f76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f7a:	ee18 0a10 	vmov	r0, s16
 8006f7e:	f000 fb9b 	bl	80076b8 <__mcmp>
 8006f82:	463a      	mov	r2, r7
 8006f84:	9003      	str	r0, [sp, #12]
 8006f86:	4631      	mov	r1, r6
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 fbb1 	bl	80076f0 <__mdiff>
 8006f8e:	68c2      	ldr	r2, [r0, #12]
 8006f90:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006f94:	4605      	mov	r5, r0
 8006f96:	bb02      	cbnz	r2, 8006fda <_dtoa_r+0xa62>
 8006f98:	4601      	mov	r1, r0
 8006f9a:	ee18 0a10 	vmov	r0, s16
 8006f9e:	f000 fb8b 	bl	80076b8 <__mcmp>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	9207      	str	r2, [sp, #28]
 8006faa:	f000 f943 	bl	8007234 <_Bfree>
 8006fae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006fb2:	ea43 0102 	orr.w	r1, r3, r2
 8006fb6:	9b04      	ldr	r3, [sp, #16]
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	464d      	mov	r5, r9
 8006fbc:	d10f      	bne.n	8006fde <_dtoa_r+0xa66>
 8006fbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006fc2:	d02a      	beq.n	800701a <_dtoa_r+0xaa2>
 8006fc4:	9b03      	ldr	r3, [sp, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	dd02      	ble.n	8006fd0 <_dtoa_r+0xa58>
 8006fca:	9b02      	ldr	r3, [sp, #8]
 8006fcc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006fd0:	f88b a000 	strb.w	sl, [fp]
 8006fd4:	e775      	b.n	8006ec2 <_dtoa_r+0x94a>
 8006fd6:	4638      	mov	r0, r7
 8006fd8:	e7ba      	b.n	8006f50 <_dtoa_r+0x9d8>
 8006fda:	2201      	movs	r2, #1
 8006fdc:	e7e2      	b.n	8006fa4 <_dtoa_r+0xa2c>
 8006fde:	9b03      	ldr	r3, [sp, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	db04      	blt.n	8006fee <_dtoa_r+0xa76>
 8006fe4:	9906      	ldr	r1, [sp, #24]
 8006fe6:	430b      	orrs	r3, r1
 8006fe8:	9904      	ldr	r1, [sp, #16]
 8006fea:	430b      	orrs	r3, r1
 8006fec:	d122      	bne.n	8007034 <_dtoa_r+0xabc>
 8006fee:	2a00      	cmp	r2, #0
 8006ff0:	ddee      	ble.n	8006fd0 <_dtoa_r+0xa58>
 8006ff2:	ee18 1a10 	vmov	r1, s16
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f000 faed 	bl	80075d8 <__lshift>
 8006ffe:	4631      	mov	r1, r6
 8007000:	ee08 0a10 	vmov	s16, r0
 8007004:	f000 fb58 	bl	80076b8 <__mcmp>
 8007008:	2800      	cmp	r0, #0
 800700a:	dc03      	bgt.n	8007014 <_dtoa_r+0xa9c>
 800700c:	d1e0      	bne.n	8006fd0 <_dtoa_r+0xa58>
 800700e:	f01a 0f01 	tst.w	sl, #1
 8007012:	d0dd      	beq.n	8006fd0 <_dtoa_r+0xa58>
 8007014:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007018:	d1d7      	bne.n	8006fca <_dtoa_r+0xa52>
 800701a:	2339      	movs	r3, #57	; 0x39
 800701c:	f88b 3000 	strb.w	r3, [fp]
 8007020:	462b      	mov	r3, r5
 8007022:	461d      	mov	r5, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800702a:	2a39      	cmp	r2, #57	; 0x39
 800702c:	d071      	beq.n	8007112 <_dtoa_r+0xb9a>
 800702e:	3201      	adds	r2, #1
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	e746      	b.n	8006ec2 <_dtoa_r+0x94a>
 8007034:	2a00      	cmp	r2, #0
 8007036:	dd07      	ble.n	8007048 <_dtoa_r+0xad0>
 8007038:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800703c:	d0ed      	beq.n	800701a <_dtoa_r+0xaa2>
 800703e:	f10a 0301 	add.w	r3, sl, #1
 8007042:	f88b 3000 	strb.w	r3, [fp]
 8007046:	e73c      	b.n	8006ec2 <_dtoa_r+0x94a>
 8007048:	9b05      	ldr	r3, [sp, #20]
 800704a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800704e:	4599      	cmp	r9, r3
 8007050:	d047      	beq.n	80070e2 <_dtoa_r+0xb6a>
 8007052:	ee18 1a10 	vmov	r1, s16
 8007056:	2300      	movs	r3, #0
 8007058:	220a      	movs	r2, #10
 800705a:	4620      	mov	r0, r4
 800705c:	f000 f90c 	bl	8007278 <__multadd>
 8007060:	45b8      	cmp	r8, r7
 8007062:	ee08 0a10 	vmov	s16, r0
 8007066:	f04f 0300 	mov.w	r3, #0
 800706a:	f04f 020a 	mov.w	r2, #10
 800706e:	4641      	mov	r1, r8
 8007070:	4620      	mov	r0, r4
 8007072:	d106      	bne.n	8007082 <_dtoa_r+0xb0a>
 8007074:	f000 f900 	bl	8007278 <__multadd>
 8007078:	4680      	mov	r8, r0
 800707a:	4607      	mov	r7, r0
 800707c:	f109 0901 	add.w	r9, r9, #1
 8007080:	e772      	b.n	8006f68 <_dtoa_r+0x9f0>
 8007082:	f000 f8f9 	bl	8007278 <__multadd>
 8007086:	4639      	mov	r1, r7
 8007088:	4680      	mov	r8, r0
 800708a:	2300      	movs	r3, #0
 800708c:	220a      	movs	r2, #10
 800708e:	4620      	mov	r0, r4
 8007090:	f000 f8f2 	bl	8007278 <__multadd>
 8007094:	4607      	mov	r7, r0
 8007096:	e7f1      	b.n	800707c <_dtoa_r+0xb04>
 8007098:	9b03      	ldr	r3, [sp, #12]
 800709a:	9302      	str	r3, [sp, #8]
 800709c:	9d01      	ldr	r5, [sp, #4]
 800709e:	ee18 0a10 	vmov	r0, s16
 80070a2:	4631      	mov	r1, r6
 80070a4:	f7ff f9da 	bl	800645c <quorem>
 80070a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80070ac:	9b01      	ldr	r3, [sp, #4]
 80070ae:	f805 ab01 	strb.w	sl, [r5], #1
 80070b2:	1aea      	subs	r2, r5, r3
 80070b4:	9b02      	ldr	r3, [sp, #8]
 80070b6:	4293      	cmp	r3, r2
 80070b8:	dd09      	ble.n	80070ce <_dtoa_r+0xb56>
 80070ba:	ee18 1a10 	vmov	r1, s16
 80070be:	2300      	movs	r3, #0
 80070c0:	220a      	movs	r2, #10
 80070c2:	4620      	mov	r0, r4
 80070c4:	f000 f8d8 	bl	8007278 <__multadd>
 80070c8:	ee08 0a10 	vmov	s16, r0
 80070cc:	e7e7      	b.n	800709e <_dtoa_r+0xb26>
 80070ce:	9b02      	ldr	r3, [sp, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bfc8      	it	gt
 80070d4:	461d      	movgt	r5, r3
 80070d6:	9b01      	ldr	r3, [sp, #4]
 80070d8:	bfd8      	it	le
 80070da:	2501      	movle	r5, #1
 80070dc:	441d      	add	r5, r3
 80070de:	f04f 0800 	mov.w	r8, #0
 80070e2:	ee18 1a10 	vmov	r1, s16
 80070e6:	2201      	movs	r2, #1
 80070e8:	4620      	mov	r0, r4
 80070ea:	f000 fa75 	bl	80075d8 <__lshift>
 80070ee:	4631      	mov	r1, r6
 80070f0:	ee08 0a10 	vmov	s16, r0
 80070f4:	f000 fae0 	bl	80076b8 <__mcmp>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	dc91      	bgt.n	8007020 <_dtoa_r+0xaa8>
 80070fc:	d102      	bne.n	8007104 <_dtoa_r+0xb8c>
 80070fe:	f01a 0f01 	tst.w	sl, #1
 8007102:	d18d      	bne.n	8007020 <_dtoa_r+0xaa8>
 8007104:	462b      	mov	r3, r5
 8007106:	461d      	mov	r5, r3
 8007108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800710c:	2a30      	cmp	r2, #48	; 0x30
 800710e:	d0fa      	beq.n	8007106 <_dtoa_r+0xb8e>
 8007110:	e6d7      	b.n	8006ec2 <_dtoa_r+0x94a>
 8007112:	9a01      	ldr	r2, [sp, #4]
 8007114:	429a      	cmp	r2, r3
 8007116:	d184      	bne.n	8007022 <_dtoa_r+0xaaa>
 8007118:	9b00      	ldr	r3, [sp, #0]
 800711a:	3301      	adds	r3, #1
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	2331      	movs	r3, #49	; 0x31
 8007120:	7013      	strb	r3, [r2, #0]
 8007122:	e6ce      	b.n	8006ec2 <_dtoa_r+0x94a>
 8007124:	4b09      	ldr	r3, [pc, #36]	; (800714c <_dtoa_r+0xbd4>)
 8007126:	f7ff ba95 	b.w	8006654 <_dtoa_r+0xdc>
 800712a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800712c:	2b00      	cmp	r3, #0
 800712e:	f47f aa6e 	bne.w	800660e <_dtoa_r+0x96>
 8007132:	4b07      	ldr	r3, [pc, #28]	; (8007150 <_dtoa_r+0xbd8>)
 8007134:	f7ff ba8e 	b.w	8006654 <_dtoa_r+0xdc>
 8007138:	9b02      	ldr	r3, [sp, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	dcae      	bgt.n	800709c <_dtoa_r+0xb24>
 800713e:	9b06      	ldr	r3, [sp, #24]
 8007140:	2b02      	cmp	r3, #2
 8007142:	f73f aea8 	bgt.w	8006e96 <_dtoa_r+0x91e>
 8007146:	e7a9      	b.n	800709c <_dtoa_r+0xb24>
 8007148:	0800a07d 	.word	0x0800a07d
 800714c:	0800a201 	.word	0x0800a201
 8007150:	08009ffe 	.word	0x08009ffe

08007154 <_localeconv_r>:
 8007154:	4800      	ldr	r0, [pc, #0]	; (8007158 <_localeconv_r+0x4>)
 8007156:	4770      	bx	lr
 8007158:	20000164 	.word	0x20000164

0800715c <_lseek_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4d07      	ldr	r5, [pc, #28]	; (800717c <_lseek_r+0x20>)
 8007160:	4604      	mov	r4, r0
 8007162:	4608      	mov	r0, r1
 8007164:	4611      	mov	r1, r2
 8007166:	2200      	movs	r2, #0
 8007168:	602a      	str	r2, [r5, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	f7fa fd9e 	bl	8001cac <_lseek>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_lseek_r+0x1e>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_lseek_r+0x1e>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	200005b4 	.word	0x200005b4

08007180 <memcpy>:
 8007180:	440a      	add	r2, r1
 8007182:	4291      	cmp	r1, r2
 8007184:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007188:	d100      	bne.n	800718c <memcpy+0xc>
 800718a:	4770      	bx	lr
 800718c:	b510      	push	{r4, lr}
 800718e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007196:	4291      	cmp	r1, r2
 8007198:	d1f9      	bne.n	800718e <memcpy+0xe>
 800719a:	bd10      	pop	{r4, pc}

0800719c <__malloc_lock>:
 800719c:	4801      	ldr	r0, [pc, #4]	; (80071a4 <__malloc_lock+0x8>)
 800719e:	f001 bb87 	b.w	80088b0 <__retarget_lock_acquire_recursive>
 80071a2:	bf00      	nop
 80071a4:	200005b8 	.word	0x200005b8

080071a8 <__malloc_unlock>:
 80071a8:	4801      	ldr	r0, [pc, #4]	; (80071b0 <__malloc_unlock+0x8>)
 80071aa:	f001 bb82 	b.w	80088b2 <__retarget_lock_release_recursive>
 80071ae:	bf00      	nop
 80071b0:	200005b8 	.word	0x200005b8

080071b4 <_Balloc>:
 80071b4:	b570      	push	{r4, r5, r6, lr}
 80071b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071b8:	4604      	mov	r4, r0
 80071ba:	460d      	mov	r5, r1
 80071bc:	b976      	cbnz	r6, 80071dc <_Balloc+0x28>
 80071be:	2010      	movs	r0, #16
 80071c0:	f7fe fb2e 	bl	8005820 <malloc>
 80071c4:	4602      	mov	r2, r0
 80071c6:	6260      	str	r0, [r4, #36]	; 0x24
 80071c8:	b920      	cbnz	r0, 80071d4 <_Balloc+0x20>
 80071ca:	4b18      	ldr	r3, [pc, #96]	; (800722c <_Balloc+0x78>)
 80071cc:	4818      	ldr	r0, [pc, #96]	; (8007230 <_Balloc+0x7c>)
 80071ce:	2166      	movs	r1, #102	; 0x66
 80071d0:	f001 f986 	bl	80084e0 <__assert_func>
 80071d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071d8:	6006      	str	r6, [r0, #0]
 80071da:	60c6      	str	r6, [r0, #12]
 80071dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071de:	68f3      	ldr	r3, [r6, #12]
 80071e0:	b183      	cbz	r3, 8007204 <_Balloc+0x50>
 80071e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071ea:	b9b8      	cbnz	r0, 800721c <_Balloc+0x68>
 80071ec:	2101      	movs	r1, #1
 80071ee:	fa01 f605 	lsl.w	r6, r1, r5
 80071f2:	1d72      	adds	r2, r6, #5
 80071f4:	0092      	lsls	r2, r2, #2
 80071f6:	4620      	mov	r0, r4
 80071f8:	f000 fb60 	bl	80078bc <_calloc_r>
 80071fc:	b160      	cbz	r0, 8007218 <_Balloc+0x64>
 80071fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007202:	e00e      	b.n	8007222 <_Balloc+0x6e>
 8007204:	2221      	movs	r2, #33	; 0x21
 8007206:	2104      	movs	r1, #4
 8007208:	4620      	mov	r0, r4
 800720a:	f000 fb57 	bl	80078bc <_calloc_r>
 800720e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007210:	60f0      	str	r0, [r6, #12]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1e4      	bne.n	80071e2 <_Balloc+0x2e>
 8007218:	2000      	movs	r0, #0
 800721a:	bd70      	pop	{r4, r5, r6, pc}
 800721c:	6802      	ldr	r2, [r0, #0]
 800721e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007222:	2300      	movs	r3, #0
 8007224:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007228:	e7f7      	b.n	800721a <_Balloc+0x66>
 800722a:	bf00      	nop
 800722c:	0800a00b 	.word	0x0800a00b
 8007230:	0800a08e 	.word	0x0800a08e

08007234 <_Bfree>:
 8007234:	b570      	push	{r4, r5, r6, lr}
 8007236:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007238:	4605      	mov	r5, r0
 800723a:	460c      	mov	r4, r1
 800723c:	b976      	cbnz	r6, 800725c <_Bfree+0x28>
 800723e:	2010      	movs	r0, #16
 8007240:	f7fe faee 	bl	8005820 <malloc>
 8007244:	4602      	mov	r2, r0
 8007246:	6268      	str	r0, [r5, #36]	; 0x24
 8007248:	b920      	cbnz	r0, 8007254 <_Bfree+0x20>
 800724a:	4b09      	ldr	r3, [pc, #36]	; (8007270 <_Bfree+0x3c>)
 800724c:	4809      	ldr	r0, [pc, #36]	; (8007274 <_Bfree+0x40>)
 800724e:	218a      	movs	r1, #138	; 0x8a
 8007250:	f001 f946 	bl	80084e0 <__assert_func>
 8007254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007258:	6006      	str	r6, [r0, #0]
 800725a:	60c6      	str	r6, [r0, #12]
 800725c:	b13c      	cbz	r4, 800726e <_Bfree+0x3a>
 800725e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007260:	6862      	ldr	r2, [r4, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007268:	6021      	str	r1, [r4, #0]
 800726a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	0800a00b 	.word	0x0800a00b
 8007274:	0800a08e 	.word	0x0800a08e

08007278 <__multadd>:
 8007278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800727c:	690d      	ldr	r5, [r1, #16]
 800727e:	4607      	mov	r7, r0
 8007280:	460c      	mov	r4, r1
 8007282:	461e      	mov	r6, r3
 8007284:	f101 0c14 	add.w	ip, r1, #20
 8007288:	2000      	movs	r0, #0
 800728a:	f8dc 3000 	ldr.w	r3, [ip]
 800728e:	b299      	uxth	r1, r3
 8007290:	fb02 6101 	mla	r1, r2, r1, r6
 8007294:	0c1e      	lsrs	r6, r3, #16
 8007296:	0c0b      	lsrs	r3, r1, #16
 8007298:	fb02 3306 	mla	r3, r2, r6, r3
 800729c:	b289      	uxth	r1, r1
 800729e:	3001      	adds	r0, #1
 80072a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072a4:	4285      	cmp	r5, r0
 80072a6:	f84c 1b04 	str.w	r1, [ip], #4
 80072aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072ae:	dcec      	bgt.n	800728a <__multadd+0x12>
 80072b0:	b30e      	cbz	r6, 80072f6 <__multadd+0x7e>
 80072b2:	68a3      	ldr	r3, [r4, #8]
 80072b4:	42ab      	cmp	r3, r5
 80072b6:	dc19      	bgt.n	80072ec <__multadd+0x74>
 80072b8:	6861      	ldr	r1, [r4, #4]
 80072ba:	4638      	mov	r0, r7
 80072bc:	3101      	adds	r1, #1
 80072be:	f7ff ff79 	bl	80071b4 <_Balloc>
 80072c2:	4680      	mov	r8, r0
 80072c4:	b928      	cbnz	r0, 80072d2 <__multadd+0x5a>
 80072c6:	4602      	mov	r2, r0
 80072c8:	4b0c      	ldr	r3, [pc, #48]	; (80072fc <__multadd+0x84>)
 80072ca:	480d      	ldr	r0, [pc, #52]	; (8007300 <__multadd+0x88>)
 80072cc:	21b5      	movs	r1, #181	; 0xb5
 80072ce:	f001 f907 	bl	80084e0 <__assert_func>
 80072d2:	6922      	ldr	r2, [r4, #16]
 80072d4:	3202      	adds	r2, #2
 80072d6:	f104 010c 	add.w	r1, r4, #12
 80072da:	0092      	lsls	r2, r2, #2
 80072dc:	300c      	adds	r0, #12
 80072de:	f7ff ff4f 	bl	8007180 <memcpy>
 80072e2:	4621      	mov	r1, r4
 80072e4:	4638      	mov	r0, r7
 80072e6:	f7ff ffa5 	bl	8007234 <_Bfree>
 80072ea:	4644      	mov	r4, r8
 80072ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072f0:	3501      	adds	r5, #1
 80072f2:	615e      	str	r6, [r3, #20]
 80072f4:	6125      	str	r5, [r4, #16]
 80072f6:	4620      	mov	r0, r4
 80072f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072fc:	0800a07d 	.word	0x0800a07d
 8007300:	0800a08e 	.word	0x0800a08e

08007304 <__hi0bits>:
 8007304:	0c03      	lsrs	r3, r0, #16
 8007306:	041b      	lsls	r3, r3, #16
 8007308:	b9d3      	cbnz	r3, 8007340 <__hi0bits+0x3c>
 800730a:	0400      	lsls	r0, r0, #16
 800730c:	2310      	movs	r3, #16
 800730e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007312:	bf04      	itt	eq
 8007314:	0200      	lsleq	r0, r0, #8
 8007316:	3308      	addeq	r3, #8
 8007318:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800731c:	bf04      	itt	eq
 800731e:	0100      	lsleq	r0, r0, #4
 8007320:	3304      	addeq	r3, #4
 8007322:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007326:	bf04      	itt	eq
 8007328:	0080      	lsleq	r0, r0, #2
 800732a:	3302      	addeq	r3, #2
 800732c:	2800      	cmp	r0, #0
 800732e:	db05      	blt.n	800733c <__hi0bits+0x38>
 8007330:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007334:	f103 0301 	add.w	r3, r3, #1
 8007338:	bf08      	it	eq
 800733a:	2320      	moveq	r3, #32
 800733c:	4618      	mov	r0, r3
 800733e:	4770      	bx	lr
 8007340:	2300      	movs	r3, #0
 8007342:	e7e4      	b.n	800730e <__hi0bits+0xa>

08007344 <__lo0bits>:
 8007344:	6803      	ldr	r3, [r0, #0]
 8007346:	f013 0207 	ands.w	r2, r3, #7
 800734a:	4601      	mov	r1, r0
 800734c:	d00b      	beq.n	8007366 <__lo0bits+0x22>
 800734e:	07da      	lsls	r2, r3, #31
 8007350:	d423      	bmi.n	800739a <__lo0bits+0x56>
 8007352:	0798      	lsls	r0, r3, #30
 8007354:	bf49      	itett	mi
 8007356:	085b      	lsrmi	r3, r3, #1
 8007358:	089b      	lsrpl	r3, r3, #2
 800735a:	2001      	movmi	r0, #1
 800735c:	600b      	strmi	r3, [r1, #0]
 800735e:	bf5c      	itt	pl
 8007360:	600b      	strpl	r3, [r1, #0]
 8007362:	2002      	movpl	r0, #2
 8007364:	4770      	bx	lr
 8007366:	b298      	uxth	r0, r3
 8007368:	b9a8      	cbnz	r0, 8007396 <__lo0bits+0x52>
 800736a:	0c1b      	lsrs	r3, r3, #16
 800736c:	2010      	movs	r0, #16
 800736e:	b2da      	uxtb	r2, r3
 8007370:	b90a      	cbnz	r2, 8007376 <__lo0bits+0x32>
 8007372:	3008      	adds	r0, #8
 8007374:	0a1b      	lsrs	r3, r3, #8
 8007376:	071a      	lsls	r2, r3, #28
 8007378:	bf04      	itt	eq
 800737a:	091b      	lsreq	r3, r3, #4
 800737c:	3004      	addeq	r0, #4
 800737e:	079a      	lsls	r2, r3, #30
 8007380:	bf04      	itt	eq
 8007382:	089b      	lsreq	r3, r3, #2
 8007384:	3002      	addeq	r0, #2
 8007386:	07da      	lsls	r2, r3, #31
 8007388:	d403      	bmi.n	8007392 <__lo0bits+0x4e>
 800738a:	085b      	lsrs	r3, r3, #1
 800738c:	f100 0001 	add.w	r0, r0, #1
 8007390:	d005      	beq.n	800739e <__lo0bits+0x5a>
 8007392:	600b      	str	r3, [r1, #0]
 8007394:	4770      	bx	lr
 8007396:	4610      	mov	r0, r2
 8007398:	e7e9      	b.n	800736e <__lo0bits+0x2a>
 800739a:	2000      	movs	r0, #0
 800739c:	4770      	bx	lr
 800739e:	2020      	movs	r0, #32
 80073a0:	4770      	bx	lr
	...

080073a4 <__i2b>:
 80073a4:	b510      	push	{r4, lr}
 80073a6:	460c      	mov	r4, r1
 80073a8:	2101      	movs	r1, #1
 80073aa:	f7ff ff03 	bl	80071b4 <_Balloc>
 80073ae:	4602      	mov	r2, r0
 80073b0:	b928      	cbnz	r0, 80073be <__i2b+0x1a>
 80073b2:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <__i2b+0x24>)
 80073b4:	4805      	ldr	r0, [pc, #20]	; (80073cc <__i2b+0x28>)
 80073b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80073ba:	f001 f891 	bl	80084e0 <__assert_func>
 80073be:	2301      	movs	r3, #1
 80073c0:	6144      	str	r4, [r0, #20]
 80073c2:	6103      	str	r3, [r0, #16]
 80073c4:	bd10      	pop	{r4, pc}
 80073c6:	bf00      	nop
 80073c8:	0800a07d 	.word	0x0800a07d
 80073cc:	0800a08e 	.word	0x0800a08e

080073d0 <__multiply>:
 80073d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	4691      	mov	r9, r2
 80073d6:	690a      	ldr	r2, [r1, #16]
 80073d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073dc:	429a      	cmp	r2, r3
 80073de:	bfb8      	it	lt
 80073e0:	460b      	movlt	r3, r1
 80073e2:	460c      	mov	r4, r1
 80073e4:	bfbc      	itt	lt
 80073e6:	464c      	movlt	r4, r9
 80073e8:	4699      	movlt	r9, r3
 80073ea:	6927      	ldr	r7, [r4, #16]
 80073ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073f0:	68a3      	ldr	r3, [r4, #8]
 80073f2:	6861      	ldr	r1, [r4, #4]
 80073f4:	eb07 060a 	add.w	r6, r7, sl
 80073f8:	42b3      	cmp	r3, r6
 80073fa:	b085      	sub	sp, #20
 80073fc:	bfb8      	it	lt
 80073fe:	3101      	addlt	r1, #1
 8007400:	f7ff fed8 	bl	80071b4 <_Balloc>
 8007404:	b930      	cbnz	r0, 8007414 <__multiply+0x44>
 8007406:	4602      	mov	r2, r0
 8007408:	4b44      	ldr	r3, [pc, #272]	; (800751c <__multiply+0x14c>)
 800740a:	4845      	ldr	r0, [pc, #276]	; (8007520 <__multiply+0x150>)
 800740c:	f240 115d 	movw	r1, #349	; 0x15d
 8007410:	f001 f866 	bl	80084e0 <__assert_func>
 8007414:	f100 0514 	add.w	r5, r0, #20
 8007418:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800741c:	462b      	mov	r3, r5
 800741e:	2200      	movs	r2, #0
 8007420:	4543      	cmp	r3, r8
 8007422:	d321      	bcc.n	8007468 <__multiply+0x98>
 8007424:	f104 0314 	add.w	r3, r4, #20
 8007428:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800742c:	f109 0314 	add.w	r3, r9, #20
 8007430:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007434:	9202      	str	r2, [sp, #8]
 8007436:	1b3a      	subs	r2, r7, r4
 8007438:	3a15      	subs	r2, #21
 800743a:	f022 0203 	bic.w	r2, r2, #3
 800743e:	3204      	adds	r2, #4
 8007440:	f104 0115 	add.w	r1, r4, #21
 8007444:	428f      	cmp	r7, r1
 8007446:	bf38      	it	cc
 8007448:	2204      	movcc	r2, #4
 800744a:	9201      	str	r2, [sp, #4]
 800744c:	9a02      	ldr	r2, [sp, #8]
 800744e:	9303      	str	r3, [sp, #12]
 8007450:	429a      	cmp	r2, r3
 8007452:	d80c      	bhi.n	800746e <__multiply+0x9e>
 8007454:	2e00      	cmp	r6, #0
 8007456:	dd03      	ble.n	8007460 <__multiply+0x90>
 8007458:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800745c:	2b00      	cmp	r3, #0
 800745e:	d05a      	beq.n	8007516 <__multiply+0x146>
 8007460:	6106      	str	r6, [r0, #16]
 8007462:	b005      	add	sp, #20
 8007464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007468:	f843 2b04 	str.w	r2, [r3], #4
 800746c:	e7d8      	b.n	8007420 <__multiply+0x50>
 800746e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007472:	f1ba 0f00 	cmp.w	sl, #0
 8007476:	d024      	beq.n	80074c2 <__multiply+0xf2>
 8007478:	f104 0e14 	add.w	lr, r4, #20
 800747c:	46a9      	mov	r9, r5
 800747e:	f04f 0c00 	mov.w	ip, #0
 8007482:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007486:	f8d9 1000 	ldr.w	r1, [r9]
 800748a:	fa1f fb82 	uxth.w	fp, r2
 800748e:	b289      	uxth	r1, r1
 8007490:	fb0a 110b 	mla	r1, sl, fp, r1
 8007494:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007498:	f8d9 2000 	ldr.w	r2, [r9]
 800749c:	4461      	add	r1, ip
 800749e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074a2:	fb0a c20b 	mla	r2, sl, fp, ip
 80074a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074aa:	b289      	uxth	r1, r1
 80074ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074b0:	4577      	cmp	r7, lr
 80074b2:	f849 1b04 	str.w	r1, [r9], #4
 80074b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074ba:	d8e2      	bhi.n	8007482 <__multiply+0xb2>
 80074bc:	9a01      	ldr	r2, [sp, #4]
 80074be:	f845 c002 	str.w	ip, [r5, r2]
 80074c2:	9a03      	ldr	r2, [sp, #12]
 80074c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074c8:	3304      	adds	r3, #4
 80074ca:	f1b9 0f00 	cmp.w	r9, #0
 80074ce:	d020      	beq.n	8007512 <__multiply+0x142>
 80074d0:	6829      	ldr	r1, [r5, #0]
 80074d2:	f104 0c14 	add.w	ip, r4, #20
 80074d6:	46ae      	mov	lr, r5
 80074d8:	f04f 0a00 	mov.w	sl, #0
 80074dc:	f8bc b000 	ldrh.w	fp, [ip]
 80074e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80074e4:	fb09 220b 	mla	r2, r9, fp, r2
 80074e8:	4492      	add	sl, r2
 80074ea:	b289      	uxth	r1, r1
 80074ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80074f0:	f84e 1b04 	str.w	r1, [lr], #4
 80074f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80074f8:	f8be 1000 	ldrh.w	r1, [lr]
 80074fc:	0c12      	lsrs	r2, r2, #16
 80074fe:	fb09 1102 	mla	r1, r9, r2, r1
 8007502:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007506:	4567      	cmp	r7, ip
 8007508:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800750c:	d8e6      	bhi.n	80074dc <__multiply+0x10c>
 800750e:	9a01      	ldr	r2, [sp, #4]
 8007510:	50a9      	str	r1, [r5, r2]
 8007512:	3504      	adds	r5, #4
 8007514:	e79a      	b.n	800744c <__multiply+0x7c>
 8007516:	3e01      	subs	r6, #1
 8007518:	e79c      	b.n	8007454 <__multiply+0x84>
 800751a:	bf00      	nop
 800751c:	0800a07d 	.word	0x0800a07d
 8007520:	0800a08e 	.word	0x0800a08e

08007524 <__pow5mult>:
 8007524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007528:	4615      	mov	r5, r2
 800752a:	f012 0203 	ands.w	r2, r2, #3
 800752e:	4606      	mov	r6, r0
 8007530:	460f      	mov	r7, r1
 8007532:	d007      	beq.n	8007544 <__pow5mult+0x20>
 8007534:	4c25      	ldr	r4, [pc, #148]	; (80075cc <__pow5mult+0xa8>)
 8007536:	3a01      	subs	r2, #1
 8007538:	2300      	movs	r3, #0
 800753a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800753e:	f7ff fe9b 	bl	8007278 <__multadd>
 8007542:	4607      	mov	r7, r0
 8007544:	10ad      	asrs	r5, r5, #2
 8007546:	d03d      	beq.n	80075c4 <__pow5mult+0xa0>
 8007548:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800754a:	b97c      	cbnz	r4, 800756c <__pow5mult+0x48>
 800754c:	2010      	movs	r0, #16
 800754e:	f7fe f967 	bl	8005820 <malloc>
 8007552:	4602      	mov	r2, r0
 8007554:	6270      	str	r0, [r6, #36]	; 0x24
 8007556:	b928      	cbnz	r0, 8007564 <__pow5mult+0x40>
 8007558:	4b1d      	ldr	r3, [pc, #116]	; (80075d0 <__pow5mult+0xac>)
 800755a:	481e      	ldr	r0, [pc, #120]	; (80075d4 <__pow5mult+0xb0>)
 800755c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007560:	f000 ffbe 	bl	80084e0 <__assert_func>
 8007564:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007568:	6004      	str	r4, [r0, #0]
 800756a:	60c4      	str	r4, [r0, #12]
 800756c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007570:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007574:	b94c      	cbnz	r4, 800758a <__pow5mult+0x66>
 8007576:	f240 2171 	movw	r1, #625	; 0x271
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff ff12 	bl	80073a4 <__i2b>
 8007580:	2300      	movs	r3, #0
 8007582:	f8c8 0008 	str.w	r0, [r8, #8]
 8007586:	4604      	mov	r4, r0
 8007588:	6003      	str	r3, [r0, #0]
 800758a:	f04f 0900 	mov.w	r9, #0
 800758e:	07eb      	lsls	r3, r5, #31
 8007590:	d50a      	bpl.n	80075a8 <__pow5mult+0x84>
 8007592:	4639      	mov	r1, r7
 8007594:	4622      	mov	r2, r4
 8007596:	4630      	mov	r0, r6
 8007598:	f7ff ff1a 	bl	80073d0 <__multiply>
 800759c:	4639      	mov	r1, r7
 800759e:	4680      	mov	r8, r0
 80075a0:	4630      	mov	r0, r6
 80075a2:	f7ff fe47 	bl	8007234 <_Bfree>
 80075a6:	4647      	mov	r7, r8
 80075a8:	106d      	asrs	r5, r5, #1
 80075aa:	d00b      	beq.n	80075c4 <__pow5mult+0xa0>
 80075ac:	6820      	ldr	r0, [r4, #0]
 80075ae:	b938      	cbnz	r0, 80075c0 <__pow5mult+0x9c>
 80075b0:	4622      	mov	r2, r4
 80075b2:	4621      	mov	r1, r4
 80075b4:	4630      	mov	r0, r6
 80075b6:	f7ff ff0b 	bl	80073d0 <__multiply>
 80075ba:	6020      	str	r0, [r4, #0]
 80075bc:	f8c0 9000 	str.w	r9, [r0]
 80075c0:	4604      	mov	r4, r0
 80075c2:	e7e4      	b.n	800758e <__pow5mult+0x6a>
 80075c4:	4638      	mov	r0, r7
 80075c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ca:	bf00      	nop
 80075cc:	0800a1e0 	.word	0x0800a1e0
 80075d0:	0800a00b 	.word	0x0800a00b
 80075d4:	0800a08e 	.word	0x0800a08e

080075d8 <__lshift>:
 80075d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075dc:	460c      	mov	r4, r1
 80075de:	6849      	ldr	r1, [r1, #4]
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075e6:	68a3      	ldr	r3, [r4, #8]
 80075e8:	4607      	mov	r7, r0
 80075ea:	4691      	mov	r9, r2
 80075ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075f0:	f108 0601 	add.w	r6, r8, #1
 80075f4:	42b3      	cmp	r3, r6
 80075f6:	db0b      	blt.n	8007610 <__lshift+0x38>
 80075f8:	4638      	mov	r0, r7
 80075fa:	f7ff fddb 	bl	80071b4 <_Balloc>
 80075fe:	4605      	mov	r5, r0
 8007600:	b948      	cbnz	r0, 8007616 <__lshift+0x3e>
 8007602:	4602      	mov	r2, r0
 8007604:	4b2a      	ldr	r3, [pc, #168]	; (80076b0 <__lshift+0xd8>)
 8007606:	482b      	ldr	r0, [pc, #172]	; (80076b4 <__lshift+0xdc>)
 8007608:	f240 11d9 	movw	r1, #473	; 0x1d9
 800760c:	f000 ff68 	bl	80084e0 <__assert_func>
 8007610:	3101      	adds	r1, #1
 8007612:	005b      	lsls	r3, r3, #1
 8007614:	e7ee      	b.n	80075f4 <__lshift+0x1c>
 8007616:	2300      	movs	r3, #0
 8007618:	f100 0114 	add.w	r1, r0, #20
 800761c:	f100 0210 	add.w	r2, r0, #16
 8007620:	4618      	mov	r0, r3
 8007622:	4553      	cmp	r3, sl
 8007624:	db37      	blt.n	8007696 <__lshift+0xbe>
 8007626:	6920      	ldr	r0, [r4, #16]
 8007628:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800762c:	f104 0314 	add.w	r3, r4, #20
 8007630:	f019 091f 	ands.w	r9, r9, #31
 8007634:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007638:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800763c:	d02f      	beq.n	800769e <__lshift+0xc6>
 800763e:	f1c9 0e20 	rsb	lr, r9, #32
 8007642:	468a      	mov	sl, r1
 8007644:	f04f 0c00 	mov.w	ip, #0
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	fa02 f209 	lsl.w	r2, r2, r9
 800764e:	ea42 020c 	orr.w	r2, r2, ip
 8007652:	f84a 2b04 	str.w	r2, [sl], #4
 8007656:	f853 2b04 	ldr.w	r2, [r3], #4
 800765a:	4298      	cmp	r0, r3
 800765c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007660:	d8f2      	bhi.n	8007648 <__lshift+0x70>
 8007662:	1b03      	subs	r3, r0, r4
 8007664:	3b15      	subs	r3, #21
 8007666:	f023 0303 	bic.w	r3, r3, #3
 800766a:	3304      	adds	r3, #4
 800766c:	f104 0215 	add.w	r2, r4, #21
 8007670:	4290      	cmp	r0, r2
 8007672:	bf38      	it	cc
 8007674:	2304      	movcc	r3, #4
 8007676:	f841 c003 	str.w	ip, [r1, r3]
 800767a:	f1bc 0f00 	cmp.w	ip, #0
 800767e:	d001      	beq.n	8007684 <__lshift+0xac>
 8007680:	f108 0602 	add.w	r6, r8, #2
 8007684:	3e01      	subs	r6, #1
 8007686:	4638      	mov	r0, r7
 8007688:	612e      	str	r6, [r5, #16]
 800768a:	4621      	mov	r1, r4
 800768c:	f7ff fdd2 	bl	8007234 <_Bfree>
 8007690:	4628      	mov	r0, r5
 8007692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007696:	f842 0f04 	str.w	r0, [r2, #4]!
 800769a:	3301      	adds	r3, #1
 800769c:	e7c1      	b.n	8007622 <__lshift+0x4a>
 800769e:	3904      	subs	r1, #4
 80076a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80076a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80076a8:	4298      	cmp	r0, r3
 80076aa:	d8f9      	bhi.n	80076a0 <__lshift+0xc8>
 80076ac:	e7ea      	b.n	8007684 <__lshift+0xac>
 80076ae:	bf00      	nop
 80076b0:	0800a07d 	.word	0x0800a07d
 80076b4:	0800a08e 	.word	0x0800a08e

080076b8 <__mcmp>:
 80076b8:	b530      	push	{r4, r5, lr}
 80076ba:	6902      	ldr	r2, [r0, #16]
 80076bc:	690c      	ldr	r4, [r1, #16]
 80076be:	1b12      	subs	r2, r2, r4
 80076c0:	d10e      	bne.n	80076e0 <__mcmp+0x28>
 80076c2:	f100 0314 	add.w	r3, r0, #20
 80076c6:	3114      	adds	r1, #20
 80076c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076d8:	42a5      	cmp	r5, r4
 80076da:	d003      	beq.n	80076e4 <__mcmp+0x2c>
 80076dc:	d305      	bcc.n	80076ea <__mcmp+0x32>
 80076de:	2201      	movs	r2, #1
 80076e0:	4610      	mov	r0, r2
 80076e2:	bd30      	pop	{r4, r5, pc}
 80076e4:	4283      	cmp	r3, r0
 80076e6:	d3f3      	bcc.n	80076d0 <__mcmp+0x18>
 80076e8:	e7fa      	b.n	80076e0 <__mcmp+0x28>
 80076ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076ee:	e7f7      	b.n	80076e0 <__mcmp+0x28>

080076f0 <__mdiff>:
 80076f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	460c      	mov	r4, r1
 80076f6:	4606      	mov	r6, r0
 80076f8:	4611      	mov	r1, r2
 80076fa:	4620      	mov	r0, r4
 80076fc:	4690      	mov	r8, r2
 80076fe:	f7ff ffdb 	bl	80076b8 <__mcmp>
 8007702:	1e05      	subs	r5, r0, #0
 8007704:	d110      	bne.n	8007728 <__mdiff+0x38>
 8007706:	4629      	mov	r1, r5
 8007708:	4630      	mov	r0, r6
 800770a:	f7ff fd53 	bl	80071b4 <_Balloc>
 800770e:	b930      	cbnz	r0, 800771e <__mdiff+0x2e>
 8007710:	4b3a      	ldr	r3, [pc, #232]	; (80077fc <__mdiff+0x10c>)
 8007712:	4602      	mov	r2, r0
 8007714:	f240 2132 	movw	r1, #562	; 0x232
 8007718:	4839      	ldr	r0, [pc, #228]	; (8007800 <__mdiff+0x110>)
 800771a:	f000 fee1 	bl	80084e0 <__assert_func>
 800771e:	2301      	movs	r3, #1
 8007720:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007728:	bfa4      	itt	ge
 800772a:	4643      	movge	r3, r8
 800772c:	46a0      	movge	r8, r4
 800772e:	4630      	mov	r0, r6
 8007730:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007734:	bfa6      	itte	ge
 8007736:	461c      	movge	r4, r3
 8007738:	2500      	movge	r5, #0
 800773a:	2501      	movlt	r5, #1
 800773c:	f7ff fd3a 	bl	80071b4 <_Balloc>
 8007740:	b920      	cbnz	r0, 800774c <__mdiff+0x5c>
 8007742:	4b2e      	ldr	r3, [pc, #184]	; (80077fc <__mdiff+0x10c>)
 8007744:	4602      	mov	r2, r0
 8007746:	f44f 7110 	mov.w	r1, #576	; 0x240
 800774a:	e7e5      	b.n	8007718 <__mdiff+0x28>
 800774c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007750:	6926      	ldr	r6, [r4, #16]
 8007752:	60c5      	str	r5, [r0, #12]
 8007754:	f104 0914 	add.w	r9, r4, #20
 8007758:	f108 0514 	add.w	r5, r8, #20
 800775c:	f100 0e14 	add.w	lr, r0, #20
 8007760:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007764:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007768:	f108 0210 	add.w	r2, r8, #16
 800776c:	46f2      	mov	sl, lr
 800776e:	2100      	movs	r1, #0
 8007770:	f859 3b04 	ldr.w	r3, [r9], #4
 8007774:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007778:	fa1f f883 	uxth.w	r8, r3
 800777c:	fa11 f18b 	uxtah	r1, r1, fp
 8007780:	0c1b      	lsrs	r3, r3, #16
 8007782:	eba1 0808 	sub.w	r8, r1, r8
 8007786:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800778a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800778e:	fa1f f888 	uxth.w	r8, r8
 8007792:	1419      	asrs	r1, r3, #16
 8007794:	454e      	cmp	r6, r9
 8007796:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800779a:	f84a 3b04 	str.w	r3, [sl], #4
 800779e:	d8e7      	bhi.n	8007770 <__mdiff+0x80>
 80077a0:	1b33      	subs	r3, r6, r4
 80077a2:	3b15      	subs	r3, #21
 80077a4:	f023 0303 	bic.w	r3, r3, #3
 80077a8:	3304      	adds	r3, #4
 80077aa:	3415      	adds	r4, #21
 80077ac:	42a6      	cmp	r6, r4
 80077ae:	bf38      	it	cc
 80077b0:	2304      	movcc	r3, #4
 80077b2:	441d      	add	r5, r3
 80077b4:	4473      	add	r3, lr
 80077b6:	469e      	mov	lr, r3
 80077b8:	462e      	mov	r6, r5
 80077ba:	4566      	cmp	r6, ip
 80077bc:	d30e      	bcc.n	80077dc <__mdiff+0xec>
 80077be:	f10c 0203 	add.w	r2, ip, #3
 80077c2:	1b52      	subs	r2, r2, r5
 80077c4:	f022 0203 	bic.w	r2, r2, #3
 80077c8:	3d03      	subs	r5, #3
 80077ca:	45ac      	cmp	ip, r5
 80077cc:	bf38      	it	cc
 80077ce:	2200      	movcc	r2, #0
 80077d0:	441a      	add	r2, r3
 80077d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80077d6:	b17b      	cbz	r3, 80077f8 <__mdiff+0x108>
 80077d8:	6107      	str	r7, [r0, #16]
 80077da:	e7a3      	b.n	8007724 <__mdiff+0x34>
 80077dc:	f856 8b04 	ldr.w	r8, [r6], #4
 80077e0:	fa11 f288 	uxtah	r2, r1, r8
 80077e4:	1414      	asrs	r4, r2, #16
 80077e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077ea:	b292      	uxth	r2, r2
 80077ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80077f0:	f84e 2b04 	str.w	r2, [lr], #4
 80077f4:	1421      	asrs	r1, r4, #16
 80077f6:	e7e0      	b.n	80077ba <__mdiff+0xca>
 80077f8:	3f01      	subs	r7, #1
 80077fa:	e7ea      	b.n	80077d2 <__mdiff+0xe2>
 80077fc:	0800a07d 	.word	0x0800a07d
 8007800:	0800a08e 	.word	0x0800a08e

08007804 <__d2b>:
 8007804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007808:	4689      	mov	r9, r1
 800780a:	2101      	movs	r1, #1
 800780c:	ec57 6b10 	vmov	r6, r7, d0
 8007810:	4690      	mov	r8, r2
 8007812:	f7ff fccf 	bl	80071b4 <_Balloc>
 8007816:	4604      	mov	r4, r0
 8007818:	b930      	cbnz	r0, 8007828 <__d2b+0x24>
 800781a:	4602      	mov	r2, r0
 800781c:	4b25      	ldr	r3, [pc, #148]	; (80078b4 <__d2b+0xb0>)
 800781e:	4826      	ldr	r0, [pc, #152]	; (80078b8 <__d2b+0xb4>)
 8007820:	f240 310a 	movw	r1, #778	; 0x30a
 8007824:	f000 fe5c 	bl	80084e0 <__assert_func>
 8007828:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800782c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007830:	bb35      	cbnz	r5, 8007880 <__d2b+0x7c>
 8007832:	2e00      	cmp	r6, #0
 8007834:	9301      	str	r3, [sp, #4]
 8007836:	d028      	beq.n	800788a <__d2b+0x86>
 8007838:	4668      	mov	r0, sp
 800783a:	9600      	str	r6, [sp, #0]
 800783c:	f7ff fd82 	bl	8007344 <__lo0bits>
 8007840:	9900      	ldr	r1, [sp, #0]
 8007842:	b300      	cbz	r0, 8007886 <__d2b+0x82>
 8007844:	9a01      	ldr	r2, [sp, #4]
 8007846:	f1c0 0320 	rsb	r3, r0, #32
 800784a:	fa02 f303 	lsl.w	r3, r2, r3
 800784e:	430b      	orrs	r3, r1
 8007850:	40c2      	lsrs	r2, r0
 8007852:	6163      	str	r3, [r4, #20]
 8007854:	9201      	str	r2, [sp, #4]
 8007856:	9b01      	ldr	r3, [sp, #4]
 8007858:	61a3      	str	r3, [r4, #24]
 800785a:	2b00      	cmp	r3, #0
 800785c:	bf14      	ite	ne
 800785e:	2202      	movne	r2, #2
 8007860:	2201      	moveq	r2, #1
 8007862:	6122      	str	r2, [r4, #16]
 8007864:	b1d5      	cbz	r5, 800789c <__d2b+0x98>
 8007866:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800786a:	4405      	add	r5, r0
 800786c:	f8c9 5000 	str.w	r5, [r9]
 8007870:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007874:	f8c8 0000 	str.w	r0, [r8]
 8007878:	4620      	mov	r0, r4
 800787a:	b003      	add	sp, #12
 800787c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007884:	e7d5      	b.n	8007832 <__d2b+0x2e>
 8007886:	6161      	str	r1, [r4, #20]
 8007888:	e7e5      	b.n	8007856 <__d2b+0x52>
 800788a:	a801      	add	r0, sp, #4
 800788c:	f7ff fd5a 	bl	8007344 <__lo0bits>
 8007890:	9b01      	ldr	r3, [sp, #4]
 8007892:	6163      	str	r3, [r4, #20]
 8007894:	2201      	movs	r2, #1
 8007896:	6122      	str	r2, [r4, #16]
 8007898:	3020      	adds	r0, #32
 800789a:	e7e3      	b.n	8007864 <__d2b+0x60>
 800789c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078a4:	f8c9 0000 	str.w	r0, [r9]
 80078a8:	6918      	ldr	r0, [r3, #16]
 80078aa:	f7ff fd2b 	bl	8007304 <__hi0bits>
 80078ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078b2:	e7df      	b.n	8007874 <__d2b+0x70>
 80078b4:	0800a07d 	.word	0x0800a07d
 80078b8:	0800a08e 	.word	0x0800a08e

080078bc <_calloc_r>:
 80078bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078be:	fba1 2402 	umull	r2, r4, r1, r2
 80078c2:	b94c      	cbnz	r4, 80078d8 <_calloc_r+0x1c>
 80078c4:	4611      	mov	r1, r2
 80078c6:	9201      	str	r2, [sp, #4]
 80078c8:	f7fe f826 	bl	8005918 <_malloc_r>
 80078cc:	9a01      	ldr	r2, [sp, #4]
 80078ce:	4605      	mov	r5, r0
 80078d0:	b930      	cbnz	r0, 80078e0 <_calloc_r+0x24>
 80078d2:	4628      	mov	r0, r5
 80078d4:	b003      	add	sp, #12
 80078d6:	bd30      	pop	{r4, r5, pc}
 80078d8:	220c      	movs	r2, #12
 80078da:	6002      	str	r2, [r0, #0]
 80078dc:	2500      	movs	r5, #0
 80078de:	e7f8      	b.n	80078d2 <_calloc_r+0x16>
 80078e0:	4621      	mov	r1, r4
 80078e2:	f7fd ffa5 	bl	8005830 <memset>
 80078e6:	e7f4      	b.n	80078d2 <_calloc_r+0x16>

080078e8 <__ssputs_r>:
 80078e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ec:	688e      	ldr	r6, [r1, #8]
 80078ee:	429e      	cmp	r6, r3
 80078f0:	4682      	mov	sl, r0
 80078f2:	460c      	mov	r4, r1
 80078f4:	4690      	mov	r8, r2
 80078f6:	461f      	mov	r7, r3
 80078f8:	d838      	bhi.n	800796c <__ssputs_r+0x84>
 80078fa:	898a      	ldrh	r2, [r1, #12]
 80078fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007900:	d032      	beq.n	8007968 <__ssputs_r+0x80>
 8007902:	6825      	ldr	r5, [r4, #0]
 8007904:	6909      	ldr	r1, [r1, #16]
 8007906:	eba5 0901 	sub.w	r9, r5, r1
 800790a:	6965      	ldr	r5, [r4, #20]
 800790c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007910:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007914:	3301      	adds	r3, #1
 8007916:	444b      	add	r3, r9
 8007918:	106d      	asrs	r5, r5, #1
 800791a:	429d      	cmp	r5, r3
 800791c:	bf38      	it	cc
 800791e:	461d      	movcc	r5, r3
 8007920:	0553      	lsls	r3, r2, #21
 8007922:	d531      	bpl.n	8007988 <__ssputs_r+0xa0>
 8007924:	4629      	mov	r1, r5
 8007926:	f7fd fff7 	bl	8005918 <_malloc_r>
 800792a:	4606      	mov	r6, r0
 800792c:	b950      	cbnz	r0, 8007944 <__ssputs_r+0x5c>
 800792e:	230c      	movs	r3, #12
 8007930:	f8ca 3000 	str.w	r3, [sl]
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800793a:	81a3      	strh	r3, [r4, #12]
 800793c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007944:	6921      	ldr	r1, [r4, #16]
 8007946:	464a      	mov	r2, r9
 8007948:	f7ff fc1a 	bl	8007180 <memcpy>
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007956:	81a3      	strh	r3, [r4, #12]
 8007958:	6126      	str	r6, [r4, #16]
 800795a:	6165      	str	r5, [r4, #20]
 800795c:	444e      	add	r6, r9
 800795e:	eba5 0509 	sub.w	r5, r5, r9
 8007962:	6026      	str	r6, [r4, #0]
 8007964:	60a5      	str	r5, [r4, #8]
 8007966:	463e      	mov	r6, r7
 8007968:	42be      	cmp	r6, r7
 800796a:	d900      	bls.n	800796e <__ssputs_r+0x86>
 800796c:	463e      	mov	r6, r7
 800796e:	6820      	ldr	r0, [r4, #0]
 8007970:	4632      	mov	r2, r6
 8007972:	4641      	mov	r1, r8
 8007974:	f000 ffb0 	bl	80088d8 <memmove>
 8007978:	68a3      	ldr	r3, [r4, #8]
 800797a:	1b9b      	subs	r3, r3, r6
 800797c:	60a3      	str	r3, [r4, #8]
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	4433      	add	r3, r6
 8007982:	6023      	str	r3, [r4, #0]
 8007984:	2000      	movs	r0, #0
 8007986:	e7db      	b.n	8007940 <__ssputs_r+0x58>
 8007988:	462a      	mov	r2, r5
 800798a:	f000 ffbf 	bl	800890c <_realloc_r>
 800798e:	4606      	mov	r6, r0
 8007990:	2800      	cmp	r0, #0
 8007992:	d1e1      	bne.n	8007958 <__ssputs_r+0x70>
 8007994:	6921      	ldr	r1, [r4, #16]
 8007996:	4650      	mov	r0, sl
 8007998:	f7fd ff52 	bl	8005840 <_free_r>
 800799c:	e7c7      	b.n	800792e <__ssputs_r+0x46>
	...

080079a0 <_svfiprintf_r>:
 80079a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a4:	4698      	mov	r8, r3
 80079a6:	898b      	ldrh	r3, [r1, #12]
 80079a8:	061b      	lsls	r3, r3, #24
 80079aa:	b09d      	sub	sp, #116	; 0x74
 80079ac:	4607      	mov	r7, r0
 80079ae:	460d      	mov	r5, r1
 80079b0:	4614      	mov	r4, r2
 80079b2:	d50e      	bpl.n	80079d2 <_svfiprintf_r+0x32>
 80079b4:	690b      	ldr	r3, [r1, #16]
 80079b6:	b963      	cbnz	r3, 80079d2 <_svfiprintf_r+0x32>
 80079b8:	2140      	movs	r1, #64	; 0x40
 80079ba:	f7fd ffad 	bl	8005918 <_malloc_r>
 80079be:	6028      	str	r0, [r5, #0]
 80079c0:	6128      	str	r0, [r5, #16]
 80079c2:	b920      	cbnz	r0, 80079ce <_svfiprintf_r+0x2e>
 80079c4:	230c      	movs	r3, #12
 80079c6:	603b      	str	r3, [r7, #0]
 80079c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079cc:	e0d1      	b.n	8007b72 <_svfiprintf_r+0x1d2>
 80079ce:	2340      	movs	r3, #64	; 0x40
 80079d0:	616b      	str	r3, [r5, #20]
 80079d2:	2300      	movs	r3, #0
 80079d4:	9309      	str	r3, [sp, #36]	; 0x24
 80079d6:	2320      	movs	r3, #32
 80079d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80079e0:	2330      	movs	r3, #48	; 0x30
 80079e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b8c <_svfiprintf_r+0x1ec>
 80079e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079ea:	f04f 0901 	mov.w	r9, #1
 80079ee:	4623      	mov	r3, r4
 80079f0:	469a      	mov	sl, r3
 80079f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079f6:	b10a      	cbz	r2, 80079fc <_svfiprintf_r+0x5c>
 80079f8:	2a25      	cmp	r2, #37	; 0x25
 80079fa:	d1f9      	bne.n	80079f0 <_svfiprintf_r+0x50>
 80079fc:	ebba 0b04 	subs.w	fp, sl, r4
 8007a00:	d00b      	beq.n	8007a1a <_svfiprintf_r+0x7a>
 8007a02:	465b      	mov	r3, fp
 8007a04:	4622      	mov	r2, r4
 8007a06:	4629      	mov	r1, r5
 8007a08:	4638      	mov	r0, r7
 8007a0a:	f7ff ff6d 	bl	80078e8 <__ssputs_r>
 8007a0e:	3001      	adds	r0, #1
 8007a10:	f000 80aa 	beq.w	8007b68 <_svfiprintf_r+0x1c8>
 8007a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a16:	445a      	add	r2, fp
 8007a18:	9209      	str	r2, [sp, #36]	; 0x24
 8007a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 80a2 	beq.w	8007b68 <_svfiprintf_r+0x1c8>
 8007a24:	2300      	movs	r3, #0
 8007a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a2e:	f10a 0a01 	add.w	sl, sl, #1
 8007a32:	9304      	str	r3, [sp, #16]
 8007a34:	9307      	str	r3, [sp, #28]
 8007a36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a3a:	931a      	str	r3, [sp, #104]	; 0x68
 8007a3c:	4654      	mov	r4, sl
 8007a3e:	2205      	movs	r2, #5
 8007a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a44:	4851      	ldr	r0, [pc, #324]	; (8007b8c <_svfiprintf_r+0x1ec>)
 8007a46:	f7f8 fbe3 	bl	8000210 <memchr>
 8007a4a:	9a04      	ldr	r2, [sp, #16]
 8007a4c:	b9d8      	cbnz	r0, 8007a86 <_svfiprintf_r+0xe6>
 8007a4e:	06d0      	lsls	r0, r2, #27
 8007a50:	bf44      	itt	mi
 8007a52:	2320      	movmi	r3, #32
 8007a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a58:	0711      	lsls	r1, r2, #28
 8007a5a:	bf44      	itt	mi
 8007a5c:	232b      	movmi	r3, #43	; 0x2b
 8007a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a62:	f89a 3000 	ldrb.w	r3, [sl]
 8007a66:	2b2a      	cmp	r3, #42	; 0x2a
 8007a68:	d015      	beq.n	8007a96 <_svfiprintf_r+0xf6>
 8007a6a:	9a07      	ldr	r2, [sp, #28]
 8007a6c:	4654      	mov	r4, sl
 8007a6e:	2000      	movs	r0, #0
 8007a70:	f04f 0c0a 	mov.w	ip, #10
 8007a74:	4621      	mov	r1, r4
 8007a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a7a:	3b30      	subs	r3, #48	; 0x30
 8007a7c:	2b09      	cmp	r3, #9
 8007a7e:	d94e      	bls.n	8007b1e <_svfiprintf_r+0x17e>
 8007a80:	b1b0      	cbz	r0, 8007ab0 <_svfiprintf_r+0x110>
 8007a82:	9207      	str	r2, [sp, #28]
 8007a84:	e014      	b.n	8007ab0 <_svfiprintf_r+0x110>
 8007a86:	eba0 0308 	sub.w	r3, r0, r8
 8007a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	9304      	str	r3, [sp, #16]
 8007a92:	46a2      	mov	sl, r4
 8007a94:	e7d2      	b.n	8007a3c <_svfiprintf_r+0x9c>
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	1d19      	adds	r1, r3, #4
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	9103      	str	r1, [sp, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	bfbb      	ittet	lt
 8007aa2:	425b      	neglt	r3, r3
 8007aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8007aa8:	9307      	strge	r3, [sp, #28]
 8007aaa:	9307      	strlt	r3, [sp, #28]
 8007aac:	bfb8      	it	lt
 8007aae:	9204      	strlt	r2, [sp, #16]
 8007ab0:	7823      	ldrb	r3, [r4, #0]
 8007ab2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ab4:	d10c      	bne.n	8007ad0 <_svfiprintf_r+0x130>
 8007ab6:	7863      	ldrb	r3, [r4, #1]
 8007ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8007aba:	d135      	bne.n	8007b28 <_svfiprintf_r+0x188>
 8007abc:	9b03      	ldr	r3, [sp, #12]
 8007abe:	1d1a      	adds	r2, r3, #4
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	9203      	str	r2, [sp, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	bfb8      	it	lt
 8007ac8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007acc:	3402      	adds	r4, #2
 8007ace:	9305      	str	r3, [sp, #20]
 8007ad0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b9c <_svfiprintf_r+0x1fc>
 8007ad4:	7821      	ldrb	r1, [r4, #0]
 8007ad6:	2203      	movs	r2, #3
 8007ad8:	4650      	mov	r0, sl
 8007ada:	f7f8 fb99 	bl	8000210 <memchr>
 8007ade:	b140      	cbz	r0, 8007af2 <_svfiprintf_r+0x152>
 8007ae0:	2340      	movs	r3, #64	; 0x40
 8007ae2:	eba0 000a 	sub.w	r0, r0, sl
 8007ae6:	fa03 f000 	lsl.w	r0, r3, r0
 8007aea:	9b04      	ldr	r3, [sp, #16]
 8007aec:	4303      	orrs	r3, r0
 8007aee:	3401      	adds	r4, #1
 8007af0:	9304      	str	r3, [sp, #16]
 8007af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af6:	4826      	ldr	r0, [pc, #152]	; (8007b90 <_svfiprintf_r+0x1f0>)
 8007af8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007afc:	2206      	movs	r2, #6
 8007afe:	f7f8 fb87 	bl	8000210 <memchr>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d038      	beq.n	8007b78 <_svfiprintf_r+0x1d8>
 8007b06:	4b23      	ldr	r3, [pc, #140]	; (8007b94 <_svfiprintf_r+0x1f4>)
 8007b08:	bb1b      	cbnz	r3, 8007b52 <_svfiprintf_r+0x1b2>
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	3307      	adds	r3, #7
 8007b0e:	f023 0307 	bic.w	r3, r3, #7
 8007b12:	3308      	adds	r3, #8
 8007b14:	9303      	str	r3, [sp, #12]
 8007b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b18:	4433      	add	r3, r6
 8007b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b1c:	e767      	b.n	80079ee <_svfiprintf_r+0x4e>
 8007b1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b22:	460c      	mov	r4, r1
 8007b24:	2001      	movs	r0, #1
 8007b26:	e7a5      	b.n	8007a74 <_svfiprintf_r+0xd4>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	3401      	adds	r4, #1
 8007b2c:	9305      	str	r3, [sp, #20]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	f04f 0c0a 	mov.w	ip, #10
 8007b34:	4620      	mov	r0, r4
 8007b36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b3a:	3a30      	subs	r2, #48	; 0x30
 8007b3c:	2a09      	cmp	r2, #9
 8007b3e:	d903      	bls.n	8007b48 <_svfiprintf_r+0x1a8>
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0c5      	beq.n	8007ad0 <_svfiprintf_r+0x130>
 8007b44:	9105      	str	r1, [sp, #20]
 8007b46:	e7c3      	b.n	8007ad0 <_svfiprintf_r+0x130>
 8007b48:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e7f0      	b.n	8007b34 <_svfiprintf_r+0x194>
 8007b52:	ab03      	add	r3, sp, #12
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	462a      	mov	r2, r5
 8007b58:	4b0f      	ldr	r3, [pc, #60]	; (8007b98 <_svfiprintf_r+0x1f8>)
 8007b5a:	a904      	add	r1, sp, #16
 8007b5c:	4638      	mov	r0, r7
 8007b5e:	f7fd ffef 	bl	8005b40 <_printf_float>
 8007b62:	1c42      	adds	r2, r0, #1
 8007b64:	4606      	mov	r6, r0
 8007b66:	d1d6      	bne.n	8007b16 <_svfiprintf_r+0x176>
 8007b68:	89ab      	ldrh	r3, [r5, #12]
 8007b6a:	065b      	lsls	r3, r3, #25
 8007b6c:	f53f af2c 	bmi.w	80079c8 <_svfiprintf_r+0x28>
 8007b70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b72:	b01d      	add	sp, #116	; 0x74
 8007b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b78:	ab03      	add	r3, sp, #12
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	462a      	mov	r2, r5
 8007b7e:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <_svfiprintf_r+0x1f8>)
 8007b80:	a904      	add	r1, sp, #16
 8007b82:	4638      	mov	r0, r7
 8007b84:	f7fe fa80 	bl	8006088 <_printf_i>
 8007b88:	e7eb      	b.n	8007b62 <_svfiprintf_r+0x1c2>
 8007b8a:	bf00      	nop
 8007b8c:	0800a1ec 	.word	0x0800a1ec
 8007b90:	0800a1f6 	.word	0x0800a1f6
 8007b94:	08005b41 	.word	0x08005b41
 8007b98:	080078e9 	.word	0x080078e9
 8007b9c:	0800a1f2 	.word	0x0800a1f2

08007ba0 <_sungetc_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	1c4b      	adds	r3, r1, #1
 8007ba4:	4614      	mov	r4, r2
 8007ba6:	d103      	bne.n	8007bb0 <_sungetc_r+0x10>
 8007ba8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007bac:	4628      	mov	r0, r5
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	8993      	ldrh	r3, [r2, #12]
 8007bb2:	f023 0320 	bic.w	r3, r3, #32
 8007bb6:	8193      	strh	r3, [r2, #12]
 8007bb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bba:	6852      	ldr	r2, [r2, #4]
 8007bbc:	b2cd      	uxtb	r5, r1
 8007bbe:	b18b      	cbz	r3, 8007be4 <_sungetc_r+0x44>
 8007bc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	dd08      	ble.n	8007bd8 <_sungetc_r+0x38>
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	1e5a      	subs	r2, r3, #1
 8007bca:	6022      	str	r2, [r4, #0]
 8007bcc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007bd0:	6863      	ldr	r3, [r4, #4]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	6063      	str	r3, [r4, #4]
 8007bd6:	e7e9      	b.n	8007bac <_sungetc_r+0xc>
 8007bd8:	4621      	mov	r1, r4
 8007bda:	f000 fc47 	bl	800846c <__submore>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d0f1      	beq.n	8007bc6 <_sungetc_r+0x26>
 8007be2:	e7e1      	b.n	8007ba8 <_sungetc_r+0x8>
 8007be4:	6921      	ldr	r1, [r4, #16]
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	b151      	cbz	r1, 8007c00 <_sungetc_r+0x60>
 8007bea:	4299      	cmp	r1, r3
 8007bec:	d208      	bcs.n	8007c00 <_sungetc_r+0x60>
 8007bee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007bf2:	42a9      	cmp	r1, r5
 8007bf4:	d104      	bne.n	8007c00 <_sungetc_r+0x60>
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	3201      	adds	r2, #1
 8007bfa:	6023      	str	r3, [r4, #0]
 8007bfc:	6062      	str	r2, [r4, #4]
 8007bfe:	e7d5      	b.n	8007bac <_sungetc_r+0xc>
 8007c00:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c08:	6363      	str	r3, [r4, #52]	; 0x34
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	63a3      	str	r3, [r4, #56]	; 0x38
 8007c0e:	4623      	mov	r3, r4
 8007c10:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	2301      	movs	r3, #1
 8007c18:	e7dc      	b.n	8007bd4 <_sungetc_r+0x34>

08007c1a <__ssrefill_r>:
 8007c1a:	b510      	push	{r4, lr}
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007c20:	b169      	cbz	r1, 8007c3e <__ssrefill_r+0x24>
 8007c22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c26:	4299      	cmp	r1, r3
 8007c28:	d001      	beq.n	8007c2e <__ssrefill_r+0x14>
 8007c2a:	f7fd fe09 	bl	8005840 <_free_r>
 8007c2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c30:	6063      	str	r3, [r4, #4]
 8007c32:	2000      	movs	r0, #0
 8007c34:	6360      	str	r0, [r4, #52]	; 0x34
 8007c36:	b113      	cbz	r3, 8007c3e <__ssrefill_r+0x24>
 8007c38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007c3a:	6023      	str	r3, [r4, #0]
 8007c3c:	bd10      	pop	{r4, pc}
 8007c3e:	6923      	ldr	r3, [r4, #16]
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	2300      	movs	r3, #0
 8007c44:	6063      	str	r3, [r4, #4]
 8007c46:	89a3      	ldrh	r3, [r4, #12]
 8007c48:	f043 0320 	orr.w	r3, r3, #32
 8007c4c:	81a3      	strh	r3, [r4, #12]
 8007c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c52:	e7f3      	b.n	8007c3c <__ssrefill_r+0x22>

08007c54 <__ssvfiscanf_r>:
 8007c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c58:	460c      	mov	r4, r1
 8007c5a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007c5e:	2100      	movs	r1, #0
 8007c60:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007c64:	49a6      	ldr	r1, [pc, #664]	; (8007f00 <__ssvfiscanf_r+0x2ac>)
 8007c66:	91a0      	str	r1, [sp, #640]	; 0x280
 8007c68:	f10d 0804 	add.w	r8, sp, #4
 8007c6c:	49a5      	ldr	r1, [pc, #660]	; (8007f04 <__ssvfiscanf_r+0x2b0>)
 8007c6e:	4fa6      	ldr	r7, [pc, #664]	; (8007f08 <__ssvfiscanf_r+0x2b4>)
 8007c70:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007f0c <__ssvfiscanf_r+0x2b8>
 8007c74:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007c78:	4606      	mov	r6, r0
 8007c7a:	91a1      	str	r1, [sp, #644]	; 0x284
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	7813      	ldrb	r3, [r2, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 815a 	beq.w	8007f3a <__ssvfiscanf_r+0x2e6>
 8007c86:	5dd9      	ldrb	r1, [r3, r7]
 8007c88:	f011 0108 	ands.w	r1, r1, #8
 8007c8c:	f102 0501 	add.w	r5, r2, #1
 8007c90:	d019      	beq.n	8007cc6 <__ssvfiscanf_r+0x72>
 8007c92:	6863      	ldr	r3, [r4, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	dd0f      	ble.n	8007cb8 <__ssvfiscanf_r+0x64>
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	781a      	ldrb	r2, [r3, #0]
 8007c9c:	5cba      	ldrb	r2, [r7, r2]
 8007c9e:	0712      	lsls	r2, r2, #28
 8007ca0:	d401      	bmi.n	8007ca6 <__ssvfiscanf_r+0x52>
 8007ca2:	462a      	mov	r2, r5
 8007ca4:	e7eb      	b.n	8007c7e <__ssvfiscanf_r+0x2a>
 8007ca6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007ca8:	3201      	adds	r2, #1
 8007caa:	9245      	str	r2, [sp, #276]	; 0x114
 8007cac:	6862      	ldr	r2, [r4, #4]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	3a01      	subs	r2, #1
 8007cb2:	6062      	str	r2, [r4, #4]
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	e7ec      	b.n	8007c92 <__ssvfiscanf_r+0x3e>
 8007cb8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007cba:	4621      	mov	r1, r4
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	4798      	blx	r3
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d0e9      	beq.n	8007c98 <__ssvfiscanf_r+0x44>
 8007cc4:	e7ed      	b.n	8007ca2 <__ssvfiscanf_r+0x4e>
 8007cc6:	2b25      	cmp	r3, #37	; 0x25
 8007cc8:	d012      	beq.n	8007cf0 <__ssvfiscanf_r+0x9c>
 8007cca:	469a      	mov	sl, r3
 8007ccc:	6863      	ldr	r3, [r4, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f340 8091 	ble.w	8007df6 <__ssvfiscanf_r+0x1a2>
 8007cd4:	6822      	ldr	r2, [r4, #0]
 8007cd6:	7813      	ldrb	r3, [r2, #0]
 8007cd8:	4553      	cmp	r3, sl
 8007cda:	f040 812e 	bne.w	8007f3a <__ssvfiscanf_r+0x2e6>
 8007cde:	6863      	ldr	r3, [r4, #4]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	6063      	str	r3, [r4, #4]
 8007ce4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007ce6:	3201      	adds	r2, #1
 8007ce8:	3301      	adds	r3, #1
 8007cea:	6022      	str	r2, [r4, #0]
 8007cec:	9345      	str	r3, [sp, #276]	; 0x114
 8007cee:	e7d8      	b.n	8007ca2 <__ssvfiscanf_r+0x4e>
 8007cf0:	9141      	str	r1, [sp, #260]	; 0x104
 8007cf2:	9143      	str	r1, [sp, #268]	; 0x10c
 8007cf4:	7853      	ldrb	r3, [r2, #1]
 8007cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8007cf8:	bf02      	ittt	eq
 8007cfa:	2310      	moveq	r3, #16
 8007cfc:	1c95      	addeq	r5, r2, #2
 8007cfe:	9341      	streq	r3, [sp, #260]	; 0x104
 8007d00:	220a      	movs	r2, #10
 8007d02:	46aa      	mov	sl, r5
 8007d04:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007d08:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007d0c:	2b09      	cmp	r3, #9
 8007d0e:	d91d      	bls.n	8007d4c <__ssvfiscanf_r+0xf8>
 8007d10:	487e      	ldr	r0, [pc, #504]	; (8007f0c <__ssvfiscanf_r+0x2b8>)
 8007d12:	2203      	movs	r2, #3
 8007d14:	f7f8 fa7c 	bl	8000210 <memchr>
 8007d18:	b140      	cbz	r0, 8007d2c <__ssvfiscanf_r+0xd8>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	eba0 0009 	sub.w	r0, r0, r9
 8007d20:	fa03 f000 	lsl.w	r0, r3, r0
 8007d24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007d26:	4318      	orrs	r0, r3
 8007d28:	9041      	str	r0, [sp, #260]	; 0x104
 8007d2a:	4655      	mov	r5, sl
 8007d2c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d30:	2b78      	cmp	r3, #120	; 0x78
 8007d32:	d806      	bhi.n	8007d42 <__ssvfiscanf_r+0xee>
 8007d34:	2b57      	cmp	r3, #87	; 0x57
 8007d36:	d810      	bhi.n	8007d5a <__ssvfiscanf_r+0x106>
 8007d38:	2b25      	cmp	r3, #37	; 0x25
 8007d3a:	d0c6      	beq.n	8007cca <__ssvfiscanf_r+0x76>
 8007d3c:	d856      	bhi.n	8007dec <__ssvfiscanf_r+0x198>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d064      	beq.n	8007e0c <__ssvfiscanf_r+0x1b8>
 8007d42:	2303      	movs	r3, #3
 8007d44:	9347      	str	r3, [sp, #284]	; 0x11c
 8007d46:	230a      	movs	r3, #10
 8007d48:	9342      	str	r3, [sp, #264]	; 0x108
 8007d4a:	e071      	b.n	8007e30 <__ssvfiscanf_r+0x1dc>
 8007d4c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007d4e:	fb02 1103 	mla	r1, r2, r3, r1
 8007d52:	3930      	subs	r1, #48	; 0x30
 8007d54:	9143      	str	r1, [sp, #268]	; 0x10c
 8007d56:	4655      	mov	r5, sl
 8007d58:	e7d3      	b.n	8007d02 <__ssvfiscanf_r+0xae>
 8007d5a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007d5e:	2a20      	cmp	r2, #32
 8007d60:	d8ef      	bhi.n	8007d42 <__ssvfiscanf_r+0xee>
 8007d62:	a101      	add	r1, pc, #4	; (adr r1, 8007d68 <__ssvfiscanf_r+0x114>)
 8007d64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d68:	08007e1b 	.word	0x08007e1b
 8007d6c:	08007d43 	.word	0x08007d43
 8007d70:	08007d43 	.word	0x08007d43
 8007d74:	08007e79 	.word	0x08007e79
 8007d78:	08007d43 	.word	0x08007d43
 8007d7c:	08007d43 	.word	0x08007d43
 8007d80:	08007d43 	.word	0x08007d43
 8007d84:	08007d43 	.word	0x08007d43
 8007d88:	08007d43 	.word	0x08007d43
 8007d8c:	08007d43 	.word	0x08007d43
 8007d90:	08007d43 	.word	0x08007d43
 8007d94:	08007e8f 	.word	0x08007e8f
 8007d98:	08007e65 	.word	0x08007e65
 8007d9c:	08007df3 	.word	0x08007df3
 8007da0:	08007df3 	.word	0x08007df3
 8007da4:	08007df3 	.word	0x08007df3
 8007da8:	08007d43 	.word	0x08007d43
 8007dac:	08007e69 	.word	0x08007e69
 8007db0:	08007d43 	.word	0x08007d43
 8007db4:	08007d43 	.word	0x08007d43
 8007db8:	08007d43 	.word	0x08007d43
 8007dbc:	08007d43 	.word	0x08007d43
 8007dc0:	08007e9f 	.word	0x08007e9f
 8007dc4:	08007e71 	.word	0x08007e71
 8007dc8:	08007e13 	.word	0x08007e13
 8007dcc:	08007d43 	.word	0x08007d43
 8007dd0:	08007d43 	.word	0x08007d43
 8007dd4:	08007e9b 	.word	0x08007e9b
 8007dd8:	08007d43 	.word	0x08007d43
 8007ddc:	08007e65 	.word	0x08007e65
 8007de0:	08007d43 	.word	0x08007d43
 8007de4:	08007d43 	.word	0x08007d43
 8007de8:	08007e1b 	.word	0x08007e1b
 8007dec:	3b45      	subs	r3, #69	; 0x45
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d8a7      	bhi.n	8007d42 <__ssvfiscanf_r+0xee>
 8007df2:	2305      	movs	r3, #5
 8007df4:	e01b      	b.n	8007e2e <__ssvfiscanf_r+0x1da>
 8007df6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007df8:	4621      	mov	r1, r4
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	4798      	blx	r3
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f43f af68 	beq.w	8007cd4 <__ssvfiscanf_r+0x80>
 8007e04:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007e06:	2800      	cmp	r0, #0
 8007e08:	f040 808d 	bne.w	8007f26 <__ssvfiscanf_r+0x2d2>
 8007e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e10:	e08f      	b.n	8007f32 <__ssvfiscanf_r+0x2de>
 8007e12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007e14:	f042 0220 	orr.w	r2, r2, #32
 8007e18:	9241      	str	r2, [sp, #260]	; 0x104
 8007e1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e20:	9241      	str	r2, [sp, #260]	; 0x104
 8007e22:	2210      	movs	r2, #16
 8007e24:	2b6f      	cmp	r3, #111	; 0x6f
 8007e26:	9242      	str	r2, [sp, #264]	; 0x108
 8007e28:	bf34      	ite	cc
 8007e2a:	2303      	movcc	r3, #3
 8007e2c:	2304      	movcs	r3, #4
 8007e2e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007e30:	6863      	ldr	r3, [r4, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	dd42      	ble.n	8007ebc <__ssvfiscanf_r+0x268>
 8007e36:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007e38:	0659      	lsls	r1, r3, #25
 8007e3a:	d404      	bmi.n	8007e46 <__ssvfiscanf_r+0x1f2>
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	781a      	ldrb	r2, [r3, #0]
 8007e40:	5cba      	ldrb	r2, [r7, r2]
 8007e42:	0712      	lsls	r2, r2, #28
 8007e44:	d441      	bmi.n	8007eca <__ssvfiscanf_r+0x276>
 8007e46:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	dc50      	bgt.n	8007eee <__ssvfiscanf_r+0x29a>
 8007e4c:	466b      	mov	r3, sp
 8007e4e:	4622      	mov	r2, r4
 8007e50:	a941      	add	r1, sp, #260	; 0x104
 8007e52:	4630      	mov	r0, r6
 8007e54:	f000 f876 	bl	8007f44 <_scanf_chars>
 8007e58:	2801      	cmp	r0, #1
 8007e5a:	d06e      	beq.n	8007f3a <__ssvfiscanf_r+0x2e6>
 8007e5c:	2802      	cmp	r0, #2
 8007e5e:	f47f af20 	bne.w	8007ca2 <__ssvfiscanf_r+0x4e>
 8007e62:	e7cf      	b.n	8007e04 <__ssvfiscanf_r+0x1b0>
 8007e64:	220a      	movs	r2, #10
 8007e66:	e7dd      	b.n	8007e24 <__ssvfiscanf_r+0x1d0>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	9342      	str	r3, [sp, #264]	; 0x108
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e7de      	b.n	8007e2e <__ssvfiscanf_r+0x1da>
 8007e70:	2308      	movs	r3, #8
 8007e72:	9342      	str	r3, [sp, #264]	; 0x108
 8007e74:	2304      	movs	r3, #4
 8007e76:	e7da      	b.n	8007e2e <__ssvfiscanf_r+0x1da>
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	f000 f9c6 	bl	800820c <__sccl>
 8007e80:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e86:	9341      	str	r3, [sp, #260]	; 0x104
 8007e88:	4605      	mov	r5, r0
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e7cf      	b.n	8007e2e <__ssvfiscanf_r+0x1da>
 8007e8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e94:	9341      	str	r3, [sp, #260]	; 0x104
 8007e96:	2300      	movs	r3, #0
 8007e98:	e7c9      	b.n	8007e2e <__ssvfiscanf_r+0x1da>
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	e7c7      	b.n	8007e2e <__ssvfiscanf_r+0x1da>
 8007e9e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007ea0:	06c3      	lsls	r3, r0, #27
 8007ea2:	f53f aefe 	bmi.w	8007ca2 <__ssvfiscanf_r+0x4e>
 8007ea6:	9b00      	ldr	r3, [sp, #0]
 8007ea8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007eaa:	1d19      	adds	r1, r3, #4
 8007eac:	9100      	str	r1, [sp, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f010 0f01 	tst.w	r0, #1
 8007eb4:	bf14      	ite	ne
 8007eb6:	801a      	strhne	r2, [r3, #0]
 8007eb8:	601a      	streq	r2, [r3, #0]
 8007eba:	e6f2      	b.n	8007ca2 <__ssvfiscanf_r+0x4e>
 8007ebc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	4798      	blx	r3
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d0b6      	beq.n	8007e36 <__ssvfiscanf_r+0x1e2>
 8007ec8:	e79c      	b.n	8007e04 <__ssvfiscanf_r+0x1b0>
 8007eca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007ecc:	3201      	adds	r2, #1
 8007ece:	9245      	str	r2, [sp, #276]	; 0x114
 8007ed0:	6862      	ldr	r2, [r4, #4]
 8007ed2:	3a01      	subs	r2, #1
 8007ed4:	2a00      	cmp	r2, #0
 8007ed6:	6062      	str	r2, [r4, #4]
 8007ed8:	dd02      	ble.n	8007ee0 <__ssvfiscanf_r+0x28c>
 8007eda:	3301      	adds	r3, #1
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	e7ad      	b.n	8007e3c <__ssvfiscanf_r+0x1e8>
 8007ee0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	4798      	blx	r3
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d0a7      	beq.n	8007e3c <__ssvfiscanf_r+0x1e8>
 8007eec:	e78a      	b.n	8007e04 <__ssvfiscanf_r+0x1b0>
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	dc0e      	bgt.n	8007f10 <__ssvfiscanf_r+0x2bc>
 8007ef2:	466b      	mov	r3, sp
 8007ef4:	4622      	mov	r2, r4
 8007ef6:	a941      	add	r1, sp, #260	; 0x104
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f000 f87d 	bl	8007ff8 <_scanf_i>
 8007efe:	e7ab      	b.n	8007e58 <__ssvfiscanf_r+0x204>
 8007f00:	08007ba1 	.word	0x08007ba1
 8007f04:	08007c1b 	.word	0x08007c1b
 8007f08:	0800a255 	.word	0x0800a255
 8007f0c:	0800a1f2 	.word	0x0800a1f2
 8007f10:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <__ssvfiscanf_r+0x2ec>)
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f43f aec5 	beq.w	8007ca2 <__ssvfiscanf_r+0x4e>
 8007f18:	466b      	mov	r3, sp
 8007f1a:	4622      	mov	r2, r4
 8007f1c:	a941      	add	r1, sp, #260	; 0x104
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f3af 8000 	nop.w
 8007f24:	e798      	b.n	8007e58 <__ssvfiscanf_r+0x204>
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007f2c:	bf18      	it	ne
 8007f2e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007f32:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007f3c:	e7f9      	b.n	8007f32 <__ssvfiscanf_r+0x2de>
 8007f3e:	bf00      	nop
 8007f40:	00000000 	.word	0x00000000

08007f44 <_scanf_chars>:
 8007f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f48:	4615      	mov	r5, r2
 8007f4a:	688a      	ldr	r2, [r1, #8]
 8007f4c:	4680      	mov	r8, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	b932      	cbnz	r2, 8007f60 <_scanf_chars+0x1c>
 8007f52:	698a      	ldr	r2, [r1, #24]
 8007f54:	2a00      	cmp	r2, #0
 8007f56:	bf0c      	ite	eq
 8007f58:	2201      	moveq	r2, #1
 8007f5a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8007f5e:	608a      	str	r2, [r1, #8]
 8007f60:	6822      	ldr	r2, [r4, #0]
 8007f62:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007ff4 <_scanf_chars+0xb0>
 8007f66:	06d1      	lsls	r1, r2, #27
 8007f68:	bf5f      	itttt	pl
 8007f6a:	681a      	ldrpl	r2, [r3, #0]
 8007f6c:	1d11      	addpl	r1, r2, #4
 8007f6e:	6019      	strpl	r1, [r3, #0]
 8007f70:	6816      	ldrpl	r6, [r2, #0]
 8007f72:	2700      	movs	r7, #0
 8007f74:	69a0      	ldr	r0, [r4, #24]
 8007f76:	b188      	cbz	r0, 8007f9c <_scanf_chars+0x58>
 8007f78:	2801      	cmp	r0, #1
 8007f7a:	d107      	bne.n	8007f8c <_scanf_chars+0x48>
 8007f7c:	682a      	ldr	r2, [r5, #0]
 8007f7e:	7811      	ldrb	r1, [r2, #0]
 8007f80:	6962      	ldr	r2, [r4, #20]
 8007f82:	5c52      	ldrb	r2, [r2, r1]
 8007f84:	b952      	cbnz	r2, 8007f9c <_scanf_chars+0x58>
 8007f86:	2f00      	cmp	r7, #0
 8007f88:	d031      	beq.n	8007fee <_scanf_chars+0xaa>
 8007f8a:	e022      	b.n	8007fd2 <_scanf_chars+0x8e>
 8007f8c:	2802      	cmp	r0, #2
 8007f8e:	d120      	bne.n	8007fd2 <_scanf_chars+0x8e>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007f98:	071b      	lsls	r3, r3, #28
 8007f9a:	d41a      	bmi.n	8007fd2 <_scanf_chars+0x8e>
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	06da      	lsls	r2, r3, #27
 8007fa0:	bf5e      	ittt	pl
 8007fa2:	682b      	ldrpl	r3, [r5, #0]
 8007fa4:	781b      	ldrbpl	r3, [r3, #0]
 8007fa6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007faa:	682a      	ldr	r2, [r5, #0]
 8007fac:	686b      	ldr	r3, [r5, #4]
 8007fae:	3201      	adds	r2, #1
 8007fb0:	602a      	str	r2, [r5, #0]
 8007fb2:	68a2      	ldr	r2, [r4, #8]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	3a01      	subs	r2, #1
 8007fb8:	606b      	str	r3, [r5, #4]
 8007fba:	3701      	adds	r7, #1
 8007fbc:	60a2      	str	r2, [r4, #8]
 8007fbe:	b142      	cbz	r2, 8007fd2 <_scanf_chars+0x8e>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	dcd7      	bgt.n	8007f74 <_scanf_chars+0x30>
 8007fc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007fc8:	4629      	mov	r1, r5
 8007fca:	4640      	mov	r0, r8
 8007fcc:	4798      	blx	r3
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d0d0      	beq.n	8007f74 <_scanf_chars+0x30>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	f013 0310 	ands.w	r3, r3, #16
 8007fd8:	d105      	bne.n	8007fe6 <_scanf_chars+0xa2>
 8007fda:	68e2      	ldr	r2, [r4, #12]
 8007fdc:	3201      	adds	r2, #1
 8007fde:	60e2      	str	r2, [r4, #12]
 8007fe0:	69a2      	ldr	r2, [r4, #24]
 8007fe2:	b102      	cbz	r2, 8007fe6 <_scanf_chars+0xa2>
 8007fe4:	7033      	strb	r3, [r6, #0]
 8007fe6:	6923      	ldr	r3, [r4, #16]
 8007fe8:	443b      	add	r3, r7
 8007fea:	6123      	str	r3, [r4, #16]
 8007fec:	2000      	movs	r0, #0
 8007fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ff2:	bf00      	nop
 8007ff4:	0800a255 	.word	0x0800a255

08007ff8 <_scanf_i>:
 8007ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffc:	4698      	mov	r8, r3
 8007ffe:	4b76      	ldr	r3, [pc, #472]	; (80081d8 <_scanf_i+0x1e0>)
 8008000:	460c      	mov	r4, r1
 8008002:	4682      	mov	sl, r0
 8008004:	4616      	mov	r6, r2
 8008006:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800800a:	b087      	sub	sp, #28
 800800c:	ab03      	add	r3, sp, #12
 800800e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008012:	4b72      	ldr	r3, [pc, #456]	; (80081dc <_scanf_i+0x1e4>)
 8008014:	69a1      	ldr	r1, [r4, #24]
 8008016:	4a72      	ldr	r2, [pc, #456]	; (80081e0 <_scanf_i+0x1e8>)
 8008018:	2903      	cmp	r1, #3
 800801a:	bf18      	it	ne
 800801c:	461a      	movne	r2, r3
 800801e:	68a3      	ldr	r3, [r4, #8]
 8008020:	9201      	str	r2, [sp, #4]
 8008022:	1e5a      	subs	r2, r3, #1
 8008024:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008028:	bf88      	it	hi
 800802a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800802e:	4627      	mov	r7, r4
 8008030:	bf82      	ittt	hi
 8008032:	eb03 0905 	addhi.w	r9, r3, r5
 8008036:	f240 135d 	movwhi	r3, #349	; 0x15d
 800803a:	60a3      	strhi	r3, [r4, #8]
 800803c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008040:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008044:	bf98      	it	ls
 8008046:	f04f 0900 	movls.w	r9, #0
 800804a:	6023      	str	r3, [r4, #0]
 800804c:	463d      	mov	r5, r7
 800804e:	f04f 0b00 	mov.w	fp, #0
 8008052:	6831      	ldr	r1, [r6, #0]
 8008054:	ab03      	add	r3, sp, #12
 8008056:	7809      	ldrb	r1, [r1, #0]
 8008058:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800805c:	2202      	movs	r2, #2
 800805e:	f7f8 f8d7 	bl	8000210 <memchr>
 8008062:	b328      	cbz	r0, 80080b0 <_scanf_i+0xb8>
 8008064:	f1bb 0f01 	cmp.w	fp, #1
 8008068:	d159      	bne.n	800811e <_scanf_i+0x126>
 800806a:	6862      	ldr	r2, [r4, #4]
 800806c:	b92a      	cbnz	r2, 800807a <_scanf_i+0x82>
 800806e:	6822      	ldr	r2, [r4, #0]
 8008070:	2308      	movs	r3, #8
 8008072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008076:	6063      	str	r3, [r4, #4]
 8008078:	6022      	str	r2, [r4, #0]
 800807a:	6822      	ldr	r2, [r4, #0]
 800807c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008080:	6022      	str	r2, [r4, #0]
 8008082:	68a2      	ldr	r2, [r4, #8]
 8008084:	1e51      	subs	r1, r2, #1
 8008086:	60a1      	str	r1, [r4, #8]
 8008088:	b192      	cbz	r2, 80080b0 <_scanf_i+0xb8>
 800808a:	6832      	ldr	r2, [r6, #0]
 800808c:	1c51      	adds	r1, r2, #1
 800808e:	6031      	str	r1, [r6, #0]
 8008090:	7812      	ldrb	r2, [r2, #0]
 8008092:	f805 2b01 	strb.w	r2, [r5], #1
 8008096:	6872      	ldr	r2, [r6, #4]
 8008098:	3a01      	subs	r2, #1
 800809a:	2a00      	cmp	r2, #0
 800809c:	6072      	str	r2, [r6, #4]
 800809e:	dc07      	bgt.n	80080b0 <_scanf_i+0xb8>
 80080a0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80080a4:	4631      	mov	r1, r6
 80080a6:	4650      	mov	r0, sl
 80080a8:	4790      	blx	r2
 80080aa:	2800      	cmp	r0, #0
 80080ac:	f040 8085 	bne.w	80081ba <_scanf_i+0x1c2>
 80080b0:	f10b 0b01 	add.w	fp, fp, #1
 80080b4:	f1bb 0f03 	cmp.w	fp, #3
 80080b8:	d1cb      	bne.n	8008052 <_scanf_i+0x5a>
 80080ba:	6863      	ldr	r3, [r4, #4]
 80080bc:	b90b      	cbnz	r3, 80080c2 <_scanf_i+0xca>
 80080be:	230a      	movs	r3, #10
 80080c0:	6063      	str	r3, [r4, #4]
 80080c2:	6863      	ldr	r3, [r4, #4]
 80080c4:	4947      	ldr	r1, [pc, #284]	; (80081e4 <_scanf_i+0x1ec>)
 80080c6:	6960      	ldr	r0, [r4, #20]
 80080c8:	1ac9      	subs	r1, r1, r3
 80080ca:	f000 f89f 	bl	800820c <__sccl>
 80080ce:	f04f 0b00 	mov.w	fp, #0
 80080d2:	68a3      	ldr	r3, [r4, #8]
 80080d4:	6822      	ldr	r2, [r4, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d03d      	beq.n	8008156 <_scanf_i+0x15e>
 80080da:	6831      	ldr	r1, [r6, #0]
 80080dc:	6960      	ldr	r0, [r4, #20]
 80080de:	f891 c000 	ldrb.w	ip, [r1]
 80080e2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80080e6:	2800      	cmp	r0, #0
 80080e8:	d035      	beq.n	8008156 <_scanf_i+0x15e>
 80080ea:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80080ee:	d124      	bne.n	800813a <_scanf_i+0x142>
 80080f0:	0510      	lsls	r0, r2, #20
 80080f2:	d522      	bpl.n	800813a <_scanf_i+0x142>
 80080f4:	f10b 0b01 	add.w	fp, fp, #1
 80080f8:	f1b9 0f00 	cmp.w	r9, #0
 80080fc:	d003      	beq.n	8008106 <_scanf_i+0x10e>
 80080fe:	3301      	adds	r3, #1
 8008100:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008104:	60a3      	str	r3, [r4, #8]
 8008106:	6873      	ldr	r3, [r6, #4]
 8008108:	3b01      	subs	r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	6073      	str	r3, [r6, #4]
 800810e:	dd1b      	ble.n	8008148 <_scanf_i+0x150>
 8008110:	6833      	ldr	r3, [r6, #0]
 8008112:	3301      	adds	r3, #1
 8008114:	6033      	str	r3, [r6, #0]
 8008116:	68a3      	ldr	r3, [r4, #8]
 8008118:	3b01      	subs	r3, #1
 800811a:	60a3      	str	r3, [r4, #8]
 800811c:	e7d9      	b.n	80080d2 <_scanf_i+0xda>
 800811e:	f1bb 0f02 	cmp.w	fp, #2
 8008122:	d1ae      	bne.n	8008082 <_scanf_i+0x8a>
 8008124:	6822      	ldr	r2, [r4, #0]
 8008126:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800812a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800812e:	d1bf      	bne.n	80080b0 <_scanf_i+0xb8>
 8008130:	2310      	movs	r3, #16
 8008132:	6063      	str	r3, [r4, #4]
 8008134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008138:	e7a2      	b.n	8008080 <_scanf_i+0x88>
 800813a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800813e:	6022      	str	r2, [r4, #0]
 8008140:	780b      	ldrb	r3, [r1, #0]
 8008142:	f805 3b01 	strb.w	r3, [r5], #1
 8008146:	e7de      	b.n	8008106 <_scanf_i+0x10e>
 8008148:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800814c:	4631      	mov	r1, r6
 800814e:	4650      	mov	r0, sl
 8008150:	4798      	blx	r3
 8008152:	2800      	cmp	r0, #0
 8008154:	d0df      	beq.n	8008116 <_scanf_i+0x11e>
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	05db      	lsls	r3, r3, #23
 800815a:	d50d      	bpl.n	8008178 <_scanf_i+0x180>
 800815c:	42bd      	cmp	r5, r7
 800815e:	d909      	bls.n	8008174 <_scanf_i+0x17c>
 8008160:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008164:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008168:	4632      	mov	r2, r6
 800816a:	4650      	mov	r0, sl
 800816c:	4798      	blx	r3
 800816e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8008172:	464d      	mov	r5, r9
 8008174:	42bd      	cmp	r5, r7
 8008176:	d02d      	beq.n	80081d4 <_scanf_i+0x1dc>
 8008178:	6822      	ldr	r2, [r4, #0]
 800817a:	f012 0210 	ands.w	r2, r2, #16
 800817e:	d113      	bne.n	80081a8 <_scanf_i+0x1b0>
 8008180:	702a      	strb	r2, [r5, #0]
 8008182:	6863      	ldr	r3, [r4, #4]
 8008184:	9e01      	ldr	r6, [sp, #4]
 8008186:	4639      	mov	r1, r7
 8008188:	4650      	mov	r0, sl
 800818a:	47b0      	blx	r6
 800818c:	6821      	ldr	r1, [r4, #0]
 800818e:	f8d8 3000 	ldr.w	r3, [r8]
 8008192:	f011 0f20 	tst.w	r1, #32
 8008196:	d013      	beq.n	80081c0 <_scanf_i+0x1c8>
 8008198:	1d1a      	adds	r2, r3, #4
 800819a:	f8c8 2000 	str.w	r2, [r8]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6018      	str	r0, [r3, #0]
 80081a2:	68e3      	ldr	r3, [r4, #12]
 80081a4:	3301      	adds	r3, #1
 80081a6:	60e3      	str	r3, [r4, #12]
 80081a8:	1bed      	subs	r5, r5, r7
 80081aa:	44ab      	add	fp, r5
 80081ac:	6925      	ldr	r5, [r4, #16]
 80081ae:	445d      	add	r5, fp
 80081b0:	6125      	str	r5, [r4, #16]
 80081b2:	2000      	movs	r0, #0
 80081b4:	b007      	add	sp, #28
 80081b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ba:	f04f 0b00 	mov.w	fp, #0
 80081be:	e7ca      	b.n	8008156 <_scanf_i+0x15e>
 80081c0:	1d1a      	adds	r2, r3, #4
 80081c2:	f8c8 2000 	str.w	r2, [r8]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f011 0f01 	tst.w	r1, #1
 80081cc:	bf14      	ite	ne
 80081ce:	8018      	strhne	r0, [r3, #0]
 80081d0:	6018      	streq	r0, [r3, #0]
 80081d2:	e7e6      	b.n	80081a2 <_scanf_i+0x1aa>
 80081d4:	2001      	movs	r0, #1
 80081d6:	e7ed      	b.n	80081b4 <_scanf_i+0x1bc>
 80081d8:	08009fbc 	.word	0x08009fbc
 80081dc:	08008469 	.word	0x08008469
 80081e0:	08008381 	.word	0x08008381
 80081e4:	0800a216 	.word	0x0800a216

080081e8 <_read_r>:
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	4d07      	ldr	r5, [pc, #28]	; (8008208 <_read_r+0x20>)
 80081ec:	4604      	mov	r4, r0
 80081ee:	4608      	mov	r0, r1
 80081f0:	4611      	mov	r1, r2
 80081f2:	2200      	movs	r2, #0
 80081f4:	602a      	str	r2, [r5, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	f7f9 fcf8 	bl	8001bec <_read>
 80081fc:	1c43      	adds	r3, r0, #1
 80081fe:	d102      	bne.n	8008206 <_read_r+0x1e>
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	b103      	cbz	r3, 8008206 <_read_r+0x1e>
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	bd38      	pop	{r3, r4, r5, pc}
 8008208:	200005b4 	.word	0x200005b4

0800820c <__sccl>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	780b      	ldrb	r3, [r1, #0]
 8008210:	4604      	mov	r4, r0
 8008212:	2b5e      	cmp	r3, #94	; 0x5e
 8008214:	bf0b      	itete	eq
 8008216:	784b      	ldrbeq	r3, [r1, #1]
 8008218:	1c48      	addne	r0, r1, #1
 800821a:	1c88      	addeq	r0, r1, #2
 800821c:	2200      	movne	r2, #0
 800821e:	bf08      	it	eq
 8008220:	2201      	moveq	r2, #1
 8008222:	1e61      	subs	r1, r4, #1
 8008224:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008228:	f801 2f01 	strb.w	r2, [r1, #1]!
 800822c:	42a9      	cmp	r1, r5
 800822e:	d1fb      	bne.n	8008228 <__sccl+0x1c>
 8008230:	b90b      	cbnz	r3, 8008236 <__sccl+0x2a>
 8008232:	3801      	subs	r0, #1
 8008234:	bd70      	pop	{r4, r5, r6, pc}
 8008236:	f082 0201 	eor.w	r2, r2, #1
 800823a:	54e2      	strb	r2, [r4, r3]
 800823c:	4605      	mov	r5, r0
 800823e:	4628      	mov	r0, r5
 8008240:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008244:	292d      	cmp	r1, #45	; 0x2d
 8008246:	d006      	beq.n	8008256 <__sccl+0x4a>
 8008248:	295d      	cmp	r1, #93	; 0x5d
 800824a:	d0f3      	beq.n	8008234 <__sccl+0x28>
 800824c:	b909      	cbnz	r1, 8008252 <__sccl+0x46>
 800824e:	4628      	mov	r0, r5
 8008250:	e7f0      	b.n	8008234 <__sccl+0x28>
 8008252:	460b      	mov	r3, r1
 8008254:	e7f1      	b.n	800823a <__sccl+0x2e>
 8008256:	786e      	ldrb	r6, [r5, #1]
 8008258:	2e5d      	cmp	r6, #93	; 0x5d
 800825a:	d0fa      	beq.n	8008252 <__sccl+0x46>
 800825c:	42b3      	cmp	r3, r6
 800825e:	dcf8      	bgt.n	8008252 <__sccl+0x46>
 8008260:	3502      	adds	r5, #2
 8008262:	4619      	mov	r1, r3
 8008264:	3101      	adds	r1, #1
 8008266:	428e      	cmp	r6, r1
 8008268:	5462      	strb	r2, [r4, r1]
 800826a:	dcfb      	bgt.n	8008264 <__sccl+0x58>
 800826c:	1af1      	subs	r1, r6, r3
 800826e:	3901      	subs	r1, #1
 8008270:	1c58      	adds	r0, r3, #1
 8008272:	42b3      	cmp	r3, r6
 8008274:	bfa8      	it	ge
 8008276:	2100      	movge	r1, #0
 8008278:	1843      	adds	r3, r0, r1
 800827a:	e7e0      	b.n	800823e <__sccl+0x32>

0800827c <_strtol_l.constprop.0>:
 800827c:	2b01      	cmp	r3, #1
 800827e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008282:	d001      	beq.n	8008288 <_strtol_l.constprop.0+0xc>
 8008284:	2b24      	cmp	r3, #36	; 0x24
 8008286:	d906      	bls.n	8008296 <_strtol_l.constprop.0+0x1a>
 8008288:	f7fd faa0 	bl	80057cc <__errno>
 800828c:	2316      	movs	r3, #22
 800828e:	6003      	str	r3, [r0, #0]
 8008290:	2000      	movs	r0, #0
 8008292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008296:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800837c <_strtol_l.constprop.0+0x100>
 800829a:	460d      	mov	r5, r1
 800829c:	462e      	mov	r6, r5
 800829e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082a2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80082a6:	f017 0708 	ands.w	r7, r7, #8
 80082aa:	d1f7      	bne.n	800829c <_strtol_l.constprop.0+0x20>
 80082ac:	2c2d      	cmp	r4, #45	; 0x2d
 80082ae:	d132      	bne.n	8008316 <_strtol_l.constprop.0+0x9a>
 80082b0:	782c      	ldrb	r4, [r5, #0]
 80082b2:	2701      	movs	r7, #1
 80082b4:	1cb5      	adds	r5, r6, #2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d05b      	beq.n	8008372 <_strtol_l.constprop.0+0xf6>
 80082ba:	2b10      	cmp	r3, #16
 80082bc:	d109      	bne.n	80082d2 <_strtol_l.constprop.0+0x56>
 80082be:	2c30      	cmp	r4, #48	; 0x30
 80082c0:	d107      	bne.n	80082d2 <_strtol_l.constprop.0+0x56>
 80082c2:	782c      	ldrb	r4, [r5, #0]
 80082c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80082c8:	2c58      	cmp	r4, #88	; 0x58
 80082ca:	d14d      	bne.n	8008368 <_strtol_l.constprop.0+0xec>
 80082cc:	786c      	ldrb	r4, [r5, #1]
 80082ce:	2310      	movs	r3, #16
 80082d0:	3502      	adds	r5, #2
 80082d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80082d6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80082da:	f04f 0c00 	mov.w	ip, #0
 80082de:	fbb8 f9f3 	udiv	r9, r8, r3
 80082e2:	4666      	mov	r6, ip
 80082e4:	fb03 8a19 	mls	sl, r3, r9, r8
 80082e8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80082ec:	f1be 0f09 	cmp.w	lr, #9
 80082f0:	d816      	bhi.n	8008320 <_strtol_l.constprop.0+0xa4>
 80082f2:	4674      	mov	r4, lr
 80082f4:	42a3      	cmp	r3, r4
 80082f6:	dd24      	ble.n	8008342 <_strtol_l.constprop.0+0xc6>
 80082f8:	f1bc 0f00 	cmp.w	ip, #0
 80082fc:	db1e      	blt.n	800833c <_strtol_l.constprop.0+0xc0>
 80082fe:	45b1      	cmp	r9, r6
 8008300:	d31c      	bcc.n	800833c <_strtol_l.constprop.0+0xc0>
 8008302:	d101      	bne.n	8008308 <_strtol_l.constprop.0+0x8c>
 8008304:	45a2      	cmp	sl, r4
 8008306:	db19      	blt.n	800833c <_strtol_l.constprop.0+0xc0>
 8008308:	fb06 4603 	mla	r6, r6, r3, r4
 800830c:	f04f 0c01 	mov.w	ip, #1
 8008310:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008314:	e7e8      	b.n	80082e8 <_strtol_l.constprop.0+0x6c>
 8008316:	2c2b      	cmp	r4, #43	; 0x2b
 8008318:	bf04      	itt	eq
 800831a:	782c      	ldrbeq	r4, [r5, #0]
 800831c:	1cb5      	addeq	r5, r6, #2
 800831e:	e7ca      	b.n	80082b6 <_strtol_l.constprop.0+0x3a>
 8008320:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008324:	f1be 0f19 	cmp.w	lr, #25
 8008328:	d801      	bhi.n	800832e <_strtol_l.constprop.0+0xb2>
 800832a:	3c37      	subs	r4, #55	; 0x37
 800832c:	e7e2      	b.n	80082f4 <_strtol_l.constprop.0+0x78>
 800832e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008332:	f1be 0f19 	cmp.w	lr, #25
 8008336:	d804      	bhi.n	8008342 <_strtol_l.constprop.0+0xc6>
 8008338:	3c57      	subs	r4, #87	; 0x57
 800833a:	e7db      	b.n	80082f4 <_strtol_l.constprop.0+0x78>
 800833c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008340:	e7e6      	b.n	8008310 <_strtol_l.constprop.0+0x94>
 8008342:	f1bc 0f00 	cmp.w	ip, #0
 8008346:	da05      	bge.n	8008354 <_strtol_l.constprop.0+0xd8>
 8008348:	2322      	movs	r3, #34	; 0x22
 800834a:	6003      	str	r3, [r0, #0]
 800834c:	4646      	mov	r6, r8
 800834e:	b942      	cbnz	r2, 8008362 <_strtol_l.constprop.0+0xe6>
 8008350:	4630      	mov	r0, r6
 8008352:	e79e      	b.n	8008292 <_strtol_l.constprop.0+0x16>
 8008354:	b107      	cbz	r7, 8008358 <_strtol_l.constprop.0+0xdc>
 8008356:	4276      	negs	r6, r6
 8008358:	2a00      	cmp	r2, #0
 800835a:	d0f9      	beq.n	8008350 <_strtol_l.constprop.0+0xd4>
 800835c:	f1bc 0f00 	cmp.w	ip, #0
 8008360:	d000      	beq.n	8008364 <_strtol_l.constprop.0+0xe8>
 8008362:	1e69      	subs	r1, r5, #1
 8008364:	6011      	str	r1, [r2, #0]
 8008366:	e7f3      	b.n	8008350 <_strtol_l.constprop.0+0xd4>
 8008368:	2430      	movs	r4, #48	; 0x30
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1b1      	bne.n	80082d2 <_strtol_l.constprop.0+0x56>
 800836e:	2308      	movs	r3, #8
 8008370:	e7af      	b.n	80082d2 <_strtol_l.constprop.0+0x56>
 8008372:	2c30      	cmp	r4, #48	; 0x30
 8008374:	d0a5      	beq.n	80082c2 <_strtol_l.constprop.0+0x46>
 8008376:	230a      	movs	r3, #10
 8008378:	e7ab      	b.n	80082d2 <_strtol_l.constprop.0+0x56>
 800837a:	bf00      	nop
 800837c:	0800a255 	.word	0x0800a255

08008380 <_strtol_r>:
 8008380:	f7ff bf7c 	b.w	800827c <_strtol_l.constprop.0>

08008384 <_strtoul_l.constprop.0>:
 8008384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008388:	4f36      	ldr	r7, [pc, #216]	; (8008464 <_strtoul_l.constprop.0+0xe0>)
 800838a:	4686      	mov	lr, r0
 800838c:	460d      	mov	r5, r1
 800838e:	4628      	mov	r0, r5
 8008390:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008394:	5de6      	ldrb	r6, [r4, r7]
 8008396:	f016 0608 	ands.w	r6, r6, #8
 800839a:	d1f8      	bne.n	800838e <_strtoul_l.constprop.0+0xa>
 800839c:	2c2d      	cmp	r4, #45	; 0x2d
 800839e:	d12f      	bne.n	8008400 <_strtoul_l.constprop.0+0x7c>
 80083a0:	782c      	ldrb	r4, [r5, #0]
 80083a2:	2601      	movs	r6, #1
 80083a4:	1c85      	adds	r5, r0, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d057      	beq.n	800845a <_strtoul_l.constprop.0+0xd6>
 80083aa:	2b10      	cmp	r3, #16
 80083ac:	d109      	bne.n	80083c2 <_strtoul_l.constprop.0+0x3e>
 80083ae:	2c30      	cmp	r4, #48	; 0x30
 80083b0:	d107      	bne.n	80083c2 <_strtoul_l.constprop.0+0x3e>
 80083b2:	7828      	ldrb	r0, [r5, #0]
 80083b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80083b8:	2858      	cmp	r0, #88	; 0x58
 80083ba:	d149      	bne.n	8008450 <_strtoul_l.constprop.0+0xcc>
 80083bc:	786c      	ldrb	r4, [r5, #1]
 80083be:	2310      	movs	r3, #16
 80083c0:	3502      	adds	r5, #2
 80083c2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80083c6:	2700      	movs	r7, #0
 80083c8:	fbb8 f8f3 	udiv	r8, r8, r3
 80083cc:	fb03 f908 	mul.w	r9, r3, r8
 80083d0:	ea6f 0909 	mvn.w	r9, r9
 80083d4:	4638      	mov	r0, r7
 80083d6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80083da:	f1bc 0f09 	cmp.w	ip, #9
 80083de:	d814      	bhi.n	800840a <_strtoul_l.constprop.0+0x86>
 80083e0:	4664      	mov	r4, ip
 80083e2:	42a3      	cmp	r3, r4
 80083e4:	dd22      	ble.n	800842c <_strtoul_l.constprop.0+0xa8>
 80083e6:	2f00      	cmp	r7, #0
 80083e8:	db1d      	blt.n	8008426 <_strtoul_l.constprop.0+0xa2>
 80083ea:	4580      	cmp	r8, r0
 80083ec:	d31b      	bcc.n	8008426 <_strtoul_l.constprop.0+0xa2>
 80083ee:	d101      	bne.n	80083f4 <_strtoul_l.constprop.0+0x70>
 80083f0:	45a1      	cmp	r9, r4
 80083f2:	db18      	blt.n	8008426 <_strtoul_l.constprop.0+0xa2>
 80083f4:	fb00 4003 	mla	r0, r0, r3, r4
 80083f8:	2701      	movs	r7, #1
 80083fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083fe:	e7ea      	b.n	80083d6 <_strtoul_l.constprop.0+0x52>
 8008400:	2c2b      	cmp	r4, #43	; 0x2b
 8008402:	bf04      	itt	eq
 8008404:	782c      	ldrbeq	r4, [r5, #0]
 8008406:	1c85      	addeq	r5, r0, #2
 8008408:	e7cd      	b.n	80083a6 <_strtoul_l.constprop.0+0x22>
 800840a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800840e:	f1bc 0f19 	cmp.w	ip, #25
 8008412:	d801      	bhi.n	8008418 <_strtoul_l.constprop.0+0x94>
 8008414:	3c37      	subs	r4, #55	; 0x37
 8008416:	e7e4      	b.n	80083e2 <_strtoul_l.constprop.0+0x5e>
 8008418:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800841c:	f1bc 0f19 	cmp.w	ip, #25
 8008420:	d804      	bhi.n	800842c <_strtoul_l.constprop.0+0xa8>
 8008422:	3c57      	subs	r4, #87	; 0x57
 8008424:	e7dd      	b.n	80083e2 <_strtoul_l.constprop.0+0x5e>
 8008426:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800842a:	e7e6      	b.n	80083fa <_strtoul_l.constprop.0+0x76>
 800842c:	2f00      	cmp	r7, #0
 800842e:	da07      	bge.n	8008440 <_strtoul_l.constprop.0+0xbc>
 8008430:	2322      	movs	r3, #34	; 0x22
 8008432:	f8ce 3000 	str.w	r3, [lr]
 8008436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800843a:	b932      	cbnz	r2, 800844a <_strtoul_l.constprop.0+0xc6>
 800843c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008440:	b106      	cbz	r6, 8008444 <_strtoul_l.constprop.0+0xc0>
 8008442:	4240      	negs	r0, r0
 8008444:	2a00      	cmp	r2, #0
 8008446:	d0f9      	beq.n	800843c <_strtoul_l.constprop.0+0xb8>
 8008448:	b107      	cbz	r7, 800844c <_strtoul_l.constprop.0+0xc8>
 800844a:	1e69      	subs	r1, r5, #1
 800844c:	6011      	str	r1, [r2, #0]
 800844e:	e7f5      	b.n	800843c <_strtoul_l.constprop.0+0xb8>
 8008450:	2430      	movs	r4, #48	; 0x30
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1b5      	bne.n	80083c2 <_strtoul_l.constprop.0+0x3e>
 8008456:	2308      	movs	r3, #8
 8008458:	e7b3      	b.n	80083c2 <_strtoul_l.constprop.0+0x3e>
 800845a:	2c30      	cmp	r4, #48	; 0x30
 800845c:	d0a9      	beq.n	80083b2 <_strtoul_l.constprop.0+0x2e>
 800845e:	230a      	movs	r3, #10
 8008460:	e7af      	b.n	80083c2 <_strtoul_l.constprop.0+0x3e>
 8008462:	bf00      	nop
 8008464:	0800a255 	.word	0x0800a255

08008468 <_strtoul_r>:
 8008468:	f7ff bf8c 	b.w	8008384 <_strtoul_l.constprop.0>

0800846c <__submore>:
 800846c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008470:	460c      	mov	r4, r1
 8008472:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008478:	4299      	cmp	r1, r3
 800847a:	d11d      	bne.n	80084b8 <__submore+0x4c>
 800847c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008480:	f7fd fa4a 	bl	8005918 <_malloc_r>
 8008484:	b918      	cbnz	r0, 800848e <__submore+0x22>
 8008486:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800848a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800848e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008492:	63a3      	str	r3, [r4, #56]	; 0x38
 8008494:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008498:	6360      	str	r0, [r4, #52]	; 0x34
 800849a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800849e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80084a2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80084a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80084aa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80084ae:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80084b2:	6020      	str	r0, [r4, #0]
 80084b4:	2000      	movs	r0, #0
 80084b6:	e7e8      	b.n	800848a <__submore+0x1e>
 80084b8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80084ba:	0077      	lsls	r7, r6, #1
 80084bc:	463a      	mov	r2, r7
 80084be:	f000 fa25 	bl	800890c <_realloc_r>
 80084c2:	4605      	mov	r5, r0
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d0de      	beq.n	8008486 <__submore+0x1a>
 80084c8:	eb00 0806 	add.w	r8, r0, r6
 80084cc:	4601      	mov	r1, r0
 80084ce:	4632      	mov	r2, r6
 80084d0:	4640      	mov	r0, r8
 80084d2:	f7fe fe55 	bl	8007180 <memcpy>
 80084d6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80084da:	f8c4 8000 	str.w	r8, [r4]
 80084de:	e7e9      	b.n	80084b4 <__submore+0x48>

080084e0 <__assert_func>:
 80084e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084e2:	4614      	mov	r4, r2
 80084e4:	461a      	mov	r2, r3
 80084e6:	4b09      	ldr	r3, [pc, #36]	; (800850c <__assert_func+0x2c>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4605      	mov	r5, r0
 80084ec:	68d8      	ldr	r0, [r3, #12]
 80084ee:	b14c      	cbz	r4, 8008504 <__assert_func+0x24>
 80084f0:	4b07      	ldr	r3, [pc, #28]	; (8008510 <__assert_func+0x30>)
 80084f2:	9100      	str	r1, [sp, #0]
 80084f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084f8:	4906      	ldr	r1, [pc, #24]	; (8008514 <__assert_func+0x34>)
 80084fa:	462b      	mov	r3, r5
 80084fc:	f000 f9a6 	bl	800884c <fiprintf>
 8008500:	f000 fc5a 	bl	8008db8 <abort>
 8008504:	4b04      	ldr	r3, [pc, #16]	; (8008518 <__assert_func+0x38>)
 8008506:	461c      	mov	r4, r3
 8008508:	e7f3      	b.n	80084f2 <__assert_func+0x12>
 800850a:	bf00      	nop
 800850c:	20000010 	.word	0x20000010
 8008510:	0800a218 	.word	0x0800a218
 8008514:	0800a225 	.word	0x0800a225
 8008518:	0800a253 	.word	0x0800a253

0800851c <__sflush_r>:
 800851c:	898a      	ldrh	r2, [r1, #12]
 800851e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008522:	4605      	mov	r5, r0
 8008524:	0710      	lsls	r0, r2, #28
 8008526:	460c      	mov	r4, r1
 8008528:	d458      	bmi.n	80085dc <__sflush_r+0xc0>
 800852a:	684b      	ldr	r3, [r1, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	dc05      	bgt.n	800853c <__sflush_r+0x20>
 8008530:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008532:	2b00      	cmp	r3, #0
 8008534:	dc02      	bgt.n	800853c <__sflush_r+0x20>
 8008536:	2000      	movs	r0, #0
 8008538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800853c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800853e:	2e00      	cmp	r6, #0
 8008540:	d0f9      	beq.n	8008536 <__sflush_r+0x1a>
 8008542:	2300      	movs	r3, #0
 8008544:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008548:	682f      	ldr	r7, [r5, #0]
 800854a:	602b      	str	r3, [r5, #0]
 800854c:	d032      	beq.n	80085b4 <__sflush_r+0x98>
 800854e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	075a      	lsls	r2, r3, #29
 8008554:	d505      	bpl.n	8008562 <__sflush_r+0x46>
 8008556:	6863      	ldr	r3, [r4, #4]
 8008558:	1ac0      	subs	r0, r0, r3
 800855a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800855c:	b10b      	cbz	r3, 8008562 <__sflush_r+0x46>
 800855e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008560:	1ac0      	subs	r0, r0, r3
 8008562:	2300      	movs	r3, #0
 8008564:	4602      	mov	r2, r0
 8008566:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008568:	6a21      	ldr	r1, [r4, #32]
 800856a:	4628      	mov	r0, r5
 800856c:	47b0      	blx	r6
 800856e:	1c43      	adds	r3, r0, #1
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	d106      	bne.n	8008582 <__sflush_r+0x66>
 8008574:	6829      	ldr	r1, [r5, #0]
 8008576:	291d      	cmp	r1, #29
 8008578:	d82c      	bhi.n	80085d4 <__sflush_r+0xb8>
 800857a:	4a2a      	ldr	r2, [pc, #168]	; (8008624 <__sflush_r+0x108>)
 800857c:	40ca      	lsrs	r2, r1
 800857e:	07d6      	lsls	r6, r2, #31
 8008580:	d528      	bpl.n	80085d4 <__sflush_r+0xb8>
 8008582:	2200      	movs	r2, #0
 8008584:	6062      	str	r2, [r4, #4]
 8008586:	04d9      	lsls	r1, r3, #19
 8008588:	6922      	ldr	r2, [r4, #16]
 800858a:	6022      	str	r2, [r4, #0]
 800858c:	d504      	bpl.n	8008598 <__sflush_r+0x7c>
 800858e:	1c42      	adds	r2, r0, #1
 8008590:	d101      	bne.n	8008596 <__sflush_r+0x7a>
 8008592:	682b      	ldr	r3, [r5, #0]
 8008594:	b903      	cbnz	r3, 8008598 <__sflush_r+0x7c>
 8008596:	6560      	str	r0, [r4, #84]	; 0x54
 8008598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800859a:	602f      	str	r7, [r5, #0]
 800859c:	2900      	cmp	r1, #0
 800859e:	d0ca      	beq.n	8008536 <__sflush_r+0x1a>
 80085a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085a4:	4299      	cmp	r1, r3
 80085a6:	d002      	beq.n	80085ae <__sflush_r+0x92>
 80085a8:	4628      	mov	r0, r5
 80085aa:	f7fd f949 	bl	8005840 <_free_r>
 80085ae:	2000      	movs	r0, #0
 80085b0:	6360      	str	r0, [r4, #52]	; 0x34
 80085b2:	e7c1      	b.n	8008538 <__sflush_r+0x1c>
 80085b4:	6a21      	ldr	r1, [r4, #32]
 80085b6:	2301      	movs	r3, #1
 80085b8:	4628      	mov	r0, r5
 80085ba:	47b0      	blx	r6
 80085bc:	1c41      	adds	r1, r0, #1
 80085be:	d1c7      	bne.n	8008550 <__sflush_r+0x34>
 80085c0:	682b      	ldr	r3, [r5, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d0c4      	beq.n	8008550 <__sflush_r+0x34>
 80085c6:	2b1d      	cmp	r3, #29
 80085c8:	d001      	beq.n	80085ce <__sflush_r+0xb2>
 80085ca:	2b16      	cmp	r3, #22
 80085cc:	d101      	bne.n	80085d2 <__sflush_r+0xb6>
 80085ce:	602f      	str	r7, [r5, #0]
 80085d0:	e7b1      	b.n	8008536 <__sflush_r+0x1a>
 80085d2:	89a3      	ldrh	r3, [r4, #12]
 80085d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085d8:	81a3      	strh	r3, [r4, #12]
 80085da:	e7ad      	b.n	8008538 <__sflush_r+0x1c>
 80085dc:	690f      	ldr	r7, [r1, #16]
 80085de:	2f00      	cmp	r7, #0
 80085e0:	d0a9      	beq.n	8008536 <__sflush_r+0x1a>
 80085e2:	0793      	lsls	r3, r2, #30
 80085e4:	680e      	ldr	r6, [r1, #0]
 80085e6:	bf08      	it	eq
 80085e8:	694b      	ldreq	r3, [r1, #20]
 80085ea:	600f      	str	r7, [r1, #0]
 80085ec:	bf18      	it	ne
 80085ee:	2300      	movne	r3, #0
 80085f0:	eba6 0807 	sub.w	r8, r6, r7
 80085f4:	608b      	str	r3, [r1, #8]
 80085f6:	f1b8 0f00 	cmp.w	r8, #0
 80085fa:	dd9c      	ble.n	8008536 <__sflush_r+0x1a>
 80085fc:	6a21      	ldr	r1, [r4, #32]
 80085fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008600:	4643      	mov	r3, r8
 8008602:	463a      	mov	r2, r7
 8008604:	4628      	mov	r0, r5
 8008606:	47b0      	blx	r6
 8008608:	2800      	cmp	r0, #0
 800860a:	dc06      	bgt.n	800861a <__sflush_r+0xfe>
 800860c:	89a3      	ldrh	r3, [r4, #12]
 800860e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008612:	81a3      	strh	r3, [r4, #12]
 8008614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008618:	e78e      	b.n	8008538 <__sflush_r+0x1c>
 800861a:	4407      	add	r7, r0
 800861c:	eba8 0800 	sub.w	r8, r8, r0
 8008620:	e7e9      	b.n	80085f6 <__sflush_r+0xda>
 8008622:	bf00      	nop
 8008624:	20400001 	.word	0x20400001

08008628 <_fflush_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	690b      	ldr	r3, [r1, #16]
 800862c:	4605      	mov	r5, r0
 800862e:	460c      	mov	r4, r1
 8008630:	b913      	cbnz	r3, 8008638 <_fflush_r+0x10>
 8008632:	2500      	movs	r5, #0
 8008634:	4628      	mov	r0, r5
 8008636:	bd38      	pop	{r3, r4, r5, pc}
 8008638:	b118      	cbz	r0, 8008642 <_fflush_r+0x1a>
 800863a:	6983      	ldr	r3, [r0, #24]
 800863c:	b90b      	cbnz	r3, 8008642 <_fflush_r+0x1a>
 800863e:	f000 f887 	bl	8008750 <__sinit>
 8008642:	4b14      	ldr	r3, [pc, #80]	; (8008694 <_fflush_r+0x6c>)
 8008644:	429c      	cmp	r4, r3
 8008646:	d11b      	bne.n	8008680 <_fflush_r+0x58>
 8008648:	686c      	ldr	r4, [r5, #4]
 800864a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d0ef      	beq.n	8008632 <_fflush_r+0xa>
 8008652:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008654:	07d0      	lsls	r0, r2, #31
 8008656:	d404      	bmi.n	8008662 <_fflush_r+0x3a>
 8008658:	0599      	lsls	r1, r3, #22
 800865a:	d402      	bmi.n	8008662 <_fflush_r+0x3a>
 800865c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800865e:	f000 f927 	bl	80088b0 <__retarget_lock_acquire_recursive>
 8008662:	4628      	mov	r0, r5
 8008664:	4621      	mov	r1, r4
 8008666:	f7ff ff59 	bl	800851c <__sflush_r>
 800866a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800866c:	07da      	lsls	r2, r3, #31
 800866e:	4605      	mov	r5, r0
 8008670:	d4e0      	bmi.n	8008634 <_fflush_r+0xc>
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	059b      	lsls	r3, r3, #22
 8008676:	d4dd      	bmi.n	8008634 <_fflush_r+0xc>
 8008678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800867a:	f000 f91a 	bl	80088b2 <__retarget_lock_release_recursive>
 800867e:	e7d9      	b.n	8008634 <_fflush_r+0xc>
 8008680:	4b05      	ldr	r3, [pc, #20]	; (8008698 <_fflush_r+0x70>)
 8008682:	429c      	cmp	r4, r3
 8008684:	d101      	bne.n	800868a <_fflush_r+0x62>
 8008686:	68ac      	ldr	r4, [r5, #8]
 8008688:	e7df      	b.n	800864a <_fflush_r+0x22>
 800868a:	4b04      	ldr	r3, [pc, #16]	; (800869c <_fflush_r+0x74>)
 800868c:	429c      	cmp	r4, r3
 800868e:	bf08      	it	eq
 8008690:	68ec      	ldreq	r4, [r5, #12]
 8008692:	e7da      	b.n	800864a <_fflush_r+0x22>
 8008694:	0800a378 	.word	0x0800a378
 8008698:	0800a398 	.word	0x0800a398
 800869c:	0800a358 	.word	0x0800a358

080086a0 <std>:
 80086a0:	2300      	movs	r3, #0
 80086a2:	b510      	push	{r4, lr}
 80086a4:	4604      	mov	r4, r0
 80086a6:	e9c0 3300 	strd	r3, r3, [r0]
 80086aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086ae:	6083      	str	r3, [r0, #8]
 80086b0:	8181      	strh	r1, [r0, #12]
 80086b2:	6643      	str	r3, [r0, #100]	; 0x64
 80086b4:	81c2      	strh	r2, [r0, #14]
 80086b6:	6183      	str	r3, [r0, #24]
 80086b8:	4619      	mov	r1, r3
 80086ba:	2208      	movs	r2, #8
 80086bc:	305c      	adds	r0, #92	; 0x5c
 80086be:	f7fd f8b7 	bl	8005830 <memset>
 80086c2:	4b05      	ldr	r3, [pc, #20]	; (80086d8 <std+0x38>)
 80086c4:	6263      	str	r3, [r4, #36]	; 0x24
 80086c6:	4b05      	ldr	r3, [pc, #20]	; (80086dc <std+0x3c>)
 80086c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80086ca:	4b05      	ldr	r3, [pc, #20]	; (80086e0 <std+0x40>)
 80086cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086ce:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <std+0x44>)
 80086d0:	6224      	str	r4, [r4, #32]
 80086d2:	6323      	str	r3, [r4, #48]	; 0x30
 80086d4:	bd10      	pop	{r4, pc}
 80086d6:	bf00      	nop
 80086d8:	0800638d 	.word	0x0800638d
 80086dc:	080063b3 	.word	0x080063b3
 80086e0:	080063eb 	.word	0x080063eb
 80086e4:	0800640f 	.word	0x0800640f

080086e8 <_cleanup_r>:
 80086e8:	4901      	ldr	r1, [pc, #4]	; (80086f0 <_cleanup_r+0x8>)
 80086ea:	f000 b8c1 	b.w	8008870 <_fwalk_reent>
 80086ee:	bf00      	nop
 80086f0:	08008629 	.word	0x08008629

080086f4 <__sfmoreglue>:
 80086f4:	b570      	push	{r4, r5, r6, lr}
 80086f6:	2268      	movs	r2, #104	; 0x68
 80086f8:	1e4d      	subs	r5, r1, #1
 80086fa:	4355      	muls	r5, r2
 80086fc:	460e      	mov	r6, r1
 80086fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008702:	f7fd f909 	bl	8005918 <_malloc_r>
 8008706:	4604      	mov	r4, r0
 8008708:	b140      	cbz	r0, 800871c <__sfmoreglue+0x28>
 800870a:	2100      	movs	r1, #0
 800870c:	e9c0 1600 	strd	r1, r6, [r0]
 8008710:	300c      	adds	r0, #12
 8008712:	60a0      	str	r0, [r4, #8]
 8008714:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008718:	f7fd f88a 	bl	8005830 <memset>
 800871c:	4620      	mov	r0, r4
 800871e:	bd70      	pop	{r4, r5, r6, pc}

08008720 <__sfp_lock_acquire>:
 8008720:	4801      	ldr	r0, [pc, #4]	; (8008728 <__sfp_lock_acquire+0x8>)
 8008722:	f000 b8c5 	b.w	80088b0 <__retarget_lock_acquire_recursive>
 8008726:	bf00      	nop
 8008728:	200005b9 	.word	0x200005b9

0800872c <__sfp_lock_release>:
 800872c:	4801      	ldr	r0, [pc, #4]	; (8008734 <__sfp_lock_release+0x8>)
 800872e:	f000 b8c0 	b.w	80088b2 <__retarget_lock_release_recursive>
 8008732:	bf00      	nop
 8008734:	200005b9 	.word	0x200005b9

08008738 <__sinit_lock_acquire>:
 8008738:	4801      	ldr	r0, [pc, #4]	; (8008740 <__sinit_lock_acquire+0x8>)
 800873a:	f000 b8b9 	b.w	80088b0 <__retarget_lock_acquire_recursive>
 800873e:	bf00      	nop
 8008740:	200005ba 	.word	0x200005ba

08008744 <__sinit_lock_release>:
 8008744:	4801      	ldr	r0, [pc, #4]	; (800874c <__sinit_lock_release+0x8>)
 8008746:	f000 b8b4 	b.w	80088b2 <__retarget_lock_release_recursive>
 800874a:	bf00      	nop
 800874c:	200005ba 	.word	0x200005ba

08008750 <__sinit>:
 8008750:	b510      	push	{r4, lr}
 8008752:	4604      	mov	r4, r0
 8008754:	f7ff fff0 	bl	8008738 <__sinit_lock_acquire>
 8008758:	69a3      	ldr	r3, [r4, #24]
 800875a:	b11b      	cbz	r3, 8008764 <__sinit+0x14>
 800875c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008760:	f7ff bff0 	b.w	8008744 <__sinit_lock_release>
 8008764:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008768:	6523      	str	r3, [r4, #80]	; 0x50
 800876a:	4b13      	ldr	r3, [pc, #76]	; (80087b8 <__sinit+0x68>)
 800876c:	4a13      	ldr	r2, [pc, #76]	; (80087bc <__sinit+0x6c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	62a2      	str	r2, [r4, #40]	; 0x28
 8008772:	42a3      	cmp	r3, r4
 8008774:	bf04      	itt	eq
 8008776:	2301      	moveq	r3, #1
 8008778:	61a3      	streq	r3, [r4, #24]
 800877a:	4620      	mov	r0, r4
 800877c:	f000 f820 	bl	80087c0 <__sfp>
 8008780:	6060      	str	r0, [r4, #4]
 8008782:	4620      	mov	r0, r4
 8008784:	f000 f81c 	bl	80087c0 <__sfp>
 8008788:	60a0      	str	r0, [r4, #8]
 800878a:	4620      	mov	r0, r4
 800878c:	f000 f818 	bl	80087c0 <__sfp>
 8008790:	2200      	movs	r2, #0
 8008792:	60e0      	str	r0, [r4, #12]
 8008794:	2104      	movs	r1, #4
 8008796:	6860      	ldr	r0, [r4, #4]
 8008798:	f7ff ff82 	bl	80086a0 <std>
 800879c:	68a0      	ldr	r0, [r4, #8]
 800879e:	2201      	movs	r2, #1
 80087a0:	2109      	movs	r1, #9
 80087a2:	f7ff ff7d 	bl	80086a0 <std>
 80087a6:	68e0      	ldr	r0, [r4, #12]
 80087a8:	2202      	movs	r2, #2
 80087aa:	2112      	movs	r1, #18
 80087ac:	f7ff ff78 	bl	80086a0 <std>
 80087b0:	2301      	movs	r3, #1
 80087b2:	61a3      	str	r3, [r4, #24]
 80087b4:	e7d2      	b.n	800875c <__sinit+0xc>
 80087b6:	bf00      	nop
 80087b8:	08009fc8 	.word	0x08009fc8
 80087bc:	080086e9 	.word	0x080086e9

080087c0 <__sfp>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	4607      	mov	r7, r0
 80087c4:	f7ff ffac 	bl	8008720 <__sfp_lock_acquire>
 80087c8:	4b1e      	ldr	r3, [pc, #120]	; (8008844 <__sfp+0x84>)
 80087ca:	681e      	ldr	r6, [r3, #0]
 80087cc:	69b3      	ldr	r3, [r6, #24]
 80087ce:	b913      	cbnz	r3, 80087d6 <__sfp+0x16>
 80087d0:	4630      	mov	r0, r6
 80087d2:	f7ff ffbd 	bl	8008750 <__sinit>
 80087d6:	3648      	adds	r6, #72	; 0x48
 80087d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80087dc:	3b01      	subs	r3, #1
 80087de:	d503      	bpl.n	80087e8 <__sfp+0x28>
 80087e0:	6833      	ldr	r3, [r6, #0]
 80087e2:	b30b      	cbz	r3, 8008828 <__sfp+0x68>
 80087e4:	6836      	ldr	r6, [r6, #0]
 80087e6:	e7f7      	b.n	80087d8 <__sfp+0x18>
 80087e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087ec:	b9d5      	cbnz	r5, 8008824 <__sfp+0x64>
 80087ee:	4b16      	ldr	r3, [pc, #88]	; (8008848 <__sfp+0x88>)
 80087f0:	60e3      	str	r3, [r4, #12]
 80087f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087f6:	6665      	str	r5, [r4, #100]	; 0x64
 80087f8:	f000 f859 	bl	80088ae <__retarget_lock_init_recursive>
 80087fc:	f7ff ff96 	bl	800872c <__sfp_lock_release>
 8008800:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008804:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008808:	6025      	str	r5, [r4, #0]
 800880a:	61a5      	str	r5, [r4, #24]
 800880c:	2208      	movs	r2, #8
 800880e:	4629      	mov	r1, r5
 8008810:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008814:	f7fd f80c 	bl	8005830 <memset>
 8008818:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800881c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008820:	4620      	mov	r0, r4
 8008822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008824:	3468      	adds	r4, #104	; 0x68
 8008826:	e7d9      	b.n	80087dc <__sfp+0x1c>
 8008828:	2104      	movs	r1, #4
 800882a:	4638      	mov	r0, r7
 800882c:	f7ff ff62 	bl	80086f4 <__sfmoreglue>
 8008830:	4604      	mov	r4, r0
 8008832:	6030      	str	r0, [r6, #0]
 8008834:	2800      	cmp	r0, #0
 8008836:	d1d5      	bne.n	80087e4 <__sfp+0x24>
 8008838:	f7ff ff78 	bl	800872c <__sfp_lock_release>
 800883c:	230c      	movs	r3, #12
 800883e:	603b      	str	r3, [r7, #0]
 8008840:	e7ee      	b.n	8008820 <__sfp+0x60>
 8008842:	bf00      	nop
 8008844:	08009fc8 	.word	0x08009fc8
 8008848:	ffff0001 	.word	0xffff0001

0800884c <fiprintf>:
 800884c:	b40e      	push	{r1, r2, r3}
 800884e:	b503      	push	{r0, r1, lr}
 8008850:	4601      	mov	r1, r0
 8008852:	ab03      	add	r3, sp, #12
 8008854:	4805      	ldr	r0, [pc, #20]	; (800886c <fiprintf+0x20>)
 8008856:	f853 2b04 	ldr.w	r2, [r3], #4
 800885a:	6800      	ldr	r0, [r0, #0]
 800885c:	9301      	str	r3, [sp, #4]
 800885e:	f000 f8ad 	bl	80089bc <_vfiprintf_r>
 8008862:	b002      	add	sp, #8
 8008864:	f85d eb04 	ldr.w	lr, [sp], #4
 8008868:	b003      	add	sp, #12
 800886a:	4770      	bx	lr
 800886c:	20000010 	.word	0x20000010

08008870 <_fwalk_reent>:
 8008870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008874:	4606      	mov	r6, r0
 8008876:	4688      	mov	r8, r1
 8008878:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800887c:	2700      	movs	r7, #0
 800887e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008882:	f1b9 0901 	subs.w	r9, r9, #1
 8008886:	d505      	bpl.n	8008894 <_fwalk_reent+0x24>
 8008888:	6824      	ldr	r4, [r4, #0]
 800888a:	2c00      	cmp	r4, #0
 800888c:	d1f7      	bne.n	800887e <_fwalk_reent+0xe>
 800888e:	4638      	mov	r0, r7
 8008890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008894:	89ab      	ldrh	r3, [r5, #12]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d907      	bls.n	80088aa <_fwalk_reent+0x3a>
 800889a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800889e:	3301      	adds	r3, #1
 80088a0:	d003      	beq.n	80088aa <_fwalk_reent+0x3a>
 80088a2:	4629      	mov	r1, r5
 80088a4:	4630      	mov	r0, r6
 80088a6:	47c0      	blx	r8
 80088a8:	4307      	orrs	r7, r0
 80088aa:	3568      	adds	r5, #104	; 0x68
 80088ac:	e7e9      	b.n	8008882 <_fwalk_reent+0x12>

080088ae <__retarget_lock_init_recursive>:
 80088ae:	4770      	bx	lr

080088b0 <__retarget_lock_acquire_recursive>:
 80088b0:	4770      	bx	lr

080088b2 <__retarget_lock_release_recursive>:
 80088b2:	4770      	bx	lr

080088b4 <__ascii_mbtowc>:
 80088b4:	b082      	sub	sp, #8
 80088b6:	b901      	cbnz	r1, 80088ba <__ascii_mbtowc+0x6>
 80088b8:	a901      	add	r1, sp, #4
 80088ba:	b142      	cbz	r2, 80088ce <__ascii_mbtowc+0x1a>
 80088bc:	b14b      	cbz	r3, 80088d2 <__ascii_mbtowc+0x1e>
 80088be:	7813      	ldrb	r3, [r2, #0]
 80088c0:	600b      	str	r3, [r1, #0]
 80088c2:	7812      	ldrb	r2, [r2, #0]
 80088c4:	1e10      	subs	r0, r2, #0
 80088c6:	bf18      	it	ne
 80088c8:	2001      	movne	r0, #1
 80088ca:	b002      	add	sp, #8
 80088cc:	4770      	bx	lr
 80088ce:	4610      	mov	r0, r2
 80088d0:	e7fb      	b.n	80088ca <__ascii_mbtowc+0x16>
 80088d2:	f06f 0001 	mvn.w	r0, #1
 80088d6:	e7f8      	b.n	80088ca <__ascii_mbtowc+0x16>

080088d8 <memmove>:
 80088d8:	4288      	cmp	r0, r1
 80088da:	b510      	push	{r4, lr}
 80088dc:	eb01 0402 	add.w	r4, r1, r2
 80088e0:	d902      	bls.n	80088e8 <memmove+0x10>
 80088e2:	4284      	cmp	r4, r0
 80088e4:	4623      	mov	r3, r4
 80088e6:	d807      	bhi.n	80088f8 <memmove+0x20>
 80088e8:	1e43      	subs	r3, r0, #1
 80088ea:	42a1      	cmp	r1, r4
 80088ec:	d008      	beq.n	8008900 <memmove+0x28>
 80088ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088f6:	e7f8      	b.n	80088ea <memmove+0x12>
 80088f8:	4402      	add	r2, r0
 80088fa:	4601      	mov	r1, r0
 80088fc:	428a      	cmp	r2, r1
 80088fe:	d100      	bne.n	8008902 <memmove+0x2a>
 8008900:	bd10      	pop	{r4, pc}
 8008902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008906:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800890a:	e7f7      	b.n	80088fc <memmove+0x24>

0800890c <_realloc_r>:
 800890c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008910:	4680      	mov	r8, r0
 8008912:	4614      	mov	r4, r2
 8008914:	460e      	mov	r6, r1
 8008916:	b921      	cbnz	r1, 8008922 <_realloc_r+0x16>
 8008918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800891c:	4611      	mov	r1, r2
 800891e:	f7fc bffb 	b.w	8005918 <_malloc_r>
 8008922:	b92a      	cbnz	r2, 8008930 <_realloc_r+0x24>
 8008924:	f7fc ff8c 	bl	8005840 <_free_r>
 8008928:	4625      	mov	r5, r4
 800892a:	4628      	mov	r0, r5
 800892c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008930:	f000 faae 	bl	8008e90 <_malloc_usable_size_r>
 8008934:	4284      	cmp	r4, r0
 8008936:	4607      	mov	r7, r0
 8008938:	d802      	bhi.n	8008940 <_realloc_r+0x34>
 800893a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800893e:	d812      	bhi.n	8008966 <_realloc_r+0x5a>
 8008940:	4621      	mov	r1, r4
 8008942:	4640      	mov	r0, r8
 8008944:	f7fc ffe8 	bl	8005918 <_malloc_r>
 8008948:	4605      	mov	r5, r0
 800894a:	2800      	cmp	r0, #0
 800894c:	d0ed      	beq.n	800892a <_realloc_r+0x1e>
 800894e:	42bc      	cmp	r4, r7
 8008950:	4622      	mov	r2, r4
 8008952:	4631      	mov	r1, r6
 8008954:	bf28      	it	cs
 8008956:	463a      	movcs	r2, r7
 8008958:	f7fe fc12 	bl	8007180 <memcpy>
 800895c:	4631      	mov	r1, r6
 800895e:	4640      	mov	r0, r8
 8008960:	f7fc ff6e 	bl	8005840 <_free_r>
 8008964:	e7e1      	b.n	800892a <_realloc_r+0x1e>
 8008966:	4635      	mov	r5, r6
 8008968:	e7df      	b.n	800892a <_realloc_r+0x1e>

0800896a <__sfputc_r>:
 800896a:	6893      	ldr	r3, [r2, #8]
 800896c:	3b01      	subs	r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	b410      	push	{r4}
 8008972:	6093      	str	r3, [r2, #8]
 8008974:	da08      	bge.n	8008988 <__sfputc_r+0x1e>
 8008976:	6994      	ldr	r4, [r2, #24]
 8008978:	42a3      	cmp	r3, r4
 800897a:	db01      	blt.n	8008980 <__sfputc_r+0x16>
 800897c:	290a      	cmp	r1, #10
 800897e:	d103      	bne.n	8008988 <__sfputc_r+0x1e>
 8008980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008984:	f000 b94a 	b.w	8008c1c <__swbuf_r>
 8008988:	6813      	ldr	r3, [r2, #0]
 800898a:	1c58      	adds	r0, r3, #1
 800898c:	6010      	str	r0, [r2, #0]
 800898e:	7019      	strb	r1, [r3, #0]
 8008990:	4608      	mov	r0, r1
 8008992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008996:	4770      	bx	lr

08008998 <__sfputs_r>:
 8008998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899a:	4606      	mov	r6, r0
 800899c:	460f      	mov	r7, r1
 800899e:	4614      	mov	r4, r2
 80089a0:	18d5      	adds	r5, r2, r3
 80089a2:	42ac      	cmp	r4, r5
 80089a4:	d101      	bne.n	80089aa <__sfputs_r+0x12>
 80089a6:	2000      	movs	r0, #0
 80089a8:	e007      	b.n	80089ba <__sfputs_r+0x22>
 80089aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ae:	463a      	mov	r2, r7
 80089b0:	4630      	mov	r0, r6
 80089b2:	f7ff ffda 	bl	800896a <__sfputc_r>
 80089b6:	1c43      	adds	r3, r0, #1
 80089b8:	d1f3      	bne.n	80089a2 <__sfputs_r+0xa>
 80089ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080089bc <_vfiprintf_r>:
 80089bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c0:	460d      	mov	r5, r1
 80089c2:	b09d      	sub	sp, #116	; 0x74
 80089c4:	4614      	mov	r4, r2
 80089c6:	4698      	mov	r8, r3
 80089c8:	4606      	mov	r6, r0
 80089ca:	b118      	cbz	r0, 80089d4 <_vfiprintf_r+0x18>
 80089cc:	6983      	ldr	r3, [r0, #24]
 80089ce:	b90b      	cbnz	r3, 80089d4 <_vfiprintf_r+0x18>
 80089d0:	f7ff febe 	bl	8008750 <__sinit>
 80089d4:	4b89      	ldr	r3, [pc, #548]	; (8008bfc <_vfiprintf_r+0x240>)
 80089d6:	429d      	cmp	r5, r3
 80089d8:	d11b      	bne.n	8008a12 <_vfiprintf_r+0x56>
 80089da:	6875      	ldr	r5, [r6, #4]
 80089dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089de:	07d9      	lsls	r1, r3, #31
 80089e0:	d405      	bmi.n	80089ee <_vfiprintf_r+0x32>
 80089e2:	89ab      	ldrh	r3, [r5, #12]
 80089e4:	059a      	lsls	r2, r3, #22
 80089e6:	d402      	bmi.n	80089ee <_vfiprintf_r+0x32>
 80089e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089ea:	f7ff ff61 	bl	80088b0 <__retarget_lock_acquire_recursive>
 80089ee:	89ab      	ldrh	r3, [r5, #12]
 80089f0:	071b      	lsls	r3, r3, #28
 80089f2:	d501      	bpl.n	80089f8 <_vfiprintf_r+0x3c>
 80089f4:	692b      	ldr	r3, [r5, #16]
 80089f6:	b9eb      	cbnz	r3, 8008a34 <_vfiprintf_r+0x78>
 80089f8:	4629      	mov	r1, r5
 80089fa:	4630      	mov	r0, r6
 80089fc:	f000 f96e 	bl	8008cdc <__swsetup_r>
 8008a00:	b1c0      	cbz	r0, 8008a34 <_vfiprintf_r+0x78>
 8008a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a04:	07dc      	lsls	r4, r3, #31
 8008a06:	d50e      	bpl.n	8008a26 <_vfiprintf_r+0x6a>
 8008a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a0c:	b01d      	add	sp, #116	; 0x74
 8008a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a12:	4b7b      	ldr	r3, [pc, #492]	; (8008c00 <_vfiprintf_r+0x244>)
 8008a14:	429d      	cmp	r5, r3
 8008a16:	d101      	bne.n	8008a1c <_vfiprintf_r+0x60>
 8008a18:	68b5      	ldr	r5, [r6, #8]
 8008a1a:	e7df      	b.n	80089dc <_vfiprintf_r+0x20>
 8008a1c:	4b79      	ldr	r3, [pc, #484]	; (8008c04 <_vfiprintf_r+0x248>)
 8008a1e:	429d      	cmp	r5, r3
 8008a20:	bf08      	it	eq
 8008a22:	68f5      	ldreq	r5, [r6, #12]
 8008a24:	e7da      	b.n	80089dc <_vfiprintf_r+0x20>
 8008a26:	89ab      	ldrh	r3, [r5, #12]
 8008a28:	0598      	lsls	r0, r3, #22
 8008a2a:	d4ed      	bmi.n	8008a08 <_vfiprintf_r+0x4c>
 8008a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a2e:	f7ff ff40 	bl	80088b2 <__retarget_lock_release_recursive>
 8008a32:	e7e9      	b.n	8008a08 <_vfiprintf_r+0x4c>
 8008a34:	2300      	movs	r3, #0
 8008a36:	9309      	str	r3, [sp, #36]	; 0x24
 8008a38:	2320      	movs	r3, #32
 8008a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a42:	2330      	movs	r3, #48	; 0x30
 8008a44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c08 <_vfiprintf_r+0x24c>
 8008a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a4c:	f04f 0901 	mov.w	r9, #1
 8008a50:	4623      	mov	r3, r4
 8008a52:	469a      	mov	sl, r3
 8008a54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a58:	b10a      	cbz	r2, 8008a5e <_vfiprintf_r+0xa2>
 8008a5a:	2a25      	cmp	r2, #37	; 0x25
 8008a5c:	d1f9      	bne.n	8008a52 <_vfiprintf_r+0x96>
 8008a5e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a62:	d00b      	beq.n	8008a7c <_vfiprintf_r+0xc0>
 8008a64:	465b      	mov	r3, fp
 8008a66:	4622      	mov	r2, r4
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7ff ff94 	bl	8008998 <__sfputs_r>
 8008a70:	3001      	adds	r0, #1
 8008a72:	f000 80aa 	beq.w	8008bca <_vfiprintf_r+0x20e>
 8008a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a78:	445a      	add	r2, fp
 8008a7a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 80a2 	beq.w	8008bca <_vfiprintf_r+0x20e>
 8008a86:	2300      	movs	r3, #0
 8008a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a90:	f10a 0a01 	add.w	sl, sl, #1
 8008a94:	9304      	str	r3, [sp, #16]
 8008a96:	9307      	str	r3, [sp, #28]
 8008a98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8008a9e:	4654      	mov	r4, sl
 8008aa0:	2205      	movs	r2, #5
 8008aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aa6:	4858      	ldr	r0, [pc, #352]	; (8008c08 <_vfiprintf_r+0x24c>)
 8008aa8:	f7f7 fbb2 	bl	8000210 <memchr>
 8008aac:	9a04      	ldr	r2, [sp, #16]
 8008aae:	b9d8      	cbnz	r0, 8008ae8 <_vfiprintf_r+0x12c>
 8008ab0:	06d1      	lsls	r1, r2, #27
 8008ab2:	bf44      	itt	mi
 8008ab4:	2320      	movmi	r3, #32
 8008ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aba:	0713      	lsls	r3, r2, #28
 8008abc:	bf44      	itt	mi
 8008abe:	232b      	movmi	r3, #43	; 0x2b
 8008ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8008aca:	d015      	beq.n	8008af8 <_vfiprintf_r+0x13c>
 8008acc:	9a07      	ldr	r2, [sp, #28]
 8008ace:	4654      	mov	r4, sl
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	f04f 0c0a 	mov.w	ip, #10
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008adc:	3b30      	subs	r3, #48	; 0x30
 8008ade:	2b09      	cmp	r3, #9
 8008ae0:	d94e      	bls.n	8008b80 <_vfiprintf_r+0x1c4>
 8008ae2:	b1b0      	cbz	r0, 8008b12 <_vfiprintf_r+0x156>
 8008ae4:	9207      	str	r2, [sp, #28]
 8008ae6:	e014      	b.n	8008b12 <_vfiprintf_r+0x156>
 8008ae8:	eba0 0308 	sub.w	r3, r0, r8
 8008aec:	fa09 f303 	lsl.w	r3, r9, r3
 8008af0:	4313      	orrs	r3, r2
 8008af2:	9304      	str	r3, [sp, #16]
 8008af4:	46a2      	mov	sl, r4
 8008af6:	e7d2      	b.n	8008a9e <_vfiprintf_r+0xe2>
 8008af8:	9b03      	ldr	r3, [sp, #12]
 8008afa:	1d19      	adds	r1, r3, #4
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	9103      	str	r1, [sp, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	bfbb      	ittet	lt
 8008b04:	425b      	neglt	r3, r3
 8008b06:	f042 0202 	orrlt.w	r2, r2, #2
 8008b0a:	9307      	strge	r3, [sp, #28]
 8008b0c:	9307      	strlt	r3, [sp, #28]
 8008b0e:	bfb8      	it	lt
 8008b10:	9204      	strlt	r2, [sp, #16]
 8008b12:	7823      	ldrb	r3, [r4, #0]
 8008b14:	2b2e      	cmp	r3, #46	; 0x2e
 8008b16:	d10c      	bne.n	8008b32 <_vfiprintf_r+0x176>
 8008b18:	7863      	ldrb	r3, [r4, #1]
 8008b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b1c:	d135      	bne.n	8008b8a <_vfiprintf_r+0x1ce>
 8008b1e:	9b03      	ldr	r3, [sp, #12]
 8008b20:	1d1a      	adds	r2, r3, #4
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	9203      	str	r2, [sp, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	bfb8      	it	lt
 8008b2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008b2e:	3402      	adds	r4, #2
 8008b30:	9305      	str	r3, [sp, #20]
 8008b32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c18 <_vfiprintf_r+0x25c>
 8008b36:	7821      	ldrb	r1, [r4, #0]
 8008b38:	2203      	movs	r2, #3
 8008b3a:	4650      	mov	r0, sl
 8008b3c:	f7f7 fb68 	bl	8000210 <memchr>
 8008b40:	b140      	cbz	r0, 8008b54 <_vfiprintf_r+0x198>
 8008b42:	2340      	movs	r3, #64	; 0x40
 8008b44:	eba0 000a 	sub.w	r0, r0, sl
 8008b48:	fa03 f000 	lsl.w	r0, r3, r0
 8008b4c:	9b04      	ldr	r3, [sp, #16]
 8008b4e:	4303      	orrs	r3, r0
 8008b50:	3401      	adds	r4, #1
 8008b52:	9304      	str	r3, [sp, #16]
 8008b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b58:	482c      	ldr	r0, [pc, #176]	; (8008c0c <_vfiprintf_r+0x250>)
 8008b5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b5e:	2206      	movs	r2, #6
 8008b60:	f7f7 fb56 	bl	8000210 <memchr>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d03f      	beq.n	8008be8 <_vfiprintf_r+0x22c>
 8008b68:	4b29      	ldr	r3, [pc, #164]	; (8008c10 <_vfiprintf_r+0x254>)
 8008b6a:	bb1b      	cbnz	r3, 8008bb4 <_vfiprintf_r+0x1f8>
 8008b6c:	9b03      	ldr	r3, [sp, #12]
 8008b6e:	3307      	adds	r3, #7
 8008b70:	f023 0307 	bic.w	r3, r3, #7
 8008b74:	3308      	adds	r3, #8
 8008b76:	9303      	str	r3, [sp, #12]
 8008b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b7a:	443b      	add	r3, r7
 8008b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b7e:	e767      	b.n	8008a50 <_vfiprintf_r+0x94>
 8008b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b84:	460c      	mov	r4, r1
 8008b86:	2001      	movs	r0, #1
 8008b88:	e7a5      	b.n	8008ad6 <_vfiprintf_r+0x11a>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	3401      	adds	r4, #1
 8008b8e:	9305      	str	r3, [sp, #20]
 8008b90:	4619      	mov	r1, r3
 8008b92:	f04f 0c0a 	mov.w	ip, #10
 8008b96:	4620      	mov	r0, r4
 8008b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b9c:	3a30      	subs	r2, #48	; 0x30
 8008b9e:	2a09      	cmp	r2, #9
 8008ba0:	d903      	bls.n	8008baa <_vfiprintf_r+0x1ee>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0c5      	beq.n	8008b32 <_vfiprintf_r+0x176>
 8008ba6:	9105      	str	r1, [sp, #20]
 8008ba8:	e7c3      	b.n	8008b32 <_vfiprintf_r+0x176>
 8008baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bae:	4604      	mov	r4, r0
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e7f0      	b.n	8008b96 <_vfiprintf_r+0x1da>
 8008bb4:	ab03      	add	r3, sp, #12
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	462a      	mov	r2, r5
 8008bba:	4b16      	ldr	r3, [pc, #88]	; (8008c14 <_vfiprintf_r+0x258>)
 8008bbc:	a904      	add	r1, sp, #16
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	f7fc ffbe 	bl	8005b40 <_printf_float>
 8008bc4:	4607      	mov	r7, r0
 8008bc6:	1c78      	adds	r0, r7, #1
 8008bc8:	d1d6      	bne.n	8008b78 <_vfiprintf_r+0x1bc>
 8008bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bcc:	07d9      	lsls	r1, r3, #31
 8008bce:	d405      	bmi.n	8008bdc <_vfiprintf_r+0x220>
 8008bd0:	89ab      	ldrh	r3, [r5, #12]
 8008bd2:	059a      	lsls	r2, r3, #22
 8008bd4:	d402      	bmi.n	8008bdc <_vfiprintf_r+0x220>
 8008bd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bd8:	f7ff fe6b 	bl	80088b2 <__retarget_lock_release_recursive>
 8008bdc:	89ab      	ldrh	r3, [r5, #12]
 8008bde:	065b      	lsls	r3, r3, #25
 8008be0:	f53f af12 	bmi.w	8008a08 <_vfiprintf_r+0x4c>
 8008be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008be6:	e711      	b.n	8008a0c <_vfiprintf_r+0x50>
 8008be8:	ab03      	add	r3, sp, #12
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	462a      	mov	r2, r5
 8008bee:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <_vfiprintf_r+0x258>)
 8008bf0:	a904      	add	r1, sp, #16
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f7fd fa48 	bl	8006088 <_printf_i>
 8008bf8:	e7e4      	b.n	8008bc4 <_vfiprintf_r+0x208>
 8008bfa:	bf00      	nop
 8008bfc:	0800a378 	.word	0x0800a378
 8008c00:	0800a398 	.word	0x0800a398
 8008c04:	0800a358 	.word	0x0800a358
 8008c08:	0800a1ec 	.word	0x0800a1ec
 8008c0c:	0800a1f6 	.word	0x0800a1f6
 8008c10:	08005b41 	.word	0x08005b41
 8008c14:	08008999 	.word	0x08008999
 8008c18:	0800a1f2 	.word	0x0800a1f2

08008c1c <__swbuf_r>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	460e      	mov	r6, r1
 8008c20:	4614      	mov	r4, r2
 8008c22:	4605      	mov	r5, r0
 8008c24:	b118      	cbz	r0, 8008c2e <__swbuf_r+0x12>
 8008c26:	6983      	ldr	r3, [r0, #24]
 8008c28:	b90b      	cbnz	r3, 8008c2e <__swbuf_r+0x12>
 8008c2a:	f7ff fd91 	bl	8008750 <__sinit>
 8008c2e:	4b21      	ldr	r3, [pc, #132]	; (8008cb4 <__swbuf_r+0x98>)
 8008c30:	429c      	cmp	r4, r3
 8008c32:	d12b      	bne.n	8008c8c <__swbuf_r+0x70>
 8008c34:	686c      	ldr	r4, [r5, #4]
 8008c36:	69a3      	ldr	r3, [r4, #24]
 8008c38:	60a3      	str	r3, [r4, #8]
 8008c3a:	89a3      	ldrh	r3, [r4, #12]
 8008c3c:	071a      	lsls	r2, r3, #28
 8008c3e:	d52f      	bpl.n	8008ca0 <__swbuf_r+0x84>
 8008c40:	6923      	ldr	r3, [r4, #16]
 8008c42:	b36b      	cbz	r3, 8008ca0 <__swbuf_r+0x84>
 8008c44:	6923      	ldr	r3, [r4, #16]
 8008c46:	6820      	ldr	r0, [r4, #0]
 8008c48:	1ac0      	subs	r0, r0, r3
 8008c4a:	6963      	ldr	r3, [r4, #20]
 8008c4c:	b2f6      	uxtb	r6, r6
 8008c4e:	4283      	cmp	r3, r0
 8008c50:	4637      	mov	r7, r6
 8008c52:	dc04      	bgt.n	8008c5e <__swbuf_r+0x42>
 8008c54:	4621      	mov	r1, r4
 8008c56:	4628      	mov	r0, r5
 8008c58:	f7ff fce6 	bl	8008628 <_fflush_r>
 8008c5c:	bb30      	cbnz	r0, 8008cac <__swbuf_r+0x90>
 8008c5e:	68a3      	ldr	r3, [r4, #8]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	60a3      	str	r3, [r4, #8]
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	1c5a      	adds	r2, r3, #1
 8008c68:	6022      	str	r2, [r4, #0]
 8008c6a:	701e      	strb	r6, [r3, #0]
 8008c6c:	6963      	ldr	r3, [r4, #20]
 8008c6e:	3001      	adds	r0, #1
 8008c70:	4283      	cmp	r3, r0
 8008c72:	d004      	beq.n	8008c7e <__swbuf_r+0x62>
 8008c74:	89a3      	ldrh	r3, [r4, #12]
 8008c76:	07db      	lsls	r3, r3, #31
 8008c78:	d506      	bpl.n	8008c88 <__swbuf_r+0x6c>
 8008c7a:	2e0a      	cmp	r6, #10
 8008c7c:	d104      	bne.n	8008c88 <__swbuf_r+0x6c>
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4628      	mov	r0, r5
 8008c82:	f7ff fcd1 	bl	8008628 <_fflush_r>
 8008c86:	b988      	cbnz	r0, 8008cac <__swbuf_r+0x90>
 8008c88:	4638      	mov	r0, r7
 8008c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c8c:	4b0a      	ldr	r3, [pc, #40]	; (8008cb8 <__swbuf_r+0x9c>)
 8008c8e:	429c      	cmp	r4, r3
 8008c90:	d101      	bne.n	8008c96 <__swbuf_r+0x7a>
 8008c92:	68ac      	ldr	r4, [r5, #8]
 8008c94:	e7cf      	b.n	8008c36 <__swbuf_r+0x1a>
 8008c96:	4b09      	ldr	r3, [pc, #36]	; (8008cbc <__swbuf_r+0xa0>)
 8008c98:	429c      	cmp	r4, r3
 8008c9a:	bf08      	it	eq
 8008c9c:	68ec      	ldreq	r4, [r5, #12]
 8008c9e:	e7ca      	b.n	8008c36 <__swbuf_r+0x1a>
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	f000 f81a 	bl	8008cdc <__swsetup_r>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d0cb      	beq.n	8008c44 <__swbuf_r+0x28>
 8008cac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008cb0:	e7ea      	b.n	8008c88 <__swbuf_r+0x6c>
 8008cb2:	bf00      	nop
 8008cb4:	0800a378 	.word	0x0800a378
 8008cb8:	0800a398 	.word	0x0800a398
 8008cbc:	0800a358 	.word	0x0800a358

08008cc0 <__ascii_wctomb>:
 8008cc0:	b149      	cbz	r1, 8008cd6 <__ascii_wctomb+0x16>
 8008cc2:	2aff      	cmp	r2, #255	; 0xff
 8008cc4:	bf85      	ittet	hi
 8008cc6:	238a      	movhi	r3, #138	; 0x8a
 8008cc8:	6003      	strhi	r3, [r0, #0]
 8008cca:	700a      	strbls	r2, [r1, #0]
 8008ccc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008cd0:	bf98      	it	ls
 8008cd2:	2001      	movls	r0, #1
 8008cd4:	4770      	bx	lr
 8008cd6:	4608      	mov	r0, r1
 8008cd8:	4770      	bx	lr
	...

08008cdc <__swsetup_r>:
 8008cdc:	4b32      	ldr	r3, [pc, #200]	; (8008da8 <__swsetup_r+0xcc>)
 8008cde:	b570      	push	{r4, r5, r6, lr}
 8008ce0:	681d      	ldr	r5, [r3, #0]
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	b125      	cbz	r5, 8008cf2 <__swsetup_r+0x16>
 8008ce8:	69ab      	ldr	r3, [r5, #24]
 8008cea:	b913      	cbnz	r3, 8008cf2 <__swsetup_r+0x16>
 8008cec:	4628      	mov	r0, r5
 8008cee:	f7ff fd2f 	bl	8008750 <__sinit>
 8008cf2:	4b2e      	ldr	r3, [pc, #184]	; (8008dac <__swsetup_r+0xd0>)
 8008cf4:	429c      	cmp	r4, r3
 8008cf6:	d10f      	bne.n	8008d18 <__swsetup_r+0x3c>
 8008cf8:	686c      	ldr	r4, [r5, #4]
 8008cfa:	89a3      	ldrh	r3, [r4, #12]
 8008cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d00:	0719      	lsls	r1, r3, #28
 8008d02:	d42c      	bmi.n	8008d5e <__swsetup_r+0x82>
 8008d04:	06dd      	lsls	r5, r3, #27
 8008d06:	d411      	bmi.n	8008d2c <__swsetup_r+0x50>
 8008d08:	2309      	movs	r3, #9
 8008d0a:	6033      	str	r3, [r6, #0]
 8008d0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d10:	81a3      	strh	r3, [r4, #12]
 8008d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d16:	e03e      	b.n	8008d96 <__swsetup_r+0xba>
 8008d18:	4b25      	ldr	r3, [pc, #148]	; (8008db0 <__swsetup_r+0xd4>)
 8008d1a:	429c      	cmp	r4, r3
 8008d1c:	d101      	bne.n	8008d22 <__swsetup_r+0x46>
 8008d1e:	68ac      	ldr	r4, [r5, #8]
 8008d20:	e7eb      	b.n	8008cfa <__swsetup_r+0x1e>
 8008d22:	4b24      	ldr	r3, [pc, #144]	; (8008db4 <__swsetup_r+0xd8>)
 8008d24:	429c      	cmp	r4, r3
 8008d26:	bf08      	it	eq
 8008d28:	68ec      	ldreq	r4, [r5, #12]
 8008d2a:	e7e6      	b.n	8008cfa <__swsetup_r+0x1e>
 8008d2c:	0758      	lsls	r0, r3, #29
 8008d2e:	d512      	bpl.n	8008d56 <__swsetup_r+0x7a>
 8008d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d32:	b141      	cbz	r1, 8008d46 <__swsetup_r+0x6a>
 8008d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d38:	4299      	cmp	r1, r3
 8008d3a:	d002      	beq.n	8008d42 <__swsetup_r+0x66>
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	f7fc fd7f 	bl	8005840 <_free_r>
 8008d42:	2300      	movs	r3, #0
 8008d44:	6363      	str	r3, [r4, #52]	; 0x34
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d4c:	81a3      	strh	r3, [r4, #12]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	6063      	str	r3, [r4, #4]
 8008d52:	6923      	ldr	r3, [r4, #16]
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	89a3      	ldrh	r3, [r4, #12]
 8008d58:	f043 0308 	orr.w	r3, r3, #8
 8008d5c:	81a3      	strh	r3, [r4, #12]
 8008d5e:	6923      	ldr	r3, [r4, #16]
 8008d60:	b94b      	cbnz	r3, 8008d76 <__swsetup_r+0x9a>
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d6c:	d003      	beq.n	8008d76 <__swsetup_r+0x9a>
 8008d6e:	4621      	mov	r1, r4
 8008d70:	4630      	mov	r0, r6
 8008d72:	f000 f84d 	bl	8008e10 <__smakebuf_r>
 8008d76:	89a0      	ldrh	r0, [r4, #12]
 8008d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d7c:	f010 0301 	ands.w	r3, r0, #1
 8008d80:	d00a      	beq.n	8008d98 <__swsetup_r+0xbc>
 8008d82:	2300      	movs	r3, #0
 8008d84:	60a3      	str	r3, [r4, #8]
 8008d86:	6963      	ldr	r3, [r4, #20]
 8008d88:	425b      	negs	r3, r3
 8008d8a:	61a3      	str	r3, [r4, #24]
 8008d8c:	6923      	ldr	r3, [r4, #16]
 8008d8e:	b943      	cbnz	r3, 8008da2 <__swsetup_r+0xc6>
 8008d90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d94:	d1ba      	bne.n	8008d0c <__swsetup_r+0x30>
 8008d96:	bd70      	pop	{r4, r5, r6, pc}
 8008d98:	0781      	lsls	r1, r0, #30
 8008d9a:	bf58      	it	pl
 8008d9c:	6963      	ldrpl	r3, [r4, #20]
 8008d9e:	60a3      	str	r3, [r4, #8]
 8008da0:	e7f4      	b.n	8008d8c <__swsetup_r+0xb0>
 8008da2:	2000      	movs	r0, #0
 8008da4:	e7f7      	b.n	8008d96 <__swsetup_r+0xba>
 8008da6:	bf00      	nop
 8008da8:	20000010 	.word	0x20000010
 8008dac:	0800a378 	.word	0x0800a378
 8008db0:	0800a398 	.word	0x0800a398
 8008db4:	0800a358 	.word	0x0800a358

08008db8 <abort>:
 8008db8:	b508      	push	{r3, lr}
 8008dba:	2006      	movs	r0, #6
 8008dbc:	f000 f898 	bl	8008ef0 <raise>
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	f7f8 ff09 	bl	8001bd8 <_exit>

08008dc6 <__swhatbuf_r>:
 8008dc6:	b570      	push	{r4, r5, r6, lr}
 8008dc8:	460e      	mov	r6, r1
 8008dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dce:	2900      	cmp	r1, #0
 8008dd0:	b096      	sub	sp, #88	; 0x58
 8008dd2:	4614      	mov	r4, r2
 8008dd4:	461d      	mov	r5, r3
 8008dd6:	da08      	bge.n	8008dea <__swhatbuf_r+0x24>
 8008dd8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	602a      	str	r2, [r5, #0]
 8008de0:	061a      	lsls	r2, r3, #24
 8008de2:	d410      	bmi.n	8008e06 <__swhatbuf_r+0x40>
 8008de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008de8:	e00e      	b.n	8008e08 <__swhatbuf_r+0x42>
 8008dea:	466a      	mov	r2, sp
 8008dec:	f000 f89c 	bl	8008f28 <_fstat_r>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	dbf1      	blt.n	8008dd8 <__swhatbuf_r+0x12>
 8008df4:	9a01      	ldr	r2, [sp, #4]
 8008df6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008dfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008dfe:	425a      	negs	r2, r3
 8008e00:	415a      	adcs	r2, r3
 8008e02:	602a      	str	r2, [r5, #0]
 8008e04:	e7ee      	b.n	8008de4 <__swhatbuf_r+0x1e>
 8008e06:	2340      	movs	r3, #64	; 0x40
 8008e08:	2000      	movs	r0, #0
 8008e0a:	6023      	str	r3, [r4, #0]
 8008e0c:	b016      	add	sp, #88	; 0x58
 8008e0e:	bd70      	pop	{r4, r5, r6, pc}

08008e10 <__smakebuf_r>:
 8008e10:	898b      	ldrh	r3, [r1, #12]
 8008e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e14:	079d      	lsls	r5, r3, #30
 8008e16:	4606      	mov	r6, r0
 8008e18:	460c      	mov	r4, r1
 8008e1a:	d507      	bpl.n	8008e2c <__smakebuf_r+0x1c>
 8008e1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	6123      	str	r3, [r4, #16]
 8008e24:	2301      	movs	r3, #1
 8008e26:	6163      	str	r3, [r4, #20]
 8008e28:	b002      	add	sp, #8
 8008e2a:	bd70      	pop	{r4, r5, r6, pc}
 8008e2c:	ab01      	add	r3, sp, #4
 8008e2e:	466a      	mov	r2, sp
 8008e30:	f7ff ffc9 	bl	8008dc6 <__swhatbuf_r>
 8008e34:	9900      	ldr	r1, [sp, #0]
 8008e36:	4605      	mov	r5, r0
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f7fc fd6d 	bl	8005918 <_malloc_r>
 8008e3e:	b948      	cbnz	r0, 8008e54 <__smakebuf_r+0x44>
 8008e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e44:	059a      	lsls	r2, r3, #22
 8008e46:	d4ef      	bmi.n	8008e28 <__smakebuf_r+0x18>
 8008e48:	f023 0303 	bic.w	r3, r3, #3
 8008e4c:	f043 0302 	orr.w	r3, r3, #2
 8008e50:	81a3      	strh	r3, [r4, #12]
 8008e52:	e7e3      	b.n	8008e1c <__smakebuf_r+0xc>
 8008e54:	4b0d      	ldr	r3, [pc, #52]	; (8008e8c <__smakebuf_r+0x7c>)
 8008e56:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	6020      	str	r0, [r4, #0]
 8008e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e60:	81a3      	strh	r3, [r4, #12]
 8008e62:	9b00      	ldr	r3, [sp, #0]
 8008e64:	6163      	str	r3, [r4, #20]
 8008e66:	9b01      	ldr	r3, [sp, #4]
 8008e68:	6120      	str	r0, [r4, #16]
 8008e6a:	b15b      	cbz	r3, 8008e84 <__smakebuf_r+0x74>
 8008e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e70:	4630      	mov	r0, r6
 8008e72:	f000 f86b 	bl	8008f4c <_isatty_r>
 8008e76:	b128      	cbz	r0, 8008e84 <__smakebuf_r+0x74>
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	f023 0303 	bic.w	r3, r3, #3
 8008e7e:	f043 0301 	orr.w	r3, r3, #1
 8008e82:	81a3      	strh	r3, [r4, #12]
 8008e84:	89a0      	ldrh	r0, [r4, #12]
 8008e86:	4305      	orrs	r5, r0
 8008e88:	81a5      	strh	r5, [r4, #12]
 8008e8a:	e7cd      	b.n	8008e28 <__smakebuf_r+0x18>
 8008e8c:	080086e9 	.word	0x080086e9

08008e90 <_malloc_usable_size_r>:
 8008e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e94:	1f18      	subs	r0, r3, #4
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	bfbc      	itt	lt
 8008e9a:	580b      	ldrlt	r3, [r1, r0]
 8008e9c:	18c0      	addlt	r0, r0, r3
 8008e9e:	4770      	bx	lr

08008ea0 <_raise_r>:
 8008ea0:	291f      	cmp	r1, #31
 8008ea2:	b538      	push	{r3, r4, r5, lr}
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	460d      	mov	r5, r1
 8008ea8:	d904      	bls.n	8008eb4 <_raise_r+0x14>
 8008eaa:	2316      	movs	r3, #22
 8008eac:	6003      	str	r3, [r0, #0]
 8008eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eb2:	bd38      	pop	{r3, r4, r5, pc}
 8008eb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008eb6:	b112      	cbz	r2, 8008ebe <_raise_r+0x1e>
 8008eb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ebc:	b94b      	cbnz	r3, 8008ed2 <_raise_r+0x32>
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f000 f830 	bl	8008f24 <_getpid_r>
 8008ec4:	462a      	mov	r2, r5
 8008ec6:	4601      	mov	r1, r0
 8008ec8:	4620      	mov	r0, r4
 8008eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ece:	f000 b817 	b.w	8008f00 <_kill_r>
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d00a      	beq.n	8008eec <_raise_r+0x4c>
 8008ed6:	1c59      	adds	r1, r3, #1
 8008ed8:	d103      	bne.n	8008ee2 <_raise_r+0x42>
 8008eda:	2316      	movs	r3, #22
 8008edc:	6003      	str	r3, [r0, #0]
 8008ede:	2001      	movs	r0, #1
 8008ee0:	e7e7      	b.n	8008eb2 <_raise_r+0x12>
 8008ee2:	2400      	movs	r4, #0
 8008ee4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ee8:	4628      	mov	r0, r5
 8008eea:	4798      	blx	r3
 8008eec:	2000      	movs	r0, #0
 8008eee:	e7e0      	b.n	8008eb2 <_raise_r+0x12>

08008ef0 <raise>:
 8008ef0:	4b02      	ldr	r3, [pc, #8]	; (8008efc <raise+0xc>)
 8008ef2:	4601      	mov	r1, r0
 8008ef4:	6818      	ldr	r0, [r3, #0]
 8008ef6:	f7ff bfd3 	b.w	8008ea0 <_raise_r>
 8008efa:	bf00      	nop
 8008efc:	20000010 	.word	0x20000010

08008f00 <_kill_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4d07      	ldr	r5, [pc, #28]	; (8008f20 <_kill_r+0x20>)
 8008f04:	2300      	movs	r3, #0
 8008f06:	4604      	mov	r4, r0
 8008f08:	4608      	mov	r0, r1
 8008f0a:	4611      	mov	r1, r2
 8008f0c:	602b      	str	r3, [r5, #0]
 8008f0e:	f7f8 fe53 	bl	8001bb8 <_kill>
 8008f12:	1c43      	adds	r3, r0, #1
 8008f14:	d102      	bne.n	8008f1c <_kill_r+0x1c>
 8008f16:	682b      	ldr	r3, [r5, #0]
 8008f18:	b103      	cbz	r3, 8008f1c <_kill_r+0x1c>
 8008f1a:	6023      	str	r3, [r4, #0]
 8008f1c:	bd38      	pop	{r3, r4, r5, pc}
 8008f1e:	bf00      	nop
 8008f20:	200005b4 	.word	0x200005b4

08008f24 <_getpid_r>:
 8008f24:	f7f8 be40 	b.w	8001ba8 <_getpid>

08008f28 <_fstat_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	4d07      	ldr	r5, [pc, #28]	; (8008f48 <_fstat_r+0x20>)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4604      	mov	r4, r0
 8008f30:	4608      	mov	r0, r1
 8008f32:	4611      	mov	r1, r2
 8008f34:	602b      	str	r3, [r5, #0]
 8008f36:	f7f8 fe9e 	bl	8001c76 <_fstat>
 8008f3a:	1c43      	adds	r3, r0, #1
 8008f3c:	d102      	bne.n	8008f44 <_fstat_r+0x1c>
 8008f3e:	682b      	ldr	r3, [r5, #0]
 8008f40:	b103      	cbz	r3, 8008f44 <_fstat_r+0x1c>
 8008f42:	6023      	str	r3, [r4, #0]
 8008f44:	bd38      	pop	{r3, r4, r5, pc}
 8008f46:	bf00      	nop
 8008f48:	200005b4 	.word	0x200005b4

08008f4c <_isatty_r>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	4d06      	ldr	r5, [pc, #24]	; (8008f68 <_isatty_r+0x1c>)
 8008f50:	2300      	movs	r3, #0
 8008f52:	4604      	mov	r4, r0
 8008f54:	4608      	mov	r0, r1
 8008f56:	602b      	str	r3, [r5, #0]
 8008f58:	f7f8 fe9d 	bl	8001c96 <_isatty>
 8008f5c:	1c43      	adds	r3, r0, #1
 8008f5e:	d102      	bne.n	8008f66 <_isatty_r+0x1a>
 8008f60:	682b      	ldr	r3, [r5, #0]
 8008f62:	b103      	cbz	r3, 8008f66 <_isatty_r+0x1a>
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	bd38      	pop	{r3, r4, r5, pc}
 8008f68:	200005b4 	.word	0x200005b4

08008f6c <round>:
 8008f6c:	ec51 0b10 	vmov	r0, r1, d0
 8008f70:	b570      	push	{r4, r5, r6, lr}
 8008f72:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8008f76:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8008f7a:	2c13      	cmp	r4, #19
 8008f7c:	ee10 2a10 	vmov	r2, s0
 8008f80:	460b      	mov	r3, r1
 8008f82:	dc19      	bgt.n	8008fb8 <round+0x4c>
 8008f84:	2c00      	cmp	r4, #0
 8008f86:	da09      	bge.n	8008f9c <round+0x30>
 8008f88:	3401      	adds	r4, #1
 8008f8a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008f8e:	d103      	bne.n	8008f98 <round+0x2c>
 8008f90:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008f94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008f98:	2200      	movs	r2, #0
 8008f9a:	e028      	b.n	8008fee <round+0x82>
 8008f9c:	4d15      	ldr	r5, [pc, #84]	; (8008ff4 <round+0x88>)
 8008f9e:	4125      	asrs	r5, r4
 8008fa0:	ea01 0605 	and.w	r6, r1, r5
 8008fa4:	4332      	orrs	r2, r6
 8008fa6:	d00e      	beq.n	8008fc6 <round+0x5a>
 8008fa8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008fac:	fa42 f404 	asr.w	r4, r2, r4
 8008fb0:	4423      	add	r3, r4
 8008fb2:	ea23 0305 	bic.w	r3, r3, r5
 8008fb6:	e7ef      	b.n	8008f98 <round+0x2c>
 8008fb8:	2c33      	cmp	r4, #51	; 0x33
 8008fba:	dd07      	ble.n	8008fcc <round+0x60>
 8008fbc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008fc0:	d101      	bne.n	8008fc6 <round+0x5a>
 8008fc2:	f7f7 f97b 	bl	80002bc <__adddf3>
 8008fc6:	ec41 0b10 	vmov	d0, r0, r1
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
 8008fcc:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8008fd0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008fd4:	40f5      	lsrs	r5, r6
 8008fd6:	4228      	tst	r0, r5
 8008fd8:	d0f5      	beq.n	8008fc6 <round+0x5a>
 8008fda:	2101      	movs	r1, #1
 8008fdc:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8008fe0:	fa01 f404 	lsl.w	r4, r1, r4
 8008fe4:	1912      	adds	r2, r2, r4
 8008fe6:	bf28      	it	cs
 8008fe8:	185b      	addcs	r3, r3, r1
 8008fea:	ea22 0205 	bic.w	r2, r2, r5
 8008fee:	4619      	mov	r1, r3
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	e7e8      	b.n	8008fc6 <round+0x5a>
 8008ff4:	000fffff 	.word	0x000fffff

08008ff8 <pow>:
 8008ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffa:	ed2d 8b02 	vpush	{d8}
 8008ffe:	eeb0 8a40 	vmov.f32	s16, s0
 8009002:	eef0 8a60 	vmov.f32	s17, s1
 8009006:	ec55 4b11 	vmov	r4, r5, d1
 800900a:	f000 f865 	bl	80090d8 <__ieee754_pow>
 800900e:	4622      	mov	r2, r4
 8009010:	462b      	mov	r3, r5
 8009012:	4620      	mov	r0, r4
 8009014:	4629      	mov	r1, r5
 8009016:	ec57 6b10 	vmov	r6, r7, d0
 800901a:	f7f7 fd9f 	bl	8000b5c <__aeabi_dcmpun>
 800901e:	2800      	cmp	r0, #0
 8009020:	d13b      	bne.n	800909a <pow+0xa2>
 8009022:	ec51 0b18 	vmov	r0, r1, d8
 8009026:	2200      	movs	r2, #0
 8009028:	2300      	movs	r3, #0
 800902a:	f7f7 fd65 	bl	8000af8 <__aeabi_dcmpeq>
 800902e:	b1b8      	cbz	r0, 8009060 <pow+0x68>
 8009030:	2200      	movs	r2, #0
 8009032:	2300      	movs	r3, #0
 8009034:	4620      	mov	r0, r4
 8009036:	4629      	mov	r1, r5
 8009038:	f7f7 fd5e 	bl	8000af8 <__aeabi_dcmpeq>
 800903c:	2800      	cmp	r0, #0
 800903e:	d146      	bne.n	80090ce <pow+0xd6>
 8009040:	ec45 4b10 	vmov	d0, r4, r5
 8009044:	f000 fe61 	bl	8009d0a <finite>
 8009048:	b338      	cbz	r0, 800909a <pow+0xa2>
 800904a:	2200      	movs	r2, #0
 800904c:	2300      	movs	r3, #0
 800904e:	4620      	mov	r0, r4
 8009050:	4629      	mov	r1, r5
 8009052:	f7f7 fd5b 	bl	8000b0c <__aeabi_dcmplt>
 8009056:	b300      	cbz	r0, 800909a <pow+0xa2>
 8009058:	f7fc fbb8 	bl	80057cc <__errno>
 800905c:	2322      	movs	r3, #34	; 0x22
 800905e:	e01b      	b.n	8009098 <pow+0xa0>
 8009060:	ec47 6b10 	vmov	d0, r6, r7
 8009064:	f000 fe51 	bl	8009d0a <finite>
 8009068:	b9e0      	cbnz	r0, 80090a4 <pow+0xac>
 800906a:	eeb0 0a48 	vmov.f32	s0, s16
 800906e:	eef0 0a68 	vmov.f32	s1, s17
 8009072:	f000 fe4a 	bl	8009d0a <finite>
 8009076:	b1a8      	cbz	r0, 80090a4 <pow+0xac>
 8009078:	ec45 4b10 	vmov	d0, r4, r5
 800907c:	f000 fe45 	bl	8009d0a <finite>
 8009080:	b180      	cbz	r0, 80090a4 <pow+0xac>
 8009082:	4632      	mov	r2, r6
 8009084:	463b      	mov	r3, r7
 8009086:	4630      	mov	r0, r6
 8009088:	4639      	mov	r1, r7
 800908a:	f7f7 fd67 	bl	8000b5c <__aeabi_dcmpun>
 800908e:	2800      	cmp	r0, #0
 8009090:	d0e2      	beq.n	8009058 <pow+0x60>
 8009092:	f7fc fb9b 	bl	80057cc <__errno>
 8009096:	2321      	movs	r3, #33	; 0x21
 8009098:	6003      	str	r3, [r0, #0]
 800909a:	ecbd 8b02 	vpop	{d8}
 800909e:	ec47 6b10 	vmov	d0, r6, r7
 80090a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090a4:	2200      	movs	r2, #0
 80090a6:	2300      	movs	r3, #0
 80090a8:	4630      	mov	r0, r6
 80090aa:	4639      	mov	r1, r7
 80090ac:	f7f7 fd24 	bl	8000af8 <__aeabi_dcmpeq>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d0f2      	beq.n	800909a <pow+0xa2>
 80090b4:	eeb0 0a48 	vmov.f32	s0, s16
 80090b8:	eef0 0a68 	vmov.f32	s1, s17
 80090bc:	f000 fe25 	bl	8009d0a <finite>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d0ea      	beq.n	800909a <pow+0xa2>
 80090c4:	ec45 4b10 	vmov	d0, r4, r5
 80090c8:	f000 fe1f 	bl	8009d0a <finite>
 80090cc:	e7c3      	b.n	8009056 <pow+0x5e>
 80090ce:	4f01      	ldr	r7, [pc, #4]	; (80090d4 <pow+0xdc>)
 80090d0:	2600      	movs	r6, #0
 80090d2:	e7e2      	b.n	800909a <pow+0xa2>
 80090d4:	3ff00000 	.word	0x3ff00000

080090d8 <__ieee754_pow>:
 80090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	ed2d 8b06 	vpush	{d8-d10}
 80090e0:	b089      	sub	sp, #36	; 0x24
 80090e2:	ed8d 1b00 	vstr	d1, [sp]
 80090e6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80090ea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80090ee:	ea58 0102 	orrs.w	r1, r8, r2
 80090f2:	ec57 6b10 	vmov	r6, r7, d0
 80090f6:	d115      	bne.n	8009124 <__ieee754_pow+0x4c>
 80090f8:	19b3      	adds	r3, r6, r6
 80090fa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80090fe:	4152      	adcs	r2, r2
 8009100:	4299      	cmp	r1, r3
 8009102:	4b89      	ldr	r3, [pc, #548]	; (8009328 <__ieee754_pow+0x250>)
 8009104:	4193      	sbcs	r3, r2
 8009106:	f080 84d2 	bcs.w	8009aae <__ieee754_pow+0x9d6>
 800910a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800910e:	4630      	mov	r0, r6
 8009110:	4639      	mov	r1, r7
 8009112:	f7f7 f8d3 	bl	80002bc <__adddf3>
 8009116:	ec41 0b10 	vmov	d0, r0, r1
 800911a:	b009      	add	sp, #36	; 0x24
 800911c:	ecbd 8b06 	vpop	{d8-d10}
 8009120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009124:	4b81      	ldr	r3, [pc, #516]	; (800932c <__ieee754_pow+0x254>)
 8009126:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800912a:	429c      	cmp	r4, r3
 800912c:	ee10 aa10 	vmov	sl, s0
 8009130:	463d      	mov	r5, r7
 8009132:	dc06      	bgt.n	8009142 <__ieee754_pow+0x6a>
 8009134:	d101      	bne.n	800913a <__ieee754_pow+0x62>
 8009136:	2e00      	cmp	r6, #0
 8009138:	d1e7      	bne.n	800910a <__ieee754_pow+0x32>
 800913a:	4598      	cmp	r8, r3
 800913c:	dc01      	bgt.n	8009142 <__ieee754_pow+0x6a>
 800913e:	d10f      	bne.n	8009160 <__ieee754_pow+0x88>
 8009140:	b172      	cbz	r2, 8009160 <__ieee754_pow+0x88>
 8009142:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009146:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800914a:	ea55 050a 	orrs.w	r5, r5, sl
 800914e:	d1dc      	bne.n	800910a <__ieee754_pow+0x32>
 8009150:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009154:	18db      	adds	r3, r3, r3
 8009156:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800915a:	4152      	adcs	r2, r2
 800915c:	429d      	cmp	r5, r3
 800915e:	e7d0      	b.n	8009102 <__ieee754_pow+0x2a>
 8009160:	2d00      	cmp	r5, #0
 8009162:	da3b      	bge.n	80091dc <__ieee754_pow+0x104>
 8009164:	4b72      	ldr	r3, [pc, #456]	; (8009330 <__ieee754_pow+0x258>)
 8009166:	4598      	cmp	r8, r3
 8009168:	dc51      	bgt.n	800920e <__ieee754_pow+0x136>
 800916a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800916e:	4598      	cmp	r8, r3
 8009170:	f340 84ac 	ble.w	8009acc <__ieee754_pow+0x9f4>
 8009174:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009178:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800917c:	2b14      	cmp	r3, #20
 800917e:	dd0f      	ble.n	80091a0 <__ieee754_pow+0xc8>
 8009180:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009184:	fa22 f103 	lsr.w	r1, r2, r3
 8009188:	fa01 f303 	lsl.w	r3, r1, r3
 800918c:	4293      	cmp	r3, r2
 800918e:	f040 849d 	bne.w	8009acc <__ieee754_pow+0x9f4>
 8009192:	f001 0101 	and.w	r1, r1, #1
 8009196:	f1c1 0302 	rsb	r3, r1, #2
 800919a:	9304      	str	r3, [sp, #16]
 800919c:	b182      	cbz	r2, 80091c0 <__ieee754_pow+0xe8>
 800919e:	e05f      	b.n	8009260 <__ieee754_pow+0x188>
 80091a0:	2a00      	cmp	r2, #0
 80091a2:	d15b      	bne.n	800925c <__ieee754_pow+0x184>
 80091a4:	f1c3 0314 	rsb	r3, r3, #20
 80091a8:	fa48 f103 	asr.w	r1, r8, r3
 80091ac:	fa01 f303 	lsl.w	r3, r1, r3
 80091b0:	4543      	cmp	r3, r8
 80091b2:	f040 8488 	bne.w	8009ac6 <__ieee754_pow+0x9ee>
 80091b6:	f001 0101 	and.w	r1, r1, #1
 80091ba:	f1c1 0302 	rsb	r3, r1, #2
 80091be:	9304      	str	r3, [sp, #16]
 80091c0:	4b5c      	ldr	r3, [pc, #368]	; (8009334 <__ieee754_pow+0x25c>)
 80091c2:	4598      	cmp	r8, r3
 80091c4:	d132      	bne.n	800922c <__ieee754_pow+0x154>
 80091c6:	f1b9 0f00 	cmp.w	r9, #0
 80091ca:	f280 8478 	bge.w	8009abe <__ieee754_pow+0x9e6>
 80091ce:	4959      	ldr	r1, [pc, #356]	; (8009334 <__ieee754_pow+0x25c>)
 80091d0:	4632      	mov	r2, r6
 80091d2:	463b      	mov	r3, r7
 80091d4:	2000      	movs	r0, #0
 80091d6:	f7f7 fb51 	bl	800087c <__aeabi_ddiv>
 80091da:	e79c      	b.n	8009116 <__ieee754_pow+0x3e>
 80091dc:	2300      	movs	r3, #0
 80091de:	9304      	str	r3, [sp, #16]
 80091e0:	2a00      	cmp	r2, #0
 80091e2:	d13d      	bne.n	8009260 <__ieee754_pow+0x188>
 80091e4:	4b51      	ldr	r3, [pc, #324]	; (800932c <__ieee754_pow+0x254>)
 80091e6:	4598      	cmp	r8, r3
 80091e8:	d1ea      	bne.n	80091c0 <__ieee754_pow+0xe8>
 80091ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80091ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80091f2:	ea53 030a 	orrs.w	r3, r3, sl
 80091f6:	f000 845a 	beq.w	8009aae <__ieee754_pow+0x9d6>
 80091fa:	4b4f      	ldr	r3, [pc, #316]	; (8009338 <__ieee754_pow+0x260>)
 80091fc:	429c      	cmp	r4, r3
 80091fe:	dd08      	ble.n	8009212 <__ieee754_pow+0x13a>
 8009200:	f1b9 0f00 	cmp.w	r9, #0
 8009204:	f2c0 8457 	blt.w	8009ab6 <__ieee754_pow+0x9de>
 8009208:	e9dd 0100 	ldrd	r0, r1, [sp]
 800920c:	e783      	b.n	8009116 <__ieee754_pow+0x3e>
 800920e:	2302      	movs	r3, #2
 8009210:	e7e5      	b.n	80091de <__ieee754_pow+0x106>
 8009212:	f1b9 0f00 	cmp.w	r9, #0
 8009216:	f04f 0000 	mov.w	r0, #0
 800921a:	f04f 0100 	mov.w	r1, #0
 800921e:	f6bf af7a 	bge.w	8009116 <__ieee754_pow+0x3e>
 8009222:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009226:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800922a:	e774      	b.n	8009116 <__ieee754_pow+0x3e>
 800922c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009230:	d106      	bne.n	8009240 <__ieee754_pow+0x168>
 8009232:	4632      	mov	r2, r6
 8009234:	463b      	mov	r3, r7
 8009236:	4630      	mov	r0, r6
 8009238:	4639      	mov	r1, r7
 800923a:	f7f7 f9f5 	bl	8000628 <__aeabi_dmul>
 800923e:	e76a      	b.n	8009116 <__ieee754_pow+0x3e>
 8009240:	4b3e      	ldr	r3, [pc, #248]	; (800933c <__ieee754_pow+0x264>)
 8009242:	4599      	cmp	r9, r3
 8009244:	d10c      	bne.n	8009260 <__ieee754_pow+0x188>
 8009246:	2d00      	cmp	r5, #0
 8009248:	db0a      	blt.n	8009260 <__ieee754_pow+0x188>
 800924a:	ec47 6b10 	vmov	d0, r6, r7
 800924e:	b009      	add	sp, #36	; 0x24
 8009250:	ecbd 8b06 	vpop	{d8-d10}
 8009254:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009258:	f000 bc6c 	b.w	8009b34 <__ieee754_sqrt>
 800925c:	2300      	movs	r3, #0
 800925e:	9304      	str	r3, [sp, #16]
 8009260:	ec47 6b10 	vmov	d0, r6, r7
 8009264:	f000 fd48 	bl	8009cf8 <fabs>
 8009268:	ec51 0b10 	vmov	r0, r1, d0
 800926c:	f1ba 0f00 	cmp.w	sl, #0
 8009270:	d129      	bne.n	80092c6 <__ieee754_pow+0x1ee>
 8009272:	b124      	cbz	r4, 800927e <__ieee754_pow+0x1a6>
 8009274:	4b2f      	ldr	r3, [pc, #188]	; (8009334 <__ieee754_pow+0x25c>)
 8009276:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800927a:	429a      	cmp	r2, r3
 800927c:	d123      	bne.n	80092c6 <__ieee754_pow+0x1ee>
 800927e:	f1b9 0f00 	cmp.w	r9, #0
 8009282:	da05      	bge.n	8009290 <__ieee754_pow+0x1b8>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	2000      	movs	r0, #0
 800928a:	492a      	ldr	r1, [pc, #168]	; (8009334 <__ieee754_pow+0x25c>)
 800928c:	f7f7 faf6 	bl	800087c <__aeabi_ddiv>
 8009290:	2d00      	cmp	r5, #0
 8009292:	f6bf af40 	bge.w	8009116 <__ieee754_pow+0x3e>
 8009296:	9b04      	ldr	r3, [sp, #16]
 8009298:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800929c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80092a0:	4323      	orrs	r3, r4
 80092a2:	d108      	bne.n	80092b6 <__ieee754_pow+0x1de>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4610      	mov	r0, r2
 80092aa:	4619      	mov	r1, r3
 80092ac:	f7f7 f804 	bl	80002b8 <__aeabi_dsub>
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	e78f      	b.n	80091d6 <__ieee754_pow+0xfe>
 80092b6:	9b04      	ldr	r3, [sp, #16]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	f47f af2c 	bne.w	8009116 <__ieee754_pow+0x3e>
 80092be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092c2:	4619      	mov	r1, r3
 80092c4:	e727      	b.n	8009116 <__ieee754_pow+0x3e>
 80092c6:	0feb      	lsrs	r3, r5, #31
 80092c8:	3b01      	subs	r3, #1
 80092ca:	9306      	str	r3, [sp, #24]
 80092cc:	9a06      	ldr	r2, [sp, #24]
 80092ce:	9b04      	ldr	r3, [sp, #16]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	d102      	bne.n	80092da <__ieee754_pow+0x202>
 80092d4:	4632      	mov	r2, r6
 80092d6:	463b      	mov	r3, r7
 80092d8:	e7e6      	b.n	80092a8 <__ieee754_pow+0x1d0>
 80092da:	4b19      	ldr	r3, [pc, #100]	; (8009340 <__ieee754_pow+0x268>)
 80092dc:	4598      	cmp	r8, r3
 80092de:	f340 80fb 	ble.w	80094d8 <__ieee754_pow+0x400>
 80092e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80092e6:	4598      	cmp	r8, r3
 80092e8:	4b13      	ldr	r3, [pc, #76]	; (8009338 <__ieee754_pow+0x260>)
 80092ea:	dd0c      	ble.n	8009306 <__ieee754_pow+0x22e>
 80092ec:	429c      	cmp	r4, r3
 80092ee:	dc0f      	bgt.n	8009310 <__ieee754_pow+0x238>
 80092f0:	f1b9 0f00 	cmp.w	r9, #0
 80092f4:	da0f      	bge.n	8009316 <__ieee754_pow+0x23e>
 80092f6:	2000      	movs	r0, #0
 80092f8:	b009      	add	sp, #36	; 0x24
 80092fa:	ecbd 8b06 	vpop	{d8-d10}
 80092fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009302:	f000 bcf0 	b.w	8009ce6 <__math_oflow>
 8009306:	429c      	cmp	r4, r3
 8009308:	dbf2      	blt.n	80092f0 <__ieee754_pow+0x218>
 800930a:	4b0a      	ldr	r3, [pc, #40]	; (8009334 <__ieee754_pow+0x25c>)
 800930c:	429c      	cmp	r4, r3
 800930e:	dd19      	ble.n	8009344 <__ieee754_pow+0x26c>
 8009310:	f1b9 0f00 	cmp.w	r9, #0
 8009314:	dcef      	bgt.n	80092f6 <__ieee754_pow+0x21e>
 8009316:	2000      	movs	r0, #0
 8009318:	b009      	add	sp, #36	; 0x24
 800931a:	ecbd 8b06 	vpop	{d8-d10}
 800931e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009322:	f000 bcd7 	b.w	8009cd4 <__math_uflow>
 8009326:	bf00      	nop
 8009328:	fff00000 	.word	0xfff00000
 800932c:	7ff00000 	.word	0x7ff00000
 8009330:	433fffff 	.word	0x433fffff
 8009334:	3ff00000 	.word	0x3ff00000
 8009338:	3fefffff 	.word	0x3fefffff
 800933c:	3fe00000 	.word	0x3fe00000
 8009340:	41e00000 	.word	0x41e00000
 8009344:	4b60      	ldr	r3, [pc, #384]	; (80094c8 <__ieee754_pow+0x3f0>)
 8009346:	2200      	movs	r2, #0
 8009348:	f7f6 ffb6 	bl	80002b8 <__aeabi_dsub>
 800934c:	a354      	add	r3, pc, #336	; (adr r3, 80094a0 <__ieee754_pow+0x3c8>)
 800934e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009352:	4604      	mov	r4, r0
 8009354:	460d      	mov	r5, r1
 8009356:	f7f7 f967 	bl	8000628 <__aeabi_dmul>
 800935a:	a353      	add	r3, pc, #332	; (adr r3, 80094a8 <__ieee754_pow+0x3d0>)
 800935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009360:	4606      	mov	r6, r0
 8009362:	460f      	mov	r7, r1
 8009364:	4620      	mov	r0, r4
 8009366:	4629      	mov	r1, r5
 8009368:	f7f7 f95e 	bl	8000628 <__aeabi_dmul>
 800936c:	4b57      	ldr	r3, [pc, #348]	; (80094cc <__ieee754_pow+0x3f4>)
 800936e:	4682      	mov	sl, r0
 8009370:	468b      	mov	fp, r1
 8009372:	2200      	movs	r2, #0
 8009374:	4620      	mov	r0, r4
 8009376:	4629      	mov	r1, r5
 8009378:	f7f7 f956 	bl	8000628 <__aeabi_dmul>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	a14b      	add	r1, pc, #300	; (adr r1, 80094b0 <__ieee754_pow+0x3d8>)
 8009382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009386:	f7f6 ff97 	bl	80002b8 <__aeabi_dsub>
 800938a:	4622      	mov	r2, r4
 800938c:	462b      	mov	r3, r5
 800938e:	f7f7 f94b 	bl	8000628 <__aeabi_dmul>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	2000      	movs	r0, #0
 8009398:	494d      	ldr	r1, [pc, #308]	; (80094d0 <__ieee754_pow+0x3f8>)
 800939a:	f7f6 ff8d 	bl	80002b8 <__aeabi_dsub>
 800939e:	4622      	mov	r2, r4
 80093a0:	4680      	mov	r8, r0
 80093a2:	4689      	mov	r9, r1
 80093a4:	462b      	mov	r3, r5
 80093a6:	4620      	mov	r0, r4
 80093a8:	4629      	mov	r1, r5
 80093aa:	f7f7 f93d 	bl	8000628 <__aeabi_dmul>
 80093ae:	4602      	mov	r2, r0
 80093b0:	460b      	mov	r3, r1
 80093b2:	4640      	mov	r0, r8
 80093b4:	4649      	mov	r1, r9
 80093b6:	f7f7 f937 	bl	8000628 <__aeabi_dmul>
 80093ba:	a33f      	add	r3, pc, #252	; (adr r3, 80094b8 <__ieee754_pow+0x3e0>)
 80093bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c0:	f7f7 f932 	bl	8000628 <__aeabi_dmul>
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4650      	mov	r0, sl
 80093ca:	4659      	mov	r1, fp
 80093cc:	f7f6 ff74 	bl	80002b8 <__aeabi_dsub>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	4680      	mov	r8, r0
 80093d6:	4689      	mov	r9, r1
 80093d8:	4630      	mov	r0, r6
 80093da:	4639      	mov	r1, r7
 80093dc:	f7f6 ff6e 	bl	80002bc <__adddf3>
 80093e0:	2000      	movs	r0, #0
 80093e2:	4632      	mov	r2, r6
 80093e4:	463b      	mov	r3, r7
 80093e6:	4604      	mov	r4, r0
 80093e8:	460d      	mov	r5, r1
 80093ea:	f7f6 ff65 	bl	80002b8 <__aeabi_dsub>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4640      	mov	r0, r8
 80093f4:	4649      	mov	r1, r9
 80093f6:	f7f6 ff5f 	bl	80002b8 <__aeabi_dsub>
 80093fa:	9b04      	ldr	r3, [sp, #16]
 80093fc:	9a06      	ldr	r2, [sp, #24]
 80093fe:	3b01      	subs	r3, #1
 8009400:	4313      	orrs	r3, r2
 8009402:	4682      	mov	sl, r0
 8009404:	468b      	mov	fp, r1
 8009406:	f040 81e7 	bne.w	80097d8 <__ieee754_pow+0x700>
 800940a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80094c0 <__ieee754_pow+0x3e8>
 800940e:	eeb0 8a47 	vmov.f32	s16, s14
 8009412:	eef0 8a67 	vmov.f32	s17, s15
 8009416:	e9dd 6700 	ldrd	r6, r7, [sp]
 800941a:	2600      	movs	r6, #0
 800941c:	4632      	mov	r2, r6
 800941e:	463b      	mov	r3, r7
 8009420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009424:	f7f6 ff48 	bl	80002b8 <__aeabi_dsub>
 8009428:	4622      	mov	r2, r4
 800942a:	462b      	mov	r3, r5
 800942c:	f7f7 f8fc 	bl	8000628 <__aeabi_dmul>
 8009430:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009434:	4680      	mov	r8, r0
 8009436:	4689      	mov	r9, r1
 8009438:	4650      	mov	r0, sl
 800943a:	4659      	mov	r1, fp
 800943c:	f7f7 f8f4 	bl	8000628 <__aeabi_dmul>
 8009440:	4602      	mov	r2, r0
 8009442:	460b      	mov	r3, r1
 8009444:	4640      	mov	r0, r8
 8009446:	4649      	mov	r1, r9
 8009448:	f7f6 ff38 	bl	80002bc <__adddf3>
 800944c:	4632      	mov	r2, r6
 800944e:	463b      	mov	r3, r7
 8009450:	4680      	mov	r8, r0
 8009452:	4689      	mov	r9, r1
 8009454:	4620      	mov	r0, r4
 8009456:	4629      	mov	r1, r5
 8009458:	f7f7 f8e6 	bl	8000628 <__aeabi_dmul>
 800945c:	460b      	mov	r3, r1
 800945e:	4604      	mov	r4, r0
 8009460:	460d      	mov	r5, r1
 8009462:	4602      	mov	r2, r0
 8009464:	4649      	mov	r1, r9
 8009466:	4640      	mov	r0, r8
 8009468:	f7f6 ff28 	bl	80002bc <__adddf3>
 800946c:	4b19      	ldr	r3, [pc, #100]	; (80094d4 <__ieee754_pow+0x3fc>)
 800946e:	4299      	cmp	r1, r3
 8009470:	ec45 4b19 	vmov	d9, r4, r5
 8009474:	4606      	mov	r6, r0
 8009476:	460f      	mov	r7, r1
 8009478:	468b      	mov	fp, r1
 800947a:	f340 82f1 	ble.w	8009a60 <__ieee754_pow+0x988>
 800947e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009482:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009486:	4303      	orrs	r3, r0
 8009488:	f000 81e4 	beq.w	8009854 <__ieee754_pow+0x77c>
 800948c:	ec51 0b18 	vmov	r0, r1, d8
 8009490:	2200      	movs	r2, #0
 8009492:	2300      	movs	r3, #0
 8009494:	f7f7 fb3a 	bl	8000b0c <__aeabi_dcmplt>
 8009498:	3800      	subs	r0, #0
 800949a:	bf18      	it	ne
 800949c:	2001      	movne	r0, #1
 800949e:	e72b      	b.n	80092f8 <__ieee754_pow+0x220>
 80094a0:	60000000 	.word	0x60000000
 80094a4:	3ff71547 	.word	0x3ff71547
 80094a8:	f85ddf44 	.word	0xf85ddf44
 80094ac:	3e54ae0b 	.word	0x3e54ae0b
 80094b0:	55555555 	.word	0x55555555
 80094b4:	3fd55555 	.word	0x3fd55555
 80094b8:	652b82fe 	.word	0x652b82fe
 80094bc:	3ff71547 	.word	0x3ff71547
 80094c0:	00000000 	.word	0x00000000
 80094c4:	bff00000 	.word	0xbff00000
 80094c8:	3ff00000 	.word	0x3ff00000
 80094cc:	3fd00000 	.word	0x3fd00000
 80094d0:	3fe00000 	.word	0x3fe00000
 80094d4:	408fffff 	.word	0x408fffff
 80094d8:	4bd5      	ldr	r3, [pc, #852]	; (8009830 <__ieee754_pow+0x758>)
 80094da:	402b      	ands	r3, r5
 80094dc:	2200      	movs	r2, #0
 80094de:	b92b      	cbnz	r3, 80094ec <__ieee754_pow+0x414>
 80094e0:	4bd4      	ldr	r3, [pc, #848]	; (8009834 <__ieee754_pow+0x75c>)
 80094e2:	f7f7 f8a1 	bl	8000628 <__aeabi_dmul>
 80094e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80094ea:	460c      	mov	r4, r1
 80094ec:	1523      	asrs	r3, r4, #20
 80094ee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80094f2:	4413      	add	r3, r2
 80094f4:	9305      	str	r3, [sp, #20]
 80094f6:	4bd0      	ldr	r3, [pc, #832]	; (8009838 <__ieee754_pow+0x760>)
 80094f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80094fc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009500:	429c      	cmp	r4, r3
 8009502:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009506:	dd08      	ble.n	800951a <__ieee754_pow+0x442>
 8009508:	4bcc      	ldr	r3, [pc, #816]	; (800983c <__ieee754_pow+0x764>)
 800950a:	429c      	cmp	r4, r3
 800950c:	f340 8162 	ble.w	80097d4 <__ieee754_pow+0x6fc>
 8009510:	9b05      	ldr	r3, [sp, #20]
 8009512:	3301      	adds	r3, #1
 8009514:	9305      	str	r3, [sp, #20]
 8009516:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800951a:	2400      	movs	r4, #0
 800951c:	00e3      	lsls	r3, r4, #3
 800951e:	9307      	str	r3, [sp, #28]
 8009520:	4bc7      	ldr	r3, [pc, #796]	; (8009840 <__ieee754_pow+0x768>)
 8009522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009526:	ed93 7b00 	vldr	d7, [r3]
 800952a:	4629      	mov	r1, r5
 800952c:	ec53 2b17 	vmov	r2, r3, d7
 8009530:	eeb0 9a47 	vmov.f32	s18, s14
 8009534:	eef0 9a67 	vmov.f32	s19, s15
 8009538:	4682      	mov	sl, r0
 800953a:	f7f6 febd 	bl	80002b8 <__aeabi_dsub>
 800953e:	4652      	mov	r2, sl
 8009540:	4606      	mov	r6, r0
 8009542:	460f      	mov	r7, r1
 8009544:	462b      	mov	r3, r5
 8009546:	ec51 0b19 	vmov	r0, r1, d9
 800954a:	f7f6 feb7 	bl	80002bc <__adddf3>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	2000      	movs	r0, #0
 8009554:	49bb      	ldr	r1, [pc, #748]	; (8009844 <__ieee754_pow+0x76c>)
 8009556:	f7f7 f991 	bl	800087c <__aeabi_ddiv>
 800955a:	ec41 0b1a 	vmov	d10, r0, r1
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
 8009562:	4630      	mov	r0, r6
 8009564:	4639      	mov	r1, r7
 8009566:	f7f7 f85f 	bl	8000628 <__aeabi_dmul>
 800956a:	2300      	movs	r3, #0
 800956c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009570:	9302      	str	r3, [sp, #8]
 8009572:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009576:	46ab      	mov	fp, r5
 8009578:	106d      	asrs	r5, r5, #1
 800957a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800957e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009582:	ec41 0b18 	vmov	d8, r0, r1
 8009586:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800958a:	2200      	movs	r2, #0
 800958c:	4640      	mov	r0, r8
 800958e:	4649      	mov	r1, r9
 8009590:	4614      	mov	r4, r2
 8009592:	461d      	mov	r5, r3
 8009594:	f7f7 f848 	bl	8000628 <__aeabi_dmul>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4630      	mov	r0, r6
 800959e:	4639      	mov	r1, r7
 80095a0:	f7f6 fe8a 	bl	80002b8 <__aeabi_dsub>
 80095a4:	ec53 2b19 	vmov	r2, r3, d9
 80095a8:	4606      	mov	r6, r0
 80095aa:	460f      	mov	r7, r1
 80095ac:	4620      	mov	r0, r4
 80095ae:	4629      	mov	r1, r5
 80095b0:	f7f6 fe82 	bl	80002b8 <__aeabi_dsub>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	4650      	mov	r0, sl
 80095ba:	4659      	mov	r1, fp
 80095bc:	f7f6 fe7c 	bl	80002b8 <__aeabi_dsub>
 80095c0:	4642      	mov	r2, r8
 80095c2:	464b      	mov	r3, r9
 80095c4:	f7f7 f830 	bl	8000628 <__aeabi_dmul>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4630      	mov	r0, r6
 80095ce:	4639      	mov	r1, r7
 80095d0:	f7f6 fe72 	bl	80002b8 <__aeabi_dsub>
 80095d4:	ec53 2b1a 	vmov	r2, r3, d10
 80095d8:	f7f7 f826 	bl	8000628 <__aeabi_dmul>
 80095dc:	ec53 2b18 	vmov	r2, r3, d8
 80095e0:	ec41 0b19 	vmov	d9, r0, r1
 80095e4:	ec51 0b18 	vmov	r0, r1, d8
 80095e8:	f7f7 f81e 	bl	8000628 <__aeabi_dmul>
 80095ec:	a37c      	add	r3, pc, #496	; (adr r3, 80097e0 <__ieee754_pow+0x708>)
 80095ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f2:	4604      	mov	r4, r0
 80095f4:	460d      	mov	r5, r1
 80095f6:	f7f7 f817 	bl	8000628 <__aeabi_dmul>
 80095fa:	a37b      	add	r3, pc, #492	; (adr r3, 80097e8 <__ieee754_pow+0x710>)
 80095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009600:	f7f6 fe5c 	bl	80002bc <__adddf3>
 8009604:	4622      	mov	r2, r4
 8009606:	462b      	mov	r3, r5
 8009608:	f7f7 f80e 	bl	8000628 <__aeabi_dmul>
 800960c:	a378      	add	r3, pc, #480	; (adr r3, 80097f0 <__ieee754_pow+0x718>)
 800960e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009612:	f7f6 fe53 	bl	80002bc <__adddf3>
 8009616:	4622      	mov	r2, r4
 8009618:	462b      	mov	r3, r5
 800961a:	f7f7 f805 	bl	8000628 <__aeabi_dmul>
 800961e:	a376      	add	r3, pc, #472	; (adr r3, 80097f8 <__ieee754_pow+0x720>)
 8009620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009624:	f7f6 fe4a 	bl	80002bc <__adddf3>
 8009628:	4622      	mov	r2, r4
 800962a:	462b      	mov	r3, r5
 800962c:	f7f6 fffc 	bl	8000628 <__aeabi_dmul>
 8009630:	a373      	add	r3, pc, #460	; (adr r3, 8009800 <__ieee754_pow+0x728>)
 8009632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009636:	f7f6 fe41 	bl	80002bc <__adddf3>
 800963a:	4622      	mov	r2, r4
 800963c:	462b      	mov	r3, r5
 800963e:	f7f6 fff3 	bl	8000628 <__aeabi_dmul>
 8009642:	a371      	add	r3, pc, #452	; (adr r3, 8009808 <__ieee754_pow+0x730>)
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	f7f6 fe38 	bl	80002bc <__adddf3>
 800964c:	4622      	mov	r2, r4
 800964e:	4606      	mov	r6, r0
 8009650:	460f      	mov	r7, r1
 8009652:	462b      	mov	r3, r5
 8009654:	4620      	mov	r0, r4
 8009656:	4629      	mov	r1, r5
 8009658:	f7f6 ffe6 	bl	8000628 <__aeabi_dmul>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	4630      	mov	r0, r6
 8009662:	4639      	mov	r1, r7
 8009664:	f7f6 ffe0 	bl	8000628 <__aeabi_dmul>
 8009668:	4642      	mov	r2, r8
 800966a:	4604      	mov	r4, r0
 800966c:	460d      	mov	r5, r1
 800966e:	464b      	mov	r3, r9
 8009670:	ec51 0b18 	vmov	r0, r1, d8
 8009674:	f7f6 fe22 	bl	80002bc <__adddf3>
 8009678:	ec53 2b19 	vmov	r2, r3, d9
 800967c:	f7f6 ffd4 	bl	8000628 <__aeabi_dmul>
 8009680:	4622      	mov	r2, r4
 8009682:	462b      	mov	r3, r5
 8009684:	f7f6 fe1a 	bl	80002bc <__adddf3>
 8009688:	4642      	mov	r2, r8
 800968a:	4682      	mov	sl, r0
 800968c:	468b      	mov	fp, r1
 800968e:	464b      	mov	r3, r9
 8009690:	4640      	mov	r0, r8
 8009692:	4649      	mov	r1, r9
 8009694:	f7f6 ffc8 	bl	8000628 <__aeabi_dmul>
 8009698:	4b6b      	ldr	r3, [pc, #428]	; (8009848 <__ieee754_pow+0x770>)
 800969a:	2200      	movs	r2, #0
 800969c:	4606      	mov	r6, r0
 800969e:	460f      	mov	r7, r1
 80096a0:	f7f6 fe0c 	bl	80002bc <__adddf3>
 80096a4:	4652      	mov	r2, sl
 80096a6:	465b      	mov	r3, fp
 80096a8:	f7f6 fe08 	bl	80002bc <__adddf3>
 80096ac:	2000      	movs	r0, #0
 80096ae:	4604      	mov	r4, r0
 80096b0:	460d      	mov	r5, r1
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4640      	mov	r0, r8
 80096b8:	4649      	mov	r1, r9
 80096ba:	f7f6 ffb5 	bl	8000628 <__aeabi_dmul>
 80096be:	4b62      	ldr	r3, [pc, #392]	; (8009848 <__ieee754_pow+0x770>)
 80096c0:	4680      	mov	r8, r0
 80096c2:	4689      	mov	r9, r1
 80096c4:	2200      	movs	r2, #0
 80096c6:	4620      	mov	r0, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	f7f6 fdf5 	bl	80002b8 <__aeabi_dsub>
 80096ce:	4632      	mov	r2, r6
 80096d0:	463b      	mov	r3, r7
 80096d2:	f7f6 fdf1 	bl	80002b8 <__aeabi_dsub>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	4650      	mov	r0, sl
 80096dc:	4659      	mov	r1, fp
 80096de:	f7f6 fdeb 	bl	80002b8 <__aeabi_dsub>
 80096e2:	ec53 2b18 	vmov	r2, r3, d8
 80096e6:	f7f6 ff9f 	bl	8000628 <__aeabi_dmul>
 80096ea:	4622      	mov	r2, r4
 80096ec:	4606      	mov	r6, r0
 80096ee:	460f      	mov	r7, r1
 80096f0:	462b      	mov	r3, r5
 80096f2:	ec51 0b19 	vmov	r0, r1, d9
 80096f6:	f7f6 ff97 	bl	8000628 <__aeabi_dmul>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	4630      	mov	r0, r6
 8009700:	4639      	mov	r1, r7
 8009702:	f7f6 fddb 	bl	80002bc <__adddf3>
 8009706:	4606      	mov	r6, r0
 8009708:	460f      	mov	r7, r1
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	4640      	mov	r0, r8
 8009710:	4649      	mov	r1, r9
 8009712:	f7f6 fdd3 	bl	80002bc <__adddf3>
 8009716:	a33e      	add	r3, pc, #248	; (adr r3, 8009810 <__ieee754_pow+0x738>)
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	2000      	movs	r0, #0
 800971e:	4604      	mov	r4, r0
 8009720:	460d      	mov	r5, r1
 8009722:	f7f6 ff81 	bl	8000628 <__aeabi_dmul>
 8009726:	4642      	mov	r2, r8
 8009728:	ec41 0b18 	vmov	d8, r0, r1
 800972c:	464b      	mov	r3, r9
 800972e:	4620      	mov	r0, r4
 8009730:	4629      	mov	r1, r5
 8009732:	f7f6 fdc1 	bl	80002b8 <__aeabi_dsub>
 8009736:	4602      	mov	r2, r0
 8009738:	460b      	mov	r3, r1
 800973a:	4630      	mov	r0, r6
 800973c:	4639      	mov	r1, r7
 800973e:	f7f6 fdbb 	bl	80002b8 <__aeabi_dsub>
 8009742:	a335      	add	r3, pc, #212	; (adr r3, 8009818 <__ieee754_pow+0x740>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	f7f6 ff6e 	bl	8000628 <__aeabi_dmul>
 800974c:	a334      	add	r3, pc, #208	; (adr r3, 8009820 <__ieee754_pow+0x748>)
 800974e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009752:	4606      	mov	r6, r0
 8009754:	460f      	mov	r7, r1
 8009756:	4620      	mov	r0, r4
 8009758:	4629      	mov	r1, r5
 800975a:	f7f6 ff65 	bl	8000628 <__aeabi_dmul>
 800975e:	4602      	mov	r2, r0
 8009760:	460b      	mov	r3, r1
 8009762:	4630      	mov	r0, r6
 8009764:	4639      	mov	r1, r7
 8009766:	f7f6 fda9 	bl	80002bc <__adddf3>
 800976a:	9a07      	ldr	r2, [sp, #28]
 800976c:	4b37      	ldr	r3, [pc, #220]	; (800984c <__ieee754_pow+0x774>)
 800976e:	4413      	add	r3, r2
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	f7f6 fda2 	bl	80002bc <__adddf3>
 8009778:	4682      	mov	sl, r0
 800977a:	9805      	ldr	r0, [sp, #20]
 800977c:	468b      	mov	fp, r1
 800977e:	f7f6 fee9 	bl	8000554 <__aeabi_i2d>
 8009782:	9a07      	ldr	r2, [sp, #28]
 8009784:	4b32      	ldr	r3, [pc, #200]	; (8009850 <__ieee754_pow+0x778>)
 8009786:	4413      	add	r3, r2
 8009788:	e9d3 8900 	ldrd	r8, r9, [r3]
 800978c:	4606      	mov	r6, r0
 800978e:	460f      	mov	r7, r1
 8009790:	4652      	mov	r2, sl
 8009792:	465b      	mov	r3, fp
 8009794:	ec51 0b18 	vmov	r0, r1, d8
 8009798:	f7f6 fd90 	bl	80002bc <__adddf3>
 800979c:	4642      	mov	r2, r8
 800979e:	464b      	mov	r3, r9
 80097a0:	f7f6 fd8c 	bl	80002bc <__adddf3>
 80097a4:	4632      	mov	r2, r6
 80097a6:	463b      	mov	r3, r7
 80097a8:	f7f6 fd88 	bl	80002bc <__adddf3>
 80097ac:	2000      	movs	r0, #0
 80097ae:	4632      	mov	r2, r6
 80097b0:	463b      	mov	r3, r7
 80097b2:	4604      	mov	r4, r0
 80097b4:	460d      	mov	r5, r1
 80097b6:	f7f6 fd7f 	bl	80002b8 <__aeabi_dsub>
 80097ba:	4642      	mov	r2, r8
 80097bc:	464b      	mov	r3, r9
 80097be:	f7f6 fd7b 	bl	80002b8 <__aeabi_dsub>
 80097c2:	ec53 2b18 	vmov	r2, r3, d8
 80097c6:	f7f6 fd77 	bl	80002b8 <__aeabi_dsub>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	4650      	mov	r0, sl
 80097d0:	4659      	mov	r1, fp
 80097d2:	e610      	b.n	80093f6 <__ieee754_pow+0x31e>
 80097d4:	2401      	movs	r4, #1
 80097d6:	e6a1      	b.n	800951c <__ieee754_pow+0x444>
 80097d8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009828 <__ieee754_pow+0x750>
 80097dc:	e617      	b.n	800940e <__ieee754_pow+0x336>
 80097de:	bf00      	nop
 80097e0:	4a454eef 	.word	0x4a454eef
 80097e4:	3fca7e28 	.word	0x3fca7e28
 80097e8:	93c9db65 	.word	0x93c9db65
 80097ec:	3fcd864a 	.word	0x3fcd864a
 80097f0:	a91d4101 	.word	0xa91d4101
 80097f4:	3fd17460 	.word	0x3fd17460
 80097f8:	518f264d 	.word	0x518f264d
 80097fc:	3fd55555 	.word	0x3fd55555
 8009800:	db6fabff 	.word	0xdb6fabff
 8009804:	3fdb6db6 	.word	0x3fdb6db6
 8009808:	33333303 	.word	0x33333303
 800980c:	3fe33333 	.word	0x3fe33333
 8009810:	e0000000 	.word	0xe0000000
 8009814:	3feec709 	.word	0x3feec709
 8009818:	dc3a03fd 	.word	0xdc3a03fd
 800981c:	3feec709 	.word	0x3feec709
 8009820:	145b01f5 	.word	0x145b01f5
 8009824:	be3e2fe0 	.word	0xbe3e2fe0
 8009828:	00000000 	.word	0x00000000
 800982c:	3ff00000 	.word	0x3ff00000
 8009830:	7ff00000 	.word	0x7ff00000
 8009834:	43400000 	.word	0x43400000
 8009838:	0003988e 	.word	0x0003988e
 800983c:	000bb679 	.word	0x000bb679
 8009840:	0800a3c8 	.word	0x0800a3c8
 8009844:	3ff00000 	.word	0x3ff00000
 8009848:	40080000 	.word	0x40080000
 800984c:	0800a3e8 	.word	0x0800a3e8
 8009850:	0800a3d8 	.word	0x0800a3d8
 8009854:	a3b5      	add	r3, pc, #724	; (adr r3, 8009b2c <__ieee754_pow+0xa54>)
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	4640      	mov	r0, r8
 800985c:	4649      	mov	r1, r9
 800985e:	f7f6 fd2d 	bl	80002bc <__adddf3>
 8009862:	4622      	mov	r2, r4
 8009864:	ec41 0b1a 	vmov	d10, r0, r1
 8009868:	462b      	mov	r3, r5
 800986a:	4630      	mov	r0, r6
 800986c:	4639      	mov	r1, r7
 800986e:	f7f6 fd23 	bl	80002b8 <__aeabi_dsub>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	ec51 0b1a 	vmov	r0, r1, d10
 800987a:	f7f7 f965 	bl	8000b48 <__aeabi_dcmpgt>
 800987e:	2800      	cmp	r0, #0
 8009880:	f47f ae04 	bne.w	800948c <__ieee754_pow+0x3b4>
 8009884:	4aa4      	ldr	r2, [pc, #656]	; (8009b18 <__ieee754_pow+0xa40>)
 8009886:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800988a:	4293      	cmp	r3, r2
 800988c:	f340 8108 	ble.w	8009aa0 <__ieee754_pow+0x9c8>
 8009890:	151b      	asrs	r3, r3, #20
 8009892:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009896:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800989a:	fa4a f303 	asr.w	r3, sl, r3
 800989e:	445b      	add	r3, fp
 80098a0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80098a4:	4e9d      	ldr	r6, [pc, #628]	; (8009b1c <__ieee754_pow+0xa44>)
 80098a6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80098aa:	4116      	asrs	r6, r2
 80098ac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80098b0:	2000      	movs	r0, #0
 80098b2:	ea23 0106 	bic.w	r1, r3, r6
 80098b6:	f1c2 0214 	rsb	r2, r2, #20
 80098ba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80098be:	fa4a fa02 	asr.w	sl, sl, r2
 80098c2:	f1bb 0f00 	cmp.w	fp, #0
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	4620      	mov	r0, r4
 80098cc:	4629      	mov	r1, r5
 80098ce:	bfb8      	it	lt
 80098d0:	f1ca 0a00 	rsblt	sl, sl, #0
 80098d4:	f7f6 fcf0 	bl	80002b8 <__aeabi_dsub>
 80098d8:	ec41 0b19 	vmov	d9, r0, r1
 80098dc:	4642      	mov	r2, r8
 80098de:	464b      	mov	r3, r9
 80098e0:	ec51 0b19 	vmov	r0, r1, d9
 80098e4:	f7f6 fcea 	bl	80002bc <__adddf3>
 80098e8:	a37b      	add	r3, pc, #492	; (adr r3, 8009ad8 <__ieee754_pow+0xa00>)
 80098ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ee:	2000      	movs	r0, #0
 80098f0:	4604      	mov	r4, r0
 80098f2:	460d      	mov	r5, r1
 80098f4:	f7f6 fe98 	bl	8000628 <__aeabi_dmul>
 80098f8:	ec53 2b19 	vmov	r2, r3, d9
 80098fc:	4606      	mov	r6, r0
 80098fe:	460f      	mov	r7, r1
 8009900:	4620      	mov	r0, r4
 8009902:	4629      	mov	r1, r5
 8009904:	f7f6 fcd8 	bl	80002b8 <__aeabi_dsub>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	4640      	mov	r0, r8
 800990e:	4649      	mov	r1, r9
 8009910:	f7f6 fcd2 	bl	80002b8 <__aeabi_dsub>
 8009914:	a372      	add	r3, pc, #456	; (adr r3, 8009ae0 <__ieee754_pow+0xa08>)
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f7f6 fe85 	bl	8000628 <__aeabi_dmul>
 800991e:	a372      	add	r3, pc, #456	; (adr r3, 8009ae8 <__ieee754_pow+0xa10>)
 8009920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009924:	4680      	mov	r8, r0
 8009926:	4689      	mov	r9, r1
 8009928:	4620      	mov	r0, r4
 800992a:	4629      	mov	r1, r5
 800992c:	f7f6 fe7c 	bl	8000628 <__aeabi_dmul>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4640      	mov	r0, r8
 8009936:	4649      	mov	r1, r9
 8009938:	f7f6 fcc0 	bl	80002bc <__adddf3>
 800993c:	4604      	mov	r4, r0
 800993e:	460d      	mov	r5, r1
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4630      	mov	r0, r6
 8009946:	4639      	mov	r1, r7
 8009948:	f7f6 fcb8 	bl	80002bc <__adddf3>
 800994c:	4632      	mov	r2, r6
 800994e:	463b      	mov	r3, r7
 8009950:	4680      	mov	r8, r0
 8009952:	4689      	mov	r9, r1
 8009954:	f7f6 fcb0 	bl	80002b8 <__aeabi_dsub>
 8009958:	4602      	mov	r2, r0
 800995a:	460b      	mov	r3, r1
 800995c:	4620      	mov	r0, r4
 800995e:	4629      	mov	r1, r5
 8009960:	f7f6 fcaa 	bl	80002b8 <__aeabi_dsub>
 8009964:	4642      	mov	r2, r8
 8009966:	4606      	mov	r6, r0
 8009968:	460f      	mov	r7, r1
 800996a:	464b      	mov	r3, r9
 800996c:	4640      	mov	r0, r8
 800996e:	4649      	mov	r1, r9
 8009970:	f7f6 fe5a 	bl	8000628 <__aeabi_dmul>
 8009974:	a35e      	add	r3, pc, #376	; (adr r3, 8009af0 <__ieee754_pow+0xa18>)
 8009976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997a:	4604      	mov	r4, r0
 800997c:	460d      	mov	r5, r1
 800997e:	f7f6 fe53 	bl	8000628 <__aeabi_dmul>
 8009982:	a35d      	add	r3, pc, #372	; (adr r3, 8009af8 <__ieee754_pow+0xa20>)
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	f7f6 fc96 	bl	80002b8 <__aeabi_dsub>
 800998c:	4622      	mov	r2, r4
 800998e:	462b      	mov	r3, r5
 8009990:	f7f6 fe4a 	bl	8000628 <__aeabi_dmul>
 8009994:	a35a      	add	r3, pc, #360	; (adr r3, 8009b00 <__ieee754_pow+0xa28>)
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	f7f6 fc8f 	bl	80002bc <__adddf3>
 800999e:	4622      	mov	r2, r4
 80099a0:	462b      	mov	r3, r5
 80099a2:	f7f6 fe41 	bl	8000628 <__aeabi_dmul>
 80099a6:	a358      	add	r3, pc, #352	; (adr r3, 8009b08 <__ieee754_pow+0xa30>)
 80099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ac:	f7f6 fc84 	bl	80002b8 <__aeabi_dsub>
 80099b0:	4622      	mov	r2, r4
 80099b2:	462b      	mov	r3, r5
 80099b4:	f7f6 fe38 	bl	8000628 <__aeabi_dmul>
 80099b8:	a355      	add	r3, pc, #340	; (adr r3, 8009b10 <__ieee754_pow+0xa38>)
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	f7f6 fc7d 	bl	80002bc <__adddf3>
 80099c2:	4622      	mov	r2, r4
 80099c4:	462b      	mov	r3, r5
 80099c6:	f7f6 fe2f 	bl	8000628 <__aeabi_dmul>
 80099ca:	4602      	mov	r2, r0
 80099cc:	460b      	mov	r3, r1
 80099ce:	4640      	mov	r0, r8
 80099d0:	4649      	mov	r1, r9
 80099d2:	f7f6 fc71 	bl	80002b8 <__aeabi_dsub>
 80099d6:	4604      	mov	r4, r0
 80099d8:	460d      	mov	r5, r1
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	4640      	mov	r0, r8
 80099e0:	4649      	mov	r1, r9
 80099e2:	f7f6 fe21 	bl	8000628 <__aeabi_dmul>
 80099e6:	2200      	movs	r2, #0
 80099e8:	ec41 0b19 	vmov	d9, r0, r1
 80099ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099f0:	4620      	mov	r0, r4
 80099f2:	4629      	mov	r1, r5
 80099f4:	f7f6 fc60 	bl	80002b8 <__aeabi_dsub>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	ec51 0b19 	vmov	r0, r1, d9
 8009a00:	f7f6 ff3c 	bl	800087c <__aeabi_ddiv>
 8009a04:	4632      	mov	r2, r6
 8009a06:	4604      	mov	r4, r0
 8009a08:	460d      	mov	r5, r1
 8009a0a:	463b      	mov	r3, r7
 8009a0c:	4640      	mov	r0, r8
 8009a0e:	4649      	mov	r1, r9
 8009a10:	f7f6 fe0a 	bl	8000628 <__aeabi_dmul>
 8009a14:	4632      	mov	r2, r6
 8009a16:	463b      	mov	r3, r7
 8009a18:	f7f6 fc50 	bl	80002bc <__adddf3>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4620      	mov	r0, r4
 8009a22:	4629      	mov	r1, r5
 8009a24:	f7f6 fc48 	bl	80002b8 <__aeabi_dsub>
 8009a28:	4642      	mov	r2, r8
 8009a2a:	464b      	mov	r3, r9
 8009a2c:	f7f6 fc44 	bl	80002b8 <__aeabi_dsub>
 8009a30:	460b      	mov	r3, r1
 8009a32:	4602      	mov	r2, r0
 8009a34:	493a      	ldr	r1, [pc, #232]	; (8009b20 <__ieee754_pow+0xa48>)
 8009a36:	2000      	movs	r0, #0
 8009a38:	f7f6 fc3e 	bl	80002b8 <__aeabi_dsub>
 8009a3c:	ec41 0b10 	vmov	d0, r0, r1
 8009a40:	ee10 3a90 	vmov	r3, s1
 8009a44:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a4c:	da2b      	bge.n	8009aa6 <__ieee754_pow+0x9ce>
 8009a4e:	4650      	mov	r0, sl
 8009a50:	f000 f966 	bl	8009d20 <scalbn>
 8009a54:	ec51 0b10 	vmov	r0, r1, d0
 8009a58:	ec53 2b18 	vmov	r2, r3, d8
 8009a5c:	f7ff bbed 	b.w	800923a <__ieee754_pow+0x162>
 8009a60:	4b30      	ldr	r3, [pc, #192]	; (8009b24 <__ieee754_pow+0xa4c>)
 8009a62:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009a66:	429e      	cmp	r6, r3
 8009a68:	f77f af0c 	ble.w	8009884 <__ieee754_pow+0x7ac>
 8009a6c:	4b2e      	ldr	r3, [pc, #184]	; (8009b28 <__ieee754_pow+0xa50>)
 8009a6e:	440b      	add	r3, r1
 8009a70:	4303      	orrs	r3, r0
 8009a72:	d009      	beq.n	8009a88 <__ieee754_pow+0x9b0>
 8009a74:	ec51 0b18 	vmov	r0, r1, d8
 8009a78:	2200      	movs	r2, #0
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f7f7 f846 	bl	8000b0c <__aeabi_dcmplt>
 8009a80:	3800      	subs	r0, #0
 8009a82:	bf18      	it	ne
 8009a84:	2001      	movne	r0, #1
 8009a86:	e447      	b.n	8009318 <__ieee754_pow+0x240>
 8009a88:	4622      	mov	r2, r4
 8009a8a:	462b      	mov	r3, r5
 8009a8c:	f7f6 fc14 	bl	80002b8 <__aeabi_dsub>
 8009a90:	4642      	mov	r2, r8
 8009a92:	464b      	mov	r3, r9
 8009a94:	f7f7 f84e 	bl	8000b34 <__aeabi_dcmpge>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	f43f aef3 	beq.w	8009884 <__ieee754_pow+0x7ac>
 8009a9e:	e7e9      	b.n	8009a74 <__ieee754_pow+0x99c>
 8009aa0:	f04f 0a00 	mov.w	sl, #0
 8009aa4:	e71a      	b.n	80098dc <__ieee754_pow+0x804>
 8009aa6:	ec51 0b10 	vmov	r0, r1, d0
 8009aaa:	4619      	mov	r1, r3
 8009aac:	e7d4      	b.n	8009a58 <__ieee754_pow+0x980>
 8009aae:	491c      	ldr	r1, [pc, #112]	; (8009b20 <__ieee754_pow+0xa48>)
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	f7ff bb30 	b.w	8009116 <__ieee754_pow+0x3e>
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	2100      	movs	r1, #0
 8009aba:	f7ff bb2c 	b.w	8009116 <__ieee754_pow+0x3e>
 8009abe:	4630      	mov	r0, r6
 8009ac0:	4639      	mov	r1, r7
 8009ac2:	f7ff bb28 	b.w	8009116 <__ieee754_pow+0x3e>
 8009ac6:	9204      	str	r2, [sp, #16]
 8009ac8:	f7ff bb7a 	b.w	80091c0 <__ieee754_pow+0xe8>
 8009acc:	2300      	movs	r3, #0
 8009ace:	f7ff bb64 	b.w	800919a <__ieee754_pow+0xc2>
 8009ad2:	bf00      	nop
 8009ad4:	f3af 8000 	nop.w
 8009ad8:	00000000 	.word	0x00000000
 8009adc:	3fe62e43 	.word	0x3fe62e43
 8009ae0:	fefa39ef 	.word	0xfefa39ef
 8009ae4:	3fe62e42 	.word	0x3fe62e42
 8009ae8:	0ca86c39 	.word	0x0ca86c39
 8009aec:	be205c61 	.word	0xbe205c61
 8009af0:	72bea4d0 	.word	0x72bea4d0
 8009af4:	3e663769 	.word	0x3e663769
 8009af8:	c5d26bf1 	.word	0xc5d26bf1
 8009afc:	3ebbbd41 	.word	0x3ebbbd41
 8009b00:	af25de2c 	.word	0xaf25de2c
 8009b04:	3f11566a 	.word	0x3f11566a
 8009b08:	16bebd93 	.word	0x16bebd93
 8009b0c:	3f66c16c 	.word	0x3f66c16c
 8009b10:	5555553e 	.word	0x5555553e
 8009b14:	3fc55555 	.word	0x3fc55555
 8009b18:	3fe00000 	.word	0x3fe00000
 8009b1c:	000fffff 	.word	0x000fffff
 8009b20:	3ff00000 	.word	0x3ff00000
 8009b24:	4090cbff 	.word	0x4090cbff
 8009b28:	3f6f3400 	.word	0x3f6f3400
 8009b2c:	652b82fe 	.word	0x652b82fe
 8009b30:	3c971547 	.word	0x3c971547

08009b34 <__ieee754_sqrt>:
 8009b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b38:	ec55 4b10 	vmov	r4, r5, d0
 8009b3c:	4e55      	ldr	r6, [pc, #340]	; (8009c94 <__ieee754_sqrt+0x160>)
 8009b3e:	43ae      	bics	r6, r5
 8009b40:	ee10 0a10 	vmov	r0, s0
 8009b44:	ee10 3a10 	vmov	r3, s0
 8009b48:	462a      	mov	r2, r5
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	d110      	bne.n	8009b70 <__ieee754_sqrt+0x3c>
 8009b4e:	ee10 2a10 	vmov	r2, s0
 8009b52:	462b      	mov	r3, r5
 8009b54:	f7f6 fd68 	bl	8000628 <__aeabi_dmul>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	4629      	mov	r1, r5
 8009b60:	f7f6 fbac 	bl	80002bc <__adddf3>
 8009b64:	4604      	mov	r4, r0
 8009b66:	460d      	mov	r5, r1
 8009b68:	ec45 4b10 	vmov	d0, r4, r5
 8009b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b70:	2d00      	cmp	r5, #0
 8009b72:	dc10      	bgt.n	8009b96 <__ieee754_sqrt+0x62>
 8009b74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009b78:	4330      	orrs	r0, r6
 8009b7a:	d0f5      	beq.n	8009b68 <__ieee754_sqrt+0x34>
 8009b7c:	b15d      	cbz	r5, 8009b96 <__ieee754_sqrt+0x62>
 8009b7e:	ee10 2a10 	vmov	r2, s0
 8009b82:	462b      	mov	r3, r5
 8009b84:	ee10 0a10 	vmov	r0, s0
 8009b88:	f7f6 fb96 	bl	80002b8 <__aeabi_dsub>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	f7f6 fe74 	bl	800087c <__aeabi_ddiv>
 8009b94:	e7e6      	b.n	8009b64 <__ieee754_sqrt+0x30>
 8009b96:	1512      	asrs	r2, r2, #20
 8009b98:	d074      	beq.n	8009c84 <__ieee754_sqrt+0x150>
 8009b9a:	07d4      	lsls	r4, r2, #31
 8009b9c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009ba0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009ba4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009ba8:	bf5e      	ittt	pl
 8009baa:	0fda      	lsrpl	r2, r3, #31
 8009bac:	005b      	lslpl	r3, r3, #1
 8009bae:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009bb2:	2400      	movs	r4, #0
 8009bb4:	0fda      	lsrs	r2, r3, #31
 8009bb6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009bba:	107f      	asrs	r7, r7, #1
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	2516      	movs	r5, #22
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009bc6:	1886      	adds	r6, r0, r2
 8009bc8:	428e      	cmp	r6, r1
 8009bca:	bfde      	ittt	le
 8009bcc:	1b89      	suble	r1, r1, r6
 8009bce:	18b0      	addle	r0, r6, r2
 8009bd0:	18a4      	addle	r4, r4, r2
 8009bd2:	0049      	lsls	r1, r1, #1
 8009bd4:	3d01      	subs	r5, #1
 8009bd6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009bda:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009bde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009be2:	d1f0      	bne.n	8009bc6 <__ieee754_sqrt+0x92>
 8009be4:	462a      	mov	r2, r5
 8009be6:	f04f 0e20 	mov.w	lr, #32
 8009bea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009bee:	4281      	cmp	r1, r0
 8009bf0:	eb06 0c05 	add.w	ip, r6, r5
 8009bf4:	dc02      	bgt.n	8009bfc <__ieee754_sqrt+0xc8>
 8009bf6:	d113      	bne.n	8009c20 <__ieee754_sqrt+0xec>
 8009bf8:	459c      	cmp	ip, r3
 8009bfa:	d811      	bhi.n	8009c20 <__ieee754_sqrt+0xec>
 8009bfc:	f1bc 0f00 	cmp.w	ip, #0
 8009c00:	eb0c 0506 	add.w	r5, ip, r6
 8009c04:	da43      	bge.n	8009c8e <__ieee754_sqrt+0x15a>
 8009c06:	2d00      	cmp	r5, #0
 8009c08:	db41      	blt.n	8009c8e <__ieee754_sqrt+0x15a>
 8009c0a:	f100 0801 	add.w	r8, r0, #1
 8009c0e:	1a09      	subs	r1, r1, r0
 8009c10:	459c      	cmp	ip, r3
 8009c12:	bf88      	it	hi
 8009c14:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8009c18:	eba3 030c 	sub.w	r3, r3, ip
 8009c1c:	4432      	add	r2, r6
 8009c1e:	4640      	mov	r0, r8
 8009c20:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009c24:	f1be 0e01 	subs.w	lr, lr, #1
 8009c28:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009c30:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009c34:	d1db      	bne.n	8009bee <__ieee754_sqrt+0xba>
 8009c36:	430b      	orrs	r3, r1
 8009c38:	d006      	beq.n	8009c48 <__ieee754_sqrt+0x114>
 8009c3a:	1c50      	adds	r0, r2, #1
 8009c3c:	bf13      	iteet	ne
 8009c3e:	3201      	addne	r2, #1
 8009c40:	3401      	addeq	r4, #1
 8009c42:	4672      	moveq	r2, lr
 8009c44:	f022 0201 	bicne.w	r2, r2, #1
 8009c48:	1063      	asrs	r3, r4, #1
 8009c4a:	0852      	lsrs	r2, r2, #1
 8009c4c:	07e1      	lsls	r1, r4, #31
 8009c4e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009c52:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009c56:	bf48      	it	mi
 8009c58:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009c5c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009c60:	4614      	mov	r4, r2
 8009c62:	e781      	b.n	8009b68 <__ieee754_sqrt+0x34>
 8009c64:	0ad9      	lsrs	r1, r3, #11
 8009c66:	3815      	subs	r0, #21
 8009c68:	055b      	lsls	r3, r3, #21
 8009c6a:	2900      	cmp	r1, #0
 8009c6c:	d0fa      	beq.n	8009c64 <__ieee754_sqrt+0x130>
 8009c6e:	02cd      	lsls	r5, r1, #11
 8009c70:	d50a      	bpl.n	8009c88 <__ieee754_sqrt+0x154>
 8009c72:	f1c2 0420 	rsb	r4, r2, #32
 8009c76:	fa23 f404 	lsr.w	r4, r3, r4
 8009c7a:	1e55      	subs	r5, r2, #1
 8009c7c:	4093      	lsls	r3, r2
 8009c7e:	4321      	orrs	r1, r4
 8009c80:	1b42      	subs	r2, r0, r5
 8009c82:	e78a      	b.n	8009b9a <__ieee754_sqrt+0x66>
 8009c84:	4610      	mov	r0, r2
 8009c86:	e7f0      	b.n	8009c6a <__ieee754_sqrt+0x136>
 8009c88:	0049      	lsls	r1, r1, #1
 8009c8a:	3201      	adds	r2, #1
 8009c8c:	e7ef      	b.n	8009c6e <__ieee754_sqrt+0x13a>
 8009c8e:	4680      	mov	r8, r0
 8009c90:	e7bd      	b.n	8009c0e <__ieee754_sqrt+0xda>
 8009c92:	bf00      	nop
 8009c94:	7ff00000 	.word	0x7ff00000

08009c98 <with_errno>:
 8009c98:	b570      	push	{r4, r5, r6, lr}
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	460d      	mov	r5, r1
 8009c9e:	4616      	mov	r6, r2
 8009ca0:	f7fb fd94 	bl	80057cc <__errno>
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	6006      	str	r6, [r0, #0]
 8009ca8:	4620      	mov	r0, r4
 8009caa:	bd70      	pop	{r4, r5, r6, pc}

08009cac <xflow>:
 8009cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cae:	4614      	mov	r4, r2
 8009cb0:	461d      	mov	r5, r3
 8009cb2:	b108      	cbz	r0, 8009cb8 <xflow+0xc>
 8009cb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009cb8:	e9cd 2300 	strd	r2, r3, [sp]
 8009cbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	f7f6 fcb0 	bl	8000628 <__aeabi_dmul>
 8009cc8:	2222      	movs	r2, #34	; 0x22
 8009cca:	b003      	add	sp, #12
 8009ccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cd0:	f7ff bfe2 	b.w	8009c98 <with_errno>

08009cd4 <__math_uflow>:
 8009cd4:	b508      	push	{r3, lr}
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cdc:	f7ff ffe6 	bl	8009cac <xflow>
 8009ce0:	ec41 0b10 	vmov	d0, r0, r1
 8009ce4:	bd08      	pop	{r3, pc}

08009ce6 <__math_oflow>:
 8009ce6:	b508      	push	{r3, lr}
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009cee:	f7ff ffdd 	bl	8009cac <xflow>
 8009cf2:	ec41 0b10 	vmov	d0, r0, r1
 8009cf6:	bd08      	pop	{r3, pc}

08009cf8 <fabs>:
 8009cf8:	ec51 0b10 	vmov	r0, r1, d0
 8009cfc:	ee10 2a10 	vmov	r2, s0
 8009d00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d04:	ec43 2b10 	vmov	d0, r2, r3
 8009d08:	4770      	bx	lr

08009d0a <finite>:
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	ed8d 0b00 	vstr	d0, [sp]
 8009d10:	9801      	ldr	r0, [sp, #4]
 8009d12:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009d16:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009d1a:	0fc0      	lsrs	r0, r0, #31
 8009d1c:	b002      	add	sp, #8
 8009d1e:	4770      	bx	lr

08009d20 <scalbn>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	ec55 4b10 	vmov	r4, r5, d0
 8009d26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009d2a:	4606      	mov	r6, r0
 8009d2c:	462b      	mov	r3, r5
 8009d2e:	b99a      	cbnz	r2, 8009d58 <scalbn+0x38>
 8009d30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009d34:	4323      	orrs	r3, r4
 8009d36:	d036      	beq.n	8009da6 <scalbn+0x86>
 8009d38:	4b39      	ldr	r3, [pc, #228]	; (8009e20 <scalbn+0x100>)
 8009d3a:	4629      	mov	r1, r5
 8009d3c:	ee10 0a10 	vmov	r0, s0
 8009d40:	2200      	movs	r2, #0
 8009d42:	f7f6 fc71 	bl	8000628 <__aeabi_dmul>
 8009d46:	4b37      	ldr	r3, [pc, #220]	; (8009e24 <scalbn+0x104>)
 8009d48:	429e      	cmp	r6, r3
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	460d      	mov	r5, r1
 8009d4e:	da10      	bge.n	8009d72 <scalbn+0x52>
 8009d50:	a32b      	add	r3, pc, #172	; (adr r3, 8009e00 <scalbn+0xe0>)
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	e03a      	b.n	8009dce <scalbn+0xae>
 8009d58:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009d5c:	428a      	cmp	r2, r1
 8009d5e:	d10c      	bne.n	8009d7a <scalbn+0x5a>
 8009d60:	ee10 2a10 	vmov	r2, s0
 8009d64:	4620      	mov	r0, r4
 8009d66:	4629      	mov	r1, r5
 8009d68:	f7f6 faa8 	bl	80002bc <__adddf3>
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	460d      	mov	r5, r1
 8009d70:	e019      	b.n	8009da6 <scalbn+0x86>
 8009d72:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009d76:	460b      	mov	r3, r1
 8009d78:	3a36      	subs	r2, #54	; 0x36
 8009d7a:	4432      	add	r2, r6
 8009d7c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009d80:	428a      	cmp	r2, r1
 8009d82:	dd08      	ble.n	8009d96 <scalbn+0x76>
 8009d84:	2d00      	cmp	r5, #0
 8009d86:	a120      	add	r1, pc, #128	; (adr r1, 8009e08 <scalbn+0xe8>)
 8009d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d8c:	da1c      	bge.n	8009dc8 <scalbn+0xa8>
 8009d8e:	a120      	add	r1, pc, #128	; (adr r1, 8009e10 <scalbn+0xf0>)
 8009d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d94:	e018      	b.n	8009dc8 <scalbn+0xa8>
 8009d96:	2a00      	cmp	r2, #0
 8009d98:	dd08      	ble.n	8009dac <scalbn+0x8c>
 8009d9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009d9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009da2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009da6:	ec45 4b10 	vmov	d0, r4, r5
 8009daa:	bd70      	pop	{r4, r5, r6, pc}
 8009dac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009db0:	da19      	bge.n	8009de6 <scalbn+0xc6>
 8009db2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009db6:	429e      	cmp	r6, r3
 8009db8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009dbc:	dd0a      	ble.n	8009dd4 <scalbn+0xb4>
 8009dbe:	a112      	add	r1, pc, #72	; (adr r1, 8009e08 <scalbn+0xe8>)
 8009dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1e2      	bne.n	8009d8e <scalbn+0x6e>
 8009dc8:	a30f      	add	r3, pc, #60	; (adr r3, 8009e08 <scalbn+0xe8>)
 8009dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dce:	f7f6 fc2b 	bl	8000628 <__aeabi_dmul>
 8009dd2:	e7cb      	b.n	8009d6c <scalbn+0x4c>
 8009dd4:	a10a      	add	r1, pc, #40	; (adr r1, 8009e00 <scalbn+0xe0>)
 8009dd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d0b8      	beq.n	8009d50 <scalbn+0x30>
 8009dde:	a10e      	add	r1, pc, #56	; (adr r1, 8009e18 <scalbn+0xf8>)
 8009de0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009de4:	e7b4      	b.n	8009d50 <scalbn+0x30>
 8009de6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009dea:	3236      	adds	r2, #54	; 0x36
 8009dec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009df0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009df4:	4620      	mov	r0, r4
 8009df6:	4b0c      	ldr	r3, [pc, #48]	; (8009e28 <scalbn+0x108>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	e7e8      	b.n	8009dce <scalbn+0xae>
 8009dfc:	f3af 8000 	nop.w
 8009e00:	c2f8f359 	.word	0xc2f8f359
 8009e04:	01a56e1f 	.word	0x01a56e1f
 8009e08:	8800759c 	.word	0x8800759c
 8009e0c:	7e37e43c 	.word	0x7e37e43c
 8009e10:	8800759c 	.word	0x8800759c
 8009e14:	fe37e43c 	.word	0xfe37e43c
 8009e18:	c2f8f359 	.word	0xc2f8f359
 8009e1c:	81a56e1f 	.word	0x81a56e1f
 8009e20:	43500000 	.word	0x43500000
 8009e24:	ffff3cb0 	.word	0xffff3cb0
 8009e28:	3c900000 	.word	0x3c900000

08009e2c <_sbrk>:
 8009e2c:	4a04      	ldr	r2, [pc, #16]	; (8009e40 <_sbrk+0x14>)
 8009e2e:	6811      	ldr	r1, [r2, #0]
 8009e30:	4603      	mov	r3, r0
 8009e32:	b909      	cbnz	r1, 8009e38 <_sbrk+0xc>
 8009e34:	4903      	ldr	r1, [pc, #12]	; (8009e44 <_sbrk+0x18>)
 8009e36:	6011      	str	r1, [r2, #0]
 8009e38:	6810      	ldr	r0, [r2, #0]
 8009e3a:	4403      	add	r3, r0
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	4770      	bx	lr
 8009e40:	200005bc 	.word	0x200005bc
 8009e44:	200005c0 	.word	0x200005c0

08009e48 <_init>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	bf00      	nop
 8009e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4e:	bc08      	pop	{r3}
 8009e50:	469e      	mov	lr, r3
 8009e52:	4770      	bx	lr

08009e54 <_fini>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	bf00      	nop
 8009e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5a:	bc08      	pop	{r3}
 8009e5c:	469e      	mov	lr, r3
 8009e5e:	4770      	bx	lr
