
Pruebas_sin_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08009da0  08009da0  00019da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a328  0800a328  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a328  0800a328  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a328  0800a328  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a328  0800a328  0001a328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a32c  0800a32c  0001a32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  200001e0  0800a510  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  0800a510  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005ca2  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001403  00000000  00000000  00025eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  000272b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000520  00000000  00000000  00027890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011d56  00000000  00000000  00027db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000074ba  00000000  00000000  00039b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006084f  00000000  00000000  00040fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a180f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d48  00000000  00000000  000a1860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d88 	.word	0x08009d88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009d88 	.word	0x08009d88

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
//TaskHandle_t xHandleTask2 = NULL;

//extern void SEGGER_UART_init(uint32_t);

int main(void)
{
 8000cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000cbc:	b08a      	sub	sp, #40	; 0x28
 8000cbe:	af08      	add	r7, sp, #32


	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000cc0:	4b81      	ldr	r3, [pc, #516]	; (8000ec8 <main+0x210>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a80      	ldr	r2, [pc, #512]	; (8000ec8 <main+0x210>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
	//SEGGER_SYSVIEW_Start();


	inSystem ();
 8000cd0:	f000 f9e2 	bl	8001098 <inSystem>
//		}




		if (rxData != '\0'){
 8000cd4:	4b7d      	ldr	r3, [pc, #500]	; (8000ecc <main+0x214>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d025      	beq.n	8000d28 <main+0x70>
		writeChar(&handlerUSART1, rxData);
 8000cdc:	4b7b      	ldr	r3, [pc, #492]	; (8000ecc <main+0x214>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	487b      	ldr	r0, [pc, #492]	; (8000ed0 <main+0x218>)
 8000ce4:	f004 fa0e 	bl	8005104 <writeChar>
		bufferReception[counterReception] = rxData;
 8000ce8:	4b7a      	ldr	r3, [pc, #488]	; (8000ed4 <main+0x21c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b77      	ldr	r3, [pc, #476]	; (8000ecc <main+0x214>)
 8000cf0:	7819      	ldrb	r1, [r3, #0]
 8000cf2:	4b79      	ldr	r3, [pc, #484]	; (8000ed8 <main+0x220>)
 8000cf4:	5499      	strb	r1, [r3, r2]
		counterReception++;
 8000cf6:	4b77      	ldr	r3, [pc, #476]	; (8000ed4 <main+0x21c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b75      	ldr	r3, [pc, #468]	; (8000ed4 <main+0x21c>)
 8000d00:	701a      	strb	r2, [r3, #0]

		if (rxData == '@'){
 8000d02:	4b72      	ldr	r3, [pc, #456]	; (8000ecc <main+0x214>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b40      	cmp	r3, #64	; 0x40
 8000d08:	d10b      	bne.n	8000d22 <main+0x6a>
			doneTransaction = SET;
 8000d0a:	4b74      	ldr	r3, [pc, #464]	; (8000edc <main+0x224>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]

			bufferReception[counterReception-1] = '\0';
 8000d10:	4b70      	ldr	r3, [pc, #448]	; (8000ed4 <main+0x21c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	4a70      	ldr	r2, [pc, #448]	; (8000ed8 <main+0x220>)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	54d1      	strb	r1, [r2, r3]

			counterReception = 0;
 8000d1c:	4b6d      	ldr	r3, [pc, #436]	; (8000ed4 <main+0x21c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]

		}

		rxData = '\0';
 8000d22:	4b6a      	ldr	r3, [pc, #424]	; (8000ecc <main+0x214>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]

		}

		if (doneTransaction){
 8000d28:	4b6c      	ldr	r3, [pc, #432]	; (8000edc <main+0x224>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d005      	beq.n	8000d3c <main+0x84>
			parseCommands(bufferReception);
 8000d30:	4869      	ldr	r0, [pc, #420]	; (8000ed8 <main+0x220>)
 8000d32:	f000 fc11 	bl	8001558 <parseCommands>
			doneTransaction = RESET;
 8000d36:	4b69      	ldr	r3, [pc, #420]	; (8000edc <main+0x224>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
		}


		if

		(enableChangePWM)
 8000d3c:	4b68      	ldr	r3, [pc, #416]	; (8000ee0 <main+0x228>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f000 8160 	beq.w	8001006 <main+0x34e>

//		( ( (dist_1 < distance) && (dist_2 < distance) ) )
		{


			if (flagT2){
 8000d46:	4b67      	ldr	r3, [pc, #412]	; (8000ee4 <main+0x22c>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0c2      	beq.n	8000cd4 <main+0x1c>
//
//					}



				controlM1 = handlerMotor1.configM1.counts_M1;
 8000d4e:	4b66      	ldr	r3, [pc, #408]	; (8000ee8 <main+0x230>)
 8000d50:	8c1a      	ldrh	r2, [r3, #32]
 8000d52:	4b66      	ldr	r3, [pc, #408]	; (8000eec <main+0x234>)
 8000d54:	801a      	strh	r2, [r3, #0]
				controlM2 = handlerMotor2.configM2.counts_M2;
 8000d56:	4b66      	ldr	r3, [pc, #408]	; (8000ef0 <main+0x238>)
 8000d58:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000d5c:	4b65      	ldr	r3, [pc, #404]	; (8000ef4 <main+0x23c>)
 8000d5e:	801a      	strh	r2, [r3, #0]

				diferenceM1 = abs(controlM1 - controlM1_prev);
 8000d60:	4b62      	ldr	r3, [pc, #392]	; (8000eec <main+0x234>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b64      	ldr	r3, [pc, #400]	; (8000ef8 <main+0x240>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	bfb8      	it	lt
 8000d70:	425b      	neglt	r3, r3
 8000d72:	ee07 3a90 	vmov	s15, r3
 8000d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d7a:	4b60      	ldr	r3, [pc, #384]	; (8000efc <main+0x244>)
 8000d7c:	edc3 7a00 	vstr	s15, [r3]
				diferenceM2 = abs(controlM2 - controlM2_prev);
 8000d80:	4b5c      	ldr	r3, [pc, #368]	; (8000ef4 <main+0x23c>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b5e      	ldr	r3, [pc, #376]	; (8000f00 <main+0x248>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	bfb8      	it	lt
 8000d90:	425b      	neglt	r3, r3
 8000d92:	ee07 3a90 	vmov	s15, r3
 8000d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9a:	4b5a      	ldr	r3, [pc, #360]	; (8000f04 <main+0x24c>)
 8000d9c:	edc3 7a00 	vstr	s15, [r3]

				controlM1_prev = controlM1;
 8000da0:	4b52      	ldr	r3, [pc, #328]	; (8000eec <main+0x234>)
 8000da2:	881a      	ldrh	r2, [r3, #0]
 8000da4:	4b54      	ldr	r3, [pc, #336]	; (8000ef8 <main+0x240>)
 8000da6:	801a      	strh	r2, [r3, #0]
				controlM2_prev = controlM2;
 8000da8:	4b52      	ldr	r3, [pc, #328]	; (8000ef4 <main+0x23c>)
 8000daa:	881a      	ldrh	r2, [r3, #0]
 8000dac:	4b54      	ldr	r3, [pc, #336]	; (8000f00 <main+0x248>)
 8000dae:	801a      	strh	r2, [r3, #0]

				uAM1 = PID(&handlerMotor1, diferenceM1, 1, setPoint);
 8000db0:	4b52      	ldr	r3, [pc, #328]	; (8000efc <main+0x244>)
 8000db2:	edd3 7a00 	vldr	s15, [r3]
 8000db6:	4b54      	ldr	r3, [pc, #336]	; (8000f08 <main+0x250>)
 8000db8:	ed93 7a00 	vldr	s14, [r3]
 8000dbc:	eef0 0a47 	vmov.f32	s1, s14
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc6:	4848      	ldr	r0, [pc, #288]	; (8000ee8 <main+0x230>)
 8000dc8:	f003 f87e 	bl	8003ec8 <PID>
 8000dcc:	ec53 2b10 	vmov	r2, r3, d0
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f7ff ff20 	bl	8000c18 <__aeabi_d2f>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4a4c      	ldr	r2, [pc, #304]	; (8000f0c <main+0x254>)
 8000ddc:	6013      	str	r3, [r2, #0]
				uAM2 = PID(&handlerMotor2, diferenceM2, 2, setPoint);
 8000dde:	4b49      	ldr	r3, [pc, #292]	; (8000f04 <main+0x24c>)
 8000de0:	edd3 7a00 	vldr	s15, [r3]
 8000de4:	4b48      	ldr	r3, [pc, #288]	; (8000f08 <main+0x250>)
 8000de6:	ed93 7a00 	vldr	s14, [r3]
 8000dea:	eef0 0a47 	vmov.f32	s1, s14
 8000dee:	2102      	movs	r1, #2
 8000df0:	eeb0 0a67 	vmov.f32	s0, s15
 8000df4:	483e      	ldr	r0, [pc, #248]	; (8000ef0 <main+0x238>)
 8000df6:	f003 f867 	bl	8003ec8 <PID>
 8000dfa:	ec53 2b10 	vmov	r2, r3, d0
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f7ff ff09 	bl	8000c18 <__aeabi_d2f>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a41      	ldr	r2, [pc, #260]	; (8000f10 <main+0x258>)
 8000e0a:	6013      	str	r3, [r2, #0]

				PM1 = map(uAM1, 0 , 600 , 0, 100);
 8000e0c:	4b3f      	ldr	r3, [pc, #252]	; (8000f0c <main+0x254>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fbb1 	bl	8000578 <__aeabi_f2d>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8000eb0 <main+0x1f8>
 8000e1e:	ed9f 3b26 	vldr	d3, [pc, #152]	; 8000eb8 <main+0x200>
 8000e22:	ed9f 2b27 	vldr	d2, [pc, #156]	; 8000ec0 <main+0x208>
 8000e26:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8000eb8 <main+0x200>
 8000e2a:	ec43 2b10 	vmov	d0, r2, r3
 8000e2e:	f003 f8fd 	bl	800402c <map>
 8000e32:	ec53 2b10 	vmov	r2, r3, d0
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f7ff feed 	bl	8000c18 <__aeabi_d2f>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a34      	ldr	r2, [pc, #208]	; (8000f14 <main+0x25c>)
 8000e42:	6013      	str	r3, [r2, #0]
				PM2 = map(uAM2, 0 , 600 , 0, 100);
 8000e44:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <main+0x258>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fb95 	bl	8000578 <__aeabi_f2d>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	ed9f 4b17 	vldr	d4, [pc, #92]	; 8000eb0 <main+0x1f8>
 8000e56:	ed9f 3b18 	vldr	d3, [pc, #96]	; 8000eb8 <main+0x200>
 8000e5a:	ed9f 2b19 	vldr	d2, [pc, #100]	; 8000ec0 <main+0x208>
 8000e5e:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8000eb8 <main+0x200>
 8000e62:	ec43 2b10 	vmov	d0, r2, r3
 8000e66:	f003 f8e1 	bl	800402c <map>
 8000e6a:	ec53 2b10 	vmov	r2, r3, d0
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f7ff fed1 	bl	8000c18 <__aeabi_d2f>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4a27      	ldr	r2, [pc, #156]	; (8000f18 <main+0x260>)
 8000e7a:	6013      	str	r3, [r2, #0]

				if (PM1 < 0 || PM2 < 0){
 8000e7c:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <main+0x25c>)
 8000e7e:	edd3 7a00 	vldr	s15, [r3]
 8000e82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8a:	d407      	bmi.n	8000e9c <main+0x1e4>
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <main+0x260>)
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9a:	d53f      	bpl.n	8000f1c <main+0x264>

					PM1 = 0;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <main+0x25c>)
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
					PM2 = 0;
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <main+0x260>)
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	e050      	b.n	8000f50 <main+0x298>
 8000eae:	bf00      	nop
 8000eb0:	00000000 	.word	0x00000000
 8000eb4:	40590000 	.word	0x40590000
	...
 8000ec4:	4082c000 	.word	0x4082c000
 8000ec8:	e000ed00 	.word	0xe000ed00
 8000ecc:	20000482 	.word	0x20000482
 8000ed0:	20000308 	.word	0x20000308
 8000ed4:	20000480 	.word	0x20000480
 8000ed8:	20000440 	.word	0x20000440
 8000edc:	20000481 	.word	0x20000481
 8000ee0:	20000533 	.word	0x20000533
 8000ee4:	20000532 	.word	0x20000532
 8000ee8:	2000039c 	.word	0x2000039c
 8000eec:	20000550 	.word	0x20000550
 8000ef0:	200003e4 	.word	0x200003e4
 8000ef4:	20000552 	.word	0x20000552
 8000ef8:	20000554 	.word	0x20000554
 8000efc:	2000055c 	.word	0x2000055c
 8000f00:	20000556 	.word	0x20000556
 8000f04:	20000560 	.word	0x20000560
 8000f08:	20000564 	.word	0x20000564
 8000f0c:	20000574 	.word	0x20000574
 8000f10:	20000578 	.word	0x20000578
 8000f14:	2000056c 	.word	0x2000056c
 8000f18:	20000570 	.word	0x20000570

				}else if (PM1 > 100 || PM2 > 100){
 8000f1c:	4b4a      	ldr	r3, [pc, #296]	; (8001048 <main+0x390>)
 8000f1e:	edd3 7a00 	vldr	s15, [r3]
 8000f22:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800104c <main+0x394>
 8000f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2e:	dc09      	bgt.n	8000f44 <main+0x28c>
 8000f30:	4b47      	ldr	r3, [pc, #284]	; (8001050 <main+0x398>)
 8000f32:	edd3 7a00 	vldr	s15, [r3]
 8000f36:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800104c <main+0x394>
 8000f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f42:	dd05      	ble.n	8000f50 <main+0x298>

					PM1 = 100;
 8000f44:	4b40      	ldr	r3, [pc, #256]	; (8001048 <main+0x390>)
 8000f46:	4a43      	ldr	r2, [pc, #268]	; (8001054 <main+0x39c>)
 8000f48:	601a      	str	r2, [r3, #0]
					PM2 = 100;
 8000f4a:	4b41      	ldr	r3, [pc, #260]	; (8001050 <main+0x398>)
 8000f4c:	4a41      	ldr	r2, [pc, #260]	; (8001054 <main+0x39c>)
 8000f4e:	601a      	str	r2, [r3, #0]
				}

				dist_1 = distanceM1();
 8000f50:	f000 fd16 	bl	8001980 <distanceM1>
 8000f54:	eeb0 7a40 	vmov.f32	s14, s0
 8000f58:	eef0 7a60 	vmov.f32	s15, s1
 8000f5c:	4b3e      	ldr	r3, [pc, #248]	; (8001058 <main+0x3a0>)
 8000f5e:	ed83 7b00 	vstr	d7, [r3]
				dist_2 = distanceM2();
 8000f62:	f000 fd3d 	bl	80019e0 <distanceM2>
 8000f66:	eeb0 7a40 	vmov.f32	s14, s0
 8000f6a:	eef0 7a60 	vmov.f32	s15, s1
 8000f6e:	4b3b      	ldr	r3, [pc, #236]	; (800105c <main+0x3a4>)
 8000f70:	ed83 7b00 	vstr	d7, [r3]

				updateDuttyCycleAfOpt(&handlerPWM_1, PM1);
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <main+0x390>)
 8000f76:	edd3 7a00 	vldr	s15, [r3]
 8000f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f7e:	4838      	ldr	r0, [pc, #224]	; (8001060 <main+0x3a8>)
 8000f80:	f003 fc18 	bl	80047b4 <updateDuttyCycleAfOpt>
				updateDuttyCycleAfOpt(&handlerPWM_2, PM2);
 8000f84:	4b32      	ldr	r3, [pc, #200]	; (8001050 <main+0x398>)
 8000f86:	edd3 7a00 	vldr	s15, [r3]
 8000f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f8e:	4835      	ldr	r0, [pc, #212]	; (8001064 <main+0x3ac>)
 8000f90:	f003 fc10 	bl	80047b4 <updateDuttyCycleAfOpt>

				sprintf (bufferMsg, //"%u\t%u\t%.3f\t%.3f\t
 8000f94:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <main+0x390>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff faed 	bl	8000578 <__aeabi_f2d>
 8000f9e:	e9c7 0100 	strd	r0, r1, [r7]
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <main+0x398>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fae6 	bl	8000578 <__aeabi_f2d>
 8000fac:	4604      	mov	r4, r0
 8000fae:	460d      	mov	r5, r1
 8000fb0:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <main+0x3b0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fadf 	bl	8000578 <__aeabi_f2d>
 8000fba:	4680      	mov	r8, r0
 8000fbc:	4689      	mov	r9, r1
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	; (800106c <main+0x3b4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fad8 	bl	8000578 <__aeabi_f2d>
 8000fc8:	4682      	mov	sl, r0
 8000fca:	468b      	mov	fp, r1
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <main+0x3b8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fad1 	bl	8000578 <__aeabi_f2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000fde:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8000fe2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000fe6:	e9cd 4500 	strd	r4, r5, [sp]
 8000fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fee:	4921      	ldr	r1, [pc, #132]	; (8001074 <main+0x3bc>)
 8000ff0:	4821      	ldr	r0, [pc, #132]	; (8001078 <main+0x3c0>)
 8000ff2:	f005 f91f 	bl	8006234 <siprintf>
						// counter_M1, counter_M2,

//						 counterPWM1, diferenceM1, diferenceM2
						//, dist_1 ,dist_2
						);
				writeMsg(&handlerUSART1, bufferMsg);
 8000ff6:	4920      	ldr	r1, [pc, #128]	; (8001078 <main+0x3c0>)
 8000ff8:	4820      	ldr	r0, [pc, #128]	; (800107c <main+0x3c4>)
 8000ffa:	f004 f89b 	bl	8005134 <writeMsg>
//				counterPWM1 += 0.1;
//				counterPWM2 += 0.1;



				flagT2 = RESET;
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <main+0x3c8>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e666      	b.n	8000cd4 <main+0x1c>

			}

		}else if (flagGyro){
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <main+0x3cc>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	f43f ae62 	beq.w	8000cd4 <main+0x1c>

			dps = readGyro_Z (&handler_MPUAccel_6050);
 8001010:	481d      	ldr	r0, [pc, #116]	; (8001088 <main+0x3d0>)
 8001012:	f002 fd43 	bl	8003a9c <readGyro_Z>
 8001016:	eef0 7a40 	vmov.f32	s15, s0
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <main+0x3d4>)
 800101c:	edc3 7a00 	vstr	s15, [r3]

			sprintf (bufferMsg, //"%u\t%u\t%.3f\t%.3f\t
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <main+0x3d4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff faa7 	bl	8000578 <__aeabi_f2d>
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <main+0x3d8>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	e9cd 2300 	strd	r2, r3, [sp]
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4916      	ldr	r1, [pc, #88]	; (8001094 <main+0x3dc>)
 800103a:	480f      	ldr	r0, [pc, #60]	; (8001078 <main+0x3c0>)
 800103c:	f005 f8fa 	bl	8006234 <siprintf>

	//						 counterPWM1, diferenceM1, diferenceM2
			//, dist_1 ,dist_2
			);

			flagGyro = RESET;
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <main+0x3cc>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
		if (rxData != '\0'){
 8001046:	e645      	b.n	8000cd4 <main+0x1c>
 8001048:	2000056c 	.word	0x2000056c
 800104c:	42c80000 	.word	0x42c80000
 8001050:	20000570 	.word	0x20000570
 8001054:	42c80000 	.word	0x42c80000
 8001058:	20000540 	.word	0x20000540
 800105c:	20000548 	.word	0x20000548
 8001060:	200002d8 	.word	0x200002d8
 8001064:	200002f0 	.word	0x200002f0
 8001068:	2000055c 	.word	0x2000055c
 800106c:	20000560 	.word	0x20000560
 8001070:	20000564 	.word	0x20000564
 8001074:	08009da0 	.word	0x08009da0
 8001078:	200004f0 	.word	0x200004f0
 800107c:	20000308 	.word	0x20000308
 8001080:	20000532 	.word	0x20000532
 8001084:	20000534 	.word	0x20000534
 8001088:	20000434 	.word	0x20000434
 800108c:	2000057c 	.word	0x2000057c
 8001090:	20000580 	.word	0x20000580
 8001094:	08009dbc 	.word	0x08009dbc

08001098 <inSystem>:

	}
}


void inSystem (void){
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0


	// Activamos la maxima velocidad del microcontrolador
	RCC_enableMaxFrequencies();
 800109c:	f003 fbda 	bl	8004854 <RCC_enableMaxFrequencies>
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 80010a0:	4bb0      	ldr	r3, [pc, #704]	; (8001364 <inSystem+0x2cc>)
 80010a2:	4ab1      	ldr	r2, [pc, #708]	; (8001368 <inSystem+0x2d0>)
 80010a4:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 80010a6:	4baf      	ldr	r3, [pc, #700]	; (8001364 <inSystem+0x2cc>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80010ac:	4bad      	ldr	r3, [pc, #692]	; (8001364 <inSystem+0x2cc>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 80010b2:	4bac      	ldr	r3, [pc, #688]	; (8001364 <inSystem+0x2cc>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80010b8:	4baa      	ldr	r3, [pc, #680]	; (8001364 <inSystem+0x2cc>)
 80010ba:	2205      	movs	r2, #5
 80010bc:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010be:	4ba9      	ldr	r3, [pc, #676]	; (8001364 <inSystem+0x2cc>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 80010c4:	4ba7      	ldr	r3, [pc, #668]	; (8001364 <inSystem+0x2cc>)
 80010c6:	2202      	movs	r2, #2
 80010c8:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 80010ca:	48a6      	ldr	r0, [pc, #664]	; (8001364 <inSystem+0x2cc>)
 80010cc:	f002 f9b0 	bl	8003430 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 80010d0:	2101      	movs	r1, #1
 80010d2:	48a4      	ldr	r0, [pc, #656]	; (8001364 <inSystem+0x2cc>)
 80010d4:	f002 fad6 	bl	8003684 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 80010d8:	4ba4      	ldr	r3, [pc, #656]	; (800136c <inSystem+0x2d4>)
 80010da:	4aa5      	ldr	r2, [pc, #660]	; (8001370 <inSystem+0x2d8>)
 80010dc:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 80010de:	4ba3      	ldr	r3, [pc, #652]	; (800136c <inSystem+0x2d4>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 80010e4:	4ba1      	ldr	r3, [pc, #644]	; (800136c <inSystem+0x2d4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 80010ea:	4ba0      	ldr	r3, [pc, #640]	; (800136c <inSystem+0x2d4>)
 80010ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80010f0:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 1000;
 80010f2:	4b9e      	ldr	r3, [pc, #632]	; (800136c <inSystem+0x2d4>)
 80010f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010f8:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 80010fa:	489c      	ldr	r0, [pc, #624]	; (800136c <inSystem+0x2d4>)
 80010fc:	f000 fe04 	bl	8001d08 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8001100:	489a      	ldr	r0, [pc, #616]	; (800136c <inSystem+0x2d4>)
 8001102:	f001 f925 	bl	8002350 <startTimer>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 8001106:	4b9b      	ldr	r3, [pc, #620]	; (8001374 <inSystem+0x2dc>)
 8001108:	4a97      	ldr	r2, [pc, #604]	; (8001368 <inSystem+0x2d0>)
 800110a:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 800110c:	4b99      	ldr	r3, [pc, #612]	; (8001374 <inSystem+0x2dc>)
 800110e:	2202      	movs	r2, #2
 8001110:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001112:	4b98      	ldr	r3, [pc, #608]	; (8001374 <inSystem+0x2dc>)
 8001114:	2202      	movs	r2, #2
 8001116:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001118:	4b96      	ldr	r3, [pc, #600]	; (8001374 <inSystem+0x2dc>)
 800111a:	2200      	movs	r2, #0
 800111c:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 800111e:	4b95      	ldr	r3, [pc, #596]	; (8001374 <inSystem+0x2dc>)
 8001120:	2200      	movs	r2, #0
 8001122:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001124:	4b93      	ldr	r3, [pc, #588]	; (8001374 <inSystem+0x2dc>)
 8001126:	2200      	movs	r2, #0
 8001128:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800112a:	4b92      	ldr	r3, [pc, #584]	; (8001374 <inSystem+0x2dc>)
 800112c:	2202      	movs	r2, #2
 800112e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 8001130:	4890      	ldr	r0, [pc, #576]	; (8001374 <inSystem+0x2dc>)
 8001132:	f002 f97d 	bl	8003430 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 8001136:	4b90      	ldr	r3, [pc, #576]	; (8001378 <inSystem+0x2e0>)
 8001138:	4a90      	ldr	r2, [pc, #576]	; (800137c <inSystem+0x2e4>)
 800113a:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 800113c:	4b8e      	ldr	r3, [pc, #568]	; (8001378 <inSystem+0x2e0>)
 800113e:	2200      	movs	r2, #0
 8001140:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle  = 0;
 8001142:	4b8d      	ldr	r3, [pc, #564]	; (8001378 <inSystem+0x2e0>)
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
//	counter = 50;
	handlerPWM_1.config.periodo     = 40; // se maneja 25 hz por testeo
 800114a:	4b8b      	ldr	r3, [pc, #556]	; (8001378 <inSystem+0x2e0>)
 800114c:	2228      	movs	r2, #40	; 0x28
 800114e:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8001150:	4b89      	ldr	r3, [pc, #548]	; (8001378 <inSystem+0x2e0>)
 8001152:	2264      	movs	r2, #100	; 0x64
 8001154:	609a      	str	r2, [r3, #8]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8001156:	4b88      	ldr	r3, [pc, #544]	; (8001378 <inSystem+0x2e0>)
 8001158:	2201      	movs	r2, #1
 800115a:	751a      	strb	r2, [r3, #20]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 800115c:	4b86      	ldr	r3, [pc, #536]	; (8001378 <inSystem+0x2e0>)
 800115e:	2201      	movs	r2, #1
 8001160:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_1);
 8001162:	4885      	ldr	r0, [pc, #532]	; (8001378 <inSystem+0x2e0>)
 8001164:	f002 ffb0 	bl	80040c8 <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 8001168:	4883      	ldr	r0, [pc, #524]	; (8001378 <inSystem+0x2e0>)
 800116a:	f003 f88f 	bl	800428c <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 800116e:	4b84      	ldr	r3, [pc, #528]	; (8001380 <inSystem+0x2e8>)
 8001170:	4a7d      	ldr	r2, [pc, #500]	; (8001368 <inSystem+0x2d0>)
 8001172:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001174:	4b82      	ldr	r3, [pc, #520]	; (8001380 <inSystem+0x2e8>)
 8001176:	2202      	movs	r2, #2
 8001178:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800117a:	4b81      	ldr	r3, [pc, #516]	; (8001380 <inSystem+0x2e8>)
 800117c:	2202      	movs	r2, #2
 800117e:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001180:	4b7f      	ldr	r3, [pc, #508]	; (8001380 <inSystem+0x2e8>)
 8001182:	2200      	movs	r2, #0
 8001184:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8001186:	4b7e      	ldr	r3, [pc, #504]	; (8001380 <inSystem+0x2e8>)
 8001188:	2201      	movs	r2, #1
 800118a:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800118c:	4b7c      	ldr	r3, [pc, #496]	; (8001380 <inSystem+0x2e8>)
 800118e:	2200      	movs	r2, #0
 8001190:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001192:	4b7b      	ldr	r3, [pc, #492]	; (8001380 <inSystem+0x2e8>)
 8001194:	2202      	movs	r2, #2
 8001196:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 8001198:	4879      	ldr	r0, [pc, #484]	; (8001380 <inSystem+0x2e8>)
 800119a:	f002 f949 	bl	8003430 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 800119e:	4b79      	ldr	r3, [pc, #484]	; (8001384 <inSystem+0x2ec>)
 80011a0:	4a76      	ldr	r2, [pc, #472]	; (800137c <inSystem+0x2e4>)
 80011a2:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 80011a4:	4b77      	ldr	r3, [pc, #476]	; (8001384 <inSystem+0x2ec>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	711a      	strb	r2, [r3, #4]
	handlerPWM_2.config.duttyCicle  = 0;
 80011aa:	4b76      	ldr	r3, [pc, #472]	; (8001384 <inSystem+0x2ec>)
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
	handlerPWM_2.config.periodo     = 40;// se maneja 25 hz por testeo
 80011b2:	4b74      	ldr	r3, [pc, #464]	; (8001384 <inSystem+0x2ec>)
 80011b4:	2228      	movs	r2, #40	; 0x28
 80011b6:	819a      	strh	r2, [r3, #12]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 80011b8:	4b72      	ldr	r3, [pc, #456]	; (8001384 <inSystem+0x2ec>)
 80011ba:	2264      	movs	r2, #100	; 0x64
 80011bc:	609a      	str	r2, [r3, #8]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 80011be:	4b71      	ldr	r3, [pc, #452]	; (8001384 <inSystem+0x2ec>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	751a      	strb	r2, [r3, #20]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 80011c4:	4b6f      	ldr	r3, [pc, #444]	; (8001384 <inSystem+0x2ec>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_2);
 80011ca:	486e      	ldr	r0, [pc, #440]	; (8001384 <inSystem+0x2ec>)
 80011cc:	f002 ff7c 	bl	80040c8 <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 80011d0:	486c      	ldr	r0, [pc, #432]	; (8001384 <inSystem+0x2ec>)
 80011d2:	f003 f85b 	bl	800428c <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 80011d6:	4b6c      	ldr	r3, [pc, #432]	; (8001388 <inSystem+0x2f0>)
 80011d8:	4a6c      	ldr	r2, [pc, #432]	; (800138c <inSystem+0x2f4>)
 80011da:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80011dc:	4b6a      	ldr	r3, [pc, #424]	; (8001388 <inSystem+0x2f0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80011e2:	4b69      	ldr	r3, [pc, #420]	; (8001388 <inSystem+0x2f0>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 80011e8:	4b67      	ldr	r3, [pc, #412]	; (8001388 <inSystem+0x2f0>)
 80011ea:	220a      	movs	r2, #10
 80011ec:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80011ee:	4b66      	ldr	r3, [pc, #408]	; (8001388 <inSystem+0x2f0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011f4:	4b64      	ldr	r3, [pc, #400]	; (8001388 <inSystem+0x2f0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80011fa:	4b63      	ldr	r3, [pc, #396]	; (8001388 <inSystem+0x2f0>)
 80011fc:	2202      	movs	r2, #2
 80011fe:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 8001200:	4861      	ldr	r0, [pc, #388]	; (8001388 <inSystem+0x2f0>)
 8001202:	f002 f915 	bl	8003430 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 8001206:	2100      	movs	r1, #0
 8001208:	485f      	ldr	r0, [pc, #380]	; (8001388 <inSystem+0x2f0>)
 800120a:	f002 fa66 	bl	80036da <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 800120e:	4b60      	ldr	r3, [pc, #384]	; (8001390 <inSystem+0x2f8>)
 8001210:	4a5e      	ldr	r2, [pc, #376]	; (800138c <inSystem+0x2f4>)
 8001212:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001214:	4b5e      	ldr	r3, [pc, #376]	; (8001390 <inSystem+0x2f8>)
 8001216:	2200      	movs	r2, #0
 8001218:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800121a:	4b5d      	ldr	r3, [pc, #372]	; (8001390 <inSystem+0x2f8>)
 800121c:	2201      	movs	r2, #1
 800121e:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 8001220:	4b5b      	ldr	r3, [pc, #364]	; (8001390 <inSystem+0x2f8>)
 8001222:	220b      	movs	r2, #11
 8001224:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001226:	4b5a      	ldr	r3, [pc, #360]	; (8001390 <inSystem+0x2f8>)
 8001228:	2200      	movs	r2, #0
 800122a:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800122c:	4b58      	ldr	r3, [pc, #352]	; (8001390 <inSystem+0x2f8>)
 800122e:	2200      	movs	r2, #0
 8001230:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001232:	4b57      	ldr	r3, [pc, #348]	; (8001390 <inSystem+0x2f8>)
 8001234:	2202      	movs	r2, #2
 8001236:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 8001238:	4855      	ldr	r0, [pc, #340]	; (8001390 <inSystem+0x2f8>)
 800123a:	f002 f8f9 	bl	8003430 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 800123e:	2100      	movs	r1, #0
 8001240:	4853      	ldr	r0, [pc, #332]	; (8001390 <inSystem+0x2f8>)
 8001242:	f002 fa4a 	bl	80036da <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 8001246:	4b53      	ldr	r3, [pc, #332]	; (8001394 <inSystem+0x2fc>)
 8001248:	4a50      	ldr	r2, [pc, #320]	; (800138c <inSystem+0x2f4>)
 800124a:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800124c:	4b51      	ldr	r3, [pc, #324]	; (8001394 <inSystem+0x2fc>)
 800124e:	2200      	movs	r2, #0
 8001250:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001252:	4b50      	ldr	r3, [pc, #320]	; (8001394 <inSystem+0x2fc>)
 8001254:	2201      	movs	r2, #1
 8001256:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 8001258:	4b4e      	ldr	r3, [pc, #312]	; (8001394 <inSystem+0x2fc>)
 800125a:	220c      	movs	r2, #12
 800125c:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800125e:	4b4d      	ldr	r3, [pc, #308]	; (8001394 <inSystem+0x2fc>)
 8001260:	2200      	movs	r2, #0
 8001262:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001264:	4b4b      	ldr	r3, [pc, #300]	; (8001394 <inSystem+0x2fc>)
 8001266:	2200      	movs	r2, #0
 8001268:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800126a:	4b4a      	ldr	r3, [pc, #296]	; (8001394 <inSystem+0x2fc>)
 800126c:	2202      	movs	r2, #2
 800126e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 8001270:	4848      	ldr	r0, [pc, #288]	; (8001394 <inSystem+0x2fc>)
 8001272:	f002 f8dd 	bl	8003430 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default
 8001276:	2100      	movs	r1, #0
 8001278:	4846      	ldr	r0, [pc, #280]	; (8001394 <inSystem+0x2fc>)
 800127a:	f002 fa2e 	bl	80036da <GPIO_WritePin_Afopt>

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 800127e:	4b46      	ldr	r3, [pc, #280]	; (8001398 <inSystem+0x300>)
 8001280:	4a46      	ldr	r2, [pc, #280]	; (800139c <inSystem+0x304>)
 8001282:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001284:	4b44      	ldr	r3, [pc, #272]	; (8001398 <inSystem+0x300>)
 8001286:	2200      	movs	r2, #0
 8001288:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800128a:	4b43      	ldr	r3, [pc, #268]	; (8001398 <inSystem+0x300>)
 800128c:	2201      	movs	r2, #1
 800128e:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8001290:	4b41      	ldr	r3, [pc, #260]	; (8001398 <inSystem+0x300>)
 8001292:	2202      	movs	r2, #2
 8001294:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001296:	4b40      	ldr	r3, [pc, #256]	; (8001398 <inSystem+0x300>)
 8001298:	2200      	movs	r2, #0
 800129a:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800129c:	4b3e      	ldr	r3, [pc, #248]	; (8001398 <inSystem+0x300>)
 800129e:	2200      	movs	r2, #0
 80012a0:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80012a2:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <inSystem+0x300>)
 80012a4:	2202      	movs	r2, #2
 80012a6:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 80012a8:	483b      	ldr	r0, [pc, #236]	; (8001398 <inSystem+0x300>)
 80012aa:	f002 f8c1 	bl	8003430 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default
 80012ae:	2100      	movs	r1, #0
 80012b0:	4839      	ldr	r0, [pc, #228]	; (8001398 <inSystem+0x300>)
 80012b2:	f002 fa12 	bl	80036da <GPIO_WritePin_Afopt>
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <inSystem+0x308>)
 80012b8:	4a34      	ldr	r2, [pc, #208]	; (800138c <inSystem+0x2f4>)
 80012ba:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80012bc:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <inSystem+0x308>)
 80012be:	2200      	movs	r2, #0
 80012c0:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80012c2:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <inSystem+0x308>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 80012c8:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <inSystem+0x308>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80012ce:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <inSystem+0x308>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80012d4:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <inSystem+0x308>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80012da:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <inSystem+0x308>)
 80012dc:	2202      	movs	r2, #2
 80012de:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 80012e0:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <inSystem+0x30c>)
 80012e2:	4a2f      	ldr	r2, [pc, #188]	; (80013a0 <inSystem+0x308>)
 80012e4:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 80012e6:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <inSystem+0x30c>)
 80012e8:	2202      	movs	r2, #2
 80012ea:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 80012ec:	482d      	ldr	r0, [pc, #180]	; (80013a4 <inSystem+0x30c>)
 80012ee:	f001 f871 	bl	80023d4 <extInt_Config>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 80012f2:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <inSystem+0x310>)
 80012f4:	4a25      	ldr	r2, [pc, #148]	; (800138c <inSystem+0x2f4>)
 80012f6:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80012f8:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <inSystem+0x310>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <inSystem+0x310>)
 8001300:	2200      	movs	r2, #0
 8001302:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8001304:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <inSystem+0x310>)
 8001306:	2203      	movs	r2, #3
 8001308:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800130a:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <inSystem+0x310>)
 800130c:	2200      	movs	r2, #0
 800130e:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <inSystem+0x310>)
 8001312:	2200      	movs	r2, #0
 8001314:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001316:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <inSystem+0x310>)
 8001318:	2202      	movs	r2, #2
 800131a:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 800131c:	4b23      	ldr	r3, [pc, #140]	; (80013ac <inSystem+0x314>)
 800131e:	4a22      	ldr	r2, [pc, #136]	; (80013a8 <inSystem+0x310>)
 8001320:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001322:	4b22      	ldr	r3, [pc, #136]	; (80013ac <inSystem+0x314>)
 8001324:	2202      	movs	r2, #2
 8001326:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 8001328:	4820      	ldr	r0, [pc, #128]	; (80013ac <inSystem+0x314>)
 800132a:	f001 f853 	bl	80023d4 <extInt_Config>
	///////////////////////////////////////////Comunicación serial para comandos //////////////////////////////////////////////


	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <inSystem+0x318>)
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <inSystem+0x2d0>)
 8001332:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <inSystem+0x318>)
 8001336:	2207      	movs	r2, #7
 8001338:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <inSystem+0x318>)
 800133c:	2202      	movs	r2, #2
 800133e:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <inSystem+0x318>)
 8001342:	2200      	movs	r2, #0
 8001344:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <inSystem+0x318>)
 8001348:	2202      	movs	r2, #2
 800134a:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <inSystem+0x318>)
 800134e:	2200      	movs	r2, #0
 8001350:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <inSystem+0x318>)
 8001354:	2203      	movs	r2, #3
 8001356:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 8001358:	4815      	ldr	r0, [pc, #84]	; (80013b0 <inSystem+0x318>)
 800135a:	f002 f869 	bl	8003430 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <inSystem+0x31c>)
 8001360:	e02a      	b.n	80013b8 <inSystem+0x320>
 8001362:	bf00      	nop
 8001364:	200001fc 	.word	0x200001fc
 8001368:	40020000 	.word	0x40020000
 800136c:	2000029c 	.word	0x2000029c
 8001370:	40000400 	.word	0x40000400
 8001374:	20000208 	.word	0x20000208
 8001378:	200002d8 	.word	0x200002d8
 800137c:	40000c00 	.word	0x40000c00
 8001380:	20000214 	.word	0x20000214
 8001384:	200002f0 	.word	0x200002f0
 8001388:	20000244 	.word	0x20000244
 800138c:	40020800 	.word	0x40020800
 8001390:	20000238 	.word	0x20000238
 8001394:	2000025c 	.word	0x2000025c
 8001398:	20000250 	.word	0x20000250
 800139c:	40020c00 	.word	0x40020c00
 80013a0:	20000268 	.word	0x20000268
 80013a4:	2000028c 	.word	0x2000028c
 80013a8:	20000274 	.word	0x20000274
 80013ac:	20000294 	.word	0x20000294
 80013b0:	2000022c 	.word	0x2000022c
 80013b4:	20000220 	.word	0x20000220
 80013b8:	4a57      	ldr	r2, [pc, #348]	; (8001518 <inSystem+0x480>)
 80013ba:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80013bc:	4b57      	ldr	r3, [pc, #348]	; (800151c <inSystem+0x484>)
 80013be:	2207      	movs	r2, #7
 80013c0:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80013c2:	4b56      	ldr	r3, [pc, #344]	; (800151c <inSystem+0x484>)
 80013c4:	2202      	movs	r2, #2
 80013c6:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80013c8:	4b54      	ldr	r3, [pc, #336]	; (800151c <inSystem+0x484>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 80013ce:	4b53      	ldr	r3, [pc, #332]	; (800151c <inSystem+0x484>)
 80013d0:	2203      	movs	r2, #3
 80013d2:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013d4:	4b51      	ldr	r3, [pc, #324]	; (800151c <inSystem+0x484>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80013da:	4b50      	ldr	r3, [pc, #320]	; (800151c <inSystem+0x484>)
 80013dc:	2203      	movs	r2, #3
 80013de:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 80013e0:	484e      	ldr	r0, [pc, #312]	; (800151c <inSystem+0x484>)
 80013e2:	f002 f825 	bl	8003430 <GPIO_Config>

	handlerUSART1.ptrUSARTx                      = USART2;
 80013e6:	4b4e      	ldr	r3, [pc, #312]	; (8001520 <inSystem+0x488>)
 80013e8:	4a4e      	ldr	r2, [pc, #312]	; (8001524 <inSystem+0x48c>)
 80013ea:	601a      	str	r2, [r3, #0]
	handlerUSART1.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 80013ec:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <inSystem+0x488>)
 80013ee:	4a4e      	ldr	r2, [pc, #312]	; (8001528 <inSystem+0x490>)
 80013f0:	60da      	str	r2, [r3, #12]
	handlerUSART1.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 80013f2:	4b4b      	ldr	r3, [pc, #300]	; (8001520 <inSystem+0x488>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	71da      	strb	r2, [r3, #7]
	handlerUSART1.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 80013f8:	4b49      	ldr	r3, [pc, #292]	; (8001520 <inSystem+0x488>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	715a      	strb	r2, [r3, #5]
	handlerUSART1.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 80013fe:	4b48      	ldr	r3, [pc, #288]	; (8001520 <inSystem+0x488>)
 8001400:	2200      	movs	r2, #0
 8001402:	711a      	strb	r2, [r3, #4]
	handlerUSART1.USART_Config.USART_mode        = USART_MODE_RXTX;
 8001404:	4b46      	ldr	r3, [pc, #280]	; (8001520 <inSystem+0x488>)
 8001406:	2202      	movs	r2, #2
 8001408:	719a      	strb	r2, [r3, #6]
	handlerUSART1.USART_Config.USART_parity      = USART_PARITY_NONE;
 800140a:	4b45      	ldr	r3, [pc, #276]	; (8001520 <inSystem+0x488>)
 800140c:	2200      	movs	r2, #0
 800140e:	725a      	strb	r2, [r3, #9]
	handlerUSART1.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8001410:	4b43      	ldr	r3, [pc, #268]	; (8001520 <inSystem+0x488>)
 8001412:	2200      	movs	r2, #0
 8001414:	729a      	strb	r2, [r3, #10]
	handlerUSART1.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8001416:	4b42      	ldr	r3, [pc, #264]	; (8001520 <inSystem+0x488>)
 8001418:	2200      	movs	r2, #0
 800141a:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART1);
 800141c:	4840      	ldr	r0, [pc, #256]	; (8001520 <inSystem+0x488>)
 800141e:	f003 faa7 	bl	8004970 <USART_Config>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_vel.ptrTIMx                           = TIM2;
 8001422:	4b42      	ldr	r3, [pc, #264]	; (800152c <inSystem+0x494>)
 8001424:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001428:	601a      	str	r2, [r3, #0]
	handlerTIM2_vel.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 800142a:	4b40      	ldr	r3, [pc, #256]	; (800152c <inSystem+0x494>)
 800142c:	2201      	movs	r2, #1
 800142e:	741a      	strb	r2, [r3, #16]
	handlerTIM2_vel.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8001430:	4b3e      	ldr	r3, [pc, #248]	; (800152c <inSystem+0x494>)
 8001432:	2200      	movs	r2, #0
 8001434:	711a      	strb	r2, [r3, #4]
	handlerTIM2_vel.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 8001436:	4b3d      	ldr	r3, [pc, #244]	; (800152c <inSystem+0x494>)
 8001438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800143c:	609a      	str	r2, [r3, #8]
	handlerTIM2_vel.TIMx_Config.TIMx_period           = 80;
 800143e:	4b3b      	ldr	r3, [pc, #236]	; (800152c <inSystem+0x494>)
 8001440:	2250      	movs	r2, #80	; 0x50
 8001442:	60da      	str	r2, [r3, #12]
	Ts = handlerTIM2_vel.TIMx_Config.TIMx_period;
 8001444:	4b39      	ldr	r3, [pc, #228]	; (800152c <inSystem+0x494>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001450:	4b37      	ldr	r3, [pc, #220]	; (8001530 <inSystem+0x498>)
 8001452:	edc3 7a00 	vstr	s15, [r3]
	BasicTimer_Config(&handlerTIM2_vel);
 8001456:	4835      	ldr	r0, [pc, #212]	; (800152c <inSystem+0x494>)
 8001458:	f000 fc56 	bl	8001d08 <BasicTimer_Config>
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Motores 1 y 2//////////////////////////////////////////////


	handlerMotor1.configM1.e_M1   = 0;
 800145c:	4b35      	ldr	r3, [pc, #212]	; (8001534 <inSystem+0x49c>)
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
	handlerMotor1.configM1.e_M1_1 = 0;
 8001464:	4b33      	ldr	r3, [pc, #204]	; (8001534 <inSystem+0x49c>)
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
	handlerMotor1.configM1.e_M1_2 = 0;
 800146c:	4b31      	ldr	r3, [pc, #196]	; (8001534 <inSystem+0x49c>)
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	61da      	str	r2, [r3, #28]


	handlerMotor2.configM2.e_M2   = 0;
 8001474:	4b30      	ldr	r3, [pc, #192]	; (8001538 <inSystem+0x4a0>)
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	639a      	str	r2, [r3, #56]	; 0x38
	handlerMotor2.configM2.e_M2_1 = 0;
 800147c:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <inSystem+0x4a0>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	63da      	str	r2, [r3, #60]	; 0x3c
	handlerMotor2.configM2.e_M2_2 = 0;
 8001484:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <inSystem+0x4a0>)
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	641a      	str	r2, [r3, #64]	; 0x40

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

		////////////////////////////////Configuracion PINES B8 (SCL) B9 (SDA) e I2C1 //////////////////////////////////////////////

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 800148c:	4b2b      	ldr	r3, [pc, #172]	; (800153c <inSystem+0x4a4>)
 800148e:	4a2c      	ldr	r2, [pc, #176]	; (8001540 <inSystem+0x4a8>)
 8001490:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001492:	4b2a      	ldr	r3, [pc, #168]	; (800153c <inSystem+0x4a4>)
 8001494:	2204      	movs	r2, #4
 8001496:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <inSystem+0x4a4>)
 800149a:	2201      	movs	r2, #1
 800149c:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 800149e:	4b27      	ldr	r3, [pc, #156]	; (800153c <inSystem+0x4a4>)
 80014a0:	2208      	movs	r2, #8
 80014a2:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80014a4:	4b25      	ldr	r3, [pc, #148]	; (800153c <inSystem+0x4a4>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <inSystem+0x4a4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80014b0:	4b22      	ldr	r3, [pc, #136]	; (800153c <inSystem+0x4a4>)
 80014b2:	2203      	movs	r2, #3
 80014b4:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <inSystem+0x4ac>)
 80014b8:	4a23      	ldr	r2, [pc, #140]	; (8001548 <inSystem+0x4b0>)
 80014ba:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <inSystem+0x4ac>)
 80014be:	2232      	movs	r2, #50	; 0x32
 80014c0:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <inSystem+0x4ac>)
 80014c4:	2268      	movs	r2, #104	; 0x68
 80014c6:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <inSystem+0x4ac>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandler  = &handler_PINB8_I2C1;
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <inSystem+0x4b4>)
 80014d0:	4a1a      	ldr	r2, [pc, #104]	; (800153c <inSystem+0x4a4>)
 80014d2:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <inSystem+0x4b4>)
 80014d6:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <inSystem+0x4ac>)
 80014d8:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <inSystem+0x4b4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <inSystem+0x4b4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 80014e6:	4819      	ldr	r0, [pc, #100]	; (800154c <inSystem+0x4b4>)
 80014e8:	f002 f95c 	bl	80037a4 <configMPUAccel>

	////////////////////////////////Timer 5 para contador de tiempo ////////////////////////////////////



	handlerTIM5_time.ptrTIMx                           = TIM5;
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <inSystem+0x4b8>)
 80014ee:	4a19      	ldr	r2, [pc, #100]	; (8001554 <inSystem+0x4bc>)
 80014f0:	601a      	str	r2, [r3, #0]
	handlerTIM5_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <inSystem+0x4b8>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	741a      	strb	r2, [r3, #16]
	handlerTIM5_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <inSystem+0x4b8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	711a      	strb	r2, [r3, #4]
	handlerTIM5_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <inSystem+0x4b8>)
 8001500:	f242 7210 	movw	r2, #10000	; 0x2710
 8001504:	609a      	str	r2, [r3, #8]
	handlerTIM5_time.TIMx_Config.TIMx_period           = 1000;
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <inSystem+0x4b8>)
 8001508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800150c:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM5_time);
 800150e:	4810      	ldr	r0, [pc, #64]	; (8001550 <inSystem+0x4b8>)
 8001510:	f000 fbfa 	bl	8001d08 <BasicTimer_Config>

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40020000 	.word	0x40020000
 800151c:	20000220 	.word	0x20000220
 8001520:	20000308 	.word	0x20000308
 8001524:	40004400 	.word	0x40004400
 8001528:	02faf080 	.word	0x02faf080
 800152c:	200002b0 	.word	0x200002b0
 8001530:	2000000c 	.word	0x2000000c
 8001534:	2000039c 	.word	0x2000039c
 8001538:	200003e4 	.word	0x200003e4
 800153c:	20000280 	.word	0x20000280
 8001540:	40020400 	.word	0x40020400
 8001544:	2000042c 	.word	0x2000042c
 8001548:	40005400 	.word	0x40005400
 800154c:	20000434 	.word	0x20000434
 8001550:	200002c4 	.word	0x200002c4
 8001554:	40000c00 	.word	0x40000c00

08001558 <parseCommands>:


void parseCommands(char *stringVector){
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af04      	add	r7, sp, #16
 800155e:	6078      	str	r0, [r7, #4]

	sscanf(stringVector, "%s %u %u %u %s", cmd ,&firstParameter, &secondParameter, &thirdParameter, userMsg);
 8001560:	4bb1      	ldr	r3, [pc, #708]	; (8001828 <parseCommands+0x2d0>)
 8001562:	9302      	str	r3, [sp, #8]
 8001564:	4bb1      	ldr	r3, [pc, #708]	; (800182c <parseCommands+0x2d4>)
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	4bb1      	ldr	r3, [pc, #708]	; (8001830 <parseCommands+0x2d8>)
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	4bb1      	ldr	r3, [pc, #708]	; (8001834 <parseCommands+0x2dc>)
 800156e:	4ab2      	ldr	r2, [pc, #712]	; (8001838 <parseCommands+0x2e0>)
 8001570:	49b2      	ldr	r1, [pc, #712]	; (800183c <parseCommands+0x2e4>)
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f004 fe7e 	bl	8006274 <siscanf>




	if (strcmp(cmd, "help") == 0){
 8001578:	49b1      	ldr	r1, [pc, #708]	; (8001840 <parseCommands+0x2e8>)
 800157a:	48af      	ldr	r0, [pc, #700]	; (8001838 <parseCommands+0x2e0>)
 800157c:	f7fe fe30 	bl	80001e0 <strcmp>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d118      	bne.n	80015b8 <parseCommands+0x60>

		writeMsg(&handlerUSART1, "HELP MENU CMD : \n");
 8001586:	49af      	ldr	r1, [pc, #700]	; (8001844 <parseCommands+0x2ec>)
 8001588:	48af      	ldr	r0, [pc, #700]	; (8001848 <parseCommands+0x2f0>)
 800158a:	f003 fdd3 	bl	8005134 <writeMsg>
		writeMsg(&handlerUSART1, "1)  start #setPoint #dir --- setPoint de 0 a 9 ---  dir 0 CW 1 CCW \n");
 800158e:	49af      	ldr	r1, [pc, #700]	; (800184c <parseCommands+0x2f4>)
 8001590:	48ad      	ldr	r0, [pc, #692]	; (8001848 <parseCommands+0x2f0>)
 8001592:	f003 fdcf 	bl	8005134 <writeMsg>
		writeMsg(&handlerUSART1, "2)  goTo #dutty #dir #distance  -----dutty de 0 a 100 ||  dir 0 CW 1 CCW || Distancia en mm \n" );
 8001596:	49ae      	ldr	r1, [pc, #696]	; (8001850 <parseCommands+0x2f8>)
 8001598:	48ab      	ldr	r0, [pc, #684]	; (8001848 <parseCommands+0x2f0>)
 800159a:	f003 fdcb 	bl	8005134 <writeMsg>
		writeMsg(&handlerUSART1, "3)  off \n");
 800159e:	49ad      	ldr	r1, [pc, #692]	; (8001854 <parseCommands+0x2fc>)
 80015a0:	48a9      	ldr	r0, [pc, #676]	; (8001848 <parseCommands+0x2f0>)
 80015a2:	f003 fdc7 	bl	8005134 <writeMsg>
		writeMsg(&handlerUSART1, "4)  gyro \n");
 80015a6:	49ac      	ldr	r1, [pc, #688]	; (8001858 <parseCommands+0x300>)
 80015a8:	48a7      	ldr	r0, [pc, #668]	; (8001848 <parseCommands+0x2f0>)
 80015aa:	f003 fdc3 	bl	8005134 <writeMsg>
		writeMsg(&handlerUSART1, " \n");
 80015ae:	49ab      	ldr	r1, [pc, #684]	; (800185c <parseCommands+0x304>)
 80015b0:	48a5      	ldr	r0, [pc, #660]	; (8001848 <parseCommands+0x2f0>)
 80015b2:	f003 fdbf 	bl	8005134 <writeMsg>


	}


}
 80015b6:	e1c2      	b.n	800193e <parseCommands+0x3e6>
	}else if (strcmp(cmd, "start") == 0){
 80015b8:	49a9      	ldr	r1, [pc, #676]	; (8001860 <parseCommands+0x308>)
 80015ba:	489f      	ldr	r0, [pc, #636]	; (8001838 <parseCommands+0x2e0>)
 80015bc:	f7fe fe10 	bl	80001e0 <strcmp>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d154      	bne.n	8001670 <parseCommands+0x118>
		dist_1 = 0;
 80015c6:	49a7      	ldr	r1, [pc, #668]	; (8001864 <parseCommands+0x30c>)
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9c1 2300 	strd	r2, r3, [r1]
		dist_2 = 0;
 80015d4:	49a4      	ldr	r1, [pc, #656]	; (8001868 <parseCommands+0x310>)
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	e9c1 2300 	strd	r2, r3, [r1]
		handlerMotor1.configM1.counts_M1 = 0;
 80015e2:	4ba2      	ldr	r3, [pc, #648]	; (800186c <parseCommands+0x314>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	841a      	strh	r2, [r3, #32]
		handlerMotor2.configM2.counts_M2 = 0;
 80015e8:	4ba1      	ldr	r3, [pc, #644]	; (8001870 <parseCommands+0x318>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		setPoint = firstParameter;
 80015f0:	4b90      	ldr	r3, [pc, #576]	; (8001834 <parseCommands+0x2dc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015fc:	4b9d      	ldr	r3, [pc, #628]	; (8001874 <parseCommands+0x31c>)
 80015fe:	edc3 7a00 	vstr	s15, [r3]
		if (!flagPWM_1){
 8001602:	4b9d      	ldr	r3, [pc, #628]	; (8001878 <parseCommands+0x320>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d112      	bne.n	8001630 <parseCommands+0xd8>
			GPIO_WritePin_Afopt(&handlerIn1PinC12, secondParameter);
 800160a:	4b89      	ldr	r3, [pc, #548]	; (8001830 <parseCommands+0x2d8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	489a      	ldr	r0, [pc, #616]	; (800187c <parseCommands+0x324>)
 8001614:	f002 f861 	bl	80036da <GPIO_WritePin_Afopt>
			flagPWM_1 = enableOutput(&handlerPWM_1);
 8001618:	4899      	ldr	r0, [pc, #612]	; (8001880 <parseCommands+0x328>)
 800161a:	f002 fe49 	bl	80042b0 <enableOutput>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	4b95      	ldr	r3, [pc, #596]	; (8001878 <parseCommands+0x320>)
 8001624:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn1PinC10,SET);
 8001626:	2101      	movs	r1, #1
 8001628:	4896      	ldr	r0, [pc, #600]	; (8001884 <parseCommands+0x32c>)
 800162a:	f002 f856 	bl	80036da <GPIO_WritePin_Afopt>
 800162e:	e000      	b.n	8001632 <parseCommands+0xda>
			__NOP();
 8001630:	bf00      	nop
		if (!flagPWM_2){
 8001632:	4b95      	ldr	r3, [pc, #596]	; (8001888 <parseCommands+0x330>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d112      	bne.n	8001660 <parseCommands+0x108>
			GPIO_WritePin_Afopt(&handlerIn2PinD2, secondParameter);
 800163a:	4b7d      	ldr	r3, [pc, #500]	; (8001830 <parseCommands+0x2d8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4619      	mov	r1, r3
 8001642:	4892      	ldr	r0, [pc, #584]	; (800188c <parseCommands+0x334>)
 8001644:	f002 f849 	bl	80036da <GPIO_WritePin_Afopt>
			flagPWM_2 = enableOutput(&handlerPWM_2);
 8001648:	4891      	ldr	r0, [pc, #580]	; (8001890 <parseCommands+0x338>)
 800164a:	f002 fe31 	bl	80042b0 <enableOutput>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	4b8d      	ldr	r3, [pc, #564]	; (8001888 <parseCommands+0x330>)
 8001654:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn2PinC11,SET);
 8001656:	2101      	movs	r1, #1
 8001658:	488e      	ldr	r0, [pc, #568]	; (8001894 <parseCommands+0x33c>)
 800165a:	f002 f83e 	bl	80036da <GPIO_WritePin_Afopt>
 800165e:	e000      	b.n	8001662 <parseCommands+0x10a>
			__NOP();
 8001660:	bf00      	nop
		startTimer(&handlerTIM2_vel);
 8001662:	488d      	ldr	r0, [pc, #564]	; (8001898 <parseCommands+0x340>)
 8001664:	f000 fe74 	bl	8002350 <startTimer>
		enableChangePWM = SET;
 8001668:	4b8c      	ldr	r3, [pc, #560]	; (800189c <parseCommands+0x344>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
}
 800166e:	e166      	b.n	800193e <parseCommands+0x3e6>
	}else if (strcmp(cmd, "goTo") == 0){
 8001670:	498b      	ldr	r1, [pc, #556]	; (80018a0 <parseCommands+0x348>)
 8001672:	4871      	ldr	r0, [pc, #452]	; (8001838 <parseCommands+0x2e0>)
 8001674:	f7fe fdb4 	bl	80001e0 <strcmp>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 8120 	bne.w	80018c0 <parseCommands+0x368>
		dist_1 = 0;
 8001680:	4978      	ldr	r1, [pc, #480]	; (8001864 <parseCommands+0x30c>)
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	e9c1 2300 	strd	r2, r3, [r1]
		dist_2 = 0;
 800168e:	4976      	ldr	r1, [pc, #472]	; (8001868 <parseCommands+0x310>)
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	e9c1 2300 	strd	r2, r3, [r1]
		handlerMotor1.configM1.counts_M1 = 0;
 800169c:	4b73      	ldr	r3, [pc, #460]	; (800186c <parseCommands+0x314>)
 800169e:	2200      	movs	r2, #0
 80016a0:	841a      	strh	r2, [r3, #32]
		handlerMotor2.configM2.counts_M2 = 0;
 80016a2:	4b73      	ldr	r3, [pc, #460]	; (8001870 <parseCommands+0x318>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		distance = thirdParameter;
 80016aa:	4b60      	ldr	r3, [pc, #384]	; (800182c <parseCommands+0x2d4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	4b7c      	ldr	r3, [pc, #496]	; (80018a4 <parseCommands+0x34c>)
 80016b2:	801a      	strh	r2, [r3, #0]
		setPoint = thirdParameter;
 80016b4:	4b5d      	ldr	r3, [pc, #372]	; (800182c <parseCommands+0x2d4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	ee07 3a90 	vmov	s15, r3
 80016bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016c0:	4b6c      	ldr	r3, [pc, #432]	; (8001874 <parseCommands+0x31c>)
 80016c2:	edc3 7a00 	vstr	s15, [r3]
		if (!flagPWM_1){
 80016c6:	4b6c      	ldr	r3, [pc, #432]	; (8001878 <parseCommands+0x320>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d14f      	bne.n	800176e <parseCommands+0x216>
			handlerMotor1.configM1.u_M1_1 = setPoint / k;
 80016ce:	4b69      	ldr	r3, [pc, #420]	; (8001874 <parseCommands+0x31c>)
 80016d0:	edd3 6a00 	vldr	s13, [r3]
 80016d4:	4b74      	ldr	r3, [pc, #464]	; (80018a8 <parseCommands+0x350>)
 80016d6:	ed93 7a00 	vldr	s14, [r3]
 80016da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016de:	4b63      	ldr	r3, [pc, #396]	; (800186c <parseCommands+0x314>)
 80016e0:	edc3 7a01 	vstr	s15, [r3, #4]
			setConstants(&handlerMotor1, 1, k, tau, theta, Ts);
 80016e4:	4b70      	ldr	r3, [pc, #448]	; (80018a8 <parseCommands+0x350>)
 80016e6:	ed93 7a00 	vldr	s14, [r3]
 80016ea:	4b70      	ldr	r3, [pc, #448]	; (80018ac <parseCommands+0x354>)
 80016ec:	edd3 6a00 	vldr	s13, [r3]
 80016f0:	4b6f      	ldr	r3, [pc, #444]	; (80018b0 <parseCommands+0x358>)
 80016f2:	ed93 6a00 	vldr	s12, [r3]
 80016f6:	4b6f      	ldr	r3, [pc, #444]	; (80018b4 <parseCommands+0x35c>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001700:	ee17 3a90 	vmov	r3, s15
 8001704:	b29b      	uxth	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	eeb0 1a46 	vmov.f32	s2, s12
 800170c:	eef0 0a66 	vmov.f32	s1, s13
 8001710:	eeb0 0a47 	vmov.f32	s0, s14
 8001714:	2101      	movs	r1, #1
 8001716:	4855      	ldr	r0, [pc, #340]	; (800186c <parseCommands+0x314>)
 8001718:	f002 fa24 	bl	8003b64 <setConstants>
			updateDuttyCycleAfOpt(&handlerPWM_1, firstParameter);
 800171c:	4b45      	ldr	r3, [pc, #276]	; (8001834 <parseCommands+0x2dc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001728:	eeb0 0a67 	vmov.f32	s0, s15
 800172c:	4854      	ldr	r0, [pc, #336]	; (8001880 <parseCommands+0x328>)
 800172e:	f003 f841 	bl	80047b4 <updateDuttyCycleAfOpt>
			counterPWM1 = showPWMBfOpt(&handlerPWM_1);
 8001732:	4853      	ldr	r0, [pc, #332]	; (8001880 <parseCommands+0x328>)
 8001734:	f002 ffe2 	bl	80046fc <showPWMBfOpt>
 8001738:	4603      	mov	r3, r0
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001742:	4b5d      	ldr	r3, [pc, #372]	; (80018b8 <parseCommands+0x360>)
 8001744:	edc3 7a00 	vstr	s15, [r3]
			GPIO_WritePin_Afopt(&handlerIn1PinC12, secondParameter);
 8001748:	4b39      	ldr	r3, [pc, #228]	; (8001830 <parseCommands+0x2d8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	4619      	mov	r1, r3
 8001750:	484a      	ldr	r0, [pc, #296]	; (800187c <parseCommands+0x324>)
 8001752:	f001 ffc2 	bl	80036da <GPIO_WritePin_Afopt>
			flagPWM_1 = enableOutput(&handlerPWM_1);
 8001756:	484a      	ldr	r0, [pc, #296]	; (8001880 <parseCommands+0x328>)
 8001758:	f002 fdaa 	bl	80042b0 <enableOutput>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	4b45      	ldr	r3, [pc, #276]	; (8001878 <parseCommands+0x320>)
 8001762:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn1PinC10,SET);
 8001764:	2101      	movs	r1, #1
 8001766:	4847      	ldr	r0, [pc, #284]	; (8001884 <parseCommands+0x32c>)
 8001768:	f001 ffb7 	bl	80036da <GPIO_WritePin_Afopt>
 800176c:	e000      	b.n	8001770 <parseCommands+0x218>
			__NOP();
 800176e:	bf00      	nop
		if (!flagPWM_2){
 8001770:	4b45      	ldr	r3, [pc, #276]	; (8001888 <parseCommands+0x330>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d14f      	bne.n	8001818 <parseCommands+0x2c0>
			handlerMotor2.configM2.u_M2_1 = setPoint / k;
 8001778:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <parseCommands+0x31c>)
 800177a:	edd3 6a00 	vldr	s13, [r3]
 800177e:	4b4a      	ldr	r3, [pc, #296]	; (80018a8 <parseCommands+0x350>)
 8001780:	ed93 7a00 	vldr	s14, [r3]
 8001784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001788:	4b39      	ldr	r3, [pc, #228]	; (8001870 <parseCommands+0x318>)
 800178a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			setConstants(&handlerMotor2, 2, k, tau, theta, Ts);
 800178e:	4b46      	ldr	r3, [pc, #280]	; (80018a8 <parseCommands+0x350>)
 8001790:	ed93 7a00 	vldr	s14, [r3]
 8001794:	4b45      	ldr	r3, [pc, #276]	; (80018ac <parseCommands+0x354>)
 8001796:	edd3 6a00 	vldr	s13, [r3]
 800179a:	4b45      	ldr	r3, [pc, #276]	; (80018b0 <parseCommands+0x358>)
 800179c:	ed93 6a00 	vldr	s12, [r3]
 80017a0:	4b44      	ldr	r3, [pc, #272]	; (80018b4 <parseCommands+0x35c>)
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017aa:	ee17 3a90 	vmov	r3, s15
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	eeb0 1a46 	vmov.f32	s2, s12
 80017b6:	eef0 0a66 	vmov.f32	s1, s13
 80017ba:	eeb0 0a47 	vmov.f32	s0, s14
 80017be:	2102      	movs	r1, #2
 80017c0:	482b      	ldr	r0, [pc, #172]	; (8001870 <parseCommands+0x318>)
 80017c2:	f002 f9cf 	bl	8003b64 <setConstants>
			updateDuttyCycleAfOpt(&handlerPWM_2, firstParameter);
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <parseCommands+0x2dc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017d2:	eeb0 0a67 	vmov.f32	s0, s15
 80017d6:	482e      	ldr	r0, [pc, #184]	; (8001890 <parseCommands+0x338>)
 80017d8:	f002 ffec 	bl	80047b4 <updateDuttyCycleAfOpt>
			counterPWM2 = showPWMBfOpt(&handlerPWM_2);
 80017dc:	482c      	ldr	r0, [pc, #176]	; (8001890 <parseCommands+0x338>)
 80017de:	f002 ff8d 	bl	80046fc <showPWMBfOpt>
 80017e2:	4603      	mov	r3, r0
 80017e4:	ee07 3a90 	vmov	s15, r3
 80017e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ec:	4b33      	ldr	r3, [pc, #204]	; (80018bc <parseCommands+0x364>)
 80017ee:	edc3 7a00 	vstr	s15, [r3]
			GPIO_WritePin_Afopt(&handlerIn2PinD2, secondParameter);
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <parseCommands+0x2d8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	4619      	mov	r1, r3
 80017fa:	4824      	ldr	r0, [pc, #144]	; (800188c <parseCommands+0x334>)
 80017fc:	f001 ff6d 	bl	80036da <GPIO_WritePin_Afopt>
			flagPWM_2 = enableOutput(&handlerPWM_2);
 8001800:	4823      	ldr	r0, [pc, #140]	; (8001890 <parseCommands+0x338>)
 8001802:	f002 fd55 	bl	80042b0 <enableOutput>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <parseCommands+0x330>)
 800180c:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn2PinC11,SET);
 800180e:	2101      	movs	r1, #1
 8001810:	4820      	ldr	r0, [pc, #128]	; (8001894 <parseCommands+0x33c>)
 8001812:	f001 ff62 	bl	80036da <GPIO_WritePin_Afopt>
 8001816:	e000      	b.n	800181a <parseCommands+0x2c2>
			__NOP();
 8001818:	bf00      	nop
		startTimer(&handlerTIM2_vel);
 800181a:	481f      	ldr	r0, [pc, #124]	; (8001898 <parseCommands+0x340>)
 800181c:	f000 fd98 	bl	8002350 <startTimer>
		enableChangePWM = SET;
 8001820:	4b1e      	ldr	r3, [pc, #120]	; (800189c <parseCommands+0x344>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
}
 8001826:	e08a      	b.n	800193e <parseCommands+0x3e6>
 8001828:	200004b0 	.word	0x200004b0
 800182c:	200004ac 	.word	0x200004ac
 8001830:	200004a8 	.word	0x200004a8
 8001834:	200004a4 	.word	0x200004a4
 8001838:	20000484 	.word	0x20000484
 800183c:	08009dc8 	.word	0x08009dc8
 8001840:	08009dd8 	.word	0x08009dd8
 8001844:	08009de0 	.word	0x08009de0
 8001848:	20000308 	.word	0x20000308
 800184c:	08009df4 	.word	0x08009df4
 8001850:	08009e3c 	.word	0x08009e3c
 8001854:	08009e9c 	.word	0x08009e9c
 8001858:	08009ea8 	.word	0x08009ea8
 800185c:	08009eb4 	.word	0x08009eb4
 8001860:	08009eb8 	.word	0x08009eb8
 8001864:	20000540 	.word	0x20000540
 8001868:	20000548 	.word	0x20000548
 800186c:	2000039c 	.word	0x2000039c
 8001870:	200003e4 	.word	0x200003e4
 8001874:	20000564 	.word	0x20000564
 8001878:	20000530 	.word	0x20000530
 800187c:	2000025c 	.word	0x2000025c
 8001880:	200002d8 	.word	0x200002d8
 8001884:	20000244 	.word	0x20000244
 8001888:	20000531 	.word	0x20000531
 800188c:	20000250 	.word	0x20000250
 8001890:	200002f0 	.word	0x200002f0
 8001894:	20000238 	.word	0x20000238
 8001898:	200002b0 	.word	0x200002b0
 800189c:	20000533 	.word	0x20000533
 80018a0:	08009ec0 	.word	0x08009ec0
 80018a4:	20000568 	.word	0x20000568
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000004 	.word	0x20000004
 80018b0:	20000008 	.word	0x20000008
 80018b4:	2000000c 	.word	0x2000000c
 80018b8:	20000538 	.word	0x20000538
 80018bc:	2000053c 	.word	0x2000053c
	}else if (strcmp(cmd, "off") == 0){
 80018c0:	4921      	ldr	r1, [pc, #132]	; (8001948 <parseCommands+0x3f0>)
 80018c2:	4822      	ldr	r0, [pc, #136]	; (800194c <parseCommands+0x3f4>)
 80018c4:	f7fe fc8c 	bl	80001e0 <strcmp>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d128      	bne.n	8001920 <parseCommands+0x3c8>
		if (flagPWM_1){
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <parseCommands+0x3f8>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00b      	beq.n	80018ee <parseCommands+0x396>
			flagPWM_1 = disableOutput(&handlerPWM_1);
 80018d6:	481f      	ldr	r0, [pc, #124]	; (8001954 <parseCommands+0x3fc>)
 80018d8:	f002 ff7c 	bl	80047d4 <disableOutput>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <parseCommands+0x3f8>)
 80018e2:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn1PinC10,RESET);
 80018e4:	2100      	movs	r1, #0
 80018e6:	481c      	ldr	r0, [pc, #112]	; (8001958 <parseCommands+0x400>)
 80018e8:	f001 fef7 	bl	80036da <GPIO_WritePin_Afopt>
 80018ec:	e000      	b.n	80018f0 <parseCommands+0x398>
			__NOP();
 80018ee:	bf00      	nop
		if (flagPWM_2){
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <parseCommands+0x404>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00b      	beq.n	8001910 <parseCommands+0x3b8>
			flagPWM_2 = disableOutput(&handlerPWM_2);
 80018f8:	4819      	ldr	r0, [pc, #100]	; (8001960 <parseCommands+0x408>)
 80018fa:	f002 ff6b 	bl	80047d4 <disableOutput>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <parseCommands+0x404>)
 8001904:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn2PinC11,RESET);
 8001906:	2100      	movs	r1, #0
 8001908:	4816      	ldr	r0, [pc, #88]	; (8001964 <parseCommands+0x40c>)
 800190a:	f001 fee6 	bl	80036da <GPIO_WritePin_Afopt>
 800190e:	e000      	b.n	8001912 <parseCommands+0x3ba>
			__NOP();
 8001910:	bf00      	nop
		stopTimer(&handlerTIM2_vel);
 8001912:	4815      	ldr	r0, [pc, #84]	; (8001968 <parseCommands+0x410>)
 8001914:	f000 fd2e 	bl	8002374 <stopTimer>
		enableChangePWM = RESET;
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <parseCommands+0x414>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
}
 800191e:	e00e      	b.n	800193e <parseCommands+0x3e6>
	}else if (strcmp(cmd, "gyro") == 0){
 8001920:	4913      	ldr	r1, [pc, #76]	; (8001970 <parseCommands+0x418>)
 8001922:	480a      	ldr	r0, [pc, #40]	; (800194c <parseCommands+0x3f4>)
 8001924:	f7fe fc5c 	bl	80001e0 <strcmp>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d103      	bne.n	8001936 <parseCommands+0x3de>
		startTimer(&handlerTIM5_time);
 800192e:	4811      	ldr	r0, [pc, #68]	; (8001974 <parseCommands+0x41c>)
 8001930:	f000 fd0e 	bl	8002350 <startTimer>
}
 8001934:	e003      	b.n	800193e <parseCommands+0x3e6>
		writeMsg(&handlerUSART1, "Comando Incorrecto :c \n");
 8001936:	4910      	ldr	r1, [pc, #64]	; (8001978 <parseCommands+0x420>)
 8001938:	4810      	ldr	r0, [pc, #64]	; (800197c <parseCommands+0x424>)
 800193a:	f003 fbfb 	bl	8005134 <writeMsg>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	08009ec8 	.word	0x08009ec8
 800194c:	20000484 	.word	0x20000484
 8001950:	20000530 	.word	0x20000530
 8001954:	200002d8 	.word	0x200002d8
 8001958:	20000244 	.word	0x20000244
 800195c:	20000531 	.word	0x20000531
 8001960:	200002f0 	.word	0x200002f0
 8001964:	20000238 	.word	0x20000238
 8001968:	200002b0 	.word	0x200002b0
 800196c:	20000533 	.word	0x20000533
 8001970:	08009ecc 	.word	0x08009ecc
 8001974:	200002c4 	.word	0x200002c4
 8001978:	08009ed4 	.word	0x08009ed4
 800197c:	20000308 	.word	0x20000308

08001980 <distanceM1>:



double distanceM1 (void){
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0

	double u_1;

	u_1 = M_PI * (51.45) * handlerMotor1.configM1.counts_M1/ (72) ;
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <distanceM1+0x58>)
 8001988:	8c1b      	ldrh	r3, [r3, #32]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fde2 	bl	8000554 <__aeabi_i2d>
 8001990:	a30f      	add	r3, pc, #60	; (adr r3, 80019d0 <distanceM1+0x50>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7fe fe47 	bl	8000628 <__aeabi_dmul>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <distanceM1+0x5c>)
 80019a8:	f7fe ff68 	bl	800087c <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	e9c7 2300 	strd	r2, r3, [r7]

	return u_1;
 80019b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019b8:	ec43 2b17 	vmov	d7, r2, r3
}
 80019bc:	eeb0 0a47 	vmov.f32	s0, s14
 80019c0:	eef0 0a67 	vmov.f32	s1, s15
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	f3af 8000 	nop.w
 80019d0:	71f1350d 	.word	0x71f1350d
 80019d4:	40643451 	.word	0x40643451
 80019d8:	2000039c 	.word	0x2000039c
 80019dc:	40520000 	.word	0x40520000

080019e0 <distanceM2>:

double distanceM2 (void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0

	double u_2;

	u_2 = M_PI * (51.70) * handlerMotor2.configM2.counts_M2/ (72) ;
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <distanceM2+0x58>)
 80019e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fdb1 	bl	8000554 <__aeabi_i2d>
 80019f2:	a30f      	add	r3, pc, #60	; (adr r3, 8001a30 <distanceM2+0x50>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fe16 	bl	8000628 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <distanceM2+0x5c>)
 8001a0a:	f7fe ff37 	bl	800087c <__aeabi_ddiv>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	e9c7 2300 	strd	r2, r3, [r7]

	return u_2;
 8001a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a1a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a22:	eef0 0a67 	vmov.f32	s1, s15
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	f3af 8000 	nop.w
 8001a30:	6d45793b 	.word	0x6d45793b
 8001a34:	40644d73 	.word	0x40644d73
 8001a38:	200003e4 	.word	0x200003e4
 8001a3c:	40520000 	.word	0x40520000

08001a40 <usart2Rx_Callback>:


// Interrupcion usart 1
void usart2Rx_Callback(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0

	rxData = getRxData();
 8001a44:	f003 fb9e 	bl	8005184 <getRxData>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b01      	ldr	r3, [pc, #4]	; (8001a54 <usart2Rx_Callback+0x14>)
 8001a4e:	701a      	strb	r2, [r3, #0]

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000482 	.word	0x20000482

08001a58 <BasicTimer5_Callback>:


void BasicTimer5_Callback(void){
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

	tiempo += 1;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <BasicTimer5_Callback+0x28>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	1c50      	adds	r0, r2, #1
 8001a64:	f143 0100 	adc.w	r1, r3, #0
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <BasicTimer5_Callback+0x28>)
 8001a6a:	e9c3 0100 	strd	r0, r1, [r3]
	flagGyro = SET;
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <BasicTimer5_Callback+0x2c>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]

}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000580 	.word	0x20000580
 8001a84:	20000534 	.word	0x20000534

08001a88 <BasicTimer3_Callback>:

//Interrupción Timer 3
void BasicTimer3_Callback(void){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0

	GPIOxTooglePin(&handlerPinA5);
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <BasicTimer3_Callback+0x1c>)
 8001a8e:	f001 fe70 	bl	8003772 <GPIOxTooglePin>
	counterTIM3++;
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <BasicTimer3_Callback+0x20>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	3301      	adds	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <BasicTimer3_Callback+0x20>)
 8001a9c:	801a      	strh	r2, [r3, #0]

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200001fc 	.word	0x200001fc
 8001aa8:	20000558 	.word	0x20000558

08001aac <BasicTimer2_Callback>:

//Interrupcion Timer 2

void BasicTimer2_Callback(void){
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0

	flagT2 = SET;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <BasicTimer2_Callback+0x14>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]


}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	20000532 	.word	0x20000532

08001ac4 <callback_extInt1>:


//Interrupciones de Exti
void callback_extInt1(void){
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

	handlerMotor1.configM1.counts_M1++;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <callback_extInt1+0x1c>)
 8001aca:	8c1b      	ldrh	r3, [r3, #32]
 8001acc:	3301      	adds	r3, #1
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <callback_extInt1+0x1c>)
 8001ad2:	841a      	strh	r2, [r3, #32]

}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	2000039c 	.word	0x2000039c

08001ae4 <callback_extInt3>:

void callback_extInt3(void){
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

	handlerMotor2.configM2.counts_M2++;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <callback_extInt3+0x20>)
 8001aea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aee:	3301      	adds	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <callback_extInt3+0x20>)
 8001af4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	200003e4 	.word	0x200003e4

08001b08 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <ITM_SendChar+0x48>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <ITM_SendChar+0x48>)
 8001b18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <ITM_SendChar+0x4c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <ITM_SendChar+0x4c>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001b2a:	bf00      	nop
 8001b2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f8      	beq.n	8001b2c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001b3a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	6013      	str	r3, [r2, #0]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000edfc 	.word	0xe000edfc
 8001b54:	e0000e00 	.word	0xe0000e00

08001b58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
	return 1;
 8001b5c:	2301      	movs	r3, #1
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_kill>:

int _kill(int pid, int sig)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b72:	f003 fdcb 	bl	800570c <__errno>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2216      	movs	r2, #22
 8001b7a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_exit>:

void _exit (int status)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ffe7 	bl	8001b68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b9a:	e7fe      	b.n	8001b9a <_exit+0x12>

08001b9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e00a      	b.n	8001bc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bae:	f3af 8000 	nop.w
 8001bb2:	4601      	mov	r1, r0
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	60ba      	str	r2, [r7, #8]
 8001bba:	b2ca      	uxtb	r2, r1
 8001bbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbf0      	blt.n	8001bae <_read+0x12>
	}

return len;
 8001bcc:	687b      	ldr	r3, [r7, #4]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	e009      	b.n	8001bfc <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	60ba      	str	r2, [r7, #8]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff89 	bl	8001b08 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbf1      	blt.n	8001be8 <_write+0x12>
	}
	return len;
 8001c04:	687b      	ldr	r3, [r7, #4]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_close>:

int _close(int file)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
	return -1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c36:	605a      	str	r2, [r3, #4]
	return 0;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <_isatty>:

int _isatty(int file)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
	return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c78:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c7a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c7c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c80:	480c      	ldr	r0, [pc, #48]	; (8001cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c82:	490d      	ldr	r1, [pc, #52]	; (8001cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c84:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <LoopForever+0xe>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c98:	4c0a      	ldr	r4, [pc, #40]	; (8001cc4 <LoopForever+0x16>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ca6:	f003 fd37 	bl	8005718 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001caa:	f7ff f805 	bl	8000cb8 <main>

08001cae <LoopForever>:

LoopForever:
    b LoopForever
 8001cae:	e7fe      	b.n	8001cae <LoopForever>
  ldr   r0, =_estack
 8001cb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001cbc:	0800a330 	.word	0x0800a330
  ldr r2, =_sbss
 8001cc0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001cc4:	200005b8 	.word	0x200005b8

08001cc8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC_IRQHandler>
	...

08001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4907      	ldr	r1, [pc, #28]	; (8001d04 <__NVIC_EnableIRQ+0x38>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d18:	b672      	cpsid	i
}
 8001d1a:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a6b      	ldr	r2, [pc, #428]	; (8001ed0 <BasicTimer_Config+0x1c8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d106      	bne.n	8001d34 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001d26:	4b6b      	ldr	r3, [pc, #428]	; (8001ed4 <BasicTimer_Config+0x1cc>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a6a      	ldr	r2, [pc, #424]	; (8001ed4 <BasicTimer_Config+0x1cc>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	e030      	b.n	8001d96 <BasicTimer_Config+0x8e>
	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3c:	d106      	bne.n	8001d4c <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001d3e:	4b65      	ldr	r3, [pc, #404]	; (8001ed4 <BasicTimer_Config+0x1cc>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a64      	ldr	r2, [pc, #400]	; (8001ed4 <BasicTimer_Config+0x1cc>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	e024      	b.n	8001d96 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a61      	ldr	r2, [pc, #388]	; (8001ed8 <BasicTimer_Config+0x1d0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d106      	bne.n	8001d64 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001d56:	4b5f      	ldr	r3, [pc, #380]	; (8001ed4 <BasicTimer_Config+0x1cc>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a5e      	ldr	r2, [pc, #376]	; (8001ed4 <BasicTimer_Config+0x1cc>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	e018      	b.n	8001d96 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a5c      	ldr	r2, [pc, #368]	; (8001edc <BasicTimer_Config+0x1d4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d106      	bne.n	8001d7c <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001d6e:	4b59      	ldr	r3, [pc, #356]	; (8001ed4 <BasicTimer_Config+0x1cc>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a58      	ldr	r2, [pc, #352]	; (8001ed4 <BasicTimer_Config+0x1cc>)
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	e00c      	b.n	8001d96 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a57      	ldr	r2, [pc, #348]	; (8001ee0 <BasicTimer_Config+0x1d8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d106      	bne.n	8001d94 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001d86:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <BasicTimer_Config+0x1cc>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a52      	ldr	r2, [pc, #328]	; (8001ed4 <BasicTimer_Config+0x1cc>)
 8001d8c:	f043 0308 	orr.w	r3, r3, #8
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
 8001d92:	e000      	b.n	8001d96 <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8001d94:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001da4:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6892      	ldr	r2, [r2, #8]
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	791b      	ldrb	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d144      	bne.n	8001e42 <BasicTimer_Config+0x13a>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0210 	bic.w	r2, r2, #16
 8001dc6:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2ba0      	cmp	r3, #160	; 0xa0
 8001dd2:	d003      	beq.n	8001ddc <BasicTimer_Config+0xd4>
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dda:	d10b      	bne.n	8001df4 <BasicTimer_Config+0xec>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2264      	movs	r2, #100	; 0x64
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	3a01      	subs	r2, #1
 8001df0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001df2:	e021      	b.n	8001e38 <BasicTimer_Config+0x130>

		}else if ((speed == BTIMER_SPEED_16MHz_100us ) || (speed == BTIMER_SPEED_100MHz_100us)){
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001dfa:	d004      	beq.n	8001e06 <BasicTimer_Config+0xfe>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10c      	bne.n	8001e20 <BasicTimer_Config+0x118>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	3a01      	subs	r2, #1
 8001e1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e1e:	e00b      	b.n	8001e38 <BasicTimer_Config+0x130>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms )){
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001e26:	d107      	bne.n	8001e38 <BasicTimer_Config+0x130>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period    ;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	3a01      	subs	r2, #1
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c

		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	625a      	str	r2, [r3, #36]	; 0x24
 8001e40:	e013      	b.n	8001e6a <BasicTimer_Config+0x162>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0210 	orr.w	r2, r2, #16
 8001e50:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	3a01      	subs	r2, #1
 8001e5c:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	3a01      	subs	r2, #1
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e82:	d103      	bne.n	8001e8c <BasicTimer_Config+0x184>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001e84:	201c      	movs	r0, #28
 8001e86:	f7ff ff21 	bl	8001ccc <__NVIC_EnableIRQ>
 8001e8a:	e01b      	b.n	8001ec4 <BasicTimer_Config+0x1bc>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a11      	ldr	r2, [pc, #68]	; (8001ed8 <BasicTimer_Config+0x1d0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d103      	bne.n	8001e9e <BasicTimer_Config+0x196>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001e96:	201d      	movs	r0, #29
 8001e98:	f7ff ff18 	bl	8001ccc <__NVIC_EnableIRQ>
 8001e9c:	e012      	b.n	8001ec4 <BasicTimer_Config+0x1bc>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <BasicTimer_Config+0x1d4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d103      	bne.n	8001eb0 <BasicTimer_Config+0x1a8>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001ea8:	201e      	movs	r0, #30
 8001eaa:	f7ff ff0f 	bl	8001ccc <__NVIC_EnableIRQ>
 8001eae:	e009      	b.n	8001ec4 <BasicTimer_Config+0x1bc>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <BasicTimer_Config+0x1d8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d103      	bne.n	8001ec2 <BasicTimer_Config+0x1ba>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001eba:	2032      	movs	r0, #50	; 0x32
 8001ebc:	f7ff ff06 	bl	8001ccc <__NVIC_EnableIRQ>
 8001ec0:	e000      	b.n	8001ec4 <BasicTimer_Config+0x1bc>
	}
	else{
		__NOP();
 8001ec2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001ec4:	b662      	cpsie	i
}
 8001ec6:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	40000800 	.word	0x40000800
 8001ee0:	40000c00 	.word	0x40000c00

08001ee4 <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001ee8:	bf00      	nop
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <Capture_TIM2_Ch1_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001ef8:	bf00      	nop
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f08:	bf00      	nop
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f18:	bf00      	nop
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f28:	bf00      	nop
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f38:	bf00      	nop
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f48:	bf00      	nop
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f58:	bf00      	nop
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f68:	bf00      	nop
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f78:	bf00      	nop
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f88:	bf00      	nop
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f98:	bf00      	nop
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001fa8:	bf00      	nop
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001fb8:	bf00      	nop
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001fc8:	bf00      	nop
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001fd8:	bf00      	nop
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8001fe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00a      	beq.n	800200c <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8001ff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 8002006:	f7ff fd51 	bl	8001aac <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 800200a:	e066      	b.n	80020da <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 800200c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d012      	beq.n	8002040 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 800201a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002024:	f023 0302 	bic.w	r3, r3, #2
 8002028:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 800202a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002038:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 800203a:	f7ff ff5b 	bl	8001ef4 <Capture_TIM2_Ch1_Callback>
}
 800203e:	e04c      	b.n	80020da <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8002040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 800204e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002058:	f023 0304 	bic.w	r3, r3, #4
 800205c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 800205e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002068:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800206c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 800206e:	f7ff ff49 	bl	8001f04 <Capture_TIM2_Ch2_Callback>
}
 8002072:	e032      	b.n	80020da <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8002074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d012      	beq.n	80020a8 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 8002082:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800208c:	f023 0308 	bic.w	r3, r3, #8
 8002090:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 8002092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800209c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020a0:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 80020a2:	f7ff ff37 	bl	8001f14 <Capture_TIM2_Ch3_Callback>
}
 80020a6:	e018      	b.n	80020da <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 80020a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d011      	beq.n	80020da <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 80020b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020c0:	f023 0310 	bic.w	r3, r3, #16
 80020c4:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 80020c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020d4:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 80020d6:	f7ff ff25 	bl	8001f24 <Capture_TIM2_Ch4_Callback>
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <TIM3_IRQHandler+0xcc>)
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 80020f0:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <TIM3_IRQHandler+0xcc>)
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	4a2d      	ldr	r2, [pc, #180]	; (80021ac <TIM3_IRQHandler+0xcc>)
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 80020fc:	f7ff fcc4 	bl	8001a88 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 8002100:	e052      	b.n	80021a8 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 8002102:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <TIM3_IRQHandler+0xcc>)
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00e      	beq.n	800212c <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 800210e:	4b27      	ldr	r3, [pc, #156]	; (80021ac <TIM3_IRQHandler+0xcc>)
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	4a26      	ldr	r2, [pc, #152]	; (80021ac <TIM3_IRQHandler+0xcc>)
 8002114:	f023 0302 	bic.w	r3, r3, #2
 8002118:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 800211a:	4b24      	ldr	r3, [pc, #144]	; (80021ac <TIM3_IRQHandler+0xcc>)
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	4a23      	ldr	r2, [pc, #140]	; (80021ac <TIM3_IRQHandler+0xcc>)
 8002120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002124:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 8002126:	f7ff ff05 	bl	8001f34 <Capture_TIM3_Ch1_Callback>
}
 800212a:	e03d      	b.n	80021a8 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 800212c:	4b1f      	ldr	r3, [pc, #124]	; (80021ac <TIM3_IRQHandler+0xcc>)
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00e      	beq.n	8002156 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8002138:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <TIM3_IRQHandler+0xcc>)
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <TIM3_IRQHandler+0xcc>)
 800213e:	f023 0304 	bic.w	r3, r3, #4
 8002142:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <TIM3_IRQHandler+0xcc>)
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	4a18      	ldr	r2, [pc, #96]	; (80021ac <TIM3_IRQHandler+0xcc>)
 800214a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800214e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 8002150:	f7ff fef8 	bl	8001f44 <Capture_TIM3_Ch2_Callback>
}
 8002154:	e028      	b.n	80021a8 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <TIM3_IRQHandler+0xcc>)
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00e      	beq.n	8002180 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <TIM3_IRQHandler+0xcc>)
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	4a11      	ldr	r2, [pc, #68]	; (80021ac <TIM3_IRQHandler+0xcc>)
 8002168:	f023 0308 	bic.w	r3, r3, #8
 800216c:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 800216e:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <TIM3_IRQHandler+0xcc>)
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <TIM3_IRQHandler+0xcc>)
 8002174:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002178:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 800217a:	f7ff feeb 	bl	8001f54 <Capture_TIM3_Ch3_Callback>
}
 800217e:	e013      	b.n	80021a8 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <TIM3_IRQHandler+0xcc>)
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00d      	beq.n	80021a8 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 800218c:	4b07      	ldr	r3, [pc, #28]	; (80021ac <TIM3_IRQHandler+0xcc>)
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	4a06      	ldr	r2, [pc, #24]	; (80021ac <TIM3_IRQHandler+0xcc>)
 8002192:	f023 0310 	bic.w	r3, r3, #16
 8002196:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <TIM3_IRQHandler+0xcc>)
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	4a03      	ldr	r2, [pc, #12]	; (80021ac <TIM3_IRQHandler+0xcc>)
 800219e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021a2:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 80021a4:	f7ff fede 	bl	8001f64 <Capture_TIM3_Ch4_Callback>
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40000400 	.word	0x40000400

080021b0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 80021b4:	4b31      	ldr	r3, [pc, #196]	; (800227c <TIM4_IRQHandler+0xcc>)
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 80021c0:	4b2e      	ldr	r3, [pc, #184]	; (800227c <TIM4_IRQHandler+0xcc>)
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	4a2d      	ldr	r2, [pc, #180]	; (800227c <TIM4_IRQHandler+0xcc>)
 80021c6:	f023 0301 	bic.w	r3, r3, #1
 80021ca:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 80021cc:	f7ff fe8a 	bl	8001ee4 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 80021d0:	e052      	b.n	8002278 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 80021d2:	4b2a      	ldr	r3, [pc, #168]	; (800227c <TIM4_IRQHandler+0xcc>)
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00e      	beq.n	80021fc <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 80021de:	4b27      	ldr	r3, [pc, #156]	; (800227c <TIM4_IRQHandler+0xcc>)
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	4a26      	ldr	r2, [pc, #152]	; (800227c <TIM4_IRQHandler+0xcc>)
 80021e4:	f023 0302 	bic.w	r3, r3, #2
 80021e8:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 80021ea:	4b24      	ldr	r3, [pc, #144]	; (800227c <TIM4_IRQHandler+0xcc>)
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	4a23      	ldr	r2, [pc, #140]	; (800227c <TIM4_IRQHandler+0xcc>)
 80021f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021f4:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 80021f6:	f7ff febd 	bl	8001f74 <Capture_TIM4_Ch1_Callback>
}
 80021fa:	e03d      	b.n	8002278 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 80021fc:	4b1f      	ldr	r3, [pc, #124]	; (800227c <TIM4_IRQHandler+0xcc>)
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00e      	beq.n	8002226 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8002208:	4b1c      	ldr	r3, [pc, #112]	; (800227c <TIM4_IRQHandler+0xcc>)
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	4a1b      	ldr	r2, [pc, #108]	; (800227c <TIM4_IRQHandler+0xcc>)
 800220e:	f023 0304 	bic.w	r3, r3, #4
 8002212:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <TIM4_IRQHandler+0xcc>)
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	4a18      	ldr	r2, [pc, #96]	; (800227c <TIM4_IRQHandler+0xcc>)
 800221a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800221e:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8002220:	f7ff fec8 	bl	8001fb4 <Capture_TIM5_Ch2_Callback>
}
 8002224:	e028      	b.n	8002278 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <TIM4_IRQHandler+0xcc>)
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00e      	beq.n	8002250 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <TIM4_IRQHandler+0xcc>)
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	4a11      	ldr	r2, [pc, #68]	; (800227c <TIM4_IRQHandler+0xcc>)
 8002238:	f023 0308 	bic.w	r3, r3, #8
 800223c:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 800223e:	4b0f      	ldr	r3, [pc, #60]	; (800227c <TIM4_IRQHandler+0xcc>)
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	4a0e      	ldr	r2, [pc, #56]	; (800227c <TIM4_IRQHandler+0xcc>)
 8002244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002248:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 800224a:	f7ff fe9b 	bl	8001f84 <Capture_TIM4_Ch3_Callback>
}
 800224e:	e013      	b.n	8002278 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <TIM4_IRQHandler+0xcc>)
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00d      	beq.n	8002278 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 800225c:	4b07      	ldr	r3, [pc, #28]	; (800227c <TIM4_IRQHandler+0xcc>)
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	4a06      	ldr	r2, [pc, #24]	; (800227c <TIM4_IRQHandler+0xcc>)
 8002262:	f023 0310 	bic.w	r3, r3, #16
 8002266:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <TIM4_IRQHandler+0xcc>)
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	4a03      	ldr	r2, [pc, #12]	; (800227c <TIM4_IRQHandler+0xcc>)
 800226e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002272:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8002274:	f7ff fe8e 	bl	8001f94 <Capture_TIM4_Ch4_Callback>
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40000800 	.word	0x40000800

08002280 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8002284:	4b31      	ldr	r3, [pc, #196]	; (800234c <TIM5_IRQHandler+0xcc>)
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 8002290:	4b2e      	ldr	r3, [pc, #184]	; (800234c <TIM5_IRQHandler+0xcc>)
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	4a2d      	ldr	r2, [pc, #180]	; (800234c <TIM5_IRQHandler+0xcc>)
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 800229c:	f7ff fbdc 	bl	8001a58 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 80022a0:	e052      	b.n	8002348 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 80022a2:	4b2a      	ldr	r3, [pc, #168]	; (800234c <TIM5_IRQHandler+0xcc>)
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00e      	beq.n	80022cc <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 80022ae:	4b27      	ldr	r3, [pc, #156]	; (800234c <TIM5_IRQHandler+0xcc>)
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	4a26      	ldr	r2, [pc, #152]	; (800234c <TIM5_IRQHandler+0xcc>)
 80022b4:	f023 0302 	bic.w	r3, r3, #2
 80022b8:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <TIM5_IRQHandler+0xcc>)
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	4a23      	ldr	r2, [pc, #140]	; (800234c <TIM5_IRQHandler+0xcc>)
 80022c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022c4:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 80022c6:	f7ff fe6d 	bl	8001fa4 <Capture_TIM5_Ch1_Callback>
}
 80022ca:	e03d      	b.n	8002348 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 80022cc:	4b1f      	ldr	r3, [pc, #124]	; (800234c <TIM5_IRQHandler+0xcc>)
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00e      	beq.n	80022f6 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 80022d8:	4b1c      	ldr	r3, [pc, #112]	; (800234c <TIM5_IRQHandler+0xcc>)
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	4a1b      	ldr	r2, [pc, #108]	; (800234c <TIM5_IRQHandler+0xcc>)
 80022de:	f023 0304 	bic.w	r3, r3, #4
 80022e2:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 80022e4:	4b19      	ldr	r3, [pc, #100]	; (800234c <TIM5_IRQHandler+0xcc>)
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	4a18      	ldr	r2, [pc, #96]	; (800234c <TIM5_IRQHandler+0xcc>)
 80022ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022ee:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80022f0:	f7ff fe60 	bl	8001fb4 <Capture_TIM5_Ch2_Callback>
}
 80022f4:	e028      	b.n	8002348 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <TIM5_IRQHandler+0xcc>)
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00e      	beq.n	8002320 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <TIM5_IRQHandler+0xcc>)
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	4a11      	ldr	r2, [pc, #68]	; (800234c <TIM5_IRQHandler+0xcc>)
 8002308:	f023 0308 	bic.w	r3, r3, #8
 800230c:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 800230e:	4b0f      	ldr	r3, [pc, #60]	; (800234c <TIM5_IRQHandler+0xcc>)
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	4a0e      	ldr	r2, [pc, #56]	; (800234c <TIM5_IRQHandler+0xcc>)
 8002314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002318:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 800231a:	f7ff fe53 	bl	8001fc4 <Capture_TIM5_Ch3_Callback>
}
 800231e:	e013      	b.n	8002348 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <TIM5_IRQHandler+0xcc>)
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00d      	beq.n	8002348 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <TIM5_IRQHandler+0xcc>)
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	4a06      	ldr	r2, [pc, #24]	; (800234c <TIM5_IRQHandler+0xcc>)
 8002332:	f023 0310 	bic.w	r3, r3, #16
 8002336:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <TIM5_IRQHandler+0xcc>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	4a03      	ldr	r2, [pc, #12]	; (800234c <TIM5_IRQHandler+0xcc>)
 800233e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002342:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8002344:	f7ff fe46 	bl	8001fd4 <Capture_TIM5_Ch4_Callback>
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40000c00 	.word	0x40000c00

08002350 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0201 	bic.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <__NVIC_EnableIRQ>:
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	db0b      	blt.n	80023c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	4907      	ldr	r1, [pc, #28]	; (80023d0 <__NVIC_EnableIRQ+0x38>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	2001      	movs	r0, #1
 80023ba:	fa00 f202 	lsl.w	r2, r0, r2
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000e100 	.word	0xe000e100

080023d4 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f001 f825 	bl	8003430 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 80023e6:	4b96      	ldr	r3, [pc, #600]	; (8002640 <extInt_Config+0x26c>)
 80023e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	791b      	ldrb	r3, [r3, #4]
 80023f4:	2b0f      	cmp	r3, #15
 80023f6:	f200 85cd 	bhi.w	8002f94 <extInt_Config+0xbc0>
 80023fa:	a201      	add	r2, pc, #4	; (adr r2, 8002400 <extInt_Config+0x2c>)
 80023fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002400:	08002441 	.word	0x08002441
 8002404:	080024f7 	.word	0x080024f7
 8002408:	080025ad 	.word	0x080025ad
 800240c:	08002683 	.word	0x08002683
 8002410:	08002739 	.word	0x08002739
 8002414:	080027e7 	.word	0x080027e7
 8002418:	080028ad 	.word	0x080028ad
 800241c:	08002955 	.word	0x08002955
 8002420:	080029fd 	.word	0x080029fd
 8002424:	08002aa5 	.word	0x08002aa5
 8002428:	08002b6b 	.word	0x08002b6b
 800242c:	08002c13 	.word	0x08002c13
 8002430:	08002cbb 	.word	0x08002cbb
 8002434:	08002d81 	.word	0x08002d81
 8002438:	08002e27 	.word	0x08002e27
 800243c:	08002ecf 	.word	0x08002ecf
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8002440:	4b80      	ldr	r3, [pc, #512]	; (8002644 <extInt_Config+0x270>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4a7f      	ldr	r2, [pc, #508]	; (8002644 <extInt_Config+0x270>)
 8002446:	f023 030f 	bic.w	r3, r3, #15
 800244a:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7d      	ldr	r2, [pc, #500]	; (8002648 <extInt_Config+0x274>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d105      	bne.n	8002464 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8002458:	4b7a      	ldr	r3, [pc, #488]	; (8002644 <extInt_Config+0x270>)
 800245a:	4a7a      	ldr	r2, [pc, #488]	; (8002644 <extInt_Config+0x270>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8002460:	f000 bd9a 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a78      	ldr	r2, [pc, #480]	; (800264c <extInt_Config+0x278>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d107      	bne.n	8002480 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8002470:	4b74      	ldr	r3, [pc, #464]	; (8002644 <extInt_Config+0x270>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a73      	ldr	r2, [pc, #460]	; (8002644 <extInt_Config+0x270>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6093      	str	r3, [r2, #8]
					break;
 800247c:	f000 bd8c 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a72      	ldr	r2, [pc, #456]	; (8002650 <extInt_Config+0x27c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d107      	bne.n	800249c <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 800248c:	4b6d      	ldr	r3, [pc, #436]	; (8002644 <extInt_Config+0x270>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	4a6c      	ldr	r2, [pc, #432]	; (8002644 <extInt_Config+0x270>)
 8002492:	f043 0302 	orr.w	r3, r3, #2
 8002496:	6093      	str	r3, [r2, #8]
					break;
 8002498:	f000 bd7e 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6c      	ldr	r2, [pc, #432]	; (8002654 <extInt_Config+0x280>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d107      	bne.n	80024b8 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 80024a8:	4b66      	ldr	r3, [pc, #408]	; (8002644 <extInt_Config+0x270>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a65      	ldr	r2, [pc, #404]	; (8002644 <extInt_Config+0x270>)
 80024ae:	f043 0303 	orr.w	r3, r3, #3
 80024b2:	6093      	str	r3, [r2, #8]
					break;
 80024b4:	f000 bd70 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a66      	ldr	r2, [pc, #408]	; (8002658 <extInt_Config+0x284>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d107      	bne.n	80024d4 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 80024c4:	4b5f      	ldr	r3, [pc, #380]	; (8002644 <extInt_Config+0x270>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a5e      	ldr	r2, [pc, #376]	; (8002644 <extInt_Config+0x270>)
 80024ca:	f043 0304 	orr.w	r3, r3, #4
 80024ce:	6093      	str	r3, [r2, #8]
					break;
 80024d0:	f000 bd62 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a60      	ldr	r2, [pc, #384]	; (800265c <extInt_Config+0x288>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d107      	bne.n	80024f0 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 80024e0:	4b58      	ldr	r3, [pc, #352]	; (8002644 <extInt_Config+0x270>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a57      	ldr	r2, [pc, #348]	; (8002644 <extInt_Config+0x270>)
 80024e6:	f043 0307 	orr.w	r3, r3, #7
 80024ea:	6093      	str	r3, [r2, #8]
					break;
 80024ec:	f000 bd54 	b.w	8002f98 <extInt_Config+0xbc4>
						__NOP();
 80024f0:	bf00      	nop
					break;
 80024f2:	f000 bd51 	b.w	8002f98 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 80024f6:	4b53      	ldr	r3, [pc, #332]	; (8002644 <extInt_Config+0x270>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	4a52      	ldr	r2, [pc, #328]	; (8002644 <extInt_Config+0x270>)
 80024fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002500:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a4f      	ldr	r2, [pc, #316]	; (8002648 <extInt_Config+0x274>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d105      	bne.n	800251a <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 800250e:	4b4d      	ldr	r3, [pc, #308]	; (8002644 <extInt_Config+0x270>)
 8002510:	4a4c      	ldr	r2, [pc, #304]	; (8002644 <extInt_Config+0x270>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8002516:	f000 bd3f 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a4a      	ldr	r2, [pc, #296]	; (800264c <extInt_Config+0x278>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d107      	bne.n	8002536 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8002526:	4b47      	ldr	r3, [pc, #284]	; (8002644 <extInt_Config+0x270>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	4a46      	ldr	r2, [pc, #280]	; (8002644 <extInt_Config+0x270>)
 800252c:	f043 0310 	orr.w	r3, r3, #16
 8002530:	6093      	str	r3, [r2, #8]
					break;
 8002532:	f000 bd31 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a44      	ldr	r2, [pc, #272]	; (8002650 <extInt_Config+0x27c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d107      	bne.n	8002552 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8002542:	4b40      	ldr	r3, [pc, #256]	; (8002644 <extInt_Config+0x270>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	4a3f      	ldr	r2, [pc, #252]	; (8002644 <extInt_Config+0x270>)
 8002548:	f043 0320 	orr.w	r3, r3, #32
 800254c:	6093      	str	r3, [r2, #8]
					break;
 800254e:	f000 bd23 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a3e      	ldr	r2, [pc, #248]	; (8002654 <extInt_Config+0x280>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d107      	bne.n	800256e <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 800255e:	4b39      	ldr	r3, [pc, #228]	; (8002644 <extInt_Config+0x270>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	4a38      	ldr	r2, [pc, #224]	; (8002644 <extInt_Config+0x270>)
 8002564:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002568:	6093      	str	r3, [r2, #8]
					break;
 800256a:	f000 bd15 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a38      	ldr	r2, [pc, #224]	; (8002658 <extInt_Config+0x284>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d107      	bne.n	800258a <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800257a:	4b32      	ldr	r3, [pc, #200]	; (8002644 <extInt_Config+0x270>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	4a31      	ldr	r2, [pc, #196]	; (8002644 <extInt_Config+0x270>)
 8002580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002584:	6093      	str	r3, [r2, #8]
					break;
 8002586:	f000 bd07 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a32      	ldr	r2, [pc, #200]	; (800265c <extInt_Config+0x288>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d107      	bne.n	80025a6 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8002596:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <extInt_Config+0x270>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	4a2a      	ldr	r2, [pc, #168]	; (8002644 <extInt_Config+0x270>)
 800259c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80025a0:	6093      	str	r3, [r2, #8]
					break;
 80025a2:	f000 bcf9 	b.w	8002f98 <extInt_Config+0xbc4>
						__NOP();
 80025a6:	bf00      	nop
					break;
 80025a8:	f000 bcf6 	b.w	8002f98 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <extInt_Config+0x270>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4a24      	ldr	r2, [pc, #144]	; (8002644 <extInt_Config+0x270>)
 80025b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025b6:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a22      	ldr	r2, [pc, #136]	; (8002648 <extInt_Config+0x274>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d105      	bne.n	80025d0 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <extInt_Config+0x270>)
 80025c6:	4a1f      	ldr	r2, [pc, #124]	; (8002644 <extInt_Config+0x270>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80025cc:	f000 bce4 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1d      	ldr	r2, [pc, #116]	; (800264c <extInt_Config+0x278>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d107      	bne.n	80025ec <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <extInt_Config+0x270>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	4a18      	ldr	r2, [pc, #96]	; (8002644 <extInt_Config+0x270>)
 80025e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e6:	6093      	str	r3, [r2, #8]
					break;
 80025e8:	f000 bcd6 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a17      	ldr	r2, [pc, #92]	; (8002650 <extInt_Config+0x27c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d107      	bne.n	8002608 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <extInt_Config+0x270>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a11      	ldr	r2, [pc, #68]	; (8002644 <extInt_Config+0x270>)
 80025fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002602:	6093      	str	r3, [r2, #8]
					break;
 8002604:	f000 bcc8 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a11      	ldr	r2, [pc, #68]	; (8002654 <extInt_Config+0x280>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d107      	bne.n	8002624 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <extInt_Config+0x270>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <extInt_Config+0x270>)
 800261a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800261e:	6093      	str	r3, [r2, #8]
					break;
 8002620:	f000 bcba 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a0b      	ldr	r2, [pc, #44]	; (8002658 <extInt_Config+0x284>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d117      	bne.n	8002660 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <extInt_Config+0x270>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a03      	ldr	r2, [pc, #12]	; (8002644 <extInt_Config+0x270>)
 8002636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800263a:	6093      	str	r3, [r2, #8]
					break;
 800263c:	f000 bcac 	b.w	8002f98 <extInt_Config+0xbc4>
 8002640:	40023800 	.word	0x40023800
 8002644:	40013800 	.word	0x40013800
 8002648:	40020000 	.word	0x40020000
 800264c:	40020400 	.word	0x40020400
 8002650:	40020800 	.word	0x40020800
 8002654:	40020c00 	.word	0x40020c00
 8002658:	40021000 	.word	0x40021000
 800265c:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a8a      	ldr	r2, [pc, #552]	; (8002890 <extInt_Config+0x4bc>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d107      	bne.n	800267c <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 800266c:	4b89      	ldr	r3, [pc, #548]	; (8002894 <extInt_Config+0x4c0>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	4a88      	ldr	r2, [pc, #544]	; (8002894 <extInt_Config+0x4c0>)
 8002672:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002676:	6093      	str	r3, [r2, #8]
					break;
 8002678:	f000 bc8e 	b.w	8002f98 <extInt_Config+0xbc4>
						__NOP();
 800267c:	bf00      	nop
					break;
 800267e:	f000 bc8b 	b.w	8002f98 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8002682:	4b84      	ldr	r3, [pc, #528]	; (8002894 <extInt_Config+0x4c0>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	4a83      	ldr	r2, [pc, #524]	; (8002894 <extInt_Config+0x4c0>)
 8002688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800268c:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a80      	ldr	r2, [pc, #512]	; (8002898 <extInt_Config+0x4c4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d105      	bne.n	80026a6 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800269a:	4b7e      	ldr	r3, [pc, #504]	; (8002894 <extInt_Config+0x4c0>)
 800269c:	4a7d      	ldr	r2, [pc, #500]	; (8002894 <extInt_Config+0x4c0>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80026a2:	f000 bc79 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a7b      	ldr	r2, [pc, #492]	; (800289c <extInt_Config+0x4c8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d107      	bne.n	80026c2 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 80026b2:	4b78      	ldr	r3, [pc, #480]	; (8002894 <extInt_Config+0x4c0>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	4a77      	ldr	r2, [pc, #476]	; (8002894 <extInt_Config+0x4c0>)
 80026b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026bc:	6093      	str	r3, [r2, #8]
					break;
 80026be:	f000 bc6b 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a75      	ldr	r2, [pc, #468]	; (80028a0 <extInt_Config+0x4cc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d107      	bne.n	80026de <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 80026ce:	4b71      	ldr	r3, [pc, #452]	; (8002894 <extInt_Config+0x4c0>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4a70      	ldr	r2, [pc, #448]	; (8002894 <extInt_Config+0x4c0>)
 80026d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026d8:	6093      	str	r3, [r2, #8]
					break;
 80026da:	f000 bc5d 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a6f      	ldr	r2, [pc, #444]	; (80028a4 <extInt_Config+0x4d0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d107      	bne.n	80026fa <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 80026ea:	4b6a      	ldr	r3, [pc, #424]	; (8002894 <extInt_Config+0x4c0>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4a69      	ldr	r2, [pc, #420]	; (8002894 <extInt_Config+0x4c0>)
 80026f0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80026f4:	6093      	str	r3, [r2, #8]
					break;
 80026f6:	f000 bc4f 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a69      	ldr	r2, [pc, #420]	; (80028a8 <extInt_Config+0x4d4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d107      	bne.n	8002716 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8002706:	4b63      	ldr	r3, [pc, #396]	; (8002894 <extInt_Config+0x4c0>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	4a62      	ldr	r2, [pc, #392]	; (8002894 <extInt_Config+0x4c0>)
 800270c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002710:	6093      	str	r3, [r2, #8]
					break;
 8002712:	f000 bc41 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a5c      	ldr	r2, [pc, #368]	; (8002890 <extInt_Config+0x4bc>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d107      	bne.n	8002732 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8002722:	4b5c      	ldr	r3, [pc, #368]	; (8002894 <extInt_Config+0x4c0>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	4a5b      	ldr	r2, [pc, #364]	; (8002894 <extInt_Config+0x4c0>)
 8002728:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800272c:	6093      	str	r3, [r2, #8]
					break;
 800272e:	f000 bc33 	b.w	8002f98 <extInt_Config+0xbc4>
						__NOP();
 8002732:	bf00      	nop
					break;
 8002734:	f000 bc30 	b.w	8002f98 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8002738:	4b56      	ldr	r3, [pc, #344]	; (8002894 <extInt_Config+0x4c0>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4a55      	ldr	r2, [pc, #340]	; (8002894 <extInt_Config+0x4c0>)
 800273e:	f023 030f 	bic.w	r3, r3, #15
 8002742:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a53      	ldr	r2, [pc, #332]	; (8002898 <extInt_Config+0x4c4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d105      	bne.n	800275c <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8002750:	4b50      	ldr	r3, [pc, #320]	; (8002894 <extInt_Config+0x4c0>)
 8002752:	4a50      	ldr	r2, [pc, #320]	; (8002894 <extInt_Config+0x4c0>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8002758:	f000 bc1e 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a4e      	ldr	r2, [pc, #312]	; (800289c <extInt_Config+0x4c8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d107      	bne.n	8002778 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8002768:	4b4a      	ldr	r3, [pc, #296]	; (8002894 <extInt_Config+0x4c0>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a49      	ldr	r2, [pc, #292]	; (8002894 <extInt_Config+0x4c0>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	60d3      	str	r3, [r2, #12]
					break;
 8002774:	f000 bc10 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a48      	ldr	r2, [pc, #288]	; (80028a0 <extInt_Config+0x4cc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d107      	bne.n	8002794 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8002784:	4b43      	ldr	r3, [pc, #268]	; (8002894 <extInt_Config+0x4c0>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a42      	ldr	r2, [pc, #264]	; (8002894 <extInt_Config+0x4c0>)
 800278a:	f043 0302 	orr.w	r3, r3, #2
 800278e:	60d3      	str	r3, [r2, #12]
					break;
 8002790:	f000 bc02 	b.w	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a42      	ldr	r2, [pc, #264]	; (80028a4 <extInt_Config+0x4d0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d106      	bne.n	80027ae <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 80027a0:	4b3c      	ldr	r3, [pc, #240]	; (8002894 <extInt_Config+0x4c0>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a3b      	ldr	r2, [pc, #236]	; (8002894 <extInt_Config+0x4c0>)
 80027a6:	f043 0303 	orr.w	r3, r3, #3
 80027aa:	60d3      	str	r3, [r2, #12]
					break;
 80027ac:	e3f4      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a3c      	ldr	r2, [pc, #240]	; (80028a8 <extInt_Config+0x4d4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d106      	bne.n	80027c8 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 80027ba:	4b36      	ldr	r3, [pc, #216]	; (8002894 <extInt_Config+0x4c0>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	4a35      	ldr	r2, [pc, #212]	; (8002894 <extInt_Config+0x4c0>)
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	60d3      	str	r3, [r2, #12]
					break;
 80027c6:	e3e7      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a30      	ldr	r2, [pc, #192]	; (8002890 <extInt_Config+0x4bc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d106      	bne.n	80027e2 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 80027d4:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <extInt_Config+0x4c0>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a2e      	ldr	r2, [pc, #184]	; (8002894 <extInt_Config+0x4c0>)
 80027da:	f043 0307 	orr.w	r3, r3, #7
 80027de:	60d3      	str	r3, [r2, #12]
					break;
 80027e0:	e3da      	b.n	8002f98 <extInt_Config+0xbc4>
						__NOP();
 80027e2:	bf00      	nop
					break;
 80027e4:	e3d8      	b.n	8002f98 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 80027e6:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <extInt_Config+0x4c0>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	4a2a      	ldr	r2, [pc, #168]	; (8002894 <extInt_Config+0x4c0>)
 80027ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027f0:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a27      	ldr	r2, [pc, #156]	; (8002898 <extInt_Config+0x4c4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d104      	bne.n	8002808 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 80027fe:	4b25      	ldr	r3, [pc, #148]	; (8002894 <extInt_Config+0x4c0>)
 8002800:	4a24      	ldr	r2, [pc, #144]	; (8002894 <extInt_Config+0x4c0>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8002806:	e3c7      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a23      	ldr	r2, [pc, #140]	; (800289c <extInt_Config+0x4c8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d106      	bne.n	8002822 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8002814:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <extInt_Config+0x4c0>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4a1e      	ldr	r2, [pc, #120]	; (8002894 <extInt_Config+0x4c0>)
 800281a:	f043 0310 	orr.w	r3, r3, #16
 800281e:	60d3      	str	r3, [r2, #12]
					break;
 8002820:	e3ba      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <extInt_Config+0x4cc>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d106      	bne.n	800283c <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 800282e:	4b19      	ldr	r3, [pc, #100]	; (8002894 <extInt_Config+0x4c0>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	4a18      	ldr	r2, [pc, #96]	; (8002894 <extInt_Config+0x4c0>)
 8002834:	f043 0320 	orr.w	r3, r3, #32
 8002838:	60d3      	str	r3, [r2, #12]
					break;
 800283a:	e3ad      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a18      	ldr	r2, [pc, #96]	; (80028a4 <extInt_Config+0x4d0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d106      	bne.n	8002856 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <extInt_Config+0x4c0>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4a11      	ldr	r2, [pc, #68]	; (8002894 <extInt_Config+0x4c0>)
 800284e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002852:	60d3      	str	r3, [r2, #12]
					break;
 8002854:	e3a0      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <extInt_Config+0x4d4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d106      	bne.n	8002870 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8002862:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <extInt_Config+0x4c0>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <extInt_Config+0x4c0>)
 8002868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800286c:	60d3      	str	r3, [r2, #12]
					break;
 800286e:	e393      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a06      	ldr	r2, [pc, #24]	; (8002890 <extInt_Config+0x4bc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d106      	bne.n	800288a <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <extInt_Config+0x4c0>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a04      	ldr	r2, [pc, #16]	; (8002894 <extInt_Config+0x4c0>)
 8002882:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002886:	60d3      	str	r3, [r2, #12]
					break;
 8002888:	e386      	b.n	8002f98 <extInt_Config+0xbc4>
						__NOP();
 800288a:	bf00      	nop
					break;
 800288c:	e384      	b.n	8002f98 <extInt_Config+0xbc4>
 800288e:	bf00      	nop
 8002890:	40021c00 	.word	0x40021c00
 8002894:	40013800 	.word	0x40013800
 8002898:	40020000 	.word	0x40020000
 800289c:	40020400 	.word	0x40020400
 80028a0:	40020800 	.word	0x40020800
 80028a4:	40020c00 	.word	0x40020c00
 80028a8:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 80028ac:	4b86      	ldr	r3, [pc, #536]	; (8002ac8 <extInt_Config+0x6f4>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a85      	ldr	r2, [pc, #532]	; (8002ac8 <extInt_Config+0x6f4>)
 80028b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028b6:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a83      	ldr	r2, [pc, #524]	; (8002acc <extInt_Config+0x6f8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d104      	bne.n	80028ce <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 80028c4:	4b80      	ldr	r3, [pc, #512]	; (8002ac8 <extInt_Config+0x6f4>)
 80028c6:	4a80      	ldr	r2, [pc, #512]	; (8002ac8 <extInt_Config+0x6f4>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80028cc:	e364      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a7e      	ldr	r2, [pc, #504]	; (8002ad0 <extInt_Config+0x6fc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d106      	bne.n	80028e8 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 80028da:	4b7b      	ldr	r3, [pc, #492]	; (8002ac8 <extInt_Config+0x6f4>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	4a7a      	ldr	r2, [pc, #488]	; (8002ac8 <extInt_Config+0x6f4>)
 80028e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e4:	60d3      	str	r3, [r2, #12]
					break;
 80028e6:	e357      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a79      	ldr	r2, [pc, #484]	; (8002ad4 <extInt_Config+0x700>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d106      	bne.n	8002902 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 80028f4:	4b74      	ldr	r3, [pc, #464]	; (8002ac8 <extInt_Config+0x6f4>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a73      	ldr	r2, [pc, #460]	; (8002ac8 <extInt_Config+0x6f4>)
 80028fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028fe:	60d3      	str	r3, [r2, #12]
					break;
 8002900:	e34a      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a73      	ldr	r2, [pc, #460]	; (8002ad8 <extInt_Config+0x704>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d106      	bne.n	800291c <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800290e:	4b6e      	ldr	r3, [pc, #440]	; (8002ac8 <extInt_Config+0x6f4>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	4a6d      	ldr	r2, [pc, #436]	; (8002ac8 <extInt_Config+0x6f4>)
 8002914:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002918:	60d3      	str	r3, [r2, #12]
					break;
 800291a:	e33d      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a6e      	ldr	r2, [pc, #440]	; (8002adc <extInt_Config+0x708>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d106      	bne.n	8002936 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8002928:	4b67      	ldr	r3, [pc, #412]	; (8002ac8 <extInt_Config+0x6f4>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	4a66      	ldr	r2, [pc, #408]	; (8002ac8 <extInt_Config+0x6f4>)
 800292e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002932:	60d3      	str	r3, [r2, #12]
					break;
 8002934:	e330      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a68      	ldr	r2, [pc, #416]	; (8002ae0 <extInt_Config+0x70c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d106      	bne.n	8002950 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8002942:	4b61      	ldr	r3, [pc, #388]	; (8002ac8 <extInt_Config+0x6f4>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	4a60      	ldr	r2, [pc, #384]	; (8002ac8 <extInt_Config+0x6f4>)
 8002948:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800294c:	60d3      	str	r3, [r2, #12]
					break;
 800294e:	e323      	b.n	8002f98 <extInt_Config+0xbc4>
						__NOP();
 8002950:	bf00      	nop
					break;
 8002952:	e321      	b.n	8002f98 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8002954:	4b5c      	ldr	r3, [pc, #368]	; (8002ac8 <extInt_Config+0x6f4>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a5b      	ldr	r2, [pc, #364]	; (8002ac8 <extInt_Config+0x6f4>)
 800295a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800295e:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a59      	ldr	r2, [pc, #356]	; (8002acc <extInt_Config+0x6f8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d104      	bne.n	8002976 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 800296c:	4b56      	ldr	r3, [pc, #344]	; (8002ac8 <extInt_Config+0x6f4>)
 800296e:	4a56      	ldr	r2, [pc, #344]	; (8002ac8 <extInt_Config+0x6f4>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8002974:	e310      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a54      	ldr	r2, [pc, #336]	; (8002ad0 <extInt_Config+0x6fc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d106      	bne.n	8002990 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8002982:	4b51      	ldr	r3, [pc, #324]	; (8002ac8 <extInt_Config+0x6f4>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	4a50      	ldr	r2, [pc, #320]	; (8002ac8 <extInt_Config+0x6f4>)
 8002988:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800298c:	60d3      	str	r3, [r2, #12]
					break;
 800298e:	e303      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a4f      	ldr	r2, [pc, #316]	; (8002ad4 <extInt_Config+0x700>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d106      	bne.n	80029aa <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 800299c:	4b4a      	ldr	r3, [pc, #296]	; (8002ac8 <extInt_Config+0x6f4>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a49      	ldr	r2, [pc, #292]	; (8002ac8 <extInt_Config+0x6f4>)
 80029a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029a6:	60d3      	str	r3, [r2, #12]
					break;
 80029a8:	e2f6      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a49      	ldr	r2, [pc, #292]	; (8002ad8 <extInt_Config+0x704>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d106      	bne.n	80029c4 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 80029b6:	4b44      	ldr	r3, [pc, #272]	; (8002ac8 <extInt_Config+0x6f4>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	4a43      	ldr	r2, [pc, #268]	; (8002ac8 <extInt_Config+0x6f4>)
 80029bc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80029c0:	60d3      	str	r3, [r2, #12]
					break;
 80029c2:	e2e9      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a44      	ldr	r2, [pc, #272]	; (8002adc <extInt_Config+0x708>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d106      	bne.n	80029de <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 80029d0:	4b3d      	ldr	r3, [pc, #244]	; (8002ac8 <extInt_Config+0x6f4>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4a3c      	ldr	r2, [pc, #240]	; (8002ac8 <extInt_Config+0x6f4>)
 80029d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029da:	60d3      	str	r3, [r2, #12]
					break;
 80029dc:	e2dc      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a3e      	ldr	r2, [pc, #248]	; (8002ae0 <extInt_Config+0x70c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d106      	bne.n	80029f8 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <extInt_Config+0x6f4>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	4a36      	ldr	r2, [pc, #216]	; (8002ac8 <extInt_Config+0x6f4>)
 80029f0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80029f4:	60d3      	str	r3, [r2, #12]
					break;
 80029f6:	e2cf      	b.n	8002f98 <extInt_Config+0xbc4>
						__NOP();
 80029f8:	bf00      	nop
					break;
 80029fa:	e2cd      	b.n	8002f98 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 80029fc:	4b32      	ldr	r3, [pc, #200]	; (8002ac8 <extInt_Config+0x6f4>)
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	4a31      	ldr	r2, [pc, #196]	; (8002ac8 <extInt_Config+0x6f4>)
 8002a02:	f023 030f 	bic.w	r3, r3, #15
 8002a06:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a2f      	ldr	r2, [pc, #188]	; (8002acc <extInt_Config+0x6f8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d104      	bne.n	8002a1e <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8002a14:	4b2c      	ldr	r3, [pc, #176]	; (8002ac8 <extInt_Config+0x6f4>)
 8002a16:	4a2c      	ldr	r2, [pc, #176]	; (8002ac8 <extInt_Config+0x6f4>)
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002a1c:	e2bc      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a2a      	ldr	r2, [pc, #168]	; (8002ad0 <extInt_Config+0x6fc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d106      	bne.n	8002a38 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8002a2a:	4b27      	ldr	r3, [pc, #156]	; (8002ac8 <extInt_Config+0x6f4>)
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	4a26      	ldr	r2, [pc, #152]	; (8002ac8 <extInt_Config+0x6f4>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6113      	str	r3, [r2, #16]
					break;
 8002a36:	e2af      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a25      	ldr	r2, [pc, #148]	; (8002ad4 <extInt_Config+0x700>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d106      	bne.n	8002a52 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8002a44:	4b20      	ldr	r3, [pc, #128]	; (8002ac8 <extInt_Config+0x6f4>)
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <extInt_Config+0x6f4>)
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	6113      	str	r3, [r2, #16]
					break;
 8002a50:	e2a2      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <extInt_Config+0x704>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d106      	bne.n	8002a6c <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <extInt_Config+0x6f4>)
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <extInt_Config+0x6f4>)
 8002a64:	f043 0303 	orr.w	r3, r3, #3
 8002a68:	6113      	str	r3, [r2, #16]
					break;
 8002a6a:	e295      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <extInt_Config+0x708>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d106      	bne.n	8002a86 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8002a78:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <extInt_Config+0x6f4>)
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <extInt_Config+0x6f4>)
 8002a7e:	f043 0304 	orr.w	r3, r3, #4
 8002a82:	6113      	str	r3, [r2, #16]
					break;
 8002a84:	e288      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <extInt_Config+0x70c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d106      	bne.n	8002aa0 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <extInt_Config+0x6f4>)
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <extInt_Config+0x6f4>)
 8002a98:	f043 0307 	orr.w	r3, r3, #7
 8002a9c:	6113      	str	r3, [r2, #16]
					break;
 8002a9e:	e27b      	b.n	8002f98 <extInt_Config+0xbc4>
						__NOP();
 8002aa0:	bf00      	nop
					break;
 8002aa2:	e279      	b.n	8002f98 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <extInt_Config+0x6f4>)
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <extInt_Config+0x6f4>)
 8002aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aae:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <extInt_Config+0x6f8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d113      	bne.n	8002ae4 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8002abc:	4b02      	ldr	r3, [pc, #8]	; (8002ac8 <extInt_Config+0x6f4>)
 8002abe:	4a02      	ldr	r2, [pc, #8]	; (8002ac8 <extInt_Config+0x6f4>)
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002ac4:	e268      	b.n	8002f98 <extInt_Config+0xbc4>
 8002ac6:	bf00      	nop
 8002ac8:	40013800 	.word	0x40013800
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	40020400 	.word	0x40020400
 8002ad4:	40020800 	.word	0x40020800
 8002ad8:	40020c00 	.word	0x40020c00
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a83      	ldr	r2, [pc, #524]	; (8002cf8 <extInt_Config+0x924>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d106      	bne.n	8002afe <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8002af0:	4b82      	ldr	r3, [pc, #520]	; (8002cfc <extInt_Config+0x928>)
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	4a81      	ldr	r2, [pc, #516]	; (8002cfc <extInt_Config+0x928>)
 8002af6:	f043 0310 	orr.w	r3, r3, #16
 8002afa:	6113      	str	r3, [r2, #16]
					break;
 8002afc:	e24c      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a7e      	ldr	r2, [pc, #504]	; (8002d00 <extInt_Config+0x92c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d106      	bne.n	8002b18 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8002b0a:	4b7c      	ldr	r3, [pc, #496]	; (8002cfc <extInt_Config+0x928>)
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	4a7b      	ldr	r2, [pc, #492]	; (8002cfc <extInt_Config+0x928>)
 8002b10:	f043 0320 	orr.w	r3, r3, #32
 8002b14:	6113      	str	r3, [r2, #16]
					break;
 8002b16:	e23f      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a79      	ldr	r2, [pc, #484]	; (8002d04 <extInt_Config+0x930>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d106      	bne.n	8002b32 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8002b24:	4b75      	ldr	r3, [pc, #468]	; (8002cfc <extInt_Config+0x928>)
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	4a74      	ldr	r2, [pc, #464]	; (8002cfc <extInt_Config+0x928>)
 8002b2a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002b2e:	6113      	str	r3, [r2, #16]
					break;
 8002b30:	e232      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a73      	ldr	r2, [pc, #460]	; (8002d08 <extInt_Config+0x934>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d106      	bne.n	8002b4c <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8002b3e:	4b6f      	ldr	r3, [pc, #444]	; (8002cfc <extInt_Config+0x928>)
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	4a6e      	ldr	r2, [pc, #440]	; (8002cfc <extInt_Config+0x928>)
 8002b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b48:	6113      	str	r3, [r2, #16]
					break;
 8002b4a:	e225      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a6e      	ldr	r2, [pc, #440]	; (8002d0c <extInt_Config+0x938>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d106      	bne.n	8002b66 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8002b58:	4b68      	ldr	r3, [pc, #416]	; (8002cfc <extInt_Config+0x928>)
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	4a67      	ldr	r2, [pc, #412]	; (8002cfc <extInt_Config+0x928>)
 8002b5e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002b62:	6113      	str	r3, [r2, #16]
					break;
 8002b64:	e218      	b.n	8002f98 <extInt_Config+0xbc4>
						__NOP();
 8002b66:	bf00      	nop
					break;
 8002b68:	e216      	b.n	8002f98 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8002b6a:	4b64      	ldr	r3, [pc, #400]	; (8002cfc <extInt_Config+0x928>)
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	4a63      	ldr	r2, [pc, #396]	; (8002cfc <extInt_Config+0x928>)
 8002b70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b74:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a64      	ldr	r2, [pc, #400]	; (8002d10 <extInt_Config+0x93c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d104      	bne.n	8002b8c <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8002b82:	4b5e      	ldr	r3, [pc, #376]	; (8002cfc <extInt_Config+0x928>)
 8002b84:	4a5d      	ldr	r2, [pc, #372]	; (8002cfc <extInt_Config+0x928>)
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002b8a:	e205      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a59      	ldr	r2, [pc, #356]	; (8002cf8 <extInt_Config+0x924>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d106      	bne.n	8002ba6 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8002b98:	4b58      	ldr	r3, [pc, #352]	; (8002cfc <extInt_Config+0x928>)
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	4a57      	ldr	r2, [pc, #348]	; (8002cfc <extInt_Config+0x928>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba2:	6113      	str	r3, [r2, #16]
					break;
 8002ba4:	e1f8      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a54      	ldr	r2, [pc, #336]	; (8002d00 <extInt_Config+0x92c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d106      	bne.n	8002bc0 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8002bb2:	4b52      	ldr	r3, [pc, #328]	; (8002cfc <extInt_Config+0x928>)
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	4a51      	ldr	r2, [pc, #324]	; (8002cfc <extInt_Config+0x928>)
 8002bb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bbc:	6113      	str	r3, [r2, #16]
					break;
 8002bbe:	e1eb      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a4f      	ldr	r2, [pc, #316]	; (8002d04 <extInt_Config+0x930>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d106      	bne.n	8002bda <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8002bcc:	4b4b      	ldr	r3, [pc, #300]	; (8002cfc <extInt_Config+0x928>)
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	4a4a      	ldr	r2, [pc, #296]	; (8002cfc <extInt_Config+0x928>)
 8002bd2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002bd6:	6113      	str	r3, [r2, #16]
					break;
 8002bd8:	e1de      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a49      	ldr	r2, [pc, #292]	; (8002d08 <extInt_Config+0x934>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d106      	bne.n	8002bf4 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8002be6:	4b45      	ldr	r3, [pc, #276]	; (8002cfc <extInt_Config+0x928>)
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	4a44      	ldr	r2, [pc, #272]	; (8002cfc <extInt_Config+0x928>)
 8002bec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bf0:	6113      	str	r3, [r2, #16]
					break;
 8002bf2:	e1d1      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a44      	ldr	r2, [pc, #272]	; (8002d0c <extInt_Config+0x938>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d106      	bne.n	8002c0e <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8002c00:	4b3e      	ldr	r3, [pc, #248]	; (8002cfc <extInt_Config+0x928>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	4a3d      	ldr	r2, [pc, #244]	; (8002cfc <extInt_Config+0x928>)
 8002c06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c0a:	6113      	str	r3, [r2, #16]
					break;
 8002c0c:	e1c4      	b.n	8002f98 <extInt_Config+0xbc4>
						__NOP();
 8002c0e:	bf00      	nop
					break;
 8002c10:	e1c2      	b.n	8002f98 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8002c12:	4b3a      	ldr	r3, [pc, #232]	; (8002cfc <extInt_Config+0x928>)
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	4a39      	ldr	r2, [pc, #228]	; (8002cfc <extInt_Config+0x928>)
 8002c18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c1c:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a3a      	ldr	r2, [pc, #232]	; (8002d10 <extInt_Config+0x93c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d104      	bne.n	8002c34 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8002c2a:	4b34      	ldr	r3, [pc, #208]	; (8002cfc <extInt_Config+0x928>)
 8002c2c:	4a33      	ldr	r2, [pc, #204]	; (8002cfc <extInt_Config+0x928>)
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002c32:	e1b1      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a2f      	ldr	r2, [pc, #188]	; (8002cf8 <extInt_Config+0x924>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d106      	bne.n	8002c4e <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8002c40:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <extInt_Config+0x928>)
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	4a2d      	ldr	r2, [pc, #180]	; (8002cfc <extInt_Config+0x928>)
 8002c46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c4a:	6113      	str	r3, [r2, #16]
					break;
 8002c4c:	e1a4      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2a      	ldr	r2, [pc, #168]	; (8002d00 <extInt_Config+0x92c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d106      	bne.n	8002c68 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8002c5a:	4b28      	ldr	r3, [pc, #160]	; (8002cfc <extInt_Config+0x928>)
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	4a27      	ldr	r2, [pc, #156]	; (8002cfc <extInt_Config+0x928>)
 8002c60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c64:	6113      	str	r3, [r2, #16]
					break;
 8002c66:	e197      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a25      	ldr	r2, [pc, #148]	; (8002d04 <extInt_Config+0x930>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d106      	bne.n	8002c82 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8002c74:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <extInt_Config+0x928>)
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	4a20      	ldr	r2, [pc, #128]	; (8002cfc <extInt_Config+0x928>)
 8002c7a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002c7e:	6113      	str	r3, [r2, #16]
					break;
 8002c80:	e18a      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1f      	ldr	r2, [pc, #124]	; (8002d08 <extInt_Config+0x934>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d106      	bne.n	8002c9c <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8002c8e:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <extInt_Config+0x928>)
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	4a1a      	ldr	r2, [pc, #104]	; (8002cfc <extInt_Config+0x928>)
 8002c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c98:	6113      	str	r3, [r2, #16]
					break;
 8002c9a:	e17d      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a1a      	ldr	r2, [pc, #104]	; (8002d0c <extInt_Config+0x938>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d106      	bne.n	8002cb6 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8002ca8:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <extInt_Config+0x928>)
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	4a13      	ldr	r2, [pc, #76]	; (8002cfc <extInt_Config+0x928>)
 8002cae:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002cb2:	6113      	str	r3, [r2, #16]
					break;
 8002cb4:	e170      	b.n	8002f98 <extInt_Config+0xbc4>
						__NOP();
 8002cb6:	bf00      	nop
					break;
 8002cb8:	e16e      	b.n	8002f98 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <extInt_Config+0x928>)
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	4a0f      	ldr	r2, [pc, #60]	; (8002cfc <extInt_Config+0x928>)
 8002cc0:	f023 030f 	bic.w	r3, r3, #15
 8002cc4:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a10      	ldr	r2, [pc, #64]	; (8002d10 <extInt_Config+0x93c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d104      	bne.n	8002cdc <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <extInt_Config+0x928>)
 8002cd4:	4a09      	ldr	r2, [pc, #36]	; (8002cfc <extInt_Config+0x928>)
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8002cda:	e15d      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a05      	ldr	r2, [pc, #20]	; (8002cf8 <extInt_Config+0x924>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d115      	bne.n	8002d14 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <extInt_Config+0x928>)
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	4a03      	ldr	r2, [pc, #12]	; (8002cfc <extInt_Config+0x928>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6153      	str	r3, [r2, #20]
					break;
 8002cf4:	e150      	b.n	8002f98 <extInt_Config+0xbc4>
 8002cf6:	bf00      	nop
 8002cf8:	40020400 	.word	0x40020400
 8002cfc:	40013800 	.word	0x40013800
 8002d00:	40020800 	.word	0x40020800
 8002d04:	40020c00 	.word	0x40020c00
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40021c00 	.word	0x40021c00
 8002d10:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a89      	ldr	r2, [pc, #548]	; (8002f40 <extInt_Config+0xb6c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d106      	bne.n	8002d2e <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8002d20:	4b88      	ldr	r3, [pc, #544]	; (8002f44 <extInt_Config+0xb70>)
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	4a87      	ldr	r2, [pc, #540]	; (8002f44 <extInt_Config+0xb70>)
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	6153      	str	r3, [r2, #20]
					break;
 8002d2c:	e134      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a84      	ldr	r2, [pc, #528]	; (8002f48 <extInt_Config+0xb74>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d106      	bne.n	8002d48 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8002d3a:	4b82      	ldr	r3, [pc, #520]	; (8002f44 <extInt_Config+0xb70>)
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	4a81      	ldr	r2, [pc, #516]	; (8002f44 <extInt_Config+0xb70>)
 8002d40:	f043 0303 	orr.w	r3, r3, #3
 8002d44:	6153      	str	r3, [r2, #20]
					break;
 8002d46:	e127      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a7f      	ldr	r2, [pc, #508]	; (8002f4c <extInt_Config+0xb78>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d106      	bne.n	8002d62 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8002d54:	4b7b      	ldr	r3, [pc, #492]	; (8002f44 <extInt_Config+0xb70>)
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	4a7a      	ldr	r2, [pc, #488]	; (8002f44 <extInt_Config+0xb70>)
 8002d5a:	f043 0304 	orr.w	r3, r3, #4
 8002d5e:	6153      	str	r3, [r2, #20]
					break;
 8002d60:	e11a      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a79      	ldr	r2, [pc, #484]	; (8002f50 <extInt_Config+0xb7c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d106      	bne.n	8002d7c <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8002d6e:	4b75      	ldr	r3, [pc, #468]	; (8002f44 <extInt_Config+0xb70>)
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	4a74      	ldr	r2, [pc, #464]	; (8002f44 <extInt_Config+0xb70>)
 8002d74:	f043 0307 	orr.w	r3, r3, #7
 8002d78:	6153      	str	r3, [r2, #20]
					break;
 8002d7a:	e10d      	b.n	8002f98 <extInt_Config+0xbc4>
						__NOP();
 8002d7c:	bf00      	nop
					break;
 8002d7e:	e10b      	b.n	8002f98 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8002d80:	4b70      	ldr	r3, [pc, #448]	; (8002f44 <extInt_Config+0xb70>)
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	4a6f      	ldr	r2, [pc, #444]	; (8002f44 <extInt_Config+0xb70>)
 8002d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d8a:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a70      	ldr	r2, [pc, #448]	; (8002f54 <extInt_Config+0xb80>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d104      	bne.n	8002da2 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8002d98:	4b6a      	ldr	r3, [pc, #424]	; (8002f44 <extInt_Config+0xb70>)
 8002d9a:	4a6a      	ldr	r2, [pc, #424]	; (8002f44 <extInt_Config+0xb70>)
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	6153      	str	r3, [r2, #20]
 8002da0:	e041      	b.n	8002e26 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a6b      	ldr	r2, [pc, #428]	; (8002f58 <extInt_Config+0xb84>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d106      	bne.n	8002dbc <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8002dae:	4b65      	ldr	r3, [pc, #404]	; (8002f44 <extInt_Config+0xb70>)
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	4a64      	ldr	r2, [pc, #400]	; (8002f44 <extInt_Config+0xb70>)
 8002db4:	f043 0310 	orr.w	r3, r3, #16
 8002db8:	6153      	str	r3, [r2, #20]
 8002dba:	e034      	b.n	8002e26 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5f      	ldr	r2, [pc, #380]	; (8002f40 <extInt_Config+0xb6c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d106      	bne.n	8002dd6 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8002dc8:	4b5e      	ldr	r3, [pc, #376]	; (8002f44 <extInt_Config+0xb70>)
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	4a5d      	ldr	r2, [pc, #372]	; (8002f44 <extInt_Config+0xb70>)
 8002dce:	f043 0320 	orr.w	r3, r3, #32
 8002dd2:	6153      	str	r3, [r2, #20]
 8002dd4:	e027      	b.n	8002e26 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a5a      	ldr	r2, [pc, #360]	; (8002f48 <extInt_Config+0xb74>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d106      	bne.n	8002df0 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8002de2:	4b58      	ldr	r3, [pc, #352]	; (8002f44 <extInt_Config+0xb70>)
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	4a57      	ldr	r2, [pc, #348]	; (8002f44 <extInt_Config+0xb70>)
 8002de8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002dec:	6153      	str	r3, [r2, #20]
 8002dee:	e01a      	b.n	8002e26 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a55      	ldr	r2, [pc, #340]	; (8002f4c <extInt_Config+0xb78>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d106      	bne.n	8002e0a <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8002dfc:	4b51      	ldr	r3, [pc, #324]	; (8002f44 <extInt_Config+0xb70>)
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	4a50      	ldr	r2, [pc, #320]	; (8002f44 <extInt_Config+0xb70>)
 8002e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e06:	6153      	str	r3, [r2, #20]
 8002e08:	e00d      	b.n	8002e26 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a4f      	ldr	r2, [pc, #316]	; (8002f50 <extInt_Config+0xb7c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d106      	bne.n	8002e24 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8002e16:	4b4b      	ldr	r3, [pc, #300]	; (8002f44 <extInt_Config+0xb70>)
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	4a4a      	ldr	r2, [pc, #296]	; (8002f44 <extInt_Config+0xb70>)
 8002e1c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002e20:	6153      	str	r3, [r2, #20]
 8002e22:	e000      	b.n	8002e26 <extInt_Config+0xa52>

					} else {
						__NOP();
 8002e24:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8002e26:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <extInt_Config+0xb70>)
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	4a46      	ldr	r2, [pc, #280]	; (8002f44 <extInt_Config+0xb70>)
 8002e2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e30:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a46      	ldr	r2, [pc, #280]	; (8002f54 <extInt_Config+0xb80>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d104      	bne.n	8002e48 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8002e3e:	4b41      	ldr	r3, [pc, #260]	; (8002f44 <extInt_Config+0xb70>)
 8002e40:	4a40      	ldr	r2, [pc, #256]	; (8002f44 <extInt_Config+0xb70>)
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8002e46:	e0a7      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a42      	ldr	r2, [pc, #264]	; (8002f58 <extInt_Config+0xb84>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d106      	bne.n	8002e62 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8002e54:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <extInt_Config+0xb70>)
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	4a3a      	ldr	r2, [pc, #232]	; (8002f44 <extInt_Config+0xb70>)
 8002e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5e:	6153      	str	r3, [r2, #20]
					break;
 8002e60:	e09a      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a35      	ldr	r2, [pc, #212]	; (8002f40 <extInt_Config+0xb6c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d106      	bne.n	8002e7c <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8002e6e:	4b35      	ldr	r3, [pc, #212]	; (8002f44 <extInt_Config+0xb70>)
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	4a34      	ldr	r2, [pc, #208]	; (8002f44 <extInt_Config+0xb70>)
 8002e74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e78:	6153      	str	r3, [r2, #20]
					break;
 8002e7a:	e08d      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a31      	ldr	r2, [pc, #196]	; (8002f48 <extInt_Config+0xb74>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d106      	bne.n	8002e96 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8002e88:	4b2e      	ldr	r3, [pc, #184]	; (8002f44 <extInt_Config+0xb70>)
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	4a2d      	ldr	r2, [pc, #180]	; (8002f44 <extInt_Config+0xb70>)
 8002e8e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002e92:	6153      	str	r3, [r2, #20]
					break;
 8002e94:	e080      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a2b      	ldr	r2, [pc, #172]	; (8002f4c <extInt_Config+0xb78>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d106      	bne.n	8002eb0 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8002ea2:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <extInt_Config+0xb70>)
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <extInt_Config+0xb70>)
 8002ea8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eac:	6153      	str	r3, [r2, #20]
					break;
 8002eae:	e073      	b.n	8002f98 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a26      	ldr	r2, [pc, #152]	; (8002f50 <extInt_Config+0xb7c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d106      	bne.n	8002eca <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8002ebc:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <extInt_Config+0xb70>)
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	4a20      	ldr	r2, [pc, #128]	; (8002f44 <extInt_Config+0xb70>)
 8002ec2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ec6:	6153      	str	r3, [r2, #20]
					break;
 8002ec8:	e066      	b.n	8002f98 <extInt_Config+0xbc4>
						__NOP();
 8002eca:	bf00      	nop
					break;
 8002ecc:	e064      	b.n	8002f98 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8002ece:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <extInt_Config+0xb70>)
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	4a1c      	ldr	r2, [pc, #112]	; (8002f44 <extInt_Config+0xb70>)
 8002ed4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ed8:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1c      	ldr	r2, [pc, #112]	; (8002f54 <extInt_Config+0xb80>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d104      	bne.n	8002ef0 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8002ee6:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <extInt_Config+0xb70>)
 8002ee8:	4a16      	ldr	r2, [pc, #88]	; (8002f44 <extInt_Config+0xb70>)
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 8002eee:	e053      	b.n	8002f98 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <extInt_Config+0xb84>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d106      	bne.n	8002f0a <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8002efc:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <extInt_Config+0xb70>)
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	4a10      	ldr	r2, [pc, #64]	; (8002f44 <extInt_Config+0xb70>)
 8002f02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f06:	6153      	str	r3, [r2, #20]
						break;
 8002f08:	e046      	b.n	8002f98 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0b      	ldr	r2, [pc, #44]	; (8002f40 <extInt_Config+0xb6c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d106      	bne.n	8002f24 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <extInt_Config+0xb70>)
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <extInt_Config+0xb70>)
 8002f1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f20:	6153      	str	r3, [r2, #20]
						break;
 8002f22:	e039      	b.n	8002f98 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a07      	ldr	r2, [pc, #28]	; (8002f48 <extInt_Config+0xb74>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d115      	bne.n	8002f5c <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <extInt_Config+0xb70>)
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	4a03      	ldr	r2, [pc, #12]	; (8002f44 <extInt_Config+0xb70>)
 8002f36:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002f3a:	6153      	str	r3, [r2, #20]
						break;
 8002f3c:	e02c      	b.n	8002f98 <extInt_Config+0xbc4>
 8002f3e:	bf00      	nop
 8002f40:	40020800 	.word	0x40020800
 8002f44:	40013800 	.word	0x40013800
 8002f48:	40020c00 	.word	0x40020c00
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40021c00 	.word	0x40021c00
 8002f54:	40020000 	.word	0x40020000
 8002f58:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a6c      	ldr	r2, [pc, #432]	; (8003114 <extInt_Config+0xd40>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d106      	bne.n	8002f76 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8002f68:	4b6b      	ldr	r3, [pc, #428]	; (8003118 <extInt_Config+0xd44>)
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	4a6a      	ldr	r2, [pc, #424]	; (8003118 <extInt_Config+0xd44>)
 8002f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f72:	6153      	str	r3, [r2, #20]
						break;
 8002f74:	e010      	b.n	8002f98 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a67      	ldr	r2, [pc, #412]	; (800311c <extInt_Config+0xd48>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d106      	bne.n	8002f90 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8002f82:	4b65      	ldr	r3, [pc, #404]	; (8003118 <extInt_Config+0xd44>)
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	4a64      	ldr	r2, [pc, #400]	; (8003118 <extInt_Config+0xd44>)
 8002f88:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002f8c:	6153      	str	r3, [r2, #20]
						break;
 8002f8e:	e003      	b.n	8002f98 <extInt_Config+0xbc4>
							__NOP();
 8002f90:	bf00      	nop
						break;
 8002f92:	e001      	b.n	8002f98 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8002f94:	bf00      	nop
						break;
 8002f96:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	791b      	ldrb	r3, [r3, #4]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d020      	beq.n	8002fe2 <extInt_Config+0xc0e>
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	dc37      	bgt.n	8003014 <extInt_Config+0xc40>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <extInt_Config+0xbda>
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d00d      	beq.n	8002fc8 <extInt_Config+0xbf4>
 8002fac:	e032      	b.n	8003014 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002fae:	4b5c      	ldr	r3, [pc, #368]	; (8003120 <extInt_Config+0xd4c>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	7912      	ldrb	r2, [r2, #4]
 8002fb8:	4611      	mov	r1, r2
 8002fba:	2201      	movs	r2, #1
 8002fbc:	408a      	lsls	r2, r1
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4a57      	ldr	r2, [pc, #348]	; (8003120 <extInt_Config+0xd4c>)
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	60d3      	str	r3, [r2, #12]

		break;
 8002fc6:	e027      	b.n	8003018 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002fc8:	4b55      	ldr	r3, [pc, #340]	; (8003120 <extInt_Config+0xd4c>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	7912      	ldrb	r2, [r2, #4]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	408a      	lsls	r2, r1
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4a51      	ldr	r2, [pc, #324]	; (8003120 <extInt_Config+0xd4c>)
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	6093      	str	r3, [r2, #8]

		break;
 8002fe0:	e01a      	b.n	8003018 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002fe2:	4b4f      	ldr	r3, [pc, #316]	; (8003120 <extInt_Config+0xd4c>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	7912      	ldrb	r2, [r2, #4]
 8002fec:	4611      	mov	r1, r2
 8002fee:	2201      	movs	r2, #1
 8002ff0:	408a      	lsls	r2, r1
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4a4a      	ldr	r2, [pc, #296]	; (8003120 <extInt_Config+0xd4c>)
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002ffa:	4b49      	ldr	r3, [pc, #292]	; (8003120 <extInt_Config+0xd4c>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	7912      	ldrb	r2, [r2, #4]
 8003004:	4611      	mov	r1, r2
 8003006:	2201      	movs	r2, #1
 8003008:	408a      	lsls	r2, r1
 800300a:	4611      	mov	r1, r2
 800300c:	4a44      	ldr	r2, [pc, #272]	; (8003120 <extInt_Config+0xd4c>)
 800300e:	430b      	orrs	r3, r1
 8003010:	6093      	str	r3, [r2, #8]

		break;
 8003012:	e001      	b.n	8003018 <extInt_Config+0xc44>

	}default :{

		__NOP();
 8003014:	bf00      	nop
		break;
 8003016:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8003018:	b672      	cpsid	i
}
 800301a:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800301c:	4b40      	ldr	r3, [pc, #256]	; (8003120 <extInt_Config+0xd4c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	7912      	ldrb	r2, [r2, #4]
 8003026:	4611      	mov	r1, r2
 8003028:	2201      	movs	r2, #1
 800302a:	408a      	lsls	r2, r1
 800302c:	4611      	mov	r1, r2
 800302e:	4a3c      	ldr	r2, [pc, #240]	; (8003120 <extInt_Config+0xd4c>)
 8003030:	430b      	orrs	r3, r1
 8003032:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	791b      	ldrb	r3, [r3, #4]
 800303a:	2b0f      	cmp	r3, #15
 800303c:	d862      	bhi.n	8003104 <extInt_Config+0xd30>
 800303e:	a201      	add	r2, pc, #4	; (adr r2, 8003044 <extInt_Config+0xc70>)
 8003040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003044:	08003085 	.word	0x08003085
 8003048:	0800308d 	.word	0x0800308d
 800304c:	08003095 	.word	0x08003095
 8003050:	0800309d 	.word	0x0800309d
 8003054:	080030a5 	.word	0x080030a5
 8003058:	080030ad 	.word	0x080030ad
 800305c:	080030b5 	.word	0x080030b5
 8003060:	080030bd 	.word	0x080030bd
 8003064:	080030c5 	.word	0x080030c5
 8003068:	080030cd 	.word	0x080030cd
 800306c:	080030d5 	.word	0x080030d5
 8003070:	080030dd 	.word	0x080030dd
 8003074:	080030e5 	.word	0x080030e5
 8003078:	080030ed 	.word	0x080030ed
 800307c:	080030f5 	.word	0x080030f5
 8003080:	080030fd 	.word	0x080030fd
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8003084:	2006      	movs	r0, #6
 8003086:	f7ff f987 	bl	8002398 <__NVIC_EnableIRQ>
			break;
 800308a:	e03d      	b.n	8003108 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 800308c:	2007      	movs	r0, #7
 800308e:	f7ff f983 	bl	8002398 <__NVIC_EnableIRQ>
			break;
 8003092:	e039      	b.n	8003108 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8003094:	2008      	movs	r0, #8
 8003096:	f7ff f97f 	bl	8002398 <__NVIC_EnableIRQ>
			break;
 800309a:	e035      	b.n	8003108 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 800309c:	2009      	movs	r0, #9
 800309e:	f7ff f97b 	bl	8002398 <__NVIC_EnableIRQ>
			break;
 80030a2:	e031      	b.n	8003108 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 80030a4:	200a      	movs	r0, #10
 80030a6:	f7ff f977 	bl	8002398 <__NVIC_EnableIRQ>
			break;
 80030aa:	e02d      	b.n	8003108 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030ac:	2017      	movs	r0, #23
 80030ae:	f7ff f973 	bl	8002398 <__NVIC_EnableIRQ>
			break;
 80030b2:	e029      	b.n	8003108 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030b4:	2017      	movs	r0, #23
 80030b6:	f7ff f96f 	bl	8002398 <__NVIC_EnableIRQ>
			break;
 80030ba:	e025      	b.n	8003108 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030bc:	2017      	movs	r0, #23
 80030be:	f7ff f96b 	bl	8002398 <__NVIC_EnableIRQ>
			break;
 80030c2:	e021      	b.n	8003108 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030c4:	2017      	movs	r0, #23
 80030c6:	f7ff f967 	bl	8002398 <__NVIC_EnableIRQ>
			break;
 80030ca:	e01d      	b.n	8003108 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030cc:	2017      	movs	r0, #23
 80030ce:	f7ff f963 	bl	8002398 <__NVIC_EnableIRQ>
			break;
 80030d2:	e019      	b.n	8003108 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030d4:	2028      	movs	r0, #40	; 0x28
 80030d6:	f7ff f95f 	bl	8002398 <__NVIC_EnableIRQ>
			break;
 80030da:	e015      	b.n	8003108 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030dc:	2028      	movs	r0, #40	; 0x28
 80030de:	f7ff f95b 	bl	8002398 <__NVIC_EnableIRQ>
			break;
 80030e2:	e011      	b.n	8003108 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030e4:	2028      	movs	r0, #40	; 0x28
 80030e6:	f7ff f957 	bl	8002398 <__NVIC_EnableIRQ>
			break;
 80030ea:	e00d      	b.n	8003108 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030ec:	2028      	movs	r0, #40	; 0x28
 80030ee:	f7ff f953 	bl	8002398 <__NVIC_EnableIRQ>
			break;
 80030f2:	e009      	b.n	8003108 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030f4:	2028      	movs	r0, #40	; 0x28
 80030f6:	f7ff f94f 	bl	8002398 <__NVIC_EnableIRQ>
			break;
 80030fa:	e005      	b.n	8003108 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030fc:	2028      	movs	r0, #40	; 0x28
 80030fe:	f7ff f94b 	bl	8002398 <__NVIC_EnableIRQ>
			break;
 8003102:	e001      	b.n	8003108 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 8003104:	bf00      	nop
			break;
 8003106:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003108:	b662      	cpsie	i
}
 800310a:	bf00      	nop
	}

	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 800310c:	bf00      	nop
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	40013800 	.word	0x40013800
 800311c:	40021c00 	.word	0x40021c00
 8003120:	40013c00 	.word	0x40013c00

08003124 <callback_extInt0>:

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
	__NOP();
 8003128:	bf00      	nop
}
 800312a:	bf00      	nop
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
	__NOP();
 8003138:	bf00      	nop
}
 800313a:	bf00      	nop
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
	__NOP();
 8003148:	bf00      	nop
}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
	__NOP();
 8003158:	bf00      	nop
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
	__NOP();
 8003168:	bf00      	nop
}
 800316a:	bf00      	nop
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
	__NOP();
 8003178:	bf00      	nop
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
	__NOP();
 8003188:	bf00      	nop
}
 800318a:	bf00      	nop
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
	__NOP();
 8003198:	bf00      	nop
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
	__NOP();
 80031a8:	bf00      	nop
}
 80031aa:	bf00      	nop
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
	__NOP();
 80031b8:	bf00      	nop
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
	__NOP();
 80031c8:	bf00      	nop
}
 80031ca:	bf00      	nop
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
	__NOP();
 80031d8:	bf00      	nop
}
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
	__NOP();
 80031e8:	bf00      	nop
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
	__NOP();
 80031f8:	bf00      	nop
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8003208:	4b07      	ldr	r3, [pc, #28]	; (8003228 <EXTI0_IRQHandler+0x24>)
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d007      	beq.n	8003224 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8003214:	4b04      	ldr	r3, [pc, #16]	; (8003228 <EXTI0_IRQHandler+0x24>)
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	4a03      	ldr	r2, [pc, #12]	; (8003228 <EXTI0_IRQHandler+0x24>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8003220:	f7ff ff80 	bl	8003124 <callback_extInt0>
	}
}
 8003224:	bf00      	nop
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40013c00 	.word	0x40013c00

0800322c <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8003230:	4b07      	ldr	r3, [pc, #28]	; (8003250 <EXTI1_IRQHandler+0x24>)
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <EXTI1_IRQHandler+0x24>)
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	4a03      	ldr	r2, [pc, #12]	; (8003250 <EXTI1_IRQHandler+0x24>)
 8003242:	f043 0302 	orr.w	r3, r3, #2
 8003246:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 8003248:	f7fe fc3c 	bl	8001ac4 <callback_extInt1>
	}
}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40013c00 	.word	0x40013c00

08003254 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 8003258:	4b07      	ldr	r3, [pc, #28]	; (8003278 <EXTI2_IRQHandler+0x24>)
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <EXTI2_IRQHandler+0x24>)
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	4a03      	ldr	r2, [pc, #12]	; (8003278 <EXTI2_IRQHandler+0x24>)
 800326a:	f043 0304 	orr.w	r3, r3, #4
 800326e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8003270:	f7ff ff60 	bl	8003134 <callback_extInt2>
	}
}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40013c00 	.word	0x40013c00

0800327c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8003280:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <EXTI3_IRQHandler+0x24>)
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <EXTI3_IRQHandler+0x24>)
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	4a03      	ldr	r2, [pc, #12]	; (80032a0 <EXTI3_IRQHandler+0x24>)
 8003292:	f043 0308 	orr.w	r3, r3, #8
 8003296:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8003298:	f7fe fc24 	bl	8001ae4 <callback_extInt3>
	}
}
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40013c00 	.word	0x40013c00

080032a4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <EXTI4_IRQHandler+0x24>)
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 80032b4:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <EXTI4_IRQHandler+0x24>)
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	4a03      	ldr	r2, [pc, #12]	; (80032c8 <EXTI4_IRQHandler+0x24>)
 80032ba:	f043 0310 	orr.w	r3, r3, #16
 80032be:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 80032c0:	f7ff ff40 	bl	8003144 <callback_extInt4>
	}
}
 80032c4:	bf00      	nop
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40013c00 	.word	0x40013c00

080032cc <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 80032d0:	4b26      	ldr	r3, [pc, #152]	; (800336c <EXTI9_5_IRQHandler+0xa0>)
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 80032dc:	4b23      	ldr	r3, [pc, #140]	; (800336c <EXTI9_5_IRQHandler+0xa0>)
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	4a22      	ldr	r2, [pc, #136]	; (800336c <EXTI9_5_IRQHandler+0xa0>)
 80032e2:	f043 0320 	orr.w	r3, r3, #32
 80032e6:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 80032e8:	f7ff ff34 	bl	8003154 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 80032ec:	e03c      	b.n	8003368 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 80032ee:	4b1f      	ldr	r3, [pc, #124]	; (800336c <EXTI9_5_IRQHandler+0xa0>)
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 80032fa:	4b1c      	ldr	r3, [pc, #112]	; (800336c <EXTI9_5_IRQHandler+0xa0>)
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	4a1b      	ldr	r2, [pc, #108]	; (800336c <EXTI9_5_IRQHandler+0xa0>)
 8003300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003304:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 8003306:	f7ff ff2d 	bl	8003164 <callback_extInt6>
}
 800330a:	e02d      	b.n	8003368 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <EXTI9_5_IRQHandler+0xa0>)
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8003318:	4b14      	ldr	r3, [pc, #80]	; (800336c <EXTI9_5_IRQHandler+0xa0>)
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	4a13      	ldr	r2, [pc, #76]	; (800336c <EXTI9_5_IRQHandler+0xa0>)
 800331e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003322:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8003324:	f7ff ff26 	bl	8003174 <callback_extInt7>
}
 8003328:	e01e      	b.n	8003368 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 800332a:	4b10      	ldr	r3, [pc, #64]	; (800336c <EXTI9_5_IRQHandler+0xa0>)
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <EXTI9_5_IRQHandler+0xa0>)
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4a0c      	ldr	r2, [pc, #48]	; (800336c <EXTI9_5_IRQHandler+0xa0>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003340:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 8003342:	f7ff ff1f 	bl	8003184 <callback_extInt8>
}
 8003346:	e00f      	b.n	8003368 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <EXTI9_5_IRQHandler+0xa0>)
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <EXTI9_5_IRQHandler+0xa0>)
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	4a04      	ldr	r2, [pc, #16]	; (800336c <EXTI9_5_IRQHandler+0xa0>)
 800335a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800335e:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8003360:	f7ff ff18 	bl	8003194 <callback_extInt9>
}
 8003364:	e000      	b.n	8003368 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8003366:	bf00      	nop
}
 8003368:	bf00      	nop
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40013c00 	.word	0x40013c00

08003370 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8003374:	4b2d      	ldr	r3, [pc, #180]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8003380:	4b2a      	ldr	r3, [pc, #168]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	4a29      	ldr	r2, [pc, #164]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 8003386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800338a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 800338c:	f7ff ff0a 	bl	80031a4 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 8003390:	e049      	b.n	8003426 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 8003392:	4b26      	ldr	r3, [pc, #152]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800339a:	2b00      	cmp	r3, #0
 800339c:	d008      	beq.n	80033b0 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 800339e:	4b23      	ldr	r3, [pc, #140]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	4a22      	ldr	r2, [pc, #136]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 80033a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033a8:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 80033aa:	f7ff ff03 	bl	80031b4 <callback_extInt11>
}
 80033ae:	e03a      	b.n	8003426 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 80033b0:	4b1e      	ldr	r3, [pc, #120]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	4a1a      	ldr	r2, [pc, #104]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 80033c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033c6:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 80033c8:	f7ff fefc 	bl	80031c4 <callback_extInt12>
}
 80033cc:	e02b      	b.n	8003426 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 80033ce:	4b17      	ldr	r3, [pc, #92]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 80033da:	4b14      	ldr	r3, [pc, #80]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	4a13      	ldr	r2, [pc, #76]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 80033e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033e4:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 80033e6:	f7ff fef5 	bl	80031d4 <callback_extInt13>
}
 80033ea:	e01c      	b.n	8003426 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	4a0b      	ldr	r2, [pc, #44]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 80033fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003402:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8003404:	f7ff feee 	bl	80031e4 <callback_extInt14>
}
 8003408:	e00d      	b.n	8003426 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 800340a:	4b08      	ldr	r3, [pc, #32]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	4a04      	ldr	r2, [pc, #16]	; (800342c <EXTI15_10_IRQHandler+0xbc>)
 800341c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003420:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 8003422:	f7ff fee7 	bl	80031f4 <callback_extInt15>
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40013c00 	.word	0x40013c00

08003430 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a88      	ldr	r2, [pc, #544]	; (8003668 <GPIO_Config+0x238>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d106      	bne.n	8003458 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 800344a:	4b88      	ldr	r3, [pc, #544]	; (800366c <GPIO_Config+0x23c>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a87      	ldr	r2, [pc, #540]	; (800366c <GPIO_Config+0x23c>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	e03a      	b.n	80034ce <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a84      	ldr	r2, [pc, #528]	; (8003670 <GPIO_Config+0x240>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d106      	bne.n	8003470 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8003462:	4b82      	ldr	r3, [pc, #520]	; (800366c <GPIO_Config+0x23c>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4a81      	ldr	r2, [pc, #516]	; (800366c <GPIO_Config+0x23c>)
 8003468:	f043 0302 	orr.w	r3, r3, #2
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	e02e      	b.n	80034ce <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a7f      	ldr	r2, [pc, #508]	; (8003674 <GPIO_Config+0x244>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d106      	bne.n	8003488 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 800347a:	4b7c      	ldr	r3, [pc, #496]	; (800366c <GPIO_Config+0x23c>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4a7b      	ldr	r2, [pc, #492]	; (800366c <GPIO_Config+0x23c>)
 8003480:	f043 0304 	orr.w	r3, r3, #4
 8003484:	6313      	str	r3, [r2, #48]	; 0x30
 8003486:	e022      	b.n	80034ce <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a7a      	ldr	r2, [pc, #488]	; (8003678 <GPIO_Config+0x248>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d106      	bne.n	80034a0 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8003492:	4b76      	ldr	r3, [pc, #472]	; (800366c <GPIO_Config+0x23c>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a75      	ldr	r2, [pc, #468]	; (800366c <GPIO_Config+0x23c>)
 8003498:	f043 0308 	orr.w	r3, r3, #8
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	e016      	b.n	80034ce <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a75      	ldr	r2, [pc, #468]	; (800367c <GPIO_Config+0x24c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d106      	bne.n	80034b8 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 80034aa:	4b70      	ldr	r3, [pc, #448]	; (800366c <GPIO_Config+0x23c>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a6f      	ldr	r2, [pc, #444]	; (800366c <GPIO_Config+0x23c>)
 80034b0:	f043 0310 	orr.w	r3, r3, #16
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	e00a      	b.n	80034ce <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a70      	ldr	r2, [pc, #448]	; (8003680 <GPIO_Config+0x250>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d105      	bne.n	80034ce <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 80034c2:	4b6a      	ldr	r3, [pc, #424]	; (800366c <GPIO_Config+0x23c>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a69      	ldr	r2, [pc, #420]	; (800366c <GPIO_Config+0x23c>)
 80034c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	795b      	ldrb	r3, [r3, #5]
 80034d2:	461a      	mov	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	791b      	ldrb	r3, [r3, #4]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	791b      	ldrb	r3, [r3, #4]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	2103      	movs	r1, #3
 80034ee:	fa01 f303 	lsl.w	r3, r1, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	4619      	mov	r1, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	400a      	ands	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6819      	ldr	r1, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	430a      	orrs	r2, r1
 800350c:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	7a1b      	ldrb	r3, [r3, #8]
 8003512:	461a      	mov	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	791b      	ldrb	r3, [r3, #4]
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	791b      	ldrb	r3, [r3, #4]
 8003528:	4619      	mov	r1, r3
 800352a:	2301      	movs	r3, #1
 800352c:	408b      	lsls	r3, r1
 800352e:	43db      	mvns	r3, r3
 8003530:	4619      	mov	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	400a      	ands	r2, r1
 8003538:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	430a      	orrs	r2, r1
 8003548:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	799b      	ldrb	r3, [r3, #6]
 800354e:	461a      	mov	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	791b      	ldrb	r3, [r3, #4]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	791b      	ldrb	r3, [r3, #4]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	2103      	movs	r1, #3
 800356a:	fa01 f303 	lsl.w	r3, r1, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	4619      	mov	r1, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	400a      	ands	r2, r1
 8003578:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6899      	ldr	r1, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	430a      	orrs	r2, r1
 8003588:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	79db      	ldrb	r3, [r3, #7]
 800358e:	461a      	mov	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	791b      	ldrb	r3, [r3, #4]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	791b      	ldrb	r3, [r3, #4]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	2103      	movs	r1, #3
 80035aa:	fa01 f303 	lsl.w	r3, r1, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	4619      	mov	r1, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	400a      	ands	r2, r1
 80035b8:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68d9      	ldr	r1, [r3, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	795b      	ldrb	r3, [r3, #5]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d143      	bne.n	800365a <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	791b      	ldrb	r3, [r3, #4]
 80035d6:	2b07      	cmp	r3, #7
 80035d8:	d81f      	bhi.n	800361a <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	791b      	ldrb	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6a1a      	ldr	r2, [r3, #32]
 80035e8:	210f      	movs	r1, #15
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	4619      	mov	r1, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	400a      	ands	r2, r1
 80035fa:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6a1a      	ldr	r2, [r3, #32]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	7a5b      	ldrb	r3, [r3, #9]
 8003606:	4619      	mov	r1, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	fa01 f303 	lsl.w	r3, r1, r3
 800360e:	4619      	mov	r1, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 8003618:	e01f      	b.n	800365a <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	791b      	ldrb	r3, [r3, #4]
 800361e:	3b08      	subs	r3, #8
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800362a:	210f      	movs	r1, #15
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	4619      	mov	r1, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	400a      	ands	r2, r1
 800363c:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7a5b      	ldrb	r3, [r3, #9]
 8003648:	4619      	mov	r1, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	fa01 f303 	lsl.w	r3, r1, r3
 8003650:	4619      	mov	r1, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40020000 	.word	0x40020000
 800366c:	40023800 	.word	0x40023800
 8003670:	40020400 	.word	0x40020400
 8003674:	40020800 	.word	0x40020800
 8003678:	40020c00 	.word	0x40020c00
 800367c:	40021000 	.word	0x40021000
 8003680:	40021c00 	.word	0x40021c00

08003684 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d10d      	bne.n	80036b2 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699a      	ldr	r2, [r3, #24]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	791b      	ldrb	r3, [r3, #4]
 80036a0:	4619      	mov	r1, r3
 80036a2:	2301      	movs	r3, #1
 80036a4:	408b      	lsls	r3, r1
 80036a6:	4619      	mov	r1, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 80036b0:	e00d      	b.n	80036ce <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699a      	ldr	r2, [r3, #24]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	791b      	ldrb	r3, [r3, #4]
 80036bc:	3310      	adds	r3, #16
 80036be:	2101      	movs	r1, #1
 80036c0:	fa01 f303 	lsl.w	r3, r1, r3
 80036c4:	4619      	mov	r1, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	619a      	str	r2, [r3, #24]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	460b      	mov	r3, r1
 80036e4:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10d      	bne.n	8003708 <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	791b      	ldrb	r3, [r3, #4]
 80036f6:	4619      	mov	r1, r3
 80036f8:	2301      	movs	r3, #1
 80036fa:	408b      	lsls	r3, r1
 80036fc:	4619      	mov	r1, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 8003706:	e00d      	b.n	8003724 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	791b      	ldrb	r3, [r3, #4]
 8003712:	3310      	adds	r3, #16
 8003714:	2101      	movs	r1, #1
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	4619      	mov	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	619a      	str	r2, [r3, #24]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	791b      	ldrb	r3, [r3, #4]
 8003740:	461a      	mov	r2, r3
 8003742:	2301      	movs	r3, #1
 8003744:	4093      	lsls	r3, r2
 8003746:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8003750:	897b      	ldrh	r3, [r7, #10]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4013      	ands	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	791b      	ldrb	r3, [r3, #4]
 800375c:	461a      	mov	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	40d3      	lsrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8003764:	68fb      	ldr	r3, [r7, #12]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
		uint8_t state = GPIO_ReadPin (pPinState);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ffd8 	bl	8003730 <GPIO_ReadPin>
 8003780:	4603      	mov	r3, r0
 8003782:	73fb      	strb	r3, [r7, #15]
		if (state== SET){
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d104      	bne.n	8003794 <GPIOxTooglePin+0x22>
			GPIO_WritePin(pPinState, RESET);
 800378a:	2100      	movs	r1, #0
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff ff79 	bl	8003684 <GPIO_WritePin>
		else{
			GPIO_WritePin(pPinState, SET);
		}


}
 8003792:	e003      	b.n	800379c <GPIOxTooglePin+0x2a>
			GPIO_WritePin(pPinState, SET);
 8003794:	2101      	movs	r1, #1
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff ff74 	bl	8003684 <GPIO_WritePin>
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <configMPUAccel>:
#include "MPUAccel.h"
#include "I2CDriver.h"
#include "GPIOxDriver.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandler);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fe39 	bl	8003430 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 fd7c 	bl	80052c0 <i2c_config>


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 80037c8:	216b      	movs	r1, #107	; 0x6b
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f8f1 	bl	80039b2 <readData>
 80037d0:	4603      	mov	r3, r0
 80037d2:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, ~(0b1 << 7) & (byte));
 80037d4:	7bbb      	ldrb	r3, [r7, #14]
 80037d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	216b      	movs	r1, #107	; 0x6b
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f89b 	bl	800391c <writeData>
	// verificamos que el MPU se comunica con exito
	while(!rdy){
 80037e6:	e004      	b.n	80037f2 <configMPUAccel+0x4e>

		rdy = WHOIAM(ptrMPUAccel);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f937 	bl	8003a5c <WHOIAM>
 80037ee:	4603      	mov	r3, r0
 80037f0:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f7      	beq.n	80037e8 <configMPUAccel+0x44>



	// Paso 3 Inicializamos correctamente el acelerometro usando la comunicacion con este y sus registros,
	// Reseteamos el MPU en el registro 0x6B Reseteando el bit 7, es decir 0b1 << 7 negado
	byte = readData(ptrMPUAccel, 0x6B);
 80037f8:	216b      	movs	r1, #107	; 0x6b
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f8d9 	bl	80039b2 <readData>
 8003800:	4603      	mov	r3, r0
 8003802:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B , ~(0b1 << 7) & (byte) );
 8003804:	7bbb      	ldrb	r3, [r7, #14]
 8003806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800380a:	b2db      	uxtb	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	216b      	movs	r1, #107	; 0x6b
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f883 	bl	800391c <writeData>
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 8003816:	211c      	movs	r1, #28
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f8ca 	bl	80039b2 <readData>
 800381e:	4603      	mov	r3, r0
 8003820:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 8003822:	7bbb      	ldrb	r3, [r7, #14]
 8003824:	f023 0318 	bic.w	r3, r3, #24
 8003828:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d82f      	bhi.n	8003892 <configMPUAccel+0xee>
 8003832:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <configMPUAccel+0x94>)
 8003834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003838:	08003849 	.word	0x08003849
 800383c:	08003857 	.word	0x08003857
 8003840:	0800386b 	.word	0x0800386b
 8003844:	0800387f 	.word	0x0800387f
			case ACCEL_2G :{

				writeData(ptrMPUAccel, 0x1C, (byte) | (ACCEL_2G << 3));
 8003848:	7bbb      	ldrb	r3, [r7, #14]
 800384a:	461a      	mov	r2, r3
 800384c:	211c      	movs	r1, #28
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f864 	bl	800391c <writeData>

				break;
 8003854:	e01e      	b.n	8003894 <configMPUAccel+0xf0>
			}case ACCEL_4G :{

				writeData(ptrMPUAccel, 0x1C, (byte) | (ACCEL_4G << 3));
 8003856:	7bbb      	ldrb	r3, [r7, #14]
 8003858:	f043 0308 	orr.w	r3, r3, #8
 800385c:	b2db      	uxtb	r3, r3
 800385e:	461a      	mov	r2, r3
 8003860:	211c      	movs	r1, #28
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f85a 	bl	800391c <writeData>

				break;
 8003868:	e014      	b.n	8003894 <configMPUAccel+0xf0>
			}case ACCEL_8G :{

				writeData(ptrMPUAccel, 0x1C, (byte) | (ACCEL_8G << 3));
 800386a:	7bbb      	ldrb	r3, [r7, #14]
 800386c:	f043 0310 	orr.w	r3, r3, #16
 8003870:	b2db      	uxtb	r3, r3
 8003872:	461a      	mov	r2, r3
 8003874:	211c      	movs	r1, #28
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f850 	bl	800391c <writeData>

				break;
 800387c:	e00a      	b.n	8003894 <configMPUAccel+0xf0>
			}case ACCEL_16G :{

				writeData(ptrMPUAccel, 0x1C, (byte) | (ACCEL_16G << 3));
 800387e:	7bbb      	ldrb	r3, [r7, #14]
 8003880:	f043 0318 	orr.w	r3, r3, #24
 8003884:	b2db      	uxtb	r3, r3
 8003886:	461a      	mov	r2, r3
 8003888:	211c      	movs	r1, #28
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f846 	bl	800391c <writeData>

				break;
 8003890:	e000      	b.n	8003894 <configMPUAccel+0xf0>
			}default:{
				break;
 8003892:	bf00      	nop
			}

		}

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 8003894:	211b      	movs	r1, #27
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f88b 	bl	80039b2 <readData>
 800389c:	4603      	mov	r3, r0
 800389e:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 80038a0:	7bbb      	ldrb	r3, [r7, #14]
 80038a2:	f023 0318 	bic.w	r3, r3, #24
 80038a6:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	785b      	ldrb	r3, [r3, #1]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d830      	bhi.n	8003912 <configMPUAccel+0x16e>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <configMPUAccel+0x114>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	080038c9 	.word	0x080038c9
 80038bc:	080038d7 	.word	0x080038d7
 80038c0:	080038eb 	.word	0x080038eb
 80038c4:	080038ff 	.word	0x080038ff
			case GYRO_250 :{

				writeData(ptrMPUAccel, 0x1B, (byte) | (GYRO_250 << 3));
 80038c8:	7bbb      	ldrb	r3, [r7, #14]
 80038ca:	461a      	mov	r2, r3
 80038cc:	211b      	movs	r1, #27
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f824 	bl	800391c <writeData>

				break;
 80038d4:	e01e      	b.n	8003914 <configMPUAccel+0x170>
			}case GYRO_500 :{

				writeData(ptrMPUAccel, 0x1B, (byte) | (GYRO_500 << 3));
 80038d6:	7bbb      	ldrb	r3, [r7, #14]
 80038d8:	f043 0308 	orr.w	r3, r3, #8
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	211b      	movs	r1, #27
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f81a 	bl	800391c <writeData>

				break;
 80038e8:	e014      	b.n	8003914 <configMPUAccel+0x170>
			}case GYRO_1000 :{

				writeData(ptrMPUAccel, 0x1B, (byte) | (GYRO_1000 << 3));
 80038ea:	7bbb      	ldrb	r3, [r7, #14]
 80038ec:	f043 0310 	orr.w	r3, r3, #16
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	461a      	mov	r2, r3
 80038f4:	211b      	movs	r1, #27
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f810 	bl	800391c <writeData>

				break;
 80038fc:	e00a      	b.n	8003914 <configMPUAccel+0x170>
			}case GYRO_2000 :{

				writeData(ptrMPUAccel, 0x1B, (byte) | (GYRO_2000 << 3));
 80038fe:	7bbb      	ldrb	r3, [r7, #14]
 8003900:	f043 0318 	orr.w	r3, r3, #24
 8003904:	b2db      	uxtb	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	211b      	movs	r1, #27
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f806 	bl	800391c <writeData>

				break;
 8003910:	e000      	b.n	8003914 <configMPUAccel+0x170>
			}default:{
				break;
 8003912:	bf00      	nop
			}

		}


}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	70fb      	strb	r3, [r7, #3]
 8003928:	4613      	mov	r3, r2
 800392a:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695a      	ldr	r2, [r3, #20]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800393e:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4618      	mov	r0, r3
 8003946:	f001 fe17 	bl	8005578 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6898      	ldr	r0, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	791b      	ldrb	r3, [r3, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	4619      	mov	r1, r3
 8003958:	f001 fe61 	bl	800561e <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	4611      	mov	r1, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f001 fe82 	bl	800566e <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800396a:	e000      	b.n	800396e <writeData+0x52>
		__NOP();
 800396c:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f6      	bne.n	800396c <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	78ba      	ldrb	r2, [r7, #2]
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f001 fe8b 	bl	80056a2 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800398c:	e000      	b.n	8003990 <writeData+0x74>
		__NOP();
 800398e:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f6      	bne.n	800398e <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f001 fdd5 	bl	8005554 <i2c_stopTransaction>



}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d4:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	4618      	mov	r0, r3
 80039dc:	f001 fdcc 	bl	8005578 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6898      	ldr	r0, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	791b      	ldrb	r3, [r3, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	4619      	mov	r1, r3
 80039ee:	f001 fe16 	bl	800561e <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 fe37 	bl	800566e <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003a00:	e000      	b.n	8003a04 <readData+0x52>
		__NOP();
 8003a02:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f6      	bne.n	8003a02 <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 fdd2 	bl	80055c2 <i2c_reStartTransaction>

	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6898      	ldr	r0, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	791b      	ldrb	r3, [r3, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f001 fdf7 	bl	800561e <i2c_sendSlaveAddressRW>

	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f001 fde0 	bl	80055fa <i2c_sendNoAck>

	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 fd88 	bl	8005554 <i2c_stopTransaction>

	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f001 fe44 	bl	80056d6 <i2c_readDataByte>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	73fb      	strb	r3, [r7, #15]

	return auxRead;
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 8003a6c:	2175      	movs	r1, #117	; 0x75
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ff9f 	bl	80039b2 <readData>
 8003a74:	4603      	mov	r3, r0
 8003a76:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003a7e:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bf14      	ite	ne
 8003a8a:	2301      	movne	r3, #1
 8003a8c:	2300      	moveq	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8003a92:	7bbb      	ldrb	r3, [r7, #14]

}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <readGyro_Z>:

	return GYROY;

}

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	uint16_t GYROZ_H = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	817b      	strh	r3, [r7, #10]
	uint16_t GYROZ_L = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	813b      	strh	r3, [r7, #8]
	float    GYROZ   = 0;
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8003ab2:	2147      	movs	r1, #71	; 0x47
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff ff7c 	bl	80039b2 <readData>
 8003aba:	4603      	mov	r3, r0
 8003abc:	817b      	strh	r3, [r7, #10]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 8003abe:	2148      	movs	r1, #72	; 0x48
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff ff76 	bl	80039b2 <readData>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	813b      	strh	r3, [r7, #8]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8003aca:	897b      	ldrh	r3, [r7, #10]
 8003acc:	021a      	lsls	r2, r3, #8
 8003ace:	893b      	ldrh	r3, [r7, #8]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ada:	edc7 7a03 	vstr	s15, [r7, #12]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	785b      	ldrb	r3, [r3, #1]
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d82e      	bhi.n	8003b44 <readGyro_Z+0xa8>
 8003ae6:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <readGyro_Z+0x50>)
 8003ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aec:	08003afd 	.word	0x08003afd
 8003af0:	08003b0f 	.word	0x08003b0f
 8003af4:	08003b21 	.word	0x08003b21
 8003af8:	08003b33 	.word	0x08003b33
		case GYRO_250 :{

			GYROZ /= GYRO_250_SENS;
 8003afc:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b00:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003b58 <readGyro_Z+0xbc>
 8003b04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b08:	edc7 7a03 	vstr	s15, [r7, #12]

			break;
 8003b0c:	e01b      	b.n	8003b46 <readGyro_Z+0xaa>
		}case GYRO_500 :{

			GYROZ /= GYRO_500_SENS;
 8003b0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b12:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003b5c <readGyro_Z+0xc0>
 8003b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b1a:	edc7 7a03 	vstr	s15, [r7, #12]

			break;
 8003b1e:	e012      	b.n	8003b46 <readGyro_Z+0xaa>
		}case GYRO_1000 :{

			GYROZ /= GYRO_1000_SENS;
 8003b20:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b24:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003b60 <readGyro_Z+0xc4>
 8003b28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b2c:	edc7 7a03 	vstr	s15, [r7, #12]

			break;
 8003b30:	e009      	b.n	8003b46 <readGyro_Z+0xaa>
		}case GYRO_2000 :{

			GYROZ /= GYRO_2000_SENS;
 8003b32:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b36:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8003b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b3e:	edc7 7a03 	vstr	s15, [r7, #12]

			break;
 8003b42:	e000      	b.n	8003b46 <readGyro_Z+0xaa>
		}default:{
			break;
 8003b44:	bf00      	nop
		}

	}

	return GYROZ;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	ee07 3a90 	vmov	s15, r3

}
 8003b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	43030000 	.word	0x43030000
 8003b5c:	42840000 	.word	0x42840000
 8003b60:	42040000 	.word	0x42040000

08003b64 <setConstants>:

#include "MotorsDriver.h"
#include "PwmDriver.h"


void setConstants(Motor_Handler_t *ptrMotorHandler, uint8_t motor , float k, float tau, float theta, uint16_t Ts){
 8003b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b68:	b08a      	sub	sp, #40	; 0x28
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6178      	str	r0, [r7, #20]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	ed87 0a03 	vstr	s0, [r7, #12]
 8003b74:	edc7 0a02 	vstr	s1, [r7, #8]
 8003b78:	ed87 1a01 	vstr	s2, [r7, #4]
 8003b7c:	74fb      	strb	r3, [r7, #19]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	823b      	strh	r3, [r7, #16]

	float kp   = 0;
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
	float taoi = 0;
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	623b      	str	r3, [r7, #32]
	float taod = 0;
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	61fb      	str	r3, [r7, #28]

	kp   = (1.2*tau)/(k*theta);
 8003b94:	68b8      	ldr	r0, [r7, #8]
 8003b96:	f7fc fcef 	bl	8000578 <__aeabi_f2d>
 8003b9a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003b9e:	4bc8      	ldr	r3, [pc, #800]	; (8003ec0 <setConstants+0x35c>)
 8003ba0:	f7fc fd42 	bl	8000628 <__aeabi_dmul>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4614      	mov	r4, r2
 8003baa:	461d      	mov	r5, r3
 8003bac:	ed97 7a03 	vldr	s14, [r7, #12]
 8003bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb8:	ee17 0a90 	vmov	r0, s15
 8003bbc:	f7fc fcdc 	bl	8000578 <__aeabi_f2d>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	f7fc fe58 	bl	800087c <__aeabi_ddiv>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f7fd f820 	bl	8000c18 <__aeabi_d2f>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
	taoi = 2*theta;
 8003bdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003be0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003be4:	edc7 7a08 	vstr	s15, [r7, #32]
	taod = 0.5*theta;
 8003be8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003bf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bf4:	edc7 7a07 	vstr	s15, [r7, #28]

	switch (motor) {
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d003      	beq.n	8003c06 <setConstants+0xa2>
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	f000 80ac 	beq.w	8003d5c <setConstants+0x1f8>
 8003c04:	e155      	b.n	8003eb2 <setConstants+0x34e>

		case 1:{

			ptrMotorHandler->configM1.q_M1_0 = kp*(1+Ts/(2.0*taoi)+taod/Ts);
 8003c06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c08:	f7fc fcb6 	bl	8000578 <__aeabi_f2d>
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	460d      	mov	r5, r1
 8003c10:	8a3b      	ldrh	r3, [r7, #16]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fc fc9e 	bl	8000554 <__aeabi_i2d>
 8003c18:	4680      	mov	r8, r0
 8003c1a:	4689      	mov	r9, r1
 8003c1c:	6a38      	ldr	r0, [r7, #32]
 8003c1e:	f7fc fcab 	bl	8000578 <__aeabi_f2d>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	f7fc fb49 	bl	80002bc <__adddf3>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4640      	mov	r0, r8
 8003c30:	4649      	mov	r1, r9
 8003c32:	f7fc fe23 	bl	800087c <__aeabi_ddiv>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	4ba0      	ldr	r3, [pc, #640]	; (8003ec4 <setConstants+0x360>)
 8003c44:	f7fc fb3a 	bl	80002bc <__adddf3>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4690      	mov	r8, r2
 8003c4e:	4699      	mov	r9, r3
 8003c50:	8a3b      	ldrh	r3, [r7, #16]
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c5a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c62:	ee16 0a90 	vmov	r0, s13
 8003c66:	f7fc fc87 	bl	8000578 <__aeabi_f2d>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4640      	mov	r0, r8
 8003c70:	4649      	mov	r1, r9
 8003c72:	f7fc fb23 	bl	80002bc <__adddf3>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	4629      	mov	r1, r5
 8003c7e:	f7fc fcd3 	bl	8000628 <__aeabi_dmul>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4610      	mov	r0, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f7fc ffc5 	bl	8000c18 <__aeabi_d2f>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	609a      	str	r2, [r3, #8]
			ptrMotorHandler->configM1.q_M1_1 = -kp*(1-Ts/(2.0*taoi)+(2.0*taod)/Ts);
 8003c94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c98:	eef1 7a67 	vneg.f32	s15, s15
 8003c9c:	ee17 3a90 	vmov	r3, s15
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fc fc69 	bl	8000578 <__aeabi_f2d>
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	460d      	mov	r5, r1
 8003caa:	8a3b      	ldrh	r3, [r7, #16]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fc fc51 	bl	8000554 <__aeabi_i2d>
 8003cb2:	4680      	mov	r8, r0
 8003cb4:	4689      	mov	r9, r1
 8003cb6:	6a38      	ldr	r0, [r7, #32]
 8003cb8:	f7fc fc5e 	bl	8000578 <__aeabi_f2d>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	f7fc fafc 	bl	80002bc <__adddf3>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4640      	mov	r0, r8
 8003cca:	4649      	mov	r1, r9
 8003ccc:	f7fc fdd6 	bl	800087c <__aeabi_ddiv>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	f04f 0000 	mov.w	r0, #0
 8003cd8:	497a      	ldr	r1, [pc, #488]	; (8003ec4 <setConstants+0x360>)
 8003cda:	f7fc faed 	bl	80002b8 <__aeabi_dsub>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4690      	mov	r8, r2
 8003ce4:	4699      	mov	r9, r3
 8003ce6:	69f8      	ldr	r0, [r7, #28]
 8003ce8:	f7fc fc46 	bl	8000578 <__aeabi_f2d>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	f7fc fae4 	bl	80002bc <__adddf3>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4692      	mov	sl, r2
 8003cfa:	469b      	mov	fp, r3
 8003cfc:	8a3b      	ldrh	r3, [r7, #16]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fc fc28 	bl	8000554 <__aeabi_i2d>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4650      	mov	r0, sl
 8003d0a:	4659      	mov	r1, fp
 8003d0c:	f7fc fdb6 	bl	800087c <__aeabi_ddiv>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4640      	mov	r0, r8
 8003d16:	4649      	mov	r1, r9
 8003d18:	f7fc fad0 	bl	80002bc <__adddf3>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4620      	mov	r0, r4
 8003d22:	4629      	mov	r1, r5
 8003d24:	f7fc fc80 	bl	8000628 <__aeabi_dmul>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	4619      	mov	r1, r3
 8003d30:	f7fc ff72 	bl	8000c18 <__aeabi_d2f>
 8003d34:	4602      	mov	r2, r0
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	60da      	str	r2, [r3, #12]
			ptrMotorHandler->configM1.q_M1_2 = (kp*taod)/Ts;
 8003d3a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003d3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d42:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003d46:	8a3b      	ldrh	r3, [r7, #16]
 8003d48:	ee07 3a90 	vmov	s15, r3
 8003d4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	edc3 7a04 	vstr	s15, [r3, #16]

			break;
 8003d5a:	e0ac      	b.n	8003eb6 <setConstants+0x352>
		}case 2:{

			ptrMotorHandler->configM2.q_M2_0 = kp*(1+Ts/(2.0*taoi)+taod/Ts);
 8003d5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d5e:	f7fc fc0b 	bl	8000578 <__aeabi_f2d>
 8003d62:	4604      	mov	r4, r0
 8003d64:	460d      	mov	r5, r1
 8003d66:	8a3b      	ldrh	r3, [r7, #16]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fc fbf3 	bl	8000554 <__aeabi_i2d>
 8003d6e:	4680      	mov	r8, r0
 8003d70:	4689      	mov	r9, r1
 8003d72:	6a38      	ldr	r0, [r7, #32]
 8003d74:	f7fc fc00 	bl	8000578 <__aeabi_f2d>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	f7fc fa9e 	bl	80002bc <__adddf3>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4640      	mov	r0, r8
 8003d86:	4649      	mov	r1, r9
 8003d88:	f7fc fd78 	bl	800087c <__aeabi_ddiv>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4610      	mov	r0, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	4b4a      	ldr	r3, [pc, #296]	; (8003ec4 <setConstants+0x360>)
 8003d9a:	f7fc fa8f 	bl	80002bc <__adddf3>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4690      	mov	r8, r2
 8003da4:	4699      	mov	r9, r3
 8003da6:	8a3b      	ldrh	r3, [r7, #16]
 8003da8:	ee07 3a90 	vmov	s15, r3
 8003dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003db0:	ed97 7a07 	vldr	s14, [r7, #28]
 8003db4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003db8:	ee16 0a90 	vmov	r0, s13
 8003dbc:	f7fc fbdc 	bl	8000578 <__aeabi_f2d>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4640      	mov	r0, r8
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	f7fc fa78 	bl	80002bc <__adddf3>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	f7fc fc28 	bl	8000628 <__aeabi_dmul>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4619      	mov	r1, r3
 8003de0:	f7fc ff1a 	bl	8000c18 <__aeabi_d2f>
 8003de4:	4602      	mov	r2, r0
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	62da      	str	r2, [r3, #44]	; 0x2c
			ptrMotorHandler->configM2.q_M2_1 = -kp*(1-Ts/(2.0*taoi)+(2.0*taod)/Ts);
 8003dea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003dee:	eef1 7a67 	vneg.f32	s15, s15
 8003df2:	ee17 3a90 	vmov	r3, s15
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fc fbbe 	bl	8000578 <__aeabi_f2d>
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	460d      	mov	r5, r1
 8003e00:	8a3b      	ldrh	r3, [r7, #16]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fc fba6 	bl	8000554 <__aeabi_i2d>
 8003e08:	4680      	mov	r8, r0
 8003e0a:	4689      	mov	r9, r1
 8003e0c:	6a38      	ldr	r0, [r7, #32]
 8003e0e:	f7fc fbb3 	bl	8000578 <__aeabi_f2d>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	f7fc fa51 	bl	80002bc <__adddf3>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4640      	mov	r0, r8
 8003e20:	4649      	mov	r1, r9
 8003e22:	f7fc fd2b 	bl	800087c <__aeabi_ddiv>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	f04f 0000 	mov.w	r0, #0
 8003e2e:	4925      	ldr	r1, [pc, #148]	; (8003ec4 <setConstants+0x360>)
 8003e30:	f7fc fa42 	bl	80002b8 <__aeabi_dsub>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4690      	mov	r8, r2
 8003e3a:	4699      	mov	r9, r3
 8003e3c:	69f8      	ldr	r0, [r7, #28]
 8003e3e:	f7fc fb9b 	bl	8000578 <__aeabi_f2d>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	f7fc fa39 	bl	80002bc <__adddf3>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4692      	mov	sl, r2
 8003e50:	469b      	mov	fp, r3
 8003e52:	8a3b      	ldrh	r3, [r7, #16]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fc fb7d 	bl	8000554 <__aeabi_i2d>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4650      	mov	r0, sl
 8003e60:	4659      	mov	r1, fp
 8003e62:	f7fc fd0b 	bl	800087c <__aeabi_ddiv>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4640      	mov	r0, r8
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	f7fc fa25 	bl	80002bc <__adddf3>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4620      	mov	r0, r4
 8003e78:	4629      	mov	r1, r5
 8003e7a:	f7fc fbd5 	bl	8000628 <__aeabi_dmul>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4610      	mov	r0, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	f7fc fec7 	bl	8000c18 <__aeabi_d2f>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
			ptrMotorHandler->configM2.q_M2_2 = (kp*taod)/Ts;
 8003e90:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003e94:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e98:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e9c:	8a3b      	ldrh	r3, [r7, #16]
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			break;
 8003eb0:	e001      	b.n	8003eb6 <setConstants+0x352>
		}default :{

			__NOP();
 8003eb2:	bf00      	nop
			break;
 8003eb4:	bf00      	nop
		}

	}

}
 8003eb6:	bf00      	nop
 8003eb8:	3728      	adds	r7, #40	; 0x28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ec0:	3ff33333 	.word	0x3ff33333
 8003ec4:	3ff00000 	.word	0x3ff00000

08003ec8 <PID>:

double PID(Motor_Handler_t *ptrMotorHandler, float measure , uint8_t motor, float setpoint ){
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	edc7 0a00 	vstr	s1, [r7]
 8003eda:	71fb      	strb	r3, [r7, #7]

	float u,p_0,p_1,p_2;


	switch (motor) {
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d002      	beq.n	8003ee8 <PID+0x20>
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d049      	beq.n	8003f7a <PID+0xb2>
 8003ee6:	e091      	b.n	800400c <PID+0x144>

		case 1:{


			ptrMotorHandler->configM1.e_M1 = setpoint - measure;
 8003ee8:	ed97 7a00 	vldr	s14, [r7]
 8003eec:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	edc3 7a05 	vstr	s15, [r3, #20]

			p_0 = ptrMotorHandler->configM1.q_M1_0 * ptrMotorHandler->configM1.e_M1;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	ed93 7a02 	vldr	s14, [r3, #8]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	edd3 7a05 	vldr	s15, [r3, #20]
 8003f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0a:	edc7 7a06 	vstr	s15, [r7, #24]
			p_1 = ptrMotorHandler->configM1.q_M1_1 * ptrMotorHandler->configM1.e_M1_1;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1e:	edc7 7a05 	vstr	s15, [r7, #20]
			p_2 = ptrMotorHandler->configM1.q_M1_2 * ptrMotorHandler->configM1.e_M1_2;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	ed93 7a04 	vldr	s14, [r3, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	edd3 7a07 	vldr	s15, [r3, #28]
 8003f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f32:	edc7 7a04 	vstr	s15, [r7, #16]

			ptrMotorHandler->configM1.u_M1 = ptrMotorHandler->configM1.u_M1_1 + p_0 + p_1 + p_2;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f44:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	edc3 7a00 	vstr	s15, [r3]
			u = ptrMotorHandler->configM1.u_M1;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	61fb      	str	r3, [r7, #28]

			// Actualizamos los datos

			ptrMotorHandler->configM1.e_M1_1 = ptrMotorHandler->configM1.e_M1;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	695a      	ldr	r2, [r3, #20]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	619a      	str	r2, [r3, #24]
			ptrMotorHandler->configM1.e_M1_1 = ptrMotorHandler->configM1.e_M1_2;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	69da      	ldr	r2, [r3, #28]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	619a      	str	r2, [r3, #24]
			ptrMotorHandler->configM1.u_M1_1 = ptrMotorHandler->configM1.u_M1;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	605a      	str	r2, [r3, #4]


			break;
 8003f78:	e04a      	b.n	8004010 <PID+0x148>
		}case 2:{

			ptrMotorHandler->configM2.e_M2 = setpoint - measure;
 8003f7a:	ed97 7a00 	vldr	s14, [r7]
 8003f7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			p_0 = ptrMotorHandler->configM2.q_M2_0 * ptrMotorHandler->configM2.e_M2;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9c:	edc7 7a06 	vstr	s15, [r7, #24]
			p_1 = ptrMotorHandler->configM2.q_M2_1 * ptrMotorHandler->configM2.e_M2_1;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb0:	edc7 7a05 	vstr	s15, [r7, #20]
			p_2 = ptrMotorHandler->configM2.q_M2_2 * ptrMotorHandler->configM2.e_M2_2;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc4:	edc7 7a04 	vstr	s15, [r7, #16]

			ptrMotorHandler->configM2.u_M2 = ptrMotorHandler->configM2.u_M2_1 + p_0 + p_1 + p_2;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003fce:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fde:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			u = ptrMotorHandler->configM2.u_M2;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	61fb      	str	r3, [r7, #28]

			// Actualizamos los datos

			ptrMotorHandler->configM2.e_M2_1 = ptrMotorHandler->configM2.e_M2;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	63da      	str	r2, [r3, #60]	; 0x3c
			ptrMotorHandler->configM2.e_M2_1 = ptrMotorHandler->configM2.e_M2_2;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	63da      	str	r2, [r3, #60]	; 0x3c
			ptrMotorHandler->configM2.u_M2_1 = ptrMotorHandler->configM2.u_M2;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	629a      	str	r2, [r3, #40]	; 0x28


			break;
 800400a:	e001      	b.n	8004010 <PID+0x148>
		}default :{

			__NOP();
 800400c:	bf00      	nop
			break;
 800400e:	bf00      	nop
		}

	}

	return u;
 8004010:	69f8      	ldr	r0, [r7, #28]
 8004012:	f7fc fab1 	bl	8000578 <__aeabi_f2d>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	ec43 2b17 	vmov	d7, r2, r3

}
 800401e:	eeb0 0a47 	vmov.f32	s0, s14
 8004022:	eef0 0a67 	vmov.f32	s1, s15
 8004026:	3720      	adds	r7, #32
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <map>:

double map(double x, double in_min, double in_max, double out_min, double out_max){
 800402c:	b580      	push	{r7, lr}
 800402e:	b092      	sub	sp, #72	; 0x48
 8004030:	af00      	add	r7, sp, #0
 8004032:	ed87 0b08 	vstr	d0, [r7, #32]
 8004036:	ed87 1b06 	vstr	d1, [r7, #24]
 800403a:	ed87 2b04 	vstr	d2, [r7, #16]
 800403e:	ed87 3b02 	vstr	d3, [r7, #8]
 8004042:	ed87 4b00 	vstr	d4, [r7]

	double primera = (x - in_min);
 8004046:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800404a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800404e:	f7fc f933 	bl	80002b8 <__aeabi_dsub>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double segundo = (out_max - out_min);
 800405a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800405e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004062:	f7fc f929 	bl	80002b8 <__aeabi_dsub>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double tercero = (in_max - in_min);
 800406e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004072:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004076:	f7fc f91f 	bl	80002b8 <__aeabi_dsub>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	double result = (primera * segundo / tercero ) + out_min;
 8004082:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004086:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800408a:	f7fc facd 	bl	8000628 <__aeabi_dmul>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800409a:	f7fc fbef 	bl	800087c <__aeabi_ddiv>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040a6:	f7fc f909 	bl	80002bc <__adddf3>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return  result;
 80040b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80040ba:	eeb0 0a47 	vmov.f32	s0, s14
 80040be:	eef0 0a67 	vmov.f32	s1, s15
 80040c2:	3748      	adds	r7, #72	; 0x48
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <pwm_Config>:
#include "PwmDriver.h"

uint16_t periodo = 0;

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a68      	ldr	r2, [pc, #416]	; (8004278 <pwm_Config+0x1b0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d106      	bne.n	80040e8 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80040da:	4b68      	ldr	r3, [pc, #416]	; (800427c <pwm_Config+0x1b4>)
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	4a67      	ldr	r2, [pc, #412]	; (800427c <pwm_Config+0x1b4>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	6453      	str	r3, [r2, #68]	; 0x44
 80040e6:	e030      	b.n	800414a <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f0:	d106      	bne.n	8004100 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80040f2:	4b62      	ldr	r3, [pc, #392]	; (800427c <pwm_Config+0x1b4>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	4a61      	ldr	r2, [pc, #388]	; (800427c <pwm_Config+0x1b4>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	6413      	str	r3, [r2, #64]	; 0x40
 80040fe:	e024      	b.n	800414a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5e      	ldr	r2, [pc, #376]	; (8004280 <pwm_Config+0x1b8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d106      	bne.n	8004118 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800410a:	4b5c      	ldr	r3, [pc, #368]	; (800427c <pwm_Config+0x1b4>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	4a5b      	ldr	r2, [pc, #364]	; (800427c <pwm_Config+0x1b4>)
 8004110:	f043 0302 	orr.w	r3, r3, #2
 8004114:	6413      	str	r3, [r2, #64]	; 0x40
 8004116:	e018      	b.n	800414a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a59      	ldr	r2, [pc, #356]	; (8004284 <pwm_Config+0x1bc>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d106      	bne.n	8004130 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8004122:	4b56      	ldr	r3, [pc, #344]	; (800427c <pwm_Config+0x1b4>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	4a55      	ldr	r2, [pc, #340]	; (800427c <pwm_Config+0x1b4>)
 8004128:	f043 0304 	orr.w	r3, r3, #4
 800412c:	6413      	str	r3, [r2, #64]	; 0x40
 800412e:	e00c      	b.n	800414a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a54      	ldr	r2, [pc, #336]	; (8004288 <pwm_Config+0x1c0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d106      	bne.n	8004148 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800413a:	4b50      	ldr	r3, [pc, #320]	; (800427c <pwm_Config+0x1b4>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	4a4f      	ldr	r2, [pc, #316]	; (800427c <pwm_Config+0x1b4>)
 8004140:	f043 0308 	orr.w	r3, r3, #8
 8004144:	6413      	str	r3, [r2, #64]	; 0x40
 8004146:	e000      	b.n	800414a <pwm_Config+0x82>
	}
	else{
		__NOP();
 8004148:	bf00      	nop



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	7d5b      	ldrb	r3, [r3, #21]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <pwm_Config+0x98>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f8ec 	bl	8004330 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f95b 	bl	8004414 <setDuttyCycle>
 800415e:	e005      	b.n	800416c <pwm_Config+0xa4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f8e5 	bl	8004330 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fa04 	bl	8004574 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0210 	bic.w	r2, r2, #16
 800417a:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2200      	movs	r2, #0
 8004182:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	791b      	ldrb	r3, [r3, #4]
 8004188:	2b03      	cmp	r3, #3
 800418a:	d86f      	bhi.n	800426c <pwm_Config+0x1a4>
 800418c:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <pwm_Config+0xcc>)
 800418e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004192:	bf00      	nop
 8004194:	080041a5 	.word	0x080041a5
 8004198:	080041d7 	.word	0x080041d7
 800419c:	08004209 	.word	0x08004209
 80041a0:	0800423b 	.word	0x0800423b
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0203 	bic.w	r2, r2, #3
 80041b2:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80041c2:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0208 	orr.w	r2, r2, #8
 80041d2:	619a      	str	r2, [r3, #24]


		break;
 80041d4:	e04b      	b.n	800426e <pwm_Config+0x1a6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699a      	ldr	r2, [r3, #24]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80041e4:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699a      	ldr	r2, [r3, #24]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80041f4:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699a      	ldr	r2, [r3, #24]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004204:	619a      	str	r2, [r3, #24]

		break;
 8004206:	e032      	b.n	800426e <pwm_Config+0x1a6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0203 	bic.w	r2, r2, #3
 8004216:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69da      	ldr	r2, [r3, #28]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004226:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69da      	ldr	r2, [r3, #28]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0208 	orr.w	r2, r2, #8
 8004236:	61da      	str	r2, [r3, #28]

		break;
 8004238:	e019      	b.n	800426e <pwm_Config+0x1a6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69da      	ldr	r2, [r3, #28]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004248:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8004258:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004268:	61da      	str	r2, [r3, #28]

		break;
 800426a:	e000      	b.n	800426e <pwm_Config+0x1a6>
	}

	default:{
		break;
 800426c:	bf00      	nop
	}// fin del switch-case




}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40010000 	.word	0x40010000
 800427c:	40023800 	.word	0x40023800
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40000c00 	.word	0x40000c00

0800428c <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	791b      	ldrb	r3, [r3, #4]
 80042bc:	2b03      	cmp	r3, #3
 80042be:	d82f      	bhi.n	8004320 <enableOutput+0x70>
 80042c0:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <enableOutput+0x18>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	080042d9 	.word	0x080042d9
 80042cc:	080042eb 	.word	0x080042eb
 80042d0:	080042fd 	.word	0x080042fd
 80042d4:	0800430f 	.word	0x0800430f
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6a1a      	ldr	r2, [r3, #32]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	621a      	str	r2, [r3, #32]

		break;
 80042e8:	e01b      	b.n	8004322 <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a1a      	ldr	r2, [r3, #32]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0210 	orr.w	r2, r2, #16
 80042f8:	621a      	str	r2, [r3, #32]

		break;
 80042fa:	e012      	b.n	8004322 <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 3
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6a1a      	ldr	r2, [r3, #32]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800430a:	621a      	str	r2, [r3, #32]

		break;
 800430c:	e009      	b.n	8004322 <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 4
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6a1a      	ldr	r2, [r3, #32]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800431c:	621a      	str	r2, [r3, #32]

		break;
 800431e:	e000      	b.n	8004322 <enableOutput+0x72>
	}

	default: {
		break;
 8004320:	bf00      	nop
	}
	}

	return SET;
 8004322:	2301      	movs	r3, #1
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6892      	ldr	r2, [r2, #8]
 8004344:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if  ((speed == PWM_SPEED_16MHz_1us ) || (speed == PWM_SPEED_100MHz_1us)) {
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b10      	cmp	r3, #16
 8004350:	d002      	beq.n	8004358 <setFrequency+0x28>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b64      	cmp	r3, #100	; 0x64
 8004356:	d111      	bne.n	800437c <setFrequency+0x4c>

		periodo = ptrPwmHandler->config.periodo * 1000  ;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	899b      	ldrh	r3, [r3, #12]
 800435c:	461a      	mov	r2, r3
 800435e:	0152      	lsls	r2, r2, #5
 8004360:	1ad2      	subs	r2, r2, r3
 8004362:	0092      	lsls	r2, r2, #2
 8004364:	4413      	add	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	b29a      	uxth	r2, r3
 800436a:	4b29      	ldr	r3, [pc, #164]	; (8004410 <setFrequency+0xe0>)
 800436c:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800436e:	4b28      	ldr	r3, [pc, #160]	; (8004410 <setFrequency+0xe0>)
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	1e5a      	subs	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	62da      	str	r2, [r3, #44]	; 0x2c
 800437a:	e043      	b.n	8004404 <setFrequency+0xd4>


	}else if ((speed == PWM_SPEED_16MHz_10us ) || (speed == PWM_SPEED_100MHz_10us)){
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2ba0      	cmp	r3, #160	; 0xa0
 8004380:	d003      	beq.n	800438a <setFrequency+0x5a>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004388:	d114      	bne.n	80043b4 <setFrequency+0x84>

		periodo = ptrPwmHandler->config.periodo * 100  ;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	899b      	ldrh	r3, [r3, #12]
 800438e:	461a      	mov	r2, r3
 8004390:	0092      	lsls	r2, r2, #2
 8004392:	4413      	add	r3, r2
 8004394:	461a      	mov	r2, r3
 8004396:	0091      	lsls	r1, r2, #2
 8004398:	461a      	mov	r2, r3
 800439a:	460b      	mov	r3, r1
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <setFrequency+0xe0>)
 80043a4:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80043a6:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <setFrequency+0xe0>)
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	1e5a      	subs	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80043b2:	e027      	b.n	8004404 <setFrequency+0xd4>

	}else if ((speed == PWM_SPEED_16MHz_100us ) || (speed == PWM_SPEED_100MHz_100us)){
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80043ba:	d004      	beq.n	80043c6 <setFrequency+0x96>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f242 7210 	movw	r2, #10000	; 0x2710
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d10f      	bne.n	80043e6 <setFrequency+0xb6>

		periodo = ptrPwmHandler->config.periodo * 10  ;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	899b      	ldrh	r3, [r3, #12]
 80043ca:	461a      	mov	r2, r3
 80043cc:	0092      	lsls	r2, r2, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	4b0e      	ldr	r3, [pc, #56]	; (8004410 <setFrequency+0xe0>)
 80043d6:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80043d8:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <setFrequency+0xe0>)
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	1e5a      	subs	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80043e4:	e00e      	b.n	8004404 <setFrequency+0xd4>


	}else if ((speed == PWM_SPEED_16MHz_1ms )){
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80043ec:	d10a      	bne.n	8004404 <setFrequency+0xd4>

		periodo = ptrPwmHandler->config.periodo   ;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	899a      	ldrh	r2, [r3, #12]
 80043f2:	4b07      	ldr	r3, [pc, #28]	; (8004410 <setFrequency+0xe0>)
 80043f4:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <setFrequency+0xe0>)
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	1e5a      	subs	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	62da      	str	r2, [r3, #44]	; 0x2c

	}

}
 8004402:	e7ff      	b.n	8004404 <setFrequency+0xd4>
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	20000588 	.word	0x20000588

08004414 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8004414:	b590      	push	{r4, r7, lr}
 8004416:	b08b      	sub	sp, #44	; 0x2c
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	791b      	ldrb	r3, [r3, #4]
 8004420:	2b03      	cmp	r3, #3
 8004422:	f200 809f 	bhi.w	8004564 <setDuttyCycle+0x150>
 8004426:	a201      	add	r2, pc, #4	; (adr r2, 800442c <setDuttyCycle+0x18>)
 8004428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442c:	0800443d 	.word	0x0800443d
 8004430:	08004487 	.word	0x08004487
 8004434:	080044d1 	.word	0x080044d1
 8004438:	0800451b 	.word	0x0800451b
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	ed93 7a04 	vldr	s14, [r3, #16]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	899b      	ldrh	r3, [r3, #12]
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800444e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004452:	ee17 0a90 	vmov	r0, s15
 8004456:	f7fc f88f 	bl	8000578 <__aeabi_f2d>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100;
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	4b42      	ldr	r3, [pc, #264]	; (8004570 <setDuttyCycle+0x15c>)
 8004468:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800446c:	f7fc fa06 	bl	800087c <__aeabi_ddiv>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4610      	mov	r0, r2
 8004476:	4619      	mov	r1, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681c      	ldr	r4, [r3, #0]
 800447c:	f7fc fbac 	bl	8000bd8 <__aeabi_d2uiz>
 8004480:	4603      	mov	r3, r0
 8004482:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8004484:	e06f      	b.n	8004566 <setDuttyCycle+0x152>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	ed93 7a04 	vldr	s14, [r3, #16]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	899b      	ldrh	r3, [r3, #12]
 8004490:	ee07 3a90 	vmov	s15, r3
 8004494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449c:	ee17 0a90 	vmov	r0, s15
 80044a0:	f7fc f86a 	bl	8000578 <__aeabi_f2d>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100;
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	4b2f      	ldr	r3, [pc, #188]	; (8004570 <setDuttyCycle+0x15c>)
 80044b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044b6:	f7fc f9e1 	bl	800087c <__aeabi_ddiv>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4610      	mov	r0, r2
 80044c0:	4619      	mov	r1, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681c      	ldr	r4, [r3, #0]
 80044c6:	f7fc fb87 	bl	8000bd8 <__aeabi_d2uiz>
 80044ca:	4603      	mov	r3, r0
 80044cc:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 80044ce:	e04a      	b.n	8004566 <setDuttyCycle+0x152>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	ed93 7a04 	vldr	s14, [r3, #16]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	899b      	ldrh	r3, [r3, #12]
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e6:	ee17 0a90 	vmov	r0, s15
 80044ea:	f7fc f845 	bl	8000578 <__aeabi_f2d>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100;
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <setDuttyCycle+0x15c>)
 80044fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004500:	f7fc f9bc 	bl	800087c <__aeabi_ddiv>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4610      	mov	r0, r2
 800450a:	4619      	mov	r1, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681c      	ldr	r4, [r3, #0]
 8004510:	f7fc fb62 	bl	8000bd8 <__aeabi_d2uiz>
 8004514:	4603      	mov	r3, r0
 8004516:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8004518:	e025      	b.n	8004566 <setDuttyCycle+0x152>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	ed93 7a04 	vldr	s14, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	899b      	ldrh	r3, [r3, #12]
 8004524:	ee07 3a90 	vmov	s15, r3
 8004528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800452c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004530:	ee17 0a90 	vmov	r0, s15
 8004534:	f7fc f820 	bl	8000578 <__aeabi_f2d>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100;
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <setDuttyCycle+0x15c>)
 8004546:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800454a:	f7fc f997 	bl	800087c <__aeabi_ddiv>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4610      	mov	r0, r2
 8004554:	4619      	mov	r1, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681c      	ldr	r4, [r3, #0]
 800455a:	f7fc fb3d 	bl	8000bd8 <__aeabi_d2uiz>
 800455e:	4603      	mov	r3, r0
 8004560:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8004562:	e000      	b.n	8004566 <setDuttyCycle+0x152>
	}

	default:{
		break;
 8004564:	bf00      	nop
	}

	}// fin del switch-case

}
 8004566:	bf00      	nop
 8004568:	372c      	adds	r7, #44	; 0x2c
 800456a:	46bd      	mov	sp, r7
 800456c:	bd90      	pop	{r4, r7, pc}
 800456e:	bf00      	nop
 8004570:	40590000 	.word	0x40590000

08004574 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8004574:	b590      	push	{r4, r7, lr}
 8004576:	b08b      	sub	sp, #44	; 0x2c
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	791b      	ldrb	r3, [r3, #4]
 8004580:	2b03      	cmp	r3, #3
 8004582:	f200 80af 	bhi.w	80046e4 <setDuttyCycleAfOpt+0x170>
 8004586:	a201      	add	r2, pc, #4	; (adr r2, 800458c <setDuttyCycleAfOpt+0x18>)
 8004588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458c:	0800459d 	.word	0x0800459d
 8004590:	080045ef 	.word	0x080045ef
 8004594:	08004641 	.word	0x08004641
 8004598:	08004693 	.word	0x08004693
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	edd3 7a04 	vldr	s15, [r3, #16]
 80045a2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80046f0 <setDuttyCycleAfOpt+0x17c>
 80045a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045aa:	4b52      	ldr	r3, [pc, #328]	; (80046f4 <setDuttyCycleAfOpt+0x180>)
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	ee07 3a90 	vmov	s15, r3
 80045b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ba:	ee17 0a90 	vmov	r0, s15
 80045be:	f7fb ffdb 	bl	8000578 <__aeabi_f2d>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100;
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	4b4a      	ldr	r3, [pc, #296]	; (80046f8 <setDuttyCycleAfOpt+0x184>)
 80045d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045d4:	f7fc f952 	bl	800087c <__aeabi_ddiv>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4610      	mov	r0, r2
 80045de:	4619      	mov	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681c      	ldr	r4, [r3, #0]
 80045e4:	f7fc faf8 	bl	8000bd8 <__aeabi_d2uiz>
 80045e8:	4603      	mov	r3, r0
 80045ea:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 80045ec:	e07b      	b.n	80046e6 <setDuttyCycleAfOpt+0x172>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80045f4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80046f0 <setDuttyCycleAfOpt+0x17c>
 80045f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045fc:	4b3d      	ldr	r3, [pc, #244]	; (80046f4 <setDuttyCycleAfOpt+0x180>)
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	ee07 3a90 	vmov	s15, r3
 8004604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460c:	ee17 0a90 	vmov	r0, s15
 8004610:	f7fb ffb2 	bl	8000578 <__aeabi_f2d>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100;
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	4b35      	ldr	r3, [pc, #212]	; (80046f8 <setDuttyCycleAfOpt+0x184>)
 8004622:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004626:	f7fc f929 	bl	800087c <__aeabi_ddiv>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4610      	mov	r0, r2
 8004630:	4619      	mov	r1, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681c      	ldr	r4, [r3, #0]
 8004636:	f7fc facf 	bl	8000bd8 <__aeabi_d2uiz>
 800463a:	4603      	mov	r3, r0
 800463c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800463e:	e052      	b.n	80046e6 <setDuttyCycleAfOpt+0x172>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	edd3 7a04 	vldr	s15, [r3, #16]
 8004646:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80046f0 <setDuttyCycleAfOpt+0x17c>
 800464a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800464e:	4b29      	ldr	r3, [pc, #164]	; (80046f4 <setDuttyCycleAfOpt+0x180>)
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800465a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465e:	ee17 0a90 	vmov	r0, s15
 8004662:	f7fb ff89 	bl	8000578 <__aeabi_f2d>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100;
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	4b21      	ldr	r3, [pc, #132]	; (80046f8 <setDuttyCycleAfOpt+0x184>)
 8004674:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004678:	f7fc f900 	bl	800087c <__aeabi_ddiv>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4610      	mov	r0, r2
 8004682:	4619      	mov	r1, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681c      	ldr	r4, [r3, #0]
 8004688:	f7fc faa6 	bl	8000bd8 <__aeabi_d2uiz>
 800468c:	4603      	mov	r3, r0
 800468e:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8004690:	e029      	b.n	80046e6 <setDuttyCycleAfOpt+0x172>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	edd3 7a04 	vldr	s15, [r3, #16]
 8004698:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80046f0 <setDuttyCycleAfOpt+0x17c>
 800469c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046a0:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <setDuttyCycleAfOpt+0x180>)
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	ee07 3a90 	vmov	s15, r3
 80046a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b0:	ee17 0a90 	vmov	r0, s15
 80046b4:	f7fb ff60 	bl	8000578 <__aeabi_f2d>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100;
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <setDuttyCycleAfOpt+0x184>)
 80046c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80046ca:	f7fc f8d7 	bl	800087c <__aeabi_ddiv>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4610      	mov	r0, r2
 80046d4:	4619      	mov	r1, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681c      	ldr	r4, [r3, #0]
 80046da:	f7fc fa7d 	bl	8000bd8 <__aeabi_d2uiz>
 80046de:	4603      	mov	r3, r0
 80046e0:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 80046e2:	e000      	b.n	80046e6 <setDuttyCycleAfOpt+0x172>
	}

	default:{
		break;
 80046e4:	bf00      	nop
	}

	}// fin del switch-case


}
 80046e6:	bf00      	nop
 80046e8:	372c      	adds	r7, #44	; 0x2c
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd90      	pop	{r4, r7, pc}
 80046ee:	bf00      	nop
 80046f0:	42c80000 	.word	0x42c80000
 80046f4:	20000588 	.word	0x20000588
 80046f8:	40590000 	.word	0x40590000

080046fc <showPWMBfOpt>:

	return PWMdutty;

}

uint8_t showPWMBfOpt (PWM_Handler_t *ptrPwmHandler){
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]

	uint8_t PWMdutty = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	73fb      	strb	r3, [r7, #15]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	791b      	ldrb	r3, [r3, #4]
 800470c:	2b03      	cmp	r3, #3
 800470e:	d847      	bhi.n	80047a0 <showPWMBfOpt+0xa4>
 8004710:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <showPWMBfOpt+0x1c>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	08004729 	.word	0x08004729
 800471c:	08004747 	.word	0x08004747
 8004720:	08004765 	.word	0x08004765
 8004724:	08004783 	.word	0x08004783
	case PWM_CHANNEL_1:{

		PWMdutty = 100-(ptrPwmHandler->ptrTIMx->CCR1)*100 / periodo;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472e:	2264      	movs	r2, #100	; 0x64
 8004730:	fb02 f303 	mul.w	r3, r2, r3
 8004734:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <showPWMBfOpt+0xb4>)
 8004736:	8812      	ldrh	r2, [r2, #0]
 8004738:	fbb3 f3f2 	udiv	r3, r3, r2
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004742:	73fb      	strb	r3, [r7, #15]
		break;
 8004744:	e02d      	b.n	80047a2 <showPWMBfOpt+0xa6>
	}

	case PWM_CHANNEL_2:{
		PWMdutty = 100-(ptrPwmHandler->ptrTIMx->CCR2)*100 / periodo;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	2264      	movs	r2, #100	; 0x64
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <showPWMBfOpt+0xb4>)
 8004754:	8812      	ldrh	r2, [r2, #0]
 8004756:	fbb3 f3f2 	udiv	r3, r3, r2
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004760:	73fb      	strb	r3, [r7, #15]
		break;
 8004762:	e01e      	b.n	80047a2 <showPWMBfOpt+0xa6>
	}

	case PWM_CHANNEL_3:{
		PWMdutty = 100-(ptrPwmHandler->ptrTIMx->CCR3)*100 / periodo;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	2264      	movs	r2, #100	; 0x64
 800476c:	fb02 f303 	mul.w	r3, r2, r3
 8004770:	4a0f      	ldr	r2, [pc, #60]	; (80047b0 <showPWMBfOpt+0xb4>)
 8004772:	8812      	ldrh	r2, [r2, #0]
 8004774:	fbb3 f3f2 	udiv	r3, r3, r2
 8004778:	b2db      	uxtb	r3, r3
 800477a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800477e:	73fb      	strb	r3, [r7, #15]
		break;
 8004780:	e00f      	b.n	80047a2 <showPWMBfOpt+0xa6>
	}

	case PWM_CHANNEL_4:{
		PWMdutty = 100-(ptrPwmHandler->ptrTIMx->CCR4)*100 / periodo;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	2264      	movs	r2, #100	; 0x64
 800478a:	fb02 f303 	mul.w	r3, r2, r3
 800478e:	4a08      	ldr	r2, [pc, #32]	; (80047b0 <showPWMBfOpt+0xb4>)
 8004790:	8812      	ldrh	r2, [r2, #0]
 8004792:	fbb3 f3f2 	udiv	r3, r3, r2
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800479c:	73fb      	strb	r3, [r7, #15]
		break;
 800479e:	e000      	b.n	80047a2 <showPWMBfOpt+0xa6>
	}

	default:{
		break;
 80047a0:	bf00      	nop
	}

	}// fin del switch-case

	return PWMdutty;
 80047a2:	7bfb      	ldrb	r3, [r7, #15]

}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	20000588 	.word	0x20000588

080047b4 <updateDuttyCycleAfOpt>:
	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
    setDuttyCycle(ptrPwmHandler);
}


void updateDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler, float newDutty){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	ed87 0a00 	vstr	s0, [r7]

	// Actualizamos el registro que manipula el dutty
	ptrPwmHandler->config.duttyCicle = newDutty;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	611a      	str	r2, [r3, #16]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
	setDuttyCycleAfOpt(ptrPwmHandler);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff fed4 	bl	8004574 <setDuttyCycleAfOpt>

}
 80047cc:	bf00      	nop
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	791b      	ldrb	r3, [r3, #4]
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d82f      	bhi.n	8004844 <disableOutput+0x70>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <disableOutput+0x18>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	080047fd 	.word	0x080047fd
 80047f0:	0800480f 	.word	0x0800480f
 80047f4:	08004821 	.word	0x08004821
 80047f8:	08004833 	.word	0x08004833
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a1a      	ldr	r2, [r3, #32]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0201 	bic.w	r2, r2, #1
 800480a:	621a      	str	r2, [r3, #32]

			break;
 800480c:	e01b      	b.n	8004846 <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6a1a      	ldr	r2, [r3, #32]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0210 	bic.w	r2, r2, #16
 800481c:	621a      	str	r2, [r3, #32]

			break;
 800481e:	e012      	b.n	8004846 <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6a1a      	ldr	r2, [r3, #32]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800482e:	621a      	str	r2, [r3, #32]

			break;
 8004830:	e009      	b.n	8004846 <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6a1a      	ldr	r2, [r3, #32]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004840:	621a      	str	r2, [r3, #32]

			break;
 8004842:	e000      	b.n	8004846 <disableOutput+0x72>
		}

		default: {
			break;
 8004844:	bf00      	nop
		}
		}

	return RESET;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(void){
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0


	//Nos aseguramos que el PLL esta apagado para asi hacer la configuracion del mismo, ademas selecc
	RCC->CR &= ~(RCC_CR_PLLON);
 8004858:	4b33      	ldr	r3, [pc, #204]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a32      	ldr	r2, [pc, #200]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 800485e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004862:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8004864:	4b30      	ldr	r3, [pc, #192]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 8004866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800486a:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de 100MHz
	PWR->CR |= (0b11 << 14);
 800486c:	4b2f      	ldr	r3, [pc, #188]	; (800492c <RCC_enableMaxFrequencies+0xd8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a2e      	ldr	r2, [pc, #184]	; (800492c <RCC_enableMaxFrequencies+0xd8>)
 8004872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004876:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= 0;
 8004878:	4b2b      	ldr	r3, [pc, #172]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4b2a      	ldr	r3, [pc, #168]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 800487e:	2200      	movs	r2, #0
 8004880:	605a      	str	r2, [r3, #4]

	//Montamos sobre el RCC_PLL config las subdivisiones necesarias para obtener la salida de frecuencia de reloj que deseamos
	RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8004882:	4b29      	ldr	r3, [pc, #164]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	4a28      	ldr	r2, [pc, #160]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 8004888:	f043 0308 	orr.w	r3, r3, #8
 800488c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 800488e:	4b26      	ldr	r3, [pc, #152]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	4a25      	ldr	r2, [pc, #148]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 8004894:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8004898:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800489a:	4b23      	ldr	r3, [pc, #140]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4a22      	ldr	r2, [pc, #136]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 80048a0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80048a4:	6053      	str	r3, [r2, #4]

	//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
	RCC->CR |= RCC_CR_PLLON;
 80048a6:	4b20      	ldr	r3, [pc, #128]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1f      	ldr	r2, [pc, #124]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 80048ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048b0:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 80048b2:	e000      	b.n	80048b6 <RCC_enableMaxFrequencies+0x62>
		__NOP();
 80048b4:	bf00      	nop
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 80048b6:	4b1c      	ldr	r3, [pc, #112]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f8      	beq.n	80048b4 <RCC_enableMaxFrequencies+0x60>
	}

	//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
	RCC->CFGR &= ~(0b111 << 13);
 80048c2:	4b19      	ldr	r3, [pc, #100]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	4a18      	ldr	r2, [pc, #96]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 80048c8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80048cc:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b100 << 10);
 80048ce:	4b16      	ldr	r3, [pc, #88]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	4a15      	ldr	r2, [pc, #84]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 80048d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048d8:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~(0xF << 4);
 80048da:	4b13      	ldr	r3, [pc, #76]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	4a12      	ldr	r2, [pc, #72]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 80048e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048e4:	6093      	str	r3, [r2, #8]

	//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
	FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80048e6:	4b12      	ldr	r3, [pc, #72]	; (8004930 <RCC_enableMaxFrequencies+0xdc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a11      	ldr	r2, [pc, #68]	; (8004930 <RCC_enableMaxFrequencies+0xdc>)
 80048ec:	f023 030f 	bic.w	r3, r3, #15
 80048f0:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 80048f2:	4b0f      	ldr	r3, [pc, #60]	; (8004930 <RCC_enableMaxFrequencies+0xdc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a0e      	ldr	r2, [pc, #56]	; (8004930 <RCC_enableMaxFrequencies+0xdc>)
 80048f8:	f043 0303 	orr.w	r3, r3, #3
 80048fc:	6013      	str	r3, [r2, #0]


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	4a09      	ldr	r2, [pc, #36]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 8004904:	f043 0302 	orr.w	r3, r3, #2
 8004908:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800490a:	e000      	b.n	800490e <RCC_enableMaxFrequencies+0xba>
		__NOP();
 800490c:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800490e:	4b06      	ldr	r3, [pc, #24]	; (8004928 <RCC_enableMaxFrequencies+0xd4>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f8      	beq.n	800490c <RCC_enableMaxFrequencies+0xb8>
	}



}
 800491a:	bf00      	nop
 800491c:	bf00      	nop
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40023800 	.word	0x40023800
 800492c:	40007000 	.word	0x40007000
 8004930:	40023c00 	.word	0x40023c00

08004934 <__NVIC_EnableIRQ>:
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800493e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004942:	2b00      	cmp	r3, #0
 8004944:	db0b      	blt.n	800495e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	f003 021f 	and.w	r2, r3, #31
 800494c:	4907      	ldr	r1, [pc, #28]	; (800496c <__NVIC_EnableIRQ+0x38>)
 800494e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2001      	movs	r0, #1
 8004956:	fa00 f202 	lsl.w	r2, r0, r2
 800495a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	e000e100 	.word	0xe000e100

08004970 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8004970:	b590      	push	{r4, r7, lr}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8004978:	b672      	cpsid	i
}
 800497a:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a8f      	ldr	r2, [pc, #572]	; (8004bc0 <USART_Config+0x250>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d106      	bne.n	8004994 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8004986:	4b8f      	ldr	r3, [pc, #572]	; (8004bc4 <USART_Config+0x254>)
 8004988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498a:	4a8e      	ldr	r2, [pc, #568]	; (8004bc4 <USART_Config+0x254>)
 800498c:	f043 0310 	orr.w	r3, r3, #16
 8004990:	6453      	str	r3, [r2, #68]	; 0x44
 8004992:	e018      	b.n	80049c6 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a8b      	ldr	r2, [pc, #556]	; (8004bc8 <USART_Config+0x258>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d106      	bne.n	80049ac <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800499e:	4b89      	ldr	r3, [pc, #548]	; (8004bc4 <USART_Config+0x254>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	4a88      	ldr	r2, [pc, #544]	; (8004bc4 <USART_Config+0x254>)
 80049a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a8:	6413      	str	r3, [r2, #64]	; 0x40
 80049aa:	e00c      	b.n	80049c6 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a86      	ldr	r2, [pc, #536]	; (8004bcc <USART_Config+0x25c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d106      	bne.n	80049c4 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 80049b6:	4b83      	ldr	r3, [pc, #524]	; (8004bc4 <USART_Config+0x254>)
 80049b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ba:	4a82      	ldr	r2, [pc, #520]	; (8004bc4 <USART_Config+0x254>)
 80049bc:	f043 0320 	orr.w	r3, r3, #32
 80049c0:	6453      	str	r3, [r2, #68]	; 0x44
 80049c2:	e000      	b.n	80049c6 <USART_Config+0x56>
	}
	else{
		__NOP();
 80049c4:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2200      	movs	r2, #0
 80049d4:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	7a5b      	ldrb	r3, [r3, #9]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d025      	beq.n	8004a2a <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	7a5b      	ldrb	r3, [r3, #9]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d110      	bne.n	8004a08 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049f4:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a04:	60da      	str	r2, [r3, #12]
 8004a06:	e018      	b.n	8004a3a <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a16:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a26:	60da      	str	r2, [r3, #12]
 8004a28:	e007      	b.n	8004a3a <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a38:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	7a1b      	ldrb	r3, [r3, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d108      	bne.n	8004a54 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a50:	60da      	str	r2, [r3, #12]
 8004a52:	e007      	b.n	8004a64 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a62:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	7a9b      	ldrb	r3, [r3, #10]
 8004a68:	2b03      	cmp	r3, #3
 8004a6a:	d82f      	bhi.n	8004acc <USART_Config+0x15c>
 8004a6c:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <USART_Config+0x104>)
 8004a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004a85 	.word	0x08004a85
 8004a78:	08004a97 	.word	0x08004a97
 8004a7c:	08004aa9 	.word	0x08004aa9
 8004a80:	08004abb 	.word	0x08004abb
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004a92:	611a      	str	r2, [r3, #16]
		break;
 8004a94:	e023      	b.n	8004ade <USART_Config+0x16e>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004aa4:	611a      	str	r2, [r3, #16]
		break;
 8004aa6:	e01a      	b.n	8004ade <USART_Config+0x16e>
	}
	case USART_STOPBIT_2: {
		// Debemoscargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ab6:	611a      	str	r2, [r3, #16]
		break;
 8004ab8:	e011      	b.n	8004ade <USART_Config+0x16e>
	}
	case USART_STOPBIT_1_5: {
		// Debemoscargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004ac8:	611a      	str	r2, [r3, #16]
		break;
 8004aca:	e008      	b.n	8004ade <USART_Config+0x16e>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004ada:	611a      	str	r2, [r3, #16]
		break;
 8004adc:	bf00      	nop
	}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681c      	ldr	r4, [r3, #0]
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f8cd 	bl	8004c88 <brrCalculus>
 8004aee:	4603      	mov	r3, r0
 8004af0:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	799b      	ldrb	r3, [r3, #6]
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d82e      	bhi.n	8004b58 <USART_Config+0x1e8>
 8004afa:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <USART_Config+0x190>)
 8004afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b00:	08004b11 	.word	0x08004b11
 8004b04:	08004b23 	.word	0x08004b23
 8004b08:	08004b35 	.word	0x08004b35
 8004b0c:	08004b47 	.word	0x08004b47
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0208 	orr.w	r2, r2, #8
 8004b1e:	60da      	str	r2, [r3, #12]
		break;
 8004b20:	e023      	b.n	8004b6a <USART_Config+0x1fa>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0204 	orr.w	r2, r2, #4
 8004b30:	60da      	str	r2, [r3, #12]
		break;
 8004b32:	e01a      	b.n	8004b6a <USART_Config+0x1fa>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 020c 	orr.w	r2, r2, #12
 8004b42:	60da      	str	r2, [r3, #12]
		break;
 8004b44:	e011      	b.n	8004b6a <USART_Config+0x1fa>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 020c 	bic.w	r2, r2, #12
 8004b54:	60da      	str	r2, [r3, #12]
		break;
 8004b56:	e008      	b.n	8004b6a <USART_Config+0x1fa>
	}
	
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 020c 	bic.w	r2, r2, #12
 8004b66:	60da      	str	r2, [r3, #12]
		break;
 8004b68:	bf00      	nop
	}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	799b      	ldrb	r3, [r3, #6]
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d008      	beq.n	8004b84 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	e007      	b.n	8004b94 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b92:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	795b      	ldrb	r3, [r3, #5]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d12d      	bne.n	8004bf8 <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0220 	orr.w	r2, r2, #32
 8004baa:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a03      	ldr	r2, [pc, #12]	; (8004bc0 <USART_Config+0x250>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d10c      	bne.n	8004bd0 <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8004bb6:	2025      	movs	r0, #37	; 0x25
 8004bb8:	f7ff febc 	bl	8004934 <__NVIC_EnableIRQ>
 8004bbc:	e024      	b.n	8004c08 <USART_Config+0x298>
 8004bbe:	bf00      	nop
 8004bc0:	40011000 	.word	0x40011000
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	40004400 	.word	0x40004400
 8004bcc:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a28      	ldr	r2, [pc, #160]	; (8004c78 <USART_Config+0x308>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d103      	bne.n	8004be2 <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8004bda:	2026      	movs	r0, #38	; 0x26
 8004bdc:	f7ff feaa 	bl	8004934 <__NVIC_EnableIRQ>
 8004be0:	e012      	b.n	8004c08 <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a25      	ldr	r2, [pc, #148]	; (8004c7c <USART_Config+0x30c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d103      	bne.n	8004bf4 <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8004bec:	2047      	movs	r0, #71	; 0x47
 8004bee:	f7ff fea1 	bl	8004934 <__NVIC_EnableIRQ>
 8004bf2:	e009      	b.n	8004c08 <USART_Config+0x298>
		}
		else{
				__NOP();
 8004bf4:	bf00      	nop
 8004bf6:	e007      	b.n	8004c08 <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0220 	bic.w	r2, r2, #32
 8004c06:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	791b      	ldrb	r3, [r3, #4]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d124      	bne.n	8004c5a <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c1e:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a16      	ldr	r2, [pc, #88]	; (8004c80 <USART_Config+0x310>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d103      	bne.n	8004c32 <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8004c2a:	2025      	movs	r0, #37	; 0x25
 8004c2c:	f7ff fe82 	bl	8004934 <__NVIC_EnableIRQ>
 8004c30:	e01b      	b.n	8004c6a <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a10      	ldr	r2, [pc, #64]	; (8004c78 <USART_Config+0x308>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d103      	bne.n	8004c44 <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8004c3c:	2026      	movs	r0, #38	; 0x26
 8004c3e:	f7ff fe79 	bl	8004934 <__NVIC_EnableIRQ>
 8004c42:	e012      	b.n	8004c6a <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a0c      	ldr	r2, [pc, #48]	; (8004c7c <USART_Config+0x30c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d103      	bne.n	8004c56 <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8004c4e:	2047      	movs	r0, #71	; 0x47
 8004c50:	f7ff fe70 	bl	8004934 <__NVIC_EnableIRQ>
 8004c54:	e009      	b.n	8004c6a <USART_Config+0x2fa>
		}
		else{
				__NOP();
 8004c56:	bf00      	nop
 8004c58:	e007      	b.n	8004c6a <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c68:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c6a:	b662      	cpsie	i
}
 8004c6c:	bf00      	nop
	}

	__enable_irq();
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd90      	pop	{r4, r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40004400 	.word	0x40004400
 8004c7c:	40011400 	.word	0x40011400
 8004c80:	40011000 	.word	0x40011000
 8004c84:	00000000 	.word	0x00000000

08004c88 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8004c88:	b5b0      	push	{r4, r5, r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	79db      	ldrb	r3, [r3, #7]
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	f200 8217 	bhi.w	80050ca <brrCalculus+0x442>
 8004c9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <brrCalculus+0x1c>)
 8004c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca2:	bf00      	nop
 8004ca4:	08004cb5 	.word	0x08004cb5
 8004ca8:	08004daf 	.word	0x08004daf
 8004cac:	08004ec9 	.word	0x08004ec9
 8004cb0:	08004fd1 	.word	0x08004fd1

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8004cb4:	4980      	ldr	r1, [pc, #512]	; (8004eb8 <brrCalculus+0x230>)
 8004cb6:	a37c      	add	r3, pc, #496	; (adr r3, 8004ea8 <brrCalculus+0x220>)
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	ee17 0a90 	vmov	r0, s15
 8004cce:	f7fb fc53 	bl	8000578 <__aeabi_f2d>
 8004cd2:	4b79      	ldr	r3, [pc, #484]	; (8004eb8 <brrCalculus+0x230>)
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	f7fb fca6 	bl	8000628 <__aeabi_dmul>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4975      	ldr	r1, [pc, #468]	; (8004eb8 <brrCalculus+0x230>)
 8004ce2:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8004ce6:	4b74      	ldr	r3, [pc, #464]	; (8004eb8 <brrCalculus+0x230>)
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	4610      	mov	r0, r2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	f7fb ff4a 	bl	8000b88 <__aeabi_d2iz>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	4b70      	ldr	r3, [pc, #448]	; (8004ebc <brrCalculus+0x234>)
 8004cfa:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004cfc:	4b6e      	ldr	r3, [pc, #440]	; (8004eb8 <brrCalculus+0x230>)
 8004cfe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004d02:	4b6d      	ldr	r3, [pc, #436]	; (8004eb8 <brrCalculus+0x230>)
 8004d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d08:	4610      	mov	r0, r2
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	f7fb ff3c 	bl	8000b88 <__aeabi_d2iz>
 8004d10:	4603      	mov	r3, r0
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fb fc1e 	bl	8000554 <__aeabi_i2d>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	4629      	mov	r1, r5
 8004d20:	f7fb faca 	bl	80002b8 <__aeabi_dsub>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	f7fb ff74 	bl	8000c18 <__aeabi_d2f>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4a63      	ldr	r2, [pc, #396]	; (8004ec0 <brrCalculus+0x238>)
 8004d34:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004d36:	4b62      	ldr	r3, [pc, #392]	; (8004ec0 <brrCalculus+0x238>)
 8004d38:	edd3 7a00 	vldr	s15, [r3]
 8004d3c:	2004      	movs	r0, #4
 8004d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8004d42:	f000 fa6d 	bl	8005220 <roundToNDecimals>
 8004d46:	eef0 7a40 	vmov.f32	s15, s0
 8004d4a:	4b5d      	ldr	r3, [pc, #372]	; (8004ec0 <brrCalculus+0x238>)
 8004d4c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8004d50:	4b5b      	ldr	r3, [pc, #364]	; (8004ec0 <brrCalculus+0x238>)
 8004d52:	edd3 7a00 	vldr	s15, [r3]
 8004d56:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d5e:	4b58      	ldr	r3, [pc, #352]	; (8004ec0 <brrCalculus+0x238>)
 8004d60:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8004d64:	4b56      	ldr	r3, [pc, #344]	; (8004ec0 <brrCalculus+0x238>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fb fc05 	bl	8000578 <__aeabi_f2d>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	ec43 2b10 	vmov	d0, r2, r3
 8004d76:	f004 f899 	bl	8008eac <round>
 8004d7a:	ec53 2b10 	vmov	r2, r3, d0
 8004d7e:	4610      	mov	r0, r2
 8004d80:	4619      	mov	r1, r3
 8004d82:	f7fb ff49 	bl	8000c18 <__aeabi_d2f>
 8004d86:	4603      	mov	r3, r0
 8004d88:	4a4d      	ldr	r2, [pc, #308]	; (8004ec0 <brrCalculus+0x238>)
 8004d8a:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8004d8c:	4b4b      	ldr	r3, [pc, #300]	; (8004ebc <brrCalculus+0x234>)
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	4b4a      	ldr	r3, [pc, #296]	; (8004ec0 <brrCalculus+0x238>)
 8004d96:	edd3 7a00 	vldr	s15, [r3]
 8004d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d9e:	ee17 3a90 	vmov	r3, s15
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	4313      	orrs	r3, r2
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	4b46      	ldr	r3, [pc, #280]	; (8004ec4 <brrCalculus+0x23c>)
 8004daa:	801a      	strh	r2, [r3, #0]


		break;
 8004dac:	e18f      	b.n	80050ce <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 8004dae:	4942      	ldr	r1, [pc, #264]	; (8004eb8 <brrCalculus+0x230>)
 8004db0:	a33f      	add	r3, pc, #252	; (adr r3, 8004eb0 <brrCalculus+0x228>)
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	ee07 3a90 	vmov	s15, r3
 8004dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc4:	ee17 0a90 	vmov	r0, s15
 8004dc8:	f7fb fbd6 	bl	8000578 <__aeabi_f2d>
 8004dcc:	4b3a      	ldr	r3, [pc, #232]	; (8004eb8 <brrCalculus+0x230>)
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	f7fb fc29 	bl	8000628 <__aeabi_dmul>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4937      	ldr	r1, [pc, #220]	; (8004eb8 <brrCalculus+0x230>)
 8004ddc:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8004de0:	4b35      	ldr	r3, [pc, #212]	; (8004eb8 <brrCalculus+0x230>)
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	4610      	mov	r0, r2
 8004de8:	4619      	mov	r1, r3
 8004dea:	f7fb fecd 	bl	8000b88 <__aeabi_d2iz>
 8004dee:	4603      	mov	r3, r0
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	4b32      	ldr	r3, [pc, #200]	; (8004ebc <brrCalculus+0x234>)
 8004df4:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004df6:	4b30      	ldr	r3, [pc, #192]	; (8004eb8 <brrCalculus+0x230>)
 8004df8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004dfc:	4b2e      	ldr	r3, [pc, #184]	; (8004eb8 <brrCalculus+0x230>)
 8004dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e02:	4610      	mov	r0, r2
 8004e04:	4619      	mov	r1, r3
 8004e06:	f7fb febf 	bl	8000b88 <__aeabi_d2iz>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fb fba1 	bl	8000554 <__aeabi_i2d>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4620      	mov	r0, r4
 8004e18:	4629      	mov	r1, r5
 8004e1a:	f7fb fa4d 	bl	80002b8 <__aeabi_dsub>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4610      	mov	r0, r2
 8004e24:	4619      	mov	r1, r3
 8004e26:	f7fb fef7 	bl	8000c18 <__aeabi_d2f>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4a24      	ldr	r2, [pc, #144]	; (8004ec0 <brrCalculus+0x238>)
 8004e2e:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004e30:	4b23      	ldr	r3, [pc, #140]	; (8004ec0 <brrCalculus+0x238>)
 8004e32:	edd3 7a00 	vldr	s15, [r3]
 8004e36:	2004      	movs	r0, #4
 8004e38:	eeb0 0a67 	vmov.f32	s0, s15
 8004e3c:	f000 f9f0 	bl	8005220 <roundToNDecimals>
 8004e40:	eef0 7a40 	vmov.f32	s15, s0
 8004e44:	4b1e      	ldr	r3, [pc, #120]	; (8004ec0 <brrCalculus+0x238>)
 8004e46:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8004e4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ec0 <brrCalculus+0x238>)
 8004e4c:	edd3 7a00 	vldr	s15, [r3]
 8004e50:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e58:	4b19      	ldr	r3, [pc, #100]	; (8004ec0 <brrCalculus+0x238>)
 8004e5a:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8004e5e:	4b18      	ldr	r3, [pc, #96]	; (8004ec0 <brrCalculus+0x238>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fb fb88 	bl	8000578 <__aeabi_f2d>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	ec43 2b10 	vmov	d0, r2, r3
 8004e70:	f004 f81c 	bl	8008eac <round>
 8004e74:	ec53 2b10 	vmov	r2, r3, d0
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	f7fb fecc 	bl	8000c18 <__aeabi_d2f>
 8004e80:	4603      	mov	r3, r0
 8004e82:	4a0f      	ldr	r2, [pc, #60]	; (8004ec0 <brrCalculus+0x238>)
 8004e84:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8004e86:	4b0d      	ldr	r3, [pc, #52]	; (8004ebc <brrCalculus+0x234>)
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <brrCalculus+0x238>)
 8004e90:	edd3 7a00 	vldr	s15, [r3]
 8004e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e98:	ee17 3a90 	vmov	r3, s15
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <brrCalculus+0x23c>)
 8004ea4:	801a      	strh	r2, [r3, #0]


		break;
 8004ea6:	e112      	b.n	80050ce <brrCalculus+0x446>
 8004ea8:	b4e81b4f 	.word	0xb4e81b4f
 8004eac:	3edb4e81 	.word	0x3edb4e81
 8004eb0:	b4e81b4f 	.word	0xb4e81b4f
 8004eb4:	3ecb4e81 	.word	0x3ecb4e81
 8004eb8:	20000598 	.word	0x20000598
 8004ebc:	2000058c 	.word	0x2000058c
 8004ec0:	20000590 	.word	0x20000590
 8004ec4:	2000058a 	.word	0x2000058a
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8004ec8:	4989      	ldr	r1, [pc, #548]	; (80050f0 <brrCalculus+0x468>)
 8004eca:	a385      	add	r3, pc, #532	; (adr r3, 80050e0 <brrCalculus+0x458>)
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ede:	ee17 0a90 	vmov	r0, s15
 8004ee2:	f7fb fb49 	bl	8000578 <__aeabi_f2d>
 8004ee6:	4b82      	ldr	r3, [pc, #520]	; (80050f0 <brrCalculus+0x468>)
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f7fb fb9c 	bl	8000628 <__aeabi_dmul>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	497e      	ldr	r1, [pc, #504]	; (80050f0 <brrCalculus+0x468>)
 8004ef6:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8004efa:	4b7d      	ldr	r3, [pc, #500]	; (80050f0 <brrCalculus+0x468>)
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	4610      	mov	r0, r2
 8004f02:	4619      	mov	r1, r3
 8004f04:	f7fb fe40 	bl	8000b88 <__aeabi_d2iz>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	4b79      	ldr	r3, [pc, #484]	; (80050f4 <brrCalculus+0x46c>)
 8004f0e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004f10:	4b77      	ldr	r3, [pc, #476]	; (80050f0 <brrCalculus+0x468>)
 8004f12:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004f16:	4b76      	ldr	r3, [pc, #472]	; (80050f0 <brrCalculus+0x468>)
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	f7fb fe32 	bl	8000b88 <__aeabi_d2iz>
 8004f24:	4603      	mov	r3, r0
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fb fb14 	bl	8000554 <__aeabi_i2d>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4620      	mov	r0, r4
 8004f32:	4629      	mov	r1, r5
 8004f34:	f7fb f9c0 	bl	80002b8 <__aeabi_dsub>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	f7fb fe6a 	bl	8000c18 <__aeabi_d2f>
 8004f44:	4603      	mov	r3, r0
 8004f46:	4a6c      	ldr	r2, [pc, #432]	; (80050f8 <brrCalculus+0x470>)
 8004f48:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004f4a:	4b6b      	ldr	r3, [pc, #428]	; (80050f8 <brrCalculus+0x470>)
 8004f4c:	edd3 7a00 	vldr	s15, [r3]
 8004f50:	2004      	movs	r0, #4
 8004f52:	eeb0 0a67 	vmov.f32	s0, s15
 8004f56:	f000 f963 	bl	8005220 <roundToNDecimals>
 8004f5a:	eef0 7a40 	vmov.f32	s15, s0
 8004f5e:	4b66      	ldr	r3, [pc, #408]	; (80050f8 <brrCalculus+0x470>)
 8004f60:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8004f64:	4b64      	ldr	r3, [pc, #400]	; (80050f8 <brrCalculus+0x470>)
 8004f66:	edd3 7a00 	vldr	s15, [r3]
 8004f6a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f72:	4b61      	ldr	r3, [pc, #388]	; (80050f8 <brrCalculus+0x470>)
 8004f74:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8004f78:	4b5f      	ldr	r3, [pc, #380]	; (80050f8 <brrCalculus+0x470>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fb fafb 	bl	8000578 <__aeabi_f2d>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	ec43 2b10 	vmov	d0, r2, r3
 8004f8a:	f003 ff8f 	bl	8008eac <round>
 8004f8e:	ec51 0b10 	vmov	r0, r1, d0
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	4b59      	ldr	r3, [pc, #356]	; (80050fc <brrCalculus+0x474>)
 8004f98:	f7fb f990 	bl	80002bc <__adddf3>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	f7fb fe38 	bl	8000c18 <__aeabi_d2f>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	4a53      	ldr	r2, [pc, #332]	; (80050f8 <brrCalculus+0x470>)
 8004fac:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8004fae:	4b51      	ldr	r3, [pc, #324]	; (80050f4 <brrCalculus+0x46c>)
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	4b50      	ldr	r3, [pc, #320]	; (80050f8 <brrCalculus+0x470>)
 8004fb8:	edd3 7a00 	vldr	s15, [r3]
 8004fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc0:	ee17 3a90 	vmov	r3, s15
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	4b4d      	ldr	r3, [pc, #308]	; (8005100 <brrCalculus+0x478>)
 8004fcc:	801a      	strh	r2, [r3, #0]


		break;
 8004fce:	e07e      	b.n	80050ce <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8004fd0:	4947      	ldr	r1, [pc, #284]	; (80050f0 <brrCalculus+0x468>)
 8004fd2:	a345      	add	r3, pc, #276	; (adr r3, 80050e8 <brrCalculus+0x460>)
 8004fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd8:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	ee17 0a90 	vmov	r0, s15
 8004fea:	f7fb fac5 	bl	8000578 <__aeabi_f2d>
 8004fee:	4b40      	ldr	r3, [pc, #256]	; (80050f0 <brrCalculus+0x468>)
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	f7fb fb18 	bl	8000628 <__aeabi_dmul>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	493c      	ldr	r1, [pc, #240]	; (80050f0 <brrCalculus+0x468>)
 8004ffe:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8005002:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <brrCalculus+0x468>)
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	4610      	mov	r0, r2
 800500a:	4619      	mov	r1, r3
 800500c:	f7fb fdbc 	bl	8000b88 <__aeabi_d2iz>
 8005010:	4603      	mov	r3, r0
 8005012:	b29a      	uxth	r2, r3
 8005014:	4b37      	ldr	r3, [pc, #220]	; (80050f4 <brrCalculus+0x46c>)
 8005016:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8005018:	4b35      	ldr	r3, [pc, #212]	; (80050f0 <brrCalculus+0x468>)
 800501a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800501e:	4b34      	ldr	r3, [pc, #208]	; (80050f0 <brrCalculus+0x468>)
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	4610      	mov	r0, r2
 8005026:	4619      	mov	r1, r3
 8005028:	f7fb fdae 	bl	8000b88 <__aeabi_d2iz>
 800502c:	4603      	mov	r3, r0
 800502e:	4618      	mov	r0, r3
 8005030:	f7fb fa90 	bl	8000554 <__aeabi_i2d>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4620      	mov	r0, r4
 800503a:	4629      	mov	r1, r5
 800503c:	f7fb f93c 	bl	80002b8 <__aeabi_dsub>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4610      	mov	r0, r2
 8005046:	4619      	mov	r1, r3
 8005048:	f7fb fde6 	bl	8000c18 <__aeabi_d2f>
 800504c:	4603      	mov	r3, r0
 800504e:	4a2a      	ldr	r2, [pc, #168]	; (80050f8 <brrCalculus+0x470>)
 8005050:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8005052:	4b29      	ldr	r3, [pc, #164]	; (80050f8 <brrCalculus+0x470>)
 8005054:	edd3 7a00 	vldr	s15, [r3]
 8005058:	2004      	movs	r0, #4
 800505a:	eeb0 0a67 	vmov.f32	s0, s15
 800505e:	f000 f8df 	bl	8005220 <roundToNDecimals>
 8005062:	eef0 7a40 	vmov.f32	s15, s0
 8005066:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <brrCalculus+0x470>)
 8005068:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800506c:	4b22      	ldr	r3, [pc, #136]	; (80050f8 <brrCalculus+0x470>)
 800506e:	edd3 7a00 	vldr	s15, [r3]
 8005072:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8005076:	ee67 7a87 	vmul.f32	s15, s15, s14
 800507a:	4b1f      	ldr	r3, [pc, #124]	; (80050f8 <brrCalculus+0x470>)
 800507c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8005080:	4b1d      	ldr	r3, [pc, #116]	; (80050f8 <brrCalculus+0x470>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f7fb fa77 	bl	8000578 <__aeabi_f2d>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	ec43 2b10 	vmov	d0, r2, r3
 8005092:	f003 ff0b 	bl	8008eac <round>
 8005096:	ec53 2b10 	vmov	r2, r3, d0
 800509a:	4610      	mov	r0, r2
 800509c:	4619      	mov	r1, r3
 800509e:	f7fb fdbb 	bl	8000c18 <__aeabi_d2f>
 80050a2:	4603      	mov	r3, r0
 80050a4:	4a14      	ldr	r2, [pc, #80]	; (80050f8 <brrCalculus+0x470>)
 80050a6:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80050a8:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <brrCalculus+0x46c>)
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <brrCalculus+0x470>)
 80050b2:	edd3 7a00 	vldr	s15, [r3]
 80050b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ba:	ee17 3a90 	vmov	r3, s15
 80050be:	b29b      	uxth	r3, r3
 80050c0:	4313      	orrs	r3, r2
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <brrCalculus+0x478>)
 80050c6:	801a      	strh	r2, [r3, #0]


		break;
 80050c8:	e001      	b.n	80050ce <brrCalculus+0x446>
	}
	default:{

		__NOP();
 80050ca:	bf00      	nop
		break;
 80050cc:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 80050ce:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <brrCalculus+0x478>)
 80050d0:	881b      	ldrh	r3, [r3, #0]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bdb0      	pop	{r4, r5, r7, pc}
 80050da:	bf00      	nop
 80050dc:	f3af 8000 	nop.w
 80050e0:	789abcdf 	.word	0x789abcdf
 80050e4:	3ec23456 	.word	0x3ec23456
 80050e8:	789abcdf 	.word	0x789abcdf
 80050ec:	3ea23456 	.word	0x3ea23456
 80050f0:	20000598 	.word	0x20000598
 80050f4:	2000058c 	.word	0x2000058c
 80050f8:	20000590 	.word	0x20000590
 80050fc:	3ff00000 	.word	0x3ff00000
 8005100:	2000058a 	.word	0x2000058a

08005104 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800510e:	e000      	b.n	8005112 <writeChar+0xe>
		__NOP();
 8005110:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f7      	beq.n	8005110 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	605a      	str	r2, [r3, #4]

}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, char* msgToSend){
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 800513e:	e008      	b.n	8005152 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7ff ffdc 	bl	8005104 <writeChar>
		msgToSend ++ ;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	3301      	adds	r3, #1
 8005150:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f2      	bne.n	8005140 <writeMsg+0xc>
	}
}
 800515a:	bf00      	nop
 800515c:	bf00      	nop
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
	__NOP();
 8005168:	bf00      	nop
}
 800516a:	bf00      	nop
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
	__NOP();
 8005178:	bf00      	nop
}
 800517a:	bf00      	nop
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
	return auxRxData;
 8005188:	4b03      	ldr	r3, [pc, #12]	; (8005198 <getRxData+0x14>)
 800518a:	781b      	ldrb	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	200005a0 	.word	0x200005a0

0800519c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <USART2_IRQHandler+0x24>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d006      	beq.n	80051ba <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 80051ac:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <USART2_IRQHandler+0x24>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	4b04      	ldr	r3, [pc, #16]	; (80051c4 <USART2_IRQHandler+0x28>)
 80051b4:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 80051b6:	f7fc fc43 	bl	8001a40 <usart2Rx_Callback>
	}

}
 80051ba:	bf00      	nop
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40004400 	.word	0x40004400
 80051c4:	200005a0 	.word	0x200005a0

080051c8 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 80051cc:	4b07      	ldr	r3, [pc, #28]	; (80051ec <USART1_IRQHandler+0x24>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d006      	beq.n	80051e6 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 80051d8:	4b04      	ldr	r3, [pc, #16]	; (80051ec <USART1_IRQHandler+0x24>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	4b04      	ldr	r3, [pc, #16]	; (80051f0 <USART1_IRQHandler+0x28>)
 80051e0:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 80051e2:	f7ff ffbf 	bl	8005164 <usart1Rx_Callback>
	}
}
 80051e6:	bf00      	nop
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40011000 	.word	0x40011000
 80051f0:	200005a0 	.word	0x200005a0

080051f4 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 80051f8:	4b07      	ldr	r3, [pc, #28]	; (8005218 <USART6_IRQHandler+0x24>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b00      	cmp	r3, #0
 8005202:	d006      	beq.n	8005212 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8005204:	4b04      	ldr	r3, [pc, #16]	; (8005218 <USART6_IRQHandler+0x24>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	b2da      	uxtb	r2, r3
 800520a:	4b04      	ldr	r3, [pc, #16]	; (800521c <USART6_IRQHandler+0x28>)
 800520c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800520e:	f7ff ffb1 	bl	8005174 <usart6Rx_Callback>
	}

}
 8005212:	bf00      	nop
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	40011400 	.word	0x40011400
 800521c:	200005a0 	.word	0x200005a0

08005220 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	ed87 0a01 	vstr	s0, [r7, #4]
 800522a:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 800522c:	6838      	ldr	r0, [r7, #0]
 800522e:	f7fb f991 	bl	8000554 <__aeabi_i2d>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	ec43 2b11 	vmov	d1, r2, r3
 800523a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 80052b8 <roundToNDecimals+0x98>
 800523e:	f003 fe7b 	bl	8008f38 <pow>
 8005242:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fb f996 	bl	8000578 <__aeabi_f2d>
 800524c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005250:	f7fb f9ea 	bl	8000628 <__aeabi_dmul>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4610      	mov	r0, r2
 800525a:	4619      	mov	r1, r3
 800525c:	f7fb fcdc 	bl	8000c18 <__aeabi_d2f>
 8005260:	4603      	mov	r3, r0
 8005262:	607b      	str	r3, [r7, #4]

    number = round(number);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7fb f987 	bl	8000578 <__aeabi_f2d>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	ec43 2b10 	vmov	d0, r2, r3
 8005272:	f003 fe1b 	bl	8008eac <round>
 8005276:	ec53 2b10 	vmov	r2, r3, d0
 800527a:	4610      	mov	r0, r2
 800527c:	4619      	mov	r1, r3
 800527e:	f7fb fccb 	bl	8000c18 <__aeabi_d2f>
 8005282:	4603      	mov	r3, r0
 8005284:	607b      	str	r3, [r7, #4]

    number /= factor;
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fb f976 	bl	8000578 <__aeabi_f2d>
 800528c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005290:	f7fb faf4 	bl	800087c <__aeabi_ddiv>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4610      	mov	r0, r2
 800529a:	4619      	mov	r1, r3
 800529c:	f7fb fcbc 	bl	8000c18 <__aeabi_d2f>
 80052a0:	4603      	mov	r3, r0
 80052a2:	607b      	str	r3, [r7, #4]

    return number;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	ee07 3a90 	vmov	s15, r3
}
 80052aa:	eeb0 0a67 	vmov.f32	s0, s15
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	f3af 8000 	nop.w
 80052b8:	00000000 	.word	0x00000000
 80052bc:	40240000 	.word	0x40240000

080052c0 <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a8b      	ldr	r2, [pc, #556]	; (80054fc <i2c_config+0x23c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d106      	bne.n	80052e0 <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 80052d2:	4b8b      	ldr	r3, [pc, #556]	; (8005500 <i2c_config+0x240>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	4a8a      	ldr	r2, [pc, #552]	; (8005500 <i2c_config+0x240>)
 80052d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052dc:	6413      	str	r3, [r2, #64]	; 0x40
 80052de:	e016      	b.n	800530e <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a87      	ldr	r2, [pc, #540]	; (8005504 <i2c_config+0x244>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d106      	bne.n	80052f8 <i2c_config+0x38>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C2EN;
 80052ea:	4b85      	ldr	r3, [pc, #532]	; (8005500 <i2c_config+0x240>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	4a84      	ldr	r2, [pc, #528]	; (8005500 <i2c_config+0x240>)
 80052f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052f4:	6413      	str	r3, [r2, #64]	; 0x40
 80052f6:	e00a      	b.n	800530e <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a82      	ldr	r2, [pc, #520]	; (8005508 <i2c_config+0x248>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d105      	bne.n	800530e <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 8005302:	4b7f      	ldr	r3, [pc, #508]	; (8005500 <i2c_config+0x240>)
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	4a7e      	ldr	r2, [pc, #504]	; (8005500 <i2c_config+0x240>)
 8005308:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800530c:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800531c:	601a      	str	r2, [r3, #0]

	//Esperamos un rato
	for(uint32_t i = 0 ; i < 16 * pow(10,6); i++){
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	e003      	b.n	800532c <i2c_config+0x6c>
		__NOP();
 8005324:	bf00      	nop
	for(uint32_t i = 0 ; i < 16 * pow(10,6); i++){
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3301      	adds	r3, #1
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4a77      	ldr	r2, [pc, #476]	; (800550c <i2c_config+0x24c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d3f7      	bcc.n	8005324 <i2c_config+0x64>
	}


	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005342:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005352:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	79db      	ldrb	r3, [r3, #7]
 8005358:	2b10      	cmp	r3, #16
 800535a:	d108      	bne.n	800536e <i2c_config+0xae>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0210 	orr.w	r2, r2, #16
 800536a:	605a      	str	r2, [r3, #4]
 800536c:	e00b      	b.n	8005386 <i2c_config+0xc6>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	79db      	ldrb	r3, [r3, #7]
 8005372:	2b32      	cmp	r3, #50	; 0x32
 8005374:	d107      	bne.n	8005386 <i2c_config+0xc6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8005384:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */
	//Nos aseguramos de que el periferico está desactivado
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(0b1);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0201 	bic.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2200      	movs	r2, #0
 800539c:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2200      	movs	r2, #0
 80053a4:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	795b      	ldrb	r3, [r3, #5]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d15c      	bne.n	8005468 <i2c_config+0x1a8>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053bc:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	79db      	ldrb	r3, [r3, #7]
 80053c2:	2b32      	cmp	r3, #50	; 0x32
 80053c4:	d03f      	beq.n	8005446 <i2c_config+0x186>
 80053c6:	2b32      	cmp	r3, #50	; 0x32
 80053c8:	f300 80b3 	bgt.w	8005532 <i2c_config+0x272>
 80053cc:	2b14      	cmp	r3, #20
 80053ce:	d029      	beq.n	8005424 <i2c_config+0x164>
 80053d0:	2b14      	cmp	r3, #20
 80053d2:	f300 80ae 	bgt.w	8005532 <i2c_config+0x272>
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d002      	beq.n	80053e0 <i2c_config+0x120>
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d011      	beq.n	8005402 <i2c_config+0x142>


				break;
			}default:{

				break;
 80053de:	e0a8      	b.n	8005532 <i2c_config+0x272>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69da      	ldr	r2, [r3, #28]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0214 	orr.w	r2, r2, #20
 80053ee:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0205 	orr.w	r2, r2, #5
 80053fe:	621a      	str	r2, [r3, #32]
				break;
 8005400:	e09a      	b.n	8005538 <i2c_config+0x278>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8005410:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6a1a      	ldr	r2, [r3, #32]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f042 0211 	orr.w	r2, r2, #17
 8005420:	621a      	str	r2, [r3, #32]
				break;
 8005422:	e089      	b.n	8005538 <i2c_config+0x278>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_20MHz << I2C_CCR_CCR_Pos);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	69da      	ldr	r2, [r3, #28]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8005432:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_20MHz;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6a1a      	ldr	r2, [r3, #32]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0215 	orr.w	r2, r2, #21
 8005442:	621a      	str	r2, [r3, #32]
				break;
 8005444:	e078      	b.n	8005538 <i2c_config+0x278>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 8005454:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6a1a      	ldr	r2, [r3, #32]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 8005464:	621a      	str	r2, [r3, #32]
				break;
 8005466:	e067      	b.n	8005538 <i2c_config+0x278>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69da      	ldr	r2, [r3, #28]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005476:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	79db      	ldrb	r3, [r3, #7]
 800547c:	2b32      	cmp	r3, #50	; 0x32
 800547e:	d047      	beq.n	8005510 <i2c_config+0x250>
 8005480:	2b32      	cmp	r3, #50	; 0x32
 8005482:	dc58      	bgt.n	8005536 <i2c_config+0x276>
 8005484:	2b14      	cmp	r3, #20
 8005486:	d028      	beq.n	80054da <i2c_config+0x21a>
 8005488:	2b14      	cmp	r3, #20
 800548a:	dc54      	bgt.n	8005536 <i2c_config+0x276>
 800548c:	2b04      	cmp	r3, #4
 800548e:	d002      	beq.n	8005496 <i2c_config+0x1d6>
 8005490:	2b10      	cmp	r3, #16
 8005492:	d011      	beq.n	80054b8 <i2c_config+0x1f8>


				break;
			}default:{

				break;
 8005494:	e04f      	b.n	8005536 <i2c_config+0x276>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0203 	orr.w	r2, r2, #3
 80054a4:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6a1a      	ldr	r2, [r3, #32]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0202 	orr.w	r2, r2, #2
 80054b4:	621a      	str	r2, [r3, #32]
				break;
 80054b6:	e03f      	b.n	8005538 <i2c_config+0x278>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69da      	ldr	r2, [r3, #28]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 020d 	orr.w	r2, r2, #13
 80054c6:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6a1a      	ldr	r2, [r3, #32]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0206 	orr.w	r2, r2, #6
 80054d6:	621a      	str	r2, [r3, #32]
				break;
 80054d8:	e02e      	b.n	8005538 <i2c_config+0x278>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_20MHz << I2C_CCR_CCR_Pos);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f042 0211 	orr.w	r2, r2, #17
 80054e8:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_20MHz;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6a1a      	ldr	r2, [r3, #32]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0207 	orr.w	r2, r2, #7
 80054f8:	621a      	str	r2, [r3, #32]
				break;
 80054fa:	e01d      	b.n	8005538 <i2c_config+0x278>
 80054fc:	40005400 	.word	0x40005400
 8005500:	40023800 	.word	0x40023800
 8005504:	40005800 	.word	0x40005800
 8005508:	40005c00 	.word	0x40005c00
 800550c:	00f42400 	.word	0x00f42400
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69da      	ldr	r2, [r3, #28]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800551e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6a1a      	ldr	r2, [r3, #32]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0210 	orr.w	r2, r2, #16
 800552e:	621a      	str	r2, [r3, #32]
				break;
 8005530:	e002      	b.n	8005538 <i2c_config+0x278>
				break;
 8005532:	bf00      	nop
 8005534:	e000      	b.n	8005538 <i2c_config+0x278>
				break;
 8005536:	bf00      	nop
		}

	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]

}
 8005548:	bf00      	nop
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800556a:	601a      	str	r2, [r3, #0]
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8005580:	e000      	b.n	8005584 <i2c_startTransaction+0xc>
		__NOP();
 8005582:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f7      	bne.n	8005582 <i2c_startTransaction+0xa>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055a0:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80055a2:	e000      	b.n	80055a6 <i2c_startTransaction+0x2e>
		__NOP();
 80055a4:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f7      	beq.n	80055a4 <i2c_startTransaction+0x2c>
	}
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055d8:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80055da:	e000      	b.n	80055de <i2c_reStartTransaction+0x1c>
		__NOP();
 80055dc:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0f7      	beq.n	80055dc <i2c_reStartTransaction+0x1a>
	}
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005610:	601a      	str	r2, [r3, #0]
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	460b      	mov	r3, r1
 8005628:	70fb      	strb	r3, [r7, #3]
 800562a:	4613      	mov	r3, r2
 800562c:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 800562e:	2300      	movs	r3, #0
 8005630:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	005a      	lsls	r2, r3, #1
 8005636:	78bb      	ldrb	r3, [r7, #2]
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8005640:	e000      	b.n	8005644 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8005642:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0f7      	beq.n	8005642 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	73fb      	strb	r3, [r7, #15]

}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	460b      	mov	r3, r1
 8005678:	70fb      	strb	r3, [r7, #3]
	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	78fa      	ldrb	r2, [r7, #3]
 8005680:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8005682:	e000      	b.n	8005686 <i2c_sendMemoryAddress+0x18>
		__NOP();
 8005684:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0f7      	beq.n	8005684 <i2c_sendMemoryAddress+0x16>
	}
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	460b      	mov	r3, r1
 80056ac:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	78fa      	ldrb	r2, [r7, #3]
 80056b4:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80056b6:	e000      	b.n	80056ba <i2c_sendDataByte+0x18>
		__NOP();
 80056b8:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0f7      	beq.n	80056b8 <i2c_sendDataByte+0x16>
	}
}
 80056c8:	bf00      	nop
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80056de:	e000      	b.n	80056e2 <i2c_readDataByte+0xc>
		__NOP();
 80056e0:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f7      	beq.n	80056e0 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	799b      	ldrb	r3, [r3, #6]
}
 8005700:	4618      	mov	r0, r3
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <__errno>:
 800570c:	4b01      	ldr	r3, [pc, #4]	; (8005714 <__errno+0x8>)
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	20000010 	.word	0x20000010

08005718 <__libc_init_array>:
 8005718:	b570      	push	{r4, r5, r6, lr}
 800571a:	4d0d      	ldr	r5, [pc, #52]	; (8005750 <__libc_init_array+0x38>)
 800571c:	4c0d      	ldr	r4, [pc, #52]	; (8005754 <__libc_init_array+0x3c>)
 800571e:	1b64      	subs	r4, r4, r5
 8005720:	10a4      	asrs	r4, r4, #2
 8005722:	2600      	movs	r6, #0
 8005724:	42a6      	cmp	r6, r4
 8005726:	d109      	bne.n	800573c <__libc_init_array+0x24>
 8005728:	4d0b      	ldr	r5, [pc, #44]	; (8005758 <__libc_init_array+0x40>)
 800572a:	4c0c      	ldr	r4, [pc, #48]	; (800575c <__libc_init_array+0x44>)
 800572c:	f004 fb2c 	bl	8009d88 <_init>
 8005730:	1b64      	subs	r4, r4, r5
 8005732:	10a4      	asrs	r4, r4, #2
 8005734:	2600      	movs	r6, #0
 8005736:	42a6      	cmp	r6, r4
 8005738:	d105      	bne.n	8005746 <__libc_init_array+0x2e>
 800573a:	bd70      	pop	{r4, r5, r6, pc}
 800573c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005740:	4798      	blx	r3
 8005742:	3601      	adds	r6, #1
 8005744:	e7ee      	b.n	8005724 <__libc_init_array+0xc>
 8005746:	f855 3b04 	ldr.w	r3, [r5], #4
 800574a:	4798      	blx	r3
 800574c:	3601      	adds	r6, #1
 800574e:	e7f2      	b.n	8005736 <__libc_init_array+0x1e>
 8005750:	0800a328 	.word	0x0800a328
 8005754:	0800a328 	.word	0x0800a328
 8005758:	0800a328 	.word	0x0800a328
 800575c:	0800a32c 	.word	0x0800a32c

08005760 <malloc>:
 8005760:	4b02      	ldr	r3, [pc, #8]	; (800576c <malloc+0xc>)
 8005762:	4601      	mov	r1, r0
 8005764:	6818      	ldr	r0, [r3, #0]
 8005766:	f000 b877 	b.w	8005858 <_malloc_r>
 800576a:	bf00      	nop
 800576c:	20000010 	.word	0x20000010

08005770 <memset>:
 8005770:	4402      	add	r2, r0
 8005772:	4603      	mov	r3, r0
 8005774:	4293      	cmp	r3, r2
 8005776:	d100      	bne.n	800577a <memset+0xa>
 8005778:	4770      	bx	lr
 800577a:	f803 1b01 	strb.w	r1, [r3], #1
 800577e:	e7f9      	b.n	8005774 <memset+0x4>

08005780 <_free_r>:
 8005780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005782:	2900      	cmp	r1, #0
 8005784:	d044      	beq.n	8005810 <_free_r+0x90>
 8005786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800578a:	9001      	str	r0, [sp, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f1a1 0404 	sub.w	r4, r1, #4
 8005792:	bfb8      	it	lt
 8005794:	18e4      	addlt	r4, r4, r3
 8005796:	f001 fca1 	bl	80070dc <__malloc_lock>
 800579a:	4a1e      	ldr	r2, [pc, #120]	; (8005814 <_free_r+0x94>)
 800579c:	9801      	ldr	r0, [sp, #4]
 800579e:	6813      	ldr	r3, [r2, #0]
 80057a0:	b933      	cbnz	r3, 80057b0 <_free_r+0x30>
 80057a2:	6063      	str	r3, [r4, #4]
 80057a4:	6014      	str	r4, [r2, #0]
 80057a6:	b003      	add	sp, #12
 80057a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057ac:	f001 bc9c 	b.w	80070e8 <__malloc_unlock>
 80057b0:	42a3      	cmp	r3, r4
 80057b2:	d908      	bls.n	80057c6 <_free_r+0x46>
 80057b4:	6825      	ldr	r5, [r4, #0]
 80057b6:	1961      	adds	r1, r4, r5
 80057b8:	428b      	cmp	r3, r1
 80057ba:	bf01      	itttt	eq
 80057bc:	6819      	ldreq	r1, [r3, #0]
 80057be:	685b      	ldreq	r3, [r3, #4]
 80057c0:	1949      	addeq	r1, r1, r5
 80057c2:	6021      	streq	r1, [r4, #0]
 80057c4:	e7ed      	b.n	80057a2 <_free_r+0x22>
 80057c6:	461a      	mov	r2, r3
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	b10b      	cbz	r3, 80057d0 <_free_r+0x50>
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	d9fa      	bls.n	80057c6 <_free_r+0x46>
 80057d0:	6811      	ldr	r1, [r2, #0]
 80057d2:	1855      	adds	r5, r2, r1
 80057d4:	42a5      	cmp	r5, r4
 80057d6:	d10b      	bne.n	80057f0 <_free_r+0x70>
 80057d8:	6824      	ldr	r4, [r4, #0]
 80057da:	4421      	add	r1, r4
 80057dc:	1854      	adds	r4, r2, r1
 80057de:	42a3      	cmp	r3, r4
 80057e0:	6011      	str	r1, [r2, #0]
 80057e2:	d1e0      	bne.n	80057a6 <_free_r+0x26>
 80057e4:	681c      	ldr	r4, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	6053      	str	r3, [r2, #4]
 80057ea:	4421      	add	r1, r4
 80057ec:	6011      	str	r1, [r2, #0]
 80057ee:	e7da      	b.n	80057a6 <_free_r+0x26>
 80057f0:	d902      	bls.n	80057f8 <_free_r+0x78>
 80057f2:	230c      	movs	r3, #12
 80057f4:	6003      	str	r3, [r0, #0]
 80057f6:	e7d6      	b.n	80057a6 <_free_r+0x26>
 80057f8:	6825      	ldr	r5, [r4, #0]
 80057fa:	1961      	adds	r1, r4, r5
 80057fc:	428b      	cmp	r3, r1
 80057fe:	bf04      	itt	eq
 8005800:	6819      	ldreq	r1, [r3, #0]
 8005802:	685b      	ldreq	r3, [r3, #4]
 8005804:	6063      	str	r3, [r4, #4]
 8005806:	bf04      	itt	eq
 8005808:	1949      	addeq	r1, r1, r5
 800580a:	6021      	streq	r1, [r4, #0]
 800580c:	6054      	str	r4, [r2, #4]
 800580e:	e7ca      	b.n	80057a6 <_free_r+0x26>
 8005810:	b003      	add	sp, #12
 8005812:	bd30      	pop	{r4, r5, pc}
 8005814:	200005a4 	.word	0x200005a4

08005818 <sbrk_aligned>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	4e0e      	ldr	r6, [pc, #56]	; (8005854 <sbrk_aligned+0x3c>)
 800581c:	460c      	mov	r4, r1
 800581e:	6831      	ldr	r1, [r6, #0]
 8005820:	4605      	mov	r5, r0
 8005822:	b911      	cbnz	r1, 800582a <sbrk_aligned+0x12>
 8005824:	f000 fcf6 	bl	8006214 <_sbrk_r>
 8005828:	6030      	str	r0, [r6, #0]
 800582a:	4621      	mov	r1, r4
 800582c:	4628      	mov	r0, r5
 800582e:	f000 fcf1 	bl	8006214 <_sbrk_r>
 8005832:	1c43      	adds	r3, r0, #1
 8005834:	d00a      	beq.n	800584c <sbrk_aligned+0x34>
 8005836:	1cc4      	adds	r4, r0, #3
 8005838:	f024 0403 	bic.w	r4, r4, #3
 800583c:	42a0      	cmp	r0, r4
 800583e:	d007      	beq.n	8005850 <sbrk_aligned+0x38>
 8005840:	1a21      	subs	r1, r4, r0
 8005842:	4628      	mov	r0, r5
 8005844:	f000 fce6 	bl	8006214 <_sbrk_r>
 8005848:	3001      	adds	r0, #1
 800584a:	d101      	bne.n	8005850 <sbrk_aligned+0x38>
 800584c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005850:	4620      	mov	r0, r4
 8005852:	bd70      	pop	{r4, r5, r6, pc}
 8005854:	200005a8 	.word	0x200005a8

08005858 <_malloc_r>:
 8005858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800585c:	1ccd      	adds	r5, r1, #3
 800585e:	f025 0503 	bic.w	r5, r5, #3
 8005862:	3508      	adds	r5, #8
 8005864:	2d0c      	cmp	r5, #12
 8005866:	bf38      	it	cc
 8005868:	250c      	movcc	r5, #12
 800586a:	2d00      	cmp	r5, #0
 800586c:	4607      	mov	r7, r0
 800586e:	db01      	blt.n	8005874 <_malloc_r+0x1c>
 8005870:	42a9      	cmp	r1, r5
 8005872:	d905      	bls.n	8005880 <_malloc_r+0x28>
 8005874:	230c      	movs	r3, #12
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	2600      	movs	r6, #0
 800587a:	4630      	mov	r0, r6
 800587c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005880:	4e2e      	ldr	r6, [pc, #184]	; (800593c <_malloc_r+0xe4>)
 8005882:	f001 fc2b 	bl	80070dc <__malloc_lock>
 8005886:	6833      	ldr	r3, [r6, #0]
 8005888:	461c      	mov	r4, r3
 800588a:	bb34      	cbnz	r4, 80058da <_malloc_r+0x82>
 800588c:	4629      	mov	r1, r5
 800588e:	4638      	mov	r0, r7
 8005890:	f7ff ffc2 	bl	8005818 <sbrk_aligned>
 8005894:	1c43      	adds	r3, r0, #1
 8005896:	4604      	mov	r4, r0
 8005898:	d14d      	bne.n	8005936 <_malloc_r+0xde>
 800589a:	6834      	ldr	r4, [r6, #0]
 800589c:	4626      	mov	r6, r4
 800589e:	2e00      	cmp	r6, #0
 80058a0:	d140      	bne.n	8005924 <_malloc_r+0xcc>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	4631      	mov	r1, r6
 80058a6:	4638      	mov	r0, r7
 80058a8:	eb04 0803 	add.w	r8, r4, r3
 80058ac:	f000 fcb2 	bl	8006214 <_sbrk_r>
 80058b0:	4580      	cmp	r8, r0
 80058b2:	d13a      	bne.n	800592a <_malloc_r+0xd2>
 80058b4:	6821      	ldr	r1, [r4, #0]
 80058b6:	3503      	adds	r5, #3
 80058b8:	1a6d      	subs	r5, r5, r1
 80058ba:	f025 0503 	bic.w	r5, r5, #3
 80058be:	3508      	adds	r5, #8
 80058c0:	2d0c      	cmp	r5, #12
 80058c2:	bf38      	it	cc
 80058c4:	250c      	movcc	r5, #12
 80058c6:	4629      	mov	r1, r5
 80058c8:	4638      	mov	r0, r7
 80058ca:	f7ff ffa5 	bl	8005818 <sbrk_aligned>
 80058ce:	3001      	adds	r0, #1
 80058d0:	d02b      	beq.n	800592a <_malloc_r+0xd2>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	442b      	add	r3, r5
 80058d6:	6023      	str	r3, [r4, #0]
 80058d8:	e00e      	b.n	80058f8 <_malloc_r+0xa0>
 80058da:	6822      	ldr	r2, [r4, #0]
 80058dc:	1b52      	subs	r2, r2, r5
 80058de:	d41e      	bmi.n	800591e <_malloc_r+0xc6>
 80058e0:	2a0b      	cmp	r2, #11
 80058e2:	d916      	bls.n	8005912 <_malloc_r+0xba>
 80058e4:	1961      	adds	r1, r4, r5
 80058e6:	42a3      	cmp	r3, r4
 80058e8:	6025      	str	r5, [r4, #0]
 80058ea:	bf18      	it	ne
 80058ec:	6059      	strne	r1, [r3, #4]
 80058ee:	6863      	ldr	r3, [r4, #4]
 80058f0:	bf08      	it	eq
 80058f2:	6031      	streq	r1, [r6, #0]
 80058f4:	5162      	str	r2, [r4, r5]
 80058f6:	604b      	str	r3, [r1, #4]
 80058f8:	4638      	mov	r0, r7
 80058fa:	f104 060b 	add.w	r6, r4, #11
 80058fe:	f001 fbf3 	bl	80070e8 <__malloc_unlock>
 8005902:	f026 0607 	bic.w	r6, r6, #7
 8005906:	1d23      	adds	r3, r4, #4
 8005908:	1af2      	subs	r2, r6, r3
 800590a:	d0b6      	beq.n	800587a <_malloc_r+0x22>
 800590c:	1b9b      	subs	r3, r3, r6
 800590e:	50a3      	str	r3, [r4, r2]
 8005910:	e7b3      	b.n	800587a <_malloc_r+0x22>
 8005912:	6862      	ldr	r2, [r4, #4]
 8005914:	42a3      	cmp	r3, r4
 8005916:	bf0c      	ite	eq
 8005918:	6032      	streq	r2, [r6, #0]
 800591a:	605a      	strne	r2, [r3, #4]
 800591c:	e7ec      	b.n	80058f8 <_malloc_r+0xa0>
 800591e:	4623      	mov	r3, r4
 8005920:	6864      	ldr	r4, [r4, #4]
 8005922:	e7b2      	b.n	800588a <_malloc_r+0x32>
 8005924:	4634      	mov	r4, r6
 8005926:	6876      	ldr	r6, [r6, #4]
 8005928:	e7b9      	b.n	800589e <_malloc_r+0x46>
 800592a:	230c      	movs	r3, #12
 800592c:	603b      	str	r3, [r7, #0]
 800592e:	4638      	mov	r0, r7
 8005930:	f001 fbda 	bl	80070e8 <__malloc_unlock>
 8005934:	e7a1      	b.n	800587a <_malloc_r+0x22>
 8005936:	6025      	str	r5, [r4, #0]
 8005938:	e7de      	b.n	80058f8 <_malloc_r+0xa0>
 800593a:	bf00      	nop
 800593c:	200005a4 	.word	0x200005a4

08005940 <__cvt>:
 8005940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005944:	ec55 4b10 	vmov	r4, r5, d0
 8005948:	2d00      	cmp	r5, #0
 800594a:	460e      	mov	r6, r1
 800594c:	4619      	mov	r1, r3
 800594e:	462b      	mov	r3, r5
 8005950:	bfbb      	ittet	lt
 8005952:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005956:	461d      	movlt	r5, r3
 8005958:	2300      	movge	r3, #0
 800595a:	232d      	movlt	r3, #45	; 0x2d
 800595c:	700b      	strb	r3, [r1, #0]
 800595e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005960:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005964:	4691      	mov	r9, r2
 8005966:	f023 0820 	bic.w	r8, r3, #32
 800596a:	bfbc      	itt	lt
 800596c:	4622      	movlt	r2, r4
 800596e:	4614      	movlt	r4, r2
 8005970:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005974:	d005      	beq.n	8005982 <__cvt+0x42>
 8005976:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800597a:	d100      	bne.n	800597e <__cvt+0x3e>
 800597c:	3601      	adds	r6, #1
 800597e:	2102      	movs	r1, #2
 8005980:	e000      	b.n	8005984 <__cvt+0x44>
 8005982:	2103      	movs	r1, #3
 8005984:	ab03      	add	r3, sp, #12
 8005986:	9301      	str	r3, [sp, #4]
 8005988:	ab02      	add	r3, sp, #8
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	ec45 4b10 	vmov	d0, r4, r5
 8005990:	4653      	mov	r3, sl
 8005992:	4632      	mov	r2, r6
 8005994:	f000 fd90 	bl	80064b8 <_dtoa_r>
 8005998:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800599c:	4607      	mov	r7, r0
 800599e:	d102      	bne.n	80059a6 <__cvt+0x66>
 80059a0:	f019 0f01 	tst.w	r9, #1
 80059a4:	d022      	beq.n	80059ec <__cvt+0xac>
 80059a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059aa:	eb07 0906 	add.w	r9, r7, r6
 80059ae:	d110      	bne.n	80059d2 <__cvt+0x92>
 80059b0:	783b      	ldrb	r3, [r7, #0]
 80059b2:	2b30      	cmp	r3, #48	; 0x30
 80059b4:	d10a      	bne.n	80059cc <__cvt+0x8c>
 80059b6:	2200      	movs	r2, #0
 80059b8:	2300      	movs	r3, #0
 80059ba:	4620      	mov	r0, r4
 80059bc:	4629      	mov	r1, r5
 80059be:	f7fb f89b 	bl	8000af8 <__aeabi_dcmpeq>
 80059c2:	b918      	cbnz	r0, 80059cc <__cvt+0x8c>
 80059c4:	f1c6 0601 	rsb	r6, r6, #1
 80059c8:	f8ca 6000 	str.w	r6, [sl]
 80059cc:	f8da 3000 	ldr.w	r3, [sl]
 80059d0:	4499      	add	r9, r3
 80059d2:	2200      	movs	r2, #0
 80059d4:	2300      	movs	r3, #0
 80059d6:	4620      	mov	r0, r4
 80059d8:	4629      	mov	r1, r5
 80059da:	f7fb f88d 	bl	8000af8 <__aeabi_dcmpeq>
 80059de:	b108      	cbz	r0, 80059e4 <__cvt+0xa4>
 80059e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80059e4:	2230      	movs	r2, #48	; 0x30
 80059e6:	9b03      	ldr	r3, [sp, #12]
 80059e8:	454b      	cmp	r3, r9
 80059ea:	d307      	bcc.n	80059fc <__cvt+0xbc>
 80059ec:	9b03      	ldr	r3, [sp, #12]
 80059ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059f0:	1bdb      	subs	r3, r3, r7
 80059f2:	4638      	mov	r0, r7
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	b004      	add	sp, #16
 80059f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fc:	1c59      	adds	r1, r3, #1
 80059fe:	9103      	str	r1, [sp, #12]
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	e7f0      	b.n	80059e6 <__cvt+0xa6>

08005a04 <__exponent>:
 8005a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a06:	4603      	mov	r3, r0
 8005a08:	2900      	cmp	r1, #0
 8005a0a:	bfb8      	it	lt
 8005a0c:	4249      	neglt	r1, r1
 8005a0e:	f803 2b02 	strb.w	r2, [r3], #2
 8005a12:	bfb4      	ite	lt
 8005a14:	222d      	movlt	r2, #45	; 0x2d
 8005a16:	222b      	movge	r2, #43	; 0x2b
 8005a18:	2909      	cmp	r1, #9
 8005a1a:	7042      	strb	r2, [r0, #1]
 8005a1c:	dd2a      	ble.n	8005a74 <__exponent+0x70>
 8005a1e:	f10d 0407 	add.w	r4, sp, #7
 8005a22:	46a4      	mov	ip, r4
 8005a24:	270a      	movs	r7, #10
 8005a26:	46a6      	mov	lr, r4
 8005a28:	460a      	mov	r2, r1
 8005a2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a2e:	fb07 1516 	mls	r5, r7, r6, r1
 8005a32:	3530      	adds	r5, #48	; 0x30
 8005a34:	2a63      	cmp	r2, #99	; 0x63
 8005a36:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005a3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a3e:	4631      	mov	r1, r6
 8005a40:	dcf1      	bgt.n	8005a26 <__exponent+0x22>
 8005a42:	3130      	adds	r1, #48	; 0x30
 8005a44:	f1ae 0502 	sub.w	r5, lr, #2
 8005a48:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a4c:	1c44      	adds	r4, r0, #1
 8005a4e:	4629      	mov	r1, r5
 8005a50:	4561      	cmp	r1, ip
 8005a52:	d30a      	bcc.n	8005a6a <__exponent+0x66>
 8005a54:	f10d 0209 	add.w	r2, sp, #9
 8005a58:	eba2 020e 	sub.w	r2, r2, lr
 8005a5c:	4565      	cmp	r5, ip
 8005a5e:	bf88      	it	hi
 8005a60:	2200      	movhi	r2, #0
 8005a62:	4413      	add	r3, r2
 8005a64:	1a18      	subs	r0, r3, r0
 8005a66:	b003      	add	sp, #12
 8005a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a72:	e7ed      	b.n	8005a50 <__exponent+0x4c>
 8005a74:	2330      	movs	r3, #48	; 0x30
 8005a76:	3130      	adds	r1, #48	; 0x30
 8005a78:	7083      	strb	r3, [r0, #2]
 8005a7a:	70c1      	strb	r1, [r0, #3]
 8005a7c:	1d03      	adds	r3, r0, #4
 8005a7e:	e7f1      	b.n	8005a64 <__exponent+0x60>

08005a80 <_printf_float>:
 8005a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a84:	ed2d 8b02 	vpush	{d8}
 8005a88:	b08d      	sub	sp, #52	; 0x34
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a90:	4616      	mov	r6, r2
 8005a92:	461f      	mov	r7, r3
 8005a94:	4605      	mov	r5, r0
 8005a96:	f001 fafd 	bl	8007094 <_localeconv_r>
 8005a9a:	f8d0 a000 	ldr.w	sl, [r0]
 8005a9e:	4650      	mov	r0, sl
 8005aa0:	f7fa fba8 	bl	80001f4 <strlen>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	9305      	str	r3, [sp, #20]
 8005aac:	f8d8 3000 	ldr.w	r3, [r8]
 8005ab0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ab4:	3307      	adds	r3, #7
 8005ab6:	f023 0307 	bic.w	r3, r3, #7
 8005aba:	f103 0208 	add.w	r2, r3, #8
 8005abe:	f8c8 2000 	str.w	r2, [r8]
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005aca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005ace:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ad2:	9307      	str	r3, [sp, #28]
 8005ad4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ad8:	ee08 0a10 	vmov	s16, r0
 8005adc:	4b9f      	ldr	r3, [pc, #636]	; (8005d5c <_printf_float+0x2dc>)
 8005ade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ae6:	f7fb f839 	bl	8000b5c <__aeabi_dcmpun>
 8005aea:	bb88      	cbnz	r0, 8005b50 <_printf_float+0xd0>
 8005aec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005af0:	4b9a      	ldr	r3, [pc, #616]	; (8005d5c <_printf_float+0x2dc>)
 8005af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005af6:	f7fb f813 	bl	8000b20 <__aeabi_dcmple>
 8005afa:	bb48      	cbnz	r0, 8005b50 <_printf_float+0xd0>
 8005afc:	2200      	movs	r2, #0
 8005afe:	2300      	movs	r3, #0
 8005b00:	4640      	mov	r0, r8
 8005b02:	4649      	mov	r1, r9
 8005b04:	f7fb f802 	bl	8000b0c <__aeabi_dcmplt>
 8005b08:	b110      	cbz	r0, 8005b10 <_printf_float+0x90>
 8005b0a:	232d      	movs	r3, #45	; 0x2d
 8005b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b10:	4b93      	ldr	r3, [pc, #588]	; (8005d60 <_printf_float+0x2e0>)
 8005b12:	4894      	ldr	r0, [pc, #592]	; (8005d64 <_printf_float+0x2e4>)
 8005b14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b18:	bf94      	ite	ls
 8005b1a:	4698      	movls	r8, r3
 8005b1c:	4680      	movhi	r8, r0
 8005b1e:	2303      	movs	r3, #3
 8005b20:	6123      	str	r3, [r4, #16]
 8005b22:	9b05      	ldr	r3, [sp, #20]
 8005b24:	f023 0204 	bic.w	r2, r3, #4
 8005b28:	6022      	str	r2, [r4, #0]
 8005b2a:	f04f 0900 	mov.w	r9, #0
 8005b2e:	9700      	str	r7, [sp, #0]
 8005b30:	4633      	mov	r3, r6
 8005b32:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b34:	4621      	mov	r1, r4
 8005b36:	4628      	mov	r0, r5
 8005b38:	f000 f9d8 	bl	8005eec <_printf_common>
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	f040 8090 	bne.w	8005c62 <_printf_float+0x1e2>
 8005b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b46:	b00d      	add	sp, #52	; 0x34
 8005b48:	ecbd 8b02 	vpop	{d8}
 8005b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b50:	4642      	mov	r2, r8
 8005b52:	464b      	mov	r3, r9
 8005b54:	4640      	mov	r0, r8
 8005b56:	4649      	mov	r1, r9
 8005b58:	f7fb f800 	bl	8000b5c <__aeabi_dcmpun>
 8005b5c:	b140      	cbz	r0, 8005b70 <_printf_float+0xf0>
 8005b5e:	464b      	mov	r3, r9
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	bfbc      	itt	lt
 8005b64:	232d      	movlt	r3, #45	; 0x2d
 8005b66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b6a:	487f      	ldr	r0, [pc, #508]	; (8005d68 <_printf_float+0x2e8>)
 8005b6c:	4b7f      	ldr	r3, [pc, #508]	; (8005d6c <_printf_float+0x2ec>)
 8005b6e:	e7d1      	b.n	8005b14 <_printf_float+0x94>
 8005b70:	6863      	ldr	r3, [r4, #4]
 8005b72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b76:	9206      	str	r2, [sp, #24]
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	d13f      	bne.n	8005bfc <_printf_float+0x17c>
 8005b7c:	2306      	movs	r3, #6
 8005b7e:	6063      	str	r3, [r4, #4]
 8005b80:	9b05      	ldr	r3, [sp, #20]
 8005b82:	6861      	ldr	r1, [r4, #4]
 8005b84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b88:	2300      	movs	r3, #0
 8005b8a:	9303      	str	r3, [sp, #12]
 8005b8c:	ab0a      	add	r3, sp, #40	; 0x28
 8005b8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b92:	ab09      	add	r3, sp, #36	; 0x24
 8005b94:	ec49 8b10 	vmov	d0, r8, r9
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	6022      	str	r2, [r4, #0]
 8005b9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f7ff fecd 	bl	8005940 <__cvt>
 8005ba6:	9b06      	ldr	r3, [sp, #24]
 8005ba8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005baa:	2b47      	cmp	r3, #71	; 0x47
 8005bac:	4680      	mov	r8, r0
 8005bae:	d108      	bne.n	8005bc2 <_printf_float+0x142>
 8005bb0:	1cc8      	adds	r0, r1, #3
 8005bb2:	db02      	blt.n	8005bba <_printf_float+0x13a>
 8005bb4:	6863      	ldr	r3, [r4, #4]
 8005bb6:	4299      	cmp	r1, r3
 8005bb8:	dd41      	ble.n	8005c3e <_printf_float+0x1be>
 8005bba:	f1ab 0b02 	sub.w	fp, fp, #2
 8005bbe:	fa5f fb8b 	uxtb.w	fp, fp
 8005bc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bc6:	d820      	bhi.n	8005c0a <_printf_float+0x18a>
 8005bc8:	3901      	subs	r1, #1
 8005bca:	465a      	mov	r2, fp
 8005bcc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005bd0:	9109      	str	r1, [sp, #36]	; 0x24
 8005bd2:	f7ff ff17 	bl	8005a04 <__exponent>
 8005bd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bd8:	1813      	adds	r3, r2, r0
 8005bda:	2a01      	cmp	r2, #1
 8005bdc:	4681      	mov	r9, r0
 8005bde:	6123      	str	r3, [r4, #16]
 8005be0:	dc02      	bgt.n	8005be8 <_printf_float+0x168>
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	07d2      	lsls	r2, r2, #31
 8005be6:	d501      	bpl.n	8005bec <_printf_float+0x16c>
 8005be8:	3301      	adds	r3, #1
 8005bea:	6123      	str	r3, [r4, #16]
 8005bec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d09c      	beq.n	8005b2e <_printf_float+0xae>
 8005bf4:	232d      	movs	r3, #45	; 0x2d
 8005bf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bfa:	e798      	b.n	8005b2e <_printf_float+0xae>
 8005bfc:	9a06      	ldr	r2, [sp, #24]
 8005bfe:	2a47      	cmp	r2, #71	; 0x47
 8005c00:	d1be      	bne.n	8005b80 <_printf_float+0x100>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1bc      	bne.n	8005b80 <_printf_float+0x100>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e7b9      	b.n	8005b7e <_printf_float+0xfe>
 8005c0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c0e:	d118      	bne.n	8005c42 <_printf_float+0x1c2>
 8005c10:	2900      	cmp	r1, #0
 8005c12:	6863      	ldr	r3, [r4, #4]
 8005c14:	dd0b      	ble.n	8005c2e <_printf_float+0x1ae>
 8005c16:	6121      	str	r1, [r4, #16]
 8005c18:	b913      	cbnz	r3, 8005c20 <_printf_float+0x1a0>
 8005c1a:	6822      	ldr	r2, [r4, #0]
 8005c1c:	07d0      	lsls	r0, r2, #31
 8005c1e:	d502      	bpl.n	8005c26 <_printf_float+0x1a6>
 8005c20:	3301      	adds	r3, #1
 8005c22:	440b      	add	r3, r1
 8005c24:	6123      	str	r3, [r4, #16]
 8005c26:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c28:	f04f 0900 	mov.w	r9, #0
 8005c2c:	e7de      	b.n	8005bec <_printf_float+0x16c>
 8005c2e:	b913      	cbnz	r3, 8005c36 <_printf_float+0x1b6>
 8005c30:	6822      	ldr	r2, [r4, #0]
 8005c32:	07d2      	lsls	r2, r2, #31
 8005c34:	d501      	bpl.n	8005c3a <_printf_float+0x1ba>
 8005c36:	3302      	adds	r3, #2
 8005c38:	e7f4      	b.n	8005c24 <_printf_float+0x1a4>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e7f2      	b.n	8005c24 <_printf_float+0x1a4>
 8005c3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c44:	4299      	cmp	r1, r3
 8005c46:	db05      	blt.n	8005c54 <_printf_float+0x1d4>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	6121      	str	r1, [r4, #16]
 8005c4c:	07d8      	lsls	r0, r3, #31
 8005c4e:	d5ea      	bpl.n	8005c26 <_printf_float+0x1a6>
 8005c50:	1c4b      	adds	r3, r1, #1
 8005c52:	e7e7      	b.n	8005c24 <_printf_float+0x1a4>
 8005c54:	2900      	cmp	r1, #0
 8005c56:	bfd4      	ite	le
 8005c58:	f1c1 0202 	rsble	r2, r1, #2
 8005c5c:	2201      	movgt	r2, #1
 8005c5e:	4413      	add	r3, r2
 8005c60:	e7e0      	b.n	8005c24 <_printf_float+0x1a4>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	055a      	lsls	r2, r3, #21
 8005c66:	d407      	bmi.n	8005c78 <_printf_float+0x1f8>
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	4642      	mov	r2, r8
 8005c6c:	4631      	mov	r1, r6
 8005c6e:	4628      	mov	r0, r5
 8005c70:	47b8      	blx	r7
 8005c72:	3001      	adds	r0, #1
 8005c74:	d12c      	bne.n	8005cd0 <_printf_float+0x250>
 8005c76:	e764      	b.n	8005b42 <_printf_float+0xc2>
 8005c78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c7c:	f240 80e0 	bls.w	8005e40 <_printf_float+0x3c0>
 8005c80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c84:	2200      	movs	r2, #0
 8005c86:	2300      	movs	r3, #0
 8005c88:	f7fa ff36 	bl	8000af8 <__aeabi_dcmpeq>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d034      	beq.n	8005cfa <_printf_float+0x27a>
 8005c90:	4a37      	ldr	r2, [pc, #220]	; (8005d70 <_printf_float+0x2f0>)
 8005c92:	2301      	movs	r3, #1
 8005c94:	4631      	mov	r1, r6
 8005c96:	4628      	mov	r0, r5
 8005c98:	47b8      	blx	r7
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	f43f af51 	beq.w	8005b42 <_printf_float+0xc2>
 8005ca0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	db02      	blt.n	8005cae <_printf_float+0x22e>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	07d8      	lsls	r0, r3, #31
 8005cac:	d510      	bpl.n	8005cd0 <_printf_float+0x250>
 8005cae:	ee18 3a10 	vmov	r3, s16
 8005cb2:	4652      	mov	r2, sl
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	47b8      	blx	r7
 8005cba:	3001      	adds	r0, #1
 8005cbc:	f43f af41 	beq.w	8005b42 <_printf_float+0xc2>
 8005cc0:	f04f 0800 	mov.w	r8, #0
 8005cc4:	f104 091a 	add.w	r9, r4, #26
 8005cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	4543      	cmp	r3, r8
 8005cce:	dc09      	bgt.n	8005ce4 <_printf_float+0x264>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	079b      	lsls	r3, r3, #30
 8005cd4:	f100 8105 	bmi.w	8005ee2 <_printf_float+0x462>
 8005cd8:	68e0      	ldr	r0, [r4, #12]
 8005cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cdc:	4298      	cmp	r0, r3
 8005cde:	bfb8      	it	lt
 8005ce0:	4618      	movlt	r0, r3
 8005ce2:	e730      	b.n	8005b46 <_printf_float+0xc6>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	464a      	mov	r2, r9
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4628      	mov	r0, r5
 8005cec:	47b8      	blx	r7
 8005cee:	3001      	adds	r0, #1
 8005cf0:	f43f af27 	beq.w	8005b42 <_printf_float+0xc2>
 8005cf4:	f108 0801 	add.w	r8, r8, #1
 8005cf8:	e7e6      	b.n	8005cc8 <_printf_float+0x248>
 8005cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	dc39      	bgt.n	8005d74 <_printf_float+0x2f4>
 8005d00:	4a1b      	ldr	r2, [pc, #108]	; (8005d70 <_printf_float+0x2f0>)
 8005d02:	2301      	movs	r3, #1
 8005d04:	4631      	mov	r1, r6
 8005d06:	4628      	mov	r0, r5
 8005d08:	47b8      	blx	r7
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	f43f af19 	beq.w	8005b42 <_printf_float+0xc2>
 8005d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d14:	4313      	orrs	r3, r2
 8005d16:	d102      	bne.n	8005d1e <_printf_float+0x29e>
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	07d9      	lsls	r1, r3, #31
 8005d1c:	d5d8      	bpl.n	8005cd0 <_printf_float+0x250>
 8005d1e:	ee18 3a10 	vmov	r3, s16
 8005d22:	4652      	mov	r2, sl
 8005d24:	4631      	mov	r1, r6
 8005d26:	4628      	mov	r0, r5
 8005d28:	47b8      	blx	r7
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	f43f af09 	beq.w	8005b42 <_printf_float+0xc2>
 8005d30:	f04f 0900 	mov.w	r9, #0
 8005d34:	f104 0a1a 	add.w	sl, r4, #26
 8005d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d3a:	425b      	negs	r3, r3
 8005d3c:	454b      	cmp	r3, r9
 8005d3e:	dc01      	bgt.n	8005d44 <_printf_float+0x2c4>
 8005d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d42:	e792      	b.n	8005c6a <_printf_float+0x1ea>
 8005d44:	2301      	movs	r3, #1
 8005d46:	4652      	mov	r2, sl
 8005d48:	4631      	mov	r1, r6
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	47b8      	blx	r7
 8005d4e:	3001      	adds	r0, #1
 8005d50:	f43f aef7 	beq.w	8005b42 <_printf_float+0xc2>
 8005d54:	f109 0901 	add.w	r9, r9, #1
 8005d58:	e7ee      	b.n	8005d38 <_printf_float+0x2b8>
 8005d5a:	bf00      	nop
 8005d5c:	7fefffff 	.word	0x7fefffff
 8005d60:	08009efc 	.word	0x08009efc
 8005d64:	08009f00 	.word	0x08009f00
 8005d68:	08009f08 	.word	0x08009f08
 8005d6c:	08009f04 	.word	0x08009f04
 8005d70:	0800a131 	.word	0x0800a131
 8005d74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	bfa8      	it	ge
 8005d7c:	461a      	movge	r2, r3
 8005d7e:	2a00      	cmp	r2, #0
 8005d80:	4691      	mov	r9, r2
 8005d82:	dc37      	bgt.n	8005df4 <_printf_float+0x374>
 8005d84:	f04f 0b00 	mov.w	fp, #0
 8005d88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d8c:	f104 021a 	add.w	r2, r4, #26
 8005d90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d92:	9305      	str	r3, [sp, #20]
 8005d94:	eba3 0309 	sub.w	r3, r3, r9
 8005d98:	455b      	cmp	r3, fp
 8005d9a:	dc33      	bgt.n	8005e04 <_printf_float+0x384>
 8005d9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005da0:	429a      	cmp	r2, r3
 8005da2:	db3b      	blt.n	8005e1c <_printf_float+0x39c>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	07da      	lsls	r2, r3, #31
 8005da8:	d438      	bmi.n	8005e1c <_printf_float+0x39c>
 8005daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dac:	9a05      	ldr	r2, [sp, #20]
 8005dae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005db0:	1a9a      	subs	r2, r3, r2
 8005db2:	eba3 0901 	sub.w	r9, r3, r1
 8005db6:	4591      	cmp	r9, r2
 8005db8:	bfa8      	it	ge
 8005dba:	4691      	movge	r9, r2
 8005dbc:	f1b9 0f00 	cmp.w	r9, #0
 8005dc0:	dc35      	bgt.n	8005e2e <_printf_float+0x3ae>
 8005dc2:	f04f 0800 	mov.w	r8, #0
 8005dc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dca:	f104 0a1a 	add.w	sl, r4, #26
 8005dce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dd2:	1a9b      	subs	r3, r3, r2
 8005dd4:	eba3 0309 	sub.w	r3, r3, r9
 8005dd8:	4543      	cmp	r3, r8
 8005dda:	f77f af79 	ble.w	8005cd0 <_printf_float+0x250>
 8005dde:	2301      	movs	r3, #1
 8005de0:	4652      	mov	r2, sl
 8005de2:	4631      	mov	r1, r6
 8005de4:	4628      	mov	r0, r5
 8005de6:	47b8      	blx	r7
 8005de8:	3001      	adds	r0, #1
 8005dea:	f43f aeaa 	beq.w	8005b42 <_printf_float+0xc2>
 8005dee:	f108 0801 	add.w	r8, r8, #1
 8005df2:	e7ec      	b.n	8005dce <_printf_float+0x34e>
 8005df4:	4613      	mov	r3, r2
 8005df6:	4631      	mov	r1, r6
 8005df8:	4642      	mov	r2, r8
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	47b8      	blx	r7
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d1c0      	bne.n	8005d84 <_printf_float+0x304>
 8005e02:	e69e      	b.n	8005b42 <_printf_float+0xc2>
 8005e04:	2301      	movs	r3, #1
 8005e06:	4631      	mov	r1, r6
 8005e08:	4628      	mov	r0, r5
 8005e0a:	9205      	str	r2, [sp, #20]
 8005e0c:	47b8      	blx	r7
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f43f ae97 	beq.w	8005b42 <_printf_float+0xc2>
 8005e14:	9a05      	ldr	r2, [sp, #20]
 8005e16:	f10b 0b01 	add.w	fp, fp, #1
 8005e1a:	e7b9      	b.n	8005d90 <_printf_float+0x310>
 8005e1c:	ee18 3a10 	vmov	r3, s16
 8005e20:	4652      	mov	r2, sl
 8005e22:	4631      	mov	r1, r6
 8005e24:	4628      	mov	r0, r5
 8005e26:	47b8      	blx	r7
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d1be      	bne.n	8005daa <_printf_float+0x32a>
 8005e2c:	e689      	b.n	8005b42 <_printf_float+0xc2>
 8005e2e:	9a05      	ldr	r2, [sp, #20]
 8005e30:	464b      	mov	r3, r9
 8005e32:	4442      	add	r2, r8
 8005e34:	4631      	mov	r1, r6
 8005e36:	4628      	mov	r0, r5
 8005e38:	47b8      	blx	r7
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d1c1      	bne.n	8005dc2 <_printf_float+0x342>
 8005e3e:	e680      	b.n	8005b42 <_printf_float+0xc2>
 8005e40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e42:	2a01      	cmp	r2, #1
 8005e44:	dc01      	bgt.n	8005e4a <_printf_float+0x3ca>
 8005e46:	07db      	lsls	r3, r3, #31
 8005e48:	d538      	bpl.n	8005ebc <_printf_float+0x43c>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4628      	mov	r0, r5
 8005e52:	47b8      	blx	r7
 8005e54:	3001      	adds	r0, #1
 8005e56:	f43f ae74 	beq.w	8005b42 <_printf_float+0xc2>
 8005e5a:	ee18 3a10 	vmov	r3, s16
 8005e5e:	4652      	mov	r2, sl
 8005e60:	4631      	mov	r1, r6
 8005e62:	4628      	mov	r0, r5
 8005e64:	47b8      	blx	r7
 8005e66:	3001      	adds	r0, #1
 8005e68:	f43f ae6b 	beq.w	8005b42 <_printf_float+0xc2>
 8005e6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e70:	2200      	movs	r2, #0
 8005e72:	2300      	movs	r3, #0
 8005e74:	f7fa fe40 	bl	8000af8 <__aeabi_dcmpeq>
 8005e78:	b9d8      	cbnz	r0, 8005eb2 <_printf_float+0x432>
 8005e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e7c:	f108 0201 	add.w	r2, r8, #1
 8005e80:	3b01      	subs	r3, #1
 8005e82:	4631      	mov	r1, r6
 8005e84:	4628      	mov	r0, r5
 8005e86:	47b8      	blx	r7
 8005e88:	3001      	adds	r0, #1
 8005e8a:	d10e      	bne.n	8005eaa <_printf_float+0x42a>
 8005e8c:	e659      	b.n	8005b42 <_printf_float+0xc2>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	4652      	mov	r2, sl
 8005e92:	4631      	mov	r1, r6
 8005e94:	4628      	mov	r0, r5
 8005e96:	47b8      	blx	r7
 8005e98:	3001      	adds	r0, #1
 8005e9a:	f43f ae52 	beq.w	8005b42 <_printf_float+0xc2>
 8005e9e:	f108 0801 	add.w	r8, r8, #1
 8005ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	4543      	cmp	r3, r8
 8005ea8:	dcf1      	bgt.n	8005e8e <_printf_float+0x40e>
 8005eaa:	464b      	mov	r3, r9
 8005eac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005eb0:	e6dc      	b.n	8005c6c <_printf_float+0x1ec>
 8005eb2:	f04f 0800 	mov.w	r8, #0
 8005eb6:	f104 0a1a 	add.w	sl, r4, #26
 8005eba:	e7f2      	b.n	8005ea2 <_printf_float+0x422>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	4642      	mov	r2, r8
 8005ec0:	e7df      	b.n	8005e82 <_printf_float+0x402>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	464a      	mov	r2, r9
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4628      	mov	r0, r5
 8005eca:	47b8      	blx	r7
 8005ecc:	3001      	adds	r0, #1
 8005ece:	f43f ae38 	beq.w	8005b42 <_printf_float+0xc2>
 8005ed2:	f108 0801 	add.w	r8, r8, #1
 8005ed6:	68e3      	ldr	r3, [r4, #12]
 8005ed8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005eda:	1a5b      	subs	r3, r3, r1
 8005edc:	4543      	cmp	r3, r8
 8005ede:	dcf0      	bgt.n	8005ec2 <_printf_float+0x442>
 8005ee0:	e6fa      	b.n	8005cd8 <_printf_float+0x258>
 8005ee2:	f04f 0800 	mov.w	r8, #0
 8005ee6:	f104 0919 	add.w	r9, r4, #25
 8005eea:	e7f4      	b.n	8005ed6 <_printf_float+0x456>

08005eec <_printf_common>:
 8005eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef0:	4616      	mov	r6, r2
 8005ef2:	4699      	mov	r9, r3
 8005ef4:	688a      	ldr	r2, [r1, #8]
 8005ef6:	690b      	ldr	r3, [r1, #16]
 8005ef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005efc:	4293      	cmp	r3, r2
 8005efe:	bfb8      	it	lt
 8005f00:	4613      	movlt	r3, r2
 8005f02:	6033      	str	r3, [r6, #0]
 8005f04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f08:	4607      	mov	r7, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	b10a      	cbz	r2, 8005f12 <_printf_common+0x26>
 8005f0e:	3301      	adds	r3, #1
 8005f10:	6033      	str	r3, [r6, #0]
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	0699      	lsls	r1, r3, #26
 8005f16:	bf42      	ittt	mi
 8005f18:	6833      	ldrmi	r3, [r6, #0]
 8005f1a:	3302      	addmi	r3, #2
 8005f1c:	6033      	strmi	r3, [r6, #0]
 8005f1e:	6825      	ldr	r5, [r4, #0]
 8005f20:	f015 0506 	ands.w	r5, r5, #6
 8005f24:	d106      	bne.n	8005f34 <_printf_common+0x48>
 8005f26:	f104 0a19 	add.w	sl, r4, #25
 8005f2a:	68e3      	ldr	r3, [r4, #12]
 8005f2c:	6832      	ldr	r2, [r6, #0]
 8005f2e:	1a9b      	subs	r3, r3, r2
 8005f30:	42ab      	cmp	r3, r5
 8005f32:	dc26      	bgt.n	8005f82 <_printf_common+0x96>
 8005f34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f38:	1e13      	subs	r3, r2, #0
 8005f3a:	6822      	ldr	r2, [r4, #0]
 8005f3c:	bf18      	it	ne
 8005f3e:	2301      	movne	r3, #1
 8005f40:	0692      	lsls	r2, r2, #26
 8005f42:	d42b      	bmi.n	8005f9c <_printf_common+0xb0>
 8005f44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f48:	4649      	mov	r1, r9
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	47c0      	blx	r8
 8005f4e:	3001      	adds	r0, #1
 8005f50:	d01e      	beq.n	8005f90 <_printf_common+0xa4>
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	68e5      	ldr	r5, [r4, #12]
 8005f56:	6832      	ldr	r2, [r6, #0]
 8005f58:	f003 0306 	and.w	r3, r3, #6
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	bf08      	it	eq
 8005f60:	1aad      	subeq	r5, r5, r2
 8005f62:	68a3      	ldr	r3, [r4, #8]
 8005f64:	6922      	ldr	r2, [r4, #16]
 8005f66:	bf0c      	ite	eq
 8005f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f6c:	2500      	movne	r5, #0
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	bfc4      	itt	gt
 8005f72:	1a9b      	subgt	r3, r3, r2
 8005f74:	18ed      	addgt	r5, r5, r3
 8005f76:	2600      	movs	r6, #0
 8005f78:	341a      	adds	r4, #26
 8005f7a:	42b5      	cmp	r5, r6
 8005f7c:	d11a      	bne.n	8005fb4 <_printf_common+0xc8>
 8005f7e:	2000      	movs	r0, #0
 8005f80:	e008      	b.n	8005f94 <_printf_common+0xa8>
 8005f82:	2301      	movs	r3, #1
 8005f84:	4652      	mov	r2, sl
 8005f86:	4649      	mov	r1, r9
 8005f88:	4638      	mov	r0, r7
 8005f8a:	47c0      	blx	r8
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d103      	bne.n	8005f98 <_printf_common+0xac>
 8005f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f98:	3501      	adds	r5, #1
 8005f9a:	e7c6      	b.n	8005f2a <_printf_common+0x3e>
 8005f9c:	18e1      	adds	r1, r4, r3
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	2030      	movs	r0, #48	; 0x30
 8005fa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fa6:	4422      	add	r2, r4
 8005fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fb0:	3302      	adds	r3, #2
 8005fb2:	e7c7      	b.n	8005f44 <_printf_common+0x58>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	4649      	mov	r1, r9
 8005fba:	4638      	mov	r0, r7
 8005fbc:	47c0      	blx	r8
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	d0e6      	beq.n	8005f90 <_printf_common+0xa4>
 8005fc2:	3601      	adds	r6, #1
 8005fc4:	e7d9      	b.n	8005f7a <_printf_common+0x8e>
	...

08005fc8 <_printf_i>:
 8005fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fcc:	7e0f      	ldrb	r7, [r1, #24]
 8005fce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fd0:	2f78      	cmp	r7, #120	; 0x78
 8005fd2:	4691      	mov	r9, r2
 8005fd4:	4680      	mov	r8, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	469a      	mov	sl, r3
 8005fda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005fde:	d807      	bhi.n	8005ff0 <_printf_i+0x28>
 8005fe0:	2f62      	cmp	r7, #98	; 0x62
 8005fe2:	d80a      	bhi.n	8005ffa <_printf_i+0x32>
 8005fe4:	2f00      	cmp	r7, #0
 8005fe6:	f000 80d8 	beq.w	800619a <_printf_i+0x1d2>
 8005fea:	2f58      	cmp	r7, #88	; 0x58
 8005fec:	f000 80a3 	beq.w	8006136 <_printf_i+0x16e>
 8005ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ff8:	e03a      	b.n	8006070 <_printf_i+0xa8>
 8005ffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ffe:	2b15      	cmp	r3, #21
 8006000:	d8f6      	bhi.n	8005ff0 <_printf_i+0x28>
 8006002:	a101      	add	r1, pc, #4	; (adr r1, 8006008 <_printf_i+0x40>)
 8006004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006008:	08006061 	.word	0x08006061
 800600c:	08006075 	.word	0x08006075
 8006010:	08005ff1 	.word	0x08005ff1
 8006014:	08005ff1 	.word	0x08005ff1
 8006018:	08005ff1 	.word	0x08005ff1
 800601c:	08005ff1 	.word	0x08005ff1
 8006020:	08006075 	.word	0x08006075
 8006024:	08005ff1 	.word	0x08005ff1
 8006028:	08005ff1 	.word	0x08005ff1
 800602c:	08005ff1 	.word	0x08005ff1
 8006030:	08005ff1 	.word	0x08005ff1
 8006034:	08006181 	.word	0x08006181
 8006038:	080060a5 	.word	0x080060a5
 800603c:	08006163 	.word	0x08006163
 8006040:	08005ff1 	.word	0x08005ff1
 8006044:	08005ff1 	.word	0x08005ff1
 8006048:	080061a3 	.word	0x080061a3
 800604c:	08005ff1 	.word	0x08005ff1
 8006050:	080060a5 	.word	0x080060a5
 8006054:	08005ff1 	.word	0x08005ff1
 8006058:	08005ff1 	.word	0x08005ff1
 800605c:	0800616b 	.word	0x0800616b
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	1d1a      	adds	r2, r3, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	602a      	str	r2, [r5, #0]
 8006068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800606c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006070:	2301      	movs	r3, #1
 8006072:	e0a3      	b.n	80061bc <_printf_i+0x1f4>
 8006074:	6820      	ldr	r0, [r4, #0]
 8006076:	6829      	ldr	r1, [r5, #0]
 8006078:	0606      	lsls	r6, r0, #24
 800607a:	f101 0304 	add.w	r3, r1, #4
 800607e:	d50a      	bpl.n	8006096 <_printf_i+0xce>
 8006080:	680e      	ldr	r6, [r1, #0]
 8006082:	602b      	str	r3, [r5, #0]
 8006084:	2e00      	cmp	r6, #0
 8006086:	da03      	bge.n	8006090 <_printf_i+0xc8>
 8006088:	232d      	movs	r3, #45	; 0x2d
 800608a:	4276      	negs	r6, r6
 800608c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006090:	485e      	ldr	r0, [pc, #376]	; (800620c <_printf_i+0x244>)
 8006092:	230a      	movs	r3, #10
 8006094:	e019      	b.n	80060ca <_printf_i+0x102>
 8006096:	680e      	ldr	r6, [r1, #0]
 8006098:	602b      	str	r3, [r5, #0]
 800609a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800609e:	bf18      	it	ne
 80060a0:	b236      	sxthne	r6, r6
 80060a2:	e7ef      	b.n	8006084 <_printf_i+0xbc>
 80060a4:	682b      	ldr	r3, [r5, #0]
 80060a6:	6820      	ldr	r0, [r4, #0]
 80060a8:	1d19      	adds	r1, r3, #4
 80060aa:	6029      	str	r1, [r5, #0]
 80060ac:	0601      	lsls	r1, r0, #24
 80060ae:	d501      	bpl.n	80060b4 <_printf_i+0xec>
 80060b0:	681e      	ldr	r6, [r3, #0]
 80060b2:	e002      	b.n	80060ba <_printf_i+0xf2>
 80060b4:	0646      	lsls	r6, r0, #25
 80060b6:	d5fb      	bpl.n	80060b0 <_printf_i+0xe8>
 80060b8:	881e      	ldrh	r6, [r3, #0]
 80060ba:	4854      	ldr	r0, [pc, #336]	; (800620c <_printf_i+0x244>)
 80060bc:	2f6f      	cmp	r7, #111	; 0x6f
 80060be:	bf0c      	ite	eq
 80060c0:	2308      	moveq	r3, #8
 80060c2:	230a      	movne	r3, #10
 80060c4:	2100      	movs	r1, #0
 80060c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060ca:	6865      	ldr	r5, [r4, #4]
 80060cc:	60a5      	str	r5, [r4, #8]
 80060ce:	2d00      	cmp	r5, #0
 80060d0:	bfa2      	ittt	ge
 80060d2:	6821      	ldrge	r1, [r4, #0]
 80060d4:	f021 0104 	bicge.w	r1, r1, #4
 80060d8:	6021      	strge	r1, [r4, #0]
 80060da:	b90e      	cbnz	r6, 80060e0 <_printf_i+0x118>
 80060dc:	2d00      	cmp	r5, #0
 80060de:	d04d      	beq.n	800617c <_printf_i+0x1b4>
 80060e0:	4615      	mov	r5, r2
 80060e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80060e6:	fb03 6711 	mls	r7, r3, r1, r6
 80060ea:	5dc7      	ldrb	r7, [r0, r7]
 80060ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060f0:	4637      	mov	r7, r6
 80060f2:	42bb      	cmp	r3, r7
 80060f4:	460e      	mov	r6, r1
 80060f6:	d9f4      	bls.n	80060e2 <_printf_i+0x11a>
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d10b      	bne.n	8006114 <_printf_i+0x14c>
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	07de      	lsls	r6, r3, #31
 8006100:	d508      	bpl.n	8006114 <_printf_i+0x14c>
 8006102:	6923      	ldr	r3, [r4, #16]
 8006104:	6861      	ldr	r1, [r4, #4]
 8006106:	4299      	cmp	r1, r3
 8006108:	bfde      	ittt	le
 800610a:	2330      	movle	r3, #48	; 0x30
 800610c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006110:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006114:	1b52      	subs	r2, r2, r5
 8006116:	6122      	str	r2, [r4, #16]
 8006118:	f8cd a000 	str.w	sl, [sp]
 800611c:	464b      	mov	r3, r9
 800611e:	aa03      	add	r2, sp, #12
 8006120:	4621      	mov	r1, r4
 8006122:	4640      	mov	r0, r8
 8006124:	f7ff fee2 	bl	8005eec <_printf_common>
 8006128:	3001      	adds	r0, #1
 800612a:	d14c      	bne.n	80061c6 <_printf_i+0x1fe>
 800612c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006130:	b004      	add	sp, #16
 8006132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006136:	4835      	ldr	r0, [pc, #212]	; (800620c <_printf_i+0x244>)
 8006138:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800613c:	6829      	ldr	r1, [r5, #0]
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	f851 6b04 	ldr.w	r6, [r1], #4
 8006144:	6029      	str	r1, [r5, #0]
 8006146:	061d      	lsls	r5, r3, #24
 8006148:	d514      	bpl.n	8006174 <_printf_i+0x1ac>
 800614a:	07df      	lsls	r7, r3, #31
 800614c:	bf44      	itt	mi
 800614e:	f043 0320 	orrmi.w	r3, r3, #32
 8006152:	6023      	strmi	r3, [r4, #0]
 8006154:	b91e      	cbnz	r6, 800615e <_printf_i+0x196>
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	f023 0320 	bic.w	r3, r3, #32
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	2310      	movs	r3, #16
 8006160:	e7b0      	b.n	80060c4 <_printf_i+0xfc>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	f043 0320 	orr.w	r3, r3, #32
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	2378      	movs	r3, #120	; 0x78
 800616c:	4828      	ldr	r0, [pc, #160]	; (8006210 <_printf_i+0x248>)
 800616e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006172:	e7e3      	b.n	800613c <_printf_i+0x174>
 8006174:	0659      	lsls	r1, r3, #25
 8006176:	bf48      	it	mi
 8006178:	b2b6      	uxthmi	r6, r6
 800617a:	e7e6      	b.n	800614a <_printf_i+0x182>
 800617c:	4615      	mov	r5, r2
 800617e:	e7bb      	b.n	80060f8 <_printf_i+0x130>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	6826      	ldr	r6, [r4, #0]
 8006184:	6961      	ldr	r1, [r4, #20]
 8006186:	1d18      	adds	r0, r3, #4
 8006188:	6028      	str	r0, [r5, #0]
 800618a:	0635      	lsls	r5, r6, #24
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	d501      	bpl.n	8006194 <_printf_i+0x1cc>
 8006190:	6019      	str	r1, [r3, #0]
 8006192:	e002      	b.n	800619a <_printf_i+0x1d2>
 8006194:	0670      	lsls	r0, r6, #25
 8006196:	d5fb      	bpl.n	8006190 <_printf_i+0x1c8>
 8006198:	8019      	strh	r1, [r3, #0]
 800619a:	2300      	movs	r3, #0
 800619c:	6123      	str	r3, [r4, #16]
 800619e:	4615      	mov	r5, r2
 80061a0:	e7ba      	b.n	8006118 <_printf_i+0x150>
 80061a2:	682b      	ldr	r3, [r5, #0]
 80061a4:	1d1a      	adds	r2, r3, #4
 80061a6:	602a      	str	r2, [r5, #0]
 80061a8:	681d      	ldr	r5, [r3, #0]
 80061aa:	6862      	ldr	r2, [r4, #4]
 80061ac:	2100      	movs	r1, #0
 80061ae:	4628      	mov	r0, r5
 80061b0:	f7fa f82e 	bl	8000210 <memchr>
 80061b4:	b108      	cbz	r0, 80061ba <_printf_i+0x1f2>
 80061b6:	1b40      	subs	r0, r0, r5
 80061b8:	6060      	str	r0, [r4, #4]
 80061ba:	6863      	ldr	r3, [r4, #4]
 80061bc:	6123      	str	r3, [r4, #16]
 80061be:	2300      	movs	r3, #0
 80061c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061c4:	e7a8      	b.n	8006118 <_printf_i+0x150>
 80061c6:	6923      	ldr	r3, [r4, #16]
 80061c8:	462a      	mov	r2, r5
 80061ca:	4649      	mov	r1, r9
 80061cc:	4640      	mov	r0, r8
 80061ce:	47d0      	blx	sl
 80061d0:	3001      	adds	r0, #1
 80061d2:	d0ab      	beq.n	800612c <_printf_i+0x164>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	079b      	lsls	r3, r3, #30
 80061d8:	d413      	bmi.n	8006202 <_printf_i+0x23a>
 80061da:	68e0      	ldr	r0, [r4, #12]
 80061dc:	9b03      	ldr	r3, [sp, #12]
 80061de:	4298      	cmp	r0, r3
 80061e0:	bfb8      	it	lt
 80061e2:	4618      	movlt	r0, r3
 80061e4:	e7a4      	b.n	8006130 <_printf_i+0x168>
 80061e6:	2301      	movs	r3, #1
 80061e8:	4632      	mov	r2, r6
 80061ea:	4649      	mov	r1, r9
 80061ec:	4640      	mov	r0, r8
 80061ee:	47d0      	blx	sl
 80061f0:	3001      	adds	r0, #1
 80061f2:	d09b      	beq.n	800612c <_printf_i+0x164>
 80061f4:	3501      	adds	r5, #1
 80061f6:	68e3      	ldr	r3, [r4, #12]
 80061f8:	9903      	ldr	r1, [sp, #12]
 80061fa:	1a5b      	subs	r3, r3, r1
 80061fc:	42ab      	cmp	r3, r5
 80061fe:	dcf2      	bgt.n	80061e6 <_printf_i+0x21e>
 8006200:	e7eb      	b.n	80061da <_printf_i+0x212>
 8006202:	2500      	movs	r5, #0
 8006204:	f104 0619 	add.w	r6, r4, #25
 8006208:	e7f5      	b.n	80061f6 <_printf_i+0x22e>
 800620a:	bf00      	nop
 800620c:	08009f0c 	.word	0x08009f0c
 8006210:	08009f1d 	.word	0x08009f1d

08006214 <_sbrk_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4d06      	ldr	r5, [pc, #24]	; (8006230 <_sbrk_r+0x1c>)
 8006218:	2300      	movs	r3, #0
 800621a:	4604      	mov	r4, r0
 800621c:	4608      	mov	r0, r1
 800621e:	602b      	str	r3, [r5, #0]
 8006220:	f003 fda4 	bl	8009d6c <_sbrk>
 8006224:	1c43      	adds	r3, r0, #1
 8006226:	d102      	bne.n	800622e <_sbrk_r+0x1a>
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	b103      	cbz	r3, 800622e <_sbrk_r+0x1a>
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	bd38      	pop	{r3, r4, r5, pc}
 8006230:	200005ac 	.word	0x200005ac

08006234 <siprintf>:
 8006234:	b40e      	push	{r1, r2, r3}
 8006236:	b500      	push	{lr}
 8006238:	b09c      	sub	sp, #112	; 0x70
 800623a:	ab1d      	add	r3, sp, #116	; 0x74
 800623c:	9002      	str	r0, [sp, #8]
 800623e:	9006      	str	r0, [sp, #24]
 8006240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006244:	4809      	ldr	r0, [pc, #36]	; (800626c <siprintf+0x38>)
 8006246:	9107      	str	r1, [sp, #28]
 8006248:	9104      	str	r1, [sp, #16]
 800624a:	4909      	ldr	r1, [pc, #36]	; (8006270 <siprintf+0x3c>)
 800624c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006250:	9105      	str	r1, [sp, #20]
 8006252:	6800      	ldr	r0, [r0, #0]
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	a902      	add	r1, sp, #8
 8006258:	f001 fb42 	bl	80078e0 <_svfiprintf_r>
 800625c:	9b02      	ldr	r3, [sp, #8]
 800625e:	2200      	movs	r2, #0
 8006260:	701a      	strb	r2, [r3, #0]
 8006262:	b01c      	add	sp, #112	; 0x70
 8006264:	f85d eb04 	ldr.w	lr, [sp], #4
 8006268:	b003      	add	sp, #12
 800626a:	4770      	bx	lr
 800626c:	20000010 	.word	0x20000010
 8006270:	ffff0208 	.word	0xffff0208

08006274 <siscanf>:
 8006274:	b40e      	push	{r1, r2, r3}
 8006276:	b510      	push	{r4, lr}
 8006278:	b09f      	sub	sp, #124	; 0x7c
 800627a:	ac21      	add	r4, sp, #132	; 0x84
 800627c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006280:	f854 2b04 	ldr.w	r2, [r4], #4
 8006284:	9201      	str	r2, [sp, #4]
 8006286:	f8ad 101c 	strh.w	r1, [sp, #28]
 800628a:	9004      	str	r0, [sp, #16]
 800628c:	9008      	str	r0, [sp, #32]
 800628e:	f7f9 ffb1 	bl	80001f4 <strlen>
 8006292:	4b0c      	ldr	r3, [pc, #48]	; (80062c4 <siscanf+0x50>)
 8006294:	9005      	str	r0, [sp, #20]
 8006296:	9009      	str	r0, [sp, #36]	; 0x24
 8006298:	930d      	str	r3, [sp, #52]	; 0x34
 800629a:	480b      	ldr	r0, [pc, #44]	; (80062c8 <siscanf+0x54>)
 800629c:	9a01      	ldr	r2, [sp, #4]
 800629e:	6800      	ldr	r0, [r0, #0]
 80062a0:	9403      	str	r4, [sp, #12]
 80062a2:	2300      	movs	r3, #0
 80062a4:	9311      	str	r3, [sp, #68]	; 0x44
 80062a6:	9316      	str	r3, [sp, #88]	; 0x58
 80062a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80062b0:	a904      	add	r1, sp, #16
 80062b2:	4623      	mov	r3, r4
 80062b4:	f001 fc6e 	bl	8007b94 <__ssvfiscanf_r>
 80062b8:	b01f      	add	sp, #124	; 0x7c
 80062ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062be:	b003      	add	sp, #12
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	080062ef 	.word	0x080062ef
 80062c8:	20000010 	.word	0x20000010

080062cc <__sread>:
 80062cc:	b510      	push	{r4, lr}
 80062ce:	460c      	mov	r4, r1
 80062d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d4:	f001 ff28 	bl	8008128 <_read_r>
 80062d8:	2800      	cmp	r0, #0
 80062da:	bfab      	itete	ge
 80062dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062de:	89a3      	ldrhlt	r3, [r4, #12]
 80062e0:	181b      	addge	r3, r3, r0
 80062e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062e6:	bfac      	ite	ge
 80062e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80062ea:	81a3      	strhlt	r3, [r4, #12]
 80062ec:	bd10      	pop	{r4, pc}

080062ee <__seofread>:
 80062ee:	2000      	movs	r0, #0
 80062f0:	4770      	bx	lr

080062f2 <__swrite>:
 80062f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f6:	461f      	mov	r7, r3
 80062f8:	898b      	ldrh	r3, [r1, #12]
 80062fa:	05db      	lsls	r3, r3, #23
 80062fc:	4605      	mov	r5, r0
 80062fe:	460c      	mov	r4, r1
 8006300:	4616      	mov	r6, r2
 8006302:	d505      	bpl.n	8006310 <__swrite+0x1e>
 8006304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006308:	2302      	movs	r3, #2
 800630a:	2200      	movs	r2, #0
 800630c:	f000 fec6 	bl	800709c <_lseek_r>
 8006310:	89a3      	ldrh	r3, [r4, #12]
 8006312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800631a:	81a3      	strh	r3, [r4, #12]
 800631c:	4632      	mov	r2, r6
 800631e:	463b      	mov	r3, r7
 8006320:	4628      	mov	r0, r5
 8006322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006326:	f000 b817 	b.w	8006358 <_write_r>

0800632a <__sseek>:
 800632a:	b510      	push	{r4, lr}
 800632c:	460c      	mov	r4, r1
 800632e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006332:	f000 feb3 	bl	800709c <_lseek_r>
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	bf15      	itete	ne
 800633c:	6560      	strne	r0, [r4, #84]	; 0x54
 800633e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006342:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006346:	81a3      	strheq	r3, [r4, #12]
 8006348:	bf18      	it	ne
 800634a:	81a3      	strhne	r3, [r4, #12]
 800634c:	bd10      	pop	{r4, pc}

0800634e <__sclose>:
 800634e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006352:	f000 b813 	b.w	800637c <_close_r>
	...

08006358 <_write_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4d07      	ldr	r5, [pc, #28]	; (8006378 <_write_r+0x20>)
 800635c:	4604      	mov	r4, r0
 800635e:	4608      	mov	r0, r1
 8006360:	4611      	mov	r1, r2
 8006362:	2200      	movs	r2, #0
 8006364:	602a      	str	r2, [r5, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	f7fb fc35 	bl	8001bd6 <_write>
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	d102      	bne.n	8006376 <_write_r+0x1e>
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	b103      	cbz	r3, 8006376 <_write_r+0x1e>
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	200005ac 	.word	0x200005ac

0800637c <_close_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4d06      	ldr	r5, [pc, #24]	; (8006398 <_close_r+0x1c>)
 8006380:	2300      	movs	r3, #0
 8006382:	4604      	mov	r4, r0
 8006384:	4608      	mov	r0, r1
 8006386:	602b      	str	r3, [r5, #0]
 8006388:	f7fb fc41 	bl	8001c0e <_close>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_close_r+0x1a>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	b103      	cbz	r3, 8006396 <_close_r+0x1a>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	200005ac 	.word	0x200005ac

0800639c <quorem>:
 800639c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a0:	6903      	ldr	r3, [r0, #16]
 80063a2:	690c      	ldr	r4, [r1, #16]
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	4607      	mov	r7, r0
 80063a8:	f2c0 8081 	blt.w	80064ae <quorem+0x112>
 80063ac:	3c01      	subs	r4, #1
 80063ae:	f101 0814 	add.w	r8, r1, #20
 80063b2:	f100 0514 	add.w	r5, r0, #20
 80063b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063c4:	3301      	adds	r3, #1
 80063c6:	429a      	cmp	r2, r3
 80063c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80063d4:	d331      	bcc.n	800643a <quorem+0x9e>
 80063d6:	f04f 0e00 	mov.w	lr, #0
 80063da:	4640      	mov	r0, r8
 80063dc:	46ac      	mov	ip, r5
 80063de:	46f2      	mov	sl, lr
 80063e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80063e4:	b293      	uxth	r3, r2
 80063e6:	fb06 e303 	mla	r3, r6, r3, lr
 80063ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	ebaa 0303 	sub.w	r3, sl, r3
 80063f4:	f8dc a000 	ldr.w	sl, [ip]
 80063f8:	0c12      	lsrs	r2, r2, #16
 80063fa:	fa13 f38a 	uxtah	r3, r3, sl
 80063fe:	fb06 e202 	mla	r2, r6, r2, lr
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	9b00      	ldr	r3, [sp, #0]
 8006406:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800640a:	b292      	uxth	r2, r2
 800640c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006410:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006414:	f8bd 3000 	ldrh.w	r3, [sp]
 8006418:	4581      	cmp	r9, r0
 800641a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800641e:	f84c 3b04 	str.w	r3, [ip], #4
 8006422:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006426:	d2db      	bcs.n	80063e0 <quorem+0x44>
 8006428:	f855 300b 	ldr.w	r3, [r5, fp]
 800642c:	b92b      	cbnz	r3, 800643a <quorem+0x9e>
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	3b04      	subs	r3, #4
 8006432:	429d      	cmp	r5, r3
 8006434:	461a      	mov	r2, r3
 8006436:	d32e      	bcc.n	8006496 <quorem+0xfa>
 8006438:	613c      	str	r4, [r7, #16]
 800643a:	4638      	mov	r0, r7
 800643c:	f001 f8dc 	bl	80075f8 <__mcmp>
 8006440:	2800      	cmp	r0, #0
 8006442:	db24      	blt.n	800648e <quorem+0xf2>
 8006444:	3601      	adds	r6, #1
 8006446:	4628      	mov	r0, r5
 8006448:	f04f 0c00 	mov.w	ip, #0
 800644c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006450:	f8d0 e000 	ldr.w	lr, [r0]
 8006454:	b293      	uxth	r3, r2
 8006456:	ebac 0303 	sub.w	r3, ip, r3
 800645a:	0c12      	lsrs	r2, r2, #16
 800645c:	fa13 f38e 	uxtah	r3, r3, lr
 8006460:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006468:	b29b      	uxth	r3, r3
 800646a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800646e:	45c1      	cmp	r9, r8
 8006470:	f840 3b04 	str.w	r3, [r0], #4
 8006474:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006478:	d2e8      	bcs.n	800644c <quorem+0xb0>
 800647a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800647e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006482:	b922      	cbnz	r2, 800648e <quorem+0xf2>
 8006484:	3b04      	subs	r3, #4
 8006486:	429d      	cmp	r5, r3
 8006488:	461a      	mov	r2, r3
 800648a:	d30a      	bcc.n	80064a2 <quorem+0x106>
 800648c:	613c      	str	r4, [r7, #16]
 800648e:	4630      	mov	r0, r6
 8006490:	b003      	add	sp, #12
 8006492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	3b04      	subs	r3, #4
 800649a:	2a00      	cmp	r2, #0
 800649c:	d1cc      	bne.n	8006438 <quorem+0x9c>
 800649e:	3c01      	subs	r4, #1
 80064a0:	e7c7      	b.n	8006432 <quorem+0x96>
 80064a2:	6812      	ldr	r2, [r2, #0]
 80064a4:	3b04      	subs	r3, #4
 80064a6:	2a00      	cmp	r2, #0
 80064a8:	d1f0      	bne.n	800648c <quorem+0xf0>
 80064aa:	3c01      	subs	r4, #1
 80064ac:	e7eb      	b.n	8006486 <quorem+0xea>
 80064ae:	2000      	movs	r0, #0
 80064b0:	e7ee      	b.n	8006490 <quorem+0xf4>
 80064b2:	0000      	movs	r0, r0
 80064b4:	0000      	movs	r0, r0
	...

080064b8 <_dtoa_r>:
 80064b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	ed2d 8b04 	vpush	{d8-d9}
 80064c0:	ec57 6b10 	vmov	r6, r7, d0
 80064c4:	b093      	sub	sp, #76	; 0x4c
 80064c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064cc:	9106      	str	r1, [sp, #24]
 80064ce:	ee10 aa10 	vmov	sl, s0
 80064d2:	4604      	mov	r4, r0
 80064d4:	9209      	str	r2, [sp, #36]	; 0x24
 80064d6:	930c      	str	r3, [sp, #48]	; 0x30
 80064d8:	46bb      	mov	fp, r7
 80064da:	b975      	cbnz	r5, 80064fa <_dtoa_r+0x42>
 80064dc:	2010      	movs	r0, #16
 80064de:	f7ff f93f 	bl	8005760 <malloc>
 80064e2:	4602      	mov	r2, r0
 80064e4:	6260      	str	r0, [r4, #36]	; 0x24
 80064e6:	b920      	cbnz	r0, 80064f2 <_dtoa_r+0x3a>
 80064e8:	4ba7      	ldr	r3, [pc, #668]	; (8006788 <_dtoa_r+0x2d0>)
 80064ea:	21ea      	movs	r1, #234	; 0xea
 80064ec:	48a7      	ldr	r0, [pc, #668]	; (800678c <_dtoa_r+0x2d4>)
 80064ee:	f001 ff97 	bl	8008420 <__assert_func>
 80064f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064f6:	6005      	str	r5, [r0, #0]
 80064f8:	60c5      	str	r5, [r0, #12]
 80064fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064fc:	6819      	ldr	r1, [r3, #0]
 80064fe:	b151      	cbz	r1, 8006516 <_dtoa_r+0x5e>
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	604a      	str	r2, [r1, #4]
 8006504:	2301      	movs	r3, #1
 8006506:	4093      	lsls	r3, r2
 8006508:	608b      	str	r3, [r1, #8]
 800650a:	4620      	mov	r0, r4
 800650c:	f000 fe32 	bl	8007174 <_Bfree>
 8006510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	1e3b      	subs	r3, r7, #0
 8006518:	bfaa      	itet	ge
 800651a:	2300      	movge	r3, #0
 800651c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006520:	f8c8 3000 	strge.w	r3, [r8]
 8006524:	4b9a      	ldr	r3, [pc, #616]	; (8006790 <_dtoa_r+0x2d8>)
 8006526:	bfbc      	itt	lt
 8006528:	2201      	movlt	r2, #1
 800652a:	f8c8 2000 	strlt.w	r2, [r8]
 800652e:	ea33 030b 	bics.w	r3, r3, fp
 8006532:	d11b      	bne.n	800656c <_dtoa_r+0xb4>
 8006534:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006536:	f242 730f 	movw	r3, #9999	; 0x270f
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006540:	4333      	orrs	r3, r6
 8006542:	f000 8592 	beq.w	800706a <_dtoa_r+0xbb2>
 8006546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006548:	b963      	cbnz	r3, 8006564 <_dtoa_r+0xac>
 800654a:	4b92      	ldr	r3, [pc, #584]	; (8006794 <_dtoa_r+0x2dc>)
 800654c:	e022      	b.n	8006594 <_dtoa_r+0xdc>
 800654e:	4b92      	ldr	r3, [pc, #584]	; (8006798 <_dtoa_r+0x2e0>)
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	3308      	adds	r3, #8
 8006554:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	9801      	ldr	r0, [sp, #4]
 800655a:	b013      	add	sp, #76	; 0x4c
 800655c:	ecbd 8b04 	vpop	{d8-d9}
 8006560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006564:	4b8b      	ldr	r3, [pc, #556]	; (8006794 <_dtoa_r+0x2dc>)
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	3303      	adds	r3, #3
 800656a:	e7f3      	b.n	8006554 <_dtoa_r+0x9c>
 800656c:	2200      	movs	r2, #0
 800656e:	2300      	movs	r3, #0
 8006570:	4650      	mov	r0, sl
 8006572:	4659      	mov	r1, fp
 8006574:	f7fa fac0 	bl	8000af8 <__aeabi_dcmpeq>
 8006578:	ec4b ab19 	vmov	d9, sl, fp
 800657c:	4680      	mov	r8, r0
 800657e:	b158      	cbz	r0, 8006598 <_dtoa_r+0xe0>
 8006580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006582:	2301      	movs	r3, #1
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 856b 	beq.w	8007064 <_dtoa_r+0xbac>
 800658e:	4883      	ldr	r0, [pc, #524]	; (800679c <_dtoa_r+0x2e4>)
 8006590:	6018      	str	r0, [r3, #0]
 8006592:	1e43      	subs	r3, r0, #1
 8006594:	9301      	str	r3, [sp, #4]
 8006596:	e7df      	b.n	8006558 <_dtoa_r+0xa0>
 8006598:	ec4b ab10 	vmov	d0, sl, fp
 800659c:	aa10      	add	r2, sp, #64	; 0x40
 800659e:	a911      	add	r1, sp, #68	; 0x44
 80065a0:	4620      	mov	r0, r4
 80065a2:	f001 f8cf 	bl	8007744 <__d2b>
 80065a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80065aa:	ee08 0a10 	vmov	s16, r0
 80065ae:	2d00      	cmp	r5, #0
 80065b0:	f000 8084 	beq.w	80066bc <_dtoa_r+0x204>
 80065b4:	ee19 3a90 	vmov	r3, s19
 80065b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80065c0:	4656      	mov	r6, sl
 80065c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80065c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80065ce:	4b74      	ldr	r3, [pc, #464]	; (80067a0 <_dtoa_r+0x2e8>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	4630      	mov	r0, r6
 80065d4:	4639      	mov	r1, r7
 80065d6:	f7f9 fe6f 	bl	80002b8 <__aeabi_dsub>
 80065da:	a365      	add	r3, pc, #404	; (adr r3, 8006770 <_dtoa_r+0x2b8>)
 80065dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e0:	f7fa f822 	bl	8000628 <__aeabi_dmul>
 80065e4:	a364      	add	r3, pc, #400	; (adr r3, 8006778 <_dtoa_r+0x2c0>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f7f9 fe67 	bl	80002bc <__adddf3>
 80065ee:	4606      	mov	r6, r0
 80065f0:	4628      	mov	r0, r5
 80065f2:	460f      	mov	r7, r1
 80065f4:	f7f9 ffae 	bl	8000554 <__aeabi_i2d>
 80065f8:	a361      	add	r3, pc, #388	; (adr r3, 8006780 <_dtoa_r+0x2c8>)
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f7fa f813 	bl	8000628 <__aeabi_dmul>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4630      	mov	r0, r6
 8006608:	4639      	mov	r1, r7
 800660a:	f7f9 fe57 	bl	80002bc <__adddf3>
 800660e:	4606      	mov	r6, r0
 8006610:	460f      	mov	r7, r1
 8006612:	f7fa fab9 	bl	8000b88 <__aeabi_d2iz>
 8006616:	2200      	movs	r2, #0
 8006618:	9000      	str	r0, [sp, #0]
 800661a:	2300      	movs	r3, #0
 800661c:	4630      	mov	r0, r6
 800661e:	4639      	mov	r1, r7
 8006620:	f7fa fa74 	bl	8000b0c <__aeabi_dcmplt>
 8006624:	b150      	cbz	r0, 800663c <_dtoa_r+0x184>
 8006626:	9800      	ldr	r0, [sp, #0]
 8006628:	f7f9 ff94 	bl	8000554 <__aeabi_i2d>
 800662c:	4632      	mov	r2, r6
 800662e:	463b      	mov	r3, r7
 8006630:	f7fa fa62 	bl	8000af8 <__aeabi_dcmpeq>
 8006634:	b910      	cbnz	r0, 800663c <_dtoa_r+0x184>
 8006636:	9b00      	ldr	r3, [sp, #0]
 8006638:	3b01      	subs	r3, #1
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	9b00      	ldr	r3, [sp, #0]
 800663e:	2b16      	cmp	r3, #22
 8006640:	d85a      	bhi.n	80066f8 <_dtoa_r+0x240>
 8006642:	9a00      	ldr	r2, [sp, #0]
 8006644:	4b57      	ldr	r3, [pc, #348]	; (80067a4 <_dtoa_r+0x2ec>)
 8006646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	ec51 0b19 	vmov	r0, r1, d9
 8006652:	f7fa fa5b 	bl	8000b0c <__aeabi_dcmplt>
 8006656:	2800      	cmp	r0, #0
 8006658:	d050      	beq.n	80066fc <_dtoa_r+0x244>
 800665a:	9b00      	ldr	r3, [sp, #0]
 800665c:	3b01      	subs	r3, #1
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	2300      	movs	r3, #0
 8006662:	930b      	str	r3, [sp, #44]	; 0x2c
 8006664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006666:	1b5d      	subs	r5, r3, r5
 8006668:	1e6b      	subs	r3, r5, #1
 800666a:	9305      	str	r3, [sp, #20]
 800666c:	bf45      	ittet	mi
 800666e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006672:	9304      	strmi	r3, [sp, #16]
 8006674:	2300      	movpl	r3, #0
 8006676:	2300      	movmi	r3, #0
 8006678:	bf4c      	ite	mi
 800667a:	9305      	strmi	r3, [sp, #20]
 800667c:	9304      	strpl	r3, [sp, #16]
 800667e:	9b00      	ldr	r3, [sp, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	db3d      	blt.n	8006700 <_dtoa_r+0x248>
 8006684:	9b05      	ldr	r3, [sp, #20]
 8006686:	9a00      	ldr	r2, [sp, #0]
 8006688:	920a      	str	r2, [sp, #40]	; 0x28
 800668a:	4413      	add	r3, r2
 800668c:	9305      	str	r3, [sp, #20]
 800668e:	2300      	movs	r3, #0
 8006690:	9307      	str	r3, [sp, #28]
 8006692:	9b06      	ldr	r3, [sp, #24]
 8006694:	2b09      	cmp	r3, #9
 8006696:	f200 8089 	bhi.w	80067ac <_dtoa_r+0x2f4>
 800669a:	2b05      	cmp	r3, #5
 800669c:	bfc4      	itt	gt
 800669e:	3b04      	subgt	r3, #4
 80066a0:	9306      	strgt	r3, [sp, #24]
 80066a2:	9b06      	ldr	r3, [sp, #24]
 80066a4:	f1a3 0302 	sub.w	r3, r3, #2
 80066a8:	bfcc      	ite	gt
 80066aa:	2500      	movgt	r5, #0
 80066ac:	2501      	movle	r5, #1
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	f200 8087 	bhi.w	80067c2 <_dtoa_r+0x30a>
 80066b4:	e8df f003 	tbb	[pc, r3]
 80066b8:	59383a2d 	.word	0x59383a2d
 80066bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80066c0:	441d      	add	r5, r3
 80066c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	bfc1      	itttt	gt
 80066ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80066d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80066d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066da:	bfda      	itte	le
 80066dc:	f1c3 0320 	rsble	r3, r3, #32
 80066e0:	fa06 f003 	lslle.w	r0, r6, r3
 80066e4:	4318      	orrgt	r0, r3
 80066e6:	f7f9 ff25 	bl	8000534 <__aeabi_ui2d>
 80066ea:	2301      	movs	r3, #1
 80066ec:	4606      	mov	r6, r0
 80066ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80066f2:	3d01      	subs	r5, #1
 80066f4:	930e      	str	r3, [sp, #56]	; 0x38
 80066f6:	e76a      	b.n	80065ce <_dtoa_r+0x116>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e7b2      	b.n	8006662 <_dtoa_r+0x1aa>
 80066fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80066fe:	e7b1      	b.n	8006664 <_dtoa_r+0x1ac>
 8006700:	9b04      	ldr	r3, [sp, #16]
 8006702:	9a00      	ldr	r2, [sp, #0]
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	9304      	str	r3, [sp, #16]
 8006708:	4253      	negs	r3, r2
 800670a:	9307      	str	r3, [sp, #28]
 800670c:	2300      	movs	r3, #0
 800670e:	930a      	str	r3, [sp, #40]	; 0x28
 8006710:	e7bf      	b.n	8006692 <_dtoa_r+0x1da>
 8006712:	2300      	movs	r3, #0
 8006714:	9308      	str	r3, [sp, #32]
 8006716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006718:	2b00      	cmp	r3, #0
 800671a:	dc55      	bgt.n	80067c8 <_dtoa_r+0x310>
 800671c:	2301      	movs	r3, #1
 800671e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006722:	461a      	mov	r2, r3
 8006724:	9209      	str	r2, [sp, #36]	; 0x24
 8006726:	e00c      	b.n	8006742 <_dtoa_r+0x28a>
 8006728:	2301      	movs	r3, #1
 800672a:	e7f3      	b.n	8006714 <_dtoa_r+0x25c>
 800672c:	2300      	movs	r3, #0
 800672e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006730:	9308      	str	r3, [sp, #32]
 8006732:	9b00      	ldr	r3, [sp, #0]
 8006734:	4413      	add	r3, r2
 8006736:	9302      	str	r3, [sp, #8]
 8006738:	3301      	adds	r3, #1
 800673a:	2b01      	cmp	r3, #1
 800673c:	9303      	str	r3, [sp, #12]
 800673e:	bfb8      	it	lt
 8006740:	2301      	movlt	r3, #1
 8006742:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006744:	2200      	movs	r2, #0
 8006746:	6042      	str	r2, [r0, #4]
 8006748:	2204      	movs	r2, #4
 800674a:	f102 0614 	add.w	r6, r2, #20
 800674e:	429e      	cmp	r6, r3
 8006750:	6841      	ldr	r1, [r0, #4]
 8006752:	d93d      	bls.n	80067d0 <_dtoa_r+0x318>
 8006754:	4620      	mov	r0, r4
 8006756:	f000 fccd 	bl	80070f4 <_Balloc>
 800675a:	9001      	str	r0, [sp, #4]
 800675c:	2800      	cmp	r0, #0
 800675e:	d13b      	bne.n	80067d8 <_dtoa_r+0x320>
 8006760:	4b11      	ldr	r3, [pc, #68]	; (80067a8 <_dtoa_r+0x2f0>)
 8006762:	4602      	mov	r2, r0
 8006764:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006768:	e6c0      	b.n	80064ec <_dtoa_r+0x34>
 800676a:	2301      	movs	r3, #1
 800676c:	e7df      	b.n	800672e <_dtoa_r+0x276>
 800676e:	bf00      	nop
 8006770:	636f4361 	.word	0x636f4361
 8006774:	3fd287a7 	.word	0x3fd287a7
 8006778:	8b60c8b3 	.word	0x8b60c8b3
 800677c:	3fc68a28 	.word	0x3fc68a28
 8006780:	509f79fb 	.word	0x509f79fb
 8006784:	3fd34413 	.word	0x3fd34413
 8006788:	08009f3b 	.word	0x08009f3b
 800678c:	08009f52 	.word	0x08009f52
 8006790:	7ff00000 	.word	0x7ff00000
 8006794:	08009f37 	.word	0x08009f37
 8006798:	08009f2e 	.word	0x08009f2e
 800679c:	0800a132 	.word	0x0800a132
 80067a0:	3ff80000 	.word	0x3ff80000
 80067a4:	0800a048 	.word	0x0800a048
 80067a8:	08009fad 	.word	0x08009fad
 80067ac:	2501      	movs	r5, #1
 80067ae:	2300      	movs	r3, #0
 80067b0:	9306      	str	r3, [sp, #24]
 80067b2:	9508      	str	r5, [sp, #32]
 80067b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067bc:	2200      	movs	r2, #0
 80067be:	2312      	movs	r3, #18
 80067c0:	e7b0      	b.n	8006724 <_dtoa_r+0x26c>
 80067c2:	2301      	movs	r3, #1
 80067c4:	9308      	str	r3, [sp, #32]
 80067c6:	e7f5      	b.n	80067b4 <_dtoa_r+0x2fc>
 80067c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067ce:	e7b8      	b.n	8006742 <_dtoa_r+0x28a>
 80067d0:	3101      	adds	r1, #1
 80067d2:	6041      	str	r1, [r0, #4]
 80067d4:	0052      	lsls	r2, r2, #1
 80067d6:	e7b8      	b.n	800674a <_dtoa_r+0x292>
 80067d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067da:	9a01      	ldr	r2, [sp, #4]
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	2b0e      	cmp	r3, #14
 80067e2:	f200 809d 	bhi.w	8006920 <_dtoa_r+0x468>
 80067e6:	2d00      	cmp	r5, #0
 80067e8:	f000 809a 	beq.w	8006920 <_dtoa_r+0x468>
 80067ec:	9b00      	ldr	r3, [sp, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	dd32      	ble.n	8006858 <_dtoa_r+0x3a0>
 80067f2:	4ab7      	ldr	r2, [pc, #732]	; (8006ad0 <_dtoa_r+0x618>)
 80067f4:	f003 030f 	and.w	r3, r3, #15
 80067f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006800:	9b00      	ldr	r3, [sp, #0]
 8006802:	05d8      	lsls	r0, r3, #23
 8006804:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006808:	d516      	bpl.n	8006838 <_dtoa_r+0x380>
 800680a:	4bb2      	ldr	r3, [pc, #712]	; (8006ad4 <_dtoa_r+0x61c>)
 800680c:	ec51 0b19 	vmov	r0, r1, d9
 8006810:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006814:	f7fa f832 	bl	800087c <__aeabi_ddiv>
 8006818:	f007 070f 	and.w	r7, r7, #15
 800681c:	4682      	mov	sl, r0
 800681e:	468b      	mov	fp, r1
 8006820:	2503      	movs	r5, #3
 8006822:	4eac      	ldr	r6, [pc, #688]	; (8006ad4 <_dtoa_r+0x61c>)
 8006824:	b957      	cbnz	r7, 800683c <_dtoa_r+0x384>
 8006826:	4642      	mov	r2, r8
 8006828:	464b      	mov	r3, r9
 800682a:	4650      	mov	r0, sl
 800682c:	4659      	mov	r1, fp
 800682e:	f7fa f825 	bl	800087c <__aeabi_ddiv>
 8006832:	4682      	mov	sl, r0
 8006834:	468b      	mov	fp, r1
 8006836:	e028      	b.n	800688a <_dtoa_r+0x3d2>
 8006838:	2502      	movs	r5, #2
 800683a:	e7f2      	b.n	8006822 <_dtoa_r+0x36a>
 800683c:	07f9      	lsls	r1, r7, #31
 800683e:	d508      	bpl.n	8006852 <_dtoa_r+0x39a>
 8006840:	4640      	mov	r0, r8
 8006842:	4649      	mov	r1, r9
 8006844:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006848:	f7f9 feee 	bl	8000628 <__aeabi_dmul>
 800684c:	3501      	adds	r5, #1
 800684e:	4680      	mov	r8, r0
 8006850:	4689      	mov	r9, r1
 8006852:	107f      	asrs	r7, r7, #1
 8006854:	3608      	adds	r6, #8
 8006856:	e7e5      	b.n	8006824 <_dtoa_r+0x36c>
 8006858:	f000 809b 	beq.w	8006992 <_dtoa_r+0x4da>
 800685c:	9b00      	ldr	r3, [sp, #0]
 800685e:	4f9d      	ldr	r7, [pc, #628]	; (8006ad4 <_dtoa_r+0x61c>)
 8006860:	425e      	negs	r6, r3
 8006862:	4b9b      	ldr	r3, [pc, #620]	; (8006ad0 <_dtoa_r+0x618>)
 8006864:	f006 020f 	and.w	r2, r6, #15
 8006868:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	ec51 0b19 	vmov	r0, r1, d9
 8006874:	f7f9 fed8 	bl	8000628 <__aeabi_dmul>
 8006878:	1136      	asrs	r6, r6, #4
 800687a:	4682      	mov	sl, r0
 800687c:	468b      	mov	fp, r1
 800687e:	2300      	movs	r3, #0
 8006880:	2502      	movs	r5, #2
 8006882:	2e00      	cmp	r6, #0
 8006884:	d17a      	bne.n	800697c <_dtoa_r+0x4c4>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1d3      	bne.n	8006832 <_dtoa_r+0x37a>
 800688a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 8082 	beq.w	8006996 <_dtoa_r+0x4de>
 8006892:	4b91      	ldr	r3, [pc, #580]	; (8006ad8 <_dtoa_r+0x620>)
 8006894:	2200      	movs	r2, #0
 8006896:	4650      	mov	r0, sl
 8006898:	4659      	mov	r1, fp
 800689a:	f7fa f937 	bl	8000b0c <__aeabi_dcmplt>
 800689e:	2800      	cmp	r0, #0
 80068a0:	d079      	beq.n	8006996 <_dtoa_r+0x4de>
 80068a2:	9b03      	ldr	r3, [sp, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d076      	beq.n	8006996 <_dtoa_r+0x4de>
 80068a8:	9b02      	ldr	r3, [sp, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	dd36      	ble.n	800691c <_dtoa_r+0x464>
 80068ae:	9b00      	ldr	r3, [sp, #0]
 80068b0:	4650      	mov	r0, sl
 80068b2:	4659      	mov	r1, fp
 80068b4:	1e5f      	subs	r7, r3, #1
 80068b6:	2200      	movs	r2, #0
 80068b8:	4b88      	ldr	r3, [pc, #544]	; (8006adc <_dtoa_r+0x624>)
 80068ba:	f7f9 feb5 	bl	8000628 <__aeabi_dmul>
 80068be:	9e02      	ldr	r6, [sp, #8]
 80068c0:	4682      	mov	sl, r0
 80068c2:	468b      	mov	fp, r1
 80068c4:	3501      	adds	r5, #1
 80068c6:	4628      	mov	r0, r5
 80068c8:	f7f9 fe44 	bl	8000554 <__aeabi_i2d>
 80068cc:	4652      	mov	r2, sl
 80068ce:	465b      	mov	r3, fp
 80068d0:	f7f9 feaa 	bl	8000628 <__aeabi_dmul>
 80068d4:	4b82      	ldr	r3, [pc, #520]	; (8006ae0 <_dtoa_r+0x628>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	f7f9 fcf0 	bl	80002bc <__adddf3>
 80068dc:	46d0      	mov	r8, sl
 80068de:	46d9      	mov	r9, fp
 80068e0:	4682      	mov	sl, r0
 80068e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80068e6:	2e00      	cmp	r6, #0
 80068e8:	d158      	bne.n	800699c <_dtoa_r+0x4e4>
 80068ea:	4b7e      	ldr	r3, [pc, #504]	; (8006ae4 <_dtoa_r+0x62c>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	4640      	mov	r0, r8
 80068f0:	4649      	mov	r1, r9
 80068f2:	f7f9 fce1 	bl	80002b8 <__aeabi_dsub>
 80068f6:	4652      	mov	r2, sl
 80068f8:	465b      	mov	r3, fp
 80068fa:	4680      	mov	r8, r0
 80068fc:	4689      	mov	r9, r1
 80068fe:	f7fa f923 	bl	8000b48 <__aeabi_dcmpgt>
 8006902:	2800      	cmp	r0, #0
 8006904:	f040 8295 	bne.w	8006e32 <_dtoa_r+0x97a>
 8006908:	4652      	mov	r2, sl
 800690a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800690e:	4640      	mov	r0, r8
 8006910:	4649      	mov	r1, r9
 8006912:	f7fa f8fb 	bl	8000b0c <__aeabi_dcmplt>
 8006916:	2800      	cmp	r0, #0
 8006918:	f040 8289 	bne.w	8006e2e <_dtoa_r+0x976>
 800691c:	ec5b ab19 	vmov	sl, fp, d9
 8006920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006922:	2b00      	cmp	r3, #0
 8006924:	f2c0 8148 	blt.w	8006bb8 <_dtoa_r+0x700>
 8006928:	9a00      	ldr	r2, [sp, #0]
 800692a:	2a0e      	cmp	r2, #14
 800692c:	f300 8144 	bgt.w	8006bb8 <_dtoa_r+0x700>
 8006930:	4b67      	ldr	r3, [pc, #412]	; (8006ad0 <_dtoa_r+0x618>)
 8006932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006936:	e9d3 8900 	ldrd	r8, r9, [r3]
 800693a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800693c:	2b00      	cmp	r3, #0
 800693e:	f280 80d5 	bge.w	8006aec <_dtoa_r+0x634>
 8006942:	9b03      	ldr	r3, [sp, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	f300 80d1 	bgt.w	8006aec <_dtoa_r+0x634>
 800694a:	f040 826f 	bne.w	8006e2c <_dtoa_r+0x974>
 800694e:	4b65      	ldr	r3, [pc, #404]	; (8006ae4 <_dtoa_r+0x62c>)
 8006950:	2200      	movs	r2, #0
 8006952:	4640      	mov	r0, r8
 8006954:	4649      	mov	r1, r9
 8006956:	f7f9 fe67 	bl	8000628 <__aeabi_dmul>
 800695a:	4652      	mov	r2, sl
 800695c:	465b      	mov	r3, fp
 800695e:	f7fa f8e9 	bl	8000b34 <__aeabi_dcmpge>
 8006962:	9e03      	ldr	r6, [sp, #12]
 8006964:	4637      	mov	r7, r6
 8006966:	2800      	cmp	r0, #0
 8006968:	f040 8245 	bne.w	8006df6 <_dtoa_r+0x93e>
 800696c:	9d01      	ldr	r5, [sp, #4]
 800696e:	2331      	movs	r3, #49	; 0x31
 8006970:	f805 3b01 	strb.w	r3, [r5], #1
 8006974:	9b00      	ldr	r3, [sp, #0]
 8006976:	3301      	adds	r3, #1
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	e240      	b.n	8006dfe <_dtoa_r+0x946>
 800697c:	07f2      	lsls	r2, r6, #31
 800697e:	d505      	bpl.n	800698c <_dtoa_r+0x4d4>
 8006980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006984:	f7f9 fe50 	bl	8000628 <__aeabi_dmul>
 8006988:	3501      	adds	r5, #1
 800698a:	2301      	movs	r3, #1
 800698c:	1076      	asrs	r6, r6, #1
 800698e:	3708      	adds	r7, #8
 8006990:	e777      	b.n	8006882 <_dtoa_r+0x3ca>
 8006992:	2502      	movs	r5, #2
 8006994:	e779      	b.n	800688a <_dtoa_r+0x3d2>
 8006996:	9f00      	ldr	r7, [sp, #0]
 8006998:	9e03      	ldr	r6, [sp, #12]
 800699a:	e794      	b.n	80068c6 <_dtoa_r+0x40e>
 800699c:	9901      	ldr	r1, [sp, #4]
 800699e:	4b4c      	ldr	r3, [pc, #304]	; (8006ad0 <_dtoa_r+0x618>)
 80069a0:	4431      	add	r1, r6
 80069a2:	910d      	str	r1, [sp, #52]	; 0x34
 80069a4:	9908      	ldr	r1, [sp, #32]
 80069a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80069aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069ae:	2900      	cmp	r1, #0
 80069b0:	d043      	beq.n	8006a3a <_dtoa_r+0x582>
 80069b2:	494d      	ldr	r1, [pc, #308]	; (8006ae8 <_dtoa_r+0x630>)
 80069b4:	2000      	movs	r0, #0
 80069b6:	f7f9 ff61 	bl	800087c <__aeabi_ddiv>
 80069ba:	4652      	mov	r2, sl
 80069bc:	465b      	mov	r3, fp
 80069be:	f7f9 fc7b 	bl	80002b8 <__aeabi_dsub>
 80069c2:	9d01      	ldr	r5, [sp, #4]
 80069c4:	4682      	mov	sl, r0
 80069c6:	468b      	mov	fp, r1
 80069c8:	4649      	mov	r1, r9
 80069ca:	4640      	mov	r0, r8
 80069cc:	f7fa f8dc 	bl	8000b88 <__aeabi_d2iz>
 80069d0:	4606      	mov	r6, r0
 80069d2:	f7f9 fdbf 	bl	8000554 <__aeabi_i2d>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4640      	mov	r0, r8
 80069dc:	4649      	mov	r1, r9
 80069de:	f7f9 fc6b 	bl	80002b8 <__aeabi_dsub>
 80069e2:	3630      	adds	r6, #48	; 0x30
 80069e4:	f805 6b01 	strb.w	r6, [r5], #1
 80069e8:	4652      	mov	r2, sl
 80069ea:	465b      	mov	r3, fp
 80069ec:	4680      	mov	r8, r0
 80069ee:	4689      	mov	r9, r1
 80069f0:	f7fa f88c 	bl	8000b0c <__aeabi_dcmplt>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d163      	bne.n	8006ac0 <_dtoa_r+0x608>
 80069f8:	4642      	mov	r2, r8
 80069fa:	464b      	mov	r3, r9
 80069fc:	4936      	ldr	r1, [pc, #216]	; (8006ad8 <_dtoa_r+0x620>)
 80069fe:	2000      	movs	r0, #0
 8006a00:	f7f9 fc5a 	bl	80002b8 <__aeabi_dsub>
 8006a04:	4652      	mov	r2, sl
 8006a06:	465b      	mov	r3, fp
 8006a08:	f7fa f880 	bl	8000b0c <__aeabi_dcmplt>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	f040 80b5 	bne.w	8006b7c <_dtoa_r+0x6c4>
 8006a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a14:	429d      	cmp	r5, r3
 8006a16:	d081      	beq.n	800691c <_dtoa_r+0x464>
 8006a18:	4b30      	ldr	r3, [pc, #192]	; (8006adc <_dtoa_r+0x624>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	4650      	mov	r0, sl
 8006a1e:	4659      	mov	r1, fp
 8006a20:	f7f9 fe02 	bl	8000628 <__aeabi_dmul>
 8006a24:	4b2d      	ldr	r3, [pc, #180]	; (8006adc <_dtoa_r+0x624>)
 8006a26:	4682      	mov	sl, r0
 8006a28:	468b      	mov	fp, r1
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f7f9 fdfa 	bl	8000628 <__aeabi_dmul>
 8006a34:	4680      	mov	r8, r0
 8006a36:	4689      	mov	r9, r1
 8006a38:	e7c6      	b.n	80069c8 <_dtoa_r+0x510>
 8006a3a:	4650      	mov	r0, sl
 8006a3c:	4659      	mov	r1, fp
 8006a3e:	f7f9 fdf3 	bl	8000628 <__aeabi_dmul>
 8006a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a44:	9d01      	ldr	r5, [sp, #4]
 8006a46:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a48:	4682      	mov	sl, r0
 8006a4a:	468b      	mov	fp, r1
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	4640      	mov	r0, r8
 8006a50:	f7fa f89a 	bl	8000b88 <__aeabi_d2iz>
 8006a54:	4606      	mov	r6, r0
 8006a56:	f7f9 fd7d 	bl	8000554 <__aeabi_i2d>
 8006a5a:	3630      	adds	r6, #48	; 0x30
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4640      	mov	r0, r8
 8006a62:	4649      	mov	r1, r9
 8006a64:	f7f9 fc28 	bl	80002b8 <__aeabi_dsub>
 8006a68:	f805 6b01 	strb.w	r6, [r5], #1
 8006a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a6e:	429d      	cmp	r5, r3
 8006a70:	4680      	mov	r8, r0
 8006a72:	4689      	mov	r9, r1
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	d124      	bne.n	8006ac4 <_dtoa_r+0x60c>
 8006a7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ae8 <_dtoa_r+0x630>)
 8006a7c:	4650      	mov	r0, sl
 8006a7e:	4659      	mov	r1, fp
 8006a80:	f7f9 fc1c 	bl	80002bc <__adddf3>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4640      	mov	r0, r8
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	f7fa f85c 	bl	8000b48 <__aeabi_dcmpgt>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d173      	bne.n	8006b7c <_dtoa_r+0x6c4>
 8006a94:	4652      	mov	r2, sl
 8006a96:	465b      	mov	r3, fp
 8006a98:	4913      	ldr	r1, [pc, #76]	; (8006ae8 <_dtoa_r+0x630>)
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	f7f9 fc0c 	bl	80002b8 <__aeabi_dsub>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4640      	mov	r0, r8
 8006aa6:	4649      	mov	r1, r9
 8006aa8:	f7fa f830 	bl	8000b0c <__aeabi_dcmplt>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	f43f af35 	beq.w	800691c <_dtoa_r+0x464>
 8006ab2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006ab4:	1e6b      	subs	r3, r5, #1
 8006ab6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ab8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006abc:	2b30      	cmp	r3, #48	; 0x30
 8006abe:	d0f8      	beq.n	8006ab2 <_dtoa_r+0x5fa>
 8006ac0:	9700      	str	r7, [sp, #0]
 8006ac2:	e049      	b.n	8006b58 <_dtoa_r+0x6a0>
 8006ac4:	4b05      	ldr	r3, [pc, #20]	; (8006adc <_dtoa_r+0x624>)
 8006ac6:	f7f9 fdaf 	bl	8000628 <__aeabi_dmul>
 8006aca:	4680      	mov	r8, r0
 8006acc:	4689      	mov	r9, r1
 8006ace:	e7bd      	b.n	8006a4c <_dtoa_r+0x594>
 8006ad0:	0800a048 	.word	0x0800a048
 8006ad4:	0800a020 	.word	0x0800a020
 8006ad8:	3ff00000 	.word	0x3ff00000
 8006adc:	40240000 	.word	0x40240000
 8006ae0:	401c0000 	.word	0x401c0000
 8006ae4:	40140000 	.word	0x40140000
 8006ae8:	3fe00000 	.word	0x3fe00000
 8006aec:	9d01      	ldr	r5, [sp, #4]
 8006aee:	4656      	mov	r6, sl
 8006af0:	465f      	mov	r7, fp
 8006af2:	4642      	mov	r2, r8
 8006af4:	464b      	mov	r3, r9
 8006af6:	4630      	mov	r0, r6
 8006af8:	4639      	mov	r1, r7
 8006afa:	f7f9 febf 	bl	800087c <__aeabi_ddiv>
 8006afe:	f7fa f843 	bl	8000b88 <__aeabi_d2iz>
 8006b02:	4682      	mov	sl, r0
 8006b04:	f7f9 fd26 	bl	8000554 <__aeabi_i2d>
 8006b08:	4642      	mov	r2, r8
 8006b0a:	464b      	mov	r3, r9
 8006b0c:	f7f9 fd8c 	bl	8000628 <__aeabi_dmul>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4630      	mov	r0, r6
 8006b16:	4639      	mov	r1, r7
 8006b18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006b1c:	f7f9 fbcc 	bl	80002b8 <__aeabi_dsub>
 8006b20:	f805 6b01 	strb.w	r6, [r5], #1
 8006b24:	9e01      	ldr	r6, [sp, #4]
 8006b26:	9f03      	ldr	r7, [sp, #12]
 8006b28:	1bae      	subs	r6, r5, r6
 8006b2a:	42b7      	cmp	r7, r6
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	d135      	bne.n	8006b9e <_dtoa_r+0x6e6>
 8006b32:	f7f9 fbc3 	bl	80002bc <__adddf3>
 8006b36:	4642      	mov	r2, r8
 8006b38:	464b      	mov	r3, r9
 8006b3a:	4606      	mov	r6, r0
 8006b3c:	460f      	mov	r7, r1
 8006b3e:	f7fa f803 	bl	8000b48 <__aeabi_dcmpgt>
 8006b42:	b9d0      	cbnz	r0, 8006b7a <_dtoa_r+0x6c2>
 8006b44:	4642      	mov	r2, r8
 8006b46:	464b      	mov	r3, r9
 8006b48:	4630      	mov	r0, r6
 8006b4a:	4639      	mov	r1, r7
 8006b4c:	f7f9 ffd4 	bl	8000af8 <__aeabi_dcmpeq>
 8006b50:	b110      	cbz	r0, 8006b58 <_dtoa_r+0x6a0>
 8006b52:	f01a 0f01 	tst.w	sl, #1
 8006b56:	d110      	bne.n	8006b7a <_dtoa_r+0x6c2>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	ee18 1a10 	vmov	r1, s16
 8006b5e:	f000 fb09 	bl	8007174 <_Bfree>
 8006b62:	2300      	movs	r3, #0
 8006b64:	9800      	ldr	r0, [sp, #0]
 8006b66:	702b      	strb	r3, [r5, #0]
 8006b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	6018      	str	r0, [r3, #0]
 8006b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f43f acf1 	beq.w	8006558 <_dtoa_r+0xa0>
 8006b76:	601d      	str	r5, [r3, #0]
 8006b78:	e4ee      	b.n	8006558 <_dtoa_r+0xa0>
 8006b7a:	9f00      	ldr	r7, [sp, #0]
 8006b7c:	462b      	mov	r3, r5
 8006b7e:	461d      	mov	r5, r3
 8006b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b84:	2a39      	cmp	r2, #57	; 0x39
 8006b86:	d106      	bne.n	8006b96 <_dtoa_r+0x6de>
 8006b88:	9a01      	ldr	r2, [sp, #4]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d1f7      	bne.n	8006b7e <_dtoa_r+0x6c6>
 8006b8e:	9901      	ldr	r1, [sp, #4]
 8006b90:	2230      	movs	r2, #48	; 0x30
 8006b92:	3701      	adds	r7, #1
 8006b94:	700a      	strb	r2, [r1, #0]
 8006b96:	781a      	ldrb	r2, [r3, #0]
 8006b98:	3201      	adds	r2, #1
 8006b9a:	701a      	strb	r2, [r3, #0]
 8006b9c:	e790      	b.n	8006ac0 <_dtoa_r+0x608>
 8006b9e:	4ba6      	ldr	r3, [pc, #664]	; (8006e38 <_dtoa_r+0x980>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f7f9 fd41 	bl	8000628 <__aeabi_dmul>
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2300      	movs	r3, #0
 8006baa:	4606      	mov	r6, r0
 8006bac:	460f      	mov	r7, r1
 8006bae:	f7f9 ffa3 	bl	8000af8 <__aeabi_dcmpeq>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d09d      	beq.n	8006af2 <_dtoa_r+0x63a>
 8006bb6:	e7cf      	b.n	8006b58 <_dtoa_r+0x6a0>
 8006bb8:	9a08      	ldr	r2, [sp, #32]
 8006bba:	2a00      	cmp	r2, #0
 8006bbc:	f000 80d7 	beq.w	8006d6e <_dtoa_r+0x8b6>
 8006bc0:	9a06      	ldr	r2, [sp, #24]
 8006bc2:	2a01      	cmp	r2, #1
 8006bc4:	f300 80ba 	bgt.w	8006d3c <_dtoa_r+0x884>
 8006bc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bca:	2a00      	cmp	r2, #0
 8006bcc:	f000 80b2 	beq.w	8006d34 <_dtoa_r+0x87c>
 8006bd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bd4:	9e07      	ldr	r6, [sp, #28]
 8006bd6:	9d04      	ldr	r5, [sp, #16]
 8006bd8:	9a04      	ldr	r2, [sp, #16]
 8006bda:	441a      	add	r2, r3
 8006bdc:	9204      	str	r2, [sp, #16]
 8006bde:	9a05      	ldr	r2, [sp, #20]
 8006be0:	2101      	movs	r1, #1
 8006be2:	441a      	add	r2, r3
 8006be4:	4620      	mov	r0, r4
 8006be6:	9205      	str	r2, [sp, #20]
 8006be8:	f000 fb7c 	bl	80072e4 <__i2b>
 8006bec:	4607      	mov	r7, r0
 8006bee:	2d00      	cmp	r5, #0
 8006bf0:	dd0c      	ble.n	8006c0c <_dtoa_r+0x754>
 8006bf2:	9b05      	ldr	r3, [sp, #20]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	dd09      	ble.n	8006c0c <_dtoa_r+0x754>
 8006bf8:	42ab      	cmp	r3, r5
 8006bfa:	9a04      	ldr	r2, [sp, #16]
 8006bfc:	bfa8      	it	ge
 8006bfe:	462b      	movge	r3, r5
 8006c00:	1ad2      	subs	r2, r2, r3
 8006c02:	9204      	str	r2, [sp, #16]
 8006c04:	9a05      	ldr	r2, [sp, #20]
 8006c06:	1aed      	subs	r5, r5, r3
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	9305      	str	r3, [sp, #20]
 8006c0c:	9b07      	ldr	r3, [sp, #28]
 8006c0e:	b31b      	cbz	r3, 8006c58 <_dtoa_r+0x7a0>
 8006c10:	9b08      	ldr	r3, [sp, #32]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 80af 	beq.w	8006d76 <_dtoa_r+0x8be>
 8006c18:	2e00      	cmp	r6, #0
 8006c1a:	dd13      	ble.n	8006c44 <_dtoa_r+0x78c>
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	4632      	mov	r2, r6
 8006c20:	4620      	mov	r0, r4
 8006c22:	f000 fc1f 	bl	8007464 <__pow5mult>
 8006c26:	ee18 2a10 	vmov	r2, s16
 8006c2a:	4601      	mov	r1, r0
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f000 fb6e 	bl	8007310 <__multiply>
 8006c34:	ee18 1a10 	vmov	r1, s16
 8006c38:	4680      	mov	r8, r0
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 fa9a 	bl	8007174 <_Bfree>
 8006c40:	ee08 8a10 	vmov	s16, r8
 8006c44:	9b07      	ldr	r3, [sp, #28]
 8006c46:	1b9a      	subs	r2, r3, r6
 8006c48:	d006      	beq.n	8006c58 <_dtoa_r+0x7a0>
 8006c4a:	ee18 1a10 	vmov	r1, s16
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f000 fc08 	bl	8007464 <__pow5mult>
 8006c54:	ee08 0a10 	vmov	s16, r0
 8006c58:	2101      	movs	r1, #1
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 fb42 	bl	80072e4 <__i2b>
 8006c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	4606      	mov	r6, r0
 8006c66:	f340 8088 	ble.w	8006d7a <_dtoa_r+0x8c2>
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4601      	mov	r1, r0
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 fbf8 	bl	8007464 <__pow5mult>
 8006c74:	9b06      	ldr	r3, [sp, #24]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	4606      	mov	r6, r0
 8006c7a:	f340 8081 	ble.w	8006d80 <_dtoa_r+0x8c8>
 8006c7e:	f04f 0800 	mov.w	r8, #0
 8006c82:	6933      	ldr	r3, [r6, #16]
 8006c84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c88:	6918      	ldr	r0, [r3, #16]
 8006c8a:	f000 fadb 	bl	8007244 <__hi0bits>
 8006c8e:	f1c0 0020 	rsb	r0, r0, #32
 8006c92:	9b05      	ldr	r3, [sp, #20]
 8006c94:	4418      	add	r0, r3
 8006c96:	f010 001f 	ands.w	r0, r0, #31
 8006c9a:	f000 8092 	beq.w	8006dc2 <_dtoa_r+0x90a>
 8006c9e:	f1c0 0320 	rsb	r3, r0, #32
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	f340 808a 	ble.w	8006dbc <_dtoa_r+0x904>
 8006ca8:	f1c0 001c 	rsb	r0, r0, #28
 8006cac:	9b04      	ldr	r3, [sp, #16]
 8006cae:	4403      	add	r3, r0
 8006cb0:	9304      	str	r3, [sp, #16]
 8006cb2:	9b05      	ldr	r3, [sp, #20]
 8006cb4:	4403      	add	r3, r0
 8006cb6:	4405      	add	r5, r0
 8006cb8:	9305      	str	r3, [sp, #20]
 8006cba:	9b04      	ldr	r3, [sp, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	dd07      	ble.n	8006cd0 <_dtoa_r+0x818>
 8006cc0:	ee18 1a10 	vmov	r1, s16
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f000 fc26 	bl	8007518 <__lshift>
 8006ccc:	ee08 0a10 	vmov	s16, r0
 8006cd0:	9b05      	ldr	r3, [sp, #20]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	dd05      	ble.n	8006ce2 <_dtoa_r+0x82a>
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 fc1c 	bl	8007518 <__lshift>
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d06e      	beq.n	8006dc6 <_dtoa_r+0x90e>
 8006ce8:	ee18 0a10 	vmov	r0, s16
 8006cec:	4631      	mov	r1, r6
 8006cee:	f000 fc83 	bl	80075f8 <__mcmp>
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	da67      	bge.n	8006dc6 <_dtoa_r+0x90e>
 8006cf6:	9b00      	ldr	r3, [sp, #0]
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	ee18 1a10 	vmov	r1, s16
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	220a      	movs	r2, #10
 8006d02:	2300      	movs	r3, #0
 8006d04:	4620      	mov	r0, r4
 8006d06:	f000 fa57 	bl	80071b8 <__multadd>
 8006d0a:	9b08      	ldr	r3, [sp, #32]
 8006d0c:	ee08 0a10 	vmov	s16, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 81b1 	beq.w	8007078 <_dtoa_r+0xbc0>
 8006d16:	2300      	movs	r3, #0
 8006d18:	4639      	mov	r1, r7
 8006d1a:	220a      	movs	r2, #10
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f000 fa4b 	bl	80071b8 <__multadd>
 8006d22:	9b02      	ldr	r3, [sp, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	4607      	mov	r7, r0
 8006d28:	f300 808e 	bgt.w	8006e48 <_dtoa_r+0x990>
 8006d2c:	9b06      	ldr	r3, [sp, #24]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	dc51      	bgt.n	8006dd6 <_dtoa_r+0x91e>
 8006d32:	e089      	b.n	8006e48 <_dtoa_r+0x990>
 8006d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d3a:	e74b      	b.n	8006bd4 <_dtoa_r+0x71c>
 8006d3c:	9b03      	ldr	r3, [sp, #12]
 8006d3e:	1e5e      	subs	r6, r3, #1
 8006d40:	9b07      	ldr	r3, [sp, #28]
 8006d42:	42b3      	cmp	r3, r6
 8006d44:	bfbf      	itttt	lt
 8006d46:	9b07      	ldrlt	r3, [sp, #28]
 8006d48:	9607      	strlt	r6, [sp, #28]
 8006d4a:	1af2      	sublt	r2, r6, r3
 8006d4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d4e:	bfb6      	itet	lt
 8006d50:	189b      	addlt	r3, r3, r2
 8006d52:	1b9e      	subge	r6, r3, r6
 8006d54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006d56:	9b03      	ldr	r3, [sp, #12]
 8006d58:	bfb8      	it	lt
 8006d5a:	2600      	movlt	r6, #0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bfb7      	itett	lt
 8006d60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006d64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d68:	1a9d      	sublt	r5, r3, r2
 8006d6a:	2300      	movlt	r3, #0
 8006d6c:	e734      	b.n	8006bd8 <_dtoa_r+0x720>
 8006d6e:	9e07      	ldr	r6, [sp, #28]
 8006d70:	9d04      	ldr	r5, [sp, #16]
 8006d72:	9f08      	ldr	r7, [sp, #32]
 8006d74:	e73b      	b.n	8006bee <_dtoa_r+0x736>
 8006d76:	9a07      	ldr	r2, [sp, #28]
 8006d78:	e767      	b.n	8006c4a <_dtoa_r+0x792>
 8006d7a:	9b06      	ldr	r3, [sp, #24]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	dc18      	bgt.n	8006db2 <_dtoa_r+0x8fa>
 8006d80:	f1ba 0f00 	cmp.w	sl, #0
 8006d84:	d115      	bne.n	8006db2 <_dtoa_r+0x8fa>
 8006d86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d8a:	b993      	cbnz	r3, 8006db2 <_dtoa_r+0x8fa>
 8006d8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d90:	0d1b      	lsrs	r3, r3, #20
 8006d92:	051b      	lsls	r3, r3, #20
 8006d94:	b183      	cbz	r3, 8006db8 <_dtoa_r+0x900>
 8006d96:	9b04      	ldr	r3, [sp, #16]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	9304      	str	r3, [sp, #16]
 8006d9c:	9b05      	ldr	r3, [sp, #20]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	9305      	str	r3, [sp, #20]
 8006da2:	f04f 0801 	mov.w	r8, #1
 8006da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f47f af6a 	bne.w	8006c82 <_dtoa_r+0x7ca>
 8006dae:	2001      	movs	r0, #1
 8006db0:	e76f      	b.n	8006c92 <_dtoa_r+0x7da>
 8006db2:	f04f 0800 	mov.w	r8, #0
 8006db6:	e7f6      	b.n	8006da6 <_dtoa_r+0x8ee>
 8006db8:	4698      	mov	r8, r3
 8006dba:	e7f4      	b.n	8006da6 <_dtoa_r+0x8ee>
 8006dbc:	f43f af7d 	beq.w	8006cba <_dtoa_r+0x802>
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	301c      	adds	r0, #28
 8006dc4:	e772      	b.n	8006cac <_dtoa_r+0x7f4>
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	dc37      	bgt.n	8006e3c <_dtoa_r+0x984>
 8006dcc:	9b06      	ldr	r3, [sp, #24]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	dd34      	ble.n	8006e3c <_dtoa_r+0x984>
 8006dd2:	9b03      	ldr	r3, [sp, #12]
 8006dd4:	9302      	str	r3, [sp, #8]
 8006dd6:	9b02      	ldr	r3, [sp, #8]
 8006dd8:	b96b      	cbnz	r3, 8006df6 <_dtoa_r+0x93e>
 8006dda:	4631      	mov	r1, r6
 8006ddc:	2205      	movs	r2, #5
 8006dde:	4620      	mov	r0, r4
 8006de0:	f000 f9ea 	bl	80071b8 <__multadd>
 8006de4:	4601      	mov	r1, r0
 8006de6:	4606      	mov	r6, r0
 8006de8:	ee18 0a10 	vmov	r0, s16
 8006dec:	f000 fc04 	bl	80075f8 <__mcmp>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	f73f adbb 	bgt.w	800696c <_dtoa_r+0x4b4>
 8006df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df8:	9d01      	ldr	r5, [sp, #4]
 8006dfa:	43db      	mvns	r3, r3
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	f04f 0800 	mov.w	r8, #0
 8006e02:	4631      	mov	r1, r6
 8006e04:	4620      	mov	r0, r4
 8006e06:	f000 f9b5 	bl	8007174 <_Bfree>
 8006e0a:	2f00      	cmp	r7, #0
 8006e0c:	f43f aea4 	beq.w	8006b58 <_dtoa_r+0x6a0>
 8006e10:	f1b8 0f00 	cmp.w	r8, #0
 8006e14:	d005      	beq.n	8006e22 <_dtoa_r+0x96a>
 8006e16:	45b8      	cmp	r8, r7
 8006e18:	d003      	beq.n	8006e22 <_dtoa_r+0x96a>
 8006e1a:	4641      	mov	r1, r8
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 f9a9 	bl	8007174 <_Bfree>
 8006e22:	4639      	mov	r1, r7
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 f9a5 	bl	8007174 <_Bfree>
 8006e2a:	e695      	b.n	8006b58 <_dtoa_r+0x6a0>
 8006e2c:	2600      	movs	r6, #0
 8006e2e:	4637      	mov	r7, r6
 8006e30:	e7e1      	b.n	8006df6 <_dtoa_r+0x93e>
 8006e32:	9700      	str	r7, [sp, #0]
 8006e34:	4637      	mov	r7, r6
 8006e36:	e599      	b.n	800696c <_dtoa_r+0x4b4>
 8006e38:	40240000 	.word	0x40240000
 8006e3c:	9b08      	ldr	r3, [sp, #32]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 80ca 	beq.w	8006fd8 <_dtoa_r+0xb20>
 8006e44:	9b03      	ldr	r3, [sp, #12]
 8006e46:	9302      	str	r3, [sp, #8]
 8006e48:	2d00      	cmp	r5, #0
 8006e4a:	dd05      	ble.n	8006e58 <_dtoa_r+0x9a0>
 8006e4c:	4639      	mov	r1, r7
 8006e4e:	462a      	mov	r2, r5
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 fb61 	bl	8007518 <__lshift>
 8006e56:	4607      	mov	r7, r0
 8006e58:	f1b8 0f00 	cmp.w	r8, #0
 8006e5c:	d05b      	beq.n	8006f16 <_dtoa_r+0xa5e>
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 f947 	bl	80070f4 <_Balloc>
 8006e66:	4605      	mov	r5, r0
 8006e68:	b928      	cbnz	r0, 8006e76 <_dtoa_r+0x9be>
 8006e6a:	4b87      	ldr	r3, [pc, #540]	; (8007088 <_dtoa_r+0xbd0>)
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e72:	f7ff bb3b 	b.w	80064ec <_dtoa_r+0x34>
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	3202      	adds	r2, #2
 8006e7a:	0092      	lsls	r2, r2, #2
 8006e7c:	f107 010c 	add.w	r1, r7, #12
 8006e80:	300c      	adds	r0, #12
 8006e82:	f000 f91d 	bl	80070c0 <memcpy>
 8006e86:	2201      	movs	r2, #1
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f000 fb44 	bl	8007518 <__lshift>
 8006e90:	9b01      	ldr	r3, [sp, #4]
 8006e92:	f103 0901 	add.w	r9, r3, #1
 8006e96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	9305      	str	r3, [sp, #20]
 8006e9e:	f00a 0301 	and.w	r3, sl, #1
 8006ea2:	46b8      	mov	r8, r7
 8006ea4:	9304      	str	r3, [sp, #16]
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	ee18 0a10 	vmov	r0, s16
 8006eae:	f7ff fa75 	bl	800639c <quorem>
 8006eb2:	4641      	mov	r1, r8
 8006eb4:	9002      	str	r0, [sp, #8]
 8006eb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006eba:	ee18 0a10 	vmov	r0, s16
 8006ebe:	f000 fb9b 	bl	80075f8 <__mcmp>
 8006ec2:	463a      	mov	r2, r7
 8006ec4:	9003      	str	r0, [sp, #12]
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f000 fbb1 	bl	8007630 <__mdiff>
 8006ece:	68c2      	ldr	r2, [r0, #12]
 8006ed0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	bb02      	cbnz	r2, 8006f1a <_dtoa_r+0xa62>
 8006ed8:	4601      	mov	r1, r0
 8006eda:	ee18 0a10 	vmov	r0, s16
 8006ede:	f000 fb8b 	bl	80075f8 <__mcmp>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	9207      	str	r2, [sp, #28]
 8006eea:	f000 f943 	bl	8007174 <_Bfree>
 8006eee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006ef2:	ea43 0102 	orr.w	r1, r3, r2
 8006ef6:	9b04      	ldr	r3, [sp, #16]
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	464d      	mov	r5, r9
 8006efc:	d10f      	bne.n	8006f1e <_dtoa_r+0xa66>
 8006efe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f02:	d02a      	beq.n	8006f5a <_dtoa_r+0xaa2>
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	dd02      	ble.n	8006f10 <_dtoa_r+0xa58>
 8006f0a:	9b02      	ldr	r3, [sp, #8]
 8006f0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006f10:	f88b a000 	strb.w	sl, [fp]
 8006f14:	e775      	b.n	8006e02 <_dtoa_r+0x94a>
 8006f16:	4638      	mov	r0, r7
 8006f18:	e7ba      	b.n	8006e90 <_dtoa_r+0x9d8>
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	e7e2      	b.n	8006ee4 <_dtoa_r+0xa2c>
 8006f1e:	9b03      	ldr	r3, [sp, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	db04      	blt.n	8006f2e <_dtoa_r+0xa76>
 8006f24:	9906      	ldr	r1, [sp, #24]
 8006f26:	430b      	orrs	r3, r1
 8006f28:	9904      	ldr	r1, [sp, #16]
 8006f2a:	430b      	orrs	r3, r1
 8006f2c:	d122      	bne.n	8006f74 <_dtoa_r+0xabc>
 8006f2e:	2a00      	cmp	r2, #0
 8006f30:	ddee      	ble.n	8006f10 <_dtoa_r+0xa58>
 8006f32:	ee18 1a10 	vmov	r1, s16
 8006f36:	2201      	movs	r2, #1
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f000 faed 	bl	8007518 <__lshift>
 8006f3e:	4631      	mov	r1, r6
 8006f40:	ee08 0a10 	vmov	s16, r0
 8006f44:	f000 fb58 	bl	80075f8 <__mcmp>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	dc03      	bgt.n	8006f54 <_dtoa_r+0xa9c>
 8006f4c:	d1e0      	bne.n	8006f10 <_dtoa_r+0xa58>
 8006f4e:	f01a 0f01 	tst.w	sl, #1
 8006f52:	d0dd      	beq.n	8006f10 <_dtoa_r+0xa58>
 8006f54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f58:	d1d7      	bne.n	8006f0a <_dtoa_r+0xa52>
 8006f5a:	2339      	movs	r3, #57	; 0x39
 8006f5c:	f88b 3000 	strb.w	r3, [fp]
 8006f60:	462b      	mov	r3, r5
 8006f62:	461d      	mov	r5, r3
 8006f64:	3b01      	subs	r3, #1
 8006f66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f6a:	2a39      	cmp	r2, #57	; 0x39
 8006f6c:	d071      	beq.n	8007052 <_dtoa_r+0xb9a>
 8006f6e:	3201      	adds	r2, #1
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	e746      	b.n	8006e02 <_dtoa_r+0x94a>
 8006f74:	2a00      	cmp	r2, #0
 8006f76:	dd07      	ble.n	8006f88 <_dtoa_r+0xad0>
 8006f78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f7c:	d0ed      	beq.n	8006f5a <_dtoa_r+0xaa2>
 8006f7e:	f10a 0301 	add.w	r3, sl, #1
 8006f82:	f88b 3000 	strb.w	r3, [fp]
 8006f86:	e73c      	b.n	8006e02 <_dtoa_r+0x94a>
 8006f88:	9b05      	ldr	r3, [sp, #20]
 8006f8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f8e:	4599      	cmp	r9, r3
 8006f90:	d047      	beq.n	8007022 <_dtoa_r+0xb6a>
 8006f92:	ee18 1a10 	vmov	r1, s16
 8006f96:	2300      	movs	r3, #0
 8006f98:	220a      	movs	r2, #10
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f000 f90c 	bl	80071b8 <__multadd>
 8006fa0:	45b8      	cmp	r8, r7
 8006fa2:	ee08 0a10 	vmov	s16, r0
 8006fa6:	f04f 0300 	mov.w	r3, #0
 8006faa:	f04f 020a 	mov.w	r2, #10
 8006fae:	4641      	mov	r1, r8
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	d106      	bne.n	8006fc2 <_dtoa_r+0xb0a>
 8006fb4:	f000 f900 	bl	80071b8 <__multadd>
 8006fb8:	4680      	mov	r8, r0
 8006fba:	4607      	mov	r7, r0
 8006fbc:	f109 0901 	add.w	r9, r9, #1
 8006fc0:	e772      	b.n	8006ea8 <_dtoa_r+0x9f0>
 8006fc2:	f000 f8f9 	bl	80071b8 <__multadd>
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	4680      	mov	r8, r0
 8006fca:	2300      	movs	r3, #0
 8006fcc:	220a      	movs	r2, #10
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f000 f8f2 	bl	80071b8 <__multadd>
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	e7f1      	b.n	8006fbc <_dtoa_r+0xb04>
 8006fd8:	9b03      	ldr	r3, [sp, #12]
 8006fda:	9302      	str	r3, [sp, #8]
 8006fdc:	9d01      	ldr	r5, [sp, #4]
 8006fde:	ee18 0a10 	vmov	r0, s16
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	f7ff f9da 	bl	800639c <quorem>
 8006fe8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006fec:	9b01      	ldr	r3, [sp, #4]
 8006fee:	f805 ab01 	strb.w	sl, [r5], #1
 8006ff2:	1aea      	subs	r2, r5, r3
 8006ff4:	9b02      	ldr	r3, [sp, #8]
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	dd09      	ble.n	800700e <_dtoa_r+0xb56>
 8006ffa:	ee18 1a10 	vmov	r1, s16
 8006ffe:	2300      	movs	r3, #0
 8007000:	220a      	movs	r2, #10
 8007002:	4620      	mov	r0, r4
 8007004:	f000 f8d8 	bl	80071b8 <__multadd>
 8007008:	ee08 0a10 	vmov	s16, r0
 800700c:	e7e7      	b.n	8006fde <_dtoa_r+0xb26>
 800700e:	9b02      	ldr	r3, [sp, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	bfc8      	it	gt
 8007014:	461d      	movgt	r5, r3
 8007016:	9b01      	ldr	r3, [sp, #4]
 8007018:	bfd8      	it	le
 800701a:	2501      	movle	r5, #1
 800701c:	441d      	add	r5, r3
 800701e:	f04f 0800 	mov.w	r8, #0
 8007022:	ee18 1a10 	vmov	r1, s16
 8007026:	2201      	movs	r2, #1
 8007028:	4620      	mov	r0, r4
 800702a:	f000 fa75 	bl	8007518 <__lshift>
 800702e:	4631      	mov	r1, r6
 8007030:	ee08 0a10 	vmov	s16, r0
 8007034:	f000 fae0 	bl	80075f8 <__mcmp>
 8007038:	2800      	cmp	r0, #0
 800703a:	dc91      	bgt.n	8006f60 <_dtoa_r+0xaa8>
 800703c:	d102      	bne.n	8007044 <_dtoa_r+0xb8c>
 800703e:	f01a 0f01 	tst.w	sl, #1
 8007042:	d18d      	bne.n	8006f60 <_dtoa_r+0xaa8>
 8007044:	462b      	mov	r3, r5
 8007046:	461d      	mov	r5, r3
 8007048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800704c:	2a30      	cmp	r2, #48	; 0x30
 800704e:	d0fa      	beq.n	8007046 <_dtoa_r+0xb8e>
 8007050:	e6d7      	b.n	8006e02 <_dtoa_r+0x94a>
 8007052:	9a01      	ldr	r2, [sp, #4]
 8007054:	429a      	cmp	r2, r3
 8007056:	d184      	bne.n	8006f62 <_dtoa_r+0xaaa>
 8007058:	9b00      	ldr	r3, [sp, #0]
 800705a:	3301      	adds	r3, #1
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	2331      	movs	r3, #49	; 0x31
 8007060:	7013      	strb	r3, [r2, #0]
 8007062:	e6ce      	b.n	8006e02 <_dtoa_r+0x94a>
 8007064:	4b09      	ldr	r3, [pc, #36]	; (800708c <_dtoa_r+0xbd4>)
 8007066:	f7ff ba95 	b.w	8006594 <_dtoa_r+0xdc>
 800706a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800706c:	2b00      	cmp	r3, #0
 800706e:	f47f aa6e 	bne.w	800654e <_dtoa_r+0x96>
 8007072:	4b07      	ldr	r3, [pc, #28]	; (8007090 <_dtoa_r+0xbd8>)
 8007074:	f7ff ba8e 	b.w	8006594 <_dtoa_r+0xdc>
 8007078:	9b02      	ldr	r3, [sp, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	dcae      	bgt.n	8006fdc <_dtoa_r+0xb24>
 800707e:	9b06      	ldr	r3, [sp, #24]
 8007080:	2b02      	cmp	r3, #2
 8007082:	f73f aea8 	bgt.w	8006dd6 <_dtoa_r+0x91e>
 8007086:	e7a9      	b.n	8006fdc <_dtoa_r+0xb24>
 8007088:	08009fad 	.word	0x08009fad
 800708c:	0800a131 	.word	0x0800a131
 8007090:	08009f2e 	.word	0x08009f2e

08007094 <_localeconv_r>:
 8007094:	4800      	ldr	r0, [pc, #0]	; (8007098 <_localeconv_r+0x4>)
 8007096:	4770      	bx	lr
 8007098:	20000164 	.word	0x20000164

0800709c <_lseek_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d07      	ldr	r5, [pc, #28]	; (80070bc <_lseek_r+0x20>)
 80070a0:	4604      	mov	r4, r0
 80070a2:	4608      	mov	r0, r1
 80070a4:	4611      	mov	r1, r2
 80070a6:	2200      	movs	r2, #0
 80070a8:	602a      	str	r2, [r5, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	f7fa fdd6 	bl	8001c5c <_lseek>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d102      	bne.n	80070ba <_lseek_r+0x1e>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	b103      	cbz	r3, 80070ba <_lseek_r+0x1e>
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	bd38      	pop	{r3, r4, r5, pc}
 80070bc:	200005ac 	.word	0x200005ac

080070c0 <memcpy>:
 80070c0:	440a      	add	r2, r1
 80070c2:	4291      	cmp	r1, r2
 80070c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80070c8:	d100      	bne.n	80070cc <memcpy+0xc>
 80070ca:	4770      	bx	lr
 80070cc:	b510      	push	{r4, lr}
 80070ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070d6:	4291      	cmp	r1, r2
 80070d8:	d1f9      	bne.n	80070ce <memcpy+0xe>
 80070da:	bd10      	pop	{r4, pc}

080070dc <__malloc_lock>:
 80070dc:	4801      	ldr	r0, [pc, #4]	; (80070e4 <__malloc_lock+0x8>)
 80070de:	f001 bb87 	b.w	80087f0 <__retarget_lock_acquire_recursive>
 80070e2:	bf00      	nop
 80070e4:	200005b0 	.word	0x200005b0

080070e8 <__malloc_unlock>:
 80070e8:	4801      	ldr	r0, [pc, #4]	; (80070f0 <__malloc_unlock+0x8>)
 80070ea:	f001 bb82 	b.w	80087f2 <__retarget_lock_release_recursive>
 80070ee:	bf00      	nop
 80070f0:	200005b0 	.word	0x200005b0

080070f4 <_Balloc>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070f8:	4604      	mov	r4, r0
 80070fa:	460d      	mov	r5, r1
 80070fc:	b976      	cbnz	r6, 800711c <_Balloc+0x28>
 80070fe:	2010      	movs	r0, #16
 8007100:	f7fe fb2e 	bl	8005760 <malloc>
 8007104:	4602      	mov	r2, r0
 8007106:	6260      	str	r0, [r4, #36]	; 0x24
 8007108:	b920      	cbnz	r0, 8007114 <_Balloc+0x20>
 800710a:	4b18      	ldr	r3, [pc, #96]	; (800716c <_Balloc+0x78>)
 800710c:	4818      	ldr	r0, [pc, #96]	; (8007170 <_Balloc+0x7c>)
 800710e:	2166      	movs	r1, #102	; 0x66
 8007110:	f001 f986 	bl	8008420 <__assert_func>
 8007114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007118:	6006      	str	r6, [r0, #0]
 800711a:	60c6      	str	r6, [r0, #12]
 800711c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800711e:	68f3      	ldr	r3, [r6, #12]
 8007120:	b183      	cbz	r3, 8007144 <_Balloc+0x50>
 8007122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800712a:	b9b8      	cbnz	r0, 800715c <_Balloc+0x68>
 800712c:	2101      	movs	r1, #1
 800712e:	fa01 f605 	lsl.w	r6, r1, r5
 8007132:	1d72      	adds	r2, r6, #5
 8007134:	0092      	lsls	r2, r2, #2
 8007136:	4620      	mov	r0, r4
 8007138:	f000 fb60 	bl	80077fc <_calloc_r>
 800713c:	b160      	cbz	r0, 8007158 <_Balloc+0x64>
 800713e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007142:	e00e      	b.n	8007162 <_Balloc+0x6e>
 8007144:	2221      	movs	r2, #33	; 0x21
 8007146:	2104      	movs	r1, #4
 8007148:	4620      	mov	r0, r4
 800714a:	f000 fb57 	bl	80077fc <_calloc_r>
 800714e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007150:	60f0      	str	r0, [r6, #12]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1e4      	bne.n	8007122 <_Balloc+0x2e>
 8007158:	2000      	movs	r0, #0
 800715a:	bd70      	pop	{r4, r5, r6, pc}
 800715c:	6802      	ldr	r2, [r0, #0]
 800715e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007162:	2300      	movs	r3, #0
 8007164:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007168:	e7f7      	b.n	800715a <_Balloc+0x66>
 800716a:	bf00      	nop
 800716c:	08009f3b 	.word	0x08009f3b
 8007170:	08009fbe 	.word	0x08009fbe

08007174 <_Bfree>:
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007178:	4605      	mov	r5, r0
 800717a:	460c      	mov	r4, r1
 800717c:	b976      	cbnz	r6, 800719c <_Bfree+0x28>
 800717e:	2010      	movs	r0, #16
 8007180:	f7fe faee 	bl	8005760 <malloc>
 8007184:	4602      	mov	r2, r0
 8007186:	6268      	str	r0, [r5, #36]	; 0x24
 8007188:	b920      	cbnz	r0, 8007194 <_Bfree+0x20>
 800718a:	4b09      	ldr	r3, [pc, #36]	; (80071b0 <_Bfree+0x3c>)
 800718c:	4809      	ldr	r0, [pc, #36]	; (80071b4 <_Bfree+0x40>)
 800718e:	218a      	movs	r1, #138	; 0x8a
 8007190:	f001 f946 	bl	8008420 <__assert_func>
 8007194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007198:	6006      	str	r6, [r0, #0]
 800719a:	60c6      	str	r6, [r0, #12]
 800719c:	b13c      	cbz	r4, 80071ae <_Bfree+0x3a>
 800719e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80071a0:	6862      	ldr	r2, [r4, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071a8:	6021      	str	r1, [r4, #0]
 80071aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	08009f3b 	.word	0x08009f3b
 80071b4:	08009fbe 	.word	0x08009fbe

080071b8 <__multadd>:
 80071b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071bc:	690d      	ldr	r5, [r1, #16]
 80071be:	4607      	mov	r7, r0
 80071c0:	460c      	mov	r4, r1
 80071c2:	461e      	mov	r6, r3
 80071c4:	f101 0c14 	add.w	ip, r1, #20
 80071c8:	2000      	movs	r0, #0
 80071ca:	f8dc 3000 	ldr.w	r3, [ip]
 80071ce:	b299      	uxth	r1, r3
 80071d0:	fb02 6101 	mla	r1, r2, r1, r6
 80071d4:	0c1e      	lsrs	r6, r3, #16
 80071d6:	0c0b      	lsrs	r3, r1, #16
 80071d8:	fb02 3306 	mla	r3, r2, r6, r3
 80071dc:	b289      	uxth	r1, r1
 80071de:	3001      	adds	r0, #1
 80071e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071e4:	4285      	cmp	r5, r0
 80071e6:	f84c 1b04 	str.w	r1, [ip], #4
 80071ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071ee:	dcec      	bgt.n	80071ca <__multadd+0x12>
 80071f0:	b30e      	cbz	r6, 8007236 <__multadd+0x7e>
 80071f2:	68a3      	ldr	r3, [r4, #8]
 80071f4:	42ab      	cmp	r3, r5
 80071f6:	dc19      	bgt.n	800722c <__multadd+0x74>
 80071f8:	6861      	ldr	r1, [r4, #4]
 80071fa:	4638      	mov	r0, r7
 80071fc:	3101      	adds	r1, #1
 80071fe:	f7ff ff79 	bl	80070f4 <_Balloc>
 8007202:	4680      	mov	r8, r0
 8007204:	b928      	cbnz	r0, 8007212 <__multadd+0x5a>
 8007206:	4602      	mov	r2, r0
 8007208:	4b0c      	ldr	r3, [pc, #48]	; (800723c <__multadd+0x84>)
 800720a:	480d      	ldr	r0, [pc, #52]	; (8007240 <__multadd+0x88>)
 800720c:	21b5      	movs	r1, #181	; 0xb5
 800720e:	f001 f907 	bl	8008420 <__assert_func>
 8007212:	6922      	ldr	r2, [r4, #16]
 8007214:	3202      	adds	r2, #2
 8007216:	f104 010c 	add.w	r1, r4, #12
 800721a:	0092      	lsls	r2, r2, #2
 800721c:	300c      	adds	r0, #12
 800721e:	f7ff ff4f 	bl	80070c0 <memcpy>
 8007222:	4621      	mov	r1, r4
 8007224:	4638      	mov	r0, r7
 8007226:	f7ff ffa5 	bl	8007174 <_Bfree>
 800722a:	4644      	mov	r4, r8
 800722c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007230:	3501      	adds	r5, #1
 8007232:	615e      	str	r6, [r3, #20]
 8007234:	6125      	str	r5, [r4, #16]
 8007236:	4620      	mov	r0, r4
 8007238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800723c:	08009fad 	.word	0x08009fad
 8007240:	08009fbe 	.word	0x08009fbe

08007244 <__hi0bits>:
 8007244:	0c03      	lsrs	r3, r0, #16
 8007246:	041b      	lsls	r3, r3, #16
 8007248:	b9d3      	cbnz	r3, 8007280 <__hi0bits+0x3c>
 800724a:	0400      	lsls	r0, r0, #16
 800724c:	2310      	movs	r3, #16
 800724e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007252:	bf04      	itt	eq
 8007254:	0200      	lsleq	r0, r0, #8
 8007256:	3308      	addeq	r3, #8
 8007258:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800725c:	bf04      	itt	eq
 800725e:	0100      	lsleq	r0, r0, #4
 8007260:	3304      	addeq	r3, #4
 8007262:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007266:	bf04      	itt	eq
 8007268:	0080      	lsleq	r0, r0, #2
 800726a:	3302      	addeq	r3, #2
 800726c:	2800      	cmp	r0, #0
 800726e:	db05      	blt.n	800727c <__hi0bits+0x38>
 8007270:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007274:	f103 0301 	add.w	r3, r3, #1
 8007278:	bf08      	it	eq
 800727a:	2320      	moveq	r3, #32
 800727c:	4618      	mov	r0, r3
 800727e:	4770      	bx	lr
 8007280:	2300      	movs	r3, #0
 8007282:	e7e4      	b.n	800724e <__hi0bits+0xa>

08007284 <__lo0bits>:
 8007284:	6803      	ldr	r3, [r0, #0]
 8007286:	f013 0207 	ands.w	r2, r3, #7
 800728a:	4601      	mov	r1, r0
 800728c:	d00b      	beq.n	80072a6 <__lo0bits+0x22>
 800728e:	07da      	lsls	r2, r3, #31
 8007290:	d423      	bmi.n	80072da <__lo0bits+0x56>
 8007292:	0798      	lsls	r0, r3, #30
 8007294:	bf49      	itett	mi
 8007296:	085b      	lsrmi	r3, r3, #1
 8007298:	089b      	lsrpl	r3, r3, #2
 800729a:	2001      	movmi	r0, #1
 800729c:	600b      	strmi	r3, [r1, #0]
 800729e:	bf5c      	itt	pl
 80072a0:	600b      	strpl	r3, [r1, #0]
 80072a2:	2002      	movpl	r0, #2
 80072a4:	4770      	bx	lr
 80072a6:	b298      	uxth	r0, r3
 80072a8:	b9a8      	cbnz	r0, 80072d6 <__lo0bits+0x52>
 80072aa:	0c1b      	lsrs	r3, r3, #16
 80072ac:	2010      	movs	r0, #16
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	b90a      	cbnz	r2, 80072b6 <__lo0bits+0x32>
 80072b2:	3008      	adds	r0, #8
 80072b4:	0a1b      	lsrs	r3, r3, #8
 80072b6:	071a      	lsls	r2, r3, #28
 80072b8:	bf04      	itt	eq
 80072ba:	091b      	lsreq	r3, r3, #4
 80072bc:	3004      	addeq	r0, #4
 80072be:	079a      	lsls	r2, r3, #30
 80072c0:	bf04      	itt	eq
 80072c2:	089b      	lsreq	r3, r3, #2
 80072c4:	3002      	addeq	r0, #2
 80072c6:	07da      	lsls	r2, r3, #31
 80072c8:	d403      	bmi.n	80072d2 <__lo0bits+0x4e>
 80072ca:	085b      	lsrs	r3, r3, #1
 80072cc:	f100 0001 	add.w	r0, r0, #1
 80072d0:	d005      	beq.n	80072de <__lo0bits+0x5a>
 80072d2:	600b      	str	r3, [r1, #0]
 80072d4:	4770      	bx	lr
 80072d6:	4610      	mov	r0, r2
 80072d8:	e7e9      	b.n	80072ae <__lo0bits+0x2a>
 80072da:	2000      	movs	r0, #0
 80072dc:	4770      	bx	lr
 80072de:	2020      	movs	r0, #32
 80072e0:	4770      	bx	lr
	...

080072e4 <__i2b>:
 80072e4:	b510      	push	{r4, lr}
 80072e6:	460c      	mov	r4, r1
 80072e8:	2101      	movs	r1, #1
 80072ea:	f7ff ff03 	bl	80070f4 <_Balloc>
 80072ee:	4602      	mov	r2, r0
 80072f0:	b928      	cbnz	r0, 80072fe <__i2b+0x1a>
 80072f2:	4b05      	ldr	r3, [pc, #20]	; (8007308 <__i2b+0x24>)
 80072f4:	4805      	ldr	r0, [pc, #20]	; (800730c <__i2b+0x28>)
 80072f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072fa:	f001 f891 	bl	8008420 <__assert_func>
 80072fe:	2301      	movs	r3, #1
 8007300:	6144      	str	r4, [r0, #20]
 8007302:	6103      	str	r3, [r0, #16]
 8007304:	bd10      	pop	{r4, pc}
 8007306:	bf00      	nop
 8007308:	08009fad 	.word	0x08009fad
 800730c:	08009fbe 	.word	0x08009fbe

08007310 <__multiply>:
 8007310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	4691      	mov	r9, r2
 8007316:	690a      	ldr	r2, [r1, #16]
 8007318:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800731c:	429a      	cmp	r2, r3
 800731e:	bfb8      	it	lt
 8007320:	460b      	movlt	r3, r1
 8007322:	460c      	mov	r4, r1
 8007324:	bfbc      	itt	lt
 8007326:	464c      	movlt	r4, r9
 8007328:	4699      	movlt	r9, r3
 800732a:	6927      	ldr	r7, [r4, #16]
 800732c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007330:	68a3      	ldr	r3, [r4, #8]
 8007332:	6861      	ldr	r1, [r4, #4]
 8007334:	eb07 060a 	add.w	r6, r7, sl
 8007338:	42b3      	cmp	r3, r6
 800733a:	b085      	sub	sp, #20
 800733c:	bfb8      	it	lt
 800733e:	3101      	addlt	r1, #1
 8007340:	f7ff fed8 	bl	80070f4 <_Balloc>
 8007344:	b930      	cbnz	r0, 8007354 <__multiply+0x44>
 8007346:	4602      	mov	r2, r0
 8007348:	4b44      	ldr	r3, [pc, #272]	; (800745c <__multiply+0x14c>)
 800734a:	4845      	ldr	r0, [pc, #276]	; (8007460 <__multiply+0x150>)
 800734c:	f240 115d 	movw	r1, #349	; 0x15d
 8007350:	f001 f866 	bl	8008420 <__assert_func>
 8007354:	f100 0514 	add.w	r5, r0, #20
 8007358:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800735c:	462b      	mov	r3, r5
 800735e:	2200      	movs	r2, #0
 8007360:	4543      	cmp	r3, r8
 8007362:	d321      	bcc.n	80073a8 <__multiply+0x98>
 8007364:	f104 0314 	add.w	r3, r4, #20
 8007368:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800736c:	f109 0314 	add.w	r3, r9, #20
 8007370:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007374:	9202      	str	r2, [sp, #8]
 8007376:	1b3a      	subs	r2, r7, r4
 8007378:	3a15      	subs	r2, #21
 800737a:	f022 0203 	bic.w	r2, r2, #3
 800737e:	3204      	adds	r2, #4
 8007380:	f104 0115 	add.w	r1, r4, #21
 8007384:	428f      	cmp	r7, r1
 8007386:	bf38      	it	cc
 8007388:	2204      	movcc	r2, #4
 800738a:	9201      	str	r2, [sp, #4]
 800738c:	9a02      	ldr	r2, [sp, #8]
 800738e:	9303      	str	r3, [sp, #12]
 8007390:	429a      	cmp	r2, r3
 8007392:	d80c      	bhi.n	80073ae <__multiply+0x9e>
 8007394:	2e00      	cmp	r6, #0
 8007396:	dd03      	ble.n	80073a0 <__multiply+0x90>
 8007398:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800739c:	2b00      	cmp	r3, #0
 800739e:	d05a      	beq.n	8007456 <__multiply+0x146>
 80073a0:	6106      	str	r6, [r0, #16]
 80073a2:	b005      	add	sp, #20
 80073a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a8:	f843 2b04 	str.w	r2, [r3], #4
 80073ac:	e7d8      	b.n	8007360 <__multiply+0x50>
 80073ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80073b2:	f1ba 0f00 	cmp.w	sl, #0
 80073b6:	d024      	beq.n	8007402 <__multiply+0xf2>
 80073b8:	f104 0e14 	add.w	lr, r4, #20
 80073bc:	46a9      	mov	r9, r5
 80073be:	f04f 0c00 	mov.w	ip, #0
 80073c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073c6:	f8d9 1000 	ldr.w	r1, [r9]
 80073ca:	fa1f fb82 	uxth.w	fp, r2
 80073ce:	b289      	uxth	r1, r1
 80073d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80073d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80073d8:	f8d9 2000 	ldr.w	r2, [r9]
 80073dc:	4461      	add	r1, ip
 80073de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80073e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073ea:	b289      	uxth	r1, r1
 80073ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073f0:	4577      	cmp	r7, lr
 80073f2:	f849 1b04 	str.w	r1, [r9], #4
 80073f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073fa:	d8e2      	bhi.n	80073c2 <__multiply+0xb2>
 80073fc:	9a01      	ldr	r2, [sp, #4]
 80073fe:	f845 c002 	str.w	ip, [r5, r2]
 8007402:	9a03      	ldr	r2, [sp, #12]
 8007404:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007408:	3304      	adds	r3, #4
 800740a:	f1b9 0f00 	cmp.w	r9, #0
 800740e:	d020      	beq.n	8007452 <__multiply+0x142>
 8007410:	6829      	ldr	r1, [r5, #0]
 8007412:	f104 0c14 	add.w	ip, r4, #20
 8007416:	46ae      	mov	lr, r5
 8007418:	f04f 0a00 	mov.w	sl, #0
 800741c:	f8bc b000 	ldrh.w	fp, [ip]
 8007420:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007424:	fb09 220b 	mla	r2, r9, fp, r2
 8007428:	4492      	add	sl, r2
 800742a:	b289      	uxth	r1, r1
 800742c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007430:	f84e 1b04 	str.w	r1, [lr], #4
 8007434:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007438:	f8be 1000 	ldrh.w	r1, [lr]
 800743c:	0c12      	lsrs	r2, r2, #16
 800743e:	fb09 1102 	mla	r1, r9, r2, r1
 8007442:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007446:	4567      	cmp	r7, ip
 8007448:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800744c:	d8e6      	bhi.n	800741c <__multiply+0x10c>
 800744e:	9a01      	ldr	r2, [sp, #4]
 8007450:	50a9      	str	r1, [r5, r2]
 8007452:	3504      	adds	r5, #4
 8007454:	e79a      	b.n	800738c <__multiply+0x7c>
 8007456:	3e01      	subs	r6, #1
 8007458:	e79c      	b.n	8007394 <__multiply+0x84>
 800745a:	bf00      	nop
 800745c:	08009fad 	.word	0x08009fad
 8007460:	08009fbe 	.word	0x08009fbe

08007464 <__pow5mult>:
 8007464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007468:	4615      	mov	r5, r2
 800746a:	f012 0203 	ands.w	r2, r2, #3
 800746e:	4606      	mov	r6, r0
 8007470:	460f      	mov	r7, r1
 8007472:	d007      	beq.n	8007484 <__pow5mult+0x20>
 8007474:	4c25      	ldr	r4, [pc, #148]	; (800750c <__pow5mult+0xa8>)
 8007476:	3a01      	subs	r2, #1
 8007478:	2300      	movs	r3, #0
 800747a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800747e:	f7ff fe9b 	bl	80071b8 <__multadd>
 8007482:	4607      	mov	r7, r0
 8007484:	10ad      	asrs	r5, r5, #2
 8007486:	d03d      	beq.n	8007504 <__pow5mult+0xa0>
 8007488:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800748a:	b97c      	cbnz	r4, 80074ac <__pow5mult+0x48>
 800748c:	2010      	movs	r0, #16
 800748e:	f7fe f967 	bl	8005760 <malloc>
 8007492:	4602      	mov	r2, r0
 8007494:	6270      	str	r0, [r6, #36]	; 0x24
 8007496:	b928      	cbnz	r0, 80074a4 <__pow5mult+0x40>
 8007498:	4b1d      	ldr	r3, [pc, #116]	; (8007510 <__pow5mult+0xac>)
 800749a:	481e      	ldr	r0, [pc, #120]	; (8007514 <__pow5mult+0xb0>)
 800749c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80074a0:	f000 ffbe 	bl	8008420 <__assert_func>
 80074a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074a8:	6004      	str	r4, [r0, #0]
 80074aa:	60c4      	str	r4, [r0, #12]
 80074ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074b4:	b94c      	cbnz	r4, 80074ca <__pow5mult+0x66>
 80074b6:	f240 2171 	movw	r1, #625	; 0x271
 80074ba:	4630      	mov	r0, r6
 80074bc:	f7ff ff12 	bl	80072e4 <__i2b>
 80074c0:	2300      	movs	r3, #0
 80074c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80074c6:	4604      	mov	r4, r0
 80074c8:	6003      	str	r3, [r0, #0]
 80074ca:	f04f 0900 	mov.w	r9, #0
 80074ce:	07eb      	lsls	r3, r5, #31
 80074d0:	d50a      	bpl.n	80074e8 <__pow5mult+0x84>
 80074d2:	4639      	mov	r1, r7
 80074d4:	4622      	mov	r2, r4
 80074d6:	4630      	mov	r0, r6
 80074d8:	f7ff ff1a 	bl	8007310 <__multiply>
 80074dc:	4639      	mov	r1, r7
 80074de:	4680      	mov	r8, r0
 80074e0:	4630      	mov	r0, r6
 80074e2:	f7ff fe47 	bl	8007174 <_Bfree>
 80074e6:	4647      	mov	r7, r8
 80074e8:	106d      	asrs	r5, r5, #1
 80074ea:	d00b      	beq.n	8007504 <__pow5mult+0xa0>
 80074ec:	6820      	ldr	r0, [r4, #0]
 80074ee:	b938      	cbnz	r0, 8007500 <__pow5mult+0x9c>
 80074f0:	4622      	mov	r2, r4
 80074f2:	4621      	mov	r1, r4
 80074f4:	4630      	mov	r0, r6
 80074f6:	f7ff ff0b 	bl	8007310 <__multiply>
 80074fa:	6020      	str	r0, [r4, #0]
 80074fc:	f8c0 9000 	str.w	r9, [r0]
 8007500:	4604      	mov	r4, r0
 8007502:	e7e4      	b.n	80074ce <__pow5mult+0x6a>
 8007504:	4638      	mov	r0, r7
 8007506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800750a:	bf00      	nop
 800750c:	0800a110 	.word	0x0800a110
 8007510:	08009f3b 	.word	0x08009f3b
 8007514:	08009fbe 	.word	0x08009fbe

08007518 <__lshift>:
 8007518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800751c:	460c      	mov	r4, r1
 800751e:	6849      	ldr	r1, [r1, #4]
 8007520:	6923      	ldr	r3, [r4, #16]
 8007522:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007526:	68a3      	ldr	r3, [r4, #8]
 8007528:	4607      	mov	r7, r0
 800752a:	4691      	mov	r9, r2
 800752c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007530:	f108 0601 	add.w	r6, r8, #1
 8007534:	42b3      	cmp	r3, r6
 8007536:	db0b      	blt.n	8007550 <__lshift+0x38>
 8007538:	4638      	mov	r0, r7
 800753a:	f7ff fddb 	bl	80070f4 <_Balloc>
 800753e:	4605      	mov	r5, r0
 8007540:	b948      	cbnz	r0, 8007556 <__lshift+0x3e>
 8007542:	4602      	mov	r2, r0
 8007544:	4b2a      	ldr	r3, [pc, #168]	; (80075f0 <__lshift+0xd8>)
 8007546:	482b      	ldr	r0, [pc, #172]	; (80075f4 <__lshift+0xdc>)
 8007548:	f240 11d9 	movw	r1, #473	; 0x1d9
 800754c:	f000 ff68 	bl	8008420 <__assert_func>
 8007550:	3101      	adds	r1, #1
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	e7ee      	b.n	8007534 <__lshift+0x1c>
 8007556:	2300      	movs	r3, #0
 8007558:	f100 0114 	add.w	r1, r0, #20
 800755c:	f100 0210 	add.w	r2, r0, #16
 8007560:	4618      	mov	r0, r3
 8007562:	4553      	cmp	r3, sl
 8007564:	db37      	blt.n	80075d6 <__lshift+0xbe>
 8007566:	6920      	ldr	r0, [r4, #16]
 8007568:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800756c:	f104 0314 	add.w	r3, r4, #20
 8007570:	f019 091f 	ands.w	r9, r9, #31
 8007574:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007578:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800757c:	d02f      	beq.n	80075de <__lshift+0xc6>
 800757e:	f1c9 0e20 	rsb	lr, r9, #32
 8007582:	468a      	mov	sl, r1
 8007584:	f04f 0c00 	mov.w	ip, #0
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	fa02 f209 	lsl.w	r2, r2, r9
 800758e:	ea42 020c 	orr.w	r2, r2, ip
 8007592:	f84a 2b04 	str.w	r2, [sl], #4
 8007596:	f853 2b04 	ldr.w	r2, [r3], #4
 800759a:	4298      	cmp	r0, r3
 800759c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80075a0:	d8f2      	bhi.n	8007588 <__lshift+0x70>
 80075a2:	1b03      	subs	r3, r0, r4
 80075a4:	3b15      	subs	r3, #21
 80075a6:	f023 0303 	bic.w	r3, r3, #3
 80075aa:	3304      	adds	r3, #4
 80075ac:	f104 0215 	add.w	r2, r4, #21
 80075b0:	4290      	cmp	r0, r2
 80075b2:	bf38      	it	cc
 80075b4:	2304      	movcc	r3, #4
 80075b6:	f841 c003 	str.w	ip, [r1, r3]
 80075ba:	f1bc 0f00 	cmp.w	ip, #0
 80075be:	d001      	beq.n	80075c4 <__lshift+0xac>
 80075c0:	f108 0602 	add.w	r6, r8, #2
 80075c4:	3e01      	subs	r6, #1
 80075c6:	4638      	mov	r0, r7
 80075c8:	612e      	str	r6, [r5, #16]
 80075ca:	4621      	mov	r1, r4
 80075cc:	f7ff fdd2 	bl	8007174 <_Bfree>
 80075d0:	4628      	mov	r0, r5
 80075d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80075da:	3301      	adds	r3, #1
 80075dc:	e7c1      	b.n	8007562 <__lshift+0x4a>
 80075de:	3904      	subs	r1, #4
 80075e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80075e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80075e8:	4298      	cmp	r0, r3
 80075ea:	d8f9      	bhi.n	80075e0 <__lshift+0xc8>
 80075ec:	e7ea      	b.n	80075c4 <__lshift+0xac>
 80075ee:	bf00      	nop
 80075f0:	08009fad 	.word	0x08009fad
 80075f4:	08009fbe 	.word	0x08009fbe

080075f8 <__mcmp>:
 80075f8:	b530      	push	{r4, r5, lr}
 80075fa:	6902      	ldr	r2, [r0, #16]
 80075fc:	690c      	ldr	r4, [r1, #16]
 80075fe:	1b12      	subs	r2, r2, r4
 8007600:	d10e      	bne.n	8007620 <__mcmp+0x28>
 8007602:	f100 0314 	add.w	r3, r0, #20
 8007606:	3114      	adds	r1, #20
 8007608:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800760c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007610:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007614:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007618:	42a5      	cmp	r5, r4
 800761a:	d003      	beq.n	8007624 <__mcmp+0x2c>
 800761c:	d305      	bcc.n	800762a <__mcmp+0x32>
 800761e:	2201      	movs	r2, #1
 8007620:	4610      	mov	r0, r2
 8007622:	bd30      	pop	{r4, r5, pc}
 8007624:	4283      	cmp	r3, r0
 8007626:	d3f3      	bcc.n	8007610 <__mcmp+0x18>
 8007628:	e7fa      	b.n	8007620 <__mcmp+0x28>
 800762a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800762e:	e7f7      	b.n	8007620 <__mcmp+0x28>

08007630 <__mdiff>:
 8007630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	460c      	mov	r4, r1
 8007636:	4606      	mov	r6, r0
 8007638:	4611      	mov	r1, r2
 800763a:	4620      	mov	r0, r4
 800763c:	4690      	mov	r8, r2
 800763e:	f7ff ffdb 	bl	80075f8 <__mcmp>
 8007642:	1e05      	subs	r5, r0, #0
 8007644:	d110      	bne.n	8007668 <__mdiff+0x38>
 8007646:	4629      	mov	r1, r5
 8007648:	4630      	mov	r0, r6
 800764a:	f7ff fd53 	bl	80070f4 <_Balloc>
 800764e:	b930      	cbnz	r0, 800765e <__mdiff+0x2e>
 8007650:	4b3a      	ldr	r3, [pc, #232]	; (800773c <__mdiff+0x10c>)
 8007652:	4602      	mov	r2, r0
 8007654:	f240 2132 	movw	r1, #562	; 0x232
 8007658:	4839      	ldr	r0, [pc, #228]	; (8007740 <__mdiff+0x110>)
 800765a:	f000 fee1 	bl	8008420 <__assert_func>
 800765e:	2301      	movs	r3, #1
 8007660:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007668:	bfa4      	itt	ge
 800766a:	4643      	movge	r3, r8
 800766c:	46a0      	movge	r8, r4
 800766e:	4630      	mov	r0, r6
 8007670:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007674:	bfa6      	itte	ge
 8007676:	461c      	movge	r4, r3
 8007678:	2500      	movge	r5, #0
 800767a:	2501      	movlt	r5, #1
 800767c:	f7ff fd3a 	bl	80070f4 <_Balloc>
 8007680:	b920      	cbnz	r0, 800768c <__mdiff+0x5c>
 8007682:	4b2e      	ldr	r3, [pc, #184]	; (800773c <__mdiff+0x10c>)
 8007684:	4602      	mov	r2, r0
 8007686:	f44f 7110 	mov.w	r1, #576	; 0x240
 800768a:	e7e5      	b.n	8007658 <__mdiff+0x28>
 800768c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007690:	6926      	ldr	r6, [r4, #16]
 8007692:	60c5      	str	r5, [r0, #12]
 8007694:	f104 0914 	add.w	r9, r4, #20
 8007698:	f108 0514 	add.w	r5, r8, #20
 800769c:	f100 0e14 	add.w	lr, r0, #20
 80076a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80076a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076a8:	f108 0210 	add.w	r2, r8, #16
 80076ac:	46f2      	mov	sl, lr
 80076ae:	2100      	movs	r1, #0
 80076b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80076b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80076b8:	fa1f f883 	uxth.w	r8, r3
 80076bc:	fa11 f18b 	uxtah	r1, r1, fp
 80076c0:	0c1b      	lsrs	r3, r3, #16
 80076c2:	eba1 0808 	sub.w	r8, r1, r8
 80076c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076ce:	fa1f f888 	uxth.w	r8, r8
 80076d2:	1419      	asrs	r1, r3, #16
 80076d4:	454e      	cmp	r6, r9
 80076d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076da:	f84a 3b04 	str.w	r3, [sl], #4
 80076de:	d8e7      	bhi.n	80076b0 <__mdiff+0x80>
 80076e0:	1b33      	subs	r3, r6, r4
 80076e2:	3b15      	subs	r3, #21
 80076e4:	f023 0303 	bic.w	r3, r3, #3
 80076e8:	3304      	adds	r3, #4
 80076ea:	3415      	adds	r4, #21
 80076ec:	42a6      	cmp	r6, r4
 80076ee:	bf38      	it	cc
 80076f0:	2304      	movcc	r3, #4
 80076f2:	441d      	add	r5, r3
 80076f4:	4473      	add	r3, lr
 80076f6:	469e      	mov	lr, r3
 80076f8:	462e      	mov	r6, r5
 80076fa:	4566      	cmp	r6, ip
 80076fc:	d30e      	bcc.n	800771c <__mdiff+0xec>
 80076fe:	f10c 0203 	add.w	r2, ip, #3
 8007702:	1b52      	subs	r2, r2, r5
 8007704:	f022 0203 	bic.w	r2, r2, #3
 8007708:	3d03      	subs	r5, #3
 800770a:	45ac      	cmp	ip, r5
 800770c:	bf38      	it	cc
 800770e:	2200      	movcc	r2, #0
 8007710:	441a      	add	r2, r3
 8007712:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007716:	b17b      	cbz	r3, 8007738 <__mdiff+0x108>
 8007718:	6107      	str	r7, [r0, #16]
 800771a:	e7a3      	b.n	8007664 <__mdiff+0x34>
 800771c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007720:	fa11 f288 	uxtah	r2, r1, r8
 8007724:	1414      	asrs	r4, r2, #16
 8007726:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800772a:	b292      	uxth	r2, r2
 800772c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007730:	f84e 2b04 	str.w	r2, [lr], #4
 8007734:	1421      	asrs	r1, r4, #16
 8007736:	e7e0      	b.n	80076fa <__mdiff+0xca>
 8007738:	3f01      	subs	r7, #1
 800773a:	e7ea      	b.n	8007712 <__mdiff+0xe2>
 800773c:	08009fad 	.word	0x08009fad
 8007740:	08009fbe 	.word	0x08009fbe

08007744 <__d2b>:
 8007744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007748:	4689      	mov	r9, r1
 800774a:	2101      	movs	r1, #1
 800774c:	ec57 6b10 	vmov	r6, r7, d0
 8007750:	4690      	mov	r8, r2
 8007752:	f7ff fccf 	bl	80070f4 <_Balloc>
 8007756:	4604      	mov	r4, r0
 8007758:	b930      	cbnz	r0, 8007768 <__d2b+0x24>
 800775a:	4602      	mov	r2, r0
 800775c:	4b25      	ldr	r3, [pc, #148]	; (80077f4 <__d2b+0xb0>)
 800775e:	4826      	ldr	r0, [pc, #152]	; (80077f8 <__d2b+0xb4>)
 8007760:	f240 310a 	movw	r1, #778	; 0x30a
 8007764:	f000 fe5c 	bl	8008420 <__assert_func>
 8007768:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800776c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007770:	bb35      	cbnz	r5, 80077c0 <__d2b+0x7c>
 8007772:	2e00      	cmp	r6, #0
 8007774:	9301      	str	r3, [sp, #4]
 8007776:	d028      	beq.n	80077ca <__d2b+0x86>
 8007778:	4668      	mov	r0, sp
 800777a:	9600      	str	r6, [sp, #0]
 800777c:	f7ff fd82 	bl	8007284 <__lo0bits>
 8007780:	9900      	ldr	r1, [sp, #0]
 8007782:	b300      	cbz	r0, 80077c6 <__d2b+0x82>
 8007784:	9a01      	ldr	r2, [sp, #4]
 8007786:	f1c0 0320 	rsb	r3, r0, #32
 800778a:	fa02 f303 	lsl.w	r3, r2, r3
 800778e:	430b      	orrs	r3, r1
 8007790:	40c2      	lsrs	r2, r0
 8007792:	6163      	str	r3, [r4, #20]
 8007794:	9201      	str	r2, [sp, #4]
 8007796:	9b01      	ldr	r3, [sp, #4]
 8007798:	61a3      	str	r3, [r4, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	bf14      	ite	ne
 800779e:	2202      	movne	r2, #2
 80077a0:	2201      	moveq	r2, #1
 80077a2:	6122      	str	r2, [r4, #16]
 80077a4:	b1d5      	cbz	r5, 80077dc <__d2b+0x98>
 80077a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80077aa:	4405      	add	r5, r0
 80077ac:	f8c9 5000 	str.w	r5, [r9]
 80077b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077b4:	f8c8 0000 	str.w	r0, [r8]
 80077b8:	4620      	mov	r0, r4
 80077ba:	b003      	add	sp, #12
 80077bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077c4:	e7d5      	b.n	8007772 <__d2b+0x2e>
 80077c6:	6161      	str	r1, [r4, #20]
 80077c8:	e7e5      	b.n	8007796 <__d2b+0x52>
 80077ca:	a801      	add	r0, sp, #4
 80077cc:	f7ff fd5a 	bl	8007284 <__lo0bits>
 80077d0:	9b01      	ldr	r3, [sp, #4]
 80077d2:	6163      	str	r3, [r4, #20]
 80077d4:	2201      	movs	r2, #1
 80077d6:	6122      	str	r2, [r4, #16]
 80077d8:	3020      	adds	r0, #32
 80077da:	e7e3      	b.n	80077a4 <__d2b+0x60>
 80077dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077e4:	f8c9 0000 	str.w	r0, [r9]
 80077e8:	6918      	ldr	r0, [r3, #16]
 80077ea:	f7ff fd2b 	bl	8007244 <__hi0bits>
 80077ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077f2:	e7df      	b.n	80077b4 <__d2b+0x70>
 80077f4:	08009fad 	.word	0x08009fad
 80077f8:	08009fbe 	.word	0x08009fbe

080077fc <_calloc_r>:
 80077fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077fe:	fba1 2402 	umull	r2, r4, r1, r2
 8007802:	b94c      	cbnz	r4, 8007818 <_calloc_r+0x1c>
 8007804:	4611      	mov	r1, r2
 8007806:	9201      	str	r2, [sp, #4]
 8007808:	f7fe f826 	bl	8005858 <_malloc_r>
 800780c:	9a01      	ldr	r2, [sp, #4]
 800780e:	4605      	mov	r5, r0
 8007810:	b930      	cbnz	r0, 8007820 <_calloc_r+0x24>
 8007812:	4628      	mov	r0, r5
 8007814:	b003      	add	sp, #12
 8007816:	bd30      	pop	{r4, r5, pc}
 8007818:	220c      	movs	r2, #12
 800781a:	6002      	str	r2, [r0, #0]
 800781c:	2500      	movs	r5, #0
 800781e:	e7f8      	b.n	8007812 <_calloc_r+0x16>
 8007820:	4621      	mov	r1, r4
 8007822:	f7fd ffa5 	bl	8005770 <memset>
 8007826:	e7f4      	b.n	8007812 <_calloc_r+0x16>

08007828 <__ssputs_r>:
 8007828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800782c:	688e      	ldr	r6, [r1, #8]
 800782e:	429e      	cmp	r6, r3
 8007830:	4682      	mov	sl, r0
 8007832:	460c      	mov	r4, r1
 8007834:	4690      	mov	r8, r2
 8007836:	461f      	mov	r7, r3
 8007838:	d838      	bhi.n	80078ac <__ssputs_r+0x84>
 800783a:	898a      	ldrh	r2, [r1, #12]
 800783c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007840:	d032      	beq.n	80078a8 <__ssputs_r+0x80>
 8007842:	6825      	ldr	r5, [r4, #0]
 8007844:	6909      	ldr	r1, [r1, #16]
 8007846:	eba5 0901 	sub.w	r9, r5, r1
 800784a:	6965      	ldr	r5, [r4, #20]
 800784c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007850:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007854:	3301      	adds	r3, #1
 8007856:	444b      	add	r3, r9
 8007858:	106d      	asrs	r5, r5, #1
 800785a:	429d      	cmp	r5, r3
 800785c:	bf38      	it	cc
 800785e:	461d      	movcc	r5, r3
 8007860:	0553      	lsls	r3, r2, #21
 8007862:	d531      	bpl.n	80078c8 <__ssputs_r+0xa0>
 8007864:	4629      	mov	r1, r5
 8007866:	f7fd fff7 	bl	8005858 <_malloc_r>
 800786a:	4606      	mov	r6, r0
 800786c:	b950      	cbnz	r0, 8007884 <__ssputs_r+0x5c>
 800786e:	230c      	movs	r3, #12
 8007870:	f8ca 3000 	str.w	r3, [sl]
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800787a:	81a3      	strh	r3, [r4, #12]
 800787c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007884:	6921      	ldr	r1, [r4, #16]
 8007886:	464a      	mov	r2, r9
 8007888:	f7ff fc1a 	bl	80070c0 <memcpy>
 800788c:	89a3      	ldrh	r3, [r4, #12]
 800788e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007896:	81a3      	strh	r3, [r4, #12]
 8007898:	6126      	str	r6, [r4, #16]
 800789a:	6165      	str	r5, [r4, #20]
 800789c:	444e      	add	r6, r9
 800789e:	eba5 0509 	sub.w	r5, r5, r9
 80078a2:	6026      	str	r6, [r4, #0]
 80078a4:	60a5      	str	r5, [r4, #8]
 80078a6:	463e      	mov	r6, r7
 80078a8:	42be      	cmp	r6, r7
 80078aa:	d900      	bls.n	80078ae <__ssputs_r+0x86>
 80078ac:	463e      	mov	r6, r7
 80078ae:	6820      	ldr	r0, [r4, #0]
 80078b0:	4632      	mov	r2, r6
 80078b2:	4641      	mov	r1, r8
 80078b4:	f000 ffb0 	bl	8008818 <memmove>
 80078b8:	68a3      	ldr	r3, [r4, #8]
 80078ba:	1b9b      	subs	r3, r3, r6
 80078bc:	60a3      	str	r3, [r4, #8]
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	4433      	add	r3, r6
 80078c2:	6023      	str	r3, [r4, #0]
 80078c4:	2000      	movs	r0, #0
 80078c6:	e7db      	b.n	8007880 <__ssputs_r+0x58>
 80078c8:	462a      	mov	r2, r5
 80078ca:	f000 ffbf 	bl	800884c <_realloc_r>
 80078ce:	4606      	mov	r6, r0
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d1e1      	bne.n	8007898 <__ssputs_r+0x70>
 80078d4:	6921      	ldr	r1, [r4, #16]
 80078d6:	4650      	mov	r0, sl
 80078d8:	f7fd ff52 	bl	8005780 <_free_r>
 80078dc:	e7c7      	b.n	800786e <__ssputs_r+0x46>
	...

080078e0 <_svfiprintf_r>:
 80078e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e4:	4698      	mov	r8, r3
 80078e6:	898b      	ldrh	r3, [r1, #12]
 80078e8:	061b      	lsls	r3, r3, #24
 80078ea:	b09d      	sub	sp, #116	; 0x74
 80078ec:	4607      	mov	r7, r0
 80078ee:	460d      	mov	r5, r1
 80078f0:	4614      	mov	r4, r2
 80078f2:	d50e      	bpl.n	8007912 <_svfiprintf_r+0x32>
 80078f4:	690b      	ldr	r3, [r1, #16]
 80078f6:	b963      	cbnz	r3, 8007912 <_svfiprintf_r+0x32>
 80078f8:	2140      	movs	r1, #64	; 0x40
 80078fa:	f7fd ffad 	bl	8005858 <_malloc_r>
 80078fe:	6028      	str	r0, [r5, #0]
 8007900:	6128      	str	r0, [r5, #16]
 8007902:	b920      	cbnz	r0, 800790e <_svfiprintf_r+0x2e>
 8007904:	230c      	movs	r3, #12
 8007906:	603b      	str	r3, [r7, #0]
 8007908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800790c:	e0d1      	b.n	8007ab2 <_svfiprintf_r+0x1d2>
 800790e:	2340      	movs	r3, #64	; 0x40
 8007910:	616b      	str	r3, [r5, #20]
 8007912:	2300      	movs	r3, #0
 8007914:	9309      	str	r3, [sp, #36]	; 0x24
 8007916:	2320      	movs	r3, #32
 8007918:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800791c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007920:	2330      	movs	r3, #48	; 0x30
 8007922:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007acc <_svfiprintf_r+0x1ec>
 8007926:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800792a:	f04f 0901 	mov.w	r9, #1
 800792e:	4623      	mov	r3, r4
 8007930:	469a      	mov	sl, r3
 8007932:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007936:	b10a      	cbz	r2, 800793c <_svfiprintf_r+0x5c>
 8007938:	2a25      	cmp	r2, #37	; 0x25
 800793a:	d1f9      	bne.n	8007930 <_svfiprintf_r+0x50>
 800793c:	ebba 0b04 	subs.w	fp, sl, r4
 8007940:	d00b      	beq.n	800795a <_svfiprintf_r+0x7a>
 8007942:	465b      	mov	r3, fp
 8007944:	4622      	mov	r2, r4
 8007946:	4629      	mov	r1, r5
 8007948:	4638      	mov	r0, r7
 800794a:	f7ff ff6d 	bl	8007828 <__ssputs_r>
 800794e:	3001      	adds	r0, #1
 8007950:	f000 80aa 	beq.w	8007aa8 <_svfiprintf_r+0x1c8>
 8007954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007956:	445a      	add	r2, fp
 8007958:	9209      	str	r2, [sp, #36]	; 0x24
 800795a:	f89a 3000 	ldrb.w	r3, [sl]
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 80a2 	beq.w	8007aa8 <_svfiprintf_r+0x1c8>
 8007964:	2300      	movs	r3, #0
 8007966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800796a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800796e:	f10a 0a01 	add.w	sl, sl, #1
 8007972:	9304      	str	r3, [sp, #16]
 8007974:	9307      	str	r3, [sp, #28]
 8007976:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800797a:	931a      	str	r3, [sp, #104]	; 0x68
 800797c:	4654      	mov	r4, sl
 800797e:	2205      	movs	r2, #5
 8007980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007984:	4851      	ldr	r0, [pc, #324]	; (8007acc <_svfiprintf_r+0x1ec>)
 8007986:	f7f8 fc43 	bl	8000210 <memchr>
 800798a:	9a04      	ldr	r2, [sp, #16]
 800798c:	b9d8      	cbnz	r0, 80079c6 <_svfiprintf_r+0xe6>
 800798e:	06d0      	lsls	r0, r2, #27
 8007990:	bf44      	itt	mi
 8007992:	2320      	movmi	r3, #32
 8007994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007998:	0711      	lsls	r1, r2, #28
 800799a:	bf44      	itt	mi
 800799c:	232b      	movmi	r3, #43	; 0x2b
 800799e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079a2:	f89a 3000 	ldrb.w	r3, [sl]
 80079a6:	2b2a      	cmp	r3, #42	; 0x2a
 80079a8:	d015      	beq.n	80079d6 <_svfiprintf_r+0xf6>
 80079aa:	9a07      	ldr	r2, [sp, #28]
 80079ac:	4654      	mov	r4, sl
 80079ae:	2000      	movs	r0, #0
 80079b0:	f04f 0c0a 	mov.w	ip, #10
 80079b4:	4621      	mov	r1, r4
 80079b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079ba:	3b30      	subs	r3, #48	; 0x30
 80079bc:	2b09      	cmp	r3, #9
 80079be:	d94e      	bls.n	8007a5e <_svfiprintf_r+0x17e>
 80079c0:	b1b0      	cbz	r0, 80079f0 <_svfiprintf_r+0x110>
 80079c2:	9207      	str	r2, [sp, #28]
 80079c4:	e014      	b.n	80079f0 <_svfiprintf_r+0x110>
 80079c6:	eba0 0308 	sub.w	r3, r0, r8
 80079ca:	fa09 f303 	lsl.w	r3, r9, r3
 80079ce:	4313      	orrs	r3, r2
 80079d0:	9304      	str	r3, [sp, #16]
 80079d2:	46a2      	mov	sl, r4
 80079d4:	e7d2      	b.n	800797c <_svfiprintf_r+0x9c>
 80079d6:	9b03      	ldr	r3, [sp, #12]
 80079d8:	1d19      	adds	r1, r3, #4
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	9103      	str	r1, [sp, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bfbb      	ittet	lt
 80079e2:	425b      	neglt	r3, r3
 80079e4:	f042 0202 	orrlt.w	r2, r2, #2
 80079e8:	9307      	strge	r3, [sp, #28]
 80079ea:	9307      	strlt	r3, [sp, #28]
 80079ec:	bfb8      	it	lt
 80079ee:	9204      	strlt	r2, [sp, #16]
 80079f0:	7823      	ldrb	r3, [r4, #0]
 80079f2:	2b2e      	cmp	r3, #46	; 0x2e
 80079f4:	d10c      	bne.n	8007a10 <_svfiprintf_r+0x130>
 80079f6:	7863      	ldrb	r3, [r4, #1]
 80079f8:	2b2a      	cmp	r3, #42	; 0x2a
 80079fa:	d135      	bne.n	8007a68 <_svfiprintf_r+0x188>
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	1d1a      	adds	r2, r3, #4
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	9203      	str	r2, [sp, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	bfb8      	it	lt
 8007a08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007a0c:	3402      	adds	r4, #2
 8007a0e:	9305      	str	r3, [sp, #20]
 8007a10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007adc <_svfiprintf_r+0x1fc>
 8007a14:	7821      	ldrb	r1, [r4, #0]
 8007a16:	2203      	movs	r2, #3
 8007a18:	4650      	mov	r0, sl
 8007a1a:	f7f8 fbf9 	bl	8000210 <memchr>
 8007a1e:	b140      	cbz	r0, 8007a32 <_svfiprintf_r+0x152>
 8007a20:	2340      	movs	r3, #64	; 0x40
 8007a22:	eba0 000a 	sub.w	r0, r0, sl
 8007a26:	fa03 f000 	lsl.w	r0, r3, r0
 8007a2a:	9b04      	ldr	r3, [sp, #16]
 8007a2c:	4303      	orrs	r3, r0
 8007a2e:	3401      	adds	r4, #1
 8007a30:	9304      	str	r3, [sp, #16]
 8007a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a36:	4826      	ldr	r0, [pc, #152]	; (8007ad0 <_svfiprintf_r+0x1f0>)
 8007a38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a3c:	2206      	movs	r2, #6
 8007a3e:	f7f8 fbe7 	bl	8000210 <memchr>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d038      	beq.n	8007ab8 <_svfiprintf_r+0x1d8>
 8007a46:	4b23      	ldr	r3, [pc, #140]	; (8007ad4 <_svfiprintf_r+0x1f4>)
 8007a48:	bb1b      	cbnz	r3, 8007a92 <_svfiprintf_r+0x1b2>
 8007a4a:	9b03      	ldr	r3, [sp, #12]
 8007a4c:	3307      	adds	r3, #7
 8007a4e:	f023 0307 	bic.w	r3, r3, #7
 8007a52:	3308      	adds	r3, #8
 8007a54:	9303      	str	r3, [sp, #12]
 8007a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a58:	4433      	add	r3, r6
 8007a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a5c:	e767      	b.n	800792e <_svfiprintf_r+0x4e>
 8007a5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a62:	460c      	mov	r4, r1
 8007a64:	2001      	movs	r0, #1
 8007a66:	e7a5      	b.n	80079b4 <_svfiprintf_r+0xd4>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	3401      	adds	r4, #1
 8007a6c:	9305      	str	r3, [sp, #20]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	f04f 0c0a 	mov.w	ip, #10
 8007a74:	4620      	mov	r0, r4
 8007a76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a7a:	3a30      	subs	r2, #48	; 0x30
 8007a7c:	2a09      	cmp	r2, #9
 8007a7e:	d903      	bls.n	8007a88 <_svfiprintf_r+0x1a8>
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0c5      	beq.n	8007a10 <_svfiprintf_r+0x130>
 8007a84:	9105      	str	r1, [sp, #20]
 8007a86:	e7c3      	b.n	8007a10 <_svfiprintf_r+0x130>
 8007a88:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e7f0      	b.n	8007a74 <_svfiprintf_r+0x194>
 8007a92:	ab03      	add	r3, sp, #12
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	462a      	mov	r2, r5
 8007a98:	4b0f      	ldr	r3, [pc, #60]	; (8007ad8 <_svfiprintf_r+0x1f8>)
 8007a9a:	a904      	add	r1, sp, #16
 8007a9c:	4638      	mov	r0, r7
 8007a9e:	f7fd ffef 	bl	8005a80 <_printf_float>
 8007aa2:	1c42      	adds	r2, r0, #1
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	d1d6      	bne.n	8007a56 <_svfiprintf_r+0x176>
 8007aa8:	89ab      	ldrh	r3, [r5, #12]
 8007aaa:	065b      	lsls	r3, r3, #25
 8007aac:	f53f af2c 	bmi.w	8007908 <_svfiprintf_r+0x28>
 8007ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ab2:	b01d      	add	sp, #116	; 0x74
 8007ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab8:	ab03      	add	r3, sp, #12
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	462a      	mov	r2, r5
 8007abe:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <_svfiprintf_r+0x1f8>)
 8007ac0:	a904      	add	r1, sp, #16
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	f7fe fa80 	bl	8005fc8 <_printf_i>
 8007ac8:	e7eb      	b.n	8007aa2 <_svfiprintf_r+0x1c2>
 8007aca:	bf00      	nop
 8007acc:	0800a11c 	.word	0x0800a11c
 8007ad0:	0800a126 	.word	0x0800a126
 8007ad4:	08005a81 	.word	0x08005a81
 8007ad8:	08007829 	.word	0x08007829
 8007adc:	0800a122 	.word	0x0800a122

08007ae0 <_sungetc_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	1c4b      	adds	r3, r1, #1
 8007ae4:	4614      	mov	r4, r2
 8007ae6:	d103      	bne.n	8007af0 <_sungetc_r+0x10>
 8007ae8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007aec:	4628      	mov	r0, r5
 8007aee:	bd38      	pop	{r3, r4, r5, pc}
 8007af0:	8993      	ldrh	r3, [r2, #12]
 8007af2:	f023 0320 	bic.w	r3, r3, #32
 8007af6:	8193      	strh	r3, [r2, #12]
 8007af8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007afa:	6852      	ldr	r2, [r2, #4]
 8007afc:	b2cd      	uxtb	r5, r1
 8007afe:	b18b      	cbz	r3, 8007b24 <_sungetc_r+0x44>
 8007b00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b02:	4293      	cmp	r3, r2
 8007b04:	dd08      	ble.n	8007b18 <_sungetc_r+0x38>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	1e5a      	subs	r2, r3, #1
 8007b0a:	6022      	str	r2, [r4, #0]
 8007b0c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007b10:	6863      	ldr	r3, [r4, #4]
 8007b12:	3301      	adds	r3, #1
 8007b14:	6063      	str	r3, [r4, #4]
 8007b16:	e7e9      	b.n	8007aec <_sungetc_r+0xc>
 8007b18:	4621      	mov	r1, r4
 8007b1a:	f000 fc47 	bl	80083ac <__submore>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d0f1      	beq.n	8007b06 <_sungetc_r+0x26>
 8007b22:	e7e1      	b.n	8007ae8 <_sungetc_r+0x8>
 8007b24:	6921      	ldr	r1, [r4, #16]
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	b151      	cbz	r1, 8007b40 <_sungetc_r+0x60>
 8007b2a:	4299      	cmp	r1, r3
 8007b2c:	d208      	bcs.n	8007b40 <_sungetc_r+0x60>
 8007b2e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007b32:	42a9      	cmp	r1, r5
 8007b34:	d104      	bne.n	8007b40 <_sungetc_r+0x60>
 8007b36:	3b01      	subs	r3, #1
 8007b38:	3201      	adds	r2, #1
 8007b3a:	6023      	str	r3, [r4, #0]
 8007b3c:	6062      	str	r2, [r4, #4]
 8007b3e:	e7d5      	b.n	8007aec <_sungetc_r+0xc>
 8007b40:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b48:	6363      	str	r3, [r4, #52]	; 0x34
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	63a3      	str	r3, [r4, #56]	; 0x38
 8007b4e:	4623      	mov	r3, r4
 8007b50:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	2301      	movs	r3, #1
 8007b58:	e7dc      	b.n	8007b14 <_sungetc_r+0x34>

08007b5a <__ssrefill_r>:
 8007b5a:	b510      	push	{r4, lr}
 8007b5c:	460c      	mov	r4, r1
 8007b5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007b60:	b169      	cbz	r1, 8007b7e <__ssrefill_r+0x24>
 8007b62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b66:	4299      	cmp	r1, r3
 8007b68:	d001      	beq.n	8007b6e <__ssrefill_r+0x14>
 8007b6a:	f7fd fe09 	bl	8005780 <_free_r>
 8007b6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b70:	6063      	str	r3, [r4, #4]
 8007b72:	2000      	movs	r0, #0
 8007b74:	6360      	str	r0, [r4, #52]	; 0x34
 8007b76:	b113      	cbz	r3, 8007b7e <__ssrefill_r+0x24>
 8007b78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007b7a:	6023      	str	r3, [r4, #0]
 8007b7c:	bd10      	pop	{r4, pc}
 8007b7e:	6923      	ldr	r3, [r4, #16]
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	2300      	movs	r3, #0
 8007b84:	6063      	str	r3, [r4, #4]
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	f043 0320 	orr.w	r3, r3, #32
 8007b8c:	81a3      	strh	r3, [r4, #12]
 8007b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b92:	e7f3      	b.n	8007b7c <__ssrefill_r+0x22>

08007b94 <__ssvfiscanf_r>:
 8007b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b98:	460c      	mov	r4, r1
 8007b9a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007ba4:	49a6      	ldr	r1, [pc, #664]	; (8007e40 <__ssvfiscanf_r+0x2ac>)
 8007ba6:	91a0      	str	r1, [sp, #640]	; 0x280
 8007ba8:	f10d 0804 	add.w	r8, sp, #4
 8007bac:	49a5      	ldr	r1, [pc, #660]	; (8007e44 <__ssvfiscanf_r+0x2b0>)
 8007bae:	4fa6      	ldr	r7, [pc, #664]	; (8007e48 <__ssvfiscanf_r+0x2b4>)
 8007bb0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007e4c <__ssvfiscanf_r+0x2b8>
 8007bb4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007bb8:	4606      	mov	r6, r0
 8007bba:	91a1      	str	r1, [sp, #644]	; 0x284
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	7813      	ldrb	r3, [r2, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 815a 	beq.w	8007e7a <__ssvfiscanf_r+0x2e6>
 8007bc6:	5dd9      	ldrb	r1, [r3, r7]
 8007bc8:	f011 0108 	ands.w	r1, r1, #8
 8007bcc:	f102 0501 	add.w	r5, r2, #1
 8007bd0:	d019      	beq.n	8007c06 <__ssvfiscanf_r+0x72>
 8007bd2:	6863      	ldr	r3, [r4, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dd0f      	ble.n	8007bf8 <__ssvfiscanf_r+0x64>
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	781a      	ldrb	r2, [r3, #0]
 8007bdc:	5cba      	ldrb	r2, [r7, r2]
 8007bde:	0712      	lsls	r2, r2, #28
 8007be0:	d401      	bmi.n	8007be6 <__ssvfiscanf_r+0x52>
 8007be2:	462a      	mov	r2, r5
 8007be4:	e7eb      	b.n	8007bbe <__ssvfiscanf_r+0x2a>
 8007be6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007be8:	3201      	adds	r2, #1
 8007bea:	9245      	str	r2, [sp, #276]	; 0x114
 8007bec:	6862      	ldr	r2, [r4, #4]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	3a01      	subs	r2, #1
 8007bf2:	6062      	str	r2, [r4, #4]
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	e7ec      	b.n	8007bd2 <__ssvfiscanf_r+0x3e>
 8007bf8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	4798      	blx	r3
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d0e9      	beq.n	8007bd8 <__ssvfiscanf_r+0x44>
 8007c04:	e7ed      	b.n	8007be2 <__ssvfiscanf_r+0x4e>
 8007c06:	2b25      	cmp	r3, #37	; 0x25
 8007c08:	d012      	beq.n	8007c30 <__ssvfiscanf_r+0x9c>
 8007c0a:	469a      	mov	sl, r3
 8007c0c:	6863      	ldr	r3, [r4, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f340 8091 	ble.w	8007d36 <__ssvfiscanf_r+0x1a2>
 8007c14:	6822      	ldr	r2, [r4, #0]
 8007c16:	7813      	ldrb	r3, [r2, #0]
 8007c18:	4553      	cmp	r3, sl
 8007c1a:	f040 812e 	bne.w	8007e7a <__ssvfiscanf_r+0x2e6>
 8007c1e:	6863      	ldr	r3, [r4, #4]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	6063      	str	r3, [r4, #4]
 8007c24:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007c26:	3201      	adds	r2, #1
 8007c28:	3301      	adds	r3, #1
 8007c2a:	6022      	str	r2, [r4, #0]
 8007c2c:	9345      	str	r3, [sp, #276]	; 0x114
 8007c2e:	e7d8      	b.n	8007be2 <__ssvfiscanf_r+0x4e>
 8007c30:	9141      	str	r1, [sp, #260]	; 0x104
 8007c32:	9143      	str	r1, [sp, #268]	; 0x10c
 8007c34:	7853      	ldrb	r3, [r2, #1]
 8007c36:	2b2a      	cmp	r3, #42	; 0x2a
 8007c38:	bf02      	ittt	eq
 8007c3a:	2310      	moveq	r3, #16
 8007c3c:	1c95      	addeq	r5, r2, #2
 8007c3e:	9341      	streq	r3, [sp, #260]	; 0x104
 8007c40:	220a      	movs	r2, #10
 8007c42:	46aa      	mov	sl, r5
 8007c44:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007c48:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007c4c:	2b09      	cmp	r3, #9
 8007c4e:	d91d      	bls.n	8007c8c <__ssvfiscanf_r+0xf8>
 8007c50:	487e      	ldr	r0, [pc, #504]	; (8007e4c <__ssvfiscanf_r+0x2b8>)
 8007c52:	2203      	movs	r2, #3
 8007c54:	f7f8 fadc 	bl	8000210 <memchr>
 8007c58:	b140      	cbz	r0, 8007c6c <__ssvfiscanf_r+0xd8>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	eba0 0009 	sub.w	r0, r0, r9
 8007c60:	fa03 f000 	lsl.w	r0, r3, r0
 8007c64:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007c66:	4318      	orrs	r0, r3
 8007c68:	9041      	str	r0, [sp, #260]	; 0x104
 8007c6a:	4655      	mov	r5, sl
 8007c6c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007c70:	2b78      	cmp	r3, #120	; 0x78
 8007c72:	d806      	bhi.n	8007c82 <__ssvfiscanf_r+0xee>
 8007c74:	2b57      	cmp	r3, #87	; 0x57
 8007c76:	d810      	bhi.n	8007c9a <__ssvfiscanf_r+0x106>
 8007c78:	2b25      	cmp	r3, #37	; 0x25
 8007c7a:	d0c6      	beq.n	8007c0a <__ssvfiscanf_r+0x76>
 8007c7c:	d856      	bhi.n	8007d2c <__ssvfiscanf_r+0x198>
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d064      	beq.n	8007d4c <__ssvfiscanf_r+0x1b8>
 8007c82:	2303      	movs	r3, #3
 8007c84:	9347      	str	r3, [sp, #284]	; 0x11c
 8007c86:	230a      	movs	r3, #10
 8007c88:	9342      	str	r3, [sp, #264]	; 0x108
 8007c8a:	e071      	b.n	8007d70 <__ssvfiscanf_r+0x1dc>
 8007c8c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007c8e:	fb02 1103 	mla	r1, r2, r3, r1
 8007c92:	3930      	subs	r1, #48	; 0x30
 8007c94:	9143      	str	r1, [sp, #268]	; 0x10c
 8007c96:	4655      	mov	r5, sl
 8007c98:	e7d3      	b.n	8007c42 <__ssvfiscanf_r+0xae>
 8007c9a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007c9e:	2a20      	cmp	r2, #32
 8007ca0:	d8ef      	bhi.n	8007c82 <__ssvfiscanf_r+0xee>
 8007ca2:	a101      	add	r1, pc, #4	; (adr r1, 8007ca8 <__ssvfiscanf_r+0x114>)
 8007ca4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007ca8:	08007d5b 	.word	0x08007d5b
 8007cac:	08007c83 	.word	0x08007c83
 8007cb0:	08007c83 	.word	0x08007c83
 8007cb4:	08007db9 	.word	0x08007db9
 8007cb8:	08007c83 	.word	0x08007c83
 8007cbc:	08007c83 	.word	0x08007c83
 8007cc0:	08007c83 	.word	0x08007c83
 8007cc4:	08007c83 	.word	0x08007c83
 8007cc8:	08007c83 	.word	0x08007c83
 8007ccc:	08007c83 	.word	0x08007c83
 8007cd0:	08007c83 	.word	0x08007c83
 8007cd4:	08007dcf 	.word	0x08007dcf
 8007cd8:	08007da5 	.word	0x08007da5
 8007cdc:	08007d33 	.word	0x08007d33
 8007ce0:	08007d33 	.word	0x08007d33
 8007ce4:	08007d33 	.word	0x08007d33
 8007ce8:	08007c83 	.word	0x08007c83
 8007cec:	08007da9 	.word	0x08007da9
 8007cf0:	08007c83 	.word	0x08007c83
 8007cf4:	08007c83 	.word	0x08007c83
 8007cf8:	08007c83 	.word	0x08007c83
 8007cfc:	08007c83 	.word	0x08007c83
 8007d00:	08007ddf 	.word	0x08007ddf
 8007d04:	08007db1 	.word	0x08007db1
 8007d08:	08007d53 	.word	0x08007d53
 8007d0c:	08007c83 	.word	0x08007c83
 8007d10:	08007c83 	.word	0x08007c83
 8007d14:	08007ddb 	.word	0x08007ddb
 8007d18:	08007c83 	.word	0x08007c83
 8007d1c:	08007da5 	.word	0x08007da5
 8007d20:	08007c83 	.word	0x08007c83
 8007d24:	08007c83 	.word	0x08007c83
 8007d28:	08007d5b 	.word	0x08007d5b
 8007d2c:	3b45      	subs	r3, #69	; 0x45
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d8a7      	bhi.n	8007c82 <__ssvfiscanf_r+0xee>
 8007d32:	2305      	movs	r3, #5
 8007d34:	e01b      	b.n	8007d6e <__ssvfiscanf_r+0x1da>
 8007d36:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007d38:	4621      	mov	r1, r4
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	4798      	blx	r3
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	f43f af68 	beq.w	8007c14 <__ssvfiscanf_r+0x80>
 8007d44:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007d46:	2800      	cmp	r0, #0
 8007d48:	f040 808d 	bne.w	8007e66 <__ssvfiscanf_r+0x2d2>
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d50:	e08f      	b.n	8007e72 <__ssvfiscanf_r+0x2de>
 8007d52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007d54:	f042 0220 	orr.w	r2, r2, #32
 8007d58:	9241      	str	r2, [sp, #260]	; 0x104
 8007d5a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d60:	9241      	str	r2, [sp, #260]	; 0x104
 8007d62:	2210      	movs	r2, #16
 8007d64:	2b6f      	cmp	r3, #111	; 0x6f
 8007d66:	9242      	str	r2, [sp, #264]	; 0x108
 8007d68:	bf34      	ite	cc
 8007d6a:	2303      	movcc	r3, #3
 8007d6c:	2304      	movcs	r3, #4
 8007d6e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007d70:	6863      	ldr	r3, [r4, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	dd42      	ble.n	8007dfc <__ssvfiscanf_r+0x268>
 8007d76:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007d78:	0659      	lsls	r1, r3, #25
 8007d7a:	d404      	bmi.n	8007d86 <__ssvfiscanf_r+0x1f2>
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	781a      	ldrb	r2, [r3, #0]
 8007d80:	5cba      	ldrb	r2, [r7, r2]
 8007d82:	0712      	lsls	r2, r2, #28
 8007d84:	d441      	bmi.n	8007e0a <__ssvfiscanf_r+0x276>
 8007d86:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	dc50      	bgt.n	8007e2e <__ssvfiscanf_r+0x29a>
 8007d8c:	466b      	mov	r3, sp
 8007d8e:	4622      	mov	r2, r4
 8007d90:	a941      	add	r1, sp, #260	; 0x104
 8007d92:	4630      	mov	r0, r6
 8007d94:	f000 f876 	bl	8007e84 <_scanf_chars>
 8007d98:	2801      	cmp	r0, #1
 8007d9a:	d06e      	beq.n	8007e7a <__ssvfiscanf_r+0x2e6>
 8007d9c:	2802      	cmp	r0, #2
 8007d9e:	f47f af20 	bne.w	8007be2 <__ssvfiscanf_r+0x4e>
 8007da2:	e7cf      	b.n	8007d44 <__ssvfiscanf_r+0x1b0>
 8007da4:	220a      	movs	r2, #10
 8007da6:	e7dd      	b.n	8007d64 <__ssvfiscanf_r+0x1d0>
 8007da8:	2300      	movs	r3, #0
 8007daa:	9342      	str	r3, [sp, #264]	; 0x108
 8007dac:	2303      	movs	r3, #3
 8007dae:	e7de      	b.n	8007d6e <__ssvfiscanf_r+0x1da>
 8007db0:	2308      	movs	r3, #8
 8007db2:	9342      	str	r3, [sp, #264]	; 0x108
 8007db4:	2304      	movs	r3, #4
 8007db6:	e7da      	b.n	8007d6e <__ssvfiscanf_r+0x1da>
 8007db8:	4629      	mov	r1, r5
 8007dba:	4640      	mov	r0, r8
 8007dbc:	f000 f9c6 	bl	800814c <__sccl>
 8007dc0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc6:	9341      	str	r3, [sp, #260]	; 0x104
 8007dc8:	4605      	mov	r5, r0
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e7cf      	b.n	8007d6e <__ssvfiscanf_r+0x1da>
 8007dce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dd4:	9341      	str	r3, [sp, #260]	; 0x104
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	e7c9      	b.n	8007d6e <__ssvfiscanf_r+0x1da>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e7c7      	b.n	8007d6e <__ssvfiscanf_r+0x1da>
 8007dde:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007de0:	06c3      	lsls	r3, r0, #27
 8007de2:	f53f aefe 	bmi.w	8007be2 <__ssvfiscanf_r+0x4e>
 8007de6:	9b00      	ldr	r3, [sp, #0]
 8007de8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007dea:	1d19      	adds	r1, r3, #4
 8007dec:	9100      	str	r1, [sp, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f010 0f01 	tst.w	r0, #1
 8007df4:	bf14      	ite	ne
 8007df6:	801a      	strhne	r2, [r3, #0]
 8007df8:	601a      	streq	r2, [r3, #0]
 8007dfa:	e6f2      	b.n	8007be2 <__ssvfiscanf_r+0x4e>
 8007dfc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007dfe:	4621      	mov	r1, r4
 8007e00:	4630      	mov	r0, r6
 8007e02:	4798      	blx	r3
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d0b6      	beq.n	8007d76 <__ssvfiscanf_r+0x1e2>
 8007e08:	e79c      	b.n	8007d44 <__ssvfiscanf_r+0x1b0>
 8007e0a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007e0c:	3201      	adds	r2, #1
 8007e0e:	9245      	str	r2, [sp, #276]	; 0x114
 8007e10:	6862      	ldr	r2, [r4, #4]
 8007e12:	3a01      	subs	r2, #1
 8007e14:	2a00      	cmp	r2, #0
 8007e16:	6062      	str	r2, [r4, #4]
 8007e18:	dd02      	ble.n	8007e20 <__ssvfiscanf_r+0x28c>
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	e7ad      	b.n	8007d7c <__ssvfiscanf_r+0x1e8>
 8007e20:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007e22:	4621      	mov	r1, r4
 8007e24:	4630      	mov	r0, r6
 8007e26:	4798      	blx	r3
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d0a7      	beq.n	8007d7c <__ssvfiscanf_r+0x1e8>
 8007e2c:	e78a      	b.n	8007d44 <__ssvfiscanf_r+0x1b0>
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	dc0e      	bgt.n	8007e50 <__ssvfiscanf_r+0x2bc>
 8007e32:	466b      	mov	r3, sp
 8007e34:	4622      	mov	r2, r4
 8007e36:	a941      	add	r1, sp, #260	; 0x104
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f000 f87d 	bl	8007f38 <_scanf_i>
 8007e3e:	e7ab      	b.n	8007d98 <__ssvfiscanf_r+0x204>
 8007e40:	08007ae1 	.word	0x08007ae1
 8007e44:	08007b5b 	.word	0x08007b5b
 8007e48:	0800a185 	.word	0x0800a185
 8007e4c:	0800a122 	.word	0x0800a122
 8007e50:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <__ssvfiscanf_r+0x2ec>)
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f43f aec5 	beq.w	8007be2 <__ssvfiscanf_r+0x4e>
 8007e58:	466b      	mov	r3, sp
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	a941      	add	r1, sp, #260	; 0x104
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f3af 8000 	nop.w
 8007e64:	e798      	b.n	8007d98 <__ssvfiscanf_r+0x204>
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007e6c:	bf18      	it	ne
 8007e6e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007e72:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e7a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007e7c:	e7f9      	b.n	8007e72 <__ssvfiscanf_r+0x2de>
 8007e7e:	bf00      	nop
 8007e80:	00000000 	.word	0x00000000

08007e84 <_scanf_chars>:
 8007e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e88:	4615      	mov	r5, r2
 8007e8a:	688a      	ldr	r2, [r1, #8]
 8007e8c:	4680      	mov	r8, r0
 8007e8e:	460c      	mov	r4, r1
 8007e90:	b932      	cbnz	r2, 8007ea0 <_scanf_chars+0x1c>
 8007e92:	698a      	ldr	r2, [r1, #24]
 8007e94:	2a00      	cmp	r2, #0
 8007e96:	bf0c      	ite	eq
 8007e98:	2201      	moveq	r2, #1
 8007e9a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8007e9e:	608a      	str	r2, [r1, #8]
 8007ea0:	6822      	ldr	r2, [r4, #0]
 8007ea2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007f34 <_scanf_chars+0xb0>
 8007ea6:	06d1      	lsls	r1, r2, #27
 8007ea8:	bf5f      	itttt	pl
 8007eaa:	681a      	ldrpl	r2, [r3, #0]
 8007eac:	1d11      	addpl	r1, r2, #4
 8007eae:	6019      	strpl	r1, [r3, #0]
 8007eb0:	6816      	ldrpl	r6, [r2, #0]
 8007eb2:	2700      	movs	r7, #0
 8007eb4:	69a0      	ldr	r0, [r4, #24]
 8007eb6:	b188      	cbz	r0, 8007edc <_scanf_chars+0x58>
 8007eb8:	2801      	cmp	r0, #1
 8007eba:	d107      	bne.n	8007ecc <_scanf_chars+0x48>
 8007ebc:	682a      	ldr	r2, [r5, #0]
 8007ebe:	7811      	ldrb	r1, [r2, #0]
 8007ec0:	6962      	ldr	r2, [r4, #20]
 8007ec2:	5c52      	ldrb	r2, [r2, r1]
 8007ec4:	b952      	cbnz	r2, 8007edc <_scanf_chars+0x58>
 8007ec6:	2f00      	cmp	r7, #0
 8007ec8:	d031      	beq.n	8007f2e <_scanf_chars+0xaa>
 8007eca:	e022      	b.n	8007f12 <_scanf_chars+0x8e>
 8007ecc:	2802      	cmp	r0, #2
 8007ece:	d120      	bne.n	8007f12 <_scanf_chars+0x8e>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007ed8:	071b      	lsls	r3, r3, #28
 8007eda:	d41a      	bmi.n	8007f12 <_scanf_chars+0x8e>
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	06da      	lsls	r2, r3, #27
 8007ee0:	bf5e      	ittt	pl
 8007ee2:	682b      	ldrpl	r3, [r5, #0]
 8007ee4:	781b      	ldrbpl	r3, [r3, #0]
 8007ee6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007eea:	682a      	ldr	r2, [r5, #0]
 8007eec:	686b      	ldr	r3, [r5, #4]
 8007eee:	3201      	adds	r2, #1
 8007ef0:	602a      	str	r2, [r5, #0]
 8007ef2:	68a2      	ldr	r2, [r4, #8]
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	3a01      	subs	r2, #1
 8007ef8:	606b      	str	r3, [r5, #4]
 8007efa:	3701      	adds	r7, #1
 8007efc:	60a2      	str	r2, [r4, #8]
 8007efe:	b142      	cbz	r2, 8007f12 <_scanf_chars+0x8e>
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dcd7      	bgt.n	8007eb4 <_scanf_chars+0x30>
 8007f04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f08:	4629      	mov	r1, r5
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	4798      	blx	r3
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d0d0      	beq.n	8007eb4 <_scanf_chars+0x30>
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	f013 0310 	ands.w	r3, r3, #16
 8007f18:	d105      	bne.n	8007f26 <_scanf_chars+0xa2>
 8007f1a:	68e2      	ldr	r2, [r4, #12]
 8007f1c:	3201      	adds	r2, #1
 8007f1e:	60e2      	str	r2, [r4, #12]
 8007f20:	69a2      	ldr	r2, [r4, #24]
 8007f22:	b102      	cbz	r2, 8007f26 <_scanf_chars+0xa2>
 8007f24:	7033      	strb	r3, [r6, #0]
 8007f26:	6923      	ldr	r3, [r4, #16]
 8007f28:	443b      	add	r3, r7
 8007f2a:	6123      	str	r3, [r4, #16]
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f32:	bf00      	nop
 8007f34:	0800a185 	.word	0x0800a185

08007f38 <_scanf_i>:
 8007f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	4698      	mov	r8, r3
 8007f3e:	4b76      	ldr	r3, [pc, #472]	; (8008118 <_scanf_i+0x1e0>)
 8007f40:	460c      	mov	r4, r1
 8007f42:	4682      	mov	sl, r0
 8007f44:	4616      	mov	r6, r2
 8007f46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	ab03      	add	r3, sp, #12
 8007f4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007f52:	4b72      	ldr	r3, [pc, #456]	; (800811c <_scanf_i+0x1e4>)
 8007f54:	69a1      	ldr	r1, [r4, #24]
 8007f56:	4a72      	ldr	r2, [pc, #456]	; (8008120 <_scanf_i+0x1e8>)
 8007f58:	2903      	cmp	r1, #3
 8007f5a:	bf18      	it	ne
 8007f5c:	461a      	movne	r2, r3
 8007f5e:	68a3      	ldr	r3, [r4, #8]
 8007f60:	9201      	str	r2, [sp, #4]
 8007f62:	1e5a      	subs	r2, r3, #1
 8007f64:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007f68:	bf88      	it	hi
 8007f6a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007f6e:	4627      	mov	r7, r4
 8007f70:	bf82      	ittt	hi
 8007f72:	eb03 0905 	addhi.w	r9, r3, r5
 8007f76:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007f7a:	60a3      	strhi	r3, [r4, #8]
 8007f7c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007f80:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007f84:	bf98      	it	ls
 8007f86:	f04f 0900 	movls.w	r9, #0
 8007f8a:	6023      	str	r3, [r4, #0]
 8007f8c:	463d      	mov	r5, r7
 8007f8e:	f04f 0b00 	mov.w	fp, #0
 8007f92:	6831      	ldr	r1, [r6, #0]
 8007f94:	ab03      	add	r3, sp, #12
 8007f96:	7809      	ldrb	r1, [r1, #0]
 8007f98:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	f7f8 f937 	bl	8000210 <memchr>
 8007fa2:	b328      	cbz	r0, 8007ff0 <_scanf_i+0xb8>
 8007fa4:	f1bb 0f01 	cmp.w	fp, #1
 8007fa8:	d159      	bne.n	800805e <_scanf_i+0x126>
 8007faa:	6862      	ldr	r2, [r4, #4]
 8007fac:	b92a      	cbnz	r2, 8007fba <_scanf_i+0x82>
 8007fae:	6822      	ldr	r2, [r4, #0]
 8007fb0:	2308      	movs	r3, #8
 8007fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fb6:	6063      	str	r3, [r4, #4]
 8007fb8:	6022      	str	r2, [r4, #0]
 8007fba:	6822      	ldr	r2, [r4, #0]
 8007fbc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007fc0:	6022      	str	r2, [r4, #0]
 8007fc2:	68a2      	ldr	r2, [r4, #8]
 8007fc4:	1e51      	subs	r1, r2, #1
 8007fc6:	60a1      	str	r1, [r4, #8]
 8007fc8:	b192      	cbz	r2, 8007ff0 <_scanf_i+0xb8>
 8007fca:	6832      	ldr	r2, [r6, #0]
 8007fcc:	1c51      	adds	r1, r2, #1
 8007fce:	6031      	str	r1, [r6, #0]
 8007fd0:	7812      	ldrb	r2, [r2, #0]
 8007fd2:	f805 2b01 	strb.w	r2, [r5], #1
 8007fd6:	6872      	ldr	r2, [r6, #4]
 8007fd8:	3a01      	subs	r2, #1
 8007fda:	2a00      	cmp	r2, #0
 8007fdc:	6072      	str	r2, [r6, #4]
 8007fde:	dc07      	bgt.n	8007ff0 <_scanf_i+0xb8>
 8007fe0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007fe4:	4631      	mov	r1, r6
 8007fe6:	4650      	mov	r0, sl
 8007fe8:	4790      	blx	r2
 8007fea:	2800      	cmp	r0, #0
 8007fec:	f040 8085 	bne.w	80080fa <_scanf_i+0x1c2>
 8007ff0:	f10b 0b01 	add.w	fp, fp, #1
 8007ff4:	f1bb 0f03 	cmp.w	fp, #3
 8007ff8:	d1cb      	bne.n	8007f92 <_scanf_i+0x5a>
 8007ffa:	6863      	ldr	r3, [r4, #4]
 8007ffc:	b90b      	cbnz	r3, 8008002 <_scanf_i+0xca>
 8007ffe:	230a      	movs	r3, #10
 8008000:	6063      	str	r3, [r4, #4]
 8008002:	6863      	ldr	r3, [r4, #4]
 8008004:	4947      	ldr	r1, [pc, #284]	; (8008124 <_scanf_i+0x1ec>)
 8008006:	6960      	ldr	r0, [r4, #20]
 8008008:	1ac9      	subs	r1, r1, r3
 800800a:	f000 f89f 	bl	800814c <__sccl>
 800800e:	f04f 0b00 	mov.w	fp, #0
 8008012:	68a3      	ldr	r3, [r4, #8]
 8008014:	6822      	ldr	r2, [r4, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d03d      	beq.n	8008096 <_scanf_i+0x15e>
 800801a:	6831      	ldr	r1, [r6, #0]
 800801c:	6960      	ldr	r0, [r4, #20]
 800801e:	f891 c000 	ldrb.w	ip, [r1]
 8008022:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008026:	2800      	cmp	r0, #0
 8008028:	d035      	beq.n	8008096 <_scanf_i+0x15e>
 800802a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800802e:	d124      	bne.n	800807a <_scanf_i+0x142>
 8008030:	0510      	lsls	r0, r2, #20
 8008032:	d522      	bpl.n	800807a <_scanf_i+0x142>
 8008034:	f10b 0b01 	add.w	fp, fp, #1
 8008038:	f1b9 0f00 	cmp.w	r9, #0
 800803c:	d003      	beq.n	8008046 <_scanf_i+0x10e>
 800803e:	3301      	adds	r3, #1
 8008040:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008044:	60a3      	str	r3, [r4, #8]
 8008046:	6873      	ldr	r3, [r6, #4]
 8008048:	3b01      	subs	r3, #1
 800804a:	2b00      	cmp	r3, #0
 800804c:	6073      	str	r3, [r6, #4]
 800804e:	dd1b      	ble.n	8008088 <_scanf_i+0x150>
 8008050:	6833      	ldr	r3, [r6, #0]
 8008052:	3301      	adds	r3, #1
 8008054:	6033      	str	r3, [r6, #0]
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	3b01      	subs	r3, #1
 800805a:	60a3      	str	r3, [r4, #8]
 800805c:	e7d9      	b.n	8008012 <_scanf_i+0xda>
 800805e:	f1bb 0f02 	cmp.w	fp, #2
 8008062:	d1ae      	bne.n	8007fc2 <_scanf_i+0x8a>
 8008064:	6822      	ldr	r2, [r4, #0]
 8008066:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800806a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800806e:	d1bf      	bne.n	8007ff0 <_scanf_i+0xb8>
 8008070:	2310      	movs	r3, #16
 8008072:	6063      	str	r3, [r4, #4]
 8008074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008078:	e7a2      	b.n	8007fc0 <_scanf_i+0x88>
 800807a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800807e:	6022      	str	r2, [r4, #0]
 8008080:	780b      	ldrb	r3, [r1, #0]
 8008082:	f805 3b01 	strb.w	r3, [r5], #1
 8008086:	e7de      	b.n	8008046 <_scanf_i+0x10e>
 8008088:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800808c:	4631      	mov	r1, r6
 800808e:	4650      	mov	r0, sl
 8008090:	4798      	blx	r3
 8008092:	2800      	cmp	r0, #0
 8008094:	d0df      	beq.n	8008056 <_scanf_i+0x11e>
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	05db      	lsls	r3, r3, #23
 800809a:	d50d      	bpl.n	80080b8 <_scanf_i+0x180>
 800809c:	42bd      	cmp	r5, r7
 800809e:	d909      	bls.n	80080b4 <_scanf_i+0x17c>
 80080a0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80080a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080a8:	4632      	mov	r2, r6
 80080aa:	4650      	mov	r0, sl
 80080ac:	4798      	blx	r3
 80080ae:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80080b2:	464d      	mov	r5, r9
 80080b4:	42bd      	cmp	r5, r7
 80080b6:	d02d      	beq.n	8008114 <_scanf_i+0x1dc>
 80080b8:	6822      	ldr	r2, [r4, #0]
 80080ba:	f012 0210 	ands.w	r2, r2, #16
 80080be:	d113      	bne.n	80080e8 <_scanf_i+0x1b0>
 80080c0:	702a      	strb	r2, [r5, #0]
 80080c2:	6863      	ldr	r3, [r4, #4]
 80080c4:	9e01      	ldr	r6, [sp, #4]
 80080c6:	4639      	mov	r1, r7
 80080c8:	4650      	mov	r0, sl
 80080ca:	47b0      	blx	r6
 80080cc:	6821      	ldr	r1, [r4, #0]
 80080ce:	f8d8 3000 	ldr.w	r3, [r8]
 80080d2:	f011 0f20 	tst.w	r1, #32
 80080d6:	d013      	beq.n	8008100 <_scanf_i+0x1c8>
 80080d8:	1d1a      	adds	r2, r3, #4
 80080da:	f8c8 2000 	str.w	r2, [r8]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6018      	str	r0, [r3, #0]
 80080e2:	68e3      	ldr	r3, [r4, #12]
 80080e4:	3301      	adds	r3, #1
 80080e6:	60e3      	str	r3, [r4, #12]
 80080e8:	1bed      	subs	r5, r5, r7
 80080ea:	44ab      	add	fp, r5
 80080ec:	6925      	ldr	r5, [r4, #16]
 80080ee:	445d      	add	r5, fp
 80080f0:	6125      	str	r5, [r4, #16]
 80080f2:	2000      	movs	r0, #0
 80080f4:	b007      	add	sp, #28
 80080f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fa:	f04f 0b00 	mov.w	fp, #0
 80080fe:	e7ca      	b.n	8008096 <_scanf_i+0x15e>
 8008100:	1d1a      	adds	r2, r3, #4
 8008102:	f8c8 2000 	str.w	r2, [r8]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f011 0f01 	tst.w	r1, #1
 800810c:	bf14      	ite	ne
 800810e:	8018      	strhne	r0, [r3, #0]
 8008110:	6018      	streq	r0, [r3, #0]
 8008112:	e7e6      	b.n	80080e2 <_scanf_i+0x1aa>
 8008114:	2001      	movs	r0, #1
 8008116:	e7ed      	b.n	80080f4 <_scanf_i+0x1bc>
 8008118:	08009eec 	.word	0x08009eec
 800811c:	080083a9 	.word	0x080083a9
 8008120:	080082c1 	.word	0x080082c1
 8008124:	0800a146 	.word	0x0800a146

08008128 <_read_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4d07      	ldr	r5, [pc, #28]	; (8008148 <_read_r+0x20>)
 800812c:	4604      	mov	r4, r0
 800812e:	4608      	mov	r0, r1
 8008130:	4611      	mov	r1, r2
 8008132:	2200      	movs	r2, #0
 8008134:	602a      	str	r2, [r5, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	f7f9 fd30 	bl	8001b9c <_read>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_read_r+0x1e>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_read_r+0x1e>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	200005ac 	.word	0x200005ac

0800814c <__sccl>:
 800814c:	b570      	push	{r4, r5, r6, lr}
 800814e:	780b      	ldrb	r3, [r1, #0]
 8008150:	4604      	mov	r4, r0
 8008152:	2b5e      	cmp	r3, #94	; 0x5e
 8008154:	bf0b      	itete	eq
 8008156:	784b      	ldrbeq	r3, [r1, #1]
 8008158:	1c48      	addne	r0, r1, #1
 800815a:	1c88      	addeq	r0, r1, #2
 800815c:	2200      	movne	r2, #0
 800815e:	bf08      	it	eq
 8008160:	2201      	moveq	r2, #1
 8008162:	1e61      	subs	r1, r4, #1
 8008164:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008168:	f801 2f01 	strb.w	r2, [r1, #1]!
 800816c:	42a9      	cmp	r1, r5
 800816e:	d1fb      	bne.n	8008168 <__sccl+0x1c>
 8008170:	b90b      	cbnz	r3, 8008176 <__sccl+0x2a>
 8008172:	3801      	subs	r0, #1
 8008174:	bd70      	pop	{r4, r5, r6, pc}
 8008176:	f082 0201 	eor.w	r2, r2, #1
 800817a:	54e2      	strb	r2, [r4, r3]
 800817c:	4605      	mov	r5, r0
 800817e:	4628      	mov	r0, r5
 8008180:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008184:	292d      	cmp	r1, #45	; 0x2d
 8008186:	d006      	beq.n	8008196 <__sccl+0x4a>
 8008188:	295d      	cmp	r1, #93	; 0x5d
 800818a:	d0f3      	beq.n	8008174 <__sccl+0x28>
 800818c:	b909      	cbnz	r1, 8008192 <__sccl+0x46>
 800818e:	4628      	mov	r0, r5
 8008190:	e7f0      	b.n	8008174 <__sccl+0x28>
 8008192:	460b      	mov	r3, r1
 8008194:	e7f1      	b.n	800817a <__sccl+0x2e>
 8008196:	786e      	ldrb	r6, [r5, #1]
 8008198:	2e5d      	cmp	r6, #93	; 0x5d
 800819a:	d0fa      	beq.n	8008192 <__sccl+0x46>
 800819c:	42b3      	cmp	r3, r6
 800819e:	dcf8      	bgt.n	8008192 <__sccl+0x46>
 80081a0:	3502      	adds	r5, #2
 80081a2:	4619      	mov	r1, r3
 80081a4:	3101      	adds	r1, #1
 80081a6:	428e      	cmp	r6, r1
 80081a8:	5462      	strb	r2, [r4, r1]
 80081aa:	dcfb      	bgt.n	80081a4 <__sccl+0x58>
 80081ac:	1af1      	subs	r1, r6, r3
 80081ae:	3901      	subs	r1, #1
 80081b0:	1c58      	adds	r0, r3, #1
 80081b2:	42b3      	cmp	r3, r6
 80081b4:	bfa8      	it	ge
 80081b6:	2100      	movge	r1, #0
 80081b8:	1843      	adds	r3, r0, r1
 80081ba:	e7e0      	b.n	800817e <__sccl+0x32>

080081bc <_strtol_l.constprop.0>:
 80081bc:	2b01      	cmp	r3, #1
 80081be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c2:	d001      	beq.n	80081c8 <_strtol_l.constprop.0+0xc>
 80081c4:	2b24      	cmp	r3, #36	; 0x24
 80081c6:	d906      	bls.n	80081d6 <_strtol_l.constprop.0+0x1a>
 80081c8:	f7fd faa0 	bl	800570c <__errno>
 80081cc:	2316      	movs	r3, #22
 80081ce:	6003      	str	r3, [r0, #0]
 80081d0:	2000      	movs	r0, #0
 80081d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80082bc <_strtol_l.constprop.0+0x100>
 80081da:	460d      	mov	r5, r1
 80081dc:	462e      	mov	r6, r5
 80081de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081e2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80081e6:	f017 0708 	ands.w	r7, r7, #8
 80081ea:	d1f7      	bne.n	80081dc <_strtol_l.constprop.0+0x20>
 80081ec:	2c2d      	cmp	r4, #45	; 0x2d
 80081ee:	d132      	bne.n	8008256 <_strtol_l.constprop.0+0x9a>
 80081f0:	782c      	ldrb	r4, [r5, #0]
 80081f2:	2701      	movs	r7, #1
 80081f4:	1cb5      	adds	r5, r6, #2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d05b      	beq.n	80082b2 <_strtol_l.constprop.0+0xf6>
 80081fa:	2b10      	cmp	r3, #16
 80081fc:	d109      	bne.n	8008212 <_strtol_l.constprop.0+0x56>
 80081fe:	2c30      	cmp	r4, #48	; 0x30
 8008200:	d107      	bne.n	8008212 <_strtol_l.constprop.0+0x56>
 8008202:	782c      	ldrb	r4, [r5, #0]
 8008204:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008208:	2c58      	cmp	r4, #88	; 0x58
 800820a:	d14d      	bne.n	80082a8 <_strtol_l.constprop.0+0xec>
 800820c:	786c      	ldrb	r4, [r5, #1]
 800820e:	2310      	movs	r3, #16
 8008210:	3502      	adds	r5, #2
 8008212:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008216:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800821a:	f04f 0c00 	mov.w	ip, #0
 800821e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008222:	4666      	mov	r6, ip
 8008224:	fb03 8a19 	mls	sl, r3, r9, r8
 8008228:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800822c:	f1be 0f09 	cmp.w	lr, #9
 8008230:	d816      	bhi.n	8008260 <_strtol_l.constprop.0+0xa4>
 8008232:	4674      	mov	r4, lr
 8008234:	42a3      	cmp	r3, r4
 8008236:	dd24      	ble.n	8008282 <_strtol_l.constprop.0+0xc6>
 8008238:	f1bc 0f00 	cmp.w	ip, #0
 800823c:	db1e      	blt.n	800827c <_strtol_l.constprop.0+0xc0>
 800823e:	45b1      	cmp	r9, r6
 8008240:	d31c      	bcc.n	800827c <_strtol_l.constprop.0+0xc0>
 8008242:	d101      	bne.n	8008248 <_strtol_l.constprop.0+0x8c>
 8008244:	45a2      	cmp	sl, r4
 8008246:	db19      	blt.n	800827c <_strtol_l.constprop.0+0xc0>
 8008248:	fb06 4603 	mla	r6, r6, r3, r4
 800824c:	f04f 0c01 	mov.w	ip, #1
 8008250:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008254:	e7e8      	b.n	8008228 <_strtol_l.constprop.0+0x6c>
 8008256:	2c2b      	cmp	r4, #43	; 0x2b
 8008258:	bf04      	itt	eq
 800825a:	782c      	ldrbeq	r4, [r5, #0]
 800825c:	1cb5      	addeq	r5, r6, #2
 800825e:	e7ca      	b.n	80081f6 <_strtol_l.constprop.0+0x3a>
 8008260:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008264:	f1be 0f19 	cmp.w	lr, #25
 8008268:	d801      	bhi.n	800826e <_strtol_l.constprop.0+0xb2>
 800826a:	3c37      	subs	r4, #55	; 0x37
 800826c:	e7e2      	b.n	8008234 <_strtol_l.constprop.0+0x78>
 800826e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008272:	f1be 0f19 	cmp.w	lr, #25
 8008276:	d804      	bhi.n	8008282 <_strtol_l.constprop.0+0xc6>
 8008278:	3c57      	subs	r4, #87	; 0x57
 800827a:	e7db      	b.n	8008234 <_strtol_l.constprop.0+0x78>
 800827c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008280:	e7e6      	b.n	8008250 <_strtol_l.constprop.0+0x94>
 8008282:	f1bc 0f00 	cmp.w	ip, #0
 8008286:	da05      	bge.n	8008294 <_strtol_l.constprop.0+0xd8>
 8008288:	2322      	movs	r3, #34	; 0x22
 800828a:	6003      	str	r3, [r0, #0]
 800828c:	4646      	mov	r6, r8
 800828e:	b942      	cbnz	r2, 80082a2 <_strtol_l.constprop.0+0xe6>
 8008290:	4630      	mov	r0, r6
 8008292:	e79e      	b.n	80081d2 <_strtol_l.constprop.0+0x16>
 8008294:	b107      	cbz	r7, 8008298 <_strtol_l.constprop.0+0xdc>
 8008296:	4276      	negs	r6, r6
 8008298:	2a00      	cmp	r2, #0
 800829a:	d0f9      	beq.n	8008290 <_strtol_l.constprop.0+0xd4>
 800829c:	f1bc 0f00 	cmp.w	ip, #0
 80082a0:	d000      	beq.n	80082a4 <_strtol_l.constprop.0+0xe8>
 80082a2:	1e69      	subs	r1, r5, #1
 80082a4:	6011      	str	r1, [r2, #0]
 80082a6:	e7f3      	b.n	8008290 <_strtol_l.constprop.0+0xd4>
 80082a8:	2430      	movs	r4, #48	; 0x30
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1b1      	bne.n	8008212 <_strtol_l.constprop.0+0x56>
 80082ae:	2308      	movs	r3, #8
 80082b0:	e7af      	b.n	8008212 <_strtol_l.constprop.0+0x56>
 80082b2:	2c30      	cmp	r4, #48	; 0x30
 80082b4:	d0a5      	beq.n	8008202 <_strtol_l.constprop.0+0x46>
 80082b6:	230a      	movs	r3, #10
 80082b8:	e7ab      	b.n	8008212 <_strtol_l.constprop.0+0x56>
 80082ba:	bf00      	nop
 80082bc:	0800a185 	.word	0x0800a185

080082c0 <_strtol_r>:
 80082c0:	f7ff bf7c 	b.w	80081bc <_strtol_l.constprop.0>

080082c4 <_strtoul_l.constprop.0>:
 80082c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082c8:	4f36      	ldr	r7, [pc, #216]	; (80083a4 <_strtoul_l.constprop.0+0xe0>)
 80082ca:	4686      	mov	lr, r0
 80082cc:	460d      	mov	r5, r1
 80082ce:	4628      	mov	r0, r5
 80082d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082d4:	5de6      	ldrb	r6, [r4, r7]
 80082d6:	f016 0608 	ands.w	r6, r6, #8
 80082da:	d1f8      	bne.n	80082ce <_strtoul_l.constprop.0+0xa>
 80082dc:	2c2d      	cmp	r4, #45	; 0x2d
 80082de:	d12f      	bne.n	8008340 <_strtoul_l.constprop.0+0x7c>
 80082e0:	782c      	ldrb	r4, [r5, #0]
 80082e2:	2601      	movs	r6, #1
 80082e4:	1c85      	adds	r5, r0, #2
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d057      	beq.n	800839a <_strtoul_l.constprop.0+0xd6>
 80082ea:	2b10      	cmp	r3, #16
 80082ec:	d109      	bne.n	8008302 <_strtoul_l.constprop.0+0x3e>
 80082ee:	2c30      	cmp	r4, #48	; 0x30
 80082f0:	d107      	bne.n	8008302 <_strtoul_l.constprop.0+0x3e>
 80082f2:	7828      	ldrb	r0, [r5, #0]
 80082f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80082f8:	2858      	cmp	r0, #88	; 0x58
 80082fa:	d149      	bne.n	8008390 <_strtoul_l.constprop.0+0xcc>
 80082fc:	786c      	ldrb	r4, [r5, #1]
 80082fe:	2310      	movs	r3, #16
 8008300:	3502      	adds	r5, #2
 8008302:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008306:	2700      	movs	r7, #0
 8008308:	fbb8 f8f3 	udiv	r8, r8, r3
 800830c:	fb03 f908 	mul.w	r9, r3, r8
 8008310:	ea6f 0909 	mvn.w	r9, r9
 8008314:	4638      	mov	r0, r7
 8008316:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800831a:	f1bc 0f09 	cmp.w	ip, #9
 800831e:	d814      	bhi.n	800834a <_strtoul_l.constprop.0+0x86>
 8008320:	4664      	mov	r4, ip
 8008322:	42a3      	cmp	r3, r4
 8008324:	dd22      	ble.n	800836c <_strtoul_l.constprop.0+0xa8>
 8008326:	2f00      	cmp	r7, #0
 8008328:	db1d      	blt.n	8008366 <_strtoul_l.constprop.0+0xa2>
 800832a:	4580      	cmp	r8, r0
 800832c:	d31b      	bcc.n	8008366 <_strtoul_l.constprop.0+0xa2>
 800832e:	d101      	bne.n	8008334 <_strtoul_l.constprop.0+0x70>
 8008330:	45a1      	cmp	r9, r4
 8008332:	db18      	blt.n	8008366 <_strtoul_l.constprop.0+0xa2>
 8008334:	fb00 4003 	mla	r0, r0, r3, r4
 8008338:	2701      	movs	r7, #1
 800833a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800833e:	e7ea      	b.n	8008316 <_strtoul_l.constprop.0+0x52>
 8008340:	2c2b      	cmp	r4, #43	; 0x2b
 8008342:	bf04      	itt	eq
 8008344:	782c      	ldrbeq	r4, [r5, #0]
 8008346:	1c85      	addeq	r5, r0, #2
 8008348:	e7cd      	b.n	80082e6 <_strtoul_l.constprop.0+0x22>
 800834a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800834e:	f1bc 0f19 	cmp.w	ip, #25
 8008352:	d801      	bhi.n	8008358 <_strtoul_l.constprop.0+0x94>
 8008354:	3c37      	subs	r4, #55	; 0x37
 8008356:	e7e4      	b.n	8008322 <_strtoul_l.constprop.0+0x5e>
 8008358:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800835c:	f1bc 0f19 	cmp.w	ip, #25
 8008360:	d804      	bhi.n	800836c <_strtoul_l.constprop.0+0xa8>
 8008362:	3c57      	subs	r4, #87	; 0x57
 8008364:	e7dd      	b.n	8008322 <_strtoul_l.constprop.0+0x5e>
 8008366:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800836a:	e7e6      	b.n	800833a <_strtoul_l.constprop.0+0x76>
 800836c:	2f00      	cmp	r7, #0
 800836e:	da07      	bge.n	8008380 <_strtoul_l.constprop.0+0xbc>
 8008370:	2322      	movs	r3, #34	; 0x22
 8008372:	f8ce 3000 	str.w	r3, [lr]
 8008376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800837a:	b932      	cbnz	r2, 800838a <_strtoul_l.constprop.0+0xc6>
 800837c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008380:	b106      	cbz	r6, 8008384 <_strtoul_l.constprop.0+0xc0>
 8008382:	4240      	negs	r0, r0
 8008384:	2a00      	cmp	r2, #0
 8008386:	d0f9      	beq.n	800837c <_strtoul_l.constprop.0+0xb8>
 8008388:	b107      	cbz	r7, 800838c <_strtoul_l.constprop.0+0xc8>
 800838a:	1e69      	subs	r1, r5, #1
 800838c:	6011      	str	r1, [r2, #0]
 800838e:	e7f5      	b.n	800837c <_strtoul_l.constprop.0+0xb8>
 8008390:	2430      	movs	r4, #48	; 0x30
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1b5      	bne.n	8008302 <_strtoul_l.constprop.0+0x3e>
 8008396:	2308      	movs	r3, #8
 8008398:	e7b3      	b.n	8008302 <_strtoul_l.constprop.0+0x3e>
 800839a:	2c30      	cmp	r4, #48	; 0x30
 800839c:	d0a9      	beq.n	80082f2 <_strtoul_l.constprop.0+0x2e>
 800839e:	230a      	movs	r3, #10
 80083a0:	e7af      	b.n	8008302 <_strtoul_l.constprop.0+0x3e>
 80083a2:	bf00      	nop
 80083a4:	0800a185 	.word	0x0800a185

080083a8 <_strtoul_r>:
 80083a8:	f7ff bf8c 	b.w	80082c4 <_strtoul_l.constprop.0>

080083ac <__submore>:
 80083ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b0:	460c      	mov	r4, r1
 80083b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80083b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083b8:	4299      	cmp	r1, r3
 80083ba:	d11d      	bne.n	80083f8 <__submore+0x4c>
 80083bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083c0:	f7fd fa4a 	bl	8005858 <_malloc_r>
 80083c4:	b918      	cbnz	r0, 80083ce <__submore+0x22>
 80083c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80083d4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80083d8:	6360      	str	r0, [r4, #52]	; 0x34
 80083da:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80083de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80083e2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80083e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80083ea:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80083ee:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80083f2:	6020      	str	r0, [r4, #0]
 80083f4:	2000      	movs	r0, #0
 80083f6:	e7e8      	b.n	80083ca <__submore+0x1e>
 80083f8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80083fa:	0077      	lsls	r7, r6, #1
 80083fc:	463a      	mov	r2, r7
 80083fe:	f000 fa25 	bl	800884c <_realloc_r>
 8008402:	4605      	mov	r5, r0
 8008404:	2800      	cmp	r0, #0
 8008406:	d0de      	beq.n	80083c6 <__submore+0x1a>
 8008408:	eb00 0806 	add.w	r8, r0, r6
 800840c:	4601      	mov	r1, r0
 800840e:	4632      	mov	r2, r6
 8008410:	4640      	mov	r0, r8
 8008412:	f7fe fe55 	bl	80070c0 <memcpy>
 8008416:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800841a:	f8c4 8000 	str.w	r8, [r4]
 800841e:	e7e9      	b.n	80083f4 <__submore+0x48>

08008420 <__assert_func>:
 8008420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008422:	4614      	mov	r4, r2
 8008424:	461a      	mov	r2, r3
 8008426:	4b09      	ldr	r3, [pc, #36]	; (800844c <__assert_func+0x2c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4605      	mov	r5, r0
 800842c:	68d8      	ldr	r0, [r3, #12]
 800842e:	b14c      	cbz	r4, 8008444 <__assert_func+0x24>
 8008430:	4b07      	ldr	r3, [pc, #28]	; (8008450 <__assert_func+0x30>)
 8008432:	9100      	str	r1, [sp, #0]
 8008434:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008438:	4906      	ldr	r1, [pc, #24]	; (8008454 <__assert_func+0x34>)
 800843a:	462b      	mov	r3, r5
 800843c:	f000 f9a6 	bl	800878c <fiprintf>
 8008440:	f000 fc5a 	bl	8008cf8 <abort>
 8008444:	4b04      	ldr	r3, [pc, #16]	; (8008458 <__assert_func+0x38>)
 8008446:	461c      	mov	r4, r3
 8008448:	e7f3      	b.n	8008432 <__assert_func+0x12>
 800844a:	bf00      	nop
 800844c:	20000010 	.word	0x20000010
 8008450:	0800a148 	.word	0x0800a148
 8008454:	0800a155 	.word	0x0800a155
 8008458:	0800a183 	.word	0x0800a183

0800845c <__sflush_r>:
 800845c:	898a      	ldrh	r2, [r1, #12]
 800845e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008462:	4605      	mov	r5, r0
 8008464:	0710      	lsls	r0, r2, #28
 8008466:	460c      	mov	r4, r1
 8008468:	d458      	bmi.n	800851c <__sflush_r+0xc0>
 800846a:	684b      	ldr	r3, [r1, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	dc05      	bgt.n	800847c <__sflush_r+0x20>
 8008470:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008472:	2b00      	cmp	r3, #0
 8008474:	dc02      	bgt.n	800847c <__sflush_r+0x20>
 8008476:	2000      	movs	r0, #0
 8008478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800847c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800847e:	2e00      	cmp	r6, #0
 8008480:	d0f9      	beq.n	8008476 <__sflush_r+0x1a>
 8008482:	2300      	movs	r3, #0
 8008484:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008488:	682f      	ldr	r7, [r5, #0]
 800848a:	602b      	str	r3, [r5, #0]
 800848c:	d032      	beq.n	80084f4 <__sflush_r+0x98>
 800848e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	075a      	lsls	r2, r3, #29
 8008494:	d505      	bpl.n	80084a2 <__sflush_r+0x46>
 8008496:	6863      	ldr	r3, [r4, #4]
 8008498:	1ac0      	subs	r0, r0, r3
 800849a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800849c:	b10b      	cbz	r3, 80084a2 <__sflush_r+0x46>
 800849e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084a0:	1ac0      	subs	r0, r0, r3
 80084a2:	2300      	movs	r3, #0
 80084a4:	4602      	mov	r2, r0
 80084a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084a8:	6a21      	ldr	r1, [r4, #32]
 80084aa:	4628      	mov	r0, r5
 80084ac:	47b0      	blx	r6
 80084ae:	1c43      	adds	r3, r0, #1
 80084b0:	89a3      	ldrh	r3, [r4, #12]
 80084b2:	d106      	bne.n	80084c2 <__sflush_r+0x66>
 80084b4:	6829      	ldr	r1, [r5, #0]
 80084b6:	291d      	cmp	r1, #29
 80084b8:	d82c      	bhi.n	8008514 <__sflush_r+0xb8>
 80084ba:	4a2a      	ldr	r2, [pc, #168]	; (8008564 <__sflush_r+0x108>)
 80084bc:	40ca      	lsrs	r2, r1
 80084be:	07d6      	lsls	r6, r2, #31
 80084c0:	d528      	bpl.n	8008514 <__sflush_r+0xb8>
 80084c2:	2200      	movs	r2, #0
 80084c4:	6062      	str	r2, [r4, #4]
 80084c6:	04d9      	lsls	r1, r3, #19
 80084c8:	6922      	ldr	r2, [r4, #16]
 80084ca:	6022      	str	r2, [r4, #0]
 80084cc:	d504      	bpl.n	80084d8 <__sflush_r+0x7c>
 80084ce:	1c42      	adds	r2, r0, #1
 80084d0:	d101      	bne.n	80084d6 <__sflush_r+0x7a>
 80084d2:	682b      	ldr	r3, [r5, #0]
 80084d4:	b903      	cbnz	r3, 80084d8 <__sflush_r+0x7c>
 80084d6:	6560      	str	r0, [r4, #84]	; 0x54
 80084d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084da:	602f      	str	r7, [r5, #0]
 80084dc:	2900      	cmp	r1, #0
 80084de:	d0ca      	beq.n	8008476 <__sflush_r+0x1a>
 80084e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084e4:	4299      	cmp	r1, r3
 80084e6:	d002      	beq.n	80084ee <__sflush_r+0x92>
 80084e8:	4628      	mov	r0, r5
 80084ea:	f7fd f949 	bl	8005780 <_free_r>
 80084ee:	2000      	movs	r0, #0
 80084f0:	6360      	str	r0, [r4, #52]	; 0x34
 80084f2:	e7c1      	b.n	8008478 <__sflush_r+0x1c>
 80084f4:	6a21      	ldr	r1, [r4, #32]
 80084f6:	2301      	movs	r3, #1
 80084f8:	4628      	mov	r0, r5
 80084fa:	47b0      	blx	r6
 80084fc:	1c41      	adds	r1, r0, #1
 80084fe:	d1c7      	bne.n	8008490 <__sflush_r+0x34>
 8008500:	682b      	ldr	r3, [r5, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0c4      	beq.n	8008490 <__sflush_r+0x34>
 8008506:	2b1d      	cmp	r3, #29
 8008508:	d001      	beq.n	800850e <__sflush_r+0xb2>
 800850a:	2b16      	cmp	r3, #22
 800850c:	d101      	bne.n	8008512 <__sflush_r+0xb6>
 800850e:	602f      	str	r7, [r5, #0]
 8008510:	e7b1      	b.n	8008476 <__sflush_r+0x1a>
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008518:	81a3      	strh	r3, [r4, #12]
 800851a:	e7ad      	b.n	8008478 <__sflush_r+0x1c>
 800851c:	690f      	ldr	r7, [r1, #16]
 800851e:	2f00      	cmp	r7, #0
 8008520:	d0a9      	beq.n	8008476 <__sflush_r+0x1a>
 8008522:	0793      	lsls	r3, r2, #30
 8008524:	680e      	ldr	r6, [r1, #0]
 8008526:	bf08      	it	eq
 8008528:	694b      	ldreq	r3, [r1, #20]
 800852a:	600f      	str	r7, [r1, #0]
 800852c:	bf18      	it	ne
 800852e:	2300      	movne	r3, #0
 8008530:	eba6 0807 	sub.w	r8, r6, r7
 8008534:	608b      	str	r3, [r1, #8]
 8008536:	f1b8 0f00 	cmp.w	r8, #0
 800853a:	dd9c      	ble.n	8008476 <__sflush_r+0x1a>
 800853c:	6a21      	ldr	r1, [r4, #32]
 800853e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008540:	4643      	mov	r3, r8
 8008542:	463a      	mov	r2, r7
 8008544:	4628      	mov	r0, r5
 8008546:	47b0      	blx	r6
 8008548:	2800      	cmp	r0, #0
 800854a:	dc06      	bgt.n	800855a <__sflush_r+0xfe>
 800854c:	89a3      	ldrh	r3, [r4, #12]
 800854e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008552:	81a3      	strh	r3, [r4, #12]
 8008554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008558:	e78e      	b.n	8008478 <__sflush_r+0x1c>
 800855a:	4407      	add	r7, r0
 800855c:	eba8 0800 	sub.w	r8, r8, r0
 8008560:	e7e9      	b.n	8008536 <__sflush_r+0xda>
 8008562:	bf00      	nop
 8008564:	20400001 	.word	0x20400001

08008568 <_fflush_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	690b      	ldr	r3, [r1, #16]
 800856c:	4605      	mov	r5, r0
 800856e:	460c      	mov	r4, r1
 8008570:	b913      	cbnz	r3, 8008578 <_fflush_r+0x10>
 8008572:	2500      	movs	r5, #0
 8008574:	4628      	mov	r0, r5
 8008576:	bd38      	pop	{r3, r4, r5, pc}
 8008578:	b118      	cbz	r0, 8008582 <_fflush_r+0x1a>
 800857a:	6983      	ldr	r3, [r0, #24]
 800857c:	b90b      	cbnz	r3, 8008582 <_fflush_r+0x1a>
 800857e:	f000 f887 	bl	8008690 <__sinit>
 8008582:	4b14      	ldr	r3, [pc, #80]	; (80085d4 <_fflush_r+0x6c>)
 8008584:	429c      	cmp	r4, r3
 8008586:	d11b      	bne.n	80085c0 <_fflush_r+0x58>
 8008588:	686c      	ldr	r4, [r5, #4]
 800858a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d0ef      	beq.n	8008572 <_fflush_r+0xa>
 8008592:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008594:	07d0      	lsls	r0, r2, #31
 8008596:	d404      	bmi.n	80085a2 <_fflush_r+0x3a>
 8008598:	0599      	lsls	r1, r3, #22
 800859a:	d402      	bmi.n	80085a2 <_fflush_r+0x3a>
 800859c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800859e:	f000 f927 	bl	80087f0 <__retarget_lock_acquire_recursive>
 80085a2:	4628      	mov	r0, r5
 80085a4:	4621      	mov	r1, r4
 80085a6:	f7ff ff59 	bl	800845c <__sflush_r>
 80085aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085ac:	07da      	lsls	r2, r3, #31
 80085ae:	4605      	mov	r5, r0
 80085b0:	d4e0      	bmi.n	8008574 <_fflush_r+0xc>
 80085b2:	89a3      	ldrh	r3, [r4, #12]
 80085b4:	059b      	lsls	r3, r3, #22
 80085b6:	d4dd      	bmi.n	8008574 <_fflush_r+0xc>
 80085b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085ba:	f000 f91a 	bl	80087f2 <__retarget_lock_release_recursive>
 80085be:	e7d9      	b.n	8008574 <_fflush_r+0xc>
 80085c0:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <_fflush_r+0x70>)
 80085c2:	429c      	cmp	r4, r3
 80085c4:	d101      	bne.n	80085ca <_fflush_r+0x62>
 80085c6:	68ac      	ldr	r4, [r5, #8]
 80085c8:	e7df      	b.n	800858a <_fflush_r+0x22>
 80085ca:	4b04      	ldr	r3, [pc, #16]	; (80085dc <_fflush_r+0x74>)
 80085cc:	429c      	cmp	r4, r3
 80085ce:	bf08      	it	eq
 80085d0:	68ec      	ldreq	r4, [r5, #12]
 80085d2:	e7da      	b.n	800858a <_fflush_r+0x22>
 80085d4:	0800a2a8 	.word	0x0800a2a8
 80085d8:	0800a2c8 	.word	0x0800a2c8
 80085dc:	0800a288 	.word	0x0800a288

080085e0 <std>:
 80085e0:	2300      	movs	r3, #0
 80085e2:	b510      	push	{r4, lr}
 80085e4:	4604      	mov	r4, r0
 80085e6:	e9c0 3300 	strd	r3, r3, [r0]
 80085ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085ee:	6083      	str	r3, [r0, #8]
 80085f0:	8181      	strh	r1, [r0, #12]
 80085f2:	6643      	str	r3, [r0, #100]	; 0x64
 80085f4:	81c2      	strh	r2, [r0, #14]
 80085f6:	6183      	str	r3, [r0, #24]
 80085f8:	4619      	mov	r1, r3
 80085fa:	2208      	movs	r2, #8
 80085fc:	305c      	adds	r0, #92	; 0x5c
 80085fe:	f7fd f8b7 	bl	8005770 <memset>
 8008602:	4b05      	ldr	r3, [pc, #20]	; (8008618 <std+0x38>)
 8008604:	6263      	str	r3, [r4, #36]	; 0x24
 8008606:	4b05      	ldr	r3, [pc, #20]	; (800861c <std+0x3c>)
 8008608:	62a3      	str	r3, [r4, #40]	; 0x28
 800860a:	4b05      	ldr	r3, [pc, #20]	; (8008620 <std+0x40>)
 800860c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800860e:	4b05      	ldr	r3, [pc, #20]	; (8008624 <std+0x44>)
 8008610:	6224      	str	r4, [r4, #32]
 8008612:	6323      	str	r3, [r4, #48]	; 0x30
 8008614:	bd10      	pop	{r4, pc}
 8008616:	bf00      	nop
 8008618:	080062cd 	.word	0x080062cd
 800861c:	080062f3 	.word	0x080062f3
 8008620:	0800632b 	.word	0x0800632b
 8008624:	0800634f 	.word	0x0800634f

08008628 <_cleanup_r>:
 8008628:	4901      	ldr	r1, [pc, #4]	; (8008630 <_cleanup_r+0x8>)
 800862a:	f000 b8c1 	b.w	80087b0 <_fwalk_reent>
 800862e:	bf00      	nop
 8008630:	08008569 	.word	0x08008569

08008634 <__sfmoreglue>:
 8008634:	b570      	push	{r4, r5, r6, lr}
 8008636:	2268      	movs	r2, #104	; 0x68
 8008638:	1e4d      	subs	r5, r1, #1
 800863a:	4355      	muls	r5, r2
 800863c:	460e      	mov	r6, r1
 800863e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008642:	f7fd f909 	bl	8005858 <_malloc_r>
 8008646:	4604      	mov	r4, r0
 8008648:	b140      	cbz	r0, 800865c <__sfmoreglue+0x28>
 800864a:	2100      	movs	r1, #0
 800864c:	e9c0 1600 	strd	r1, r6, [r0]
 8008650:	300c      	adds	r0, #12
 8008652:	60a0      	str	r0, [r4, #8]
 8008654:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008658:	f7fd f88a 	bl	8005770 <memset>
 800865c:	4620      	mov	r0, r4
 800865e:	bd70      	pop	{r4, r5, r6, pc}

08008660 <__sfp_lock_acquire>:
 8008660:	4801      	ldr	r0, [pc, #4]	; (8008668 <__sfp_lock_acquire+0x8>)
 8008662:	f000 b8c5 	b.w	80087f0 <__retarget_lock_acquire_recursive>
 8008666:	bf00      	nop
 8008668:	200005b1 	.word	0x200005b1

0800866c <__sfp_lock_release>:
 800866c:	4801      	ldr	r0, [pc, #4]	; (8008674 <__sfp_lock_release+0x8>)
 800866e:	f000 b8c0 	b.w	80087f2 <__retarget_lock_release_recursive>
 8008672:	bf00      	nop
 8008674:	200005b1 	.word	0x200005b1

08008678 <__sinit_lock_acquire>:
 8008678:	4801      	ldr	r0, [pc, #4]	; (8008680 <__sinit_lock_acquire+0x8>)
 800867a:	f000 b8b9 	b.w	80087f0 <__retarget_lock_acquire_recursive>
 800867e:	bf00      	nop
 8008680:	200005b2 	.word	0x200005b2

08008684 <__sinit_lock_release>:
 8008684:	4801      	ldr	r0, [pc, #4]	; (800868c <__sinit_lock_release+0x8>)
 8008686:	f000 b8b4 	b.w	80087f2 <__retarget_lock_release_recursive>
 800868a:	bf00      	nop
 800868c:	200005b2 	.word	0x200005b2

08008690 <__sinit>:
 8008690:	b510      	push	{r4, lr}
 8008692:	4604      	mov	r4, r0
 8008694:	f7ff fff0 	bl	8008678 <__sinit_lock_acquire>
 8008698:	69a3      	ldr	r3, [r4, #24]
 800869a:	b11b      	cbz	r3, 80086a4 <__sinit+0x14>
 800869c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086a0:	f7ff bff0 	b.w	8008684 <__sinit_lock_release>
 80086a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80086a8:	6523      	str	r3, [r4, #80]	; 0x50
 80086aa:	4b13      	ldr	r3, [pc, #76]	; (80086f8 <__sinit+0x68>)
 80086ac:	4a13      	ldr	r2, [pc, #76]	; (80086fc <__sinit+0x6c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80086b2:	42a3      	cmp	r3, r4
 80086b4:	bf04      	itt	eq
 80086b6:	2301      	moveq	r3, #1
 80086b8:	61a3      	streq	r3, [r4, #24]
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 f820 	bl	8008700 <__sfp>
 80086c0:	6060      	str	r0, [r4, #4]
 80086c2:	4620      	mov	r0, r4
 80086c4:	f000 f81c 	bl	8008700 <__sfp>
 80086c8:	60a0      	str	r0, [r4, #8]
 80086ca:	4620      	mov	r0, r4
 80086cc:	f000 f818 	bl	8008700 <__sfp>
 80086d0:	2200      	movs	r2, #0
 80086d2:	60e0      	str	r0, [r4, #12]
 80086d4:	2104      	movs	r1, #4
 80086d6:	6860      	ldr	r0, [r4, #4]
 80086d8:	f7ff ff82 	bl	80085e0 <std>
 80086dc:	68a0      	ldr	r0, [r4, #8]
 80086de:	2201      	movs	r2, #1
 80086e0:	2109      	movs	r1, #9
 80086e2:	f7ff ff7d 	bl	80085e0 <std>
 80086e6:	68e0      	ldr	r0, [r4, #12]
 80086e8:	2202      	movs	r2, #2
 80086ea:	2112      	movs	r1, #18
 80086ec:	f7ff ff78 	bl	80085e0 <std>
 80086f0:	2301      	movs	r3, #1
 80086f2:	61a3      	str	r3, [r4, #24]
 80086f4:	e7d2      	b.n	800869c <__sinit+0xc>
 80086f6:	bf00      	nop
 80086f8:	08009ef8 	.word	0x08009ef8
 80086fc:	08008629 	.word	0x08008629

08008700 <__sfp>:
 8008700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008702:	4607      	mov	r7, r0
 8008704:	f7ff ffac 	bl	8008660 <__sfp_lock_acquire>
 8008708:	4b1e      	ldr	r3, [pc, #120]	; (8008784 <__sfp+0x84>)
 800870a:	681e      	ldr	r6, [r3, #0]
 800870c:	69b3      	ldr	r3, [r6, #24]
 800870e:	b913      	cbnz	r3, 8008716 <__sfp+0x16>
 8008710:	4630      	mov	r0, r6
 8008712:	f7ff ffbd 	bl	8008690 <__sinit>
 8008716:	3648      	adds	r6, #72	; 0x48
 8008718:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800871c:	3b01      	subs	r3, #1
 800871e:	d503      	bpl.n	8008728 <__sfp+0x28>
 8008720:	6833      	ldr	r3, [r6, #0]
 8008722:	b30b      	cbz	r3, 8008768 <__sfp+0x68>
 8008724:	6836      	ldr	r6, [r6, #0]
 8008726:	e7f7      	b.n	8008718 <__sfp+0x18>
 8008728:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800872c:	b9d5      	cbnz	r5, 8008764 <__sfp+0x64>
 800872e:	4b16      	ldr	r3, [pc, #88]	; (8008788 <__sfp+0x88>)
 8008730:	60e3      	str	r3, [r4, #12]
 8008732:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008736:	6665      	str	r5, [r4, #100]	; 0x64
 8008738:	f000 f859 	bl	80087ee <__retarget_lock_init_recursive>
 800873c:	f7ff ff96 	bl	800866c <__sfp_lock_release>
 8008740:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008744:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008748:	6025      	str	r5, [r4, #0]
 800874a:	61a5      	str	r5, [r4, #24]
 800874c:	2208      	movs	r2, #8
 800874e:	4629      	mov	r1, r5
 8008750:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008754:	f7fd f80c 	bl	8005770 <memset>
 8008758:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800875c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008760:	4620      	mov	r0, r4
 8008762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008764:	3468      	adds	r4, #104	; 0x68
 8008766:	e7d9      	b.n	800871c <__sfp+0x1c>
 8008768:	2104      	movs	r1, #4
 800876a:	4638      	mov	r0, r7
 800876c:	f7ff ff62 	bl	8008634 <__sfmoreglue>
 8008770:	4604      	mov	r4, r0
 8008772:	6030      	str	r0, [r6, #0]
 8008774:	2800      	cmp	r0, #0
 8008776:	d1d5      	bne.n	8008724 <__sfp+0x24>
 8008778:	f7ff ff78 	bl	800866c <__sfp_lock_release>
 800877c:	230c      	movs	r3, #12
 800877e:	603b      	str	r3, [r7, #0]
 8008780:	e7ee      	b.n	8008760 <__sfp+0x60>
 8008782:	bf00      	nop
 8008784:	08009ef8 	.word	0x08009ef8
 8008788:	ffff0001 	.word	0xffff0001

0800878c <fiprintf>:
 800878c:	b40e      	push	{r1, r2, r3}
 800878e:	b503      	push	{r0, r1, lr}
 8008790:	4601      	mov	r1, r0
 8008792:	ab03      	add	r3, sp, #12
 8008794:	4805      	ldr	r0, [pc, #20]	; (80087ac <fiprintf+0x20>)
 8008796:	f853 2b04 	ldr.w	r2, [r3], #4
 800879a:	6800      	ldr	r0, [r0, #0]
 800879c:	9301      	str	r3, [sp, #4]
 800879e:	f000 f8ad 	bl	80088fc <_vfiprintf_r>
 80087a2:	b002      	add	sp, #8
 80087a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80087a8:	b003      	add	sp, #12
 80087aa:	4770      	bx	lr
 80087ac:	20000010 	.word	0x20000010

080087b0 <_fwalk_reent>:
 80087b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087b4:	4606      	mov	r6, r0
 80087b6:	4688      	mov	r8, r1
 80087b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087bc:	2700      	movs	r7, #0
 80087be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087c2:	f1b9 0901 	subs.w	r9, r9, #1
 80087c6:	d505      	bpl.n	80087d4 <_fwalk_reent+0x24>
 80087c8:	6824      	ldr	r4, [r4, #0]
 80087ca:	2c00      	cmp	r4, #0
 80087cc:	d1f7      	bne.n	80087be <_fwalk_reent+0xe>
 80087ce:	4638      	mov	r0, r7
 80087d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087d4:	89ab      	ldrh	r3, [r5, #12]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d907      	bls.n	80087ea <_fwalk_reent+0x3a>
 80087da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087de:	3301      	adds	r3, #1
 80087e0:	d003      	beq.n	80087ea <_fwalk_reent+0x3a>
 80087e2:	4629      	mov	r1, r5
 80087e4:	4630      	mov	r0, r6
 80087e6:	47c0      	blx	r8
 80087e8:	4307      	orrs	r7, r0
 80087ea:	3568      	adds	r5, #104	; 0x68
 80087ec:	e7e9      	b.n	80087c2 <_fwalk_reent+0x12>

080087ee <__retarget_lock_init_recursive>:
 80087ee:	4770      	bx	lr

080087f0 <__retarget_lock_acquire_recursive>:
 80087f0:	4770      	bx	lr

080087f2 <__retarget_lock_release_recursive>:
 80087f2:	4770      	bx	lr

080087f4 <__ascii_mbtowc>:
 80087f4:	b082      	sub	sp, #8
 80087f6:	b901      	cbnz	r1, 80087fa <__ascii_mbtowc+0x6>
 80087f8:	a901      	add	r1, sp, #4
 80087fa:	b142      	cbz	r2, 800880e <__ascii_mbtowc+0x1a>
 80087fc:	b14b      	cbz	r3, 8008812 <__ascii_mbtowc+0x1e>
 80087fe:	7813      	ldrb	r3, [r2, #0]
 8008800:	600b      	str	r3, [r1, #0]
 8008802:	7812      	ldrb	r2, [r2, #0]
 8008804:	1e10      	subs	r0, r2, #0
 8008806:	bf18      	it	ne
 8008808:	2001      	movne	r0, #1
 800880a:	b002      	add	sp, #8
 800880c:	4770      	bx	lr
 800880e:	4610      	mov	r0, r2
 8008810:	e7fb      	b.n	800880a <__ascii_mbtowc+0x16>
 8008812:	f06f 0001 	mvn.w	r0, #1
 8008816:	e7f8      	b.n	800880a <__ascii_mbtowc+0x16>

08008818 <memmove>:
 8008818:	4288      	cmp	r0, r1
 800881a:	b510      	push	{r4, lr}
 800881c:	eb01 0402 	add.w	r4, r1, r2
 8008820:	d902      	bls.n	8008828 <memmove+0x10>
 8008822:	4284      	cmp	r4, r0
 8008824:	4623      	mov	r3, r4
 8008826:	d807      	bhi.n	8008838 <memmove+0x20>
 8008828:	1e43      	subs	r3, r0, #1
 800882a:	42a1      	cmp	r1, r4
 800882c:	d008      	beq.n	8008840 <memmove+0x28>
 800882e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008836:	e7f8      	b.n	800882a <memmove+0x12>
 8008838:	4402      	add	r2, r0
 800883a:	4601      	mov	r1, r0
 800883c:	428a      	cmp	r2, r1
 800883e:	d100      	bne.n	8008842 <memmove+0x2a>
 8008840:	bd10      	pop	{r4, pc}
 8008842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800884a:	e7f7      	b.n	800883c <memmove+0x24>

0800884c <_realloc_r>:
 800884c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008850:	4680      	mov	r8, r0
 8008852:	4614      	mov	r4, r2
 8008854:	460e      	mov	r6, r1
 8008856:	b921      	cbnz	r1, 8008862 <_realloc_r+0x16>
 8008858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800885c:	4611      	mov	r1, r2
 800885e:	f7fc bffb 	b.w	8005858 <_malloc_r>
 8008862:	b92a      	cbnz	r2, 8008870 <_realloc_r+0x24>
 8008864:	f7fc ff8c 	bl	8005780 <_free_r>
 8008868:	4625      	mov	r5, r4
 800886a:	4628      	mov	r0, r5
 800886c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008870:	f000 faae 	bl	8008dd0 <_malloc_usable_size_r>
 8008874:	4284      	cmp	r4, r0
 8008876:	4607      	mov	r7, r0
 8008878:	d802      	bhi.n	8008880 <_realloc_r+0x34>
 800887a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800887e:	d812      	bhi.n	80088a6 <_realloc_r+0x5a>
 8008880:	4621      	mov	r1, r4
 8008882:	4640      	mov	r0, r8
 8008884:	f7fc ffe8 	bl	8005858 <_malloc_r>
 8008888:	4605      	mov	r5, r0
 800888a:	2800      	cmp	r0, #0
 800888c:	d0ed      	beq.n	800886a <_realloc_r+0x1e>
 800888e:	42bc      	cmp	r4, r7
 8008890:	4622      	mov	r2, r4
 8008892:	4631      	mov	r1, r6
 8008894:	bf28      	it	cs
 8008896:	463a      	movcs	r2, r7
 8008898:	f7fe fc12 	bl	80070c0 <memcpy>
 800889c:	4631      	mov	r1, r6
 800889e:	4640      	mov	r0, r8
 80088a0:	f7fc ff6e 	bl	8005780 <_free_r>
 80088a4:	e7e1      	b.n	800886a <_realloc_r+0x1e>
 80088a6:	4635      	mov	r5, r6
 80088a8:	e7df      	b.n	800886a <_realloc_r+0x1e>

080088aa <__sfputc_r>:
 80088aa:	6893      	ldr	r3, [r2, #8]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	b410      	push	{r4}
 80088b2:	6093      	str	r3, [r2, #8]
 80088b4:	da08      	bge.n	80088c8 <__sfputc_r+0x1e>
 80088b6:	6994      	ldr	r4, [r2, #24]
 80088b8:	42a3      	cmp	r3, r4
 80088ba:	db01      	blt.n	80088c0 <__sfputc_r+0x16>
 80088bc:	290a      	cmp	r1, #10
 80088be:	d103      	bne.n	80088c8 <__sfputc_r+0x1e>
 80088c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088c4:	f000 b94a 	b.w	8008b5c <__swbuf_r>
 80088c8:	6813      	ldr	r3, [r2, #0]
 80088ca:	1c58      	adds	r0, r3, #1
 80088cc:	6010      	str	r0, [r2, #0]
 80088ce:	7019      	strb	r1, [r3, #0]
 80088d0:	4608      	mov	r0, r1
 80088d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <__sfputs_r>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	4606      	mov	r6, r0
 80088dc:	460f      	mov	r7, r1
 80088de:	4614      	mov	r4, r2
 80088e0:	18d5      	adds	r5, r2, r3
 80088e2:	42ac      	cmp	r4, r5
 80088e4:	d101      	bne.n	80088ea <__sfputs_r+0x12>
 80088e6:	2000      	movs	r0, #0
 80088e8:	e007      	b.n	80088fa <__sfputs_r+0x22>
 80088ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ee:	463a      	mov	r2, r7
 80088f0:	4630      	mov	r0, r6
 80088f2:	f7ff ffda 	bl	80088aa <__sfputc_r>
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	d1f3      	bne.n	80088e2 <__sfputs_r+0xa>
 80088fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088fc <_vfiprintf_r>:
 80088fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008900:	460d      	mov	r5, r1
 8008902:	b09d      	sub	sp, #116	; 0x74
 8008904:	4614      	mov	r4, r2
 8008906:	4698      	mov	r8, r3
 8008908:	4606      	mov	r6, r0
 800890a:	b118      	cbz	r0, 8008914 <_vfiprintf_r+0x18>
 800890c:	6983      	ldr	r3, [r0, #24]
 800890e:	b90b      	cbnz	r3, 8008914 <_vfiprintf_r+0x18>
 8008910:	f7ff febe 	bl	8008690 <__sinit>
 8008914:	4b89      	ldr	r3, [pc, #548]	; (8008b3c <_vfiprintf_r+0x240>)
 8008916:	429d      	cmp	r5, r3
 8008918:	d11b      	bne.n	8008952 <_vfiprintf_r+0x56>
 800891a:	6875      	ldr	r5, [r6, #4]
 800891c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800891e:	07d9      	lsls	r1, r3, #31
 8008920:	d405      	bmi.n	800892e <_vfiprintf_r+0x32>
 8008922:	89ab      	ldrh	r3, [r5, #12]
 8008924:	059a      	lsls	r2, r3, #22
 8008926:	d402      	bmi.n	800892e <_vfiprintf_r+0x32>
 8008928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800892a:	f7ff ff61 	bl	80087f0 <__retarget_lock_acquire_recursive>
 800892e:	89ab      	ldrh	r3, [r5, #12]
 8008930:	071b      	lsls	r3, r3, #28
 8008932:	d501      	bpl.n	8008938 <_vfiprintf_r+0x3c>
 8008934:	692b      	ldr	r3, [r5, #16]
 8008936:	b9eb      	cbnz	r3, 8008974 <_vfiprintf_r+0x78>
 8008938:	4629      	mov	r1, r5
 800893a:	4630      	mov	r0, r6
 800893c:	f000 f96e 	bl	8008c1c <__swsetup_r>
 8008940:	b1c0      	cbz	r0, 8008974 <_vfiprintf_r+0x78>
 8008942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008944:	07dc      	lsls	r4, r3, #31
 8008946:	d50e      	bpl.n	8008966 <_vfiprintf_r+0x6a>
 8008948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800894c:	b01d      	add	sp, #116	; 0x74
 800894e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008952:	4b7b      	ldr	r3, [pc, #492]	; (8008b40 <_vfiprintf_r+0x244>)
 8008954:	429d      	cmp	r5, r3
 8008956:	d101      	bne.n	800895c <_vfiprintf_r+0x60>
 8008958:	68b5      	ldr	r5, [r6, #8]
 800895a:	e7df      	b.n	800891c <_vfiprintf_r+0x20>
 800895c:	4b79      	ldr	r3, [pc, #484]	; (8008b44 <_vfiprintf_r+0x248>)
 800895e:	429d      	cmp	r5, r3
 8008960:	bf08      	it	eq
 8008962:	68f5      	ldreq	r5, [r6, #12]
 8008964:	e7da      	b.n	800891c <_vfiprintf_r+0x20>
 8008966:	89ab      	ldrh	r3, [r5, #12]
 8008968:	0598      	lsls	r0, r3, #22
 800896a:	d4ed      	bmi.n	8008948 <_vfiprintf_r+0x4c>
 800896c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800896e:	f7ff ff40 	bl	80087f2 <__retarget_lock_release_recursive>
 8008972:	e7e9      	b.n	8008948 <_vfiprintf_r+0x4c>
 8008974:	2300      	movs	r3, #0
 8008976:	9309      	str	r3, [sp, #36]	; 0x24
 8008978:	2320      	movs	r3, #32
 800897a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800897e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008982:	2330      	movs	r3, #48	; 0x30
 8008984:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b48 <_vfiprintf_r+0x24c>
 8008988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800898c:	f04f 0901 	mov.w	r9, #1
 8008990:	4623      	mov	r3, r4
 8008992:	469a      	mov	sl, r3
 8008994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008998:	b10a      	cbz	r2, 800899e <_vfiprintf_r+0xa2>
 800899a:	2a25      	cmp	r2, #37	; 0x25
 800899c:	d1f9      	bne.n	8008992 <_vfiprintf_r+0x96>
 800899e:	ebba 0b04 	subs.w	fp, sl, r4
 80089a2:	d00b      	beq.n	80089bc <_vfiprintf_r+0xc0>
 80089a4:	465b      	mov	r3, fp
 80089a6:	4622      	mov	r2, r4
 80089a8:	4629      	mov	r1, r5
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7ff ff94 	bl	80088d8 <__sfputs_r>
 80089b0:	3001      	adds	r0, #1
 80089b2:	f000 80aa 	beq.w	8008b0a <_vfiprintf_r+0x20e>
 80089b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089b8:	445a      	add	r2, fp
 80089ba:	9209      	str	r2, [sp, #36]	; 0x24
 80089bc:	f89a 3000 	ldrb.w	r3, [sl]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 80a2 	beq.w	8008b0a <_vfiprintf_r+0x20e>
 80089c6:	2300      	movs	r3, #0
 80089c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089d0:	f10a 0a01 	add.w	sl, sl, #1
 80089d4:	9304      	str	r3, [sp, #16]
 80089d6:	9307      	str	r3, [sp, #28]
 80089d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089dc:	931a      	str	r3, [sp, #104]	; 0x68
 80089de:	4654      	mov	r4, sl
 80089e0:	2205      	movs	r2, #5
 80089e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e6:	4858      	ldr	r0, [pc, #352]	; (8008b48 <_vfiprintf_r+0x24c>)
 80089e8:	f7f7 fc12 	bl	8000210 <memchr>
 80089ec:	9a04      	ldr	r2, [sp, #16]
 80089ee:	b9d8      	cbnz	r0, 8008a28 <_vfiprintf_r+0x12c>
 80089f0:	06d1      	lsls	r1, r2, #27
 80089f2:	bf44      	itt	mi
 80089f4:	2320      	movmi	r3, #32
 80089f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089fa:	0713      	lsls	r3, r2, #28
 80089fc:	bf44      	itt	mi
 80089fe:	232b      	movmi	r3, #43	; 0x2b
 8008a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a04:	f89a 3000 	ldrb.w	r3, [sl]
 8008a08:	2b2a      	cmp	r3, #42	; 0x2a
 8008a0a:	d015      	beq.n	8008a38 <_vfiprintf_r+0x13c>
 8008a0c:	9a07      	ldr	r2, [sp, #28]
 8008a0e:	4654      	mov	r4, sl
 8008a10:	2000      	movs	r0, #0
 8008a12:	f04f 0c0a 	mov.w	ip, #10
 8008a16:	4621      	mov	r1, r4
 8008a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a1c:	3b30      	subs	r3, #48	; 0x30
 8008a1e:	2b09      	cmp	r3, #9
 8008a20:	d94e      	bls.n	8008ac0 <_vfiprintf_r+0x1c4>
 8008a22:	b1b0      	cbz	r0, 8008a52 <_vfiprintf_r+0x156>
 8008a24:	9207      	str	r2, [sp, #28]
 8008a26:	e014      	b.n	8008a52 <_vfiprintf_r+0x156>
 8008a28:	eba0 0308 	sub.w	r3, r0, r8
 8008a2c:	fa09 f303 	lsl.w	r3, r9, r3
 8008a30:	4313      	orrs	r3, r2
 8008a32:	9304      	str	r3, [sp, #16]
 8008a34:	46a2      	mov	sl, r4
 8008a36:	e7d2      	b.n	80089de <_vfiprintf_r+0xe2>
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	1d19      	adds	r1, r3, #4
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	9103      	str	r1, [sp, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	bfbb      	ittet	lt
 8008a44:	425b      	neglt	r3, r3
 8008a46:	f042 0202 	orrlt.w	r2, r2, #2
 8008a4a:	9307      	strge	r3, [sp, #28]
 8008a4c:	9307      	strlt	r3, [sp, #28]
 8008a4e:	bfb8      	it	lt
 8008a50:	9204      	strlt	r2, [sp, #16]
 8008a52:	7823      	ldrb	r3, [r4, #0]
 8008a54:	2b2e      	cmp	r3, #46	; 0x2e
 8008a56:	d10c      	bne.n	8008a72 <_vfiprintf_r+0x176>
 8008a58:	7863      	ldrb	r3, [r4, #1]
 8008a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a5c:	d135      	bne.n	8008aca <_vfiprintf_r+0x1ce>
 8008a5e:	9b03      	ldr	r3, [sp, #12]
 8008a60:	1d1a      	adds	r2, r3, #4
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	9203      	str	r2, [sp, #12]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	bfb8      	it	lt
 8008a6a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a6e:	3402      	adds	r4, #2
 8008a70:	9305      	str	r3, [sp, #20]
 8008a72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b58 <_vfiprintf_r+0x25c>
 8008a76:	7821      	ldrb	r1, [r4, #0]
 8008a78:	2203      	movs	r2, #3
 8008a7a:	4650      	mov	r0, sl
 8008a7c:	f7f7 fbc8 	bl	8000210 <memchr>
 8008a80:	b140      	cbz	r0, 8008a94 <_vfiprintf_r+0x198>
 8008a82:	2340      	movs	r3, #64	; 0x40
 8008a84:	eba0 000a 	sub.w	r0, r0, sl
 8008a88:	fa03 f000 	lsl.w	r0, r3, r0
 8008a8c:	9b04      	ldr	r3, [sp, #16]
 8008a8e:	4303      	orrs	r3, r0
 8008a90:	3401      	adds	r4, #1
 8008a92:	9304      	str	r3, [sp, #16]
 8008a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a98:	482c      	ldr	r0, [pc, #176]	; (8008b4c <_vfiprintf_r+0x250>)
 8008a9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a9e:	2206      	movs	r2, #6
 8008aa0:	f7f7 fbb6 	bl	8000210 <memchr>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d03f      	beq.n	8008b28 <_vfiprintf_r+0x22c>
 8008aa8:	4b29      	ldr	r3, [pc, #164]	; (8008b50 <_vfiprintf_r+0x254>)
 8008aaa:	bb1b      	cbnz	r3, 8008af4 <_vfiprintf_r+0x1f8>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	3307      	adds	r3, #7
 8008ab0:	f023 0307 	bic.w	r3, r3, #7
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	9303      	str	r3, [sp, #12]
 8008ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aba:	443b      	add	r3, r7
 8008abc:	9309      	str	r3, [sp, #36]	; 0x24
 8008abe:	e767      	b.n	8008990 <_vfiprintf_r+0x94>
 8008ac0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	2001      	movs	r0, #1
 8008ac8:	e7a5      	b.n	8008a16 <_vfiprintf_r+0x11a>
 8008aca:	2300      	movs	r3, #0
 8008acc:	3401      	adds	r4, #1
 8008ace:	9305      	str	r3, [sp, #20]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	f04f 0c0a 	mov.w	ip, #10
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008adc:	3a30      	subs	r2, #48	; 0x30
 8008ade:	2a09      	cmp	r2, #9
 8008ae0:	d903      	bls.n	8008aea <_vfiprintf_r+0x1ee>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d0c5      	beq.n	8008a72 <_vfiprintf_r+0x176>
 8008ae6:	9105      	str	r1, [sp, #20]
 8008ae8:	e7c3      	b.n	8008a72 <_vfiprintf_r+0x176>
 8008aea:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aee:	4604      	mov	r4, r0
 8008af0:	2301      	movs	r3, #1
 8008af2:	e7f0      	b.n	8008ad6 <_vfiprintf_r+0x1da>
 8008af4:	ab03      	add	r3, sp, #12
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	462a      	mov	r2, r5
 8008afa:	4b16      	ldr	r3, [pc, #88]	; (8008b54 <_vfiprintf_r+0x258>)
 8008afc:	a904      	add	r1, sp, #16
 8008afe:	4630      	mov	r0, r6
 8008b00:	f7fc ffbe 	bl	8005a80 <_printf_float>
 8008b04:	4607      	mov	r7, r0
 8008b06:	1c78      	adds	r0, r7, #1
 8008b08:	d1d6      	bne.n	8008ab8 <_vfiprintf_r+0x1bc>
 8008b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b0c:	07d9      	lsls	r1, r3, #31
 8008b0e:	d405      	bmi.n	8008b1c <_vfiprintf_r+0x220>
 8008b10:	89ab      	ldrh	r3, [r5, #12]
 8008b12:	059a      	lsls	r2, r3, #22
 8008b14:	d402      	bmi.n	8008b1c <_vfiprintf_r+0x220>
 8008b16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b18:	f7ff fe6b 	bl	80087f2 <__retarget_lock_release_recursive>
 8008b1c:	89ab      	ldrh	r3, [r5, #12]
 8008b1e:	065b      	lsls	r3, r3, #25
 8008b20:	f53f af12 	bmi.w	8008948 <_vfiprintf_r+0x4c>
 8008b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b26:	e711      	b.n	800894c <_vfiprintf_r+0x50>
 8008b28:	ab03      	add	r3, sp, #12
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	462a      	mov	r2, r5
 8008b2e:	4b09      	ldr	r3, [pc, #36]	; (8008b54 <_vfiprintf_r+0x258>)
 8008b30:	a904      	add	r1, sp, #16
 8008b32:	4630      	mov	r0, r6
 8008b34:	f7fd fa48 	bl	8005fc8 <_printf_i>
 8008b38:	e7e4      	b.n	8008b04 <_vfiprintf_r+0x208>
 8008b3a:	bf00      	nop
 8008b3c:	0800a2a8 	.word	0x0800a2a8
 8008b40:	0800a2c8 	.word	0x0800a2c8
 8008b44:	0800a288 	.word	0x0800a288
 8008b48:	0800a11c 	.word	0x0800a11c
 8008b4c:	0800a126 	.word	0x0800a126
 8008b50:	08005a81 	.word	0x08005a81
 8008b54:	080088d9 	.word	0x080088d9
 8008b58:	0800a122 	.word	0x0800a122

08008b5c <__swbuf_r>:
 8008b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5e:	460e      	mov	r6, r1
 8008b60:	4614      	mov	r4, r2
 8008b62:	4605      	mov	r5, r0
 8008b64:	b118      	cbz	r0, 8008b6e <__swbuf_r+0x12>
 8008b66:	6983      	ldr	r3, [r0, #24]
 8008b68:	b90b      	cbnz	r3, 8008b6e <__swbuf_r+0x12>
 8008b6a:	f7ff fd91 	bl	8008690 <__sinit>
 8008b6e:	4b21      	ldr	r3, [pc, #132]	; (8008bf4 <__swbuf_r+0x98>)
 8008b70:	429c      	cmp	r4, r3
 8008b72:	d12b      	bne.n	8008bcc <__swbuf_r+0x70>
 8008b74:	686c      	ldr	r4, [r5, #4]
 8008b76:	69a3      	ldr	r3, [r4, #24]
 8008b78:	60a3      	str	r3, [r4, #8]
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	071a      	lsls	r2, r3, #28
 8008b7e:	d52f      	bpl.n	8008be0 <__swbuf_r+0x84>
 8008b80:	6923      	ldr	r3, [r4, #16]
 8008b82:	b36b      	cbz	r3, 8008be0 <__swbuf_r+0x84>
 8008b84:	6923      	ldr	r3, [r4, #16]
 8008b86:	6820      	ldr	r0, [r4, #0]
 8008b88:	1ac0      	subs	r0, r0, r3
 8008b8a:	6963      	ldr	r3, [r4, #20]
 8008b8c:	b2f6      	uxtb	r6, r6
 8008b8e:	4283      	cmp	r3, r0
 8008b90:	4637      	mov	r7, r6
 8008b92:	dc04      	bgt.n	8008b9e <__swbuf_r+0x42>
 8008b94:	4621      	mov	r1, r4
 8008b96:	4628      	mov	r0, r5
 8008b98:	f7ff fce6 	bl	8008568 <_fflush_r>
 8008b9c:	bb30      	cbnz	r0, 8008bec <__swbuf_r+0x90>
 8008b9e:	68a3      	ldr	r3, [r4, #8]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	60a3      	str	r3, [r4, #8]
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	6022      	str	r2, [r4, #0]
 8008baa:	701e      	strb	r6, [r3, #0]
 8008bac:	6963      	ldr	r3, [r4, #20]
 8008bae:	3001      	adds	r0, #1
 8008bb0:	4283      	cmp	r3, r0
 8008bb2:	d004      	beq.n	8008bbe <__swbuf_r+0x62>
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	07db      	lsls	r3, r3, #31
 8008bb8:	d506      	bpl.n	8008bc8 <__swbuf_r+0x6c>
 8008bba:	2e0a      	cmp	r6, #10
 8008bbc:	d104      	bne.n	8008bc8 <__swbuf_r+0x6c>
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f7ff fcd1 	bl	8008568 <_fflush_r>
 8008bc6:	b988      	cbnz	r0, 8008bec <__swbuf_r+0x90>
 8008bc8:	4638      	mov	r0, r7
 8008bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <__swbuf_r+0x9c>)
 8008bce:	429c      	cmp	r4, r3
 8008bd0:	d101      	bne.n	8008bd6 <__swbuf_r+0x7a>
 8008bd2:	68ac      	ldr	r4, [r5, #8]
 8008bd4:	e7cf      	b.n	8008b76 <__swbuf_r+0x1a>
 8008bd6:	4b09      	ldr	r3, [pc, #36]	; (8008bfc <__swbuf_r+0xa0>)
 8008bd8:	429c      	cmp	r4, r3
 8008bda:	bf08      	it	eq
 8008bdc:	68ec      	ldreq	r4, [r5, #12]
 8008bde:	e7ca      	b.n	8008b76 <__swbuf_r+0x1a>
 8008be0:	4621      	mov	r1, r4
 8008be2:	4628      	mov	r0, r5
 8008be4:	f000 f81a 	bl	8008c1c <__swsetup_r>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d0cb      	beq.n	8008b84 <__swbuf_r+0x28>
 8008bec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008bf0:	e7ea      	b.n	8008bc8 <__swbuf_r+0x6c>
 8008bf2:	bf00      	nop
 8008bf4:	0800a2a8 	.word	0x0800a2a8
 8008bf8:	0800a2c8 	.word	0x0800a2c8
 8008bfc:	0800a288 	.word	0x0800a288

08008c00 <__ascii_wctomb>:
 8008c00:	b149      	cbz	r1, 8008c16 <__ascii_wctomb+0x16>
 8008c02:	2aff      	cmp	r2, #255	; 0xff
 8008c04:	bf85      	ittet	hi
 8008c06:	238a      	movhi	r3, #138	; 0x8a
 8008c08:	6003      	strhi	r3, [r0, #0]
 8008c0a:	700a      	strbls	r2, [r1, #0]
 8008c0c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008c10:	bf98      	it	ls
 8008c12:	2001      	movls	r0, #1
 8008c14:	4770      	bx	lr
 8008c16:	4608      	mov	r0, r1
 8008c18:	4770      	bx	lr
	...

08008c1c <__swsetup_r>:
 8008c1c:	4b32      	ldr	r3, [pc, #200]	; (8008ce8 <__swsetup_r+0xcc>)
 8008c1e:	b570      	push	{r4, r5, r6, lr}
 8008c20:	681d      	ldr	r5, [r3, #0]
 8008c22:	4606      	mov	r6, r0
 8008c24:	460c      	mov	r4, r1
 8008c26:	b125      	cbz	r5, 8008c32 <__swsetup_r+0x16>
 8008c28:	69ab      	ldr	r3, [r5, #24]
 8008c2a:	b913      	cbnz	r3, 8008c32 <__swsetup_r+0x16>
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	f7ff fd2f 	bl	8008690 <__sinit>
 8008c32:	4b2e      	ldr	r3, [pc, #184]	; (8008cec <__swsetup_r+0xd0>)
 8008c34:	429c      	cmp	r4, r3
 8008c36:	d10f      	bne.n	8008c58 <__swsetup_r+0x3c>
 8008c38:	686c      	ldr	r4, [r5, #4]
 8008c3a:	89a3      	ldrh	r3, [r4, #12]
 8008c3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c40:	0719      	lsls	r1, r3, #28
 8008c42:	d42c      	bmi.n	8008c9e <__swsetup_r+0x82>
 8008c44:	06dd      	lsls	r5, r3, #27
 8008c46:	d411      	bmi.n	8008c6c <__swsetup_r+0x50>
 8008c48:	2309      	movs	r3, #9
 8008c4a:	6033      	str	r3, [r6, #0]
 8008c4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c50:	81a3      	strh	r3, [r4, #12]
 8008c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c56:	e03e      	b.n	8008cd6 <__swsetup_r+0xba>
 8008c58:	4b25      	ldr	r3, [pc, #148]	; (8008cf0 <__swsetup_r+0xd4>)
 8008c5a:	429c      	cmp	r4, r3
 8008c5c:	d101      	bne.n	8008c62 <__swsetup_r+0x46>
 8008c5e:	68ac      	ldr	r4, [r5, #8]
 8008c60:	e7eb      	b.n	8008c3a <__swsetup_r+0x1e>
 8008c62:	4b24      	ldr	r3, [pc, #144]	; (8008cf4 <__swsetup_r+0xd8>)
 8008c64:	429c      	cmp	r4, r3
 8008c66:	bf08      	it	eq
 8008c68:	68ec      	ldreq	r4, [r5, #12]
 8008c6a:	e7e6      	b.n	8008c3a <__swsetup_r+0x1e>
 8008c6c:	0758      	lsls	r0, r3, #29
 8008c6e:	d512      	bpl.n	8008c96 <__swsetup_r+0x7a>
 8008c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c72:	b141      	cbz	r1, 8008c86 <__swsetup_r+0x6a>
 8008c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c78:	4299      	cmp	r1, r3
 8008c7a:	d002      	beq.n	8008c82 <__swsetup_r+0x66>
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f7fc fd7f 	bl	8005780 <_free_r>
 8008c82:	2300      	movs	r3, #0
 8008c84:	6363      	str	r3, [r4, #52]	; 0x34
 8008c86:	89a3      	ldrh	r3, [r4, #12]
 8008c88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c8c:	81a3      	strh	r3, [r4, #12]
 8008c8e:	2300      	movs	r3, #0
 8008c90:	6063      	str	r3, [r4, #4]
 8008c92:	6923      	ldr	r3, [r4, #16]
 8008c94:	6023      	str	r3, [r4, #0]
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	f043 0308 	orr.w	r3, r3, #8
 8008c9c:	81a3      	strh	r3, [r4, #12]
 8008c9e:	6923      	ldr	r3, [r4, #16]
 8008ca0:	b94b      	cbnz	r3, 8008cb6 <__swsetup_r+0x9a>
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cac:	d003      	beq.n	8008cb6 <__swsetup_r+0x9a>
 8008cae:	4621      	mov	r1, r4
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f000 f84d 	bl	8008d50 <__smakebuf_r>
 8008cb6:	89a0      	ldrh	r0, [r4, #12]
 8008cb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cbc:	f010 0301 	ands.w	r3, r0, #1
 8008cc0:	d00a      	beq.n	8008cd8 <__swsetup_r+0xbc>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60a3      	str	r3, [r4, #8]
 8008cc6:	6963      	ldr	r3, [r4, #20]
 8008cc8:	425b      	negs	r3, r3
 8008cca:	61a3      	str	r3, [r4, #24]
 8008ccc:	6923      	ldr	r3, [r4, #16]
 8008cce:	b943      	cbnz	r3, 8008ce2 <__swsetup_r+0xc6>
 8008cd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cd4:	d1ba      	bne.n	8008c4c <__swsetup_r+0x30>
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}
 8008cd8:	0781      	lsls	r1, r0, #30
 8008cda:	bf58      	it	pl
 8008cdc:	6963      	ldrpl	r3, [r4, #20]
 8008cde:	60a3      	str	r3, [r4, #8]
 8008ce0:	e7f4      	b.n	8008ccc <__swsetup_r+0xb0>
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	e7f7      	b.n	8008cd6 <__swsetup_r+0xba>
 8008ce6:	bf00      	nop
 8008ce8:	20000010 	.word	0x20000010
 8008cec:	0800a2a8 	.word	0x0800a2a8
 8008cf0:	0800a2c8 	.word	0x0800a2c8
 8008cf4:	0800a288 	.word	0x0800a288

08008cf8 <abort>:
 8008cf8:	b508      	push	{r3, lr}
 8008cfa:	2006      	movs	r0, #6
 8008cfc:	f000 f898 	bl	8008e30 <raise>
 8008d00:	2001      	movs	r0, #1
 8008d02:	f7f8 ff41 	bl	8001b88 <_exit>

08008d06 <__swhatbuf_r>:
 8008d06:	b570      	push	{r4, r5, r6, lr}
 8008d08:	460e      	mov	r6, r1
 8008d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d0e:	2900      	cmp	r1, #0
 8008d10:	b096      	sub	sp, #88	; 0x58
 8008d12:	4614      	mov	r4, r2
 8008d14:	461d      	mov	r5, r3
 8008d16:	da08      	bge.n	8008d2a <__swhatbuf_r+0x24>
 8008d18:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	602a      	str	r2, [r5, #0]
 8008d20:	061a      	lsls	r2, r3, #24
 8008d22:	d410      	bmi.n	8008d46 <__swhatbuf_r+0x40>
 8008d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d28:	e00e      	b.n	8008d48 <__swhatbuf_r+0x42>
 8008d2a:	466a      	mov	r2, sp
 8008d2c:	f000 f89c 	bl	8008e68 <_fstat_r>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	dbf1      	blt.n	8008d18 <__swhatbuf_r+0x12>
 8008d34:	9a01      	ldr	r2, [sp, #4]
 8008d36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d3e:	425a      	negs	r2, r3
 8008d40:	415a      	adcs	r2, r3
 8008d42:	602a      	str	r2, [r5, #0]
 8008d44:	e7ee      	b.n	8008d24 <__swhatbuf_r+0x1e>
 8008d46:	2340      	movs	r3, #64	; 0x40
 8008d48:	2000      	movs	r0, #0
 8008d4a:	6023      	str	r3, [r4, #0]
 8008d4c:	b016      	add	sp, #88	; 0x58
 8008d4e:	bd70      	pop	{r4, r5, r6, pc}

08008d50 <__smakebuf_r>:
 8008d50:	898b      	ldrh	r3, [r1, #12]
 8008d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d54:	079d      	lsls	r5, r3, #30
 8008d56:	4606      	mov	r6, r0
 8008d58:	460c      	mov	r4, r1
 8008d5a:	d507      	bpl.n	8008d6c <__smakebuf_r+0x1c>
 8008d5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	6123      	str	r3, [r4, #16]
 8008d64:	2301      	movs	r3, #1
 8008d66:	6163      	str	r3, [r4, #20]
 8008d68:	b002      	add	sp, #8
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	ab01      	add	r3, sp, #4
 8008d6e:	466a      	mov	r2, sp
 8008d70:	f7ff ffc9 	bl	8008d06 <__swhatbuf_r>
 8008d74:	9900      	ldr	r1, [sp, #0]
 8008d76:	4605      	mov	r5, r0
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f7fc fd6d 	bl	8005858 <_malloc_r>
 8008d7e:	b948      	cbnz	r0, 8008d94 <__smakebuf_r+0x44>
 8008d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d84:	059a      	lsls	r2, r3, #22
 8008d86:	d4ef      	bmi.n	8008d68 <__smakebuf_r+0x18>
 8008d88:	f023 0303 	bic.w	r3, r3, #3
 8008d8c:	f043 0302 	orr.w	r3, r3, #2
 8008d90:	81a3      	strh	r3, [r4, #12]
 8008d92:	e7e3      	b.n	8008d5c <__smakebuf_r+0xc>
 8008d94:	4b0d      	ldr	r3, [pc, #52]	; (8008dcc <__smakebuf_r+0x7c>)
 8008d96:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d98:	89a3      	ldrh	r3, [r4, #12]
 8008d9a:	6020      	str	r0, [r4, #0]
 8008d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da0:	81a3      	strh	r3, [r4, #12]
 8008da2:	9b00      	ldr	r3, [sp, #0]
 8008da4:	6163      	str	r3, [r4, #20]
 8008da6:	9b01      	ldr	r3, [sp, #4]
 8008da8:	6120      	str	r0, [r4, #16]
 8008daa:	b15b      	cbz	r3, 8008dc4 <__smakebuf_r+0x74>
 8008dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008db0:	4630      	mov	r0, r6
 8008db2:	f000 f86b 	bl	8008e8c <_isatty_r>
 8008db6:	b128      	cbz	r0, 8008dc4 <__smakebuf_r+0x74>
 8008db8:	89a3      	ldrh	r3, [r4, #12]
 8008dba:	f023 0303 	bic.w	r3, r3, #3
 8008dbe:	f043 0301 	orr.w	r3, r3, #1
 8008dc2:	81a3      	strh	r3, [r4, #12]
 8008dc4:	89a0      	ldrh	r0, [r4, #12]
 8008dc6:	4305      	orrs	r5, r0
 8008dc8:	81a5      	strh	r5, [r4, #12]
 8008dca:	e7cd      	b.n	8008d68 <__smakebuf_r+0x18>
 8008dcc:	08008629 	.word	0x08008629

08008dd0 <_malloc_usable_size_r>:
 8008dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dd4:	1f18      	subs	r0, r3, #4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	bfbc      	itt	lt
 8008dda:	580b      	ldrlt	r3, [r1, r0]
 8008ddc:	18c0      	addlt	r0, r0, r3
 8008dde:	4770      	bx	lr

08008de0 <_raise_r>:
 8008de0:	291f      	cmp	r1, #31
 8008de2:	b538      	push	{r3, r4, r5, lr}
 8008de4:	4604      	mov	r4, r0
 8008de6:	460d      	mov	r5, r1
 8008de8:	d904      	bls.n	8008df4 <_raise_r+0x14>
 8008dea:	2316      	movs	r3, #22
 8008dec:	6003      	str	r3, [r0, #0]
 8008dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008df6:	b112      	cbz	r2, 8008dfe <_raise_r+0x1e>
 8008df8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008dfc:	b94b      	cbnz	r3, 8008e12 <_raise_r+0x32>
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f000 f830 	bl	8008e64 <_getpid_r>
 8008e04:	462a      	mov	r2, r5
 8008e06:	4601      	mov	r1, r0
 8008e08:	4620      	mov	r0, r4
 8008e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e0e:	f000 b817 	b.w	8008e40 <_kill_r>
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d00a      	beq.n	8008e2c <_raise_r+0x4c>
 8008e16:	1c59      	adds	r1, r3, #1
 8008e18:	d103      	bne.n	8008e22 <_raise_r+0x42>
 8008e1a:	2316      	movs	r3, #22
 8008e1c:	6003      	str	r3, [r0, #0]
 8008e1e:	2001      	movs	r0, #1
 8008e20:	e7e7      	b.n	8008df2 <_raise_r+0x12>
 8008e22:	2400      	movs	r4, #0
 8008e24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e28:	4628      	mov	r0, r5
 8008e2a:	4798      	blx	r3
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	e7e0      	b.n	8008df2 <_raise_r+0x12>

08008e30 <raise>:
 8008e30:	4b02      	ldr	r3, [pc, #8]	; (8008e3c <raise+0xc>)
 8008e32:	4601      	mov	r1, r0
 8008e34:	6818      	ldr	r0, [r3, #0]
 8008e36:	f7ff bfd3 	b.w	8008de0 <_raise_r>
 8008e3a:	bf00      	nop
 8008e3c:	20000010 	.word	0x20000010

08008e40 <_kill_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	4d07      	ldr	r5, [pc, #28]	; (8008e60 <_kill_r+0x20>)
 8008e44:	2300      	movs	r3, #0
 8008e46:	4604      	mov	r4, r0
 8008e48:	4608      	mov	r0, r1
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	602b      	str	r3, [r5, #0]
 8008e4e:	f7f8 fe8b 	bl	8001b68 <_kill>
 8008e52:	1c43      	adds	r3, r0, #1
 8008e54:	d102      	bne.n	8008e5c <_kill_r+0x1c>
 8008e56:	682b      	ldr	r3, [r5, #0]
 8008e58:	b103      	cbz	r3, 8008e5c <_kill_r+0x1c>
 8008e5a:	6023      	str	r3, [r4, #0]
 8008e5c:	bd38      	pop	{r3, r4, r5, pc}
 8008e5e:	bf00      	nop
 8008e60:	200005ac 	.word	0x200005ac

08008e64 <_getpid_r>:
 8008e64:	f7f8 be78 	b.w	8001b58 <_getpid>

08008e68 <_fstat_r>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	4d07      	ldr	r5, [pc, #28]	; (8008e88 <_fstat_r+0x20>)
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	4604      	mov	r4, r0
 8008e70:	4608      	mov	r0, r1
 8008e72:	4611      	mov	r1, r2
 8008e74:	602b      	str	r3, [r5, #0]
 8008e76:	f7f8 fed6 	bl	8001c26 <_fstat>
 8008e7a:	1c43      	adds	r3, r0, #1
 8008e7c:	d102      	bne.n	8008e84 <_fstat_r+0x1c>
 8008e7e:	682b      	ldr	r3, [r5, #0]
 8008e80:	b103      	cbz	r3, 8008e84 <_fstat_r+0x1c>
 8008e82:	6023      	str	r3, [r4, #0]
 8008e84:	bd38      	pop	{r3, r4, r5, pc}
 8008e86:	bf00      	nop
 8008e88:	200005ac 	.word	0x200005ac

08008e8c <_isatty_r>:
 8008e8c:	b538      	push	{r3, r4, r5, lr}
 8008e8e:	4d06      	ldr	r5, [pc, #24]	; (8008ea8 <_isatty_r+0x1c>)
 8008e90:	2300      	movs	r3, #0
 8008e92:	4604      	mov	r4, r0
 8008e94:	4608      	mov	r0, r1
 8008e96:	602b      	str	r3, [r5, #0]
 8008e98:	f7f8 fed5 	bl	8001c46 <_isatty>
 8008e9c:	1c43      	adds	r3, r0, #1
 8008e9e:	d102      	bne.n	8008ea6 <_isatty_r+0x1a>
 8008ea0:	682b      	ldr	r3, [r5, #0]
 8008ea2:	b103      	cbz	r3, 8008ea6 <_isatty_r+0x1a>
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	bd38      	pop	{r3, r4, r5, pc}
 8008ea8:	200005ac 	.word	0x200005ac

08008eac <round>:
 8008eac:	ec51 0b10 	vmov	r0, r1, d0
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8008eb6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8008eba:	2c13      	cmp	r4, #19
 8008ebc:	ee10 2a10 	vmov	r2, s0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	dc19      	bgt.n	8008ef8 <round+0x4c>
 8008ec4:	2c00      	cmp	r4, #0
 8008ec6:	da09      	bge.n	8008edc <round+0x30>
 8008ec8:	3401      	adds	r4, #1
 8008eca:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008ece:	d103      	bne.n	8008ed8 <round+0x2c>
 8008ed0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008ed4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ed8:	2200      	movs	r2, #0
 8008eda:	e028      	b.n	8008f2e <round+0x82>
 8008edc:	4d15      	ldr	r5, [pc, #84]	; (8008f34 <round+0x88>)
 8008ede:	4125      	asrs	r5, r4
 8008ee0:	ea01 0605 	and.w	r6, r1, r5
 8008ee4:	4332      	orrs	r2, r6
 8008ee6:	d00e      	beq.n	8008f06 <round+0x5a>
 8008ee8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008eec:	fa42 f404 	asr.w	r4, r2, r4
 8008ef0:	4423      	add	r3, r4
 8008ef2:	ea23 0305 	bic.w	r3, r3, r5
 8008ef6:	e7ef      	b.n	8008ed8 <round+0x2c>
 8008ef8:	2c33      	cmp	r4, #51	; 0x33
 8008efa:	dd07      	ble.n	8008f0c <round+0x60>
 8008efc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008f00:	d101      	bne.n	8008f06 <round+0x5a>
 8008f02:	f7f7 f9db 	bl	80002bc <__adddf3>
 8008f06:	ec41 0b10 	vmov	d0, r0, r1
 8008f0a:	bd70      	pop	{r4, r5, r6, pc}
 8008f0c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8008f10:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008f14:	40f5      	lsrs	r5, r6
 8008f16:	4228      	tst	r0, r5
 8008f18:	d0f5      	beq.n	8008f06 <round+0x5a>
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8008f20:	fa01 f404 	lsl.w	r4, r1, r4
 8008f24:	1912      	adds	r2, r2, r4
 8008f26:	bf28      	it	cs
 8008f28:	185b      	addcs	r3, r3, r1
 8008f2a:	ea22 0205 	bic.w	r2, r2, r5
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4610      	mov	r0, r2
 8008f32:	e7e8      	b.n	8008f06 <round+0x5a>
 8008f34:	000fffff 	.word	0x000fffff

08008f38 <pow>:
 8008f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3a:	ed2d 8b02 	vpush	{d8}
 8008f3e:	eeb0 8a40 	vmov.f32	s16, s0
 8008f42:	eef0 8a60 	vmov.f32	s17, s1
 8008f46:	ec55 4b11 	vmov	r4, r5, d1
 8008f4a:	f000 f865 	bl	8009018 <__ieee754_pow>
 8008f4e:	4622      	mov	r2, r4
 8008f50:	462b      	mov	r3, r5
 8008f52:	4620      	mov	r0, r4
 8008f54:	4629      	mov	r1, r5
 8008f56:	ec57 6b10 	vmov	r6, r7, d0
 8008f5a:	f7f7 fdff 	bl	8000b5c <__aeabi_dcmpun>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d13b      	bne.n	8008fda <pow+0xa2>
 8008f62:	ec51 0b18 	vmov	r0, r1, d8
 8008f66:	2200      	movs	r2, #0
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f7f7 fdc5 	bl	8000af8 <__aeabi_dcmpeq>
 8008f6e:	b1b8      	cbz	r0, 8008fa0 <pow+0x68>
 8008f70:	2200      	movs	r2, #0
 8008f72:	2300      	movs	r3, #0
 8008f74:	4620      	mov	r0, r4
 8008f76:	4629      	mov	r1, r5
 8008f78:	f7f7 fdbe 	bl	8000af8 <__aeabi_dcmpeq>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d146      	bne.n	800900e <pow+0xd6>
 8008f80:	ec45 4b10 	vmov	d0, r4, r5
 8008f84:	f000 fe61 	bl	8009c4a <finite>
 8008f88:	b338      	cbz	r0, 8008fda <pow+0xa2>
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	4620      	mov	r0, r4
 8008f90:	4629      	mov	r1, r5
 8008f92:	f7f7 fdbb 	bl	8000b0c <__aeabi_dcmplt>
 8008f96:	b300      	cbz	r0, 8008fda <pow+0xa2>
 8008f98:	f7fc fbb8 	bl	800570c <__errno>
 8008f9c:	2322      	movs	r3, #34	; 0x22
 8008f9e:	e01b      	b.n	8008fd8 <pow+0xa0>
 8008fa0:	ec47 6b10 	vmov	d0, r6, r7
 8008fa4:	f000 fe51 	bl	8009c4a <finite>
 8008fa8:	b9e0      	cbnz	r0, 8008fe4 <pow+0xac>
 8008faa:	eeb0 0a48 	vmov.f32	s0, s16
 8008fae:	eef0 0a68 	vmov.f32	s1, s17
 8008fb2:	f000 fe4a 	bl	8009c4a <finite>
 8008fb6:	b1a8      	cbz	r0, 8008fe4 <pow+0xac>
 8008fb8:	ec45 4b10 	vmov	d0, r4, r5
 8008fbc:	f000 fe45 	bl	8009c4a <finite>
 8008fc0:	b180      	cbz	r0, 8008fe4 <pow+0xac>
 8008fc2:	4632      	mov	r2, r6
 8008fc4:	463b      	mov	r3, r7
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	4639      	mov	r1, r7
 8008fca:	f7f7 fdc7 	bl	8000b5c <__aeabi_dcmpun>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d0e2      	beq.n	8008f98 <pow+0x60>
 8008fd2:	f7fc fb9b 	bl	800570c <__errno>
 8008fd6:	2321      	movs	r3, #33	; 0x21
 8008fd8:	6003      	str	r3, [r0, #0]
 8008fda:	ecbd 8b02 	vpop	{d8}
 8008fde:	ec47 6b10 	vmov	d0, r6, r7
 8008fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	4630      	mov	r0, r6
 8008fea:	4639      	mov	r1, r7
 8008fec:	f7f7 fd84 	bl	8000af8 <__aeabi_dcmpeq>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d0f2      	beq.n	8008fda <pow+0xa2>
 8008ff4:	eeb0 0a48 	vmov.f32	s0, s16
 8008ff8:	eef0 0a68 	vmov.f32	s1, s17
 8008ffc:	f000 fe25 	bl	8009c4a <finite>
 8009000:	2800      	cmp	r0, #0
 8009002:	d0ea      	beq.n	8008fda <pow+0xa2>
 8009004:	ec45 4b10 	vmov	d0, r4, r5
 8009008:	f000 fe1f 	bl	8009c4a <finite>
 800900c:	e7c3      	b.n	8008f96 <pow+0x5e>
 800900e:	4f01      	ldr	r7, [pc, #4]	; (8009014 <pow+0xdc>)
 8009010:	2600      	movs	r6, #0
 8009012:	e7e2      	b.n	8008fda <pow+0xa2>
 8009014:	3ff00000 	.word	0x3ff00000

08009018 <__ieee754_pow>:
 8009018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901c:	ed2d 8b06 	vpush	{d8-d10}
 8009020:	b089      	sub	sp, #36	; 0x24
 8009022:	ed8d 1b00 	vstr	d1, [sp]
 8009026:	e9dd 2900 	ldrd	r2, r9, [sp]
 800902a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800902e:	ea58 0102 	orrs.w	r1, r8, r2
 8009032:	ec57 6b10 	vmov	r6, r7, d0
 8009036:	d115      	bne.n	8009064 <__ieee754_pow+0x4c>
 8009038:	19b3      	adds	r3, r6, r6
 800903a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800903e:	4152      	adcs	r2, r2
 8009040:	4299      	cmp	r1, r3
 8009042:	4b89      	ldr	r3, [pc, #548]	; (8009268 <__ieee754_pow+0x250>)
 8009044:	4193      	sbcs	r3, r2
 8009046:	f080 84d2 	bcs.w	80099ee <__ieee754_pow+0x9d6>
 800904a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800904e:	4630      	mov	r0, r6
 8009050:	4639      	mov	r1, r7
 8009052:	f7f7 f933 	bl	80002bc <__adddf3>
 8009056:	ec41 0b10 	vmov	d0, r0, r1
 800905a:	b009      	add	sp, #36	; 0x24
 800905c:	ecbd 8b06 	vpop	{d8-d10}
 8009060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009064:	4b81      	ldr	r3, [pc, #516]	; (800926c <__ieee754_pow+0x254>)
 8009066:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800906a:	429c      	cmp	r4, r3
 800906c:	ee10 aa10 	vmov	sl, s0
 8009070:	463d      	mov	r5, r7
 8009072:	dc06      	bgt.n	8009082 <__ieee754_pow+0x6a>
 8009074:	d101      	bne.n	800907a <__ieee754_pow+0x62>
 8009076:	2e00      	cmp	r6, #0
 8009078:	d1e7      	bne.n	800904a <__ieee754_pow+0x32>
 800907a:	4598      	cmp	r8, r3
 800907c:	dc01      	bgt.n	8009082 <__ieee754_pow+0x6a>
 800907e:	d10f      	bne.n	80090a0 <__ieee754_pow+0x88>
 8009080:	b172      	cbz	r2, 80090a0 <__ieee754_pow+0x88>
 8009082:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009086:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800908a:	ea55 050a 	orrs.w	r5, r5, sl
 800908e:	d1dc      	bne.n	800904a <__ieee754_pow+0x32>
 8009090:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009094:	18db      	adds	r3, r3, r3
 8009096:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800909a:	4152      	adcs	r2, r2
 800909c:	429d      	cmp	r5, r3
 800909e:	e7d0      	b.n	8009042 <__ieee754_pow+0x2a>
 80090a0:	2d00      	cmp	r5, #0
 80090a2:	da3b      	bge.n	800911c <__ieee754_pow+0x104>
 80090a4:	4b72      	ldr	r3, [pc, #456]	; (8009270 <__ieee754_pow+0x258>)
 80090a6:	4598      	cmp	r8, r3
 80090a8:	dc51      	bgt.n	800914e <__ieee754_pow+0x136>
 80090aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80090ae:	4598      	cmp	r8, r3
 80090b0:	f340 84ac 	ble.w	8009a0c <__ieee754_pow+0x9f4>
 80090b4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80090b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80090bc:	2b14      	cmp	r3, #20
 80090be:	dd0f      	ble.n	80090e0 <__ieee754_pow+0xc8>
 80090c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80090c4:	fa22 f103 	lsr.w	r1, r2, r3
 80090c8:	fa01 f303 	lsl.w	r3, r1, r3
 80090cc:	4293      	cmp	r3, r2
 80090ce:	f040 849d 	bne.w	8009a0c <__ieee754_pow+0x9f4>
 80090d2:	f001 0101 	and.w	r1, r1, #1
 80090d6:	f1c1 0302 	rsb	r3, r1, #2
 80090da:	9304      	str	r3, [sp, #16]
 80090dc:	b182      	cbz	r2, 8009100 <__ieee754_pow+0xe8>
 80090de:	e05f      	b.n	80091a0 <__ieee754_pow+0x188>
 80090e0:	2a00      	cmp	r2, #0
 80090e2:	d15b      	bne.n	800919c <__ieee754_pow+0x184>
 80090e4:	f1c3 0314 	rsb	r3, r3, #20
 80090e8:	fa48 f103 	asr.w	r1, r8, r3
 80090ec:	fa01 f303 	lsl.w	r3, r1, r3
 80090f0:	4543      	cmp	r3, r8
 80090f2:	f040 8488 	bne.w	8009a06 <__ieee754_pow+0x9ee>
 80090f6:	f001 0101 	and.w	r1, r1, #1
 80090fa:	f1c1 0302 	rsb	r3, r1, #2
 80090fe:	9304      	str	r3, [sp, #16]
 8009100:	4b5c      	ldr	r3, [pc, #368]	; (8009274 <__ieee754_pow+0x25c>)
 8009102:	4598      	cmp	r8, r3
 8009104:	d132      	bne.n	800916c <__ieee754_pow+0x154>
 8009106:	f1b9 0f00 	cmp.w	r9, #0
 800910a:	f280 8478 	bge.w	80099fe <__ieee754_pow+0x9e6>
 800910e:	4959      	ldr	r1, [pc, #356]	; (8009274 <__ieee754_pow+0x25c>)
 8009110:	4632      	mov	r2, r6
 8009112:	463b      	mov	r3, r7
 8009114:	2000      	movs	r0, #0
 8009116:	f7f7 fbb1 	bl	800087c <__aeabi_ddiv>
 800911a:	e79c      	b.n	8009056 <__ieee754_pow+0x3e>
 800911c:	2300      	movs	r3, #0
 800911e:	9304      	str	r3, [sp, #16]
 8009120:	2a00      	cmp	r2, #0
 8009122:	d13d      	bne.n	80091a0 <__ieee754_pow+0x188>
 8009124:	4b51      	ldr	r3, [pc, #324]	; (800926c <__ieee754_pow+0x254>)
 8009126:	4598      	cmp	r8, r3
 8009128:	d1ea      	bne.n	8009100 <__ieee754_pow+0xe8>
 800912a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800912e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009132:	ea53 030a 	orrs.w	r3, r3, sl
 8009136:	f000 845a 	beq.w	80099ee <__ieee754_pow+0x9d6>
 800913a:	4b4f      	ldr	r3, [pc, #316]	; (8009278 <__ieee754_pow+0x260>)
 800913c:	429c      	cmp	r4, r3
 800913e:	dd08      	ble.n	8009152 <__ieee754_pow+0x13a>
 8009140:	f1b9 0f00 	cmp.w	r9, #0
 8009144:	f2c0 8457 	blt.w	80099f6 <__ieee754_pow+0x9de>
 8009148:	e9dd 0100 	ldrd	r0, r1, [sp]
 800914c:	e783      	b.n	8009056 <__ieee754_pow+0x3e>
 800914e:	2302      	movs	r3, #2
 8009150:	e7e5      	b.n	800911e <__ieee754_pow+0x106>
 8009152:	f1b9 0f00 	cmp.w	r9, #0
 8009156:	f04f 0000 	mov.w	r0, #0
 800915a:	f04f 0100 	mov.w	r1, #0
 800915e:	f6bf af7a 	bge.w	8009056 <__ieee754_pow+0x3e>
 8009162:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009166:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800916a:	e774      	b.n	8009056 <__ieee754_pow+0x3e>
 800916c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009170:	d106      	bne.n	8009180 <__ieee754_pow+0x168>
 8009172:	4632      	mov	r2, r6
 8009174:	463b      	mov	r3, r7
 8009176:	4630      	mov	r0, r6
 8009178:	4639      	mov	r1, r7
 800917a:	f7f7 fa55 	bl	8000628 <__aeabi_dmul>
 800917e:	e76a      	b.n	8009056 <__ieee754_pow+0x3e>
 8009180:	4b3e      	ldr	r3, [pc, #248]	; (800927c <__ieee754_pow+0x264>)
 8009182:	4599      	cmp	r9, r3
 8009184:	d10c      	bne.n	80091a0 <__ieee754_pow+0x188>
 8009186:	2d00      	cmp	r5, #0
 8009188:	db0a      	blt.n	80091a0 <__ieee754_pow+0x188>
 800918a:	ec47 6b10 	vmov	d0, r6, r7
 800918e:	b009      	add	sp, #36	; 0x24
 8009190:	ecbd 8b06 	vpop	{d8-d10}
 8009194:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009198:	f000 bc6c 	b.w	8009a74 <__ieee754_sqrt>
 800919c:	2300      	movs	r3, #0
 800919e:	9304      	str	r3, [sp, #16]
 80091a0:	ec47 6b10 	vmov	d0, r6, r7
 80091a4:	f000 fd48 	bl	8009c38 <fabs>
 80091a8:	ec51 0b10 	vmov	r0, r1, d0
 80091ac:	f1ba 0f00 	cmp.w	sl, #0
 80091b0:	d129      	bne.n	8009206 <__ieee754_pow+0x1ee>
 80091b2:	b124      	cbz	r4, 80091be <__ieee754_pow+0x1a6>
 80091b4:	4b2f      	ldr	r3, [pc, #188]	; (8009274 <__ieee754_pow+0x25c>)
 80091b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d123      	bne.n	8009206 <__ieee754_pow+0x1ee>
 80091be:	f1b9 0f00 	cmp.w	r9, #0
 80091c2:	da05      	bge.n	80091d0 <__ieee754_pow+0x1b8>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	2000      	movs	r0, #0
 80091ca:	492a      	ldr	r1, [pc, #168]	; (8009274 <__ieee754_pow+0x25c>)
 80091cc:	f7f7 fb56 	bl	800087c <__aeabi_ddiv>
 80091d0:	2d00      	cmp	r5, #0
 80091d2:	f6bf af40 	bge.w	8009056 <__ieee754_pow+0x3e>
 80091d6:	9b04      	ldr	r3, [sp, #16]
 80091d8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80091dc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80091e0:	4323      	orrs	r3, r4
 80091e2:	d108      	bne.n	80091f6 <__ieee754_pow+0x1de>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	4610      	mov	r0, r2
 80091ea:	4619      	mov	r1, r3
 80091ec:	f7f7 f864 	bl	80002b8 <__aeabi_dsub>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	e78f      	b.n	8009116 <__ieee754_pow+0xfe>
 80091f6:	9b04      	ldr	r3, [sp, #16]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	f47f af2c 	bne.w	8009056 <__ieee754_pow+0x3e>
 80091fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009202:	4619      	mov	r1, r3
 8009204:	e727      	b.n	8009056 <__ieee754_pow+0x3e>
 8009206:	0feb      	lsrs	r3, r5, #31
 8009208:	3b01      	subs	r3, #1
 800920a:	9306      	str	r3, [sp, #24]
 800920c:	9a06      	ldr	r2, [sp, #24]
 800920e:	9b04      	ldr	r3, [sp, #16]
 8009210:	4313      	orrs	r3, r2
 8009212:	d102      	bne.n	800921a <__ieee754_pow+0x202>
 8009214:	4632      	mov	r2, r6
 8009216:	463b      	mov	r3, r7
 8009218:	e7e6      	b.n	80091e8 <__ieee754_pow+0x1d0>
 800921a:	4b19      	ldr	r3, [pc, #100]	; (8009280 <__ieee754_pow+0x268>)
 800921c:	4598      	cmp	r8, r3
 800921e:	f340 80fb 	ble.w	8009418 <__ieee754_pow+0x400>
 8009222:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009226:	4598      	cmp	r8, r3
 8009228:	4b13      	ldr	r3, [pc, #76]	; (8009278 <__ieee754_pow+0x260>)
 800922a:	dd0c      	ble.n	8009246 <__ieee754_pow+0x22e>
 800922c:	429c      	cmp	r4, r3
 800922e:	dc0f      	bgt.n	8009250 <__ieee754_pow+0x238>
 8009230:	f1b9 0f00 	cmp.w	r9, #0
 8009234:	da0f      	bge.n	8009256 <__ieee754_pow+0x23e>
 8009236:	2000      	movs	r0, #0
 8009238:	b009      	add	sp, #36	; 0x24
 800923a:	ecbd 8b06 	vpop	{d8-d10}
 800923e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009242:	f000 bcf0 	b.w	8009c26 <__math_oflow>
 8009246:	429c      	cmp	r4, r3
 8009248:	dbf2      	blt.n	8009230 <__ieee754_pow+0x218>
 800924a:	4b0a      	ldr	r3, [pc, #40]	; (8009274 <__ieee754_pow+0x25c>)
 800924c:	429c      	cmp	r4, r3
 800924e:	dd19      	ble.n	8009284 <__ieee754_pow+0x26c>
 8009250:	f1b9 0f00 	cmp.w	r9, #0
 8009254:	dcef      	bgt.n	8009236 <__ieee754_pow+0x21e>
 8009256:	2000      	movs	r0, #0
 8009258:	b009      	add	sp, #36	; 0x24
 800925a:	ecbd 8b06 	vpop	{d8-d10}
 800925e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009262:	f000 bcd7 	b.w	8009c14 <__math_uflow>
 8009266:	bf00      	nop
 8009268:	fff00000 	.word	0xfff00000
 800926c:	7ff00000 	.word	0x7ff00000
 8009270:	433fffff 	.word	0x433fffff
 8009274:	3ff00000 	.word	0x3ff00000
 8009278:	3fefffff 	.word	0x3fefffff
 800927c:	3fe00000 	.word	0x3fe00000
 8009280:	41e00000 	.word	0x41e00000
 8009284:	4b60      	ldr	r3, [pc, #384]	; (8009408 <__ieee754_pow+0x3f0>)
 8009286:	2200      	movs	r2, #0
 8009288:	f7f7 f816 	bl	80002b8 <__aeabi_dsub>
 800928c:	a354      	add	r3, pc, #336	; (adr r3, 80093e0 <__ieee754_pow+0x3c8>)
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	4604      	mov	r4, r0
 8009294:	460d      	mov	r5, r1
 8009296:	f7f7 f9c7 	bl	8000628 <__aeabi_dmul>
 800929a:	a353      	add	r3, pc, #332	; (adr r3, 80093e8 <__ieee754_pow+0x3d0>)
 800929c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a0:	4606      	mov	r6, r0
 80092a2:	460f      	mov	r7, r1
 80092a4:	4620      	mov	r0, r4
 80092a6:	4629      	mov	r1, r5
 80092a8:	f7f7 f9be 	bl	8000628 <__aeabi_dmul>
 80092ac:	4b57      	ldr	r3, [pc, #348]	; (800940c <__ieee754_pow+0x3f4>)
 80092ae:	4682      	mov	sl, r0
 80092b0:	468b      	mov	fp, r1
 80092b2:	2200      	movs	r2, #0
 80092b4:	4620      	mov	r0, r4
 80092b6:	4629      	mov	r1, r5
 80092b8:	f7f7 f9b6 	bl	8000628 <__aeabi_dmul>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	a14b      	add	r1, pc, #300	; (adr r1, 80093f0 <__ieee754_pow+0x3d8>)
 80092c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092c6:	f7f6 fff7 	bl	80002b8 <__aeabi_dsub>
 80092ca:	4622      	mov	r2, r4
 80092cc:	462b      	mov	r3, r5
 80092ce:	f7f7 f9ab 	bl	8000628 <__aeabi_dmul>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	2000      	movs	r0, #0
 80092d8:	494d      	ldr	r1, [pc, #308]	; (8009410 <__ieee754_pow+0x3f8>)
 80092da:	f7f6 ffed 	bl	80002b8 <__aeabi_dsub>
 80092de:	4622      	mov	r2, r4
 80092e0:	4680      	mov	r8, r0
 80092e2:	4689      	mov	r9, r1
 80092e4:	462b      	mov	r3, r5
 80092e6:	4620      	mov	r0, r4
 80092e8:	4629      	mov	r1, r5
 80092ea:	f7f7 f99d 	bl	8000628 <__aeabi_dmul>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	4640      	mov	r0, r8
 80092f4:	4649      	mov	r1, r9
 80092f6:	f7f7 f997 	bl	8000628 <__aeabi_dmul>
 80092fa:	a33f      	add	r3, pc, #252	; (adr r3, 80093f8 <__ieee754_pow+0x3e0>)
 80092fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009300:	f7f7 f992 	bl	8000628 <__aeabi_dmul>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4650      	mov	r0, sl
 800930a:	4659      	mov	r1, fp
 800930c:	f7f6 ffd4 	bl	80002b8 <__aeabi_dsub>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4680      	mov	r8, r0
 8009316:	4689      	mov	r9, r1
 8009318:	4630      	mov	r0, r6
 800931a:	4639      	mov	r1, r7
 800931c:	f7f6 ffce 	bl	80002bc <__adddf3>
 8009320:	2000      	movs	r0, #0
 8009322:	4632      	mov	r2, r6
 8009324:	463b      	mov	r3, r7
 8009326:	4604      	mov	r4, r0
 8009328:	460d      	mov	r5, r1
 800932a:	f7f6 ffc5 	bl	80002b8 <__aeabi_dsub>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4640      	mov	r0, r8
 8009334:	4649      	mov	r1, r9
 8009336:	f7f6 ffbf 	bl	80002b8 <__aeabi_dsub>
 800933a:	9b04      	ldr	r3, [sp, #16]
 800933c:	9a06      	ldr	r2, [sp, #24]
 800933e:	3b01      	subs	r3, #1
 8009340:	4313      	orrs	r3, r2
 8009342:	4682      	mov	sl, r0
 8009344:	468b      	mov	fp, r1
 8009346:	f040 81e7 	bne.w	8009718 <__ieee754_pow+0x700>
 800934a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009400 <__ieee754_pow+0x3e8>
 800934e:	eeb0 8a47 	vmov.f32	s16, s14
 8009352:	eef0 8a67 	vmov.f32	s17, s15
 8009356:	e9dd 6700 	ldrd	r6, r7, [sp]
 800935a:	2600      	movs	r6, #0
 800935c:	4632      	mov	r2, r6
 800935e:	463b      	mov	r3, r7
 8009360:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009364:	f7f6 ffa8 	bl	80002b8 <__aeabi_dsub>
 8009368:	4622      	mov	r2, r4
 800936a:	462b      	mov	r3, r5
 800936c:	f7f7 f95c 	bl	8000628 <__aeabi_dmul>
 8009370:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009374:	4680      	mov	r8, r0
 8009376:	4689      	mov	r9, r1
 8009378:	4650      	mov	r0, sl
 800937a:	4659      	mov	r1, fp
 800937c:	f7f7 f954 	bl	8000628 <__aeabi_dmul>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	4640      	mov	r0, r8
 8009386:	4649      	mov	r1, r9
 8009388:	f7f6 ff98 	bl	80002bc <__adddf3>
 800938c:	4632      	mov	r2, r6
 800938e:	463b      	mov	r3, r7
 8009390:	4680      	mov	r8, r0
 8009392:	4689      	mov	r9, r1
 8009394:	4620      	mov	r0, r4
 8009396:	4629      	mov	r1, r5
 8009398:	f7f7 f946 	bl	8000628 <__aeabi_dmul>
 800939c:	460b      	mov	r3, r1
 800939e:	4604      	mov	r4, r0
 80093a0:	460d      	mov	r5, r1
 80093a2:	4602      	mov	r2, r0
 80093a4:	4649      	mov	r1, r9
 80093a6:	4640      	mov	r0, r8
 80093a8:	f7f6 ff88 	bl	80002bc <__adddf3>
 80093ac:	4b19      	ldr	r3, [pc, #100]	; (8009414 <__ieee754_pow+0x3fc>)
 80093ae:	4299      	cmp	r1, r3
 80093b0:	ec45 4b19 	vmov	d9, r4, r5
 80093b4:	4606      	mov	r6, r0
 80093b6:	460f      	mov	r7, r1
 80093b8:	468b      	mov	fp, r1
 80093ba:	f340 82f1 	ble.w	80099a0 <__ieee754_pow+0x988>
 80093be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80093c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80093c6:	4303      	orrs	r3, r0
 80093c8:	f000 81e4 	beq.w	8009794 <__ieee754_pow+0x77c>
 80093cc:	ec51 0b18 	vmov	r0, r1, d8
 80093d0:	2200      	movs	r2, #0
 80093d2:	2300      	movs	r3, #0
 80093d4:	f7f7 fb9a 	bl	8000b0c <__aeabi_dcmplt>
 80093d8:	3800      	subs	r0, #0
 80093da:	bf18      	it	ne
 80093dc:	2001      	movne	r0, #1
 80093de:	e72b      	b.n	8009238 <__ieee754_pow+0x220>
 80093e0:	60000000 	.word	0x60000000
 80093e4:	3ff71547 	.word	0x3ff71547
 80093e8:	f85ddf44 	.word	0xf85ddf44
 80093ec:	3e54ae0b 	.word	0x3e54ae0b
 80093f0:	55555555 	.word	0x55555555
 80093f4:	3fd55555 	.word	0x3fd55555
 80093f8:	652b82fe 	.word	0x652b82fe
 80093fc:	3ff71547 	.word	0x3ff71547
 8009400:	00000000 	.word	0x00000000
 8009404:	bff00000 	.word	0xbff00000
 8009408:	3ff00000 	.word	0x3ff00000
 800940c:	3fd00000 	.word	0x3fd00000
 8009410:	3fe00000 	.word	0x3fe00000
 8009414:	408fffff 	.word	0x408fffff
 8009418:	4bd5      	ldr	r3, [pc, #852]	; (8009770 <__ieee754_pow+0x758>)
 800941a:	402b      	ands	r3, r5
 800941c:	2200      	movs	r2, #0
 800941e:	b92b      	cbnz	r3, 800942c <__ieee754_pow+0x414>
 8009420:	4bd4      	ldr	r3, [pc, #848]	; (8009774 <__ieee754_pow+0x75c>)
 8009422:	f7f7 f901 	bl	8000628 <__aeabi_dmul>
 8009426:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800942a:	460c      	mov	r4, r1
 800942c:	1523      	asrs	r3, r4, #20
 800942e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009432:	4413      	add	r3, r2
 8009434:	9305      	str	r3, [sp, #20]
 8009436:	4bd0      	ldr	r3, [pc, #832]	; (8009778 <__ieee754_pow+0x760>)
 8009438:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800943c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009440:	429c      	cmp	r4, r3
 8009442:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009446:	dd08      	ble.n	800945a <__ieee754_pow+0x442>
 8009448:	4bcc      	ldr	r3, [pc, #816]	; (800977c <__ieee754_pow+0x764>)
 800944a:	429c      	cmp	r4, r3
 800944c:	f340 8162 	ble.w	8009714 <__ieee754_pow+0x6fc>
 8009450:	9b05      	ldr	r3, [sp, #20]
 8009452:	3301      	adds	r3, #1
 8009454:	9305      	str	r3, [sp, #20]
 8009456:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800945a:	2400      	movs	r4, #0
 800945c:	00e3      	lsls	r3, r4, #3
 800945e:	9307      	str	r3, [sp, #28]
 8009460:	4bc7      	ldr	r3, [pc, #796]	; (8009780 <__ieee754_pow+0x768>)
 8009462:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009466:	ed93 7b00 	vldr	d7, [r3]
 800946a:	4629      	mov	r1, r5
 800946c:	ec53 2b17 	vmov	r2, r3, d7
 8009470:	eeb0 9a47 	vmov.f32	s18, s14
 8009474:	eef0 9a67 	vmov.f32	s19, s15
 8009478:	4682      	mov	sl, r0
 800947a:	f7f6 ff1d 	bl	80002b8 <__aeabi_dsub>
 800947e:	4652      	mov	r2, sl
 8009480:	4606      	mov	r6, r0
 8009482:	460f      	mov	r7, r1
 8009484:	462b      	mov	r3, r5
 8009486:	ec51 0b19 	vmov	r0, r1, d9
 800948a:	f7f6 ff17 	bl	80002bc <__adddf3>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	2000      	movs	r0, #0
 8009494:	49bb      	ldr	r1, [pc, #748]	; (8009784 <__ieee754_pow+0x76c>)
 8009496:	f7f7 f9f1 	bl	800087c <__aeabi_ddiv>
 800949a:	ec41 0b1a 	vmov	d10, r0, r1
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4630      	mov	r0, r6
 80094a4:	4639      	mov	r1, r7
 80094a6:	f7f7 f8bf 	bl	8000628 <__aeabi_dmul>
 80094aa:	2300      	movs	r3, #0
 80094ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094b0:	9302      	str	r3, [sp, #8]
 80094b2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80094b6:	46ab      	mov	fp, r5
 80094b8:	106d      	asrs	r5, r5, #1
 80094ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80094be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80094c2:	ec41 0b18 	vmov	d8, r0, r1
 80094c6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80094ca:	2200      	movs	r2, #0
 80094cc:	4640      	mov	r0, r8
 80094ce:	4649      	mov	r1, r9
 80094d0:	4614      	mov	r4, r2
 80094d2:	461d      	mov	r5, r3
 80094d4:	f7f7 f8a8 	bl	8000628 <__aeabi_dmul>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	4630      	mov	r0, r6
 80094de:	4639      	mov	r1, r7
 80094e0:	f7f6 feea 	bl	80002b8 <__aeabi_dsub>
 80094e4:	ec53 2b19 	vmov	r2, r3, d9
 80094e8:	4606      	mov	r6, r0
 80094ea:	460f      	mov	r7, r1
 80094ec:	4620      	mov	r0, r4
 80094ee:	4629      	mov	r1, r5
 80094f0:	f7f6 fee2 	bl	80002b8 <__aeabi_dsub>
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	4650      	mov	r0, sl
 80094fa:	4659      	mov	r1, fp
 80094fc:	f7f6 fedc 	bl	80002b8 <__aeabi_dsub>
 8009500:	4642      	mov	r2, r8
 8009502:	464b      	mov	r3, r9
 8009504:	f7f7 f890 	bl	8000628 <__aeabi_dmul>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	4630      	mov	r0, r6
 800950e:	4639      	mov	r1, r7
 8009510:	f7f6 fed2 	bl	80002b8 <__aeabi_dsub>
 8009514:	ec53 2b1a 	vmov	r2, r3, d10
 8009518:	f7f7 f886 	bl	8000628 <__aeabi_dmul>
 800951c:	ec53 2b18 	vmov	r2, r3, d8
 8009520:	ec41 0b19 	vmov	d9, r0, r1
 8009524:	ec51 0b18 	vmov	r0, r1, d8
 8009528:	f7f7 f87e 	bl	8000628 <__aeabi_dmul>
 800952c:	a37c      	add	r3, pc, #496	; (adr r3, 8009720 <__ieee754_pow+0x708>)
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	4604      	mov	r4, r0
 8009534:	460d      	mov	r5, r1
 8009536:	f7f7 f877 	bl	8000628 <__aeabi_dmul>
 800953a:	a37b      	add	r3, pc, #492	; (adr r3, 8009728 <__ieee754_pow+0x710>)
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	f7f6 febc 	bl	80002bc <__adddf3>
 8009544:	4622      	mov	r2, r4
 8009546:	462b      	mov	r3, r5
 8009548:	f7f7 f86e 	bl	8000628 <__aeabi_dmul>
 800954c:	a378      	add	r3, pc, #480	; (adr r3, 8009730 <__ieee754_pow+0x718>)
 800954e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009552:	f7f6 feb3 	bl	80002bc <__adddf3>
 8009556:	4622      	mov	r2, r4
 8009558:	462b      	mov	r3, r5
 800955a:	f7f7 f865 	bl	8000628 <__aeabi_dmul>
 800955e:	a376      	add	r3, pc, #472	; (adr r3, 8009738 <__ieee754_pow+0x720>)
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	f7f6 feaa 	bl	80002bc <__adddf3>
 8009568:	4622      	mov	r2, r4
 800956a:	462b      	mov	r3, r5
 800956c:	f7f7 f85c 	bl	8000628 <__aeabi_dmul>
 8009570:	a373      	add	r3, pc, #460	; (adr r3, 8009740 <__ieee754_pow+0x728>)
 8009572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009576:	f7f6 fea1 	bl	80002bc <__adddf3>
 800957a:	4622      	mov	r2, r4
 800957c:	462b      	mov	r3, r5
 800957e:	f7f7 f853 	bl	8000628 <__aeabi_dmul>
 8009582:	a371      	add	r3, pc, #452	; (adr r3, 8009748 <__ieee754_pow+0x730>)
 8009584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009588:	f7f6 fe98 	bl	80002bc <__adddf3>
 800958c:	4622      	mov	r2, r4
 800958e:	4606      	mov	r6, r0
 8009590:	460f      	mov	r7, r1
 8009592:	462b      	mov	r3, r5
 8009594:	4620      	mov	r0, r4
 8009596:	4629      	mov	r1, r5
 8009598:	f7f7 f846 	bl	8000628 <__aeabi_dmul>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	4630      	mov	r0, r6
 80095a2:	4639      	mov	r1, r7
 80095a4:	f7f7 f840 	bl	8000628 <__aeabi_dmul>
 80095a8:	4642      	mov	r2, r8
 80095aa:	4604      	mov	r4, r0
 80095ac:	460d      	mov	r5, r1
 80095ae:	464b      	mov	r3, r9
 80095b0:	ec51 0b18 	vmov	r0, r1, d8
 80095b4:	f7f6 fe82 	bl	80002bc <__adddf3>
 80095b8:	ec53 2b19 	vmov	r2, r3, d9
 80095bc:	f7f7 f834 	bl	8000628 <__aeabi_dmul>
 80095c0:	4622      	mov	r2, r4
 80095c2:	462b      	mov	r3, r5
 80095c4:	f7f6 fe7a 	bl	80002bc <__adddf3>
 80095c8:	4642      	mov	r2, r8
 80095ca:	4682      	mov	sl, r0
 80095cc:	468b      	mov	fp, r1
 80095ce:	464b      	mov	r3, r9
 80095d0:	4640      	mov	r0, r8
 80095d2:	4649      	mov	r1, r9
 80095d4:	f7f7 f828 	bl	8000628 <__aeabi_dmul>
 80095d8:	4b6b      	ldr	r3, [pc, #428]	; (8009788 <__ieee754_pow+0x770>)
 80095da:	2200      	movs	r2, #0
 80095dc:	4606      	mov	r6, r0
 80095de:	460f      	mov	r7, r1
 80095e0:	f7f6 fe6c 	bl	80002bc <__adddf3>
 80095e4:	4652      	mov	r2, sl
 80095e6:	465b      	mov	r3, fp
 80095e8:	f7f6 fe68 	bl	80002bc <__adddf3>
 80095ec:	2000      	movs	r0, #0
 80095ee:	4604      	mov	r4, r0
 80095f0:	460d      	mov	r5, r1
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	4640      	mov	r0, r8
 80095f8:	4649      	mov	r1, r9
 80095fa:	f7f7 f815 	bl	8000628 <__aeabi_dmul>
 80095fe:	4b62      	ldr	r3, [pc, #392]	; (8009788 <__ieee754_pow+0x770>)
 8009600:	4680      	mov	r8, r0
 8009602:	4689      	mov	r9, r1
 8009604:	2200      	movs	r2, #0
 8009606:	4620      	mov	r0, r4
 8009608:	4629      	mov	r1, r5
 800960a:	f7f6 fe55 	bl	80002b8 <__aeabi_dsub>
 800960e:	4632      	mov	r2, r6
 8009610:	463b      	mov	r3, r7
 8009612:	f7f6 fe51 	bl	80002b8 <__aeabi_dsub>
 8009616:	4602      	mov	r2, r0
 8009618:	460b      	mov	r3, r1
 800961a:	4650      	mov	r0, sl
 800961c:	4659      	mov	r1, fp
 800961e:	f7f6 fe4b 	bl	80002b8 <__aeabi_dsub>
 8009622:	ec53 2b18 	vmov	r2, r3, d8
 8009626:	f7f6 ffff 	bl	8000628 <__aeabi_dmul>
 800962a:	4622      	mov	r2, r4
 800962c:	4606      	mov	r6, r0
 800962e:	460f      	mov	r7, r1
 8009630:	462b      	mov	r3, r5
 8009632:	ec51 0b19 	vmov	r0, r1, d9
 8009636:	f7f6 fff7 	bl	8000628 <__aeabi_dmul>
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	4630      	mov	r0, r6
 8009640:	4639      	mov	r1, r7
 8009642:	f7f6 fe3b 	bl	80002bc <__adddf3>
 8009646:	4606      	mov	r6, r0
 8009648:	460f      	mov	r7, r1
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	4640      	mov	r0, r8
 8009650:	4649      	mov	r1, r9
 8009652:	f7f6 fe33 	bl	80002bc <__adddf3>
 8009656:	a33e      	add	r3, pc, #248	; (adr r3, 8009750 <__ieee754_pow+0x738>)
 8009658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965c:	2000      	movs	r0, #0
 800965e:	4604      	mov	r4, r0
 8009660:	460d      	mov	r5, r1
 8009662:	f7f6 ffe1 	bl	8000628 <__aeabi_dmul>
 8009666:	4642      	mov	r2, r8
 8009668:	ec41 0b18 	vmov	d8, r0, r1
 800966c:	464b      	mov	r3, r9
 800966e:	4620      	mov	r0, r4
 8009670:	4629      	mov	r1, r5
 8009672:	f7f6 fe21 	bl	80002b8 <__aeabi_dsub>
 8009676:	4602      	mov	r2, r0
 8009678:	460b      	mov	r3, r1
 800967a:	4630      	mov	r0, r6
 800967c:	4639      	mov	r1, r7
 800967e:	f7f6 fe1b 	bl	80002b8 <__aeabi_dsub>
 8009682:	a335      	add	r3, pc, #212	; (adr r3, 8009758 <__ieee754_pow+0x740>)
 8009684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009688:	f7f6 ffce 	bl	8000628 <__aeabi_dmul>
 800968c:	a334      	add	r3, pc, #208	; (adr r3, 8009760 <__ieee754_pow+0x748>)
 800968e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009692:	4606      	mov	r6, r0
 8009694:	460f      	mov	r7, r1
 8009696:	4620      	mov	r0, r4
 8009698:	4629      	mov	r1, r5
 800969a:	f7f6 ffc5 	bl	8000628 <__aeabi_dmul>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4630      	mov	r0, r6
 80096a4:	4639      	mov	r1, r7
 80096a6:	f7f6 fe09 	bl	80002bc <__adddf3>
 80096aa:	9a07      	ldr	r2, [sp, #28]
 80096ac:	4b37      	ldr	r3, [pc, #220]	; (800978c <__ieee754_pow+0x774>)
 80096ae:	4413      	add	r3, r2
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	f7f6 fe02 	bl	80002bc <__adddf3>
 80096b8:	4682      	mov	sl, r0
 80096ba:	9805      	ldr	r0, [sp, #20]
 80096bc:	468b      	mov	fp, r1
 80096be:	f7f6 ff49 	bl	8000554 <__aeabi_i2d>
 80096c2:	9a07      	ldr	r2, [sp, #28]
 80096c4:	4b32      	ldr	r3, [pc, #200]	; (8009790 <__ieee754_pow+0x778>)
 80096c6:	4413      	add	r3, r2
 80096c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096cc:	4606      	mov	r6, r0
 80096ce:	460f      	mov	r7, r1
 80096d0:	4652      	mov	r2, sl
 80096d2:	465b      	mov	r3, fp
 80096d4:	ec51 0b18 	vmov	r0, r1, d8
 80096d8:	f7f6 fdf0 	bl	80002bc <__adddf3>
 80096dc:	4642      	mov	r2, r8
 80096de:	464b      	mov	r3, r9
 80096e0:	f7f6 fdec 	bl	80002bc <__adddf3>
 80096e4:	4632      	mov	r2, r6
 80096e6:	463b      	mov	r3, r7
 80096e8:	f7f6 fde8 	bl	80002bc <__adddf3>
 80096ec:	2000      	movs	r0, #0
 80096ee:	4632      	mov	r2, r6
 80096f0:	463b      	mov	r3, r7
 80096f2:	4604      	mov	r4, r0
 80096f4:	460d      	mov	r5, r1
 80096f6:	f7f6 fddf 	bl	80002b8 <__aeabi_dsub>
 80096fa:	4642      	mov	r2, r8
 80096fc:	464b      	mov	r3, r9
 80096fe:	f7f6 fddb 	bl	80002b8 <__aeabi_dsub>
 8009702:	ec53 2b18 	vmov	r2, r3, d8
 8009706:	f7f6 fdd7 	bl	80002b8 <__aeabi_dsub>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	4650      	mov	r0, sl
 8009710:	4659      	mov	r1, fp
 8009712:	e610      	b.n	8009336 <__ieee754_pow+0x31e>
 8009714:	2401      	movs	r4, #1
 8009716:	e6a1      	b.n	800945c <__ieee754_pow+0x444>
 8009718:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009768 <__ieee754_pow+0x750>
 800971c:	e617      	b.n	800934e <__ieee754_pow+0x336>
 800971e:	bf00      	nop
 8009720:	4a454eef 	.word	0x4a454eef
 8009724:	3fca7e28 	.word	0x3fca7e28
 8009728:	93c9db65 	.word	0x93c9db65
 800972c:	3fcd864a 	.word	0x3fcd864a
 8009730:	a91d4101 	.word	0xa91d4101
 8009734:	3fd17460 	.word	0x3fd17460
 8009738:	518f264d 	.word	0x518f264d
 800973c:	3fd55555 	.word	0x3fd55555
 8009740:	db6fabff 	.word	0xdb6fabff
 8009744:	3fdb6db6 	.word	0x3fdb6db6
 8009748:	33333303 	.word	0x33333303
 800974c:	3fe33333 	.word	0x3fe33333
 8009750:	e0000000 	.word	0xe0000000
 8009754:	3feec709 	.word	0x3feec709
 8009758:	dc3a03fd 	.word	0xdc3a03fd
 800975c:	3feec709 	.word	0x3feec709
 8009760:	145b01f5 	.word	0x145b01f5
 8009764:	be3e2fe0 	.word	0xbe3e2fe0
 8009768:	00000000 	.word	0x00000000
 800976c:	3ff00000 	.word	0x3ff00000
 8009770:	7ff00000 	.word	0x7ff00000
 8009774:	43400000 	.word	0x43400000
 8009778:	0003988e 	.word	0x0003988e
 800977c:	000bb679 	.word	0x000bb679
 8009780:	0800a2f8 	.word	0x0800a2f8
 8009784:	3ff00000 	.word	0x3ff00000
 8009788:	40080000 	.word	0x40080000
 800978c:	0800a318 	.word	0x0800a318
 8009790:	0800a308 	.word	0x0800a308
 8009794:	a3b5      	add	r3, pc, #724	; (adr r3, 8009a6c <__ieee754_pow+0xa54>)
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	4640      	mov	r0, r8
 800979c:	4649      	mov	r1, r9
 800979e:	f7f6 fd8d 	bl	80002bc <__adddf3>
 80097a2:	4622      	mov	r2, r4
 80097a4:	ec41 0b1a 	vmov	d10, r0, r1
 80097a8:	462b      	mov	r3, r5
 80097aa:	4630      	mov	r0, r6
 80097ac:	4639      	mov	r1, r7
 80097ae:	f7f6 fd83 	bl	80002b8 <__aeabi_dsub>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	ec51 0b1a 	vmov	r0, r1, d10
 80097ba:	f7f7 f9c5 	bl	8000b48 <__aeabi_dcmpgt>
 80097be:	2800      	cmp	r0, #0
 80097c0:	f47f ae04 	bne.w	80093cc <__ieee754_pow+0x3b4>
 80097c4:	4aa4      	ldr	r2, [pc, #656]	; (8009a58 <__ieee754_pow+0xa40>)
 80097c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80097ca:	4293      	cmp	r3, r2
 80097cc:	f340 8108 	ble.w	80099e0 <__ieee754_pow+0x9c8>
 80097d0:	151b      	asrs	r3, r3, #20
 80097d2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80097d6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80097da:	fa4a f303 	asr.w	r3, sl, r3
 80097de:	445b      	add	r3, fp
 80097e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80097e4:	4e9d      	ldr	r6, [pc, #628]	; (8009a5c <__ieee754_pow+0xa44>)
 80097e6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80097ea:	4116      	asrs	r6, r2
 80097ec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80097f0:	2000      	movs	r0, #0
 80097f2:	ea23 0106 	bic.w	r1, r3, r6
 80097f6:	f1c2 0214 	rsb	r2, r2, #20
 80097fa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80097fe:	fa4a fa02 	asr.w	sl, sl, r2
 8009802:	f1bb 0f00 	cmp.w	fp, #0
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	4620      	mov	r0, r4
 800980c:	4629      	mov	r1, r5
 800980e:	bfb8      	it	lt
 8009810:	f1ca 0a00 	rsblt	sl, sl, #0
 8009814:	f7f6 fd50 	bl	80002b8 <__aeabi_dsub>
 8009818:	ec41 0b19 	vmov	d9, r0, r1
 800981c:	4642      	mov	r2, r8
 800981e:	464b      	mov	r3, r9
 8009820:	ec51 0b19 	vmov	r0, r1, d9
 8009824:	f7f6 fd4a 	bl	80002bc <__adddf3>
 8009828:	a37b      	add	r3, pc, #492	; (adr r3, 8009a18 <__ieee754_pow+0xa00>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	2000      	movs	r0, #0
 8009830:	4604      	mov	r4, r0
 8009832:	460d      	mov	r5, r1
 8009834:	f7f6 fef8 	bl	8000628 <__aeabi_dmul>
 8009838:	ec53 2b19 	vmov	r2, r3, d9
 800983c:	4606      	mov	r6, r0
 800983e:	460f      	mov	r7, r1
 8009840:	4620      	mov	r0, r4
 8009842:	4629      	mov	r1, r5
 8009844:	f7f6 fd38 	bl	80002b8 <__aeabi_dsub>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	4640      	mov	r0, r8
 800984e:	4649      	mov	r1, r9
 8009850:	f7f6 fd32 	bl	80002b8 <__aeabi_dsub>
 8009854:	a372      	add	r3, pc, #456	; (adr r3, 8009a20 <__ieee754_pow+0xa08>)
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	f7f6 fee5 	bl	8000628 <__aeabi_dmul>
 800985e:	a372      	add	r3, pc, #456	; (adr r3, 8009a28 <__ieee754_pow+0xa10>)
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	4680      	mov	r8, r0
 8009866:	4689      	mov	r9, r1
 8009868:	4620      	mov	r0, r4
 800986a:	4629      	mov	r1, r5
 800986c:	f7f6 fedc 	bl	8000628 <__aeabi_dmul>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	4640      	mov	r0, r8
 8009876:	4649      	mov	r1, r9
 8009878:	f7f6 fd20 	bl	80002bc <__adddf3>
 800987c:	4604      	mov	r4, r0
 800987e:	460d      	mov	r5, r1
 8009880:	4602      	mov	r2, r0
 8009882:	460b      	mov	r3, r1
 8009884:	4630      	mov	r0, r6
 8009886:	4639      	mov	r1, r7
 8009888:	f7f6 fd18 	bl	80002bc <__adddf3>
 800988c:	4632      	mov	r2, r6
 800988e:	463b      	mov	r3, r7
 8009890:	4680      	mov	r8, r0
 8009892:	4689      	mov	r9, r1
 8009894:	f7f6 fd10 	bl	80002b8 <__aeabi_dsub>
 8009898:	4602      	mov	r2, r0
 800989a:	460b      	mov	r3, r1
 800989c:	4620      	mov	r0, r4
 800989e:	4629      	mov	r1, r5
 80098a0:	f7f6 fd0a 	bl	80002b8 <__aeabi_dsub>
 80098a4:	4642      	mov	r2, r8
 80098a6:	4606      	mov	r6, r0
 80098a8:	460f      	mov	r7, r1
 80098aa:	464b      	mov	r3, r9
 80098ac:	4640      	mov	r0, r8
 80098ae:	4649      	mov	r1, r9
 80098b0:	f7f6 feba 	bl	8000628 <__aeabi_dmul>
 80098b4:	a35e      	add	r3, pc, #376	; (adr r3, 8009a30 <__ieee754_pow+0xa18>)
 80098b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ba:	4604      	mov	r4, r0
 80098bc:	460d      	mov	r5, r1
 80098be:	f7f6 feb3 	bl	8000628 <__aeabi_dmul>
 80098c2:	a35d      	add	r3, pc, #372	; (adr r3, 8009a38 <__ieee754_pow+0xa20>)
 80098c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c8:	f7f6 fcf6 	bl	80002b8 <__aeabi_dsub>
 80098cc:	4622      	mov	r2, r4
 80098ce:	462b      	mov	r3, r5
 80098d0:	f7f6 feaa 	bl	8000628 <__aeabi_dmul>
 80098d4:	a35a      	add	r3, pc, #360	; (adr r3, 8009a40 <__ieee754_pow+0xa28>)
 80098d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098da:	f7f6 fcef 	bl	80002bc <__adddf3>
 80098de:	4622      	mov	r2, r4
 80098e0:	462b      	mov	r3, r5
 80098e2:	f7f6 fea1 	bl	8000628 <__aeabi_dmul>
 80098e6:	a358      	add	r3, pc, #352	; (adr r3, 8009a48 <__ieee754_pow+0xa30>)
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	f7f6 fce4 	bl	80002b8 <__aeabi_dsub>
 80098f0:	4622      	mov	r2, r4
 80098f2:	462b      	mov	r3, r5
 80098f4:	f7f6 fe98 	bl	8000628 <__aeabi_dmul>
 80098f8:	a355      	add	r3, pc, #340	; (adr r3, 8009a50 <__ieee754_pow+0xa38>)
 80098fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fe:	f7f6 fcdd 	bl	80002bc <__adddf3>
 8009902:	4622      	mov	r2, r4
 8009904:	462b      	mov	r3, r5
 8009906:	f7f6 fe8f 	bl	8000628 <__aeabi_dmul>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	4640      	mov	r0, r8
 8009910:	4649      	mov	r1, r9
 8009912:	f7f6 fcd1 	bl	80002b8 <__aeabi_dsub>
 8009916:	4604      	mov	r4, r0
 8009918:	460d      	mov	r5, r1
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	4640      	mov	r0, r8
 8009920:	4649      	mov	r1, r9
 8009922:	f7f6 fe81 	bl	8000628 <__aeabi_dmul>
 8009926:	2200      	movs	r2, #0
 8009928:	ec41 0b19 	vmov	d9, r0, r1
 800992c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009930:	4620      	mov	r0, r4
 8009932:	4629      	mov	r1, r5
 8009934:	f7f6 fcc0 	bl	80002b8 <__aeabi_dsub>
 8009938:	4602      	mov	r2, r0
 800993a:	460b      	mov	r3, r1
 800993c:	ec51 0b19 	vmov	r0, r1, d9
 8009940:	f7f6 ff9c 	bl	800087c <__aeabi_ddiv>
 8009944:	4632      	mov	r2, r6
 8009946:	4604      	mov	r4, r0
 8009948:	460d      	mov	r5, r1
 800994a:	463b      	mov	r3, r7
 800994c:	4640      	mov	r0, r8
 800994e:	4649      	mov	r1, r9
 8009950:	f7f6 fe6a 	bl	8000628 <__aeabi_dmul>
 8009954:	4632      	mov	r2, r6
 8009956:	463b      	mov	r3, r7
 8009958:	f7f6 fcb0 	bl	80002bc <__adddf3>
 800995c:	4602      	mov	r2, r0
 800995e:	460b      	mov	r3, r1
 8009960:	4620      	mov	r0, r4
 8009962:	4629      	mov	r1, r5
 8009964:	f7f6 fca8 	bl	80002b8 <__aeabi_dsub>
 8009968:	4642      	mov	r2, r8
 800996a:	464b      	mov	r3, r9
 800996c:	f7f6 fca4 	bl	80002b8 <__aeabi_dsub>
 8009970:	460b      	mov	r3, r1
 8009972:	4602      	mov	r2, r0
 8009974:	493a      	ldr	r1, [pc, #232]	; (8009a60 <__ieee754_pow+0xa48>)
 8009976:	2000      	movs	r0, #0
 8009978:	f7f6 fc9e 	bl	80002b8 <__aeabi_dsub>
 800997c:	ec41 0b10 	vmov	d0, r0, r1
 8009980:	ee10 3a90 	vmov	r3, s1
 8009984:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800998c:	da2b      	bge.n	80099e6 <__ieee754_pow+0x9ce>
 800998e:	4650      	mov	r0, sl
 8009990:	f000 f966 	bl	8009c60 <scalbn>
 8009994:	ec51 0b10 	vmov	r0, r1, d0
 8009998:	ec53 2b18 	vmov	r2, r3, d8
 800999c:	f7ff bbed 	b.w	800917a <__ieee754_pow+0x162>
 80099a0:	4b30      	ldr	r3, [pc, #192]	; (8009a64 <__ieee754_pow+0xa4c>)
 80099a2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80099a6:	429e      	cmp	r6, r3
 80099a8:	f77f af0c 	ble.w	80097c4 <__ieee754_pow+0x7ac>
 80099ac:	4b2e      	ldr	r3, [pc, #184]	; (8009a68 <__ieee754_pow+0xa50>)
 80099ae:	440b      	add	r3, r1
 80099b0:	4303      	orrs	r3, r0
 80099b2:	d009      	beq.n	80099c8 <__ieee754_pow+0x9b0>
 80099b4:	ec51 0b18 	vmov	r0, r1, d8
 80099b8:	2200      	movs	r2, #0
 80099ba:	2300      	movs	r3, #0
 80099bc:	f7f7 f8a6 	bl	8000b0c <__aeabi_dcmplt>
 80099c0:	3800      	subs	r0, #0
 80099c2:	bf18      	it	ne
 80099c4:	2001      	movne	r0, #1
 80099c6:	e447      	b.n	8009258 <__ieee754_pow+0x240>
 80099c8:	4622      	mov	r2, r4
 80099ca:	462b      	mov	r3, r5
 80099cc:	f7f6 fc74 	bl	80002b8 <__aeabi_dsub>
 80099d0:	4642      	mov	r2, r8
 80099d2:	464b      	mov	r3, r9
 80099d4:	f7f7 f8ae 	bl	8000b34 <__aeabi_dcmpge>
 80099d8:	2800      	cmp	r0, #0
 80099da:	f43f aef3 	beq.w	80097c4 <__ieee754_pow+0x7ac>
 80099de:	e7e9      	b.n	80099b4 <__ieee754_pow+0x99c>
 80099e0:	f04f 0a00 	mov.w	sl, #0
 80099e4:	e71a      	b.n	800981c <__ieee754_pow+0x804>
 80099e6:	ec51 0b10 	vmov	r0, r1, d0
 80099ea:	4619      	mov	r1, r3
 80099ec:	e7d4      	b.n	8009998 <__ieee754_pow+0x980>
 80099ee:	491c      	ldr	r1, [pc, #112]	; (8009a60 <__ieee754_pow+0xa48>)
 80099f0:	2000      	movs	r0, #0
 80099f2:	f7ff bb30 	b.w	8009056 <__ieee754_pow+0x3e>
 80099f6:	2000      	movs	r0, #0
 80099f8:	2100      	movs	r1, #0
 80099fa:	f7ff bb2c 	b.w	8009056 <__ieee754_pow+0x3e>
 80099fe:	4630      	mov	r0, r6
 8009a00:	4639      	mov	r1, r7
 8009a02:	f7ff bb28 	b.w	8009056 <__ieee754_pow+0x3e>
 8009a06:	9204      	str	r2, [sp, #16]
 8009a08:	f7ff bb7a 	b.w	8009100 <__ieee754_pow+0xe8>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	f7ff bb64 	b.w	80090da <__ieee754_pow+0xc2>
 8009a12:	bf00      	nop
 8009a14:	f3af 8000 	nop.w
 8009a18:	00000000 	.word	0x00000000
 8009a1c:	3fe62e43 	.word	0x3fe62e43
 8009a20:	fefa39ef 	.word	0xfefa39ef
 8009a24:	3fe62e42 	.word	0x3fe62e42
 8009a28:	0ca86c39 	.word	0x0ca86c39
 8009a2c:	be205c61 	.word	0xbe205c61
 8009a30:	72bea4d0 	.word	0x72bea4d0
 8009a34:	3e663769 	.word	0x3e663769
 8009a38:	c5d26bf1 	.word	0xc5d26bf1
 8009a3c:	3ebbbd41 	.word	0x3ebbbd41
 8009a40:	af25de2c 	.word	0xaf25de2c
 8009a44:	3f11566a 	.word	0x3f11566a
 8009a48:	16bebd93 	.word	0x16bebd93
 8009a4c:	3f66c16c 	.word	0x3f66c16c
 8009a50:	5555553e 	.word	0x5555553e
 8009a54:	3fc55555 	.word	0x3fc55555
 8009a58:	3fe00000 	.word	0x3fe00000
 8009a5c:	000fffff 	.word	0x000fffff
 8009a60:	3ff00000 	.word	0x3ff00000
 8009a64:	4090cbff 	.word	0x4090cbff
 8009a68:	3f6f3400 	.word	0x3f6f3400
 8009a6c:	652b82fe 	.word	0x652b82fe
 8009a70:	3c971547 	.word	0x3c971547

08009a74 <__ieee754_sqrt>:
 8009a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a78:	ec55 4b10 	vmov	r4, r5, d0
 8009a7c:	4e55      	ldr	r6, [pc, #340]	; (8009bd4 <__ieee754_sqrt+0x160>)
 8009a7e:	43ae      	bics	r6, r5
 8009a80:	ee10 0a10 	vmov	r0, s0
 8009a84:	ee10 3a10 	vmov	r3, s0
 8009a88:	462a      	mov	r2, r5
 8009a8a:	4629      	mov	r1, r5
 8009a8c:	d110      	bne.n	8009ab0 <__ieee754_sqrt+0x3c>
 8009a8e:	ee10 2a10 	vmov	r2, s0
 8009a92:	462b      	mov	r3, r5
 8009a94:	f7f6 fdc8 	bl	8000628 <__aeabi_dmul>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	f7f6 fc0c 	bl	80002bc <__adddf3>
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	460d      	mov	r5, r1
 8009aa8:	ec45 4b10 	vmov	d0, r4, r5
 8009aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab0:	2d00      	cmp	r5, #0
 8009ab2:	dc10      	bgt.n	8009ad6 <__ieee754_sqrt+0x62>
 8009ab4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009ab8:	4330      	orrs	r0, r6
 8009aba:	d0f5      	beq.n	8009aa8 <__ieee754_sqrt+0x34>
 8009abc:	b15d      	cbz	r5, 8009ad6 <__ieee754_sqrt+0x62>
 8009abe:	ee10 2a10 	vmov	r2, s0
 8009ac2:	462b      	mov	r3, r5
 8009ac4:	ee10 0a10 	vmov	r0, s0
 8009ac8:	f7f6 fbf6 	bl	80002b8 <__aeabi_dsub>
 8009acc:	4602      	mov	r2, r0
 8009ace:	460b      	mov	r3, r1
 8009ad0:	f7f6 fed4 	bl	800087c <__aeabi_ddiv>
 8009ad4:	e7e6      	b.n	8009aa4 <__ieee754_sqrt+0x30>
 8009ad6:	1512      	asrs	r2, r2, #20
 8009ad8:	d074      	beq.n	8009bc4 <__ieee754_sqrt+0x150>
 8009ada:	07d4      	lsls	r4, r2, #31
 8009adc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009ae0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009ae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009ae8:	bf5e      	ittt	pl
 8009aea:	0fda      	lsrpl	r2, r3, #31
 8009aec:	005b      	lslpl	r3, r3, #1
 8009aee:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009af2:	2400      	movs	r4, #0
 8009af4:	0fda      	lsrs	r2, r3, #31
 8009af6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009afa:	107f      	asrs	r7, r7, #1
 8009afc:	005b      	lsls	r3, r3, #1
 8009afe:	2516      	movs	r5, #22
 8009b00:	4620      	mov	r0, r4
 8009b02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009b06:	1886      	adds	r6, r0, r2
 8009b08:	428e      	cmp	r6, r1
 8009b0a:	bfde      	ittt	le
 8009b0c:	1b89      	suble	r1, r1, r6
 8009b0e:	18b0      	addle	r0, r6, r2
 8009b10:	18a4      	addle	r4, r4, r2
 8009b12:	0049      	lsls	r1, r1, #1
 8009b14:	3d01      	subs	r5, #1
 8009b16:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009b1a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009b1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009b22:	d1f0      	bne.n	8009b06 <__ieee754_sqrt+0x92>
 8009b24:	462a      	mov	r2, r5
 8009b26:	f04f 0e20 	mov.w	lr, #32
 8009b2a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009b2e:	4281      	cmp	r1, r0
 8009b30:	eb06 0c05 	add.w	ip, r6, r5
 8009b34:	dc02      	bgt.n	8009b3c <__ieee754_sqrt+0xc8>
 8009b36:	d113      	bne.n	8009b60 <__ieee754_sqrt+0xec>
 8009b38:	459c      	cmp	ip, r3
 8009b3a:	d811      	bhi.n	8009b60 <__ieee754_sqrt+0xec>
 8009b3c:	f1bc 0f00 	cmp.w	ip, #0
 8009b40:	eb0c 0506 	add.w	r5, ip, r6
 8009b44:	da43      	bge.n	8009bce <__ieee754_sqrt+0x15a>
 8009b46:	2d00      	cmp	r5, #0
 8009b48:	db41      	blt.n	8009bce <__ieee754_sqrt+0x15a>
 8009b4a:	f100 0801 	add.w	r8, r0, #1
 8009b4e:	1a09      	subs	r1, r1, r0
 8009b50:	459c      	cmp	ip, r3
 8009b52:	bf88      	it	hi
 8009b54:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8009b58:	eba3 030c 	sub.w	r3, r3, ip
 8009b5c:	4432      	add	r2, r6
 8009b5e:	4640      	mov	r0, r8
 8009b60:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009b64:	f1be 0e01 	subs.w	lr, lr, #1
 8009b68:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009b70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009b74:	d1db      	bne.n	8009b2e <__ieee754_sqrt+0xba>
 8009b76:	430b      	orrs	r3, r1
 8009b78:	d006      	beq.n	8009b88 <__ieee754_sqrt+0x114>
 8009b7a:	1c50      	adds	r0, r2, #1
 8009b7c:	bf13      	iteet	ne
 8009b7e:	3201      	addne	r2, #1
 8009b80:	3401      	addeq	r4, #1
 8009b82:	4672      	moveq	r2, lr
 8009b84:	f022 0201 	bicne.w	r2, r2, #1
 8009b88:	1063      	asrs	r3, r4, #1
 8009b8a:	0852      	lsrs	r2, r2, #1
 8009b8c:	07e1      	lsls	r1, r4, #31
 8009b8e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009b92:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009b96:	bf48      	it	mi
 8009b98:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009b9c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009ba0:	4614      	mov	r4, r2
 8009ba2:	e781      	b.n	8009aa8 <__ieee754_sqrt+0x34>
 8009ba4:	0ad9      	lsrs	r1, r3, #11
 8009ba6:	3815      	subs	r0, #21
 8009ba8:	055b      	lsls	r3, r3, #21
 8009baa:	2900      	cmp	r1, #0
 8009bac:	d0fa      	beq.n	8009ba4 <__ieee754_sqrt+0x130>
 8009bae:	02cd      	lsls	r5, r1, #11
 8009bb0:	d50a      	bpl.n	8009bc8 <__ieee754_sqrt+0x154>
 8009bb2:	f1c2 0420 	rsb	r4, r2, #32
 8009bb6:	fa23 f404 	lsr.w	r4, r3, r4
 8009bba:	1e55      	subs	r5, r2, #1
 8009bbc:	4093      	lsls	r3, r2
 8009bbe:	4321      	orrs	r1, r4
 8009bc0:	1b42      	subs	r2, r0, r5
 8009bc2:	e78a      	b.n	8009ada <__ieee754_sqrt+0x66>
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	e7f0      	b.n	8009baa <__ieee754_sqrt+0x136>
 8009bc8:	0049      	lsls	r1, r1, #1
 8009bca:	3201      	adds	r2, #1
 8009bcc:	e7ef      	b.n	8009bae <__ieee754_sqrt+0x13a>
 8009bce:	4680      	mov	r8, r0
 8009bd0:	e7bd      	b.n	8009b4e <__ieee754_sqrt+0xda>
 8009bd2:	bf00      	nop
 8009bd4:	7ff00000 	.word	0x7ff00000

08009bd8 <with_errno>:
 8009bd8:	b570      	push	{r4, r5, r6, lr}
 8009bda:	4604      	mov	r4, r0
 8009bdc:	460d      	mov	r5, r1
 8009bde:	4616      	mov	r6, r2
 8009be0:	f7fb fd94 	bl	800570c <__errno>
 8009be4:	4629      	mov	r1, r5
 8009be6:	6006      	str	r6, [r0, #0]
 8009be8:	4620      	mov	r0, r4
 8009bea:	bd70      	pop	{r4, r5, r6, pc}

08009bec <xflow>:
 8009bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bee:	4614      	mov	r4, r2
 8009bf0:	461d      	mov	r5, r3
 8009bf2:	b108      	cbz	r0, 8009bf8 <xflow+0xc>
 8009bf4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009bf8:	e9cd 2300 	strd	r2, r3, [sp]
 8009bfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c00:	4620      	mov	r0, r4
 8009c02:	4629      	mov	r1, r5
 8009c04:	f7f6 fd10 	bl	8000628 <__aeabi_dmul>
 8009c08:	2222      	movs	r2, #34	; 0x22
 8009c0a:	b003      	add	sp, #12
 8009c0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c10:	f7ff bfe2 	b.w	8009bd8 <with_errno>

08009c14 <__math_uflow>:
 8009c14:	b508      	push	{r3, lr}
 8009c16:	2200      	movs	r2, #0
 8009c18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c1c:	f7ff ffe6 	bl	8009bec <xflow>
 8009c20:	ec41 0b10 	vmov	d0, r0, r1
 8009c24:	bd08      	pop	{r3, pc}

08009c26 <__math_oflow>:
 8009c26:	b508      	push	{r3, lr}
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009c2e:	f7ff ffdd 	bl	8009bec <xflow>
 8009c32:	ec41 0b10 	vmov	d0, r0, r1
 8009c36:	bd08      	pop	{r3, pc}

08009c38 <fabs>:
 8009c38:	ec51 0b10 	vmov	r0, r1, d0
 8009c3c:	ee10 2a10 	vmov	r2, s0
 8009c40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c44:	ec43 2b10 	vmov	d0, r2, r3
 8009c48:	4770      	bx	lr

08009c4a <finite>:
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	ed8d 0b00 	vstr	d0, [sp]
 8009c50:	9801      	ldr	r0, [sp, #4]
 8009c52:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009c56:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009c5a:	0fc0      	lsrs	r0, r0, #31
 8009c5c:	b002      	add	sp, #8
 8009c5e:	4770      	bx	lr

08009c60 <scalbn>:
 8009c60:	b570      	push	{r4, r5, r6, lr}
 8009c62:	ec55 4b10 	vmov	r4, r5, d0
 8009c66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009c6a:	4606      	mov	r6, r0
 8009c6c:	462b      	mov	r3, r5
 8009c6e:	b99a      	cbnz	r2, 8009c98 <scalbn+0x38>
 8009c70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009c74:	4323      	orrs	r3, r4
 8009c76:	d036      	beq.n	8009ce6 <scalbn+0x86>
 8009c78:	4b39      	ldr	r3, [pc, #228]	; (8009d60 <scalbn+0x100>)
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	ee10 0a10 	vmov	r0, s0
 8009c80:	2200      	movs	r2, #0
 8009c82:	f7f6 fcd1 	bl	8000628 <__aeabi_dmul>
 8009c86:	4b37      	ldr	r3, [pc, #220]	; (8009d64 <scalbn+0x104>)
 8009c88:	429e      	cmp	r6, r3
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	460d      	mov	r5, r1
 8009c8e:	da10      	bge.n	8009cb2 <scalbn+0x52>
 8009c90:	a32b      	add	r3, pc, #172	; (adr r3, 8009d40 <scalbn+0xe0>)
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	e03a      	b.n	8009d0e <scalbn+0xae>
 8009c98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009c9c:	428a      	cmp	r2, r1
 8009c9e:	d10c      	bne.n	8009cba <scalbn+0x5a>
 8009ca0:	ee10 2a10 	vmov	r2, s0
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	f7f6 fb08 	bl	80002bc <__adddf3>
 8009cac:	4604      	mov	r4, r0
 8009cae:	460d      	mov	r5, r1
 8009cb0:	e019      	b.n	8009ce6 <scalbn+0x86>
 8009cb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	3a36      	subs	r2, #54	; 0x36
 8009cba:	4432      	add	r2, r6
 8009cbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009cc0:	428a      	cmp	r2, r1
 8009cc2:	dd08      	ble.n	8009cd6 <scalbn+0x76>
 8009cc4:	2d00      	cmp	r5, #0
 8009cc6:	a120      	add	r1, pc, #128	; (adr r1, 8009d48 <scalbn+0xe8>)
 8009cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ccc:	da1c      	bge.n	8009d08 <scalbn+0xa8>
 8009cce:	a120      	add	r1, pc, #128	; (adr r1, 8009d50 <scalbn+0xf0>)
 8009cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cd4:	e018      	b.n	8009d08 <scalbn+0xa8>
 8009cd6:	2a00      	cmp	r2, #0
 8009cd8:	dd08      	ble.n	8009cec <scalbn+0x8c>
 8009cda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009cde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009ce2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009ce6:	ec45 4b10 	vmov	d0, r4, r5
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009cf0:	da19      	bge.n	8009d26 <scalbn+0xc6>
 8009cf2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009cf6:	429e      	cmp	r6, r3
 8009cf8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009cfc:	dd0a      	ble.n	8009d14 <scalbn+0xb4>
 8009cfe:	a112      	add	r1, pc, #72	; (adr r1, 8009d48 <scalbn+0xe8>)
 8009d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1e2      	bne.n	8009cce <scalbn+0x6e>
 8009d08:	a30f      	add	r3, pc, #60	; (adr r3, 8009d48 <scalbn+0xe8>)
 8009d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0e:	f7f6 fc8b 	bl	8000628 <__aeabi_dmul>
 8009d12:	e7cb      	b.n	8009cac <scalbn+0x4c>
 8009d14:	a10a      	add	r1, pc, #40	; (adr r1, 8009d40 <scalbn+0xe0>)
 8009d16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d0b8      	beq.n	8009c90 <scalbn+0x30>
 8009d1e:	a10e      	add	r1, pc, #56	; (adr r1, 8009d58 <scalbn+0xf8>)
 8009d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d24:	e7b4      	b.n	8009c90 <scalbn+0x30>
 8009d26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009d2a:	3236      	adds	r2, #54	; 0x36
 8009d2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009d30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009d34:	4620      	mov	r0, r4
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <scalbn+0x108>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	e7e8      	b.n	8009d0e <scalbn+0xae>
 8009d3c:	f3af 8000 	nop.w
 8009d40:	c2f8f359 	.word	0xc2f8f359
 8009d44:	01a56e1f 	.word	0x01a56e1f
 8009d48:	8800759c 	.word	0x8800759c
 8009d4c:	7e37e43c 	.word	0x7e37e43c
 8009d50:	8800759c 	.word	0x8800759c
 8009d54:	fe37e43c 	.word	0xfe37e43c
 8009d58:	c2f8f359 	.word	0xc2f8f359
 8009d5c:	81a56e1f 	.word	0x81a56e1f
 8009d60:	43500000 	.word	0x43500000
 8009d64:	ffff3cb0 	.word	0xffff3cb0
 8009d68:	3c900000 	.word	0x3c900000

08009d6c <_sbrk>:
 8009d6c:	4a04      	ldr	r2, [pc, #16]	; (8009d80 <_sbrk+0x14>)
 8009d6e:	6811      	ldr	r1, [r2, #0]
 8009d70:	4603      	mov	r3, r0
 8009d72:	b909      	cbnz	r1, 8009d78 <_sbrk+0xc>
 8009d74:	4903      	ldr	r1, [pc, #12]	; (8009d84 <_sbrk+0x18>)
 8009d76:	6011      	str	r1, [r2, #0]
 8009d78:	6810      	ldr	r0, [r2, #0]
 8009d7a:	4403      	add	r3, r0
 8009d7c:	6013      	str	r3, [r2, #0]
 8009d7e:	4770      	bx	lr
 8009d80:	200005b4 	.word	0x200005b4
 8009d84:	200005b8 	.word	0x200005b8

08009d88 <_init>:
 8009d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8a:	bf00      	nop
 8009d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d8e:	bc08      	pop	{r3}
 8009d90:	469e      	mov	lr, r3
 8009d92:	4770      	bx	lr

08009d94 <_fini>:
 8009d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d96:	bf00      	nop
 8009d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d9a:	bc08      	pop	{r3}
 8009d9c:	469e      	mov	lr, r3
 8009d9e:	4770      	bx	lr
