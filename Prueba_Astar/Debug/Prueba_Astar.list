
Prueba_Astar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  08009358  08009358  00019358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a70  08009a70  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009a70  08009a70  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a70  08009a70  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a70  08009a70  00019a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a74  08009a74  00019a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000118c8  200001d8  08009c50  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011aa0  08009c50  00021aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000451a  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000df6  00000000  00000000  00024722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d8  00000000  00000000  00025518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000378  00000000  00000000  000258f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011739  00000000  00000000  00025c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005293  00000000  00000000  000373a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ff4a  00000000  00000000  0003c634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009c57e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f8  00000000  00000000  0009c5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009340 	.word	0x08009340

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08009340 	.word	0x08009340

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <main>:
const char* msg_NotWorking = "\n--------Astar isn't working properly----------\n";
const char* msg_InsertGrid = "\n------------Insert the char grid--------------\n";


int main(void)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000c7e:	4b72      	ldr	r3, [pc, #456]	; (8000e48 <main+0x1d0>)
 8000c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c84:	4a70      	ldr	r2, [pc, #448]	; (8000e48 <main+0x1d0>)
 8000c86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	inSystem ();
 8000c8e:	f000 f903 	bl	8000e98 <inSystem>


    /* Loop forever */
	while(1){

		if (!flagAstar){
 8000c92:	4b6e      	ldr	r3, [pc, #440]	; (8000e4c <main+0x1d4>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d13f      	bne.n	8000d1a <main+0xa2>

			if (rxData != '\0'){
 8000c9a:	4b6d      	ldr	r3, [pc, #436]	; (8000e50 <main+0x1d8>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d030      	beq.n	8000d04 <main+0x8c>
				bufferReception[counterReception] = rxData;
 8000ca2:	4b6c      	ldr	r3, [pc, #432]	; (8000e54 <main+0x1dc>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b69      	ldr	r3, [pc, #420]	; (8000e50 <main+0x1d8>)
 8000caa:	7819      	ldrb	r1, [r3, #0]
 8000cac:	4b6a      	ldr	r3, [pc, #424]	; (8000e58 <main+0x1e0>)
 8000cae:	5499      	strb	r1, [r3, r2]
				counterReception++;
 8000cb0:	4b68      	ldr	r3, [pc, #416]	; (8000e54 <main+0x1dc>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	4b66      	ldr	r3, [pc, #408]	; (8000e54 <main+0x1dc>)
 8000cba:	701a      	strb	r2, [r3, #0]

				if (rxData == '@'){
 8000cbc:	4b64      	ldr	r3, [pc, #400]	; (8000e50 <main+0x1d8>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b40      	cmp	r3, #64	; 0x40
 8000cc2:	d10c      	bne.n	8000cde <main+0x66>
					doneTransaction = SET;
 8000cc4:	4b65      	ldr	r3, [pc, #404]	; (8000e5c <main+0x1e4>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]

					bufferReception[counterReception-1] = '\0';
 8000cca:	4b62      	ldr	r3, [pc, #392]	; (8000e54 <main+0x1dc>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	4a61      	ldr	r2, [pc, #388]	; (8000e58 <main+0x1e0>)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	54d1      	strb	r1, [r2, r3]

					counterReception = 0;
 8000cd6:	4b5f      	ldr	r3, [pc, #380]	; (8000e54 <main+0x1dc>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	e00f      	b.n	8000cfe <main+0x86>

				}else if (rxData == 'z'){
 8000cde:	4b5c      	ldr	r3, [pc, #368]	; (8000e50 <main+0x1d8>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b7a      	cmp	r3, #122	; 0x7a
 8000ce4:	d10b      	bne.n	8000cfe <main+0x86>

					memset(bufferReception, 0, sizeof(bufferReception));
 8000ce6:	2240      	movs	r2, #64	; 0x40
 8000ce8:	2100      	movs	r1, #0
 8000cea:	485b      	ldr	r0, [pc, #364]	; (8000e58 <main+0x1e0>)
 8000cec:	f004 f81e 	bl	8004d2c <memset>
					counterReception = 0;
 8000cf0:	4b58      	ldr	r3, [pc, #352]	; (8000e54 <main+0x1dc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "Buffer Vaciado\n \r");
 8000cf6:	495a      	ldr	r1, [pc, #360]	; (8000e60 <main+0x1e8>)
 8000cf8:	485a      	ldr	r0, [pc, #360]	; (8000e64 <main+0x1ec>)
 8000cfa:	f003 ff1f 	bl	8004b3c <writeMsg>
				}

				rxData = '\0';
 8000cfe:	4b54      	ldr	r3, [pc, #336]	; (8000e50 <main+0x1d8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]

			}

			if (doneTransaction){
 8000d04:	4b55      	ldr	r3, [pc, #340]	; (8000e5c <main+0x1e4>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0c2      	beq.n	8000c92 <main+0x1a>
				parseCommands(bufferReception);
 8000d0c:	4852      	ldr	r0, [pc, #328]	; (8000e58 <main+0x1e0>)
 8000d0e:	f000 f95d 	bl	8000fcc <parseCommands>
				doneTransaction = RESET;
 8000d12:	4b52      	ldr	r3, [pc, #328]	; (8000e5c <main+0x1e4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
 8000d18:	e7bb      	b.n	8000c92 <main+0x1a>
			}

		}else{
			// Si estamos aqui es porque se aplicara el mismo metodo para guardar cada fila de strings

			if (rxData != '\0'){
 8000d1a:	4b4d      	ldr	r3, [pc, #308]	; (8000e50 <main+0x1d8>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d05d      	beq.n	8000dde <main+0x166>

				if (rxData != '\n'){
 8000d22:	4b4b      	ldr	r3, [pc, #300]	; (8000e50 <main+0x1d8>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b0a      	cmp	r3, #10
 8000d28:	d023      	beq.n	8000d72 <main+0xfa>
					if (rxData != '\r'){
 8000d2a:	4b49      	ldr	r3, [pc, #292]	; (8000e50 <main+0x1d8>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b0d      	cmp	r3, #13
 8000d30:	d016      	beq.n	8000d60 <main+0xe8>
						stringMatrix[stringRow][stringColumn] = rxData;
 8000d32:	4b4d      	ldr	r3, [pc, #308]	; (8000e68 <main+0x1f0>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461c      	mov	r4, r3
 8000d38:	4b4c      	ldr	r3, [pc, #304]	; (8000e6c <main+0x1f4>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	4b44      	ldr	r3, [pc, #272]	; (8000e50 <main+0x1d8>)
 8000d40:	7819      	ldrb	r1, [r3, #0]
 8000d42:	4a4b      	ldr	r2, [pc, #300]	; (8000e70 <main+0x1f8>)
 8000d44:	2334      	movs	r3, #52	; 0x34
 8000d46:	fb04 f303 	mul.w	r3, r4, r3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4403      	add	r3, r0
 8000d4e:	460a      	mov	r2, r1
 8000d50:	701a      	strb	r2, [r3, #0]
						stringColumn++;
 8000d52:	4b46      	ldr	r3, [pc, #280]	; (8000e6c <main+0x1f4>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <main+0x1f4>)
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	e008      	b.n	8000d72 <main+0xfa>
					}else{
						stringRow++;
 8000d60:	4b41      	ldr	r3, [pc, #260]	; (8000e68 <main+0x1f0>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	3301      	adds	r3, #1
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b3f      	ldr	r3, [pc, #252]	; (8000e68 <main+0x1f0>)
 8000d6a:	701a      	strb	r2, [r3, #0]
						stringColumn = 0;
 8000d6c:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <main+0x1f4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
					}
				}

				if (rxData == '@'){
 8000d72:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <main+0x1d8>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b40      	cmp	r3, #64	; 0x40
 8000d78:	d114      	bne.n	8000da4 <main+0x12c>
					doneTransaction = SET;
 8000d7a:	4b38      	ldr	r3, [pc, #224]	; (8000e5c <main+0x1e4>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	701a      	strb	r2, [r3, #0]

					stringMatrix[stringRow][stringColumn - 1] = '\0';
 8000d80:	4b39      	ldr	r3, [pc, #228]	; (8000e68 <main+0x1f0>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	4b39      	ldr	r3, [pc, #228]	; (8000e6c <main+0x1f4>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	4938      	ldr	r1, [pc, #224]	; (8000e70 <main+0x1f8>)
 8000d8e:	2234      	movs	r2, #52	; 0x34
 8000d90:	fb00 f202 	mul.w	r2, r0, r2
 8000d94:	440a      	add	r2, r1
 8000d96:	4413      	add	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]

					stringColumn = 0;
 8000d9c:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <main+0x1f4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	e019      	b.n	8000dd8 <main+0x160>

				}else if (rxData == 'z'){
 8000da4:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <main+0x1d8>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b7a      	cmp	r3, #122	; 0x7a
 8000daa:	d115      	bne.n	8000dd8 <main+0x160>

					memset(stringMatrix, 0, sizeof(stringMatrix));
 8000dac:	f44f 6229 	mov.w	r2, #2704	; 0xa90
 8000db0:	2100      	movs	r1, #0
 8000db2:	482f      	ldr	r0, [pc, #188]	; (8000e70 <main+0x1f8>)
 8000db4:	f003 ffba 	bl	8004d2c <memset>
					stringRow    = 0;
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <main+0x1f0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <main+0x1f4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 8000dc4:	492b      	ldr	r1, [pc, #172]	; (8000e74 <main+0x1fc>)
 8000dc6:	4827      	ldr	r0, [pc, #156]	; (8000e64 <main+0x1ec>)
 8000dc8:	f003 feb8 	bl	8004b3c <writeMsg>
					writeMsg(&handlerUSART, msg_InsertGrid);
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <main+0x200>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4824      	ldr	r0, [pc, #144]	; (8000e64 <main+0x1ec>)
 8000dd4:	f003 feb2 	bl	8004b3c <writeMsg>
				}

				rxData = '\0';
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <main+0x1d8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]

			}

			if (doneTransaction){
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <main+0x1e4>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f43f af55 	beq.w	8000c92 <main+0x1a>

				starWorking = findShorterWay(stringMatrix, readableGrid, costs, &handlerAstarParameters, &handlerCostsAstar, shorterWay);
 8000de8:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <main+0x204>)
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <main+0x208>)
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <main+0x20c>)
 8000df2:	4a25      	ldr	r2, [pc, #148]	; (8000e88 <main+0x210>)
 8000df4:	4925      	ldr	r1, [pc, #148]	; (8000e8c <main+0x214>)
 8000df6:	481e      	ldr	r0, [pc, #120]	; (8000e70 <main+0x1f8>)
 8000df8:	f000 fa64 	bl	80012c4 <findShorterWay>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <main+0x218>)
 8000e02:	701a      	strb	r2, [r3, #0]

				if (starWorking){
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <main+0x218>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d105      	bne.n	8000e18 <main+0x1a0>
					// si se llego hasta aca es porque Astar si funciona correctamente
				}else{
					writeMsg(&handlerUSART, msg_NotWorking);
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <main+0x21c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	4814      	ldr	r0, [pc, #80]	; (8000e64 <main+0x1ec>)
 8000e14:	f003 fe92 	bl	8004b3c <writeMsg>
				}
				memset(stringMatrix, 0, sizeof(stringMatrix));
 8000e18:	f44f 6229 	mov.w	r2, #2704	; 0xa90
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4814      	ldr	r0, [pc, #80]	; (8000e70 <main+0x1f8>)
 8000e20:	f003 ff84 	bl	8004d2c <memset>
				stringRow    = 0;
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <main+0x1f0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
				stringColumn = 0;
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <main+0x1f4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
				writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 8000e30:	4910      	ldr	r1, [pc, #64]	; (8000e74 <main+0x1fc>)
 8000e32:	480c      	ldr	r0, [pc, #48]	; (8000e64 <main+0x1ec>)
 8000e34:	f003 fe82 	bl	8004b3c <writeMsg>

				flagAstar = RESET;
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <main+0x1d4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]

				doneTransaction = RESET;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <main+0x1e4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
		if (!flagAstar){
 8000e44:	e725      	b.n	8000c92 <main+0x1a>
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00
 8000e4c:	20000e56 	.word	0x20000e56
 8000e50:	20000356 	.word	0x20000356
 8000e54:	20000354 	.word	0x20000354
 8000e58:	20000314 	.word	0x20000314
 8000e5c:	20000355 	.word	0x20000355
 8000e60:	080093c0 	.word	0x080093c0
 8000e64:	2000022c 	.word	0x2000022c
 8000e68:	20000e55 	.word	0x20000e55
 8000e6c:	20000e54 	.word	0x20000e54
 8000e70:	200003c4 	.word	0x200003c4
 8000e74:	080093d4 	.word	0x080093d4
 8000e78:	20000004 	.word	0x20000004
 8000e7c:	20011754 	.word	0x20011754
 8000e80:	200002cc 	.word	0x200002cc
 8000e84:	200002c0 	.word	0x200002c0
 8000e88:	20000f44 	.word	0x20000f44
 8000e8c:	20010cc4 	.word	0x20010cc4
 8000e90:	20000e57 	.word	0x20000e57
 8000e94:	20000000 	.word	0x20000000

08000e98 <inSystem>:
		}
	}// FIN DEL LOOP
}


void inSystem (void){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0


	// Activamos la maxima velocidad del microcontrolador
	RCC_enableMaxFrequencies(RCC_100MHz);
 8000e9c:	2008      	movs	r0, #8
 8000e9e:	f002 fee3 	bl	8003c68 <RCC_enableMaxFrequencies>
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000ea2:	4b41      	ldr	r3, [pc, #260]	; (8000fa8 <inSystem+0x110>)
 8000ea4:	4a41      	ldr	r2, [pc, #260]	; (8000fac <inSystem+0x114>)
 8000ea6:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000ea8:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <inSystem+0x110>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000eae:	4b3e      	ldr	r3, [pc, #248]	; (8000fa8 <inSystem+0x110>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000eb4:	4b3c      	ldr	r3, [pc, #240]	; (8000fa8 <inSystem+0x110>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000eba:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <inSystem+0x110>)
 8000ebc:	2205      	movs	r2, #5
 8000ebe:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000ec0:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <inSystem+0x110>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <inSystem+0x110>)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000ecc:	4836      	ldr	r0, [pc, #216]	; (8000fa8 <inSystem+0x110>)
 8000ece:	f002 fd3d 	bl	800394c <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4834      	ldr	r0, [pc, #208]	; (8000fa8 <inSystem+0x110>)
 8000ed6:	f002 fe63 	bl	8003ba0 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 8000eda:	4b35      	ldr	r3, [pc, #212]	; (8000fb0 <inSystem+0x118>)
 8000edc:	4a35      	ldr	r2, [pc, #212]	; (8000fb4 <inSystem+0x11c>)
 8000ede:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8000ee0:	4b33      	ldr	r3, [pc, #204]	; (8000fb0 <inSystem+0x118>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8000ee6:	4b32      	ldr	r3, [pc, #200]	; (8000fb0 <inSystem+0x118>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8000eec:	4b30      	ldr	r3, [pc, #192]	; (8000fb0 <inSystem+0x118>)
 8000eee:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ef2:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 1000;
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <inSystem+0x118>)
 8000ef6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000efa:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 8000efc:	482c      	ldr	r0, [pc, #176]	; (8000fb0 <inSystem+0x118>)
 8000efe:	f002 f947 	bl	8003190 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8000f02:	482b      	ldr	r0, [pc, #172]	; (8000fb0 <inSystem+0x118>)
 8000f04:	f002 fd10 	bl	8003928 <startTimer>
	///////////////////////////////////////////Comunicación serial para comandos //////////////////////////////////////////////


	//Comunicacion serial

	handlerPinRx.pGPIOx                             = GPIOA;
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <inSystem+0x120>)
 8000f0a:	4a28      	ldr	r2, [pc, #160]	; (8000fac <inSystem+0x114>)
 8000f0c:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <inSystem+0x120>)
 8000f10:	2207      	movs	r2, #7
 8000f12:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <inSystem+0x120>)
 8000f16:	2202      	movs	r2, #2
 8000f18:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f1a:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <inSystem+0x120>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <inSystem+0x120>)
 8000f22:	2203      	movs	r2, #3
 8000f24:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f26:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <inSystem+0x120>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000f2c:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <inSystem+0x120>)
 8000f2e:	2203      	movs	r2, #3
 8000f30:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 8000f32:	4821      	ldr	r0, [pc, #132]	; (8000fb8 <inSystem+0x120>)
 8000f34:	f002 fd0a 	bl	800394c <GPIO_Config>

	handlerPinTx.pGPIOx                             = GPIOA;
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <inSystem+0x124>)
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	; (8000fac <inSystem+0x114>)
 8000f3c:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <inSystem+0x124>)
 8000f40:	2207      	movs	r2, #7
 8000f42:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <inSystem+0x124>)
 8000f46:	2202      	movs	r2, #2
 8000f48:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <inSystem+0x124>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <inSystem+0x124>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <inSystem+0x124>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <inSystem+0x124>)
 8000f5e:	2203      	movs	r2, #3
 8000f60:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 8000f62:	4816      	ldr	r0, [pc, #88]	; (8000fbc <inSystem+0x124>)
 8000f64:	f002 fcf2 	bl	800394c <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <inSystem+0x128>)
 8000f6a:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <inSystem+0x12c>)
 8000f6c:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <inSystem+0x128>)
 8000f70:	4a15      	ldr	r2, [pc, #84]	; (8000fc8 <inSystem+0x130>)
 8000f72:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <inSystem+0x128>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <inSystem+0x128>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <inSystem+0x128>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <inSystem+0x128>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <inSystem+0x128>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <inSystem+0x128>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <inSystem+0x128>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 8000f9e:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <inSystem+0x128>)
 8000fa0:	f003 f9e0 	bl	8004364 <USART_Config>


}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200001f4 	.word	0x200001f4
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	20000218 	.word	0x20000218
 8000fb4:	40000400 	.word	0x40000400
 8000fb8:	20000200 	.word	0x20000200
 8000fbc:	2000020c 	.word	0x2000020c
 8000fc0:	2000022c 	.word	0x2000022c
 8000fc4:	40004400 	.word	0x40004400
 8000fc8:	02faf080 	.word	0x02faf080

08000fcc <parseCommands>:


void parseCommands(char *stringVector){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af04      	add	r7, sp, #16
 8000fd2:	6078      	str	r0, [r7, #4]

	sscanf(stringVector, "%s %u %u %u %s", cmd ,&firstParameter, &secondParameter, &thirdParameter, userMsg);
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <parseCommands+0xb8>)
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <parseCommands+0xbc>)
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	; (800108c <parseCommands+0xc0>)
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <parseCommands+0xc4>)
 8000fe2:	4a2c      	ldr	r2, [pc, #176]	; (8001094 <parseCommands+0xc8>)
 8000fe4:	492c      	ldr	r1, [pc, #176]	; (8001098 <parseCommands+0xcc>)
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f004 fc22 	bl	8005830 <siscanf>


	if (strcmp(cmd, "help") == 0){
 8000fec:	492b      	ldr	r1, [pc, #172]	; (800109c <parseCommands+0xd0>)
 8000fee:	4829      	ldr	r0, [pc, #164]	; (8001094 <parseCommands+0xc8>)
 8000ff0:	f7ff f8f6 	bl	80001e0 <strcmp>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d108      	bne.n	800100c <parseCommands+0x40>

		writeMsg(&handlerUSART, "HELP MENU CMD : \n");
 8000ffa:	4929      	ldr	r1, [pc, #164]	; (80010a0 <parseCommands+0xd4>)
 8000ffc:	4829      	ldr	r0, [pc, #164]	; (80010a4 <parseCommands+0xd8>)
 8000ffe:	f003 fd9d 	bl	8004b3c <writeMsg>
		writeMsg(&handlerUSART, "1)  astar #parallel Distance #diagonal Distance  \n");
 8001002:	4929      	ldr	r1, [pc, #164]	; (80010a8 <parseCommands+0xdc>)
 8001004:	4827      	ldr	r0, [pc, #156]	; (80010a4 <parseCommands+0xd8>)
 8001006:	f003 fd99 	bl	8004b3c <writeMsg>

	}



}
 800100a:	e036      	b.n	800107a <parseCommands+0xae>
	}else if (strcmp(cmd, "astar") == 0){
 800100c:	4927      	ldr	r1, [pc, #156]	; (80010ac <parseCommands+0xe0>)
 800100e:	4821      	ldr	r0, [pc, #132]	; (8001094 <parseCommands+0xc8>)
 8001010:	f7ff f8e6 	bl	80001e0 <strcmp>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d12f      	bne.n	800107a <parseCommands+0xae>
		handlerAstarParameters.parallelDistance  = firstParameter;
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <parseCommands+0xc4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <parseCommands+0xe4>)
 8001028:	edc3 7a00 	vstr	s15, [r3]
		handlerAstarParameters.diagonalDiastance = secondParameter;
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <parseCommands+0xc0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <parseCommands+0xe4>)
 800103a:	edc3 7a01 	vstr	s15, [r3, #4]
		writeMsg(&handlerUSART, msg_InsertGrid);
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <parseCommands+0xe8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4619      	mov	r1, r3
 8001044:	4817      	ldr	r0, [pc, #92]	; (80010a4 <parseCommands+0xd8>)
 8001046:	f003 fd79 	bl	8004b3c <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert * for  empty space______________\n");
 800104a:	491b      	ldr	r1, [pc, #108]	; (80010b8 <parseCommands+0xec>)
 800104c:	4815      	ldr	r0, [pc, #84]	; (80010a4 <parseCommands+0xd8>)
 800104e:	f003 fd75 	bl	8004b3c <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert e for  the end space____________\n");
 8001052:	491a      	ldr	r1, [pc, #104]	; (80010bc <parseCommands+0xf0>)
 8001054:	4813      	ldr	r0, [pc, #76]	; (80010a4 <parseCommands+0xd8>)
 8001056:	f003 fd71 	bl	8004b3c <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert s for  the start space__________\n");
 800105a:	4919      	ldr	r1, [pc, #100]	; (80010c0 <parseCommands+0xf4>)
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <parseCommands+0xd8>)
 800105e:	f003 fd6d 	bl	8004b3c <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert # for  obstacule________________\n");
 8001062:	4918      	ldr	r1, [pc, #96]	; (80010c4 <parseCommands+0xf8>)
 8001064:	480f      	ldr	r0, [pc, #60]	; (80010a4 <parseCommands+0xd8>)
 8001066:	f003 fd69 	bl	8004b3c <writeMsg>
		initSerialComunication(&handlerUSART, &handlerPinRx, &handlerPinTx);
 800106a:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <parseCommands+0xfc>)
 800106c:	4917      	ldr	r1, [pc, #92]	; (80010cc <parseCommands+0x100>)
 800106e:	480d      	ldr	r0, [pc, #52]	; (80010a4 <parseCommands+0xd8>)
 8001070:	f002 f806 	bl	8003080 <initSerialComunication>
		flagAstar = SET;
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <parseCommands+0x104>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000384 	.word	0x20000384
 8001088:	20000380 	.word	0x20000380
 800108c:	2000037c 	.word	0x2000037c
 8001090:	20000378 	.word	0x20000378
 8001094:	20000358 	.word	0x20000358
 8001098:	080093f4 	.word	0x080093f4
 800109c:	08009404 	.word	0x08009404
 80010a0:	0800940c 	.word	0x0800940c
 80010a4:	2000022c 	.word	0x2000022c
 80010a8:	08009420 	.word	0x08009420
 80010ac:	08009454 	.word	0x08009454
 80010b0:	200002c0 	.word	0x200002c0
 80010b4:	20000004 	.word	0x20000004
 80010b8:	0800945c 	.word	0x0800945c
 80010bc:	08009494 	.word	0x08009494
 80010c0:	080094cc 	.word	0x080094cc
 80010c4:	08009504 	.word	0x08009504
 80010c8:	2000020c 	.word	0x2000020c
 80010cc:	20000200 	.word	0x20000200
 80010d0:	20000e56 	.word	0x20000e56

080010d4 <usart2Rx_Callback>:



// Interrupcion usart 1
void usart2Rx_Callback(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

	rxData = getRxData();
 80010d8:	f003 fd58 	bl	8004b8c <getRxData>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	4b01      	ldr	r3, [pc, #4]	; (80010e8 <usart2Rx_Callback+0x14>)
 80010e2:	701a      	strb	r2, [r3, #0]

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000356 	.word	0x20000356

080010ec <BasicTimer3_Callback>:

//Interrupción Timer 3
void BasicTimer3_Callback(void){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

	GPIOxTooglePin(&handlerPinA5);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <BasicTimer3_Callback+0x10>)
 80010f2:	f002 fda1 	bl	8003c38 <GPIOxTooglePin>

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200001f4 	.word	0x200001f4

08001100 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <ITM_SendChar+0x48>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <ITM_SendChar+0x48>)
 8001110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001114:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <ITM_SendChar+0x4c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a0c      	ldr	r2, [pc, #48]	; (800114c <ITM_SendChar+0x4c>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001122:	bf00      	nop
 8001124:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0f8      	beq.n	8001124 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001132:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	6013      	str	r3, [r2, #0]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000edfc 	.word	0xe000edfc
 800114c:	e0000e00 	.word	0xe0000e00

08001150 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	return 1;
 8001154:	2301      	movs	r3, #1
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_kill>:

int _kill(int pid, int sig)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800116a:	f003 fdad 	bl	8004cc8 <__errno>
 800116e:	4603      	mov	r3, r0
 8001170:	2216      	movs	r2, #22
 8001172:	601a      	str	r2, [r3, #0]
	return -1;
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_exit>:

void _exit (int status)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ffe7 	bl	8001160 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001192:	e7fe      	b.n	8001192 <_exit+0x12>

08001194 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e00a      	b.n	80011bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011a6:	f3af 8000 	nop.w
 80011aa:	4601      	mov	r1, r0
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	60ba      	str	r2, [r7, #8]
 80011b2:	b2ca      	uxtb	r2, r1
 80011b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbf0      	blt.n	80011a6 <_read+0x12>
	}

return len;
 80011c4:	687b      	ldr	r3, [r7, #4]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e009      	b.n	80011f4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	60ba      	str	r2, [r7, #8]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff89 	bl	8001100 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbf1      	blt.n	80011e0 <_write+0x12>
	}
	return len;
 80011fc:	687b      	ldr	r3, [r7, #4]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_close>:

int _close(int file)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	return -1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800122e:	605a      	str	r2, [r3, #4]
	return 0;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <_isatty>:

int _isatty(int file)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
	return 1;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	return 0;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001270:	480d      	ldr	r0, [pc, #52]	; (80012a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001272:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001274:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <LoopForever+0x6>)
  ldr r1, =_edata
 800127a:	490d      	ldr	r1, [pc, #52]	; (80012b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <LoopForever+0xe>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001290:	4c0a      	ldr	r4, [pc, #40]	; (80012bc <LoopForever+0x16>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800129e:	f003 fd19 	bl	8004cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012a2:	f7ff fce9 	bl	8000c78 <main>

080012a6 <LoopForever>:

LoopForever:
    b LoopForever
 80012a6:	e7fe      	b.n	80012a6 <LoopForever>
  ldr   r0, =_estack
 80012a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80012b4:	08009a78 	.word	0x08009a78
  ldr r2, =_sbss
 80012b8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80012bc:	20011aa0 	.word	0x20011aa0

080012c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC_IRQHandler>
	...

080012c4 <findShorterWay>:
int findShorterWay(char terminalGrid[52][52],
				   char Gridcopy[52][52],
				   float matrixCosts[52][52][6],
				   AStar_distancesHandler *parameters,
				   costChangesAndPos_t *ptrChanges,
				   int shorterWay[100][2]){
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	f507 6477 	add.w	r4, r7, #3952	; 0xf70
 80012d2:	f6a4 7464 	subw	r4, r4, #3940	; 0xf64
 80012d6:	6020      	str	r0, [r4, #0]
 80012d8:	f507 6077 	add.w	r0, r7, #3952	; 0xf70
 80012dc:	f6a0 7068 	subw	r0, r0, #3944	; 0xf68
 80012e0:	6001      	str	r1, [r0, #0]
 80012e2:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80012e6:	f6a1 716c 	subw	r1, r1, #3948	; 0xf6c
 80012ea:	600a      	str	r2, [r1, #0]
 80012ec:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80012f0:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 80012f4:	6013      	str	r3, [r2, #0]

	writeMsg(&handlerAstarUsart, "\n______________Comencemos el viaje_____________\n");
 80012f6:	49b5      	ldr	r1, [pc, #724]	; (80015cc <findShorterWay+0x308>)
 80012f8:	48b5      	ldr	r0, [pc, #724]	; (80015d0 <findShorterWay+0x30c>)
 80012fa:	f003 fc1f 	bl	8004b3c <writeMsg>

	// seteamos las variables locales a usar
	char nineSlotsMatriz[3][3] = {0}; // matriz que tomara una parte de redeableGrid para analisis
 80012fe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8001302:	f103 0318 	add.w	r3, r3, #24
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	721a      	strb	r2, [r3, #8]
	uint8_t shorterWayFound = RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001314:	f102 020f 	add.w	r2, r2, #15
 8001318:	7013      	strb	r3, [r2, #0]
	uint8_t i = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001320:	f102 020e 	add.w	r2, r2, #14
 8001324:	7013      	strb	r3, [r2, #0]
	uint8_t j = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800132c:	f102 020d 	add.w	r2, r2, #13
 8001330:	7013      	strb	r3, [r2, #0]
	int position[2];
	uint8_t numberOfPositions = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001338:	f102 020c 	add.w	r2, r2, #12
 800133c:	7013      	strb	r3, [r2, #0]
	uint8_t counter = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001344:	f102 020b 	add.w	r2, r2, #11
 8001348:	7013      	strb	r3, [r2, #0]
	uint8_t counterStudy = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001350:	f102 020a 	add.w	r2, r2, #10
 8001354:	7013      	strb	r3, [r2, #0]
	//matriz donde se almacenaran en orden ascendente los F cost de las posiciones en estado de Open, esta si tendra un valor maximo y dos columnas, donde
	// Se almacenara el F cost en la primera y el Hcost en la segunda,
	float decisionMatrix[500][4] = {0};
 8001356:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800135a:	f5a3 6376 	sub.w	r3, r3, #3936	; 0xf60
 800135e:	4618      	mov	r0, r3
 8001360:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001364:	461a      	mov	r2, r3
 8001366:	2100      	movs	r1, #0
 8001368:	f003 fce0 	bl	8004d2c <memset>



	// Primero seteamos dentro de los valores de los parametros cuales son los valores de las filas y las columnas
	parameters->numberOfRows    = getRows(terminalGrid);
 800136c:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001370:	f6a3 7364 	subw	r3, r3, #3940	; 0xf64
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	f001 fd63 	bl	8002e40 <getRows>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001382:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	721a      	strb	r2, [r3, #8]
	parameters->numberOfColumns = getColums(terminalGrid);
 800138a:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800138e:	f6a3 7364 	subw	r3, r3, #3940	; 0xf64
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	f001 fd78 	bl	8002e88 <getColums>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80013a0:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	725a      	strb	r2, [r3, #9]

	//Segundo construimos nuestra matriz dinamicamente repartida
	buildMatrixCopy(parameters, terminalGrid, Gridcopy);
 80013a8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80013ac:	f6a3 7268 	subw	r2, r3, #3944	; 0xf68
 80013b0:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80013b4:	f6a3 7164 	subw	r1, r3, #3940	; 0xf64
 80013b8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80013bc:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	6809      	ldr	r1, [r1, #0]
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f001 fce8 	bl	8002d9a <buildMatrixCopy>
	//Variables que dependen del analisis respectivo,y el H cost que es la heuristica el cual es un valor
	// fijo Se tendra entonces una matriz de arrays donde se almacenaran
	// los valores como siguen, [Gcost, Fcost, Hcost]

    //Cuarto, seteamos la matriz heuristica, la cual es la ultima matriz de el bloque de tres de la matriz de costos
    if (setHeuristic(parameters, ptrChanges, matrixCosts, Gridcopy)){
 80013ca:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80013ce:	f6a3 7368 	subw	r3, r3, #3944	; 0xf68
 80013d2:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80013d6:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 80013da:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80013de:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 80013ea:	6809      	ldr	r1, [r1, #0]
 80013ec:	6800      	ldr	r0, [r0, #0]
 80013ee:	f001 fa4b 	bl	8002888 <setHeuristic>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d013      	beq.n	8001420 <findShorterWay+0x15c>
    	// Si estamos aqui todo salio correctamente, el programa puede seguir su curso
    	__NOP();
 80013f8:	bf00      	nop
    	return 0;
    }

    // Seteada la heuristica AQUI COMIENZA EL ALGORITMO A TRABAJAR, seteamos el punto de inicio y lo guardamos dentro de la estructura
    // correspondiente
    if(findStart(Gridcopy, parameters, ptrChanges)){
 80013fa:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80013fe:	f5a3 6177 	sub.w	r1, r3, #3952	; 0xf70
 8001402:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001406:	f6a3 7368 	subw	r3, r3, #3944	; 0xf68
 800140a:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	6809      	ldr	r1, [r1, #0]
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	f001 fc55 	bl	8002cc2 <findStart>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d026      	beq.n	800146c <findShorterWay+0x1a8>
 800141e:	e002      	b.n	8001426 <findShorterWay+0x162>
    	return 0;
 8001420:	2300      	movs	r3, #0
 8001422:	f001 b96e 	b.w	8002702 <findShorterWay+0x143e>
    	// Si estamos aqui es porque se encontro el punto de inicio con exito
    	__NOP();
 8001426:	bf00      	nop
    // Comenzamos analizando los vecinos del punto de inicio, calculando para cada uno de ellos (incluyendo el punto de inicio) el Gcosto
    // y el Fcost, de todos ellos al final se selecciona aquel que tenga el F cost mas pequeño, del siguiente while no se sale hasta que se tenga el
    // Array de patents correspondiente a la ruta mas corta

    //guardamos en la posicion de analisis la posicion de start
    ptrChanges->posAnalisis[0] = ptrChanges->startPos[0];
 8001428:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001430:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	609a      	str	r2, [r3, #8]
    ptrChanges->posAnalisis[1] = ptrChanges->startPos[1];
 8001438:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001440:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	60da      	str	r2, [r3, #12]
    // Definimos tambien el estado de abierto
    ptrChanges->posOpen[0] =  ptrChanges->startPos[0];
 8001448:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001450:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	611a      	str	r2, [r3, #16]
    ptrChanges->posOpen[1] =  ptrChanges->startPos[1];
 8001458:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001460:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	615a      	str	r2, [r3, #20]


    while(!shorterWayFound){
 8001468:	f001 b801 	b.w	800246e <findShorterWay+0x11aa>
    	return 0;
 800146c:	2300      	movs	r3, #0
 800146e:	f001 b948 	b.w	8002702 <findShorterWay+0x143e>

    	// este while actuara como un while de recorrido lineal, donde se busca analizar las posiciones i,j de los aledaños recorriendo cada punto linealmente
    	// al punto de analisis

    	//Actualizamos el punto de analisis para seguir analizando a partir del punto de análisis siguiente
    	ptrChanges->posAnalisis[0] = ptrChanges->posOpen[0];
 8001472:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	609a      	str	r2, [r3, #8]
    	ptrChanges->posAnalisis[1] = ptrChanges->posOpen[1];
 8001482:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60da      	str	r2, [r3, #12]

    	// guardamos la matriz 3x3 de redeableGrid para analisis, para posiciones no correctas se colocan tales posiciones en 0 tipo char
    	// Y para posiciones ya analizadas se coloca una D de done.
    	for(i = 0; i < 3; i++){
 8001492:	2300      	movs	r3, #0
 8001494:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001498:	f102 020e 	add.w	r2, r2, #14
 800149c:	7013      	strb	r3, [r2, #0]
 800149e:	e0ee      	b.n	800167e <findShorterWay+0x3ba>
    		for (j = 0; j < 3; j++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80014a6:	f102 020d 	add.w	r2, r2, #13
 80014aa:	7013      	strb	r3, [r2, #0]
 80014ac:	e0d4      	b.n	8001658 <findShorterWay+0x394>

    			if 	  ((ptrChanges->posAnalisis[0] + i - 1) < 0
 80014ae:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80014ba:	f103 030e 	add.w	r3, r3, #14
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4413      	add	r3, r2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	dd0b      	ble.n	80014de <findShorterWay+0x21a>
    			    || (ptrChanges->posAnalisis[1] + j - 1) < 0) {
 80014c6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80014d2:	f103 030d 	add.w	r3, r3, #13
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4413      	add	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	dc16      	bgt.n	800150c <findShorterWay+0x248>
    				// El primer caso seria cuando el puntero que estudia la matriz esta por fuera del rango , especificamente por detras del rango
    				// donde el indice seria negativo
    				nineSlotsMatriz[i][j] = '0';
 80014de:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80014e2:	f103 030e 	add.w	r3, r3, #14
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80014ec:	f103 030d 	add.w	r3, r3, #13
 80014f0:	7819      	ldrb	r1, [r3, #0]
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 80014fc:	f103 0310 	add.w	r3, r3, #16
 8001500:	443b      	add	r3, r7
 8001502:	440b      	add	r3, r1
 8001504:	3b18      	subs	r3, #24
 8001506:	2230      	movs	r2, #48	; 0x30
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	e09a      	b.n	8001642 <findShorterWay+0x37e>

    			}else if ((ptrChanges->posAnalisis[0] + i - 1) > parameters->numberOfRows - 1
 800150c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001518:	f103 030e 	add.w	r3, r3, #14
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	4413      	add	r3, r2
 8001520:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001524:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	7a12      	ldrb	r2, [r2, #8]
 800152c:	4293      	cmp	r3, r2
 800152e:	dc11      	bgt.n	8001554 <findShorterWay+0x290>
    				||    (ptrChanges->posAnalisis[1] + j - 1) > parameters->numberOfColumns - 1){
 8001530:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800153c:	f103 030d 	add.w	r3, r3, #13
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001548:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	7a52      	ldrb	r2, [r2, #9]
 8001550:	4293      	cmp	r3, r2
 8001552:	dd16      	ble.n	8001582 <findShorterWay+0x2be>
    				// El segundo caso seria cuando el puntero que estudia la matriz esta por fuera del rango, especificamente por delante
    				// del rango donde el indice seria mayor al limite superior del numero de filas o columnas restado uno.
    				nineSlotsMatriz[i][j] = '0';
 8001554:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001558:	f103 030e 	add.w	r3, r3, #14
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001562:	f103 030d 	add.w	r3, r3, #13
 8001566:	7819      	ldrb	r1, [r3, #0]
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8001572:	f103 0310 	add.w	r3, r3, #16
 8001576:	443b      	add	r3, r7
 8001578:	440b      	add	r3, r1
 800157a:	3b18      	subs	r3, #24
 800157c:	2230      	movs	r2, #48	; 0x30
 800157e:	701a      	strb	r2, [r3, #0]
 8001580:	e05f      	b.n	8001642 <findShorterWay+0x37e>
    			}else if(i == 1 && j == 1){
 8001582:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001586:	f103 030e 	add.w	r3, r3, #14
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d121      	bne.n	80015d4 <findShorterWay+0x310>
 8001590:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001594:	f103 030d 	add.w	r3, r3, #13
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d11a      	bne.n	80015d4 <findShorterWay+0x310>
    				// Este caso corresponde con el punto de analisis , este caso no lo queremos estudiar ya que ya estaria estudiado como tal,
    				// queremos es solo estudiar sus aledanios, por lo que en esta posición colocaremos una 'P' como de Point
    				nineSlotsMatriz[i][j] = 'P';
 800159e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80015a2:	f103 030e 	add.w	r3, r3, #14
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80015ac:	f103 030d 	add.w	r3, r3, #13
 80015b0:	7819      	ldrb	r1, [r3, #0]
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 80015bc:	f103 0310 	add.w	r3, r3, #16
 80015c0:	443b      	add	r3, r7
 80015c2:	440b      	add	r3, r1
 80015c4:	3b18      	subs	r3, #24
 80015c6:	2250      	movs	r2, #80	; 0x50
 80015c8:	701a      	strb	r2, [r3, #0]
 80015ca:	e03a      	b.n	8001642 <findShorterWay+0x37e>
 80015cc:	0800953c 	.word	0x0800953c
 80015d0:	20000e58 	.word	0x20000e58
    			}else{
    				// Este ultimo caso donde no se cumple lo anterior  simplemente copiamos exactamente lo mismo que aparece en la matriz de caracteres
    				nineSlotsMatriz[i][j] = Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1];
 80015d4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80015e0:	f103 030e 	add.w	r3, r3, #14
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	2334      	movs	r3, #52	; 0x34
 80015ec:	fb02 f303 	mul.w	r3, r2, r3
 80015f0:	3b34      	subs	r3, #52	; 0x34
 80015f2:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80015f6:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	18d0      	adds	r0, r2, r3
 80015fe:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800160a:	f103 030d 	add.w	r3, r3, #13
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4413      	add	r3, r2
 8001612:	3b01      	subs	r3, #1
 8001614:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001618:	f102 020e 	add.w	r2, r2, #14
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	f507 51fb 	add.w	r1, r7, #8032	; 0x1f60
 8001622:	f101 010d 	add.w	r1, r1, #13
 8001626:	7809      	ldrb	r1, [r1, #0]
 8001628:	5cc0      	ldrb	r0, [r0, r3]
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8001634:	f103 0310 	add.w	r3, r3, #16
 8001638:	443b      	add	r3, r7
 800163a:	440b      	add	r3, r1
 800163c:	3b18      	subs	r3, #24
 800163e:	4602      	mov	r2, r0
 8001640:	701a      	strb	r2, [r3, #0]
    		for (j = 0; j < 3; j++){
 8001642:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001646:	f103 030d 	add.w	r3, r3, #13
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001652:	f102 020d 	add.w	r2, r2, #13
 8001656:	7013      	strb	r3, [r2, #0]
 8001658:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800165c:	f103 030d 	add.w	r3, r3, #13
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b02      	cmp	r3, #2
 8001664:	f67f af23 	bls.w	80014ae <findShorterWay+0x1ea>
    	for(i = 0; i < 3; i++){
 8001668:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800166c:	f103 030e 	add.w	r3, r3, #14
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001678:	f102 020e 	add.w	r2, r2, #14
 800167c:	7013      	strb	r3, [r2, #0]
 800167e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001682:	f103 030e 	add.w	r3, r3, #14
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b02      	cmp	r3, #2
 800168a:	f67f af09 	bls.w	80014a0 <findShorterWay+0x1dc>
    	// Esta matriz, Se estudiaran los siguientes casos:

    	// Imprimimos la matriz a estudiar

    	// Imprimimos el mensaje de el estudio en el que estamos
    	sprintf (buffer,"\n__________ESTUDIO NUMERO %u__________\n", counterStudy);
 800168e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001692:	f103 030a 	add.w	r3, r3, #10
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	49c9      	ldr	r1, [pc, #804]	; (80019c0 <findShorterWay+0x6fc>)
 800169c:	48c9      	ldr	r0, [pc, #804]	; (80019c4 <findShorterWay+0x700>)
 800169e:	f004 f8a7 	bl	80057f0 <siprintf>
    	writeMsg(&handlerAstarUsart, buffer);
 80016a2:	49c8      	ldr	r1, [pc, #800]	; (80019c4 <findShorterWay+0x700>)
 80016a4:	48c8      	ldr	r0, [pc, #800]	; (80019c8 <findShorterWay+0x704>)
 80016a6:	f003 fa49 	bl	8004b3c <writeMsg>

    	// Imprimimos la matriz 3x3 a estudiar
    	for(i = 0; i < 3; i++){
 80016aa:	2300      	movs	r3, #0
 80016ac:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80016b0:	f102 020e 	add.w	r2, r2, #14
 80016b4:	7013      	strb	r3, [r2, #0]
 80016b6:	e040      	b.n	800173a <findShorterWay+0x476>
			for (j = 0; j < 3; j++){
 80016b8:	2300      	movs	r3, #0
 80016ba:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80016be:	f102 020d 	add.w	r2, r2, #13
 80016c2:	7013      	strb	r3, [r2, #0]
 80016c4:	e023      	b.n	800170e <findShorterWay+0x44a>
				writeChar(&handlerAstarUsart, nineSlotsMatriz[i][j]);
 80016c6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80016ca:	f103 030e 	add.w	r3, r3, #14
 80016ce:	781a      	ldrb	r2, [r3, #0]
 80016d0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80016d4:	f103 030d 	add.w	r3, r3, #13
 80016d8:	7819      	ldrb	r1, [r3, #0]
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 80016e4:	f103 0310 	add.w	r3, r3, #16
 80016e8:	443b      	add	r3, r7
 80016ea:	440b      	add	r3, r1
 80016ec:	3b18      	subs	r3, #24
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	48b5      	ldr	r0, [pc, #724]	; (80019c8 <findShorterWay+0x704>)
 80016f4:	f003 fa0a 	bl	8004b0c <writeChar>
			for (j = 0; j < 3; j++){
 80016f8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80016fc:	f103 030d 	add.w	r3, r3, #13
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001708:	f102 020d 	add.w	r2, r2, #13
 800170c:	7013      	strb	r3, [r2, #0]
 800170e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001712:	f103 030d 	add.w	r3, r3, #13
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d9d4      	bls.n	80016c6 <findShorterWay+0x402>
			}
			writeChar(&handlerAstarUsart, '\r');
 800171c:	210d      	movs	r1, #13
 800171e:	48aa      	ldr	r0, [pc, #680]	; (80019c8 <findShorterWay+0x704>)
 8001720:	f003 f9f4 	bl	8004b0c <writeChar>
    	for(i = 0; i < 3; i++){
 8001724:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001728:	f103 030e 	add.w	r3, r3, #14
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001734:	f102 020e 	add.w	r2, r2, #14
 8001738:	7013      	strb	r3, [r2, #0]
 800173a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800173e:	f103 030e 	add.w	r3, r3, #14
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d9b7      	bls.n	80016b8 <findShorterWay+0x3f4>
    	}

    	writeChar(&handlerAstarUsart, '\r');
 8001748:	210d      	movs	r1, #13
 800174a:	489f      	ldr	r0, [pc, #636]	; (80019c8 <findShorterWay+0x704>)
 800174c:	f003 f9de 	bl	8004b0c <writeChar>

    	// Imprimimos el estado actual de la matriz copia
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8001750:	2300      	movs	r3, #0
 8001752:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001756:	f102 0209 	add.w	r2, r2, #9
 800175a:	7013      	strb	r3, [r2, #0]
 800175c:	e01c      	b.n	8001798 <findShorterWay+0x4d4>
    			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 800175e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001762:	f103 0309 	add.w	r3, r3, #9
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2234      	movs	r2, #52	; 0x34
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001772:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	4413      	add	r3, r2
 800177a:	4619      	mov	r1, r3
 800177c:	4892      	ldr	r0, [pc, #584]	; (80019c8 <findShorterWay+0x704>)
 800177e:	f003 f9dd 	bl	8004b3c <writeMsg>
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8001782:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001786:	f103 0309 	add.w	r3, r3, #9
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001792:	f102 0209 	add.w	r2, r2, #9
 8001796:	7013      	strb	r3, [r2, #0]
 8001798:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800179c:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	7a1b      	ldrb	r3, [r3, #8]
 80017a4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80017a8:	f102 0209 	add.w	r2, r2, #9
 80017ac:	7812      	ldrb	r2, [r2, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d3d5      	bcc.n	800175e <findShorterWay+0x49a>
		}
    	// Escribimos enter para tener todo bien espaciado
    	writeChar(&handlerAstarUsart, '\r');
 80017b2:	210d      	movs	r1, #13
 80017b4:	4884      	ldr	r0, [pc, #528]	; (80019c8 <findShorterWay+0x704>)
 80017b6:	f003 f9a9 	bl	8004b0c <writeChar>


    	for(i = 0; i < 3; i++){
 80017ba:	2300      	movs	r3, #0
 80017bc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80017c0:	f102 020e 	add.w	r2, r2, #14
 80017c4:	7013      	strb	r3, [r2, #0]
 80017c6:	e33c      	b.n	8001e42 <findShorterWay+0xb7e>
			for (j = 0; j < 3; j++){
 80017c8:	2300      	movs	r3, #0
 80017ca:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80017ce:	f102 020d 	add.w	r2, r2, #13
 80017d2:	7013      	strb	r3, [r2, #0]
 80017d4:	e319      	b.n	8001e0a <findShorterWay+0xb46>
				switch (nineSlotsMatriz[i][j]) {
 80017d6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80017da:	f103 030e 	add.w	r3, r3, #14
 80017de:	781a      	ldrb	r2, [r3, #0]
 80017e0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80017e4:	f103 030d 	add.w	r3, r3, #13
 80017e8:	7819      	ldrb	r1, [r3, #0]
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 80017f4:	f103 0310 	add.w	r3, r3, #16
 80017f8:	443b      	add	r3, r7
 80017fa:	440b      	add	r3, r1
 80017fc:	3b18      	subs	r3, #24
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b73      	cmp	r3, #115	; 0x73
 8001802:	d075      	beq.n	80018f0 <findShorterWay+0x62c>
 8001804:	2b73      	cmp	r3, #115	; 0x73
 8001806:	f300 82eb 	bgt.w	8001de0 <findShorterWay+0xb1c>
 800180a:	2b50      	cmp	r3, #80	; 0x50
 800180c:	dc66      	bgt.n	80018dc <findShorterWay+0x618>
 800180e:	2b23      	cmp	r3, #35	; 0x23
 8001810:	f2c0 82e6 	blt.w	8001de0 <findShorterWay+0xb1c>
 8001814:	3b23      	subs	r3, #35	; 0x23
 8001816:	2b2d      	cmp	r3, #45	; 0x2d
 8001818:	f200 82e2 	bhi.w	8001de0 <findShorterWay+0xb1c>
 800181c:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <findShorterWay+0x560>)
 800181e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001822:	bf00      	nop
 8001824:	080018e5 	.word	0x080018e5
 8001828:	08001de1 	.word	0x08001de1
 800182c:	08001de1 	.word	0x08001de1
 8001830:	08001de1 	.word	0x08001de1
 8001834:	08001de1 	.word	0x08001de1
 8001838:	08001de1 	.word	0x08001de1
 800183c:	08001de1 	.word	0x08001de1
 8001840:	08001af3 	.word	0x08001af3
 8001844:	08001de1 	.word	0x08001de1
 8001848:	08001de1 	.word	0x08001de1
 800184c:	08001de1 	.word	0x08001de1
 8001850:	08001de1 	.word	0x08001de1
 8001854:	08001de1 	.word	0x08001de1
 8001858:	080018ed 	.word	0x080018ed
 800185c:	08001de1 	.word	0x08001de1
 8001860:	08001de1 	.word	0x08001de1
 8001864:	08001de1 	.word	0x08001de1
 8001868:	08001de1 	.word	0x08001de1
 800186c:	08001de1 	.word	0x08001de1
 8001870:	08001de1 	.word	0x08001de1
 8001874:	08001de1 	.word	0x08001de1
 8001878:	08001de1 	.word	0x08001de1
 800187c:	08001de1 	.word	0x08001de1
 8001880:	08001de1 	.word	0x08001de1
 8001884:	08001de1 	.word	0x08001de1
 8001888:	08001de1 	.word	0x08001de1
 800188c:	08001de1 	.word	0x08001de1
 8001890:	08001de1 	.word	0x08001de1
 8001894:	08001de1 	.word	0x08001de1
 8001898:	08001de1 	.word	0x08001de1
 800189c:	08001de1 	.word	0x08001de1
 80018a0:	08001de1 	.word	0x08001de1
 80018a4:	08001de1 	.word	0x08001de1
 80018a8:	080018e9 	.word	0x080018e9
 80018ac:	08001de1 	.word	0x08001de1
 80018b0:	08001de1 	.word	0x08001de1
 80018b4:	08001de1 	.word	0x08001de1
 80018b8:	08001de1 	.word	0x08001de1
 80018bc:	08001de1 	.word	0x08001de1
 80018c0:	08001de1 	.word	0x08001de1
 80018c4:	08001de1 	.word	0x08001de1
 80018c8:	08001de1 	.word	0x08001de1
 80018cc:	08001de1 	.word	0x08001de1
 80018d0:	08001de1 	.word	0x08001de1
 80018d4:	080018f9 	.word	0x080018f9
 80018d8:	080018f5 	.word	0x080018f5
 80018dc:	2b65      	cmp	r3, #101	; 0x65
 80018de:	f000 8256 	beq.w	8001d8e <findShorterWay+0xaca>
 80018e2:	e27d      	b.n	8001de0 <findShorterWay+0xb1c>
					case '#':{
						// El primer caso seria cuando el puntero Que estudia a la matriz 3x3 corresponde con un obstaculo, tal pisicion simpkemente se
						//ignora
						// No se hace nada ya que una posicion se obstaculo no se analiza
						__NOP();
 80018e4:	bf00      	nop
						break;
 80018e6:	e27e      	b.n	8001de6 <findShorterWay+0xb22>
					}case 'D':{
						// El segundo caso seria cuando el puntero que estudia la matriz corresponde con un punto ya cerrado o ya pasado a la lista de
						// posiciones ya analizadas, por lo que tampoco se hace nada con este caso,
						__NOP();
 80018e8:	bf00      	nop
						break;
 80018ea:	e27c      	b.n	8001de6 <findShorterWay+0xb22>
					}case '0':{
						// El tercer caso seria cuando el puntero que estudia la matriz corresponde con un punto 0 de tipo char que indica que
						// es una posicion por fuera del rango, por lo que tampoco se hace nada con este caso,
						__NOP();
 80018ec:	bf00      	nop
						break;
 80018ee:	e27a      	b.n	8001de6 <findShorterWay+0xb22>
					}case 's':{
						// El cuarto caso seria cuando el puntero señala la posicion de start por lo que tampoco se hace nada con este caso,
						__NOP();
 80018f0:	bf00      	nop
						break;
 80018f2:	e278      	b.n	8001de6 <findShorterWay+0xb22>
					}case 'P':{
						// El quinto caso seria cuando el puntero señala la posicion de analisis, dentro del analisis no queremos
						// que este se analice a si mismo, por lo que ignoramos este punto, solo nos intrresan sus aledanios
						__NOP();
 80018f4:	bf00      	nop
						break;
 80018f6:	e276      	b.n	8001de6 <findShorterWay+0xb22>
					}case 'O':{
						// El Sexto caso nos encontramos con un estado Open , por lo que tenemos que recalcular para el punto de
						// analisis el Gcost y el Fcost
						position[0] = i;
 80018f8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80018fc:	f103 030e 	add.w	r3, r3, #14
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001906:	f102 0210 	add.w	r2, r2, #16
 800190a:	6013      	str	r3, [r2, #0]
						position[1] = j;
 800190c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001910:	f103 030d 	add.w	r3, r3, #13
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800191a:	f102 0214 	add.w	r2, r2, #20
 800191e:	6013      	str	r3, [r2, #0]
						// Como la posicion estudiada esta en estado de open , se debe volver a calcular el G cost y el fcost correspondiente
						// a la posicion opened con respecto al punto de analisis
						ptrChanges->Fcost = setFcost(parameters, ptrChanges, position, matrixCosts);
 8001920:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001924:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8001928:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800192c:	f102 0210 	add.w	r2, r2, #16
 8001930:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8001934:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 800193e:	6809      	ldr	r1, [r1, #0]
 8001940:	6800      	ldr	r0, [r0, #0]
 8001942:	f001 f950 	bl	8002be6 <setFcost>
 8001946:	eef0 7a40 	vmov.f32	s15, s0
 800194a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	edc3 7a01 	vstr	s15, [r3, #4]
						// Estudiamos si el nuevo FCost es mayor menor o igual al Fcost que ya tiene el estado abierto
						if (ptrChanges->Fcost >= matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]){
 8001954:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	ed93 7a01 	vldr	s14, [r3, #4]
 800195e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800196a:	f103 030e 	add.w	r3, r3, #14
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4413      	add	r3, r2
 8001972:	461a      	mov	r2, r3
 8001974:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001978:	fb02 f303 	mul.w	r3, r2, r3
 800197c:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8001980:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001984:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	18d1      	adds	r1, r2, r3
 800198c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001998:	f103 030d 	add.w	r3, r3, #13
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	1e5a      	subs	r2, r3, #1
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	3304      	adds	r3, #4
 80019ae:	edd3 7a00 	vldr	s15, [r3]
 80019b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ba:	db07      	blt.n	80019cc <findShorterWay+0x708>
							// Si el Fcost es mayor o igual a el anteriormente calculado, Significa que el Gcost calculado es el mismo o mayor,
							//por lo que no se actualiza ni el G cost y el F cost ni el parent
							__NOP();
 80019bc:	bf00      	nop
							// Si si actualizamos la posicion abierta respectiva, tambien se debe actualizar en la matriz de decisión el F cost
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs

						}
						break;
 80019be:	e212      	b.n	8001de6 <findShorterWay+0xb22>
 80019c0:	08009570 	.word	0x08009570
 80019c4:	20000f04 	.word	0x20000f04
 80019c8:	20000e58 	.word	0x20000e58
							updateGcost(parameters, ptrChanges, position, matrixCosts);
 80019cc:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80019d0:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 80019d4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80019d8:	f102 0210 	add.w	r2, r2, #16
 80019dc:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80019e0:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 80019ea:	6809      	ldr	r1, [r1, #0]
 80019ec:	6800      	ldr	r0, [r0, #0]
 80019ee:	f000 feed 	bl	80027cc <updateGcost>
							updateFcost(parameters, ptrChanges, position, matrixCosts);
 80019f2:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80019f6:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 80019fa:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80019fe:	f102 0210 	add.w	r2, r2, #16
 8001a02:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8001a06:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8001a10:	6809      	ldr	r1, [r1, #0]
 8001a12:	6800      	ldr	r0, [r0, #0]
 8001a14:	f000 ff08 	bl	8002828 <updateFcost>
							updateParent(ptrChanges, position, matrixCosts);
 8001a18:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001a1c:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8001a20:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 8001a24:	f101 0110 	add.w	r1, r1, #16
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	f000 fe74 	bl	800271c <updateParent>
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8001a34:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001a40:	f103 030e 	add.w	r3, r3, #14
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8001a56:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001a5a:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	18d0      	adds	r0, r2, r3
 8001a62:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001a6e:	f103 030d 	add.w	r3, r3, #13
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4413      	add	r3, r2
 8001a76:	1e5a      	subs	r2, r3, #1
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8001a78:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6899      	ldr	r1, [r3, #8]
 8001a80:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001a84:	f103 030e 	add.w	r3, r3, #14
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	440b      	add	r3, r1
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8001a9a:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8001a9e:	f6a1 716c 	subw	r1, r1, #3948	; 0xf6c
 8001aa2:	6809      	ldr	r1, [r1, #0]
 8001aa4:	18cc      	adds	r4, r1, r3
 8001aa6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68d9      	ldr	r1, [r3, #12]
 8001aae:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001ab2:	f103 030d 	add.w	r3, r3, #13
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	440b      	add	r3, r1
 8001aba:	1e59      	subs	r1, r3, #1
 8001abc:	460b      	mov	r3, r1
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	440b      	add	r3, r1
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4423      	add	r3, r4
 8001ac6:	3314      	adds	r3, #20
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad0:	ee17 4a90 	vmov	r4, s15
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4403      	add	r3, r0
 8001ade:	3304      	adds	r3, #4
 8001ae0:	681a      	ldr	r2, [r3, #0]
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8001ae2:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001ae6:	f5a3 6176 	sub.w	r1, r3, #3936	; 0xf60
 8001aea:	0123      	lsls	r3, r4, #4
 8001aec:	440b      	add	r3, r1
 8001aee:	601a      	str	r2, [r3, #0]
						break;
 8001af0:	e179      	b.n	8001de6 <findShorterWay+0xb22>
					}case '*':{
						// El séptimo caso seria cuando el puntero que estudia la matriz corresponde con un punto '*' que corresponde con un
						// espacio no estudiado, por lo que simplemente se setea sobre estos nuevos puntos su Gcost y su Fcost, incluyendo el parent
						position[0] = i;
 8001af2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001af6:	f103 030e 	add.w	r3, r3, #14
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001b00:	f102 0210 	add.w	r2, r2, #16
 8001b04:	6013      	str	r3, [r2, #0]
						position[1] = j;
 8001b06:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001b0a:	f103 030d 	add.w	r3, r3, #13
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001b14:	f102 0214 	add.w	r2, r2, #20
 8001b18:	6013      	str	r3, [r2, #0]
						updateGcost(parameters, ptrChanges, position, matrixCosts);
 8001b1a:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001b1e:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8001b22:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001b26:	f102 0210 	add.w	r2, r2, #16
 8001b2a:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8001b2e:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8001b38:	6809      	ldr	r1, [r1, #0]
 8001b3a:	6800      	ldr	r0, [r0, #0]
 8001b3c:	f000 fe46 	bl	80027cc <updateGcost>
						updateFcost(parameters, ptrChanges, position, matrixCosts);
 8001b40:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001b44:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8001b48:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001b4c:	f102 0210 	add.w	r2, r2, #16
 8001b50:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8001b54:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8001b5e:	6809      	ldr	r1, [r1, #0]
 8001b60:	6800      	ldr	r0, [r0, #0]
 8001b62:	f000 fe61 	bl	8002828 <updateFcost>
						updateParent(ptrChanges, position, matrixCosts);
 8001b66:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001b6a:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8001b6e:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 8001b72:	f101 0110 	add.w	r1, r1, #16
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	f000 fdcd 	bl	800271c <updateParent>

						// Es conveniente que guardemos tambien esta información dentro de readableGrid porque se necesita luego almacenar esta ifnromacion ya
						// estudiada
						Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1] = 'O';
 8001b82:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001b8e:	f103 030e 	add.w	r3, r3, #14
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4413      	add	r3, r2
 8001b96:	461a      	mov	r2, r3
 8001b98:	2334      	movs	r3, #52	; 0x34
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	3b34      	subs	r3, #52	; 0x34
 8001ba0:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001ba4:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	441a      	add	r2, r3
 8001bac:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68d9      	ldr	r1, [r3, #12]
 8001bb4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001bb8:	f103 030d 	add.w	r3, r3, #13
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	214f      	movs	r1, #79	; 0x4f
 8001bc4:	54d1      	strb	r1, [r2, r3]

						// Como se crearon nuevos estados abiertos , se almacena dentro de la matriz de decicion el Fcost, el H cost, y la posicion
						// de cada punto analizado
						// se almacena el Fcost
						decisionMatrix[counter][0] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1];
 8001bc6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001bd2:	f103 030e 	add.w	r3, r3, #14
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001be0:	fb02 f303 	mul.w	r3, r2, r3
 8001be4:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8001be8:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001bec:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	18d1      	adds	r1, r2, r3
 8001bf4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001c00:	f103 030d 	add.w	r3, r3, #13
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	1e5a      	subs	r2, r3, #1
 8001c0a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001c0e:	f103 030b 	add.w	r3, r3, #11
 8001c12:	7818      	ldrb	r0, [r3, #0]
 8001c14:	4613      	mov	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	3304      	adds	r3, #4
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001c26:	f5a3 6176 	sub.w	r1, r3, #3936	; 0xf60
 8001c2a:	0103      	lsls	r3, r0, #4
 8001c2c:	440b      	add	r3, r1
 8001c2e:	601a      	str	r2, [r3, #0]
						// Se almacena el H cost
						decisionMatrix[counter][1] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][2];
 8001c30:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001c3c:	f103 030e 	add.w	r3, r3, #14
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	461a      	mov	r2, r3
 8001c46:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8001c52:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001c56:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	18d1      	adds	r1, r2, r3
 8001c5e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001c6a:	f103 030d 	add.w	r3, r3, #13
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4413      	add	r3, r2
 8001c72:	1e5a      	subs	r2, r3, #1
 8001c74:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001c78:	f103 030b 	add.w	r3, r3, #11
 8001c7c:	7818      	ldrb	r0, [r3, #0]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	440b      	add	r3, r1
 8001c88:	3308      	adds	r3, #8
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001c90:	f5a3 6176 	sub.w	r1, r3, #3936	; 0xf60
 8001c94:	0103      	lsls	r3, r0, #4
 8001c96:	440b      	add	r3, r1
 8001c98:	3304      	adds	r3, #4
 8001c9a:	601a      	str	r2, [r3, #0]
						// Se almacena la posicion i
						decisionMatrix[counter][2] = ptrChanges->posAnalisis[0] + i - 1;
 8001c9c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001ca8:	f103 030e 	add.w	r3, r3, #14
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	1e5a      	subs	r2, r3, #1
 8001cb2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001cb6:	f103 030b 	add.w	r3, r3, #11
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	ee07 2a90 	vmov	s15, r2
 8001cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc4:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001cc8:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4413      	add	r3, r2
 8001cd0:	3308      	adds	r3, #8
 8001cd2:	edc3 7a00 	vstr	s15, [r3]
						// Se almacena la posicion j
						decisionMatrix[counter][3] = ptrChanges->posAnalisis[1] + j - 1;
 8001cd6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001ce2:	f103 030d 	add.w	r3, r3, #13
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	1e5a      	subs	r2, r3, #1
 8001cec:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001cf0:	f103 030b 	add.w	r3, r3, #11
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	ee07 2a90 	vmov	s15, r2
 8001cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfe:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001d02:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	4413      	add	r3, r2
 8001d0a:	330c      	adds	r3, #12
 8001d0c:	edc3 7a00 	vstr	s15, [r3]

						// Guardamos en la matris grande de costos en la ultima matriz el valor del counter asignado a la posición
						matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5] = counter;
 8001d10:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001d1c:	f103 030e 	add.w	r3, r3, #14
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	461a      	mov	r2, r3
 8001d26:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8001d32:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001d36:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	18d1      	adds	r1, r2, r3
 8001d3e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001d4a:	f103 030d 	add.w	r3, r3, #13
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	1e5a      	subs	r2, r3, #1
 8001d54:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001d58:	f103 030b 	add.w	r3, r3, #11
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	440b      	add	r3, r1
 8001d70:	3314      	adds	r3, #20
 8001d72:	edc3 7a00 	vstr	s15, [r3]

						// Aumentamos el contador ya que cada posicion estudiada aqui es una nueva posicion que entra a estado open
						counter++;
 8001d76:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001d7a:	f103 030b 	add.w	r3, r3, #11
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	3301      	adds	r3, #1
 8001d82:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001d86:	f102 020b 	add.w	r2, r2, #11
 8001d8a:	7013      	strb	r3, [r2, #0]

						break;
 8001d8c:	e02b      	b.n	8001de6 <findShorterWay+0xb22>
					}case 'e':{
						// El octavo caso Sería cuando se encuentra la 'e' de end , donde ya logramos despues de viajar a traves de la maya llegar
						// hasta el punto final, aqui para economizar recursos simplemente haremos que el ciclo se detenga y de parent al end le asignamos
						// el ultimo
						position[0] = i;
 8001d8e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001d92:	f103 030e 	add.w	r3, r3, #14
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001d9c:	f102 0210 	add.w	r2, r2, #16
 8001da0:	6013      	str	r3, [r2, #0]
						position[1] = j;
 8001da2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001da6:	f103 030d 	add.w	r3, r3, #13
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001db0:	f102 0214 	add.w	r2, r2, #20
 8001db4:	6013      	str	r3, [r2, #0]
						updateParent(ptrChanges, position, matrixCosts);
 8001db6:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001dba:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8001dbe:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 8001dc2:	f101 0110 	add.w	r1, r1, #16
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	f000 fca5 	bl	800271c <updateParent>
						shorterWayFound = SET;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001dd8:	f102 020f 	add.w	r2, r2, #15
 8001ddc:	7013      	strb	r3, [r2, #0]
						break;
 8001dde:	e002      	b.n	8001de6 <findShorterWay+0xb22>
					}
					default:{
						// Si se llega hasta aca es porque hay un caracter no permitido dentro de la malla y se debe parar la ejecucion del programa
						return 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f000 bc8e 	b.w	8002702 <findShorterWay+0x143e>
						break;
					}
				}// Termino del switch case

				if (shorterWayFound){
 8001de6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001dea:	f103 030f 	add.w	r3, r3, #15
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d113      	bne.n	8001e1c <findShorterWay+0xb58>
			for (j = 0; j < 3; j++){
 8001df4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001df8:	f103 030d 	add.w	r3, r3, #13
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001e04:	f102 020d 	add.w	r2, r2, #13
 8001e08:	7013      	strb	r3, [r2, #0]
 8001e0a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001e0e:	f103 030d 	add.w	r3, r3, #13
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	f67f acde 	bls.w	80017d6 <findShorterWay+0x512>
 8001e1a:	e000      	b.n	8001e1e <findShorterWay+0xb5a>
					break;
 8001e1c:	bf00      	nop
				}

			}// Termino del ciclo for
			if (shorterWayFound){
 8001e1e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001e22:	f103 030f 	add.w	r3, r3, #15
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d113      	bne.n	8001e54 <findShorterWay+0xb90>
    	for(i = 0; i < 3; i++){
 8001e2c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001e30:	f103 030e 	add.w	r3, r3, #14
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001e3c:	f102 020e 	add.w	r2, r2, #14
 8001e40:	7013      	strb	r3, [r2, #0]
 8001e42:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001e46:	f103 030e 	add.w	r3, r3, #14
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	f67f acbb 	bls.w	80017c8 <findShorterWay+0x504>
 8001e52:	e000      	b.n	8001e56 <findShorterWay+0xb92>
				break;
 8001e54:	bf00      	nop
    	// el que tiene el Fcost mas pequeño, y en caso de Fcost iguales desempata el que tenga una heuristica o Hcost menor
    	// Volvemos a recorrer los aledanios para seleccionar la nueva posicion, tal posicion pasara a ser el nuevo punto de analisis, el resto
    	// seran solo puntos en estado Open, y el antiguo punto de analisis sera ahora un punto Done, Para ello usaremos la funcion findeLesserValue
    	// Esta funcion almacena dentro de la estructura costChangesAndPos_t los valores de la pisicion del F cost mas pequeño, en el caso de que haya
    	// mas de uno igual, se alzará una bandera que indica que esto ocurrio, por lo que internamente el tambien analiza cual es la heuristica
    	if (!shorterWayFound){
 8001e56:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001e5a:	f103 030f 	add.w	r3, r3, #15
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f040 8272 	bne.w	800234a <findShorterWay+0x1086>
			findLesserValue(ptrChanges, decisionMatrix, counter);
 8001e66:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001e6a:	f103 030b 	add.w	r3, r3, #11
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	f107 0310 	add.w	r3, r7, #16
 8001e74:	4619      	mov	r1, r3
 8001e76:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	f001 f81a 	bl	8002eb4 <findLesserValue>
			// A partir de aqui tendriamos la posicion del F cost mas pequeño, pero primero se compueba de que si depronto hubo un F cost igual
			if (ptrChanges->equalFcost){
 8001e80:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 812c 	beq.w	80020e8 <findShorterWay+0xe24>
				// Si estamos aqui es porque si hubo mas de un Fcost igual , por lo que se busca es la posicion del Hcost mas pequeño como la nueva posicion
				// que tomara el nuevo papel de punto de analisis, y el que fue el punto de analisis sera ahor aun estado Done o 'D'
				// Llevamos la posicion de analisis al estado cerrado
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8001e90:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8001ea0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8001eb0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2334      	movs	r3, #52	; 0x34
 8001ebc:	fb02 f303 	mul.w	r3, r2, r3
 8001ec0:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001ec4:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	441a      	add	r2, r3
 8001ecc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	5cd3      	ldrb	r3, [r2, r3]
 8001ed6:	2b73      	cmp	r3, #115	; 0x73
 8001ed8:	d101      	bne.n	8001ede <findShorterWay+0xc1a>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8001eda:	bf00      	nop
 8001edc:	e013      	b.n	8001f06 <findShorterWay+0xc42>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8001ede:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2334      	movs	r3, #52	; 0x34
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001ef2:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	441a      	add	r2, r3
 8001efa:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2144      	movs	r1, #68	; 0x44
 8001f04:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserHcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8001f06:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001f12:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	4413      	add	r3, r2
 8001f1a:	3308      	adds	r3, #8
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f24:	ee17 2a90 	vmov	r2, s15
 8001f28:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserHcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8001f30:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f38:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001f3c:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	4413      	add	r3, r2
 8001f44:	330c      	adds	r3, #12
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f4e:	ee17 2a90 	vmov	r2, s15
 8001f52:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001f60:	f102 020e 	add.w	r2, r2, #14
 8001f64:	7013      	strb	r3, [r2, #0]
 8001f66:	e01e      	b.n	8001fa6 <findShorterWay+0xce2>
					decisionMatrix[ptrChanges->lesserHcostPosition][i] = 0;
 8001f68:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f70:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001f74:	f103 030e 	add.w	r3, r3, #14
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001f7e:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8001f82:	0089      	lsls	r1, r1, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 8001f90:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001f94:	f103 030e 	add.w	r3, r3, #14
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001fa0:	f102 020e 	add.w	r2, r2, #14
 8001fa4:	7013      	strb	r3, [r2, #0]
 8001fa6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001faa:	f103 030e 	add.w	r3, r3, #14
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d9d9      	bls.n	8001f68 <findShorterWay+0xca4>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8001fb4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001fc4:	f102 020e 	add.w	r2, r2, #14
 8001fc8:	7013      	strb	r3, [r2, #0]
 8001fca:	e05f      	b.n	800208c <findShorterWay+0xdc8>
					for (j = 0 ; j < 4 ; j++){
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001fd2:	f102 020d 	add.w	r2, r2, #13
 8001fd6:	7013      	strb	r3, [r2, #0]
 8001fd8:	e046      	b.n	8002068 <findShorterWay+0xda4>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 8001fda:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001fde:	f103 030e 	add.w	r3, r3, #14
 8001fe2:	781c      	ldrb	r4, [r3, #0]
 8001fe4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001fe8:	f103 030d 	add.w	r3, r3, #13
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001ff2:	f103 030e 	add.w	r3, r3, #14
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	1e58      	subs	r0, r3, #1
 8001ffa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001ffe:	f103 030d 	add.w	r3, r3, #13
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8002008:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 800200c:	00a4      	lsls	r4, r4, #2
 800200e:	4422      	add	r2, r4
 8002010:	0092      	lsls	r2, r2, #2
 8002012:	440a      	add	r2, r1
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 800201a:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 800201e:	0080      	lsls	r0, r0, #2
 8002020:	4403      	add	r3, r0
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8002028:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800202c:	f103 030e 	add.w	r3, r3, #14
 8002030:	7819      	ldrb	r1, [r3, #0]
 8002032:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002036:	f103 030d 	add.w	r3, r3, #13
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8002040:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8002044:	0089      	lsls	r1, r1, #2
 8002046:	440b      	add	r3, r1
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 8002052:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002056:	f103 030d 	add.w	r3, r3, #13
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	3301      	adds	r3, #1
 800205e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002062:	f102 020d 	add.w	r2, r2, #13
 8002066:	7013      	strb	r3, [r2, #0]
 8002068:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800206c:	f103 030d 	add.w	r3, r3, #13
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d9b1      	bls.n	8001fda <findShorterWay+0xd16>
				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8002076:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800207a:	f103 030e 	add.w	r3, r3, #14
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002086:	f102 020e 	add.w	r2, r2, #14
 800208a:	7013      	strb	r3, [r2, #0]
 800208c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002090:	f103 030e 	add.w	r3, r3, #14
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800209a:	f103 030b 	add.w	r3, r3, #11
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d393      	bcc.n	8001fcc <findShorterWay+0xd08>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 80020a4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80020a8:	f103 030b 	add.w	r3, r3, #11
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80020b4:	f102 020b 	add.w	r2, r2, #11
 80020b8:	7013      	strb	r3, [r2, #0]

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 80020ba:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 80020ca:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	615a      	str	r2, [r3, #20]

				// Resetemos la bandera que nos indica si hay un valor de Fcost igual.
				ptrChanges->equalFcost = RESET;
 80020da:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80020e6:	e124      	b.n	8002332 <findShorterWay+0x106e>

			}else{
				// Si estamos aqui es porque no hubo F costs iguales y se hara lo mismo que en el caso anterior solo que se tendra en cuenta
				// la posicion encontrada del Fcost mas pequeño, ya no del Hcost mas pequeño
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 80020e8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 80020f8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8002108:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	461a      	mov	r2, r3
 8002112:	2334      	movs	r3, #52	; 0x34
 8002114:	fb02 f303 	mul.w	r3, r2, r3
 8002118:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800211c:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	441a      	add	r2, r3
 8002124:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	5cd3      	ldrb	r3, [r2, r3]
 800212e:	2b73      	cmp	r3, #115	; 0x73
 8002130:	d101      	bne.n	8002136 <findShorterWay+0xe72>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8002132:	bf00      	nop
 8002134:	e013      	b.n	800215e <findShorterWay+0xe9a>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8002136:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	461a      	mov	r2, r3
 8002140:	2334      	movs	r3, #52	; 0x34
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800214a:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	441a      	add	r2, r3
 8002152:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2144      	movs	r1, #68	; 0x44
 800215c:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserFcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 800215e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002166:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800216a:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	4413      	add	r3, r2
 8002172:	3308      	adds	r3, #8
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800217c:	ee17 2a90 	vmov	r2, s15
 8002180:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserFcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8002188:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002190:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8002194:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	4413      	add	r3, r2
 800219c:	330c      	adds	r3, #12
 800219e:	edd3 7a00 	vldr	s15, [r3]
 80021a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021a6:	ee17 2a90 	vmov	r2, s15
 80021aa:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 80021b2:	2300      	movs	r3, #0
 80021b4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80021b8:	f102 020e 	add.w	r2, r2, #14
 80021bc:	7013      	strb	r3, [r2, #0]
 80021be:	e01e      	b.n	80021fe <findShorterWay+0xf3a>
					decisionMatrix[ptrChanges->lesserFcostPosition][i] = 0;
 80021c0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021c8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80021cc:	f103 030e 	add.w	r3, r3, #14
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80021d6:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 80021da:	0089      	lsls	r1, r1, #2
 80021dc:	440b      	add	r3, r1
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 80021e8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80021ec:	f103 030e 	add.w	r3, r3, #14
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	3301      	adds	r3, #1
 80021f4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80021f8:	f102 020e 	add.w	r2, r2, #14
 80021fc:	7013      	strb	r3, [r2, #0]
 80021fe:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002202:	f103 030e 	add.w	r3, r3, #14
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d9d9      	bls.n	80021c0 <findShorterWay+0xefc>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 800220c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002214:	b2db      	uxtb	r3, r3
 8002216:	3301      	adds	r3, #1
 8002218:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800221c:	f102 020e 	add.w	r2, r2, #14
 8002220:	7013      	strb	r3, [r2, #0]
 8002222:	e05f      	b.n	80022e4 <findShorterWay+0x1020>
					for (j = 0 ; j < 4 ; j++){
 8002224:	2300      	movs	r3, #0
 8002226:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800222a:	f102 020d 	add.w	r2, r2, #13
 800222e:	7013      	strb	r3, [r2, #0]
 8002230:	e046      	b.n	80022c0 <findShorterWay+0xffc>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 8002232:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002236:	f103 030e 	add.w	r3, r3, #14
 800223a:	781c      	ldrb	r4, [r3, #0]
 800223c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002240:	f103 030d 	add.w	r3, r3, #13
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800224a:	f103 030e 	add.w	r3, r3, #14
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	1e58      	subs	r0, r3, #1
 8002252:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002256:	f103 030d 	add.w	r3, r3, #13
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8002260:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 8002264:	00a4      	lsls	r4, r4, #2
 8002266:	4422      	add	r2, r4
 8002268:	0092      	lsls	r2, r2, #2
 800226a:	440a      	add	r2, r1
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8002272:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 8002276:	0080      	lsls	r0, r0, #2
 8002278:	4403      	add	r3, r0
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8002280:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002284:	f103 030e 	add.w	r3, r3, #14
 8002288:	7819      	ldrb	r1, [r3, #0]
 800228a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800228e:	f103 030d 	add.w	r3, r3, #13
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8002298:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 800229c:	0089      	lsls	r1, r1, #2
 800229e:	440b      	add	r3, r1
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 80022aa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80022ae:	f103 030d 	add.w	r3, r3, #13
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80022ba:	f102 020d 	add.w	r2, r2, #13
 80022be:	7013      	strb	r3, [r2, #0]
 80022c0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80022c4:	f103 030d 	add.w	r3, r3, #13
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d9b1      	bls.n	8002232 <findShorterWay+0xf6e>
				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 80022ce:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80022d2:	f103 030e 	add.w	r3, r3, #14
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80022de:	f102 020e 	add.w	r2, r2, #14
 80022e2:	7013      	strb	r3, [r2, #0]
 80022e4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80022e8:	f103 030e 	add.w	r3, r3, #14
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80022f2:	f103 030b 	add.w	r3, r3, #11
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d393      	bcc.n	8002224 <findShorterWay+0xf60>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 80022fc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002300:	f103 030b 	add.w	r3, r3, #11
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	3b01      	subs	r3, #1
 8002308:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800230c:	f102 020b 	add.w	r2, r2, #11
 8002310:	7013      	strb	r3, [r2, #0]

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8002312:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8002322:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	615a      	str	r2, [r3, #20]

			}

			counterStudy++;
 8002332:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002336:	f103 030a 	add.w	r3, r3, #10
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002342:	f102 020a 	add.w	r2, r2, #10
 8002346:	7013      	strb	r3, [r2, #0]
 8002348:	e091      	b.n	800246e <findShorterWay+0x11aa>
    	}else{
			// Si el programa entra en esta condicion quiere decir que ya se encontro la ruta mas corta y ya es hora de construir la matriz de posiciones
			// donde se almacenara la ruta mas corta
			//buscamos cuantos elementos deberia de tener el arreglo para ello usaremos el siguiente while donde recorreremos desde el end hasta el
			//start
			i = ptrChanges->endPos[0];
 800234a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002356:	f102 020e 	add.w	r2, r2, #14
 800235a:	7013      	strb	r3, [r2, #0]
			j = ptrChanges->endPos[1];
 800235c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002368:	f102 020d 	add.w	r2, r2, #13
 800236c:	7013      	strb	r3, [r2, #0]
			while(Gridcopy[i][j] != 's'){
 800236e:	e068      	b.n	8002442 <findShorterWay+0x117e>
				// Actualizamos a la nueva posición
				position[0] = matrixCosts[i][j][3];
 8002370:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002374:	f103 030e 	add.w	r3, r3, #14
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8002386:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	18d1      	adds	r1, r2, r3
 800238e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002392:	f103 030d 	add.w	r3, r3, #13
 8002396:	781a      	ldrb	r2, [r3, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	330c      	adds	r3, #12
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ac:	ee17 3a90 	vmov	r3, s15
 80023b0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80023b4:	f102 0210 	add.w	r2, r2, #16
 80023b8:	6013      	str	r3, [r2, #0]
				position[1] = matrixCosts[i][j][4];
 80023ba:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80023be:	f103 030e 	add.w	r3, r3, #14
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 80023c8:	fb02 f303 	mul.w	r3, r2, r3
 80023cc:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80023d0:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	18d1      	adds	r1, r2, r3
 80023d8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80023dc:	f103 030d 	add.w	r3, r3, #13
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	3310      	adds	r3, #16
 80023ee:	edd3 7a00 	vldr	s15, [r3]
 80023f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023f6:	ee17 3a90 	vmov	r3, s15
 80023fa:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80023fe:	f102 0214 	add.w	r2, r2, #20
 8002402:	6013      	str	r3, [r2, #0]

				// actualizamos la nueva posición
				i = position[0];
 8002404:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8002408:	f103 0310 	add.w	r3, r3, #16
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002412:	f102 020e 	add.w	r2, r2, #14
 8002416:	7013      	strb	r3, [r2, #0]
				j = position[1];
 8002418:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800241c:	f103 0314 	add.w	r3, r3, #20
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002426:	f102 020d 	add.w	r2, r2, #13
 800242a:	7013      	strb	r3, [r2, #0]

				// incrementamos en uno la cantidad de posiciones a guardar
				numberOfPositions++;
 800242c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002430:	f103 030c 	add.w	r3, r3, #12
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	3301      	adds	r3, #1
 8002438:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800243c:	f102 020c 	add.w	r2, r2, #12
 8002440:	7013      	strb	r3, [r2, #0]
			while(Gridcopy[i][j] != 's'){
 8002442:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002446:	f103 030e 	add.w	r3, r3, #14
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2234      	movs	r2, #52	; 0x34
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8002456:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	441a      	add	r2, r3
 800245e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002462:	f103 030d 	add.w	r3, r3, #13
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	5cd3      	ldrb	r3, [r2, r3]
 800246a:	2b73      	cmp	r3, #115	; 0x73
 800246c:	d180      	bne.n	8002370 <findShorterWay+0x10ac>
    while(!shorterWayFound){
 800246e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002472:	f103 030f 	add.w	r3, r3, #15
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	f43e affa 	beq.w	8001472 <findShorterWay+0x1ae>
		}


    }// final del ciclo While

    writeMsg(&handlerAstarUsart, "\n___________Hemos Encontrado la ruta mas corta______________\n");
 800247e:	49a4      	ldr	r1, [pc, #656]	; (8002710 <findShorterWay+0x144c>)
 8002480:	48a4      	ldr	r0, [pc, #656]	; (8002714 <findShorterWay+0x1450>)
 8002482:	f002 fb5b 	bl	8004b3c <writeMsg>
    writeChar(&handlerAstarUsart, '\r');
 8002486:	210d      	movs	r1, #13
 8002488:	48a2      	ldr	r0, [pc, #648]	; (8002714 <findShorterWay+0x1450>)
 800248a:	f002 fb3f 	bl	8004b0c <writeChar>

    // estando aqui ya solo queda almacenar toda las posiciones parent comenzando desde el end hasta el start, siguendo el parent de cada uno se asegura
    // que lo que se esta almacenando es la ruta mas corta

    //Almacenamos dentro de una de las variables del arreglo AStar_distancesHandler la cantidad de elementos que tiene la matriz de la ruta mas corta
    parameters->numberOfElements = numberOfPositions + 1 ; // Le sumamos uno mas para incluir el punto de inicio
 800248e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002492:	f103 030c 	add.w	r3, r3, #12
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	3301      	adds	r3, #1
 800249a:	b2da      	uxtb	r2, r3
 800249c:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80024a0:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	729a      	strb	r2, [r3, #10]


    i = ptrChanges->endPos[0];
 80024a8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80024b4:	f102 020e 	add.w	r2, r2, #14
 80024b8:	7013      	strb	r3, [r2, #0]
	j = ptrChanges->endPos[1];
 80024ba:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80024c6:	f102 020d 	add.w	r2, r2, #13
 80024ca:	7013      	strb	r3, [r2, #0]

    // Recorremos la matriz e iremos almacenando dentro de este comenzando desde la posicion final y terminando en la posicion inicial
    for (int  k = numberOfPositions; k >= 0 ; k--){
 80024cc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80024d0:	f103 030c 	add.w	r3, r3, #12
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80024da:	f102 0204 	add.w	r2, r2, #4
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	e0d1      	b.n	8002686 <findShorterWay+0x13c2>
    	//Cambiamos la matriz redeableGrid, las posiciones que corresponden a la ruta mas corta por un char 'I',
    	if (Gridcopy[i][j] == 'e'){
 80024e2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80024e6:	f103 030e 	add.w	r3, r3, #14
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2234      	movs	r2, #52	; 0x34
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80024f6:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	441a      	add	r2, r3
 80024fe:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002502:	f103 030d 	add.w	r3, r3, #13
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	5cd3      	ldrb	r3, [r2, r3]
 800250a:	2b65      	cmp	r3, #101	; 0x65
 800250c:	d101      	bne.n	8002512 <findShorterWay+0x124e>
    		// Si estamos aqui es porque no queremos cambiar el char de finalización
    		__NOP();
 800250e:	bf00      	nop
 8002510:	e02c      	b.n	800256c <findShorterWay+0x12a8>
    	}else if (Gridcopy[i][j] == 's'){
 8002512:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002516:	f103 030e 	add.w	r3, r3, #14
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2234      	movs	r2, #52	; 0x34
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8002526:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	441a      	add	r2, r3
 800252e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002532:	f103 030d 	add.w	r3, r3, #13
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	5cd3      	ldrb	r3, [r2, r3]
 800253a:	2b73      	cmp	r3, #115	; 0x73
 800253c:	d101      	bne.n	8002542 <findShorterWay+0x127e>
    		// Si estamos aqui es porque no queremos cambiar el char de inicio
    		__NOP();
 800253e:	bf00      	nop
 8002540:	e014      	b.n	800256c <findShorterWay+0x12a8>
    	}else{
    		// Si estamos aqui es porque estamos dentro del camino a seguir, por lo cambiamos a una 'I'
    		Gridcopy[i][j] = 'I';
 8002542:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002546:	f103 030e 	add.w	r3, r3, #14
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2234      	movs	r2, #52	; 0x34
 800254e:	fb02 f303 	mul.w	r3, r2, r3
 8002552:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8002556:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	441a      	add	r2, r3
 800255e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002562:	f103 030d 	add.w	r3, r3, #13
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2149      	movs	r1, #73	; 0x49
 800256a:	54d1      	strb	r1, [r2, r3]
    	}


    	// Almacenamos en la matriz de ruta mas corta
		shorterWay[k][0] = i;
 800256c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002570:	f103 0304 	add.w	r3, r3, #4
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 800257c:	f102 0204 	add.w	r2, r2, #4
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	4413      	add	r3, r2
 8002584:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002588:	f102 020e 	add.w	r2, r2, #14
 800258c:	7812      	ldrb	r2, [r2, #0]
 800258e:	601a      	str	r2, [r3, #0]
		shorterWay[k][1] = j;
 8002590:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002594:	f103 0304 	add.w	r3, r3, #4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 80025a0:	f102 0204 	add.w	r2, r2, #4
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80025ac:	f102 020d 	add.w	r2, r2, #13
 80025b0:	7812      	ldrb	r2, [r2, #0]
 80025b2:	605a      	str	r2, [r3, #4]

    	// comenzamos almacenando las posiciones en orden desde el final al punto inicial
		// Actualizamos a la nueva posición
		position[0] = matrixCosts[i][j][3];
 80025b4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80025b8:	f103 030e 	add.w	r3, r3, #14
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80025ca:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	18d1      	adds	r1, r2, r3
 80025d2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80025d6:	f103 030d 	add.w	r3, r3, #13
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	4613      	mov	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	440b      	add	r3, r1
 80025e6:	330c      	adds	r3, #12
 80025e8:	edd3 7a00 	vldr	s15, [r3]
 80025ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025f0:	ee17 3a90 	vmov	r3, s15
 80025f4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80025f8:	f102 0210 	add.w	r2, r2, #16
 80025fc:	6013      	str	r3, [r2, #0]
		position[1] = matrixCosts[i][j][4];
 80025fe:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002602:	f103 030e 	add.w	r3, r3, #14
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 800260c:	fb02 f303 	mul.w	r3, r2, r3
 8002610:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8002614:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	18d1      	adds	r1, r2, r3
 800261c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002620:	f103 030d 	add.w	r3, r3, #13
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	3310      	adds	r3, #16
 8002632:	edd3 7a00 	vldr	s15, [r3]
 8002636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800263a:	ee17 3a90 	vmov	r3, s15
 800263e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8002642:	f102 0214 	add.w	r2, r2, #20
 8002646:	6013      	str	r3, [r2, #0]

		// actualizamos la nueva posición
		i = position[0];
 8002648:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800264c:	f103 0310 	add.w	r3, r3, #16
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002656:	f102 020e 	add.w	r2, r2, #14
 800265a:	7013      	strb	r3, [r2, #0]
		j = position[1];
 800265c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8002660:	f103 0314 	add.w	r3, r3, #20
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800266a:	f102 020d 	add.w	r2, r2, #13
 800266e:	7013      	strb	r3, [r2, #0]
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8002670:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002674:	f103 0304 	add.w	r3, r3, #4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3b01      	subs	r3, #1
 800267c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002680:	f102 0204 	add.w	r2, r2, #4
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800268a:	f103 0304 	add.w	r3, r3, #4
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	f6bf af26 	bge.w	80024e2 <findShorterWay+0x121e>


    }
	// Imprimimos el estado actual de la matriz copia
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8002696:	2300      	movs	r3, #0
 8002698:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800269c:	f102 0203 	add.w	r2, r2, #3
 80026a0:	7013      	strb	r3, [r2, #0]
 80026a2:	e01c      	b.n	80026de <findShorterWay+0x141a>
			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 80026a4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80026a8:	f103 0303 	add.w	r3, r3, #3
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2234      	movs	r2, #52	; 0x34
 80026b0:	fb02 f303 	mul.w	r3, r2, r3
 80026b4:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80026b8:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	4413      	add	r3, r2
 80026c0:	4619      	mov	r1, r3
 80026c2:	4814      	ldr	r0, [pc, #80]	; (8002714 <findShorterWay+0x1450>)
 80026c4:	f002 fa3a 	bl	8004b3c <writeMsg>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80026c8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80026cc:	f103 0303 	add.w	r3, r3, #3
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80026d8:	f102 0203 	add.w	r2, r2, #3
 80026dc:	7013      	strb	r3, [r2, #0]
 80026de:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80026e2:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	7a1b      	ldrb	r3, [r3, #8]
 80026ea:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80026ee:	f102 0203 	add.w	r2, r2, #3
 80026f2:	7812      	ldrb	r2, [r2, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d3d5      	bcc.n	80026a4 <findShorterWay+0x13e0>

    // A partir de aqui habremos logrado despues de un largo camino hallar la ruta mas corta entre dos puntos , el robot ya con esa informacion
    // sabra hacia donde moverse y cuanto moverse

    // Si llegamos hasta aca, con exito hemos logrado todo lo cometido, ¡Felicidades!
    writeMsg(&handlerAstarUsart, "\n______________________Gracias por viajar con nuestra linea Astarlines____________________\n");
 80026f8:	4907      	ldr	r1, [pc, #28]	; (8002718 <findShorterWay+0x1454>)
 80026fa:	4806      	ldr	r0, [pc, #24]	; (8002714 <findShorterWay+0x1450>)
 80026fc:	f002 fa1e 	bl	8004b3c <writeMsg>

    return 1;
 8002700:	2301      	movs	r3, #1


}
 8002702:	4618      	mov	r0, r3
 8002704:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	bd90      	pop	{r4, r7, pc}
 800270e:	bf00      	nop
 8002710:	08009598 	.word	0x08009598
 8002714:	20000e58 	.word	0x20000e58
 8002718:	080095d8 	.word	0x080095d8

0800271c <updateParent>:

// Esta función actuazliza en la matriz de costs y el parent correspondiente
void updateParent(costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6]){
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]

	setParents(ptrChanges, posIJ);
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fa9a 	bl	8002c64 <setParents>

	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][3] = ptrChanges->parent[0]; //Posicion i del parent
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002736:	b2d8      	uxtb	r0, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4413      	add	r3, r2
 8002742:	461a      	mov	r2, r3
 8002744:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8002748:	fb02 f303 	mul.w	r3, r2, r3
 800274c:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	18d1      	adds	r1, r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	3304      	adds	r3, #4
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4413      	add	r3, r2
 8002760:	1e5a      	subs	r2, r3, #1
 8002762:	ee07 0a90 	vmov	s15, r0
 8002766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	330c      	adds	r3, #12
 8002776:	edc3 7a00 	vstr	s15, [r3]
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][4] = ptrChanges->parent[1]; //Posicion j del parent
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002780:	b2d8      	uxtb	r0, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4413      	add	r3, r2
 800278c:	461a      	mov	r2, r3
 800278e:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	18d1      	adds	r1, r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3304      	adds	r3, #4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4413      	add	r3, r2
 80027aa:	1e5a      	subs	r2, r3, #1
 80027ac:	ee07 0a90 	vmov	s15, r0
 80027b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	440b      	add	r3, r1
 80027be:	3310      	adds	r3, #16
 80027c0:	edc3 7a00 	vstr	s15, [r3]

}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <updateGcost>:

// esta funcion actualiz el Gcost correspondiente
void updateGcost(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6] ){
 80027cc:	b5b0      	push	{r4, r5, r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][0] = setGcost(parameters, ptrChanges, posIJ);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	461a      	mov	r2, r3
 80027e6:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	18d5      	adds	r5, r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3304      	adds	r3, #4
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4413      	add	r3, r2
 8002802:	1e5c      	subs	r4, r3, #1
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f905 	bl	8002a18 <setGcost>
 800280e:	eef0 7a40 	vmov.f32	s15, s0
 8002812:	4623      	mov	r3, r4
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4423      	add	r3, r4
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	442b      	add	r3, r5
 800281c:	edc3 7a00 	vstr	s15, [r3]
}
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bdb0      	pop	{r4, r5, r7, pc}

08002828 <updateFcost>:

// Esta función actualiza el Fcost correspondiente
void updateFcost(AStar_distancesHandler *parameters ,costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6] ){
 8002828:	b5b0      	push	{r4, r5, r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][1] = setFcost(parameters, ptrChanges, posIJ, matrixCosts);
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4413      	add	r3, r2
 8002840:	461a      	mov	r2, r3
 8002842:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8002846:	fb02 f303 	mul.w	r3, r2, r3
 800284a:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	18d5      	adds	r5, r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4413      	add	r3, r2
 800285e:	1e5c      	subs	r4, r3, #1
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f9bd 	bl	8002be6 <setFcost>
 800286c:	eef0 7a40 	vmov.f32	s15, s0
 8002870:	4623      	mov	r3, r4
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4423      	add	r3, r4
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	442b      	add	r3, r5
 800287a:	3304      	adds	r3, #4
 800287c:	edc3 7a00 	vstr	s15, [r3]

}
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bdb0      	pop	{r4, r5, r7, pc}

08002888 <setHeuristic>:

// con esta funcion seteamos la matriz Heuristica con la cual usaremos la info para buscar la ruta mas corta
int setHeuristic(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, float matrixCosts[52][52][6] , char Gridcopy[52][52]){
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]

	// definimos variables locales
	int distRows     = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
	int distanceToGo = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
	//sicion de cada fila y columna el valor de la heuristica dependiendo de donde este el punto de termino o End point

	// Comenzamos entonces recorriendo cada posicion del terccer bloque matricial de ***costs
	// recorremos las filas
	// Almacenamos la posicion final
	if(findEnd(Gridcopy, parameters, ptrChanges)){
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	68f9      	ldr	r1, [r7, #12]
 80028a6:	6838      	ldr	r0, [r7, #0]
 80028a8:	f000 fa41 	bl	8002d2e <findEnd>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <setHeuristic+0x32>
		// Se encontro la posicion final, y continua con el programa
		__NOP();
 80028b2:	bf00      	nop
	}

	// A partir de aqui ya se tiene la posicion del punto final y ya se puede entonces calcular la heuristica
	// partiendo siempre de que el robot puede ir en diagonal y luego en linea recta , siempre buscando la ruta mas eficiente

	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80028b4:	2300      	movs	r3, #0
 80028b6:	77fb      	strb	r3, [r7, #31]
 80028b8:	e0a3      	b.n	8002a02 <setHeuristic+0x17a>
		return RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e0a8      	b.n	8002a10 <setHeuristic+0x188>
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 80028be:	2300      	movs	r3, #0
 80028c0:	77bb      	strb	r3, [r7, #30]
 80028c2:	e095      	b.n	80029f0 <setHeuristic+0x168>
			// para cada posicion i,j, se mira i-iend y j-jend, y se evalua cual de los dos es menor y luego
			// De los dos que sea mas pequeño, el robot tendra que ir diagonal hasta encontrarse con la fila o la columna
			// maas cercana a la fila o la columna del punto final, y ya luego sumarle la distancia paralela que falta para llegar al punto end
			distRows    = abs(i-ptrChanges->endPos[0]);
 80028c4:	7ffa      	ldrb	r2, [r7, #31]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bfb8      	it	lt
 80028d0:	425b      	neglt	r3, r3
 80028d2:	61bb      	str	r3, [r7, #24]
			distColumns = abs(j-ptrChanges->endPos[1]);
 80028d4:	7fba      	ldrb	r2, [r7, #30]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bfb8      	it	lt
 80028e0:	425b      	neglt	r3, r3
 80028e2:	617b      	str	r3, [r7, #20]
			if (distRows <= distColumns){
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	dc3f      	bgt.n	800296c <setHeuristic+0xe4>
				// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
				// que de la columna del end, por lo que se debe ir diagonal
				distanceToGo = parameters->diagonalDiastance * distRows;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002904:	ee17 3a90 	vmov	r3, s15
 8002908:	613b      	str	r3, [r7, #16]
				// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
				// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
				// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	edd3 6a00 	vldr	s13, [r3]
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	bfb8      	it	lt
 8002924:	425b      	neglt	r3, r3
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800292e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800293a:	ee17 3a90 	vmov	r3, s15
 800293e:	613b      	str	r3, [r7, #16]
				//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la sumer matriz
				// de costos
				matrixCosts[i][j][2] = distanceToGo;
 8002940:	7ffb      	ldrb	r3, [r7, #31]
 8002942:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	18d1      	adds	r1, r2, r3
 800294e:	7fba      	ldrb	r2, [r7, #30]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	ee07 3a90 	vmov	s15, r3
 8002956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	440b      	add	r3, r1
 8002964:	3308      	adds	r3, #8
 8002966:	edc3 7a00 	vstr	s15, [r3]
 800296a:	e03e      	b.n	80029ea <setHeuristic+0x162>
			}else{
				// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
				// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
				distanceToGo = parameters->diagonalDiastance * distColumns;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	ee07 3a90 	vmov	s15, r3
 8002978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800297c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002984:	ee17 3a90 	vmov	r3, s15
 8002988:	613b      	str	r3, [r7, #16]
				// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
				// distRows y distColumns
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	edd3 6a00 	vldr	s13, [r3]
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bfb8      	it	lt
 80029a4:	425b      	neglt	r3, r3
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ba:	ee17 3a90 	vmov	r3, s15
 80029be:	613b      	str	r3, [r7, #16]
				matrixCosts[i][j][2] = distanceToGo;
 80029c0:	7ffb      	ldrb	r3, [r7, #31]
 80029c2:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	18d1      	adds	r1, r2, r3
 80029ce:	7fba      	ldrb	r2, [r7, #30]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	ee07 3a90 	vmov	s15, r3
 80029d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	440b      	add	r3, r1
 80029e4:	3308      	adds	r3, #8
 80029e6:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 80029ea:	7fbb      	ldrb	r3, [r7, #30]
 80029ec:	3301      	adds	r3, #1
 80029ee:	77bb      	strb	r3, [r7, #30]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	7a5b      	ldrb	r3, [r3, #9]
 80029f4:	7fba      	ldrb	r2, [r7, #30]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	f4ff af64 	bcc.w	80028c4 <setHeuristic+0x3c>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80029fc:	7ffb      	ldrb	r3, [r7, #31]
 80029fe:	3301      	adds	r3, #1
 8002a00:	77fb      	strb	r3, [r7, #31]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	7a1b      	ldrb	r3, [r3, #8]
 8002a06:	7ffa      	ldrb	r2, [r7, #31]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	f4ff af58 	bcc.w	80028be <setHeuristic+0x36>
		}

	}

	// Terminado TODO el recorrido se puede salir de la funcion y decir que todo fue correcto
	return SET;
 8002a0e:	2301      	movs	r3, #1

}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <setGcost>:

//Con esta funcion se halla el Gcost teniendo en cuenta la posicion de analisis
float setGcost (AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2]){
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	; 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
	// definimos variables locales
	int distRows     = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
	float distanceToGo = 0;
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]

	// Luego calculamos el Gcost partiendo de que se tiene que pasar siempre por la posicion de analisis
	// Se analiza cual es la distancia que hay entre el punto de analisis y el punto de start
	distRows    = abs(ptrChanges->posAnalisis[0] -ptrChanges->startPos[0]);
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bfb8      	it	lt
 8002a40:	425b      	neglt	r3, r3
 8002a42:	61bb      	str	r3, [r7, #24]
	distColumns = abs(ptrChanges->posAnalisis[1]-ptrChanges->startPos[1]);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bfb8      	it	lt
 8002a52:	425b      	neglt	r3, r3
 8002a54:	617b      	str	r3, [r7, #20]

	if ((ptrChanges->posAnalisis[0] + posIJ[0] -1) != ptrChanges->posAnalisis[0]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	1e5a      	subs	r2, r3, #1
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d05d      	beq.n	8002b26 <setGcost+0x10e>
	 && (ptrChanges->posAnalisis[1] + posIJ[1] -1) != ptrChanges->posAnalisis[1]){
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3304      	adds	r3, #4
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4413      	add	r3, r2
 8002a76:	1e5a      	subs	r2, r3, #1
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d052      	beq.n	8002b26 <setGcost+0x10e>
		// Si estamos aqui es porque estamos en una de las 4 esquinas aledanias, por lo que la distancia a la columna o la fila
		// mas cercana a el punto de analisis es 1, se tendra que ir diagonalmente
		distanceToGo = parameters->diagonalDiastance;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	61fb      	str	r3, [r7, #28]

		// Luego se calcula la distancia que resta aplicando el mismo algoritmo de la heuristica
		//pero esta vez para el punto de analisis hasta el punto de inicio

		if (distRows <= distColumns){
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	dc25      	bgt.n	8002ada <setGcost+0xc2>
			// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
			// que de la columna del end, por lo que se debe ir diagonal
			distanceToGo += parameters->diagonalDiastance * distRows;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aaa:	edc7 7a07 	vstr	s15, [r7, #28]
			// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
			// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
			// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	ed93 7a00 	vldr	s14, [r3]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bfb8      	it	lt
 8002abe:	425b      	neglt	r3, r3
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002acc:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad4:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8002ad8:	e077      	b.n	8002bca <setGcost+0x1b2>
		}else{
			// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
			// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
			distanceToGo += parameters->diagonalDiastance * distColumns;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aee:	ed97 7a07 	vldr	s14, [r7, #28]
 8002af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af6:	edc7 7a07 	vstr	s15, [r7, #28]
			// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
			// distRows y distColumns
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	ed93 7a00 	vldr	s14, [r3]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	bfb8      	it	lt
 8002b0a:	425b      	neglt	r3, r3
 8002b0c:	ee07 3a90 	vmov	s15, r3
 8002b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b18:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b20:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8002b24:	e051      	b.n	8002bca <setGcost+0x1b2>

	}else {
		// Si estamos aqui es porque estamos en una de las cuatro aristas, donde tanto el puntero como la posicion real del punto de analisis
		// coinciden en fila o en columna, la unica diferencia aqui es que se calcula paralelamente al punto de analisis y a partir de ahi
		// se aplica el algoritmo de la heuristica
		distanceToGo = parameters->parallelDistance;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	61fb      	str	r3, [r7, #28]

		if (distRows <= distColumns){
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	dc25      	bgt.n	8002b80 <setGcost+0x168>
			distanceToGo += parameters->diagonalDiastance * distRows;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	ee07 3a90 	vmov	s15, r3
 8002b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b48:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b50:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	ed93 7a00 	vldr	s14, [r3]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bfb8      	it	lt
 8002b64:	425b      	neglt	r3, r3
 8002b66:	ee07 3a90 	vmov	s15, r3
 8002b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b72:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7a:	edc7 7a07 	vstr	s15, [r7, #28]
 8002b7e:	e024      	b.n	8002bca <setGcost+0x1b2>
		}else{
			distanceToGo += parameters->diagonalDiastance * distColumns;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	ee07 3a90 	vmov	s15, r3
 8002b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b94:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9c:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	ed93 7a00 	vldr	s14, [r3]
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bfb8      	it	lt
 8002bb0:	425b      	neglt	r3, r3
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bbe:	ed97 7a07 	vldr	s14, [r7, #28]
 8002bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc6:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}
	ptrChanges->Gcost = distanceToGo;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	601a      	str	r2, [r3, #0]

	return ptrChanges->Gcost;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	ee07 3a90 	vmov	s15, r3
}
 8002bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <setFcost>:

// Con esta funcion seteamos el F cost en la matriz 2 de la posicion correspondiente
float setFcost (AStar_distancesHandler *parameters , costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6]){
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]

	// Esta funcion es simple ya que solo tenemos que calcular de la matriz 3x3 de analisis y sumar el H cost y el G cost para tener el F cost
	ptrChanges->Gcost = setGcost(parameters, ptrChanges, posIJ);
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	68b9      	ldr	r1, [r7, #8]
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff ff0d 	bl	8002a18 <setGcost>
 8002bfe:	eef0 7a40 	vmov.f32	s15, s0
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	edc3 7a00 	vstr	s15, [r3]
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	ed93 7a00 	vldr	s14, [r3]
			          + matrixCosts[ptrChanges->posAnalisis[0]+ posIJ[0] -1][ptrChanges->posAnalisis[1]+ posIJ[1] -1][2]; // Hcost
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4413      	add	r3, r2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	18d1      	adds	r1, r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3304      	adds	r3, #4
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4413      	add	r3, r2
 8002c36:	1e5a      	subs	r2, r3, #1
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	440b      	add	r3, r1
 8002c42:	3308      	adds	r3, #8
 8002c44:	edd3 7a00 	vldr	s15, [r3]
 8002c48:	ee77 7a27 	vadd.f32	s15, s14, s15
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	edc3 7a01 	vstr	s15, [r3, #4]

	return ptrChanges->Fcost;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	ee07 3a90 	vmov	s15, r3

}
 8002c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <setParents>:

// Con esta funcion seteamos la posicion del parent de los aledanios,
void setParents (costChangesAndPos_t *ptrChanges, int posIJ[2]){
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
	// esta funcion es simple, ya que solo tenemos que setear de la matriz 3x3 de analisis y colocar en la posicion 4 y 5 el indice i y j correspondiente
	// al parent de cada punto aledanio, exceptuando el punto de analisis ya que ese tiene un parent propio

	if ((ptrChanges->posAnalisis[0] + posIJ[0] - 1) == ptrChanges->posAnalisis[0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4413      	add	r3, r2
 8002c78:	1e5a      	subs	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d10c      	bne.n	8002c9c <setParents+0x38>
	&&  (ptrChanges->posAnalisis[1] + posIJ[1] - 1) == ptrChanges->posAnalisis[1] ){
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	3304      	adds	r3, #4
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	1e5a      	subs	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d101      	bne.n	8002c9c <setParents+0x38>
		// Aqui no hacemos nada porque significa que estamos sobre el punto de analisis, y no queremos cambiarle el parent a este
		__NOP();
 8002c98:	bf00      	nop
 8002c9a:	e00c      	b.n	8002cb6 <setParents+0x52>
	}else{
		// Si estamos aqui es porque estamos en alguno de los puntos aledanios
		ptrChanges->parent[0] = ptrChanges->posAnalisis[0];
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f883 2020 	strb.w	r2, [r3, #32]
		ptrChanges->parent[1] = ptrChanges->posAnalisis[1];
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <findStart>:

// En esta funcion nos centraremos en buscar la posicion i,j donde se almacena el punto de inicio del robot
int findStart(char Gridcopy[52][52], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 8002cc2:	b480      	push	{r7}
 8002cc4:	b087      	sub	sp, #28
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]

	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 's' de start
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8002cce:	2300      	movs	r3, #0
 8002cd0:	75fb      	strb	r3, [r7, #23]
 8002cd2:	e020      	b.n	8002d16 <findStart+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	75bb      	strb	r3, [r7, #22]
 8002cd8:	e015      	b.n	8002d06 <findStart+0x44>
			if (Gridcopy[i][j] == 's'){
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
 8002cdc:	2234      	movs	r2, #52	; 0x34
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	441a      	add	r2, r3
 8002ce6:	7dbb      	ldrb	r3, [r7, #22]
 8002ce8:	5cd3      	ldrb	r3, [r2, r3]
 8002cea:	2b73      	cmp	r3, #115	; 0x73
 8002cec:	d107      	bne.n	8002cfe <findStart+0x3c>
				ptrChanges->startPos[0] = i;
 8002cee:	7dfa      	ldrb	r2, [r7, #23]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24
				ptrChanges->startPos[1] = j;
 8002cf4:	7dba      	ldrb	r2, [r7, #22]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	629a      	str	r2, [r3, #40]	; 0x28
				return SET;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e011      	b.n	8002d22 <findStart+0x60>
			}else{
				__NOP();
 8002cfe:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8002d00:	7dbb      	ldrb	r3, [r7, #22]
 8002d02:	3301      	adds	r3, #1
 8002d04:	75bb      	strb	r3, [r7, #22]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	7a5b      	ldrb	r3, [r3, #9]
 8002d0a:	7dba      	ldrb	r2, [r7, #22]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d3e4      	bcc.n	8002cda <findStart+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	3301      	adds	r3, #1
 8002d14:	75fb      	strb	r3, [r7, #23]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	7a1b      	ldrb	r3, [r3, #8]
 8002d1a:	7dfa      	ldrb	r2, [r7, #23]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d3d9      	bcc.n	8002cd4 <findStart+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 8002d20:	2300      	movs	r3, #0



}
 8002d22:	4618      	mov	r0, r3
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <findEnd>:
int findEnd(char Gridcopy[52][52], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 8002d2e:	b480      	push	{r7}
 8002d30:	b087      	sub	sp, #28
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]


	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 'e' de end
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	75fb      	strb	r3, [r7, #23]
 8002d3e:	e020      	b.n	8002d82 <findEnd+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8002d40:	2300      	movs	r3, #0
 8002d42:	75bb      	strb	r3, [r7, #22]
 8002d44:	e015      	b.n	8002d72 <findEnd+0x44>
			if (Gridcopy[i][j] == 'e'){
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
 8002d48:	2234      	movs	r2, #52	; 0x34
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	441a      	add	r2, r3
 8002d52:	7dbb      	ldrb	r3, [r7, #22]
 8002d54:	5cd3      	ldrb	r3, [r2, r3]
 8002d56:	2b65      	cmp	r3, #101	; 0x65
 8002d58:	d107      	bne.n	8002d6a <findEnd+0x3c>
				ptrChanges->endPos[0] = i;
 8002d5a:	7dfa      	ldrb	r2, [r7, #23]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c
				ptrChanges->endPos[1] = j;
 8002d60:	7dba      	ldrb	r2, [r7, #22]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
				return SET;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e011      	b.n	8002d8e <findEnd+0x60>
			}else{
				__NOP();
 8002d6a:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8002d6c:	7dbb      	ldrb	r3, [r7, #22]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	75bb      	strb	r3, [r7, #22]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	7a5b      	ldrb	r3, [r3, #9]
 8002d76:	7dba      	ldrb	r2, [r7, #22]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d3e4      	bcc.n	8002d46 <findEnd+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	7a1b      	ldrb	r3, [r3, #8]
 8002d86:	7dfa      	ldrb	r2, [r7, #23]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d3d9      	bcc.n	8002d40 <findEnd+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 8002d8c:	2300      	movs	r3, #0

}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <buildMatrixCopy>:
//
//}

//Con esta funcion se reparte la memoria para la matriz de entrada desde la terminal serial

void buildMatrixCopy(AStar_distancesHandler *parameters, char terminalGrid[52][52], char Gridcopy[52][52]){
 8002d9a:	b480      	push	{r7}
 8002d9c:	b087      	sub	sp, #28
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]


	// Seteamos los valores dentro de la matriz infoGrid de la entrada respectiva
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 8002da6:	2300      	movs	r3, #0
 8002da8:	75fb      	strb	r3, [r7, #23]
 8002daa:	e03d      	b.n	8002e28 <buildMatrixCopy+0x8e>
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8002dac:	2300      	movs	r3, #0
 8002dae:	75bb      	strb	r3, [r7, #22]
 8002db0:	e031      	b.n	8002e16 <buildMatrixCopy+0x7c>

			if (j == parameters->numberOfColumns){
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	7a5b      	ldrb	r3, [r3, #9]
 8002db6:	7dba      	ldrb	r2, [r7, #22]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d109      	bne.n	8002dd0 <buildMatrixCopy+0x36>
				// Agregamos al a la posicion penultima, agregamos una terminacion de salto de linea para ipresion en consola
				Gridcopy[i][j] = '\r';
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	2234      	movs	r2, #52	; 0x34
 8002dc0:	fb02 f303 	mul.w	r3, r2, r3
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	441a      	add	r2, r3
 8002dc8:	7dbb      	ldrb	r3, [r7, #22]
 8002dca:	210d      	movs	r1, #13
 8002dcc:	54d1      	strb	r1, [r2, r3]
 8002dce:	e01f      	b.n	8002e10 <buildMatrixCopy+0x76>
			}else if (j == parameters->numberOfColumns + 1){
 8002dd0:	7dba      	ldrb	r2, [r7, #22]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	7a5b      	ldrb	r3, [r3, #9]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d109      	bne.n	8002df0 <buildMatrixCopy+0x56>
				// Agregamos al final la terminacion nula para que cada fila sea un string completo
				Gridcopy[i][j] = '\0';
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	2234      	movs	r2, #52	; 0x34
 8002de0:	fb02 f303 	mul.w	r3, r2, r3
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	441a      	add	r2, r3
 8002de8:	7dbb      	ldrb	r3, [r7, #22]
 8002dea:	2100      	movs	r1, #0
 8002dec:	54d1      	strb	r1, [r2, r3]
 8002dee:	e00f      	b.n	8002e10 <buildMatrixCopy+0x76>
			}else{
				Gridcopy[i][j] = terminalGrid[i][j];
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2234      	movs	r2, #52	; 0x34
 8002df4:	fb02 f303 	mul.w	r3, r2, r3
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	18d0      	adds	r0, r2, r3
 8002dfc:	7db9      	ldrb	r1, [r7, #22]
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
 8002e00:	2234      	movs	r2, #52	; 0x34
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	441a      	add	r2, r3
 8002e0a:	7dbb      	ldrb	r3, [r7, #22]
 8002e0c:	5c41      	ldrb	r1, [r0, r1]
 8002e0e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8002e10:	7dbb      	ldrb	r3, [r7, #22]
 8002e12:	3301      	adds	r3, #1
 8002e14:	75bb      	strb	r3, [r7, #22]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	7a5b      	ldrb	r3, [r3, #9]
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	7dbb      	ldrb	r3, [r7, #22]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	dac7      	bge.n	8002db2 <buildMatrixCopy+0x18>
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
 8002e24:	3301      	adds	r3, #1
 8002e26:	75fb      	strb	r3, [r7, #23]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	7a1b      	ldrb	r3, [r3, #8]
 8002e2c:	7dfa      	ldrb	r2, [r7, #23]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d3bc      	bcc.n	8002dac <buildMatrixCopy+0x12>
			}
		}
	}

}
 8002e32:	bf00      	nop
 8002e34:	bf00      	nop
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <getRows>:



// Se define la funcion de tomar cantidad de filas recorriendo la cantidad de String que tenga el puntero de arreglos matrix hasta que se
// encuentre con el puntero nulo.
uint8_t getRows(char terminalGrid[52][52]){
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

	uint8_t counterRows = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	73fb      	strb	r3, [r7, #15]
	char letter = '\0';
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	73bb      	strb	r3, [r7, #14]
	(void)letter;
	while(terminalGrid[counterRows][0] != '\0'){
 8002e50:	e00a      	b.n	8002e68 <getRows+0x28>
		letter = terminalGrid[counterRows][0];
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	2234      	movs	r2, #52	; 0x34
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	73bb      	strb	r3, [r7, #14]
		counterRows++;
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	3301      	adds	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[counterRows][0] != '\0'){
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	2234      	movs	r2, #52	; 0x34
 8002e6c:	fb02 f303 	mul.w	r3, r2, r3
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1eb      	bne.n	8002e52 <getRows+0x12>

	}

	return counterRows;
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <getColums>:

//Se define la funcion de tomar cantidad de columnas recorriendo el string hasta encontrar el elemento nulo char
uint8_t getColums(char terminalGrid[52][52]){
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

	uint8_t counterColumns = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 8002e94:	e002      	b.n	8002e9c <getColums+0x14>

		counterColumns++;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	5cd3      	ldrb	r3, [r2, r3]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f7      	bne.n	8002e96 <getColums+0xe>

	}

	return counterColumns;
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <findLesserValue>:

// esta funcion nos almacena en uno de los arrays volatiles de la estructura costChangesAndPos_t la posicion del valor Fcost o H cost mas pequeño,
// Se debe identificar con un string si se quiere hallar el Fcost mas pequeño o el Hcost mas pequeño, asi, "Fcost" si se quiere hallar el F cost o
// "Hcost" si se quiere hallar el H cost
void findLesserValue(costChangesAndPos_t *ptrChanges, float decisionMtrx[500][4], uint8_t contador){
 8002eb4:	b480      	push	{r7}
 8002eb6:	b089      	sub	sp, #36	; 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	71fb      	strb	r3, [r7, #7]
	// seteamos las variables locales
	uint8_t i;
	uint8_t j;
	float value_1 = 0;
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
	float value_2 = 0;
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]

	// El algoritmo que se usará es que se recorrerá cada una de las posiciones y se analizara con las demas , excpliyendo obviamente
	// la posicion central


	for(i = 0; i<contador ; i++){
 8002ece:	2300      	movs	r3, #0
 8002ed0:	77fb      	strb	r3, [r7, #31]
 8002ed2:	e04d      	b.n	8002f70 <findLesserValue+0xbc>
		for(j = 0; j<contador ; j++){
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	77bb      	strb	r3, [r7, #30]
 8002ed8:	e034      	b.n	8002f44 <findLesserValue+0x90>
			if (i == j){
 8002eda:	7ffa      	ldrb	r2, [r7, #31]
 8002edc:	7fbb      	ldrb	r3, [r7, #30]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d101      	bne.n	8002ee6 <findLesserValue+0x32>
				// Si estamos aqui es porque estamos analizando el mismo punto, y nosotros queremos es analizar a sus compañeros solamente
				__NOP();
 8002ee2:	bf00      	nop
 8002ee4:	e02b      	b.n	8002f3e <findLesserValue+0x8a>
			}else if (decisionMtrx[i][0]
 8002ee6:	7ffb      	ldrb	r3, [r7, #31]
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	4413      	add	r3, r2
 8002eee:	ed93 7a00 	vldr	s14, [r3]
					< decisionMtrx[j][0]){
 8002ef2:	7fbb      	ldrb	r3, [r7, #30]
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	4413      	add	r3, r2
 8002efa:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 8002efe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f06:	d41a      	bmi.n	8002f3e <findLesserValue+0x8a>
				// Si estamos aca es porque podemos hacer la comparación
				// Si estamos aca es porque efectivamente el Fcost es menor, Solo dejamos pasar el ciclo para asegurarnos de que el j
				// pueda llegar hasta su valor final permitido
			}else if (decisionMtrx[i][0]
 8002f08:	7ffb      	ldrb	r3, [r7, #31]
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	4413      	add	r3, r2
 8002f10:	ed93 7a00 	vldr	s14, [r3]
				   == decisionMtrx[j][0]){
 8002f14:	7fbb      	ldrb	r3, [r7, #30]
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 8002f20:	eeb4 7a67 	vcmp.f32	s14, s15
 8002f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f28:	d104      	bne.n	8002f34 <findLesserValue+0x80>
				// Si estamos aqui es porque el programa encontro mas de un  minimo un valor igual al analizado
				ptrChanges->equalFcost = SET;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f32:	e004      	b.n	8002f3e <findLesserValue+0x8a>
			}else{
				// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
				// Se resetea la bandera que decia que habia un vakor igual, esto debe de ser solo cierto si el valor que es
				// igual es el menor de la matriz
				ptrChanges->equalFcost = RESET;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				break;
 8002f3c:	e006      	b.n	8002f4c <findLesserValue+0x98>
		for(j = 0; j<contador ; j++){
 8002f3e:	7fbb      	ldrb	r3, [r7, #30]
 8002f40:	3301      	adds	r3, #1
 8002f42:	77bb      	strb	r3, [r7, #30]
 8002f44:	7fba      	ldrb	r2, [r7, #30]
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d3c6      	bcc.n	8002eda <findLesserValue+0x26>
			}

		}//Terminacion de un for
		if (j == contador){
 8002f4c:	7fba      	ldrb	r2, [r7, #30]
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d10a      	bne.n	8002f6a <findLesserValue+0xb6>
			// Si entramos en esta condicion es porque el contador j logro llegar a su posicion final
			// Si entramos aqui es porque se logro analizar todo el arreglo y se encontro la posicion que corresponde con el Fcost mas pequeño
			// de todos, tambien guardamos el valor mas pequeño, si este se repite, se sabra gracias a la bandera
			// La posicion mas pequeña del F cost corresponde con la que se etsaba analizando en la posición i
			ptrChanges->lesserFcostPosition = i;
 8002f54:	7ffa      	ldrb	r2, [r7, #31]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	635a      	str	r2, [r3, #52]	; 0x34
			// Almacenamos en lesserFcost el valor de ese Fcost mas pequeño que se hallo
			ptrChanges->lesserFcost = decisionMtrx[i][0];
 8002f5a:	7ffb      	ldrb	r3, [r7, #31]
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	4413      	add	r3, r2
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40
			// paramos el primer for
			break;
 8002f68:	e006      	b.n	8002f78 <findLesserValue+0xc4>
	for(i = 0; i<contador ; i++){
 8002f6a:	7ffb      	ldrb	r3, [r7, #31]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	7ffa      	ldrb	r2, [r7, #31]
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d3ad      	bcc.n	8002ed4 <findLesserValue+0x20>

	}//Terminacion del otro for


	// Ahora hallaremos el valor mas pequeño de H cost, solo en el caso de que la bandera correspondiente se haya levantado
	if (ptrChanges->equalFcost){
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d076      	beq.n	8003070 <findLesserValue+0x1bc>
		// Si estamos aqui es porque si hay mas de un valor de F cost que corresponde con el valor mas pequeño, desempatamos buscando el Hcost mas pequeño
		// Para ello recorreremos la matriz a analizar de nuevo pero esta vez solo buscando aquellos valores que correspondan con el valor hallado de Fcost

		for(i = 0; i<contador ; i++){
 8002f82:	2300      	movs	r3, #0
 8002f84:	77fb      	strb	r3, [r7, #31]
 8002f86:	e06e      	b.n	8003066 <findLesserValue+0x1b2>
			value_1 = decisionMtrx[i][0] / ptrChanges->lesserFcost;
 8002f88:	7ffb      	ldrb	r3, [r7, #31]
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	4413      	add	r3, r2
 8002f90:	edd3 6a00 	vldr	s13, [r3]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f9e:	edc7 7a06 	vstr	s15, [r7, #24]
			for(j = 0; j<contador ; j++){
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	77bb      	strb	r3, [r7, #30]
 8002fa6:	e045      	b.n	8003034 <findLesserValue+0x180>
				value_2 = decisionMtrx[j][0] / ptrChanges->lesserFcost;
 8002fa8:	7fbb      	ldrb	r3, [r7, #30]
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	4413      	add	r3, r2
 8002fb0:	edd3 6a00 	vldr	s13, [r3]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fbe:	edc7 7a05 	vstr	s15, [r7, #20]
 				if (i == j){
 8002fc2:	7ffa      	ldrb	r2, [r7, #31]
 8002fc4:	7fbb      	ldrb	r3, [r7, #30]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d101      	bne.n	8002fce <findLesserValue+0x11a>
					// Si estamos aqui es porque estamos analizando la posición de analisis, por lo que lo ignoramos
					__NOP();
 8002fca:	bf00      	nop
 8002fcc:	e02f      	b.n	800302e <findLesserValue+0x17a>
				}else if (value_1 == 1 && value_2 == 1){
 8002fce:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fd6:	eef4 7a47 	vcmp.f32	s15, s14
 8002fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fde:	d11c      	bne.n	800301a <findLesserValue+0x166>
 8002fe0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fe8:	eef4 7a47 	vcmp.f32	s15, s14
 8002fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff0:	d113      	bne.n	800301a <findLesserValue+0x166>
					// Si estamos aca es porque podemos hacer la comparación pero esta vez con la matriz heuristica
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8002ff2:	7ffb      	ldrb	r3, [r7, #31]
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ffe:	7fbb      	ldrb	r3, [r7, #30]
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	4413      	add	r3, r2
 8003006:	edd3 7a01 	vldr	s15, [r3, #4]
 800300a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800300e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003012:	d900      	bls.n	8003016 <findLesserValue+0x162>
						// Si estamos aca es porque efectivamente el Hcost es menor o igual al resto de Hcost
						__NOP();
					}else{
						// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
						break;
 8003014:	e014      	b.n	8003040 <findLesserValue+0x18c>
						__NOP();
 8003016:	bf00      	nop
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8003018:	e009      	b.n	800302e <findLesserValue+0x17a>
					}
				}else if (value_1 == 1){
 800301a:	edd7 7a06 	vldr	s15, [r7, #24]
 800301e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003022:	eef4 7a47 	vcmp.f32	s15, s14
 8003026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302a:	d108      	bne.n	800303e <findLesserValue+0x18a>
					// Si estamos aqui es porque aun podemos seguir comparando, por lo que el algoritmo debe de seguir bucando a sus iguales
					__NOP();
 800302c:	bf00      	nop
			for(j = 0; j<contador ; j++){
 800302e:	7fbb      	ldrb	r3, [r7, #30]
 8003030:	3301      	adds	r3, #1
 8003032:	77bb      	strb	r3, [r7, #30]
 8003034:	7fba      	ldrb	r2, [r7, #30]
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	429a      	cmp	r2, r3
 800303a:	d3b5      	bcc.n	8002fa8 <findLesserValue+0xf4>
 800303c:	e000      	b.n	8003040 <findLesserValue+0x18c>
				}else {
					// Estamos en un valor que no nos interesa evaluar, por lo que lo ignoramos y salimos
					break;
 800303e:	bf00      	nop
				}

			}//Terminacion de un for
			if (j == contador){
 8003040:	7fba      	ldrb	r2, [r7, #30]
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	429a      	cmp	r2, r3
 8003046:	d10b      	bne.n	8003060 <findLesserValue+0x1ac>
				// Si entramos aqui es porque se logro analizar toda la matriz y se encontro la posicion que corresponde con la posicion mas pequeña
				// de todas, tambien guardamos el valor mas pequeño, es muy poco probable, por no decir imposible que tengamos una misma heuristica
				//repetida
				ptrChanges->lesserHcostPosition = i;
 8003048:	7ffa      	ldrb	r2, [r7, #31]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	639a      	str	r2, [r3, #56]	; 0x38
				//Almacenamos en lesserHcost el valor del Hcost mas pequeño encontrado
				ptrChanges->lesserHcost = decisionMtrx[i][1];
 800304e:	7ffb      	ldrb	r3, [r7, #31]
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	4413      	add	r3, r2
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	645a      	str	r2, [r3, #68]	; 0x44
				// Paramos el primer for
				break;
 800305c:	bf00      	nop
	}else{
		// Si estamos aca es porque no se alzo la bandera que indica que hay mas de un F cost igual por lo que no hacemos nada
		__NOP();
	}

}
 800305e:	e008      	b.n	8003072 <findLesserValue+0x1be>
		for(i = 0; i<contador ; i++){
 8003060:	7ffb      	ldrb	r3, [r7, #31]
 8003062:	3301      	adds	r3, #1
 8003064:	77fb      	strb	r3, [r7, #31]
 8003066:	7ffa      	ldrb	r2, [r7, #31]
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	429a      	cmp	r2, r3
 800306c:	d38c      	bcc.n	8002f88 <findLesserValue+0xd4>
}
 800306e:	e000      	b.n	8003072 <findLesserValue+0x1be>
		__NOP();
 8003070:	bf00      	nop
}
 8003072:	bf00      	nop
 8003074:	3724      	adds	r7, #36	; 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <initSerialComunication>:
	// Liberamos el arreglo de punteros
	free(shorterWayArray);

}
// Con las siguientes funciones inicializamos a los handler necesarios para poder usar la comunicacion serial desde aqui y no desde el main
void initSerialComunication (USART_Handler_t *ptrHandlerUsart, GPIO_Handler_t *ptrHandlerRx, GPIO_Handler_t *ptrHandlerTx){
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]

	// Inicializamos para el modulo Usart, no se necesita configurar ya que ya en el main se configuro con el handler específico
	handlerAstarUsart.ptrUSARTx                      = ptrHandlerUsart->ptrUSARTx;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2d      	ldr	r2, [pc, #180]	; (8003148 <initSerialComunication+0xc8>)
 8003092:	6013      	str	r3, [r2, #0]
	handlerAstarUsart.USART_Config.USART_MCUvelocity = ptrHandlerUsart->USART_Config.USART_MCUvelocity;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a2b      	ldr	r2, [pc, #172]	; (8003148 <initSerialComunication+0xc8>)
 800309a:	60d3      	str	r3, [r2, #12]
	handlerAstarUsart.USART_Config.USART_baudrate    = ptrHandlerUsart->USART_Config.USART_baudrate;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	79da      	ldrb	r2, [r3, #7]
 80030a0:	4b29      	ldr	r3, [pc, #164]	; (8003148 <initSerialComunication+0xc8>)
 80030a2:	71da      	strb	r2, [r3, #7]
	handlerAstarUsart.USART_Config.USART_enableInTx  = ptrHandlerUsart->USART_Config.USART_enableInTx;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	791a      	ldrb	r2, [r3, #4]
 80030a8:	4b27      	ldr	r3, [pc, #156]	; (8003148 <initSerialComunication+0xc8>)
 80030aa:	711a      	strb	r2, [r3, #4]
	handlerAstarUsart.USART_Config.USART_mode        = ptrHandlerUsart->USART_Config.USART_mode;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	799a      	ldrb	r2, [r3, #6]
 80030b0:	4b25      	ldr	r3, [pc, #148]	; (8003148 <initSerialComunication+0xc8>)
 80030b2:	719a      	strb	r2, [r3, #6]
	handlerAstarUsart.USART_Config.USART_parity      = ptrHandlerUsart->USART_Config.USART_parity;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	7a5a      	ldrb	r2, [r3, #9]
 80030b8:	4b23      	ldr	r3, [pc, #140]	; (8003148 <initSerialComunication+0xc8>)
 80030ba:	725a      	strb	r2, [r3, #9]
	handlerAstarUsart.USART_Config.USART_stopbits    = ptrHandlerUsart->USART_Config.USART_stopbits;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	7a9a      	ldrb	r2, [r3, #10]
 80030c0:	4b21      	ldr	r3, [pc, #132]	; (8003148 <initSerialComunication+0xc8>)
 80030c2:	729a      	strb	r2, [r3, #10]
	handlerAstarUsart.USART_Config.USART_datasize    = ptrHandlerUsart->USART_Config.USART_datasize;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	7a1a      	ldrb	r2, [r3, #8]
 80030c8:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <initSerialComunication+0xc8>)
 80030ca:	721a      	strb	r2, [r3, #8]

	// Hacemos lo mismo con los pines Rx y Tx del GPIO
	handlerAstarPinRx.pGPIOx                             = ptrHandlerRx->pGPIOx;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1e      	ldr	r2, [pc, #120]	; (800314c <initSerialComunication+0xcc>)
 80030d2:	6013      	str	r3, [r2, #0]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerRx->GPIO_PinConfig.GPIO_PinAltFunMode;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	7a5a      	ldrb	r2, [r3, #9]
 80030d8:	4b1c      	ldr	r3, [pc, #112]	; (800314c <initSerialComunication+0xcc>)
 80030da:	725a      	strb	r2, [r3, #9]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerRx->GPIO_PinConfig.GPIO_PinMode;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	795a      	ldrb	r2, [r3, #5]
 80030e0:	4b1a      	ldr	r3, [pc, #104]	; (800314c <initSerialComunication+0xcc>)
 80030e2:	715a      	strb	r2, [r3, #5]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinOPType;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	7a1a      	ldrb	r2, [r3, #8]
 80030e8:	4b18      	ldr	r3, [pc, #96]	; (800314c <initSerialComunication+0xcc>)
 80030ea:	721a      	strb	r2, [r3, #8]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinNumber;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	791a      	ldrb	r2, [r3, #4]
 80030f0:	4b16      	ldr	r3, [pc, #88]	; (800314c <initSerialComunication+0xcc>)
 80030f2:	711a      	strb	r2, [r3, #4]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerRx->GPIO_PinConfig.GPIO_PinPuPdControl;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	79da      	ldrb	r2, [r3, #7]
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <initSerialComunication+0xcc>)
 80030fa:	71da      	strb	r2, [r3, #7]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerRx->GPIO_PinConfig.GPIO_PinSpeed;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	799a      	ldrb	r2, [r3, #6]
 8003100:	4b12      	ldr	r3, [pc, #72]	; (800314c <initSerialComunication+0xcc>)
 8003102:	719a      	strb	r2, [r3, #6]

	handlerAstarPinTx.pGPIOx                             = ptrHandlerTx->pGPIOx;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a11      	ldr	r2, [pc, #68]	; (8003150 <initSerialComunication+0xd0>)
 800310a:	6013      	str	r3, [r2, #0]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerTx->GPIO_PinConfig.GPIO_PinAltFunMode;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	7a5a      	ldrb	r2, [r3, #9]
 8003110:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <initSerialComunication+0xd0>)
 8003112:	725a      	strb	r2, [r3, #9]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerTx->GPIO_PinConfig.GPIO_PinMode;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	795a      	ldrb	r2, [r3, #5]
 8003118:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <initSerialComunication+0xd0>)
 800311a:	715a      	strb	r2, [r3, #5]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinOPType;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	7a1a      	ldrb	r2, [r3, #8]
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <initSerialComunication+0xd0>)
 8003122:	721a      	strb	r2, [r3, #8]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinNumber;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	791a      	ldrb	r2, [r3, #4]
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <initSerialComunication+0xd0>)
 800312a:	711a      	strb	r2, [r3, #4]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerTx->GPIO_PinConfig.GPIO_PinPuPdControl;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	79da      	ldrb	r2, [r3, #7]
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <initSerialComunication+0xd0>)
 8003132:	71da      	strb	r2, [r3, #7]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerTx->GPIO_PinConfig.GPIO_PinSpeed;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	799a      	ldrb	r2, [r3, #6]
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <initSerialComunication+0xd0>)
 800313a:	719a      	strb	r2, [r3, #6]

	// Ya seteados estos handler en teoria podriamos mandar por terminarl serial desde este .c

}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	20000e58 	.word	0x20000e58
 800314c:	20000eec 	.word	0x20000eec
 8003150:	20000ef8 	.word	0x20000ef8

08003154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	2b00      	cmp	r3, #0
 8003164:	db0b      	blt.n	800317e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	f003 021f 	and.w	r2, r3, #31
 800316c:	4907      	ldr	r1, [pc, #28]	; (800318c <__NVIC_EnableIRQ+0x38>)
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	2001      	movs	r0, #1
 8003176:	fa00 f202 	lsl.w	r2, r0, r2
 800317a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000e100 	.word	0xe000e100

08003190 <BasicTimer_Config>:
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
	BasicTimer_Config(&handlerTIM4_time);

}

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031a0:	b672      	cpsid	i
}
 80031a2:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a85      	ldr	r2, [pc, #532]	; (80033c0 <BasicTimer_Config+0x230>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d106      	bne.n	80031bc <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80031ae:	4b85      	ldr	r3, [pc, #532]	; (80033c4 <BasicTimer_Config+0x234>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	4a84      	ldr	r2, [pc, #528]	; (80033c4 <BasicTimer_Config+0x234>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ba:	e030      	b.n	800321e <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c4:	d106      	bne.n	80031d4 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80031c6:	4b7f      	ldr	r3, [pc, #508]	; (80033c4 <BasicTimer_Config+0x234>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a7e      	ldr	r2, [pc, #504]	; (80033c4 <BasicTimer_Config+0x234>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
 80031d2:	e024      	b.n	800321e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a7b      	ldr	r2, [pc, #492]	; (80033c8 <BasicTimer_Config+0x238>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d106      	bne.n	80031ec <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80031de:	4b79      	ldr	r3, [pc, #484]	; (80033c4 <BasicTimer_Config+0x234>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	4a78      	ldr	r2, [pc, #480]	; (80033c4 <BasicTimer_Config+0x234>)
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ea:	e018      	b.n	800321e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a76      	ldr	r2, [pc, #472]	; (80033cc <BasicTimer_Config+0x23c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d106      	bne.n	8003204 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80031f6:	4b73      	ldr	r3, [pc, #460]	; (80033c4 <BasicTimer_Config+0x234>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	4a72      	ldr	r2, [pc, #456]	; (80033c4 <BasicTimer_Config+0x234>)
 80031fc:	f043 0304 	orr.w	r3, r3, #4
 8003200:	6413      	str	r3, [r2, #64]	; 0x40
 8003202:	e00c      	b.n	800321e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a71      	ldr	r2, [pc, #452]	; (80033d0 <BasicTimer_Config+0x240>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d106      	bne.n	800321c <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800320e:	4b6d      	ldr	r3, [pc, #436]	; (80033c4 <BasicTimer_Config+0x234>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	4a6c      	ldr	r2, [pc, #432]	; (80033c4 <BasicTimer_Config+0x234>)
 8003214:	f043 0308 	orr.w	r3, r3, #8
 8003218:	6413      	str	r3, [r2, #64]	; 0x40
 800321a:	e000      	b.n	800321e <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 800321c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800322c:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6892      	ldr	r2, [r2, #8]
 8003236:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	791b      	ldrb	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f040 80d3 	bne.w	80033e8 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0210 	bic.w	r2, r2, #16
 8003250:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2ba0      	cmp	r3, #160	; 0xa0
 800325c:	d022      	beq.n	80032a4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2bc8      	cmp	r3, #200	; 0xc8
 8003262:	d01f      	beq.n	80032a4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800326a:	d01b      	beq.n	80032a4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003272:	d017      	beq.n	80032a4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800327a:	d013      	beq.n	80032a4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003282:	d00f      	beq.n	80032a4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800328a:	d00b      	beq.n	80032a4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003292:	d007      	beq.n	80032a4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800329a:	d003      	beq.n	80032a4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032a2:	d10b      	bne.n	80032bc <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2264      	movs	r2, #100	; 0x64
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	3a01      	subs	r2, #1
 80032b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80032ba:	e07c      	b.n	80033b6 <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80032c2:	d029      	beq.n	8003318 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80032ca:	d025      	beq.n	8003318 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d020      	beq.n	8003318 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80032dc:	d01c      	beq.n	8003318 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d017      	beq.n	8003318 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f241 7270 	movw	r2, #6000	; 0x1770
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d012      	beq.n	8003318 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f641 3258 	movw	r2, #7000	; 0x1b58
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00d      	beq.n	8003318 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003302:	d009      	beq.n	8003318 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f242 3228 	movw	r2, #9000	; 0x2328
 800330a:	4293      	cmp	r3, r2
 800330c:	d004      	beq.n	8003318 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f242 7210 	movw	r2, #10000	; 0x2710
 8003314:	4293      	cmp	r3, r2
 8003316:	d10c      	bne.n	8003332 <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	3a01      	subs	r2, #1
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003330:	e041      	b.n	80033b6 <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003338:	d028      	beq.n	800338c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003340:	4293      	cmp	r3, r2
 8003342:	d023      	beq.n	800338c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f247 5230 	movw	r2, #30000	; 0x7530
 800334a:	4293      	cmp	r3, r2
 800334c:	d01e      	beq.n	800338c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003354:	4293      	cmp	r3, r2
 8003356:	d019      	beq.n	800338c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800335e:	4293      	cmp	r3, r2
 8003360:	d014      	beq.n	800338c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003368:	4293      	cmp	r3, r2
 800336a:	d00f      	beq.n	800338c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4a19      	ldr	r2, [pc, #100]	; (80033d4 <BasicTimer_Config+0x244>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00b      	beq.n	800338c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4a18      	ldr	r2, [pc, #96]	; (80033d8 <BasicTimer_Config+0x248>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d007      	beq.n	800338c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4a17      	ldr	r2, [pc, #92]	; (80033dc <BasicTimer_Config+0x24c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d003      	beq.n	800338c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4a16      	ldr	r2, [pc, #88]	; (80033e0 <BasicTimer_Config+0x250>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d108      	bne.n	800339e <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	3a01      	subs	r2, #1
 800339a:	62da      	str	r2, [r3, #44]	; 0x2c
 800339c:	e00b      	b.n	80033b6 <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	4a10      	ldr	r2, [pc, #64]	; (80033e4 <BasicTimer_Config+0x254>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	08db      	lsrs	r3, r3, #3
 80033aa:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	3a01      	subs	r2, #1
 80033b4:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24
 80033be:	e027      	b.n	8003410 <BasicTimer_Config+0x280>
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40000400 	.word	0x40000400
 80033cc:	40000800 	.word	0x40000800
 80033d0:	40000c00 	.word	0x40000c00
 80033d4:	00011170 	.word	0x00011170
 80033d8:	00013880 	.word	0x00013880
 80033dc:	00015f90 	.word	0x00015f90
 80033e0:	000186a0 	.word	0x000186a0
 80033e4:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0210 	orr.w	r2, r2, #16
 80033f6:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3a01      	subs	r2, #1
 8003402:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3a01      	subs	r2, #1
 800340e:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	7c1b      	ldrb	r3, [r3, #16]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d12d      	bne.n	8003474 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003430:	d103      	bne.n	800343a <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 8003432:	201c      	movs	r0, #28
 8003434:	f7ff fe8e 	bl	8003154 <__NVIC_EnableIRQ>
 8003438:	e024      	b.n	8003484 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a14      	ldr	r2, [pc, #80]	; (8003490 <BasicTimer_Config+0x300>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d103      	bne.n	800344c <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8003444:	201d      	movs	r0, #29
 8003446:	f7ff fe85 	bl	8003154 <__NVIC_EnableIRQ>
 800344a:	e01b      	b.n	8003484 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a10      	ldr	r2, [pc, #64]	; (8003494 <BasicTimer_Config+0x304>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d103      	bne.n	800345e <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 8003456:	201e      	movs	r0, #30
 8003458:	f7ff fe7c 	bl	8003154 <__NVIC_EnableIRQ>
 800345c:	e012      	b.n	8003484 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a0d      	ldr	r2, [pc, #52]	; (8003498 <BasicTimer_Config+0x308>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d103      	bne.n	8003470 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 8003468:	2032      	movs	r0, #50	; 0x32
 800346a:	f7ff fe73 	bl	8003154 <__NVIC_EnableIRQ>
 800346e:	e009      	b.n	8003484 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 8003470:	bf00      	nop
 8003472:	e007      	b.n	8003484 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8003484:	b662      	cpsie	i
}
 8003486:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40000400 	.word	0x40000400
 8003494:	40000800 	.word	0x40000800
 8003498:	40000c00 	.word	0x40000c00

0800349c <BasicTimer2_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer2_Callback(void){
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80034a0:	bf00      	nop
}
 80034a2:	bf00      	nop
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80034b0:	bf00      	nop
}
 80034b2:	bf00      	nop
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80034c0:	bf00      	nop
}
 80034c2:	bf00      	nop
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80034d0:	bf00      	nop
}
 80034d2:	bf00      	nop
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80034e0:	bf00      	nop
}
 80034e2:	bf00      	nop
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80034f0:	bf00      	nop
}
 80034f2:	bf00      	nop
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003500:	bf00      	nop
}
 8003502:	bf00      	nop
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003510:	bf00      	nop
}
 8003512:	bf00      	nop
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003520:	bf00      	nop
}
 8003522:	bf00      	nop
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003530:	bf00      	nop
}
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003540:	bf00      	nop
}
 8003542:	bf00      	nop
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003550:	bf00      	nop
}
 8003552:	bf00      	nop
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003560:	bf00      	nop
}
 8003562:	bf00      	nop
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003570:	bf00      	nop
}
 8003572:	bf00      	nop
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003580:	bf00      	nop
}
 8003582:	bf00      	nop
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003590:	bf00      	nop
}
 8003592:	bf00      	nop
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80035a0:	bf00      	nop
}
 80035a2:	bf00      	nop
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80035b0:	bf00      	nop
}
 80035b2:	bf00      	nop
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 80035c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 80035ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 80035de:	f7ff ff5d 	bl	800349c <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 80035e2:	e066      	b.n	80036b2 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 80035e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d012      	beq.n	8003618 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 80035f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035fc:	f023 0302 	bic.w	r3, r3, #2
 8003600:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 8003602:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800360c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003610:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 8003612:	f7ff ff5b 	bl	80034cc <Capture_TIM2_Ch1_Callback>
}
 8003616:	e04c      	b.n	80036b2 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8003618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d012      	beq.n	800364c <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 8003626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003630:	f023 0304 	bic.w	r3, r3, #4
 8003634:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 8003636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003644:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 8003646:	f7ff ff49 	bl	80034dc <Capture_TIM2_Ch2_Callback>
}
 800364a:	e032      	b.n	80036b2 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 800364c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d012      	beq.n	8003680 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 800365a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003664:	f023 0308 	bic.w	r3, r3, #8
 8003668:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 800366a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003674:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003678:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800367a:	f7ff ff37 	bl	80034ec <Capture_TIM2_Ch3_Callback>
}
 800367e:	e018      	b.n	80036b2 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8003680:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	d011      	beq.n	80036b2 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 800368e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003698:	f023 0310 	bic.w	r3, r3, #16
 800369c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 800369e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036ac:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 80036ae:	f7ff ff25 	bl	80034fc <Capture_TIM2_Ch4_Callback>
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 80036bc:	4b31      	ldr	r3, [pc, #196]	; (8003784 <TIM3_IRQHandler+0xcc>)
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 80036c8:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <TIM3_IRQHandler+0xcc>)
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	4a2d      	ldr	r2, [pc, #180]	; (8003784 <TIM3_IRQHandler+0xcc>)
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 80036d4:	f7fd fd0a 	bl	80010ec <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 80036d8:	e052      	b.n	8003780 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 80036da:	4b2a      	ldr	r3, [pc, #168]	; (8003784 <TIM3_IRQHandler+0xcc>)
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00e      	beq.n	8003704 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 80036e6:	4b27      	ldr	r3, [pc, #156]	; (8003784 <TIM3_IRQHandler+0xcc>)
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	4a26      	ldr	r2, [pc, #152]	; (8003784 <TIM3_IRQHandler+0xcc>)
 80036ec:	f023 0302 	bic.w	r3, r3, #2
 80036f0:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 80036f2:	4b24      	ldr	r3, [pc, #144]	; (8003784 <TIM3_IRQHandler+0xcc>)
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	4a23      	ldr	r2, [pc, #140]	; (8003784 <TIM3_IRQHandler+0xcc>)
 80036f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036fc:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 80036fe:	f7ff ff05 	bl	800350c <Capture_TIM3_Ch1_Callback>
}
 8003702:	e03d      	b.n	8003780 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8003704:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <TIM3_IRQHandler+0xcc>)
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00e      	beq.n	800372e <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8003710:	4b1c      	ldr	r3, [pc, #112]	; (8003784 <TIM3_IRQHandler+0xcc>)
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	4a1b      	ldr	r2, [pc, #108]	; (8003784 <TIM3_IRQHandler+0xcc>)
 8003716:	f023 0304 	bic.w	r3, r3, #4
 800371a:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <TIM3_IRQHandler+0xcc>)
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	4a18      	ldr	r2, [pc, #96]	; (8003784 <TIM3_IRQHandler+0xcc>)
 8003722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003726:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 8003728:	f7ff fef8 	bl	800351c <Capture_TIM3_Ch2_Callback>
}
 800372c:	e028      	b.n	8003780 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 800372e:	4b15      	ldr	r3, [pc, #84]	; (8003784 <TIM3_IRQHandler+0xcc>)
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00e      	beq.n	8003758 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <TIM3_IRQHandler+0xcc>)
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	4a11      	ldr	r2, [pc, #68]	; (8003784 <TIM3_IRQHandler+0xcc>)
 8003740:	f023 0308 	bic.w	r3, r3, #8
 8003744:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 8003746:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <TIM3_IRQHandler+0xcc>)
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	4a0e      	ldr	r2, [pc, #56]	; (8003784 <TIM3_IRQHandler+0xcc>)
 800374c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003750:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8003752:	f7ff feeb 	bl	800352c <Capture_TIM3_Ch3_Callback>
}
 8003756:	e013      	b.n	8003780 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 8003758:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <TIM3_IRQHandler+0xcc>)
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00d      	beq.n	8003780 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8003764:	4b07      	ldr	r3, [pc, #28]	; (8003784 <TIM3_IRQHandler+0xcc>)
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	4a06      	ldr	r2, [pc, #24]	; (8003784 <TIM3_IRQHandler+0xcc>)
 800376a:	f023 0310 	bic.w	r3, r3, #16
 800376e:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8003770:	4b04      	ldr	r3, [pc, #16]	; (8003784 <TIM3_IRQHandler+0xcc>)
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	4a03      	ldr	r2, [pc, #12]	; (8003784 <TIM3_IRQHandler+0xcc>)
 8003776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800377a:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 800377c:	f7ff fede 	bl	800353c <Capture_TIM3_Ch4_Callback>
}
 8003780:	bf00      	nop
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40000400 	.word	0x40000400

08003788 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 800378c:	4b31      	ldr	r3, [pc, #196]	; (8003854 <TIM4_IRQHandler+0xcc>)
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 8003798:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <TIM4_IRQHandler+0xcc>)
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	4a2d      	ldr	r2, [pc, #180]	; (8003854 <TIM4_IRQHandler+0xcc>)
 800379e:	f023 0301 	bic.w	r3, r3, #1
 80037a2:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 80037a4:	f7ff fe82 	bl	80034ac <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 80037a8:	e052      	b.n	8003850 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 80037aa:	4b2a      	ldr	r3, [pc, #168]	; (8003854 <TIM4_IRQHandler+0xcc>)
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00e      	beq.n	80037d4 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 80037b6:	4b27      	ldr	r3, [pc, #156]	; (8003854 <TIM4_IRQHandler+0xcc>)
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	4a26      	ldr	r2, [pc, #152]	; (8003854 <TIM4_IRQHandler+0xcc>)
 80037bc:	f023 0302 	bic.w	r3, r3, #2
 80037c0:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 80037c2:	4b24      	ldr	r3, [pc, #144]	; (8003854 <TIM4_IRQHandler+0xcc>)
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	4a23      	ldr	r2, [pc, #140]	; (8003854 <TIM4_IRQHandler+0xcc>)
 80037c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037cc:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 80037ce:	f7ff febd 	bl	800354c <Capture_TIM4_Ch1_Callback>
}
 80037d2:	e03d      	b.n	8003850 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 80037d4:	4b1f      	ldr	r3, [pc, #124]	; (8003854 <TIM4_IRQHandler+0xcc>)
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00e      	beq.n	80037fe <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 80037e0:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <TIM4_IRQHandler+0xcc>)
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	4a1b      	ldr	r2, [pc, #108]	; (8003854 <TIM4_IRQHandler+0xcc>)
 80037e6:	f023 0304 	bic.w	r3, r3, #4
 80037ea:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <TIM4_IRQHandler+0xcc>)
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	4a18      	ldr	r2, [pc, #96]	; (8003854 <TIM4_IRQHandler+0xcc>)
 80037f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037f6:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80037f8:	f7ff fec8 	bl	800358c <Capture_TIM5_Ch2_Callback>
}
 80037fc:	e028      	b.n	8003850 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <TIM4_IRQHandler+0xcc>)
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00e      	beq.n	8003828 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <TIM4_IRQHandler+0xcc>)
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	4a11      	ldr	r2, [pc, #68]	; (8003854 <TIM4_IRQHandler+0xcc>)
 8003810:	f023 0308 	bic.w	r3, r3, #8
 8003814:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 8003816:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <TIM4_IRQHandler+0xcc>)
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	4a0e      	ldr	r2, [pc, #56]	; (8003854 <TIM4_IRQHandler+0xcc>)
 800381c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003820:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 8003822:	f7ff fe9b 	bl	800355c <Capture_TIM4_Ch3_Callback>
}
 8003826:	e013      	b.n	8003850 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <TIM4_IRQHandler+0xcc>)
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00d      	beq.n	8003850 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8003834:	4b07      	ldr	r3, [pc, #28]	; (8003854 <TIM4_IRQHandler+0xcc>)
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	4a06      	ldr	r2, [pc, #24]	; (8003854 <TIM4_IRQHandler+0xcc>)
 800383a:	f023 0310 	bic.w	r3, r3, #16
 800383e:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <TIM4_IRQHandler+0xcc>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	4a03      	ldr	r2, [pc, #12]	; (8003854 <TIM4_IRQHandler+0xcc>)
 8003846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800384a:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 800384c:	f7ff fe8e 	bl	800356c <Capture_TIM4_Ch4_Callback>
}
 8003850:	bf00      	nop
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40000800 	.word	0x40000800

08003858 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 800385c:	4b31      	ldr	r3, [pc, #196]	; (8003924 <TIM5_IRQHandler+0xcc>)
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 8003868:	4b2e      	ldr	r3, [pc, #184]	; (8003924 <TIM5_IRQHandler+0xcc>)
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	4a2d      	ldr	r2, [pc, #180]	; (8003924 <TIM5_IRQHandler+0xcc>)
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8003874:	f7ff fe22 	bl	80034bc <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 8003878:	e052      	b.n	8003920 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 800387a:	4b2a      	ldr	r3, [pc, #168]	; (8003924 <TIM5_IRQHandler+0xcc>)
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00e      	beq.n	80038a4 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 8003886:	4b27      	ldr	r3, [pc, #156]	; (8003924 <TIM5_IRQHandler+0xcc>)
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	4a26      	ldr	r2, [pc, #152]	; (8003924 <TIM5_IRQHandler+0xcc>)
 800388c:	f023 0302 	bic.w	r3, r3, #2
 8003890:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8003892:	4b24      	ldr	r3, [pc, #144]	; (8003924 <TIM5_IRQHandler+0xcc>)
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	4a23      	ldr	r2, [pc, #140]	; (8003924 <TIM5_IRQHandler+0xcc>)
 8003898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800389c:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 800389e:	f7ff fe6d 	bl	800357c <Capture_TIM5_Ch1_Callback>
}
 80038a2:	e03d      	b.n	8003920 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 80038a4:	4b1f      	ldr	r3, [pc, #124]	; (8003924 <TIM5_IRQHandler+0xcc>)
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00e      	beq.n	80038ce <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 80038b0:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <TIM5_IRQHandler+0xcc>)
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	4a1b      	ldr	r2, [pc, #108]	; (8003924 <TIM5_IRQHandler+0xcc>)
 80038b6:	f023 0304 	bic.w	r3, r3, #4
 80038ba:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <TIM5_IRQHandler+0xcc>)
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	4a18      	ldr	r2, [pc, #96]	; (8003924 <TIM5_IRQHandler+0xcc>)
 80038c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038c6:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80038c8:	f7ff fe60 	bl	800358c <Capture_TIM5_Ch2_Callback>
}
 80038cc:	e028      	b.n	8003920 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <TIM5_IRQHandler+0xcc>)
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00e      	beq.n	80038f8 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <TIM5_IRQHandler+0xcc>)
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	4a11      	ldr	r2, [pc, #68]	; (8003924 <TIM5_IRQHandler+0xcc>)
 80038e0:	f023 0308 	bic.w	r3, r3, #8
 80038e4:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 80038e6:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <TIM5_IRQHandler+0xcc>)
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	4a0e      	ldr	r2, [pc, #56]	; (8003924 <TIM5_IRQHandler+0xcc>)
 80038ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038f0:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 80038f2:	f7ff fe53 	bl	800359c <Capture_TIM5_Ch3_Callback>
}
 80038f6:	e013      	b.n	8003920 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 80038f8:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <TIM5_IRQHandler+0xcc>)
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00d      	beq.n	8003920 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8003904:	4b07      	ldr	r3, [pc, #28]	; (8003924 <TIM5_IRQHandler+0xcc>)
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	4a06      	ldr	r2, [pc, #24]	; (8003924 <TIM5_IRQHandler+0xcc>)
 800390a:	f023 0310 	bic.w	r3, r3, #16
 800390e:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8003910:	4b04      	ldr	r3, [pc, #16]	; (8003924 <TIM5_IRQHandler+0xcc>)
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	4a03      	ldr	r2, [pc, #12]	; (8003924 <TIM5_IRQHandler+0xcc>)
 8003916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800391a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 800391c:	f7ff fe46 	bl	80035ac <Capture_TIM5_Ch4_Callback>
}
 8003920:	bf00      	nop
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40000c00 	.word	0x40000c00

08003928 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a88      	ldr	r2, [pc, #544]	; (8003b84 <GPIO_Config+0x238>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d106      	bne.n	8003974 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8003966:	4b88      	ldr	r3, [pc, #544]	; (8003b88 <GPIO_Config+0x23c>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	4a87      	ldr	r2, [pc, #540]	; (8003b88 <GPIO_Config+0x23c>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	6313      	str	r3, [r2, #48]	; 0x30
 8003972:	e03a      	b.n	80039ea <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a84      	ldr	r2, [pc, #528]	; (8003b8c <GPIO_Config+0x240>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d106      	bne.n	800398c <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 800397e:	4b82      	ldr	r3, [pc, #520]	; (8003b88 <GPIO_Config+0x23c>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	4a81      	ldr	r2, [pc, #516]	; (8003b88 <GPIO_Config+0x23c>)
 8003984:	f043 0302 	orr.w	r3, r3, #2
 8003988:	6313      	str	r3, [r2, #48]	; 0x30
 800398a:	e02e      	b.n	80039ea <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a7f      	ldr	r2, [pc, #508]	; (8003b90 <GPIO_Config+0x244>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d106      	bne.n	80039a4 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8003996:	4b7c      	ldr	r3, [pc, #496]	; (8003b88 <GPIO_Config+0x23c>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	4a7b      	ldr	r2, [pc, #492]	; (8003b88 <GPIO_Config+0x23c>)
 800399c:	f043 0304 	orr.w	r3, r3, #4
 80039a0:	6313      	str	r3, [r2, #48]	; 0x30
 80039a2:	e022      	b.n	80039ea <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a7a      	ldr	r2, [pc, #488]	; (8003b94 <GPIO_Config+0x248>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d106      	bne.n	80039bc <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 80039ae:	4b76      	ldr	r3, [pc, #472]	; (8003b88 <GPIO_Config+0x23c>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	4a75      	ldr	r2, [pc, #468]	; (8003b88 <GPIO_Config+0x23c>)
 80039b4:	f043 0308 	orr.w	r3, r3, #8
 80039b8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ba:	e016      	b.n	80039ea <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a75      	ldr	r2, [pc, #468]	; (8003b98 <GPIO_Config+0x24c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d106      	bne.n	80039d4 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 80039c6:	4b70      	ldr	r3, [pc, #448]	; (8003b88 <GPIO_Config+0x23c>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	4a6f      	ldr	r2, [pc, #444]	; (8003b88 <GPIO_Config+0x23c>)
 80039cc:	f043 0310 	orr.w	r3, r3, #16
 80039d0:	6313      	str	r3, [r2, #48]	; 0x30
 80039d2:	e00a      	b.n	80039ea <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a70      	ldr	r2, [pc, #448]	; (8003b9c <GPIO_Config+0x250>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d105      	bne.n	80039ea <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 80039de:	4b6a      	ldr	r3, [pc, #424]	; (8003b88 <GPIO_Config+0x23c>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	4a69      	ldr	r2, [pc, #420]	; (8003b88 <GPIO_Config+0x23c>)
 80039e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e8:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	795b      	ldrb	r3, [r3, #5]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d143      	bne.n	8003a7a <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	791b      	ldrb	r3, [r3, #4]
 80039f6:	2b07      	cmp	r3, #7
 80039f8:	d81f      	bhi.n	8003a3a <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	791b      	ldrb	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6a1a      	ldr	r2, [r3, #32]
 8003a08:	210f      	movs	r1, #15
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	4619      	mov	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	400a      	ands	r2, r1
 8003a1a:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6a1a      	ldr	r2, [r3, #32]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	7a5b      	ldrb	r3, [r3, #9]
 8003a26:	4619      	mov	r1, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2e:	4619      	mov	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	621a      	str	r2, [r3, #32]
 8003a38:	e01f      	b.n	8003a7a <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	791b      	ldrb	r3, [r3, #4]
 8003a3e:	3b08      	subs	r3, #8
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a4a:	210f      	movs	r1, #15
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	43db      	mvns	r3, r3
 8003a54:	4619      	mov	r1, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	400a      	ands	r2, r1
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	7a5b      	ldrb	r3, [r3, #9]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a70:	4619      	mov	r1, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	795b      	ldrb	r3, [r3, #5]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	791b      	ldrb	r3, [r3, #4]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	791b      	ldrb	r3, [r3, #4]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	2103      	movs	r1, #3
 8003a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6819      	ldr	r1, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	7a1b      	ldrb	r3, [r3, #8]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	791b      	ldrb	r3, [r3, #4]
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	791b      	ldrb	r3, [r3, #4]
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	408b      	lsls	r3, r1
 8003ada:	43db      	mvns	r3, r3
 8003adc:	4619      	mov	r1, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	400a      	ands	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6859      	ldr	r1, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	799b      	ldrb	r3, [r3, #6]
 8003afa:	461a      	mov	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	791b      	ldrb	r3, [r3, #4]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	791b      	ldrb	r3, [r3, #4]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	2103      	movs	r1, #3
 8003b16:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	400a      	ands	r2, r1
 8003b24:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6899      	ldr	r1, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	79db      	ldrb	r3, [r3, #7]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	791b      	ldrb	r3, [r3, #4]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	791b      	ldrb	r3, [r3, #4]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	2103      	movs	r1, #3
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	400a      	ands	r2, r1
 8003b64:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68d9      	ldr	r1, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40020000 	.word	0x40020000
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	40020400 	.word	0x40020400
 8003b90:	40020800 	.word	0x40020800
 8003b94:	40020c00 	.word	0x40020c00
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40021c00 	.word	0x40021c00

08003ba0 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d10d      	bne.n	8003bce <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699a      	ldr	r2, [r3, #24]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	791b      	ldrb	r3, [r3, #4]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	408b      	lsls	r3, r1
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8003bcc:	e00d      	b.n	8003bea <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699a      	ldr	r2, [r3, #24]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	791b      	ldrb	r3, [r3, #4]
 8003bd8:	3310      	adds	r3, #16
 8003bda:	2101      	movs	r1, #1
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	4619      	mov	r1, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	619a      	str	r2, [r3, #24]
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8003bf6:	b480      	push	{r7}
 8003bf8:	b085      	sub	sp, #20
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	791b      	ldrb	r3, [r3, #4]
 8003c06:	461a      	mov	r2, r3
 8003c08:	2301      	movs	r3, #1
 8003c0a:	4093      	lsls	r3, r2
 8003c0c:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8003c16:	897b      	ldrh	r3, [r7, #10]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	791b      	ldrb	r3, [r3, #4]
 8003c22:	461a      	mov	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	40d3      	lsrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ffd8 	bl	8003bf6 <GPIO_ReadPin>
 8003c46:	4603      	mov	r3, r0
 8003c48:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	4619      	mov	r1, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff ffa1 	bl	8003ba0 <GPIO_WritePin>
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 8003c72:	4b92      	ldr	r3, [pc, #584]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a91      	ldr	r2, [pc, #580]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003c78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c7c:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003c7e:	4b8f      	ldr	r3, [pc, #572]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 8003c86:	4b8e      	ldr	r3, [pc, #568]	; (8003ec0 <RCC_enableMaxFrequencies+0x258>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a8d      	ldr	r2, [pc, #564]	; (8003ec0 <RCC_enableMaxFrequencies+0x258>)
 8003c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c90:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 8003c92:	4b8a      	ldr	r3, [pc, #552]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4a89      	ldr	r2, [pc, #548]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003c98:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003c9c:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	f200 82fc 	bhi.w	800429e <RCC_enableMaxFrequencies+0x636>
 8003ca6:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <RCC_enableMaxFrequencies+0x44>)
 8003ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003d73 	.word	0x08003d73
 8003cb4:	08003e15 	.word	0x08003e15
 8003cb8:	08003ec9 	.word	0x08003ec9
 8003cbc:	08003f6b 	.word	0x08003f6b
 8003cc0:	0800400d 	.word	0x0800400d
 8003cc4:	080040b9 	.word	0x080040b9
 8003cc8:	0800415b 	.word	0x0800415b
 8003ccc:	080041fd 	.word	0x080041fd
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003cd0:	4b7a      	ldr	r3, [pc, #488]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4a79      	ldr	r2, [pc, #484]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003cd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cda:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003cdc:	4b77      	ldr	r3, [pc, #476]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4a76      	ldr	r2, [pc, #472]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003ce2:	f043 0310 	orr.w	r3, r3, #16
 8003ce6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003ce8:	4b74      	ldr	r3, [pc, #464]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4a73      	ldr	r2, [pc, #460]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003cee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8003cf8:	4b70      	ldr	r3, [pc, #448]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4a6f      	ldr	r2, [pc, #444]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003cfe:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8003d02:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003d04:	4b6d      	ldr	r3, [pc, #436]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4a6c      	ldr	r2, [pc, #432]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d0a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003d0e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8003d10:	4b6a      	ldr	r3, [pc, #424]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	4a69      	ldr	r2, [pc, #420]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d1a:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003d1c:	4b67      	ldr	r3, [pc, #412]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a66      	ldr	r2, [pc, #408]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d26:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003d28:	4b64      	ldr	r3, [pc, #400]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	4a63      	ldr	r2, [pc, #396]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d32:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8003d34:	4b61      	ldr	r3, [pc, #388]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a60      	ldr	r2, [pc, #384]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d3e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003d40:	4b5e      	ldr	r3, [pc, #376]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a5d      	ldr	r2, [pc, #372]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d4a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003d4c:	e000      	b.n	8003d50 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 8003d4e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003d50:	4b5a      	ldr	r3, [pc, #360]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f8      	beq.n	8003d4e <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003d5c:	4b59      	ldr	r3, [pc, #356]	; (8003ec4 <RCC_enableMaxFrequencies+0x25c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a58      	ldr	r2, [pc, #352]	; (8003ec4 <RCC_enableMaxFrequencies+0x25c>)
 8003d62:	f023 030f 	bic.w	r3, r3, #15
 8003d66:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8003d68:	4b56      	ldr	r3, [pc, #344]	; (8003ec4 <RCC_enableMaxFrequencies+0x25c>)
 8003d6a:	4a56      	ldr	r2, [pc, #344]	; (8003ec4 <RCC_enableMaxFrequencies+0x25c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6013      	str	r3, [r2, #0]

			break;
 8003d70:	e296      	b.n	80042a0 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003d72:	4b52      	ldr	r3, [pc, #328]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4a51      	ldr	r2, [pc, #324]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d7c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003d7e:	4b4f      	ldr	r3, [pc, #316]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4a4e      	ldr	r2, [pc, #312]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d84:	f043 0310 	orr.w	r3, r3, #16
 8003d88:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003d8a:	4b4c      	ldr	r3, [pc, #304]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4a4b      	ldr	r2, [pc, #300]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d90:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d98:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8003d9a:	4b48      	ldr	r3, [pc, #288]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	4a47      	ldr	r2, [pc, #284]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003da0:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8003da4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003da6:	4b45      	ldr	r3, [pc, #276]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	4a44      	ldr	r2, [pc, #272]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003dac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003db0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 8003db2:	4b42      	ldr	r3, [pc, #264]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4a41      	ldr	r2, [pc, #260]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbc:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003dbe:	4b3f      	ldr	r3, [pc, #252]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	4a3e      	ldr	r2, [pc, #248]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dc8:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003dca:	4b3c      	ldr	r3, [pc, #240]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	4a3b      	ldr	r2, [pc, #236]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003dd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dd4:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8003dd6:	4b39      	ldr	r3, [pc, #228]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	4a38      	ldr	r2, [pc, #224]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003ddc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003de0:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003de2:	4b36      	ldr	r3, [pc, #216]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a35      	ldr	r2, [pc, #212]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003de8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dec:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003dee:	e000      	b.n	8003df2 <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 8003df0:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003df2:	4b32      	ldr	r3, [pc, #200]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f8      	beq.n	8003df0 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003dfe:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <RCC_enableMaxFrequencies+0x25c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a30      	ldr	r2, [pc, #192]	; (8003ec4 <RCC_enableMaxFrequencies+0x25c>)
 8003e04:	f023 030f 	bic.w	r3, r3, #15
 8003e08:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8003e0a:	4b2e      	ldr	r3, [pc, #184]	; (8003ec4 <RCC_enableMaxFrequencies+0x25c>)
 8003e0c:	4a2d      	ldr	r2, [pc, #180]	; (8003ec4 <RCC_enableMaxFrequencies+0x25c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6013      	str	r3, [r2, #0]

			break;
 8003e12:	e245      	b.n	80042a0 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003e14:	4b29      	ldr	r3, [pc, #164]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4a28      	ldr	r2, [pc, #160]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e1e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003e20:	4b26      	ldr	r3, [pc, #152]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4a25      	ldr	r2, [pc, #148]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e26:	f043 0310 	orr.w	r3, r3, #16
 8003e2a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003e2c:	4b23      	ldr	r3, [pc, #140]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4a22      	ldr	r2, [pc, #136]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e32:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e3a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 8003e3c:	4b1f      	ldr	r3, [pc, #124]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4a1e      	ldr	r2, [pc, #120]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e42:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8003e46:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003e48:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4a1b      	ldr	r2, [pc, #108]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003e52:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8003e54:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e5e:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003e60:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e6a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003e6c:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4a12      	ldr	r2, [pc, #72]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e76:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8003e78:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a0f      	ldr	r2, [pc, #60]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e82:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003e84:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e8e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003e90:	e000      	b.n	8003e94 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 8003e92:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003e94:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <RCC_enableMaxFrequencies+0x254>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f8      	beq.n	8003e92 <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <RCC_enableMaxFrequencies+0x25c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a07      	ldr	r2, [pc, #28]	; (8003ec4 <RCC_enableMaxFrequencies+0x25c>)
 8003ea6:	f023 030f 	bic.w	r3, r3, #15
 8003eaa:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <RCC_enableMaxFrequencies+0x25c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <RCC_enableMaxFrequencies+0x25c>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6013      	str	r3, [r2, #0]


			break;
 8003eb8:	e1f2      	b.n	80042a0 <RCC_enableMaxFrequencies+0x638>
 8003eba:	bf00      	nop
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	40007000 	.word	0x40007000
 8003ec4:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003ec8:	4b79      	ldr	r3, [pc, #484]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4a78      	ldr	r2, [pc, #480]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003ece:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ed2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003ed4:	4b76      	ldr	r3, [pc, #472]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4a75      	ldr	r2, [pc, #468]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003eda:	f043 0310 	orr.w	r3, r3, #16
 8003ede:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003ee0:	4b73      	ldr	r3, [pc, #460]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	4a72      	ldr	r2, [pc, #456]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003ee6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8003ef0:	4b6f      	ldr	r3, [pc, #444]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	4a6e      	ldr	r2, [pc, #440]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003ef6:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8003efa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003efc:	4b6c      	ldr	r3, [pc, #432]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4a6b      	ldr	r2, [pc, #428]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003f06:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8003f08:	4b69      	ldr	r3, [pc, #420]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f0a:	4a69      	ldr	r2, [pc, #420]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003f10:	4b67      	ldr	r3, [pc, #412]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a66      	ldr	r2, [pc, #408]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f1a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003f1c:	4b64      	ldr	r3, [pc, #400]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	4a63      	ldr	r2, [pc, #396]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f26:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8003f28:	4b61      	ldr	r3, [pc, #388]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a60      	ldr	r2, [pc, #384]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f32:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003f34:	4b5e      	ldr	r3, [pc, #376]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a5d      	ldr	r2, [pc, #372]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f3e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003f40:	e000      	b.n	8003f44 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 8003f42:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003f44:	4b5a      	ldr	r3, [pc, #360]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f8      	beq.n	8003f42 <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003f50:	4b58      	ldr	r3, [pc, #352]	; (80040b4 <RCC_enableMaxFrequencies+0x44c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a57      	ldr	r2, [pc, #348]	; (80040b4 <RCC_enableMaxFrequencies+0x44c>)
 8003f56:	f023 030f 	bic.w	r3, r3, #15
 8003f5a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8003f5c:	4b55      	ldr	r3, [pc, #340]	; (80040b4 <RCC_enableMaxFrequencies+0x44c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a54      	ldr	r2, [pc, #336]	; (80040b4 <RCC_enableMaxFrequencies+0x44c>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	6013      	str	r3, [r2, #0]

			break;
 8003f68:	e19a      	b.n	80042a0 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003f6a:	4b51      	ldr	r3, [pc, #324]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4a50      	ldr	r2, [pc, #320]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f70:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f74:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003f76:	4b4e      	ldr	r3, [pc, #312]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4a4d      	ldr	r2, [pc, #308]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f7c:	f043 0310 	orr.w	r3, r3, #16
 8003f80:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003f82:	4b4b      	ldr	r3, [pc, #300]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4a4a      	ldr	r2, [pc, #296]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f88:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f90:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8003f92:	4b47      	ldr	r3, [pc, #284]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4a46      	ldr	r2, [pc, #280]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003f98:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8003f9c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003f9e:	4b44      	ldr	r3, [pc, #272]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4a43      	ldr	r2, [pc, #268]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003fa4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003fa8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8003faa:	4b41      	ldr	r3, [pc, #260]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003fac:	4a40      	ldr	r2, [pc, #256]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003fb2:	4b3f      	ldr	r3, [pc, #252]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	4a3e      	ldr	r2, [pc, #248]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fbc:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003fbe:	4b3c      	ldr	r3, [pc, #240]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	4a3b      	ldr	r2, [pc, #236]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003fc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fc8:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8003fca:	4b39      	ldr	r3, [pc, #228]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fd4:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003fd6:	4b36      	ldr	r3, [pc, #216]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a35      	ldr	r2, [pc, #212]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003fdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe0:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003fe2:	e000      	b.n	8003fe6 <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 8003fe4:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003fe6:	4b32      	ldr	r3, [pc, #200]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f8      	beq.n	8003fe4 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003ff2:	4b30      	ldr	r3, [pc, #192]	; (80040b4 <RCC_enableMaxFrequencies+0x44c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a2f      	ldr	r2, [pc, #188]	; (80040b4 <RCC_enableMaxFrequencies+0x44c>)
 8003ff8:	f023 030f 	bic.w	r3, r3, #15
 8003ffc:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8003ffe:	4b2d      	ldr	r3, [pc, #180]	; (80040b4 <RCC_enableMaxFrequencies+0x44c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a2c      	ldr	r2, [pc, #176]	; (80040b4 <RCC_enableMaxFrequencies+0x44c>)
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	6013      	str	r3, [r2, #0]

			break;
 800400a:	e149      	b.n	80042a0 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800400c:	4b28      	ldr	r3, [pc, #160]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	4a27      	ldr	r2, [pc, #156]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8004012:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004016:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8004018:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4a24      	ldr	r2, [pc, #144]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 800401e:	f043 0310 	orr.w	r3, r3, #16
 8004022:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8004024:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	4a21      	ldr	r2, [pc, #132]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 800402a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800402e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004032:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 8004034:	4b1e      	ldr	r3, [pc, #120]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a1d      	ldr	r2, [pc, #116]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 800403a:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 800403e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8004040:	4b1b      	ldr	r3, [pc, #108]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4a1a      	ldr	r2, [pc, #104]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8004046:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800404a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800404c:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 800404e:	4a18      	ldr	r2, [pc, #96]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8004054:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a15      	ldr	r2, [pc, #84]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 800405a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800405e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8004060:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4a12      	ldr	r2, [pc, #72]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8004066:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800406a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800406c:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4a0f      	ldr	r2, [pc, #60]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 8004072:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004076:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8004078:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a0c      	ldr	r2, [pc, #48]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 800407e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004082:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004084:	e000      	b.n	8004088 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 8004086:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004088:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <RCC_enableMaxFrequencies+0x448>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f8      	beq.n	8004086 <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8004094:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <RCC_enableMaxFrequencies+0x44c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a06      	ldr	r2, [pc, #24]	; (80040b4 <RCC_enableMaxFrequencies+0x44c>)
 800409a:	f023 030f 	bic.w	r3, r3, #15
 800409e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80040a0:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <RCC_enableMaxFrequencies+0x44c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a03      	ldr	r2, [pc, #12]	; (80040b4 <RCC_enableMaxFrequencies+0x44c>)
 80040a6:	f043 0302 	orr.w	r3, r3, #2
 80040aa:	6013      	str	r3, [r2, #0]

			break;
 80040ac:	e0f8      	b.n	80042a0 <RCC_enableMaxFrequencies+0x638>
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80040b8:	4b84      	ldr	r3, [pc, #528]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4a83      	ldr	r2, [pc, #524]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80040be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040c2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80040c4:	4b81      	ldr	r3, [pc, #516]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4a80      	ldr	r2, [pc, #512]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80040ca:	f043 0310 	orr.w	r3, r3, #16
 80040ce:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80040d0:	4b7e      	ldr	r3, [pc, #504]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4a7d      	ldr	r2, [pc, #500]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80040d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80040da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040de:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 80040e0:	4b7a      	ldr	r3, [pc, #488]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4a79      	ldr	r2, [pc, #484]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80040e6:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80040ea:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80040ec:	4b77      	ldr	r3, [pc, #476]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4a76      	ldr	r2, [pc, #472]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80040f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80040f6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80040f8:	4b74      	ldr	r3, [pc, #464]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80040fa:	4a74      	ldr	r2, [pc, #464]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8004100:	4b72      	ldr	r3, [pc, #456]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	4a71      	ldr	r2, [pc, #452]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800410a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800410c:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4a6e      	ldr	r2, [pc, #440]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004112:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004116:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8004118:	4b6c      	ldr	r3, [pc, #432]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4a6b      	ldr	r2, [pc, #428]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800411e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004122:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8004124:	4b69      	ldr	r3, [pc, #420]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a68      	ldr	r2, [pc, #416]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800412a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800412e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004130:	e000      	b.n	8004134 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 8004132:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004134:	4b65      	ldr	r3, [pc, #404]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0f8      	beq.n	8004132 <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8004140:	4b63      	ldr	r3, [pc, #396]	; (80042d0 <RCC_enableMaxFrequencies+0x668>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a62      	ldr	r2, [pc, #392]	; (80042d0 <RCC_enableMaxFrequencies+0x668>)
 8004146:	f023 030f 	bic.w	r3, r3, #15
 800414a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800414c:	4b60      	ldr	r3, [pc, #384]	; (80042d0 <RCC_enableMaxFrequencies+0x668>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a5f      	ldr	r2, [pc, #380]	; (80042d0 <RCC_enableMaxFrequencies+0x668>)
 8004152:	f043 0302 	orr.w	r3, r3, #2
 8004156:	6013      	str	r3, [r2, #0]

			break;
 8004158:	e0a2      	b.n	80042a0 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800415a:	4b5c      	ldr	r3, [pc, #368]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4a5b      	ldr	r2, [pc, #364]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004160:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004164:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8004166:	4b59      	ldr	r3, [pc, #356]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4a58      	ldr	r2, [pc, #352]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800416c:	f043 0310 	orr.w	r3, r3, #16
 8004170:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8004172:	4b56      	ldr	r3, [pc, #344]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4a55      	ldr	r2, [pc, #340]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004178:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800417c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004180:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8004182:	4b52      	ldr	r3, [pc, #328]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	4a51      	ldr	r2, [pc, #324]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004188:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 800418c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800418e:	4b4f      	ldr	r3, [pc, #316]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4a4e      	ldr	r2, [pc, #312]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004194:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004198:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800419a:	4b4c      	ldr	r3, [pc, #304]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800419c:	4a4b      	ldr	r2, [pc, #300]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80041a2:	4b4a      	ldr	r3, [pc, #296]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	4a49      	ldr	r2, [pc, #292]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80041a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ac:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80041ae:	4b47      	ldr	r3, [pc, #284]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	4a46      	ldr	r2, [pc, #280]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80041b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041b8:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80041ba:	4b44      	ldr	r3, [pc, #272]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	4a43      	ldr	r2, [pc, #268]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80041c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041c4:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80041c6:	4b41      	ldr	r3, [pc, #260]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a40      	ldr	r2, [pc, #256]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80041cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d0:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80041d2:	e000      	b.n	80041d6 <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 80041d4:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80041d6:	4b3d      	ldr	r3, [pc, #244]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f8      	beq.n	80041d4 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80041e2:	4b3b      	ldr	r3, [pc, #236]	; (80042d0 <RCC_enableMaxFrequencies+0x668>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a3a      	ldr	r2, [pc, #232]	; (80042d0 <RCC_enableMaxFrequencies+0x668>)
 80041e8:	f023 030f 	bic.w	r3, r3, #15
 80041ec:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80041ee:	4b38      	ldr	r3, [pc, #224]	; (80042d0 <RCC_enableMaxFrequencies+0x668>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a37      	ldr	r2, [pc, #220]	; (80042d0 <RCC_enableMaxFrequencies+0x668>)
 80041f4:	f043 0302 	orr.w	r3, r3, #2
 80041f8:	6013      	str	r3, [r2, #0]

			break;
 80041fa:	e051      	b.n	80042a0 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80041fc:	4b33      	ldr	r3, [pc, #204]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4a32      	ldr	r2, [pc, #200]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004206:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8004208:	4b30      	ldr	r3, [pc, #192]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4a2f      	ldr	r2, [pc, #188]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800420e:	f043 0308 	orr.w	r3, r3, #8
 8004212:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8004214:	4b2d      	ldr	r3, [pc, #180]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	4a2c      	ldr	r2, [pc, #176]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800421a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800421e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004222:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8004224:	4b29      	ldr	r3, [pc, #164]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4a28      	ldr	r2, [pc, #160]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800422a:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800422e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8004230:	4b26      	ldr	r3, [pc, #152]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4a25      	ldr	r2, [pc, #148]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004236:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800423a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800423c:	4b23      	ldr	r3, [pc, #140]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800423e:	4a23      	ldr	r2, [pc, #140]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8004244:	4b21      	ldr	r3, [pc, #132]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4a20      	ldr	r2, [pc, #128]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800424a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800424e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8004250:	4b1e      	ldr	r3, [pc, #120]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4a1d      	ldr	r2, [pc, #116]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004256:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800425a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800425c:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4a1a      	ldr	r2, [pc, #104]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 8004262:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004266:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8004268:	4b18      	ldr	r3, [pc, #96]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a17      	ldr	r2, [pc, #92]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800426e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004272:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004274:	e000      	b.n	8004278 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 8004276:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004278:	4b14      	ldr	r3, [pc, #80]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f8      	beq.n	8004276 <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8004284:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <RCC_enableMaxFrequencies+0x668>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <RCC_enableMaxFrequencies+0x668>)
 800428a:	f023 030f 	bic.w	r3, r3, #15
 800428e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8004290:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <RCC_enableMaxFrequencies+0x668>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <RCC_enableMaxFrequencies+0x668>)
 8004296:	f043 0303 	orr.w	r3, r3, #3
 800429a:	6013      	str	r3, [r2, #0]

			break;
 800429c:	e000      	b.n	80042a0 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 800429e:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4a09      	ldr	r2, [pc, #36]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80042a6:	f043 0302 	orr.w	r3, r3, #2
 80042aa:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 80042ac:	e000      	b.n	80042b0 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 80042ae:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <RCC_enableMaxFrequencies+0x664>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f8      	beq.n	80042ae <RCC_enableMaxFrequencies+0x646>
	}

//	SystemCoreClockUpdate();

}
 80042bc:	bf00      	nop
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800
 80042d0:	40023c00 	.word	0x40023c00

080042d4 <__NVIC_EnableIRQ>:
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	db0b      	blt.n	80042fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	f003 021f 	and.w	r2, r3, #31
 80042ec:	4907      	ldr	r1, [pc, #28]	; (800430c <__NVIC_EnableIRQ+0x38>)
 80042ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	2001      	movs	r0, #1
 80042f6:	fa00 f202 	lsl.w	r2, r0, r2
 80042fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	e000e100 	.word	0xe000e100

08004310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	6039      	str	r1, [r7, #0]
 800431a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800431c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004320:	2b00      	cmp	r3, #0
 8004322:	db0a      	blt.n	800433a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	b2da      	uxtb	r2, r3
 8004328:	490c      	ldr	r1, [pc, #48]	; (800435c <__NVIC_SetPriority+0x4c>)
 800432a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432e:	0112      	lsls	r2, r2, #4
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	440b      	add	r3, r1
 8004334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004338:	e00a      	b.n	8004350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	b2da      	uxtb	r2, r3
 800433e:	4908      	ldr	r1, [pc, #32]	; (8004360 <__NVIC_SetPriority+0x50>)
 8004340:	79fb      	ldrb	r3, [r7, #7]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	3b04      	subs	r3, #4
 8004348:	0112      	lsls	r2, r2, #4
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	440b      	add	r3, r1
 800434e:	761a      	strb	r2, [r3, #24]
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	e000e100 	.word	0xe000e100
 8004360:	e000ed00 	.word	0xe000ed00

08004364 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8004364:	b590      	push	{r4, r7, lr}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800436c:	b672      	cpsid	i
}
 800436e:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a91      	ldr	r2, [pc, #580]	; (80045bc <USART_Config+0x258>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d106      	bne.n	8004388 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800437a:	4b91      	ldr	r3, [pc, #580]	; (80045c0 <USART_Config+0x25c>)
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	4a90      	ldr	r2, [pc, #576]	; (80045c0 <USART_Config+0x25c>)
 8004380:	f043 0310 	orr.w	r3, r3, #16
 8004384:	6453      	str	r3, [r2, #68]	; 0x44
 8004386:	e018      	b.n	80043ba <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a8d      	ldr	r2, [pc, #564]	; (80045c4 <USART_Config+0x260>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d106      	bne.n	80043a0 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8004392:	4b8b      	ldr	r3, [pc, #556]	; (80045c0 <USART_Config+0x25c>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	4a8a      	ldr	r2, [pc, #552]	; (80045c0 <USART_Config+0x25c>)
 8004398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800439c:	6413      	str	r3, [r2, #64]	; 0x40
 800439e:	e00c      	b.n	80043ba <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a88      	ldr	r2, [pc, #544]	; (80045c8 <USART_Config+0x264>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d106      	bne.n	80043b8 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 80043aa:	4b85      	ldr	r3, [pc, #532]	; (80045c0 <USART_Config+0x25c>)
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	4a84      	ldr	r2, [pc, #528]	; (80045c0 <USART_Config+0x25c>)
 80043b0:	f043 0320 	orr.w	r3, r3, #32
 80043b4:	6453      	str	r3, [r2, #68]	; 0x44
 80043b6:	e000      	b.n	80043ba <USART_Config+0x56>
	}
	else{
		__NOP();
 80043b8:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2200      	movs	r2, #0
 80043c0:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2200      	movs	r2, #0
 80043c8:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	7a5b      	ldrb	r3, [r3, #9]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d025      	beq.n	800441e <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	7a5b      	ldrb	r3, [r3, #9]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d110      	bne.n	80043fc <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043e8:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	e018      	b.n	800442e <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800440a:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800441a:	60da      	str	r2, [r3, #12]
 800441c:	e007      	b.n	800442e <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442c:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	7a1b      	ldrb	r3, [r3, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d108      	bne.n	8004448 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004444:	60da      	str	r2, [r3, #12]
 8004446:	e007      	b.n	8004458 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004456:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	7a9b      	ldrb	r3, [r3, #10]
 800445c:	2b03      	cmp	r3, #3
 800445e:	d82f      	bhi.n	80044c0 <USART_Config+0x15c>
 8004460:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <USART_Config+0x104>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	08004479 	.word	0x08004479
 800446c:	0800448b 	.word	0x0800448b
 8004470:	0800449d 	.word	0x0800449d
 8004474:	080044af 	.word	0x080044af
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004486:	611a      	str	r2, [r3, #16]
			break;
 8004488:	e023      	b.n	80044d2 <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004498:	611a      	str	r2, [r3, #16]
			break;
 800449a:	e01a      	b.n	80044d2 <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044aa:	611a      	str	r2, [r3, #16]
			break;
 80044ac:	e011      	b.n	80044d2 <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80044bc:	611a      	str	r2, [r3, #16]
			break;
 80044be:	e008      	b.n	80044d2 <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80044ce:	611a      	str	r2, [r3, #16]
			break;
 80044d0:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681c      	ldr	r4, [r3, #0]
 80044da:	4611      	mov	r1, r2
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f8d7 	bl	8004690 <brrCalculus>
 80044e2:	4603      	mov	r3, r0
 80044e4:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	799b      	ldrb	r3, [r3, #6]
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d82e      	bhi.n	800454c <USART_Config+0x1e8>
 80044ee:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <USART_Config+0x190>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004505 	.word	0x08004505
 80044f8:	08004517 	.word	0x08004517
 80044fc:	08004529 	.word	0x08004529
 8004500:	0800453b 	.word	0x0800453b
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0208 	orr.w	r2, r2, #8
 8004512:	60da      	str	r2, [r3, #12]
			break;
 8004514:	e023      	b.n	800455e <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0204 	orr.w	r2, r2, #4
 8004524:	60da      	str	r2, [r3, #12]
			break;
 8004526:	e01a      	b.n	800455e <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 020c 	orr.w	r2, r2, #12
 8004536:	60da      	str	r2, [r3, #12]
			break;
 8004538:	e011      	b.n	800455e <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 020c 	bic.w	r2, r2, #12
 8004548:	60da      	str	r2, [r3, #12]
			break;
 800454a:	e008      	b.n	800455e <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 020c 	bic.w	r2, r2, #12
 800455a:	60da      	str	r2, [r3, #12]
			break;
 800455c:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	799b      	ldrb	r3, [r3, #6]
 8004562:	2b03      	cmp	r3, #3
 8004564:	d008      	beq.n	8004578 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	e007      	b.n	8004588 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004586:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	795b      	ldrb	r3, [r3, #5]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d139      	bne.n	8004604 <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0220 	orr.w	r2, r2, #32
 800459e:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a05      	ldr	r2, [pc, #20]	; (80045bc <USART_Config+0x258>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d110      	bne.n	80045cc <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 80045aa:	2025      	movs	r0, #37	; 0x25
 80045ac:	f7ff fe92 	bl	80042d4 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 80045b0:	2101      	movs	r1, #1
 80045b2:	2025      	movs	r0, #37	; 0x25
 80045b4:	f7ff feac 	bl	8004310 <__NVIC_SetPriority>
 80045b8:	e02c      	b.n	8004614 <USART_Config+0x2b0>
 80045ba:	bf00      	nop
 80045bc:	40011000 	.word	0x40011000
 80045c0:	40023800 	.word	0x40023800
 80045c4:	40004400 	.word	0x40004400
 80045c8:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a2c      	ldr	r2, [pc, #176]	; (8004684 <USART_Config+0x320>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d107      	bne.n	80045e6 <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 80045d6:	2026      	movs	r0, #38	; 0x26
 80045d8:	f7ff fe7c 	bl	80042d4 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 80045dc:	2101      	movs	r1, #1
 80045de:	2026      	movs	r0, #38	; 0x26
 80045e0:	f7ff fe96 	bl	8004310 <__NVIC_SetPriority>
 80045e4:	e016      	b.n	8004614 <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a27      	ldr	r2, [pc, #156]	; (8004688 <USART_Config+0x324>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d107      	bne.n	8004600 <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 80045f0:	2047      	movs	r0, #71	; 0x47
 80045f2:	f7ff fe6f 	bl	80042d4 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 80045f6:	2101      	movs	r1, #1
 80045f8:	2047      	movs	r0, #71	; 0x47
 80045fa:	f7ff fe89 	bl	8004310 <__NVIC_SetPriority>
 80045fe:	e009      	b.n	8004614 <USART_Config+0x2b0>
		}
		else{
				__NOP();
 8004600:	bf00      	nop
 8004602:	e007      	b.n	8004614 <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0220 	bic.w	r2, r2, #32
 8004612:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	791b      	ldrb	r3, [r3, #4]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d124      	bne.n	8004666 <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800462a:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a16      	ldr	r2, [pc, #88]	; (800468c <USART_Config+0x328>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d103      	bne.n	800463e <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8004636:	2025      	movs	r0, #37	; 0x25
 8004638:	f7ff fe4c 	bl	80042d4 <__NVIC_EnableIRQ>
 800463c:	e01b      	b.n	8004676 <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a10      	ldr	r2, [pc, #64]	; (8004684 <USART_Config+0x320>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d103      	bne.n	8004650 <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8004648:	2026      	movs	r0, #38	; 0x26
 800464a:	f7ff fe43 	bl	80042d4 <__NVIC_EnableIRQ>
 800464e:	e012      	b.n	8004676 <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a0c      	ldr	r2, [pc, #48]	; (8004688 <USART_Config+0x324>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d103      	bne.n	8004662 <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800465a:	2047      	movs	r0, #71	; 0x47
 800465c:	f7ff fe3a 	bl	80042d4 <__NVIC_EnableIRQ>
 8004660:	e009      	b.n	8004676 <USART_Config+0x312>
		}
		else{
				__NOP();
 8004662:	bf00      	nop
 8004664:	e007      	b.n	8004676 <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004674:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004676:	b662      	cpsie	i
}
 8004678:	bf00      	nop
	}

	__enable_irq();
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	bd90      	pop	{r4, r7, pc}
 8004682:	bf00      	nop
 8004684:	40004400 	.word	0x40004400
 8004688:	40011400 	.word	0x40011400
 800468c:	40011000 	.word	0x40011000

08004690 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8004690:	b5b0      	push	{r4, r5, r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	79db      	ldrb	r3, [r3, #7]
 800469e:	2b03      	cmp	r3, #3
 80046a0:	f200 8217 	bhi.w	8004ad2 <brrCalculus+0x442>
 80046a4:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <brrCalculus+0x1c>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	080046bd 	.word	0x080046bd
 80046b0:	080047b7 	.word	0x080047b7
 80046b4:	080048d1 	.word	0x080048d1
 80046b8:	080049d9 	.word	0x080049d9

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 80046bc:	4980      	ldr	r1, [pc, #512]	; (80048c0 <brrCalculus+0x230>)
 80046be:	a37c      	add	r3, pc, #496	; (adr r3, 80048b0 <brrCalculus+0x220>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	ee17 0a90 	vmov	r0, s15
 80046d6:	f7fb ff4f 	bl	8000578 <__aeabi_f2d>
 80046da:	4b79      	ldr	r3, [pc, #484]	; (80048c0 <brrCalculus+0x230>)
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f7fb ffa2 	bl	8000628 <__aeabi_dmul>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4975      	ldr	r1, [pc, #468]	; (80048c0 <brrCalculus+0x230>)
 80046ea:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80046ee:	4b74      	ldr	r3, [pc, #464]	; (80048c0 <brrCalculus+0x230>)
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	4610      	mov	r0, r2
 80046f6:	4619      	mov	r1, r3
 80046f8:	f7fc fa46 	bl	8000b88 <__aeabi_d2iz>
 80046fc:	4603      	mov	r3, r0
 80046fe:	b29a      	uxth	r2, r3
 8004700:	4b70      	ldr	r3, [pc, #448]	; (80048c4 <brrCalculus+0x234>)
 8004702:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004704:	4b6e      	ldr	r3, [pc, #440]	; (80048c0 <brrCalculus+0x230>)
 8004706:	e9d3 4500 	ldrd	r4, r5, [r3]
 800470a:	4b6d      	ldr	r3, [pc, #436]	; (80048c0 <brrCalculus+0x230>)
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	4610      	mov	r0, r2
 8004712:	4619      	mov	r1, r3
 8004714:	f7fc fa38 	bl	8000b88 <__aeabi_d2iz>
 8004718:	4603      	mov	r3, r0
 800471a:	4618      	mov	r0, r3
 800471c:	f7fb ff1a 	bl	8000554 <__aeabi_i2d>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4620      	mov	r0, r4
 8004726:	4629      	mov	r1, r5
 8004728:	f7fb fdc6 	bl	80002b8 <__aeabi_dsub>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4610      	mov	r0, r2
 8004732:	4619      	mov	r1, r3
 8004734:	f7fc fa50 	bl	8000bd8 <__aeabi_d2f>
 8004738:	4603      	mov	r3, r0
 800473a:	4a63      	ldr	r2, [pc, #396]	; (80048c8 <brrCalculus+0x238>)
 800473c:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800473e:	4b62      	ldr	r3, [pc, #392]	; (80048c8 <brrCalculus+0x238>)
 8004740:	edd3 7a00 	vldr	s15, [r3]
 8004744:	2004      	movs	r0, #4
 8004746:	eeb0 0a67 	vmov.f32	s0, s15
 800474a:	f000 fa6d 	bl	8004c28 <roundToNDecimals>
 800474e:	eef0 7a40 	vmov.f32	s15, s0
 8004752:	4b5d      	ldr	r3, [pc, #372]	; (80048c8 <brrCalculus+0x238>)
 8004754:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8004758:	4b5b      	ldr	r3, [pc, #364]	; (80048c8 <brrCalculus+0x238>)
 800475a:	edd3 7a00 	vldr	s15, [r3]
 800475e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004766:	4b58      	ldr	r3, [pc, #352]	; (80048c8 <brrCalculus+0x238>)
 8004768:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800476c:	4b56      	ldr	r3, [pc, #344]	; (80048c8 <brrCalculus+0x238>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7fb ff01 	bl	8000578 <__aeabi_f2d>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	ec43 2b10 	vmov	d0, r2, r3
 800477e:	f003 fe71 	bl	8008464 <round>
 8004782:	ec53 2b10 	vmov	r2, r3, d0
 8004786:	4610      	mov	r0, r2
 8004788:	4619      	mov	r1, r3
 800478a:	f7fc fa25 	bl	8000bd8 <__aeabi_d2f>
 800478e:	4603      	mov	r3, r0
 8004790:	4a4d      	ldr	r2, [pc, #308]	; (80048c8 <brrCalculus+0x238>)
 8004792:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8004794:	4b4b      	ldr	r3, [pc, #300]	; (80048c4 <brrCalculus+0x234>)
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	b29a      	uxth	r2, r3
 800479c:	4b4a      	ldr	r3, [pc, #296]	; (80048c8 <brrCalculus+0x238>)
 800479e:	edd3 7a00 	vldr	s15, [r3]
 80047a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a6:	ee17 3a90 	vmov	r3, s15
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	4313      	orrs	r3, r2
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	4b46      	ldr	r3, [pc, #280]	; (80048cc <brrCalculus+0x23c>)
 80047b2:	801a      	strh	r2, [r3, #0]


		break;
 80047b4:	e18f      	b.n	8004ad6 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 80047b6:	4942      	ldr	r1, [pc, #264]	; (80048c0 <brrCalculus+0x230>)
 80047b8:	a33f      	add	r3, pc, #252	; (adr r3, 80048b8 <brrCalculus+0x228>)
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	ee07 3a90 	vmov	s15, r3
 80047c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047cc:	ee17 0a90 	vmov	r0, s15
 80047d0:	f7fb fed2 	bl	8000578 <__aeabi_f2d>
 80047d4:	4b3a      	ldr	r3, [pc, #232]	; (80048c0 <brrCalculus+0x230>)
 80047d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047da:	f7fb ff25 	bl	8000628 <__aeabi_dmul>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4937      	ldr	r1, [pc, #220]	; (80048c0 <brrCalculus+0x230>)
 80047e4:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80047e8:	4b35      	ldr	r3, [pc, #212]	; (80048c0 <brrCalculus+0x230>)
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	f7fc f9c9 	bl	8000b88 <__aeabi_d2iz>
 80047f6:	4603      	mov	r3, r0
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	4b32      	ldr	r3, [pc, #200]	; (80048c4 <brrCalculus+0x234>)
 80047fc:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80047fe:	4b30      	ldr	r3, [pc, #192]	; (80048c0 <brrCalculus+0x230>)
 8004800:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004804:	4b2e      	ldr	r3, [pc, #184]	; (80048c0 <brrCalculus+0x230>)
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	4610      	mov	r0, r2
 800480c:	4619      	mov	r1, r3
 800480e:	f7fc f9bb 	bl	8000b88 <__aeabi_d2iz>
 8004812:	4603      	mov	r3, r0
 8004814:	4618      	mov	r0, r3
 8004816:	f7fb fe9d 	bl	8000554 <__aeabi_i2d>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4620      	mov	r0, r4
 8004820:	4629      	mov	r1, r5
 8004822:	f7fb fd49 	bl	80002b8 <__aeabi_dsub>
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	4610      	mov	r0, r2
 800482c:	4619      	mov	r1, r3
 800482e:	f7fc f9d3 	bl	8000bd8 <__aeabi_d2f>
 8004832:	4603      	mov	r3, r0
 8004834:	4a24      	ldr	r2, [pc, #144]	; (80048c8 <brrCalculus+0x238>)
 8004836:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004838:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <brrCalculus+0x238>)
 800483a:	edd3 7a00 	vldr	s15, [r3]
 800483e:	2004      	movs	r0, #4
 8004840:	eeb0 0a67 	vmov.f32	s0, s15
 8004844:	f000 f9f0 	bl	8004c28 <roundToNDecimals>
 8004848:	eef0 7a40 	vmov.f32	s15, s0
 800484c:	4b1e      	ldr	r3, [pc, #120]	; (80048c8 <brrCalculus+0x238>)
 800484e:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8004852:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <brrCalculus+0x238>)
 8004854:	edd3 7a00 	vldr	s15, [r3]
 8004858:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800485c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004860:	4b19      	ldr	r3, [pc, #100]	; (80048c8 <brrCalculus+0x238>)
 8004862:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8004866:	4b18      	ldr	r3, [pc, #96]	; (80048c8 <brrCalculus+0x238>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f7fb fe84 	bl	8000578 <__aeabi_f2d>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	ec43 2b10 	vmov	d0, r2, r3
 8004878:	f003 fdf4 	bl	8008464 <round>
 800487c:	ec53 2b10 	vmov	r2, r3, d0
 8004880:	4610      	mov	r0, r2
 8004882:	4619      	mov	r1, r3
 8004884:	f7fc f9a8 	bl	8000bd8 <__aeabi_d2f>
 8004888:	4603      	mov	r3, r0
 800488a:	4a0f      	ldr	r2, [pc, #60]	; (80048c8 <brrCalculus+0x238>)
 800488c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800488e:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <brrCalculus+0x234>)
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	b29a      	uxth	r2, r3
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <brrCalculus+0x238>)
 8004898:	edd3 7a00 	vldr	s15, [r3]
 800489c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048a0:	ee17 3a90 	vmov	r3, s15
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	4313      	orrs	r3, r2
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	4b08      	ldr	r3, [pc, #32]	; (80048cc <brrCalculus+0x23c>)
 80048ac:	801a      	strh	r2, [r3, #0]


		break;
 80048ae:	e112      	b.n	8004ad6 <brrCalculus+0x446>
 80048b0:	b4e81b4f 	.word	0xb4e81b4f
 80048b4:	3edb4e81 	.word	0x3edb4e81
 80048b8:	b4e81b4f 	.word	0xb4e81b4f
 80048bc:	3ecb4e81 	.word	0x3ecb4e81
 80048c0:	20011a80 	.word	0x20011a80
 80048c4:	20011a76 	.word	0x20011a76
 80048c8:	20011a78 	.word	0x20011a78
 80048cc:	20011a74 	.word	0x20011a74
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 80048d0:	4989      	ldr	r1, [pc, #548]	; (8004af8 <brrCalculus+0x468>)
 80048d2:	a385      	add	r3, pc, #532	; (adr r3, 8004ae8 <brrCalculus+0x458>)
 80048d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d8:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e6:	ee17 0a90 	vmov	r0, s15
 80048ea:	f7fb fe45 	bl	8000578 <__aeabi_f2d>
 80048ee:	4b82      	ldr	r3, [pc, #520]	; (8004af8 <brrCalculus+0x468>)
 80048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f4:	f7fb fe98 	bl	8000628 <__aeabi_dmul>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	497e      	ldr	r1, [pc, #504]	; (8004af8 <brrCalculus+0x468>)
 80048fe:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8004902:	4b7d      	ldr	r3, [pc, #500]	; (8004af8 <brrCalculus+0x468>)
 8004904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	f7fc f93c 	bl	8000b88 <__aeabi_d2iz>
 8004910:	4603      	mov	r3, r0
 8004912:	b29a      	uxth	r2, r3
 8004914:	4b79      	ldr	r3, [pc, #484]	; (8004afc <brrCalculus+0x46c>)
 8004916:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004918:	4b77      	ldr	r3, [pc, #476]	; (8004af8 <brrCalculus+0x468>)
 800491a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800491e:	4b76      	ldr	r3, [pc, #472]	; (8004af8 <brrCalculus+0x468>)
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	f7fc f92e 	bl	8000b88 <__aeabi_d2iz>
 800492c:	4603      	mov	r3, r0
 800492e:	4618      	mov	r0, r3
 8004930:	f7fb fe10 	bl	8000554 <__aeabi_i2d>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	4620      	mov	r0, r4
 800493a:	4629      	mov	r1, r5
 800493c:	f7fb fcbc 	bl	80002b8 <__aeabi_dsub>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4610      	mov	r0, r2
 8004946:	4619      	mov	r1, r3
 8004948:	f7fc f946 	bl	8000bd8 <__aeabi_d2f>
 800494c:	4603      	mov	r3, r0
 800494e:	4a6c      	ldr	r2, [pc, #432]	; (8004b00 <brrCalculus+0x470>)
 8004950:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004952:	4b6b      	ldr	r3, [pc, #428]	; (8004b00 <brrCalculus+0x470>)
 8004954:	edd3 7a00 	vldr	s15, [r3]
 8004958:	2004      	movs	r0, #4
 800495a:	eeb0 0a67 	vmov.f32	s0, s15
 800495e:	f000 f963 	bl	8004c28 <roundToNDecimals>
 8004962:	eef0 7a40 	vmov.f32	s15, s0
 8004966:	4b66      	ldr	r3, [pc, #408]	; (8004b00 <brrCalculus+0x470>)
 8004968:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800496c:	4b64      	ldr	r3, [pc, #400]	; (8004b00 <brrCalculus+0x470>)
 800496e:	edd3 7a00 	vldr	s15, [r3]
 8004972:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800497a:	4b61      	ldr	r3, [pc, #388]	; (8004b00 <brrCalculus+0x470>)
 800497c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8004980:	4b5f      	ldr	r3, [pc, #380]	; (8004b00 <brrCalculus+0x470>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f7fb fdf7 	bl	8000578 <__aeabi_f2d>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	ec43 2b10 	vmov	d0, r2, r3
 8004992:	f003 fd67 	bl	8008464 <round>
 8004996:	ec51 0b10 	vmov	r0, r1, d0
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	4b59      	ldr	r3, [pc, #356]	; (8004b04 <brrCalculus+0x474>)
 80049a0:	f7fb fc8c 	bl	80002bc <__adddf3>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4610      	mov	r0, r2
 80049aa:	4619      	mov	r1, r3
 80049ac:	f7fc f914 	bl	8000bd8 <__aeabi_d2f>
 80049b0:	4603      	mov	r3, r0
 80049b2:	4a53      	ldr	r2, [pc, #332]	; (8004b00 <brrCalculus+0x470>)
 80049b4:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80049b6:	4b51      	ldr	r3, [pc, #324]	; (8004afc <brrCalculus+0x46c>)
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	b29a      	uxth	r2, r3
 80049be:	4b50      	ldr	r3, [pc, #320]	; (8004b00 <brrCalculus+0x470>)
 80049c0:	edd3 7a00 	vldr	s15, [r3]
 80049c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c8:	ee17 3a90 	vmov	r3, s15
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	4313      	orrs	r3, r2
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	4b4d      	ldr	r3, [pc, #308]	; (8004b08 <brrCalculus+0x478>)
 80049d4:	801a      	strh	r2, [r3, #0]


		break;
 80049d6:	e07e      	b.n	8004ad6 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 80049d8:	4947      	ldr	r1, [pc, #284]	; (8004af8 <brrCalculus+0x468>)
 80049da:	a345      	add	r3, pc, #276	; (adr r3, 8004af0 <brrCalculus+0x460>)
 80049dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e0:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ee:	ee17 0a90 	vmov	r0, s15
 80049f2:	f7fb fdc1 	bl	8000578 <__aeabi_f2d>
 80049f6:	4b40      	ldr	r3, [pc, #256]	; (8004af8 <brrCalculus+0x468>)
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	f7fb fe14 	bl	8000628 <__aeabi_dmul>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	493c      	ldr	r1, [pc, #240]	; (8004af8 <brrCalculus+0x468>)
 8004a06:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8004a0a:	4b3b      	ldr	r3, [pc, #236]	; (8004af8 <brrCalculus+0x468>)
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	4610      	mov	r0, r2
 8004a12:	4619      	mov	r1, r3
 8004a14:	f7fc f8b8 	bl	8000b88 <__aeabi_d2iz>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	4b37      	ldr	r3, [pc, #220]	; (8004afc <brrCalculus+0x46c>)
 8004a1e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004a20:	4b35      	ldr	r3, [pc, #212]	; (8004af8 <brrCalculus+0x468>)
 8004a22:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004a26:	4b34      	ldr	r3, [pc, #208]	; (8004af8 <brrCalculus+0x468>)
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	4619      	mov	r1, r3
 8004a30:	f7fc f8aa 	bl	8000b88 <__aeabi_d2iz>
 8004a34:	4603      	mov	r3, r0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fb fd8c 	bl	8000554 <__aeabi_i2d>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4620      	mov	r0, r4
 8004a42:	4629      	mov	r1, r5
 8004a44:	f7fb fc38 	bl	80002b8 <__aeabi_dsub>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f7fc f8c2 	bl	8000bd8 <__aeabi_d2f>
 8004a54:	4603      	mov	r3, r0
 8004a56:	4a2a      	ldr	r2, [pc, #168]	; (8004b00 <brrCalculus+0x470>)
 8004a58:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004a5a:	4b29      	ldr	r3, [pc, #164]	; (8004b00 <brrCalculus+0x470>)
 8004a5c:	edd3 7a00 	vldr	s15, [r3]
 8004a60:	2004      	movs	r0, #4
 8004a62:	eeb0 0a67 	vmov.f32	s0, s15
 8004a66:	f000 f8df 	bl	8004c28 <roundToNDecimals>
 8004a6a:	eef0 7a40 	vmov.f32	s15, s0
 8004a6e:	4b24      	ldr	r3, [pc, #144]	; (8004b00 <brrCalculus+0x470>)
 8004a70:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8004a74:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <brrCalculus+0x470>)
 8004a76:	edd3 7a00 	vldr	s15, [r3]
 8004a7a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a82:	4b1f      	ldr	r3, [pc, #124]	; (8004b00 <brrCalculus+0x470>)
 8004a84:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8004a88:	4b1d      	ldr	r3, [pc, #116]	; (8004b00 <brrCalculus+0x470>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fb fd73 	bl	8000578 <__aeabi_f2d>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	ec43 2b10 	vmov	d0, r2, r3
 8004a9a:	f003 fce3 	bl	8008464 <round>
 8004a9e:	ec53 2b10 	vmov	r2, r3, d0
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	f7fc f897 	bl	8000bd8 <__aeabi_d2f>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4a14      	ldr	r2, [pc, #80]	; (8004b00 <brrCalculus+0x470>)
 8004aae:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8004ab0:	4b12      	ldr	r3, [pc, #72]	; (8004afc <brrCalculus+0x46c>)
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <brrCalculus+0x470>)
 8004aba:	edd3 7a00 	vldr	s15, [r3]
 8004abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ac2:	ee17 3a90 	vmov	r3, s15
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <brrCalculus+0x478>)
 8004ace:	801a      	strh	r2, [r3, #0]


		break;
 8004ad0:	e001      	b.n	8004ad6 <brrCalculus+0x446>
	}
	default:{

		__NOP();
 8004ad2:	bf00      	nop
		break;
 8004ad4:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <brrCalculus+0x478>)
 8004ad8:	881b      	ldrh	r3, [r3, #0]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	f3af 8000 	nop.w
 8004ae8:	789abcdf 	.word	0x789abcdf
 8004aec:	3ec23456 	.word	0x3ec23456
 8004af0:	789abcdf 	.word	0x789abcdf
 8004af4:	3ea23456 	.word	0x3ea23456
 8004af8:	20011a80 	.word	0x20011a80
 8004afc:	20011a76 	.word	0x20011a76
 8004b00:	20011a78 	.word	0x20011a78
 8004b04:	3ff00000 	.word	0x3ff00000
 8004b08:	20011a74 	.word	0x20011a74

08004b0c <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8004b16:	e000      	b.n	8004b1a <writeChar+0xe>
		__NOP();
 8004b18:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f7      	beq.n	8004b18 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	605a      	str	r2, [r3, #4]

}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 8004b46:	e008      	b.n	8004b5a <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff ffdc 	bl	8004b0c <writeChar>
		msgToSend ++ ;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	3301      	adds	r3, #1
 8004b58:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f2      	bne.n	8004b48 <writeMsg+0xc>
	}
}
 8004b62:	bf00      	nop
 8004b64:	bf00      	nop
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
	__NOP();
 8004b70:	bf00      	nop
}
 8004b72:	bf00      	nop
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
	__NOP();
 8004b80:	bf00      	nop
}
 8004b82:	bf00      	nop
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
	return auxRxData;
 8004b90:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <getRxData+0x14>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20011a88 	.word	0x20011a88

08004ba4 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8004ba8:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <USART2_IRQHandler+0x24>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d006      	beq.n	8004bc2 <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 8004bb4:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <USART2_IRQHandler+0x24>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <USART2_IRQHandler+0x28>)
 8004bbc:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8004bbe:	f7fc fa89 	bl	80010d4 <usart2Rx_Callback>
	}

}
 8004bc2:	bf00      	nop
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40004400 	.word	0x40004400
 8004bcc:	20011a88 	.word	0x20011a88

08004bd0 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <USART1_IRQHandler+0x24>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d006      	beq.n	8004bee <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8004be0:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <USART1_IRQHandler+0x24>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	4b04      	ldr	r3, [pc, #16]	; (8004bf8 <USART1_IRQHandler+0x28>)
 8004be8:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8004bea:	f7ff ffbf 	bl	8004b6c <usart1Rx_Callback>
	}
}
 8004bee:	bf00      	nop
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40011000 	.word	0x40011000
 8004bf8:	20011a88 	.word	0x20011a88

08004bfc <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <USART6_IRQHandler+0x24>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d006      	beq.n	8004c1a <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8004c0c:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <USART6_IRQHandler+0x24>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <USART6_IRQHandler+0x28>)
 8004c14:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8004c16:	f7ff ffb1 	bl	8004b7c <usart6Rx_Callback>
	}

}
 8004c1a:	bf00      	nop
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40011400 	.word	0x40011400
 8004c24:	20011a88 	.word	0x20011a88

08004c28 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004c32:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 8004c34:	6838      	ldr	r0, [r7, #0]
 8004c36:	f7fb fc8d 	bl	8000554 <__aeabi_i2d>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	ec43 2b11 	vmov	d1, r2, r3
 8004c42:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8004cc0 <roundToNDecimals+0x98>
 8004c46:	f003 fc53 	bl	80084f0 <pow>
 8004c4a:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fb fc92 	bl	8000578 <__aeabi_f2d>
 8004c54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c58:	f7fb fce6 	bl	8000628 <__aeabi_dmul>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4610      	mov	r0, r2
 8004c62:	4619      	mov	r1, r3
 8004c64:	f7fb ffb8 	bl	8000bd8 <__aeabi_d2f>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	607b      	str	r3, [r7, #4]

    number = round(number);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7fb fc83 	bl	8000578 <__aeabi_f2d>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	ec43 2b10 	vmov	d0, r2, r3
 8004c7a:	f003 fbf3 	bl	8008464 <round>
 8004c7e:	ec53 2b10 	vmov	r2, r3, d0
 8004c82:	4610      	mov	r0, r2
 8004c84:	4619      	mov	r1, r3
 8004c86:	f7fb ffa7 	bl	8000bd8 <__aeabi_d2f>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	607b      	str	r3, [r7, #4]

    number /= factor;
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fb fc72 	bl	8000578 <__aeabi_f2d>
 8004c94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c98:	f7fb fdf0 	bl	800087c <__aeabi_ddiv>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	f7fb ff98 	bl	8000bd8 <__aeabi_d2f>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	607b      	str	r3, [r7, #4]

    return number;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	ee07 3a90 	vmov	s15, r3
}
 8004cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	f3af 8000 	nop.w
 8004cc0:	00000000 	.word	0x00000000
 8004cc4:	40240000 	.word	0x40240000

08004cc8 <__errno>:
 8004cc8:	4b01      	ldr	r3, [pc, #4]	; (8004cd0 <__errno+0x8>)
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	20000008 	.word	0x20000008

08004cd4 <__libc_init_array>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4d0d      	ldr	r5, [pc, #52]	; (8004d0c <__libc_init_array+0x38>)
 8004cd8:	4c0d      	ldr	r4, [pc, #52]	; (8004d10 <__libc_init_array+0x3c>)
 8004cda:	1b64      	subs	r4, r4, r5
 8004cdc:	10a4      	asrs	r4, r4, #2
 8004cde:	2600      	movs	r6, #0
 8004ce0:	42a6      	cmp	r6, r4
 8004ce2:	d109      	bne.n	8004cf8 <__libc_init_array+0x24>
 8004ce4:	4d0b      	ldr	r5, [pc, #44]	; (8004d14 <__libc_init_array+0x40>)
 8004ce6:	4c0c      	ldr	r4, [pc, #48]	; (8004d18 <__libc_init_array+0x44>)
 8004ce8:	f004 fb2a 	bl	8009340 <_init>
 8004cec:	1b64      	subs	r4, r4, r5
 8004cee:	10a4      	asrs	r4, r4, #2
 8004cf0:	2600      	movs	r6, #0
 8004cf2:	42a6      	cmp	r6, r4
 8004cf4:	d105      	bne.n	8004d02 <__libc_init_array+0x2e>
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfc:	4798      	blx	r3
 8004cfe:	3601      	adds	r6, #1
 8004d00:	e7ee      	b.n	8004ce0 <__libc_init_array+0xc>
 8004d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d06:	4798      	blx	r3
 8004d08:	3601      	adds	r6, #1
 8004d0a:	e7f2      	b.n	8004cf2 <__libc_init_array+0x1e>
 8004d0c:	08009a70 	.word	0x08009a70
 8004d10:	08009a70 	.word	0x08009a70
 8004d14:	08009a70 	.word	0x08009a70
 8004d18:	08009a74 	.word	0x08009a74

08004d1c <malloc>:
 8004d1c:	4b02      	ldr	r3, [pc, #8]	; (8004d28 <malloc+0xc>)
 8004d1e:	4601      	mov	r1, r0
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	f000 b877 	b.w	8004e14 <_malloc_r>
 8004d26:	bf00      	nop
 8004d28:	20000008 	.word	0x20000008

08004d2c <memset>:
 8004d2c:	4402      	add	r2, r0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d100      	bne.n	8004d36 <memset+0xa>
 8004d34:	4770      	bx	lr
 8004d36:	f803 1b01 	strb.w	r1, [r3], #1
 8004d3a:	e7f9      	b.n	8004d30 <memset+0x4>

08004d3c <_free_r>:
 8004d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d3e:	2900      	cmp	r1, #0
 8004d40:	d044      	beq.n	8004dcc <_free_r+0x90>
 8004d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d46:	9001      	str	r0, [sp, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8004d4e:	bfb8      	it	lt
 8004d50:	18e4      	addlt	r4, r4, r3
 8004d52:	f001 fc9f 	bl	8006694 <__malloc_lock>
 8004d56:	4a1e      	ldr	r2, [pc, #120]	; (8004dd0 <_free_r+0x94>)
 8004d58:	9801      	ldr	r0, [sp, #4]
 8004d5a:	6813      	ldr	r3, [r2, #0]
 8004d5c:	b933      	cbnz	r3, 8004d6c <_free_r+0x30>
 8004d5e:	6063      	str	r3, [r4, #4]
 8004d60:	6014      	str	r4, [r2, #0]
 8004d62:	b003      	add	sp, #12
 8004d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d68:	f001 bc9a 	b.w	80066a0 <__malloc_unlock>
 8004d6c:	42a3      	cmp	r3, r4
 8004d6e:	d908      	bls.n	8004d82 <_free_r+0x46>
 8004d70:	6825      	ldr	r5, [r4, #0]
 8004d72:	1961      	adds	r1, r4, r5
 8004d74:	428b      	cmp	r3, r1
 8004d76:	bf01      	itttt	eq
 8004d78:	6819      	ldreq	r1, [r3, #0]
 8004d7a:	685b      	ldreq	r3, [r3, #4]
 8004d7c:	1949      	addeq	r1, r1, r5
 8004d7e:	6021      	streq	r1, [r4, #0]
 8004d80:	e7ed      	b.n	8004d5e <_free_r+0x22>
 8004d82:	461a      	mov	r2, r3
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	b10b      	cbz	r3, 8004d8c <_free_r+0x50>
 8004d88:	42a3      	cmp	r3, r4
 8004d8a:	d9fa      	bls.n	8004d82 <_free_r+0x46>
 8004d8c:	6811      	ldr	r1, [r2, #0]
 8004d8e:	1855      	adds	r5, r2, r1
 8004d90:	42a5      	cmp	r5, r4
 8004d92:	d10b      	bne.n	8004dac <_free_r+0x70>
 8004d94:	6824      	ldr	r4, [r4, #0]
 8004d96:	4421      	add	r1, r4
 8004d98:	1854      	adds	r4, r2, r1
 8004d9a:	42a3      	cmp	r3, r4
 8004d9c:	6011      	str	r1, [r2, #0]
 8004d9e:	d1e0      	bne.n	8004d62 <_free_r+0x26>
 8004da0:	681c      	ldr	r4, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	6053      	str	r3, [r2, #4]
 8004da6:	4421      	add	r1, r4
 8004da8:	6011      	str	r1, [r2, #0]
 8004daa:	e7da      	b.n	8004d62 <_free_r+0x26>
 8004dac:	d902      	bls.n	8004db4 <_free_r+0x78>
 8004dae:	230c      	movs	r3, #12
 8004db0:	6003      	str	r3, [r0, #0]
 8004db2:	e7d6      	b.n	8004d62 <_free_r+0x26>
 8004db4:	6825      	ldr	r5, [r4, #0]
 8004db6:	1961      	adds	r1, r4, r5
 8004db8:	428b      	cmp	r3, r1
 8004dba:	bf04      	itt	eq
 8004dbc:	6819      	ldreq	r1, [r3, #0]
 8004dbe:	685b      	ldreq	r3, [r3, #4]
 8004dc0:	6063      	str	r3, [r4, #4]
 8004dc2:	bf04      	itt	eq
 8004dc4:	1949      	addeq	r1, r1, r5
 8004dc6:	6021      	streq	r1, [r4, #0]
 8004dc8:	6054      	str	r4, [r2, #4]
 8004dca:	e7ca      	b.n	8004d62 <_free_r+0x26>
 8004dcc:	b003      	add	sp, #12
 8004dce:	bd30      	pop	{r4, r5, pc}
 8004dd0:	20011a8c 	.word	0x20011a8c

08004dd4 <sbrk_aligned>:
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	4e0e      	ldr	r6, [pc, #56]	; (8004e10 <sbrk_aligned+0x3c>)
 8004dd8:	460c      	mov	r4, r1
 8004dda:	6831      	ldr	r1, [r6, #0]
 8004ddc:	4605      	mov	r5, r0
 8004dde:	b911      	cbnz	r1, 8004de6 <sbrk_aligned+0x12>
 8004de0:	f000 fcf6 	bl	80057d0 <_sbrk_r>
 8004de4:	6030      	str	r0, [r6, #0]
 8004de6:	4621      	mov	r1, r4
 8004de8:	4628      	mov	r0, r5
 8004dea:	f000 fcf1 	bl	80057d0 <_sbrk_r>
 8004dee:	1c43      	adds	r3, r0, #1
 8004df0:	d00a      	beq.n	8004e08 <sbrk_aligned+0x34>
 8004df2:	1cc4      	adds	r4, r0, #3
 8004df4:	f024 0403 	bic.w	r4, r4, #3
 8004df8:	42a0      	cmp	r0, r4
 8004dfa:	d007      	beq.n	8004e0c <sbrk_aligned+0x38>
 8004dfc:	1a21      	subs	r1, r4, r0
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f000 fce6 	bl	80057d0 <_sbrk_r>
 8004e04:	3001      	adds	r0, #1
 8004e06:	d101      	bne.n	8004e0c <sbrk_aligned+0x38>
 8004e08:	f04f 34ff 	mov.w	r4, #4294967295
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	20011a90 	.word	0x20011a90

08004e14 <_malloc_r>:
 8004e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e18:	1ccd      	adds	r5, r1, #3
 8004e1a:	f025 0503 	bic.w	r5, r5, #3
 8004e1e:	3508      	adds	r5, #8
 8004e20:	2d0c      	cmp	r5, #12
 8004e22:	bf38      	it	cc
 8004e24:	250c      	movcc	r5, #12
 8004e26:	2d00      	cmp	r5, #0
 8004e28:	4607      	mov	r7, r0
 8004e2a:	db01      	blt.n	8004e30 <_malloc_r+0x1c>
 8004e2c:	42a9      	cmp	r1, r5
 8004e2e:	d905      	bls.n	8004e3c <_malloc_r+0x28>
 8004e30:	230c      	movs	r3, #12
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	2600      	movs	r6, #0
 8004e36:	4630      	mov	r0, r6
 8004e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e3c:	4e2e      	ldr	r6, [pc, #184]	; (8004ef8 <_malloc_r+0xe4>)
 8004e3e:	f001 fc29 	bl	8006694 <__malloc_lock>
 8004e42:	6833      	ldr	r3, [r6, #0]
 8004e44:	461c      	mov	r4, r3
 8004e46:	bb34      	cbnz	r4, 8004e96 <_malloc_r+0x82>
 8004e48:	4629      	mov	r1, r5
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	f7ff ffc2 	bl	8004dd4 <sbrk_aligned>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	4604      	mov	r4, r0
 8004e54:	d14d      	bne.n	8004ef2 <_malloc_r+0xde>
 8004e56:	6834      	ldr	r4, [r6, #0]
 8004e58:	4626      	mov	r6, r4
 8004e5a:	2e00      	cmp	r6, #0
 8004e5c:	d140      	bne.n	8004ee0 <_malloc_r+0xcc>
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	4631      	mov	r1, r6
 8004e62:	4638      	mov	r0, r7
 8004e64:	eb04 0803 	add.w	r8, r4, r3
 8004e68:	f000 fcb2 	bl	80057d0 <_sbrk_r>
 8004e6c:	4580      	cmp	r8, r0
 8004e6e:	d13a      	bne.n	8004ee6 <_malloc_r+0xd2>
 8004e70:	6821      	ldr	r1, [r4, #0]
 8004e72:	3503      	adds	r5, #3
 8004e74:	1a6d      	subs	r5, r5, r1
 8004e76:	f025 0503 	bic.w	r5, r5, #3
 8004e7a:	3508      	adds	r5, #8
 8004e7c:	2d0c      	cmp	r5, #12
 8004e7e:	bf38      	it	cc
 8004e80:	250c      	movcc	r5, #12
 8004e82:	4629      	mov	r1, r5
 8004e84:	4638      	mov	r0, r7
 8004e86:	f7ff ffa5 	bl	8004dd4 <sbrk_aligned>
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	d02b      	beq.n	8004ee6 <_malloc_r+0xd2>
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	442b      	add	r3, r5
 8004e92:	6023      	str	r3, [r4, #0]
 8004e94:	e00e      	b.n	8004eb4 <_malloc_r+0xa0>
 8004e96:	6822      	ldr	r2, [r4, #0]
 8004e98:	1b52      	subs	r2, r2, r5
 8004e9a:	d41e      	bmi.n	8004eda <_malloc_r+0xc6>
 8004e9c:	2a0b      	cmp	r2, #11
 8004e9e:	d916      	bls.n	8004ece <_malloc_r+0xba>
 8004ea0:	1961      	adds	r1, r4, r5
 8004ea2:	42a3      	cmp	r3, r4
 8004ea4:	6025      	str	r5, [r4, #0]
 8004ea6:	bf18      	it	ne
 8004ea8:	6059      	strne	r1, [r3, #4]
 8004eaa:	6863      	ldr	r3, [r4, #4]
 8004eac:	bf08      	it	eq
 8004eae:	6031      	streq	r1, [r6, #0]
 8004eb0:	5162      	str	r2, [r4, r5]
 8004eb2:	604b      	str	r3, [r1, #4]
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	f104 060b 	add.w	r6, r4, #11
 8004eba:	f001 fbf1 	bl	80066a0 <__malloc_unlock>
 8004ebe:	f026 0607 	bic.w	r6, r6, #7
 8004ec2:	1d23      	adds	r3, r4, #4
 8004ec4:	1af2      	subs	r2, r6, r3
 8004ec6:	d0b6      	beq.n	8004e36 <_malloc_r+0x22>
 8004ec8:	1b9b      	subs	r3, r3, r6
 8004eca:	50a3      	str	r3, [r4, r2]
 8004ecc:	e7b3      	b.n	8004e36 <_malloc_r+0x22>
 8004ece:	6862      	ldr	r2, [r4, #4]
 8004ed0:	42a3      	cmp	r3, r4
 8004ed2:	bf0c      	ite	eq
 8004ed4:	6032      	streq	r2, [r6, #0]
 8004ed6:	605a      	strne	r2, [r3, #4]
 8004ed8:	e7ec      	b.n	8004eb4 <_malloc_r+0xa0>
 8004eda:	4623      	mov	r3, r4
 8004edc:	6864      	ldr	r4, [r4, #4]
 8004ede:	e7b2      	b.n	8004e46 <_malloc_r+0x32>
 8004ee0:	4634      	mov	r4, r6
 8004ee2:	6876      	ldr	r6, [r6, #4]
 8004ee4:	e7b9      	b.n	8004e5a <_malloc_r+0x46>
 8004ee6:	230c      	movs	r3, #12
 8004ee8:	603b      	str	r3, [r7, #0]
 8004eea:	4638      	mov	r0, r7
 8004eec:	f001 fbd8 	bl	80066a0 <__malloc_unlock>
 8004ef0:	e7a1      	b.n	8004e36 <_malloc_r+0x22>
 8004ef2:	6025      	str	r5, [r4, #0]
 8004ef4:	e7de      	b.n	8004eb4 <_malloc_r+0xa0>
 8004ef6:	bf00      	nop
 8004ef8:	20011a8c 	.word	0x20011a8c

08004efc <__cvt>:
 8004efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f00:	ec55 4b10 	vmov	r4, r5, d0
 8004f04:	2d00      	cmp	r5, #0
 8004f06:	460e      	mov	r6, r1
 8004f08:	4619      	mov	r1, r3
 8004f0a:	462b      	mov	r3, r5
 8004f0c:	bfbb      	ittet	lt
 8004f0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f12:	461d      	movlt	r5, r3
 8004f14:	2300      	movge	r3, #0
 8004f16:	232d      	movlt	r3, #45	; 0x2d
 8004f18:	700b      	strb	r3, [r1, #0]
 8004f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004f20:	4691      	mov	r9, r2
 8004f22:	f023 0820 	bic.w	r8, r3, #32
 8004f26:	bfbc      	itt	lt
 8004f28:	4622      	movlt	r2, r4
 8004f2a:	4614      	movlt	r4, r2
 8004f2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f30:	d005      	beq.n	8004f3e <__cvt+0x42>
 8004f32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f36:	d100      	bne.n	8004f3a <__cvt+0x3e>
 8004f38:	3601      	adds	r6, #1
 8004f3a:	2102      	movs	r1, #2
 8004f3c:	e000      	b.n	8004f40 <__cvt+0x44>
 8004f3e:	2103      	movs	r1, #3
 8004f40:	ab03      	add	r3, sp, #12
 8004f42:	9301      	str	r3, [sp, #4]
 8004f44:	ab02      	add	r3, sp, #8
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	ec45 4b10 	vmov	d0, r4, r5
 8004f4c:	4653      	mov	r3, sl
 8004f4e:	4632      	mov	r2, r6
 8004f50:	f000 fd8e 	bl	8005a70 <_dtoa_r>
 8004f54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f58:	4607      	mov	r7, r0
 8004f5a:	d102      	bne.n	8004f62 <__cvt+0x66>
 8004f5c:	f019 0f01 	tst.w	r9, #1
 8004f60:	d022      	beq.n	8004fa8 <__cvt+0xac>
 8004f62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f66:	eb07 0906 	add.w	r9, r7, r6
 8004f6a:	d110      	bne.n	8004f8e <__cvt+0x92>
 8004f6c:	783b      	ldrb	r3, [r7, #0]
 8004f6e:	2b30      	cmp	r3, #48	; 0x30
 8004f70:	d10a      	bne.n	8004f88 <__cvt+0x8c>
 8004f72:	2200      	movs	r2, #0
 8004f74:	2300      	movs	r3, #0
 8004f76:	4620      	mov	r0, r4
 8004f78:	4629      	mov	r1, r5
 8004f7a:	f7fb fdbd 	bl	8000af8 <__aeabi_dcmpeq>
 8004f7e:	b918      	cbnz	r0, 8004f88 <__cvt+0x8c>
 8004f80:	f1c6 0601 	rsb	r6, r6, #1
 8004f84:	f8ca 6000 	str.w	r6, [sl]
 8004f88:	f8da 3000 	ldr.w	r3, [sl]
 8004f8c:	4499      	add	r9, r3
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2300      	movs	r3, #0
 8004f92:	4620      	mov	r0, r4
 8004f94:	4629      	mov	r1, r5
 8004f96:	f7fb fdaf 	bl	8000af8 <__aeabi_dcmpeq>
 8004f9a:	b108      	cbz	r0, 8004fa0 <__cvt+0xa4>
 8004f9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fa0:	2230      	movs	r2, #48	; 0x30
 8004fa2:	9b03      	ldr	r3, [sp, #12]
 8004fa4:	454b      	cmp	r3, r9
 8004fa6:	d307      	bcc.n	8004fb8 <__cvt+0xbc>
 8004fa8:	9b03      	ldr	r3, [sp, #12]
 8004faa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fac:	1bdb      	subs	r3, r3, r7
 8004fae:	4638      	mov	r0, r7
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	b004      	add	sp, #16
 8004fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb8:	1c59      	adds	r1, r3, #1
 8004fba:	9103      	str	r1, [sp, #12]
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	e7f0      	b.n	8004fa2 <__cvt+0xa6>

08004fc0 <__exponent>:
 8004fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2900      	cmp	r1, #0
 8004fc6:	bfb8      	it	lt
 8004fc8:	4249      	neglt	r1, r1
 8004fca:	f803 2b02 	strb.w	r2, [r3], #2
 8004fce:	bfb4      	ite	lt
 8004fd0:	222d      	movlt	r2, #45	; 0x2d
 8004fd2:	222b      	movge	r2, #43	; 0x2b
 8004fd4:	2909      	cmp	r1, #9
 8004fd6:	7042      	strb	r2, [r0, #1]
 8004fd8:	dd2a      	ble.n	8005030 <__exponent+0x70>
 8004fda:	f10d 0407 	add.w	r4, sp, #7
 8004fde:	46a4      	mov	ip, r4
 8004fe0:	270a      	movs	r7, #10
 8004fe2:	46a6      	mov	lr, r4
 8004fe4:	460a      	mov	r2, r1
 8004fe6:	fb91 f6f7 	sdiv	r6, r1, r7
 8004fea:	fb07 1516 	mls	r5, r7, r6, r1
 8004fee:	3530      	adds	r5, #48	; 0x30
 8004ff0:	2a63      	cmp	r2, #99	; 0x63
 8004ff2:	f104 34ff 	add.w	r4, r4, #4294967295
 8004ff6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004ffa:	4631      	mov	r1, r6
 8004ffc:	dcf1      	bgt.n	8004fe2 <__exponent+0x22>
 8004ffe:	3130      	adds	r1, #48	; 0x30
 8005000:	f1ae 0502 	sub.w	r5, lr, #2
 8005004:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005008:	1c44      	adds	r4, r0, #1
 800500a:	4629      	mov	r1, r5
 800500c:	4561      	cmp	r1, ip
 800500e:	d30a      	bcc.n	8005026 <__exponent+0x66>
 8005010:	f10d 0209 	add.w	r2, sp, #9
 8005014:	eba2 020e 	sub.w	r2, r2, lr
 8005018:	4565      	cmp	r5, ip
 800501a:	bf88      	it	hi
 800501c:	2200      	movhi	r2, #0
 800501e:	4413      	add	r3, r2
 8005020:	1a18      	subs	r0, r3, r0
 8005022:	b003      	add	sp, #12
 8005024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005026:	f811 2b01 	ldrb.w	r2, [r1], #1
 800502a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800502e:	e7ed      	b.n	800500c <__exponent+0x4c>
 8005030:	2330      	movs	r3, #48	; 0x30
 8005032:	3130      	adds	r1, #48	; 0x30
 8005034:	7083      	strb	r3, [r0, #2]
 8005036:	70c1      	strb	r1, [r0, #3]
 8005038:	1d03      	adds	r3, r0, #4
 800503a:	e7f1      	b.n	8005020 <__exponent+0x60>

0800503c <_printf_float>:
 800503c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005040:	ed2d 8b02 	vpush	{d8}
 8005044:	b08d      	sub	sp, #52	; 0x34
 8005046:	460c      	mov	r4, r1
 8005048:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800504c:	4616      	mov	r6, r2
 800504e:	461f      	mov	r7, r3
 8005050:	4605      	mov	r5, r0
 8005052:	f001 fafb 	bl	800664c <_localeconv_r>
 8005056:	f8d0 a000 	ldr.w	sl, [r0]
 800505a:	4650      	mov	r0, sl
 800505c:	f7fb f8ca 	bl	80001f4 <strlen>
 8005060:	2300      	movs	r3, #0
 8005062:	930a      	str	r3, [sp, #40]	; 0x28
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	9305      	str	r3, [sp, #20]
 8005068:	f8d8 3000 	ldr.w	r3, [r8]
 800506c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005070:	3307      	adds	r3, #7
 8005072:	f023 0307 	bic.w	r3, r3, #7
 8005076:	f103 0208 	add.w	r2, r3, #8
 800507a:	f8c8 2000 	str.w	r2, [r8]
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005086:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800508a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800508e:	9307      	str	r3, [sp, #28]
 8005090:	f8cd 8018 	str.w	r8, [sp, #24]
 8005094:	ee08 0a10 	vmov	s16, r0
 8005098:	4b9f      	ldr	r3, [pc, #636]	; (8005318 <_printf_float+0x2dc>)
 800509a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800509e:	f04f 32ff 	mov.w	r2, #4294967295
 80050a2:	f7fb fd5b 	bl	8000b5c <__aeabi_dcmpun>
 80050a6:	bb88      	cbnz	r0, 800510c <_printf_float+0xd0>
 80050a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050ac:	4b9a      	ldr	r3, [pc, #616]	; (8005318 <_printf_float+0x2dc>)
 80050ae:	f04f 32ff 	mov.w	r2, #4294967295
 80050b2:	f7fb fd35 	bl	8000b20 <__aeabi_dcmple>
 80050b6:	bb48      	cbnz	r0, 800510c <_printf_float+0xd0>
 80050b8:	2200      	movs	r2, #0
 80050ba:	2300      	movs	r3, #0
 80050bc:	4640      	mov	r0, r8
 80050be:	4649      	mov	r1, r9
 80050c0:	f7fb fd24 	bl	8000b0c <__aeabi_dcmplt>
 80050c4:	b110      	cbz	r0, 80050cc <_printf_float+0x90>
 80050c6:	232d      	movs	r3, #45	; 0x2d
 80050c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050cc:	4b93      	ldr	r3, [pc, #588]	; (800531c <_printf_float+0x2e0>)
 80050ce:	4894      	ldr	r0, [pc, #592]	; (8005320 <_printf_float+0x2e4>)
 80050d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80050d4:	bf94      	ite	ls
 80050d6:	4698      	movls	r8, r3
 80050d8:	4680      	movhi	r8, r0
 80050da:	2303      	movs	r3, #3
 80050dc:	6123      	str	r3, [r4, #16]
 80050de:	9b05      	ldr	r3, [sp, #20]
 80050e0:	f023 0204 	bic.w	r2, r3, #4
 80050e4:	6022      	str	r2, [r4, #0]
 80050e6:	f04f 0900 	mov.w	r9, #0
 80050ea:	9700      	str	r7, [sp, #0]
 80050ec:	4633      	mov	r3, r6
 80050ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80050f0:	4621      	mov	r1, r4
 80050f2:	4628      	mov	r0, r5
 80050f4:	f000 f9d8 	bl	80054a8 <_printf_common>
 80050f8:	3001      	adds	r0, #1
 80050fa:	f040 8090 	bne.w	800521e <_printf_float+0x1e2>
 80050fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005102:	b00d      	add	sp, #52	; 0x34
 8005104:	ecbd 8b02 	vpop	{d8}
 8005108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800510c:	4642      	mov	r2, r8
 800510e:	464b      	mov	r3, r9
 8005110:	4640      	mov	r0, r8
 8005112:	4649      	mov	r1, r9
 8005114:	f7fb fd22 	bl	8000b5c <__aeabi_dcmpun>
 8005118:	b140      	cbz	r0, 800512c <_printf_float+0xf0>
 800511a:	464b      	mov	r3, r9
 800511c:	2b00      	cmp	r3, #0
 800511e:	bfbc      	itt	lt
 8005120:	232d      	movlt	r3, #45	; 0x2d
 8005122:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005126:	487f      	ldr	r0, [pc, #508]	; (8005324 <_printf_float+0x2e8>)
 8005128:	4b7f      	ldr	r3, [pc, #508]	; (8005328 <_printf_float+0x2ec>)
 800512a:	e7d1      	b.n	80050d0 <_printf_float+0x94>
 800512c:	6863      	ldr	r3, [r4, #4]
 800512e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005132:	9206      	str	r2, [sp, #24]
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	d13f      	bne.n	80051b8 <_printf_float+0x17c>
 8005138:	2306      	movs	r3, #6
 800513a:	6063      	str	r3, [r4, #4]
 800513c:	9b05      	ldr	r3, [sp, #20]
 800513e:	6861      	ldr	r1, [r4, #4]
 8005140:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005144:	2300      	movs	r3, #0
 8005146:	9303      	str	r3, [sp, #12]
 8005148:	ab0a      	add	r3, sp, #40	; 0x28
 800514a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800514e:	ab09      	add	r3, sp, #36	; 0x24
 8005150:	ec49 8b10 	vmov	d0, r8, r9
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	6022      	str	r2, [r4, #0]
 8005158:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800515c:	4628      	mov	r0, r5
 800515e:	f7ff fecd 	bl	8004efc <__cvt>
 8005162:	9b06      	ldr	r3, [sp, #24]
 8005164:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005166:	2b47      	cmp	r3, #71	; 0x47
 8005168:	4680      	mov	r8, r0
 800516a:	d108      	bne.n	800517e <_printf_float+0x142>
 800516c:	1cc8      	adds	r0, r1, #3
 800516e:	db02      	blt.n	8005176 <_printf_float+0x13a>
 8005170:	6863      	ldr	r3, [r4, #4]
 8005172:	4299      	cmp	r1, r3
 8005174:	dd41      	ble.n	80051fa <_printf_float+0x1be>
 8005176:	f1ab 0b02 	sub.w	fp, fp, #2
 800517a:	fa5f fb8b 	uxtb.w	fp, fp
 800517e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005182:	d820      	bhi.n	80051c6 <_printf_float+0x18a>
 8005184:	3901      	subs	r1, #1
 8005186:	465a      	mov	r2, fp
 8005188:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800518c:	9109      	str	r1, [sp, #36]	; 0x24
 800518e:	f7ff ff17 	bl	8004fc0 <__exponent>
 8005192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005194:	1813      	adds	r3, r2, r0
 8005196:	2a01      	cmp	r2, #1
 8005198:	4681      	mov	r9, r0
 800519a:	6123      	str	r3, [r4, #16]
 800519c:	dc02      	bgt.n	80051a4 <_printf_float+0x168>
 800519e:	6822      	ldr	r2, [r4, #0]
 80051a0:	07d2      	lsls	r2, r2, #31
 80051a2:	d501      	bpl.n	80051a8 <_printf_float+0x16c>
 80051a4:	3301      	adds	r3, #1
 80051a6:	6123      	str	r3, [r4, #16]
 80051a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d09c      	beq.n	80050ea <_printf_float+0xae>
 80051b0:	232d      	movs	r3, #45	; 0x2d
 80051b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b6:	e798      	b.n	80050ea <_printf_float+0xae>
 80051b8:	9a06      	ldr	r2, [sp, #24]
 80051ba:	2a47      	cmp	r2, #71	; 0x47
 80051bc:	d1be      	bne.n	800513c <_printf_float+0x100>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1bc      	bne.n	800513c <_printf_float+0x100>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e7b9      	b.n	800513a <_printf_float+0xfe>
 80051c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80051ca:	d118      	bne.n	80051fe <_printf_float+0x1c2>
 80051cc:	2900      	cmp	r1, #0
 80051ce:	6863      	ldr	r3, [r4, #4]
 80051d0:	dd0b      	ble.n	80051ea <_printf_float+0x1ae>
 80051d2:	6121      	str	r1, [r4, #16]
 80051d4:	b913      	cbnz	r3, 80051dc <_printf_float+0x1a0>
 80051d6:	6822      	ldr	r2, [r4, #0]
 80051d8:	07d0      	lsls	r0, r2, #31
 80051da:	d502      	bpl.n	80051e2 <_printf_float+0x1a6>
 80051dc:	3301      	adds	r3, #1
 80051de:	440b      	add	r3, r1
 80051e0:	6123      	str	r3, [r4, #16]
 80051e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80051e4:	f04f 0900 	mov.w	r9, #0
 80051e8:	e7de      	b.n	80051a8 <_printf_float+0x16c>
 80051ea:	b913      	cbnz	r3, 80051f2 <_printf_float+0x1b6>
 80051ec:	6822      	ldr	r2, [r4, #0]
 80051ee:	07d2      	lsls	r2, r2, #31
 80051f0:	d501      	bpl.n	80051f6 <_printf_float+0x1ba>
 80051f2:	3302      	adds	r3, #2
 80051f4:	e7f4      	b.n	80051e0 <_printf_float+0x1a4>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e7f2      	b.n	80051e0 <_printf_float+0x1a4>
 80051fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80051fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005200:	4299      	cmp	r1, r3
 8005202:	db05      	blt.n	8005210 <_printf_float+0x1d4>
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	6121      	str	r1, [r4, #16]
 8005208:	07d8      	lsls	r0, r3, #31
 800520a:	d5ea      	bpl.n	80051e2 <_printf_float+0x1a6>
 800520c:	1c4b      	adds	r3, r1, #1
 800520e:	e7e7      	b.n	80051e0 <_printf_float+0x1a4>
 8005210:	2900      	cmp	r1, #0
 8005212:	bfd4      	ite	le
 8005214:	f1c1 0202 	rsble	r2, r1, #2
 8005218:	2201      	movgt	r2, #1
 800521a:	4413      	add	r3, r2
 800521c:	e7e0      	b.n	80051e0 <_printf_float+0x1a4>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	055a      	lsls	r2, r3, #21
 8005222:	d407      	bmi.n	8005234 <_printf_float+0x1f8>
 8005224:	6923      	ldr	r3, [r4, #16]
 8005226:	4642      	mov	r2, r8
 8005228:	4631      	mov	r1, r6
 800522a:	4628      	mov	r0, r5
 800522c:	47b8      	blx	r7
 800522e:	3001      	adds	r0, #1
 8005230:	d12c      	bne.n	800528c <_printf_float+0x250>
 8005232:	e764      	b.n	80050fe <_printf_float+0xc2>
 8005234:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005238:	f240 80e0 	bls.w	80053fc <_printf_float+0x3c0>
 800523c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005240:	2200      	movs	r2, #0
 8005242:	2300      	movs	r3, #0
 8005244:	f7fb fc58 	bl	8000af8 <__aeabi_dcmpeq>
 8005248:	2800      	cmp	r0, #0
 800524a:	d034      	beq.n	80052b6 <_printf_float+0x27a>
 800524c:	4a37      	ldr	r2, [pc, #220]	; (800532c <_printf_float+0x2f0>)
 800524e:	2301      	movs	r3, #1
 8005250:	4631      	mov	r1, r6
 8005252:	4628      	mov	r0, r5
 8005254:	47b8      	blx	r7
 8005256:	3001      	adds	r0, #1
 8005258:	f43f af51 	beq.w	80050fe <_printf_float+0xc2>
 800525c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005260:	429a      	cmp	r2, r3
 8005262:	db02      	blt.n	800526a <_printf_float+0x22e>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	07d8      	lsls	r0, r3, #31
 8005268:	d510      	bpl.n	800528c <_printf_float+0x250>
 800526a:	ee18 3a10 	vmov	r3, s16
 800526e:	4652      	mov	r2, sl
 8005270:	4631      	mov	r1, r6
 8005272:	4628      	mov	r0, r5
 8005274:	47b8      	blx	r7
 8005276:	3001      	adds	r0, #1
 8005278:	f43f af41 	beq.w	80050fe <_printf_float+0xc2>
 800527c:	f04f 0800 	mov.w	r8, #0
 8005280:	f104 091a 	add.w	r9, r4, #26
 8005284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005286:	3b01      	subs	r3, #1
 8005288:	4543      	cmp	r3, r8
 800528a:	dc09      	bgt.n	80052a0 <_printf_float+0x264>
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	079b      	lsls	r3, r3, #30
 8005290:	f100 8105 	bmi.w	800549e <_printf_float+0x462>
 8005294:	68e0      	ldr	r0, [r4, #12]
 8005296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005298:	4298      	cmp	r0, r3
 800529a:	bfb8      	it	lt
 800529c:	4618      	movlt	r0, r3
 800529e:	e730      	b.n	8005102 <_printf_float+0xc6>
 80052a0:	2301      	movs	r3, #1
 80052a2:	464a      	mov	r2, r9
 80052a4:	4631      	mov	r1, r6
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b8      	blx	r7
 80052aa:	3001      	adds	r0, #1
 80052ac:	f43f af27 	beq.w	80050fe <_printf_float+0xc2>
 80052b0:	f108 0801 	add.w	r8, r8, #1
 80052b4:	e7e6      	b.n	8005284 <_printf_float+0x248>
 80052b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	dc39      	bgt.n	8005330 <_printf_float+0x2f4>
 80052bc:	4a1b      	ldr	r2, [pc, #108]	; (800532c <_printf_float+0x2f0>)
 80052be:	2301      	movs	r3, #1
 80052c0:	4631      	mov	r1, r6
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b8      	blx	r7
 80052c6:	3001      	adds	r0, #1
 80052c8:	f43f af19 	beq.w	80050fe <_printf_float+0xc2>
 80052cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052d0:	4313      	orrs	r3, r2
 80052d2:	d102      	bne.n	80052da <_printf_float+0x29e>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	07d9      	lsls	r1, r3, #31
 80052d8:	d5d8      	bpl.n	800528c <_printf_float+0x250>
 80052da:	ee18 3a10 	vmov	r3, s16
 80052de:	4652      	mov	r2, sl
 80052e0:	4631      	mov	r1, r6
 80052e2:	4628      	mov	r0, r5
 80052e4:	47b8      	blx	r7
 80052e6:	3001      	adds	r0, #1
 80052e8:	f43f af09 	beq.w	80050fe <_printf_float+0xc2>
 80052ec:	f04f 0900 	mov.w	r9, #0
 80052f0:	f104 0a1a 	add.w	sl, r4, #26
 80052f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f6:	425b      	negs	r3, r3
 80052f8:	454b      	cmp	r3, r9
 80052fa:	dc01      	bgt.n	8005300 <_printf_float+0x2c4>
 80052fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052fe:	e792      	b.n	8005226 <_printf_float+0x1ea>
 8005300:	2301      	movs	r3, #1
 8005302:	4652      	mov	r2, sl
 8005304:	4631      	mov	r1, r6
 8005306:	4628      	mov	r0, r5
 8005308:	47b8      	blx	r7
 800530a:	3001      	adds	r0, #1
 800530c:	f43f aef7 	beq.w	80050fe <_printf_float+0xc2>
 8005310:	f109 0901 	add.w	r9, r9, #1
 8005314:	e7ee      	b.n	80052f4 <_printf_float+0x2b8>
 8005316:	bf00      	nop
 8005318:	7fefffff 	.word	0x7fefffff
 800531c:	08009644 	.word	0x08009644
 8005320:	08009648 	.word	0x08009648
 8005324:	08009650 	.word	0x08009650
 8005328:	0800964c 	.word	0x0800964c
 800532c:	08009879 	.word	0x08009879
 8005330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005332:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005334:	429a      	cmp	r2, r3
 8005336:	bfa8      	it	ge
 8005338:	461a      	movge	r2, r3
 800533a:	2a00      	cmp	r2, #0
 800533c:	4691      	mov	r9, r2
 800533e:	dc37      	bgt.n	80053b0 <_printf_float+0x374>
 8005340:	f04f 0b00 	mov.w	fp, #0
 8005344:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005348:	f104 021a 	add.w	r2, r4, #26
 800534c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800534e:	9305      	str	r3, [sp, #20]
 8005350:	eba3 0309 	sub.w	r3, r3, r9
 8005354:	455b      	cmp	r3, fp
 8005356:	dc33      	bgt.n	80053c0 <_printf_float+0x384>
 8005358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800535c:	429a      	cmp	r2, r3
 800535e:	db3b      	blt.n	80053d8 <_printf_float+0x39c>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	07da      	lsls	r2, r3, #31
 8005364:	d438      	bmi.n	80053d8 <_printf_float+0x39c>
 8005366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005368:	9a05      	ldr	r2, [sp, #20]
 800536a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800536c:	1a9a      	subs	r2, r3, r2
 800536e:	eba3 0901 	sub.w	r9, r3, r1
 8005372:	4591      	cmp	r9, r2
 8005374:	bfa8      	it	ge
 8005376:	4691      	movge	r9, r2
 8005378:	f1b9 0f00 	cmp.w	r9, #0
 800537c:	dc35      	bgt.n	80053ea <_printf_float+0x3ae>
 800537e:	f04f 0800 	mov.w	r8, #0
 8005382:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005386:	f104 0a1a 	add.w	sl, r4, #26
 800538a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	eba3 0309 	sub.w	r3, r3, r9
 8005394:	4543      	cmp	r3, r8
 8005396:	f77f af79 	ble.w	800528c <_printf_float+0x250>
 800539a:	2301      	movs	r3, #1
 800539c:	4652      	mov	r2, sl
 800539e:	4631      	mov	r1, r6
 80053a0:	4628      	mov	r0, r5
 80053a2:	47b8      	blx	r7
 80053a4:	3001      	adds	r0, #1
 80053a6:	f43f aeaa 	beq.w	80050fe <_printf_float+0xc2>
 80053aa:	f108 0801 	add.w	r8, r8, #1
 80053ae:	e7ec      	b.n	800538a <_printf_float+0x34e>
 80053b0:	4613      	mov	r3, r2
 80053b2:	4631      	mov	r1, r6
 80053b4:	4642      	mov	r2, r8
 80053b6:	4628      	mov	r0, r5
 80053b8:	47b8      	blx	r7
 80053ba:	3001      	adds	r0, #1
 80053bc:	d1c0      	bne.n	8005340 <_printf_float+0x304>
 80053be:	e69e      	b.n	80050fe <_printf_float+0xc2>
 80053c0:	2301      	movs	r3, #1
 80053c2:	4631      	mov	r1, r6
 80053c4:	4628      	mov	r0, r5
 80053c6:	9205      	str	r2, [sp, #20]
 80053c8:	47b8      	blx	r7
 80053ca:	3001      	adds	r0, #1
 80053cc:	f43f ae97 	beq.w	80050fe <_printf_float+0xc2>
 80053d0:	9a05      	ldr	r2, [sp, #20]
 80053d2:	f10b 0b01 	add.w	fp, fp, #1
 80053d6:	e7b9      	b.n	800534c <_printf_float+0x310>
 80053d8:	ee18 3a10 	vmov	r3, s16
 80053dc:	4652      	mov	r2, sl
 80053de:	4631      	mov	r1, r6
 80053e0:	4628      	mov	r0, r5
 80053e2:	47b8      	blx	r7
 80053e4:	3001      	adds	r0, #1
 80053e6:	d1be      	bne.n	8005366 <_printf_float+0x32a>
 80053e8:	e689      	b.n	80050fe <_printf_float+0xc2>
 80053ea:	9a05      	ldr	r2, [sp, #20]
 80053ec:	464b      	mov	r3, r9
 80053ee:	4442      	add	r2, r8
 80053f0:	4631      	mov	r1, r6
 80053f2:	4628      	mov	r0, r5
 80053f4:	47b8      	blx	r7
 80053f6:	3001      	adds	r0, #1
 80053f8:	d1c1      	bne.n	800537e <_printf_float+0x342>
 80053fa:	e680      	b.n	80050fe <_printf_float+0xc2>
 80053fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053fe:	2a01      	cmp	r2, #1
 8005400:	dc01      	bgt.n	8005406 <_printf_float+0x3ca>
 8005402:	07db      	lsls	r3, r3, #31
 8005404:	d538      	bpl.n	8005478 <_printf_float+0x43c>
 8005406:	2301      	movs	r3, #1
 8005408:	4642      	mov	r2, r8
 800540a:	4631      	mov	r1, r6
 800540c:	4628      	mov	r0, r5
 800540e:	47b8      	blx	r7
 8005410:	3001      	adds	r0, #1
 8005412:	f43f ae74 	beq.w	80050fe <_printf_float+0xc2>
 8005416:	ee18 3a10 	vmov	r3, s16
 800541a:	4652      	mov	r2, sl
 800541c:	4631      	mov	r1, r6
 800541e:	4628      	mov	r0, r5
 8005420:	47b8      	blx	r7
 8005422:	3001      	adds	r0, #1
 8005424:	f43f ae6b 	beq.w	80050fe <_printf_float+0xc2>
 8005428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800542c:	2200      	movs	r2, #0
 800542e:	2300      	movs	r3, #0
 8005430:	f7fb fb62 	bl	8000af8 <__aeabi_dcmpeq>
 8005434:	b9d8      	cbnz	r0, 800546e <_printf_float+0x432>
 8005436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005438:	f108 0201 	add.w	r2, r8, #1
 800543c:	3b01      	subs	r3, #1
 800543e:	4631      	mov	r1, r6
 8005440:	4628      	mov	r0, r5
 8005442:	47b8      	blx	r7
 8005444:	3001      	adds	r0, #1
 8005446:	d10e      	bne.n	8005466 <_printf_float+0x42a>
 8005448:	e659      	b.n	80050fe <_printf_float+0xc2>
 800544a:	2301      	movs	r3, #1
 800544c:	4652      	mov	r2, sl
 800544e:	4631      	mov	r1, r6
 8005450:	4628      	mov	r0, r5
 8005452:	47b8      	blx	r7
 8005454:	3001      	adds	r0, #1
 8005456:	f43f ae52 	beq.w	80050fe <_printf_float+0xc2>
 800545a:	f108 0801 	add.w	r8, r8, #1
 800545e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005460:	3b01      	subs	r3, #1
 8005462:	4543      	cmp	r3, r8
 8005464:	dcf1      	bgt.n	800544a <_printf_float+0x40e>
 8005466:	464b      	mov	r3, r9
 8005468:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800546c:	e6dc      	b.n	8005228 <_printf_float+0x1ec>
 800546e:	f04f 0800 	mov.w	r8, #0
 8005472:	f104 0a1a 	add.w	sl, r4, #26
 8005476:	e7f2      	b.n	800545e <_printf_float+0x422>
 8005478:	2301      	movs	r3, #1
 800547a:	4642      	mov	r2, r8
 800547c:	e7df      	b.n	800543e <_printf_float+0x402>
 800547e:	2301      	movs	r3, #1
 8005480:	464a      	mov	r2, r9
 8005482:	4631      	mov	r1, r6
 8005484:	4628      	mov	r0, r5
 8005486:	47b8      	blx	r7
 8005488:	3001      	adds	r0, #1
 800548a:	f43f ae38 	beq.w	80050fe <_printf_float+0xc2>
 800548e:	f108 0801 	add.w	r8, r8, #1
 8005492:	68e3      	ldr	r3, [r4, #12]
 8005494:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005496:	1a5b      	subs	r3, r3, r1
 8005498:	4543      	cmp	r3, r8
 800549a:	dcf0      	bgt.n	800547e <_printf_float+0x442>
 800549c:	e6fa      	b.n	8005294 <_printf_float+0x258>
 800549e:	f04f 0800 	mov.w	r8, #0
 80054a2:	f104 0919 	add.w	r9, r4, #25
 80054a6:	e7f4      	b.n	8005492 <_printf_float+0x456>

080054a8 <_printf_common>:
 80054a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054ac:	4616      	mov	r6, r2
 80054ae:	4699      	mov	r9, r3
 80054b0:	688a      	ldr	r2, [r1, #8]
 80054b2:	690b      	ldr	r3, [r1, #16]
 80054b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054b8:	4293      	cmp	r3, r2
 80054ba:	bfb8      	it	lt
 80054bc:	4613      	movlt	r3, r2
 80054be:	6033      	str	r3, [r6, #0]
 80054c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054c4:	4607      	mov	r7, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	b10a      	cbz	r2, 80054ce <_printf_common+0x26>
 80054ca:	3301      	adds	r3, #1
 80054cc:	6033      	str	r3, [r6, #0]
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	0699      	lsls	r1, r3, #26
 80054d2:	bf42      	ittt	mi
 80054d4:	6833      	ldrmi	r3, [r6, #0]
 80054d6:	3302      	addmi	r3, #2
 80054d8:	6033      	strmi	r3, [r6, #0]
 80054da:	6825      	ldr	r5, [r4, #0]
 80054dc:	f015 0506 	ands.w	r5, r5, #6
 80054e0:	d106      	bne.n	80054f0 <_printf_common+0x48>
 80054e2:	f104 0a19 	add.w	sl, r4, #25
 80054e6:	68e3      	ldr	r3, [r4, #12]
 80054e8:	6832      	ldr	r2, [r6, #0]
 80054ea:	1a9b      	subs	r3, r3, r2
 80054ec:	42ab      	cmp	r3, r5
 80054ee:	dc26      	bgt.n	800553e <_printf_common+0x96>
 80054f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054f4:	1e13      	subs	r3, r2, #0
 80054f6:	6822      	ldr	r2, [r4, #0]
 80054f8:	bf18      	it	ne
 80054fa:	2301      	movne	r3, #1
 80054fc:	0692      	lsls	r2, r2, #26
 80054fe:	d42b      	bmi.n	8005558 <_printf_common+0xb0>
 8005500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005504:	4649      	mov	r1, r9
 8005506:	4638      	mov	r0, r7
 8005508:	47c0      	blx	r8
 800550a:	3001      	adds	r0, #1
 800550c:	d01e      	beq.n	800554c <_printf_common+0xa4>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	68e5      	ldr	r5, [r4, #12]
 8005512:	6832      	ldr	r2, [r6, #0]
 8005514:	f003 0306 	and.w	r3, r3, #6
 8005518:	2b04      	cmp	r3, #4
 800551a:	bf08      	it	eq
 800551c:	1aad      	subeq	r5, r5, r2
 800551e:	68a3      	ldr	r3, [r4, #8]
 8005520:	6922      	ldr	r2, [r4, #16]
 8005522:	bf0c      	ite	eq
 8005524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005528:	2500      	movne	r5, #0
 800552a:	4293      	cmp	r3, r2
 800552c:	bfc4      	itt	gt
 800552e:	1a9b      	subgt	r3, r3, r2
 8005530:	18ed      	addgt	r5, r5, r3
 8005532:	2600      	movs	r6, #0
 8005534:	341a      	adds	r4, #26
 8005536:	42b5      	cmp	r5, r6
 8005538:	d11a      	bne.n	8005570 <_printf_common+0xc8>
 800553a:	2000      	movs	r0, #0
 800553c:	e008      	b.n	8005550 <_printf_common+0xa8>
 800553e:	2301      	movs	r3, #1
 8005540:	4652      	mov	r2, sl
 8005542:	4649      	mov	r1, r9
 8005544:	4638      	mov	r0, r7
 8005546:	47c0      	blx	r8
 8005548:	3001      	adds	r0, #1
 800554a:	d103      	bne.n	8005554 <_printf_common+0xac>
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005554:	3501      	adds	r5, #1
 8005556:	e7c6      	b.n	80054e6 <_printf_common+0x3e>
 8005558:	18e1      	adds	r1, r4, r3
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	2030      	movs	r0, #48	; 0x30
 800555e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005562:	4422      	add	r2, r4
 8005564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800556c:	3302      	adds	r3, #2
 800556e:	e7c7      	b.n	8005500 <_printf_common+0x58>
 8005570:	2301      	movs	r3, #1
 8005572:	4622      	mov	r2, r4
 8005574:	4649      	mov	r1, r9
 8005576:	4638      	mov	r0, r7
 8005578:	47c0      	blx	r8
 800557a:	3001      	adds	r0, #1
 800557c:	d0e6      	beq.n	800554c <_printf_common+0xa4>
 800557e:	3601      	adds	r6, #1
 8005580:	e7d9      	b.n	8005536 <_printf_common+0x8e>
	...

08005584 <_printf_i>:
 8005584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005588:	7e0f      	ldrb	r7, [r1, #24]
 800558a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800558c:	2f78      	cmp	r7, #120	; 0x78
 800558e:	4691      	mov	r9, r2
 8005590:	4680      	mov	r8, r0
 8005592:	460c      	mov	r4, r1
 8005594:	469a      	mov	sl, r3
 8005596:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800559a:	d807      	bhi.n	80055ac <_printf_i+0x28>
 800559c:	2f62      	cmp	r7, #98	; 0x62
 800559e:	d80a      	bhi.n	80055b6 <_printf_i+0x32>
 80055a0:	2f00      	cmp	r7, #0
 80055a2:	f000 80d8 	beq.w	8005756 <_printf_i+0x1d2>
 80055a6:	2f58      	cmp	r7, #88	; 0x58
 80055a8:	f000 80a3 	beq.w	80056f2 <_printf_i+0x16e>
 80055ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055b4:	e03a      	b.n	800562c <_printf_i+0xa8>
 80055b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055ba:	2b15      	cmp	r3, #21
 80055bc:	d8f6      	bhi.n	80055ac <_printf_i+0x28>
 80055be:	a101      	add	r1, pc, #4	; (adr r1, 80055c4 <_printf_i+0x40>)
 80055c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055c4:	0800561d 	.word	0x0800561d
 80055c8:	08005631 	.word	0x08005631
 80055cc:	080055ad 	.word	0x080055ad
 80055d0:	080055ad 	.word	0x080055ad
 80055d4:	080055ad 	.word	0x080055ad
 80055d8:	080055ad 	.word	0x080055ad
 80055dc:	08005631 	.word	0x08005631
 80055e0:	080055ad 	.word	0x080055ad
 80055e4:	080055ad 	.word	0x080055ad
 80055e8:	080055ad 	.word	0x080055ad
 80055ec:	080055ad 	.word	0x080055ad
 80055f0:	0800573d 	.word	0x0800573d
 80055f4:	08005661 	.word	0x08005661
 80055f8:	0800571f 	.word	0x0800571f
 80055fc:	080055ad 	.word	0x080055ad
 8005600:	080055ad 	.word	0x080055ad
 8005604:	0800575f 	.word	0x0800575f
 8005608:	080055ad 	.word	0x080055ad
 800560c:	08005661 	.word	0x08005661
 8005610:	080055ad 	.word	0x080055ad
 8005614:	080055ad 	.word	0x080055ad
 8005618:	08005727 	.word	0x08005727
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	1d1a      	adds	r2, r3, #4
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	602a      	str	r2, [r5, #0]
 8005624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800562c:	2301      	movs	r3, #1
 800562e:	e0a3      	b.n	8005778 <_printf_i+0x1f4>
 8005630:	6820      	ldr	r0, [r4, #0]
 8005632:	6829      	ldr	r1, [r5, #0]
 8005634:	0606      	lsls	r6, r0, #24
 8005636:	f101 0304 	add.w	r3, r1, #4
 800563a:	d50a      	bpl.n	8005652 <_printf_i+0xce>
 800563c:	680e      	ldr	r6, [r1, #0]
 800563e:	602b      	str	r3, [r5, #0]
 8005640:	2e00      	cmp	r6, #0
 8005642:	da03      	bge.n	800564c <_printf_i+0xc8>
 8005644:	232d      	movs	r3, #45	; 0x2d
 8005646:	4276      	negs	r6, r6
 8005648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800564c:	485e      	ldr	r0, [pc, #376]	; (80057c8 <_printf_i+0x244>)
 800564e:	230a      	movs	r3, #10
 8005650:	e019      	b.n	8005686 <_printf_i+0x102>
 8005652:	680e      	ldr	r6, [r1, #0]
 8005654:	602b      	str	r3, [r5, #0]
 8005656:	f010 0f40 	tst.w	r0, #64	; 0x40
 800565a:	bf18      	it	ne
 800565c:	b236      	sxthne	r6, r6
 800565e:	e7ef      	b.n	8005640 <_printf_i+0xbc>
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	6820      	ldr	r0, [r4, #0]
 8005664:	1d19      	adds	r1, r3, #4
 8005666:	6029      	str	r1, [r5, #0]
 8005668:	0601      	lsls	r1, r0, #24
 800566a:	d501      	bpl.n	8005670 <_printf_i+0xec>
 800566c:	681e      	ldr	r6, [r3, #0]
 800566e:	e002      	b.n	8005676 <_printf_i+0xf2>
 8005670:	0646      	lsls	r6, r0, #25
 8005672:	d5fb      	bpl.n	800566c <_printf_i+0xe8>
 8005674:	881e      	ldrh	r6, [r3, #0]
 8005676:	4854      	ldr	r0, [pc, #336]	; (80057c8 <_printf_i+0x244>)
 8005678:	2f6f      	cmp	r7, #111	; 0x6f
 800567a:	bf0c      	ite	eq
 800567c:	2308      	moveq	r3, #8
 800567e:	230a      	movne	r3, #10
 8005680:	2100      	movs	r1, #0
 8005682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005686:	6865      	ldr	r5, [r4, #4]
 8005688:	60a5      	str	r5, [r4, #8]
 800568a:	2d00      	cmp	r5, #0
 800568c:	bfa2      	ittt	ge
 800568e:	6821      	ldrge	r1, [r4, #0]
 8005690:	f021 0104 	bicge.w	r1, r1, #4
 8005694:	6021      	strge	r1, [r4, #0]
 8005696:	b90e      	cbnz	r6, 800569c <_printf_i+0x118>
 8005698:	2d00      	cmp	r5, #0
 800569a:	d04d      	beq.n	8005738 <_printf_i+0x1b4>
 800569c:	4615      	mov	r5, r2
 800569e:	fbb6 f1f3 	udiv	r1, r6, r3
 80056a2:	fb03 6711 	mls	r7, r3, r1, r6
 80056a6:	5dc7      	ldrb	r7, [r0, r7]
 80056a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056ac:	4637      	mov	r7, r6
 80056ae:	42bb      	cmp	r3, r7
 80056b0:	460e      	mov	r6, r1
 80056b2:	d9f4      	bls.n	800569e <_printf_i+0x11a>
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d10b      	bne.n	80056d0 <_printf_i+0x14c>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	07de      	lsls	r6, r3, #31
 80056bc:	d508      	bpl.n	80056d0 <_printf_i+0x14c>
 80056be:	6923      	ldr	r3, [r4, #16]
 80056c0:	6861      	ldr	r1, [r4, #4]
 80056c2:	4299      	cmp	r1, r3
 80056c4:	bfde      	ittt	le
 80056c6:	2330      	movle	r3, #48	; 0x30
 80056c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056d0:	1b52      	subs	r2, r2, r5
 80056d2:	6122      	str	r2, [r4, #16]
 80056d4:	f8cd a000 	str.w	sl, [sp]
 80056d8:	464b      	mov	r3, r9
 80056da:	aa03      	add	r2, sp, #12
 80056dc:	4621      	mov	r1, r4
 80056de:	4640      	mov	r0, r8
 80056e0:	f7ff fee2 	bl	80054a8 <_printf_common>
 80056e4:	3001      	adds	r0, #1
 80056e6:	d14c      	bne.n	8005782 <_printf_i+0x1fe>
 80056e8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ec:	b004      	add	sp, #16
 80056ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f2:	4835      	ldr	r0, [pc, #212]	; (80057c8 <_printf_i+0x244>)
 80056f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80056f8:	6829      	ldr	r1, [r5, #0]
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005700:	6029      	str	r1, [r5, #0]
 8005702:	061d      	lsls	r5, r3, #24
 8005704:	d514      	bpl.n	8005730 <_printf_i+0x1ac>
 8005706:	07df      	lsls	r7, r3, #31
 8005708:	bf44      	itt	mi
 800570a:	f043 0320 	orrmi.w	r3, r3, #32
 800570e:	6023      	strmi	r3, [r4, #0]
 8005710:	b91e      	cbnz	r6, 800571a <_printf_i+0x196>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	f023 0320 	bic.w	r3, r3, #32
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	2310      	movs	r3, #16
 800571c:	e7b0      	b.n	8005680 <_printf_i+0xfc>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	f043 0320 	orr.w	r3, r3, #32
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	2378      	movs	r3, #120	; 0x78
 8005728:	4828      	ldr	r0, [pc, #160]	; (80057cc <_printf_i+0x248>)
 800572a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800572e:	e7e3      	b.n	80056f8 <_printf_i+0x174>
 8005730:	0659      	lsls	r1, r3, #25
 8005732:	bf48      	it	mi
 8005734:	b2b6      	uxthmi	r6, r6
 8005736:	e7e6      	b.n	8005706 <_printf_i+0x182>
 8005738:	4615      	mov	r5, r2
 800573a:	e7bb      	b.n	80056b4 <_printf_i+0x130>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	6826      	ldr	r6, [r4, #0]
 8005740:	6961      	ldr	r1, [r4, #20]
 8005742:	1d18      	adds	r0, r3, #4
 8005744:	6028      	str	r0, [r5, #0]
 8005746:	0635      	lsls	r5, r6, #24
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	d501      	bpl.n	8005750 <_printf_i+0x1cc>
 800574c:	6019      	str	r1, [r3, #0]
 800574e:	e002      	b.n	8005756 <_printf_i+0x1d2>
 8005750:	0670      	lsls	r0, r6, #25
 8005752:	d5fb      	bpl.n	800574c <_printf_i+0x1c8>
 8005754:	8019      	strh	r1, [r3, #0]
 8005756:	2300      	movs	r3, #0
 8005758:	6123      	str	r3, [r4, #16]
 800575a:	4615      	mov	r5, r2
 800575c:	e7ba      	b.n	80056d4 <_printf_i+0x150>
 800575e:	682b      	ldr	r3, [r5, #0]
 8005760:	1d1a      	adds	r2, r3, #4
 8005762:	602a      	str	r2, [r5, #0]
 8005764:	681d      	ldr	r5, [r3, #0]
 8005766:	6862      	ldr	r2, [r4, #4]
 8005768:	2100      	movs	r1, #0
 800576a:	4628      	mov	r0, r5
 800576c:	f7fa fd50 	bl	8000210 <memchr>
 8005770:	b108      	cbz	r0, 8005776 <_printf_i+0x1f2>
 8005772:	1b40      	subs	r0, r0, r5
 8005774:	6060      	str	r0, [r4, #4]
 8005776:	6863      	ldr	r3, [r4, #4]
 8005778:	6123      	str	r3, [r4, #16]
 800577a:	2300      	movs	r3, #0
 800577c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005780:	e7a8      	b.n	80056d4 <_printf_i+0x150>
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	462a      	mov	r2, r5
 8005786:	4649      	mov	r1, r9
 8005788:	4640      	mov	r0, r8
 800578a:	47d0      	blx	sl
 800578c:	3001      	adds	r0, #1
 800578e:	d0ab      	beq.n	80056e8 <_printf_i+0x164>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	079b      	lsls	r3, r3, #30
 8005794:	d413      	bmi.n	80057be <_printf_i+0x23a>
 8005796:	68e0      	ldr	r0, [r4, #12]
 8005798:	9b03      	ldr	r3, [sp, #12]
 800579a:	4298      	cmp	r0, r3
 800579c:	bfb8      	it	lt
 800579e:	4618      	movlt	r0, r3
 80057a0:	e7a4      	b.n	80056ec <_printf_i+0x168>
 80057a2:	2301      	movs	r3, #1
 80057a4:	4632      	mov	r2, r6
 80057a6:	4649      	mov	r1, r9
 80057a8:	4640      	mov	r0, r8
 80057aa:	47d0      	blx	sl
 80057ac:	3001      	adds	r0, #1
 80057ae:	d09b      	beq.n	80056e8 <_printf_i+0x164>
 80057b0:	3501      	adds	r5, #1
 80057b2:	68e3      	ldr	r3, [r4, #12]
 80057b4:	9903      	ldr	r1, [sp, #12]
 80057b6:	1a5b      	subs	r3, r3, r1
 80057b8:	42ab      	cmp	r3, r5
 80057ba:	dcf2      	bgt.n	80057a2 <_printf_i+0x21e>
 80057bc:	e7eb      	b.n	8005796 <_printf_i+0x212>
 80057be:	2500      	movs	r5, #0
 80057c0:	f104 0619 	add.w	r6, r4, #25
 80057c4:	e7f5      	b.n	80057b2 <_printf_i+0x22e>
 80057c6:	bf00      	nop
 80057c8:	08009654 	.word	0x08009654
 80057cc:	08009665 	.word	0x08009665

080057d0 <_sbrk_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4d06      	ldr	r5, [pc, #24]	; (80057ec <_sbrk_r+0x1c>)
 80057d4:	2300      	movs	r3, #0
 80057d6:	4604      	mov	r4, r0
 80057d8:	4608      	mov	r0, r1
 80057da:	602b      	str	r3, [r5, #0]
 80057dc:	f003 fda2 	bl	8009324 <_sbrk>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d102      	bne.n	80057ea <_sbrk_r+0x1a>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	b103      	cbz	r3, 80057ea <_sbrk_r+0x1a>
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	bd38      	pop	{r3, r4, r5, pc}
 80057ec:	20011a94 	.word	0x20011a94

080057f0 <siprintf>:
 80057f0:	b40e      	push	{r1, r2, r3}
 80057f2:	b500      	push	{lr}
 80057f4:	b09c      	sub	sp, #112	; 0x70
 80057f6:	ab1d      	add	r3, sp, #116	; 0x74
 80057f8:	9002      	str	r0, [sp, #8]
 80057fa:	9006      	str	r0, [sp, #24]
 80057fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005800:	4809      	ldr	r0, [pc, #36]	; (8005828 <siprintf+0x38>)
 8005802:	9107      	str	r1, [sp, #28]
 8005804:	9104      	str	r1, [sp, #16]
 8005806:	4909      	ldr	r1, [pc, #36]	; (800582c <siprintf+0x3c>)
 8005808:	f853 2b04 	ldr.w	r2, [r3], #4
 800580c:	9105      	str	r1, [sp, #20]
 800580e:	6800      	ldr	r0, [r0, #0]
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	a902      	add	r1, sp, #8
 8005814:	f001 fb40 	bl	8006e98 <_svfiprintf_r>
 8005818:	9b02      	ldr	r3, [sp, #8]
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	b01c      	add	sp, #112	; 0x70
 8005820:	f85d eb04 	ldr.w	lr, [sp], #4
 8005824:	b003      	add	sp, #12
 8005826:	4770      	bx	lr
 8005828:	20000008 	.word	0x20000008
 800582c:	ffff0208 	.word	0xffff0208

08005830 <siscanf>:
 8005830:	b40e      	push	{r1, r2, r3}
 8005832:	b510      	push	{r4, lr}
 8005834:	b09f      	sub	sp, #124	; 0x7c
 8005836:	ac21      	add	r4, sp, #132	; 0x84
 8005838:	f44f 7101 	mov.w	r1, #516	; 0x204
 800583c:	f854 2b04 	ldr.w	r2, [r4], #4
 8005840:	9201      	str	r2, [sp, #4]
 8005842:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005846:	9004      	str	r0, [sp, #16]
 8005848:	9008      	str	r0, [sp, #32]
 800584a:	f7fa fcd3 	bl	80001f4 <strlen>
 800584e:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <siscanf+0x50>)
 8005850:	9005      	str	r0, [sp, #20]
 8005852:	9009      	str	r0, [sp, #36]	; 0x24
 8005854:	930d      	str	r3, [sp, #52]	; 0x34
 8005856:	480b      	ldr	r0, [pc, #44]	; (8005884 <siscanf+0x54>)
 8005858:	9a01      	ldr	r2, [sp, #4]
 800585a:	6800      	ldr	r0, [r0, #0]
 800585c:	9403      	str	r4, [sp, #12]
 800585e:	2300      	movs	r3, #0
 8005860:	9311      	str	r3, [sp, #68]	; 0x44
 8005862:	9316      	str	r3, [sp, #88]	; 0x58
 8005864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005868:	f8ad 301e 	strh.w	r3, [sp, #30]
 800586c:	a904      	add	r1, sp, #16
 800586e:	4623      	mov	r3, r4
 8005870:	f001 fc6c 	bl	800714c <__ssvfiscanf_r>
 8005874:	b01f      	add	sp, #124	; 0x7c
 8005876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800587a:	b003      	add	sp, #12
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	080058ab 	.word	0x080058ab
 8005884:	20000008 	.word	0x20000008

08005888 <__sread>:
 8005888:	b510      	push	{r4, lr}
 800588a:	460c      	mov	r4, r1
 800588c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005890:	f001 ff26 	bl	80076e0 <_read_r>
 8005894:	2800      	cmp	r0, #0
 8005896:	bfab      	itete	ge
 8005898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800589a:	89a3      	ldrhlt	r3, [r4, #12]
 800589c:	181b      	addge	r3, r3, r0
 800589e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058a2:	bfac      	ite	ge
 80058a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80058a6:	81a3      	strhlt	r3, [r4, #12]
 80058a8:	bd10      	pop	{r4, pc}

080058aa <__seofread>:
 80058aa:	2000      	movs	r0, #0
 80058ac:	4770      	bx	lr

080058ae <__swrite>:
 80058ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b2:	461f      	mov	r7, r3
 80058b4:	898b      	ldrh	r3, [r1, #12]
 80058b6:	05db      	lsls	r3, r3, #23
 80058b8:	4605      	mov	r5, r0
 80058ba:	460c      	mov	r4, r1
 80058bc:	4616      	mov	r6, r2
 80058be:	d505      	bpl.n	80058cc <__swrite+0x1e>
 80058c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c4:	2302      	movs	r3, #2
 80058c6:	2200      	movs	r2, #0
 80058c8:	f000 fec4 	bl	8006654 <_lseek_r>
 80058cc:	89a3      	ldrh	r3, [r4, #12]
 80058ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058d6:	81a3      	strh	r3, [r4, #12]
 80058d8:	4632      	mov	r2, r6
 80058da:	463b      	mov	r3, r7
 80058dc:	4628      	mov	r0, r5
 80058de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058e2:	f000 b817 	b.w	8005914 <_write_r>

080058e6 <__sseek>:
 80058e6:	b510      	push	{r4, lr}
 80058e8:	460c      	mov	r4, r1
 80058ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ee:	f000 feb1 	bl	8006654 <_lseek_r>
 80058f2:	1c43      	adds	r3, r0, #1
 80058f4:	89a3      	ldrh	r3, [r4, #12]
 80058f6:	bf15      	itete	ne
 80058f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80058fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005902:	81a3      	strheq	r3, [r4, #12]
 8005904:	bf18      	it	ne
 8005906:	81a3      	strhne	r3, [r4, #12]
 8005908:	bd10      	pop	{r4, pc}

0800590a <__sclose>:
 800590a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590e:	f000 b813 	b.w	8005938 <_close_r>
	...

08005914 <_write_r>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	4d07      	ldr	r5, [pc, #28]	; (8005934 <_write_r+0x20>)
 8005918:	4604      	mov	r4, r0
 800591a:	4608      	mov	r0, r1
 800591c:	4611      	mov	r1, r2
 800591e:	2200      	movs	r2, #0
 8005920:	602a      	str	r2, [r5, #0]
 8005922:	461a      	mov	r2, r3
 8005924:	f7fb fc53 	bl	80011ce <_write>
 8005928:	1c43      	adds	r3, r0, #1
 800592a:	d102      	bne.n	8005932 <_write_r+0x1e>
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	b103      	cbz	r3, 8005932 <_write_r+0x1e>
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	bd38      	pop	{r3, r4, r5, pc}
 8005934:	20011a94 	.word	0x20011a94

08005938 <_close_r>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	4d06      	ldr	r5, [pc, #24]	; (8005954 <_close_r+0x1c>)
 800593c:	2300      	movs	r3, #0
 800593e:	4604      	mov	r4, r0
 8005940:	4608      	mov	r0, r1
 8005942:	602b      	str	r3, [r5, #0]
 8005944:	f7fb fc5f 	bl	8001206 <_close>
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	d102      	bne.n	8005952 <_close_r+0x1a>
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	b103      	cbz	r3, 8005952 <_close_r+0x1a>
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	bd38      	pop	{r3, r4, r5, pc}
 8005954:	20011a94 	.word	0x20011a94

08005958 <quorem>:
 8005958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	6903      	ldr	r3, [r0, #16]
 800595e:	690c      	ldr	r4, [r1, #16]
 8005960:	42a3      	cmp	r3, r4
 8005962:	4607      	mov	r7, r0
 8005964:	f2c0 8081 	blt.w	8005a6a <quorem+0x112>
 8005968:	3c01      	subs	r4, #1
 800596a:	f101 0814 	add.w	r8, r1, #20
 800596e:	f100 0514 	add.w	r5, r0, #20
 8005972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800597c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005980:	3301      	adds	r3, #1
 8005982:	429a      	cmp	r2, r3
 8005984:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005988:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800598c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005990:	d331      	bcc.n	80059f6 <quorem+0x9e>
 8005992:	f04f 0e00 	mov.w	lr, #0
 8005996:	4640      	mov	r0, r8
 8005998:	46ac      	mov	ip, r5
 800599a:	46f2      	mov	sl, lr
 800599c:	f850 2b04 	ldr.w	r2, [r0], #4
 80059a0:	b293      	uxth	r3, r2
 80059a2:	fb06 e303 	mla	r3, r6, r3, lr
 80059a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	ebaa 0303 	sub.w	r3, sl, r3
 80059b0:	f8dc a000 	ldr.w	sl, [ip]
 80059b4:	0c12      	lsrs	r2, r2, #16
 80059b6:	fa13 f38a 	uxtah	r3, r3, sl
 80059ba:	fb06 e202 	mla	r2, r6, r2, lr
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	9b00      	ldr	r3, [sp, #0]
 80059c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059c6:	b292      	uxth	r2, r2
 80059c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80059d4:	4581      	cmp	r9, r0
 80059d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059da:	f84c 3b04 	str.w	r3, [ip], #4
 80059de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059e2:	d2db      	bcs.n	800599c <quorem+0x44>
 80059e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80059e8:	b92b      	cbnz	r3, 80059f6 <quorem+0x9e>
 80059ea:	9b01      	ldr	r3, [sp, #4]
 80059ec:	3b04      	subs	r3, #4
 80059ee:	429d      	cmp	r5, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	d32e      	bcc.n	8005a52 <quorem+0xfa>
 80059f4:	613c      	str	r4, [r7, #16]
 80059f6:	4638      	mov	r0, r7
 80059f8:	f001 f8da 	bl	8006bb0 <__mcmp>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	db24      	blt.n	8005a4a <quorem+0xf2>
 8005a00:	3601      	adds	r6, #1
 8005a02:	4628      	mov	r0, r5
 8005a04:	f04f 0c00 	mov.w	ip, #0
 8005a08:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a0c:	f8d0 e000 	ldr.w	lr, [r0]
 8005a10:	b293      	uxth	r3, r2
 8005a12:	ebac 0303 	sub.w	r3, ip, r3
 8005a16:	0c12      	lsrs	r2, r2, #16
 8005a18:	fa13 f38e 	uxtah	r3, r3, lr
 8005a1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a2a:	45c1      	cmp	r9, r8
 8005a2c:	f840 3b04 	str.w	r3, [r0], #4
 8005a30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a34:	d2e8      	bcs.n	8005a08 <quorem+0xb0>
 8005a36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a3e:	b922      	cbnz	r2, 8005a4a <quorem+0xf2>
 8005a40:	3b04      	subs	r3, #4
 8005a42:	429d      	cmp	r5, r3
 8005a44:	461a      	mov	r2, r3
 8005a46:	d30a      	bcc.n	8005a5e <quorem+0x106>
 8005a48:	613c      	str	r4, [r7, #16]
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	b003      	add	sp, #12
 8005a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a52:	6812      	ldr	r2, [r2, #0]
 8005a54:	3b04      	subs	r3, #4
 8005a56:	2a00      	cmp	r2, #0
 8005a58:	d1cc      	bne.n	80059f4 <quorem+0x9c>
 8005a5a:	3c01      	subs	r4, #1
 8005a5c:	e7c7      	b.n	80059ee <quorem+0x96>
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	3b04      	subs	r3, #4
 8005a62:	2a00      	cmp	r2, #0
 8005a64:	d1f0      	bne.n	8005a48 <quorem+0xf0>
 8005a66:	3c01      	subs	r4, #1
 8005a68:	e7eb      	b.n	8005a42 <quorem+0xea>
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	e7ee      	b.n	8005a4c <quorem+0xf4>
	...

08005a70 <_dtoa_r>:
 8005a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a74:	ed2d 8b04 	vpush	{d8-d9}
 8005a78:	ec57 6b10 	vmov	r6, r7, d0
 8005a7c:	b093      	sub	sp, #76	; 0x4c
 8005a7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a84:	9106      	str	r1, [sp, #24]
 8005a86:	ee10 aa10 	vmov	sl, s0
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a8e:	930c      	str	r3, [sp, #48]	; 0x30
 8005a90:	46bb      	mov	fp, r7
 8005a92:	b975      	cbnz	r5, 8005ab2 <_dtoa_r+0x42>
 8005a94:	2010      	movs	r0, #16
 8005a96:	f7ff f941 	bl	8004d1c <malloc>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	6260      	str	r0, [r4, #36]	; 0x24
 8005a9e:	b920      	cbnz	r0, 8005aaa <_dtoa_r+0x3a>
 8005aa0:	4ba7      	ldr	r3, [pc, #668]	; (8005d40 <_dtoa_r+0x2d0>)
 8005aa2:	21ea      	movs	r1, #234	; 0xea
 8005aa4:	48a7      	ldr	r0, [pc, #668]	; (8005d44 <_dtoa_r+0x2d4>)
 8005aa6:	f001 ff97 	bl	80079d8 <__assert_func>
 8005aaa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005aae:	6005      	str	r5, [r0, #0]
 8005ab0:	60c5      	str	r5, [r0, #12]
 8005ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ab4:	6819      	ldr	r1, [r3, #0]
 8005ab6:	b151      	cbz	r1, 8005ace <_dtoa_r+0x5e>
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	604a      	str	r2, [r1, #4]
 8005abc:	2301      	movs	r3, #1
 8005abe:	4093      	lsls	r3, r2
 8005ac0:	608b      	str	r3, [r1, #8]
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 fe32 	bl	800672c <_Bfree>
 8005ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	1e3b      	subs	r3, r7, #0
 8005ad0:	bfaa      	itet	ge
 8005ad2:	2300      	movge	r3, #0
 8005ad4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005ad8:	f8c8 3000 	strge.w	r3, [r8]
 8005adc:	4b9a      	ldr	r3, [pc, #616]	; (8005d48 <_dtoa_r+0x2d8>)
 8005ade:	bfbc      	itt	lt
 8005ae0:	2201      	movlt	r2, #1
 8005ae2:	f8c8 2000 	strlt.w	r2, [r8]
 8005ae6:	ea33 030b 	bics.w	r3, r3, fp
 8005aea:	d11b      	bne.n	8005b24 <_dtoa_r+0xb4>
 8005aec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005aee:	f242 730f 	movw	r3, #9999	; 0x270f
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005af8:	4333      	orrs	r3, r6
 8005afa:	f000 8592 	beq.w	8006622 <_dtoa_r+0xbb2>
 8005afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b00:	b963      	cbnz	r3, 8005b1c <_dtoa_r+0xac>
 8005b02:	4b92      	ldr	r3, [pc, #584]	; (8005d4c <_dtoa_r+0x2dc>)
 8005b04:	e022      	b.n	8005b4c <_dtoa_r+0xdc>
 8005b06:	4b92      	ldr	r3, [pc, #584]	; (8005d50 <_dtoa_r+0x2e0>)
 8005b08:	9301      	str	r3, [sp, #4]
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	9801      	ldr	r0, [sp, #4]
 8005b12:	b013      	add	sp, #76	; 0x4c
 8005b14:	ecbd 8b04 	vpop	{d8-d9}
 8005b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1c:	4b8b      	ldr	r3, [pc, #556]	; (8005d4c <_dtoa_r+0x2dc>)
 8005b1e:	9301      	str	r3, [sp, #4]
 8005b20:	3303      	adds	r3, #3
 8005b22:	e7f3      	b.n	8005b0c <_dtoa_r+0x9c>
 8005b24:	2200      	movs	r2, #0
 8005b26:	2300      	movs	r3, #0
 8005b28:	4650      	mov	r0, sl
 8005b2a:	4659      	mov	r1, fp
 8005b2c:	f7fa ffe4 	bl	8000af8 <__aeabi_dcmpeq>
 8005b30:	ec4b ab19 	vmov	d9, sl, fp
 8005b34:	4680      	mov	r8, r0
 8005b36:	b158      	cbz	r0, 8005b50 <_dtoa_r+0xe0>
 8005b38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 856b 	beq.w	800661c <_dtoa_r+0xbac>
 8005b46:	4883      	ldr	r0, [pc, #524]	; (8005d54 <_dtoa_r+0x2e4>)
 8005b48:	6018      	str	r0, [r3, #0]
 8005b4a:	1e43      	subs	r3, r0, #1
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	e7df      	b.n	8005b10 <_dtoa_r+0xa0>
 8005b50:	ec4b ab10 	vmov	d0, sl, fp
 8005b54:	aa10      	add	r2, sp, #64	; 0x40
 8005b56:	a911      	add	r1, sp, #68	; 0x44
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f001 f8cf 	bl	8006cfc <__d2b>
 8005b5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005b62:	ee08 0a10 	vmov	s16, r0
 8005b66:	2d00      	cmp	r5, #0
 8005b68:	f000 8084 	beq.w	8005c74 <_dtoa_r+0x204>
 8005b6c:	ee19 3a90 	vmov	r3, s19
 8005b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005b78:	4656      	mov	r6, sl
 8005b7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005b7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005b86:	4b74      	ldr	r3, [pc, #464]	; (8005d58 <_dtoa_r+0x2e8>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	4639      	mov	r1, r7
 8005b8e:	f7fa fb93 	bl	80002b8 <__aeabi_dsub>
 8005b92:	a365      	add	r3, pc, #404	; (adr r3, 8005d28 <_dtoa_r+0x2b8>)
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	f7fa fd46 	bl	8000628 <__aeabi_dmul>
 8005b9c:	a364      	add	r3, pc, #400	; (adr r3, 8005d30 <_dtoa_r+0x2c0>)
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	f7fa fb8b 	bl	80002bc <__adddf3>
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	4628      	mov	r0, r5
 8005baa:	460f      	mov	r7, r1
 8005bac:	f7fa fcd2 	bl	8000554 <__aeabi_i2d>
 8005bb0:	a361      	add	r3, pc, #388	; (adr r3, 8005d38 <_dtoa_r+0x2c8>)
 8005bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb6:	f7fa fd37 	bl	8000628 <__aeabi_dmul>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	f7fa fb7b 	bl	80002bc <__adddf3>
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	460f      	mov	r7, r1
 8005bca:	f7fa ffdd 	bl	8000b88 <__aeabi_d2iz>
 8005bce:	2200      	movs	r2, #0
 8005bd0:	9000      	str	r0, [sp, #0]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	4639      	mov	r1, r7
 8005bd8:	f7fa ff98 	bl	8000b0c <__aeabi_dcmplt>
 8005bdc:	b150      	cbz	r0, 8005bf4 <_dtoa_r+0x184>
 8005bde:	9800      	ldr	r0, [sp, #0]
 8005be0:	f7fa fcb8 	bl	8000554 <__aeabi_i2d>
 8005be4:	4632      	mov	r2, r6
 8005be6:	463b      	mov	r3, r7
 8005be8:	f7fa ff86 	bl	8000af8 <__aeabi_dcmpeq>
 8005bec:	b910      	cbnz	r0, 8005bf4 <_dtoa_r+0x184>
 8005bee:	9b00      	ldr	r3, [sp, #0]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	9b00      	ldr	r3, [sp, #0]
 8005bf6:	2b16      	cmp	r3, #22
 8005bf8:	d85a      	bhi.n	8005cb0 <_dtoa_r+0x240>
 8005bfa:	9a00      	ldr	r2, [sp, #0]
 8005bfc:	4b57      	ldr	r3, [pc, #348]	; (8005d5c <_dtoa_r+0x2ec>)
 8005bfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	ec51 0b19 	vmov	r0, r1, d9
 8005c0a:	f7fa ff7f 	bl	8000b0c <__aeabi_dcmplt>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d050      	beq.n	8005cb4 <_dtoa_r+0x244>
 8005c12:	9b00      	ldr	r3, [sp, #0]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	2300      	movs	r3, #0
 8005c1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c1e:	1b5d      	subs	r5, r3, r5
 8005c20:	1e6b      	subs	r3, r5, #1
 8005c22:	9305      	str	r3, [sp, #20]
 8005c24:	bf45      	ittet	mi
 8005c26:	f1c5 0301 	rsbmi	r3, r5, #1
 8005c2a:	9304      	strmi	r3, [sp, #16]
 8005c2c:	2300      	movpl	r3, #0
 8005c2e:	2300      	movmi	r3, #0
 8005c30:	bf4c      	ite	mi
 8005c32:	9305      	strmi	r3, [sp, #20]
 8005c34:	9304      	strpl	r3, [sp, #16]
 8005c36:	9b00      	ldr	r3, [sp, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	db3d      	blt.n	8005cb8 <_dtoa_r+0x248>
 8005c3c:	9b05      	ldr	r3, [sp, #20]
 8005c3e:	9a00      	ldr	r2, [sp, #0]
 8005c40:	920a      	str	r2, [sp, #40]	; 0x28
 8005c42:	4413      	add	r3, r2
 8005c44:	9305      	str	r3, [sp, #20]
 8005c46:	2300      	movs	r3, #0
 8005c48:	9307      	str	r3, [sp, #28]
 8005c4a:	9b06      	ldr	r3, [sp, #24]
 8005c4c:	2b09      	cmp	r3, #9
 8005c4e:	f200 8089 	bhi.w	8005d64 <_dtoa_r+0x2f4>
 8005c52:	2b05      	cmp	r3, #5
 8005c54:	bfc4      	itt	gt
 8005c56:	3b04      	subgt	r3, #4
 8005c58:	9306      	strgt	r3, [sp, #24]
 8005c5a:	9b06      	ldr	r3, [sp, #24]
 8005c5c:	f1a3 0302 	sub.w	r3, r3, #2
 8005c60:	bfcc      	ite	gt
 8005c62:	2500      	movgt	r5, #0
 8005c64:	2501      	movle	r5, #1
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	f200 8087 	bhi.w	8005d7a <_dtoa_r+0x30a>
 8005c6c:	e8df f003 	tbb	[pc, r3]
 8005c70:	59383a2d 	.word	0x59383a2d
 8005c74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005c78:	441d      	add	r5, r3
 8005c7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	bfc1      	itttt	gt
 8005c82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005c8a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005c8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c92:	bfda      	itte	le
 8005c94:	f1c3 0320 	rsble	r3, r3, #32
 8005c98:	fa06 f003 	lslle.w	r0, r6, r3
 8005c9c:	4318      	orrgt	r0, r3
 8005c9e:	f7fa fc49 	bl	8000534 <__aeabi_ui2d>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4606      	mov	r6, r0
 8005ca6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005caa:	3d01      	subs	r5, #1
 8005cac:	930e      	str	r3, [sp, #56]	; 0x38
 8005cae:	e76a      	b.n	8005b86 <_dtoa_r+0x116>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e7b2      	b.n	8005c1a <_dtoa_r+0x1aa>
 8005cb4:	900b      	str	r0, [sp, #44]	; 0x2c
 8005cb6:	e7b1      	b.n	8005c1c <_dtoa_r+0x1ac>
 8005cb8:	9b04      	ldr	r3, [sp, #16]
 8005cba:	9a00      	ldr	r2, [sp, #0]
 8005cbc:	1a9b      	subs	r3, r3, r2
 8005cbe:	9304      	str	r3, [sp, #16]
 8005cc0:	4253      	negs	r3, r2
 8005cc2:	9307      	str	r3, [sp, #28]
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8005cc8:	e7bf      	b.n	8005c4a <_dtoa_r+0x1da>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9308      	str	r3, [sp, #32]
 8005cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	dc55      	bgt.n	8005d80 <_dtoa_r+0x310>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8005cde:	e00c      	b.n	8005cfa <_dtoa_r+0x28a>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e7f3      	b.n	8005ccc <_dtoa_r+0x25c>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ce8:	9308      	str	r3, [sp, #32]
 8005cea:	9b00      	ldr	r3, [sp, #0]
 8005cec:	4413      	add	r3, r2
 8005cee:	9302      	str	r3, [sp, #8]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	9303      	str	r3, [sp, #12]
 8005cf6:	bfb8      	it	lt
 8005cf8:	2301      	movlt	r3, #1
 8005cfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	6042      	str	r2, [r0, #4]
 8005d00:	2204      	movs	r2, #4
 8005d02:	f102 0614 	add.w	r6, r2, #20
 8005d06:	429e      	cmp	r6, r3
 8005d08:	6841      	ldr	r1, [r0, #4]
 8005d0a:	d93d      	bls.n	8005d88 <_dtoa_r+0x318>
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f000 fccd 	bl	80066ac <_Balloc>
 8005d12:	9001      	str	r0, [sp, #4]
 8005d14:	2800      	cmp	r0, #0
 8005d16:	d13b      	bne.n	8005d90 <_dtoa_r+0x320>
 8005d18:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <_dtoa_r+0x2f0>)
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d20:	e6c0      	b.n	8005aa4 <_dtoa_r+0x34>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e7df      	b.n	8005ce6 <_dtoa_r+0x276>
 8005d26:	bf00      	nop
 8005d28:	636f4361 	.word	0x636f4361
 8005d2c:	3fd287a7 	.word	0x3fd287a7
 8005d30:	8b60c8b3 	.word	0x8b60c8b3
 8005d34:	3fc68a28 	.word	0x3fc68a28
 8005d38:	509f79fb 	.word	0x509f79fb
 8005d3c:	3fd34413 	.word	0x3fd34413
 8005d40:	08009683 	.word	0x08009683
 8005d44:	0800969a 	.word	0x0800969a
 8005d48:	7ff00000 	.word	0x7ff00000
 8005d4c:	0800967f 	.word	0x0800967f
 8005d50:	08009676 	.word	0x08009676
 8005d54:	0800987a 	.word	0x0800987a
 8005d58:	3ff80000 	.word	0x3ff80000
 8005d5c:	08009790 	.word	0x08009790
 8005d60:	080096f5 	.word	0x080096f5
 8005d64:	2501      	movs	r5, #1
 8005d66:	2300      	movs	r3, #0
 8005d68:	9306      	str	r3, [sp, #24]
 8005d6a:	9508      	str	r5, [sp, #32]
 8005d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d74:	2200      	movs	r2, #0
 8005d76:	2312      	movs	r3, #18
 8005d78:	e7b0      	b.n	8005cdc <_dtoa_r+0x26c>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	9308      	str	r3, [sp, #32]
 8005d7e:	e7f5      	b.n	8005d6c <_dtoa_r+0x2fc>
 8005d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d86:	e7b8      	b.n	8005cfa <_dtoa_r+0x28a>
 8005d88:	3101      	adds	r1, #1
 8005d8a:	6041      	str	r1, [r0, #4]
 8005d8c:	0052      	lsls	r2, r2, #1
 8005d8e:	e7b8      	b.n	8005d02 <_dtoa_r+0x292>
 8005d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d92:	9a01      	ldr	r2, [sp, #4]
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	9b03      	ldr	r3, [sp, #12]
 8005d98:	2b0e      	cmp	r3, #14
 8005d9a:	f200 809d 	bhi.w	8005ed8 <_dtoa_r+0x468>
 8005d9e:	2d00      	cmp	r5, #0
 8005da0:	f000 809a 	beq.w	8005ed8 <_dtoa_r+0x468>
 8005da4:	9b00      	ldr	r3, [sp, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	dd32      	ble.n	8005e10 <_dtoa_r+0x3a0>
 8005daa:	4ab7      	ldr	r2, [pc, #732]	; (8006088 <_dtoa_r+0x618>)
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005db4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005db8:	9b00      	ldr	r3, [sp, #0]
 8005dba:	05d8      	lsls	r0, r3, #23
 8005dbc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005dc0:	d516      	bpl.n	8005df0 <_dtoa_r+0x380>
 8005dc2:	4bb2      	ldr	r3, [pc, #712]	; (800608c <_dtoa_r+0x61c>)
 8005dc4:	ec51 0b19 	vmov	r0, r1, d9
 8005dc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005dcc:	f7fa fd56 	bl	800087c <__aeabi_ddiv>
 8005dd0:	f007 070f 	and.w	r7, r7, #15
 8005dd4:	4682      	mov	sl, r0
 8005dd6:	468b      	mov	fp, r1
 8005dd8:	2503      	movs	r5, #3
 8005dda:	4eac      	ldr	r6, [pc, #688]	; (800608c <_dtoa_r+0x61c>)
 8005ddc:	b957      	cbnz	r7, 8005df4 <_dtoa_r+0x384>
 8005dde:	4642      	mov	r2, r8
 8005de0:	464b      	mov	r3, r9
 8005de2:	4650      	mov	r0, sl
 8005de4:	4659      	mov	r1, fp
 8005de6:	f7fa fd49 	bl	800087c <__aeabi_ddiv>
 8005dea:	4682      	mov	sl, r0
 8005dec:	468b      	mov	fp, r1
 8005dee:	e028      	b.n	8005e42 <_dtoa_r+0x3d2>
 8005df0:	2502      	movs	r5, #2
 8005df2:	e7f2      	b.n	8005dda <_dtoa_r+0x36a>
 8005df4:	07f9      	lsls	r1, r7, #31
 8005df6:	d508      	bpl.n	8005e0a <_dtoa_r+0x39a>
 8005df8:	4640      	mov	r0, r8
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e00:	f7fa fc12 	bl	8000628 <__aeabi_dmul>
 8005e04:	3501      	adds	r5, #1
 8005e06:	4680      	mov	r8, r0
 8005e08:	4689      	mov	r9, r1
 8005e0a:	107f      	asrs	r7, r7, #1
 8005e0c:	3608      	adds	r6, #8
 8005e0e:	e7e5      	b.n	8005ddc <_dtoa_r+0x36c>
 8005e10:	f000 809b 	beq.w	8005f4a <_dtoa_r+0x4da>
 8005e14:	9b00      	ldr	r3, [sp, #0]
 8005e16:	4f9d      	ldr	r7, [pc, #628]	; (800608c <_dtoa_r+0x61c>)
 8005e18:	425e      	negs	r6, r3
 8005e1a:	4b9b      	ldr	r3, [pc, #620]	; (8006088 <_dtoa_r+0x618>)
 8005e1c:	f006 020f 	and.w	r2, r6, #15
 8005e20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	ec51 0b19 	vmov	r0, r1, d9
 8005e2c:	f7fa fbfc 	bl	8000628 <__aeabi_dmul>
 8005e30:	1136      	asrs	r6, r6, #4
 8005e32:	4682      	mov	sl, r0
 8005e34:	468b      	mov	fp, r1
 8005e36:	2300      	movs	r3, #0
 8005e38:	2502      	movs	r5, #2
 8005e3a:	2e00      	cmp	r6, #0
 8005e3c:	d17a      	bne.n	8005f34 <_dtoa_r+0x4c4>
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1d3      	bne.n	8005dea <_dtoa_r+0x37a>
 8005e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 8082 	beq.w	8005f4e <_dtoa_r+0x4de>
 8005e4a:	4b91      	ldr	r3, [pc, #580]	; (8006090 <_dtoa_r+0x620>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	4650      	mov	r0, sl
 8005e50:	4659      	mov	r1, fp
 8005e52:	f7fa fe5b 	bl	8000b0c <__aeabi_dcmplt>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d079      	beq.n	8005f4e <_dtoa_r+0x4de>
 8005e5a:	9b03      	ldr	r3, [sp, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d076      	beq.n	8005f4e <_dtoa_r+0x4de>
 8005e60:	9b02      	ldr	r3, [sp, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	dd36      	ble.n	8005ed4 <_dtoa_r+0x464>
 8005e66:	9b00      	ldr	r3, [sp, #0]
 8005e68:	4650      	mov	r0, sl
 8005e6a:	4659      	mov	r1, fp
 8005e6c:	1e5f      	subs	r7, r3, #1
 8005e6e:	2200      	movs	r2, #0
 8005e70:	4b88      	ldr	r3, [pc, #544]	; (8006094 <_dtoa_r+0x624>)
 8005e72:	f7fa fbd9 	bl	8000628 <__aeabi_dmul>
 8005e76:	9e02      	ldr	r6, [sp, #8]
 8005e78:	4682      	mov	sl, r0
 8005e7a:	468b      	mov	fp, r1
 8005e7c:	3501      	adds	r5, #1
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f7fa fb68 	bl	8000554 <__aeabi_i2d>
 8005e84:	4652      	mov	r2, sl
 8005e86:	465b      	mov	r3, fp
 8005e88:	f7fa fbce 	bl	8000628 <__aeabi_dmul>
 8005e8c:	4b82      	ldr	r3, [pc, #520]	; (8006098 <_dtoa_r+0x628>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f7fa fa14 	bl	80002bc <__adddf3>
 8005e94:	46d0      	mov	r8, sl
 8005e96:	46d9      	mov	r9, fp
 8005e98:	4682      	mov	sl, r0
 8005e9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005e9e:	2e00      	cmp	r6, #0
 8005ea0:	d158      	bne.n	8005f54 <_dtoa_r+0x4e4>
 8005ea2:	4b7e      	ldr	r3, [pc, #504]	; (800609c <_dtoa_r+0x62c>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	f7fa fa05 	bl	80002b8 <__aeabi_dsub>
 8005eae:	4652      	mov	r2, sl
 8005eb0:	465b      	mov	r3, fp
 8005eb2:	4680      	mov	r8, r0
 8005eb4:	4689      	mov	r9, r1
 8005eb6:	f7fa fe47 	bl	8000b48 <__aeabi_dcmpgt>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	f040 8295 	bne.w	80063ea <_dtoa_r+0x97a>
 8005ec0:	4652      	mov	r2, sl
 8005ec2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005ec6:	4640      	mov	r0, r8
 8005ec8:	4649      	mov	r1, r9
 8005eca:	f7fa fe1f 	bl	8000b0c <__aeabi_dcmplt>
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	f040 8289 	bne.w	80063e6 <_dtoa_r+0x976>
 8005ed4:	ec5b ab19 	vmov	sl, fp, d9
 8005ed8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f2c0 8148 	blt.w	8006170 <_dtoa_r+0x700>
 8005ee0:	9a00      	ldr	r2, [sp, #0]
 8005ee2:	2a0e      	cmp	r2, #14
 8005ee4:	f300 8144 	bgt.w	8006170 <_dtoa_r+0x700>
 8005ee8:	4b67      	ldr	r3, [pc, #412]	; (8006088 <_dtoa_r+0x618>)
 8005eea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f280 80d5 	bge.w	80060a4 <_dtoa_r+0x634>
 8005efa:	9b03      	ldr	r3, [sp, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f300 80d1 	bgt.w	80060a4 <_dtoa_r+0x634>
 8005f02:	f040 826f 	bne.w	80063e4 <_dtoa_r+0x974>
 8005f06:	4b65      	ldr	r3, [pc, #404]	; (800609c <_dtoa_r+0x62c>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	4640      	mov	r0, r8
 8005f0c:	4649      	mov	r1, r9
 8005f0e:	f7fa fb8b 	bl	8000628 <__aeabi_dmul>
 8005f12:	4652      	mov	r2, sl
 8005f14:	465b      	mov	r3, fp
 8005f16:	f7fa fe0d 	bl	8000b34 <__aeabi_dcmpge>
 8005f1a:	9e03      	ldr	r6, [sp, #12]
 8005f1c:	4637      	mov	r7, r6
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	f040 8245 	bne.w	80063ae <_dtoa_r+0x93e>
 8005f24:	9d01      	ldr	r5, [sp, #4]
 8005f26:	2331      	movs	r3, #49	; 0x31
 8005f28:	f805 3b01 	strb.w	r3, [r5], #1
 8005f2c:	9b00      	ldr	r3, [sp, #0]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	e240      	b.n	80063b6 <_dtoa_r+0x946>
 8005f34:	07f2      	lsls	r2, r6, #31
 8005f36:	d505      	bpl.n	8005f44 <_dtoa_r+0x4d4>
 8005f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f3c:	f7fa fb74 	bl	8000628 <__aeabi_dmul>
 8005f40:	3501      	adds	r5, #1
 8005f42:	2301      	movs	r3, #1
 8005f44:	1076      	asrs	r6, r6, #1
 8005f46:	3708      	adds	r7, #8
 8005f48:	e777      	b.n	8005e3a <_dtoa_r+0x3ca>
 8005f4a:	2502      	movs	r5, #2
 8005f4c:	e779      	b.n	8005e42 <_dtoa_r+0x3d2>
 8005f4e:	9f00      	ldr	r7, [sp, #0]
 8005f50:	9e03      	ldr	r6, [sp, #12]
 8005f52:	e794      	b.n	8005e7e <_dtoa_r+0x40e>
 8005f54:	9901      	ldr	r1, [sp, #4]
 8005f56:	4b4c      	ldr	r3, [pc, #304]	; (8006088 <_dtoa_r+0x618>)
 8005f58:	4431      	add	r1, r6
 8005f5a:	910d      	str	r1, [sp, #52]	; 0x34
 8005f5c:	9908      	ldr	r1, [sp, #32]
 8005f5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f66:	2900      	cmp	r1, #0
 8005f68:	d043      	beq.n	8005ff2 <_dtoa_r+0x582>
 8005f6a:	494d      	ldr	r1, [pc, #308]	; (80060a0 <_dtoa_r+0x630>)
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	f7fa fc85 	bl	800087c <__aeabi_ddiv>
 8005f72:	4652      	mov	r2, sl
 8005f74:	465b      	mov	r3, fp
 8005f76:	f7fa f99f 	bl	80002b8 <__aeabi_dsub>
 8005f7a:	9d01      	ldr	r5, [sp, #4]
 8005f7c:	4682      	mov	sl, r0
 8005f7e:	468b      	mov	fp, r1
 8005f80:	4649      	mov	r1, r9
 8005f82:	4640      	mov	r0, r8
 8005f84:	f7fa fe00 	bl	8000b88 <__aeabi_d2iz>
 8005f88:	4606      	mov	r6, r0
 8005f8a:	f7fa fae3 	bl	8000554 <__aeabi_i2d>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4640      	mov	r0, r8
 8005f94:	4649      	mov	r1, r9
 8005f96:	f7fa f98f 	bl	80002b8 <__aeabi_dsub>
 8005f9a:	3630      	adds	r6, #48	; 0x30
 8005f9c:	f805 6b01 	strb.w	r6, [r5], #1
 8005fa0:	4652      	mov	r2, sl
 8005fa2:	465b      	mov	r3, fp
 8005fa4:	4680      	mov	r8, r0
 8005fa6:	4689      	mov	r9, r1
 8005fa8:	f7fa fdb0 	bl	8000b0c <__aeabi_dcmplt>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d163      	bne.n	8006078 <_dtoa_r+0x608>
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	4936      	ldr	r1, [pc, #216]	; (8006090 <_dtoa_r+0x620>)
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	f7fa f97e 	bl	80002b8 <__aeabi_dsub>
 8005fbc:	4652      	mov	r2, sl
 8005fbe:	465b      	mov	r3, fp
 8005fc0:	f7fa fda4 	bl	8000b0c <__aeabi_dcmplt>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	f040 80b5 	bne.w	8006134 <_dtoa_r+0x6c4>
 8005fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fcc:	429d      	cmp	r5, r3
 8005fce:	d081      	beq.n	8005ed4 <_dtoa_r+0x464>
 8005fd0:	4b30      	ldr	r3, [pc, #192]	; (8006094 <_dtoa_r+0x624>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	4650      	mov	r0, sl
 8005fd6:	4659      	mov	r1, fp
 8005fd8:	f7fa fb26 	bl	8000628 <__aeabi_dmul>
 8005fdc:	4b2d      	ldr	r3, [pc, #180]	; (8006094 <_dtoa_r+0x624>)
 8005fde:	4682      	mov	sl, r0
 8005fe0:	468b      	mov	fp, r1
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f7fa fb1e 	bl	8000628 <__aeabi_dmul>
 8005fec:	4680      	mov	r8, r0
 8005fee:	4689      	mov	r9, r1
 8005ff0:	e7c6      	b.n	8005f80 <_dtoa_r+0x510>
 8005ff2:	4650      	mov	r0, sl
 8005ff4:	4659      	mov	r1, fp
 8005ff6:	f7fa fb17 	bl	8000628 <__aeabi_dmul>
 8005ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ffc:	9d01      	ldr	r5, [sp, #4]
 8005ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006000:	4682      	mov	sl, r0
 8006002:	468b      	mov	fp, r1
 8006004:	4649      	mov	r1, r9
 8006006:	4640      	mov	r0, r8
 8006008:	f7fa fdbe 	bl	8000b88 <__aeabi_d2iz>
 800600c:	4606      	mov	r6, r0
 800600e:	f7fa faa1 	bl	8000554 <__aeabi_i2d>
 8006012:	3630      	adds	r6, #48	; 0x30
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4640      	mov	r0, r8
 800601a:	4649      	mov	r1, r9
 800601c:	f7fa f94c 	bl	80002b8 <__aeabi_dsub>
 8006020:	f805 6b01 	strb.w	r6, [r5], #1
 8006024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006026:	429d      	cmp	r5, r3
 8006028:	4680      	mov	r8, r0
 800602a:	4689      	mov	r9, r1
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	d124      	bne.n	800607c <_dtoa_r+0x60c>
 8006032:	4b1b      	ldr	r3, [pc, #108]	; (80060a0 <_dtoa_r+0x630>)
 8006034:	4650      	mov	r0, sl
 8006036:	4659      	mov	r1, fp
 8006038:	f7fa f940 	bl	80002bc <__adddf3>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4640      	mov	r0, r8
 8006042:	4649      	mov	r1, r9
 8006044:	f7fa fd80 	bl	8000b48 <__aeabi_dcmpgt>
 8006048:	2800      	cmp	r0, #0
 800604a:	d173      	bne.n	8006134 <_dtoa_r+0x6c4>
 800604c:	4652      	mov	r2, sl
 800604e:	465b      	mov	r3, fp
 8006050:	4913      	ldr	r1, [pc, #76]	; (80060a0 <_dtoa_r+0x630>)
 8006052:	2000      	movs	r0, #0
 8006054:	f7fa f930 	bl	80002b8 <__aeabi_dsub>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4640      	mov	r0, r8
 800605e:	4649      	mov	r1, r9
 8006060:	f7fa fd54 	bl	8000b0c <__aeabi_dcmplt>
 8006064:	2800      	cmp	r0, #0
 8006066:	f43f af35 	beq.w	8005ed4 <_dtoa_r+0x464>
 800606a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800606c:	1e6b      	subs	r3, r5, #1
 800606e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006070:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006074:	2b30      	cmp	r3, #48	; 0x30
 8006076:	d0f8      	beq.n	800606a <_dtoa_r+0x5fa>
 8006078:	9700      	str	r7, [sp, #0]
 800607a:	e049      	b.n	8006110 <_dtoa_r+0x6a0>
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <_dtoa_r+0x624>)
 800607e:	f7fa fad3 	bl	8000628 <__aeabi_dmul>
 8006082:	4680      	mov	r8, r0
 8006084:	4689      	mov	r9, r1
 8006086:	e7bd      	b.n	8006004 <_dtoa_r+0x594>
 8006088:	08009790 	.word	0x08009790
 800608c:	08009768 	.word	0x08009768
 8006090:	3ff00000 	.word	0x3ff00000
 8006094:	40240000 	.word	0x40240000
 8006098:	401c0000 	.word	0x401c0000
 800609c:	40140000 	.word	0x40140000
 80060a0:	3fe00000 	.word	0x3fe00000
 80060a4:	9d01      	ldr	r5, [sp, #4]
 80060a6:	4656      	mov	r6, sl
 80060a8:	465f      	mov	r7, fp
 80060aa:	4642      	mov	r2, r8
 80060ac:	464b      	mov	r3, r9
 80060ae:	4630      	mov	r0, r6
 80060b0:	4639      	mov	r1, r7
 80060b2:	f7fa fbe3 	bl	800087c <__aeabi_ddiv>
 80060b6:	f7fa fd67 	bl	8000b88 <__aeabi_d2iz>
 80060ba:	4682      	mov	sl, r0
 80060bc:	f7fa fa4a 	bl	8000554 <__aeabi_i2d>
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	f7fa fab0 	bl	8000628 <__aeabi_dmul>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4630      	mov	r0, r6
 80060ce:	4639      	mov	r1, r7
 80060d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80060d4:	f7fa f8f0 	bl	80002b8 <__aeabi_dsub>
 80060d8:	f805 6b01 	strb.w	r6, [r5], #1
 80060dc:	9e01      	ldr	r6, [sp, #4]
 80060de:	9f03      	ldr	r7, [sp, #12]
 80060e0:	1bae      	subs	r6, r5, r6
 80060e2:	42b7      	cmp	r7, r6
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	d135      	bne.n	8006156 <_dtoa_r+0x6e6>
 80060ea:	f7fa f8e7 	bl	80002bc <__adddf3>
 80060ee:	4642      	mov	r2, r8
 80060f0:	464b      	mov	r3, r9
 80060f2:	4606      	mov	r6, r0
 80060f4:	460f      	mov	r7, r1
 80060f6:	f7fa fd27 	bl	8000b48 <__aeabi_dcmpgt>
 80060fa:	b9d0      	cbnz	r0, 8006132 <_dtoa_r+0x6c2>
 80060fc:	4642      	mov	r2, r8
 80060fe:	464b      	mov	r3, r9
 8006100:	4630      	mov	r0, r6
 8006102:	4639      	mov	r1, r7
 8006104:	f7fa fcf8 	bl	8000af8 <__aeabi_dcmpeq>
 8006108:	b110      	cbz	r0, 8006110 <_dtoa_r+0x6a0>
 800610a:	f01a 0f01 	tst.w	sl, #1
 800610e:	d110      	bne.n	8006132 <_dtoa_r+0x6c2>
 8006110:	4620      	mov	r0, r4
 8006112:	ee18 1a10 	vmov	r1, s16
 8006116:	f000 fb09 	bl	800672c <_Bfree>
 800611a:	2300      	movs	r3, #0
 800611c:	9800      	ldr	r0, [sp, #0]
 800611e:	702b      	strb	r3, [r5, #0]
 8006120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006122:	3001      	adds	r0, #1
 8006124:	6018      	str	r0, [r3, #0]
 8006126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006128:	2b00      	cmp	r3, #0
 800612a:	f43f acf1 	beq.w	8005b10 <_dtoa_r+0xa0>
 800612e:	601d      	str	r5, [r3, #0]
 8006130:	e4ee      	b.n	8005b10 <_dtoa_r+0xa0>
 8006132:	9f00      	ldr	r7, [sp, #0]
 8006134:	462b      	mov	r3, r5
 8006136:	461d      	mov	r5, r3
 8006138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800613c:	2a39      	cmp	r2, #57	; 0x39
 800613e:	d106      	bne.n	800614e <_dtoa_r+0x6de>
 8006140:	9a01      	ldr	r2, [sp, #4]
 8006142:	429a      	cmp	r2, r3
 8006144:	d1f7      	bne.n	8006136 <_dtoa_r+0x6c6>
 8006146:	9901      	ldr	r1, [sp, #4]
 8006148:	2230      	movs	r2, #48	; 0x30
 800614a:	3701      	adds	r7, #1
 800614c:	700a      	strb	r2, [r1, #0]
 800614e:	781a      	ldrb	r2, [r3, #0]
 8006150:	3201      	adds	r2, #1
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	e790      	b.n	8006078 <_dtoa_r+0x608>
 8006156:	4ba6      	ldr	r3, [pc, #664]	; (80063f0 <_dtoa_r+0x980>)
 8006158:	2200      	movs	r2, #0
 800615a:	f7fa fa65 	bl	8000628 <__aeabi_dmul>
 800615e:	2200      	movs	r2, #0
 8006160:	2300      	movs	r3, #0
 8006162:	4606      	mov	r6, r0
 8006164:	460f      	mov	r7, r1
 8006166:	f7fa fcc7 	bl	8000af8 <__aeabi_dcmpeq>
 800616a:	2800      	cmp	r0, #0
 800616c:	d09d      	beq.n	80060aa <_dtoa_r+0x63a>
 800616e:	e7cf      	b.n	8006110 <_dtoa_r+0x6a0>
 8006170:	9a08      	ldr	r2, [sp, #32]
 8006172:	2a00      	cmp	r2, #0
 8006174:	f000 80d7 	beq.w	8006326 <_dtoa_r+0x8b6>
 8006178:	9a06      	ldr	r2, [sp, #24]
 800617a:	2a01      	cmp	r2, #1
 800617c:	f300 80ba 	bgt.w	80062f4 <_dtoa_r+0x884>
 8006180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006182:	2a00      	cmp	r2, #0
 8006184:	f000 80b2 	beq.w	80062ec <_dtoa_r+0x87c>
 8006188:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800618c:	9e07      	ldr	r6, [sp, #28]
 800618e:	9d04      	ldr	r5, [sp, #16]
 8006190:	9a04      	ldr	r2, [sp, #16]
 8006192:	441a      	add	r2, r3
 8006194:	9204      	str	r2, [sp, #16]
 8006196:	9a05      	ldr	r2, [sp, #20]
 8006198:	2101      	movs	r1, #1
 800619a:	441a      	add	r2, r3
 800619c:	4620      	mov	r0, r4
 800619e:	9205      	str	r2, [sp, #20]
 80061a0:	f000 fb7c 	bl	800689c <__i2b>
 80061a4:	4607      	mov	r7, r0
 80061a6:	2d00      	cmp	r5, #0
 80061a8:	dd0c      	ble.n	80061c4 <_dtoa_r+0x754>
 80061aa:	9b05      	ldr	r3, [sp, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	dd09      	ble.n	80061c4 <_dtoa_r+0x754>
 80061b0:	42ab      	cmp	r3, r5
 80061b2:	9a04      	ldr	r2, [sp, #16]
 80061b4:	bfa8      	it	ge
 80061b6:	462b      	movge	r3, r5
 80061b8:	1ad2      	subs	r2, r2, r3
 80061ba:	9204      	str	r2, [sp, #16]
 80061bc:	9a05      	ldr	r2, [sp, #20]
 80061be:	1aed      	subs	r5, r5, r3
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	9305      	str	r3, [sp, #20]
 80061c4:	9b07      	ldr	r3, [sp, #28]
 80061c6:	b31b      	cbz	r3, 8006210 <_dtoa_r+0x7a0>
 80061c8:	9b08      	ldr	r3, [sp, #32]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 80af 	beq.w	800632e <_dtoa_r+0x8be>
 80061d0:	2e00      	cmp	r6, #0
 80061d2:	dd13      	ble.n	80061fc <_dtoa_r+0x78c>
 80061d4:	4639      	mov	r1, r7
 80061d6:	4632      	mov	r2, r6
 80061d8:	4620      	mov	r0, r4
 80061da:	f000 fc1f 	bl	8006a1c <__pow5mult>
 80061de:	ee18 2a10 	vmov	r2, s16
 80061e2:	4601      	mov	r1, r0
 80061e4:	4607      	mov	r7, r0
 80061e6:	4620      	mov	r0, r4
 80061e8:	f000 fb6e 	bl	80068c8 <__multiply>
 80061ec:	ee18 1a10 	vmov	r1, s16
 80061f0:	4680      	mov	r8, r0
 80061f2:	4620      	mov	r0, r4
 80061f4:	f000 fa9a 	bl	800672c <_Bfree>
 80061f8:	ee08 8a10 	vmov	s16, r8
 80061fc:	9b07      	ldr	r3, [sp, #28]
 80061fe:	1b9a      	subs	r2, r3, r6
 8006200:	d006      	beq.n	8006210 <_dtoa_r+0x7a0>
 8006202:	ee18 1a10 	vmov	r1, s16
 8006206:	4620      	mov	r0, r4
 8006208:	f000 fc08 	bl	8006a1c <__pow5mult>
 800620c:	ee08 0a10 	vmov	s16, r0
 8006210:	2101      	movs	r1, #1
 8006212:	4620      	mov	r0, r4
 8006214:	f000 fb42 	bl	800689c <__i2b>
 8006218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800621a:	2b00      	cmp	r3, #0
 800621c:	4606      	mov	r6, r0
 800621e:	f340 8088 	ble.w	8006332 <_dtoa_r+0x8c2>
 8006222:	461a      	mov	r2, r3
 8006224:	4601      	mov	r1, r0
 8006226:	4620      	mov	r0, r4
 8006228:	f000 fbf8 	bl	8006a1c <__pow5mult>
 800622c:	9b06      	ldr	r3, [sp, #24]
 800622e:	2b01      	cmp	r3, #1
 8006230:	4606      	mov	r6, r0
 8006232:	f340 8081 	ble.w	8006338 <_dtoa_r+0x8c8>
 8006236:	f04f 0800 	mov.w	r8, #0
 800623a:	6933      	ldr	r3, [r6, #16]
 800623c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006240:	6918      	ldr	r0, [r3, #16]
 8006242:	f000 fadb 	bl	80067fc <__hi0bits>
 8006246:	f1c0 0020 	rsb	r0, r0, #32
 800624a:	9b05      	ldr	r3, [sp, #20]
 800624c:	4418      	add	r0, r3
 800624e:	f010 001f 	ands.w	r0, r0, #31
 8006252:	f000 8092 	beq.w	800637a <_dtoa_r+0x90a>
 8006256:	f1c0 0320 	rsb	r3, r0, #32
 800625a:	2b04      	cmp	r3, #4
 800625c:	f340 808a 	ble.w	8006374 <_dtoa_r+0x904>
 8006260:	f1c0 001c 	rsb	r0, r0, #28
 8006264:	9b04      	ldr	r3, [sp, #16]
 8006266:	4403      	add	r3, r0
 8006268:	9304      	str	r3, [sp, #16]
 800626a:	9b05      	ldr	r3, [sp, #20]
 800626c:	4403      	add	r3, r0
 800626e:	4405      	add	r5, r0
 8006270:	9305      	str	r3, [sp, #20]
 8006272:	9b04      	ldr	r3, [sp, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	dd07      	ble.n	8006288 <_dtoa_r+0x818>
 8006278:	ee18 1a10 	vmov	r1, s16
 800627c:	461a      	mov	r2, r3
 800627e:	4620      	mov	r0, r4
 8006280:	f000 fc26 	bl	8006ad0 <__lshift>
 8006284:	ee08 0a10 	vmov	s16, r0
 8006288:	9b05      	ldr	r3, [sp, #20]
 800628a:	2b00      	cmp	r3, #0
 800628c:	dd05      	ble.n	800629a <_dtoa_r+0x82a>
 800628e:	4631      	mov	r1, r6
 8006290:	461a      	mov	r2, r3
 8006292:	4620      	mov	r0, r4
 8006294:	f000 fc1c 	bl	8006ad0 <__lshift>
 8006298:	4606      	mov	r6, r0
 800629a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800629c:	2b00      	cmp	r3, #0
 800629e:	d06e      	beq.n	800637e <_dtoa_r+0x90e>
 80062a0:	ee18 0a10 	vmov	r0, s16
 80062a4:	4631      	mov	r1, r6
 80062a6:	f000 fc83 	bl	8006bb0 <__mcmp>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	da67      	bge.n	800637e <_dtoa_r+0x90e>
 80062ae:	9b00      	ldr	r3, [sp, #0]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	ee18 1a10 	vmov	r1, s16
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	220a      	movs	r2, #10
 80062ba:	2300      	movs	r3, #0
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 fa57 	bl	8006770 <__multadd>
 80062c2:	9b08      	ldr	r3, [sp, #32]
 80062c4:	ee08 0a10 	vmov	s16, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 81b1 	beq.w	8006630 <_dtoa_r+0xbc0>
 80062ce:	2300      	movs	r3, #0
 80062d0:	4639      	mov	r1, r7
 80062d2:	220a      	movs	r2, #10
 80062d4:	4620      	mov	r0, r4
 80062d6:	f000 fa4b 	bl	8006770 <__multadd>
 80062da:	9b02      	ldr	r3, [sp, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	4607      	mov	r7, r0
 80062e0:	f300 808e 	bgt.w	8006400 <_dtoa_r+0x990>
 80062e4:	9b06      	ldr	r3, [sp, #24]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	dc51      	bgt.n	800638e <_dtoa_r+0x91e>
 80062ea:	e089      	b.n	8006400 <_dtoa_r+0x990>
 80062ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062f2:	e74b      	b.n	800618c <_dtoa_r+0x71c>
 80062f4:	9b03      	ldr	r3, [sp, #12]
 80062f6:	1e5e      	subs	r6, r3, #1
 80062f8:	9b07      	ldr	r3, [sp, #28]
 80062fa:	42b3      	cmp	r3, r6
 80062fc:	bfbf      	itttt	lt
 80062fe:	9b07      	ldrlt	r3, [sp, #28]
 8006300:	9607      	strlt	r6, [sp, #28]
 8006302:	1af2      	sublt	r2, r6, r3
 8006304:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006306:	bfb6      	itet	lt
 8006308:	189b      	addlt	r3, r3, r2
 800630a:	1b9e      	subge	r6, r3, r6
 800630c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800630e:	9b03      	ldr	r3, [sp, #12]
 8006310:	bfb8      	it	lt
 8006312:	2600      	movlt	r6, #0
 8006314:	2b00      	cmp	r3, #0
 8006316:	bfb7      	itett	lt
 8006318:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800631c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006320:	1a9d      	sublt	r5, r3, r2
 8006322:	2300      	movlt	r3, #0
 8006324:	e734      	b.n	8006190 <_dtoa_r+0x720>
 8006326:	9e07      	ldr	r6, [sp, #28]
 8006328:	9d04      	ldr	r5, [sp, #16]
 800632a:	9f08      	ldr	r7, [sp, #32]
 800632c:	e73b      	b.n	80061a6 <_dtoa_r+0x736>
 800632e:	9a07      	ldr	r2, [sp, #28]
 8006330:	e767      	b.n	8006202 <_dtoa_r+0x792>
 8006332:	9b06      	ldr	r3, [sp, #24]
 8006334:	2b01      	cmp	r3, #1
 8006336:	dc18      	bgt.n	800636a <_dtoa_r+0x8fa>
 8006338:	f1ba 0f00 	cmp.w	sl, #0
 800633c:	d115      	bne.n	800636a <_dtoa_r+0x8fa>
 800633e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006342:	b993      	cbnz	r3, 800636a <_dtoa_r+0x8fa>
 8006344:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006348:	0d1b      	lsrs	r3, r3, #20
 800634a:	051b      	lsls	r3, r3, #20
 800634c:	b183      	cbz	r3, 8006370 <_dtoa_r+0x900>
 800634e:	9b04      	ldr	r3, [sp, #16]
 8006350:	3301      	adds	r3, #1
 8006352:	9304      	str	r3, [sp, #16]
 8006354:	9b05      	ldr	r3, [sp, #20]
 8006356:	3301      	adds	r3, #1
 8006358:	9305      	str	r3, [sp, #20]
 800635a:	f04f 0801 	mov.w	r8, #1
 800635e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006360:	2b00      	cmp	r3, #0
 8006362:	f47f af6a 	bne.w	800623a <_dtoa_r+0x7ca>
 8006366:	2001      	movs	r0, #1
 8006368:	e76f      	b.n	800624a <_dtoa_r+0x7da>
 800636a:	f04f 0800 	mov.w	r8, #0
 800636e:	e7f6      	b.n	800635e <_dtoa_r+0x8ee>
 8006370:	4698      	mov	r8, r3
 8006372:	e7f4      	b.n	800635e <_dtoa_r+0x8ee>
 8006374:	f43f af7d 	beq.w	8006272 <_dtoa_r+0x802>
 8006378:	4618      	mov	r0, r3
 800637a:	301c      	adds	r0, #28
 800637c:	e772      	b.n	8006264 <_dtoa_r+0x7f4>
 800637e:	9b03      	ldr	r3, [sp, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	dc37      	bgt.n	80063f4 <_dtoa_r+0x984>
 8006384:	9b06      	ldr	r3, [sp, #24]
 8006386:	2b02      	cmp	r3, #2
 8006388:	dd34      	ble.n	80063f4 <_dtoa_r+0x984>
 800638a:	9b03      	ldr	r3, [sp, #12]
 800638c:	9302      	str	r3, [sp, #8]
 800638e:	9b02      	ldr	r3, [sp, #8]
 8006390:	b96b      	cbnz	r3, 80063ae <_dtoa_r+0x93e>
 8006392:	4631      	mov	r1, r6
 8006394:	2205      	movs	r2, #5
 8006396:	4620      	mov	r0, r4
 8006398:	f000 f9ea 	bl	8006770 <__multadd>
 800639c:	4601      	mov	r1, r0
 800639e:	4606      	mov	r6, r0
 80063a0:	ee18 0a10 	vmov	r0, s16
 80063a4:	f000 fc04 	bl	8006bb0 <__mcmp>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	f73f adbb 	bgt.w	8005f24 <_dtoa_r+0x4b4>
 80063ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b0:	9d01      	ldr	r5, [sp, #4]
 80063b2:	43db      	mvns	r3, r3
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	f04f 0800 	mov.w	r8, #0
 80063ba:	4631      	mov	r1, r6
 80063bc:	4620      	mov	r0, r4
 80063be:	f000 f9b5 	bl	800672c <_Bfree>
 80063c2:	2f00      	cmp	r7, #0
 80063c4:	f43f aea4 	beq.w	8006110 <_dtoa_r+0x6a0>
 80063c8:	f1b8 0f00 	cmp.w	r8, #0
 80063cc:	d005      	beq.n	80063da <_dtoa_r+0x96a>
 80063ce:	45b8      	cmp	r8, r7
 80063d0:	d003      	beq.n	80063da <_dtoa_r+0x96a>
 80063d2:	4641      	mov	r1, r8
 80063d4:	4620      	mov	r0, r4
 80063d6:	f000 f9a9 	bl	800672c <_Bfree>
 80063da:	4639      	mov	r1, r7
 80063dc:	4620      	mov	r0, r4
 80063de:	f000 f9a5 	bl	800672c <_Bfree>
 80063e2:	e695      	b.n	8006110 <_dtoa_r+0x6a0>
 80063e4:	2600      	movs	r6, #0
 80063e6:	4637      	mov	r7, r6
 80063e8:	e7e1      	b.n	80063ae <_dtoa_r+0x93e>
 80063ea:	9700      	str	r7, [sp, #0]
 80063ec:	4637      	mov	r7, r6
 80063ee:	e599      	b.n	8005f24 <_dtoa_r+0x4b4>
 80063f0:	40240000 	.word	0x40240000
 80063f4:	9b08      	ldr	r3, [sp, #32]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 80ca 	beq.w	8006590 <_dtoa_r+0xb20>
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	9302      	str	r3, [sp, #8]
 8006400:	2d00      	cmp	r5, #0
 8006402:	dd05      	ble.n	8006410 <_dtoa_r+0x9a0>
 8006404:	4639      	mov	r1, r7
 8006406:	462a      	mov	r2, r5
 8006408:	4620      	mov	r0, r4
 800640a:	f000 fb61 	bl	8006ad0 <__lshift>
 800640e:	4607      	mov	r7, r0
 8006410:	f1b8 0f00 	cmp.w	r8, #0
 8006414:	d05b      	beq.n	80064ce <_dtoa_r+0xa5e>
 8006416:	6879      	ldr	r1, [r7, #4]
 8006418:	4620      	mov	r0, r4
 800641a:	f000 f947 	bl	80066ac <_Balloc>
 800641e:	4605      	mov	r5, r0
 8006420:	b928      	cbnz	r0, 800642e <_dtoa_r+0x9be>
 8006422:	4b87      	ldr	r3, [pc, #540]	; (8006640 <_dtoa_r+0xbd0>)
 8006424:	4602      	mov	r2, r0
 8006426:	f240 21ea 	movw	r1, #746	; 0x2ea
 800642a:	f7ff bb3b 	b.w	8005aa4 <_dtoa_r+0x34>
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	3202      	adds	r2, #2
 8006432:	0092      	lsls	r2, r2, #2
 8006434:	f107 010c 	add.w	r1, r7, #12
 8006438:	300c      	adds	r0, #12
 800643a:	f000 f91d 	bl	8006678 <memcpy>
 800643e:	2201      	movs	r2, #1
 8006440:	4629      	mov	r1, r5
 8006442:	4620      	mov	r0, r4
 8006444:	f000 fb44 	bl	8006ad0 <__lshift>
 8006448:	9b01      	ldr	r3, [sp, #4]
 800644a:	f103 0901 	add.w	r9, r3, #1
 800644e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006452:	4413      	add	r3, r2
 8006454:	9305      	str	r3, [sp, #20]
 8006456:	f00a 0301 	and.w	r3, sl, #1
 800645a:	46b8      	mov	r8, r7
 800645c:	9304      	str	r3, [sp, #16]
 800645e:	4607      	mov	r7, r0
 8006460:	4631      	mov	r1, r6
 8006462:	ee18 0a10 	vmov	r0, s16
 8006466:	f7ff fa77 	bl	8005958 <quorem>
 800646a:	4641      	mov	r1, r8
 800646c:	9002      	str	r0, [sp, #8]
 800646e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006472:	ee18 0a10 	vmov	r0, s16
 8006476:	f000 fb9b 	bl	8006bb0 <__mcmp>
 800647a:	463a      	mov	r2, r7
 800647c:	9003      	str	r0, [sp, #12]
 800647e:	4631      	mov	r1, r6
 8006480:	4620      	mov	r0, r4
 8006482:	f000 fbb1 	bl	8006be8 <__mdiff>
 8006486:	68c2      	ldr	r2, [r0, #12]
 8006488:	f109 3bff 	add.w	fp, r9, #4294967295
 800648c:	4605      	mov	r5, r0
 800648e:	bb02      	cbnz	r2, 80064d2 <_dtoa_r+0xa62>
 8006490:	4601      	mov	r1, r0
 8006492:	ee18 0a10 	vmov	r0, s16
 8006496:	f000 fb8b 	bl	8006bb0 <__mcmp>
 800649a:	4602      	mov	r2, r0
 800649c:	4629      	mov	r1, r5
 800649e:	4620      	mov	r0, r4
 80064a0:	9207      	str	r2, [sp, #28]
 80064a2:	f000 f943 	bl	800672c <_Bfree>
 80064a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80064aa:	ea43 0102 	orr.w	r1, r3, r2
 80064ae:	9b04      	ldr	r3, [sp, #16]
 80064b0:	430b      	orrs	r3, r1
 80064b2:	464d      	mov	r5, r9
 80064b4:	d10f      	bne.n	80064d6 <_dtoa_r+0xa66>
 80064b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80064ba:	d02a      	beq.n	8006512 <_dtoa_r+0xaa2>
 80064bc:	9b03      	ldr	r3, [sp, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	dd02      	ble.n	80064c8 <_dtoa_r+0xa58>
 80064c2:	9b02      	ldr	r3, [sp, #8]
 80064c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80064c8:	f88b a000 	strb.w	sl, [fp]
 80064cc:	e775      	b.n	80063ba <_dtoa_r+0x94a>
 80064ce:	4638      	mov	r0, r7
 80064d0:	e7ba      	b.n	8006448 <_dtoa_r+0x9d8>
 80064d2:	2201      	movs	r2, #1
 80064d4:	e7e2      	b.n	800649c <_dtoa_r+0xa2c>
 80064d6:	9b03      	ldr	r3, [sp, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	db04      	blt.n	80064e6 <_dtoa_r+0xa76>
 80064dc:	9906      	ldr	r1, [sp, #24]
 80064de:	430b      	orrs	r3, r1
 80064e0:	9904      	ldr	r1, [sp, #16]
 80064e2:	430b      	orrs	r3, r1
 80064e4:	d122      	bne.n	800652c <_dtoa_r+0xabc>
 80064e6:	2a00      	cmp	r2, #0
 80064e8:	ddee      	ble.n	80064c8 <_dtoa_r+0xa58>
 80064ea:	ee18 1a10 	vmov	r1, s16
 80064ee:	2201      	movs	r2, #1
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 faed 	bl	8006ad0 <__lshift>
 80064f6:	4631      	mov	r1, r6
 80064f8:	ee08 0a10 	vmov	s16, r0
 80064fc:	f000 fb58 	bl	8006bb0 <__mcmp>
 8006500:	2800      	cmp	r0, #0
 8006502:	dc03      	bgt.n	800650c <_dtoa_r+0xa9c>
 8006504:	d1e0      	bne.n	80064c8 <_dtoa_r+0xa58>
 8006506:	f01a 0f01 	tst.w	sl, #1
 800650a:	d0dd      	beq.n	80064c8 <_dtoa_r+0xa58>
 800650c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006510:	d1d7      	bne.n	80064c2 <_dtoa_r+0xa52>
 8006512:	2339      	movs	r3, #57	; 0x39
 8006514:	f88b 3000 	strb.w	r3, [fp]
 8006518:	462b      	mov	r3, r5
 800651a:	461d      	mov	r5, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006522:	2a39      	cmp	r2, #57	; 0x39
 8006524:	d071      	beq.n	800660a <_dtoa_r+0xb9a>
 8006526:	3201      	adds	r2, #1
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	e746      	b.n	80063ba <_dtoa_r+0x94a>
 800652c:	2a00      	cmp	r2, #0
 800652e:	dd07      	ble.n	8006540 <_dtoa_r+0xad0>
 8006530:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006534:	d0ed      	beq.n	8006512 <_dtoa_r+0xaa2>
 8006536:	f10a 0301 	add.w	r3, sl, #1
 800653a:	f88b 3000 	strb.w	r3, [fp]
 800653e:	e73c      	b.n	80063ba <_dtoa_r+0x94a>
 8006540:	9b05      	ldr	r3, [sp, #20]
 8006542:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006546:	4599      	cmp	r9, r3
 8006548:	d047      	beq.n	80065da <_dtoa_r+0xb6a>
 800654a:	ee18 1a10 	vmov	r1, s16
 800654e:	2300      	movs	r3, #0
 8006550:	220a      	movs	r2, #10
 8006552:	4620      	mov	r0, r4
 8006554:	f000 f90c 	bl	8006770 <__multadd>
 8006558:	45b8      	cmp	r8, r7
 800655a:	ee08 0a10 	vmov	s16, r0
 800655e:	f04f 0300 	mov.w	r3, #0
 8006562:	f04f 020a 	mov.w	r2, #10
 8006566:	4641      	mov	r1, r8
 8006568:	4620      	mov	r0, r4
 800656a:	d106      	bne.n	800657a <_dtoa_r+0xb0a>
 800656c:	f000 f900 	bl	8006770 <__multadd>
 8006570:	4680      	mov	r8, r0
 8006572:	4607      	mov	r7, r0
 8006574:	f109 0901 	add.w	r9, r9, #1
 8006578:	e772      	b.n	8006460 <_dtoa_r+0x9f0>
 800657a:	f000 f8f9 	bl	8006770 <__multadd>
 800657e:	4639      	mov	r1, r7
 8006580:	4680      	mov	r8, r0
 8006582:	2300      	movs	r3, #0
 8006584:	220a      	movs	r2, #10
 8006586:	4620      	mov	r0, r4
 8006588:	f000 f8f2 	bl	8006770 <__multadd>
 800658c:	4607      	mov	r7, r0
 800658e:	e7f1      	b.n	8006574 <_dtoa_r+0xb04>
 8006590:	9b03      	ldr	r3, [sp, #12]
 8006592:	9302      	str	r3, [sp, #8]
 8006594:	9d01      	ldr	r5, [sp, #4]
 8006596:	ee18 0a10 	vmov	r0, s16
 800659a:	4631      	mov	r1, r6
 800659c:	f7ff f9dc 	bl	8005958 <quorem>
 80065a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80065a4:	9b01      	ldr	r3, [sp, #4]
 80065a6:	f805 ab01 	strb.w	sl, [r5], #1
 80065aa:	1aea      	subs	r2, r5, r3
 80065ac:	9b02      	ldr	r3, [sp, #8]
 80065ae:	4293      	cmp	r3, r2
 80065b0:	dd09      	ble.n	80065c6 <_dtoa_r+0xb56>
 80065b2:	ee18 1a10 	vmov	r1, s16
 80065b6:	2300      	movs	r3, #0
 80065b8:	220a      	movs	r2, #10
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 f8d8 	bl	8006770 <__multadd>
 80065c0:	ee08 0a10 	vmov	s16, r0
 80065c4:	e7e7      	b.n	8006596 <_dtoa_r+0xb26>
 80065c6:	9b02      	ldr	r3, [sp, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bfc8      	it	gt
 80065cc:	461d      	movgt	r5, r3
 80065ce:	9b01      	ldr	r3, [sp, #4]
 80065d0:	bfd8      	it	le
 80065d2:	2501      	movle	r5, #1
 80065d4:	441d      	add	r5, r3
 80065d6:	f04f 0800 	mov.w	r8, #0
 80065da:	ee18 1a10 	vmov	r1, s16
 80065de:	2201      	movs	r2, #1
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 fa75 	bl	8006ad0 <__lshift>
 80065e6:	4631      	mov	r1, r6
 80065e8:	ee08 0a10 	vmov	s16, r0
 80065ec:	f000 fae0 	bl	8006bb0 <__mcmp>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	dc91      	bgt.n	8006518 <_dtoa_r+0xaa8>
 80065f4:	d102      	bne.n	80065fc <_dtoa_r+0xb8c>
 80065f6:	f01a 0f01 	tst.w	sl, #1
 80065fa:	d18d      	bne.n	8006518 <_dtoa_r+0xaa8>
 80065fc:	462b      	mov	r3, r5
 80065fe:	461d      	mov	r5, r3
 8006600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006604:	2a30      	cmp	r2, #48	; 0x30
 8006606:	d0fa      	beq.n	80065fe <_dtoa_r+0xb8e>
 8006608:	e6d7      	b.n	80063ba <_dtoa_r+0x94a>
 800660a:	9a01      	ldr	r2, [sp, #4]
 800660c:	429a      	cmp	r2, r3
 800660e:	d184      	bne.n	800651a <_dtoa_r+0xaaa>
 8006610:	9b00      	ldr	r3, [sp, #0]
 8006612:	3301      	adds	r3, #1
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	2331      	movs	r3, #49	; 0x31
 8006618:	7013      	strb	r3, [r2, #0]
 800661a:	e6ce      	b.n	80063ba <_dtoa_r+0x94a>
 800661c:	4b09      	ldr	r3, [pc, #36]	; (8006644 <_dtoa_r+0xbd4>)
 800661e:	f7ff ba95 	b.w	8005b4c <_dtoa_r+0xdc>
 8006622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006624:	2b00      	cmp	r3, #0
 8006626:	f47f aa6e 	bne.w	8005b06 <_dtoa_r+0x96>
 800662a:	4b07      	ldr	r3, [pc, #28]	; (8006648 <_dtoa_r+0xbd8>)
 800662c:	f7ff ba8e 	b.w	8005b4c <_dtoa_r+0xdc>
 8006630:	9b02      	ldr	r3, [sp, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	dcae      	bgt.n	8006594 <_dtoa_r+0xb24>
 8006636:	9b06      	ldr	r3, [sp, #24]
 8006638:	2b02      	cmp	r3, #2
 800663a:	f73f aea8 	bgt.w	800638e <_dtoa_r+0x91e>
 800663e:	e7a9      	b.n	8006594 <_dtoa_r+0xb24>
 8006640:	080096f5 	.word	0x080096f5
 8006644:	08009879 	.word	0x08009879
 8006648:	08009676 	.word	0x08009676

0800664c <_localeconv_r>:
 800664c:	4800      	ldr	r0, [pc, #0]	; (8006650 <_localeconv_r+0x4>)
 800664e:	4770      	bx	lr
 8006650:	2000015c 	.word	0x2000015c

08006654 <_lseek_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4d07      	ldr	r5, [pc, #28]	; (8006674 <_lseek_r+0x20>)
 8006658:	4604      	mov	r4, r0
 800665a:	4608      	mov	r0, r1
 800665c:	4611      	mov	r1, r2
 800665e:	2200      	movs	r2, #0
 8006660:	602a      	str	r2, [r5, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	f7fa fdf6 	bl	8001254 <_lseek>
 8006668:	1c43      	adds	r3, r0, #1
 800666a:	d102      	bne.n	8006672 <_lseek_r+0x1e>
 800666c:	682b      	ldr	r3, [r5, #0]
 800666e:	b103      	cbz	r3, 8006672 <_lseek_r+0x1e>
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	bd38      	pop	{r3, r4, r5, pc}
 8006674:	20011a94 	.word	0x20011a94

08006678 <memcpy>:
 8006678:	440a      	add	r2, r1
 800667a:	4291      	cmp	r1, r2
 800667c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006680:	d100      	bne.n	8006684 <memcpy+0xc>
 8006682:	4770      	bx	lr
 8006684:	b510      	push	{r4, lr}
 8006686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800668a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800668e:	4291      	cmp	r1, r2
 8006690:	d1f9      	bne.n	8006686 <memcpy+0xe>
 8006692:	bd10      	pop	{r4, pc}

08006694 <__malloc_lock>:
 8006694:	4801      	ldr	r0, [pc, #4]	; (800669c <__malloc_lock+0x8>)
 8006696:	f001 bb87 	b.w	8007da8 <__retarget_lock_acquire_recursive>
 800669a:	bf00      	nop
 800669c:	20011a98 	.word	0x20011a98

080066a0 <__malloc_unlock>:
 80066a0:	4801      	ldr	r0, [pc, #4]	; (80066a8 <__malloc_unlock+0x8>)
 80066a2:	f001 bb82 	b.w	8007daa <__retarget_lock_release_recursive>
 80066a6:	bf00      	nop
 80066a8:	20011a98 	.word	0x20011a98

080066ac <_Balloc>:
 80066ac:	b570      	push	{r4, r5, r6, lr}
 80066ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066b0:	4604      	mov	r4, r0
 80066b2:	460d      	mov	r5, r1
 80066b4:	b976      	cbnz	r6, 80066d4 <_Balloc+0x28>
 80066b6:	2010      	movs	r0, #16
 80066b8:	f7fe fb30 	bl	8004d1c <malloc>
 80066bc:	4602      	mov	r2, r0
 80066be:	6260      	str	r0, [r4, #36]	; 0x24
 80066c0:	b920      	cbnz	r0, 80066cc <_Balloc+0x20>
 80066c2:	4b18      	ldr	r3, [pc, #96]	; (8006724 <_Balloc+0x78>)
 80066c4:	4818      	ldr	r0, [pc, #96]	; (8006728 <_Balloc+0x7c>)
 80066c6:	2166      	movs	r1, #102	; 0x66
 80066c8:	f001 f986 	bl	80079d8 <__assert_func>
 80066cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066d0:	6006      	str	r6, [r0, #0]
 80066d2:	60c6      	str	r6, [r0, #12]
 80066d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066d6:	68f3      	ldr	r3, [r6, #12]
 80066d8:	b183      	cbz	r3, 80066fc <_Balloc+0x50>
 80066da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066e2:	b9b8      	cbnz	r0, 8006714 <_Balloc+0x68>
 80066e4:	2101      	movs	r1, #1
 80066e6:	fa01 f605 	lsl.w	r6, r1, r5
 80066ea:	1d72      	adds	r2, r6, #5
 80066ec:	0092      	lsls	r2, r2, #2
 80066ee:	4620      	mov	r0, r4
 80066f0:	f000 fb60 	bl	8006db4 <_calloc_r>
 80066f4:	b160      	cbz	r0, 8006710 <_Balloc+0x64>
 80066f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066fa:	e00e      	b.n	800671a <_Balloc+0x6e>
 80066fc:	2221      	movs	r2, #33	; 0x21
 80066fe:	2104      	movs	r1, #4
 8006700:	4620      	mov	r0, r4
 8006702:	f000 fb57 	bl	8006db4 <_calloc_r>
 8006706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006708:	60f0      	str	r0, [r6, #12]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e4      	bne.n	80066da <_Balloc+0x2e>
 8006710:	2000      	movs	r0, #0
 8006712:	bd70      	pop	{r4, r5, r6, pc}
 8006714:	6802      	ldr	r2, [r0, #0]
 8006716:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800671a:	2300      	movs	r3, #0
 800671c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006720:	e7f7      	b.n	8006712 <_Balloc+0x66>
 8006722:	bf00      	nop
 8006724:	08009683 	.word	0x08009683
 8006728:	08009706 	.word	0x08009706

0800672c <_Bfree>:
 800672c:	b570      	push	{r4, r5, r6, lr}
 800672e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006730:	4605      	mov	r5, r0
 8006732:	460c      	mov	r4, r1
 8006734:	b976      	cbnz	r6, 8006754 <_Bfree+0x28>
 8006736:	2010      	movs	r0, #16
 8006738:	f7fe faf0 	bl	8004d1c <malloc>
 800673c:	4602      	mov	r2, r0
 800673e:	6268      	str	r0, [r5, #36]	; 0x24
 8006740:	b920      	cbnz	r0, 800674c <_Bfree+0x20>
 8006742:	4b09      	ldr	r3, [pc, #36]	; (8006768 <_Bfree+0x3c>)
 8006744:	4809      	ldr	r0, [pc, #36]	; (800676c <_Bfree+0x40>)
 8006746:	218a      	movs	r1, #138	; 0x8a
 8006748:	f001 f946 	bl	80079d8 <__assert_func>
 800674c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006750:	6006      	str	r6, [r0, #0]
 8006752:	60c6      	str	r6, [r0, #12]
 8006754:	b13c      	cbz	r4, 8006766 <_Bfree+0x3a>
 8006756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006758:	6862      	ldr	r2, [r4, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006760:	6021      	str	r1, [r4, #0]
 8006762:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006766:	bd70      	pop	{r4, r5, r6, pc}
 8006768:	08009683 	.word	0x08009683
 800676c:	08009706 	.word	0x08009706

08006770 <__multadd>:
 8006770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006774:	690d      	ldr	r5, [r1, #16]
 8006776:	4607      	mov	r7, r0
 8006778:	460c      	mov	r4, r1
 800677a:	461e      	mov	r6, r3
 800677c:	f101 0c14 	add.w	ip, r1, #20
 8006780:	2000      	movs	r0, #0
 8006782:	f8dc 3000 	ldr.w	r3, [ip]
 8006786:	b299      	uxth	r1, r3
 8006788:	fb02 6101 	mla	r1, r2, r1, r6
 800678c:	0c1e      	lsrs	r6, r3, #16
 800678e:	0c0b      	lsrs	r3, r1, #16
 8006790:	fb02 3306 	mla	r3, r2, r6, r3
 8006794:	b289      	uxth	r1, r1
 8006796:	3001      	adds	r0, #1
 8006798:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800679c:	4285      	cmp	r5, r0
 800679e:	f84c 1b04 	str.w	r1, [ip], #4
 80067a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80067a6:	dcec      	bgt.n	8006782 <__multadd+0x12>
 80067a8:	b30e      	cbz	r6, 80067ee <__multadd+0x7e>
 80067aa:	68a3      	ldr	r3, [r4, #8]
 80067ac:	42ab      	cmp	r3, r5
 80067ae:	dc19      	bgt.n	80067e4 <__multadd+0x74>
 80067b0:	6861      	ldr	r1, [r4, #4]
 80067b2:	4638      	mov	r0, r7
 80067b4:	3101      	adds	r1, #1
 80067b6:	f7ff ff79 	bl	80066ac <_Balloc>
 80067ba:	4680      	mov	r8, r0
 80067bc:	b928      	cbnz	r0, 80067ca <__multadd+0x5a>
 80067be:	4602      	mov	r2, r0
 80067c0:	4b0c      	ldr	r3, [pc, #48]	; (80067f4 <__multadd+0x84>)
 80067c2:	480d      	ldr	r0, [pc, #52]	; (80067f8 <__multadd+0x88>)
 80067c4:	21b5      	movs	r1, #181	; 0xb5
 80067c6:	f001 f907 	bl	80079d8 <__assert_func>
 80067ca:	6922      	ldr	r2, [r4, #16]
 80067cc:	3202      	adds	r2, #2
 80067ce:	f104 010c 	add.w	r1, r4, #12
 80067d2:	0092      	lsls	r2, r2, #2
 80067d4:	300c      	adds	r0, #12
 80067d6:	f7ff ff4f 	bl	8006678 <memcpy>
 80067da:	4621      	mov	r1, r4
 80067dc:	4638      	mov	r0, r7
 80067de:	f7ff ffa5 	bl	800672c <_Bfree>
 80067e2:	4644      	mov	r4, r8
 80067e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067e8:	3501      	adds	r5, #1
 80067ea:	615e      	str	r6, [r3, #20]
 80067ec:	6125      	str	r5, [r4, #16]
 80067ee:	4620      	mov	r0, r4
 80067f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f4:	080096f5 	.word	0x080096f5
 80067f8:	08009706 	.word	0x08009706

080067fc <__hi0bits>:
 80067fc:	0c03      	lsrs	r3, r0, #16
 80067fe:	041b      	lsls	r3, r3, #16
 8006800:	b9d3      	cbnz	r3, 8006838 <__hi0bits+0x3c>
 8006802:	0400      	lsls	r0, r0, #16
 8006804:	2310      	movs	r3, #16
 8006806:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800680a:	bf04      	itt	eq
 800680c:	0200      	lsleq	r0, r0, #8
 800680e:	3308      	addeq	r3, #8
 8006810:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006814:	bf04      	itt	eq
 8006816:	0100      	lsleq	r0, r0, #4
 8006818:	3304      	addeq	r3, #4
 800681a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800681e:	bf04      	itt	eq
 8006820:	0080      	lsleq	r0, r0, #2
 8006822:	3302      	addeq	r3, #2
 8006824:	2800      	cmp	r0, #0
 8006826:	db05      	blt.n	8006834 <__hi0bits+0x38>
 8006828:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800682c:	f103 0301 	add.w	r3, r3, #1
 8006830:	bf08      	it	eq
 8006832:	2320      	moveq	r3, #32
 8006834:	4618      	mov	r0, r3
 8006836:	4770      	bx	lr
 8006838:	2300      	movs	r3, #0
 800683a:	e7e4      	b.n	8006806 <__hi0bits+0xa>

0800683c <__lo0bits>:
 800683c:	6803      	ldr	r3, [r0, #0]
 800683e:	f013 0207 	ands.w	r2, r3, #7
 8006842:	4601      	mov	r1, r0
 8006844:	d00b      	beq.n	800685e <__lo0bits+0x22>
 8006846:	07da      	lsls	r2, r3, #31
 8006848:	d423      	bmi.n	8006892 <__lo0bits+0x56>
 800684a:	0798      	lsls	r0, r3, #30
 800684c:	bf49      	itett	mi
 800684e:	085b      	lsrmi	r3, r3, #1
 8006850:	089b      	lsrpl	r3, r3, #2
 8006852:	2001      	movmi	r0, #1
 8006854:	600b      	strmi	r3, [r1, #0]
 8006856:	bf5c      	itt	pl
 8006858:	600b      	strpl	r3, [r1, #0]
 800685a:	2002      	movpl	r0, #2
 800685c:	4770      	bx	lr
 800685e:	b298      	uxth	r0, r3
 8006860:	b9a8      	cbnz	r0, 800688e <__lo0bits+0x52>
 8006862:	0c1b      	lsrs	r3, r3, #16
 8006864:	2010      	movs	r0, #16
 8006866:	b2da      	uxtb	r2, r3
 8006868:	b90a      	cbnz	r2, 800686e <__lo0bits+0x32>
 800686a:	3008      	adds	r0, #8
 800686c:	0a1b      	lsrs	r3, r3, #8
 800686e:	071a      	lsls	r2, r3, #28
 8006870:	bf04      	itt	eq
 8006872:	091b      	lsreq	r3, r3, #4
 8006874:	3004      	addeq	r0, #4
 8006876:	079a      	lsls	r2, r3, #30
 8006878:	bf04      	itt	eq
 800687a:	089b      	lsreq	r3, r3, #2
 800687c:	3002      	addeq	r0, #2
 800687e:	07da      	lsls	r2, r3, #31
 8006880:	d403      	bmi.n	800688a <__lo0bits+0x4e>
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	f100 0001 	add.w	r0, r0, #1
 8006888:	d005      	beq.n	8006896 <__lo0bits+0x5a>
 800688a:	600b      	str	r3, [r1, #0]
 800688c:	4770      	bx	lr
 800688e:	4610      	mov	r0, r2
 8006890:	e7e9      	b.n	8006866 <__lo0bits+0x2a>
 8006892:	2000      	movs	r0, #0
 8006894:	4770      	bx	lr
 8006896:	2020      	movs	r0, #32
 8006898:	4770      	bx	lr
	...

0800689c <__i2b>:
 800689c:	b510      	push	{r4, lr}
 800689e:	460c      	mov	r4, r1
 80068a0:	2101      	movs	r1, #1
 80068a2:	f7ff ff03 	bl	80066ac <_Balloc>
 80068a6:	4602      	mov	r2, r0
 80068a8:	b928      	cbnz	r0, 80068b6 <__i2b+0x1a>
 80068aa:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <__i2b+0x24>)
 80068ac:	4805      	ldr	r0, [pc, #20]	; (80068c4 <__i2b+0x28>)
 80068ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80068b2:	f001 f891 	bl	80079d8 <__assert_func>
 80068b6:	2301      	movs	r3, #1
 80068b8:	6144      	str	r4, [r0, #20]
 80068ba:	6103      	str	r3, [r0, #16]
 80068bc:	bd10      	pop	{r4, pc}
 80068be:	bf00      	nop
 80068c0:	080096f5 	.word	0x080096f5
 80068c4:	08009706 	.word	0x08009706

080068c8 <__multiply>:
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	4691      	mov	r9, r2
 80068ce:	690a      	ldr	r2, [r1, #16]
 80068d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	bfb8      	it	lt
 80068d8:	460b      	movlt	r3, r1
 80068da:	460c      	mov	r4, r1
 80068dc:	bfbc      	itt	lt
 80068de:	464c      	movlt	r4, r9
 80068e0:	4699      	movlt	r9, r3
 80068e2:	6927      	ldr	r7, [r4, #16]
 80068e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80068e8:	68a3      	ldr	r3, [r4, #8]
 80068ea:	6861      	ldr	r1, [r4, #4]
 80068ec:	eb07 060a 	add.w	r6, r7, sl
 80068f0:	42b3      	cmp	r3, r6
 80068f2:	b085      	sub	sp, #20
 80068f4:	bfb8      	it	lt
 80068f6:	3101      	addlt	r1, #1
 80068f8:	f7ff fed8 	bl	80066ac <_Balloc>
 80068fc:	b930      	cbnz	r0, 800690c <__multiply+0x44>
 80068fe:	4602      	mov	r2, r0
 8006900:	4b44      	ldr	r3, [pc, #272]	; (8006a14 <__multiply+0x14c>)
 8006902:	4845      	ldr	r0, [pc, #276]	; (8006a18 <__multiply+0x150>)
 8006904:	f240 115d 	movw	r1, #349	; 0x15d
 8006908:	f001 f866 	bl	80079d8 <__assert_func>
 800690c:	f100 0514 	add.w	r5, r0, #20
 8006910:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006914:	462b      	mov	r3, r5
 8006916:	2200      	movs	r2, #0
 8006918:	4543      	cmp	r3, r8
 800691a:	d321      	bcc.n	8006960 <__multiply+0x98>
 800691c:	f104 0314 	add.w	r3, r4, #20
 8006920:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006924:	f109 0314 	add.w	r3, r9, #20
 8006928:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800692c:	9202      	str	r2, [sp, #8]
 800692e:	1b3a      	subs	r2, r7, r4
 8006930:	3a15      	subs	r2, #21
 8006932:	f022 0203 	bic.w	r2, r2, #3
 8006936:	3204      	adds	r2, #4
 8006938:	f104 0115 	add.w	r1, r4, #21
 800693c:	428f      	cmp	r7, r1
 800693e:	bf38      	it	cc
 8006940:	2204      	movcc	r2, #4
 8006942:	9201      	str	r2, [sp, #4]
 8006944:	9a02      	ldr	r2, [sp, #8]
 8006946:	9303      	str	r3, [sp, #12]
 8006948:	429a      	cmp	r2, r3
 800694a:	d80c      	bhi.n	8006966 <__multiply+0x9e>
 800694c:	2e00      	cmp	r6, #0
 800694e:	dd03      	ble.n	8006958 <__multiply+0x90>
 8006950:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006954:	2b00      	cmp	r3, #0
 8006956:	d05a      	beq.n	8006a0e <__multiply+0x146>
 8006958:	6106      	str	r6, [r0, #16]
 800695a:	b005      	add	sp, #20
 800695c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006960:	f843 2b04 	str.w	r2, [r3], #4
 8006964:	e7d8      	b.n	8006918 <__multiply+0x50>
 8006966:	f8b3 a000 	ldrh.w	sl, [r3]
 800696a:	f1ba 0f00 	cmp.w	sl, #0
 800696e:	d024      	beq.n	80069ba <__multiply+0xf2>
 8006970:	f104 0e14 	add.w	lr, r4, #20
 8006974:	46a9      	mov	r9, r5
 8006976:	f04f 0c00 	mov.w	ip, #0
 800697a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800697e:	f8d9 1000 	ldr.w	r1, [r9]
 8006982:	fa1f fb82 	uxth.w	fp, r2
 8006986:	b289      	uxth	r1, r1
 8006988:	fb0a 110b 	mla	r1, sl, fp, r1
 800698c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006990:	f8d9 2000 	ldr.w	r2, [r9]
 8006994:	4461      	add	r1, ip
 8006996:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800699a:	fb0a c20b 	mla	r2, sl, fp, ip
 800699e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80069a2:	b289      	uxth	r1, r1
 80069a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80069a8:	4577      	cmp	r7, lr
 80069aa:	f849 1b04 	str.w	r1, [r9], #4
 80069ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80069b2:	d8e2      	bhi.n	800697a <__multiply+0xb2>
 80069b4:	9a01      	ldr	r2, [sp, #4]
 80069b6:	f845 c002 	str.w	ip, [r5, r2]
 80069ba:	9a03      	ldr	r2, [sp, #12]
 80069bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80069c0:	3304      	adds	r3, #4
 80069c2:	f1b9 0f00 	cmp.w	r9, #0
 80069c6:	d020      	beq.n	8006a0a <__multiply+0x142>
 80069c8:	6829      	ldr	r1, [r5, #0]
 80069ca:	f104 0c14 	add.w	ip, r4, #20
 80069ce:	46ae      	mov	lr, r5
 80069d0:	f04f 0a00 	mov.w	sl, #0
 80069d4:	f8bc b000 	ldrh.w	fp, [ip]
 80069d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80069dc:	fb09 220b 	mla	r2, r9, fp, r2
 80069e0:	4492      	add	sl, r2
 80069e2:	b289      	uxth	r1, r1
 80069e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80069e8:	f84e 1b04 	str.w	r1, [lr], #4
 80069ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80069f0:	f8be 1000 	ldrh.w	r1, [lr]
 80069f4:	0c12      	lsrs	r2, r2, #16
 80069f6:	fb09 1102 	mla	r1, r9, r2, r1
 80069fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80069fe:	4567      	cmp	r7, ip
 8006a00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a04:	d8e6      	bhi.n	80069d4 <__multiply+0x10c>
 8006a06:	9a01      	ldr	r2, [sp, #4]
 8006a08:	50a9      	str	r1, [r5, r2]
 8006a0a:	3504      	adds	r5, #4
 8006a0c:	e79a      	b.n	8006944 <__multiply+0x7c>
 8006a0e:	3e01      	subs	r6, #1
 8006a10:	e79c      	b.n	800694c <__multiply+0x84>
 8006a12:	bf00      	nop
 8006a14:	080096f5 	.word	0x080096f5
 8006a18:	08009706 	.word	0x08009706

08006a1c <__pow5mult>:
 8006a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a20:	4615      	mov	r5, r2
 8006a22:	f012 0203 	ands.w	r2, r2, #3
 8006a26:	4606      	mov	r6, r0
 8006a28:	460f      	mov	r7, r1
 8006a2a:	d007      	beq.n	8006a3c <__pow5mult+0x20>
 8006a2c:	4c25      	ldr	r4, [pc, #148]	; (8006ac4 <__pow5mult+0xa8>)
 8006a2e:	3a01      	subs	r2, #1
 8006a30:	2300      	movs	r3, #0
 8006a32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a36:	f7ff fe9b 	bl	8006770 <__multadd>
 8006a3a:	4607      	mov	r7, r0
 8006a3c:	10ad      	asrs	r5, r5, #2
 8006a3e:	d03d      	beq.n	8006abc <__pow5mult+0xa0>
 8006a40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a42:	b97c      	cbnz	r4, 8006a64 <__pow5mult+0x48>
 8006a44:	2010      	movs	r0, #16
 8006a46:	f7fe f969 	bl	8004d1c <malloc>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	6270      	str	r0, [r6, #36]	; 0x24
 8006a4e:	b928      	cbnz	r0, 8006a5c <__pow5mult+0x40>
 8006a50:	4b1d      	ldr	r3, [pc, #116]	; (8006ac8 <__pow5mult+0xac>)
 8006a52:	481e      	ldr	r0, [pc, #120]	; (8006acc <__pow5mult+0xb0>)
 8006a54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006a58:	f000 ffbe 	bl	80079d8 <__assert_func>
 8006a5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a60:	6004      	str	r4, [r0, #0]
 8006a62:	60c4      	str	r4, [r0, #12]
 8006a64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a6c:	b94c      	cbnz	r4, 8006a82 <__pow5mult+0x66>
 8006a6e:	f240 2171 	movw	r1, #625	; 0x271
 8006a72:	4630      	mov	r0, r6
 8006a74:	f7ff ff12 	bl	800689c <__i2b>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a7e:	4604      	mov	r4, r0
 8006a80:	6003      	str	r3, [r0, #0]
 8006a82:	f04f 0900 	mov.w	r9, #0
 8006a86:	07eb      	lsls	r3, r5, #31
 8006a88:	d50a      	bpl.n	8006aa0 <__pow5mult+0x84>
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f7ff ff1a 	bl	80068c8 <__multiply>
 8006a94:	4639      	mov	r1, r7
 8006a96:	4680      	mov	r8, r0
 8006a98:	4630      	mov	r0, r6
 8006a9a:	f7ff fe47 	bl	800672c <_Bfree>
 8006a9e:	4647      	mov	r7, r8
 8006aa0:	106d      	asrs	r5, r5, #1
 8006aa2:	d00b      	beq.n	8006abc <__pow5mult+0xa0>
 8006aa4:	6820      	ldr	r0, [r4, #0]
 8006aa6:	b938      	cbnz	r0, 8006ab8 <__pow5mult+0x9c>
 8006aa8:	4622      	mov	r2, r4
 8006aaa:	4621      	mov	r1, r4
 8006aac:	4630      	mov	r0, r6
 8006aae:	f7ff ff0b 	bl	80068c8 <__multiply>
 8006ab2:	6020      	str	r0, [r4, #0]
 8006ab4:	f8c0 9000 	str.w	r9, [r0]
 8006ab8:	4604      	mov	r4, r0
 8006aba:	e7e4      	b.n	8006a86 <__pow5mult+0x6a>
 8006abc:	4638      	mov	r0, r7
 8006abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ac2:	bf00      	nop
 8006ac4:	08009858 	.word	0x08009858
 8006ac8:	08009683 	.word	0x08009683
 8006acc:	08009706 	.word	0x08009706

08006ad0 <__lshift>:
 8006ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad4:	460c      	mov	r4, r1
 8006ad6:	6849      	ldr	r1, [r1, #4]
 8006ad8:	6923      	ldr	r3, [r4, #16]
 8006ada:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ade:	68a3      	ldr	r3, [r4, #8]
 8006ae0:	4607      	mov	r7, r0
 8006ae2:	4691      	mov	r9, r2
 8006ae4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ae8:	f108 0601 	add.w	r6, r8, #1
 8006aec:	42b3      	cmp	r3, r6
 8006aee:	db0b      	blt.n	8006b08 <__lshift+0x38>
 8006af0:	4638      	mov	r0, r7
 8006af2:	f7ff fddb 	bl	80066ac <_Balloc>
 8006af6:	4605      	mov	r5, r0
 8006af8:	b948      	cbnz	r0, 8006b0e <__lshift+0x3e>
 8006afa:	4602      	mov	r2, r0
 8006afc:	4b2a      	ldr	r3, [pc, #168]	; (8006ba8 <__lshift+0xd8>)
 8006afe:	482b      	ldr	r0, [pc, #172]	; (8006bac <__lshift+0xdc>)
 8006b00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006b04:	f000 ff68 	bl	80079d8 <__assert_func>
 8006b08:	3101      	adds	r1, #1
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	e7ee      	b.n	8006aec <__lshift+0x1c>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f100 0114 	add.w	r1, r0, #20
 8006b14:	f100 0210 	add.w	r2, r0, #16
 8006b18:	4618      	mov	r0, r3
 8006b1a:	4553      	cmp	r3, sl
 8006b1c:	db37      	blt.n	8006b8e <__lshift+0xbe>
 8006b1e:	6920      	ldr	r0, [r4, #16]
 8006b20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b24:	f104 0314 	add.w	r3, r4, #20
 8006b28:	f019 091f 	ands.w	r9, r9, #31
 8006b2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006b34:	d02f      	beq.n	8006b96 <__lshift+0xc6>
 8006b36:	f1c9 0e20 	rsb	lr, r9, #32
 8006b3a:	468a      	mov	sl, r1
 8006b3c:	f04f 0c00 	mov.w	ip, #0
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	fa02 f209 	lsl.w	r2, r2, r9
 8006b46:	ea42 020c 	orr.w	r2, r2, ip
 8006b4a:	f84a 2b04 	str.w	r2, [sl], #4
 8006b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b52:	4298      	cmp	r0, r3
 8006b54:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006b58:	d8f2      	bhi.n	8006b40 <__lshift+0x70>
 8006b5a:	1b03      	subs	r3, r0, r4
 8006b5c:	3b15      	subs	r3, #21
 8006b5e:	f023 0303 	bic.w	r3, r3, #3
 8006b62:	3304      	adds	r3, #4
 8006b64:	f104 0215 	add.w	r2, r4, #21
 8006b68:	4290      	cmp	r0, r2
 8006b6a:	bf38      	it	cc
 8006b6c:	2304      	movcc	r3, #4
 8006b6e:	f841 c003 	str.w	ip, [r1, r3]
 8006b72:	f1bc 0f00 	cmp.w	ip, #0
 8006b76:	d001      	beq.n	8006b7c <__lshift+0xac>
 8006b78:	f108 0602 	add.w	r6, r8, #2
 8006b7c:	3e01      	subs	r6, #1
 8006b7e:	4638      	mov	r0, r7
 8006b80:	612e      	str	r6, [r5, #16]
 8006b82:	4621      	mov	r1, r4
 8006b84:	f7ff fdd2 	bl	800672c <_Bfree>
 8006b88:	4628      	mov	r0, r5
 8006b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b92:	3301      	adds	r3, #1
 8006b94:	e7c1      	b.n	8006b1a <__lshift+0x4a>
 8006b96:	3904      	subs	r1, #4
 8006b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ba0:	4298      	cmp	r0, r3
 8006ba2:	d8f9      	bhi.n	8006b98 <__lshift+0xc8>
 8006ba4:	e7ea      	b.n	8006b7c <__lshift+0xac>
 8006ba6:	bf00      	nop
 8006ba8:	080096f5 	.word	0x080096f5
 8006bac:	08009706 	.word	0x08009706

08006bb0 <__mcmp>:
 8006bb0:	b530      	push	{r4, r5, lr}
 8006bb2:	6902      	ldr	r2, [r0, #16]
 8006bb4:	690c      	ldr	r4, [r1, #16]
 8006bb6:	1b12      	subs	r2, r2, r4
 8006bb8:	d10e      	bne.n	8006bd8 <__mcmp+0x28>
 8006bba:	f100 0314 	add.w	r3, r0, #20
 8006bbe:	3114      	adds	r1, #20
 8006bc0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006bc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006bc8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006bcc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006bd0:	42a5      	cmp	r5, r4
 8006bd2:	d003      	beq.n	8006bdc <__mcmp+0x2c>
 8006bd4:	d305      	bcc.n	8006be2 <__mcmp+0x32>
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	4610      	mov	r0, r2
 8006bda:	bd30      	pop	{r4, r5, pc}
 8006bdc:	4283      	cmp	r3, r0
 8006bde:	d3f3      	bcc.n	8006bc8 <__mcmp+0x18>
 8006be0:	e7fa      	b.n	8006bd8 <__mcmp+0x28>
 8006be2:	f04f 32ff 	mov.w	r2, #4294967295
 8006be6:	e7f7      	b.n	8006bd8 <__mcmp+0x28>

08006be8 <__mdiff>:
 8006be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bec:	460c      	mov	r4, r1
 8006bee:	4606      	mov	r6, r0
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	4690      	mov	r8, r2
 8006bf6:	f7ff ffdb 	bl	8006bb0 <__mcmp>
 8006bfa:	1e05      	subs	r5, r0, #0
 8006bfc:	d110      	bne.n	8006c20 <__mdiff+0x38>
 8006bfe:	4629      	mov	r1, r5
 8006c00:	4630      	mov	r0, r6
 8006c02:	f7ff fd53 	bl	80066ac <_Balloc>
 8006c06:	b930      	cbnz	r0, 8006c16 <__mdiff+0x2e>
 8006c08:	4b3a      	ldr	r3, [pc, #232]	; (8006cf4 <__mdiff+0x10c>)
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	f240 2132 	movw	r1, #562	; 0x232
 8006c10:	4839      	ldr	r0, [pc, #228]	; (8006cf8 <__mdiff+0x110>)
 8006c12:	f000 fee1 	bl	80079d8 <__assert_func>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c20:	bfa4      	itt	ge
 8006c22:	4643      	movge	r3, r8
 8006c24:	46a0      	movge	r8, r4
 8006c26:	4630      	mov	r0, r6
 8006c28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006c2c:	bfa6      	itte	ge
 8006c2e:	461c      	movge	r4, r3
 8006c30:	2500      	movge	r5, #0
 8006c32:	2501      	movlt	r5, #1
 8006c34:	f7ff fd3a 	bl	80066ac <_Balloc>
 8006c38:	b920      	cbnz	r0, 8006c44 <__mdiff+0x5c>
 8006c3a:	4b2e      	ldr	r3, [pc, #184]	; (8006cf4 <__mdiff+0x10c>)
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006c42:	e7e5      	b.n	8006c10 <__mdiff+0x28>
 8006c44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006c48:	6926      	ldr	r6, [r4, #16]
 8006c4a:	60c5      	str	r5, [r0, #12]
 8006c4c:	f104 0914 	add.w	r9, r4, #20
 8006c50:	f108 0514 	add.w	r5, r8, #20
 8006c54:	f100 0e14 	add.w	lr, r0, #20
 8006c58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006c5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006c60:	f108 0210 	add.w	r2, r8, #16
 8006c64:	46f2      	mov	sl, lr
 8006c66:	2100      	movs	r1, #0
 8006c68:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006c70:	fa1f f883 	uxth.w	r8, r3
 8006c74:	fa11 f18b 	uxtah	r1, r1, fp
 8006c78:	0c1b      	lsrs	r3, r3, #16
 8006c7a:	eba1 0808 	sub.w	r8, r1, r8
 8006c7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006c86:	fa1f f888 	uxth.w	r8, r8
 8006c8a:	1419      	asrs	r1, r3, #16
 8006c8c:	454e      	cmp	r6, r9
 8006c8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006c92:	f84a 3b04 	str.w	r3, [sl], #4
 8006c96:	d8e7      	bhi.n	8006c68 <__mdiff+0x80>
 8006c98:	1b33      	subs	r3, r6, r4
 8006c9a:	3b15      	subs	r3, #21
 8006c9c:	f023 0303 	bic.w	r3, r3, #3
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	3415      	adds	r4, #21
 8006ca4:	42a6      	cmp	r6, r4
 8006ca6:	bf38      	it	cc
 8006ca8:	2304      	movcc	r3, #4
 8006caa:	441d      	add	r5, r3
 8006cac:	4473      	add	r3, lr
 8006cae:	469e      	mov	lr, r3
 8006cb0:	462e      	mov	r6, r5
 8006cb2:	4566      	cmp	r6, ip
 8006cb4:	d30e      	bcc.n	8006cd4 <__mdiff+0xec>
 8006cb6:	f10c 0203 	add.w	r2, ip, #3
 8006cba:	1b52      	subs	r2, r2, r5
 8006cbc:	f022 0203 	bic.w	r2, r2, #3
 8006cc0:	3d03      	subs	r5, #3
 8006cc2:	45ac      	cmp	ip, r5
 8006cc4:	bf38      	it	cc
 8006cc6:	2200      	movcc	r2, #0
 8006cc8:	441a      	add	r2, r3
 8006cca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006cce:	b17b      	cbz	r3, 8006cf0 <__mdiff+0x108>
 8006cd0:	6107      	str	r7, [r0, #16]
 8006cd2:	e7a3      	b.n	8006c1c <__mdiff+0x34>
 8006cd4:	f856 8b04 	ldr.w	r8, [r6], #4
 8006cd8:	fa11 f288 	uxtah	r2, r1, r8
 8006cdc:	1414      	asrs	r4, r2, #16
 8006cde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ce2:	b292      	uxth	r2, r2
 8006ce4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006ce8:	f84e 2b04 	str.w	r2, [lr], #4
 8006cec:	1421      	asrs	r1, r4, #16
 8006cee:	e7e0      	b.n	8006cb2 <__mdiff+0xca>
 8006cf0:	3f01      	subs	r7, #1
 8006cf2:	e7ea      	b.n	8006cca <__mdiff+0xe2>
 8006cf4:	080096f5 	.word	0x080096f5
 8006cf8:	08009706 	.word	0x08009706

08006cfc <__d2b>:
 8006cfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d00:	4689      	mov	r9, r1
 8006d02:	2101      	movs	r1, #1
 8006d04:	ec57 6b10 	vmov	r6, r7, d0
 8006d08:	4690      	mov	r8, r2
 8006d0a:	f7ff fccf 	bl	80066ac <_Balloc>
 8006d0e:	4604      	mov	r4, r0
 8006d10:	b930      	cbnz	r0, 8006d20 <__d2b+0x24>
 8006d12:	4602      	mov	r2, r0
 8006d14:	4b25      	ldr	r3, [pc, #148]	; (8006dac <__d2b+0xb0>)
 8006d16:	4826      	ldr	r0, [pc, #152]	; (8006db0 <__d2b+0xb4>)
 8006d18:	f240 310a 	movw	r1, #778	; 0x30a
 8006d1c:	f000 fe5c 	bl	80079d8 <__assert_func>
 8006d20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006d24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d28:	bb35      	cbnz	r5, 8006d78 <__d2b+0x7c>
 8006d2a:	2e00      	cmp	r6, #0
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	d028      	beq.n	8006d82 <__d2b+0x86>
 8006d30:	4668      	mov	r0, sp
 8006d32:	9600      	str	r6, [sp, #0]
 8006d34:	f7ff fd82 	bl	800683c <__lo0bits>
 8006d38:	9900      	ldr	r1, [sp, #0]
 8006d3a:	b300      	cbz	r0, 8006d7e <__d2b+0x82>
 8006d3c:	9a01      	ldr	r2, [sp, #4]
 8006d3e:	f1c0 0320 	rsb	r3, r0, #32
 8006d42:	fa02 f303 	lsl.w	r3, r2, r3
 8006d46:	430b      	orrs	r3, r1
 8006d48:	40c2      	lsrs	r2, r0
 8006d4a:	6163      	str	r3, [r4, #20]
 8006d4c:	9201      	str	r2, [sp, #4]
 8006d4e:	9b01      	ldr	r3, [sp, #4]
 8006d50:	61a3      	str	r3, [r4, #24]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	bf14      	ite	ne
 8006d56:	2202      	movne	r2, #2
 8006d58:	2201      	moveq	r2, #1
 8006d5a:	6122      	str	r2, [r4, #16]
 8006d5c:	b1d5      	cbz	r5, 8006d94 <__d2b+0x98>
 8006d5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006d62:	4405      	add	r5, r0
 8006d64:	f8c9 5000 	str.w	r5, [r9]
 8006d68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d6c:	f8c8 0000 	str.w	r0, [r8]
 8006d70:	4620      	mov	r0, r4
 8006d72:	b003      	add	sp, #12
 8006d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d7c:	e7d5      	b.n	8006d2a <__d2b+0x2e>
 8006d7e:	6161      	str	r1, [r4, #20]
 8006d80:	e7e5      	b.n	8006d4e <__d2b+0x52>
 8006d82:	a801      	add	r0, sp, #4
 8006d84:	f7ff fd5a 	bl	800683c <__lo0bits>
 8006d88:	9b01      	ldr	r3, [sp, #4]
 8006d8a:	6163      	str	r3, [r4, #20]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	6122      	str	r2, [r4, #16]
 8006d90:	3020      	adds	r0, #32
 8006d92:	e7e3      	b.n	8006d5c <__d2b+0x60>
 8006d94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d9c:	f8c9 0000 	str.w	r0, [r9]
 8006da0:	6918      	ldr	r0, [r3, #16]
 8006da2:	f7ff fd2b 	bl	80067fc <__hi0bits>
 8006da6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006daa:	e7df      	b.n	8006d6c <__d2b+0x70>
 8006dac:	080096f5 	.word	0x080096f5
 8006db0:	08009706 	.word	0x08009706

08006db4 <_calloc_r>:
 8006db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006db6:	fba1 2402 	umull	r2, r4, r1, r2
 8006dba:	b94c      	cbnz	r4, 8006dd0 <_calloc_r+0x1c>
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	9201      	str	r2, [sp, #4]
 8006dc0:	f7fe f828 	bl	8004e14 <_malloc_r>
 8006dc4:	9a01      	ldr	r2, [sp, #4]
 8006dc6:	4605      	mov	r5, r0
 8006dc8:	b930      	cbnz	r0, 8006dd8 <_calloc_r+0x24>
 8006dca:	4628      	mov	r0, r5
 8006dcc:	b003      	add	sp, #12
 8006dce:	bd30      	pop	{r4, r5, pc}
 8006dd0:	220c      	movs	r2, #12
 8006dd2:	6002      	str	r2, [r0, #0]
 8006dd4:	2500      	movs	r5, #0
 8006dd6:	e7f8      	b.n	8006dca <_calloc_r+0x16>
 8006dd8:	4621      	mov	r1, r4
 8006dda:	f7fd ffa7 	bl	8004d2c <memset>
 8006dde:	e7f4      	b.n	8006dca <_calloc_r+0x16>

08006de0 <__ssputs_r>:
 8006de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de4:	688e      	ldr	r6, [r1, #8]
 8006de6:	429e      	cmp	r6, r3
 8006de8:	4682      	mov	sl, r0
 8006dea:	460c      	mov	r4, r1
 8006dec:	4690      	mov	r8, r2
 8006dee:	461f      	mov	r7, r3
 8006df0:	d838      	bhi.n	8006e64 <__ssputs_r+0x84>
 8006df2:	898a      	ldrh	r2, [r1, #12]
 8006df4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006df8:	d032      	beq.n	8006e60 <__ssputs_r+0x80>
 8006dfa:	6825      	ldr	r5, [r4, #0]
 8006dfc:	6909      	ldr	r1, [r1, #16]
 8006dfe:	eba5 0901 	sub.w	r9, r5, r1
 8006e02:	6965      	ldr	r5, [r4, #20]
 8006e04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	444b      	add	r3, r9
 8006e10:	106d      	asrs	r5, r5, #1
 8006e12:	429d      	cmp	r5, r3
 8006e14:	bf38      	it	cc
 8006e16:	461d      	movcc	r5, r3
 8006e18:	0553      	lsls	r3, r2, #21
 8006e1a:	d531      	bpl.n	8006e80 <__ssputs_r+0xa0>
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	f7fd fff9 	bl	8004e14 <_malloc_r>
 8006e22:	4606      	mov	r6, r0
 8006e24:	b950      	cbnz	r0, 8006e3c <__ssputs_r+0x5c>
 8006e26:	230c      	movs	r3, #12
 8006e28:	f8ca 3000 	str.w	r3, [sl]
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e32:	81a3      	strh	r3, [r4, #12]
 8006e34:	f04f 30ff 	mov.w	r0, #4294967295
 8006e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e3c:	6921      	ldr	r1, [r4, #16]
 8006e3e:	464a      	mov	r2, r9
 8006e40:	f7ff fc1a 	bl	8006678 <memcpy>
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4e:	81a3      	strh	r3, [r4, #12]
 8006e50:	6126      	str	r6, [r4, #16]
 8006e52:	6165      	str	r5, [r4, #20]
 8006e54:	444e      	add	r6, r9
 8006e56:	eba5 0509 	sub.w	r5, r5, r9
 8006e5a:	6026      	str	r6, [r4, #0]
 8006e5c:	60a5      	str	r5, [r4, #8]
 8006e5e:	463e      	mov	r6, r7
 8006e60:	42be      	cmp	r6, r7
 8006e62:	d900      	bls.n	8006e66 <__ssputs_r+0x86>
 8006e64:	463e      	mov	r6, r7
 8006e66:	6820      	ldr	r0, [r4, #0]
 8006e68:	4632      	mov	r2, r6
 8006e6a:	4641      	mov	r1, r8
 8006e6c:	f000 ffb0 	bl	8007dd0 <memmove>
 8006e70:	68a3      	ldr	r3, [r4, #8]
 8006e72:	1b9b      	subs	r3, r3, r6
 8006e74:	60a3      	str	r3, [r4, #8]
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	4433      	add	r3, r6
 8006e7a:	6023      	str	r3, [r4, #0]
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	e7db      	b.n	8006e38 <__ssputs_r+0x58>
 8006e80:	462a      	mov	r2, r5
 8006e82:	f000 ffbf 	bl	8007e04 <_realloc_r>
 8006e86:	4606      	mov	r6, r0
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d1e1      	bne.n	8006e50 <__ssputs_r+0x70>
 8006e8c:	6921      	ldr	r1, [r4, #16]
 8006e8e:	4650      	mov	r0, sl
 8006e90:	f7fd ff54 	bl	8004d3c <_free_r>
 8006e94:	e7c7      	b.n	8006e26 <__ssputs_r+0x46>
	...

08006e98 <_svfiprintf_r>:
 8006e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9c:	4698      	mov	r8, r3
 8006e9e:	898b      	ldrh	r3, [r1, #12]
 8006ea0:	061b      	lsls	r3, r3, #24
 8006ea2:	b09d      	sub	sp, #116	; 0x74
 8006ea4:	4607      	mov	r7, r0
 8006ea6:	460d      	mov	r5, r1
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	d50e      	bpl.n	8006eca <_svfiprintf_r+0x32>
 8006eac:	690b      	ldr	r3, [r1, #16]
 8006eae:	b963      	cbnz	r3, 8006eca <_svfiprintf_r+0x32>
 8006eb0:	2140      	movs	r1, #64	; 0x40
 8006eb2:	f7fd ffaf 	bl	8004e14 <_malloc_r>
 8006eb6:	6028      	str	r0, [r5, #0]
 8006eb8:	6128      	str	r0, [r5, #16]
 8006eba:	b920      	cbnz	r0, 8006ec6 <_svfiprintf_r+0x2e>
 8006ebc:	230c      	movs	r3, #12
 8006ebe:	603b      	str	r3, [r7, #0]
 8006ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec4:	e0d1      	b.n	800706a <_svfiprintf_r+0x1d2>
 8006ec6:	2340      	movs	r3, #64	; 0x40
 8006ec8:	616b      	str	r3, [r5, #20]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ece:	2320      	movs	r3, #32
 8006ed0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ed4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ed8:	2330      	movs	r3, #48	; 0x30
 8006eda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007084 <_svfiprintf_r+0x1ec>
 8006ede:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ee2:	f04f 0901 	mov.w	r9, #1
 8006ee6:	4623      	mov	r3, r4
 8006ee8:	469a      	mov	sl, r3
 8006eea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eee:	b10a      	cbz	r2, 8006ef4 <_svfiprintf_r+0x5c>
 8006ef0:	2a25      	cmp	r2, #37	; 0x25
 8006ef2:	d1f9      	bne.n	8006ee8 <_svfiprintf_r+0x50>
 8006ef4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ef8:	d00b      	beq.n	8006f12 <_svfiprintf_r+0x7a>
 8006efa:	465b      	mov	r3, fp
 8006efc:	4622      	mov	r2, r4
 8006efe:	4629      	mov	r1, r5
 8006f00:	4638      	mov	r0, r7
 8006f02:	f7ff ff6d 	bl	8006de0 <__ssputs_r>
 8006f06:	3001      	adds	r0, #1
 8006f08:	f000 80aa 	beq.w	8007060 <_svfiprintf_r+0x1c8>
 8006f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f0e:	445a      	add	r2, fp
 8006f10:	9209      	str	r2, [sp, #36]	; 0x24
 8006f12:	f89a 3000 	ldrb.w	r3, [sl]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 80a2 	beq.w	8007060 <_svfiprintf_r+0x1c8>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f26:	f10a 0a01 	add.w	sl, sl, #1
 8006f2a:	9304      	str	r3, [sp, #16]
 8006f2c:	9307      	str	r3, [sp, #28]
 8006f2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f32:	931a      	str	r3, [sp, #104]	; 0x68
 8006f34:	4654      	mov	r4, sl
 8006f36:	2205      	movs	r2, #5
 8006f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f3c:	4851      	ldr	r0, [pc, #324]	; (8007084 <_svfiprintf_r+0x1ec>)
 8006f3e:	f7f9 f967 	bl	8000210 <memchr>
 8006f42:	9a04      	ldr	r2, [sp, #16]
 8006f44:	b9d8      	cbnz	r0, 8006f7e <_svfiprintf_r+0xe6>
 8006f46:	06d0      	lsls	r0, r2, #27
 8006f48:	bf44      	itt	mi
 8006f4a:	2320      	movmi	r3, #32
 8006f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f50:	0711      	lsls	r1, r2, #28
 8006f52:	bf44      	itt	mi
 8006f54:	232b      	movmi	r3, #43	; 0x2b
 8006f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f60:	d015      	beq.n	8006f8e <_svfiprintf_r+0xf6>
 8006f62:	9a07      	ldr	r2, [sp, #28]
 8006f64:	4654      	mov	r4, sl
 8006f66:	2000      	movs	r0, #0
 8006f68:	f04f 0c0a 	mov.w	ip, #10
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f72:	3b30      	subs	r3, #48	; 0x30
 8006f74:	2b09      	cmp	r3, #9
 8006f76:	d94e      	bls.n	8007016 <_svfiprintf_r+0x17e>
 8006f78:	b1b0      	cbz	r0, 8006fa8 <_svfiprintf_r+0x110>
 8006f7a:	9207      	str	r2, [sp, #28]
 8006f7c:	e014      	b.n	8006fa8 <_svfiprintf_r+0x110>
 8006f7e:	eba0 0308 	sub.w	r3, r0, r8
 8006f82:	fa09 f303 	lsl.w	r3, r9, r3
 8006f86:	4313      	orrs	r3, r2
 8006f88:	9304      	str	r3, [sp, #16]
 8006f8a:	46a2      	mov	sl, r4
 8006f8c:	e7d2      	b.n	8006f34 <_svfiprintf_r+0x9c>
 8006f8e:	9b03      	ldr	r3, [sp, #12]
 8006f90:	1d19      	adds	r1, r3, #4
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	9103      	str	r1, [sp, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bfbb      	ittet	lt
 8006f9a:	425b      	neglt	r3, r3
 8006f9c:	f042 0202 	orrlt.w	r2, r2, #2
 8006fa0:	9307      	strge	r3, [sp, #28]
 8006fa2:	9307      	strlt	r3, [sp, #28]
 8006fa4:	bfb8      	it	lt
 8006fa6:	9204      	strlt	r2, [sp, #16]
 8006fa8:	7823      	ldrb	r3, [r4, #0]
 8006faa:	2b2e      	cmp	r3, #46	; 0x2e
 8006fac:	d10c      	bne.n	8006fc8 <_svfiprintf_r+0x130>
 8006fae:	7863      	ldrb	r3, [r4, #1]
 8006fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fb2:	d135      	bne.n	8007020 <_svfiprintf_r+0x188>
 8006fb4:	9b03      	ldr	r3, [sp, #12]
 8006fb6:	1d1a      	adds	r2, r3, #4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	9203      	str	r2, [sp, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	bfb8      	it	lt
 8006fc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fc4:	3402      	adds	r4, #2
 8006fc6:	9305      	str	r3, [sp, #20]
 8006fc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007094 <_svfiprintf_r+0x1fc>
 8006fcc:	7821      	ldrb	r1, [r4, #0]
 8006fce:	2203      	movs	r2, #3
 8006fd0:	4650      	mov	r0, sl
 8006fd2:	f7f9 f91d 	bl	8000210 <memchr>
 8006fd6:	b140      	cbz	r0, 8006fea <_svfiprintf_r+0x152>
 8006fd8:	2340      	movs	r3, #64	; 0x40
 8006fda:	eba0 000a 	sub.w	r0, r0, sl
 8006fde:	fa03 f000 	lsl.w	r0, r3, r0
 8006fe2:	9b04      	ldr	r3, [sp, #16]
 8006fe4:	4303      	orrs	r3, r0
 8006fe6:	3401      	adds	r4, #1
 8006fe8:	9304      	str	r3, [sp, #16]
 8006fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fee:	4826      	ldr	r0, [pc, #152]	; (8007088 <_svfiprintf_r+0x1f0>)
 8006ff0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ff4:	2206      	movs	r2, #6
 8006ff6:	f7f9 f90b 	bl	8000210 <memchr>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d038      	beq.n	8007070 <_svfiprintf_r+0x1d8>
 8006ffe:	4b23      	ldr	r3, [pc, #140]	; (800708c <_svfiprintf_r+0x1f4>)
 8007000:	bb1b      	cbnz	r3, 800704a <_svfiprintf_r+0x1b2>
 8007002:	9b03      	ldr	r3, [sp, #12]
 8007004:	3307      	adds	r3, #7
 8007006:	f023 0307 	bic.w	r3, r3, #7
 800700a:	3308      	adds	r3, #8
 800700c:	9303      	str	r3, [sp, #12]
 800700e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007010:	4433      	add	r3, r6
 8007012:	9309      	str	r3, [sp, #36]	; 0x24
 8007014:	e767      	b.n	8006ee6 <_svfiprintf_r+0x4e>
 8007016:	fb0c 3202 	mla	r2, ip, r2, r3
 800701a:	460c      	mov	r4, r1
 800701c:	2001      	movs	r0, #1
 800701e:	e7a5      	b.n	8006f6c <_svfiprintf_r+0xd4>
 8007020:	2300      	movs	r3, #0
 8007022:	3401      	adds	r4, #1
 8007024:	9305      	str	r3, [sp, #20]
 8007026:	4619      	mov	r1, r3
 8007028:	f04f 0c0a 	mov.w	ip, #10
 800702c:	4620      	mov	r0, r4
 800702e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007032:	3a30      	subs	r2, #48	; 0x30
 8007034:	2a09      	cmp	r2, #9
 8007036:	d903      	bls.n	8007040 <_svfiprintf_r+0x1a8>
 8007038:	2b00      	cmp	r3, #0
 800703a:	d0c5      	beq.n	8006fc8 <_svfiprintf_r+0x130>
 800703c:	9105      	str	r1, [sp, #20]
 800703e:	e7c3      	b.n	8006fc8 <_svfiprintf_r+0x130>
 8007040:	fb0c 2101 	mla	r1, ip, r1, r2
 8007044:	4604      	mov	r4, r0
 8007046:	2301      	movs	r3, #1
 8007048:	e7f0      	b.n	800702c <_svfiprintf_r+0x194>
 800704a:	ab03      	add	r3, sp, #12
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	462a      	mov	r2, r5
 8007050:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <_svfiprintf_r+0x1f8>)
 8007052:	a904      	add	r1, sp, #16
 8007054:	4638      	mov	r0, r7
 8007056:	f7fd fff1 	bl	800503c <_printf_float>
 800705a:	1c42      	adds	r2, r0, #1
 800705c:	4606      	mov	r6, r0
 800705e:	d1d6      	bne.n	800700e <_svfiprintf_r+0x176>
 8007060:	89ab      	ldrh	r3, [r5, #12]
 8007062:	065b      	lsls	r3, r3, #25
 8007064:	f53f af2c 	bmi.w	8006ec0 <_svfiprintf_r+0x28>
 8007068:	9809      	ldr	r0, [sp, #36]	; 0x24
 800706a:	b01d      	add	sp, #116	; 0x74
 800706c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007070:	ab03      	add	r3, sp, #12
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	462a      	mov	r2, r5
 8007076:	4b06      	ldr	r3, [pc, #24]	; (8007090 <_svfiprintf_r+0x1f8>)
 8007078:	a904      	add	r1, sp, #16
 800707a:	4638      	mov	r0, r7
 800707c:	f7fe fa82 	bl	8005584 <_printf_i>
 8007080:	e7eb      	b.n	800705a <_svfiprintf_r+0x1c2>
 8007082:	bf00      	nop
 8007084:	08009864 	.word	0x08009864
 8007088:	0800986e 	.word	0x0800986e
 800708c:	0800503d 	.word	0x0800503d
 8007090:	08006de1 	.word	0x08006de1
 8007094:	0800986a 	.word	0x0800986a

08007098 <_sungetc_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	1c4b      	adds	r3, r1, #1
 800709c:	4614      	mov	r4, r2
 800709e:	d103      	bne.n	80070a8 <_sungetc_r+0x10>
 80070a0:	f04f 35ff 	mov.w	r5, #4294967295
 80070a4:	4628      	mov	r0, r5
 80070a6:	bd38      	pop	{r3, r4, r5, pc}
 80070a8:	8993      	ldrh	r3, [r2, #12]
 80070aa:	f023 0320 	bic.w	r3, r3, #32
 80070ae:	8193      	strh	r3, [r2, #12]
 80070b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070b2:	6852      	ldr	r2, [r2, #4]
 80070b4:	b2cd      	uxtb	r5, r1
 80070b6:	b18b      	cbz	r3, 80070dc <_sungetc_r+0x44>
 80070b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80070ba:	4293      	cmp	r3, r2
 80070bc:	dd08      	ble.n	80070d0 <_sungetc_r+0x38>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	1e5a      	subs	r2, r3, #1
 80070c2:	6022      	str	r2, [r4, #0]
 80070c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80070c8:	6863      	ldr	r3, [r4, #4]
 80070ca:	3301      	adds	r3, #1
 80070cc:	6063      	str	r3, [r4, #4]
 80070ce:	e7e9      	b.n	80070a4 <_sungetc_r+0xc>
 80070d0:	4621      	mov	r1, r4
 80070d2:	f000 fc47 	bl	8007964 <__submore>
 80070d6:	2800      	cmp	r0, #0
 80070d8:	d0f1      	beq.n	80070be <_sungetc_r+0x26>
 80070da:	e7e1      	b.n	80070a0 <_sungetc_r+0x8>
 80070dc:	6921      	ldr	r1, [r4, #16]
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	b151      	cbz	r1, 80070f8 <_sungetc_r+0x60>
 80070e2:	4299      	cmp	r1, r3
 80070e4:	d208      	bcs.n	80070f8 <_sungetc_r+0x60>
 80070e6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80070ea:	42a9      	cmp	r1, r5
 80070ec:	d104      	bne.n	80070f8 <_sungetc_r+0x60>
 80070ee:	3b01      	subs	r3, #1
 80070f0:	3201      	adds	r2, #1
 80070f2:	6023      	str	r3, [r4, #0]
 80070f4:	6062      	str	r2, [r4, #4]
 80070f6:	e7d5      	b.n	80070a4 <_sungetc_r+0xc>
 80070f8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80070fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007100:	6363      	str	r3, [r4, #52]	; 0x34
 8007102:	2303      	movs	r3, #3
 8007104:	63a3      	str	r3, [r4, #56]	; 0x38
 8007106:	4623      	mov	r3, r4
 8007108:	f803 5f46 	strb.w	r5, [r3, #70]!
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	2301      	movs	r3, #1
 8007110:	e7dc      	b.n	80070cc <_sungetc_r+0x34>

08007112 <__ssrefill_r>:
 8007112:	b510      	push	{r4, lr}
 8007114:	460c      	mov	r4, r1
 8007116:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007118:	b169      	cbz	r1, 8007136 <__ssrefill_r+0x24>
 800711a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800711e:	4299      	cmp	r1, r3
 8007120:	d001      	beq.n	8007126 <__ssrefill_r+0x14>
 8007122:	f7fd fe0b 	bl	8004d3c <_free_r>
 8007126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007128:	6063      	str	r3, [r4, #4]
 800712a:	2000      	movs	r0, #0
 800712c:	6360      	str	r0, [r4, #52]	; 0x34
 800712e:	b113      	cbz	r3, 8007136 <__ssrefill_r+0x24>
 8007130:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007132:	6023      	str	r3, [r4, #0]
 8007134:	bd10      	pop	{r4, pc}
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	2300      	movs	r3, #0
 800713c:	6063      	str	r3, [r4, #4]
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	f043 0320 	orr.w	r3, r3, #32
 8007144:	81a3      	strh	r3, [r4, #12]
 8007146:	f04f 30ff 	mov.w	r0, #4294967295
 800714a:	e7f3      	b.n	8007134 <__ssrefill_r+0x22>

0800714c <__ssvfiscanf_r>:
 800714c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007150:	460c      	mov	r4, r1
 8007152:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007156:	2100      	movs	r1, #0
 8007158:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800715c:	49a6      	ldr	r1, [pc, #664]	; (80073f8 <__ssvfiscanf_r+0x2ac>)
 800715e:	91a0      	str	r1, [sp, #640]	; 0x280
 8007160:	f10d 0804 	add.w	r8, sp, #4
 8007164:	49a5      	ldr	r1, [pc, #660]	; (80073fc <__ssvfiscanf_r+0x2b0>)
 8007166:	4fa6      	ldr	r7, [pc, #664]	; (8007400 <__ssvfiscanf_r+0x2b4>)
 8007168:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007404 <__ssvfiscanf_r+0x2b8>
 800716c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007170:	4606      	mov	r6, r0
 8007172:	91a1      	str	r1, [sp, #644]	; 0x284
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	7813      	ldrb	r3, [r2, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 815a 	beq.w	8007432 <__ssvfiscanf_r+0x2e6>
 800717e:	5dd9      	ldrb	r1, [r3, r7]
 8007180:	f011 0108 	ands.w	r1, r1, #8
 8007184:	f102 0501 	add.w	r5, r2, #1
 8007188:	d019      	beq.n	80071be <__ssvfiscanf_r+0x72>
 800718a:	6863      	ldr	r3, [r4, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	dd0f      	ble.n	80071b0 <__ssvfiscanf_r+0x64>
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	781a      	ldrb	r2, [r3, #0]
 8007194:	5cba      	ldrb	r2, [r7, r2]
 8007196:	0712      	lsls	r2, r2, #28
 8007198:	d401      	bmi.n	800719e <__ssvfiscanf_r+0x52>
 800719a:	462a      	mov	r2, r5
 800719c:	e7eb      	b.n	8007176 <__ssvfiscanf_r+0x2a>
 800719e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80071a0:	3201      	adds	r2, #1
 80071a2:	9245      	str	r2, [sp, #276]	; 0x114
 80071a4:	6862      	ldr	r2, [r4, #4]
 80071a6:	3301      	adds	r3, #1
 80071a8:	3a01      	subs	r2, #1
 80071aa:	6062      	str	r2, [r4, #4]
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	e7ec      	b.n	800718a <__ssvfiscanf_r+0x3e>
 80071b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80071b2:	4621      	mov	r1, r4
 80071b4:	4630      	mov	r0, r6
 80071b6:	4798      	blx	r3
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d0e9      	beq.n	8007190 <__ssvfiscanf_r+0x44>
 80071bc:	e7ed      	b.n	800719a <__ssvfiscanf_r+0x4e>
 80071be:	2b25      	cmp	r3, #37	; 0x25
 80071c0:	d012      	beq.n	80071e8 <__ssvfiscanf_r+0x9c>
 80071c2:	469a      	mov	sl, r3
 80071c4:	6863      	ldr	r3, [r4, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f340 8091 	ble.w	80072ee <__ssvfiscanf_r+0x1a2>
 80071cc:	6822      	ldr	r2, [r4, #0]
 80071ce:	7813      	ldrb	r3, [r2, #0]
 80071d0:	4553      	cmp	r3, sl
 80071d2:	f040 812e 	bne.w	8007432 <__ssvfiscanf_r+0x2e6>
 80071d6:	6863      	ldr	r3, [r4, #4]
 80071d8:	3b01      	subs	r3, #1
 80071da:	6063      	str	r3, [r4, #4]
 80071dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80071de:	3201      	adds	r2, #1
 80071e0:	3301      	adds	r3, #1
 80071e2:	6022      	str	r2, [r4, #0]
 80071e4:	9345      	str	r3, [sp, #276]	; 0x114
 80071e6:	e7d8      	b.n	800719a <__ssvfiscanf_r+0x4e>
 80071e8:	9141      	str	r1, [sp, #260]	; 0x104
 80071ea:	9143      	str	r1, [sp, #268]	; 0x10c
 80071ec:	7853      	ldrb	r3, [r2, #1]
 80071ee:	2b2a      	cmp	r3, #42	; 0x2a
 80071f0:	bf02      	ittt	eq
 80071f2:	2310      	moveq	r3, #16
 80071f4:	1c95      	addeq	r5, r2, #2
 80071f6:	9341      	streq	r3, [sp, #260]	; 0x104
 80071f8:	220a      	movs	r2, #10
 80071fa:	46aa      	mov	sl, r5
 80071fc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007200:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007204:	2b09      	cmp	r3, #9
 8007206:	d91d      	bls.n	8007244 <__ssvfiscanf_r+0xf8>
 8007208:	487e      	ldr	r0, [pc, #504]	; (8007404 <__ssvfiscanf_r+0x2b8>)
 800720a:	2203      	movs	r2, #3
 800720c:	f7f9 f800 	bl	8000210 <memchr>
 8007210:	b140      	cbz	r0, 8007224 <__ssvfiscanf_r+0xd8>
 8007212:	2301      	movs	r3, #1
 8007214:	eba0 0009 	sub.w	r0, r0, r9
 8007218:	fa03 f000 	lsl.w	r0, r3, r0
 800721c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800721e:	4318      	orrs	r0, r3
 8007220:	9041      	str	r0, [sp, #260]	; 0x104
 8007222:	4655      	mov	r5, sl
 8007224:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007228:	2b78      	cmp	r3, #120	; 0x78
 800722a:	d806      	bhi.n	800723a <__ssvfiscanf_r+0xee>
 800722c:	2b57      	cmp	r3, #87	; 0x57
 800722e:	d810      	bhi.n	8007252 <__ssvfiscanf_r+0x106>
 8007230:	2b25      	cmp	r3, #37	; 0x25
 8007232:	d0c6      	beq.n	80071c2 <__ssvfiscanf_r+0x76>
 8007234:	d856      	bhi.n	80072e4 <__ssvfiscanf_r+0x198>
 8007236:	2b00      	cmp	r3, #0
 8007238:	d064      	beq.n	8007304 <__ssvfiscanf_r+0x1b8>
 800723a:	2303      	movs	r3, #3
 800723c:	9347      	str	r3, [sp, #284]	; 0x11c
 800723e:	230a      	movs	r3, #10
 8007240:	9342      	str	r3, [sp, #264]	; 0x108
 8007242:	e071      	b.n	8007328 <__ssvfiscanf_r+0x1dc>
 8007244:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007246:	fb02 1103 	mla	r1, r2, r3, r1
 800724a:	3930      	subs	r1, #48	; 0x30
 800724c:	9143      	str	r1, [sp, #268]	; 0x10c
 800724e:	4655      	mov	r5, sl
 8007250:	e7d3      	b.n	80071fa <__ssvfiscanf_r+0xae>
 8007252:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007256:	2a20      	cmp	r2, #32
 8007258:	d8ef      	bhi.n	800723a <__ssvfiscanf_r+0xee>
 800725a:	a101      	add	r1, pc, #4	; (adr r1, 8007260 <__ssvfiscanf_r+0x114>)
 800725c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007260:	08007313 	.word	0x08007313
 8007264:	0800723b 	.word	0x0800723b
 8007268:	0800723b 	.word	0x0800723b
 800726c:	08007371 	.word	0x08007371
 8007270:	0800723b 	.word	0x0800723b
 8007274:	0800723b 	.word	0x0800723b
 8007278:	0800723b 	.word	0x0800723b
 800727c:	0800723b 	.word	0x0800723b
 8007280:	0800723b 	.word	0x0800723b
 8007284:	0800723b 	.word	0x0800723b
 8007288:	0800723b 	.word	0x0800723b
 800728c:	08007387 	.word	0x08007387
 8007290:	0800735d 	.word	0x0800735d
 8007294:	080072eb 	.word	0x080072eb
 8007298:	080072eb 	.word	0x080072eb
 800729c:	080072eb 	.word	0x080072eb
 80072a0:	0800723b 	.word	0x0800723b
 80072a4:	08007361 	.word	0x08007361
 80072a8:	0800723b 	.word	0x0800723b
 80072ac:	0800723b 	.word	0x0800723b
 80072b0:	0800723b 	.word	0x0800723b
 80072b4:	0800723b 	.word	0x0800723b
 80072b8:	08007397 	.word	0x08007397
 80072bc:	08007369 	.word	0x08007369
 80072c0:	0800730b 	.word	0x0800730b
 80072c4:	0800723b 	.word	0x0800723b
 80072c8:	0800723b 	.word	0x0800723b
 80072cc:	08007393 	.word	0x08007393
 80072d0:	0800723b 	.word	0x0800723b
 80072d4:	0800735d 	.word	0x0800735d
 80072d8:	0800723b 	.word	0x0800723b
 80072dc:	0800723b 	.word	0x0800723b
 80072e0:	08007313 	.word	0x08007313
 80072e4:	3b45      	subs	r3, #69	; 0x45
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d8a7      	bhi.n	800723a <__ssvfiscanf_r+0xee>
 80072ea:	2305      	movs	r3, #5
 80072ec:	e01b      	b.n	8007326 <__ssvfiscanf_r+0x1da>
 80072ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80072f0:	4621      	mov	r1, r4
 80072f2:	4630      	mov	r0, r6
 80072f4:	4798      	blx	r3
 80072f6:	2800      	cmp	r0, #0
 80072f8:	f43f af68 	beq.w	80071cc <__ssvfiscanf_r+0x80>
 80072fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80072fe:	2800      	cmp	r0, #0
 8007300:	f040 808d 	bne.w	800741e <__ssvfiscanf_r+0x2d2>
 8007304:	f04f 30ff 	mov.w	r0, #4294967295
 8007308:	e08f      	b.n	800742a <__ssvfiscanf_r+0x2de>
 800730a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800730c:	f042 0220 	orr.w	r2, r2, #32
 8007310:	9241      	str	r2, [sp, #260]	; 0x104
 8007312:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007318:	9241      	str	r2, [sp, #260]	; 0x104
 800731a:	2210      	movs	r2, #16
 800731c:	2b6f      	cmp	r3, #111	; 0x6f
 800731e:	9242      	str	r2, [sp, #264]	; 0x108
 8007320:	bf34      	ite	cc
 8007322:	2303      	movcc	r3, #3
 8007324:	2304      	movcs	r3, #4
 8007326:	9347      	str	r3, [sp, #284]	; 0x11c
 8007328:	6863      	ldr	r3, [r4, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	dd42      	ble.n	80073b4 <__ssvfiscanf_r+0x268>
 800732e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007330:	0659      	lsls	r1, r3, #25
 8007332:	d404      	bmi.n	800733e <__ssvfiscanf_r+0x1f2>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	781a      	ldrb	r2, [r3, #0]
 8007338:	5cba      	ldrb	r2, [r7, r2]
 800733a:	0712      	lsls	r2, r2, #28
 800733c:	d441      	bmi.n	80073c2 <__ssvfiscanf_r+0x276>
 800733e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007340:	2b02      	cmp	r3, #2
 8007342:	dc50      	bgt.n	80073e6 <__ssvfiscanf_r+0x29a>
 8007344:	466b      	mov	r3, sp
 8007346:	4622      	mov	r2, r4
 8007348:	a941      	add	r1, sp, #260	; 0x104
 800734a:	4630      	mov	r0, r6
 800734c:	f000 f876 	bl	800743c <_scanf_chars>
 8007350:	2801      	cmp	r0, #1
 8007352:	d06e      	beq.n	8007432 <__ssvfiscanf_r+0x2e6>
 8007354:	2802      	cmp	r0, #2
 8007356:	f47f af20 	bne.w	800719a <__ssvfiscanf_r+0x4e>
 800735a:	e7cf      	b.n	80072fc <__ssvfiscanf_r+0x1b0>
 800735c:	220a      	movs	r2, #10
 800735e:	e7dd      	b.n	800731c <__ssvfiscanf_r+0x1d0>
 8007360:	2300      	movs	r3, #0
 8007362:	9342      	str	r3, [sp, #264]	; 0x108
 8007364:	2303      	movs	r3, #3
 8007366:	e7de      	b.n	8007326 <__ssvfiscanf_r+0x1da>
 8007368:	2308      	movs	r3, #8
 800736a:	9342      	str	r3, [sp, #264]	; 0x108
 800736c:	2304      	movs	r3, #4
 800736e:	e7da      	b.n	8007326 <__ssvfiscanf_r+0x1da>
 8007370:	4629      	mov	r1, r5
 8007372:	4640      	mov	r0, r8
 8007374:	f000 f9c6 	bl	8007704 <__sccl>
 8007378:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800737a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800737e:	9341      	str	r3, [sp, #260]	; 0x104
 8007380:	4605      	mov	r5, r0
 8007382:	2301      	movs	r3, #1
 8007384:	e7cf      	b.n	8007326 <__ssvfiscanf_r+0x1da>
 8007386:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800738c:	9341      	str	r3, [sp, #260]	; 0x104
 800738e:	2300      	movs	r3, #0
 8007390:	e7c9      	b.n	8007326 <__ssvfiscanf_r+0x1da>
 8007392:	2302      	movs	r3, #2
 8007394:	e7c7      	b.n	8007326 <__ssvfiscanf_r+0x1da>
 8007396:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007398:	06c3      	lsls	r3, r0, #27
 800739a:	f53f aefe 	bmi.w	800719a <__ssvfiscanf_r+0x4e>
 800739e:	9b00      	ldr	r3, [sp, #0]
 80073a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80073a2:	1d19      	adds	r1, r3, #4
 80073a4:	9100      	str	r1, [sp, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f010 0f01 	tst.w	r0, #1
 80073ac:	bf14      	ite	ne
 80073ae:	801a      	strhne	r2, [r3, #0]
 80073b0:	601a      	streq	r2, [r3, #0]
 80073b2:	e6f2      	b.n	800719a <__ssvfiscanf_r+0x4e>
 80073b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80073b6:	4621      	mov	r1, r4
 80073b8:	4630      	mov	r0, r6
 80073ba:	4798      	blx	r3
 80073bc:	2800      	cmp	r0, #0
 80073be:	d0b6      	beq.n	800732e <__ssvfiscanf_r+0x1e2>
 80073c0:	e79c      	b.n	80072fc <__ssvfiscanf_r+0x1b0>
 80073c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80073c4:	3201      	adds	r2, #1
 80073c6:	9245      	str	r2, [sp, #276]	; 0x114
 80073c8:	6862      	ldr	r2, [r4, #4]
 80073ca:	3a01      	subs	r2, #1
 80073cc:	2a00      	cmp	r2, #0
 80073ce:	6062      	str	r2, [r4, #4]
 80073d0:	dd02      	ble.n	80073d8 <__ssvfiscanf_r+0x28c>
 80073d2:	3301      	adds	r3, #1
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	e7ad      	b.n	8007334 <__ssvfiscanf_r+0x1e8>
 80073d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80073da:	4621      	mov	r1, r4
 80073dc:	4630      	mov	r0, r6
 80073de:	4798      	blx	r3
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d0a7      	beq.n	8007334 <__ssvfiscanf_r+0x1e8>
 80073e4:	e78a      	b.n	80072fc <__ssvfiscanf_r+0x1b0>
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	dc0e      	bgt.n	8007408 <__ssvfiscanf_r+0x2bc>
 80073ea:	466b      	mov	r3, sp
 80073ec:	4622      	mov	r2, r4
 80073ee:	a941      	add	r1, sp, #260	; 0x104
 80073f0:	4630      	mov	r0, r6
 80073f2:	f000 f87d 	bl	80074f0 <_scanf_i>
 80073f6:	e7ab      	b.n	8007350 <__ssvfiscanf_r+0x204>
 80073f8:	08007099 	.word	0x08007099
 80073fc:	08007113 	.word	0x08007113
 8007400:	080098cd 	.word	0x080098cd
 8007404:	0800986a 	.word	0x0800986a
 8007408:	4b0b      	ldr	r3, [pc, #44]	; (8007438 <__ssvfiscanf_r+0x2ec>)
 800740a:	2b00      	cmp	r3, #0
 800740c:	f43f aec5 	beq.w	800719a <__ssvfiscanf_r+0x4e>
 8007410:	466b      	mov	r3, sp
 8007412:	4622      	mov	r2, r4
 8007414:	a941      	add	r1, sp, #260	; 0x104
 8007416:	4630      	mov	r0, r6
 8007418:	f3af 8000 	nop.w
 800741c:	e798      	b.n	8007350 <__ssvfiscanf_r+0x204>
 800741e:	89a3      	ldrh	r3, [r4, #12]
 8007420:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007424:	bf18      	it	ne
 8007426:	f04f 30ff 	movne.w	r0, #4294967295
 800742a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800742e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007432:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007434:	e7f9      	b.n	800742a <__ssvfiscanf_r+0x2de>
 8007436:	bf00      	nop
 8007438:	00000000 	.word	0x00000000

0800743c <_scanf_chars>:
 800743c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007440:	4615      	mov	r5, r2
 8007442:	688a      	ldr	r2, [r1, #8]
 8007444:	4680      	mov	r8, r0
 8007446:	460c      	mov	r4, r1
 8007448:	b932      	cbnz	r2, 8007458 <_scanf_chars+0x1c>
 800744a:	698a      	ldr	r2, [r1, #24]
 800744c:	2a00      	cmp	r2, #0
 800744e:	bf0c      	ite	eq
 8007450:	2201      	moveq	r2, #1
 8007452:	f04f 32ff 	movne.w	r2, #4294967295
 8007456:	608a      	str	r2, [r1, #8]
 8007458:	6822      	ldr	r2, [r4, #0]
 800745a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80074ec <_scanf_chars+0xb0>
 800745e:	06d1      	lsls	r1, r2, #27
 8007460:	bf5f      	itttt	pl
 8007462:	681a      	ldrpl	r2, [r3, #0]
 8007464:	1d11      	addpl	r1, r2, #4
 8007466:	6019      	strpl	r1, [r3, #0]
 8007468:	6816      	ldrpl	r6, [r2, #0]
 800746a:	2700      	movs	r7, #0
 800746c:	69a0      	ldr	r0, [r4, #24]
 800746e:	b188      	cbz	r0, 8007494 <_scanf_chars+0x58>
 8007470:	2801      	cmp	r0, #1
 8007472:	d107      	bne.n	8007484 <_scanf_chars+0x48>
 8007474:	682a      	ldr	r2, [r5, #0]
 8007476:	7811      	ldrb	r1, [r2, #0]
 8007478:	6962      	ldr	r2, [r4, #20]
 800747a:	5c52      	ldrb	r2, [r2, r1]
 800747c:	b952      	cbnz	r2, 8007494 <_scanf_chars+0x58>
 800747e:	2f00      	cmp	r7, #0
 8007480:	d031      	beq.n	80074e6 <_scanf_chars+0xaa>
 8007482:	e022      	b.n	80074ca <_scanf_chars+0x8e>
 8007484:	2802      	cmp	r0, #2
 8007486:	d120      	bne.n	80074ca <_scanf_chars+0x8e>
 8007488:	682b      	ldr	r3, [r5, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007490:	071b      	lsls	r3, r3, #28
 8007492:	d41a      	bmi.n	80074ca <_scanf_chars+0x8e>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	06da      	lsls	r2, r3, #27
 8007498:	bf5e      	ittt	pl
 800749a:	682b      	ldrpl	r3, [r5, #0]
 800749c:	781b      	ldrbpl	r3, [r3, #0]
 800749e:	f806 3b01 	strbpl.w	r3, [r6], #1
 80074a2:	682a      	ldr	r2, [r5, #0]
 80074a4:	686b      	ldr	r3, [r5, #4]
 80074a6:	3201      	adds	r2, #1
 80074a8:	602a      	str	r2, [r5, #0]
 80074aa:	68a2      	ldr	r2, [r4, #8]
 80074ac:	3b01      	subs	r3, #1
 80074ae:	3a01      	subs	r2, #1
 80074b0:	606b      	str	r3, [r5, #4]
 80074b2:	3701      	adds	r7, #1
 80074b4:	60a2      	str	r2, [r4, #8]
 80074b6:	b142      	cbz	r2, 80074ca <_scanf_chars+0x8e>
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	dcd7      	bgt.n	800746c <_scanf_chars+0x30>
 80074bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80074c0:	4629      	mov	r1, r5
 80074c2:	4640      	mov	r0, r8
 80074c4:	4798      	blx	r3
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d0d0      	beq.n	800746c <_scanf_chars+0x30>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	f013 0310 	ands.w	r3, r3, #16
 80074d0:	d105      	bne.n	80074de <_scanf_chars+0xa2>
 80074d2:	68e2      	ldr	r2, [r4, #12]
 80074d4:	3201      	adds	r2, #1
 80074d6:	60e2      	str	r2, [r4, #12]
 80074d8:	69a2      	ldr	r2, [r4, #24]
 80074da:	b102      	cbz	r2, 80074de <_scanf_chars+0xa2>
 80074dc:	7033      	strb	r3, [r6, #0]
 80074de:	6923      	ldr	r3, [r4, #16]
 80074e0:	443b      	add	r3, r7
 80074e2:	6123      	str	r3, [r4, #16]
 80074e4:	2000      	movs	r0, #0
 80074e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ea:	bf00      	nop
 80074ec:	080098cd 	.word	0x080098cd

080074f0 <_scanf_i>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	4698      	mov	r8, r3
 80074f6:	4b76      	ldr	r3, [pc, #472]	; (80076d0 <_scanf_i+0x1e0>)
 80074f8:	460c      	mov	r4, r1
 80074fa:	4682      	mov	sl, r0
 80074fc:	4616      	mov	r6, r2
 80074fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007502:	b087      	sub	sp, #28
 8007504:	ab03      	add	r3, sp, #12
 8007506:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800750a:	4b72      	ldr	r3, [pc, #456]	; (80076d4 <_scanf_i+0x1e4>)
 800750c:	69a1      	ldr	r1, [r4, #24]
 800750e:	4a72      	ldr	r2, [pc, #456]	; (80076d8 <_scanf_i+0x1e8>)
 8007510:	2903      	cmp	r1, #3
 8007512:	bf18      	it	ne
 8007514:	461a      	movne	r2, r3
 8007516:	68a3      	ldr	r3, [r4, #8]
 8007518:	9201      	str	r2, [sp, #4]
 800751a:	1e5a      	subs	r2, r3, #1
 800751c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007520:	bf88      	it	hi
 8007522:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007526:	4627      	mov	r7, r4
 8007528:	bf82      	ittt	hi
 800752a:	eb03 0905 	addhi.w	r9, r3, r5
 800752e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007532:	60a3      	strhi	r3, [r4, #8]
 8007534:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007538:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800753c:	bf98      	it	ls
 800753e:	f04f 0900 	movls.w	r9, #0
 8007542:	6023      	str	r3, [r4, #0]
 8007544:	463d      	mov	r5, r7
 8007546:	f04f 0b00 	mov.w	fp, #0
 800754a:	6831      	ldr	r1, [r6, #0]
 800754c:	ab03      	add	r3, sp, #12
 800754e:	7809      	ldrb	r1, [r1, #0]
 8007550:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007554:	2202      	movs	r2, #2
 8007556:	f7f8 fe5b 	bl	8000210 <memchr>
 800755a:	b328      	cbz	r0, 80075a8 <_scanf_i+0xb8>
 800755c:	f1bb 0f01 	cmp.w	fp, #1
 8007560:	d159      	bne.n	8007616 <_scanf_i+0x126>
 8007562:	6862      	ldr	r2, [r4, #4]
 8007564:	b92a      	cbnz	r2, 8007572 <_scanf_i+0x82>
 8007566:	6822      	ldr	r2, [r4, #0]
 8007568:	2308      	movs	r3, #8
 800756a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800756e:	6063      	str	r3, [r4, #4]
 8007570:	6022      	str	r2, [r4, #0]
 8007572:	6822      	ldr	r2, [r4, #0]
 8007574:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007578:	6022      	str	r2, [r4, #0]
 800757a:	68a2      	ldr	r2, [r4, #8]
 800757c:	1e51      	subs	r1, r2, #1
 800757e:	60a1      	str	r1, [r4, #8]
 8007580:	b192      	cbz	r2, 80075a8 <_scanf_i+0xb8>
 8007582:	6832      	ldr	r2, [r6, #0]
 8007584:	1c51      	adds	r1, r2, #1
 8007586:	6031      	str	r1, [r6, #0]
 8007588:	7812      	ldrb	r2, [r2, #0]
 800758a:	f805 2b01 	strb.w	r2, [r5], #1
 800758e:	6872      	ldr	r2, [r6, #4]
 8007590:	3a01      	subs	r2, #1
 8007592:	2a00      	cmp	r2, #0
 8007594:	6072      	str	r2, [r6, #4]
 8007596:	dc07      	bgt.n	80075a8 <_scanf_i+0xb8>
 8007598:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800759c:	4631      	mov	r1, r6
 800759e:	4650      	mov	r0, sl
 80075a0:	4790      	blx	r2
 80075a2:	2800      	cmp	r0, #0
 80075a4:	f040 8085 	bne.w	80076b2 <_scanf_i+0x1c2>
 80075a8:	f10b 0b01 	add.w	fp, fp, #1
 80075ac:	f1bb 0f03 	cmp.w	fp, #3
 80075b0:	d1cb      	bne.n	800754a <_scanf_i+0x5a>
 80075b2:	6863      	ldr	r3, [r4, #4]
 80075b4:	b90b      	cbnz	r3, 80075ba <_scanf_i+0xca>
 80075b6:	230a      	movs	r3, #10
 80075b8:	6063      	str	r3, [r4, #4]
 80075ba:	6863      	ldr	r3, [r4, #4]
 80075bc:	4947      	ldr	r1, [pc, #284]	; (80076dc <_scanf_i+0x1ec>)
 80075be:	6960      	ldr	r0, [r4, #20]
 80075c0:	1ac9      	subs	r1, r1, r3
 80075c2:	f000 f89f 	bl	8007704 <__sccl>
 80075c6:	f04f 0b00 	mov.w	fp, #0
 80075ca:	68a3      	ldr	r3, [r4, #8]
 80075cc:	6822      	ldr	r2, [r4, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d03d      	beq.n	800764e <_scanf_i+0x15e>
 80075d2:	6831      	ldr	r1, [r6, #0]
 80075d4:	6960      	ldr	r0, [r4, #20]
 80075d6:	f891 c000 	ldrb.w	ip, [r1]
 80075da:	f810 000c 	ldrb.w	r0, [r0, ip]
 80075de:	2800      	cmp	r0, #0
 80075e0:	d035      	beq.n	800764e <_scanf_i+0x15e>
 80075e2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80075e6:	d124      	bne.n	8007632 <_scanf_i+0x142>
 80075e8:	0510      	lsls	r0, r2, #20
 80075ea:	d522      	bpl.n	8007632 <_scanf_i+0x142>
 80075ec:	f10b 0b01 	add.w	fp, fp, #1
 80075f0:	f1b9 0f00 	cmp.w	r9, #0
 80075f4:	d003      	beq.n	80075fe <_scanf_i+0x10e>
 80075f6:	3301      	adds	r3, #1
 80075f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80075fc:	60a3      	str	r3, [r4, #8]
 80075fe:	6873      	ldr	r3, [r6, #4]
 8007600:	3b01      	subs	r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	6073      	str	r3, [r6, #4]
 8007606:	dd1b      	ble.n	8007640 <_scanf_i+0x150>
 8007608:	6833      	ldr	r3, [r6, #0]
 800760a:	3301      	adds	r3, #1
 800760c:	6033      	str	r3, [r6, #0]
 800760e:	68a3      	ldr	r3, [r4, #8]
 8007610:	3b01      	subs	r3, #1
 8007612:	60a3      	str	r3, [r4, #8]
 8007614:	e7d9      	b.n	80075ca <_scanf_i+0xda>
 8007616:	f1bb 0f02 	cmp.w	fp, #2
 800761a:	d1ae      	bne.n	800757a <_scanf_i+0x8a>
 800761c:	6822      	ldr	r2, [r4, #0]
 800761e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007622:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007626:	d1bf      	bne.n	80075a8 <_scanf_i+0xb8>
 8007628:	2310      	movs	r3, #16
 800762a:	6063      	str	r3, [r4, #4]
 800762c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007630:	e7a2      	b.n	8007578 <_scanf_i+0x88>
 8007632:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007636:	6022      	str	r2, [r4, #0]
 8007638:	780b      	ldrb	r3, [r1, #0]
 800763a:	f805 3b01 	strb.w	r3, [r5], #1
 800763e:	e7de      	b.n	80075fe <_scanf_i+0x10e>
 8007640:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007644:	4631      	mov	r1, r6
 8007646:	4650      	mov	r0, sl
 8007648:	4798      	blx	r3
 800764a:	2800      	cmp	r0, #0
 800764c:	d0df      	beq.n	800760e <_scanf_i+0x11e>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	05db      	lsls	r3, r3, #23
 8007652:	d50d      	bpl.n	8007670 <_scanf_i+0x180>
 8007654:	42bd      	cmp	r5, r7
 8007656:	d909      	bls.n	800766c <_scanf_i+0x17c>
 8007658:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800765c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007660:	4632      	mov	r2, r6
 8007662:	4650      	mov	r0, sl
 8007664:	4798      	blx	r3
 8007666:	f105 39ff 	add.w	r9, r5, #4294967295
 800766a:	464d      	mov	r5, r9
 800766c:	42bd      	cmp	r5, r7
 800766e:	d02d      	beq.n	80076cc <_scanf_i+0x1dc>
 8007670:	6822      	ldr	r2, [r4, #0]
 8007672:	f012 0210 	ands.w	r2, r2, #16
 8007676:	d113      	bne.n	80076a0 <_scanf_i+0x1b0>
 8007678:	702a      	strb	r2, [r5, #0]
 800767a:	6863      	ldr	r3, [r4, #4]
 800767c:	9e01      	ldr	r6, [sp, #4]
 800767e:	4639      	mov	r1, r7
 8007680:	4650      	mov	r0, sl
 8007682:	47b0      	blx	r6
 8007684:	6821      	ldr	r1, [r4, #0]
 8007686:	f8d8 3000 	ldr.w	r3, [r8]
 800768a:	f011 0f20 	tst.w	r1, #32
 800768e:	d013      	beq.n	80076b8 <_scanf_i+0x1c8>
 8007690:	1d1a      	adds	r2, r3, #4
 8007692:	f8c8 2000 	str.w	r2, [r8]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6018      	str	r0, [r3, #0]
 800769a:	68e3      	ldr	r3, [r4, #12]
 800769c:	3301      	adds	r3, #1
 800769e:	60e3      	str	r3, [r4, #12]
 80076a0:	1bed      	subs	r5, r5, r7
 80076a2:	44ab      	add	fp, r5
 80076a4:	6925      	ldr	r5, [r4, #16]
 80076a6:	445d      	add	r5, fp
 80076a8:	6125      	str	r5, [r4, #16]
 80076aa:	2000      	movs	r0, #0
 80076ac:	b007      	add	sp, #28
 80076ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b2:	f04f 0b00 	mov.w	fp, #0
 80076b6:	e7ca      	b.n	800764e <_scanf_i+0x15e>
 80076b8:	1d1a      	adds	r2, r3, #4
 80076ba:	f8c8 2000 	str.w	r2, [r8]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f011 0f01 	tst.w	r1, #1
 80076c4:	bf14      	ite	ne
 80076c6:	8018      	strhne	r0, [r3, #0]
 80076c8:	6018      	streq	r0, [r3, #0]
 80076ca:	e7e6      	b.n	800769a <_scanf_i+0x1aa>
 80076cc:	2001      	movs	r0, #1
 80076ce:	e7ed      	b.n	80076ac <_scanf_i+0x1bc>
 80076d0:	08009634 	.word	0x08009634
 80076d4:	08007961 	.word	0x08007961
 80076d8:	08007879 	.word	0x08007879
 80076dc:	0800988e 	.word	0x0800988e

080076e0 <_read_r>:
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	4d07      	ldr	r5, [pc, #28]	; (8007700 <_read_r+0x20>)
 80076e4:	4604      	mov	r4, r0
 80076e6:	4608      	mov	r0, r1
 80076e8:	4611      	mov	r1, r2
 80076ea:	2200      	movs	r2, #0
 80076ec:	602a      	str	r2, [r5, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	f7f9 fd50 	bl	8001194 <_read>
 80076f4:	1c43      	adds	r3, r0, #1
 80076f6:	d102      	bne.n	80076fe <_read_r+0x1e>
 80076f8:	682b      	ldr	r3, [r5, #0]
 80076fa:	b103      	cbz	r3, 80076fe <_read_r+0x1e>
 80076fc:	6023      	str	r3, [r4, #0]
 80076fe:	bd38      	pop	{r3, r4, r5, pc}
 8007700:	20011a94 	.word	0x20011a94

08007704 <__sccl>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	780b      	ldrb	r3, [r1, #0]
 8007708:	4604      	mov	r4, r0
 800770a:	2b5e      	cmp	r3, #94	; 0x5e
 800770c:	bf0b      	itete	eq
 800770e:	784b      	ldrbeq	r3, [r1, #1]
 8007710:	1c48      	addne	r0, r1, #1
 8007712:	1c88      	addeq	r0, r1, #2
 8007714:	2200      	movne	r2, #0
 8007716:	bf08      	it	eq
 8007718:	2201      	moveq	r2, #1
 800771a:	1e61      	subs	r1, r4, #1
 800771c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007720:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007724:	42a9      	cmp	r1, r5
 8007726:	d1fb      	bne.n	8007720 <__sccl+0x1c>
 8007728:	b90b      	cbnz	r3, 800772e <__sccl+0x2a>
 800772a:	3801      	subs	r0, #1
 800772c:	bd70      	pop	{r4, r5, r6, pc}
 800772e:	f082 0201 	eor.w	r2, r2, #1
 8007732:	54e2      	strb	r2, [r4, r3]
 8007734:	4605      	mov	r5, r0
 8007736:	4628      	mov	r0, r5
 8007738:	f810 1b01 	ldrb.w	r1, [r0], #1
 800773c:	292d      	cmp	r1, #45	; 0x2d
 800773e:	d006      	beq.n	800774e <__sccl+0x4a>
 8007740:	295d      	cmp	r1, #93	; 0x5d
 8007742:	d0f3      	beq.n	800772c <__sccl+0x28>
 8007744:	b909      	cbnz	r1, 800774a <__sccl+0x46>
 8007746:	4628      	mov	r0, r5
 8007748:	e7f0      	b.n	800772c <__sccl+0x28>
 800774a:	460b      	mov	r3, r1
 800774c:	e7f1      	b.n	8007732 <__sccl+0x2e>
 800774e:	786e      	ldrb	r6, [r5, #1]
 8007750:	2e5d      	cmp	r6, #93	; 0x5d
 8007752:	d0fa      	beq.n	800774a <__sccl+0x46>
 8007754:	42b3      	cmp	r3, r6
 8007756:	dcf8      	bgt.n	800774a <__sccl+0x46>
 8007758:	3502      	adds	r5, #2
 800775a:	4619      	mov	r1, r3
 800775c:	3101      	adds	r1, #1
 800775e:	428e      	cmp	r6, r1
 8007760:	5462      	strb	r2, [r4, r1]
 8007762:	dcfb      	bgt.n	800775c <__sccl+0x58>
 8007764:	1af1      	subs	r1, r6, r3
 8007766:	3901      	subs	r1, #1
 8007768:	1c58      	adds	r0, r3, #1
 800776a:	42b3      	cmp	r3, r6
 800776c:	bfa8      	it	ge
 800776e:	2100      	movge	r1, #0
 8007770:	1843      	adds	r3, r0, r1
 8007772:	e7e0      	b.n	8007736 <__sccl+0x32>

08007774 <_strtol_l.constprop.0>:
 8007774:	2b01      	cmp	r3, #1
 8007776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800777a:	d001      	beq.n	8007780 <_strtol_l.constprop.0+0xc>
 800777c:	2b24      	cmp	r3, #36	; 0x24
 800777e:	d906      	bls.n	800778e <_strtol_l.constprop.0+0x1a>
 8007780:	f7fd faa2 	bl	8004cc8 <__errno>
 8007784:	2316      	movs	r3, #22
 8007786:	6003      	str	r3, [r0, #0]
 8007788:	2000      	movs	r0, #0
 800778a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800778e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007874 <_strtol_l.constprop.0+0x100>
 8007792:	460d      	mov	r5, r1
 8007794:	462e      	mov	r6, r5
 8007796:	f815 4b01 	ldrb.w	r4, [r5], #1
 800779a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800779e:	f017 0708 	ands.w	r7, r7, #8
 80077a2:	d1f7      	bne.n	8007794 <_strtol_l.constprop.0+0x20>
 80077a4:	2c2d      	cmp	r4, #45	; 0x2d
 80077a6:	d132      	bne.n	800780e <_strtol_l.constprop.0+0x9a>
 80077a8:	782c      	ldrb	r4, [r5, #0]
 80077aa:	2701      	movs	r7, #1
 80077ac:	1cb5      	adds	r5, r6, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d05b      	beq.n	800786a <_strtol_l.constprop.0+0xf6>
 80077b2:	2b10      	cmp	r3, #16
 80077b4:	d109      	bne.n	80077ca <_strtol_l.constprop.0+0x56>
 80077b6:	2c30      	cmp	r4, #48	; 0x30
 80077b8:	d107      	bne.n	80077ca <_strtol_l.constprop.0+0x56>
 80077ba:	782c      	ldrb	r4, [r5, #0]
 80077bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80077c0:	2c58      	cmp	r4, #88	; 0x58
 80077c2:	d14d      	bne.n	8007860 <_strtol_l.constprop.0+0xec>
 80077c4:	786c      	ldrb	r4, [r5, #1]
 80077c6:	2310      	movs	r3, #16
 80077c8:	3502      	adds	r5, #2
 80077ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80077ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80077d2:	f04f 0c00 	mov.w	ip, #0
 80077d6:	fbb8 f9f3 	udiv	r9, r8, r3
 80077da:	4666      	mov	r6, ip
 80077dc:	fb03 8a19 	mls	sl, r3, r9, r8
 80077e0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80077e4:	f1be 0f09 	cmp.w	lr, #9
 80077e8:	d816      	bhi.n	8007818 <_strtol_l.constprop.0+0xa4>
 80077ea:	4674      	mov	r4, lr
 80077ec:	42a3      	cmp	r3, r4
 80077ee:	dd24      	ble.n	800783a <_strtol_l.constprop.0+0xc6>
 80077f0:	f1bc 0f00 	cmp.w	ip, #0
 80077f4:	db1e      	blt.n	8007834 <_strtol_l.constprop.0+0xc0>
 80077f6:	45b1      	cmp	r9, r6
 80077f8:	d31c      	bcc.n	8007834 <_strtol_l.constprop.0+0xc0>
 80077fa:	d101      	bne.n	8007800 <_strtol_l.constprop.0+0x8c>
 80077fc:	45a2      	cmp	sl, r4
 80077fe:	db19      	blt.n	8007834 <_strtol_l.constprop.0+0xc0>
 8007800:	fb06 4603 	mla	r6, r6, r3, r4
 8007804:	f04f 0c01 	mov.w	ip, #1
 8007808:	f815 4b01 	ldrb.w	r4, [r5], #1
 800780c:	e7e8      	b.n	80077e0 <_strtol_l.constprop.0+0x6c>
 800780e:	2c2b      	cmp	r4, #43	; 0x2b
 8007810:	bf04      	itt	eq
 8007812:	782c      	ldrbeq	r4, [r5, #0]
 8007814:	1cb5      	addeq	r5, r6, #2
 8007816:	e7ca      	b.n	80077ae <_strtol_l.constprop.0+0x3a>
 8007818:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800781c:	f1be 0f19 	cmp.w	lr, #25
 8007820:	d801      	bhi.n	8007826 <_strtol_l.constprop.0+0xb2>
 8007822:	3c37      	subs	r4, #55	; 0x37
 8007824:	e7e2      	b.n	80077ec <_strtol_l.constprop.0+0x78>
 8007826:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800782a:	f1be 0f19 	cmp.w	lr, #25
 800782e:	d804      	bhi.n	800783a <_strtol_l.constprop.0+0xc6>
 8007830:	3c57      	subs	r4, #87	; 0x57
 8007832:	e7db      	b.n	80077ec <_strtol_l.constprop.0+0x78>
 8007834:	f04f 3cff 	mov.w	ip, #4294967295
 8007838:	e7e6      	b.n	8007808 <_strtol_l.constprop.0+0x94>
 800783a:	f1bc 0f00 	cmp.w	ip, #0
 800783e:	da05      	bge.n	800784c <_strtol_l.constprop.0+0xd8>
 8007840:	2322      	movs	r3, #34	; 0x22
 8007842:	6003      	str	r3, [r0, #0]
 8007844:	4646      	mov	r6, r8
 8007846:	b942      	cbnz	r2, 800785a <_strtol_l.constprop.0+0xe6>
 8007848:	4630      	mov	r0, r6
 800784a:	e79e      	b.n	800778a <_strtol_l.constprop.0+0x16>
 800784c:	b107      	cbz	r7, 8007850 <_strtol_l.constprop.0+0xdc>
 800784e:	4276      	negs	r6, r6
 8007850:	2a00      	cmp	r2, #0
 8007852:	d0f9      	beq.n	8007848 <_strtol_l.constprop.0+0xd4>
 8007854:	f1bc 0f00 	cmp.w	ip, #0
 8007858:	d000      	beq.n	800785c <_strtol_l.constprop.0+0xe8>
 800785a:	1e69      	subs	r1, r5, #1
 800785c:	6011      	str	r1, [r2, #0]
 800785e:	e7f3      	b.n	8007848 <_strtol_l.constprop.0+0xd4>
 8007860:	2430      	movs	r4, #48	; 0x30
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1b1      	bne.n	80077ca <_strtol_l.constprop.0+0x56>
 8007866:	2308      	movs	r3, #8
 8007868:	e7af      	b.n	80077ca <_strtol_l.constprop.0+0x56>
 800786a:	2c30      	cmp	r4, #48	; 0x30
 800786c:	d0a5      	beq.n	80077ba <_strtol_l.constprop.0+0x46>
 800786e:	230a      	movs	r3, #10
 8007870:	e7ab      	b.n	80077ca <_strtol_l.constprop.0+0x56>
 8007872:	bf00      	nop
 8007874:	080098cd 	.word	0x080098cd

08007878 <_strtol_r>:
 8007878:	f7ff bf7c 	b.w	8007774 <_strtol_l.constprop.0>

0800787c <_strtoul_l.constprop.0>:
 800787c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007880:	4f36      	ldr	r7, [pc, #216]	; (800795c <_strtoul_l.constprop.0+0xe0>)
 8007882:	4686      	mov	lr, r0
 8007884:	460d      	mov	r5, r1
 8007886:	4628      	mov	r0, r5
 8007888:	f815 4b01 	ldrb.w	r4, [r5], #1
 800788c:	5de6      	ldrb	r6, [r4, r7]
 800788e:	f016 0608 	ands.w	r6, r6, #8
 8007892:	d1f8      	bne.n	8007886 <_strtoul_l.constprop.0+0xa>
 8007894:	2c2d      	cmp	r4, #45	; 0x2d
 8007896:	d12f      	bne.n	80078f8 <_strtoul_l.constprop.0+0x7c>
 8007898:	782c      	ldrb	r4, [r5, #0]
 800789a:	2601      	movs	r6, #1
 800789c:	1c85      	adds	r5, r0, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d057      	beq.n	8007952 <_strtoul_l.constprop.0+0xd6>
 80078a2:	2b10      	cmp	r3, #16
 80078a4:	d109      	bne.n	80078ba <_strtoul_l.constprop.0+0x3e>
 80078a6:	2c30      	cmp	r4, #48	; 0x30
 80078a8:	d107      	bne.n	80078ba <_strtoul_l.constprop.0+0x3e>
 80078aa:	7828      	ldrb	r0, [r5, #0]
 80078ac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80078b0:	2858      	cmp	r0, #88	; 0x58
 80078b2:	d149      	bne.n	8007948 <_strtoul_l.constprop.0+0xcc>
 80078b4:	786c      	ldrb	r4, [r5, #1]
 80078b6:	2310      	movs	r3, #16
 80078b8:	3502      	adds	r5, #2
 80078ba:	f04f 38ff 	mov.w	r8, #4294967295
 80078be:	2700      	movs	r7, #0
 80078c0:	fbb8 f8f3 	udiv	r8, r8, r3
 80078c4:	fb03 f908 	mul.w	r9, r3, r8
 80078c8:	ea6f 0909 	mvn.w	r9, r9
 80078cc:	4638      	mov	r0, r7
 80078ce:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80078d2:	f1bc 0f09 	cmp.w	ip, #9
 80078d6:	d814      	bhi.n	8007902 <_strtoul_l.constprop.0+0x86>
 80078d8:	4664      	mov	r4, ip
 80078da:	42a3      	cmp	r3, r4
 80078dc:	dd22      	ble.n	8007924 <_strtoul_l.constprop.0+0xa8>
 80078de:	2f00      	cmp	r7, #0
 80078e0:	db1d      	blt.n	800791e <_strtoul_l.constprop.0+0xa2>
 80078e2:	4580      	cmp	r8, r0
 80078e4:	d31b      	bcc.n	800791e <_strtoul_l.constprop.0+0xa2>
 80078e6:	d101      	bne.n	80078ec <_strtoul_l.constprop.0+0x70>
 80078e8:	45a1      	cmp	r9, r4
 80078ea:	db18      	blt.n	800791e <_strtoul_l.constprop.0+0xa2>
 80078ec:	fb00 4003 	mla	r0, r0, r3, r4
 80078f0:	2701      	movs	r7, #1
 80078f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078f6:	e7ea      	b.n	80078ce <_strtoul_l.constprop.0+0x52>
 80078f8:	2c2b      	cmp	r4, #43	; 0x2b
 80078fa:	bf04      	itt	eq
 80078fc:	782c      	ldrbeq	r4, [r5, #0]
 80078fe:	1c85      	addeq	r5, r0, #2
 8007900:	e7cd      	b.n	800789e <_strtoul_l.constprop.0+0x22>
 8007902:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007906:	f1bc 0f19 	cmp.w	ip, #25
 800790a:	d801      	bhi.n	8007910 <_strtoul_l.constprop.0+0x94>
 800790c:	3c37      	subs	r4, #55	; 0x37
 800790e:	e7e4      	b.n	80078da <_strtoul_l.constprop.0+0x5e>
 8007910:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007914:	f1bc 0f19 	cmp.w	ip, #25
 8007918:	d804      	bhi.n	8007924 <_strtoul_l.constprop.0+0xa8>
 800791a:	3c57      	subs	r4, #87	; 0x57
 800791c:	e7dd      	b.n	80078da <_strtoul_l.constprop.0+0x5e>
 800791e:	f04f 37ff 	mov.w	r7, #4294967295
 8007922:	e7e6      	b.n	80078f2 <_strtoul_l.constprop.0+0x76>
 8007924:	2f00      	cmp	r7, #0
 8007926:	da07      	bge.n	8007938 <_strtoul_l.constprop.0+0xbc>
 8007928:	2322      	movs	r3, #34	; 0x22
 800792a:	f8ce 3000 	str.w	r3, [lr]
 800792e:	f04f 30ff 	mov.w	r0, #4294967295
 8007932:	b932      	cbnz	r2, 8007942 <_strtoul_l.constprop.0+0xc6>
 8007934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007938:	b106      	cbz	r6, 800793c <_strtoul_l.constprop.0+0xc0>
 800793a:	4240      	negs	r0, r0
 800793c:	2a00      	cmp	r2, #0
 800793e:	d0f9      	beq.n	8007934 <_strtoul_l.constprop.0+0xb8>
 8007940:	b107      	cbz	r7, 8007944 <_strtoul_l.constprop.0+0xc8>
 8007942:	1e69      	subs	r1, r5, #1
 8007944:	6011      	str	r1, [r2, #0]
 8007946:	e7f5      	b.n	8007934 <_strtoul_l.constprop.0+0xb8>
 8007948:	2430      	movs	r4, #48	; 0x30
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1b5      	bne.n	80078ba <_strtoul_l.constprop.0+0x3e>
 800794e:	2308      	movs	r3, #8
 8007950:	e7b3      	b.n	80078ba <_strtoul_l.constprop.0+0x3e>
 8007952:	2c30      	cmp	r4, #48	; 0x30
 8007954:	d0a9      	beq.n	80078aa <_strtoul_l.constprop.0+0x2e>
 8007956:	230a      	movs	r3, #10
 8007958:	e7af      	b.n	80078ba <_strtoul_l.constprop.0+0x3e>
 800795a:	bf00      	nop
 800795c:	080098cd 	.word	0x080098cd

08007960 <_strtoul_r>:
 8007960:	f7ff bf8c 	b.w	800787c <_strtoul_l.constprop.0>

08007964 <__submore>:
 8007964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007968:	460c      	mov	r4, r1
 800796a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800796c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007970:	4299      	cmp	r1, r3
 8007972:	d11d      	bne.n	80079b0 <__submore+0x4c>
 8007974:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007978:	f7fd fa4c 	bl	8004e14 <_malloc_r>
 800797c:	b918      	cbnz	r0, 8007986 <__submore+0x22>
 800797e:	f04f 30ff 	mov.w	r0, #4294967295
 8007982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800798a:	63a3      	str	r3, [r4, #56]	; 0x38
 800798c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007990:	6360      	str	r0, [r4, #52]	; 0x34
 8007992:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007996:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800799a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800799e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80079a2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80079a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80079aa:	6020      	str	r0, [r4, #0]
 80079ac:	2000      	movs	r0, #0
 80079ae:	e7e8      	b.n	8007982 <__submore+0x1e>
 80079b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80079b2:	0077      	lsls	r7, r6, #1
 80079b4:	463a      	mov	r2, r7
 80079b6:	f000 fa25 	bl	8007e04 <_realloc_r>
 80079ba:	4605      	mov	r5, r0
 80079bc:	2800      	cmp	r0, #0
 80079be:	d0de      	beq.n	800797e <__submore+0x1a>
 80079c0:	eb00 0806 	add.w	r8, r0, r6
 80079c4:	4601      	mov	r1, r0
 80079c6:	4632      	mov	r2, r6
 80079c8:	4640      	mov	r0, r8
 80079ca:	f7fe fe55 	bl	8006678 <memcpy>
 80079ce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80079d2:	f8c4 8000 	str.w	r8, [r4]
 80079d6:	e7e9      	b.n	80079ac <__submore+0x48>

080079d8 <__assert_func>:
 80079d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079da:	4614      	mov	r4, r2
 80079dc:	461a      	mov	r2, r3
 80079de:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <__assert_func+0x2c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4605      	mov	r5, r0
 80079e4:	68d8      	ldr	r0, [r3, #12]
 80079e6:	b14c      	cbz	r4, 80079fc <__assert_func+0x24>
 80079e8:	4b07      	ldr	r3, [pc, #28]	; (8007a08 <__assert_func+0x30>)
 80079ea:	9100      	str	r1, [sp, #0]
 80079ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079f0:	4906      	ldr	r1, [pc, #24]	; (8007a0c <__assert_func+0x34>)
 80079f2:	462b      	mov	r3, r5
 80079f4:	f000 f9a6 	bl	8007d44 <fiprintf>
 80079f8:	f000 fc5a 	bl	80082b0 <abort>
 80079fc:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <__assert_func+0x38>)
 80079fe:	461c      	mov	r4, r3
 8007a00:	e7f3      	b.n	80079ea <__assert_func+0x12>
 8007a02:	bf00      	nop
 8007a04:	20000008 	.word	0x20000008
 8007a08:	08009890 	.word	0x08009890
 8007a0c:	0800989d 	.word	0x0800989d
 8007a10:	080098cb 	.word	0x080098cb

08007a14 <__sflush_r>:
 8007a14:	898a      	ldrh	r2, [r1, #12]
 8007a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a1a:	4605      	mov	r5, r0
 8007a1c:	0710      	lsls	r0, r2, #28
 8007a1e:	460c      	mov	r4, r1
 8007a20:	d458      	bmi.n	8007ad4 <__sflush_r+0xc0>
 8007a22:	684b      	ldr	r3, [r1, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	dc05      	bgt.n	8007a34 <__sflush_r+0x20>
 8007a28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	dc02      	bgt.n	8007a34 <__sflush_r+0x20>
 8007a2e:	2000      	movs	r0, #0
 8007a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a36:	2e00      	cmp	r6, #0
 8007a38:	d0f9      	beq.n	8007a2e <__sflush_r+0x1a>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a40:	682f      	ldr	r7, [r5, #0]
 8007a42:	602b      	str	r3, [r5, #0]
 8007a44:	d032      	beq.n	8007aac <__sflush_r+0x98>
 8007a46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	075a      	lsls	r2, r3, #29
 8007a4c:	d505      	bpl.n	8007a5a <__sflush_r+0x46>
 8007a4e:	6863      	ldr	r3, [r4, #4]
 8007a50:	1ac0      	subs	r0, r0, r3
 8007a52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a54:	b10b      	cbz	r3, 8007a5a <__sflush_r+0x46>
 8007a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a58:	1ac0      	subs	r0, r0, r3
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a60:	6a21      	ldr	r1, [r4, #32]
 8007a62:	4628      	mov	r0, r5
 8007a64:	47b0      	blx	r6
 8007a66:	1c43      	adds	r3, r0, #1
 8007a68:	89a3      	ldrh	r3, [r4, #12]
 8007a6a:	d106      	bne.n	8007a7a <__sflush_r+0x66>
 8007a6c:	6829      	ldr	r1, [r5, #0]
 8007a6e:	291d      	cmp	r1, #29
 8007a70:	d82c      	bhi.n	8007acc <__sflush_r+0xb8>
 8007a72:	4a2a      	ldr	r2, [pc, #168]	; (8007b1c <__sflush_r+0x108>)
 8007a74:	40ca      	lsrs	r2, r1
 8007a76:	07d6      	lsls	r6, r2, #31
 8007a78:	d528      	bpl.n	8007acc <__sflush_r+0xb8>
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	6062      	str	r2, [r4, #4]
 8007a7e:	04d9      	lsls	r1, r3, #19
 8007a80:	6922      	ldr	r2, [r4, #16]
 8007a82:	6022      	str	r2, [r4, #0]
 8007a84:	d504      	bpl.n	8007a90 <__sflush_r+0x7c>
 8007a86:	1c42      	adds	r2, r0, #1
 8007a88:	d101      	bne.n	8007a8e <__sflush_r+0x7a>
 8007a8a:	682b      	ldr	r3, [r5, #0]
 8007a8c:	b903      	cbnz	r3, 8007a90 <__sflush_r+0x7c>
 8007a8e:	6560      	str	r0, [r4, #84]	; 0x54
 8007a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a92:	602f      	str	r7, [r5, #0]
 8007a94:	2900      	cmp	r1, #0
 8007a96:	d0ca      	beq.n	8007a2e <__sflush_r+0x1a>
 8007a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a9c:	4299      	cmp	r1, r3
 8007a9e:	d002      	beq.n	8007aa6 <__sflush_r+0x92>
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f7fd f94b 	bl	8004d3c <_free_r>
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	6360      	str	r0, [r4, #52]	; 0x34
 8007aaa:	e7c1      	b.n	8007a30 <__sflush_r+0x1c>
 8007aac:	6a21      	ldr	r1, [r4, #32]
 8007aae:	2301      	movs	r3, #1
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	47b0      	blx	r6
 8007ab4:	1c41      	adds	r1, r0, #1
 8007ab6:	d1c7      	bne.n	8007a48 <__sflush_r+0x34>
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0c4      	beq.n	8007a48 <__sflush_r+0x34>
 8007abe:	2b1d      	cmp	r3, #29
 8007ac0:	d001      	beq.n	8007ac6 <__sflush_r+0xb2>
 8007ac2:	2b16      	cmp	r3, #22
 8007ac4:	d101      	bne.n	8007aca <__sflush_r+0xb6>
 8007ac6:	602f      	str	r7, [r5, #0]
 8007ac8:	e7b1      	b.n	8007a2e <__sflush_r+0x1a>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad0:	81a3      	strh	r3, [r4, #12]
 8007ad2:	e7ad      	b.n	8007a30 <__sflush_r+0x1c>
 8007ad4:	690f      	ldr	r7, [r1, #16]
 8007ad6:	2f00      	cmp	r7, #0
 8007ad8:	d0a9      	beq.n	8007a2e <__sflush_r+0x1a>
 8007ada:	0793      	lsls	r3, r2, #30
 8007adc:	680e      	ldr	r6, [r1, #0]
 8007ade:	bf08      	it	eq
 8007ae0:	694b      	ldreq	r3, [r1, #20]
 8007ae2:	600f      	str	r7, [r1, #0]
 8007ae4:	bf18      	it	ne
 8007ae6:	2300      	movne	r3, #0
 8007ae8:	eba6 0807 	sub.w	r8, r6, r7
 8007aec:	608b      	str	r3, [r1, #8]
 8007aee:	f1b8 0f00 	cmp.w	r8, #0
 8007af2:	dd9c      	ble.n	8007a2e <__sflush_r+0x1a>
 8007af4:	6a21      	ldr	r1, [r4, #32]
 8007af6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007af8:	4643      	mov	r3, r8
 8007afa:	463a      	mov	r2, r7
 8007afc:	4628      	mov	r0, r5
 8007afe:	47b0      	blx	r6
 8007b00:	2800      	cmp	r0, #0
 8007b02:	dc06      	bgt.n	8007b12 <__sflush_r+0xfe>
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b0a:	81a3      	strh	r3, [r4, #12]
 8007b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b10:	e78e      	b.n	8007a30 <__sflush_r+0x1c>
 8007b12:	4407      	add	r7, r0
 8007b14:	eba8 0800 	sub.w	r8, r8, r0
 8007b18:	e7e9      	b.n	8007aee <__sflush_r+0xda>
 8007b1a:	bf00      	nop
 8007b1c:	20400001 	.word	0x20400001

08007b20 <_fflush_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	690b      	ldr	r3, [r1, #16]
 8007b24:	4605      	mov	r5, r0
 8007b26:	460c      	mov	r4, r1
 8007b28:	b913      	cbnz	r3, 8007b30 <_fflush_r+0x10>
 8007b2a:	2500      	movs	r5, #0
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
 8007b30:	b118      	cbz	r0, 8007b3a <_fflush_r+0x1a>
 8007b32:	6983      	ldr	r3, [r0, #24]
 8007b34:	b90b      	cbnz	r3, 8007b3a <_fflush_r+0x1a>
 8007b36:	f000 f887 	bl	8007c48 <__sinit>
 8007b3a:	4b14      	ldr	r3, [pc, #80]	; (8007b8c <_fflush_r+0x6c>)
 8007b3c:	429c      	cmp	r4, r3
 8007b3e:	d11b      	bne.n	8007b78 <_fflush_r+0x58>
 8007b40:	686c      	ldr	r4, [r5, #4]
 8007b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d0ef      	beq.n	8007b2a <_fflush_r+0xa>
 8007b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b4c:	07d0      	lsls	r0, r2, #31
 8007b4e:	d404      	bmi.n	8007b5a <_fflush_r+0x3a>
 8007b50:	0599      	lsls	r1, r3, #22
 8007b52:	d402      	bmi.n	8007b5a <_fflush_r+0x3a>
 8007b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b56:	f000 f927 	bl	8007da8 <__retarget_lock_acquire_recursive>
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	f7ff ff59 	bl	8007a14 <__sflush_r>
 8007b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b64:	07da      	lsls	r2, r3, #31
 8007b66:	4605      	mov	r5, r0
 8007b68:	d4e0      	bmi.n	8007b2c <_fflush_r+0xc>
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	059b      	lsls	r3, r3, #22
 8007b6e:	d4dd      	bmi.n	8007b2c <_fflush_r+0xc>
 8007b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b72:	f000 f91a 	bl	8007daa <__retarget_lock_release_recursive>
 8007b76:	e7d9      	b.n	8007b2c <_fflush_r+0xc>
 8007b78:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <_fflush_r+0x70>)
 8007b7a:	429c      	cmp	r4, r3
 8007b7c:	d101      	bne.n	8007b82 <_fflush_r+0x62>
 8007b7e:	68ac      	ldr	r4, [r5, #8]
 8007b80:	e7df      	b.n	8007b42 <_fflush_r+0x22>
 8007b82:	4b04      	ldr	r3, [pc, #16]	; (8007b94 <_fflush_r+0x74>)
 8007b84:	429c      	cmp	r4, r3
 8007b86:	bf08      	it	eq
 8007b88:	68ec      	ldreq	r4, [r5, #12]
 8007b8a:	e7da      	b.n	8007b42 <_fflush_r+0x22>
 8007b8c:	080099f0 	.word	0x080099f0
 8007b90:	08009a10 	.word	0x08009a10
 8007b94:	080099d0 	.word	0x080099d0

08007b98 <std>:
 8007b98:	2300      	movs	r3, #0
 8007b9a:	b510      	push	{r4, lr}
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8007ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ba6:	6083      	str	r3, [r0, #8]
 8007ba8:	8181      	strh	r1, [r0, #12]
 8007baa:	6643      	str	r3, [r0, #100]	; 0x64
 8007bac:	81c2      	strh	r2, [r0, #14]
 8007bae:	6183      	str	r3, [r0, #24]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	2208      	movs	r2, #8
 8007bb4:	305c      	adds	r0, #92	; 0x5c
 8007bb6:	f7fd f8b9 	bl	8004d2c <memset>
 8007bba:	4b05      	ldr	r3, [pc, #20]	; (8007bd0 <std+0x38>)
 8007bbc:	6263      	str	r3, [r4, #36]	; 0x24
 8007bbe:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <std+0x3c>)
 8007bc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bc2:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <std+0x40>)
 8007bc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bc6:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <std+0x44>)
 8007bc8:	6224      	str	r4, [r4, #32]
 8007bca:	6323      	str	r3, [r4, #48]	; 0x30
 8007bcc:	bd10      	pop	{r4, pc}
 8007bce:	bf00      	nop
 8007bd0:	08005889 	.word	0x08005889
 8007bd4:	080058af 	.word	0x080058af
 8007bd8:	080058e7 	.word	0x080058e7
 8007bdc:	0800590b 	.word	0x0800590b

08007be0 <_cleanup_r>:
 8007be0:	4901      	ldr	r1, [pc, #4]	; (8007be8 <_cleanup_r+0x8>)
 8007be2:	f000 b8c1 	b.w	8007d68 <_fwalk_reent>
 8007be6:	bf00      	nop
 8007be8:	08007b21 	.word	0x08007b21

08007bec <__sfmoreglue>:
 8007bec:	b570      	push	{r4, r5, r6, lr}
 8007bee:	2268      	movs	r2, #104	; 0x68
 8007bf0:	1e4d      	subs	r5, r1, #1
 8007bf2:	4355      	muls	r5, r2
 8007bf4:	460e      	mov	r6, r1
 8007bf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bfa:	f7fd f90b 	bl	8004e14 <_malloc_r>
 8007bfe:	4604      	mov	r4, r0
 8007c00:	b140      	cbz	r0, 8007c14 <__sfmoreglue+0x28>
 8007c02:	2100      	movs	r1, #0
 8007c04:	e9c0 1600 	strd	r1, r6, [r0]
 8007c08:	300c      	adds	r0, #12
 8007c0a:	60a0      	str	r0, [r4, #8]
 8007c0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c10:	f7fd f88c 	bl	8004d2c <memset>
 8007c14:	4620      	mov	r0, r4
 8007c16:	bd70      	pop	{r4, r5, r6, pc}

08007c18 <__sfp_lock_acquire>:
 8007c18:	4801      	ldr	r0, [pc, #4]	; (8007c20 <__sfp_lock_acquire+0x8>)
 8007c1a:	f000 b8c5 	b.w	8007da8 <__retarget_lock_acquire_recursive>
 8007c1e:	bf00      	nop
 8007c20:	20011a99 	.word	0x20011a99

08007c24 <__sfp_lock_release>:
 8007c24:	4801      	ldr	r0, [pc, #4]	; (8007c2c <__sfp_lock_release+0x8>)
 8007c26:	f000 b8c0 	b.w	8007daa <__retarget_lock_release_recursive>
 8007c2a:	bf00      	nop
 8007c2c:	20011a99 	.word	0x20011a99

08007c30 <__sinit_lock_acquire>:
 8007c30:	4801      	ldr	r0, [pc, #4]	; (8007c38 <__sinit_lock_acquire+0x8>)
 8007c32:	f000 b8b9 	b.w	8007da8 <__retarget_lock_acquire_recursive>
 8007c36:	bf00      	nop
 8007c38:	20011a9a 	.word	0x20011a9a

08007c3c <__sinit_lock_release>:
 8007c3c:	4801      	ldr	r0, [pc, #4]	; (8007c44 <__sinit_lock_release+0x8>)
 8007c3e:	f000 b8b4 	b.w	8007daa <__retarget_lock_release_recursive>
 8007c42:	bf00      	nop
 8007c44:	20011a9a 	.word	0x20011a9a

08007c48 <__sinit>:
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	f7ff fff0 	bl	8007c30 <__sinit_lock_acquire>
 8007c50:	69a3      	ldr	r3, [r4, #24]
 8007c52:	b11b      	cbz	r3, 8007c5c <__sinit+0x14>
 8007c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c58:	f7ff bff0 	b.w	8007c3c <__sinit_lock_release>
 8007c5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c60:	6523      	str	r3, [r4, #80]	; 0x50
 8007c62:	4b13      	ldr	r3, [pc, #76]	; (8007cb0 <__sinit+0x68>)
 8007c64:	4a13      	ldr	r2, [pc, #76]	; (8007cb4 <__sinit+0x6c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c6a:	42a3      	cmp	r3, r4
 8007c6c:	bf04      	itt	eq
 8007c6e:	2301      	moveq	r3, #1
 8007c70:	61a3      	streq	r3, [r4, #24]
 8007c72:	4620      	mov	r0, r4
 8007c74:	f000 f820 	bl	8007cb8 <__sfp>
 8007c78:	6060      	str	r0, [r4, #4]
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f000 f81c 	bl	8007cb8 <__sfp>
 8007c80:	60a0      	str	r0, [r4, #8]
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 f818 	bl	8007cb8 <__sfp>
 8007c88:	2200      	movs	r2, #0
 8007c8a:	60e0      	str	r0, [r4, #12]
 8007c8c:	2104      	movs	r1, #4
 8007c8e:	6860      	ldr	r0, [r4, #4]
 8007c90:	f7ff ff82 	bl	8007b98 <std>
 8007c94:	68a0      	ldr	r0, [r4, #8]
 8007c96:	2201      	movs	r2, #1
 8007c98:	2109      	movs	r1, #9
 8007c9a:	f7ff ff7d 	bl	8007b98 <std>
 8007c9e:	68e0      	ldr	r0, [r4, #12]
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	2112      	movs	r1, #18
 8007ca4:	f7ff ff78 	bl	8007b98 <std>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	61a3      	str	r3, [r4, #24]
 8007cac:	e7d2      	b.n	8007c54 <__sinit+0xc>
 8007cae:	bf00      	nop
 8007cb0:	08009640 	.word	0x08009640
 8007cb4:	08007be1 	.word	0x08007be1

08007cb8 <__sfp>:
 8007cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cba:	4607      	mov	r7, r0
 8007cbc:	f7ff ffac 	bl	8007c18 <__sfp_lock_acquire>
 8007cc0:	4b1e      	ldr	r3, [pc, #120]	; (8007d3c <__sfp+0x84>)
 8007cc2:	681e      	ldr	r6, [r3, #0]
 8007cc4:	69b3      	ldr	r3, [r6, #24]
 8007cc6:	b913      	cbnz	r3, 8007cce <__sfp+0x16>
 8007cc8:	4630      	mov	r0, r6
 8007cca:	f7ff ffbd 	bl	8007c48 <__sinit>
 8007cce:	3648      	adds	r6, #72	; 0x48
 8007cd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	d503      	bpl.n	8007ce0 <__sfp+0x28>
 8007cd8:	6833      	ldr	r3, [r6, #0]
 8007cda:	b30b      	cbz	r3, 8007d20 <__sfp+0x68>
 8007cdc:	6836      	ldr	r6, [r6, #0]
 8007cde:	e7f7      	b.n	8007cd0 <__sfp+0x18>
 8007ce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ce4:	b9d5      	cbnz	r5, 8007d1c <__sfp+0x64>
 8007ce6:	4b16      	ldr	r3, [pc, #88]	; (8007d40 <__sfp+0x88>)
 8007ce8:	60e3      	str	r3, [r4, #12]
 8007cea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cee:	6665      	str	r5, [r4, #100]	; 0x64
 8007cf0:	f000 f859 	bl	8007da6 <__retarget_lock_init_recursive>
 8007cf4:	f7ff ff96 	bl	8007c24 <__sfp_lock_release>
 8007cf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d00:	6025      	str	r5, [r4, #0]
 8007d02:	61a5      	str	r5, [r4, #24]
 8007d04:	2208      	movs	r2, #8
 8007d06:	4629      	mov	r1, r5
 8007d08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d0c:	f7fd f80e 	bl	8004d2c <memset>
 8007d10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d18:	4620      	mov	r0, r4
 8007d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d1c:	3468      	adds	r4, #104	; 0x68
 8007d1e:	e7d9      	b.n	8007cd4 <__sfp+0x1c>
 8007d20:	2104      	movs	r1, #4
 8007d22:	4638      	mov	r0, r7
 8007d24:	f7ff ff62 	bl	8007bec <__sfmoreglue>
 8007d28:	4604      	mov	r4, r0
 8007d2a:	6030      	str	r0, [r6, #0]
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d1d5      	bne.n	8007cdc <__sfp+0x24>
 8007d30:	f7ff ff78 	bl	8007c24 <__sfp_lock_release>
 8007d34:	230c      	movs	r3, #12
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	e7ee      	b.n	8007d18 <__sfp+0x60>
 8007d3a:	bf00      	nop
 8007d3c:	08009640 	.word	0x08009640
 8007d40:	ffff0001 	.word	0xffff0001

08007d44 <fiprintf>:
 8007d44:	b40e      	push	{r1, r2, r3}
 8007d46:	b503      	push	{r0, r1, lr}
 8007d48:	4601      	mov	r1, r0
 8007d4a:	ab03      	add	r3, sp, #12
 8007d4c:	4805      	ldr	r0, [pc, #20]	; (8007d64 <fiprintf+0x20>)
 8007d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d52:	6800      	ldr	r0, [r0, #0]
 8007d54:	9301      	str	r3, [sp, #4]
 8007d56:	f000 f8ad 	bl	8007eb4 <_vfiprintf_r>
 8007d5a:	b002      	add	sp, #8
 8007d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d60:	b003      	add	sp, #12
 8007d62:	4770      	bx	lr
 8007d64:	20000008 	.word	0x20000008

08007d68 <_fwalk_reent>:
 8007d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d6c:	4606      	mov	r6, r0
 8007d6e:	4688      	mov	r8, r1
 8007d70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d74:	2700      	movs	r7, #0
 8007d76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d7a:	f1b9 0901 	subs.w	r9, r9, #1
 8007d7e:	d505      	bpl.n	8007d8c <_fwalk_reent+0x24>
 8007d80:	6824      	ldr	r4, [r4, #0]
 8007d82:	2c00      	cmp	r4, #0
 8007d84:	d1f7      	bne.n	8007d76 <_fwalk_reent+0xe>
 8007d86:	4638      	mov	r0, r7
 8007d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d8c:	89ab      	ldrh	r3, [r5, #12]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d907      	bls.n	8007da2 <_fwalk_reent+0x3a>
 8007d92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d96:	3301      	adds	r3, #1
 8007d98:	d003      	beq.n	8007da2 <_fwalk_reent+0x3a>
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	47c0      	blx	r8
 8007da0:	4307      	orrs	r7, r0
 8007da2:	3568      	adds	r5, #104	; 0x68
 8007da4:	e7e9      	b.n	8007d7a <_fwalk_reent+0x12>

08007da6 <__retarget_lock_init_recursive>:
 8007da6:	4770      	bx	lr

08007da8 <__retarget_lock_acquire_recursive>:
 8007da8:	4770      	bx	lr

08007daa <__retarget_lock_release_recursive>:
 8007daa:	4770      	bx	lr

08007dac <__ascii_mbtowc>:
 8007dac:	b082      	sub	sp, #8
 8007dae:	b901      	cbnz	r1, 8007db2 <__ascii_mbtowc+0x6>
 8007db0:	a901      	add	r1, sp, #4
 8007db2:	b142      	cbz	r2, 8007dc6 <__ascii_mbtowc+0x1a>
 8007db4:	b14b      	cbz	r3, 8007dca <__ascii_mbtowc+0x1e>
 8007db6:	7813      	ldrb	r3, [r2, #0]
 8007db8:	600b      	str	r3, [r1, #0]
 8007dba:	7812      	ldrb	r2, [r2, #0]
 8007dbc:	1e10      	subs	r0, r2, #0
 8007dbe:	bf18      	it	ne
 8007dc0:	2001      	movne	r0, #1
 8007dc2:	b002      	add	sp, #8
 8007dc4:	4770      	bx	lr
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	e7fb      	b.n	8007dc2 <__ascii_mbtowc+0x16>
 8007dca:	f06f 0001 	mvn.w	r0, #1
 8007dce:	e7f8      	b.n	8007dc2 <__ascii_mbtowc+0x16>

08007dd0 <memmove>:
 8007dd0:	4288      	cmp	r0, r1
 8007dd2:	b510      	push	{r4, lr}
 8007dd4:	eb01 0402 	add.w	r4, r1, r2
 8007dd8:	d902      	bls.n	8007de0 <memmove+0x10>
 8007dda:	4284      	cmp	r4, r0
 8007ddc:	4623      	mov	r3, r4
 8007dde:	d807      	bhi.n	8007df0 <memmove+0x20>
 8007de0:	1e43      	subs	r3, r0, #1
 8007de2:	42a1      	cmp	r1, r4
 8007de4:	d008      	beq.n	8007df8 <memmove+0x28>
 8007de6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dee:	e7f8      	b.n	8007de2 <memmove+0x12>
 8007df0:	4402      	add	r2, r0
 8007df2:	4601      	mov	r1, r0
 8007df4:	428a      	cmp	r2, r1
 8007df6:	d100      	bne.n	8007dfa <memmove+0x2a>
 8007df8:	bd10      	pop	{r4, pc}
 8007dfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e02:	e7f7      	b.n	8007df4 <memmove+0x24>

08007e04 <_realloc_r>:
 8007e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e08:	4680      	mov	r8, r0
 8007e0a:	4614      	mov	r4, r2
 8007e0c:	460e      	mov	r6, r1
 8007e0e:	b921      	cbnz	r1, 8007e1a <_realloc_r+0x16>
 8007e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e14:	4611      	mov	r1, r2
 8007e16:	f7fc bffd 	b.w	8004e14 <_malloc_r>
 8007e1a:	b92a      	cbnz	r2, 8007e28 <_realloc_r+0x24>
 8007e1c:	f7fc ff8e 	bl	8004d3c <_free_r>
 8007e20:	4625      	mov	r5, r4
 8007e22:	4628      	mov	r0, r5
 8007e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e28:	f000 faae 	bl	8008388 <_malloc_usable_size_r>
 8007e2c:	4284      	cmp	r4, r0
 8007e2e:	4607      	mov	r7, r0
 8007e30:	d802      	bhi.n	8007e38 <_realloc_r+0x34>
 8007e32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e36:	d812      	bhi.n	8007e5e <_realloc_r+0x5a>
 8007e38:	4621      	mov	r1, r4
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	f7fc ffea 	bl	8004e14 <_malloc_r>
 8007e40:	4605      	mov	r5, r0
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d0ed      	beq.n	8007e22 <_realloc_r+0x1e>
 8007e46:	42bc      	cmp	r4, r7
 8007e48:	4622      	mov	r2, r4
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	bf28      	it	cs
 8007e4e:	463a      	movcs	r2, r7
 8007e50:	f7fe fc12 	bl	8006678 <memcpy>
 8007e54:	4631      	mov	r1, r6
 8007e56:	4640      	mov	r0, r8
 8007e58:	f7fc ff70 	bl	8004d3c <_free_r>
 8007e5c:	e7e1      	b.n	8007e22 <_realloc_r+0x1e>
 8007e5e:	4635      	mov	r5, r6
 8007e60:	e7df      	b.n	8007e22 <_realloc_r+0x1e>

08007e62 <__sfputc_r>:
 8007e62:	6893      	ldr	r3, [r2, #8]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	b410      	push	{r4}
 8007e6a:	6093      	str	r3, [r2, #8]
 8007e6c:	da08      	bge.n	8007e80 <__sfputc_r+0x1e>
 8007e6e:	6994      	ldr	r4, [r2, #24]
 8007e70:	42a3      	cmp	r3, r4
 8007e72:	db01      	blt.n	8007e78 <__sfputc_r+0x16>
 8007e74:	290a      	cmp	r1, #10
 8007e76:	d103      	bne.n	8007e80 <__sfputc_r+0x1e>
 8007e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e7c:	f000 b94a 	b.w	8008114 <__swbuf_r>
 8007e80:	6813      	ldr	r3, [r2, #0]
 8007e82:	1c58      	adds	r0, r3, #1
 8007e84:	6010      	str	r0, [r2, #0]
 8007e86:	7019      	strb	r1, [r3, #0]
 8007e88:	4608      	mov	r0, r1
 8007e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <__sfputs_r>:
 8007e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e92:	4606      	mov	r6, r0
 8007e94:	460f      	mov	r7, r1
 8007e96:	4614      	mov	r4, r2
 8007e98:	18d5      	adds	r5, r2, r3
 8007e9a:	42ac      	cmp	r4, r5
 8007e9c:	d101      	bne.n	8007ea2 <__sfputs_r+0x12>
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	e007      	b.n	8007eb2 <__sfputs_r+0x22>
 8007ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea6:	463a      	mov	r2, r7
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f7ff ffda 	bl	8007e62 <__sfputc_r>
 8007eae:	1c43      	adds	r3, r0, #1
 8007eb0:	d1f3      	bne.n	8007e9a <__sfputs_r+0xa>
 8007eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007eb4 <_vfiprintf_r>:
 8007eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb8:	460d      	mov	r5, r1
 8007eba:	b09d      	sub	sp, #116	; 0x74
 8007ebc:	4614      	mov	r4, r2
 8007ebe:	4698      	mov	r8, r3
 8007ec0:	4606      	mov	r6, r0
 8007ec2:	b118      	cbz	r0, 8007ecc <_vfiprintf_r+0x18>
 8007ec4:	6983      	ldr	r3, [r0, #24]
 8007ec6:	b90b      	cbnz	r3, 8007ecc <_vfiprintf_r+0x18>
 8007ec8:	f7ff febe 	bl	8007c48 <__sinit>
 8007ecc:	4b89      	ldr	r3, [pc, #548]	; (80080f4 <_vfiprintf_r+0x240>)
 8007ece:	429d      	cmp	r5, r3
 8007ed0:	d11b      	bne.n	8007f0a <_vfiprintf_r+0x56>
 8007ed2:	6875      	ldr	r5, [r6, #4]
 8007ed4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ed6:	07d9      	lsls	r1, r3, #31
 8007ed8:	d405      	bmi.n	8007ee6 <_vfiprintf_r+0x32>
 8007eda:	89ab      	ldrh	r3, [r5, #12]
 8007edc:	059a      	lsls	r2, r3, #22
 8007ede:	d402      	bmi.n	8007ee6 <_vfiprintf_r+0x32>
 8007ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ee2:	f7ff ff61 	bl	8007da8 <__retarget_lock_acquire_recursive>
 8007ee6:	89ab      	ldrh	r3, [r5, #12]
 8007ee8:	071b      	lsls	r3, r3, #28
 8007eea:	d501      	bpl.n	8007ef0 <_vfiprintf_r+0x3c>
 8007eec:	692b      	ldr	r3, [r5, #16]
 8007eee:	b9eb      	cbnz	r3, 8007f2c <_vfiprintf_r+0x78>
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f000 f96e 	bl	80081d4 <__swsetup_r>
 8007ef8:	b1c0      	cbz	r0, 8007f2c <_vfiprintf_r+0x78>
 8007efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007efc:	07dc      	lsls	r4, r3, #31
 8007efe:	d50e      	bpl.n	8007f1e <_vfiprintf_r+0x6a>
 8007f00:	f04f 30ff 	mov.w	r0, #4294967295
 8007f04:	b01d      	add	sp, #116	; 0x74
 8007f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0a:	4b7b      	ldr	r3, [pc, #492]	; (80080f8 <_vfiprintf_r+0x244>)
 8007f0c:	429d      	cmp	r5, r3
 8007f0e:	d101      	bne.n	8007f14 <_vfiprintf_r+0x60>
 8007f10:	68b5      	ldr	r5, [r6, #8]
 8007f12:	e7df      	b.n	8007ed4 <_vfiprintf_r+0x20>
 8007f14:	4b79      	ldr	r3, [pc, #484]	; (80080fc <_vfiprintf_r+0x248>)
 8007f16:	429d      	cmp	r5, r3
 8007f18:	bf08      	it	eq
 8007f1a:	68f5      	ldreq	r5, [r6, #12]
 8007f1c:	e7da      	b.n	8007ed4 <_vfiprintf_r+0x20>
 8007f1e:	89ab      	ldrh	r3, [r5, #12]
 8007f20:	0598      	lsls	r0, r3, #22
 8007f22:	d4ed      	bmi.n	8007f00 <_vfiprintf_r+0x4c>
 8007f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f26:	f7ff ff40 	bl	8007daa <__retarget_lock_release_recursive>
 8007f2a:	e7e9      	b.n	8007f00 <_vfiprintf_r+0x4c>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f30:	2320      	movs	r3, #32
 8007f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f3a:	2330      	movs	r3, #48	; 0x30
 8007f3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008100 <_vfiprintf_r+0x24c>
 8007f40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f44:	f04f 0901 	mov.w	r9, #1
 8007f48:	4623      	mov	r3, r4
 8007f4a:	469a      	mov	sl, r3
 8007f4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f50:	b10a      	cbz	r2, 8007f56 <_vfiprintf_r+0xa2>
 8007f52:	2a25      	cmp	r2, #37	; 0x25
 8007f54:	d1f9      	bne.n	8007f4a <_vfiprintf_r+0x96>
 8007f56:	ebba 0b04 	subs.w	fp, sl, r4
 8007f5a:	d00b      	beq.n	8007f74 <_vfiprintf_r+0xc0>
 8007f5c:	465b      	mov	r3, fp
 8007f5e:	4622      	mov	r2, r4
 8007f60:	4629      	mov	r1, r5
 8007f62:	4630      	mov	r0, r6
 8007f64:	f7ff ff94 	bl	8007e90 <__sfputs_r>
 8007f68:	3001      	adds	r0, #1
 8007f6a:	f000 80aa 	beq.w	80080c2 <_vfiprintf_r+0x20e>
 8007f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f70:	445a      	add	r2, fp
 8007f72:	9209      	str	r2, [sp, #36]	; 0x24
 8007f74:	f89a 3000 	ldrb.w	r3, [sl]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 80a2 	beq.w	80080c2 <_vfiprintf_r+0x20e>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f04f 32ff 	mov.w	r2, #4294967295
 8007f84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f88:	f10a 0a01 	add.w	sl, sl, #1
 8007f8c:	9304      	str	r3, [sp, #16]
 8007f8e:	9307      	str	r3, [sp, #28]
 8007f90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f94:	931a      	str	r3, [sp, #104]	; 0x68
 8007f96:	4654      	mov	r4, sl
 8007f98:	2205      	movs	r2, #5
 8007f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f9e:	4858      	ldr	r0, [pc, #352]	; (8008100 <_vfiprintf_r+0x24c>)
 8007fa0:	f7f8 f936 	bl	8000210 <memchr>
 8007fa4:	9a04      	ldr	r2, [sp, #16]
 8007fa6:	b9d8      	cbnz	r0, 8007fe0 <_vfiprintf_r+0x12c>
 8007fa8:	06d1      	lsls	r1, r2, #27
 8007faa:	bf44      	itt	mi
 8007fac:	2320      	movmi	r3, #32
 8007fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fb2:	0713      	lsls	r3, r2, #28
 8007fb4:	bf44      	itt	mi
 8007fb6:	232b      	movmi	r3, #43	; 0x2b
 8007fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fc2:	d015      	beq.n	8007ff0 <_vfiprintf_r+0x13c>
 8007fc4:	9a07      	ldr	r2, [sp, #28]
 8007fc6:	4654      	mov	r4, sl
 8007fc8:	2000      	movs	r0, #0
 8007fca:	f04f 0c0a 	mov.w	ip, #10
 8007fce:	4621      	mov	r1, r4
 8007fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fd4:	3b30      	subs	r3, #48	; 0x30
 8007fd6:	2b09      	cmp	r3, #9
 8007fd8:	d94e      	bls.n	8008078 <_vfiprintf_r+0x1c4>
 8007fda:	b1b0      	cbz	r0, 800800a <_vfiprintf_r+0x156>
 8007fdc:	9207      	str	r2, [sp, #28]
 8007fde:	e014      	b.n	800800a <_vfiprintf_r+0x156>
 8007fe0:	eba0 0308 	sub.w	r3, r0, r8
 8007fe4:	fa09 f303 	lsl.w	r3, r9, r3
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	9304      	str	r3, [sp, #16]
 8007fec:	46a2      	mov	sl, r4
 8007fee:	e7d2      	b.n	8007f96 <_vfiprintf_r+0xe2>
 8007ff0:	9b03      	ldr	r3, [sp, #12]
 8007ff2:	1d19      	adds	r1, r3, #4
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	9103      	str	r1, [sp, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	bfbb      	ittet	lt
 8007ffc:	425b      	neglt	r3, r3
 8007ffe:	f042 0202 	orrlt.w	r2, r2, #2
 8008002:	9307      	strge	r3, [sp, #28]
 8008004:	9307      	strlt	r3, [sp, #28]
 8008006:	bfb8      	it	lt
 8008008:	9204      	strlt	r2, [sp, #16]
 800800a:	7823      	ldrb	r3, [r4, #0]
 800800c:	2b2e      	cmp	r3, #46	; 0x2e
 800800e:	d10c      	bne.n	800802a <_vfiprintf_r+0x176>
 8008010:	7863      	ldrb	r3, [r4, #1]
 8008012:	2b2a      	cmp	r3, #42	; 0x2a
 8008014:	d135      	bne.n	8008082 <_vfiprintf_r+0x1ce>
 8008016:	9b03      	ldr	r3, [sp, #12]
 8008018:	1d1a      	adds	r2, r3, #4
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	9203      	str	r2, [sp, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	bfb8      	it	lt
 8008022:	f04f 33ff 	movlt.w	r3, #4294967295
 8008026:	3402      	adds	r4, #2
 8008028:	9305      	str	r3, [sp, #20]
 800802a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008110 <_vfiprintf_r+0x25c>
 800802e:	7821      	ldrb	r1, [r4, #0]
 8008030:	2203      	movs	r2, #3
 8008032:	4650      	mov	r0, sl
 8008034:	f7f8 f8ec 	bl	8000210 <memchr>
 8008038:	b140      	cbz	r0, 800804c <_vfiprintf_r+0x198>
 800803a:	2340      	movs	r3, #64	; 0x40
 800803c:	eba0 000a 	sub.w	r0, r0, sl
 8008040:	fa03 f000 	lsl.w	r0, r3, r0
 8008044:	9b04      	ldr	r3, [sp, #16]
 8008046:	4303      	orrs	r3, r0
 8008048:	3401      	adds	r4, #1
 800804a:	9304      	str	r3, [sp, #16]
 800804c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008050:	482c      	ldr	r0, [pc, #176]	; (8008104 <_vfiprintf_r+0x250>)
 8008052:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008056:	2206      	movs	r2, #6
 8008058:	f7f8 f8da 	bl	8000210 <memchr>
 800805c:	2800      	cmp	r0, #0
 800805e:	d03f      	beq.n	80080e0 <_vfiprintf_r+0x22c>
 8008060:	4b29      	ldr	r3, [pc, #164]	; (8008108 <_vfiprintf_r+0x254>)
 8008062:	bb1b      	cbnz	r3, 80080ac <_vfiprintf_r+0x1f8>
 8008064:	9b03      	ldr	r3, [sp, #12]
 8008066:	3307      	adds	r3, #7
 8008068:	f023 0307 	bic.w	r3, r3, #7
 800806c:	3308      	adds	r3, #8
 800806e:	9303      	str	r3, [sp, #12]
 8008070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008072:	443b      	add	r3, r7
 8008074:	9309      	str	r3, [sp, #36]	; 0x24
 8008076:	e767      	b.n	8007f48 <_vfiprintf_r+0x94>
 8008078:	fb0c 3202 	mla	r2, ip, r2, r3
 800807c:	460c      	mov	r4, r1
 800807e:	2001      	movs	r0, #1
 8008080:	e7a5      	b.n	8007fce <_vfiprintf_r+0x11a>
 8008082:	2300      	movs	r3, #0
 8008084:	3401      	adds	r4, #1
 8008086:	9305      	str	r3, [sp, #20]
 8008088:	4619      	mov	r1, r3
 800808a:	f04f 0c0a 	mov.w	ip, #10
 800808e:	4620      	mov	r0, r4
 8008090:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008094:	3a30      	subs	r2, #48	; 0x30
 8008096:	2a09      	cmp	r2, #9
 8008098:	d903      	bls.n	80080a2 <_vfiprintf_r+0x1ee>
 800809a:	2b00      	cmp	r3, #0
 800809c:	d0c5      	beq.n	800802a <_vfiprintf_r+0x176>
 800809e:	9105      	str	r1, [sp, #20]
 80080a0:	e7c3      	b.n	800802a <_vfiprintf_r+0x176>
 80080a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80080a6:	4604      	mov	r4, r0
 80080a8:	2301      	movs	r3, #1
 80080aa:	e7f0      	b.n	800808e <_vfiprintf_r+0x1da>
 80080ac:	ab03      	add	r3, sp, #12
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	462a      	mov	r2, r5
 80080b2:	4b16      	ldr	r3, [pc, #88]	; (800810c <_vfiprintf_r+0x258>)
 80080b4:	a904      	add	r1, sp, #16
 80080b6:	4630      	mov	r0, r6
 80080b8:	f7fc ffc0 	bl	800503c <_printf_float>
 80080bc:	4607      	mov	r7, r0
 80080be:	1c78      	adds	r0, r7, #1
 80080c0:	d1d6      	bne.n	8008070 <_vfiprintf_r+0x1bc>
 80080c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080c4:	07d9      	lsls	r1, r3, #31
 80080c6:	d405      	bmi.n	80080d4 <_vfiprintf_r+0x220>
 80080c8:	89ab      	ldrh	r3, [r5, #12]
 80080ca:	059a      	lsls	r2, r3, #22
 80080cc:	d402      	bmi.n	80080d4 <_vfiprintf_r+0x220>
 80080ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080d0:	f7ff fe6b 	bl	8007daa <__retarget_lock_release_recursive>
 80080d4:	89ab      	ldrh	r3, [r5, #12]
 80080d6:	065b      	lsls	r3, r3, #25
 80080d8:	f53f af12 	bmi.w	8007f00 <_vfiprintf_r+0x4c>
 80080dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080de:	e711      	b.n	8007f04 <_vfiprintf_r+0x50>
 80080e0:	ab03      	add	r3, sp, #12
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	462a      	mov	r2, r5
 80080e6:	4b09      	ldr	r3, [pc, #36]	; (800810c <_vfiprintf_r+0x258>)
 80080e8:	a904      	add	r1, sp, #16
 80080ea:	4630      	mov	r0, r6
 80080ec:	f7fd fa4a 	bl	8005584 <_printf_i>
 80080f0:	e7e4      	b.n	80080bc <_vfiprintf_r+0x208>
 80080f2:	bf00      	nop
 80080f4:	080099f0 	.word	0x080099f0
 80080f8:	08009a10 	.word	0x08009a10
 80080fc:	080099d0 	.word	0x080099d0
 8008100:	08009864 	.word	0x08009864
 8008104:	0800986e 	.word	0x0800986e
 8008108:	0800503d 	.word	0x0800503d
 800810c:	08007e91 	.word	0x08007e91
 8008110:	0800986a 	.word	0x0800986a

08008114 <__swbuf_r>:
 8008114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008116:	460e      	mov	r6, r1
 8008118:	4614      	mov	r4, r2
 800811a:	4605      	mov	r5, r0
 800811c:	b118      	cbz	r0, 8008126 <__swbuf_r+0x12>
 800811e:	6983      	ldr	r3, [r0, #24]
 8008120:	b90b      	cbnz	r3, 8008126 <__swbuf_r+0x12>
 8008122:	f7ff fd91 	bl	8007c48 <__sinit>
 8008126:	4b21      	ldr	r3, [pc, #132]	; (80081ac <__swbuf_r+0x98>)
 8008128:	429c      	cmp	r4, r3
 800812a:	d12b      	bne.n	8008184 <__swbuf_r+0x70>
 800812c:	686c      	ldr	r4, [r5, #4]
 800812e:	69a3      	ldr	r3, [r4, #24]
 8008130:	60a3      	str	r3, [r4, #8]
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	071a      	lsls	r2, r3, #28
 8008136:	d52f      	bpl.n	8008198 <__swbuf_r+0x84>
 8008138:	6923      	ldr	r3, [r4, #16]
 800813a:	b36b      	cbz	r3, 8008198 <__swbuf_r+0x84>
 800813c:	6923      	ldr	r3, [r4, #16]
 800813e:	6820      	ldr	r0, [r4, #0]
 8008140:	1ac0      	subs	r0, r0, r3
 8008142:	6963      	ldr	r3, [r4, #20]
 8008144:	b2f6      	uxtb	r6, r6
 8008146:	4283      	cmp	r3, r0
 8008148:	4637      	mov	r7, r6
 800814a:	dc04      	bgt.n	8008156 <__swbuf_r+0x42>
 800814c:	4621      	mov	r1, r4
 800814e:	4628      	mov	r0, r5
 8008150:	f7ff fce6 	bl	8007b20 <_fflush_r>
 8008154:	bb30      	cbnz	r0, 80081a4 <__swbuf_r+0x90>
 8008156:	68a3      	ldr	r3, [r4, #8]
 8008158:	3b01      	subs	r3, #1
 800815a:	60a3      	str	r3, [r4, #8]
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	1c5a      	adds	r2, r3, #1
 8008160:	6022      	str	r2, [r4, #0]
 8008162:	701e      	strb	r6, [r3, #0]
 8008164:	6963      	ldr	r3, [r4, #20]
 8008166:	3001      	adds	r0, #1
 8008168:	4283      	cmp	r3, r0
 800816a:	d004      	beq.n	8008176 <__swbuf_r+0x62>
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	07db      	lsls	r3, r3, #31
 8008170:	d506      	bpl.n	8008180 <__swbuf_r+0x6c>
 8008172:	2e0a      	cmp	r6, #10
 8008174:	d104      	bne.n	8008180 <__swbuf_r+0x6c>
 8008176:	4621      	mov	r1, r4
 8008178:	4628      	mov	r0, r5
 800817a:	f7ff fcd1 	bl	8007b20 <_fflush_r>
 800817e:	b988      	cbnz	r0, 80081a4 <__swbuf_r+0x90>
 8008180:	4638      	mov	r0, r7
 8008182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008184:	4b0a      	ldr	r3, [pc, #40]	; (80081b0 <__swbuf_r+0x9c>)
 8008186:	429c      	cmp	r4, r3
 8008188:	d101      	bne.n	800818e <__swbuf_r+0x7a>
 800818a:	68ac      	ldr	r4, [r5, #8]
 800818c:	e7cf      	b.n	800812e <__swbuf_r+0x1a>
 800818e:	4b09      	ldr	r3, [pc, #36]	; (80081b4 <__swbuf_r+0xa0>)
 8008190:	429c      	cmp	r4, r3
 8008192:	bf08      	it	eq
 8008194:	68ec      	ldreq	r4, [r5, #12]
 8008196:	e7ca      	b.n	800812e <__swbuf_r+0x1a>
 8008198:	4621      	mov	r1, r4
 800819a:	4628      	mov	r0, r5
 800819c:	f000 f81a 	bl	80081d4 <__swsetup_r>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	d0cb      	beq.n	800813c <__swbuf_r+0x28>
 80081a4:	f04f 37ff 	mov.w	r7, #4294967295
 80081a8:	e7ea      	b.n	8008180 <__swbuf_r+0x6c>
 80081aa:	bf00      	nop
 80081ac:	080099f0 	.word	0x080099f0
 80081b0:	08009a10 	.word	0x08009a10
 80081b4:	080099d0 	.word	0x080099d0

080081b8 <__ascii_wctomb>:
 80081b8:	b149      	cbz	r1, 80081ce <__ascii_wctomb+0x16>
 80081ba:	2aff      	cmp	r2, #255	; 0xff
 80081bc:	bf85      	ittet	hi
 80081be:	238a      	movhi	r3, #138	; 0x8a
 80081c0:	6003      	strhi	r3, [r0, #0]
 80081c2:	700a      	strbls	r2, [r1, #0]
 80081c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80081c8:	bf98      	it	ls
 80081ca:	2001      	movls	r0, #1
 80081cc:	4770      	bx	lr
 80081ce:	4608      	mov	r0, r1
 80081d0:	4770      	bx	lr
	...

080081d4 <__swsetup_r>:
 80081d4:	4b32      	ldr	r3, [pc, #200]	; (80082a0 <__swsetup_r+0xcc>)
 80081d6:	b570      	push	{r4, r5, r6, lr}
 80081d8:	681d      	ldr	r5, [r3, #0]
 80081da:	4606      	mov	r6, r0
 80081dc:	460c      	mov	r4, r1
 80081de:	b125      	cbz	r5, 80081ea <__swsetup_r+0x16>
 80081e0:	69ab      	ldr	r3, [r5, #24]
 80081e2:	b913      	cbnz	r3, 80081ea <__swsetup_r+0x16>
 80081e4:	4628      	mov	r0, r5
 80081e6:	f7ff fd2f 	bl	8007c48 <__sinit>
 80081ea:	4b2e      	ldr	r3, [pc, #184]	; (80082a4 <__swsetup_r+0xd0>)
 80081ec:	429c      	cmp	r4, r3
 80081ee:	d10f      	bne.n	8008210 <__swsetup_r+0x3c>
 80081f0:	686c      	ldr	r4, [r5, #4]
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081f8:	0719      	lsls	r1, r3, #28
 80081fa:	d42c      	bmi.n	8008256 <__swsetup_r+0x82>
 80081fc:	06dd      	lsls	r5, r3, #27
 80081fe:	d411      	bmi.n	8008224 <__swsetup_r+0x50>
 8008200:	2309      	movs	r3, #9
 8008202:	6033      	str	r3, [r6, #0]
 8008204:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008208:	81a3      	strh	r3, [r4, #12]
 800820a:	f04f 30ff 	mov.w	r0, #4294967295
 800820e:	e03e      	b.n	800828e <__swsetup_r+0xba>
 8008210:	4b25      	ldr	r3, [pc, #148]	; (80082a8 <__swsetup_r+0xd4>)
 8008212:	429c      	cmp	r4, r3
 8008214:	d101      	bne.n	800821a <__swsetup_r+0x46>
 8008216:	68ac      	ldr	r4, [r5, #8]
 8008218:	e7eb      	b.n	80081f2 <__swsetup_r+0x1e>
 800821a:	4b24      	ldr	r3, [pc, #144]	; (80082ac <__swsetup_r+0xd8>)
 800821c:	429c      	cmp	r4, r3
 800821e:	bf08      	it	eq
 8008220:	68ec      	ldreq	r4, [r5, #12]
 8008222:	e7e6      	b.n	80081f2 <__swsetup_r+0x1e>
 8008224:	0758      	lsls	r0, r3, #29
 8008226:	d512      	bpl.n	800824e <__swsetup_r+0x7a>
 8008228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800822a:	b141      	cbz	r1, 800823e <__swsetup_r+0x6a>
 800822c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008230:	4299      	cmp	r1, r3
 8008232:	d002      	beq.n	800823a <__swsetup_r+0x66>
 8008234:	4630      	mov	r0, r6
 8008236:	f7fc fd81 	bl	8004d3c <_free_r>
 800823a:	2300      	movs	r3, #0
 800823c:	6363      	str	r3, [r4, #52]	; 0x34
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008244:	81a3      	strh	r3, [r4, #12]
 8008246:	2300      	movs	r3, #0
 8008248:	6063      	str	r3, [r4, #4]
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	6023      	str	r3, [r4, #0]
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	f043 0308 	orr.w	r3, r3, #8
 8008254:	81a3      	strh	r3, [r4, #12]
 8008256:	6923      	ldr	r3, [r4, #16]
 8008258:	b94b      	cbnz	r3, 800826e <__swsetup_r+0x9a>
 800825a:	89a3      	ldrh	r3, [r4, #12]
 800825c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008264:	d003      	beq.n	800826e <__swsetup_r+0x9a>
 8008266:	4621      	mov	r1, r4
 8008268:	4630      	mov	r0, r6
 800826a:	f000 f84d 	bl	8008308 <__smakebuf_r>
 800826e:	89a0      	ldrh	r0, [r4, #12]
 8008270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008274:	f010 0301 	ands.w	r3, r0, #1
 8008278:	d00a      	beq.n	8008290 <__swsetup_r+0xbc>
 800827a:	2300      	movs	r3, #0
 800827c:	60a3      	str	r3, [r4, #8]
 800827e:	6963      	ldr	r3, [r4, #20]
 8008280:	425b      	negs	r3, r3
 8008282:	61a3      	str	r3, [r4, #24]
 8008284:	6923      	ldr	r3, [r4, #16]
 8008286:	b943      	cbnz	r3, 800829a <__swsetup_r+0xc6>
 8008288:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800828c:	d1ba      	bne.n	8008204 <__swsetup_r+0x30>
 800828e:	bd70      	pop	{r4, r5, r6, pc}
 8008290:	0781      	lsls	r1, r0, #30
 8008292:	bf58      	it	pl
 8008294:	6963      	ldrpl	r3, [r4, #20]
 8008296:	60a3      	str	r3, [r4, #8]
 8008298:	e7f4      	b.n	8008284 <__swsetup_r+0xb0>
 800829a:	2000      	movs	r0, #0
 800829c:	e7f7      	b.n	800828e <__swsetup_r+0xba>
 800829e:	bf00      	nop
 80082a0:	20000008 	.word	0x20000008
 80082a4:	080099f0 	.word	0x080099f0
 80082a8:	08009a10 	.word	0x08009a10
 80082ac:	080099d0 	.word	0x080099d0

080082b0 <abort>:
 80082b0:	b508      	push	{r3, lr}
 80082b2:	2006      	movs	r0, #6
 80082b4:	f000 f898 	bl	80083e8 <raise>
 80082b8:	2001      	movs	r0, #1
 80082ba:	f7f8 ff61 	bl	8001180 <_exit>

080082be <__swhatbuf_r>:
 80082be:	b570      	push	{r4, r5, r6, lr}
 80082c0:	460e      	mov	r6, r1
 80082c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c6:	2900      	cmp	r1, #0
 80082c8:	b096      	sub	sp, #88	; 0x58
 80082ca:	4614      	mov	r4, r2
 80082cc:	461d      	mov	r5, r3
 80082ce:	da08      	bge.n	80082e2 <__swhatbuf_r+0x24>
 80082d0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	602a      	str	r2, [r5, #0]
 80082d8:	061a      	lsls	r2, r3, #24
 80082da:	d410      	bmi.n	80082fe <__swhatbuf_r+0x40>
 80082dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082e0:	e00e      	b.n	8008300 <__swhatbuf_r+0x42>
 80082e2:	466a      	mov	r2, sp
 80082e4:	f000 f89c 	bl	8008420 <_fstat_r>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	dbf1      	blt.n	80082d0 <__swhatbuf_r+0x12>
 80082ec:	9a01      	ldr	r2, [sp, #4]
 80082ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082f6:	425a      	negs	r2, r3
 80082f8:	415a      	adcs	r2, r3
 80082fa:	602a      	str	r2, [r5, #0]
 80082fc:	e7ee      	b.n	80082dc <__swhatbuf_r+0x1e>
 80082fe:	2340      	movs	r3, #64	; 0x40
 8008300:	2000      	movs	r0, #0
 8008302:	6023      	str	r3, [r4, #0]
 8008304:	b016      	add	sp, #88	; 0x58
 8008306:	bd70      	pop	{r4, r5, r6, pc}

08008308 <__smakebuf_r>:
 8008308:	898b      	ldrh	r3, [r1, #12]
 800830a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800830c:	079d      	lsls	r5, r3, #30
 800830e:	4606      	mov	r6, r0
 8008310:	460c      	mov	r4, r1
 8008312:	d507      	bpl.n	8008324 <__smakebuf_r+0x1c>
 8008314:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	6123      	str	r3, [r4, #16]
 800831c:	2301      	movs	r3, #1
 800831e:	6163      	str	r3, [r4, #20]
 8008320:	b002      	add	sp, #8
 8008322:	bd70      	pop	{r4, r5, r6, pc}
 8008324:	ab01      	add	r3, sp, #4
 8008326:	466a      	mov	r2, sp
 8008328:	f7ff ffc9 	bl	80082be <__swhatbuf_r>
 800832c:	9900      	ldr	r1, [sp, #0]
 800832e:	4605      	mov	r5, r0
 8008330:	4630      	mov	r0, r6
 8008332:	f7fc fd6f 	bl	8004e14 <_malloc_r>
 8008336:	b948      	cbnz	r0, 800834c <__smakebuf_r+0x44>
 8008338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800833c:	059a      	lsls	r2, r3, #22
 800833e:	d4ef      	bmi.n	8008320 <__smakebuf_r+0x18>
 8008340:	f023 0303 	bic.w	r3, r3, #3
 8008344:	f043 0302 	orr.w	r3, r3, #2
 8008348:	81a3      	strh	r3, [r4, #12]
 800834a:	e7e3      	b.n	8008314 <__smakebuf_r+0xc>
 800834c:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <__smakebuf_r+0x7c>)
 800834e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	6020      	str	r0, [r4, #0]
 8008354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008358:	81a3      	strh	r3, [r4, #12]
 800835a:	9b00      	ldr	r3, [sp, #0]
 800835c:	6163      	str	r3, [r4, #20]
 800835e:	9b01      	ldr	r3, [sp, #4]
 8008360:	6120      	str	r0, [r4, #16]
 8008362:	b15b      	cbz	r3, 800837c <__smakebuf_r+0x74>
 8008364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008368:	4630      	mov	r0, r6
 800836a:	f000 f86b 	bl	8008444 <_isatty_r>
 800836e:	b128      	cbz	r0, 800837c <__smakebuf_r+0x74>
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	f043 0301 	orr.w	r3, r3, #1
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	89a0      	ldrh	r0, [r4, #12]
 800837e:	4305      	orrs	r5, r0
 8008380:	81a5      	strh	r5, [r4, #12]
 8008382:	e7cd      	b.n	8008320 <__smakebuf_r+0x18>
 8008384:	08007be1 	.word	0x08007be1

08008388 <_malloc_usable_size_r>:
 8008388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800838c:	1f18      	subs	r0, r3, #4
 800838e:	2b00      	cmp	r3, #0
 8008390:	bfbc      	itt	lt
 8008392:	580b      	ldrlt	r3, [r1, r0]
 8008394:	18c0      	addlt	r0, r0, r3
 8008396:	4770      	bx	lr

08008398 <_raise_r>:
 8008398:	291f      	cmp	r1, #31
 800839a:	b538      	push	{r3, r4, r5, lr}
 800839c:	4604      	mov	r4, r0
 800839e:	460d      	mov	r5, r1
 80083a0:	d904      	bls.n	80083ac <_raise_r+0x14>
 80083a2:	2316      	movs	r3, #22
 80083a4:	6003      	str	r3, [r0, #0]
 80083a6:	f04f 30ff 	mov.w	r0, #4294967295
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80083ae:	b112      	cbz	r2, 80083b6 <_raise_r+0x1e>
 80083b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083b4:	b94b      	cbnz	r3, 80083ca <_raise_r+0x32>
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 f830 	bl	800841c <_getpid_r>
 80083bc:	462a      	mov	r2, r5
 80083be:	4601      	mov	r1, r0
 80083c0:	4620      	mov	r0, r4
 80083c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083c6:	f000 b817 	b.w	80083f8 <_kill_r>
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d00a      	beq.n	80083e4 <_raise_r+0x4c>
 80083ce:	1c59      	adds	r1, r3, #1
 80083d0:	d103      	bne.n	80083da <_raise_r+0x42>
 80083d2:	2316      	movs	r3, #22
 80083d4:	6003      	str	r3, [r0, #0]
 80083d6:	2001      	movs	r0, #1
 80083d8:	e7e7      	b.n	80083aa <_raise_r+0x12>
 80083da:	2400      	movs	r4, #0
 80083dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083e0:	4628      	mov	r0, r5
 80083e2:	4798      	blx	r3
 80083e4:	2000      	movs	r0, #0
 80083e6:	e7e0      	b.n	80083aa <_raise_r+0x12>

080083e8 <raise>:
 80083e8:	4b02      	ldr	r3, [pc, #8]	; (80083f4 <raise+0xc>)
 80083ea:	4601      	mov	r1, r0
 80083ec:	6818      	ldr	r0, [r3, #0]
 80083ee:	f7ff bfd3 	b.w	8008398 <_raise_r>
 80083f2:	bf00      	nop
 80083f4:	20000008 	.word	0x20000008

080083f8 <_kill_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d07      	ldr	r5, [pc, #28]	; (8008418 <_kill_r+0x20>)
 80083fc:	2300      	movs	r3, #0
 80083fe:	4604      	mov	r4, r0
 8008400:	4608      	mov	r0, r1
 8008402:	4611      	mov	r1, r2
 8008404:	602b      	str	r3, [r5, #0]
 8008406:	f7f8 feab 	bl	8001160 <_kill>
 800840a:	1c43      	adds	r3, r0, #1
 800840c:	d102      	bne.n	8008414 <_kill_r+0x1c>
 800840e:	682b      	ldr	r3, [r5, #0]
 8008410:	b103      	cbz	r3, 8008414 <_kill_r+0x1c>
 8008412:	6023      	str	r3, [r4, #0]
 8008414:	bd38      	pop	{r3, r4, r5, pc}
 8008416:	bf00      	nop
 8008418:	20011a94 	.word	0x20011a94

0800841c <_getpid_r>:
 800841c:	f7f8 be98 	b.w	8001150 <_getpid>

08008420 <_fstat_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	4d07      	ldr	r5, [pc, #28]	; (8008440 <_fstat_r+0x20>)
 8008424:	2300      	movs	r3, #0
 8008426:	4604      	mov	r4, r0
 8008428:	4608      	mov	r0, r1
 800842a:	4611      	mov	r1, r2
 800842c:	602b      	str	r3, [r5, #0]
 800842e:	f7f8 fef6 	bl	800121e <_fstat>
 8008432:	1c43      	adds	r3, r0, #1
 8008434:	d102      	bne.n	800843c <_fstat_r+0x1c>
 8008436:	682b      	ldr	r3, [r5, #0]
 8008438:	b103      	cbz	r3, 800843c <_fstat_r+0x1c>
 800843a:	6023      	str	r3, [r4, #0]
 800843c:	bd38      	pop	{r3, r4, r5, pc}
 800843e:	bf00      	nop
 8008440:	20011a94 	.word	0x20011a94

08008444 <_isatty_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4d06      	ldr	r5, [pc, #24]	; (8008460 <_isatty_r+0x1c>)
 8008448:	2300      	movs	r3, #0
 800844a:	4604      	mov	r4, r0
 800844c:	4608      	mov	r0, r1
 800844e:	602b      	str	r3, [r5, #0]
 8008450:	f7f8 fef5 	bl	800123e <_isatty>
 8008454:	1c43      	adds	r3, r0, #1
 8008456:	d102      	bne.n	800845e <_isatty_r+0x1a>
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	b103      	cbz	r3, 800845e <_isatty_r+0x1a>
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	20011a94 	.word	0x20011a94

08008464 <round>:
 8008464:	ec51 0b10 	vmov	r0, r1, d0
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800846e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8008472:	2c13      	cmp	r4, #19
 8008474:	ee10 2a10 	vmov	r2, s0
 8008478:	460b      	mov	r3, r1
 800847a:	dc19      	bgt.n	80084b0 <round+0x4c>
 800847c:	2c00      	cmp	r4, #0
 800847e:	da09      	bge.n	8008494 <round+0x30>
 8008480:	3401      	adds	r4, #1
 8008482:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008486:	d103      	bne.n	8008490 <round+0x2c>
 8008488:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800848c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008490:	2200      	movs	r2, #0
 8008492:	e028      	b.n	80084e6 <round+0x82>
 8008494:	4d15      	ldr	r5, [pc, #84]	; (80084ec <round+0x88>)
 8008496:	4125      	asrs	r5, r4
 8008498:	ea01 0605 	and.w	r6, r1, r5
 800849c:	4332      	orrs	r2, r6
 800849e:	d00e      	beq.n	80084be <round+0x5a>
 80084a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80084a4:	fa42 f404 	asr.w	r4, r2, r4
 80084a8:	4423      	add	r3, r4
 80084aa:	ea23 0305 	bic.w	r3, r3, r5
 80084ae:	e7ef      	b.n	8008490 <round+0x2c>
 80084b0:	2c33      	cmp	r4, #51	; 0x33
 80084b2:	dd07      	ble.n	80084c4 <round+0x60>
 80084b4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80084b8:	d101      	bne.n	80084be <round+0x5a>
 80084ba:	f7f7 feff 	bl	80002bc <__adddf3>
 80084be:	ec41 0b10 	vmov	d0, r0, r1
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80084c8:	f04f 35ff 	mov.w	r5, #4294967295
 80084cc:	40f5      	lsrs	r5, r6
 80084ce:	4228      	tst	r0, r5
 80084d0:	d0f5      	beq.n	80084be <round+0x5a>
 80084d2:	2101      	movs	r1, #1
 80084d4:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80084d8:	fa01 f404 	lsl.w	r4, r1, r4
 80084dc:	1912      	adds	r2, r2, r4
 80084de:	bf28      	it	cs
 80084e0:	185b      	addcs	r3, r3, r1
 80084e2:	ea22 0205 	bic.w	r2, r2, r5
 80084e6:	4619      	mov	r1, r3
 80084e8:	4610      	mov	r0, r2
 80084ea:	e7e8      	b.n	80084be <round+0x5a>
 80084ec:	000fffff 	.word	0x000fffff

080084f0 <pow>:
 80084f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f2:	ed2d 8b02 	vpush	{d8}
 80084f6:	eeb0 8a40 	vmov.f32	s16, s0
 80084fa:	eef0 8a60 	vmov.f32	s17, s1
 80084fe:	ec55 4b11 	vmov	r4, r5, d1
 8008502:	f000 f865 	bl	80085d0 <__ieee754_pow>
 8008506:	4622      	mov	r2, r4
 8008508:	462b      	mov	r3, r5
 800850a:	4620      	mov	r0, r4
 800850c:	4629      	mov	r1, r5
 800850e:	ec57 6b10 	vmov	r6, r7, d0
 8008512:	f7f8 fb23 	bl	8000b5c <__aeabi_dcmpun>
 8008516:	2800      	cmp	r0, #0
 8008518:	d13b      	bne.n	8008592 <pow+0xa2>
 800851a:	ec51 0b18 	vmov	r0, r1, d8
 800851e:	2200      	movs	r2, #0
 8008520:	2300      	movs	r3, #0
 8008522:	f7f8 fae9 	bl	8000af8 <__aeabi_dcmpeq>
 8008526:	b1b8      	cbz	r0, 8008558 <pow+0x68>
 8008528:	2200      	movs	r2, #0
 800852a:	2300      	movs	r3, #0
 800852c:	4620      	mov	r0, r4
 800852e:	4629      	mov	r1, r5
 8008530:	f7f8 fae2 	bl	8000af8 <__aeabi_dcmpeq>
 8008534:	2800      	cmp	r0, #0
 8008536:	d146      	bne.n	80085c6 <pow+0xd6>
 8008538:	ec45 4b10 	vmov	d0, r4, r5
 800853c:	f000 fe61 	bl	8009202 <finite>
 8008540:	b338      	cbz	r0, 8008592 <pow+0xa2>
 8008542:	2200      	movs	r2, #0
 8008544:	2300      	movs	r3, #0
 8008546:	4620      	mov	r0, r4
 8008548:	4629      	mov	r1, r5
 800854a:	f7f8 fadf 	bl	8000b0c <__aeabi_dcmplt>
 800854e:	b300      	cbz	r0, 8008592 <pow+0xa2>
 8008550:	f7fc fbba 	bl	8004cc8 <__errno>
 8008554:	2322      	movs	r3, #34	; 0x22
 8008556:	e01b      	b.n	8008590 <pow+0xa0>
 8008558:	ec47 6b10 	vmov	d0, r6, r7
 800855c:	f000 fe51 	bl	8009202 <finite>
 8008560:	b9e0      	cbnz	r0, 800859c <pow+0xac>
 8008562:	eeb0 0a48 	vmov.f32	s0, s16
 8008566:	eef0 0a68 	vmov.f32	s1, s17
 800856a:	f000 fe4a 	bl	8009202 <finite>
 800856e:	b1a8      	cbz	r0, 800859c <pow+0xac>
 8008570:	ec45 4b10 	vmov	d0, r4, r5
 8008574:	f000 fe45 	bl	8009202 <finite>
 8008578:	b180      	cbz	r0, 800859c <pow+0xac>
 800857a:	4632      	mov	r2, r6
 800857c:	463b      	mov	r3, r7
 800857e:	4630      	mov	r0, r6
 8008580:	4639      	mov	r1, r7
 8008582:	f7f8 faeb 	bl	8000b5c <__aeabi_dcmpun>
 8008586:	2800      	cmp	r0, #0
 8008588:	d0e2      	beq.n	8008550 <pow+0x60>
 800858a:	f7fc fb9d 	bl	8004cc8 <__errno>
 800858e:	2321      	movs	r3, #33	; 0x21
 8008590:	6003      	str	r3, [r0, #0]
 8008592:	ecbd 8b02 	vpop	{d8}
 8008596:	ec47 6b10 	vmov	d0, r6, r7
 800859a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800859c:	2200      	movs	r2, #0
 800859e:	2300      	movs	r3, #0
 80085a0:	4630      	mov	r0, r6
 80085a2:	4639      	mov	r1, r7
 80085a4:	f7f8 faa8 	bl	8000af8 <__aeabi_dcmpeq>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d0f2      	beq.n	8008592 <pow+0xa2>
 80085ac:	eeb0 0a48 	vmov.f32	s0, s16
 80085b0:	eef0 0a68 	vmov.f32	s1, s17
 80085b4:	f000 fe25 	bl	8009202 <finite>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d0ea      	beq.n	8008592 <pow+0xa2>
 80085bc:	ec45 4b10 	vmov	d0, r4, r5
 80085c0:	f000 fe1f 	bl	8009202 <finite>
 80085c4:	e7c3      	b.n	800854e <pow+0x5e>
 80085c6:	4f01      	ldr	r7, [pc, #4]	; (80085cc <pow+0xdc>)
 80085c8:	2600      	movs	r6, #0
 80085ca:	e7e2      	b.n	8008592 <pow+0xa2>
 80085cc:	3ff00000 	.word	0x3ff00000

080085d0 <__ieee754_pow>:
 80085d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d4:	ed2d 8b06 	vpush	{d8-d10}
 80085d8:	b089      	sub	sp, #36	; 0x24
 80085da:	ed8d 1b00 	vstr	d1, [sp]
 80085de:	e9dd 2900 	ldrd	r2, r9, [sp]
 80085e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80085e6:	ea58 0102 	orrs.w	r1, r8, r2
 80085ea:	ec57 6b10 	vmov	r6, r7, d0
 80085ee:	d115      	bne.n	800861c <__ieee754_pow+0x4c>
 80085f0:	19b3      	adds	r3, r6, r6
 80085f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80085f6:	4152      	adcs	r2, r2
 80085f8:	4299      	cmp	r1, r3
 80085fa:	4b89      	ldr	r3, [pc, #548]	; (8008820 <__ieee754_pow+0x250>)
 80085fc:	4193      	sbcs	r3, r2
 80085fe:	f080 84d2 	bcs.w	8008fa6 <__ieee754_pow+0x9d6>
 8008602:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008606:	4630      	mov	r0, r6
 8008608:	4639      	mov	r1, r7
 800860a:	f7f7 fe57 	bl	80002bc <__adddf3>
 800860e:	ec41 0b10 	vmov	d0, r0, r1
 8008612:	b009      	add	sp, #36	; 0x24
 8008614:	ecbd 8b06 	vpop	{d8-d10}
 8008618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800861c:	4b81      	ldr	r3, [pc, #516]	; (8008824 <__ieee754_pow+0x254>)
 800861e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008622:	429c      	cmp	r4, r3
 8008624:	ee10 aa10 	vmov	sl, s0
 8008628:	463d      	mov	r5, r7
 800862a:	dc06      	bgt.n	800863a <__ieee754_pow+0x6a>
 800862c:	d101      	bne.n	8008632 <__ieee754_pow+0x62>
 800862e:	2e00      	cmp	r6, #0
 8008630:	d1e7      	bne.n	8008602 <__ieee754_pow+0x32>
 8008632:	4598      	cmp	r8, r3
 8008634:	dc01      	bgt.n	800863a <__ieee754_pow+0x6a>
 8008636:	d10f      	bne.n	8008658 <__ieee754_pow+0x88>
 8008638:	b172      	cbz	r2, 8008658 <__ieee754_pow+0x88>
 800863a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800863e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008642:	ea55 050a 	orrs.w	r5, r5, sl
 8008646:	d1dc      	bne.n	8008602 <__ieee754_pow+0x32>
 8008648:	e9dd 3200 	ldrd	r3, r2, [sp]
 800864c:	18db      	adds	r3, r3, r3
 800864e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008652:	4152      	adcs	r2, r2
 8008654:	429d      	cmp	r5, r3
 8008656:	e7d0      	b.n	80085fa <__ieee754_pow+0x2a>
 8008658:	2d00      	cmp	r5, #0
 800865a:	da3b      	bge.n	80086d4 <__ieee754_pow+0x104>
 800865c:	4b72      	ldr	r3, [pc, #456]	; (8008828 <__ieee754_pow+0x258>)
 800865e:	4598      	cmp	r8, r3
 8008660:	dc51      	bgt.n	8008706 <__ieee754_pow+0x136>
 8008662:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008666:	4598      	cmp	r8, r3
 8008668:	f340 84ac 	ble.w	8008fc4 <__ieee754_pow+0x9f4>
 800866c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008670:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008674:	2b14      	cmp	r3, #20
 8008676:	dd0f      	ble.n	8008698 <__ieee754_pow+0xc8>
 8008678:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800867c:	fa22 f103 	lsr.w	r1, r2, r3
 8008680:	fa01 f303 	lsl.w	r3, r1, r3
 8008684:	4293      	cmp	r3, r2
 8008686:	f040 849d 	bne.w	8008fc4 <__ieee754_pow+0x9f4>
 800868a:	f001 0101 	and.w	r1, r1, #1
 800868e:	f1c1 0302 	rsb	r3, r1, #2
 8008692:	9304      	str	r3, [sp, #16]
 8008694:	b182      	cbz	r2, 80086b8 <__ieee754_pow+0xe8>
 8008696:	e05f      	b.n	8008758 <__ieee754_pow+0x188>
 8008698:	2a00      	cmp	r2, #0
 800869a:	d15b      	bne.n	8008754 <__ieee754_pow+0x184>
 800869c:	f1c3 0314 	rsb	r3, r3, #20
 80086a0:	fa48 f103 	asr.w	r1, r8, r3
 80086a4:	fa01 f303 	lsl.w	r3, r1, r3
 80086a8:	4543      	cmp	r3, r8
 80086aa:	f040 8488 	bne.w	8008fbe <__ieee754_pow+0x9ee>
 80086ae:	f001 0101 	and.w	r1, r1, #1
 80086b2:	f1c1 0302 	rsb	r3, r1, #2
 80086b6:	9304      	str	r3, [sp, #16]
 80086b8:	4b5c      	ldr	r3, [pc, #368]	; (800882c <__ieee754_pow+0x25c>)
 80086ba:	4598      	cmp	r8, r3
 80086bc:	d132      	bne.n	8008724 <__ieee754_pow+0x154>
 80086be:	f1b9 0f00 	cmp.w	r9, #0
 80086c2:	f280 8478 	bge.w	8008fb6 <__ieee754_pow+0x9e6>
 80086c6:	4959      	ldr	r1, [pc, #356]	; (800882c <__ieee754_pow+0x25c>)
 80086c8:	4632      	mov	r2, r6
 80086ca:	463b      	mov	r3, r7
 80086cc:	2000      	movs	r0, #0
 80086ce:	f7f8 f8d5 	bl	800087c <__aeabi_ddiv>
 80086d2:	e79c      	b.n	800860e <__ieee754_pow+0x3e>
 80086d4:	2300      	movs	r3, #0
 80086d6:	9304      	str	r3, [sp, #16]
 80086d8:	2a00      	cmp	r2, #0
 80086da:	d13d      	bne.n	8008758 <__ieee754_pow+0x188>
 80086dc:	4b51      	ldr	r3, [pc, #324]	; (8008824 <__ieee754_pow+0x254>)
 80086de:	4598      	cmp	r8, r3
 80086e0:	d1ea      	bne.n	80086b8 <__ieee754_pow+0xe8>
 80086e2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80086e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80086ea:	ea53 030a 	orrs.w	r3, r3, sl
 80086ee:	f000 845a 	beq.w	8008fa6 <__ieee754_pow+0x9d6>
 80086f2:	4b4f      	ldr	r3, [pc, #316]	; (8008830 <__ieee754_pow+0x260>)
 80086f4:	429c      	cmp	r4, r3
 80086f6:	dd08      	ble.n	800870a <__ieee754_pow+0x13a>
 80086f8:	f1b9 0f00 	cmp.w	r9, #0
 80086fc:	f2c0 8457 	blt.w	8008fae <__ieee754_pow+0x9de>
 8008700:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008704:	e783      	b.n	800860e <__ieee754_pow+0x3e>
 8008706:	2302      	movs	r3, #2
 8008708:	e7e5      	b.n	80086d6 <__ieee754_pow+0x106>
 800870a:	f1b9 0f00 	cmp.w	r9, #0
 800870e:	f04f 0000 	mov.w	r0, #0
 8008712:	f04f 0100 	mov.w	r1, #0
 8008716:	f6bf af7a 	bge.w	800860e <__ieee754_pow+0x3e>
 800871a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800871e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008722:	e774      	b.n	800860e <__ieee754_pow+0x3e>
 8008724:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008728:	d106      	bne.n	8008738 <__ieee754_pow+0x168>
 800872a:	4632      	mov	r2, r6
 800872c:	463b      	mov	r3, r7
 800872e:	4630      	mov	r0, r6
 8008730:	4639      	mov	r1, r7
 8008732:	f7f7 ff79 	bl	8000628 <__aeabi_dmul>
 8008736:	e76a      	b.n	800860e <__ieee754_pow+0x3e>
 8008738:	4b3e      	ldr	r3, [pc, #248]	; (8008834 <__ieee754_pow+0x264>)
 800873a:	4599      	cmp	r9, r3
 800873c:	d10c      	bne.n	8008758 <__ieee754_pow+0x188>
 800873e:	2d00      	cmp	r5, #0
 8008740:	db0a      	blt.n	8008758 <__ieee754_pow+0x188>
 8008742:	ec47 6b10 	vmov	d0, r6, r7
 8008746:	b009      	add	sp, #36	; 0x24
 8008748:	ecbd 8b06 	vpop	{d8-d10}
 800874c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008750:	f000 bc6c 	b.w	800902c <__ieee754_sqrt>
 8008754:	2300      	movs	r3, #0
 8008756:	9304      	str	r3, [sp, #16]
 8008758:	ec47 6b10 	vmov	d0, r6, r7
 800875c:	f000 fd48 	bl	80091f0 <fabs>
 8008760:	ec51 0b10 	vmov	r0, r1, d0
 8008764:	f1ba 0f00 	cmp.w	sl, #0
 8008768:	d129      	bne.n	80087be <__ieee754_pow+0x1ee>
 800876a:	b124      	cbz	r4, 8008776 <__ieee754_pow+0x1a6>
 800876c:	4b2f      	ldr	r3, [pc, #188]	; (800882c <__ieee754_pow+0x25c>)
 800876e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008772:	429a      	cmp	r2, r3
 8008774:	d123      	bne.n	80087be <__ieee754_pow+0x1ee>
 8008776:	f1b9 0f00 	cmp.w	r9, #0
 800877a:	da05      	bge.n	8008788 <__ieee754_pow+0x1b8>
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	2000      	movs	r0, #0
 8008782:	492a      	ldr	r1, [pc, #168]	; (800882c <__ieee754_pow+0x25c>)
 8008784:	f7f8 f87a 	bl	800087c <__aeabi_ddiv>
 8008788:	2d00      	cmp	r5, #0
 800878a:	f6bf af40 	bge.w	800860e <__ieee754_pow+0x3e>
 800878e:	9b04      	ldr	r3, [sp, #16]
 8008790:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008794:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008798:	4323      	orrs	r3, r4
 800879a:	d108      	bne.n	80087ae <__ieee754_pow+0x1de>
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	4610      	mov	r0, r2
 80087a2:	4619      	mov	r1, r3
 80087a4:	f7f7 fd88 	bl	80002b8 <__aeabi_dsub>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	e78f      	b.n	80086ce <__ieee754_pow+0xfe>
 80087ae:	9b04      	ldr	r3, [sp, #16]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	f47f af2c 	bne.w	800860e <__ieee754_pow+0x3e>
 80087b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087ba:	4619      	mov	r1, r3
 80087bc:	e727      	b.n	800860e <__ieee754_pow+0x3e>
 80087be:	0feb      	lsrs	r3, r5, #31
 80087c0:	3b01      	subs	r3, #1
 80087c2:	9306      	str	r3, [sp, #24]
 80087c4:	9a06      	ldr	r2, [sp, #24]
 80087c6:	9b04      	ldr	r3, [sp, #16]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	d102      	bne.n	80087d2 <__ieee754_pow+0x202>
 80087cc:	4632      	mov	r2, r6
 80087ce:	463b      	mov	r3, r7
 80087d0:	e7e6      	b.n	80087a0 <__ieee754_pow+0x1d0>
 80087d2:	4b19      	ldr	r3, [pc, #100]	; (8008838 <__ieee754_pow+0x268>)
 80087d4:	4598      	cmp	r8, r3
 80087d6:	f340 80fb 	ble.w	80089d0 <__ieee754_pow+0x400>
 80087da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80087de:	4598      	cmp	r8, r3
 80087e0:	4b13      	ldr	r3, [pc, #76]	; (8008830 <__ieee754_pow+0x260>)
 80087e2:	dd0c      	ble.n	80087fe <__ieee754_pow+0x22e>
 80087e4:	429c      	cmp	r4, r3
 80087e6:	dc0f      	bgt.n	8008808 <__ieee754_pow+0x238>
 80087e8:	f1b9 0f00 	cmp.w	r9, #0
 80087ec:	da0f      	bge.n	800880e <__ieee754_pow+0x23e>
 80087ee:	2000      	movs	r0, #0
 80087f0:	b009      	add	sp, #36	; 0x24
 80087f2:	ecbd 8b06 	vpop	{d8-d10}
 80087f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fa:	f000 bcf0 	b.w	80091de <__math_oflow>
 80087fe:	429c      	cmp	r4, r3
 8008800:	dbf2      	blt.n	80087e8 <__ieee754_pow+0x218>
 8008802:	4b0a      	ldr	r3, [pc, #40]	; (800882c <__ieee754_pow+0x25c>)
 8008804:	429c      	cmp	r4, r3
 8008806:	dd19      	ble.n	800883c <__ieee754_pow+0x26c>
 8008808:	f1b9 0f00 	cmp.w	r9, #0
 800880c:	dcef      	bgt.n	80087ee <__ieee754_pow+0x21e>
 800880e:	2000      	movs	r0, #0
 8008810:	b009      	add	sp, #36	; 0x24
 8008812:	ecbd 8b06 	vpop	{d8-d10}
 8008816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881a:	f000 bcd7 	b.w	80091cc <__math_uflow>
 800881e:	bf00      	nop
 8008820:	fff00000 	.word	0xfff00000
 8008824:	7ff00000 	.word	0x7ff00000
 8008828:	433fffff 	.word	0x433fffff
 800882c:	3ff00000 	.word	0x3ff00000
 8008830:	3fefffff 	.word	0x3fefffff
 8008834:	3fe00000 	.word	0x3fe00000
 8008838:	41e00000 	.word	0x41e00000
 800883c:	4b60      	ldr	r3, [pc, #384]	; (80089c0 <__ieee754_pow+0x3f0>)
 800883e:	2200      	movs	r2, #0
 8008840:	f7f7 fd3a 	bl	80002b8 <__aeabi_dsub>
 8008844:	a354      	add	r3, pc, #336	; (adr r3, 8008998 <__ieee754_pow+0x3c8>)
 8008846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884a:	4604      	mov	r4, r0
 800884c:	460d      	mov	r5, r1
 800884e:	f7f7 feeb 	bl	8000628 <__aeabi_dmul>
 8008852:	a353      	add	r3, pc, #332	; (adr r3, 80089a0 <__ieee754_pow+0x3d0>)
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	4606      	mov	r6, r0
 800885a:	460f      	mov	r7, r1
 800885c:	4620      	mov	r0, r4
 800885e:	4629      	mov	r1, r5
 8008860:	f7f7 fee2 	bl	8000628 <__aeabi_dmul>
 8008864:	4b57      	ldr	r3, [pc, #348]	; (80089c4 <__ieee754_pow+0x3f4>)
 8008866:	4682      	mov	sl, r0
 8008868:	468b      	mov	fp, r1
 800886a:	2200      	movs	r2, #0
 800886c:	4620      	mov	r0, r4
 800886e:	4629      	mov	r1, r5
 8008870:	f7f7 feda 	bl	8000628 <__aeabi_dmul>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	a14b      	add	r1, pc, #300	; (adr r1, 80089a8 <__ieee754_pow+0x3d8>)
 800887a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800887e:	f7f7 fd1b 	bl	80002b8 <__aeabi_dsub>
 8008882:	4622      	mov	r2, r4
 8008884:	462b      	mov	r3, r5
 8008886:	f7f7 fecf 	bl	8000628 <__aeabi_dmul>
 800888a:	4602      	mov	r2, r0
 800888c:	460b      	mov	r3, r1
 800888e:	2000      	movs	r0, #0
 8008890:	494d      	ldr	r1, [pc, #308]	; (80089c8 <__ieee754_pow+0x3f8>)
 8008892:	f7f7 fd11 	bl	80002b8 <__aeabi_dsub>
 8008896:	4622      	mov	r2, r4
 8008898:	4680      	mov	r8, r0
 800889a:	4689      	mov	r9, r1
 800889c:	462b      	mov	r3, r5
 800889e:	4620      	mov	r0, r4
 80088a0:	4629      	mov	r1, r5
 80088a2:	f7f7 fec1 	bl	8000628 <__aeabi_dmul>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	4640      	mov	r0, r8
 80088ac:	4649      	mov	r1, r9
 80088ae:	f7f7 febb 	bl	8000628 <__aeabi_dmul>
 80088b2:	a33f      	add	r3, pc, #252	; (adr r3, 80089b0 <__ieee754_pow+0x3e0>)
 80088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b8:	f7f7 feb6 	bl	8000628 <__aeabi_dmul>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4650      	mov	r0, sl
 80088c2:	4659      	mov	r1, fp
 80088c4:	f7f7 fcf8 	bl	80002b8 <__aeabi_dsub>
 80088c8:	4602      	mov	r2, r0
 80088ca:	460b      	mov	r3, r1
 80088cc:	4680      	mov	r8, r0
 80088ce:	4689      	mov	r9, r1
 80088d0:	4630      	mov	r0, r6
 80088d2:	4639      	mov	r1, r7
 80088d4:	f7f7 fcf2 	bl	80002bc <__adddf3>
 80088d8:	2000      	movs	r0, #0
 80088da:	4632      	mov	r2, r6
 80088dc:	463b      	mov	r3, r7
 80088de:	4604      	mov	r4, r0
 80088e0:	460d      	mov	r5, r1
 80088e2:	f7f7 fce9 	bl	80002b8 <__aeabi_dsub>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	4640      	mov	r0, r8
 80088ec:	4649      	mov	r1, r9
 80088ee:	f7f7 fce3 	bl	80002b8 <__aeabi_dsub>
 80088f2:	9b04      	ldr	r3, [sp, #16]
 80088f4:	9a06      	ldr	r2, [sp, #24]
 80088f6:	3b01      	subs	r3, #1
 80088f8:	4313      	orrs	r3, r2
 80088fa:	4682      	mov	sl, r0
 80088fc:	468b      	mov	fp, r1
 80088fe:	f040 81e7 	bne.w	8008cd0 <__ieee754_pow+0x700>
 8008902:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80089b8 <__ieee754_pow+0x3e8>
 8008906:	eeb0 8a47 	vmov.f32	s16, s14
 800890a:	eef0 8a67 	vmov.f32	s17, s15
 800890e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008912:	2600      	movs	r6, #0
 8008914:	4632      	mov	r2, r6
 8008916:	463b      	mov	r3, r7
 8008918:	e9dd 0100 	ldrd	r0, r1, [sp]
 800891c:	f7f7 fccc 	bl	80002b8 <__aeabi_dsub>
 8008920:	4622      	mov	r2, r4
 8008922:	462b      	mov	r3, r5
 8008924:	f7f7 fe80 	bl	8000628 <__aeabi_dmul>
 8008928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800892c:	4680      	mov	r8, r0
 800892e:	4689      	mov	r9, r1
 8008930:	4650      	mov	r0, sl
 8008932:	4659      	mov	r1, fp
 8008934:	f7f7 fe78 	bl	8000628 <__aeabi_dmul>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4640      	mov	r0, r8
 800893e:	4649      	mov	r1, r9
 8008940:	f7f7 fcbc 	bl	80002bc <__adddf3>
 8008944:	4632      	mov	r2, r6
 8008946:	463b      	mov	r3, r7
 8008948:	4680      	mov	r8, r0
 800894a:	4689      	mov	r9, r1
 800894c:	4620      	mov	r0, r4
 800894e:	4629      	mov	r1, r5
 8008950:	f7f7 fe6a 	bl	8000628 <__aeabi_dmul>
 8008954:	460b      	mov	r3, r1
 8008956:	4604      	mov	r4, r0
 8008958:	460d      	mov	r5, r1
 800895a:	4602      	mov	r2, r0
 800895c:	4649      	mov	r1, r9
 800895e:	4640      	mov	r0, r8
 8008960:	f7f7 fcac 	bl	80002bc <__adddf3>
 8008964:	4b19      	ldr	r3, [pc, #100]	; (80089cc <__ieee754_pow+0x3fc>)
 8008966:	4299      	cmp	r1, r3
 8008968:	ec45 4b19 	vmov	d9, r4, r5
 800896c:	4606      	mov	r6, r0
 800896e:	460f      	mov	r7, r1
 8008970:	468b      	mov	fp, r1
 8008972:	f340 82f1 	ble.w	8008f58 <__ieee754_pow+0x988>
 8008976:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800897a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800897e:	4303      	orrs	r3, r0
 8008980:	f000 81e4 	beq.w	8008d4c <__ieee754_pow+0x77c>
 8008984:	ec51 0b18 	vmov	r0, r1, d8
 8008988:	2200      	movs	r2, #0
 800898a:	2300      	movs	r3, #0
 800898c:	f7f8 f8be 	bl	8000b0c <__aeabi_dcmplt>
 8008990:	3800      	subs	r0, #0
 8008992:	bf18      	it	ne
 8008994:	2001      	movne	r0, #1
 8008996:	e72b      	b.n	80087f0 <__ieee754_pow+0x220>
 8008998:	60000000 	.word	0x60000000
 800899c:	3ff71547 	.word	0x3ff71547
 80089a0:	f85ddf44 	.word	0xf85ddf44
 80089a4:	3e54ae0b 	.word	0x3e54ae0b
 80089a8:	55555555 	.word	0x55555555
 80089ac:	3fd55555 	.word	0x3fd55555
 80089b0:	652b82fe 	.word	0x652b82fe
 80089b4:	3ff71547 	.word	0x3ff71547
 80089b8:	00000000 	.word	0x00000000
 80089bc:	bff00000 	.word	0xbff00000
 80089c0:	3ff00000 	.word	0x3ff00000
 80089c4:	3fd00000 	.word	0x3fd00000
 80089c8:	3fe00000 	.word	0x3fe00000
 80089cc:	408fffff 	.word	0x408fffff
 80089d0:	4bd5      	ldr	r3, [pc, #852]	; (8008d28 <__ieee754_pow+0x758>)
 80089d2:	402b      	ands	r3, r5
 80089d4:	2200      	movs	r2, #0
 80089d6:	b92b      	cbnz	r3, 80089e4 <__ieee754_pow+0x414>
 80089d8:	4bd4      	ldr	r3, [pc, #848]	; (8008d2c <__ieee754_pow+0x75c>)
 80089da:	f7f7 fe25 	bl	8000628 <__aeabi_dmul>
 80089de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80089e2:	460c      	mov	r4, r1
 80089e4:	1523      	asrs	r3, r4, #20
 80089e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80089ea:	4413      	add	r3, r2
 80089ec:	9305      	str	r3, [sp, #20]
 80089ee:	4bd0      	ldr	r3, [pc, #832]	; (8008d30 <__ieee754_pow+0x760>)
 80089f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80089f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80089f8:	429c      	cmp	r4, r3
 80089fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80089fe:	dd08      	ble.n	8008a12 <__ieee754_pow+0x442>
 8008a00:	4bcc      	ldr	r3, [pc, #816]	; (8008d34 <__ieee754_pow+0x764>)
 8008a02:	429c      	cmp	r4, r3
 8008a04:	f340 8162 	ble.w	8008ccc <__ieee754_pow+0x6fc>
 8008a08:	9b05      	ldr	r3, [sp, #20]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	9305      	str	r3, [sp, #20]
 8008a0e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008a12:	2400      	movs	r4, #0
 8008a14:	00e3      	lsls	r3, r4, #3
 8008a16:	9307      	str	r3, [sp, #28]
 8008a18:	4bc7      	ldr	r3, [pc, #796]	; (8008d38 <__ieee754_pow+0x768>)
 8008a1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a1e:	ed93 7b00 	vldr	d7, [r3]
 8008a22:	4629      	mov	r1, r5
 8008a24:	ec53 2b17 	vmov	r2, r3, d7
 8008a28:	eeb0 9a47 	vmov.f32	s18, s14
 8008a2c:	eef0 9a67 	vmov.f32	s19, s15
 8008a30:	4682      	mov	sl, r0
 8008a32:	f7f7 fc41 	bl	80002b8 <__aeabi_dsub>
 8008a36:	4652      	mov	r2, sl
 8008a38:	4606      	mov	r6, r0
 8008a3a:	460f      	mov	r7, r1
 8008a3c:	462b      	mov	r3, r5
 8008a3e:	ec51 0b19 	vmov	r0, r1, d9
 8008a42:	f7f7 fc3b 	bl	80002bc <__adddf3>
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	49bb      	ldr	r1, [pc, #748]	; (8008d3c <__ieee754_pow+0x76c>)
 8008a4e:	f7f7 ff15 	bl	800087c <__aeabi_ddiv>
 8008a52:	ec41 0b1a 	vmov	d10, r0, r1
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	f7f7 fde3 	bl	8000628 <__aeabi_dmul>
 8008a62:	2300      	movs	r3, #0
 8008a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a68:	9302      	str	r3, [sp, #8]
 8008a6a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008a6e:	46ab      	mov	fp, r5
 8008a70:	106d      	asrs	r5, r5, #1
 8008a72:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008a76:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008a7a:	ec41 0b18 	vmov	d8, r0, r1
 8008a7e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008a82:	2200      	movs	r2, #0
 8008a84:	4640      	mov	r0, r8
 8008a86:	4649      	mov	r1, r9
 8008a88:	4614      	mov	r4, r2
 8008a8a:	461d      	mov	r5, r3
 8008a8c:	f7f7 fdcc 	bl	8000628 <__aeabi_dmul>
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	4630      	mov	r0, r6
 8008a96:	4639      	mov	r1, r7
 8008a98:	f7f7 fc0e 	bl	80002b8 <__aeabi_dsub>
 8008a9c:	ec53 2b19 	vmov	r2, r3, d9
 8008aa0:	4606      	mov	r6, r0
 8008aa2:	460f      	mov	r7, r1
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	f7f7 fc06 	bl	80002b8 <__aeabi_dsub>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4650      	mov	r0, sl
 8008ab2:	4659      	mov	r1, fp
 8008ab4:	f7f7 fc00 	bl	80002b8 <__aeabi_dsub>
 8008ab8:	4642      	mov	r2, r8
 8008aba:	464b      	mov	r3, r9
 8008abc:	f7f7 fdb4 	bl	8000628 <__aeabi_dmul>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	4639      	mov	r1, r7
 8008ac8:	f7f7 fbf6 	bl	80002b8 <__aeabi_dsub>
 8008acc:	ec53 2b1a 	vmov	r2, r3, d10
 8008ad0:	f7f7 fdaa 	bl	8000628 <__aeabi_dmul>
 8008ad4:	ec53 2b18 	vmov	r2, r3, d8
 8008ad8:	ec41 0b19 	vmov	d9, r0, r1
 8008adc:	ec51 0b18 	vmov	r0, r1, d8
 8008ae0:	f7f7 fda2 	bl	8000628 <__aeabi_dmul>
 8008ae4:	a37c      	add	r3, pc, #496	; (adr r3, 8008cd8 <__ieee754_pow+0x708>)
 8008ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aea:	4604      	mov	r4, r0
 8008aec:	460d      	mov	r5, r1
 8008aee:	f7f7 fd9b 	bl	8000628 <__aeabi_dmul>
 8008af2:	a37b      	add	r3, pc, #492	; (adr r3, 8008ce0 <__ieee754_pow+0x710>)
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	f7f7 fbe0 	bl	80002bc <__adddf3>
 8008afc:	4622      	mov	r2, r4
 8008afe:	462b      	mov	r3, r5
 8008b00:	f7f7 fd92 	bl	8000628 <__aeabi_dmul>
 8008b04:	a378      	add	r3, pc, #480	; (adr r3, 8008ce8 <__ieee754_pow+0x718>)
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	f7f7 fbd7 	bl	80002bc <__adddf3>
 8008b0e:	4622      	mov	r2, r4
 8008b10:	462b      	mov	r3, r5
 8008b12:	f7f7 fd89 	bl	8000628 <__aeabi_dmul>
 8008b16:	a376      	add	r3, pc, #472	; (adr r3, 8008cf0 <__ieee754_pow+0x720>)
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	f7f7 fbce 	bl	80002bc <__adddf3>
 8008b20:	4622      	mov	r2, r4
 8008b22:	462b      	mov	r3, r5
 8008b24:	f7f7 fd80 	bl	8000628 <__aeabi_dmul>
 8008b28:	a373      	add	r3, pc, #460	; (adr r3, 8008cf8 <__ieee754_pow+0x728>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f7f7 fbc5 	bl	80002bc <__adddf3>
 8008b32:	4622      	mov	r2, r4
 8008b34:	462b      	mov	r3, r5
 8008b36:	f7f7 fd77 	bl	8000628 <__aeabi_dmul>
 8008b3a:	a371      	add	r3, pc, #452	; (adr r3, 8008d00 <__ieee754_pow+0x730>)
 8008b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b40:	f7f7 fbbc 	bl	80002bc <__adddf3>
 8008b44:	4622      	mov	r2, r4
 8008b46:	4606      	mov	r6, r0
 8008b48:	460f      	mov	r7, r1
 8008b4a:	462b      	mov	r3, r5
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	4629      	mov	r1, r5
 8008b50:	f7f7 fd6a 	bl	8000628 <__aeabi_dmul>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4630      	mov	r0, r6
 8008b5a:	4639      	mov	r1, r7
 8008b5c:	f7f7 fd64 	bl	8000628 <__aeabi_dmul>
 8008b60:	4642      	mov	r2, r8
 8008b62:	4604      	mov	r4, r0
 8008b64:	460d      	mov	r5, r1
 8008b66:	464b      	mov	r3, r9
 8008b68:	ec51 0b18 	vmov	r0, r1, d8
 8008b6c:	f7f7 fba6 	bl	80002bc <__adddf3>
 8008b70:	ec53 2b19 	vmov	r2, r3, d9
 8008b74:	f7f7 fd58 	bl	8000628 <__aeabi_dmul>
 8008b78:	4622      	mov	r2, r4
 8008b7a:	462b      	mov	r3, r5
 8008b7c:	f7f7 fb9e 	bl	80002bc <__adddf3>
 8008b80:	4642      	mov	r2, r8
 8008b82:	4682      	mov	sl, r0
 8008b84:	468b      	mov	fp, r1
 8008b86:	464b      	mov	r3, r9
 8008b88:	4640      	mov	r0, r8
 8008b8a:	4649      	mov	r1, r9
 8008b8c:	f7f7 fd4c 	bl	8000628 <__aeabi_dmul>
 8008b90:	4b6b      	ldr	r3, [pc, #428]	; (8008d40 <__ieee754_pow+0x770>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	4606      	mov	r6, r0
 8008b96:	460f      	mov	r7, r1
 8008b98:	f7f7 fb90 	bl	80002bc <__adddf3>
 8008b9c:	4652      	mov	r2, sl
 8008b9e:	465b      	mov	r3, fp
 8008ba0:	f7f7 fb8c 	bl	80002bc <__adddf3>
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	4604      	mov	r4, r0
 8008ba8:	460d      	mov	r5, r1
 8008baa:	4602      	mov	r2, r0
 8008bac:	460b      	mov	r3, r1
 8008bae:	4640      	mov	r0, r8
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	f7f7 fd39 	bl	8000628 <__aeabi_dmul>
 8008bb6:	4b62      	ldr	r3, [pc, #392]	; (8008d40 <__ieee754_pow+0x770>)
 8008bb8:	4680      	mov	r8, r0
 8008bba:	4689      	mov	r9, r1
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	f7f7 fb79 	bl	80002b8 <__aeabi_dsub>
 8008bc6:	4632      	mov	r2, r6
 8008bc8:	463b      	mov	r3, r7
 8008bca:	f7f7 fb75 	bl	80002b8 <__aeabi_dsub>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4650      	mov	r0, sl
 8008bd4:	4659      	mov	r1, fp
 8008bd6:	f7f7 fb6f 	bl	80002b8 <__aeabi_dsub>
 8008bda:	ec53 2b18 	vmov	r2, r3, d8
 8008bde:	f7f7 fd23 	bl	8000628 <__aeabi_dmul>
 8008be2:	4622      	mov	r2, r4
 8008be4:	4606      	mov	r6, r0
 8008be6:	460f      	mov	r7, r1
 8008be8:	462b      	mov	r3, r5
 8008bea:	ec51 0b19 	vmov	r0, r1, d9
 8008bee:	f7f7 fd1b 	bl	8000628 <__aeabi_dmul>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	f7f7 fb5f 	bl	80002bc <__adddf3>
 8008bfe:	4606      	mov	r6, r0
 8008c00:	460f      	mov	r7, r1
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4640      	mov	r0, r8
 8008c08:	4649      	mov	r1, r9
 8008c0a:	f7f7 fb57 	bl	80002bc <__adddf3>
 8008c0e:	a33e      	add	r3, pc, #248	; (adr r3, 8008d08 <__ieee754_pow+0x738>)
 8008c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c14:	2000      	movs	r0, #0
 8008c16:	4604      	mov	r4, r0
 8008c18:	460d      	mov	r5, r1
 8008c1a:	f7f7 fd05 	bl	8000628 <__aeabi_dmul>
 8008c1e:	4642      	mov	r2, r8
 8008c20:	ec41 0b18 	vmov	d8, r0, r1
 8008c24:	464b      	mov	r3, r9
 8008c26:	4620      	mov	r0, r4
 8008c28:	4629      	mov	r1, r5
 8008c2a:	f7f7 fb45 	bl	80002b8 <__aeabi_dsub>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4630      	mov	r0, r6
 8008c34:	4639      	mov	r1, r7
 8008c36:	f7f7 fb3f 	bl	80002b8 <__aeabi_dsub>
 8008c3a:	a335      	add	r3, pc, #212	; (adr r3, 8008d10 <__ieee754_pow+0x740>)
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f7f7 fcf2 	bl	8000628 <__aeabi_dmul>
 8008c44:	a334      	add	r3, pc, #208	; (adr r3, 8008d18 <__ieee754_pow+0x748>)
 8008c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	460f      	mov	r7, r1
 8008c4e:	4620      	mov	r0, r4
 8008c50:	4629      	mov	r1, r5
 8008c52:	f7f7 fce9 	bl	8000628 <__aeabi_dmul>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	f7f7 fb2d 	bl	80002bc <__adddf3>
 8008c62:	9a07      	ldr	r2, [sp, #28]
 8008c64:	4b37      	ldr	r3, [pc, #220]	; (8008d44 <__ieee754_pow+0x774>)
 8008c66:	4413      	add	r3, r2
 8008c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6c:	f7f7 fb26 	bl	80002bc <__adddf3>
 8008c70:	4682      	mov	sl, r0
 8008c72:	9805      	ldr	r0, [sp, #20]
 8008c74:	468b      	mov	fp, r1
 8008c76:	f7f7 fc6d 	bl	8000554 <__aeabi_i2d>
 8008c7a:	9a07      	ldr	r2, [sp, #28]
 8008c7c:	4b32      	ldr	r3, [pc, #200]	; (8008d48 <__ieee754_pow+0x778>)
 8008c7e:	4413      	add	r3, r2
 8008c80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c84:	4606      	mov	r6, r0
 8008c86:	460f      	mov	r7, r1
 8008c88:	4652      	mov	r2, sl
 8008c8a:	465b      	mov	r3, fp
 8008c8c:	ec51 0b18 	vmov	r0, r1, d8
 8008c90:	f7f7 fb14 	bl	80002bc <__adddf3>
 8008c94:	4642      	mov	r2, r8
 8008c96:	464b      	mov	r3, r9
 8008c98:	f7f7 fb10 	bl	80002bc <__adddf3>
 8008c9c:	4632      	mov	r2, r6
 8008c9e:	463b      	mov	r3, r7
 8008ca0:	f7f7 fb0c 	bl	80002bc <__adddf3>
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	4632      	mov	r2, r6
 8008ca8:	463b      	mov	r3, r7
 8008caa:	4604      	mov	r4, r0
 8008cac:	460d      	mov	r5, r1
 8008cae:	f7f7 fb03 	bl	80002b8 <__aeabi_dsub>
 8008cb2:	4642      	mov	r2, r8
 8008cb4:	464b      	mov	r3, r9
 8008cb6:	f7f7 faff 	bl	80002b8 <__aeabi_dsub>
 8008cba:	ec53 2b18 	vmov	r2, r3, d8
 8008cbe:	f7f7 fafb 	bl	80002b8 <__aeabi_dsub>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4650      	mov	r0, sl
 8008cc8:	4659      	mov	r1, fp
 8008cca:	e610      	b.n	80088ee <__ieee754_pow+0x31e>
 8008ccc:	2401      	movs	r4, #1
 8008cce:	e6a1      	b.n	8008a14 <__ieee754_pow+0x444>
 8008cd0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008d20 <__ieee754_pow+0x750>
 8008cd4:	e617      	b.n	8008906 <__ieee754_pow+0x336>
 8008cd6:	bf00      	nop
 8008cd8:	4a454eef 	.word	0x4a454eef
 8008cdc:	3fca7e28 	.word	0x3fca7e28
 8008ce0:	93c9db65 	.word	0x93c9db65
 8008ce4:	3fcd864a 	.word	0x3fcd864a
 8008ce8:	a91d4101 	.word	0xa91d4101
 8008cec:	3fd17460 	.word	0x3fd17460
 8008cf0:	518f264d 	.word	0x518f264d
 8008cf4:	3fd55555 	.word	0x3fd55555
 8008cf8:	db6fabff 	.word	0xdb6fabff
 8008cfc:	3fdb6db6 	.word	0x3fdb6db6
 8008d00:	33333303 	.word	0x33333303
 8008d04:	3fe33333 	.word	0x3fe33333
 8008d08:	e0000000 	.word	0xe0000000
 8008d0c:	3feec709 	.word	0x3feec709
 8008d10:	dc3a03fd 	.word	0xdc3a03fd
 8008d14:	3feec709 	.word	0x3feec709
 8008d18:	145b01f5 	.word	0x145b01f5
 8008d1c:	be3e2fe0 	.word	0xbe3e2fe0
 8008d20:	00000000 	.word	0x00000000
 8008d24:	3ff00000 	.word	0x3ff00000
 8008d28:	7ff00000 	.word	0x7ff00000
 8008d2c:	43400000 	.word	0x43400000
 8008d30:	0003988e 	.word	0x0003988e
 8008d34:	000bb679 	.word	0x000bb679
 8008d38:	08009a40 	.word	0x08009a40
 8008d3c:	3ff00000 	.word	0x3ff00000
 8008d40:	40080000 	.word	0x40080000
 8008d44:	08009a60 	.word	0x08009a60
 8008d48:	08009a50 	.word	0x08009a50
 8008d4c:	a3b5      	add	r3, pc, #724	; (adr r3, 8009024 <__ieee754_pow+0xa54>)
 8008d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d52:	4640      	mov	r0, r8
 8008d54:	4649      	mov	r1, r9
 8008d56:	f7f7 fab1 	bl	80002bc <__adddf3>
 8008d5a:	4622      	mov	r2, r4
 8008d5c:	ec41 0b1a 	vmov	d10, r0, r1
 8008d60:	462b      	mov	r3, r5
 8008d62:	4630      	mov	r0, r6
 8008d64:	4639      	mov	r1, r7
 8008d66:	f7f7 faa7 	bl	80002b8 <__aeabi_dsub>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	ec51 0b1a 	vmov	r0, r1, d10
 8008d72:	f7f7 fee9 	bl	8000b48 <__aeabi_dcmpgt>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	f47f ae04 	bne.w	8008984 <__ieee754_pow+0x3b4>
 8008d7c:	4aa4      	ldr	r2, [pc, #656]	; (8009010 <__ieee754_pow+0xa40>)
 8008d7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d82:	4293      	cmp	r3, r2
 8008d84:	f340 8108 	ble.w	8008f98 <__ieee754_pow+0x9c8>
 8008d88:	151b      	asrs	r3, r3, #20
 8008d8a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008d8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008d92:	fa4a f303 	asr.w	r3, sl, r3
 8008d96:	445b      	add	r3, fp
 8008d98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008d9c:	4e9d      	ldr	r6, [pc, #628]	; (8009014 <__ieee754_pow+0xa44>)
 8008d9e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008da2:	4116      	asrs	r6, r2
 8008da4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008da8:	2000      	movs	r0, #0
 8008daa:	ea23 0106 	bic.w	r1, r3, r6
 8008dae:	f1c2 0214 	rsb	r2, r2, #20
 8008db2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008db6:	fa4a fa02 	asr.w	sl, sl, r2
 8008dba:	f1bb 0f00 	cmp.w	fp, #0
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	bfb8      	it	lt
 8008dc8:	f1ca 0a00 	rsblt	sl, sl, #0
 8008dcc:	f7f7 fa74 	bl	80002b8 <__aeabi_dsub>
 8008dd0:	ec41 0b19 	vmov	d9, r0, r1
 8008dd4:	4642      	mov	r2, r8
 8008dd6:	464b      	mov	r3, r9
 8008dd8:	ec51 0b19 	vmov	r0, r1, d9
 8008ddc:	f7f7 fa6e 	bl	80002bc <__adddf3>
 8008de0:	a37b      	add	r3, pc, #492	; (adr r3, 8008fd0 <__ieee754_pow+0xa00>)
 8008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de6:	2000      	movs	r0, #0
 8008de8:	4604      	mov	r4, r0
 8008dea:	460d      	mov	r5, r1
 8008dec:	f7f7 fc1c 	bl	8000628 <__aeabi_dmul>
 8008df0:	ec53 2b19 	vmov	r2, r3, d9
 8008df4:	4606      	mov	r6, r0
 8008df6:	460f      	mov	r7, r1
 8008df8:	4620      	mov	r0, r4
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	f7f7 fa5c 	bl	80002b8 <__aeabi_dsub>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4640      	mov	r0, r8
 8008e06:	4649      	mov	r1, r9
 8008e08:	f7f7 fa56 	bl	80002b8 <__aeabi_dsub>
 8008e0c:	a372      	add	r3, pc, #456	; (adr r3, 8008fd8 <__ieee754_pow+0xa08>)
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	f7f7 fc09 	bl	8000628 <__aeabi_dmul>
 8008e16:	a372      	add	r3, pc, #456	; (adr r3, 8008fe0 <__ieee754_pow+0xa10>)
 8008e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1c:	4680      	mov	r8, r0
 8008e1e:	4689      	mov	r9, r1
 8008e20:	4620      	mov	r0, r4
 8008e22:	4629      	mov	r1, r5
 8008e24:	f7f7 fc00 	bl	8000628 <__aeabi_dmul>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4640      	mov	r0, r8
 8008e2e:	4649      	mov	r1, r9
 8008e30:	f7f7 fa44 	bl	80002bc <__adddf3>
 8008e34:	4604      	mov	r4, r0
 8008e36:	460d      	mov	r5, r1
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	4639      	mov	r1, r7
 8008e40:	f7f7 fa3c 	bl	80002bc <__adddf3>
 8008e44:	4632      	mov	r2, r6
 8008e46:	463b      	mov	r3, r7
 8008e48:	4680      	mov	r8, r0
 8008e4a:	4689      	mov	r9, r1
 8008e4c:	f7f7 fa34 	bl	80002b8 <__aeabi_dsub>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4620      	mov	r0, r4
 8008e56:	4629      	mov	r1, r5
 8008e58:	f7f7 fa2e 	bl	80002b8 <__aeabi_dsub>
 8008e5c:	4642      	mov	r2, r8
 8008e5e:	4606      	mov	r6, r0
 8008e60:	460f      	mov	r7, r1
 8008e62:	464b      	mov	r3, r9
 8008e64:	4640      	mov	r0, r8
 8008e66:	4649      	mov	r1, r9
 8008e68:	f7f7 fbde 	bl	8000628 <__aeabi_dmul>
 8008e6c:	a35e      	add	r3, pc, #376	; (adr r3, 8008fe8 <__ieee754_pow+0xa18>)
 8008e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e72:	4604      	mov	r4, r0
 8008e74:	460d      	mov	r5, r1
 8008e76:	f7f7 fbd7 	bl	8000628 <__aeabi_dmul>
 8008e7a:	a35d      	add	r3, pc, #372	; (adr r3, 8008ff0 <__ieee754_pow+0xa20>)
 8008e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e80:	f7f7 fa1a 	bl	80002b8 <__aeabi_dsub>
 8008e84:	4622      	mov	r2, r4
 8008e86:	462b      	mov	r3, r5
 8008e88:	f7f7 fbce 	bl	8000628 <__aeabi_dmul>
 8008e8c:	a35a      	add	r3, pc, #360	; (adr r3, 8008ff8 <__ieee754_pow+0xa28>)
 8008e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e92:	f7f7 fa13 	bl	80002bc <__adddf3>
 8008e96:	4622      	mov	r2, r4
 8008e98:	462b      	mov	r3, r5
 8008e9a:	f7f7 fbc5 	bl	8000628 <__aeabi_dmul>
 8008e9e:	a358      	add	r3, pc, #352	; (adr r3, 8009000 <__ieee754_pow+0xa30>)
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f7f7 fa08 	bl	80002b8 <__aeabi_dsub>
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	462b      	mov	r3, r5
 8008eac:	f7f7 fbbc 	bl	8000628 <__aeabi_dmul>
 8008eb0:	a355      	add	r3, pc, #340	; (adr r3, 8009008 <__ieee754_pow+0xa38>)
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	f7f7 fa01 	bl	80002bc <__adddf3>
 8008eba:	4622      	mov	r2, r4
 8008ebc:	462b      	mov	r3, r5
 8008ebe:	f7f7 fbb3 	bl	8000628 <__aeabi_dmul>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4640      	mov	r0, r8
 8008ec8:	4649      	mov	r1, r9
 8008eca:	f7f7 f9f5 	bl	80002b8 <__aeabi_dsub>
 8008ece:	4604      	mov	r4, r0
 8008ed0:	460d      	mov	r5, r1
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	4649      	mov	r1, r9
 8008eda:	f7f7 fba5 	bl	8000628 <__aeabi_dmul>
 8008ede:	2200      	movs	r2, #0
 8008ee0:	ec41 0b19 	vmov	d9, r0, r1
 8008ee4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ee8:	4620      	mov	r0, r4
 8008eea:	4629      	mov	r1, r5
 8008eec:	f7f7 f9e4 	bl	80002b8 <__aeabi_dsub>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	ec51 0b19 	vmov	r0, r1, d9
 8008ef8:	f7f7 fcc0 	bl	800087c <__aeabi_ddiv>
 8008efc:	4632      	mov	r2, r6
 8008efe:	4604      	mov	r4, r0
 8008f00:	460d      	mov	r5, r1
 8008f02:	463b      	mov	r3, r7
 8008f04:	4640      	mov	r0, r8
 8008f06:	4649      	mov	r1, r9
 8008f08:	f7f7 fb8e 	bl	8000628 <__aeabi_dmul>
 8008f0c:	4632      	mov	r2, r6
 8008f0e:	463b      	mov	r3, r7
 8008f10:	f7f7 f9d4 	bl	80002bc <__adddf3>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4620      	mov	r0, r4
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	f7f7 f9cc 	bl	80002b8 <__aeabi_dsub>
 8008f20:	4642      	mov	r2, r8
 8008f22:	464b      	mov	r3, r9
 8008f24:	f7f7 f9c8 	bl	80002b8 <__aeabi_dsub>
 8008f28:	460b      	mov	r3, r1
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	493a      	ldr	r1, [pc, #232]	; (8009018 <__ieee754_pow+0xa48>)
 8008f2e:	2000      	movs	r0, #0
 8008f30:	f7f7 f9c2 	bl	80002b8 <__aeabi_dsub>
 8008f34:	ec41 0b10 	vmov	d0, r0, r1
 8008f38:	ee10 3a90 	vmov	r3, s1
 8008f3c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f44:	da2b      	bge.n	8008f9e <__ieee754_pow+0x9ce>
 8008f46:	4650      	mov	r0, sl
 8008f48:	f000 f966 	bl	8009218 <scalbn>
 8008f4c:	ec51 0b10 	vmov	r0, r1, d0
 8008f50:	ec53 2b18 	vmov	r2, r3, d8
 8008f54:	f7ff bbed 	b.w	8008732 <__ieee754_pow+0x162>
 8008f58:	4b30      	ldr	r3, [pc, #192]	; (800901c <__ieee754_pow+0xa4c>)
 8008f5a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008f5e:	429e      	cmp	r6, r3
 8008f60:	f77f af0c 	ble.w	8008d7c <__ieee754_pow+0x7ac>
 8008f64:	4b2e      	ldr	r3, [pc, #184]	; (8009020 <__ieee754_pow+0xa50>)
 8008f66:	440b      	add	r3, r1
 8008f68:	4303      	orrs	r3, r0
 8008f6a:	d009      	beq.n	8008f80 <__ieee754_pow+0x9b0>
 8008f6c:	ec51 0b18 	vmov	r0, r1, d8
 8008f70:	2200      	movs	r2, #0
 8008f72:	2300      	movs	r3, #0
 8008f74:	f7f7 fdca 	bl	8000b0c <__aeabi_dcmplt>
 8008f78:	3800      	subs	r0, #0
 8008f7a:	bf18      	it	ne
 8008f7c:	2001      	movne	r0, #1
 8008f7e:	e447      	b.n	8008810 <__ieee754_pow+0x240>
 8008f80:	4622      	mov	r2, r4
 8008f82:	462b      	mov	r3, r5
 8008f84:	f7f7 f998 	bl	80002b8 <__aeabi_dsub>
 8008f88:	4642      	mov	r2, r8
 8008f8a:	464b      	mov	r3, r9
 8008f8c:	f7f7 fdd2 	bl	8000b34 <__aeabi_dcmpge>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	f43f aef3 	beq.w	8008d7c <__ieee754_pow+0x7ac>
 8008f96:	e7e9      	b.n	8008f6c <__ieee754_pow+0x99c>
 8008f98:	f04f 0a00 	mov.w	sl, #0
 8008f9c:	e71a      	b.n	8008dd4 <__ieee754_pow+0x804>
 8008f9e:	ec51 0b10 	vmov	r0, r1, d0
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	e7d4      	b.n	8008f50 <__ieee754_pow+0x980>
 8008fa6:	491c      	ldr	r1, [pc, #112]	; (8009018 <__ieee754_pow+0xa48>)
 8008fa8:	2000      	movs	r0, #0
 8008faa:	f7ff bb30 	b.w	800860e <__ieee754_pow+0x3e>
 8008fae:	2000      	movs	r0, #0
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	f7ff bb2c 	b.w	800860e <__ieee754_pow+0x3e>
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	4639      	mov	r1, r7
 8008fba:	f7ff bb28 	b.w	800860e <__ieee754_pow+0x3e>
 8008fbe:	9204      	str	r2, [sp, #16]
 8008fc0:	f7ff bb7a 	b.w	80086b8 <__ieee754_pow+0xe8>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f7ff bb64 	b.w	8008692 <__ieee754_pow+0xc2>
 8008fca:	bf00      	nop
 8008fcc:	f3af 8000 	nop.w
 8008fd0:	00000000 	.word	0x00000000
 8008fd4:	3fe62e43 	.word	0x3fe62e43
 8008fd8:	fefa39ef 	.word	0xfefa39ef
 8008fdc:	3fe62e42 	.word	0x3fe62e42
 8008fe0:	0ca86c39 	.word	0x0ca86c39
 8008fe4:	be205c61 	.word	0xbe205c61
 8008fe8:	72bea4d0 	.word	0x72bea4d0
 8008fec:	3e663769 	.word	0x3e663769
 8008ff0:	c5d26bf1 	.word	0xc5d26bf1
 8008ff4:	3ebbbd41 	.word	0x3ebbbd41
 8008ff8:	af25de2c 	.word	0xaf25de2c
 8008ffc:	3f11566a 	.word	0x3f11566a
 8009000:	16bebd93 	.word	0x16bebd93
 8009004:	3f66c16c 	.word	0x3f66c16c
 8009008:	5555553e 	.word	0x5555553e
 800900c:	3fc55555 	.word	0x3fc55555
 8009010:	3fe00000 	.word	0x3fe00000
 8009014:	000fffff 	.word	0x000fffff
 8009018:	3ff00000 	.word	0x3ff00000
 800901c:	4090cbff 	.word	0x4090cbff
 8009020:	3f6f3400 	.word	0x3f6f3400
 8009024:	652b82fe 	.word	0x652b82fe
 8009028:	3c971547 	.word	0x3c971547

0800902c <__ieee754_sqrt>:
 800902c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009030:	ec55 4b10 	vmov	r4, r5, d0
 8009034:	4e55      	ldr	r6, [pc, #340]	; (800918c <__ieee754_sqrt+0x160>)
 8009036:	43ae      	bics	r6, r5
 8009038:	ee10 0a10 	vmov	r0, s0
 800903c:	ee10 3a10 	vmov	r3, s0
 8009040:	462a      	mov	r2, r5
 8009042:	4629      	mov	r1, r5
 8009044:	d110      	bne.n	8009068 <__ieee754_sqrt+0x3c>
 8009046:	ee10 2a10 	vmov	r2, s0
 800904a:	462b      	mov	r3, r5
 800904c:	f7f7 faec 	bl	8000628 <__aeabi_dmul>
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	4620      	mov	r0, r4
 8009056:	4629      	mov	r1, r5
 8009058:	f7f7 f930 	bl	80002bc <__adddf3>
 800905c:	4604      	mov	r4, r0
 800905e:	460d      	mov	r5, r1
 8009060:	ec45 4b10 	vmov	d0, r4, r5
 8009064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009068:	2d00      	cmp	r5, #0
 800906a:	dc10      	bgt.n	800908e <__ieee754_sqrt+0x62>
 800906c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009070:	4330      	orrs	r0, r6
 8009072:	d0f5      	beq.n	8009060 <__ieee754_sqrt+0x34>
 8009074:	b15d      	cbz	r5, 800908e <__ieee754_sqrt+0x62>
 8009076:	ee10 2a10 	vmov	r2, s0
 800907a:	462b      	mov	r3, r5
 800907c:	ee10 0a10 	vmov	r0, s0
 8009080:	f7f7 f91a 	bl	80002b8 <__aeabi_dsub>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	f7f7 fbf8 	bl	800087c <__aeabi_ddiv>
 800908c:	e7e6      	b.n	800905c <__ieee754_sqrt+0x30>
 800908e:	1512      	asrs	r2, r2, #20
 8009090:	d074      	beq.n	800917c <__ieee754_sqrt+0x150>
 8009092:	07d4      	lsls	r4, r2, #31
 8009094:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009098:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800909c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80090a0:	bf5e      	ittt	pl
 80090a2:	0fda      	lsrpl	r2, r3, #31
 80090a4:	005b      	lslpl	r3, r3, #1
 80090a6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80090aa:	2400      	movs	r4, #0
 80090ac:	0fda      	lsrs	r2, r3, #31
 80090ae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80090b2:	107f      	asrs	r7, r7, #1
 80090b4:	005b      	lsls	r3, r3, #1
 80090b6:	2516      	movs	r5, #22
 80090b8:	4620      	mov	r0, r4
 80090ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80090be:	1886      	adds	r6, r0, r2
 80090c0:	428e      	cmp	r6, r1
 80090c2:	bfde      	ittt	le
 80090c4:	1b89      	suble	r1, r1, r6
 80090c6:	18b0      	addle	r0, r6, r2
 80090c8:	18a4      	addle	r4, r4, r2
 80090ca:	0049      	lsls	r1, r1, #1
 80090cc:	3d01      	subs	r5, #1
 80090ce:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80090d2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80090d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80090da:	d1f0      	bne.n	80090be <__ieee754_sqrt+0x92>
 80090dc:	462a      	mov	r2, r5
 80090de:	f04f 0e20 	mov.w	lr, #32
 80090e2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80090e6:	4281      	cmp	r1, r0
 80090e8:	eb06 0c05 	add.w	ip, r6, r5
 80090ec:	dc02      	bgt.n	80090f4 <__ieee754_sqrt+0xc8>
 80090ee:	d113      	bne.n	8009118 <__ieee754_sqrt+0xec>
 80090f0:	459c      	cmp	ip, r3
 80090f2:	d811      	bhi.n	8009118 <__ieee754_sqrt+0xec>
 80090f4:	f1bc 0f00 	cmp.w	ip, #0
 80090f8:	eb0c 0506 	add.w	r5, ip, r6
 80090fc:	da43      	bge.n	8009186 <__ieee754_sqrt+0x15a>
 80090fe:	2d00      	cmp	r5, #0
 8009100:	db41      	blt.n	8009186 <__ieee754_sqrt+0x15a>
 8009102:	f100 0801 	add.w	r8, r0, #1
 8009106:	1a09      	subs	r1, r1, r0
 8009108:	459c      	cmp	ip, r3
 800910a:	bf88      	it	hi
 800910c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009110:	eba3 030c 	sub.w	r3, r3, ip
 8009114:	4432      	add	r2, r6
 8009116:	4640      	mov	r0, r8
 8009118:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800911c:	f1be 0e01 	subs.w	lr, lr, #1
 8009120:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009124:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009128:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800912c:	d1db      	bne.n	80090e6 <__ieee754_sqrt+0xba>
 800912e:	430b      	orrs	r3, r1
 8009130:	d006      	beq.n	8009140 <__ieee754_sqrt+0x114>
 8009132:	1c50      	adds	r0, r2, #1
 8009134:	bf13      	iteet	ne
 8009136:	3201      	addne	r2, #1
 8009138:	3401      	addeq	r4, #1
 800913a:	4672      	moveq	r2, lr
 800913c:	f022 0201 	bicne.w	r2, r2, #1
 8009140:	1063      	asrs	r3, r4, #1
 8009142:	0852      	lsrs	r2, r2, #1
 8009144:	07e1      	lsls	r1, r4, #31
 8009146:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800914a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800914e:	bf48      	it	mi
 8009150:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009154:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009158:	4614      	mov	r4, r2
 800915a:	e781      	b.n	8009060 <__ieee754_sqrt+0x34>
 800915c:	0ad9      	lsrs	r1, r3, #11
 800915e:	3815      	subs	r0, #21
 8009160:	055b      	lsls	r3, r3, #21
 8009162:	2900      	cmp	r1, #0
 8009164:	d0fa      	beq.n	800915c <__ieee754_sqrt+0x130>
 8009166:	02cd      	lsls	r5, r1, #11
 8009168:	d50a      	bpl.n	8009180 <__ieee754_sqrt+0x154>
 800916a:	f1c2 0420 	rsb	r4, r2, #32
 800916e:	fa23 f404 	lsr.w	r4, r3, r4
 8009172:	1e55      	subs	r5, r2, #1
 8009174:	4093      	lsls	r3, r2
 8009176:	4321      	orrs	r1, r4
 8009178:	1b42      	subs	r2, r0, r5
 800917a:	e78a      	b.n	8009092 <__ieee754_sqrt+0x66>
 800917c:	4610      	mov	r0, r2
 800917e:	e7f0      	b.n	8009162 <__ieee754_sqrt+0x136>
 8009180:	0049      	lsls	r1, r1, #1
 8009182:	3201      	adds	r2, #1
 8009184:	e7ef      	b.n	8009166 <__ieee754_sqrt+0x13a>
 8009186:	4680      	mov	r8, r0
 8009188:	e7bd      	b.n	8009106 <__ieee754_sqrt+0xda>
 800918a:	bf00      	nop
 800918c:	7ff00000 	.word	0x7ff00000

08009190 <with_errno>:
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	4604      	mov	r4, r0
 8009194:	460d      	mov	r5, r1
 8009196:	4616      	mov	r6, r2
 8009198:	f7fb fd96 	bl	8004cc8 <__errno>
 800919c:	4629      	mov	r1, r5
 800919e:	6006      	str	r6, [r0, #0]
 80091a0:	4620      	mov	r0, r4
 80091a2:	bd70      	pop	{r4, r5, r6, pc}

080091a4 <xflow>:
 80091a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091a6:	4614      	mov	r4, r2
 80091a8:	461d      	mov	r5, r3
 80091aa:	b108      	cbz	r0, 80091b0 <xflow+0xc>
 80091ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80091b0:	e9cd 2300 	strd	r2, r3, [sp]
 80091b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091b8:	4620      	mov	r0, r4
 80091ba:	4629      	mov	r1, r5
 80091bc:	f7f7 fa34 	bl	8000628 <__aeabi_dmul>
 80091c0:	2222      	movs	r2, #34	; 0x22
 80091c2:	b003      	add	sp, #12
 80091c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091c8:	f7ff bfe2 	b.w	8009190 <with_errno>

080091cc <__math_uflow>:
 80091cc:	b508      	push	{r3, lr}
 80091ce:	2200      	movs	r2, #0
 80091d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091d4:	f7ff ffe6 	bl	80091a4 <xflow>
 80091d8:	ec41 0b10 	vmov	d0, r0, r1
 80091dc:	bd08      	pop	{r3, pc}

080091de <__math_oflow>:
 80091de:	b508      	push	{r3, lr}
 80091e0:	2200      	movs	r2, #0
 80091e2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80091e6:	f7ff ffdd 	bl	80091a4 <xflow>
 80091ea:	ec41 0b10 	vmov	d0, r0, r1
 80091ee:	bd08      	pop	{r3, pc}

080091f0 <fabs>:
 80091f0:	ec51 0b10 	vmov	r0, r1, d0
 80091f4:	ee10 2a10 	vmov	r2, s0
 80091f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80091fc:	ec43 2b10 	vmov	d0, r2, r3
 8009200:	4770      	bx	lr

08009202 <finite>:
 8009202:	b082      	sub	sp, #8
 8009204:	ed8d 0b00 	vstr	d0, [sp]
 8009208:	9801      	ldr	r0, [sp, #4]
 800920a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800920e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009212:	0fc0      	lsrs	r0, r0, #31
 8009214:	b002      	add	sp, #8
 8009216:	4770      	bx	lr

08009218 <scalbn>:
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	ec55 4b10 	vmov	r4, r5, d0
 800921e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009222:	4606      	mov	r6, r0
 8009224:	462b      	mov	r3, r5
 8009226:	b99a      	cbnz	r2, 8009250 <scalbn+0x38>
 8009228:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800922c:	4323      	orrs	r3, r4
 800922e:	d036      	beq.n	800929e <scalbn+0x86>
 8009230:	4b39      	ldr	r3, [pc, #228]	; (8009318 <scalbn+0x100>)
 8009232:	4629      	mov	r1, r5
 8009234:	ee10 0a10 	vmov	r0, s0
 8009238:	2200      	movs	r2, #0
 800923a:	f7f7 f9f5 	bl	8000628 <__aeabi_dmul>
 800923e:	4b37      	ldr	r3, [pc, #220]	; (800931c <scalbn+0x104>)
 8009240:	429e      	cmp	r6, r3
 8009242:	4604      	mov	r4, r0
 8009244:	460d      	mov	r5, r1
 8009246:	da10      	bge.n	800926a <scalbn+0x52>
 8009248:	a32b      	add	r3, pc, #172	; (adr r3, 80092f8 <scalbn+0xe0>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	e03a      	b.n	80092c6 <scalbn+0xae>
 8009250:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009254:	428a      	cmp	r2, r1
 8009256:	d10c      	bne.n	8009272 <scalbn+0x5a>
 8009258:	ee10 2a10 	vmov	r2, s0
 800925c:	4620      	mov	r0, r4
 800925e:	4629      	mov	r1, r5
 8009260:	f7f7 f82c 	bl	80002bc <__adddf3>
 8009264:	4604      	mov	r4, r0
 8009266:	460d      	mov	r5, r1
 8009268:	e019      	b.n	800929e <scalbn+0x86>
 800926a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800926e:	460b      	mov	r3, r1
 8009270:	3a36      	subs	r2, #54	; 0x36
 8009272:	4432      	add	r2, r6
 8009274:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009278:	428a      	cmp	r2, r1
 800927a:	dd08      	ble.n	800928e <scalbn+0x76>
 800927c:	2d00      	cmp	r5, #0
 800927e:	a120      	add	r1, pc, #128	; (adr r1, 8009300 <scalbn+0xe8>)
 8009280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009284:	da1c      	bge.n	80092c0 <scalbn+0xa8>
 8009286:	a120      	add	r1, pc, #128	; (adr r1, 8009308 <scalbn+0xf0>)
 8009288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800928c:	e018      	b.n	80092c0 <scalbn+0xa8>
 800928e:	2a00      	cmp	r2, #0
 8009290:	dd08      	ble.n	80092a4 <scalbn+0x8c>
 8009292:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009296:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800929a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800929e:	ec45 4b10 	vmov	d0, r4, r5
 80092a2:	bd70      	pop	{r4, r5, r6, pc}
 80092a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80092a8:	da19      	bge.n	80092de <scalbn+0xc6>
 80092aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80092ae:	429e      	cmp	r6, r3
 80092b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80092b4:	dd0a      	ble.n	80092cc <scalbn+0xb4>
 80092b6:	a112      	add	r1, pc, #72	; (adr r1, 8009300 <scalbn+0xe8>)
 80092b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1e2      	bne.n	8009286 <scalbn+0x6e>
 80092c0:	a30f      	add	r3, pc, #60	; (adr r3, 8009300 <scalbn+0xe8>)
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	f7f7 f9af 	bl	8000628 <__aeabi_dmul>
 80092ca:	e7cb      	b.n	8009264 <scalbn+0x4c>
 80092cc:	a10a      	add	r1, pc, #40	; (adr r1, 80092f8 <scalbn+0xe0>)
 80092ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d0b8      	beq.n	8009248 <scalbn+0x30>
 80092d6:	a10e      	add	r1, pc, #56	; (adr r1, 8009310 <scalbn+0xf8>)
 80092d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092dc:	e7b4      	b.n	8009248 <scalbn+0x30>
 80092de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80092e2:	3236      	adds	r2, #54	; 0x36
 80092e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80092e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80092ec:	4620      	mov	r0, r4
 80092ee:	4b0c      	ldr	r3, [pc, #48]	; (8009320 <scalbn+0x108>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	e7e8      	b.n	80092c6 <scalbn+0xae>
 80092f4:	f3af 8000 	nop.w
 80092f8:	c2f8f359 	.word	0xc2f8f359
 80092fc:	01a56e1f 	.word	0x01a56e1f
 8009300:	8800759c 	.word	0x8800759c
 8009304:	7e37e43c 	.word	0x7e37e43c
 8009308:	8800759c 	.word	0x8800759c
 800930c:	fe37e43c 	.word	0xfe37e43c
 8009310:	c2f8f359 	.word	0xc2f8f359
 8009314:	81a56e1f 	.word	0x81a56e1f
 8009318:	43500000 	.word	0x43500000
 800931c:	ffff3cb0 	.word	0xffff3cb0
 8009320:	3c900000 	.word	0x3c900000

08009324 <_sbrk>:
 8009324:	4a04      	ldr	r2, [pc, #16]	; (8009338 <_sbrk+0x14>)
 8009326:	6811      	ldr	r1, [r2, #0]
 8009328:	4603      	mov	r3, r0
 800932a:	b909      	cbnz	r1, 8009330 <_sbrk+0xc>
 800932c:	4903      	ldr	r1, [pc, #12]	; (800933c <_sbrk+0x18>)
 800932e:	6011      	str	r1, [r2, #0]
 8009330:	6810      	ldr	r0, [r2, #0]
 8009332:	4403      	add	r3, r0
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	4770      	bx	lr
 8009338:	20011a9c 	.word	0x20011a9c
 800933c:	20011aa0 	.word	0x20011aa0

08009340 <_init>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	bf00      	nop
 8009344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009346:	bc08      	pop	{r3}
 8009348:	469e      	mov	lr, r3
 800934a:	4770      	bx	lr

0800934c <_fini>:
 800934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934e:	bf00      	nop
 8009350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009352:	bc08      	pop	{r3}
 8009354:	469e      	mov	lr, r3
 8009356:	4770      	bx	lr
