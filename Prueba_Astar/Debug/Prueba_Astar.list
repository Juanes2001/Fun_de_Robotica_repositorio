
Prueba_Astar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009228  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  080093c8  080093c8  000193c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a08  08009a08  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009a08  08009a08  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a08  08009a08  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a08  08009a08  00019a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a0c  08009a0c  00019a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000118c8  200001e0  08009bec  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011aa8  08009bec  00021aa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049e9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000efb  00000000  00000000  00024bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f0  00000000  00000000  00025af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000380  00000000  00000000  00025ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011813  00000000  00000000  00026260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000057a5  00000000  00000000  00037a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ffe5  00000000  00000000  0003d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009d1fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002610  00000000  00000000  0009d250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080093b0 	.word	0x080093b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080093b0 	.word	0x080093b0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <main>:
const char* msg_NotWorking = "\n--------Astar isn't working properly----------\n";
const char* msg_InsertGrid = "\n------------Insert the char grid--------------\n";


int main(void)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000c7e:	4b70      	ldr	r3, [pc, #448]	; (8000e40 <main+0x1c8>)
 8000c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c84:	4a6e      	ldr	r2, [pc, #440]	; (8000e40 <main+0x1c8>)
 8000c86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	inSystem ();
 8000c8e:	f000 f8ff 	bl	8000e90 <inSystem>


    /* Loop forever */
	while(1){

		if (!flagAstar){
 8000c92:	4b6c      	ldr	r3, [pc, #432]	; (8000e44 <main+0x1cc>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d13f      	bne.n	8000d1a <main+0xa2>

			if (rxData != '\0'){
 8000c9a:	4b6b      	ldr	r3, [pc, #428]	; (8000e48 <main+0x1d0>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d030      	beq.n	8000d04 <main+0x8c>
				bufferReception[counterReception] = rxData;
 8000ca2:	4b6a      	ldr	r3, [pc, #424]	; (8000e4c <main+0x1d4>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b67      	ldr	r3, [pc, #412]	; (8000e48 <main+0x1d0>)
 8000caa:	7819      	ldrb	r1, [r3, #0]
 8000cac:	4b68      	ldr	r3, [pc, #416]	; (8000e50 <main+0x1d8>)
 8000cae:	5499      	strb	r1, [r3, r2]
				counterReception++;
 8000cb0:	4b66      	ldr	r3, [pc, #408]	; (8000e4c <main+0x1d4>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	4b64      	ldr	r3, [pc, #400]	; (8000e4c <main+0x1d4>)
 8000cba:	701a      	strb	r2, [r3, #0]

				if (rxData == '@'){
 8000cbc:	4b62      	ldr	r3, [pc, #392]	; (8000e48 <main+0x1d0>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b40      	cmp	r3, #64	; 0x40
 8000cc2:	d10c      	bne.n	8000cde <main+0x66>
					doneTransaction = SET;
 8000cc4:	4b63      	ldr	r3, [pc, #396]	; (8000e54 <main+0x1dc>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]

					bufferReception[counterReception-1] = '\0';
 8000cca:	4b60      	ldr	r3, [pc, #384]	; (8000e4c <main+0x1d4>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	4a5f      	ldr	r2, [pc, #380]	; (8000e50 <main+0x1d8>)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	54d1      	strb	r1, [r2, r3]

					counterReception = 0;
 8000cd6:	4b5d      	ldr	r3, [pc, #372]	; (8000e4c <main+0x1d4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	e00f      	b.n	8000cfe <main+0x86>

				}else if (rxData == 'z'){
 8000cde:	4b5a      	ldr	r3, [pc, #360]	; (8000e48 <main+0x1d0>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b7a      	cmp	r3, #122	; 0x7a
 8000ce4:	d10b      	bne.n	8000cfe <main+0x86>

					memset(bufferReception, 0, sizeof(bufferReception));
 8000ce6:	2240      	movs	r2, #64	; 0x40
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4859      	ldr	r0, [pc, #356]	; (8000e50 <main+0x1d8>)
 8000cec:	f004 f854 	bl	8004d98 <memset>
					counterReception = 0;
 8000cf0:	4b56      	ldr	r3, [pc, #344]	; (8000e4c <main+0x1d4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "Buffer Vaciado\n \r");
 8000cf6:	4958      	ldr	r1, [pc, #352]	; (8000e58 <main+0x1e0>)
 8000cf8:	4858      	ldr	r0, [pc, #352]	; (8000e5c <main+0x1e4>)
 8000cfa:	f003 fec3 	bl	8004a84 <writeMsg>
				}

				rxData = '\0';
 8000cfe:	4b52      	ldr	r3, [pc, #328]	; (8000e48 <main+0x1d0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]

			}

			if (doneTransaction){
 8000d04:	4b53      	ldr	r3, [pc, #332]	; (8000e54 <main+0x1dc>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0c2      	beq.n	8000c92 <main+0x1a>
				parseCommands(bufferReception);
 8000d0c:	4850      	ldr	r0, [pc, #320]	; (8000e50 <main+0x1d8>)
 8000d0e:	f000 f959 	bl	8000fc4 <parseCommands>
				doneTransaction = RESET;
 8000d12:	4b50      	ldr	r3, [pc, #320]	; (8000e54 <main+0x1dc>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
 8000d18:	e7bb      	b.n	8000c92 <main+0x1a>
			}

		}else{
			// Si estamos aqui es porque se aplicara el mismo metodo para guardar cada fila de strings

			if (rxData != '\0'){
 8000d1a:	4b4b      	ldr	r3, [pc, #300]	; (8000e48 <main+0x1d0>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d059      	beq.n	8000dd6 <main+0x15e>

				if (rxData != '\r'){
 8000d22:	4b49      	ldr	r3, [pc, #292]	; (8000e48 <main+0x1d0>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b0d      	cmp	r3, #13
 8000d28:	d016      	beq.n	8000d58 <main+0xe0>
					stringMatrix[stringRow][stringColumn] = rxData;
 8000d2a:	4b4d      	ldr	r3, [pc, #308]	; (8000e60 <main+0x1e8>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461c      	mov	r4, r3
 8000d30:	4b4c      	ldr	r3, [pc, #304]	; (8000e64 <main+0x1ec>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	4b44      	ldr	r3, [pc, #272]	; (8000e48 <main+0x1d0>)
 8000d38:	7819      	ldrb	r1, [r3, #0]
 8000d3a:	4a4b      	ldr	r2, [pc, #300]	; (8000e68 <main+0x1f0>)
 8000d3c:	2334      	movs	r3, #52	; 0x34
 8000d3e:	fb04 f303 	mul.w	r3, r4, r3
 8000d42:	4413      	add	r3, r2
 8000d44:	4403      	add	r3, r0
 8000d46:	460a      	mov	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]
					stringColumn++;
 8000d4a:	4b46      	ldr	r3, [pc, #280]	; (8000e64 <main+0x1ec>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <main+0x1ec>)
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	e008      	b.n	8000d6a <main+0xf2>
				}else{
					stringRow++;
 8000d58:	4b41      	ldr	r3, [pc, #260]	; (8000e60 <main+0x1e8>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b3f      	ldr	r3, [pc, #252]	; (8000e60 <main+0x1e8>)
 8000d62:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 8000d64:	4b3f      	ldr	r3, [pc, #252]	; (8000e64 <main+0x1ec>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
				}

				if (rxData == '@'){
 8000d6a:	4b37      	ldr	r3, [pc, #220]	; (8000e48 <main+0x1d0>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b40      	cmp	r3, #64	; 0x40
 8000d70:	d114      	bne.n	8000d9c <main+0x124>
					doneTransaction = SET;
 8000d72:	4b38      	ldr	r3, [pc, #224]	; (8000e54 <main+0x1dc>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	701a      	strb	r2, [r3, #0]

					stringMatrix[stringRow][stringColumn - 1] = '\0';
 8000d78:	4b39      	ldr	r3, [pc, #228]	; (8000e60 <main+0x1e8>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <main+0x1ec>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	4938      	ldr	r1, [pc, #224]	; (8000e68 <main+0x1f0>)
 8000d86:	2234      	movs	r2, #52	; 0x34
 8000d88:	fb00 f202 	mul.w	r2, r0, r2
 8000d8c:	440a      	add	r2, r1
 8000d8e:	4413      	add	r3, r2
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]

					stringColumn = 0;
 8000d94:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <main+0x1ec>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
 8000d9a:	e019      	b.n	8000dd0 <main+0x158>

				}else if (rxData == 'z'){
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <main+0x1d0>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b7a      	cmp	r3, #122	; 0x7a
 8000da2:	d115      	bne.n	8000dd0 <main+0x158>

					memset(stringMatrix, 0, sizeof(stringMatrix));
 8000da4:	f44f 6229 	mov.w	r2, #2704	; 0xa90
 8000da8:	2100      	movs	r1, #0
 8000daa:	482f      	ldr	r0, [pc, #188]	; (8000e68 <main+0x1f0>)
 8000dac:	f003 fff4 	bl	8004d98 <memset>
					stringRow    = 0;
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <main+0x1e8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <main+0x1ec>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 8000dbc:	492b      	ldr	r1, [pc, #172]	; (8000e6c <main+0x1f4>)
 8000dbe:	4827      	ldr	r0, [pc, #156]	; (8000e5c <main+0x1e4>)
 8000dc0:	f003 fe60 	bl	8004a84 <writeMsg>
					writeMsg(&handlerUSART, msg_InsertGrid);
 8000dc4:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <main+0x1f8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4824      	ldr	r0, [pc, #144]	; (8000e5c <main+0x1e4>)
 8000dcc:	f003 fe5a 	bl	8004a84 <writeMsg>
				}

				rxData = '\0';
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <main+0x1d0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]

			}

			if (doneTransaction){
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <main+0x1dc>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f43f af59 	beq.w	8000c92 <main+0x1a>

				starWorking = findShorterWay(stringMatrix, readableGrid, costs, &handlerAstarParameters, &handlerCostsAstar, shorterWay);
 8000de0:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <main+0x1fc>)
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <main+0x200>)
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <main+0x204>)
 8000dea:	4a25      	ldr	r2, [pc, #148]	; (8000e80 <main+0x208>)
 8000dec:	4925      	ldr	r1, [pc, #148]	; (8000e84 <main+0x20c>)
 8000dee:	481e      	ldr	r0, [pc, #120]	; (8000e68 <main+0x1f0>)
 8000df0:	f000 fa4c 	bl	800128c <findShorterWay>
 8000df4:	4603      	mov	r3, r0
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <main+0x210>)
 8000dfa:	701a      	strb	r2, [r3, #0]

				if (starWorking){
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <main+0x210>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d105      	bne.n	8000e10 <main+0x198>
					// si se llego hasta aca es porque Astar si funciona correctamente
				}else{
					writeMsg(&handlerUSART, msg_NotWorking);
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <main+0x214>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4814      	ldr	r0, [pc, #80]	; (8000e5c <main+0x1e4>)
 8000e0c:	f003 fe3a 	bl	8004a84 <writeMsg>
				}
				memset(stringMatrix, 0, sizeof(stringMatrix));
 8000e10:	f44f 6229 	mov.w	r2, #2704	; 0xa90
 8000e14:	2100      	movs	r1, #0
 8000e16:	4814      	ldr	r0, [pc, #80]	; (8000e68 <main+0x1f0>)
 8000e18:	f003 ffbe 	bl	8004d98 <memset>
				stringRow    = 0;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <main+0x1e8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
				stringColumn = 0;
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <main+0x1ec>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
				writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 8000e28:	4910      	ldr	r1, [pc, #64]	; (8000e6c <main+0x1f4>)
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <main+0x1e4>)
 8000e2c:	f003 fe2a 	bl	8004a84 <writeMsg>

				flagAstar = RESET;
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <main+0x1cc>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]

				doneTransaction = RESET;
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <main+0x1dc>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
		if (!flagAstar){
 8000e3c:	e729      	b.n	8000c92 <main+0x1a>
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00
 8000e44:	20000e5e 	.word	0x20000e5e
 8000e48:	2000035e 	.word	0x2000035e
 8000e4c:	2000035c 	.word	0x2000035c
 8000e50:	2000031c 	.word	0x2000031c
 8000e54:	2000035d 	.word	0x2000035d
 8000e58:	08009430 	.word	0x08009430
 8000e5c:	20000234 	.word	0x20000234
 8000e60:	20000e5d 	.word	0x20000e5d
 8000e64:	20000e5c 	.word	0x20000e5c
 8000e68:	200003cc 	.word	0x200003cc
 8000e6c:	08009444 	.word	0x08009444
 8000e70:	20000004 	.word	0x20000004
 8000e74:	2001175c 	.word	0x2001175c
 8000e78:	200002d4 	.word	0x200002d4
 8000e7c:	200002c8 	.word	0x200002c8
 8000e80:	20000f4c 	.word	0x20000f4c
 8000e84:	20010ccc 	.word	0x20010ccc
 8000e88:	20000e5f 	.word	0x20000e5f
 8000e8c:	20000000 	.word	0x20000000

08000e90 <inSystem>:
		}
	}// FIN DEL LOOP
}


void inSystem (void){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0


	// Activamos la maxima velocidad del microcontrolador
	RCC_enableMaxFrequencies(RCC_100MHz);
 8000e94:	2008      	movs	r0, #8
 8000e96:	f002 fec1 	bl	8003c1c <RCC_enableMaxFrequencies>
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000e9a:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <inSystem+0x110>)
 8000e9c:	4a41      	ldr	r2, [pc, #260]	; (8000fa4 <inSystem+0x114>)
 8000e9e:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000ea0:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <inSystem+0x110>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000ea6:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <inSystem+0x110>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000eac:	4b3c      	ldr	r3, [pc, #240]	; (8000fa0 <inSystem+0x110>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000eb2:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <inSystem+0x110>)
 8000eb4:	2205      	movs	r2, #5
 8000eb6:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000eb8:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <inSystem+0x110>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <inSystem+0x110>)
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000ec4:	4836      	ldr	r0, [pc, #216]	; (8000fa0 <inSystem+0x110>)
 8000ec6:	f002 fd1b 	bl	8003900 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000eca:	2101      	movs	r1, #1
 8000ecc:	4834      	ldr	r0, [pc, #208]	; (8000fa0 <inSystem+0x110>)
 8000ece:	f002 fe41 	bl	8003b54 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 8000ed2:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <inSystem+0x118>)
 8000ed4:	4a35      	ldr	r2, [pc, #212]	; (8000fac <inSystem+0x11c>)
 8000ed6:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8000ed8:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <inSystem+0x118>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8000ede:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <inSystem+0x118>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8000ee4:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <inSystem+0x118>)
 8000ee6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000eea:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 1000;
 8000eec:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <inSystem+0x118>)
 8000eee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ef2:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 8000ef4:	482c      	ldr	r0, [pc, #176]	; (8000fa8 <inSystem+0x118>)
 8000ef6:	f002 f931 	bl	800315c <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8000efa:	482b      	ldr	r0, [pc, #172]	; (8000fa8 <inSystem+0x118>)
 8000efc:	f002 fcee 	bl	80038dc <startTimer>
	///////////////////////////////////////////Comunicación serial para comandos //////////////////////////////////////////////


	//Comunicacion serial

	handlerPinRx.pGPIOx                             = GPIOA;
 8000f00:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <inSystem+0x120>)
 8000f02:	4a28      	ldr	r2, [pc, #160]	; (8000fa4 <inSystem+0x114>)
 8000f04:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <inSystem+0x120>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000f0c:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <inSystem+0x120>)
 8000f0e:	2202      	movs	r2, #2
 8000f10:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f12:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <inSystem+0x120>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8000f18:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <inSystem+0x120>)
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f1e:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <inSystem+0x120>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <inSystem+0x120>)
 8000f26:	2203      	movs	r2, #3
 8000f28:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 8000f2a:	4821      	ldr	r0, [pc, #132]	; (8000fb0 <inSystem+0x120>)
 8000f2c:	f002 fce8 	bl	8003900 <GPIO_Config>

	handlerPinTx.pGPIOx                             = GPIOA;
 8000f30:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <inSystem+0x124>)
 8000f32:	4a1c      	ldr	r2, [pc, #112]	; (8000fa4 <inSystem+0x114>)
 8000f34:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <inSystem+0x124>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <inSystem+0x124>)
 8000f3e:	2202      	movs	r2, #2
 8000f40:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <inSystem+0x124>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <inSystem+0x124>)
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <inSystem+0x124>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <inSystem+0x124>)
 8000f56:	2203      	movs	r2, #3
 8000f58:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 8000f5a:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <inSystem+0x124>)
 8000f5c:	f002 fcd0 	bl	8003900 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <inSystem+0x128>)
 8000f62:	4a16      	ldr	r2, [pc, #88]	; (8000fbc <inSystem+0x12c>)
 8000f64:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <inSystem+0x128>)
 8000f68:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <inSystem+0x130>)
 8000f6a:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <inSystem+0x128>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <inSystem+0x128>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <inSystem+0x128>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <inSystem+0x128>)
 8000f80:	2202      	movs	r2, #2
 8000f82:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <inSystem+0x128>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <inSystem+0x128>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <inSystem+0x128>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 8000f96:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <inSystem+0x128>)
 8000f98:	f003 f992 	bl	80042c0 <USART_Config>


}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200001fc 	.word	0x200001fc
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	20000220 	.word	0x20000220
 8000fac:	40000400 	.word	0x40000400
 8000fb0:	20000208 	.word	0x20000208
 8000fb4:	20000214 	.word	0x20000214
 8000fb8:	20000234 	.word	0x20000234
 8000fbc:	40004400 	.word	0x40004400
 8000fc0:	02faf080 	.word	0x02faf080

08000fc4 <parseCommands>:


void parseCommands(char *stringVector){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af04      	add	r7, sp, #16
 8000fca:	6078      	str	r0, [r7, #4]

	sscanf(stringVector, "%s %u %u %u %s", cmd ,&firstParameter, &secondParameter, &thirdParameter, userMsg);
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <parseCommands+0x98>)
 8000fce:	9302      	str	r3, [sp, #8]
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <parseCommands+0x9c>)
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	4b23      	ldr	r3, [pc, #140]	; (8001064 <parseCommands+0xa0>)
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <parseCommands+0xa4>)
 8000fda:	4a24      	ldr	r2, [pc, #144]	; (800106c <parseCommands+0xa8>)
 8000fdc:	4924      	ldr	r1, [pc, #144]	; (8001070 <parseCommands+0xac>)
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f004 fc5c 	bl	800589c <siscanf>


	if (strcmp(cmd, "help") == 0){
 8000fe4:	4923      	ldr	r1, [pc, #140]	; (8001074 <parseCommands+0xb0>)
 8000fe6:	4821      	ldr	r0, [pc, #132]	; (800106c <parseCommands+0xa8>)
 8000fe8:	f7ff f8fa 	bl	80001e0 <strcmp>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d108      	bne.n	8001004 <parseCommands+0x40>

		writeMsg(&handlerUSART, "HELP MENU CMD : \n");
 8000ff2:	4921      	ldr	r1, [pc, #132]	; (8001078 <parseCommands+0xb4>)
 8000ff4:	4821      	ldr	r0, [pc, #132]	; (800107c <parseCommands+0xb8>)
 8000ff6:	f003 fd45 	bl	8004a84 <writeMsg>
		writeMsg(&handlerUSART, "1)  astar #parallel Distance #diagonal Distance  \n");
 8000ffa:	4921      	ldr	r1, [pc, #132]	; (8001080 <parseCommands+0xbc>)
 8000ffc:	481f      	ldr	r0, [pc, #124]	; (800107c <parseCommands+0xb8>)
 8000ffe:	f003 fd41 	bl	8004a84 <writeMsg>

	}



}
 8001002:	e026      	b.n	8001052 <parseCommands+0x8e>
	}else if (strcmp(cmd, "astar") == 0){
 8001004:	491f      	ldr	r1, [pc, #124]	; (8001084 <parseCommands+0xc0>)
 8001006:	4819      	ldr	r0, [pc, #100]	; (800106c <parseCommands+0xa8>)
 8001008:	f7ff f8ea 	bl	80001e0 <strcmp>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d11f      	bne.n	8001052 <parseCommands+0x8e>
		handlerAstarParameters.parallelDistance  = firstParameter;
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <parseCommands+0xa4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <parseCommands+0xc4>)
 8001020:	edc3 7a00 	vstr	s15, [r3]
		handlerAstarParameters.diagonalDiastance = secondParameter;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <parseCommands+0xa0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <parseCommands+0xc4>)
 8001032:	edc3 7a01 	vstr	s15, [r3, #4]
		writeMsg(&handlerUSART, msg_InsertGrid);
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <parseCommands+0xc8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4619      	mov	r1, r3
 800103c:	480f      	ldr	r0, [pc, #60]	; (800107c <parseCommands+0xb8>)
 800103e:	f003 fd21 	bl	8004a84 <writeMsg>
		initSerialComunication(&handlerUSART, &handlerPinRx, &handlerPinTx);
 8001042:	4a13      	ldr	r2, [pc, #76]	; (8001090 <parseCommands+0xcc>)
 8001044:	4913      	ldr	r1, [pc, #76]	; (8001094 <parseCommands+0xd0>)
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <parseCommands+0xb8>)
 8001048:	f002 f800 	bl	800304c <initSerialComunication>
		flagAstar = SET;
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <parseCommands+0xd4>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000038c 	.word	0x2000038c
 8001060:	20000388 	.word	0x20000388
 8001064:	20000384 	.word	0x20000384
 8001068:	20000380 	.word	0x20000380
 800106c:	20000360 	.word	0x20000360
 8001070:	08009464 	.word	0x08009464
 8001074:	08009474 	.word	0x08009474
 8001078:	0800947c 	.word	0x0800947c
 800107c:	20000234 	.word	0x20000234
 8001080:	08009490 	.word	0x08009490
 8001084:	080094c4 	.word	0x080094c4
 8001088:	200002c8 	.word	0x200002c8
 800108c:	20000004 	.word	0x20000004
 8001090:	20000214 	.word	0x20000214
 8001094:	20000208 	.word	0x20000208
 8001098:	20000e5e 	.word	0x20000e5e

0800109c <usart2Rx_Callback>:



// Interrupcion usart 1
void usart2Rx_Callback(void){
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0

	rxData = getRxData();
 80010a0:	f003 fd18 	bl	8004ad4 <getRxData>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b01      	ldr	r3, [pc, #4]	; (80010b0 <usart2Rx_Callback+0x14>)
 80010aa:	701a      	strb	r2, [r3, #0]

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000035e 	.word	0x2000035e

080010b4 <BasicTimer3_Callback>:

//Interrupción Timer 3
void BasicTimer3_Callback(void){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

	GPIOxTooglePin(&handlerPinA5);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <BasicTimer3_Callback+0x10>)
 80010ba:	f002 fd97 	bl	8003bec <GPIOxTooglePin>

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200001fc 	.word	0x200001fc

080010c8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <ITM_SendChar+0x48>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <ITM_SendChar+0x48>)
 80010d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010dc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <ITM_SendChar+0x4c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a0c      	ldr	r2, [pc, #48]	; (8001114 <ITM_SendChar+0x4c>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80010ea:	bf00      	nop
 80010ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0f8      	beq.n	80010ec <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80010fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	6013      	str	r3, [r2, #0]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000edfc 	.word	0xe000edfc
 8001114:	e0000e00 	.word	0xe0000e00

08001118 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
	return 1;
 800111c:	2301      	movs	r3, #1
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <_kill>:

int _kill(int pid, int sig)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001132:	f003 fdff 	bl	8004d34 <__errno>
 8001136:	4603      	mov	r3, r0
 8001138:	2216      	movs	r2, #22
 800113a:	601a      	str	r2, [r3, #0]
	return -1;
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <_exit>:

void _exit (int status)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ffe7 	bl	8001128 <_kill>
	while (1) {}		/* Make sure we hang here */
 800115a:	e7fe      	b.n	800115a <_exit+0x12>

0800115c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	e00a      	b.n	8001184 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800116e:	f3af 8000 	nop.w
 8001172:	4601      	mov	r1, r0
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	60ba      	str	r2, [r7, #8]
 800117a:	b2ca      	uxtb	r2, r1
 800117c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	429a      	cmp	r2, r3
 800118a:	dbf0      	blt.n	800116e <_read+0x12>
	}

return len;
 800118c:	687b      	ldr	r3, [r7, #4]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	e009      	b.n	80011bc <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	60ba      	str	r2, [r7, #8]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff89 	bl	80010c8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbf1      	blt.n	80011a8 <_write+0x12>
	}
	return len;
 80011c4:	687b      	ldr	r3, [r7, #4]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_close>:

int _close(int file)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
	return -1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011f6:	605a      	str	r2, [r3, #4]
	return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <_isatty>:

int _isatty(int file)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	return 1;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
	return 0;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800123a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800123c:	f003 fce8 	bl	8004c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001240:	480c      	ldr	r0, [pc, #48]	; (8001274 <LoopForever+0x6>)
  ldr r1, =_edata
 8001242:	490d      	ldr	r1, [pc, #52]	; (8001278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <LoopForever+0xe>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001258:	4c0a      	ldr	r4, [pc, #40]	; (8001284 <LoopForever+0x16>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001266:	f003 fd6b 	bl	8004d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800126a:	f7ff fd05 	bl	8000c78 <main>

0800126e <LoopForever>:

LoopForever:
    b LoopForever
 800126e:	e7fe      	b.n	800126e <LoopForever>
  ldr   r0, =_estack
 8001270:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800127c:	08009a10 	.word	0x08009a10
  ldr r2, =_sbss
 8001280:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001284:	20011aa8 	.word	0x20011aa8

08001288 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <ADC_IRQHandler>
	...

0800128c <findShorterWay>:
int shorterWay[100][2]     = {0};



int findShorterWay(char terminalGrid[52][52],char Gridcopy[52][52], float matrixCosts[52][52][6] ,
		AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int shorterWay[100][2]){
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	f507 6477 	add.w	r4, r7, #3952	; 0xf70
 800129a:	f6a4 7464 	subw	r4, r4, #3940	; 0xf64
 800129e:	6020      	str	r0, [r4, #0]
 80012a0:	f507 6077 	add.w	r0, r7, #3952	; 0xf70
 80012a4:	f6a0 7068 	subw	r0, r0, #3944	; 0xf68
 80012a8:	6001      	str	r1, [r0, #0]
 80012aa:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80012ae:	f6a1 716c 	subw	r1, r1, #3948	; 0xf6c
 80012b2:	600a      	str	r2, [r1, #0]
 80012b4:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80012b8:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 80012bc:	6013      	str	r3, [r2, #0]

	writeMsg(&handlerAstarUsart, "\n______________Comencemos el viaje_____________\n");
 80012be:	49b5      	ldr	r1, [pc, #724]	; (8001594 <findShorterWay+0x308>)
 80012c0:	48b5      	ldr	r0, [pc, #724]	; (8001598 <findShorterWay+0x30c>)
 80012c2:	f003 fbdf 	bl	8004a84 <writeMsg>

	// seteamos las variables locales a usar
	char nineSlotsMatriz[3][3] = {0}; // matriz que tomara una parte de redeableGrid para analisis
 80012c6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80012ca:	f103 031c 	add.w	r3, r3, #28
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	721a      	strb	r2, [r3, #8]
	uint8_t shorterWayFound = RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80012dc:	f102 020f 	add.w	r2, r2, #15
 80012e0:	7013      	strb	r3, [r2, #0]
	uint8_t i = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80012e8:	f102 020e 	add.w	r2, r2, #14
 80012ec:	7013      	strb	r3, [r2, #0]
	uint8_t j = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80012f4:	f102 020d 	add.w	r2, r2, #13
 80012f8:	7013      	strb	r3, [r2, #0]
	int position[2];
	uint8_t numberOfPositions = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001300:	f102 020c 	add.w	r2, r2, #12
 8001304:	7013      	strb	r3, [r2, #0]
	uint8_t counter = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800130c:	f102 020b 	add.w	r2, r2, #11
 8001310:	7013      	strb	r3, [r2, #0]
	uint8_t counterStudy = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001318:	f102 020a 	add.w	r2, r2, #10
 800131c:	7013      	strb	r3, [r2, #0]
	//matriz donde se almacenaran en orden ascendente los F cost de las posiciones en estado de Open, esta si tendra un valor maximo y dos columnas, donde
	// Se almacenara el F cost en la primera y el Hcost en la segunda,
	float decisionMatrix[500][4] = {0};
 800131e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001322:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8001326:	4618      	mov	r0, r3
 8001328:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800132c:	461a      	mov	r2, r3
 800132e:	2100      	movs	r1, #0
 8001330:	f003 fd32 	bl	8004d98 <memset>



	// Primero seteamos dentro de los valores de los parametros cuales son los valores de las filas y las columnas
	parameters->numberOfRows    = getRows(terminalGrid);
 8001334:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001338:	f6a3 7364 	subw	r3, r3, #3940	; 0xf64
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	f001 fd65 	bl	8002e0c <getRows>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800134a:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	721a      	strb	r2, [r3, #8]
	parameters->numberOfColumns = getColums(terminalGrid);
 8001352:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001356:	f6a3 7364 	subw	r3, r3, #3940	; 0xf64
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	f001 fd7a 	bl	8002e54 <getColums>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001368:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	725a      	strb	r2, [r3, #9]

	//Segundo construimos nuestra matriz dinamicamente repartida
	buildMatrixCopy(parameters, terminalGrid, Gridcopy);
 8001370:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001374:	f6a3 7268 	subw	r2, r3, #3944	; 0xf68
 8001378:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800137c:	f6a3 7164 	subw	r1, r3, #3940	; 0xf64
 8001380:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001384:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	6809      	ldr	r1, [r1, #0]
 800138c:	6818      	ldr	r0, [r3, #0]
 800138e:	f001 fcea 	bl	8002d66 <buildMatrixCopy>
	//Variables que dependen del analisis respectivo,y el H cost que es la heuristica el cual es un valor
	// fijo Se tendra entonces una matriz de arrays donde se almacenaran
	// los valores como siguen, [Gcost, Fcost, Hcost]

    //Cuarto, seteamos la matriz heuristica, la cual es la ultima matriz de el bloque de tres de la matriz de costos
    if (setHeuristic(parameters, ptrChanges, matrixCosts, Gridcopy)){
 8001392:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001396:	f6a3 7368 	subw	r3, r3, #3944	; 0xf68
 800139a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800139e:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 80013a2:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80013a6:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6812      	ldr	r2, [r2, #0]
 80013ae:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 80013b2:	6809      	ldr	r1, [r1, #0]
 80013b4:	6800      	ldr	r0, [r0, #0]
 80013b6:	f001 fa4d 	bl	8002854 <setHeuristic>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d013      	beq.n	80013e8 <findShorterWay+0x15c>
    	// Si estamos aqui todo salio correctamente, el programa puede seguir su curso
    	__NOP();
 80013c0:	bf00      	nop
    	return 0;
    }

    // Seteada la heuristica AQUI COMIENZA EL ALGORITMO A TRABAJAR, seteamos el punto de inicio y lo guardamos dentro de la estructura
    // correspondiente
    if(findStart(Gridcopy, parameters, ptrChanges)){
 80013c2:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80013c6:	f5a3 6177 	sub.w	r1, r3, #3952	; 0xf70
 80013ca:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80013ce:	f6a3 7368 	subw	r3, r3, #3944	; 0xf68
 80013d2:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	6809      	ldr	r1, [r1, #0]
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	f001 fc57 	bl	8002c8e <findStart>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d026      	beq.n	8001434 <findShorterWay+0x1a8>
 80013e6:	e002      	b.n	80013ee <findShorterWay+0x162>
    	return 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f001 b970 	b.w	80026ce <findShorterWay+0x1442>
    	// Si estamos aqui es porque se encontro el punto de inicio con exito
    	__NOP();
 80013ee:	bf00      	nop
    // Comenzamos analizando los vecinos del punto de inicio, calculando para cada uno de ellos (incluyendo el punto de inicio) el Gcosto
    // y el Fcost, de todos ellos al final se selecciona aquel que tenga el F cost mas pequeño, del siguiente while no se sale hasta que se tenga el
    // Array de patents correspondiente a la ruta mas corta

    //guardamos en la posicion de analisis la posicion de start
    ptrChanges->posAnalisis[0] = ptrChanges->startPos[0];
 80013f0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	609a      	str	r2, [r3, #8]
    ptrChanges->posAnalisis[1] = ptrChanges->startPos[1];
 8001400:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001408:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	60da      	str	r2, [r3, #12]
    // Definimos tambien el estado de abierto
    ptrChanges->posOpen[0] =  ptrChanges->startPos[0];
 8001410:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001418:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	611a      	str	r2, [r3, #16]
    ptrChanges->posOpen[1] =  ptrChanges->startPos[1];
 8001420:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001428:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	615a      	str	r2, [r3, #20]


    while(!shorterWayFound){
 8001430:	f001 b802 	b.w	8002438 <findShorterWay+0x11ac>
    	return 0;
 8001434:	2300      	movs	r3, #0
 8001436:	f001 b94a 	b.w	80026ce <findShorterWay+0x1442>

    	// este while actuara como un while de recorrido lineal, donde se busca analizar las posiciones i,j de los aledaños recorriendo cada punto linealmente
    	// al punto de analisis

    	//Actualizamos el punto de analisis para seguir analizando a partir del punto de análisis siguiente
    	ptrChanges->posAnalisis[0] = ptrChanges->posOpen[0];
 800143a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	691a      	ldr	r2, [r3, #16]
 8001442:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	609a      	str	r2, [r3, #8]
    	ptrChanges->posAnalisis[1] = ptrChanges->posOpen[1];
 800144a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	695a      	ldr	r2, [r3, #20]
 8001452:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60da      	str	r2, [r3, #12]

    	// guardamos la matriz 3x3 de redeableGrid para analisis, para posiciones no correctas se colocan tales posiciones en 0 tipo char
    	// Y para posiciones ya analizadas se coloca una D de done.
    	for(i = 0; i < 3; i++){
 800145a:	2300      	movs	r3, #0
 800145c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001460:	f102 020e 	add.w	r2, r2, #14
 8001464:	7013      	strb	r3, [r2, #0]
 8001466:	e0ee      	b.n	8001646 <findShorterWay+0x3ba>
    		for (j = 0; j < 3; j++){
 8001468:	2300      	movs	r3, #0
 800146a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800146e:	f102 020d 	add.w	r2, r2, #13
 8001472:	7013      	strb	r3, [r2, #0]
 8001474:	e0d4      	b.n	8001620 <findShorterWay+0x394>

    			if 	  ((ptrChanges->posAnalisis[0] + i - 1) < 0
 8001476:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001482:	f103 030e 	add.w	r3, r3, #14
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4413      	add	r3, r2
 800148a:	2b00      	cmp	r3, #0
 800148c:	dd0b      	ble.n	80014a6 <findShorterWay+0x21a>
    			    || (ptrChanges->posAnalisis[1] + j - 1) < 0) {
 800148e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800149a:	f103 030d 	add.w	r3, r3, #13
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	dc16      	bgt.n	80014d4 <findShorterWay+0x248>
    				// El primer caso seria cuando el puntero que estudia la matriz esta por fuera del rango , especificamente por detras del rango
    				// donde el indice seria negativo
    				nineSlotsMatriz[i][j] = '0';
 80014a6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80014aa:	f103 030e 	add.w	r3, r3, #14
 80014ae:	781a      	ldrb	r2, [r3, #0]
 80014b0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80014b4:	f103 030d 	add.w	r3, r3, #13
 80014b8:	7819      	ldrb	r1, [r3, #0]
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 80014c4:	f103 0310 	add.w	r3, r3, #16
 80014c8:	443b      	add	r3, r7
 80014ca:	440b      	add	r3, r1
 80014cc:	3b14      	subs	r3, #20
 80014ce:	2230      	movs	r2, #48	; 0x30
 80014d0:	701a      	strb	r2, [r3, #0]
 80014d2:	e09a      	b.n	800160a <findShorterWay+0x37e>

    			}else if ((ptrChanges->posAnalisis[0] + i - 1) > parameters->numberOfRows - 1
 80014d4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80014e0:	f103 030e 	add.w	r3, r3, #14
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80014ec:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	7a12      	ldrb	r2, [r2, #8]
 80014f4:	4293      	cmp	r3, r2
 80014f6:	dc11      	bgt.n	800151c <findShorterWay+0x290>
    				||    (ptrChanges->posAnalisis[1] + j - 1) > parameters->numberOfColumns - 1){
 80014f8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001504:	f103 030d 	add.w	r3, r3, #13
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001510:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	7a52      	ldrb	r2, [r2, #9]
 8001518:	4293      	cmp	r3, r2
 800151a:	dd16      	ble.n	800154a <findShorterWay+0x2be>
    				// El segundo caso seria cuando el puntero que estudia la matriz esta por fuera del rango, especificamente por delante
    				// del rango donde el indice seria mayor al limite superior del numero de filas o columnas restado uno.
    				nineSlotsMatriz[i][j] = '0';
 800151c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001520:	f103 030e 	add.w	r3, r3, #14
 8001524:	781a      	ldrb	r2, [r3, #0]
 8001526:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800152a:	f103 030d 	add.w	r3, r3, #13
 800152e:	7819      	ldrb	r1, [r3, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800153a:	f103 0310 	add.w	r3, r3, #16
 800153e:	443b      	add	r3, r7
 8001540:	440b      	add	r3, r1
 8001542:	3b14      	subs	r3, #20
 8001544:	2230      	movs	r2, #48	; 0x30
 8001546:	701a      	strb	r2, [r3, #0]
 8001548:	e05f      	b.n	800160a <findShorterWay+0x37e>
    			}else if(i == 1 && j == 1){
 800154a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800154e:	f103 030e 	add.w	r3, r3, #14
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d121      	bne.n	800159c <findShorterWay+0x310>
 8001558:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800155c:	f103 030d 	add.w	r3, r3, #13
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d11a      	bne.n	800159c <findShorterWay+0x310>
    				// Este caso corresponde con el punto de analisis , este caso no lo queremos estudiar ya que ya estaria estudiado como tal,
    				// queremos es solo estudiar sus aledanios, por lo que en esta posición colocaremos una 'P' como de Point
    				nineSlotsMatriz[i][j] = 'P';
 8001566:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800156a:	f103 030e 	add.w	r3, r3, #14
 800156e:	781a      	ldrb	r2, [r3, #0]
 8001570:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001574:	f103 030d 	add.w	r3, r3, #13
 8001578:	7819      	ldrb	r1, [r3, #0]
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8001584:	f103 0310 	add.w	r3, r3, #16
 8001588:	443b      	add	r3, r7
 800158a:	440b      	add	r3, r1
 800158c:	3b14      	subs	r3, #20
 800158e:	2250      	movs	r2, #80	; 0x50
 8001590:	701a      	strb	r2, [r3, #0]
 8001592:	e03a      	b.n	800160a <findShorterWay+0x37e>
 8001594:	080094cc 	.word	0x080094cc
 8001598:	20000e60 	.word	0x20000e60
    			}else{
    				// Este ultimo caso donde no se cumple lo anterior  simplemente copiamos exactamente lo mismo que aparece en la matriz de caracteres
    				nineSlotsMatriz[i][j] = Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1];
 800159c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80015a8:	f103 030e 	add.w	r3, r3, #14
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	461a      	mov	r2, r3
 80015b2:	2334      	movs	r3, #52	; 0x34
 80015b4:	fb02 f303 	mul.w	r3, r2, r3
 80015b8:	3b34      	subs	r3, #52	; 0x34
 80015ba:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80015be:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	18d0      	adds	r0, r2, r3
 80015c6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80015d2:	f103 030d 	add.w	r3, r3, #13
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4413      	add	r3, r2
 80015da:	3b01      	subs	r3, #1
 80015dc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80015e0:	f102 020e 	add.w	r2, r2, #14
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	f507 51fb 	add.w	r1, r7, #8032	; 0x1f60
 80015ea:	f101 010d 	add.w	r1, r1, #13
 80015ee:	7809      	ldrb	r1, [r1, #0]
 80015f0:	5cc0      	ldrb	r0, [r0, r3]
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 80015fc:	f103 0310 	add.w	r3, r3, #16
 8001600:	443b      	add	r3, r7
 8001602:	440b      	add	r3, r1
 8001604:	3b14      	subs	r3, #20
 8001606:	4602      	mov	r2, r0
 8001608:	701a      	strb	r2, [r3, #0]
    		for (j = 0; j < 3; j++){
 800160a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800160e:	f103 030d 	add.w	r3, r3, #13
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800161a:	f102 020d 	add.w	r2, r2, #13
 800161e:	7013      	strb	r3, [r2, #0]
 8001620:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001624:	f103 030d 	add.w	r3, r3, #13
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b02      	cmp	r3, #2
 800162c:	f67f af23 	bls.w	8001476 <findShorterWay+0x1ea>
    	for(i = 0; i < 3; i++){
 8001630:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001634:	f103 030e 	add.w	r3, r3, #14
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001640:	f102 020e 	add.w	r2, r2, #14
 8001644:	7013      	strb	r3, [r2, #0]
 8001646:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800164a:	f103 030e 	add.w	r3, r3, #14
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b02      	cmp	r3, #2
 8001652:	f67f af09 	bls.w	8001468 <findShorterWay+0x1dc>
    	// Esta matriz, Se estudiaran los siguientes casos:

    	// Imprimimos la matriz a estudiar

    	// Imprimimos el mensaje de el estudio en el que estamos
    	sprintf (buffer,"\n__________ESTUDIO NUMERO %u__________\n", counterStudy);
 8001656:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800165a:	f103 030a 	add.w	r3, r3, #10
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	49c9      	ldr	r1, [pc, #804]	; (8001988 <findShorterWay+0x6fc>)
 8001664:	48c9      	ldr	r0, [pc, #804]	; (800198c <findShorterWay+0x700>)
 8001666:	f004 f8f9 	bl	800585c <siprintf>
    	writeMsg(&handlerAstarUsart, buffer);
 800166a:	49c8      	ldr	r1, [pc, #800]	; (800198c <findShorterWay+0x700>)
 800166c:	48c8      	ldr	r0, [pc, #800]	; (8001990 <findShorterWay+0x704>)
 800166e:	f003 fa09 	bl	8004a84 <writeMsg>

    	// Imprimimos la matriz 3x3 a estudiar
    	for(i = 0; i < 3; i++){
 8001672:	2300      	movs	r3, #0
 8001674:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001678:	f102 020e 	add.w	r2, r2, #14
 800167c:	7013      	strb	r3, [r2, #0]
 800167e:	e040      	b.n	8001702 <findShorterWay+0x476>
			for (j = 0; j < 3; j++){
 8001680:	2300      	movs	r3, #0
 8001682:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001686:	f102 020d 	add.w	r2, r2, #13
 800168a:	7013      	strb	r3, [r2, #0]
 800168c:	e023      	b.n	80016d6 <findShorterWay+0x44a>
				writeChar(&handlerAstarUsart, nineSlotsMatriz[i][j]);
 800168e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001692:	f103 030e 	add.w	r3, r3, #14
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800169c:	f103 030d 	add.w	r3, r3, #13
 80016a0:	7819      	ldrb	r1, [r3, #0]
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 80016ac:	f103 0310 	add.w	r3, r3, #16
 80016b0:	443b      	add	r3, r7
 80016b2:	440b      	add	r3, r1
 80016b4:	3b14      	subs	r3, #20
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	48b5      	ldr	r0, [pc, #724]	; (8001990 <findShorterWay+0x704>)
 80016bc:	f003 f9ca 	bl	8004a54 <writeChar>
			for (j = 0; j < 3; j++){
 80016c0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80016c4:	f103 030d 	add.w	r3, r3, #13
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80016d0:	f102 020d 	add.w	r2, r2, #13
 80016d4:	7013      	strb	r3, [r2, #0]
 80016d6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80016da:	f103 030d 	add.w	r3, r3, #13
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d9d4      	bls.n	800168e <findShorterWay+0x402>
			}
			writeChar(&handlerAstarUsart, '\r');
 80016e4:	210d      	movs	r1, #13
 80016e6:	48aa      	ldr	r0, [pc, #680]	; (8001990 <findShorterWay+0x704>)
 80016e8:	f003 f9b4 	bl	8004a54 <writeChar>
    	for(i = 0; i < 3; i++){
 80016ec:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80016f0:	f103 030e 	add.w	r3, r3, #14
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80016fc:	f102 020e 	add.w	r2, r2, #14
 8001700:	7013      	strb	r3, [r2, #0]
 8001702:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001706:	f103 030e 	add.w	r3, r3, #14
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d9b7      	bls.n	8001680 <findShorterWay+0x3f4>
    	}

    	writeChar(&handlerAstarUsart, '\r');
 8001710:	210d      	movs	r1, #13
 8001712:	489f      	ldr	r0, [pc, #636]	; (8001990 <findShorterWay+0x704>)
 8001714:	f003 f99e 	bl	8004a54 <writeChar>

    	// Imprimimos el estado actual de la matriz copia
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8001718:	2300      	movs	r3, #0
 800171a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800171e:	f102 0209 	add.w	r2, r2, #9
 8001722:	7013      	strb	r3, [r2, #0]
 8001724:	e01c      	b.n	8001760 <findShorterWay+0x4d4>
    			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 8001726:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800172a:	f103 0309 	add.w	r3, r3, #9
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2234      	movs	r2, #52	; 0x34
 8001732:	fb02 f303 	mul.w	r3, r2, r3
 8001736:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800173a:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	4413      	add	r3, r2
 8001742:	4619      	mov	r1, r3
 8001744:	4892      	ldr	r0, [pc, #584]	; (8001990 <findShorterWay+0x704>)
 8001746:	f003 f99d 	bl	8004a84 <writeMsg>
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 800174a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800174e:	f103 0309 	add.w	r3, r3, #9
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	3301      	adds	r3, #1
 8001756:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800175a:	f102 0209 	add.w	r2, r2, #9
 800175e:	7013      	strb	r3, [r2, #0]
 8001760:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001764:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	7a1b      	ldrb	r3, [r3, #8]
 800176c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001770:	f102 0209 	add.w	r2, r2, #9
 8001774:	7812      	ldrb	r2, [r2, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d3d5      	bcc.n	8001726 <findShorterWay+0x49a>
		}
    	// Escribimos enter para tener todo bien espaciado
    	writeChar(&handlerAstarUsart, '\r');
 800177a:	210d      	movs	r1, #13
 800177c:	4884      	ldr	r0, [pc, #528]	; (8001990 <findShorterWay+0x704>)
 800177e:	f003 f969 	bl	8004a54 <writeChar>


    	for(i = 0; i < 3; i++){
 8001782:	2300      	movs	r3, #0
 8001784:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001788:	f102 020e 	add.w	r2, r2, #14
 800178c:	7013      	strb	r3, [r2, #0]
 800178e:	e33c      	b.n	8001e0a <findShorterWay+0xb7e>
			for (j = 0; j < 3; j++){
 8001790:	2300      	movs	r3, #0
 8001792:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001796:	f102 020d 	add.w	r2, r2, #13
 800179a:	7013      	strb	r3, [r2, #0]
 800179c:	e319      	b.n	8001dd2 <findShorterWay+0xb46>
				switch (nineSlotsMatriz[i][j]) {
 800179e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80017a2:	f103 030e 	add.w	r3, r3, #14
 80017a6:	781a      	ldrb	r2, [r3, #0]
 80017a8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80017ac:	f103 030d 	add.w	r3, r3, #13
 80017b0:	7819      	ldrb	r1, [r3, #0]
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 80017bc:	f103 0310 	add.w	r3, r3, #16
 80017c0:	443b      	add	r3, r7
 80017c2:	440b      	add	r3, r1
 80017c4:	3b14      	subs	r3, #20
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b73      	cmp	r3, #115	; 0x73
 80017ca:	d075      	beq.n	80018b8 <findShorterWay+0x62c>
 80017cc:	2b73      	cmp	r3, #115	; 0x73
 80017ce:	f300 82eb 	bgt.w	8001da8 <findShorterWay+0xb1c>
 80017d2:	2b50      	cmp	r3, #80	; 0x50
 80017d4:	dc66      	bgt.n	80018a4 <findShorterWay+0x618>
 80017d6:	2b23      	cmp	r3, #35	; 0x23
 80017d8:	f2c0 82e6 	blt.w	8001da8 <findShorterWay+0xb1c>
 80017dc:	3b23      	subs	r3, #35	; 0x23
 80017de:	2b2d      	cmp	r3, #45	; 0x2d
 80017e0:	f200 82e2 	bhi.w	8001da8 <findShorterWay+0xb1c>
 80017e4:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <findShorterWay+0x560>)
 80017e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ea:	bf00      	nop
 80017ec:	080018ad 	.word	0x080018ad
 80017f0:	08001da9 	.word	0x08001da9
 80017f4:	08001da9 	.word	0x08001da9
 80017f8:	08001da9 	.word	0x08001da9
 80017fc:	08001da9 	.word	0x08001da9
 8001800:	08001da9 	.word	0x08001da9
 8001804:	08001da9 	.word	0x08001da9
 8001808:	08001abb 	.word	0x08001abb
 800180c:	08001da9 	.word	0x08001da9
 8001810:	08001da9 	.word	0x08001da9
 8001814:	08001da9 	.word	0x08001da9
 8001818:	08001da9 	.word	0x08001da9
 800181c:	08001da9 	.word	0x08001da9
 8001820:	080018b5 	.word	0x080018b5
 8001824:	08001da9 	.word	0x08001da9
 8001828:	08001da9 	.word	0x08001da9
 800182c:	08001da9 	.word	0x08001da9
 8001830:	08001da9 	.word	0x08001da9
 8001834:	08001da9 	.word	0x08001da9
 8001838:	08001da9 	.word	0x08001da9
 800183c:	08001da9 	.word	0x08001da9
 8001840:	08001da9 	.word	0x08001da9
 8001844:	08001da9 	.word	0x08001da9
 8001848:	08001da9 	.word	0x08001da9
 800184c:	08001da9 	.word	0x08001da9
 8001850:	08001da9 	.word	0x08001da9
 8001854:	08001da9 	.word	0x08001da9
 8001858:	08001da9 	.word	0x08001da9
 800185c:	08001da9 	.word	0x08001da9
 8001860:	08001da9 	.word	0x08001da9
 8001864:	08001da9 	.word	0x08001da9
 8001868:	08001da9 	.word	0x08001da9
 800186c:	08001da9 	.word	0x08001da9
 8001870:	080018b1 	.word	0x080018b1
 8001874:	08001da9 	.word	0x08001da9
 8001878:	08001da9 	.word	0x08001da9
 800187c:	08001da9 	.word	0x08001da9
 8001880:	08001da9 	.word	0x08001da9
 8001884:	08001da9 	.word	0x08001da9
 8001888:	08001da9 	.word	0x08001da9
 800188c:	08001da9 	.word	0x08001da9
 8001890:	08001da9 	.word	0x08001da9
 8001894:	08001da9 	.word	0x08001da9
 8001898:	08001da9 	.word	0x08001da9
 800189c:	080018c1 	.word	0x080018c1
 80018a0:	080018bd 	.word	0x080018bd
 80018a4:	2b65      	cmp	r3, #101	; 0x65
 80018a6:	f000 8256 	beq.w	8001d56 <findShorterWay+0xaca>
 80018aa:	e27d      	b.n	8001da8 <findShorterWay+0xb1c>
					case '#':{
						// El primer caso seria cuando el puntero Que estudia a la matriz 3x3 corresponde con un obstaculo, tal pisicion simpkemente se
						//ignora
						// No se hace nada ya que una posicion se obstaculo no se analiza
						__NOP();
 80018ac:	bf00      	nop
						break;
 80018ae:	e27e      	b.n	8001dae <findShorterWay+0xb22>
					}case 'D':{
						// El segundo caso seria cuando el puntero que estudia la matriz corresponde con un punto ya cerrado o ya pasado a la lista de
						// posiciones ya analizadas, por lo que tampoco se hace nada con este caso,
						__NOP();
 80018b0:	bf00      	nop
						break;
 80018b2:	e27c      	b.n	8001dae <findShorterWay+0xb22>
					}case '0':{
						// El tercer caso seria cuando el puntero que estudia la matriz corresponde con un punto 0 de tipo char que indica que
						// es una posicion por fuera del rango, por lo que tampoco se hace nada con este caso,
						__NOP();
 80018b4:	bf00      	nop
						break;
 80018b6:	e27a      	b.n	8001dae <findShorterWay+0xb22>
					}case 's':{
						// El cuarto caso seria cuando el puntero señala la posicion de start por lo que tampoco se hace nada con este caso,
						__NOP();
 80018b8:	bf00      	nop
						break;
 80018ba:	e278      	b.n	8001dae <findShorterWay+0xb22>
					}case 'P':{
						// El quinto caso seria cuando el puntero señala la posicion de analisis, dentro del analisis no queremos
						// que este se analice a si mismo, por lo que ignoramos este punto, solo nos intrresan sus aledanios
						__NOP();
 80018bc:	bf00      	nop
						break;
 80018be:	e276      	b.n	8001dae <findShorterWay+0xb22>
					}case 'O':{
						// El Sexto caso nos encontramos con un estado Open , por lo que tenemos que recalcular para el punto de
						// analisis el Gcost y el Fcost
						position[0] = i;
 80018c0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80018c4:	f103 030e 	add.w	r3, r3, #14
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80018ce:	f102 0214 	add.w	r2, r2, #20
 80018d2:	6013      	str	r3, [r2, #0]
						position[1] = j;
 80018d4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80018d8:	f103 030d 	add.w	r3, r3, #13
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80018e2:	f102 0218 	add.w	r2, r2, #24
 80018e6:	6013      	str	r3, [r2, #0]
						// Como la posicion estudiada esta en estado de open , se debe volver a calcular el G cost y el fcost correspondiente
						// a la posicion opened con respecto al punto de analisis
						ptrChanges->Fcost = setFcost(parameters, ptrChanges, position, matrixCosts);
 80018e8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80018ec:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 80018f0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80018f4:	f102 0214 	add.w	r2, r2, #20
 80018f8:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80018fc:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8001906:	6809      	ldr	r1, [r1, #0]
 8001908:	6800      	ldr	r0, [r0, #0]
 800190a:	f001 f952 	bl	8002bb2 <setFcost>
 800190e:	eef0 7a40 	vmov.f32	s15, s0
 8001912:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	edc3 7a01 	vstr	s15, [r3, #4]
						// Estudiamos si el nuevo FCost es mayor menor o igual al Fcost que ya tiene el estado abierto
						if (ptrChanges->Fcost >= matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]){
 800191c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	ed93 7a01 	vldr	s14, [r3, #4]
 8001926:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001932:	f103 030e 	add.w	r3, r3, #14
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4413      	add	r3, r2
 800193a:	461a      	mov	r2, r3
 800193c:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001940:	fb02 f303 	mul.w	r3, r2, r3
 8001944:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8001948:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800194c:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	18d1      	adds	r1, r2, r3
 8001954:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001960:	f103 030d 	add.w	r3, r3, #13
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	1e5a      	subs	r2, r3, #1
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	440b      	add	r3, r1
 8001974:	3304      	adds	r3, #4
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	db07      	blt.n	8001994 <findShorterWay+0x708>
							// Si el Fcost es mayor o igual a el anteriormente calculado, Significa que el Gcost calculado es el mismo o mayor,
							//por lo que no se actualiza ni el G cost y el F cost ni el parent
							__NOP();
 8001984:	bf00      	nop
							// Si si actualizamos la posicion abierta respectiva, tambien se debe actualizar en la matriz de decisión el F cost
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs

						}
						break;
 8001986:	e212      	b.n	8001dae <findShorterWay+0xb22>
 8001988:	08009500 	.word	0x08009500
 800198c:	20000f0c 	.word	0x20000f0c
 8001990:	20000e60 	.word	0x20000e60
							updateGcost(parameters, ptrChanges, position, matrixCosts);
 8001994:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001998:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 800199c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80019a0:	f102 0214 	add.w	r2, r2, #20
 80019a4:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80019a8:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 80019b2:	6809      	ldr	r1, [r1, #0]
 80019b4:	6800      	ldr	r0, [r0, #0]
 80019b6:	f000 feef 	bl	8002798 <updateGcost>
							updateFcost(parameters, ptrChanges, position, matrixCosts);
 80019ba:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80019be:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 80019c2:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80019c6:	f102 0214 	add.w	r2, r2, #20
 80019ca:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80019ce:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 80019d8:	6809      	ldr	r1, [r1, #0]
 80019da:	6800      	ldr	r0, [r0, #0]
 80019dc:	f000 ff0a 	bl	80027f4 <updateFcost>
							updateParent(ptrChanges, position, matrixCosts);
 80019e0:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80019e4:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 80019e8:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 80019ec:	f101 0114 	add.w	r1, r1, #20
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	f000 fe76 	bl	80026e8 <updateParent>
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 80019fc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001a08:	f103 030e 	add.w	r3, r3, #14
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	461a      	mov	r2, r3
 8001a12:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8001a1e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001a22:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	18d0      	adds	r0, r2, r3
 8001a2a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001a36:	f103 030d 	add.w	r3, r3, #13
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	1e5a      	subs	r2, r3, #1
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8001a40:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6899      	ldr	r1, [r3, #8]
 8001a48:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001a4c:	f103 030e 	add.w	r3, r3, #14
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	440b      	add	r3, r1
 8001a54:	4619      	mov	r1, r3
 8001a56:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001a5a:	fb01 f303 	mul.w	r3, r1, r3
 8001a5e:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8001a62:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8001a66:	f6a1 716c 	subw	r1, r1, #3948	; 0xf6c
 8001a6a:	6809      	ldr	r1, [r1, #0]
 8001a6c:	18cc      	adds	r4, r1, r3
 8001a6e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68d9      	ldr	r1, [r3, #12]
 8001a76:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001a7a:	f103 030d 	add.w	r3, r3, #13
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	440b      	add	r3, r1
 8001a82:	1e59      	subs	r1, r3, #1
 8001a84:	460b      	mov	r3, r1
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	440b      	add	r3, r1
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4423      	add	r3, r4
 8001a8e:	3314      	adds	r3, #20
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a98:	ee17 4a90 	vmov	r4, s15
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4403      	add	r3, r0
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	681a      	ldr	r2, [r3, #0]
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8001aaa:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001aae:	f6a3 715c 	subw	r1, r3, #3932	; 0xf5c
 8001ab2:	0123      	lsls	r3, r4, #4
 8001ab4:	440b      	add	r3, r1
 8001ab6:	601a      	str	r2, [r3, #0]
						break;
 8001ab8:	e179      	b.n	8001dae <findShorterWay+0xb22>
					}case '*':{
						// El séptimo caso seria cuando el puntero que estudia la matriz corresponde con un punto '*' que corresponde con un
						// espacio no estudiado, por lo que simplemente se setea sobre estos nuevos puntos su Gcost y su Fcost, incluyendo el parent
						position[0] = i;
 8001aba:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001abe:	f103 030e 	add.w	r3, r3, #14
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001ac8:	f102 0214 	add.w	r2, r2, #20
 8001acc:	6013      	str	r3, [r2, #0]
						position[1] = j;
 8001ace:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001ad2:	f103 030d 	add.w	r3, r3, #13
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001adc:	f102 0218 	add.w	r2, r2, #24
 8001ae0:	6013      	str	r3, [r2, #0]
						updateGcost(parameters, ptrChanges, position, matrixCosts);
 8001ae2:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001ae6:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8001aea:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001aee:	f102 0214 	add.w	r2, r2, #20
 8001af2:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8001af6:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8001b00:	6809      	ldr	r1, [r1, #0]
 8001b02:	6800      	ldr	r0, [r0, #0]
 8001b04:	f000 fe48 	bl	8002798 <updateGcost>
						updateFcost(parameters, ptrChanges, position, matrixCosts);
 8001b08:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001b0c:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8001b10:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001b14:	f102 0214 	add.w	r2, r2, #20
 8001b18:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8001b1c:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8001b26:	6809      	ldr	r1, [r1, #0]
 8001b28:	6800      	ldr	r0, [r0, #0]
 8001b2a:	f000 fe63 	bl	80027f4 <updateFcost>
						updateParent(ptrChanges, position, matrixCosts);
 8001b2e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001b32:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8001b36:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 8001b3a:	f101 0114 	add.w	r1, r1, #20
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	f000 fdcf 	bl	80026e8 <updateParent>

						// Es conveniente que guardemos tambien esta información dentro de readableGrid porque se necesita luego almacenar esta ifnromacion ya
						// estudiada
						Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1] = 'O';
 8001b4a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001b56:	f103 030e 	add.w	r3, r3, #14
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2334      	movs	r3, #52	; 0x34
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	3b34      	subs	r3, #52	; 0x34
 8001b68:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001b6c:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	441a      	add	r2, r3
 8001b74:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68d9      	ldr	r1, [r3, #12]
 8001b7c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001b80:	f103 030d 	add.w	r3, r3, #13
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	440b      	add	r3, r1
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	214f      	movs	r1, #79	; 0x4f
 8001b8c:	54d1      	strb	r1, [r2, r3]

						// Como se crearon nuevos estados abiertos , se almacena dentro de la matriz de decicion el Fcost, el H cost, y la posicion
						// de cada punto analizado
						// se almacena el Fcost
						decisionMatrix[counter][0] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1];
 8001b8e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001b9a:	f103 030e 	add.w	r3, r3, #14
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8001bb0:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001bb4:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	18d1      	adds	r1, r2, r3
 8001bbc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001bc8:	f103 030d 	add.w	r3, r3, #13
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	1e5a      	subs	r2, r3, #1
 8001bd2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001bd6:	f103 030b 	add.w	r3, r3, #11
 8001bda:	7818      	ldrb	r0, [r3, #0]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	3304      	adds	r3, #4
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001bee:	f6a3 715c 	subw	r1, r3, #3932	; 0xf5c
 8001bf2:	0103      	lsls	r3, r0, #4
 8001bf4:	440b      	add	r3, r1
 8001bf6:	601a      	str	r2, [r3, #0]
						// Se almacena el H cost
						decisionMatrix[counter][1] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][2];
 8001bf8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001c04:	f103 030e 	add.w	r3, r3, #14
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8001c1a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001c1e:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	18d1      	adds	r1, r2, r3
 8001c26:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001c32:	f103 030d 	add.w	r3, r3, #13
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4413      	add	r3, r2
 8001c3a:	1e5a      	subs	r2, r3, #1
 8001c3c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001c40:	f103 030b 	add.w	r3, r3, #11
 8001c44:	7818      	ldrb	r0, [r3, #0]
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	440b      	add	r3, r1
 8001c50:	3308      	adds	r3, #8
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001c58:	f6a3 715c 	subw	r1, r3, #3932	; 0xf5c
 8001c5c:	0103      	lsls	r3, r0, #4
 8001c5e:	440b      	add	r3, r1
 8001c60:	3304      	adds	r3, #4
 8001c62:	601a      	str	r2, [r3, #0]
						// Se almacena la posicion i
						decisionMatrix[counter][2] = ptrChanges->posAnalisis[0] + i - 1;
 8001c64:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001c70:	f103 030e 	add.w	r3, r3, #14
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	1e5a      	subs	r2, r3, #1
 8001c7a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001c7e:	f103 030b 	add.w	r3, r3, #11
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	ee07 2a90 	vmov	s15, r2
 8001c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001c90:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	4413      	add	r3, r2
 8001c98:	3308      	adds	r3, #8
 8001c9a:	edc3 7a00 	vstr	s15, [r3]
						// Se almacena la posicion j
						decisionMatrix[counter][3] = ptrChanges->posAnalisis[1] + j - 1;
 8001c9e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001caa:	f103 030d 	add.w	r3, r3, #13
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	1e5a      	subs	r2, r3, #1
 8001cb4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001cb8:	f103 030b 	add.w	r3, r3, #11
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	ee07 2a90 	vmov	s15, r2
 8001cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc6:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001cca:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	4413      	add	r3, r2
 8001cd2:	330c      	adds	r3, #12
 8001cd4:	edc3 7a00 	vstr	s15, [r3]

						// Guardamos en la matris grande de costos en la ultima matriz el valor del counter asignado a la posición
						matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5] = counter;
 8001cd8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001ce4:	f103 030e 	add.w	r3, r3, #14
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	461a      	mov	r2, r3
 8001cee:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001cf2:	fb02 f303 	mul.w	r3, r2, r3
 8001cf6:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8001cfa:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001cfe:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	18d1      	adds	r1, r2, r3
 8001d06:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001d12:	f103 030d 	add.w	r3, r3, #13
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4413      	add	r3, r2
 8001d1a:	1e5a      	subs	r2, r3, #1
 8001d1c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001d20:	f103 030b 	add.w	r3, r3, #11
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	3314      	adds	r3, #20
 8001d3a:	edc3 7a00 	vstr	s15, [r3]

						// Aumentamos el contador ya que cada posicion estudiada aqui es una nueva posicion que entra a estado open
						counter++;
 8001d3e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001d42:	f103 030b 	add.w	r3, r3, #11
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001d4e:	f102 020b 	add.w	r2, r2, #11
 8001d52:	7013      	strb	r3, [r2, #0]

						break;
 8001d54:	e02b      	b.n	8001dae <findShorterWay+0xb22>
					}case 'e':{
						// El octavo caso Sería cuando se encuentra la 'e' de end , donde ya logramos despues de viajar a traves de la maya llegar
						// hasta el punto final, aqui para economizar recursos simplemente haremos que el ciclo se detenga y de parent al end le asignamos
						// el ultimo
						position[0] = i;
 8001d56:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001d5a:	f103 030e 	add.w	r3, r3, #14
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001d64:	f102 0214 	add.w	r2, r2, #20
 8001d68:	6013      	str	r3, [r2, #0]
						position[1] = j;
 8001d6a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001d6e:	f103 030d 	add.w	r3, r3, #13
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001d78:	f102 0218 	add.w	r2, r2, #24
 8001d7c:	6013      	str	r3, [r2, #0]
						updateParent(ptrChanges, position, matrixCosts);
 8001d7e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8001d82:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8001d86:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 8001d8a:	f101 0114 	add.w	r1, r1, #20
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	f000 fca7 	bl	80026e8 <updateParent>
						shorterWayFound = SET;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001da0:	f102 020f 	add.w	r2, r2, #15
 8001da4:	7013      	strb	r3, [r2, #0]
						break;
 8001da6:	e002      	b.n	8001dae <findShorterWay+0xb22>
					}
					default:{
						// Si se llega hasta aca es porque hay un caracter no permitido dentro de la malla y se debe parar la ejecucion del programa
						return 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f000 bc90 	b.w	80026ce <findShorterWay+0x1442>
						break;
					}
				}// Termino del switch case

				if (shorterWayFound){
 8001dae:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001db2:	f103 030f 	add.w	r3, r3, #15
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d113      	bne.n	8001de4 <findShorterWay+0xb58>
			for (j = 0; j < 3; j++){
 8001dbc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001dc0:	f103 030d 	add.w	r3, r3, #13
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001dcc:	f102 020d 	add.w	r2, r2, #13
 8001dd0:	7013      	strb	r3, [r2, #0]
 8001dd2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001dd6:	f103 030d 	add.w	r3, r3, #13
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	f67f acde 	bls.w	800179e <findShorterWay+0x512>
 8001de2:	e000      	b.n	8001de6 <findShorterWay+0xb5a>
					break;
 8001de4:	bf00      	nop
				}

			}// Termino del ciclo for
			if (shorterWayFound){
 8001de6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001dea:	f103 030f 	add.w	r3, r3, #15
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d113      	bne.n	8001e1c <findShorterWay+0xb90>
    	for(i = 0; i < 3; i++){
 8001df4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001df8:	f103 030e 	add.w	r3, r3, #14
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001e04:	f102 020e 	add.w	r2, r2, #14
 8001e08:	7013      	strb	r3, [r2, #0]
 8001e0a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001e0e:	f103 030e 	add.w	r3, r3, #14
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	f67f acbb 	bls.w	8001790 <findShorterWay+0x504>
 8001e1a:	e000      	b.n	8001e1e <findShorterWay+0xb92>
				break;
 8001e1c:	bf00      	nop
    	// el que tiene el Fcost mas pequeño, y en caso de Fcost iguales desempata el que tenga una heuristica o Hcost menor
    	// Volvemos a recorrer los aledanios para seleccionar la nueva posicion, tal posicion pasara a ser el nuevo punto de analisis, el resto
    	// seran solo puntos en estado Open, y el antiguo punto de analisis sera ahora un punto Done, Para ello usaremos la funcion findeLesserValue
    	// Esta funcion almacena dentro de la estructura costChangesAndPos_t los valores de la pisicion del F cost mas pequeño, en el caso de que haya
    	// mas de uno igual, se alzará una bandera que indica que esto ocurrio, por lo que internamente el tambien analiza cual es la heuristica
    	if (!shorterWayFound){
 8001e1e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001e22:	f103 030f 	add.w	r3, r3, #15
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f040 8273 	bne.w	8002314 <findShorterWay+0x1088>
			findLesserValue(ptrChanges, decisionMatrix, counter);
 8001e2e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001e32:	f103 030b 	add.w	r3, r3, #11
 8001e36:	781a      	ldrb	r2, [r3, #0]
 8001e38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e3c:	3b1c      	subs	r3, #28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	f001 f81b 	bl	8002e80 <findLesserValue>
			// A partir de aqui tendriamos la posicion del F cost mas pequeño, pero primero se compueba de que si depronto hubo un F cost igual
			if (ptrChanges->equalFcost){
 8001e4a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 812c 	beq.w	80020b2 <findShorterWay+0xe26>
				// Si estamos aqui es porque si hubo mas de un Fcost igual , por lo que se busca es la posicion del Hcost mas pequeño como la nueva posicion
				// que tomara el nuevo papel de punto de analisis, y el que fue el punto de analisis sera ahor aun estado Done o 'D'
				// Llevamos la posicion de analisis al estado cerrado
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8001e5a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8001e6a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8001e7a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	461a      	mov	r2, r3
 8001e84:	2334      	movs	r3, #52	; 0x34
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001e8e:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	441a      	add	r2, r3
 8001e96:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	2b73      	cmp	r3, #115	; 0x73
 8001ea2:	d101      	bne.n	8001ea8 <findShorterWay+0xc1c>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8001ea4:	bf00      	nop
 8001ea6:	e013      	b.n	8001ed0 <findShorterWay+0xc44>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8001ea8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2334      	movs	r3, #52	; 0x34
 8001eb4:	fb02 f303 	mul.w	r3, r2, r3
 8001eb8:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001ebc:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	441a      	add	r2, r3
 8001ec4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2144      	movs	r1, #68	; 0x44
 8001ece:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserHcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8001ed0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed8:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001edc:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3308      	adds	r3, #8
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eee:	ee17 2a90 	vmov	r2, s15
 8001ef2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserHcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8001efa:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f02:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001f06:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	4413      	add	r3, r2
 8001f0e:	330c      	adds	r3, #12
 8001f10:	edd3 7a00 	vldr	s15, [r3]
 8001f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f18:	ee17 2a90 	vmov	r2, s15
 8001f1c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 8001f24:	2300      	movs	r3, #0
 8001f26:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001f2a:	f102 020e 	add.w	r2, r2, #14
 8001f2e:	7013      	strb	r3, [r2, #0]
 8001f30:	e01e      	b.n	8001f70 <findShorterWay+0xce4>
					decisionMatrix[ptrChanges->lesserHcostPosition][i] = 0;
 8001f32:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f3a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001f3e:	f103 030e 	add.w	r3, r3, #14
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8001f48:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8001f4c:	0089      	lsls	r1, r1, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 8001f5a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001f5e:	f103 030e 	add.w	r3, r3, #14
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001f6a:	f102 020e 	add.w	r2, r2, #14
 8001f6e:	7013      	strb	r3, [r2, #0]
 8001f70:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001f74:	f103 030e 	add.w	r3, r3, #14
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d9d9      	bls.n	8001f32 <findShorterWay+0xca6>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8001f7e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001f8e:	f102 020e 	add.w	r2, r2, #14
 8001f92:	7013      	strb	r3, [r2, #0]
 8001f94:	e05f      	b.n	8002056 <findShorterWay+0xdca>
					for (j = 0 ; j < 4 ; j++){
 8001f96:	2300      	movs	r3, #0
 8001f98:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8001f9c:	f102 020d 	add.w	r2, r2, #13
 8001fa0:	7013      	strb	r3, [r2, #0]
 8001fa2:	e046      	b.n	8002032 <findShorterWay+0xda6>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 8001fa4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001fa8:	f103 030e 	add.w	r3, r3, #14
 8001fac:	781c      	ldrb	r4, [r3, #0]
 8001fae:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001fb2:	f103 030d 	add.w	r3, r3, #13
 8001fb6:	781a      	ldrb	r2, [r3, #0]
 8001fb8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001fbc:	f103 030e 	add.w	r3, r3, #14
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	1e58      	subs	r0, r3, #1
 8001fc4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001fc8:	f103 030d 	add.w	r3, r3, #13
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8001fd2:	f6a1 715c 	subw	r1, r1, #3932	; 0xf5c
 8001fd6:	00a4      	lsls	r4, r4, #2
 8001fd8:	4422      	add	r2, r4
 8001fda:	0092      	lsls	r2, r2, #2
 8001fdc:	440a      	add	r2, r1
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8001fe4:	f6a1 715c 	subw	r1, r1, #3932	; 0xf5c
 8001fe8:	0080      	lsls	r0, r0, #2
 8001fea:	4403      	add	r3, r0
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8001ff2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8001ff6:	f103 030e 	add.w	r3, r3, #14
 8001ffa:	7819      	ldrb	r1, [r3, #0]
 8001ffc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002000:	f103 030d 	add.w	r3, r3, #13
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800200a:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 800200e:	0089      	lsls	r1, r1, #2
 8002010:	440b      	add	r3, r1
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 800201c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002020:	f103 030d 	add.w	r3, r3, #13
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	3301      	adds	r3, #1
 8002028:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800202c:	f102 020d 	add.w	r2, r2, #13
 8002030:	7013      	strb	r3, [r2, #0]
 8002032:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002036:	f103 030d 	add.w	r3, r3, #13
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b03      	cmp	r3, #3
 800203e:	d9b1      	bls.n	8001fa4 <findShorterWay+0xd18>
				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8002040:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002044:	f103 030e 	add.w	r3, r3, #14
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	3301      	adds	r3, #1
 800204c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002050:	f102 020e 	add.w	r2, r2, #14
 8002054:	7013      	strb	r3, [r2, #0]
 8002056:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800205a:	f103 030e 	add.w	r3, r3, #14
 800205e:	781a      	ldrb	r2, [r3, #0]
 8002060:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002064:	f103 030b 	add.w	r3, r3, #11
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d393      	bcc.n	8001f96 <findShorterWay+0xd0a>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 800206e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002072:	f103 030b 	add.w	r3, r3, #11
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	3b01      	subs	r3, #1
 800207a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800207e:	f102 020b 	add.w	r2, r2, #11
 8002082:	7013      	strb	r3, [r2, #0]

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8002084:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8002094:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	615a      	str	r2, [r3, #20]

				// Resetemos la bandera que nos indica si hay un valor de Fcost igual.
				ptrChanges->equalFcost = RESET;
 80020a4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80020b0:	e124      	b.n	80022fc <findShorterWay+0x1070>

			}else{
				// Si estamos aqui es porque no hubo F costs iguales y se hara lo mismo que en el caso anterior solo que se tendra en cuenta
				// la posicion encontrada del Fcost mas pequeño, ya no del Hcost mas pequeño
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 80020b2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 80020c2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 80020d2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	461a      	mov	r2, r3
 80020dc:	2334      	movs	r3, #52	; 0x34
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80020e6:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	441a      	add	r2, r3
 80020ee:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	2b73      	cmp	r3, #115	; 0x73
 80020fa:	d101      	bne.n	8002100 <findShorterWay+0xe74>
					// Dejamos el char de start tal cual como esta
					__NOP();
 80020fc:	bf00      	nop
 80020fe:	e013      	b.n	8002128 <findShorterWay+0xe9c>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8002100:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	461a      	mov	r2, r3
 800210a:	2334      	movs	r3, #52	; 0x34
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8002114:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	441a      	add	r2, r3
 800211c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2144      	movs	r1, #68	; 0x44
 8002126:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserFcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8002128:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002130:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8002134:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	4413      	add	r3, r2
 800213c:	3308      	adds	r3, #8
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002146:	ee17 2a90 	vmov	r2, s15
 800214a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserFcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8002152:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800215e:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	4413      	add	r3, r2
 8002166:	330c      	adds	r3, #12
 8002168:	edd3 7a00 	vldr	s15, [r3]
 800216c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002170:	ee17 2a90 	vmov	r2, s15
 8002174:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 800217c:	2300      	movs	r3, #0
 800217e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002182:	f102 020e 	add.w	r2, r2, #14
 8002186:	7013      	strb	r3, [r2, #0]
 8002188:	e01e      	b.n	80021c8 <findShorterWay+0xf3c>
					decisionMatrix[ptrChanges->lesserFcostPosition][i] = 0;
 800218a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002192:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002196:	f103 030e 	add.w	r3, r3, #14
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80021a0:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 80021a4:	0089      	lsls	r1, r1, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 80021b2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80021b6:	f103 030e 	add.w	r3, r3, #14
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80021c2:	f102 020e 	add.w	r2, r2, #14
 80021c6:	7013      	strb	r3, [r2, #0]
 80021c8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80021cc:	f103 030e 	add.w	r3, r3, #14
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d9d9      	bls.n	800218a <findShorterWay+0xefe>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 80021d6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	3301      	adds	r3, #1
 80021e2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80021e6:	f102 020e 	add.w	r2, r2, #14
 80021ea:	7013      	strb	r3, [r2, #0]
 80021ec:	e05f      	b.n	80022ae <findShorterWay+0x1022>
					for (j = 0 ; j < 4 ; j++){
 80021ee:	2300      	movs	r3, #0
 80021f0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80021f4:	f102 020d 	add.w	r2, r2, #13
 80021f8:	7013      	strb	r3, [r2, #0]
 80021fa:	e046      	b.n	800228a <findShorterWay+0xffe>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 80021fc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002200:	f103 030e 	add.w	r3, r3, #14
 8002204:	781c      	ldrb	r4, [r3, #0]
 8002206:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800220a:	f103 030d 	add.w	r3, r3, #13
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002214:	f103 030e 	add.w	r3, r3, #14
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	1e58      	subs	r0, r3, #1
 800221c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002220:	f103 030d 	add.w	r3, r3, #13
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 800222a:	f6a1 715c 	subw	r1, r1, #3932	; 0xf5c
 800222e:	00a4      	lsls	r4, r4, #2
 8002230:	4422      	add	r2, r4
 8002232:	0092      	lsls	r2, r2, #2
 8002234:	440a      	add	r2, r1
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 800223c:	f6a1 715c 	subw	r1, r1, #3932	; 0xf5c
 8002240:	0080      	lsls	r0, r0, #2
 8002242:	4403      	add	r3, r0
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 800224a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800224e:	f103 030e 	add.w	r3, r3, #14
 8002252:	7819      	ldrb	r1, [r3, #0]
 8002254:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002258:	f103 030d 	add.w	r3, r3, #13
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8002262:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8002266:	0089      	lsls	r1, r1, #2
 8002268:	440b      	add	r3, r1
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 8002274:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002278:	f103 030d 	add.w	r3, r3, #13
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	3301      	adds	r3, #1
 8002280:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002284:	f102 020d 	add.w	r2, r2, #13
 8002288:	7013      	strb	r3, [r2, #0]
 800228a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800228e:	f103 030d 	add.w	r3, r3, #13
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d9b1      	bls.n	80021fc <findShorterWay+0xf70>
				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 8002298:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800229c:	f103 030e 	add.w	r3, r3, #14
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80022a8:	f102 020e 	add.w	r2, r2, #14
 80022ac:	7013      	strb	r3, [r2, #0]
 80022ae:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80022b2:	f103 030e 	add.w	r3, r3, #14
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80022bc:	f103 030b 	add.w	r3, r3, #11
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d393      	bcc.n	80021ee <findShorterWay+0xf62>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 80022c6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80022ca:	f103 030b 	add.w	r3, r3, #11
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80022d6:	f102 020b 	add.w	r2, r2, #11
 80022da:	7013      	strb	r3, [r2, #0]

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 80022dc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 80022ec:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	615a      	str	r2, [r3, #20]

			}

			counterStudy++;
 80022fc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002300:	f103 030a 	add.w	r3, r3, #10
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	3301      	adds	r3, #1
 8002308:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800230c:	f102 020a 	add.w	r2, r2, #10
 8002310:	7013      	strb	r3, [r2, #0]
 8002312:	e091      	b.n	8002438 <findShorterWay+0x11ac>
    	}else{
			// Si el programa entra en esta condicion quiere decir que ya se encontro la ruta mas corta y ya es hora de construir la matriz de posiciones
			// donde se almacenara la ruta mas corta
			//buscamos cuantos elementos deberia de tener el arreglo para ello usaremos el siguiente while donde recorreremos desde el end hasta el
			//start
			i = ptrChanges->endPos[0];
 8002314:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002320:	f102 020e 	add.w	r2, r2, #14
 8002324:	7013      	strb	r3, [r2, #0]
			j = ptrChanges->endPos[1];
 8002326:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002332:	f102 020d 	add.w	r2, r2, #13
 8002336:	7013      	strb	r3, [r2, #0]
			while(Gridcopy[i][j] != 's'){
 8002338:	e068      	b.n	800240c <findShorterWay+0x1180>
				// Actualizamos a la nueva posición
				position[0] = matrixCosts[i][j][3];
 800233a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800233e:	f103 030e 	add.w	r3, r3, #14
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8002348:	fb02 f303 	mul.w	r3, r2, r3
 800234c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8002350:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	18d1      	adds	r1, r2, r3
 8002358:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800235c:	f103 030d 	add.w	r3, r3, #13
 8002360:	781a      	ldrb	r2, [r3, #0]
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	330c      	adds	r3, #12
 800236e:	edd3 7a00 	vldr	s15, [r3]
 8002372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002376:	ee17 3a90 	vmov	r3, s15
 800237a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800237e:	f102 0214 	add.w	r2, r2, #20
 8002382:	6013      	str	r3, [r2, #0]
				position[1] = matrixCosts[i][j][4];
 8002384:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002388:	f103 030e 	add.w	r3, r3, #14
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8002392:	fb02 f303 	mul.w	r3, r2, r3
 8002396:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800239a:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	18d1      	adds	r1, r2, r3
 80023a2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80023a6:	f103 030d 	add.w	r3, r3, #13
 80023aa:	781a      	ldrb	r2, [r3, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	440b      	add	r3, r1
 80023b6:	3310      	adds	r3, #16
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c0:	ee17 3a90 	vmov	r3, s15
 80023c4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80023c8:	f102 0218 	add.w	r2, r2, #24
 80023cc:	6013      	str	r3, [r2, #0]

				// actualizamos la nueva posición
				i = position[0];
 80023ce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80023d2:	f103 0314 	add.w	r3, r3, #20
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80023dc:	f102 020e 	add.w	r2, r2, #14
 80023e0:	7013      	strb	r3, [r2, #0]
				j = position[1];
 80023e2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80023e6:	f103 0318 	add.w	r3, r3, #24
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80023f0:	f102 020d 	add.w	r2, r2, #13
 80023f4:	7013      	strb	r3, [r2, #0]

				// incrementamos en uno la cantidad de posiciones a guardar
				numberOfPositions++;
 80023f6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80023fa:	f103 030c 	add.w	r3, r3, #12
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	3301      	adds	r3, #1
 8002402:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002406:	f102 020c 	add.w	r2, r2, #12
 800240a:	7013      	strb	r3, [r2, #0]
			while(Gridcopy[i][j] != 's'){
 800240c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002410:	f103 030e 	add.w	r3, r3, #14
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2234      	movs	r2, #52	; 0x34
 8002418:	fb02 f303 	mul.w	r3, r2, r3
 800241c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8002420:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	441a      	add	r2, r3
 8002428:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800242c:	f103 030d 	add.w	r3, r3, #13
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	5cd3      	ldrb	r3, [r2, r3]
 8002434:	2b73      	cmp	r3, #115	; 0x73
 8002436:	d180      	bne.n	800233a <findShorterWay+0x10ae>
    while(!shorterWayFound){
 8002438:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800243c:	f103 030f 	add.w	r3, r3, #15
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f43e aff9 	beq.w	800143a <findShorterWay+0x1ae>
		}


    }// final del ciclo While

    writeMsg(&handlerAstarUsart, "\n___________Hemos Encontrado la ruta mas corta______________\n");
 8002448:	49a4      	ldr	r1, [pc, #656]	; (80026dc <findShorterWay+0x1450>)
 800244a:	48a5      	ldr	r0, [pc, #660]	; (80026e0 <findShorterWay+0x1454>)
 800244c:	f002 fb1a 	bl	8004a84 <writeMsg>
    writeChar(&handlerAstarUsart, '\r');
 8002450:	210d      	movs	r1, #13
 8002452:	48a3      	ldr	r0, [pc, #652]	; (80026e0 <findShorterWay+0x1454>)
 8002454:	f002 fafe 	bl	8004a54 <writeChar>

    // estando aqui ya solo queda almacenar toda las posiciones parent comenzando desde el end hasta el start, siguendo el parent de cada uno se asegura
    // que lo que se esta almacenando es la ruta mas corta

    //Almacenamos dentro de una de las variables del arreglo AStar_distancesHandler la cantidad de elementos que tiene la matriz de la ruta mas corta
    parameters->numberOfElements = numberOfPositions + 1 ; // Le sumamos uno mas para incluir el punto de inicio
 8002458:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800245c:	f103 030c 	add.w	r3, r3, #12
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	3301      	adds	r3, #1
 8002464:	b2da      	uxtb	r2, r3
 8002466:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800246a:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	729a      	strb	r2, [r3, #10]


    i = ptrChanges->endPos[0];
 8002472:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800247e:	f102 020e 	add.w	r2, r2, #14
 8002482:	7013      	strb	r3, [r2, #0]
	j = ptrChanges->endPos[1];
 8002484:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002490:	f102 020d 	add.w	r2, r2, #13
 8002494:	7013      	strb	r3, [r2, #0]

    // Recorremos la matriz e iremos almacenando dentro de este comenzando desde la posicion final y terminando en la posicion inicial
    for (uint8_t  k = 0 ; k < numberOfPositions + 1 ; k++){
 8002496:	2300      	movs	r3, #0
 8002498:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800249c:	f102 0208 	add.w	r2, r2, #8
 80024a0:	7013      	strb	r3, [r2, #0]
 80024a2:	e0d1      	b.n	8002648 <findShorterWay+0x13bc>
    	//Cambiamos la matriz redeableGrid, las posiciones que corresponden a la ruta mas corta por un char 'I',
    	if (Gridcopy[i][j] == 'e'){
 80024a4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80024a8:	f103 030e 	add.w	r3, r3, #14
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2234      	movs	r2, #52	; 0x34
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80024b8:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	441a      	add	r2, r3
 80024c0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80024c4:	f103 030d 	add.w	r3, r3, #13
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	5cd3      	ldrb	r3, [r2, r3]
 80024cc:	2b65      	cmp	r3, #101	; 0x65
 80024ce:	d101      	bne.n	80024d4 <findShorterWay+0x1248>
    		// Si estamos aqui es porque no queremos cambiar el char de finalización
    		__NOP();
 80024d0:	bf00      	nop
 80024d2:	e02c      	b.n	800252e <findShorterWay+0x12a2>
    	}else if (Gridcopy[i][j] == 's'){
 80024d4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80024d8:	f103 030e 	add.w	r3, r3, #14
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2234      	movs	r2, #52	; 0x34
 80024e0:	fb02 f303 	mul.w	r3, r2, r3
 80024e4:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80024e8:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	441a      	add	r2, r3
 80024f0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80024f4:	f103 030d 	add.w	r3, r3, #13
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	2b73      	cmp	r3, #115	; 0x73
 80024fe:	d101      	bne.n	8002504 <findShorterWay+0x1278>
    		// Si estamos aqui es porque no queremos cambiar el char de inicio
    		__NOP();
 8002500:	bf00      	nop
 8002502:	e014      	b.n	800252e <findShorterWay+0x12a2>
    	}else{
    		// Si estamos aqui es porque estamos dentro del camino a seguir, por lo cambiamos a una 'I'
    		Gridcopy[i][j] = 'I';
 8002504:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002508:	f103 030e 	add.w	r3, r3, #14
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2234      	movs	r2, #52	; 0x34
 8002510:	fb02 f303 	mul.w	r3, r2, r3
 8002514:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8002518:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	441a      	add	r2, r3
 8002520:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002524:	f103 030d 	add.w	r3, r3, #13
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2149      	movs	r1, #73	; 0x49
 800252c:	54d1      	strb	r1, [r2, r3]
    	}


    	// Almacenamos en la matriz de ruta mas corta
		shorterWay[k][0] = i;
 800252e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002532:	f103 0308 	add.w	r3, r3, #8
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 800253e:	f102 0204 	add.w	r2, r2, #4
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	4413      	add	r3, r2
 8002546:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800254a:	f102 020e 	add.w	r2, r2, #14
 800254e:	7812      	ldrb	r2, [r2, #0]
 8002550:	601a      	str	r2, [r3, #0]
		shorterWay[k][1] = j;
 8002552:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002556:	f103 0308 	add.w	r3, r3, #8
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8002562:	f102 0204 	add.w	r2, r2, #4
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	4413      	add	r3, r2
 800256a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800256e:	f102 020d 	add.w	r2, r2, #13
 8002572:	7812      	ldrb	r2, [r2, #0]
 8002574:	605a      	str	r2, [r3, #4]

    	// comenzamos almacenando las posiciones en orden desde el final al punto inicial
		// Actualizamos a la nueva posición
		position[0] = matrixCosts[i][j][3];
 8002576:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800257a:	f103 030e 	add.w	r3, r3, #14
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8002584:	fb02 f303 	mul.w	r3, r2, r3
 8002588:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800258c:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	18d1      	adds	r1, r2, r3
 8002594:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002598:	f103 030d 	add.w	r3, r3, #13
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	4613      	mov	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	440b      	add	r3, r1
 80025a8:	330c      	adds	r3, #12
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025b2:	ee17 3a90 	vmov	r3, s15
 80025b6:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80025ba:	f102 0214 	add.w	r2, r2, #20
 80025be:	6013      	str	r3, [r2, #0]
		position[1] = matrixCosts[i][j][4];
 80025c0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80025c4:	f103 030e 	add.w	r3, r3, #14
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80025d6:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	18d1      	adds	r1, r2, r3
 80025de:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80025e2:	f103 030d 	add.w	r3, r3, #13
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	3310      	adds	r3, #16
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025fc:	ee17 3a90 	vmov	r3, s15
 8002600:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8002604:	f102 0218 	add.w	r2, r2, #24
 8002608:	6013      	str	r3, [r2, #0]

		// actualizamos la nueva posición
		i = position[0];
 800260a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800260e:	f103 0314 	add.w	r3, r3, #20
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002618:	f102 020e 	add.w	r2, r2, #14
 800261c:	7013      	strb	r3, [r2, #0]
		j = position[1];
 800261e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8002622:	f103 0318 	add.w	r3, r3, #24
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800262c:	f102 020d 	add.w	r2, r2, #13
 8002630:	7013      	strb	r3, [r2, #0]
    for (uint8_t  k = 0 ; k < numberOfPositions + 1 ; k++){
 8002632:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002636:	f103 0308 	add.w	r3, r3, #8
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	3301      	adds	r3, #1
 800263e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002642:	f102 0208 	add.w	r2, r2, #8
 8002646:	7013      	strb	r3, [r2, #0]
 8002648:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800264c:	f103 030c 	add.w	r3, r3, #12
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002656:	f103 0308 	add.w	r3, r3, #8
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	f4bf af21 	bcs.w	80024a4 <findShorterWay+0x1218>


    }
	// Imprimimos el estado actual de la matriz copia
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8002662:	2300      	movs	r3, #0
 8002664:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8002668:	f102 0207 	add.w	r2, r2, #7
 800266c:	7013      	strb	r3, [r2, #0]
 800266e:	e01c      	b.n	80026aa <findShorterWay+0x141e>
			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 8002670:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002674:	f103 0307 	add.w	r3, r3, #7
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2234      	movs	r2, #52	; 0x34
 800267c:	fb02 f303 	mul.w	r3, r2, r3
 8002680:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8002684:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	4413      	add	r3, r2
 800268c:	4619      	mov	r1, r3
 800268e:	4814      	ldr	r0, [pc, #80]	; (80026e0 <findShorterWay+0x1454>)
 8002690:	f002 f9f8 	bl	8004a84 <writeMsg>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8002694:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8002698:	f103 0307 	add.w	r3, r3, #7
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80026a4:	f102 0207 	add.w	r2, r2, #7
 80026a8:	7013      	strb	r3, [r2, #0]
 80026aa:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80026ae:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	7a1b      	ldrb	r3, [r3, #8]
 80026b6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80026ba:	f102 0207 	add.w	r2, r2, #7
 80026be:	7812      	ldrb	r2, [r2, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d3d5      	bcc.n	8002670 <findShorterWay+0x13e4>

    // A partir de aqui habremos logrado despues de un largo camino hallar la ruta mas corta entre dos puntos , el robot ya con esa informacion
    // sabra hacia donde moverse y cuanto moverse

    // Si llegamos hasta aca, con exito hemos logrado todo lo cometido, ¡Felicidades!
    writeMsg(&handlerAstarUsart, "\n_______________Gracias por viajar con nuestra linea Astarlines____________________\n");
 80026c4:	4907      	ldr	r1, [pc, #28]	; (80026e4 <findShorterWay+0x1458>)
 80026c6:	4806      	ldr	r0, [pc, #24]	; (80026e0 <findShorterWay+0x1454>)
 80026c8:	f002 f9dc 	bl	8004a84 <writeMsg>

    return 1;
 80026cc:	2301      	movs	r3, #1


}
 80026ce:	4618      	mov	r0, r3
 80026d0:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd90      	pop	{r4, r7, pc}
 80026da:	bf00      	nop
 80026dc:	08009528 	.word	0x08009528
 80026e0:	20000e60 	.word	0x20000e60
 80026e4:	08009568 	.word	0x08009568

080026e8 <updateParent>:

// esta funcion actuazliza en la matriz de costs el parent correspondiente
void updateParent(costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6]){
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]

	setParents(ptrChanges, posIJ);
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fa9a 	bl	8002c30 <setParents>

	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][3] = ptrChanges->parent[0]; //Posicion i del parent
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002702:	b2d8      	uxtb	r0, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4413      	add	r3, r2
 800270e:	461a      	mov	r2, r3
 8002710:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8002714:	fb02 f303 	mul.w	r3, r2, r3
 8002718:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	18d1      	adds	r1, r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	3304      	adds	r3, #4
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4413      	add	r3, r2
 800272c:	1e5a      	subs	r2, r3, #1
 800272e:	ee07 0a90 	vmov	s15, r0
 8002732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	440b      	add	r3, r1
 8002740:	330c      	adds	r3, #12
 8002742:	edc3 7a00 	vstr	s15, [r3]
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][4] = ptrChanges->parent[1]; //Posicion j del parent
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800274c:	b2d8      	uxtb	r0, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4413      	add	r3, r2
 8002758:	461a      	mov	r2, r3
 800275a:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	18d1      	adds	r1, r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	3304      	adds	r3, #4
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4413      	add	r3, r2
 8002776:	1e5a      	subs	r2, r3, #1
 8002778:	ee07 0a90 	vmov	s15, r0
 800277c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002780:	4613      	mov	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	440b      	add	r3, r1
 800278a:	3310      	adds	r3, #16
 800278c:	edc3 7a00 	vstr	s15, [r3]

}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <updateGcost>:

// esta funcion actualiz el Gcost correspondiente
void updateGcost(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6] ){
 8002798:	b5b0      	push	{r4, r5, r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][0] = setGcost(parameters, ptrChanges, posIJ);
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	18d5      	adds	r5, r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	1e5c      	subs	r4, r3, #1
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f905 	bl	80029e4 <setGcost>
 80027da:	eef0 7a40 	vmov.f32	s15, s0
 80027de:	4623      	mov	r3, r4
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4423      	add	r3, r4
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	442b      	add	r3, r5
 80027e8:	edc3 7a00 	vstr	s15, [r3]
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bdb0      	pop	{r4, r5, r7, pc}

080027f4 <updateFcost>:

// Esta función actualiza el Fcost correspondiente
void updateFcost(AStar_distancesHandler *parameters ,costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6] ){
 80027f4:	b5b0      	push	{r4, r5, r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][1] = setFcost(parameters, ptrChanges, posIJ, matrixCosts);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4413      	add	r3, r2
 800280c:	461a      	mov	r2, r3
 800280e:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	18d5      	adds	r5, r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3304      	adds	r3, #4
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4413      	add	r3, r2
 800282a:	1e5c      	subs	r4, r3, #1
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f9bd 	bl	8002bb2 <setFcost>
 8002838:	eef0 7a40 	vmov.f32	s15, s0
 800283c:	4623      	mov	r3, r4
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4423      	add	r3, r4
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	442b      	add	r3, r5
 8002846:	3304      	adds	r3, #4
 8002848:	edc3 7a00 	vstr	s15, [r3]

}
 800284c:	bf00      	nop
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bdb0      	pop	{r4, r5, r7, pc}

08002854 <setHeuristic>:

// con esta funcion seteamos la matriz Heuristica con la cual usaremos la info para buscar la ruta mas corta
int setHeuristic(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, float matrixCosts[52][52][6] , char Gridcopy[52][52]){
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]

	// definimos variables locales
	int distRows     = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
	int distanceToGo = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
	//sicion de cada fila y columna el valor de la heuristica dependiendo de donde este el punto de termino o End point

	// Comenzamos entonces recorriendo cada posicion del terccer bloque matricial de ***costs
	// recorremos las filas
	// Almacenamos la posicion final
	if(findEnd(Gridcopy, parameters, ptrChanges)){
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	68f9      	ldr	r1, [r7, #12]
 8002872:	6838      	ldr	r0, [r7, #0]
 8002874:	f000 fa41 	bl	8002cfa <findEnd>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <setHeuristic+0x32>
		// Se encontro la posicion final, y continua con el programa
		__NOP();
 800287e:	bf00      	nop
	}

	// A partir de aqui ya se tiene la posicion del punto final y ya se puede entonces calcular la heuristica
	// partiendo siempre de que el robot puede ir en diagonal y luego en linea recta , siempre buscando la ruta mas eficiente

	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8002880:	2300      	movs	r3, #0
 8002882:	77fb      	strb	r3, [r7, #31]
 8002884:	e0a3      	b.n	80029ce <setHeuristic+0x17a>
		return RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	e0a8      	b.n	80029dc <setHeuristic+0x188>
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 800288a:	2300      	movs	r3, #0
 800288c:	77bb      	strb	r3, [r7, #30]
 800288e:	e095      	b.n	80029bc <setHeuristic+0x168>
			// para cada posicion i,j, se mira i-iend y j-jend, y se evalua cual de los dos es menor y luego
			// De los dos que sea mas pequeño, el robot tendra que ir diagonal hasta encontrarse con la fila o la columna
			// maas cercana a la fila o la columna del punto final, y ya luego sumarle la distancia paralela que falta para llegar al punto end
			distRows    = abs(i-ptrChanges->endPos[0]);
 8002890:	7ffa      	ldrb	r2, [r7, #31]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	bfb8      	it	lt
 800289c:	425b      	neglt	r3, r3
 800289e:	61bb      	str	r3, [r7, #24]
			distColumns = abs(j-ptrChanges->endPos[1]);
 80028a0:	7fba      	ldrb	r2, [r7, #30]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bfb8      	it	lt
 80028ac:	425b      	neglt	r3, r3
 80028ae:	617b      	str	r3, [r7, #20]
			if (distRows <= distColumns){
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	dc3f      	bgt.n	8002938 <setHeuristic+0xe4>
				// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
				// que de la columna del end, por lo que se debe ir diagonal
				distanceToGo = parameters->diagonalDiastance * distRows;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	ee07 3a90 	vmov	s15, r3
 80028c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028d0:	ee17 3a90 	vmov	r3, s15
 80028d4:	613b      	str	r3, [r7, #16]
				// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
				// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
				// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	ee07 3a90 	vmov	s15, r3
 80028dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	edd3 6a00 	vldr	s13, [r3]
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bfb8      	it	lt
 80028f0:	425b      	neglt	r3, r3
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002906:	ee17 3a90 	vmov	r3, s15
 800290a:	613b      	str	r3, [r7, #16]
				//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la sumer matriz
				// de costos
				matrixCosts[i][j][2] = distanceToGo;
 800290c:	7ffb      	ldrb	r3, [r7, #31]
 800290e:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	18d1      	adds	r1, r2, r3
 800291a:	7fba      	ldrb	r2, [r7, #30]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	3308      	adds	r3, #8
 8002932:	edc3 7a00 	vstr	s15, [r3]
 8002936:	e03e      	b.n	80029b6 <setHeuristic+0x162>
			}else{
				// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
				// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
				distanceToGo = parameters->diagonalDiastance * distColumns;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	ed93 7a01 	vldr	s14, [r3, #4]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002950:	ee17 3a90 	vmov	r3, s15
 8002954:	613b      	str	r3, [r7, #16]
				// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
				// distRows y distColumns
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	ee07 3a90 	vmov	s15, r3
 800295c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	edd3 6a00 	vldr	s13, [r3]
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	bfb8      	it	lt
 8002970:	425b      	neglt	r3, r3
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800297a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800297e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002986:	ee17 3a90 	vmov	r3, s15
 800298a:	613b      	str	r3, [r7, #16]
				matrixCosts[i][j][2] = distanceToGo;
 800298c:	7ffb      	ldrb	r3, [r7, #31]
 800298e:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	18d1      	adds	r1, r2, r3
 800299a:	7fba      	ldrb	r2, [r7, #30]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	ee07 3a90 	vmov	s15, r3
 80029a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	3308      	adds	r3, #8
 80029b2:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 80029b6:	7fbb      	ldrb	r3, [r7, #30]
 80029b8:	3301      	adds	r3, #1
 80029ba:	77bb      	strb	r3, [r7, #30]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	7a5b      	ldrb	r3, [r3, #9]
 80029c0:	7fba      	ldrb	r2, [r7, #30]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	f4ff af64 	bcc.w	8002890 <setHeuristic+0x3c>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80029c8:	7ffb      	ldrb	r3, [r7, #31]
 80029ca:	3301      	adds	r3, #1
 80029cc:	77fb      	strb	r3, [r7, #31]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	7a1b      	ldrb	r3, [r3, #8]
 80029d2:	7ffa      	ldrb	r2, [r7, #31]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	f4ff af58 	bcc.w	800288a <setHeuristic+0x36>
		}

	}

	// Terminado TODO el recorrido se puede salir de la funcion y decir que todo fue correcto
	return SET;
 80029da:	2301      	movs	r3, #1

}
 80029dc:	4618      	mov	r0, r3
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <setGcost>:

//Con esta funcion se halla el Gcost teniendo en cuenta la posicion de analisis
float setGcost (AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2]){
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
	// definimos variables locales
	int distRows     = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
	float distanceToGo = 0;
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]

	// Luego calculamos el Gcost partiendo de que se tiene que pasar siempre por la posicion de analisis
	// Se analiza cual es la distancia que hay entre el punto de analisis y el punto de start
	distRows    = abs(ptrChanges->posAnalisis[0] -ptrChanges->startPos[0]);
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bfb8      	it	lt
 8002a0c:	425b      	neglt	r3, r3
 8002a0e:	61bb      	str	r3, [r7, #24]
	distColumns = abs(ptrChanges->posAnalisis[1]-ptrChanges->startPos[1]);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	bfb8      	it	lt
 8002a1e:	425b      	neglt	r3, r3
 8002a20:	617b      	str	r3, [r7, #20]

	if ((ptrChanges->posAnalisis[0] + posIJ[0] -1) != ptrChanges->posAnalisis[0]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	1e5a      	subs	r2, r3, #1
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d05d      	beq.n	8002af2 <setGcost+0x10e>
	 && (ptrChanges->posAnalisis[1] + posIJ[1] -1) != ptrChanges->posAnalisis[1]){
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4413      	add	r3, r2
 8002a42:	1e5a      	subs	r2, r3, #1
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d052      	beq.n	8002af2 <setGcost+0x10e>
		// Si estamos aqui es porque estamos en una de las 4 esquinas aledanias, por lo que la distancia a la columna o la fila
		// mas cercana a el punto de analisis es 1, se tendra que ir diagonalmente
		distanceToGo = parameters->diagonalDiastance;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	61fb      	str	r3, [r7, #28]

		// Luego se calcula la distancia que resta aplicando el mismo algoritmo de la heuristica
		//pero esta vez para el punto de analisis hasta el punto de inicio

		if (distRows <= distColumns){
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	dc25      	bgt.n	8002aa6 <setGcost+0xc2>
			// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
			// que de la columna del end, por lo que se debe ir diagonal
			distanceToGo += parameters->diagonalDiastance * distRows;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a76:	edc7 7a07 	vstr	s15, [r7, #28]
			// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
			// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
			// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	ed93 7a00 	vldr	s14, [r3]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bfb8      	it	lt
 8002a8a:	425b      	neglt	r3, r3
 8002a8c:	ee07 3a90 	vmov	s15, r3
 8002a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a98:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa0:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8002aa4:	e077      	b.n	8002b96 <setGcost+0x1b2>
		}else{
			// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
			// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
			distanceToGo += parameters->diagonalDiastance * distColumns;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aba:	ed97 7a07 	vldr	s14, [r7, #28]
 8002abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac2:	edc7 7a07 	vstr	s15, [r7, #28]
			// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
			// distRows y distColumns
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	ed93 7a00 	vldr	s14, [r3]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	bfb8      	it	lt
 8002ad6:	425b      	neglt	r3, r3
 8002ad8:	ee07 3a90 	vmov	s15, r3
 8002adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae4:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aec:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8002af0:	e051      	b.n	8002b96 <setGcost+0x1b2>

	}else {
		// Si estamos aqui es porque estamos en una de las cuatro aristas, donde tanto el puntero como la posicion real del punto de analisis
		// coinciden en fila o en columna, la unica diferencia aqui es que se calcula paralelamente al punto de analisis y a partir de ahi
		// se aplica el algoritmo de la heuristica
		distanceToGo = parameters->parallelDistance;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	61fb      	str	r3, [r7, #28]

		if (distRows <= distColumns){
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	dc25      	bgt.n	8002b4c <setGcost+0x168>
			distanceToGo += parameters->diagonalDiastance * distRows;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	ee07 3a90 	vmov	s15, r3
 8002b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b14:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b1c:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	ed93 7a00 	vldr	s14, [r3]
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bfb8      	it	lt
 8002b30:	425b      	neglt	r3, r3
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b46:	edc7 7a07 	vstr	s15, [r7, #28]
 8002b4a:	e024      	b.n	8002b96 <setGcost+0x1b2>
		}else{
			distanceToGo += parameters->diagonalDiastance * distColumns;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	ee07 3a90 	vmov	s15, r3
 8002b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b60:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b68:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	ed93 7a00 	vldr	s14, [r3]
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bfb8      	it	lt
 8002b7c:	425b      	neglt	r3, r3
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b8a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b92:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}
	ptrChanges->Gcost = distanceToGo;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	601a      	str	r2, [r3, #0]

	return ptrChanges->Gcost;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	ee07 3a90 	vmov	s15, r3
}
 8002ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba8:	3724      	adds	r7, #36	; 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <setFcost>:

// Con esta funcion seteamos el F cost en la matriz 2 de la posicion correspondiente
float setFcost (AStar_distancesHandler *parameters , costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6]){
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	603b      	str	r3, [r7, #0]

	// Esta funcion es simple ya que solo tenemos que calcular de la matriz 3x3 de analisis y sumar el H cost y el G cost para tener el F cost
	ptrChanges->Gcost = setGcost(parameters, ptrChanges, posIJ);
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f7ff ff0d 	bl	80029e4 <setGcost>
 8002bca:	eef0 7a40 	vmov.f32	s15, s0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	edc3 7a00 	vstr	s15, [r3]
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	ed93 7a00 	vldr	s14, [r3]
			          + matrixCosts[ptrChanges->posAnalisis[0]+ posIJ[0] -1][ptrChanges->posAnalisis[1]+ posIJ[1] -1][2]; // Hcost
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	461a      	mov	r2, r3
 8002be6:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	18d1      	adds	r1, r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4413      	add	r3, r2
 8002c02:	1e5a      	subs	r2, r3, #1
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3308      	adds	r3, #8
 8002c10:	edd3 7a00 	vldr	s15, [r3]
 8002c14:	ee77 7a27 	vadd.f32	s15, s14, s15
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	edc3 7a01 	vstr	s15, [r3, #4]

	return ptrChanges->Fcost;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	ee07 3a90 	vmov	s15, r3

}
 8002c26:	eeb0 0a67 	vmov.f32	s0, s15
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <setParents>:

// Con esta funcion seteamos la posicion del parent de los aledanios,
void setParents (costChangesAndPos_t *ptrChanges, int posIJ[2]){
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
	// esta funcion es simple, ya que solo tenemos que setear de la matriz 3x3 de analisis y colocar en la posicion 4 y 5 el indice i y j correspondiente
	// al parent de cada punto aledanio, exceptuando el punto de analisis ya que ese tiene un parent propio

	if ((ptrChanges->posAnalisis[0] + posIJ[0] - 1) == ptrChanges->posAnalisis[0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d10c      	bne.n	8002c68 <setParents+0x38>
	&&  (ptrChanges->posAnalisis[1] + posIJ[1] - 1) == ptrChanges->posAnalisis[1] ){
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	3304      	adds	r3, #4
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4413      	add	r3, r2
 8002c5a:	1e5a      	subs	r2, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d101      	bne.n	8002c68 <setParents+0x38>
		// Aqui no hacemos nada porque significa que estamos sobre el punto de analisis, y no queremos cambiarle el parent a este
		__NOP();
 8002c64:	bf00      	nop
 8002c66:	e00c      	b.n	8002c82 <setParents+0x52>
	}else{
		// Si estamos aqui es porque estamos en alguno de los puntos aledanios
		ptrChanges->parent[0] = ptrChanges->posAnalisis[0];
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f883 2020 	strb.w	r2, [r3, #32]
		ptrChanges->parent[1] = ptrChanges->posAnalisis[1];
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <findStart>:

// En esta funcion nos centraremos en buscar la posicion i,j donde se almacena el punto de inicio del robot
int findStart(char Gridcopy[52][52], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 8002c8e:	b480      	push	{r7}
 8002c90:	b087      	sub	sp, #28
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]

	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 's' de start
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	75fb      	strb	r3, [r7, #23]
 8002c9e:	e020      	b.n	8002ce2 <findStart+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	75bb      	strb	r3, [r7, #22]
 8002ca4:	e015      	b.n	8002cd2 <findStart+0x44>
			if (Gridcopy[i][j] == 's'){
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	2234      	movs	r2, #52	; 0x34
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	441a      	add	r2, r3
 8002cb2:	7dbb      	ldrb	r3, [r7, #22]
 8002cb4:	5cd3      	ldrb	r3, [r2, r3]
 8002cb6:	2b73      	cmp	r3, #115	; 0x73
 8002cb8:	d107      	bne.n	8002cca <findStart+0x3c>
				ptrChanges->startPos[0] = i;
 8002cba:	7dfa      	ldrb	r2, [r7, #23]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24
				ptrChanges->startPos[1] = j;
 8002cc0:	7dba      	ldrb	r2, [r7, #22]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	629a      	str	r2, [r3, #40]	; 0x28
				return SET;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e011      	b.n	8002cee <findStart+0x60>
			}else{
				__NOP();
 8002cca:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8002ccc:	7dbb      	ldrb	r3, [r7, #22]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	75bb      	strb	r3, [r7, #22]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	7a5b      	ldrb	r3, [r3, #9]
 8002cd6:	7dba      	ldrb	r2, [r7, #22]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d3e4      	bcc.n	8002ca6 <findStart+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	7a1b      	ldrb	r3, [r3, #8]
 8002ce6:	7dfa      	ldrb	r2, [r7, #23]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d3d9      	bcc.n	8002ca0 <findStart+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 8002cec:	2300      	movs	r3, #0



}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <findEnd>:
int findEnd(char Gridcopy[52][52], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 8002cfa:	b480      	push	{r7}
 8002cfc:	b087      	sub	sp, #28
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]


	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 'e' de end
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]
 8002d0a:	e020      	b.n	8002d4e <findEnd+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	75bb      	strb	r3, [r7, #22]
 8002d10:	e015      	b.n	8002d3e <findEnd+0x44>
			if (Gridcopy[i][j] == 'e'){
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
 8002d14:	2234      	movs	r2, #52	; 0x34
 8002d16:	fb02 f303 	mul.w	r3, r2, r3
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	441a      	add	r2, r3
 8002d1e:	7dbb      	ldrb	r3, [r7, #22]
 8002d20:	5cd3      	ldrb	r3, [r2, r3]
 8002d22:	2b65      	cmp	r3, #101	; 0x65
 8002d24:	d107      	bne.n	8002d36 <findEnd+0x3c>
				ptrChanges->endPos[0] = i;
 8002d26:	7dfa      	ldrb	r2, [r7, #23]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	62da      	str	r2, [r3, #44]	; 0x2c
				ptrChanges->endPos[1] = j;
 8002d2c:	7dba      	ldrb	r2, [r7, #22]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
				return SET;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e011      	b.n	8002d5a <findEnd+0x60>
			}else{
				__NOP();
 8002d36:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8002d38:	7dbb      	ldrb	r3, [r7, #22]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	75bb      	strb	r3, [r7, #22]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	7a5b      	ldrb	r3, [r3, #9]
 8002d42:	7dba      	ldrb	r2, [r7, #22]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d3e4      	bcc.n	8002d12 <findEnd+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8002d48:	7dfb      	ldrb	r3, [r7, #23]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	75fb      	strb	r3, [r7, #23]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	7a1b      	ldrb	r3, [r3, #8]
 8002d52:	7dfa      	ldrb	r2, [r7, #23]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d3d9      	bcc.n	8002d0c <findEnd+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 8002d58:	2300      	movs	r3, #0

}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <buildMatrixCopy>:
//
//}

//Con esta funcion se reparte la memoria para la matriz de entrada desde la terminal serial

void buildMatrixCopy(AStar_distancesHandler *parameters, char terminalGrid[52][52], char Gridcopy[52][52]){
 8002d66:	b480      	push	{r7}
 8002d68:	b087      	sub	sp, #28
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]


	// Seteamos los valores dentro de la matriz infoGrid de la entrada respectiva
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 8002d72:	2300      	movs	r3, #0
 8002d74:	75fb      	strb	r3, [r7, #23]
 8002d76:	e03d      	b.n	8002df4 <buildMatrixCopy+0x8e>
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8002d78:	2300      	movs	r3, #0
 8002d7a:	75bb      	strb	r3, [r7, #22]
 8002d7c:	e031      	b.n	8002de2 <buildMatrixCopy+0x7c>

			if (j == parameters->numberOfColumns){
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	7a5b      	ldrb	r3, [r3, #9]
 8002d82:	7dba      	ldrb	r2, [r7, #22]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d109      	bne.n	8002d9c <buildMatrixCopy+0x36>
				// Agregamos al a la posicion penultima, agregamos una terminacion de salto de linea para ipresion en consola
				Gridcopy[i][j] = '\r';
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
 8002d8a:	2234      	movs	r2, #52	; 0x34
 8002d8c:	fb02 f303 	mul.w	r3, r2, r3
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	441a      	add	r2, r3
 8002d94:	7dbb      	ldrb	r3, [r7, #22]
 8002d96:	210d      	movs	r1, #13
 8002d98:	54d1      	strb	r1, [r2, r3]
 8002d9a:	e01f      	b.n	8002ddc <buildMatrixCopy+0x76>
			}else if (j == parameters->numberOfColumns + 1){
 8002d9c:	7dba      	ldrb	r2, [r7, #22]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	7a5b      	ldrb	r3, [r3, #9]
 8002da2:	3301      	adds	r3, #1
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d109      	bne.n	8002dbc <buildMatrixCopy+0x56>
				// Agregamos al final la terminacion nula para que cada fila sea un string completo
				Gridcopy[i][j] = '\0';
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	2234      	movs	r2, #52	; 0x34
 8002dac:	fb02 f303 	mul.w	r3, r2, r3
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	441a      	add	r2, r3
 8002db4:	7dbb      	ldrb	r3, [r7, #22]
 8002db6:	2100      	movs	r1, #0
 8002db8:	54d1      	strb	r1, [r2, r3]
 8002dba:	e00f      	b.n	8002ddc <buildMatrixCopy+0x76>
			}else{
				Gridcopy[i][j] = terminalGrid[i][j];
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	2234      	movs	r2, #52	; 0x34
 8002dc0:	fb02 f303 	mul.w	r3, r2, r3
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	18d0      	adds	r0, r2, r3
 8002dc8:	7db9      	ldrb	r1, [r7, #22]
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	2234      	movs	r2, #52	; 0x34
 8002dce:	fb02 f303 	mul.w	r3, r2, r3
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	441a      	add	r2, r3
 8002dd6:	7dbb      	ldrb	r3, [r7, #22]
 8002dd8:	5c41      	ldrb	r1, [r0, r1]
 8002dda:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8002ddc:	7dbb      	ldrb	r3, [r7, #22]
 8002dde:	3301      	adds	r3, #1
 8002de0:	75bb      	strb	r3, [r7, #22]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	7a5b      	ldrb	r3, [r3, #9]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	7dbb      	ldrb	r3, [r7, #22]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	dac7      	bge.n	8002d7e <buildMatrixCopy+0x18>
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
 8002df0:	3301      	adds	r3, #1
 8002df2:	75fb      	strb	r3, [r7, #23]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	7a1b      	ldrb	r3, [r3, #8]
 8002df8:	7dfa      	ldrb	r2, [r7, #23]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d3bc      	bcc.n	8002d78 <buildMatrixCopy+0x12>
			}
		}
	}

}
 8002dfe:	bf00      	nop
 8002e00:	bf00      	nop
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <getRows>:



// Se define la funcion de tomar cantidad de filas recorriendo la cantidad de String que tenga el puntero de arreglos matrix hasta que se
// encuentre con el puntero nulo.
uint8_t getRows(char terminalGrid[52][52]){
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

	uint8_t counterRows = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	73fb      	strb	r3, [r7, #15]
	char letter = '\0';
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73bb      	strb	r3, [r7, #14]
	(void)letter;
	while(terminalGrid[counterRows][0] != '\0'){
 8002e1c:	e00a      	b.n	8002e34 <getRows+0x28>
		letter = terminalGrid[counterRows][0];
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2234      	movs	r2, #52	; 0x34
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	73bb      	strb	r3, [r7, #14]
		counterRows++;
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	3301      	adds	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[counterRows][0] != '\0'){
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2234      	movs	r2, #52	; 0x34
 8002e38:	fb02 f303 	mul.w	r3, r2, r3
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1eb      	bne.n	8002e1e <getRows+0x12>

	}

	return counterRows;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <getColums>:

//Se define la funcion de tomar cantidad de columnas recorriendo el string hasta encontrar el elemento nulo char
uint8_t getColums(char terminalGrid[52][52]){
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

	uint8_t counterColumns = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 8002e60:	e002      	b.n	8002e68 <getColums+0x14>

		counterColumns++;
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	3301      	adds	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	5cd3      	ldrb	r3, [r2, r3]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f7      	bne.n	8002e62 <getColums+0xe>

	}

	return counterColumns;
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <findLesserValue>:

// esta funcion nos almacena en uno de los arrays volatiles de la estructura costChangesAndPos_t la posicion del valor Fcost o H cost mas pequeño,
// Se debe identificar con un string si se quiere hallar el Fcost mas pequeño o el Hcost mas pequeño, asi, "Fcost" si se quiere hallar el F cost o
// "Hcost" si se quiere hallar el H cost
void findLesserValue(costChangesAndPos_t *ptrChanges, float decisionMtrx[500][4], uint8_t contador){
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	; 0x24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	71fb      	strb	r3, [r7, #7]
	// seteamos las variables locales
	uint8_t i;
	uint8_t j;
	float value_1 = 0;
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	61bb      	str	r3, [r7, #24]
	float value_2 = 0;
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]

	// El algoritmo que se usará es que se recorrerá cada una de las posiciones y se analizara con las demas , excpliyendo obviamente
	// la posicion central


	for(i = 0; i<contador ; i++){
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	77fb      	strb	r3, [r7, #31]
 8002e9e:	e04d      	b.n	8002f3c <findLesserValue+0xbc>
		for(j = 0; j<contador ; j++){
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	77bb      	strb	r3, [r7, #30]
 8002ea4:	e034      	b.n	8002f10 <findLesserValue+0x90>
			if (i == j){
 8002ea6:	7ffa      	ldrb	r2, [r7, #31]
 8002ea8:	7fbb      	ldrb	r3, [r7, #30]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d101      	bne.n	8002eb2 <findLesserValue+0x32>
				// Si estamos aqui es porque estamos analizando el mismo punto, y nosotros queremos es analizar a sus compañeros solamente
				__NOP();
 8002eae:	bf00      	nop
 8002eb0:	e02b      	b.n	8002f0a <findLesserValue+0x8a>
			}else if (decisionMtrx[i][0]
 8002eb2:	7ffb      	ldrb	r3, [r7, #31]
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	4413      	add	r3, r2
 8002eba:	ed93 7a00 	vldr	s14, [r3]
					< decisionMtrx[j][0]){
 8002ebe:	7fbb      	ldrb	r3, [r7, #30]
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 8002eca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed2:	d41a      	bmi.n	8002f0a <findLesserValue+0x8a>
				// Si estamos aca es porque podemos hacer la comparación
				// Si estamos aca es porque efectivamente el Fcost es menor, Solo dejamos pasar el ciclo para asegurarnos de que el j
				// pueda llegar hasta su valor final permitido
			}else if (decisionMtrx[i][0]
 8002ed4:	7ffb      	ldrb	r3, [r7, #31]
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	4413      	add	r3, r2
 8002edc:	ed93 7a00 	vldr	s14, [r3]
				   == decisionMtrx[j][0]){
 8002ee0:	7fbb      	ldrb	r3, [r7, #30]
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 8002eec:	eeb4 7a67 	vcmp.f32	s14, s15
 8002ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef4:	d104      	bne.n	8002f00 <findLesserValue+0x80>
				// Si estamos aqui es porque el programa encontro mas de un  minimo un valor igual al analizado
				ptrChanges->equalFcost = SET;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002efe:	e004      	b.n	8002f0a <findLesserValue+0x8a>
			}else{
				// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
				// Se resetea la bandera que decia que habia un vakor igual, esto debe de ser solo cierto si el valor que es
				// igual es el menor de la matriz
				ptrChanges->equalFcost = RESET;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				break;
 8002f08:	e006      	b.n	8002f18 <findLesserValue+0x98>
		for(j = 0; j<contador ; j++){
 8002f0a:	7fbb      	ldrb	r3, [r7, #30]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	77bb      	strb	r3, [r7, #30]
 8002f10:	7fba      	ldrb	r2, [r7, #30]
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d3c6      	bcc.n	8002ea6 <findLesserValue+0x26>
			}

		}//Terminacion de un for
		if (j == contador){
 8002f18:	7fba      	ldrb	r2, [r7, #30]
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d10a      	bne.n	8002f36 <findLesserValue+0xb6>
			// Si entramos en esta condicion es porque el contador j logro llegar a su posicion final
			// Si entramos aqui es porque se logro analizar todo el arreglo y se encontro la posicion que corresponde con el Fcost mas pequeño
			// de todos, tambien guardamos el valor mas pequeño, si este se repite, se sabra gracias a la bandera
			// La posicion mas pequeña del F cost corresponde con la que se etsaba analizando en la posición i
			ptrChanges->lesserFcostPosition = i;
 8002f20:	7ffa      	ldrb	r2, [r7, #31]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	635a      	str	r2, [r3, #52]	; 0x34
			// Almacenamos en lesserFcost el valor de ese Fcost mas pequeño que se hallo
			ptrChanges->lesserFcost = decisionMtrx[i][0];
 8002f26:	7ffb      	ldrb	r3, [r7, #31]
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40
			// paramos el primer for
			break;
 8002f34:	e006      	b.n	8002f44 <findLesserValue+0xc4>
	for(i = 0; i<contador ; i++){
 8002f36:	7ffb      	ldrb	r3, [r7, #31]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	7ffa      	ldrb	r2, [r7, #31]
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d3ad      	bcc.n	8002ea0 <findLesserValue+0x20>

	}//Terminacion del otro for


	// Ahora hallaremos el valor mas pequeño de H cost, solo en el caso de que la bandera correspondiente se haya levantado
	if (ptrChanges->equalFcost){
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d076      	beq.n	800303c <findLesserValue+0x1bc>
		// Si estamos aqui es porque si hay mas de un valor de F cost que corresponde con el valor mas pequeño, desempatamos buscando el Hcost mas pequeño
		// Para ello recorreremos la matriz a analizar de nuevo pero esta vez solo buscando aquellos valores que correspondan con el valor hallado de Fcost

		for(i = 0; i<contador ; i++){
 8002f4e:	2300      	movs	r3, #0
 8002f50:	77fb      	strb	r3, [r7, #31]
 8002f52:	e06e      	b.n	8003032 <findLesserValue+0x1b2>
			value_1 = decisionMtrx[i][0] / ptrChanges->lesserFcost;
 8002f54:	7ffb      	ldrb	r3, [r7, #31]
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	edd3 6a00 	vldr	s13, [r3]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f6a:	edc7 7a06 	vstr	s15, [r7, #24]
			for(j = 0; j<contador ; j++){
 8002f6e:	2300      	movs	r3, #0
 8002f70:	77bb      	strb	r3, [r7, #30]
 8002f72:	e045      	b.n	8003000 <findLesserValue+0x180>
				value_2 = decisionMtrx[j][0] / ptrChanges->lesserFcost;
 8002f74:	7fbb      	ldrb	r3, [r7, #30]
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	edd3 6a00 	vldr	s13, [r3]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f8a:	edc7 7a05 	vstr	s15, [r7, #20]
 				if (i == j){
 8002f8e:	7ffa      	ldrb	r2, [r7, #31]
 8002f90:	7fbb      	ldrb	r3, [r7, #30]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d101      	bne.n	8002f9a <findLesserValue+0x11a>
					// Si estamos aqui es porque estamos analizando la posición de analisis, por lo que lo ignoramos
					__NOP();
 8002f96:	bf00      	nop
 8002f98:	e02f      	b.n	8002ffa <findLesserValue+0x17a>
				}else if (value_1 == 1 && value_2 == 1){
 8002f9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fa2:	eef4 7a47 	vcmp.f32	s15, s14
 8002fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002faa:	d11c      	bne.n	8002fe6 <findLesserValue+0x166>
 8002fac:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fb4:	eef4 7a47 	vcmp.f32	s15, s14
 8002fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbc:	d113      	bne.n	8002fe6 <findLesserValue+0x166>
					// Si estamos aca es porque podemos hacer la comparación pero esta vez con la matriz heuristica
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8002fbe:	7ffb      	ldrb	r3, [r7, #31]
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fca:	7fbb      	ldrb	r3, [r7, #30]
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fde:	d900      	bls.n	8002fe2 <findLesserValue+0x162>
						// Si estamos aca es porque efectivamente el Hcost es menor o igual al resto de Hcost
						__NOP();
					}else{
						// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
						break;
 8002fe0:	e014      	b.n	800300c <findLesserValue+0x18c>
						__NOP();
 8002fe2:	bf00      	nop
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8002fe4:	e009      	b.n	8002ffa <findLesserValue+0x17a>
					}
				}else if (value_1 == 1){
 8002fe6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fee:	eef4 7a47 	vcmp.f32	s15, s14
 8002ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff6:	d108      	bne.n	800300a <findLesserValue+0x18a>
					// Si estamos aqui es porque aun podemos seguir comparando, por lo que el algoritmo debe de seguir bucando a sus iguales
					__NOP();
 8002ff8:	bf00      	nop
			for(j = 0; j<contador ; j++){
 8002ffa:	7fbb      	ldrb	r3, [r7, #30]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	77bb      	strb	r3, [r7, #30]
 8003000:	7fba      	ldrb	r2, [r7, #30]
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	429a      	cmp	r2, r3
 8003006:	d3b5      	bcc.n	8002f74 <findLesserValue+0xf4>
 8003008:	e000      	b.n	800300c <findLesserValue+0x18c>
				}else {
					// Estamos en un valor que no nos interesa evaluar, por lo que lo ignoramos y salimos
					break;
 800300a:	bf00      	nop
				}

			}//Terminacion de un for
			if (j == contador){
 800300c:	7fba      	ldrb	r2, [r7, #30]
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	429a      	cmp	r2, r3
 8003012:	d10b      	bne.n	800302c <findLesserValue+0x1ac>
				// Si entramos aqui es porque se logro analizar toda la matriz y se encontro la posicion que corresponde con la posicion mas pequeña
				// de todas, tambien guardamos el valor mas pequeño, es muy poco probable, por no decir imposible que tengamos una misma heuristica
				//repetida
				ptrChanges->lesserHcostPosition = i;
 8003014:	7ffa      	ldrb	r2, [r7, #31]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
				//Almacenamos en lesserHcost el valor del Hcost mas pequeño encontrado
				ptrChanges->lesserHcost = decisionMtrx[i][1];
 800301a:	7ffb      	ldrb	r3, [r7, #31]
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	4413      	add	r3, r2
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	645a      	str	r2, [r3, #68]	; 0x44
				// Paramos el primer for
				break;
 8003028:	bf00      	nop
	}else{
		// Si estamos aca es porque no se alzo la bandera que indica que hay mas de un F cost igual por lo que no hacemos nada
		__NOP();
	}

}
 800302a:	e008      	b.n	800303e <findLesserValue+0x1be>
		for(i = 0; i<contador ; i++){
 800302c:	7ffb      	ldrb	r3, [r7, #31]
 800302e:	3301      	adds	r3, #1
 8003030:	77fb      	strb	r3, [r7, #31]
 8003032:	7ffa      	ldrb	r2, [r7, #31]
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	429a      	cmp	r2, r3
 8003038:	d38c      	bcc.n	8002f54 <findLesserValue+0xd4>
}
 800303a:	e000      	b.n	800303e <findLesserValue+0x1be>
		__NOP();
 800303c:	bf00      	nop
}
 800303e:	bf00      	nop
 8003040:	3724      	adds	r7, #36	; 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <initSerialComunication>:
	// Liberamos el arreglo de punteros
	free(shorterWayArray);

}
// Con las siguientes funciones inicializamos a los handler necesarios para poder usar la comunicacion serial desde aqui y no desde el main
void initSerialComunication (USART_Handler_t *ptrHandlerUsart, GPIO_Handler_t *ptrHandlerRx, GPIO_Handler_t *ptrHandlerTx){
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]

	// Inicializamos para el modulo Usart, no se necesita configurar ya que ya en el main se configuro con el handler específico
	handlerAstarUsart.ptrUSARTx                      = ptrHandlerUsart->ptrUSARTx;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a2d      	ldr	r2, [pc, #180]	; (8003114 <initSerialComunication+0xc8>)
 800305e:	6013      	str	r3, [r2, #0]
	handlerAstarUsart.USART_Config.USART_MCUvelocity = ptrHandlerUsart->USART_Config.USART_MCUvelocity;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a2b      	ldr	r2, [pc, #172]	; (8003114 <initSerialComunication+0xc8>)
 8003066:	60d3      	str	r3, [r2, #12]
	handlerAstarUsart.USART_Config.USART_baudrate    = ptrHandlerUsart->USART_Config.USART_baudrate;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	79da      	ldrb	r2, [r3, #7]
 800306c:	4b29      	ldr	r3, [pc, #164]	; (8003114 <initSerialComunication+0xc8>)
 800306e:	71da      	strb	r2, [r3, #7]
	handlerAstarUsart.USART_Config.USART_enableInTx  = ptrHandlerUsart->USART_Config.USART_enableInTx;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	791a      	ldrb	r2, [r3, #4]
 8003074:	4b27      	ldr	r3, [pc, #156]	; (8003114 <initSerialComunication+0xc8>)
 8003076:	711a      	strb	r2, [r3, #4]
	handlerAstarUsart.USART_Config.USART_mode        = ptrHandlerUsart->USART_Config.USART_mode;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	799a      	ldrb	r2, [r3, #6]
 800307c:	4b25      	ldr	r3, [pc, #148]	; (8003114 <initSerialComunication+0xc8>)
 800307e:	719a      	strb	r2, [r3, #6]
	handlerAstarUsart.USART_Config.USART_parity      = ptrHandlerUsart->USART_Config.USART_parity;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	7a5a      	ldrb	r2, [r3, #9]
 8003084:	4b23      	ldr	r3, [pc, #140]	; (8003114 <initSerialComunication+0xc8>)
 8003086:	725a      	strb	r2, [r3, #9]
	handlerAstarUsart.USART_Config.USART_stopbits    = ptrHandlerUsart->USART_Config.USART_stopbits;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	7a9a      	ldrb	r2, [r3, #10]
 800308c:	4b21      	ldr	r3, [pc, #132]	; (8003114 <initSerialComunication+0xc8>)
 800308e:	729a      	strb	r2, [r3, #10]
	handlerAstarUsart.USART_Config.USART_datasize    = ptrHandlerUsart->USART_Config.USART_datasize;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	7a1a      	ldrb	r2, [r3, #8]
 8003094:	4b1f      	ldr	r3, [pc, #124]	; (8003114 <initSerialComunication+0xc8>)
 8003096:	721a      	strb	r2, [r3, #8]

	// Hacemos lo mismo con los pines Rx y Tx del GPIO
	handlerAstarPinRx.pGPIOx                             = ptrHandlerRx->pGPIOx;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1e      	ldr	r2, [pc, #120]	; (8003118 <initSerialComunication+0xcc>)
 800309e:	6013      	str	r3, [r2, #0]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerRx->GPIO_PinConfig.GPIO_PinAltFunMode;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	7a5a      	ldrb	r2, [r3, #9]
 80030a4:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <initSerialComunication+0xcc>)
 80030a6:	725a      	strb	r2, [r3, #9]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerRx->GPIO_PinConfig.GPIO_PinMode;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	795a      	ldrb	r2, [r3, #5]
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <initSerialComunication+0xcc>)
 80030ae:	715a      	strb	r2, [r3, #5]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinOPType;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	7a1a      	ldrb	r2, [r3, #8]
 80030b4:	4b18      	ldr	r3, [pc, #96]	; (8003118 <initSerialComunication+0xcc>)
 80030b6:	721a      	strb	r2, [r3, #8]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinNumber;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	791a      	ldrb	r2, [r3, #4]
 80030bc:	4b16      	ldr	r3, [pc, #88]	; (8003118 <initSerialComunication+0xcc>)
 80030be:	711a      	strb	r2, [r3, #4]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerRx->GPIO_PinConfig.GPIO_PinPuPdControl;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	79da      	ldrb	r2, [r3, #7]
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <initSerialComunication+0xcc>)
 80030c6:	71da      	strb	r2, [r3, #7]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerRx->GPIO_PinConfig.GPIO_PinSpeed;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	799a      	ldrb	r2, [r3, #6]
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <initSerialComunication+0xcc>)
 80030ce:	719a      	strb	r2, [r3, #6]

	handlerAstarPinTx.pGPIOx                             = ptrHandlerTx->pGPIOx;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a11      	ldr	r2, [pc, #68]	; (800311c <initSerialComunication+0xd0>)
 80030d6:	6013      	str	r3, [r2, #0]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerTx->GPIO_PinConfig.GPIO_PinAltFunMode;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7a5a      	ldrb	r2, [r3, #9]
 80030dc:	4b0f      	ldr	r3, [pc, #60]	; (800311c <initSerialComunication+0xd0>)
 80030de:	725a      	strb	r2, [r3, #9]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerTx->GPIO_PinConfig.GPIO_PinMode;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	795a      	ldrb	r2, [r3, #5]
 80030e4:	4b0d      	ldr	r3, [pc, #52]	; (800311c <initSerialComunication+0xd0>)
 80030e6:	715a      	strb	r2, [r3, #5]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinOPType;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	7a1a      	ldrb	r2, [r3, #8]
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <initSerialComunication+0xd0>)
 80030ee:	721a      	strb	r2, [r3, #8]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinNumber;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	791a      	ldrb	r2, [r3, #4]
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <initSerialComunication+0xd0>)
 80030f6:	711a      	strb	r2, [r3, #4]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerTx->GPIO_PinConfig.GPIO_PinPuPdControl;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	79da      	ldrb	r2, [r3, #7]
 80030fc:	4b07      	ldr	r3, [pc, #28]	; (800311c <initSerialComunication+0xd0>)
 80030fe:	71da      	strb	r2, [r3, #7]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerTx->GPIO_PinConfig.GPIO_PinSpeed;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	799a      	ldrb	r2, [r3, #6]
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <initSerialComunication+0xd0>)
 8003106:	719a      	strb	r2, [r3, #6]

	// Ya seteados estos handler en teoria podriamos mandar por terminarl serial desde este .c

}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	20000e60 	.word	0x20000e60
 8003118:	20000ef4 	.word	0x20000ef4
 800311c:	20000f00 	.word	0x20000f00

08003120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	2b00      	cmp	r3, #0
 8003130:	db0b      	blt.n	800314a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	4907      	ldr	r1, [pc, #28]	; (8003158 <__NVIC_EnableIRQ+0x38>)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	2001      	movs	r0, #1
 8003142:	fa00 f202 	lsl.w	r2, r0, r2
 8003146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000e100 	.word	0xe000e100

0800315c <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800316c:	b672      	cpsid	i
}
 800316e:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a85      	ldr	r2, [pc, #532]	; (800338c <BasicTimer_Config+0x230>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d106      	bne.n	8003188 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800317a:	4b85      	ldr	r3, [pc, #532]	; (8003390 <BasicTimer_Config+0x234>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	4a84      	ldr	r2, [pc, #528]	; (8003390 <BasicTimer_Config+0x234>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6453      	str	r3, [r2, #68]	; 0x44
 8003186:	e030      	b.n	80031ea <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d106      	bne.n	80031a0 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8003192:	4b7f      	ldr	r3, [pc, #508]	; (8003390 <BasicTimer_Config+0x234>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	4a7e      	ldr	r2, [pc, #504]	; (8003390 <BasicTimer_Config+0x234>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6413      	str	r3, [r2, #64]	; 0x40
 800319e:	e024      	b.n	80031ea <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a7b      	ldr	r2, [pc, #492]	; (8003394 <BasicTimer_Config+0x238>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d106      	bne.n	80031b8 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80031aa:	4b79      	ldr	r3, [pc, #484]	; (8003390 <BasicTimer_Config+0x234>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	4a78      	ldr	r2, [pc, #480]	; (8003390 <BasicTimer_Config+0x234>)
 80031b0:	f043 0302 	orr.w	r3, r3, #2
 80031b4:	6413      	str	r3, [r2, #64]	; 0x40
 80031b6:	e018      	b.n	80031ea <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a76      	ldr	r2, [pc, #472]	; (8003398 <BasicTimer_Config+0x23c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d106      	bne.n	80031d0 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80031c2:	4b73      	ldr	r3, [pc, #460]	; (8003390 <BasicTimer_Config+0x234>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a72      	ldr	r2, [pc, #456]	; (8003390 <BasicTimer_Config+0x234>)
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
 80031ce:	e00c      	b.n	80031ea <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a71      	ldr	r2, [pc, #452]	; (800339c <BasicTimer_Config+0x240>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d106      	bne.n	80031e8 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80031da:	4b6d      	ldr	r3, [pc, #436]	; (8003390 <BasicTimer_Config+0x234>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	4a6c      	ldr	r2, [pc, #432]	; (8003390 <BasicTimer_Config+0x234>)
 80031e0:	f043 0308 	orr.w	r3, r3, #8
 80031e4:	6413      	str	r3, [r2, #64]	; 0x40
 80031e6:	e000      	b.n	80031ea <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 80031e8:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80031f8:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6892      	ldr	r2, [r2, #8]
 8003202:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	791b      	ldrb	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f040 80d3 	bne.w	80033b4 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0210 	bic.w	r2, r2, #16
 800321c:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2ba0      	cmp	r3, #160	; 0xa0
 8003228:	d022      	beq.n	8003270 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2bc8      	cmp	r3, #200	; 0xc8
 800322e:	d01f      	beq.n	8003270 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003236:	d01b      	beq.n	8003270 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800323e:	d017      	beq.n	8003270 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003246:	d013      	beq.n	8003270 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800324e:	d00f      	beq.n	8003270 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8003256:	d00b      	beq.n	8003270 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800325e:	d007      	beq.n	8003270 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003266:	d003      	beq.n	8003270 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800326e:	d10b      	bne.n	8003288 <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2264      	movs	r2, #100	; 0x64
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	3a01      	subs	r2, #1
 8003284:	62da      	str	r2, [r3, #44]	; 0x2c
 8003286:	e07c      	b.n	8003382 <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800328e:	d029      	beq.n	80032e4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003296:	d025      	beq.n	80032e4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800329e:	4293      	cmp	r3, r2
 80032a0:	d020      	beq.n	80032e4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80032a8:	d01c      	beq.n	80032e4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d017      	beq.n	80032e4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f241 7270 	movw	r2, #6000	; 0x1770
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d012      	beq.n	80032e4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f641 3258 	movw	r2, #7000	; 0x1b58
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d00d      	beq.n	80032e4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80032ce:	d009      	beq.n	80032e4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f242 3228 	movw	r2, #9000	; 0x2328
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d004      	beq.n	80032e4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d10c      	bne.n	80032fe <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	3a01      	subs	r2, #1
 80032fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80032fc:	e041      	b.n	8003382 <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003304:	d028      	beq.n	8003358 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f644 6220 	movw	r2, #20000	; 0x4e20
 800330c:	4293      	cmp	r3, r2
 800330e:	d023      	beq.n	8003358 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f247 5230 	movw	r2, #30000	; 0x7530
 8003316:	4293      	cmp	r3, r2
 8003318:	d01e      	beq.n	8003358 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003320:	4293      	cmp	r3, r2
 8003322:	d019      	beq.n	8003358 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f24c 3250 	movw	r2, #50000	; 0xc350
 800332a:	4293      	cmp	r3, r2
 800332c:	d014      	beq.n	8003358 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003334:	4293      	cmp	r3, r2
 8003336:	d00f      	beq.n	8003358 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4a19      	ldr	r2, [pc, #100]	; (80033a0 <BasicTimer_Config+0x244>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00b      	beq.n	8003358 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <BasicTimer_Config+0x248>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d007      	beq.n	8003358 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <BasicTimer_Config+0x24c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4a16      	ldr	r2, [pc, #88]	; (80033ac <BasicTimer_Config+0x250>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d108      	bne.n	800336a <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	3a01      	subs	r2, #1
 8003366:	62da      	str	r2, [r3, #44]	; 0x2c
 8003368:	e00b      	b.n	8003382 <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	4a10      	ldr	r2, [pc, #64]	; (80033b0 <BasicTimer_Config+0x254>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	08db      	lsrs	r3, r3, #3
 8003376:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	3a01      	subs	r2, #1
 8003380:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2200      	movs	r2, #0
 8003388:	625a      	str	r2, [r3, #36]	; 0x24
 800338a:	e027      	b.n	80033dc <BasicTimer_Config+0x280>
 800338c:	40010000 	.word	0x40010000
 8003390:	40023800 	.word	0x40023800
 8003394:	40000400 	.word	0x40000400
 8003398:	40000800 	.word	0x40000800
 800339c:	40000c00 	.word	0x40000c00
 80033a0:	00011170 	.word	0x00011170
 80033a4:	00013880 	.word	0x00013880
 80033a8:	00015f90 	.word	0x00015f90
 80033ac:	000186a0 	.word	0x000186a0
 80033b0:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0210 	orr.w	r2, r2, #16
 80033c2:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3a01      	subs	r2, #1
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3a01      	subs	r2, #1
 80033da:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f4:	d103      	bne.n	80033fe <BasicTimer_Config+0x2a2>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 80033f6:	201c      	movs	r0, #28
 80033f8:	f7ff fe92 	bl	8003120 <__NVIC_EnableIRQ>
 80033fc:	e01b      	b.n	8003436 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a10      	ldr	r2, [pc, #64]	; (8003444 <BasicTimer_Config+0x2e8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d103      	bne.n	8003410 <BasicTimer_Config+0x2b4>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8003408:	201d      	movs	r0, #29
 800340a:	f7ff fe89 	bl	8003120 <__NVIC_EnableIRQ>
 800340e:	e012      	b.n	8003436 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a0c      	ldr	r2, [pc, #48]	; (8003448 <BasicTimer_Config+0x2ec>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d103      	bne.n	8003422 <BasicTimer_Config+0x2c6>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 800341a:	201e      	movs	r0, #30
 800341c:	f7ff fe80 	bl	8003120 <__NVIC_EnableIRQ>
 8003420:	e009      	b.n	8003436 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a09      	ldr	r2, [pc, #36]	; (800344c <BasicTimer_Config+0x2f0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d103      	bne.n	8003434 <BasicTimer_Config+0x2d8>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 800342c:	2032      	movs	r0, #50	; 0x32
 800342e:	f7ff fe77 	bl	8003120 <__NVIC_EnableIRQ>
 8003432:	e000      	b.n	8003436 <BasicTimer_Config+0x2da>
	}
	else{
		__NOP();
 8003434:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003436:	b662      	cpsie	i
}
 8003438:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40000400 	.word	0x40000400
 8003448:	40000800 	.word	0x40000800
 800344c:	40000c00 	.word	0x40000c00

08003450 <BasicTimer2_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer2_Callback(void){
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003454:	bf00      	nop
}
 8003456:	bf00      	nop
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003464:	bf00      	nop
}
 8003466:	bf00      	nop
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003474:	bf00      	nop
}
 8003476:	bf00      	nop
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003484:	bf00      	nop
}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003494:	bf00      	nop
}
 8003496:	bf00      	nop
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80034a4:	bf00      	nop
}
 80034a6:	bf00      	nop
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80034b4:	bf00      	nop
}
 80034b6:	bf00      	nop
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80034c4:	bf00      	nop
}
 80034c6:	bf00      	nop
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80034d4:	bf00      	nop
}
 80034d6:	bf00      	nop
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80034e4:	bf00      	nop
}
 80034e6:	bf00      	nop
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80034f4:	bf00      	nop
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003504:	bf00      	nop
}
 8003506:	bf00      	nop
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003514:	bf00      	nop
}
 8003516:	bf00      	nop
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003524:	bf00      	nop
}
 8003526:	bf00      	nop
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003534:	bf00      	nop
}
 8003536:	bf00      	nop
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003544:	bf00      	nop
}
 8003546:	bf00      	nop
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003554:	bf00      	nop
}
 8003556:	bf00      	nop
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003564:	bf00      	nop
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8003574:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8003582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 8003592:	f7ff ff5d 	bl	8003450 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 8003596:	e066      	b.n	8003666 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8003598:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d012      	beq.n	80035cc <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 80035a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035b0:	f023 0302 	bic.w	r3, r3, #2
 80035b4:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 80035b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035c4:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 80035c6:	f7ff ff5b 	bl	8003480 <Capture_TIM2_Ch1_Callback>
}
 80035ca:	e04c      	b.n	8003666 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 80035cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d012      	beq.n	8003600 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 80035da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035e4:	f023 0304 	bic.w	r3, r3, #4
 80035e8:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 80035ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035f8:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 80035fa:	f7ff ff49 	bl	8003490 <Capture_TIM2_Ch2_Callback>
}
 80035fe:	e032      	b.n	8003666 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8003600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d012      	beq.n	8003634 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 800360e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003618:	f023 0308 	bic.w	r3, r3, #8
 800361c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 800361e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003628:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800362c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800362e:	f7ff ff37 	bl	80034a0 <Capture_TIM2_Ch3_Callback>
}
 8003632:	e018      	b.n	8003666 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8003634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b00      	cmp	r3, #0
 8003640:	d011      	beq.n	8003666 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8003642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800364c:	f023 0310 	bic.w	r3, r3, #16
 8003650:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8003652:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800365c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003660:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8003662:	f7ff ff25 	bl	80034b0 <Capture_TIM2_Ch4_Callback>
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8003670:	4b31      	ldr	r3, [pc, #196]	; (8003738 <TIM3_IRQHandler+0xcc>)
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 800367c:	4b2e      	ldr	r3, [pc, #184]	; (8003738 <TIM3_IRQHandler+0xcc>)
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	4a2d      	ldr	r2, [pc, #180]	; (8003738 <TIM3_IRQHandler+0xcc>)
 8003682:	f023 0301 	bic.w	r3, r3, #1
 8003686:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8003688:	f7fd fd14 	bl	80010b4 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 800368c:	e052      	b.n	8003734 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 800368e:	4b2a      	ldr	r3, [pc, #168]	; (8003738 <TIM3_IRQHandler+0xcc>)
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00e      	beq.n	80036b8 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 800369a:	4b27      	ldr	r3, [pc, #156]	; (8003738 <TIM3_IRQHandler+0xcc>)
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	4a26      	ldr	r2, [pc, #152]	; (8003738 <TIM3_IRQHandler+0xcc>)
 80036a0:	f023 0302 	bic.w	r3, r3, #2
 80036a4:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 80036a6:	4b24      	ldr	r3, [pc, #144]	; (8003738 <TIM3_IRQHandler+0xcc>)
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	4a23      	ldr	r2, [pc, #140]	; (8003738 <TIM3_IRQHandler+0xcc>)
 80036ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036b0:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 80036b2:	f7ff ff05 	bl	80034c0 <Capture_TIM3_Ch1_Callback>
}
 80036b6:	e03d      	b.n	8003734 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 80036b8:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <TIM3_IRQHandler+0xcc>)
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00e      	beq.n	80036e2 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 80036c4:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <TIM3_IRQHandler+0xcc>)
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	4a1b      	ldr	r2, [pc, #108]	; (8003738 <TIM3_IRQHandler+0xcc>)
 80036ca:	f023 0304 	bic.w	r3, r3, #4
 80036ce:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 80036d0:	4b19      	ldr	r3, [pc, #100]	; (8003738 <TIM3_IRQHandler+0xcc>)
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	4a18      	ldr	r2, [pc, #96]	; (8003738 <TIM3_IRQHandler+0xcc>)
 80036d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036da:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 80036dc:	f7ff fef8 	bl	80034d0 <Capture_TIM3_Ch2_Callback>
}
 80036e0:	e028      	b.n	8003734 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <TIM3_IRQHandler+0xcc>)
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00e      	beq.n	800370c <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 80036ee:	4b12      	ldr	r3, [pc, #72]	; (8003738 <TIM3_IRQHandler+0xcc>)
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	4a11      	ldr	r2, [pc, #68]	; (8003738 <TIM3_IRQHandler+0xcc>)
 80036f4:	f023 0308 	bic.w	r3, r3, #8
 80036f8:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 80036fa:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <TIM3_IRQHandler+0xcc>)
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	4a0e      	ldr	r2, [pc, #56]	; (8003738 <TIM3_IRQHandler+0xcc>)
 8003700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003704:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8003706:	f7ff feeb 	bl	80034e0 <Capture_TIM3_Ch3_Callback>
}
 800370a:	e013      	b.n	8003734 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 800370c:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <TIM3_IRQHandler+0xcc>)
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00d      	beq.n	8003734 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8003718:	4b07      	ldr	r3, [pc, #28]	; (8003738 <TIM3_IRQHandler+0xcc>)
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	4a06      	ldr	r2, [pc, #24]	; (8003738 <TIM3_IRQHandler+0xcc>)
 800371e:	f023 0310 	bic.w	r3, r3, #16
 8003722:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8003724:	4b04      	ldr	r3, [pc, #16]	; (8003738 <TIM3_IRQHandler+0xcc>)
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	4a03      	ldr	r2, [pc, #12]	; (8003738 <TIM3_IRQHandler+0xcc>)
 800372a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800372e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8003730:	f7ff fede 	bl	80034f0 <Capture_TIM3_Ch4_Callback>
}
 8003734:	bf00      	nop
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40000400 	.word	0x40000400

0800373c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8003740:	4b31      	ldr	r3, [pc, #196]	; (8003808 <TIM4_IRQHandler+0xcc>)
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 800374c:	4b2e      	ldr	r3, [pc, #184]	; (8003808 <TIM4_IRQHandler+0xcc>)
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	4a2d      	ldr	r2, [pc, #180]	; (8003808 <TIM4_IRQHandler+0xcc>)
 8003752:	f023 0301 	bic.w	r3, r3, #1
 8003756:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8003758:	f7ff fe82 	bl	8003460 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 800375c:	e052      	b.n	8003804 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 800375e:	4b2a      	ldr	r3, [pc, #168]	; (8003808 <TIM4_IRQHandler+0xcc>)
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00e      	beq.n	8003788 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 800376a:	4b27      	ldr	r3, [pc, #156]	; (8003808 <TIM4_IRQHandler+0xcc>)
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	4a26      	ldr	r2, [pc, #152]	; (8003808 <TIM4_IRQHandler+0xcc>)
 8003770:	f023 0302 	bic.w	r3, r3, #2
 8003774:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8003776:	4b24      	ldr	r3, [pc, #144]	; (8003808 <TIM4_IRQHandler+0xcc>)
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	4a23      	ldr	r2, [pc, #140]	; (8003808 <TIM4_IRQHandler+0xcc>)
 800377c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003780:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8003782:	f7ff febd 	bl	8003500 <Capture_TIM4_Ch1_Callback>
}
 8003786:	e03d      	b.n	8003804 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8003788:	4b1f      	ldr	r3, [pc, #124]	; (8003808 <TIM4_IRQHandler+0xcc>)
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00e      	beq.n	80037b2 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8003794:	4b1c      	ldr	r3, [pc, #112]	; (8003808 <TIM4_IRQHandler+0xcc>)
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	4a1b      	ldr	r2, [pc, #108]	; (8003808 <TIM4_IRQHandler+0xcc>)
 800379a:	f023 0304 	bic.w	r3, r3, #4
 800379e:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 80037a0:	4b19      	ldr	r3, [pc, #100]	; (8003808 <TIM4_IRQHandler+0xcc>)
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	4a18      	ldr	r2, [pc, #96]	; (8003808 <TIM4_IRQHandler+0xcc>)
 80037a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037aa:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80037ac:	f7ff fec8 	bl	8003540 <Capture_TIM5_Ch2_Callback>
}
 80037b0:	e028      	b.n	8003804 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 80037b2:	4b15      	ldr	r3, [pc, #84]	; (8003808 <TIM4_IRQHandler+0xcc>)
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00e      	beq.n	80037dc <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 80037be:	4b12      	ldr	r3, [pc, #72]	; (8003808 <TIM4_IRQHandler+0xcc>)
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	4a11      	ldr	r2, [pc, #68]	; (8003808 <TIM4_IRQHandler+0xcc>)
 80037c4:	f023 0308 	bic.w	r3, r3, #8
 80037c8:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 80037ca:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <TIM4_IRQHandler+0xcc>)
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <TIM4_IRQHandler+0xcc>)
 80037d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037d4:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 80037d6:	f7ff fe9b 	bl	8003510 <Capture_TIM4_Ch3_Callback>
}
 80037da:	e013      	b.n	8003804 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <TIM4_IRQHandler+0xcc>)
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00d      	beq.n	8003804 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 80037e8:	4b07      	ldr	r3, [pc, #28]	; (8003808 <TIM4_IRQHandler+0xcc>)
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	4a06      	ldr	r2, [pc, #24]	; (8003808 <TIM4_IRQHandler+0xcc>)
 80037ee:	f023 0310 	bic.w	r3, r3, #16
 80037f2:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <TIM4_IRQHandler+0xcc>)
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	4a03      	ldr	r2, [pc, #12]	; (8003808 <TIM4_IRQHandler+0xcc>)
 80037fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037fe:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8003800:	f7ff fe8e 	bl	8003520 <Capture_TIM4_Ch4_Callback>
}
 8003804:	bf00      	nop
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40000800 	.word	0x40000800

0800380c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8003810:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 800381c:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	4a2d      	ldr	r2, [pc, #180]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8003828:	f7ff fe22 	bl	8003470 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 800382c:	e052      	b.n	80038d4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 800382e:	4b2a      	ldr	r3, [pc, #168]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00e      	beq.n	8003858 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 800383a:	4b27      	ldr	r3, [pc, #156]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	4a26      	ldr	r2, [pc, #152]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 8003840:	f023 0302 	bic.w	r3, r3, #2
 8003844:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8003846:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	4a23      	ldr	r2, [pc, #140]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 800384c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003850:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8003852:	f7ff fe6d 	bl	8003530 <Capture_TIM5_Ch1_Callback>
}
 8003856:	e03d      	b.n	80038d4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8003858:	4b1f      	ldr	r3, [pc, #124]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00e      	beq.n	8003882 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8003864:	4b1c      	ldr	r3, [pc, #112]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	4a1b      	ldr	r2, [pc, #108]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 800386a:	f023 0304 	bic.w	r3, r3, #4
 800386e:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	4a18      	ldr	r2, [pc, #96]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 8003876:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800387a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 800387c:	f7ff fe60 	bl	8003540 <Capture_TIM5_Ch2_Callback>
}
 8003880:	e028      	b.n	80038d4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00e      	beq.n	80038ac <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	4a11      	ldr	r2, [pc, #68]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 8003894:	f023 0308 	bic.w	r3, r3, #8
 8003898:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	4a0e      	ldr	r2, [pc, #56]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 80038a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038a4:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 80038a6:	f7ff fe53 	bl	8003550 <Capture_TIM5_Ch3_Callback>
}
 80038aa:	e013      	b.n	80038d4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 80038ac:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00d      	beq.n	80038d4 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 80038b8:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	4a06      	ldr	r2, [pc, #24]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 80038be:	f023 0310 	bic.w	r3, r3, #16
 80038c2:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	4a03      	ldr	r2, [pc, #12]	; (80038d8 <TIM5_IRQHandler+0xcc>)
 80038ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038ce:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 80038d0:	f7ff fe46 	bl	8003560 <Capture_TIM5_Ch4_Callback>
}
 80038d4:	bf00      	nop
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40000c00 	.word	0x40000c00

080038dc <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a88      	ldr	r2, [pc, #544]	; (8003b38 <GPIO_Config+0x238>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d106      	bne.n	8003928 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 800391a:	4b88      	ldr	r3, [pc, #544]	; (8003b3c <GPIO_Config+0x23c>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	4a87      	ldr	r2, [pc, #540]	; (8003b3c <GPIO_Config+0x23c>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6313      	str	r3, [r2, #48]	; 0x30
 8003926:	e03a      	b.n	800399e <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a84      	ldr	r2, [pc, #528]	; (8003b40 <GPIO_Config+0x240>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d106      	bne.n	8003940 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8003932:	4b82      	ldr	r3, [pc, #520]	; (8003b3c <GPIO_Config+0x23c>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	4a81      	ldr	r2, [pc, #516]	; (8003b3c <GPIO_Config+0x23c>)
 8003938:	f043 0302 	orr.w	r3, r3, #2
 800393c:	6313      	str	r3, [r2, #48]	; 0x30
 800393e:	e02e      	b.n	800399e <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a7f      	ldr	r2, [pc, #508]	; (8003b44 <GPIO_Config+0x244>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d106      	bne.n	8003958 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 800394a:	4b7c      	ldr	r3, [pc, #496]	; (8003b3c <GPIO_Config+0x23c>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	4a7b      	ldr	r2, [pc, #492]	; (8003b3c <GPIO_Config+0x23c>)
 8003950:	f043 0304 	orr.w	r3, r3, #4
 8003954:	6313      	str	r3, [r2, #48]	; 0x30
 8003956:	e022      	b.n	800399e <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a7a      	ldr	r2, [pc, #488]	; (8003b48 <GPIO_Config+0x248>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d106      	bne.n	8003970 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8003962:	4b76      	ldr	r3, [pc, #472]	; (8003b3c <GPIO_Config+0x23c>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	4a75      	ldr	r2, [pc, #468]	; (8003b3c <GPIO_Config+0x23c>)
 8003968:	f043 0308 	orr.w	r3, r3, #8
 800396c:	6313      	str	r3, [r2, #48]	; 0x30
 800396e:	e016      	b.n	800399e <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a75      	ldr	r2, [pc, #468]	; (8003b4c <GPIO_Config+0x24c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d106      	bne.n	8003988 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 800397a:	4b70      	ldr	r3, [pc, #448]	; (8003b3c <GPIO_Config+0x23c>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4a6f      	ldr	r2, [pc, #444]	; (8003b3c <GPIO_Config+0x23c>)
 8003980:	f043 0310 	orr.w	r3, r3, #16
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
 8003986:	e00a      	b.n	800399e <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a70      	ldr	r2, [pc, #448]	; (8003b50 <GPIO_Config+0x250>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d105      	bne.n	800399e <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8003992:	4b6a      	ldr	r3, [pc, #424]	; (8003b3c <GPIO_Config+0x23c>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a69      	ldr	r2, [pc, #420]	; (8003b3c <GPIO_Config+0x23c>)
 8003998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	795b      	ldrb	r3, [r3, #5]
 80039a2:	461a      	mov	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	791b      	ldrb	r3, [r3, #4]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	791b      	ldrb	r3, [r3, #4]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	2103      	movs	r1, #3
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	4619      	mov	r1, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	400a      	ands	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6819      	ldr	r1, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	430a      	orrs	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	7a1b      	ldrb	r3, [r3, #8]
 80039e2:	461a      	mov	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	791b      	ldrb	r3, [r3, #4]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	791b      	ldrb	r3, [r3, #4]
 80039f8:	4619      	mov	r1, r3
 80039fa:	2301      	movs	r3, #1
 80039fc:	408b      	lsls	r3, r1
 80039fe:	43db      	mvns	r3, r3
 8003a00:	4619      	mov	r1, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	400a      	ands	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	799b      	ldrb	r3, [r3, #6]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	791b      	ldrb	r3, [r3, #4]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	791b      	ldrb	r3, [r3, #4]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	2103      	movs	r1, #3
 8003a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	4619      	mov	r1, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	400a      	ands	r2, r1
 8003a48:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6899      	ldr	r1, [r3, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	79db      	ldrb	r3, [r3, #7]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	791b      	ldrb	r3, [r3, #4]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	791b      	ldrb	r3, [r3, #4]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	2103      	movs	r1, #3
 8003a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	4619      	mov	r1, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	400a      	ands	r2, r1
 8003a88:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68d9      	ldr	r1, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	795b      	ldrb	r3, [r3, #5]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d143      	bne.n	8003b2a <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	791b      	ldrb	r3, [r3, #4]
 8003aa6:	2b07      	cmp	r3, #7
 8003aa8:	d81f      	bhi.n	8003aea <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	791b      	ldrb	r3, [r3, #4]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6a1a      	ldr	r2, [r3, #32]
 8003ab8:	210f      	movs	r1, #15
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	400a      	ands	r2, r1
 8003aca:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6a1a      	ldr	r2, [r3, #32]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	7a5b      	ldrb	r3, [r3, #9]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	fa01 f303 	lsl.w	r3, r1, r3
 8003ade:	4619      	mov	r1, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 8003ae8:	e01f      	b.n	8003b2a <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	791b      	ldrb	r3, [r3, #4]
 8003aee:	3b08      	subs	r3, #8
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003afa:	210f      	movs	r1, #15
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	fa01 f303 	lsl.w	r3, r1, r3
 8003b02:	43db      	mvns	r3, r3
 8003b04:	4619      	mov	r1, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	400a      	ands	r2, r1
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	7a5b      	ldrb	r3, [r3, #9]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	4619      	mov	r1, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40020000 	.word	0x40020000
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40020400 	.word	0x40020400
 8003b44:	40020800 	.word	0x40020800
 8003b48:	40020c00 	.word	0x40020c00
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40021c00 	.word	0x40021c00

08003b54 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d10d      	bne.n	8003b82 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699a      	ldr	r2, [r3, #24]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	791b      	ldrb	r3, [r3, #4]
 8003b70:	4619      	mov	r1, r3
 8003b72:	2301      	movs	r3, #1
 8003b74:	408b      	lsls	r3, r1
 8003b76:	4619      	mov	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8003b80:	e00d      	b.n	8003b9e <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699a      	ldr	r2, [r3, #24]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	791b      	ldrb	r3, [r3, #4]
 8003b8c:	3310      	adds	r3, #16
 8003b8e:	2101      	movs	r1, #1
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	4619      	mov	r1, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	619a      	str	r2, [r3, #24]
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	791b      	ldrb	r3, [r3, #4]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	4093      	lsls	r3, r2
 8003bc0:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8003bca:	897b      	ldrh	r3, [r7, #10]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	791b      	ldrb	r3, [r3, #4]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	40d3      	lsrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8003bde:	68fb      	ldr	r3, [r7, #12]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff ffd8 	bl	8003baa <GPIO_ReadPin>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ffa1 	bl	8003b54 <GPIO_WritePin>
}
 8003c12:	bf00      	nop
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 8003c26:	4b92      	ldr	r3, [pc, #584]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a91      	ldr	r2, [pc, #580]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003c2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c30:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003c32:	4b8f      	ldr	r3, [pc, #572]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 8003c3a:	4b8e      	ldr	r3, [pc, #568]	; (8003e74 <RCC_enableMaxFrequencies+0x258>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a8d      	ldr	r2, [pc, #564]	; (8003e74 <RCC_enableMaxFrequencies+0x258>)
 8003c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c44:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 8003c46:	4b8a      	ldr	r3, [pc, #552]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4a89      	ldr	r2, [pc, #548]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003c4c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003c50:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	f200 82fc 	bhi.w	8004252 <RCC_enableMaxFrequencies+0x636>
 8003c5a:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <RCC_enableMaxFrequencies+0x44>)
 8003c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c60:	08003c85 	.word	0x08003c85
 8003c64:	08003d27 	.word	0x08003d27
 8003c68:	08003dc9 	.word	0x08003dc9
 8003c6c:	08003e7d 	.word	0x08003e7d
 8003c70:	08003f1f 	.word	0x08003f1f
 8003c74:	08003fc1 	.word	0x08003fc1
 8003c78:	0800406d 	.word	0x0800406d
 8003c7c:	0800410f 	.word	0x0800410f
 8003c80:	080041b1 	.word	0x080041b1
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003c84:	4b7a      	ldr	r3, [pc, #488]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4a79      	ldr	r2, [pc, #484]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003c8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c8e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003c90:	4b77      	ldr	r3, [pc, #476]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	4a76      	ldr	r2, [pc, #472]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003c96:	f043 0310 	orr.w	r3, r3, #16
 8003c9a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003c9c:	4b74      	ldr	r3, [pc, #464]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4a73      	ldr	r2, [pc, #460]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003ca2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003caa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8003cac:	4b70      	ldr	r3, [pc, #448]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4a6f      	ldr	r2, [pc, #444]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003cb2:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8003cb6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003cb8:	4b6d      	ldr	r3, [pc, #436]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4a6c      	ldr	r2, [pc, #432]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003cbe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003cc2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8003cc4:	4b6a      	ldr	r3, [pc, #424]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4a69      	ldr	r2, [pc, #420]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cce:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003cd0:	4b67      	ldr	r3, [pc, #412]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a66      	ldr	r2, [pc, #408]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cda:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003cdc:	4b64      	ldr	r3, [pc, #400]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a63      	ldr	r2, [pc, #396]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003ce2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ce6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8003ce8:	4b61      	ldr	r3, [pc, #388]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a60      	ldr	r2, [pc, #384]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003cee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cf2:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003cf4:	4b5e      	ldr	r3, [pc, #376]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a5d      	ldr	r2, [pc, #372]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cfe:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003d00:	e000      	b.n	8003d04 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 8003d02:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003d04:	4b5a      	ldr	r3, [pc, #360]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f8      	beq.n	8003d02 <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003d10:	4b59      	ldr	r3, [pc, #356]	; (8003e78 <RCC_enableMaxFrequencies+0x25c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a58      	ldr	r2, [pc, #352]	; (8003e78 <RCC_enableMaxFrequencies+0x25c>)
 8003d16:	f023 030f 	bic.w	r3, r3, #15
 8003d1a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8003d1c:	4b56      	ldr	r3, [pc, #344]	; (8003e78 <RCC_enableMaxFrequencies+0x25c>)
 8003d1e:	4a56      	ldr	r2, [pc, #344]	; (8003e78 <RCC_enableMaxFrequencies+0x25c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6013      	str	r3, [r2, #0]

			break;
 8003d24:	e296      	b.n	8004254 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003d26:	4b52      	ldr	r3, [pc, #328]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	4a51      	ldr	r2, [pc, #324]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d30:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003d32:	4b4f      	ldr	r3, [pc, #316]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4a4e      	ldr	r2, [pc, #312]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d38:	f043 0310 	orr.w	r3, r3, #16
 8003d3c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003d3e:	4b4c      	ldr	r3, [pc, #304]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4a4b      	ldr	r2, [pc, #300]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d44:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d4c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8003d4e:	4b48      	ldr	r3, [pc, #288]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4a47      	ldr	r2, [pc, #284]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d54:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8003d58:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003d5a:	4b45      	ldr	r3, [pc, #276]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4a44      	ldr	r2, [pc, #272]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d60:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003d64:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 8003d66:	4b42      	ldr	r3, [pc, #264]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4a41      	ldr	r2, [pc, #260]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d70:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003d72:	4b3f      	ldr	r3, [pc, #252]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	4a3e      	ldr	r2, [pc, #248]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d7c:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003d7e:	4b3c      	ldr	r3, [pc, #240]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	4a3b      	ldr	r2, [pc, #236]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d88:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8003d8a:	4b39      	ldr	r3, [pc, #228]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	4a38      	ldr	r2, [pc, #224]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d94:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003d96:	4b36      	ldr	r3, [pc, #216]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a35      	ldr	r2, [pc, #212]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003d9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003da0:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003da2:	e000      	b.n	8003da6 <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 8003da4:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003da6:	4b32      	ldr	r3, [pc, #200]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f8      	beq.n	8003da4 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003db2:	4b31      	ldr	r3, [pc, #196]	; (8003e78 <RCC_enableMaxFrequencies+0x25c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a30      	ldr	r2, [pc, #192]	; (8003e78 <RCC_enableMaxFrequencies+0x25c>)
 8003db8:	f023 030f 	bic.w	r3, r3, #15
 8003dbc:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8003dbe:	4b2e      	ldr	r3, [pc, #184]	; (8003e78 <RCC_enableMaxFrequencies+0x25c>)
 8003dc0:	4a2d      	ldr	r2, [pc, #180]	; (8003e78 <RCC_enableMaxFrequencies+0x25c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6013      	str	r3, [r2, #0]

			break;
 8003dc6:	e245      	b.n	8004254 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003dc8:	4b29      	ldr	r3, [pc, #164]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4a28      	ldr	r2, [pc, #160]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003dce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dd2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003dd4:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	4a25      	ldr	r2, [pc, #148]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003dda:	f043 0310 	orr.w	r3, r3, #16
 8003dde:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003de0:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4a22      	ldr	r2, [pc, #136]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003de6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 8003df0:	4b1f      	ldr	r3, [pc, #124]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4a1e      	ldr	r2, [pc, #120]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003df6:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8003dfa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003dfc:	4b1c      	ldr	r3, [pc, #112]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	4a1b      	ldr	r2, [pc, #108]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003e02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003e06:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8003e08:	4b19      	ldr	r3, [pc, #100]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4a18      	ldr	r2, [pc, #96]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e12:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003e14:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	4a15      	ldr	r2, [pc, #84]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e1e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4a12      	ldr	r2, [pc, #72]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003e26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e2a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8003e2c:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	4a0f      	ldr	r2, [pc, #60]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e36:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003e38:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a0c      	ldr	r2, [pc, #48]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e42:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003e44:	e000      	b.n	8003e48 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 8003e46:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003e48:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <RCC_enableMaxFrequencies+0x254>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f8      	beq.n	8003e46 <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003e54:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <RCC_enableMaxFrequencies+0x25c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a07      	ldr	r2, [pc, #28]	; (8003e78 <RCC_enableMaxFrequencies+0x25c>)
 8003e5a:	f023 030f 	bic.w	r3, r3, #15
 8003e5e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <RCC_enableMaxFrequencies+0x25c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a04      	ldr	r2, [pc, #16]	; (8003e78 <RCC_enableMaxFrequencies+0x25c>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6013      	str	r3, [r2, #0]


			break;
 8003e6c:	e1f2      	b.n	8004254 <RCC_enableMaxFrequencies+0x638>
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800
 8003e74:	40007000 	.word	0x40007000
 8003e78:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003e7c:	4b79      	ldr	r3, [pc, #484]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4a78      	ldr	r2, [pc, #480]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003e82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e86:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003e88:	4b76      	ldr	r3, [pc, #472]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4a75      	ldr	r2, [pc, #468]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003e8e:	f043 0310 	orr.w	r3, r3, #16
 8003e92:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003e94:	4b73      	ldr	r3, [pc, #460]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4a72      	ldr	r2, [pc, #456]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003e9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ea2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8003ea4:	4b6f      	ldr	r3, [pc, #444]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4a6e      	ldr	r2, [pc, #440]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003eaa:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8003eae:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003eb0:	4b6c      	ldr	r3, [pc, #432]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	4a6b      	ldr	r2, [pc, #428]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003eb6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003eba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8003ebc:	4b69      	ldr	r3, [pc, #420]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003ebe:	4a69      	ldr	r2, [pc, #420]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003ec4:	4b67      	ldr	r3, [pc, #412]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4a66      	ldr	r2, [pc, #408]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ece:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003ed0:	4b64      	ldr	r3, [pc, #400]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4a63      	ldr	r2, [pc, #396]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003ed6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003eda:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8003edc:	4b61      	ldr	r3, [pc, #388]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4a60      	ldr	r2, [pc, #384]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ee6:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003ee8:	4b5e      	ldr	r3, [pc, #376]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a5d      	ldr	r2, [pc, #372]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ef2:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003ef4:	e000      	b.n	8003ef8 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 8003ef6:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003ef8:	4b5a      	ldr	r3, [pc, #360]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f8      	beq.n	8003ef6 <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003f04:	4b58      	ldr	r3, [pc, #352]	; (8004068 <RCC_enableMaxFrequencies+0x44c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a57      	ldr	r2, [pc, #348]	; (8004068 <RCC_enableMaxFrequencies+0x44c>)
 8003f0a:	f023 030f 	bic.w	r3, r3, #15
 8003f0e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8003f10:	4b55      	ldr	r3, [pc, #340]	; (8004068 <RCC_enableMaxFrequencies+0x44c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a54      	ldr	r2, [pc, #336]	; (8004068 <RCC_enableMaxFrequencies+0x44c>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	6013      	str	r3, [r2, #0]

			break;
 8003f1c:	e19a      	b.n	8004254 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003f1e:	4b51      	ldr	r3, [pc, #324]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4a50      	ldr	r2, [pc, #320]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f24:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f28:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003f2a:	4b4e      	ldr	r3, [pc, #312]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4a4d      	ldr	r2, [pc, #308]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f30:	f043 0310 	orr.w	r3, r3, #16
 8003f34:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003f36:	4b4b      	ldr	r3, [pc, #300]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4a4a      	ldr	r2, [pc, #296]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f3c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f44:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8003f46:	4b47      	ldr	r3, [pc, #284]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	4a46      	ldr	r2, [pc, #280]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f4c:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8003f50:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003f52:	4b44      	ldr	r3, [pc, #272]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	4a43      	ldr	r2, [pc, #268]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f58:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003f5c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8003f5e:	4b41      	ldr	r3, [pc, #260]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f60:	4a40      	ldr	r2, [pc, #256]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003f66:	4b3f      	ldr	r3, [pc, #252]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4a3e      	ldr	r2, [pc, #248]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f70:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003f72:	4b3c      	ldr	r3, [pc, #240]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	4a3b      	ldr	r2, [pc, #236]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f7c:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8003f7e:	4b39      	ldr	r3, [pc, #228]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	4a38      	ldr	r2, [pc, #224]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f88:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003f8a:	4b36      	ldr	r3, [pc, #216]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a35      	ldr	r2, [pc, #212]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f94:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003f96:	e000      	b.n	8003f9a <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 8003f98:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003f9a:	4b32      	ldr	r3, [pc, #200]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f8      	beq.n	8003f98 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003fa6:	4b30      	ldr	r3, [pc, #192]	; (8004068 <RCC_enableMaxFrequencies+0x44c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a2f      	ldr	r2, [pc, #188]	; (8004068 <RCC_enableMaxFrequencies+0x44c>)
 8003fac:	f023 030f 	bic.w	r3, r3, #15
 8003fb0:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8003fb2:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <RCC_enableMaxFrequencies+0x44c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2c      	ldr	r2, [pc, #176]	; (8004068 <RCC_enableMaxFrequencies+0x44c>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6013      	str	r3, [r2, #0]

			break;
 8003fbe:	e149      	b.n	8004254 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003fc0:	4b28      	ldr	r3, [pc, #160]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4a27      	ldr	r2, [pc, #156]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003fc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fca:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003fcc:	4b25      	ldr	r3, [pc, #148]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4a24      	ldr	r2, [pc, #144]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003fd2:	f043 0310 	orr.w	r3, r3, #16
 8003fd6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003fd8:	4b22      	ldr	r3, [pc, #136]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4a21      	ldr	r2, [pc, #132]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003fde:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 8003fe8:	4b1e      	ldr	r3, [pc, #120]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003fee:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8003ff2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	4a1a      	ldr	r2, [pc, #104]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8003ffa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003ffe:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8004000:	4b18      	ldr	r3, [pc, #96]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8004002:	4a18      	ldr	r2, [pc, #96]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8004008:	4b16      	ldr	r3, [pc, #88]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4a15      	ldr	r2, [pc, #84]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 800400e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004012:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8004014:	4b13      	ldr	r3, [pc, #76]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	4a12      	ldr	r2, [pc, #72]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 800401a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800401e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8004020:	4b10      	ldr	r3, [pc, #64]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4a0f      	ldr	r2, [pc, #60]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8004026:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800402a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800402c:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a0c      	ldr	r2, [pc, #48]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 8004032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004036:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004038:	e000      	b.n	800403c <RCC_enableMaxFrequencies+0x420>
				__NOP();
 800403a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800403c:	4b09      	ldr	r3, [pc, #36]	; (8004064 <RCC_enableMaxFrequencies+0x448>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f8      	beq.n	800403a <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8004048:	4b07      	ldr	r3, [pc, #28]	; (8004068 <RCC_enableMaxFrequencies+0x44c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a06      	ldr	r2, [pc, #24]	; (8004068 <RCC_enableMaxFrequencies+0x44c>)
 800404e:	f023 030f 	bic.w	r3, r3, #15
 8004052:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <RCC_enableMaxFrequencies+0x44c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a03      	ldr	r2, [pc, #12]	; (8004068 <RCC_enableMaxFrequencies+0x44c>)
 800405a:	f043 0302 	orr.w	r3, r3, #2
 800405e:	6013      	str	r3, [r2, #0]

			break;
 8004060:	e0f8      	b.n	8004254 <RCC_enableMaxFrequencies+0x638>
 8004062:	bf00      	nop
 8004064:	40023800 	.word	0x40023800
 8004068:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800406c:	4b83      	ldr	r3, [pc, #524]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4a82      	ldr	r2, [pc, #520]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004072:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004076:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8004078:	4b80      	ldr	r3, [pc, #512]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	4a7f      	ldr	r2, [pc, #508]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 800407e:	f043 0310 	orr.w	r3, r3, #16
 8004082:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8004084:	4b7d      	ldr	r3, [pc, #500]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4a7c      	ldr	r2, [pc, #496]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 800408a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800408e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004092:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 8004094:	4b79      	ldr	r3, [pc, #484]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4a78      	ldr	r2, [pc, #480]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 800409a:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800409e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80040a0:	4b76      	ldr	r3, [pc, #472]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4a75      	ldr	r2, [pc, #468]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80040a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80040aa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80040ac:	4b73      	ldr	r3, [pc, #460]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80040ae:	4a73      	ldr	r2, [pc, #460]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80040b4:	4b71      	ldr	r3, [pc, #452]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4a70      	ldr	r2, [pc, #448]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80040ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040be:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80040c0:	4b6e      	ldr	r3, [pc, #440]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4a6d      	ldr	r2, [pc, #436]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80040c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040ca:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80040cc:	4b6b      	ldr	r3, [pc, #428]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4a6a      	ldr	r2, [pc, #424]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80040d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040d6:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80040d8:	4b68      	ldr	r3, [pc, #416]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a67      	ldr	r2, [pc, #412]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80040de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e2:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80040e4:	e000      	b.n	80040e8 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 80040e6:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80040e8:	4b64      	ldr	r3, [pc, #400]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f8      	beq.n	80040e6 <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80040f4:	4b62      	ldr	r3, [pc, #392]	; (8004280 <RCC_enableMaxFrequencies+0x664>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a61      	ldr	r2, [pc, #388]	; (8004280 <RCC_enableMaxFrequencies+0x664>)
 80040fa:	f023 030f 	bic.w	r3, r3, #15
 80040fe:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8004100:	4b5f      	ldr	r3, [pc, #380]	; (8004280 <RCC_enableMaxFrequencies+0x664>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5e      	ldr	r2, [pc, #376]	; (8004280 <RCC_enableMaxFrequencies+0x664>)
 8004106:	f043 0302 	orr.w	r3, r3, #2
 800410a:	6013      	str	r3, [r2, #0]

			break;
 800410c:	e0a2      	b.n	8004254 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800410e:	4b5b      	ldr	r3, [pc, #364]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4a5a      	ldr	r2, [pc, #360]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004114:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004118:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800411a:	4b58      	ldr	r3, [pc, #352]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4a57      	ldr	r2, [pc, #348]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004120:	f043 0310 	orr.w	r3, r3, #16
 8004124:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8004126:	4b55      	ldr	r3, [pc, #340]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	4a54      	ldr	r2, [pc, #336]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 800412c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004134:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8004136:	4b51      	ldr	r3, [pc, #324]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	4a50      	ldr	r2, [pc, #320]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 800413c:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8004140:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8004142:	4b4e      	ldr	r3, [pc, #312]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4a4d      	ldr	r2, [pc, #308]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004148:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800414c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800414e:	4b4b      	ldr	r3, [pc, #300]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004150:	4a4a      	ldr	r2, [pc, #296]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8004156:	4b49      	ldr	r3, [pc, #292]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	4a48      	ldr	r2, [pc, #288]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 800415c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004160:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8004162:	4b46      	ldr	r3, [pc, #280]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	4a45      	ldr	r2, [pc, #276]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004168:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800416c:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800416e:	4b43      	ldr	r3, [pc, #268]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	4a42      	ldr	r2, [pc, #264]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004178:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800417a:	4b40      	ldr	r3, [pc, #256]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a3f      	ldr	r2, [pc, #252]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004184:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004186:	e000      	b.n	800418a <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 8004188:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800418a:	4b3c      	ldr	r3, [pc, #240]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f8      	beq.n	8004188 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8004196:	4b3a      	ldr	r3, [pc, #232]	; (8004280 <RCC_enableMaxFrequencies+0x664>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a39      	ldr	r2, [pc, #228]	; (8004280 <RCC_enableMaxFrequencies+0x664>)
 800419c:	f023 030f 	bic.w	r3, r3, #15
 80041a0:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80041a2:	4b37      	ldr	r3, [pc, #220]	; (8004280 <RCC_enableMaxFrequencies+0x664>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a36      	ldr	r2, [pc, #216]	; (8004280 <RCC_enableMaxFrequencies+0x664>)
 80041a8:	f043 0302 	orr.w	r3, r3, #2
 80041ac:	6013      	str	r3, [r2, #0]

			break;
 80041ae:	e051      	b.n	8004254 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80041b0:	4b32      	ldr	r3, [pc, #200]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	4a31      	ldr	r2, [pc, #196]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80041b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041ba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 80041bc:	4b2f      	ldr	r3, [pc, #188]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	4a2e      	ldr	r2, [pc, #184]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80041c2:	f043 0308 	orr.w	r3, r3, #8
 80041c6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80041c8:	4b2c      	ldr	r3, [pc, #176]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4a2b      	ldr	r2, [pc, #172]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80041ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80041d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 80041d8:	4b28      	ldr	r3, [pc, #160]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	4a27      	ldr	r2, [pc, #156]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80041de:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 80041e2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80041e4:	4b25      	ldr	r3, [pc, #148]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4a24      	ldr	r2, [pc, #144]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80041ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80041ee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80041f0:	4b22      	ldr	r3, [pc, #136]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80041f2:	4a22      	ldr	r2, [pc, #136]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80041f8:	4b20      	ldr	r3, [pc, #128]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a1f      	ldr	r2, [pc, #124]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 80041fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004202:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8004204:	4b1d      	ldr	r3, [pc, #116]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a1c      	ldr	r2, [pc, #112]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 800420a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800420e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8004210:	4b1a      	ldr	r3, [pc, #104]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	4a19      	ldr	r2, [pc, #100]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800421a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a16      	ldr	r2, [pc, #88]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004226:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004228:	e000      	b.n	800422c <RCC_enableMaxFrequencies+0x610>
				__NOP();
 800422a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800422c:	4b13      	ldr	r3, [pc, #76]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f8      	beq.n	800422a <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8004238:	4b11      	ldr	r3, [pc, #68]	; (8004280 <RCC_enableMaxFrequencies+0x664>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a10      	ldr	r2, [pc, #64]	; (8004280 <RCC_enableMaxFrequencies+0x664>)
 800423e:	f023 030f 	bic.w	r3, r3, #15
 8004242:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8004244:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <RCC_enableMaxFrequencies+0x664>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a0d      	ldr	r2, [pc, #52]	; (8004280 <RCC_enableMaxFrequencies+0x664>)
 800424a:	f043 0303 	orr.w	r3, r3, #3
 800424e:	6013      	str	r3, [r2, #0]

			break;
 8004250:	e000      	b.n	8004254 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 8004252:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004254:	4b09      	ldr	r3, [pc, #36]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	4a08      	ldr	r2, [pc, #32]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 800425a:	f043 0302 	orr.w	r3, r3, #2
 800425e:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8004260:	e000      	b.n	8004264 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 8004262:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8004264:	4b05      	ldr	r3, [pc, #20]	; (800427c <RCC_enableMaxFrequencies+0x660>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f8      	beq.n	8004262 <RCC_enableMaxFrequencies+0x646>
	}

	SystemCoreClockUpdate();
 8004270:	f000 fce0 	bl	8004c34 <SystemCoreClockUpdate>

}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40023800 	.word	0x40023800
 8004280:	40023c00 	.word	0x40023c00

08004284 <__NVIC_EnableIRQ>:
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	2b00      	cmp	r3, #0
 8004294:	db0b      	blt.n	80042ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	f003 021f 	and.w	r2, r3, #31
 800429c:	4907      	ldr	r1, [pc, #28]	; (80042bc <__NVIC_EnableIRQ+0x38>)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2001      	movs	r0, #1
 80042a6:	fa00 f202 	lsl.w	r2, r0, r2
 80042aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	e000e100 	.word	0xe000e100

080042c0 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 80042c0:	b590      	push	{r4, r7, lr}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80042c8:	b672      	cpsid	i
}
 80042ca:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a8f      	ldr	r2, [pc, #572]	; (8004510 <USART_Config+0x250>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d106      	bne.n	80042e4 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80042d6:	4b8f      	ldr	r3, [pc, #572]	; (8004514 <USART_Config+0x254>)
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	4a8e      	ldr	r2, [pc, #568]	; (8004514 <USART_Config+0x254>)
 80042dc:	f043 0310 	orr.w	r3, r3, #16
 80042e0:	6453      	str	r3, [r2, #68]	; 0x44
 80042e2:	e018      	b.n	8004316 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a8b      	ldr	r2, [pc, #556]	; (8004518 <USART_Config+0x258>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d106      	bne.n	80042fc <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80042ee:	4b89      	ldr	r3, [pc, #548]	; (8004514 <USART_Config+0x254>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	4a88      	ldr	r2, [pc, #544]	; (8004514 <USART_Config+0x254>)
 80042f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f8:	6413      	str	r3, [r2, #64]	; 0x40
 80042fa:	e00c      	b.n	8004316 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a86      	ldr	r2, [pc, #536]	; (800451c <USART_Config+0x25c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d106      	bne.n	8004314 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8004306:	4b83      	ldr	r3, [pc, #524]	; (8004514 <USART_Config+0x254>)
 8004308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430a:	4a82      	ldr	r2, [pc, #520]	; (8004514 <USART_Config+0x254>)
 800430c:	f043 0320 	orr.w	r3, r3, #32
 8004310:	6453      	str	r3, [r2, #68]	; 0x44
 8004312:	e000      	b.n	8004316 <USART_Config+0x56>
	}
	else{
		__NOP();
 8004314:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2200      	movs	r2, #0
 800431c:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2200      	movs	r2, #0
 8004324:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	7a5b      	ldrb	r3, [r3, #9]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d025      	beq.n	800437a <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	7a5b      	ldrb	r3, [r3, #9]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d110      	bne.n	8004358 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004344:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004354:	60da      	str	r2, [r3, #12]
 8004356:	e018      	b.n	800438a <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004366:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004376:	60da      	str	r2, [r3, #12]
 8004378:	e007      	b.n	800438a <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004388:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	7a1b      	ldrb	r3, [r3, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d108      	bne.n	80043a4 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043a0:	60da      	str	r2, [r3, #12]
 80043a2:	e007      	b.n	80043b4 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043b2:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	7a9b      	ldrb	r3, [r3, #10]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d82f      	bhi.n	800441c <USART_Config+0x15c>
 80043bc:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <USART_Config+0x104>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	080043d5 	.word	0x080043d5
 80043c8:	080043e7 	.word	0x080043e7
 80043cc:	080043f9 	.word	0x080043f9
 80043d0:	0800440b 	.word	0x0800440b
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80043e2:	611a      	str	r2, [r3, #16]
			break;
 80043e4:	e023      	b.n	800442e <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043f4:	611a      	str	r2, [r3, #16]
			break;
 80043f6:	e01a      	b.n	800442e <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004406:	611a      	str	r2, [r3, #16]
			break;
 8004408:	e011      	b.n	800442e <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004418:	611a      	str	r2, [r3, #16]
			break;
 800441a:	e008      	b.n	800442e <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800442a:	611a      	str	r2, [r3, #16]
			break;
 800442c:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681c      	ldr	r4, [r3, #0]
 8004436:	4611      	mov	r1, r2
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f8cd 	bl	80045d8 <brrCalculus>
 800443e:	4603      	mov	r3, r0
 8004440:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	799b      	ldrb	r3, [r3, #6]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d82e      	bhi.n	80044a8 <USART_Config+0x1e8>
 800444a:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <USART_Config+0x190>)
 800444c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004450:	08004461 	.word	0x08004461
 8004454:	08004473 	.word	0x08004473
 8004458:	08004485 	.word	0x08004485
 800445c:	08004497 	.word	0x08004497
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0208 	orr.w	r2, r2, #8
 800446e:	60da      	str	r2, [r3, #12]
			break;
 8004470:	e023      	b.n	80044ba <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0204 	orr.w	r2, r2, #4
 8004480:	60da      	str	r2, [r3, #12]
			break;
 8004482:	e01a      	b.n	80044ba <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 020c 	orr.w	r2, r2, #12
 8004492:	60da      	str	r2, [r3, #12]
			break;
 8004494:	e011      	b.n	80044ba <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 020c 	bic.w	r2, r2, #12
 80044a4:	60da      	str	r2, [r3, #12]
			break;
 80044a6:	e008      	b.n	80044ba <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 020c 	bic.w	r2, r2, #12
 80044b6:	60da      	str	r2, [r3, #12]
			break;
 80044b8:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	799b      	ldrb	r3, [r3, #6]
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d008      	beq.n	80044d4 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044d0:	60da      	str	r2, [r3, #12]
 80044d2:	e007      	b.n	80044e4 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044e2:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	795b      	ldrb	r3, [r3, #5]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d12d      	bne.n	8004548 <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0220 	orr.w	r2, r2, #32
 80044fa:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a03      	ldr	r2, [pc, #12]	; (8004510 <USART_Config+0x250>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d10c      	bne.n	8004520 <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8004506:	2025      	movs	r0, #37	; 0x25
 8004508:	f7ff febc 	bl	8004284 <__NVIC_EnableIRQ>
 800450c:	e024      	b.n	8004558 <USART_Config+0x298>
 800450e:	bf00      	nop
 8004510:	40011000 	.word	0x40011000
 8004514:	40023800 	.word	0x40023800
 8004518:	40004400 	.word	0x40004400
 800451c:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a28      	ldr	r2, [pc, #160]	; (80045c8 <USART_Config+0x308>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d103      	bne.n	8004532 <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800452a:	2026      	movs	r0, #38	; 0x26
 800452c:	f7ff feaa 	bl	8004284 <__NVIC_EnableIRQ>
 8004530:	e012      	b.n	8004558 <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a25      	ldr	r2, [pc, #148]	; (80045cc <USART_Config+0x30c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d103      	bne.n	8004544 <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800453c:	2047      	movs	r0, #71	; 0x47
 800453e:	f7ff fea1 	bl	8004284 <__NVIC_EnableIRQ>
 8004542:	e009      	b.n	8004558 <USART_Config+0x298>
		}
		else{
				__NOP();
 8004544:	bf00      	nop
 8004546:	e007      	b.n	8004558 <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0220 	bic.w	r2, r2, #32
 8004556:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	791b      	ldrb	r3, [r3, #4]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d124      	bne.n	80045aa <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800456e:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a16      	ldr	r2, [pc, #88]	; (80045d0 <USART_Config+0x310>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d103      	bne.n	8004582 <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800457a:	2025      	movs	r0, #37	; 0x25
 800457c:	f7ff fe82 	bl	8004284 <__NVIC_EnableIRQ>
 8004580:	e01b      	b.n	80045ba <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a10      	ldr	r2, [pc, #64]	; (80045c8 <USART_Config+0x308>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d103      	bne.n	8004594 <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800458c:	2026      	movs	r0, #38	; 0x26
 800458e:	f7ff fe79 	bl	8004284 <__NVIC_EnableIRQ>
 8004592:	e012      	b.n	80045ba <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a0c      	ldr	r2, [pc, #48]	; (80045cc <USART_Config+0x30c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d103      	bne.n	80045a6 <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800459e:	2047      	movs	r0, #71	; 0x47
 80045a0:	f7ff fe70 	bl	8004284 <__NVIC_EnableIRQ>
 80045a4:	e009      	b.n	80045ba <USART_Config+0x2fa>
		}
		else{
				__NOP();
 80045a6:	bf00      	nop
 80045a8:	e007      	b.n	80045ba <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045b8:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80045ba:	b662      	cpsie	i
}
 80045bc:	bf00      	nop
	}

	__enable_irq();
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd90      	pop	{r4, r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40004400 	.word	0x40004400
 80045cc:	40011400 	.word	0x40011400
 80045d0:	40011000 	.word	0x40011000
 80045d4:	00000000 	.word	0x00000000

080045d8 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 80045d8:	b5b0      	push	{r4, r5, r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	79db      	ldrb	r3, [r3, #7]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	f200 8217 	bhi.w	8004a1a <brrCalculus+0x442>
 80045ec:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <brrCalculus+0x1c>)
 80045ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f2:	bf00      	nop
 80045f4:	08004605 	.word	0x08004605
 80045f8:	080046ff 	.word	0x080046ff
 80045fc:	08004819 	.word	0x08004819
 8004600:	08004921 	.word	0x08004921

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8004604:	4980      	ldr	r1, [pc, #512]	; (8004808 <brrCalculus+0x230>)
 8004606:	a37c      	add	r3, pc, #496	; (adr r3, 80047f8 <brrCalculus+0x220>)
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461a:	ee17 0a90 	vmov	r0, s15
 800461e:	f7fb ffab 	bl	8000578 <__aeabi_f2d>
 8004622:	4b79      	ldr	r3, [pc, #484]	; (8004808 <brrCalculus+0x230>)
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	f7fb fffe 	bl	8000628 <__aeabi_dmul>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4975      	ldr	r1, [pc, #468]	; (8004808 <brrCalculus+0x230>)
 8004632:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8004636:	4b74      	ldr	r3, [pc, #464]	; (8004808 <brrCalculus+0x230>)
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	4610      	mov	r0, r2
 800463e:	4619      	mov	r1, r3
 8004640:	f7fc faa2 	bl	8000b88 <__aeabi_d2iz>
 8004644:	4603      	mov	r3, r0
 8004646:	b29a      	uxth	r2, r3
 8004648:	4b70      	ldr	r3, [pc, #448]	; (800480c <brrCalculus+0x234>)
 800464a:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800464c:	4b6e      	ldr	r3, [pc, #440]	; (8004808 <brrCalculus+0x230>)
 800464e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004652:	4b6d      	ldr	r3, [pc, #436]	; (8004808 <brrCalculus+0x230>)
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	4610      	mov	r0, r2
 800465a:	4619      	mov	r1, r3
 800465c:	f7fc fa94 	bl	8000b88 <__aeabi_d2iz>
 8004660:	4603      	mov	r3, r0
 8004662:	4618      	mov	r0, r3
 8004664:	f7fb ff76 	bl	8000554 <__aeabi_i2d>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4620      	mov	r0, r4
 800466e:	4629      	mov	r1, r5
 8004670:	f7fb fe22 	bl	80002b8 <__aeabi_dsub>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4610      	mov	r0, r2
 800467a:	4619      	mov	r1, r3
 800467c:	f7fc faac 	bl	8000bd8 <__aeabi_d2f>
 8004680:	4603      	mov	r3, r0
 8004682:	4a63      	ldr	r2, [pc, #396]	; (8004810 <brrCalculus+0x238>)
 8004684:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004686:	4b62      	ldr	r3, [pc, #392]	; (8004810 <brrCalculus+0x238>)
 8004688:	edd3 7a00 	vldr	s15, [r3]
 800468c:	2004      	movs	r0, #4
 800468e:	eeb0 0a67 	vmov.f32	s0, s15
 8004692:	f000 fa6d 	bl	8004b70 <roundToNDecimals>
 8004696:	eef0 7a40 	vmov.f32	s15, s0
 800469a:	4b5d      	ldr	r3, [pc, #372]	; (8004810 <brrCalculus+0x238>)
 800469c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80046a0:	4b5b      	ldr	r3, [pc, #364]	; (8004810 <brrCalculus+0x238>)
 80046a2:	edd3 7a00 	vldr	s15, [r3]
 80046a6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80046aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046ae:	4b58      	ldr	r3, [pc, #352]	; (8004810 <brrCalculus+0x238>)
 80046b0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80046b4:	4b56      	ldr	r3, [pc, #344]	; (8004810 <brrCalculus+0x238>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fb ff5d 	bl	8000578 <__aeabi_f2d>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	ec43 2b10 	vmov	d0, r2, r3
 80046c6:	f003 ff05 	bl	80084d4 <round>
 80046ca:	ec53 2b10 	vmov	r2, r3, d0
 80046ce:	4610      	mov	r0, r2
 80046d0:	4619      	mov	r1, r3
 80046d2:	f7fc fa81 	bl	8000bd8 <__aeabi_d2f>
 80046d6:	4603      	mov	r3, r0
 80046d8:	4a4d      	ldr	r2, [pc, #308]	; (8004810 <brrCalculus+0x238>)
 80046da:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80046dc:	4b4b      	ldr	r3, [pc, #300]	; (800480c <brrCalculus+0x234>)
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	4b4a      	ldr	r3, [pc, #296]	; (8004810 <brrCalculus+0x238>)
 80046e6:	edd3 7a00 	vldr	s15, [r3]
 80046ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ee:	ee17 3a90 	vmov	r3, s15
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	4313      	orrs	r3, r2
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	4b46      	ldr	r3, [pc, #280]	; (8004814 <brrCalculus+0x23c>)
 80046fa:	801a      	strh	r2, [r3, #0]


		break;
 80046fc:	e18f      	b.n	8004a1e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 80046fe:	4942      	ldr	r1, [pc, #264]	; (8004808 <brrCalculus+0x230>)
 8004700:	a33f      	add	r3, pc, #252	; (adr r3, 8004800 <brrCalculus+0x228>)
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004714:	ee17 0a90 	vmov	r0, s15
 8004718:	f7fb ff2e 	bl	8000578 <__aeabi_f2d>
 800471c:	4b3a      	ldr	r3, [pc, #232]	; (8004808 <brrCalculus+0x230>)
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f7fb ff81 	bl	8000628 <__aeabi_dmul>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4937      	ldr	r1, [pc, #220]	; (8004808 <brrCalculus+0x230>)
 800472c:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8004730:	4b35      	ldr	r3, [pc, #212]	; (8004808 <brrCalculus+0x230>)
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	4610      	mov	r0, r2
 8004738:	4619      	mov	r1, r3
 800473a:	f7fc fa25 	bl	8000b88 <__aeabi_d2iz>
 800473e:	4603      	mov	r3, r0
 8004740:	b29a      	uxth	r2, r3
 8004742:	4b32      	ldr	r3, [pc, #200]	; (800480c <brrCalculus+0x234>)
 8004744:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004746:	4b30      	ldr	r3, [pc, #192]	; (8004808 <brrCalculus+0x230>)
 8004748:	e9d3 4500 	ldrd	r4, r5, [r3]
 800474c:	4b2e      	ldr	r3, [pc, #184]	; (8004808 <brrCalculus+0x230>)
 800474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004752:	4610      	mov	r0, r2
 8004754:	4619      	mov	r1, r3
 8004756:	f7fc fa17 	bl	8000b88 <__aeabi_d2iz>
 800475a:	4603      	mov	r3, r0
 800475c:	4618      	mov	r0, r3
 800475e:	f7fb fef9 	bl	8000554 <__aeabi_i2d>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4620      	mov	r0, r4
 8004768:	4629      	mov	r1, r5
 800476a:	f7fb fda5 	bl	80002b8 <__aeabi_dsub>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4610      	mov	r0, r2
 8004774:	4619      	mov	r1, r3
 8004776:	f7fc fa2f 	bl	8000bd8 <__aeabi_d2f>
 800477a:	4603      	mov	r3, r0
 800477c:	4a24      	ldr	r2, [pc, #144]	; (8004810 <brrCalculus+0x238>)
 800477e:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004780:	4b23      	ldr	r3, [pc, #140]	; (8004810 <brrCalculus+0x238>)
 8004782:	edd3 7a00 	vldr	s15, [r3]
 8004786:	2004      	movs	r0, #4
 8004788:	eeb0 0a67 	vmov.f32	s0, s15
 800478c:	f000 f9f0 	bl	8004b70 <roundToNDecimals>
 8004790:	eef0 7a40 	vmov.f32	s15, s0
 8004794:	4b1e      	ldr	r3, [pc, #120]	; (8004810 <brrCalculus+0x238>)
 8004796:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800479a:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <brrCalculus+0x238>)
 800479c:	edd3 7a00 	vldr	s15, [r3]
 80047a0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80047a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047a8:	4b19      	ldr	r3, [pc, #100]	; (8004810 <brrCalculus+0x238>)
 80047aa:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80047ae:	4b18      	ldr	r3, [pc, #96]	; (8004810 <brrCalculus+0x238>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fb fee0 	bl	8000578 <__aeabi_f2d>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	ec43 2b10 	vmov	d0, r2, r3
 80047c0:	f003 fe88 	bl	80084d4 <round>
 80047c4:	ec53 2b10 	vmov	r2, r3, d0
 80047c8:	4610      	mov	r0, r2
 80047ca:	4619      	mov	r1, r3
 80047cc:	f7fc fa04 	bl	8000bd8 <__aeabi_d2f>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4a0f      	ldr	r2, [pc, #60]	; (8004810 <brrCalculus+0x238>)
 80047d4:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80047d6:	4b0d      	ldr	r3, [pc, #52]	; (800480c <brrCalculus+0x234>)
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	b29a      	uxth	r2, r3
 80047de:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <brrCalculus+0x238>)
 80047e0:	edd3 7a00 	vldr	s15, [r3]
 80047e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e8:	ee17 3a90 	vmov	r3, s15
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	4313      	orrs	r3, r2
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	4b08      	ldr	r3, [pc, #32]	; (8004814 <brrCalculus+0x23c>)
 80047f4:	801a      	strh	r2, [r3, #0]


		break;
 80047f6:	e112      	b.n	8004a1e <brrCalculus+0x446>
 80047f8:	b4e81b4f 	.word	0xb4e81b4f
 80047fc:	3edb4e81 	.word	0x3edb4e81
 8004800:	b4e81b4f 	.word	0xb4e81b4f
 8004804:	3ecb4e81 	.word	0x3ecb4e81
 8004808:	20011a88 	.word	0x20011a88
 800480c:	20011a7e 	.word	0x20011a7e
 8004810:	20011a80 	.word	0x20011a80
 8004814:	20011a7c 	.word	0x20011a7c
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8004818:	4989      	ldr	r1, [pc, #548]	; (8004a40 <brrCalculus+0x468>)
 800481a:	a385      	add	r3, pc, #532	; (adr r3, 8004a30 <brrCalculus+0x458>)
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482e:	ee17 0a90 	vmov	r0, s15
 8004832:	f7fb fea1 	bl	8000578 <__aeabi_f2d>
 8004836:	4b82      	ldr	r3, [pc, #520]	; (8004a40 <brrCalculus+0x468>)
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	f7fb fef4 	bl	8000628 <__aeabi_dmul>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	497e      	ldr	r1, [pc, #504]	; (8004a40 <brrCalculus+0x468>)
 8004846:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800484a:	4b7d      	ldr	r3, [pc, #500]	; (8004a40 <brrCalculus+0x468>)
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	4610      	mov	r0, r2
 8004852:	4619      	mov	r1, r3
 8004854:	f7fc f998 	bl	8000b88 <__aeabi_d2iz>
 8004858:	4603      	mov	r3, r0
 800485a:	b29a      	uxth	r2, r3
 800485c:	4b79      	ldr	r3, [pc, #484]	; (8004a44 <brrCalculus+0x46c>)
 800485e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004860:	4b77      	ldr	r3, [pc, #476]	; (8004a40 <brrCalculus+0x468>)
 8004862:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004866:	4b76      	ldr	r3, [pc, #472]	; (8004a40 <brrCalculus+0x468>)
 8004868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486c:	4610      	mov	r0, r2
 800486e:	4619      	mov	r1, r3
 8004870:	f7fc f98a 	bl	8000b88 <__aeabi_d2iz>
 8004874:	4603      	mov	r3, r0
 8004876:	4618      	mov	r0, r3
 8004878:	f7fb fe6c 	bl	8000554 <__aeabi_i2d>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4620      	mov	r0, r4
 8004882:	4629      	mov	r1, r5
 8004884:	f7fb fd18 	bl	80002b8 <__aeabi_dsub>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4610      	mov	r0, r2
 800488e:	4619      	mov	r1, r3
 8004890:	f7fc f9a2 	bl	8000bd8 <__aeabi_d2f>
 8004894:	4603      	mov	r3, r0
 8004896:	4a6c      	ldr	r2, [pc, #432]	; (8004a48 <brrCalculus+0x470>)
 8004898:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800489a:	4b6b      	ldr	r3, [pc, #428]	; (8004a48 <brrCalculus+0x470>)
 800489c:	edd3 7a00 	vldr	s15, [r3]
 80048a0:	2004      	movs	r0, #4
 80048a2:	eeb0 0a67 	vmov.f32	s0, s15
 80048a6:	f000 f963 	bl	8004b70 <roundToNDecimals>
 80048aa:	eef0 7a40 	vmov.f32	s15, s0
 80048ae:	4b66      	ldr	r3, [pc, #408]	; (8004a48 <brrCalculus+0x470>)
 80048b0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80048b4:	4b64      	ldr	r3, [pc, #400]	; (8004a48 <brrCalculus+0x470>)
 80048b6:	edd3 7a00 	vldr	s15, [r3]
 80048ba:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80048be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048c2:	4b61      	ldr	r3, [pc, #388]	; (8004a48 <brrCalculus+0x470>)
 80048c4:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 80048c8:	4b5f      	ldr	r3, [pc, #380]	; (8004a48 <brrCalculus+0x470>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fb fe53 	bl	8000578 <__aeabi_f2d>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	ec43 2b10 	vmov	d0, r2, r3
 80048da:	f003 fdfb 	bl	80084d4 <round>
 80048de:	ec51 0b10 	vmov	r0, r1, d0
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	4b59      	ldr	r3, [pc, #356]	; (8004a4c <brrCalculus+0x474>)
 80048e8:	f7fb fce8 	bl	80002bc <__adddf3>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	f7fc f970 	bl	8000bd8 <__aeabi_d2f>
 80048f8:	4603      	mov	r3, r0
 80048fa:	4a53      	ldr	r2, [pc, #332]	; (8004a48 <brrCalculus+0x470>)
 80048fc:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80048fe:	4b51      	ldr	r3, [pc, #324]	; (8004a44 <brrCalculus+0x46c>)
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	b29a      	uxth	r2, r3
 8004906:	4b50      	ldr	r3, [pc, #320]	; (8004a48 <brrCalculus+0x470>)
 8004908:	edd3 7a00 	vldr	s15, [r3]
 800490c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004910:	ee17 3a90 	vmov	r3, s15
 8004914:	b29b      	uxth	r3, r3
 8004916:	4313      	orrs	r3, r2
 8004918:	b29a      	uxth	r2, r3
 800491a:	4b4d      	ldr	r3, [pc, #308]	; (8004a50 <brrCalculus+0x478>)
 800491c:	801a      	strh	r2, [r3, #0]


		break;
 800491e:	e07e      	b.n	8004a1e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8004920:	4947      	ldr	r1, [pc, #284]	; (8004a40 <brrCalculus+0x468>)
 8004922:	a345      	add	r3, pc, #276	; (adr r3, 8004a38 <brrCalculus+0x460>)
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004936:	ee17 0a90 	vmov	r0, s15
 800493a:	f7fb fe1d 	bl	8000578 <__aeabi_f2d>
 800493e:	4b40      	ldr	r3, [pc, #256]	; (8004a40 <brrCalculus+0x468>)
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f7fb fe70 	bl	8000628 <__aeabi_dmul>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	493c      	ldr	r1, [pc, #240]	; (8004a40 <brrCalculus+0x468>)
 800494e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8004952:	4b3b      	ldr	r3, [pc, #236]	; (8004a40 <brrCalculus+0x468>)
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	4610      	mov	r0, r2
 800495a:	4619      	mov	r1, r3
 800495c:	f7fc f914 	bl	8000b88 <__aeabi_d2iz>
 8004960:	4603      	mov	r3, r0
 8004962:	b29a      	uxth	r2, r3
 8004964:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <brrCalculus+0x46c>)
 8004966:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004968:	4b35      	ldr	r3, [pc, #212]	; (8004a40 <brrCalculus+0x468>)
 800496a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800496e:	4b34      	ldr	r3, [pc, #208]	; (8004a40 <brrCalculus+0x468>)
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	4610      	mov	r0, r2
 8004976:	4619      	mov	r1, r3
 8004978:	f7fc f906 	bl	8000b88 <__aeabi_d2iz>
 800497c:	4603      	mov	r3, r0
 800497e:	4618      	mov	r0, r3
 8004980:	f7fb fde8 	bl	8000554 <__aeabi_i2d>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4620      	mov	r0, r4
 800498a:	4629      	mov	r1, r5
 800498c:	f7fb fc94 	bl	80002b8 <__aeabi_dsub>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4610      	mov	r0, r2
 8004996:	4619      	mov	r1, r3
 8004998:	f7fc f91e 	bl	8000bd8 <__aeabi_d2f>
 800499c:	4603      	mov	r3, r0
 800499e:	4a2a      	ldr	r2, [pc, #168]	; (8004a48 <brrCalculus+0x470>)
 80049a0:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80049a2:	4b29      	ldr	r3, [pc, #164]	; (8004a48 <brrCalculus+0x470>)
 80049a4:	edd3 7a00 	vldr	s15, [r3]
 80049a8:	2004      	movs	r0, #4
 80049aa:	eeb0 0a67 	vmov.f32	s0, s15
 80049ae:	f000 f8df 	bl	8004b70 <roundToNDecimals>
 80049b2:	eef0 7a40 	vmov.f32	s15, s0
 80049b6:	4b24      	ldr	r3, [pc, #144]	; (8004a48 <brrCalculus+0x470>)
 80049b8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80049bc:	4b22      	ldr	r3, [pc, #136]	; (8004a48 <brrCalculus+0x470>)
 80049be:	edd3 7a00 	vldr	s15, [r3]
 80049c2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80049c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049ca:	4b1f      	ldr	r3, [pc, #124]	; (8004a48 <brrCalculus+0x470>)
 80049cc:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80049d0:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <brrCalculus+0x470>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fb fdcf 	bl	8000578 <__aeabi_f2d>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	ec43 2b10 	vmov	d0, r2, r3
 80049e2:	f003 fd77 	bl	80084d4 <round>
 80049e6:	ec53 2b10 	vmov	r2, r3, d0
 80049ea:	4610      	mov	r0, r2
 80049ec:	4619      	mov	r1, r3
 80049ee:	f7fc f8f3 	bl	8000bd8 <__aeabi_d2f>
 80049f2:	4603      	mov	r3, r0
 80049f4:	4a14      	ldr	r2, [pc, #80]	; (8004a48 <brrCalculus+0x470>)
 80049f6:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80049f8:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <brrCalculus+0x46c>)
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <brrCalculus+0x470>)
 8004a02:	edd3 7a00 	vldr	s15, [r3]
 8004a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a0a:	ee17 3a90 	vmov	r3, s15
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	4313      	orrs	r3, r2
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <brrCalculus+0x478>)
 8004a16:	801a      	strh	r2, [r3, #0]


		break;
 8004a18:	e001      	b.n	8004a1e <brrCalculus+0x446>
	}
	default:{

		__NOP();
 8004a1a:	bf00      	nop
		break;
 8004a1c:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <brrCalculus+0x478>)
 8004a20:	881b      	ldrh	r3, [r3, #0]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bdb0      	pop	{r4, r5, r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	f3af 8000 	nop.w
 8004a30:	789abcdf 	.word	0x789abcdf
 8004a34:	3ec23456 	.word	0x3ec23456
 8004a38:	789abcdf 	.word	0x789abcdf
 8004a3c:	3ea23456 	.word	0x3ea23456
 8004a40:	20011a88 	.word	0x20011a88
 8004a44:	20011a7e 	.word	0x20011a7e
 8004a48:	20011a80 	.word	0x20011a80
 8004a4c:	3ff00000 	.word	0x3ff00000
 8004a50:	20011a7c 	.word	0x20011a7c

08004a54 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8004a5e:	e000      	b.n	8004a62 <writeChar+0xe>
		__NOP();
 8004a60:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f7      	beq.n	8004a60 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	605a      	str	r2, [r3, #4]

}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 8004a8e:	e008      	b.n	8004aa2 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	4619      	mov	r1, r3
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff ffdc 	bl	8004a54 <writeChar>
		msgToSend ++ ;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f2      	bne.n	8004a90 <writeMsg+0xc>
	}
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
	__NOP();
 8004ab8:	bf00      	nop
}
 8004aba:	bf00      	nop
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
	__NOP();
 8004ac8:	bf00      	nop
}
 8004aca:	bf00      	nop
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
	return auxRxData;
 8004ad8:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <getRxData+0x14>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20011a90 	.word	0x20011a90

08004aec <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8004af0:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <USART2_IRQHandler+0x24>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d006      	beq.n	8004b0a <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 8004afc:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <USART2_IRQHandler+0x24>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <USART2_IRQHandler+0x28>)
 8004b04:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8004b06:	f7fc fac9 	bl	800109c <usart2Rx_Callback>
	}

}
 8004b0a:	bf00      	nop
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40004400 	.word	0x40004400
 8004b14:	20011a90 	.word	0x20011a90

08004b18 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 8004b1c:	4b07      	ldr	r3, [pc, #28]	; (8004b3c <USART1_IRQHandler+0x24>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d006      	beq.n	8004b36 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8004b28:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <USART1_IRQHandler+0x24>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <USART1_IRQHandler+0x28>)
 8004b30:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8004b32:	f7ff ffbf 	bl	8004ab4 <usart1Rx_Callback>
	}
}
 8004b36:	bf00      	nop
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40011000 	.word	0x40011000
 8004b40:	20011a90 	.word	0x20011a90

08004b44 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8004b48:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <USART6_IRQHandler+0x24>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d006      	beq.n	8004b62 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8004b54:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <USART6_IRQHandler+0x24>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	4b04      	ldr	r3, [pc, #16]	; (8004b6c <USART6_IRQHandler+0x28>)
 8004b5c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8004b5e:	f7ff ffb1 	bl	8004ac4 <usart6Rx_Callback>
	}

}
 8004b62:	bf00      	nop
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40011400 	.word	0x40011400
 8004b6c:	20011a90 	.word	0x20011a90

08004b70 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	ed87 0a01 	vstr	s0, [r7, #4]
 8004b7a:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 8004b7c:	6838      	ldr	r0, [r7, #0]
 8004b7e:	f7fb fce9 	bl	8000554 <__aeabi_i2d>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	ec43 2b11 	vmov	d1, r2, r3
 8004b8a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8004c08 <roundToNDecimals+0x98>
 8004b8e:	f003 fce7 	bl	8008560 <pow>
 8004b92:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fb fcee 	bl	8000578 <__aeabi_f2d>
 8004b9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ba0:	f7fb fd42 	bl	8000628 <__aeabi_dmul>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4619      	mov	r1, r3
 8004bac:	f7fc f814 	bl	8000bd8 <__aeabi_d2f>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	607b      	str	r3, [r7, #4]

    number = round(number);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7fb fcdf 	bl	8000578 <__aeabi_f2d>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	ec43 2b10 	vmov	d0, r2, r3
 8004bc2:	f003 fc87 	bl	80084d4 <round>
 8004bc6:	ec53 2b10 	vmov	r2, r3, d0
 8004bca:	4610      	mov	r0, r2
 8004bcc:	4619      	mov	r1, r3
 8004bce:	f7fc f803 	bl	8000bd8 <__aeabi_d2f>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	607b      	str	r3, [r7, #4]

    number /= factor;
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fb fcce 	bl	8000578 <__aeabi_f2d>
 8004bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004be0:	f7fb fe4c 	bl	800087c <__aeabi_ddiv>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4610      	mov	r0, r2
 8004bea:	4619      	mov	r1, r3
 8004bec:	f7fb fff4 	bl	8000bd8 <__aeabi_d2f>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	607b      	str	r3, [r7, #4]

    return number;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	ee07 3a90 	vmov	s15, r3
}
 8004bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	f3af 8000 	nop.w
 8004c08:	00000000 	.word	0x00000000
 8004c0c:	40240000 	.word	0x40240000

08004c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c14:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <SystemInit+0x20>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	4a05      	ldr	r2, [pc, #20]	; (8004c30 <SystemInit+0x20>)
 8004c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	2302      	movs	r3, #2
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	2300      	movs	r3, #0
 8004c48:	60bb      	str	r3, [r7, #8]
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004c4e:	4b34      	ldr	r3, [pc, #208]	; (8004d20 <SystemCoreClockUpdate+0xec>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 030c 	and.w	r3, r3, #12
 8004c56:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d011      	beq.n	8004c82 <SystemCoreClockUpdate+0x4e>
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d844      	bhi.n	8004cee <SystemCoreClockUpdate+0xba>
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <SystemCoreClockUpdate+0x3e>
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d004      	beq.n	8004c7a <SystemCoreClockUpdate+0x46>
 8004c70:	e03d      	b.n	8004cee <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004c72:	4b2c      	ldr	r3, [pc, #176]	; (8004d24 <SystemCoreClockUpdate+0xf0>)
 8004c74:	4a2c      	ldr	r2, [pc, #176]	; (8004d28 <SystemCoreClockUpdate+0xf4>)
 8004c76:	601a      	str	r2, [r3, #0]
      break;
 8004c78:	e03d      	b.n	8004cf6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004c7a:	4b2a      	ldr	r3, [pc, #168]	; (8004d24 <SystemCoreClockUpdate+0xf0>)
 8004c7c:	4a2b      	ldr	r2, [pc, #172]	; (8004d2c <SystemCoreClockUpdate+0xf8>)
 8004c7e:	601a      	str	r2, [r3, #0]
      break;
 8004c80:	e039      	b.n	8004cf6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004c82:	4b27      	ldr	r3, [pc, #156]	; (8004d20 <SystemCoreClockUpdate+0xec>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	0d9b      	lsrs	r3, r3, #22
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c8e:	4b24      	ldr	r3, [pc, #144]	; (8004d20 <SystemCoreClockUpdate+0xec>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c96:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00c      	beq.n	8004cb8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004c9e:	4a23      	ldr	r2, [pc, #140]	; (8004d2c <SystemCoreClockUpdate+0xf8>)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca6:	4a1e      	ldr	r2, [pc, #120]	; (8004d20 <SystemCoreClockUpdate+0xec>)
 8004ca8:	6852      	ldr	r2, [r2, #4]
 8004caa:	0992      	lsrs	r2, r2, #6
 8004cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cb0:	fb02 f303 	mul.w	r3, r2, r3
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	e00b      	b.n	8004cd0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004cb8:	4a1b      	ldr	r2, [pc, #108]	; (8004d28 <SystemCoreClockUpdate+0xf4>)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc0:	4a17      	ldr	r2, [pc, #92]	; (8004d20 <SystemCoreClockUpdate+0xec>)
 8004cc2:	6852      	ldr	r2, [r2, #4]
 8004cc4:	0992      	lsrs	r2, r2, #6
 8004cc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cca:	fb02 f303 	mul.w	r3, r2, r3
 8004cce:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004cd0:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <SystemCoreClockUpdate+0xec>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	0c1b      	lsrs	r3, r3, #16
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	3301      	adds	r3, #1
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	4a0e      	ldr	r2, [pc, #56]	; (8004d24 <SystemCoreClockUpdate+0xf0>)
 8004cea:	6013      	str	r3, [r2, #0]
      break;
 8004cec:	e003      	b.n	8004cf6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8004cee:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <SystemCoreClockUpdate+0xf0>)
 8004cf0:	4a0d      	ldr	r2, [pc, #52]	; (8004d28 <SystemCoreClockUpdate+0xf4>)
 8004cf2:	601a      	str	r2, [r3, #0]
      break;
 8004cf4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <SystemCoreClockUpdate+0xec>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	091b      	lsrs	r3, r3, #4
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	4a0b      	ldr	r2, [pc, #44]	; (8004d30 <SystemCoreClockUpdate+0xfc>)
 8004d02:	5cd3      	ldrb	r3, [r2, r3]
 8004d04:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004d06:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <SystemCoreClockUpdate+0xf0>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d10:	4a04      	ldr	r2, [pc, #16]	; (8004d24 <SystemCoreClockUpdate+0xf0>)
 8004d12:	6013      	str	r3, [r2, #0]
}
 8004d14:	bf00      	nop
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	40023800 	.word	0x40023800
 8004d24:	20000008 	.word	0x20000008
 8004d28:	00f42400 	.word	0x00f42400
 8004d2c:	017d7840 	.word	0x017d7840
 8004d30:	080095cc 	.word	0x080095cc

08004d34 <__errno>:
 8004d34:	4b01      	ldr	r3, [pc, #4]	; (8004d3c <__errno+0x8>)
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	2000000c 	.word	0x2000000c

08004d40 <__libc_init_array>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	4d0d      	ldr	r5, [pc, #52]	; (8004d78 <__libc_init_array+0x38>)
 8004d44:	4c0d      	ldr	r4, [pc, #52]	; (8004d7c <__libc_init_array+0x3c>)
 8004d46:	1b64      	subs	r4, r4, r5
 8004d48:	10a4      	asrs	r4, r4, #2
 8004d4a:	2600      	movs	r6, #0
 8004d4c:	42a6      	cmp	r6, r4
 8004d4e:	d109      	bne.n	8004d64 <__libc_init_array+0x24>
 8004d50:	4d0b      	ldr	r5, [pc, #44]	; (8004d80 <__libc_init_array+0x40>)
 8004d52:	4c0c      	ldr	r4, [pc, #48]	; (8004d84 <__libc_init_array+0x44>)
 8004d54:	f004 fb2c 	bl	80093b0 <_init>
 8004d58:	1b64      	subs	r4, r4, r5
 8004d5a:	10a4      	asrs	r4, r4, #2
 8004d5c:	2600      	movs	r6, #0
 8004d5e:	42a6      	cmp	r6, r4
 8004d60:	d105      	bne.n	8004d6e <__libc_init_array+0x2e>
 8004d62:	bd70      	pop	{r4, r5, r6, pc}
 8004d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d68:	4798      	blx	r3
 8004d6a:	3601      	adds	r6, #1
 8004d6c:	e7ee      	b.n	8004d4c <__libc_init_array+0xc>
 8004d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d72:	4798      	blx	r3
 8004d74:	3601      	adds	r6, #1
 8004d76:	e7f2      	b.n	8004d5e <__libc_init_array+0x1e>
 8004d78:	08009a08 	.word	0x08009a08
 8004d7c:	08009a08 	.word	0x08009a08
 8004d80:	08009a08 	.word	0x08009a08
 8004d84:	08009a0c 	.word	0x08009a0c

08004d88 <malloc>:
 8004d88:	4b02      	ldr	r3, [pc, #8]	; (8004d94 <malloc+0xc>)
 8004d8a:	4601      	mov	r1, r0
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	f000 b877 	b.w	8004e80 <_malloc_r>
 8004d92:	bf00      	nop
 8004d94:	2000000c 	.word	0x2000000c

08004d98 <memset>:
 8004d98:	4402      	add	r2, r0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d100      	bne.n	8004da2 <memset+0xa>
 8004da0:	4770      	bx	lr
 8004da2:	f803 1b01 	strb.w	r1, [r3], #1
 8004da6:	e7f9      	b.n	8004d9c <memset+0x4>

08004da8 <_free_r>:
 8004da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004daa:	2900      	cmp	r1, #0
 8004dac:	d044      	beq.n	8004e38 <_free_r+0x90>
 8004dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004db2:	9001      	str	r0, [sp, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f1a1 0404 	sub.w	r4, r1, #4
 8004dba:	bfb8      	it	lt
 8004dbc:	18e4      	addlt	r4, r4, r3
 8004dbe:	f001 fca1 	bl	8006704 <__malloc_lock>
 8004dc2:	4a1e      	ldr	r2, [pc, #120]	; (8004e3c <_free_r+0x94>)
 8004dc4:	9801      	ldr	r0, [sp, #4]
 8004dc6:	6813      	ldr	r3, [r2, #0]
 8004dc8:	b933      	cbnz	r3, 8004dd8 <_free_r+0x30>
 8004dca:	6063      	str	r3, [r4, #4]
 8004dcc:	6014      	str	r4, [r2, #0]
 8004dce:	b003      	add	sp, #12
 8004dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dd4:	f001 bc9c 	b.w	8006710 <__malloc_unlock>
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	d908      	bls.n	8004dee <_free_r+0x46>
 8004ddc:	6825      	ldr	r5, [r4, #0]
 8004dde:	1961      	adds	r1, r4, r5
 8004de0:	428b      	cmp	r3, r1
 8004de2:	bf01      	itttt	eq
 8004de4:	6819      	ldreq	r1, [r3, #0]
 8004de6:	685b      	ldreq	r3, [r3, #4]
 8004de8:	1949      	addeq	r1, r1, r5
 8004dea:	6021      	streq	r1, [r4, #0]
 8004dec:	e7ed      	b.n	8004dca <_free_r+0x22>
 8004dee:	461a      	mov	r2, r3
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	b10b      	cbz	r3, 8004df8 <_free_r+0x50>
 8004df4:	42a3      	cmp	r3, r4
 8004df6:	d9fa      	bls.n	8004dee <_free_r+0x46>
 8004df8:	6811      	ldr	r1, [r2, #0]
 8004dfa:	1855      	adds	r5, r2, r1
 8004dfc:	42a5      	cmp	r5, r4
 8004dfe:	d10b      	bne.n	8004e18 <_free_r+0x70>
 8004e00:	6824      	ldr	r4, [r4, #0]
 8004e02:	4421      	add	r1, r4
 8004e04:	1854      	adds	r4, r2, r1
 8004e06:	42a3      	cmp	r3, r4
 8004e08:	6011      	str	r1, [r2, #0]
 8004e0a:	d1e0      	bne.n	8004dce <_free_r+0x26>
 8004e0c:	681c      	ldr	r4, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	6053      	str	r3, [r2, #4]
 8004e12:	4421      	add	r1, r4
 8004e14:	6011      	str	r1, [r2, #0]
 8004e16:	e7da      	b.n	8004dce <_free_r+0x26>
 8004e18:	d902      	bls.n	8004e20 <_free_r+0x78>
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	6003      	str	r3, [r0, #0]
 8004e1e:	e7d6      	b.n	8004dce <_free_r+0x26>
 8004e20:	6825      	ldr	r5, [r4, #0]
 8004e22:	1961      	adds	r1, r4, r5
 8004e24:	428b      	cmp	r3, r1
 8004e26:	bf04      	itt	eq
 8004e28:	6819      	ldreq	r1, [r3, #0]
 8004e2a:	685b      	ldreq	r3, [r3, #4]
 8004e2c:	6063      	str	r3, [r4, #4]
 8004e2e:	bf04      	itt	eq
 8004e30:	1949      	addeq	r1, r1, r5
 8004e32:	6021      	streq	r1, [r4, #0]
 8004e34:	6054      	str	r4, [r2, #4]
 8004e36:	e7ca      	b.n	8004dce <_free_r+0x26>
 8004e38:	b003      	add	sp, #12
 8004e3a:	bd30      	pop	{r4, r5, pc}
 8004e3c:	20011a94 	.word	0x20011a94

08004e40 <sbrk_aligned>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	4e0e      	ldr	r6, [pc, #56]	; (8004e7c <sbrk_aligned+0x3c>)
 8004e44:	460c      	mov	r4, r1
 8004e46:	6831      	ldr	r1, [r6, #0]
 8004e48:	4605      	mov	r5, r0
 8004e4a:	b911      	cbnz	r1, 8004e52 <sbrk_aligned+0x12>
 8004e4c:	f000 fcf6 	bl	800583c <_sbrk_r>
 8004e50:	6030      	str	r0, [r6, #0]
 8004e52:	4621      	mov	r1, r4
 8004e54:	4628      	mov	r0, r5
 8004e56:	f000 fcf1 	bl	800583c <_sbrk_r>
 8004e5a:	1c43      	adds	r3, r0, #1
 8004e5c:	d00a      	beq.n	8004e74 <sbrk_aligned+0x34>
 8004e5e:	1cc4      	adds	r4, r0, #3
 8004e60:	f024 0403 	bic.w	r4, r4, #3
 8004e64:	42a0      	cmp	r0, r4
 8004e66:	d007      	beq.n	8004e78 <sbrk_aligned+0x38>
 8004e68:	1a21      	subs	r1, r4, r0
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f000 fce6 	bl	800583c <_sbrk_r>
 8004e70:	3001      	adds	r0, #1
 8004e72:	d101      	bne.n	8004e78 <sbrk_aligned+0x38>
 8004e74:	f04f 34ff 	mov.w	r4, #4294967295
 8004e78:	4620      	mov	r0, r4
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}
 8004e7c:	20011a98 	.word	0x20011a98

08004e80 <_malloc_r>:
 8004e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e84:	1ccd      	adds	r5, r1, #3
 8004e86:	f025 0503 	bic.w	r5, r5, #3
 8004e8a:	3508      	adds	r5, #8
 8004e8c:	2d0c      	cmp	r5, #12
 8004e8e:	bf38      	it	cc
 8004e90:	250c      	movcc	r5, #12
 8004e92:	2d00      	cmp	r5, #0
 8004e94:	4607      	mov	r7, r0
 8004e96:	db01      	blt.n	8004e9c <_malloc_r+0x1c>
 8004e98:	42a9      	cmp	r1, r5
 8004e9a:	d905      	bls.n	8004ea8 <_malloc_r+0x28>
 8004e9c:	230c      	movs	r3, #12
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	2600      	movs	r6, #0
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea8:	4e2e      	ldr	r6, [pc, #184]	; (8004f64 <_malloc_r+0xe4>)
 8004eaa:	f001 fc2b 	bl	8006704 <__malloc_lock>
 8004eae:	6833      	ldr	r3, [r6, #0]
 8004eb0:	461c      	mov	r4, r3
 8004eb2:	bb34      	cbnz	r4, 8004f02 <_malloc_r+0x82>
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	f7ff ffc2 	bl	8004e40 <sbrk_aligned>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	d14d      	bne.n	8004f5e <_malloc_r+0xde>
 8004ec2:	6834      	ldr	r4, [r6, #0]
 8004ec4:	4626      	mov	r6, r4
 8004ec6:	2e00      	cmp	r6, #0
 8004ec8:	d140      	bne.n	8004f4c <_malloc_r+0xcc>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	4631      	mov	r1, r6
 8004ece:	4638      	mov	r0, r7
 8004ed0:	eb04 0803 	add.w	r8, r4, r3
 8004ed4:	f000 fcb2 	bl	800583c <_sbrk_r>
 8004ed8:	4580      	cmp	r8, r0
 8004eda:	d13a      	bne.n	8004f52 <_malloc_r+0xd2>
 8004edc:	6821      	ldr	r1, [r4, #0]
 8004ede:	3503      	adds	r5, #3
 8004ee0:	1a6d      	subs	r5, r5, r1
 8004ee2:	f025 0503 	bic.w	r5, r5, #3
 8004ee6:	3508      	adds	r5, #8
 8004ee8:	2d0c      	cmp	r5, #12
 8004eea:	bf38      	it	cc
 8004eec:	250c      	movcc	r5, #12
 8004eee:	4629      	mov	r1, r5
 8004ef0:	4638      	mov	r0, r7
 8004ef2:	f7ff ffa5 	bl	8004e40 <sbrk_aligned>
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	d02b      	beq.n	8004f52 <_malloc_r+0xd2>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	442b      	add	r3, r5
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	e00e      	b.n	8004f20 <_malloc_r+0xa0>
 8004f02:	6822      	ldr	r2, [r4, #0]
 8004f04:	1b52      	subs	r2, r2, r5
 8004f06:	d41e      	bmi.n	8004f46 <_malloc_r+0xc6>
 8004f08:	2a0b      	cmp	r2, #11
 8004f0a:	d916      	bls.n	8004f3a <_malloc_r+0xba>
 8004f0c:	1961      	adds	r1, r4, r5
 8004f0e:	42a3      	cmp	r3, r4
 8004f10:	6025      	str	r5, [r4, #0]
 8004f12:	bf18      	it	ne
 8004f14:	6059      	strne	r1, [r3, #4]
 8004f16:	6863      	ldr	r3, [r4, #4]
 8004f18:	bf08      	it	eq
 8004f1a:	6031      	streq	r1, [r6, #0]
 8004f1c:	5162      	str	r2, [r4, r5]
 8004f1e:	604b      	str	r3, [r1, #4]
 8004f20:	4638      	mov	r0, r7
 8004f22:	f104 060b 	add.w	r6, r4, #11
 8004f26:	f001 fbf3 	bl	8006710 <__malloc_unlock>
 8004f2a:	f026 0607 	bic.w	r6, r6, #7
 8004f2e:	1d23      	adds	r3, r4, #4
 8004f30:	1af2      	subs	r2, r6, r3
 8004f32:	d0b6      	beq.n	8004ea2 <_malloc_r+0x22>
 8004f34:	1b9b      	subs	r3, r3, r6
 8004f36:	50a3      	str	r3, [r4, r2]
 8004f38:	e7b3      	b.n	8004ea2 <_malloc_r+0x22>
 8004f3a:	6862      	ldr	r2, [r4, #4]
 8004f3c:	42a3      	cmp	r3, r4
 8004f3e:	bf0c      	ite	eq
 8004f40:	6032      	streq	r2, [r6, #0]
 8004f42:	605a      	strne	r2, [r3, #4]
 8004f44:	e7ec      	b.n	8004f20 <_malloc_r+0xa0>
 8004f46:	4623      	mov	r3, r4
 8004f48:	6864      	ldr	r4, [r4, #4]
 8004f4a:	e7b2      	b.n	8004eb2 <_malloc_r+0x32>
 8004f4c:	4634      	mov	r4, r6
 8004f4e:	6876      	ldr	r6, [r6, #4]
 8004f50:	e7b9      	b.n	8004ec6 <_malloc_r+0x46>
 8004f52:	230c      	movs	r3, #12
 8004f54:	603b      	str	r3, [r7, #0]
 8004f56:	4638      	mov	r0, r7
 8004f58:	f001 fbda 	bl	8006710 <__malloc_unlock>
 8004f5c:	e7a1      	b.n	8004ea2 <_malloc_r+0x22>
 8004f5e:	6025      	str	r5, [r4, #0]
 8004f60:	e7de      	b.n	8004f20 <_malloc_r+0xa0>
 8004f62:	bf00      	nop
 8004f64:	20011a94 	.word	0x20011a94

08004f68 <__cvt>:
 8004f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f6c:	ec55 4b10 	vmov	r4, r5, d0
 8004f70:	2d00      	cmp	r5, #0
 8004f72:	460e      	mov	r6, r1
 8004f74:	4619      	mov	r1, r3
 8004f76:	462b      	mov	r3, r5
 8004f78:	bfbb      	ittet	lt
 8004f7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f7e:	461d      	movlt	r5, r3
 8004f80:	2300      	movge	r3, #0
 8004f82:	232d      	movlt	r3, #45	; 0x2d
 8004f84:	700b      	strb	r3, [r1, #0]
 8004f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004f8c:	4691      	mov	r9, r2
 8004f8e:	f023 0820 	bic.w	r8, r3, #32
 8004f92:	bfbc      	itt	lt
 8004f94:	4622      	movlt	r2, r4
 8004f96:	4614      	movlt	r4, r2
 8004f98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f9c:	d005      	beq.n	8004faa <__cvt+0x42>
 8004f9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004fa2:	d100      	bne.n	8004fa6 <__cvt+0x3e>
 8004fa4:	3601      	adds	r6, #1
 8004fa6:	2102      	movs	r1, #2
 8004fa8:	e000      	b.n	8004fac <__cvt+0x44>
 8004faa:	2103      	movs	r1, #3
 8004fac:	ab03      	add	r3, sp, #12
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	ab02      	add	r3, sp, #8
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	ec45 4b10 	vmov	d0, r4, r5
 8004fb8:	4653      	mov	r3, sl
 8004fba:	4632      	mov	r2, r6
 8004fbc:	f000 fd90 	bl	8005ae0 <_dtoa_r>
 8004fc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004fc4:	4607      	mov	r7, r0
 8004fc6:	d102      	bne.n	8004fce <__cvt+0x66>
 8004fc8:	f019 0f01 	tst.w	r9, #1
 8004fcc:	d022      	beq.n	8005014 <__cvt+0xac>
 8004fce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fd2:	eb07 0906 	add.w	r9, r7, r6
 8004fd6:	d110      	bne.n	8004ffa <__cvt+0x92>
 8004fd8:	783b      	ldrb	r3, [r7, #0]
 8004fda:	2b30      	cmp	r3, #48	; 0x30
 8004fdc:	d10a      	bne.n	8004ff4 <__cvt+0x8c>
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	f7fb fd87 	bl	8000af8 <__aeabi_dcmpeq>
 8004fea:	b918      	cbnz	r0, 8004ff4 <__cvt+0x8c>
 8004fec:	f1c6 0601 	rsb	r6, r6, #1
 8004ff0:	f8ca 6000 	str.w	r6, [sl]
 8004ff4:	f8da 3000 	ldr.w	r3, [sl]
 8004ff8:	4499      	add	r9, r3
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	4620      	mov	r0, r4
 8005000:	4629      	mov	r1, r5
 8005002:	f7fb fd79 	bl	8000af8 <__aeabi_dcmpeq>
 8005006:	b108      	cbz	r0, 800500c <__cvt+0xa4>
 8005008:	f8cd 900c 	str.w	r9, [sp, #12]
 800500c:	2230      	movs	r2, #48	; 0x30
 800500e:	9b03      	ldr	r3, [sp, #12]
 8005010:	454b      	cmp	r3, r9
 8005012:	d307      	bcc.n	8005024 <__cvt+0xbc>
 8005014:	9b03      	ldr	r3, [sp, #12]
 8005016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005018:	1bdb      	subs	r3, r3, r7
 800501a:	4638      	mov	r0, r7
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	b004      	add	sp, #16
 8005020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005024:	1c59      	adds	r1, r3, #1
 8005026:	9103      	str	r1, [sp, #12]
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	e7f0      	b.n	800500e <__cvt+0xa6>

0800502c <__exponent>:
 800502c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800502e:	4603      	mov	r3, r0
 8005030:	2900      	cmp	r1, #0
 8005032:	bfb8      	it	lt
 8005034:	4249      	neglt	r1, r1
 8005036:	f803 2b02 	strb.w	r2, [r3], #2
 800503a:	bfb4      	ite	lt
 800503c:	222d      	movlt	r2, #45	; 0x2d
 800503e:	222b      	movge	r2, #43	; 0x2b
 8005040:	2909      	cmp	r1, #9
 8005042:	7042      	strb	r2, [r0, #1]
 8005044:	dd2a      	ble.n	800509c <__exponent+0x70>
 8005046:	f10d 0407 	add.w	r4, sp, #7
 800504a:	46a4      	mov	ip, r4
 800504c:	270a      	movs	r7, #10
 800504e:	46a6      	mov	lr, r4
 8005050:	460a      	mov	r2, r1
 8005052:	fb91 f6f7 	sdiv	r6, r1, r7
 8005056:	fb07 1516 	mls	r5, r7, r6, r1
 800505a:	3530      	adds	r5, #48	; 0x30
 800505c:	2a63      	cmp	r2, #99	; 0x63
 800505e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005062:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005066:	4631      	mov	r1, r6
 8005068:	dcf1      	bgt.n	800504e <__exponent+0x22>
 800506a:	3130      	adds	r1, #48	; 0x30
 800506c:	f1ae 0502 	sub.w	r5, lr, #2
 8005070:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005074:	1c44      	adds	r4, r0, #1
 8005076:	4629      	mov	r1, r5
 8005078:	4561      	cmp	r1, ip
 800507a:	d30a      	bcc.n	8005092 <__exponent+0x66>
 800507c:	f10d 0209 	add.w	r2, sp, #9
 8005080:	eba2 020e 	sub.w	r2, r2, lr
 8005084:	4565      	cmp	r5, ip
 8005086:	bf88      	it	hi
 8005088:	2200      	movhi	r2, #0
 800508a:	4413      	add	r3, r2
 800508c:	1a18      	subs	r0, r3, r0
 800508e:	b003      	add	sp, #12
 8005090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005096:	f804 2f01 	strb.w	r2, [r4, #1]!
 800509a:	e7ed      	b.n	8005078 <__exponent+0x4c>
 800509c:	2330      	movs	r3, #48	; 0x30
 800509e:	3130      	adds	r1, #48	; 0x30
 80050a0:	7083      	strb	r3, [r0, #2]
 80050a2:	70c1      	strb	r1, [r0, #3]
 80050a4:	1d03      	adds	r3, r0, #4
 80050a6:	e7f1      	b.n	800508c <__exponent+0x60>

080050a8 <_printf_float>:
 80050a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ac:	ed2d 8b02 	vpush	{d8}
 80050b0:	b08d      	sub	sp, #52	; 0x34
 80050b2:	460c      	mov	r4, r1
 80050b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80050b8:	4616      	mov	r6, r2
 80050ba:	461f      	mov	r7, r3
 80050bc:	4605      	mov	r5, r0
 80050be:	f001 fafd 	bl	80066bc <_localeconv_r>
 80050c2:	f8d0 a000 	ldr.w	sl, [r0]
 80050c6:	4650      	mov	r0, sl
 80050c8:	f7fb f894 	bl	80001f4 <strlen>
 80050cc:	2300      	movs	r3, #0
 80050ce:	930a      	str	r3, [sp, #40]	; 0x28
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	9305      	str	r3, [sp, #20]
 80050d4:	f8d8 3000 	ldr.w	r3, [r8]
 80050d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80050dc:	3307      	adds	r3, #7
 80050de:	f023 0307 	bic.w	r3, r3, #7
 80050e2:	f103 0208 	add.w	r2, r3, #8
 80050e6:	f8c8 2000 	str.w	r2, [r8]
 80050ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80050f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80050f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80050fa:	9307      	str	r3, [sp, #28]
 80050fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8005100:	ee08 0a10 	vmov	s16, r0
 8005104:	4b9f      	ldr	r3, [pc, #636]	; (8005384 <_printf_float+0x2dc>)
 8005106:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800510a:	f04f 32ff 	mov.w	r2, #4294967295
 800510e:	f7fb fd25 	bl	8000b5c <__aeabi_dcmpun>
 8005112:	bb88      	cbnz	r0, 8005178 <_printf_float+0xd0>
 8005114:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005118:	4b9a      	ldr	r3, [pc, #616]	; (8005384 <_printf_float+0x2dc>)
 800511a:	f04f 32ff 	mov.w	r2, #4294967295
 800511e:	f7fb fcff 	bl	8000b20 <__aeabi_dcmple>
 8005122:	bb48      	cbnz	r0, 8005178 <_printf_float+0xd0>
 8005124:	2200      	movs	r2, #0
 8005126:	2300      	movs	r3, #0
 8005128:	4640      	mov	r0, r8
 800512a:	4649      	mov	r1, r9
 800512c:	f7fb fcee 	bl	8000b0c <__aeabi_dcmplt>
 8005130:	b110      	cbz	r0, 8005138 <_printf_float+0x90>
 8005132:	232d      	movs	r3, #45	; 0x2d
 8005134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005138:	4b93      	ldr	r3, [pc, #588]	; (8005388 <_printf_float+0x2e0>)
 800513a:	4894      	ldr	r0, [pc, #592]	; (800538c <_printf_float+0x2e4>)
 800513c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005140:	bf94      	ite	ls
 8005142:	4698      	movls	r8, r3
 8005144:	4680      	movhi	r8, r0
 8005146:	2303      	movs	r3, #3
 8005148:	6123      	str	r3, [r4, #16]
 800514a:	9b05      	ldr	r3, [sp, #20]
 800514c:	f023 0204 	bic.w	r2, r3, #4
 8005150:	6022      	str	r2, [r4, #0]
 8005152:	f04f 0900 	mov.w	r9, #0
 8005156:	9700      	str	r7, [sp, #0]
 8005158:	4633      	mov	r3, r6
 800515a:	aa0b      	add	r2, sp, #44	; 0x2c
 800515c:	4621      	mov	r1, r4
 800515e:	4628      	mov	r0, r5
 8005160:	f000 f9d8 	bl	8005514 <_printf_common>
 8005164:	3001      	adds	r0, #1
 8005166:	f040 8090 	bne.w	800528a <_printf_float+0x1e2>
 800516a:	f04f 30ff 	mov.w	r0, #4294967295
 800516e:	b00d      	add	sp, #52	; 0x34
 8005170:	ecbd 8b02 	vpop	{d8}
 8005174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005178:	4642      	mov	r2, r8
 800517a:	464b      	mov	r3, r9
 800517c:	4640      	mov	r0, r8
 800517e:	4649      	mov	r1, r9
 8005180:	f7fb fcec 	bl	8000b5c <__aeabi_dcmpun>
 8005184:	b140      	cbz	r0, 8005198 <_printf_float+0xf0>
 8005186:	464b      	mov	r3, r9
 8005188:	2b00      	cmp	r3, #0
 800518a:	bfbc      	itt	lt
 800518c:	232d      	movlt	r3, #45	; 0x2d
 800518e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005192:	487f      	ldr	r0, [pc, #508]	; (8005390 <_printf_float+0x2e8>)
 8005194:	4b7f      	ldr	r3, [pc, #508]	; (8005394 <_printf_float+0x2ec>)
 8005196:	e7d1      	b.n	800513c <_printf_float+0x94>
 8005198:	6863      	ldr	r3, [r4, #4]
 800519a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800519e:	9206      	str	r2, [sp, #24]
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	d13f      	bne.n	8005224 <_printf_float+0x17c>
 80051a4:	2306      	movs	r3, #6
 80051a6:	6063      	str	r3, [r4, #4]
 80051a8:	9b05      	ldr	r3, [sp, #20]
 80051aa:	6861      	ldr	r1, [r4, #4]
 80051ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80051b0:	2300      	movs	r3, #0
 80051b2:	9303      	str	r3, [sp, #12]
 80051b4:	ab0a      	add	r3, sp, #40	; 0x28
 80051b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80051ba:	ab09      	add	r3, sp, #36	; 0x24
 80051bc:	ec49 8b10 	vmov	d0, r8, r9
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	6022      	str	r2, [r4, #0]
 80051c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80051c8:	4628      	mov	r0, r5
 80051ca:	f7ff fecd 	bl	8004f68 <__cvt>
 80051ce:	9b06      	ldr	r3, [sp, #24]
 80051d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051d2:	2b47      	cmp	r3, #71	; 0x47
 80051d4:	4680      	mov	r8, r0
 80051d6:	d108      	bne.n	80051ea <_printf_float+0x142>
 80051d8:	1cc8      	adds	r0, r1, #3
 80051da:	db02      	blt.n	80051e2 <_printf_float+0x13a>
 80051dc:	6863      	ldr	r3, [r4, #4]
 80051de:	4299      	cmp	r1, r3
 80051e0:	dd41      	ble.n	8005266 <_printf_float+0x1be>
 80051e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80051e6:	fa5f fb8b 	uxtb.w	fp, fp
 80051ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051ee:	d820      	bhi.n	8005232 <_printf_float+0x18a>
 80051f0:	3901      	subs	r1, #1
 80051f2:	465a      	mov	r2, fp
 80051f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80051f8:	9109      	str	r1, [sp, #36]	; 0x24
 80051fa:	f7ff ff17 	bl	800502c <__exponent>
 80051fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005200:	1813      	adds	r3, r2, r0
 8005202:	2a01      	cmp	r2, #1
 8005204:	4681      	mov	r9, r0
 8005206:	6123      	str	r3, [r4, #16]
 8005208:	dc02      	bgt.n	8005210 <_printf_float+0x168>
 800520a:	6822      	ldr	r2, [r4, #0]
 800520c:	07d2      	lsls	r2, r2, #31
 800520e:	d501      	bpl.n	8005214 <_printf_float+0x16c>
 8005210:	3301      	adds	r3, #1
 8005212:	6123      	str	r3, [r4, #16]
 8005214:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005218:	2b00      	cmp	r3, #0
 800521a:	d09c      	beq.n	8005156 <_printf_float+0xae>
 800521c:	232d      	movs	r3, #45	; 0x2d
 800521e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005222:	e798      	b.n	8005156 <_printf_float+0xae>
 8005224:	9a06      	ldr	r2, [sp, #24]
 8005226:	2a47      	cmp	r2, #71	; 0x47
 8005228:	d1be      	bne.n	80051a8 <_printf_float+0x100>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1bc      	bne.n	80051a8 <_printf_float+0x100>
 800522e:	2301      	movs	r3, #1
 8005230:	e7b9      	b.n	80051a6 <_printf_float+0xfe>
 8005232:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005236:	d118      	bne.n	800526a <_printf_float+0x1c2>
 8005238:	2900      	cmp	r1, #0
 800523a:	6863      	ldr	r3, [r4, #4]
 800523c:	dd0b      	ble.n	8005256 <_printf_float+0x1ae>
 800523e:	6121      	str	r1, [r4, #16]
 8005240:	b913      	cbnz	r3, 8005248 <_printf_float+0x1a0>
 8005242:	6822      	ldr	r2, [r4, #0]
 8005244:	07d0      	lsls	r0, r2, #31
 8005246:	d502      	bpl.n	800524e <_printf_float+0x1a6>
 8005248:	3301      	adds	r3, #1
 800524a:	440b      	add	r3, r1
 800524c:	6123      	str	r3, [r4, #16]
 800524e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005250:	f04f 0900 	mov.w	r9, #0
 8005254:	e7de      	b.n	8005214 <_printf_float+0x16c>
 8005256:	b913      	cbnz	r3, 800525e <_printf_float+0x1b6>
 8005258:	6822      	ldr	r2, [r4, #0]
 800525a:	07d2      	lsls	r2, r2, #31
 800525c:	d501      	bpl.n	8005262 <_printf_float+0x1ba>
 800525e:	3302      	adds	r3, #2
 8005260:	e7f4      	b.n	800524c <_printf_float+0x1a4>
 8005262:	2301      	movs	r3, #1
 8005264:	e7f2      	b.n	800524c <_printf_float+0x1a4>
 8005266:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800526a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800526c:	4299      	cmp	r1, r3
 800526e:	db05      	blt.n	800527c <_printf_float+0x1d4>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	6121      	str	r1, [r4, #16]
 8005274:	07d8      	lsls	r0, r3, #31
 8005276:	d5ea      	bpl.n	800524e <_printf_float+0x1a6>
 8005278:	1c4b      	adds	r3, r1, #1
 800527a:	e7e7      	b.n	800524c <_printf_float+0x1a4>
 800527c:	2900      	cmp	r1, #0
 800527e:	bfd4      	ite	le
 8005280:	f1c1 0202 	rsble	r2, r1, #2
 8005284:	2201      	movgt	r2, #1
 8005286:	4413      	add	r3, r2
 8005288:	e7e0      	b.n	800524c <_printf_float+0x1a4>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	055a      	lsls	r2, r3, #21
 800528e:	d407      	bmi.n	80052a0 <_printf_float+0x1f8>
 8005290:	6923      	ldr	r3, [r4, #16]
 8005292:	4642      	mov	r2, r8
 8005294:	4631      	mov	r1, r6
 8005296:	4628      	mov	r0, r5
 8005298:	47b8      	blx	r7
 800529a:	3001      	adds	r0, #1
 800529c:	d12c      	bne.n	80052f8 <_printf_float+0x250>
 800529e:	e764      	b.n	800516a <_printf_float+0xc2>
 80052a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052a4:	f240 80e0 	bls.w	8005468 <_printf_float+0x3c0>
 80052a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052ac:	2200      	movs	r2, #0
 80052ae:	2300      	movs	r3, #0
 80052b0:	f7fb fc22 	bl	8000af8 <__aeabi_dcmpeq>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d034      	beq.n	8005322 <_printf_float+0x27a>
 80052b8:	4a37      	ldr	r2, [pc, #220]	; (8005398 <_printf_float+0x2f0>)
 80052ba:	2301      	movs	r3, #1
 80052bc:	4631      	mov	r1, r6
 80052be:	4628      	mov	r0, r5
 80052c0:	47b8      	blx	r7
 80052c2:	3001      	adds	r0, #1
 80052c4:	f43f af51 	beq.w	800516a <_printf_float+0xc2>
 80052c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052cc:	429a      	cmp	r2, r3
 80052ce:	db02      	blt.n	80052d6 <_printf_float+0x22e>
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	07d8      	lsls	r0, r3, #31
 80052d4:	d510      	bpl.n	80052f8 <_printf_float+0x250>
 80052d6:	ee18 3a10 	vmov	r3, s16
 80052da:	4652      	mov	r2, sl
 80052dc:	4631      	mov	r1, r6
 80052de:	4628      	mov	r0, r5
 80052e0:	47b8      	blx	r7
 80052e2:	3001      	adds	r0, #1
 80052e4:	f43f af41 	beq.w	800516a <_printf_float+0xc2>
 80052e8:	f04f 0800 	mov.w	r8, #0
 80052ec:	f104 091a 	add.w	r9, r4, #26
 80052f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052f2:	3b01      	subs	r3, #1
 80052f4:	4543      	cmp	r3, r8
 80052f6:	dc09      	bgt.n	800530c <_printf_float+0x264>
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	079b      	lsls	r3, r3, #30
 80052fc:	f100 8105 	bmi.w	800550a <_printf_float+0x462>
 8005300:	68e0      	ldr	r0, [r4, #12]
 8005302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005304:	4298      	cmp	r0, r3
 8005306:	bfb8      	it	lt
 8005308:	4618      	movlt	r0, r3
 800530a:	e730      	b.n	800516e <_printf_float+0xc6>
 800530c:	2301      	movs	r3, #1
 800530e:	464a      	mov	r2, r9
 8005310:	4631      	mov	r1, r6
 8005312:	4628      	mov	r0, r5
 8005314:	47b8      	blx	r7
 8005316:	3001      	adds	r0, #1
 8005318:	f43f af27 	beq.w	800516a <_printf_float+0xc2>
 800531c:	f108 0801 	add.w	r8, r8, #1
 8005320:	e7e6      	b.n	80052f0 <_printf_float+0x248>
 8005322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005324:	2b00      	cmp	r3, #0
 8005326:	dc39      	bgt.n	800539c <_printf_float+0x2f4>
 8005328:	4a1b      	ldr	r2, [pc, #108]	; (8005398 <_printf_float+0x2f0>)
 800532a:	2301      	movs	r3, #1
 800532c:	4631      	mov	r1, r6
 800532e:	4628      	mov	r0, r5
 8005330:	47b8      	blx	r7
 8005332:	3001      	adds	r0, #1
 8005334:	f43f af19 	beq.w	800516a <_printf_float+0xc2>
 8005338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800533c:	4313      	orrs	r3, r2
 800533e:	d102      	bne.n	8005346 <_printf_float+0x29e>
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	07d9      	lsls	r1, r3, #31
 8005344:	d5d8      	bpl.n	80052f8 <_printf_float+0x250>
 8005346:	ee18 3a10 	vmov	r3, s16
 800534a:	4652      	mov	r2, sl
 800534c:	4631      	mov	r1, r6
 800534e:	4628      	mov	r0, r5
 8005350:	47b8      	blx	r7
 8005352:	3001      	adds	r0, #1
 8005354:	f43f af09 	beq.w	800516a <_printf_float+0xc2>
 8005358:	f04f 0900 	mov.w	r9, #0
 800535c:	f104 0a1a 	add.w	sl, r4, #26
 8005360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005362:	425b      	negs	r3, r3
 8005364:	454b      	cmp	r3, r9
 8005366:	dc01      	bgt.n	800536c <_printf_float+0x2c4>
 8005368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800536a:	e792      	b.n	8005292 <_printf_float+0x1ea>
 800536c:	2301      	movs	r3, #1
 800536e:	4652      	mov	r2, sl
 8005370:	4631      	mov	r1, r6
 8005372:	4628      	mov	r0, r5
 8005374:	47b8      	blx	r7
 8005376:	3001      	adds	r0, #1
 8005378:	f43f aef7 	beq.w	800516a <_printf_float+0xc2>
 800537c:	f109 0901 	add.w	r9, r9, #1
 8005380:	e7ee      	b.n	8005360 <_printf_float+0x2b8>
 8005382:	bf00      	nop
 8005384:	7fefffff 	.word	0x7fefffff
 8005388:	080095e0 	.word	0x080095e0
 800538c:	080095e4 	.word	0x080095e4
 8005390:	080095ec 	.word	0x080095ec
 8005394:	080095e8 	.word	0x080095e8
 8005398:	08009811 	.word	0x08009811
 800539c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800539e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053a0:	429a      	cmp	r2, r3
 80053a2:	bfa8      	it	ge
 80053a4:	461a      	movge	r2, r3
 80053a6:	2a00      	cmp	r2, #0
 80053a8:	4691      	mov	r9, r2
 80053aa:	dc37      	bgt.n	800541c <_printf_float+0x374>
 80053ac:	f04f 0b00 	mov.w	fp, #0
 80053b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053b4:	f104 021a 	add.w	r2, r4, #26
 80053b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053ba:	9305      	str	r3, [sp, #20]
 80053bc:	eba3 0309 	sub.w	r3, r3, r9
 80053c0:	455b      	cmp	r3, fp
 80053c2:	dc33      	bgt.n	800542c <_printf_float+0x384>
 80053c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053c8:	429a      	cmp	r2, r3
 80053ca:	db3b      	blt.n	8005444 <_printf_float+0x39c>
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	07da      	lsls	r2, r3, #31
 80053d0:	d438      	bmi.n	8005444 <_printf_float+0x39c>
 80053d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d4:	9a05      	ldr	r2, [sp, #20]
 80053d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053d8:	1a9a      	subs	r2, r3, r2
 80053da:	eba3 0901 	sub.w	r9, r3, r1
 80053de:	4591      	cmp	r9, r2
 80053e0:	bfa8      	it	ge
 80053e2:	4691      	movge	r9, r2
 80053e4:	f1b9 0f00 	cmp.w	r9, #0
 80053e8:	dc35      	bgt.n	8005456 <_printf_float+0x3ae>
 80053ea:	f04f 0800 	mov.w	r8, #0
 80053ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053f2:	f104 0a1a 	add.w	sl, r4, #26
 80053f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053fa:	1a9b      	subs	r3, r3, r2
 80053fc:	eba3 0309 	sub.w	r3, r3, r9
 8005400:	4543      	cmp	r3, r8
 8005402:	f77f af79 	ble.w	80052f8 <_printf_float+0x250>
 8005406:	2301      	movs	r3, #1
 8005408:	4652      	mov	r2, sl
 800540a:	4631      	mov	r1, r6
 800540c:	4628      	mov	r0, r5
 800540e:	47b8      	blx	r7
 8005410:	3001      	adds	r0, #1
 8005412:	f43f aeaa 	beq.w	800516a <_printf_float+0xc2>
 8005416:	f108 0801 	add.w	r8, r8, #1
 800541a:	e7ec      	b.n	80053f6 <_printf_float+0x34e>
 800541c:	4613      	mov	r3, r2
 800541e:	4631      	mov	r1, r6
 8005420:	4642      	mov	r2, r8
 8005422:	4628      	mov	r0, r5
 8005424:	47b8      	blx	r7
 8005426:	3001      	adds	r0, #1
 8005428:	d1c0      	bne.n	80053ac <_printf_float+0x304>
 800542a:	e69e      	b.n	800516a <_printf_float+0xc2>
 800542c:	2301      	movs	r3, #1
 800542e:	4631      	mov	r1, r6
 8005430:	4628      	mov	r0, r5
 8005432:	9205      	str	r2, [sp, #20]
 8005434:	47b8      	blx	r7
 8005436:	3001      	adds	r0, #1
 8005438:	f43f ae97 	beq.w	800516a <_printf_float+0xc2>
 800543c:	9a05      	ldr	r2, [sp, #20]
 800543e:	f10b 0b01 	add.w	fp, fp, #1
 8005442:	e7b9      	b.n	80053b8 <_printf_float+0x310>
 8005444:	ee18 3a10 	vmov	r3, s16
 8005448:	4652      	mov	r2, sl
 800544a:	4631      	mov	r1, r6
 800544c:	4628      	mov	r0, r5
 800544e:	47b8      	blx	r7
 8005450:	3001      	adds	r0, #1
 8005452:	d1be      	bne.n	80053d2 <_printf_float+0x32a>
 8005454:	e689      	b.n	800516a <_printf_float+0xc2>
 8005456:	9a05      	ldr	r2, [sp, #20]
 8005458:	464b      	mov	r3, r9
 800545a:	4442      	add	r2, r8
 800545c:	4631      	mov	r1, r6
 800545e:	4628      	mov	r0, r5
 8005460:	47b8      	blx	r7
 8005462:	3001      	adds	r0, #1
 8005464:	d1c1      	bne.n	80053ea <_printf_float+0x342>
 8005466:	e680      	b.n	800516a <_printf_float+0xc2>
 8005468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800546a:	2a01      	cmp	r2, #1
 800546c:	dc01      	bgt.n	8005472 <_printf_float+0x3ca>
 800546e:	07db      	lsls	r3, r3, #31
 8005470:	d538      	bpl.n	80054e4 <_printf_float+0x43c>
 8005472:	2301      	movs	r3, #1
 8005474:	4642      	mov	r2, r8
 8005476:	4631      	mov	r1, r6
 8005478:	4628      	mov	r0, r5
 800547a:	47b8      	blx	r7
 800547c:	3001      	adds	r0, #1
 800547e:	f43f ae74 	beq.w	800516a <_printf_float+0xc2>
 8005482:	ee18 3a10 	vmov	r3, s16
 8005486:	4652      	mov	r2, sl
 8005488:	4631      	mov	r1, r6
 800548a:	4628      	mov	r0, r5
 800548c:	47b8      	blx	r7
 800548e:	3001      	adds	r0, #1
 8005490:	f43f ae6b 	beq.w	800516a <_printf_float+0xc2>
 8005494:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005498:	2200      	movs	r2, #0
 800549a:	2300      	movs	r3, #0
 800549c:	f7fb fb2c 	bl	8000af8 <__aeabi_dcmpeq>
 80054a0:	b9d8      	cbnz	r0, 80054da <_printf_float+0x432>
 80054a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054a4:	f108 0201 	add.w	r2, r8, #1
 80054a8:	3b01      	subs	r3, #1
 80054aa:	4631      	mov	r1, r6
 80054ac:	4628      	mov	r0, r5
 80054ae:	47b8      	blx	r7
 80054b0:	3001      	adds	r0, #1
 80054b2:	d10e      	bne.n	80054d2 <_printf_float+0x42a>
 80054b4:	e659      	b.n	800516a <_printf_float+0xc2>
 80054b6:	2301      	movs	r3, #1
 80054b8:	4652      	mov	r2, sl
 80054ba:	4631      	mov	r1, r6
 80054bc:	4628      	mov	r0, r5
 80054be:	47b8      	blx	r7
 80054c0:	3001      	adds	r0, #1
 80054c2:	f43f ae52 	beq.w	800516a <_printf_float+0xc2>
 80054c6:	f108 0801 	add.w	r8, r8, #1
 80054ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054cc:	3b01      	subs	r3, #1
 80054ce:	4543      	cmp	r3, r8
 80054d0:	dcf1      	bgt.n	80054b6 <_printf_float+0x40e>
 80054d2:	464b      	mov	r3, r9
 80054d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80054d8:	e6dc      	b.n	8005294 <_printf_float+0x1ec>
 80054da:	f04f 0800 	mov.w	r8, #0
 80054de:	f104 0a1a 	add.w	sl, r4, #26
 80054e2:	e7f2      	b.n	80054ca <_printf_float+0x422>
 80054e4:	2301      	movs	r3, #1
 80054e6:	4642      	mov	r2, r8
 80054e8:	e7df      	b.n	80054aa <_printf_float+0x402>
 80054ea:	2301      	movs	r3, #1
 80054ec:	464a      	mov	r2, r9
 80054ee:	4631      	mov	r1, r6
 80054f0:	4628      	mov	r0, r5
 80054f2:	47b8      	blx	r7
 80054f4:	3001      	adds	r0, #1
 80054f6:	f43f ae38 	beq.w	800516a <_printf_float+0xc2>
 80054fa:	f108 0801 	add.w	r8, r8, #1
 80054fe:	68e3      	ldr	r3, [r4, #12]
 8005500:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005502:	1a5b      	subs	r3, r3, r1
 8005504:	4543      	cmp	r3, r8
 8005506:	dcf0      	bgt.n	80054ea <_printf_float+0x442>
 8005508:	e6fa      	b.n	8005300 <_printf_float+0x258>
 800550a:	f04f 0800 	mov.w	r8, #0
 800550e:	f104 0919 	add.w	r9, r4, #25
 8005512:	e7f4      	b.n	80054fe <_printf_float+0x456>

08005514 <_printf_common>:
 8005514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005518:	4616      	mov	r6, r2
 800551a:	4699      	mov	r9, r3
 800551c:	688a      	ldr	r2, [r1, #8]
 800551e:	690b      	ldr	r3, [r1, #16]
 8005520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005524:	4293      	cmp	r3, r2
 8005526:	bfb8      	it	lt
 8005528:	4613      	movlt	r3, r2
 800552a:	6033      	str	r3, [r6, #0]
 800552c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005530:	4607      	mov	r7, r0
 8005532:	460c      	mov	r4, r1
 8005534:	b10a      	cbz	r2, 800553a <_printf_common+0x26>
 8005536:	3301      	adds	r3, #1
 8005538:	6033      	str	r3, [r6, #0]
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	0699      	lsls	r1, r3, #26
 800553e:	bf42      	ittt	mi
 8005540:	6833      	ldrmi	r3, [r6, #0]
 8005542:	3302      	addmi	r3, #2
 8005544:	6033      	strmi	r3, [r6, #0]
 8005546:	6825      	ldr	r5, [r4, #0]
 8005548:	f015 0506 	ands.w	r5, r5, #6
 800554c:	d106      	bne.n	800555c <_printf_common+0x48>
 800554e:	f104 0a19 	add.w	sl, r4, #25
 8005552:	68e3      	ldr	r3, [r4, #12]
 8005554:	6832      	ldr	r2, [r6, #0]
 8005556:	1a9b      	subs	r3, r3, r2
 8005558:	42ab      	cmp	r3, r5
 800555a:	dc26      	bgt.n	80055aa <_printf_common+0x96>
 800555c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005560:	1e13      	subs	r3, r2, #0
 8005562:	6822      	ldr	r2, [r4, #0]
 8005564:	bf18      	it	ne
 8005566:	2301      	movne	r3, #1
 8005568:	0692      	lsls	r2, r2, #26
 800556a:	d42b      	bmi.n	80055c4 <_printf_common+0xb0>
 800556c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005570:	4649      	mov	r1, r9
 8005572:	4638      	mov	r0, r7
 8005574:	47c0      	blx	r8
 8005576:	3001      	adds	r0, #1
 8005578:	d01e      	beq.n	80055b8 <_printf_common+0xa4>
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	68e5      	ldr	r5, [r4, #12]
 800557e:	6832      	ldr	r2, [r6, #0]
 8005580:	f003 0306 	and.w	r3, r3, #6
 8005584:	2b04      	cmp	r3, #4
 8005586:	bf08      	it	eq
 8005588:	1aad      	subeq	r5, r5, r2
 800558a:	68a3      	ldr	r3, [r4, #8]
 800558c:	6922      	ldr	r2, [r4, #16]
 800558e:	bf0c      	ite	eq
 8005590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005594:	2500      	movne	r5, #0
 8005596:	4293      	cmp	r3, r2
 8005598:	bfc4      	itt	gt
 800559a:	1a9b      	subgt	r3, r3, r2
 800559c:	18ed      	addgt	r5, r5, r3
 800559e:	2600      	movs	r6, #0
 80055a0:	341a      	adds	r4, #26
 80055a2:	42b5      	cmp	r5, r6
 80055a4:	d11a      	bne.n	80055dc <_printf_common+0xc8>
 80055a6:	2000      	movs	r0, #0
 80055a8:	e008      	b.n	80055bc <_printf_common+0xa8>
 80055aa:	2301      	movs	r3, #1
 80055ac:	4652      	mov	r2, sl
 80055ae:	4649      	mov	r1, r9
 80055b0:	4638      	mov	r0, r7
 80055b2:	47c0      	blx	r8
 80055b4:	3001      	adds	r0, #1
 80055b6:	d103      	bne.n	80055c0 <_printf_common+0xac>
 80055b8:	f04f 30ff 	mov.w	r0, #4294967295
 80055bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c0:	3501      	adds	r5, #1
 80055c2:	e7c6      	b.n	8005552 <_printf_common+0x3e>
 80055c4:	18e1      	adds	r1, r4, r3
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	2030      	movs	r0, #48	; 0x30
 80055ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055ce:	4422      	add	r2, r4
 80055d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055d8:	3302      	adds	r3, #2
 80055da:	e7c7      	b.n	800556c <_printf_common+0x58>
 80055dc:	2301      	movs	r3, #1
 80055de:	4622      	mov	r2, r4
 80055e0:	4649      	mov	r1, r9
 80055e2:	4638      	mov	r0, r7
 80055e4:	47c0      	blx	r8
 80055e6:	3001      	adds	r0, #1
 80055e8:	d0e6      	beq.n	80055b8 <_printf_common+0xa4>
 80055ea:	3601      	adds	r6, #1
 80055ec:	e7d9      	b.n	80055a2 <_printf_common+0x8e>
	...

080055f0 <_printf_i>:
 80055f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055f4:	7e0f      	ldrb	r7, [r1, #24]
 80055f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055f8:	2f78      	cmp	r7, #120	; 0x78
 80055fa:	4691      	mov	r9, r2
 80055fc:	4680      	mov	r8, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	469a      	mov	sl, r3
 8005602:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005606:	d807      	bhi.n	8005618 <_printf_i+0x28>
 8005608:	2f62      	cmp	r7, #98	; 0x62
 800560a:	d80a      	bhi.n	8005622 <_printf_i+0x32>
 800560c:	2f00      	cmp	r7, #0
 800560e:	f000 80d8 	beq.w	80057c2 <_printf_i+0x1d2>
 8005612:	2f58      	cmp	r7, #88	; 0x58
 8005614:	f000 80a3 	beq.w	800575e <_printf_i+0x16e>
 8005618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800561c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005620:	e03a      	b.n	8005698 <_printf_i+0xa8>
 8005622:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005626:	2b15      	cmp	r3, #21
 8005628:	d8f6      	bhi.n	8005618 <_printf_i+0x28>
 800562a:	a101      	add	r1, pc, #4	; (adr r1, 8005630 <_printf_i+0x40>)
 800562c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005630:	08005689 	.word	0x08005689
 8005634:	0800569d 	.word	0x0800569d
 8005638:	08005619 	.word	0x08005619
 800563c:	08005619 	.word	0x08005619
 8005640:	08005619 	.word	0x08005619
 8005644:	08005619 	.word	0x08005619
 8005648:	0800569d 	.word	0x0800569d
 800564c:	08005619 	.word	0x08005619
 8005650:	08005619 	.word	0x08005619
 8005654:	08005619 	.word	0x08005619
 8005658:	08005619 	.word	0x08005619
 800565c:	080057a9 	.word	0x080057a9
 8005660:	080056cd 	.word	0x080056cd
 8005664:	0800578b 	.word	0x0800578b
 8005668:	08005619 	.word	0x08005619
 800566c:	08005619 	.word	0x08005619
 8005670:	080057cb 	.word	0x080057cb
 8005674:	08005619 	.word	0x08005619
 8005678:	080056cd 	.word	0x080056cd
 800567c:	08005619 	.word	0x08005619
 8005680:	08005619 	.word	0x08005619
 8005684:	08005793 	.word	0x08005793
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	1d1a      	adds	r2, r3, #4
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	602a      	str	r2, [r5, #0]
 8005690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005698:	2301      	movs	r3, #1
 800569a:	e0a3      	b.n	80057e4 <_printf_i+0x1f4>
 800569c:	6820      	ldr	r0, [r4, #0]
 800569e:	6829      	ldr	r1, [r5, #0]
 80056a0:	0606      	lsls	r6, r0, #24
 80056a2:	f101 0304 	add.w	r3, r1, #4
 80056a6:	d50a      	bpl.n	80056be <_printf_i+0xce>
 80056a8:	680e      	ldr	r6, [r1, #0]
 80056aa:	602b      	str	r3, [r5, #0]
 80056ac:	2e00      	cmp	r6, #0
 80056ae:	da03      	bge.n	80056b8 <_printf_i+0xc8>
 80056b0:	232d      	movs	r3, #45	; 0x2d
 80056b2:	4276      	negs	r6, r6
 80056b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056b8:	485e      	ldr	r0, [pc, #376]	; (8005834 <_printf_i+0x244>)
 80056ba:	230a      	movs	r3, #10
 80056bc:	e019      	b.n	80056f2 <_printf_i+0x102>
 80056be:	680e      	ldr	r6, [r1, #0]
 80056c0:	602b      	str	r3, [r5, #0]
 80056c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056c6:	bf18      	it	ne
 80056c8:	b236      	sxthne	r6, r6
 80056ca:	e7ef      	b.n	80056ac <_printf_i+0xbc>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	6820      	ldr	r0, [r4, #0]
 80056d0:	1d19      	adds	r1, r3, #4
 80056d2:	6029      	str	r1, [r5, #0]
 80056d4:	0601      	lsls	r1, r0, #24
 80056d6:	d501      	bpl.n	80056dc <_printf_i+0xec>
 80056d8:	681e      	ldr	r6, [r3, #0]
 80056da:	e002      	b.n	80056e2 <_printf_i+0xf2>
 80056dc:	0646      	lsls	r6, r0, #25
 80056de:	d5fb      	bpl.n	80056d8 <_printf_i+0xe8>
 80056e0:	881e      	ldrh	r6, [r3, #0]
 80056e2:	4854      	ldr	r0, [pc, #336]	; (8005834 <_printf_i+0x244>)
 80056e4:	2f6f      	cmp	r7, #111	; 0x6f
 80056e6:	bf0c      	ite	eq
 80056e8:	2308      	moveq	r3, #8
 80056ea:	230a      	movne	r3, #10
 80056ec:	2100      	movs	r1, #0
 80056ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056f2:	6865      	ldr	r5, [r4, #4]
 80056f4:	60a5      	str	r5, [r4, #8]
 80056f6:	2d00      	cmp	r5, #0
 80056f8:	bfa2      	ittt	ge
 80056fa:	6821      	ldrge	r1, [r4, #0]
 80056fc:	f021 0104 	bicge.w	r1, r1, #4
 8005700:	6021      	strge	r1, [r4, #0]
 8005702:	b90e      	cbnz	r6, 8005708 <_printf_i+0x118>
 8005704:	2d00      	cmp	r5, #0
 8005706:	d04d      	beq.n	80057a4 <_printf_i+0x1b4>
 8005708:	4615      	mov	r5, r2
 800570a:	fbb6 f1f3 	udiv	r1, r6, r3
 800570e:	fb03 6711 	mls	r7, r3, r1, r6
 8005712:	5dc7      	ldrb	r7, [r0, r7]
 8005714:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005718:	4637      	mov	r7, r6
 800571a:	42bb      	cmp	r3, r7
 800571c:	460e      	mov	r6, r1
 800571e:	d9f4      	bls.n	800570a <_printf_i+0x11a>
 8005720:	2b08      	cmp	r3, #8
 8005722:	d10b      	bne.n	800573c <_printf_i+0x14c>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	07de      	lsls	r6, r3, #31
 8005728:	d508      	bpl.n	800573c <_printf_i+0x14c>
 800572a:	6923      	ldr	r3, [r4, #16]
 800572c:	6861      	ldr	r1, [r4, #4]
 800572e:	4299      	cmp	r1, r3
 8005730:	bfde      	ittt	le
 8005732:	2330      	movle	r3, #48	; 0x30
 8005734:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005738:	f105 35ff 	addle.w	r5, r5, #4294967295
 800573c:	1b52      	subs	r2, r2, r5
 800573e:	6122      	str	r2, [r4, #16]
 8005740:	f8cd a000 	str.w	sl, [sp]
 8005744:	464b      	mov	r3, r9
 8005746:	aa03      	add	r2, sp, #12
 8005748:	4621      	mov	r1, r4
 800574a:	4640      	mov	r0, r8
 800574c:	f7ff fee2 	bl	8005514 <_printf_common>
 8005750:	3001      	adds	r0, #1
 8005752:	d14c      	bne.n	80057ee <_printf_i+0x1fe>
 8005754:	f04f 30ff 	mov.w	r0, #4294967295
 8005758:	b004      	add	sp, #16
 800575a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800575e:	4835      	ldr	r0, [pc, #212]	; (8005834 <_printf_i+0x244>)
 8005760:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005764:	6829      	ldr	r1, [r5, #0]
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	f851 6b04 	ldr.w	r6, [r1], #4
 800576c:	6029      	str	r1, [r5, #0]
 800576e:	061d      	lsls	r5, r3, #24
 8005770:	d514      	bpl.n	800579c <_printf_i+0x1ac>
 8005772:	07df      	lsls	r7, r3, #31
 8005774:	bf44      	itt	mi
 8005776:	f043 0320 	orrmi.w	r3, r3, #32
 800577a:	6023      	strmi	r3, [r4, #0]
 800577c:	b91e      	cbnz	r6, 8005786 <_printf_i+0x196>
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	f023 0320 	bic.w	r3, r3, #32
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	2310      	movs	r3, #16
 8005788:	e7b0      	b.n	80056ec <_printf_i+0xfc>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	f043 0320 	orr.w	r3, r3, #32
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	2378      	movs	r3, #120	; 0x78
 8005794:	4828      	ldr	r0, [pc, #160]	; (8005838 <_printf_i+0x248>)
 8005796:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800579a:	e7e3      	b.n	8005764 <_printf_i+0x174>
 800579c:	0659      	lsls	r1, r3, #25
 800579e:	bf48      	it	mi
 80057a0:	b2b6      	uxthmi	r6, r6
 80057a2:	e7e6      	b.n	8005772 <_printf_i+0x182>
 80057a4:	4615      	mov	r5, r2
 80057a6:	e7bb      	b.n	8005720 <_printf_i+0x130>
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	6826      	ldr	r6, [r4, #0]
 80057ac:	6961      	ldr	r1, [r4, #20]
 80057ae:	1d18      	adds	r0, r3, #4
 80057b0:	6028      	str	r0, [r5, #0]
 80057b2:	0635      	lsls	r5, r6, #24
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	d501      	bpl.n	80057bc <_printf_i+0x1cc>
 80057b8:	6019      	str	r1, [r3, #0]
 80057ba:	e002      	b.n	80057c2 <_printf_i+0x1d2>
 80057bc:	0670      	lsls	r0, r6, #25
 80057be:	d5fb      	bpl.n	80057b8 <_printf_i+0x1c8>
 80057c0:	8019      	strh	r1, [r3, #0]
 80057c2:	2300      	movs	r3, #0
 80057c4:	6123      	str	r3, [r4, #16]
 80057c6:	4615      	mov	r5, r2
 80057c8:	e7ba      	b.n	8005740 <_printf_i+0x150>
 80057ca:	682b      	ldr	r3, [r5, #0]
 80057cc:	1d1a      	adds	r2, r3, #4
 80057ce:	602a      	str	r2, [r5, #0]
 80057d0:	681d      	ldr	r5, [r3, #0]
 80057d2:	6862      	ldr	r2, [r4, #4]
 80057d4:	2100      	movs	r1, #0
 80057d6:	4628      	mov	r0, r5
 80057d8:	f7fa fd1a 	bl	8000210 <memchr>
 80057dc:	b108      	cbz	r0, 80057e2 <_printf_i+0x1f2>
 80057de:	1b40      	subs	r0, r0, r5
 80057e0:	6060      	str	r0, [r4, #4]
 80057e2:	6863      	ldr	r3, [r4, #4]
 80057e4:	6123      	str	r3, [r4, #16]
 80057e6:	2300      	movs	r3, #0
 80057e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ec:	e7a8      	b.n	8005740 <_printf_i+0x150>
 80057ee:	6923      	ldr	r3, [r4, #16]
 80057f0:	462a      	mov	r2, r5
 80057f2:	4649      	mov	r1, r9
 80057f4:	4640      	mov	r0, r8
 80057f6:	47d0      	blx	sl
 80057f8:	3001      	adds	r0, #1
 80057fa:	d0ab      	beq.n	8005754 <_printf_i+0x164>
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	079b      	lsls	r3, r3, #30
 8005800:	d413      	bmi.n	800582a <_printf_i+0x23a>
 8005802:	68e0      	ldr	r0, [r4, #12]
 8005804:	9b03      	ldr	r3, [sp, #12]
 8005806:	4298      	cmp	r0, r3
 8005808:	bfb8      	it	lt
 800580a:	4618      	movlt	r0, r3
 800580c:	e7a4      	b.n	8005758 <_printf_i+0x168>
 800580e:	2301      	movs	r3, #1
 8005810:	4632      	mov	r2, r6
 8005812:	4649      	mov	r1, r9
 8005814:	4640      	mov	r0, r8
 8005816:	47d0      	blx	sl
 8005818:	3001      	adds	r0, #1
 800581a:	d09b      	beq.n	8005754 <_printf_i+0x164>
 800581c:	3501      	adds	r5, #1
 800581e:	68e3      	ldr	r3, [r4, #12]
 8005820:	9903      	ldr	r1, [sp, #12]
 8005822:	1a5b      	subs	r3, r3, r1
 8005824:	42ab      	cmp	r3, r5
 8005826:	dcf2      	bgt.n	800580e <_printf_i+0x21e>
 8005828:	e7eb      	b.n	8005802 <_printf_i+0x212>
 800582a:	2500      	movs	r5, #0
 800582c:	f104 0619 	add.w	r6, r4, #25
 8005830:	e7f5      	b.n	800581e <_printf_i+0x22e>
 8005832:	bf00      	nop
 8005834:	080095f0 	.word	0x080095f0
 8005838:	08009601 	.word	0x08009601

0800583c <_sbrk_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	4d06      	ldr	r5, [pc, #24]	; (8005858 <_sbrk_r+0x1c>)
 8005840:	2300      	movs	r3, #0
 8005842:	4604      	mov	r4, r0
 8005844:	4608      	mov	r0, r1
 8005846:	602b      	str	r3, [r5, #0]
 8005848:	f003 fda4 	bl	8009394 <_sbrk>
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d102      	bne.n	8005856 <_sbrk_r+0x1a>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	b103      	cbz	r3, 8005856 <_sbrk_r+0x1a>
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	bd38      	pop	{r3, r4, r5, pc}
 8005858:	20011a9c 	.word	0x20011a9c

0800585c <siprintf>:
 800585c:	b40e      	push	{r1, r2, r3}
 800585e:	b500      	push	{lr}
 8005860:	b09c      	sub	sp, #112	; 0x70
 8005862:	ab1d      	add	r3, sp, #116	; 0x74
 8005864:	9002      	str	r0, [sp, #8]
 8005866:	9006      	str	r0, [sp, #24]
 8005868:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800586c:	4809      	ldr	r0, [pc, #36]	; (8005894 <siprintf+0x38>)
 800586e:	9107      	str	r1, [sp, #28]
 8005870:	9104      	str	r1, [sp, #16]
 8005872:	4909      	ldr	r1, [pc, #36]	; (8005898 <siprintf+0x3c>)
 8005874:	f853 2b04 	ldr.w	r2, [r3], #4
 8005878:	9105      	str	r1, [sp, #20]
 800587a:	6800      	ldr	r0, [r0, #0]
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	a902      	add	r1, sp, #8
 8005880:	f001 fb42 	bl	8006f08 <_svfiprintf_r>
 8005884:	9b02      	ldr	r3, [sp, #8]
 8005886:	2200      	movs	r2, #0
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	b01c      	add	sp, #112	; 0x70
 800588c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005890:	b003      	add	sp, #12
 8005892:	4770      	bx	lr
 8005894:	2000000c 	.word	0x2000000c
 8005898:	ffff0208 	.word	0xffff0208

0800589c <siscanf>:
 800589c:	b40e      	push	{r1, r2, r3}
 800589e:	b510      	push	{r4, lr}
 80058a0:	b09f      	sub	sp, #124	; 0x7c
 80058a2:	ac21      	add	r4, sp, #132	; 0x84
 80058a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80058a8:	f854 2b04 	ldr.w	r2, [r4], #4
 80058ac:	9201      	str	r2, [sp, #4]
 80058ae:	f8ad 101c 	strh.w	r1, [sp, #28]
 80058b2:	9004      	str	r0, [sp, #16]
 80058b4:	9008      	str	r0, [sp, #32]
 80058b6:	f7fa fc9d 	bl	80001f4 <strlen>
 80058ba:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <siscanf+0x50>)
 80058bc:	9005      	str	r0, [sp, #20]
 80058be:	9009      	str	r0, [sp, #36]	; 0x24
 80058c0:	930d      	str	r3, [sp, #52]	; 0x34
 80058c2:	480b      	ldr	r0, [pc, #44]	; (80058f0 <siscanf+0x54>)
 80058c4:	9a01      	ldr	r2, [sp, #4]
 80058c6:	6800      	ldr	r0, [r0, #0]
 80058c8:	9403      	str	r4, [sp, #12]
 80058ca:	2300      	movs	r3, #0
 80058cc:	9311      	str	r3, [sp, #68]	; 0x44
 80058ce:	9316      	str	r3, [sp, #88]	; 0x58
 80058d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80058d8:	a904      	add	r1, sp, #16
 80058da:	4623      	mov	r3, r4
 80058dc:	f001 fc6e 	bl	80071bc <__ssvfiscanf_r>
 80058e0:	b01f      	add	sp, #124	; 0x7c
 80058e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e6:	b003      	add	sp, #12
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	08005917 	.word	0x08005917
 80058f0:	2000000c 	.word	0x2000000c

080058f4 <__sread>:
 80058f4:	b510      	push	{r4, lr}
 80058f6:	460c      	mov	r4, r1
 80058f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fc:	f001 ff28 	bl	8007750 <_read_r>
 8005900:	2800      	cmp	r0, #0
 8005902:	bfab      	itete	ge
 8005904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005906:	89a3      	ldrhlt	r3, [r4, #12]
 8005908:	181b      	addge	r3, r3, r0
 800590a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800590e:	bfac      	ite	ge
 8005910:	6563      	strge	r3, [r4, #84]	; 0x54
 8005912:	81a3      	strhlt	r3, [r4, #12]
 8005914:	bd10      	pop	{r4, pc}

08005916 <__seofread>:
 8005916:	2000      	movs	r0, #0
 8005918:	4770      	bx	lr

0800591a <__swrite>:
 800591a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800591e:	461f      	mov	r7, r3
 8005920:	898b      	ldrh	r3, [r1, #12]
 8005922:	05db      	lsls	r3, r3, #23
 8005924:	4605      	mov	r5, r0
 8005926:	460c      	mov	r4, r1
 8005928:	4616      	mov	r6, r2
 800592a:	d505      	bpl.n	8005938 <__swrite+0x1e>
 800592c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005930:	2302      	movs	r3, #2
 8005932:	2200      	movs	r2, #0
 8005934:	f000 fec6 	bl	80066c4 <_lseek_r>
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800593e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005942:	81a3      	strh	r3, [r4, #12]
 8005944:	4632      	mov	r2, r6
 8005946:	463b      	mov	r3, r7
 8005948:	4628      	mov	r0, r5
 800594a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800594e:	f000 b817 	b.w	8005980 <_write_r>

08005952 <__sseek>:
 8005952:	b510      	push	{r4, lr}
 8005954:	460c      	mov	r4, r1
 8005956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800595a:	f000 feb3 	bl	80066c4 <_lseek_r>
 800595e:	1c43      	adds	r3, r0, #1
 8005960:	89a3      	ldrh	r3, [r4, #12]
 8005962:	bf15      	itete	ne
 8005964:	6560      	strne	r0, [r4, #84]	; 0x54
 8005966:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800596a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800596e:	81a3      	strheq	r3, [r4, #12]
 8005970:	bf18      	it	ne
 8005972:	81a3      	strhne	r3, [r4, #12]
 8005974:	bd10      	pop	{r4, pc}

08005976 <__sclose>:
 8005976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800597a:	f000 b813 	b.w	80059a4 <_close_r>
	...

08005980 <_write_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	4d07      	ldr	r5, [pc, #28]	; (80059a0 <_write_r+0x20>)
 8005984:	4604      	mov	r4, r0
 8005986:	4608      	mov	r0, r1
 8005988:	4611      	mov	r1, r2
 800598a:	2200      	movs	r2, #0
 800598c:	602a      	str	r2, [r5, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	f7fb fc01 	bl	8001196 <_write>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d102      	bne.n	800599e <_write_r+0x1e>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	b103      	cbz	r3, 800599e <_write_r+0x1e>
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	20011a9c 	.word	0x20011a9c

080059a4 <_close_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d06      	ldr	r5, [pc, #24]	; (80059c0 <_close_r+0x1c>)
 80059a8:	2300      	movs	r3, #0
 80059aa:	4604      	mov	r4, r0
 80059ac:	4608      	mov	r0, r1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	f7fb fc0d 	bl	80011ce <_close>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d102      	bne.n	80059be <_close_r+0x1a>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b103      	cbz	r3, 80059be <_close_r+0x1a>
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	20011a9c 	.word	0x20011a9c

080059c4 <quorem>:
 80059c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c8:	6903      	ldr	r3, [r0, #16]
 80059ca:	690c      	ldr	r4, [r1, #16]
 80059cc:	42a3      	cmp	r3, r4
 80059ce:	4607      	mov	r7, r0
 80059d0:	f2c0 8081 	blt.w	8005ad6 <quorem+0x112>
 80059d4:	3c01      	subs	r4, #1
 80059d6:	f101 0814 	add.w	r8, r1, #20
 80059da:	f100 0514 	add.w	r5, r0, #20
 80059de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059ec:	3301      	adds	r3, #1
 80059ee:	429a      	cmp	r2, r3
 80059f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80059fc:	d331      	bcc.n	8005a62 <quorem+0x9e>
 80059fe:	f04f 0e00 	mov.w	lr, #0
 8005a02:	4640      	mov	r0, r8
 8005a04:	46ac      	mov	ip, r5
 8005a06:	46f2      	mov	sl, lr
 8005a08:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a0c:	b293      	uxth	r3, r2
 8005a0e:	fb06 e303 	mla	r3, r6, r3, lr
 8005a12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	ebaa 0303 	sub.w	r3, sl, r3
 8005a1c:	f8dc a000 	ldr.w	sl, [ip]
 8005a20:	0c12      	lsrs	r2, r2, #16
 8005a22:	fa13 f38a 	uxtah	r3, r3, sl
 8005a26:	fb06 e202 	mla	r2, r6, r2, lr
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	9b00      	ldr	r3, [sp, #0]
 8005a2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a32:	b292      	uxth	r2, r2
 8005a34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005a38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005a40:	4581      	cmp	r9, r0
 8005a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a46:	f84c 3b04 	str.w	r3, [ip], #4
 8005a4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a4e:	d2db      	bcs.n	8005a08 <quorem+0x44>
 8005a50:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a54:	b92b      	cbnz	r3, 8005a62 <quorem+0x9e>
 8005a56:	9b01      	ldr	r3, [sp, #4]
 8005a58:	3b04      	subs	r3, #4
 8005a5a:	429d      	cmp	r5, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	d32e      	bcc.n	8005abe <quorem+0xfa>
 8005a60:	613c      	str	r4, [r7, #16]
 8005a62:	4638      	mov	r0, r7
 8005a64:	f001 f8dc 	bl	8006c20 <__mcmp>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	db24      	blt.n	8005ab6 <quorem+0xf2>
 8005a6c:	3601      	adds	r6, #1
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f04f 0c00 	mov.w	ip, #0
 8005a74:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a78:	f8d0 e000 	ldr.w	lr, [r0]
 8005a7c:	b293      	uxth	r3, r2
 8005a7e:	ebac 0303 	sub.w	r3, ip, r3
 8005a82:	0c12      	lsrs	r2, r2, #16
 8005a84:	fa13 f38e 	uxtah	r3, r3, lr
 8005a88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a96:	45c1      	cmp	r9, r8
 8005a98:	f840 3b04 	str.w	r3, [r0], #4
 8005a9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005aa0:	d2e8      	bcs.n	8005a74 <quorem+0xb0>
 8005aa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005aa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aaa:	b922      	cbnz	r2, 8005ab6 <quorem+0xf2>
 8005aac:	3b04      	subs	r3, #4
 8005aae:	429d      	cmp	r5, r3
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	d30a      	bcc.n	8005aca <quorem+0x106>
 8005ab4:	613c      	str	r4, [r7, #16]
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	b003      	add	sp, #12
 8005aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	3b04      	subs	r3, #4
 8005ac2:	2a00      	cmp	r2, #0
 8005ac4:	d1cc      	bne.n	8005a60 <quorem+0x9c>
 8005ac6:	3c01      	subs	r4, #1
 8005ac8:	e7c7      	b.n	8005a5a <quorem+0x96>
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	3b04      	subs	r3, #4
 8005ace:	2a00      	cmp	r2, #0
 8005ad0:	d1f0      	bne.n	8005ab4 <quorem+0xf0>
 8005ad2:	3c01      	subs	r4, #1
 8005ad4:	e7eb      	b.n	8005aae <quorem+0xea>
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	e7ee      	b.n	8005ab8 <quorem+0xf4>
 8005ada:	0000      	movs	r0, r0
 8005adc:	0000      	movs	r0, r0
	...

08005ae0 <_dtoa_r>:
 8005ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae4:	ed2d 8b04 	vpush	{d8-d9}
 8005ae8:	ec57 6b10 	vmov	r6, r7, d0
 8005aec:	b093      	sub	sp, #76	; 0x4c
 8005aee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005af0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005af4:	9106      	str	r1, [sp, #24]
 8005af6:	ee10 aa10 	vmov	sl, s0
 8005afa:	4604      	mov	r4, r0
 8005afc:	9209      	str	r2, [sp, #36]	; 0x24
 8005afe:	930c      	str	r3, [sp, #48]	; 0x30
 8005b00:	46bb      	mov	fp, r7
 8005b02:	b975      	cbnz	r5, 8005b22 <_dtoa_r+0x42>
 8005b04:	2010      	movs	r0, #16
 8005b06:	f7ff f93f 	bl	8004d88 <malloc>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	6260      	str	r0, [r4, #36]	; 0x24
 8005b0e:	b920      	cbnz	r0, 8005b1a <_dtoa_r+0x3a>
 8005b10:	4ba7      	ldr	r3, [pc, #668]	; (8005db0 <_dtoa_r+0x2d0>)
 8005b12:	21ea      	movs	r1, #234	; 0xea
 8005b14:	48a7      	ldr	r0, [pc, #668]	; (8005db4 <_dtoa_r+0x2d4>)
 8005b16:	f001 ff97 	bl	8007a48 <__assert_func>
 8005b1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b1e:	6005      	str	r5, [r0, #0]
 8005b20:	60c5      	str	r5, [r0, #12]
 8005b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b24:	6819      	ldr	r1, [r3, #0]
 8005b26:	b151      	cbz	r1, 8005b3e <_dtoa_r+0x5e>
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	604a      	str	r2, [r1, #4]
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	4093      	lsls	r3, r2
 8005b30:	608b      	str	r3, [r1, #8]
 8005b32:	4620      	mov	r0, r4
 8005b34:	f000 fe32 	bl	800679c <_Bfree>
 8005b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	1e3b      	subs	r3, r7, #0
 8005b40:	bfaa      	itet	ge
 8005b42:	2300      	movge	r3, #0
 8005b44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005b48:	f8c8 3000 	strge.w	r3, [r8]
 8005b4c:	4b9a      	ldr	r3, [pc, #616]	; (8005db8 <_dtoa_r+0x2d8>)
 8005b4e:	bfbc      	itt	lt
 8005b50:	2201      	movlt	r2, #1
 8005b52:	f8c8 2000 	strlt.w	r2, [r8]
 8005b56:	ea33 030b 	bics.w	r3, r3, fp
 8005b5a:	d11b      	bne.n	8005b94 <_dtoa_r+0xb4>
 8005b5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b68:	4333      	orrs	r3, r6
 8005b6a:	f000 8592 	beq.w	8006692 <_dtoa_r+0xbb2>
 8005b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b70:	b963      	cbnz	r3, 8005b8c <_dtoa_r+0xac>
 8005b72:	4b92      	ldr	r3, [pc, #584]	; (8005dbc <_dtoa_r+0x2dc>)
 8005b74:	e022      	b.n	8005bbc <_dtoa_r+0xdc>
 8005b76:	4b92      	ldr	r3, [pc, #584]	; (8005dc0 <_dtoa_r+0x2e0>)
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	9801      	ldr	r0, [sp, #4]
 8005b82:	b013      	add	sp, #76	; 0x4c
 8005b84:	ecbd 8b04 	vpop	{d8-d9}
 8005b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8c:	4b8b      	ldr	r3, [pc, #556]	; (8005dbc <_dtoa_r+0x2dc>)
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	3303      	adds	r3, #3
 8005b92:	e7f3      	b.n	8005b7c <_dtoa_r+0x9c>
 8005b94:	2200      	movs	r2, #0
 8005b96:	2300      	movs	r3, #0
 8005b98:	4650      	mov	r0, sl
 8005b9a:	4659      	mov	r1, fp
 8005b9c:	f7fa ffac 	bl	8000af8 <__aeabi_dcmpeq>
 8005ba0:	ec4b ab19 	vmov	d9, sl, fp
 8005ba4:	4680      	mov	r8, r0
 8005ba6:	b158      	cbz	r0, 8005bc0 <_dtoa_r+0xe0>
 8005ba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005baa:	2301      	movs	r3, #1
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 856b 	beq.w	800668c <_dtoa_r+0xbac>
 8005bb6:	4883      	ldr	r0, [pc, #524]	; (8005dc4 <_dtoa_r+0x2e4>)
 8005bb8:	6018      	str	r0, [r3, #0]
 8005bba:	1e43      	subs	r3, r0, #1
 8005bbc:	9301      	str	r3, [sp, #4]
 8005bbe:	e7df      	b.n	8005b80 <_dtoa_r+0xa0>
 8005bc0:	ec4b ab10 	vmov	d0, sl, fp
 8005bc4:	aa10      	add	r2, sp, #64	; 0x40
 8005bc6:	a911      	add	r1, sp, #68	; 0x44
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f001 f8cf 	bl	8006d6c <__d2b>
 8005bce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005bd2:	ee08 0a10 	vmov	s16, r0
 8005bd6:	2d00      	cmp	r5, #0
 8005bd8:	f000 8084 	beq.w	8005ce4 <_dtoa_r+0x204>
 8005bdc:	ee19 3a90 	vmov	r3, s19
 8005be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005be4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005be8:	4656      	mov	r6, sl
 8005bea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005bee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005bf2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005bf6:	4b74      	ldr	r3, [pc, #464]	; (8005dc8 <_dtoa_r+0x2e8>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	4639      	mov	r1, r7
 8005bfe:	f7fa fb5b 	bl	80002b8 <__aeabi_dsub>
 8005c02:	a365      	add	r3, pc, #404	; (adr r3, 8005d98 <_dtoa_r+0x2b8>)
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f7fa fd0e 	bl	8000628 <__aeabi_dmul>
 8005c0c:	a364      	add	r3, pc, #400	; (adr r3, 8005da0 <_dtoa_r+0x2c0>)
 8005c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c12:	f7fa fb53 	bl	80002bc <__adddf3>
 8005c16:	4606      	mov	r6, r0
 8005c18:	4628      	mov	r0, r5
 8005c1a:	460f      	mov	r7, r1
 8005c1c:	f7fa fc9a 	bl	8000554 <__aeabi_i2d>
 8005c20:	a361      	add	r3, pc, #388	; (adr r3, 8005da8 <_dtoa_r+0x2c8>)
 8005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c26:	f7fa fcff 	bl	8000628 <__aeabi_dmul>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4630      	mov	r0, r6
 8005c30:	4639      	mov	r1, r7
 8005c32:	f7fa fb43 	bl	80002bc <__adddf3>
 8005c36:	4606      	mov	r6, r0
 8005c38:	460f      	mov	r7, r1
 8005c3a:	f7fa ffa5 	bl	8000b88 <__aeabi_d2iz>
 8005c3e:	2200      	movs	r2, #0
 8005c40:	9000      	str	r0, [sp, #0]
 8005c42:	2300      	movs	r3, #0
 8005c44:	4630      	mov	r0, r6
 8005c46:	4639      	mov	r1, r7
 8005c48:	f7fa ff60 	bl	8000b0c <__aeabi_dcmplt>
 8005c4c:	b150      	cbz	r0, 8005c64 <_dtoa_r+0x184>
 8005c4e:	9800      	ldr	r0, [sp, #0]
 8005c50:	f7fa fc80 	bl	8000554 <__aeabi_i2d>
 8005c54:	4632      	mov	r2, r6
 8005c56:	463b      	mov	r3, r7
 8005c58:	f7fa ff4e 	bl	8000af8 <__aeabi_dcmpeq>
 8005c5c:	b910      	cbnz	r0, 8005c64 <_dtoa_r+0x184>
 8005c5e:	9b00      	ldr	r3, [sp, #0]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	9b00      	ldr	r3, [sp, #0]
 8005c66:	2b16      	cmp	r3, #22
 8005c68:	d85a      	bhi.n	8005d20 <_dtoa_r+0x240>
 8005c6a:	9a00      	ldr	r2, [sp, #0]
 8005c6c:	4b57      	ldr	r3, [pc, #348]	; (8005dcc <_dtoa_r+0x2ec>)
 8005c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	ec51 0b19 	vmov	r0, r1, d9
 8005c7a:	f7fa ff47 	bl	8000b0c <__aeabi_dcmplt>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d050      	beq.n	8005d24 <_dtoa_r+0x244>
 8005c82:	9b00      	ldr	r3, [sp, #0]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	2300      	movs	r3, #0
 8005c8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c8e:	1b5d      	subs	r5, r3, r5
 8005c90:	1e6b      	subs	r3, r5, #1
 8005c92:	9305      	str	r3, [sp, #20]
 8005c94:	bf45      	ittet	mi
 8005c96:	f1c5 0301 	rsbmi	r3, r5, #1
 8005c9a:	9304      	strmi	r3, [sp, #16]
 8005c9c:	2300      	movpl	r3, #0
 8005c9e:	2300      	movmi	r3, #0
 8005ca0:	bf4c      	ite	mi
 8005ca2:	9305      	strmi	r3, [sp, #20]
 8005ca4:	9304      	strpl	r3, [sp, #16]
 8005ca6:	9b00      	ldr	r3, [sp, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	db3d      	blt.n	8005d28 <_dtoa_r+0x248>
 8005cac:	9b05      	ldr	r3, [sp, #20]
 8005cae:	9a00      	ldr	r2, [sp, #0]
 8005cb0:	920a      	str	r2, [sp, #40]	; 0x28
 8005cb2:	4413      	add	r3, r2
 8005cb4:	9305      	str	r3, [sp, #20]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9307      	str	r3, [sp, #28]
 8005cba:	9b06      	ldr	r3, [sp, #24]
 8005cbc:	2b09      	cmp	r3, #9
 8005cbe:	f200 8089 	bhi.w	8005dd4 <_dtoa_r+0x2f4>
 8005cc2:	2b05      	cmp	r3, #5
 8005cc4:	bfc4      	itt	gt
 8005cc6:	3b04      	subgt	r3, #4
 8005cc8:	9306      	strgt	r3, [sp, #24]
 8005cca:	9b06      	ldr	r3, [sp, #24]
 8005ccc:	f1a3 0302 	sub.w	r3, r3, #2
 8005cd0:	bfcc      	ite	gt
 8005cd2:	2500      	movgt	r5, #0
 8005cd4:	2501      	movle	r5, #1
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	f200 8087 	bhi.w	8005dea <_dtoa_r+0x30a>
 8005cdc:	e8df f003 	tbb	[pc, r3]
 8005ce0:	59383a2d 	.word	0x59383a2d
 8005ce4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005ce8:	441d      	add	r5, r3
 8005cea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	bfc1      	itttt	gt
 8005cf2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005cf6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005cfa:	fa0b f303 	lslgt.w	r3, fp, r3
 8005cfe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005d02:	bfda      	itte	le
 8005d04:	f1c3 0320 	rsble	r3, r3, #32
 8005d08:	fa06 f003 	lslle.w	r0, r6, r3
 8005d0c:	4318      	orrgt	r0, r3
 8005d0e:	f7fa fc11 	bl	8000534 <__aeabi_ui2d>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4606      	mov	r6, r0
 8005d16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005d1a:	3d01      	subs	r5, #1
 8005d1c:	930e      	str	r3, [sp, #56]	; 0x38
 8005d1e:	e76a      	b.n	8005bf6 <_dtoa_r+0x116>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e7b2      	b.n	8005c8a <_dtoa_r+0x1aa>
 8005d24:	900b      	str	r0, [sp, #44]	; 0x2c
 8005d26:	e7b1      	b.n	8005c8c <_dtoa_r+0x1ac>
 8005d28:	9b04      	ldr	r3, [sp, #16]
 8005d2a:	9a00      	ldr	r2, [sp, #0]
 8005d2c:	1a9b      	subs	r3, r3, r2
 8005d2e:	9304      	str	r3, [sp, #16]
 8005d30:	4253      	negs	r3, r2
 8005d32:	9307      	str	r3, [sp, #28]
 8005d34:	2300      	movs	r3, #0
 8005d36:	930a      	str	r3, [sp, #40]	; 0x28
 8005d38:	e7bf      	b.n	8005cba <_dtoa_r+0x1da>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	9308      	str	r3, [sp, #32]
 8005d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	dc55      	bgt.n	8005df0 <_dtoa_r+0x310>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d4e:	e00c      	b.n	8005d6a <_dtoa_r+0x28a>
 8005d50:	2301      	movs	r3, #1
 8005d52:	e7f3      	b.n	8005d3c <_dtoa_r+0x25c>
 8005d54:	2300      	movs	r3, #0
 8005d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d58:	9308      	str	r3, [sp, #32]
 8005d5a:	9b00      	ldr	r3, [sp, #0]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	9302      	str	r3, [sp, #8]
 8005d60:	3301      	adds	r3, #1
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	9303      	str	r3, [sp, #12]
 8005d66:	bfb8      	it	lt
 8005d68:	2301      	movlt	r3, #1
 8005d6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	6042      	str	r2, [r0, #4]
 8005d70:	2204      	movs	r2, #4
 8005d72:	f102 0614 	add.w	r6, r2, #20
 8005d76:	429e      	cmp	r6, r3
 8005d78:	6841      	ldr	r1, [r0, #4]
 8005d7a:	d93d      	bls.n	8005df8 <_dtoa_r+0x318>
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f000 fccd 	bl	800671c <_Balloc>
 8005d82:	9001      	str	r0, [sp, #4]
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d13b      	bne.n	8005e00 <_dtoa_r+0x320>
 8005d88:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <_dtoa_r+0x2f0>)
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d90:	e6c0      	b.n	8005b14 <_dtoa_r+0x34>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e7df      	b.n	8005d56 <_dtoa_r+0x276>
 8005d96:	bf00      	nop
 8005d98:	636f4361 	.word	0x636f4361
 8005d9c:	3fd287a7 	.word	0x3fd287a7
 8005da0:	8b60c8b3 	.word	0x8b60c8b3
 8005da4:	3fc68a28 	.word	0x3fc68a28
 8005da8:	509f79fb 	.word	0x509f79fb
 8005dac:	3fd34413 	.word	0x3fd34413
 8005db0:	0800961f 	.word	0x0800961f
 8005db4:	08009636 	.word	0x08009636
 8005db8:	7ff00000 	.word	0x7ff00000
 8005dbc:	0800961b 	.word	0x0800961b
 8005dc0:	08009612 	.word	0x08009612
 8005dc4:	08009812 	.word	0x08009812
 8005dc8:	3ff80000 	.word	0x3ff80000
 8005dcc:	08009728 	.word	0x08009728
 8005dd0:	08009691 	.word	0x08009691
 8005dd4:	2501      	movs	r5, #1
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	9306      	str	r3, [sp, #24]
 8005dda:	9508      	str	r5, [sp, #32]
 8005ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8005de0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005de4:	2200      	movs	r2, #0
 8005de6:	2312      	movs	r3, #18
 8005de8:	e7b0      	b.n	8005d4c <_dtoa_r+0x26c>
 8005dea:	2301      	movs	r3, #1
 8005dec:	9308      	str	r3, [sp, #32]
 8005dee:	e7f5      	b.n	8005ddc <_dtoa_r+0x2fc>
 8005df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005df6:	e7b8      	b.n	8005d6a <_dtoa_r+0x28a>
 8005df8:	3101      	adds	r1, #1
 8005dfa:	6041      	str	r1, [r0, #4]
 8005dfc:	0052      	lsls	r2, r2, #1
 8005dfe:	e7b8      	b.n	8005d72 <_dtoa_r+0x292>
 8005e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e02:	9a01      	ldr	r2, [sp, #4]
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	9b03      	ldr	r3, [sp, #12]
 8005e08:	2b0e      	cmp	r3, #14
 8005e0a:	f200 809d 	bhi.w	8005f48 <_dtoa_r+0x468>
 8005e0e:	2d00      	cmp	r5, #0
 8005e10:	f000 809a 	beq.w	8005f48 <_dtoa_r+0x468>
 8005e14:	9b00      	ldr	r3, [sp, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	dd32      	ble.n	8005e80 <_dtoa_r+0x3a0>
 8005e1a:	4ab7      	ldr	r2, [pc, #732]	; (80060f8 <_dtoa_r+0x618>)
 8005e1c:	f003 030f 	and.w	r3, r3, #15
 8005e20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e28:	9b00      	ldr	r3, [sp, #0]
 8005e2a:	05d8      	lsls	r0, r3, #23
 8005e2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005e30:	d516      	bpl.n	8005e60 <_dtoa_r+0x380>
 8005e32:	4bb2      	ldr	r3, [pc, #712]	; (80060fc <_dtoa_r+0x61c>)
 8005e34:	ec51 0b19 	vmov	r0, r1, d9
 8005e38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e3c:	f7fa fd1e 	bl	800087c <__aeabi_ddiv>
 8005e40:	f007 070f 	and.w	r7, r7, #15
 8005e44:	4682      	mov	sl, r0
 8005e46:	468b      	mov	fp, r1
 8005e48:	2503      	movs	r5, #3
 8005e4a:	4eac      	ldr	r6, [pc, #688]	; (80060fc <_dtoa_r+0x61c>)
 8005e4c:	b957      	cbnz	r7, 8005e64 <_dtoa_r+0x384>
 8005e4e:	4642      	mov	r2, r8
 8005e50:	464b      	mov	r3, r9
 8005e52:	4650      	mov	r0, sl
 8005e54:	4659      	mov	r1, fp
 8005e56:	f7fa fd11 	bl	800087c <__aeabi_ddiv>
 8005e5a:	4682      	mov	sl, r0
 8005e5c:	468b      	mov	fp, r1
 8005e5e:	e028      	b.n	8005eb2 <_dtoa_r+0x3d2>
 8005e60:	2502      	movs	r5, #2
 8005e62:	e7f2      	b.n	8005e4a <_dtoa_r+0x36a>
 8005e64:	07f9      	lsls	r1, r7, #31
 8005e66:	d508      	bpl.n	8005e7a <_dtoa_r+0x39a>
 8005e68:	4640      	mov	r0, r8
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e70:	f7fa fbda 	bl	8000628 <__aeabi_dmul>
 8005e74:	3501      	adds	r5, #1
 8005e76:	4680      	mov	r8, r0
 8005e78:	4689      	mov	r9, r1
 8005e7a:	107f      	asrs	r7, r7, #1
 8005e7c:	3608      	adds	r6, #8
 8005e7e:	e7e5      	b.n	8005e4c <_dtoa_r+0x36c>
 8005e80:	f000 809b 	beq.w	8005fba <_dtoa_r+0x4da>
 8005e84:	9b00      	ldr	r3, [sp, #0]
 8005e86:	4f9d      	ldr	r7, [pc, #628]	; (80060fc <_dtoa_r+0x61c>)
 8005e88:	425e      	negs	r6, r3
 8005e8a:	4b9b      	ldr	r3, [pc, #620]	; (80060f8 <_dtoa_r+0x618>)
 8005e8c:	f006 020f 	and.w	r2, r6, #15
 8005e90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	ec51 0b19 	vmov	r0, r1, d9
 8005e9c:	f7fa fbc4 	bl	8000628 <__aeabi_dmul>
 8005ea0:	1136      	asrs	r6, r6, #4
 8005ea2:	4682      	mov	sl, r0
 8005ea4:	468b      	mov	fp, r1
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	2502      	movs	r5, #2
 8005eaa:	2e00      	cmp	r6, #0
 8005eac:	d17a      	bne.n	8005fa4 <_dtoa_r+0x4c4>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1d3      	bne.n	8005e5a <_dtoa_r+0x37a>
 8005eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 8082 	beq.w	8005fbe <_dtoa_r+0x4de>
 8005eba:	4b91      	ldr	r3, [pc, #580]	; (8006100 <_dtoa_r+0x620>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4650      	mov	r0, sl
 8005ec0:	4659      	mov	r1, fp
 8005ec2:	f7fa fe23 	bl	8000b0c <__aeabi_dcmplt>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d079      	beq.n	8005fbe <_dtoa_r+0x4de>
 8005eca:	9b03      	ldr	r3, [sp, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d076      	beq.n	8005fbe <_dtoa_r+0x4de>
 8005ed0:	9b02      	ldr	r3, [sp, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	dd36      	ble.n	8005f44 <_dtoa_r+0x464>
 8005ed6:	9b00      	ldr	r3, [sp, #0]
 8005ed8:	4650      	mov	r0, sl
 8005eda:	4659      	mov	r1, fp
 8005edc:	1e5f      	subs	r7, r3, #1
 8005ede:	2200      	movs	r2, #0
 8005ee0:	4b88      	ldr	r3, [pc, #544]	; (8006104 <_dtoa_r+0x624>)
 8005ee2:	f7fa fba1 	bl	8000628 <__aeabi_dmul>
 8005ee6:	9e02      	ldr	r6, [sp, #8]
 8005ee8:	4682      	mov	sl, r0
 8005eea:	468b      	mov	fp, r1
 8005eec:	3501      	adds	r5, #1
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f7fa fb30 	bl	8000554 <__aeabi_i2d>
 8005ef4:	4652      	mov	r2, sl
 8005ef6:	465b      	mov	r3, fp
 8005ef8:	f7fa fb96 	bl	8000628 <__aeabi_dmul>
 8005efc:	4b82      	ldr	r3, [pc, #520]	; (8006108 <_dtoa_r+0x628>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	f7fa f9dc 	bl	80002bc <__adddf3>
 8005f04:	46d0      	mov	r8, sl
 8005f06:	46d9      	mov	r9, fp
 8005f08:	4682      	mov	sl, r0
 8005f0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005f0e:	2e00      	cmp	r6, #0
 8005f10:	d158      	bne.n	8005fc4 <_dtoa_r+0x4e4>
 8005f12:	4b7e      	ldr	r3, [pc, #504]	; (800610c <_dtoa_r+0x62c>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	4640      	mov	r0, r8
 8005f18:	4649      	mov	r1, r9
 8005f1a:	f7fa f9cd 	bl	80002b8 <__aeabi_dsub>
 8005f1e:	4652      	mov	r2, sl
 8005f20:	465b      	mov	r3, fp
 8005f22:	4680      	mov	r8, r0
 8005f24:	4689      	mov	r9, r1
 8005f26:	f7fa fe0f 	bl	8000b48 <__aeabi_dcmpgt>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	f040 8295 	bne.w	800645a <_dtoa_r+0x97a>
 8005f30:	4652      	mov	r2, sl
 8005f32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005f36:	4640      	mov	r0, r8
 8005f38:	4649      	mov	r1, r9
 8005f3a:	f7fa fde7 	bl	8000b0c <__aeabi_dcmplt>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	f040 8289 	bne.w	8006456 <_dtoa_r+0x976>
 8005f44:	ec5b ab19 	vmov	sl, fp, d9
 8005f48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f2c0 8148 	blt.w	80061e0 <_dtoa_r+0x700>
 8005f50:	9a00      	ldr	r2, [sp, #0]
 8005f52:	2a0e      	cmp	r2, #14
 8005f54:	f300 8144 	bgt.w	80061e0 <_dtoa_r+0x700>
 8005f58:	4b67      	ldr	r3, [pc, #412]	; (80060f8 <_dtoa_r+0x618>)
 8005f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f280 80d5 	bge.w	8006114 <_dtoa_r+0x634>
 8005f6a:	9b03      	ldr	r3, [sp, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f300 80d1 	bgt.w	8006114 <_dtoa_r+0x634>
 8005f72:	f040 826f 	bne.w	8006454 <_dtoa_r+0x974>
 8005f76:	4b65      	ldr	r3, [pc, #404]	; (800610c <_dtoa_r+0x62c>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	f7fa fb53 	bl	8000628 <__aeabi_dmul>
 8005f82:	4652      	mov	r2, sl
 8005f84:	465b      	mov	r3, fp
 8005f86:	f7fa fdd5 	bl	8000b34 <__aeabi_dcmpge>
 8005f8a:	9e03      	ldr	r6, [sp, #12]
 8005f8c:	4637      	mov	r7, r6
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	f040 8245 	bne.w	800641e <_dtoa_r+0x93e>
 8005f94:	9d01      	ldr	r5, [sp, #4]
 8005f96:	2331      	movs	r3, #49	; 0x31
 8005f98:	f805 3b01 	strb.w	r3, [r5], #1
 8005f9c:	9b00      	ldr	r3, [sp, #0]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	e240      	b.n	8006426 <_dtoa_r+0x946>
 8005fa4:	07f2      	lsls	r2, r6, #31
 8005fa6:	d505      	bpl.n	8005fb4 <_dtoa_r+0x4d4>
 8005fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fac:	f7fa fb3c 	bl	8000628 <__aeabi_dmul>
 8005fb0:	3501      	adds	r5, #1
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	1076      	asrs	r6, r6, #1
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	e777      	b.n	8005eaa <_dtoa_r+0x3ca>
 8005fba:	2502      	movs	r5, #2
 8005fbc:	e779      	b.n	8005eb2 <_dtoa_r+0x3d2>
 8005fbe:	9f00      	ldr	r7, [sp, #0]
 8005fc0:	9e03      	ldr	r6, [sp, #12]
 8005fc2:	e794      	b.n	8005eee <_dtoa_r+0x40e>
 8005fc4:	9901      	ldr	r1, [sp, #4]
 8005fc6:	4b4c      	ldr	r3, [pc, #304]	; (80060f8 <_dtoa_r+0x618>)
 8005fc8:	4431      	add	r1, r6
 8005fca:	910d      	str	r1, [sp, #52]	; 0x34
 8005fcc:	9908      	ldr	r1, [sp, #32]
 8005fce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005fd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fd6:	2900      	cmp	r1, #0
 8005fd8:	d043      	beq.n	8006062 <_dtoa_r+0x582>
 8005fda:	494d      	ldr	r1, [pc, #308]	; (8006110 <_dtoa_r+0x630>)
 8005fdc:	2000      	movs	r0, #0
 8005fde:	f7fa fc4d 	bl	800087c <__aeabi_ddiv>
 8005fe2:	4652      	mov	r2, sl
 8005fe4:	465b      	mov	r3, fp
 8005fe6:	f7fa f967 	bl	80002b8 <__aeabi_dsub>
 8005fea:	9d01      	ldr	r5, [sp, #4]
 8005fec:	4682      	mov	sl, r0
 8005fee:	468b      	mov	fp, r1
 8005ff0:	4649      	mov	r1, r9
 8005ff2:	4640      	mov	r0, r8
 8005ff4:	f7fa fdc8 	bl	8000b88 <__aeabi_d2iz>
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	f7fa faab 	bl	8000554 <__aeabi_i2d>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	4640      	mov	r0, r8
 8006004:	4649      	mov	r1, r9
 8006006:	f7fa f957 	bl	80002b8 <__aeabi_dsub>
 800600a:	3630      	adds	r6, #48	; 0x30
 800600c:	f805 6b01 	strb.w	r6, [r5], #1
 8006010:	4652      	mov	r2, sl
 8006012:	465b      	mov	r3, fp
 8006014:	4680      	mov	r8, r0
 8006016:	4689      	mov	r9, r1
 8006018:	f7fa fd78 	bl	8000b0c <__aeabi_dcmplt>
 800601c:	2800      	cmp	r0, #0
 800601e:	d163      	bne.n	80060e8 <_dtoa_r+0x608>
 8006020:	4642      	mov	r2, r8
 8006022:	464b      	mov	r3, r9
 8006024:	4936      	ldr	r1, [pc, #216]	; (8006100 <_dtoa_r+0x620>)
 8006026:	2000      	movs	r0, #0
 8006028:	f7fa f946 	bl	80002b8 <__aeabi_dsub>
 800602c:	4652      	mov	r2, sl
 800602e:	465b      	mov	r3, fp
 8006030:	f7fa fd6c 	bl	8000b0c <__aeabi_dcmplt>
 8006034:	2800      	cmp	r0, #0
 8006036:	f040 80b5 	bne.w	80061a4 <_dtoa_r+0x6c4>
 800603a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800603c:	429d      	cmp	r5, r3
 800603e:	d081      	beq.n	8005f44 <_dtoa_r+0x464>
 8006040:	4b30      	ldr	r3, [pc, #192]	; (8006104 <_dtoa_r+0x624>)
 8006042:	2200      	movs	r2, #0
 8006044:	4650      	mov	r0, sl
 8006046:	4659      	mov	r1, fp
 8006048:	f7fa faee 	bl	8000628 <__aeabi_dmul>
 800604c:	4b2d      	ldr	r3, [pc, #180]	; (8006104 <_dtoa_r+0x624>)
 800604e:	4682      	mov	sl, r0
 8006050:	468b      	mov	fp, r1
 8006052:	4640      	mov	r0, r8
 8006054:	4649      	mov	r1, r9
 8006056:	2200      	movs	r2, #0
 8006058:	f7fa fae6 	bl	8000628 <__aeabi_dmul>
 800605c:	4680      	mov	r8, r0
 800605e:	4689      	mov	r9, r1
 8006060:	e7c6      	b.n	8005ff0 <_dtoa_r+0x510>
 8006062:	4650      	mov	r0, sl
 8006064:	4659      	mov	r1, fp
 8006066:	f7fa fadf 	bl	8000628 <__aeabi_dmul>
 800606a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800606c:	9d01      	ldr	r5, [sp, #4]
 800606e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006070:	4682      	mov	sl, r0
 8006072:	468b      	mov	fp, r1
 8006074:	4649      	mov	r1, r9
 8006076:	4640      	mov	r0, r8
 8006078:	f7fa fd86 	bl	8000b88 <__aeabi_d2iz>
 800607c:	4606      	mov	r6, r0
 800607e:	f7fa fa69 	bl	8000554 <__aeabi_i2d>
 8006082:	3630      	adds	r6, #48	; 0x30
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4640      	mov	r0, r8
 800608a:	4649      	mov	r1, r9
 800608c:	f7fa f914 	bl	80002b8 <__aeabi_dsub>
 8006090:	f805 6b01 	strb.w	r6, [r5], #1
 8006094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006096:	429d      	cmp	r5, r3
 8006098:	4680      	mov	r8, r0
 800609a:	4689      	mov	r9, r1
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	d124      	bne.n	80060ec <_dtoa_r+0x60c>
 80060a2:	4b1b      	ldr	r3, [pc, #108]	; (8006110 <_dtoa_r+0x630>)
 80060a4:	4650      	mov	r0, sl
 80060a6:	4659      	mov	r1, fp
 80060a8:	f7fa f908 	bl	80002bc <__adddf3>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4640      	mov	r0, r8
 80060b2:	4649      	mov	r1, r9
 80060b4:	f7fa fd48 	bl	8000b48 <__aeabi_dcmpgt>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d173      	bne.n	80061a4 <_dtoa_r+0x6c4>
 80060bc:	4652      	mov	r2, sl
 80060be:	465b      	mov	r3, fp
 80060c0:	4913      	ldr	r1, [pc, #76]	; (8006110 <_dtoa_r+0x630>)
 80060c2:	2000      	movs	r0, #0
 80060c4:	f7fa f8f8 	bl	80002b8 <__aeabi_dsub>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4640      	mov	r0, r8
 80060ce:	4649      	mov	r1, r9
 80060d0:	f7fa fd1c 	bl	8000b0c <__aeabi_dcmplt>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	f43f af35 	beq.w	8005f44 <_dtoa_r+0x464>
 80060da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80060dc:	1e6b      	subs	r3, r5, #1
 80060de:	930f      	str	r3, [sp, #60]	; 0x3c
 80060e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060e4:	2b30      	cmp	r3, #48	; 0x30
 80060e6:	d0f8      	beq.n	80060da <_dtoa_r+0x5fa>
 80060e8:	9700      	str	r7, [sp, #0]
 80060ea:	e049      	b.n	8006180 <_dtoa_r+0x6a0>
 80060ec:	4b05      	ldr	r3, [pc, #20]	; (8006104 <_dtoa_r+0x624>)
 80060ee:	f7fa fa9b 	bl	8000628 <__aeabi_dmul>
 80060f2:	4680      	mov	r8, r0
 80060f4:	4689      	mov	r9, r1
 80060f6:	e7bd      	b.n	8006074 <_dtoa_r+0x594>
 80060f8:	08009728 	.word	0x08009728
 80060fc:	08009700 	.word	0x08009700
 8006100:	3ff00000 	.word	0x3ff00000
 8006104:	40240000 	.word	0x40240000
 8006108:	401c0000 	.word	0x401c0000
 800610c:	40140000 	.word	0x40140000
 8006110:	3fe00000 	.word	0x3fe00000
 8006114:	9d01      	ldr	r5, [sp, #4]
 8006116:	4656      	mov	r6, sl
 8006118:	465f      	mov	r7, fp
 800611a:	4642      	mov	r2, r8
 800611c:	464b      	mov	r3, r9
 800611e:	4630      	mov	r0, r6
 8006120:	4639      	mov	r1, r7
 8006122:	f7fa fbab 	bl	800087c <__aeabi_ddiv>
 8006126:	f7fa fd2f 	bl	8000b88 <__aeabi_d2iz>
 800612a:	4682      	mov	sl, r0
 800612c:	f7fa fa12 	bl	8000554 <__aeabi_i2d>
 8006130:	4642      	mov	r2, r8
 8006132:	464b      	mov	r3, r9
 8006134:	f7fa fa78 	bl	8000628 <__aeabi_dmul>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4630      	mov	r0, r6
 800613e:	4639      	mov	r1, r7
 8006140:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006144:	f7fa f8b8 	bl	80002b8 <__aeabi_dsub>
 8006148:	f805 6b01 	strb.w	r6, [r5], #1
 800614c:	9e01      	ldr	r6, [sp, #4]
 800614e:	9f03      	ldr	r7, [sp, #12]
 8006150:	1bae      	subs	r6, r5, r6
 8006152:	42b7      	cmp	r7, r6
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	d135      	bne.n	80061c6 <_dtoa_r+0x6e6>
 800615a:	f7fa f8af 	bl	80002bc <__adddf3>
 800615e:	4642      	mov	r2, r8
 8006160:	464b      	mov	r3, r9
 8006162:	4606      	mov	r6, r0
 8006164:	460f      	mov	r7, r1
 8006166:	f7fa fcef 	bl	8000b48 <__aeabi_dcmpgt>
 800616a:	b9d0      	cbnz	r0, 80061a2 <_dtoa_r+0x6c2>
 800616c:	4642      	mov	r2, r8
 800616e:	464b      	mov	r3, r9
 8006170:	4630      	mov	r0, r6
 8006172:	4639      	mov	r1, r7
 8006174:	f7fa fcc0 	bl	8000af8 <__aeabi_dcmpeq>
 8006178:	b110      	cbz	r0, 8006180 <_dtoa_r+0x6a0>
 800617a:	f01a 0f01 	tst.w	sl, #1
 800617e:	d110      	bne.n	80061a2 <_dtoa_r+0x6c2>
 8006180:	4620      	mov	r0, r4
 8006182:	ee18 1a10 	vmov	r1, s16
 8006186:	f000 fb09 	bl	800679c <_Bfree>
 800618a:	2300      	movs	r3, #0
 800618c:	9800      	ldr	r0, [sp, #0]
 800618e:	702b      	strb	r3, [r5, #0]
 8006190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006192:	3001      	adds	r0, #1
 8006194:	6018      	str	r0, [r3, #0]
 8006196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006198:	2b00      	cmp	r3, #0
 800619a:	f43f acf1 	beq.w	8005b80 <_dtoa_r+0xa0>
 800619e:	601d      	str	r5, [r3, #0]
 80061a0:	e4ee      	b.n	8005b80 <_dtoa_r+0xa0>
 80061a2:	9f00      	ldr	r7, [sp, #0]
 80061a4:	462b      	mov	r3, r5
 80061a6:	461d      	mov	r5, r3
 80061a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061ac:	2a39      	cmp	r2, #57	; 0x39
 80061ae:	d106      	bne.n	80061be <_dtoa_r+0x6de>
 80061b0:	9a01      	ldr	r2, [sp, #4]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d1f7      	bne.n	80061a6 <_dtoa_r+0x6c6>
 80061b6:	9901      	ldr	r1, [sp, #4]
 80061b8:	2230      	movs	r2, #48	; 0x30
 80061ba:	3701      	adds	r7, #1
 80061bc:	700a      	strb	r2, [r1, #0]
 80061be:	781a      	ldrb	r2, [r3, #0]
 80061c0:	3201      	adds	r2, #1
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	e790      	b.n	80060e8 <_dtoa_r+0x608>
 80061c6:	4ba6      	ldr	r3, [pc, #664]	; (8006460 <_dtoa_r+0x980>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	f7fa fa2d 	bl	8000628 <__aeabi_dmul>
 80061ce:	2200      	movs	r2, #0
 80061d0:	2300      	movs	r3, #0
 80061d2:	4606      	mov	r6, r0
 80061d4:	460f      	mov	r7, r1
 80061d6:	f7fa fc8f 	bl	8000af8 <__aeabi_dcmpeq>
 80061da:	2800      	cmp	r0, #0
 80061dc:	d09d      	beq.n	800611a <_dtoa_r+0x63a>
 80061de:	e7cf      	b.n	8006180 <_dtoa_r+0x6a0>
 80061e0:	9a08      	ldr	r2, [sp, #32]
 80061e2:	2a00      	cmp	r2, #0
 80061e4:	f000 80d7 	beq.w	8006396 <_dtoa_r+0x8b6>
 80061e8:	9a06      	ldr	r2, [sp, #24]
 80061ea:	2a01      	cmp	r2, #1
 80061ec:	f300 80ba 	bgt.w	8006364 <_dtoa_r+0x884>
 80061f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061f2:	2a00      	cmp	r2, #0
 80061f4:	f000 80b2 	beq.w	800635c <_dtoa_r+0x87c>
 80061f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061fc:	9e07      	ldr	r6, [sp, #28]
 80061fe:	9d04      	ldr	r5, [sp, #16]
 8006200:	9a04      	ldr	r2, [sp, #16]
 8006202:	441a      	add	r2, r3
 8006204:	9204      	str	r2, [sp, #16]
 8006206:	9a05      	ldr	r2, [sp, #20]
 8006208:	2101      	movs	r1, #1
 800620a:	441a      	add	r2, r3
 800620c:	4620      	mov	r0, r4
 800620e:	9205      	str	r2, [sp, #20]
 8006210:	f000 fb7c 	bl	800690c <__i2b>
 8006214:	4607      	mov	r7, r0
 8006216:	2d00      	cmp	r5, #0
 8006218:	dd0c      	ble.n	8006234 <_dtoa_r+0x754>
 800621a:	9b05      	ldr	r3, [sp, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	dd09      	ble.n	8006234 <_dtoa_r+0x754>
 8006220:	42ab      	cmp	r3, r5
 8006222:	9a04      	ldr	r2, [sp, #16]
 8006224:	bfa8      	it	ge
 8006226:	462b      	movge	r3, r5
 8006228:	1ad2      	subs	r2, r2, r3
 800622a:	9204      	str	r2, [sp, #16]
 800622c:	9a05      	ldr	r2, [sp, #20]
 800622e:	1aed      	subs	r5, r5, r3
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	9305      	str	r3, [sp, #20]
 8006234:	9b07      	ldr	r3, [sp, #28]
 8006236:	b31b      	cbz	r3, 8006280 <_dtoa_r+0x7a0>
 8006238:	9b08      	ldr	r3, [sp, #32]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 80af 	beq.w	800639e <_dtoa_r+0x8be>
 8006240:	2e00      	cmp	r6, #0
 8006242:	dd13      	ble.n	800626c <_dtoa_r+0x78c>
 8006244:	4639      	mov	r1, r7
 8006246:	4632      	mov	r2, r6
 8006248:	4620      	mov	r0, r4
 800624a:	f000 fc1f 	bl	8006a8c <__pow5mult>
 800624e:	ee18 2a10 	vmov	r2, s16
 8006252:	4601      	mov	r1, r0
 8006254:	4607      	mov	r7, r0
 8006256:	4620      	mov	r0, r4
 8006258:	f000 fb6e 	bl	8006938 <__multiply>
 800625c:	ee18 1a10 	vmov	r1, s16
 8006260:	4680      	mov	r8, r0
 8006262:	4620      	mov	r0, r4
 8006264:	f000 fa9a 	bl	800679c <_Bfree>
 8006268:	ee08 8a10 	vmov	s16, r8
 800626c:	9b07      	ldr	r3, [sp, #28]
 800626e:	1b9a      	subs	r2, r3, r6
 8006270:	d006      	beq.n	8006280 <_dtoa_r+0x7a0>
 8006272:	ee18 1a10 	vmov	r1, s16
 8006276:	4620      	mov	r0, r4
 8006278:	f000 fc08 	bl	8006a8c <__pow5mult>
 800627c:	ee08 0a10 	vmov	s16, r0
 8006280:	2101      	movs	r1, #1
 8006282:	4620      	mov	r0, r4
 8006284:	f000 fb42 	bl	800690c <__i2b>
 8006288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800628a:	2b00      	cmp	r3, #0
 800628c:	4606      	mov	r6, r0
 800628e:	f340 8088 	ble.w	80063a2 <_dtoa_r+0x8c2>
 8006292:	461a      	mov	r2, r3
 8006294:	4601      	mov	r1, r0
 8006296:	4620      	mov	r0, r4
 8006298:	f000 fbf8 	bl	8006a8c <__pow5mult>
 800629c:	9b06      	ldr	r3, [sp, #24]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	4606      	mov	r6, r0
 80062a2:	f340 8081 	ble.w	80063a8 <_dtoa_r+0x8c8>
 80062a6:	f04f 0800 	mov.w	r8, #0
 80062aa:	6933      	ldr	r3, [r6, #16]
 80062ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80062b0:	6918      	ldr	r0, [r3, #16]
 80062b2:	f000 fadb 	bl	800686c <__hi0bits>
 80062b6:	f1c0 0020 	rsb	r0, r0, #32
 80062ba:	9b05      	ldr	r3, [sp, #20]
 80062bc:	4418      	add	r0, r3
 80062be:	f010 001f 	ands.w	r0, r0, #31
 80062c2:	f000 8092 	beq.w	80063ea <_dtoa_r+0x90a>
 80062c6:	f1c0 0320 	rsb	r3, r0, #32
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	f340 808a 	ble.w	80063e4 <_dtoa_r+0x904>
 80062d0:	f1c0 001c 	rsb	r0, r0, #28
 80062d4:	9b04      	ldr	r3, [sp, #16]
 80062d6:	4403      	add	r3, r0
 80062d8:	9304      	str	r3, [sp, #16]
 80062da:	9b05      	ldr	r3, [sp, #20]
 80062dc:	4403      	add	r3, r0
 80062de:	4405      	add	r5, r0
 80062e0:	9305      	str	r3, [sp, #20]
 80062e2:	9b04      	ldr	r3, [sp, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	dd07      	ble.n	80062f8 <_dtoa_r+0x818>
 80062e8:	ee18 1a10 	vmov	r1, s16
 80062ec:	461a      	mov	r2, r3
 80062ee:	4620      	mov	r0, r4
 80062f0:	f000 fc26 	bl	8006b40 <__lshift>
 80062f4:	ee08 0a10 	vmov	s16, r0
 80062f8:	9b05      	ldr	r3, [sp, #20]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	dd05      	ble.n	800630a <_dtoa_r+0x82a>
 80062fe:	4631      	mov	r1, r6
 8006300:	461a      	mov	r2, r3
 8006302:	4620      	mov	r0, r4
 8006304:	f000 fc1c 	bl	8006b40 <__lshift>
 8006308:	4606      	mov	r6, r0
 800630a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800630c:	2b00      	cmp	r3, #0
 800630e:	d06e      	beq.n	80063ee <_dtoa_r+0x90e>
 8006310:	ee18 0a10 	vmov	r0, s16
 8006314:	4631      	mov	r1, r6
 8006316:	f000 fc83 	bl	8006c20 <__mcmp>
 800631a:	2800      	cmp	r0, #0
 800631c:	da67      	bge.n	80063ee <_dtoa_r+0x90e>
 800631e:	9b00      	ldr	r3, [sp, #0]
 8006320:	3b01      	subs	r3, #1
 8006322:	ee18 1a10 	vmov	r1, s16
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	220a      	movs	r2, #10
 800632a:	2300      	movs	r3, #0
 800632c:	4620      	mov	r0, r4
 800632e:	f000 fa57 	bl	80067e0 <__multadd>
 8006332:	9b08      	ldr	r3, [sp, #32]
 8006334:	ee08 0a10 	vmov	s16, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 81b1 	beq.w	80066a0 <_dtoa_r+0xbc0>
 800633e:	2300      	movs	r3, #0
 8006340:	4639      	mov	r1, r7
 8006342:	220a      	movs	r2, #10
 8006344:	4620      	mov	r0, r4
 8006346:	f000 fa4b 	bl	80067e0 <__multadd>
 800634a:	9b02      	ldr	r3, [sp, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	4607      	mov	r7, r0
 8006350:	f300 808e 	bgt.w	8006470 <_dtoa_r+0x990>
 8006354:	9b06      	ldr	r3, [sp, #24]
 8006356:	2b02      	cmp	r3, #2
 8006358:	dc51      	bgt.n	80063fe <_dtoa_r+0x91e>
 800635a:	e089      	b.n	8006470 <_dtoa_r+0x990>
 800635c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800635e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006362:	e74b      	b.n	80061fc <_dtoa_r+0x71c>
 8006364:	9b03      	ldr	r3, [sp, #12]
 8006366:	1e5e      	subs	r6, r3, #1
 8006368:	9b07      	ldr	r3, [sp, #28]
 800636a:	42b3      	cmp	r3, r6
 800636c:	bfbf      	itttt	lt
 800636e:	9b07      	ldrlt	r3, [sp, #28]
 8006370:	9607      	strlt	r6, [sp, #28]
 8006372:	1af2      	sublt	r2, r6, r3
 8006374:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006376:	bfb6      	itet	lt
 8006378:	189b      	addlt	r3, r3, r2
 800637a:	1b9e      	subge	r6, r3, r6
 800637c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800637e:	9b03      	ldr	r3, [sp, #12]
 8006380:	bfb8      	it	lt
 8006382:	2600      	movlt	r6, #0
 8006384:	2b00      	cmp	r3, #0
 8006386:	bfb7      	itett	lt
 8006388:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800638c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006390:	1a9d      	sublt	r5, r3, r2
 8006392:	2300      	movlt	r3, #0
 8006394:	e734      	b.n	8006200 <_dtoa_r+0x720>
 8006396:	9e07      	ldr	r6, [sp, #28]
 8006398:	9d04      	ldr	r5, [sp, #16]
 800639a:	9f08      	ldr	r7, [sp, #32]
 800639c:	e73b      	b.n	8006216 <_dtoa_r+0x736>
 800639e:	9a07      	ldr	r2, [sp, #28]
 80063a0:	e767      	b.n	8006272 <_dtoa_r+0x792>
 80063a2:	9b06      	ldr	r3, [sp, #24]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	dc18      	bgt.n	80063da <_dtoa_r+0x8fa>
 80063a8:	f1ba 0f00 	cmp.w	sl, #0
 80063ac:	d115      	bne.n	80063da <_dtoa_r+0x8fa>
 80063ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063b2:	b993      	cbnz	r3, 80063da <_dtoa_r+0x8fa>
 80063b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80063b8:	0d1b      	lsrs	r3, r3, #20
 80063ba:	051b      	lsls	r3, r3, #20
 80063bc:	b183      	cbz	r3, 80063e0 <_dtoa_r+0x900>
 80063be:	9b04      	ldr	r3, [sp, #16]
 80063c0:	3301      	adds	r3, #1
 80063c2:	9304      	str	r3, [sp, #16]
 80063c4:	9b05      	ldr	r3, [sp, #20]
 80063c6:	3301      	adds	r3, #1
 80063c8:	9305      	str	r3, [sp, #20]
 80063ca:	f04f 0801 	mov.w	r8, #1
 80063ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f47f af6a 	bne.w	80062aa <_dtoa_r+0x7ca>
 80063d6:	2001      	movs	r0, #1
 80063d8:	e76f      	b.n	80062ba <_dtoa_r+0x7da>
 80063da:	f04f 0800 	mov.w	r8, #0
 80063de:	e7f6      	b.n	80063ce <_dtoa_r+0x8ee>
 80063e0:	4698      	mov	r8, r3
 80063e2:	e7f4      	b.n	80063ce <_dtoa_r+0x8ee>
 80063e4:	f43f af7d 	beq.w	80062e2 <_dtoa_r+0x802>
 80063e8:	4618      	mov	r0, r3
 80063ea:	301c      	adds	r0, #28
 80063ec:	e772      	b.n	80062d4 <_dtoa_r+0x7f4>
 80063ee:	9b03      	ldr	r3, [sp, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	dc37      	bgt.n	8006464 <_dtoa_r+0x984>
 80063f4:	9b06      	ldr	r3, [sp, #24]
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	dd34      	ble.n	8006464 <_dtoa_r+0x984>
 80063fa:	9b03      	ldr	r3, [sp, #12]
 80063fc:	9302      	str	r3, [sp, #8]
 80063fe:	9b02      	ldr	r3, [sp, #8]
 8006400:	b96b      	cbnz	r3, 800641e <_dtoa_r+0x93e>
 8006402:	4631      	mov	r1, r6
 8006404:	2205      	movs	r2, #5
 8006406:	4620      	mov	r0, r4
 8006408:	f000 f9ea 	bl	80067e0 <__multadd>
 800640c:	4601      	mov	r1, r0
 800640e:	4606      	mov	r6, r0
 8006410:	ee18 0a10 	vmov	r0, s16
 8006414:	f000 fc04 	bl	8006c20 <__mcmp>
 8006418:	2800      	cmp	r0, #0
 800641a:	f73f adbb 	bgt.w	8005f94 <_dtoa_r+0x4b4>
 800641e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006420:	9d01      	ldr	r5, [sp, #4]
 8006422:	43db      	mvns	r3, r3
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	f04f 0800 	mov.w	r8, #0
 800642a:	4631      	mov	r1, r6
 800642c:	4620      	mov	r0, r4
 800642e:	f000 f9b5 	bl	800679c <_Bfree>
 8006432:	2f00      	cmp	r7, #0
 8006434:	f43f aea4 	beq.w	8006180 <_dtoa_r+0x6a0>
 8006438:	f1b8 0f00 	cmp.w	r8, #0
 800643c:	d005      	beq.n	800644a <_dtoa_r+0x96a>
 800643e:	45b8      	cmp	r8, r7
 8006440:	d003      	beq.n	800644a <_dtoa_r+0x96a>
 8006442:	4641      	mov	r1, r8
 8006444:	4620      	mov	r0, r4
 8006446:	f000 f9a9 	bl	800679c <_Bfree>
 800644a:	4639      	mov	r1, r7
 800644c:	4620      	mov	r0, r4
 800644e:	f000 f9a5 	bl	800679c <_Bfree>
 8006452:	e695      	b.n	8006180 <_dtoa_r+0x6a0>
 8006454:	2600      	movs	r6, #0
 8006456:	4637      	mov	r7, r6
 8006458:	e7e1      	b.n	800641e <_dtoa_r+0x93e>
 800645a:	9700      	str	r7, [sp, #0]
 800645c:	4637      	mov	r7, r6
 800645e:	e599      	b.n	8005f94 <_dtoa_r+0x4b4>
 8006460:	40240000 	.word	0x40240000
 8006464:	9b08      	ldr	r3, [sp, #32]
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 80ca 	beq.w	8006600 <_dtoa_r+0xb20>
 800646c:	9b03      	ldr	r3, [sp, #12]
 800646e:	9302      	str	r3, [sp, #8]
 8006470:	2d00      	cmp	r5, #0
 8006472:	dd05      	ble.n	8006480 <_dtoa_r+0x9a0>
 8006474:	4639      	mov	r1, r7
 8006476:	462a      	mov	r2, r5
 8006478:	4620      	mov	r0, r4
 800647a:	f000 fb61 	bl	8006b40 <__lshift>
 800647e:	4607      	mov	r7, r0
 8006480:	f1b8 0f00 	cmp.w	r8, #0
 8006484:	d05b      	beq.n	800653e <_dtoa_r+0xa5e>
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	4620      	mov	r0, r4
 800648a:	f000 f947 	bl	800671c <_Balloc>
 800648e:	4605      	mov	r5, r0
 8006490:	b928      	cbnz	r0, 800649e <_dtoa_r+0x9be>
 8006492:	4b87      	ldr	r3, [pc, #540]	; (80066b0 <_dtoa_r+0xbd0>)
 8006494:	4602      	mov	r2, r0
 8006496:	f240 21ea 	movw	r1, #746	; 0x2ea
 800649a:	f7ff bb3b 	b.w	8005b14 <_dtoa_r+0x34>
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	3202      	adds	r2, #2
 80064a2:	0092      	lsls	r2, r2, #2
 80064a4:	f107 010c 	add.w	r1, r7, #12
 80064a8:	300c      	adds	r0, #12
 80064aa:	f000 f91d 	bl	80066e8 <memcpy>
 80064ae:	2201      	movs	r2, #1
 80064b0:	4629      	mov	r1, r5
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 fb44 	bl	8006b40 <__lshift>
 80064b8:	9b01      	ldr	r3, [sp, #4]
 80064ba:	f103 0901 	add.w	r9, r3, #1
 80064be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80064c2:	4413      	add	r3, r2
 80064c4:	9305      	str	r3, [sp, #20]
 80064c6:	f00a 0301 	and.w	r3, sl, #1
 80064ca:	46b8      	mov	r8, r7
 80064cc:	9304      	str	r3, [sp, #16]
 80064ce:	4607      	mov	r7, r0
 80064d0:	4631      	mov	r1, r6
 80064d2:	ee18 0a10 	vmov	r0, s16
 80064d6:	f7ff fa75 	bl	80059c4 <quorem>
 80064da:	4641      	mov	r1, r8
 80064dc:	9002      	str	r0, [sp, #8]
 80064de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80064e2:	ee18 0a10 	vmov	r0, s16
 80064e6:	f000 fb9b 	bl	8006c20 <__mcmp>
 80064ea:	463a      	mov	r2, r7
 80064ec:	9003      	str	r0, [sp, #12]
 80064ee:	4631      	mov	r1, r6
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 fbb1 	bl	8006c58 <__mdiff>
 80064f6:	68c2      	ldr	r2, [r0, #12]
 80064f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80064fc:	4605      	mov	r5, r0
 80064fe:	bb02      	cbnz	r2, 8006542 <_dtoa_r+0xa62>
 8006500:	4601      	mov	r1, r0
 8006502:	ee18 0a10 	vmov	r0, s16
 8006506:	f000 fb8b 	bl	8006c20 <__mcmp>
 800650a:	4602      	mov	r2, r0
 800650c:	4629      	mov	r1, r5
 800650e:	4620      	mov	r0, r4
 8006510:	9207      	str	r2, [sp, #28]
 8006512:	f000 f943 	bl	800679c <_Bfree>
 8006516:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800651a:	ea43 0102 	orr.w	r1, r3, r2
 800651e:	9b04      	ldr	r3, [sp, #16]
 8006520:	430b      	orrs	r3, r1
 8006522:	464d      	mov	r5, r9
 8006524:	d10f      	bne.n	8006546 <_dtoa_r+0xa66>
 8006526:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800652a:	d02a      	beq.n	8006582 <_dtoa_r+0xaa2>
 800652c:	9b03      	ldr	r3, [sp, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	dd02      	ble.n	8006538 <_dtoa_r+0xa58>
 8006532:	9b02      	ldr	r3, [sp, #8]
 8006534:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006538:	f88b a000 	strb.w	sl, [fp]
 800653c:	e775      	b.n	800642a <_dtoa_r+0x94a>
 800653e:	4638      	mov	r0, r7
 8006540:	e7ba      	b.n	80064b8 <_dtoa_r+0x9d8>
 8006542:	2201      	movs	r2, #1
 8006544:	e7e2      	b.n	800650c <_dtoa_r+0xa2c>
 8006546:	9b03      	ldr	r3, [sp, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	db04      	blt.n	8006556 <_dtoa_r+0xa76>
 800654c:	9906      	ldr	r1, [sp, #24]
 800654e:	430b      	orrs	r3, r1
 8006550:	9904      	ldr	r1, [sp, #16]
 8006552:	430b      	orrs	r3, r1
 8006554:	d122      	bne.n	800659c <_dtoa_r+0xabc>
 8006556:	2a00      	cmp	r2, #0
 8006558:	ddee      	ble.n	8006538 <_dtoa_r+0xa58>
 800655a:	ee18 1a10 	vmov	r1, s16
 800655e:	2201      	movs	r2, #1
 8006560:	4620      	mov	r0, r4
 8006562:	f000 faed 	bl	8006b40 <__lshift>
 8006566:	4631      	mov	r1, r6
 8006568:	ee08 0a10 	vmov	s16, r0
 800656c:	f000 fb58 	bl	8006c20 <__mcmp>
 8006570:	2800      	cmp	r0, #0
 8006572:	dc03      	bgt.n	800657c <_dtoa_r+0xa9c>
 8006574:	d1e0      	bne.n	8006538 <_dtoa_r+0xa58>
 8006576:	f01a 0f01 	tst.w	sl, #1
 800657a:	d0dd      	beq.n	8006538 <_dtoa_r+0xa58>
 800657c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006580:	d1d7      	bne.n	8006532 <_dtoa_r+0xa52>
 8006582:	2339      	movs	r3, #57	; 0x39
 8006584:	f88b 3000 	strb.w	r3, [fp]
 8006588:	462b      	mov	r3, r5
 800658a:	461d      	mov	r5, r3
 800658c:	3b01      	subs	r3, #1
 800658e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006592:	2a39      	cmp	r2, #57	; 0x39
 8006594:	d071      	beq.n	800667a <_dtoa_r+0xb9a>
 8006596:	3201      	adds	r2, #1
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	e746      	b.n	800642a <_dtoa_r+0x94a>
 800659c:	2a00      	cmp	r2, #0
 800659e:	dd07      	ble.n	80065b0 <_dtoa_r+0xad0>
 80065a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80065a4:	d0ed      	beq.n	8006582 <_dtoa_r+0xaa2>
 80065a6:	f10a 0301 	add.w	r3, sl, #1
 80065aa:	f88b 3000 	strb.w	r3, [fp]
 80065ae:	e73c      	b.n	800642a <_dtoa_r+0x94a>
 80065b0:	9b05      	ldr	r3, [sp, #20]
 80065b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80065b6:	4599      	cmp	r9, r3
 80065b8:	d047      	beq.n	800664a <_dtoa_r+0xb6a>
 80065ba:	ee18 1a10 	vmov	r1, s16
 80065be:	2300      	movs	r3, #0
 80065c0:	220a      	movs	r2, #10
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 f90c 	bl	80067e0 <__multadd>
 80065c8:	45b8      	cmp	r8, r7
 80065ca:	ee08 0a10 	vmov	s16, r0
 80065ce:	f04f 0300 	mov.w	r3, #0
 80065d2:	f04f 020a 	mov.w	r2, #10
 80065d6:	4641      	mov	r1, r8
 80065d8:	4620      	mov	r0, r4
 80065da:	d106      	bne.n	80065ea <_dtoa_r+0xb0a>
 80065dc:	f000 f900 	bl	80067e0 <__multadd>
 80065e0:	4680      	mov	r8, r0
 80065e2:	4607      	mov	r7, r0
 80065e4:	f109 0901 	add.w	r9, r9, #1
 80065e8:	e772      	b.n	80064d0 <_dtoa_r+0x9f0>
 80065ea:	f000 f8f9 	bl	80067e0 <__multadd>
 80065ee:	4639      	mov	r1, r7
 80065f0:	4680      	mov	r8, r0
 80065f2:	2300      	movs	r3, #0
 80065f4:	220a      	movs	r2, #10
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 f8f2 	bl	80067e0 <__multadd>
 80065fc:	4607      	mov	r7, r0
 80065fe:	e7f1      	b.n	80065e4 <_dtoa_r+0xb04>
 8006600:	9b03      	ldr	r3, [sp, #12]
 8006602:	9302      	str	r3, [sp, #8]
 8006604:	9d01      	ldr	r5, [sp, #4]
 8006606:	ee18 0a10 	vmov	r0, s16
 800660a:	4631      	mov	r1, r6
 800660c:	f7ff f9da 	bl	80059c4 <quorem>
 8006610:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006614:	9b01      	ldr	r3, [sp, #4]
 8006616:	f805 ab01 	strb.w	sl, [r5], #1
 800661a:	1aea      	subs	r2, r5, r3
 800661c:	9b02      	ldr	r3, [sp, #8]
 800661e:	4293      	cmp	r3, r2
 8006620:	dd09      	ble.n	8006636 <_dtoa_r+0xb56>
 8006622:	ee18 1a10 	vmov	r1, s16
 8006626:	2300      	movs	r3, #0
 8006628:	220a      	movs	r2, #10
 800662a:	4620      	mov	r0, r4
 800662c:	f000 f8d8 	bl	80067e0 <__multadd>
 8006630:	ee08 0a10 	vmov	s16, r0
 8006634:	e7e7      	b.n	8006606 <_dtoa_r+0xb26>
 8006636:	9b02      	ldr	r3, [sp, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	bfc8      	it	gt
 800663c:	461d      	movgt	r5, r3
 800663e:	9b01      	ldr	r3, [sp, #4]
 8006640:	bfd8      	it	le
 8006642:	2501      	movle	r5, #1
 8006644:	441d      	add	r5, r3
 8006646:	f04f 0800 	mov.w	r8, #0
 800664a:	ee18 1a10 	vmov	r1, s16
 800664e:	2201      	movs	r2, #1
 8006650:	4620      	mov	r0, r4
 8006652:	f000 fa75 	bl	8006b40 <__lshift>
 8006656:	4631      	mov	r1, r6
 8006658:	ee08 0a10 	vmov	s16, r0
 800665c:	f000 fae0 	bl	8006c20 <__mcmp>
 8006660:	2800      	cmp	r0, #0
 8006662:	dc91      	bgt.n	8006588 <_dtoa_r+0xaa8>
 8006664:	d102      	bne.n	800666c <_dtoa_r+0xb8c>
 8006666:	f01a 0f01 	tst.w	sl, #1
 800666a:	d18d      	bne.n	8006588 <_dtoa_r+0xaa8>
 800666c:	462b      	mov	r3, r5
 800666e:	461d      	mov	r5, r3
 8006670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006674:	2a30      	cmp	r2, #48	; 0x30
 8006676:	d0fa      	beq.n	800666e <_dtoa_r+0xb8e>
 8006678:	e6d7      	b.n	800642a <_dtoa_r+0x94a>
 800667a:	9a01      	ldr	r2, [sp, #4]
 800667c:	429a      	cmp	r2, r3
 800667e:	d184      	bne.n	800658a <_dtoa_r+0xaaa>
 8006680:	9b00      	ldr	r3, [sp, #0]
 8006682:	3301      	adds	r3, #1
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	2331      	movs	r3, #49	; 0x31
 8006688:	7013      	strb	r3, [r2, #0]
 800668a:	e6ce      	b.n	800642a <_dtoa_r+0x94a>
 800668c:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <_dtoa_r+0xbd4>)
 800668e:	f7ff ba95 	b.w	8005bbc <_dtoa_r+0xdc>
 8006692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006694:	2b00      	cmp	r3, #0
 8006696:	f47f aa6e 	bne.w	8005b76 <_dtoa_r+0x96>
 800669a:	4b07      	ldr	r3, [pc, #28]	; (80066b8 <_dtoa_r+0xbd8>)
 800669c:	f7ff ba8e 	b.w	8005bbc <_dtoa_r+0xdc>
 80066a0:	9b02      	ldr	r3, [sp, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	dcae      	bgt.n	8006604 <_dtoa_r+0xb24>
 80066a6:	9b06      	ldr	r3, [sp, #24]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	f73f aea8 	bgt.w	80063fe <_dtoa_r+0x91e>
 80066ae:	e7a9      	b.n	8006604 <_dtoa_r+0xb24>
 80066b0:	08009691 	.word	0x08009691
 80066b4:	08009811 	.word	0x08009811
 80066b8:	08009612 	.word	0x08009612

080066bc <_localeconv_r>:
 80066bc:	4800      	ldr	r0, [pc, #0]	; (80066c0 <_localeconv_r+0x4>)
 80066be:	4770      	bx	lr
 80066c0:	20000160 	.word	0x20000160

080066c4 <_lseek_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4d07      	ldr	r5, [pc, #28]	; (80066e4 <_lseek_r+0x20>)
 80066c8:	4604      	mov	r4, r0
 80066ca:	4608      	mov	r0, r1
 80066cc:	4611      	mov	r1, r2
 80066ce:	2200      	movs	r2, #0
 80066d0:	602a      	str	r2, [r5, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	f7fa fda2 	bl	800121c <_lseek>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d102      	bne.n	80066e2 <_lseek_r+0x1e>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	b103      	cbz	r3, 80066e2 <_lseek_r+0x1e>
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	20011a9c 	.word	0x20011a9c

080066e8 <memcpy>:
 80066e8:	440a      	add	r2, r1
 80066ea:	4291      	cmp	r1, r2
 80066ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80066f0:	d100      	bne.n	80066f4 <memcpy+0xc>
 80066f2:	4770      	bx	lr
 80066f4:	b510      	push	{r4, lr}
 80066f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066fe:	4291      	cmp	r1, r2
 8006700:	d1f9      	bne.n	80066f6 <memcpy+0xe>
 8006702:	bd10      	pop	{r4, pc}

08006704 <__malloc_lock>:
 8006704:	4801      	ldr	r0, [pc, #4]	; (800670c <__malloc_lock+0x8>)
 8006706:	f001 bb87 	b.w	8007e18 <__retarget_lock_acquire_recursive>
 800670a:	bf00      	nop
 800670c:	20011aa0 	.word	0x20011aa0

08006710 <__malloc_unlock>:
 8006710:	4801      	ldr	r0, [pc, #4]	; (8006718 <__malloc_unlock+0x8>)
 8006712:	f001 bb82 	b.w	8007e1a <__retarget_lock_release_recursive>
 8006716:	bf00      	nop
 8006718:	20011aa0 	.word	0x20011aa0

0800671c <_Balloc>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006720:	4604      	mov	r4, r0
 8006722:	460d      	mov	r5, r1
 8006724:	b976      	cbnz	r6, 8006744 <_Balloc+0x28>
 8006726:	2010      	movs	r0, #16
 8006728:	f7fe fb2e 	bl	8004d88 <malloc>
 800672c:	4602      	mov	r2, r0
 800672e:	6260      	str	r0, [r4, #36]	; 0x24
 8006730:	b920      	cbnz	r0, 800673c <_Balloc+0x20>
 8006732:	4b18      	ldr	r3, [pc, #96]	; (8006794 <_Balloc+0x78>)
 8006734:	4818      	ldr	r0, [pc, #96]	; (8006798 <_Balloc+0x7c>)
 8006736:	2166      	movs	r1, #102	; 0x66
 8006738:	f001 f986 	bl	8007a48 <__assert_func>
 800673c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006740:	6006      	str	r6, [r0, #0]
 8006742:	60c6      	str	r6, [r0, #12]
 8006744:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006746:	68f3      	ldr	r3, [r6, #12]
 8006748:	b183      	cbz	r3, 800676c <_Balloc+0x50>
 800674a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006752:	b9b8      	cbnz	r0, 8006784 <_Balloc+0x68>
 8006754:	2101      	movs	r1, #1
 8006756:	fa01 f605 	lsl.w	r6, r1, r5
 800675a:	1d72      	adds	r2, r6, #5
 800675c:	0092      	lsls	r2, r2, #2
 800675e:	4620      	mov	r0, r4
 8006760:	f000 fb60 	bl	8006e24 <_calloc_r>
 8006764:	b160      	cbz	r0, 8006780 <_Balloc+0x64>
 8006766:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800676a:	e00e      	b.n	800678a <_Balloc+0x6e>
 800676c:	2221      	movs	r2, #33	; 0x21
 800676e:	2104      	movs	r1, #4
 8006770:	4620      	mov	r0, r4
 8006772:	f000 fb57 	bl	8006e24 <_calloc_r>
 8006776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006778:	60f0      	str	r0, [r6, #12]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e4      	bne.n	800674a <_Balloc+0x2e>
 8006780:	2000      	movs	r0, #0
 8006782:	bd70      	pop	{r4, r5, r6, pc}
 8006784:	6802      	ldr	r2, [r0, #0]
 8006786:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800678a:	2300      	movs	r3, #0
 800678c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006790:	e7f7      	b.n	8006782 <_Balloc+0x66>
 8006792:	bf00      	nop
 8006794:	0800961f 	.word	0x0800961f
 8006798:	080096a2 	.word	0x080096a2

0800679c <_Bfree>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80067a0:	4605      	mov	r5, r0
 80067a2:	460c      	mov	r4, r1
 80067a4:	b976      	cbnz	r6, 80067c4 <_Bfree+0x28>
 80067a6:	2010      	movs	r0, #16
 80067a8:	f7fe faee 	bl	8004d88 <malloc>
 80067ac:	4602      	mov	r2, r0
 80067ae:	6268      	str	r0, [r5, #36]	; 0x24
 80067b0:	b920      	cbnz	r0, 80067bc <_Bfree+0x20>
 80067b2:	4b09      	ldr	r3, [pc, #36]	; (80067d8 <_Bfree+0x3c>)
 80067b4:	4809      	ldr	r0, [pc, #36]	; (80067dc <_Bfree+0x40>)
 80067b6:	218a      	movs	r1, #138	; 0x8a
 80067b8:	f001 f946 	bl	8007a48 <__assert_func>
 80067bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067c0:	6006      	str	r6, [r0, #0]
 80067c2:	60c6      	str	r6, [r0, #12]
 80067c4:	b13c      	cbz	r4, 80067d6 <_Bfree+0x3a>
 80067c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80067c8:	6862      	ldr	r2, [r4, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067d0:	6021      	str	r1, [r4, #0]
 80067d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067d6:	bd70      	pop	{r4, r5, r6, pc}
 80067d8:	0800961f 	.word	0x0800961f
 80067dc:	080096a2 	.word	0x080096a2

080067e0 <__multadd>:
 80067e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e4:	690d      	ldr	r5, [r1, #16]
 80067e6:	4607      	mov	r7, r0
 80067e8:	460c      	mov	r4, r1
 80067ea:	461e      	mov	r6, r3
 80067ec:	f101 0c14 	add.w	ip, r1, #20
 80067f0:	2000      	movs	r0, #0
 80067f2:	f8dc 3000 	ldr.w	r3, [ip]
 80067f6:	b299      	uxth	r1, r3
 80067f8:	fb02 6101 	mla	r1, r2, r1, r6
 80067fc:	0c1e      	lsrs	r6, r3, #16
 80067fe:	0c0b      	lsrs	r3, r1, #16
 8006800:	fb02 3306 	mla	r3, r2, r6, r3
 8006804:	b289      	uxth	r1, r1
 8006806:	3001      	adds	r0, #1
 8006808:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800680c:	4285      	cmp	r5, r0
 800680e:	f84c 1b04 	str.w	r1, [ip], #4
 8006812:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006816:	dcec      	bgt.n	80067f2 <__multadd+0x12>
 8006818:	b30e      	cbz	r6, 800685e <__multadd+0x7e>
 800681a:	68a3      	ldr	r3, [r4, #8]
 800681c:	42ab      	cmp	r3, r5
 800681e:	dc19      	bgt.n	8006854 <__multadd+0x74>
 8006820:	6861      	ldr	r1, [r4, #4]
 8006822:	4638      	mov	r0, r7
 8006824:	3101      	adds	r1, #1
 8006826:	f7ff ff79 	bl	800671c <_Balloc>
 800682a:	4680      	mov	r8, r0
 800682c:	b928      	cbnz	r0, 800683a <__multadd+0x5a>
 800682e:	4602      	mov	r2, r0
 8006830:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <__multadd+0x84>)
 8006832:	480d      	ldr	r0, [pc, #52]	; (8006868 <__multadd+0x88>)
 8006834:	21b5      	movs	r1, #181	; 0xb5
 8006836:	f001 f907 	bl	8007a48 <__assert_func>
 800683a:	6922      	ldr	r2, [r4, #16]
 800683c:	3202      	adds	r2, #2
 800683e:	f104 010c 	add.w	r1, r4, #12
 8006842:	0092      	lsls	r2, r2, #2
 8006844:	300c      	adds	r0, #12
 8006846:	f7ff ff4f 	bl	80066e8 <memcpy>
 800684a:	4621      	mov	r1, r4
 800684c:	4638      	mov	r0, r7
 800684e:	f7ff ffa5 	bl	800679c <_Bfree>
 8006852:	4644      	mov	r4, r8
 8006854:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006858:	3501      	adds	r5, #1
 800685a:	615e      	str	r6, [r3, #20]
 800685c:	6125      	str	r5, [r4, #16]
 800685e:	4620      	mov	r0, r4
 8006860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006864:	08009691 	.word	0x08009691
 8006868:	080096a2 	.word	0x080096a2

0800686c <__hi0bits>:
 800686c:	0c03      	lsrs	r3, r0, #16
 800686e:	041b      	lsls	r3, r3, #16
 8006870:	b9d3      	cbnz	r3, 80068a8 <__hi0bits+0x3c>
 8006872:	0400      	lsls	r0, r0, #16
 8006874:	2310      	movs	r3, #16
 8006876:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800687a:	bf04      	itt	eq
 800687c:	0200      	lsleq	r0, r0, #8
 800687e:	3308      	addeq	r3, #8
 8006880:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006884:	bf04      	itt	eq
 8006886:	0100      	lsleq	r0, r0, #4
 8006888:	3304      	addeq	r3, #4
 800688a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800688e:	bf04      	itt	eq
 8006890:	0080      	lsleq	r0, r0, #2
 8006892:	3302      	addeq	r3, #2
 8006894:	2800      	cmp	r0, #0
 8006896:	db05      	blt.n	80068a4 <__hi0bits+0x38>
 8006898:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800689c:	f103 0301 	add.w	r3, r3, #1
 80068a0:	bf08      	it	eq
 80068a2:	2320      	moveq	r3, #32
 80068a4:	4618      	mov	r0, r3
 80068a6:	4770      	bx	lr
 80068a8:	2300      	movs	r3, #0
 80068aa:	e7e4      	b.n	8006876 <__hi0bits+0xa>

080068ac <__lo0bits>:
 80068ac:	6803      	ldr	r3, [r0, #0]
 80068ae:	f013 0207 	ands.w	r2, r3, #7
 80068b2:	4601      	mov	r1, r0
 80068b4:	d00b      	beq.n	80068ce <__lo0bits+0x22>
 80068b6:	07da      	lsls	r2, r3, #31
 80068b8:	d423      	bmi.n	8006902 <__lo0bits+0x56>
 80068ba:	0798      	lsls	r0, r3, #30
 80068bc:	bf49      	itett	mi
 80068be:	085b      	lsrmi	r3, r3, #1
 80068c0:	089b      	lsrpl	r3, r3, #2
 80068c2:	2001      	movmi	r0, #1
 80068c4:	600b      	strmi	r3, [r1, #0]
 80068c6:	bf5c      	itt	pl
 80068c8:	600b      	strpl	r3, [r1, #0]
 80068ca:	2002      	movpl	r0, #2
 80068cc:	4770      	bx	lr
 80068ce:	b298      	uxth	r0, r3
 80068d0:	b9a8      	cbnz	r0, 80068fe <__lo0bits+0x52>
 80068d2:	0c1b      	lsrs	r3, r3, #16
 80068d4:	2010      	movs	r0, #16
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	b90a      	cbnz	r2, 80068de <__lo0bits+0x32>
 80068da:	3008      	adds	r0, #8
 80068dc:	0a1b      	lsrs	r3, r3, #8
 80068de:	071a      	lsls	r2, r3, #28
 80068e0:	bf04      	itt	eq
 80068e2:	091b      	lsreq	r3, r3, #4
 80068e4:	3004      	addeq	r0, #4
 80068e6:	079a      	lsls	r2, r3, #30
 80068e8:	bf04      	itt	eq
 80068ea:	089b      	lsreq	r3, r3, #2
 80068ec:	3002      	addeq	r0, #2
 80068ee:	07da      	lsls	r2, r3, #31
 80068f0:	d403      	bmi.n	80068fa <__lo0bits+0x4e>
 80068f2:	085b      	lsrs	r3, r3, #1
 80068f4:	f100 0001 	add.w	r0, r0, #1
 80068f8:	d005      	beq.n	8006906 <__lo0bits+0x5a>
 80068fa:	600b      	str	r3, [r1, #0]
 80068fc:	4770      	bx	lr
 80068fe:	4610      	mov	r0, r2
 8006900:	e7e9      	b.n	80068d6 <__lo0bits+0x2a>
 8006902:	2000      	movs	r0, #0
 8006904:	4770      	bx	lr
 8006906:	2020      	movs	r0, #32
 8006908:	4770      	bx	lr
	...

0800690c <__i2b>:
 800690c:	b510      	push	{r4, lr}
 800690e:	460c      	mov	r4, r1
 8006910:	2101      	movs	r1, #1
 8006912:	f7ff ff03 	bl	800671c <_Balloc>
 8006916:	4602      	mov	r2, r0
 8006918:	b928      	cbnz	r0, 8006926 <__i2b+0x1a>
 800691a:	4b05      	ldr	r3, [pc, #20]	; (8006930 <__i2b+0x24>)
 800691c:	4805      	ldr	r0, [pc, #20]	; (8006934 <__i2b+0x28>)
 800691e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006922:	f001 f891 	bl	8007a48 <__assert_func>
 8006926:	2301      	movs	r3, #1
 8006928:	6144      	str	r4, [r0, #20]
 800692a:	6103      	str	r3, [r0, #16]
 800692c:	bd10      	pop	{r4, pc}
 800692e:	bf00      	nop
 8006930:	08009691 	.word	0x08009691
 8006934:	080096a2 	.word	0x080096a2

08006938 <__multiply>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	4691      	mov	r9, r2
 800693e:	690a      	ldr	r2, [r1, #16]
 8006940:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006944:	429a      	cmp	r2, r3
 8006946:	bfb8      	it	lt
 8006948:	460b      	movlt	r3, r1
 800694a:	460c      	mov	r4, r1
 800694c:	bfbc      	itt	lt
 800694e:	464c      	movlt	r4, r9
 8006950:	4699      	movlt	r9, r3
 8006952:	6927      	ldr	r7, [r4, #16]
 8006954:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006958:	68a3      	ldr	r3, [r4, #8]
 800695a:	6861      	ldr	r1, [r4, #4]
 800695c:	eb07 060a 	add.w	r6, r7, sl
 8006960:	42b3      	cmp	r3, r6
 8006962:	b085      	sub	sp, #20
 8006964:	bfb8      	it	lt
 8006966:	3101      	addlt	r1, #1
 8006968:	f7ff fed8 	bl	800671c <_Balloc>
 800696c:	b930      	cbnz	r0, 800697c <__multiply+0x44>
 800696e:	4602      	mov	r2, r0
 8006970:	4b44      	ldr	r3, [pc, #272]	; (8006a84 <__multiply+0x14c>)
 8006972:	4845      	ldr	r0, [pc, #276]	; (8006a88 <__multiply+0x150>)
 8006974:	f240 115d 	movw	r1, #349	; 0x15d
 8006978:	f001 f866 	bl	8007a48 <__assert_func>
 800697c:	f100 0514 	add.w	r5, r0, #20
 8006980:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006984:	462b      	mov	r3, r5
 8006986:	2200      	movs	r2, #0
 8006988:	4543      	cmp	r3, r8
 800698a:	d321      	bcc.n	80069d0 <__multiply+0x98>
 800698c:	f104 0314 	add.w	r3, r4, #20
 8006990:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006994:	f109 0314 	add.w	r3, r9, #20
 8006998:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800699c:	9202      	str	r2, [sp, #8]
 800699e:	1b3a      	subs	r2, r7, r4
 80069a0:	3a15      	subs	r2, #21
 80069a2:	f022 0203 	bic.w	r2, r2, #3
 80069a6:	3204      	adds	r2, #4
 80069a8:	f104 0115 	add.w	r1, r4, #21
 80069ac:	428f      	cmp	r7, r1
 80069ae:	bf38      	it	cc
 80069b0:	2204      	movcc	r2, #4
 80069b2:	9201      	str	r2, [sp, #4]
 80069b4:	9a02      	ldr	r2, [sp, #8]
 80069b6:	9303      	str	r3, [sp, #12]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d80c      	bhi.n	80069d6 <__multiply+0x9e>
 80069bc:	2e00      	cmp	r6, #0
 80069be:	dd03      	ble.n	80069c8 <__multiply+0x90>
 80069c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d05a      	beq.n	8006a7e <__multiply+0x146>
 80069c8:	6106      	str	r6, [r0, #16]
 80069ca:	b005      	add	sp, #20
 80069cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d0:	f843 2b04 	str.w	r2, [r3], #4
 80069d4:	e7d8      	b.n	8006988 <__multiply+0x50>
 80069d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80069da:	f1ba 0f00 	cmp.w	sl, #0
 80069de:	d024      	beq.n	8006a2a <__multiply+0xf2>
 80069e0:	f104 0e14 	add.w	lr, r4, #20
 80069e4:	46a9      	mov	r9, r5
 80069e6:	f04f 0c00 	mov.w	ip, #0
 80069ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80069ee:	f8d9 1000 	ldr.w	r1, [r9]
 80069f2:	fa1f fb82 	uxth.w	fp, r2
 80069f6:	b289      	uxth	r1, r1
 80069f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80069fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006a00:	f8d9 2000 	ldr.w	r2, [r9]
 8006a04:	4461      	add	r1, ip
 8006a06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a0a:	fb0a c20b 	mla	r2, sl, fp, ip
 8006a0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a12:	b289      	uxth	r1, r1
 8006a14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a18:	4577      	cmp	r7, lr
 8006a1a:	f849 1b04 	str.w	r1, [r9], #4
 8006a1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a22:	d8e2      	bhi.n	80069ea <__multiply+0xb2>
 8006a24:	9a01      	ldr	r2, [sp, #4]
 8006a26:	f845 c002 	str.w	ip, [r5, r2]
 8006a2a:	9a03      	ldr	r2, [sp, #12]
 8006a2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a30:	3304      	adds	r3, #4
 8006a32:	f1b9 0f00 	cmp.w	r9, #0
 8006a36:	d020      	beq.n	8006a7a <__multiply+0x142>
 8006a38:	6829      	ldr	r1, [r5, #0]
 8006a3a:	f104 0c14 	add.w	ip, r4, #20
 8006a3e:	46ae      	mov	lr, r5
 8006a40:	f04f 0a00 	mov.w	sl, #0
 8006a44:	f8bc b000 	ldrh.w	fp, [ip]
 8006a48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006a4c:	fb09 220b 	mla	r2, r9, fp, r2
 8006a50:	4492      	add	sl, r2
 8006a52:	b289      	uxth	r1, r1
 8006a54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006a58:	f84e 1b04 	str.w	r1, [lr], #4
 8006a5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a60:	f8be 1000 	ldrh.w	r1, [lr]
 8006a64:	0c12      	lsrs	r2, r2, #16
 8006a66:	fb09 1102 	mla	r1, r9, r2, r1
 8006a6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006a6e:	4567      	cmp	r7, ip
 8006a70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a74:	d8e6      	bhi.n	8006a44 <__multiply+0x10c>
 8006a76:	9a01      	ldr	r2, [sp, #4]
 8006a78:	50a9      	str	r1, [r5, r2]
 8006a7a:	3504      	adds	r5, #4
 8006a7c:	e79a      	b.n	80069b4 <__multiply+0x7c>
 8006a7e:	3e01      	subs	r6, #1
 8006a80:	e79c      	b.n	80069bc <__multiply+0x84>
 8006a82:	bf00      	nop
 8006a84:	08009691 	.word	0x08009691
 8006a88:	080096a2 	.word	0x080096a2

08006a8c <__pow5mult>:
 8006a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a90:	4615      	mov	r5, r2
 8006a92:	f012 0203 	ands.w	r2, r2, #3
 8006a96:	4606      	mov	r6, r0
 8006a98:	460f      	mov	r7, r1
 8006a9a:	d007      	beq.n	8006aac <__pow5mult+0x20>
 8006a9c:	4c25      	ldr	r4, [pc, #148]	; (8006b34 <__pow5mult+0xa8>)
 8006a9e:	3a01      	subs	r2, #1
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006aa6:	f7ff fe9b 	bl	80067e0 <__multadd>
 8006aaa:	4607      	mov	r7, r0
 8006aac:	10ad      	asrs	r5, r5, #2
 8006aae:	d03d      	beq.n	8006b2c <__pow5mult+0xa0>
 8006ab0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006ab2:	b97c      	cbnz	r4, 8006ad4 <__pow5mult+0x48>
 8006ab4:	2010      	movs	r0, #16
 8006ab6:	f7fe f967 	bl	8004d88 <malloc>
 8006aba:	4602      	mov	r2, r0
 8006abc:	6270      	str	r0, [r6, #36]	; 0x24
 8006abe:	b928      	cbnz	r0, 8006acc <__pow5mult+0x40>
 8006ac0:	4b1d      	ldr	r3, [pc, #116]	; (8006b38 <__pow5mult+0xac>)
 8006ac2:	481e      	ldr	r0, [pc, #120]	; (8006b3c <__pow5mult+0xb0>)
 8006ac4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ac8:	f000 ffbe 	bl	8007a48 <__assert_func>
 8006acc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ad0:	6004      	str	r4, [r0, #0]
 8006ad2:	60c4      	str	r4, [r0, #12]
 8006ad4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ad8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006adc:	b94c      	cbnz	r4, 8006af2 <__pow5mult+0x66>
 8006ade:	f240 2171 	movw	r1, #625	; 0x271
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f7ff ff12 	bl	800690c <__i2b>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f8c8 0008 	str.w	r0, [r8, #8]
 8006aee:	4604      	mov	r4, r0
 8006af0:	6003      	str	r3, [r0, #0]
 8006af2:	f04f 0900 	mov.w	r9, #0
 8006af6:	07eb      	lsls	r3, r5, #31
 8006af8:	d50a      	bpl.n	8006b10 <__pow5mult+0x84>
 8006afa:	4639      	mov	r1, r7
 8006afc:	4622      	mov	r2, r4
 8006afe:	4630      	mov	r0, r6
 8006b00:	f7ff ff1a 	bl	8006938 <__multiply>
 8006b04:	4639      	mov	r1, r7
 8006b06:	4680      	mov	r8, r0
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f7ff fe47 	bl	800679c <_Bfree>
 8006b0e:	4647      	mov	r7, r8
 8006b10:	106d      	asrs	r5, r5, #1
 8006b12:	d00b      	beq.n	8006b2c <__pow5mult+0xa0>
 8006b14:	6820      	ldr	r0, [r4, #0]
 8006b16:	b938      	cbnz	r0, 8006b28 <__pow5mult+0x9c>
 8006b18:	4622      	mov	r2, r4
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f7ff ff0b 	bl	8006938 <__multiply>
 8006b22:	6020      	str	r0, [r4, #0]
 8006b24:	f8c0 9000 	str.w	r9, [r0]
 8006b28:	4604      	mov	r4, r0
 8006b2a:	e7e4      	b.n	8006af6 <__pow5mult+0x6a>
 8006b2c:	4638      	mov	r0, r7
 8006b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b32:	bf00      	nop
 8006b34:	080097f0 	.word	0x080097f0
 8006b38:	0800961f 	.word	0x0800961f
 8006b3c:	080096a2 	.word	0x080096a2

08006b40 <__lshift>:
 8006b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b44:	460c      	mov	r4, r1
 8006b46:	6849      	ldr	r1, [r1, #4]
 8006b48:	6923      	ldr	r3, [r4, #16]
 8006b4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b4e:	68a3      	ldr	r3, [r4, #8]
 8006b50:	4607      	mov	r7, r0
 8006b52:	4691      	mov	r9, r2
 8006b54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b58:	f108 0601 	add.w	r6, r8, #1
 8006b5c:	42b3      	cmp	r3, r6
 8006b5e:	db0b      	blt.n	8006b78 <__lshift+0x38>
 8006b60:	4638      	mov	r0, r7
 8006b62:	f7ff fddb 	bl	800671c <_Balloc>
 8006b66:	4605      	mov	r5, r0
 8006b68:	b948      	cbnz	r0, 8006b7e <__lshift+0x3e>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	4b2a      	ldr	r3, [pc, #168]	; (8006c18 <__lshift+0xd8>)
 8006b6e:	482b      	ldr	r0, [pc, #172]	; (8006c1c <__lshift+0xdc>)
 8006b70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006b74:	f000 ff68 	bl	8007a48 <__assert_func>
 8006b78:	3101      	adds	r1, #1
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	e7ee      	b.n	8006b5c <__lshift+0x1c>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f100 0114 	add.w	r1, r0, #20
 8006b84:	f100 0210 	add.w	r2, r0, #16
 8006b88:	4618      	mov	r0, r3
 8006b8a:	4553      	cmp	r3, sl
 8006b8c:	db37      	blt.n	8006bfe <__lshift+0xbe>
 8006b8e:	6920      	ldr	r0, [r4, #16]
 8006b90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b94:	f104 0314 	add.w	r3, r4, #20
 8006b98:	f019 091f 	ands.w	r9, r9, #31
 8006b9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ba0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ba4:	d02f      	beq.n	8006c06 <__lshift+0xc6>
 8006ba6:	f1c9 0e20 	rsb	lr, r9, #32
 8006baa:	468a      	mov	sl, r1
 8006bac:	f04f 0c00 	mov.w	ip, #0
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	fa02 f209 	lsl.w	r2, r2, r9
 8006bb6:	ea42 020c 	orr.w	r2, r2, ip
 8006bba:	f84a 2b04 	str.w	r2, [sl], #4
 8006bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bc2:	4298      	cmp	r0, r3
 8006bc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006bc8:	d8f2      	bhi.n	8006bb0 <__lshift+0x70>
 8006bca:	1b03      	subs	r3, r0, r4
 8006bcc:	3b15      	subs	r3, #21
 8006bce:	f023 0303 	bic.w	r3, r3, #3
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	f104 0215 	add.w	r2, r4, #21
 8006bd8:	4290      	cmp	r0, r2
 8006bda:	bf38      	it	cc
 8006bdc:	2304      	movcc	r3, #4
 8006bde:	f841 c003 	str.w	ip, [r1, r3]
 8006be2:	f1bc 0f00 	cmp.w	ip, #0
 8006be6:	d001      	beq.n	8006bec <__lshift+0xac>
 8006be8:	f108 0602 	add.w	r6, r8, #2
 8006bec:	3e01      	subs	r6, #1
 8006bee:	4638      	mov	r0, r7
 8006bf0:	612e      	str	r6, [r5, #16]
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	f7ff fdd2 	bl	800679c <_Bfree>
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c02:	3301      	adds	r3, #1
 8006c04:	e7c1      	b.n	8006b8a <__lshift+0x4a>
 8006c06:	3904      	subs	r1, #4
 8006c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c10:	4298      	cmp	r0, r3
 8006c12:	d8f9      	bhi.n	8006c08 <__lshift+0xc8>
 8006c14:	e7ea      	b.n	8006bec <__lshift+0xac>
 8006c16:	bf00      	nop
 8006c18:	08009691 	.word	0x08009691
 8006c1c:	080096a2 	.word	0x080096a2

08006c20 <__mcmp>:
 8006c20:	b530      	push	{r4, r5, lr}
 8006c22:	6902      	ldr	r2, [r0, #16]
 8006c24:	690c      	ldr	r4, [r1, #16]
 8006c26:	1b12      	subs	r2, r2, r4
 8006c28:	d10e      	bne.n	8006c48 <__mcmp+0x28>
 8006c2a:	f100 0314 	add.w	r3, r0, #20
 8006c2e:	3114      	adds	r1, #20
 8006c30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006c34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006c38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006c3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006c40:	42a5      	cmp	r5, r4
 8006c42:	d003      	beq.n	8006c4c <__mcmp+0x2c>
 8006c44:	d305      	bcc.n	8006c52 <__mcmp+0x32>
 8006c46:	2201      	movs	r2, #1
 8006c48:	4610      	mov	r0, r2
 8006c4a:	bd30      	pop	{r4, r5, pc}
 8006c4c:	4283      	cmp	r3, r0
 8006c4e:	d3f3      	bcc.n	8006c38 <__mcmp+0x18>
 8006c50:	e7fa      	b.n	8006c48 <__mcmp+0x28>
 8006c52:	f04f 32ff 	mov.w	r2, #4294967295
 8006c56:	e7f7      	b.n	8006c48 <__mcmp+0x28>

08006c58 <__mdiff>:
 8006c58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	4606      	mov	r6, r0
 8006c60:	4611      	mov	r1, r2
 8006c62:	4620      	mov	r0, r4
 8006c64:	4690      	mov	r8, r2
 8006c66:	f7ff ffdb 	bl	8006c20 <__mcmp>
 8006c6a:	1e05      	subs	r5, r0, #0
 8006c6c:	d110      	bne.n	8006c90 <__mdiff+0x38>
 8006c6e:	4629      	mov	r1, r5
 8006c70:	4630      	mov	r0, r6
 8006c72:	f7ff fd53 	bl	800671c <_Balloc>
 8006c76:	b930      	cbnz	r0, 8006c86 <__mdiff+0x2e>
 8006c78:	4b3a      	ldr	r3, [pc, #232]	; (8006d64 <__mdiff+0x10c>)
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	f240 2132 	movw	r1, #562	; 0x232
 8006c80:	4839      	ldr	r0, [pc, #228]	; (8006d68 <__mdiff+0x110>)
 8006c82:	f000 fee1 	bl	8007a48 <__assert_func>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c90:	bfa4      	itt	ge
 8006c92:	4643      	movge	r3, r8
 8006c94:	46a0      	movge	r8, r4
 8006c96:	4630      	mov	r0, r6
 8006c98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006c9c:	bfa6      	itte	ge
 8006c9e:	461c      	movge	r4, r3
 8006ca0:	2500      	movge	r5, #0
 8006ca2:	2501      	movlt	r5, #1
 8006ca4:	f7ff fd3a 	bl	800671c <_Balloc>
 8006ca8:	b920      	cbnz	r0, 8006cb4 <__mdiff+0x5c>
 8006caa:	4b2e      	ldr	r3, [pc, #184]	; (8006d64 <__mdiff+0x10c>)
 8006cac:	4602      	mov	r2, r0
 8006cae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006cb2:	e7e5      	b.n	8006c80 <__mdiff+0x28>
 8006cb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006cb8:	6926      	ldr	r6, [r4, #16]
 8006cba:	60c5      	str	r5, [r0, #12]
 8006cbc:	f104 0914 	add.w	r9, r4, #20
 8006cc0:	f108 0514 	add.w	r5, r8, #20
 8006cc4:	f100 0e14 	add.w	lr, r0, #20
 8006cc8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ccc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006cd0:	f108 0210 	add.w	r2, r8, #16
 8006cd4:	46f2      	mov	sl, lr
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8006cdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ce0:	fa1f f883 	uxth.w	r8, r3
 8006ce4:	fa11 f18b 	uxtah	r1, r1, fp
 8006ce8:	0c1b      	lsrs	r3, r3, #16
 8006cea:	eba1 0808 	sub.w	r8, r1, r8
 8006cee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006cf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006cf6:	fa1f f888 	uxth.w	r8, r8
 8006cfa:	1419      	asrs	r1, r3, #16
 8006cfc:	454e      	cmp	r6, r9
 8006cfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d02:	f84a 3b04 	str.w	r3, [sl], #4
 8006d06:	d8e7      	bhi.n	8006cd8 <__mdiff+0x80>
 8006d08:	1b33      	subs	r3, r6, r4
 8006d0a:	3b15      	subs	r3, #21
 8006d0c:	f023 0303 	bic.w	r3, r3, #3
 8006d10:	3304      	adds	r3, #4
 8006d12:	3415      	adds	r4, #21
 8006d14:	42a6      	cmp	r6, r4
 8006d16:	bf38      	it	cc
 8006d18:	2304      	movcc	r3, #4
 8006d1a:	441d      	add	r5, r3
 8006d1c:	4473      	add	r3, lr
 8006d1e:	469e      	mov	lr, r3
 8006d20:	462e      	mov	r6, r5
 8006d22:	4566      	cmp	r6, ip
 8006d24:	d30e      	bcc.n	8006d44 <__mdiff+0xec>
 8006d26:	f10c 0203 	add.w	r2, ip, #3
 8006d2a:	1b52      	subs	r2, r2, r5
 8006d2c:	f022 0203 	bic.w	r2, r2, #3
 8006d30:	3d03      	subs	r5, #3
 8006d32:	45ac      	cmp	ip, r5
 8006d34:	bf38      	it	cc
 8006d36:	2200      	movcc	r2, #0
 8006d38:	441a      	add	r2, r3
 8006d3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006d3e:	b17b      	cbz	r3, 8006d60 <__mdiff+0x108>
 8006d40:	6107      	str	r7, [r0, #16]
 8006d42:	e7a3      	b.n	8006c8c <__mdiff+0x34>
 8006d44:	f856 8b04 	ldr.w	r8, [r6], #4
 8006d48:	fa11 f288 	uxtah	r2, r1, r8
 8006d4c:	1414      	asrs	r4, r2, #16
 8006d4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006d52:	b292      	uxth	r2, r2
 8006d54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006d58:	f84e 2b04 	str.w	r2, [lr], #4
 8006d5c:	1421      	asrs	r1, r4, #16
 8006d5e:	e7e0      	b.n	8006d22 <__mdiff+0xca>
 8006d60:	3f01      	subs	r7, #1
 8006d62:	e7ea      	b.n	8006d3a <__mdiff+0xe2>
 8006d64:	08009691 	.word	0x08009691
 8006d68:	080096a2 	.word	0x080096a2

08006d6c <__d2b>:
 8006d6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d70:	4689      	mov	r9, r1
 8006d72:	2101      	movs	r1, #1
 8006d74:	ec57 6b10 	vmov	r6, r7, d0
 8006d78:	4690      	mov	r8, r2
 8006d7a:	f7ff fccf 	bl	800671c <_Balloc>
 8006d7e:	4604      	mov	r4, r0
 8006d80:	b930      	cbnz	r0, 8006d90 <__d2b+0x24>
 8006d82:	4602      	mov	r2, r0
 8006d84:	4b25      	ldr	r3, [pc, #148]	; (8006e1c <__d2b+0xb0>)
 8006d86:	4826      	ldr	r0, [pc, #152]	; (8006e20 <__d2b+0xb4>)
 8006d88:	f240 310a 	movw	r1, #778	; 0x30a
 8006d8c:	f000 fe5c 	bl	8007a48 <__assert_func>
 8006d90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006d94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d98:	bb35      	cbnz	r5, 8006de8 <__d2b+0x7c>
 8006d9a:	2e00      	cmp	r6, #0
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	d028      	beq.n	8006df2 <__d2b+0x86>
 8006da0:	4668      	mov	r0, sp
 8006da2:	9600      	str	r6, [sp, #0]
 8006da4:	f7ff fd82 	bl	80068ac <__lo0bits>
 8006da8:	9900      	ldr	r1, [sp, #0]
 8006daa:	b300      	cbz	r0, 8006dee <__d2b+0x82>
 8006dac:	9a01      	ldr	r2, [sp, #4]
 8006dae:	f1c0 0320 	rsb	r3, r0, #32
 8006db2:	fa02 f303 	lsl.w	r3, r2, r3
 8006db6:	430b      	orrs	r3, r1
 8006db8:	40c2      	lsrs	r2, r0
 8006dba:	6163      	str	r3, [r4, #20]
 8006dbc:	9201      	str	r2, [sp, #4]
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	61a3      	str	r3, [r4, #24]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bf14      	ite	ne
 8006dc6:	2202      	movne	r2, #2
 8006dc8:	2201      	moveq	r2, #1
 8006dca:	6122      	str	r2, [r4, #16]
 8006dcc:	b1d5      	cbz	r5, 8006e04 <__d2b+0x98>
 8006dce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006dd2:	4405      	add	r5, r0
 8006dd4:	f8c9 5000 	str.w	r5, [r9]
 8006dd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ddc:	f8c8 0000 	str.w	r0, [r8]
 8006de0:	4620      	mov	r0, r4
 8006de2:	b003      	add	sp, #12
 8006de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dec:	e7d5      	b.n	8006d9a <__d2b+0x2e>
 8006dee:	6161      	str	r1, [r4, #20]
 8006df0:	e7e5      	b.n	8006dbe <__d2b+0x52>
 8006df2:	a801      	add	r0, sp, #4
 8006df4:	f7ff fd5a 	bl	80068ac <__lo0bits>
 8006df8:	9b01      	ldr	r3, [sp, #4]
 8006dfa:	6163      	str	r3, [r4, #20]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	6122      	str	r2, [r4, #16]
 8006e00:	3020      	adds	r0, #32
 8006e02:	e7e3      	b.n	8006dcc <__d2b+0x60>
 8006e04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e0c:	f8c9 0000 	str.w	r0, [r9]
 8006e10:	6918      	ldr	r0, [r3, #16]
 8006e12:	f7ff fd2b 	bl	800686c <__hi0bits>
 8006e16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e1a:	e7df      	b.n	8006ddc <__d2b+0x70>
 8006e1c:	08009691 	.word	0x08009691
 8006e20:	080096a2 	.word	0x080096a2

08006e24 <_calloc_r>:
 8006e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e26:	fba1 2402 	umull	r2, r4, r1, r2
 8006e2a:	b94c      	cbnz	r4, 8006e40 <_calloc_r+0x1c>
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	9201      	str	r2, [sp, #4]
 8006e30:	f7fe f826 	bl	8004e80 <_malloc_r>
 8006e34:	9a01      	ldr	r2, [sp, #4]
 8006e36:	4605      	mov	r5, r0
 8006e38:	b930      	cbnz	r0, 8006e48 <_calloc_r+0x24>
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	b003      	add	sp, #12
 8006e3e:	bd30      	pop	{r4, r5, pc}
 8006e40:	220c      	movs	r2, #12
 8006e42:	6002      	str	r2, [r0, #0]
 8006e44:	2500      	movs	r5, #0
 8006e46:	e7f8      	b.n	8006e3a <_calloc_r+0x16>
 8006e48:	4621      	mov	r1, r4
 8006e4a:	f7fd ffa5 	bl	8004d98 <memset>
 8006e4e:	e7f4      	b.n	8006e3a <_calloc_r+0x16>

08006e50 <__ssputs_r>:
 8006e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e54:	688e      	ldr	r6, [r1, #8]
 8006e56:	429e      	cmp	r6, r3
 8006e58:	4682      	mov	sl, r0
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	4690      	mov	r8, r2
 8006e5e:	461f      	mov	r7, r3
 8006e60:	d838      	bhi.n	8006ed4 <__ssputs_r+0x84>
 8006e62:	898a      	ldrh	r2, [r1, #12]
 8006e64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e68:	d032      	beq.n	8006ed0 <__ssputs_r+0x80>
 8006e6a:	6825      	ldr	r5, [r4, #0]
 8006e6c:	6909      	ldr	r1, [r1, #16]
 8006e6e:	eba5 0901 	sub.w	r9, r5, r1
 8006e72:	6965      	ldr	r5, [r4, #20]
 8006e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	444b      	add	r3, r9
 8006e80:	106d      	asrs	r5, r5, #1
 8006e82:	429d      	cmp	r5, r3
 8006e84:	bf38      	it	cc
 8006e86:	461d      	movcc	r5, r3
 8006e88:	0553      	lsls	r3, r2, #21
 8006e8a:	d531      	bpl.n	8006ef0 <__ssputs_r+0xa0>
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	f7fd fff7 	bl	8004e80 <_malloc_r>
 8006e92:	4606      	mov	r6, r0
 8006e94:	b950      	cbnz	r0, 8006eac <__ssputs_r+0x5c>
 8006e96:	230c      	movs	r3, #12
 8006e98:	f8ca 3000 	str.w	r3, [sl]
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ea2:	81a3      	strh	r3, [r4, #12]
 8006ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eac:	6921      	ldr	r1, [r4, #16]
 8006eae:	464a      	mov	r2, r9
 8006eb0:	f7ff fc1a 	bl	80066e8 <memcpy>
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ebe:	81a3      	strh	r3, [r4, #12]
 8006ec0:	6126      	str	r6, [r4, #16]
 8006ec2:	6165      	str	r5, [r4, #20]
 8006ec4:	444e      	add	r6, r9
 8006ec6:	eba5 0509 	sub.w	r5, r5, r9
 8006eca:	6026      	str	r6, [r4, #0]
 8006ecc:	60a5      	str	r5, [r4, #8]
 8006ece:	463e      	mov	r6, r7
 8006ed0:	42be      	cmp	r6, r7
 8006ed2:	d900      	bls.n	8006ed6 <__ssputs_r+0x86>
 8006ed4:	463e      	mov	r6, r7
 8006ed6:	6820      	ldr	r0, [r4, #0]
 8006ed8:	4632      	mov	r2, r6
 8006eda:	4641      	mov	r1, r8
 8006edc:	f000 ffb0 	bl	8007e40 <memmove>
 8006ee0:	68a3      	ldr	r3, [r4, #8]
 8006ee2:	1b9b      	subs	r3, r3, r6
 8006ee4:	60a3      	str	r3, [r4, #8]
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	4433      	add	r3, r6
 8006eea:	6023      	str	r3, [r4, #0]
 8006eec:	2000      	movs	r0, #0
 8006eee:	e7db      	b.n	8006ea8 <__ssputs_r+0x58>
 8006ef0:	462a      	mov	r2, r5
 8006ef2:	f000 ffbf 	bl	8007e74 <_realloc_r>
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	d1e1      	bne.n	8006ec0 <__ssputs_r+0x70>
 8006efc:	6921      	ldr	r1, [r4, #16]
 8006efe:	4650      	mov	r0, sl
 8006f00:	f7fd ff52 	bl	8004da8 <_free_r>
 8006f04:	e7c7      	b.n	8006e96 <__ssputs_r+0x46>
	...

08006f08 <_svfiprintf_r>:
 8006f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0c:	4698      	mov	r8, r3
 8006f0e:	898b      	ldrh	r3, [r1, #12]
 8006f10:	061b      	lsls	r3, r3, #24
 8006f12:	b09d      	sub	sp, #116	; 0x74
 8006f14:	4607      	mov	r7, r0
 8006f16:	460d      	mov	r5, r1
 8006f18:	4614      	mov	r4, r2
 8006f1a:	d50e      	bpl.n	8006f3a <_svfiprintf_r+0x32>
 8006f1c:	690b      	ldr	r3, [r1, #16]
 8006f1e:	b963      	cbnz	r3, 8006f3a <_svfiprintf_r+0x32>
 8006f20:	2140      	movs	r1, #64	; 0x40
 8006f22:	f7fd ffad 	bl	8004e80 <_malloc_r>
 8006f26:	6028      	str	r0, [r5, #0]
 8006f28:	6128      	str	r0, [r5, #16]
 8006f2a:	b920      	cbnz	r0, 8006f36 <_svfiprintf_r+0x2e>
 8006f2c:	230c      	movs	r3, #12
 8006f2e:	603b      	str	r3, [r7, #0]
 8006f30:	f04f 30ff 	mov.w	r0, #4294967295
 8006f34:	e0d1      	b.n	80070da <_svfiprintf_r+0x1d2>
 8006f36:	2340      	movs	r3, #64	; 0x40
 8006f38:	616b      	str	r3, [r5, #20]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f3e:	2320      	movs	r3, #32
 8006f40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f48:	2330      	movs	r3, #48	; 0x30
 8006f4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80070f4 <_svfiprintf_r+0x1ec>
 8006f4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f52:	f04f 0901 	mov.w	r9, #1
 8006f56:	4623      	mov	r3, r4
 8006f58:	469a      	mov	sl, r3
 8006f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f5e:	b10a      	cbz	r2, 8006f64 <_svfiprintf_r+0x5c>
 8006f60:	2a25      	cmp	r2, #37	; 0x25
 8006f62:	d1f9      	bne.n	8006f58 <_svfiprintf_r+0x50>
 8006f64:	ebba 0b04 	subs.w	fp, sl, r4
 8006f68:	d00b      	beq.n	8006f82 <_svfiprintf_r+0x7a>
 8006f6a:	465b      	mov	r3, fp
 8006f6c:	4622      	mov	r2, r4
 8006f6e:	4629      	mov	r1, r5
 8006f70:	4638      	mov	r0, r7
 8006f72:	f7ff ff6d 	bl	8006e50 <__ssputs_r>
 8006f76:	3001      	adds	r0, #1
 8006f78:	f000 80aa 	beq.w	80070d0 <_svfiprintf_r+0x1c8>
 8006f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f7e:	445a      	add	r2, fp
 8006f80:	9209      	str	r2, [sp, #36]	; 0x24
 8006f82:	f89a 3000 	ldrb.w	r3, [sl]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 80a2 	beq.w	80070d0 <_svfiprintf_r+0x1c8>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f96:	f10a 0a01 	add.w	sl, sl, #1
 8006f9a:	9304      	str	r3, [sp, #16]
 8006f9c:	9307      	str	r3, [sp, #28]
 8006f9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fa2:	931a      	str	r3, [sp, #104]	; 0x68
 8006fa4:	4654      	mov	r4, sl
 8006fa6:	2205      	movs	r2, #5
 8006fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fac:	4851      	ldr	r0, [pc, #324]	; (80070f4 <_svfiprintf_r+0x1ec>)
 8006fae:	f7f9 f92f 	bl	8000210 <memchr>
 8006fb2:	9a04      	ldr	r2, [sp, #16]
 8006fb4:	b9d8      	cbnz	r0, 8006fee <_svfiprintf_r+0xe6>
 8006fb6:	06d0      	lsls	r0, r2, #27
 8006fb8:	bf44      	itt	mi
 8006fba:	2320      	movmi	r3, #32
 8006fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fc0:	0711      	lsls	r1, r2, #28
 8006fc2:	bf44      	itt	mi
 8006fc4:	232b      	movmi	r3, #43	; 0x2b
 8006fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fca:	f89a 3000 	ldrb.w	r3, [sl]
 8006fce:	2b2a      	cmp	r3, #42	; 0x2a
 8006fd0:	d015      	beq.n	8006ffe <_svfiprintf_r+0xf6>
 8006fd2:	9a07      	ldr	r2, [sp, #28]
 8006fd4:	4654      	mov	r4, sl
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	f04f 0c0a 	mov.w	ip, #10
 8006fdc:	4621      	mov	r1, r4
 8006fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fe2:	3b30      	subs	r3, #48	; 0x30
 8006fe4:	2b09      	cmp	r3, #9
 8006fe6:	d94e      	bls.n	8007086 <_svfiprintf_r+0x17e>
 8006fe8:	b1b0      	cbz	r0, 8007018 <_svfiprintf_r+0x110>
 8006fea:	9207      	str	r2, [sp, #28]
 8006fec:	e014      	b.n	8007018 <_svfiprintf_r+0x110>
 8006fee:	eba0 0308 	sub.w	r3, r0, r8
 8006ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	9304      	str	r3, [sp, #16]
 8006ffa:	46a2      	mov	sl, r4
 8006ffc:	e7d2      	b.n	8006fa4 <_svfiprintf_r+0x9c>
 8006ffe:	9b03      	ldr	r3, [sp, #12]
 8007000:	1d19      	adds	r1, r3, #4
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	9103      	str	r1, [sp, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	bfbb      	ittet	lt
 800700a:	425b      	neglt	r3, r3
 800700c:	f042 0202 	orrlt.w	r2, r2, #2
 8007010:	9307      	strge	r3, [sp, #28]
 8007012:	9307      	strlt	r3, [sp, #28]
 8007014:	bfb8      	it	lt
 8007016:	9204      	strlt	r2, [sp, #16]
 8007018:	7823      	ldrb	r3, [r4, #0]
 800701a:	2b2e      	cmp	r3, #46	; 0x2e
 800701c:	d10c      	bne.n	8007038 <_svfiprintf_r+0x130>
 800701e:	7863      	ldrb	r3, [r4, #1]
 8007020:	2b2a      	cmp	r3, #42	; 0x2a
 8007022:	d135      	bne.n	8007090 <_svfiprintf_r+0x188>
 8007024:	9b03      	ldr	r3, [sp, #12]
 8007026:	1d1a      	adds	r2, r3, #4
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	9203      	str	r2, [sp, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	bfb8      	it	lt
 8007030:	f04f 33ff 	movlt.w	r3, #4294967295
 8007034:	3402      	adds	r4, #2
 8007036:	9305      	str	r3, [sp, #20]
 8007038:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007104 <_svfiprintf_r+0x1fc>
 800703c:	7821      	ldrb	r1, [r4, #0]
 800703e:	2203      	movs	r2, #3
 8007040:	4650      	mov	r0, sl
 8007042:	f7f9 f8e5 	bl	8000210 <memchr>
 8007046:	b140      	cbz	r0, 800705a <_svfiprintf_r+0x152>
 8007048:	2340      	movs	r3, #64	; 0x40
 800704a:	eba0 000a 	sub.w	r0, r0, sl
 800704e:	fa03 f000 	lsl.w	r0, r3, r0
 8007052:	9b04      	ldr	r3, [sp, #16]
 8007054:	4303      	orrs	r3, r0
 8007056:	3401      	adds	r4, #1
 8007058:	9304      	str	r3, [sp, #16]
 800705a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800705e:	4826      	ldr	r0, [pc, #152]	; (80070f8 <_svfiprintf_r+0x1f0>)
 8007060:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007064:	2206      	movs	r2, #6
 8007066:	f7f9 f8d3 	bl	8000210 <memchr>
 800706a:	2800      	cmp	r0, #0
 800706c:	d038      	beq.n	80070e0 <_svfiprintf_r+0x1d8>
 800706e:	4b23      	ldr	r3, [pc, #140]	; (80070fc <_svfiprintf_r+0x1f4>)
 8007070:	bb1b      	cbnz	r3, 80070ba <_svfiprintf_r+0x1b2>
 8007072:	9b03      	ldr	r3, [sp, #12]
 8007074:	3307      	adds	r3, #7
 8007076:	f023 0307 	bic.w	r3, r3, #7
 800707a:	3308      	adds	r3, #8
 800707c:	9303      	str	r3, [sp, #12]
 800707e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007080:	4433      	add	r3, r6
 8007082:	9309      	str	r3, [sp, #36]	; 0x24
 8007084:	e767      	b.n	8006f56 <_svfiprintf_r+0x4e>
 8007086:	fb0c 3202 	mla	r2, ip, r2, r3
 800708a:	460c      	mov	r4, r1
 800708c:	2001      	movs	r0, #1
 800708e:	e7a5      	b.n	8006fdc <_svfiprintf_r+0xd4>
 8007090:	2300      	movs	r3, #0
 8007092:	3401      	adds	r4, #1
 8007094:	9305      	str	r3, [sp, #20]
 8007096:	4619      	mov	r1, r3
 8007098:	f04f 0c0a 	mov.w	ip, #10
 800709c:	4620      	mov	r0, r4
 800709e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070a2:	3a30      	subs	r2, #48	; 0x30
 80070a4:	2a09      	cmp	r2, #9
 80070a6:	d903      	bls.n	80070b0 <_svfiprintf_r+0x1a8>
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0c5      	beq.n	8007038 <_svfiprintf_r+0x130>
 80070ac:	9105      	str	r1, [sp, #20]
 80070ae:	e7c3      	b.n	8007038 <_svfiprintf_r+0x130>
 80070b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80070b4:	4604      	mov	r4, r0
 80070b6:	2301      	movs	r3, #1
 80070b8:	e7f0      	b.n	800709c <_svfiprintf_r+0x194>
 80070ba:	ab03      	add	r3, sp, #12
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	462a      	mov	r2, r5
 80070c0:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <_svfiprintf_r+0x1f8>)
 80070c2:	a904      	add	r1, sp, #16
 80070c4:	4638      	mov	r0, r7
 80070c6:	f7fd ffef 	bl	80050a8 <_printf_float>
 80070ca:	1c42      	adds	r2, r0, #1
 80070cc:	4606      	mov	r6, r0
 80070ce:	d1d6      	bne.n	800707e <_svfiprintf_r+0x176>
 80070d0:	89ab      	ldrh	r3, [r5, #12]
 80070d2:	065b      	lsls	r3, r3, #25
 80070d4:	f53f af2c 	bmi.w	8006f30 <_svfiprintf_r+0x28>
 80070d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070da:	b01d      	add	sp, #116	; 0x74
 80070dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e0:	ab03      	add	r3, sp, #12
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	462a      	mov	r2, r5
 80070e6:	4b06      	ldr	r3, [pc, #24]	; (8007100 <_svfiprintf_r+0x1f8>)
 80070e8:	a904      	add	r1, sp, #16
 80070ea:	4638      	mov	r0, r7
 80070ec:	f7fe fa80 	bl	80055f0 <_printf_i>
 80070f0:	e7eb      	b.n	80070ca <_svfiprintf_r+0x1c2>
 80070f2:	bf00      	nop
 80070f4:	080097fc 	.word	0x080097fc
 80070f8:	08009806 	.word	0x08009806
 80070fc:	080050a9 	.word	0x080050a9
 8007100:	08006e51 	.word	0x08006e51
 8007104:	08009802 	.word	0x08009802

08007108 <_sungetc_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	1c4b      	adds	r3, r1, #1
 800710c:	4614      	mov	r4, r2
 800710e:	d103      	bne.n	8007118 <_sungetc_r+0x10>
 8007110:	f04f 35ff 	mov.w	r5, #4294967295
 8007114:	4628      	mov	r0, r5
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	8993      	ldrh	r3, [r2, #12]
 800711a:	f023 0320 	bic.w	r3, r3, #32
 800711e:	8193      	strh	r3, [r2, #12]
 8007120:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007122:	6852      	ldr	r2, [r2, #4]
 8007124:	b2cd      	uxtb	r5, r1
 8007126:	b18b      	cbz	r3, 800714c <_sungetc_r+0x44>
 8007128:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800712a:	4293      	cmp	r3, r2
 800712c:	dd08      	ble.n	8007140 <_sungetc_r+0x38>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	1e5a      	subs	r2, r3, #1
 8007132:	6022      	str	r2, [r4, #0]
 8007134:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007138:	6863      	ldr	r3, [r4, #4]
 800713a:	3301      	adds	r3, #1
 800713c:	6063      	str	r3, [r4, #4]
 800713e:	e7e9      	b.n	8007114 <_sungetc_r+0xc>
 8007140:	4621      	mov	r1, r4
 8007142:	f000 fc47 	bl	80079d4 <__submore>
 8007146:	2800      	cmp	r0, #0
 8007148:	d0f1      	beq.n	800712e <_sungetc_r+0x26>
 800714a:	e7e1      	b.n	8007110 <_sungetc_r+0x8>
 800714c:	6921      	ldr	r1, [r4, #16]
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	b151      	cbz	r1, 8007168 <_sungetc_r+0x60>
 8007152:	4299      	cmp	r1, r3
 8007154:	d208      	bcs.n	8007168 <_sungetc_r+0x60>
 8007156:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800715a:	42a9      	cmp	r1, r5
 800715c:	d104      	bne.n	8007168 <_sungetc_r+0x60>
 800715e:	3b01      	subs	r3, #1
 8007160:	3201      	adds	r2, #1
 8007162:	6023      	str	r3, [r4, #0]
 8007164:	6062      	str	r2, [r4, #4]
 8007166:	e7d5      	b.n	8007114 <_sungetc_r+0xc>
 8007168:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800716c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007170:	6363      	str	r3, [r4, #52]	; 0x34
 8007172:	2303      	movs	r3, #3
 8007174:	63a3      	str	r3, [r4, #56]	; 0x38
 8007176:	4623      	mov	r3, r4
 8007178:	f803 5f46 	strb.w	r5, [r3, #70]!
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	2301      	movs	r3, #1
 8007180:	e7dc      	b.n	800713c <_sungetc_r+0x34>

08007182 <__ssrefill_r>:
 8007182:	b510      	push	{r4, lr}
 8007184:	460c      	mov	r4, r1
 8007186:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007188:	b169      	cbz	r1, 80071a6 <__ssrefill_r+0x24>
 800718a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800718e:	4299      	cmp	r1, r3
 8007190:	d001      	beq.n	8007196 <__ssrefill_r+0x14>
 8007192:	f7fd fe09 	bl	8004da8 <_free_r>
 8007196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007198:	6063      	str	r3, [r4, #4]
 800719a:	2000      	movs	r0, #0
 800719c:	6360      	str	r0, [r4, #52]	; 0x34
 800719e:	b113      	cbz	r3, 80071a6 <__ssrefill_r+0x24>
 80071a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	bd10      	pop	{r4, pc}
 80071a6:	6923      	ldr	r3, [r4, #16]
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	2300      	movs	r3, #0
 80071ac:	6063      	str	r3, [r4, #4]
 80071ae:	89a3      	ldrh	r3, [r4, #12]
 80071b0:	f043 0320 	orr.w	r3, r3, #32
 80071b4:	81a3      	strh	r3, [r4, #12]
 80071b6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ba:	e7f3      	b.n	80071a4 <__ssrefill_r+0x22>

080071bc <__ssvfiscanf_r>:
 80071bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c0:	460c      	mov	r4, r1
 80071c2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80071c6:	2100      	movs	r1, #0
 80071c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80071cc:	49a6      	ldr	r1, [pc, #664]	; (8007468 <__ssvfiscanf_r+0x2ac>)
 80071ce:	91a0      	str	r1, [sp, #640]	; 0x280
 80071d0:	f10d 0804 	add.w	r8, sp, #4
 80071d4:	49a5      	ldr	r1, [pc, #660]	; (800746c <__ssvfiscanf_r+0x2b0>)
 80071d6:	4fa6      	ldr	r7, [pc, #664]	; (8007470 <__ssvfiscanf_r+0x2b4>)
 80071d8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007474 <__ssvfiscanf_r+0x2b8>
 80071dc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80071e0:	4606      	mov	r6, r0
 80071e2:	91a1      	str	r1, [sp, #644]	; 0x284
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	7813      	ldrb	r3, [r2, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 815a 	beq.w	80074a2 <__ssvfiscanf_r+0x2e6>
 80071ee:	5dd9      	ldrb	r1, [r3, r7]
 80071f0:	f011 0108 	ands.w	r1, r1, #8
 80071f4:	f102 0501 	add.w	r5, r2, #1
 80071f8:	d019      	beq.n	800722e <__ssvfiscanf_r+0x72>
 80071fa:	6863      	ldr	r3, [r4, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	dd0f      	ble.n	8007220 <__ssvfiscanf_r+0x64>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	781a      	ldrb	r2, [r3, #0]
 8007204:	5cba      	ldrb	r2, [r7, r2]
 8007206:	0712      	lsls	r2, r2, #28
 8007208:	d401      	bmi.n	800720e <__ssvfiscanf_r+0x52>
 800720a:	462a      	mov	r2, r5
 800720c:	e7eb      	b.n	80071e6 <__ssvfiscanf_r+0x2a>
 800720e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007210:	3201      	adds	r2, #1
 8007212:	9245      	str	r2, [sp, #276]	; 0x114
 8007214:	6862      	ldr	r2, [r4, #4]
 8007216:	3301      	adds	r3, #1
 8007218:	3a01      	subs	r2, #1
 800721a:	6062      	str	r2, [r4, #4]
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	e7ec      	b.n	80071fa <__ssvfiscanf_r+0x3e>
 8007220:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007222:	4621      	mov	r1, r4
 8007224:	4630      	mov	r0, r6
 8007226:	4798      	blx	r3
 8007228:	2800      	cmp	r0, #0
 800722a:	d0e9      	beq.n	8007200 <__ssvfiscanf_r+0x44>
 800722c:	e7ed      	b.n	800720a <__ssvfiscanf_r+0x4e>
 800722e:	2b25      	cmp	r3, #37	; 0x25
 8007230:	d012      	beq.n	8007258 <__ssvfiscanf_r+0x9c>
 8007232:	469a      	mov	sl, r3
 8007234:	6863      	ldr	r3, [r4, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	f340 8091 	ble.w	800735e <__ssvfiscanf_r+0x1a2>
 800723c:	6822      	ldr	r2, [r4, #0]
 800723e:	7813      	ldrb	r3, [r2, #0]
 8007240:	4553      	cmp	r3, sl
 8007242:	f040 812e 	bne.w	80074a2 <__ssvfiscanf_r+0x2e6>
 8007246:	6863      	ldr	r3, [r4, #4]
 8007248:	3b01      	subs	r3, #1
 800724a:	6063      	str	r3, [r4, #4]
 800724c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800724e:	3201      	adds	r2, #1
 8007250:	3301      	adds	r3, #1
 8007252:	6022      	str	r2, [r4, #0]
 8007254:	9345      	str	r3, [sp, #276]	; 0x114
 8007256:	e7d8      	b.n	800720a <__ssvfiscanf_r+0x4e>
 8007258:	9141      	str	r1, [sp, #260]	; 0x104
 800725a:	9143      	str	r1, [sp, #268]	; 0x10c
 800725c:	7853      	ldrb	r3, [r2, #1]
 800725e:	2b2a      	cmp	r3, #42	; 0x2a
 8007260:	bf02      	ittt	eq
 8007262:	2310      	moveq	r3, #16
 8007264:	1c95      	addeq	r5, r2, #2
 8007266:	9341      	streq	r3, [sp, #260]	; 0x104
 8007268:	220a      	movs	r2, #10
 800726a:	46aa      	mov	sl, r5
 800726c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007270:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007274:	2b09      	cmp	r3, #9
 8007276:	d91d      	bls.n	80072b4 <__ssvfiscanf_r+0xf8>
 8007278:	487e      	ldr	r0, [pc, #504]	; (8007474 <__ssvfiscanf_r+0x2b8>)
 800727a:	2203      	movs	r2, #3
 800727c:	f7f8 ffc8 	bl	8000210 <memchr>
 8007280:	b140      	cbz	r0, 8007294 <__ssvfiscanf_r+0xd8>
 8007282:	2301      	movs	r3, #1
 8007284:	eba0 0009 	sub.w	r0, r0, r9
 8007288:	fa03 f000 	lsl.w	r0, r3, r0
 800728c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800728e:	4318      	orrs	r0, r3
 8007290:	9041      	str	r0, [sp, #260]	; 0x104
 8007292:	4655      	mov	r5, sl
 8007294:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007298:	2b78      	cmp	r3, #120	; 0x78
 800729a:	d806      	bhi.n	80072aa <__ssvfiscanf_r+0xee>
 800729c:	2b57      	cmp	r3, #87	; 0x57
 800729e:	d810      	bhi.n	80072c2 <__ssvfiscanf_r+0x106>
 80072a0:	2b25      	cmp	r3, #37	; 0x25
 80072a2:	d0c6      	beq.n	8007232 <__ssvfiscanf_r+0x76>
 80072a4:	d856      	bhi.n	8007354 <__ssvfiscanf_r+0x198>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d064      	beq.n	8007374 <__ssvfiscanf_r+0x1b8>
 80072aa:	2303      	movs	r3, #3
 80072ac:	9347      	str	r3, [sp, #284]	; 0x11c
 80072ae:	230a      	movs	r3, #10
 80072b0:	9342      	str	r3, [sp, #264]	; 0x108
 80072b2:	e071      	b.n	8007398 <__ssvfiscanf_r+0x1dc>
 80072b4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80072b6:	fb02 1103 	mla	r1, r2, r3, r1
 80072ba:	3930      	subs	r1, #48	; 0x30
 80072bc:	9143      	str	r1, [sp, #268]	; 0x10c
 80072be:	4655      	mov	r5, sl
 80072c0:	e7d3      	b.n	800726a <__ssvfiscanf_r+0xae>
 80072c2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80072c6:	2a20      	cmp	r2, #32
 80072c8:	d8ef      	bhi.n	80072aa <__ssvfiscanf_r+0xee>
 80072ca:	a101      	add	r1, pc, #4	; (adr r1, 80072d0 <__ssvfiscanf_r+0x114>)
 80072cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80072d0:	08007383 	.word	0x08007383
 80072d4:	080072ab 	.word	0x080072ab
 80072d8:	080072ab 	.word	0x080072ab
 80072dc:	080073e1 	.word	0x080073e1
 80072e0:	080072ab 	.word	0x080072ab
 80072e4:	080072ab 	.word	0x080072ab
 80072e8:	080072ab 	.word	0x080072ab
 80072ec:	080072ab 	.word	0x080072ab
 80072f0:	080072ab 	.word	0x080072ab
 80072f4:	080072ab 	.word	0x080072ab
 80072f8:	080072ab 	.word	0x080072ab
 80072fc:	080073f7 	.word	0x080073f7
 8007300:	080073cd 	.word	0x080073cd
 8007304:	0800735b 	.word	0x0800735b
 8007308:	0800735b 	.word	0x0800735b
 800730c:	0800735b 	.word	0x0800735b
 8007310:	080072ab 	.word	0x080072ab
 8007314:	080073d1 	.word	0x080073d1
 8007318:	080072ab 	.word	0x080072ab
 800731c:	080072ab 	.word	0x080072ab
 8007320:	080072ab 	.word	0x080072ab
 8007324:	080072ab 	.word	0x080072ab
 8007328:	08007407 	.word	0x08007407
 800732c:	080073d9 	.word	0x080073d9
 8007330:	0800737b 	.word	0x0800737b
 8007334:	080072ab 	.word	0x080072ab
 8007338:	080072ab 	.word	0x080072ab
 800733c:	08007403 	.word	0x08007403
 8007340:	080072ab 	.word	0x080072ab
 8007344:	080073cd 	.word	0x080073cd
 8007348:	080072ab 	.word	0x080072ab
 800734c:	080072ab 	.word	0x080072ab
 8007350:	08007383 	.word	0x08007383
 8007354:	3b45      	subs	r3, #69	; 0x45
 8007356:	2b02      	cmp	r3, #2
 8007358:	d8a7      	bhi.n	80072aa <__ssvfiscanf_r+0xee>
 800735a:	2305      	movs	r3, #5
 800735c:	e01b      	b.n	8007396 <__ssvfiscanf_r+0x1da>
 800735e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007360:	4621      	mov	r1, r4
 8007362:	4630      	mov	r0, r6
 8007364:	4798      	blx	r3
 8007366:	2800      	cmp	r0, #0
 8007368:	f43f af68 	beq.w	800723c <__ssvfiscanf_r+0x80>
 800736c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800736e:	2800      	cmp	r0, #0
 8007370:	f040 808d 	bne.w	800748e <__ssvfiscanf_r+0x2d2>
 8007374:	f04f 30ff 	mov.w	r0, #4294967295
 8007378:	e08f      	b.n	800749a <__ssvfiscanf_r+0x2de>
 800737a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800737c:	f042 0220 	orr.w	r2, r2, #32
 8007380:	9241      	str	r2, [sp, #260]	; 0x104
 8007382:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007388:	9241      	str	r2, [sp, #260]	; 0x104
 800738a:	2210      	movs	r2, #16
 800738c:	2b6f      	cmp	r3, #111	; 0x6f
 800738e:	9242      	str	r2, [sp, #264]	; 0x108
 8007390:	bf34      	ite	cc
 8007392:	2303      	movcc	r3, #3
 8007394:	2304      	movcs	r3, #4
 8007396:	9347      	str	r3, [sp, #284]	; 0x11c
 8007398:	6863      	ldr	r3, [r4, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	dd42      	ble.n	8007424 <__ssvfiscanf_r+0x268>
 800739e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80073a0:	0659      	lsls	r1, r3, #25
 80073a2:	d404      	bmi.n	80073ae <__ssvfiscanf_r+0x1f2>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	781a      	ldrb	r2, [r3, #0]
 80073a8:	5cba      	ldrb	r2, [r7, r2]
 80073aa:	0712      	lsls	r2, r2, #28
 80073ac:	d441      	bmi.n	8007432 <__ssvfiscanf_r+0x276>
 80073ae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	dc50      	bgt.n	8007456 <__ssvfiscanf_r+0x29a>
 80073b4:	466b      	mov	r3, sp
 80073b6:	4622      	mov	r2, r4
 80073b8:	a941      	add	r1, sp, #260	; 0x104
 80073ba:	4630      	mov	r0, r6
 80073bc:	f000 f876 	bl	80074ac <_scanf_chars>
 80073c0:	2801      	cmp	r0, #1
 80073c2:	d06e      	beq.n	80074a2 <__ssvfiscanf_r+0x2e6>
 80073c4:	2802      	cmp	r0, #2
 80073c6:	f47f af20 	bne.w	800720a <__ssvfiscanf_r+0x4e>
 80073ca:	e7cf      	b.n	800736c <__ssvfiscanf_r+0x1b0>
 80073cc:	220a      	movs	r2, #10
 80073ce:	e7dd      	b.n	800738c <__ssvfiscanf_r+0x1d0>
 80073d0:	2300      	movs	r3, #0
 80073d2:	9342      	str	r3, [sp, #264]	; 0x108
 80073d4:	2303      	movs	r3, #3
 80073d6:	e7de      	b.n	8007396 <__ssvfiscanf_r+0x1da>
 80073d8:	2308      	movs	r3, #8
 80073da:	9342      	str	r3, [sp, #264]	; 0x108
 80073dc:	2304      	movs	r3, #4
 80073de:	e7da      	b.n	8007396 <__ssvfiscanf_r+0x1da>
 80073e0:	4629      	mov	r1, r5
 80073e2:	4640      	mov	r0, r8
 80073e4:	f000 f9c6 	bl	8007774 <__sccl>
 80073e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80073ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ee:	9341      	str	r3, [sp, #260]	; 0x104
 80073f0:	4605      	mov	r5, r0
 80073f2:	2301      	movs	r3, #1
 80073f4:	e7cf      	b.n	8007396 <__ssvfiscanf_r+0x1da>
 80073f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80073f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fc:	9341      	str	r3, [sp, #260]	; 0x104
 80073fe:	2300      	movs	r3, #0
 8007400:	e7c9      	b.n	8007396 <__ssvfiscanf_r+0x1da>
 8007402:	2302      	movs	r3, #2
 8007404:	e7c7      	b.n	8007396 <__ssvfiscanf_r+0x1da>
 8007406:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007408:	06c3      	lsls	r3, r0, #27
 800740a:	f53f aefe 	bmi.w	800720a <__ssvfiscanf_r+0x4e>
 800740e:	9b00      	ldr	r3, [sp, #0]
 8007410:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007412:	1d19      	adds	r1, r3, #4
 8007414:	9100      	str	r1, [sp, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f010 0f01 	tst.w	r0, #1
 800741c:	bf14      	ite	ne
 800741e:	801a      	strhne	r2, [r3, #0]
 8007420:	601a      	streq	r2, [r3, #0]
 8007422:	e6f2      	b.n	800720a <__ssvfiscanf_r+0x4e>
 8007424:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007426:	4621      	mov	r1, r4
 8007428:	4630      	mov	r0, r6
 800742a:	4798      	blx	r3
 800742c:	2800      	cmp	r0, #0
 800742e:	d0b6      	beq.n	800739e <__ssvfiscanf_r+0x1e2>
 8007430:	e79c      	b.n	800736c <__ssvfiscanf_r+0x1b0>
 8007432:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007434:	3201      	adds	r2, #1
 8007436:	9245      	str	r2, [sp, #276]	; 0x114
 8007438:	6862      	ldr	r2, [r4, #4]
 800743a:	3a01      	subs	r2, #1
 800743c:	2a00      	cmp	r2, #0
 800743e:	6062      	str	r2, [r4, #4]
 8007440:	dd02      	ble.n	8007448 <__ssvfiscanf_r+0x28c>
 8007442:	3301      	adds	r3, #1
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	e7ad      	b.n	80073a4 <__ssvfiscanf_r+0x1e8>
 8007448:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800744a:	4621      	mov	r1, r4
 800744c:	4630      	mov	r0, r6
 800744e:	4798      	blx	r3
 8007450:	2800      	cmp	r0, #0
 8007452:	d0a7      	beq.n	80073a4 <__ssvfiscanf_r+0x1e8>
 8007454:	e78a      	b.n	800736c <__ssvfiscanf_r+0x1b0>
 8007456:	2b04      	cmp	r3, #4
 8007458:	dc0e      	bgt.n	8007478 <__ssvfiscanf_r+0x2bc>
 800745a:	466b      	mov	r3, sp
 800745c:	4622      	mov	r2, r4
 800745e:	a941      	add	r1, sp, #260	; 0x104
 8007460:	4630      	mov	r0, r6
 8007462:	f000 f87d 	bl	8007560 <_scanf_i>
 8007466:	e7ab      	b.n	80073c0 <__ssvfiscanf_r+0x204>
 8007468:	08007109 	.word	0x08007109
 800746c:	08007183 	.word	0x08007183
 8007470:	08009865 	.word	0x08009865
 8007474:	08009802 	.word	0x08009802
 8007478:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <__ssvfiscanf_r+0x2ec>)
 800747a:	2b00      	cmp	r3, #0
 800747c:	f43f aec5 	beq.w	800720a <__ssvfiscanf_r+0x4e>
 8007480:	466b      	mov	r3, sp
 8007482:	4622      	mov	r2, r4
 8007484:	a941      	add	r1, sp, #260	; 0x104
 8007486:	4630      	mov	r0, r6
 8007488:	f3af 8000 	nop.w
 800748c:	e798      	b.n	80073c0 <__ssvfiscanf_r+0x204>
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007494:	bf18      	it	ne
 8007496:	f04f 30ff 	movne.w	r0, #4294967295
 800749a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800749e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80074a4:	e7f9      	b.n	800749a <__ssvfiscanf_r+0x2de>
 80074a6:	bf00      	nop
 80074a8:	00000000 	.word	0x00000000

080074ac <_scanf_chars>:
 80074ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b0:	4615      	mov	r5, r2
 80074b2:	688a      	ldr	r2, [r1, #8]
 80074b4:	4680      	mov	r8, r0
 80074b6:	460c      	mov	r4, r1
 80074b8:	b932      	cbnz	r2, 80074c8 <_scanf_chars+0x1c>
 80074ba:	698a      	ldr	r2, [r1, #24]
 80074bc:	2a00      	cmp	r2, #0
 80074be:	bf0c      	ite	eq
 80074c0:	2201      	moveq	r2, #1
 80074c2:	f04f 32ff 	movne.w	r2, #4294967295
 80074c6:	608a      	str	r2, [r1, #8]
 80074c8:	6822      	ldr	r2, [r4, #0]
 80074ca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800755c <_scanf_chars+0xb0>
 80074ce:	06d1      	lsls	r1, r2, #27
 80074d0:	bf5f      	itttt	pl
 80074d2:	681a      	ldrpl	r2, [r3, #0]
 80074d4:	1d11      	addpl	r1, r2, #4
 80074d6:	6019      	strpl	r1, [r3, #0]
 80074d8:	6816      	ldrpl	r6, [r2, #0]
 80074da:	2700      	movs	r7, #0
 80074dc:	69a0      	ldr	r0, [r4, #24]
 80074de:	b188      	cbz	r0, 8007504 <_scanf_chars+0x58>
 80074e0:	2801      	cmp	r0, #1
 80074e2:	d107      	bne.n	80074f4 <_scanf_chars+0x48>
 80074e4:	682a      	ldr	r2, [r5, #0]
 80074e6:	7811      	ldrb	r1, [r2, #0]
 80074e8:	6962      	ldr	r2, [r4, #20]
 80074ea:	5c52      	ldrb	r2, [r2, r1]
 80074ec:	b952      	cbnz	r2, 8007504 <_scanf_chars+0x58>
 80074ee:	2f00      	cmp	r7, #0
 80074f0:	d031      	beq.n	8007556 <_scanf_chars+0xaa>
 80074f2:	e022      	b.n	800753a <_scanf_chars+0x8e>
 80074f4:	2802      	cmp	r0, #2
 80074f6:	d120      	bne.n	800753a <_scanf_chars+0x8e>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007500:	071b      	lsls	r3, r3, #28
 8007502:	d41a      	bmi.n	800753a <_scanf_chars+0x8e>
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	06da      	lsls	r2, r3, #27
 8007508:	bf5e      	ittt	pl
 800750a:	682b      	ldrpl	r3, [r5, #0]
 800750c:	781b      	ldrbpl	r3, [r3, #0]
 800750e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007512:	682a      	ldr	r2, [r5, #0]
 8007514:	686b      	ldr	r3, [r5, #4]
 8007516:	3201      	adds	r2, #1
 8007518:	602a      	str	r2, [r5, #0]
 800751a:	68a2      	ldr	r2, [r4, #8]
 800751c:	3b01      	subs	r3, #1
 800751e:	3a01      	subs	r2, #1
 8007520:	606b      	str	r3, [r5, #4]
 8007522:	3701      	adds	r7, #1
 8007524:	60a2      	str	r2, [r4, #8]
 8007526:	b142      	cbz	r2, 800753a <_scanf_chars+0x8e>
 8007528:	2b00      	cmp	r3, #0
 800752a:	dcd7      	bgt.n	80074dc <_scanf_chars+0x30>
 800752c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007530:	4629      	mov	r1, r5
 8007532:	4640      	mov	r0, r8
 8007534:	4798      	blx	r3
 8007536:	2800      	cmp	r0, #0
 8007538:	d0d0      	beq.n	80074dc <_scanf_chars+0x30>
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	f013 0310 	ands.w	r3, r3, #16
 8007540:	d105      	bne.n	800754e <_scanf_chars+0xa2>
 8007542:	68e2      	ldr	r2, [r4, #12]
 8007544:	3201      	adds	r2, #1
 8007546:	60e2      	str	r2, [r4, #12]
 8007548:	69a2      	ldr	r2, [r4, #24]
 800754a:	b102      	cbz	r2, 800754e <_scanf_chars+0xa2>
 800754c:	7033      	strb	r3, [r6, #0]
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	443b      	add	r3, r7
 8007552:	6123      	str	r3, [r4, #16]
 8007554:	2000      	movs	r0, #0
 8007556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800755a:	bf00      	nop
 800755c:	08009865 	.word	0x08009865

08007560 <_scanf_i>:
 8007560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	4698      	mov	r8, r3
 8007566:	4b76      	ldr	r3, [pc, #472]	; (8007740 <_scanf_i+0x1e0>)
 8007568:	460c      	mov	r4, r1
 800756a:	4682      	mov	sl, r0
 800756c:	4616      	mov	r6, r2
 800756e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007572:	b087      	sub	sp, #28
 8007574:	ab03      	add	r3, sp, #12
 8007576:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800757a:	4b72      	ldr	r3, [pc, #456]	; (8007744 <_scanf_i+0x1e4>)
 800757c:	69a1      	ldr	r1, [r4, #24]
 800757e:	4a72      	ldr	r2, [pc, #456]	; (8007748 <_scanf_i+0x1e8>)
 8007580:	2903      	cmp	r1, #3
 8007582:	bf18      	it	ne
 8007584:	461a      	movne	r2, r3
 8007586:	68a3      	ldr	r3, [r4, #8]
 8007588:	9201      	str	r2, [sp, #4]
 800758a:	1e5a      	subs	r2, r3, #1
 800758c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007590:	bf88      	it	hi
 8007592:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007596:	4627      	mov	r7, r4
 8007598:	bf82      	ittt	hi
 800759a:	eb03 0905 	addhi.w	r9, r3, r5
 800759e:	f240 135d 	movwhi	r3, #349	; 0x15d
 80075a2:	60a3      	strhi	r3, [r4, #8]
 80075a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80075a8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80075ac:	bf98      	it	ls
 80075ae:	f04f 0900 	movls.w	r9, #0
 80075b2:	6023      	str	r3, [r4, #0]
 80075b4:	463d      	mov	r5, r7
 80075b6:	f04f 0b00 	mov.w	fp, #0
 80075ba:	6831      	ldr	r1, [r6, #0]
 80075bc:	ab03      	add	r3, sp, #12
 80075be:	7809      	ldrb	r1, [r1, #0]
 80075c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80075c4:	2202      	movs	r2, #2
 80075c6:	f7f8 fe23 	bl	8000210 <memchr>
 80075ca:	b328      	cbz	r0, 8007618 <_scanf_i+0xb8>
 80075cc:	f1bb 0f01 	cmp.w	fp, #1
 80075d0:	d159      	bne.n	8007686 <_scanf_i+0x126>
 80075d2:	6862      	ldr	r2, [r4, #4]
 80075d4:	b92a      	cbnz	r2, 80075e2 <_scanf_i+0x82>
 80075d6:	6822      	ldr	r2, [r4, #0]
 80075d8:	2308      	movs	r3, #8
 80075da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075de:	6063      	str	r3, [r4, #4]
 80075e0:	6022      	str	r2, [r4, #0]
 80075e2:	6822      	ldr	r2, [r4, #0]
 80075e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80075e8:	6022      	str	r2, [r4, #0]
 80075ea:	68a2      	ldr	r2, [r4, #8]
 80075ec:	1e51      	subs	r1, r2, #1
 80075ee:	60a1      	str	r1, [r4, #8]
 80075f0:	b192      	cbz	r2, 8007618 <_scanf_i+0xb8>
 80075f2:	6832      	ldr	r2, [r6, #0]
 80075f4:	1c51      	adds	r1, r2, #1
 80075f6:	6031      	str	r1, [r6, #0]
 80075f8:	7812      	ldrb	r2, [r2, #0]
 80075fa:	f805 2b01 	strb.w	r2, [r5], #1
 80075fe:	6872      	ldr	r2, [r6, #4]
 8007600:	3a01      	subs	r2, #1
 8007602:	2a00      	cmp	r2, #0
 8007604:	6072      	str	r2, [r6, #4]
 8007606:	dc07      	bgt.n	8007618 <_scanf_i+0xb8>
 8007608:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800760c:	4631      	mov	r1, r6
 800760e:	4650      	mov	r0, sl
 8007610:	4790      	blx	r2
 8007612:	2800      	cmp	r0, #0
 8007614:	f040 8085 	bne.w	8007722 <_scanf_i+0x1c2>
 8007618:	f10b 0b01 	add.w	fp, fp, #1
 800761c:	f1bb 0f03 	cmp.w	fp, #3
 8007620:	d1cb      	bne.n	80075ba <_scanf_i+0x5a>
 8007622:	6863      	ldr	r3, [r4, #4]
 8007624:	b90b      	cbnz	r3, 800762a <_scanf_i+0xca>
 8007626:	230a      	movs	r3, #10
 8007628:	6063      	str	r3, [r4, #4]
 800762a:	6863      	ldr	r3, [r4, #4]
 800762c:	4947      	ldr	r1, [pc, #284]	; (800774c <_scanf_i+0x1ec>)
 800762e:	6960      	ldr	r0, [r4, #20]
 8007630:	1ac9      	subs	r1, r1, r3
 8007632:	f000 f89f 	bl	8007774 <__sccl>
 8007636:	f04f 0b00 	mov.w	fp, #0
 800763a:	68a3      	ldr	r3, [r4, #8]
 800763c:	6822      	ldr	r2, [r4, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d03d      	beq.n	80076be <_scanf_i+0x15e>
 8007642:	6831      	ldr	r1, [r6, #0]
 8007644:	6960      	ldr	r0, [r4, #20]
 8007646:	f891 c000 	ldrb.w	ip, [r1]
 800764a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800764e:	2800      	cmp	r0, #0
 8007650:	d035      	beq.n	80076be <_scanf_i+0x15e>
 8007652:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007656:	d124      	bne.n	80076a2 <_scanf_i+0x142>
 8007658:	0510      	lsls	r0, r2, #20
 800765a:	d522      	bpl.n	80076a2 <_scanf_i+0x142>
 800765c:	f10b 0b01 	add.w	fp, fp, #1
 8007660:	f1b9 0f00 	cmp.w	r9, #0
 8007664:	d003      	beq.n	800766e <_scanf_i+0x10e>
 8007666:	3301      	adds	r3, #1
 8007668:	f109 39ff 	add.w	r9, r9, #4294967295
 800766c:	60a3      	str	r3, [r4, #8]
 800766e:	6873      	ldr	r3, [r6, #4]
 8007670:	3b01      	subs	r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	6073      	str	r3, [r6, #4]
 8007676:	dd1b      	ble.n	80076b0 <_scanf_i+0x150>
 8007678:	6833      	ldr	r3, [r6, #0]
 800767a:	3301      	adds	r3, #1
 800767c:	6033      	str	r3, [r6, #0]
 800767e:	68a3      	ldr	r3, [r4, #8]
 8007680:	3b01      	subs	r3, #1
 8007682:	60a3      	str	r3, [r4, #8]
 8007684:	e7d9      	b.n	800763a <_scanf_i+0xda>
 8007686:	f1bb 0f02 	cmp.w	fp, #2
 800768a:	d1ae      	bne.n	80075ea <_scanf_i+0x8a>
 800768c:	6822      	ldr	r2, [r4, #0]
 800768e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007692:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007696:	d1bf      	bne.n	8007618 <_scanf_i+0xb8>
 8007698:	2310      	movs	r3, #16
 800769a:	6063      	str	r3, [r4, #4]
 800769c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076a0:	e7a2      	b.n	80075e8 <_scanf_i+0x88>
 80076a2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80076a6:	6022      	str	r2, [r4, #0]
 80076a8:	780b      	ldrb	r3, [r1, #0]
 80076aa:	f805 3b01 	strb.w	r3, [r5], #1
 80076ae:	e7de      	b.n	800766e <_scanf_i+0x10e>
 80076b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80076b4:	4631      	mov	r1, r6
 80076b6:	4650      	mov	r0, sl
 80076b8:	4798      	blx	r3
 80076ba:	2800      	cmp	r0, #0
 80076bc:	d0df      	beq.n	800767e <_scanf_i+0x11e>
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	05db      	lsls	r3, r3, #23
 80076c2:	d50d      	bpl.n	80076e0 <_scanf_i+0x180>
 80076c4:	42bd      	cmp	r5, r7
 80076c6:	d909      	bls.n	80076dc <_scanf_i+0x17c>
 80076c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80076cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076d0:	4632      	mov	r2, r6
 80076d2:	4650      	mov	r0, sl
 80076d4:	4798      	blx	r3
 80076d6:	f105 39ff 	add.w	r9, r5, #4294967295
 80076da:	464d      	mov	r5, r9
 80076dc:	42bd      	cmp	r5, r7
 80076de:	d02d      	beq.n	800773c <_scanf_i+0x1dc>
 80076e0:	6822      	ldr	r2, [r4, #0]
 80076e2:	f012 0210 	ands.w	r2, r2, #16
 80076e6:	d113      	bne.n	8007710 <_scanf_i+0x1b0>
 80076e8:	702a      	strb	r2, [r5, #0]
 80076ea:	6863      	ldr	r3, [r4, #4]
 80076ec:	9e01      	ldr	r6, [sp, #4]
 80076ee:	4639      	mov	r1, r7
 80076f0:	4650      	mov	r0, sl
 80076f2:	47b0      	blx	r6
 80076f4:	6821      	ldr	r1, [r4, #0]
 80076f6:	f8d8 3000 	ldr.w	r3, [r8]
 80076fa:	f011 0f20 	tst.w	r1, #32
 80076fe:	d013      	beq.n	8007728 <_scanf_i+0x1c8>
 8007700:	1d1a      	adds	r2, r3, #4
 8007702:	f8c8 2000 	str.w	r2, [r8]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6018      	str	r0, [r3, #0]
 800770a:	68e3      	ldr	r3, [r4, #12]
 800770c:	3301      	adds	r3, #1
 800770e:	60e3      	str	r3, [r4, #12]
 8007710:	1bed      	subs	r5, r5, r7
 8007712:	44ab      	add	fp, r5
 8007714:	6925      	ldr	r5, [r4, #16]
 8007716:	445d      	add	r5, fp
 8007718:	6125      	str	r5, [r4, #16]
 800771a:	2000      	movs	r0, #0
 800771c:	b007      	add	sp, #28
 800771e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007722:	f04f 0b00 	mov.w	fp, #0
 8007726:	e7ca      	b.n	80076be <_scanf_i+0x15e>
 8007728:	1d1a      	adds	r2, r3, #4
 800772a:	f8c8 2000 	str.w	r2, [r8]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f011 0f01 	tst.w	r1, #1
 8007734:	bf14      	ite	ne
 8007736:	8018      	strhne	r0, [r3, #0]
 8007738:	6018      	streq	r0, [r3, #0]
 800773a:	e7e6      	b.n	800770a <_scanf_i+0x1aa>
 800773c:	2001      	movs	r0, #1
 800773e:	e7ed      	b.n	800771c <_scanf_i+0x1bc>
 8007740:	080095c0 	.word	0x080095c0
 8007744:	080079d1 	.word	0x080079d1
 8007748:	080078e9 	.word	0x080078e9
 800774c:	08009826 	.word	0x08009826

08007750 <_read_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4d07      	ldr	r5, [pc, #28]	; (8007770 <_read_r+0x20>)
 8007754:	4604      	mov	r4, r0
 8007756:	4608      	mov	r0, r1
 8007758:	4611      	mov	r1, r2
 800775a:	2200      	movs	r2, #0
 800775c:	602a      	str	r2, [r5, #0]
 800775e:	461a      	mov	r2, r3
 8007760:	f7f9 fcfc 	bl	800115c <_read>
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	d102      	bne.n	800776e <_read_r+0x1e>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	b103      	cbz	r3, 800776e <_read_r+0x1e>
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	bd38      	pop	{r3, r4, r5, pc}
 8007770:	20011a9c 	.word	0x20011a9c

08007774 <__sccl>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	780b      	ldrb	r3, [r1, #0]
 8007778:	4604      	mov	r4, r0
 800777a:	2b5e      	cmp	r3, #94	; 0x5e
 800777c:	bf0b      	itete	eq
 800777e:	784b      	ldrbeq	r3, [r1, #1]
 8007780:	1c48      	addne	r0, r1, #1
 8007782:	1c88      	addeq	r0, r1, #2
 8007784:	2200      	movne	r2, #0
 8007786:	bf08      	it	eq
 8007788:	2201      	moveq	r2, #1
 800778a:	1e61      	subs	r1, r4, #1
 800778c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007790:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007794:	42a9      	cmp	r1, r5
 8007796:	d1fb      	bne.n	8007790 <__sccl+0x1c>
 8007798:	b90b      	cbnz	r3, 800779e <__sccl+0x2a>
 800779a:	3801      	subs	r0, #1
 800779c:	bd70      	pop	{r4, r5, r6, pc}
 800779e:	f082 0201 	eor.w	r2, r2, #1
 80077a2:	54e2      	strb	r2, [r4, r3]
 80077a4:	4605      	mov	r5, r0
 80077a6:	4628      	mov	r0, r5
 80077a8:	f810 1b01 	ldrb.w	r1, [r0], #1
 80077ac:	292d      	cmp	r1, #45	; 0x2d
 80077ae:	d006      	beq.n	80077be <__sccl+0x4a>
 80077b0:	295d      	cmp	r1, #93	; 0x5d
 80077b2:	d0f3      	beq.n	800779c <__sccl+0x28>
 80077b4:	b909      	cbnz	r1, 80077ba <__sccl+0x46>
 80077b6:	4628      	mov	r0, r5
 80077b8:	e7f0      	b.n	800779c <__sccl+0x28>
 80077ba:	460b      	mov	r3, r1
 80077bc:	e7f1      	b.n	80077a2 <__sccl+0x2e>
 80077be:	786e      	ldrb	r6, [r5, #1]
 80077c0:	2e5d      	cmp	r6, #93	; 0x5d
 80077c2:	d0fa      	beq.n	80077ba <__sccl+0x46>
 80077c4:	42b3      	cmp	r3, r6
 80077c6:	dcf8      	bgt.n	80077ba <__sccl+0x46>
 80077c8:	3502      	adds	r5, #2
 80077ca:	4619      	mov	r1, r3
 80077cc:	3101      	adds	r1, #1
 80077ce:	428e      	cmp	r6, r1
 80077d0:	5462      	strb	r2, [r4, r1]
 80077d2:	dcfb      	bgt.n	80077cc <__sccl+0x58>
 80077d4:	1af1      	subs	r1, r6, r3
 80077d6:	3901      	subs	r1, #1
 80077d8:	1c58      	adds	r0, r3, #1
 80077da:	42b3      	cmp	r3, r6
 80077dc:	bfa8      	it	ge
 80077de:	2100      	movge	r1, #0
 80077e0:	1843      	adds	r3, r0, r1
 80077e2:	e7e0      	b.n	80077a6 <__sccl+0x32>

080077e4 <_strtol_l.constprop.0>:
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077ea:	d001      	beq.n	80077f0 <_strtol_l.constprop.0+0xc>
 80077ec:	2b24      	cmp	r3, #36	; 0x24
 80077ee:	d906      	bls.n	80077fe <_strtol_l.constprop.0+0x1a>
 80077f0:	f7fd faa0 	bl	8004d34 <__errno>
 80077f4:	2316      	movs	r3, #22
 80077f6:	6003      	str	r3, [r0, #0]
 80077f8:	2000      	movs	r0, #0
 80077fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80078e4 <_strtol_l.constprop.0+0x100>
 8007802:	460d      	mov	r5, r1
 8007804:	462e      	mov	r6, r5
 8007806:	f815 4b01 	ldrb.w	r4, [r5], #1
 800780a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800780e:	f017 0708 	ands.w	r7, r7, #8
 8007812:	d1f7      	bne.n	8007804 <_strtol_l.constprop.0+0x20>
 8007814:	2c2d      	cmp	r4, #45	; 0x2d
 8007816:	d132      	bne.n	800787e <_strtol_l.constprop.0+0x9a>
 8007818:	782c      	ldrb	r4, [r5, #0]
 800781a:	2701      	movs	r7, #1
 800781c:	1cb5      	adds	r5, r6, #2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d05b      	beq.n	80078da <_strtol_l.constprop.0+0xf6>
 8007822:	2b10      	cmp	r3, #16
 8007824:	d109      	bne.n	800783a <_strtol_l.constprop.0+0x56>
 8007826:	2c30      	cmp	r4, #48	; 0x30
 8007828:	d107      	bne.n	800783a <_strtol_l.constprop.0+0x56>
 800782a:	782c      	ldrb	r4, [r5, #0]
 800782c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007830:	2c58      	cmp	r4, #88	; 0x58
 8007832:	d14d      	bne.n	80078d0 <_strtol_l.constprop.0+0xec>
 8007834:	786c      	ldrb	r4, [r5, #1]
 8007836:	2310      	movs	r3, #16
 8007838:	3502      	adds	r5, #2
 800783a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800783e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007842:	f04f 0c00 	mov.w	ip, #0
 8007846:	fbb8 f9f3 	udiv	r9, r8, r3
 800784a:	4666      	mov	r6, ip
 800784c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007850:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007854:	f1be 0f09 	cmp.w	lr, #9
 8007858:	d816      	bhi.n	8007888 <_strtol_l.constprop.0+0xa4>
 800785a:	4674      	mov	r4, lr
 800785c:	42a3      	cmp	r3, r4
 800785e:	dd24      	ble.n	80078aa <_strtol_l.constprop.0+0xc6>
 8007860:	f1bc 0f00 	cmp.w	ip, #0
 8007864:	db1e      	blt.n	80078a4 <_strtol_l.constprop.0+0xc0>
 8007866:	45b1      	cmp	r9, r6
 8007868:	d31c      	bcc.n	80078a4 <_strtol_l.constprop.0+0xc0>
 800786a:	d101      	bne.n	8007870 <_strtol_l.constprop.0+0x8c>
 800786c:	45a2      	cmp	sl, r4
 800786e:	db19      	blt.n	80078a4 <_strtol_l.constprop.0+0xc0>
 8007870:	fb06 4603 	mla	r6, r6, r3, r4
 8007874:	f04f 0c01 	mov.w	ip, #1
 8007878:	f815 4b01 	ldrb.w	r4, [r5], #1
 800787c:	e7e8      	b.n	8007850 <_strtol_l.constprop.0+0x6c>
 800787e:	2c2b      	cmp	r4, #43	; 0x2b
 8007880:	bf04      	itt	eq
 8007882:	782c      	ldrbeq	r4, [r5, #0]
 8007884:	1cb5      	addeq	r5, r6, #2
 8007886:	e7ca      	b.n	800781e <_strtol_l.constprop.0+0x3a>
 8007888:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800788c:	f1be 0f19 	cmp.w	lr, #25
 8007890:	d801      	bhi.n	8007896 <_strtol_l.constprop.0+0xb2>
 8007892:	3c37      	subs	r4, #55	; 0x37
 8007894:	e7e2      	b.n	800785c <_strtol_l.constprop.0+0x78>
 8007896:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800789a:	f1be 0f19 	cmp.w	lr, #25
 800789e:	d804      	bhi.n	80078aa <_strtol_l.constprop.0+0xc6>
 80078a0:	3c57      	subs	r4, #87	; 0x57
 80078a2:	e7db      	b.n	800785c <_strtol_l.constprop.0+0x78>
 80078a4:	f04f 3cff 	mov.w	ip, #4294967295
 80078a8:	e7e6      	b.n	8007878 <_strtol_l.constprop.0+0x94>
 80078aa:	f1bc 0f00 	cmp.w	ip, #0
 80078ae:	da05      	bge.n	80078bc <_strtol_l.constprop.0+0xd8>
 80078b0:	2322      	movs	r3, #34	; 0x22
 80078b2:	6003      	str	r3, [r0, #0]
 80078b4:	4646      	mov	r6, r8
 80078b6:	b942      	cbnz	r2, 80078ca <_strtol_l.constprop.0+0xe6>
 80078b8:	4630      	mov	r0, r6
 80078ba:	e79e      	b.n	80077fa <_strtol_l.constprop.0+0x16>
 80078bc:	b107      	cbz	r7, 80078c0 <_strtol_l.constprop.0+0xdc>
 80078be:	4276      	negs	r6, r6
 80078c0:	2a00      	cmp	r2, #0
 80078c2:	d0f9      	beq.n	80078b8 <_strtol_l.constprop.0+0xd4>
 80078c4:	f1bc 0f00 	cmp.w	ip, #0
 80078c8:	d000      	beq.n	80078cc <_strtol_l.constprop.0+0xe8>
 80078ca:	1e69      	subs	r1, r5, #1
 80078cc:	6011      	str	r1, [r2, #0]
 80078ce:	e7f3      	b.n	80078b8 <_strtol_l.constprop.0+0xd4>
 80078d0:	2430      	movs	r4, #48	; 0x30
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1b1      	bne.n	800783a <_strtol_l.constprop.0+0x56>
 80078d6:	2308      	movs	r3, #8
 80078d8:	e7af      	b.n	800783a <_strtol_l.constprop.0+0x56>
 80078da:	2c30      	cmp	r4, #48	; 0x30
 80078dc:	d0a5      	beq.n	800782a <_strtol_l.constprop.0+0x46>
 80078de:	230a      	movs	r3, #10
 80078e0:	e7ab      	b.n	800783a <_strtol_l.constprop.0+0x56>
 80078e2:	bf00      	nop
 80078e4:	08009865 	.word	0x08009865

080078e8 <_strtol_r>:
 80078e8:	f7ff bf7c 	b.w	80077e4 <_strtol_l.constprop.0>

080078ec <_strtoul_l.constprop.0>:
 80078ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078f0:	4f36      	ldr	r7, [pc, #216]	; (80079cc <_strtoul_l.constprop.0+0xe0>)
 80078f2:	4686      	mov	lr, r0
 80078f4:	460d      	mov	r5, r1
 80078f6:	4628      	mov	r0, r5
 80078f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078fc:	5de6      	ldrb	r6, [r4, r7]
 80078fe:	f016 0608 	ands.w	r6, r6, #8
 8007902:	d1f8      	bne.n	80078f6 <_strtoul_l.constprop.0+0xa>
 8007904:	2c2d      	cmp	r4, #45	; 0x2d
 8007906:	d12f      	bne.n	8007968 <_strtoul_l.constprop.0+0x7c>
 8007908:	782c      	ldrb	r4, [r5, #0]
 800790a:	2601      	movs	r6, #1
 800790c:	1c85      	adds	r5, r0, #2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d057      	beq.n	80079c2 <_strtoul_l.constprop.0+0xd6>
 8007912:	2b10      	cmp	r3, #16
 8007914:	d109      	bne.n	800792a <_strtoul_l.constprop.0+0x3e>
 8007916:	2c30      	cmp	r4, #48	; 0x30
 8007918:	d107      	bne.n	800792a <_strtoul_l.constprop.0+0x3e>
 800791a:	7828      	ldrb	r0, [r5, #0]
 800791c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007920:	2858      	cmp	r0, #88	; 0x58
 8007922:	d149      	bne.n	80079b8 <_strtoul_l.constprop.0+0xcc>
 8007924:	786c      	ldrb	r4, [r5, #1]
 8007926:	2310      	movs	r3, #16
 8007928:	3502      	adds	r5, #2
 800792a:	f04f 38ff 	mov.w	r8, #4294967295
 800792e:	2700      	movs	r7, #0
 8007930:	fbb8 f8f3 	udiv	r8, r8, r3
 8007934:	fb03 f908 	mul.w	r9, r3, r8
 8007938:	ea6f 0909 	mvn.w	r9, r9
 800793c:	4638      	mov	r0, r7
 800793e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007942:	f1bc 0f09 	cmp.w	ip, #9
 8007946:	d814      	bhi.n	8007972 <_strtoul_l.constprop.0+0x86>
 8007948:	4664      	mov	r4, ip
 800794a:	42a3      	cmp	r3, r4
 800794c:	dd22      	ble.n	8007994 <_strtoul_l.constprop.0+0xa8>
 800794e:	2f00      	cmp	r7, #0
 8007950:	db1d      	blt.n	800798e <_strtoul_l.constprop.0+0xa2>
 8007952:	4580      	cmp	r8, r0
 8007954:	d31b      	bcc.n	800798e <_strtoul_l.constprop.0+0xa2>
 8007956:	d101      	bne.n	800795c <_strtoul_l.constprop.0+0x70>
 8007958:	45a1      	cmp	r9, r4
 800795a:	db18      	blt.n	800798e <_strtoul_l.constprop.0+0xa2>
 800795c:	fb00 4003 	mla	r0, r0, r3, r4
 8007960:	2701      	movs	r7, #1
 8007962:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007966:	e7ea      	b.n	800793e <_strtoul_l.constprop.0+0x52>
 8007968:	2c2b      	cmp	r4, #43	; 0x2b
 800796a:	bf04      	itt	eq
 800796c:	782c      	ldrbeq	r4, [r5, #0]
 800796e:	1c85      	addeq	r5, r0, #2
 8007970:	e7cd      	b.n	800790e <_strtoul_l.constprop.0+0x22>
 8007972:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007976:	f1bc 0f19 	cmp.w	ip, #25
 800797a:	d801      	bhi.n	8007980 <_strtoul_l.constprop.0+0x94>
 800797c:	3c37      	subs	r4, #55	; 0x37
 800797e:	e7e4      	b.n	800794a <_strtoul_l.constprop.0+0x5e>
 8007980:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007984:	f1bc 0f19 	cmp.w	ip, #25
 8007988:	d804      	bhi.n	8007994 <_strtoul_l.constprop.0+0xa8>
 800798a:	3c57      	subs	r4, #87	; 0x57
 800798c:	e7dd      	b.n	800794a <_strtoul_l.constprop.0+0x5e>
 800798e:	f04f 37ff 	mov.w	r7, #4294967295
 8007992:	e7e6      	b.n	8007962 <_strtoul_l.constprop.0+0x76>
 8007994:	2f00      	cmp	r7, #0
 8007996:	da07      	bge.n	80079a8 <_strtoul_l.constprop.0+0xbc>
 8007998:	2322      	movs	r3, #34	; 0x22
 800799a:	f8ce 3000 	str.w	r3, [lr]
 800799e:	f04f 30ff 	mov.w	r0, #4294967295
 80079a2:	b932      	cbnz	r2, 80079b2 <_strtoul_l.constprop.0+0xc6>
 80079a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079a8:	b106      	cbz	r6, 80079ac <_strtoul_l.constprop.0+0xc0>
 80079aa:	4240      	negs	r0, r0
 80079ac:	2a00      	cmp	r2, #0
 80079ae:	d0f9      	beq.n	80079a4 <_strtoul_l.constprop.0+0xb8>
 80079b0:	b107      	cbz	r7, 80079b4 <_strtoul_l.constprop.0+0xc8>
 80079b2:	1e69      	subs	r1, r5, #1
 80079b4:	6011      	str	r1, [r2, #0]
 80079b6:	e7f5      	b.n	80079a4 <_strtoul_l.constprop.0+0xb8>
 80079b8:	2430      	movs	r4, #48	; 0x30
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1b5      	bne.n	800792a <_strtoul_l.constprop.0+0x3e>
 80079be:	2308      	movs	r3, #8
 80079c0:	e7b3      	b.n	800792a <_strtoul_l.constprop.0+0x3e>
 80079c2:	2c30      	cmp	r4, #48	; 0x30
 80079c4:	d0a9      	beq.n	800791a <_strtoul_l.constprop.0+0x2e>
 80079c6:	230a      	movs	r3, #10
 80079c8:	e7af      	b.n	800792a <_strtoul_l.constprop.0+0x3e>
 80079ca:	bf00      	nop
 80079cc:	08009865 	.word	0x08009865

080079d0 <_strtoul_r>:
 80079d0:	f7ff bf8c 	b.w	80078ec <_strtoul_l.constprop.0>

080079d4 <__submore>:
 80079d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d8:	460c      	mov	r4, r1
 80079da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80079dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079e0:	4299      	cmp	r1, r3
 80079e2:	d11d      	bne.n	8007a20 <__submore+0x4c>
 80079e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80079e8:	f7fd fa4a 	bl	8004e80 <_malloc_r>
 80079ec:	b918      	cbnz	r0, 80079f6 <__submore+0x22>
 80079ee:	f04f 30ff 	mov.w	r0, #4294967295
 80079f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80079fc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007a00:	6360      	str	r0, [r4, #52]	; 0x34
 8007a02:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007a06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007a0a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007a0e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007a12:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007a16:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007a1a:	6020      	str	r0, [r4, #0]
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	e7e8      	b.n	80079f2 <__submore+0x1e>
 8007a20:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007a22:	0077      	lsls	r7, r6, #1
 8007a24:	463a      	mov	r2, r7
 8007a26:	f000 fa25 	bl	8007e74 <_realloc_r>
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d0de      	beq.n	80079ee <__submore+0x1a>
 8007a30:	eb00 0806 	add.w	r8, r0, r6
 8007a34:	4601      	mov	r1, r0
 8007a36:	4632      	mov	r2, r6
 8007a38:	4640      	mov	r0, r8
 8007a3a:	f7fe fe55 	bl	80066e8 <memcpy>
 8007a3e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007a42:	f8c4 8000 	str.w	r8, [r4]
 8007a46:	e7e9      	b.n	8007a1c <__submore+0x48>

08007a48 <__assert_func>:
 8007a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a4a:	4614      	mov	r4, r2
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	4b09      	ldr	r3, [pc, #36]	; (8007a74 <__assert_func+0x2c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4605      	mov	r5, r0
 8007a54:	68d8      	ldr	r0, [r3, #12]
 8007a56:	b14c      	cbz	r4, 8007a6c <__assert_func+0x24>
 8007a58:	4b07      	ldr	r3, [pc, #28]	; (8007a78 <__assert_func+0x30>)
 8007a5a:	9100      	str	r1, [sp, #0]
 8007a5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a60:	4906      	ldr	r1, [pc, #24]	; (8007a7c <__assert_func+0x34>)
 8007a62:	462b      	mov	r3, r5
 8007a64:	f000 f9a6 	bl	8007db4 <fiprintf>
 8007a68:	f000 fc5a 	bl	8008320 <abort>
 8007a6c:	4b04      	ldr	r3, [pc, #16]	; (8007a80 <__assert_func+0x38>)
 8007a6e:	461c      	mov	r4, r3
 8007a70:	e7f3      	b.n	8007a5a <__assert_func+0x12>
 8007a72:	bf00      	nop
 8007a74:	2000000c 	.word	0x2000000c
 8007a78:	08009828 	.word	0x08009828
 8007a7c:	08009835 	.word	0x08009835
 8007a80:	08009863 	.word	0x08009863

08007a84 <__sflush_r>:
 8007a84:	898a      	ldrh	r2, [r1, #12]
 8007a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	0710      	lsls	r0, r2, #28
 8007a8e:	460c      	mov	r4, r1
 8007a90:	d458      	bmi.n	8007b44 <__sflush_r+0xc0>
 8007a92:	684b      	ldr	r3, [r1, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	dc05      	bgt.n	8007aa4 <__sflush_r+0x20>
 8007a98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	dc02      	bgt.n	8007aa4 <__sflush_r+0x20>
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aa6:	2e00      	cmp	r6, #0
 8007aa8:	d0f9      	beq.n	8007a9e <__sflush_r+0x1a>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ab0:	682f      	ldr	r7, [r5, #0]
 8007ab2:	602b      	str	r3, [r5, #0]
 8007ab4:	d032      	beq.n	8007b1c <__sflush_r+0x98>
 8007ab6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ab8:	89a3      	ldrh	r3, [r4, #12]
 8007aba:	075a      	lsls	r2, r3, #29
 8007abc:	d505      	bpl.n	8007aca <__sflush_r+0x46>
 8007abe:	6863      	ldr	r3, [r4, #4]
 8007ac0:	1ac0      	subs	r0, r0, r3
 8007ac2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ac4:	b10b      	cbz	r3, 8007aca <__sflush_r+0x46>
 8007ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ac8:	1ac0      	subs	r0, r0, r3
 8007aca:	2300      	movs	r3, #0
 8007acc:	4602      	mov	r2, r0
 8007ace:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ad0:	6a21      	ldr	r1, [r4, #32]
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	47b0      	blx	r6
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	89a3      	ldrh	r3, [r4, #12]
 8007ada:	d106      	bne.n	8007aea <__sflush_r+0x66>
 8007adc:	6829      	ldr	r1, [r5, #0]
 8007ade:	291d      	cmp	r1, #29
 8007ae0:	d82c      	bhi.n	8007b3c <__sflush_r+0xb8>
 8007ae2:	4a2a      	ldr	r2, [pc, #168]	; (8007b8c <__sflush_r+0x108>)
 8007ae4:	40ca      	lsrs	r2, r1
 8007ae6:	07d6      	lsls	r6, r2, #31
 8007ae8:	d528      	bpl.n	8007b3c <__sflush_r+0xb8>
 8007aea:	2200      	movs	r2, #0
 8007aec:	6062      	str	r2, [r4, #4]
 8007aee:	04d9      	lsls	r1, r3, #19
 8007af0:	6922      	ldr	r2, [r4, #16]
 8007af2:	6022      	str	r2, [r4, #0]
 8007af4:	d504      	bpl.n	8007b00 <__sflush_r+0x7c>
 8007af6:	1c42      	adds	r2, r0, #1
 8007af8:	d101      	bne.n	8007afe <__sflush_r+0x7a>
 8007afa:	682b      	ldr	r3, [r5, #0]
 8007afc:	b903      	cbnz	r3, 8007b00 <__sflush_r+0x7c>
 8007afe:	6560      	str	r0, [r4, #84]	; 0x54
 8007b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b02:	602f      	str	r7, [r5, #0]
 8007b04:	2900      	cmp	r1, #0
 8007b06:	d0ca      	beq.n	8007a9e <__sflush_r+0x1a>
 8007b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b0c:	4299      	cmp	r1, r3
 8007b0e:	d002      	beq.n	8007b16 <__sflush_r+0x92>
 8007b10:	4628      	mov	r0, r5
 8007b12:	f7fd f949 	bl	8004da8 <_free_r>
 8007b16:	2000      	movs	r0, #0
 8007b18:	6360      	str	r0, [r4, #52]	; 0x34
 8007b1a:	e7c1      	b.n	8007aa0 <__sflush_r+0x1c>
 8007b1c:	6a21      	ldr	r1, [r4, #32]
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4628      	mov	r0, r5
 8007b22:	47b0      	blx	r6
 8007b24:	1c41      	adds	r1, r0, #1
 8007b26:	d1c7      	bne.n	8007ab8 <__sflush_r+0x34>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d0c4      	beq.n	8007ab8 <__sflush_r+0x34>
 8007b2e:	2b1d      	cmp	r3, #29
 8007b30:	d001      	beq.n	8007b36 <__sflush_r+0xb2>
 8007b32:	2b16      	cmp	r3, #22
 8007b34:	d101      	bne.n	8007b3a <__sflush_r+0xb6>
 8007b36:	602f      	str	r7, [r5, #0]
 8007b38:	e7b1      	b.n	8007a9e <__sflush_r+0x1a>
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	e7ad      	b.n	8007aa0 <__sflush_r+0x1c>
 8007b44:	690f      	ldr	r7, [r1, #16]
 8007b46:	2f00      	cmp	r7, #0
 8007b48:	d0a9      	beq.n	8007a9e <__sflush_r+0x1a>
 8007b4a:	0793      	lsls	r3, r2, #30
 8007b4c:	680e      	ldr	r6, [r1, #0]
 8007b4e:	bf08      	it	eq
 8007b50:	694b      	ldreq	r3, [r1, #20]
 8007b52:	600f      	str	r7, [r1, #0]
 8007b54:	bf18      	it	ne
 8007b56:	2300      	movne	r3, #0
 8007b58:	eba6 0807 	sub.w	r8, r6, r7
 8007b5c:	608b      	str	r3, [r1, #8]
 8007b5e:	f1b8 0f00 	cmp.w	r8, #0
 8007b62:	dd9c      	ble.n	8007a9e <__sflush_r+0x1a>
 8007b64:	6a21      	ldr	r1, [r4, #32]
 8007b66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b68:	4643      	mov	r3, r8
 8007b6a:	463a      	mov	r2, r7
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	47b0      	blx	r6
 8007b70:	2800      	cmp	r0, #0
 8007b72:	dc06      	bgt.n	8007b82 <__sflush_r+0xfe>
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b80:	e78e      	b.n	8007aa0 <__sflush_r+0x1c>
 8007b82:	4407      	add	r7, r0
 8007b84:	eba8 0800 	sub.w	r8, r8, r0
 8007b88:	e7e9      	b.n	8007b5e <__sflush_r+0xda>
 8007b8a:	bf00      	nop
 8007b8c:	20400001 	.word	0x20400001

08007b90 <_fflush_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	690b      	ldr	r3, [r1, #16]
 8007b94:	4605      	mov	r5, r0
 8007b96:	460c      	mov	r4, r1
 8007b98:	b913      	cbnz	r3, 8007ba0 <_fflush_r+0x10>
 8007b9a:	2500      	movs	r5, #0
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ba0:	b118      	cbz	r0, 8007baa <_fflush_r+0x1a>
 8007ba2:	6983      	ldr	r3, [r0, #24]
 8007ba4:	b90b      	cbnz	r3, 8007baa <_fflush_r+0x1a>
 8007ba6:	f000 f887 	bl	8007cb8 <__sinit>
 8007baa:	4b14      	ldr	r3, [pc, #80]	; (8007bfc <_fflush_r+0x6c>)
 8007bac:	429c      	cmp	r4, r3
 8007bae:	d11b      	bne.n	8007be8 <_fflush_r+0x58>
 8007bb0:	686c      	ldr	r4, [r5, #4]
 8007bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d0ef      	beq.n	8007b9a <_fflush_r+0xa>
 8007bba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bbc:	07d0      	lsls	r0, r2, #31
 8007bbe:	d404      	bmi.n	8007bca <_fflush_r+0x3a>
 8007bc0:	0599      	lsls	r1, r3, #22
 8007bc2:	d402      	bmi.n	8007bca <_fflush_r+0x3a>
 8007bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bc6:	f000 f927 	bl	8007e18 <__retarget_lock_acquire_recursive>
 8007bca:	4628      	mov	r0, r5
 8007bcc:	4621      	mov	r1, r4
 8007bce:	f7ff ff59 	bl	8007a84 <__sflush_r>
 8007bd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bd4:	07da      	lsls	r2, r3, #31
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	d4e0      	bmi.n	8007b9c <_fflush_r+0xc>
 8007bda:	89a3      	ldrh	r3, [r4, #12]
 8007bdc:	059b      	lsls	r3, r3, #22
 8007bde:	d4dd      	bmi.n	8007b9c <_fflush_r+0xc>
 8007be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007be2:	f000 f91a 	bl	8007e1a <__retarget_lock_release_recursive>
 8007be6:	e7d9      	b.n	8007b9c <_fflush_r+0xc>
 8007be8:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <_fflush_r+0x70>)
 8007bea:	429c      	cmp	r4, r3
 8007bec:	d101      	bne.n	8007bf2 <_fflush_r+0x62>
 8007bee:	68ac      	ldr	r4, [r5, #8]
 8007bf0:	e7df      	b.n	8007bb2 <_fflush_r+0x22>
 8007bf2:	4b04      	ldr	r3, [pc, #16]	; (8007c04 <_fflush_r+0x74>)
 8007bf4:	429c      	cmp	r4, r3
 8007bf6:	bf08      	it	eq
 8007bf8:	68ec      	ldreq	r4, [r5, #12]
 8007bfa:	e7da      	b.n	8007bb2 <_fflush_r+0x22>
 8007bfc:	08009988 	.word	0x08009988
 8007c00:	080099a8 	.word	0x080099a8
 8007c04:	08009968 	.word	0x08009968

08007c08 <std>:
 8007c08:	2300      	movs	r3, #0
 8007c0a:	b510      	push	{r4, lr}
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c16:	6083      	str	r3, [r0, #8]
 8007c18:	8181      	strh	r1, [r0, #12]
 8007c1a:	6643      	str	r3, [r0, #100]	; 0x64
 8007c1c:	81c2      	strh	r2, [r0, #14]
 8007c1e:	6183      	str	r3, [r0, #24]
 8007c20:	4619      	mov	r1, r3
 8007c22:	2208      	movs	r2, #8
 8007c24:	305c      	adds	r0, #92	; 0x5c
 8007c26:	f7fd f8b7 	bl	8004d98 <memset>
 8007c2a:	4b05      	ldr	r3, [pc, #20]	; (8007c40 <std+0x38>)
 8007c2c:	6263      	str	r3, [r4, #36]	; 0x24
 8007c2e:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <std+0x3c>)
 8007c30:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c32:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <std+0x40>)
 8007c34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c36:	4b05      	ldr	r3, [pc, #20]	; (8007c4c <std+0x44>)
 8007c38:	6224      	str	r4, [r4, #32]
 8007c3a:	6323      	str	r3, [r4, #48]	; 0x30
 8007c3c:	bd10      	pop	{r4, pc}
 8007c3e:	bf00      	nop
 8007c40:	080058f5 	.word	0x080058f5
 8007c44:	0800591b 	.word	0x0800591b
 8007c48:	08005953 	.word	0x08005953
 8007c4c:	08005977 	.word	0x08005977

08007c50 <_cleanup_r>:
 8007c50:	4901      	ldr	r1, [pc, #4]	; (8007c58 <_cleanup_r+0x8>)
 8007c52:	f000 b8c1 	b.w	8007dd8 <_fwalk_reent>
 8007c56:	bf00      	nop
 8007c58:	08007b91 	.word	0x08007b91

08007c5c <__sfmoreglue>:
 8007c5c:	b570      	push	{r4, r5, r6, lr}
 8007c5e:	2268      	movs	r2, #104	; 0x68
 8007c60:	1e4d      	subs	r5, r1, #1
 8007c62:	4355      	muls	r5, r2
 8007c64:	460e      	mov	r6, r1
 8007c66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c6a:	f7fd f909 	bl	8004e80 <_malloc_r>
 8007c6e:	4604      	mov	r4, r0
 8007c70:	b140      	cbz	r0, 8007c84 <__sfmoreglue+0x28>
 8007c72:	2100      	movs	r1, #0
 8007c74:	e9c0 1600 	strd	r1, r6, [r0]
 8007c78:	300c      	adds	r0, #12
 8007c7a:	60a0      	str	r0, [r4, #8]
 8007c7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c80:	f7fd f88a 	bl	8004d98 <memset>
 8007c84:	4620      	mov	r0, r4
 8007c86:	bd70      	pop	{r4, r5, r6, pc}

08007c88 <__sfp_lock_acquire>:
 8007c88:	4801      	ldr	r0, [pc, #4]	; (8007c90 <__sfp_lock_acquire+0x8>)
 8007c8a:	f000 b8c5 	b.w	8007e18 <__retarget_lock_acquire_recursive>
 8007c8e:	bf00      	nop
 8007c90:	20011aa1 	.word	0x20011aa1

08007c94 <__sfp_lock_release>:
 8007c94:	4801      	ldr	r0, [pc, #4]	; (8007c9c <__sfp_lock_release+0x8>)
 8007c96:	f000 b8c0 	b.w	8007e1a <__retarget_lock_release_recursive>
 8007c9a:	bf00      	nop
 8007c9c:	20011aa1 	.word	0x20011aa1

08007ca0 <__sinit_lock_acquire>:
 8007ca0:	4801      	ldr	r0, [pc, #4]	; (8007ca8 <__sinit_lock_acquire+0x8>)
 8007ca2:	f000 b8b9 	b.w	8007e18 <__retarget_lock_acquire_recursive>
 8007ca6:	bf00      	nop
 8007ca8:	20011aa2 	.word	0x20011aa2

08007cac <__sinit_lock_release>:
 8007cac:	4801      	ldr	r0, [pc, #4]	; (8007cb4 <__sinit_lock_release+0x8>)
 8007cae:	f000 b8b4 	b.w	8007e1a <__retarget_lock_release_recursive>
 8007cb2:	bf00      	nop
 8007cb4:	20011aa2 	.word	0x20011aa2

08007cb8 <__sinit>:
 8007cb8:	b510      	push	{r4, lr}
 8007cba:	4604      	mov	r4, r0
 8007cbc:	f7ff fff0 	bl	8007ca0 <__sinit_lock_acquire>
 8007cc0:	69a3      	ldr	r3, [r4, #24]
 8007cc2:	b11b      	cbz	r3, 8007ccc <__sinit+0x14>
 8007cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc8:	f7ff bff0 	b.w	8007cac <__sinit_lock_release>
 8007ccc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007cd0:	6523      	str	r3, [r4, #80]	; 0x50
 8007cd2:	4b13      	ldr	r3, [pc, #76]	; (8007d20 <__sinit+0x68>)
 8007cd4:	4a13      	ldr	r2, [pc, #76]	; (8007d24 <__sinit+0x6c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007cda:	42a3      	cmp	r3, r4
 8007cdc:	bf04      	itt	eq
 8007cde:	2301      	moveq	r3, #1
 8007ce0:	61a3      	streq	r3, [r4, #24]
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f000 f820 	bl	8007d28 <__sfp>
 8007ce8:	6060      	str	r0, [r4, #4]
 8007cea:	4620      	mov	r0, r4
 8007cec:	f000 f81c 	bl	8007d28 <__sfp>
 8007cf0:	60a0      	str	r0, [r4, #8]
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 f818 	bl	8007d28 <__sfp>
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	60e0      	str	r0, [r4, #12]
 8007cfc:	2104      	movs	r1, #4
 8007cfe:	6860      	ldr	r0, [r4, #4]
 8007d00:	f7ff ff82 	bl	8007c08 <std>
 8007d04:	68a0      	ldr	r0, [r4, #8]
 8007d06:	2201      	movs	r2, #1
 8007d08:	2109      	movs	r1, #9
 8007d0a:	f7ff ff7d 	bl	8007c08 <std>
 8007d0e:	68e0      	ldr	r0, [r4, #12]
 8007d10:	2202      	movs	r2, #2
 8007d12:	2112      	movs	r1, #18
 8007d14:	f7ff ff78 	bl	8007c08 <std>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	61a3      	str	r3, [r4, #24]
 8007d1c:	e7d2      	b.n	8007cc4 <__sinit+0xc>
 8007d1e:	bf00      	nop
 8007d20:	080095dc 	.word	0x080095dc
 8007d24:	08007c51 	.word	0x08007c51

08007d28 <__sfp>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	4607      	mov	r7, r0
 8007d2c:	f7ff ffac 	bl	8007c88 <__sfp_lock_acquire>
 8007d30:	4b1e      	ldr	r3, [pc, #120]	; (8007dac <__sfp+0x84>)
 8007d32:	681e      	ldr	r6, [r3, #0]
 8007d34:	69b3      	ldr	r3, [r6, #24]
 8007d36:	b913      	cbnz	r3, 8007d3e <__sfp+0x16>
 8007d38:	4630      	mov	r0, r6
 8007d3a:	f7ff ffbd 	bl	8007cb8 <__sinit>
 8007d3e:	3648      	adds	r6, #72	; 0x48
 8007d40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	d503      	bpl.n	8007d50 <__sfp+0x28>
 8007d48:	6833      	ldr	r3, [r6, #0]
 8007d4a:	b30b      	cbz	r3, 8007d90 <__sfp+0x68>
 8007d4c:	6836      	ldr	r6, [r6, #0]
 8007d4e:	e7f7      	b.n	8007d40 <__sfp+0x18>
 8007d50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d54:	b9d5      	cbnz	r5, 8007d8c <__sfp+0x64>
 8007d56:	4b16      	ldr	r3, [pc, #88]	; (8007db0 <__sfp+0x88>)
 8007d58:	60e3      	str	r3, [r4, #12]
 8007d5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d5e:	6665      	str	r5, [r4, #100]	; 0x64
 8007d60:	f000 f859 	bl	8007e16 <__retarget_lock_init_recursive>
 8007d64:	f7ff ff96 	bl	8007c94 <__sfp_lock_release>
 8007d68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d70:	6025      	str	r5, [r4, #0]
 8007d72:	61a5      	str	r5, [r4, #24]
 8007d74:	2208      	movs	r2, #8
 8007d76:	4629      	mov	r1, r5
 8007d78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d7c:	f7fd f80c 	bl	8004d98 <memset>
 8007d80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d88:	4620      	mov	r0, r4
 8007d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d8c:	3468      	adds	r4, #104	; 0x68
 8007d8e:	e7d9      	b.n	8007d44 <__sfp+0x1c>
 8007d90:	2104      	movs	r1, #4
 8007d92:	4638      	mov	r0, r7
 8007d94:	f7ff ff62 	bl	8007c5c <__sfmoreglue>
 8007d98:	4604      	mov	r4, r0
 8007d9a:	6030      	str	r0, [r6, #0]
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d1d5      	bne.n	8007d4c <__sfp+0x24>
 8007da0:	f7ff ff78 	bl	8007c94 <__sfp_lock_release>
 8007da4:	230c      	movs	r3, #12
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	e7ee      	b.n	8007d88 <__sfp+0x60>
 8007daa:	bf00      	nop
 8007dac:	080095dc 	.word	0x080095dc
 8007db0:	ffff0001 	.word	0xffff0001

08007db4 <fiprintf>:
 8007db4:	b40e      	push	{r1, r2, r3}
 8007db6:	b503      	push	{r0, r1, lr}
 8007db8:	4601      	mov	r1, r0
 8007dba:	ab03      	add	r3, sp, #12
 8007dbc:	4805      	ldr	r0, [pc, #20]	; (8007dd4 <fiprintf+0x20>)
 8007dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc2:	6800      	ldr	r0, [r0, #0]
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	f000 f8ad 	bl	8007f24 <_vfiprintf_r>
 8007dca:	b002      	add	sp, #8
 8007dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dd0:	b003      	add	sp, #12
 8007dd2:	4770      	bx	lr
 8007dd4:	2000000c 	.word	0x2000000c

08007dd8 <_fwalk_reent>:
 8007dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ddc:	4606      	mov	r6, r0
 8007dde:	4688      	mov	r8, r1
 8007de0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007de4:	2700      	movs	r7, #0
 8007de6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dea:	f1b9 0901 	subs.w	r9, r9, #1
 8007dee:	d505      	bpl.n	8007dfc <_fwalk_reent+0x24>
 8007df0:	6824      	ldr	r4, [r4, #0]
 8007df2:	2c00      	cmp	r4, #0
 8007df4:	d1f7      	bne.n	8007de6 <_fwalk_reent+0xe>
 8007df6:	4638      	mov	r0, r7
 8007df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dfc:	89ab      	ldrh	r3, [r5, #12]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d907      	bls.n	8007e12 <_fwalk_reent+0x3a>
 8007e02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e06:	3301      	adds	r3, #1
 8007e08:	d003      	beq.n	8007e12 <_fwalk_reent+0x3a>
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	47c0      	blx	r8
 8007e10:	4307      	orrs	r7, r0
 8007e12:	3568      	adds	r5, #104	; 0x68
 8007e14:	e7e9      	b.n	8007dea <_fwalk_reent+0x12>

08007e16 <__retarget_lock_init_recursive>:
 8007e16:	4770      	bx	lr

08007e18 <__retarget_lock_acquire_recursive>:
 8007e18:	4770      	bx	lr

08007e1a <__retarget_lock_release_recursive>:
 8007e1a:	4770      	bx	lr

08007e1c <__ascii_mbtowc>:
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	b901      	cbnz	r1, 8007e22 <__ascii_mbtowc+0x6>
 8007e20:	a901      	add	r1, sp, #4
 8007e22:	b142      	cbz	r2, 8007e36 <__ascii_mbtowc+0x1a>
 8007e24:	b14b      	cbz	r3, 8007e3a <__ascii_mbtowc+0x1e>
 8007e26:	7813      	ldrb	r3, [r2, #0]
 8007e28:	600b      	str	r3, [r1, #0]
 8007e2a:	7812      	ldrb	r2, [r2, #0]
 8007e2c:	1e10      	subs	r0, r2, #0
 8007e2e:	bf18      	it	ne
 8007e30:	2001      	movne	r0, #1
 8007e32:	b002      	add	sp, #8
 8007e34:	4770      	bx	lr
 8007e36:	4610      	mov	r0, r2
 8007e38:	e7fb      	b.n	8007e32 <__ascii_mbtowc+0x16>
 8007e3a:	f06f 0001 	mvn.w	r0, #1
 8007e3e:	e7f8      	b.n	8007e32 <__ascii_mbtowc+0x16>

08007e40 <memmove>:
 8007e40:	4288      	cmp	r0, r1
 8007e42:	b510      	push	{r4, lr}
 8007e44:	eb01 0402 	add.w	r4, r1, r2
 8007e48:	d902      	bls.n	8007e50 <memmove+0x10>
 8007e4a:	4284      	cmp	r4, r0
 8007e4c:	4623      	mov	r3, r4
 8007e4e:	d807      	bhi.n	8007e60 <memmove+0x20>
 8007e50:	1e43      	subs	r3, r0, #1
 8007e52:	42a1      	cmp	r1, r4
 8007e54:	d008      	beq.n	8007e68 <memmove+0x28>
 8007e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e5e:	e7f8      	b.n	8007e52 <memmove+0x12>
 8007e60:	4402      	add	r2, r0
 8007e62:	4601      	mov	r1, r0
 8007e64:	428a      	cmp	r2, r1
 8007e66:	d100      	bne.n	8007e6a <memmove+0x2a>
 8007e68:	bd10      	pop	{r4, pc}
 8007e6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e72:	e7f7      	b.n	8007e64 <memmove+0x24>

08007e74 <_realloc_r>:
 8007e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e78:	4680      	mov	r8, r0
 8007e7a:	4614      	mov	r4, r2
 8007e7c:	460e      	mov	r6, r1
 8007e7e:	b921      	cbnz	r1, 8007e8a <_realloc_r+0x16>
 8007e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e84:	4611      	mov	r1, r2
 8007e86:	f7fc bffb 	b.w	8004e80 <_malloc_r>
 8007e8a:	b92a      	cbnz	r2, 8007e98 <_realloc_r+0x24>
 8007e8c:	f7fc ff8c 	bl	8004da8 <_free_r>
 8007e90:	4625      	mov	r5, r4
 8007e92:	4628      	mov	r0, r5
 8007e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e98:	f000 faae 	bl	80083f8 <_malloc_usable_size_r>
 8007e9c:	4284      	cmp	r4, r0
 8007e9e:	4607      	mov	r7, r0
 8007ea0:	d802      	bhi.n	8007ea8 <_realloc_r+0x34>
 8007ea2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ea6:	d812      	bhi.n	8007ece <_realloc_r+0x5a>
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	4640      	mov	r0, r8
 8007eac:	f7fc ffe8 	bl	8004e80 <_malloc_r>
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d0ed      	beq.n	8007e92 <_realloc_r+0x1e>
 8007eb6:	42bc      	cmp	r4, r7
 8007eb8:	4622      	mov	r2, r4
 8007eba:	4631      	mov	r1, r6
 8007ebc:	bf28      	it	cs
 8007ebe:	463a      	movcs	r2, r7
 8007ec0:	f7fe fc12 	bl	80066e8 <memcpy>
 8007ec4:	4631      	mov	r1, r6
 8007ec6:	4640      	mov	r0, r8
 8007ec8:	f7fc ff6e 	bl	8004da8 <_free_r>
 8007ecc:	e7e1      	b.n	8007e92 <_realloc_r+0x1e>
 8007ece:	4635      	mov	r5, r6
 8007ed0:	e7df      	b.n	8007e92 <_realloc_r+0x1e>

08007ed2 <__sfputc_r>:
 8007ed2:	6893      	ldr	r3, [r2, #8]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	b410      	push	{r4}
 8007eda:	6093      	str	r3, [r2, #8]
 8007edc:	da08      	bge.n	8007ef0 <__sfputc_r+0x1e>
 8007ede:	6994      	ldr	r4, [r2, #24]
 8007ee0:	42a3      	cmp	r3, r4
 8007ee2:	db01      	blt.n	8007ee8 <__sfputc_r+0x16>
 8007ee4:	290a      	cmp	r1, #10
 8007ee6:	d103      	bne.n	8007ef0 <__sfputc_r+0x1e>
 8007ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eec:	f000 b94a 	b.w	8008184 <__swbuf_r>
 8007ef0:	6813      	ldr	r3, [r2, #0]
 8007ef2:	1c58      	adds	r0, r3, #1
 8007ef4:	6010      	str	r0, [r2, #0]
 8007ef6:	7019      	strb	r1, [r3, #0]
 8007ef8:	4608      	mov	r0, r1
 8007efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <__sfputs_r>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	4606      	mov	r6, r0
 8007f04:	460f      	mov	r7, r1
 8007f06:	4614      	mov	r4, r2
 8007f08:	18d5      	adds	r5, r2, r3
 8007f0a:	42ac      	cmp	r4, r5
 8007f0c:	d101      	bne.n	8007f12 <__sfputs_r+0x12>
 8007f0e:	2000      	movs	r0, #0
 8007f10:	e007      	b.n	8007f22 <__sfputs_r+0x22>
 8007f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f16:	463a      	mov	r2, r7
 8007f18:	4630      	mov	r0, r6
 8007f1a:	f7ff ffda 	bl	8007ed2 <__sfputc_r>
 8007f1e:	1c43      	adds	r3, r0, #1
 8007f20:	d1f3      	bne.n	8007f0a <__sfputs_r+0xa>
 8007f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f24 <_vfiprintf_r>:
 8007f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f28:	460d      	mov	r5, r1
 8007f2a:	b09d      	sub	sp, #116	; 0x74
 8007f2c:	4614      	mov	r4, r2
 8007f2e:	4698      	mov	r8, r3
 8007f30:	4606      	mov	r6, r0
 8007f32:	b118      	cbz	r0, 8007f3c <_vfiprintf_r+0x18>
 8007f34:	6983      	ldr	r3, [r0, #24]
 8007f36:	b90b      	cbnz	r3, 8007f3c <_vfiprintf_r+0x18>
 8007f38:	f7ff febe 	bl	8007cb8 <__sinit>
 8007f3c:	4b89      	ldr	r3, [pc, #548]	; (8008164 <_vfiprintf_r+0x240>)
 8007f3e:	429d      	cmp	r5, r3
 8007f40:	d11b      	bne.n	8007f7a <_vfiprintf_r+0x56>
 8007f42:	6875      	ldr	r5, [r6, #4]
 8007f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f46:	07d9      	lsls	r1, r3, #31
 8007f48:	d405      	bmi.n	8007f56 <_vfiprintf_r+0x32>
 8007f4a:	89ab      	ldrh	r3, [r5, #12]
 8007f4c:	059a      	lsls	r2, r3, #22
 8007f4e:	d402      	bmi.n	8007f56 <_vfiprintf_r+0x32>
 8007f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f52:	f7ff ff61 	bl	8007e18 <__retarget_lock_acquire_recursive>
 8007f56:	89ab      	ldrh	r3, [r5, #12]
 8007f58:	071b      	lsls	r3, r3, #28
 8007f5a:	d501      	bpl.n	8007f60 <_vfiprintf_r+0x3c>
 8007f5c:	692b      	ldr	r3, [r5, #16]
 8007f5e:	b9eb      	cbnz	r3, 8007f9c <_vfiprintf_r+0x78>
 8007f60:	4629      	mov	r1, r5
 8007f62:	4630      	mov	r0, r6
 8007f64:	f000 f96e 	bl	8008244 <__swsetup_r>
 8007f68:	b1c0      	cbz	r0, 8007f9c <_vfiprintf_r+0x78>
 8007f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f6c:	07dc      	lsls	r4, r3, #31
 8007f6e:	d50e      	bpl.n	8007f8e <_vfiprintf_r+0x6a>
 8007f70:	f04f 30ff 	mov.w	r0, #4294967295
 8007f74:	b01d      	add	sp, #116	; 0x74
 8007f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7a:	4b7b      	ldr	r3, [pc, #492]	; (8008168 <_vfiprintf_r+0x244>)
 8007f7c:	429d      	cmp	r5, r3
 8007f7e:	d101      	bne.n	8007f84 <_vfiprintf_r+0x60>
 8007f80:	68b5      	ldr	r5, [r6, #8]
 8007f82:	e7df      	b.n	8007f44 <_vfiprintf_r+0x20>
 8007f84:	4b79      	ldr	r3, [pc, #484]	; (800816c <_vfiprintf_r+0x248>)
 8007f86:	429d      	cmp	r5, r3
 8007f88:	bf08      	it	eq
 8007f8a:	68f5      	ldreq	r5, [r6, #12]
 8007f8c:	e7da      	b.n	8007f44 <_vfiprintf_r+0x20>
 8007f8e:	89ab      	ldrh	r3, [r5, #12]
 8007f90:	0598      	lsls	r0, r3, #22
 8007f92:	d4ed      	bmi.n	8007f70 <_vfiprintf_r+0x4c>
 8007f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f96:	f7ff ff40 	bl	8007e1a <__retarget_lock_release_recursive>
 8007f9a:	e7e9      	b.n	8007f70 <_vfiprintf_r+0x4c>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa0:	2320      	movs	r3, #32
 8007fa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007faa:	2330      	movs	r3, #48	; 0x30
 8007fac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008170 <_vfiprintf_r+0x24c>
 8007fb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fb4:	f04f 0901 	mov.w	r9, #1
 8007fb8:	4623      	mov	r3, r4
 8007fba:	469a      	mov	sl, r3
 8007fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fc0:	b10a      	cbz	r2, 8007fc6 <_vfiprintf_r+0xa2>
 8007fc2:	2a25      	cmp	r2, #37	; 0x25
 8007fc4:	d1f9      	bne.n	8007fba <_vfiprintf_r+0x96>
 8007fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8007fca:	d00b      	beq.n	8007fe4 <_vfiprintf_r+0xc0>
 8007fcc:	465b      	mov	r3, fp
 8007fce:	4622      	mov	r2, r4
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f7ff ff94 	bl	8007f00 <__sfputs_r>
 8007fd8:	3001      	adds	r0, #1
 8007fda:	f000 80aa 	beq.w	8008132 <_vfiprintf_r+0x20e>
 8007fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fe0:	445a      	add	r2, fp
 8007fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8007fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 80a2 	beq.w	8008132 <_vfiprintf_r+0x20e>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ff8:	f10a 0a01 	add.w	sl, sl, #1
 8007ffc:	9304      	str	r3, [sp, #16]
 8007ffe:	9307      	str	r3, [sp, #28]
 8008000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008004:	931a      	str	r3, [sp, #104]	; 0x68
 8008006:	4654      	mov	r4, sl
 8008008:	2205      	movs	r2, #5
 800800a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800e:	4858      	ldr	r0, [pc, #352]	; (8008170 <_vfiprintf_r+0x24c>)
 8008010:	f7f8 f8fe 	bl	8000210 <memchr>
 8008014:	9a04      	ldr	r2, [sp, #16]
 8008016:	b9d8      	cbnz	r0, 8008050 <_vfiprintf_r+0x12c>
 8008018:	06d1      	lsls	r1, r2, #27
 800801a:	bf44      	itt	mi
 800801c:	2320      	movmi	r3, #32
 800801e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008022:	0713      	lsls	r3, r2, #28
 8008024:	bf44      	itt	mi
 8008026:	232b      	movmi	r3, #43	; 0x2b
 8008028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800802c:	f89a 3000 	ldrb.w	r3, [sl]
 8008030:	2b2a      	cmp	r3, #42	; 0x2a
 8008032:	d015      	beq.n	8008060 <_vfiprintf_r+0x13c>
 8008034:	9a07      	ldr	r2, [sp, #28]
 8008036:	4654      	mov	r4, sl
 8008038:	2000      	movs	r0, #0
 800803a:	f04f 0c0a 	mov.w	ip, #10
 800803e:	4621      	mov	r1, r4
 8008040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008044:	3b30      	subs	r3, #48	; 0x30
 8008046:	2b09      	cmp	r3, #9
 8008048:	d94e      	bls.n	80080e8 <_vfiprintf_r+0x1c4>
 800804a:	b1b0      	cbz	r0, 800807a <_vfiprintf_r+0x156>
 800804c:	9207      	str	r2, [sp, #28]
 800804e:	e014      	b.n	800807a <_vfiprintf_r+0x156>
 8008050:	eba0 0308 	sub.w	r3, r0, r8
 8008054:	fa09 f303 	lsl.w	r3, r9, r3
 8008058:	4313      	orrs	r3, r2
 800805a:	9304      	str	r3, [sp, #16]
 800805c:	46a2      	mov	sl, r4
 800805e:	e7d2      	b.n	8008006 <_vfiprintf_r+0xe2>
 8008060:	9b03      	ldr	r3, [sp, #12]
 8008062:	1d19      	adds	r1, r3, #4
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	9103      	str	r1, [sp, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	bfbb      	ittet	lt
 800806c:	425b      	neglt	r3, r3
 800806e:	f042 0202 	orrlt.w	r2, r2, #2
 8008072:	9307      	strge	r3, [sp, #28]
 8008074:	9307      	strlt	r3, [sp, #28]
 8008076:	bfb8      	it	lt
 8008078:	9204      	strlt	r2, [sp, #16]
 800807a:	7823      	ldrb	r3, [r4, #0]
 800807c:	2b2e      	cmp	r3, #46	; 0x2e
 800807e:	d10c      	bne.n	800809a <_vfiprintf_r+0x176>
 8008080:	7863      	ldrb	r3, [r4, #1]
 8008082:	2b2a      	cmp	r3, #42	; 0x2a
 8008084:	d135      	bne.n	80080f2 <_vfiprintf_r+0x1ce>
 8008086:	9b03      	ldr	r3, [sp, #12]
 8008088:	1d1a      	adds	r2, r3, #4
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	9203      	str	r2, [sp, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	bfb8      	it	lt
 8008092:	f04f 33ff 	movlt.w	r3, #4294967295
 8008096:	3402      	adds	r4, #2
 8008098:	9305      	str	r3, [sp, #20]
 800809a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008180 <_vfiprintf_r+0x25c>
 800809e:	7821      	ldrb	r1, [r4, #0]
 80080a0:	2203      	movs	r2, #3
 80080a2:	4650      	mov	r0, sl
 80080a4:	f7f8 f8b4 	bl	8000210 <memchr>
 80080a8:	b140      	cbz	r0, 80080bc <_vfiprintf_r+0x198>
 80080aa:	2340      	movs	r3, #64	; 0x40
 80080ac:	eba0 000a 	sub.w	r0, r0, sl
 80080b0:	fa03 f000 	lsl.w	r0, r3, r0
 80080b4:	9b04      	ldr	r3, [sp, #16]
 80080b6:	4303      	orrs	r3, r0
 80080b8:	3401      	adds	r4, #1
 80080ba:	9304      	str	r3, [sp, #16]
 80080bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c0:	482c      	ldr	r0, [pc, #176]	; (8008174 <_vfiprintf_r+0x250>)
 80080c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080c6:	2206      	movs	r2, #6
 80080c8:	f7f8 f8a2 	bl	8000210 <memchr>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d03f      	beq.n	8008150 <_vfiprintf_r+0x22c>
 80080d0:	4b29      	ldr	r3, [pc, #164]	; (8008178 <_vfiprintf_r+0x254>)
 80080d2:	bb1b      	cbnz	r3, 800811c <_vfiprintf_r+0x1f8>
 80080d4:	9b03      	ldr	r3, [sp, #12]
 80080d6:	3307      	adds	r3, #7
 80080d8:	f023 0307 	bic.w	r3, r3, #7
 80080dc:	3308      	adds	r3, #8
 80080de:	9303      	str	r3, [sp, #12]
 80080e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e2:	443b      	add	r3, r7
 80080e4:	9309      	str	r3, [sp, #36]	; 0x24
 80080e6:	e767      	b.n	8007fb8 <_vfiprintf_r+0x94>
 80080e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80080ec:	460c      	mov	r4, r1
 80080ee:	2001      	movs	r0, #1
 80080f0:	e7a5      	b.n	800803e <_vfiprintf_r+0x11a>
 80080f2:	2300      	movs	r3, #0
 80080f4:	3401      	adds	r4, #1
 80080f6:	9305      	str	r3, [sp, #20]
 80080f8:	4619      	mov	r1, r3
 80080fa:	f04f 0c0a 	mov.w	ip, #10
 80080fe:	4620      	mov	r0, r4
 8008100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008104:	3a30      	subs	r2, #48	; 0x30
 8008106:	2a09      	cmp	r2, #9
 8008108:	d903      	bls.n	8008112 <_vfiprintf_r+0x1ee>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d0c5      	beq.n	800809a <_vfiprintf_r+0x176>
 800810e:	9105      	str	r1, [sp, #20]
 8008110:	e7c3      	b.n	800809a <_vfiprintf_r+0x176>
 8008112:	fb0c 2101 	mla	r1, ip, r1, r2
 8008116:	4604      	mov	r4, r0
 8008118:	2301      	movs	r3, #1
 800811a:	e7f0      	b.n	80080fe <_vfiprintf_r+0x1da>
 800811c:	ab03      	add	r3, sp, #12
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	462a      	mov	r2, r5
 8008122:	4b16      	ldr	r3, [pc, #88]	; (800817c <_vfiprintf_r+0x258>)
 8008124:	a904      	add	r1, sp, #16
 8008126:	4630      	mov	r0, r6
 8008128:	f7fc ffbe 	bl	80050a8 <_printf_float>
 800812c:	4607      	mov	r7, r0
 800812e:	1c78      	adds	r0, r7, #1
 8008130:	d1d6      	bne.n	80080e0 <_vfiprintf_r+0x1bc>
 8008132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008134:	07d9      	lsls	r1, r3, #31
 8008136:	d405      	bmi.n	8008144 <_vfiprintf_r+0x220>
 8008138:	89ab      	ldrh	r3, [r5, #12]
 800813a:	059a      	lsls	r2, r3, #22
 800813c:	d402      	bmi.n	8008144 <_vfiprintf_r+0x220>
 800813e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008140:	f7ff fe6b 	bl	8007e1a <__retarget_lock_release_recursive>
 8008144:	89ab      	ldrh	r3, [r5, #12]
 8008146:	065b      	lsls	r3, r3, #25
 8008148:	f53f af12 	bmi.w	8007f70 <_vfiprintf_r+0x4c>
 800814c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800814e:	e711      	b.n	8007f74 <_vfiprintf_r+0x50>
 8008150:	ab03      	add	r3, sp, #12
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	462a      	mov	r2, r5
 8008156:	4b09      	ldr	r3, [pc, #36]	; (800817c <_vfiprintf_r+0x258>)
 8008158:	a904      	add	r1, sp, #16
 800815a:	4630      	mov	r0, r6
 800815c:	f7fd fa48 	bl	80055f0 <_printf_i>
 8008160:	e7e4      	b.n	800812c <_vfiprintf_r+0x208>
 8008162:	bf00      	nop
 8008164:	08009988 	.word	0x08009988
 8008168:	080099a8 	.word	0x080099a8
 800816c:	08009968 	.word	0x08009968
 8008170:	080097fc 	.word	0x080097fc
 8008174:	08009806 	.word	0x08009806
 8008178:	080050a9 	.word	0x080050a9
 800817c:	08007f01 	.word	0x08007f01
 8008180:	08009802 	.word	0x08009802

08008184 <__swbuf_r>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	460e      	mov	r6, r1
 8008188:	4614      	mov	r4, r2
 800818a:	4605      	mov	r5, r0
 800818c:	b118      	cbz	r0, 8008196 <__swbuf_r+0x12>
 800818e:	6983      	ldr	r3, [r0, #24]
 8008190:	b90b      	cbnz	r3, 8008196 <__swbuf_r+0x12>
 8008192:	f7ff fd91 	bl	8007cb8 <__sinit>
 8008196:	4b21      	ldr	r3, [pc, #132]	; (800821c <__swbuf_r+0x98>)
 8008198:	429c      	cmp	r4, r3
 800819a:	d12b      	bne.n	80081f4 <__swbuf_r+0x70>
 800819c:	686c      	ldr	r4, [r5, #4]
 800819e:	69a3      	ldr	r3, [r4, #24]
 80081a0:	60a3      	str	r3, [r4, #8]
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	071a      	lsls	r2, r3, #28
 80081a6:	d52f      	bpl.n	8008208 <__swbuf_r+0x84>
 80081a8:	6923      	ldr	r3, [r4, #16]
 80081aa:	b36b      	cbz	r3, 8008208 <__swbuf_r+0x84>
 80081ac:	6923      	ldr	r3, [r4, #16]
 80081ae:	6820      	ldr	r0, [r4, #0]
 80081b0:	1ac0      	subs	r0, r0, r3
 80081b2:	6963      	ldr	r3, [r4, #20]
 80081b4:	b2f6      	uxtb	r6, r6
 80081b6:	4283      	cmp	r3, r0
 80081b8:	4637      	mov	r7, r6
 80081ba:	dc04      	bgt.n	80081c6 <__swbuf_r+0x42>
 80081bc:	4621      	mov	r1, r4
 80081be:	4628      	mov	r0, r5
 80081c0:	f7ff fce6 	bl	8007b90 <_fflush_r>
 80081c4:	bb30      	cbnz	r0, 8008214 <__swbuf_r+0x90>
 80081c6:	68a3      	ldr	r3, [r4, #8]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	60a3      	str	r3, [r4, #8]
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	1c5a      	adds	r2, r3, #1
 80081d0:	6022      	str	r2, [r4, #0]
 80081d2:	701e      	strb	r6, [r3, #0]
 80081d4:	6963      	ldr	r3, [r4, #20]
 80081d6:	3001      	adds	r0, #1
 80081d8:	4283      	cmp	r3, r0
 80081da:	d004      	beq.n	80081e6 <__swbuf_r+0x62>
 80081dc:	89a3      	ldrh	r3, [r4, #12]
 80081de:	07db      	lsls	r3, r3, #31
 80081e0:	d506      	bpl.n	80081f0 <__swbuf_r+0x6c>
 80081e2:	2e0a      	cmp	r6, #10
 80081e4:	d104      	bne.n	80081f0 <__swbuf_r+0x6c>
 80081e6:	4621      	mov	r1, r4
 80081e8:	4628      	mov	r0, r5
 80081ea:	f7ff fcd1 	bl	8007b90 <_fflush_r>
 80081ee:	b988      	cbnz	r0, 8008214 <__swbuf_r+0x90>
 80081f0:	4638      	mov	r0, r7
 80081f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081f4:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <__swbuf_r+0x9c>)
 80081f6:	429c      	cmp	r4, r3
 80081f8:	d101      	bne.n	80081fe <__swbuf_r+0x7a>
 80081fa:	68ac      	ldr	r4, [r5, #8]
 80081fc:	e7cf      	b.n	800819e <__swbuf_r+0x1a>
 80081fe:	4b09      	ldr	r3, [pc, #36]	; (8008224 <__swbuf_r+0xa0>)
 8008200:	429c      	cmp	r4, r3
 8008202:	bf08      	it	eq
 8008204:	68ec      	ldreq	r4, [r5, #12]
 8008206:	e7ca      	b.n	800819e <__swbuf_r+0x1a>
 8008208:	4621      	mov	r1, r4
 800820a:	4628      	mov	r0, r5
 800820c:	f000 f81a 	bl	8008244 <__swsetup_r>
 8008210:	2800      	cmp	r0, #0
 8008212:	d0cb      	beq.n	80081ac <__swbuf_r+0x28>
 8008214:	f04f 37ff 	mov.w	r7, #4294967295
 8008218:	e7ea      	b.n	80081f0 <__swbuf_r+0x6c>
 800821a:	bf00      	nop
 800821c:	08009988 	.word	0x08009988
 8008220:	080099a8 	.word	0x080099a8
 8008224:	08009968 	.word	0x08009968

08008228 <__ascii_wctomb>:
 8008228:	b149      	cbz	r1, 800823e <__ascii_wctomb+0x16>
 800822a:	2aff      	cmp	r2, #255	; 0xff
 800822c:	bf85      	ittet	hi
 800822e:	238a      	movhi	r3, #138	; 0x8a
 8008230:	6003      	strhi	r3, [r0, #0]
 8008232:	700a      	strbls	r2, [r1, #0]
 8008234:	f04f 30ff 	movhi.w	r0, #4294967295
 8008238:	bf98      	it	ls
 800823a:	2001      	movls	r0, #1
 800823c:	4770      	bx	lr
 800823e:	4608      	mov	r0, r1
 8008240:	4770      	bx	lr
	...

08008244 <__swsetup_r>:
 8008244:	4b32      	ldr	r3, [pc, #200]	; (8008310 <__swsetup_r+0xcc>)
 8008246:	b570      	push	{r4, r5, r6, lr}
 8008248:	681d      	ldr	r5, [r3, #0]
 800824a:	4606      	mov	r6, r0
 800824c:	460c      	mov	r4, r1
 800824e:	b125      	cbz	r5, 800825a <__swsetup_r+0x16>
 8008250:	69ab      	ldr	r3, [r5, #24]
 8008252:	b913      	cbnz	r3, 800825a <__swsetup_r+0x16>
 8008254:	4628      	mov	r0, r5
 8008256:	f7ff fd2f 	bl	8007cb8 <__sinit>
 800825a:	4b2e      	ldr	r3, [pc, #184]	; (8008314 <__swsetup_r+0xd0>)
 800825c:	429c      	cmp	r4, r3
 800825e:	d10f      	bne.n	8008280 <__swsetup_r+0x3c>
 8008260:	686c      	ldr	r4, [r5, #4]
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008268:	0719      	lsls	r1, r3, #28
 800826a:	d42c      	bmi.n	80082c6 <__swsetup_r+0x82>
 800826c:	06dd      	lsls	r5, r3, #27
 800826e:	d411      	bmi.n	8008294 <__swsetup_r+0x50>
 8008270:	2309      	movs	r3, #9
 8008272:	6033      	str	r3, [r6, #0]
 8008274:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008278:	81a3      	strh	r3, [r4, #12]
 800827a:	f04f 30ff 	mov.w	r0, #4294967295
 800827e:	e03e      	b.n	80082fe <__swsetup_r+0xba>
 8008280:	4b25      	ldr	r3, [pc, #148]	; (8008318 <__swsetup_r+0xd4>)
 8008282:	429c      	cmp	r4, r3
 8008284:	d101      	bne.n	800828a <__swsetup_r+0x46>
 8008286:	68ac      	ldr	r4, [r5, #8]
 8008288:	e7eb      	b.n	8008262 <__swsetup_r+0x1e>
 800828a:	4b24      	ldr	r3, [pc, #144]	; (800831c <__swsetup_r+0xd8>)
 800828c:	429c      	cmp	r4, r3
 800828e:	bf08      	it	eq
 8008290:	68ec      	ldreq	r4, [r5, #12]
 8008292:	e7e6      	b.n	8008262 <__swsetup_r+0x1e>
 8008294:	0758      	lsls	r0, r3, #29
 8008296:	d512      	bpl.n	80082be <__swsetup_r+0x7a>
 8008298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800829a:	b141      	cbz	r1, 80082ae <__swsetup_r+0x6a>
 800829c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082a0:	4299      	cmp	r1, r3
 80082a2:	d002      	beq.n	80082aa <__swsetup_r+0x66>
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7fc fd7f 	bl	8004da8 <_free_r>
 80082aa:	2300      	movs	r3, #0
 80082ac:	6363      	str	r3, [r4, #52]	; 0x34
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082b4:	81a3      	strh	r3, [r4, #12]
 80082b6:	2300      	movs	r3, #0
 80082b8:	6063      	str	r3, [r4, #4]
 80082ba:	6923      	ldr	r3, [r4, #16]
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	f043 0308 	orr.w	r3, r3, #8
 80082c4:	81a3      	strh	r3, [r4, #12]
 80082c6:	6923      	ldr	r3, [r4, #16]
 80082c8:	b94b      	cbnz	r3, 80082de <__swsetup_r+0x9a>
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082d4:	d003      	beq.n	80082de <__swsetup_r+0x9a>
 80082d6:	4621      	mov	r1, r4
 80082d8:	4630      	mov	r0, r6
 80082da:	f000 f84d 	bl	8008378 <__smakebuf_r>
 80082de:	89a0      	ldrh	r0, [r4, #12]
 80082e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082e4:	f010 0301 	ands.w	r3, r0, #1
 80082e8:	d00a      	beq.n	8008300 <__swsetup_r+0xbc>
 80082ea:	2300      	movs	r3, #0
 80082ec:	60a3      	str	r3, [r4, #8]
 80082ee:	6963      	ldr	r3, [r4, #20]
 80082f0:	425b      	negs	r3, r3
 80082f2:	61a3      	str	r3, [r4, #24]
 80082f4:	6923      	ldr	r3, [r4, #16]
 80082f6:	b943      	cbnz	r3, 800830a <__swsetup_r+0xc6>
 80082f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082fc:	d1ba      	bne.n	8008274 <__swsetup_r+0x30>
 80082fe:	bd70      	pop	{r4, r5, r6, pc}
 8008300:	0781      	lsls	r1, r0, #30
 8008302:	bf58      	it	pl
 8008304:	6963      	ldrpl	r3, [r4, #20]
 8008306:	60a3      	str	r3, [r4, #8]
 8008308:	e7f4      	b.n	80082f4 <__swsetup_r+0xb0>
 800830a:	2000      	movs	r0, #0
 800830c:	e7f7      	b.n	80082fe <__swsetup_r+0xba>
 800830e:	bf00      	nop
 8008310:	2000000c 	.word	0x2000000c
 8008314:	08009988 	.word	0x08009988
 8008318:	080099a8 	.word	0x080099a8
 800831c:	08009968 	.word	0x08009968

08008320 <abort>:
 8008320:	b508      	push	{r3, lr}
 8008322:	2006      	movs	r0, #6
 8008324:	f000 f898 	bl	8008458 <raise>
 8008328:	2001      	movs	r0, #1
 800832a:	f7f8 ff0d 	bl	8001148 <_exit>

0800832e <__swhatbuf_r>:
 800832e:	b570      	push	{r4, r5, r6, lr}
 8008330:	460e      	mov	r6, r1
 8008332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008336:	2900      	cmp	r1, #0
 8008338:	b096      	sub	sp, #88	; 0x58
 800833a:	4614      	mov	r4, r2
 800833c:	461d      	mov	r5, r3
 800833e:	da08      	bge.n	8008352 <__swhatbuf_r+0x24>
 8008340:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	602a      	str	r2, [r5, #0]
 8008348:	061a      	lsls	r2, r3, #24
 800834a:	d410      	bmi.n	800836e <__swhatbuf_r+0x40>
 800834c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008350:	e00e      	b.n	8008370 <__swhatbuf_r+0x42>
 8008352:	466a      	mov	r2, sp
 8008354:	f000 f89c 	bl	8008490 <_fstat_r>
 8008358:	2800      	cmp	r0, #0
 800835a:	dbf1      	blt.n	8008340 <__swhatbuf_r+0x12>
 800835c:	9a01      	ldr	r2, [sp, #4]
 800835e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008362:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008366:	425a      	negs	r2, r3
 8008368:	415a      	adcs	r2, r3
 800836a:	602a      	str	r2, [r5, #0]
 800836c:	e7ee      	b.n	800834c <__swhatbuf_r+0x1e>
 800836e:	2340      	movs	r3, #64	; 0x40
 8008370:	2000      	movs	r0, #0
 8008372:	6023      	str	r3, [r4, #0]
 8008374:	b016      	add	sp, #88	; 0x58
 8008376:	bd70      	pop	{r4, r5, r6, pc}

08008378 <__smakebuf_r>:
 8008378:	898b      	ldrh	r3, [r1, #12]
 800837a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800837c:	079d      	lsls	r5, r3, #30
 800837e:	4606      	mov	r6, r0
 8008380:	460c      	mov	r4, r1
 8008382:	d507      	bpl.n	8008394 <__smakebuf_r+0x1c>
 8008384:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	6123      	str	r3, [r4, #16]
 800838c:	2301      	movs	r3, #1
 800838e:	6163      	str	r3, [r4, #20]
 8008390:	b002      	add	sp, #8
 8008392:	bd70      	pop	{r4, r5, r6, pc}
 8008394:	ab01      	add	r3, sp, #4
 8008396:	466a      	mov	r2, sp
 8008398:	f7ff ffc9 	bl	800832e <__swhatbuf_r>
 800839c:	9900      	ldr	r1, [sp, #0]
 800839e:	4605      	mov	r5, r0
 80083a0:	4630      	mov	r0, r6
 80083a2:	f7fc fd6d 	bl	8004e80 <_malloc_r>
 80083a6:	b948      	cbnz	r0, 80083bc <__smakebuf_r+0x44>
 80083a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ac:	059a      	lsls	r2, r3, #22
 80083ae:	d4ef      	bmi.n	8008390 <__smakebuf_r+0x18>
 80083b0:	f023 0303 	bic.w	r3, r3, #3
 80083b4:	f043 0302 	orr.w	r3, r3, #2
 80083b8:	81a3      	strh	r3, [r4, #12]
 80083ba:	e7e3      	b.n	8008384 <__smakebuf_r+0xc>
 80083bc:	4b0d      	ldr	r3, [pc, #52]	; (80083f4 <__smakebuf_r+0x7c>)
 80083be:	62b3      	str	r3, [r6, #40]	; 0x28
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	6020      	str	r0, [r4, #0]
 80083c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c8:	81a3      	strh	r3, [r4, #12]
 80083ca:	9b00      	ldr	r3, [sp, #0]
 80083cc:	6163      	str	r3, [r4, #20]
 80083ce:	9b01      	ldr	r3, [sp, #4]
 80083d0:	6120      	str	r0, [r4, #16]
 80083d2:	b15b      	cbz	r3, 80083ec <__smakebuf_r+0x74>
 80083d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083d8:	4630      	mov	r0, r6
 80083da:	f000 f86b 	bl	80084b4 <_isatty_r>
 80083de:	b128      	cbz	r0, 80083ec <__smakebuf_r+0x74>
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	f023 0303 	bic.w	r3, r3, #3
 80083e6:	f043 0301 	orr.w	r3, r3, #1
 80083ea:	81a3      	strh	r3, [r4, #12]
 80083ec:	89a0      	ldrh	r0, [r4, #12]
 80083ee:	4305      	orrs	r5, r0
 80083f0:	81a5      	strh	r5, [r4, #12]
 80083f2:	e7cd      	b.n	8008390 <__smakebuf_r+0x18>
 80083f4:	08007c51 	.word	0x08007c51

080083f8 <_malloc_usable_size_r>:
 80083f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083fc:	1f18      	subs	r0, r3, #4
 80083fe:	2b00      	cmp	r3, #0
 8008400:	bfbc      	itt	lt
 8008402:	580b      	ldrlt	r3, [r1, r0]
 8008404:	18c0      	addlt	r0, r0, r3
 8008406:	4770      	bx	lr

08008408 <_raise_r>:
 8008408:	291f      	cmp	r1, #31
 800840a:	b538      	push	{r3, r4, r5, lr}
 800840c:	4604      	mov	r4, r0
 800840e:	460d      	mov	r5, r1
 8008410:	d904      	bls.n	800841c <_raise_r+0x14>
 8008412:	2316      	movs	r3, #22
 8008414:	6003      	str	r3, [r0, #0]
 8008416:	f04f 30ff 	mov.w	r0, #4294967295
 800841a:	bd38      	pop	{r3, r4, r5, pc}
 800841c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800841e:	b112      	cbz	r2, 8008426 <_raise_r+0x1e>
 8008420:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008424:	b94b      	cbnz	r3, 800843a <_raise_r+0x32>
 8008426:	4620      	mov	r0, r4
 8008428:	f000 f830 	bl	800848c <_getpid_r>
 800842c:	462a      	mov	r2, r5
 800842e:	4601      	mov	r1, r0
 8008430:	4620      	mov	r0, r4
 8008432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008436:	f000 b817 	b.w	8008468 <_kill_r>
 800843a:	2b01      	cmp	r3, #1
 800843c:	d00a      	beq.n	8008454 <_raise_r+0x4c>
 800843e:	1c59      	adds	r1, r3, #1
 8008440:	d103      	bne.n	800844a <_raise_r+0x42>
 8008442:	2316      	movs	r3, #22
 8008444:	6003      	str	r3, [r0, #0]
 8008446:	2001      	movs	r0, #1
 8008448:	e7e7      	b.n	800841a <_raise_r+0x12>
 800844a:	2400      	movs	r4, #0
 800844c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008450:	4628      	mov	r0, r5
 8008452:	4798      	blx	r3
 8008454:	2000      	movs	r0, #0
 8008456:	e7e0      	b.n	800841a <_raise_r+0x12>

08008458 <raise>:
 8008458:	4b02      	ldr	r3, [pc, #8]	; (8008464 <raise+0xc>)
 800845a:	4601      	mov	r1, r0
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	f7ff bfd3 	b.w	8008408 <_raise_r>
 8008462:	bf00      	nop
 8008464:	2000000c 	.word	0x2000000c

08008468 <_kill_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	4d07      	ldr	r5, [pc, #28]	; (8008488 <_kill_r+0x20>)
 800846c:	2300      	movs	r3, #0
 800846e:	4604      	mov	r4, r0
 8008470:	4608      	mov	r0, r1
 8008472:	4611      	mov	r1, r2
 8008474:	602b      	str	r3, [r5, #0]
 8008476:	f7f8 fe57 	bl	8001128 <_kill>
 800847a:	1c43      	adds	r3, r0, #1
 800847c:	d102      	bne.n	8008484 <_kill_r+0x1c>
 800847e:	682b      	ldr	r3, [r5, #0]
 8008480:	b103      	cbz	r3, 8008484 <_kill_r+0x1c>
 8008482:	6023      	str	r3, [r4, #0]
 8008484:	bd38      	pop	{r3, r4, r5, pc}
 8008486:	bf00      	nop
 8008488:	20011a9c 	.word	0x20011a9c

0800848c <_getpid_r>:
 800848c:	f7f8 be44 	b.w	8001118 <_getpid>

08008490 <_fstat_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	4d07      	ldr	r5, [pc, #28]	; (80084b0 <_fstat_r+0x20>)
 8008494:	2300      	movs	r3, #0
 8008496:	4604      	mov	r4, r0
 8008498:	4608      	mov	r0, r1
 800849a:	4611      	mov	r1, r2
 800849c:	602b      	str	r3, [r5, #0]
 800849e:	f7f8 fea2 	bl	80011e6 <_fstat>
 80084a2:	1c43      	adds	r3, r0, #1
 80084a4:	d102      	bne.n	80084ac <_fstat_r+0x1c>
 80084a6:	682b      	ldr	r3, [r5, #0]
 80084a8:	b103      	cbz	r3, 80084ac <_fstat_r+0x1c>
 80084aa:	6023      	str	r3, [r4, #0]
 80084ac:	bd38      	pop	{r3, r4, r5, pc}
 80084ae:	bf00      	nop
 80084b0:	20011a9c 	.word	0x20011a9c

080084b4 <_isatty_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4d06      	ldr	r5, [pc, #24]	; (80084d0 <_isatty_r+0x1c>)
 80084b8:	2300      	movs	r3, #0
 80084ba:	4604      	mov	r4, r0
 80084bc:	4608      	mov	r0, r1
 80084be:	602b      	str	r3, [r5, #0]
 80084c0:	f7f8 fea1 	bl	8001206 <_isatty>
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	d102      	bne.n	80084ce <_isatty_r+0x1a>
 80084c8:	682b      	ldr	r3, [r5, #0]
 80084ca:	b103      	cbz	r3, 80084ce <_isatty_r+0x1a>
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	bd38      	pop	{r3, r4, r5, pc}
 80084d0:	20011a9c 	.word	0x20011a9c

080084d4 <round>:
 80084d4:	ec51 0b10 	vmov	r0, r1, d0
 80084d8:	b570      	push	{r4, r5, r6, lr}
 80084da:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80084de:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80084e2:	2c13      	cmp	r4, #19
 80084e4:	ee10 2a10 	vmov	r2, s0
 80084e8:	460b      	mov	r3, r1
 80084ea:	dc19      	bgt.n	8008520 <round+0x4c>
 80084ec:	2c00      	cmp	r4, #0
 80084ee:	da09      	bge.n	8008504 <round+0x30>
 80084f0:	3401      	adds	r4, #1
 80084f2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80084f6:	d103      	bne.n	8008500 <round+0x2c>
 80084f8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80084fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008500:	2200      	movs	r2, #0
 8008502:	e028      	b.n	8008556 <round+0x82>
 8008504:	4d15      	ldr	r5, [pc, #84]	; (800855c <round+0x88>)
 8008506:	4125      	asrs	r5, r4
 8008508:	ea01 0605 	and.w	r6, r1, r5
 800850c:	4332      	orrs	r2, r6
 800850e:	d00e      	beq.n	800852e <round+0x5a>
 8008510:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008514:	fa42 f404 	asr.w	r4, r2, r4
 8008518:	4423      	add	r3, r4
 800851a:	ea23 0305 	bic.w	r3, r3, r5
 800851e:	e7ef      	b.n	8008500 <round+0x2c>
 8008520:	2c33      	cmp	r4, #51	; 0x33
 8008522:	dd07      	ble.n	8008534 <round+0x60>
 8008524:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008528:	d101      	bne.n	800852e <round+0x5a>
 800852a:	f7f7 fec7 	bl	80002bc <__adddf3>
 800852e:	ec41 0b10 	vmov	d0, r0, r1
 8008532:	bd70      	pop	{r4, r5, r6, pc}
 8008534:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8008538:	f04f 35ff 	mov.w	r5, #4294967295
 800853c:	40f5      	lsrs	r5, r6
 800853e:	4228      	tst	r0, r5
 8008540:	d0f5      	beq.n	800852e <round+0x5a>
 8008542:	2101      	movs	r1, #1
 8008544:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8008548:	fa01 f404 	lsl.w	r4, r1, r4
 800854c:	1912      	adds	r2, r2, r4
 800854e:	bf28      	it	cs
 8008550:	185b      	addcs	r3, r3, r1
 8008552:	ea22 0205 	bic.w	r2, r2, r5
 8008556:	4619      	mov	r1, r3
 8008558:	4610      	mov	r0, r2
 800855a:	e7e8      	b.n	800852e <round+0x5a>
 800855c:	000fffff 	.word	0x000fffff

08008560 <pow>:
 8008560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008562:	ed2d 8b02 	vpush	{d8}
 8008566:	eeb0 8a40 	vmov.f32	s16, s0
 800856a:	eef0 8a60 	vmov.f32	s17, s1
 800856e:	ec55 4b11 	vmov	r4, r5, d1
 8008572:	f000 f865 	bl	8008640 <__ieee754_pow>
 8008576:	4622      	mov	r2, r4
 8008578:	462b      	mov	r3, r5
 800857a:	4620      	mov	r0, r4
 800857c:	4629      	mov	r1, r5
 800857e:	ec57 6b10 	vmov	r6, r7, d0
 8008582:	f7f8 faeb 	bl	8000b5c <__aeabi_dcmpun>
 8008586:	2800      	cmp	r0, #0
 8008588:	d13b      	bne.n	8008602 <pow+0xa2>
 800858a:	ec51 0b18 	vmov	r0, r1, d8
 800858e:	2200      	movs	r2, #0
 8008590:	2300      	movs	r3, #0
 8008592:	f7f8 fab1 	bl	8000af8 <__aeabi_dcmpeq>
 8008596:	b1b8      	cbz	r0, 80085c8 <pow+0x68>
 8008598:	2200      	movs	r2, #0
 800859a:	2300      	movs	r3, #0
 800859c:	4620      	mov	r0, r4
 800859e:	4629      	mov	r1, r5
 80085a0:	f7f8 faaa 	bl	8000af8 <__aeabi_dcmpeq>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d146      	bne.n	8008636 <pow+0xd6>
 80085a8:	ec45 4b10 	vmov	d0, r4, r5
 80085ac:	f000 fe61 	bl	8009272 <finite>
 80085b0:	b338      	cbz	r0, 8008602 <pow+0xa2>
 80085b2:	2200      	movs	r2, #0
 80085b4:	2300      	movs	r3, #0
 80085b6:	4620      	mov	r0, r4
 80085b8:	4629      	mov	r1, r5
 80085ba:	f7f8 faa7 	bl	8000b0c <__aeabi_dcmplt>
 80085be:	b300      	cbz	r0, 8008602 <pow+0xa2>
 80085c0:	f7fc fbb8 	bl	8004d34 <__errno>
 80085c4:	2322      	movs	r3, #34	; 0x22
 80085c6:	e01b      	b.n	8008600 <pow+0xa0>
 80085c8:	ec47 6b10 	vmov	d0, r6, r7
 80085cc:	f000 fe51 	bl	8009272 <finite>
 80085d0:	b9e0      	cbnz	r0, 800860c <pow+0xac>
 80085d2:	eeb0 0a48 	vmov.f32	s0, s16
 80085d6:	eef0 0a68 	vmov.f32	s1, s17
 80085da:	f000 fe4a 	bl	8009272 <finite>
 80085de:	b1a8      	cbz	r0, 800860c <pow+0xac>
 80085e0:	ec45 4b10 	vmov	d0, r4, r5
 80085e4:	f000 fe45 	bl	8009272 <finite>
 80085e8:	b180      	cbz	r0, 800860c <pow+0xac>
 80085ea:	4632      	mov	r2, r6
 80085ec:	463b      	mov	r3, r7
 80085ee:	4630      	mov	r0, r6
 80085f0:	4639      	mov	r1, r7
 80085f2:	f7f8 fab3 	bl	8000b5c <__aeabi_dcmpun>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d0e2      	beq.n	80085c0 <pow+0x60>
 80085fa:	f7fc fb9b 	bl	8004d34 <__errno>
 80085fe:	2321      	movs	r3, #33	; 0x21
 8008600:	6003      	str	r3, [r0, #0]
 8008602:	ecbd 8b02 	vpop	{d8}
 8008606:	ec47 6b10 	vmov	d0, r6, r7
 800860a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800860c:	2200      	movs	r2, #0
 800860e:	2300      	movs	r3, #0
 8008610:	4630      	mov	r0, r6
 8008612:	4639      	mov	r1, r7
 8008614:	f7f8 fa70 	bl	8000af8 <__aeabi_dcmpeq>
 8008618:	2800      	cmp	r0, #0
 800861a:	d0f2      	beq.n	8008602 <pow+0xa2>
 800861c:	eeb0 0a48 	vmov.f32	s0, s16
 8008620:	eef0 0a68 	vmov.f32	s1, s17
 8008624:	f000 fe25 	bl	8009272 <finite>
 8008628:	2800      	cmp	r0, #0
 800862a:	d0ea      	beq.n	8008602 <pow+0xa2>
 800862c:	ec45 4b10 	vmov	d0, r4, r5
 8008630:	f000 fe1f 	bl	8009272 <finite>
 8008634:	e7c3      	b.n	80085be <pow+0x5e>
 8008636:	4f01      	ldr	r7, [pc, #4]	; (800863c <pow+0xdc>)
 8008638:	2600      	movs	r6, #0
 800863a:	e7e2      	b.n	8008602 <pow+0xa2>
 800863c:	3ff00000 	.word	0x3ff00000

08008640 <__ieee754_pow>:
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	ed2d 8b06 	vpush	{d8-d10}
 8008648:	b089      	sub	sp, #36	; 0x24
 800864a:	ed8d 1b00 	vstr	d1, [sp]
 800864e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008652:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008656:	ea58 0102 	orrs.w	r1, r8, r2
 800865a:	ec57 6b10 	vmov	r6, r7, d0
 800865e:	d115      	bne.n	800868c <__ieee754_pow+0x4c>
 8008660:	19b3      	adds	r3, r6, r6
 8008662:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008666:	4152      	adcs	r2, r2
 8008668:	4299      	cmp	r1, r3
 800866a:	4b89      	ldr	r3, [pc, #548]	; (8008890 <__ieee754_pow+0x250>)
 800866c:	4193      	sbcs	r3, r2
 800866e:	f080 84d2 	bcs.w	8009016 <__ieee754_pow+0x9d6>
 8008672:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008676:	4630      	mov	r0, r6
 8008678:	4639      	mov	r1, r7
 800867a:	f7f7 fe1f 	bl	80002bc <__adddf3>
 800867e:	ec41 0b10 	vmov	d0, r0, r1
 8008682:	b009      	add	sp, #36	; 0x24
 8008684:	ecbd 8b06 	vpop	{d8-d10}
 8008688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868c:	4b81      	ldr	r3, [pc, #516]	; (8008894 <__ieee754_pow+0x254>)
 800868e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008692:	429c      	cmp	r4, r3
 8008694:	ee10 aa10 	vmov	sl, s0
 8008698:	463d      	mov	r5, r7
 800869a:	dc06      	bgt.n	80086aa <__ieee754_pow+0x6a>
 800869c:	d101      	bne.n	80086a2 <__ieee754_pow+0x62>
 800869e:	2e00      	cmp	r6, #0
 80086a0:	d1e7      	bne.n	8008672 <__ieee754_pow+0x32>
 80086a2:	4598      	cmp	r8, r3
 80086a4:	dc01      	bgt.n	80086aa <__ieee754_pow+0x6a>
 80086a6:	d10f      	bne.n	80086c8 <__ieee754_pow+0x88>
 80086a8:	b172      	cbz	r2, 80086c8 <__ieee754_pow+0x88>
 80086aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80086ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80086b2:	ea55 050a 	orrs.w	r5, r5, sl
 80086b6:	d1dc      	bne.n	8008672 <__ieee754_pow+0x32>
 80086b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80086bc:	18db      	adds	r3, r3, r3
 80086be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80086c2:	4152      	adcs	r2, r2
 80086c4:	429d      	cmp	r5, r3
 80086c6:	e7d0      	b.n	800866a <__ieee754_pow+0x2a>
 80086c8:	2d00      	cmp	r5, #0
 80086ca:	da3b      	bge.n	8008744 <__ieee754_pow+0x104>
 80086cc:	4b72      	ldr	r3, [pc, #456]	; (8008898 <__ieee754_pow+0x258>)
 80086ce:	4598      	cmp	r8, r3
 80086d0:	dc51      	bgt.n	8008776 <__ieee754_pow+0x136>
 80086d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80086d6:	4598      	cmp	r8, r3
 80086d8:	f340 84ac 	ble.w	8009034 <__ieee754_pow+0x9f4>
 80086dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80086e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80086e4:	2b14      	cmp	r3, #20
 80086e6:	dd0f      	ble.n	8008708 <__ieee754_pow+0xc8>
 80086e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80086ec:	fa22 f103 	lsr.w	r1, r2, r3
 80086f0:	fa01 f303 	lsl.w	r3, r1, r3
 80086f4:	4293      	cmp	r3, r2
 80086f6:	f040 849d 	bne.w	8009034 <__ieee754_pow+0x9f4>
 80086fa:	f001 0101 	and.w	r1, r1, #1
 80086fe:	f1c1 0302 	rsb	r3, r1, #2
 8008702:	9304      	str	r3, [sp, #16]
 8008704:	b182      	cbz	r2, 8008728 <__ieee754_pow+0xe8>
 8008706:	e05f      	b.n	80087c8 <__ieee754_pow+0x188>
 8008708:	2a00      	cmp	r2, #0
 800870a:	d15b      	bne.n	80087c4 <__ieee754_pow+0x184>
 800870c:	f1c3 0314 	rsb	r3, r3, #20
 8008710:	fa48 f103 	asr.w	r1, r8, r3
 8008714:	fa01 f303 	lsl.w	r3, r1, r3
 8008718:	4543      	cmp	r3, r8
 800871a:	f040 8488 	bne.w	800902e <__ieee754_pow+0x9ee>
 800871e:	f001 0101 	and.w	r1, r1, #1
 8008722:	f1c1 0302 	rsb	r3, r1, #2
 8008726:	9304      	str	r3, [sp, #16]
 8008728:	4b5c      	ldr	r3, [pc, #368]	; (800889c <__ieee754_pow+0x25c>)
 800872a:	4598      	cmp	r8, r3
 800872c:	d132      	bne.n	8008794 <__ieee754_pow+0x154>
 800872e:	f1b9 0f00 	cmp.w	r9, #0
 8008732:	f280 8478 	bge.w	8009026 <__ieee754_pow+0x9e6>
 8008736:	4959      	ldr	r1, [pc, #356]	; (800889c <__ieee754_pow+0x25c>)
 8008738:	4632      	mov	r2, r6
 800873a:	463b      	mov	r3, r7
 800873c:	2000      	movs	r0, #0
 800873e:	f7f8 f89d 	bl	800087c <__aeabi_ddiv>
 8008742:	e79c      	b.n	800867e <__ieee754_pow+0x3e>
 8008744:	2300      	movs	r3, #0
 8008746:	9304      	str	r3, [sp, #16]
 8008748:	2a00      	cmp	r2, #0
 800874a:	d13d      	bne.n	80087c8 <__ieee754_pow+0x188>
 800874c:	4b51      	ldr	r3, [pc, #324]	; (8008894 <__ieee754_pow+0x254>)
 800874e:	4598      	cmp	r8, r3
 8008750:	d1ea      	bne.n	8008728 <__ieee754_pow+0xe8>
 8008752:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008756:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800875a:	ea53 030a 	orrs.w	r3, r3, sl
 800875e:	f000 845a 	beq.w	8009016 <__ieee754_pow+0x9d6>
 8008762:	4b4f      	ldr	r3, [pc, #316]	; (80088a0 <__ieee754_pow+0x260>)
 8008764:	429c      	cmp	r4, r3
 8008766:	dd08      	ble.n	800877a <__ieee754_pow+0x13a>
 8008768:	f1b9 0f00 	cmp.w	r9, #0
 800876c:	f2c0 8457 	blt.w	800901e <__ieee754_pow+0x9de>
 8008770:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008774:	e783      	b.n	800867e <__ieee754_pow+0x3e>
 8008776:	2302      	movs	r3, #2
 8008778:	e7e5      	b.n	8008746 <__ieee754_pow+0x106>
 800877a:	f1b9 0f00 	cmp.w	r9, #0
 800877e:	f04f 0000 	mov.w	r0, #0
 8008782:	f04f 0100 	mov.w	r1, #0
 8008786:	f6bf af7a 	bge.w	800867e <__ieee754_pow+0x3e>
 800878a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800878e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008792:	e774      	b.n	800867e <__ieee754_pow+0x3e>
 8008794:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008798:	d106      	bne.n	80087a8 <__ieee754_pow+0x168>
 800879a:	4632      	mov	r2, r6
 800879c:	463b      	mov	r3, r7
 800879e:	4630      	mov	r0, r6
 80087a0:	4639      	mov	r1, r7
 80087a2:	f7f7 ff41 	bl	8000628 <__aeabi_dmul>
 80087a6:	e76a      	b.n	800867e <__ieee754_pow+0x3e>
 80087a8:	4b3e      	ldr	r3, [pc, #248]	; (80088a4 <__ieee754_pow+0x264>)
 80087aa:	4599      	cmp	r9, r3
 80087ac:	d10c      	bne.n	80087c8 <__ieee754_pow+0x188>
 80087ae:	2d00      	cmp	r5, #0
 80087b0:	db0a      	blt.n	80087c8 <__ieee754_pow+0x188>
 80087b2:	ec47 6b10 	vmov	d0, r6, r7
 80087b6:	b009      	add	sp, #36	; 0x24
 80087b8:	ecbd 8b06 	vpop	{d8-d10}
 80087bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c0:	f000 bc6c 	b.w	800909c <__ieee754_sqrt>
 80087c4:	2300      	movs	r3, #0
 80087c6:	9304      	str	r3, [sp, #16]
 80087c8:	ec47 6b10 	vmov	d0, r6, r7
 80087cc:	f000 fd48 	bl	8009260 <fabs>
 80087d0:	ec51 0b10 	vmov	r0, r1, d0
 80087d4:	f1ba 0f00 	cmp.w	sl, #0
 80087d8:	d129      	bne.n	800882e <__ieee754_pow+0x1ee>
 80087da:	b124      	cbz	r4, 80087e6 <__ieee754_pow+0x1a6>
 80087dc:	4b2f      	ldr	r3, [pc, #188]	; (800889c <__ieee754_pow+0x25c>)
 80087de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d123      	bne.n	800882e <__ieee754_pow+0x1ee>
 80087e6:	f1b9 0f00 	cmp.w	r9, #0
 80087ea:	da05      	bge.n	80087f8 <__ieee754_pow+0x1b8>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	2000      	movs	r0, #0
 80087f2:	492a      	ldr	r1, [pc, #168]	; (800889c <__ieee754_pow+0x25c>)
 80087f4:	f7f8 f842 	bl	800087c <__aeabi_ddiv>
 80087f8:	2d00      	cmp	r5, #0
 80087fa:	f6bf af40 	bge.w	800867e <__ieee754_pow+0x3e>
 80087fe:	9b04      	ldr	r3, [sp, #16]
 8008800:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008804:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008808:	4323      	orrs	r3, r4
 800880a:	d108      	bne.n	800881e <__ieee754_pow+0x1de>
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	4610      	mov	r0, r2
 8008812:	4619      	mov	r1, r3
 8008814:	f7f7 fd50 	bl	80002b8 <__aeabi_dsub>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	e78f      	b.n	800873e <__ieee754_pow+0xfe>
 800881e:	9b04      	ldr	r3, [sp, #16]
 8008820:	2b01      	cmp	r3, #1
 8008822:	f47f af2c 	bne.w	800867e <__ieee754_pow+0x3e>
 8008826:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800882a:	4619      	mov	r1, r3
 800882c:	e727      	b.n	800867e <__ieee754_pow+0x3e>
 800882e:	0feb      	lsrs	r3, r5, #31
 8008830:	3b01      	subs	r3, #1
 8008832:	9306      	str	r3, [sp, #24]
 8008834:	9a06      	ldr	r2, [sp, #24]
 8008836:	9b04      	ldr	r3, [sp, #16]
 8008838:	4313      	orrs	r3, r2
 800883a:	d102      	bne.n	8008842 <__ieee754_pow+0x202>
 800883c:	4632      	mov	r2, r6
 800883e:	463b      	mov	r3, r7
 8008840:	e7e6      	b.n	8008810 <__ieee754_pow+0x1d0>
 8008842:	4b19      	ldr	r3, [pc, #100]	; (80088a8 <__ieee754_pow+0x268>)
 8008844:	4598      	cmp	r8, r3
 8008846:	f340 80fb 	ble.w	8008a40 <__ieee754_pow+0x400>
 800884a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800884e:	4598      	cmp	r8, r3
 8008850:	4b13      	ldr	r3, [pc, #76]	; (80088a0 <__ieee754_pow+0x260>)
 8008852:	dd0c      	ble.n	800886e <__ieee754_pow+0x22e>
 8008854:	429c      	cmp	r4, r3
 8008856:	dc0f      	bgt.n	8008878 <__ieee754_pow+0x238>
 8008858:	f1b9 0f00 	cmp.w	r9, #0
 800885c:	da0f      	bge.n	800887e <__ieee754_pow+0x23e>
 800885e:	2000      	movs	r0, #0
 8008860:	b009      	add	sp, #36	; 0x24
 8008862:	ecbd 8b06 	vpop	{d8-d10}
 8008866:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886a:	f000 bcf0 	b.w	800924e <__math_oflow>
 800886e:	429c      	cmp	r4, r3
 8008870:	dbf2      	blt.n	8008858 <__ieee754_pow+0x218>
 8008872:	4b0a      	ldr	r3, [pc, #40]	; (800889c <__ieee754_pow+0x25c>)
 8008874:	429c      	cmp	r4, r3
 8008876:	dd19      	ble.n	80088ac <__ieee754_pow+0x26c>
 8008878:	f1b9 0f00 	cmp.w	r9, #0
 800887c:	dcef      	bgt.n	800885e <__ieee754_pow+0x21e>
 800887e:	2000      	movs	r0, #0
 8008880:	b009      	add	sp, #36	; 0x24
 8008882:	ecbd 8b06 	vpop	{d8-d10}
 8008886:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888a:	f000 bcd7 	b.w	800923c <__math_uflow>
 800888e:	bf00      	nop
 8008890:	fff00000 	.word	0xfff00000
 8008894:	7ff00000 	.word	0x7ff00000
 8008898:	433fffff 	.word	0x433fffff
 800889c:	3ff00000 	.word	0x3ff00000
 80088a0:	3fefffff 	.word	0x3fefffff
 80088a4:	3fe00000 	.word	0x3fe00000
 80088a8:	41e00000 	.word	0x41e00000
 80088ac:	4b60      	ldr	r3, [pc, #384]	; (8008a30 <__ieee754_pow+0x3f0>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	f7f7 fd02 	bl	80002b8 <__aeabi_dsub>
 80088b4:	a354      	add	r3, pc, #336	; (adr r3, 8008a08 <__ieee754_pow+0x3c8>)
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	4604      	mov	r4, r0
 80088bc:	460d      	mov	r5, r1
 80088be:	f7f7 feb3 	bl	8000628 <__aeabi_dmul>
 80088c2:	a353      	add	r3, pc, #332	; (adr r3, 8008a10 <__ieee754_pow+0x3d0>)
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	4606      	mov	r6, r0
 80088ca:	460f      	mov	r7, r1
 80088cc:	4620      	mov	r0, r4
 80088ce:	4629      	mov	r1, r5
 80088d0:	f7f7 feaa 	bl	8000628 <__aeabi_dmul>
 80088d4:	4b57      	ldr	r3, [pc, #348]	; (8008a34 <__ieee754_pow+0x3f4>)
 80088d6:	4682      	mov	sl, r0
 80088d8:	468b      	mov	fp, r1
 80088da:	2200      	movs	r2, #0
 80088dc:	4620      	mov	r0, r4
 80088de:	4629      	mov	r1, r5
 80088e0:	f7f7 fea2 	bl	8000628 <__aeabi_dmul>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	a14b      	add	r1, pc, #300	; (adr r1, 8008a18 <__ieee754_pow+0x3d8>)
 80088ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088ee:	f7f7 fce3 	bl	80002b8 <__aeabi_dsub>
 80088f2:	4622      	mov	r2, r4
 80088f4:	462b      	mov	r3, r5
 80088f6:	f7f7 fe97 	bl	8000628 <__aeabi_dmul>
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	2000      	movs	r0, #0
 8008900:	494d      	ldr	r1, [pc, #308]	; (8008a38 <__ieee754_pow+0x3f8>)
 8008902:	f7f7 fcd9 	bl	80002b8 <__aeabi_dsub>
 8008906:	4622      	mov	r2, r4
 8008908:	4680      	mov	r8, r0
 800890a:	4689      	mov	r9, r1
 800890c:	462b      	mov	r3, r5
 800890e:	4620      	mov	r0, r4
 8008910:	4629      	mov	r1, r5
 8008912:	f7f7 fe89 	bl	8000628 <__aeabi_dmul>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4640      	mov	r0, r8
 800891c:	4649      	mov	r1, r9
 800891e:	f7f7 fe83 	bl	8000628 <__aeabi_dmul>
 8008922:	a33f      	add	r3, pc, #252	; (adr r3, 8008a20 <__ieee754_pow+0x3e0>)
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	f7f7 fe7e 	bl	8000628 <__aeabi_dmul>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4650      	mov	r0, sl
 8008932:	4659      	mov	r1, fp
 8008934:	f7f7 fcc0 	bl	80002b8 <__aeabi_dsub>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4680      	mov	r8, r0
 800893e:	4689      	mov	r9, r1
 8008940:	4630      	mov	r0, r6
 8008942:	4639      	mov	r1, r7
 8008944:	f7f7 fcba 	bl	80002bc <__adddf3>
 8008948:	2000      	movs	r0, #0
 800894a:	4632      	mov	r2, r6
 800894c:	463b      	mov	r3, r7
 800894e:	4604      	mov	r4, r0
 8008950:	460d      	mov	r5, r1
 8008952:	f7f7 fcb1 	bl	80002b8 <__aeabi_dsub>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	4640      	mov	r0, r8
 800895c:	4649      	mov	r1, r9
 800895e:	f7f7 fcab 	bl	80002b8 <__aeabi_dsub>
 8008962:	9b04      	ldr	r3, [sp, #16]
 8008964:	9a06      	ldr	r2, [sp, #24]
 8008966:	3b01      	subs	r3, #1
 8008968:	4313      	orrs	r3, r2
 800896a:	4682      	mov	sl, r0
 800896c:	468b      	mov	fp, r1
 800896e:	f040 81e7 	bne.w	8008d40 <__ieee754_pow+0x700>
 8008972:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008a28 <__ieee754_pow+0x3e8>
 8008976:	eeb0 8a47 	vmov.f32	s16, s14
 800897a:	eef0 8a67 	vmov.f32	s17, s15
 800897e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008982:	2600      	movs	r6, #0
 8008984:	4632      	mov	r2, r6
 8008986:	463b      	mov	r3, r7
 8008988:	e9dd 0100 	ldrd	r0, r1, [sp]
 800898c:	f7f7 fc94 	bl	80002b8 <__aeabi_dsub>
 8008990:	4622      	mov	r2, r4
 8008992:	462b      	mov	r3, r5
 8008994:	f7f7 fe48 	bl	8000628 <__aeabi_dmul>
 8008998:	e9dd 2300 	ldrd	r2, r3, [sp]
 800899c:	4680      	mov	r8, r0
 800899e:	4689      	mov	r9, r1
 80089a0:	4650      	mov	r0, sl
 80089a2:	4659      	mov	r1, fp
 80089a4:	f7f7 fe40 	bl	8000628 <__aeabi_dmul>
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
 80089ac:	4640      	mov	r0, r8
 80089ae:	4649      	mov	r1, r9
 80089b0:	f7f7 fc84 	bl	80002bc <__adddf3>
 80089b4:	4632      	mov	r2, r6
 80089b6:	463b      	mov	r3, r7
 80089b8:	4680      	mov	r8, r0
 80089ba:	4689      	mov	r9, r1
 80089bc:	4620      	mov	r0, r4
 80089be:	4629      	mov	r1, r5
 80089c0:	f7f7 fe32 	bl	8000628 <__aeabi_dmul>
 80089c4:	460b      	mov	r3, r1
 80089c6:	4604      	mov	r4, r0
 80089c8:	460d      	mov	r5, r1
 80089ca:	4602      	mov	r2, r0
 80089cc:	4649      	mov	r1, r9
 80089ce:	4640      	mov	r0, r8
 80089d0:	f7f7 fc74 	bl	80002bc <__adddf3>
 80089d4:	4b19      	ldr	r3, [pc, #100]	; (8008a3c <__ieee754_pow+0x3fc>)
 80089d6:	4299      	cmp	r1, r3
 80089d8:	ec45 4b19 	vmov	d9, r4, r5
 80089dc:	4606      	mov	r6, r0
 80089de:	460f      	mov	r7, r1
 80089e0:	468b      	mov	fp, r1
 80089e2:	f340 82f1 	ble.w	8008fc8 <__ieee754_pow+0x988>
 80089e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80089ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80089ee:	4303      	orrs	r3, r0
 80089f0:	f000 81e4 	beq.w	8008dbc <__ieee754_pow+0x77c>
 80089f4:	ec51 0b18 	vmov	r0, r1, d8
 80089f8:	2200      	movs	r2, #0
 80089fa:	2300      	movs	r3, #0
 80089fc:	f7f8 f886 	bl	8000b0c <__aeabi_dcmplt>
 8008a00:	3800      	subs	r0, #0
 8008a02:	bf18      	it	ne
 8008a04:	2001      	movne	r0, #1
 8008a06:	e72b      	b.n	8008860 <__ieee754_pow+0x220>
 8008a08:	60000000 	.word	0x60000000
 8008a0c:	3ff71547 	.word	0x3ff71547
 8008a10:	f85ddf44 	.word	0xf85ddf44
 8008a14:	3e54ae0b 	.word	0x3e54ae0b
 8008a18:	55555555 	.word	0x55555555
 8008a1c:	3fd55555 	.word	0x3fd55555
 8008a20:	652b82fe 	.word	0x652b82fe
 8008a24:	3ff71547 	.word	0x3ff71547
 8008a28:	00000000 	.word	0x00000000
 8008a2c:	bff00000 	.word	0xbff00000
 8008a30:	3ff00000 	.word	0x3ff00000
 8008a34:	3fd00000 	.word	0x3fd00000
 8008a38:	3fe00000 	.word	0x3fe00000
 8008a3c:	408fffff 	.word	0x408fffff
 8008a40:	4bd5      	ldr	r3, [pc, #852]	; (8008d98 <__ieee754_pow+0x758>)
 8008a42:	402b      	ands	r3, r5
 8008a44:	2200      	movs	r2, #0
 8008a46:	b92b      	cbnz	r3, 8008a54 <__ieee754_pow+0x414>
 8008a48:	4bd4      	ldr	r3, [pc, #848]	; (8008d9c <__ieee754_pow+0x75c>)
 8008a4a:	f7f7 fded 	bl	8000628 <__aeabi_dmul>
 8008a4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008a52:	460c      	mov	r4, r1
 8008a54:	1523      	asrs	r3, r4, #20
 8008a56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008a5a:	4413      	add	r3, r2
 8008a5c:	9305      	str	r3, [sp, #20]
 8008a5e:	4bd0      	ldr	r3, [pc, #832]	; (8008da0 <__ieee754_pow+0x760>)
 8008a60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008a64:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008a68:	429c      	cmp	r4, r3
 8008a6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008a6e:	dd08      	ble.n	8008a82 <__ieee754_pow+0x442>
 8008a70:	4bcc      	ldr	r3, [pc, #816]	; (8008da4 <__ieee754_pow+0x764>)
 8008a72:	429c      	cmp	r4, r3
 8008a74:	f340 8162 	ble.w	8008d3c <__ieee754_pow+0x6fc>
 8008a78:	9b05      	ldr	r3, [sp, #20]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	9305      	str	r3, [sp, #20]
 8008a7e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008a82:	2400      	movs	r4, #0
 8008a84:	00e3      	lsls	r3, r4, #3
 8008a86:	9307      	str	r3, [sp, #28]
 8008a88:	4bc7      	ldr	r3, [pc, #796]	; (8008da8 <__ieee754_pow+0x768>)
 8008a8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a8e:	ed93 7b00 	vldr	d7, [r3]
 8008a92:	4629      	mov	r1, r5
 8008a94:	ec53 2b17 	vmov	r2, r3, d7
 8008a98:	eeb0 9a47 	vmov.f32	s18, s14
 8008a9c:	eef0 9a67 	vmov.f32	s19, s15
 8008aa0:	4682      	mov	sl, r0
 8008aa2:	f7f7 fc09 	bl	80002b8 <__aeabi_dsub>
 8008aa6:	4652      	mov	r2, sl
 8008aa8:	4606      	mov	r6, r0
 8008aaa:	460f      	mov	r7, r1
 8008aac:	462b      	mov	r3, r5
 8008aae:	ec51 0b19 	vmov	r0, r1, d9
 8008ab2:	f7f7 fc03 	bl	80002bc <__adddf3>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	2000      	movs	r0, #0
 8008abc:	49bb      	ldr	r1, [pc, #748]	; (8008dac <__ieee754_pow+0x76c>)
 8008abe:	f7f7 fedd 	bl	800087c <__aeabi_ddiv>
 8008ac2:	ec41 0b1a 	vmov	d10, r0, r1
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	4630      	mov	r0, r6
 8008acc:	4639      	mov	r1, r7
 8008ace:	f7f7 fdab 	bl	8000628 <__aeabi_dmul>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ad8:	9302      	str	r3, [sp, #8]
 8008ada:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008ade:	46ab      	mov	fp, r5
 8008ae0:	106d      	asrs	r5, r5, #1
 8008ae2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008ae6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008aea:	ec41 0b18 	vmov	d8, r0, r1
 8008aee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008af2:	2200      	movs	r2, #0
 8008af4:	4640      	mov	r0, r8
 8008af6:	4649      	mov	r1, r9
 8008af8:	4614      	mov	r4, r2
 8008afa:	461d      	mov	r5, r3
 8008afc:	f7f7 fd94 	bl	8000628 <__aeabi_dmul>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4630      	mov	r0, r6
 8008b06:	4639      	mov	r1, r7
 8008b08:	f7f7 fbd6 	bl	80002b8 <__aeabi_dsub>
 8008b0c:	ec53 2b19 	vmov	r2, r3, d9
 8008b10:	4606      	mov	r6, r0
 8008b12:	460f      	mov	r7, r1
 8008b14:	4620      	mov	r0, r4
 8008b16:	4629      	mov	r1, r5
 8008b18:	f7f7 fbce 	bl	80002b8 <__aeabi_dsub>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	460b      	mov	r3, r1
 8008b20:	4650      	mov	r0, sl
 8008b22:	4659      	mov	r1, fp
 8008b24:	f7f7 fbc8 	bl	80002b8 <__aeabi_dsub>
 8008b28:	4642      	mov	r2, r8
 8008b2a:	464b      	mov	r3, r9
 8008b2c:	f7f7 fd7c 	bl	8000628 <__aeabi_dmul>
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	4630      	mov	r0, r6
 8008b36:	4639      	mov	r1, r7
 8008b38:	f7f7 fbbe 	bl	80002b8 <__aeabi_dsub>
 8008b3c:	ec53 2b1a 	vmov	r2, r3, d10
 8008b40:	f7f7 fd72 	bl	8000628 <__aeabi_dmul>
 8008b44:	ec53 2b18 	vmov	r2, r3, d8
 8008b48:	ec41 0b19 	vmov	d9, r0, r1
 8008b4c:	ec51 0b18 	vmov	r0, r1, d8
 8008b50:	f7f7 fd6a 	bl	8000628 <__aeabi_dmul>
 8008b54:	a37c      	add	r3, pc, #496	; (adr r3, 8008d48 <__ieee754_pow+0x708>)
 8008b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	460d      	mov	r5, r1
 8008b5e:	f7f7 fd63 	bl	8000628 <__aeabi_dmul>
 8008b62:	a37b      	add	r3, pc, #492	; (adr r3, 8008d50 <__ieee754_pow+0x710>)
 8008b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b68:	f7f7 fba8 	bl	80002bc <__adddf3>
 8008b6c:	4622      	mov	r2, r4
 8008b6e:	462b      	mov	r3, r5
 8008b70:	f7f7 fd5a 	bl	8000628 <__aeabi_dmul>
 8008b74:	a378      	add	r3, pc, #480	; (adr r3, 8008d58 <__ieee754_pow+0x718>)
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	f7f7 fb9f 	bl	80002bc <__adddf3>
 8008b7e:	4622      	mov	r2, r4
 8008b80:	462b      	mov	r3, r5
 8008b82:	f7f7 fd51 	bl	8000628 <__aeabi_dmul>
 8008b86:	a376      	add	r3, pc, #472	; (adr r3, 8008d60 <__ieee754_pow+0x720>)
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	f7f7 fb96 	bl	80002bc <__adddf3>
 8008b90:	4622      	mov	r2, r4
 8008b92:	462b      	mov	r3, r5
 8008b94:	f7f7 fd48 	bl	8000628 <__aeabi_dmul>
 8008b98:	a373      	add	r3, pc, #460	; (adr r3, 8008d68 <__ieee754_pow+0x728>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f7f7 fb8d 	bl	80002bc <__adddf3>
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	462b      	mov	r3, r5
 8008ba6:	f7f7 fd3f 	bl	8000628 <__aeabi_dmul>
 8008baa:	a371      	add	r3, pc, #452	; (adr r3, 8008d70 <__ieee754_pow+0x730>)
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f7f7 fb84 	bl	80002bc <__adddf3>
 8008bb4:	4622      	mov	r2, r4
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	460f      	mov	r7, r1
 8008bba:	462b      	mov	r3, r5
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	f7f7 fd32 	bl	8000628 <__aeabi_dmul>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4630      	mov	r0, r6
 8008bca:	4639      	mov	r1, r7
 8008bcc:	f7f7 fd2c 	bl	8000628 <__aeabi_dmul>
 8008bd0:	4642      	mov	r2, r8
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	460d      	mov	r5, r1
 8008bd6:	464b      	mov	r3, r9
 8008bd8:	ec51 0b18 	vmov	r0, r1, d8
 8008bdc:	f7f7 fb6e 	bl	80002bc <__adddf3>
 8008be0:	ec53 2b19 	vmov	r2, r3, d9
 8008be4:	f7f7 fd20 	bl	8000628 <__aeabi_dmul>
 8008be8:	4622      	mov	r2, r4
 8008bea:	462b      	mov	r3, r5
 8008bec:	f7f7 fb66 	bl	80002bc <__adddf3>
 8008bf0:	4642      	mov	r2, r8
 8008bf2:	4682      	mov	sl, r0
 8008bf4:	468b      	mov	fp, r1
 8008bf6:	464b      	mov	r3, r9
 8008bf8:	4640      	mov	r0, r8
 8008bfa:	4649      	mov	r1, r9
 8008bfc:	f7f7 fd14 	bl	8000628 <__aeabi_dmul>
 8008c00:	4b6b      	ldr	r3, [pc, #428]	; (8008db0 <__ieee754_pow+0x770>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	4606      	mov	r6, r0
 8008c06:	460f      	mov	r7, r1
 8008c08:	f7f7 fb58 	bl	80002bc <__adddf3>
 8008c0c:	4652      	mov	r2, sl
 8008c0e:	465b      	mov	r3, fp
 8008c10:	f7f7 fb54 	bl	80002bc <__adddf3>
 8008c14:	2000      	movs	r0, #0
 8008c16:	4604      	mov	r4, r0
 8008c18:	460d      	mov	r5, r1
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	4640      	mov	r0, r8
 8008c20:	4649      	mov	r1, r9
 8008c22:	f7f7 fd01 	bl	8000628 <__aeabi_dmul>
 8008c26:	4b62      	ldr	r3, [pc, #392]	; (8008db0 <__ieee754_pow+0x770>)
 8008c28:	4680      	mov	r8, r0
 8008c2a:	4689      	mov	r9, r1
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4620      	mov	r0, r4
 8008c30:	4629      	mov	r1, r5
 8008c32:	f7f7 fb41 	bl	80002b8 <__aeabi_dsub>
 8008c36:	4632      	mov	r2, r6
 8008c38:	463b      	mov	r3, r7
 8008c3a:	f7f7 fb3d 	bl	80002b8 <__aeabi_dsub>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	4650      	mov	r0, sl
 8008c44:	4659      	mov	r1, fp
 8008c46:	f7f7 fb37 	bl	80002b8 <__aeabi_dsub>
 8008c4a:	ec53 2b18 	vmov	r2, r3, d8
 8008c4e:	f7f7 fceb 	bl	8000628 <__aeabi_dmul>
 8008c52:	4622      	mov	r2, r4
 8008c54:	4606      	mov	r6, r0
 8008c56:	460f      	mov	r7, r1
 8008c58:	462b      	mov	r3, r5
 8008c5a:	ec51 0b19 	vmov	r0, r1, d9
 8008c5e:	f7f7 fce3 	bl	8000628 <__aeabi_dmul>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4630      	mov	r0, r6
 8008c68:	4639      	mov	r1, r7
 8008c6a:	f7f7 fb27 	bl	80002bc <__adddf3>
 8008c6e:	4606      	mov	r6, r0
 8008c70:	460f      	mov	r7, r1
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	4640      	mov	r0, r8
 8008c78:	4649      	mov	r1, r9
 8008c7a:	f7f7 fb1f 	bl	80002bc <__adddf3>
 8008c7e:	a33e      	add	r3, pc, #248	; (adr r3, 8008d78 <__ieee754_pow+0x738>)
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	2000      	movs	r0, #0
 8008c86:	4604      	mov	r4, r0
 8008c88:	460d      	mov	r5, r1
 8008c8a:	f7f7 fccd 	bl	8000628 <__aeabi_dmul>
 8008c8e:	4642      	mov	r2, r8
 8008c90:	ec41 0b18 	vmov	d8, r0, r1
 8008c94:	464b      	mov	r3, r9
 8008c96:	4620      	mov	r0, r4
 8008c98:	4629      	mov	r1, r5
 8008c9a:	f7f7 fb0d 	bl	80002b8 <__aeabi_dsub>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	f7f7 fb07 	bl	80002b8 <__aeabi_dsub>
 8008caa:	a335      	add	r3, pc, #212	; (adr r3, 8008d80 <__ieee754_pow+0x740>)
 8008cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb0:	f7f7 fcba 	bl	8000628 <__aeabi_dmul>
 8008cb4:	a334      	add	r3, pc, #208	; (adr r3, 8008d88 <__ieee754_pow+0x748>)
 8008cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cba:	4606      	mov	r6, r0
 8008cbc:	460f      	mov	r7, r1
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	f7f7 fcb1 	bl	8000628 <__aeabi_dmul>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	4630      	mov	r0, r6
 8008ccc:	4639      	mov	r1, r7
 8008cce:	f7f7 faf5 	bl	80002bc <__adddf3>
 8008cd2:	9a07      	ldr	r2, [sp, #28]
 8008cd4:	4b37      	ldr	r3, [pc, #220]	; (8008db4 <__ieee754_pow+0x774>)
 8008cd6:	4413      	add	r3, r2
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	f7f7 faee 	bl	80002bc <__adddf3>
 8008ce0:	4682      	mov	sl, r0
 8008ce2:	9805      	ldr	r0, [sp, #20]
 8008ce4:	468b      	mov	fp, r1
 8008ce6:	f7f7 fc35 	bl	8000554 <__aeabi_i2d>
 8008cea:	9a07      	ldr	r2, [sp, #28]
 8008cec:	4b32      	ldr	r3, [pc, #200]	; (8008db8 <__ieee754_pow+0x778>)
 8008cee:	4413      	add	r3, r2
 8008cf0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	460f      	mov	r7, r1
 8008cf8:	4652      	mov	r2, sl
 8008cfa:	465b      	mov	r3, fp
 8008cfc:	ec51 0b18 	vmov	r0, r1, d8
 8008d00:	f7f7 fadc 	bl	80002bc <__adddf3>
 8008d04:	4642      	mov	r2, r8
 8008d06:	464b      	mov	r3, r9
 8008d08:	f7f7 fad8 	bl	80002bc <__adddf3>
 8008d0c:	4632      	mov	r2, r6
 8008d0e:	463b      	mov	r3, r7
 8008d10:	f7f7 fad4 	bl	80002bc <__adddf3>
 8008d14:	2000      	movs	r0, #0
 8008d16:	4632      	mov	r2, r6
 8008d18:	463b      	mov	r3, r7
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	460d      	mov	r5, r1
 8008d1e:	f7f7 facb 	bl	80002b8 <__aeabi_dsub>
 8008d22:	4642      	mov	r2, r8
 8008d24:	464b      	mov	r3, r9
 8008d26:	f7f7 fac7 	bl	80002b8 <__aeabi_dsub>
 8008d2a:	ec53 2b18 	vmov	r2, r3, d8
 8008d2e:	f7f7 fac3 	bl	80002b8 <__aeabi_dsub>
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4650      	mov	r0, sl
 8008d38:	4659      	mov	r1, fp
 8008d3a:	e610      	b.n	800895e <__ieee754_pow+0x31e>
 8008d3c:	2401      	movs	r4, #1
 8008d3e:	e6a1      	b.n	8008a84 <__ieee754_pow+0x444>
 8008d40:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008d90 <__ieee754_pow+0x750>
 8008d44:	e617      	b.n	8008976 <__ieee754_pow+0x336>
 8008d46:	bf00      	nop
 8008d48:	4a454eef 	.word	0x4a454eef
 8008d4c:	3fca7e28 	.word	0x3fca7e28
 8008d50:	93c9db65 	.word	0x93c9db65
 8008d54:	3fcd864a 	.word	0x3fcd864a
 8008d58:	a91d4101 	.word	0xa91d4101
 8008d5c:	3fd17460 	.word	0x3fd17460
 8008d60:	518f264d 	.word	0x518f264d
 8008d64:	3fd55555 	.word	0x3fd55555
 8008d68:	db6fabff 	.word	0xdb6fabff
 8008d6c:	3fdb6db6 	.word	0x3fdb6db6
 8008d70:	33333303 	.word	0x33333303
 8008d74:	3fe33333 	.word	0x3fe33333
 8008d78:	e0000000 	.word	0xe0000000
 8008d7c:	3feec709 	.word	0x3feec709
 8008d80:	dc3a03fd 	.word	0xdc3a03fd
 8008d84:	3feec709 	.word	0x3feec709
 8008d88:	145b01f5 	.word	0x145b01f5
 8008d8c:	be3e2fe0 	.word	0xbe3e2fe0
 8008d90:	00000000 	.word	0x00000000
 8008d94:	3ff00000 	.word	0x3ff00000
 8008d98:	7ff00000 	.word	0x7ff00000
 8008d9c:	43400000 	.word	0x43400000
 8008da0:	0003988e 	.word	0x0003988e
 8008da4:	000bb679 	.word	0x000bb679
 8008da8:	080099d8 	.word	0x080099d8
 8008dac:	3ff00000 	.word	0x3ff00000
 8008db0:	40080000 	.word	0x40080000
 8008db4:	080099f8 	.word	0x080099f8
 8008db8:	080099e8 	.word	0x080099e8
 8008dbc:	a3b5      	add	r3, pc, #724	; (adr r3, 8009094 <__ieee754_pow+0xa54>)
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	f7f7 fa79 	bl	80002bc <__adddf3>
 8008dca:	4622      	mov	r2, r4
 8008dcc:	ec41 0b1a 	vmov	d10, r0, r1
 8008dd0:	462b      	mov	r3, r5
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	4639      	mov	r1, r7
 8008dd6:	f7f7 fa6f 	bl	80002b8 <__aeabi_dsub>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	ec51 0b1a 	vmov	r0, r1, d10
 8008de2:	f7f7 feb1 	bl	8000b48 <__aeabi_dcmpgt>
 8008de6:	2800      	cmp	r0, #0
 8008de8:	f47f ae04 	bne.w	80089f4 <__ieee754_pow+0x3b4>
 8008dec:	4aa4      	ldr	r2, [pc, #656]	; (8009080 <__ieee754_pow+0xa40>)
 8008dee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008df2:	4293      	cmp	r3, r2
 8008df4:	f340 8108 	ble.w	8009008 <__ieee754_pow+0x9c8>
 8008df8:	151b      	asrs	r3, r3, #20
 8008dfa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008dfe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008e02:	fa4a f303 	asr.w	r3, sl, r3
 8008e06:	445b      	add	r3, fp
 8008e08:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008e0c:	4e9d      	ldr	r6, [pc, #628]	; (8009084 <__ieee754_pow+0xa44>)
 8008e0e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008e12:	4116      	asrs	r6, r2
 8008e14:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008e18:	2000      	movs	r0, #0
 8008e1a:	ea23 0106 	bic.w	r1, r3, r6
 8008e1e:	f1c2 0214 	rsb	r2, r2, #20
 8008e22:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008e26:	fa4a fa02 	asr.w	sl, sl, r2
 8008e2a:	f1bb 0f00 	cmp.w	fp, #0
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	4620      	mov	r0, r4
 8008e34:	4629      	mov	r1, r5
 8008e36:	bfb8      	it	lt
 8008e38:	f1ca 0a00 	rsblt	sl, sl, #0
 8008e3c:	f7f7 fa3c 	bl	80002b8 <__aeabi_dsub>
 8008e40:	ec41 0b19 	vmov	d9, r0, r1
 8008e44:	4642      	mov	r2, r8
 8008e46:	464b      	mov	r3, r9
 8008e48:	ec51 0b19 	vmov	r0, r1, d9
 8008e4c:	f7f7 fa36 	bl	80002bc <__adddf3>
 8008e50:	a37b      	add	r3, pc, #492	; (adr r3, 8009040 <__ieee754_pow+0xa00>)
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	2000      	movs	r0, #0
 8008e58:	4604      	mov	r4, r0
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	f7f7 fbe4 	bl	8000628 <__aeabi_dmul>
 8008e60:	ec53 2b19 	vmov	r2, r3, d9
 8008e64:	4606      	mov	r6, r0
 8008e66:	460f      	mov	r7, r1
 8008e68:	4620      	mov	r0, r4
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	f7f7 fa24 	bl	80002b8 <__aeabi_dsub>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	4640      	mov	r0, r8
 8008e76:	4649      	mov	r1, r9
 8008e78:	f7f7 fa1e 	bl	80002b8 <__aeabi_dsub>
 8008e7c:	a372      	add	r3, pc, #456	; (adr r3, 8009048 <__ieee754_pow+0xa08>)
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f7f7 fbd1 	bl	8000628 <__aeabi_dmul>
 8008e86:	a372      	add	r3, pc, #456	; (adr r3, 8009050 <__ieee754_pow+0xa10>)
 8008e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8c:	4680      	mov	r8, r0
 8008e8e:	4689      	mov	r9, r1
 8008e90:	4620      	mov	r0, r4
 8008e92:	4629      	mov	r1, r5
 8008e94:	f7f7 fbc8 	bl	8000628 <__aeabi_dmul>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	f7f7 fa0c 	bl	80002bc <__adddf3>
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	460d      	mov	r5, r1
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	4630      	mov	r0, r6
 8008eae:	4639      	mov	r1, r7
 8008eb0:	f7f7 fa04 	bl	80002bc <__adddf3>
 8008eb4:	4632      	mov	r2, r6
 8008eb6:	463b      	mov	r3, r7
 8008eb8:	4680      	mov	r8, r0
 8008eba:	4689      	mov	r9, r1
 8008ebc:	f7f7 f9fc 	bl	80002b8 <__aeabi_dsub>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	f7f7 f9f6 	bl	80002b8 <__aeabi_dsub>
 8008ecc:	4642      	mov	r2, r8
 8008ece:	4606      	mov	r6, r0
 8008ed0:	460f      	mov	r7, r1
 8008ed2:	464b      	mov	r3, r9
 8008ed4:	4640      	mov	r0, r8
 8008ed6:	4649      	mov	r1, r9
 8008ed8:	f7f7 fba6 	bl	8000628 <__aeabi_dmul>
 8008edc:	a35e      	add	r3, pc, #376	; (adr r3, 8009058 <__ieee754_pow+0xa18>)
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	460d      	mov	r5, r1
 8008ee6:	f7f7 fb9f 	bl	8000628 <__aeabi_dmul>
 8008eea:	a35d      	add	r3, pc, #372	; (adr r3, 8009060 <__ieee754_pow+0xa20>)
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	f7f7 f9e2 	bl	80002b8 <__aeabi_dsub>
 8008ef4:	4622      	mov	r2, r4
 8008ef6:	462b      	mov	r3, r5
 8008ef8:	f7f7 fb96 	bl	8000628 <__aeabi_dmul>
 8008efc:	a35a      	add	r3, pc, #360	; (adr r3, 8009068 <__ieee754_pow+0xa28>)
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	f7f7 f9db 	bl	80002bc <__adddf3>
 8008f06:	4622      	mov	r2, r4
 8008f08:	462b      	mov	r3, r5
 8008f0a:	f7f7 fb8d 	bl	8000628 <__aeabi_dmul>
 8008f0e:	a358      	add	r3, pc, #352	; (adr r3, 8009070 <__ieee754_pow+0xa30>)
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	f7f7 f9d0 	bl	80002b8 <__aeabi_dsub>
 8008f18:	4622      	mov	r2, r4
 8008f1a:	462b      	mov	r3, r5
 8008f1c:	f7f7 fb84 	bl	8000628 <__aeabi_dmul>
 8008f20:	a355      	add	r3, pc, #340	; (adr r3, 8009078 <__ieee754_pow+0xa38>)
 8008f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f26:	f7f7 f9c9 	bl	80002bc <__adddf3>
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	462b      	mov	r3, r5
 8008f2e:	f7f7 fb7b 	bl	8000628 <__aeabi_dmul>
 8008f32:	4602      	mov	r2, r0
 8008f34:	460b      	mov	r3, r1
 8008f36:	4640      	mov	r0, r8
 8008f38:	4649      	mov	r1, r9
 8008f3a:	f7f7 f9bd 	bl	80002b8 <__aeabi_dsub>
 8008f3e:	4604      	mov	r4, r0
 8008f40:	460d      	mov	r5, r1
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	4640      	mov	r0, r8
 8008f48:	4649      	mov	r1, r9
 8008f4a:	f7f7 fb6d 	bl	8000628 <__aeabi_dmul>
 8008f4e:	2200      	movs	r2, #0
 8008f50:	ec41 0b19 	vmov	d9, r0, r1
 8008f54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f58:	4620      	mov	r0, r4
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	f7f7 f9ac 	bl	80002b8 <__aeabi_dsub>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	ec51 0b19 	vmov	r0, r1, d9
 8008f68:	f7f7 fc88 	bl	800087c <__aeabi_ddiv>
 8008f6c:	4632      	mov	r2, r6
 8008f6e:	4604      	mov	r4, r0
 8008f70:	460d      	mov	r5, r1
 8008f72:	463b      	mov	r3, r7
 8008f74:	4640      	mov	r0, r8
 8008f76:	4649      	mov	r1, r9
 8008f78:	f7f7 fb56 	bl	8000628 <__aeabi_dmul>
 8008f7c:	4632      	mov	r2, r6
 8008f7e:	463b      	mov	r3, r7
 8008f80:	f7f7 f99c 	bl	80002bc <__adddf3>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	4620      	mov	r0, r4
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	f7f7 f994 	bl	80002b8 <__aeabi_dsub>
 8008f90:	4642      	mov	r2, r8
 8008f92:	464b      	mov	r3, r9
 8008f94:	f7f7 f990 	bl	80002b8 <__aeabi_dsub>
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	493a      	ldr	r1, [pc, #232]	; (8009088 <__ieee754_pow+0xa48>)
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	f7f7 f98a 	bl	80002b8 <__aeabi_dsub>
 8008fa4:	ec41 0b10 	vmov	d0, r0, r1
 8008fa8:	ee10 3a90 	vmov	r3, s1
 8008fac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fb4:	da2b      	bge.n	800900e <__ieee754_pow+0x9ce>
 8008fb6:	4650      	mov	r0, sl
 8008fb8:	f000 f966 	bl	8009288 <scalbn>
 8008fbc:	ec51 0b10 	vmov	r0, r1, d0
 8008fc0:	ec53 2b18 	vmov	r2, r3, d8
 8008fc4:	f7ff bbed 	b.w	80087a2 <__ieee754_pow+0x162>
 8008fc8:	4b30      	ldr	r3, [pc, #192]	; (800908c <__ieee754_pow+0xa4c>)
 8008fca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008fce:	429e      	cmp	r6, r3
 8008fd0:	f77f af0c 	ble.w	8008dec <__ieee754_pow+0x7ac>
 8008fd4:	4b2e      	ldr	r3, [pc, #184]	; (8009090 <__ieee754_pow+0xa50>)
 8008fd6:	440b      	add	r3, r1
 8008fd8:	4303      	orrs	r3, r0
 8008fda:	d009      	beq.n	8008ff0 <__ieee754_pow+0x9b0>
 8008fdc:	ec51 0b18 	vmov	r0, r1, d8
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f7f7 fd92 	bl	8000b0c <__aeabi_dcmplt>
 8008fe8:	3800      	subs	r0, #0
 8008fea:	bf18      	it	ne
 8008fec:	2001      	movne	r0, #1
 8008fee:	e447      	b.n	8008880 <__ieee754_pow+0x240>
 8008ff0:	4622      	mov	r2, r4
 8008ff2:	462b      	mov	r3, r5
 8008ff4:	f7f7 f960 	bl	80002b8 <__aeabi_dsub>
 8008ff8:	4642      	mov	r2, r8
 8008ffa:	464b      	mov	r3, r9
 8008ffc:	f7f7 fd9a 	bl	8000b34 <__aeabi_dcmpge>
 8009000:	2800      	cmp	r0, #0
 8009002:	f43f aef3 	beq.w	8008dec <__ieee754_pow+0x7ac>
 8009006:	e7e9      	b.n	8008fdc <__ieee754_pow+0x99c>
 8009008:	f04f 0a00 	mov.w	sl, #0
 800900c:	e71a      	b.n	8008e44 <__ieee754_pow+0x804>
 800900e:	ec51 0b10 	vmov	r0, r1, d0
 8009012:	4619      	mov	r1, r3
 8009014:	e7d4      	b.n	8008fc0 <__ieee754_pow+0x980>
 8009016:	491c      	ldr	r1, [pc, #112]	; (8009088 <__ieee754_pow+0xa48>)
 8009018:	2000      	movs	r0, #0
 800901a:	f7ff bb30 	b.w	800867e <__ieee754_pow+0x3e>
 800901e:	2000      	movs	r0, #0
 8009020:	2100      	movs	r1, #0
 8009022:	f7ff bb2c 	b.w	800867e <__ieee754_pow+0x3e>
 8009026:	4630      	mov	r0, r6
 8009028:	4639      	mov	r1, r7
 800902a:	f7ff bb28 	b.w	800867e <__ieee754_pow+0x3e>
 800902e:	9204      	str	r2, [sp, #16]
 8009030:	f7ff bb7a 	b.w	8008728 <__ieee754_pow+0xe8>
 8009034:	2300      	movs	r3, #0
 8009036:	f7ff bb64 	b.w	8008702 <__ieee754_pow+0xc2>
 800903a:	bf00      	nop
 800903c:	f3af 8000 	nop.w
 8009040:	00000000 	.word	0x00000000
 8009044:	3fe62e43 	.word	0x3fe62e43
 8009048:	fefa39ef 	.word	0xfefa39ef
 800904c:	3fe62e42 	.word	0x3fe62e42
 8009050:	0ca86c39 	.word	0x0ca86c39
 8009054:	be205c61 	.word	0xbe205c61
 8009058:	72bea4d0 	.word	0x72bea4d0
 800905c:	3e663769 	.word	0x3e663769
 8009060:	c5d26bf1 	.word	0xc5d26bf1
 8009064:	3ebbbd41 	.word	0x3ebbbd41
 8009068:	af25de2c 	.word	0xaf25de2c
 800906c:	3f11566a 	.word	0x3f11566a
 8009070:	16bebd93 	.word	0x16bebd93
 8009074:	3f66c16c 	.word	0x3f66c16c
 8009078:	5555553e 	.word	0x5555553e
 800907c:	3fc55555 	.word	0x3fc55555
 8009080:	3fe00000 	.word	0x3fe00000
 8009084:	000fffff 	.word	0x000fffff
 8009088:	3ff00000 	.word	0x3ff00000
 800908c:	4090cbff 	.word	0x4090cbff
 8009090:	3f6f3400 	.word	0x3f6f3400
 8009094:	652b82fe 	.word	0x652b82fe
 8009098:	3c971547 	.word	0x3c971547

0800909c <__ieee754_sqrt>:
 800909c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a0:	ec55 4b10 	vmov	r4, r5, d0
 80090a4:	4e55      	ldr	r6, [pc, #340]	; (80091fc <__ieee754_sqrt+0x160>)
 80090a6:	43ae      	bics	r6, r5
 80090a8:	ee10 0a10 	vmov	r0, s0
 80090ac:	ee10 3a10 	vmov	r3, s0
 80090b0:	462a      	mov	r2, r5
 80090b2:	4629      	mov	r1, r5
 80090b4:	d110      	bne.n	80090d8 <__ieee754_sqrt+0x3c>
 80090b6:	ee10 2a10 	vmov	r2, s0
 80090ba:	462b      	mov	r3, r5
 80090bc:	f7f7 fab4 	bl	8000628 <__aeabi_dmul>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4620      	mov	r0, r4
 80090c6:	4629      	mov	r1, r5
 80090c8:	f7f7 f8f8 	bl	80002bc <__adddf3>
 80090cc:	4604      	mov	r4, r0
 80090ce:	460d      	mov	r5, r1
 80090d0:	ec45 4b10 	vmov	d0, r4, r5
 80090d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d8:	2d00      	cmp	r5, #0
 80090da:	dc10      	bgt.n	80090fe <__ieee754_sqrt+0x62>
 80090dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80090e0:	4330      	orrs	r0, r6
 80090e2:	d0f5      	beq.n	80090d0 <__ieee754_sqrt+0x34>
 80090e4:	b15d      	cbz	r5, 80090fe <__ieee754_sqrt+0x62>
 80090e6:	ee10 2a10 	vmov	r2, s0
 80090ea:	462b      	mov	r3, r5
 80090ec:	ee10 0a10 	vmov	r0, s0
 80090f0:	f7f7 f8e2 	bl	80002b8 <__aeabi_dsub>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	f7f7 fbc0 	bl	800087c <__aeabi_ddiv>
 80090fc:	e7e6      	b.n	80090cc <__ieee754_sqrt+0x30>
 80090fe:	1512      	asrs	r2, r2, #20
 8009100:	d074      	beq.n	80091ec <__ieee754_sqrt+0x150>
 8009102:	07d4      	lsls	r4, r2, #31
 8009104:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009108:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800910c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009110:	bf5e      	ittt	pl
 8009112:	0fda      	lsrpl	r2, r3, #31
 8009114:	005b      	lslpl	r3, r3, #1
 8009116:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800911a:	2400      	movs	r4, #0
 800911c:	0fda      	lsrs	r2, r3, #31
 800911e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009122:	107f      	asrs	r7, r7, #1
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	2516      	movs	r5, #22
 8009128:	4620      	mov	r0, r4
 800912a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800912e:	1886      	adds	r6, r0, r2
 8009130:	428e      	cmp	r6, r1
 8009132:	bfde      	ittt	le
 8009134:	1b89      	suble	r1, r1, r6
 8009136:	18b0      	addle	r0, r6, r2
 8009138:	18a4      	addle	r4, r4, r2
 800913a:	0049      	lsls	r1, r1, #1
 800913c:	3d01      	subs	r5, #1
 800913e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009142:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009146:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800914a:	d1f0      	bne.n	800912e <__ieee754_sqrt+0x92>
 800914c:	462a      	mov	r2, r5
 800914e:	f04f 0e20 	mov.w	lr, #32
 8009152:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009156:	4281      	cmp	r1, r0
 8009158:	eb06 0c05 	add.w	ip, r6, r5
 800915c:	dc02      	bgt.n	8009164 <__ieee754_sqrt+0xc8>
 800915e:	d113      	bne.n	8009188 <__ieee754_sqrt+0xec>
 8009160:	459c      	cmp	ip, r3
 8009162:	d811      	bhi.n	8009188 <__ieee754_sqrt+0xec>
 8009164:	f1bc 0f00 	cmp.w	ip, #0
 8009168:	eb0c 0506 	add.w	r5, ip, r6
 800916c:	da43      	bge.n	80091f6 <__ieee754_sqrt+0x15a>
 800916e:	2d00      	cmp	r5, #0
 8009170:	db41      	blt.n	80091f6 <__ieee754_sqrt+0x15a>
 8009172:	f100 0801 	add.w	r8, r0, #1
 8009176:	1a09      	subs	r1, r1, r0
 8009178:	459c      	cmp	ip, r3
 800917a:	bf88      	it	hi
 800917c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009180:	eba3 030c 	sub.w	r3, r3, ip
 8009184:	4432      	add	r2, r6
 8009186:	4640      	mov	r0, r8
 8009188:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800918c:	f1be 0e01 	subs.w	lr, lr, #1
 8009190:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009194:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009198:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800919c:	d1db      	bne.n	8009156 <__ieee754_sqrt+0xba>
 800919e:	430b      	orrs	r3, r1
 80091a0:	d006      	beq.n	80091b0 <__ieee754_sqrt+0x114>
 80091a2:	1c50      	adds	r0, r2, #1
 80091a4:	bf13      	iteet	ne
 80091a6:	3201      	addne	r2, #1
 80091a8:	3401      	addeq	r4, #1
 80091aa:	4672      	moveq	r2, lr
 80091ac:	f022 0201 	bicne.w	r2, r2, #1
 80091b0:	1063      	asrs	r3, r4, #1
 80091b2:	0852      	lsrs	r2, r2, #1
 80091b4:	07e1      	lsls	r1, r4, #31
 80091b6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80091ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80091be:	bf48      	it	mi
 80091c0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80091c4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80091c8:	4614      	mov	r4, r2
 80091ca:	e781      	b.n	80090d0 <__ieee754_sqrt+0x34>
 80091cc:	0ad9      	lsrs	r1, r3, #11
 80091ce:	3815      	subs	r0, #21
 80091d0:	055b      	lsls	r3, r3, #21
 80091d2:	2900      	cmp	r1, #0
 80091d4:	d0fa      	beq.n	80091cc <__ieee754_sqrt+0x130>
 80091d6:	02cd      	lsls	r5, r1, #11
 80091d8:	d50a      	bpl.n	80091f0 <__ieee754_sqrt+0x154>
 80091da:	f1c2 0420 	rsb	r4, r2, #32
 80091de:	fa23 f404 	lsr.w	r4, r3, r4
 80091e2:	1e55      	subs	r5, r2, #1
 80091e4:	4093      	lsls	r3, r2
 80091e6:	4321      	orrs	r1, r4
 80091e8:	1b42      	subs	r2, r0, r5
 80091ea:	e78a      	b.n	8009102 <__ieee754_sqrt+0x66>
 80091ec:	4610      	mov	r0, r2
 80091ee:	e7f0      	b.n	80091d2 <__ieee754_sqrt+0x136>
 80091f0:	0049      	lsls	r1, r1, #1
 80091f2:	3201      	adds	r2, #1
 80091f4:	e7ef      	b.n	80091d6 <__ieee754_sqrt+0x13a>
 80091f6:	4680      	mov	r8, r0
 80091f8:	e7bd      	b.n	8009176 <__ieee754_sqrt+0xda>
 80091fa:	bf00      	nop
 80091fc:	7ff00000 	.word	0x7ff00000

08009200 <with_errno>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	4604      	mov	r4, r0
 8009204:	460d      	mov	r5, r1
 8009206:	4616      	mov	r6, r2
 8009208:	f7fb fd94 	bl	8004d34 <__errno>
 800920c:	4629      	mov	r1, r5
 800920e:	6006      	str	r6, [r0, #0]
 8009210:	4620      	mov	r0, r4
 8009212:	bd70      	pop	{r4, r5, r6, pc}

08009214 <xflow>:
 8009214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009216:	4614      	mov	r4, r2
 8009218:	461d      	mov	r5, r3
 800921a:	b108      	cbz	r0, 8009220 <xflow+0xc>
 800921c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009220:	e9cd 2300 	strd	r2, r3, [sp]
 8009224:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009228:	4620      	mov	r0, r4
 800922a:	4629      	mov	r1, r5
 800922c:	f7f7 f9fc 	bl	8000628 <__aeabi_dmul>
 8009230:	2222      	movs	r2, #34	; 0x22
 8009232:	b003      	add	sp, #12
 8009234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009238:	f7ff bfe2 	b.w	8009200 <with_errno>

0800923c <__math_uflow>:
 800923c:	b508      	push	{r3, lr}
 800923e:	2200      	movs	r2, #0
 8009240:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009244:	f7ff ffe6 	bl	8009214 <xflow>
 8009248:	ec41 0b10 	vmov	d0, r0, r1
 800924c:	bd08      	pop	{r3, pc}

0800924e <__math_oflow>:
 800924e:	b508      	push	{r3, lr}
 8009250:	2200      	movs	r2, #0
 8009252:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009256:	f7ff ffdd 	bl	8009214 <xflow>
 800925a:	ec41 0b10 	vmov	d0, r0, r1
 800925e:	bd08      	pop	{r3, pc}

08009260 <fabs>:
 8009260:	ec51 0b10 	vmov	r0, r1, d0
 8009264:	ee10 2a10 	vmov	r2, s0
 8009268:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800926c:	ec43 2b10 	vmov	d0, r2, r3
 8009270:	4770      	bx	lr

08009272 <finite>:
 8009272:	b082      	sub	sp, #8
 8009274:	ed8d 0b00 	vstr	d0, [sp]
 8009278:	9801      	ldr	r0, [sp, #4]
 800927a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800927e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009282:	0fc0      	lsrs	r0, r0, #31
 8009284:	b002      	add	sp, #8
 8009286:	4770      	bx	lr

08009288 <scalbn>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	ec55 4b10 	vmov	r4, r5, d0
 800928e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009292:	4606      	mov	r6, r0
 8009294:	462b      	mov	r3, r5
 8009296:	b99a      	cbnz	r2, 80092c0 <scalbn+0x38>
 8009298:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800929c:	4323      	orrs	r3, r4
 800929e:	d036      	beq.n	800930e <scalbn+0x86>
 80092a0:	4b39      	ldr	r3, [pc, #228]	; (8009388 <scalbn+0x100>)
 80092a2:	4629      	mov	r1, r5
 80092a4:	ee10 0a10 	vmov	r0, s0
 80092a8:	2200      	movs	r2, #0
 80092aa:	f7f7 f9bd 	bl	8000628 <__aeabi_dmul>
 80092ae:	4b37      	ldr	r3, [pc, #220]	; (800938c <scalbn+0x104>)
 80092b0:	429e      	cmp	r6, r3
 80092b2:	4604      	mov	r4, r0
 80092b4:	460d      	mov	r5, r1
 80092b6:	da10      	bge.n	80092da <scalbn+0x52>
 80092b8:	a32b      	add	r3, pc, #172	; (adr r3, 8009368 <scalbn+0xe0>)
 80092ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092be:	e03a      	b.n	8009336 <scalbn+0xae>
 80092c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80092c4:	428a      	cmp	r2, r1
 80092c6:	d10c      	bne.n	80092e2 <scalbn+0x5a>
 80092c8:	ee10 2a10 	vmov	r2, s0
 80092cc:	4620      	mov	r0, r4
 80092ce:	4629      	mov	r1, r5
 80092d0:	f7f6 fff4 	bl	80002bc <__adddf3>
 80092d4:	4604      	mov	r4, r0
 80092d6:	460d      	mov	r5, r1
 80092d8:	e019      	b.n	800930e <scalbn+0x86>
 80092da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80092de:	460b      	mov	r3, r1
 80092e0:	3a36      	subs	r2, #54	; 0x36
 80092e2:	4432      	add	r2, r6
 80092e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80092e8:	428a      	cmp	r2, r1
 80092ea:	dd08      	ble.n	80092fe <scalbn+0x76>
 80092ec:	2d00      	cmp	r5, #0
 80092ee:	a120      	add	r1, pc, #128	; (adr r1, 8009370 <scalbn+0xe8>)
 80092f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092f4:	da1c      	bge.n	8009330 <scalbn+0xa8>
 80092f6:	a120      	add	r1, pc, #128	; (adr r1, 8009378 <scalbn+0xf0>)
 80092f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092fc:	e018      	b.n	8009330 <scalbn+0xa8>
 80092fe:	2a00      	cmp	r2, #0
 8009300:	dd08      	ble.n	8009314 <scalbn+0x8c>
 8009302:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009306:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800930a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800930e:	ec45 4b10 	vmov	d0, r4, r5
 8009312:	bd70      	pop	{r4, r5, r6, pc}
 8009314:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009318:	da19      	bge.n	800934e <scalbn+0xc6>
 800931a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800931e:	429e      	cmp	r6, r3
 8009320:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009324:	dd0a      	ble.n	800933c <scalbn+0xb4>
 8009326:	a112      	add	r1, pc, #72	; (adr r1, 8009370 <scalbn+0xe8>)
 8009328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1e2      	bne.n	80092f6 <scalbn+0x6e>
 8009330:	a30f      	add	r3, pc, #60	; (adr r3, 8009370 <scalbn+0xe8>)
 8009332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009336:	f7f7 f977 	bl	8000628 <__aeabi_dmul>
 800933a:	e7cb      	b.n	80092d4 <scalbn+0x4c>
 800933c:	a10a      	add	r1, pc, #40	; (adr r1, 8009368 <scalbn+0xe0>)
 800933e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d0b8      	beq.n	80092b8 <scalbn+0x30>
 8009346:	a10e      	add	r1, pc, #56	; (adr r1, 8009380 <scalbn+0xf8>)
 8009348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800934c:	e7b4      	b.n	80092b8 <scalbn+0x30>
 800934e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009352:	3236      	adds	r2, #54	; 0x36
 8009354:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009358:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800935c:	4620      	mov	r0, r4
 800935e:	4b0c      	ldr	r3, [pc, #48]	; (8009390 <scalbn+0x108>)
 8009360:	2200      	movs	r2, #0
 8009362:	e7e8      	b.n	8009336 <scalbn+0xae>
 8009364:	f3af 8000 	nop.w
 8009368:	c2f8f359 	.word	0xc2f8f359
 800936c:	01a56e1f 	.word	0x01a56e1f
 8009370:	8800759c 	.word	0x8800759c
 8009374:	7e37e43c 	.word	0x7e37e43c
 8009378:	8800759c 	.word	0x8800759c
 800937c:	fe37e43c 	.word	0xfe37e43c
 8009380:	c2f8f359 	.word	0xc2f8f359
 8009384:	81a56e1f 	.word	0x81a56e1f
 8009388:	43500000 	.word	0x43500000
 800938c:	ffff3cb0 	.word	0xffff3cb0
 8009390:	3c900000 	.word	0x3c900000

08009394 <_sbrk>:
 8009394:	4a04      	ldr	r2, [pc, #16]	; (80093a8 <_sbrk+0x14>)
 8009396:	6811      	ldr	r1, [r2, #0]
 8009398:	4603      	mov	r3, r0
 800939a:	b909      	cbnz	r1, 80093a0 <_sbrk+0xc>
 800939c:	4903      	ldr	r1, [pc, #12]	; (80093ac <_sbrk+0x18>)
 800939e:	6011      	str	r1, [r2, #0]
 80093a0:	6810      	ldr	r0, [r2, #0]
 80093a2:	4403      	add	r3, r0
 80093a4:	6013      	str	r3, [r2, #0]
 80093a6:	4770      	bx	lr
 80093a8:	20011aa4 	.word	0x20011aa4
 80093ac:	20011aa8 	.word	0x20011aa8

080093b0 <_init>:
 80093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b2:	bf00      	nop
 80093b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b6:	bc08      	pop	{r3}
 80093b8:	469e      	mov	lr, r3
 80093ba:	4770      	bx	lr

080093bc <_fini>:
 80093bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093be:	bf00      	nop
 80093c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093c2:	bc08      	pop	{r3}
 80093c4:	469e      	mov	lr, r3
 80093c6:	4770      	bx	lr
