
Prueba_Astar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ce8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08007e88  08007e88  00017e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083c8  080083c8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080083c8  080083c8  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083c8  080083c8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083c8  080083c8  000183c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083cc  080083cc  000183cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080083d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ce0  200001d8  080085a8  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000eb8  080085a8  00020eb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040b9  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d7e  00000000  00000000  000242c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d0  00000000  00000000  00025040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000370  00000000  00000000  00025410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000115b6  00000000  00000000  00025780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004c88  00000000  00000000  00036d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fb6b  00000000  00000000  0003b9be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009b529  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002504  00000000  00000000  0009b57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007e70 	.word	0x08007e70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08007e70 	.word	0x08007e70

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <main>:
const char* msg_NotWorking = "\n--------Astar isn't working properly----------\n";
const char* msg_InsertGrid = "\n------------Insert the char grid--------------\n";


int main(void)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000c7e:	4b68      	ldr	r3, [pc, #416]	; (8000e20 <main+0x1a8>)
 8000c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c84:	4a66      	ldr	r2, [pc, #408]	; (8000e20 <main+0x1a8>)
 8000c86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

 	printf("si funciona");
 8000c8e:	4865      	ldr	r0, [pc, #404]	; (8000e24 <main+0x1ac>)
 8000c90:	f003 fcae 	bl	80045f0 <iprintf>



	inSystem ();
 8000c94:	f000 f8ee 	bl	8000e74 <inSystem>


    /* Loop forever */
	while(1){

		if (!flagAstar){
 8000c98:	4b63      	ldr	r3, [pc, #396]	; (8000e28 <main+0x1b0>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d13f      	bne.n	8000d20 <main+0xa8>

			if (rxData != '\0'){
 8000ca0:	4b62      	ldr	r3, [pc, #392]	; (8000e2c <main+0x1b4>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d030      	beq.n	8000d0a <main+0x92>
				bufferReception[counterReception] = rxData;
 8000ca8:	4b61      	ldr	r3, [pc, #388]	; (8000e30 <main+0x1b8>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b5f      	ldr	r3, [pc, #380]	; (8000e2c <main+0x1b4>)
 8000cb0:	7819      	ldrb	r1, [r3, #0]
 8000cb2:	4b60      	ldr	r3, [pc, #384]	; (8000e34 <main+0x1bc>)
 8000cb4:	5499      	strb	r1, [r3, r2]
				counterReception++;
 8000cb6:	4b5e      	ldr	r3, [pc, #376]	; (8000e30 <main+0x1b8>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b5c      	ldr	r3, [pc, #368]	; (8000e30 <main+0x1b8>)
 8000cc0:	701a      	strb	r2, [r3, #0]

				if (rxData == '@'){
 8000cc2:	4b5a      	ldr	r3, [pc, #360]	; (8000e2c <main+0x1b4>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b40      	cmp	r3, #64	; 0x40
 8000cc8:	d10c      	bne.n	8000ce4 <main+0x6c>
					doneTransaction = SET;
 8000cca:	4b5b      	ldr	r3, [pc, #364]	; (8000e38 <main+0x1c0>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	701a      	strb	r2, [r3, #0]

					bufferReception[counterReception-1] = '\0';
 8000cd0:	4b57      	ldr	r3, [pc, #348]	; (8000e30 <main+0x1b8>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	4a57      	ldr	r2, [pc, #348]	; (8000e34 <main+0x1bc>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	54d1      	strb	r1, [r2, r3]

					counterReception = 0;
 8000cdc:	4b54      	ldr	r3, [pc, #336]	; (8000e30 <main+0x1b8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	e00f      	b.n	8000d04 <main+0x8c>

				}else if (rxData == 'z'){
 8000ce4:	4b51      	ldr	r3, [pc, #324]	; (8000e2c <main+0x1b4>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b7a      	cmp	r3, #122	; 0x7a
 8000cea:	d10b      	bne.n	8000d04 <main+0x8c>

					memset(bufferReception, 0, sizeof(bufferReception));
 8000cec:	2240      	movs	r2, #64	; 0x40
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4850      	ldr	r0, [pc, #320]	; (8000e34 <main+0x1bc>)
 8000cf2:	f002 ff2b 	bl	8003b4c <memset>
					counterReception = 0;
 8000cf6:	4b4e      	ldr	r3, [pc, #312]	; (8000e30 <main+0x1b8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "Buffer Vaciado\n \r");
 8000cfc:	494f      	ldr	r1, [pc, #316]	; (8000e3c <main+0x1c4>)
 8000cfe:	4850      	ldr	r0, [pc, #320]	; (8000e40 <main+0x1c8>)
 8000d00:	f002 fe2c 	bl	800395c <writeMsg>
				}

				rxData = '\0';
 8000d04:	4b49      	ldr	r3, [pc, #292]	; (8000e2c <main+0x1b4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]

			}

			if (doneTransaction){
 8000d0a:	4b4b      	ldr	r3, [pc, #300]	; (8000e38 <main+0x1c0>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d0c2      	beq.n	8000c98 <main+0x20>
				parseCommands(bufferReception);
 8000d12:	4848      	ldr	r0, [pc, #288]	; (8000e34 <main+0x1bc>)
 8000d14:	f000 f948 	bl	8000fa8 <parseCommands>
				doneTransaction = RESET;
 8000d18:	4b47      	ldr	r3, [pc, #284]	; (8000e38 <main+0x1c0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
 8000d1e:	e7bb      	b.n	8000c98 <main+0x20>
			}
		}else{
			// Si estamos aqui es porque se aplicara el mismo metodo para guardar cada fila de strings

			if (rxData != '\0'){
 8000d20:	4b42      	ldr	r3, [pc, #264]	; (8000e2c <main+0x1b4>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d05a      	beq.n	8000dde <main+0x166>

				if (rxData != '\r'){
 8000d28:	4b40      	ldr	r3, [pc, #256]	; (8000e2c <main+0x1b4>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b0d      	cmp	r3, #13
 8000d2e:	d017      	beq.n	8000d60 <main+0xe8>
					stringMatrix[stringRow][stringColumn] = rxData;
 8000d30:	4b44      	ldr	r3, [pc, #272]	; (8000e44 <main+0x1cc>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	4b44      	ldr	r3, [pc, #272]	; (8000e48 <main+0x1d0>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461c      	mov	r4, r3
 8000d3c:	4b3b      	ldr	r3, [pc, #236]	; (8000e2c <main+0x1b4>)
 8000d3e:	7818      	ldrb	r0, [r3, #0]
 8000d40:	4a42      	ldr	r2, [pc, #264]	; (8000e4c <main+0x1d4>)
 8000d42:	460b      	mov	r3, r1
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	440b      	add	r3, r1
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4423      	add	r3, r4
 8000d4e:	4602      	mov	r2, r0
 8000d50:	701a      	strb	r2, [r3, #0]
					stringColumn++;
 8000d52:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <main+0x1d0>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b3b      	ldr	r3, [pc, #236]	; (8000e48 <main+0x1d0>)
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	e008      	b.n	8000d72 <main+0xfa>
				}else{
					stringRow++;
 8000d60:	4b38      	ldr	r3, [pc, #224]	; (8000e44 <main+0x1cc>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	3301      	adds	r3, #1
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <main+0x1cc>)
 8000d6a:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <main+0x1d0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
				}

				if (rxData == '@'){
 8000d72:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <main+0x1b4>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b40      	cmp	r3, #64	; 0x40
 8000d78:	d115      	bne.n	8000da6 <main+0x12e>
					doneTransaction = SET;
 8000d7a:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <main+0x1c0>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	701a      	strb	r2, [r3, #0]

					stringMatrix[stringRow][stringColumn - 1] = '\0';
 8000d80:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <main+0x1cc>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	4b30      	ldr	r3, [pc, #192]	; (8000e48 <main+0x1d0>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	1e5a      	subs	r2, r3, #1
 8000d8c:	492f      	ldr	r1, [pc, #188]	; (8000e4c <main+0x1d4>)
 8000d8e:	4603      	mov	r3, r0
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4403      	add	r3, r0
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	440b      	add	r3, r1
 8000d98:	4413      	add	r3, r2
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]

					stringColumn = 0;
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <main+0x1d0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
 8000da4:	e018      	b.n	8000dd8 <main+0x160>

				}else if (rxData == 'z'){
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <main+0x1b4>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b7a      	cmp	r3, #122	; 0x7a
 8000dac:	d114      	bne.n	8000dd8 <main+0x160>

					memset(stringMatrix, 0, sizeof(stringMatrix));
 8000dae:	2264      	movs	r2, #100	; 0x64
 8000db0:	2100      	movs	r1, #0
 8000db2:	4826      	ldr	r0, [pc, #152]	; (8000e4c <main+0x1d4>)
 8000db4:	f002 feca 	bl	8003b4c <memset>
					stringRow    = 0;
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <main+0x1cc>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 8000dbe:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <main+0x1d0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 8000dc4:	4922      	ldr	r1, [pc, #136]	; (8000e50 <main+0x1d8>)
 8000dc6:	481e      	ldr	r0, [pc, #120]	; (8000e40 <main+0x1c8>)
 8000dc8:	f002 fdc8 	bl	800395c <writeMsg>
					writeMsg(&handlerUSART, msg_InsertGrid);
 8000dcc:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <main+0x1dc>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	481b      	ldr	r0, [pc, #108]	; (8000e40 <main+0x1c8>)
 8000dd4:	f002 fdc2 	bl	800395c <writeMsg>
				}

				rxData = '\0';
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <main+0x1b4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]

			}

			if (doneTransaction){
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <main+0x1c0>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f43f af58 	beq.w	8000c98 <main+0x20>

				starWorking = findShorterWay(stringMatrix, readableGrid, costs, &handlerAstarParameters, &handlerCostsAstar, shorterWay);
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <main+0x1e0>)
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <main+0x1e4>)
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <main+0x1e8>)
 8000df2:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <main+0x1ec>)
 8000df4:	491c      	ldr	r1, [pc, #112]	; (8000e68 <main+0x1f0>)
 8000df6:	4815      	ldr	r0, [pc, #84]	; (8000e4c <main+0x1d4>)
 8000df8:	f000 fa30 	bl	800125c <findShorterWay>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <main+0x1f4>)
 8000e02:	701a      	strb	r2, [r3, #0]

				if (starWorking){
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <main+0x1f4>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d105      	bne.n	8000e18 <main+0x1a0>
					// si se llego hasta aca es porque Astar si funciona correctamente
				}else{
					writeMsg(&handlerUSART, msg_NotWorking);
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <main+0x1f8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	480b      	ldr	r0, [pc, #44]	; (8000e40 <main+0x1c8>)
 8000e14:	f002 fda2 	bl	800395c <writeMsg>
				}


				doneTransaction = RESET;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <main+0x1c0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
		if (!flagAstar){
 8000e1e:	e73b      	b.n	8000c98 <main+0x20>
 8000e20:	e000ed00 	.word	0xe000ed00
 8000e24:	08007ef0 	.word	0x08007ef0
 8000e28:	20000e8e 	.word	0x20000e8e
 8000e2c:	20000356 	.word	0x20000356
 8000e30:	20000354 	.word	0x20000354
 8000e34:	20000314 	.word	0x20000314
 8000e38:	20000355 	.word	0x20000355
 8000e3c:	08007efc 	.word	0x08007efc
 8000e40:	2000022c 	.word	0x2000022c
 8000e44:	20000e8d 	.word	0x20000e8d
 8000e48:	20000e8c 	.word	0x20000e8c
 8000e4c:	200003c4 	.word	0x200003c4
 8000e50:	08007f10 	.word	0x08007f10
 8000e54:	20000004 	.word	0x20000004
 8000e58:	20000dec 	.word	0x20000dec
 8000e5c:	200002cc 	.word	0x200002cc
 8000e60:	200002c0 	.word	0x200002c0
 8000e64:	20000428 	.word	0x20000428
 8000e68:	20000d88 	.word	0x20000d88
 8000e6c:	20000e8f 	.word	0x20000e8f
 8000e70:	20000000 	.word	0x20000000

08000e74 <inSystem>:
		}
	}
}


void inSystem (void){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0


	// Activamos la maxima velocidad del microcontrolador
	RCC_enableMaxFrequencies();
 8000e78:	f002 f900 	bl	800307c <RCC_enableMaxFrequencies>
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000e7c:	4b41      	ldr	r3, [pc, #260]	; (8000f84 <inSystem+0x110>)
 8000e7e:	4a42      	ldr	r2, [pc, #264]	; (8000f88 <inSystem+0x114>)
 8000e80:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000e82:	4b40      	ldr	r3, [pc, #256]	; (8000f84 <inSystem+0x110>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000e88:	4b3e      	ldr	r3, [pc, #248]	; (8000f84 <inSystem+0x110>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000e8e:	4b3d      	ldr	r3, [pc, #244]	; (8000f84 <inSystem+0x110>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000e94:	4b3b      	ldr	r3, [pc, #236]	; (8000f84 <inSystem+0x110>)
 8000e96:	2205      	movs	r2, #5
 8000e98:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000e9a:	4b3a      	ldr	r3, [pc, #232]	; (8000f84 <inSystem+0x110>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000ea0:	4b38      	ldr	r3, [pc, #224]	; (8000f84 <inSystem+0x110>)
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000ea6:	4837      	ldr	r0, [pc, #220]	; (8000f84 <inSystem+0x110>)
 8000ea8:	f001 ff5a 	bl	8002d60 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000eac:	2101      	movs	r1, #1
 8000eae:	4835      	ldr	r0, [pc, #212]	; (8000f84 <inSystem+0x110>)
 8000eb0:	f002 f880 	bl	8002fb4 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 8000eb4:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <inSystem+0x118>)
 8000eb6:	4a36      	ldr	r2, [pc, #216]	; (8000f90 <inSystem+0x11c>)
 8000eb8:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8000eba:	4b34      	ldr	r3, [pc, #208]	; (8000f8c <inSystem+0x118>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8000ec0:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <inSystem+0x118>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8000ec6:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <inSystem+0x118>)
 8000ec8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ecc:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 1000;
 8000ece:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <inSystem+0x118>)
 8000ed0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ed4:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 8000ed6:	482d      	ldr	r0, [pc, #180]	; (8000f8c <inSystem+0x118>)
 8000ed8:	f001 fbf2 	bl	80026c0 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8000edc:	482b      	ldr	r0, [pc, #172]	; (8000f8c <inSystem+0x118>)
 8000ede:	f001 ff2d 	bl	8002d3c <startTimer>
	///////////////////////////////////////////Comunicación serial para comandos //////////////////////////////////////////////


	//Comunicacion serial

	handlerPinRx.pGPIOx                             = GPIOA;
 8000ee2:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <inSystem+0x120>)
 8000ee4:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <inSystem+0x114>)
 8000ee6:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000ee8:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <inSystem+0x120>)
 8000eea:	2207      	movs	r2, #7
 8000eec:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000eee:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <inSystem+0x120>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000ef4:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <inSystem+0x120>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8000efa:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <inSystem+0x120>)
 8000efc:	2203      	movs	r2, #3
 8000efe:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f00:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <inSystem+0x120>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <inSystem+0x120>)
 8000f08:	2203      	movs	r2, #3
 8000f0a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 8000f0c:	4821      	ldr	r0, [pc, #132]	; (8000f94 <inSystem+0x120>)
 8000f0e:	f001 ff27 	bl	8002d60 <GPIO_Config>

	handlerPinTx.pGPIOx                             = GPIOA;
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <inSystem+0x124>)
 8000f14:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <inSystem+0x114>)
 8000f16:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <inSystem+0x124>)
 8000f1a:	2207      	movs	r2, #7
 8000f1c:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <inSystem+0x124>)
 8000f20:	2202      	movs	r2, #2
 8000f22:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <inSystem+0x124>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <inSystem+0x124>)
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <inSystem+0x124>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <inSystem+0x124>)
 8000f38:	2203      	movs	r2, #3
 8000f3a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 8000f3c:	4816      	ldr	r0, [pc, #88]	; (8000f98 <inSystem+0x124>)
 8000f3e:	f001 ff0f 	bl	8002d60 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <inSystem+0x128>)
 8000f44:	4a16      	ldr	r2, [pc, #88]	; (8000fa0 <inSystem+0x12c>)
 8000f46:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <inSystem+0x128>)
 8000f4a:	4a16      	ldr	r2, [pc, #88]	; (8000fa4 <inSystem+0x130>)
 8000f4c:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <inSystem+0x128>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <inSystem+0x128>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <inSystem+0x128>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <inSystem+0x128>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <inSystem+0x128>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <inSystem+0x128>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <inSystem+0x128>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 8000f78:	4808      	ldr	r0, [pc, #32]	; (8000f9c <inSystem+0x128>)
 8000f7a:	f002 f90d 	bl	8003198 <USART_Config>


}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200001f4 	.word	0x200001f4
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	20000218 	.word	0x20000218
 8000f90:	40000400 	.word	0x40000400
 8000f94:	20000200 	.word	0x20000200
 8000f98:	2000020c 	.word	0x2000020c
 8000f9c:	2000022c 	.word	0x2000022c
 8000fa0:	40004400 	.word	0x40004400
 8000fa4:	02faf080 	.word	0x02faf080

08000fa8 <parseCommands>:


void parseCommands(char *stringVector){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af04      	add	r7, sp, #16
 8000fae:	6078      	str	r0, [r7, #4]

	sscanf(stringVector, "%s %u %u %u %s", cmd ,&firstParameter, &secondParameter, &thirdParameter, userMsg);
 8000fb0:	4b20      	ldr	r3, [pc, #128]	; (8001034 <parseCommands+0x8c>)
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <parseCommands+0x90>)
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	4b20      	ldr	r3, [pc, #128]	; (800103c <parseCommands+0x94>)
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	4b20      	ldr	r3, [pc, #128]	; (8001040 <parseCommands+0x98>)
 8000fbe:	4a21      	ldr	r2, [pc, #132]	; (8001044 <parseCommands+0x9c>)
 8000fc0:	4921      	ldr	r1, [pc, #132]	; (8001048 <parseCommands+0xa0>)
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f003 fb3c 	bl	8004640 <siscanf>


	if (strcmp(cmd, "help") == 0){
 8000fc8:	4920      	ldr	r1, [pc, #128]	; (800104c <parseCommands+0xa4>)
 8000fca:	481e      	ldr	r0, [pc, #120]	; (8001044 <parseCommands+0x9c>)
 8000fcc:	f7ff f908 	bl	80001e0 <strcmp>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d108      	bne.n	8000fe8 <parseCommands+0x40>

		writeMsg(&handlerUSART, "HELP MENU CMD : \n");
 8000fd6:	491e      	ldr	r1, [pc, #120]	; (8001050 <parseCommands+0xa8>)
 8000fd8:	481e      	ldr	r0, [pc, #120]	; (8001054 <parseCommands+0xac>)
 8000fda:	f002 fcbf 	bl	800395c <writeMsg>
		writeMsg(&handlerUSART, "1)  astar #parallel Distance #diagonal Distance  \n");
 8000fde:	491e      	ldr	r1, [pc, #120]	; (8001058 <parseCommands+0xb0>)
 8000fe0:	481c      	ldr	r0, [pc, #112]	; (8001054 <parseCommands+0xac>)
 8000fe2:	f002 fcbb 	bl	800395c <writeMsg>

	}



}
 8000fe6:	e021      	b.n	800102c <parseCommands+0x84>
	}else if (strcmp(cmd, "astar") == 0){
 8000fe8:	491c      	ldr	r1, [pc, #112]	; (800105c <parseCommands+0xb4>)
 8000fea:	4816      	ldr	r0, [pc, #88]	; (8001044 <parseCommands+0x9c>)
 8000fec:	f7ff f8f8 	bl	80001e0 <strcmp>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d11a      	bne.n	800102c <parseCommands+0x84>
		handlerAstarParameters.parallelDistance  = firstParameter;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <parseCommands+0x98>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <parseCommands+0xb8>)
 8001004:	edc3 7a00 	vstr	s15, [r3]
		handlerAstarParameters.diagonalDiastance = secondParameter;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <parseCommands+0x94>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	ee07 3a90 	vmov	s15, r3
 8001010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <parseCommands+0xb8>)
 8001016:	edc3 7a01 	vstr	s15, [r3, #4]
		writeMsg(&handlerUSART, msg_InsertGrid);
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <parseCommands+0xbc>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <parseCommands+0xac>)
 8001022:	f002 fc9b 	bl	800395c <writeMsg>
		flagAstar = SET;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <parseCommands+0xc0>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000384 	.word	0x20000384
 8001038:	20000380 	.word	0x20000380
 800103c:	2000037c 	.word	0x2000037c
 8001040:	20000378 	.word	0x20000378
 8001044:	20000358 	.word	0x20000358
 8001048:	08007f30 	.word	0x08007f30
 800104c:	08007f40 	.word	0x08007f40
 8001050:	08007f48 	.word	0x08007f48
 8001054:	2000022c 	.word	0x2000022c
 8001058:	08007f5c 	.word	0x08007f5c
 800105c:	08007f90 	.word	0x08007f90
 8001060:	200002c0 	.word	0x200002c0
 8001064:	20000004 	.word	0x20000004
 8001068:	20000e8e 	.word	0x20000e8e

0800106c <usart2Rx_Callback>:



// Interrupcion usart 1
void usart2Rx_Callback(void){
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

	rxData = getRxData();
 8001070:	f002 fc9c 	bl	80039ac <getRxData>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b01      	ldr	r3, [pc, #4]	; (8001080 <usart2Rx_Callback+0x14>)
 800107a:	701a      	strb	r2, [r3, #0]

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000356 	.word	0x20000356

08001084 <BasicTimer3_Callback>:

//Interrupción Timer 3
void BasicTimer3_Callback(void){
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

	GPIOxTooglePin(&handlerPinA5);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <BasicTimer3_Callback+0x10>)
 800108a:	f001 ffdf 	bl	800304c <GPIOxTooglePin>

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200001f4 	.word	0x200001f4

08001098 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <ITM_SendChar+0x48>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <ITM_SendChar+0x48>)
 80010a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ac:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <ITM_SendChar+0x4c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <ITM_SendChar+0x4c>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80010ba:	bf00      	nop
 80010bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f8      	beq.n	80010bc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80010ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	6013      	str	r3, [r2, #0]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000edfc 	.word	0xe000edfc
 80010e4:	e0000e00 	.word	0xe0000e00

080010e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
	return 1;
 80010ec:	2301      	movs	r3, #1
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_kill>:

int _kill(int pid, int sig)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001102:	f002 fcf1 	bl	8003ae8 <__errno>
 8001106:	4603      	mov	r3, r0
 8001108:	2216      	movs	r2, #22
 800110a:	601a      	str	r2, [r3, #0]
	return -1;
 800110c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_exit>:

void _exit (int status)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001120:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ffe7 	bl	80010f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800112a:	e7fe      	b.n	800112a <_exit+0x12>

0800112c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	e00a      	b.n	8001154 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800113e:	f3af 8000 	nop.w
 8001142:	4601      	mov	r1, r0
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	60ba      	str	r2, [r7, #8]
 800114a:	b2ca      	uxtb	r2, r1
 800114c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	dbf0      	blt.n	800113e <_read+0x12>
	}

return len;
 800115c:	687b      	ldr	r3, [r7, #4]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e009      	b.n	800118c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	60ba      	str	r2, [r7, #8]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff89 	bl	8001098 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3301      	adds	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	429a      	cmp	r2, r3
 8001192:	dbf1      	blt.n	8001178 <_write+0x12>
	}
	return len;
 8001194:	687b      	ldr	r3, [r7, #4]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <_close>:

int _close(int file)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	return -1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c6:	605a      	str	r2, [r3, #4]
	return 0;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_isatty>:

int _isatty(int file)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
	return 1;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800120a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800120c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <LoopForever+0x6>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	; (8001248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <LoopForever+0xe>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	; (8001254 <LoopForever+0x16>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001236:	f002 fc5d 	bl	8003af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800123a:	f7ff fd1d 	bl	8000c78 <main>

0800123e <LoopForever>:

LoopForever:
    b LoopForever
 800123e:	e7fe      	b.n	800123e <LoopForever>
  ldr   r0, =_estack
 8001240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800124c:	080083d0 	.word	0x080083d0
  ldr r2, =_sbss
 8001250:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001254:	20000eb8 	.word	0x20000eb8

08001258 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC_IRQHandler>
	...

0800125c <findShorterWay>:
#include <string.h>
#include "math.h"


int findShorterWay(char terminalGrid[10][10],char Gridcopy[10][10], float matrixCosts[10][10][6] ,
		AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int shorterWay[20][2]){
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	f2ad 6d74 	subw	sp, sp, #1652	; 0x674
 8001262:	af00      	add	r7, sp, #0
 8001264:	f507 64ce 	add.w	r4, r7, #1648	; 0x670
 8001268:	f2a4 645c 	subw	r4, r4, #1628	; 0x65c
 800126c:	6020      	str	r0, [r4, #0]
 800126e:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 8001272:	f5a0 60cc 	sub.w	r0, r0, #1632	; 0x660
 8001276:	6001      	str	r1, [r0, #0]
 8001278:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 800127c:	f2a1 6164 	subw	r1, r1, #1636	; 0x664
 8001280:	600a      	str	r2, [r1, #0]
 8001282:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8001286:	f5a2 62cd 	sub.w	r2, r2, #1640	; 0x668
 800128a:	6013      	str	r3, [r2, #0]

	// seteamos las variables locales a usar
	char nineSlotsMatriz[3][3]; // matriz que tomara una parte de redeableGrid para analisis
	uint8_t shorterWayFound = RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	f887 366f 	strb.w	r3, [r7, #1647]	; 0x66f
	uint8_t i = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	f887 366e 	strb.w	r3, [r7, #1646]	; 0x66e
	uint8_t j = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	f887 366d 	strb.w	r3, [r7, #1645]	; 0x66d
	int position[2];
	uint8_t numberOfPositions = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	f887 366c 	strb.w	r3, [r7, #1644]	; 0x66c
	uint8_t counter = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 366b 	strb.w	r3, [r7, #1643]	; 0x66b
	// Se almacenara el F cost en la primera y el Hcost en la segunda,
	float decisionMatrix[100][4];


	// Primero seteamos dentro de los valores de los parametros cuales son los valores de las filas y las columnas
	parameters->numberOfRows    = getRows(terminalGrid);
 80012aa:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80012ae:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	f001 f8e2 	bl	800247c <getRows>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80012c0:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	721a      	strb	r2, [r3, #8]
	parameters->numberOfColumns = getColums(terminalGrid);
 80012c8:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80012cc:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	f001 f8fb 	bl	80024cc <getColums>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80012de:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	725a      	strb	r2, [r3, #9]

	//Segundo construimos nuestra matriz dinamicamente repartida
	buildMatrixCopy(parameters, terminalGrid, Gridcopy);
 80012e6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80012ea:	f5a3 62cc 	sub.w	r2, r3, #1632	; 0x660
 80012ee:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80012f2:	f2a3 615c 	subw	r1, r3, #1628	; 0x65c
 80012f6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80012fa:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	6809      	ldr	r1, [r1, #0]
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	f001 f85f 	bl	80023c6 <buildMatrixCopy>
	//Variables que dependen del analisis respectivo,y el H cost que es la heuristica el cual es un valor
	// fijo Se tendra entonces una matriz de arrays donde se almacenaran
	// los valores como siguen, [Gcost, Fcost, Hcost]

    //Cuarto, seteamos la matriz heuristica, la cual es la ultima matriz de el bloque de tres de la matriz de costos
    if (setHeuristic(parameters, ptrChanges, matrixCosts, Gridcopy)){
 8001308:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800130c:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8001310:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8001314:	f2a2 6264 	subw	r2, r2, #1636	; 0x664
 8001318:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 800131c:	f5a1 60cd 	sub.w	r0, r1, #1640	; 0x668
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	f8d7 1680 	ldr.w	r1, [r7, #1664]	; 0x680
 8001328:	6800      	ldr	r0, [r0, #0]
 800132a:	f000 fdaf 	bl	8001e8c <setHeuristic>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d012      	beq.n	800135a <findShorterWay+0xfe>
    	// Si estamos aqui todo salio correctamente, el programa puede seguir su curso
    	__NOP();
 8001334:	bf00      	nop
    	return 0;
    }

    // Seteada la heuristica AQUI COMIENZA EL ALGORITMO A TRABAJAR, seteamos el punto de inicio y lo guardamos dentro de la estructura
    // correspondiente
    if(findStart(Gridcopy, parameters, ptrChanges)){
 8001336:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800133a:	f5a3 61cd 	sub.w	r1, r3, #1640	; 0x668
 800133e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8001342:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8001346:	f8d7 2680 	ldr.w	r2, [r7, #1664]	; 0x680
 800134a:	6809      	ldr	r1, [r1, #0]
 800134c:	6818      	ldr	r0, [r3, #0]
 800134e:	f000 ffca 	bl	80022e6 <findStart>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d01e      	beq.n	8001396 <findShorterWay+0x13a>
 8001358:	e002      	b.n	8001360 <findShorterWay+0x104>
    	return 0;
 800135a:	2300      	movs	r3, #0
 800135c:	f000 bce1 	b.w	8001d22 <findShorterWay+0xac6>
    	// Si estamos aqui es porque se encontro el punto de inicio con exito
    	__NOP();
 8001360:	bf00      	nop
    // Comenzamos analizando los vecinos del punto de inicio, calculando para cada uno de ellos (incluyendo el punto de inicio) el Gcosto
    // y el Fcost, de todos ellos al final se selecciona aquel que tenga el F cost mas pequeño, del siguiente while no se sale hasta que se tenga el
    // Array de patents correspondiente a la ruta mas corta

    //guardamos en la posicion de analisis la posicion de start
    ptrChanges->posAnalisis[0] = ptrChanges->startPos[0];
 8001362:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001368:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 800136c:	609a      	str	r2, [r3, #8]
    ptrChanges->posAnalisis[1] = ptrChanges->startPos[1];
 800136e:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001374:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001378:	60da      	str	r2, [r3, #12]
    // Definimos tambien el estado de abierto
    ptrChanges->posOpen[0] =  ptrChanges->startPos[0];
 800137a:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 800137e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001380:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001384:	611a      	str	r2, [r3, #16]
    ptrChanges->posOpen[1] =  ptrChanges->startPos[1];
 8001386:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 800138a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800138c:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001390:	615a      	str	r2, [r3, #20]


    while(!shorterWayFound){
 8001392:	f000 bc15 	b.w	8001bc0 <findShorterWay+0x964>
    	return 0;
 8001396:	2300      	movs	r3, #0
 8001398:	f000 bcc3 	b.w	8001d22 <findShorterWay+0xac6>

    	// este while actuara como un while de recorrido lineal, donde se busca analizar las posiciones i,j de los aledaños recorriendo cada punto linealmente
    	// al punto de analisis

    	//Actualizamos el punto de analisis para seguir analizando a partir del punto de análisis siguiente
    	ptrChanges->posAnalisis[0] = ptrChanges->posOpen[0];
 800139c:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 80013a0:	691a      	ldr	r2, [r3, #16]
 80013a2:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 80013a6:	609a      	str	r2, [r3, #8]
    	ptrChanges->posAnalisis[1] = ptrChanges->posOpen[1];
 80013a8:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 80013b2:	60da      	str	r2, [r3, #12]

    	// guardamos la matriz 3x3 de redeableGrid para analisis, para posiciones no correctas se colocan tales posiciones en 0 tipo char
    	// Y para posiciones ya analizadas se coloca una D de done.
    	for(i = 0; i < 3; i++){
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 366e 	strb.w	r3, [r7, #1646]	; 0x66e
 80013ba:	e0a3      	b.n	8001504 <findShorterWay+0x2a8>
    		for (j = 0; j < 3; j++){
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 366d 	strb.w	r3, [r7, #1645]	; 0x66d
 80013c2:	e095      	b.n	80014f0 <findShorterWay+0x294>

    			if 	  ((ptrChanges->posAnalisis[0] + i - 1) < 0
 80013c4:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 80013ce:	4413      	add	r3, r2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	dd07      	ble.n	80013e4 <findShorterWay+0x188>
    			    || (ptrChanges->posAnalisis[1] + j - 1) < 0) {
 80013d4:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 80013de:	4413      	add	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dc10      	bgt.n	8001406 <findShorterWay+0x1aa>
    				// El primer caso seria cuando el puntero que estudia la matriz esta por fuera del rango , especificamente por detras del rango
    				// donde el indice seria negativo
    				nineSlotsMatriz[i][j] = '0';
 80013e4:	f897 266e 	ldrb.w	r2, [r7, #1646]	; 0x66e
 80013e8:	f897 166d 	ldrb.w	r1, [r7, #1645]	; 0x66d
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 80013f6:	f107 0208 	add.w	r2, r7, #8
 80013fa:	4413      	add	r3, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	3b10      	subs	r3, #16
 8001400:	2230      	movs	r2, #48	; 0x30
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	e06f      	b.n	80014e6 <findShorterWay+0x28a>

    			}else if ((ptrChanges->posAnalisis[0] + i - 1) > parameters->numberOfRows - 1
 8001406:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 8001410:	4413      	add	r3, r2
 8001412:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8001416:	f5a2 62cd 	sub.w	r2, r2, #1640	; 0x668
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	7a12      	ldrb	r2, [r2, #8]
 800141e:	4293      	cmp	r3, r2
 8001420:	dc0d      	bgt.n	800143e <findShorterWay+0x1e2>
    				||    (ptrChanges->posAnalisis[1] + j - 1) > parameters->numberOfColumns - 1){
 8001422:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 800142c:	4413      	add	r3, r2
 800142e:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8001432:	f5a2 62cd 	sub.w	r2, r2, #1640	; 0x668
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	7a52      	ldrb	r2, [r2, #9]
 800143a:	4293      	cmp	r3, r2
 800143c:	dd10      	ble.n	8001460 <findShorterWay+0x204>
    				// El segundo caso seria cuando el puntero que estudia la matriz esta por fuera del rango, especificamente por delante
    				// del rango donde el indice seria mayor al limite superior del numero de filas o columnas restado uno.
    				nineSlotsMatriz[i][j] = '0';
 800143e:	f897 266e 	ldrb.w	r2, [r7, #1646]	; 0x66e
 8001442:	f897 166d 	ldrb.w	r1, [r7, #1645]	; 0x66d
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8001450:	f107 0208 	add.w	r2, r7, #8
 8001454:	4413      	add	r3, r2
 8001456:	440b      	add	r3, r1
 8001458:	3b10      	subs	r3, #16
 800145a:	2230      	movs	r2, #48	; 0x30
 800145c:	701a      	strb	r2, [r3, #0]
 800145e:	e042      	b.n	80014e6 <findShorterWay+0x28a>
    			}else if(i == 1 && j == 1){
 8001460:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 8001464:	2b01      	cmp	r3, #1
 8001466:	d114      	bne.n	8001492 <findShorterWay+0x236>
 8001468:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 800146c:	2b01      	cmp	r3, #1
 800146e:	d110      	bne.n	8001492 <findShorterWay+0x236>
    				// Este caso corresponde con el punto de analisis , este caso no lo queremos estudiar ya que ya estaria estudiado como tal,
    				// queremos es solo estudiar sus aledanios, por lo que en esta posición colocaremos una 'P' como de Point
    				nineSlotsMatriz[i][j] = 'P';
 8001470:	f897 266e 	ldrb.w	r2, [r7, #1646]	; 0x66e
 8001474:	f897 166d 	ldrb.w	r1, [r7, #1645]	; 0x66d
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8001482:	f107 0208 	add.w	r2, r7, #8
 8001486:	4413      	add	r3, r2
 8001488:	440b      	add	r3, r1
 800148a:	3b10      	subs	r3, #16
 800148c:	2250      	movs	r2, #80	; 0x50
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	e029      	b.n	80014e6 <findShorterWay+0x28a>
    			}else{
    				// Este ultimo caso donde no se cumple lo anterior  simplemente copiamos exactamente lo mismo que aparece en la matriz de caracteres
    				nineSlotsMatriz[i][j] = Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1];
 8001492:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 800149c:	4413      	add	r3, r2
 800149e:	461a      	mov	r2, r3
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	3b0a      	subs	r3, #10
 80014aa:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80014ae:	f5a2 62cc 	sub.w	r2, r2, #1632	; 0x660
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	18d0      	adds	r0, r2, r3
 80014b6:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 80014c0:	4413      	add	r3, r2
 80014c2:	3b01      	subs	r3, #1
 80014c4:	f897 266e 	ldrb.w	r2, [r7, #1646]	; 0x66e
 80014c8:	f897 166d 	ldrb.w	r1, [r7, #1645]	; 0x66d
 80014cc:	5cc0      	ldrb	r0, [r0, r3]
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 80014d8:	f107 0208 	add.w	r2, r7, #8
 80014dc:	4413      	add	r3, r2
 80014de:	440b      	add	r3, r1
 80014e0:	3b10      	subs	r3, #16
 80014e2:	4602      	mov	r2, r0
 80014e4:	701a      	strb	r2, [r3, #0]
    		for (j = 0; j < 3; j++){
 80014e6:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 80014ea:	3301      	adds	r3, #1
 80014ec:	f887 366d 	strb.w	r3, [r7, #1645]	; 0x66d
 80014f0:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	f67f af65 	bls.w	80013c4 <findShorterWay+0x168>
    	for(i = 0; i < 3; i++){
 80014fa:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 80014fe:	3301      	adds	r3, #1
 8001500:	f887 366e 	strb.w	r3, [r7, #1646]	; 0x66e
 8001504:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 8001508:	2b02      	cmp	r3, #2
 800150a:	f67f af57 	bls.w	80013bc <findShorterWay+0x160>
    	// (posicion central) como de sus aledanios, de ella se puede aplicar correctamente el algoritmo.

    	// Lo que sigue sera volver a recorrer tal matriz repitiendo las condiciones , pero esta vez leyendo directamente el contenido de
    	// Esta matriz, Se estudiaran los siguientes casos:

    	for(i = 0; i < 3; i++){
 800150e:	2300      	movs	r3, #0
 8001510:	f887 366e 	strb.w	r3, [r7, #1646]	; 0x66e
 8001514:	e265      	b.n	80019e2 <findShorterWay+0x786>
			for (j = 0; j < 3; j++){
 8001516:	2300      	movs	r3, #0
 8001518:	f887 366d 	strb.w	r3, [r7, #1645]	; 0x66d
 800151c:	e251      	b.n	80019c2 <findShorterWay+0x766>
				switch (nineSlotsMatriz[i][j]) {
 800151e:	f897 266e 	ldrb.w	r2, [r7, #1646]	; 0x66e
 8001522:	f897 166d 	ldrb.w	r1, [r7, #1645]	; 0x66d
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8001530:	f107 0208 	add.w	r2, r7, #8
 8001534:	4413      	add	r3, r2
 8001536:	440b      	add	r3, r1
 8001538:	3b10      	subs	r3, #16
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b73      	cmp	r3, #115	; 0x73
 800153e:	d075      	beq.n	800162c <findShorterWay+0x3d0>
 8001540:	2b73      	cmp	r3, #115	; 0x73
 8001542:	f300 8233 	bgt.w	80019ac <findShorterWay+0x750>
 8001546:	2b50      	cmp	r3, #80	; 0x50
 8001548:	dc66      	bgt.n	8001618 <findShorterWay+0x3bc>
 800154a:	2b23      	cmp	r3, #35	; 0x23
 800154c:	f2c0 822e 	blt.w	80019ac <findShorterWay+0x750>
 8001550:	3b23      	subs	r3, #35	; 0x23
 8001552:	2b2d      	cmp	r3, #45	; 0x2d
 8001554:	f200 822a 	bhi.w	80019ac <findShorterWay+0x750>
 8001558:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <findShorterWay+0x304>)
 800155a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155e:	bf00      	nop
 8001560:	08001621 	.word	0x08001621
 8001564:	080019ad 	.word	0x080019ad
 8001568:	080019ad 	.word	0x080019ad
 800156c:	080019ad 	.word	0x080019ad
 8001570:	080019ad 	.word	0x080019ad
 8001574:	080019ad 	.word	0x080019ad
 8001578:	080019ad 	.word	0x080019ad
 800157c:	080017a5 	.word	0x080017a5
 8001580:	080019ad 	.word	0x080019ad
 8001584:	080019ad 	.word	0x080019ad
 8001588:	080019ad 	.word	0x080019ad
 800158c:	080019ad 	.word	0x080019ad
 8001590:	080019ad 	.word	0x080019ad
 8001594:	08001629 	.word	0x08001629
 8001598:	080019ad 	.word	0x080019ad
 800159c:	080019ad 	.word	0x080019ad
 80015a0:	080019ad 	.word	0x080019ad
 80015a4:	080019ad 	.word	0x080019ad
 80015a8:	080019ad 	.word	0x080019ad
 80015ac:	080019ad 	.word	0x080019ad
 80015b0:	080019ad 	.word	0x080019ad
 80015b4:	080019ad 	.word	0x080019ad
 80015b8:	080019ad 	.word	0x080019ad
 80015bc:	080019ad 	.word	0x080019ad
 80015c0:	080019ad 	.word	0x080019ad
 80015c4:	080019ad 	.word	0x080019ad
 80015c8:	080019ad 	.word	0x080019ad
 80015cc:	080019ad 	.word	0x080019ad
 80015d0:	080019ad 	.word	0x080019ad
 80015d4:	080019ad 	.word	0x080019ad
 80015d8:	080019ad 	.word	0x080019ad
 80015dc:	080019ad 	.word	0x080019ad
 80015e0:	080019ad 	.word	0x080019ad
 80015e4:	08001625 	.word	0x08001625
 80015e8:	080019ad 	.word	0x080019ad
 80015ec:	080019ad 	.word	0x080019ad
 80015f0:	080019ad 	.word	0x080019ad
 80015f4:	080019ad 	.word	0x080019ad
 80015f8:	080019ad 	.word	0x080019ad
 80015fc:	080019ad 	.word	0x080019ad
 8001600:	080019ad 	.word	0x080019ad
 8001604:	080019ad 	.word	0x080019ad
 8001608:	080019ad 	.word	0x080019ad
 800160c:	080019ad 	.word	0x080019ad
 8001610:	08001635 	.word	0x08001635
 8001614:	08001631 	.word	0x08001631
 8001618:	2b65      	cmp	r3, #101	; 0x65
 800161a:	f000 81b0 	beq.w	800197e <findShorterWay+0x722>
 800161e:	e1c5      	b.n	80019ac <findShorterWay+0x750>
					case '#':{
						// El primer caso seria cuando el puntero Que estudia a la matriz 3x3 corresponde con un obstaculo, tal pisicion simpkemente se
						//ignora
						// No se hace nada ya que una posicion se obstaculo no se analiza
						__NOP();
 8001620:	bf00      	nop
						break;
 8001622:	e1c5      	b.n	80019b0 <findShorterWay+0x754>
					}case 'D':{
						// El segundo caso seria cuando el puntero que estudia la matriz corresponde con un punto ya cerrado o ya pasado a la lista de
						// posiciones ya analizadas, por lo que tampoco se hace nada con este caso,
						__NOP();
 8001624:	bf00      	nop
						break;
 8001626:	e1c3      	b.n	80019b0 <findShorterWay+0x754>
					}case '0':{
						// El tercer caso seria cuando el puntero que estudia la matriz corresponde con un punto 0 de tipo char que indica que
						// es una posicion por fuera del rango, por lo que tampoco se hace nada con este caso,
						__NOP();
 8001628:	bf00      	nop
						break;
 800162a:	e1c1      	b.n	80019b0 <findShorterWay+0x754>
					}case 's':{
						// El cuarto caso seria cuando el puntero señala la posicion de start por lo que tampoco se hace nada con este caso,
						__NOP();
 800162c:	bf00      	nop
						break;
 800162e:	e1bf      	b.n	80019b0 <findShorterWay+0x754>
					}case 'P':{
						// El quinto caso seria cuando el puntero señala la posicion de analisis, dentro del analisis no queremos
						// que este se analice a si mismo, por lo que ignoramos este punto, solo nos intrresan sus aledanios
						__NOP();
 8001630:	bf00      	nop
						break;
 8001632:	e1bd      	b.n	80019b0 <findShorterWay+0x754>
					}case 'O':{
						// El Sexto caso nos encontramos con un estado Open , por lo que tenemos que recalcular para el punto de
						// analisis el Gcost y el Fcost
						position[0] = i;
 8001634:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 8001638:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
						position[1] = j;
 800163c:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 8001640:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
						// Como la posicion estudiada esta en estado de open , se debe volver a calcular el G cost y el fcost correspondiente
						// a la posicion opened con respecto al punto de analisis
						ptrChanges->Fcost = setFcost(ptrChanges, position, matrixCosts);
 8001644:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8001648:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800164c:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	f8d7 0680 	ldr.w	r0, [r7, #1664]	; 0x680
 8001656:	f000 fdca 	bl	80021ee <setFcost>
 800165a:	eef0 7a40 	vmov.f32	s15, s0
 800165e:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001662:	edc3 7a01 	vstr	s15, [r3, #4]
						// Estudiamos si el nuevo FCost es mayor menor o igual al Fcost que ya tiene el estado abierto
						if (ptrChanges->Fcost >= matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[0] + j - 1][1]){
 8001666:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 800166a:	ed93 7a01 	vldr	s14, [r3, #4]
 800166e:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 8001678:	4413      	add	r3, r2
 800167a:	461a      	mov	r2, r3
 800167c:	4613      	mov	r3, r2
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	1a9b      	subs	r3, r3, r2
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	3bf0      	subs	r3, #240	; 0xf0
 8001686:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 800168a:	f2a2 6264 	subw	r2, r2, #1636	; 0x664
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	18d1      	adds	r1, r2, r3
 8001692:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 800169c:	4413      	add	r3, r2
 800169e:	1e5a      	subs	r2, r3, #1
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	440b      	add	r3, r1
 80016aa:	3304      	adds	r3, #4
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b8:	db01      	blt.n	80016be <findShorterWay+0x462>
							// Si el Fcost es mayor o igual a el anteriormente calculado, Significa que el Gcost calculado es el mismo o mayor,
							//por lo que no se actualiza ni el G cost y el F cost ni el parent
							__NOP();
 80016ba:	bf00      	nop
							// Si si actualizamos la posicion abierta respectiva, tambien se debe actualizar en la matriz de decisión el F cost
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs

						}
						break;
 80016bc:	e178      	b.n	80019b0 <findShorterWay+0x754>
							updateGcost(parameters, ptrChanges, position, matrixCosts);
 80016be:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80016c2:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 80016c6:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 80016ca:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 80016ce:	f5a1 60cd 	sub.w	r0, r1, #1640	; 0x668
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8d7 1680 	ldr.w	r1, [r7, #1664]	; 0x680
 80016d8:	6800      	ldr	r0, [r0, #0]
 80016da:	f000 fb7d 	bl	8001dd8 <updateGcost>
							updateFcost(ptrChanges, position, matrixCosts);
 80016de:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80016e2:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 80016e6:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	f8d7 0680 	ldr.w	r0, [r7, #1664]	; 0x680
 80016f0:	f000 fb9f 	bl	8001e32 <updateFcost>
							updateParent(ptrChanges, position, matrixCosts);
 80016f4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80016f8:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 80016fc:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	f8d7 0680 	ldr.w	r0, [r7, #1664]	; 0x680
 8001706:	f000 fb11 	bl	8001d2c <updateParent>
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 800170a:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 8001714:	4413      	add	r3, r2
 8001716:	461a      	mov	r2, r3
 8001718:	4613      	mov	r3, r2
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	1a9b      	subs	r3, r3, r2
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	3bf0      	subs	r3, #240	; 0xf0
 8001722:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8001726:	f2a2 6264 	subw	r2, r2, #1636	; 0x664
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	18d0      	adds	r0, r2, r3
 800172e:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 8001738:	4413      	add	r3, r2
 800173a:	1e5a      	subs	r2, r3, #1
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 800173c:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001740:	6899      	ldr	r1, [r3, #8]
 8001742:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 8001746:	440b      	add	r3, r1
 8001748:	4619      	mov	r1, r3
 800174a:	460b      	mov	r3, r1
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	1a5b      	subs	r3, r3, r1
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	3bf0      	subs	r3, #240	; 0xf0
 8001754:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 8001758:	f2a1 6164 	subw	r1, r1, #1636	; 0x664
 800175c:	6809      	ldr	r1, [r1, #0]
 800175e:	18cc      	adds	r4, r1, r3
 8001760:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001764:	68d9      	ldr	r1, [r3, #12]
 8001766:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 800176a:	440b      	add	r3, r1
 800176c:	1e59      	subs	r1, r3, #1
 800176e:	460b      	mov	r3, r1
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	440b      	add	r3, r1
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4423      	add	r3, r4
 8001778:	3314      	adds	r3, #20
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001782:	ee17 4a90 	vmov	r4, s15
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4403      	add	r3, r0
 8001790:	3304      	adds	r3, #4
 8001792:	681a      	ldr	r2, [r3, #0]
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8001794:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8001798:	f5a3 61cb 	sub.w	r1, r3, #1624	; 0x658
 800179c:	0123      	lsls	r3, r4, #4
 800179e:	440b      	add	r3, r1
 80017a0:	601a      	str	r2, [r3, #0]
						break;
 80017a2:	e105      	b.n	80019b0 <findShorterWay+0x754>
					}case '*':{
						// El séptimo caso seria cuando el puntero que estudia la matriz corresponde con un punto '*' que corresponde con un
						// espacio no estudiado, por lo que simplemente se setea sobre estos nuevos puntos su Gcost y su Fcost, incluyendo el parent
						updateGcost(parameters, ptrChanges, position, matrixCosts);
 80017a4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80017a8:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 80017ac:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 80017b0:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 80017b4:	f5a1 60cd 	sub.w	r0, r1, #1640	; 0x668
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8d7 1680 	ldr.w	r1, [r7, #1664]	; 0x680
 80017be:	6800      	ldr	r0, [r0, #0]
 80017c0:	f000 fb0a 	bl	8001dd8 <updateGcost>
						updateFcost(ptrChanges, position, matrixCosts);
 80017c4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80017c8:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 80017cc:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	f8d7 0680 	ldr.w	r0, [r7, #1664]	; 0x680
 80017d6:	f000 fb2c 	bl	8001e32 <updateFcost>
						updateParent(ptrChanges, position, matrixCosts);
 80017da:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80017de:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 80017e2:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	f8d7 0680 	ldr.w	r0, [r7, #1664]	; 0x680
 80017ec:	f000 fa9e 	bl	8001d2c <updateParent>

						// Es conveniente que guardemos tambien esta información dentro de readableGrid porque se necesita luego almacenar esta ifnromacion ya
						// estudiada
						Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1] = 'O';
 80017f0:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 80017fa:	4413      	add	r3, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	3b0a      	subs	r3, #10
 8001808:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 800180c:	f5a2 62cc 	sub.w	r2, r2, #1632	; 0x660
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	441a      	add	r2, r3
 8001814:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001818:	68d9      	ldr	r1, [r3, #12]
 800181a:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 800181e:	440b      	add	r3, r1
 8001820:	3b01      	subs	r3, #1
 8001822:	214f      	movs	r1, #79	; 0x4f
 8001824:	54d1      	strb	r1, [r2, r3]

						// Como se crearon nuevos estados abiertos , se almacena dentro de la matriz de decicion el Fcost, el H cost, y la posicion
						// de cada punto analizado
						// se almacena el Fcost
						decisionMatrix[counter][0] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1];
 8001826:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 8001830:	4413      	add	r3, r2
 8001832:	461a      	mov	r2, r3
 8001834:	4613      	mov	r3, r2
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	3bf0      	subs	r3, #240	; 0xf0
 800183e:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8001842:	f2a2 6264 	subw	r2, r2, #1636	; 0x664
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	18d1      	adds	r1, r2, r3
 800184a:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 8001854:	4413      	add	r3, r2
 8001856:	1e5a      	subs	r2, r3, #1
 8001858:	f897 066b 	ldrb.w	r0, [r7, #1643]	; 0x66b
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	3304      	adds	r3, #4
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800186e:	f5a3 61cb 	sub.w	r1, r3, #1624	; 0x658
 8001872:	0103      	lsls	r3, r0, #4
 8001874:	440b      	add	r3, r1
 8001876:	601a      	str	r2, [r3, #0]
						// Se almacena el H cost
						decisionMatrix[counter][1] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][2];
 8001878:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 8001882:	4413      	add	r3, r2
 8001884:	461a      	mov	r2, r3
 8001886:	4613      	mov	r3, r2
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	3bf0      	subs	r3, #240	; 0xf0
 8001890:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8001894:	f2a2 6264 	subw	r2, r2, #1636	; 0x664
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	18d1      	adds	r1, r2, r3
 800189c:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 80018a6:	4413      	add	r3, r2
 80018a8:	1e5a      	subs	r2, r3, #1
 80018aa:	f897 066b 	ldrb.w	r0, [r7, #1643]	; 0x66b
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	440b      	add	r3, r1
 80018b8:	3308      	adds	r3, #8
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80018c0:	f5a3 61cb 	sub.w	r1, r3, #1624	; 0x658
 80018c4:	0103      	lsls	r3, r0, #4
 80018c6:	440b      	add	r3, r1
 80018c8:	3304      	adds	r3, #4
 80018ca:	601a      	str	r2, [r3, #0]
						// Se almacena la posicion i
						decisionMatrix[counter][2] = ptrChanges->posAnalisis[0] + i - 1;
 80018cc:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 80018d6:	4413      	add	r3, r2
 80018d8:	1e5a      	subs	r2, r3, #1
 80018da:	f897 366b 	ldrb.w	r3, [r7, #1643]	; 0x66b
 80018de:	ee07 2a90 	vmov	s15, r2
 80018e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e6:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80018ea:	f5a2 62cb 	sub.w	r2, r2, #1624	; 0x658
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	4413      	add	r3, r2
 80018f2:	3308      	adds	r3, #8
 80018f4:	edc3 7a00 	vstr	s15, [r3]
						// Se almacena la posicion j
						decisionMatrix[counter][3] = ptrChanges->posAnalisis[1] + j - 1;
 80018f8:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 8001902:	4413      	add	r3, r2
 8001904:	1e5a      	subs	r2, r3, #1
 8001906:	f897 366b 	ldrb.w	r3, [r7, #1643]	; 0x66b
 800190a:	ee07 2a90 	vmov	s15, r2
 800190e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001912:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8001916:	f5a2 62cb 	sub.w	r2, r2, #1624	; 0x658
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	4413      	add	r3, r2
 800191e:	330c      	adds	r3, #12
 8001920:	edc3 7a00 	vstr	s15, [r3]

						// Guardamos en la matris grande de costos en la ultima matriz el valor del counter asignado a la posición
						matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5] = counter;
 8001924:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 800192e:	4413      	add	r3, r2
 8001930:	461a      	mov	r2, r3
 8001932:	4613      	mov	r3, r2
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	3bf0      	subs	r3, #240	; 0xf0
 800193c:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8001940:	f2a2 6264 	subw	r2, r2, #1636	; 0x664
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	18d1      	adds	r1, r2, r3
 8001948:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 8001952:	4413      	add	r3, r2
 8001954:	1e5a      	subs	r2, r3, #1
 8001956:	f897 366b 	ldrb.w	r3, [r7, #1643]	; 0x66b
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	3314      	adds	r3, #20
 800196e:	edc3 7a00 	vstr	s15, [r3]

						// Aumentamos el contador ya que cada posicion estudiada aqui es una nueva posicion que entra a estado open
						counter++;
 8001972:	f897 366b 	ldrb.w	r3, [r7, #1643]	; 0x66b
 8001976:	3301      	adds	r3, #1
 8001978:	f887 366b 	strb.w	r3, [r7, #1643]	; 0x66b

						break;
 800197c:	e018      	b.n	80019b0 <findShorterWay+0x754>
					}case 'e':{
						// El octavo caso Sería cuando se encuentra la 'e' de end , donde ya logramos despues de viajar a traves de la maya llegar
						// hasta el punto final, aqui para economizar recursos simplemente haremos que el ciclo se detenga y de parent al end le asignamos
						// el ultimo
						position[0] = i;
 800197e:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 8001982:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
						position[1] = j;
 8001986:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 800198a:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
						updateParent(ptrChanges, position, matrixCosts);
 800198e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8001992:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 8001996:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	f8d7 0680 	ldr.w	r0, [r7, #1664]	; 0x680
 80019a0:	f000 f9c4 	bl	8001d2c <updateParent>
						shorterWayFound = SET;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f887 366f 	strb.w	r3, [r7, #1647]	; 0x66f
						break;
 80019aa:	e001      	b.n	80019b0 <findShorterWay+0x754>
					}
					default:{
						// Si se llega hasta aca es porque hay un caracter no permitido dentro de la malla y se debe parar la ejecucion del programa
						return 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	e1b8      	b.n	8001d22 <findShorterWay+0xac6>
						break;
					}
				}// Termino del switch case

				if (shorterWayFound){
 80019b0:	f897 366f 	ldrb.w	r3, [r7, #1647]	; 0x66f
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10a      	bne.n	80019ce <findShorterWay+0x772>
			for (j = 0; j < 3; j++){
 80019b8:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 80019bc:	3301      	adds	r3, #1
 80019be:	f887 366d 	strb.w	r3, [r7, #1645]	; 0x66d
 80019c2:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	f67f ada9 	bls.w	800151e <findShorterWay+0x2c2>
 80019cc:	e000      	b.n	80019d0 <findShorterWay+0x774>
					break;
 80019ce:	bf00      	nop
				}

			}// Termino del ciclo for
			if (shorterWayFound){
 80019d0:	f897 366f 	ldrb.w	r3, [r7, #1647]	; 0x66f
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10a      	bne.n	80019ee <findShorterWay+0x792>
    	for(i = 0; i < 3; i++){
 80019d8:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 80019dc:	3301      	adds	r3, #1
 80019de:	f887 366e 	strb.w	r3, [r7, #1646]	; 0x66e
 80019e2:	f897 366e 	ldrb.w	r3, [r7, #1646]	; 0x66e
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	f67f ad95 	bls.w	8001516 <findShorterWay+0x2ba>
 80019ec:	e000      	b.n	80019f0 <findShorterWay+0x794>
				break;
 80019ee:	bf00      	nop
    	// el que tiene el Fcost mas pequeño, y en caso de Fcost iguales desempata el que tenga una heuristica o Hcost menor
    	// Volvemos a recorrer los aledanios para seleccionar la nueva posicion, tal posicion pasara a ser el nuevo punto de analisis, el resto
    	// seran solo puntos en estado Open, y el antiguo punto de analisis sera ahora un punto Done, Para ello usaremos la funcion findeLesserValue
    	// Esta funcion almacena dentro de la estructura costChangesAndPos_t los valores de la pisicion del F cost mas pequeño, en el caso de que haya
    	// mas de uno igual, se alzará una bandera que indica que esto ocurrio, por lo que internamente el tambien analiza cual es la heuristica
    	if (!shorterWayFound){
 80019f0:	f897 366f 	ldrb.w	r3, [r7, #1647]	; 0x66f
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f040 8085 	bne.w	8001b04 <findShorterWay+0x8a8>
			if (findLesserValue(ptrChanges, matrixCosts, decisionMatrix, counter + 1)){
 80019fa:	f897 366b 	ldrb.w	r3, [r7, #1643]	; 0x66b
 80019fe:	3301      	adds	r3, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f107 0218 	add.w	r2, r7, #24
 8001a06:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 8001a0a:	f2a1 6164 	subw	r1, r1, #1636	; 0x664
 8001a0e:	6809      	ldr	r1, [r1, #0]
 8001a10:	f8d7 0680 	ldr.w	r0, [r7, #1664]	; 0x680
 8001a14:	f000 fd70 	bl	80024f8 <findLesserValue>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d070      	beq.n	8001b00 <findShorterWay+0x8a4>
				// A partir de aqui tendriamos la posicion del F cost mas pequeño, pero primero se compueba de que si depronto hubo un F cost igual
				if (ptrChanges->equalFcost){
 8001a1e:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 80ca 	beq.w	8001bc0 <findShorterWay+0x964>
					// Si estamos aqui es porque si hubo mas de un Fcost igual , por lo que se busca es la posicion del Hcost mas pequeño como la nueva posicion
					// que tomara el nuevo papel de punto de analisis, y el que fue el punto de analisis sera ahor aun estado Done o 'D'
					// Llevamos la posicion de analisis al estado cerrado
					ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8001a2c:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001a36:	619a      	str	r2, [r3, #24]
					ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8001a38:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001a42:	61da      	str	r2, [r3, #28]

					// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
					if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8001a44:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	461a      	mov	r2, r3
 8001a56:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8001a5a:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	441a      	add	r2, r3
 8001a62:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	5cd3      	ldrb	r3, [r2, r3]
 8001a6a:	2b73      	cmp	r3, #115	; 0x73
 8001a6c:	d101      	bne.n	8001a72 <findShorterWay+0x816>
						// Dejamos el char de start tal cual como esta
						__NOP();
 8001a6e:	bf00      	nop
 8001a70:	e013      	b.n	8001a9a <findShorterWay+0x83e>
					}else{
						// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
						Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8001a72:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	461a      	mov	r2, r3
 8001a84:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8001a88:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	441a      	add	r2, r3
 8001a90:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2144      	movs	r1, #68	; 0x44
 8001a98:	54d1      	strb	r1, [r2, r3]
					}

					//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
					// respectiva que contiene la caracteristica deseada
					ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserHcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8001a9a:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa0:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8001aa4:	f5a2 62cb 	sub.w	r2, r2, #1624	; 0x658
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	4413      	add	r3, r2
 8001aac:	3308      	adds	r3, #8
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab6:	ee17 2a90 	vmov	r2, s15
 8001aba:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001abe:	609a      	str	r2, [r3, #8]
					ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserHcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8001ac0:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac6:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8001aca:	f5a2 62cb 	sub.w	r2, r2, #1624	; 0x658
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	4413      	add	r3, r2
 8001ad2:	330c      	adds	r3, #12
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001adc:	ee17 2a90 	vmov	r2, s15
 8001ae0:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001ae4:	60da      	str	r2, [r3, #12]

					//Colocamos en estado de open el nuevo estado a estudiar
					ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8001ae6:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001af0:	611a      	str	r2, [r3, #16]
					ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8001af2:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001afc:	615a      	str	r2, [r3, #20]
 8001afe:	e05f      	b.n	8001bc0 <findShorterWay+0x964>

				}

			}else{
				return 0; // Si llegamos aca es porque hubo un error al encontrar el valor pas pequeño dentro de la matriz de decision, por lo que el
 8001b00:	2300      	movs	r3, #0
 8001b02:	e10e      	b.n	8001d22 <findShorterWay+0xac6>
    	}else{
			// Si el programa entra en esta condicion quiere decir que ya se encontro la ruta mas corta y ya es hora de construir la matriz de posiciones
			// donde se almacenara la ruta mas corta
			//buscamos cuantos elementos deberia de tener el arreglo para ello usaremos el siguiente while donde recorreremos desde el end hasta el
			//start
			i = ptrChanges->endPos[0];
 8001b04:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	f887 366e 	strb.w	r3, [r7, #1646]	; 0x66e
			j = ptrChanges->endPos[1];
 8001b0e:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	f887 366d 	strb.w	r3, [r7, #1645]	; 0x66d
			while(Gridcopy[i][j] != 's'){
 8001b18:	e040      	b.n	8001b9c <findShorterWay+0x940>
				// Actualizamos a la nueva posición
				i = matrixCosts[i][j][3];
 8001b1a:	f897 266e 	ldrb.w	r2, [r7, #1646]	; 0x66e
 8001b1e:	4613      	mov	r3, r2
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	461a      	mov	r2, r3
 8001b28:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8001b2c:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	1899      	adds	r1, r3, r2
 8001b34:	f897 266d 	ldrb.w	r2, [r7, #1645]	; 0x66d
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	440b      	add	r3, r1
 8001b42:	330c      	adds	r3, #12
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b4c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b50:	793b      	ldrb	r3, [r7, #4]
 8001b52:	f887 366e 	strb.w	r3, [r7, #1646]	; 0x66e
				j = matrixCosts[i][j][4];
 8001b56:	f897 266e 	ldrb.w	r2, [r7, #1646]	; 0x66e
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	1a9b      	subs	r3, r3, r2
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	461a      	mov	r2, r3
 8001b64:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8001b68:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	1899      	adds	r1, r3, r2
 8001b70:	f897 266d 	ldrb.w	r2, [r7, #1645]	; 0x66d
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	440b      	add	r3, r1
 8001b7e:	3310      	adds	r3, #16
 8001b80:	edd3 7a00 	vldr	s15, [r3]
 8001b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b88:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b8c:	793b      	ldrb	r3, [r7, #4]
 8001b8e:	f887 366d 	strb.w	r3, [r7, #1645]	; 0x66d
				// incrementamos en uno la cantidad de posiciones a guardar
				numberOfPositions++;
 8001b92:	f897 366c 	ldrb.w	r3, [r7, #1644]	; 0x66c
 8001b96:	3301      	adds	r3, #1
 8001b98:	f887 366c 	strb.w	r3, [r7, #1644]	; 0x66c
			while(Gridcopy[i][j] != 's'){
 8001b9c:	f897 266e 	ldrb.w	r2, [r7, #1646]	; 0x66e
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8001bae:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	441a      	add	r2, r3
 8001bb6:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 8001bba:	5cd3      	ldrb	r3, [r2, r3]
 8001bbc:	2b73      	cmp	r3, #115	; 0x73
 8001bbe:	d1ac      	bne.n	8001b1a <findShorterWay+0x8be>
    while(!shorterWayFound){
 8001bc0:	f897 366f 	ldrb.w	r3, [r7, #1647]	; 0x66f
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f43f abe9 	beq.w	800139c <findShorterWay+0x140>

    // estando aqui ya solo queda almacenar toda las posiciones parent comenzando desde el end hasta el start, siguendo el parent de cada uno se asegura
    // que lo que se esta almacenando es la ruta mas corta

    //Almacenamos dentro de una de las variables del arreglo AStar_distancesHandler la cantidad de elementos que tiene la matriz de la ruta mas corta
    parameters->numberOfElements = numberOfPositions + 1 ; // Le sumamos uno mas para incluir el punto de inicio
 8001bca:	f897 366c 	ldrb.w	r3, [r7, #1644]	; 0x66c
 8001bce:	3301      	adds	r3, #1
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8001bd6:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	729a      	strb	r2, [r3, #10]


    i = ptrChanges->endPos[0];
 8001bde:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	f887 366e 	strb.w	r3, [r7, #1646]	; 0x66e
	j = ptrChanges->endPos[1];
 8001be8:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f887 366d 	strb.w	r3, [r7, #1645]	; 0x66d

    // Recorremos la matriz e iremos almacenando dentro de este comenzando desde la posicion final y terminando en la posicion inicial
    for (uint8_t  k = 0 ; k < numberOfPositions + 1 ; k++){
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 366a 	strb.w	r3, [r7, #1642]	; 0x66a
 8001bf8:	e08b      	b.n	8001d12 <findShorterWay+0xab6>
    	//Cambiamos la matriz redeableGrid, las posiciones que corresponden a la ruta mas corta por un char 'I',
    	if (Gridcopy[i][j] == 'e'){
 8001bfa:	f897 266e 	ldrb.w	r2, [r7, #1646]	; 0x66e
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	461a      	mov	r2, r3
 8001c08:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8001c0c:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	441a      	add	r2, r3
 8001c14:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 8001c18:	5cd3      	ldrb	r3, [r2, r3]
 8001c1a:	2b65      	cmp	r3, #101	; 0x65
 8001c1c:	d101      	bne.n	8001c22 <findShorterWay+0x9c6>
    		// Si estamos aqui es porque no queremos cambiar el char de finalización
    		__NOP();
 8001c1e:	bf00      	nop
 8001c20:	e024      	b.n	8001c6c <findShorterWay+0xa10>
    	}else if (Gridcopy[i][j] == 's'){
 8001c22:	f897 266e 	ldrb.w	r2, [r7, #1646]	; 0x66e
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8001c34:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	441a      	add	r2, r3
 8001c3c:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 8001c40:	5cd3      	ldrb	r3, [r2, r3]
 8001c42:	2b73      	cmp	r3, #115	; 0x73
 8001c44:	d101      	bne.n	8001c4a <findShorterWay+0x9ee>
    		// Si estamos aqui es porque no queremos cambiar el char de inicio
    		__NOP();
 8001c46:	bf00      	nop
 8001c48:	e010      	b.n	8001c6c <findShorterWay+0xa10>
    	}else{
    		// Si estamos aqui es porque estamos dentro del camino a seguir, por lo cambiamos a una 'I'
    		Gridcopy[i][j] = 'I';
 8001c4a:	f897 266e 	ldrb.w	r2, [r7, #1646]	; 0x66e
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	461a      	mov	r2, r3
 8001c58:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8001c5c:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	441a      	add	r2, r3
 8001c64:	f897 366d 	ldrb.w	r3, [r7, #1645]	; 0x66d
 8001c68:	2149      	movs	r1, #73	; 0x49
 8001c6a:	54d1      	strb	r1, [r2, r3]
    	}


    	// Almacenamos en la matriz de ruta mas corta
		shorterWay[k][0] = i;
 8001c6c:	f897 366a 	ldrb.w	r3, [r7, #1642]	; 0x66a
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	f8d7 2684 	ldr.w	r2, [r7, #1668]	; 0x684
 8001c76:	4413      	add	r3, r2
 8001c78:	f897 266e 	ldrb.w	r2, [r7, #1646]	; 0x66e
 8001c7c:	601a      	str	r2, [r3, #0]
		shorterWay[k][1] = j;
 8001c7e:	f897 366a 	ldrb.w	r3, [r7, #1642]	; 0x66a
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	f8d7 2684 	ldr.w	r2, [r7, #1668]	; 0x684
 8001c88:	4413      	add	r3, r2
 8001c8a:	f897 266d 	ldrb.w	r2, [r7, #1645]	; 0x66d
 8001c8e:	605a      	str	r2, [r3, #4]

    	// comenzamos almacenando las posiciones en orden desde el final al punto inicial
		// Actualizamos a la nueva posición
		i = matrixCosts[i][j][3];
 8001c90:	f897 266e 	ldrb.w	r2, [r7, #1646]	; 0x66e
 8001c94:	4613      	mov	r3, r2
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8001ca2:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	1899      	adds	r1, r3, r2
 8001caa:	f897 266d 	ldrb.w	r2, [r7, #1645]	; 0x66d
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	330c      	adds	r3, #12
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cc2:	edc7 7a01 	vstr	s15, [r7, #4]
 8001cc6:	793b      	ldrb	r3, [r7, #4]
 8001cc8:	f887 366e 	strb.w	r3, [r7, #1646]	; 0x66e
		j = matrixCosts[i][j][4];
 8001ccc:	f897 266e 	ldrb.w	r2, [r7, #1646]	; 0x66e
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	1a9b      	subs	r3, r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	461a      	mov	r2, r3
 8001cda:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8001cde:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	1899      	adds	r1, r3, r2
 8001ce6:	f897 266d 	ldrb.w	r2, [r7, #1645]	; 0x66d
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3310      	adds	r3, #16
 8001cf6:	edd3 7a00 	vldr	s15, [r3]
 8001cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cfe:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d02:	793b      	ldrb	r3, [r7, #4]
 8001d04:	f887 366d 	strb.w	r3, [r7, #1645]	; 0x66d
    for (uint8_t  k = 0 ; k < numberOfPositions + 1 ; k++){
 8001d08:	f897 366a 	ldrb.w	r3, [r7, #1642]	; 0x66a
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	f887 366a 	strb.w	r3, [r7, #1642]	; 0x66a
 8001d12:	f897 266c 	ldrb.w	r2, [r7, #1644]	; 0x66c
 8001d16:	f897 366a 	ldrb.w	r3, [r7, #1642]	; 0x66a
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	f4bf af6d 	bcs.w	8001bfa <findShorterWay+0x99e>
    // A partir de aqui habremos logrado despues de un largo camino hallar la ruta mas corta entre dos puntos , el robot ya con esa informacion
    // sabra hacia donde moverse y cuanto moverse

    // Si llegamos hasta aca, con exito hemos logrado todo lo cometido, ¡Felicidades!

    return 1;
 8001d20:	2301      	movs	r3, #1


}
 8001d22:	4618      	mov	r0, r3
 8001d24:	f207 6774 	addw	r7, r7, #1652	; 0x674
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd90      	pop	{r4, r7, pc}

08001d2c <updateParent>:

// esta funcion actuazliza en la matriz de costs el parent correspondiente
void updateParent(costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[10][10][6]){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
	setParents(ptrChanges, posIJ);
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 faa4 	bl	8002288 <setParents>

	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][3] = ptrChanges->parent[0]; //Posicion i del parent
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d46:	b2d8      	uxtb	r0, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	461a      	mov	r2, r3
 8001d54:	4613      	mov	r3, r2
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	1a9b      	subs	r3, r3, r2
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	3bf0      	subs	r3, #240	; 0xf0
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	18d1      	adds	r1, r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	1e5a      	subs	r2, r3, #1
 8001d70:	ee07 0a90 	vmov	s15, r0
 8001d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	440b      	add	r3, r1
 8001d82:	330c      	adds	r3, #12
 8001d84:	edc3 7a00 	vstr	s15, [r3]
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][4] = ptrChanges->parent[1]; //Posicion j del parent
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d8e:	b2d8      	uxtb	r0, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4413      	add	r3, r2
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	1a9b      	subs	r3, r3, r2
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	3bf0      	subs	r3, #240	; 0xf0
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	18d1      	adds	r1, r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3304      	adds	r3, #4
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4413      	add	r3, r2
 8001db6:	1e5a      	subs	r2, r3, #1
 8001db8:	ee07 0a90 	vmov	s15, r0
 8001dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	3310      	adds	r3, #16
 8001dcc:	edc3 7a00 	vstr	s15, [r3]

}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <updateGcost>:

// esta funcion actualiz el Gcost correspondiente
void updateGcost(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[10][10][6] ){
 8001dd8:	b5b0      	push	{r4, r5, r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][0] = setGcost(parameters, ptrChanges, posIJ);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	4613      	mov	r3, r2
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	3bf0      	subs	r3, #240	; 0xf0
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	18d5      	adds	r5, r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3304      	adds	r3, #4
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	1e5c      	subs	r4, r3, #1
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 f904 	bl	8002020 <setGcost>
 8001e18:	eef0 7a40 	vmov.f32	s15, s0
 8001e1c:	4623      	mov	r3, r4
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4423      	add	r3, r4
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	442b      	add	r3, r5
 8001e26:	edc3 7a00 	vstr	s15, [r3]
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bdb0      	pop	{r4, r5, r7, pc}

08001e32 <updateFcost>:

// Esta función actualiza el Fcost correspondiente
void updateFcost(costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[10][10][6] ){
 8001e32:	b5b0      	push	{r4, r5, r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][1] = setFcost(ptrChanges, posIJ, matrixCosts);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	3bf0      	subs	r3, #240	; 0xf0
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	18d5      	adds	r5, r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	3304      	adds	r3, #4
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	1e5c      	subs	r4, r3, #1
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f9bf 	bl	80021ee <setFcost>
 8001e70:	eef0 7a40 	vmov.f32	s15, s0
 8001e74:	4623      	mov	r3, r4
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4423      	add	r3, r4
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	442b      	add	r3, r5
 8001e7e:	3304      	adds	r3, #4
 8001e80:	edc3 7a00 	vstr	s15, [r3]

}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bdb0      	pop	{r4, r5, r7, pc}

08001e8c <setHeuristic>:

// con esta funcion seteamos la matriz Heuristica con la cual usaremos la info para buscar la ruta mas corta
int setHeuristic(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, float matrixCosts[10][10][6] , char Gridcopy[10][10]){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]

	// definimos variables locales
	int distRows     = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
	int distanceToGo = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
	//sicion de cada fila y columna el valor de la heuristica dependiendo de donde este el punto de termino o End point

	// Comenzamos entonces recorriendo cada posicion del terccer bloque matricial de ***costs
	// recorremos las filas
	// Almacenamos la posicion final
	if(findEnd(Gridcopy, parameters, ptrChanges)){
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	68f9      	ldr	r1, [r7, #12]
 8001eaa:	6838      	ldr	r0, [r7, #0]
 8001eac:	f000 fa53 	bl	8002356 <findEnd>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <setHeuristic+0x32>
		// Se encontro la posicion final, y continua con el programa
		__NOP();
 8001eb6:	bf00      	nop
	}

	// A partir de aqui ya se tiene la posicion del punto final y ya se puede entonces calcular la heuristica
	// partiendo siempre de que el robot puede ir en diagonal y luego en linea recta , siempre buscando la ruta mas eficiente

	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8001eb8:	2300      	movs	r3, #0
 8001eba:	77fb      	strb	r3, [r7, #31]
 8001ebc:	e0a5      	b.n	800200a <setHeuristic+0x17e>
		return RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e0aa      	b.n	8002018 <setHeuristic+0x18c>
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	77bb      	strb	r3, [r7, #30]
 8001ec6:	e097      	b.n	8001ff8 <setHeuristic+0x16c>
			// para cada posicion i,j, se mira i-iend y j-jend, y se evalua cual de los dos es menor y luego
			// De los dos que sea mas pequeño, el robot tendra que ir diagonal hasta encontrarse con la fila o la columna
			// maas cercana a la fila o la columna del punto final, y ya luego sumarle la distancia paralela que falta para llegar al punto end
			distRows    = abs(i-ptrChanges->endPos[0]);
 8001ec8:	7ffa      	ldrb	r2, [r7, #31]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bfb8      	it	lt
 8001ed4:	425b      	neglt	r3, r3
 8001ed6:	61bb      	str	r3, [r7, #24]
			distColumns = abs(j-ptrChanges->endPos[1]);
 8001ed8:	7fba      	ldrb	r2, [r7, #30]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bfb8      	it	lt
 8001ee4:	425b      	neglt	r3, r3
 8001ee6:	617b      	str	r3, [r7, #20]
			if (distRows <= distColumns){
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dc40      	bgt.n	8001f72 <setHeuristic+0xe6>
				// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
				// que de la columna del end, por lo que se debe ir diagonal
				distanceToGo = parameters->diagonalDiastance * distRows;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f08:	ee17 3a90 	vmov	r3, s15
 8001f0c:	613b      	str	r3, [r7, #16]
				// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
				// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
				// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	ee07 3a90 	vmov	s15, r3
 8001f14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	edd3 6a00 	vldr	s13, [r3]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bfb8      	it	lt
 8001f28:	425b      	neglt	r3, r3
 8001f2a:	ee07 3a90 	vmov	s15, r3
 8001f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f3e:	ee17 3a90 	vmov	r3, s15
 8001f42:	613b      	str	r3, [r7, #16]
				//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la sumer matriz
				// de costos
				matrixCosts[i][j][2] = distanceToGo;
 8001f44:	7ffa      	ldrb	r2, [r7, #31]
 8001f46:	4613      	mov	r3, r2
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	461a      	mov	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	1899      	adds	r1, r3, r2
 8001f54:	7fba      	ldrb	r2, [r7, #30]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	3308      	adds	r3, #8
 8001f6c:	edc3 7a00 	vstr	s15, [r3]
 8001f70:	e03f      	b.n	8001ff2 <setHeuristic+0x166>
			}else{
				// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
				// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
				distanceToGo = parameters->diagonalDiastance * distColumns;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f8a:	ee17 3a90 	vmov	r3, s15
 8001f8e:	613b      	str	r3, [r7, #16]
				// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
				// distRows y distColumns
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	edd3 6a00 	vldr	s13, [r3]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bfb8      	it	lt
 8001faa:	425b      	neglt	r3, r3
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fc0:	ee17 3a90 	vmov	r3, s15
 8001fc4:	613b      	str	r3, [r7, #16]
				matrixCosts[i][j][2] = distanceToGo;
 8001fc6:	7ffa      	ldrb	r2, [r7, #31]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	1899      	adds	r1, r3, r2
 8001fd6:	7fba      	ldrb	r2, [r7, #30]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	440b      	add	r3, r1
 8001fec:	3308      	adds	r3, #8
 8001fee:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 8001ff2:	7fbb      	ldrb	r3, [r7, #30]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	77bb      	strb	r3, [r7, #30]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	7a5b      	ldrb	r3, [r3, #9]
 8001ffc:	7fba      	ldrb	r2, [r7, #30]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	f4ff af62 	bcc.w	8001ec8 <setHeuristic+0x3c>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8002004:	7ffb      	ldrb	r3, [r7, #31]
 8002006:	3301      	adds	r3, #1
 8002008:	77fb      	strb	r3, [r7, #31]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	7a1b      	ldrb	r3, [r3, #8]
 800200e:	7ffa      	ldrb	r2, [r7, #31]
 8002010:	429a      	cmp	r2, r3
 8002012:	f4ff af56 	bcc.w	8001ec2 <setHeuristic+0x36>
		}

	}

	// Terminado TODO el recorrido se puede salir de la funcion y decir que todo fue correcto
	return SET;
 8002016:	2301      	movs	r3, #1

}
 8002018:	4618      	mov	r0, r3
 800201a:	3720      	adds	r7, #32
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <setGcost>:

//Con esta funcion se halla el Gcost teniendo en cuenta la posicion de analisis
float setGcost (AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2]){
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
	// definimos variables locales
	int distRows     = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
	float distanceToGo = 0;
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]

	// Luego calculamos el Gcost partiendo de que se tiene que pasar siempre por la posicion de analisis
	// Se analiza cual es la distancia que hay entre el punto de analisis y el punto de start
	distRows    = abs(ptrChanges->posAnalisis[0] -ptrChanges->startPos[0]);
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	bfb8      	it	lt
 8002048:	425b      	neglt	r3, r3
 800204a:	61bb      	str	r3, [r7, #24]
	distColumns = abs(ptrChanges->posAnalisis[1]-ptrChanges->startPos[1]);
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	bfb8      	it	lt
 800205a:	425b      	neglt	r3, r3
 800205c:	617b      	str	r3, [r7, #20]

	if ((ptrChanges->posAnalisis[0] + posIJ[0] -1) != ptrChanges->posAnalisis[0]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4413      	add	r3, r2
 8002068:	1e5a      	subs	r2, r3, #1
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	429a      	cmp	r2, r3
 8002070:	d10a      	bne.n	8002088 <setGcost+0x68>
	 || (ptrChanges->posAnalisis[1] + posIJ[1] -1) != ptrChanges->posAnalisis[1]){
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3304      	adds	r3, #4
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4413      	add	r3, r2
 800207e:	1e5a      	subs	r2, r3, #1
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	429a      	cmp	r2, r3
 8002086:	d052      	beq.n	800212e <setGcost+0x10e>
		// Si estamos aqui es porque estamos en una de las 4 esquinas aledanias, por lo que la distancia a la columna o la fila
		// mas cercana a el punto de analisis es 1, se tendra que ir diagonalmente
		distanceToGo = parameters->diagonalDiastance;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	61fb      	str	r3, [r7, #28]

		// Luego se calcula la distancia que resta aplicando el mismo algoritmo de la heuristica
		//pero esta vez para el punto de analisis hasta el punto de inicio

		if (distRows <= distColumns){
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	429a      	cmp	r2, r3
 8002094:	dc25      	bgt.n	80020e2 <setGcost+0xc2>
			// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
			// que de la columna del end, por lo que se debe ir diagonal
			distanceToGo += parameters->diagonalDiastance * distRows;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	ed93 7a01 	vldr	s14, [r3, #4]
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80020ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b2:	edc7 7a07 	vstr	s15, [r7, #28]
			// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
			// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
			// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	ed93 7a00 	vldr	s14, [r3]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bfb8      	it	lt
 80020c6:	425b      	neglt	r3, r3
 80020c8:	ee07 3a90 	vmov	s15, r3
 80020cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80020d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020dc:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 80020e0:	e077      	b.n	80021d2 <setGcost+0x1b2>
		}else{
			// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
			// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
			distanceToGo += parameters->diagonalDiastance * distColumns;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80020fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fe:	edc7 7a07 	vstr	s15, [r7, #28]
			// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
			// distRows y distColumns
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	ed93 7a00 	vldr	s14, [r3]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	bfb8      	it	lt
 8002112:	425b      	neglt	r3, r3
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800211c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002120:	ed97 7a07 	vldr	s14, [r7, #28]
 8002124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002128:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 800212c:	e051      	b.n	80021d2 <setGcost+0x1b2>

	}else {
		// Si estamos aqui es porque estamos en una de las cuatro aristas, donde tanto el puntero como la posicion real del punto de analisis
		// coinciden en fila o en columna, la unica diferencia aqui es que se calcula paralelamente al punto de analisis y a partir de ahi
		// se aplica el algoritmo de la heuristica
		distanceToGo = parameters->parallelDistance;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	61fb      	str	r3, [r7, #28]

		if (distRows <= distColumns){
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	429a      	cmp	r2, r3
 800213a:	dc25      	bgt.n	8002188 <setGcost+0x168>
			distanceToGo += parameters->diagonalDiastance * distRows;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	ee07 3a90 	vmov	s15, r3
 8002148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800214c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002150:	ed97 7a07 	vldr	s14, [r7, #28]
 8002154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002158:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	ed93 7a00 	vldr	s14, [r3]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	bfb8      	it	lt
 800216c:	425b      	neglt	r3, r3
 800216e:	ee07 3a90 	vmov	s15, r3
 8002172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217a:	ed97 7a07 	vldr	s14, [r7, #28]
 800217e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002182:	edc7 7a07 	vstr	s15, [r7, #28]
 8002186:	e024      	b.n	80021d2 <setGcost+0x1b2>
		}else{
			distanceToGo += parameters->diagonalDiastance * distColumns;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	ed93 7a01 	vldr	s14, [r3, #4]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	ee07 3a90 	vmov	s15, r3
 8002194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219c:	ed97 7a07 	vldr	s14, [r7, #28]
 80021a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a4:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	ed93 7a00 	vldr	s14, [r3]
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bfb8      	it	lt
 80021b8:	425b      	neglt	r3, r3
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80021ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ce:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}
	ptrChanges->Gcost = distanceToGo;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	601a      	str	r2, [r3, #0]

	return ptrChanges->Gcost;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	ee07 3a90 	vmov	s15, r3
}
 80021e0:	eeb0 0a67 	vmov.f32	s0, s15
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <setFcost>:

// Con esta funcion seteamos el F cost en la matriz 2 de la posicion correspondiente
float setFcost (costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[10][10][6]){
 80021ee:	b480      	push	{r7}
 80021f0:	b085      	sub	sp, #20
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]

	// Esta funcion es simple ya que solo tenemos que calcular de la matriz 3x3 de analisis y sumar el H cost y el G cost para tener el F cost
	ptrChanges->Fcost = matrixCosts[ptrChanges->posAnalisis[0]+ posIJ[0] -1][ptrChanges->posAnalisis[1]+ posIJ[1] -1][0]  // Gcost
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	461a      	mov	r2, r3
 8002206:	4613      	mov	r3, r2
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	3bf0      	subs	r3, #240	; 0xf0
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	18d1      	adds	r1, r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	3304      	adds	r3, #4
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4413      	add	r3, r2
 8002220:	1e5a      	subs	r2, r3, #1
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	440b      	add	r3, r1
 800222c:	ed93 7a00 	vldr	s14, [r3]
			          + matrixCosts[ptrChanges->posAnalisis[0]+ posIJ[0] -1][ptrChanges->posAnalisis[1]+ posIJ[1] -1][2]; // Hcost
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4413      	add	r3, r2
 800223a:	461a      	mov	r2, r3
 800223c:	4613      	mov	r3, r2
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	3bf0      	subs	r3, #240	; 0xf0
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	18d1      	adds	r1, r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	3304      	adds	r3, #4
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4413      	add	r3, r2
 8002256:	1e5a      	subs	r2, r3, #1
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	3308      	adds	r3, #8
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	ee77 7a27 	vadd.f32	s15, s14, s15
	ptrChanges->Fcost = matrixCosts[ptrChanges->posAnalisis[0]+ posIJ[0] -1][ptrChanges->posAnalisis[1]+ posIJ[1] -1][0]  // Gcost
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	edc3 7a01 	vstr	s15, [r3, #4]

	return ptrChanges->Fcost;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	ee07 3a90 	vmov	s15, r3

}
 800227a:	eeb0 0a67 	vmov.f32	s0, s15
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <setParents>:

// Con esta funcion seteamos la posicion del parent de los aledanios,
void setParents (costChangesAndPos_t *ptrChanges, int posIJ[2]){
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
	// esta funcion es simple, ya que solo tenemos que setear de la matriz 3x3 de analisis y colocar en la posicion 4 y 5 el indice i y j correspondiente
	// al parent de cada punto aledanio, exceptuando el punto de analisis ya que ese tiene un parent propio

	if ((ptrChanges->posAnalisis[0] + posIJ[0] - 1) == ptrChanges->posAnalisis[0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4413      	add	r3, r2
 800229c:	1e5a      	subs	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d10c      	bne.n	80022c0 <setParents+0x38>
	&&  (ptrChanges->posAnalisis[1] + posIJ[1] - 1) == ptrChanges->posAnalisis[1] ){
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	3304      	adds	r3, #4
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	1e5a      	subs	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d101      	bne.n	80022c0 <setParents+0x38>
		// Aqui no hacemos nada porque significa que estamos sobre el punto de analisis, y no queremos cambiarle el parent a este
		__NOP();
 80022bc:	bf00      	nop
 80022be:	e00c      	b.n	80022da <setParents+0x52>
	}else{
		// Si estamos aqui es porque estamos en alguno de los puntos aledanios
		ptrChanges->parent[0] = ptrChanges->posAnalisis[0];
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f883 2020 	strb.w	r2, [r3, #32]
		ptrChanges->parent[1] = ptrChanges->posAnalisis[1];
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <findStart>:

// En esta funcion nos centraremos en buscar la posicion i,j donde se almacena el punto de inicio del robot
int findStart(char Gridcopy[10][10], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 80022e6:	b480      	push	{r7}
 80022e8:	b087      	sub	sp, #28
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]

	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 's' de start
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 80022f2:	2300      	movs	r3, #0
 80022f4:	75fb      	strb	r3, [r7, #23]
 80022f6:	e022      	b.n	800233e <findStart+0x58>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 80022f8:	2300      	movs	r3, #0
 80022fa:	75bb      	strb	r3, [r7, #22]
 80022fc:	e017      	b.n	800232e <findStart+0x48>
			if (Gridcopy[i][j] == 's'){
 80022fe:	7dfa      	ldrb	r2, [r7, #23]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	461a      	mov	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	441a      	add	r2, r3
 800230e:	7dbb      	ldrb	r3, [r7, #22]
 8002310:	5cd3      	ldrb	r3, [r2, r3]
 8002312:	2b73      	cmp	r3, #115	; 0x73
 8002314:	d107      	bne.n	8002326 <findStart+0x40>
				ptrChanges->startPos[0] = i;
 8002316:	7dfa      	ldrb	r2, [r7, #23]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24
				ptrChanges->startPos[1] = j;
 800231c:	7dba      	ldrb	r2, [r7, #22]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	629a      	str	r2, [r3, #40]	; 0x28
				return SET;
 8002322:	2301      	movs	r3, #1
 8002324:	e011      	b.n	800234a <findStart+0x64>
			}else{
				__NOP();
 8002326:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8002328:	7dbb      	ldrb	r3, [r7, #22]
 800232a:	3301      	adds	r3, #1
 800232c:	75bb      	strb	r3, [r7, #22]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	7a5b      	ldrb	r3, [r3, #9]
 8002332:	7dba      	ldrb	r2, [r7, #22]
 8002334:	429a      	cmp	r2, r3
 8002336:	d3e2      	bcc.n	80022fe <findStart+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8002338:	7dfb      	ldrb	r3, [r7, #23]
 800233a:	3301      	adds	r3, #1
 800233c:	75fb      	strb	r3, [r7, #23]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	7a1b      	ldrb	r3, [r3, #8]
 8002342:	7dfa      	ldrb	r2, [r7, #23]
 8002344:	429a      	cmp	r2, r3
 8002346:	d3d7      	bcc.n	80022f8 <findStart+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 8002348:	2300      	movs	r3, #0



}
 800234a:	4618      	mov	r0, r3
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <findEnd>:
int findEnd(char Gridcopy[10][10], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 8002356:	b480      	push	{r7}
 8002358:	b087      	sub	sp, #28
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]


	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 'e' de end
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8002362:	2300      	movs	r3, #0
 8002364:	75fb      	strb	r3, [r7, #23]
 8002366:	e022      	b.n	80023ae <findEnd+0x58>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8002368:	2300      	movs	r3, #0
 800236a:	75bb      	strb	r3, [r7, #22]
 800236c:	e017      	b.n	800239e <findEnd+0x48>
			if (Gridcopy[i][j] == 'e'){
 800236e:	7dfa      	ldrb	r2, [r7, #23]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	461a      	mov	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	441a      	add	r2, r3
 800237e:	7dbb      	ldrb	r3, [r7, #22]
 8002380:	5cd3      	ldrb	r3, [r2, r3]
 8002382:	2b65      	cmp	r3, #101	; 0x65
 8002384:	d107      	bne.n	8002396 <findEnd+0x40>
				ptrChanges->endPos[0] = i;
 8002386:	7dfa      	ldrb	r2, [r7, #23]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	62da      	str	r2, [r3, #44]	; 0x2c
				ptrChanges->endPos[1] = j;
 800238c:	7dba      	ldrb	r2, [r7, #22]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	631a      	str	r2, [r3, #48]	; 0x30
				return SET;
 8002392:	2301      	movs	r3, #1
 8002394:	e011      	b.n	80023ba <findEnd+0x64>
			}else{
				__NOP();
 8002396:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8002398:	7dbb      	ldrb	r3, [r7, #22]
 800239a:	3301      	adds	r3, #1
 800239c:	75bb      	strb	r3, [r7, #22]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	7a5b      	ldrb	r3, [r3, #9]
 80023a2:	7dba      	ldrb	r2, [r7, #22]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d3e2      	bcc.n	800236e <findEnd+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	3301      	adds	r3, #1
 80023ac:	75fb      	strb	r3, [r7, #23]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	7a1b      	ldrb	r3, [r3, #8]
 80023b2:	7dfa      	ldrb	r2, [r7, #23]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d3d7      	bcc.n	8002368 <findEnd+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 80023b8:	2300      	movs	r3, #0

}
 80023ba:	4618      	mov	r0, r3
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <buildMatrixCopy>:
//
//}

//Con esta funcion se reparte la memoria para la matriz de entrada desde la terminal serial

void buildMatrixCopy(AStar_distancesHandler *parameters, char terminalGrid[10][10], char Gridcopy[10][10]){
 80023c6:	b480      	push	{r7}
 80023c8:	b087      	sub	sp, #28
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]


	// Seteamos los valores dentro de la matriz infoGrid de la entrada respectiva
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 80023d2:	2300      	movs	r3, #0
 80023d4:	75fb      	strb	r3, [r7, #23]
 80023d6:	e045      	b.n	8002464 <buildMatrixCopy+0x9e>
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 80023d8:	2300      	movs	r3, #0
 80023da:	75bb      	strb	r3, [r7, #22]
 80023dc:	e039      	b.n	8002452 <buildMatrixCopy+0x8c>

			if (j == parameters->numberOfColumns){
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	7a5b      	ldrb	r3, [r3, #9]
 80023e2:	7dba      	ldrb	r2, [r7, #22]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d10b      	bne.n	8002400 <buildMatrixCopy+0x3a>
				// Agregamos al a la posicion penultima, agregamos una terminacion de salto de linea para ipresion en consola
				Gridcopy[i][j] = '\r';
 80023e8:	7dfa      	ldrb	r2, [r7, #23]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	441a      	add	r2, r3
 80023f8:	7dbb      	ldrb	r3, [r7, #22]
 80023fa:	210d      	movs	r1, #13
 80023fc:	54d1      	strb	r1, [r2, r3]
 80023fe:	e025      	b.n	800244c <buildMatrixCopy+0x86>
			}else if (j == parameters->numberOfColumns + 1){
 8002400:	7dba      	ldrb	r2, [r7, #22]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	7a5b      	ldrb	r3, [r3, #9]
 8002406:	3301      	adds	r3, #1
 8002408:	429a      	cmp	r2, r3
 800240a:	d10b      	bne.n	8002424 <buildMatrixCopy+0x5e>
				// Agregamos al final la terminacion nula para que cada fila sea un string completo
				Gridcopy[i][j] = '\0';
 800240c:	7dfa      	ldrb	r2, [r7, #23]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	461a      	mov	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	441a      	add	r2, r3
 800241c:	7dbb      	ldrb	r3, [r7, #22]
 800241e:	2100      	movs	r1, #0
 8002420:	54d1      	strb	r1, [r2, r3]
 8002422:	e013      	b.n	800244c <buildMatrixCopy+0x86>
			}else{
				Gridcopy[i][j] = terminalGrid[i][j];
 8002424:	7dfa      	ldrb	r2, [r7, #23]
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	461a      	mov	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	1898      	adds	r0, r3, r2
 8002434:	7db9      	ldrb	r1, [r7, #22]
 8002436:	7dfa      	ldrb	r2, [r7, #23]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	461a      	mov	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	441a      	add	r2, r3
 8002446:	7dbb      	ldrb	r3, [r7, #22]
 8002448:	5c41      	ldrb	r1, [r0, r1]
 800244a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 800244c:	7dbb      	ldrb	r3, [r7, #22]
 800244e:	3301      	adds	r3, #1
 8002450:	75bb      	strb	r3, [r7, #22]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	7a5b      	ldrb	r3, [r3, #9]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	7dbb      	ldrb	r3, [r7, #22]
 800245a:	429a      	cmp	r2, r3
 800245c:	dabf      	bge.n	80023de <buildMatrixCopy+0x18>
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 800245e:	7dfb      	ldrb	r3, [r7, #23]
 8002460:	3301      	adds	r3, #1
 8002462:	75fb      	strb	r3, [r7, #23]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	7a1b      	ldrb	r3, [r3, #8]
 8002468:	7dfa      	ldrb	r2, [r7, #23]
 800246a:	429a      	cmp	r2, r3
 800246c:	d3b4      	bcc.n	80023d8 <buildMatrixCopy+0x12>
			}
		}
	}

}
 800246e:	bf00      	nop
 8002470:	bf00      	nop
 8002472:	371c      	adds	r7, #28
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <getRows>:



// Se define la funcion de tomar cantidad de filas recorriendo la cantidad de String que tenga el puntero de arreglos matrix hasta que se
// encuentre con el puntero nulo.
uint8_t getRows(char terminalGrid[10][10]){
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

	uint8_t counterRows = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]
	char letter = '\0';
 8002488:	2300      	movs	r3, #0
 800248a:	73bb      	strb	r3, [r7, #14]
	(void)letter;
	while(terminalGrid[counterRows][0] != '\0'){
 800248c:	e00c      	b.n	80024a8 <getRows+0x2c>
		letter = terminalGrid[counterRows][0];
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	461a      	mov	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	73bb      	strb	r3, [r7, #14]
		counterRows++;
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	3301      	adds	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[counterRows][0] != '\0'){
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	461a      	mov	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1e7      	bne.n	800248e <getRows+0x12>

	}

	return counterRows;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <getColums>:

//Se define la funcion de tomar cantidad de columnas recorriendo el string hasta encontrar el elemento nulo char
uint8_t getColums(char terminalGrid[10][10]){
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

	uint8_t counterColumns = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 80024d8:	e002      	b.n	80024e0 <getColums+0x14>

		counterColumns++;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	3301      	adds	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	5cd3      	ldrb	r3, [r2, r3]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f7      	bne.n	80024da <getColums+0xe>

	}

	return counterColumns;
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <findLesserValue>:

// esta funcion nos almacena en uno de los arrays volatiles de la estructura costChangesAndPos_t la posicion del valor Fcost o H cost mas pequeño,
// Se debe identificar con un string si se quiere hallar el Fcost mas pequeño o el Hcost mas pequeño, asi, "Fcost" si se quiere hallar el F cost o
// "Hcost" si se quiere hallar el H cost
int findLesserValue(costChangesAndPos_t *ptrChanges, float costs[10][10][6], float decisionMtrx[100][4], uint8_t counter){
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	70fb      	strb	r3, [r7, #3]
	// seteamos las variables locales
	uint8_t i;
	uint8_t j;
	float value = 0;
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	613b      	str	r3, [r7, #16]

	// El algoritmo que se usará es que se recorrerá cada una de las posiciones y se analizara con las demas , excpliyendo obviamente
	// la posicion central


	for(i = 0; i<counter ; i++){
 800250c:	2300      	movs	r3, #0
 800250e:	75fb      	strb	r3, [r7, #23]
 8002510:	e03e      	b.n	8002590 <findLesserValue+0x98>
		for(j = 0; j<counter ; j++){
 8002512:	2300      	movs	r3, #0
 8002514:	75bb      	strb	r3, [r7, #22]
 8002516:	e034      	b.n	8002582 <findLesserValue+0x8a>
			if (i == j){
 8002518:	7dfa      	ldrb	r2, [r7, #23]
 800251a:	7dbb      	ldrb	r3, [r7, #22]
 800251c:	429a      	cmp	r2, r3
 800251e:	d101      	bne.n	8002524 <findLesserValue+0x2c>
				// Si estamos aqui es porque estamos analizando el mismo punto, y nosotros queremos es analizar a sus compañeros solamente
				__NOP();
 8002520:	bf00      	nop
 8002522:	e02b      	b.n	800257c <findLesserValue+0x84>
			}else if (decisionMtrx[i][0]
 8002524:	7dfb      	ldrb	r3, [r7, #23]
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	4413      	add	r3, r2
 800252c:	ed93 7a00 	vldr	s14, [r3]
					< decisionMtrx[j][0]){
 8002530:	7dbb      	ldrb	r3, [r7, #22]
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	4413      	add	r3, r2
 8002538:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 800253c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002544:	d41a      	bmi.n	800257c <findLesserValue+0x84>
				// Si estamos aca es porque podemos hacer la comparación
				// Si estamos aca es porque efectivamente el Fcost es menor, Solo dejamos pasar el ciclo para asegurarnos de que el j
				// pueda llegar hasta su valor final permitido
			}else if (decisionMtrx[i][0]
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	ed93 7a00 	vldr	s14, [r3]
				   == decisionMtrx[j][0]){
 8002552:	7dbb      	ldrb	r3, [r7, #22]
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 800255e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002566:	d104      	bne.n	8002572 <findLesserValue+0x7a>
				// Si estamos aqui es porque el programa encontro mas de un  minimo un valor igual al analizado
				ptrChanges->equalFcost = SET;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002570:	e004      	b.n	800257c <findLesserValue+0x84>
			}else{
				// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
				// Se resetea la bandera que decia que habia un vakor igual, esto debe de ser solo cierto si el valor que es
				// igual es el menor de la matriz
				ptrChanges->equalFcost = RESET;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				break;
 800257a:	e006      	b.n	800258a <findLesserValue+0x92>
		for(j = 0; j<counter ; j++){
 800257c:	7dbb      	ldrb	r3, [r7, #22]
 800257e:	3301      	adds	r3, #1
 8002580:	75bb      	strb	r3, [r7, #22]
 8002582:	7dba      	ldrb	r2, [r7, #22]
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	429a      	cmp	r2, r3
 8002588:	d3c6      	bcc.n	8002518 <findLesserValue+0x20>
	for(i = 0; i<counter ; i++){
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	3301      	adds	r3, #1
 800258e:	75fb      	strb	r3, [r7, #23]
 8002590:	7dfa      	ldrb	r2, [r7, #23]
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	429a      	cmp	r2, r3
 8002596:	d3bc      	bcc.n	8002512 <findLesserValue+0x1a>

		}//Terminacion de un for

	}//Terminacion del otro for

	if (j == counter){
 8002598:	7dba      	ldrb	r2, [r7, #22]
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	429a      	cmp	r2, r3
 800259e:	d10f      	bne.n	80025c0 <findLesserValue+0xc8>
		// Si entramos en esta condicion es porque el contador j logro llegar a su posicion final
		// Si entramos aqui es porque se logro analizar todo el arreglo y se encontro la posicion que corresponde con el Fcost mas pequeño
		// de todos, tambien guardamos el valor mas pequeño, si este se repite, se sabra gracias a la bandera
		// La posicion mas pequeña del F cost corresponde con la que se etsaba analizando en la posición i
		ptrChanges->lesserFcostPosition = i;
 80025a0:	7dfa      	ldrb	r2, [r7, #23]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	635a      	str	r2, [r3, #52]	; 0x34
		// Almacenamos en lesserFcost el valor de ese Fcost mas pequeño que se hallo
		ptrChanges->lesserFcost = decisionMtrx[i][0];
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
	}else{
		return 0; // Acabamos el programa ya que el ciclo no encontro el valor mas pequeño, por lo que hubo un error
	}

	// Ahora hallaremos el valor mas pequeño de H cost, solo en el caso de que la bandera correspondiente se haya levantado
	if (ptrChanges->equalFcost){
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d05a      	beq.n	8002674 <findLesserValue+0x17c>
 80025be:	e001      	b.n	80025c4 <findLesserValue+0xcc>
		return 0; // Acabamos el programa ya que el ciclo no encontro el valor mas pequeño, por lo que hubo un error
 80025c0:	2300      	movs	r3, #0
 80025c2:	e059      	b.n	8002678 <findLesserValue+0x180>
		// Si estamos aqui es porque si hay mas de un valor de F cost que corresponde con el valor mas pequeño, desempatamos buscando el Hcost mas pequeño
		// Para ello recorreremos la matriz a analizar de nuevo pero esta vez solo buscando aquellos valores que correspondan con el valor hallado de Fcost

		for(i = 0; i<counter ; i++){
 80025c4:	2300      	movs	r3, #0
 80025c6:	75fb      	strb	r3, [r7, #23]
 80025c8:	e03f      	b.n	800264a <findLesserValue+0x152>
			for(j = 0; j<counter ; j++){
 80025ca:	2300      	movs	r3, #0
 80025cc:	75bb      	strb	r3, [r7, #22]
 80025ce:	e035      	b.n	800263c <findLesserValue+0x144>
				value = decisionMtrx[j][0] / ptrChanges->lesserFcost;
 80025d0:	7dbb      	ldrb	r3, [r7, #22]
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	edd3 6a00 	vldr	s13, [r3]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80025e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025e6:	edc7 7a04 	vstr	s15, [r7, #16]
				if (i == j){
 80025ea:	7dfa      	ldrb	r2, [r7, #23]
 80025ec:	7dbb      	ldrb	r3, [r7, #22]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d101      	bne.n	80025f6 <findLesserValue+0xfe>
					// Si estamos aqui es porque estamos analizando la posición de analisis, por lo que lo ignoramos
					__NOP();
 80025f2:	bf00      	nop
 80025f4:	e01f      	b.n	8002636 <findLesserValue+0x13e>
				}else if (value == 1 && i !=  j){
 80025f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80025fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025fe:	eef4 7a47 	vcmp.f32	s15, s14
 8002602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002606:	d11d      	bne.n	8002644 <findLesserValue+0x14c>
 8002608:	7dfa      	ldrb	r2, [r7, #23]
 800260a:	7dbb      	ldrb	r3, [r7, #22]
 800260c:	429a      	cmp	r2, r3
 800260e:	d019      	beq.n	8002644 <findLesserValue+0x14c>
					// Si estamos aca es porque podemos hacer la comparación pero esta vez con la matriz heuristica
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8002610:	7dfb      	ldrb	r3, [r7, #23]
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	4413      	add	r3, r2
 8002618:	ed93 7a01 	vldr	s14, [r3, #4]
 800261c:	7dbb      	ldrb	r3, [r7, #22]
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	4413      	add	r3, r2
 8002624:	edd3 7a01 	vldr	s15, [r3, #4]
 8002628:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002630:	d900      	bls.n	8002634 <findLesserValue+0x13c>
						// Si estamos aca es porque efectivamente el Hcost es menor o igual al resto de Hcost
						__NOP();
					}else{
						// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
						break;
 8002632:	e007      	b.n	8002644 <findLesserValue+0x14c>
						__NOP();
 8002634:	bf00      	nop
			for(j = 0; j<counter ; j++){
 8002636:	7dbb      	ldrb	r3, [r7, #22]
 8002638:	3301      	adds	r3, #1
 800263a:	75bb      	strb	r3, [r7, #22]
 800263c:	7dba      	ldrb	r2, [r7, #22]
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	429a      	cmp	r2, r3
 8002642:	d3c5      	bcc.n	80025d0 <findLesserValue+0xd8>
		for(i = 0; i<counter ; i++){
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	3301      	adds	r3, #1
 8002648:	75fb      	strb	r3, [r7, #23]
 800264a:	7dfa      	ldrb	r2, [r7, #23]
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	429a      	cmp	r2, r3
 8002650:	d3bb      	bcc.n	80025ca <findLesserValue+0xd2>

			}//Terminacion de un for

		}//Terminacion del otro for

		if (j == counter){
 8002652:	7dba      	ldrb	r2, [r7, #22]
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	429a      	cmp	r2, r3
 8002658:	d10a      	bne.n	8002670 <findLesserValue+0x178>
			// Si entramos aqui es porque se logro analizar toda la matriz y se encontro la posicion que corresponde con la posicion mas pequeña
			// de todas, tambien guardamos el valor mas pequeño, es muy poco probable, por no decir imposible que tengamos una misma heuristica
			//repetida
			ptrChanges->lesserHcostPosition = i;
 800265a:	7dfa      	ldrb	r2, [r7, #23]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
			//Almacenamos en lesserHcost el valor del Hcost mas pequeño encontrado
			ptrChanges->lesserHcost = decisionMtrx[i][1];
 8002660:	7dfb      	ldrb	r3, [r7, #23]
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	645a      	str	r2, [r3, #68]	; 0x44
 800266e:	e002      	b.n	8002676 <findLesserValue+0x17e>
		}else{
			return 0; // Si llegamos hasta aca es porque salio algo mal en el ciclo for y habra que salir del programa
 8002670:	2300      	movs	r3, #0
 8002672:	e001      	b.n	8002678 <findLesserValue+0x180>
		}

	}else{
		// Si estamos aca es porque no se alzo la bandera que indica que hay mas de un F cost igual por lo que no hacemos nada
		__NOP();
 8002674:	bf00      	nop
	}

	return 1;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	2b00      	cmp	r3, #0
 8002694:	db0b      	blt.n	80026ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	f003 021f 	and.w	r2, r3, #31
 800269c:	4907      	ldr	r1, [pc, #28]	; (80026bc <__NVIC_EnableIRQ+0x38>)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	2001      	movs	r0, #1
 80026a6:	fa00 f202 	lsl.w	r2, r0, r2
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000e100 	.word	0xe000e100

080026c0 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026d0:	b672      	cpsid	i
}
 80026d2:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a70      	ldr	r2, [pc, #448]	; (800289c <BasicTimer_Config+0x1dc>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d106      	bne.n	80026ec <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80026de:	4b70      	ldr	r3, [pc, #448]	; (80028a0 <BasicTimer_Config+0x1e0>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a6f      	ldr	r2, [pc, #444]	; (80028a0 <BasicTimer_Config+0x1e0>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	e030      	b.n	800274e <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f4:	d106      	bne.n	8002704 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80026f6:	4b6a      	ldr	r3, [pc, #424]	; (80028a0 <BasicTimer_Config+0x1e0>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a69      	ldr	r2, [pc, #420]	; (80028a0 <BasicTimer_Config+0x1e0>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	e024      	b.n	800274e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a66      	ldr	r2, [pc, #408]	; (80028a4 <BasicTimer_Config+0x1e4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d106      	bne.n	800271c <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800270e:	4b64      	ldr	r3, [pc, #400]	; (80028a0 <BasicTimer_Config+0x1e0>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a63      	ldr	r2, [pc, #396]	; (80028a0 <BasicTimer_Config+0x1e0>)
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	e018      	b.n	800274e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a61      	ldr	r2, [pc, #388]	; (80028a8 <BasicTimer_Config+0x1e8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d106      	bne.n	8002734 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002726:	4b5e      	ldr	r3, [pc, #376]	; (80028a0 <BasicTimer_Config+0x1e0>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a5d      	ldr	r2, [pc, #372]	; (80028a0 <BasicTimer_Config+0x1e0>)
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	e00c      	b.n	800274e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a5c      	ldr	r2, [pc, #368]	; (80028ac <BasicTimer_Config+0x1ec>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d106      	bne.n	800274c <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800273e:	4b58      	ldr	r3, [pc, #352]	; (80028a0 <BasicTimer_Config+0x1e0>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	4a57      	ldr	r2, [pc, #348]	; (80028a0 <BasicTimer_Config+0x1e0>)
 8002744:	f043 0308 	orr.w	r3, r3, #8
 8002748:	6413      	str	r3, [r2, #64]	; 0x40
 800274a:	e000      	b.n	800274e <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 800274c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800275c:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6892      	ldr	r2, [r2, #8]
 8002766:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	791b      	ldrb	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d144      	bne.n	80027fa <BasicTimer_Config+0x13a>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0210 	bic.w	r2, r2, #16
 800277e:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2ba0      	cmp	r3, #160	; 0xa0
 800278a:	d003      	beq.n	8002794 <BasicTimer_Config+0xd4>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002792:	d10b      	bne.n	80027ac <BasicTimer_Config+0xec>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2264      	movs	r2, #100	; 0x64
 800279a:	fb02 f303 	mul.w	r3, r2, r3
 800279e:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	3a01      	subs	r2, #1
 80027a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80027aa:	e021      	b.n	80027f0 <BasicTimer_Config+0x130>

		}else if ((speed == BTIMER_SPEED_16MHz_100us ) || (speed == BTIMER_SPEED_100MHz_100us)){
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80027b2:	d004      	beq.n	80027be <BasicTimer_Config+0xfe>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10c      	bne.n	80027d8 <BasicTimer_Config+0x118>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	3a01      	subs	r2, #1
 80027d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80027d6:	e00b      	b.n	80027f0 <BasicTimer_Config+0x130>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms )){
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80027de:	d107      	bne.n	80027f0 <BasicTimer_Config+0x130>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period    ;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	3a01      	subs	r2, #1
 80027ee:	62da      	str	r2, [r3, #44]	; 0x2c

		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2200      	movs	r2, #0
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24
 80027f8:	e013      	b.n	8002822 <BasicTimer_Config+0x162>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0210 	orr.w	r2, r2, #16
 8002808:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3a01      	subs	r2, #1
 8002814:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3a01      	subs	r2, #1
 8002820:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0201 	orr.w	r2, r2, #1
 8002830:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM1){
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a19      	ldr	r2, [pc, #100]	; (800289c <BasicTimer_Config+0x1dc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d103      	bne.n	8002844 <BasicTimer_Config+0x184>
		// Activando en NVIC para la interrupción del TIM1 , Especificamente la interrucion que habilita
		NVIC_EnableIRQ(TIM2_IRQn);
 800283c:	201c      	movs	r0, #28
 800283e:	f7ff ff21 	bl	8002684 <__NVIC_EnableIRQ>
 8002842:	e024      	b.n	800288e <BasicTimer_Config+0x1ce>
	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284c:	d103      	bne.n	8002856 <BasicTimer_Config+0x196>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 800284e:	201c      	movs	r0, #28
 8002850:	f7ff ff18 	bl	8002684 <__NVIC_EnableIRQ>
 8002854:	e01b      	b.n	800288e <BasicTimer_Config+0x1ce>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <BasicTimer_Config+0x1e4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d103      	bne.n	8002868 <BasicTimer_Config+0x1a8>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8002860:	201d      	movs	r0, #29
 8002862:	f7ff ff0f 	bl	8002684 <__NVIC_EnableIRQ>
 8002866:	e012      	b.n	800288e <BasicTimer_Config+0x1ce>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0e      	ldr	r2, [pc, #56]	; (80028a8 <BasicTimer_Config+0x1e8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d103      	bne.n	800287a <BasicTimer_Config+0x1ba>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8002872:	201e      	movs	r0, #30
 8002874:	f7ff ff06 	bl	8002684 <__NVIC_EnableIRQ>
 8002878:	e009      	b.n	800288e <BasicTimer_Config+0x1ce>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a0b      	ldr	r2, [pc, #44]	; (80028ac <BasicTimer_Config+0x1ec>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d103      	bne.n	800288c <BasicTimer_Config+0x1cc>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8002884:	2032      	movs	r0, #50	; 0x32
 8002886:	f7ff fefd 	bl	8002684 <__NVIC_EnableIRQ>
 800288a:	e000      	b.n	800288e <BasicTimer_Config+0x1ce>
	}
	else{
		__NOP();
 800288c:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800288e:	b662      	cpsie	i
}
 8002890:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40010000 	.word	0x40010000
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40000800 	.word	0x40000800
 80028ac:	40000c00 	.word	0x40000c00

080028b0 <BasicTimer2_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer2_Callback(void){
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80028b4:	bf00      	nop
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80028c4:	bf00      	nop
}
 80028c6:	bf00      	nop
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80028d4:	bf00      	nop
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80028e4:	bf00      	nop
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80028f4:	bf00      	nop
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002904:	bf00      	nop
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002914:	bf00      	nop
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002924:	bf00      	nop
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002934:	bf00      	nop
}
 8002936:	bf00      	nop
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002944:	bf00      	nop
}
 8002946:	bf00      	nop
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002954:	bf00      	nop
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002964:	bf00      	nop
}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002974:	bf00      	nop
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002984:	bf00      	nop
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002994:	bf00      	nop
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80029a4:	bf00      	nop
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80029b4:	bf00      	nop
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80029c4:	bf00      	nop
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 80029d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 80029e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 80029f2:	f7ff ff5d 	bl	80028b0 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 80029f6:	e066      	b.n	8002ac6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 80029f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d012      	beq.n	8002a2c <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 8002a06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a10:	f023 0302 	bic.w	r3, r3, #2
 8002a14:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 8002a16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a24:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 8002a26:	f7ff ff5b 	bl	80028e0 <Capture_TIM2_Ch1_Callback>
}
 8002a2a:	e04c      	b.n	8002ac6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8002a2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d012      	beq.n	8002a60 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 8002a3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a44:	f023 0304 	bic.w	r3, r3, #4
 8002a48:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 8002a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a58:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 8002a5a:	f7ff ff49 	bl	80028f0 <Capture_TIM2_Ch2_Callback>
}
 8002a5e:	e032      	b.n	8002ac6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8002a60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d012      	beq.n	8002a94 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 8002a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a78:	f023 0308 	bic.w	r3, r3, #8
 8002a7c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 8002a7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a8c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 8002a8e:	f7ff ff37 	bl	8002900 <Capture_TIM2_Ch3_Callback>
}
 8002a92:	e018      	b.n	8002ac6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8002a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d011      	beq.n	8002ac6 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8002aa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aac:	f023 0310 	bic.w	r3, r3, #16
 8002ab0:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8002ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002abc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ac0:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8002ac2:	f7ff ff25 	bl	8002910 <Capture_TIM2_Ch4_Callback>
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8002ad0:	4b31      	ldr	r3, [pc, #196]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 8002adc:	4b2e      	ldr	r3, [pc, #184]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	4a2d      	ldr	r2, [pc, #180]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8002ae8:	f7fe facc 	bl	8001084 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 8002aec:	e052      	b.n	8002b94 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 8002aee:	4b2a      	ldr	r3, [pc, #168]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00e      	beq.n	8002b18 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 8002afa:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	4a26      	ldr	r2, [pc, #152]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b00:	f023 0302 	bic.w	r3, r3, #2
 8002b04:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 8002b06:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b10:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 8002b12:	f7ff ff05 	bl	8002920 <Capture_TIM3_Ch1_Callback>
}
 8002b16:	e03d      	b.n	8002b94 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8002b18:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00e      	beq.n	8002b42 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8002b24:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	4a1b      	ldr	r2, [pc, #108]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b2a:	f023 0304 	bic.w	r3, r3, #4
 8002b2e:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	4a18      	ldr	r2, [pc, #96]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b3a:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 8002b3c:	f7ff fef8 	bl	8002930 <Capture_TIM3_Ch2_Callback>
}
 8002b40:	e028      	b.n	8002b94 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00e      	beq.n	8002b6c <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	4a11      	ldr	r2, [pc, #68]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b54:	f023 0308 	bic.w	r3, r3, #8
 8002b58:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b64:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8002b66:	f7ff feeb 	bl	8002940 <Capture_TIM3_Ch3_Callback>
}
 8002b6a:	e013      	b.n	8002b94 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00d      	beq.n	8002b94 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	4a06      	ldr	r2, [pc, #24]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b7e:	f023 0310 	bic.w	r3, r3, #16
 8002b82:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	4a03      	ldr	r2, [pc, #12]	; (8002b98 <TIM3_IRQHandler+0xcc>)
 8002b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b8e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8002b90:	f7ff fede 	bl	8002950 <Capture_TIM3_Ch4_Callback>
}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40000400 	.word	0x40000400

08002b9c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8002ba0:	4b31      	ldr	r3, [pc, #196]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 8002bac:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	4a2d      	ldr	r2, [pc, #180]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002bb2:	f023 0301 	bic.w	r3, r3, #1
 8002bb6:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8002bb8:	f7ff fe82 	bl	80028c0 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 8002bbc:	e052      	b.n	8002c64 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 8002bbe:	4b2a      	ldr	r3, [pc, #168]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00e      	beq.n	8002be8 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 8002bca:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	4a26      	ldr	r2, [pc, #152]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002bd0:	f023 0302 	bic.w	r3, r3, #2
 8002bd4:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8002bd6:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	4a23      	ldr	r2, [pc, #140]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002be0:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8002be2:	f7ff febd 	bl	8002960 <Capture_TIM4_Ch1_Callback>
}
 8002be6:	e03d      	b.n	8002c64 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8002be8:	4b1f      	ldr	r3, [pc, #124]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00e      	beq.n	8002c12 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8002bf4:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002bfa:	f023 0304 	bic.w	r3, r3, #4
 8002bfe:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002c06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c0a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8002c0c:	f7ff fec8 	bl	80029a0 <Capture_TIM5_Ch2_Callback>
}
 8002c10:	e028      	b.n	8002c64 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00e      	beq.n	8002c3c <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	4a11      	ldr	r2, [pc, #68]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002c24:	f023 0308 	bic.w	r3, r3, #8
 8002c28:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 8002c2a:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002c30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c34:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 8002c36:	f7ff fe9b 	bl	8002970 <Capture_TIM4_Ch3_Callback>
}
 8002c3a:	e013      	b.n	8002c64 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8002c48:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	4a06      	ldr	r2, [pc, #24]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002c4e:	f023 0310 	bic.w	r3, r3, #16
 8002c52:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	4a03      	ldr	r2, [pc, #12]	; (8002c68 <TIM4_IRQHandler+0xcc>)
 8002c5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c5e:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8002c60:	f7ff fe8e 	bl	8002980 <Capture_TIM4_Ch4_Callback>
}
 8002c64:	bf00      	nop
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40000800 	.word	0x40000800

08002c6c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8002c70:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 8002c7c:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	4a2d      	ldr	r2, [pc, #180]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8002c88:	f7ff fe22 	bl	80028d0 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 8002c8c:	e052      	b.n	8002d34 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 8002c8e:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00e      	beq.n	8002cb8 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 8002c9a:	4b27      	ldr	r3, [pc, #156]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002ca0:	f023 0302 	bic.w	r3, r3, #2
 8002ca4:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8002ca6:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cb0:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8002cb2:	f7ff fe6d 	bl	8002990 <Capture_TIM5_Ch1_Callback>
}
 8002cb6:	e03d      	b.n	8002d34 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00e      	beq.n	8002ce2 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8002cc4:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002cca:	f023 0304 	bic.w	r3, r3, #4
 8002cce:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002cd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cda:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8002cdc:	f7ff fe60 	bl	80029a0 <Capture_TIM5_Ch2_Callback>
}
 8002ce0:	e028      	b.n	8002d34 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00e      	beq.n	8002d0c <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 8002cee:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002cf4:	f023 0308 	bic.w	r3, r3, #8
 8002cf8:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	4a0e      	ldr	r2, [pc, #56]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002d00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d04:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 8002d06:	f7ff fe53 	bl	80029b0 <Capture_TIM5_Ch3_Callback>
}
 8002d0a:	e013      	b.n	8002d34 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00d      	beq.n	8002d34 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8002d18:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	4a06      	ldr	r2, [pc, #24]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002d1e:	f023 0310 	bic.w	r3, r3, #16
 8002d22:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8002d24:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	4a03      	ldr	r2, [pc, #12]	; (8002d38 <TIM5_IRQHandler+0xcc>)
 8002d2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d2e:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8002d30:	f7ff fe46 	bl	80029c0 <Capture_TIM5_Ch4_Callback>
}
 8002d34:	bf00      	nop
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40000c00 	.word	0x40000c00

08002d3c <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a88      	ldr	r2, [pc, #544]	; (8002f98 <GPIO_Config+0x238>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d106      	bne.n	8002d88 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8002d7a:	4b88      	ldr	r3, [pc, #544]	; (8002f9c <GPIO_Config+0x23c>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a87      	ldr	r2, [pc, #540]	; (8002f9c <GPIO_Config+0x23c>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	e03a      	b.n	8002dfe <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a84      	ldr	r2, [pc, #528]	; (8002fa0 <GPIO_Config+0x240>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d106      	bne.n	8002da0 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8002d92:	4b82      	ldr	r3, [pc, #520]	; (8002f9c <GPIO_Config+0x23c>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a81      	ldr	r2, [pc, #516]	; (8002f9c <GPIO_Config+0x23c>)
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	e02e      	b.n	8002dfe <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a7f      	ldr	r2, [pc, #508]	; (8002fa4 <GPIO_Config+0x244>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d106      	bne.n	8002db8 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8002daa:	4b7c      	ldr	r3, [pc, #496]	; (8002f9c <GPIO_Config+0x23c>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	4a7b      	ldr	r2, [pc, #492]	; (8002f9c <GPIO_Config+0x23c>)
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	6313      	str	r3, [r2, #48]	; 0x30
 8002db6:	e022      	b.n	8002dfe <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a7a      	ldr	r2, [pc, #488]	; (8002fa8 <GPIO_Config+0x248>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d106      	bne.n	8002dd0 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8002dc2:	4b76      	ldr	r3, [pc, #472]	; (8002f9c <GPIO_Config+0x23c>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	4a75      	ldr	r2, [pc, #468]	; (8002f9c <GPIO_Config+0x23c>)
 8002dc8:	f043 0308 	orr.w	r3, r3, #8
 8002dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dce:	e016      	b.n	8002dfe <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a75      	ldr	r2, [pc, #468]	; (8002fac <GPIO_Config+0x24c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d106      	bne.n	8002de8 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8002dda:	4b70      	ldr	r3, [pc, #448]	; (8002f9c <GPIO_Config+0x23c>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a6f      	ldr	r2, [pc, #444]	; (8002f9c <GPIO_Config+0x23c>)
 8002de0:	f043 0310 	orr.w	r3, r3, #16
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	e00a      	b.n	8002dfe <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a70      	ldr	r2, [pc, #448]	; (8002fb0 <GPIO_Config+0x250>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d105      	bne.n	8002dfe <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8002df2:	4b6a      	ldr	r3, [pc, #424]	; (8002f9c <GPIO_Config+0x23c>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a69      	ldr	r2, [pc, #420]	; (8002f9c <GPIO_Config+0x23c>)
 8002df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	795b      	ldrb	r3, [r3, #5]
 8002e02:	461a      	mov	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	791b      	ldrb	r3, [r3, #4]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	791b      	ldrb	r3, [r3, #4]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2103      	movs	r1, #3
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	4619      	mov	r1, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6819      	ldr	r1, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7a1b      	ldrb	r3, [r3, #8]
 8002e42:	461a      	mov	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	791b      	ldrb	r3, [r3, #4]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	791b      	ldrb	r3, [r3, #4]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	408b      	lsls	r3, r1
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	4619      	mov	r1, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	400a      	ands	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	799b      	ldrb	r3, [r3, #6]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	791b      	ldrb	r3, [r3, #4]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	791b      	ldrb	r3, [r3, #4]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	2103      	movs	r1, #3
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	400a      	ands	r2, r1
 8002ea8:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6899      	ldr	r1, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	79db      	ldrb	r3, [r3, #7]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	791b      	ldrb	r3, [r3, #4]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	791b      	ldrb	r3, [r3, #4]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	2103      	movs	r1, #3
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68d9      	ldr	r1, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	795b      	ldrb	r3, [r3, #5]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d143      	bne.n	8002f8a <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	791b      	ldrb	r3, [r3, #4]
 8002f06:	2b07      	cmp	r3, #7
 8002f08:	d81f      	bhi.n	8002f4a <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	791b      	ldrb	r3, [r3, #4]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6a1a      	ldr	r2, [r3, #32]
 8002f18:	210f      	movs	r1, #15
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	4619      	mov	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	400a      	ands	r2, r1
 8002f2a:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6a1a      	ldr	r2, [r3, #32]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	7a5b      	ldrb	r3, [r3, #9]
 8002f36:	4619      	mov	r1, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3e:	4619      	mov	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 8002f48:	e01f      	b.n	8002f8a <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	791b      	ldrb	r3, [r3, #4]
 8002f4e:	3b08      	subs	r3, #8
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f5a:	210f      	movs	r1, #15
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	4619      	mov	r1, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	7a5b      	ldrb	r3, [r3, #9]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	4619      	mov	r1, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40020000 	.word	0x40020000
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40020400 	.word	0x40020400
 8002fa4:	40020800 	.word	0x40020800
 8002fa8:	40020c00 	.word	0x40020c00
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40021c00 	.word	0x40021c00

08002fb4 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d10d      	bne.n	8002fe2 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699a      	ldr	r2, [r3, #24]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	791b      	ldrb	r3, [r3, #4]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	408b      	lsls	r3, r1
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8002fe0:	e00d      	b.n	8002ffe <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699a      	ldr	r2, [r3, #24]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	791b      	ldrb	r3, [r3, #4]
 8002fec:	3310      	adds	r3, #16
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	619a      	str	r2, [r3, #24]
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 800300a:	b480      	push	{r7}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	791b      	ldrb	r3, [r3, #4]
 800301a:	461a      	mov	r2, r3
 800301c:	2301      	movs	r3, #1
 800301e:	4093      	lsls	r3, r2
 8003020:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 800302a:	897b      	ldrh	r3, [r7, #10]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4013      	ands	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	791b      	ldrb	r3, [r3, #4]
 8003036:	461a      	mov	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	40d3      	lsrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

	return pinValue;
 800303e:	68fb      	ldr	r3, [r7, #12]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ffd8 	bl	800300a <GPIO_ReadPin>
 800305a:	4603      	mov	r3, r0
 800305c:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	4619      	mov	r1, r3
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ffa1 	bl	8002fb4 <GPIO_WritePin>
}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(void){
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0


	//Nos aseguramos que el PLL esta apagado para asi hacer la configuracion del mismo, ademas selecc
	RCC->CR &= ~(RCC_CR_PLLON);
 8003080:	4b33      	ldr	r3, [pc, #204]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a32      	ldr	r2, [pc, #200]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 8003086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800308a:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800308c:	4b30      	ldr	r3, [pc, #192]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 800308e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003092:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de 100MHz
	PWR->CR |= (0b11 << 14);
 8003094:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <RCC_enableMaxFrequencies+0xd8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a2e      	ldr	r2, [pc, #184]	; (8003154 <RCC_enableMaxFrequencies+0xd8>)
 800309a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800309e:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= 0;
 80030a0:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	605a      	str	r2, [r3, #4]

	//Montamos sobre el RCC_PLL config las subdivisiones necesarias para obtener la salida de frecuencia de reloj que deseamos
	RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 80030aa:	4b29      	ldr	r3, [pc, #164]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4a28      	ldr	r2, [pc, #160]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 80030b0:	f043 0308 	orr.w	r3, r3, #8
 80030b4:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 80030b6:	4b26      	ldr	r3, [pc, #152]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4a25      	ldr	r2, [pc, #148]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 80030bc:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 80030c0:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80030c2:	4b23      	ldr	r3, [pc, #140]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4a22      	ldr	r2, [pc, #136]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 80030c8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80030cc:	6053      	str	r3, [r2, #4]

	//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
	RCC->CR |= RCC_CR_PLLON;
 80030ce:	4b20      	ldr	r3, [pc, #128]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1f      	ldr	r2, [pc, #124]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 80030d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030d8:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 80030da:	e000      	b.n	80030de <RCC_enableMaxFrequencies+0x62>
		__NOP();
 80030dc:	bf00      	nop
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 80030de:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f8      	beq.n	80030dc <RCC_enableMaxFrequencies+0x60>
	}

	//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
	RCC->CFGR &= ~(0b111 << 13);
 80030ea:	4b19      	ldr	r3, [pc, #100]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	4a18      	ldr	r2, [pc, #96]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 80030f0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80030f4:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b100 << 10);
 80030f6:	4b16      	ldr	r3, [pc, #88]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	4a15      	ldr	r2, [pc, #84]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 80030fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003100:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~(0xF << 4);
 8003102:	4b13      	ldr	r3, [pc, #76]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	4a12      	ldr	r2, [pc, #72]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 8003108:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800310c:	6093      	str	r3, [r2, #8]

	//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
	FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800310e:	4b12      	ldr	r3, [pc, #72]	; (8003158 <RCC_enableMaxFrequencies+0xdc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a11      	ldr	r2, [pc, #68]	; (8003158 <RCC_enableMaxFrequencies+0xdc>)
 8003114:	f023 030f 	bic.w	r3, r3, #15
 8003118:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 800311a:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <RCC_enableMaxFrequencies+0xdc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <RCC_enableMaxFrequencies+0xdc>)
 8003120:	f043 0303 	orr.w	r3, r3, #3
 8003124:	6013      	str	r3, [r2, #0]


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	4a09      	ldr	r2, [pc, #36]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 800312c:	f043 0302 	orr.w	r3, r3, #2
 8003130:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8003132:	e000      	b.n	8003136 <RCC_enableMaxFrequencies+0xba>
		__NOP();
 8003134:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <RCC_enableMaxFrequencies+0xd4>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f8      	beq.n	8003134 <RCC_enableMaxFrequencies+0xb8>
	}



}
 8003142:	bf00      	nop
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800
 8003154:	40007000 	.word	0x40007000
 8003158:	40023c00 	.word	0x40023c00

0800315c <__NVIC_EnableIRQ>:
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	2b00      	cmp	r3, #0
 800316c:	db0b      	blt.n	8003186 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	f003 021f 	and.w	r2, r3, #31
 8003174:	4907      	ldr	r1, [pc, #28]	; (8003194 <__NVIC_EnableIRQ+0x38>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	2001      	movs	r0, #1
 800317e:	fa00 f202 	lsl.w	r2, r0, r2
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	e000e100 	.word	0xe000e100

08003198 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80031a0:	b672      	cpsid	i
}
 80031a2:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a8f      	ldr	r2, [pc, #572]	; (80033e8 <USART_Config+0x250>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d106      	bne.n	80031bc <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80031ae:	4b8f      	ldr	r3, [pc, #572]	; (80033ec <USART_Config+0x254>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	4a8e      	ldr	r2, [pc, #568]	; (80033ec <USART_Config+0x254>)
 80031b4:	f043 0310 	orr.w	r3, r3, #16
 80031b8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ba:	e018      	b.n	80031ee <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a8b      	ldr	r2, [pc, #556]	; (80033f0 <USART_Config+0x258>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d106      	bne.n	80031d4 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80031c6:	4b89      	ldr	r3, [pc, #548]	; (80033ec <USART_Config+0x254>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a88      	ldr	r2, [pc, #544]	; (80033ec <USART_Config+0x254>)
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
 80031d2:	e00c      	b.n	80031ee <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a86      	ldr	r2, [pc, #536]	; (80033f4 <USART_Config+0x25c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d106      	bne.n	80031ec <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 80031de:	4b83      	ldr	r3, [pc, #524]	; (80033ec <USART_Config+0x254>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	4a82      	ldr	r2, [pc, #520]	; (80033ec <USART_Config+0x254>)
 80031e4:	f043 0320 	orr.w	r3, r3, #32
 80031e8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ea:	e000      	b.n	80031ee <USART_Config+0x56>
	}
	else{
		__NOP();
 80031ec:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2200      	movs	r2, #0
 80031f4:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	7a5b      	ldrb	r3, [r3, #9]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d025      	beq.n	8003252 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	7a5b      	ldrb	r3, [r3, #9]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d110      	bne.n	8003230 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800321c:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	e018      	b.n	8003262 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323e:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	e007      	b.n	8003262 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003260:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	7a1b      	ldrb	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d108      	bne.n	800327c <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	e007      	b.n	800328c <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800328a:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	7a9b      	ldrb	r3, [r3, #10]
 8003290:	2b03      	cmp	r3, #3
 8003292:	d82f      	bhi.n	80032f4 <USART_Config+0x15c>
 8003294:	a201      	add	r2, pc, #4	; (adr r2, 800329c <USART_Config+0x104>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032ad 	.word	0x080032ad
 80032a0:	080032bf 	.word	0x080032bf
 80032a4:	080032d1 	.word	0x080032d1
 80032a8:	080032e3 	.word	0x080032e3
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80032ba:	611a      	str	r2, [r3, #16]
			break;
 80032bc:	e023      	b.n	8003306 <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032cc:	611a      	str	r2, [r3, #16]
			break;
 80032ce:	e01a      	b.n	8003306 <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032de:	611a      	str	r2, [r3, #16]
			break;
 80032e0:	e011      	b.n	8003306 <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80032f0:	611a      	str	r2, [r3, #16]
			break;
 80032f2:	e008      	b.n	8003306 <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003302:	611a      	str	r2, [r3, #16]
			break;
 8003304:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681c      	ldr	r4, [r3, #0]
 800330e:	4611      	mov	r1, r2
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f8cd 	bl	80034b0 <brrCalculus>
 8003316:	4603      	mov	r3, r0
 8003318:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	799b      	ldrb	r3, [r3, #6]
 800331e:	2b03      	cmp	r3, #3
 8003320:	d82e      	bhi.n	8003380 <USART_Config+0x1e8>
 8003322:	a201      	add	r2, pc, #4	; (adr r2, 8003328 <USART_Config+0x190>)
 8003324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003328:	08003339 	.word	0x08003339
 800332c:	0800334b 	.word	0x0800334b
 8003330:	0800335d 	.word	0x0800335d
 8003334:	0800336f 	.word	0x0800336f
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0208 	orr.w	r2, r2, #8
 8003346:	60da      	str	r2, [r3, #12]
			break;
 8003348:	e023      	b.n	8003392 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 0204 	orr.w	r2, r2, #4
 8003358:	60da      	str	r2, [r3, #12]
			break;
 800335a:	e01a      	b.n	8003392 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 020c 	orr.w	r2, r2, #12
 800336a:	60da      	str	r2, [r3, #12]
			break;
 800336c:	e011      	b.n	8003392 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 020c 	bic.w	r2, r2, #12
 800337c:	60da      	str	r2, [r3, #12]
			break;
 800337e:	e008      	b.n	8003392 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 020c 	bic.w	r2, r2, #12
 800338e:	60da      	str	r2, [r3, #12]
			break;
 8003390:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	799b      	ldrb	r3, [r3, #6]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d008      	beq.n	80033ac <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	e007      	b.n	80033bc <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ba:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	795b      	ldrb	r3, [r3, #5]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d12d      	bne.n	8003420 <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0220 	orr.w	r2, r2, #32
 80033d2:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a03      	ldr	r2, [pc, #12]	; (80033e8 <USART_Config+0x250>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d10c      	bne.n	80033f8 <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 80033de:	2025      	movs	r0, #37	; 0x25
 80033e0:	f7ff febc 	bl	800315c <__NVIC_EnableIRQ>
 80033e4:	e024      	b.n	8003430 <USART_Config+0x298>
 80033e6:	bf00      	nop
 80033e8:	40011000 	.word	0x40011000
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40004400 	.word	0x40004400
 80033f4:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a28      	ldr	r2, [pc, #160]	; (80034a0 <USART_Config+0x308>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d103      	bne.n	800340a <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8003402:	2026      	movs	r0, #38	; 0x26
 8003404:	f7ff feaa 	bl	800315c <__NVIC_EnableIRQ>
 8003408:	e012      	b.n	8003430 <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a25      	ldr	r2, [pc, #148]	; (80034a4 <USART_Config+0x30c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d103      	bne.n	800341c <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8003414:	2047      	movs	r0, #71	; 0x47
 8003416:	f7ff fea1 	bl	800315c <__NVIC_EnableIRQ>
 800341a:	e009      	b.n	8003430 <USART_Config+0x298>
		}
		else{
				__NOP();
 800341c:	bf00      	nop
 800341e:	e007      	b.n	8003430 <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0220 	bic.w	r2, r2, #32
 800342e:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	791b      	ldrb	r3, [r3, #4]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d124      	bne.n	8003482 <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003446:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a16      	ldr	r2, [pc, #88]	; (80034a8 <USART_Config+0x310>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d103      	bne.n	800345a <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8003452:	2025      	movs	r0, #37	; 0x25
 8003454:	f7ff fe82 	bl	800315c <__NVIC_EnableIRQ>
 8003458:	e01b      	b.n	8003492 <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a10      	ldr	r2, [pc, #64]	; (80034a0 <USART_Config+0x308>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d103      	bne.n	800346c <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8003464:	2026      	movs	r0, #38	; 0x26
 8003466:	f7ff fe79 	bl	800315c <__NVIC_EnableIRQ>
 800346a:	e012      	b.n	8003492 <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <USART_Config+0x30c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d103      	bne.n	800347e <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8003476:	2047      	movs	r0, #71	; 0x47
 8003478:	f7ff fe70 	bl	800315c <__NVIC_EnableIRQ>
 800347c:	e009      	b.n	8003492 <USART_Config+0x2fa>
		}
		else{
				__NOP();
 800347e:	bf00      	nop
 8003480:	e007      	b.n	8003492 <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003490:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8003492:	b662      	cpsie	i
}
 8003494:	bf00      	nop
	}

	__enable_irq();
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bd90      	pop	{r4, r7, pc}
 800349e:	bf00      	nop
 80034a0:	40004400 	.word	0x40004400
 80034a4:	40011400 	.word	0x40011400
 80034a8:	40011000 	.word	0x40011000
 80034ac:	00000000 	.word	0x00000000

080034b0 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 80034b0:	b5b0      	push	{r4, r5, r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	79db      	ldrb	r3, [r3, #7]
 80034be:	2b03      	cmp	r3, #3
 80034c0:	f200 8217 	bhi.w	80038f2 <brrCalculus+0x442>
 80034c4:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <brrCalculus+0x1c>)
 80034c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	080034dd 	.word	0x080034dd
 80034d0:	080035d7 	.word	0x080035d7
 80034d4:	080036f1 	.word	0x080036f1
 80034d8:	080037f9 	.word	0x080037f9

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 80034dc:	4980      	ldr	r1, [pc, #512]	; (80036e0 <brrCalculus+0x230>)
 80034de:	a37c      	add	r3, pc, #496	; (adr r3, 80036d0 <brrCalculus+0x220>)
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	ee07 3a90 	vmov	s15, r3
 80034ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f2:	ee17 0a90 	vmov	r0, s15
 80034f6:	f7fd f83f 	bl	8000578 <__aeabi_f2d>
 80034fa:	4b79      	ldr	r3, [pc, #484]	; (80036e0 <brrCalculus+0x230>)
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f7fd f892 	bl	8000628 <__aeabi_dmul>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4975      	ldr	r1, [pc, #468]	; (80036e0 <brrCalculus+0x230>)
 800350a:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800350e:	4b74      	ldr	r3, [pc, #464]	; (80036e0 <brrCalculus+0x230>)
 8003510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	f7fd fb36 	bl	8000b88 <__aeabi_d2iz>
 800351c:	4603      	mov	r3, r0
 800351e:	b29a      	uxth	r2, r3
 8003520:	4b70      	ldr	r3, [pc, #448]	; (80036e4 <brrCalculus+0x234>)
 8003522:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8003524:	4b6e      	ldr	r3, [pc, #440]	; (80036e0 <brrCalculus+0x230>)
 8003526:	e9d3 4500 	ldrd	r4, r5, [r3]
 800352a:	4b6d      	ldr	r3, [pc, #436]	; (80036e0 <brrCalculus+0x230>)
 800352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	f7fd fb28 	bl	8000b88 <__aeabi_d2iz>
 8003538:	4603      	mov	r3, r0
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd f80a 	bl	8000554 <__aeabi_i2d>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4620      	mov	r0, r4
 8003546:	4629      	mov	r1, r5
 8003548:	f7fc feb6 	bl	80002b8 <__aeabi_dsub>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4610      	mov	r0, r2
 8003552:	4619      	mov	r1, r3
 8003554:	f7fd fb40 	bl	8000bd8 <__aeabi_d2f>
 8003558:	4603      	mov	r3, r0
 800355a:	4a63      	ldr	r2, [pc, #396]	; (80036e8 <brrCalculus+0x238>)
 800355c:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800355e:	4b62      	ldr	r3, [pc, #392]	; (80036e8 <brrCalculus+0x238>)
 8003560:	edd3 7a00 	vldr	s15, [r3]
 8003564:	2004      	movs	r0, #4
 8003566:	eeb0 0a67 	vmov.f32	s0, s15
 800356a:	f000 fa6d 	bl	8003a48 <roundToNDecimals>
 800356e:	eef0 7a40 	vmov.f32	s15, s0
 8003572:	4b5d      	ldr	r3, [pc, #372]	; (80036e8 <brrCalculus+0x238>)
 8003574:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8003578:	4b5b      	ldr	r3, [pc, #364]	; (80036e8 <brrCalculus+0x238>)
 800357a:	edd3 7a00 	vldr	s15, [r3]
 800357e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003586:	4b58      	ldr	r3, [pc, #352]	; (80036e8 <brrCalculus+0x238>)
 8003588:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800358c:	4b56      	ldr	r3, [pc, #344]	; (80036e8 <brrCalculus+0x238>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7fc fff1 	bl	8000578 <__aeabi_f2d>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	ec43 2b10 	vmov	d0, r2, r3
 800359e:	f003 fcf7 	bl	8006f90 <round>
 80035a2:	ec53 2b10 	vmov	r2, r3, d0
 80035a6:	4610      	mov	r0, r2
 80035a8:	4619      	mov	r1, r3
 80035aa:	f7fd fb15 	bl	8000bd8 <__aeabi_d2f>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4a4d      	ldr	r2, [pc, #308]	; (80036e8 <brrCalculus+0x238>)
 80035b2:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80035b4:	4b4b      	ldr	r3, [pc, #300]	; (80036e4 <brrCalculus+0x234>)
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	4b4a      	ldr	r3, [pc, #296]	; (80036e8 <brrCalculus+0x238>)
 80035be:	edd3 7a00 	vldr	s15, [r3]
 80035c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035c6:	ee17 3a90 	vmov	r3, s15
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	4313      	orrs	r3, r2
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	4b46      	ldr	r3, [pc, #280]	; (80036ec <brrCalculus+0x23c>)
 80035d2:	801a      	strh	r2, [r3, #0]


		break;
 80035d4:	e18f      	b.n	80038f6 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 80035d6:	4942      	ldr	r1, [pc, #264]	; (80036e0 <brrCalculus+0x230>)
 80035d8:	a33f      	add	r3, pc, #252	; (adr r3, 80036d8 <brrCalculus+0x228>)
 80035da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035de:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ec:	ee17 0a90 	vmov	r0, s15
 80035f0:	f7fc ffc2 	bl	8000578 <__aeabi_f2d>
 80035f4:	4b3a      	ldr	r3, [pc, #232]	; (80036e0 <brrCalculus+0x230>)
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f7fd f815 	bl	8000628 <__aeabi_dmul>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4937      	ldr	r1, [pc, #220]	; (80036e0 <brrCalculus+0x230>)
 8003604:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8003608:	4b35      	ldr	r3, [pc, #212]	; (80036e0 <brrCalculus+0x230>)
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	4610      	mov	r0, r2
 8003610:	4619      	mov	r1, r3
 8003612:	f7fd fab9 	bl	8000b88 <__aeabi_d2iz>
 8003616:	4603      	mov	r3, r0
 8003618:	b29a      	uxth	r2, r3
 800361a:	4b32      	ldr	r3, [pc, #200]	; (80036e4 <brrCalculus+0x234>)
 800361c:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800361e:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <brrCalculus+0x230>)
 8003620:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003624:	4b2e      	ldr	r3, [pc, #184]	; (80036e0 <brrCalculus+0x230>)
 8003626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	f7fd faab 	bl	8000b88 <__aeabi_d2iz>
 8003632:	4603      	mov	r3, r0
 8003634:	4618      	mov	r0, r3
 8003636:	f7fc ff8d 	bl	8000554 <__aeabi_i2d>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4620      	mov	r0, r4
 8003640:	4629      	mov	r1, r5
 8003642:	f7fc fe39 	bl	80002b8 <__aeabi_dsub>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4610      	mov	r0, r2
 800364c:	4619      	mov	r1, r3
 800364e:	f7fd fac3 	bl	8000bd8 <__aeabi_d2f>
 8003652:	4603      	mov	r3, r0
 8003654:	4a24      	ldr	r2, [pc, #144]	; (80036e8 <brrCalculus+0x238>)
 8003656:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8003658:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <brrCalculus+0x238>)
 800365a:	edd3 7a00 	vldr	s15, [r3]
 800365e:	2004      	movs	r0, #4
 8003660:	eeb0 0a67 	vmov.f32	s0, s15
 8003664:	f000 f9f0 	bl	8003a48 <roundToNDecimals>
 8003668:	eef0 7a40 	vmov.f32	s15, s0
 800366c:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <brrCalculus+0x238>)
 800366e:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8003672:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <brrCalculus+0x238>)
 8003674:	edd3 7a00 	vldr	s15, [r3]
 8003678:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800367c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003680:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <brrCalculus+0x238>)
 8003682:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8003686:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <brrCalculus+0x238>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fc ff74 	bl	8000578 <__aeabi_f2d>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	ec43 2b10 	vmov	d0, r2, r3
 8003698:	f003 fc7a 	bl	8006f90 <round>
 800369c:	ec53 2b10 	vmov	r2, r3, d0
 80036a0:	4610      	mov	r0, r2
 80036a2:	4619      	mov	r1, r3
 80036a4:	f7fd fa98 	bl	8000bd8 <__aeabi_d2f>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4a0f      	ldr	r2, [pc, #60]	; (80036e8 <brrCalculus+0x238>)
 80036ac:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80036ae:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <brrCalculus+0x234>)
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <brrCalculus+0x238>)
 80036b8:	edd3 7a00 	vldr	s15, [r3]
 80036bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036c0:	ee17 3a90 	vmov	r3, s15
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	4313      	orrs	r3, r2
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	4b08      	ldr	r3, [pc, #32]	; (80036ec <brrCalculus+0x23c>)
 80036cc:	801a      	strh	r2, [r3, #0]


		break;
 80036ce:	e112      	b.n	80038f6 <brrCalculus+0x446>
 80036d0:	b4e81b4f 	.word	0xb4e81b4f
 80036d4:	3edb4e81 	.word	0x3edb4e81
 80036d8:	b4e81b4f 	.word	0xb4e81b4f
 80036dc:	3ecb4e81 	.word	0x3ecb4e81
 80036e0:	20000e98 	.word	0x20000e98
 80036e4:	20000e92 	.word	0x20000e92
 80036e8:	20000e94 	.word	0x20000e94
 80036ec:	20000e90 	.word	0x20000e90
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 80036f0:	4989      	ldr	r1, [pc, #548]	; (8003918 <brrCalculus+0x468>)
 80036f2:	a385      	add	r3, pc, #532	; (adr r3, 8003908 <brrCalculus+0x458>)
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003706:	ee17 0a90 	vmov	r0, s15
 800370a:	f7fc ff35 	bl	8000578 <__aeabi_f2d>
 800370e:	4b82      	ldr	r3, [pc, #520]	; (8003918 <brrCalculus+0x468>)
 8003710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003714:	f7fc ff88 	bl	8000628 <__aeabi_dmul>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	497e      	ldr	r1, [pc, #504]	; (8003918 <brrCalculus+0x468>)
 800371e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8003722:	4b7d      	ldr	r3, [pc, #500]	; (8003918 <brrCalculus+0x468>)
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	f7fd fa2c 	bl	8000b88 <__aeabi_d2iz>
 8003730:	4603      	mov	r3, r0
 8003732:	b29a      	uxth	r2, r3
 8003734:	4b79      	ldr	r3, [pc, #484]	; (800391c <brrCalculus+0x46c>)
 8003736:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8003738:	4b77      	ldr	r3, [pc, #476]	; (8003918 <brrCalculus+0x468>)
 800373a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800373e:	4b76      	ldr	r3, [pc, #472]	; (8003918 <brrCalculus+0x468>)
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	4610      	mov	r0, r2
 8003746:	4619      	mov	r1, r3
 8003748:	f7fd fa1e 	bl	8000b88 <__aeabi_d2iz>
 800374c:	4603      	mov	r3, r0
 800374e:	4618      	mov	r0, r3
 8003750:	f7fc ff00 	bl	8000554 <__aeabi_i2d>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4620      	mov	r0, r4
 800375a:	4629      	mov	r1, r5
 800375c:	f7fc fdac 	bl	80002b8 <__aeabi_dsub>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4610      	mov	r0, r2
 8003766:	4619      	mov	r1, r3
 8003768:	f7fd fa36 	bl	8000bd8 <__aeabi_d2f>
 800376c:	4603      	mov	r3, r0
 800376e:	4a6c      	ldr	r2, [pc, #432]	; (8003920 <brrCalculus+0x470>)
 8003770:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8003772:	4b6b      	ldr	r3, [pc, #428]	; (8003920 <brrCalculus+0x470>)
 8003774:	edd3 7a00 	vldr	s15, [r3]
 8003778:	2004      	movs	r0, #4
 800377a:	eeb0 0a67 	vmov.f32	s0, s15
 800377e:	f000 f963 	bl	8003a48 <roundToNDecimals>
 8003782:	eef0 7a40 	vmov.f32	s15, s0
 8003786:	4b66      	ldr	r3, [pc, #408]	; (8003920 <brrCalculus+0x470>)
 8003788:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800378c:	4b64      	ldr	r3, [pc, #400]	; (8003920 <brrCalculus+0x470>)
 800378e:	edd3 7a00 	vldr	s15, [r3]
 8003792:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800379a:	4b61      	ldr	r3, [pc, #388]	; (8003920 <brrCalculus+0x470>)
 800379c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 80037a0:	4b5f      	ldr	r3, [pc, #380]	; (8003920 <brrCalculus+0x470>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fc fee7 	bl	8000578 <__aeabi_f2d>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	ec43 2b10 	vmov	d0, r2, r3
 80037b2:	f003 fbed 	bl	8006f90 <round>
 80037b6:	ec51 0b10 	vmov	r0, r1, d0
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	4b59      	ldr	r3, [pc, #356]	; (8003924 <brrCalculus+0x474>)
 80037c0:	f7fc fd7c 	bl	80002bc <__adddf3>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4610      	mov	r0, r2
 80037ca:	4619      	mov	r1, r3
 80037cc:	f7fd fa04 	bl	8000bd8 <__aeabi_d2f>
 80037d0:	4603      	mov	r3, r0
 80037d2:	4a53      	ldr	r2, [pc, #332]	; (8003920 <brrCalculus+0x470>)
 80037d4:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80037d6:	4b51      	ldr	r3, [pc, #324]	; (800391c <brrCalculus+0x46c>)
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	b29a      	uxth	r2, r3
 80037de:	4b50      	ldr	r3, [pc, #320]	; (8003920 <brrCalculus+0x470>)
 80037e0:	edd3 7a00 	vldr	s15, [r3]
 80037e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037e8:	ee17 3a90 	vmov	r3, s15
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	4313      	orrs	r3, r2
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	4b4d      	ldr	r3, [pc, #308]	; (8003928 <brrCalculus+0x478>)
 80037f4:	801a      	strh	r2, [r3, #0]


		break;
 80037f6:	e07e      	b.n	80038f6 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 80037f8:	4947      	ldr	r1, [pc, #284]	; (8003918 <brrCalculus+0x468>)
 80037fa:	a345      	add	r3, pc, #276	; (adr r3, 8003910 <brrCalculus+0x460>)
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380e:	ee17 0a90 	vmov	r0, s15
 8003812:	f7fc feb1 	bl	8000578 <__aeabi_f2d>
 8003816:	4b40      	ldr	r3, [pc, #256]	; (8003918 <brrCalculus+0x468>)
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f7fc ff04 	bl	8000628 <__aeabi_dmul>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	493c      	ldr	r1, [pc, #240]	; (8003918 <brrCalculus+0x468>)
 8003826:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800382a:	4b3b      	ldr	r3, [pc, #236]	; (8003918 <brrCalculus+0x468>)
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	4610      	mov	r0, r2
 8003832:	4619      	mov	r1, r3
 8003834:	f7fd f9a8 	bl	8000b88 <__aeabi_d2iz>
 8003838:	4603      	mov	r3, r0
 800383a:	b29a      	uxth	r2, r3
 800383c:	4b37      	ldr	r3, [pc, #220]	; (800391c <brrCalculus+0x46c>)
 800383e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8003840:	4b35      	ldr	r3, [pc, #212]	; (8003918 <brrCalculus+0x468>)
 8003842:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003846:	4b34      	ldr	r3, [pc, #208]	; (8003918 <brrCalculus+0x468>)
 8003848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	f7fd f99a 	bl	8000b88 <__aeabi_d2iz>
 8003854:	4603      	mov	r3, r0
 8003856:	4618      	mov	r0, r3
 8003858:	f7fc fe7c 	bl	8000554 <__aeabi_i2d>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4620      	mov	r0, r4
 8003862:	4629      	mov	r1, r5
 8003864:	f7fc fd28 	bl	80002b8 <__aeabi_dsub>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	f7fd f9b2 	bl	8000bd8 <__aeabi_d2f>
 8003874:	4603      	mov	r3, r0
 8003876:	4a2a      	ldr	r2, [pc, #168]	; (8003920 <brrCalculus+0x470>)
 8003878:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800387a:	4b29      	ldr	r3, [pc, #164]	; (8003920 <brrCalculus+0x470>)
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	2004      	movs	r0, #4
 8003882:	eeb0 0a67 	vmov.f32	s0, s15
 8003886:	f000 f8df 	bl	8003a48 <roundToNDecimals>
 800388a:	eef0 7a40 	vmov.f32	s15, s0
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <brrCalculus+0x470>)
 8003890:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8003894:	4b22      	ldr	r3, [pc, #136]	; (8003920 <brrCalculus+0x470>)
 8003896:	edd3 7a00 	vldr	s15, [r3]
 800389a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800389e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038a2:	4b1f      	ldr	r3, [pc, #124]	; (8003920 <brrCalculus+0x470>)
 80038a4:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80038a8:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <brrCalculus+0x470>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fc fe63 	bl	8000578 <__aeabi_f2d>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	ec43 2b10 	vmov	d0, r2, r3
 80038ba:	f003 fb69 	bl	8006f90 <round>
 80038be:	ec53 2b10 	vmov	r2, r3, d0
 80038c2:	4610      	mov	r0, r2
 80038c4:	4619      	mov	r1, r3
 80038c6:	f7fd f987 	bl	8000bd8 <__aeabi_d2f>
 80038ca:	4603      	mov	r3, r0
 80038cc:	4a14      	ldr	r2, [pc, #80]	; (8003920 <brrCalculus+0x470>)
 80038ce:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80038d0:	4b12      	ldr	r3, [pc, #72]	; (800391c <brrCalculus+0x46c>)
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <brrCalculus+0x470>)
 80038da:	edd3 7a00 	vldr	s15, [r3]
 80038de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038e2:	ee17 3a90 	vmov	r3, s15
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	4313      	orrs	r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <brrCalculus+0x478>)
 80038ee:	801a      	strh	r2, [r3, #0]


		break;
 80038f0:	e001      	b.n	80038f6 <brrCalculus+0x446>
	}
	default:{

		__NOP();
 80038f2:	bf00      	nop
		break;
 80038f4:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <brrCalculus+0x478>)
 80038f8:	881b      	ldrh	r3, [r3, #0]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bdb0      	pop	{r4, r5, r7, pc}
 8003902:	bf00      	nop
 8003904:	f3af 8000 	nop.w
 8003908:	789abcdf 	.word	0x789abcdf
 800390c:	3ec23456 	.word	0x3ec23456
 8003910:	789abcdf 	.word	0x789abcdf
 8003914:	3ea23456 	.word	0x3ea23456
 8003918:	20000e98 	.word	0x20000e98
 800391c:	20000e92 	.word	0x20000e92
 8003920:	20000e94 	.word	0x20000e94
 8003924:	3ff00000 	.word	0x3ff00000
 8003928:	20000e90 	.word	0x20000e90

0800392c <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8003936:	e000      	b.n	800393a <writeChar+0xe>
		__NOP();
 8003938:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f7      	beq.n	8003938 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	605a      	str	r2, [r3, #4]

}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 8003966:	e008      	b.n	800397a <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ffdc 	bl	800392c <writeChar>
		msgToSend ++ ;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	3301      	adds	r3, #1
 8003978:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f2      	bne.n	8003968 <writeMsg+0xc>
	}
}
 8003982:	bf00      	nop
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
	__NOP();
 8003990:	bf00      	nop
}
 8003992:	bf00      	nop
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
	__NOP();
 80039a0:	bf00      	nop
}
 80039a2:	bf00      	nop
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
	return auxRxData;
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <getRxData+0x14>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000ea0 	.word	0x20000ea0

080039c4 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 80039c8:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <USART2_IRQHandler+0x24>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d006      	beq.n	80039e2 <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <USART2_IRQHandler+0x24>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4b04      	ldr	r3, [pc, #16]	; (80039ec <USART2_IRQHandler+0x28>)
 80039dc:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 80039de:	f7fd fb45 	bl	800106c <usart2Rx_Callback>
	}

}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40004400 	.word	0x40004400
 80039ec:	20000ea0 	.word	0x20000ea0

080039f0 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <USART1_IRQHandler+0x24>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d006      	beq.n	8003a0e <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <USART1_IRQHandler+0x24>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <USART1_IRQHandler+0x28>)
 8003a08:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8003a0a:	f7ff ffbf 	bl	800398c <usart1Rx_Callback>
	}
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40011000 	.word	0x40011000
 8003a18:	20000ea0 	.word	0x20000ea0

08003a1c <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8003a20:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <USART6_IRQHandler+0x24>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d006      	beq.n	8003a3a <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8003a2c:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <USART6_IRQHandler+0x24>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <USART6_IRQHandler+0x28>)
 8003a34:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8003a36:	f7ff ffb1 	bl	800399c <usart6Rx_Callback>
	}

}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40011400 	.word	0x40011400
 8003a44:	20000ea0 	.word	0x20000ea0

08003a48 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a52:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 8003a54:	6838      	ldr	r0, [r7, #0]
 8003a56:	f7fc fd7d 	bl	8000554 <__aeabi_i2d>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	ec43 2b11 	vmov	d1, r2, r3
 8003a62:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8003ae0 <roundToNDecimals+0x98>
 8003a66:	f003 fad9 	bl	800701c <pow>
 8003a6a:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fc fd82 	bl	8000578 <__aeabi_f2d>
 8003a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a78:	f7fc fdd6 	bl	8000628 <__aeabi_dmul>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4610      	mov	r0, r2
 8003a82:	4619      	mov	r1, r3
 8003a84:	f7fd f8a8 	bl	8000bd8 <__aeabi_d2f>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	607b      	str	r3, [r7, #4]

    number = round(number);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7fc fd73 	bl	8000578 <__aeabi_f2d>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	ec43 2b10 	vmov	d0, r2, r3
 8003a9a:	f003 fa79 	bl	8006f90 <round>
 8003a9e:	ec53 2b10 	vmov	r2, r3, d0
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	f7fd f897 	bl	8000bd8 <__aeabi_d2f>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	607b      	str	r3, [r7, #4]

    number /= factor;
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fc fd62 	bl	8000578 <__aeabi_f2d>
 8003ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ab8:	f7fc fee0 	bl	800087c <__aeabi_ddiv>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f7fd f888 	bl	8000bd8 <__aeabi_d2f>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	607b      	str	r3, [r7, #4]

    return number;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	ee07 3a90 	vmov	s15, r3
}
 8003ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	f3af 8000 	nop.w
 8003ae0:	00000000 	.word	0x00000000
 8003ae4:	40240000 	.word	0x40240000

08003ae8 <__errno>:
 8003ae8:	4b01      	ldr	r3, [pc, #4]	; (8003af0 <__errno+0x8>)
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000008 	.word	0x20000008

08003af4 <__libc_init_array>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	4d0d      	ldr	r5, [pc, #52]	; (8003b2c <__libc_init_array+0x38>)
 8003af8:	4c0d      	ldr	r4, [pc, #52]	; (8003b30 <__libc_init_array+0x3c>)
 8003afa:	1b64      	subs	r4, r4, r5
 8003afc:	10a4      	asrs	r4, r4, #2
 8003afe:	2600      	movs	r6, #0
 8003b00:	42a6      	cmp	r6, r4
 8003b02:	d109      	bne.n	8003b18 <__libc_init_array+0x24>
 8003b04:	4d0b      	ldr	r5, [pc, #44]	; (8003b34 <__libc_init_array+0x40>)
 8003b06:	4c0c      	ldr	r4, [pc, #48]	; (8003b38 <__libc_init_array+0x44>)
 8003b08:	f004 f9b2 	bl	8007e70 <_init>
 8003b0c:	1b64      	subs	r4, r4, r5
 8003b0e:	10a4      	asrs	r4, r4, #2
 8003b10:	2600      	movs	r6, #0
 8003b12:	42a6      	cmp	r6, r4
 8003b14:	d105      	bne.n	8003b22 <__libc_init_array+0x2e>
 8003b16:	bd70      	pop	{r4, r5, r6, pc}
 8003b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1c:	4798      	blx	r3
 8003b1e:	3601      	adds	r6, #1
 8003b20:	e7ee      	b.n	8003b00 <__libc_init_array+0xc>
 8003b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b26:	4798      	blx	r3
 8003b28:	3601      	adds	r6, #1
 8003b2a:	e7f2      	b.n	8003b12 <__libc_init_array+0x1e>
 8003b2c:	080083c8 	.word	0x080083c8
 8003b30:	080083c8 	.word	0x080083c8
 8003b34:	080083c8 	.word	0x080083c8
 8003b38:	080083cc 	.word	0x080083cc

08003b3c <malloc>:
 8003b3c:	4b02      	ldr	r3, [pc, #8]	; (8003b48 <malloc+0xc>)
 8003b3e:	4601      	mov	r1, r0
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	f000 b877 	b.w	8003c34 <_malloc_r>
 8003b46:	bf00      	nop
 8003b48:	20000008 	.word	0x20000008

08003b4c <memset>:
 8003b4c:	4402      	add	r2, r0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d100      	bne.n	8003b56 <memset+0xa>
 8003b54:	4770      	bx	lr
 8003b56:	f803 1b01 	strb.w	r1, [r3], #1
 8003b5a:	e7f9      	b.n	8003b50 <memset+0x4>

08003b5c <_free_r>:
 8003b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b5e:	2900      	cmp	r1, #0
 8003b60:	d044      	beq.n	8003bec <_free_r+0x90>
 8003b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b66:	9001      	str	r0, [sp, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f1a1 0404 	sub.w	r4, r1, #4
 8003b6e:	bfb8      	it	lt
 8003b70:	18e4      	addlt	r4, r4, r3
 8003b72:	f001 fd91 	bl	8005698 <__malloc_lock>
 8003b76:	4a1e      	ldr	r2, [pc, #120]	; (8003bf0 <_free_r+0x94>)
 8003b78:	9801      	ldr	r0, [sp, #4]
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	b933      	cbnz	r3, 8003b8c <_free_r+0x30>
 8003b7e:	6063      	str	r3, [r4, #4]
 8003b80:	6014      	str	r4, [r2, #0]
 8003b82:	b003      	add	sp, #12
 8003b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b88:	f001 bd8c 	b.w	80056a4 <__malloc_unlock>
 8003b8c:	42a3      	cmp	r3, r4
 8003b8e:	d908      	bls.n	8003ba2 <_free_r+0x46>
 8003b90:	6825      	ldr	r5, [r4, #0]
 8003b92:	1961      	adds	r1, r4, r5
 8003b94:	428b      	cmp	r3, r1
 8003b96:	bf01      	itttt	eq
 8003b98:	6819      	ldreq	r1, [r3, #0]
 8003b9a:	685b      	ldreq	r3, [r3, #4]
 8003b9c:	1949      	addeq	r1, r1, r5
 8003b9e:	6021      	streq	r1, [r4, #0]
 8003ba0:	e7ed      	b.n	8003b7e <_free_r+0x22>
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	b10b      	cbz	r3, 8003bac <_free_r+0x50>
 8003ba8:	42a3      	cmp	r3, r4
 8003baa:	d9fa      	bls.n	8003ba2 <_free_r+0x46>
 8003bac:	6811      	ldr	r1, [r2, #0]
 8003bae:	1855      	adds	r5, r2, r1
 8003bb0:	42a5      	cmp	r5, r4
 8003bb2:	d10b      	bne.n	8003bcc <_free_r+0x70>
 8003bb4:	6824      	ldr	r4, [r4, #0]
 8003bb6:	4421      	add	r1, r4
 8003bb8:	1854      	adds	r4, r2, r1
 8003bba:	42a3      	cmp	r3, r4
 8003bbc:	6011      	str	r1, [r2, #0]
 8003bbe:	d1e0      	bne.n	8003b82 <_free_r+0x26>
 8003bc0:	681c      	ldr	r4, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	6053      	str	r3, [r2, #4]
 8003bc6:	4421      	add	r1, r4
 8003bc8:	6011      	str	r1, [r2, #0]
 8003bca:	e7da      	b.n	8003b82 <_free_r+0x26>
 8003bcc:	d902      	bls.n	8003bd4 <_free_r+0x78>
 8003bce:	230c      	movs	r3, #12
 8003bd0:	6003      	str	r3, [r0, #0]
 8003bd2:	e7d6      	b.n	8003b82 <_free_r+0x26>
 8003bd4:	6825      	ldr	r5, [r4, #0]
 8003bd6:	1961      	adds	r1, r4, r5
 8003bd8:	428b      	cmp	r3, r1
 8003bda:	bf04      	itt	eq
 8003bdc:	6819      	ldreq	r1, [r3, #0]
 8003bde:	685b      	ldreq	r3, [r3, #4]
 8003be0:	6063      	str	r3, [r4, #4]
 8003be2:	bf04      	itt	eq
 8003be4:	1949      	addeq	r1, r1, r5
 8003be6:	6021      	streq	r1, [r4, #0]
 8003be8:	6054      	str	r4, [r2, #4]
 8003bea:	e7ca      	b.n	8003b82 <_free_r+0x26>
 8003bec:	b003      	add	sp, #12
 8003bee:	bd30      	pop	{r4, r5, pc}
 8003bf0:	20000ea4 	.word	0x20000ea4

08003bf4 <sbrk_aligned>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	4e0e      	ldr	r6, [pc, #56]	; (8003c30 <sbrk_aligned+0x3c>)
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	6831      	ldr	r1, [r6, #0]
 8003bfc:	4605      	mov	r5, r0
 8003bfe:	b911      	cbnz	r1, 8003c06 <sbrk_aligned+0x12>
 8003c00:	f000 fd0e 	bl	8004620 <_sbrk_r>
 8003c04:	6030      	str	r0, [r6, #0]
 8003c06:	4621      	mov	r1, r4
 8003c08:	4628      	mov	r0, r5
 8003c0a:	f000 fd09 	bl	8004620 <_sbrk_r>
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	d00a      	beq.n	8003c28 <sbrk_aligned+0x34>
 8003c12:	1cc4      	adds	r4, r0, #3
 8003c14:	f024 0403 	bic.w	r4, r4, #3
 8003c18:	42a0      	cmp	r0, r4
 8003c1a:	d007      	beq.n	8003c2c <sbrk_aligned+0x38>
 8003c1c:	1a21      	subs	r1, r4, r0
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f000 fcfe 	bl	8004620 <_sbrk_r>
 8003c24:	3001      	adds	r0, #1
 8003c26:	d101      	bne.n	8003c2c <sbrk_aligned+0x38>
 8003c28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
 8003c30:	20000ea8 	.word	0x20000ea8

08003c34 <_malloc_r>:
 8003c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c38:	1ccd      	adds	r5, r1, #3
 8003c3a:	f025 0503 	bic.w	r5, r5, #3
 8003c3e:	3508      	adds	r5, #8
 8003c40:	2d0c      	cmp	r5, #12
 8003c42:	bf38      	it	cc
 8003c44:	250c      	movcc	r5, #12
 8003c46:	2d00      	cmp	r5, #0
 8003c48:	4607      	mov	r7, r0
 8003c4a:	db01      	blt.n	8003c50 <_malloc_r+0x1c>
 8003c4c:	42a9      	cmp	r1, r5
 8003c4e:	d905      	bls.n	8003c5c <_malloc_r+0x28>
 8003c50:	230c      	movs	r3, #12
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	2600      	movs	r6, #0
 8003c56:	4630      	mov	r0, r6
 8003c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c5c:	4e2e      	ldr	r6, [pc, #184]	; (8003d18 <_malloc_r+0xe4>)
 8003c5e:	f001 fd1b 	bl	8005698 <__malloc_lock>
 8003c62:	6833      	ldr	r3, [r6, #0]
 8003c64:	461c      	mov	r4, r3
 8003c66:	bb34      	cbnz	r4, 8003cb6 <_malloc_r+0x82>
 8003c68:	4629      	mov	r1, r5
 8003c6a:	4638      	mov	r0, r7
 8003c6c:	f7ff ffc2 	bl	8003bf4 <sbrk_aligned>
 8003c70:	1c43      	adds	r3, r0, #1
 8003c72:	4604      	mov	r4, r0
 8003c74:	d14d      	bne.n	8003d12 <_malloc_r+0xde>
 8003c76:	6834      	ldr	r4, [r6, #0]
 8003c78:	4626      	mov	r6, r4
 8003c7a:	2e00      	cmp	r6, #0
 8003c7c:	d140      	bne.n	8003d00 <_malloc_r+0xcc>
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	4631      	mov	r1, r6
 8003c82:	4638      	mov	r0, r7
 8003c84:	eb04 0803 	add.w	r8, r4, r3
 8003c88:	f000 fcca 	bl	8004620 <_sbrk_r>
 8003c8c:	4580      	cmp	r8, r0
 8003c8e:	d13a      	bne.n	8003d06 <_malloc_r+0xd2>
 8003c90:	6821      	ldr	r1, [r4, #0]
 8003c92:	3503      	adds	r5, #3
 8003c94:	1a6d      	subs	r5, r5, r1
 8003c96:	f025 0503 	bic.w	r5, r5, #3
 8003c9a:	3508      	adds	r5, #8
 8003c9c:	2d0c      	cmp	r5, #12
 8003c9e:	bf38      	it	cc
 8003ca0:	250c      	movcc	r5, #12
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	4638      	mov	r0, r7
 8003ca6:	f7ff ffa5 	bl	8003bf4 <sbrk_aligned>
 8003caa:	3001      	adds	r0, #1
 8003cac:	d02b      	beq.n	8003d06 <_malloc_r+0xd2>
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	442b      	add	r3, r5
 8003cb2:	6023      	str	r3, [r4, #0]
 8003cb4:	e00e      	b.n	8003cd4 <_malloc_r+0xa0>
 8003cb6:	6822      	ldr	r2, [r4, #0]
 8003cb8:	1b52      	subs	r2, r2, r5
 8003cba:	d41e      	bmi.n	8003cfa <_malloc_r+0xc6>
 8003cbc:	2a0b      	cmp	r2, #11
 8003cbe:	d916      	bls.n	8003cee <_malloc_r+0xba>
 8003cc0:	1961      	adds	r1, r4, r5
 8003cc2:	42a3      	cmp	r3, r4
 8003cc4:	6025      	str	r5, [r4, #0]
 8003cc6:	bf18      	it	ne
 8003cc8:	6059      	strne	r1, [r3, #4]
 8003cca:	6863      	ldr	r3, [r4, #4]
 8003ccc:	bf08      	it	eq
 8003cce:	6031      	streq	r1, [r6, #0]
 8003cd0:	5162      	str	r2, [r4, r5]
 8003cd2:	604b      	str	r3, [r1, #4]
 8003cd4:	4638      	mov	r0, r7
 8003cd6:	f104 060b 	add.w	r6, r4, #11
 8003cda:	f001 fce3 	bl	80056a4 <__malloc_unlock>
 8003cde:	f026 0607 	bic.w	r6, r6, #7
 8003ce2:	1d23      	adds	r3, r4, #4
 8003ce4:	1af2      	subs	r2, r6, r3
 8003ce6:	d0b6      	beq.n	8003c56 <_malloc_r+0x22>
 8003ce8:	1b9b      	subs	r3, r3, r6
 8003cea:	50a3      	str	r3, [r4, r2]
 8003cec:	e7b3      	b.n	8003c56 <_malloc_r+0x22>
 8003cee:	6862      	ldr	r2, [r4, #4]
 8003cf0:	42a3      	cmp	r3, r4
 8003cf2:	bf0c      	ite	eq
 8003cf4:	6032      	streq	r2, [r6, #0]
 8003cf6:	605a      	strne	r2, [r3, #4]
 8003cf8:	e7ec      	b.n	8003cd4 <_malloc_r+0xa0>
 8003cfa:	4623      	mov	r3, r4
 8003cfc:	6864      	ldr	r4, [r4, #4]
 8003cfe:	e7b2      	b.n	8003c66 <_malloc_r+0x32>
 8003d00:	4634      	mov	r4, r6
 8003d02:	6876      	ldr	r6, [r6, #4]
 8003d04:	e7b9      	b.n	8003c7a <_malloc_r+0x46>
 8003d06:	230c      	movs	r3, #12
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	f001 fcca 	bl	80056a4 <__malloc_unlock>
 8003d10:	e7a1      	b.n	8003c56 <_malloc_r+0x22>
 8003d12:	6025      	str	r5, [r4, #0]
 8003d14:	e7de      	b.n	8003cd4 <_malloc_r+0xa0>
 8003d16:	bf00      	nop
 8003d18:	20000ea4 	.word	0x20000ea4

08003d1c <__cvt>:
 8003d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d20:	ec55 4b10 	vmov	r4, r5, d0
 8003d24:	2d00      	cmp	r5, #0
 8003d26:	460e      	mov	r6, r1
 8003d28:	4619      	mov	r1, r3
 8003d2a:	462b      	mov	r3, r5
 8003d2c:	bfbb      	ittet	lt
 8003d2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003d32:	461d      	movlt	r5, r3
 8003d34:	2300      	movge	r3, #0
 8003d36:	232d      	movlt	r3, #45	; 0x2d
 8003d38:	700b      	strb	r3, [r1, #0]
 8003d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003d40:	4691      	mov	r9, r2
 8003d42:	f023 0820 	bic.w	r8, r3, #32
 8003d46:	bfbc      	itt	lt
 8003d48:	4622      	movlt	r2, r4
 8003d4a:	4614      	movlt	r4, r2
 8003d4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d50:	d005      	beq.n	8003d5e <__cvt+0x42>
 8003d52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003d56:	d100      	bne.n	8003d5a <__cvt+0x3e>
 8003d58:	3601      	adds	r6, #1
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	e000      	b.n	8003d60 <__cvt+0x44>
 8003d5e:	2103      	movs	r1, #3
 8003d60:	ab03      	add	r3, sp, #12
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	ab02      	add	r3, sp, #8
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	ec45 4b10 	vmov	d0, r4, r5
 8003d6c:	4653      	mov	r3, sl
 8003d6e:	4632      	mov	r2, r6
 8003d70:	f000 fd86 	bl	8004880 <_dtoa_r>
 8003d74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003d78:	4607      	mov	r7, r0
 8003d7a:	d102      	bne.n	8003d82 <__cvt+0x66>
 8003d7c:	f019 0f01 	tst.w	r9, #1
 8003d80:	d022      	beq.n	8003dc8 <__cvt+0xac>
 8003d82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d86:	eb07 0906 	add.w	r9, r7, r6
 8003d8a:	d110      	bne.n	8003dae <__cvt+0x92>
 8003d8c:	783b      	ldrb	r3, [r7, #0]
 8003d8e:	2b30      	cmp	r3, #48	; 0x30
 8003d90:	d10a      	bne.n	8003da8 <__cvt+0x8c>
 8003d92:	2200      	movs	r2, #0
 8003d94:	2300      	movs	r3, #0
 8003d96:	4620      	mov	r0, r4
 8003d98:	4629      	mov	r1, r5
 8003d9a:	f7fc fead 	bl	8000af8 <__aeabi_dcmpeq>
 8003d9e:	b918      	cbnz	r0, 8003da8 <__cvt+0x8c>
 8003da0:	f1c6 0601 	rsb	r6, r6, #1
 8003da4:	f8ca 6000 	str.w	r6, [sl]
 8003da8:	f8da 3000 	ldr.w	r3, [sl]
 8003dac:	4499      	add	r9, r3
 8003dae:	2200      	movs	r2, #0
 8003db0:	2300      	movs	r3, #0
 8003db2:	4620      	mov	r0, r4
 8003db4:	4629      	mov	r1, r5
 8003db6:	f7fc fe9f 	bl	8000af8 <__aeabi_dcmpeq>
 8003dba:	b108      	cbz	r0, 8003dc0 <__cvt+0xa4>
 8003dbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003dc0:	2230      	movs	r2, #48	; 0x30
 8003dc2:	9b03      	ldr	r3, [sp, #12]
 8003dc4:	454b      	cmp	r3, r9
 8003dc6:	d307      	bcc.n	8003dd8 <__cvt+0xbc>
 8003dc8:	9b03      	ldr	r3, [sp, #12]
 8003dca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003dcc:	1bdb      	subs	r3, r3, r7
 8003dce:	4638      	mov	r0, r7
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	b004      	add	sp, #16
 8003dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd8:	1c59      	adds	r1, r3, #1
 8003dda:	9103      	str	r1, [sp, #12]
 8003ddc:	701a      	strb	r2, [r3, #0]
 8003dde:	e7f0      	b.n	8003dc2 <__cvt+0xa6>

08003de0 <__exponent>:
 8003de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003de2:	4603      	mov	r3, r0
 8003de4:	2900      	cmp	r1, #0
 8003de6:	bfb8      	it	lt
 8003de8:	4249      	neglt	r1, r1
 8003dea:	f803 2b02 	strb.w	r2, [r3], #2
 8003dee:	bfb4      	ite	lt
 8003df0:	222d      	movlt	r2, #45	; 0x2d
 8003df2:	222b      	movge	r2, #43	; 0x2b
 8003df4:	2909      	cmp	r1, #9
 8003df6:	7042      	strb	r2, [r0, #1]
 8003df8:	dd2a      	ble.n	8003e50 <__exponent+0x70>
 8003dfa:	f10d 0407 	add.w	r4, sp, #7
 8003dfe:	46a4      	mov	ip, r4
 8003e00:	270a      	movs	r7, #10
 8003e02:	46a6      	mov	lr, r4
 8003e04:	460a      	mov	r2, r1
 8003e06:	fb91 f6f7 	sdiv	r6, r1, r7
 8003e0a:	fb07 1516 	mls	r5, r7, r6, r1
 8003e0e:	3530      	adds	r5, #48	; 0x30
 8003e10:	2a63      	cmp	r2, #99	; 0x63
 8003e12:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003e16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003e1a:	4631      	mov	r1, r6
 8003e1c:	dcf1      	bgt.n	8003e02 <__exponent+0x22>
 8003e1e:	3130      	adds	r1, #48	; 0x30
 8003e20:	f1ae 0502 	sub.w	r5, lr, #2
 8003e24:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003e28:	1c44      	adds	r4, r0, #1
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	4561      	cmp	r1, ip
 8003e2e:	d30a      	bcc.n	8003e46 <__exponent+0x66>
 8003e30:	f10d 0209 	add.w	r2, sp, #9
 8003e34:	eba2 020e 	sub.w	r2, r2, lr
 8003e38:	4565      	cmp	r5, ip
 8003e3a:	bf88      	it	hi
 8003e3c:	2200      	movhi	r2, #0
 8003e3e:	4413      	add	r3, r2
 8003e40:	1a18      	subs	r0, r3, r0
 8003e42:	b003      	add	sp, #12
 8003e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003e4e:	e7ed      	b.n	8003e2c <__exponent+0x4c>
 8003e50:	2330      	movs	r3, #48	; 0x30
 8003e52:	3130      	adds	r1, #48	; 0x30
 8003e54:	7083      	strb	r3, [r0, #2]
 8003e56:	70c1      	strb	r1, [r0, #3]
 8003e58:	1d03      	adds	r3, r0, #4
 8003e5a:	e7f1      	b.n	8003e40 <__exponent+0x60>

08003e5c <_printf_float>:
 8003e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e60:	ed2d 8b02 	vpush	{d8}
 8003e64:	b08d      	sub	sp, #52	; 0x34
 8003e66:	460c      	mov	r4, r1
 8003e68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003e6c:	4616      	mov	r6, r2
 8003e6e:	461f      	mov	r7, r3
 8003e70:	4605      	mov	r5, r0
 8003e72:	f001 fbe9 	bl	8005648 <_localeconv_r>
 8003e76:	f8d0 a000 	ldr.w	sl, [r0]
 8003e7a:	4650      	mov	r0, sl
 8003e7c:	f7fc f9ba 	bl	80001f4 <strlen>
 8003e80:	2300      	movs	r3, #0
 8003e82:	930a      	str	r3, [sp, #40]	; 0x28
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	9305      	str	r3, [sp, #20]
 8003e88:	f8d8 3000 	ldr.w	r3, [r8]
 8003e8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003e90:	3307      	adds	r3, #7
 8003e92:	f023 0307 	bic.w	r3, r3, #7
 8003e96:	f103 0208 	add.w	r2, r3, #8
 8003e9a:	f8c8 2000 	str.w	r2, [r8]
 8003e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ea6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003eaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003eae:	9307      	str	r3, [sp, #28]
 8003eb0:	f8cd 8018 	str.w	r8, [sp, #24]
 8003eb4:	ee08 0a10 	vmov	s16, r0
 8003eb8:	4b9f      	ldr	r3, [pc, #636]	; (8004138 <_printf_float+0x2dc>)
 8003eba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ebe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ec2:	f7fc fe4b 	bl	8000b5c <__aeabi_dcmpun>
 8003ec6:	bb88      	cbnz	r0, 8003f2c <_printf_float+0xd0>
 8003ec8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ecc:	4b9a      	ldr	r3, [pc, #616]	; (8004138 <_printf_float+0x2dc>)
 8003ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ed2:	f7fc fe25 	bl	8000b20 <__aeabi_dcmple>
 8003ed6:	bb48      	cbnz	r0, 8003f2c <_printf_float+0xd0>
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2300      	movs	r3, #0
 8003edc:	4640      	mov	r0, r8
 8003ede:	4649      	mov	r1, r9
 8003ee0:	f7fc fe14 	bl	8000b0c <__aeabi_dcmplt>
 8003ee4:	b110      	cbz	r0, 8003eec <_printf_float+0x90>
 8003ee6:	232d      	movs	r3, #45	; 0x2d
 8003ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eec:	4b93      	ldr	r3, [pc, #588]	; (800413c <_printf_float+0x2e0>)
 8003eee:	4894      	ldr	r0, [pc, #592]	; (8004140 <_printf_float+0x2e4>)
 8003ef0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003ef4:	bf94      	ite	ls
 8003ef6:	4698      	movls	r8, r3
 8003ef8:	4680      	movhi	r8, r0
 8003efa:	2303      	movs	r3, #3
 8003efc:	6123      	str	r3, [r4, #16]
 8003efe:	9b05      	ldr	r3, [sp, #20]
 8003f00:	f023 0204 	bic.w	r2, r3, #4
 8003f04:	6022      	str	r2, [r4, #0]
 8003f06:	f04f 0900 	mov.w	r9, #0
 8003f0a:	9700      	str	r7, [sp, #0]
 8003f0c:	4633      	mov	r3, r6
 8003f0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003f10:	4621      	mov	r1, r4
 8003f12:	4628      	mov	r0, r5
 8003f14:	f000 f9d8 	bl	80042c8 <_printf_common>
 8003f18:	3001      	adds	r0, #1
 8003f1a:	f040 8090 	bne.w	800403e <_printf_float+0x1e2>
 8003f1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f22:	b00d      	add	sp, #52	; 0x34
 8003f24:	ecbd 8b02 	vpop	{d8}
 8003f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2c:	4642      	mov	r2, r8
 8003f2e:	464b      	mov	r3, r9
 8003f30:	4640      	mov	r0, r8
 8003f32:	4649      	mov	r1, r9
 8003f34:	f7fc fe12 	bl	8000b5c <__aeabi_dcmpun>
 8003f38:	b140      	cbz	r0, 8003f4c <_printf_float+0xf0>
 8003f3a:	464b      	mov	r3, r9
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bfbc      	itt	lt
 8003f40:	232d      	movlt	r3, #45	; 0x2d
 8003f42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003f46:	487f      	ldr	r0, [pc, #508]	; (8004144 <_printf_float+0x2e8>)
 8003f48:	4b7f      	ldr	r3, [pc, #508]	; (8004148 <_printf_float+0x2ec>)
 8003f4a:	e7d1      	b.n	8003ef0 <_printf_float+0x94>
 8003f4c:	6863      	ldr	r3, [r4, #4]
 8003f4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003f52:	9206      	str	r2, [sp, #24]
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	d13f      	bne.n	8003fd8 <_printf_float+0x17c>
 8003f58:	2306      	movs	r3, #6
 8003f5a:	6063      	str	r3, [r4, #4]
 8003f5c:	9b05      	ldr	r3, [sp, #20]
 8003f5e:	6861      	ldr	r1, [r4, #4]
 8003f60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003f64:	2300      	movs	r3, #0
 8003f66:	9303      	str	r3, [sp, #12]
 8003f68:	ab0a      	add	r3, sp, #40	; 0x28
 8003f6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003f6e:	ab09      	add	r3, sp, #36	; 0x24
 8003f70:	ec49 8b10 	vmov	d0, r8, r9
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	6022      	str	r2, [r4, #0]
 8003f78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f7ff fecd 	bl	8003d1c <__cvt>
 8003f82:	9b06      	ldr	r3, [sp, #24]
 8003f84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f86:	2b47      	cmp	r3, #71	; 0x47
 8003f88:	4680      	mov	r8, r0
 8003f8a:	d108      	bne.n	8003f9e <_printf_float+0x142>
 8003f8c:	1cc8      	adds	r0, r1, #3
 8003f8e:	db02      	blt.n	8003f96 <_printf_float+0x13a>
 8003f90:	6863      	ldr	r3, [r4, #4]
 8003f92:	4299      	cmp	r1, r3
 8003f94:	dd41      	ble.n	800401a <_printf_float+0x1be>
 8003f96:	f1ab 0b02 	sub.w	fp, fp, #2
 8003f9a:	fa5f fb8b 	uxtb.w	fp, fp
 8003f9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003fa2:	d820      	bhi.n	8003fe6 <_printf_float+0x18a>
 8003fa4:	3901      	subs	r1, #1
 8003fa6:	465a      	mov	r2, fp
 8003fa8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003fac:	9109      	str	r1, [sp, #36]	; 0x24
 8003fae:	f7ff ff17 	bl	8003de0 <__exponent>
 8003fb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fb4:	1813      	adds	r3, r2, r0
 8003fb6:	2a01      	cmp	r2, #1
 8003fb8:	4681      	mov	r9, r0
 8003fba:	6123      	str	r3, [r4, #16]
 8003fbc:	dc02      	bgt.n	8003fc4 <_printf_float+0x168>
 8003fbe:	6822      	ldr	r2, [r4, #0]
 8003fc0:	07d2      	lsls	r2, r2, #31
 8003fc2:	d501      	bpl.n	8003fc8 <_printf_float+0x16c>
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	6123      	str	r3, [r4, #16]
 8003fc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d09c      	beq.n	8003f0a <_printf_float+0xae>
 8003fd0:	232d      	movs	r3, #45	; 0x2d
 8003fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fd6:	e798      	b.n	8003f0a <_printf_float+0xae>
 8003fd8:	9a06      	ldr	r2, [sp, #24]
 8003fda:	2a47      	cmp	r2, #71	; 0x47
 8003fdc:	d1be      	bne.n	8003f5c <_printf_float+0x100>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1bc      	bne.n	8003f5c <_printf_float+0x100>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e7b9      	b.n	8003f5a <_printf_float+0xfe>
 8003fe6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003fea:	d118      	bne.n	800401e <_printf_float+0x1c2>
 8003fec:	2900      	cmp	r1, #0
 8003fee:	6863      	ldr	r3, [r4, #4]
 8003ff0:	dd0b      	ble.n	800400a <_printf_float+0x1ae>
 8003ff2:	6121      	str	r1, [r4, #16]
 8003ff4:	b913      	cbnz	r3, 8003ffc <_printf_float+0x1a0>
 8003ff6:	6822      	ldr	r2, [r4, #0]
 8003ff8:	07d0      	lsls	r0, r2, #31
 8003ffa:	d502      	bpl.n	8004002 <_printf_float+0x1a6>
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	440b      	add	r3, r1
 8004000:	6123      	str	r3, [r4, #16]
 8004002:	65a1      	str	r1, [r4, #88]	; 0x58
 8004004:	f04f 0900 	mov.w	r9, #0
 8004008:	e7de      	b.n	8003fc8 <_printf_float+0x16c>
 800400a:	b913      	cbnz	r3, 8004012 <_printf_float+0x1b6>
 800400c:	6822      	ldr	r2, [r4, #0]
 800400e:	07d2      	lsls	r2, r2, #31
 8004010:	d501      	bpl.n	8004016 <_printf_float+0x1ba>
 8004012:	3302      	adds	r3, #2
 8004014:	e7f4      	b.n	8004000 <_printf_float+0x1a4>
 8004016:	2301      	movs	r3, #1
 8004018:	e7f2      	b.n	8004000 <_printf_float+0x1a4>
 800401a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800401e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004020:	4299      	cmp	r1, r3
 8004022:	db05      	blt.n	8004030 <_printf_float+0x1d4>
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	6121      	str	r1, [r4, #16]
 8004028:	07d8      	lsls	r0, r3, #31
 800402a:	d5ea      	bpl.n	8004002 <_printf_float+0x1a6>
 800402c:	1c4b      	adds	r3, r1, #1
 800402e:	e7e7      	b.n	8004000 <_printf_float+0x1a4>
 8004030:	2900      	cmp	r1, #0
 8004032:	bfd4      	ite	le
 8004034:	f1c1 0202 	rsble	r2, r1, #2
 8004038:	2201      	movgt	r2, #1
 800403a:	4413      	add	r3, r2
 800403c:	e7e0      	b.n	8004000 <_printf_float+0x1a4>
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	055a      	lsls	r2, r3, #21
 8004042:	d407      	bmi.n	8004054 <_printf_float+0x1f8>
 8004044:	6923      	ldr	r3, [r4, #16]
 8004046:	4642      	mov	r2, r8
 8004048:	4631      	mov	r1, r6
 800404a:	4628      	mov	r0, r5
 800404c:	47b8      	blx	r7
 800404e:	3001      	adds	r0, #1
 8004050:	d12c      	bne.n	80040ac <_printf_float+0x250>
 8004052:	e764      	b.n	8003f1e <_printf_float+0xc2>
 8004054:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004058:	f240 80e0 	bls.w	800421c <_printf_float+0x3c0>
 800405c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004060:	2200      	movs	r2, #0
 8004062:	2300      	movs	r3, #0
 8004064:	f7fc fd48 	bl	8000af8 <__aeabi_dcmpeq>
 8004068:	2800      	cmp	r0, #0
 800406a:	d034      	beq.n	80040d6 <_printf_float+0x27a>
 800406c:	4a37      	ldr	r2, [pc, #220]	; (800414c <_printf_float+0x2f0>)
 800406e:	2301      	movs	r3, #1
 8004070:	4631      	mov	r1, r6
 8004072:	4628      	mov	r0, r5
 8004074:	47b8      	blx	r7
 8004076:	3001      	adds	r0, #1
 8004078:	f43f af51 	beq.w	8003f1e <_printf_float+0xc2>
 800407c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004080:	429a      	cmp	r2, r3
 8004082:	db02      	blt.n	800408a <_printf_float+0x22e>
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	07d8      	lsls	r0, r3, #31
 8004088:	d510      	bpl.n	80040ac <_printf_float+0x250>
 800408a:	ee18 3a10 	vmov	r3, s16
 800408e:	4652      	mov	r2, sl
 8004090:	4631      	mov	r1, r6
 8004092:	4628      	mov	r0, r5
 8004094:	47b8      	blx	r7
 8004096:	3001      	adds	r0, #1
 8004098:	f43f af41 	beq.w	8003f1e <_printf_float+0xc2>
 800409c:	f04f 0800 	mov.w	r8, #0
 80040a0:	f104 091a 	add.w	r9, r4, #26
 80040a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040a6:	3b01      	subs	r3, #1
 80040a8:	4543      	cmp	r3, r8
 80040aa:	dc09      	bgt.n	80040c0 <_printf_float+0x264>
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	079b      	lsls	r3, r3, #30
 80040b0:	f100 8105 	bmi.w	80042be <_printf_float+0x462>
 80040b4:	68e0      	ldr	r0, [r4, #12]
 80040b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040b8:	4298      	cmp	r0, r3
 80040ba:	bfb8      	it	lt
 80040bc:	4618      	movlt	r0, r3
 80040be:	e730      	b.n	8003f22 <_printf_float+0xc6>
 80040c0:	2301      	movs	r3, #1
 80040c2:	464a      	mov	r2, r9
 80040c4:	4631      	mov	r1, r6
 80040c6:	4628      	mov	r0, r5
 80040c8:	47b8      	blx	r7
 80040ca:	3001      	adds	r0, #1
 80040cc:	f43f af27 	beq.w	8003f1e <_printf_float+0xc2>
 80040d0:	f108 0801 	add.w	r8, r8, #1
 80040d4:	e7e6      	b.n	80040a4 <_printf_float+0x248>
 80040d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040d8:	2b00      	cmp	r3, #0
 80040da:	dc39      	bgt.n	8004150 <_printf_float+0x2f4>
 80040dc:	4a1b      	ldr	r2, [pc, #108]	; (800414c <_printf_float+0x2f0>)
 80040de:	2301      	movs	r3, #1
 80040e0:	4631      	mov	r1, r6
 80040e2:	4628      	mov	r0, r5
 80040e4:	47b8      	blx	r7
 80040e6:	3001      	adds	r0, #1
 80040e8:	f43f af19 	beq.w	8003f1e <_printf_float+0xc2>
 80040ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040f0:	4313      	orrs	r3, r2
 80040f2:	d102      	bne.n	80040fa <_printf_float+0x29e>
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	07d9      	lsls	r1, r3, #31
 80040f8:	d5d8      	bpl.n	80040ac <_printf_float+0x250>
 80040fa:	ee18 3a10 	vmov	r3, s16
 80040fe:	4652      	mov	r2, sl
 8004100:	4631      	mov	r1, r6
 8004102:	4628      	mov	r0, r5
 8004104:	47b8      	blx	r7
 8004106:	3001      	adds	r0, #1
 8004108:	f43f af09 	beq.w	8003f1e <_printf_float+0xc2>
 800410c:	f04f 0900 	mov.w	r9, #0
 8004110:	f104 0a1a 	add.w	sl, r4, #26
 8004114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004116:	425b      	negs	r3, r3
 8004118:	454b      	cmp	r3, r9
 800411a:	dc01      	bgt.n	8004120 <_printf_float+0x2c4>
 800411c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800411e:	e792      	b.n	8004046 <_printf_float+0x1ea>
 8004120:	2301      	movs	r3, #1
 8004122:	4652      	mov	r2, sl
 8004124:	4631      	mov	r1, r6
 8004126:	4628      	mov	r0, r5
 8004128:	47b8      	blx	r7
 800412a:	3001      	adds	r0, #1
 800412c:	f43f aef7 	beq.w	8003f1e <_printf_float+0xc2>
 8004130:	f109 0901 	add.w	r9, r9, #1
 8004134:	e7ee      	b.n	8004114 <_printf_float+0x2b8>
 8004136:	bf00      	nop
 8004138:	7fefffff 	.word	0x7fefffff
 800413c:	08007fa8 	.word	0x08007fa8
 8004140:	08007fac 	.word	0x08007fac
 8004144:	08007fb4 	.word	0x08007fb4
 8004148:	08007fb0 	.word	0x08007fb0
 800414c:	08008239 	.word	0x08008239
 8004150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004152:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004154:	429a      	cmp	r2, r3
 8004156:	bfa8      	it	ge
 8004158:	461a      	movge	r2, r3
 800415a:	2a00      	cmp	r2, #0
 800415c:	4691      	mov	r9, r2
 800415e:	dc37      	bgt.n	80041d0 <_printf_float+0x374>
 8004160:	f04f 0b00 	mov.w	fp, #0
 8004164:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004168:	f104 021a 	add.w	r2, r4, #26
 800416c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800416e:	9305      	str	r3, [sp, #20]
 8004170:	eba3 0309 	sub.w	r3, r3, r9
 8004174:	455b      	cmp	r3, fp
 8004176:	dc33      	bgt.n	80041e0 <_printf_float+0x384>
 8004178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800417c:	429a      	cmp	r2, r3
 800417e:	db3b      	blt.n	80041f8 <_printf_float+0x39c>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	07da      	lsls	r2, r3, #31
 8004184:	d438      	bmi.n	80041f8 <_printf_float+0x39c>
 8004186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004188:	9a05      	ldr	r2, [sp, #20]
 800418a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800418c:	1a9a      	subs	r2, r3, r2
 800418e:	eba3 0901 	sub.w	r9, r3, r1
 8004192:	4591      	cmp	r9, r2
 8004194:	bfa8      	it	ge
 8004196:	4691      	movge	r9, r2
 8004198:	f1b9 0f00 	cmp.w	r9, #0
 800419c:	dc35      	bgt.n	800420a <_printf_float+0x3ae>
 800419e:	f04f 0800 	mov.w	r8, #0
 80041a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041a6:	f104 0a1a 	add.w	sl, r4, #26
 80041aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	eba3 0309 	sub.w	r3, r3, r9
 80041b4:	4543      	cmp	r3, r8
 80041b6:	f77f af79 	ble.w	80040ac <_printf_float+0x250>
 80041ba:	2301      	movs	r3, #1
 80041bc:	4652      	mov	r2, sl
 80041be:	4631      	mov	r1, r6
 80041c0:	4628      	mov	r0, r5
 80041c2:	47b8      	blx	r7
 80041c4:	3001      	adds	r0, #1
 80041c6:	f43f aeaa 	beq.w	8003f1e <_printf_float+0xc2>
 80041ca:	f108 0801 	add.w	r8, r8, #1
 80041ce:	e7ec      	b.n	80041aa <_printf_float+0x34e>
 80041d0:	4613      	mov	r3, r2
 80041d2:	4631      	mov	r1, r6
 80041d4:	4642      	mov	r2, r8
 80041d6:	4628      	mov	r0, r5
 80041d8:	47b8      	blx	r7
 80041da:	3001      	adds	r0, #1
 80041dc:	d1c0      	bne.n	8004160 <_printf_float+0x304>
 80041de:	e69e      	b.n	8003f1e <_printf_float+0xc2>
 80041e0:	2301      	movs	r3, #1
 80041e2:	4631      	mov	r1, r6
 80041e4:	4628      	mov	r0, r5
 80041e6:	9205      	str	r2, [sp, #20]
 80041e8:	47b8      	blx	r7
 80041ea:	3001      	adds	r0, #1
 80041ec:	f43f ae97 	beq.w	8003f1e <_printf_float+0xc2>
 80041f0:	9a05      	ldr	r2, [sp, #20]
 80041f2:	f10b 0b01 	add.w	fp, fp, #1
 80041f6:	e7b9      	b.n	800416c <_printf_float+0x310>
 80041f8:	ee18 3a10 	vmov	r3, s16
 80041fc:	4652      	mov	r2, sl
 80041fe:	4631      	mov	r1, r6
 8004200:	4628      	mov	r0, r5
 8004202:	47b8      	blx	r7
 8004204:	3001      	adds	r0, #1
 8004206:	d1be      	bne.n	8004186 <_printf_float+0x32a>
 8004208:	e689      	b.n	8003f1e <_printf_float+0xc2>
 800420a:	9a05      	ldr	r2, [sp, #20]
 800420c:	464b      	mov	r3, r9
 800420e:	4442      	add	r2, r8
 8004210:	4631      	mov	r1, r6
 8004212:	4628      	mov	r0, r5
 8004214:	47b8      	blx	r7
 8004216:	3001      	adds	r0, #1
 8004218:	d1c1      	bne.n	800419e <_printf_float+0x342>
 800421a:	e680      	b.n	8003f1e <_printf_float+0xc2>
 800421c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800421e:	2a01      	cmp	r2, #1
 8004220:	dc01      	bgt.n	8004226 <_printf_float+0x3ca>
 8004222:	07db      	lsls	r3, r3, #31
 8004224:	d538      	bpl.n	8004298 <_printf_float+0x43c>
 8004226:	2301      	movs	r3, #1
 8004228:	4642      	mov	r2, r8
 800422a:	4631      	mov	r1, r6
 800422c:	4628      	mov	r0, r5
 800422e:	47b8      	blx	r7
 8004230:	3001      	adds	r0, #1
 8004232:	f43f ae74 	beq.w	8003f1e <_printf_float+0xc2>
 8004236:	ee18 3a10 	vmov	r3, s16
 800423a:	4652      	mov	r2, sl
 800423c:	4631      	mov	r1, r6
 800423e:	4628      	mov	r0, r5
 8004240:	47b8      	blx	r7
 8004242:	3001      	adds	r0, #1
 8004244:	f43f ae6b 	beq.w	8003f1e <_printf_float+0xc2>
 8004248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800424c:	2200      	movs	r2, #0
 800424e:	2300      	movs	r3, #0
 8004250:	f7fc fc52 	bl	8000af8 <__aeabi_dcmpeq>
 8004254:	b9d8      	cbnz	r0, 800428e <_printf_float+0x432>
 8004256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004258:	f108 0201 	add.w	r2, r8, #1
 800425c:	3b01      	subs	r3, #1
 800425e:	4631      	mov	r1, r6
 8004260:	4628      	mov	r0, r5
 8004262:	47b8      	blx	r7
 8004264:	3001      	adds	r0, #1
 8004266:	d10e      	bne.n	8004286 <_printf_float+0x42a>
 8004268:	e659      	b.n	8003f1e <_printf_float+0xc2>
 800426a:	2301      	movs	r3, #1
 800426c:	4652      	mov	r2, sl
 800426e:	4631      	mov	r1, r6
 8004270:	4628      	mov	r0, r5
 8004272:	47b8      	blx	r7
 8004274:	3001      	adds	r0, #1
 8004276:	f43f ae52 	beq.w	8003f1e <_printf_float+0xc2>
 800427a:	f108 0801 	add.w	r8, r8, #1
 800427e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004280:	3b01      	subs	r3, #1
 8004282:	4543      	cmp	r3, r8
 8004284:	dcf1      	bgt.n	800426a <_printf_float+0x40e>
 8004286:	464b      	mov	r3, r9
 8004288:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800428c:	e6dc      	b.n	8004048 <_printf_float+0x1ec>
 800428e:	f04f 0800 	mov.w	r8, #0
 8004292:	f104 0a1a 	add.w	sl, r4, #26
 8004296:	e7f2      	b.n	800427e <_printf_float+0x422>
 8004298:	2301      	movs	r3, #1
 800429a:	4642      	mov	r2, r8
 800429c:	e7df      	b.n	800425e <_printf_float+0x402>
 800429e:	2301      	movs	r3, #1
 80042a0:	464a      	mov	r2, r9
 80042a2:	4631      	mov	r1, r6
 80042a4:	4628      	mov	r0, r5
 80042a6:	47b8      	blx	r7
 80042a8:	3001      	adds	r0, #1
 80042aa:	f43f ae38 	beq.w	8003f1e <_printf_float+0xc2>
 80042ae:	f108 0801 	add.w	r8, r8, #1
 80042b2:	68e3      	ldr	r3, [r4, #12]
 80042b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042b6:	1a5b      	subs	r3, r3, r1
 80042b8:	4543      	cmp	r3, r8
 80042ba:	dcf0      	bgt.n	800429e <_printf_float+0x442>
 80042bc:	e6fa      	b.n	80040b4 <_printf_float+0x258>
 80042be:	f04f 0800 	mov.w	r8, #0
 80042c2:	f104 0919 	add.w	r9, r4, #25
 80042c6:	e7f4      	b.n	80042b2 <_printf_float+0x456>

080042c8 <_printf_common>:
 80042c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042cc:	4616      	mov	r6, r2
 80042ce:	4699      	mov	r9, r3
 80042d0:	688a      	ldr	r2, [r1, #8]
 80042d2:	690b      	ldr	r3, [r1, #16]
 80042d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042d8:	4293      	cmp	r3, r2
 80042da:	bfb8      	it	lt
 80042dc:	4613      	movlt	r3, r2
 80042de:	6033      	str	r3, [r6, #0]
 80042e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042e4:	4607      	mov	r7, r0
 80042e6:	460c      	mov	r4, r1
 80042e8:	b10a      	cbz	r2, 80042ee <_printf_common+0x26>
 80042ea:	3301      	adds	r3, #1
 80042ec:	6033      	str	r3, [r6, #0]
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	0699      	lsls	r1, r3, #26
 80042f2:	bf42      	ittt	mi
 80042f4:	6833      	ldrmi	r3, [r6, #0]
 80042f6:	3302      	addmi	r3, #2
 80042f8:	6033      	strmi	r3, [r6, #0]
 80042fa:	6825      	ldr	r5, [r4, #0]
 80042fc:	f015 0506 	ands.w	r5, r5, #6
 8004300:	d106      	bne.n	8004310 <_printf_common+0x48>
 8004302:	f104 0a19 	add.w	sl, r4, #25
 8004306:	68e3      	ldr	r3, [r4, #12]
 8004308:	6832      	ldr	r2, [r6, #0]
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	42ab      	cmp	r3, r5
 800430e:	dc26      	bgt.n	800435e <_printf_common+0x96>
 8004310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004314:	1e13      	subs	r3, r2, #0
 8004316:	6822      	ldr	r2, [r4, #0]
 8004318:	bf18      	it	ne
 800431a:	2301      	movne	r3, #1
 800431c:	0692      	lsls	r2, r2, #26
 800431e:	d42b      	bmi.n	8004378 <_printf_common+0xb0>
 8004320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004324:	4649      	mov	r1, r9
 8004326:	4638      	mov	r0, r7
 8004328:	47c0      	blx	r8
 800432a:	3001      	adds	r0, #1
 800432c:	d01e      	beq.n	800436c <_printf_common+0xa4>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	68e5      	ldr	r5, [r4, #12]
 8004332:	6832      	ldr	r2, [r6, #0]
 8004334:	f003 0306 	and.w	r3, r3, #6
 8004338:	2b04      	cmp	r3, #4
 800433a:	bf08      	it	eq
 800433c:	1aad      	subeq	r5, r5, r2
 800433e:	68a3      	ldr	r3, [r4, #8]
 8004340:	6922      	ldr	r2, [r4, #16]
 8004342:	bf0c      	ite	eq
 8004344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004348:	2500      	movne	r5, #0
 800434a:	4293      	cmp	r3, r2
 800434c:	bfc4      	itt	gt
 800434e:	1a9b      	subgt	r3, r3, r2
 8004350:	18ed      	addgt	r5, r5, r3
 8004352:	2600      	movs	r6, #0
 8004354:	341a      	adds	r4, #26
 8004356:	42b5      	cmp	r5, r6
 8004358:	d11a      	bne.n	8004390 <_printf_common+0xc8>
 800435a:	2000      	movs	r0, #0
 800435c:	e008      	b.n	8004370 <_printf_common+0xa8>
 800435e:	2301      	movs	r3, #1
 8004360:	4652      	mov	r2, sl
 8004362:	4649      	mov	r1, r9
 8004364:	4638      	mov	r0, r7
 8004366:	47c0      	blx	r8
 8004368:	3001      	adds	r0, #1
 800436a:	d103      	bne.n	8004374 <_printf_common+0xac>
 800436c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004374:	3501      	adds	r5, #1
 8004376:	e7c6      	b.n	8004306 <_printf_common+0x3e>
 8004378:	18e1      	adds	r1, r4, r3
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	2030      	movs	r0, #48	; 0x30
 800437e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004382:	4422      	add	r2, r4
 8004384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800438c:	3302      	adds	r3, #2
 800438e:	e7c7      	b.n	8004320 <_printf_common+0x58>
 8004390:	2301      	movs	r3, #1
 8004392:	4622      	mov	r2, r4
 8004394:	4649      	mov	r1, r9
 8004396:	4638      	mov	r0, r7
 8004398:	47c0      	blx	r8
 800439a:	3001      	adds	r0, #1
 800439c:	d0e6      	beq.n	800436c <_printf_common+0xa4>
 800439e:	3601      	adds	r6, #1
 80043a0:	e7d9      	b.n	8004356 <_printf_common+0x8e>
	...

080043a4 <_printf_i>:
 80043a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043a8:	7e0f      	ldrb	r7, [r1, #24]
 80043aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043ac:	2f78      	cmp	r7, #120	; 0x78
 80043ae:	4691      	mov	r9, r2
 80043b0:	4680      	mov	r8, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	469a      	mov	sl, r3
 80043b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043ba:	d807      	bhi.n	80043cc <_printf_i+0x28>
 80043bc:	2f62      	cmp	r7, #98	; 0x62
 80043be:	d80a      	bhi.n	80043d6 <_printf_i+0x32>
 80043c0:	2f00      	cmp	r7, #0
 80043c2:	f000 80d8 	beq.w	8004576 <_printf_i+0x1d2>
 80043c6:	2f58      	cmp	r7, #88	; 0x58
 80043c8:	f000 80a3 	beq.w	8004512 <_printf_i+0x16e>
 80043cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043d4:	e03a      	b.n	800444c <_printf_i+0xa8>
 80043d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043da:	2b15      	cmp	r3, #21
 80043dc:	d8f6      	bhi.n	80043cc <_printf_i+0x28>
 80043de:	a101      	add	r1, pc, #4	; (adr r1, 80043e4 <_printf_i+0x40>)
 80043e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043e4:	0800443d 	.word	0x0800443d
 80043e8:	08004451 	.word	0x08004451
 80043ec:	080043cd 	.word	0x080043cd
 80043f0:	080043cd 	.word	0x080043cd
 80043f4:	080043cd 	.word	0x080043cd
 80043f8:	080043cd 	.word	0x080043cd
 80043fc:	08004451 	.word	0x08004451
 8004400:	080043cd 	.word	0x080043cd
 8004404:	080043cd 	.word	0x080043cd
 8004408:	080043cd 	.word	0x080043cd
 800440c:	080043cd 	.word	0x080043cd
 8004410:	0800455d 	.word	0x0800455d
 8004414:	08004481 	.word	0x08004481
 8004418:	0800453f 	.word	0x0800453f
 800441c:	080043cd 	.word	0x080043cd
 8004420:	080043cd 	.word	0x080043cd
 8004424:	0800457f 	.word	0x0800457f
 8004428:	080043cd 	.word	0x080043cd
 800442c:	08004481 	.word	0x08004481
 8004430:	080043cd 	.word	0x080043cd
 8004434:	080043cd 	.word	0x080043cd
 8004438:	08004547 	.word	0x08004547
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	1d1a      	adds	r2, r3, #4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	602a      	str	r2, [r5, #0]
 8004444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800444c:	2301      	movs	r3, #1
 800444e:	e0a3      	b.n	8004598 <_printf_i+0x1f4>
 8004450:	6820      	ldr	r0, [r4, #0]
 8004452:	6829      	ldr	r1, [r5, #0]
 8004454:	0606      	lsls	r6, r0, #24
 8004456:	f101 0304 	add.w	r3, r1, #4
 800445a:	d50a      	bpl.n	8004472 <_printf_i+0xce>
 800445c:	680e      	ldr	r6, [r1, #0]
 800445e:	602b      	str	r3, [r5, #0]
 8004460:	2e00      	cmp	r6, #0
 8004462:	da03      	bge.n	800446c <_printf_i+0xc8>
 8004464:	232d      	movs	r3, #45	; 0x2d
 8004466:	4276      	negs	r6, r6
 8004468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800446c:	485e      	ldr	r0, [pc, #376]	; (80045e8 <_printf_i+0x244>)
 800446e:	230a      	movs	r3, #10
 8004470:	e019      	b.n	80044a6 <_printf_i+0x102>
 8004472:	680e      	ldr	r6, [r1, #0]
 8004474:	602b      	str	r3, [r5, #0]
 8004476:	f010 0f40 	tst.w	r0, #64	; 0x40
 800447a:	bf18      	it	ne
 800447c:	b236      	sxthne	r6, r6
 800447e:	e7ef      	b.n	8004460 <_printf_i+0xbc>
 8004480:	682b      	ldr	r3, [r5, #0]
 8004482:	6820      	ldr	r0, [r4, #0]
 8004484:	1d19      	adds	r1, r3, #4
 8004486:	6029      	str	r1, [r5, #0]
 8004488:	0601      	lsls	r1, r0, #24
 800448a:	d501      	bpl.n	8004490 <_printf_i+0xec>
 800448c:	681e      	ldr	r6, [r3, #0]
 800448e:	e002      	b.n	8004496 <_printf_i+0xf2>
 8004490:	0646      	lsls	r6, r0, #25
 8004492:	d5fb      	bpl.n	800448c <_printf_i+0xe8>
 8004494:	881e      	ldrh	r6, [r3, #0]
 8004496:	4854      	ldr	r0, [pc, #336]	; (80045e8 <_printf_i+0x244>)
 8004498:	2f6f      	cmp	r7, #111	; 0x6f
 800449a:	bf0c      	ite	eq
 800449c:	2308      	moveq	r3, #8
 800449e:	230a      	movne	r3, #10
 80044a0:	2100      	movs	r1, #0
 80044a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044a6:	6865      	ldr	r5, [r4, #4]
 80044a8:	60a5      	str	r5, [r4, #8]
 80044aa:	2d00      	cmp	r5, #0
 80044ac:	bfa2      	ittt	ge
 80044ae:	6821      	ldrge	r1, [r4, #0]
 80044b0:	f021 0104 	bicge.w	r1, r1, #4
 80044b4:	6021      	strge	r1, [r4, #0]
 80044b6:	b90e      	cbnz	r6, 80044bc <_printf_i+0x118>
 80044b8:	2d00      	cmp	r5, #0
 80044ba:	d04d      	beq.n	8004558 <_printf_i+0x1b4>
 80044bc:	4615      	mov	r5, r2
 80044be:	fbb6 f1f3 	udiv	r1, r6, r3
 80044c2:	fb03 6711 	mls	r7, r3, r1, r6
 80044c6:	5dc7      	ldrb	r7, [r0, r7]
 80044c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044cc:	4637      	mov	r7, r6
 80044ce:	42bb      	cmp	r3, r7
 80044d0:	460e      	mov	r6, r1
 80044d2:	d9f4      	bls.n	80044be <_printf_i+0x11a>
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d10b      	bne.n	80044f0 <_printf_i+0x14c>
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	07de      	lsls	r6, r3, #31
 80044dc:	d508      	bpl.n	80044f0 <_printf_i+0x14c>
 80044de:	6923      	ldr	r3, [r4, #16]
 80044e0:	6861      	ldr	r1, [r4, #4]
 80044e2:	4299      	cmp	r1, r3
 80044e4:	bfde      	ittt	le
 80044e6:	2330      	movle	r3, #48	; 0x30
 80044e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80044f0:	1b52      	subs	r2, r2, r5
 80044f2:	6122      	str	r2, [r4, #16]
 80044f4:	f8cd a000 	str.w	sl, [sp]
 80044f8:	464b      	mov	r3, r9
 80044fa:	aa03      	add	r2, sp, #12
 80044fc:	4621      	mov	r1, r4
 80044fe:	4640      	mov	r0, r8
 8004500:	f7ff fee2 	bl	80042c8 <_printf_common>
 8004504:	3001      	adds	r0, #1
 8004506:	d14c      	bne.n	80045a2 <_printf_i+0x1fe>
 8004508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800450c:	b004      	add	sp, #16
 800450e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004512:	4835      	ldr	r0, [pc, #212]	; (80045e8 <_printf_i+0x244>)
 8004514:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004518:	6829      	ldr	r1, [r5, #0]
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004520:	6029      	str	r1, [r5, #0]
 8004522:	061d      	lsls	r5, r3, #24
 8004524:	d514      	bpl.n	8004550 <_printf_i+0x1ac>
 8004526:	07df      	lsls	r7, r3, #31
 8004528:	bf44      	itt	mi
 800452a:	f043 0320 	orrmi.w	r3, r3, #32
 800452e:	6023      	strmi	r3, [r4, #0]
 8004530:	b91e      	cbnz	r6, 800453a <_printf_i+0x196>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	f023 0320 	bic.w	r3, r3, #32
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	2310      	movs	r3, #16
 800453c:	e7b0      	b.n	80044a0 <_printf_i+0xfc>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	f043 0320 	orr.w	r3, r3, #32
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	2378      	movs	r3, #120	; 0x78
 8004548:	4828      	ldr	r0, [pc, #160]	; (80045ec <_printf_i+0x248>)
 800454a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800454e:	e7e3      	b.n	8004518 <_printf_i+0x174>
 8004550:	0659      	lsls	r1, r3, #25
 8004552:	bf48      	it	mi
 8004554:	b2b6      	uxthmi	r6, r6
 8004556:	e7e6      	b.n	8004526 <_printf_i+0x182>
 8004558:	4615      	mov	r5, r2
 800455a:	e7bb      	b.n	80044d4 <_printf_i+0x130>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	6826      	ldr	r6, [r4, #0]
 8004560:	6961      	ldr	r1, [r4, #20]
 8004562:	1d18      	adds	r0, r3, #4
 8004564:	6028      	str	r0, [r5, #0]
 8004566:	0635      	lsls	r5, r6, #24
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	d501      	bpl.n	8004570 <_printf_i+0x1cc>
 800456c:	6019      	str	r1, [r3, #0]
 800456e:	e002      	b.n	8004576 <_printf_i+0x1d2>
 8004570:	0670      	lsls	r0, r6, #25
 8004572:	d5fb      	bpl.n	800456c <_printf_i+0x1c8>
 8004574:	8019      	strh	r1, [r3, #0]
 8004576:	2300      	movs	r3, #0
 8004578:	6123      	str	r3, [r4, #16]
 800457a:	4615      	mov	r5, r2
 800457c:	e7ba      	b.n	80044f4 <_printf_i+0x150>
 800457e:	682b      	ldr	r3, [r5, #0]
 8004580:	1d1a      	adds	r2, r3, #4
 8004582:	602a      	str	r2, [r5, #0]
 8004584:	681d      	ldr	r5, [r3, #0]
 8004586:	6862      	ldr	r2, [r4, #4]
 8004588:	2100      	movs	r1, #0
 800458a:	4628      	mov	r0, r5
 800458c:	f7fb fe40 	bl	8000210 <memchr>
 8004590:	b108      	cbz	r0, 8004596 <_printf_i+0x1f2>
 8004592:	1b40      	subs	r0, r0, r5
 8004594:	6060      	str	r0, [r4, #4]
 8004596:	6863      	ldr	r3, [r4, #4]
 8004598:	6123      	str	r3, [r4, #16]
 800459a:	2300      	movs	r3, #0
 800459c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a0:	e7a8      	b.n	80044f4 <_printf_i+0x150>
 80045a2:	6923      	ldr	r3, [r4, #16]
 80045a4:	462a      	mov	r2, r5
 80045a6:	4649      	mov	r1, r9
 80045a8:	4640      	mov	r0, r8
 80045aa:	47d0      	blx	sl
 80045ac:	3001      	adds	r0, #1
 80045ae:	d0ab      	beq.n	8004508 <_printf_i+0x164>
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	079b      	lsls	r3, r3, #30
 80045b4:	d413      	bmi.n	80045de <_printf_i+0x23a>
 80045b6:	68e0      	ldr	r0, [r4, #12]
 80045b8:	9b03      	ldr	r3, [sp, #12]
 80045ba:	4298      	cmp	r0, r3
 80045bc:	bfb8      	it	lt
 80045be:	4618      	movlt	r0, r3
 80045c0:	e7a4      	b.n	800450c <_printf_i+0x168>
 80045c2:	2301      	movs	r3, #1
 80045c4:	4632      	mov	r2, r6
 80045c6:	4649      	mov	r1, r9
 80045c8:	4640      	mov	r0, r8
 80045ca:	47d0      	blx	sl
 80045cc:	3001      	adds	r0, #1
 80045ce:	d09b      	beq.n	8004508 <_printf_i+0x164>
 80045d0:	3501      	adds	r5, #1
 80045d2:	68e3      	ldr	r3, [r4, #12]
 80045d4:	9903      	ldr	r1, [sp, #12]
 80045d6:	1a5b      	subs	r3, r3, r1
 80045d8:	42ab      	cmp	r3, r5
 80045da:	dcf2      	bgt.n	80045c2 <_printf_i+0x21e>
 80045dc:	e7eb      	b.n	80045b6 <_printf_i+0x212>
 80045de:	2500      	movs	r5, #0
 80045e0:	f104 0619 	add.w	r6, r4, #25
 80045e4:	e7f5      	b.n	80045d2 <_printf_i+0x22e>
 80045e6:	bf00      	nop
 80045e8:	08007fb8 	.word	0x08007fb8
 80045ec:	08007fc9 	.word	0x08007fc9

080045f0 <iprintf>:
 80045f0:	b40f      	push	{r0, r1, r2, r3}
 80045f2:	4b0a      	ldr	r3, [pc, #40]	; (800461c <iprintf+0x2c>)
 80045f4:	b513      	push	{r0, r1, r4, lr}
 80045f6:	681c      	ldr	r4, [r3, #0]
 80045f8:	b124      	cbz	r4, 8004604 <iprintf+0x14>
 80045fa:	69a3      	ldr	r3, [r4, #24]
 80045fc:	b913      	cbnz	r3, 8004604 <iprintf+0x14>
 80045fe:	4620      	mov	r0, r4
 8004600:	f000 ff84 	bl	800550c <__sinit>
 8004604:	ab05      	add	r3, sp, #20
 8004606:	9a04      	ldr	r2, [sp, #16]
 8004608:	68a1      	ldr	r1, [r4, #8]
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	4620      	mov	r0, r4
 800460e:	f001 fde5 	bl	80061dc <_vfiprintf_r>
 8004612:	b002      	add	sp, #8
 8004614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004618:	b004      	add	sp, #16
 800461a:	4770      	bx	lr
 800461c:	20000008 	.word	0x20000008

08004620 <_sbrk_r>:
 8004620:	b538      	push	{r3, r4, r5, lr}
 8004622:	4d06      	ldr	r5, [pc, #24]	; (800463c <_sbrk_r+0x1c>)
 8004624:	2300      	movs	r3, #0
 8004626:	4604      	mov	r4, r0
 8004628:	4608      	mov	r0, r1
 800462a:	602b      	str	r3, [r5, #0]
 800462c:	f003 fc12 	bl	8007e54 <_sbrk>
 8004630:	1c43      	adds	r3, r0, #1
 8004632:	d102      	bne.n	800463a <_sbrk_r+0x1a>
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	b103      	cbz	r3, 800463a <_sbrk_r+0x1a>
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	bd38      	pop	{r3, r4, r5, pc}
 800463c:	20000eb0 	.word	0x20000eb0

08004640 <siscanf>:
 8004640:	b40e      	push	{r1, r2, r3}
 8004642:	b510      	push	{r4, lr}
 8004644:	b09f      	sub	sp, #124	; 0x7c
 8004646:	ac21      	add	r4, sp, #132	; 0x84
 8004648:	f44f 7101 	mov.w	r1, #516	; 0x204
 800464c:	f854 2b04 	ldr.w	r2, [r4], #4
 8004650:	9201      	str	r2, [sp, #4]
 8004652:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004656:	9004      	str	r0, [sp, #16]
 8004658:	9008      	str	r0, [sp, #32]
 800465a:	f7fb fdcb 	bl	80001f4 <strlen>
 800465e:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <siscanf+0x50>)
 8004660:	9005      	str	r0, [sp, #20]
 8004662:	9009      	str	r0, [sp, #36]	; 0x24
 8004664:	930d      	str	r3, [sp, #52]	; 0x34
 8004666:	480b      	ldr	r0, [pc, #44]	; (8004694 <siscanf+0x54>)
 8004668:	9a01      	ldr	r2, [sp, #4]
 800466a:	6800      	ldr	r0, [r0, #0]
 800466c:	9403      	str	r4, [sp, #12]
 800466e:	2300      	movs	r3, #0
 8004670:	9311      	str	r3, [sp, #68]	; 0x44
 8004672:	9316      	str	r3, [sp, #88]	; 0x58
 8004674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004678:	f8ad 301e 	strh.w	r3, [sp, #30]
 800467c:	a904      	add	r1, sp, #16
 800467e:	4623      	mov	r3, r4
 8004680:	f001 fc0a 	bl	8005e98 <__ssvfiscanf_r>
 8004684:	b01f      	add	sp, #124	; 0x7c
 8004686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800468a:	b003      	add	sp, #12
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	080046bb 	.word	0x080046bb
 8004694:	20000008 	.word	0x20000008

08004698 <__sread>:
 8004698:	b510      	push	{r4, lr}
 800469a:	460c      	mov	r4, r1
 800469c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a0:	f002 f81e 	bl	80066e0 <_read_r>
 80046a4:	2800      	cmp	r0, #0
 80046a6:	bfab      	itete	ge
 80046a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046aa:	89a3      	ldrhlt	r3, [r4, #12]
 80046ac:	181b      	addge	r3, r3, r0
 80046ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046b2:	bfac      	ite	ge
 80046b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80046b6:	81a3      	strhlt	r3, [r4, #12]
 80046b8:	bd10      	pop	{r4, pc}

080046ba <__seofread>:
 80046ba:	2000      	movs	r0, #0
 80046bc:	4770      	bx	lr

080046be <__swrite>:
 80046be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c2:	461f      	mov	r7, r3
 80046c4:	898b      	ldrh	r3, [r1, #12]
 80046c6:	05db      	lsls	r3, r3, #23
 80046c8:	4605      	mov	r5, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	4616      	mov	r6, r2
 80046ce:	d505      	bpl.n	80046dc <__swrite+0x1e>
 80046d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d4:	2302      	movs	r3, #2
 80046d6:	2200      	movs	r2, #0
 80046d8:	f000 ffbe 	bl	8005658 <_lseek_r>
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046e6:	81a3      	strh	r3, [r4, #12]
 80046e8:	4632      	mov	r2, r6
 80046ea:	463b      	mov	r3, r7
 80046ec:	4628      	mov	r0, r5
 80046ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046f2:	f000 b817 	b.w	8004724 <_write_r>

080046f6 <__sseek>:
 80046f6:	b510      	push	{r4, lr}
 80046f8:	460c      	mov	r4, r1
 80046fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046fe:	f000 ffab 	bl	8005658 <_lseek_r>
 8004702:	1c43      	adds	r3, r0, #1
 8004704:	89a3      	ldrh	r3, [r4, #12]
 8004706:	bf15      	itete	ne
 8004708:	6560      	strne	r0, [r4, #84]	; 0x54
 800470a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800470e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004712:	81a3      	strheq	r3, [r4, #12]
 8004714:	bf18      	it	ne
 8004716:	81a3      	strhne	r3, [r4, #12]
 8004718:	bd10      	pop	{r4, pc}

0800471a <__sclose>:
 800471a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800471e:	f000 b813 	b.w	8004748 <_close_r>
	...

08004724 <_write_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4d07      	ldr	r5, [pc, #28]	; (8004744 <_write_r+0x20>)
 8004728:	4604      	mov	r4, r0
 800472a:	4608      	mov	r0, r1
 800472c:	4611      	mov	r1, r2
 800472e:	2200      	movs	r2, #0
 8004730:	602a      	str	r2, [r5, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	f7fc fd17 	bl	8001166 <_write>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	d102      	bne.n	8004742 <_write_r+0x1e>
 800473c:	682b      	ldr	r3, [r5, #0]
 800473e:	b103      	cbz	r3, 8004742 <_write_r+0x1e>
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	bd38      	pop	{r3, r4, r5, pc}
 8004744:	20000eb0 	.word	0x20000eb0

08004748 <_close_r>:
 8004748:	b538      	push	{r3, r4, r5, lr}
 800474a:	4d06      	ldr	r5, [pc, #24]	; (8004764 <_close_r+0x1c>)
 800474c:	2300      	movs	r3, #0
 800474e:	4604      	mov	r4, r0
 8004750:	4608      	mov	r0, r1
 8004752:	602b      	str	r3, [r5, #0]
 8004754:	f7fc fd23 	bl	800119e <_close>
 8004758:	1c43      	adds	r3, r0, #1
 800475a:	d102      	bne.n	8004762 <_close_r+0x1a>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	b103      	cbz	r3, 8004762 <_close_r+0x1a>
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	bd38      	pop	{r3, r4, r5, pc}
 8004764:	20000eb0 	.word	0x20000eb0

08004768 <quorem>:
 8004768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800476c:	6903      	ldr	r3, [r0, #16]
 800476e:	690c      	ldr	r4, [r1, #16]
 8004770:	42a3      	cmp	r3, r4
 8004772:	4607      	mov	r7, r0
 8004774:	f2c0 8081 	blt.w	800487a <quorem+0x112>
 8004778:	3c01      	subs	r4, #1
 800477a:	f101 0814 	add.w	r8, r1, #20
 800477e:	f100 0514 	add.w	r5, r0, #20
 8004782:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800478c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004790:	3301      	adds	r3, #1
 8004792:	429a      	cmp	r2, r3
 8004794:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004798:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800479c:	fbb2 f6f3 	udiv	r6, r2, r3
 80047a0:	d331      	bcc.n	8004806 <quorem+0x9e>
 80047a2:	f04f 0e00 	mov.w	lr, #0
 80047a6:	4640      	mov	r0, r8
 80047a8:	46ac      	mov	ip, r5
 80047aa:	46f2      	mov	sl, lr
 80047ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80047b0:	b293      	uxth	r3, r2
 80047b2:	fb06 e303 	mla	r3, r6, r3, lr
 80047b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	ebaa 0303 	sub.w	r3, sl, r3
 80047c0:	f8dc a000 	ldr.w	sl, [ip]
 80047c4:	0c12      	lsrs	r2, r2, #16
 80047c6:	fa13 f38a 	uxtah	r3, r3, sl
 80047ca:	fb06 e202 	mla	r2, r6, r2, lr
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	9b00      	ldr	r3, [sp, #0]
 80047d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80047d6:	b292      	uxth	r2, r2
 80047d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80047dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80047e4:	4581      	cmp	r9, r0
 80047e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047ea:	f84c 3b04 	str.w	r3, [ip], #4
 80047ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80047f2:	d2db      	bcs.n	80047ac <quorem+0x44>
 80047f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80047f8:	b92b      	cbnz	r3, 8004806 <quorem+0x9e>
 80047fa:	9b01      	ldr	r3, [sp, #4]
 80047fc:	3b04      	subs	r3, #4
 80047fe:	429d      	cmp	r5, r3
 8004800:	461a      	mov	r2, r3
 8004802:	d32e      	bcc.n	8004862 <quorem+0xfa>
 8004804:	613c      	str	r4, [r7, #16]
 8004806:	4638      	mov	r0, r7
 8004808:	f001 f9d4 	bl	8005bb4 <__mcmp>
 800480c:	2800      	cmp	r0, #0
 800480e:	db24      	blt.n	800485a <quorem+0xf2>
 8004810:	3601      	adds	r6, #1
 8004812:	4628      	mov	r0, r5
 8004814:	f04f 0c00 	mov.w	ip, #0
 8004818:	f858 2b04 	ldr.w	r2, [r8], #4
 800481c:	f8d0 e000 	ldr.w	lr, [r0]
 8004820:	b293      	uxth	r3, r2
 8004822:	ebac 0303 	sub.w	r3, ip, r3
 8004826:	0c12      	lsrs	r2, r2, #16
 8004828:	fa13 f38e 	uxtah	r3, r3, lr
 800482c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004830:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004834:	b29b      	uxth	r3, r3
 8004836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800483a:	45c1      	cmp	r9, r8
 800483c:	f840 3b04 	str.w	r3, [r0], #4
 8004840:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004844:	d2e8      	bcs.n	8004818 <quorem+0xb0>
 8004846:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800484a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800484e:	b922      	cbnz	r2, 800485a <quorem+0xf2>
 8004850:	3b04      	subs	r3, #4
 8004852:	429d      	cmp	r5, r3
 8004854:	461a      	mov	r2, r3
 8004856:	d30a      	bcc.n	800486e <quorem+0x106>
 8004858:	613c      	str	r4, [r7, #16]
 800485a:	4630      	mov	r0, r6
 800485c:	b003      	add	sp, #12
 800485e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	3b04      	subs	r3, #4
 8004866:	2a00      	cmp	r2, #0
 8004868:	d1cc      	bne.n	8004804 <quorem+0x9c>
 800486a:	3c01      	subs	r4, #1
 800486c:	e7c7      	b.n	80047fe <quorem+0x96>
 800486e:	6812      	ldr	r2, [r2, #0]
 8004870:	3b04      	subs	r3, #4
 8004872:	2a00      	cmp	r2, #0
 8004874:	d1f0      	bne.n	8004858 <quorem+0xf0>
 8004876:	3c01      	subs	r4, #1
 8004878:	e7eb      	b.n	8004852 <quorem+0xea>
 800487a:	2000      	movs	r0, #0
 800487c:	e7ee      	b.n	800485c <quorem+0xf4>
	...

08004880 <_dtoa_r>:
 8004880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004884:	ed2d 8b04 	vpush	{d8-d9}
 8004888:	ec57 6b10 	vmov	r6, r7, d0
 800488c:	b093      	sub	sp, #76	; 0x4c
 800488e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004890:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004894:	9106      	str	r1, [sp, #24]
 8004896:	ee10 aa10 	vmov	sl, s0
 800489a:	4604      	mov	r4, r0
 800489c:	9209      	str	r2, [sp, #36]	; 0x24
 800489e:	930c      	str	r3, [sp, #48]	; 0x30
 80048a0:	46bb      	mov	fp, r7
 80048a2:	b975      	cbnz	r5, 80048c2 <_dtoa_r+0x42>
 80048a4:	2010      	movs	r0, #16
 80048a6:	f7ff f949 	bl	8003b3c <malloc>
 80048aa:	4602      	mov	r2, r0
 80048ac:	6260      	str	r0, [r4, #36]	; 0x24
 80048ae:	b920      	cbnz	r0, 80048ba <_dtoa_r+0x3a>
 80048b0:	4ba7      	ldr	r3, [pc, #668]	; (8004b50 <_dtoa_r+0x2d0>)
 80048b2:	21ea      	movs	r1, #234	; 0xea
 80048b4:	48a7      	ldr	r0, [pc, #668]	; (8004b54 <_dtoa_r+0x2d4>)
 80048b6:	f002 f94f 	bl	8006b58 <__assert_func>
 80048ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80048be:	6005      	str	r5, [r0, #0]
 80048c0:	60c5      	str	r5, [r0, #12]
 80048c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048c4:	6819      	ldr	r1, [r3, #0]
 80048c6:	b151      	cbz	r1, 80048de <_dtoa_r+0x5e>
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	604a      	str	r2, [r1, #4]
 80048cc:	2301      	movs	r3, #1
 80048ce:	4093      	lsls	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
 80048d2:	4620      	mov	r0, r4
 80048d4:	f000 ff2c 	bl	8005730 <_Bfree>
 80048d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	1e3b      	subs	r3, r7, #0
 80048e0:	bfaa      	itet	ge
 80048e2:	2300      	movge	r3, #0
 80048e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80048e8:	f8c8 3000 	strge.w	r3, [r8]
 80048ec:	4b9a      	ldr	r3, [pc, #616]	; (8004b58 <_dtoa_r+0x2d8>)
 80048ee:	bfbc      	itt	lt
 80048f0:	2201      	movlt	r2, #1
 80048f2:	f8c8 2000 	strlt.w	r2, [r8]
 80048f6:	ea33 030b 	bics.w	r3, r3, fp
 80048fa:	d11b      	bne.n	8004934 <_dtoa_r+0xb4>
 80048fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004908:	4333      	orrs	r3, r6
 800490a:	f000 8592 	beq.w	8005432 <_dtoa_r+0xbb2>
 800490e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004910:	b963      	cbnz	r3, 800492c <_dtoa_r+0xac>
 8004912:	4b92      	ldr	r3, [pc, #584]	; (8004b5c <_dtoa_r+0x2dc>)
 8004914:	e022      	b.n	800495c <_dtoa_r+0xdc>
 8004916:	4b92      	ldr	r3, [pc, #584]	; (8004b60 <_dtoa_r+0x2e0>)
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	3308      	adds	r3, #8
 800491c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	9801      	ldr	r0, [sp, #4]
 8004922:	b013      	add	sp, #76	; 0x4c
 8004924:	ecbd 8b04 	vpop	{d8-d9}
 8004928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492c:	4b8b      	ldr	r3, [pc, #556]	; (8004b5c <_dtoa_r+0x2dc>)
 800492e:	9301      	str	r3, [sp, #4]
 8004930:	3303      	adds	r3, #3
 8004932:	e7f3      	b.n	800491c <_dtoa_r+0x9c>
 8004934:	2200      	movs	r2, #0
 8004936:	2300      	movs	r3, #0
 8004938:	4650      	mov	r0, sl
 800493a:	4659      	mov	r1, fp
 800493c:	f7fc f8dc 	bl	8000af8 <__aeabi_dcmpeq>
 8004940:	ec4b ab19 	vmov	d9, sl, fp
 8004944:	4680      	mov	r8, r0
 8004946:	b158      	cbz	r0, 8004960 <_dtoa_r+0xe0>
 8004948:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800494a:	2301      	movs	r3, #1
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 856b 	beq.w	800542c <_dtoa_r+0xbac>
 8004956:	4883      	ldr	r0, [pc, #524]	; (8004b64 <_dtoa_r+0x2e4>)
 8004958:	6018      	str	r0, [r3, #0]
 800495a:	1e43      	subs	r3, r0, #1
 800495c:	9301      	str	r3, [sp, #4]
 800495e:	e7df      	b.n	8004920 <_dtoa_r+0xa0>
 8004960:	ec4b ab10 	vmov	d0, sl, fp
 8004964:	aa10      	add	r2, sp, #64	; 0x40
 8004966:	a911      	add	r1, sp, #68	; 0x44
 8004968:	4620      	mov	r0, r4
 800496a:	f001 f9c9 	bl	8005d00 <__d2b>
 800496e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004972:	ee08 0a10 	vmov	s16, r0
 8004976:	2d00      	cmp	r5, #0
 8004978:	f000 8084 	beq.w	8004a84 <_dtoa_r+0x204>
 800497c:	ee19 3a90 	vmov	r3, s19
 8004980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004984:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004988:	4656      	mov	r6, sl
 800498a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800498e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004992:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004996:	4b74      	ldr	r3, [pc, #464]	; (8004b68 <_dtoa_r+0x2e8>)
 8004998:	2200      	movs	r2, #0
 800499a:	4630      	mov	r0, r6
 800499c:	4639      	mov	r1, r7
 800499e:	f7fb fc8b 	bl	80002b8 <__aeabi_dsub>
 80049a2:	a365      	add	r3, pc, #404	; (adr r3, 8004b38 <_dtoa_r+0x2b8>)
 80049a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a8:	f7fb fe3e 	bl	8000628 <__aeabi_dmul>
 80049ac:	a364      	add	r3, pc, #400	; (adr r3, 8004b40 <_dtoa_r+0x2c0>)
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	f7fb fc83 	bl	80002bc <__adddf3>
 80049b6:	4606      	mov	r6, r0
 80049b8:	4628      	mov	r0, r5
 80049ba:	460f      	mov	r7, r1
 80049bc:	f7fb fdca 	bl	8000554 <__aeabi_i2d>
 80049c0:	a361      	add	r3, pc, #388	; (adr r3, 8004b48 <_dtoa_r+0x2c8>)
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	f7fb fe2f 	bl	8000628 <__aeabi_dmul>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4630      	mov	r0, r6
 80049d0:	4639      	mov	r1, r7
 80049d2:	f7fb fc73 	bl	80002bc <__adddf3>
 80049d6:	4606      	mov	r6, r0
 80049d8:	460f      	mov	r7, r1
 80049da:	f7fc f8d5 	bl	8000b88 <__aeabi_d2iz>
 80049de:	2200      	movs	r2, #0
 80049e0:	9000      	str	r0, [sp, #0]
 80049e2:	2300      	movs	r3, #0
 80049e4:	4630      	mov	r0, r6
 80049e6:	4639      	mov	r1, r7
 80049e8:	f7fc f890 	bl	8000b0c <__aeabi_dcmplt>
 80049ec:	b150      	cbz	r0, 8004a04 <_dtoa_r+0x184>
 80049ee:	9800      	ldr	r0, [sp, #0]
 80049f0:	f7fb fdb0 	bl	8000554 <__aeabi_i2d>
 80049f4:	4632      	mov	r2, r6
 80049f6:	463b      	mov	r3, r7
 80049f8:	f7fc f87e 	bl	8000af8 <__aeabi_dcmpeq>
 80049fc:	b910      	cbnz	r0, 8004a04 <_dtoa_r+0x184>
 80049fe:	9b00      	ldr	r3, [sp, #0]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	9b00      	ldr	r3, [sp, #0]
 8004a06:	2b16      	cmp	r3, #22
 8004a08:	d85a      	bhi.n	8004ac0 <_dtoa_r+0x240>
 8004a0a:	9a00      	ldr	r2, [sp, #0]
 8004a0c:	4b57      	ldr	r3, [pc, #348]	; (8004b6c <_dtoa_r+0x2ec>)
 8004a0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a16:	ec51 0b19 	vmov	r0, r1, d9
 8004a1a:	f7fc f877 	bl	8000b0c <__aeabi_dcmplt>
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	d050      	beq.n	8004ac4 <_dtoa_r+0x244>
 8004a22:	9b00      	ldr	r3, [sp, #0]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a2e:	1b5d      	subs	r5, r3, r5
 8004a30:	1e6b      	subs	r3, r5, #1
 8004a32:	9305      	str	r3, [sp, #20]
 8004a34:	bf45      	ittet	mi
 8004a36:	f1c5 0301 	rsbmi	r3, r5, #1
 8004a3a:	9304      	strmi	r3, [sp, #16]
 8004a3c:	2300      	movpl	r3, #0
 8004a3e:	2300      	movmi	r3, #0
 8004a40:	bf4c      	ite	mi
 8004a42:	9305      	strmi	r3, [sp, #20]
 8004a44:	9304      	strpl	r3, [sp, #16]
 8004a46:	9b00      	ldr	r3, [sp, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	db3d      	blt.n	8004ac8 <_dtoa_r+0x248>
 8004a4c:	9b05      	ldr	r3, [sp, #20]
 8004a4e:	9a00      	ldr	r2, [sp, #0]
 8004a50:	920a      	str	r2, [sp, #40]	; 0x28
 8004a52:	4413      	add	r3, r2
 8004a54:	9305      	str	r3, [sp, #20]
 8004a56:	2300      	movs	r3, #0
 8004a58:	9307      	str	r3, [sp, #28]
 8004a5a:	9b06      	ldr	r3, [sp, #24]
 8004a5c:	2b09      	cmp	r3, #9
 8004a5e:	f200 8089 	bhi.w	8004b74 <_dtoa_r+0x2f4>
 8004a62:	2b05      	cmp	r3, #5
 8004a64:	bfc4      	itt	gt
 8004a66:	3b04      	subgt	r3, #4
 8004a68:	9306      	strgt	r3, [sp, #24]
 8004a6a:	9b06      	ldr	r3, [sp, #24]
 8004a6c:	f1a3 0302 	sub.w	r3, r3, #2
 8004a70:	bfcc      	ite	gt
 8004a72:	2500      	movgt	r5, #0
 8004a74:	2501      	movle	r5, #1
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	f200 8087 	bhi.w	8004b8a <_dtoa_r+0x30a>
 8004a7c:	e8df f003 	tbb	[pc, r3]
 8004a80:	59383a2d 	.word	0x59383a2d
 8004a84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004a88:	441d      	add	r5, r3
 8004a8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	bfc1      	itttt	gt
 8004a92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004a96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004a9a:	fa0b f303 	lslgt.w	r3, fp, r3
 8004a9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004aa2:	bfda      	itte	le
 8004aa4:	f1c3 0320 	rsble	r3, r3, #32
 8004aa8:	fa06 f003 	lslle.w	r0, r6, r3
 8004aac:	4318      	orrgt	r0, r3
 8004aae:	f7fb fd41 	bl	8000534 <__aeabi_ui2d>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	4606      	mov	r6, r0
 8004ab6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004aba:	3d01      	subs	r5, #1
 8004abc:	930e      	str	r3, [sp, #56]	; 0x38
 8004abe:	e76a      	b.n	8004996 <_dtoa_r+0x116>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e7b2      	b.n	8004a2a <_dtoa_r+0x1aa>
 8004ac4:	900b      	str	r0, [sp, #44]	; 0x2c
 8004ac6:	e7b1      	b.n	8004a2c <_dtoa_r+0x1ac>
 8004ac8:	9b04      	ldr	r3, [sp, #16]
 8004aca:	9a00      	ldr	r2, [sp, #0]
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	9304      	str	r3, [sp, #16]
 8004ad0:	4253      	negs	r3, r2
 8004ad2:	9307      	str	r3, [sp, #28]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ad8:	e7bf      	b.n	8004a5a <_dtoa_r+0x1da>
 8004ada:	2300      	movs	r3, #0
 8004adc:	9308      	str	r3, [sp, #32]
 8004ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	dc55      	bgt.n	8004b90 <_dtoa_r+0x310>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004aea:	461a      	mov	r2, r3
 8004aec:	9209      	str	r2, [sp, #36]	; 0x24
 8004aee:	e00c      	b.n	8004b0a <_dtoa_r+0x28a>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e7f3      	b.n	8004adc <_dtoa_r+0x25c>
 8004af4:	2300      	movs	r3, #0
 8004af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004af8:	9308      	str	r3, [sp, #32]
 8004afa:	9b00      	ldr	r3, [sp, #0]
 8004afc:	4413      	add	r3, r2
 8004afe:	9302      	str	r3, [sp, #8]
 8004b00:	3301      	adds	r3, #1
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	9303      	str	r3, [sp, #12]
 8004b06:	bfb8      	it	lt
 8004b08:	2301      	movlt	r3, #1
 8004b0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	6042      	str	r2, [r0, #4]
 8004b10:	2204      	movs	r2, #4
 8004b12:	f102 0614 	add.w	r6, r2, #20
 8004b16:	429e      	cmp	r6, r3
 8004b18:	6841      	ldr	r1, [r0, #4]
 8004b1a:	d93d      	bls.n	8004b98 <_dtoa_r+0x318>
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	f000 fdc7 	bl	80056b0 <_Balloc>
 8004b22:	9001      	str	r0, [sp, #4]
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d13b      	bne.n	8004ba0 <_dtoa_r+0x320>
 8004b28:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <_dtoa_r+0x2f0>)
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004b30:	e6c0      	b.n	80048b4 <_dtoa_r+0x34>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e7df      	b.n	8004af6 <_dtoa_r+0x276>
 8004b36:	bf00      	nop
 8004b38:	636f4361 	.word	0x636f4361
 8004b3c:	3fd287a7 	.word	0x3fd287a7
 8004b40:	8b60c8b3 	.word	0x8b60c8b3
 8004b44:	3fc68a28 	.word	0x3fc68a28
 8004b48:	509f79fb 	.word	0x509f79fb
 8004b4c:	3fd34413 	.word	0x3fd34413
 8004b50:	08007fe7 	.word	0x08007fe7
 8004b54:	08007ffe 	.word	0x08007ffe
 8004b58:	7ff00000 	.word	0x7ff00000
 8004b5c:	08007fe3 	.word	0x08007fe3
 8004b60:	08007fda 	.word	0x08007fda
 8004b64:	0800823a 	.word	0x0800823a
 8004b68:	3ff80000 	.word	0x3ff80000
 8004b6c:	08008150 	.word	0x08008150
 8004b70:	08008059 	.word	0x08008059
 8004b74:	2501      	movs	r5, #1
 8004b76:	2300      	movs	r3, #0
 8004b78:	9306      	str	r3, [sp, #24]
 8004b7a:	9508      	str	r5, [sp, #32]
 8004b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004b84:	2200      	movs	r2, #0
 8004b86:	2312      	movs	r3, #18
 8004b88:	e7b0      	b.n	8004aec <_dtoa_r+0x26c>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	9308      	str	r3, [sp, #32]
 8004b8e:	e7f5      	b.n	8004b7c <_dtoa_r+0x2fc>
 8004b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004b96:	e7b8      	b.n	8004b0a <_dtoa_r+0x28a>
 8004b98:	3101      	adds	r1, #1
 8004b9a:	6041      	str	r1, [r0, #4]
 8004b9c:	0052      	lsls	r2, r2, #1
 8004b9e:	e7b8      	b.n	8004b12 <_dtoa_r+0x292>
 8004ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ba2:	9a01      	ldr	r2, [sp, #4]
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	9b03      	ldr	r3, [sp, #12]
 8004ba8:	2b0e      	cmp	r3, #14
 8004baa:	f200 809d 	bhi.w	8004ce8 <_dtoa_r+0x468>
 8004bae:	2d00      	cmp	r5, #0
 8004bb0:	f000 809a 	beq.w	8004ce8 <_dtoa_r+0x468>
 8004bb4:	9b00      	ldr	r3, [sp, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	dd32      	ble.n	8004c20 <_dtoa_r+0x3a0>
 8004bba:	4ab7      	ldr	r2, [pc, #732]	; (8004e98 <_dtoa_r+0x618>)
 8004bbc:	f003 030f 	and.w	r3, r3, #15
 8004bc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004bc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004bc8:	9b00      	ldr	r3, [sp, #0]
 8004bca:	05d8      	lsls	r0, r3, #23
 8004bcc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004bd0:	d516      	bpl.n	8004c00 <_dtoa_r+0x380>
 8004bd2:	4bb2      	ldr	r3, [pc, #712]	; (8004e9c <_dtoa_r+0x61c>)
 8004bd4:	ec51 0b19 	vmov	r0, r1, d9
 8004bd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004bdc:	f7fb fe4e 	bl	800087c <__aeabi_ddiv>
 8004be0:	f007 070f 	and.w	r7, r7, #15
 8004be4:	4682      	mov	sl, r0
 8004be6:	468b      	mov	fp, r1
 8004be8:	2503      	movs	r5, #3
 8004bea:	4eac      	ldr	r6, [pc, #688]	; (8004e9c <_dtoa_r+0x61c>)
 8004bec:	b957      	cbnz	r7, 8004c04 <_dtoa_r+0x384>
 8004bee:	4642      	mov	r2, r8
 8004bf0:	464b      	mov	r3, r9
 8004bf2:	4650      	mov	r0, sl
 8004bf4:	4659      	mov	r1, fp
 8004bf6:	f7fb fe41 	bl	800087c <__aeabi_ddiv>
 8004bfa:	4682      	mov	sl, r0
 8004bfc:	468b      	mov	fp, r1
 8004bfe:	e028      	b.n	8004c52 <_dtoa_r+0x3d2>
 8004c00:	2502      	movs	r5, #2
 8004c02:	e7f2      	b.n	8004bea <_dtoa_r+0x36a>
 8004c04:	07f9      	lsls	r1, r7, #31
 8004c06:	d508      	bpl.n	8004c1a <_dtoa_r+0x39a>
 8004c08:	4640      	mov	r0, r8
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c10:	f7fb fd0a 	bl	8000628 <__aeabi_dmul>
 8004c14:	3501      	adds	r5, #1
 8004c16:	4680      	mov	r8, r0
 8004c18:	4689      	mov	r9, r1
 8004c1a:	107f      	asrs	r7, r7, #1
 8004c1c:	3608      	adds	r6, #8
 8004c1e:	e7e5      	b.n	8004bec <_dtoa_r+0x36c>
 8004c20:	f000 809b 	beq.w	8004d5a <_dtoa_r+0x4da>
 8004c24:	9b00      	ldr	r3, [sp, #0]
 8004c26:	4f9d      	ldr	r7, [pc, #628]	; (8004e9c <_dtoa_r+0x61c>)
 8004c28:	425e      	negs	r6, r3
 8004c2a:	4b9b      	ldr	r3, [pc, #620]	; (8004e98 <_dtoa_r+0x618>)
 8004c2c:	f006 020f 	and.w	r2, r6, #15
 8004c30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	ec51 0b19 	vmov	r0, r1, d9
 8004c3c:	f7fb fcf4 	bl	8000628 <__aeabi_dmul>
 8004c40:	1136      	asrs	r6, r6, #4
 8004c42:	4682      	mov	sl, r0
 8004c44:	468b      	mov	fp, r1
 8004c46:	2300      	movs	r3, #0
 8004c48:	2502      	movs	r5, #2
 8004c4a:	2e00      	cmp	r6, #0
 8004c4c:	d17a      	bne.n	8004d44 <_dtoa_r+0x4c4>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1d3      	bne.n	8004bfa <_dtoa_r+0x37a>
 8004c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8082 	beq.w	8004d5e <_dtoa_r+0x4de>
 8004c5a:	4b91      	ldr	r3, [pc, #580]	; (8004ea0 <_dtoa_r+0x620>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	4650      	mov	r0, sl
 8004c60:	4659      	mov	r1, fp
 8004c62:	f7fb ff53 	bl	8000b0c <__aeabi_dcmplt>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d079      	beq.n	8004d5e <_dtoa_r+0x4de>
 8004c6a:	9b03      	ldr	r3, [sp, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d076      	beq.n	8004d5e <_dtoa_r+0x4de>
 8004c70:	9b02      	ldr	r3, [sp, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	dd36      	ble.n	8004ce4 <_dtoa_r+0x464>
 8004c76:	9b00      	ldr	r3, [sp, #0]
 8004c78:	4650      	mov	r0, sl
 8004c7a:	4659      	mov	r1, fp
 8004c7c:	1e5f      	subs	r7, r3, #1
 8004c7e:	2200      	movs	r2, #0
 8004c80:	4b88      	ldr	r3, [pc, #544]	; (8004ea4 <_dtoa_r+0x624>)
 8004c82:	f7fb fcd1 	bl	8000628 <__aeabi_dmul>
 8004c86:	9e02      	ldr	r6, [sp, #8]
 8004c88:	4682      	mov	sl, r0
 8004c8a:	468b      	mov	fp, r1
 8004c8c:	3501      	adds	r5, #1
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f7fb fc60 	bl	8000554 <__aeabi_i2d>
 8004c94:	4652      	mov	r2, sl
 8004c96:	465b      	mov	r3, fp
 8004c98:	f7fb fcc6 	bl	8000628 <__aeabi_dmul>
 8004c9c:	4b82      	ldr	r3, [pc, #520]	; (8004ea8 <_dtoa_r+0x628>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f7fb fb0c 	bl	80002bc <__adddf3>
 8004ca4:	46d0      	mov	r8, sl
 8004ca6:	46d9      	mov	r9, fp
 8004ca8:	4682      	mov	sl, r0
 8004caa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004cae:	2e00      	cmp	r6, #0
 8004cb0:	d158      	bne.n	8004d64 <_dtoa_r+0x4e4>
 8004cb2:	4b7e      	ldr	r3, [pc, #504]	; (8004eac <_dtoa_r+0x62c>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	4649      	mov	r1, r9
 8004cba:	f7fb fafd 	bl	80002b8 <__aeabi_dsub>
 8004cbe:	4652      	mov	r2, sl
 8004cc0:	465b      	mov	r3, fp
 8004cc2:	4680      	mov	r8, r0
 8004cc4:	4689      	mov	r9, r1
 8004cc6:	f7fb ff3f 	bl	8000b48 <__aeabi_dcmpgt>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	f040 8295 	bne.w	80051fa <_dtoa_r+0x97a>
 8004cd0:	4652      	mov	r2, sl
 8004cd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004cd6:	4640      	mov	r0, r8
 8004cd8:	4649      	mov	r1, r9
 8004cda:	f7fb ff17 	bl	8000b0c <__aeabi_dcmplt>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	f040 8289 	bne.w	80051f6 <_dtoa_r+0x976>
 8004ce4:	ec5b ab19 	vmov	sl, fp, d9
 8004ce8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f2c0 8148 	blt.w	8004f80 <_dtoa_r+0x700>
 8004cf0:	9a00      	ldr	r2, [sp, #0]
 8004cf2:	2a0e      	cmp	r2, #14
 8004cf4:	f300 8144 	bgt.w	8004f80 <_dtoa_r+0x700>
 8004cf8:	4b67      	ldr	r3, [pc, #412]	; (8004e98 <_dtoa_r+0x618>)
 8004cfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f280 80d5 	bge.w	8004eb4 <_dtoa_r+0x634>
 8004d0a:	9b03      	ldr	r3, [sp, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f300 80d1 	bgt.w	8004eb4 <_dtoa_r+0x634>
 8004d12:	f040 826f 	bne.w	80051f4 <_dtoa_r+0x974>
 8004d16:	4b65      	ldr	r3, [pc, #404]	; (8004eac <_dtoa_r+0x62c>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	f7fb fc83 	bl	8000628 <__aeabi_dmul>
 8004d22:	4652      	mov	r2, sl
 8004d24:	465b      	mov	r3, fp
 8004d26:	f7fb ff05 	bl	8000b34 <__aeabi_dcmpge>
 8004d2a:	9e03      	ldr	r6, [sp, #12]
 8004d2c:	4637      	mov	r7, r6
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	f040 8245 	bne.w	80051be <_dtoa_r+0x93e>
 8004d34:	9d01      	ldr	r5, [sp, #4]
 8004d36:	2331      	movs	r3, #49	; 0x31
 8004d38:	f805 3b01 	strb.w	r3, [r5], #1
 8004d3c:	9b00      	ldr	r3, [sp, #0]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	e240      	b.n	80051c6 <_dtoa_r+0x946>
 8004d44:	07f2      	lsls	r2, r6, #31
 8004d46:	d505      	bpl.n	8004d54 <_dtoa_r+0x4d4>
 8004d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d4c:	f7fb fc6c 	bl	8000628 <__aeabi_dmul>
 8004d50:	3501      	adds	r5, #1
 8004d52:	2301      	movs	r3, #1
 8004d54:	1076      	asrs	r6, r6, #1
 8004d56:	3708      	adds	r7, #8
 8004d58:	e777      	b.n	8004c4a <_dtoa_r+0x3ca>
 8004d5a:	2502      	movs	r5, #2
 8004d5c:	e779      	b.n	8004c52 <_dtoa_r+0x3d2>
 8004d5e:	9f00      	ldr	r7, [sp, #0]
 8004d60:	9e03      	ldr	r6, [sp, #12]
 8004d62:	e794      	b.n	8004c8e <_dtoa_r+0x40e>
 8004d64:	9901      	ldr	r1, [sp, #4]
 8004d66:	4b4c      	ldr	r3, [pc, #304]	; (8004e98 <_dtoa_r+0x618>)
 8004d68:	4431      	add	r1, r6
 8004d6a:	910d      	str	r1, [sp, #52]	; 0x34
 8004d6c:	9908      	ldr	r1, [sp, #32]
 8004d6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004d72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d76:	2900      	cmp	r1, #0
 8004d78:	d043      	beq.n	8004e02 <_dtoa_r+0x582>
 8004d7a:	494d      	ldr	r1, [pc, #308]	; (8004eb0 <_dtoa_r+0x630>)
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	f7fb fd7d 	bl	800087c <__aeabi_ddiv>
 8004d82:	4652      	mov	r2, sl
 8004d84:	465b      	mov	r3, fp
 8004d86:	f7fb fa97 	bl	80002b8 <__aeabi_dsub>
 8004d8a:	9d01      	ldr	r5, [sp, #4]
 8004d8c:	4682      	mov	sl, r0
 8004d8e:	468b      	mov	fp, r1
 8004d90:	4649      	mov	r1, r9
 8004d92:	4640      	mov	r0, r8
 8004d94:	f7fb fef8 	bl	8000b88 <__aeabi_d2iz>
 8004d98:	4606      	mov	r6, r0
 8004d9a:	f7fb fbdb 	bl	8000554 <__aeabi_i2d>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4640      	mov	r0, r8
 8004da4:	4649      	mov	r1, r9
 8004da6:	f7fb fa87 	bl	80002b8 <__aeabi_dsub>
 8004daa:	3630      	adds	r6, #48	; 0x30
 8004dac:	f805 6b01 	strb.w	r6, [r5], #1
 8004db0:	4652      	mov	r2, sl
 8004db2:	465b      	mov	r3, fp
 8004db4:	4680      	mov	r8, r0
 8004db6:	4689      	mov	r9, r1
 8004db8:	f7fb fea8 	bl	8000b0c <__aeabi_dcmplt>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	d163      	bne.n	8004e88 <_dtoa_r+0x608>
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	464b      	mov	r3, r9
 8004dc4:	4936      	ldr	r1, [pc, #216]	; (8004ea0 <_dtoa_r+0x620>)
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	f7fb fa76 	bl	80002b8 <__aeabi_dsub>
 8004dcc:	4652      	mov	r2, sl
 8004dce:	465b      	mov	r3, fp
 8004dd0:	f7fb fe9c 	bl	8000b0c <__aeabi_dcmplt>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	f040 80b5 	bne.w	8004f44 <_dtoa_r+0x6c4>
 8004dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ddc:	429d      	cmp	r5, r3
 8004dde:	d081      	beq.n	8004ce4 <_dtoa_r+0x464>
 8004de0:	4b30      	ldr	r3, [pc, #192]	; (8004ea4 <_dtoa_r+0x624>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	4650      	mov	r0, sl
 8004de6:	4659      	mov	r1, fp
 8004de8:	f7fb fc1e 	bl	8000628 <__aeabi_dmul>
 8004dec:	4b2d      	ldr	r3, [pc, #180]	; (8004ea4 <_dtoa_r+0x624>)
 8004dee:	4682      	mov	sl, r0
 8004df0:	468b      	mov	fp, r1
 8004df2:	4640      	mov	r0, r8
 8004df4:	4649      	mov	r1, r9
 8004df6:	2200      	movs	r2, #0
 8004df8:	f7fb fc16 	bl	8000628 <__aeabi_dmul>
 8004dfc:	4680      	mov	r8, r0
 8004dfe:	4689      	mov	r9, r1
 8004e00:	e7c6      	b.n	8004d90 <_dtoa_r+0x510>
 8004e02:	4650      	mov	r0, sl
 8004e04:	4659      	mov	r1, fp
 8004e06:	f7fb fc0f 	bl	8000628 <__aeabi_dmul>
 8004e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e0c:	9d01      	ldr	r5, [sp, #4]
 8004e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e10:	4682      	mov	sl, r0
 8004e12:	468b      	mov	fp, r1
 8004e14:	4649      	mov	r1, r9
 8004e16:	4640      	mov	r0, r8
 8004e18:	f7fb feb6 	bl	8000b88 <__aeabi_d2iz>
 8004e1c:	4606      	mov	r6, r0
 8004e1e:	f7fb fb99 	bl	8000554 <__aeabi_i2d>
 8004e22:	3630      	adds	r6, #48	; 0x30
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4640      	mov	r0, r8
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	f7fb fa44 	bl	80002b8 <__aeabi_dsub>
 8004e30:	f805 6b01 	strb.w	r6, [r5], #1
 8004e34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e36:	429d      	cmp	r5, r3
 8004e38:	4680      	mov	r8, r0
 8004e3a:	4689      	mov	r9, r1
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	d124      	bne.n	8004e8c <_dtoa_r+0x60c>
 8004e42:	4b1b      	ldr	r3, [pc, #108]	; (8004eb0 <_dtoa_r+0x630>)
 8004e44:	4650      	mov	r0, sl
 8004e46:	4659      	mov	r1, fp
 8004e48:	f7fb fa38 	bl	80002bc <__adddf3>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4640      	mov	r0, r8
 8004e52:	4649      	mov	r1, r9
 8004e54:	f7fb fe78 	bl	8000b48 <__aeabi_dcmpgt>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	d173      	bne.n	8004f44 <_dtoa_r+0x6c4>
 8004e5c:	4652      	mov	r2, sl
 8004e5e:	465b      	mov	r3, fp
 8004e60:	4913      	ldr	r1, [pc, #76]	; (8004eb0 <_dtoa_r+0x630>)
 8004e62:	2000      	movs	r0, #0
 8004e64:	f7fb fa28 	bl	80002b8 <__aeabi_dsub>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	4649      	mov	r1, r9
 8004e70:	f7fb fe4c 	bl	8000b0c <__aeabi_dcmplt>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	f43f af35 	beq.w	8004ce4 <_dtoa_r+0x464>
 8004e7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004e7c:	1e6b      	subs	r3, r5, #1
 8004e7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004e84:	2b30      	cmp	r3, #48	; 0x30
 8004e86:	d0f8      	beq.n	8004e7a <_dtoa_r+0x5fa>
 8004e88:	9700      	str	r7, [sp, #0]
 8004e8a:	e049      	b.n	8004f20 <_dtoa_r+0x6a0>
 8004e8c:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <_dtoa_r+0x624>)
 8004e8e:	f7fb fbcb 	bl	8000628 <__aeabi_dmul>
 8004e92:	4680      	mov	r8, r0
 8004e94:	4689      	mov	r9, r1
 8004e96:	e7bd      	b.n	8004e14 <_dtoa_r+0x594>
 8004e98:	08008150 	.word	0x08008150
 8004e9c:	08008128 	.word	0x08008128
 8004ea0:	3ff00000 	.word	0x3ff00000
 8004ea4:	40240000 	.word	0x40240000
 8004ea8:	401c0000 	.word	0x401c0000
 8004eac:	40140000 	.word	0x40140000
 8004eb0:	3fe00000 	.word	0x3fe00000
 8004eb4:	9d01      	ldr	r5, [sp, #4]
 8004eb6:	4656      	mov	r6, sl
 8004eb8:	465f      	mov	r7, fp
 8004eba:	4642      	mov	r2, r8
 8004ebc:	464b      	mov	r3, r9
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	4639      	mov	r1, r7
 8004ec2:	f7fb fcdb 	bl	800087c <__aeabi_ddiv>
 8004ec6:	f7fb fe5f 	bl	8000b88 <__aeabi_d2iz>
 8004eca:	4682      	mov	sl, r0
 8004ecc:	f7fb fb42 	bl	8000554 <__aeabi_i2d>
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	f7fb fba8 	bl	8000628 <__aeabi_dmul>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4630      	mov	r0, r6
 8004ede:	4639      	mov	r1, r7
 8004ee0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004ee4:	f7fb f9e8 	bl	80002b8 <__aeabi_dsub>
 8004ee8:	f805 6b01 	strb.w	r6, [r5], #1
 8004eec:	9e01      	ldr	r6, [sp, #4]
 8004eee:	9f03      	ldr	r7, [sp, #12]
 8004ef0:	1bae      	subs	r6, r5, r6
 8004ef2:	42b7      	cmp	r7, r6
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	d135      	bne.n	8004f66 <_dtoa_r+0x6e6>
 8004efa:	f7fb f9df 	bl	80002bc <__adddf3>
 8004efe:	4642      	mov	r2, r8
 8004f00:	464b      	mov	r3, r9
 8004f02:	4606      	mov	r6, r0
 8004f04:	460f      	mov	r7, r1
 8004f06:	f7fb fe1f 	bl	8000b48 <__aeabi_dcmpgt>
 8004f0a:	b9d0      	cbnz	r0, 8004f42 <_dtoa_r+0x6c2>
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	464b      	mov	r3, r9
 8004f10:	4630      	mov	r0, r6
 8004f12:	4639      	mov	r1, r7
 8004f14:	f7fb fdf0 	bl	8000af8 <__aeabi_dcmpeq>
 8004f18:	b110      	cbz	r0, 8004f20 <_dtoa_r+0x6a0>
 8004f1a:	f01a 0f01 	tst.w	sl, #1
 8004f1e:	d110      	bne.n	8004f42 <_dtoa_r+0x6c2>
 8004f20:	4620      	mov	r0, r4
 8004f22:	ee18 1a10 	vmov	r1, s16
 8004f26:	f000 fc03 	bl	8005730 <_Bfree>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9800      	ldr	r0, [sp, #0]
 8004f2e:	702b      	strb	r3, [r5, #0]
 8004f30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f32:	3001      	adds	r0, #1
 8004f34:	6018      	str	r0, [r3, #0]
 8004f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f43f acf1 	beq.w	8004920 <_dtoa_r+0xa0>
 8004f3e:	601d      	str	r5, [r3, #0]
 8004f40:	e4ee      	b.n	8004920 <_dtoa_r+0xa0>
 8004f42:	9f00      	ldr	r7, [sp, #0]
 8004f44:	462b      	mov	r3, r5
 8004f46:	461d      	mov	r5, r3
 8004f48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f4c:	2a39      	cmp	r2, #57	; 0x39
 8004f4e:	d106      	bne.n	8004f5e <_dtoa_r+0x6de>
 8004f50:	9a01      	ldr	r2, [sp, #4]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d1f7      	bne.n	8004f46 <_dtoa_r+0x6c6>
 8004f56:	9901      	ldr	r1, [sp, #4]
 8004f58:	2230      	movs	r2, #48	; 0x30
 8004f5a:	3701      	adds	r7, #1
 8004f5c:	700a      	strb	r2, [r1, #0]
 8004f5e:	781a      	ldrb	r2, [r3, #0]
 8004f60:	3201      	adds	r2, #1
 8004f62:	701a      	strb	r2, [r3, #0]
 8004f64:	e790      	b.n	8004e88 <_dtoa_r+0x608>
 8004f66:	4ba6      	ldr	r3, [pc, #664]	; (8005200 <_dtoa_r+0x980>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f7fb fb5d 	bl	8000628 <__aeabi_dmul>
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2300      	movs	r3, #0
 8004f72:	4606      	mov	r6, r0
 8004f74:	460f      	mov	r7, r1
 8004f76:	f7fb fdbf 	bl	8000af8 <__aeabi_dcmpeq>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d09d      	beq.n	8004eba <_dtoa_r+0x63a>
 8004f7e:	e7cf      	b.n	8004f20 <_dtoa_r+0x6a0>
 8004f80:	9a08      	ldr	r2, [sp, #32]
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	f000 80d7 	beq.w	8005136 <_dtoa_r+0x8b6>
 8004f88:	9a06      	ldr	r2, [sp, #24]
 8004f8a:	2a01      	cmp	r2, #1
 8004f8c:	f300 80ba 	bgt.w	8005104 <_dtoa_r+0x884>
 8004f90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f92:	2a00      	cmp	r2, #0
 8004f94:	f000 80b2 	beq.w	80050fc <_dtoa_r+0x87c>
 8004f98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f9c:	9e07      	ldr	r6, [sp, #28]
 8004f9e:	9d04      	ldr	r5, [sp, #16]
 8004fa0:	9a04      	ldr	r2, [sp, #16]
 8004fa2:	441a      	add	r2, r3
 8004fa4:	9204      	str	r2, [sp, #16]
 8004fa6:	9a05      	ldr	r2, [sp, #20]
 8004fa8:	2101      	movs	r1, #1
 8004faa:	441a      	add	r2, r3
 8004fac:	4620      	mov	r0, r4
 8004fae:	9205      	str	r2, [sp, #20]
 8004fb0:	f000 fc76 	bl	80058a0 <__i2b>
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	2d00      	cmp	r5, #0
 8004fb8:	dd0c      	ble.n	8004fd4 <_dtoa_r+0x754>
 8004fba:	9b05      	ldr	r3, [sp, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	dd09      	ble.n	8004fd4 <_dtoa_r+0x754>
 8004fc0:	42ab      	cmp	r3, r5
 8004fc2:	9a04      	ldr	r2, [sp, #16]
 8004fc4:	bfa8      	it	ge
 8004fc6:	462b      	movge	r3, r5
 8004fc8:	1ad2      	subs	r2, r2, r3
 8004fca:	9204      	str	r2, [sp, #16]
 8004fcc:	9a05      	ldr	r2, [sp, #20]
 8004fce:	1aed      	subs	r5, r5, r3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	9305      	str	r3, [sp, #20]
 8004fd4:	9b07      	ldr	r3, [sp, #28]
 8004fd6:	b31b      	cbz	r3, 8005020 <_dtoa_r+0x7a0>
 8004fd8:	9b08      	ldr	r3, [sp, #32]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 80af 	beq.w	800513e <_dtoa_r+0x8be>
 8004fe0:	2e00      	cmp	r6, #0
 8004fe2:	dd13      	ble.n	800500c <_dtoa_r+0x78c>
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	4632      	mov	r2, r6
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f000 fd19 	bl	8005a20 <__pow5mult>
 8004fee:	ee18 2a10 	vmov	r2, s16
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	4607      	mov	r7, r0
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f000 fc68 	bl	80058cc <__multiply>
 8004ffc:	ee18 1a10 	vmov	r1, s16
 8005000:	4680      	mov	r8, r0
 8005002:	4620      	mov	r0, r4
 8005004:	f000 fb94 	bl	8005730 <_Bfree>
 8005008:	ee08 8a10 	vmov	s16, r8
 800500c:	9b07      	ldr	r3, [sp, #28]
 800500e:	1b9a      	subs	r2, r3, r6
 8005010:	d006      	beq.n	8005020 <_dtoa_r+0x7a0>
 8005012:	ee18 1a10 	vmov	r1, s16
 8005016:	4620      	mov	r0, r4
 8005018:	f000 fd02 	bl	8005a20 <__pow5mult>
 800501c:	ee08 0a10 	vmov	s16, r0
 8005020:	2101      	movs	r1, #1
 8005022:	4620      	mov	r0, r4
 8005024:	f000 fc3c 	bl	80058a0 <__i2b>
 8005028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800502a:	2b00      	cmp	r3, #0
 800502c:	4606      	mov	r6, r0
 800502e:	f340 8088 	ble.w	8005142 <_dtoa_r+0x8c2>
 8005032:	461a      	mov	r2, r3
 8005034:	4601      	mov	r1, r0
 8005036:	4620      	mov	r0, r4
 8005038:	f000 fcf2 	bl	8005a20 <__pow5mult>
 800503c:	9b06      	ldr	r3, [sp, #24]
 800503e:	2b01      	cmp	r3, #1
 8005040:	4606      	mov	r6, r0
 8005042:	f340 8081 	ble.w	8005148 <_dtoa_r+0x8c8>
 8005046:	f04f 0800 	mov.w	r8, #0
 800504a:	6933      	ldr	r3, [r6, #16]
 800504c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005050:	6918      	ldr	r0, [r3, #16]
 8005052:	f000 fbd5 	bl	8005800 <__hi0bits>
 8005056:	f1c0 0020 	rsb	r0, r0, #32
 800505a:	9b05      	ldr	r3, [sp, #20]
 800505c:	4418      	add	r0, r3
 800505e:	f010 001f 	ands.w	r0, r0, #31
 8005062:	f000 8092 	beq.w	800518a <_dtoa_r+0x90a>
 8005066:	f1c0 0320 	rsb	r3, r0, #32
 800506a:	2b04      	cmp	r3, #4
 800506c:	f340 808a 	ble.w	8005184 <_dtoa_r+0x904>
 8005070:	f1c0 001c 	rsb	r0, r0, #28
 8005074:	9b04      	ldr	r3, [sp, #16]
 8005076:	4403      	add	r3, r0
 8005078:	9304      	str	r3, [sp, #16]
 800507a:	9b05      	ldr	r3, [sp, #20]
 800507c:	4403      	add	r3, r0
 800507e:	4405      	add	r5, r0
 8005080:	9305      	str	r3, [sp, #20]
 8005082:	9b04      	ldr	r3, [sp, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	dd07      	ble.n	8005098 <_dtoa_r+0x818>
 8005088:	ee18 1a10 	vmov	r1, s16
 800508c:	461a      	mov	r2, r3
 800508e:	4620      	mov	r0, r4
 8005090:	f000 fd20 	bl	8005ad4 <__lshift>
 8005094:	ee08 0a10 	vmov	s16, r0
 8005098:	9b05      	ldr	r3, [sp, #20]
 800509a:	2b00      	cmp	r3, #0
 800509c:	dd05      	ble.n	80050aa <_dtoa_r+0x82a>
 800509e:	4631      	mov	r1, r6
 80050a0:	461a      	mov	r2, r3
 80050a2:	4620      	mov	r0, r4
 80050a4:	f000 fd16 	bl	8005ad4 <__lshift>
 80050a8:	4606      	mov	r6, r0
 80050aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d06e      	beq.n	800518e <_dtoa_r+0x90e>
 80050b0:	ee18 0a10 	vmov	r0, s16
 80050b4:	4631      	mov	r1, r6
 80050b6:	f000 fd7d 	bl	8005bb4 <__mcmp>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	da67      	bge.n	800518e <_dtoa_r+0x90e>
 80050be:	9b00      	ldr	r3, [sp, #0]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	ee18 1a10 	vmov	r1, s16
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	220a      	movs	r2, #10
 80050ca:	2300      	movs	r3, #0
 80050cc:	4620      	mov	r0, r4
 80050ce:	f000 fb51 	bl	8005774 <__multadd>
 80050d2:	9b08      	ldr	r3, [sp, #32]
 80050d4:	ee08 0a10 	vmov	s16, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 81b1 	beq.w	8005440 <_dtoa_r+0xbc0>
 80050de:	2300      	movs	r3, #0
 80050e0:	4639      	mov	r1, r7
 80050e2:	220a      	movs	r2, #10
 80050e4:	4620      	mov	r0, r4
 80050e6:	f000 fb45 	bl	8005774 <__multadd>
 80050ea:	9b02      	ldr	r3, [sp, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	4607      	mov	r7, r0
 80050f0:	f300 808e 	bgt.w	8005210 <_dtoa_r+0x990>
 80050f4:	9b06      	ldr	r3, [sp, #24]
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	dc51      	bgt.n	800519e <_dtoa_r+0x91e>
 80050fa:	e089      	b.n	8005210 <_dtoa_r+0x990>
 80050fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005102:	e74b      	b.n	8004f9c <_dtoa_r+0x71c>
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	1e5e      	subs	r6, r3, #1
 8005108:	9b07      	ldr	r3, [sp, #28]
 800510a:	42b3      	cmp	r3, r6
 800510c:	bfbf      	itttt	lt
 800510e:	9b07      	ldrlt	r3, [sp, #28]
 8005110:	9607      	strlt	r6, [sp, #28]
 8005112:	1af2      	sublt	r2, r6, r3
 8005114:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005116:	bfb6      	itet	lt
 8005118:	189b      	addlt	r3, r3, r2
 800511a:	1b9e      	subge	r6, r3, r6
 800511c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800511e:	9b03      	ldr	r3, [sp, #12]
 8005120:	bfb8      	it	lt
 8005122:	2600      	movlt	r6, #0
 8005124:	2b00      	cmp	r3, #0
 8005126:	bfb7      	itett	lt
 8005128:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800512c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005130:	1a9d      	sublt	r5, r3, r2
 8005132:	2300      	movlt	r3, #0
 8005134:	e734      	b.n	8004fa0 <_dtoa_r+0x720>
 8005136:	9e07      	ldr	r6, [sp, #28]
 8005138:	9d04      	ldr	r5, [sp, #16]
 800513a:	9f08      	ldr	r7, [sp, #32]
 800513c:	e73b      	b.n	8004fb6 <_dtoa_r+0x736>
 800513e:	9a07      	ldr	r2, [sp, #28]
 8005140:	e767      	b.n	8005012 <_dtoa_r+0x792>
 8005142:	9b06      	ldr	r3, [sp, #24]
 8005144:	2b01      	cmp	r3, #1
 8005146:	dc18      	bgt.n	800517a <_dtoa_r+0x8fa>
 8005148:	f1ba 0f00 	cmp.w	sl, #0
 800514c:	d115      	bne.n	800517a <_dtoa_r+0x8fa>
 800514e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005152:	b993      	cbnz	r3, 800517a <_dtoa_r+0x8fa>
 8005154:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005158:	0d1b      	lsrs	r3, r3, #20
 800515a:	051b      	lsls	r3, r3, #20
 800515c:	b183      	cbz	r3, 8005180 <_dtoa_r+0x900>
 800515e:	9b04      	ldr	r3, [sp, #16]
 8005160:	3301      	adds	r3, #1
 8005162:	9304      	str	r3, [sp, #16]
 8005164:	9b05      	ldr	r3, [sp, #20]
 8005166:	3301      	adds	r3, #1
 8005168:	9305      	str	r3, [sp, #20]
 800516a:	f04f 0801 	mov.w	r8, #1
 800516e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005170:	2b00      	cmp	r3, #0
 8005172:	f47f af6a 	bne.w	800504a <_dtoa_r+0x7ca>
 8005176:	2001      	movs	r0, #1
 8005178:	e76f      	b.n	800505a <_dtoa_r+0x7da>
 800517a:	f04f 0800 	mov.w	r8, #0
 800517e:	e7f6      	b.n	800516e <_dtoa_r+0x8ee>
 8005180:	4698      	mov	r8, r3
 8005182:	e7f4      	b.n	800516e <_dtoa_r+0x8ee>
 8005184:	f43f af7d 	beq.w	8005082 <_dtoa_r+0x802>
 8005188:	4618      	mov	r0, r3
 800518a:	301c      	adds	r0, #28
 800518c:	e772      	b.n	8005074 <_dtoa_r+0x7f4>
 800518e:	9b03      	ldr	r3, [sp, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	dc37      	bgt.n	8005204 <_dtoa_r+0x984>
 8005194:	9b06      	ldr	r3, [sp, #24]
 8005196:	2b02      	cmp	r3, #2
 8005198:	dd34      	ble.n	8005204 <_dtoa_r+0x984>
 800519a:	9b03      	ldr	r3, [sp, #12]
 800519c:	9302      	str	r3, [sp, #8]
 800519e:	9b02      	ldr	r3, [sp, #8]
 80051a0:	b96b      	cbnz	r3, 80051be <_dtoa_r+0x93e>
 80051a2:	4631      	mov	r1, r6
 80051a4:	2205      	movs	r2, #5
 80051a6:	4620      	mov	r0, r4
 80051a8:	f000 fae4 	bl	8005774 <__multadd>
 80051ac:	4601      	mov	r1, r0
 80051ae:	4606      	mov	r6, r0
 80051b0:	ee18 0a10 	vmov	r0, s16
 80051b4:	f000 fcfe 	bl	8005bb4 <__mcmp>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	f73f adbb 	bgt.w	8004d34 <_dtoa_r+0x4b4>
 80051be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c0:	9d01      	ldr	r5, [sp, #4]
 80051c2:	43db      	mvns	r3, r3
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	f04f 0800 	mov.w	r8, #0
 80051ca:	4631      	mov	r1, r6
 80051cc:	4620      	mov	r0, r4
 80051ce:	f000 faaf 	bl	8005730 <_Bfree>
 80051d2:	2f00      	cmp	r7, #0
 80051d4:	f43f aea4 	beq.w	8004f20 <_dtoa_r+0x6a0>
 80051d8:	f1b8 0f00 	cmp.w	r8, #0
 80051dc:	d005      	beq.n	80051ea <_dtoa_r+0x96a>
 80051de:	45b8      	cmp	r8, r7
 80051e0:	d003      	beq.n	80051ea <_dtoa_r+0x96a>
 80051e2:	4641      	mov	r1, r8
 80051e4:	4620      	mov	r0, r4
 80051e6:	f000 faa3 	bl	8005730 <_Bfree>
 80051ea:	4639      	mov	r1, r7
 80051ec:	4620      	mov	r0, r4
 80051ee:	f000 fa9f 	bl	8005730 <_Bfree>
 80051f2:	e695      	b.n	8004f20 <_dtoa_r+0x6a0>
 80051f4:	2600      	movs	r6, #0
 80051f6:	4637      	mov	r7, r6
 80051f8:	e7e1      	b.n	80051be <_dtoa_r+0x93e>
 80051fa:	9700      	str	r7, [sp, #0]
 80051fc:	4637      	mov	r7, r6
 80051fe:	e599      	b.n	8004d34 <_dtoa_r+0x4b4>
 8005200:	40240000 	.word	0x40240000
 8005204:	9b08      	ldr	r3, [sp, #32]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 80ca 	beq.w	80053a0 <_dtoa_r+0xb20>
 800520c:	9b03      	ldr	r3, [sp, #12]
 800520e:	9302      	str	r3, [sp, #8]
 8005210:	2d00      	cmp	r5, #0
 8005212:	dd05      	ble.n	8005220 <_dtoa_r+0x9a0>
 8005214:	4639      	mov	r1, r7
 8005216:	462a      	mov	r2, r5
 8005218:	4620      	mov	r0, r4
 800521a:	f000 fc5b 	bl	8005ad4 <__lshift>
 800521e:	4607      	mov	r7, r0
 8005220:	f1b8 0f00 	cmp.w	r8, #0
 8005224:	d05b      	beq.n	80052de <_dtoa_r+0xa5e>
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	4620      	mov	r0, r4
 800522a:	f000 fa41 	bl	80056b0 <_Balloc>
 800522e:	4605      	mov	r5, r0
 8005230:	b928      	cbnz	r0, 800523e <_dtoa_r+0x9be>
 8005232:	4b87      	ldr	r3, [pc, #540]	; (8005450 <_dtoa_r+0xbd0>)
 8005234:	4602      	mov	r2, r0
 8005236:	f240 21ea 	movw	r1, #746	; 0x2ea
 800523a:	f7ff bb3b 	b.w	80048b4 <_dtoa_r+0x34>
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	3202      	adds	r2, #2
 8005242:	0092      	lsls	r2, r2, #2
 8005244:	f107 010c 	add.w	r1, r7, #12
 8005248:	300c      	adds	r0, #12
 800524a:	f000 fa17 	bl	800567c <memcpy>
 800524e:	2201      	movs	r2, #1
 8005250:	4629      	mov	r1, r5
 8005252:	4620      	mov	r0, r4
 8005254:	f000 fc3e 	bl	8005ad4 <__lshift>
 8005258:	9b01      	ldr	r3, [sp, #4]
 800525a:	f103 0901 	add.w	r9, r3, #1
 800525e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005262:	4413      	add	r3, r2
 8005264:	9305      	str	r3, [sp, #20]
 8005266:	f00a 0301 	and.w	r3, sl, #1
 800526a:	46b8      	mov	r8, r7
 800526c:	9304      	str	r3, [sp, #16]
 800526e:	4607      	mov	r7, r0
 8005270:	4631      	mov	r1, r6
 8005272:	ee18 0a10 	vmov	r0, s16
 8005276:	f7ff fa77 	bl	8004768 <quorem>
 800527a:	4641      	mov	r1, r8
 800527c:	9002      	str	r0, [sp, #8]
 800527e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005282:	ee18 0a10 	vmov	r0, s16
 8005286:	f000 fc95 	bl	8005bb4 <__mcmp>
 800528a:	463a      	mov	r2, r7
 800528c:	9003      	str	r0, [sp, #12]
 800528e:	4631      	mov	r1, r6
 8005290:	4620      	mov	r0, r4
 8005292:	f000 fcab 	bl	8005bec <__mdiff>
 8005296:	68c2      	ldr	r2, [r0, #12]
 8005298:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800529c:	4605      	mov	r5, r0
 800529e:	bb02      	cbnz	r2, 80052e2 <_dtoa_r+0xa62>
 80052a0:	4601      	mov	r1, r0
 80052a2:	ee18 0a10 	vmov	r0, s16
 80052a6:	f000 fc85 	bl	8005bb4 <__mcmp>
 80052aa:	4602      	mov	r2, r0
 80052ac:	4629      	mov	r1, r5
 80052ae:	4620      	mov	r0, r4
 80052b0:	9207      	str	r2, [sp, #28]
 80052b2:	f000 fa3d 	bl	8005730 <_Bfree>
 80052b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80052ba:	ea43 0102 	orr.w	r1, r3, r2
 80052be:	9b04      	ldr	r3, [sp, #16]
 80052c0:	430b      	orrs	r3, r1
 80052c2:	464d      	mov	r5, r9
 80052c4:	d10f      	bne.n	80052e6 <_dtoa_r+0xa66>
 80052c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80052ca:	d02a      	beq.n	8005322 <_dtoa_r+0xaa2>
 80052cc:	9b03      	ldr	r3, [sp, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	dd02      	ble.n	80052d8 <_dtoa_r+0xa58>
 80052d2:	9b02      	ldr	r3, [sp, #8]
 80052d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80052d8:	f88b a000 	strb.w	sl, [fp]
 80052dc:	e775      	b.n	80051ca <_dtoa_r+0x94a>
 80052de:	4638      	mov	r0, r7
 80052e0:	e7ba      	b.n	8005258 <_dtoa_r+0x9d8>
 80052e2:	2201      	movs	r2, #1
 80052e4:	e7e2      	b.n	80052ac <_dtoa_r+0xa2c>
 80052e6:	9b03      	ldr	r3, [sp, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	db04      	blt.n	80052f6 <_dtoa_r+0xa76>
 80052ec:	9906      	ldr	r1, [sp, #24]
 80052ee:	430b      	orrs	r3, r1
 80052f0:	9904      	ldr	r1, [sp, #16]
 80052f2:	430b      	orrs	r3, r1
 80052f4:	d122      	bne.n	800533c <_dtoa_r+0xabc>
 80052f6:	2a00      	cmp	r2, #0
 80052f8:	ddee      	ble.n	80052d8 <_dtoa_r+0xa58>
 80052fa:	ee18 1a10 	vmov	r1, s16
 80052fe:	2201      	movs	r2, #1
 8005300:	4620      	mov	r0, r4
 8005302:	f000 fbe7 	bl	8005ad4 <__lshift>
 8005306:	4631      	mov	r1, r6
 8005308:	ee08 0a10 	vmov	s16, r0
 800530c:	f000 fc52 	bl	8005bb4 <__mcmp>
 8005310:	2800      	cmp	r0, #0
 8005312:	dc03      	bgt.n	800531c <_dtoa_r+0xa9c>
 8005314:	d1e0      	bne.n	80052d8 <_dtoa_r+0xa58>
 8005316:	f01a 0f01 	tst.w	sl, #1
 800531a:	d0dd      	beq.n	80052d8 <_dtoa_r+0xa58>
 800531c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005320:	d1d7      	bne.n	80052d2 <_dtoa_r+0xa52>
 8005322:	2339      	movs	r3, #57	; 0x39
 8005324:	f88b 3000 	strb.w	r3, [fp]
 8005328:	462b      	mov	r3, r5
 800532a:	461d      	mov	r5, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005332:	2a39      	cmp	r2, #57	; 0x39
 8005334:	d071      	beq.n	800541a <_dtoa_r+0xb9a>
 8005336:	3201      	adds	r2, #1
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	e746      	b.n	80051ca <_dtoa_r+0x94a>
 800533c:	2a00      	cmp	r2, #0
 800533e:	dd07      	ble.n	8005350 <_dtoa_r+0xad0>
 8005340:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005344:	d0ed      	beq.n	8005322 <_dtoa_r+0xaa2>
 8005346:	f10a 0301 	add.w	r3, sl, #1
 800534a:	f88b 3000 	strb.w	r3, [fp]
 800534e:	e73c      	b.n	80051ca <_dtoa_r+0x94a>
 8005350:	9b05      	ldr	r3, [sp, #20]
 8005352:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005356:	4599      	cmp	r9, r3
 8005358:	d047      	beq.n	80053ea <_dtoa_r+0xb6a>
 800535a:	ee18 1a10 	vmov	r1, s16
 800535e:	2300      	movs	r3, #0
 8005360:	220a      	movs	r2, #10
 8005362:	4620      	mov	r0, r4
 8005364:	f000 fa06 	bl	8005774 <__multadd>
 8005368:	45b8      	cmp	r8, r7
 800536a:	ee08 0a10 	vmov	s16, r0
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	f04f 020a 	mov.w	r2, #10
 8005376:	4641      	mov	r1, r8
 8005378:	4620      	mov	r0, r4
 800537a:	d106      	bne.n	800538a <_dtoa_r+0xb0a>
 800537c:	f000 f9fa 	bl	8005774 <__multadd>
 8005380:	4680      	mov	r8, r0
 8005382:	4607      	mov	r7, r0
 8005384:	f109 0901 	add.w	r9, r9, #1
 8005388:	e772      	b.n	8005270 <_dtoa_r+0x9f0>
 800538a:	f000 f9f3 	bl	8005774 <__multadd>
 800538e:	4639      	mov	r1, r7
 8005390:	4680      	mov	r8, r0
 8005392:	2300      	movs	r3, #0
 8005394:	220a      	movs	r2, #10
 8005396:	4620      	mov	r0, r4
 8005398:	f000 f9ec 	bl	8005774 <__multadd>
 800539c:	4607      	mov	r7, r0
 800539e:	e7f1      	b.n	8005384 <_dtoa_r+0xb04>
 80053a0:	9b03      	ldr	r3, [sp, #12]
 80053a2:	9302      	str	r3, [sp, #8]
 80053a4:	9d01      	ldr	r5, [sp, #4]
 80053a6:	ee18 0a10 	vmov	r0, s16
 80053aa:	4631      	mov	r1, r6
 80053ac:	f7ff f9dc 	bl	8004768 <quorem>
 80053b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80053b4:	9b01      	ldr	r3, [sp, #4]
 80053b6:	f805 ab01 	strb.w	sl, [r5], #1
 80053ba:	1aea      	subs	r2, r5, r3
 80053bc:	9b02      	ldr	r3, [sp, #8]
 80053be:	4293      	cmp	r3, r2
 80053c0:	dd09      	ble.n	80053d6 <_dtoa_r+0xb56>
 80053c2:	ee18 1a10 	vmov	r1, s16
 80053c6:	2300      	movs	r3, #0
 80053c8:	220a      	movs	r2, #10
 80053ca:	4620      	mov	r0, r4
 80053cc:	f000 f9d2 	bl	8005774 <__multadd>
 80053d0:	ee08 0a10 	vmov	s16, r0
 80053d4:	e7e7      	b.n	80053a6 <_dtoa_r+0xb26>
 80053d6:	9b02      	ldr	r3, [sp, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	bfc8      	it	gt
 80053dc:	461d      	movgt	r5, r3
 80053de:	9b01      	ldr	r3, [sp, #4]
 80053e0:	bfd8      	it	le
 80053e2:	2501      	movle	r5, #1
 80053e4:	441d      	add	r5, r3
 80053e6:	f04f 0800 	mov.w	r8, #0
 80053ea:	ee18 1a10 	vmov	r1, s16
 80053ee:	2201      	movs	r2, #1
 80053f0:	4620      	mov	r0, r4
 80053f2:	f000 fb6f 	bl	8005ad4 <__lshift>
 80053f6:	4631      	mov	r1, r6
 80053f8:	ee08 0a10 	vmov	s16, r0
 80053fc:	f000 fbda 	bl	8005bb4 <__mcmp>
 8005400:	2800      	cmp	r0, #0
 8005402:	dc91      	bgt.n	8005328 <_dtoa_r+0xaa8>
 8005404:	d102      	bne.n	800540c <_dtoa_r+0xb8c>
 8005406:	f01a 0f01 	tst.w	sl, #1
 800540a:	d18d      	bne.n	8005328 <_dtoa_r+0xaa8>
 800540c:	462b      	mov	r3, r5
 800540e:	461d      	mov	r5, r3
 8005410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005414:	2a30      	cmp	r2, #48	; 0x30
 8005416:	d0fa      	beq.n	800540e <_dtoa_r+0xb8e>
 8005418:	e6d7      	b.n	80051ca <_dtoa_r+0x94a>
 800541a:	9a01      	ldr	r2, [sp, #4]
 800541c:	429a      	cmp	r2, r3
 800541e:	d184      	bne.n	800532a <_dtoa_r+0xaaa>
 8005420:	9b00      	ldr	r3, [sp, #0]
 8005422:	3301      	adds	r3, #1
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	2331      	movs	r3, #49	; 0x31
 8005428:	7013      	strb	r3, [r2, #0]
 800542a:	e6ce      	b.n	80051ca <_dtoa_r+0x94a>
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <_dtoa_r+0xbd4>)
 800542e:	f7ff ba95 	b.w	800495c <_dtoa_r+0xdc>
 8005432:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005434:	2b00      	cmp	r3, #0
 8005436:	f47f aa6e 	bne.w	8004916 <_dtoa_r+0x96>
 800543a:	4b07      	ldr	r3, [pc, #28]	; (8005458 <_dtoa_r+0xbd8>)
 800543c:	f7ff ba8e 	b.w	800495c <_dtoa_r+0xdc>
 8005440:	9b02      	ldr	r3, [sp, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	dcae      	bgt.n	80053a4 <_dtoa_r+0xb24>
 8005446:	9b06      	ldr	r3, [sp, #24]
 8005448:	2b02      	cmp	r3, #2
 800544a:	f73f aea8 	bgt.w	800519e <_dtoa_r+0x91e>
 800544e:	e7a9      	b.n	80053a4 <_dtoa_r+0xb24>
 8005450:	08008059 	.word	0x08008059
 8005454:	08008239 	.word	0x08008239
 8005458:	08007fda 	.word	0x08007fda

0800545c <std>:
 800545c:	2300      	movs	r3, #0
 800545e:	b510      	push	{r4, lr}
 8005460:	4604      	mov	r4, r0
 8005462:	e9c0 3300 	strd	r3, r3, [r0]
 8005466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800546a:	6083      	str	r3, [r0, #8]
 800546c:	8181      	strh	r1, [r0, #12]
 800546e:	6643      	str	r3, [r0, #100]	; 0x64
 8005470:	81c2      	strh	r2, [r0, #14]
 8005472:	6183      	str	r3, [r0, #24]
 8005474:	4619      	mov	r1, r3
 8005476:	2208      	movs	r2, #8
 8005478:	305c      	adds	r0, #92	; 0x5c
 800547a:	f7fe fb67 	bl	8003b4c <memset>
 800547e:	4b05      	ldr	r3, [pc, #20]	; (8005494 <std+0x38>)
 8005480:	6263      	str	r3, [r4, #36]	; 0x24
 8005482:	4b05      	ldr	r3, [pc, #20]	; (8005498 <std+0x3c>)
 8005484:	62a3      	str	r3, [r4, #40]	; 0x28
 8005486:	4b05      	ldr	r3, [pc, #20]	; (800549c <std+0x40>)
 8005488:	62e3      	str	r3, [r4, #44]	; 0x2c
 800548a:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <std+0x44>)
 800548c:	6224      	str	r4, [r4, #32]
 800548e:	6323      	str	r3, [r4, #48]	; 0x30
 8005490:	bd10      	pop	{r4, pc}
 8005492:	bf00      	nop
 8005494:	08004699 	.word	0x08004699
 8005498:	080046bf 	.word	0x080046bf
 800549c:	080046f7 	.word	0x080046f7
 80054a0:	0800471b 	.word	0x0800471b

080054a4 <_cleanup_r>:
 80054a4:	4901      	ldr	r1, [pc, #4]	; (80054ac <_cleanup_r+0x8>)
 80054a6:	f000 b8af 	b.w	8005608 <_fwalk_reent>
 80054aa:	bf00      	nop
 80054ac:	08006ca1 	.word	0x08006ca1

080054b0 <__sfmoreglue>:
 80054b0:	b570      	push	{r4, r5, r6, lr}
 80054b2:	2268      	movs	r2, #104	; 0x68
 80054b4:	1e4d      	subs	r5, r1, #1
 80054b6:	4355      	muls	r5, r2
 80054b8:	460e      	mov	r6, r1
 80054ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80054be:	f7fe fbb9 	bl	8003c34 <_malloc_r>
 80054c2:	4604      	mov	r4, r0
 80054c4:	b140      	cbz	r0, 80054d8 <__sfmoreglue+0x28>
 80054c6:	2100      	movs	r1, #0
 80054c8:	e9c0 1600 	strd	r1, r6, [r0]
 80054cc:	300c      	adds	r0, #12
 80054ce:	60a0      	str	r0, [r4, #8]
 80054d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80054d4:	f7fe fb3a 	bl	8003b4c <memset>
 80054d8:	4620      	mov	r0, r4
 80054da:	bd70      	pop	{r4, r5, r6, pc}

080054dc <__sfp_lock_acquire>:
 80054dc:	4801      	ldr	r0, [pc, #4]	; (80054e4 <__sfp_lock_acquire+0x8>)
 80054de:	f000 b8b8 	b.w	8005652 <__retarget_lock_acquire_recursive>
 80054e2:	bf00      	nop
 80054e4:	20000ead 	.word	0x20000ead

080054e8 <__sfp_lock_release>:
 80054e8:	4801      	ldr	r0, [pc, #4]	; (80054f0 <__sfp_lock_release+0x8>)
 80054ea:	f000 b8b3 	b.w	8005654 <__retarget_lock_release_recursive>
 80054ee:	bf00      	nop
 80054f0:	20000ead 	.word	0x20000ead

080054f4 <__sinit_lock_acquire>:
 80054f4:	4801      	ldr	r0, [pc, #4]	; (80054fc <__sinit_lock_acquire+0x8>)
 80054f6:	f000 b8ac 	b.w	8005652 <__retarget_lock_acquire_recursive>
 80054fa:	bf00      	nop
 80054fc:	20000eae 	.word	0x20000eae

08005500 <__sinit_lock_release>:
 8005500:	4801      	ldr	r0, [pc, #4]	; (8005508 <__sinit_lock_release+0x8>)
 8005502:	f000 b8a7 	b.w	8005654 <__retarget_lock_release_recursive>
 8005506:	bf00      	nop
 8005508:	20000eae 	.word	0x20000eae

0800550c <__sinit>:
 800550c:	b510      	push	{r4, lr}
 800550e:	4604      	mov	r4, r0
 8005510:	f7ff fff0 	bl	80054f4 <__sinit_lock_acquire>
 8005514:	69a3      	ldr	r3, [r4, #24]
 8005516:	b11b      	cbz	r3, 8005520 <__sinit+0x14>
 8005518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800551c:	f7ff bff0 	b.w	8005500 <__sinit_lock_release>
 8005520:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005524:	6523      	str	r3, [r4, #80]	; 0x50
 8005526:	4b13      	ldr	r3, [pc, #76]	; (8005574 <__sinit+0x68>)
 8005528:	4a13      	ldr	r2, [pc, #76]	; (8005578 <__sinit+0x6c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	62a2      	str	r2, [r4, #40]	; 0x28
 800552e:	42a3      	cmp	r3, r4
 8005530:	bf04      	itt	eq
 8005532:	2301      	moveq	r3, #1
 8005534:	61a3      	streq	r3, [r4, #24]
 8005536:	4620      	mov	r0, r4
 8005538:	f000 f820 	bl	800557c <__sfp>
 800553c:	6060      	str	r0, [r4, #4]
 800553e:	4620      	mov	r0, r4
 8005540:	f000 f81c 	bl	800557c <__sfp>
 8005544:	60a0      	str	r0, [r4, #8]
 8005546:	4620      	mov	r0, r4
 8005548:	f000 f818 	bl	800557c <__sfp>
 800554c:	2200      	movs	r2, #0
 800554e:	60e0      	str	r0, [r4, #12]
 8005550:	2104      	movs	r1, #4
 8005552:	6860      	ldr	r0, [r4, #4]
 8005554:	f7ff ff82 	bl	800545c <std>
 8005558:	68a0      	ldr	r0, [r4, #8]
 800555a:	2201      	movs	r2, #1
 800555c:	2109      	movs	r1, #9
 800555e:	f7ff ff7d 	bl	800545c <std>
 8005562:	68e0      	ldr	r0, [r4, #12]
 8005564:	2202      	movs	r2, #2
 8005566:	2112      	movs	r1, #18
 8005568:	f7ff ff78 	bl	800545c <std>
 800556c:	2301      	movs	r3, #1
 800556e:	61a3      	str	r3, [r4, #24]
 8005570:	e7d2      	b.n	8005518 <__sinit+0xc>
 8005572:	bf00      	nop
 8005574:	08007fa4 	.word	0x08007fa4
 8005578:	080054a5 	.word	0x080054a5

0800557c <__sfp>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	4607      	mov	r7, r0
 8005580:	f7ff ffac 	bl	80054dc <__sfp_lock_acquire>
 8005584:	4b1e      	ldr	r3, [pc, #120]	; (8005600 <__sfp+0x84>)
 8005586:	681e      	ldr	r6, [r3, #0]
 8005588:	69b3      	ldr	r3, [r6, #24]
 800558a:	b913      	cbnz	r3, 8005592 <__sfp+0x16>
 800558c:	4630      	mov	r0, r6
 800558e:	f7ff ffbd 	bl	800550c <__sinit>
 8005592:	3648      	adds	r6, #72	; 0x48
 8005594:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005598:	3b01      	subs	r3, #1
 800559a:	d503      	bpl.n	80055a4 <__sfp+0x28>
 800559c:	6833      	ldr	r3, [r6, #0]
 800559e:	b30b      	cbz	r3, 80055e4 <__sfp+0x68>
 80055a0:	6836      	ldr	r6, [r6, #0]
 80055a2:	e7f7      	b.n	8005594 <__sfp+0x18>
 80055a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80055a8:	b9d5      	cbnz	r5, 80055e0 <__sfp+0x64>
 80055aa:	4b16      	ldr	r3, [pc, #88]	; (8005604 <__sfp+0x88>)
 80055ac:	60e3      	str	r3, [r4, #12]
 80055ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055b2:	6665      	str	r5, [r4, #100]	; 0x64
 80055b4:	f000 f84c 	bl	8005650 <__retarget_lock_init_recursive>
 80055b8:	f7ff ff96 	bl	80054e8 <__sfp_lock_release>
 80055bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80055c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80055c4:	6025      	str	r5, [r4, #0]
 80055c6:	61a5      	str	r5, [r4, #24]
 80055c8:	2208      	movs	r2, #8
 80055ca:	4629      	mov	r1, r5
 80055cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055d0:	f7fe fabc 	bl	8003b4c <memset>
 80055d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80055d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80055dc:	4620      	mov	r0, r4
 80055de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055e0:	3468      	adds	r4, #104	; 0x68
 80055e2:	e7d9      	b.n	8005598 <__sfp+0x1c>
 80055e4:	2104      	movs	r1, #4
 80055e6:	4638      	mov	r0, r7
 80055e8:	f7ff ff62 	bl	80054b0 <__sfmoreglue>
 80055ec:	4604      	mov	r4, r0
 80055ee:	6030      	str	r0, [r6, #0]
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d1d5      	bne.n	80055a0 <__sfp+0x24>
 80055f4:	f7ff ff78 	bl	80054e8 <__sfp_lock_release>
 80055f8:	230c      	movs	r3, #12
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	e7ee      	b.n	80055dc <__sfp+0x60>
 80055fe:	bf00      	nop
 8005600:	08007fa4 	.word	0x08007fa4
 8005604:	ffff0001 	.word	0xffff0001

08005608 <_fwalk_reent>:
 8005608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800560c:	4606      	mov	r6, r0
 800560e:	4688      	mov	r8, r1
 8005610:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005614:	2700      	movs	r7, #0
 8005616:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800561a:	f1b9 0901 	subs.w	r9, r9, #1
 800561e:	d505      	bpl.n	800562c <_fwalk_reent+0x24>
 8005620:	6824      	ldr	r4, [r4, #0]
 8005622:	2c00      	cmp	r4, #0
 8005624:	d1f7      	bne.n	8005616 <_fwalk_reent+0xe>
 8005626:	4638      	mov	r0, r7
 8005628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800562c:	89ab      	ldrh	r3, [r5, #12]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d907      	bls.n	8005642 <_fwalk_reent+0x3a>
 8005632:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005636:	3301      	adds	r3, #1
 8005638:	d003      	beq.n	8005642 <_fwalk_reent+0x3a>
 800563a:	4629      	mov	r1, r5
 800563c:	4630      	mov	r0, r6
 800563e:	47c0      	blx	r8
 8005640:	4307      	orrs	r7, r0
 8005642:	3568      	adds	r5, #104	; 0x68
 8005644:	e7e9      	b.n	800561a <_fwalk_reent+0x12>
	...

08005648 <_localeconv_r>:
 8005648:	4800      	ldr	r0, [pc, #0]	; (800564c <_localeconv_r+0x4>)
 800564a:	4770      	bx	lr
 800564c:	2000015c 	.word	0x2000015c

08005650 <__retarget_lock_init_recursive>:
 8005650:	4770      	bx	lr

08005652 <__retarget_lock_acquire_recursive>:
 8005652:	4770      	bx	lr

08005654 <__retarget_lock_release_recursive>:
 8005654:	4770      	bx	lr
	...

08005658 <_lseek_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4d07      	ldr	r5, [pc, #28]	; (8005678 <_lseek_r+0x20>)
 800565c:	4604      	mov	r4, r0
 800565e:	4608      	mov	r0, r1
 8005660:	4611      	mov	r1, r2
 8005662:	2200      	movs	r2, #0
 8005664:	602a      	str	r2, [r5, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	f7fb fdc0 	bl	80011ec <_lseek>
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	d102      	bne.n	8005676 <_lseek_r+0x1e>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	b103      	cbz	r3, 8005676 <_lseek_r+0x1e>
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	bd38      	pop	{r3, r4, r5, pc}
 8005678:	20000eb0 	.word	0x20000eb0

0800567c <memcpy>:
 800567c:	440a      	add	r2, r1
 800567e:	4291      	cmp	r1, r2
 8005680:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005684:	d100      	bne.n	8005688 <memcpy+0xc>
 8005686:	4770      	bx	lr
 8005688:	b510      	push	{r4, lr}
 800568a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800568e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005692:	4291      	cmp	r1, r2
 8005694:	d1f9      	bne.n	800568a <memcpy+0xe>
 8005696:	bd10      	pop	{r4, pc}

08005698 <__malloc_lock>:
 8005698:	4801      	ldr	r0, [pc, #4]	; (80056a0 <__malloc_lock+0x8>)
 800569a:	f7ff bfda 	b.w	8005652 <__retarget_lock_acquire_recursive>
 800569e:	bf00      	nop
 80056a0:	20000eac 	.word	0x20000eac

080056a4 <__malloc_unlock>:
 80056a4:	4801      	ldr	r0, [pc, #4]	; (80056ac <__malloc_unlock+0x8>)
 80056a6:	f7ff bfd5 	b.w	8005654 <__retarget_lock_release_recursive>
 80056aa:	bf00      	nop
 80056ac:	20000eac 	.word	0x20000eac

080056b0 <_Balloc>:
 80056b0:	b570      	push	{r4, r5, r6, lr}
 80056b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80056b4:	4604      	mov	r4, r0
 80056b6:	460d      	mov	r5, r1
 80056b8:	b976      	cbnz	r6, 80056d8 <_Balloc+0x28>
 80056ba:	2010      	movs	r0, #16
 80056bc:	f7fe fa3e 	bl	8003b3c <malloc>
 80056c0:	4602      	mov	r2, r0
 80056c2:	6260      	str	r0, [r4, #36]	; 0x24
 80056c4:	b920      	cbnz	r0, 80056d0 <_Balloc+0x20>
 80056c6:	4b18      	ldr	r3, [pc, #96]	; (8005728 <_Balloc+0x78>)
 80056c8:	4818      	ldr	r0, [pc, #96]	; (800572c <_Balloc+0x7c>)
 80056ca:	2166      	movs	r1, #102	; 0x66
 80056cc:	f001 fa44 	bl	8006b58 <__assert_func>
 80056d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056d4:	6006      	str	r6, [r0, #0]
 80056d6:	60c6      	str	r6, [r0, #12]
 80056d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056da:	68f3      	ldr	r3, [r6, #12]
 80056dc:	b183      	cbz	r3, 8005700 <_Balloc+0x50>
 80056de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056e6:	b9b8      	cbnz	r0, 8005718 <_Balloc+0x68>
 80056e8:	2101      	movs	r1, #1
 80056ea:	fa01 f605 	lsl.w	r6, r1, r5
 80056ee:	1d72      	adds	r2, r6, #5
 80056f0:	0092      	lsls	r2, r2, #2
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 fb60 	bl	8005db8 <_calloc_r>
 80056f8:	b160      	cbz	r0, 8005714 <_Balloc+0x64>
 80056fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80056fe:	e00e      	b.n	800571e <_Balloc+0x6e>
 8005700:	2221      	movs	r2, #33	; 0x21
 8005702:	2104      	movs	r1, #4
 8005704:	4620      	mov	r0, r4
 8005706:	f000 fb57 	bl	8005db8 <_calloc_r>
 800570a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800570c:	60f0      	str	r0, [r6, #12]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e4      	bne.n	80056de <_Balloc+0x2e>
 8005714:	2000      	movs	r0, #0
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	6802      	ldr	r2, [r0, #0]
 800571a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800571e:	2300      	movs	r3, #0
 8005720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005724:	e7f7      	b.n	8005716 <_Balloc+0x66>
 8005726:	bf00      	nop
 8005728:	08007fe7 	.word	0x08007fe7
 800572c:	080080cc 	.word	0x080080cc

08005730 <_Bfree>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005734:	4605      	mov	r5, r0
 8005736:	460c      	mov	r4, r1
 8005738:	b976      	cbnz	r6, 8005758 <_Bfree+0x28>
 800573a:	2010      	movs	r0, #16
 800573c:	f7fe f9fe 	bl	8003b3c <malloc>
 8005740:	4602      	mov	r2, r0
 8005742:	6268      	str	r0, [r5, #36]	; 0x24
 8005744:	b920      	cbnz	r0, 8005750 <_Bfree+0x20>
 8005746:	4b09      	ldr	r3, [pc, #36]	; (800576c <_Bfree+0x3c>)
 8005748:	4809      	ldr	r0, [pc, #36]	; (8005770 <_Bfree+0x40>)
 800574a:	218a      	movs	r1, #138	; 0x8a
 800574c:	f001 fa04 	bl	8006b58 <__assert_func>
 8005750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005754:	6006      	str	r6, [r0, #0]
 8005756:	60c6      	str	r6, [r0, #12]
 8005758:	b13c      	cbz	r4, 800576a <_Bfree+0x3a>
 800575a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800575c:	6862      	ldr	r2, [r4, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005764:	6021      	str	r1, [r4, #0]
 8005766:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	08007fe7 	.word	0x08007fe7
 8005770:	080080cc 	.word	0x080080cc

08005774 <__multadd>:
 8005774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005778:	690d      	ldr	r5, [r1, #16]
 800577a:	4607      	mov	r7, r0
 800577c:	460c      	mov	r4, r1
 800577e:	461e      	mov	r6, r3
 8005780:	f101 0c14 	add.w	ip, r1, #20
 8005784:	2000      	movs	r0, #0
 8005786:	f8dc 3000 	ldr.w	r3, [ip]
 800578a:	b299      	uxth	r1, r3
 800578c:	fb02 6101 	mla	r1, r2, r1, r6
 8005790:	0c1e      	lsrs	r6, r3, #16
 8005792:	0c0b      	lsrs	r3, r1, #16
 8005794:	fb02 3306 	mla	r3, r2, r6, r3
 8005798:	b289      	uxth	r1, r1
 800579a:	3001      	adds	r0, #1
 800579c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80057a0:	4285      	cmp	r5, r0
 80057a2:	f84c 1b04 	str.w	r1, [ip], #4
 80057a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80057aa:	dcec      	bgt.n	8005786 <__multadd+0x12>
 80057ac:	b30e      	cbz	r6, 80057f2 <__multadd+0x7e>
 80057ae:	68a3      	ldr	r3, [r4, #8]
 80057b0:	42ab      	cmp	r3, r5
 80057b2:	dc19      	bgt.n	80057e8 <__multadd+0x74>
 80057b4:	6861      	ldr	r1, [r4, #4]
 80057b6:	4638      	mov	r0, r7
 80057b8:	3101      	adds	r1, #1
 80057ba:	f7ff ff79 	bl	80056b0 <_Balloc>
 80057be:	4680      	mov	r8, r0
 80057c0:	b928      	cbnz	r0, 80057ce <__multadd+0x5a>
 80057c2:	4602      	mov	r2, r0
 80057c4:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <__multadd+0x84>)
 80057c6:	480d      	ldr	r0, [pc, #52]	; (80057fc <__multadd+0x88>)
 80057c8:	21b5      	movs	r1, #181	; 0xb5
 80057ca:	f001 f9c5 	bl	8006b58 <__assert_func>
 80057ce:	6922      	ldr	r2, [r4, #16]
 80057d0:	3202      	adds	r2, #2
 80057d2:	f104 010c 	add.w	r1, r4, #12
 80057d6:	0092      	lsls	r2, r2, #2
 80057d8:	300c      	adds	r0, #12
 80057da:	f7ff ff4f 	bl	800567c <memcpy>
 80057de:	4621      	mov	r1, r4
 80057e0:	4638      	mov	r0, r7
 80057e2:	f7ff ffa5 	bl	8005730 <_Bfree>
 80057e6:	4644      	mov	r4, r8
 80057e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057ec:	3501      	adds	r5, #1
 80057ee:	615e      	str	r6, [r3, #20]
 80057f0:	6125      	str	r5, [r4, #16]
 80057f2:	4620      	mov	r0, r4
 80057f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f8:	08008059 	.word	0x08008059
 80057fc:	080080cc 	.word	0x080080cc

08005800 <__hi0bits>:
 8005800:	0c03      	lsrs	r3, r0, #16
 8005802:	041b      	lsls	r3, r3, #16
 8005804:	b9d3      	cbnz	r3, 800583c <__hi0bits+0x3c>
 8005806:	0400      	lsls	r0, r0, #16
 8005808:	2310      	movs	r3, #16
 800580a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800580e:	bf04      	itt	eq
 8005810:	0200      	lsleq	r0, r0, #8
 8005812:	3308      	addeq	r3, #8
 8005814:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005818:	bf04      	itt	eq
 800581a:	0100      	lsleq	r0, r0, #4
 800581c:	3304      	addeq	r3, #4
 800581e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005822:	bf04      	itt	eq
 8005824:	0080      	lsleq	r0, r0, #2
 8005826:	3302      	addeq	r3, #2
 8005828:	2800      	cmp	r0, #0
 800582a:	db05      	blt.n	8005838 <__hi0bits+0x38>
 800582c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005830:	f103 0301 	add.w	r3, r3, #1
 8005834:	bf08      	it	eq
 8005836:	2320      	moveq	r3, #32
 8005838:	4618      	mov	r0, r3
 800583a:	4770      	bx	lr
 800583c:	2300      	movs	r3, #0
 800583e:	e7e4      	b.n	800580a <__hi0bits+0xa>

08005840 <__lo0bits>:
 8005840:	6803      	ldr	r3, [r0, #0]
 8005842:	f013 0207 	ands.w	r2, r3, #7
 8005846:	4601      	mov	r1, r0
 8005848:	d00b      	beq.n	8005862 <__lo0bits+0x22>
 800584a:	07da      	lsls	r2, r3, #31
 800584c:	d423      	bmi.n	8005896 <__lo0bits+0x56>
 800584e:	0798      	lsls	r0, r3, #30
 8005850:	bf49      	itett	mi
 8005852:	085b      	lsrmi	r3, r3, #1
 8005854:	089b      	lsrpl	r3, r3, #2
 8005856:	2001      	movmi	r0, #1
 8005858:	600b      	strmi	r3, [r1, #0]
 800585a:	bf5c      	itt	pl
 800585c:	600b      	strpl	r3, [r1, #0]
 800585e:	2002      	movpl	r0, #2
 8005860:	4770      	bx	lr
 8005862:	b298      	uxth	r0, r3
 8005864:	b9a8      	cbnz	r0, 8005892 <__lo0bits+0x52>
 8005866:	0c1b      	lsrs	r3, r3, #16
 8005868:	2010      	movs	r0, #16
 800586a:	b2da      	uxtb	r2, r3
 800586c:	b90a      	cbnz	r2, 8005872 <__lo0bits+0x32>
 800586e:	3008      	adds	r0, #8
 8005870:	0a1b      	lsrs	r3, r3, #8
 8005872:	071a      	lsls	r2, r3, #28
 8005874:	bf04      	itt	eq
 8005876:	091b      	lsreq	r3, r3, #4
 8005878:	3004      	addeq	r0, #4
 800587a:	079a      	lsls	r2, r3, #30
 800587c:	bf04      	itt	eq
 800587e:	089b      	lsreq	r3, r3, #2
 8005880:	3002      	addeq	r0, #2
 8005882:	07da      	lsls	r2, r3, #31
 8005884:	d403      	bmi.n	800588e <__lo0bits+0x4e>
 8005886:	085b      	lsrs	r3, r3, #1
 8005888:	f100 0001 	add.w	r0, r0, #1
 800588c:	d005      	beq.n	800589a <__lo0bits+0x5a>
 800588e:	600b      	str	r3, [r1, #0]
 8005890:	4770      	bx	lr
 8005892:	4610      	mov	r0, r2
 8005894:	e7e9      	b.n	800586a <__lo0bits+0x2a>
 8005896:	2000      	movs	r0, #0
 8005898:	4770      	bx	lr
 800589a:	2020      	movs	r0, #32
 800589c:	4770      	bx	lr
	...

080058a0 <__i2b>:
 80058a0:	b510      	push	{r4, lr}
 80058a2:	460c      	mov	r4, r1
 80058a4:	2101      	movs	r1, #1
 80058a6:	f7ff ff03 	bl	80056b0 <_Balloc>
 80058aa:	4602      	mov	r2, r0
 80058ac:	b928      	cbnz	r0, 80058ba <__i2b+0x1a>
 80058ae:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <__i2b+0x24>)
 80058b0:	4805      	ldr	r0, [pc, #20]	; (80058c8 <__i2b+0x28>)
 80058b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80058b6:	f001 f94f 	bl	8006b58 <__assert_func>
 80058ba:	2301      	movs	r3, #1
 80058bc:	6144      	str	r4, [r0, #20]
 80058be:	6103      	str	r3, [r0, #16]
 80058c0:	bd10      	pop	{r4, pc}
 80058c2:	bf00      	nop
 80058c4:	08008059 	.word	0x08008059
 80058c8:	080080cc 	.word	0x080080cc

080058cc <__multiply>:
 80058cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d0:	4691      	mov	r9, r2
 80058d2:	690a      	ldr	r2, [r1, #16]
 80058d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80058d8:	429a      	cmp	r2, r3
 80058da:	bfb8      	it	lt
 80058dc:	460b      	movlt	r3, r1
 80058de:	460c      	mov	r4, r1
 80058e0:	bfbc      	itt	lt
 80058e2:	464c      	movlt	r4, r9
 80058e4:	4699      	movlt	r9, r3
 80058e6:	6927      	ldr	r7, [r4, #16]
 80058e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80058ec:	68a3      	ldr	r3, [r4, #8]
 80058ee:	6861      	ldr	r1, [r4, #4]
 80058f0:	eb07 060a 	add.w	r6, r7, sl
 80058f4:	42b3      	cmp	r3, r6
 80058f6:	b085      	sub	sp, #20
 80058f8:	bfb8      	it	lt
 80058fa:	3101      	addlt	r1, #1
 80058fc:	f7ff fed8 	bl	80056b0 <_Balloc>
 8005900:	b930      	cbnz	r0, 8005910 <__multiply+0x44>
 8005902:	4602      	mov	r2, r0
 8005904:	4b44      	ldr	r3, [pc, #272]	; (8005a18 <__multiply+0x14c>)
 8005906:	4845      	ldr	r0, [pc, #276]	; (8005a1c <__multiply+0x150>)
 8005908:	f240 115d 	movw	r1, #349	; 0x15d
 800590c:	f001 f924 	bl	8006b58 <__assert_func>
 8005910:	f100 0514 	add.w	r5, r0, #20
 8005914:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005918:	462b      	mov	r3, r5
 800591a:	2200      	movs	r2, #0
 800591c:	4543      	cmp	r3, r8
 800591e:	d321      	bcc.n	8005964 <__multiply+0x98>
 8005920:	f104 0314 	add.w	r3, r4, #20
 8005924:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005928:	f109 0314 	add.w	r3, r9, #20
 800592c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005930:	9202      	str	r2, [sp, #8]
 8005932:	1b3a      	subs	r2, r7, r4
 8005934:	3a15      	subs	r2, #21
 8005936:	f022 0203 	bic.w	r2, r2, #3
 800593a:	3204      	adds	r2, #4
 800593c:	f104 0115 	add.w	r1, r4, #21
 8005940:	428f      	cmp	r7, r1
 8005942:	bf38      	it	cc
 8005944:	2204      	movcc	r2, #4
 8005946:	9201      	str	r2, [sp, #4]
 8005948:	9a02      	ldr	r2, [sp, #8]
 800594a:	9303      	str	r3, [sp, #12]
 800594c:	429a      	cmp	r2, r3
 800594e:	d80c      	bhi.n	800596a <__multiply+0x9e>
 8005950:	2e00      	cmp	r6, #0
 8005952:	dd03      	ble.n	800595c <__multiply+0x90>
 8005954:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005958:	2b00      	cmp	r3, #0
 800595a:	d05a      	beq.n	8005a12 <__multiply+0x146>
 800595c:	6106      	str	r6, [r0, #16]
 800595e:	b005      	add	sp, #20
 8005960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005964:	f843 2b04 	str.w	r2, [r3], #4
 8005968:	e7d8      	b.n	800591c <__multiply+0x50>
 800596a:	f8b3 a000 	ldrh.w	sl, [r3]
 800596e:	f1ba 0f00 	cmp.w	sl, #0
 8005972:	d024      	beq.n	80059be <__multiply+0xf2>
 8005974:	f104 0e14 	add.w	lr, r4, #20
 8005978:	46a9      	mov	r9, r5
 800597a:	f04f 0c00 	mov.w	ip, #0
 800597e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005982:	f8d9 1000 	ldr.w	r1, [r9]
 8005986:	fa1f fb82 	uxth.w	fp, r2
 800598a:	b289      	uxth	r1, r1
 800598c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005990:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005994:	f8d9 2000 	ldr.w	r2, [r9]
 8005998:	4461      	add	r1, ip
 800599a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800599e:	fb0a c20b 	mla	r2, sl, fp, ip
 80059a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80059a6:	b289      	uxth	r1, r1
 80059a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80059ac:	4577      	cmp	r7, lr
 80059ae:	f849 1b04 	str.w	r1, [r9], #4
 80059b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80059b6:	d8e2      	bhi.n	800597e <__multiply+0xb2>
 80059b8:	9a01      	ldr	r2, [sp, #4]
 80059ba:	f845 c002 	str.w	ip, [r5, r2]
 80059be:	9a03      	ldr	r2, [sp, #12]
 80059c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80059c4:	3304      	adds	r3, #4
 80059c6:	f1b9 0f00 	cmp.w	r9, #0
 80059ca:	d020      	beq.n	8005a0e <__multiply+0x142>
 80059cc:	6829      	ldr	r1, [r5, #0]
 80059ce:	f104 0c14 	add.w	ip, r4, #20
 80059d2:	46ae      	mov	lr, r5
 80059d4:	f04f 0a00 	mov.w	sl, #0
 80059d8:	f8bc b000 	ldrh.w	fp, [ip]
 80059dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80059e0:	fb09 220b 	mla	r2, r9, fp, r2
 80059e4:	4492      	add	sl, r2
 80059e6:	b289      	uxth	r1, r1
 80059e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80059ec:	f84e 1b04 	str.w	r1, [lr], #4
 80059f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80059f4:	f8be 1000 	ldrh.w	r1, [lr]
 80059f8:	0c12      	lsrs	r2, r2, #16
 80059fa:	fb09 1102 	mla	r1, r9, r2, r1
 80059fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005a02:	4567      	cmp	r7, ip
 8005a04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005a08:	d8e6      	bhi.n	80059d8 <__multiply+0x10c>
 8005a0a:	9a01      	ldr	r2, [sp, #4]
 8005a0c:	50a9      	str	r1, [r5, r2]
 8005a0e:	3504      	adds	r5, #4
 8005a10:	e79a      	b.n	8005948 <__multiply+0x7c>
 8005a12:	3e01      	subs	r6, #1
 8005a14:	e79c      	b.n	8005950 <__multiply+0x84>
 8005a16:	bf00      	nop
 8005a18:	08008059 	.word	0x08008059
 8005a1c:	080080cc 	.word	0x080080cc

08005a20 <__pow5mult>:
 8005a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a24:	4615      	mov	r5, r2
 8005a26:	f012 0203 	ands.w	r2, r2, #3
 8005a2a:	4606      	mov	r6, r0
 8005a2c:	460f      	mov	r7, r1
 8005a2e:	d007      	beq.n	8005a40 <__pow5mult+0x20>
 8005a30:	4c25      	ldr	r4, [pc, #148]	; (8005ac8 <__pow5mult+0xa8>)
 8005a32:	3a01      	subs	r2, #1
 8005a34:	2300      	movs	r3, #0
 8005a36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a3a:	f7ff fe9b 	bl	8005774 <__multadd>
 8005a3e:	4607      	mov	r7, r0
 8005a40:	10ad      	asrs	r5, r5, #2
 8005a42:	d03d      	beq.n	8005ac0 <__pow5mult+0xa0>
 8005a44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a46:	b97c      	cbnz	r4, 8005a68 <__pow5mult+0x48>
 8005a48:	2010      	movs	r0, #16
 8005a4a:	f7fe f877 	bl	8003b3c <malloc>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	6270      	str	r0, [r6, #36]	; 0x24
 8005a52:	b928      	cbnz	r0, 8005a60 <__pow5mult+0x40>
 8005a54:	4b1d      	ldr	r3, [pc, #116]	; (8005acc <__pow5mult+0xac>)
 8005a56:	481e      	ldr	r0, [pc, #120]	; (8005ad0 <__pow5mult+0xb0>)
 8005a58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005a5c:	f001 f87c 	bl	8006b58 <__assert_func>
 8005a60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a64:	6004      	str	r4, [r0, #0]
 8005a66:	60c4      	str	r4, [r0, #12]
 8005a68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a70:	b94c      	cbnz	r4, 8005a86 <__pow5mult+0x66>
 8005a72:	f240 2171 	movw	r1, #625	; 0x271
 8005a76:	4630      	mov	r0, r6
 8005a78:	f7ff ff12 	bl	80058a0 <__i2b>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a82:	4604      	mov	r4, r0
 8005a84:	6003      	str	r3, [r0, #0]
 8005a86:	f04f 0900 	mov.w	r9, #0
 8005a8a:	07eb      	lsls	r3, r5, #31
 8005a8c:	d50a      	bpl.n	8005aa4 <__pow5mult+0x84>
 8005a8e:	4639      	mov	r1, r7
 8005a90:	4622      	mov	r2, r4
 8005a92:	4630      	mov	r0, r6
 8005a94:	f7ff ff1a 	bl	80058cc <__multiply>
 8005a98:	4639      	mov	r1, r7
 8005a9a:	4680      	mov	r8, r0
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f7ff fe47 	bl	8005730 <_Bfree>
 8005aa2:	4647      	mov	r7, r8
 8005aa4:	106d      	asrs	r5, r5, #1
 8005aa6:	d00b      	beq.n	8005ac0 <__pow5mult+0xa0>
 8005aa8:	6820      	ldr	r0, [r4, #0]
 8005aaa:	b938      	cbnz	r0, 8005abc <__pow5mult+0x9c>
 8005aac:	4622      	mov	r2, r4
 8005aae:	4621      	mov	r1, r4
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	f7ff ff0b 	bl	80058cc <__multiply>
 8005ab6:	6020      	str	r0, [r4, #0]
 8005ab8:	f8c0 9000 	str.w	r9, [r0]
 8005abc:	4604      	mov	r4, r0
 8005abe:	e7e4      	b.n	8005a8a <__pow5mult+0x6a>
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ac6:	bf00      	nop
 8005ac8:	08008218 	.word	0x08008218
 8005acc:	08007fe7 	.word	0x08007fe7
 8005ad0:	080080cc 	.word	0x080080cc

08005ad4 <__lshift>:
 8005ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad8:	460c      	mov	r4, r1
 8005ada:	6849      	ldr	r1, [r1, #4]
 8005adc:	6923      	ldr	r3, [r4, #16]
 8005ade:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ae2:	68a3      	ldr	r3, [r4, #8]
 8005ae4:	4607      	mov	r7, r0
 8005ae6:	4691      	mov	r9, r2
 8005ae8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005aec:	f108 0601 	add.w	r6, r8, #1
 8005af0:	42b3      	cmp	r3, r6
 8005af2:	db0b      	blt.n	8005b0c <__lshift+0x38>
 8005af4:	4638      	mov	r0, r7
 8005af6:	f7ff fddb 	bl	80056b0 <_Balloc>
 8005afa:	4605      	mov	r5, r0
 8005afc:	b948      	cbnz	r0, 8005b12 <__lshift+0x3e>
 8005afe:	4602      	mov	r2, r0
 8005b00:	4b2a      	ldr	r3, [pc, #168]	; (8005bac <__lshift+0xd8>)
 8005b02:	482b      	ldr	r0, [pc, #172]	; (8005bb0 <__lshift+0xdc>)
 8005b04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005b08:	f001 f826 	bl	8006b58 <__assert_func>
 8005b0c:	3101      	adds	r1, #1
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	e7ee      	b.n	8005af0 <__lshift+0x1c>
 8005b12:	2300      	movs	r3, #0
 8005b14:	f100 0114 	add.w	r1, r0, #20
 8005b18:	f100 0210 	add.w	r2, r0, #16
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	4553      	cmp	r3, sl
 8005b20:	db37      	blt.n	8005b92 <__lshift+0xbe>
 8005b22:	6920      	ldr	r0, [r4, #16]
 8005b24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b28:	f104 0314 	add.w	r3, r4, #20
 8005b2c:	f019 091f 	ands.w	r9, r9, #31
 8005b30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005b38:	d02f      	beq.n	8005b9a <__lshift+0xc6>
 8005b3a:	f1c9 0e20 	rsb	lr, r9, #32
 8005b3e:	468a      	mov	sl, r1
 8005b40:	f04f 0c00 	mov.w	ip, #0
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	fa02 f209 	lsl.w	r2, r2, r9
 8005b4a:	ea42 020c 	orr.w	r2, r2, ip
 8005b4e:	f84a 2b04 	str.w	r2, [sl], #4
 8005b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b56:	4298      	cmp	r0, r3
 8005b58:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005b5c:	d8f2      	bhi.n	8005b44 <__lshift+0x70>
 8005b5e:	1b03      	subs	r3, r0, r4
 8005b60:	3b15      	subs	r3, #21
 8005b62:	f023 0303 	bic.w	r3, r3, #3
 8005b66:	3304      	adds	r3, #4
 8005b68:	f104 0215 	add.w	r2, r4, #21
 8005b6c:	4290      	cmp	r0, r2
 8005b6e:	bf38      	it	cc
 8005b70:	2304      	movcc	r3, #4
 8005b72:	f841 c003 	str.w	ip, [r1, r3]
 8005b76:	f1bc 0f00 	cmp.w	ip, #0
 8005b7a:	d001      	beq.n	8005b80 <__lshift+0xac>
 8005b7c:	f108 0602 	add.w	r6, r8, #2
 8005b80:	3e01      	subs	r6, #1
 8005b82:	4638      	mov	r0, r7
 8005b84:	612e      	str	r6, [r5, #16]
 8005b86:	4621      	mov	r1, r4
 8005b88:	f7ff fdd2 	bl	8005730 <_Bfree>
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b92:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b96:	3301      	adds	r3, #1
 8005b98:	e7c1      	b.n	8005b1e <__lshift+0x4a>
 8005b9a:	3904      	subs	r1, #4
 8005b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ba0:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ba4:	4298      	cmp	r0, r3
 8005ba6:	d8f9      	bhi.n	8005b9c <__lshift+0xc8>
 8005ba8:	e7ea      	b.n	8005b80 <__lshift+0xac>
 8005baa:	bf00      	nop
 8005bac:	08008059 	.word	0x08008059
 8005bb0:	080080cc 	.word	0x080080cc

08005bb4 <__mcmp>:
 8005bb4:	b530      	push	{r4, r5, lr}
 8005bb6:	6902      	ldr	r2, [r0, #16]
 8005bb8:	690c      	ldr	r4, [r1, #16]
 8005bba:	1b12      	subs	r2, r2, r4
 8005bbc:	d10e      	bne.n	8005bdc <__mcmp+0x28>
 8005bbe:	f100 0314 	add.w	r3, r0, #20
 8005bc2:	3114      	adds	r1, #20
 8005bc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005bc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005bcc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005bd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005bd4:	42a5      	cmp	r5, r4
 8005bd6:	d003      	beq.n	8005be0 <__mcmp+0x2c>
 8005bd8:	d305      	bcc.n	8005be6 <__mcmp+0x32>
 8005bda:	2201      	movs	r2, #1
 8005bdc:	4610      	mov	r0, r2
 8005bde:	bd30      	pop	{r4, r5, pc}
 8005be0:	4283      	cmp	r3, r0
 8005be2:	d3f3      	bcc.n	8005bcc <__mcmp+0x18>
 8005be4:	e7fa      	b.n	8005bdc <__mcmp+0x28>
 8005be6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bea:	e7f7      	b.n	8005bdc <__mcmp+0x28>

08005bec <__mdiff>:
 8005bec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	4690      	mov	r8, r2
 8005bfa:	f7ff ffdb 	bl	8005bb4 <__mcmp>
 8005bfe:	1e05      	subs	r5, r0, #0
 8005c00:	d110      	bne.n	8005c24 <__mdiff+0x38>
 8005c02:	4629      	mov	r1, r5
 8005c04:	4630      	mov	r0, r6
 8005c06:	f7ff fd53 	bl	80056b0 <_Balloc>
 8005c0a:	b930      	cbnz	r0, 8005c1a <__mdiff+0x2e>
 8005c0c:	4b3a      	ldr	r3, [pc, #232]	; (8005cf8 <__mdiff+0x10c>)
 8005c0e:	4602      	mov	r2, r0
 8005c10:	f240 2132 	movw	r1, #562	; 0x232
 8005c14:	4839      	ldr	r0, [pc, #228]	; (8005cfc <__mdiff+0x110>)
 8005c16:	f000 ff9f 	bl	8006b58 <__assert_func>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c24:	bfa4      	itt	ge
 8005c26:	4643      	movge	r3, r8
 8005c28:	46a0      	movge	r8, r4
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005c30:	bfa6      	itte	ge
 8005c32:	461c      	movge	r4, r3
 8005c34:	2500      	movge	r5, #0
 8005c36:	2501      	movlt	r5, #1
 8005c38:	f7ff fd3a 	bl	80056b0 <_Balloc>
 8005c3c:	b920      	cbnz	r0, 8005c48 <__mdiff+0x5c>
 8005c3e:	4b2e      	ldr	r3, [pc, #184]	; (8005cf8 <__mdiff+0x10c>)
 8005c40:	4602      	mov	r2, r0
 8005c42:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005c46:	e7e5      	b.n	8005c14 <__mdiff+0x28>
 8005c48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005c4c:	6926      	ldr	r6, [r4, #16]
 8005c4e:	60c5      	str	r5, [r0, #12]
 8005c50:	f104 0914 	add.w	r9, r4, #20
 8005c54:	f108 0514 	add.w	r5, r8, #20
 8005c58:	f100 0e14 	add.w	lr, r0, #20
 8005c5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005c60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005c64:	f108 0210 	add.w	r2, r8, #16
 8005c68:	46f2      	mov	sl, lr
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005c74:	fa1f f883 	uxth.w	r8, r3
 8005c78:	fa11 f18b 	uxtah	r1, r1, fp
 8005c7c:	0c1b      	lsrs	r3, r3, #16
 8005c7e:	eba1 0808 	sub.w	r8, r1, r8
 8005c82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005c8a:	fa1f f888 	uxth.w	r8, r8
 8005c8e:	1419      	asrs	r1, r3, #16
 8005c90:	454e      	cmp	r6, r9
 8005c92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005c96:	f84a 3b04 	str.w	r3, [sl], #4
 8005c9a:	d8e7      	bhi.n	8005c6c <__mdiff+0x80>
 8005c9c:	1b33      	subs	r3, r6, r4
 8005c9e:	3b15      	subs	r3, #21
 8005ca0:	f023 0303 	bic.w	r3, r3, #3
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	3415      	adds	r4, #21
 8005ca8:	42a6      	cmp	r6, r4
 8005caa:	bf38      	it	cc
 8005cac:	2304      	movcc	r3, #4
 8005cae:	441d      	add	r5, r3
 8005cb0:	4473      	add	r3, lr
 8005cb2:	469e      	mov	lr, r3
 8005cb4:	462e      	mov	r6, r5
 8005cb6:	4566      	cmp	r6, ip
 8005cb8:	d30e      	bcc.n	8005cd8 <__mdiff+0xec>
 8005cba:	f10c 0203 	add.w	r2, ip, #3
 8005cbe:	1b52      	subs	r2, r2, r5
 8005cc0:	f022 0203 	bic.w	r2, r2, #3
 8005cc4:	3d03      	subs	r5, #3
 8005cc6:	45ac      	cmp	ip, r5
 8005cc8:	bf38      	it	cc
 8005cca:	2200      	movcc	r2, #0
 8005ccc:	441a      	add	r2, r3
 8005cce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005cd2:	b17b      	cbz	r3, 8005cf4 <__mdiff+0x108>
 8005cd4:	6107      	str	r7, [r0, #16]
 8005cd6:	e7a3      	b.n	8005c20 <__mdiff+0x34>
 8005cd8:	f856 8b04 	ldr.w	r8, [r6], #4
 8005cdc:	fa11 f288 	uxtah	r2, r1, r8
 8005ce0:	1414      	asrs	r4, r2, #16
 8005ce2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ce6:	b292      	uxth	r2, r2
 8005ce8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005cec:	f84e 2b04 	str.w	r2, [lr], #4
 8005cf0:	1421      	asrs	r1, r4, #16
 8005cf2:	e7e0      	b.n	8005cb6 <__mdiff+0xca>
 8005cf4:	3f01      	subs	r7, #1
 8005cf6:	e7ea      	b.n	8005cce <__mdiff+0xe2>
 8005cf8:	08008059 	.word	0x08008059
 8005cfc:	080080cc 	.word	0x080080cc

08005d00 <__d2b>:
 8005d00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d04:	4689      	mov	r9, r1
 8005d06:	2101      	movs	r1, #1
 8005d08:	ec57 6b10 	vmov	r6, r7, d0
 8005d0c:	4690      	mov	r8, r2
 8005d0e:	f7ff fccf 	bl	80056b0 <_Balloc>
 8005d12:	4604      	mov	r4, r0
 8005d14:	b930      	cbnz	r0, 8005d24 <__d2b+0x24>
 8005d16:	4602      	mov	r2, r0
 8005d18:	4b25      	ldr	r3, [pc, #148]	; (8005db0 <__d2b+0xb0>)
 8005d1a:	4826      	ldr	r0, [pc, #152]	; (8005db4 <__d2b+0xb4>)
 8005d1c:	f240 310a 	movw	r1, #778	; 0x30a
 8005d20:	f000 ff1a 	bl	8006b58 <__assert_func>
 8005d24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005d28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d2c:	bb35      	cbnz	r5, 8005d7c <__d2b+0x7c>
 8005d2e:	2e00      	cmp	r6, #0
 8005d30:	9301      	str	r3, [sp, #4]
 8005d32:	d028      	beq.n	8005d86 <__d2b+0x86>
 8005d34:	4668      	mov	r0, sp
 8005d36:	9600      	str	r6, [sp, #0]
 8005d38:	f7ff fd82 	bl	8005840 <__lo0bits>
 8005d3c:	9900      	ldr	r1, [sp, #0]
 8005d3e:	b300      	cbz	r0, 8005d82 <__d2b+0x82>
 8005d40:	9a01      	ldr	r2, [sp, #4]
 8005d42:	f1c0 0320 	rsb	r3, r0, #32
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	40c2      	lsrs	r2, r0
 8005d4e:	6163      	str	r3, [r4, #20]
 8005d50:	9201      	str	r2, [sp, #4]
 8005d52:	9b01      	ldr	r3, [sp, #4]
 8005d54:	61a3      	str	r3, [r4, #24]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bf14      	ite	ne
 8005d5a:	2202      	movne	r2, #2
 8005d5c:	2201      	moveq	r2, #1
 8005d5e:	6122      	str	r2, [r4, #16]
 8005d60:	b1d5      	cbz	r5, 8005d98 <__d2b+0x98>
 8005d62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d66:	4405      	add	r5, r0
 8005d68:	f8c9 5000 	str.w	r5, [r9]
 8005d6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d70:	f8c8 0000 	str.w	r0, [r8]
 8005d74:	4620      	mov	r0, r4
 8005d76:	b003      	add	sp, #12
 8005d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d80:	e7d5      	b.n	8005d2e <__d2b+0x2e>
 8005d82:	6161      	str	r1, [r4, #20]
 8005d84:	e7e5      	b.n	8005d52 <__d2b+0x52>
 8005d86:	a801      	add	r0, sp, #4
 8005d88:	f7ff fd5a 	bl	8005840 <__lo0bits>
 8005d8c:	9b01      	ldr	r3, [sp, #4]
 8005d8e:	6163      	str	r3, [r4, #20]
 8005d90:	2201      	movs	r2, #1
 8005d92:	6122      	str	r2, [r4, #16]
 8005d94:	3020      	adds	r0, #32
 8005d96:	e7e3      	b.n	8005d60 <__d2b+0x60>
 8005d98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005d9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005da0:	f8c9 0000 	str.w	r0, [r9]
 8005da4:	6918      	ldr	r0, [r3, #16]
 8005da6:	f7ff fd2b 	bl	8005800 <__hi0bits>
 8005daa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005dae:	e7df      	b.n	8005d70 <__d2b+0x70>
 8005db0:	08008059 	.word	0x08008059
 8005db4:	080080cc 	.word	0x080080cc

08005db8 <_calloc_r>:
 8005db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dba:	fba1 2402 	umull	r2, r4, r1, r2
 8005dbe:	b94c      	cbnz	r4, 8005dd4 <_calloc_r+0x1c>
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	9201      	str	r2, [sp, #4]
 8005dc4:	f7fd ff36 	bl	8003c34 <_malloc_r>
 8005dc8:	9a01      	ldr	r2, [sp, #4]
 8005dca:	4605      	mov	r5, r0
 8005dcc:	b930      	cbnz	r0, 8005ddc <_calloc_r+0x24>
 8005dce:	4628      	mov	r0, r5
 8005dd0:	b003      	add	sp, #12
 8005dd2:	bd30      	pop	{r4, r5, pc}
 8005dd4:	220c      	movs	r2, #12
 8005dd6:	6002      	str	r2, [r0, #0]
 8005dd8:	2500      	movs	r5, #0
 8005dda:	e7f8      	b.n	8005dce <_calloc_r+0x16>
 8005ddc:	4621      	mov	r1, r4
 8005dde:	f7fd feb5 	bl	8003b4c <memset>
 8005de2:	e7f4      	b.n	8005dce <_calloc_r+0x16>

08005de4 <_sungetc_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	1c4b      	adds	r3, r1, #1
 8005de8:	4614      	mov	r4, r2
 8005dea:	d103      	bne.n	8005df4 <_sungetc_r+0x10>
 8005dec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005df0:	4628      	mov	r0, r5
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	8993      	ldrh	r3, [r2, #12]
 8005df6:	f023 0320 	bic.w	r3, r3, #32
 8005dfa:	8193      	strh	r3, [r2, #12]
 8005dfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005dfe:	6852      	ldr	r2, [r2, #4]
 8005e00:	b2cd      	uxtb	r5, r1
 8005e02:	b18b      	cbz	r3, 8005e28 <_sungetc_r+0x44>
 8005e04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e06:	4293      	cmp	r3, r2
 8005e08:	dd08      	ble.n	8005e1c <_sungetc_r+0x38>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	1e5a      	subs	r2, r3, #1
 8005e0e:	6022      	str	r2, [r4, #0]
 8005e10:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005e14:	6863      	ldr	r3, [r4, #4]
 8005e16:	3301      	adds	r3, #1
 8005e18:	6063      	str	r3, [r4, #4]
 8005e1a:	e7e9      	b.n	8005df0 <_sungetc_r+0xc>
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	f000 fda1 	bl	8006964 <__submore>
 8005e22:	2800      	cmp	r0, #0
 8005e24:	d0f1      	beq.n	8005e0a <_sungetc_r+0x26>
 8005e26:	e7e1      	b.n	8005dec <_sungetc_r+0x8>
 8005e28:	6921      	ldr	r1, [r4, #16]
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	b151      	cbz	r1, 8005e44 <_sungetc_r+0x60>
 8005e2e:	4299      	cmp	r1, r3
 8005e30:	d208      	bcs.n	8005e44 <_sungetc_r+0x60>
 8005e32:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005e36:	42a9      	cmp	r1, r5
 8005e38:	d104      	bne.n	8005e44 <_sungetc_r+0x60>
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	3201      	adds	r2, #1
 8005e3e:	6023      	str	r3, [r4, #0]
 8005e40:	6062      	str	r2, [r4, #4]
 8005e42:	e7d5      	b.n	8005df0 <_sungetc_r+0xc>
 8005e44:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e4c:	6363      	str	r3, [r4, #52]	; 0x34
 8005e4e:	2303      	movs	r3, #3
 8005e50:	63a3      	str	r3, [r4, #56]	; 0x38
 8005e52:	4623      	mov	r3, r4
 8005e54:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e7dc      	b.n	8005e18 <_sungetc_r+0x34>

08005e5e <__ssrefill_r>:
 8005e5e:	b510      	push	{r4, lr}
 8005e60:	460c      	mov	r4, r1
 8005e62:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005e64:	b169      	cbz	r1, 8005e82 <__ssrefill_r+0x24>
 8005e66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e6a:	4299      	cmp	r1, r3
 8005e6c:	d001      	beq.n	8005e72 <__ssrefill_r+0x14>
 8005e6e:	f7fd fe75 	bl	8003b5c <_free_r>
 8005e72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e74:	6063      	str	r3, [r4, #4]
 8005e76:	2000      	movs	r0, #0
 8005e78:	6360      	str	r0, [r4, #52]	; 0x34
 8005e7a:	b113      	cbz	r3, 8005e82 <__ssrefill_r+0x24>
 8005e7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e7e:	6023      	str	r3, [r4, #0]
 8005e80:	bd10      	pop	{r4, pc}
 8005e82:	6923      	ldr	r3, [r4, #16]
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	2300      	movs	r3, #0
 8005e88:	6063      	str	r3, [r4, #4]
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	f043 0320 	orr.w	r3, r3, #32
 8005e90:	81a3      	strh	r3, [r4, #12]
 8005e92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e96:	e7f3      	b.n	8005e80 <__ssrefill_r+0x22>

08005e98 <__ssvfiscanf_r>:
 8005e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005ea8:	49a6      	ldr	r1, [pc, #664]	; (8006144 <__ssvfiscanf_r+0x2ac>)
 8005eaa:	91a0      	str	r1, [sp, #640]	; 0x280
 8005eac:	f10d 0804 	add.w	r8, sp, #4
 8005eb0:	49a5      	ldr	r1, [pc, #660]	; (8006148 <__ssvfiscanf_r+0x2b0>)
 8005eb2:	4fa6      	ldr	r7, [pc, #664]	; (800614c <__ssvfiscanf_r+0x2b4>)
 8005eb4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006150 <__ssvfiscanf_r+0x2b8>
 8005eb8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	91a1      	str	r1, [sp, #644]	; 0x284
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	7813      	ldrb	r3, [r2, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 815a 	beq.w	800617e <__ssvfiscanf_r+0x2e6>
 8005eca:	5dd9      	ldrb	r1, [r3, r7]
 8005ecc:	f011 0108 	ands.w	r1, r1, #8
 8005ed0:	f102 0501 	add.w	r5, r2, #1
 8005ed4:	d019      	beq.n	8005f0a <__ssvfiscanf_r+0x72>
 8005ed6:	6863      	ldr	r3, [r4, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	dd0f      	ble.n	8005efc <__ssvfiscanf_r+0x64>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	781a      	ldrb	r2, [r3, #0]
 8005ee0:	5cba      	ldrb	r2, [r7, r2]
 8005ee2:	0712      	lsls	r2, r2, #28
 8005ee4:	d401      	bmi.n	8005eea <__ssvfiscanf_r+0x52>
 8005ee6:	462a      	mov	r2, r5
 8005ee8:	e7eb      	b.n	8005ec2 <__ssvfiscanf_r+0x2a>
 8005eea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005eec:	3201      	adds	r2, #1
 8005eee:	9245      	str	r2, [sp, #276]	; 0x114
 8005ef0:	6862      	ldr	r2, [r4, #4]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	3a01      	subs	r2, #1
 8005ef6:	6062      	str	r2, [r4, #4]
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	e7ec      	b.n	8005ed6 <__ssvfiscanf_r+0x3e>
 8005efc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005efe:	4621      	mov	r1, r4
 8005f00:	4630      	mov	r0, r6
 8005f02:	4798      	blx	r3
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d0e9      	beq.n	8005edc <__ssvfiscanf_r+0x44>
 8005f08:	e7ed      	b.n	8005ee6 <__ssvfiscanf_r+0x4e>
 8005f0a:	2b25      	cmp	r3, #37	; 0x25
 8005f0c:	d012      	beq.n	8005f34 <__ssvfiscanf_r+0x9c>
 8005f0e:	469a      	mov	sl, r3
 8005f10:	6863      	ldr	r3, [r4, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f340 8091 	ble.w	800603a <__ssvfiscanf_r+0x1a2>
 8005f18:	6822      	ldr	r2, [r4, #0]
 8005f1a:	7813      	ldrb	r3, [r2, #0]
 8005f1c:	4553      	cmp	r3, sl
 8005f1e:	f040 812e 	bne.w	800617e <__ssvfiscanf_r+0x2e6>
 8005f22:	6863      	ldr	r3, [r4, #4]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	6063      	str	r3, [r4, #4]
 8005f28:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005f2a:	3201      	adds	r2, #1
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	6022      	str	r2, [r4, #0]
 8005f30:	9345      	str	r3, [sp, #276]	; 0x114
 8005f32:	e7d8      	b.n	8005ee6 <__ssvfiscanf_r+0x4e>
 8005f34:	9141      	str	r1, [sp, #260]	; 0x104
 8005f36:	9143      	str	r1, [sp, #268]	; 0x10c
 8005f38:	7853      	ldrb	r3, [r2, #1]
 8005f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f3c:	bf02      	ittt	eq
 8005f3e:	2310      	moveq	r3, #16
 8005f40:	1c95      	addeq	r5, r2, #2
 8005f42:	9341      	streq	r3, [sp, #260]	; 0x104
 8005f44:	220a      	movs	r2, #10
 8005f46:	46aa      	mov	sl, r5
 8005f48:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005f4c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005f50:	2b09      	cmp	r3, #9
 8005f52:	d91d      	bls.n	8005f90 <__ssvfiscanf_r+0xf8>
 8005f54:	487e      	ldr	r0, [pc, #504]	; (8006150 <__ssvfiscanf_r+0x2b8>)
 8005f56:	2203      	movs	r2, #3
 8005f58:	f7fa f95a 	bl	8000210 <memchr>
 8005f5c:	b140      	cbz	r0, 8005f70 <__ssvfiscanf_r+0xd8>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	eba0 0009 	sub.w	r0, r0, r9
 8005f64:	fa03 f000 	lsl.w	r0, r3, r0
 8005f68:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f6a:	4318      	orrs	r0, r3
 8005f6c:	9041      	str	r0, [sp, #260]	; 0x104
 8005f6e:	4655      	mov	r5, sl
 8005f70:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f74:	2b78      	cmp	r3, #120	; 0x78
 8005f76:	d806      	bhi.n	8005f86 <__ssvfiscanf_r+0xee>
 8005f78:	2b57      	cmp	r3, #87	; 0x57
 8005f7a:	d810      	bhi.n	8005f9e <__ssvfiscanf_r+0x106>
 8005f7c:	2b25      	cmp	r3, #37	; 0x25
 8005f7e:	d0c6      	beq.n	8005f0e <__ssvfiscanf_r+0x76>
 8005f80:	d856      	bhi.n	8006030 <__ssvfiscanf_r+0x198>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d064      	beq.n	8006050 <__ssvfiscanf_r+0x1b8>
 8005f86:	2303      	movs	r3, #3
 8005f88:	9347      	str	r3, [sp, #284]	; 0x11c
 8005f8a:	230a      	movs	r3, #10
 8005f8c:	9342      	str	r3, [sp, #264]	; 0x108
 8005f8e:	e071      	b.n	8006074 <__ssvfiscanf_r+0x1dc>
 8005f90:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005f92:	fb02 1103 	mla	r1, r2, r3, r1
 8005f96:	3930      	subs	r1, #48	; 0x30
 8005f98:	9143      	str	r1, [sp, #268]	; 0x10c
 8005f9a:	4655      	mov	r5, sl
 8005f9c:	e7d3      	b.n	8005f46 <__ssvfiscanf_r+0xae>
 8005f9e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005fa2:	2a20      	cmp	r2, #32
 8005fa4:	d8ef      	bhi.n	8005f86 <__ssvfiscanf_r+0xee>
 8005fa6:	a101      	add	r1, pc, #4	; (adr r1, 8005fac <__ssvfiscanf_r+0x114>)
 8005fa8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005fac:	0800605f 	.word	0x0800605f
 8005fb0:	08005f87 	.word	0x08005f87
 8005fb4:	08005f87 	.word	0x08005f87
 8005fb8:	080060bd 	.word	0x080060bd
 8005fbc:	08005f87 	.word	0x08005f87
 8005fc0:	08005f87 	.word	0x08005f87
 8005fc4:	08005f87 	.word	0x08005f87
 8005fc8:	08005f87 	.word	0x08005f87
 8005fcc:	08005f87 	.word	0x08005f87
 8005fd0:	08005f87 	.word	0x08005f87
 8005fd4:	08005f87 	.word	0x08005f87
 8005fd8:	080060d3 	.word	0x080060d3
 8005fdc:	080060a9 	.word	0x080060a9
 8005fe0:	08006037 	.word	0x08006037
 8005fe4:	08006037 	.word	0x08006037
 8005fe8:	08006037 	.word	0x08006037
 8005fec:	08005f87 	.word	0x08005f87
 8005ff0:	080060ad 	.word	0x080060ad
 8005ff4:	08005f87 	.word	0x08005f87
 8005ff8:	08005f87 	.word	0x08005f87
 8005ffc:	08005f87 	.word	0x08005f87
 8006000:	08005f87 	.word	0x08005f87
 8006004:	080060e3 	.word	0x080060e3
 8006008:	080060b5 	.word	0x080060b5
 800600c:	08006057 	.word	0x08006057
 8006010:	08005f87 	.word	0x08005f87
 8006014:	08005f87 	.word	0x08005f87
 8006018:	080060df 	.word	0x080060df
 800601c:	08005f87 	.word	0x08005f87
 8006020:	080060a9 	.word	0x080060a9
 8006024:	08005f87 	.word	0x08005f87
 8006028:	08005f87 	.word	0x08005f87
 800602c:	0800605f 	.word	0x0800605f
 8006030:	3b45      	subs	r3, #69	; 0x45
 8006032:	2b02      	cmp	r3, #2
 8006034:	d8a7      	bhi.n	8005f86 <__ssvfiscanf_r+0xee>
 8006036:	2305      	movs	r3, #5
 8006038:	e01b      	b.n	8006072 <__ssvfiscanf_r+0x1da>
 800603a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800603c:	4621      	mov	r1, r4
 800603e:	4630      	mov	r0, r6
 8006040:	4798      	blx	r3
 8006042:	2800      	cmp	r0, #0
 8006044:	f43f af68 	beq.w	8005f18 <__ssvfiscanf_r+0x80>
 8006048:	9844      	ldr	r0, [sp, #272]	; 0x110
 800604a:	2800      	cmp	r0, #0
 800604c:	f040 808d 	bne.w	800616a <__ssvfiscanf_r+0x2d2>
 8006050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006054:	e08f      	b.n	8006176 <__ssvfiscanf_r+0x2de>
 8006056:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006058:	f042 0220 	orr.w	r2, r2, #32
 800605c:	9241      	str	r2, [sp, #260]	; 0x104
 800605e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006064:	9241      	str	r2, [sp, #260]	; 0x104
 8006066:	2210      	movs	r2, #16
 8006068:	2b6f      	cmp	r3, #111	; 0x6f
 800606a:	9242      	str	r2, [sp, #264]	; 0x108
 800606c:	bf34      	ite	cc
 800606e:	2303      	movcc	r3, #3
 8006070:	2304      	movcs	r3, #4
 8006072:	9347      	str	r3, [sp, #284]	; 0x11c
 8006074:	6863      	ldr	r3, [r4, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	dd42      	ble.n	8006100 <__ssvfiscanf_r+0x268>
 800607a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800607c:	0659      	lsls	r1, r3, #25
 800607e:	d404      	bmi.n	800608a <__ssvfiscanf_r+0x1f2>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	781a      	ldrb	r2, [r3, #0]
 8006084:	5cba      	ldrb	r2, [r7, r2]
 8006086:	0712      	lsls	r2, r2, #28
 8006088:	d441      	bmi.n	800610e <__ssvfiscanf_r+0x276>
 800608a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800608c:	2b02      	cmp	r3, #2
 800608e:	dc50      	bgt.n	8006132 <__ssvfiscanf_r+0x29a>
 8006090:	466b      	mov	r3, sp
 8006092:	4622      	mov	r2, r4
 8006094:	a941      	add	r1, sp, #260	; 0x104
 8006096:	4630      	mov	r0, r6
 8006098:	f000 f9d0 	bl	800643c <_scanf_chars>
 800609c:	2801      	cmp	r0, #1
 800609e:	d06e      	beq.n	800617e <__ssvfiscanf_r+0x2e6>
 80060a0:	2802      	cmp	r0, #2
 80060a2:	f47f af20 	bne.w	8005ee6 <__ssvfiscanf_r+0x4e>
 80060a6:	e7cf      	b.n	8006048 <__ssvfiscanf_r+0x1b0>
 80060a8:	220a      	movs	r2, #10
 80060aa:	e7dd      	b.n	8006068 <__ssvfiscanf_r+0x1d0>
 80060ac:	2300      	movs	r3, #0
 80060ae:	9342      	str	r3, [sp, #264]	; 0x108
 80060b0:	2303      	movs	r3, #3
 80060b2:	e7de      	b.n	8006072 <__ssvfiscanf_r+0x1da>
 80060b4:	2308      	movs	r3, #8
 80060b6:	9342      	str	r3, [sp, #264]	; 0x108
 80060b8:	2304      	movs	r3, #4
 80060ba:	e7da      	b.n	8006072 <__ssvfiscanf_r+0x1da>
 80060bc:	4629      	mov	r1, r5
 80060be:	4640      	mov	r0, r8
 80060c0:	f000 fb20 	bl	8006704 <__sccl>
 80060c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80060c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ca:	9341      	str	r3, [sp, #260]	; 0x104
 80060cc:	4605      	mov	r5, r0
 80060ce:	2301      	movs	r3, #1
 80060d0:	e7cf      	b.n	8006072 <__ssvfiscanf_r+0x1da>
 80060d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80060d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060d8:	9341      	str	r3, [sp, #260]	; 0x104
 80060da:	2300      	movs	r3, #0
 80060dc:	e7c9      	b.n	8006072 <__ssvfiscanf_r+0x1da>
 80060de:	2302      	movs	r3, #2
 80060e0:	e7c7      	b.n	8006072 <__ssvfiscanf_r+0x1da>
 80060e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80060e4:	06c3      	lsls	r3, r0, #27
 80060e6:	f53f aefe 	bmi.w	8005ee6 <__ssvfiscanf_r+0x4e>
 80060ea:	9b00      	ldr	r3, [sp, #0]
 80060ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80060ee:	1d19      	adds	r1, r3, #4
 80060f0:	9100      	str	r1, [sp, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f010 0f01 	tst.w	r0, #1
 80060f8:	bf14      	ite	ne
 80060fa:	801a      	strhne	r2, [r3, #0]
 80060fc:	601a      	streq	r2, [r3, #0]
 80060fe:	e6f2      	b.n	8005ee6 <__ssvfiscanf_r+0x4e>
 8006100:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006102:	4621      	mov	r1, r4
 8006104:	4630      	mov	r0, r6
 8006106:	4798      	blx	r3
 8006108:	2800      	cmp	r0, #0
 800610a:	d0b6      	beq.n	800607a <__ssvfiscanf_r+0x1e2>
 800610c:	e79c      	b.n	8006048 <__ssvfiscanf_r+0x1b0>
 800610e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006110:	3201      	adds	r2, #1
 8006112:	9245      	str	r2, [sp, #276]	; 0x114
 8006114:	6862      	ldr	r2, [r4, #4]
 8006116:	3a01      	subs	r2, #1
 8006118:	2a00      	cmp	r2, #0
 800611a:	6062      	str	r2, [r4, #4]
 800611c:	dd02      	ble.n	8006124 <__ssvfiscanf_r+0x28c>
 800611e:	3301      	adds	r3, #1
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	e7ad      	b.n	8006080 <__ssvfiscanf_r+0x1e8>
 8006124:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006126:	4621      	mov	r1, r4
 8006128:	4630      	mov	r0, r6
 800612a:	4798      	blx	r3
 800612c:	2800      	cmp	r0, #0
 800612e:	d0a7      	beq.n	8006080 <__ssvfiscanf_r+0x1e8>
 8006130:	e78a      	b.n	8006048 <__ssvfiscanf_r+0x1b0>
 8006132:	2b04      	cmp	r3, #4
 8006134:	dc0e      	bgt.n	8006154 <__ssvfiscanf_r+0x2bc>
 8006136:	466b      	mov	r3, sp
 8006138:	4622      	mov	r2, r4
 800613a:	a941      	add	r1, sp, #260	; 0x104
 800613c:	4630      	mov	r0, r6
 800613e:	f000 f9d7 	bl	80064f0 <_scanf_i>
 8006142:	e7ab      	b.n	800609c <__ssvfiscanf_r+0x204>
 8006144:	08005de5 	.word	0x08005de5
 8006148:	08005e5f 	.word	0x08005e5f
 800614c:	0800828d 	.word	0x0800828d
 8006150:	08008224 	.word	0x08008224
 8006154:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <__ssvfiscanf_r+0x2ec>)
 8006156:	2b00      	cmp	r3, #0
 8006158:	f43f aec5 	beq.w	8005ee6 <__ssvfiscanf_r+0x4e>
 800615c:	466b      	mov	r3, sp
 800615e:	4622      	mov	r2, r4
 8006160:	a941      	add	r1, sp, #260	; 0x104
 8006162:	4630      	mov	r0, r6
 8006164:	f3af 8000 	nop.w
 8006168:	e798      	b.n	800609c <__ssvfiscanf_r+0x204>
 800616a:	89a3      	ldrh	r3, [r4, #12]
 800616c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006170:	bf18      	it	ne
 8006172:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8006176:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800617a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006180:	e7f9      	b.n	8006176 <__ssvfiscanf_r+0x2de>
 8006182:	bf00      	nop
 8006184:	00000000 	.word	0x00000000

08006188 <__sfputc_r>:
 8006188:	6893      	ldr	r3, [r2, #8]
 800618a:	3b01      	subs	r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	b410      	push	{r4}
 8006190:	6093      	str	r3, [r2, #8]
 8006192:	da08      	bge.n	80061a6 <__sfputc_r+0x1e>
 8006194:	6994      	ldr	r4, [r2, #24]
 8006196:	42a3      	cmp	r3, r4
 8006198:	db01      	blt.n	800619e <__sfputc_r+0x16>
 800619a:	290a      	cmp	r1, #10
 800619c:	d103      	bne.n	80061a6 <__sfputc_r+0x1e>
 800619e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061a2:	f000 bc19 	b.w	80069d8 <__swbuf_r>
 80061a6:	6813      	ldr	r3, [r2, #0]
 80061a8:	1c58      	adds	r0, r3, #1
 80061aa:	6010      	str	r0, [r2, #0]
 80061ac:	7019      	strb	r1, [r3, #0]
 80061ae:	4608      	mov	r0, r1
 80061b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <__sfputs_r>:
 80061b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b8:	4606      	mov	r6, r0
 80061ba:	460f      	mov	r7, r1
 80061bc:	4614      	mov	r4, r2
 80061be:	18d5      	adds	r5, r2, r3
 80061c0:	42ac      	cmp	r4, r5
 80061c2:	d101      	bne.n	80061c8 <__sfputs_r+0x12>
 80061c4:	2000      	movs	r0, #0
 80061c6:	e007      	b.n	80061d8 <__sfputs_r+0x22>
 80061c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061cc:	463a      	mov	r2, r7
 80061ce:	4630      	mov	r0, r6
 80061d0:	f7ff ffda 	bl	8006188 <__sfputc_r>
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	d1f3      	bne.n	80061c0 <__sfputs_r+0xa>
 80061d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061dc <_vfiprintf_r>:
 80061dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e0:	460d      	mov	r5, r1
 80061e2:	b09d      	sub	sp, #116	; 0x74
 80061e4:	4614      	mov	r4, r2
 80061e6:	4698      	mov	r8, r3
 80061e8:	4606      	mov	r6, r0
 80061ea:	b118      	cbz	r0, 80061f4 <_vfiprintf_r+0x18>
 80061ec:	6983      	ldr	r3, [r0, #24]
 80061ee:	b90b      	cbnz	r3, 80061f4 <_vfiprintf_r+0x18>
 80061f0:	f7ff f98c 	bl	800550c <__sinit>
 80061f4:	4b89      	ldr	r3, [pc, #548]	; (800641c <_vfiprintf_r+0x240>)
 80061f6:	429d      	cmp	r5, r3
 80061f8:	d11b      	bne.n	8006232 <_vfiprintf_r+0x56>
 80061fa:	6875      	ldr	r5, [r6, #4]
 80061fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061fe:	07d9      	lsls	r1, r3, #31
 8006200:	d405      	bmi.n	800620e <_vfiprintf_r+0x32>
 8006202:	89ab      	ldrh	r3, [r5, #12]
 8006204:	059a      	lsls	r2, r3, #22
 8006206:	d402      	bmi.n	800620e <_vfiprintf_r+0x32>
 8006208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800620a:	f7ff fa22 	bl	8005652 <__retarget_lock_acquire_recursive>
 800620e:	89ab      	ldrh	r3, [r5, #12]
 8006210:	071b      	lsls	r3, r3, #28
 8006212:	d501      	bpl.n	8006218 <_vfiprintf_r+0x3c>
 8006214:	692b      	ldr	r3, [r5, #16]
 8006216:	b9eb      	cbnz	r3, 8006254 <_vfiprintf_r+0x78>
 8006218:	4629      	mov	r1, r5
 800621a:	4630      	mov	r0, r6
 800621c:	f000 fc2e 	bl	8006a7c <__swsetup_r>
 8006220:	b1c0      	cbz	r0, 8006254 <_vfiprintf_r+0x78>
 8006222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006224:	07dc      	lsls	r4, r3, #31
 8006226:	d50e      	bpl.n	8006246 <_vfiprintf_r+0x6a>
 8006228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800622c:	b01d      	add	sp, #116	; 0x74
 800622e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006232:	4b7b      	ldr	r3, [pc, #492]	; (8006420 <_vfiprintf_r+0x244>)
 8006234:	429d      	cmp	r5, r3
 8006236:	d101      	bne.n	800623c <_vfiprintf_r+0x60>
 8006238:	68b5      	ldr	r5, [r6, #8]
 800623a:	e7df      	b.n	80061fc <_vfiprintf_r+0x20>
 800623c:	4b79      	ldr	r3, [pc, #484]	; (8006424 <_vfiprintf_r+0x248>)
 800623e:	429d      	cmp	r5, r3
 8006240:	bf08      	it	eq
 8006242:	68f5      	ldreq	r5, [r6, #12]
 8006244:	e7da      	b.n	80061fc <_vfiprintf_r+0x20>
 8006246:	89ab      	ldrh	r3, [r5, #12]
 8006248:	0598      	lsls	r0, r3, #22
 800624a:	d4ed      	bmi.n	8006228 <_vfiprintf_r+0x4c>
 800624c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800624e:	f7ff fa01 	bl	8005654 <__retarget_lock_release_recursive>
 8006252:	e7e9      	b.n	8006228 <_vfiprintf_r+0x4c>
 8006254:	2300      	movs	r3, #0
 8006256:	9309      	str	r3, [sp, #36]	; 0x24
 8006258:	2320      	movs	r3, #32
 800625a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800625e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006262:	2330      	movs	r3, #48	; 0x30
 8006264:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006428 <_vfiprintf_r+0x24c>
 8006268:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800626c:	f04f 0901 	mov.w	r9, #1
 8006270:	4623      	mov	r3, r4
 8006272:	469a      	mov	sl, r3
 8006274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006278:	b10a      	cbz	r2, 800627e <_vfiprintf_r+0xa2>
 800627a:	2a25      	cmp	r2, #37	; 0x25
 800627c:	d1f9      	bne.n	8006272 <_vfiprintf_r+0x96>
 800627e:	ebba 0b04 	subs.w	fp, sl, r4
 8006282:	d00b      	beq.n	800629c <_vfiprintf_r+0xc0>
 8006284:	465b      	mov	r3, fp
 8006286:	4622      	mov	r2, r4
 8006288:	4629      	mov	r1, r5
 800628a:	4630      	mov	r0, r6
 800628c:	f7ff ff93 	bl	80061b6 <__sfputs_r>
 8006290:	3001      	adds	r0, #1
 8006292:	f000 80aa 	beq.w	80063ea <_vfiprintf_r+0x20e>
 8006296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006298:	445a      	add	r2, fp
 800629a:	9209      	str	r2, [sp, #36]	; 0x24
 800629c:	f89a 3000 	ldrb.w	r3, [sl]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80a2 	beq.w	80063ea <_vfiprintf_r+0x20e>
 80062a6:	2300      	movs	r3, #0
 80062a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062b0:	f10a 0a01 	add.w	sl, sl, #1
 80062b4:	9304      	str	r3, [sp, #16]
 80062b6:	9307      	str	r3, [sp, #28]
 80062b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062bc:	931a      	str	r3, [sp, #104]	; 0x68
 80062be:	4654      	mov	r4, sl
 80062c0:	2205      	movs	r2, #5
 80062c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c6:	4858      	ldr	r0, [pc, #352]	; (8006428 <_vfiprintf_r+0x24c>)
 80062c8:	f7f9 ffa2 	bl	8000210 <memchr>
 80062cc:	9a04      	ldr	r2, [sp, #16]
 80062ce:	b9d8      	cbnz	r0, 8006308 <_vfiprintf_r+0x12c>
 80062d0:	06d1      	lsls	r1, r2, #27
 80062d2:	bf44      	itt	mi
 80062d4:	2320      	movmi	r3, #32
 80062d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062da:	0713      	lsls	r3, r2, #28
 80062dc:	bf44      	itt	mi
 80062de:	232b      	movmi	r3, #43	; 0x2b
 80062e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062e4:	f89a 3000 	ldrb.w	r3, [sl]
 80062e8:	2b2a      	cmp	r3, #42	; 0x2a
 80062ea:	d015      	beq.n	8006318 <_vfiprintf_r+0x13c>
 80062ec:	9a07      	ldr	r2, [sp, #28]
 80062ee:	4654      	mov	r4, sl
 80062f0:	2000      	movs	r0, #0
 80062f2:	f04f 0c0a 	mov.w	ip, #10
 80062f6:	4621      	mov	r1, r4
 80062f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062fc:	3b30      	subs	r3, #48	; 0x30
 80062fe:	2b09      	cmp	r3, #9
 8006300:	d94e      	bls.n	80063a0 <_vfiprintf_r+0x1c4>
 8006302:	b1b0      	cbz	r0, 8006332 <_vfiprintf_r+0x156>
 8006304:	9207      	str	r2, [sp, #28]
 8006306:	e014      	b.n	8006332 <_vfiprintf_r+0x156>
 8006308:	eba0 0308 	sub.w	r3, r0, r8
 800630c:	fa09 f303 	lsl.w	r3, r9, r3
 8006310:	4313      	orrs	r3, r2
 8006312:	9304      	str	r3, [sp, #16]
 8006314:	46a2      	mov	sl, r4
 8006316:	e7d2      	b.n	80062be <_vfiprintf_r+0xe2>
 8006318:	9b03      	ldr	r3, [sp, #12]
 800631a:	1d19      	adds	r1, r3, #4
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	9103      	str	r1, [sp, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	bfbb      	ittet	lt
 8006324:	425b      	neglt	r3, r3
 8006326:	f042 0202 	orrlt.w	r2, r2, #2
 800632a:	9307      	strge	r3, [sp, #28]
 800632c:	9307      	strlt	r3, [sp, #28]
 800632e:	bfb8      	it	lt
 8006330:	9204      	strlt	r2, [sp, #16]
 8006332:	7823      	ldrb	r3, [r4, #0]
 8006334:	2b2e      	cmp	r3, #46	; 0x2e
 8006336:	d10c      	bne.n	8006352 <_vfiprintf_r+0x176>
 8006338:	7863      	ldrb	r3, [r4, #1]
 800633a:	2b2a      	cmp	r3, #42	; 0x2a
 800633c:	d135      	bne.n	80063aa <_vfiprintf_r+0x1ce>
 800633e:	9b03      	ldr	r3, [sp, #12]
 8006340:	1d1a      	adds	r2, r3, #4
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	9203      	str	r2, [sp, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	bfb8      	it	lt
 800634a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800634e:	3402      	adds	r4, #2
 8006350:	9305      	str	r3, [sp, #20]
 8006352:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006438 <_vfiprintf_r+0x25c>
 8006356:	7821      	ldrb	r1, [r4, #0]
 8006358:	2203      	movs	r2, #3
 800635a:	4650      	mov	r0, sl
 800635c:	f7f9 ff58 	bl	8000210 <memchr>
 8006360:	b140      	cbz	r0, 8006374 <_vfiprintf_r+0x198>
 8006362:	2340      	movs	r3, #64	; 0x40
 8006364:	eba0 000a 	sub.w	r0, r0, sl
 8006368:	fa03 f000 	lsl.w	r0, r3, r0
 800636c:	9b04      	ldr	r3, [sp, #16]
 800636e:	4303      	orrs	r3, r0
 8006370:	3401      	adds	r4, #1
 8006372:	9304      	str	r3, [sp, #16]
 8006374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006378:	482c      	ldr	r0, [pc, #176]	; (800642c <_vfiprintf_r+0x250>)
 800637a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800637e:	2206      	movs	r2, #6
 8006380:	f7f9 ff46 	bl	8000210 <memchr>
 8006384:	2800      	cmp	r0, #0
 8006386:	d03f      	beq.n	8006408 <_vfiprintf_r+0x22c>
 8006388:	4b29      	ldr	r3, [pc, #164]	; (8006430 <_vfiprintf_r+0x254>)
 800638a:	bb1b      	cbnz	r3, 80063d4 <_vfiprintf_r+0x1f8>
 800638c:	9b03      	ldr	r3, [sp, #12]
 800638e:	3307      	adds	r3, #7
 8006390:	f023 0307 	bic.w	r3, r3, #7
 8006394:	3308      	adds	r3, #8
 8006396:	9303      	str	r3, [sp, #12]
 8006398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800639a:	443b      	add	r3, r7
 800639c:	9309      	str	r3, [sp, #36]	; 0x24
 800639e:	e767      	b.n	8006270 <_vfiprintf_r+0x94>
 80063a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80063a4:	460c      	mov	r4, r1
 80063a6:	2001      	movs	r0, #1
 80063a8:	e7a5      	b.n	80062f6 <_vfiprintf_r+0x11a>
 80063aa:	2300      	movs	r3, #0
 80063ac:	3401      	adds	r4, #1
 80063ae:	9305      	str	r3, [sp, #20]
 80063b0:	4619      	mov	r1, r3
 80063b2:	f04f 0c0a 	mov.w	ip, #10
 80063b6:	4620      	mov	r0, r4
 80063b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063bc:	3a30      	subs	r2, #48	; 0x30
 80063be:	2a09      	cmp	r2, #9
 80063c0:	d903      	bls.n	80063ca <_vfiprintf_r+0x1ee>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0c5      	beq.n	8006352 <_vfiprintf_r+0x176>
 80063c6:	9105      	str	r1, [sp, #20]
 80063c8:	e7c3      	b.n	8006352 <_vfiprintf_r+0x176>
 80063ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80063ce:	4604      	mov	r4, r0
 80063d0:	2301      	movs	r3, #1
 80063d2:	e7f0      	b.n	80063b6 <_vfiprintf_r+0x1da>
 80063d4:	ab03      	add	r3, sp, #12
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	462a      	mov	r2, r5
 80063da:	4b16      	ldr	r3, [pc, #88]	; (8006434 <_vfiprintf_r+0x258>)
 80063dc:	a904      	add	r1, sp, #16
 80063de:	4630      	mov	r0, r6
 80063e0:	f7fd fd3c 	bl	8003e5c <_printf_float>
 80063e4:	4607      	mov	r7, r0
 80063e6:	1c78      	adds	r0, r7, #1
 80063e8:	d1d6      	bne.n	8006398 <_vfiprintf_r+0x1bc>
 80063ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063ec:	07d9      	lsls	r1, r3, #31
 80063ee:	d405      	bmi.n	80063fc <_vfiprintf_r+0x220>
 80063f0:	89ab      	ldrh	r3, [r5, #12]
 80063f2:	059a      	lsls	r2, r3, #22
 80063f4:	d402      	bmi.n	80063fc <_vfiprintf_r+0x220>
 80063f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063f8:	f7ff f92c 	bl	8005654 <__retarget_lock_release_recursive>
 80063fc:	89ab      	ldrh	r3, [r5, #12]
 80063fe:	065b      	lsls	r3, r3, #25
 8006400:	f53f af12 	bmi.w	8006228 <_vfiprintf_r+0x4c>
 8006404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006406:	e711      	b.n	800622c <_vfiprintf_r+0x50>
 8006408:	ab03      	add	r3, sp, #12
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	462a      	mov	r2, r5
 800640e:	4b09      	ldr	r3, [pc, #36]	; (8006434 <_vfiprintf_r+0x258>)
 8006410:	a904      	add	r1, sp, #16
 8006412:	4630      	mov	r0, r6
 8006414:	f7fd ffc6 	bl	80043a4 <_printf_i>
 8006418:	e7e4      	b.n	80063e4 <_vfiprintf_r+0x208>
 800641a:	bf00      	nop
 800641c:	0800808c 	.word	0x0800808c
 8006420:	080080ac 	.word	0x080080ac
 8006424:	0800806c 	.word	0x0800806c
 8006428:	08008228 	.word	0x08008228
 800642c:	0800822e 	.word	0x0800822e
 8006430:	08003e5d 	.word	0x08003e5d
 8006434:	080061b7 	.word	0x080061b7
 8006438:	08008224 	.word	0x08008224

0800643c <_scanf_chars>:
 800643c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006440:	4615      	mov	r5, r2
 8006442:	688a      	ldr	r2, [r1, #8]
 8006444:	4680      	mov	r8, r0
 8006446:	460c      	mov	r4, r1
 8006448:	b932      	cbnz	r2, 8006458 <_scanf_chars+0x1c>
 800644a:	698a      	ldr	r2, [r1, #24]
 800644c:	2a00      	cmp	r2, #0
 800644e:	bf0c      	ite	eq
 8006450:	2201      	moveq	r2, #1
 8006452:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8006456:	608a      	str	r2, [r1, #8]
 8006458:	6822      	ldr	r2, [r4, #0]
 800645a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80064ec <_scanf_chars+0xb0>
 800645e:	06d1      	lsls	r1, r2, #27
 8006460:	bf5f      	itttt	pl
 8006462:	681a      	ldrpl	r2, [r3, #0]
 8006464:	1d11      	addpl	r1, r2, #4
 8006466:	6019      	strpl	r1, [r3, #0]
 8006468:	6816      	ldrpl	r6, [r2, #0]
 800646a:	2700      	movs	r7, #0
 800646c:	69a0      	ldr	r0, [r4, #24]
 800646e:	b188      	cbz	r0, 8006494 <_scanf_chars+0x58>
 8006470:	2801      	cmp	r0, #1
 8006472:	d107      	bne.n	8006484 <_scanf_chars+0x48>
 8006474:	682a      	ldr	r2, [r5, #0]
 8006476:	7811      	ldrb	r1, [r2, #0]
 8006478:	6962      	ldr	r2, [r4, #20]
 800647a:	5c52      	ldrb	r2, [r2, r1]
 800647c:	b952      	cbnz	r2, 8006494 <_scanf_chars+0x58>
 800647e:	2f00      	cmp	r7, #0
 8006480:	d031      	beq.n	80064e6 <_scanf_chars+0xaa>
 8006482:	e022      	b.n	80064ca <_scanf_chars+0x8e>
 8006484:	2802      	cmp	r0, #2
 8006486:	d120      	bne.n	80064ca <_scanf_chars+0x8e>
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006490:	071b      	lsls	r3, r3, #28
 8006492:	d41a      	bmi.n	80064ca <_scanf_chars+0x8e>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	06da      	lsls	r2, r3, #27
 8006498:	bf5e      	ittt	pl
 800649a:	682b      	ldrpl	r3, [r5, #0]
 800649c:	781b      	ldrbpl	r3, [r3, #0]
 800649e:	f806 3b01 	strbpl.w	r3, [r6], #1
 80064a2:	682a      	ldr	r2, [r5, #0]
 80064a4:	686b      	ldr	r3, [r5, #4]
 80064a6:	3201      	adds	r2, #1
 80064a8:	602a      	str	r2, [r5, #0]
 80064aa:	68a2      	ldr	r2, [r4, #8]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	3a01      	subs	r2, #1
 80064b0:	606b      	str	r3, [r5, #4]
 80064b2:	3701      	adds	r7, #1
 80064b4:	60a2      	str	r2, [r4, #8]
 80064b6:	b142      	cbz	r2, 80064ca <_scanf_chars+0x8e>
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	dcd7      	bgt.n	800646c <_scanf_chars+0x30>
 80064bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80064c0:	4629      	mov	r1, r5
 80064c2:	4640      	mov	r0, r8
 80064c4:	4798      	blx	r3
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d0d0      	beq.n	800646c <_scanf_chars+0x30>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	f013 0310 	ands.w	r3, r3, #16
 80064d0:	d105      	bne.n	80064de <_scanf_chars+0xa2>
 80064d2:	68e2      	ldr	r2, [r4, #12]
 80064d4:	3201      	adds	r2, #1
 80064d6:	60e2      	str	r2, [r4, #12]
 80064d8:	69a2      	ldr	r2, [r4, #24]
 80064da:	b102      	cbz	r2, 80064de <_scanf_chars+0xa2>
 80064dc:	7033      	strb	r3, [r6, #0]
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	443b      	add	r3, r7
 80064e2:	6123      	str	r3, [r4, #16]
 80064e4:	2000      	movs	r0, #0
 80064e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ea:	bf00      	nop
 80064ec:	0800828d 	.word	0x0800828d

080064f0 <_scanf_i>:
 80064f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	4698      	mov	r8, r3
 80064f6:	4b76      	ldr	r3, [pc, #472]	; (80066d0 <_scanf_i+0x1e0>)
 80064f8:	460c      	mov	r4, r1
 80064fa:	4682      	mov	sl, r0
 80064fc:	4616      	mov	r6, r2
 80064fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006502:	b087      	sub	sp, #28
 8006504:	ab03      	add	r3, sp, #12
 8006506:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800650a:	4b72      	ldr	r3, [pc, #456]	; (80066d4 <_scanf_i+0x1e4>)
 800650c:	69a1      	ldr	r1, [r4, #24]
 800650e:	4a72      	ldr	r2, [pc, #456]	; (80066d8 <_scanf_i+0x1e8>)
 8006510:	2903      	cmp	r1, #3
 8006512:	bf18      	it	ne
 8006514:	461a      	movne	r2, r3
 8006516:	68a3      	ldr	r3, [r4, #8]
 8006518:	9201      	str	r2, [sp, #4]
 800651a:	1e5a      	subs	r2, r3, #1
 800651c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006520:	bf88      	it	hi
 8006522:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006526:	4627      	mov	r7, r4
 8006528:	bf82      	ittt	hi
 800652a:	eb03 0905 	addhi.w	r9, r3, r5
 800652e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006532:	60a3      	strhi	r3, [r4, #8]
 8006534:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006538:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800653c:	bf98      	it	ls
 800653e:	f04f 0900 	movls.w	r9, #0
 8006542:	6023      	str	r3, [r4, #0]
 8006544:	463d      	mov	r5, r7
 8006546:	f04f 0b00 	mov.w	fp, #0
 800654a:	6831      	ldr	r1, [r6, #0]
 800654c:	ab03      	add	r3, sp, #12
 800654e:	7809      	ldrb	r1, [r1, #0]
 8006550:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006554:	2202      	movs	r2, #2
 8006556:	f7f9 fe5b 	bl	8000210 <memchr>
 800655a:	b328      	cbz	r0, 80065a8 <_scanf_i+0xb8>
 800655c:	f1bb 0f01 	cmp.w	fp, #1
 8006560:	d159      	bne.n	8006616 <_scanf_i+0x126>
 8006562:	6862      	ldr	r2, [r4, #4]
 8006564:	b92a      	cbnz	r2, 8006572 <_scanf_i+0x82>
 8006566:	6822      	ldr	r2, [r4, #0]
 8006568:	2308      	movs	r3, #8
 800656a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800656e:	6063      	str	r3, [r4, #4]
 8006570:	6022      	str	r2, [r4, #0]
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006578:	6022      	str	r2, [r4, #0]
 800657a:	68a2      	ldr	r2, [r4, #8]
 800657c:	1e51      	subs	r1, r2, #1
 800657e:	60a1      	str	r1, [r4, #8]
 8006580:	b192      	cbz	r2, 80065a8 <_scanf_i+0xb8>
 8006582:	6832      	ldr	r2, [r6, #0]
 8006584:	1c51      	adds	r1, r2, #1
 8006586:	6031      	str	r1, [r6, #0]
 8006588:	7812      	ldrb	r2, [r2, #0]
 800658a:	f805 2b01 	strb.w	r2, [r5], #1
 800658e:	6872      	ldr	r2, [r6, #4]
 8006590:	3a01      	subs	r2, #1
 8006592:	2a00      	cmp	r2, #0
 8006594:	6072      	str	r2, [r6, #4]
 8006596:	dc07      	bgt.n	80065a8 <_scanf_i+0xb8>
 8006598:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800659c:	4631      	mov	r1, r6
 800659e:	4650      	mov	r0, sl
 80065a0:	4790      	blx	r2
 80065a2:	2800      	cmp	r0, #0
 80065a4:	f040 8085 	bne.w	80066b2 <_scanf_i+0x1c2>
 80065a8:	f10b 0b01 	add.w	fp, fp, #1
 80065ac:	f1bb 0f03 	cmp.w	fp, #3
 80065b0:	d1cb      	bne.n	800654a <_scanf_i+0x5a>
 80065b2:	6863      	ldr	r3, [r4, #4]
 80065b4:	b90b      	cbnz	r3, 80065ba <_scanf_i+0xca>
 80065b6:	230a      	movs	r3, #10
 80065b8:	6063      	str	r3, [r4, #4]
 80065ba:	6863      	ldr	r3, [r4, #4]
 80065bc:	4947      	ldr	r1, [pc, #284]	; (80066dc <_scanf_i+0x1ec>)
 80065be:	6960      	ldr	r0, [r4, #20]
 80065c0:	1ac9      	subs	r1, r1, r3
 80065c2:	f000 f89f 	bl	8006704 <__sccl>
 80065c6:	f04f 0b00 	mov.w	fp, #0
 80065ca:	68a3      	ldr	r3, [r4, #8]
 80065cc:	6822      	ldr	r2, [r4, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d03d      	beq.n	800664e <_scanf_i+0x15e>
 80065d2:	6831      	ldr	r1, [r6, #0]
 80065d4:	6960      	ldr	r0, [r4, #20]
 80065d6:	f891 c000 	ldrb.w	ip, [r1]
 80065da:	f810 000c 	ldrb.w	r0, [r0, ip]
 80065de:	2800      	cmp	r0, #0
 80065e0:	d035      	beq.n	800664e <_scanf_i+0x15e>
 80065e2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80065e6:	d124      	bne.n	8006632 <_scanf_i+0x142>
 80065e8:	0510      	lsls	r0, r2, #20
 80065ea:	d522      	bpl.n	8006632 <_scanf_i+0x142>
 80065ec:	f10b 0b01 	add.w	fp, fp, #1
 80065f0:	f1b9 0f00 	cmp.w	r9, #0
 80065f4:	d003      	beq.n	80065fe <_scanf_i+0x10e>
 80065f6:	3301      	adds	r3, #1
 80065f8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80065fc:	60a3      	str	r3, [r4, #8]
 80065fe:	6873      	ldr	r3, [r6, #4]
 8006600:	3b01      	subs	r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	6073      	str	r3, [r6, #4]
 8006606:	dd1b      	ble.n	8006640 <_scanf_i+0x150>
 8006608:	6833      	ldr	r3, [r6, #0]
 800660a:	3301      	adds	r3, #1
 800660c:	6033      	str	r3, [r6, #0]
 800660e:	68a3      	ldr	r3, [r4, #8]
 8006610:	3b01      	subs	r3, #1
 8006612:	60a3      	str	r3, [r4, #8]
 8006614:	e7d9      	b.n	80065ca <_scanf_i+0xda>
 8006616:	f1bb 0f02 	cmp.w	fp, #2
 800661a:	d1ae      	bne.n	800657a <_scanf_i+0x8a>
 800661c:	6822      	ldr	r2, [r4, #0]
 800661e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006622:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006626:	d1bf      	bne.n	80065a8 <_scanf_i+0xb8>
 8006628:	2310      	movs	r3, #16
 800662a:	6063      	str	r3, [r4, #4]
 800662c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006630:	e7a2      	b.n	8006578 <_scanf_i+0x88>
 8006632:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006636:	6022      	str	r2, [r4, #0]
 8006638:	780b      	ldrb	r3, [r1, #0]
 800663a:	f805 3b01 	strb.w	r3, [r5], #1
 800663e:	e7de      	b.n	80065fe <_scanf_i+0x10e>
 8006640:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006644:	4631      	mov	r1, r6
 8006646:	4650      	mov	r0, sl
 8006648:	4798      	blx	r3
 800664a:	2800      	cmp	r0, #0
 800664c:	d0df      	beq.n	800660e <_scanf_i+0x11e>
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	05db      	lsls	r3, r3, #23
 8006652:	d50d      	bpl.n	8006670 <_scanf_i+0x180>
 8006654:	42bd      	cmp	r5, r7
 8006656:	d909      	bls.n	800666c <_scanf_i+0x17c>
 8006658:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800665c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006660:	4632      	mov	r2, r6
 8006662:	4650      	mov	r0, sl
 8006664:	4798      	blx	r3
 8006666:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800666a:	464d      	mov	r5, r9
 800666c:	42bd      	cmp	r5, r7
 800666e:	d02d      	beq.n	80066cc <_scanf_i+0x1dc>
 8006670:	6822      	ldr	r2, [r4, #0]
 8006672:	f012 0210 	ands.w	r2, r2, #16
 8006676:	d113      	bne.n	80066a0 <_scanf_i+0x1b0>
 8006678:	702a      	strb	r2, [r5, #0]
 800667a:	6863      	ldr	r3, [r4, #4]
 800667c:	9e01      	ldr	r6, [sp, #4]
 800667e:	4639      	mov	r1, r7
 8006680:	4650      	mov	r0, sl
 8006682:	47b0      	blx	r6
 8006684:	6821      	ldr	r1, [r4, #0]
 8006686:	f8d8 3000 	ldr.w	r3, [r8]
 800668a:	f011 0f20 	tst.w	r1, #32
 800668e:	d013      	beq.n	80066b8 <_scanf_i+0x1c8>
 8006690:	1d1a      	adds	r2, r3, #4
 8006692:	f8c8 2000 	str.w	r2, [r8]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6018      	str	r0, [r3, #0]
 800669a:	68e3      	ldr	r3, [r4, #12]
 800669c:	3301      	adds	r3, #1
 800669e:	60e3      	str	r3, [r4, #12]
 80066a0:	1bed      	subs	r5, r5, r7
 80066a2:	44ab      	add	fp, r5
 80066a4:	6925      	ldr	r5, [r4, #16]
 80066a6:	445d      	add	r5, fp
 80066a8:	6125      	str	r5, [r4, #16]
 80066aa:	2000      	movs	r0, #0
 80066ac:	b007      	add	sp, #28
 80066ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b2:	f04f 0b00 	mov.w	fp, #0
 80066b6:	e7ca      	b.n	800664e <_scanf_i+0x15e>
 80066b8:	1d1a      	adds	r2, r3, #4
 80066ba:	f8c8 2000 	str.w	r2, [r8]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f011 0f01 	tst.w	r1, #1
 80066c4:	bf14      	ite	ne
 80066c6:	8018      	strhne	r0, [r3, #0]
 80066c8:	6018      	streq	r0, [r3, #0]
 80066ca:	e7e6      	b.n	800669a <_scanf_i+0x1aa>
 80066cc:	2001      	movs	r0, #1
 80066ce:	e7ed      	b.n	80066ac <_scanf_i+0x1bc>
 80066d0:	08007f98 	.word	0x08007f98
 80066d4:	08006961 	.word	0x08006961
 80066d8:	08006879 	.word	0x08006879
 80066dc:	0800824e 	.word	0x0800824e

080066e0 <_read_r>:
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	4d07      	ldr	r5, [pc, #28]	; (8006700 <_read_r+0x20>)
 80066e4:	4604      	mov	r4, r0
 80066e6:	4608      	mov	r0, r1
 80066e8:	4611      	mov	r1, r2
 80066ea:	2200      	movs	r2, #0
 80066ec:	602a      	str	r2, [r5, #0]
 80066ee:	461a      	mov	r2, r3
 80066f0:	f7fa fd1c 	bl	800112c <_read>
 80066f4:	1c43      	adds	r3, r0, #1
 80066f6:	d102      	bne.n	80066fe <_read_r+0x1e>
 80066f8:	682b      	ldr	r3, [r5, #0]
 80066fa:	b103      	cbz	r3, 80066fe <_read_r+0x1e>
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	bd38      	pop	{r3, r4, r5, pc}
 8006700:	20000eb0 	.word	0x20000eb0

08006704 <__sccl>:
 8006704:	b570      	push	{r4, r5, r6, lr}
 8006706:	780b      	ldrb	r3, [r1, #0]
 8006708:	4604      	mov	r4, r0
 800670a:	2b5e      	cmp	r3, #94	; 0x5e
 800670c:	bf0b      	itete	eq
 800670e:	784b      	ldrbeq	r3, [r1, #1]
 8006710:	1c48      	addne	r0, r1, #1
 8006712:	1c88      	addeq	r0, r1, #2
 8006714:	2200      	movne	r2, #0
 8006716:	bf08      	it	eq
 8006718:	2201      	moveq	r2, #1
 800671a:	1e61      	subs	r1, r4, #1
 800671c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006720:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006724:	42a9      	cmp	r1, r5
 8006726:	d1fb      	bne.n	8006720 <__sccl+0x1c>
 8006728:	b90b      	cbnz	r3, 800672e <__sccl+0x2a>
 800672a:	3801      	subs	r0, #1
 800672c:	bd70      	pop	{r4, r5, r6, pc}
 800672e:	f082 0201 	eor.w	r2, r2, #1
 8006732:	54e2      	strb	r2, [r4, r3]
 8006734:	4605      	mov	r5, r0
 8006736:	4628      	mov	r0, r5
 8006738:	f810 1b01 	ldrb.w	r1, [r0], #1
 800673c:	292d      	cmp	r1, #45	; 0x2d
 800673e:	d006      	beq.n	800674e <__sccl+0x4a>
 8006740:	295d      	cmp	r1, #93	; 0x5d
 8006742:	d0f3      	beq.n	800672c <__sccl+0x28>
 8006744:	b909      	cbnz	r1, 800674a <__sccl+0x46>
 8006746:	4628      	mov	r0, r5
 8006748:	e7f0      	b.n	800672c <__sccl+0x28>
 800674a:	460b      	mov	r3, r1
 800674c:	e7f1      	b.n	8006732 <__sccl+0x2e>
 800674e:	786e      	ldrb	r6, [r5, #1]
 8006750:	2e5d      	cmp	r6, #93	; 0x5d
 8006752:	d0fa      	beq.n	800674a <__sccl+0x46>
 8006754:	42b3      	cmp	r3, r6
 8006756:	dcf8      	bgt.n	800674a <__sccl+0x46>
 8006758:	3502      	adds	r5, #2
 800675a:	4619      	mov	r1, r3
 800675c:	3101      	adds	r1, #1
 800675e:	428e      	cmp	r6, r1
 8006760:	5462      	strb	r2, [r4, r1]
 8006762:	dcfb      	bgt.n	800675c <__sccl+0x58>
 8006764:	1af1      	subs	r1, r6, r3
 8006766:	3901      	subs	r1, #1
 8006768:	1c58      	adds	r0, r3, #1
 800676a:	42b3      	cmp	r3, r6
 800676c:	bfa8      	it	ge
 800676e:	2100      	movge	r1, #0
 8006770:	1843      	adds	r3, r0, r1
 8006772:	e7e0      	b.n	8006736 <__sccl+0x32>

08006774 <_strtol_l.constprop.0>:
 8006774:	2b01      	cmp	r3, #1
 8006776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800677a:	d001      	beq.n	8006780 <_strtol_l.constprop.0+0xc>
 800677c:	2b24      	cmp	r3, #36	; 0x24
 800677e:	d906      	bls.n	800678e <_strtol_l.constprop.0+0x1a>
 8006780:	f7fd f9b2 	bl	8003ae8 <__errno>
 8006784:	2316      	movs	r3, #22
 8006786:	6003      	str	r3, [r0, #0]
 8006788:	2000      	movs	r0, #0
 800678a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006874 <_strtol_l.constprop.0+0x100>
 8006792:	460d      	mov	r5, r1
 8006794:	462e      	mov	r6, r5
 8006796:	f815 4b01 	ldrb.w	r4, [r5], #1
 800679a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800679e:	f017 0708 	ands.w	r7, r7, #8
 80067a2:	d1f7      	bne.n	8006794 <_strtol_l.constprop.0+0x20>
 80067a4:	2c2d      	cmp	r4, #45	; 0x2d
 80067a6:	d132      	bne.n	800680e <_strtol_l.constprop.0+0x9a>
 80067a8:	782c      	ldrb	r4, [r5, #0]
 80067aa:	2701      	movs	r7, #1
 80067ac:	1cb5      	adds	r5, r6, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d05b      	beq.n	800686a <_strtol_l.constprop.0+0xf6>
 80067b2:	2b10      	cmp	r3, #16
 80067b4:	d109      	bne.n	80067ca <_strtol_l.constprop.0+0x56>
 80067b6:	2c30      	cmp	r4, #48	; 0x30
 80067b8:	d107      	bne.n	80067ca <_strtol_l.constprop.0+0x56>
 80067ba:	782c      	ldrb	r4, [r5, #0]
 80067bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80067c0:	2c58      	cmp	r4, #88	; 0x58
 80067c2:	d14d      	bne.n	8006860 <_strtol_l.constprop.0+0xec>
 80067c4:	786c      	ldrb	r4, [r5, #1]
 80067c6:	2310      	movs	r3, #16
 80067c8:	3502      	adds	r5, #2
 80067ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80067ce:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80067d2:	f04f 0c00 	mov.w	ip, #0
 80067d6:	fbb8 f9f3 	udiv	r9, r8, r3
 80067da:	4666      	mov	r6, ip
 80067dc:	fb03 8a19 	mls	sl, r3, r9, r8
 80067e0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80067e4:	f1be 0f09 	cmp.w	lr, #9
 80067e8:	d816      	bhi.n	8006818 <_strtol_l.constprop.0+0xa4>
 80067ea:	4674      	mov	r4, lr
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	dd24      	ble.n	800683a <_strtol_l.constprop.0+0xc6>
 80067f0:	f1bc 0f00 	cmp.w	ip, #0
 80067f4:	db1e      	blt.n	8006834 <_strtol_l.constprop.0+0xc0>
 80067f6:	45b1      	cmp	r9, r6
 80067f8:	d31c      	bcc.n	8006834 <_strtol_l.constprop.0+0xc0>
 80067fa:	d101      	bne.n	8006800 <_strtol_l.constprop.0+0x8c>
 80067fc:	45a2      	cmp	sl, r4
 80067fe:	db19      	blt.n	8006834 <_strtol_l.constprop.0+0xc0>
 8006800:	fb06 4603 	mla	r6, r6, r3, r4
 8006804:	f04f 0c01 	mov.w	ip, #1
 8006808:	f815 4b01 	ldrb.w	r4, [r5], #1
 800680c:	e7e8      	b.n	80067e0 <_strtol_l.constprop.0+0x6c>
 800680e:	2c2b      	cmp	r4, #43	; 0x2b
 8006810:	bf04      	itt	eq
 8006812:	782c      	ldrbeq	r4, [r5, #0]
 8006814:	1cb5      	addeq	r5, r6, #2
 8006816:	e7ca      	b.n	80067ae <_strtol_l.constprop.0+0x3a>
 8006818:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800681c:	f1be 0f19 	cmp.w	lr, #25
 8006820:	d801      	bhi.n	8006826 <_strtol_l.constprop.0+0xb2>
 8006822:	3c37      	subs	r4, #55	; 0x37
 8006824:	e7e2      	b.n	80067ec <_strtol_l.constprop.0+0x78>
 8006826:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800682a:	f1be 0f19 	cmp.w	lr, #25
 800682e:	d804      	bhi.n	800683a <_strtol_l.constprop.0+0xc6>
 8006830:	3c57      	subs	r4, #87	; 0x57
 8006832:	e7db      	b.n	80067ec <_strtol_l.constprop.0+0x78>
 8006834:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006838:	e7e6      	b.n	8006808 <_strtol_l.constprop.0+0x94>
 800683a:	f1bc 0f00 	cmp.w	ip, #0
 800683e:	da05      	bge.n	800684c <_strtol_l.constprop.0+0xd8>
 8006840:	2322      	movs	r3, #34	; 0x22
 8006842:	6003      	str	r3, [r0, #0]
 8006844:	4646      	mov	r6, r8
 8006846:	b942      	cbnz	r2, 800685a <_strtol_l.constprop.0+0xe6>
 8006848:	4630      	mov	r0, r6
 800684a:	e79e      	b.n	800678a <_strtol_l.constprop.0+0x16>
 800684c:	b107      	cbz	r7, 8006850 <_strtol_l.constprop.0+0xdc>
 800684e:	4276      	negs	r6, r6
 8006850:	2a00      	cmp	r2, #0
 8006852:	d0f9      	beq.n	8006848 <_strtol_l.constprop.0+0xd4>
 8006854:	f1bc 0f00 	cmp.w	ip, #0
 8006858:	d000      	beq.n	800685c <_strtol_l.constprop.0+0xe8>
 800685a:	1e69      	subs	r1, r5, #1
 800685c:	6011      	str	r1, [r2, #0]
 800685e:	e7f3      	b.n	8006848 <_strtol_l.constprop.0+0xd4>
 8006860:	2430      	movs	r4, #48	; 0x30
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1b1      	bne.n	80067ca <_strtol_l.constprop.0+0x56>
 8006866:	2308      	movs	r3, #8
 8006868:	e7af      	b.n	80067ca <_strtol_l.constprop.0+0x56>
 800686a:	2c30      	cmp	r4, #48	; 0x30
 800686c:	d0a5      	beq.n	80067ba <_strtol_l.constprop.0+0x46>
 800686e:	230a      	movs	r3, #10
 8006870:	e7ab      	b.n	80067ca <_strtol_l.constprop.0+0x56>
 8006872:	bf00      	nop
 8006874:	0800828d 	.word	0x0800828d

08006878 <_strtol_r>:
 8006878:	f7ff bf7c 	b.w	8006774 <_strtol_l.constprop.0>

0800687c <_strtoul_l.constprop.0>:
 800687c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006880:	4f36      	ldr	r7, [pc, #216]	; (800695c <_strtoul_l.constprop.0+0xe0>)
 8006882:	4686      	mov	lr, r0
 8006884:	460d      	mov	r5, r1
 8006886:	4628      	mov	r0, r5
 8006888:	f815 4b01 	ldrb.w	r4, [r5], #1
 800688c:	5de6      	ldrb	r6, [r4, r7]
 800688e:	f016 0608 	ands.w	r6, r6, #8
 8006892:	d1f8      	bne.n	8006886 <_strtoul_l.constprop.0+0xa>
 8006894:	2c2d      	cmp	r4, #45	; 0x2d
 8006896:	d12f      	bne.n	80068f8 <_strtoul_l.constprop.0+0x7c>
 8006898:	782c      	ldrb	r4, [r5, #0]
 800689a:	2601      	movs	r6, #1
 800689c:	1c85      	adds	r5, r0, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d057      	beq.n	8006952 <_strtoul_l.constprop.0+0xd6>
 80068a2:	2b10      	cmp	r3, #16
 80068a4:	d109      	bne.n	80068ba <_strtoul_l.constprop.0+0x3e>
 80068a6:	2c30      	cmp	r4, #48	; 0x30
 80068a8:	d107      	bne.n	80068ba <_strtoul_l.constprop.0+0x3e>
 80068aa:	7828      	ldrb	r0, [r5, #0]
 80068ac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80068b0:	2858      	cmp	r0, #88	; 0x58
 80068b2:	d149      	bne.n	8006948 <_strtoul_l.constprop.0+0xcc>
 80068b4:	786c      	ldrb	r4, [r5, #1]
 80068b6:	2310      	movs	r3, #16
 80068b8:	3502      	adds	r5, #2
 80068ba:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80068be:	2700      	movs	r7, #0
 80068c0:	fbb8 f8f3 	udiv	r8, r8, r3
 80068c4:	fb03 f908 	mul.w	r9, r3, r8
 80068c8:	ea6f 0909 	mvn.w	r9, r9
 80068cc:	4638      	mov	r0, r7
 80068ce:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80068d2:	f1bc 0f09 	cmp.w	ip, #9
 80068d6:	d814      	bhi.n	8006902 <_strtoul_l.constprop.0+0x86>
 80068d8:	4664      	mov	r4, ip
 80068da:	42a3      	cmp	r3, r4
 80068dc:	dd22      	ble.n	8006924 <_strtoul_l.constprop.0+0xa8>
 80068de:	2f00      	cmp	r7, #0
 80068e0:	db1d      	blt.n	800691e <_strtoul_l.constprop.0+0xa2>
 80068e2:	4580      	cmp	r8, r0
 80068e4:	d31b      	bcc.n	800691e <_strtoul_l.constprop.0+0xa2>
 80068e6:	d101      	bne.n	80068ec <_strtoul_l.constprop.0+0x70>
 80068e8:	45a1      	cmp	r9, r4
 80068ea:	db18      	blt.n	800691e <_strtoul_l.constprop.0+0xa2>
 80068ec:	fb00 4003 	mla	r0, r0, r3, r4
 80068f0:	2701      	movs	r7, #1
 80068f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068f6:	e7ea      	b.n	80068ce <_strtoul_l.constprop.0+0x52>
 80068f8:	2c2b      	cmp	r4, #43	; 0x2b
 80068fa:	bf04      	itt	eq
 80068fc:	782c      	ldrbeq	r4, [r5, #0]
 80068fe:	1c85      	addeq	r5, r0, #2
 8006900:	e7cd      	b.n	800689e <_strtoul_l.constprop.0+0x22>
 8006902:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006906:	f1bc 0f19 	cmp.w	ip, #25
 800690a:	d801      	bhi.n	8006910 <_strtoul_l.constprop.0+0x94>
 800690c:	3c37      	subs	r4, #55	; 0x37
 800690e:	e7e4      	b.n	80068da <_strtoul_l.constprop.0+0x5e>
 8006910:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006914:	f1bc 0f19 	cmp.w	ip, #25
 8006918:	d804      	bhi.n	8006924 <_strtoul_l.constprop.0+0xa8>
 800691a:	3c57      	subs	r4, #87	; 0x57
 800691c:	e7dd      	b.n	80068da <_strtoul_l.constprop.0+0x5e>
 800691e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006922:	e7e6      	b.n	80068f2 <_strtoul_l.constprop.0+0x76>
 8006924:	2f00      	cmp	r7, #0
 8006926:	da07      	bge.n	8006938 <_strtoul_l.constprop.0+0xbc>
 8006928:	2322      	movs	r3, #34	; 0x22
 800692a:	f8ce 3000 	str.w	r3, [lr]
 800692e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006932:	b932      	cbnz	r2, 8006942 <_strtoul_l.constprop.0+0xc6>
 8006934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006938:	b106      	cbz	r6, 800693c <_strtoul_l.constprop.0+0xc0>
 800693a:	4240      	negs	r0, r0
 800693c:	2a00      	cmp	r2, #0
 800693e:	d0f9      	beq.n	8006934 <_strtoul_l.constprop.0+0xb8>
 8006940:	b107      	cbz	r7, 8006944 <_strtoul_l.constprop.0+0xc8>
 8006942:	1e69      	subs	r1, r5, #1
 8006944:	6011      	str	r1, [r2, #0]
 8006946:	e7f5      	b.n	8006934 <_strtoul_l.constprop.0+0xb8>
 8006948:	2430      	movs	r4, #48	; 0x30
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1b5      	bne.n	80068ba <_strtoul_l.constprop.0+0x3e>
 800694e:	2308      	movs	r3, #8
 8006950:	e7b3      	b.n	80068ba <_strtoul_l.constprop.0+0x3e>
 8006952:	2c30      	cmp	r4, #48	; 0x30
 8006954:	d0a9      	beq.n	80068aa <_strtoul_l.constprop.0+0x2e>
 8006956:	230a      	movs	r3, #10
 8006958:	e7af      	b.n	80068ba <_strtoul_l.constprop.0+0x3e>
 800695a:	bf00      	nop
 800695c:	0800828d 	.word	0x0800828d

08006960 <_strtoul_r>:
 8006960:	f7ff bf8c 	b.w	800687c <_strtoul_l.constprop.0>

08006964 <__submore>:
 8006964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006968:	460c      	mov	r4, r1
 800696a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800696c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006970:	4299      	cmp	r1, r3
 8006972:	d11d      	bne.n	80069b0 <__submore+0x4c>
 8006974:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006978:	f7fd f95c 	bl	8003c34 <_malloc_r>
 800697c:	b918      	cbnz	r0, 8006986 <__submore+0x22>
 800697e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800698a:	63a3      	str	r3, [r4, #56]	; 0x38
 800698c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006990:	6360      	str	r0, [r4, #52]	; 0x34
 8006992:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006996:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800699a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800699e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80069a2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80069a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80069aa:	6020      	str	r0, [r4, #0]
 80069ac:	2000      	movs	r0, #0
 80069ae:	e7e8      	b.n	8006982 <__submore+0x1e>
 80069b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80069b2:	0077      	lsls	r7, r6, #1
 80069b4:	463a      	mov	r2, r7
 80069b6:	f000 fa39 	bl	8006e2c <_realloc_r>
 80069ba:	4605      	mov	r5, r0
 80069bc:	2800      	cmp	r0, #0
 80069be:	d0de      	beq.n	800697e <__submore+0x1a>
 80069c0:	eb00 0806 	add.w	r8, r0, r6
 80069c4:	4601      	mov	r1, r0
 80069c6:	4632      	mov	r2, r6
 80069c8:	4640      	mov	r0, r8
 80069ca:	f7fe fe57 	bl	800567c <memcpy>
 80069ce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80069d2:	f8c4 8000 	str.w	r8, [r4]
 80069d6:	e7e9      	b.n	80069ac <__submore+0x48>

080069d8 <__swbuf_r>:
 80069d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069da:	460e      	mov	r6, r1
 80069dc:	4614      	mov	r4, r2
 80069de:	4605      	mov	r5, r0
 80069e0:	b118      	cbz	r0, 80069ea <__swbuf_r+0x12>
 80069e2:	6983      	ldr	r3, [r0, #24]
 80069e4:	b90b      	cbnz	r3, 80069ea <__swbuf_r+0x12>
 80069e6:	f7fe fd91 	bl	800550c <__sinit>
 80069ea:	4b21      	ldr	r3, [pc, #132]	; (8006a70 <__swbuf_r+0x98>)
 80069ec:	429c      	cmp	r4, r3
 80069ee:	d12b      	bne.n	8006a48 <__swbuf_r+0x70>
 80069f0:	686c      	ldr	r4, [r5, #4]
 80069f2:	69a3      	ldr	r3, [r4, #24]
 80069f4:	60a3      	str	r3, [r4, #8]
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	071a      	lsls	r2, r3, #28
 80069fa:	d52f      	bpl.n	8006a5c <__swbuf_r+0x84>
 80069fc:	6923      	ldr	r3, [r4, #16]
 80069fe:	b36b      	cbz	r3, 8006a5c <__swbuf_r+0x84>
 8006a00:	6923      	ldr	r3, [r4, #16]
 8006a02:	6820      	ldr	r0, [r4, #0]
 8006a04:	1ac0      	subs	r0, r0, r3
 8006a06:	6963      	ldr	r3, [r4, #20]
 8006a08:	b2f6      	uxtb	r6, r6
 8006a0a:	4283      	cmp	r3, r0
 8006a0c:	4637      	mov	r7, r6
 8006a0e:	dc04      	bgt.n	8006a1a <__swbuf_r+0x42>
 8006a10:	4621      	mov	r1, r4
 8006a12:	4628      	mov	r0, r5
 8006a14:	f000 f944 	bl	8006ca0 <_fflush_r>
 8006a18:	bb30      	cbnz	r0, 8006a68 <__swbuf_r+0x90>
 8006a1a:	68a3      	ldr	r3, [r4, #8]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	60a3      	str	r3, [r4, #8]
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	6022      	str	r2, [r4, #0]
 8006a26:	701e      	strb	r6, [r3, #0]
 8006a28:	6963      	ldr	r3, [r4, #20]
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	4283      	cmp	r3, r0
 8006a2e:	d004      	beq.n	8006a3a <__swbuf_r+0x62>
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	07db      	lsls	r3, r3, #31
 8006a34:	d506      	bpl.n	8006a44 <__swbuf_r+0x6c>
 8006a36:	2e0a      	cmp	r6, #10
 8006a38:	d104      	bne.n	8006a44 <__swbuf_r+0x6c>
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	f000 f92f 	bl	8006ca0 <_fflush_r>
 8006a42:	b988      	cbnz	r0, 8006a68 <__swbuf_r+0x90>
 8006a44:	4638      	mov	r0, r7
 8006a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a48:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <__swbuf_r+0x9c>)
 8006a4a:	429c      	cmp	r4, r3
 8006a4c:	d101      	bne.n	8006a52 <__swbuf_r+0x7a>
 8006a4e:	68ac      	ldr	r4, [r5, #8]
 8006a50:	e7cf      	b.n	80069f2 <__swbuf_r+0x1a>
 8006a52:	4b09      	ldr	r3, [pc, #36]	; (8006a78 <__swbuf_r+0xa0>)
 8006a54:	429c      	cmp	r4, r3
 8006a56:	bf08      	it	eq
 8006a58:	68ec      	ldreq	r4, [r5, #12]
 8006a5a:	e7ca      	b.n	80069f2 <__swbuf_r+0x1a>
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 f80c 	bl	8006a7c <__swsetup_r>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d0cb      	beq.n	8006a00 <__swbuf_r+0x28>
 8006a68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006a6c:	e7ea      	b.n	8006a44 <__swbuf_r+0x6c>
 8006a6e:	bf00      	nop
 8006a70:	0800808c 	.word	0x0800808c
 8006a74:	080080ac 	.word	0x080080ac
 8006a78:	0800806c 	.word	0x0800806c

08006a7c <__swsetup_r>:
 8006a7c:	4b32      	ldr	r3, [pc, #200]	; (8006b48 <__swsetup_r+0xcc>)
 8006a7e:	b570      	push	{r4, r5, r6, lr}
 8006a80:	681d      	ldr	r5, [r3, #0]
 8006a82:	4606      	mov	r6, r0
 8006a84:	460c      	mov	r4, r1
 8006a86:	b125      	cbz	r5, 8006a92 <__swsetup_r+0x16>
 8006a88:	69ab      	ldr	r3, [r5, #24]
 8006a8a:	b913      	cbnz	r3, 8006a92 <__swsetup_r+0x16>
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	f7fe fd3d 	bl	800550c <__sinit>
 8006a92:	4b2e      	ldr	r3, [pc, #184]	; (8006b4c <__swsetup_r+0xd0>)
 8006a94:	429c      	cmp	r4, r3
 8006a96:	d10f      	bne.n	8006ab8 <__swsetup_r+0x3c>
 8006a98:	686c      	ldr	r4, [r5, #4]
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006aa0:	0719      	lsls	r1, r3, #28
 8006aa2:	d42c      	bmi.n	8006afe <__swsetup_r+0x82>
 8006aa4:	06dd      	lsls	r5, r3, #27
 8006aa6:	d411      	bmi.n	8006acc <__swsetup_r+0x50>
 8006aa8:	2309      	movs	r3, #9
 8006aaa:	6033      	str	r3, [r6, #0]
 8006aac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ab0:	81a3      	strh	r3, [r4, #12]
 8006ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ab6:	e03e      	b.n	8006b36 <__swsetup_r+0xba>
 8006ab8:	4b25      	ldr	r3, [pc, #148]	; (8006b50 <__swsetup_r+0xd4>)
 8006aba:	429c      	cmp	r4, r3
 8006abc:	d101      	bne.n	8006ac2 <__swsetup_r+0x46>
 8006abe:	68ac      	ldr	r4, [r5, #8]
 8006ac0:	e7eb      	b.n	8006a9a <__swsetup_r+0x1e>
 8006ac2:	4b24      	ldr	r3, [pc, #144]	; (8006b54 <__swsetup_r+0xd8>)
 8006ac4:	429c      	cmp	r4, r3
 8006ac6:	bf08      	it	eq
 8006ac8:	68ec      	ldreq	r4, [r5, #12]
 8006aca:	e7e6      	b.n	8006a9a <__swsetup_r+0x1e>
 8006acc:	0758      	lsls	r0, r3, #29
 8006ace:	d512      	bpl.n	8006af6 <__swsetup_r+0x7a>
 8006ad0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ad2:	b141      	cbz	r1, 8006ae6 <__swsetup_r+0x6a>
 8006ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ad8:	4299      	cmp	r1, r3
 8006ada:	d002      	beq.n	8006ae2 <__swsetup_r+0x66>
 8006adc:	4630      	mov	r0, r6
 8006ade:	f7fd f83d 	bl	8003b5c <_free_r>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	6363      	str	r3, [r4, #52]	; 0x34
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006aec:	81a3      	strh	r3, [r4, #12]
 8006aee:	2300      	movs	r3, #0
 8006af0:	6063      	str	r3, [r4, #4]
 8006af2:	6923      	ldr	r3, [r4, #16]
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	f043 0308 	orr.w	r3, r3, #8
 8006afc:	81a3      	strh	r3, [r4, #12]
 8006afe:	6923      	ldr	r3, [r4, #16]
 8006b00:	b94b      	cbnz	r3, 8006b16 <__swsetup_r+0x9a>
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b0c:	d003      	beq.n	8006b16 <__swsetup_r+0x9a>
 8006b0e:	4621      	mov	r1, r4
 8006b10:	4630      	mov	r0, r6
 8006b12:	f000 f939 	bl	8006d88 <__smakebuf_r>
 8006b16:	89a0      	ldrh	r0, [r4, #12]
 8006b18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b1c:	f010 0301 	ands.w	r3, r0, #1
 8006b20:	d00a      	beq.n	8006b38 <__swsetup_r+0xbc>
 8006b22:	2300      	movs	r3, #0
 8006b24:	60a3      	str	r3, [r4, #8]
 8006b26:	6963      	ldr	r3, [r4, #20]
 8006b28:	425b      	negs	r3, r3
 8006b2a:	61a3      	str	r3, [r4, #24]
 8006b2c:	6923      	ldr	r3, [r4, #16]
 8006b2e:	b943      	cbnz	r3, 8006b42 <__swsetup_r+0xc6>
 8006b30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b34:	d1ba      	bne.n	8006aac <__swsetup_r+0x30>
 8006b36:	bd70      	pop	{r4, r5, r6, pc}
 8006b38:	0781      	lsls	r1, r0, #30
 8006b3a:	bf58      	it	pl
 8006b3c:	6963      	ldrpl	r3, [r4, #20]
 8006b3e:	60a3      	str	r3, [r4, #8]
 8006b40:	e7f4      	b.n	8006b2c <__swsetup_r+0xb0>
 8006b42:	2000      	movs	r0, #0
 8006b44:	e7f7      	b.n	8006b36 <__swsetup_r+0xba>
 8006b46:	bf00      	nop
 8006b48:	20000008 	.word	0x20000008
 8006b4c:	0800808c 	.word	0x0800808c
 8006b50:	080080ac 	.word	0x080080ac
 8006b54:	0800806c 	.word	0x0800806c

08006b58 <__assert_func>:
 8006b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b5a:	4614      	mov	r4, r2
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	4b09      	ldr	r3, [pc, #36]	; (8006b84 <__assert_func+0x2c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4605      	mov	r5, r0
 8006b64:	68d8      	ldr	r0, [r3, #12]
 8006b66:	b14c      	cbz	r4, 8006b7c <__assert_func+0x24>
 8006b68:	4b07      	ldr	r3, [pc, #28]	; (8006b88 <__assert_func+0x30>)
 8006b6a:	9100      	str	r1, [sp, #0]
 8006b6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b70:	4906      	ldr	r1, [pc, #24]	; (8006b8c <__assert_func+0x34>)
 8006b72:	462b      	mov	r3, r5
 8006b74:	f000 f8d0 	bl	8006d18 <fiprintf>
 8006b78:	f000 f994 	bl	8006ea4 <abort>
 8006b7c:	4b04      	ldr	r3, [pc, #16]	; (8006b90 <__assert_func+0x38>)
 8006b7e:	461c      	mov	r4, r3
 8006b80:	e7f3      	b.n	8006b6a <__assert_func+0x12>
 8006b82:	bf00      	nop
 8006b84:	20000008 	.word	0x20000008
 8006b88:	08008250 	.word	0x08008250
 8006b8c:	0800825d 	.word	0x0800825d
 8006b90:	0800828b 	.word	0x0800828b

08006b94 <__sflush_r>:
 8006b94:	898a      	ldrh	r2, [r1, #12]
 8006b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9a:	4605      	mov	r5, r0
 8006b9c:	0710      	lsls	r0, r2, #28
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	d458      	bmi.n	8006c54 <__sflush_r+0xc0>
 8006ba2:	684b      	ldr	r3, [r1, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	dc05      	bgt.n	8006bb4 <__sflush_r+0x20>
 8006ba8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	dc02      	bgt.n	8006bb4 <__sflush_r+0x20>
 8006bae:	2000      	movs	r0, #0
 8006bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bb6:	2e00      	cmp	r6, #0
 8006bb8:	d0f9      	beq.n	8006bae <__sflush_r+0x1a>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006bc0:	682f      	ldr	r7, [r5, #0]
 8006bc2:	602b      	str	r3, [r5, #0]
 8006bc4:	d032      	beq.n	8006c2c <__sflush_r+0x98>
 8006bc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	075a      	lsls	r2, r3, #29
 8006bcc:	d505      	bpl.n	8006bda <__sflush_r+0x46>
 8006bce:	6863      	ldr	r3, [r4, #4]
 8006bd0:	1ac0      	subs	r0, r0, r3
 8006bd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bd4:	b10b      	cbz	r3, 8006bda <__sflush_r+0x46>
 8006bd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bd8:	1ac0      	subs	r0, r0, r3
 8006bda:	2300      	movs	r3, #0
 8006bdc:	4602      	mov	r2, r0
 8006bde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006be0:	6a21      	ldr	r1, [r4, #32]
 8006be2:	4628      	mov	r0, r5
 8006be4:	47b0      	blx	r6
 8006be6:	1c43      	adds	r3, r0, #1
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	d106      	bne.n	8006bfa <__sflush_r+0x66>
 8006bec:	6829      	ldr	r1, [r5, #0]
 8006bee:	291d      	cmp	r1, #29
 8006bf0:	d82c      	bhi.n	8006c4c <__sflush_r+0xb8>
 8006bf2:	4a2a      	ldr	r2, [pc, #168]	; (8006c9c <__sflush_r+0x108>)
 8006bf4:	40ca      	lsrs	r2, r1
 8006bf6:	07d6      	lsls	r6, r2, #31
 8006bf8:	d528      	bpl.n	8006c4c <__sflush_r+0xb8>
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	6062      	str	r2, [r4, #4]
 8006bfe:	04d9      	lsls	r1, r3, #19
 8006c00:	6922      	ldr	r2, [r4, #16]
 8006c02:	6022      	str	r2, [r4, #0]
 8006c04:	d504      	bpl.n	8006c10 <__sflush_r+0x7c>
 8006c06:	1c42      	adds	r2, r0, #1
 8006c08:	d101      	bne.n	8006c0e <__sflush_r+0x7a>
 8006c0a:	682b      	ldr	r3, [r5, #0]
 8006c0c:	b903      	cbnz	r3, 8006c10 <__sflush_r+0x7c>
 8006c0e:	6560      	str	r0, [r4, #84]	; 0x54
 8006c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c12:	602f      	str	r7, [r5, #0]
 8006c14:	2900      	cmp	r1, #0
 8006c16:	d0ca      	beq.n	8006bae <__sflush_r+0x1a>
 8006c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c1c:	4299      	cmp	r1, r3
 8006c1e:	d002      	beq.n	8006c26 <__sflush_r+0x92>
 8006c20:	4628      	mov	r0, r5
 8006c22:	f7fc ff9b 	bl	8003b5c <_free_r>
 8006c26:	2000      	movs	r0, #0
 8006c28:	6360      	str	r0, [r4, #52]	; 0x34
 8006c2a:	e7c1      	b.n	8006bb0 <__sflush_r+0x1c>
 8006c2c:	6a21      	ldr	r1, [r4, #32]
 8006c2e:	2301      	movs	r3, #1
 8006c30:	4628      	mov	r0, r5
 8006c32:	47b0      	blx	r6
 8006c34:	1c41      	adds	r1, r0, #1
 8006c36:	d1c7      	bne.n	8006bc8 <__sflush_r+0x34>
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0c4      	beq.n	8006bc8 <__sflush_r+0x34>
 8006c3e:	2b1d      	cmp	r3, #29
 8006c40:	d001      	beq.n	8006c46 <__sflush_r+0xb2>
 8006c42:	2b16      	cmp	r3, #22
 8006c44:	d101      	bne.n	8006c4a <__sflush_r+0xb6>
 8006c46:	602f      	str	r7, [r5, #0]
 8006c48:	e7b1      	b.n	8006bae <__sflush_r+0x1a>
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c50:	81a3      	strh	r3, [r4, #12]
 8006c52:	e7ad      	b.n	8006bb0 <__sflush_r+0x1c>
 8006c54:	690f      	ldr	r7, [r1, #16]
 8006c56:	2f00      	cmp	r7, #0
 8006c58:	d0a9      	beq.n	8006bae <__sflush_r+0x1a>
 8006c5a:	0793      	lsls	r3, r2, #30
 8006c5c:	680e      	ldr	r6, [r1, #0]
 8006c5e:	bf08      	it	eq
 8006c60:	694b      	ldreq	r3, [r1, #20]
 8006c62:	600f      	str	r7, [r1, #0]
 8006c64:	bf18      	it	ne
 8006c66:	2300      	movne	r3, #0
 8006c68:	eba6 0807 	sub.w	r8, r6, r7
 8006c6c:	608b      	str	r3, [r1, #8]
 8006c6e:	f1b8 0f00 	cmp.w	r8, #0
 8006c72:	dd9c      	ble.n	8006bae <__sflush_r+0x1a>
 8006c74:	6a21      	ldr	r1, [r4, #32]
 8006c76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c78:	4643      	mov	r3, r8
 8006c7a:	463a      	mov	r2, r7
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	47b0      	blx	r6
 8006c80:	2800      	cmp	r0, #0
 8006c82:	dc06      	bgt.n	8006c92 <__sflush_r+0xfe>
 8006c84:	89a3      	ldrh	r3, [r4, #12]
 8006c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c8a:	81a3      	strh	r3, [r4, #12]
 8006c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c90:	e78e      	b.n	8006bb0 <__sflush_r+0x1c>
 8006c92:	4407      	add	r7, r0
 8006c94:	eba8 0800 	sub.w	r8, r8, r0
 8006c98:	e7e9      	b.n	8006c6e <__sflush_r+0xda>
 8006c9a:	bf00      	nop
 8006c9c:	20400001 	.word	0x20400001

08006ca0 <_fflush_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	690b      	ldr	r3, [r1, #16]
 8006ca4:	4605      	mov	r5, r0
 8006ca6:	460c      	mov	r4, r1
 8006ca8:	b913      	cbnz	r3, 8006cb0 <_fflush_r+0x10>
 8006caa:	2500      	movs	r5, #0
 8006cac:	4628      	mov	r0, r5
 8006cae:	bd38      	pop	{r3, r4, r5, pc}
 8006cb0:	b118      	cbz	r0, 8006cba <_fflush_r+0x1a>
 8006cb2:	6983      	ldr	r3, [r0, #24]
 8006cb4:	b90b      	cbnz	r3, 8006cba <_fflush_r+0x1a>
 8006cb6:	f7fe fc29 	bl	800550c <__sinit>
 8006cba:	4b14      	ldr	r3, [pc, #80]	; (8006d0c <_fflush_r+0x6c>)
 8006cbc:	429c      	cmp	r4, r3
 8006cbe:	d11b      	bne.n	8006cf8 <_fflush_r+0x58>
 8006cc0:	686c      	ldr	r4, [r5, #4]
 8006cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0ef      	beq.n	8006caa <_fflush_r+0xa>
 8006cca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ccc:	07d0      	lsls	r0, r2, #31
 8006cce:	d404      	bmi.n	8006cda <_fflush_r+0x3a>
 8006cd0:	0599      	lsls	r1, r3, #22
 8006cd2:	d402      	bmi.n	8006cda <_fflush_r+0x3a>
 8006cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cd6:	f7fe fcbc 	bl	8005652 <__retarget_lock_acquire_recursive>
 8006cda:	4628      	mov	r0, r5
 8006cdc:	4621      	mov	r1, r4
 8006cde:	f7ff ff59 	bl	8006b94 <__sflush_r>
 8006ce2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ce4:	07da      	lsls	r2, r3, #31
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	d4e0      	bmi.n	8006cac <_fflush_r+0xc>
 8006cea:	89a3      	ldrh	r3, [r4, #12]
 8006cec:	059b      	lsls	r3, r3, #22
 8006cee:	d4dd      	bmi.n	8006cac <_fflush_r+0xc>
 8006cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cf2:	f7fe fcaf 	bl	8005654 <__retarget_lock_release_recursive>
 8006cf6:	e7d9      	b.n	8006cac <_fflush_r+0xc>
 8006cf8:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <_fflush_r+0x70>)
 8006cfa:	429c      	cmp	r4, r3
 8006cfc:	d101      	bne.n	8006d02 <_fflush_r+0x62>
 8006cfe:	68ac      	ldr	r4, [r5, #8]
 8006d00:	e7df      	b.n	8006cc2 <_fflush_r+0x22>
 8006d02:	4b04      	ldr	r3, [pc, #16]	; (8006d14 <_fflush_r+0x74>)
 8006d04:	429c      	cmp	r4, r3
 8006d06:	bf08      	it	eq
 8006d08:	68ec      	ldreq	r4, [r5, #12]
 8006d0a:	e7da      	b.n	8006cc2 <_fflush_r+0x22>
 8006d0c:	0800808c 	.word	0x0800808c
 8006d10:	080080ac 	.word	0x080080ac
 8006d14:	0800806c 	.word	0x0800806c

08006d18 <fiprintf>:
 8006d18:	b40e      	push	{r1, r2, r3}
 8006d1a:	b503      	push	{r0, r1, lr}
 8006d1c:	4601      	mov	r1, r0
 8006d1e:	ab03      	add	r3, sp, #12
 8006d20:	4805      	ldr	r0, [pc, #20]	; (8006d38 <fiprintf+0x20>)
 8006d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d26:	6800      	ldr	r0, [r0, #0]
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	f7ff fa57 	bl	80061dc <_vfiprintf_r>
 8006d2e:	b002      	add	sp, #8
 8006d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d34:	b003      	add	sp, #12
 8006d36:	4770      	bx	lr
 8006d38:	20000008 	.word	0x20000008

08006d3c <__swhatbuf_r>:
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	460e      	mov	r6, r1
 8006d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d44:	2900      	cmp	r1, #0
 8006d46:	b096      	sub	sp, #88	; 0x58
 8006d48:	4614      	mov	r4, r2
 8006d4a:	461d      	mov	r5, r3
 8006d4c:	da08      	bge.n	8006d60 <__swhatbuf_r+0x24>
 8006d4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	602a      	str	r2, [r5, #0]
 8006d56:	061a      	lsls	r2, r3, #24
 8006d58:	d410      	bmi.n	8006d7c <__swhatbuf_r+0x40>
 8006d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d5e:	e00e      	b.n	8006d7e <__swhatbuf_r+0x42>
 8006d60:	466a      	mov	r2, sp
 8006d62:	f000 f8a7 	bl	8006eb4 <_fstat_r>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	dbf1      	blt.n	8006d4e <__swhatbuf_r+0x12>
 8006d6a:	9a01      	ldr	r2, [sp, #4]
 8006d6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d74:	425a      	negs	r2, r3
 8006d76:	415a      	adcs	r2, r3
 8006d78:	602a      	str	r2, [r5, #0]
 8006d7a:	e7ee      	b.n	8006d5a <__swhatbuf_r+0x1e>
 8006d7c:	2340      	movs	r3, #64	; 0x40
 8006d7e:	2000      	movs	r0, #0
 8006d80:	6023      	str	r3, [r4, #0]
 8006d82:	b016      	add	sp, #88	; 0x58
 8006d84:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d88 <__smakebuf_r>:
 8006d88:	898b      	ldrh	r3, [r1, #12]
 8006d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d8c:	079d      	lsls	r5, r3, #30
 8006d8e:	4606      	mov	r6, r0
 8006d90:	460c      	mov	r4, r1
 8006d92:	d507      	bpl.n	8006da4 <__smakebuf_r+0x1c>
 8006d94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	6123      	str	r3, [r4, #16]
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	6163      	str	r3, [r4, #20]
 8006da0:	b002      	add	sp, #8
 8006da2:	bd70      	pop	{r4, r5, r6, pc}
 8006da4:	ab01      	add	r3, sp, #4
 8006da6:	466a      	mov	r2, sp
 8006da8:	f7ff ffc8 	bl	8006d3c <__swhatbuf_r>
 8006dac:	9900      	ldr	r1, [sp, #0]
 8006dae:	4605      	mov	r5, r0
 8006db0:	4630      	mov	r0, r6
 8006db2:	f7fc ff3f 	bl	8003c34 <_malloc_r>
 8006db6:	b948      	cbnz	r0, 8006dcc <__smakebuf_r+0x44>
 8006db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dbc:	059a      	lsls	r2, r3, #22
 8006dbe:	d4ef      	bmi.n	8006da0 <__smakebuf_r+0x18>
 8006dc0:	f023 0303 	bic.w	r3, r3, #3
 8006dc4:	f043 0302 	orr.w	r3, r3, #2
 8006dc8:	81a3      	strh	r3, [r4, #12]
 8006dca:	e7e3      	b.n	8006d94 <__smakebuf_r+0xc>
 8006dcc:	4b0d      	ldr	r3, [pc, #52]	; (8006e04 <__smakebuf_r+0x7c>)
 8006dce:	62b3      	str	r3, [r6, #40]	; 0x28
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	6020      	str	r0, [r4, #0]
 8006dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd8:	81a3      	strh	r3, [r4, #12]
 8006dda:	9b00      	ldr	r3, [sp, #0]
 8006ddc:	6163      	str	r3, [r4, #20]
 8006dde:	9b01      	ldr	r3, [sp, #4]
 8006de0:	6120      	str	r0, [r4, #16]
 8006de2:	b15b      	cbz	r3, 8006dfc <__smakebuf_r+0x74>
 8006de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006de8:	4630      	mov	r0, r6
 8006dea:	f000 f875 	bl	8006ed8 <_isatty_r>
 8006dee:	b128      	cbz	r0, 8006dfc <__smakebuf_r+0x74>
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	f023 0303 	bic.w	r3, r3, #3
 8006df6:	f043 0301 	orr.w	r3, r3, #1
 8006dfa:	81a3      	strh	r3, [r4, #12]
 8006dfc:	89a0      	ldrh	r0, [r4, #12]
 8006dfe:	4305      	orrs	r5, r0
 8006e00:	81a5      	strh	r5, [r4, #12]
 8006e02:	e7cd      	b.n	8006da0 <__smakebuf_r+0x18>
 8006e04:	080054a5 	.word	0x080054a5

08006e08 <__ascii_mbtowc>:
 8006e08:	b082      	sub	sp, #8
 8006e0a:	b901      	cbnz	r1, 8006e0e <__ascii_mbtowc+0x6>
 8006e0c:	a901      	add	r1, sp, #4
 8006e0e:	b142      	cbz	r2, 8006e22 <__ascii_mbtowc+0x1a>
 8006e10:	b14b      	cbz	r3, 8006e26 <__ascii_mbtowc+0x1e>
 8006e12:	7813      	ldrb	r3, [r2, #0]
 8006e14:	600b      	str	r3, [r1, #0]
 8006e16:	7812      	ldrb	r2, [r2, #0]
 8006e18:	1e10      	subs	r0, r2, #0
 8006e1a:	bf18      	it	ne
 8006e1c:	2001      	movne	r0, #1
 8006e1e:	b002      	add	sp, #8
 8006e20:	4770      	bx	lr
 8006e22:	4610      	mov	r0, r2
 8006e24:	e7fb      	b.n	8006e1e <__ascii_mbtowc+0x16>
 8006e26:	f06f 0001 	mvn.w	r0, #1
 8006e2a:	e7f8      	b.n	8006e1e <__ascii_mbtowc+0x16>

08006e2c <_realloc_r>:
 8006e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e30:	4680      	mov	r8, r0
 8006e32:	4614      	mov	r4, r2
 8006e34:	460e      	mov	r6, r1
 8006e36:	b921      	cbnz	r1, 8006e42 <_realloc_r+0x16>
 8006e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	f7fc bef9 	b.w	8003c34 <_malloc_r>
 8006e42:	b92a      	cbnz	r2, 8006e50 <_realloc_r+0x24>
 8006e44:	f7fc fe8a 	bl	8003b5c <_free_r>
 8006e48:	4625      	mov	r5, r4
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e50:	f000 f852 	bl	8006ef8 <_malloc_usable_size_r>
 8006e54:	4284      	cmp	r4, r0
 8006e56:	4607      	mov	r7, r0
 8006e58:	d802      	bhi.n	8006e60 <_realloc_r+0x34>
 8006e5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e5e:	d812      	bhi.n	8006e86 <_realloc_r+0x5a>
 8006e60:	4621      	mov	r1, r4
 8006e62:	4640      	mov	r0, r8
 8006e64:	f7fc fee6 	bl	8003c34 <_malloc_r>
 8006e68:	4605      	mov	r5, r0
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d0ed      	beq.n	8006e4a <_realloc_r+0x1e>
 8006e6e:	42bc      	cmp	r4, r7
 8006e70:	4622      	mov	r2, r4
 8006e72:	4631      	mov	r1, r6
 8006e74:	bf28      	it	cs
 8006e76:	463a      	movcs	r2, r7
 8006e78:	f7fe fc00 	bl	800567c <memcpy>
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4640      	mov	r0, r8
 8006e80:	f7fc fe6c 	bl	8003b5c <_free_r>
 8006e84:	e7e1      	b.n	8006e4a <_realloc_r+0x1e>
 8006e86:	4635      	mov	r5, r6
 8006e88:	e7df      	b.n	8006e4a <_realloc_r+0x1e>

08006e8a <__ascii_wctomb>:
 8006e8a:	b149      	cbz	r1, 8006ea0 <__ascii_wctomb+0x16>
 8006e8c:	2aff      	cmp	r2, #255	; 0xff
 8006e8e:	bf85      	ittet	hi
 8006e90:	238a      	movhi	r3, #138	; 0x8a
 8006e92:	6003      	strhi	r3, [r0, #0]
 8006e94:	700a      	strbls	r2, [r1, #0]
 8006e96:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006e9a:	bf98      	it	ls
 8006e9c:	2001      	movls	r0, #1
 8006e9e:	4770      	bx	lr
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	4770      	bx	lr

08006ea4 <abort>:
 8006ea4:	b508      	push	{r3, lr}
 8006ea6:	2006      	movs	r0, #6
 8006ea8:	f000 f856 	bl	8006f58 <raise>
 8006eac:	2001      	movs	r0, #1
 8006eae:	f7fa f933 	bl	8001118 <_exit>
	...

08006eb4 <_fstat_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d07      	ldr	r5, [pc, #28]	; (8006ed4 <_fstat_r+0x20>)
 8006eb8:	2300      	movs	r3, #0
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	602b      	str	r3, [r5, #0]
 8006ec2:	f7fa f978 	bl	80011b6 <_fstat>
 8006ec6:	1c43      	adds	r3, r0, #1
 8006ec8:	d102      	bne.n	8006ed0 <_fstat_r+0x1c>
 8006eca:	682b      	ldr	r3, [r5, #0]
 8006ecc:	b103      	cbz	r3, 8006ed0 <_fstat_r+0x1c>
 8006ece:	6023      	str	r3, [r4, #0]
 8006ed0:	bd38      	pop	{r3, r4, r5, pc}
 8006ed2:	bf00      	nop
 8006ed4:	20000eb0 	.word	0x20000eb0

08006ed8 <_isatty_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4d06      	ldr	r5, [pc, #24]	; (8006ef4 <_isatty_r+0x1c>)
 8006edc:	2300      	movs	r3, #0
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	602b      	str	r3, [r5, #0]
 8006ee4:	f7fa f977 	bl	80011d6 <_isatty>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d102      	bne.n	8006ef2 <_isatty_r+0x1a>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b103      	cbz	r3, 8006ef2 <_isatty_r+0x1a>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	20000eb0 	.word	0x20000eb0

08006ef8 <_malloc_usable_size_r>:
 8006ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006efc:	1f18      	subs	r0, r3, #4
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	bfbc      	itt	lt
 8006f02:	580b      	ldrlt	r3, [r1, r0]
 8006f04:	18c0      	addlt	r0, r0, r3
 8006f06:	4770      	bx	lr

08006f08 <_raise_r>:
 8006f08:	291f      	cmp	r1, #31
 8006f0a:	b538      	push	{r3, r4, r5, lr}
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	460d      	mov	r5, r1
 8006f10:	d904      	bls.n	8006f1c <_raise_r+0x14>
 8006f12:	2316      	movs	r3, #22
 8006f14:	6003      	str	r3, [r0, #0]
 8006f16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
 8006f1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f1e:	b112      	cbz	r2, 8006f26 <_raise_r+0x1e>
 8006f20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f24:	b94b      	cbnz	r3, 8006f3a <_raise_r+0x32>
 8006f26:	4620      	mov	r0, r4
 8006f28:	f000 f830 	bl	8006f8c <_getpid_r>
 8006f2c:	462a      	mov	r2, r5
 8006f2e:	4601      	mov	r1, r0
 8006f30:	4620      	mov	r0, r4
 8006f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f36:	f000 b817 	b.w	8006f68 <_kill_r>
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d00a      	beq.n	8006f54 <_raise_r+0x4c>
 8006f3e:	1c59      	adds	r1, r3, #1
 8006f40:	d103      	bne.n	8006f4a <_raise_r+0x42>
 8006f42:	2316      	movs	r3, #22
 8006f44:	6003      	str	r3, [r0, #0]
 8006f46:	2001      	movs	r0, #1
 8006f48:	e7e7      	b.n	8006f1a <_raise_r+0x12>
 8006f4a:	2400      	movs	r4, #0
 8006f4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f50:	4628      	mov	r0, r5
 8006f52:	4798      	blx	r3
 8006f54:	2000      	movs	r0, #0
 8006f56:	e7e0      	b.n	8006f1a <_raise_r+0x12>

08006f58 <raise>:
 8006f58:	4b02      	ldr	r3, [pc, #8]	; (8006f64 <raise+0xc>)
 8006f5a:	4601      	mov	r1, r0
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	f7ff bfd3 	b.w	8006f08 <_raise_r>
 8006f62:	bf00      	nop
 8006f64:	20000008 	.word	0x20000008

08006f68 <_kill_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	4d07      	ldr	r5, [pc, #28]	; (8006f88 <_kill_r+0x20>)
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4604      	mov	r4, r0
 8006f70:	4608      	mov	r0, r1
 8006f72:	4611      	mov	r1, r2
 8006f74:	602b      	str	r3, [r5, #0]
 8006f76:	f7fa f8bf 	bl	80010f8 <_kill>
 8006f7a:	1c43      	adds	r3, r0, #1
 8006f7c:	d102      	bne.n	8006f84 <_kill_r+0x1c>
 8006f7e:	682b      	ldr	r3, [r5, #0]
 8006f80:	b103      	cbz	r3, 8006f84 <_kill_r+0x1c>
 8006f82:	6023      	str	r3, [r4, #0]
 8006f84:	bd38      	pop	{r3, r4, r5, pc}
 8006f86:	bf00      	nop
 8006f88:	20000eb0 	.word	0x20000eb0

08006f8c <_getpid_r>:
 8006f8c:	f7fa b8ac 	b.w	80010e8 <_getpid>

08006f90 <round>:
 8006f90:	ec51 0b10 	vmov	r0, r1, d0
 8006f94:	b570      	push	{r4, r5, r6, lr}
 8006f96:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8006f9a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8006f9e:	2c13      	cmp	r4, #19
 8006fa0:	ee10 2a10 	vmov	r2, s0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	dc19      	bgt.n	8006fdc <round+0x4c>
 8006fa8:	2c00      	cmp	r4, #0
 8006faa:	da09      	bge.n	8006fc0 <round+0x30>
 8006fac:	3401      	adds	r4, #1
 8006fae:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006fb2:	d103      	bne.n	8006fbc <round+0x2c>
 8006fb4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006fb8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	e028      	b.n	8007012 <round+0x82>
 8006fc0:	4d15      	ldr	r5, [pc, #84]	; (8007018 <round+0x88>)
 8006fc2:	4125      	asrs	r5, r4
 8006fc4:	ea01 0605 	and.w	r6, r1, r5
 8006fc8:	4332      	orrs	r2, r6
 8006fca:	d00e      	beq.n	8006fea <round+0x5a>
 8006fcc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006fd0:	fa42 f404 	asr.w	r4, r2, r4
 8006fd4:	4423      	add	r3, r4
 8006fd6:	ea23 0305 	bic.w	r3, r3, r5
 8006fda:	e7ef      	b.n	8006fbc <round+0x2c>
 8006fdc:	2c33      	cmp	r4, #51	; 0x33
 8006fde:	dd07      	ble.n	8006ff0 <round+0x60>
 8006fe0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006fe4:	d101      	bne.n	8006fea <round+0x5a>
 8006fe6:	f7f9 f969 	bl	80002bc <__adddf3>
 8006fea:	ec41 0b10 	vmov	d0, r0, r1
 8006fee:	bd70      	pop	{r4, r5, r6, pc}
 8006ff0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8006ff4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006ff8:	40f5      	lsrs	r5, r6
 8006ffa:	4228      	tst	r0, r5
 8006ffc:	d0f5      	beq.n	8006fea <round+0x5a>
 8006ffe:	2101      	movs	r1, #1
 8007000:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007004:	fa01 f404 	lsl.w	r4, r1, r4
 8007008:	1912      	adds	r2, r2, r4
 800700a:	bf28      	it	cs
 800700c:	185b      	addcs	r3, r3, r1
 800700e:	ea22 0205 	bic.w	r2, r2, r5
 8007012:	4619      	mov	r1, r3
 8007014:	4610      	mov	r0, r2
 8007016:	e7e8      	b.n	8006fea <round+0x5a>
 8007018:	000fffff 	.word	0x000fffff

0800701c <pow>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	ed2d 8b02 	vpush	{d8}
 8007022:	eeb0 8a40 	vmov.f32	s16, s0
 8007026:	eef0 8a60 	vmov.f32	s17, s1
 800702a:	ec55 4b11 	vmov	r4, r5, d1
 800702e:	f000 f867 	bl	8007100 <__ieee754_pow>
 8007032:	4622      	mov	r2, r4
 8007034:	462b      	mov	r3, r5
 8007036:	4620      	mov	r0, r4
 8007038:	4629      	mov	r1, r5
 800703a:	ec57 6b10 	vmov	r6, r7, d0
 800703e:	f7f9 fd8d 	bl	8000b5c <__aeabi_dcmpun>
 8007042:	2800      	cmp	r0, #0
 8007044:	d13b      	bne.n	80070be <pow+0xa2>
 8007046:	ec51 0b18 	vmov	r0, r1, d8
 800704a:	2200      	movs	r2, #0
 800704c:	2300      	movs	r3, #0
 800704e:	f7f9 fd53 	bl	8000af8 <__aeabi_dcmpeq>
 8007052:	b1b8      	cbz	r0, 8007084 <pow+0x68>
 8007054:	2200      	movs	r2, #0
 8007056:	2300      	movs	r3, #0
 8007058:	4620      	mov	r0, r4
 800705a:	4629      	mov	r1, r5
 800705c:	f7f9 fd4c 	bl	8000af8 <__aeabi_dcmpeq>
 8007060:	2800      	cmp	r0, #0
 8007062:	d146      	bne.n	80070f2 <pow+0xd6>
 8007064:	ec45 4b10 	vmov	d0, r4, r5
 8007068:	f000 fe63 	bl	8007d32 <finite>
 800706c:	b338      	cbz	r0, 80070be <pow+0xa2>
 800706e:	2200      	movs	r2, #0
 8007070:	2300      	movs	r3, #0
 8007072:	4620      	mov	r0, r4
 8007074:	4629      	mov	r1, r5
 8007076:	f7f9 fd49 	bl	8000b0c <__aeabi_dcmplt>
 800707a:	b300      	cbz	r0, 80070be <pow+0xa2>
 800707c:	f7fc fd34 	bl	8003ae8 <__errno>
 8007080:	2322      	movs	r3, #34	; 0x22
 8007082:	e01b      	b.n	80070bc <pow+0xa0>
 8007084:	ec47 6b10 	vmov	d0, r6, r7
 8007088:	f000 fe53 	bl	8007d32 <finite>
 800708c:	b9e0      	cbnz	r0, 80070c8 <pow+0xac>
 800708e:	eeb0 0a48 	vmov.f32	s0, s16
 8007092:	eef0 0a68 	vmov.f32	s1, s17
 8007096:	f000 fe4c 	bl	8007d32 <finite>
 800709a:	b1a8      	cbz	r0, 80070c8 <pow+0xac>
 800709c:	ec45 4b10 	vmov	d0, r4, r5
 80070a0:	f000 fe47 	bl	8007d32 <finite>
 80070a4:	b180      	cbz	r0, 80070c8 <pow+0xac>
 80070a6:	4632      	mov	r2, r6
 80070a8:	463b      	mov	r3, r7
 80070aa:	4630      	mov	r0, r6
 80070ac:	4639      	mov	r1, r7
 80070ae:	f7f9 fd55 	bl	8000b5c <__aeabi_dcmpun>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d0e2      	beq.n	800707c <pow+0x60>
 80070b6:	f7fc fd17 	bl	8003ae8 <__errno>
 80070ba:	2321      	movs	r3, #33	; 0x21
 80070bc:	6003      	str	r3, [r0, #0]
 80070be:	ecbd 8b02 	vpop	{d8}
 80070c2:	ec47 6b10 	vmov	d0, r6, r7
 80070c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070c8:	2200      	movs	r2, #0
 80070ca:	2300      	movs	r3, #0
 80070cc:	4630      	mov	r0, r6
 80070ce:	4639      	mov	r1, r7
 80070d0:	f7f9 fd12 	bl	8000af8 <__aeabi_dcmpeq>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d0f2      	beq.n	80070be <pow+0xa2>
 80070d8:	eeb0 0a48 	vmov.f32	s0, s16
 80070dc:	eef0 0a68 	vmov.f32	s1, s17
 80070e0:	f000 fe27 	bl	8007d32 <finite>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d0ea      	beq.n	80070be <pow+0xa2>
 80070e8:	ec45 4b10 	vmov	d0, r4, r5
 80070ec:	f000 fe21 	bl	8007d32 <finite>
 80070f0:	e7c3      	b.n	800707a <pow+0x5e>
 80070f2:	4f01      	ldr	r7, [pc, #4]	; (80070f8 <pow+0xdc>)
 80070f4:	2600      	movs	r6, #0
 80070f6:	e7e2      	b.n	80070be <pow+0xa2>
 80070f8:	3ff00000 	.word	0x3ff00000
 80070fc:	00000000 	.word	0x00000000

08007100 <__ieee754_pow>:
 8007100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007104:	ed2d 8b06 	vpush	{d8-d10}
 8007108:	b089      	sub	sp, #36	; 0x24
 800710a:	ed8d 1b00 	vstr	d1, [sp]
 800710e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007112:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007116:	ea58 0102 	orrs.w	r1, r8, r2
 800711a:	ec57 6b10 	vmov	r6, r7, d0
 800711e:	d115      	bne.n	800714c <__ieee754_pow+0x4c>
 8007120:	19b3      	adds	r3, r6, r6
 8007122:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007126:	4152      	adcs	r2, r2
 8007128:	4299      	cmp	r1, r3
 800712a:	4b89      	ldr	r3, [pc, #548]	; (8007350 <__ieee754_pow+0x250>)
 800712c:	4193      	sbcs	r3, r2
 800712e:	f080 84d2 	bcs.w	8007ad6 <__ieee754_pow+0x9d6>
 8007132:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007136:	4630      	mov	r0, r6
 8007138:	4639      	mov	r1, r7
 800713a:	f7f9 f8bf 	bl	80002bc <__adddf3>
 800713e:	ec41 0b10 	vmov	d0, r0, r1
 8007142:	b009      	add	sp, #36	; 0x24
 8007144:	ecbd 8b06 	vpop	{d8-d10}
 8007148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800714c:	4b81      	ldr	r3, [pc, #516]	; (8007354 <__ieee754_pow+0x254>)
 800714e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007152:	429c      	cmp	r4, r3
 8007154:	ee10 aa10 	vmov	sl, s0
 8007158:	463d      	mov	r5, r7
 800715a:	dc06      	bgt.n	800716a <__ieee754_pow+0x6a>
 800715c:	d101      	bne.n	8007162 <__ieee754_pow+0x62>
 800715e:	2e00      	cmp	r6, #0
 8007160:	d1e7      	bne.n	8007132 <__ieee754_pow+0x32>
 8007162:	4598      	cmp	r8, r3
 8007164:	dc01      	bgt.n	800716a <__ieee754_pow+0x6a>
 8007166:	d10f      	bne.n	8007188 <__ieee754_pow+0x88>
 8007168:	b172      	cbz	r2, 8007188 <__ieee754_pow+0x88>
 800716a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800716e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007172:	ea55 050a 	orrs.w	r5, r5, sl
 8007176:	d1dc      	bne.n	8007132 <__ieee754_pow+0x32>
 8007178:	e9dd 3200 	ldrd	r3, r2, [sp]
 800717c:	18db      	adds	r3, r3, r3
 800717e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007182:	4152      	adcs	r2, r2
 8007184:	429d      	cmp	r5, r3
 8007186:	e7d0      	b.n	800712a <__ieee754_pow+0x2a>
 8007188:	2d00      	cmp	r5, #0
 800718a:	da3b      	bge.n	8007204 <__ieee754_pow+0x104>
 800718c:	4b72      	ldr	r3, [pc, #456]	; (8007358 <__ieee754_pow+0x258>)
 800718e:	4598      	cmp	r8, r3
 8007190:	dc51      	bgt.n	8007236 <__ieee754_pow+0x136>
 8007192:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007196:	4598      	cmp	r8, r3
 8007198:	f340 84ac 	ble.w	8007af4 <__ieee754_pow+0x9f4>
 800719c:	ea4f 5328 	mov.w	r3, r8, asr #20
 80071a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80071a4:	2b14      	cmp	r3, #20
 80071a6:	dd0f      	ble.n	80071c8 <__ieee754_pow+0xc8>
 80071a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80071ac:	fa22 f103 	lsr.w	r1, r2, r3
 80071b0:	fa01 f303 	lsl.w	r3, r1, r3
 80071b4:	4293      	cmp	r3, r2
 80071b6:	f040 849d 	bne.w	8007af4 <__ieee754_pow+0x9f4>
 80071ba:	f001 0101 	and.w	r1, r1, #1
 80071be:	f1c1 0302 	rsb	r3, r1, #2
 80071c2:	9304      	str	r3, [sp, #16]
 80071c4:	b182      	cbz	r2, 80071e8 <__ieee754_pow+0xe8>
 80071c6:	e05f      	b.n	8007288 <__ieee754_pow+0x188>
 80071c8:	2a00      	cmp	r2, #0
 80071ca:	d15b      	bne.n	8007284 <__ieee754_pow+0x184>
 80071cc:	f1c3 0314 	rsb	r3, r3, #20
 80071d0:	fa48 f103 	asr.w	r1, r8, r3
 80071d4:	fa01 f303 	lsl.w	r3, r1, r3
 80071d8:	4543      	cmp	r3, r8
 80071da:	f040 8488 	bne.w	8007aee <__ieee754_pow+0x9ee>
 80071de:	f001 0101 	and.w	r1, r1, #1
 80071e2:	f1c1 0302 	rsb	r3, r1, #2
 80071e6:	9304      	str	r3, [sp, #16]
 80071e8:	4b5c      	ldr	r3, [pc, #368]	; (800735c <__ieee754_pow+0x25c>)
 80071ea:	4598      	cmp	r8, r3
 80071ec:	d132      	bne.n	8007254 <__ieee754_pow+0x154>
 80071ee:	f1b9 0f00 	cmp.w	r9, #0
 80071f2:	f280 8478 	bge.w	8007ae6 <__ieee754_pow+0x9e6>
 80071f6:	4959      	ldr	r1, [pc, #356]	; (800735c <__ieee754_pow+0x25c>)
 80071f8:	4632      	mov	r2, r6
 80071fa:	463b      	mov	r3, r7
 80071fc:	2000      	movs	r0, #0
 80071fe:	f7f9 fb3d 	bl	800087c <__aeabi_ddiv>
 8007202:	e79c      	b.n	800713e <__ieee754_pow+0x3e>
 8007204:	2300      	movs	r3, #0
 8007206:	9304      	str	r3, [sp, #16]
 8007208:	2a00      	cmp	r2, #0
 800720a:	d13d      	bne.n	8007288 <__ieee754_pow+0x188>
 800720c:	4b51      	ldr	r3, [pc, #324]	; (8007354 <__ieee754_pow+0x254>)
 800720e:	4598      	cmp	r8, r3
 8007210:	d1ea      	bne.n	80071e8 <__ieee754_pow+0xe8>
 8007212:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007216:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800721a:	ea53 030a 	orrs.w	r3, r3, sl
 800721e:	f000 845a 	beq.w	8007ad6 <__ieee754_pow+0x9d6>
 8007222:	4b4f      	ldr	r3, [pc, #316]	; (8007360 <__ieee754_pow+0x260>)
 8007224:	429c      	cmp	r4, r3
 8007226:	dd08      	ble.n	800723a <__ieee754_pow+0x13a>
 8007228:	f1b9 0f00 	cmp.w	r9, #0
 800722c:	f2c0 8457 	blt.w	8007ade <__ieee754_pow+0x9de>
 8007230:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007234:	e783      	b.n	800713e <__ieee754_pow+0x3e>
 8007236:	2302      	movs	r3, #2
 8007238:	e7e5      	b.n	8007206 <__ieee754_pow+0x106>
 800723a:	f1b9 0f00 	cmp.w	r9, #0
 800723e:	f04f 0000 	mov.w	r0, #0
 8007242:	f04f 0100 	mov.w	r1, #0
 8007246:	f6bf af7a 	bge.w	800713e <__ieee754_pow+0x3e>
 800724a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800724e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007252:	e774      	b.n	800713e <__ieee754_pow+0x3e>
 8007254:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007258:	d106      	bne.n	8007268 <__ieee754_pow+0x168>
 800725a:	4632      	mov	r2, r6
 800725c:	463b      	mov	r3, r7
 800725e:	4630      	mov	r0, r6
 8007260:	4639      	mov	r1, r7
 8007262:	f7f9 f9e1 	bl	8000628 <__aeabi_dmul>
 8007266:	e76a      	b.n	800713e <__ieee754_pow+0x3e>
 8007268:	4b3e      	ldr	r3, [pc, #248]	; (8007364 <__ieee754_pow+0x264>)
 800726a:	4599      	cmp	r9, r3
 800726c:	d10c      	bne.n	8007288 <__ieee754_pow+0x188>
 800726e:	2d00      	cmp	r5, #0
 8007270:	db0a      	blt.n	8007288 <__ieee754_pow+0x188>
 8007272:	ec47 6b10 	vmov	d0, r6, r7
 8007276:	b009      	add	sp, #36	; 0x24
 8007278:	ecbd 8b06 	vpop	{d8-d10}
 800727c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	f000 bc6c 	b.w	8007b5c <__ieee754_sqrt>
 8007284:	2300      	movs	r3, #0
 8007286:	9304      	str	r3, [sp, #16]
 8007288:	ec47 6b10 	vmov	d0, r6, r7
 800728c:	f000 fd48 	bl	8007d20 <fabs>
 8007290:	ec51 0b10 	vmov	r0, r1, d0
 8007294:	f1ba 0f00 	cmp.w	sl, #0
 8007298:	d129      	bne.n	80072ee <__ieee754_pow+0x1ee>
 800729a:	b124      	cbz	r4, 80072a6 <__ieee754_pow+0x1a6>
 800729c:	4b2f      	ldr	r3, [pc, #188]	; (800735c <__ieee754_pow+0x25c>)
 800729e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d123      	bne.n	80072ee <__ieee754_pow+0x1ee>
 80072a6:	f1b9 0f00 	cmp.w	r9, #0
 80072aa:	da05      	bge.n	80072b8 <__ieee754_pow+0x1b8>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	2000      	movs	r0, #0
 80072b2:	492a      	ldr	r1, [pc, #168]	; (800735c <__ieee754_pow+0x25c>)
 80072b4:	f7f9 fae2 	bl	800087c <__aeabi_ddiv>
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	f6bf af40 	bge.w	800713e <__ieee754_pow+0x3e>
 80072be:	9b04      	ldr	r3, [sp, #16]
 80072c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80072c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80072c8:	4323      	orrs	r3, r4
 80072ca:	d108      	bne.n	80072de <__ieee754_pow+0x1de>
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	4610      	mov	r0, r2
 80072d2:	4619      	mov	r1, r3
 80072d4:	f7f8 fff0 	bl	80002b8 <__aeabi_dsub>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	e78f      	b.n	80071fe <__ieee754_pow+0xfe>
 80072de:	9b04      	ldr	r3, [sp, #16]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	f47f af2c 	bne.w	800713e <__ieee754_pow+0x3e>
 80072e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072ea:	4619      	mov	r1, r3
 80072ec:	e727      	b.n	800713e <__ieee754_pow+0x3e>
 80072ee:	0feb      	lsrs	r3, r5, #31
 80072f0:	3b01      	subs	r3, #1
 80072f2:	9306      	str	r3, [sp, #24]
 80072f4:	9a06      	ldr	r2, [sp, #24]
 80072f6:	9b04      	ldr	r3, [sp, #16]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	d102      	bne.n	8007302 <__ieee754_pow+0x202>
 80072fc:	4632      	mov	r2, r6
 80072fe:	463b      	mov	r3, r7
 8007300:	e7e6      	b.n	80072d0 <__ieee754_pow+0x1d0>
 8007302:	4b19      	ldr	r3, [pc, #100]	; (8007368 <__ieee754_pow+0x268>)
 8007304:	4598      	cmp	r8, r3
 8007306:	f340 80fb 	ble.w	8007500 <__ieee754_pow+0x400>
 800730a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800730e:	4598      	cmp	r8, r3
 8007310:	4b13      	ldr	r3, [pc, #76]	; (8007360 <__ieee754_pow+0x260>)
 8007312:	dd0c      	ble.n	800732e <__ieee754_pow+0x22e>
 8007314:	429c      	cmp	r4, r3
 8007316:	dc0f      	bgt.n	8007338 <__ieee754_pow+0x238>
 8007318:	f1b9 0f00 	cmp.w	r9, #0
 800731c:	da0f      	bge.n	800733e <__ieee754_pow+0x23e>
 800731e:	2000      	movs	r0, #0
 8007320:	b009      	add	sp, #36	; 0x24
 8007322:	ecbd 8b06 	vpop	{d8-d10}
 8007326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732a:	f000 bcf0 	b.w	8007d0e <__math_oflow>
 800732e:	429c      	cmp	r4, r3
 8007330:	dbf2      	blt.n	8007318 <__ieee754_pow+0x218>
 8007332:	4b0a      	ldr	r3, [pc, #40]	; (800735c <__ieee754_pow+0x25c>)
 8007334:	429c      	cmp	r4, r3
 8007336:	dd19      	ble.n	800736c <__ieee754_pow+0x26c>
 8007338:	f1b9 0f00 	cmp.w	r9, #0
 800733c:	dcef      	bgt.n	800731e <__ieee754_pow+0x21e>
 800733e:	2000      	movs	r0, #0
 8007340:	b009      	add	sp, #36	; 0x24
 8007342:	ecbd 8b06 	vpop	{d8-d10}
 8007346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734a:	f000 bcd7 	b.w	8007cfc <__math_uflow>
 800734e:	bf00      	nop
 8007350:	fff00000 	.word	0xfff00000
 8007354:	7ff00000 	.word	0x7ff00000
 8007358:	433fffff 	.word	0x433fffff
 800735c:	3ff00000 	.word	0x3ff00000
 8007360:	3fefffff 	.word	0x3fefffff
 8007364:	3fe00000 	.word	0x3fe00000
 8007368:	41e00000 	.word	0x41e00000
 800736c:	4b60      	ldr	r3, [pc, #384]	; (80074f0 <__ieee754_pow+0x3f0>)
 800736e:	2200      	movs	r2, #0
 8007370:	f7f8 ffa2 	bl	80002b8 <__aeabi_dsub>
 8007374:	a354      	add	r3, pc, #336	; (adr r3, 80074c8 <__ieee754_pow+0x3c8>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	4604      	mov	r4, r0
 800737c:	460d      	mov	r5, r1
 800737e:	f7f9 f953 	bl	8000628 <__aeabi_dmul>
 8007382:	a353      	add	r3, pc, #332	; (adr r3, 80074d0 <__ieee754_pow+0x3d0>)
 8007384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007388:	4606      	mov	r6, r0
 800738a:	460f      	mov	r7, r1
 800738c:	4620      	mov	r0, r4
 800738e:	4629      	mov	r1, r5
 8007390:	f7f9 f94a 	bl	8000628 <__aeabi_dmul>
 8007394:	4b57      	ldr	r3, [pc, #348]	; (80074f4 <__ieee754_pow+0x3f4>)
 8007396:	4682      	mov	sl, r0
 8007398:	468b      	mov	fp, r1
 800739a:	2200      	movs	r2, #0
 800739c:	4620      	mov	r0, r4
 800739e:	4629      	mov	r1, r5
 80073a0:	f7f9 f942 	bl	8000628 <__aeabi_dmul>
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	a14b      	add	r1, pc, #300	; (adr r1, 80074d8 <__ieee754_pow+0x3d8>)
 80073aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073ae:	f7f8 ff83 	bl	80002b8 <__aeabi_dsub>
 80073b2:	4622      	mov	r2, r4
 80073b4:	462b      	mov	r3, r5
 80073b6:	f7f9 f937 	bl	8000628 <__aeabi_dmul>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	2000      	movs	r0, #0
 80073c0:	494d      	ldr	r1, [pc, #308]	; (80074f8 <__ieee754_pow+0x3f8>)
 80073c2:	f7f8 ff79 	bl	80002b8 <__aeabi_dsub>
 80073c6:	4622      	mov	r2, r4
 80073c8:	4680      	mov	r8, r0
 80073ca:	4689      	mov	r9, r1
 80073cc:	462b      	mov	r3, r5
 80073ce:	4620      	mov	r0, r4
 80073d0:	4629      	mov	r1, r5
 80073d2:	f7f9 f929 	bl	8000628 <__aeabi_dmul>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4640      	mov	r0, r8
 80073dc:	4649      	mov	r1, r9
 80073de:	f7f9 f923 	bl	8000628 <__aeabi_dmul>
 80073e2:	a33f      	add	r3, pc, #252	; (adr r3, 80074e0 <__ieee754_pow+0x3e0>)
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	f7f9 f91e 	bl	8000628 <__aeabi_dmul>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4650      	mov	r0, sl
 80073f2:	4659      	mov	r1, fp
 80073f4:	f7f8 ff60 	bl	80002b8 <__aeabi_dsub>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4680      	mov	r8, r0
 80073fe:	4689      	mov	r9, r1
 8007400:	4630      	mov	r0, r6
 8007402:	4639      	mov	r1, r7
 8007404:	f7f8 ff5a 	bl	80002bc <__adddf3>
 8007408:	2000      	movs	r0, #0
 800740a:	4632      	mov	r2, r6
 800740c:	463b      	mov	r3, r7
 800740e:	4604      	mov	r4, r0
 8007410:	460d      	mov	r5, r1
 8007412:	f7f8 ff51 	bl	80002b8 <__aeabi_dsub>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	4640      	mov	r0, r8
 800741c:	4649      	mov	r1, r9
 800741e:	f7f8 ff4b 	bl	80002b8 <__aeabi_dsub>
 8007422:	9b04      	ldr	r3, [sp, #16]
 8007424:	9a06      	ldr	r2, [sp, #24]
 8007426:	3b01      	subs	r3, #1
 8007428:	4313      	orrs	r3, r2
 800742a:	4682      	mov	sl, r0
 800742c:	468b      	mov	fp, r1
 800742e:	f040 81e7 	bne.w	8007800 <__ieee754_pow+0x700>
 8007432:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80074e8 <__ieee754_pow+0x3e8>
 8007436:	eeb0 8a47 	vmov.f32	s16, s14
 800743a:	eef0 8a67 	vmov.f32	s17, s15
 800743e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007442:	2600      	movs	r6, #0
 8007444:	4632      	mov	r2, r6
 8007446:	463b      	mov	r3, r7
 8007448:	e9dd 0100 	ldrd	r0, r1, [sp]
 800744c:	f7f8 ff34 	bl	80002b8 <__aeabi_dsub>
 8007450:	4622      	mov	r2, r4
 8007452:	462b      	mov	r3, r5
 8007454:	f7f9 f8e8 	bl	8000628 <__aeabi_dmul>
 8007458:	e9dd 2300 	ldrd	r2, r3, [sp]
 800745c:	4680      	mov	r8, r0
 800745e:	4689      	mov	r9, r1
 8007460:	4650      	mov	r0, sl
 8007462:	4659      	mov	r1, fp
 8007464:	f7f9 f8e0 	bl	8000628 <__aeabi_dmul>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	4640      	mov	r0, r8
 800746e:	4649      	mov	r1, r9
 8007470:	f7f8 ff24 	bl	80002bc <__adddf3>
 8007474:	4632      	mov	r2, r6
 8007476:	463b      	mov	r3, r7
 8007478:	4680      	mov	r8, r0
 800747a:	4689      	mov	r9, r1
 800747c:	4620      	mov	r0, r4
 800747e:	4629      	mov	r1, r5
 8007480:	f7f9 f8d2 	bl	8000628 <__aeabi_dmul>
 8007484:	460b      	mov	r3, r1
 8007486:	4604      	mov	r4, r0
 8007488:	460d      	mov	r5, r1
 800748a:	4602      	mov	r2, r0
 800748c:	4649      	mov	r1, r9
 800748e:	4640      	mov	r0, r8
 8007490:	f7f8 ff14 	bl	80002bc <__adddf3>
 8007494:	4b19      	ldr	r3, [pc, #100]	; (80074fc <__ieee754_pow+0x3fc>)
 8007496:	4299      	cmp	r1, r3
 8007498:	ec45 4b19 	vmov	d9, r4, r5
 800749c:	4606      	mov	r6, r0
 800749e:	460f      	mov	r7, r1
 80074a0:	468b      	mov	fp, r1
 80074a2:	f340 82f1 	ble.w	8007a88 <__ieee754_pow+0x988>
 80074a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80074aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80074ae:	4303      	orrs	r3, r0
 80074b0:	f000 81e4 	beq.w	800787c <__ieee754_pow+0x77c>
 80074b4:	ec51 0b18 	vmov	r0, r1, d8
 80074b8:	2200      	movs	r2, #0
 80074ba:	2300      	movs	r3, #0
 80074bc:	f7f9 fb26 	bl	8000b0c <__aeabi_dcmplt>
 80074c0:	3800      	subs	r0, #0
 80074c2:	bf18      	it	ne
 80074c4:	2001      	movne	r0, #1
 80074c6:	e72b      	b.n	8007320 <__ieee754_pow+0x220>
 80074c8:	60000000 	.word	0x60000000
 80074cc:	3ff71547 	.word	0x3ff71547
 80074d0:	f85ddf44 	.word	0xf85ddf44
 80074d4:	3e54ae0b 	.word	0x3e54ae0b
 80074d8:	55555555 	.word	0x55555555
 80074dc:	3fd55555 	.word	0x3fd55555
 80074e0:	652b82fe 	.word	0x652b82fe
 80074e4:	3ff71547 	.word	0x3ff71547
 80074e8:	00000000 	.word	0x00000000
 80074ec:	bff00000 	.word	0xbff00000
 80074f0:	3ff00000 	.word	0x3ff00000
 80074f4:	3fd00000 	.word	0x3fd00000
 80074f8:	3fe00000 	.word	0x3fe00000
 80074fc:	408fffff 	.word	0x408fffff
 8007500:	4bd5      	ldr	r3, [pc, #852]	; (8007858 <__ieee754_pow+0x758>)
 8007502:	402b      	ands	r3, r5
 8007504:	2200      	movs	r2, #0
 8007506:	b92b      	cbnz	r3, 8007514 <__ieee754_pow+0x414>
 8007508:	4bd4      	ldr	r3, [pc, #848]	; (800785c <__ieee754_pow+0x75c>)
 800750a:	f7f9 f88d 	bl	8000628 <__aeabi_dmul>
 800750e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007512:	460c      	mov	r4, r1
 8007514:	1523      	asrs	r3, r4, #20
 8007516:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800751a:	4413      	add	r3, r2
 800751c:	9305      	str	r3, [sp, #20]
 800751e:	4bd0      	ldr	r3, [pc, #832]	; (8007860 <__ieee754_pow+0x760>)
 8007520:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007524:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007528:	429c      	cmp	r4, r3
 800752a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800752e:	dd08      	ble.n	8007542 <__ieee754_pow+0x442>
 8007530:	4bcc      	ldr	r3, [pc, #816]	; (8007864 <__ieee754_pow+0x764>)
 8007532:	429c      	cmp	r4, r3
 8007534:	f340 8162 	ble.w	80077fc <__ieee754_pow+0x6fc>
 8007538:	9b05      	ldr	r3, [sp, #20]
 800753a:	3301      	adds	r3, #1
 800753c:	9305      	str	r3, [sp, #20]
 800753e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007542:	2400      	movs	r4, #0
 8007544:	00e3      	lsls	r3, r4, #3
 8007546:	9307      	str	r3, [sp, #28]
 8007548:	4bc7      	ldr	r3, [pc, #796]	; (8007868 <__ieee754_pow+0x768>)
 800754a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800754e:	ed93 7b00 	vldr	d7, [r3]
 8007552:	4629      	mov	r1, r5
 8007554:	ec53 2b17 	vmov	r2, r3, d7
 8007558:	eeb0 9a47 	vmov.f32	s18, s14
 800755c:	eef0 9a67 	vmov.f32	s19, s15
 8007560:	4682      	mov	sl, r0
 8007562:	f7f8 fea9 	bl	80002b8 <__aeabi_dsub>
 8007566:	4652      	mov	r2, sl
 8007568:	4606      	mov	r6, r0
 800756a:	460f      	mov	r7, r1
 800756c:	462b      	mov	r3, r5
 800756e:	ec51 0b19 	vmov	r0, r1, d9
 8007572:	f7f8 fea3 	bl	80002bc <__adddf3>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	2000      	movs	r0, #0
 800757c:	49bb      	ldr	r1, [pc, #748]	; (800786c <__ieee754_pow+0x76c>)
 800757e:	f7f9 f97d 	bl	800087c <__aeabi_ddiv>
 8007582:	ec41 0b1a 	vmov	d10, r0, r1
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4630      	mov	r0, r6
 800758c:	4639      	mov	r1, r7
 800758e:	f7f9 f84b 	bl	8000628 <__aeabi_dmul>
 8007592:	2300      	movs	r3, #0
 8007594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007598:	9302      	str	r3, [sp, #8]
 800759a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800759e:	46ab      	mov	fp, r5
 80075a0:	106d      	asrs	r5, r5, #1
 80075a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80075a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80075aa:	ec41 0b18 	vmov	d8, r0, r1
 80075ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80075b2:	2200      	movs	r2, #0
 80075b4:	4640      	mov	r0, r8
 80075b6:	4649      	mov	r1, r9
 80075b8:	4614      	mov	r4, r2
 80075ba:	461d      	mov	r5, r3
 80075bc:	f7f9 f834 	bl	8000628 <__aeabi_dmul>
 80075c0:	4602      	mov	r2, r0
 80075c2:	460b      	mov	r3, r1
 80075c4:	4630      	mov	r0, r6
 80075c6:	4639      	mov	r1, r7
 80075c8:	f7f8 fe76 	bl	80002b8 <__aeabi_dsub>
 80075cc:	ec53 2b19 	vmov	r2, r3, d9
 80075d0:	4606      	mov	r6, r0
 80075d2:	460f      	mov	r7, r1
 80075d4:	4620      	mov	r0, r4
 80075d6:	4629      	mov	r1, r5
 80075d8:	f7f8 fe6e 	bl	80002b8 <__aeabi_dsub>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4650      	mov	r0, sl
 80075e2:	4659      	mov	r1, fp
 80075e4:	f7f8 fe68 	bl	80002b8 <__aeabi_dsub>
 80075e8:	4642      	mov	r2, r8
 80075ea:	464b      	mov	r3, r9
 80075ec:	f7f9 f81c 	bl	8000628 <__aeabi_dmul>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4630      	mov	r0, r6
 80075f6:	4639      	mov	r1, r7
 80075f8:	f7f8 fe5e 	bl	80002b8 <__aeabi_dsub>
 80075fc:	ec53 2b1a 	vmov	r2, r3, d10
 8007600:	f7f9 f812 	bl	8000628 <__aeabi_dmul>
 8007604:	ec53 2b18 	vmov	r2, r3, d8
 8007608:	ec41 0b19 	vmov	d9, r0, r1
 800760c:	ec51 0b18 	vmov	r0, r1, d8
 8007610:	f7f9 f80a 	bl	8000628 <__aeabi_dmul>
 8007614:	a37c      	add	r3, pc, #496	; (adr r3, 8007808 <__ieee754_pow+0x708>)
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	4604      	mov	r4, r0
 800761c:	460d      	mov	r5, r1
 800761e:	f7f9 f803 	bl	8000628 <__aeabi_dmul>
 8007622:	a37b      	add	r3, pc, #492	; (adr r3, 8007810 <__ieee754_pow+0x710>)
 8007624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007628:	f7f8 fe48 	bl	80002bc <__adddf3>
 800762c:	4622      	mov	r2, r4
 800762e:	462b      	mov	r3, r5
 8007630:	f7f8 fffa 	bl	8000628 <__aeabi_dmul>
 8007634:	a378      	add	r3, pc, #480	; (adr r3, 8007818 <__ieee754_pow+0x718>)
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	f7f8 fe3f 	bl	80002bc <__adddf3>
 800763e:	4622      	mov	r2, r4
 8007640:	462b      	mov	r3, r5
 8007642:	f7f8 fff1 	bl	8000628 <__aeabi_dmul>
 8007646:	a376      	add	r3, pc, #472	; (adr r3, 8007820 <__ieee754_pow+0x720>)
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f7f8 fe36 	bl	80002bc <__adddf3>
 8007650:	4622      	mov	r2, r4
 8007652:	462b      	mov	r3, r5
 8007654:	f7f8 ffe8 	bl	8000628 <__aeabi_dmul>
 8007658:	a373      	add	r3, pc, #460	; (adr r3, 8007828 <__ieee754_pow+0x728>)
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	f7f8 fe2d 	bl	80002bc <__adddf3>
 8007662:	4622      	mov	r2, r4
 8007664:	462b      	mov	r3, r5
 8007666:	f7f8 ffdf 	bl	8000628 <__aeabi_dmul>
 800766a:	a371      	add	r3, pc, #452	; (adr r3, 8007830 <__ieee754_pow+0x730>)
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	f7f8 fe24 	bl	80002bc <__adddf3>
 8007674:	4622      	mov	r2, r4
 8007676:	4606      	mov	r6, r0
 8007678:	460f      	mov	r7, r1
 800767a:	462b      	mov	r3, r5
 800767c:	4620      	mov	r0, r4
 800767e:	4629      	mov	r1, r5
 8007680:	f7f8 ffd2 	bl	8000628 <__aeabi_dmul>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4630      	mov	r0, r6
 800768a:	4639      	mov	r1, r7
 800768c:	f7f8 ffcc 	bl	8000628 <__aeabi_dmul>
 8007690:	4642      	mov	r2, r8
 8007692:	4604      	mov	r4, r0
 8007694:	460d      	mov	r5, r1
 8007696:	464b      	mov	r3, r9
 8007698:	ec51 0b18 	vmov	r0, r1, d8
 800769c:	f7f8 fe0e 	bl	80002bc <__adddf3>
 80076a0:	ec53 2b19 	vmov	r2, r3, d9
 80076a4:	f7f8 ffc0 	bl	8000628 <__aeabi_dmul>
 80076a8:	4622      	mov	r2, r4
 80076aa:	462b      	mov	r3, r5
 80076ac:	f7f8 fe06 	bl	80002bc <__adddf3>
 80076b0:	4642      	mov	r2, r8
 80076b2:	4682      	mov	sl, r0
 80076b4:	468b      	mov	fp, r1
 80076b6:	464b      	mov	r3, r9
 80076b8:	4640      	mov	r0, r8
 80076ba:	4649      	mov	r1, r9
 80076bc:	f7f8 ffb4 	bl	8000628 <__aeabi_dmul>
 80076c0:	4b6b      	ldr	r3, [pc, #428]	; (8007870 <__ieee754_pow+0x770>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	4606      	mov	r6, r0
 80076c6:	460f      	mov	r7, r1
 80076c8:	f7f8 fdf8 	bl	80002bc <__adddf3>
 80076cc:	4652      	mov	r2, sl
 80076ce:	465b      	mov	r3, fp
 80076d0:	f7f8 fdf4 	bl	80002bc <__adddf3>
 80076d4:	2000      	movs	r0, #0
 80076d6:	4604      	mov	r4, r0
 80076d8:	460d      	mov	r5, r1
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4640      	mov	r0, r8
 80076e0:	4649      	mov	r1, r9
 80076e2:	f7f8 ffa1 	bl	8000628 <__aeabi_dmul>
 80076e6:	4b62      	ldr	r3, [pc, #392]	; (8007870 <__ieee754_pow+0x770>)
 80076e8:	4680      	mov	r8, r0
 80076ea:	4689      	mov	r9, r1
 80076ec:	2200      	movs	r2, #0
 80076ee:	4620      	mov	r0, r4
 80076f0:	4629      	mov	r1, r5
 80076f2:	f7f8 fde1 	bl	80002b8 <__aeabi_dsub>
 80076f6:	4632      	mov	r2, r6
 80076f8:	463b      	mov	r3, r7
 80076fa:	f7f8 fddd 	bl	80002b8 <__aeabi_dsub>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	4650      	mov	r0, sl
 8007704:	4659      	mov	r1, fp
 8007706:	f7f8 fdd7 	bl	80002b8 <__aeabi_dsub>
 800770a:	ec53 2b18 	vmov	r2, r3, d8
 800770e:	f7f8 ff8b 	bl	8000628 <__aeabi_dmul>
 8007712:	4622      	mov	r2, r4
 8007714:	4606      	mov	r6, r0
 8007716:	460f      	mov	r7, r1
 8007718:	462b      	mov	r3, r5
 800771a:	ec51 0b19 	vmov	r0, r1, d9
 800771e:	f7f8 ff83 	bl	8000628 <__aeabi_dmul>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4630      	mov	r0, r6
 8007728:	4639      	mov	r1, r7
 800772a:	f7f8 fdc7 	bl	80002bc <__adddf3>
 800772e:	4606      	mov	r6, r0
 8007730:	460f      	mov	r7, r1
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	4640      	mov	r0, r8
 8007738:	4649      	mov	r1, r9
 800773a:	f7f8 fdbf 	bl	80002bc <__adddf3>
 800773e:	a33e      	add	r3, pc, #248	; (adr r3, 8007838 <__ieee754_pow+0x738>)
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	2000      	movs	r0, #0
 8007746:	4604      	mov	r4, r0
 8007748:	460d      	mov	r5, r1
 800774a:	f7f8 ff6d 	bl	8000628 <__aeabi_dmul>
 800774e:	4642      	mov	r2, r8
 8007750:	ec41 0b18 	vmov	d8, r0, r1
 8007754:	464b      	mov	r3, r9
 8007756:	4620      	mov	r0, r4
 8007758:	4629      	mov	r1, r5
 800775a:	f7f8 fdad 	bl	80002b8 <__aeabi_dsub>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	4630      	mov	r0, r6
 8007764:	4639      	mov	r1, r7
 8007766:	f7f8 fda7 	bl	80002b8 <__aeabi_dsub>
 800776a:	a335      	add	r3, pc, #212	; (adr r3, 8007840 <__ieee754_pow+0x740>)
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	f7f8 ff5a 	bl	8000628 <__aeabi_dmul>
 8007774:	a334      	add	r3, pc, #208	; (adr r3, 8007848 <__ieee754_pow+0x748>)
 8007776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777a:	4606      	mov	r6, r0
 800777c:	460f      	mov	r7, r1
 800777e:	4620      	mov	r0, r4
 8007780:	4629      	mov	r1, r5
 8007782:	f7f8 ff51 	bl	8000628 <__aeabi_dmul>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	4630      	mov	r0, r6
 800778c:	4639      	mov	r1, r7
 800778e:	f7f8 fd95 	bl	80002bc <__adddf3>
 8007792:	9a07      	ldr	r2, [sp, #28]
 8007794:	4b37      	ldr	r3, [pc, #220]	; (8007874 <__ieee754_pow+0x774>)
 8007796:	4413      	add	r3, r2
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f7f8 fd8e 	bl	80002bc <__adddf3>
 80077a0:	4682      	mov	sl, r0
 80077a2:	9805      	ldr	r0, [sp, #20]
 80077a4:	468b      	mov	fp, r1
 80077a6:	f7f8 fed5 	bl	8000554 <__aeabi_i2d>
 80077aa:	9a07      	ldr	r2, [sp, #28]
 80077ac:	4b32      	ldr	r3, [pc, #200]	; (8007878 <__ieee754_pow+0x778>)
 80077ae:	4413      	add	r3, r2
 80077b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077b4:	4606      	mov	r6, r0
 80077b6:	460f      	mov	r7, r1
 80077b8:	4652      	mov	r2, sl
 80077ba:	465b      	mov	r3, fp
 80077bc:	ec51 0b18 	vmov	r0, r1, d8
 80077c0:	f7f8 fd7c 	bl	80002bc <__adddf3>
 80077c4:	4642      	mov	r2, r8
 80077c6:	464b      	mov	r3, r9
 80077c8:	f7f8 fd78 	bl	80002bc <__adddf3>
 80077cc:	4632      	mov	r2, r6
 80077ce:	463b      	mov	r3, r7
 80077d0:	f7f8 fd74 	bl	80002bc <__adddf3>
 80077d4:	2000      	movs	r0, #0
 80077d6:	4632      	mov	r2, r6
 80077d8:	463b      	mov	r3, r7
 80077da:	4604      	mov	r4, r0
 80077dc:	460d      	mov	r5, r1
 80077de:	f7f8 fd6b 	bl	80002b8 <__aeabi_dsub>
 80077e2:	4642      	mov	r2, r8
 80077e4:	464b      	mov	r3, r9
 80077e6:	f7f8 fd67 	bl	80002b8 <__aeabi_dsub>
 80077ea:	ec53 2b18 	vmov	r2, r3, d8
 80077ee:	f7f8 fd63 	bl	80002b8 <__aeabi_dsub>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	4650      	mov	r0, sl
 80077f8:	4659      	mov	r1, fp
 80077fa:	e610      	b.n	800741e <__ieee754_pow+0x31e>
 80077fc:	2401      	movs	r4, #1
 80077fe:	e6a1      	b.n	8007544 <__ieee754_pow+0x444>
 8007800:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007850 <__ieee754_pow+0x750>
 8007804:	e617      	b.n	8007436 <__ieee754_pow+0x336>
 8007806:	bf00      	nop
 8007808:	4a454eef 	.word	0x4a454eef
 800780c:	3fca7e28 	.word	0x3fca7e28
 8007810:	93c9db65 	.word	0x93c9db65
 8007814:	3fcd864a 	.word	0x3fcd864a
 8007818:	a91d4101 	.word	0xa91d4101
 800781c:	3fd17460 	.word	0x3fd17460
 8007820:	518f264d 	.word	0x518f264d
 8007824:	3fd55555 	.word	0x3fd55555
 8007828:	db6fabff 	.word	0xdb6fabff
 800782c:	3fdb6db6 	.word	0x3fdb6db6
 8007830:	33333303 	.word	0x33333303
 8007834:	3fe33333 	.word	0x3fe33333
 8007838:	e0000000 	.word	0xe0000000
 800783c:	3feec709 	.word	0x3feec709
 8007840:	dc3a03fd 	.word	0xdc3a03fd
 8007844:	3feec709 	.word	0x3feec709
 8007848:	145b01f5 	.word	0x145b01f5
 800784c:	be3e2fe0 	.word	0xbe3e2fe0
 8007850:	00000000 	.word	0x00000000
 8007854:	3ff00000 	.word	0x3ff00000
 8007858:	7ff00000 	.word	0x7ff00000
 800785c:	43400000 	.word	0x43400000
 8007860:	0003988e 	.word	0x0003988e
 8007864:	000bb679 	.word	0x000bb679
 8007868:	08008398 	.word	0x08008398
 800786c:	3ff00000 	.word	0x3ff00000
 8007870:	40080000 	.word	0x40080000
 8007874:	080083b8 	.word	0x080083b8
 8007878:	080083a8 	.word	0x080083a8
 800787c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007b54 <__ieee754_pow+0xa54>)
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	4640      	mov	r0, r8
 8007884:	4649      	mov	r1, r9
 8007886:	f7f8 fd19 	bl	80002bc <__adddf3>
 800788a:	4622      	mov	r2, r4
 800788c:	ec41 0b1a 	vmov	d10, r0, r1
 8007890:	462b      	mov	r3, r5
 8007892:	4630      	mov	r0, r6
 8007894:	4639      	mov	r1, r7
 8007896:	f7f8 fd0f 	bl	80002b8 <__aeabi_dsub>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	ec51 0b1a 	vmov	r0, r1, d10
 80078a2:	f7f9 f951 	bl	8000b48 <__aeabi_dcmpgt>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f47f ae04 	bne.w	80074b4 <__ieee754_pow+0x3b4>
 80078ac:	4aa4      	ldr	r2, [pc, #656]	; (8007b40 <__ieee754_pow+0xa40>)
 80078ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078b2:	4293      	cmp	r3, r2
 80078b4:	f340 8108 	ble.w	8007ac8 <__ieee754_pow+0x9c8>
 80078b8:	151b      	asrs	r3, r3, #20
 80078ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80078be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80078c2:	fa4a f303 	asr.w	r3, sl, r3
 80078c6:	445b      	add	r3, fp
 80078c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80078cc:	4e9d      	ldr	r6, [pc, #628]	; (8007b44 <__ieee754_pow+0xa44>)
 80078ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80078d2:	4116      	asrs	r6, r2
 80078d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80078d8:	2000      	movs	r0, #0
 80078da:	ea23 0106 	bic.w	r1, r3, r6
 80078de:	f1c2 0214 	rsb	r2, r2, #20
 80078e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80078e6:	fa4a fa02 	asr.w	sl, sl, r2
 80078ea:	f1bb 0f00 	cmp.w	fp, #0
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4620      	mov	r0, r4
 80078f4:	4629      	mov	r1, r5
 80078f6:	bfb8      	it	lt
 80078f8:	f1ca 0a00 	rsblt	sl, sl, #0
 80078fc:	f7f8 fcdc 	bl	80002b8 <__aeabi_dsub>
 8007900:	ec41 0b19 	vmov	d9, r0, r1
 8007904:	4642      	mov	r2, r8
 8007906:	464b      	mov	r3, r9
 8007908:	ec51 0b19 	vmov	r0, r1, d9
 800790c:	f7f8 fcd6 	bl	80002bc <__adddf3>
 8007910:	a37b      	add	r3, pc, #492	; (adr r3, 8007b00 <__ieee754_pow+0xa00>)
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	2000      	movs	r0, #0
 8007918:	4604      	mov	r4, r0
 800791a:	460d      	mov	r5, r1
 800791c:	f7f8 fe84 	bl	8000628 <__aeabi_dmul>
 8007920:	ec53 2b19 	vmov	r2, r3, d9
 8007924:	4606      	mov	r6, r0
 8007926:	460f      	mov	r7, r1
 8007928:	4620      	mov	r0, r4
 800792a:	4629      	mov	r1, r5
 800792c:	f7f8 fcc4 	bl	80002b8 <__aeabi_dsub>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4640      	mov	r0, r8
 8007936:	4649      	mov	r1, r9
 8007938:	f7f8 fcbe 	bl	80002b8 <__aeabi_dsub>
 800793c:	a372      	add	r3, pc, #456	; (adr r3, 8007b08 <__ieee754_pow+0xa08>)
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	f7f8 fe71 	bl	8000628 <__aeabi_dmul>
 8007946:	a372      	add	r3, pc, #456	; (adr r3, 8007b10 <__ieee754_pow+0xa10>)
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	4680      	mov	r8, r0
 800794e:	4689      	mov	r9, r1
 8007950:	4620      	mov	r0, r4
 8007952:	4629      	mov	r1, r5
 8007954:	f7f8 fe68 	bl	8000628 <__aeabi_dmul>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4640      	mov	r0, r8
 800795e:	4649      	mov	r1, r9
 8007960:	f7f8 fcac 	bl	80002bc <__adddf3>
 8007964:	4604      	mov	r4, r0
 8007966:	460d      	mov	r5, r1
 8007968:	4602      	mov	r2, r0
 800796a:	460b      	mov	r3, r1
 800796c:	4630      	mov	r0, r6
 800796e:	4639      	mov	r1, r7
 8007970:	f7f8 fca4 	bl	80002bc <__adddf3>
 8007974:	4632      	mov	r2, r6
 8007976:	463b      	mov	r3, r7
 8007978:	4680      	mov	r8, r0
 800797a:	4689      	mov	r9, r1
 800797c:	f7f8 fc9c 	bl	80002b8 <__aeabi_dsub>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	4620      	mov	r0, r4
 8007986:	4629      	mov	r1, r5
 8007988:	f7f8 fc96 	bl	80002b8 <__aeabi_dsub>
 800798c:	4642      	mov	r2, r8
 800798e:	4606      	mov	r6, r0
 8007990:	460f      	mov	r7, r1
 8007992:	464b      	mov	r3, r9
 8007994:	4640      	mov	r0, r8
 8007996:	4649      	mov	r1, r9
 8007998:	f7f8 fe46 	bl	8000628 <__aeabi_dmul>
 800799c:	a35e      	add	r3, pc, #376	; (adr r3, 8007b18 <__ieee754_pow+0xa18>)
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	4604      	mov	r4, r0
 80079a4:	460d      	mov	r5, r1
 80079a6:	f7f8 fe3f 	bl	8000628 <__aeabi_dmul>
 80079aa:	a35d      	add	r3, pc, #372	; (adr r3, 8007b20 <__ieee754_pow+0xa20>)
 80079ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b0:	f7f8 fc82 	bl	80002b8 <__aeabi_dsub>
 80079b4:	4622      	mov	r2, r4
 80079b6:	462b      	mov	r3, r5
 80079b8:	f7f8 fe36 	bl	8000628 <__aeabi_dmul>
 80079bc:	a35a      	add	r3, pc, #360	; (adr r3, 8007b28 <__ieee754_pow+0xa28>)
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	f7f8 fc7b 	bl	80002bc <__adddf3>
 80079c6:	4622      	mov	r2, r4
 80079c8:	462b      	mov	r3, r5
 80079ca:	f7f8 fe2d 	bl	8000628 <__aeabi_dmul>
 80079ce:	a358      	add	r3, pc, #352	; (adr r3, 8007b30 <__ieee754_pow+0xa30>)
 80079d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d4:	f7f8 fc70 	bl	80002b8 <__aeabi_dsub>
 80079d8:	4622      	mov	r2, r4
 80079da:	462b      	mov	r3, r5
 80079dc:	f7f8 fe24 	bl	8000628 <__aeabi_dmul>
 80079e0:	a355      	add	r3, pc, #340	; (adr r3, 8007b38 <__ieee754_pow+0xa38>)
 80079e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e6:	f7f8 fc69 	bl	80002bc <__adddf3>
 80079ea:	4622      	mov	r2, r4
 80079ec:	462b      	mov	r3, r5
 80079ee:	f7f8 fe1b 	bl	8000628 <__aeabi_dmul>
 80079f2:	4602      	mov	r2, r0
 80079f4:	460b      	mov	r3, r1
 80079f6:	4640      	mov	r0, r8
 80079f8:	4649      	mov	r1, r9
 80079fa:	f7f8 fc5d 	bl	80002b8 <__aeabi_dsub>
 80079fe:	4604      	mov	r4, r0
 8007a00:	460d      	mov	r5, r1
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	4640      	mov	r0, r8
 8007a08:	4649      	mov	r1, r9
 8007a0a:	f7f8 fe0d 	bl	8000628 <__aeabi_dmul>
 8007a0e:	2200      	movs	r2, #0
 8007a10:	ec41 0b19 	vmov	d9, r0, r1
 8007a14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a18:	4620      	mov	r0, r4
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	f7f8 fc4c 	bl	80002b8 <__aeabi_dsub>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	ec51 0b19 	vmov	r0, r1, d9
 8007a28:	f7f8 ff28 	bl	800087c <__aeabi_ddiv>
 8007a2c:	4632      	mov	r2, r6
 8007a2e:	4604      	mov	r4, r0
 8007a30:	460d      	mov	r5, r1
 8007a32:	463b      	mov	r3, r7
 8007a34:	4640      	mov	r0, r8
 8007a36:	4649      	mov	r1, r9
 8007a38:	f7f8 fdf6 	bl	8000628 <__aeabi_dmul>
 8007a3c:	4632      	mov	r2, r6
 8007a3e:	463b      	mov	r3, r7
 8007a40:	f7f8 fc3c 	bl	80002bc <__adddf3>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	4620      	mov	r0, r4
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	f7f8 fc34 	bl	80002b8 <__aeabi_dsub>
 8007a50:	4642      	mov	r2, r8
 8007a52:	464b      	mov	r3, r9
 8007a54:	f7f8 fc30 	bl	80002b8 <__aeabi_dsub>
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	493a      	ldr	r1, [pc, #232]	; (8007b48 <__ieee754_pow+0xa48>)
 8007a5e:	2000      	movs	r0, #0
 8007a60:	f7f8 fc2a 	bl	80002b8 <__aeabi_dsub>
 8007a64:	ec41 0b10 	vmov	d0, r0, r1
 8007a68:	ee10 3a90 	vmov	r3, s1
 8007a6c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a74:	da2b      	bge.n	8007ace <__ieee754_pow+0x9ce>
 8007a76:	4650      	mov	r0, sl
 8007a78:	f000 f966 	bl	8007d48 <scalbn>
 8007a7c:	ec51 0b10 	vmov	r0, r1, d0
 8007a80:	ec53 2b18 	vmov	r2, r3, d8
 8007a84:	f7ff bbed 	b.w	8007262 <__ieee754_pow+0x162>
 8007a88:	4b30      	ldr	r3, [pc, #192]	; (8007b4c <__ieee754_pow+0xa4c>)
 8007a8a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007a8e:	429e      	cmp	r6, r3
 8007a90:	f77f af0c 	ble.w	80078ac <__ieee754_pow+0x7ac>
 8007a94:	4b2e      	ldr	r3, [pc, #184]	; (8007b50 <__ieee754_pow+0xa50>)
 8007a96:	440b      	add	r3, r1
 8007a98:	4303      	orrs	r3, r0
 8007a9a:	d009      	beq.n	8007ab0 <__ieee754_pow+0x9b0>
 8007a9c:	ec51 0b18 	vmov	r0, r1, d8
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f7f9 f832 	bl	8000b0c <__aeabi_dcmplt>
 8007aa8:	3800      	subs	r0, #0
 8007aaa:	bf18      	it	ne
 8007aac:	2001      	movne	r0, #1
 8007aae:	e447      	b.n	8007340 <__ieee754_pow+0x240>
 8007ab0:	4622      	mov	r2, r4
 8007ab2:	462b      	mov	r3, r5
 8007ab4:	f7f8 fc00 	bl	80002b8 <__aeabi_dsub>
 8007ab8:	4642      	mov	r2, r8
 8007aba:	464b      	mov	r3, r9
 8007abc:	f7f9 f83a 	bl	8000b34 <__aeabi_dcmpge>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	f43f aef3 	beq.w	80078ac <__ieee754_pow+0x7ac>
 8007ac6:	e7e9      	b.n	8007a9c <__ieee754_pow+0x99c>
 8007ac8:	f04f 0a00 	mov.w	sl, #0
 8007acc:	e71a      	b.n	8007904 <__ieee754_pow+0x804>
 8007ace:	ec51 0b10 	vmov	r0, r1, d0
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	e7d4      	b.n	8007a80 <__ieee754_pow+0x980>
 8007ad6:	491c      	ldr	r1, [pc, #112]	; (8007b48 <__ieee754_pow+0xa48>)
 8007ad8:	2000      	movs	r0, #0
 8007ada:	f7ff bb30 	b.w	800713e <__ieee754_pow+0x3e>
 8007ade:	2000      	movs	r0, #0
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	f7ff bb2c 	b.w	800713e <__ieee754_pow+0x3e>
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	4639      	mov	r1, r7
 8007aea:	f7ff bb28 	b.w	800713e <__ieee754_pow+0x3e>
 8007aee:	9204      	str	r2, [sp, #16]
 8007af0:	f7ff bb7a 	b.w	80071e8 <__ieee754_pow+0xe8>
 8007af4:	2300      	movs	r3, #0
 8007af6:	f7ff bb64 	b.w	80071c2 <__ieee754_pow+0xc2>
 8007afa:	bf00      	nop
 8007afc:	f3af 8000 	nop.w
 8007b00:	00000000 	.word	0x00000000
 8007b04:	3fe62e43 	.word	0x3fe62e43
 8007b08:	fefa39ef 	.word	0xfefa39ef
 8007b0c:	3fe62e42 	.word	0x3fe62e42
 8007b10:	0ca86c39 	.word	0x0ca86c39
 8007b14:	be205c61 	.word	0xbe205c61
 8007b18:	72bea4d0 	.word	0x72bea4d0
 8007b1c:	3e663769 	.word	0x3e663769
 8007b20:	c5d26bf1 	.word	0xc5d26bf1
 8007b24:	3ebbbd41 	.word	0x3ebbbd41
 8007b28:	af25de2c 	.word	0xaf25de2c
 8007b2c:	3f11566a 	.word	0x3f11566a
 8007b30:	16bebd93 	.word	0x16bebd93
 8007b34:	3f66c16c 	.word	0x3f66c16c
 8007b38:	5555553e 	.word	0x5555553e
 8007b3c:	3fc55555 	.word	0x3fc55555
 8007b40:	3fe00000 	.word	0x3fe00000
 8007b44:	000fffff 	.word	0x000fffff
 8007b48:	3ff00000 	.word	0x3ff00000
 8007b4c:	4090cbff 	.word	0x4090cbff
 8007b50:	3f6f3400 	.word	0x3f6f3400
 8007b54:	652b82fe 	.word	0x652b82fe
 8007b58:	3c971547 	.word	0x3c971547

08007b5c <__ieee754_sqrt>:
 8007b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b60:	ec55 4b10 	vmov	r4, r5, d0
 8007b64:	4e55      	ldr	r6, [pc, #340]	; (8007cbc <__ieee754_sqrt+0x160>)
 8007b66:	43ae      	bics	r6, r5
 8007b68:	ee10 0a10 	vmov	r0, s0
 8007b6c:	ee10 3a10 	vmov	r3, s0
 8007b70:	462a      	mov	r2, r5
 8007b72:	4629      	mov	r1, r5
 8007b74:	d110      	bne.n	8007b98 <__ieee754_sqrt+0x3c>
 8007b76:	ee10 2a10 	vmov	r2, s0
 8007b7a:	462b      	mov	r3, r5
 8007b7c:	f7f8 fd54 	bl	8000628 <__aeabi_dmul>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4620      	mov	r0, r4
 8007b86:	4629      	mov	r1, r5
 8007b88:	f7f8 fb98 	bl	80002bc <__adddf3>
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	ec45 4b10 	vmov	d0, r4, r5
 8007b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b98:	2d00      	cmp	r5, #0
 8007b9a:	dc10      	bgt.n	8007bbe <__ieee754_sqrt+0x62>
 8007b9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007ba0:	4330      	orrs	r0, r6
 8007ba2:	d0f5      	beq.n	8007b90 <__ieee754_sqrt+0x34>
 8007ba4:	b15d      	cbz	r5, 8007bbe <__ieee754_sqrt+0x62>
 8007ba6:	ee10 2a10 	vmov	r2, s0
 8007baa:	462b      	mov	r3, r5
 8007bac:	ee10 0a10 	vmov	r0, s0
 8007bb0:	f7f8 fb82 	bl	80002b8 <__aeabi_dsub>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	f7f8 fe60 	bl	800087c <__aeabi_ddiv>
 8007bbc:	e7e6      	b.n	8007b8c <__ieee754_sqrt+0x30>
 8007bbe:	1512      	asrs	r2, r2, #20
 8007bc0:	d074      	beq.n	8007cac <__ieee754_sqrt+0x150>
 8007bc2:	07d4      	lsls	r4, r2, #31
 8007bc4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007bc8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007bcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007bd0:	bf5e      	ittt	pl
 8007bd2:	0fda      	lsrpl	r2, r3, #31
 8007bd4:	005b      	lslpl	r3, r3, #1
 8007bd6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007bda:	2400      	movs	r4, #0
 8007bdc:	0fda      	lsrs	r2, r3, #31
 8007bde:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007be2:	107f      	asrs	r7, r7, #1
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	2516      	movs	r5, #22
 8007be8:	4620      	mov	r0, r4
 8007bea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007bee:	1886      	adds	r6, r0, r2
 8007bf0:	428e      	cmp	r6, r1
 8007bf2:	bfde      	ittt	le
 8007bf4:	1b89      	suble	r1, r1, r6
 8007bf6:	18b0      	addle	r0, r6, r2
 8007bf8:	18a4      	addle	r4, r4, r2
 8007bfa:	0049      	lsls	r1, r1, #1
 8007bfc:	3d01      	subs	r5, #1
 8007bfe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007c02:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007c06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c0a:	d1f0      	bne.n	8007bee <__ieee754_sqrt+0x92>
 8007c0c:	462a      	mov	r2, r5
 8007c0e:	f04f 0e20 	mov.w	lr, #32
 8007c12:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007c16:	4281      	cmp	r1, r0
 8007c18:	eb06 0c05 	add.w	ip, r6, r5
 8007c1c:	dc02      	bgt.n	8007c24 <__ieee754_sqrt+0xc8>
 8007c1e:	d113      	bne.n	8007c48 <__ieee754_sqrt+0xec>
 8007c20:	459c      	cmp	ip, r3
 8007c22:	d811      	bhi.n	8007c48 <__ieee754_sqrt+0xec>
 8007c24:	f1bc 0f00 	cmp.w	ip, #0
 8007c28:	eb0c 0506 	add.w	r5, ip, r6
 8007c2c:	da43      	bge.n	8007cb6 <__ieee754_sqrt+0x15a>
 8007c2e:	2d00      	cmp	r5, #0
 8007c30:	db41      	blt.n	8007cb6 <__ieee754_sqrt+0x15a>
 8007c32:	f100 0801 	add.w	r8, r0, #1
 8007c36:	1a09      	subs	r1, r1, r0
 8007c38:	459c      	cmp	ip, r3
 8007c3a:	bf88      	it	hi
 8007c3c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8007c40:	eba3 030c 	sub.w	r3, r3, ip
 8007c44:	4432      	add	r2, r6
 8007c46:	4640      	mov	r0, r8
 8007c48:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007c4c:	f1be 0e01 	subs.w	lr, lr, #1
 8007c50:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007c5c:	d1db      	bne.n	8007c16 <__ieee754_sqrt+0xba>
 8007c5e:	430b      	orrs	r3, r1
 8007c60:	d006      	beq.n	8007c70 <__ieee754_sqrt+0x114>
 8007c62:	1c50      	adds	r0, r2, #1
 8007c64:	bf13      	iteet	ne
 8007c66:	3201      	addne	r2, #1
 8007c68:	3401      	addeq	r4, #1
 8007c6a:	4672      	moveq	r2, lr
 8007c6c:	f022 0201 	bicne.w	r2, r2, #1
 8007c70:	1063      	asrs	r3, r4, #1
 8007c72:	0852      	lsrs	r2, r2, #1
 8007c74:	07e1      	lsls	r1, r4, #31
 8007c76:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007c7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007c7e:	bf48      	it	mi
 8007c80:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007c84:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007c88:	4614      	mov	r4, r2
 8007c8a:	e781      	b.n	8007b90 <__ieee754_sqrt+0x34>
 8007c8c:	0ad9      	lsrs	r1, r3, #11
 8007c8e:	3815      	subs	r0, #21
 8007c90:	055b      	lsls	r3, r3, #21
 8007c92:	2900      	cmp	r1, #0
 8007c94:	d0fa      	beq.n	8007c8c <__ieee754_sqrt+0x130>
 8007c96:	02cd      	lsls	r5, r1, #11
 8007c98:	d50a      	bpl.n	8007cb0 <__ieee754_sqrt+0x154>
 8007c9a:	f1c2 0420 	rsb	r4, r2, #32
 8007c9e:	fa23 f404 	lsr.w	r4, r3, r4
 8007ca2:	1e55      	subs	r5, r2, #1
 8007ca4:	4093      	lsls	r3, r2
 8007ca6:	4321      	orrs	r1, r4
 8007ca8:	1b42      	subs	r2, r0, r5
 8007caa:	e78a      	b.n	8007bc2 <__ieee754_sqrt+0x66>
 8007cac:	4610      	mov	r0, r2
 8007cae:	e7f0      	b.n	8007c92 <__ieee754_sqrt+0x136>
 8007cb0:	0049      	lsls	r1, r1, #1
 8007cb2:	3201      	adds	r2, #1
 8007cb4:	e7ef      	b.n	8007c96 <__ieee754_sqrt+0x13a>
 8007cb6:	4680      	mov	r8, r0
 8007cb8:	e7bd      	b.n	8007c36 <__ieee754_sqrt+0xda>
 8007cba:	bf00      	nop
 8007cbc:	7ff00000 	.word	0x7ff00000

08007cc0 <with_errno>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	460d      	mov	r5, r1
 8007cc6:	4616      	mov	r6, r2
 8007cc8:	f7fb ff0e 	bl	8003ae8 <__errno>
 8007ccc:	4629      	mov	r1, r5
 8007cce:	6006      	str	r6, [r0, #0]
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}

08007cd4 <xflow>:
 8007cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cd6:	4614      	mov	r4, r2
 8007cd8:	461d      	mov	r5, r3
 8007cda:	b108      	cbz	r0, 8007ce0 <xflow+0xc>
 8007cdc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007ce0:	e9cd 2300 	strd	r2, r3, [sp]
 8007ce4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ce8:	4620      	mov	r0, r4
 8007cea:	4629      	mov	r1, r5
 8007cec:	f7f8 fc9c 	bl	8000628 <__aeabi_dmul>
 8007cf0:	2222      	movs	r2, #34	; 0x22
 8007cf2:	b003      	add	sp, #12
 8007cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cf8:	f7ff bfe2 	b.w	8007cc0 <with_errno>

08007cfc <__math_uflow>:
 8007cfc:	b508      	push	{r3, lr}
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d04:	f7ff ffe6 	bl	8007cd4 <xflow>
 8007d08:	ec41 0b10 	vmov	d0, r0, r1
 8007d0c:	bd08      	pop	{r3, pc}

08007d0e <__math_oflow>:
 8007d0e:	b508      	push	{r3, lr}
 8007d10:	2200      	movs	r2, #0
 8007d12:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007d16:	f7ff ffdd 	bl	8007cd4 <xflow>
 8007d1a:	ec41 0b10 	vmov	d0, r0, r1
 8007d1e:	bd08      	pop	{r3, pc}

08007d20 <fabs>:
 8007d20:	ec51 0b10 	vmov	r0, r1, d0
 8007d24:	ee10 2a10 	vmov	r2, s0
 8007d28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d2c:	ec43 2b10 	vmov	d0, r2, r3
 8007d30:	4770      	bx	lr

08007d32 <finite>:
 8007d32:	b082      	sub	sp, #8
 8007d34:	ed8d 0b00 	vstr	d0, [sp]
 8007d38:	9801      	ldr	r0, [sp, #4]
 8007d3a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007d3e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007d42:	0fc0      	lsrs	r0, r0, #31
 8007d44:	b002      	add	sp, #8
 8007d46:	4770      	bx	lr

08007d48 <scalbn>:
 8007d48:	b570      	push	{r4, r5, r6, lr}
 8007d4a:	ec55 4b10 	vmov	r4, r5, d0
 8007d4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007d52:	4606      	mov	r6, r0
 8007d54:	462b      	mov	r3, r5
 8007d56:	b99a      	cbnz	r2, 8007d80 <scalbn+0x38>
 8007d58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007d5c:	4323      	orrs	r3, r4
 8007d5e:	d036      	beq.n	8007dce <scalbn+0x86>
 8007d60:	4b39      	ldr	r3, [pc, #228]	; (8007e48 <scalbn+0x100>)
 8007d62:	4629      	mov	r1, r5
 8007d64:	ee10 0a10 	vmov	r0, s0
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f7f8 fc5d 	bl	8000628 <__aeabi_dmul>
 8007d6e:	4b37      	ldr	r3, [pc, #220]	; (8007e4c <scalbn+0x104>)
 8007d70:	429e      	cmp	r6, r3
 8007d72:	4604      	mov	r4, r0
 8007d74:	460d      	mov	r5, r1
 8007d76:	da10      	bge.n	8007d9a <scalbn+0x52>
 8007d78:	a32b      	add	r3, pc, #172	; (adr r3, 8007e28 <scalbn+0xe0>)
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	e03a      	b.n	8007df6 <scalbn+0xae>
 8007d80:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007d84:	428a      	cmp	r2, r1
 8007d86:	d10c      	bne.n	8007da2 <scalbn+0x5a>
 8007d88:	ee10 2a10 	vmov	r2, s0
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	4629      	mov	r1, r5
 8007d90:	f7f8 fa94 	bl	80002bc <__adddf3>
 8007d94:	4604      	mov	r4, r0
 8007d96:	460d      	mov	r5, r1
 8007d98:	e019      	b.n	8007dce <scalbn+0x86>
 8007d9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007d9e:	460b      	mov	r3, r1
 8007da0:	3a36      	subs	r2, #54	; 0x36
 8007da2:	4432      	add	r2, r6
 8007da4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007da8:	428a      	cmp	r2, r1
 8007daa:	dd08      	ble.n	8007dbe <scalbn+0x76>
 8007dac:	2d00      	cmp	r5, #0
 8007dae:	a120      	add	r1, pc, #128	; (adr r1, 8007e30 <scalbn+0xe8>)
 8007db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007db4:	da1c      	bge.n	8007df0 <scalbn+0xa8>
 8007db6:	a120      	add	r1, pc, #128	; (adr r1, 8007e38 <scalbn+0xf0>)
 8007db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dbc:	e018      	b.n	8007df0 <scalbn+0xa8>
 8007dbe:	2a00      	cmp	r2, #0
 8007dc0:	dd08      	ble.n	8007dd4 <scalbn+0x8c>
 8007dc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007dc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007dca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007dce:	ec45 4b10 	vmov	d0, r4, r5
 8007dd2:	bd70      	pop	{r4, r5, r6, pc}
 8007dd4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007dd8:	da19      	bge.n	8007e0e <scalbn+0xc6>
 8007dda:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007dde:	429e      	cmp	r6, r3
 8007de0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007de4:	dd0a      	ble.n	8007dfc <scalbn+0xb4>
 8007de6:	a112      	add	r1, pc, #72	; (adr r1, 8007e30 <scalbn+0xe8>)
 8007de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e2      	bne.n	8007db6 <scalbn+0x6e>
 8007df0:	a30f      	add	r3, pc, #60	; (adr r3, 8007e30 <scalbn+0xe8>)
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	f7f8 fc17 	bl	8000628 <__aeabi_dmul>
 8007dfa:	e7cb      	b.n	8007d94 <scalbn+0x4c>
 8007dfc:	a10a      	add	r1, pc, #40	; (adr r1, 8007e28 <scalbn+0xe0>)
 8007dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0b8      	beq.n	8007d78 <scalbn+0x30>
 8007e06:	a10e      	add	r1, pc, #56	; (adr r1, 8007e40 <scalbn+0xf8>)
 8007e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e0c:	e7b4      	b.n	8007d78 <scalbn+0x30>
 8007e0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e12:	3236      	adds	r2, #54	; 0x36
 8007e14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	4b0c      	ldr	r3, [pc, #48]	; (8007e50 <scalbn+0x108>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	e7e8      	b.n	8007df6 <scalbn+0xae>
 8007e24:	f3af 8000 	nop.w
 8007e28:	c2f8f359 	.word	0xc2f8f359
 8007e2c:	01a56e1f 	.word	0x01a56e1f
 8007e30:	8800759c 	.word	0x8800759c
 8007e34:	7e37e43c 	.word	0x7e37e43c
 8007e38:	8800759c 	.word	0x8800759c
 8007e3c:	fe37e43c 	.word	0xfe37e43c
 8007e40:	c2f8f359 	.word	0xc2f8f359
 8007e44:	81a56e1f 	.word	0x81a56e1f
 8007e48:	43500000 	.word	0x43500000
 8007e4c:	ffff3cb0 	.word	0xffff3cb0
 8007e50:	3c900000 	.word	0x3c900000

08007e54 <_sbrk>:
 8007e54:	4a04      	ldr	r2, [pc, #16]	; (8007e68 <_sbrk+0x14>)
 8007e56:	6811      	ldr	r1, [r2, #0]
 8007e58:	4603      	mov	r3, r0
 8007e5a:	b909      	cbnz	r1, 8007e60 <_sbrk+0xc>
 8007e5c:	4903      	ldr	r1, [pc, #12]	; (8007e6c <_sbrk+0x18>)
 8007e5e:	6011      	str	r1, [r2, #0]
 8007e60:	6810      	ldr	r0, [r2, #0]
 8007e62:	4403      	add	r3, r0
 8007e64:	6013      	str	r3, [r2, #0]
 8007e66:	4770      	bx	lr
 8007e68:	20000eb4 	.word	0x20000eb4
 8007e6c:	20000eb8 	.word	0x20000eb8

08007e70 <_init>:
 8007e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e72:	bf00      	nop
 8007e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e76:	bc08      	pop	{r3}
 8007e78:	469e      	mov	lr, r3
 8007e7a:	4770      	bx	lr

08007e7c <_fini>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	bf00      	nop
 8007e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e82:	bc08      	pop	{r3}
 8007e84:	469e      	mov	lr, r3
 8007e86:	4770      	bx	lr
