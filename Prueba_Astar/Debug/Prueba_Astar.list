
Prueba_Astar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  08008da0  08008da0  00018da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094d8  080094d8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080094d8  080094d8  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094d8  080094d8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094d8  080094d8  000194d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094dc  080094dc  000194dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080094e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a8  200001d8  080096b8  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a80  080096b8  00020a80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000048b7  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dfc  00000000  00000000  00024abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e0  00000000  00000000  000258c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000380  00000000  00000000  00025ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011767  00000000  00000000  00026020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000053ab  00000000  00000000  00037787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006023a  00000000  00000000  0003cb32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009cd6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002618  00000000  00000000  0009cdbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d88 	.word	0x08008d88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08008d88 	.word	0x08008d88

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <main>:
const char* msg_NotWorking = "\n--------Astar isn't working properly----------\n";
const char* msg_InsertGrid = "\n------------Insert the char grid--------------\n";


int main(void)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000c7e:	4b71      	ldr	r3, [pc, #452]	; (8000e44 <main+0x1cc>)
 8000c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c84:	4a6f      	ldr	r2, [pc, #444]	; (8000e44 <main+0x1cc>)
 8000c86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	inSystem ();
 8000c8e:	f000 f903 	bl	8000e98 <inSystem>


    /* Loop forever */
	while(1){

		if (!flagAstar){
 8000c92:	4b6d      	ldr	r3, [pc, #436]	; (8000e48 <main+0x1d0>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d13f      	bne.n	8000d1a <main+0xa2>

			if (rxData != '\0'){
 8000c9a:	4b6c      	ldr	r3, [pc, #432]	; (8000e4c <main+0x1d4>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d030      	beq.n	8000d04 <main+0x8c>
				bufferReception[counterReception] = rxData;
 8000ca2:	4b6b      	ldr	r3, [pc, #428]	; (8000e50 <main+0x1d8>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b68      	ldr	r3, [pc, #416]	; (8000e4c <main+0x1d4>)
 8000caa:	7819      	ldrb	r1, [r3, #0]
 8000cac:	4b69      	ldr	r3, [pc, #420]	; (8000e54 <main+0x1dc>)
 8000cae:	5499      	strb	r1, [r3, r2]
				counterReception++;
 8000cb0:	4b67      	ldr	r3, [pc, #412]	; (8000e50 <main+0x1d8>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	4b65      	ldr	r3, [pc, #404]	; (8000e50 <main+0x1d8>)
 8000cba:	701a      	strb	r2, [r3, #0]

				if (rxData == '@'){
 8000cbc:	4b63      	ldr	r3, [pc, #396]	; (8000e4c <main+0x1d4>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b40      	cmp	r3, #64	; 0x40
 8000cc2:	d10c      	bne.n	8000cde <main+0x66>
					doneTransaction = SET;
 8000cc4:	4b64      	ldr	r3, [pc, #400]	; (8000e58 <main+0x1e0>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]

					bufferReception[counterReception-1] = '\0';
 8000cca:	4b61      	ldr	r3, [pc, #388]	; (8000e50 <main+0x1d8>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	4a60      	ldr	r2, [pc, #384]	; (8000e54 <main+0x1dc>)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	54d1      	strb	r1, [r2, r3]

					counterReception = 0;
 8000cd6:	4b5e      	ldr	r3, [pc, #376]	; (8000e50 <main+0x1d8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	e00f      	b.n	8000cfe <main+0x86>

				}else if (rxData == 'z'){
 8000cde:	4b5b      	ldr	r3, [pc, #364]	; (8000e4c <main+0x1d4>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b7a      	cmp	r3, #122	; 0x7a
 8000ce4:	d10b      	bne.n	8000cfe <main+0x86>

					memset(bufferReception, 0, sizeof(bufferReception));
 8000ce6:	2240      	movs	r2, #64	; 0x40
 8000ce8:	2100      	movs	r1, #0
 8000cea:	485a      	ldr	r0, [pc, #360]	; (8000e54 <main+0x1dc>)
 8000cec:	f003 fd42 	bl	8004774 <memset>
					counterReception = 0;
 8000cf0:	4b57      	ldr	r3, [pc, #348]	; (8000e50 <main+0x1d8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "Buffer Vaciado\n \r");
 8000cf6:	4959      	ldr	r1, [pc, #356]	; (8000e5c <main+0x1e4>)
 8000cf8:	4859      	ldr	r0, [pc, #356]	; (8000e60 <main+0x1e8>)
 8000cfa:	f003 fc43 	bl	8004584 <writeMsg>
				}

				rxData = '\0';
 8000cfe:	4b53      	ldr	r3, [pc, #332]	; (8000e4c <main+0x1d4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]

			}

			if (doneTransaction){
 8000d04:	4b54      	ldr	r3, [pc, #336]	; (8000e58 <main+0x1e0>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0c2      	beq.n	8000c92 <main+0x1a>
				parseCommands(bufferReception);
 8000d0c:	4851      	ldr	r0, [pc, #324]	; (8000e54 <main+0x1dc>)
 8000d0e:	f000 f95d 	bl	8000fcc <parseCommands>
				doneTransaction = RESET;
 8000d12:	4b51      	ldr	r3, [pc, #324]	; (8000e58 <main+0x1e0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
 8000d18:	e7bb      	b.n	8000c92 <main+0x1a>
			}

		}else{
			// Si estamos aqui es porque se aplicara el mismo metodo para guardar cada fila de strings

			if (rxData != '\0'){
 8000d1a:	4b4c      	ldr	r3, [pc, #304]	; (8000e4c <main+0x1d4>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d05c      	beq.n	8000ddc <main+0x164>

				if (rxData != '\n'){
 8000d22:	4b4a      	ldr	r3, [pc, #296]	; (8000e4c <main+0x1d4>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b0a      	cmp	r3, #10
 8000d28:	d023      	beq.n	8000d72 <main+0xfa>
					if (rxData != '\r'){
 8000d2a:	4b48      	ldr	r3, [pc, #288]	; (8000e4c <main+0x1d4>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b0d      	cmp	r3, #13
 8000d30:	d016      	beq.n	8000d60 <main+0xe8>
						stringMatrix[stringRow][stringColumn] = rxData;
 8000d32:	4b4c      	ldr	r3, [pc, #304]	; (8000e64 <main+0x1ec>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	4619      	mov	r1, r3
 8000d38:	4b4b      	ldr	r3, [pc, #300]	; (8000e68 <main+0x1f0>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461c      	mov	r4, r3
 8000d3e:	4b43      	ldr	r3, [pc, #268]	; (8000e4c <main+0x1d4>)
 8000d40:	7818      	ldrb	r0, [r3, #0]
 8000d42:	4a4a      	ldr	r2, [pc, #296]	; (8000e6c <main+0x1f4>)
 8000d44:	460b      	mov	r3, r1
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4423      	add	r3, r4
 8000d4e:	4602      	mov	r2, r0
 8000d50:	701a      	strb	r2, [r3, #0]
						stringColumn++;
 8000d52:	4b45      	ldr	r3, [pc, #276]	; (8000e68 <main+0x1f0>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b43      	ldr	r3, [pc, #268]	; (8000e68 <main+0x1f0>)
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	e008      	b.n	8000d72 <main+0xfa>
					}else{
						stringRow++;
 8000d60:	4b40      	ldr	r3, [pc, #256]	; (8000e64 <main+0x1ec>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	3301      	adds	r3, #1
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b3e      	ldr	r3, [pc, #248]	; (8000e64 <main+0x1ec>)
 8000d6a:	701a      	strb	r2, [r3, #0]
						stringColumn = 0;
 8000d6c:	4b3e      	ldr	r3, [pc, #248]	; (8000e68 <main+0x1f0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
					}
				}

				if (rxData == '@'){
 8000d72:	4b36      	ldr	r3, [pc, #216]	; (8000e4c <main+0x1d4>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b40      	cmp	r3, #64	; 0x40
 8000d78:	d114      	bne.n	8000da4 <main+0x12c>
					doneTransaction = SET;
 8000d7a:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <main+0x1e0>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	701a      	strb	r2, [r3, #0]

					stringMatrix[stringRow][stringColumn - 1] = '\0';
 8000d80:	4b38      	ldr	r3, [pc, #224]	; (8000e64 <main+0x1ec>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <main+0x1f0>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	1e5a      	subs	r2, r3, #1
 8000d8c:	4937      	ldr	r1, [pc, #220]	; (8000e6c <main+0x1f4>)
 8000d8e:	4603      	mov	r3, r0
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	1a1b      	subs	r3, r3, r0
 8000d94:	440b      	add	r3, r1
 8000d96:	4413      	add	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]

					stringColumn = 0;
 8000d9c:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <main+0x1f0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	e018      	b.n	8000dd6 <main+0x15e>

				}else if (rxData == 'z'){
 8000da4:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <main+0x1d4>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b7a      	cmp	r3, #122	; 0x7a
 8000daa:	d114      	bne.n	8000dd6 <main+0x15e>

					memset(stringMatrix, 0, sizeof(stringMatrix));
 8000dac:	2231      	movs	r2, #49	; 0x31
 8000dae:	2100      	movs	r1, #0
 8000db0:	482e      	ldr	r0, [pc, #184]	; (8000e6c <main+0x1f4>)
 8000db2:	f003 fcdf 	bl	8004774 <memset>
					stringRow    = 0;
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <main+0x1ec>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 8000dbc:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <main+0x1f0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "\n------String Vaciado-----\n\r");
 8000dc2:	492b      	ldr	r1, [pc, #172]	; (8000e70 <main+0x1f8>)
 8000dc4:	4826      	ldr	r0, [pc, #152]	; (8000e60 <main+0x1e8>)
 8000dc6:	f003 fbdd 	bl	8004584 <writeMsg>
					writeMsg(&handlerUSART, msg_InsertGrid);
 8000dca:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <main+0x1fc>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4823      	ldr	r0, [pc, #140]	; (8000e60 <main+0x1e8>)
 8000dd2:	f003 fbd7 	bl	8004584 <writeMsg>
				}

				rxData = '\0';
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <main+0x1d4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]

			}

			if (doneTransaction){
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <main+0x1e0>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f43f af56 	beq.w	8000c92 <main+0x1a>

				starWorking = findShorterWay(stringMatrix, readableGrid, costs, &handlerAstarParameters, &handlerCostsAstar, shorterWay);
 8000de6:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <main+0x200>)
 8000de8:	9301      	str	r3, [sp, #4]
 8000dea:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <main+0x204>)
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <main+0x208>)
 8000df0:	4a24      	ldr	r2, [pc, #144]	; (8000e84 <main+0x20c>)
 8000df2:	4925      	ldr	r1, [pc, #148]	; (8000e88 <main+0x210>)
 8000df4:	481d      	ldr	r0, [pc, #116]	; (8000e6c <main+0x1f4>)
 8000df6:	f000 fa65 	bl	80012c4 <findShorterWay>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <main+0x214>)
 8000e00:	701a      	strb	r2, [r3, #0]

				if (starWorking){
 8000e02:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <main+0x214>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d105      	bne.n	8000e16 <main+0x19e>
					// si se llego hasta aca es porque Astar si funciona correctamente
				}else{
					writeMsg(&handlerUSART, msg_NotWorking);
 8000e0a:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <main+0x218>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4813      	ldr	r0, [pc, #76]	; (8000e60 <main+0x1e8>)
 8000e12:	f003 fbb7 	bl	8004584 <writeMsg>
				}
				memset(stringMatrix, 0, sizeof(stringMatrix));
 8000e16:	2231      	movs	r2, #49	; 0x31
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4814      	ldr	r0, [pc, #80]	; (8000e6c <main+0x1f4>)
 8000e1c:	f003 fcaa 	bl	8004774 <memset>
				stringRow    = 0;
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <main+0x1ec>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
				stringColumn = 0;
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <main+0x1f0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
				writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 8000e2c:	4919      	ldr	r1, [pc, #100]	; (8000e94 <main+0x21c>)
 8000e2e:	480c      	ldr	r0, [pc, #48]	; (8000e60 <main+0x1e8>)
 8000e30:	f003 fba8 	bl	8004584 <writeMsg>

				flagAstar = RESET;
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <main+0x1d0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]

				doneTransaction = RESET;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <main+0x1e0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
		if (!flagAstar){
 8000e40:	e727      	b.n	8000c92 <main+0x1a>
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00
 8000e48:	200003f7 	.word	0x200003f7
 8000e4c:	20000356 	.word	0x20000356
 8000e50:	20000354 	.word	0x20000354
 8000e54:	20000314 	.word	0x20000314
 8000e58:	20000355 	.word	0x20000355
 8000e5c:	08008e08 	.word	0x08008e08
 8000e60:	2000022c 	.word	0x2000022c
 8000e64:	200003f6 	.word	0x200003f6
 8000e68:	200003f5 	.word	0x200003f5
 8000e6c:	200003c4 	.word	0x200003c4
 8000e70:	08008e1c 	.word	0x08008e1c
 8000e74:	20000004 	.word	0x20000004
 8000e78:	200009b4 	.word	0x200009b4
 8000e7c:	200002cc 	.word	0x200002cc
 8000e80:	200002c0 	.word	0x200002c0
 8000e84:	200004e8 	.word	0x200004e8
 8000e88:	20000980 	.word	0x20000980
 8000e8c:	200003f8 	.word	0x200003f8
 8000e90:	20000000 	.word	0x20000000
 8000e94:	08008e3c 	.word	0x08008e3c

08000e98 <inSystem>:
		}
	}// FIN DEL LOOP
}


void inSystem (void){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0


	// Activamos la maxima velocidad del microcontrolador
	RCC_enableMaxFrequencies(RCC_100MHz);
 8000e9c:	2008      	movs	r0, #8
 8000e9e:	f002 fc07 	bl	80036b0 <RCC_enableMaxFrequencies>
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000ea2:	4b41      	ldr	r3, [pc, #260]	; (8000fa8 <inSystem+0x110>)
 8000ea4:	4a41      	ldr	r2, [pc, #260]	; (8000fac <inSystem+0x114>)
 8000ea6:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000ea8:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <inSystem+0x110>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000eae:	4b3e      	ldr	r3, [pc, #248]	; (8000fa8 <inSystem+0x110>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000eb4:	4b3c      	ldr	r3, [pc, #240]	; (8000fa8 <inSystem+0x110>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000eba:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <inSystem+0x110>)
 8000ebc:	2205      	movs	r2, #5
 8000ebe:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000ec0:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <inSystem+0x110>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <inSystem+0x110>)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000ecc:	4836      	ldr	r0, [pc, #216]	; (8000fa8 <inSystem+0x110>)
 8000ece:	f002 fa61 	bl	8003394 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4834      	ldr	r0, [pc, #208]	; (8000fa8 <inSystem+0x110>)
 8000ed6:	f002 fb87 	bl	80035e8 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 8000eda:	4b35      	ldr	r3, [pc, #212]	; (8000fb0 <inSystem+0x118>)
 8000edc:	4a35      	ldr	r2, [pc, #212]	; (8000fb4 <inSystem+0x11c>)
 8000ede:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8000ee0:	4b33      	ldr	r3, [pc, #204]	; (8000fb0 <inSystem+0x118>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8000ee6:	4b32      	ldr	r3, [pc, #200]	; (8000fb0 <inSystem+0x118>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8000eec:	4b30      	ldr	r3, [pc, #192]	; (8000fb0 <inSystem+0x118>)
 8000eee:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ef2:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 1000;
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <inSystem+0x118>)
 8000ef6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000efa:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 8000efc:	482c      	ldr	r0, [pc, #176]	; (8000fb0 <inSystem+0x118>)
 8000efe:	f001 fe6b 	bl	8002bd8 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8000f02:	482b      	ldr	r0, [pc, #172]	; (8000fb0 <inSystem+0x118>)
 8000f04:	f002 fa34 	bl	8003370 <startTimer>
	///////////////////////////////////////////Comunicación serial para comandos //////////////////////////////////////////////


	//Comunicacion serial

	handlerPinRx.pGPIOx                             = GPIOA;
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <inSystem+0x120>)
 8000f0a:	4a28      	ldr	r2, [pc, #160]	; (8000fac <inSystem+0x114>)
 8000f0c:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <inSystem+0x120>)
 8000f10:	2207      	movs	r2, #7
 8000f12:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <inSystem+0x120>)
 8000f16:	2202      	movs	r2, #2
 8000f18:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f1a:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <inSystem+0x120>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <inSystem+0x120>)
 8000f22:	2203      	movs	r2, #3
 8000f24:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f26:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <inSystem+0x120>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000f2c:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <inSystem+0x120>)
 8000f2e:	2203      	movs	r2, #3
 8000f30:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 8000f32:	4821      	ldr	r0, [pc, #132]	; (8000fb8 <inSystem+0x120>)
 8000f34:	f002 fa2e 	bl	8003394 <GPIO_Config>

	handlerPinTx.pGPIOx                             = GPIOA;
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <inSystem+0x124>)
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	; (8000fac <inSystem+0x114>)
 8000f3c:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <inSystem+0x124>)
 8000f40:	2207      	movs	r2, #7
 8000f42:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <inSystem+0x124>)
 8000f46:	2202      	movs	r2, #2
 8000f48:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <inSystem+0x124>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <inSystem+0x124>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <inSystem+0x124>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <inSystem+0x124>)
 8000f5e:	2203      	movs	r2, #3
 8000f60:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 8000f62:	4816      	ldr	r0, [pc, #88]	; (8000fbc <inSystem+0x124>)
 8000f64:	f002 fa16 	bl	8003394 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <inSystem+0x128>)
 8000f6a:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <inSystem+0x12c>)
 8000f6c:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <inSystem+0x128>)
 8000f70:	4a15      	ldr	r2, [pc, #84]	; (8000fc8 <inSystem+0x130>)
 8000f72:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <inSystem+0x128>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <inSystem+0x128>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <inSystem+0x128>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <inSystem+0x128>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <inSystem+0x128>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <inSystem+0x128>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <inSystem+0x128>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 8000f9e:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <inSystem+0x128>)
 8000fa0:	f002 ff04 	bl	8003dac <USART_Config>


}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200001f4 	.word	0x200001f4
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	20000218 	.word	0x20000218
 8000fb4:	40000400 	.word	0x40000400
 8000fb8:	20000200 	.word	0x20000200
 8000fbc:	2000020c 	.word	0x2000020c
 8000fc0:	2000022c 	.word	0x2000022c
 8000fc4:	40004400 	.word	0x40004400
 8000fc8:	02faf080 	.word	0x02faf080

08000fcc <parseCommands>:


void parseCommands(char *stringVector){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af04      	add	r7, sp, #16
 8000fd2:	6078      	str	r0, [r7, #4]

	sscanf(stringVector, "%s %u %u %u %s", cmd ,&firstParameter, &secondParameter, &thirdParameter, userMsg);
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <parseCommands+0xb8>)
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <parseCommands+0xbc>)
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	; (800108c <parseCommands+0xc0>)
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <parseCommands+0xc4>)
 8000fe2:	4a2c      	ldr	r2, [pc, #176]	; (8001094 <parseCommands+0xc8>)
 8000fe4:	492c      	ldr	r1, [pc, #176]	; (8001098 <parseCommands+0xcc>)
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f004 f946 	bl	8005278 <siscanf>


	if (strcmp(cmd, "help") == 0){
 8000fec:	492b      	ldr	r1, [pc, #172]	; (800109c <parseCommands+0xd0>)
 8000fee:	4829      	ldr	r0, [pc, #164]	; (8001094 <parseCommands+0xc8>)
 8000ff0:	f7ff f8f6 	bl	80001e0 <strcmp>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d108      	bne.n	800100c <parseCommands+0x40>

		writeMsg(&handlerUSART, "HELP MENU CMD : \n");
 8000ffa:	4929      	ldr	r1, [pc, #164]	; (80010a0 <parseCommands+0xd4>)
 8000ffc:	4829      	ldr	r0, [pc, #164]	; (80010a4 <parseCommands+0xd8>)
 8000ffe:	f003 fac1 	bl	8004584 <writeMsg>
		writeMsg(&handlerUSART, "1)  astar #parallel Distance #diagonal Distance  \n");
 8001002:	4929      	ldr	r1, [pc, #164]	; (80010a8 <parseCommands+0xdc>)
 8001004:	4827      	ldr	r0, [pc, #156]	; (80010a4 <parseCommands+0xd8>)
 8001006:	f003 fabd 	bl	8004584 <writeMsg>

	}



}
 800100a:	e036      	b.n	800107a <parseCommands+0xae>
	}else if (strcmp(cmd, "astar") == 0){
 800100c:	4927      	ldr	r1, [pc, #156]	; (80010ac <parseCommands+0xe0>)
 800100e:	4821      	ldr	r0, [pc, #132]	; (8001094 <parseCommands+0xc8>)
 8001010:	f7ff f8e6 	bl	80001e0 <strcmp>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d12f      	bne.n	800107a <parseCommands+0xae>
		handlerAstarParameters.parallelDistance  = firstParameter;
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <parseCommands+0xc4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <parseCommands+0xe4>)
 8001028:	edc3 7a00 	vstr	s15, [r3]
		handlerAstarParameters.diagonalDiastance = secondParameter;
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <parseCommands+0xc0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <parseCommands+0xe4>)
 800103a:	edc3 7a01 	vstr	s15, [r3, #4]
		writeMsg(&handlerUSART, msg_InsertGrid);
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <parseCommands+0xe8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4619      	mov	r1, r3
 8001044:	4817      	ldr	r0, [pc, #92]	; (80010a4 <parseCommands+0xd8>)
 8001046:	f003 fa9d 	bl	8004584 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert * for  empty space______________\n");
 800104a:	491b      	ldr	r1, [pc, #108]	; (80010b8 <parseCommands+0xec>)
 800104c:	4815      	ldr	r0, [pc, #84]	; (80010a4 <parseCommands+0xd8>)
 800104e:	f003 fa99 	bl	8004584 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert e for  the end space____________\n");
 8001052:	491a      	ldr	r1, [pc, #104]	; (80010bc <parseCommands+0xf0>)
 8001054:	4813      	ldr	r0, [pc, #76]	; (80010a4 <parseCommands+0xd8>)
 8001056:	f003 fa95 	bl	8004584 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert s for  the start space__________\n");
 800105a:	4919      	ldr	r1, [pc, #100]	; (80010c0 <parseCommands+0xf4>)
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <parseCommands+0xd8>)
 800105e:	f003 fa91 	bl	8004584 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert # for  obstacule________________\n");
 8001062:	4918      	ldr	r1, [pc, #96]	; (80010c4 <parseCommands+0xf8>)
 8001064:	480f      	ldr	r0, [pc, #60]	; (80010a4 <parseCommands+0xd8>)
 8001066:	f003 fa8d 	bl	8004584 <writeMsg>
		initSerialComunication(&handlerUSART, &handlerPinRx, &handlerPinTx);
 800106a:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <parseCommands+0xfc>)
 800106c:	4917      	ldr	r1, [pc, #92]	; (80010cc <parseCommands+0x100>)
 800106e:	480d      	ldr	r0, [pc, #52]	; (80010a4 <parseCommands+0xd8>)
 8001070:	f001 fd2a 	bl	8002ac8 <initSerialComunication>
		flagAstar = SET;
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <parseCommands+0x104>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000384 	.word	0x20000384
 8001088:	20000380 	.word	0x20000380
 800108c:	2000037c 	.word	0x2000037c
 8001090:	20000378 	.word	0x20000378
 8001094:	20000358 	.word	0x20000358
 8001098:	08008e5c 	.word	0x08008e5c
 800109c:	08008e6c 	.word	0x08008e6c
 80010a0:	08008e74 	.word	0x08008e74
 80010a4:	2000022c 	.word	0x2000022c
 80010a8:	08008e88 	.word	0x08008e88
 80010ac:	08008ebc 	.word	0x08008ebc
 80010b0:	200002c0 	.word	0x200002c0
 80010b4:	20000004 	.word	0x20000004
 80010b8:	08008ec4 	.word	0x08008ec4
 80010bc:	08008efc 	.word	0x08008efc
 80010c0:	08008f34 	.word	0x08008f34
 80010c4:	08008f6c 	.word	0x08008f6c
 80010c8:	2000020c 	.word	0x2000020c
 80010cc:	20000200 	.word	0x20000200
 80010d0:	200003f7 	.word	0x200003f7

080010d4 <usart2Rx_Callback>:



// Interrupcion usart 1
void usart2Rx_Callback(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

	rxData = getRxData();
 80010d8:	f003 fa7c 	bl	80045d4 <getRxData>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	4b01      	ldr	r3, [pc, #4]	; (80010e8 <usart2Rx_Callback+0x14>)
 80010e2:	701a      	strb	r2, [r3, #0]

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000356 	.word	0x20000356

080010ec <BasicTimer3_Callback>:

//Interrupción Timer 3
void BasicTimer3_Callback(void){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

	GPIOxTooglePin(&handlerPinA5);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <BasicTimer3_Callback+0x10>)
 80010f2:	f002 fac5 	bl	8003680 <GPIOxTooglePin>

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200001f4 	.word	0x200001f4

08001100 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <ITM_SendChar+0x48>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <ITM_SendChar+0x48>)
 8001110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001114:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <ITM_SendChar+0x4c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a0c      	ldr	r2, [pc, #48]	; (800114c <ITM_SendChar+0x4c>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001122:	bf00      	nop
 8001124:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0f8      	beq.n	8001124 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001132:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	6013      	str	r3, [r2, #0]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000edfc 	.word	0xe000edfc
 800114c:	e0000e00 	.word	0xe0000e00

08001150 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	return 1;
 8001154:	2301      	movs	r3, #1
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_kill>:

int _kill(int pid, int sig)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800116a:	f003 fad1 	bl	8004710 <__errno>
 800116e:	4603      	mov	r3, r0
 8001170:	2216      	movs	r2, #22
 8001172:	601a      	str	r2, [r3, #0]
	return -1;
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_exit>:

void _exit (int status)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ffe7 	bl	8001160 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001192:	e7fe      	b.n	8001192 <_exit+0x12>

08001194 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e00a      	b.n	80011bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011a6:	f3af 8000 	nop.w
 80011aa:	4601      	mov	r1, r0
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	60ba      	str	r2, [r7, #8]
 80011b2:	b2ca      	uxtb	r2, r1
 80011b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbf0      	blt.n	80011a6 <_read+0x12>
	}

return len;
 80011c4:	687b      	ldr	r3, [r7, #4]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e009      	b.n	80011f4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	60ba      	str	r2, [r7, #8]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff89 	bl	8001100 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbf1      	blt.n	80011e0 <_write+0x12>
	}
	return len;
 80011fc:	687b      	ldr	r3, [r7, #4]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_close>:

int _close(int file)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	return -1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800122e:	605a      	str	r2, [r3, #4]
	return 0;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <_isatty>:

int _isatty(int file)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
	return 1;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	return 0;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001270:	480d      	ldr	r0, [pc, #52]	; (80012a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001272:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001274:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <LoopForever+0x6>)
  ldr r1, =_edata
 800127a:	490d      	ldr	r1, [pc, #52]	; (80012b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <LoopForever+0xe>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001290:	4c0a      	ldr	r4, [pc, #40]	; (80012bc <LoopForever+0x16>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800129e:	f003 fa3d 	bl	800471c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012a2:	f7ff fce9 	bl	8000c78 <main>

080012a6 <LoopForever>:

LoopForever:
    b LoopForever
 80012a6:	e7fe      	b.n	80012a6 <LoopForever>
  ldr   r0, =_estack
 80012a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80012b4:	080094e0 	.word	0x080094e0
  ldr r2, =_sbss
 80012b8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80012bc:	20000a80 	.word	0x20000a80

080012c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC_IRQHandler>
	...

080012c4 <findShorterWay>:
int findShorterWay(char terminalGrid[7][7],
				   char Gridcopy[7][7],
				   float matrixCosts[7][7][6],
				   AStar_distancesHandler *parameters,
				   costChangesAndPos_t *ptrChanges,
				   int shorterWay[20][2]){
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	f507 7404 	add.w	r4, r7, #528	; 0x210
 80012d0:	f5a4 7401 	sub.w	r4, r4, #516	; 0x204
 80012d4:	6020      	str	r0, [r4, #0]
 80012d6:	f507 7004 	add.w	r0, r7, #528	; 0x210
 80012da:	f5a0 7002 	sub.w	r0, r0, #520	; 0x208
 80012de:	6001      	str	r1, [r0, #0]
 80012e0:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80012e4:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 80012e8:	600a      	str	r2, [r1, #0]
 80012ea:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80012ee:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 80012f2:	6013      	str	r3, [r2, #0]

	writeMsg(&handlerAstarUsart, "\n______________Comencemos el viaje_____________\n");
 80012f4:	49c8      	ldr	r1, [pc, #800]	; (8001618 <findShorterWay+0x354>)
 80012f6:	48c9      	ldr	r0, [pc, #804]	; (800161c <findShorterWay+0x358>)
 80012f8:	f003 f944 	bl	8004584 <writeMsg>

	// seteamos las variables locales a usar
	char nineSlotsMatriz[3][3] = {0}; // matriz que tomara una parte de redeableGrid para analisis
 80012fc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	721a      	strb	r2, [r3, #8]
	uint8_t shorterWayFound = RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	uint8_t i = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	uint8_t j = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
	int position[2];
	uint8_t numberOfPositions = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
	uint8_t counter = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
	uint8_t counterStudy = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
	//matriz donde se almacenaran en orden ascendente los F cost de las posiciones en estado de Open, esta si tendra un valor maximo y dos columnas, donde
	// Se almacenara el F cost en la primera y el Hcost en la segunda,
	float decisionMatrix[30][4] = {0};
 800132c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001330:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001334:	4618      	mov	r0, r3
 8001336:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800133a:	461a      	mov	r2, r3
 800133c:	2100      	movs	r1, #0
 800133e:	f003 fa19 	bl	8004774 <memset>



	// Primero seteamos dentro de los valores de los parametros cuales son los valores de las filas y las columnas
	parameters->numberOfRows    = getRows(terminalGrid);
 8001342:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001346:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	f001 fa9c 	bl	8002888 <getRows>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001358:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	721a      	strb	r2, [r3, #8]
	parameters->numberOfColumns = getColums(terminalGrid);
 8001360:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001364:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	f001 fab1 	bl	80028d0 <getColums>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001376:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	725a      	strb	r2, [r3, #9]

	//Segundo construimos nuestra matriz dinamicamente repartida
	buildMatrixCopy(parameters, terminalGrid, Gridcopy);
 800137e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001382:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8001386:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800138a:	f5a3 7101 	sub.w	r1, r3, #516	; 0x204
 800138e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001392:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	6809      	ldr	r1, [r1, #0]
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	f001 fa21 	bl	80027e2 <buildMatrixCopy>
	//Variables que dependen del analisis respectivo,y el H cost que es la heuristica el cual es un valor
	// fijo Se tendra entonces una matriz de arrays donde se almacenaran
	// los valores como siguen, [Gcost, Fcost, Hcost]

    //Cuarto, seteamos la matriz heuristica, la cual es la ultima matriz de el bloque de tres de la matriz de costos
    if (setHeuristic(parameters, ptrChanges, matrixCosts, Gridcopy)){
 80013a0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013a4:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80013a8:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80013ac:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80013b0:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80013b4:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6812      	ldr	r2, [r2, #0]
 80013bc:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 80013c0:	6800      	ldr	r0, [r0, #0]
 80013c2:	f000 ff89 	bl	80022d8 <setHeuristic>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d012      	beq.n	80013f2 <findShorterWay+0x12e>
    	// Si estamos aqui todo salio correctamente, el programa puede seguir su curso
    	__NOP();
 80013cc:	bf00      	nop
    	return 0;
    }

    // Seteada la heuristica AQUI COMIENZA EL ALGORITMO A TRABAJAR, seteamos el punto de inicio y lo guardamos dentro de la estructura
    // correspondiente
    if(findStart(Gridcopy, parameters, ptrChanges)){
 80013ce:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013d2:	f5a3 7104 	sub.w	r1, r3, #528	; 0x210
 80013d6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013da:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80013de:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80013e2:	6809      	ldr	r1, [r1, #0]
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	f001 f990 	bl	800270a <findStart>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d01e      	beq.n	800142e <findShorterWay+0x16a>
 80013f0:	e002      	b.n	80013f8 <findShorterWay+0x134>
    	return 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f000 beb6 	b.w	8002164 <findShorterWay+0xea0>
    	// Si estamos aqui es porque se encontro el punto de inicio con exito
    	__NOP();
 80013f8:	bf00      	nop
    // Comenzamos analizando los vecinos del punto de inicio, calculando para cada uno de ellos (incluyendo el punto de inicio) el Gcosto
    // y el Fcost, de todos ellos al final se selecciona aquel que tenga el F cost mas pequeño, del siguiente while no se sale hasta que se tenga el
    // Array de patents correspondiente a la ruta mas corta

    //guardamos en la posicion de analisis la posicion de start
    ptrChanges->posAnalisis[0] = ptrChanges->startPos[0];
 80013fa:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80013fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001400:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001404:	609a      	str	r2, [r3, #8]
    ptrChanges->posAnalisis[1] = ptrChanges->startPos[1];
 8001406:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800140a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800140c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001410:	60da      	str	r2, [r3, #12]
    // Definimos tambien el estado de abierto
    ptrChanges->posOpen[0] =  ptrChanges->startPos[0];
 8001412:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001418:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800141c:	611a      	str	r2, [r3, #16]
    ptrChanges->posOpen[1] =  ptrChanges->startPos[1];
 800141e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001424:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001428:	615a      	str	r2, [r3, #20]


    while(!shorterWayFound){
 800142a:	f000 bdc1 	b.w	8001fb0 <findShorterWay+0xcec>
    	return 0;
 800142e:	2300      	movs	r3, #0
 8001430:	f000 be98 	b.w	8002164 <findShorterWay+0xea0>

    	// este while actuara como un while de recorrido lineal, donde se busca analizar las posiciones i,j de los aledaños recorriendo cada punto linealmente
    	// al punto de analisis

    	//Actualizamos el punto de analisis para seguir analizando a partir del punto de análisis siguiente
    	ptrChanges->posAnalisis[0] = ptrChanges->posOpen[0];
 8001434:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001438:	691a      	ldr	r2, [r3, #16]
 800143a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800143e:	609a      	str	r2, [r3, #8]
    	ptrChanges->posAnalisis[1] = ptrChanges->posOpen[1];
 8001440:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001444:	695a      	ldr	r2, [r3, #20]
 8001446:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800144a:	60da      	str	r2, [r3, #12]

    	// guardamos la matriz 3x3 de redeableGrid para analisis, para posiciones no correctas se colocan tales posiciones en 0 tipo char
    	// Y para posiciones ya analizadas se coloca una D de done.
    	for(i = 0; i < 3; i++){
 800144c:	2300      	movs	r3, #0
 800144e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8001452:	e09a      	b.n	800158a <findShorterWay+0x2c6>
    		for (j = 0; j < 3; j++){
 8001454:	2300      	movs	r3, #0
 8001456:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800145a:	e08c      	b.n	8001576 <findShorterWay+0x2b2>

    			if 	  ((ptrChanges->posAnalisis[0] + i - 1) < 0
 800145c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001466:	4413      	add	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	dd07      	ble.n	800147c <findShorterWay+0x1b8>
    			    || (ptrChanges->posAnalisis[1] + j - 1) < 0) {
 800146c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001476:	4413      	add	r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	dc0e      	bgt.n	800149a <findShorterWay+0x1d6>
    				// El primer caso seria cuando el puntero que estudia la matriz esta por fuera del rango , especificamente por detras del rango
    				// donde el indice seria negativo
    				nineSlotsMatriz[i][j] = '0';
 800147c:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8001480:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800148e:	443b      	add	r3, r7
 8001490:	440b      	add	r3, r1
 8001492:	3b18      	subs	r3, #24
 8001494:	2230      	movs	r2, #48	; 0x30
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	e068      	b.n	800156c <findShorterWay+0x2a8>

    			}else if ((ptrChanges->posAnalisis[0] + i - 1) > parameters->numberOfRows - 1
 800149a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80014a4:	4413      	add	r3, r2
 80014a6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80014aa:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	7a12      	ldrb	r2, [r2, #8]
 80014b2:	4293      	cmp	r3, r2
 80014b4:	dc0d      	bgt.n	80014d2 <findShorterWay+0x20e>
    				||    (ptrChanges->posAnalisis[1] + j - 1) > parameters->numberOfColumns - 1){
 80014b6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80014c0:	4413      	add	r3, r2
 80014c2:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80014c6:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	7a52      	ldrb	r2, [r2, #9]
 80014ce:	4293      	cmp	r3, r2
 80014d0:	dd0e      	ble.n	80014f0 <findShorterWay+0x22c>
    				// El segundo caso seria cuando el puntero que estudia la matriz esta por fuera del rango, especificamente por delante
    				// del rango donde el indice seria mayor al limite superior del numero de filas o columnas restado uno.
    				nineSlotsMatriz[i][j] = '0';
 80014d2:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80014d6:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80014e4:	443b      	add	r3, r7
 80014e6:	440b      	add	r3, r1
 80014e8:	3b18      	subs	r3, #24
 80014ea:	2230      	movs	r2, #48	; 0x30
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	e03d      	b.n	800156c <findShorterWay+0x2a8>
    			}else if(i == 1 && j == 1){
 80014f0:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d112      	bne.n	800151e <findShorterWay+0x25a>
 80014f8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d10e      	bne.n	800151e <findShorterWay+0x25a>
    				// Este caso corresponde con el punto de analisis , este caso no lo queremos estudiar ya que ya estaria estudiado como tal,
    				// queremos es solo estudiar sus aledanios, por lo que en esta posición colocaremos una 'P' como de Point
    				nineSlotsMatriz[i][j] = 'P';
 8001500:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8001504:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001512:	443b      	add	r3, r7
 8001514:	440b      	add	r3, r1
 8001516:	3b18      	subs	r3, #24
 8001518:	2250      	movs	r2, #80	; 0x50
 800151a:	701a      	strb	r2, [r3, #0]
 800151c:	e026      	b.n	800156c <findShorterWay+0x2a8>
    			}else{
    				// Este ultimo caso donde no se cumple lo anterior  simplemente copiamos exactamente lo mismo que aparece en la matriz de caracteres
    				nineSlotsMatriz[i][j] = Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1];
 800151e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001528:	4413      	add	r3, r2
 800152a:	461a      	mov	r2, r3
 800152c:	4613      	mov	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	3b07      	subs	r3, #7
 8001534:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001538:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	18d0      	adds	r0, r2, r3
 8001540:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800154a:	4413      	add	r3, r2
 800154c:	3b01      	subs	r3, #1
 800154e:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8001552:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8001556:	5cc0      	ldrb	r0, [r0, r3]
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001562:	443b      	add	r3, r7
 8001564:	440b      	add	r3, r1
 8001566:	3b18      	subs	r3, #24
 8001568:	4602      	mov	r2, r0
 800156a:	701a      	strb	r2, [r3, #0]
    		for (j = 0; j < 3; j++){
 800156c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001570:	3301      	adds	r3, #1
 8001572:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8001576:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800157a:	2b02      	cmp	r3, #2
 800157c:	f67f af6e 	bls.w	800145c <findShorterWay+0x198>
    	for(i = 0; i < 3; i++){
 8001580:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001584:	3301      	adds	r3, #1
 8001586:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 800158a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800158e:	2b02      	cmp	r3, #2
 8001590:	f67f af60 	bls.w	8001454 <findShorterWay+0x190>
    	// Esta matriz, Se estudiaran los siguientes casos:

    	// Imprimimos la matriz a estudiar

    	// Imprimimos el mensaje de el estudio en el que estamos
    	sprintf (buffer,"\n__________ESTUDIO NUMERO %u__________\n", counterStudy);
 8001594:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 8001598:	461a      	mov	r2, r3
 800159a:	4921      	ldr	r1, [pc, #132]	; (8001620 <findShorterWay+0x35c>)
 800159c:	4821      	ldr	r0, [pc, #132]	; (8001624 <findShorterWay+0x360>)
 800159e:	f003 fe4b 	bl	8005238 <siprintf>
    	writeMsg(&handlerAstarUsart, buffer);
 80015a2:	4920      	ldr	r1, [pc, #128]	; (8001624 <findShorterWay+0x360>)
 80015a4:	481d      	ldr	r0, [pc, #116]	; (800161c <findShorterWay+0x358>)
 80015a6:	f002 ffed 	bl	8004584 <writeMsg>

    	// Imprimimos la matriz 3x3 a estudiar
    	for(i = 0; i < 3; i++){
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 80015b0:	e026      	b.n	8001600 <findShorterWay+0x33c>
			for (j = 0; j < 3; j++){
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80015b8:	e015      	b.n	80015e6 <findShorterWay+0x322>
				writeChar(&handlerAstarUsart, nineSlotsMatriz[i][j]);
 80015ba:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80015be:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80015cc:	443b      	add	r3, r7
 80015ce:	440b      	add	r3, r1
 80015d0:	3b18      	subs	r3, #24
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	4811      	ldr	r0, [pc, #68]	; (800161c <findShorterWay+0x358>)
 80015d8:	f002 ffbc 	bl	8004554 <writeChar>
			for (j = 0; j < 3; j++){
 80015dc:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80015e0:	3301      	adds	r3, #1
 80015e2:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80015e6:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d9e5      	bls.n	80015ba <findShorterWay+0x2f6>
			}
			writeChar(&handlerAstarUsart, '\r');
 80015ee:	210d      	movs	r1, #13
 80015f0:	480a      	ldr	r0, [pc, #40]	; (800161c <findShorterWay+0x358>)
 80015f2:	f002 ffaf 	bl	8004554 <writeChar>
    	for(i = 0; i < 3; i++){
 80015f6:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80015fa:	3301      	adds	r3, #1
 80015fc:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8001600:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001604:	2b02      	cmp	r3, #2
 8001606:	d9d4      	bls.n	80015b2 <findShorterWay+0x2ee>
    	}

    	writeChar(&handlerAstarUsart, '\r');
 8001608:	210d      	movs	r1, #13
 800160a:	4804      	ldr	r0, [pc, #16]	; (800161c <findShorterWay+0x358>)
 800160c:	f002 ffa2 	bl	8004554 <writeChar>

    	// Imprimimos el estado actual de la matriz copia
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8001610:	2300      	movs	r3, #0
 8001612:	f887 3209 	strb.w	r3, [r7, #521]	; 0x209
 8001616:	e01b      	b.n	8001650 <findShorterWay+0x38c>
 8001618:	08008fa4 	.word	0x08008fa4
 800161c:	200003fc 	.word	0x200003fc
 8001620:	08008fd8 	.word	0x08008fd8
 8001624:	200004a8 	.word	0x200004a8
    			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 8001628:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 800162c:	4613      	mov	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	1a9b      	subs	r3, r3, r2
 8001632:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001636:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	4413      	add	r3, r2
 800163e:	4619      	mov	r1, r3
 8001640:	48b2      	ldr	r0, [pc, #712]	; (800190c <findShorterWay+0x648>)
 8001642:	f002 ff9f 	bl	8004584 <writeMsg>
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8001646:	f897 3209 	ldrb.w	r3, [r7, #521]	; 0x209
 800164a:	3301      	adds	r3, #1
 800164c:	f887 3209 	strb.w	r3, [r7, #521]	; 0x209
 8001650:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001654:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	7a1b      	ldrb	r3, [r3, #8]
 800165c:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 8001660:	429a      	cmp	r2, r3
 8001662:	d3e1      	bcc.n	8001628 <findShorterWay+0x364>
		}
    	// Escribimos enter para tener todo bien espaciado
    	writeChar(&handlerAstarUsart, '\r');
 8001664:	210d      	movs	r1, #13
 8001666:	48a9      	ldr	r0, [pc, #676]	; (800190c <findShorterWay+0x648>)
 8001668:	f002 ff74 	bl	8004554 <writeChar>


    	for(i = 0; i < 3; i++){
 800166c:	2300      	movs	r3, #0
 800166e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8001672:	e275      	b.n	8001b60 <findShorterWay+0x89c>
			for (j = 0; j < 3; j++){
 8001674:	2300      	movs	r3, #0
 8001676:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800167a:	e261      	b.n	8001b40 <findShorterWay+0x87c>
				switch (nineSlotsMatriz[i][j]) {
 800167c:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8001680:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800168e:	443b      	add	r3, r7
 8001690:	440b      	add	r3, r1
 8001692:	3b18      	subs	r3, #24
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b73      	cmp	r3, #115	; 0x73
 8001698:	d074      	beq.n	8001784 <findShorterWay+0x4c0>
 800169a:	2b73      	cmp	r3, #115	; 0x73
 800169c:	f300 8245 	bgt.w	8001b2a <findShorterWay+0x866>
 80016a0:	2b50      	cmp	r3, #80	; 0x50
 80016a2:	dc65      	bgt.n	8001770 <findShorterWay+0x4ac>
 80016a4:	2b23      	cmp	r3, #35	; 0x23
 80016a6:	f2c0 8240 	blt.w	8001b2a <findShorterWay+0x866>
 80016aa:	3b23      	subs	r3, #35	; 0x23
 80016ac:	2b2d      	cmp	r3, #45	; 0x2d
 80016ae:	f200 823c 	bhi.w	8001b2a <findShorterWay+0x866>
 80016b2:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <findShorterWay+0x3f4>)
 80016b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b8:	08001779 	.word	0x08001779
 80016bc:	08001b2b 	.word	0x08001b2b
 80016c0:	08001b2b 	.word	0x08001b2b
 80016c4:	08001b2b 	.word	0x08001b2b
 80016c8:	08001b2b 	.word	0x08001b2b
 80016cc:	08001b2b 	.word	0x08001b2b
 80016d0:	08001b2b 	.word	0x08001b2b
 80016d4:	08001911 	.word	0x08001911
 80016d8:	08001b2b 	.word	0x08001b2b
 80016dc:	08001b2b 	.word	0x08001b2b
 80016e0:	08001b2b 	.word	0x08001b2b
 80016e4:	08001b2b 	.word	0x08001b2b
 80016e8:	08001b2b 	.word	0x08001b2b
 80016ec:	08001781 	.word	0x08001781
 80016f0:	08001b2b 	.word	0x08001b2b
 80016f4:	08001b2b 	.word	0x08001b2b
 80016f8:	08001b2b 	.word	0x08001b2b
 80016fc:	08001b2b 	.word	0x08001b2b
 8001700:	08001b2b 	.word	0x08001b2b
 8001704:	08001b2b 	.word	0x08001b2b
 8001708:	08001b2b 	.word	0x08001b2b
 800170c:	08001b2b 	.word	0x08001b2b
 8001710:	08001b2b 	.word	0x08001b2b
 8001714:	08001b2b 	.word	0x08001b2b
 8001718:	08001b2b 	.word	0x08001b2b
 800171c:	08001b2b 	.word	0x08001b2b
 8001720:	08001b2b 	.word	0x08001b2b
 8001724:	08001b2b 	.word	0x08001b2b
 8001728:	08001b2b 	.word	0x08001b2b
 800172c:	08001b2b 	.word	0x08001b2b
 8001730:	08001b2b 	.word	0x08001b2b
 8001734:	08001b2b 	.word	0x08001b2b
 8001738:	08001b2b 	.word	0x08001b2b
 800173c:	0800177d 	.word	0x0800177d
 8001740:	08001b2b 	.word	0x08001b2b
 8001744:	08001b2b 	.word	0x08001b2b
 8001748:	08001b2b 	.word	0x08001b2b
 800174c:	08001b2b 	.word	0x08001b2b
 8001750:	08001b2b 	.word	0x08001b2b
 8001754:	08001b2b 	.word	0x08001b2b
 8001758:	08001b2b 	.word	0x08001b2b
 800175c:	08001b2b 	.word	0x08001b2b
 8001760:	08001b2b 	.word	0x08001b2b
 8001764:	08001b2b 	.word	0x08001b2b
 8001768:	0800178d 	.word	0x0800178d
 800176c:	08001789 	.word	0x08001789
 8001770:	2b65      	cmp	r3, #101	; 0x65
 8001772:	f000 81c3 	beq.w	8001afc <findShorterWay+0x838>
 8001776:	e1d8      	b.n	8001b2a <findShorterWay+0x866>
					case '#':{
						// El primer caso seria cuando el puntero Que estudia a la matriz 3x3 corresponde con un obstaculo, tal pisicion simpkemente se
						//ignora
						// No se hace nada ya que una posicion se obstaculo no se analiza
						__NOP();
 8001778:	bf00      	nop
						break;
 800177a:	e1d8      	b.n	8001b2e <findShorterWay+0x86a>
					}case 'D':{
						// El segundo caso seria cuando el puntero que estudia la matriz corresponde con un punto ya cerrado o ya pasado a la lista de
						// posiciones ya analizadas, por lo que tampoco se hace nada con este caso,
						__NOP();
 800177c:	bf00      	nop
						break;
 800177e:	e1d6      	b.n	8001b2e <findShorterWay+0x86a>
					}case '0':{
						// El tercer caso seria cuando el puntero que estudia la matriz corresponde con un punto 0 de tipo char que indica que
						// es una posicion por fuera del rango, por lo que tampoco se hace nada con este caso,
						__NOP();
 8001780:	bf00      	nop
						break;
 8001782:	e1d4      	b.n	8001b2e <findShorterWay+0x86a>
					}case 's':{
						// El cuarto caso seria cuando el puntero señala la posicion de start por lo que tampoco se hace nada con este caso,
						__NOP();
 8001784:	bf00      	nop
						break;
 8001786:	e1d2      	b.n	8001b2e <findShorterWay+0x86a>
					}case 'P':{
						// El quinto caso seria cuando el puntero señala la posicion de analisis, dentro del analisis no queremos
						// que este se analice a si mismo, por lo que ignoramos este punto, solo nos intrresan sus aledanios
						__NOP();
 8001788:	bf00      	nop
						break;
 800178a:	e1d0      	b.n	8001b2e <findShorterWay+0x86a>
					}case 'O':{
						// El Sexto caso nos encontramos con un estado Open , por lo que tenemos que recalcular para el punto de
						// analisis el Gcost y el Fcost
						position[0] = i;
 800178c:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001790:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
						position[1] = j;
 8001794:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001798:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
						// Como la posicion estudiada esta en estado de open , se debe volver a calcular el G cost y el fcost correspondiente
						// a la posicion opened con respecto al punto de analisis
						ptrChanges->Fcost = setFcost(parameters, ptrChanges, position, matrixCosts);
 800179c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017a0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80017a4:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80017a8:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80017ac:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 80017b6:	6800      	ldr	r0, [r0, #0]
 80017b8:	f000 ff3b 	bl	8002632 <setFcost>
 80017bc:	eef0 7a40 	vmov.f32	s15, s0
 80017c0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80017c4:	edc3 7a01 	vstr	s15, [r3, #4]
						// Estudiamos si el nuevo FCost es mayor menor o igual al Fcost que ya tiene el estado abierto
						if (ptrChanges->Fcost >= matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]){
 80017c8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80017cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80017d0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80017da:	4413      	add	r3, r2
 80017dc:	461a      	mov	r2, r3
 80017de:	23a8      	movs	r3, #168	; 0xa8
 80017e0:	fb02 f303 	mul.w	r3, r2, r3
 80017e4:	3ba8      	subs	r3, #168	; 0xa8
 80017e6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80017ea:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	18d1      	adds	r1, r2, r3
 80017f2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80017fc:	4413      	add	r3, r2
 80017fe:	1e5a      	subs	r2, r3, #1
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	3304      	adds	r3, #4
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	db01      	blt.n	800181e <findShorterWay+0x55a>
							// Si el Fcost es mayor o igual a el anteriormente calculado, Significa que el Gcost calculado es el mismo o mayor,
							//por lo que no se actualiza ni el G cost y el F cost ni el parent
							__NOP();
 800181a:	bf00      	nop
							// Si si actualizamos la posicion abierta respectiva, tambien se debe actualizar en la matriz de decisión el F cost
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs

						}
						break;
 800181c:	e187      	b.n	8001b2e <findShorterWay+0x86a>
							updateGcost(parameters, ptrChanges, position, matrixCosts);
 800181e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001822:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001826:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800182a:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800182e:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8001838:	6800      	ldr	r0, [r0, #0]
 800183a:	f000 fcf3 	bl	8002224 <updateGcost>
							updateFcost(parameters, ptrChanges, position, matrixCosts);
 800183e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001842:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001846:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800184a:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800184e:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8001858:	6800      	ldr	r0, [r0, #0]
 800185a:	f000 fd0f 	bl	800227c <updateFcost>
							updateParent(ptrChanges, position, matrixCosts);
 800185e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001862:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001866:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8001870:	f000 fc84 	bl	800217c <updateParent>
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8001874:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800187e:	4413      	add	r3, r2
 8001880:	461a      	mov	r2, r3
 8001882:	23a8      	movs	r3, #168	; 0xa8
 8001884:	fb02 f303 	mul.w	r3, r2, r3
 8001888:	3ba8      	subs	r3, #168	; 0xa8
 800188a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800188e:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	18d0      	adds	r0, r2, r3
 8001896:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80018a0:	4413      	add	r3, r2
 80018a2:	1e5a      	subs	r2, r3, #1
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 80018a4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80018a8:	6899      	ldr	r1, [r3, #8]
 80018aa:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80018ae:	440b      	add	r3, r1
 80018b0:	4619      	mov	r1, r3
 80018b2:	23a8      	movs	r3, #168	; 0xa8
 80018b4:	fb01 f303 	mul.w	r3, r1, r3
 80018b8:	3ba8      	subs	r3, #168	; 0xa8
 80018ba:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80018be:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 80018c2:	6809      	ldr	r1, [r1, #0]
 80018c4:	18cc      	adds	r4, r1, r3
 80018c6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80018ca:	68d9      	ldr	r1, [r3, #12]
 80018cc:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80018d0:	440b      	add	r3, r1
 80018d2:	1e59      	subs	r1, r3, #1
 80018d4:	460b      	mov	r3, r1
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	440b      	add	r3, r1
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4423      	add	r3, r4
 80018de:	3314      	adds	r3, #20
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e8:	ee17 4a90 	vmov	r4, s15
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4403      	add	r3, r0
 80018f6:	3304      	adds	r3, #4
 80018f8:	681a      	ldr	r2, [r3, #0]
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 80018fa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80018fe:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8001902:	0123      	lsls	r3, r4, #4
 8001904:	440b      	add	r3, r1
 8001906:	601a      	str	r2, [r3, #0]
						break;
 8001908:	e111      	b.n	8001b2e <findShorterWay+0x86a>
 800190a:	bf00      	nop
 800190c:	200003fc 	.word	0x200003fc
					}case '*':{
						// El séptimo caso seria cuando el puntero que estudia la matriz corresponde con un punto '*' que corresponde con un
						// espacio no estudiado, por lo que simplemente se setea sobre estos nuevos puntos su Gcost y su Fcost, incluyendo el parent
						position[0] = i;
 8001910:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001914:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
						position[1] = j;
 8001918:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800191c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
						updateGcost(parameters, ptrChanges, position, matrixCosts);
 8001920:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001924:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001928:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800192c:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8001930:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 800193a:	6800      	ldr	r0, [r0, #0]
 800193c:	f000 fc72 	bl	8002224 <updateGcost>
						updateFcost(parameters, ptrChanges, position, matrixCosts);
 8001940:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001944:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001948:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800194c:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8001950:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 800195a:	6800      	ldr	r0, [r0, #0]
 800195c:	f000 fc8e 	bl	800227c <updateFcost>
						updateParent(ptrChanges, position, matrixCosts);
 8001960:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001964:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001968:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8001972:	f000 fc03 	bl	800217c <updateParent>

						// Es conveniente que guardemos tambien esta información dentro de readableGrid porque se necesita luego almacenar esta ifnromacion ya
						// estudiada
						Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1] = 'O';
 8001976:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001980:	4413      	add	r3, r2
 8001982:	461a      	mov	r2, r3
 8001984:	4613      	mov	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	3b07      	subs	r3, #7
 800198c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001990:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	441a      	add	r2, r3
 8001998:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800199c:	68d9      	ldr	r1, [r3, #12]
 800199e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80019a2:	440b      	add	r3, r1
 80019a4:	3b01      	subs	r3, #1
 80019a6:	214f      	movs	r1, #79	; 0x4f
 80019a8:	54d1      	strb	r1, [r2, r3]

						// Como se crearon nuevos estados abiertos , se almacena dentro de la matriz de decicion el Fcost, el H cost, y la posicion
						// de cada punto analizado
						// se almacena el Fcost
						decisionMatrix[counter][0] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1];
 80019aa:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80019b4:	4413      	add	r3, r2
 80019b6:	461a      	mov	r2, r3
 80019b8:	23a8      	movs	r3, #168	; 0xa8
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	3ba8      	subs	r3, #168	; 0xa8
 80019c0:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80019c4:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	18d1      	adds	r1, r2, r3
 80019cc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80019d6:	4413      	add	r3, r2
 80019d8:	1e5a      	subs	r2, r3, #1
 80019da:	f897 020b 	ldrb.w	r0, [r7, #523]	; 0x20b
 80019de:	4613      	mov	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	440b      	add	r3, r1
 80019e8:	3304      	adds	r3, #4
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019f0:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 80019f4:	0103      	lsls	r3, r0, #4
 80019f6:	440b      	add	r3, r1
 80019f8:	601a      	str	r2, [r3, #0]
						// Se almacena el H cost
						decisionMatrix[counter][1] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][2];
 80019fa:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001a04:	4413      	add	r3, r2
 8001a06:	461a      	mov	r2, r3
 8001a08:	23a8      	movs	r3, #168	; 0xa8
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	3ba8      	subs	r3, #168	; 0xa8
 8001a10:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001a14:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	18d1      	adds	r1, r2, r3
 8001a1c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001a26:	4413      	add	r3, r2
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	f897 020b 	ldrb.w	r0, [r7, #523]	; 0x20b
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	3308      	adds	r3, #8
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a40:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8001a44:	0103      	lsls	r3, r0, #4
 8001a46:	440b      	add	r3, r1
 8001a48:	3304      	adds	r3, #4
 8001a4a:	601a      	str	r2, [r3, #0]
						// Se almacena la posicion i
						decisionMatrix[counter][2] = ptrChanges->posAnalisis[0] + i - 1;
 8001a4c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001a56:	4413      	add	r3, r2
 8001a58:	1e5a      	subs	r2, r3, #1
 8001a5a:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8001a5e:	ee07 2a90 	vmov	s15, r2
 8001a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a66:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001a6a:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	4413      	add	r3, r2
 8001a72:	3308      	adds	r3, #8
 8001a74:	edc3 7a00 	vstr	s15, [r3]
						// Se almacena la posicion j
						decisionMatrix[counter][3] = ptrChanges->posAnalisis[1] + j - 1;
 8001a78:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001a82:	4413      	add	r3, r2
 8001a84:	1e5a      	subs	r2, r3, #1
 8001a86:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8001a8a:	ee07 2a90 	vmov	s15, r2
 8001a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a92:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001a96:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	4413      	add	r3, r2
 8001a9e:	330c      	adds	r3, #12
 8001aa0:	edc3 7a00 	vstr	s15, [r3]

						// Guardamos en la matris grande de costos en la ultima matriz el valor del counter asignado a la posición
						matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5] = counter;
 8001aa4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001aae:	4413      	add	r3, r2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	23a8      	movs	r3, #168	; 0xa8
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	3ba8      	subs	r3, #168	; 0xa8
 8001aba:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001abe:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	18d1      	adds	r1, r2, r3
 8001ac6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001ad0:	4413      	add	r3, r2
 8001ad2:	1e5a      	subs	r2, r3, #1
 8001ad4:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	3314      	adds	r3, #20
 8001aec:	edc3 7a00 	vstr	s15, [r3]

						// Aumentamos el contador ya que cada posicion estudiada aqui es una nueva posicion que entra a estado open
						counter++;
 8001af0:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8001af4:	3301      	adds	r3, #1
 8001af6:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

						break;
 8001afa:	e018      	b.n	8001b2e <findShorterWay+0x86a>
					}case 'e':{
						// El octavo caso Sería cuando se encuentra la 'e' de end , donde ya logramos despues de viajar a traves de la maya llegar
						// hasta el punto final, aqui para economizar recursos simplemente haremos que el ciclo se detenga y de parent al end le asignamos
						// el ultimo
						position[0] = i;
 8001afc:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001b00:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
						position[1] = j;
 8001b04:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001b08:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
						updateParent(ptrChanges, position, matrixCosts);
 8001b0c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001b10:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001b14:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8001b1e:	f000 fb2d 	bl	800217c <updateParent>
						shorterWayFound = SET;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
						break;
 8001b28:	e001      	b.n	8001b2e <findShorterWay+0x86a>
					}
					default:{
						// Si se llega hasta aca es porque hay un caracter no permitido dentro de la malla y se debe parar la ejecucion del programa
						return 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e31a      	b.n	8002164 <findShorterWay+0xea0>
						break;
					}
				}// Termino del switch case

				if (shorterWayFound){
 8001b2e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10a      	bne.n	8001b4c <findShorterWay+0x888>
			for (j = 0; j < 3; j++){
 8001b36:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8001b40:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	f67f ad99 	bls.w	800167c <findShorterWay+0x3b8>
 8001b4a:	e000      	b.n	8001b4e <findShorterWay+0x88a>
					break;
 8001b4c:	bf00      	nop
				}

			}// Termino del ciclo for
			if (shorterWayFound){
 8001b4e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10a      	bne.n	8001b6c <findShorterWay+0x8a8>
    	for(i = 0; i < 3; i++){
 8001b56:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8001b60:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	f67f ad85 	bls.w	8001674 <findShorterWay+0x3b0>
 8001b6a:	e000      	b.n	8001b6e <findShorterWay+0x8aa>
				break;
 8001b6c:	bf00      	nop
    	// el que tiene el Fcost mas pequeño, y en caso de Fcost iguales desempata el que tenga una heuristica o Hcost menor
    	// Volvemos a recorrer los aledanios para seleccionar la nueva posicion, tal posicion pasara a ser el nuevo punto de analisis, el resto
    	// seran solo puntos en estado Open, y el antiguo punto de analisis sera ahora un punto Done, Para ello usaremos la funcion findeLesserValue
    	// Esta funcion almacena dentro de la estructura costChangesAndPos_t los valores de la pisicion del F cost mas pequeño, en el caso de que haya
    	// mas de uno igual, se alzará una bandera que indica que esto ocurrio, por lo que internamente el tambien analiza cual es la heuristica
    	if (!shorterWayFound){
 8001b6e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f040 81be 	bne.w	8001ef4 <findShorterWay+0xc30>
			findLesserValue(ptrChanges, decisionMatrix, counter);
 8001b78:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	4619      	mov	r1, r3
 8001b82:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8001b86:	f000 feb9 	bl	80028fc <findLesserValue>
			// A partir de aqui tendriamos la posicion del F cost mas pequeño, pero primero se compueba de que si depronto hubo un F cost igual
			if (ptrChanges->equalFcost){
 8001b8a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80d7 	beq.w	8001d46 <findShorterWay+0xa82>
				// Si estamos aqui es porque si hubo mas de un Fcost igual , por lo que se busca es la posicion del Hcost mas pequeño como la nueva posicion
				// que tomara el nuevo papel de punto de analisis, y el que fue el punto de analisis sera ahor aun estado Done o 'D'
				// Llevamos la posicion de analisis al estado cerrado
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8001b98:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001ba2:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8001ba4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001bae:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8001bb0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001bc2:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	441a      	add	r2, r3
 8001bca:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	5cd3      	ldrb	r3, [r2, r3]
 8001bd2:	2b73      	cmp	r3, #115	; 0x73
 8001bd4:	d101      	bne.n	8001bda <findShorterWay+0x916>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8001bd6:	bf00      	nop
 8001bd8:	e011      	b.n	8001bfe <findShorterWay+0x93a>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8001bda:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4613      	mov	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	1a9b      	subs	r3, r3, r2
 8001be8:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001bec:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	441a      	add	r2, r3
 8001bf4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2144      	movs	r1, #68	; 0x44
 8001bfc:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserHcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8001bfe:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c04:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001c08:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	3308      	adds	r3, #8
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c1a:	ee17 2a90 	vmov	r2, s15
 8001c1e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001c22:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserHcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8001c24:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001c2e:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	4413      	add	r3, r2
 8001c36:	330c      	adds	r3, #12
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c40:	ee17 2a90 	vmov	r2, s15
 8001c44:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001c48:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8001c50:	e014      	b.n	8001c7c <findShorterWay+0x9b8>
					decisionMatrix[ptrChanges->lesserHcostPosition][i] = 0;
 8001c52:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001c56:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001c58:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001c5c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001c60:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8001c64:	0089      	lsls	r1, r1, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 8001c72:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001c76:	3301      	adds	r3, #1
 8001c78:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8001c7c:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d9e6      	bls.n	8001c52 <findShorterWay+0x98e>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8001c84:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8001c92:	e03b      	b.n	8001d0c <findShorterWay+0xa48>
					for (j = 0 ; j < 4 ; j++){
 8001c94:	2300      	movs	r3, #0
 8001c96:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8001c9a:	e02e      	b.n	8001cfa <findShorterWay+0xa36>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 8001c9c:	f897 420e 	ldrb.w	r4, [r7, #526]	; 0x20e
 8001ca0:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8001ca4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001ca8:	1e58      	subs	r0, r3, #1
 8001caa:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001cae:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8001cb2:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 8001cb6:	00a4      	lsls	r4, r4, #2
 8001cb8:	4422      	add	r2, r4
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	440a      	add	r2, r1
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8001cc4:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 8001cc8:	0080      	lsls	r0, r0, #2
 8001cca:	4403      	add	r3, r0
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8001cd2:	f897 120e 	ldrb.w	r1, [r7, #526]	; 0x20e
 8001cd6:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001cda:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001cde:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8001ce2:	0089      	lsls	r1, r1, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 8001cf0:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8001cfa:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d9cc      	bls.n	8001c9c <findShorterWay+0x9d8>
				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8001d02:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001d06:	3301      	adds	r3, #1
 8001d08:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8001d0c:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8001d10:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d3bd      	bcc.n	8001c94 <findShorterWay+0x9d0>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 8001d18:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8001d22:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d2c:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8001d2e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d38:	615a      	str	r2, [r3, #20]

				// Resetemos la bandera que nos indica si hay un valor de Fcost igual.
				ptrChanges->equalFcost = RESET;
 8001d3a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001d44:	e0d0      	b.n	8001ee8 <findShorterWay+0xc24>

			}else{
				// Si estamos aqui es porque no hubo F costs iguales y se hara lo mismo que en el caso anterior solo que se tendra en cuenta
				// la posicion encontrada del Fcost mas pequeño, ya no del Hcost mas pequeño
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8001d46:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d50:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8001d52:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d5c:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8001d5e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001d70:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	441a      	add	r2, r3
 8001d78:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	2b73      	cmp	r3, #115	; 0x73
 8001d82:	d101      	bne.n	8001d88 <findShorterWay+0xac4>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8001d84:	bf00      	nop
 8001d86:	e011      	b.n	8001dac <findShorterWay+0xae8>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8001d88:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001d9a:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	441a      	add	r2, r3
 8001da2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2144      	movs	r1, #68	; 0x44
 8001daa:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserFcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8001dac:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db2:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001db6:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3308      	adds	r3, #8
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dc8:	ee17 2a90 	vmov	r2, s15
 8001dcc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001dd0:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserFcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8001dd2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd8:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001ddc:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	4413      	add	r3, r2
 8001de4:	330c      	adds	r3, #12
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dee:	ee17 2a90 	vmov	r2, s15
 8001df2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001df6:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8001dfe:	e014      	b.n	8001e2a <findShorterWay+0xb66>
					decisionMatrix[ptrChanges->lesserFcostPosition][i] = 0;
 8001e00:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001e04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e06:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001e0a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001e0e:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8001e12:	0089      	lsls	r1, r1, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 8001e20:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001e24:	3301      	adds	r3, #1
 8001e26:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8001e2a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d9e6      	bls.n	8001e00 <findShorterWay+0xb3c>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 8001e32:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8001e40:	e03b      	b.n	8001eba <findShorterWay+0xbf6>
					for (j = 0 ; j < 4 ; j++){
 8001e42:	2300      	movs	r3, #0
 8001e44:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8001e48:	e02e      	b.n	8001ea8 <findShorterWay+0xbe4>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 8001e4a:	f897 420e 	ldrb.w	r4, [r7, #526]	; 0x20e
 8001e4e:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8001e52:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001e56:	1e58      	subs	r0, r3, #1
 8001e58:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001e5c:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8001e60:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 8001e64:	00a4      	lsls	r4, r4, #2
 8001e66:	4422      	add	r2, r4
 8001e68:	0092      	lsls	r2, r2, #2
 8001e6a:	440a      	add	r2, r1
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8001e72:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 8001e76:	0080      	lsls	r0, r0, #2
 8001e78:	4403      	add	r3, r0
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8001e80:	f897 120e 	ldrb.w	r1, [r7, #526]	; 0x20e
 8001e84:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001e88:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001e8c:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8001e90:	0089      	lsls	r1, r1, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 8001e9e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8001ea8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d9cc      	bls.n	8001e4a <findShorterWay+0xb86>
				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 8001eb0:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8001eba:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8001ebe:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d3bd      	bcc.n	8001e42 <findShorterWay+0xb7e>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 8001ec6:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8001ed0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001eda:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8001edc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001ee6:	615a      	str	r2, [r3, #20]

			}

			counterStudy++;
 8001ee8:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 8001eec:	3301      	adds	r3, #1
 8001eee:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
 8001ef2:	e05d      	b.n	8001fb0 <findShorterWay+0xcec>
    	}else{
			// Si el programa entra en esta condicion quiere decir que ya se encontro la ruta mas corta y ya es hora de construir la matriz de posiciones
			// donde se almacenara la ruta mas corta
			//buscamos cuantos elementos deberia de tener el arreglo para ello usaremos el siguiente while donde recorreremos desde el end hasta el
			//start
			i = ptrChanges->endPos[0];
 8001ef4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
			j = ptrChanges->endPos[1];
 8001efe:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
			while(Gridcopy[i][j] != 's'){
 8001f08:	e042      	b.n	8001f90 <findShorterWay+0xccc>
				// Actualizamos a la nueva posición
				position[0] = matrixCosts[i][j][3];
 8001f0a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001f0e:	22a8      	movs	r2, #168	; 0xa8
 8001f10:	fb02 f303 	mul.w	r3, r2, r3
 8001f14:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001f18:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	18d1      	adds	r1, r2, r3
 8001f20:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	330c      	adds	r3, #12
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f38:	ee17 3a90 	vmov	r3, s15
 8001f3c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
				position[1] = matrixCosts[i][j][4];
 8001f40:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001f44:	22a8      	movs	r2, #168	; 0xa8
 8001f46:	fb02 f303 	mul.w	r3, r2, r3
 8001f4a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001f4e:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	18d1      	adds	r1, r2, r3
 8001f56:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	3310      	adds	r3, #16
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f6e:	ee17 3a90 	vmov	r3, s15
 8001f72:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

				// actualizamos la nueva posición
				i = position[0];
 8001f76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f7a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
				j = position[1];
 8001f7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f82:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d

				// incrementamos en uno la cantidad de posiciones a guardar
				numberOfPositions++;
 8001f86:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			while(Gridcopy[i][j] != 's'){
 8001f90:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001f9e:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	441a      	add	r2, r3
 8001fa6:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	2b73      	cmp	r3, #115	; 0x73
 8001fae:	d1ac      	bne.n	8001f0a <findShorterWay+0xc46>
    while(!shorterWayFound){
 8001fb0:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f43f aa3d 	beq.w	8001434 <findShorterWay+0x170>
		}


    }// final del ciclo While

    writeMsg(&handlerAstarUsart, "\n___________Hemos Encontrado la ruta mas corta______________\n");
 8001fba:	496d      	ldr	r1, [pc, #436]	; (8002170 <findShorterWay+0xeac>)
 8001fbc:	486d      	ldr	r0, [pc, #436]	; (8002174 <findShorterWay+0xeb0>)
 8001fbe:	f002 fae1 	bl	8004584 <writeMsg>
    writeChar(&handlerAstarUsart, '\r');
 8001fc2:	210d      	movs	r1, #13
 8001fc4:	486b      	ldr	r0, [pc, #428]	; (8002174 <findShorterWay+0xeb0>)
 8001fc6:	f002 fac5 	bl	8004554 <writeChar>

    // estando aqui ya solo queda almacenar toda las posiciones parent comenzando desde el end hasta el start, siguendo el parent de cada uno se asegura
    // que lo que se esta almacenando es la ruta mas corta

    //Almacenamos dentro de una de las variables del arreglo AStar_distancesHandler la cantidad de elementos que tiene la matriz de la ruta mas corta
    parameters->numberOfElements = numberOfPositions + 1 ; // Le sumamos uno mas para incluir el punto de inicio
 8001fca:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8001fce:	3301      	adds	r3, #1
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001fd6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	729a      	strb	r2, [r3, #10]


    i = ptrChanges->endPos[0];
 8001fde:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	j = ptrChanges->endPos[1];
 8001fe8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d

    // Recorremos la matriz e iremos almacenando dentro de este comenzando desde la posicion final y terminando en la posicion inicial
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8001ff2:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8001ff6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001ffa:	e087      	b.n	800210c <findShorterWay+0xe48>
    	//Cambiamos la matriz redeableGrid, las posiciones que corresponden a la ruta mas corta por un char 'I',
    	if (Gridcopy[i][j] == 'e'){
 8001ffc:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800200a:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	441a      	add	r2, r3
 8002012:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8002016:	5cd3      	ldrb	r3, [r2, r3]
 8002018:	2b65      	cmp	r3, #101	; 0x65
 800201a:	d101      	bne.n	8002020 <findShorterWay+0xd5c>
    		// Si estamos aqui es porque no queremos cambiar el char de finalización
    		__NOP();
 800201c:	bf00      	nop
 800201e:	e020      	b.n	8002062 <findShorterWay+0xd9e>
    	}else if (Gridcopy[i][j] == 's'){
 8002020:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800202e:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	441a      	add	r2, r3
 8002036:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	2b73      	cmp	r3, #115	; 0x73
 800203e:	d101      	bne.n	8002044 <findShorterWay+0xd80>
    		// Si estamos aqui es porque no queremos cambiar el char de inicio
    		__NOP();
 8002040:	bf00      	nop
 8002042:	e00e      	b.n	8002062 <findShorterWay+0xd9e>
    	}else{
    		// Si estamos aqui es porque estamos dentro del camino a seguir, por lo cambiamos a una 'I'
    		Gridcopy[i][j] = 'I';
 8002044:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8002052:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	441a      	add	r2, r3
 800205a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800205e:	2149      	movs	r1, #73	; 0x49
 8002060:	54d1      	strb	r1, [r2, r3]
    	}


    	// Almacenamos en la matriz de ruta mas corta
		shorterWay[k][0] = i;
 8002062:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800206c:	4413      	add	r3, r2
 800206e:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8002072:	601a      	str	r2, [r3, #0]
		shorterWay[k][1] = j;
 8002074:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800207e:	4413      	add	r3, r2
 8002080:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8002084:	605a      	str	r2, [r3, #4]

    	// comenzamos almacenando las posiciones en orden desde el final al punto inicial
		// Actualizamos a la nueva posición
		position[0] = matrixCosts[i][j][3];
 8002086:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800208a:	22a8      	movs	r2, #168	; 0xa8
 800208c:	fb02 f303 	mul.w	r3, r2, r3
 8002090:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8002094:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	18d1      	adds	r1, r2, r3
 800209c:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 80020a0:	4613      	mov	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	440b      	add	r3, r1
 80020aa:	330c      	adds	r3, #12
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020b4:	ee17 3a90 	vmov	r3, s15
 80020b8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
		position[1] = matrixCosts[i][j][4];
 80020bc:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80020c0:	22a8      	movs	r2, #168	; 0xa8
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80020ca:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	18d1      	adds	r1, r2, r3
 80020d2:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	3310      	adds	r3, #16
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ea:	ee17 3a90 	vmov	r3, s15
 80020ee:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

		// actualizamos la nueva posición
		i = position[0];
 80020f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80020f6:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
		j = position[1];
 80020fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020fe:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8002102:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002106:	3b01      	subs	r3, #1
 8002108:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800210c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002110:	2b00      	cmp	r3, #0
 8002112:	f6bf af73 	bge.w	8001ffc <findShorterWay+0xd38>


    }
	// Imprimimos el estado actual de la matriz copia
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8002116:	2300      	movs	r3, #0
 8002118:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 800211c:	e013      	b.n	8002146 <findShorterWay+0xe82>
			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 800211e:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800212c:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	4413      	add	r3, r2
 8002134:	4619      	mov	r1, r3
 8002136:	480f      	ldr	r0, [pc, #60]	; (8002174 <findShorterWay+0xeb0>)
 8002138:	f002 fa24 	bl	8004584 <writeMsg>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 800213c:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8002140:	3301      	adds	r3, #1
 8002142:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 8002146:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800214a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	7a1b      	ldrb	r3, [r3, #8]
 8002152:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8002156:	429a      	cmp	r2, r3
 8002158:	d3e1      	bcc.n	800211e <findShorterWay+0xe5a>

    // A partir de aqui habremos logrado despues de un largo camino hallar la ruta mas corta entre dos puntos , el robot ya con esa informacion
    // sabra hacia donde moverse y cuanto moverse

    // Si llegamos hasta aca, con exito hemos logrado todo lo cometido, ¡Felicidades!
    writeMsg(&handlerAstarUsart, "\n______________________Gracias por viajar con nuestra linea Astarlines____________________\n");
 800215a:	4907      	ldr	r1, [pc, #28]	; (8002178 <findShorterWay+0xeb4>)
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <findShorterWay+0xeb0>)
 800215e:	f002 fa11 	bl	8004584 <writeMsg>

    return 1;
 8002162:	2301      	movs	r3, #1


}
 8002164:	4618      	mov	r0, r3
 8002166:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800216a:	46bd      	mov	sp, r7
 800216c:	bd90      	pop	{r4, r7, pc}
 800216e:	bf00      	nop
 8002170:	08009000 	.word	0x08009000
 8002174:	200003fc 	.word	0x200003fc
 8002178:	08009040 	.word	0x08009040

0800217c <updateParent>:

// Esta función actuazliza en la matriz de costs y el parent correspondiente
void updateParent(costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6]){
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]

	setParents(ptrChanges, posIJ);
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 fa8e 	bl	80026ac <setParents>

	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][3] = ptrChanges->parent[0]; //Posicion i del parent
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002196:	b2d8      	uxtb	r0, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4413      	add	r3, r2
 80021a2:	461a      	mov	r2, r3
 80021a4:	23a8      	movs	r3, #168	; 0xa8
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	3ba8      	subs	r3, #168	; 0xa8
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	18d1      	adds	r1, r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	3304      	adds	r3, #4
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	1e5a      	subs	r2, r3, #1
 80021be:	ee07 0a90 	vmov	s15, r0
 80021c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c6:	4613      	mov	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	330c      	adds	r3, #12
 80021d2:	edc3 7a00 	vstr	s15, [r3]
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][4] = ptrChanges->parent[1]; //Posicion j del parent
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021dc:	b2d8      	uxtb	r0, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	23a8      	movs	r3, #168	; 0xa8
 80021ec:	fb02 f303 	mul.w	r3, r2, r3
 80021f0:	3ba8      	subs	r3, #168	; 0xa8
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	18d1      	adds	r1, r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3304      	adds	r3, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4413      	add	r3, r2
 8002202:	1e5a      	subs	r2, r3, #1
 8002204:	ee07 0a90 	vmov	s15, r0
 8002208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	440b      	add	r3, r1
 8002216:	3310      	adds	r3, #16
 8002218:	edc3 7a00 	vstr	s15, [r3]

}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <updateGcost>:

// esta funcion actualiz el Gcost correspondiente
void updateGcost(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6] ){
 8002224:	b5b0      	push	{r4, r5, r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][0] = setGcost(parameters, ptrChanges, posIJ);
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4413      	add	r3, r2
 800223c:	461a      	mov	r2, r3
 800223e:	23a8      	movs	r3, #168	; 0xa8
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	3ba8      	subs	r3, #168	; 0xa8
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	18d5      	adds	r5, r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3304      	adds	r3, #4
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4413      	add	r3, r2
 8002256:	1e5c      	subs	r4, r3, #1
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f901 	bl	8002464 <setGcost>
 8002262:	eef0 7a40 	vmov.f32	s15, s0
 8002266:	4623      	mov	r3, r4
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4423      	add	r3, r4
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	442b      	add	r3, r5
 8002270:	edc3 7a00 	vstr	s15, [r3]
}
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bdb0      	pop	{r4, r5, r7, pc}

0800227c <updateFcost>:

// Esta función actualiza el Fcost correspondiente
void updateFcost(AStar_distancesHandler *parameters ,costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6] ){
 800227c:	b5b0      	push	{r4, r5, r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][1] = setFcost(parameters, ptrChanges, posIJ, matrixCosts);
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4413      	add	r3, r2
 8002294:	461a      	mov	r2, r3
 8002296:	23a8      	movs	r3, #168	; 0xa8
 8002298:	fb02 f303 	mul.w	r3, r2, r3
 800229c:	3ba8      	subs	r3, #168	; 0xa8
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	18d5      	adds	r5, r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3304      	adds	r3, #4
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4413      	add	r3, r2
 80022ae:	1e5c      	subs	r4, r3, #1
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f9bb 	bl	8002632 <setFcost>
 80022bc:	eef0 7a40 	vmov.f32	s15, s0
 80022c0:	4623      	mov	r3, r4
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4423      	add	r3, r4
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	442b      	add	r3, r5
 80022ca:	3304      	adds	r3, #4
 80022cc:	edc3 7a00 	vstr	s15, [r3]

}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bdb0      	pop	{r4, r5, r7, pc}

080022d8 <setHeuristic>:

// con esta funcion seteamos la matriz Heuristica con la cual usaremos la info para buscar la ruta mas corta
int setHeuristic(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, float matrixCosts[7][7][6] , char Gridcopy[7][7]){
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]

	// definimos variables locales
	int distRows     = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
	int distanceToGo = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
	//sicion de cada fila y columna el valor de la heuristica dependiendo de donde este el punto de termino o End point

	// Comenzamos entonces recorriendo cada posicion del terccer bloque matricial de ***costs
	// recorremos las filas
	// Almacenamos la posicion final
	if(findEnd(Gridcopy, parameters, ptrChanges)){
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	68f9      	ldr	r1, [r7, #12]
 80022f6:	6838      	ldr	r0, [r7, #0]
 80022f8:	f000 fa3d 	bl	8002776 <findEnd>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <setHeuristic+0x32>
		// Se encontro la posicion final, y continua con el programa
		__NOP();
 8002302:	bf00      	nop
	}

	// A partir de aqui ya se tiene la posicion del punto final y ya se puede entonces calcular la heuristica
	// partiendo siempre de que el robot puede ir en diagonal y luego en linea recta , siempre buscando la ruta mas eficiente

	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8002304:	2300      	movs	r3, #0
 8002306:	77fb      	strb	r3, [r7, #31]
 8002308:	e0a1      	b.n	800244e <setHeuristic+0x176>
		return RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	e0a6      	b.n	800245c <setHeuristic+0x184>
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 800230e:	2300      	movs	r3, #0
 8002310:	77bb      	strb	r3, [r7, #30]
 8002312:	e093      	b.n	800243c <setHeuristic+0x164>
			// para cada posicion i,j, se mira i-iend y j-jend, y se evalua cual de los dos es menor y luego
			// De los dos que sea mas pequeño, el robot tendra que ir diagonal hasta encontrarse con la fila o la columna
			// maas cercana a la fila o la columna del punto final, y ya luego sumarle la distancia paralela que falta para llegar al punto end
			distRows    = abs(i-ptrChanges->endPos[0]);
 8002314:	7ffa      	ldrb	r2, [r7, #31]
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	bfb8      	it	lt
 8002320:	425b      	neglt	r3, r3
 8002322:	61bb      	str	r3, [r7, #24]
			distColumns = abs(j-ptrChanges->endPos[1]);
 8002324:	7fba      	ldrb	r2, [r7, #30]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	bfb8      	it	lt
 8002330:	425b      	neglt	r3, r3
 8002332:	617b      	str	r3, [r7, #20]
			if (distRows <= distColumns){
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	429a      	cmp	r2, r3
 800233a:	dc3e      	bgt.n	80023ba <setHeuristic+0xe2>
				// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
				// que de la columna del end, por lo que se debe ir diagonal
				distanceToGo = parameters->diagonalDiastance * distRows;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	ee07 3a90 	vmov	s15, r3
 8002348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800234c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002354:	ee17 3a90 	vmov	r3, s15
 8002358:	613b      	str	r3, [r7, #16]
				// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
				// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
				// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	ee07 3a90 	vmov	s15, r3
 8002360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	edd3 6a00 	vldr	s13, [r3]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	bfb8      	it	lt
 8002374:	425b      	neglt	r3, r3
 8002376:	ee07 3a90 	vmov	s15, r3
 800237a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800237e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800238a:	ee17 3a90 	vmov	r3, s15
 800238e:	613b      	str	r3, [r7, #16]
				//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la sumer matriz
				// de costos
				matrixCosts[i][j][2] = distanceToGo;
 8002390:	7ffb      	ldrb	r3, [r7, #31]
 8002392:	22a8      	movs	r2, #168	; 0xa8
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	18d1      	adds	r1, r2, r3
 800239c:	7fba      	ldrb	r2, [r7, #30]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a8:	4613      	mov	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	440b      	add	r3, r1
 80023b2:	3308      	adds	r3, #8
 80023b4:	edc3 7a00 	vstr	s15, [r3]
 80023b8:	e03d      	b.n	8002436 <setHeuristic+0x15e>
			}else{
				// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
				// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
				distanceToGo = parameters->diagonalDiastance * distColumns;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d2:	ee17 3a90 	vmov	r3, s15
 80023d6:	613b      	str	r3, [r7, #16]
				// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
				// distRows y distColumns
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	edd3 6a00 	vldr	s13, [r3]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bfb8      	it	lt
 80023f2:	425b      	neglt	r3, r3
 80023f4:	ee07 3a90 	vmov	s15, r3
 80023f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002408:	ee17 3a90 	vmov	r3, s15
 800240c:	613b      	str	r3, [r7, #16]
				matrixCosts[i][j][2] = distanceToGo;
 800240e:	7ffb      	ldrb	r3, [r7, #31]
 8002410:	22a8      	movs	r2, #168	; 0xa8
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	18d1      	adds	r1, r2, r3
 800241a:	7fba      	ldrb	r2, [r7, #30]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	440b      	add	r3, r1
 8002430:	3308      	adds	r3, #8
 8002432:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 8002436:	7fbb      	ldrb	r3, [r7, #30]
 8002438:	3301      	adds	r3, #1
 800243a:	77bb      	strb	r3, [r7, #30]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	7a5b      	ldrb	r3, [r3, #9]
 8002440:	7fba      	ldrb	r2, [r7, #30]
 8002442:	429a      	cmp	r2, r3
 8002444:	f4ff af66 	bcc.w	8002314 <setHeuristic+0x3c>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8002448:	7ffb      	ldrb	r3, [r7, #31]
 800244a:	3301      	adds	r3, #1
 800244c:	77fb      	strb	r3, [r7, #31]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	7a1b      	ldrb	r3, [r3, #8]
 8002452:	7ffa      	ldrb	r2, [r7, #31]
 8002454:	429a      	cmp	r2, r3
 8002456:	f4ff af5a 	bcc.w	800230e <setHeuristic+0x36>
		}

	}

	// Terminado TODO el recorrido se puede salir de la funcion y decir que todo fue correcto
	return SET;
 800245a:	2301      	movs	r3, #1

}
 800245c:	4618      	mov	r0, r3
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <setGcost>:

//Con esta funcion se halla el Gcost teniendo en cuenta la posicion de analisis
float setGcost (AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2]){
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
	// definimos variables locales
	int distRows     = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
	float distanceToGo = 0;
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]

	// Luego calculamos el Gcost partiendo de que se tiene que pasar siempre por la posicion de analisis
	// Se analiza cual es la distancia que hay entre el punto de analisis y el punto de start
	distRows    = abs(ptrChanges->posAnalisis[0] -ptrChanges->startPos[0]);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	bfb8      	it	lt
 800248c:	425b      	neglt	r3, r3
 800248e:	61bb      	str	r3, [r7, #24]
	distColumns = abs(ptrChanges->posAnalisis[1]-ptrChanges->startPos[1]);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	bfb8      	it	lt
 800249e:	425b      	neglt	r3, r3
 80024a0:	617b      	str	r3, [r7, #20]

	if ((ptrChanges->posAnalisis[0] + posIJ[0] -1) != ptrChanges->posAnalisis[0]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	1e5a      	subs	r2, r3, #1
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d05d      	beq.n	8002572 <setGcost+0x10e>
	 && (ptrChanges->posAnalisis[1] + posIJ[1] -1) != ptrChanges->posAnalisis[1]){
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3304      	adds	r3, #4
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4413      	add	r3, r2
 80024c2:	1e5a      	subs	r2, r3, #1
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d052      	beq.n	8002572 <setGcost+0x10e>
		// Si estamos aqui es porque estamos en una de las 4 esquinas aledanias, por lo que la distancia a la columna o la fila
		// mas cercana a el punto de analisis es 1, se tendra que ir diagonalmente
		distanceToGo = parameters->diagonalDiastance;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	61fb      	str	r3, [r7, #28]

		// Luego se calcula la distancia que resta aplicando el mismo algoritmo de la heuristica
		//pero esta vez para el punto de analisis hasta el punto de inicio

		if (distRows <= distColumns){
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	dc25      	bgt.n	8002526 <setGcost+0xc2>
			// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
			// que de la columna del end, por lo que se debe ir diagonal
			distanceToGo += parameters->diagonalDiastance * distRows;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80024f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f6:	edc7 7a07 	vstr	s15, [r7, #28]
			// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
			// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
			// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	ed93 7a00 	vldr	s14, [r3]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	bfb8      	it	lt
 800250a:	425b      	neglt	r3, r3
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002518:	ed97 7a07 	vldr	s14, [r7, #28]
 800251c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002520:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8002524:	e077      	b.n	8002616 <setGcost+0x1b2>
		}else{
			// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
			// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
			distanceToGo += parameters->diagonalDiastance * distColumns;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	ed93 7a01 	vldr	s14, [r3, #4]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	ee07 3a90 	vmov	s15, r3
 8002532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253a:	ed97 7a07 	vldr	s14, [r7, #28]
 800253e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002542:	edc7 7a07 	vstr	s15, [r7, #28]
			// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
			// distRows y distColumns
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	ed93 7a00 	vldr	s14, [r3]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	bfb8      	it	lt
 8002556:	425b      	neglt	r3, r3
 8002558:	ee07 3a90 	vmov	s15, r3
 800255c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002564:	ed97 7a07 	vldr	s14, [r7, #28]
 8002568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256c:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8002570:	e051      	b.n	8002616 <setGcost+0x1b2>

	}else {
		// Si estamos aqui es porque estamos en una de las cuatro aristas, donde tanto el puntero como la posicion real del punto de analisis
		// coinciden en fila o en columna, la unica diferencia aqui es que se calcula paralelamente al punto de analisis y a partir de ahi
		// se aplica el algoritmo de la heuristica
		distanceToGo = parameters->parallelDistance;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	61fb      	str	r3, [r7, #28]

		if (distRows <= distColumns){
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	429a      	cmp	r2, r3
 800257e:	dc25      	bgt.n	80025cc <setGcost+0x168>
			distanceToGo += parameters->diagonalDiastance * distRows;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	ed93 7a01 	vldr	s14, [r3, #4]
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002594:	ed97 7a07 	vldr	s14, [r7, #28]
 8002598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259c:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	ed93 7a00 	vldr	s14, [r3]
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bfb8      	it	lt
 80025b0:	425b      	neglt	r3, r3
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025be:	ed97 7a07 	vldr	s14, [r7, #28]
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c6:	edc7 7a07 	vstr	s15, [r7, #28]
 80025ca:	e024      	b.n	8002616 <setGcost+0x1b2>
		}else{
			distanceToGo += parameters->diagonalDiastance * distColumns;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	ee07 3a90 	vmov	s15, r3
 80025d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80025e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e8:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	ed93 7a00 	vldr	s14, [r3]
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bfb8      	it	lt
 80025fc:	425b      	neglt	r3, r3
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260a:	ed97 7a07 	vldr	s14, [r7, #28]
 800260e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002612:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}
	ptrChanges->Gcost = distanceToGo;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	601a      	str	r2, [r3, #0]

	return ptrChanges->Gcost;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	ee07 3a90 	vmov	s15, r3
}
 8002624:	eeb0 0a67 	vmov.f32	s0, s15
 8002628:	3724      	adds	r7, #36	; 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <setFcost>:

// Con esta funcion seteamos el F cost en la matriz 2 de la posicion correspondiente
float setFcost (AStar_distancesHandler *parameters , costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6]){
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	603b      	str	r3, [r7, #0]

	// Esta funcion es simple ya que solo tenemos que calcular de la matriz 3x3 de analisis y sumar el H cost y el G cost para tener el F cost
	ptrChanges->Gcost = setGcost(parameters, ptrChanges, posIJ);
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f7ff ff0d 	bl	8002464 <setGcost>
 800264a:	eef0 7a40 	vmov.f32	s15, s0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	edc3 7a00 	vstr	s15, [r3]
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	ed93 7a00 	vldr	s14, [r3]
			          + matrixCosts[ptrChanges->posAnalisis[0]+ posIJ[0] -1][ptrChanges->posAnalisis[1]+ posIJ[1] -1][2]; // Hcost
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4413      	add	r3, r2
 8002664:	461a      	mov	r2, r3
 8002666:	23a8      	movs	r3, #168	; 0xa8
 8002668:	fb02 f303 	mul.w	r3, r2, r3
 800266c:	3ba8      	subs	r3, #168	; 0xa8
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	18d1      	adds	r1, r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3304      	adds	r3, #4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4413      	add	r3, r2
 800267e:	1e5a      	subs	r2, r3, #1
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	3308      	adds	r3, #8
 800268c:	edd3 7a00 	vldr	s15, [r3]
 8002690:	ee77 7a27 	vadd.f32	s15, s14, s15
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	edc3 7a01 	vstr	s15, [r3, #4]

	return ptrChanges->Fcost;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	ee07 3a90 	vmov	s15, r3

}
 80026a2:	eeb0 0a67 	vmov.f32	s0, s15
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <setParents>:

// Con esta funcion seteamos la posicion del parent de los aledanios,
void setParents (costChangesAndPos_t *ptrChanges, int posIJ[2]){
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
	// esta funcion es simple, ya que solo tenemos que setear de la matriz 3x3 de analisis y colocar en la posicion 4 y 5 el indice i y j correspondiente
	// al parent de cada punto aledanio, exceptuando el punto de analisis ya que ese tiene un parent propio

	if ((ptrChanges->posAnalisis[0] + posIJ[0] - 1) == ptrChanges->posAnalisis[0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4413      	add	r3, r2
 80026c0:	1e5a      	subs	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d10c      	bne.n	80026e4 <setParents+0x38>
	&&  (ptrChanges->posAnalisis[1] + posIJ[1] - 1) == ptrChanges->posAnalisis[1] ){
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	3304      	adds	r3, #4
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4413      	add	r3, r2
 80026d6:	1e5a      	subs	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d101      	bne.n	80026e4 <setParents+0x38>
		// Aqui no hacemos nada porque significa que estamos sobre el punto de analisis, y no queremos cambiarle el parent a este
		__NOP();
 80026e0:	bf00      	nop
 80026e2:	e00c      	b.n	80026fe <setParents+0x52>
	}else{
		// Si estamos aqui es porque estamos en alguno de los puntos aledanios
		ptrChanges->parent[0] = ptrChanges->posAnalisis[0];
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f883 2020 	strb.w	r2, [r3, #32]
		ptrChanges->parent[1] = ptrChanges->posAnalisis[1];
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <findStart>:

// En esta funcion nos centraremos en buscar la posicion i,j donde se almacena el punto de inicio del robot
int findStart(char Gridcopy[7][7], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 800270a:	b480      	push	{r7}
 800270c:	b087      	sub	sp, #28
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]

	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 's' de start
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8002716:	2300      	movs	r3, #0
 8002718:	75fb      	strb	r3, [r7, #23]
 800271a:	e020      	b.n	800275e <findStart+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 800271c:	2300      	movs	r3, #0
 800271e:	75bb      	strb	r3, [r7, #22]
 8002720:	e015      	b.n	800274e <findStart+0x44>
			if (Gridcopy[i][j] == 's'){
 8002722:	7dfa      	ldrb	r2, [r7, #23]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	441a      	add	r2, r3
 800272e:	7dbb      	ldrb	r3, [r7, #22]
 8002730:	5cd3      	ldrb	r3, [r2, r3]
 8002732:	2b73      	cmp	r3, #115	; 0x73
 8002734:	d107      	bne.n	8002746 <findStart+0x3c>
				ptrChanges->startPos[0] = i;
 8002736:	7dfa      	ldrb	r2, [r7, #23]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	625a      	str	r2, [r3, #36]	; 0x24
				ptrChanges->startPos[1] = j;
 800273c:	7dba      	ldrb	r2, [r7, #22]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	629a      	str	r2, [r3, #40]	; 0x28
				return SET;
 8002742:	2301      	movs	r3, #1
 8002744:	e011      	b.n	800276a <findStart+0x60>
			}else{
				__NOP();
 8002746:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8002748:	7dbb      	ldrb	r3, [r7, #22]
 800274a:	3301      	adds	r3, #1
 800274c:	75bb      	strb	r3, [r7, #22]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	7a5b      	ldrb	r3, [r3, #9]
 8002752:	7dba      	ldrb	r2, [r7, #22]
 8002754:	429a      	cmp	r2, r3
 8002756:	d3e4      	bcc.n	8002722 <findStart+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	3301      	adds	r3, #1
 800275c:	75fb      	strb	r3, [r7, #23]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	7a1b      	ldrb	r3, [r3, #8]
 8002762:	7dfa      	ldrb	r2, [r7, #23]
 8002764:	429a      	cmp	r2, r3
 8002766:	d3d9      	bcc.n	800271c <findStart+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 8002768:	2300      	movs	r3, #0



}
 800276a:	4618      	mov	r0, r3
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <findEnd>:
int findEnd(char Gridcopy[7][7], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 8002776:	b480      	push	{r7}
 8002778:	b087      	sub	sp, #28
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]


	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 'e' de end
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8002782:	2300      	movs	r3, #0
 8002784:	75fb      	strb	r3, [r7, #23]
 8002786:	e020      	b.n	80027ca <findEnd+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8002788:	2300      	movs	r3, #0
 800278a:	75bb      	strb	r3, [r7, #22]
 800278c:	e015      	b.n	80027ba <findEnd+0x44>
			if (Gridcopy[i][j] == 'e'){
 800278e:	7dfa      	ldrb	r2, [r7, #23]
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	441a      	add	r2, r3
 800279a:	7dbb      	ldrb	r3, [r7, #22]
 800279c:	5cd3      	ldrb	r3, [r2, r3]
 800279e:	2b65      	cmp	r3, #101	; 0x65
 80027a0:	d107      	bne.n	80027b2 <findEnd+0x3c>
				ptrChanges->endPos[0] = i;
 80027a2:	7dfa      	ldrb	r2, [r7, #23]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c
				ptrChanges->endPos[1] = j;
 80027a8:	7dba      	ldrb	r2, [r7, #22]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
				return SET;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e011      	b.n	80027d6 <findEnd+0x60>
			}else{
				__NOP();
 80027b2:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 80027b4:	7dbb      	ldrb	r3, [r7, #22]
 80027b6:	3301      	adds	r3, #1
 80027b8:	75bb      	strb	r3, [r7, #22]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	7a5b      	ldrb	r3, [r3, #9]
 80027be:	7dba      	ldrb	r2, [r7, #22]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d3e4      	bcc.n	800278e <findEnd+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
 80027c6:	3301      	adds	r3, #1
 80027c8:	75fb      	strb	r3, [r7, #23]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	7a1b      	ldrb	r3, [r3, #8]
 80027ce:	7dfa      	ldrb	r2, [r7, #23]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d3d9      	bcc.n	8002788 <findEnd+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 80027d4:	2300      	movs	r3, #0

}
 80027d6:	4618      	mov	r0, r3
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <buildMatrixCopy>:
//
//}

//Con esta funcion se reparte la memoria para la matriz de entrada desde la terminal serial

void buildMatrixCopy(AStar_distancesHandler *parameters, char terminalGrid[7][7], char Gridcopy[7][7]){
 80027e2:	b480      	push	{r7}
 80027e4:	b087      	sub	sp, #28
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]


	// Seteamos los valores dentro de la matriz infoGrid de la entrada respectiva
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 80027ee:	2300      	movs	r3, #0
 80027f0:	75fb      	strb	r3, [r7, #23]
 80027f2:	e03d      	b.n	8002870 <buildMatrixCopy+0x8e>
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 80027f4:	2300      	movs	r3, #0
 80027f6:	75bb      	strb	r3, [r7, #22]
 80027f8:	e031      	b.n	800285e <buildMatrixCopy+0x7c>

			if (j == parameters->numberOfColumns){
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	7a5b      	ldrb	r3, [r3, #9]
 80027fe:	7dba      	ldrb	r2, [r7, #22]
 8002800:	429a      	cmp	r2, r3
 8002802:	d109      	bne.n	8002818 <buildMatrixCopy+0x36>
				// Agregamos al a la posicion penultima, agregamos una terminacion de salto de linea para ipresion en consola
				Gridcopy[i][j] = '\r';
 8002804:	7dfa      	ldrb	r2, [r7, #23]
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	441a      	add	r2, r3
 8002810:	7dbb      	ldrb	r3, [r7, #22]
 8002812:	210d      	movs	r1, #13
 8002814:	54d1      	strb	r1, [r2, r3]
 8002816:	e01f      	b.n	8002858 <buildMatrixCopy+0x76>
			}else if (j == parameters->numberOfColumns + 1){
 8002818:	7dba      	ldrb	r2, [r7, #22]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	7a5b      	ldrb	r3, [r3, #9]
 800281e:	3301      	adds	r3, #1
 8002820:	429a      	cmp	r2, r3
 8002822:	d109      	bne.n	8002838 <buildMatrixCopy+0x56>
				// Agregamos al final la terminacion nula para que cada fila sea un string completo
				Gridcopy[i][j] = '\0';
 8002824:	7dfa      	ldrb	r2, [r7, #23]
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	441a      	add	r2, r3
 8002830:	7dbb      	ldrb	r3, [r7, #22]
 8002832:	2100      	movs	r1, #0
 8002834:	54d1      	strb	r1, [r2, r3]
 8002836:	e00f      	b.n	8002858 <buildMatrixCopy+0x76>
			}else{
				Gridcopy[i][j] = terminalGrid[i][j];
 8002838:	7dfa      	ldrb	r2, [r7, #23]
 800283a:	4613      	mov	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	18d0      	adds	r0, r2, r3
 8002844:	7db9      	ldrb	r1, [r7, #22]
 8002846:	7dfa      	ldrb	r2, [r7, #23]
 8002848:	4613      	mov	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	441a      	add	r2, r3
 8002852:	7dbb      	ldrb	r3, [r7, #22]
 8002854:	5c41      	ldrb	r1, [r0, r1]
 8002856:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8002858:	7dbb      	ldrb	r3, [r7, #22]
 800285a:	3301      	adds	r3, #1
 800285c:	75bb      	strb	r3, [r7, #22]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	7a5b      	ldrb	r3, [r3, #9]
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	7dbb      	ldrb	r3, [r7, #22]
 8002866:	429a      	cmp	r2, r3
 8002868:	dac7      	bge.n	80027fa <buildMatrixCopy+0x18>
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 800286a:	7dfb      	ldrb	r3, [r7, #23]
 800286c:	3301      	adds	r3, #1
 800286e:	75fb      	strb	r3, [r7, #23]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	7a1b      	ldrb	r3, [r3, #8]
 8002874:	7dfa      	ldrb	r2, [r7, #23]
 8002876:	429a      	cmp	r2, r3
 8002878:	d3bc      	bcc.n	80027f4 <buildMatrixCopy+0x12>
			}
		}
	}

}
 800287a:	bf00      	nop
 800287c:	bf00      	nop
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <getRows>:



// Se define la funcion de tomar cantidad de filas recorriendo la cantidad de String que tenga el puntero de arreglos matrix hasta que se
// encuentre con el puntero nulo.
uint8_t getRows(char terminalGrid[7][7]){
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

	uint8_t counterRows = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	73fb      	strb	r3, [r7, #15]
	char letter = '\0';
 8002894:	2300      	movs	r3, #0
 8002896:	73bb      	strb	r3, [r7, #14]
	(void)letter;
	while(terminalGrid[counterRows][0] != '\0'){
 8002898:	e00a      	b.n	80028b0 <getRows+0x28>
		letter = terminalGrid[counterRows][0];
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	73bb      	strb	r3, [r7, #14]
		counterRows++;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	3301      	adds	r3, #1
 80028ae:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[counterRows][0] != '\0'){
 80028b0:	7bfa      	ldrb	r2, [r7, #15]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	4413      	add	r3, r2
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1eb      	bne.n	800289a <getRows+0x12>

	}

	return counterRows;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <getColums>:

//Se define la funcion de tomar cantidad de columnas recorriendo el string hasta encontrar el elemento nulo char
uint8_t getColums(char terminalGrid[7][7]){
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

	uint8_t counterColumns = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 80028dc:	e002      	b.n	80028e4 <getColums+0x14>

		counterColumns++;
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	3301      	adds	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	5cd3      	ldrb	r3, [r2, r3]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f7      	bne.n	80028de <getColums+0xe>

	}

	return counterColumns;
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <findLesserValue>:

// esta funcion nos almacena en uno de los arrays volatiles de la estructura costChangesAndPos_t la posicion del valor Fcost o H cost mas pequeño,
// Se debe identificar con un string si se quiere hallar el Fcost mas pequeño o el Hcost mas pequeño, asi, "Fcost" si se quiere hallar el F cost o
// "Hcost" si se quiere hallar el H cost
void findLesserValue(costChangesAndPos_t *ptrChanges, float decisionMtrx[500][4], uint8_t contador){
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	4613      	mov	r3, r2
 8002908:	71fb      	strb	r3, [r7, #7]
	// seteamos las variables locales
	uint8_t i;
	uint8_t j;
	float value_1 = 0;
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]
	float value_2 = 0;
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	617b      	str	r3, [r7, #20]

	// El algoritmo que se usará es que se recorrerá cada una de las posiciones y se analizara con las demas , excpliyendo obviamente
	// la posicion central


	for(i = 0; i<contador ; i++){
 8002916:	2300      	movs	r3, #0
 8002918:	77fb      	strb	r3, [r7, #31]
 800291a:	e04d      	b.n	80029b8 <findLesserValue+0xbc>
		for(j = 0; j<contador ; j++){
 800291c:	2300      	movs	r3, #0
 800291e:	77bb      	strb	r3, [r7, #30]
 8002920:	e034      	b.n	800298c <findLesserValue+0x90>
			if (i == j){
 8002922:	7ffa      	ldrb	r2, [r7, #31]
 8002924:	7fbb      	ldrb	r3, [r7, #30]
 8002926:	429a      	cmp	r2, r3
 8002928:	d101      	bne.n	800292e <findLesserValue+0x32>
				// Si estamos aqui es porque estamos analizando el mismo punto, y nosotros queremos es analizar a sus compañeros solamente
				__NOP();
 800292a:	bf00      	nop
 800292c:	e02b      	b.n	8002986 <findLesserValue+0x8a>
			}else if (decisionMtrx[i][0]
 800292e:	7ffb      	ldrb	r3, [r7, #31]
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	4413      	add	r3, r2
 8002936:	ed93 7a00 	vldr	s14, [r3]
					< decisionMtrx[j][0]){
 800293a:	7fbb      	ldrb	r3, [r7, #30]
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	4413      	add	r3, r2
 8002942:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 8002946:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294e:	d41a      	bmi.n	8002986 <findLesserValue+0x8a>
				// Si estamos aca es porque podemos hacer la comparación
				// Si estamos aca es porque efectivamente el Fcost es menor, Solo dejamos pasar el ciclo para asegurarnos de que el j
				// pueda llegar hasta su valor final permitido
			}else if (decisionMtrx[i][0]
 8002950:	7ffb      	ldrb	r3, [r7, #31]
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	4413      	add	r3, r2
 8002958:	ed93 7a00 	vldr	s14, [r3]
				   == decisionMtrx[j][0]){
 800295c:	7fbb      	ldrb	r3, [r7, #30]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	4413      	add	r3, r2
 8002964:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 8002968:	eeb4 7a67 	vcmp.f32	s14, s15
 800296c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002970:	d104      	bne.n	800297c <findLesserValue+0x80>
				// Si estamos aqui es porque el programa encontro mas de un  minimo un valor igual al analizado
				ptrChanges->equalFcost = SET;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800297a:	e004      	b.n	8002986 <findLesserValue+0x8a>
			}else{
				// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
				// Se resetea la bandera que decia que habia un vakor igual, esto debe de ser solo cierto si el valor que es
				// igual es el menor de la matriz
				ptrChanges->equalFcost = RESET;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				break;
 8002984:	e006      	b.n	8002994 <findLesserValue+0x98>
		for(j = 0; j<contador ; j++){
 8002986:	7fbb      	ldrb	r3, [r7, #30]
 8002988:	3301      	adds	r3, #1
 800298a:	77bb      	strb	r3, [r7, #30]
 800298c:	7fba      	ldrb	r2, [r7, #30]
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	429a      	cmp	r2, r3
 8002992:	d3c6      	bcc.n	8002922 <findLesserValue+0x26>
			}

		}//Terminacion de un for
		if (j == contador){
 8002994:	7fba      	ldrb	r2, [r7, #30]
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	429a      	cmp	r2, r3
 800299a:	d10a      	bne.n	80029b2 <findLesserValue+0xb6>
			// Si entramos en esta condicion es porque el contador j logro llegar a su posicion final
			// Si entramos aqui es porque se logro analizar todo el arreglo y se encontro la posicion que corresponde con el Fcost mas pequeño
			// de todos, tambien guardamos el valor mas pequeño, si este se repite, se sabra gracias a la bandera
			// La posicion mas pequeña del F cost corresponde con la que se etsaba analizando en la posición i
			ptrChanges->lesserFcostPosition = i;
 800299c:	7ffa      	ldrb	r2, [r7, #31]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	635a      	str	r2, [r3, #52]	; 0x34
			// Almacenamos en lesserFcost el valor de ese Fcost mas pequeño que se hallo
			ptrChanges->lesserFcost = decisionMtrx[i][0];
 80029a2:	7ffb      	ldrb	r3, [r7, #31]
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	4413      	add	r3, r2
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40
			// paramos el primer for
			break;
 80029b0:	e006      	b.n	80029c0 <findLesserValue+0xc4>
	for(i = 0; i<contador ; i++){
 80029b2:	7ffb      	ldrb	r3, [r7, #31]
 80029b4:	3301      	adds	r3, #1
 80029b6:	77fb      	strb	r3, [r7, #31]
 80029b8:	7ffa      	ldrb	r2, [r7, #31]
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d3ad      	bcc.n	800291c <findLesserValue+0x20>

	}//Terminacion del otro for


	// Ahora hallaremos el valor mas pequeño de H cost, solo en el caso de que la bandera correspondiente se haya levantado
	if (ptrChanges->equalFcost){
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d076      	beq.n	8002ab8 <findLesserValue+0x1bc>
		// Si estamos aqui es porque si hay mas de un valor de F cost que corresponde con el valor mas pequeño, desempatamos buscando el Hcost mas pequeño
		// Para ello recorreremos la matriz a analizar de nuevo pero esta vez solo buscando aquellos valores que correspondan con el valor hallado de Fcost

		for(i = 0; i<contador ; i++){
 80029ca:	2300      	movs	r3, #0
 80029cc:	77fb      	strb	r3, [r7, #31]
 80029ce:	e06e      	b.n	8002aae <findLesserValue+0x1b2>
			value_1 = decisionMtrx[i][0] / ptrChanges->lesserFcost;
 80029d0:	7ffb      	ldrb	r3, [r7, #31]
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	4413      	add	r3, r2
 80029d8:	edd3 6a00 	vldr	s13, [r3]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80029e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029e6:	edc7 7a06 	vstr	s15, [r7, #24]
			for(j = 0; j<contador ; j++){
 80029ea:	2300      	movs	r3, #0
 80029ec:	77bb      	strb	r3, [r7, #30]
 80029ee:	e045      	b.n	8002a7c <findLesserValue+0x180>
				value_2 = decisionMtrx[j][0] / ptrChanges->lesserFcost;
 80029f0:	7fbb      	ldrb	r3, [r7, #30]
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	4413      	add	r3, r2
 80029f8:	edd3 6a00 	vldr	s13, [r3]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a06:	edc7 7a05 	vstr	s15, [r7, #20]
 				if (i == j){
 8002a0a:	7ffa      	ldrb	r2, [r7, #31]
 8002a0c:	7fbb      	ldrb	r3, [r7, #30]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d101      	bne.n	8002a16 <findLesserValue+0x11a>
					// Si estamos aqui es porque estamos analizando la posición de analisis, por lo que lo ignoramos
					__NOP();
 8002a12:	bf00      	nop
 8002a14:	e02f      	b.n	8002a76 <findLesserValue+0x17a>
				}else if (value_1 == 1 && value_2 == 1){
 8002a16:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a1e:	eef4 7a47 	vcmp.f32	s15, s14
 8002a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a26:	d11c      	bne.n	8002a62 <findLesserValue+0x166>
 8002a28:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a30:	eef4 7a47 	vcmp.f32	s15, s14
 8002a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a38:	d113      	bne.n	8002a62 <findLesserValue+0x166>
					// Si estamos aca es porque podemos hacer la comparación pero esta vez con la matriz heuristica
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8002a3a:	7ffb      	ldrb	r3, [r7, #31]
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	4413      	add	r3, r2
 8002a42:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a46:	7fbb      	ldrb	r3, [r7, #30]
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5a:	d900      	bls.n	8002a5e <findLesserValue+0x162>
						// Si estamos aca es porque efectivamente el Hcost es menor o igual al resto de Hcost
						__NOP();
					}else{
						// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
						break;
 8002a5c:	e014      	b.n	8002a88 <findLesserValue+0x18c>
						__NOP();
 8002a5e:	bf00      	nop
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8002a60:	e009      	b.n	8002a76 <findLesserValue+0x17a>
					}
				}else if (value_1 == 1){
 8002a62:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a6a:	eef4 7a47 	vcmp.f32	s15, s14
 8002a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a72:	d108      	bne.n	8002a86 <findLesserValue+0x18a>
					// Si estamos aqui es porque aun podemos seguir comparando, por lo que el algoritmo debe de seguir bucando a sus iguales
					__NOP();
 8002a74:	bf00      	nop
			for(j = 0; j<contador ; j++){
 8002a76:	7fbb      	ldrb	r3, [r7, #30]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	77bb      	strb	r3, [r7, #30]
 8002a7c:	7fba      	ldrb	r2, [r7, #30]
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d3b5      	bcc.n	80029f0 <findLesserValue+0xf4>
 8002a84:	e000      	b.n	8002a88 <findLesserValue+0x18c>
				}else {
					// Estamos en un valor que no nos interesa evaluar, por lo que lo ignoramos y salimos
					break;
 8002a86:	bf00      	nop
				}

			}//Terminacion de un for
			if (j == contador){
 8002a88:	7fba      	ldrb	r2, [r7, #30]
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d10b      	bne.n	8002aa8 <findLesserValue+0x1ac>
				// Si entramos aqui es porque se logro analizar toda la matriz y se encontro la posicion que corresponde con la posicion mas pequeña
				// de todas, tambien guardamos el valor mas pequeño, es muy poco probable, por no decir imposible que tengamos una misma heuristica
				//repetida
				ptrChanges->lesserHcostPosition = i;
 8002a90:	7ffa      	ldrb	r2, [r7, #31]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	639a      	str	r2, [r3, #56]	; 0x38
				//Almacenamos en lesserHcost el valor del Hcost mas pequeño encontrado
				ptrChanges->lesserHcost = decisionMtrx[i][1];
 8002a96:	7ffb      	ldrb	r3, [r7, #31]
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	645a      	str	r2, [r3, #68]	; 0x44
				// Paramos el primer for
				break;
 8002aa4:	bf00      	nop
	}else{
		// Si estamos aca es porque no se alzo la bandera que indica que hay mas de un F cost igual por lo que no hacemos nada
		__NOP();
	}

}
 8002aa6:	e008      	b.n	8002aba <findLesserValue+0x1be>
		for(i = 0; i<contador ; i++){
 8002aa8:	7ffb      	ldrb	r3, [r7, #31]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	77fb      	strb	r3, [r7, #31]
 8002aae:	7ffa      	ldrb	r2, [r7, #31]
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d38c      	bcc.n	80029d0 <findLesserValue+0xd4>
}
 8002ab6:	e000      	b.n	8002aba <findLesserValue+0x1be>
		__NOP();
 8002ab8:	bf00      	nop
}
 8002aba:	bf00      	nop
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <initSerialComunication>:
	// Liberamos el arreglo de punteros
	free(shorterWayArray);

}
// Con las siguientes funciones inicializamos a los handler necesarios para poder usar la comunicacion serial desde aqui y no desde el main
void initSerialComunication (USART_Handler_t *ptrHandlerUsart, GPIO_Handler_t *ptrHandlerRx, GPIO_Handler_t *ptrHandlerTx){
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]

	// Inicializamos para el modulo Usart, no se necesita configurar ya que ya en el main se configuro con el handler específico
	handlerAstarUsart.ptrUSARTx                      = ptrHandlerUsart->ptrUSARTx;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a2d      	ldr	r2, [pc, #180]	; (8002b90 <initSerialComunication+0xc8>)
 8002ada:	6013      	str	r3, [r2, #0]
	handlerAstarUsart.USART_Config.USART_MCUvelocity = ptrHandlerUsart->USART_Config.USART_MCUvelocity;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a2b      	ldr	r2, [pc, #172]	; (8002b90 <initSerialComunication+0xc8>)
 8002ae2:	60d3      	str	r3, [r2, #12]
	handlerAstarUsart.USART_Config.USART_baudrate    = ptrHandlerUsart->USART_Config.USART_baudrate;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	79da      	ldrb	r2, [r3, #7]
 8002ae8:	4b29      	ldr	r3, [pc, #164]	; (8002b90 <initSerialComunication+0xc8>)
 8002aea:	71da      	strb	r2, [r3, #7]
	handlerAstarUsart.USART_Config.USART_enableInTx  = ptrHandlerUsart->USART_Config.USART_enableInTx;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	791a      	ldrb	r2, [r3, #4]
 8002af0:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <initSerialComunication+0xc8>)
 8002af2:	711a      	strb	r2, [r3, #4]
	handlerAstarUsart.USART_Config.USART_mode        = ptrHandlerUsart->USART_Config.USART_mode;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	799a      	ldrb	r2, [r3, #6]
 8002af8:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <initSerialComunication+0xc8>)
 8002afa:	719a      	strb	r2, [r3, #6]
	handlerAstarUsart.USART_Config.USART_parity      = ptrHandlerUsart->USART_Config.USART_parity;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	7a5a      	ldrb	r2, [r3, #9]
 8002b00:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <initSerialComunication+0xc8>)
 8002b02:	725a      	strb	r2, [r3, #9]
	handlerAstarUsart.USART_Config.USART_stopbits    = ptrHandlerUsart->USART_Config.USART_stopbits;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	7a9a      	ldrb	r2, [r3, #10]
 8002b08:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <initSerialComunication+0xc8>)
 8002b0a:	729a      	strb	r2, [r3, #10]
	handlerAstarUsart.USART_Config.USART_datasize    = ptrHandlerUsart->USART_Config.USART_datasize;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	7a1a      	ldrb	r2, [r3, #8]
 8002b10:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <initSerialComunication+0xc8>)
 8002b12:	721a      	strb	r2, [r3, #8]

	// Hacemos lo mismo con los pines Rx y Tx del GPIO
	handlerAstarPinRx.pGPIOx                             = ptrHandlerRx->pGPIOx;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a1e      	ldr	r2, [pc, #120]	; (8002b94 <initSerialComunication+0xcc>)
 8002b1a:	6013      	str	r3, [r2, #0]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerRx->GPIO_PinConfig.GPIO_PinAltFunMode;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	7a5a      	ldrb	r2, [r3, #9]
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <initSerialComunication+0xcc>)
 8002b22:	725a      	strb	r2, [r3, #9]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerRx->GPIO_PinConfig.GPIO_PinMode;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	795a      	ldrb	r2, [r3, #5]
 8002b28:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <initSerialComunication+0xcc>)
 8002b2a:	715a      	strb	r2, [r3, #5]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinOPType;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	7a1a      	ldrb	r2, [r3, #8]
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <initSerialComunication+0xcc>)
 8002b32:	721a      	strb	r2, [r3, #8]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinNumber;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	791a      	ldrb	r2, [r3, #4]
 8002b38:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <initSerialComunication+0xcc>)
 8002b3a:	711a      	strb	r2, [r3, #4]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerRx->GPIO_PinConfig.GPIO_PinPuPdControl;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	79da      	ldrb	r2, [r3, #7]
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <initSerialComunication+0xcc>)
 8002b42:	71da      	strb	r2, [r3, #7]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerRx->GPIO_PinConfig.GPIO_PinSpeed;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	799a      	ldrb	r2, [r3, #6]
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <initSerialComunication+0xcc>)
 8002b4a:	719a      	strb	r2, [r3, #6]

	handlerAstarPinTx.pGPIOx                             = ptrHandlerTx->pGPIOx;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a11      	ldr	r2, [pc, #68]	; (8002b98 <initSerialComunication+0xd0>)
 8002b52:	6013      	str	r3, [r2, #0]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerTx->GPIO_PinConfig.GPIO_PinAltFunMode;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	7a5a      	ldrb	r2, [r3, #9]
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <initSerialComunication+0xd0>)
 8002b5a:	725a      	strb	r2, [r3, #9]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerTx->GPIO_PinConfig.GPIO_PinMode;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	795a      	ldrb	r2, [r3, #5]
 8002b60:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <initSerialComunication+0xd0>)
 8002b62:	715a      	strb	r2, [r3, #5]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinOPType;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7a1a      	ldrb	r2, [r3, #8]
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <initSerialComunication+0xd0>)
 8002b6a:	721a      	strb	r2, [r3, #8]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinNumber;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	791a      	ldrb	r2, [r3, #4]
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <initSerialComunication+0xd0>)
 8002b72:	711a      	strb	r2, [r3, #4]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerTx->GPIO_PinConfig.GPIO_PinPuPdControl;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	79da      	ldrb	r2, [r3, #7]
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <initSerialComunication+0xd0>)
 8002b7a:	71da      	strb	r2, [r3, #7]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerTx->GPIO_PinConfig.GPIO_PinSpeed;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	799a      	ldrb	r2, [r3, #6]
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <initSerialComunication+0xd0>)
 8002b82:	719a      	strb	r2, [r3, #6]

	// Ya seteados estos handler en teoria podriamos mandar por terminarl serial desde este .c

}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	200003fc 	.word	0x200003fc
 8002b94:	20000490 	.word	0x20000490
 8002b98:	2000049c 	.word	0x2000049c

08002b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	db0b      	blt.n	8002bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	4907      	ldr	r1, [pc, #28]	; (8002bd4 <__NVIC_EnableIRQ+0x38>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	e000e100 	.word	0xe000e100

08002bd8 <BasicTimer_Config>:
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
	BasicTimer_Config(&handlerTIM4_time);

}

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002be8:	b672      	cpsid	i
}
 8002bea:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a85      	ldr	r2, [pc, #532]	; (8002e08 <BasicTimer_Config+0x230>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d106      	bne.n	8002c04 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8002bf6:	4b85      	ldr	r3, [pc, #532]	; (8002e0c <BasicTimer_Config+0x234>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	4a84      	ldr	r2, [pc, #528]	; (8002e0c <BasicTimer_Config+0x234>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6453      	str	r3, [r2, #68]	; 0x44
 8002c02:	e030      	b.n	8002c66 <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0c:	d106      	bne.n	8002c1c <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002c0e:	4b7f      	ldr	r3, [pc, #508]	; (8002e0c <BasicTimer_Config+0x234>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a7e      	ldr	r2, [pc, #504]	; (8002e0c <BasicTimer_Config+0x234>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1a:	e024      	b.n	8002c66 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a7b      	ldr	r2, [pc, #492]	; (8002e10 <BasicTimer_Config+0x238>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d106      	bne.n	8002c34 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002c26:	4b79      	ldr	r3, [pc, #484]	; (8002e0c <BasicTimer_Config+0x234>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4a78      	ldr	r2, [pc, #480]	; (8002e0c <BasicTimer_Config+0x234>)
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	6413      	str	r3, [r2, #64]	; 0x40
 8002c32:	e018      	b.n	8002c66 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a76      	ldr	r2, [pc, #472]	; (8002e14 <BasicTimer_Config+0x23c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d106      	bne.n	8002c4c <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002c3e:	4b73      	ldr	r3, [pc, #460]	; (8002e0c <BasicTimer_Config+0x234>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	4a72      	ldr	r2, [pc, #456]	; (8002e0c <BasicTimer_Config+0x234>)
 8002c44:	f043 0304 	orr.w	r3, r3, #4
 8002c48:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4a:	e00c      	b.n	8002c66 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a71      	ldr	r2, [pc, #452]	; (8002e18 <BasicTimer_Config+0x240>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d106      	bne.n	8002c64 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002c56:	4b6d      	ldr	r3, [pc, #436]	; (8002e0c <BasicTimer_Config+0x234>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	4a6c      	ldr	r2, [pc, #432]	; (8002e0c <BasicTimer_Config+0x234>)
 8002c5c:	f043 0308 	orr.w	r3, r3, #8
 8002c60:	6413      	str	r3, [r2, #64]	; 0x40
 8002c62:	e000      	b.n	8002c66 <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8002c64:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c74:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6892      	ldr	r2, [r2, #8]
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	791b      	ldrb	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f040 80d3 	bne.w	8002e30 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0210 	bic.w	r2, r2, #16
 8002c98:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ca4:	d022      	beq.n	8002cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2bc8      	cmp	r3, #200	; 0xc8
 8002caa:	d01f      	beq.n	8002cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002cb2:	d01b      	beq.n	8002cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002cba:	d017      	beq.n	8002cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cc2:	d013      	beq.n	8002cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002cca:	d00f      	beq.n	8002cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002cd2:	d00b      	beq.n	8002cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002cda:	d007      	beq.n	8002cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002ce2:	d003      	beq.n	8002cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cea:	d10b      	bne.n	8002d04 <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	2264      	movs	r2, #100	; 0x64
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	3a01      	subs	r2, #1
 8002d00:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d02:	e07c      	b.n	8002dfe <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002d0a:	d029      	beq.n	8002d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002d12:	d025      	beq.n	8002d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d020      	beq.n	8002d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002d24:	d01c      	beq.n	8002d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d017      	beq.n	8002d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f241 7270 	movw	r2, #6000	; 0x1770
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d012      	beq.n	8002d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00d      	beq.n	8002d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002d4a:	d009      	beq.n	8002d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f242 3228 	movw	r2, #9000	; 0x2328
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d004      	beq.n	8002d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d10c      	bne.n	8002d7a <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	3a01      	subs	r2, #1
 8002d76:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d78:	e041      	b.n	8002dfe <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002d80:	d028      	beq.n	8002dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d023      	beq.n	8002dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f247 5230 	movw	r2, #30000	; 0x7530
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d01e      	beq.n	8002dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d019      	beq.n	8002dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d014      	beq.n	8002dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00f      	beq.n	8002dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4a19      	ldr	r2, [pc, #100]	; (8002e1c <BasicTimer_Config+0x244>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00b      	beq.n	8002dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4a18      	ldr	r2, [pc, #96]	; (8002e20 <BasicTimer_Config+0x248>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d007      	beq.n	8002dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <BasicTimer_Config+0x24c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4a16      	ldr	r2, [pc, #88]	; (8002e28 <BasicTimer_Config+0x250>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d108      	bne.n	8002de6 <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	3a01      	subs	r2, #1
 8002de2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002de4:	e00b      	b.n	8002dfe <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	4a10      	ldr	r2, [pc, #64]	; (8002e2c <BasicTimer_Config+0x254>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	08db      	lsrs	r3, r3, #3
 8002df2:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	3a01      	subs	r2, #1
 8002dfc:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2200      	movs	r2, #0
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24
 8002e06:	e027      	b.n	8002e58 <BasicTimer_Config+0x280>
 8002e08:	40010000 	.word	0x40010000
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40000400 	.word	0x40000400
 8002e14:	40000800 	.word	0x40000800
 8002e18:	40000c00 	.word	0x40000c00
 8002e1c:	00011170 	.word	0x00011170
 8002e20:	00013880 	.word	0x00013880
 8002e24:	00015f90 	.word	0x00015f90
 8002e28:	000186a0 	.word	0x000186a0
 8002e2c:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0210 	orr.w	r2, r2, #16
 8002e3e:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3a01      	subs	r2, #1
 8002e4a:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3a01      	subs	r2, #1
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	7c1b      	ldrb	r3, [r3, #16]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d12d      	bne.n	8002ebc <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e78:	d103      	bne.n	8002e82 <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 8002e7a:	201c      	movs	r0, #28
 8002e7c:	f7ff fe8e 	bl	8002b9c <__NVIC_EnableIRQ>
 8002e80:	e024      	b.n	8002ecc <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a14      	ldr	r2, [pc, #80]	; (8002ed8 <BasicTimer_Config+0x300>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d103      	bne.n	8002e94 <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8002e8c:	201d      	movs	r0, #29
 8002e8e:	f7ff fe85 	bl	8002b9c <__NVIC_EnableIRQ>
 8002e92:	e01b      	b.n	8002ecc <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a10      	ldr	r2, [pc, #64]	; (8002edc <BasicTimer_Config+0x304>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d103      	bne.n	8002ea6 <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 8002e9e:	201e      	movs	r0, #30
 8002ea0:	f7ff fe7c 	bl	8002b9c <__NVIC_EnableIRQ>
 8002ea4:	e012      	b.n	8002ecc <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a0d      	ldr	r2, [pc, #52]	; (8002ee0 <BasicTimer_Config+0x308>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d103      	bne.n	8002eb8 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 8002eb0:	2032      	movs	r0, #50	; 0x32
 8002eb2:	f7ff fe73 	bl	8002b9c <__NVIC_EnableIRQ>
 8002eb6:	e009      	b.n	8002ecc <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 8002eb8:	bf00      	nop
 8002eba:	e007      	b.n	8002ecc <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ecc:	b662      	cpsie	i
}
 8002ece:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40000400 	.word	0x40000400
 8002edc:	40000800 	.word	0x40000800
 8002ee0:	40000c00 	.word	0x40000c00

08002ee4 <BasicTimer2_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer2_Callback(void){
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002ee8:	bf00      	nop
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002ef8:	bf00      	nop
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002f08:	bf00      	nop
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002f18:	bf00      	nop
}
 8002f1a:	bf00      	nop
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002f28:	bf00      	nop
}
 8002f2a:	bf00      	nop
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002f38:	bf00      	nop
}
 8002f3a:	bf00      	nop
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002f48:	bf00      	nop
}
 8002f4a:	bf00      	nop
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002f58:	bf00      	nop
}
 8002f5a:	bf00      	nop
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002f68:	bf00      	nop
}
 8002f6a:	bf00      	nop
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002f78:	bf00      	nop
}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002f88:	bf00      	nop
}
 8002f8a:	bf00      	nop
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002f98:	bf00      	nop
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002fa8:	bf00      	nop
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002fb8:	bf00      	nop
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002fc8:	bf00      	nop
}
 8002fca:	bf00      	nop
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002fd8:	bf00      	nop
}
 8002fda:	bf00      	nop
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002fe8:	bf00      	nop
}
 8002fea:	bf00      	nop
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002ff8:	bf00      	nop
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8003008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8003016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 8003026:	f7ff ff5d 	bl	8002ee4 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 800302a:	e066      	b.n	80030fa <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 800302c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d012      	beq.n	8003060 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 800303a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003044:	f023 0302 	bic.w	r3, r3, #2
 8003048:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 800304a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003058:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 800305a:	f7ff ff5b 	bl	8002f14 <Capture_TIM2_Ch1_Callback>
}
 800305e:	e04c      	b.n	80030fa <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8003060:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	d012      	beq.n	8003094 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 800306e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003078:	f023 0304 	bic.w	r3, r3, #4
 800307c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 800307e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003088:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800308c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 800308e:	f7ff ff49 	bl	8002f24 <Capture_TIM2_Ch2_Callback>
}
 8003092:	e032      	b.n	80030fa <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8003094:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d012      	beq.n	80030c8 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 80030a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030ac:	f023 0308 	bic.w	r3, r3, #8
 80030b0:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 80030b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030c0:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 80030c2:	f7ff ff37 	bl	8002f34 <Capture_TIM2_Ch3_Callback>
}
 80030c6:	e018      	b.n	80030fa <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 80030c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d011      	beq.n	80030fa <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 80030d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030e0:	f023 0310 	bic.w	r3, r3, #16
 80030e4:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 80030e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030f4:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 80030f6:	f7ff ff25 	bl	8002f44 <Capture_TIM2_Ch4_Callback>
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8003104:	4b31      	ldr	r3, [pc, #196]	; (80031cc <TIM3_IRQHandler+0xcc>)
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 8003110:	4b2e      	ldr	r3, [pc, #184]	; (80031cc <TIM3_IRQHandler+0xcc>)
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	4a2d      	ldr	r2, [pc, #180]	; (80031cc <TIM3_IRQHandler+0xcc>)
 8003116:	f023 0301 	bic.w	r3, r3, #1
 800311a:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 800311c:	f7fd ffe6 	bl	80010ec <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 8003120:	e052      	b.n	80031c8 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 8003122:	4b2a      	ldr	r3, [pc, #168]	; (80031cc <TIM3_IRQHandler+0xcc>)
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00e      	beq.n	800314c <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 800312e:	4b27      	ldr	r3, [pc, #156]	; (80031cc <TIM3_IRQHandler+0xcc>)
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	4a26      	ldr	r2, [pc, #152]	; (80031cc <TIM3_IRQHandler+0xcc>)
 8003134:	f023 0302 	bic.w	r3, r3, #2
 8003138:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 800313a:	4b24      	ldr	r3, [pc, #144]	; (80031cc <TIM3_IRQHandler+0xcc>)
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	4a23      	ldr	r2, [pc, #140]	; (80031cc <TIM3_IRQHandler+0xcc>)
 8003140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003144:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 8003146:	f7ff ff05 	bl	8002f54 <Capture_TIM3_Ch1_Callback>
}
 800314a:	e03d      	b.n	80031c8 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 800314c:	4b1f      	ldr	r3, [pc, #124]	; (80031cc <TIM3_IRQHandler+0xcc>)
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00e      	beq.n	8003176 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8003158:	4b1c      	ldr	r3, [pc, #112]	; (80031cc <TIM3_IRQHandler+0xcc>)
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <TIM3_IRQHandler+0xcc>)
 800315e:	f023 0304 	bic.w	r3, r3, #4
 8003162:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 8003164:	4b19      	ldr	r3, [pc, #100]	; (80031cc <TIM3_IRQHandler+0xcc>)
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	4a18      	ldr	r2, [pc, #96]	; (80031cc <TIM3_IRQHandler+0xcc>)
 800316a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800316e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 8003170:	f7ff fef8 	bl	8002f64 <Capture_TIM3_Ch2_Callback>
}
 8003174:	e028      	b.n	80031c8 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 8003176:	4b15      	ldr	r3, [pc, #84]	; (80031cc <TIM3_IRQHandler+0xcc>)
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00e      	beq.n	80031a0 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 8003182:	4b12      	ldr	r3, [pc, #72]	; (80031cc <TIM3_IRQHandler+0xcc>)
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	4a11      	ldr	r2, [pc, #68]	; (80031cc <TIM3_IRQHandler+0xcc>)
 8003188:	f023 0308 	bic.w	r3, r3, #8
 800318c:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <TIM3_IRQHandler+0xcc>)
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	4a0e      	ldr	r2, [pc, #56]	; (80031cc <TIM3_IRQHandler+0xcc>)
 8003194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003198:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 800319a:	f7ff feeb 	bl	8002f74 <Capture_TIM3_Ch3_Callback>
}
 800319e:	e013      	b.n	80031c8 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <TIM3_IRQHandler+0xcc>)
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00d      	beq.n	80031c8 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 80031ac:	4b07      	ldr	r3, [pc, #28]	; (80031cc <TIM3_IRQHandler+0xcc>)
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	4a06      	ldr	r2, [pc, #24]	; (80031cc <TIM3_IRQHandler+0xcc>)
 80031b2:	f023 0310 	bic.w	r3, r3, #16
 80031b6:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <TIM3_IRQHandler+0xcc>)
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	4a03      	ldr	r2, [pc, #12]	; (80031cc <TIM3_IRQHandler+0xcc>)
 80031be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031c2:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 80031c4:	f7ff fede 	bl	8002f84 <Capture_TIM3_Ch4_Callback>
}
 80031c8:	bf00      	nop
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40000400 	.word	0x40000400

080031d0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 80031d4:	4b31      	ldr	r3, [pc, #196]	; (800329c <TIM4_IRQHandler+0xcc>)
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 80031e0:	4b2e      	ldr	r3, [pc, #184]	; (800329c <TIM4_IRQHandler+0xcc>)
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	4a2d      	ldr	r2, [pc, #180]	; (800329c <TIM4_IRQHandler+0xcc>)
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 80031ec:	f7ff fe82 	bl	8002ef4 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 80031f0:	e052      	b.n	8003298 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 80031f2:	4b2a      	ldr	r3, [pc, #168]	; (800329c <TIM4_IRQHandler+0xcc>)
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00e      	beq.n	800321c <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 80031fe:	4b27      	ldr	r3, [pc, #156]	; (800329c <TIM4_IRQHandler+0xcc>)
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	4a26      	ldr	r2, [pc, #152]	; (800329c <TIM4_IRQHandler+0xcc>)
 8003204:	f023 0302 	bic.w	r3, r3, #2
 8003208:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 800320a:	4b24      	ldr	r3, [pc, #144]	; (800329c <TIM4_IRQHandler+0xcc>)
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	4a23      	ldr	r2, [pc, #140]	; (800329c <TIM4_IRQHandler+0xcc>)
 8003210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003214:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8003216:	f7ff febd 	bl	8002f94 <Capture_TIM4_Ch1_Callback>
}
 800321a:	e03d      	b.n	8003298 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 800321c:	4b1f      	ldr	r3, [pc, #124]	; (800329c <TIM4_IRQHandler+0xcc>)
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00e      	beq.n	8003246 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8003228:	4b1c      	ldr	r3, [pc, #112]	; (800329c <TIM4_IRQHandler+0xcc>)
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	4a1b      	ldr	r2, [pc, #108]	; (800329c <TIM4_IRQHandler+0xcc>)
 800322e:	f023 0304 	bic.w	r3, r3, #4
 8003232:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8003234:	4b19      	ldr	r3, [pc, #100]	; (800329c <TIM4_IRQHandler+0xcc>)
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	4a18      	ldr	r2, [pc, #96]	; (800329c <TIM4_IRQHandler+0xcc>)
 800323a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800323e:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8003240:	f7ff fec8 	bl	8002fd4 <Capture_TIM5_Ch2_Callback>
}
 8003244:	e028      	b.n	8003298 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8003246:	4b15      	ldr	r3, [pc, #84]	; (800329c <TIM4_IRQHandler+0xcc>)
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00e      	beq.n	8003270 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <TIM4_IRQHandler+0xcc>)
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	4a11      	ldr	r2, [pc, #68]	; (800329c <TIM4_IRQHandler+0xcc>)
 8003258:	f023 0308 	bic.w	r3, r3, #8
 800325c:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <TIM4_IRQHandler+0xcc>)
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	4a0e      	ldr	r2, [pc, #56]	; (800329c <TIM4_IRQHandler+0xcc>)
 8003264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003268:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 800326a:	f7ff fe9b 	bl	8002fa4 <Capture_TIM4_Ch3_Callback>
}
 800326e:	e013      	b.n	8003298 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <TIM4_IRQHandler+0xcc>)
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00d      	beq.n	8003298 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 800327c:	4b07      	ldr	r3, [pc, #28]	; (800329c <TIM4_IRQHandler+0xcc>)
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	4a06      	ldr	r2, [pc, #24]	; (800329c <TIM4_IRQHandler+0xcc>)
 8003282:	f023 0310 	bic.w	r3, r3, #16
 8003286:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8003288:	4b04      	ldr	r3, [pc, #16]	; (800329c <TIM4_IRQHandler+0xcc>)
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	4a03      	ldr	r2, [pc, #12]	; (800329c <TIM4_IRQHandler+0xcc>)
 800328e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003292:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8003294:	f7ff fe8e 	bl	8002fb4 <Capture_TIM4_Ch4_Callback>
}
 8003298:	bf00      	nop
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40000800 	.word	0x40000800

080032a0 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 80032a4:	4b31      	ldr	r3, [pc, #196]	; (800336c <TIM5_IRQHandler+0xcc>)
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 80032b0:	4b2e      	ldr	r3, [pc, #184]	; (800336c <TIM5_IRQHandler+0xcc>)
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	4a2d      	ldr	r2, [pc, #180]	; (800336c <TIM5_IRQHandler+0xcc>)
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 80032bc:	f7ff fe22 	bl	8002f04 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 80032c0:	e052      	b.n	8003368 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 80032c2:	4b2a      	ldr	r3, [pc, #168]	; (800336c <TIM5_IRQHandler+0xcc>)
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00e      	beq.n	80032ec <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 80032ce:	4b27      	ldr	r3, [pc, #156]	; (800336c <TIM5_IRQHandler+0xcc>)
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	4a26      	ldr	r2, [pc, #152]	; (800336c <TIM5_IRQHandler+0xcc>)
 80032d4:	f023 0302 	bic.w	r3, r3, #2
 80032d8:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 80032da:	4b24      	ldr	r3, [pc, #144]	; (800336c <TIM5_IRQHandler+0xcc>)
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	4a23      	ldr	r2, [pc, #140]	; (800336c <TIM5_IRQHandler+0xcc>)
 80032e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032e4:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 80032e6:	f7ff fe6d 	bl	8002fc4 <Capture_TIM5_Ch1_Callback>
}
 80032ea:	e03d      	b.n	8003368 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 80032ec:	4b1f      	ldr	r3, [pc, #124]	; (800336c <TIM5_IRQHandler+0xcc>)
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00e      	beq.n	8003316 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 80032f8:	4b1c      	ldr	r3, [pc, #112]	; (800336c <TIM5_IRQHandler+0xcc>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	4a1b      	ldr	r2, [pc, #108]	; (800336c <TIM5_IRQHandler+0xcc>)
 80032fe:	f023 0304 	bic.w	r3, r3, #4
 8003302:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8003304:	4b19      	ldr	r3, [pc, #100]	; (800336c <TIM5_IRQHandler+0xcc>)
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	4a18      	ldr	r2, [pc, #96]	; (800336c <TIM5_IRQHandler+0xcc>)
 800330a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800330e:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8003310:	f7ff fe60 	bl	8002fd4 <Capture_TIM5_Ch2_Callback>
}
 8003314:	e028      	b.n	8003368 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8003316:	4b15      	ldr	r3, [pc, #84]	; (800336c <TIM5_IRQHandler+0xcc>)
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00e      	beq.n	8003340 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 8003322:	4b12      	ldr	r3, [pc, #72]	; (800336c <TIM5_IRQHandler+0xcc>)
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	4a11      	ldr	r2, [pc, #68]	; (800336c <TIM5_IRQHandler+0xcc>)
 8003328:	f023 0308 	bic.w	r3, r3, #8
 800332c:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 800332e:	4b0f      	ldr	r3, [pc, #60]	; (800336c <TIM5_IRQHandler+0xcc>)
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	4a0e      	ldr	r2, [pc, #56]	; (800336c <TIM5_IRQHandler+0xcc>)
 8003334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003338:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 800333a:	f7ff fe53 	bl	8002fe4 <Capture_TIM5_Ch3_Callback>
}
 800333e:	e013      	b.n	8003368 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8003340:	4b0a      	ldr	r3, [pc, #40]	; (800336c <TIM5_IRQHandler+0xcc>)
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00d      	beq.n	8003368 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 800334c:	4b07      	ldr	r3, [pc, #28]	; (800336c <TIM5_IRQHandler+0xcc>)
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	4a06      	ldr	r2, [pc, #24]	; (800336c <TIM5_IRQHandler+0xcc>)
 8003352:	f023 0310 	bic.w	r3, r3, #16
 8003356:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8003358:	4b04      	ldr	r3, [pc, #16]	; (800336c <TIM5_IRQHandler+0xcc>)
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	4a03      	ldr	r2, [pc, #12]	; (800336c <TIM5_IRQHandler+0xcc>)
 800335e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003362:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8003364:	f7ff fe46 	bl	8002ff4 <Capture_TIM5_Ch4_Callback>
}
 8003368:	bf00      	nop
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40000c00 	.word	0x40000c00

08003370 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a88      	ldr	r2, [pc, #544]	; (80035cc <GPIO_Config+0x238>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d106      	bne.n	80033bc <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 80033ae:	4b88      	ldr	r3, [pc, #544]	; (80035d0 <GPIO_Config+0x23c>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	4a87      	ldr	r2, [pc, #540]	; (80035d0 <GPIO_Config+0x23c>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ba:	e03a      	b.n	8003432 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a84      	ldr	r2, [pc, #528]	; (80035d4 <GPIO_Config+0x240>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d106      	bne.n	80033d4 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 80033c6:	4b82      	ldr	r3, [pc, #520]	; (80035d0 <GPIO_Config+0x23c>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	4a81      	ldr	r2, [pc, #516]	; (80035d0 <GPIO_Config+0x23c>)
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	6313      	str	r3, [r2, #48]	; 0x30
 80033d2:	e02e      	b.n	8003432 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a7f      	ldr	r2, [pc, #508]	; (80035d8 <GPIO_Config+0x244>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d106      	bne.n	80033ec <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 80033de:	4b7c      	ldr	r3, [pc, #496]	; (80035d0 <GPIO_Config+0x23c>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a7b      	ldr	r2, [pc, #492]	; (80035d0 <GPIO_Config+0x23c>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	e022      	b.n	8003432 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a7a      	ldr	r2, [pc, #488]	; (80035dc <GPIO_Config+0x248>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d106      	bne.n	8003404 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 80033f6:	4b76      	ldr	r3, [pc, #472]	; (80035d0 <GPIO_Config+0x23c>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4a75      	ldr	r2, [pc, #468]	; (80035d0 <GPIO_Config+0x23c>)
 80033fc:	f043 0308 	orr.w	r3, r3, #8
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	e016      	b.n	8003432 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a75      	ldr	r2, [pc, #468]	; (80035e0 <GPIO_Config+0x24c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d106      	bne.n	800341c <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 800340e:	4b70      	ldr	r3, [pc, #448]	; (80035d0 <GPIO_Config+0x23c>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	4a6f      	ldr	r2, [pc, #444]	; (80035d0 <GPIO_Config+0x23c>)
 8003414:	f043 0310 	orr.w	r3, r3, #16
 8003418:	6313      	str	r3, [r2, #48]	; 0x30
 800341a:	e00a      	b.n	8003432 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a70      	ldr	r2, [pc, #448]	; (80035e4 <GPIO_Config+0x250>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d105      	bne.n	8003432 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8003426:	4b6a      	ldr	r3, [pc, #424]	; (80035d0 <GPIO_Config+0x23c>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	4a69      	ldr	r2, [pc, #420]	; (80035d0 <GPIO_Config+0x23c>)
 800342c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003430:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	795b      	ldrb	r3, [r3, #5]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d143      	bne.n	80034c2 <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	791b      	ldrb	r3, [r3, #4]
 800343e:	2b07      	cmp	r3, #7
 8003440:	d81f      	bhi.n	8003482 <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	791b      	ldrb	r3, [r3, #4]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6a1a      	ldr	r2, [r3, #32]
 8003450:	210f      	movs	r1, #15
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	fa01 f303 	lsl.w	r3, r1, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	4619      	mov	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	400a      	ands	r2, r1
 8003462:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6a1a      	ldr	r2, [r3, #32]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	7a5b      	ldrb	r3, [r3, #9]
 800346e:	4619      	mov	r1, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	4619      	mov	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	621a      	str	r2, [r3, #32]
 8003480:	e01f      	b.n	80034c2 <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	791b      	ldrb	r3, [r3, #4]
 8003486:	3b08      	subs	r3, #8
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003492:	210f      	movs	r1, #15
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	4619      	mov	r1, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	400a      	ands	r2, r1
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7a5b      	ldrb	r3, [r3, #9]
 80034b0:	4619      	mov	r1, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	4619      	mov	r1, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	795b      	ldrb	r3, [r3, #5]
 80034c6:	461a      	mov	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	791b      	ldrb	r3, [r3, #4]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	791b      	ldrb	r3, [r3, #4]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	2103      	movs	r1, #3
 80034e2:	fa01 f303 	lsl.w	r3, r1, r3
 80034e6:	43db      	mvns	r3, r3
 80034e8:	4619      	mov	r1, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	400a      	ands	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6819      	ldr	r1, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	430a      	orrs	r2, r1
 8003500:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	7a1b      	ldrb	r3, [r3, #8]
 8003506:	461a      	mov	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	791b      	ldrb	r3, [r3, #4]
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	791b      	ldrb	r3, [r3, #4]
 800351c:	4619      	mov	r1, r3
 800351e:	2301      	movs	r3, #1
 8003520:	408b      	lsls	r3, r1
 8003522:	43db      	mvns	r3, r3
 8003524:	4619      	mov	r1, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	400a      	ands	r2, r1
 800352c:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	799b      	ldrb	r3, [r3, #6]
 8003542:	461a      	mov	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	791b      	ldrb	r3, [r3, #4]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	791b      	ldrb	r3, [r3, #4]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	2103      	movs	r1, #3
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	4619      	mov	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	400a      	ands	r2, r1
 800356c:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	430a      	orrs	r2, r1
 800357c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	79db      	ldrb	r3, [r3, #7]
 8003582:	461a      	mov	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	791b      	ldrb	r3, [r3, #4]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	791b      	ldrb	r3, [r3, #4]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	2103      	movs	r1, #3
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	4619      	mov	r1, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	400a      	ands	r2, r1
 80035ac:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68d9      	ldr	r1, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40020000 	.word	0x40020000
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40020400 	.word	0x40020400
 80035d8:	40020800 	.word	0x40020800
 80035dc:	40020c00 	.word	0x40020c00
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40021c00 	.word	0x40021c00

080035e8 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d10d      	bne.n	8003616 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699a      	ldr	r2, [r3, #24]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	791b      	ldrb	r3, [r3, #4]
 8003604:	4619      	mov	r1, r3
 8003606:	2301      	movs	r3, #1
 8003608:	408b      	lsls	r3, r1
 800360a:	4619      	mov	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8003614:	e00d      	b.n	8003632 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699a      	ldr	r2, [r3, #24]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	791b      	ldrb	r3, [r3, #4]
 8003620:	3310      	adds	r3, #16
 8003622:	2101      	movs	r1, #1
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	4619      	mov	r1, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	619a      	str	r2, [r3, #24]
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 800363e:	b480      	push	{r7}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	791b      	ldrb	r3, [r3, #4]
 800364e:	461a      	mov	r2, r3
 8003650:	2301      	movs	r3, #1
 8003652:	4093      	lsls	r3, r2
 8003654:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 800365e:	897b      	ldrh	r3, [r7, #10]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4013      	ands	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	791b      	ldrb	r3, [r3, #4]
 800366a:	461a      	mov	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	40d3      	lsrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8003672:	68fb      	ldr	r3, [r7, #12]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ffd8 	bl	800363e <GPIO_ReadPin>
 800368e:	4603      	mov	r3, r0
 8003690:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf0c      	ite	eq
 8003698:	2301      	moveq	r3, #1
 800369a:	2300      	movne	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	4619      	mov	r1, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ffa1 	bl	80035e8 <GPIO_WritePin>
}
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 80036ba:	4b92      	ldr	r3, [pc, #584]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a91      	ldr	r2, [pc, #580]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80036c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c4:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80036c6:	4b8f      	ldr	r3, [pc, #572]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80036c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 80036ce:	4b8e      	ldr	r3, [pc, #568]	; (8003908 <RCC_enableMaxFrequencies+0x258>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a8d      	ldr	r2, [pc, #564]	; (8003908 <RCC_enableMaxFrequencies+0x258>)
 80036d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036d8:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 80036da:	4b8a      	ldr	r3, [pc, #552]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4a89      	ldr	r2, [pc, #548]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80036e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80036e4:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	f200 82fc 	bhi.w	8003ce6 <RCC_enableMaxFrequencies+0x636>
 80036ee:	a201      	add	r2, pc, #4	; (adr r2, 80036f4 <RCC_enableMaxFrequencies+0x44>)
 80036f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f4:	08003719 	.word	0x08003719
 80036f8:	080037bb 	.word	0x080037bb
 80036fc:	0800385d 	.word	0x0800385d
 8003700:	08003911 	.word	0x08003911
 8003704:	080039b3 	.word	0x080039b3
 8003708:	08003a55 	.word	0x08003a55
 800370c:	08003b01 	.word	0x08003b01
 8003710:	08003ba3 	.word	0x08003ba3
 8003714:	08003c45 	.word	0x08003c45
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003718:	4b7a      	ldr	r3, [pc, #488]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4a79      	ldr	r2, [pc, #484]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800371e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003722:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003724:	4b77      	ldr	r3, [pc, #476]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4a76      	ldr	r2, [pc, #472]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800372a:	f043 0310 	orr.w	r3, r3, #16
 800372e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003730:	4b74      	ldr	r3, [pc, #464]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4a73      	ldr	r2, [pc, #460]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003736:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800373a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800373e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8003740:	4b70      	ldr	r3, [pc, #448]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4a6f      	ldr	r2, [pc, #444]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003746:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800374a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800374c:	4b6d      	ldr	r3, [pc, #436]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4a6c      	ldr	r2, [pc, #432]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003752:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003756:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8003758:	4b6a      	ldr	r3, [pc, #424]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a69      	ldr	r2, [pc, #420]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800375e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003762:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003764:	4b67      	ldr	r3, [pc, #412]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	4a66      	ldr	r2, [pc, #408]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800376a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800376e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003770:	4b64      	ldr	r3, [pc, #400]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a63      	ldr	r2, [pc, #396]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003776:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800377a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800377c:	4b61      	ldr	r3, [pc, #388]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	4a60      	ldr	r2, [pc, #384]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003786:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003788:	4b5e      	ldr	r3, [pc, #376]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a5d      	ldr	r2, [pc, #372]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800378e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003792:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003794:	e000      	b.n	8003798 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 8003796:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003798:	4b5a      	ldr	r3, [pc, #360]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f8      	beq.n	8003796 <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80037a4:	4b59      	ldr	r3, [pc, #356]	; (800390c <RCC_enableMaxFrequencies+0x25c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a58      	ldr	r2, [pc, #352]	; (800390c <RCC_enableMaxFrequencies+0x25c>)
 80037aa:	f023 030f 	bic.w	r3, r3, #15
 80037ae:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 80037b0:	4b56      	ldr	r3, [pc, #344]	; (800390c <RCC_enableMaxFrequencies+0x25c>)
 80037b2:	4a56      	ldr	r2, [pc, #344]	; (800390c <RCC_enableMaxFrequencies+0x25c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6013      	str	r3, [r2, #0]

			break;
 80037b8:	e296      	b.n	8003ce8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80037ba:	4b52      	ldr	r3, [pc, #328]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4a51      	ldr	r2, [pc, #324]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80037c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037c4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80037c6:	4b4f      	ldr	r3, [pc, #316]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4a4e      	ldr	r2, [pc, #312]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80037cc:	f043 0310 	orr.w	r3, r3, #16
 80037d0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80037d2:	4b4c      	ldr	r3, [pc, #304]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4a4b      	ldr	r2, [pc, #300]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80037d8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 80037e2:	4b48      	ldr	r3, [pc, #288]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4a47      	ldr	r2, [pc, #284]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80037e8:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 80037ec:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80037ee:	4b45      	ldr	r3, [pc, #276]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	4a44      	ldr	r2, [pc, #272]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80037f4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80037f8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 80037fa:	4b42      	ldr	r3, [pc, #264]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4a41      	ldr	r2, [pc, #260]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003804:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003806:	4b3f      	ldr	r3, [pc, #252]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	4a3e      	ldr	r2, [pc, #248]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800380c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003810:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003812:	4b3c      	ldr	r3, [pc, #240]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	4a3b      	ldr	r2, [pc, #236]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003818:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800381c:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800381e:	4b39      	ldr	r3, [pc, #228]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	4a38      	ldr	r2, [pc, #224]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003828:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800382a:	4b36      	ldr	r3, [pc, #216]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a35      	ldr	r2, [pc, #212]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003830:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003834:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003836:	e000      	b.n	800383a <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 8003838:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800383a:	4b32      	ldr	r3, [pc, #200]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f8      	beq.n	8003838 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003846:	4b31      	ldr	r3, [pc, #196]	; (800390c <RCC_enableMaxFrequencies+0x25c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a30      	ldr	r2, [pc, #192]	; (800390c <RCC_enableMaxFrequencies+0x25c>)
 800384c:	f023 030f 	bic.w	r3, r3, #15
 8003850:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8003852:	4b2e      	ldr	r3, [pc, #184]	; (800390c <RCC_enableMaxFrequencies+0x25c>)
 8003854:	4a2d      	ldr	r2, [pc, #180]	; (800390c <RCC_enableMaxFrequencies+0x25c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6013      	str	r3, [r2, #0]

			break;
 800385a:	e245      	b.n	8003ce8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800385c:	4b29      	ldr	r3, [pc, #164]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4a28      	ldr	r2, [pc, #160]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003862:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003866:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003868:	4b26      	ldr	r3, [pc, #152]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4a25      	ldr	r2, [pc, #148]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800386e:	f043 0310 	orr.w	r3, r3, #16
 8003872:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003874:	4b23      	ldr	r3, [pc, #140]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4a22      	ldr	r2, [pc, #136]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800387a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800387e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003882:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 8003884:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800388a:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 800388e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003890:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a1b      	ldr	r2, [pc, #108]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 8003896:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800389a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 800389c:	4b19      	ldr	r3, [pc, #100]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	4a18      	ldr	r2, [pc, #96]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80038a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a6:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80038a8:	4b16      	ldr	r3, [pc, #88]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a15      	ldr	r2, [pc, #84]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80038ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80038b4:	4b13      	ldr	r3, [pc, #76]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4a12      	ldr	r2, [pc, #72]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80038ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038be:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80038c0:	4b10      	ldr	r3, [pc, #64]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a0f      	ldr	r2, [pc, #60]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80038c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038ca:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80038cc:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a0c      	ldr	r2, [pc, #48]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80038d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038d6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80038d8:	e000      	b.n	80038dc <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 80038da:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80038dc:	4b09      	ldr	r3, [pc, #36]	; (8003904 <RCC_enableMaxFrequencies+0x254>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f8      	beq.n	80038da <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <RCC_enableMaxFrequencies+0x25c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a07      	ldr	r2, [pc, #28]	; (800390c <RCC_enableMaxFrequencies+0x25c>)
 80038ee:	f023 030f 	bic.w	r3, r3, #15
 80038f2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <RCC_enableMaxFrequencies+0x25c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <RCC_enableMaxFrequencies+0x25c>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	6013      	str	r3, [r2, #0]


			break;
 8003900:	e1f2      	b.n	8003ce8 <RCC_enableMaxFrequencies+0x638>
 8003902:	bf00      	nop
 8003904:	40023800 	.word	0x40023800
 8003908:	40007000 	.word	0x40007000
 800390c:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003910:	4b79      	ldr	r3, [pc, #484]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a78      	ldr	r2, [pc, #480]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003916:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800391a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800391c:	4b76      	ldr	r3, [pc, #472]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4a75      	ldr	r2, [pc, #468]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003922:	f043 0310 	orr.w	r3, r3, #16
 8003926:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003928:	4b73      	ldr	r3, [pc, #460]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a72      	ldr	r2, [pc, #456]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 800392e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003936:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8003938:	4b6f      	ldr	r3, [pc, #444]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	4a6e      	ldr	r2, [pc, #440]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 800393e:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8003942:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003944:	4b6c      	ldr	r3, [pc, #432]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4a6b      	ldr	r2, [pc, #428]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 800394a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800394e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8003950:	4b69      	ldr	r3, [pc, #420]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003952:	4a69      	ldr	r2, [pc, #420]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003958:	4b67      	ldr	r3, [pc, #412]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a66      	ldr	r2, [pc, #408]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 800395e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003962:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003964:	4b64      	ldr	r3, [pc, #400]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a63      	ldr	r2, [pc, #396]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 800396a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800396e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8003970:	4b61      	ldr	r3, [pc, #388]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a60      	ldr	r2, [pc, #384]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800397a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800397c:	4b5e      	ldr	r3, [pc, #376]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a5d      	ldr	r2, [pc, #372]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003986:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003988:	e000      	b.n	800398c <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 800398a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800398c:	4b5a      	ldr	r3, [pc, #360]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f8      	beq.n	800398a <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003998:	4b58      	ldr	r3, [pc, #352]	; (8003afc <RCC_enableMaxFrequencies+0x44c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a57      	ldr	r2, [pc, #348]	; (8003afc <RCC_enableMaxFrequencies+0x44c>)
 800399e:	f023 030f 	bic.w	r3, r3, #15
 80039a2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80039a4:	4b55      	ldr	r3, [pc, #340]	; (8003afc <RCC_enableMaxFrequencies+0x44c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a54      	ldr	r2, [pc, #336]	; (8003afc <RCC_enableMaxFrequencies+0x44c>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6013      	str	r3, [r2, #0]

			break;
 80039b0:	e19a      	b.n	8003ce8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80039b2:	4b51      	ldr	r3, [pc, #324]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	4a50      	ldr	r2, [pc, #320]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 80039b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039bc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80039be:	4b4e      	ldr	r3, [pc, #312]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4a4d      	ldr	r2, [pc, #308]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 80039c4:	f043 0310 	orr.w	r3, r3, #16
 80039c8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80039ca:	4b4b      	ldr	r3, [pc, #300]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4a4a      	ldr	r2, [pc, #296]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 80039d0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80039d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 80039da:	4b47      	ldr	r3, [pc, #284]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4a46      	ldr	r2, [pc, #280]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 80039e0:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 80039e4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80039e6:	4b44      	ldr	r3, [pc, #272]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	4a43      	ldr	r2, [pc, #268]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 80039ec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80039f0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80039f2:	4b41      	ldr	r3, [pc, #260]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 80039f4:	4a40      	ldr	r2, [pc, #256]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80039fa:	4b3f      	ldr	r3, [pc, #252]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	4a3e      	ldr	r2, [pc, #248]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a04:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003a06:	4b3c      	ldr	r3, [pc, #240]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	4a3b      	ldr	r2, [pc, #236]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a10:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8003a12:	4b39      	ldr	r3, [pc, #228]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	4a38      	ldr	r2, [pc, #224]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a1c:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003a1e:	4b36      	ldr	r3, [pc, #216]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a35      	ldr	r2, [pc, #212]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a28:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003a2a:	e000      	b.n	8003a2e <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 8003a2c:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003a2e:	4b32      	ldr	r3, [pc, #200]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f8      	beq.n	8003a2c <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003a3a:	4b30      	ldr	r3, [pc, #192]	; (8003afc <RCC_enableMaxFrequencies+0x44c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a2f      	ldr	r2, [pc, #188]	; (8003afc <RCC_enableMaxFrequencies+0x44c>)
 8003a40:	f023 030f 	bic.w	r3, r3, #15
 8003a44:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8003a46:	4b2d      	ldr	r3, [pc, #180]	; (8003afc <RCC_enableMaxFrequencies+0x44c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2c      	ldr	r2, [pc, #176]	; (8003afc <RCC_enableMaxFrequencies+0x44c>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6013      	str	r3, [r2, #0]

			break;
 8003a52:	e149      	b.n	8003ce8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003a54:	4b28      	ldr	r3, [pc, #160]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	4a27      	ldr	r2, [pc, #156]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a5e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003a60:	4b25      	ldr	r3, [pc, #148]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4a24      	ldr	r2, [pc, #144]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a66:	f043 0310 	orr.w	r3, r3, #16
 8003a6a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003a6c:	4b22      	ldr	r3, [pc, #136]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4a21      	ldr	r2, [pc, #132]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a7a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 8003a7c:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	4a1d      	ldr	r2, [pc, #116]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a82:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8003a86:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003a88:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4a1a      	ldr	r2, [pc, #104]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a8e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003a92:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8003a94:	4b18      	ldr	r3, [pc, #96]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a96:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003a9c:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	4a15      	ldr	r2, [pc, #84]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003aa8:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003aae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ab2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8003ab4:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a0f      	ldr	r2, [pc, #60]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003aba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003abe:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003ac0:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0c      	ldr	r2, [pc, #48]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aca:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003acc:	e000      	b.n	8003ad0 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 8003ace:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003ad0:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <RCC_enableMaxFrequencies+0x448>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f8      	beq.n	8003ace <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003adc:	4b07      	ldr	r3, [pc, #28]	; (8003afc <RCC_enableMaxFrequencies+0x44c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a06      	ldr	r2, [pc, #24]	; (8003afc <RCC_enableMaxFrequencies+0x44c>)
 8003ae2:	f023 030f 	bic.w	r3, r3, #15
 8003ae6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8003ae8:	4b04      	ldr	r3, [pc, #16]	; (8003afc <RCC_enableMaxFrequencies+0x44c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a03      	ldr	r2, [pc, #12]	; (8003afc <RCC_enableMaxFrequencies+0x44c>)
 8003aee:	f043 0302 	orr.w	r3, r3, #2
 8003af2:	6013      	str	r3, [r2, #0]

			break;
 8003af4:	e0f8      	b.n	8003ce8 <RCC_enableMaxFrequencies+0x638>
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800
 8003afc:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003b00:	4b84      	ldr	r3, [pc, #528]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4a83      	ldr	r2, [pc, #524]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b0a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003b0c:	4b81      	ldr	r3, [pc, #516]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a80      	ldr	r2, [pc, #512]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b12:	f043 0310 	orr.w	r3, r3, #16
 8003b16:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003b18:	4b7e      	ldr	r3, [pc, #504]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4a7d      	ldr	r2, [pc, #500]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b26:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 8003b28:	4b7a      	ldr	r3, [pc, #488]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4a79      	ldr	r2, [pc, #484]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b2e:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003b32:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003b34:	4b77      	ldr	r3, [pc, #476]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a76      	ldr	r2, [pc, #472]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003b3e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8003b40:	4b74      	ldr	r3, [pc, #464]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b42:	4a74      	ldr	r2, [pc, #464]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003b48:	4b72      	ldr	r3, [pc, #456]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4a71      	ldr	r2, [pc, #452]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b52:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003b54:	4b6f      	ldr	r3, [pc, #444]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	4a6e      	ldr	r2, [pc, #440]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b5e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8003b60:	4b6c      	ldr	r3, [pc, #432]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a6b      	ldr	r2, [pc, #428]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b6a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003b6c:	4b69      	ldr	r3, [pc, #420]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a68      	ldr	r2, [pc, #416]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b76:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003b78:	e000      	b.n	8003b7c <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 8003b7a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003b7c:	4b65      	ldr	r3, [pc, #404]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f8      	beq.n	8003b7a <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003b88:	4b63      	ldr	r3, [pc, #396]	; (8003d18 <RCC_enableMaxFrequencies+0x668>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a62      	ldr	r2, [pc, #392]	; (8003d18 <RCC_enableMaxFrequencies+0x668>)
 8003b8e:	f023 030f 	bic.w	r3, r3, #15
 8003b92:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8003b94:	4b60      	ldr	r3, [pc, #384]	; (8003d18 <RCC_enableMaxFrequencies+0x668>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a5f      	ldr	r2, [pc, #380]	; (8003d18 <RCC_enableMaxFrequencies+0x668>)
 8003b9a:	f043 0302 	orr.w	r3, r3, #2
 8003b9e:	6013      	str	r3, [r2, #0]

			break;
 8003ba0:	e0a2      	b.n	8003ce8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003ba2:	4b5c      	ldr	r3, [pc, #368]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4a5b      	ldr	r2, [pc, #364]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003ba8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bac:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8003bae:	4b59      	ldr	r3, [pc, #356]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4a58      	ldr	r2, [pc, #352]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003bb4:	f043 0310 	orr.w	r3, r3, #16
 8003bb8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003bba:	4b56      	ldr	r3, [pc, #344]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4a55      	ldr	r2, [pc, #340]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003bc0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8003bca:	4b52      	ldr	r3, [pc, #328]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	4a51      	ldr	r2, [pc, #324]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003bd0:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8003bd4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003bd6:	4b4f      	ldr	r3, [pc, #316]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4a4e      	ldr	r2, [pc, #312]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003bdc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003be0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8003be2:	4b4c      	ldr	r3, [pc, #304]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003be4:	4a4b      	ldr	r2, [pc, #300]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003bea:	4b4a      	ldr	r3, [pc, #296]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	4a49      	ldr	r2, [pc, #292]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf4:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003bf6:	4b47      	ldr	r3, [pc, #284]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	4a46      	ldr	r2, [pc, #280]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003bfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c00:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8003c02:	4b44      	ldr	r3, [pc, #272]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	4a43      	ldr	r2, [pc, #268]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c0c:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003c0e:	4b41      	ldr	r3, [pc, #260]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a40      	ldr	r2, [pc, #256]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c18:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003c1a:	e000      	b.n	8003c1e <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 8003c1c:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003c1e:	4b3d      	ldr	r3, [pc, #244]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f8      	beq.n	8003c1c <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003c2a:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <RCC_enableMaxFrequencies+0x668>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a3a      	ldr	r2, [pc, #232]	; (8003d18 <RCC_enableMaxFrequencies+0x668>)
 8003c30:	f023 030f 	bic.w	r3, r3, #15
 8003c34:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8003c36:	4b38      	ldr	r3, [pc, #224]	; (8003d18 <RCC_enableMaxFrequencies+0x668>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a37      	ldr	r2, [pc, #220]	; (8003d18 <RCC_enableMaxFrequencies+0x668>)
 8003c3c:	f043 0302 	orr.w	r3, r3, #2
 8003c40:	6013      	str	r3, [r2, #0]

			break;
 8003c42:	e051      	b.n	8003ce8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8003c44:	4b33      	ldr	r3, [pc, #204]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4a32      	ldr	r2, [pc, #200]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c4e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8003c50:	4b30      	ldr	r3, [pc, #192]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4a2f      	ldr	r2, [pc, #188]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c56:	f043 0308 	orr.w	r3, r3, #8
 8003c5a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8003c5c:	4b2d      	ldr	r3, [pc, #180]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	4a2c      	ldr	r2, [pc, #176]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c6a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8003c6c:	4b29      	ldr	r3, [pc, #164]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4a28      	ldr	r2, [pc, #160]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c72:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8003c76:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8003c78:	4b26      	ldr	r3, [pc, #152]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4a25      	ldr	r2, [pc, #148]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c7e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c82:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8003c84:	4b23      	ldr	r3, [pc, #140]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c86:	4a23      	ldr	r2, [pc, #140]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8003c8c:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4a20      	ldr	r2, [pc, #128]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c96:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8003c98:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4a1d      	ldr	r2, [pc, #116]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003c9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ca2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8003ca4:	4b1b      	ldr	r3, [pc, #108]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4a1a      	ldr	r2, [pc, #104]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003caa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cae:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8003cb0:	4b18      	ldr	r3, [pc, #96]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a17      	ldr	r2, [pc, #92]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cba:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003cbc:	e000      	b.n	8003cc0 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 8003cbe:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003cc0:	4b14      	ldr	r3, [pc, #80]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f8      	beq.n	8003cbe <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8003ccc:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <RCC_enableMaxFrequencies+0x668>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a11      	ldr	r2, [pc, #68]	; (8003d18 <RCC_enableMaxFrequencies+0x668>)
 8003cd2:	f023 030f 	bic.w	r3, r3, #15
 8003cd6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <RCC_enableMaxFrequencies+0x668>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a0e      	ldr	r2, [pc, #56]	; (8003d18 <RCC_enableMaxFrequencies+0x668>)
 8003cde:	f043 0303 	orr.w	r3, r3, #3
 8003ce2:	6013      	str	r3, [r2, #0]

			break;
 8003ce4:	e000      	b.n	8003ce8 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 8003ce6:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003cee:	f043 0302 	orr.w	r3, r3, #2
 8003cf2:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8003cf4:	e000      	b.n	8003cf8 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 8003cf6:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8003cf8:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <RCC_enableMaxFrequencies+0x664>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f8      	beq.n	8003cf6 <RCC_enableMaxFrequencies+0x646>
	}

//	SystemCoreClockUpdate();

}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40023c00 	.word	0x40023c00

08003d1c <__NVIC_EnableIRQ>:
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	db0b      	blt.n	8003d46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	f003 021f 	and.w	r2, r3, #31
 8003d34:	4907      	ldr	r1, [pc, #28]	; (8003d54 <__NVIC_EnableIRQ+0x38>)
 8003d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	e000e100 	.word	0xe000e100

08003d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	6039      	str	r1, [r7, #0]
 8003d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	db0a      	blt.n	8003d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	490c      	ldr	r1, [pc, #48]	; (8003da4 <__NVIC_SetPriority+0x4c>)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	0112      	lsls	r2, r2, #4
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d80:	e00a      	b.n	8003d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	4908      	ldr	r1, [pc, #32]	; (8003da8 <__NVIC_SetPriority+0x50>)
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	3b04      	subs	r3, #4
 8003d90:	0112      	lsls	r2, r2, #4
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	440b      	add	r3, r1
 8003d96:	761a      	strb	r2, [r3, #24]
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	e000e100 	.word	0xe000e100
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8003dac:	b590      	push	{r4, r7, lr}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003db4:	b672      	cpsid	i
}
 8003db6:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a91      	ldr	r2, [pc, #580]	; (8004004 <USART_Config+0x258>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d106      	bne.n	8003dd0 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8003dc2:	4b91      	ldr	r3, [pc, #580]	; (8004008 <USART_Config+0x25c>)
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	4a90      	ldr	r2, [pc, #576]	; (8004008 <USART_Config+0x25c>)
 8003dc8:	f043 0310 	orr.w	r3, r3, #16
 8003dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dce:	e018      	b.n	8003e02 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a8d      	ldr	r2, [pc, #564]	; (800400c <USART_Config+0x260>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d106      	bne.n	8003de8 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8003dda:	4b8b      	ldr	r3, [pc, #556]	; (8004008 <USART_Config+0x25c>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	4a8a      	ldr	r2, [pc, #552]	; (8004008 <USART_Config+0x25c>)
 8003de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de4:	6413      	str	r3, [r2, #64]	; 0x40
 8003de6:	e00c      	b.n	8003e02 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a88      	ldr	r2, [pc, #544]	; (8004010 <USART_Config+0x264>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d106      	bne.n	8003e00 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8003df2:	4b85      	ldr	r3, [pc, #532]	; (8004008 <USART_Config+0x25c>)
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	4a84      	ldr	r2, [pc, #528]	; (8004008 <USART_Config+0x25c>)
 8003df8:	f043 0320 	orr.w	r3, r3, #32
 8003dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dfe:	e000      	b.n	8003e02 <USART_Config+0x56>
	}
	else{
		__NOP();
 8003e00:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2200      	movs	r2, #0
 8003e08:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	7a5b      	ldrb	r3, [r3, #9]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d025      	beq.n	8003e66 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	7a5b      	ldrb	r3, [r3, #9]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d110      	bne.n	8003e44 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e30:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	e018      	b.n	8003e76 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e52:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e62:	60da      	str	r2, [r3, #12]
 8003e64:	e007      	b.n	8003e76 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e74:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	7a1b      	ldrb	r3, [r3, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d108      	bne.n	8003e90 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e8c:	60da      	str	r2, [r3, #12]
 8003e8e:	e007      	b.n	8003ea0 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e9e:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	7a9b      	ldrb	r3, [r3, #10]
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d82f      	bhi.n	8003f08 <USART_Config+0x15c>
 8003ea8:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <USART_Config+0x104>)
 8003eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eae:	bf00      	nop
 8003eb0:	08003ec1 	.word	0x08003ec1
 8003eb4:	08003ed3 	.word	0x08003ed3
 8003eb8:	08003ee5 	.word	0x08003ee5
 8003ebc:	08003ef7 	.word	0x08003ef7
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003ece:	611a      	str	r2, [r3, #16]
			break;
 8003ed0:	e023      	b.n	8003f1a <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ee0:	611a      	str	r2, [r3, #16]
			break;
 8003ee2:	e01a      	b.n	8003f1a <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ef2:	611a      	str	r2, [r3, #16]
			break;
 8003ef4:	e011      	b.n	8003f1a <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003f04:	611a      	str	r2, [r3, #16]
			break;
 8003f06:	e008      	b.n	8003f1a <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003f16:	611a      	str	r2, [r3, #16]
			break;
 8003f18:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681c      	ldr	r4, [r3, #0]
 8003f22:	4611      	mov	r1, r2
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f8d7 	bl	80040d8 <brrCalculus>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	799b      	ldrb	r3, [r3, #6]
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d82e      	bhi.n	8003f94 <USART_Config+0x1e8>
 8003f36:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <USART_Config+0x190>)
 8003f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3c:	08003f4d 	.word	0x08003f4d
 8003f40:	08003f5f 	.word	0x08003f5f
 8003f44:	08003f71 	.word	0x08003f71
 8003f48:	08003f83 	.word	0x08003f83
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0208 	orr.w	r2, r2, #8
 8003f5a:	60da      	str	r2, [r3, #12]
			break;
 8003f5c:	e023      	b.n	8003fa6 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 0204 	orr.w	r2, r2, #4
 8003f6c:	60da      	str	r2, [r3, #12]
			break;
 8003f6e:	e01a      	b.n	8003fa6 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 020c 	orr.w	r2, r2, #12
 8003f7e:	60da      	str	r2, [r3, #12]
			break;
 8003f80:	e011      	b.n	8003fa6 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 020c 	bic.w	r2, r2, #12
 8003f90:	60da      	str	r2, [r3, #12]
			break;
 8003f92:	e008      	b.n	8003fa6 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 020c 	bic.w	r2, r2, #12
 8003fa2:	60da      	str	r2, [r3, #12]
			break;
 8003fa4:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	799b      	ldrb	r3, [r3, #6]
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d008      	beq.n	8003fc0 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fbc:	60da      	str	r2, [r3, #12]
 8003fbe:	e007      	b.n	8003fd0 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fce:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	795b      	ldrb	r3, [r3, #5]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d139      	bne.n	800404c <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0220 	orr.w	r2, r2, #32
 8003fe6:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a05      	ldr	r2, [pc, #20]	; (8004004 <USART_Config+0x258>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d110      	bne.n	8004014 <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8003ff2:	2025      	movs	r0, #37	; 0x25
 8003ff4:	f7ff fe92 	bl	8003d1c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	2025      	movs	r0, #37	; 0x25
 8003ffc:	f7ff feac 	bl	8003d58 <__NVIC_SetPriority>
 8004000:	e02c      	b.n	800405c <USART_Config+0x2b0>
 8004002:	bf00      	nop
 8004004:	40011000 	.word	0x40011000
 8004008:	40023800 	.word	0x40023800
 800400c:	40004400 	.word	0x40004400
 8004010:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <USART_Config+0x320>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d107      	bne.n	800402e <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800401e:	2026      	movs	r0, #38	; 0x26
 8004020:	f7ff fe7c 	bl	8003d1c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 8004024:	2101      	movs	r1, #1
 8004026:	2026      	movs	r0, #38	; 0x26
 8004028:	f7ff fe96 	bl	8003d58 <__NVIC_SetPriority>
 800402c:	e016      	b.n	800405c <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a27      	ldr	r2, [pc, #156]	; (80040d0 <USART_Config+0x324>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d107      	bne.n	8004048 <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8004038:	2047      	movs	r0, #71	; 0x47
 800403a:	f7ff fe6f 	bl	8003d1c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 800403e:	2101      	movs	r1, #1
 8004040:	2047      	movs	r0, #71	; 0x47
 8004042:	f7ff fe89 	bl	8003d58 <__NVIC_SetPriority>
 8004046:	e009      	b.n	800405c <USART_Config+0x2b0>
		}
		else{
				__NOP();
 8004048:	bf00      	nop
 800404a:	e007      	b.n	800405c <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0220 	bic.w	r2, r2, #32
 800405a:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	791b      	ldrb	r3, [r3, #4]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d124      	bne.n	80040ae <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004072:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a16      	ldr	r2, [pc, #88]	; (80040d4 <USART_Config+0x328>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d103      	bne.n	8004086 <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800407e:	2025      	movs	r0, #37	; 0x25
 8004080:	f7ff fe4c 	bl	8003d1c <__NVIC_EnableIRQ>
 8004084:	e01b      	b.n	80040be <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a10      	ldr	r2, [pc, #64]	; (80040cc <USART_Config+0x320>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d103      	bne.n	8004098 <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8004090:	2026      	movs	r0, #38	; 0x26
 8004092:	f7ff fe43 	bl	8003d1c <__NVIC_EnableIRQ>
 8004096:	e012      	b.n	80040be <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a0c      	ldr	r2, [pc, #48]	; (80040d0 <USART_Config+0x324>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d103      	bne.n	80040aa <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 80040a2:	2047      	movs	r0, #71	; 0x47
 80040a4:	f7ff fe3a 	bl	8003d1c <__NVIC_EnableIRQ>
 80040a8:	e009      	b.n	80040be <USART_Config+0x312>
		}
		else{
				__NOP();
 80040aa:	bf00      	nop
 80040ac:	e007      	b.n	80040be <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040bc:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80040be:	b662      	cpsie	i
}
 80040c0:	bf00      	nop
	}

	__enable_irq();
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd90      	pop	{r4, r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40004400 	.word	0x40004400
 80040d0:	40011400 	.word	0x40011400
 80040d4:	40011000 	.word	0x40011000

080040d8 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 80040d8:	b5b0      	push	{r4, r5, r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	79db      	ldrb	r3, [r3, #7]
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	f200 8217 	bhi.w	800451a <brrCalculus+0x442>
 80040ec:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <brrCalculus+0x1c>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004105 	.word	0x08004105
 80040f8:	080041ff 	.word	0x080041ff
 80040fc:	08004319 	.word	0x08004319
 8004100:	08004421 	.word	0x08004421

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8004104:	4980      	ldr	r1, [pc, #512]	; (8004308 <brrCalculus+0x230>)
 8004106:	a37c      	add	r3, pc, #496	; (adr r3, 80042f8 <brrCalculus+0x220>)
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411a:	ee17 0a90 	vmov	r0, s15
 800411e:	f7fc fa2b 	bl	8000578 <__aeabi_f2d>
 8004122:	4b79      	ldr	r3, [pc, #484]	; (8004308 <brrCalculus+0x230>)
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f7fc fa7e 	bl	8000628 <__aeabi_dmul>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4975      	ldr	r1, [pc, #468]	; (8004308 <brrCalculus+0x230>)
 8004132:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8004136:	4b74      	ldr	r3, [pc, #464]	; (8004308 <brrCalculus+0x230>)
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	f7fc fd22 	bl	8000b88 <__aeabi_d2iz>
 8004144:	4603      	mov	r3, r0
 8004146:	b29a      	uxth	r2, r3
 8004148:	4b70      	ldr	r3, [pc, #448]	; (800430c <brrCalculus+0x234>)
 800414a:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800414c:	4b6e      	ldr	r3, [pc, #440]	; (8004308 <brrCalculus+0x230>)
 800414e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004152:	4b6d      	ldr	r3, [pc, #436]	; (8004308 <brrCalculus+0x230>)
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	4610      	mov	r0, r2
 800415a:	4619      	mov	r1, r3
 800415c:	f7fc fd14 	bl	8000b88 <__aeabi_d2iz>
 8004160:	4603      	mov	r3, r0
 8004162:	4618      	mov	r0, r3
 8004164:	f7fc f9f6 	bl	8000554 <__aeabi_i2d>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4620      	mov	r0, r4
 800416e:	4629      	mov	r1, r5
 8004170:	f7fc f8a2 	bl	80002b8 <__aeabi_dsub>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4610      	mov	r0, r2
 800417a:	4619      	mov	r1, r3
 800417c:	f7fc fd2c 	bl	8000bd8 <__aeabi_d2f>
 8004180:	4603      	mov	r3, r0
 8004182:	4a63      	ldr	r2, [pc, #396]	; (8004310 <brrCalculus+0x238>)
 8004184:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004186:	4b62      	ldr	r3, [pc, #392]	; (8004310 <brrCalculus+0x238>)
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	2004      	movs	r0, #4
 800418e:	eeb0 0a67 	vmov.f32	s0, s15
 8004192:	f000 fa6d 	bl	8004670 <roundToNDecimals>
 8004196:	eef0 7a40 	vmov.f32	s15, s0
 800419a:	4b5d      	ldr	r3, [pc, #372]	; (8004310 <brrCalculus+0x238>)
 800419c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80041a0:	4b5b      	ldr	r3, [pc, #364]	; (8004310 <brrCalculus+0x238>)
 80041a2:	edd3 7a00 	vldr	s15, [r3]
 80041a6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80041aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041ae:	4b58      	ldr	r3, [pc, #352]	; (8004310 <brrCalculus+0x238>)
 80041b0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80041b4:	4b56      	ldr	r3, [pc, #344]	; (8004310 <brrCalculus+0x238>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fc f9dd 	bl	8000578 <__aeabi_f2d>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	ec43 2b10 	vmov	d0, r2, r3
 80041c6:	f003 fe71 	bl	8007eac <round>
 80041ca:	ec53 2b10 	vmov	r2, r3, d0
 80041ce:	4610      	mov	r0, r2
 80041d0:	4619      	mov	r1, r3
 80041d2:	f7fc fd01 	bl	8000bd8 <__aeabi_d2f>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4a4d      	ldr	r2, [pc, #308]	; (8004310 <brrCalculus+0x238>)
 80041da:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80041dc:	4b4b      	ldr	r3, [pc, #300]	; (800430c <brrCalculus+0x234>)
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	4b4a      	ldr	r3, [pc, #296]	; (8004310 <brrCalculus+0x238>)
 80041e6:	edd3 7a00 	vldr	s15, [r3]
 80041ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ee:	ee17 3a90 	vmov	r3, s15
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	4313      	orrs	r3, r2
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	4b46      	ldr	r3, [pc, #280]	; (8004314 <brrCalculus+0x23c>)
 80041fa:	801a      	strh	r2, [r3, #0]


		break;
 80041fc:	e18f      	b.n	800451e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 80041fe:	4942      	ldr	r1, [pc, #264]	; (8004308 <brrCalculus+0x230>)
 8004200:	a33f      	add	r3, pc, #252	; (adr r3, 8004300 <brrCalculus+0x228>)
 8004202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004206:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	ee07 3a90 	vmov	s15, r3
 8004210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004214:	ee17 0a90 	vmov	r0, s15
 8004218:	f7fc f9ae 	bl	8000578 <__aeabi_f2d>
 800421c:	4b3a      	ldr	r3, [pc, #232]	; (8004308 <brrCalculus+0x230>)
 800421e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004222:	f7fc fa01 	bl	8000628 <__aeabi_dmul>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4937      	ldr	r1, [pc, #220]	; (8004308 <brrCalculus+0x230>)
 800422c:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8004230:	4b35      	ldr	r3, [pc, #212]	; (8004308 <brrCalculus+0x230>)
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	4610      	mov	r0, r2
 8004238:	4619      	mov	r1, r3
 800423a:	f7fc fca5 	bl	8000b88 <__aeabi_d2iz>
 800423e:	4603      	mov	r3, r0
 8004240:	b29a      	uxth	r2, r3
 8004242:	4b32      	ldr	r3, [pc, #200]	; (800430c <brrCalculus+0x234>)
 8004244:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004246:	4b30      	ldr	r3, [pc, #192]	; (8004308 <brrCalculus+0x230>)
 8004248:	e9d3 4500 	ldrd	r4, r5, [r3]
 800424c:	4b2e      	ldr	r3, [pc, #184]	; (8004308 <brrCalculus+0x230>)
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	4610      	mov	r0, r2
 8004254:	4619      	mov	r1, r3
 8004256:	f7fc fc97 	bl	8000b88 <__aeabi_d2iz>
 800425a:	4603      	mov	r3, r0
 800425c:	4618      	mov	r0, r3
 800425e:	f7fc f979 	bl	8000554 <__aeabi_i2d>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4620      	mov	r0, r4
 8004268:	4629      	mov	r1, r5
 800426a:	f7fc f825 	bl	80002b8 <__aeabi_dsub>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	f7fc fcaf 	bl	8000bd8 <__aeabi_d2f>
 800427a:	4603      	mov	r3, r0
 800427c:	4a24      	ldr	r2, [pc, #144]	; (8004310 <brrCalculus+0x238>)
 800427e:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004280:	4b23      	ldr	r3, [pc, #140]	; (8004310 <brrCalculus+0x238>)
 8004282:	edd3 7a00 	vldr	s15, [r3]
 8004286:	2004      	movs	r0, #4
 8004288:	eeb0 0a67 	vmov.f32	s0, s15
 800428c:	f000 f9f0 	bl	8004670 <roundToNDecimals>
 8004290:	eef0 7a40 	vmov.f32	s15, s0
 8004294:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <brrCalculus+0x238>)
 8004296:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800429a:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <brrCalculus+0x238>)
 800429c:	edd3 7a00 	vldr	s15, [r3]
 80042a0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80042a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042a8:	4b19      	ldr	r3, [pc, #100]	; (8004310 <brrCalculus+0x238>)
 80042aa:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80042ae:	4b18      	ldr	r3, [pc, #96]	; (8004310 <brrCalculus+0x238>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f960 	bl	8000578 <__aeabi_f2d>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	ec43 2b10 	vmov	d0, r2, r3
 80042c0:	f003 fdf4 	bl	8007eac <round>
 80042c4:	ec53 2b10 	vmov	r2, r3, d0
 80042c8:	4610      	mov	r0, r2
 80042ca:	4619      	mov	r1, r3
 80042cc:	f7fc fc84 	bl	8000bd8 <__aeabi_d2f>
 80042d0:	4603      	mov	r3, r0
 80042d2:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <brrCalculus+0x238>)
 80042d4:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80042d6:	4b0d      	ldr	r3, [pc, #52]	; (800430c <brrCalculus+0x234>)
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	b29a      	uxth	r2, r3
 80042de:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <brrCalculus+0x238>)
 80042e0:	edd3 7a00 	vldr	s15, [r3]
 80042e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042e8:	ee17 3a90 	vmov	r3, s15
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	4313      	orrs	r3, r2
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <brrCalculus+0x23c>)
 80042f4:	801a      	strh	r2, [r3, #0]


		break;
 80042f6:	e112      	b.n	800451e <brrCalculus+0x446>
 80042f8:	b4e81b4f 	.word	0xb4e81b4f
 80042fc:	3edb4e81 	.word	0x3edb4e81
 8004300:	b4e81b4f 	.word	0xb4e81b4f
 8004304:	3ecb4e81 	.word	0x3ecb4e81
 8004308:	20000a60 	.word	0x20000a60
 800430c:	20000a56 	.word	0x20000a56
 8004310:	20000a58 	.word	0x20000a58
 8004314:	20000a54 	.word	0x20000a54
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8004318:	4989      	ldr	r1, [pc, #548]	; (8004540 <brrCalculus+0x468>)
 800431a:	a385      	add	r3, pc, #532	; (adr r3, 8004530 <brrCalculus+0x458>)
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432e:	ee17 0a90 	vmov	r0, s15
 8004332:	f7fc f921 	bl	8000578 <__aeabi_f2d>
 8004336:	4b82      	ldr	r3, [pc, #520]	; (8004540 <brrCalculus+0x468>)
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	f7fc f974 	bl	8000628 <__aeabi_dmul>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	497e      	ldr	r1, [pc, #504]	; (8004540 <brrCalculus+0x468>)
 8004346:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800434a:	4b7d      	ldr	r3, [pc, #500]	; (8004540 <brrCalculus+0x468>)
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	4610      	mov	r0, r2
 8004352:	4619      	mov	r1, r3
 8004354:	f7fc fc18 	bl	8000b88 <__aeabi_d2iz>
 8004358:	4603      	mov	r3, r0
 800435a:	b29a      	uxth	r2, r3
 800435c:	4b79      	ldr	r3, [pc, #484]	; (8004544 <brrCalculus+0x46c>)
 800435e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004360:	4b77      	ldr	r3, [pc, #476]	; (8004540 <brrCalculus+0x468>)
 8004362:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004366:	4b76      	ldr	r3, [pc, #472]	; (8004540 <brrCalculus+0x468>)
 8004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436c:	4610      	mov	r0, r2
 800436e:	4619      	mov	r1, r3
 8004370:	f7fc fc0a 	bl	8000b88 <__aeabi_d2iz>
 8004374:	4603      	mov	r3, r0
 8004376:	4618      	mov	r0, r3
 8004378:	f7fc f8ec 	bl	8000554 <__aeabi_i2d>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4620      	mov	r0, r4
 8004382:	4629      	mov	r1, r5
 8004384:	f7fb ff98 	bl	80002b8 <__aeabi_dsub>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4610      	mov	r0, r2
 800438e:	4619      	mov	r1, r3
 8004390:	f7fc fc22 	bl	8000bd8 <__aeabi_d2f>
 8004394:	4603      	mov	r3, r0
 8004396:	4a6c      	ldr	r2, [pc, #432]	; (8004548 <brrCalculus+0x470>)
 8004398:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800439a:	4b6b      	ldr	r3, [pc, #428]	; (8004548 <brrCalculus+0x470>)
 800439c:	edd3 7a00 	vldr	s15, [r3]
 80043a0:	2004      	movs	r0, #4
 80043a2:	eeb0 0a67 	vmov.f32	s0, s15
 80043a6:	f000 f963 	bl	8004670 <roundToNDecimals>
 80043aa:	eef0 7a40 	vmov.f32	s15, s0
 80043ae:	4b66      	ldr	r3, [pc, #408]	; (8004548 <brrCalculus+0x470>)
 80043b0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80043b4:	4b64      	ldr	r3, [pc, #400]	; (8004548 <brrCalculus+0x470>)
 80043b6:	edd3 7a00 	vldr	s15, [r3]
 80043ba:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80043be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043c2:	4b61      	ldr	r3, [pc, #388]	; (8004548 <brrCalculus+0x470>)
 80043c4:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 80043c8:	4b5f      	ldr	r3, [pc, #380]	; (8004548 <brrCalculus+0x470>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fc f8d3 	bl	8000578 <__aeabi_f2d>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	ec43 2b10 	vmov	d0, r2, r3
 80043da:	f003 fd67 	bl	8007eac <round>
 80043de:	ec51 0b10 	vmov	r0, r1, d0
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	4b59      	ldr	r3, [pc, #356]	; (800454c <brrCalculus+0x474>)
 80043e8:	f7fb ff68 	bl	80002bc <__adddf3>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4610      	mov	r0, r2
 80043f2:	4619      	mov	r1, r3
 80043f4:	f7fc fbf0 	bl	8000bd8 <__aeabi_d2f>
 80043f8:	4603      	mov	r3, r0
 80043fa:	4a53      	ldr	r2, [pc, #332]	; (8004548 <brrCalculus+0x470>)
 80043fc:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80043fe:	4b51      	ldr	r3, [pc, #324]	; (8004544 <brrCalculus+0x46c>)
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	b29a      	uxth	r2, r3
 8004406:	4b50      	ldr	r3, [pc, #320]	; (8004548 <brrCalculus+0x470>)
 8004408:	edd3 7a00 	vldr	s15, [r3]
 800440c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004410:	ee17 3a90 	vmov	r3, s15
 8004414:	b29b      	uxth	r3, r3
 8004416:	4313      	orrs	r3, r2
 8004418:	b29a      	uxth	r2, r3
 800441a:	4b4d      	ldr	r3, [pc, #308]	; (8004550 <brrCalculus+0x478>)
 800441c:	801a      	strh	r2, [r3, #0]


		break;
 800441e:	e07e      	b.n	800451e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8004420:	4947      	ldr	r1, [pc, #284]	; (8004540 <brrCalculus+0x468>)
 8004422:	a345      	add	r3, pc, #276	; (adr r3, 8004538 <brrCalculus+0x460>)
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004436:	ee17 0a90 	vmov	r0, s15
 800443a:	f7fc f89d 	bl	8000578 <__aeabi_f2d>
 800443e:	4b40      	ldr	r3, [pc, #256]	; (8004540 <brrCalculus+0x468>)
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f7fc f8f0 	bl	8000628 <__aeabi_dmul>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	493c      	ldr	r1, [pc, #240]	; (8004540 <brrCalculus+0x468>)
 800444e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8004452:	4b3b      	ldr	r3, [pc, #236]	; (8004540 <brrCalculus+0x468>)
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	f7fc fb94 	bl	8000b88 <__aeabi_d2iz>
 8004460:	4603      	mov	r3, r0
 8004462:	b29a      	uxth	r2, r3
 8004464:	4b37      	ldr	r3, [pc, #220]	; (8004544 <brrCalculus+0x46c>)
 8004466:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8004468:	4b35      	ldr	r3, [pc, #212]	; (8004540 <brrCalculus+0x468>)
 800446a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800446e:	4b34      	ldr	r3, [pc, #208]	; (8004540 <brrCalculus+0x468>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	4610      	mov	r0, r2
 8004476:	4619      	mov	r1, r3
 8004478:	f7fc fb86 	bl	8000b88 <__aeabi_d2iz>
 800447c:	4603      	mov	r3, r0
 800447e:	4618      	mov	r0, r3
 8004480:	f7fc f868 	bl	8000554 <__aeabi_i2d>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4620      	mov	r0, r4
 800448a:	4629      	mov	r1, r5
 800448c:	f7fb ff14 	bl	80002b8 <__aeabi_dsub>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4610      	mov	r0, r2
 8004496:	4619      	mov	r1, r3
 8004498:	f7fc fb9e 	bl	8000bd8 <__aeabi_d2f>
 800449c:	4603      	mov	r3, r0
 800449e:	4a2a      	ldr	r2, [pc, #168]	; (8004548 <brrCalculus+0x470>)
 80044a0:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80044a2:	4b29      	ldr	r3, [pc, #164]	; (8004548 <brrCalculus+0x470>)
 80044a4:	edd3 7a00 	vldr	s15, [r3]
 80044a8:	2004      	movs	r0, #4
 80044aa:	eeb0 0a67 	vmov.f32	s0, s15
 80044ae:	f000 f8df 	bl	8004670 <roundToNDecimals>
 80044b2:	eef0 7a40 	vmov.f32	s15, s0
 80044b6:	4b24      	ldr	r3, [pc, #144]	; (8004548 <brrCalculus+0x470>)
 80044b8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80044bc:	4b22      	ldr	r3, [pc, #136]	; (8004548 <brrCalculus+0x470>)
 80044be:	edd3 7a00 	vldr	s15, [r3]
 80044c2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80044c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ca:	4b1f      	ldr	r3, [pc, #124]	; (8004548 <brrCalculus+0x470>)
 80044cc:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80044d0:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <brrCalculus+0x470>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fc f84f 	bl	8000578 <__aeabi_f2d>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	ec43 2b10 	vmov	d0, r2, r3
 80044e2:	f003 fce3 	bl	8007eac <round>
 80044e6:	ec53 2b10 	vmov	r2, r3, d0
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	f7fc fb73 	bl	8000bd8 <__aeabi_d2f>
 80044f2:	4603      	mov	r3, r0
 80044f4:	4a14      	ldr	r2, [pc, #80]	; (8004548 <brrCalculus+0x470>)
 80044f6:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80044f8:	4b12      	ldr	r3, [pc, #72]	; (8004544 <brrCalculus+0x46c>)
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	b29a      	uxth	r2, r3
 8004500:	4b11      	ldr	r3, [pc, #68]	; (8004548 <brrCalculus+0x470>)
 8004502:	edd3 7a00 	vldr	s15, [r3]
 8004506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800450a:	ee17 3a90 	vmov	r3, s15
 800450e:	b29b      	uxth	r3, r3
 8004510:	4313      	orrs	r3, r2
 8004512:	b29a      	uxth	r2, r3
 8004514:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <brrCalculus+0x478>)
 8004516:	801a      	strh	r2, [r3, #0]


		break;
 8004518:	e001      	b.n	800451e <brrCalculus+0x446>
	}
	default:{

		__NOP();
 800451a:	bf00      	nop
		break;
 800451c:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 800451e:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <brrCalculus+0x478>)
 8004520:	881b      	ldrh	r3, [r3, #0]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bdb0      	pop	{r4, r5, r7, pc}
 800452a:	bf00      	nop
 800452c:	f3af 8000 	nop.w
 8004530:	789abcdf 	.word	0x789abcdf
 8004534:	3ec23456 	.word	0x3ec23456
 8004538:	789abcdf 	.word	0x789abcdf
 800453c:	3ea23456 	.word	0x3ea23456
 8004540:	20000a60 	.word	0x20000a60
 8004544:	20000a56 	.word	0x20000a56
 8004548:	20000a58 	.word	0x20000a58
 800454c:	3ff00000 	.word	0x3ff00000
 8004550:	20000a54 	.word	0x20000a54

08004554 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800455e:	e000      	b.n	8004562 <writeChar+0xe>
		__NOP();
 8004560:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f7      	beq.n	8004560 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	605a      	str	r2, [r3, #4]

}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 800458e:	e008      	b.n	80045a2 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff ffdc 	bl	8004554 <writeChar>
		msgToSend ++ ;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	3301      	adds	r3, #1
 80045a0:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f2      	bne.n	8004590 <writeMsg+0xc>
	}
}
 80045aa:	bf00      	nop
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
	__NOP();
 80045b8:	bf00      	nop
}
 80045ba:	bf00      	nop
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
	__NOP();
 80045c8:	bf00      	nop
}
 80045ca:	bf00      	nop
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
	return auxRxData;
 80045d8:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <getRxData+0x14>)
 80045da:	781b      	ldrb	r3, [r3, #0]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000a68 	.word	0x20000a68

080045ec <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <USART2_IRQHandler+0x24>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d006      	beq.n	800460a <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <USART2_IRQHandler+0x24>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	b2da      	uxtb	r2, r3
 8004602:	4b04      	ldr	r3, [pc, #16]	; (8004614 <USART2_IRQHandler+0x28>)
 8004604:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8004606:	f7fc fd65 	bl	80010d4 <usart2Rx_Callback>
	}

}
 800460a:	bf00      	nop
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40004400 	.word	0x40004400
 8004614:	20000a68 	.word	0x20000a68

08004618 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <USART1_IRQHandler+0x24>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b00      	cmp	r3, #0
 8004626:	d006      	beq.n	8004636 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8004628:	4b04      	ldr	r3, [pc, #16]	; (800463c <USART1_IRQHandler+0x24>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	b2da      	uxtb	r2, r3
 800462e:	4b04      	ldr	r3, [pc, #16]	; (8004640 <USART1_IRQHandler+0x28>)
 8004630:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8004632:	f7ff ffbf 	bl	80045b4 <usart1Rx_Callback>
	}
}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40011000 	.word	0x40011000
 8004640:	20000a68 	.word	0x20000a68

08004644 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8004648:	4b07      	ldr	r3, [pc, #28]	; (8004668 <USART6_IRQHandler+0x24>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	d006      	beq.n	8004662 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <USART6_IRQHandler+0x24>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	b2da      	uxtb	r2, r3
 800465a:	4b04      	ldr	r3, [pc, #16]	; (800466c <USART6_IRQHandler+0x28>)
 800465c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800465e:	f7ff ffb1 	bl	80045c4 <usart6Rx_Callback>
	}

}
 8004662:	bf00      	nop
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40011400 	.word	0x40011400
 800466c:	20000a68 	.word	0x20000a68

08004670 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	ed87 0a01 	vstr	s0, [r7, #4]
 800467a:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 800467c:	6838      	ldr	r0, [r7, #0]
 800467e:	f7fb ff69 	bl	8000554 <__aeabi_i2d>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	ec43 2b11 	vmov	d1, r2, r3
 800468a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8004708 <roundToNDecimals+0x98>
 800468e:	f003 fc53 	bl	8007f38 <pow>
 8004692:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fb ff6e 	bl	8000578 <__aeabi_f2d>
 800469c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046a0:	f7fb ffc2 	bl	8000628 <__aeabi_dmul>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4610      	mov	r0, r2
 80046aa:	4619      	mov	r1, r3
 80046ac:	f7fc fa94 	bl	8000bd8 <__aeabi_d2f>
 80046b0:	4603      	mov	r3, r0
 80046b2:	607b      	str	r3, [r7, #4]

    number = round(number);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fb ff5f 	bl	8000578 <__aeabi_f2d>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	ec43 2b10 	vmov	d0, r2, r3
 80046c2:	f003 fbf3 	bl	8007eac <round>
 80046c6:	ec53 2b10 	vmov	r2, r3, d0
 80046ca:	4610      	mov	r0, r2
 80046cc:	4619      	mov	r1, r3
 80046ce:	f7fc fa83 	bl	8000bd8 <__aeabi_d2f>
 80046d2:	4603      	mov	r3, r0
 80046d4:	607b      	str	r3, [r7, #4]

    number /= factor;
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fb ff4e 	bl	8000578 <__aeabi_f2d>
 80046dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046e0:	f7fc f8cc 	bl	800087c <__aeabi_ddiv>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4610      	mov	r0, r2
 80046ea:	4619      	mov	r1, r3
 80046ec:	f7fc fa74 	bl	8000bd8 <__aeabi_d2f>
 80046f0:	4603      	mov	r3, r0
 80046f2:	607b      	str	r3, [r7, #4]

    return number;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	ee07 3a90 	vmov	s15, r3
}
 80046fa:	eeb0 0a67 	vmov.f32	s0, s15
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	f3af 8000 	nop.w
 8004708:	00000000 	.word	0x00000000
 800470c:	40240000 	.word	0x40240000

08004710 <__errno>:
 8004710:	4b01      	ldr	r3, [pc, #4]	; (8004718 <__errno+0x8>)
 8004712:	6818      	ldr	r0, [r3, #0]
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20000008 	.word	0x20000008

0800471c <__libc_init_array>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	4d0d      	ldr	r5, [pc, #52]	; (8004754 <__libc_init_array+0x38>)
 8004720:	4c0d      	ldr	r4, [pc, #52]	; (8004758 <__libc_init_array+0x3c>)
 8004722:	1b64      	subs	r4, r4, r5
 8004724:	10a4      	asrs	r4, r4, #2
 8004726:	2600      	movs	r6, #0
 8004728:	42a6      	cmp	r6, r4
 800472a:	d109      	bne.n	8004740 <__libc_init_array+0x24>
 800472c:	4d0b      	ldr	r5, [pc, #44]	; (800475c <__libc_init_array+0x40>)
 800472e:	4c0c      	ldr	r4, [pc, #48]	; (8004760 <__libc_init_array+0x44>)
 8004730:	f004 fb2a 	bl	8008d88 <_init>
 8004734:	1b64      	subs	r4, r4, r5
 8004736:	10a4      	asrs	r4, r4, #2
 8004738:	2600      	movs	r6, #0
 800473a:	42a6      	cmp	r6, r4
 800473c:	d105      	bne.n	800474a <__libc_init_array+0x2e>
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	f855 3b04 	ldr.w	r3, [r5], #4
 8004744:	4798      	blx	r3
 8004746:	3601      	adds	r6, #1
 8004748:	e7ee      	b.n	8004728 <__libc_init_array+0xc>
 800474a:	f855 3b04 	ldr.w	r3, [r5], #4
 800474e:	4798      	blx	r3
 8004750:	3601      	adds	r6, #1
 8004752:	e7f2      	b.n	800473a <__libc_init_array+0x1e>
 8004754:	080094d8 	.word	0x080094d8
 8004758:	080094d8 	.word	0x080094d8
 800475c:	080094d8 	.word	0x080094d8
 8004760:	080094dc 	.word	0x080094dc

08004764 <malloc>:
 8004764:	4b02      	ldr	r3, [pc, #8]	; (8004770 <malloc+0xc>)
 8004766:	4601      	mov	r1, r0
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	f000 b877 	b.w	800485c <_malloc_r>
 800476e:	bf00      	nop
 8004770:	20000008 	.word	0x20000008

08004774 <memset>:
 8004774:	4402      	add	r2, r0
 8004776:	4603      	mov	r3, r0
 8004778:	4293      	cmp	r3, r2
 800477a:	d100      	bne.n	800477e <memset+0xa>
 800477c:	4770      	bx	lr
 800477e:	f803 1b01 	strb.w	r1, [r3], #1
 8004782:	e7f9      	b.n	8004778 <memset+0x4>

08004784 <_free_r>:
 8004784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004786:	2900      	cmp	r1, #0
 8004788:	d044      	beq.n	8004814 <_free_r+0x90>
 800478a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800478e:	9001      	str	r0, [sp, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f1a1 0404 	sub.w	r4, r1, #4
 8004796:	bfb8      	it	lt
 8004798:	18e4      	addlt	r4, r4, r3
 800479a:	f001 fc9f 	bl	80060dc <__malloc_lock>
 800479e:	4a1e      	ldr	r2, [pc, #120]	; (8004818 <_free_r+0x94>)
 80047a0:	9801      	ldr	r0, [sp, #4]
 80047a2:	6813      	ldr	r3, [r2, #0]
 80047a4:	b933      	cbnz	r3, 80047b4 <_free_r+0x30>
 80047a6:	6063      	str	r3, [r4, #4]
 80047a8:	6014      	str	r4, [r2, #0]
 80047aa:	b003      	add	sp, #12
 80047ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047b0:	f001 bc9a 	b.w	80060e8 <__malloc_unlock>
 80047b4:	42a3      	cmp	r3, r4
 80047b6:	d908      	bls.n	80047ca <_free_r+0x46>
 80047b8:	6825      	ldr	r5, [r4, #0]
 80047ba:	1961      	adds	r1, r4, r5
 80047bc:	428b      	cmp	r3, r1
 80047be:	bf01      	itttt	eq
 80047c0:	6819      	ldreq	r1, [r3, #0]
 80047c2:	685b      	ldreq	r3, [r3, #4]
 80047c4:	1949      	addeq	r1, r1, r5
 80047c6:	6021      	streq	r1, [r4, #0]
 80047c8:	e7ed      	b.n	80047a6 <_free_r+0x22>
 80047ca:	461a      	mov	r2, r3
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	b10b      	cbz	r3, 80047d4 <_free_r+0x50>
 80047d0:	42a3      	cmp	r3, r4
 80047d2:	d9fa      	bls.n	80047ca <_free_r+0x46>
 80047d4:	6811      	ldr	r1, [r2, #0]
 80047d6:	1855      	adds	r5, r2, r1
 80047d8:	42a5      	cmp	r5, r4
 80047da:	d10b      	bne.n	80047f4 <_free_r+0x70>
 80047dc:	6824      	ldr	r4, [r4, #0]
 80047de:	4421      	add	r1, r4
 80047e0:	1854      	adds	r4, r2, r1
 80047e2:	42a3      	cmp	r3, r4
 80047e4:	6011      	str	r1, [r2, #0]
 80047e6:	d1e0      	bne.n	80047aa <_free_r+0x26>
 80047e8:	681c      	ldr	r4, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	6053      	str	r3, [r2, #4]
 80047ee:	4421      	add	r1, r4
 80047f0:	6011      	str	r1, [r2, #0]
 80047f2:	e7da      	b.n	80047aa <_free_r+0x26>
 80047f4:	d902      	bls.n	80047fc <_free_r+0x78>
 80047f6:	230c      	movs	r3, #12
 80047f8:	6003      	str	r3, [r0, #0]
 80047fa:	e7d6      	b.n	80047aa <_free_r+0x26>
 80047fc:	6825      	ldr	r5, [r4, #0]
 80047fe:	1961      	adds	r1, r4, r5
 8004800:	428b      	cmp	r3, r1
 8004802:	bf04      	itt	eq
 8004804:	6819      	ldreq	r1, [r3, #0]
 8004806:	685b      	ldreq	r3, [r3, #4]
 8004808:	6063      	str	r3, [r4, #4]
 800480a:	bf04      	itt	eq
 800480c:	1949      	addeq	r1, r1, r5
 800480e:	6021      	streq	r1, [r4, #0]
 8004810:	6054      	str	r4, [r2, #4]
 8004812:	e7ca      	b.n	80047aa <_free_r+0x26>
 8004814:	b003      	add	sp, #12
 8004816:	bd30      	pop	{r4, r5, pc}
 8004818:	20000a6c 	.word	0x20000a6c

0800481c <sbrk_aligned>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	4e0e      	ldr	r6, [pc, #56]	; (8004858 <sbrk_aligned+0x3c>)
 8004820:	460c      	mov	r4, r1
 8004822:	6831      	ldr	r1, [r6, #0]
 8004824:	4605      	mov	r5, r0
 8004826:	b911      	cbnz	r1, 800482e <sbrk_aligned+0x12>
 8004828:	f000 fcf6 	bl	8005218 <_sbrk_r>
 800482c:	6030      	str	r0, [r6, #0]
 800482e:	4621      	mov	r1, r4
 8004830:	4628      	mov	r0, r5
 8004832:	f000 fcf1 	bl	8005218 <_sbrk_r>
 8004836:	1c43      	adds	r3, r0, #1
 8004838:	d00a      	beq.n	8004850 <sbrk_aligned+0x34>
 800483a:	1cc4      	adds	r4, r0, #3
 800483c:	f024 0403 	bic.w	r4, r4, #3
 8004840:	42a0      	cmp	r0, r4
 8004842:	d007      	beq.n	8004854 <sbrk_aligned+0x38>
 8004844:	1a21      	subs	r1, r4, r0
 8004846:	4628      	mov	r0, r5
 8004848:	f000 fce6 	bl	8005218 <_sbrk_r>
 800484c:	3001      	adds	r0, #1
 800484e:	d101      	bne.n	8004854 <sbrk_aligned+0x38>
 8004850:	f04f 34ff 	mov.w	r4, #4294967295
 8004854:	4620      	mov	r0, r4
 8004856:	bd70      	pop	{r4, r5, r6, pc}
 8004858:	20000a70 	.word	0x20000a70

0800485c <_malloc_r>:
 800485c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004860:	1ccd      	adds	r5, r1, #3
 8004862:	f025 0503 	bic.w	r5, r5, #3
 8004866:	3508      	adds	r5, #8
 8004868:	2d0c      	cmp	r5, #12
 800486a:	bf38      	it	cc
 800486c:	250c      	movcc	r5, #12
 800486e:	2d00      	cmp	r5, #0
 8004870:	4607      	mov	r7, r0
 8004872:	db01      	blt.n	8004878 <_malloc_r+0x1c>
 8004874:	42a9      	cmp	r1, r5
 8004876:	d905      	bls.n	8004884 <_malloc_r+0x28>
 8004878:	230c      	movs	r3, #12
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	2600      	movs	r6, #0
 800487e:	4630      	mov	r0, r6
 8004880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004884:	4e2e      	ldr	r6, [pc, #184]	; (8004940 <_malloc_r+0xe4>)
 8004886:	f001 fc29 	bl	80060dc <__malloc_lock>
 800488a:	6833      	ldr	r3, [r6, #0]
 800488c:	461c      	mov	r4, r3
 800488e:	bb34      	cbnz	r4, 80048de <_malloc_r+0x82>
 8004890:	4629      	mov	r1, r5
 8004892:	4638      	mov	r0, r7
 8004894:	f7ff ffc2 	bl	800481c <sbrk_aligned>
 8004898:	1c43      	adds	r3, r0, #1
 800489a:	4604      	mov	r4, r0
 800489c:	d14d      	bne.n	800493a <_malloc_r+0xde>
 800489e:	6834      	ldr	r4, [r6, #0]
 80048a0:	4626      	mov	r6, r4
 80048a2:	2e00      	cmp	r6, #0
 80048a4:	d140      	bne.n	8004928 <_malloc_r+0xcc>
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	4631      	mov	r1, r6
 80048aa:	4638      	mov	r0, r7
 80048ac:	eb04 0803 	add.w	r8, r4, r3
 80048b0:	f000 fcb2 	bl	8005218 <_sbrk_r>
 80048b4:	4580      	cmp	r8, r0
 80048b6:	d13a      	bne.n	800492e <_malloc_r+0xd2>
 80048b8:	6821      	ldr	r1, [r4, #0]
 80048ba:	3503      	adds	r5, #3
 80048bc:	1a6d      	subs	r5, r5, r1
 80048be:	f025 0503 	bic.w	r5, r5, #3
 80048c2:	3508      	adds	r5, #8
 80048c4:	2d0c      	cmp	r5, #12
 80048c6:	bf38      	it	cc
 80048c8:	250c      	movcc	r5, #12
 80048ca:	4629      	mov	r1, r5
 80048cc:	4638      	mov	r0, r7
 80048ce:	f7ff ffa5 	bl	800481c <sbrk_aligned>
 80048d2:	3001      	adds	r0, #1
 80048d4:	d02b      	beq.n	800492e <_malloc_r+0xd2>
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	442b      	add	r3, r5
 80048da:	6023      	str	r3, [r4, #0]
 80048dc:	e00e      	b.n	80048fc <_malloc_r+0xa0>
 80048de:	6822      	ldr	r2, [r4, #0]
 80048e0:	1b52      	subs	r2, r2, r5
 80048e2:	d41e      	bmi.n	8004922 <_malloc_r+0xc6>
 80048e4:	2a0b      	cmp	r2, #11
 80048e6:	d916      	bls.n	8004916 <_malloc_r+0xba>
 80048e8:	1961      	adds	r1, r4, r5
 80048ea:	42a3      	cmp	r3, r4
 80048ec:	6025      	str	r5, [r4, #0]
 80048ee:	bf18      	it	ne
 80048f0:	6059      	strne	r1, [r3, #4]
 80048f2:	6863      	ldr	r3, [r4, #4]
 80048f4:	bf08      	it	eq
 80048f6:	6031      	streq	r1, [r6, #0]
 80048f8:	5162      	str	r2, [r4, r5]
 80048fa:	604b      	str	r3, [r1, #4]
 80048fc:	4638      	mov	r0, r7
 80048fe:	f104 060b 	add.w	r6, r4, #11
 8004902:	f001 fbf1 	bl	80060e8 <__malloc_unlock>
 8004906:	f026 0607 	bic.w	r6, r6, #7
 800490a:	1d23      	adds	r3, r4, #4
 800490c:	1af2      	subs	r2, r6, r3
 800490e:	d0b6      	beq.n	800487e <_malloc_r+0x22>
 8004910:	1b9b      	subs	r3, r3, r6
 8004912:	50a3      	str	r3, [r4, r2]
 8004914:	e7b3      	b.n	800487e <_malloc_r+0x22>
 8004916:	6862      	ldr	r2, [r4, #4]
 8004918:	42a3      	cmp	r3, r4
 800491a:	bf0c      	ite	eq
 800491c:	6032      	streq	r2, [r6, #0]
 800491e:	605a      	strne	r2, [r3, #4]
 8004920:	e7ec      	b.n	80048fc <_malloc_r+0xa0>
 8004922:	4623      	mov	r3, r4
 8004924:	6864      	ldr	r4, [r4, #4]
 8004926:	e7b2      	b.n	800488e <_malloc_r+0x32>
 8004928:	4634      	mov	r4, r6
 800492a:	6876      	ldr	r6, [r6, #4]
 800492c:	e7b9      	b.n	80048a2 <_malloc_r+0x46>
 800492e:	230c      	movs	r3, #12
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	4638      	mov	r0, r7
 8004934:	f001 fbd8 	bl	80060e8 <__malloc_unlock>
 8004938:	e7a1      	b.n	800487e <_malloc_r+0x22>
 800493a:	6025      	str	r5, [r4, #0]
 800493c:	e7de      	b.n	80048fc <_malloc_r+0xa0>
 800493e:	bf00      	nop
 8004940:	20000a6c 	.word	0x20000a6c

08004944 <__cvt>:
 8004944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004948:	ec55 4b10 	vmov	r4, r5, d0
 800494c:	2d00      	cmp	r5, #0
 800494e:	460e      	mov	r6, r1
 8004950:	4619      	mov	r1, r3
 8004952:	462b      	mov	r3, r5
 8004954:	bfbb      	ittet	lt
 8004956:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800495a:	461d      	movlt	r5, r3
 800495c:	2300      	movge	r3, #0
 800495e:	232d      	movlt	r3, #45	; 0x2d
 8004960:	700b      	strb	r3, [r1, #0]
 8004962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004964:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004968:	4691      	mov	r9, r2
 800496a:	f023 0820 	bic.w	r8, r3, #32
 800496e:	bfbc      	itt	lt
 8004970:	4622      	movlt	r2, r4
 8004972:	4614      	movlt	r4, r2
 8004974:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004978:	d005      	beq.n	8004986 <__cvt+0x42>
 800497a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800497e:	d100      	bne.n	8004982 <__cvt+0x3e>
 8004980:	3601      	adds	r6, #1
 8004982:	2102      	movs	r1, #2
 8004984:	e000      	b.n	8004988 <__cvt+0x44>
 8004986:	2103      	movs	r1, #3
 8004988:	ab03      	add	r3, sp, #12
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	ab02      	add	r3, sp, #8
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	ec45 4b10 	vmov	d0, r4, r5
 8004994:	4653      	mov	r3, sl
 8004996:	4632      	mov	r2, r6
 8004998:	f000 fd8e 	bl	80054b8 <_dtoa_r>
 800499c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049a0:	4607      	mov	r7, r0
 80049a2:	d102      	bne.n	80049aa <__cvt+0x66>
 80049a4:	f019 0f01 	tst.w	r9, #1
 80049a8:	d022      	beq.n	80049f0 <__cvt+0xac>
 80049aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049ae:	eb07 0906 	add.w	r9, r7, r6
 80049b2:	d110      	bne.n	80049d6 <__cvt+0x92>
 80049b4:	783b      	ldrb	r3, [r7, #0]
 80049b6:	2b30      	cmp	r3, #48	; 0x30
 80049b8:	d10a      	bne.n	80049d0 <__cvt+0x8c>
 80049ba:	2200      	movs	r2, #0
 80049bc:	2300      	movs	r3, #0
 80049be:	4620      	mov	r0, r4
 80049c0:	4629      	mov	r1, r5
 80049c2:	f7fc f899 	bl	8000af8 <__aeabi_dcmpeq>
 80049c6:	b918      	cbnz	r0, 80049d0 <__cvt+0x8c>
 80049c8:	f1c6 0601 	rsb	r6, r6, #1
 80049cc:	f8ca 6000 	str.w	r6, [sl]
 80049d0:	f8da 3000 	ldr.w	r3, [sl]
 80049d4:	4499      	add	r9, r3
 80049d6:	2200      	movs	r2, #0
 80049d8:	2300      	movs	r3, #0
 80049da:	4620      	mov	r0, r4
 80049dc:	4629      	mov	r1, r5
 80049de:	f7fc f88b 	bl	8000af8 <__aeabi_dcmpeq>
 80049e2:	b108      	cbz	r0, 80049e8 <__cvt+0xa4>
 80049e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80049e8:	2230      	movs	r2, #48	; 0x30
 80049ea:	9b03      	ldr	r3, [sp, #12]
 80049ec:	454b      	cmp	r3, r9
 80049ee:	d307      	bcc.n	8004a00 <__cvt+0xbc>
 80049f0:	9b03      	ldr	r3, [sp, #12]
 80049f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049f4:	1bdb      	subs	r3, r3, r7
 80049f6:	4638      	mov	r0, r7
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	b004      	add	sp, #16
 80049fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a00:	1c59      	adds	r1, r3, #1
 8004a02:	9103      	str	r1, [sp, #12]
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	e7f0      	b.n	80049ea <__cvt+0xa6>

08004a08 <__exponent>:
 8004a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2900      	cmp	r1, #0
 8004a0e:	bfb8      	it	lt
 8004a10:	4249      	neglt	r1, r1
 8004a12:	f803 2b02 	strb.w	r2, [r3], #2
 8004a16:	bfb4      	ite	lt
 8004a18:	222d      	movlt	r2, #45	; 0x2d
 8004a1a:	222b      	movge	r2, #43	; 0x2b
 8004a1c:	2909      	cmp	r1, #9
 8004a1e:	7042      	strb	r2, [r0, #1]
 8004a20:	dd2a      	ble.n	8004a78 <__exponent+0x70>
 8004a22:	f10d 0407 	add.w	r4, sp, #7
 8004a26:	46a4      	mov	ip, r4
 8004a28:	270a      	movs	r7, #10
 8004a2a:	46a6      	mov	lr, r4
 8004a2c:	460a      	mov	r2, r1
 8004a2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004a32:	fb07 1516 	mls	r5, r7, r6, r1
 8004a36:	3530      	adds	r5, #48	; 0x30
 8004a38:	2a63      	cmp	r2, #99	; 0x63
 8004a3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004a3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004a42:	4631      	mov	r1, r6
 8004a44:	dcf1      	bgt.n	8004a2a <__exponent+0x22>
 8004a46:	3130      	adds	r1, #48	; 0x30
 8004a48:	f1ae 0502 	sub.w	r5, lr, #2
 8004a4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004a50:	1c44      	adds	r4, r0, #1
 8004a52:	4629      	mov	r1, r5
 8004a54:	4561      	cmp	r1, ip
 8004a56:	d30a      	bcc.n	8004a6e <__exponent+0x66>
 8004a58:	f10d 0209 	add.w	r2, sp, #9
 8004a5c:	eba2 020e 	sub.w	r2, r2, lr
 8004a60:	4565      	cmp	r5, ip
 8004a62:	bf88      	it	hi
 8004a64:	2200      	movhi	r2, #0
 8004a66:	4413      	add	r3, r2
 8004a68:	1a18      	subs	r0, r3, r0
 8004a6a:	b003      	add	sp, #12
 8004a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004a76:	e7ed      	b.n	8004a54 <__exponent+0x4c>
 8004a78:	2330      	movs	r3, #48	; 0x30
 8004a7a:	3130      	adds	r1, #48	; 0x30
 8004a7c:	7083      	strb	r3, [r0, #2]
 8004a7e:	70c1      	strb	r1, [r0, #3]
 8004a80:	1d03      	adds	r3, r0, #4
 8004a82:	e7f1      	b.n	8004a68 <__exponent+0x60>

08004a84 <_printf_float>:
 8004a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a88:	ed2d 8b02 	vpush	{d8}
 8004a8c:	b08d      	sub	sp, #52	; 0x34
 8004a8e:	460c      	mov	r4, r1
 8004a90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004a94:	4616      	mov	r6, r2
 8004a96:	461f      	mov	r7, r3
 8004a98:	4605      	mov	r5, r0
 8004a9a:	f001 fafb 	bl	8006094 <_localeconv_r>
 8004a9e:	f8d0 a000 	ldr.w	sl, [r0]
 8004aa2:	4650      	mov	r0, sl
 8004aa4:	f7fb fba6 	bl	80001f4 <strlen>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	9305      	str	r3, [sp, #20]
 8004ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ab4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ab8:	3307      	adds	r3, #7
 8004aba:	f023 0307 	bic.w	r3, r3, #7
 8004abe:	f103 0208 	add.w	r2, r3, #8
 8004ac2:	f8c8 2000 	str.w	r2, [r8]
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ace:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004ad2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ad6:	9307      	str	r3, [sp, #28]
 8004ad8:	f8cd 8018 	str.w	r8, [sp, #24]
 8004adc:	ee08 0a10 	vmov	s16, r0
 8004ae0:	4b9f      	ldr	r3, [pc, #636]	; (8004d60 <_printf_float+0x2dc>)
 8004ae2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aea:	f7fc f837 	bl	8000b5c <__aeabi_dcmpun>
 8004aee:	bb88      	cbnz	r0, 8004b54 <_printf_float+0xd0>
 8004af0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004af4:	4b9a      	ldr	r3, [pc, #616]	; (8004d60 <_printf_float+0x2dc>)
 8004af6:	f04f 32ff 	mov.w	r2, #4294967295
 8004afa:	f7fc f811 	bl	8000b20 <__aeabi_dcmple>
 8004afe:	bb48      	cbnz	r0, 8004b54 <_printf_float+0xd0>
 8004b00:	2200      	movs	r2, #0
 8004b02:	2300      	movs	r3, #0
 8004b04:	4640      	mov	r0, r8
 8004b06:	4649      	mov	r1, r9
 8004b08:	f7fc f800 	bl	8000b0c <__aeabi_dcmplt>
 8004b0c:	b110      	cbz	r0, 8004b14 <_printf_float+0x90>
 8004b0e:	232d      	movs	r3, #45	; 0x2d
 8004b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b14:	4b93      	ldr	r3, [pc, #588]	; (8004d64 <_printf_float+0x2e0>)
 8004b16:	4894      	ldr	r0, [pc, #592]	; (8004d68 <_printf_float+0x2e4>)
 8004b18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004b1c:	bf94      	ite	ls
 8004b1e:	4698      	movls	r8, r3
 8004b20:	4680      	movhi	r8, r0
 8004b22:	2303      	movs	r3, #3
 8004b24:	6123      	str	r3, [r4, #16]
 8004b26:	9b05      	ldr	r3, [sp, #20]
 8004b28:	f023 0204 	bic.w	r2, r3, #4
 8004b2c:	6022      	str	r2, [r4, #0]
 8004b2e:	f04f 0900 	mov.w	r9, #0
 8004b32:	9700      	str	r7, [sp, #0]
 8004b34:	4633      	mov	r3, r6
 8004b36:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b38:	4621      	mov	r1, r4
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	f000 f9d8 	bl	8004ef0 <_printf_common>
 8004b40:	3001      	adds	r0, #1
 8004b42:	f040 8090 	bne.w	8004c66 <_printf_float+0x1e2>
 8004b46:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4a:	b00d      	add	sp, #52	; 0x34
 8004b4c:	ecbd 8b02 	vpop	{d8}
 8004b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b54:	4642      	mov	r2, r8
 8004b56:	464b      	mov	r3, r9
 8004b58:	4640      	mov	r0, r8
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	f7fb fffe 	bl	8000b5c <__aeabi_dcmpun>
 8004b60:	b140      	cbz	r0, 8004b74 <_printf_float+0xf0>
 8004b62:	464b      	mov	r3, r9
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bfbc      	itt	lt
 8004b68:	232d      	movlt	r3, #45	; 0x2d
 8004b6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b6e:	487f      	ldr	r0, [pc, #508]	; (8004d6c <_printf_float+0x2e8>)
 8004b70:	4b7f      	ldr	r3, [pc, #508]	; (8004d70 <_printf_float+0x2ec>)
 8004b72:	e7d1      	b.n	8004b18 <_printf_float+0x94>
 8004b74:	6863      	ldr	r3, [r4, #4]
 8004b76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004b7a:	9206      	str	r2, [sp, #24]
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	d13f      	bne.n	8004c00 <_printf_float+0x17c>
 8004b80:	2306      	movs	r3, #6
 8004b82:	6063      	str	r3, [r4, #4]
 8004b84:	9b05      	ldr	r3, [sp, #20]
 8004b86:	6861      	ldr	r1, [r4, #4]
 8004b88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9303      	str	r3, [sp, #12]
 8004b90:	ab0a      	add	r3, sp, #40	; 0x28
 8004b92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004b96:	ab09      	add	r3, sp, #36	; 0x24
 8004b98:	ec49 8b10 	vmov	d0, r8, r9
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	6022      	str	r2, [r4, #0]
 8004ba0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f7ff fecd 	bl	8004944 <__cvt>
 8004baa:	9b06      	ldr	r3, [sp, #24]
 8004bac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bae:	2b47      	cmp	r3, #71	; 0x47
 8004bb0:	4680      	mov	r8, r0
 8004bb2:	d108      	bne.n	8004bc6 <_printf_float+0x142>
 8004bb4:	1cc8      	adds	r0, r1, #3
 8004bb6:	db02      	blt.n	8004bbe <_printf_float+0x13a>
 8004bb8:	6863      	ldr	r3, [r4, #4]
 8004bba:	4299      	cmp	r1, r3
 8004bbc:	dd41      	ble.n	8004c42 <_printf_float+0x1be>
 8004bbe:	f1ab 0b02 	sub.w	fp, fp, #2
 8004bc2:	fa5f fb8b 	uxtb.w	fp, fp
 8004bc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004bca:	d820      	bhi.n	8004c0e <_printf_float+0x18a>
 8004bcc:	3901      	subs	r1, #1
 8004bce:	465a      	mov	r2, fp
 8004bd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004bd4:	9109      	str	r1, [sp, #36]	; 0x24
 8004bd6:	f7ff ff17 	bl	8004a08 <__exponent>
 8004bda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bdc:	1813      	adds	r3, r2, r0
 8004bde:	2a01      	cmp	r2, #1
 8004be0:	4681      	mov	r9, r0
 8004be2:	6123      	str	r3, [r4, #16]
 8004be4:	dc02      	bgt.n	8004bec <_printf_float+0x168>
 8004be6:	6822      	ldr	r2, [r4, #0]
 8004be8:	07d2      	lsls	r2, r2, #31
 8004bea:	d501      	bpl.n	8004bf0 <_printf_float+0x16c>
 8004bec:	3301      	adds	r3, #1
 8004bee:	6123      	str	r3, [r4, #16]
 8004bf0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d09c      	beq.n	8004b32 <_printf_float+0xae>
 8004bf8:	232d      	movs	r3, #45	; 0x2d
 8004bfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bfe:	e798      	b.n	8004b32 <_printf_float+0xae>
 8004c00:	9a06      	ldr	r2, [sp, #24]
 8004c02:	2a47      	cmp	r2, #71	; 0x47
 8004c04:	d1be      	bne.n	8004b84 <_printf_float+0x100>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1bc      	bne.n	8004b84 <_printf_float+0x100>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e7b9      	b.n	8004b82 <_printf_float+0xfe>
 8004c0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004c12:	d118      	bne.n	8004c46 <_printf_float+0x1c2>
 8004c14:	2900      	cmp	r1, #0
 8004c16:	6863      	ldr	r3, [r4, #4]
 8004c18:	dd0b      	ble.n	8004c32 <_printf_float+0x1ae>
 8004c1a:	6121      	str	r1, [r4, #16]
 8004c1c:	b913      	cbnz	r3, 8004c24 <_printf_float+0x1a0>
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	07d0      	lsls	r0, r2, #31
 8004c22:	d502      	bpl.n	8004c2a <_printf_float+0x1a6>
 8004c24:	3301      	adds	r3, #1
 8004c26:	440b      	add	r3, r1
 8004c28:	6123      	str	r3, [r4, #16]
 8004c2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c2c:	f04f 0900 	mov.w	r9, #0
 8004c30:	e7de      	b.n	8004bf0 <_printf_float+0x16c>
 8004c32:	b913      	cbnz	r3, 8004c3a <_printf_float+0x1b6>
 8004c34:	6822      	ldr	r2, [r4, #0]
 8004c36:	07d2      	lsls	r2, r2, #31
 8004c38:	d501      	bpl.n	8004c3e <_printf_float+0x1ba>
 8004c3a:	3302      	adds	r3, #2
 8004c3c:	e7f4      	b.n	8004c28 <_printf_float+0x1a4>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e7f2      	b.n	8004c28 <_printf_float+0x1a4>
 8004c42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c48:	4299      	cmp	r1, r3
 8004c4a:	db05      	blt.n	8004c58 <_printf_float+0x1d4>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	6121      	str	r1, [r4, #16]
 8004c50:	07d8      	lsls	r0, r3, #31
 8004c52:	d5ea      	bpl.n	8004c2a <_printf_float+0x1a6>
 8004c54:	1c4b      	adds	r3, r1, #1
 8004c56:	e7e7      	b.n	8004c28 <_printf_float+0x1a4>
 8004c58:	2900      	cmp	r1, #0
 8004c5a:	bfd4      	ite	le
 8004c5c:	f1c1 0202 	rsble	r2, r1, #2
 8004c60:	2201      	movgt	r2, #1
 8004c62:	4413      	add	r3, r2
 8004c64:	e7e0      	b.n	8004c28 <_printf_float+0x1a4>
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	055a      	lsls	r2, r3, #21
 8004c6a:	d407      	bmi.n	8004c7c <_printf_float+0x1f8>
 8004c6c:	6923      	ldr	r3, [r4, #16]
 8004c6e:	4642      	mov	r2, r8
 8004c70:	4631      	mov	r1, r6
 8004c72:	4628      	mov	r0, r5
 8004c74:	47b8      	blx	r7
 8004c76:	3001      	adds	r0, #1
 8004c78:	d12c      	bne.n	8004cd4 <_printf_float+0x250>
 8004c7a:	e764      	b.n	8004b46 <_printf_float+0xc2>
 8004c7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c80:	f240 80e0 	bls.w	8004e44 <_printf_float+0x3c0>
 8004c84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f7fb ff34 	bl	8000af8 <__aeabi_dcmpeq>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d034      	beq.n	8004cfe <_printf_float+0x27a>
 8004c94:	4a37      	ldr	r2, [pc, #220]	; (8004d74 <_printf_float+0x2f0>)
 8004c96:	2301      	movs	r3, #1
 8004c98:	4631      	mov	r1, r6
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	47b8      	blx	r7
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	f43f af51 	beq.w	8004b46 <_printf_float+0xc2>
 8004ca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	db02      	blt.n	8004cb2 <_printf_float+0x22e>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	07d8      	lsls	r0, r3, #31
 8004cb0:	d510      	bpl.n	8004cd4 <_printf_float+0x250>
 8004cb2:	ee18 3a10 	vmov	r3, s16
 8004cb6:	4652      	mov	r2, sl
 8004cb8:	4631      	mov	r1, r6
 8004cba:	4628      	mov	r0, r5
 8004cbc:	47b8      	blx	r7
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	f43f af41 	beq.w	8004b46 <_printf_float+0xc2>
 8004cc4:	f04f 0800 	mov.w	r8, #0
 8004cc8:	f104 091a 	add.w	r9, r4, #26
 8004ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	4543      	cmp	r3, r8
 8004cd2:	dc09      	bgt.n	8004ce8 <_printf_float+0x264>
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	079b      	lsls	r3, r3, #30
 8004cd8:	f100 8105 	bmi.w	8004ee6 <_printf_float+0x462>
 8004cdc:	68e0      	ldr	r0, [r4, #12]
 8004cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ce0:	4298      	cmp	r0, r3
 8004ce2:	bfb8      	it	lt
 8004ce4:	4618      	movlt	r0, r3
 8004ce6:	e730      	b.n	8004b4a <_printf_float+0xc6>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	464a      	mov	r2, r9
 8004cec:	4631      	mov	r1, r6
 8004cee:	4628      	mov	r0, r5
 8004cf0:	47b8      	blx	r7
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	f43f af27 	beq.w	8004b46 <_printf_float+0xc2>
 8004cf8:	f108 0801 	add.w	r8, r8, #1
 8004cfc:	e7e6      	b.n	8004ccc <_printf_float+0x248>
 8004cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	dc39      	bgt.n	8004d78 <_printf_float+0x2f4>
 8004d04:	4a1b      	ldr	r2, [pc, #108]	; (8004d74 <_printf_float+0x2f0>)
 8004d06:	2301      	movs	r3, #1
 8004d08:	4631      	mov	r1, r6
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	47b8      	blx	r7
 8004d0e:	3001      	adds	r0, #1
 8004d10:	f43f af19 	beq.w	8004b46 <_printf_float+0xc2>
 8004d14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	d102      	bne.n	8004d22 <_printf_float+0x29e>
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	07d9      	lsls	r1, r3, #31
 8004d20:	d5d8      	bpl.n	8004cd4 <_printf_float+0x250>
 8004d22:	ee18 3a10 	vmov	r3, s16
 8004d26:	4652      	mov	r2, sl
 8004d28:	4631      	mov	r1, r6
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	47b8      	blx	r7
 8004d2e:	3001      	adds	r0, #1
 8004d30:	f43f af09 	beq.w	8004b46 <_printf_float+0xc2>
 8004d34:	f04f 0900 	mov.w	r9, #0
 8004d38:	f104 0a1a 	add.w	sl, r4, #26
 8004d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d3e:	425b      	negs	r3, r3
 8004d40:	454b      	cmp	r3, r9
 8004d42:	dc01      	bgt.n	8004d48 <_printf_float+0x2c4>
 8004d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d46:	e792      	b.n	8004c6e <_printf_float+0x1ea>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	4652      	mov	r2, sl
 8004d4c:	4631      	mov	r1, r6
 8004d4e:	4628      	mov	r0, r5
 8004d50:	47b8      	blx	r7
 8004d52:	3001      	adds	r0, #1
 8004d54:	f43f aef7 	beq.w	8004b46 <_printf_float+0xc2>
 8004d58:	f109 0901 	add.w	r9, r9, #1
 8004d5c:	e7ee      	b.n	8004d3c <_printf_float+0x2b8>
 8004d5e:	bf00      	nop
 8004d60:	7fefffff 	.word	0x7fefffff
 8004d64:	080090ac 	.word	0x080090ac
 8004d68:	080090b0 	.word	0x080090b0
 8004d6c:	080090b8 	.word	0x080090b8
 8004d70:	080090b4 	.word	0x080090b4
 8004d74:	080092e1 	.word	0x080092e1
 8004d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	bfa8      	it	ge
 8004d80:	461a      	movge	r2, r3
 8004d82:	2a00      	cmp	r2, #0
 8004d84:	4691      	mov	r9, r2
 8004d86:	dc37      	bgt.n	8004df8 <_printf_float+0x374>
 8004d88:	f04f 0b00 	mov.w	fp, #0
 8004d8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d90:	f104 021a 	add.w	r2, r4, #26
 8004d94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d96:	9305      	str	r3, [sp, #20]
 8004d98:	eba3 0309 	sub.w	r3, r3, r9
 8004d9c:	455b      	cmp	r3, fp
 8004d9e:	dc33      	bgt.n	8004e08 <_printf_float+0x384>
 8004da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004da4:	429a      	cmp	r2, r3
 8004da6:	db3b      	blt.n	8004e20 <_printf_float+0x39c>
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	07da      	lsls	r2, r3, #31
 8004dac:	d438      	bmi.n	8004e20 <_printf_float+0x39c>
 8004dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004db0:	9a05      	ldr	r2, [sp, #20]
 8004db2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004db4:	1a9a      	subs	r2, r3, r2
 8004db6:	eba3 0901 	sub.w	r9, r3, r1
 8004dba:	4591      	cmp	r9, r2
 8004dbc:	bfa8      	it	ge
 8004dbe:	4691      	movge	r9, r2
 8004dc0:	f1b9 0f00 	cmp.w	r9, #0
 8004dc4:	dc35      	bgt.n	8004e32 <_printf_float+0x3ae>
 8004dc6:	f04f 0800 	mov.w	r8, #0
 8004dca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dce:	f104 0a1a 	add.w	sl, r4, #26
 8004dd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	eba3 0309 	sub.w	r3, r3, r9
 8004ddc:	4543      	cmp	r3, r8
 8004dde:	f77f af79 	ble.w	8004cd4 <_printf_float+0x250>
 8004de2:	2301      	movs	r3, #1
 8004de4:	4652      	mov	r2, sl
 8004de6:	4631      	mov	r1, r6
 8004de8:	4628      	mov	r0, r5
 8004dea:	47b8      	blx	r7
 8004dec:	3001      	adds	r0, #1
 8004dee:	f43f aeaa 	beq.w	8004b46 <_printf_float+0xc2>
 8004df2:	f108 0801 	add.w	r8, r8, #1
 8004df6:	e7ec      	b.n	8004dd2 <_printf_float+0x34e>
 8004df8:	4613      	mov	r3, r2
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	4642      	mov	r2, r8
 8004dfe:	4628      	mov	r0, r5
 8004e00:	47b8      	blx	r7
 8004e02:	3001      	adds	r0, #1
 8004e04:	d1c0      	bne.n	8004d88 <_printf_float+0x304>
 8004e06:	e69e      	b.n	8004b46 <_printf_float+0xc2>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	9205      	str	r2, [sp, #20]
 8004e10:	47b8      	blx	r7
 8004e12:	3001      	adds	r0, #1
 8004e14:	f43f ae97 	beq.w	8004b46 <_printf_float+0xc2>
 8004e18:	9a05      	ldr	r2, [sp, #20]
 8004e1a:	f10b 0b01 	add.w	fp, fp, #1
 8004e1e:	e7b9      	b.n	8004d94 <_printf_float+0x310>
 8004e20:	ee18 3a10 	vmov	r3, s16
 8004e24:	4652      	mov	r2, sl
 8004e26:	4631      	mov	r1, r6
 8004e28:	4628      	mov	r0, r5
 8004e2a:	47b8      	blx	r7
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d1be      	bne.n	8004dae <_printf_float+0x32a>
 8004e30:	e689      	b.n	8004b46 <_printf_float+0xc2>
 8004e32:	9a05      	ldr	r2, [sp, #20]
 8004e34:	464b      	mov	r3, r9
 8004e36:	4442      	add	r2, r8
 8004e38:	4631      	mov	r1, r6
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	47b8      	blx	r7
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d1c1      	bne.n	8004dc6 <_printf_float+0x342>
 8004e42:	e680      	b.n	8004b46 <_printf_float+0xc2>
 8004e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e46:	2a01      	cmp	r2, #1
 8004e48:	dc01      	bgt.n	8004e4e <_printf_float+0x3ca>
 8004e4a:	07db      	lsls	r3, r3, #31
 8004e4c:	d538      	bpl.n	8004ec0 <_printf_float+0x43c>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	4642      	mov	r2, r8
 8004e52:	4631      	mov	r1, r6
 8004e54:	4628      	mov	r0, r5
 8004e56:	47b8      	blx	r7
 8004e58:	3001      	adds	r0, #1
 8004e5a:	f43f ae74 	beq.w	8004b46 <_printf_float+0xc2>
 8004e5e:	ee18 3a10 	vmov	r3, s16
 8004e62:	4652      	mov	r2, sl
 8004e64:	4631      	mov	r1, r6
 8004e66:	4628      	mov	r0, r5
 8004e68:	47b8      	blx	r7
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	f43f ae6b 	beq.w	8004b46 <_printf_float+0xc2>
 8004e70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e74:	2200      	movs	r2, #0
 8004e76:	2300      	movs	r3, #0
 8004e78:	f7fb fe3e 	bl	8000af8 <__aeabi_dcmpeq>
 8004e7c:	b9d8      	cbnz	r0, 8004eb6 <_printf_float+0x432>
 8004e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e80:	f108 0201 	add.w	r2, r8, #1
 8004e84:	3b01      	subs	r3, #1
 8004e86:	4631      	mov	r1, r6
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b8      	blx	r7
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	d10e      	bne.n	8004eae <_printf_float+0x42a>
 8004e90:	e659      	b.n	8004b46 <_printf_float+0xc2>
 8004e92:	2301      	movs	r3, #1
 8004e94:	4652      	mov	r2, sl
 8004e96:	4631      	mov	r1, r6
 8004e98:	4628      	mov	r0, r5
 8004e9a:	47b8      	blx	r7
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	f43f ae52 	beq.w	8004b46 <_printf_float+0xc2>
 8004ea2:	f108 0801 	add.w	r8, r8, #1
 8004ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	4543      	cmp	r3, r8
 8004eac:	dcf1      	bgt.n	8004e92 <_printf_float+0x40e>
 8004eae:	464b      	mov	r3, r9
 8004eb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004eb4:	e6dc      	b.n	8004c70 <_printf_float+0x1ec>
 8004eb6:	f04f 0800 	mov.w	r8, #0
 8004eba:	f104 0a1a 	add.w	sl, r4, #26
 8004ebe:	e7f2      	b.n	8004ea6 <_printf_float+0x422>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	4642      	mov	r2, r8
 8004ec4:	e7df      	b.n	8004e86 <_printf_float+0x402>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	464a      	mov	r2, r9
 8004eca:	4631      	mov	r1, r6
 8004ecc:	4628      	mov	r0, r5
 8004ece:	47b8      	blx	r7
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	f43f ae38 	beq.w	8004b46 <_printf_float+0xc2>
 8004ed6:	f108 0801 	add.w	r8, r8, #1
 8004eda:	68e3      	ldr	r3, [r4, #12]
 8004edc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ede:	1a5b      	subs	r3, r3, r1
 8004ee0:	4543      	cmp	r3, r8
 8004ee2:	dcf0      	bgt.n	8004ec6 <_printf_float+0x442>
 8004ee4:	e6fa      	b.n	8004cdc <_printf_float+0x258>
 8004ee6:	f04f 0800 	mov.w	r8, #0
 8004eea:	f104 0919 	add.w	r9, r4, #25
 8004eee:	e7f4      	b.n	8004eda <_printf_float+0x456>

08004ef0 <_printf_common>:
 8004ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef4:	4616      	mov	r6, r2
 8004ef6:	4699      	mov	r9, r3
 8004ef8:	688a      	ldr	r2, [r1, #8]
 8004efa:	690b      	ldr	r3, [r1, #16]
 8004efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f00:	4293      	cmp	r3, r2
 8004f02:	bfb8      	it	lt
 8004f04:	4613      	movlt	r3, r2
 8004f06:	6033      	str	r3, [r6, #0]
 8004f08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f0c:	4607      	mov	r7, r0
 8004f0e:	460c      	mov	r4, r1
 8004f10:	b10a      	cbz	r2, 8004f16 <_printf_common+0x26>
 8004f12:	3301      	adds	r3, #1
 8004f14:	6033      	str	r3, [r6, #0]
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	0699      	lsls	r1, r3, #26
 8004f1a:	bf42      	ittt	mi
 8004f1c:	6833      	ldrmi	r3, [r6, #0]
 8004f1e:	3302      	addmi	r3, #2
 8004f20:	6033      	strmi	r3, [r6, #0]
 8004f22:	6825      	ldr	r5, [r4, #0]
 8004f24:	f015 0506 	ands.w	r5, r5, #6
 8004f28:	d106      	bne.n	8004f38 <_printf_common+0x48>
 8004f2a:	f104 0a19 	add.w	sl, r4, #25
 8004f2e:	68e3      	ldr	r3, [r4, #12]
 8004f30:	6832      	ldr	r2, [r6, #0]
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	42ab      	cmp	r3, r5
 8004f36:	dc26      	bgt.n	8004f86 <_printf_common+0x96>
 8004f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f3c:	1e13      	subs	r3, r2, #0
 8004f3e:	6822      	ldr	r2, [r4, #0]
 8004f40:	bf18      	it	ne
 8004f42:	2301      	movne	r3, #1
 8004f44:	0692      	lsls	r2, r2, #26
 8004f46:	d42b      	bmi.n	8004fa0 <_printf_common+0xb0>
 8004f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	4638      	mov	r0, r7
 8004f50:	47c0      	blx	r8
 8004f52:	3001      	adds	r0, #1
 8004f54:	d01e      	beq.n	8004f94 <_printf_common+0xa4>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	68e5      	ldr	r5, [r4, #12]
 8004f5a:	6832      	ldr	r2, [r6, #0]
 8004f5c:	f003 0306 	and.w	r3, r3, #6
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	bf08      	it	eq
 8004f64:	1aad      	subeq	r5, r5, r2
 8004f66:	68a3      	ldr	r3, [r4, #8]
 8004f68:	6922      	ldr	r2, [r4, #16]
 8004f6a:	bf0c      	ite	eq
 8004f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f70:	2500      	movne	r5, #0
 8004f72:	4293      	cmp	r3, r2
 8004f74:	bfc4      	itt	gt
 8004f76:	1a9b      	subgt	r3, r3, r2
 8004f78:	18ed      	addgt	r5, r5, r3
 8004f7a:	2600      	movs	r6, #0
 8004f7c:	341a      	adds	r4, #26
 8004f7e:	42b5      	cmp	r5, r6
 8004f80:	d11a      	bne.n	8004fb8 <_printf_common+0xc8>
 8004f82:	2000      	movs	r0, #0
 8004f84:	e008      	b.n	8004f98 <_printf_common+0xa8>
 8004f86:	2301      	movs	r3, #1
 8004f88:	4652      	mov	r2, sl
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	4638      	mov	r0, r7
 8004f8e:	47c0      	blx	r8
 8004f90:	3001      	adds	r0, #1
 8004f92:	d103      	bne.n	8004f9c <_printf_common+0xac>
 8004f94:	f04f 30ff 	mov.w	r0, #4294967295
 8004f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f9c:	3501      	adds	r5, #1
 8004f9e:	e7c6      	b.n	8004f2e <_printf_common+0x3e>
 8004fa0:	18e1      	adds	r1, r4, r3
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	2030      	movs	r0, #48	; 0x30
 8004fa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004faa:	4422      	add	r2, r4
 8004fac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	e7c7      	b.n	8004f48 <_printf_common+0x58>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	4622      	mov	r2, r4
 8004fbc:	4649      	mov	r1, r9
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	47c0      	blx	r8
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	d0e6      	beq.n	8004f94 <_printf_common+0xa4>
 8004fc6:	3601      	adds	r6, #1
 8004fc8:	e7d9      	b.n	8004f7e <_printf_common+0x8e>
	...

08004fcc <_printf_i>:
 8004fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd0:	7e0f      	ldrb	r7, [r1, #24]
 8004fd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fd4:	2f78      	cmp	r7, #120	; 0x78
 8004fd6:	4691      	mov	r9, r2
 8004fd8:	4680      	mov	r8, r0
 8004fda:	460c      	mov	r4, r1
 8004fdc:	469a      	mov	sl, r3
 8004fde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fe2:	d807      	bhi.n	8004ff4 <_printf_i+0x28>
 8004fe4:	2f62      	cmp	r7, #98	; 0x62
 8004fe6:	d80a      	bhi.n	8004ffe <_printf_i+0x32>
 8004fe8:	2f00      	cmp	r7, #0
 8004fea:	f000 80d8 	beq.w	800519e <_printf_i+0x1d2>
 8004fee:	2f58      	cmp	r7, #88	; 0x58
 8004ff0:	f000 80a3 	beq.w	800513a <_printf_i+0x16e>
 8004ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ffc:	e03a      	b.n	8005074 <_printf_i+0xa8>
 8004ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005002:	2b15      	cmp	r3, #21
 8005004:	d8f6      	bhi.n	8004ff4 <_printf_i+0x28>
 8005006:	a101      	add	r1, pc, #4	; (adr r1, 800500c <_printf_i+0x40>)
 8005008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800500c:	08005065 	.word	0x08005065
 8005010:	08005079 	.word	0x08005079
 8005014:	08004ff5 	.word	0x08004ff5
 8005018:	08004ff5 	.word	0x08004ff5
 800501c:	08004ff5 	.word	0x08004ff5
 8005020:	08004ff5 	.word	0x08004ff5
 8005024:	08005079 	.word	0x08005079
 8005028:	08004ff5 	.word	0x08004ff5
 800502c:	08004ff5 	.word	0x08004ff5
 8005030:	08004ff5 	.word	0x08004ff5
 8005034:	08004ff5 	.word	0x08004ff5
 8005038:	08005185 	.word	0x08005185
 800503c:	080050a9 	.word	0x080050a9
 8005040:	08005167 	.word	0x08005167
 8005044:	08004ff5 	.word	0x08004ff5
 8005048:	08004ff5 	.word	0x08004ff5
 800504c:	080051a7 	.word	0x080051a7
 8005050:	08004ff5 	.word	0x08004ff5
 8005054:	080050a9 	.word	0x080050a9
 8005058:	08004ff5 	.word	0x08004ff5
 800505c:	08004ff5 	.word	0x08004ff5
 8005060:	0800516f 	.word	0x0800516f
 8005064:	682b      	ldr	r3, [r5, #0]
 8005066:	1d1a      	adds	r2, r3, #4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	602a      	str	r2, [r5, #0]
 800506c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005074:	2301      	movs	r3, #1
 8005076:	e0a3      	b.n	80051c0 <_printf_i+0x1f4>
 8005078:	6820      	ldr	r0, [r4, #0]
 800507a:	6829      	ldr	r1, [r5, #0]
 800507c:	0606      	lsls	r6, r0, #24
 800507e:	f101 0304 	add.w	r3, r1, #4
 8005082:	d50a      	bpl.n	800509a <_printf_i+0xce>
 8005084:	680e      	ldr	r6, [r1, #0]
 8005086:	602b      	str	r3, [r5, #0]
 8005088:	2e00      	cmp	r6, #0
 800508a:	da03      	bge.n	8005094 <_printf_i+0xc8>
 800508c:	232d      	movs	r3, #45	; 0x2d
 800508e:	4276      	negs	r6, r6
 8005090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005094:	485e      	ldr	r0, [pc, #376]	; (8005210 <_printf_i+0x244>)
 8005096:	230a      	movs	r3, #10
 8005098:	e019      	b.n	80050ce <_printf_i+0x102>
 800509a:	680e      	ldr	r6, [r1, #0]
 800509c:	602b      	str	r3, [r5, #0]
 800509e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050a2:	bf18      	it	ne
 80050a4:	b236      	sxthne	r6, r6
 80050a6:	e7ef      	b.n	8005088 <_printf_i+0xbc>
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	6820      	ldr	r0, [r4, #0]
 80050ac:	1d19      	adds	r1, r3, #4
 80050ae:	6029      	str	r1, [r5, #0]
 80050b0:	0601      	lsls	r1, r0, #24
 80050b2:	d501      	bpl.n	80050b8 <_printf_i+0xec>
 80050b4:	681e      	ldr	r6, [r3, #0]
 80050b6:	e002      	b.n	80050be <_printf_i+0xf2>
 80050b8:	0646      	lsls	r6, r0, #25
 80050ba:	d5fb      	bpl.n	80050b4 <_printf_i+0xe8>
 80050bc:	881e      	ldrh	r6, [r3, #0]
 80050be:	4854      	ldr	r0, [pc, #336]	; (8005210 <_printf_i+0x244>)
 80050c0:	2f6f      	cmp	r7, #111	; 0x6f
 80050c2:	bf0c      	ite	eq
 80050c4:	2308      	moveq	r3, #8
 80050c6:	230a      	movne	r3, #10
 80050c8:	2100      	movs	r1, #0
 80050ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ce:	6865      	ldr	r5, [r4, #4]
 80050d0:	60a5      	str	r5, [r4, #8]
 80050d2:	2d00      	cmp	r5, #0
 80050d4:	bfa2      	ittt	ge
 80050d6:	6821      	ldrge	r1, [r4, #0]
 80050d8:	f021 0104 	bicge.w	r1, r1, #4
 80050dc:	6021      	strge	r1, [r4, #0]
 80050de:	b90e      	cbnz	r6, 80050e4 <_printf_i+0x118>
 80050e0:	2d00      	cmp	r5, #0
 80050e2:	d04d      	beq.n	8005180 <_printf_i+0x1b4>
 80050e4:	4615      	mov	r5, r2
 80050e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80050ea:	fb03 6711 	mls	r7, r3, r1, r6
 80050ee:	5dc7      	ldrb	r7, [r0, r7]
 80050f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050f4:	4637      	mov	r7, r6
 80050f6:	42bb      	cmp	r3, r7
 80050f8:	460e      	mov	r6, r1
 80050fa:	d9f4      	bls.n	80050e6 <_printf_i+0x11a>
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d10b      	bne.n	8005118 <_printf_i+0x14c>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	07de      	lsls	r6, r3, #31
 8005104:	d508      	bpl.n	8005118 <_printf_i+0x14c>
 8005106:	6923      	ldr	r3, [r4, #16]
 8005108:	6861      	ldr	r1, [r4, #4]
 800510a:	4299      	cmp	r1, r3
 800510c:	bfde      	ittt	le
 800510e:	2330      	movle	r3, #48	; 0x30
 8005110:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005114:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005118:	1b52      	subs	r2, r2, r5
 800511a:	6122      	str	r2, [r4, #16]
 800511c:	f8cd a000 	str.w	sl, [sp]
 8005120:	464b      	mov	r3, r9
 8005122:	aa03      	add	r2, sp, #12
 8005124:	4621      	mov	r1, r4
 8005126:	4640      	mov	r0, r8
 8005128:	f7ff fee2 	bl	8004ef0 <_printf_common>
 800512c:	3001      	adds	r0, #1
 800512e:	d14c      	bne.n	80051ca <_printf_i+0x1fe>
 8005130:	f04f 30ff 	mov.w	r0, #4294967295
 8005134:	b004      	add	sp, #16
 8005136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513a:	4835      	ldr	r0, [pc, #212]	; (8005210 <_printf_i+0x244>)
 800513c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005140:	6829      	ldr	r1, [r5, #0]
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	f851 6b04 	ldr.w	r6, [r1], #4
 8005148:	6029      	str	r1, [r5, #0]
 800514a:	061d      	lsls	r5, r3, #24
 800514c:	d514      	bpl.n	8005178 <_printf_i+0x1ac>
 800514e:	07df      	lsls	r7, r3, #31
 8005150:	bf44      	itt	mi
 8005152:	f043 0320 	orrmi.w	r3, r3, #32
 8005156:	6023      	strmi	r3, [r4, #0]
 8005158:	b91e      	cbnz	r6, 8005162 <_printf_i+0x196>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	f023 0320 	bic.w	r3, r3, #32
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	2310      	movs	r3, #16
 8005164:	e7b0      	b.n	80050c8 <_printf_i+0xfc>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	f043 0320 	orr.w	r3, r3, #32
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	2378      	movs	r3, #120	; 0x78
 8005170:	4828      	ldr	r0, [pc, #160]	; (8005214 <_printf_i+0x248>)
 8005172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005176:	e7e3      	b.n	8005140 <_printf_i+0x174>
 8005178:	0659      	lsls	r1, r3, #25
 800517a:	bf48      	it	mi
 800517c:	b2b6      	uxthmi	r6, r6
 800517e:	e7e6      	b.n	800514e <_printf_i+0x182>
 8005180:	4615      	mov	r5, r2
 8005182:	e7bb      	b.n	80050fc <_printf_i+0x130>
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	6826      	ldr	r6, [r4, #0]
 8005188:	6961      	ldr	r1, [r4, #20]
 800518a:	1d18      	adds	r0, r3, #4
 800518c:	6028      	str	r0, [r5, #0]
 800518e:	0635      	lsls	r5, r6, #24
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	d501      	bpl.n	8005198 <_printf_i+0x1cc>
 8005194:	6019      	str	r1, [r3, #0]
 8005196:	e002      	b.n	800519e <_printf_i+0x1d2>
 8005198:	0670      	lsls	r0, r6, #25
 800519a:	d5fb      	bpl.n	8005194 <_printf_i+0x1c8>
 800519c:	8019      	strh	r1, [r3, #0]
 800519e:	2300      	movs	r3, #0
 80051a0:	6123      	str	r3, [r4, #16]
 80051a2:	4615      	mov	r5, r2
 80051a4:	e7ba      	b.n	800511c <_printf_i+0x150>
 80051a6:	682b      	ldr	r3, [r5, #0]
 80051a8:	1d1a      	adds	r2, r3, #4
 80051aa:	602a      	str	r2, [r5, #0]
 80051ac:	681d      	ldr	r5, [r3, #0]
 80051ae:	6862      	ldr	r2, [r4, #4]
 80051b0:	2100      	movs	r1, #0
 80051b2:	4628      	mov	r0, r5
 80051b4:	f7fb f82c 	bl	8000210 <memchr>
 80051b8:	b108      	cbz	r0, 80051be <_printf_i+0x1f2>
 80051ba:	1b40      	subs	r0, r0, r5
 80051bc:	6060      	str	r0, [r4, #4]
 80051be:	6863      	ldr	r3, [r4, #4]
 80051c0:	6123      	str	r3, [r4, #16]
 80051c2:	2300      	movs	r3, #0
 80051c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051c8:	e7a8      	b.n	800511c <_printf_i+0x150>
 80051ca:	6923      	ldr	r3, [r4, #16]
 80051cc:	462a      	mov	r2, r5
 80051ce:	4649      	mov	r1, r9
 80051d0:	4640      	mov	r0, r8
 80051d2:	47d0      	blx	sl
 80051d4:	3001      	adds	r0, #1
 80051d6:	d0ab      	beq.n	8005130 <_printf_i+0x164>
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	079b      	lsls	r3, r3, #30
 80051dc:	d413      	bmi.n	8005206 <_printf_i+0x23a>
 80051de:	68e0      	ldr	r0, [r4, #12]
 80051e0:	9b03      	ldr	r3, [sp, #12]
 80051e2:	4298      	cmp	r0, r3
 80051e4:	bfb8      	it	lt
 80051e6:	4618      	movlt	r0, r3
 80051e8:	e7a4      	b.n	8005134 <_printf_i+0x168>
 80051ea:	2301      	movs	r3, #1
 80051ec:	4632      	mov	r2, r6
 80051ee:	4649      	mov	r1, r9
 80051f0:	4640      	mov	r0, r8
 80051f2:	47d0      	blx	sl
 80051f4:	3001      	adds	r0, #1
 80051f6:	d09b      	beq.n	8005130 <_printf_i+0x164>
 80051f8:	3501      	adds	r5, #1
 80051fa:	68e3      	ldr	r3, [r4, #12]
 80051fc:	9903      	ldr	r1, [sp, #12]
 80051fe:	1a5b      	subs	r3, r3, r1
 8005200:	42ab      	cmp	r3, r5
 8005202:	dcf2      	bgt.n	80051ea <_printf_i+0x21e>
 8005204:	e7eb      	b.n	80051de <_printf_i+0x212>
 8005206:	2500      	movs	r5, #0
 8005208:	f104 0619 	add.w	r6, r4, #25
 800520c:	e7f5      	b.n	80051fa <_printf_i+0x22e>
 800520e:	bf00      	nop
 8005210:	080090bc 	.word	0x080090bc
 8005214:	080090cd 	.word	0x080090cd

08005218 <_sbrk_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4d06      	ldr	r5, [pc, #24]	; (8005234 <_sbrk_r+0x1c>)
 800521c:	2300      	movs	r3, #0
 800521e:	4604      	mov	r4, r0
 8005220:	4608      	mov	r0, r1
 8005222:	602b      	str	r3, [r5, #0]
 8005224:	f003 fda2 	bl	8008d6c <_sbrk>
 8005228:	1c43      	adds	r3, r0, #1
 800522a:	d102      	bne.n	8005232 <_sbrk_r+0x1a>
 800522c:	682b      	ldr	r3, [r5, #0]
 800522e:	b103      	cbz	r3, 8005232 <_sbrk_r+0x1a>
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	bd38      	pop	{r3, r4, r5, pc}
 8005234:	20000a74 	.word	0x20000a74

08005238 <siprintf>:
 8005238:	b40e      	push	{r1, r2, r3}
 800523a:	b500      	push	{lr}
 800523c:	b09c      	sub	sp, #112	; 0x70
 800523e:	ab1d      	add	r3, sp, #116	; 0x74
 8005240:	9002      	str	r0, [sp, #8]
 8005242:	9006      	str	r0, [sp, #24]
 8005244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005248:	4809      	ldr	r0, [pc, #36]	; (8005270 <siprintf+0x38>)
 800524a:	9107      	str	r1, [sp, #28]
 800524c:	9104      	str	r1, [sp, #16]
 800524e:	4909      	ldr	r1, [pc, #36]	; (8005274 <siprintf+0x3c>)
 8005250:	f853 2b04 	ldr.w	r2, [r3], #4
 8005254:	9105      	str	r1, [sp, #20]
 8005256:	6800      	ldr	r0, [r0, #0]
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	a902      	add	r1, sp, #8
 800525c:	f001 fb40 	bl	80068e0 <_svfiprintf_r>
 8005260:	9b02      	ldr	r3, [sp, #8]
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	b01c      	add	sp, #112	; 0x70
 8005268:	f85d eb04 	ldr.w	lr, [sp], #4
 800526c:	b003      	add	sp, #12
 800526e:	4770      	bx	lr
 8005270:	20000008 	.word	0x20000008
 8005274:	ffff0208 	.word	0xffff0208

08005278 <siscanf>:
 8005278:	b40e      	push	{r1, r2, r3}
 800527a:	b510      	push	{r4, lr}
 800527c:	b09f      	sub	sp, #124	; 0x7c
 800527e:	ac21      	add	r4, sp, #132	; 0x84
 8005280:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005284:	f854 2b04 	ldr.w	r2, [r4], #4
 8005288:	9201      	str	r2, [sp, #4]
 800528a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800528e:	9004      	str	r0, [sp, #16]
 8005290:	9008      	str	r0, [sp, #32]
 8005292:	f7fa ffaf 	bl	80001f4 <strlen>
 8005296:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <siscanf+0x50>)
 8005298:	9005      	str	r0, [sp, #20]
 800529a:	9009      	str	r0, [sp, #36]	; 0x24
 800529c:	930d      	str	r3, [sp, #52]	; 0x34
 800529e:	480b      	ldr	r0, [pc, #44]	; (80052cc <siscanf+0x54>)
 80052a0:	9a01      	ldr	r2, [sp, #4]
 80052a2:	6800      	ldr	r0, [r0, #0]
 80052a4:	9403      	str	r4, [sp, #12]
 80052a6:	2300      	movs	r3, #0
 80052a8:	9311      	str	r3, [sp, #68]	; 0x44
 80052aa:	9316      	str	r3, [sp, #88]	; 0x58
 80052ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80052b4:	a904      	add	r1, sp, #16
 80052b6:	4623      	mov	r3, r4
 80052b8:	f001 fc6c 	bl	8006b94 <__ssvfiscanf_r>
 80052bc:	b01f      	add	sp, #124	; 0x7c
 80052be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c2:	b003      	add	sp, #12
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	080052f3 	.word	0x080052f3
 80052cc:	20000008 	.word	0x20000008

080052d0 <__sread>:
 80052d0:	b510      	push	{r4, lr}
 80052d2:	460c      	mov	r4, r1
 80052d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d8:	f001 ff26 	bl	8007128 <_read_r>
 80052dc:	2800      	cmp	r0, #0
 80052de:	bfab      	itete	ge
 80052e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052e2:	89a3      	ldrhlt	r3, [r4, #12]
 80052e4:	181b      	addge	r3, r3, r0
 80052e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052ea:	bfac      	ite	ge
 80052ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80052ee:	81a3      	strhlt	r3, [r4, #12]
 80052f0:	bd10      	pop	{r4, pc}

080052f2 <__seofread>:
 80052f2:	2000      	movs	r0, #0
 80052f4:	4770      	bx	lr

080052f6 <__swrite>:
 80052f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052fa:	461f      	mov	r7, r3
 80052fc:	898b      	ldrh	r3, [r1, #12]
 80052fe:	05db      	lsls	r3, r3, #23
 8005300:	4605      	mov	r5, r0
 8005302:	460c      	mov	r4, r1
 8005304:	4616      	mov	r6, r2
 8005306:	d505      	bpl.n	8005314 <__swrite+0x1e>
 8005308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800530c:	2302      	movs	r3, #2
 800530e:	2200      	movs	r2, #0
 8005310:	f000 fec4 	bl	800609c <_lseek_r>
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800531a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800531e:	81a3      	strh	r3, [r4, #12]
 8005320:	4632      	mov	r2, r6
 8005322:	463b      	mov	r3, r7
 8005324:	4628      	mov	r0, r5
 8005326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800532a:	f000 b817 	b.w	800535c <_write_r>

0800532e <__sseek>:
 800532e:	b510      	push	{r4, lr}
 8005330:	460c      	mov	r4, r1
 8005332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005336:	f000 feb1 	bl	800609c <_lseek_r>
 800533a:	1c43      	adds	r3, r0, #1
 800533c:	89a3      	ldrh	r3, [r4, #12]
 800533e:	bf15      	itete	ne
 8005340:	6560      	strne	r0, [r4, #84]	; 0x54
 8005342:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005346:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800534a:	81a3      	strheq	r3, [r4, #12]
 800534c:	bf18      	it	ne
 800534e:	81a3      	strhne	r3, [r4, #12]
 8005350:	bd10      	pop	{r4, pc}

08005352 <__sclose>:
 8005352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005356:	f000 b813 	b.w	8005380 <_close_r>
	...

0800535c <_write_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4d07      	ldr	r5, [pc, #28]	; (800537c <_write_r+0x20>)
 8005360:	4604      	mov	r4, r0
 8005362:	4608      	mov	r0, r1
 8005364:	4611      	mov	r1, r2
 8005366:	2200      	movs	r2, #0
 8005368:	602a      	str	r2, [r5, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	f7fb ff2f 	bl	80011ce <_write>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d102      	bne.n	800537a <_write_r+0x1e>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	b103      	cbz	r3, 800537a <_write_r+0x1e>
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	20000a74 	.word	0x20000a74

08005380 <_close_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4d06      	ldr	r5, [pc, #24]	; (800539c <_close_r+0x1c>)
 8005384:	2300      	movs	r3, #0
 8005386:	4604      	mov	r4, r0
 8005388:	4608      	mov	r0, r1
 800538a:	602b      	str	r3, [r5, #0]
 800538c:	f7fb ff3b 	bl	8001206 <_close>
 8005390:	1c43      	adds	r3, r0, #1
 8005392:	d102      	bne.n	800539a <_close_r+0x1a>
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	b103      	cbz	r3, 800539a <_close_r+0x1a>
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	bd38      	pop	{r3, r4, r5, pc}
 800539c:	20000a74 	.word	0x20000a74

080053a0 <quorem>:
 80053a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	6903      	ldr	r3, [r0, #16]
 80053a6:	690c      	ldr	r4, [r1, #16]
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	4607      	mov	r7, r0
 80053ac:	f2c0 8081 	blt.w	80054b2 <quorem+0x112>
 80053b0:	3c01      	subs	r4, #1
 80053b2:	f101 0814 	add.w	r8, r1, #20
 80053b6:	f100 0514 	add.w	r5, r0, #20
 80053ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80053c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053c8:	3301      	adds	r3, #1
 80053ca:	429a      	cmp	r2, r3
 80053cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80053d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80053d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80053d8:	d331      	bcc.n	800543e <quorem+0x9e>
 80053da:	f04f 0e00 	mov.w	lr, #0
 80053de:	4640      	mov	r0, r8
 80053e0:	46ac      	mov	ip, r5
 80053e2:	46f2      	mov	sl, lr
 80053e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80053e8:	b293      	uxth	r3, r2
 80053ea:	fb06 e303 	mla	r3, r6, r3, lr
 80053ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	ebaa 0303 	sub.w	r3, sl, r3
 80053f8:	f8dc a000 	ldr.w	sl, [ip]
 80053fc:	0c12      	lsrs	r2, r2, #16
 80053fe:	fa13 f38a 	uxtah	r3, r3, sl
 8005402:	fb06 e202 	mla	r2, r6, r2, lr
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	9b00      	ldr	r3, [sp, #0]
 800540a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800540e:	b292      	uxth	r2, r2
 8005410:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005414:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005418:	f8bd 3000 	ldrh.w	r3, [sp]
 800541c:	4581      	cmp	r9, r0
 800541e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005422:	f84c 3b04 	str.w	r3, [ip], #4
 8005426:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800542a:	d2db      	bcs.n	80053e4 <quorem+0x44>
 800542c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005430:	b92b      	cbnz	r3, 800543e <quorem+0x9e>
 8005432:	9b01      	ldr	r3, [sp, #4]
 8005434:	3b04      	subs	r3, #4
 8005436:	429d      	cmp	r5, r3
 8005438:	461a      	mov	r2, r3
 800543a:	d32e      	bcc.n	800549a <quorem+0xfa>
 800543c:	613c      	str	r4, [r7, #16]
 800543e:	4638      	mov	r0, r7
 8005440:	f001 f8da 	bl	80065f8 <__mcmp>
 8005444:	2800      	cmp	r0, #0
 8005446:	db24      	blt.n	8005492 <quorem+0xf2>
 8005448:	3601      	adds	r6, #1
 800544a:	4628      	mov	r0, r5
 800544c:	f04f 0c00 	mov.w	ip, #0
 8005450:	f858 2b04 	ldr.w	r2, [r8], #4
 8005454:	f8d0 e000 	ldr.w	lr, [r0]
 8005458:	b293      	uxth	r3, r2
 800545a:	ebac 0303 	sub.w	r3, ip, r3
 800545e:	0c12      	lsrs	r2, r2, #16
 8005460:	fa13 f38e 	uxtah	r3, r3, lr
 8005464:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005468:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800546c:	b29b      	uxth	r3, r3
 800546e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005472:	45c1      	cmp	r9, r8
 8005474:	f840 3b04 	str.w	r3, [r0], #4
 8005478:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800547c:	d2e8      	bcs.n	8005450 <quorem+0xb0>
 800547e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005482:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005486:	b922      	cbnz	r2, 8005492 <quorem+0xf2>
 8005488:	3b04      	subs	r3, #4
 800548a:	429d      	cmp	r5, r3
 800548c:	461a      	mov	r2, r3
 800548e:	d30a      	bcc.n	80054a6 <quorem+0x106>
 8005490:	613c      	str	r4, [r7, #16]
 8005492:	4630      	mov	r0, r6
 8005494:	b003      	add	sp, #12
 8005496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549a:	6812      	ldr	r2, [r2, #0]
 800549c:	3b04      	subs	r3, #4
 800549e:	2a00      	cmp	r2, #0
 80054a0:	d1cc      	bne.n	800543c <quorem+0x9c>
 80054a2:	3c01      	subs	r4, #1
 80054a4:	e7c7      	b.n	8005436 <quorem+0x96>
 80054a6:	6812      	ldr	r2, [r2, #0]
 80054a8:	3b04      	subs	r3, #4
 80054aa:	2a00      	cmp	r2, #0
 80054ac:	d1f0      	bne.n	8005490 <quorem+0xf0>
 80054ae:	3c01      	subs	r4, #1
 80054b0:	e7eb      	b.n	800548a <quorem+0xea>
 80054b2:	2000      	movs	r0, #0
 80054b4:	e7ee      	b.n	8005494 <quorem+0xf4>
	...

080054b8 <_dtoa_r>:
 80054b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054bc:	ed2d 8b04 	vpush	{d8-d9}
 80054c0:	ec57 6b10 	vmov	r6, r7, d0
 80054c4:	b093      	sub	sp, #76	; 0x4c
 80054c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80054c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80054cc:	9106      	str	r1, [sp, #24]
 80054ce:	ee10 aa10 	vmov	sl, s0
 80054d2:	4604      	mov	r4, r0
 80054d4:	9209      	str	r2, [sp, #36]	; 0x24
 80054d6:	930c      	str	r3, [sp, #48]	; 0x30
 80054d8:	46bb      	mov	fp, r7
 80054da:	b975      	cbnz	r5, 80054fa <_dtoa_r+0x42>
 80054dc:	2010      	movs	r0, #16
 80054de:	f7ff f941 	bl	8004764 <malloc>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6260      	str	r0, [r4, #36]	; 0x24
 80054e6:	b920      	cbnz	r0, 80054f2 <_dtoa_r+0x3a>
 80054e8:	4ba7      	ldr	r3, [pc, #668]	; (8005788 <_dtoa_r+0x2d0>)
 80054ea:	21ea      	movs	r1, #234	; 0xea
 80054ec:	48a7      	ldr	r0, [pc, #668]	; (800578c <_dtoa_r+0x2d4>)
 80054ee:	f001 ff97 	bl	8007420 <__assert_func>
 80054f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80054f6:	6005      	str	r5, [r0, #0]
 80054f8:	60c5      	str	r5, [r0, #12]
 80054fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054fc:	6819      	ldr	r1, [r3, #0]
 80054fe:	b151      	cbz	r1, 8005516 <_dtoa_r+0x5e>
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	604a      	str	r2, [r1, #4]
 8005504:	2301      	movs	r3, #1
 8005506:	4093      	lsls	r3, r2
 8005508:	608b      	str	r3, [r1, #8]
 800550a:	4620      	mov	r0, r4
 800550c:	f000 fe32 	bl	8006174 <_Bfree>
 8005510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	1e3b      	subs	r3, r7, #0
 8005518:	bfaa      	itet	ge
 800551a:	2300      	movge	r3, #0
 800551c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005520:	f8c8 3000 	strge.w	r3, [r8]
 8005524:	4b9a      	ldr	r3, [pc, #616]	; (8005790 <_dtoa_r+0x2d8>)
 8005526:	bfbc      	itt	lt
 8005528:	2201      	movlt	r2, #1
 800552a:	f8c8 2000 	strlt.w	r2, [r8]
 800552e:	ea33 030b 	bics.w	r3, r3, fp
 8005532:	d11b      	bne.n	800556c <_dtoa_r+0xb4>
 8005534:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005536:	f242 730f 	movw	r3, #9999	; 0x270f
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005540:	4333      	orrs	r3, r6
 8005542:	f000 8592 	beq.w	800606a <_dtoa_r+0xbb2>
 8005546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005548:	b963      	cbnz	r3, 8005564 <_dtoa_r+0xac>
 800554a:	4b92      	ldr	r3, [pc, #584]	; (8005794 <_dtoa_r+0x2dc>)
 800554c:	e022      	b.n	8005594 <_dtoa_r+0xdc>
 800554e:	4b92      	ldr	r3, [pc, #584]	; (8005798 <_dtoa_r+0x2e0>)
 8005550:	9301      	str	r3, [sp, #4]
 8005552:	3308      	adds	r3, #8
 8005554:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	9801      	ldr	r0, [sp, #4]
 800555a:	b013      	add	sp, #76	; 0x4c
 800555c:	ecbd 8b04 	vpop	{d8-d9}
 8005560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005564:	4b8b      	ldr	r3, [pc, #556]	; (8005794 <_dtoa_r+0x2dc>)
 8005566:	9301      	str	r3, [sp, #4]
 8005568:	3303      	adds	r3, #3
 800556a:	e7f3      	b.n	8005554 <_dtoa_r+0x9c>
 800556c:	2200      	movs	r2, #0
 800556e:	2300      	movs	r3, #0
 8005570:	4650      	mov	r0, sl
 8005572:	4659      	mov	r1, fp
 8005574:	f7fb fac0 	bl	8000af8 <__aeabi_dcmpeq>
 8005578:	ec4b ab19 	vmov	d9, sl, fp
 800557c:	4680      	mov	r8, r0
 800557e:	b158      	cbz	r0, 8005598 <_dtoa_r+0xe0>
 8005580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005582:	2301      	movs	r3, #1
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 856b 	beq.w	8006064 <_dtoa_r+0xbac>
 800558e:	4883      	ldr	r0, [pc, #524]	; (800579c <_dtoa_r+0x2e4>)
 8005590:	6018      	str	r0, [r3, #0]
 8005592:	1e43      	subs	r3, r0, #1
 8005594:	9301      	str	r3, [sp, #4]
 8005596:	e7df      	b.n	8005558 <_dtoa_r+0xa0>
 8005598:	ec4b ab10 	vmov	d0, sl, fp
 800559c:	aa10      	add	r2, sp, #64	; 0x40
 800559e:	a911      	add	r1, sp, #68	; 0x44
 80055a0:	4620      	mov	r0, r4
 80055a2:	f001 f8cf 	bl	8006744 <__d2b>
 80055a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80055aa:	ee08 0a10 	vmov	s16, r0
 80055ae:	2d00      	cmp	r5, #0
 80055b0:	f000 8084 	beq.w	80056bc <_dtoa_r+0x204>
 80055b4:	ee19 3a90 	vmov	r3, s19
 80055b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80055c0:	4656      	mov	r6, sl
 80055c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80055c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80055ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80055ce:	4b74      	ldr	r3, [pc, #464]	; (80057a0 <_dtoa_r+0x2e8>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	4630      	mov	r0, r6
 80055d4:	4639      	mov	r1, r7
 80055d6:	f7fa fe6f 	bl	80002b8 <__aeabi_dsub>
 80055da:	a365      	add	r3, pc, #404	; (adr r3, 8005770 <_dtoa_r+0x2b8>)
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f7fb f822 	bl	8000628 <__aeabi_dmul>
 80055e4:	a364      	add	r3, pc, #400	; (adr r3, 8005778 <_dtoa_r+0x2c0>)
 80055e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ea:	f7fa fe67 	bl	80002bc <__adddf3>
 80055ee:	4606      	mov	r6, r0
 80055f0:	4628      	mov	r0, r5
 80055f2:	460f      	mov	r7, r1
 80055f4:	f7fa ffae 	bl	8000554 <__aeabi_i2d>
 80055f8:	a361      	add	r3, pc, #388	; (adr r3, 8005780 <_dtoa_r+0x2c8>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fb f813 	bl	8000628 <__aeabi_dmul>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4630      	mov	r0, r6
 8005608:	4639      	mov	r1, r7
 800560a:	f7fa fe57 	bl	80002bc <__adddf3>
 800560e:	4606      	mov	r6, r0
 8005610:	460f      	mov	r7, r1
 8005612:	f7fb fab9 	bl	8000b88 <__aeabi_d2iz>
 8005616:	2200      	movs	r2, #0
 8005618:	9000      	str	r0, [sp, #0]
 800561a:	2300      	movs	r3, #0
 800561c:	4630      	mov	r0, r6
 800561e:	4639      	mov	r1, r7
 8005620:	f7fb fa74 	bl	8000b0c <__aeabi_dcmplt>
 8005624:	b150      	cbz	r0, 800563c <_dtoa_r+0x184>
 8005626:	9800      	ldr	r0, [sp, #0]
 8005628:	f7fa ff94 	bl	8000554 <__aeabi_i2d>
 800562c:	4632      	mov	r2, r6
 800562e:	463b      	mov	r3, r7
 8005630:	f7fb fa62 	bl	8000af8 <__aeabi_dcmpeq>
 8005634:	b910      	cbnz	r0, 800563c <_dtoa_r+0x184>
 8005636:	9b00      	ldr	r3, [sp, #0]
 8005638:	3b01      	subs	r3, #1
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	9b00      	ldr	r3, [sp, #0]
 800563e:	2b16      	cmp	r3, #22
 8005640:	d85a      	bhi.n	80056f8 <_dtoa_r+0x240>
 8005642:	9a00      	ldr	r2, [sp, #0]
 8005644:	4b57      	ldr	r3, [pc, #348]	; (80057a4 <_dtoa_r+0x2ec>)
 8005646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	ec51 0b19 	vmov	r0, r1, d9
 8005652:	f7fb fa5b 	bl	8000b0c <__aeabi_dcmplt>
 8005656:	2800      	cmp	r0, #0
 8005658:	d050      	beq.n	80056fc <_dtoa_r+0x244>
 800565a:	9b00      	ldr	r3, [sp, #0]
 800565c:	3b01      	subs	r3, #1
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	2300      	movs	r3, #0
 8005662:	930b      	str	r3, [sp, #44]	; 0x2c
 8005664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005666:	1b5d      	subs	r5, r3, r5
 8005668:	1e6b      	subs	r3, r5, #1
 800566a:	9305      	str	r3, [sp, #20]
 800566c:	bf45      	ittet	mi
 800566e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005672:	9304      	strmi	r3, [sp, #16]
 8005674:	2300      	movpl	r3, #0
 8005676:	2300      	movmi	r3, #0
 8005678:	bf4c      	ite	mi
 800567a:	9305      	strmi	r3, [sp, #20]
 800567c:	9304      	strpl	r3, [sp, #16]
 800567e:	9b00      	ldr	r3, [sp, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	db3d      	blt.n	8005700 <_dtoa_r+0x248>
 8005684:	9b05      	ldr	r3, [sp, #20]
 8005686:	9a00      	ldr	r2, [sp, #0]
 8005688:	920a      	str	r2, [sp, #40]	; 0x28
 800568a:	4413      	add	r3, r2
 800568c:	9305      	str	r3, [sp, #20]
 800568e:	2300      	movs	r3, #0
 8005690:	9307      	str	r3, [sp, #28]
 8005692:	9b06      	ldr	r3, [sp, #24]
 8005694:	2b09      	cmp	r3, #9
 8005696:	f200 8089 	bhi.w	80057ac <_dtoa_r+0x2f4>
 800569a:	2b05      	cmp	r3, #5
 800569c:	bfc4      	itt	gt
 800569e:	3b04      	subgt	r3, #4
 80056a0:	9306      	strgt	r3, [sp, #24]
 80056a2:	9b06      	ldr	r3, [sp, #24]
 80056a4:	f1a3 0302 	sub.w	r3, r3, #2
 80056a8:	bfcc      	ite	gt
 80056aa:	2500      	movgt	r5, #0
 80056ac:	2501      	movle	r5, #1
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	f200 8087 	bhi.w	80057c2 <_dtoa_r+0x30a>
 80056b4:	e8df f003 	tbb	[pc, r3]
 80056b8:	59383a2d 	.word	0x59383a2d
 80056bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80056c0:	441d      	add	r5, r3
 80056c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	bfc1      	itttt	gt
 80056ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80056ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80056d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80056d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80056da:	bfda      	itte	le
 80056dc:	f1c3 0320 	rsble	r3, r3, #32
 80056e0:	fa06 f003 	lslle.w	r0, r6, r3
 80056e4:	4318      	orrgt	r0, r3
 80056e6:	f7fa ff25 	bl	8000534 <__aeabi_ui2d>
 80056ea:	2301      	movs	r3, #1
 80056ec:	4606      	mov	r6, r0
 80056ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80056f2:	3d01      	subs	r5, #1
 80056f4:	930e      	str	r3, [sp, #56]	; 0x38
 80056f6:	e76a      	b.n	80055ce <_dtoa_r+0x116>
 80056f8:	2301      	movs	r3, #1
 80056fa:	e7b2      	b.n	8005662 <_dtoa_r+0x1aa>
 80056fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80056fe:	e7b1      	b.n	8005664 <_dtoa_r+0x1ac>
 8005700:	9b04      	ldr	r3, [sp, #16]
 8005702:	9a00      	ldr	r2, [sp, #0]
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	9304      	str	r3, [sp, #16]
 8005708:	4253      	negs	r3, r2
 800570a:	9307      	str	r3, [sp, #28]
 800570c:	2300      	movs	r3, #0
 800570e:	930a      	str	r3, [sp, #40]	; 0x28
 8005710:	e7bf      	b.n	8005692 <_dtoa_r+0x1da>
 8005712:	2300      	movs	r3, #0
 8005714:	9308      	str	r3, [sp, #32]
 8005716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005718:	2b00      	cmp	r3, #0
 800571a:	dc55      	bgt.n	80057c8 <_dtoa_r+0x310>
 800571c:	2301      	movs	r3, #1
 800571e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005722:	461a      	mov	r2, r3
 8005724:	9209      	str	r2, [sp, #36]	; 0x24
 8005726:	e00c      	b.n	8005742 <_dtoa_r+0x28a>
 8005728:	2301      	movs	r3, #1
 800572a:	e7f3      	b.n	8005714 <_dtoa_r+0x25c>
 800572c:	2300      	movs	r3, #0
 800572e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005730:	9308      	str	r3, [sp, #32]
 8005732:	9b00      	ldr	r3, [sp, #0]
 8005734:	4413      	add	r3, r2
 8005736:	9302      	str	r3, [sp, #8]
 8005738:	3301      	adds	r3, #1
 800573a:	2b01      	cmp	r3, #1
 800573c:	9303      	str	r3, [sp, #12]
 800573e:	bfb8      	it	lt
 8005740:	2301      	movlt	r3, #1
 8005742:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005744:	2200      	movs	r2, #0
 8005746:	6042      	str	r2, [r0, #4]
 8005748:	2204      	movs	r2, #4
 800574a:	f102 0614 	add.w	r6, r2, #20
 800574e:	429e      	cmp	r6, r3
 8005750:	6841      	ldr	r1, [r0, #4]
 8005752:	d93d      	bls.n	80057d0 <_dtoa_r+0x318>
 8005754:	4620      	mov	r0, r4
 8005756:	f000 fccd 	bl	80060f4 <_Balloc>
 800575a:	9001      	str	r0, [sp, #4]
 800575c:	2800      	cmp	r0, #0
 800575e:	d13b      	bne.n	80057d8 <_dtoa_r+0x320>
 8005760:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <_dtoa_r+0x2f0>)
 8005762:	4602      	mov	r2, r0
 8005764:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005768:	e6c0      	b.n	80054ec <_dtoa_r+0x34>
 800576a:	2301      	movs	r3, #1
 800576c:	e7df      	b.n	800572e <_dtoa_r+0x276>
 800576e:	bf00      	nop
 8005770:	636f4361 	.word	0x636f4361
 8005774:	3fd287a7 	.word	0x3fd287a7
 8005778:	8b60c8b3 	.word	0x8b60c8b3
 800577c:	3fc68a28 	.word	0x3fc68a28
 8005780:	509f79fb 	.word	0x509f79fb
 8005784:	3fd34413 	.word	0x3fd34413
 8005788:	080090eb 	.word	0x080090eb
 800578c:	08009102 	.word	0x08009102
 8005790:	7ff00000 	.word	0x7ff00000
 8005794:	080090e7 	.word	0x080090e7
 8005798:	080090de 	.word	0x080090de
 800579c:	080092e2 	.word	0x080092e2
 80057a0:	3ff80000 	.word	0x3ff80000
 80057a4:	080091f8 	.word	0x080091f8
 80057a8:	0800915d 	.word	0x0800915d
 80057ac:	2501      	movs	r5, #1
 80057ae:	2300      	movs	r3, #0
 80057b0:	9306      	str	r3, [sp, #24]
 80057b2:	9508      	str	r5, [sp, #32]
 80057b4:	f04f 33ff 	mov.w	r3, #4294967295
 80057b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80057bc:	2200      	movs	r2, #0
 80057be:	2312      	movs	r3, #18
 80057c0:	e7b0      	b.n	8005724 <_dtoa_r+0x26c>
 80057c2:	2301      	movs	r3, #1
 80057c4:	9308      	str	r3, [sp, #32]
 80057c6:	e7f5      	b.n	80057b4 <_dtoa_r+0x2fc>
 80057c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80057ce:	e7b8      	b.n	8005742 <_dtoa_r+0x28a>
 80057d0:	3101      	adds	r1, #1
 80057d2:	6041      	str	r1, [r0, #4]
 80057d4:	0052      	lsls	r2, r2, #1
 80057d6:	e7b8      	b.n	800574a <_dtoa_r+0x292>
 80057d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057da:	9a01      	ldr	r2, [sp, #4]
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	9b03      	ldr	r3, [sp, #12]
 80057e0:	2b0e      	cmp	r3, #14
 80057e2:	f200 809d 	bhi.w	8005920 <_dtoa_r+0x468>
 80057e6:	2d00      	cmp	r5, #0
 80057e8:	f000 809a 	beq.w	8005920 <_dtoa_r+0x468>
 80057ec:	9b00      	ldr	r3, [sp, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	dd32      	ble.n	8005858 <_dtoa_r+0x3a0>
 80057f2:	4ab7      	ldr	r2, [pc, #732]	; (8005ad0 <_dtoa_r+0x618>)
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80057fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005800:	9b00      	ldr	r3, [sp, #0]
 8005802:	05d8      	lsls	r0, r3, #23
 8005804:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005808:	d516      	bpl.n	8005838 <_dtoa_r+0x380>
 800580a:	4bb2      	ldr	r3, [pc, #712]	; (8005ad4 <_dtoa_r+0x61c>)
 800580c:	ec51 0b19 	vmov	r0, r1, d9
 8005810:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005814:	f7fb f832 	bl	800087c <__aeabi_ddiv>
 8005818:	f007 070f 	and.w	r7, r7, #15
 800581c:	4682      	mov	sl, r0
 800581e:	468b      	mov	fp, r1
 8005820:	2503      	movs	r5, #3
 8005822:	4eac      	ldr	r6, [pc, #688]	; (8005ad4 <_dtoa_r+0x61c>)
 8005824:	b957      	cbnz	r7, 800583c <_dtoa_r+0x384>
 8005826:	4642      	mov	r2, r8
 8005828:	464b      	mov	r3, r9
 800582a:	4650      	mov	r0, sl
 800582c:	4659      	mov	r1, fp
 800582e:	f7fb f825 	bl	800087c <__aeabi_ddiv>
 8005832:	4682      	mov	sl, r0
 8005834:	468b      	mov	fp, r1
 8005836:	e028      	b.n	800588a <_dtoa_r+0x3d2>
 8005838:	2502      	movs	r5, #2
 800583a:	e7f2      	b.n	8005822 <_dtoa_r+0x36a>
 800583c:	07f9      	lsls	r1, r7, #31
 800583e:	d508      	bpl.n	8005852 <_dtoa_r+0x39a>
 8005840:	4640      	mov	r0, r8
 8005842:	4649      	mov	r1, r9
 8005844:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005848:	f7fa feee 	bl	8000628 <__aeabi_dmul>
 800584c:	3501      	adds	r5, #1
 800584e:	4680      	mov	r8, r0
 8005850:	4689      	mov	r9, r1
 8005852:	107f      	asrs	r7, r7, #1
 8005854:	3608      	adds	r6, #8
 8005856:	e7e5      	b.n	8005824 <_dtoa_r+0x36c>
 8005858:	f000 809b 	beq.w	8005992 <_dtoa_r+0x4da>
 800585c:	9b00      	ldr	r3, [sp, #0]
 800585e:	4f9d      	ldr	r7, [pc, #628]	; (8005ad4 <_dtoa_r+0x61c>)
 8005860:	425e      	negs	r6, r3
 8005862:	4b9b      	ldr	r3, [pc, #620]	; (8005ad0 <_dtoa_r+0x618>)
 8005864:	f006 020f 	and.w	r2, r6, #15
 8005868:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	ec51 0b19 	vmov	r0, r1, d9
 8005874:	f7fa fed8 	bl	8000628 <__aeabi_dmul>
 8005878:	1136      	asrs	r6, r6, #4
 800587a:	4682      	mov	sl, r0
 800587c:	468b      	mov	fp, r1
 800587e:	2300      	movs	r3, #0
 8005880:	2502      	movs	r5, #2
 8005882:	2e00      	cmp	r6, #0
 8005884:	d17a      	bne.n	800597c <_dtoa_r+0x4c4>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1d3      	bne.n	8005832 <_dtoa_r+0x37a>
 800588a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8082 	beq.w	8005996 <_dtoa_r+0x4de>
 8005892:	4b91      	ldr	r3, [pc, #580]	; (8005ad8 <_dtoa_r+0x620>)
 8005894:	2200      	movs	r2, #0
 8005896:	4650      	mov	r0, sl
 8005898:	4659      	mov	r1, fp
 800589a:	f7fb f937 	bl	8000b0c <__aeabi_dcmplt>
 800589e:	2800      	cmp	r0, #0
 80058a0:	d079      	beq.n	8005996 <_dtoa_r+0x4de>
 80058a2:	9b03      	ldr	r3, [sp, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d076      	beq.n	8005996 <_dtoa_r+0x4de>
 80058a8:	9b02      	ldr	r3, [sp, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	dd36      	ble.n	800591c <_dtoa_r+0x464>
 80058ae:	9b00      	ldr	r3, [sp, #0]
 80058b0:	4650      	mov	r0, sl
 80058b2:	4659      	mov	r1, fp
 80058b4:	1e5f      	subs	r7, r3, #1
 80058b6:	2200      	movs	r2, #0
 80058b8:	4b88      	ldr	r3, [pc, #544]	; (8005adc <_dtoa_r+0x624>)
 80058ba:	f7fa feb5 	bl	8000628 <__aeabi_dmul>
 80058be:	9e02      	ldr	r6, [sp, #8]
 80058c0:	4682      	mov	sl, r0
 80058c2:	468b      	mov	fp, r1
 80058c4:	3501      	adds	r5, #1
 80058c6:	4628      	mov	r0, r5
 80058c8:	f7fa fe44 	bl	8000554 <__aeabi_i2d>
 80058cc:	4652      	mov	r2, sl
 80058ce:	465b      	mov	r3, fp
 80058d0:	f7fa feaa 	bl	8000628 <__aeabi_dmul>
 80058d4:	4b82      	ldr	r3, [pc, #520]	; (8005ae0 <_dtoa_r+0x628>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	f7fa fcf0 	bl	80002bc <__adddf3>
 80058dc:	46d0      	mov	r8, sl
 80058de:	46d9      	mov	r9, fp
 80058e0:	4682      	mov	sl, r0
 80058e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80058e6:	2e00      	cmp	r6, #0
 80058e8:	d158      	bne.n	800599c <_dtoa_r+0x4e4>
 80058ea:	4b7e      	ldr	r3, [pc, #504]	; (8005ae4 <_dtoa_r+0x62c>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	4640      	mov	r0, r8
 80058f0:	4649      	mov	r1, r9
 80058f2:	f7fa fce1 	bl	80002b8 <__aeabi_dsub>
 80058f6:	4652      	mov	r2, sl
 80058f8:	465b      	mov	r3, fp
 80058fa:	4680      	mov	r8, r0
 80058fc:	4689      	mov	r9, r1
 80058fe:	f7fb f923 	bl	8000b48 <__aeabi_dcmpgt>
 8005902:	2800      	cmp	r0, #0
 8005904:	f040 8295 	bne.w	8005e32 <_dtoa_r+0x97a>
 8005908:	4652      	mov	r2, sl
 800590a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800590e:	4640      	mov	r0, r8
 8005910:	4649      	mov	r1, r9
 8005912:	f7fb f8fb 	bl	8000b0c <__aeabi_dcmplt>
 8005916:	2800      	cmp	r0, #0
 8005918:	f040 8289 	bne.w	8005e2e <_dtoa_r+0x976>
 800591c:	ec5b ab19 	vmov	sl, fp, d9
 8005920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005922:	2b00      	cmp	r3, #0
 8005924:	f2c0 8148 	blt.w	8005bb8 <_dtoa_r+0x700>
 8005928:	9a00      	ldr	r2, [sp, #0]
 800592a:	2a0e      	cmp	r2, #14
 800592c:	f300 8144 	bgt.w	8005bb8 <_dtoa_r+0x700>
 8005930:	4b67      	ldr	r3, [pc, #412]	; (8005ad0 <_dtoa_r+0x618>)
 8005932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005936:	e9d3 8900 	ldrd	r8, r9, [r3]
 800593a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800593c:	2b00      	cmp	r3, #0
 800593e:	f280 80d5 	bge.w	8005aec <_dtoa_r+0x634>
 8005942:	9b03      	ldr	r3, [sp, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	f300 80d1 	bgt.w	8005aec <_dtoa_r+0x634>
 800594a:	f040 826f 	bne.w	8005e2c <_dtoa_r+0x974>
 800594e:	4b65      	ldr	r3, [pc, #404]	; (8005ae4 <_dtoa_r+0x62c>)
 8005950:	2200      	movs	r2, #0
 8005952:	4640      	mov	r0, r8
 8005954:	4649      	mov	r1, r9
 8005956:	f7fa fe67 	bl	8000628 <__aeabi_dmul>
 800595a:	4652      	mov	r2, sl
 800595c:	465b      	mov	r3, fp
 800595e:	f7fb f8e9 	bl	8000b34 <__aeabi_dcmpge>
 8005962:	9e03      	ldr	r6, [sp, #12]
 8005964:	4637      	mov	r7, r6
 8005966:	2800      	cmp	r0, #0
 8005968:	f040 8245 	bne.w	8005df6 <_dtoa_r+0x93e>
 800596c:	9d01      	ldr	r5, [sp, #4]
 800596e:	2331      	movs	r3, #49	; 0x31
 8005970:	f805 3b01 	strb.w	r3, [r5], #1
 8005974:	9b00      	ldr	r3, [sp, #0]
 8005976:	3301      	adds	r3, #1
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	e240      	b.n	8005dfe <_dtoa_r+0x946>
 800597c:	07f2      	lsls	r2, r6, #31
 800597e:	d505      	bpl.n	800598c <_dtoa_r+0x4d4>
 8005980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005984:	f7fa fe50 	bl	8000628 <__aeabi_dmul>
 8005988:	3501      	adds	r5, #1
 800598a:	2301      	movs	r3, #1
 800598c:	1076      	asrs	r6, r6, #1
 800598e:	3708      	adds	r7, #8
 8005990:	e777      	b.n	8005882 <_dtoa_r+0x3ca>
 8005992:	2502      	movs	r5, #2
 8005994:	e779      	b.n	800588a <_dtoa_r+0x3d2>
 8005996:	9f00      	ldr	r7, [sp, #0]
 8005998:	9e03      	ldr	r6, [sp, #12]
 800599a:	e794      	b.n	80058c6 <_dtoa_r+0x40e>
 800599c:	9901      	ldr	r1, [sp, #4]
 800599e:	4b4c      	ldr	r3, [pc, #304]	; (8005ad0 <_dtoa_r+0x618>)
 80059a0:	4431      	add	r1, r6
 80059a2:	910d      	str	r1, [sp, #52]	; 0x34
 80059a4:	9908      	ldr	r1, [sp, #32]
 80059a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80059aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80059ae:	2900      	cmp	r1, #0
 80059b0:	d043      	beq.n	8005a3a <_dtoa_r+0x582>
 80059b2:	494d      	ldr	r1, [pc, #308]	; (8005ae8 <_dtoa_r+0x630>)
 80059b4:	2000      	movs	r0, #0
 80059b6:	f7fa ff61 	bl	800087c <__aeabi_ddiv>
 80059ba:	4652      	mov	r2, sl
 80059bc:	465b      	mov	r3, fp
 80059be:	f7fa fc7b 	bl	80002b8 <__aeabi_dsub>
 80059c2:	9d01      	ldr	r5, [sp, #4]
 80059c4:	4682      	mov	sl, r0
 80059c6:	468b      	mov	fp, r1
 80059c8:	4649      	mov	r1, r9
 80059ca:	4640      	mov	r0, r8
 80059cc:	f7fb f8dc 	bl	8000b88 <__aeabi_d2iz>
 80059d0:	4606      	mov	r6, r0
 80059d2:	f7fa fdbf 	bl	8000554 <__aeabi_i2d>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4640      	mov	r0, r8
 80059dc:	4649      	mov	r1, r9
 80059de:	f7fa fc6b 	bl	80002b8 <__aeabi_dsub>
 80059e2:	3630      	adds	r6, #48	; 0x30
 80059e4:	f805 6b01 	strb.w	r6, [r5], #1
 80059e8:	4652      	mov	r2, sl
 80059ea:	465b      	mov	r3, fp
 80059ec:	4680      	mov	r8, r0
 80059ee:	4689      	mov	r9, r1
 80059f0:	f7fb f88c 	bl	8000b0c <__aeabi_dcmplt>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d163      	bne.n	8005ac0 <_dtoa_r+0x608>
 80059f8:	4642      	mov	r2, r8
 80059fa:	464b      	mov	r3, r9
 80059fc:	4936      	ldr	r1, [pc, #216]	; (8005ad8 <_dtoa_r+0x620>)
 80059fe:	2000      	movs	r0, #0
 8005a00:	f7fa fc5a 	bl	80002b8 <__aeabi_dsub>
 8005a04:	4652      	mov	r2, sl
 8005a06:	465b      	mov	r3, fp
 8005a08:	f7fb f880 	bl	8000b0c <__aeabi_dcmplt>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	f040 80b5 	bne.w	8005b7c <_dtoa_r+0x6c4>
 8005a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a14:	429d      	cmp	r5, r3
 8005a16:	d081      	beq.n	800591c <_dtoa_r+0x464>
 8005a18:	4b30      	ldr	r3, [pc, #192]	; (8005adc <_dtoa_r+0x624>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	4650      	mov	r0, sl
 8005a1e:	4659      	mov	r1, fp
 8005a20:	f7fa fe02 	bl	8000628 <__aeabi_dmul>
 8005a24:	4b2d      	ldr	r3, [pc, #180]	; (8005adc <_dtoa_r+0x624>)
 8005a26:	4682      	mov	sl, r0
 8005a28:	468b      	mov	fp, r1
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f7fa fdfa 	bl	8000628 <__aeabi_dmul>
 8005a34:	4680      	mov	r8, r0
 8005a36:	4689      	mov	r9, r1
 8005a38:	e7c6      	b.n	80059c8 <_dtoa_r+0x510>
 8005a3a:	4650      	mov	r0, sl
 8005a3c:	4659      	mov	r1, fp
 8005a3e:	f7fa fdf3 	bl	8000628 <__aeabi_dmul>
 8005a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a44:	9d01      	ldr	r5, [sp, #4]
 8005a46:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a48:	4682      	mov	sl, r0
 8005a4a:	468b      	mov	fp, r1
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	4640      	mov	r0, r8
 8005a50:	f7fb f89a 	bl	8000b88 <__aeabi_d2iz>
 8005a54:	4606      	mov	r6, r0
 8005a56:	f7fa fd7d 	bl	8000554 <__aeabi_i2d>
 8005a5a:	3630      	adds	r6, #48	; 0x30
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4640      	mov	r0, r8
 8005a62:	4649      	mov	r1, r9
 8005a64:	f7fa fc28 	bl	80002b8 <__aeabi_dsub>
 8005a68:	f805 6b01 	strb.w	r6, [r5], #1
 8005a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a6e:	429d      	cmp	r5, r3
 8005a70:	4680      	mov	r8, r0
 8005a72:	4689      	mov	r9, r1
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	d124      	bne.n	8005ac4 <_dtoa_r+0x60c>
 8005a7a:	4b1b      	ldr	r3, [pc, #108]	; (8005ae8 <_dtoa_r+0x630>)
 8005a7c:	4650      	mov	r0, sl
 8005a7e:	4659      	mov	r1, fp
 8005a80:	f7fa fc1c 	bl	80002bc <__adddf3>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4640      	mov	r0, r8
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	f7fb f85c 	bl	8000b48 <__aeabi_dcmpgt>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	d173      	bne.n	8005b7c <_dtoa_r+0x6c4>
 8005a94:	4652      	mov	r2, sl
 8005a96:	465b      	mov	r3, fp
 8005a98:	4913      	ldr	r1, [pc, #76]	; (8005ae8 <_dtoa_r+0x630>)
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	f7fa fc0c 	bl	80002b8 <__aeabi_dsub>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4640      	mov	r0, r8
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	f7fb f830 	bl	8000b0c <__aeabi_dcmplt>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	f43f af35 	beq.w	800591c <_dtoa_r+0x464>
 8005ab2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005ab4:	1e6b      	subs	r3, r5, #1
 8005ab6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ab8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005abc:	2b30      	cmp	r3, #48	; 0x30
 8005abe:	d0f8      	beq.n	8005ab2 <_dtoa_r+0x5fa>
 8005ac0:	9700      	str	r7, [sp, #0]
 8005ac2:	e049      	b.n	8005b58 <_dtoa_r+0x6a0>
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <_dtoa_r+0x624>)
 8005ac6:	f7fa fdaf 	bl	8000628 <__aeabi_dmul>
 8005aca:	4680      	mov	r8, r0
 8005acc:	4689      	mov	r9, r1
 8005ace:	e7bd      	b.n	8005a4c <_dtoa_r+0x594>
 8005ad0:	080091f8 	.word	0x080091f8
 8005ad4:	080091d0 	.word	0x080091d0
 8005ad8:	3ff00000 	.word	0x3ff00000
 8005adc:	40240000 	.word	0x40240000
 8005ae0:	401c0000 	.word	0x401c0000
 8005ae4:	40140000 	.word	0x40140000
 8005ae8:	3fe00000 	.word	0x3fe00000
 8005aec:	9d01      	ldr	r5, [sp, #4]
 8005aee:	4656      	mov	r6, sl
 8005af0:	465f      	mov	r7, fp
 8005af2:	4642      	mov	r2, r8
 8005af4:	464b      	mov	r3, r9
 8005af6:	4630      	mov	r0, r6
 8005af8:	4639      	mov	r1, r7
 8005afa:	f7fa febf 	bl	800087c <__aeabi_ddiv>
 8005afe:	f7fb f843 	bl	8000b88 <__aeabi_d2iz>
 8005b02:	4682      	mov	sl, r0
 8005b04:	f7fa fd26 	bl	8000554 <__aeabi_i2d>
 8005b08:	4642      	mov	r2, r8
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	f7fa fd8c 	bl	8000628 <__aeabi_dmul>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	4630      	mov	r0, r6
 8005b16:	4639      	mov	r1, r7
 8005b18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005b1c:	f7fa fbcc 	bl	80002b8 <__aeabi_dsub>
 8005b20:	f805 6b01 	strb.w	r6, [r5], #1
 8005b24:	9e01      	ldr	r6, [sp, #4]
 8005b26:	9f03      	ldr	r7, [sp, #12]
 8005b28:	1bae      	subs	r6, r5, r6
 8005b2a:	42b7      	cmp	r7, r6
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	d135      	bne.n	8005b9e <_dtoa_r+0x6e6>
 8005b32:	f7fa fbc3 	bl	80002bc <__adddf3>
 8005b36:	4642      	mov	r2, r8
 8005b38:	464b      	mov	r3, r9
 8005b3a:	4606      	mov	r6, r0
 8005b3c:	460f      	mov	r7, r1
 8005b3e:	f7fb f803 	bl	8000b48 <__aeabi_dcmpgt>
 8005b42:	b9d0      	cbnz	r0, 8005b7a <_dtoa_r+0x6c2>
 8005b44:	4642      	mov	r2, r8
 8005b46:	464b      	mov	r3, r9
 8005b48:	4630      	mov	r0, r6
 8005b4a:	4639      	mov	r1, r7
 8005b4c:	f7fa ffd4 	bl	8000af8 <__aeabi_dcmpeq>
 8005b50:	b110      	cbz	r0, 8005b58 <_dtoa_r+0x6a0>
 8005b52:	f01a 0f01 	tst.w	sl, #1
 8005b56:	d110      	bne.n	8005b7a <_dtoa_r+0x6c2>
 8005b58:	4620      	mov	r0, r4
 8005b5a:	ee18 1a10 	vmov	r1, s16
 8005b5e:	f000 fb09 	bl	8006174 <_Bfree>
 8005b62:	2300      	movs	r3, #0
 8005b64:	9800      	ldr	r0, [sp, #0]
 8005b66:	702b      	strb	r3, [r5, #0]
 8005b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	6018      	str	r0, [r3, #0]
 8005b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f43f acf1 	beq.w	8005558 <_dtoa_r+0xa0>
 8005b76:	601d      	str	r5, [r3, #0]
 8005b78:	e4ee      	b.n	8005558 <_dtoa_r+0xa0>
 8005b7a:	9f00      	ldr	r7, [sp, #0]
 8005b7c:	462b      	mov	r3, r5
 8005b7e:	461d      	mov	r5, r3
 8005b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b84:	2a39      	cmp	r2, #57	; 0x39
 8005b86:	d106      	bne.n	8005b96 <_dtoa_r+0x6de>
 8005b88:	9a01      	ldr	r2, [sp, #4]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d1f7      	bne.n	8005b7e <_dtoa_r+0x6c6>
 8005b8e:	9901      	ldr	r1, [sp, #4]
 8005b90:	2230      	movs	r2, #48	; 0x30
 8005b92:	3701      	adds	r7, #1
 8005b94:	700a      	strb	r2, [r1, #0]
 8005b96:	781a      	ldrb	r2, [r3, #0]
 8005b98:	3201      	adds	r2, #1
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	e790      	b.n	8005ac0 <_dtoa_r+0x608>
 8005b9e:	4ba6      	ldr	r3, [pc, #664]	; (8005e38 <_dtoa_r+0x980>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f7fa fd41 	bl	8000628 <__aeabi_dmul>
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	2300      	movs	r3, #0
 8005baa:	4606      	mov	r6, r0
 8005bac:	460f      	mov	r7, r1
 8005bae:	f7fa ffa3 	bl	8000af8 <__aeabi_dcmpeq>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	d09d      	beq.n	8005af2 <_dtoa_r+0x63a>
 8005bb6:	e7cf      	b.n	8005b58 <_dtoa_r+0x6a0>
 8005bb8:	9a08      	ldr	r2, [sp, #32]
 8005bba:	2a00      	cmp	r2, #0
 8005bbc:	f000 80d7 	beq.w	8005d6e <_dtoa_r+0x8b6>
 8005bc0:	9a06      	ldr	r2, [sp, #24]
 8005bc2:	2a01      	cmp	r2, #1
 8005bc4:	f300 80ba 	bgt.w	8005d3c <_dtoa_r+0x884>
 8005bc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bca:	2a00      	cmp	r2, #0
 8005bcc:	f000 80b2 	beq.w	8005d34 <_dtoa_r+0x87c>
 8005bd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005bd4:	9e07      	ldr	r6, [sp, #28]
 8005bd6:	9d04      	ldr	r5, [sp, #16]
 8005bd8:	9a04      	ldr	r2, [sp, #16]
 8005bda:	441a      	add	r2, r3
 8005bdc:	9204      	str	r2, [sp, #16]
 8005bde:	9a05      	ldr	r2, [sp, #20]
 8005be0:	2101      	movs	r1, #1
 8005be2:	441a      	add	r2, r3
 8005be4:	4620      	mov	r0, r4
 8005be6:	9205      	str	r2, [sp, #20]
 8005be8:	f000 fb7c 	bl	80062e4 <__i2b>
 8005bec:	4607      	mov	r7, r0
 8005bee:	2d00      	cmp	r5, #0
 8005bf0:	dd0c      	ble.n	8005c0c <_dtoa_r+0x754>
 8005bf2:	9b05      	ldr	r3, [sp, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	dd09      	ble.n	8005c0c <_dtoa_r+0x754>
 8005bf8:	42ab      	cmp	r3, r5
 8005bfa:	9a04      	ldr	r2, [sp, #16]
 8005bfc:	bfa8      	it	ge
 8005bfe:	462b      	movge	r3, r5
 8005c00:	1ad2      	subs	r2, r2, r3
 8005c02:	9204      	str	r2, [sp, #16]
 8005c04:	9a05      	ldr	r2, [sp, #20]
 8005c06:	1aed      	subs	r5, r5, r3
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	9305      	str	r3, [sp, #20]
 8005c0c:	9b07      	ldr	r3, [sp, #28]
 8005c0e:	b31b      	cbz	r3, 8005c58 <_dtoa_r+0x7a0>
 8005c10:	9b08      	ldr	r3, [sp, #32]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 80af 	beq.w	8005d76 <_dtoa_r+0x8be>
 8005c18:	2e00      	cmp	r6, #0
 8005c1a:	dd13      	ble.n	8005c44 <_dtoa_r+0x78c>
 8005c1c:	4639      	mov	r1, r7
 8005c1e:	4632      	mov	r2, r6
 8005c20:	4620      	mov	r0, r4
 8005c22:	f000 fc1f 	bl	8006464 <__pow5mult>
 8005c26:	ee18 2a10 	vmov	r2, s16
 8005c2a:	4601      	mov	r1, r0
 8005c2c:	4607      	mov	r7, r0
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f000 fb6e 	bl	8006310 <__multiply>
 8005c34:	ee18 1a10 	vmov	r1, s16
 8005c38:	4680      	mov	r8, r0
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f000 fa9a 	bl	8006174 <_Bfree>
 8005c40:	ee08 8a10 	vmov	s16, r8
 8005c44:	9b07      	ldr	r3, [sp, #28]
 8005c46:	1b9a      	subs	r2, r3, r6
 8005c48:	d006      	beq.n	8005c58 <_dtoa_r+0x7a0>
 8005c4a:	ee18 1a10 	vmov	r1, s16
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f000 fc08 	bl	8006464 <__pow5mult>
 8005c54:	ee08 0a10 	vmov	s16, r0
 8005c58:	2101      	movs	r1, #1
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f000 fb42 	bl	80062e4 <__i2b>
 8005c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	4606      	mov	r6, r0
 8005c66:	f340 8088 	ble.w	8005d7a <_dtoa_r+0x8c2>
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	4601      	mov	r1, r0
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 fbf8 	bl	8006464 <__pow5mult>
 8005c74:	9b06      	ldr	r3, [sp, #24]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	4606      	mov	r6, r0
 8005c7a:	f340 8081 	ble.w	8005d80 <_dtoa_r+0x8c8>
 8005c7e:	f04f 0800 	mov.w	r8, #0
 8005c82:	6933      	ldr	r3, [r6, #16]
 8005c84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c88:	6918      	ldr	r0, [r3, #16]
 8005c8a:	f000 fadb 	bl	8006244 <__hi0bits>
 8005c8e:	f1c0 0020 	rsb	r0, r0, #32
 8005c92:	9b05      	ldr	r3, [sp, #20]
 8005c94:	4418      	add	r0, r3
 8005c96:	f010 001f 	ands.w	r0, r0, #31
 8005c9a:	f000 8092 	beq.w	8005dc2 <_dtoa_r+0x90a>
 8005c9e:	f1c0 0320 	rsb	r3, r0, #32
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	f340 808a 	ble.w	8005dbc <_dtoa_r+0x904>
 8005ca8:	f1c0 001c 	rsb	r0, r0, #28
 8005cac:	9b04      	ldr	r3, [sp, #16]
 8005cae:	4403      	add	r3, r0
 8005cb0:	9304      	str	r3, [sp, #16]
 8005cb2:	9b05      	ldr	r3, [sp, #20]
 8005cb4:	4403      	add	r3, r0
 8005cb6:	4405      	add	r5, r0
 8005cb8:	9305      	str	r3, [sp, #20]
 8005cba:	9b04      	ldr	r3, [sp, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	dd07      	ble.n	8005cd0 <_dtoa_r+0x818>
 8005cc0:	ee18 1a10 	vmov	r1, s16
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f000 fc26 	bl	8006518 <__lshift>
 8005ccc:	ee08 0a10 	vmov	s16, r0
 8005cd0:	9b05      	ldr	r3, [sp, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	dd05      	ble.n	8005ce2 <_dtoa_r+0x82a>
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f000 fc1c 	bl	8006518 <__lshift>
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d06e      	beq.n	8005dc6 <_dtoa_r+0x90e>
 8005ce8:	ee18 0a10 	vmov	r0, s16
 8005cec:	4631      	mov	r1, r6
 8005cee:	f000 fc83 	bl	80065f8 <__mcmp>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	da67      	bge.n	8005dc6 <_dtoa_r+0x90e>
 8005cf6:	9b00      	ldr	r3, [sp, #0]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	ee18 1a10 	vmov	r1, s16
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	220a      	movs	r2, #10
 8005d02:	2300      	movs	r3, #0
 8005d04:	4620      	mov	r0, r4
 8005d06:	f000 fa57 	bl	80061b8 <__multadd>
 8005d0a:	9b08      	ldr	r3, [sp, #32]
 8005d0c:	ee08 0a10 	vmov	s16, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 81b1 	beq.w	8006078 <_dtoa_r+0xbc0>
 8005d16:	2300      	movs	r3, #0
 8005d18:	4639      	mov	r1, r7
 8005d1a:	220a      	movs	r2, #10
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f000 fa4b 	bl	80061b8 <__multadd>
 8005d22:	9b02      	ldr	r3, [sp, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	4607      	mov	r7, r0
 8005d28:	f300 808e 	bgt.w	8005e48 <_dtoa_r+0x990>
 8005d2c:	9b06      	ldr	r3, [sp, #24]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	dc51      	bgt.n	8005dd6 <_dtoa_r+0x91e>
 8005d32:	e089      	b.n	8005e48 <_dtoa_r+0x990>
 8005d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d3a:	e74b      	b.n	8005bd4 <_dtoa_r+0x71c>
 8005d3c:	9b03      	ldr	r3, [sp, #12]
 8005d3e:	1e5e      	subs	r6, r3, #1
 8005d40:	9b07      	ldr	r3, [sp, #28]
 8005d42:	42b3      	cmp	r3, r6
 8005d44:	bfbf      	itttt	lt
 8005d46:	9b07      	ldrlt	r3, [sp, #28]
 8005d48:	9607      	strlt	r6, [sp, #28]
 8005d4a:	1af2      	sublt	r2, r6, r3
 8005d4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005d4e:	bfb6      	itet	lt
 8005d50:	189b      	addlt	r3, r3, r2
 8005d52:	1b9e      	subge	r6, r3, r6
 8005d54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005d56:	9b03      	ldr	r3, [sp, #12]
 8005d58:	bfb8      	it	lt
 8005d5a:	2600      	movlt	r6, #0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bfb7      	itett	lt
 8005d60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005d64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005d68:	1a9d      	sublt	r5, r3, r2
 8005d6a:	2300      	movlt	r3, #0
 8005d6c:	e734      	b.n	8005bd8 <_dtoa_r+0x720>
 8005d6e:	9e07      	ldr	r6, [sp, #28]
 8005d70:	9d04      	ldr	r5, [sp, #16]
 8005d72:	9f08      	ldr	r7, [sp, #32]
 8005d74:	e73b      	b.n	8005bee <_dtoa_r+0x736>
 8005d76:	9a07      	ldr	r2, [sp, #28]
 8005d78:	e767      	b.n	8005c4a <_dtoa_r+0x792>
 8005d7a:	9b06      	ldr	r3, [sp, #24]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	dc18      	bgt.n	8005db2 <_dtoa_r+0x8fa>
 8005d80:	f1ba 0f00 	cmp.w	sl, #0
 8005d84:	d115      	bne.n	8005db2 <_dtoa_r+0x8fa>
 8005d86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d8a:	b993      	cbnz	r3, 8005db2 <_dtoa_r+0x8fa>
 8005d8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d90:	0d1b      	lsrs	r3, r3, #20
 8005d92:	051b      	lsls	r3, r3, #20
 8005d94:	b183      	cbz	r3, 8005db8 <_dtoa_r+0x900>
 8005d96:	9b04      	ldr	r3, [sp, #16]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	9304      	str	r3, [sp, #16]
 8005d9c:	9b05      	ldr	r3, [sp, #20]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	9305      	str	r3, [sp, #20]
 8005da2:	f04f 0801 	mov.w	r8, #1
 8005da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f47f af6a 	bne.w	8005c82 <_dtoa_r+0x7ca>
 8005dae:	2001      	movs	r0, #1
 8005db0:	e76f      	b.n	8005c92 <_dtoa_r+0x7da>
 8005db2:	f04f 0800 	mov.w	r8, #0
 8005db6:	e7f6      	b.n	8005da6 <_dtoa_r+0x8ee>
 8005db8:	4698      	mov	r8, r3
 8005dba:	e7f4      	b.n	8005da6 <_dtoa_r+0x8ee>
 8005dbc:	f43f af7d 	beq.w	8005cba <_dtoa_r+0x802>
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	301c      	adds	r0, #28
 8005dc4:	e772      	b.n	8005cac <_dtoa_r+0x7f4>
 8005dc6:	9b03      	ldr	r3, [sp, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	dc37      	bgt.n	8005e3c <_dtoa_r+0x984>
 8005dcc:	9b06      	ldr	r3, [sp, #24]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	dd34      	ble.n	8005e3c <_dtoa_r+0x984>
 8005dd2:	9b03      	ldr	r3, [sp, #12]
 8005dd4:	9302      	str	r3, [sp, #8]
 8005dd6:	9b02      	ldr	r3, [sp, #8]
 8005dd8:	b96b      	cbnz	r3, 8005df6 <_dtoa_r+0x93e>
 8005dda:	4631      	mov	r1, r6
 8005ddc:	2205      	movs	r2, #5
 8005dde:	4620      	mov	r0, r4
 8005de0:	f000 f9ea 	bl	80061b8 <__multadd>
 8005de4:	4601      	mov	r1, r0
 8005de6:	4606      	mov	r6, r0
 8005de8:	ee18 0a10 	vmov	r0, s16
 8005dec:	f000 fc04 	bl	80065f8 <__mcmp>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	f73f adbb 	bgt.w	800596c <_dtoa_r+0x4b4>
 8005df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df8:	9d01      	ldr	r5, [sp, #4]
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	f04f 0800 	mov.w	r8, #0
 8005e02:	4631      	mov	r1, r6
 8005e04:	4620      	mov	r0, r4
 8005e06:	f000 f9b5 	bl	8006174 <_Bfree>
 8005e0a:	2f00      	cmp	r7, #0
 8005e0c:	f43f aea4 	beq.w	8005b58 <_dtoa_r+0x6a0>
 8005e10:	f1b8 0f00 	cmp.w	r8, #0
 8005e14:	d005      	beq.n	8005e22 <_dtoa_r+0x96a>
 8005e16:	45b8      	cmp	r8, r7
 8005e18:	d003      	beq.n	8005e22 <_dtoa_r+0x96a>
 8005e1a:	4641      	mov	r1, r8
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f000 f9a9 	bl	8006174 <_Bfree>
 8005e22:	4639      	mov	r1, r7
 8005e24:	4620      	mov	r0, r4
 8005e26:	f000 f9a5 	bl	8006174 <_Bfree>
 8005e2a:	e695      	b.n	8005b58 <_dtoa_r+0x6a0>
 8005e2c:	2600      	movs	r6, #0
 8005e2e:	4637      	mov	r7, r6
 8005e30:	e7e1      	b.n	8005df6 <_dtoa_r+0x93e>
 8005e32:	9700      	str	r7, [sp, #0]
 8005e34:	4637      	mov	r7, r6
 8005e36:	e599      	b.n	800596c <_dtoa_r+0x4b4>
 8005e38:	40240000 	.word	0x40240000
 8005e3c:	9b08      	ldr	r3, [sp, #32]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 80ca 	beq.w	8005fd8 <_dtoa_r+0xb20>
 8005e44:	9b03      	ldr	r3, [sp, #12]
 8005e46:	9302      	str	r3, [sp, #8]
 8005e48:	2d00      	cmp	r5, #0
 8005e4a:	dd05      	ble.n	8005e58 <_dtoa_r+0x9a0>
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	462a      	mov	r2, r5
 8005e50:	4620      	mov	r0, r4
 8005e52:	f000 fb61 	bl	8006518 <__lshift>
 8005e56:	4607      	mov	r7, r0
 8005e58:	f1b8 0f00 	cmp.w	r8, #0
 8005e5c:	d05b      	beq.n	8005f16 <_dtoa_r+0xa5e>
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	4620      	mov	r0, r4
 8005e62:	f000 f947 	bl	80060f4 <_Balloc>
 8005e66:	4605      	mov	r5, r0
 8005e68:	b928      	cbnz	r0, 8005e76 <_dtoa_r+0x9be>
 8005e6a:	4b87      	ldr	r3, [pc, #540]	; (8006088 <_dtoa_r+0xbd0>)
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e72:	f7ff bb3b 	b.w	80054ec <_dtoa_r+0x34>
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	3202      	adds	r2, #2
 8005e7a:	0092      	lsls	r2, r2, #2
 8005e7c:	f107 010c 	add.w	r1, r7, #12
 8005e80:	300c      	adds	r0, #12
 8005e82:	f000 f91d 	bl	80060c0 <memcpy>
 8005e86:	2201      	movs	r2, #1
 8005e88:	4629      	mov	r1, r5
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f000 fb44 	bl	8006518 <__lshift>
 8005e90:	9b01      	ldr	r3, [sp, #4]
 8005e92:	f103 0901 	add.w	r9, r3, #1
 8005e96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	9305      	str	r3, [sp, #20]
 8005e9e:	f00a 0301 	and.w	r3, sl, #1
 8005ea2:	46b8      	mov	r8, r7
 8005ea4:	9304      	str	r3, [sp, #16]
 8005ea6:	4607      	mov	r7, r0
 8005ea8:	4631      	mov	r1, r6
 8005eaa:	ee18 0a10 	vmov	r0, s16
 8005eae:	f7ff fa77 	bl	80053a0 <quorem>
 8005eb2:	4641      	mov	r1, r8
 8005eb4:	9002      	str	r0, [sp, #8]
 8005eb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005eba:	ee18 0a10 	vmov	r0, s16
 8005ebe:	f000 fb9b 	bl	80065f8 <__mcmp>
 8005ec2:	463a      	mov	r2, r7
 8005ec4:	9003      	str	r0, [sp, #12]
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f000 fbb1 	bl	8006630 <__mdiff>
 8005ece:	68c2      	ldr	r2, [r0, #12]
 8005ed0:	f109 3bff 	add.w	fp, r9, #4294967295
 8005ed4:	4605      	mov	r5, r0
 8005ed6:	bb02      	cbnz	r2, 8005f1a <_dtoa_r+0xa62>
 8005ed8:	4601      	mov	r1, r0
 8005eda:	ee18 0a10 	vmov	r0, s16
 8005ede:	f000 fb8b 	bl	80065f8 <__mcmp>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	9207      	str	r2, [sp, #28]
 8005eea:	f000 f943 	bl	8006174 <_Bfree>
 8005eee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005ef2:	ea43 0102 	orr.w	r1, r3, r2
 8005ef6:	9b04      	ldr	r3, [sp, #16]
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	464d      	mov	r5, r9
 8005efc:	d10f      	bne.n	8005f1e <_dtoa_r+0xa66>
 8005efe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f02:	d02a      	beq.n	8005f5a <_dtoa_r+0xaa2>
 8005f04:	9b03      	ldr	r3, [sp, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	dd02      	ble.n	8005f10 <_dtoa_r+0xa58>
 8005f0a:	9b02      	ldr	r3, [sp, #8]
 8005f0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005f10:	f88b a000 	strb.w	sl, [fp]
 8005f14:	e775      	b.n	8005e02 <_dtoa_r+0x94a>
 8005f16:	4638      	mov	r0, r7
 8005f18:	e7ba      	b.n	8005e90 <_dtoa_r+0x9d8>
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	e7e2      	b.n	8005ee4 <_dtoa_r+0xa2c>
 8005f1e:	9b03      	ldr	r3, [sp, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	db04      	blt.n	8005f2e <_dtoa_r+0xa76>
 8005f24:	9906      	ldr	r1, [sp, #24]
 8005f26:	430b      	orrs	r3, r1
 8005f28:	9904      	ldr	r1, [sp, #16]
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	d122      	bne.n	8005f74 <_dtoa_r+0xabc>
 8005f2e:	2a00      	cmp	r2, #0
 8005f30:	ddee      	ble.n	8005f10 <_dtoa_r+0xa58>
 8005f32:	ee18 1a10 	vmov	r1, s16
 8005f36:	2201      	movs	r2, #1
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f000 faed 	bl	8006518 <__lshift>
 8005f3e:	4631      	mov	r1, r6
 8005f40:	ee08 0a10 	vmov	s16, r0
 8005f44:	f000 fb58 	bl	80065f8 <__mcmp>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	dc03      	bgt.n	8005f54 <_dtoa_r+0xa9c>
 8005f4c:	d1e0      	bne.n	8005f10 <_dtoa_r+0xa58>
 8005f4e:	f01a 0f01 	tst.w	sl, #1
 8005f52:	d0dd      	beq.n	8005f10 <_dtoa_r+0xa58>
 8005f54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f58:	d1d7      	bne.n	8005f0a <_dtoa_r+0xa52>
 8005f5a:	2339      	movs	r3, #57	; 0x39
 8005f5c:	f88b 3000 	strb.w	r3, [fp]
 8005f60:	462b      	mov	r3, r5
 8005f62:	461d      	mov	r5, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005f6a:	2a39      	cmp	r2, #57	; 0x39
 8005f6c:	d071      	beq.n	8006052 <_dtoa_r+0xb9a>
 8005f6e:	3201      	adds	r2, #1
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	e746      	b.n	8005e02 <_dtoa_r+0x94a>
 8005f74:	2a00      	cmp	r2, #0
 8005f76:	dd07      	ble.n	8005f88 <_dtoa_r+0xad0>
 8005f78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f7c:	d0ed      	beq.n	8005f5a <_dtoa_r+0xaa2>
 8005f7e:	f10a 0301 	add.w	r3, sl, #1
 8005f82:	f88b 3000 	strb.w	r3, [fp]
 8005f86:	e73c      	b.n	8005e02 <_dtoa_r+0x94a>
 8005f88:	9b05      	ldr	r3, [sp, #20]
 8005f8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005f8e:	4599      	cmp	r9, r3
 8005f90:	d047      	beq.n	8006022 <_dtoa_r+0xb6a>
 8005f92:	ee18 1a10 	vmov	r1, s16
 8005f96:	2300      	movs	r3, #0
 8005f98:	220a      	movs	r2, #10
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f000 f90c 	bl	80061b8 <__multadd>
 8005fa0:	45b8      	cmp	r8, r7
 8005fa2:	ee08 0a10 	vmov	s16, r0
 8005fa6:	f04f 0300 	mov.w	r3, #0
 8005faa:	f04f 020a 	mov.w	r2, #10
 8005fae:	4641      	mov	r1, r8
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	d106      	bne.n	8005fc2 <_dtoa_r+0xb0a>
 8005fb4:	f000 f900 	bl	80061b8 <__multadd>
 8005fb8:	4680      	mov	r8, r0
 8005fba:	4607      	mov	r7, r0
 8005fbc:	f109 0901 	add.w	r9, r9, #1
 8005fc0:	e772      	b.n	8005ea8 <_dtoa_r+0x9f0>
 8005fc2:	f000 f8f9 	bl	80061b8 <__multadd>
 8005fc6:	4639      	mov	r1, r7
 8005fc8:	4680      	mov	r8, r0
 8005fca:	2300      	movs	r3, #0
 8005fcc:	220a      	movs	r2, #10
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f000 f8f2 	bl	80061b8 <__multadd>
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	e7f1      	b.n	8005fbc <_dtoa_r+0xb04>
 8005fd8:	9b03      	ldr	r3, [sp, #12]
 8005fda:	9302      	str	r3, [sp, #8]
 8005fdc:	9d01      	ldr	r5, [sp, #4]
 8005fde:	ee18 0a10 	vmov	r0, s16
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	f7ff f9dc 	bl	80053a0 <quorem>
 8005fe8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005fec:	9b01      	ldr	r3, [sp, #4]
 8005fee:	f805 ab01 	strb.w	sl, [r5], #1
 8005ff2:	1aea      	subs	r2, r5, r3
 8005ff4:	9b02      	ldr	r3, [sp, #8]
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	dd09      	ble.n	800600e <_dtoa_r+0xb56>
 8005ffa:	ee18 1a10 	vmov	r1, s16
 8005ffe:	2300      	movs	r3, #0
 8006000:	220a      	movs	r2, #10
 8006002:	4620      	mov	r0, r4
 8006004:	f000 f8d8 	bl	80061b8 <__multadd>
 8006008:	ee08 0a10 	vmov	s16, r0
 800600c:	e7e7      	b.n	8005fde <_dtoa_r+0xb26>
 800600e:	9b02      	ldr	r3, [sp, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	bfc8      	it	gt
 8006014:	461d      	movgt	r5, r3
 8006016:	9b01      	ldr	r3, [sp, #4]
 8006018:	bfd8      	it	le
 800601a:	2501      	movle	r5, #1
 800601c:	441d      	add	r5, r3
 800601e:	f04f 0800 	mov.w	r8, #0
 8006022:	ee18 1a10 	vmov	r1, s16
 8006026:	2201      	movs	r2, #1
 8006028:	4620      	mov	r0, r4
 800602a:	f000 fa75 	bl	8006518 <__lshift>
 800602e:	4631      	mov	r1, r6
 8006030:	ee08 0a10 	vmov	s16, r0
 8006034:	f000 fae0 	bl	80065f8 <__mcmp>
 8006038:	2800      	cmp	r0, #0
 800603a:	dc91      	bgt.n	8005f60 <_dtoa_r+0xaa8>
 800603c:	d102      	bne.n	8006044 <_dtoa_r+0xb8c>
 800603e:	f01a 0f01 	tst.w	sl, #1
 8006042:	d18d      	bne.n	8005f60 <_dtoa_r+0xaa8>
 8006044:	462b      	mov	r3, r5
 8006046:	461d      	mov	r5, r3
 8006048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800604c:	2a30      	cmp	r2, #48	; 0x30
 800604e:	d0fa      	beq.n	8006046 <_dtoa_r+0xb8e>
 8006050:	e6d7      	b.n	8005e02 <_dtoa_r+0x94a>
 8006052:	9a01      	ldr	r2, [sp, #4]
 8006054:	429a      	cmp	r2, r3
 8006056:	d184      	bne.n	8005f62 <_dtoa_r+0xaaa>
 8006058:	9b00      	ldr	r3, [sp, #0]
 800605a:	3301      	adds	r3, #1
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	2331      	movs	r3, #49	; 0x31
 8006060:	7013      	strb	r3, [r2, #0]
 8006062:	e6ce      	b.n	8005e02 <_dtoa_r+0x94a>
 8006064:	4b09      	ldr	r3, [pc, #36]	; (800608c <_dtoa_r+0xbd4>)
 8006066:	f7ff ba95 	b.w	8005594 <_dtoa_r+0xdc>
 800606a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800606c:	2b00      	cmp	r3, #0
 800606e:	f47f aa6e 	bne.w	800554e <_dtoa_r+0x96>
 8006072:	4b07      	ldr	r3, [pc, #28]	; (8006090 <_dtoa_r+0xbd8>)
 8006074:	f7ff ba8e 	b.w	8005594 <_dtoa_r+0xdc>
 8006078:	9b02      	ldr	r3, [sp, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	dcae      	bgt.n	8005fdc <_dtoa_r+0xb24>
 800607e:	9b06      	ldr	r3, [sp, #24]
 8006080:	2b02      	cmp	r3, #2
 8006082:	f73f aea8 	bgt.w	8005dd6 <_dtoa_r+0x91e>
 8006086:	e7a9      	b.n	8005fdc <_dtoa_r+0xb24>
 8006088:	0800915d 	.word	0x0800915d
 800608c:	080092e1 	.word	0x080092e1
 8006090:	080090de 	.word	0x080090de

08006094 <_localeconv_r>:
 8006094:	4800      	ldr	r0, [pc, #0]	; (8006098 <_localeconv_r+0x4>)
 8006096:	4770      	bx	lr
 8006098:	2000015c 	.word	0x2000015c

0800609c <_lseek_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	4d07      	ldr	r5, [pc, #28]	; (80060bc <_lseek_r+0x20>)
 80060a0:	4604      	mov	r4, r0
 80060a2:	4608      	mov	r0, r1
 80060a4:	4611      	mov	r1, r2
 80060a6:	2200      	movs	r2, #0
 80060a8:	602a      	str	r2, [r5, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	f7fb f8d2 	bl	8001254 <_lseek>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d102      	bne.n	80060ba <_lseek_r+0x1e>
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	b103      	cbz	r3, 80060ba <_lseek_r+0x1e>
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
 80060bc:	20000a74 	.word	0x20000a74

080060c0 <memcpy>:
 80060c0:	440a      	add	r2, r1
 80060c2:	4291      	cmp	r1, r2
 80060c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80060c8:	d100      	bne.n	80060cc <memcpy+0xc>
 80060ca:	4770      	bx	lr
 80060cc:	b510      	push	{r4, lr}
 80060ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060d6:	4291      	cmp	r1, r2
 80060d8:	d1f9      	bne.n	80060ce <memcpy+0xe>
 80060da:	bd10      	pop	{r4, pc}

080060dc <__malloc_lock>:
 80060dc:	4801      	ldr	r0, [pc, #4]	; (80060e4 <__malloc_lock+0x8>)
 80060de:	f001 bb87 	b.w	80077f0 <__retarget_lock_acquire_recursive>
 80060e2:	bf00      	nop
 80060e4:	20000a78 	.word	0x20000a78

080060e8 <__malloc_unlock>:
 80060e8:	4801      	ldr	r0, [pc, #4]	; (80060f0 <__malloc_unlock+0x8>)
 80060ea:	f001 bb82 	b.w	80077f2 <__retarget_lock_release_recursive>
 80060ee:	bf00      	nop
 80060f0:	20000a78 	.word	0x20000a78

080060f4 <_Balloc>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060f8:	4604      	mov	r4, r0
 80060fa:	460d      	mov	r5, r1
 80060fc:	b976      	cbnz	r6, 800611c <_Balloc+0x28>
 80060fe:	2010      	movs	r0, #16
 8006100:	f7fe fb30 	bl	8004764 <malloc>
 8006104:	4602      	mov	r2, r0
 8006106:	6260      	str	r0, [r4, #36]	; 0x24
 8006108:	b920      	cbnz	r0, 8006114 <_Balloc+0x20>
 800610a:	4b18      	ldr	r3, [pc, #96]	; (800616c <_Balloc+0x78>)
 800610c:	4818      	ldr	r0, [pc, #96]	; (8006170 <_Balloc+0x7c>)
 800610e:	2166      	movs	r1, #102	; 0x66
 8006110:	f001 f986 	bl	8007420 <__assert_func>
 8006114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006118:	6006      	str	r6, [r0, #0]
 800611a:	60c6      	str	r6, [r0, #12]
 800611c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800611e:	68f3      	ldr	r3, [r6, #12]
 8006120:	b183      	cbz	r3, 8006144 <_Balloc+0x50>
 8006122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800612a:	b9b8      	cbnz	r0, 800615c <_Balloc+0x68>
 800612c:	2101      	movs	r1, #1
 800612e:	fa01 f605 	lsl.w	r6, r1, r5
 8006132:	1d72      	adds	r2, r6, #5
 8006134:	0092      	lsls	r2, r2, #2
 8006136:	4620      	mov	r0, r4
 8006138:	f000 fb60 	bl	80067fc <_calloc_r>
 800613c:	b160      	cbz	r0, 8006158 <_Balloc+0x64>
 800613e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006142:	e00e      	b.n	8006162 <_Balloc+0x6e>
 8006144:	2221      	movs	r2, #33	; 0x21
 8006146:	2104      	movs	r1, #4
 8006148:	4620      	mov	r0, r4
 800614a:	f000 fb57 	bl	80067fc <_calloc_r>
 800614e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006150:	60f0      	str	r0, [r6, #12]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e4      	bne.n	8006122 <_Balloc+0x2e>
 8006158:	2000      	movs	r0, #0
 800615a:	bd70      	pop	{r4, r5, r6, pc}
 800615c:	6802      	ldr	r2, [r0, #0]
 800615e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006162:	2300      	movs	r3, #0
 8006164:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006168:	e7f7      	b.n	800615a <_Balloc+0x66>
 800616a:	bf00      	nop
 800616c:	080090eb 	.word	0x080090eb
 8006170:	0800916e 	.word	0x0800916e

08006174 <_Bfree>:
 8006174:	b570      	push	{r4, r5, r6, lr}
 8006176:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006178:	4605      	mov	r5, r0
 800617a:	460c      	mov	r4, r1
 800617c:	b976      	cbnz	r6, 800619c <_Bfree+0x28>
 800617e:	2010      	movs	r0, #16
 8006180:	f7fe faf0 	bl	8004764 <malloc>
 8006184:	4602      	mov	r2, r0
 8006186:	6268      	str	r0, [r5, #36]	; 0x24
 8006188:	b920      	cbnz	r0, 8006194 <_Bfree+0x20>
 800618a:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <_Bfree+0x3c>)
 800618c:	4809      	ldr	r0, [pc, #36]	; (80061b4 <_Bfree+0x40>)
 800618e:	218a      	movs	r1, #138	; 0x8a
 8006190:	f001 f946 	bl	8007420 <__assert_func>
 8006194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006198:	6006      	str	r6, [r0, #0]
 800619a:	60c6      	str	r6, [r0, #12]
 800619c:	b13c      	cbz	r4, 80061ae <_Bfree+0x3a>
 800619e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80061a0:	6862      	ldr	r2, [r4, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061a8:	6021      	str	r1, [r4, #0]
 80061aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	080090eb 	.word	0x080090eb
 80061b4:	0800916e 	.word	0x0800916e

080061b8 <__multadd>:
 80061b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061bc:	690d      	ldr	r5, [r1, #16]
 80061be:	4607      	mov	r7, r0
 80061c0:	460c      	mov	r4, r1
 80061c2:	461e      	mov	r6, r3
 80061c4:	f101 0c14 	add.w	ip, r1, #20
 80061c8:	2000      	movs	r0, #0
 80061ca:	f8dc 3000 	ldr.w	r3, [ip]
 80061ce:	b299      	uxth	r1, r3
 80061d0:	fb02 6101 	mla	r1, r2, r1, r6
 80061d4:	0c1e      	lsrs	r6, r3, #16
 80061d6:	0c0b      	lsrs	r3, r1, #16
 80061d8:	fb02 3306 	mla	r3, r2, r6, r3
 80061dc:	b289      	uxth	r1, r1
 80061de:	3001      	adds	r0, #1
 80061e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80061e4:	4285      	cmp	r5, r0
 80061e6:	f84c 1b04 	str.w	r1, [ip], #4
 80061ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80061ee:	dcec      	bgt.n	80061ca <__multadd+0x12>
 80061f0:	b30e      	cbz	r6, 8006236 <__multadd+0x7e>
 80061f2:	68a3      	ldr	r3, [r4, #8]
 80061f4:	42ab      	cmp	r3, r5
 80061f6:	dc19      	bgt.n	800622c <__multadd+0x74>
 80061f8:	6861      	ldr	r1, [r4, #4]
 80061fa:	4638      	mov	r0, r7
 80061fc:	3101      	adds	r1, #1
 80061fe:	f7ff ff79 	bl	80060f4 <_Balloc>
 8006202:	4680      	mov	r8, r0
 8006204:	b928      	cbnz	r0, 8006212 <__multadd+0x5a>
 8006206:	4602      	mov	r2, r0
 8006208:	4b0c      	ldr	r3, [pc, #48]	; (800623c <__multadd+0x84>)
 800620a:	480d      	ldr	r0, [pc, #52]	; (8006240 <__multadd+0x88>)
 800620c:	21b5      	movs	r1, #181	; 0xb5
 800620e:	f001 f907 	bl	8007420 <__assert_func>
 8006212:	6922      	ldr	r2, [r4, #16]
 8006214:	3202      	adds	r2, #2
 8006216:	f104 010c 	add.w	r1, r4, #12
 800621a:	0092      	lsls	r2, r2, #2
 800621c:	300c      	adds	r0, #12
 800621e:	f7ff ff4f 	bl	80060c0 <memcpy>
 8006222:	4621      	mov	r1, r4
 8006224:	4638      	mov	r0, r7
 8006226:	f7ff ffa5 	bl	8006174 <_Bfree>
 800622a:	4644      	mov	r4, r8
 800622c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006230:	3501      	adds	r5, #1
 8006232:	615e      	str	r6, [r3, #20]
 8006234:	6125      	str	r5, [r4, #16]
 8006236:	4620      	mov	r0, r4
 8006238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800623c:	0800915d 	.word	0x0800915d
 8006240:	0800916e 	.word	0x0800916e

08006244 <__hi0bits>:
 8006244:	0c03      	lsrs	r3, r0, #16
 8006246:	041b      	lsls	r3, r3, #16
 8006248:	b9d3      	cbnz	r3, 8006280 <__hi0bits+0x3c>
 800624a:	0400      	lsls	r0, r0, #16
 800624c:	2310      	movs	r3, #16
 800624e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006252:	bf04      	itt	eq
 8006254:	0200      	lsleq	r0, r0, #8
 8006256:	3308      	addeq	r3, #8
 8006258:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800625c:	bf04      	itt	eq
 800625e:	0100      	lsleq	r0, r0, #4
 8006260:	3304      	addeq	r3, #4
 8006262:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006266:	bf04      	itt	eq
 8006268:	0080      	lsleq	r0, r0, #2
 800626a:	3302      	addeq	r3, #2
 800626c:	2800      	cmp	r0, #0
 800626e:	db05      	blt.n	800627c <__hi0bits+0x38>
 8006270:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006274:	f103 0301 	add.w	r3, r3, #1
 8006278:	bf08      	it	eq
 800627a:	2320      	moveq	r3, #32
 800627c:	4618      	mov	r0, r3
 800627e:	4770      	bx	lr
 8006280:	2300      	movs	r3, #0
 8006282:	e7e4      	b.n	800624e <__hi0bits+0xa>

08006284 <__lo0bits>:
 8006284:	6803      	ldr	r3, [r0, #0]
 8006286:	f013 0207 	ands.w	r2, r3, #7
 800628a:	4601      	mov	r1, r0
 800628c:	d00b      	beq.n	80062a6 <__lo0bits+0x22>
 800628e:	07da      	lsls	r2, r3, #31
 8006290:	d423      	bmi.n	80062da <__lo0bits+0x56>
 8006292:	0798      	lsls	r0, r3, #30
 8006294:	bf49      	itett	mi
 8006296:	085b      	lsrmi	r3, r3, #1
 8006298:	089b      	lsrpl	r3, r3, #2
 800629a:	2001      	movmi	r0, #1
 800629c:	600b      	strmi	r3, [r1, #0]
 800629e:	bf5c      	itt	pl
 80062a0:	600b      	strpl	r3, [r1, #0]
 80062a2:	2002      	movpl	r0, #2
 80062a4:	4770      	bx	lr
 80062a6:	b298      	uxth	r0, r3
 80062a8:	b9a8      	cbnz	r0, 80062d6 <__lo0bits+0x52>
 80062aa:	0c1b      	lsrs	r3, r3, #16
 80062ac:	2010      	movs	r0, #16
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	b90a      	cbnz	r2, 80062b6 <__lo0bits+0x32>
 80062b2:	3008      	adds	r0, #8
 80062b4:	0a1b      	lsrs	r3, r3, #8
 80062b6:	071a      	lsls	r2, r3, #28
 80062b8:	bf04      	itt	eq
 80062ba:	091b      	lsreq	r3, r3, #4
 80062bc:	3004      	addeq	r0, #4
 80062be:	079a      	lsls	r2, r3, #30
 80062c0:	bf04      	itt	eq
 80062c2:	089b      	lsreq	r3, r3, #2
 80062c4:	3002      	addeq	r0, #2
 80062c6:	07da      	lsls	r2, r3, #31
 80062c8:	d403      	bmi.n	80062d2 <__lo0bits+0x4e>
 80062ca:	085b      	lsrs	r3, r3, #1
 80062cc:	f100 0001 	add.w	r0, r0, #1
 80062d0:	d005      	beq.n	80062de <__lo0bits+0x5a>
 80062d2:	600b      	str	r3, [r1, #0]
 80062d4:	4770      	bx	lr
 80062d6:	4610      	mov	r0, r2
 80062d8:	e7e9      	b.n	80062ae <__lo0bits+0x2a>
 80062da:	2000      	movs	r0, #0
 80062dc:	4770      	bx	lr
 80062de:	2020      	movs	r0, #32
 80062e0:	4770      	bx	lr
	...

080062e4 <__i2b>:
 80062e4:	b510      	push	{r4, lr}
 80062e6:	460c      	mov	r4, r1
 80062e8:	2101      	movs	r1, #1
 80062ea:	f7ff ff03 	bl	80060f4 <_Balloc>
 80062ee:	4602      	mov	r2, r0
 80062f0:	b928      	cbnz	r0, 80062fe <__i2b+0x1a>
 80062f2:	4b05      	ldr	r3, [pc, #20]	; (8006308 <__i2b+0x24>)
 80062f4:	4805      	ldr	r0, [pc, #20]	; (800630c <__i2b+0x28>)
 80062f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80062fa:	f001 f891 	bl	8007420 <__assert_func>
 80062fe:	2301      	movs	r3, #1
 8006300:	6144      	str	r4, [r0, #20]
 8006302:	6103      	str	r3, [r0, #16]
 8006304:	bd10      	pop	{r4, pc}
 8006306:	bf00      	nop
 8006308:	0800915d 	.word	0x0800915d
 800630c:	0800916e 	.word	0x0800916e

08006310 <__multiply>:
 8006310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006314:	4691      	mov	r9, r2
 8006316:	690a      	ldr	r2, [r1, #16]
 8006318:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800631c:	429a      	cmp	r2, r3
 800631e:	bfb8      	it	lt
 8006320:	460b      	movlt	r3, r1
 8006322:	460c      	mov	r4, r1
 8006324:	bfbc      	itt	lt
 8006326:	464c      	movlt	r4, r9
 8006328:	4699      	movlt	r9, r3
 800632a:	6927      	ldr	r7, [r4, #16]
 800632c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006330:	68a3      	ldr	r3, [r4, #8]
 8006332:	6861      	ldr	r1, [r4, #4]
 8006334:	eb07 060a 	add.w	r6, r7, sl
 8006338:	42b3      	cmp	r3, r6
 800633a:	b085      	sub	sp, #20
 800633c:	bfb8      	it	lt
 800633e:	3101      	addlt	r1, #1
 8006340:	f7ff fed8 	bl	80060f4 <_Balloc>
 8006344:	b930      	cbnz	r0, 8006354 <__multiply+0x44>
 8006346:	4602      	mov	r2, r0
 8006348:	4b44      	ldr	r3, [pc, #272]	; (800645c <__multiply+0x14c>)
 800634a:	4845      	ldr	r0, [pc, #276]	; (8006460 <__multiply+0x150>)
 800634c:	f240 115d 	movw	r1, #349	; 0x15d
 8006350:	f001 f866 	bl	8007420 <__assert_func>
 8006354:	f100 0514 	add.w	r5, r0, #20
 8006358:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800635c:	462b      	mov	r3, r5
 800635e:	2200      	movs	r2, #0
 8006360:	4543      	cmp	r3, r8
 8006362:	d321      	bcc.n	80063a8 <__multiply+0x98>
 8006364:	f104 0314 	add.w	r3, r4, #20
 8006368:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800636c:	f109 0314 	add.w	r3, r9, #20
 8006370:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006374:	9202      	str	r2, [sp, #8]
 8006376:	1b3a      	subs	r2, r7, r4
 8006378:	3a15      	subs	r2, #21
 800637a:	f022 0203 	bic.w	r2, r2, #3
 800637e:	3204      	adds	r2, #4
 8006380:	f104 0115 	add.w	r1, r4, #21
 8006384:	428f      	cmp	r7, r1
 8006386:	bf38      	it	cc
 8006388:	2204      	movcc	r2, #4
 800638a:	9201      	str	r2, [sp, #4]
 800638c:	9a02      	ldr	r2, [sp, #8]
 800638e:	9303      	str	r3, [sp, #12]
 8006390:	429a      	cmp	r2, r3
 8006392:	d80c      	bhi.n	80063ae <__multiply+0x9e>
 8006394:	2e00      	cmp	r6, #0
 8006396:	dd03      	ble.n	80063a0 <__multiply+0x90>
 8006398:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800639c:	2b00      	cmp	r3, #0
 800639e:	d05a      	beq.n	8006456 <__multiply+0x146>
 80063a0:	6106      	str	r6, [r0, #16]
 80063a2:	b005      	add	sp, #20
 80063a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a8:	f843 2b04 	str.w	r2, [r3], #4
 80063ac:	e7d8      	b.n	8006360 <__multiply+0x50>
 80063ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80063b2:	f1ba 0f00 	cmp.w	sl, #0
 80063b6:	d024      	beq.n	8006402 <__multiply+0xf2>
 80063b8:	f104 0e14 	add.w	lr, r4, #20
 80063bc:	46a9      	mov	r9, r5
 80063be:	f04f 0c00 	mov.w	ip, #0
 80063c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80063c6:	f8d9 1000 	ldr.w	r1, [r9]
 80063ca:	fa1f fb82 	uxth.w	fp, r2
 80063ce:	b289      	uxth	r1, r1
 80063d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80063d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80063d8:	f8d9 2000 	ldr.w	r2, [r9]
 80063dc:	4461      	add	r1, ip
 80063de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80063e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063ea:	b289      	uxth	r1, r1
 80063ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063f0:	4577      	cmp	r7, lr
 80063f2:	f849 1b04 	str.w	r1, [r9], #4
 80063f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063fa:	d8e2      	bhi.n	80063c2 <__multiply+0xb2>
 80063fc:	9a01      	ldr	r2, [sp, #4]
 80063fe:	f845 c002 	str.w	ip, [r5, r2]
 8006402:	9a03      	ldr	r2, [sp, #12]
 8006404:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006408:	3304      	adds	r3, #4
 800640a:	f1b9 0f00 	cmp.w	r9, #0
 800640e:	d020      	beq.n	8006452 <__multiply+0x142>
 8006410:	6829      	ldr	r1, [r5, #0]
 8006412:	f104 0c14 	add.w	ip, r4, #20
 8006416:	46ae      	mov	lr, r5
 8006418:	f04f 0a00 	mov.w	sl, #0
 800641c:	f8bc b000 	ldrh.w	fp, [ip]
 8006420:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006424:	fb09 220b 	mla	r2, r9, fp, r2
 8006428:	4492      	add	sl, r2
 800642a:	b289      	uxth	r1, r1
 800642c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006430:	f84e 1b04 	str.w	r1, [lr], #4
 8006434:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006438:	f8be 1000 	ldrh.w	r1, [lr]
 800643c:	0c12      	lsrs	r2, r2, #16
 800643e:	fb09 1102 	mla	r1, r9, r2, r1
 8006442:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006446:	4567      	cmp	r7, ip
 8006448:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800644c:	d8e6      	bhi.n	800641c <__multiply+0x10c>
 800644e:	9a01      	ldr	r2, [sp, #4]
 8006450:	50a9      	str	r1, [r5, r2]
 8006452:	3504      	adds	r5, #4
 8006454:	e79a      	b.n	800638c <__multiply+0x7c>
 8006456:	3e01      	subs	r6, #1
 8006458:	e79c      	b.n	8006394 <__multiply+0x84>
 800645a:	bf00      	nop
 800645c:	0800915d 	.word	0x0800915d
 8006460:	0800916e 	.word	0x0800916e

08006464 <__pow5mult>:
 8006464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006468:	4615      	mov	r5, r2
 800646a:	f012 0203 	ands.w	r2, r2, #3
 800646e:	4606      	mov	r6, r0
 8006470:	460f      	mov	r7, r1
 8006472:	d007      	beq.n	8006484 <__pow5mult+0x20>
 8006474:	4c25      	ldr	r4, [pc, #148]	; (800650c <__pow5mult+0xa8>)
 8006476:	3a01      	subs	r2, #1
 8006478:	2300      	movs	r3, #0
 800647a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800647e:	f7ff fe9b 	bl	80061b8 <__multadd>
 8006482:	4607      	mov	r7, r0
 8006484:	10ad      	asrs	r5, r5, #2
 8006486:	d03d      	beq.n	8006504 <__pow5mult+0xa0>
 8006488:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800648a:	b97c      	cbnz	r4, 80064ac <__pow5mult+0x48>
 800648c:	2010      	movs	r0, #16
 800648e:	f7fe f969 	bl	8004764 <malloc>
 8006492:	4602      	mov	r2, r0
 8006494:	6270      	str	r0, [r6, #36]	; 0x24
 8006496:	b928      	cbnz	r0, 80064a4 <__pow5mult+0x40>
 8006498:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <__pow5mult+0xac>)
 800649a:	481e      	ldr	r0, [pc, #120]	; (8006514 <__pow5mult+0xb0>)
 800649c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80064a0:	f000 ffbe 	bl	8007420 <__assert_func>
 80064a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064a8:	6004      	str	r4, [r0, #0]
 80064aa:	60c4      	str	r4, [r0, #12]
 80064ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80064b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064b4:	b94c      	cbnz	r4, 80064ca <__pow5mult+0x66>
 80064b6:	f240 2171 	movw	r1, #625	; 0x271
 80064ba:	4630      	mov	r0, r6
 80064bc:	f7ff ff12 	bl	80062e4 <__i2b>
 80064c0:	2300      	movs	r3, #0
 80064c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80064c6:	4604      	mov	r4, r0
 80064c8:	6003      	str	r3, [r0, #0]
 80064ca:	f04f 0900 	mov.w	r9, #0
 80064ce:	07eb      	lsls	r3, r5, #31
 80064d0:	d50a      	bpl.n	80064e8 <__pow5mult+0x84>
 80064d2:	4639      	mov	r1, r7
 80064d4:	4622      	mov	r2, r4
 80064d6:	4630      	mov	r0, r6
 80064d8:	f7ff ff1a 	bl	8006310 <__multiply>
 80064dc:	4639      	mov	r1, r7
 80064de:	4680      	mov	r8, r0
 80064e0:	4630      	mov	r0, r6
 80064e2:	f7ff fe47 	bl	8006174 <_Bfree>
 80064e6:	4647      	mov	r7, r8
 80064e8:	106d      	asrs	r5, r5, #1
 80064ea:	d00b      	beq.n	8006504 <__pow5mult+0xa0>
 80064ec:	6820      	ldr	r0, [r4, #0]
 80064ee:	b938      	cbnz	r0, 8006500 <__pow5mult+0x9c>
 80064f0:	4622      	mov	r2, r4
 80064f2:	4621      	mov	r1, r4
 80064f4:	4630      	mov	r0, r6
 80064f6:	f7ff ff0b 	bl	8006310 <__multiply>
 80064fa:	6020      	str	r0, [r4, #0]
 80064fc:	f8c0 9000 	str.w	r9, [r0]
 8006500:	4604      	mov	r4, r0
 8006502:	e7e4      	b.n	80064ce <__pow5mult+0x6a>
 8006504:	4638      	mov	r0, r7
 8006506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800650a:	bf00      	nop
 800650c:	080092c0 	.word	0x080092c0
 8006510:	080090eb 	.word	0x080090eb
 8006514:	0800916e 	.word	0x0800916e

08006518 <__lshift>:
 8006518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800651c:	460c      	mov	r4, r1
 800651e:	6849      	ldr	r1, [r1, #4]
 8006520:	6923      	ldr	r3, [r4, #16]
 8006522:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006526:	68a3      	ldr	r3, [r4, #8]
 8006528:	4607      	mov	r7, r0
 800652a:	4691      	mov	r9, r2
 800652c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006530:	f108 0601 	add.w	r6, r8, #1
 8006534:	42b3      	cmp	r3, r6
 8006536:	db0b      	blt.n	8006550 <__lshift+0x38>
 8006538:	4638      	mov	r0, r7
 800653a:	f7ff fddb 	bl	80060f4 <_Balloc>
 800653e:	4605      	mov	r5, r0
 8006540:	b948      	cbnz	r0, 8006556 <__lshift+0x3e>
 8006542:	4602      	mov	r2, r0
 8006544:	4b2a      	ldr	r3, [pc, #168]	; (80065f0 <__lshift+0xd8>)
 8006546:	482b      	ldr	r0, [pc, #172]	; (80065f4 <__lshift+0xdc>)
 8006548:	f240 11d9 	movw	r1, #473	; 0x1d9
 800654c:	f000 ff68 	bl	8007420 <__assert_func>
 8006550:	3101      	adds	r1, #1
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	e7ee      	b.n	8006534 <__lshift+0x1c>
 8006556:	2300      	movs	r3, #0
 8006558:	f100 0114 	add.w	r1, r0, #20
 800655c:	f100 0210 	add.w	r2, r0, #16
 8006560:	4618      	mov	r0, r3
 8006562:	4553      	cmp	r3, sl
 8006564:	db37      	blt.n	80065d6 <__lshift+0xbe>
 8006566:	6920      	ldr	r0, [r4, #16]
 8006568:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800656c:	f104 0314 	add.w	r3, r4, #20
 8006570:	f019 091f 	ands.w	r9, r9, #31
 8006574:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006578:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800657c:	d02f      	beq.n	80065de <__lshift+0xc6>
 800657e:	f1c9 0e20 	rsb	lr, r9, #32
 8006582:	468a      	mov	sl, r1
 8006584:	f04f 0c00 	mov.w	ip, #0
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	fa02 f209 	lsl.w	r2, r2, r9
 800658e:	ea42 020c 	orr.w	r2, r2, ip
 8006592:	f84a 2b04 	str.w	r2, [sl], #4
 8006596:	f853 2b04 	ldr.w	r2, [r3], #4
 800659a:	4298      	cmp	r0, r3
 800659c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80065a0:	d8f2      	bhi.n	8006588 <__lshift+0x70>
 80065a2:	1b03      	subs	r3, r0, r4
 80065a4:	3b15      	subs	r3, #21
 80065a6:	f023 0303 	bic.w	r3, r3, #3
 80065aa:	3304      	adds	r3, #4
 80065ac:	f104 0215 	add.w	r2, r4, #21
 80065b0:	4290      	cmp	r0, r2
 80065b2:	bf38      	it	cc
 80065b4:	2304      	movcc	r3, #4
 80065b6:	f841 c003 	str.w	ip, [r1, r3]
 80065ba:	f1bc 0f00 	cmp.w	ip, #0
 80065be:	d001      	beq.n	80065c4 <__lshift+0xac>
 80065c0:	f108 0602 	add.w	r6, r8, #2
 80065c4:	3e01      	subs	r6, #1
 80065c6:	4638      	mov	r0, r7
 80065c8:	612e      	str	r6, [r5, #16]
 80065ca:	4621      	mov	r1, r4
 80065cc:	f7ff fdd2 	bl	8006174 <_Bfree>
 80065d0:	4628      	mov	r0, r5
 80065d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80065da:	3301      	adds	r3, #1
 80065dc:	e7c1      	b.n	8006562 <__lshift+0x4a>
 80065de:	3904      	subs	r1, #4
 80065e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80065e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80065e8:	4298      	cmp	r0, r3
 80065ea:	d8f9      	bhi.n	80065e0 <__lshift+0xc8>
 80065ec:	e7ea      	b.n	80065c4 <__lshift+0xac>
 80065ee:	bf00      	nop
 80065f0:	0800915d 	.word	0x0800915d
 80065f4:	0800916e 	.word	0x0800916e

080065f8 <__mcmp>:
 80065f8:	b530      	push	{r4, r5, lr}
 80065fa:	6902      	ldr	r2, [r0, #16]
 80065fc:	690c      	ldr	r4, [r1, #16]
 80065fe:	1b12      	subs	r2, r2, r4
 8006600:	d10e      	bne.n	8006620 <__mcmp+0x28>
 8006602:	f100 0314 	add.w	r3, r0, #20
 8006606:	3114      	adds	r1, #20
 8006608:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800660c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006610:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006614:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006618:	42a5      	cmp	r5, r4
 800661a:	d003      	beq.n	8006624 <__mcmp+0x2c>
 800661c:	d305      	bcc.n	800662a <__mcmp+0x32>
 800661e:	2201      	movs	r2, #1
 8006620:	4610      	mov	r0, r2
 8006622:	bd30      	pop	{r4, r5, pc}
 8006624:	4283      	cmp	r3, r0
 8006626:	d3f3      	bcc.n	8006610 <__mcmp+0x18>
 8006628:	e7fa      	b.n	8006620 <__mcmp+0x28>
 800662a:	f04f 32ff 	mov.w	r2, #4294967295
 800662e:	e7f7      	b.n	8006620 <__mcmp+0x28>

08006630 <__mdiff>:
 8006630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	460c      	mov	r4, r1
 8006636:	4606      	mov	r6, r0
 8006638:	4611      	mov	r1, r2
 800663a:	4620      	mov	r0, r4
 800663c:	4690      	mov	r8, r2
 800663e:	f7ff ffdb 	bl	80065f8 <__mcmp>
 8006642:	1e05      	subs	r5, r0, #0
 8006644:	d110      	bne.n	8006668 <__mdiff+0x38>
 8006646:	4629      	mov	r1, r5
 8006648:	4630      	mov	r0, r6
 800664a:	f7ff fd53 	bl	80060f4 <_Balloc>
 800664e:	b930      	cbnz	r0, 800665e <__mdiff+0x2e>
 8006650:	4b3a      	ldr	r3, [pc, #232]	; (800673c <__mdiff+0x10c>)
 8006652:	4602      	mov	r2, r0
 8006654:	f240 2132 	movw	r1, #562	; 0x232
 8006658:	4839      	ldr	r0, [pc, #228]	; (8006740 <__mdiff+0x110>)
 800665a:	f000 fee1 	bl	8007420 <__assert_func>
 800665e:	2301      	movs	r3, #1
 8006660:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006668:	bfa4      	itt	ge
 800666a:	4643      	movge	r3, r8
 800666c:	46a0      	movge	r8, r4
 800666e:	4630      	mov	r0, r6
 8006670:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006674:	bfa6      	itte	ge
 8006676:	461c      	movge	r4, r3
 8006678:	2500      	movge	r5, #0
 800667a:	2501      	movlt	r5, #1
 800667c:	f7ff fd3a 	bl	80060f4 <_Balloc>
 8006680:	b920      	cbnz	r0, 800668c <__mdiff+0x5c>
 8006682:	4b2e      	ldr	r3, [pc, #184]	; (800673c <__mdiff+0x10c>)
 8006684:	4602      	mov	r2, r0
 8006686:	f44f 7110 	mov.w	r1, #576	; 0x240
 800668a:	e7e5      	b.n	8006658 <__mdiff+0x28>
 800668c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006690:	6926      	ldr	r6, [r4, #16]
 8006692:	60c5      	str	r5, [r0, #12]
 8006694:	f104 0914 	add.w	r9, r4, #20
 8006698:	f108 0514 	add.w	r5, r8, #20
 800669c:	f100 0e14 	add.w	lr, r0, #20
 80066a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80066a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80066a8:	f108 0210 	add.w	r2, r8, #16
 80066ac:	46f2      	mov	sl, lr
 80066ae:	2100      	movs	r1, #0
 80066b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80066b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80066b8:	fa1f f883 	uxth.w	r8, r3
 80066bc:	fa11 f18b 	uxtah	r1, r1, fp
 80066c0:	0c1b      	lsrs	r3, r3, #16
 80066c2:	eba1 0808 	sub.w	r8, r1, r8
 80066c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80066ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80066ce:	fa1f f888 	uxth.w	r8, r8
 80066d2:	1419      	asrs	r1, r3, #16
 80066d4:	454e      	cmp	r6, r9
 80066d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80066da:	f84a 3b04 	str.w	r3, [sl], #4
 80066de:	d8e7      	bhi.n	80066b0 <__mdiff+0x80>
 80066e0:	1b33      	subs	r3, r6, r4
 80066e2:	3b15      	subs	r3, #21
 80066e4:	f023 0303 	bic.w	r3, r3, #3
 80066e8:	3304      	adds	r3, #4
 80066ea:	3415      	adds	r4, #21
 80066ec:	42a6      	cmp	r6, r4
 80066ee:	bf38      	it	cc
 80066f0:	2304      	movcc	r3, #4
 80066f2:	441d      	add	r5, r3
 80066f4:	4473      	add	r3, lr
 80066f6:	469e      	mov	lr, r3
 80066f8:	462e      	mov	r6, r5
 80066fa:	4566      	cmp	r6, ip
 80066fc:	d30e      	bcc.n	800671c <__mdiff+0xec>
 80066fe:	f10c 0203 	add.w	r2, ip, #3
 8006702:	1b52      	subs	r2, r2, r5
 8006704:	f022 0203 	bic.w	r2, r2, #3
 8006708:	3d03      	subs	r5, #3
 800670a:	45ac      	cmp	ip, r5
 800670c:	bf38      	it	cc
 800670e:	2200      	movcc	r2, #0
 8006710:	441a      	add	r2, r3
 8006712:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006716:	b17b      	cbz	r3, 8006738 <__mdiff+0x108>
 8006718:	6107      	str	r7, [r0, #16]
 800671a:	e7a3      	b.n	8006664 <__mdiff+0x34>
 800671c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006720:	fa11 f288 	uxtah	r2, r1, r8
 8006724:	1414      	asrs	r4, r2, #16
 8006726:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800672a:	b292      	uxth	r2, r2
 800672c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006730:	f84e 2b04 	str.w	r2, [lr], #4
 8006734:	1421      	asrs	r1, r4, #16
 8006736:	e7e0      	b.n	80066fa <__mdiff+0xca>
 8006738:	3f01      	subs	r7, #1
 800673a:	e7ea      	b.n	8006712 <__mdiff+0xe2>
 800673c:	0800915d 	.word	0x0800915d
 8006740:	0800916e 	.word	0x0800916e

08006744 <__d2b>:
 8006744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006748:	4689      	mov	r9, r1
 800674a:	2101      	movs	r1, #1
 800674c:	ec57 6b10 	vmov	r6, r7, d0
 8006750:	4690      	mov	r8, r2
 8006752:	f7ff fccf 	bl	80060f4 <_Balloc>
 8006756:	4604      	mov	r4, r0
 8006758:	b930      	cbnz	r0, 8006768 <__d2b+0x24>
 800675a:	4602      	mov	r2, r0
 800675c:	4b25      	ldr	r3, [pc, #148]	; (80067f4 <__d2b+0xb0>)
 800675e:	4826      	ldr	r0, [pc, #152]	; (80067f8 <__d2b+0xb4>)
 8006760:	f240 310a 	movw	r1, #778	; 0x30a
 8006764:	f000 fe5c 	bl	8007420 <__assert_func>
 8006768:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800676c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006770:	bb35      	cbnz	r5, 80067c0 <__d2b+0x7c>
 8006772:	2e00      	cmp	r6, #0
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	d028      	beq.n	80067ca <__d2b+0x86>
 8006778:	4668      	mov	r0, sp
 800677a:	9600      	str	r6, [sp, #0]
 800677c:	f7ff fd82 	bl	8006284 <__lo0bits>
 8006780:	9900      	ldr	r1, [sp, #0]
 8006782:	b300      	cbz	r0, 80067c6 <__d2b+0x82>
 8006784:	9a01      	ldr	r2, [sp, #4]
 8006786:	f1c0 0320 	rsb	r3, r0, #32
 800678a:	fa02 f303 	lsl.w	r3, r2, r3
 800678e:	430b      	orrs	r3, r1
 8006790:	40c2      	lsrs	r2, r0
 8006792:	6163      	str	r3, [r4, #20]
 8006794:	9201      	str	r2, [sp, #4]
 8006796:	9b01      	ldr	r3, [sp, #4]
 8006798:	61a3      	str	r3, [r4, #24]
 800679a:	2b00      	cmp	r3, #0
 800679c:	bf14      	ite	ne
 800679e:	2202      	movne	r2, #2
 80067a0:	2201      	moveq	r2, #1
 80067a2:	6122      	str	r2, [r4, #16]
 80067a4:	b1d5      	cbz	r5, 80067dc <__d2b+0x98>
 80067a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80067aa:	4405      	add	r5, r0
 80067ac:	f8c9 5000 	str.w	r5, [r9]
 80067b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80067b4:	f8c8 0000 	str.w	r0, [r8]
 80067b8:	4620      	mov	r0, r4
 80067ba:	b003      	add	sp, #12
 80067bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067c4:	e7d5      	b.n	8006772 <__d2b+0x2e>
 80067c6:	6161      	str	r1, [r4, #20]
 80067c8:	e7e5      	b.n	8006796 <__d2b+0x52>
 80067ca:	a801      	add	r0, sp, #4
 80067cc:	f7ff fd5a 	bl	8006284 <__lo0bits>
 80067d0:	9b01      	ldr	r3, [sp, #4]
 80067d2:	6163      	str	r3, [r4, #20]
 80067d4:	2201      	movs	r2, #1
 80067d6:	6122      	str	r2, [r4, #16]
 80067d8:	3020      	adds	r0, #32
 80067da:	e7e3      	b.n	80067a4 <__d2b+0x60>
 80067dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80067e4:	f8c9 0000 	str.w	r0, [r9]
 80067e8:	6918      	ldr	r0, [r3, #16]
 80067ea:	f7ff fd2b 	bl	8006244 <__hi0bits>
 80067ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067f2:	e7df      	b.n	80067b4 <__d2b+0x70>
 80067f4:	0800915d 	.word	0x0800915d
 80067f8:	0800916e 	.word	0x0800916e

080067fc <_calloc_r>:
 80067fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067fe:	fba1 2402 	umull	r2, r4, r1, r2
 8006802:	b94c      	cbnz	r4, 8006818 <_calloc_r+0x1c>
 8006804:	4611      	mov	r1, r2
 8006806:	9201      	str	r2, [sp, #4]
 8006808:	f7fe f828 	bl	800485c <_malloc_r>
 800680c:	9a01      	ldr	r2, [sp, #4]
 800680e:	4605      	mov	r5, r0
 8006810:	b930      	cbnz	r0, 8006820 <_calloc_r+0x24>
 8006812:	4628      	mov	r0, r5
 8006814:	b003      	add	sp, #12
 8006816:	bd30      	pop	{r4, r5, pc}
 8006818:	220c      	movs	r2, #12
 800681a:	6002      	str	r2, [r0, #0]
 800681c:	2500      	movs	r5, #0
 800681e:	e7f8      	b.n	8006812 <_calloc_r+0x16>
 8006820:	4621      	mov	r1, r4
 8006822:	f7fd ffa7 	bl	8004774 <memset>
 8006826:	e7f4      	b.n	8006812 <_calloc_r+0x16>

08006828 <__ssputs_r>:
 8006828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800682c:	688e      	ldr	r6, [r1, #8]
 800682e:	429e      	cmp	r6, r3
 8006830:	4682      	mov	sl, r0
 8006832:	460c      	mov	r4, r1
 8006834:	4690      	mov	r8, r2
 8006836:	461f      	mov	r7, r3
 8006838:	d838      	bhi.n	80068ac <__ssputs_r+0x84>
 800683a:	898a      	ldrh	r2, [r1, #12]
 800683c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006840:	d032      	beq.n	80068a8 <__ssputs_r+0x80>
 8006842:	6825      	ldr	r5, [r4, #0]
 8006844:	6909      	ldr	r1, [r1, #16]
 8006846:	eba5 0901 	sub.w	r9, r5, r1
 800684a:	6965      	ldr	r5, [r4, #20]
 800684c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006850:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006854:	3301      	adds	r3, #1
 8006856:	444b      	add	r3, r9
 8006858:	106d      	asrs	r5, r5, #1
 800685a:	429d      	cmp	r5, r3
 800685c:	bf38      	it	cc
 800685e:	461d      	movcc	r5, r3
 8006860:	0553      	lsls	r3, r2, #21
 8006862:	d531      	bpl.n	80068c8 <__ssputs_r+0xa0>
 8006864:	4629      	mov	r1, r5
 8006866:	f7fd fff9 	bl	800485c <_malloc_r>
 800686a:	4606      	mov	r6, r0
 800686c:	b950      	cbnz	r0, 8006884 <__ssputs_r+0x5c>
 800686e:	230c      	movs	r3, #12
 8006870:	f8ca 3000 	str.w	r3, [sl]
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800687a:	81a3      	strh	r3, [r4, #12]
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006884:	6921      	ldr	r1, [r4, #16]
 8006886:	464a      	mov	r2, r9
 8006888:	f7ff fc1a 	bl	80060c0 <memcpy>
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006896:	81a3      	strh	r3, [r4, #12]
 8006898:	6126      	str	r6, [r4, #16]
 800689a:	6165      	str	r5, [r4, #20]
 800689c:	444e      	add	r6, r9
 800689e:	eba5 0509 	sub.w	r5, r5, r9
 80068a2:	6026      	str	r6, [r4, #0]
 80068a4:	60a5      	str	r5, [r4, #8]
 80068a6:	463e      	mov	r6, r7
 80068a8:	42be      	cmp	r6, r7
 80068aa:	d900      	bls.n	80068ae <__ssputs_r+0x86>
 80068ac:	463e      	mov	r6, r7
 80068ae:	6820      	ldr	r0, [r4, #0]
 80068b0:	4632      	mov	r2, r6
 80068b2:	4641      	mov	r1, r8
 80068b4:	f000 ffb0 	bl	8007818 <memmove>
 80068b8:	68a3      	ldr	r3, [r4, #8]
 80068ba:	1b9b      	subs	r3, r3, r6
 80068bc:	60a3      	str	r3, [r4, #8]
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	4433      	add	r3, r6
 80068c2:	6023      	str	r3, [r4, #0]
 80068c4:	2000      	movs	r0, #0
 80068c6:	e7db      	b.n	8006880 <__ssputs_r+0x58>
 80068c8:	462a      	mov	r2, r5
 80068ca:	f000 ffbf 	bl	800784c <_realloc_r>
 80068ce:	4606      	mov	r6, r0
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d1e1      	bne.n	8006898 <__ssputs_r+0x70>
 80068d4:	6921      	ldr	r1, [r4, #16]
 80068d6:	4650      	mov	r0, sl
 80068d8:	f7fd ff54 	bl	8004784 <_free_r>
 80068dc:	e7c7      	b.n	800686e <__ssputs_r+0x46>
	...

080068e0 <_svfiprintf_r>:
 80068e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e4:	4698      	mov	r8, r3
 80068e6:	898b      	ldrh	r3, [r1, #12]
 80068e8:	061b      	lsls	r3, r3, #24
 80068ea:	b09d      	sub	sp, #116	; 0x74
 80068ec:	4607      	mov	r7, r0
 80068ee:	460d      	mov	r5, r1
 80068f0:	4614      	mov	r4, r2
 80068f2:	d50e      	bpl.n	8006912 <_svfiprintf_r+0x32>
 80068f4:	690b      	ldr	r3, [r1, #16]
 80068f6:	b963      	cbnz	r3, 8006912 <_svfiprintf_r+0x32>
 80068f8:	2140      	movs	r1, #64	; 0x40
 80068fa:	f7fd ffaf 	bl	800485c <_malloc_r>
 80068fe:	6028      	str	r0, [r5, #0]
 8006900:	6128      	str	r0, [r5, #16]
 8006902:	b920      	cbnz	r0, 800690e <_svfiprintf_r+0x2e>
 8006904:	230c      	movs	r3, #12
 8006906:	603b      	str	r3, [r7, #0]
 8006908:	f04f 30ff 	mov.w	r0, #4294967295
 800690c:	e0d1      	b.n	8006ab2 <_svfiprintf_r+0x1d2>
 800690e:	2340      	movs	r3, #64	; 0x40
 8006910:	616b      	str	r3, [r5, #20]
 8006912:	2300      	movs	r3, #0
 8006914:	9309      	str	r3, [sp, #36]	; 0x24
 8006916:	2320      	movs	r3, #32
 8006918:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800691c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006920:	2330      	movs	r3, #48	; 0x30
 8006922:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006acc <_svfiprintf_r+0x1ec>
 8006926:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800692a:	f04f 0901 	mov.w	r9, #1
 800692e:	4623      	mov	r3, r4
 8006930:	469a      	mov	sl, r3
 8006932:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006936:	b10a      	cbz	r2, 800693c <_svfiprintf_r+0x5c>
 8006938:	2a25      	cmp	r2, #37	; 0x25
 800693a:	d1f9      	bne.n	8006930 <_svfiprintf_r+0x50>
 800693c:	ebba 0b04 	subs.w	fp, sl, r4
 8006940:	d00b      	beq.n	800695a <_svfiprintf_r+0x7a>
 8006942:	465b      	mov	r3, fp
 8006944:	4622      	mov	r2, r4
 8006946:	4629      	mov	r1, r5
 8006948:	4638      	mov	r0, r7
 800694a:	f7ff ff6d 	bl	8006828 <__ssputs_r>
 800694e:	3001      	adds	r0, #1
 8006950:	f000 80aa 	beq.w	8006aa8 <_svfiprintf_r+0x1c8>
 8006954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006956:	445a      	add	r2, fp
 8006958:	9209      	str	r2, [sp, #36]	; 0x24
 800695a:	f89a 3000 	ldrb.w	r3, [sl]
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 80a2 	beq.w	8006aa8 <_svfiprintf_r+0x1c8>
 8006964:	2300      	movs	r3, #0
 8006966:	f04f 32ff 	mov.w	r2, #4294967295
 800696a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800696e:	f10a 0a01 	add.w	sl, sl, #1
 8006972:	9304      	str	r3, [sp, #16]
 8006974:	9307      	str	r3, [sp, #28]
 8006976:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800697a:	931a      	str	r3, [sp, #104]	; 0x68
 800697c:	4654      	mov	r4, sl
 800697e:	2205      	movs	r2, #5
 8006980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006984:	4851      	ldr	r0, [pc, #324]	; (8006acc <_svfiprintf_r+0x1ec>)
 8006986:	f7f9 fc43 	bl	8000210 <memchr>
 800698a:	9a04      	ldr	r2, [sp, #16]
 800698c:	b9d8      	cbnz	r0, 80069c6 <_svfiprintf_r+0xe6>
 800698e:	06d0      	lsls	r0, r2, #27
 8006990:	bf44      	itt	mi
 8006992:	2320      	movmi	r3, #32
 8006994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006998:	0711      	lsls	r1, r2, #28
 800699a:	bf44      	itt	mi
 800699c:	232b      	movmi	r3, #43	; 0x2b
 800699e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069a2:	f89a 3000 	ldrb.w	r3, [sl]
 80069a6:	2b2a      	cmp	r3, #42	; 0x2a
 80069a8:	d015      	beq.n	80069d6 <_svfiprintf_r+0xf6>
 80069aa:	9a07      	ldr	r2, [sp, #28]
 80069ac:	4654      	mov	r4, sl
 80069ae:	2000      	movs	r0, #0
 80069b0:	f04f 0c0a 	mov.w	ip, #10
 80069b4:	4621      	mov	r1, r4
 80069b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069ba:	3b30      	subs	r3, #48	; 0x30
 80069bc:	2b09      	cmp	r3, #9
 80069be:	d94e      	bls.n	8006a5e <_svfiprintf_r+0x17e>
 80069c0:	b1b0      	cbz	r0, 80069f0 <_svfiprintf_r+0x110>
 80069c2:	9207      	str	r2, [sp, #28]
 80069c4:	e014      	b.n	80069f0 <_svfiprintf_r+0x110>
 80069c6:	eba0 0308 	sub.w	r3, r0, r8
 80069ca:	fa09 f303 	lsl.w	r3, r9, r3
 80069ce:	4313      	orrs	r3, r2
 80069d0:	9304      	str	r3, [sp, #16]
 80069d2:	46a2      	mov	sl, r4
 80069d4:	e7d2      	b.n	800697c <_svfiprintf_r+0x9c>
 80069d6:	9b03      	ldr	r3, [sp, #12]
 80069d8:	1d19      	adds	r1, r3, #4
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	9103      	str	r1, [sp, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	bfbb      	ittet	lt
 80069e2:	425b      	neglt	r3, r3
 80069e4:	f042 0202 	orrlt.w	r2, r2, #2
 80069e8:	9307      	strge	r3, [sp, #28]
 80069ea:	9307      	strlt	r3, [sp, #28]
 80069ec:	bfb8      	it	lt
 80069ee:	9204      	strlt	r2, [sp, #16]
 80069f0:	7823      	ldrb	r3, [r4, #0]
 80069f2:	2b2e      	cmp	r3, #46	; 0x2e
 80069f4:	d10c      	bne.n	8006a10 <_svfiprintf_r+0x130>
 80069f6:	7863      	ldrb	r3, [r4, #1]
 80069f8:	2b2a      	cmp	r3, #42	; 0x2a
 80069fa:	d135      	bne.n	8006a68 <_svfiprintf_r+0x188>
 80069fc:	9b03      	ldr	r3, [sp, #12]
 80069fe:	1d1a      	adds	r2, r3, #4
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	9203      	str	r2, [sp, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	bfb8      	it	lt
 8006a08:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a0c:	3402      	adds	r4, #2
 8006a0e:	9305      	str	r3, [sp, #20]
 8006a10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006adc <_svfiprintf_r+0x1fc>
 8006a14:	7821      	ldrb	r1, [r4, #0]
 8006a16:	2203      	movs	r2, #3
 8006a18:	4650      	mov	r0, sl
 8006a1a:	f7f9 fbf9 	bl	8000210 <memchr>
 8006a1e:	b140      	cbz	r0, 8006a32 <_svfiprintf_r+0x152>
 8006a20:	2340      	movs	r3, #64	; 0x40
 8006a22:	eba0 000a 	sub.w	r0, r0, sl
 8006a26:	fa03 f000 	lsl.w	r0, r3, r0
 8006a2a:	9b04      	ldr	r3, [sp, #16]
 8006a2c:	4303      	orrs	r3, r0
 8006a2e:	3401      	adds	r4, #1
 8006a30:	9304      	str	r3, [sp, #16]
 8006a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a36:	4826      	ldr	r0, [pc, #152]	; (8006ad0 <_svfiprintf_r+0x1f0>)
 8006a38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a3c:	2206      	movs	r2, #6
 8006a3e:	f7f9 fbe7 	bl	8000210 <memchr>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d038      	beq.n	8006ab8 <_svfiprintf_r+0x1d8>
 8006a46:	4b23      	ldr	r3, [pc, #140]	; (8006ad4 <_svfiprintf_r+0x1f4>)
 8006a48:	bb1b      	cbnz	r3, 8006a92 <_svfiprintf_r+0x1b2>
 8006a4a:	9b03      	ldr	r3, [sp, #12]
 8006a4c:	3307      	adds	r3, #7
 8006a4e:	f023 0307 	bic.w	r3, r3, #7
 8006a52:	3308      	adds	r3, #8
 8006a54:	9303      	str	r3, [sp, #12]
 8006a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a58:	4433      	add	r3, r6
 8006a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a5c:	e767      	b.n	800692e <_svfiprintf_r+0x4e>
 8006a5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a62:	460c      	mov	r4, r1
 8006a64:	2001      	movs	r0, #1
 8006a66:	e7a5      	b.n	80069b4 <_svfiprintf_r+0xd4>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	3401      	adds	r4, #1
 8006a6c:	9305      	str	r3, [sp, #20]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	f04f 0c0a 	mov.w	ip, #10
 8006a74:	4620      	mov	r0, r4
 8006a76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a7a:	3a30      	subs	r2, #48	; 0x30
 8006a7c:	2a09      	cmp	r2, #9
 8006a7e:	d903      	bls.n	8006a88 <_svfiprintf_r+0x1a8>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0c5      	beq.n	8006a10 <_svfiprintf_r+0x130>
 8006a84:	9105      	str	r1, [sp, #20]
 8006a86:	e7c3      	b.n	8006a10 <_svfiprintf_r+0x130>
 8006a88:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e7f0      	b.n	8006a74 <_svfiprintf_r+0x194>
 8006a92:	ab03      	add	r3, sp, #12
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	462a      	mov	r2, r5
 8006a98:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <_svfiprintf_r+0x1f8>)
 8006a9a:	a904      	add	r1, sp, #16
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	f7fd fff1 	bl	8004a84 <_printf_float>
 8006aa2:	1c42      	adds	r2, r0, #1
 8006aa4:	4606      	mov	r6, r0
 8006aa6:	d1d6      	bne.n	8006a56 <_svfiprintf_r+0x176>
 8006aa8:	89ab      	ldrh	r3, [r5, #12]
 8006aaa:	065b      	lsls	r3, r3, #25
 8006aac:	f53f af2c 	bmi.w	8006908 <_svfiprintf_r+0x28>
 8006ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ab2:	b01d      	add	sp, #116	; 0x74
 8006ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab8:	ab03      	add	r3, sp, #12
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	462a      	mov	r2, r5
 8006abe:	4b06      	ldr	r3, [pc, #24]	; (8006ad8 <_svfiprintf_r+0x1f8>)
 8006ac0:	a904      	add	r1, sp, #16
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	f7fe fa82 	bl	8004fcc <_printf_i>
 8006ac8:	e7eb      	b.n	8006aa2 <_svfiprintf_r+0x1c2>
 8006aca:	bf00      	nop
 8006acc:	080092cc 	.word	0x080092cc
 8006ad0:	080092d6 	.word	0x080092d6
 8006ad4:	08004a85 	.word	0x08004a85
 8006ad8:	08006829 	.word	0x08006829
 8006adc:	080092d2 	.word	0x080092d2

08006ae0 <_sungetc_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	1c4b      	adds	r3, r1, #1
 8006ae4:	4614      	mov	r4, r2
 8006ae6:	d103      	bne.n	8006af0 <_sungetc_r+0x10>
 8006ae8:	f04f 35ff 	mov.w	r5, #4294967295
 8006aec:	4628      	mov	r0, r5
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
 8006af0:	8993      	ldrh	r3, [r2, #12]
 8006af2:	f023 0320 	bic.w	r3, r3, #32
 8006af6:	8193      	strh	r3, [r2, #12]
 8006af8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006afa:	6852      	ldr	r2, [r2, #4]
 8006afc:	b2cd      	uxtb	r5, r1
 8006afe:	b18b      	cbz	r3, 8006b24 <_sungetc_r+0x44>
 8006b00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b02:	4293      	cmp	r3, r2
 8006b04:	dd08      	ble.n	8006b18 <_sungetc_r+0x38>
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	1e5a      	subs	r2, r3, #1
 8006b0a:	6022      	str	r2, [r4, #0]
 8006b0c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006b10:	6863      	ldr	r3, [r4, #4]
 8006b12:	3301      	adds	r3, #1
 8006b14:	6063      	str	r3, [r4, #4]
 8006b16:	e7e9      	b.n	8006aec <_sungetc_r+0xc>
 8006b18:	4621      	mov	r1, r4
 8006b1a:	f000 fc47 	bl	80073ac <__submore>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d0f1      	beq.n	8006b06 <_sungetc_r+0x26>
 8006b22:	e7e1      	b.n	8006ae8 <_sungetc_r+0x8>
 8006b24:	6921      	ldr	r1, [r4, #16]
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	b151      	cbz	r1, 8006b40 <_sungetc_r+0x60>
 8006b2a:	4299      	cmp	r1, r3
 8006b2c:	d208      	bcs.n	8006b40 <_sungetc_r+0x60>
 8006b2e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006b32:	42a9      	cmp	r1, r5
 8006b34:	d104      	bne.n	8006b40 <_sungetc_r+0x60>
 8006b36:	3b01      	subs	r3, #1
 8006b38:	3201      	adds	r2, #1
 8006b3a:	6023      	str	r3, [r4, #0]
 8006b3c:	6062      	str	r2, [r4, #4]
 8006b3e:	e7d5      	b.n	8006aec <_sungetc_r+0xc>
 8006b40:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b48:	6363      	str	r3, [r4, #52]	; 0x34
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b4e:	4623      	mov	r3, r4
 8006b50:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	2301      	movs	r3, #1
 8006b58:	e7dc      	b.n	8006b14 <_sungetc_r+0x34>

08006b5a <__ssrefill_r>:
 8006b5a:	b510      	push	{r4, lr}
 8006b5c:	460c      	mov	r4, r1
 8006b5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006b60:	b169      	cbz	r1, 8006b7e <__ssrefill_r+0x24>
 8006b62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b66:	4299      	cmp	r1, r3
 8006b68:	d001      	beq.n	8006b6e <__ssrefill_r+0x14>
 8006b6a:	f7fd fe0b 	bl	8004784 <_free_r>
 8006b6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b70:	6063      	str	r3, [r4, #4]
 8006b72:	2000      	movs	r0, #0
 8006b74:	6360      	str	r0, [r4, #52]	; 0x34
 8006b76:	b113      	cbz	r3, 8006b7e <__ssrefill_r+0x24>
 8006b78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b7a:	6023      	str	r3, [r4, #0]
 8006b7c:	bd10      	pop	{r4, pc}
 8006b7e:	6923      	ldr	r3, [r4, #16]
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	2300      	movs	r3, #0
 8006b84:	6063      	str	r3, [r4, #4]
 8006b86:	89a3      	ldrh	r3, [r4, #12]
 8006b88:	f043 0320 	orr.w	r3, r3, #32
 8006b8c:	81a3      	strh	r3, [r4, #12]
 8006b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b92:	e7f3      	b.n	8006b7c <__ssrefill_r+0x22>

08006b94 <__ssvfiscanf_r>:
 8006b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	460c      	mov	r4, r1
 8006b9a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006ba4:	49a6      	ldr	r1, [pc, #664]	; (8006e40 <__ssvfiscanf_r+0x2ac>)
 8006ba6:	91a0      	str	r1, [sp, #640]	; 0x280
 8006ba8:	f10d 0804 	add.w	r8, sp, #4
 8006bac:	49a5      	ldr	r1, [pc, #660]	; (8006e44 <__ssvfiscanf_r+0x2b0>)
 8006bae:	4fa6      	ldr	r7, [pc, #664]	; (8006e48 <__ssvfiscanf_r+0x2b4>)
 8006bb0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006e4c <__ssvfiscanf_r+0x2b8>
 8006bb4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006bb8:	4606      	mov	r6, r0
 8006bba:	91a1      	str	r1, [sp, #644]	; 0x284
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	7813      	ldrb	r3, [r2, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 815a 	beq.w	8006e7a <__ssvfiscanf_r+0x2e6>
 8006bc6:	5dd9      	ldrb	r1, [r3, r7]
 8006bc8:	f011 0108 	ands.w	r1, r1, #8
 8006bcc:	f102 0501 	add.w	r5, r2, #1
 8006bd0:	d019      	beq.n	8006c06 <__ssvfiscanf_r+0x72>
 8006bd2:	6863      	ldr	r3, [r4, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	dd0f      	ble.n	8006bf8 <__ssvfiscanf_r+0x64>
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	781a      	ldrb	r2, [r3, #0]
 8006bdc:	5cba      	ldrb	r2, [r7, r2]
 8006bde:	0712      	lsls	r2, r2, #28
 8006be0:	d401      	bmi.n	8006be6 <__ssvfiscanf_r+0x52>
 8006be2:	462a      	mov	r2, r5
 8006be4:	e7eb      	b.n	8006bbe <__ssvfiscanf_r+0x2a>
 8006be6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006be8:	3201      	adds	r2, #1
 8006bea:	9245      	str	r2, [sp, #276]	; 0x114
 8006bec:	6862      	ldr	r2, [r4, #4]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	3a01      	subs	r2, #1
 8006bf2:	6062      	str	r2, [r4, #4]
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	e7ec      	b.n	8006bd2 <__ssvfiscanf_r+0x3e>
 8006bf8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	4798      	blx	r3
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d0e9      	beq.n	8006bd8 <__ssvfiscanf_r+0x44>
 8006c04:	e7ed      	b.n	8006be2 <__ssvfiscanf_r+0x4e>
 8006c06:	2b25      	cmp	r3, #37	; 0x25
 8006c08:	d012      	beq.n	8006c30 <__ssvfiscanf_r+0x9c>
 8006c0a:	469a      	mov	sl, r3
 8006c0c:	6863      	ldr	r3, [r4, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f340 8091 	ble.w	8006d36 <__ssvfiscanf_r+0x1a2>
 8006c14:	6822      	ldr	r2, [r4, #0]
 8006c16:	7813      	ldrb	r3, [r2, #0]
 8006c18:	4553      	cmp	r3, sl
 8006c1a:	f040 812e 	bne.w	8006e7a <__ssvfiscanf_r+0x2e6>
 8006c1e:	6863      	ldr	r3, [r4, #4]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	6063      	str	r3, [r4, #4]
 8006c24:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006c26:	3201      	adds	r2, #1
 8006c28:	3301      	adds	r3, #1
 8006c2a:	6022      	str	r2, [r4, #0]
 8006c2c:	9345      	str	r3, [sp, #276]	; 0x114
 8006c2e:	e7d8      	b.n	8006be2 <__ssvfiscanf_r+0x4e>
 8006c30:	9141      	str	r1, [sp, #260]	; 0x104
 8006c32:	9143      	str	r1, [sp, #268]	; 0x10c
 8006c34:	7853      	ldrb	r3, [r2, #1]
 8006c36:	2b2a      	cmp	r3, #42	; 0x2a
 8006c38:	bf02      	ittt	eq
 8006c3a:	2310      	moveq	r3, #16
 8006c3c:	1c95      	addeq	r5, r2, #2
 8006c3e:	9341      	streq	r3, [sp, #260]	; 0x104
 8006c40:	220a      	movs	r2, #10
 8006c42:	46aa      	mov	sl, r5
 8006c44:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006c48:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006c4c:	2b09      	cmp	r3, #9
 8006c4e:	d91d      	bls.n	8006c8c <__ssvfiscanf_r+0xf8>
 8006c50:	487e      	ldr	r0, [pc, #504]	; (8006e4c <__ssvfiscanf_r+0x2b8>)
 8006c52:	2203      	movs	r2, #3
 8006c54:	f7f9 fadc 	bl	8000210 <memchr>
 8006c58:	b140      	cbz	r0, 8006c6c <__ssvfiscanf_r+0xd8>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	eba0 0009 	sub.w	r0, r0, r9
 8006c60:	fa03 f000 	lsl.w	r0, r3, r0
 8006c64:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006c66:	4318      	orrs	r0, r3
 8006c68:	9041      	str	r0, [sp, #260]	; 0x104
 8006c6a:	4655      	mov	r5, sl
 8006c6c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c70:	2b78      	cmp	r3, #120	; 0x78
 8006c72:	d806      	bhi.n	8006c82 <__ssvfiscanf_r+0xee>
 8006c74:	2b57      	cmp	r3, #87	; 0x57
 8006c76:	d810      	bhi.n	8006c9a <__ssvfiscanf_r+0x106>
 8006c78:	2b25      	cmp	r3, #37	; 0x25
 8006c7a:	d0c6      	beq.n	8006c0a <__ssvfiscanf_r+0x76>
 8006c7c:	d856      	bhi.n	8006d2c <__ssvfiscanf_r+0x198>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d064      	beq.n	8006d4c <__ssvfiscanf_r+0x1b8>
 8006c82:	2303      	movs	r3, #3
 8006c84:	9347      	str	r3, [sp, #284]	; 0x11c
 8006c86:	230a      	movs	r3, #10
 8006c88:	9342      	str	r3, [sp, #264]	; 0x108
 8006c8a:	e071      	b.n	8006d70 <__ssvfiscanf_r+0x1dc>
 8006c8c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006c8e:	fb02 1103 	mla	r1, r2, r3, r1
 8006c92:	3930      	subs	r1, #48	; 0x30
 8006c94:	9143      	str	r1, [sp, #268]	; 0x10c
 8006c96:	4655      	mov	r5, sl
 8006c98:	e7d3      	b.n	8006c42 <__ssvfiscanf_r+0xae>
 8006c9a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006c9e:	2a20      	cmp	r2, #32
 8006ca0:	d8ef      	bhi.n	8006c82 <__ssvfiscanf_r+0xee>
 8006ca2:	a101      	add	r1, pc, #4	; (adr r1, 8006ca8 <__ssvfiscanf_r+0x114>)
 8006ca4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006ca8:	08006d5b 	.word	0x08006d5b
 8006cac:	08006c83 	.word	0x08006c83
 8006cb0:	08006c83 	.word	0x08006c83
 8006cb4:	08006db9 	.word	0x08006db9
 8006cb8:	08006c83 	.word	0x08006c83
 8006cbc:	08006c83 	.word	0x08006c83
 8006cc0:	08006c83 	.word	0x08006c83
 8006cc4:	08006c83 	.word	0x08006c83
 8006cc8:	08006c83 	.word	0x08006c83
 8006ccc:	08006c83 	.word	0x08006c83
 8006cd0:	08006c83 	.word	0x08006c83
 8006cd4:	08006dcf 	.word	0x08006dcf
 8006cd8:	08006da5 	.word	0x08006da5
 8006cdc:	08006d33 	.word	0x08006d33
 8006ce0:	08006d33 	.word	0x08006d33
 8006ce4:	08006d33 	.word	0x08006d33
 8006ce8:	08006c83 	.word	0x08006c83
 8006cec:	08006da9 	.word	0x08006da9
 8006cf0:	08006c83 	.word	0x08006c83
 8006cf4:	08006c83 	.word	0x08006c83
 8006cf8:	08006c83 	.word	0x08006c83
 8006cfc:	08006c83 	.word	0x08006c83
 8006d00:	08006ddf 	.word	0x08006ddf
 8006d04:	08006db1 	.word	0x08006db1
 8006d08:	08006d53 	.word	0x08006d53
 8006d0c:	08006c83 	.word	0x08006c83
 8006d10:	08006c83 	.word	0x08006c83
 8006d14:	08006ddb 	.word	0x08006ddb
 8006d18:	08006c83 	.word	0x08006c83
 8006d1c:	08006da5 	.word	0x08006da5
 8006d20:	08006c83 	.word	0x08006c83
 8006d24:	08006c83 	.word	0x08006c83
 8006d28:	08006d5b 	.word	0x08006d5b
 8006d2c:	3b45      	subs	r3, #69	; 0x45
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d8a7      	bhi.n	8006c82 <__ssvfiscanf_r+0xee>
 8006d32:	2305      	movs	r3, #5
 8006d34:	e01b      	b.n	8006d6e <__ssvfiscanf_r+0x1da>
 8006d36:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006d38:	4621      	mov	r1, r4
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	4798      	blx	r3
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	f43f af68 	beq.w	8006c14 <__ssvfiscanf_r+0x80>
 8006d44:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006d46:	2800      	cmp	r0, #0
 8006d48:	f040 808d 	bne.w	8006e66 <__ssvfiscanf_r+0x2d2>
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	e08f      	b.n	8006e72 <__ssvfiscanf_r+0x2de>
 8006d52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006d54:	f042 0220 	orr.w	r2, r2, #32
 8006d58:	9241      	str	r2, [sp, #260]	; 0x104
 8006d5a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d60:	9241      	str	r2, [sp, #260]	; 0x104
 8006d62:	2210      	movs	r2, #16
 8006d64:	2b6f      	cmp	r3, #111	; 0x6f
 8006d66:	9242      	str	r2, [sp, #264]	; 0x108
 8006d68:	bf34      	ite	cc
 8006d6a:	2303      	movcc	r3, #3
 8006d6c:	2304      	movcs	r3, #4
 8006d6e:	9347      	str	r3, [sp, #284]	; 0x11c
 8006d70:	6863      	ldr	r3, [r4, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	dd42      	ble.n	8006dfc <__ssvfiscanf_r+0x268>
 8006d76:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d78:	0659      	lsls	r1, r3, #25
 8006d7a:	d404      	bmi.n	8006d86 <__ssvfiscanf_r+0x1f2>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	781a      	ldrb	r2, [r3, #0]
 8006d80:	5cba      	ldrb	r2, [r7, r2]
 8006d82:	0712      	lsls	r2, r2, #28
 8006d84:	d441      	bmi.n	8006e0a <__ssvfiscanf_r+0x276>
 8006d86:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	dc50      	bgt.n	8006e2e <__ssvfiscanf_r+0x29a>
 8006d8c:	466b      	mov	r3, sp
 8006d8e:	4622      	mov	r2, r4
 8006d90:	a941      	add	r1, sp, #260	; 0x104
 8006d92:	4630      	mov	r0, r6
 8006d94:	f000 f876 	bl	8006e84 <_scanf_chars>
 8006d98:	2801      	cmp	r0, #1
 8006d9a:	d06e      	beq.n	8006e7a <__ssvfiscanf_r+0x2e6>
 8006d9c:	2802      	cmp	r0, #2
 8006d9e:	f47f af20 	bne.w	8006be2 <__ssvfiscanf_r+0x4e>
 8006da2:	e7cf      	b.n	8006d44 <__ssvfiscanf_r+0x1b0>
 8006da4:	220a      	movs	r2, #10
 8006da6:	e7dd      	b.n	8006d64 <__ssvfiscanf_r+0x1d0>
 8006da8:	2300      	movs	r3, #0
 8006daa:	9342      	str	r3, [sp, #264]	; 0x108
 8006dac:	2303      	movs	r3, #3
 8006dae:	e7de      	b.n	8006d6e <__ssvfiscanf_r+0x1da>
 8006db0:	2308      	movs	r3, #8
 8006db2:	9342      	str	r3, [sp, #264]	; 0x108
 8006db4:	2304      	movs	r3, #4
 8006db6:	e7da      	b.n	8006d6e <__ssvfiscanf_r+0x1da>
 8006db8:	4629      	mov	r1, r5
 8006dba:	4640      	mov	r0, r8
 8006dbc:	f000 f9c6 	bl	800714c <__sccl>
 8006dc0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dc6:	9341      	str	r3, [sp, #260]	; 0x104
 8006dc8:	4605      	mov	r5, r0
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e7cf      	b.n	8006d6e <__ssvfiscanf_r+0x1da>
 8006dce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dd4:	9341      	str	r3, [sp, #260]	; 0x104
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e7c9      	b.n	8006d6e <__ssvfiscanf_r+0x1da>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	e7c7      	b.n	8006d6e <__ssvfiscanf_r+0x1da>
 8006dde:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006de0:	06c3      	lsls	r3, r0, #27
 8006de2:	f53f aefe 	bmi.w	8006be2 <__ssvfiscanf_r+0x4e>
 8006de6:	9b00      	ldr	r3, [sp, #0]
 8006de8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006dea:	1d19      	adds	r1, r3, #4
 8006dec:	9100      	str	r1, [sp, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f010 0f01 	tst.w	r0, #1
 8006df4:	bf14      	ite	ne
 8006df6:	801a      	strhne	r2, [r3, #0]
 8006df8:	601a      	streq	r2, [r3, #0]
 8006dfa:	e6f2      	b.n	8006be2 <__ssvfiscanf_r+0x4e>
 8006dfc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006dfe:	4621      	mov	r1, r4
 8006e00:	4630      	mov	r0, r6
 8006e02:	4798      	blx	r3
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d0b6      	beq.n	8006d76 <__ssvfiscanf_r+0x1e2>
 8006e08:	e79c      	b.n	8006d44 <__ssvfiscanf_r+0x1b0>
 8006e0a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006e0c:	3201      	adds	r2, #1
 8006e0e:	9245      	str	r2, [sp, #276]	; 0x114
 8006e10:	6862      	ldr	r2, [r4, #4]
 8006e12:	3a01      	subs	r2, #1
 8006e14:	2a00      	cmp	r2, #0
 8006e16:	6062      	str	r2, [r4, #4]
 8006e18:	dd02      	ble.n	8006e20 <__ssvfiscanf_r+0x28c>
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	e7ad      	b.n	8006d7c <__ssvfiscanf_r+0x1e8>
 8006e20:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006e22:	4621      	mov	r1, r4
 8006e24:	4630      	mov	r0, r6
 8006e26:	4798      	blx	r3
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	d0a7      	beq.n	8006d7c <__ssvfiscanf_r+0x1e8>
 8006e2c:	e78a      	b.n	8006d44 <__ssvfiscanf_r+0x1b0>
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	dc0e      	bgt.n	8006e50 <__ssvfiscanf_r+0x2bc>
 8006e32:	466b      	mov	r3, sp
 8006e34:	4622      	mov	r2, r4
 8006e36:	a941      	add	r1, sp, #260	; 0x104
 8006e38:	4630      	mov	r0, r6
 8006e3a:	f000 f87d 	bl	8006f38 <_scanf_i>
 8006e3e:	e7ab      	b.n	8006d98 <__ssvfiscanf_r+0x204>
 8006e40:	08006ae1 	.word	0x08006ae1
 8006e44:	08006b5b 	.word	0x08006b5b
 8006e48:	08009335 	.word	0x08009335
 8006e4c:	080092d2 	.word	0x080092d2
 8006e50:	4b0b      	ldr	r3, [pc, #44]	; (8006e80 <__ssvfiscanf_r+0x2ec>)
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f43f aec5 	beq.w	8006be2 <__ssvfiscanf_r+0x4e>
 8006e58:	466b      	mov	r3, sp
 8006e5a:	4622      	mov	r2, r4
 8006e5c:	a941      	add	r1, sp, #260	; 0x104
 8006e5e:	4630      	mov	r0, r6
 8006e60:	f3af 8000 	nop.w
 8006e64:	e798      	b.n	8006d98 <__ssvfiscanf_r+0x204>
 8006e66:	89a3      	ldrh	r3, [r4, #12]
 8006e68:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e6c:	bf18      	it	ne
 8006e6e:	f04f 30ff 	movne.w	r0, #4294967295
 8006e72:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e7a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006e7c:	e7f9      	b.n	8006e72 <__ssvfiscanf_r+0x2de>
 8006e7e:	bf00      	nop
 8006e80:	00000000 	.word	0x00000000

08006e84 <_scanf_chars>:
 8006e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e88:	4615      	mov	r5, r2
 8006e8a:	688a      	ldr	r2, [r1, #8]
 8006e8c:	4680      	mov	r8, r0
 8006e8e:	460c      	mov	r4, r1
 8006e90:	b932      	cbnz	r2, 8006ea0 <_scanf_chars+0x1c>
 8006e92:	698a      	ldr	r2, [r1, #24]
 8006e94:	2a00      	cmp	r2, #0
 8006e96:	bf0c      	ite	eq
 8006e98:	2201      	moveq	r2, #1
 8006e9a:	f04f 32ff 	movne.w	r2, #4294967295
 8006e9e:	608a      	str	r2, [r1, #8]
 8006ea0:	6822      	ldr	r2, [r4, #0]
 8006ea2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006f34 <_scanf_chars+0xb0>
 8006ea6:	06d1      	lsls	r1, r2, #27
 8006ea8:	bf5f      	itttt	pl
 8006eaa:	681a      	ldrpl	r2, [r3, #0]
 8006eac:	1d11      	addpl	r1, r2, #4
 8006eae:	6019      	strpl	r1, [r3, #0]
 8006eb0:	6816      	ldrpl	r6, [r2, #0]
 8006eb2:	2700      	movs	r7, #0
 8006eb4:	69a0      	ldr	r0, [r4, #24]
 8006eb6:	b188      	cbz	r0, 8006edc <_scanf_chars+0x58>
 8006eb8:	2801      	cmp	r0, #1
 8006eba:	d107      	bne.n	8006ecc <_scanf_chars+0x48>
 8006ebc:	682a      	ldr	r2, [r5, #0]
 8006ebe:	7811      	ldrb	r1, [r2, #0]
 8006ec0:	6962      	ldr	r2, [r4, #20]
 8006ec2:	5c52      	ldrb	r2, [r2, r1]
 8006ec4:	b952      	cbnz	r2, 8006edc <_scanf_chars+0x58>
 8006ec6:	2f00      	cmp	r7, #0
 8006ec8:	d031      	beq.n	8006f2e <_scanf_chars+0xaa>
 8006eca:	e022      	b.n	8006f12 <_scanf_chars+0x8e>
 8006ecc:	2802      	cmp	r0, #2
 8006ece:	d120      	bne.n	8006f12 <_scanf_chars+0x8e>
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006ed8:	071b      	lsls	r3, r3, #28
 8006eda:	d41a      	bmi.n	8006f12 <_scanf_chars+0x8e>
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	06da      	lsls	r2, r3, #27
 8006ee0:	bf5e      	ittt	pl
 8006ee2:	682b      	ldrpl	r3, [r5, #0]
 8006ee4:	781b      	ldrbpl	r3, [r3, #0]
 8006ee6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006eea:	682a      	ldr	r2, [r5, #0]
 8006eec:	686b      	ldr	r3, [r5, #4]
 8006eee:	3201      	adds	r2, #1
 8006ef0:	602a      	str	r2, [r5, #0]
 8006ef2:	68a2      	ldr	r2, [r4, #8]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	3a01      	subs	r2, #1
 8006ef8:	606b      	str	r3, [r5, #4]
 8006efa:	3701      	adds	r7, #1
 8006efc:	60a2      	str	r2, [r4, #8]
 8006efe:	b142      	cbz	r2, 8006f12 <_scanf_chars+0x8e>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	dcd7      	bgt.n	8006eb4 <_scanf_chars+0x30>
 8006f04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	4798      	blx	r3
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d0d0      	beq.n	8006eb4 <_scanf_chars+0x30>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	f013 0310 	ands.w	r3, r3, #16
 8006f18:	d105      	bne.n	8006f26 <_scanf_chars+0xa2>
 8006f1a:	68e2      	ldr	r2, [r4, #12]
 8006f1c:	3201      	adds	r2, #1
 8006f1e:	60e2      	str	r2, [r4, #12]
 8006f20:	69a2      	ldr	r2, [r4, #24]
 8006f22:	b102      	cbz	r2, 8006f26 <_scanf_chars+0xa2>
 8006f24:	7033      	strb	r3, [r6, #0]
 8006f26:	6923      	ldr	r3, [r4, #16]
 8006f28:	443b      	add	r3, r7
 8006f2a:	6123      	str	r3, [r4, #16]
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f32:	bf00      	nop
 8006f34:	08009335 	.word	0x08009335

08006f38 <_scanf_i>:
 8006f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3c:	4698      	mov	r8, r3
 8006f3e:	4b76      	ldr	r3, [pc, #472]	; (8007118 <_scanf_i+0x1e0>)
 8006f40:	460c      	mov	r4, r1
 8006f42:	4682      	mov	sl, r0
 8006f44:	4616      	mov	r6, r2
 8006f46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	ab03      	add	r3, sp, #12
 8006f4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006f52:	4b72      	ldr	r3, [pc, #456]	; (800711c <_scanf_i+0x1e4>)
 8006f54:	69a1      	ldr	r1, [r4, #24]
 8006f56:	4a72      	ldr	r2, [pc, #456]	; (8007120 <_scanf_i+0x1e8>)
 8006f58:	2903      	cmp	r1, #3
 8006f5a:	bf18      	it	ne
 8006f5c:	461a      	movne	r2, r3
 8006f5e:	68a3      	ldr	r3, [r4, #8]
 8006f60:	9201      	str	r2, [sp, #4]
 8006f62:	1e5a      	subs	r2, r3, #1
 8006f64:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006f68:	bf88      	it	hi
 8006f6a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006f6e:	4627      	mov	r7, r4
 8006f70:	bf82      	ittt	hi
 8006f72:	eb03 0905 	addhi.w	r9, r3, r5
 8006f76:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006f7a:	60a3      	strhi	r3, [r4, #8]
 8006f7c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006f80:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006f84:	bf98      	it	ls
 8006f86:	f04f 0900 	movls.w	r9, #0
 8006f8a:	6023      	str	r3, [r4, #0]
 8006f8c:	463d      	mov	r5, r7
 8006f8e:	f04f 0b00 	mov.w	fp, #0
 8006f92:	6831      	ldr	r1, [r6, #0]
 8006f94:	ab03      	add	r3, sp, #12
 8006f96:	7809      	ldrb	r1, [r1, #0]
 8006f98:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f7f9 f937 	bl	8000210 <memchr>
 8006fa2:	b328      	cbz	r0, 8006ff0 <_scanf_i+0xb8>
 8006fa4:	f1bb 0f01 	cmp.w	fp, #1
 8006fa8:	d159      	bne.n	800705e <_scanf_i+0x126>
 8006faa:	6862      	ldr	r2, [r4, #4]
 8006fac:	b92a      	cbnz	r2, 8006fba <_scanf_i+0x82>
 8006fae:	6822      	ldr	r2, [r4, #0]
 8006fb0:	2308      	movs	r3, #8
 8006fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fb6:	6063      	str	r3, [r4, #4]
 8006fb8:	6022      	str	r2, [r4, #0]
 8006fba:	6822      	ldr	r2, [r4, #0]
 8006fbc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006fc0:	6022      	str	r2, [r4, #0]
 8006fc2:	68a2      	ldr	r2, [r4, #8]
 8006fc4:	1e51      	subs	r1, r2, #1
 8006fc6:	60a1      	str	r1, [r4, #8]
 8006fc8:	b192      	cbz	r2, 8006ff0 <_scanf_i+0xb8>
 8006fca:	6832      	ldr	r2, [r6, #0]
 8006fcc:	1c51      	adds	r1, r2, #1
 8006fce:	6031      	str	r1, [r6, #0]
 8006fd0:	7812      	ldrb	r2, [r2, #0]
 8006fd2:	f805 2b01 	strb.w	r2, [r5], #1
 8006fd6:	6872      	ldr	r2, [r6, #4]
 8006fd8:	3a01      	subs	r2, #1
 8006fda:	2a00      	cmp	r2, #0
 8006fdc:	6072      	str	r2, [r6, #4]
 8006fde:	dc07      	bgt.n	8006ff0 <_scanf_i+0xb8>
 8006fe0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4650      	mov	r0, sl
 8006fe8:	4790      	blx	r2
 8006fea:	2800      	cmp	r0, #0
 8006fec:	f040 8085 	bne.w	80070fa <_scanf_i+0x1c2>
 8006ff0:	f10b 0b01 	add.w	fp, fp, #1
 8006ff4:	f1bb 0f03 	cmp.w	fp, #3
 8006ff8:	d1cb      	bne.n	8006f92 <_scanf_i+0x5a>
 8006ffa:	6863      	ldr	r3, [r4, #4]
 8006ffc:	b90b      	cbnz	r3, 8007002 <_scanf_i+0xca>
 8006ffe:	230a      	movs	r3, #10
 8007000:	6063      	str	r3, [r4, #4]
 8007002:	6863      	ldr	r3, [r4, #4]
 8007004:	4947      	ldr	r1, [pc, #284]	; (8007124 <_scanf_i+0x1ec>)
 8007006:	6960      	ldr	r0, [r4, #20]
 8007008:	1ac9      	subs	r1, r1, r3
 800700a:	f000 f89f 	bl	800714c <__sccl>
 800700e:	f04f 0b00 	mov.w	fp, #0
 8007012:	68a3      	ldr	r3, [r4, #8]
 8007014:	6822      	ldr	r2, [r4, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d03d      	beq.n	8007096 <_scanf_i+0x15e>
 800701a:	6831      	ldr	r1, [r6, #0]
 800701c:	6960      	ldr	r0, [r4, #20]
 800701e:	f891 c000 	ldrb.w	ip, [r1]
 8007022:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007026:	2800      	cmp	r0, #0
 8007028:	d035      	beq.n	8007096 <_scanf_i+0x15e>
 800702a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800702e:	d124      	bne.n	800707a <_scanf_i+0x142>
 8007030:	0510      	lsls	r0, r2, #20
 8007032:	d522      	bpl.n	800707a <_scanf_i+0x142>
 8007034:	f10b 0b01 	add.w	fp, fp, #1
 8007038:	f1b9 0f00 	cmp.w	r9, #0
 800703c:	d003      	beq.n	8007046 <_scanf_i+0x10e>
 800703e:	3301      	adds	r3, #1
 8007040:	f109 39ff 	add.w	r9, r9, #4294967295
 8007044:	60a3      	str	r3, [r4, #8]
 8007046:	6873      	ldr	r3, [r6, #4]
 8007048:	3b01      	subs	r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	6073      	str	r3, [r6, #4]
 800704e:	dd1b      	ble.n	8007088 <_scanf_i+0x150>
 8007050:	6833      	ldr	r3, [r6, #0]
 8007052:	3301      	adds	r3, #1
 8007054:	6033      	str	r3, [r6, #0]
 8007056:	68a3      	ldr	r3, [r4, #8]
 8007058:	3b01      	subs	r3, #1
 800705a:	60a3      	str	r3, [r4, #8]
 800705c:	e7d9      	b.n	8007012 <_scanf_i+0xda>
 800705e:	f1bb 0f02 	cmp.w	fp, #2
 8007062:	d1ae      	bne.n	8006fc2 <_scanf_i+0x8a>
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800706a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800706e:	d1bf      	bne.n	8006ff0 <_scanf_i+0xb8>
 8007070:	2310      	movs	r3, #16
 8007072:	6063      	str	r3, [r4, #4]
 8007074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007078:	e7a2      	b.n	8006fc0 <_scanf_i+0x88>
 800707a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800707e:	6022      	str	r2, [r4, #0]
 8007080:	780b      	ldrb	r3, [r1, #0]
 8007082:	f805 3b01 	strb.w	r3, [r5], #1
 8007086:	e7de      	b.n	8007046 <_scanf_i+0x10e>
 8007088:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800708c:	4631      	mov	r1, r6
 800708e:	4650      	mov	r0, sl
 8007090:	4798      	blx	r3
 8007092:	2800      	cmp	r0, #0
 8007094:	d0df      	beq.n	8007056 <_scanf_i+0x11e>
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	05db      	lsls	r3, r3, #23
 800709a:	d50d      	bpl.n	80070b8 <_scanf_i+0x180>
 800709c:	42bd      	cmp	r5, r7
 800709e:	d909      	bls.n	80070b4 <_scanf_i+0x17c>
 80070a0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80070a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070a8:	4632      	mov	r2, r6
 80070aa:	4650      	mov	r0, sl
 80070ac:	4798      	blx	r3
 80070ae:	f105 39ff 	add.w	r9, r5, #4294967295
 80070b2:	464d      	mov	r5, r9
 80070b4:	42bd      	cmp	r5, r7
 80070b6:	d02d      	beq.n	8007114 <_scanf_i+0x1dc>
 80070b8:	6822      	ldr	r2, [r4, #0]
 80070ba:	f012 0210 	ands.w	r2, r2, #16
 80070be:	d113      	bne.n	80070e8 <_scanf_i+0x1b0>
 80070c0:	702a      	strb	r2, [r5, #0]
 80070c2:	6863      	ldr	r3, [r4, #4]
 80070c4:	9e01      	ldr	r6, [sp, #4]
 80070c6:	4639      	mov	r1, r7
 80070c8:	4650      	mov	r0, sl
 80070ca:	47b0      	blx	r6
 80070cc:	6821      	ldr	r1, [r4, #0]
 80070ce:	f8d8 3000 	ldr.w	r3, [r8]
 80070d2:	f011 0f20 	tst.w	r1, #32
 80070d6:	d013      	beq.n	8007100 <_scanf_i+0x1c8>
 80070d8:	1d1a      	adds	r2, r3, #4
 80070da:	f8c8 2000 	str.w	r2, [r8]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6018      	str	r0, [r3, #0]
 80070e2:	68e3      	ldr	r3, [r4, #12]
 80070e4:	3301      	adds	r3, #1
 80070e6:	60e3      	str	r3, [r4, #12]
 80070e8:	1bed      	subs	r5, r5, r7
 80070ea:	44ab      	add	fp, r5
 80070ec:	6925      	ldr	r5, [r4, #16]
 80070ee:	445d      	add	r5, fp
 80070f0:	6125      	str	r5, [r4, #16]
 80070f2:	2000      	movs	r0, #0
 80070f4:	b007      	add	sp, #28
 80070f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070fa:	f04f 0b00 	mov.w	fp, #0
 80070fe:	e7ca      	b.n	8007096 <_scanf_i+0x15e>
 8007100:	1d1a      	adds	r2, r3, #4
 8007102:	f8c8 2000 	str.w	r2, [r8]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f011 0f01 	tst.w	r1, #1
 800710c:	bf14      	ite	ne
 800710e:	8018      	strhne	r0, [r3, #0]
 8007110:	6018      	streq	r0, [r3, #0]
 8007112:	e7e6      	b.n	80070e2 <_scanf_i+0x1aa>
 8007114:	2001      	movs	r0, #1
 8007116:	e7ed      	b.n	80070f4 <_scanf_i+0x1bc>
 8007118:	0800909c 	.word	0x0800909c
 800711c:	080073a9 	.word	0x080073a9
 8007120:	080072c1 	.word	0x080072c1
 8007124:	080092f6 	.word	0x080092f6

08007128 <_read_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4d07      	ldr	r5, [pc, #28]	; (8007148 <_read_r+0x20>)
 800712c:	4604      	mov	r4, r0
 800712e:	4608      	mov	r0, r1
 8007130:	4611      	mov	r1, r2
 8007132:	2200      	movs	r2, #0
 8007134:	602a      	str	r2, [r5, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	f7fa f82c 	bl	8001194 <_read>
 800713c:	1c43      	adds	r3, r0, #1
 800713e:	d102      	bne.n	8007146 <_read_r+0x1e>
 8007140:	682b      	ldr	r3, [r5, #0]
 8007142:	b103      	cbz	r3, 8007146 <_read_r+0x1e>
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	bd38      	pop	{r3, r4, r5, pc}
 8007148:	20000a74 	.word	0x20000a74

0800714c <__sccl>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	780b      	ldrb	r3, [r1, #0]
 8007150:	4604      	mov	r4, r0
 8007152:	2b5e      	cmp	r3, #94	; 0x5e
 8007154:	bf0b      	itete	eq
 8007156:	784b      	ldrbeq	r3, [r1, #1]
 8007158:	1c48      	addne	r0, r1, #1
 800715a:	1c88      	addeq	r0, r1, #2
 800715c:	2200      	movne	r2, #0
 800715e:	bf08      	it	eq
 8007160:	2201      	moveq	r2, #1
 8007162:	1e61      	subs	r1, r4, #1
 8007164:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007168:	f801 2f01 	strb.w	r2, [r1, #1]!
 800716c:	42a9      	cmp	r1, r5
 800716e:	d1fb      	bne.n	8007168 <__sccl+0x1c>
 8007170:	b90b      	cbnz	r3, 8007176 <__sccl+0x2a>
 8007172:	3801      	subs	r0, #1
 8007174:	bd70      	pop	{r4, r5, r6, pc}
 8007176:	f082 0201 	eor.w	r2, r2, #1
 800717a:	54e2      	strb	r2, [r4, r3]
 800717c:	4605      	mov	r5, r0
 800717e:	4628      	mov	r0, r5
 8007180:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007184:	292d      	cmp	r1, #45	; 0x2d
 8007186:	d006      	beq.n	8007196 <__sccl+0x4a>
 8007188:	295d      	cmp	r1, #93	; 0x5d
 800718a:	d0f3      	beq.n	8007174 <__sccl+0x28>
 800718c:	b909      	cbnz	r1, 8007192 <__sccl+0x46>
 800718e:	4628      	mov	r0, r5
 8007190:	e7f0      	b.n	8007174 <__sccl+0x28>
 8007192:	460b      	mov	r3, r1
 8007194:	e7f1      	b.n	800717a <__sccl+0x2e>
 8007196:	786e      	ldrb	r6, [r5, #1]
 8007198:	2e5d      	cmp	r6, #93	; 0x5d
 800719a:	d0fa      	beq.n	8007192 <__sccl+0x46>
 800719c:	42b3      	cmp	r3, r6
 800719e:	dcf8      	bgt.n	8007192 <__sccl+0x46>
 80071a0:	3502      	adds	r5, #2
 80071a2:	4619      	mov	r1, r3
 80071a4:	3101      	adds	r1, #1
 80071a6:	428e      	cmp	r6, r1
 80071a8:	5462      	strb	r2, [r4, r1]
 80071aa:	dcfb      	bgt.n	80071a4 <__sccl+0x58>
 80071ac:	1af1      	subs	r1, r6, r3
 80071ae:	3901      	subs	r1, #1
 80071b0:	1c58      	adds	r0, r3, #1
 80071b2:	42b3      	cmp	r3, r6
 80071b4:	bfa8      	it	ge
 80071b6:	2100      	movge	r1, #0
 80071b8:	1843      	adds	r3, r0, r1
 80071ba:	e7e0      	b.n	800717e <__sccl+0x32>

080071bc <_strtol_l.constprop.0>:
 80071bc:	2b01      	cmp	r3, #1
 80071be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c2:	d001      	beq.n	80071c8 <_strtol_l.constprop.0+0xc>
 80071c4:	2b24      	cmp	r3, #36	; 0x24
 80071c6:	d906      	bls.n	80071d6 <_strtol_l.constprop.0+0x1a>
 80071c8:	f7fd faa2 	bl	8004710 <__errno>
 80071cc:	2316      	movs	r3, #22
 80071ce:	6003      	str	r3, [r0, #0]
 80071d0:	2000      	movs	r0, #0
 80071d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80072bc <_strtol_l.constprop.0+0x100>
 80071da:	460d      	mov	r5, r1
 80071dc:	462e      	mov	r6, r5
 80071de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071e2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80071e6:	f017 0708 	ands.w	r7, r7, #8
 80071ea:	d1f7      	bne.n	80071dc <_strtol_l.constprop.0+0x20>
 80071ec:	2c2d      	cmp	r4, #45	; 0x2d
 80071ee:	d132      	bne.n	8007256 <_strtol_l.constprop.0+0x9a>
 80071f0:	782c      	ldrb	r4, [r5, #0]
 80071f2:	2701      	movs	r7, #1
 80071f4:	1cb5      	adds	r5, r6, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d05b      	beq.n	80072b2 <_strtol_l.constprop.0+0xf6>
 80071fa:	2b10      	cmp	r3, #16
 80071fc:	d109      	bne.n	8007212 <_strtol_l.constprop.0+0x56>
 80071fe:	2c30      	cmp	r4, #48	; 0x30
 8007200:	d107      	bne.n	8007212 <_strtol_l.constprop.0+0x56>
 8007202:	782c      	ldrb	r4, [r5, #0]
 8007204:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007208:	2c58      	cmp	r4, #88	; 0x58
 800720a:	d14d      	bne.n	80072a8 <_strtol_l.constprop.0+0xec>
 800720c:	786c      	ldrb	r4, [r5, #1]
 800720e:	2310      	movs	r3, #16
 8007210:	3502      	adds	r5, #2
 8007212:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007216:	f108 38ff 	add.w	r8, r8, #4294967295
 800721a:	f04f 0c00 	mov.w	ip, #0
 800721e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007222:	4666      	mov	r6, ip
 8007224:	fb03 8a19 	mls	sl, r3, r9, r8
 8007228:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800722c:	f1be 0f09 	cmp.w	lr, #9
 8007230:	d816      	bhi.n	8007260 <_strtol_l.constprop.0+0xa4>
 8007232:	4674      	mov	r4, lr
 8007234:	42a3      	cmp	r3, r4
 8007236:	dd24      	ble.n	8007282 <_strtol_l.constprop.0+0xc6>
 8007238:	f1bc 0f00 	cmp.w	ip, #0
 800723c:	db1e      	blt.n	800727c <_strtol_l.constprop.0+0xc0>
 800723e:	45b1      	cmp	r9, r6
 8007240:	d31c      	bcc.n	800727c <_strtol_l.constprop.0+0xc0>
 8007242:	d101      	bne.n	8007248 <_strtol_l.constprop.0+0x8c>
 8007244:	45a2      	cmp	sl, r4
 8007246:	db19      	blt.n	800727c <_strtol_l.constprop.0+0xc0>
 8007248:	fb06 4603 	mla	r6, r6, r3, r4
 800724c:	f04f 0c01 	mov.w	ip, #1
 8007250:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007254:	e7e8      	b.n	8007228 <_strtol_l.constprop.0+0x6c>
 8007256:	2c2b      	cmp	r4, #43	; 0x2b
 8007258:	bf04      	itt	eq
 800725a:	782c      	ldrbeq	r4, [r5, #0]
 800725c:	1cb5      	addeq	r5, r6, #2
 800725e:	e7ca      	b.n	80071f6 <_strtol_l.constprop.0+0x3a>
 8007260:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007264:	f1be 0f19 	cmp.w	lr, #25
 8007268:	d801      	bhi.n	800726e <_strtol_l.constprop.0+0xb2>
 800726a:	3c37      	subs	r4, #55	; 0x37
 800726c:	e7e2      	b.n	8007234 <_strtol_l.constprop.0+0x78>
 800726e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007272:	f1be 0f19 	cmp.w	lr, #25
 8007276:	d804      	bhi.n	8007282 <_strtol_l.constprop.0+0xc6>
 8007278:	3c57      	subs	r4, #87	; 0x57
 800727a:	e7db      	b.n	8007234 <_strtol_l.constprop.0+0x78>
 800727c:	f04f 3cff 	mov.w	ip, #4294967295
 8007280:	e7e6      	b.n	8007250 <_strtol_l.constprop.0+0x94>
 8007282:	f1bc 0f00 	cmp.w	ip, #0
 8007286:	da05      	bge.n	8007294 <_strtol_l.constprop.0+0xd8>
 8007288:	2322      	movs	r3, #34	; 0x22
 800728a:	6003      	str	r3, [r0, #0]
 800728c:	4646      	mov	r6, r8
 800728e:	b942      	cbnz	r2, 80072a2 <_strtol_l.constprop.0+0xe6>
 8007290:	4630      	mov	r0, r6
 8007292:	e79e      	b.n	80071d2 <_strtol_l.constprop.0+0x16>
 8007294:	b107      	cbz	r7, 8007298 <_strtol_l.constprop.0+0xdc>
 8007296:	4276      	negs	r6, r6
 8007298:	2a00      	cmp	r2, #0
 800729a:	d0f9      	beq.n	8007290 <_strtol_l.constprop.0+0xd4>
 800729c:	f1bc 0f00 	cmp.w	ip, #0
 80072a0:	d000      	beq.n	80072a4 <_strtol_l.constprop.0+0xe8>
 80072a2:	1e69      	subs	r1, r5, #1
 80072a4:	6011      	str	r1, [r2, #0]
 80072a6:	e7f3      	b.n	8007290 <_strtol_l.constprop.0+0xd4>
 80072a8:	2430      	movs	r4, #48	; 0x30
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1b1      	bne.n	8007212 <_strtol_l.constprop.0+0x56>
 80072ae:	2308      	movs	r3, #8
 80072b0:	e7af      	b.n	8007212 <_strtol_l.constprop.0+0x56>
 80072b2:	2c30      	cmp	r4, #48	; 0x30
 80072b4:	d0a5      	beq.n	8007202 <_strtol_l.constprop.0+0x46>
 80072b6:	230a      	movs	r3, #10
 80072b8:	e7ab      	b.n	8007212 <_strtol_l.constprop.0+0x56>
 80072ba:	bf00      	nop
 80072bc:	08009335 	.word	0x08009335

080072c0 <_strtol_r>:
 80072c0:	f7ff bf7c 	b.w	80071bc <_strtol_l.constprop.0>

080072c4 <_strtoul_l.constprop.0>:
 80072c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072c8:	4f36      	ldr	r7, [pc, #216]	; (80073a4 <_strtoul_l.constprop.0+0xe0>)
 80072ca:	4686      	mov	lr, r0
 80072cc:	460d      	mov	r5, r1
 80072ce:	4628      	mov	r0, r5
 80072d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072d4:	5de6      	ldrb	r6, [r4, r7]
 80072d6:	f016 0608 	ands.w	r6, r6, #8
 80072da:	d1f8      	bne.n	80072ce <_strtoul_l.constprop.0+0xa>
 80072dc:	2c2d      	cmp	r4, #45	; 0x2d
 80072de:	d12f      	bne.n	8007340 <_strtoul_l.constprop.0+0x7c>
 80072e0:	782c      	ldrb	r4, [r5, #0]
 80072e2:	2601      	movs	r6, #1
 80072e4:	1c85      	adds	r5, r0, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d057      	beq.n	800739a <_strtoul_l.constprop.0+0xd6>
 80072ea:	2b10      	cmp	r3, #16
 80072ec:	d109      	bne.n	8007302 <_strtoul_l.constprop.0+0x3e>
 80072ee:	2c30      	cmp	r4, #48	; 0x30
 80072f0:	d107      	bne.n	8007302 <_strtoul_l.constprop.0+0x3e>
 80072f2:	7828      	ldrb	r0, [r5, #0]
 80072f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80072f8:	2858      	cmp	r0, #88	; 0x58
 80072fa:	d149      	bne.n	8007390 <_strtoul_l.constprop.0+0xcc>
 80072fc:	786c      	ldrb	r4, [r5, #1]
 80072fe:	2310      	movs	r3, #16
 8007300:	3502      	adds	r5, #2
 8007302:	f04f 38ff 	mov.w	r8, #4294967295
 8007306:	2700      	movs	r7, #0
 8007308:	fbb8 f8f3 	udiv	r8, r8, r3
 800730c:	fb03 f908 	mul.w	r9, r3, r8
 8007310:	ea6f 0909 	mvn.w	r9, r9
 8007314:	4638      	mov	r0, r7
 8007316:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800731a:	f1bc 0f09 	cmp.w	ip, #9
 800731e:	d814      	bhi.n	800734a <_strtoul_l.constprop.0+0x86>
 8007320:	4664      	mov	r4, ip
 8007322:	42a3      	cmp	r3, r4
 8007324:	dd22      	ble.n	800736c <_strtoul_l.constprop.0+0xa8>
 8007326:	2f00      	cmp	r7, #0
 8007328:	db1d      	blt.n	8007366 <_strtoul_l.constprop.0+0xa2>
 800732a:	4580      	cmp	r8, r0
 800732c:	d31b      	bcc.n	8007366 <_strtoul_l.constprop.0+0xa2>
 800732e:	d101      	bne.n	8007334 <_strtoul_l.constprop.0+0x70>
 8007330:	45a1      	cmp	r9, r4
 8007332:	db18      	blt.n	8007366 <_strtoul_l.constprop.0+0xa2>
 8007334:	fb00 4003 	mla	r0, r0, r3, r4
 8007338:	2701      	movs	r7, #1
 800733a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800733e:	e7ea      	b.n	8007316 <_strtoul_l.constprop.0+0x52>
 8007340:	2c2b      	cmp	r4, #43	; 0x2b
 8007342:	bf04      	itt	eq
 8007344:	782c      	ldrbeq	r4, [r5, #0]
 8007346:	1c85      	addeq	r5, r0, #2
 8007348:	e7cd      	b.n	80072e6 <_strtoul_l.constprop.0+0x22>
 800734a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800734e:	f1bc 0f19 	cmp.w	ip, #25
 8007352:	d801      	bhi.n	8007358 <_strtoul_l.constprop.0+0x94>
 8007354:	3c37      	subs	r4, #55	; 0x37
 8007356:	e7e4      	b.n	8007322 <_strtoul_l.constprop.0+0x5e>
 8007358:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800735c:	f1bc 0f19 	cmp.w	ip, #25
 8007360:	d804      	bhi.n	800736c <_strtoul_l.constprop.0+0xa8>
 8007362:	3c57      	subs	r4, #87	; 0x57
 8007364:	e7dd      	b.n	8007322 <_strtoul_l.constprop.0+0x5e>
 8007366:	f04f 37ff 	mov.w	r7, #4294967295
 800736a:	e7e6      	b.n	800733a <_strtoul_l.constprop.0+0x76>
 800736c:	2f00      	cmp	r7, #0
 800736e:	da07      	bge.n	8007380 <_strtoul_l.constprop.0+0xbc>
 8007370:	2322      	movs	r3, #34	; 0x22
 8007372:	f8ce 3000 	str.w	r3, [lr]
 8007376:	f04f 30ff 	mov.w	r0, #4294967295
 800737a:	b932      	cbnz	r2, 800738a <_strtoul_l.constprop.0+0xc6>
 800737c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007380:	b106      	cbz	r6, 8007384 <_strtoul_l.constprop.0+0xc0>
 8007382:	4240      	negs	r0, r0
 8007384:	2a00      	cmp	r2, #0
 8007386:	d0f9      	beq.n	800737c <_strtoul_l.constprop.0+0xb8>
 8007388:	b107      	cbz	r7, 800738c <_strtoul_l.constprop.0+0xc8>
 800738a:	1e69      	subs	r1, r5, #1
 800738c:	6011      	str	r1, [r2, #0]
 800738e:	e7f5      	b.n	800737c <_strtoul_l.constprop.0+0xb8>
 8007390:	2430      	movs	r4, #48	; 0x30
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1b5      	bne.n	8007302 <_strtoul_l.constprop.0+0x3e>
 8007396:	2308      	movs	r3, #8
 8007398:	e7b3      	b.n	8007302 <_strtoul_l.constprop.0+0x3e>
 800739a:	2c30      	cmp	r4, #48	; 0x30
 800739c:	d0a9      	beq.n	80072f2 <_strtoul_l.constprop.0+0x2e>
 800739e:	230a      	movs	r3, #10
 80073a0:	e7af      	b.n	8007302 <_strtoul_l.constprop.0+0x3e>
 80073a2:	bf00      	nop
 80073a4:	08009335 	.word	0x08009335

080073a8 <_strtoul_r>:
 80073a8:	f7ff bf8c 	b.w	80072c4 <_strtoul_l.constprop.0>

080073ac <__submore>:
 80073ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b0:	460c      	mov	r4, r1
 80073b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80073b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073b8:	4299      	cmp	r1, r3
 80073ba:	d11d      	bne.n	80073f8 <__submore+0x4c>
 80073bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073c0:	f7fd fa4c 	bl	800485c <_malloc_r>
 80073c4:	b918      	cbnz	r0, 80073ce <__submore+0x22>
 80073c6:	f04f 30ff 	mov.w	r0, #4294967295
 80073ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80073d4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80073d8:	6360      	str	r0, [r4, #52]	; 0x34
 80073da:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80073de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80073e2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80073e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80073ea:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80073ee:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80073f2:	6020      	str	r0, [r4, #0]
 80073f4:	2000      	movs	r0, #0
 80073f6:	e7e8      	b.n	80073ca <__submore+0x1e>
 80073f8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80073fa:	0077      	lsls	r7, r6, #1
 80073fc:	463a      	mov	r2, r7
 80073fe:	f000 fa25 	bl	800784c <_realloc_r>
 8007402:	4605      	mov	r5, r0
 8007404:	2800      	cmp	r0, #0
 8007406:	d0de      	beq.n	80073c6 <__submore+0x1a>
 8007408:	eb00 0806 	add.w	r8, r0, r6
 800740c:	4601      	mov	r1, r0
 800740e:	4632      	mov	r2, r6
 8007410:	4640      	mov	r0, r8
 8007412:	f7fe fe55 	bl	80060c0 <memcpy>
 8007416:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800741a:	f8c4 8000 	str.w	r8, [r4]
 800741e:	e7e9      	b.n	80073f4 <__submore+0x48>

08007420 <__assert_func>:
 8007420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007422:	4614      	mov	r4, r2
 8007424:	461a      	mov	r2, r3
 8007426:	4b09      	ldr	r3, [pc, #36]	; (800744c <__assert_func+0x2c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4605      	mov	r5, r0
 800742c:	68d8      	ldr	r0, [r3, #12]
 800742e:	b14c      	cbz	r4, 8007444 <__assert_func+0x24>
 8007430:	4b07      	ldr	r3, [pc, #28]	; (8007450 <__assert_func+0x30>)
 8007432:	9100      	str	r1, [sp, #0]
 8007434:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007438:	4906      	ldr	r1, [pc, #24]	; (8007454 <__assert_func+0x34>)
 800743a:	462b      	mov	r3, r5
 800743c:	f000 f9a6 	bl	800778c <fiprintf>
 8007440:	f000 fc5a 	bl	8007cf8 <abort>
 8007444:	4b04      	ldr	r3, [pc, #16]	; (8007458 <__assert_func+0x38>)
 8007446:	461c      	mov	r4, r3
 8007448:	e7f3      	b.n	8007432 <__assert_func+0x12>
 800744a:	bf00      	nop
 800744c:	20000008 	.word	0x20000008
 8007450:	080092f8 	.word	0x080092f8
 8007454:	08009305 	.word	0x08009305
 8007458:	08009333 	.word	0x08009333

0800745c <__sflush_r>:
 800745c:	898a      	ldrh	r2, [r1, #12]
 800745e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007462:	4605      	mov	r5, r0
 8007464:	0710      	lsls	r0, r2, #28
 8007466:	460c      	mov	r4, r1
 8007468:	d458      	bmi.n	800751c <__sflush_r+0xc0>
 800746a:	684b      	ldr	r3, [r1, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	dc05      	bgt.n	800747c <__sflush_r+0x20>
 8007470:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007472:	2b00      	cmp	r3, #0
 8007474:	dc02      	bgt.n	800747c <__sflush_r+0x20>
 8007476:	2000      	movs	r0, #0
 8007478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800747c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800747e:	2e00      	cmp	r6, #0
 8007480:	d0f9      	beq.n	8007476 <__sflush_r+0x1a>
 8007482:	2300      	movs	r3, #0
 8007484:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007488:	682f      	ldr	r7, [r5, #0]
 800748a:	602b      	str	r3, [r5, #0]
 800748c:	d032      	beq.n	80074f4 <__sflush_r+0x98>
 800748e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007490:	89a3      	ldrh	r3, [r4, #12]
 8007492:	075a      	lsls	r2, r3, #29
 8007494:	d505      	bpl.n	80074a2 <__sflush_r+0x46>
 8007496:	6863      	ldr	r3, [r4, #4]
 8007498:	1ac0      	subs	r0, r0, r3
 800749a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800749c:	b10b      	cbz	r3, 80074a2 <__sflush_r+0x46>
 800749e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074a0:	1ac0      	subs	r0, r0, r3
 80074a2:	2300      	movs	r3, #0
 80074a4:	4602      	mov	r2, r0
 80074a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074a8:	6a21      	ldr	r1, [r4, #32]
 80074aa:	4628      	mov	r0, r5
 80074ac:	47b0      	blx	r6
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	d106      	bne.n	80074c2 <__sflush_r+0x66>
 80074b4:	6829      	ldr	r1, [r5, #0]
 80074b6:	291d      	cmp	r1, #29
 80074b8:	d82c      	bhi.n	8007514 <__sflush_r+0xb8>
 80074ba:	4a2a      	ldr	r2, [pc, #168]	; (8007564 <__sflush_r+0x108>)
 80074bc:	40ca      	lsrs	r2, r1
 80074be:	07d6      	lsls	r6, r2, #31
 80074c0:	d528      	bpl.n	8007514 <__sflush_r+0xb8>
 80074c2:	2200      	movs	r2, #0
 80074c4:	6062      	str	r2, [r4, #4]
 80074c6:	04d9      	lsls	r1, r3, #19
 80074c8:	6922      	ldr	r2, [r4, #16]
 80074ca:	6022      	str	r2, [r4, #0]
 80074cc:	d504      	bpl.n	80074d8 <__sflush_r+0x7c>
 80074ce:	1c42      	adds	r2, r0, #1
 80074d0:	d101      	bne.n	80074d6 <__sflush_r+0x7a>
 80074d2:	682b      	ldr	r3, [r5, #0]
 80074d4:	b903      	cbnz	r3, 80074d8 <__sflush_r+0x7c>
 80074d6:	6560      	str	r0, [r4, #84]	; 0x54
 80074d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074da:	602f      	str	r7, [r5, #0]
 80074dc:	2900      	cmp	r1, #0
 80074de:	d0ca      	beq.n	8007476 <__sflush_r+0x1a>
 80074e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074e4:	4299      	cmp	r1, r3
 80074e6:	d002      	beq.n	80074ee <__sflush_r+0x92>
 80074e8:	4628      	mov	r0, r5
 80074ea:	f7fd f94b 	bl	8004784 <_free_r>
 80074ee:	2000      	movs	r0, #0
 80074f0:	6360      	str	r0, [r4, #52]	; 0x34
 80074f2:	e7c1      	b.n	8007478 <__sflush_r+0x1c>
 80074f4:	6a21      	ldr	r1, [r4, #32]
 80074f6:	2301      	movs	r3, #1
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b0      	blx	r6
 80074fc:	1c41      	adds	r1, r0, #1
 80074fe:	d1c7      	bne.n	8007490 <__sflush_r+0x34>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0c4      	beq.n	8007490 <__sflush_r+0x34>
 8007506:	2b1d      	cmp	r3, #29
 8007508:	d001      	beq.n	800750e <__sflush_r+0xb2>
 800750a:	2b16      	cmp	r3, #22
 800750c:	d101      	bne.n	8007512 <__sflush_r+0xb6>
 800750e:	602f      	str	r7, [r5, #0]
 8007510:	e7b1      	b.n	8007476 <__sflush_r+0x1a>
 8007512:	89a3      	ldrh	r3, [r4, #12]
 8007514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007518:	81a3      	strh	r3, [r4, #12]
 800751a:	e7ad      	b.n	8007478 <__sflush_r+0x1c>
 800751c:	690f      	ldr	r7, [r1, #16]
 800751e:	2f00      	cmp	r7, #0
 8007520:	d0a9      	beq.n	8007476 <__sflush_r+0x1a>
 8007522:	0793      	lsls	r3, r2, #30
 8007524:	680e      	ldr	r6, [r1, #0]
 8007526:	bf08      	it	eq
 8007528:	694b      	ldreq	r3, [r1, #20]
 800752a:	600f      	str	r7, [r1, #0]
 800752c:	bf18      	it	ne
 800752e:	2300      	movne	r3, #0
 8007530:	eba6 0807 	sub.w	r8, r6, r7
 8007534:	608b      	str	r3, [r1, #8]
 8007536:	f1b8 0f00 	cmp.w	r8, #0
 800753a:	dd9c      	ble.n	8007476 <__sflush_r+0x1a>
 800753c:	6a21      	ldr	r1, [r4, #32]
 800753e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007540:	4643      	mov	r3, r8
 8007542:	463a      	mov	r2, r7
 8007544:	4628      	mov	r0, r5
 8007546:	47b0      	blx	r6
 8007548:	2800      	cmp	r0, #0
 800754a:	dc06      	bgt.n	800755a <__sflush_r+0xfe>
 800754c:	89a3      	ldrh	r3, [r4, #12]
 800754e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007552:	81a3      	strh	r3, [r4, #12]
 8007554:	f04f 30ff 	mov.w	r0, #4294967295
 8007558:	e78e      	b.n	8007478 <__sflush_r+0x1c>
 800755a:	4407      	add	r7, r0
 800755c:	eba8 0800 	sub.w	r8, r8, r0
 8007560:	e7e9      	b.n	8007536 <__sflush_r+0xda>
 8007562:	bf00      	nop
 8007564:	20400001 	.word	0x20400001

08007568 <_fflush_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	690b      	ldr	r3, [r1, #16]
 800756c:	4605      	mov	r5, r0
 800756e:	460c      	mov	r4, r1
 8007570:	b913      	cbnz	r3, 8007578 <_fflush_r+0x10>
 8007572:	2500      	movs	r5, #0
 8007574:	4628      	mov	r0, r5
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	b118      	cbz	r0, 8007582 <_fflush_r+0x1a>
 800757a:	6983      	ldr	r3, [r0, #24]
 800757c:	b90b      	cbnz	r3, 8007582 <_fflush_r+0x1a>
 800757e:	f000 f887 	bl	8007690 <__sinit>
 8007582:	4b14      	ldr	r3, [pc, #80]	; (80075d4 <_fflush_r+0x6c>)
 8007584:	429c      	cmp	r4, r3
 8007586:	d11b      	bne.n	80075c0 <_fflush_r+0x58>
 8007588:	686c      	ldr	r4, [r5, #4]
 800758a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d0ef      	beq.n	8007572 <_fflush_r+0xa>
 8007592:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007594:	07d0      	lsls	r0, r2, #31
 8007596:	d404      	bmi.n	80075a2 <_fflush_r+0x3a>
 8007598:	0599      	lsls	r1, r3, #22
 800759a:	d402      	bmi.n	80075a2 <_fflush_r+0x3a>
 800759c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800759e:	f000 f927 	bl	80077f0 <__retarget_lock_acquire_recursive>
 80075a2:	4628      	mov	r0, r5
 80075a4:	4621      	mov	r1, r4
 80075a6:	f7ff ff59 	bl	800745c <__sflush_r>
 80075aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075ac:	07da      	lsls	r2, r3, #31
 80075ae:	4605      	mov	r5, r0
 80075b0:	d4e0      	bmi.n	8007574 <_fflush_r+0xc>
 80075b2:	89a3      	ldrh	r3, [r4, #12]
 80075b4:	059b      	lsls	r3, r3, #22
 80075b6:	d4dd      	bmi.n	8007574 <_fflush_r+0xc>
 80075b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ba:	f000 f91a 	bl	80077f2 <__retarget_lock_release_recursive>
 80075be:	e7d9      	b.n	8007574 <_fflush_r+0xc>
 80075c0:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <_fflush_r+0x70>)
 80075c2:	429c      	cmp	r4, r3
 80075c4:	d101      	bne.n	80075ca <_fflush_r+0x62>
 80075c6:	68ac      	ldr	r4, [r5, #8]
 80075c8:	e7df      	b.n	800758a <_fflush_r+0x22>
 80075ca:	4b04      	ldr	r3, [pc, #16]	; (80075dc <_fflush_r+0x74>)
 80075cc:	429c      	cmp	r4, r3
 80075ce:	bf08      	it	eq
 80075d0:	68ec      	ldreq	r4, [r5, #12]
 80075d2:	e7da      	b.n	800758a <_fflush_r+0x22>
 80075d4:	08009458 	.word	0x08009458
 80075d8:	08009478 	.word	0x08009478
 80075dc:	08009438 	.word	0x08009438

080075e0 <std>:
 80075e0:	2300      	movs	r3, #0
 80075e2:	b510      	push	{r4, lr}
 80075e4:	4604      	mov	r4, r0
 80075e6:	e9c0 3300 	strd	r3, r3, [r0]
 80075ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075ee:	6083      	str	r3, [r0, #8]
 80075f0:	8181      	strh	r1, [r0, #12]
 80075f2:	6643      	str	r3, [r0, #100]	; 0x64
 80075f4:	81c2      	strh	r2, [r0, #14]
 80075f6:	6183      	str	r3, [r0, #24]
 80075f8:	4619      	mov	r1, r3
 80075fa:	2208      	movs	r2, #8
 80075fc:	305c      	adds	r0, #92	; 0x5c
 80075fe:	f7fd f8b9 	bl	8004774 <memset>
 8007602:	4b05      	ldr	r3, [pc, #20]	; (8007618 <std+0x38>)
 8007604:	6263      	str	r3, [r4, #36]	; 0x24
 8007606:	4b05      	ldr	r3, [pc, #20]	; (800761c <std+0x3c>)
 8007608:	62a3      	str	r3, [r4, #40]	; 0x28
 800760a:	4b05      	ldr	r3, [pc, #20]	; (8007620 <std+0x40>)
 800760c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800760e:	4b05      	ldr	r3, [pc, #20]	; (8007624 <std+0x44>)
 8007610:	6224      	str	r4, [r4, #32]
 8007612:	6323      	str	r3, [r4, #48]	; 0x30
 8007614:	bd10      	pop	{r4, pc}
 8007616:	bf00      	nop
 8007618:	080052d1 	.word	0x080052d1
 800761c:	080052f7 	.word	0x080052f7
 8007620:	0800532f 	.word	0x0800532f
 8007624:	08005353 	.word	0x08005353

08007628 <_cleanup_r>:
 8007628:	4901      	ldr	r1, [pc, #4]	; (8007630 <_cleanup_r+0x8>)
 800762a:	f000 b8c1 	b.w	80077b0 <_fwalk_reent>
 800762e:	bf00      	nop
 8007630:	08007569 	.word	0x08007569

08007634 <__sfmoreglue>:
 8007634:	b570      	push	{r4, r5, r6, lr}
 8007636:	2268      	movs	r2, #104	; 0x68
 8007638:	1e4d      	subs	r5, r1, #1
 800763a:	4355      	muls	r5, r2
 800763c:	460e      	mov	r6, r1
 800763e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007642:	f7fd f90b 	bl	800485c <_malloc_r>
 8007646:	4604      	mov	r4, r0
 8007648:	b140      	cbz	r0, 800765c <__sfmoreglue+0x28>
 800764a:	2100      	movs	r1, #0
 800764c:	e9c0 1600 	strd	r1, r6, [r0]
 8007650:	300c      	adds	r0, #12
 8007652:	60a0      	str	r0, [r4, #8]
 8007654:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007658:	f7fd f88c 	bl	8004774 <memset>
 800765c:	4620      	mov	r0, r4
 800765e:	bd70      	pop	{r4, r5, r6, pc}

08007660 <__sfp_lock_acquire>:
 8007660:	4801      	ldr	r0, [pc, #4]	; (8007668 <__sfp_lock_acquire+0x8>)
 8007662:	f000 b8c5 	b.w	80077f0 <__retarget_lock_acquire_recursive>
 8007666:	bf00      	nop
 8007668:	20000a79 	.word	0x20000a79

0800766c <__sfp_lock_release>:
 800766c:	4801      	ldr	r0, [pc, #4]	; (8007674 <__sfp_lock_release+0x8>)
 800766e:	f000 b8c0 	b.w	80077f2 <__retarget_lock_release_recursive>
 8007672:	bf00      	nop
 8007674:	20000a79 	.word	0x20000a79

08007678 <__sinit_lock_acquire>:
 8007678:	4801      	ldr	r0, [pc, #4]	; (8007680 <__sinit_lock_acquire+0x8>)
 800767a:	f000 b8b9 	b.w	80077f0 <__retarget_lock_acquire_recursive>
 800767e:	bf00      	nop
 8007680:	20000a7a 	.word	0x20000a7a

08007684 <__sinit_lock_release>:
 8007684:	4801      	ldr	r0, [pc, #4]	; (800768c <__sinit_lock_release+0x8>)
 8007686:	f000 b8b4 	b.w	80077f2 <__retarget_lock_release_recursive>
 800768a:	bf00      	nop
 800768c:	20000a7a 	.word	0x20000a7a

08007690 <__sinit>:
 8007690:	b510      	push	{r4, lr}
 8007692:	4604      	mov	r4, r0
 8007694:	f7ff fff0 	bl	8007678 <__sinit_lock_acquire>
 8007698:	69a3      	ldr	r3, [r4, #24]
 800769a:	b11b      	cbz	r3, 80076a4 <__sinit+0x14>
 800769c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076a0:	f7ff bff0 	b.w	8007684 <__sinit_lock_release>
 80076a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076a8:	6523      	str	r3, [r4, #80]	; 0x50
 80076aa:	4b13      	ldr	r3, [pc, #76]	; (80076f8 <__sinit+0x68>)
 80076ac:	4a13      	ldr	r2, [pc, #76]	; (80076fc <__sinit+0x6c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80076b2:	42a3      	cmp	r3, r4
 80076b4:	bf04      	itt	eq
 80076b6:	2301      	moveq	r3, #1
 80076b8:	61a3      	streq	r3, [r4, #24]
 80076ba:	4620      	mov	r0, r4
 80076bc:	f000 f820 	bl	8007700 <__sfp>
 80076c0:	6060      	str	r0, [r4, #4]
 80076c2:	4620      	mov	r0, r4
 80076c4:	f000 f81c 	bl	8007700 <__sfp>
 80076c8:	60a0      	str	r0, [r4, #8]
 80076ca:	4620      	mov	r0, r4
 80076cc:	f000 f818 	bl	8007700 <__sfp>
 80076d0:	2200      	movs	r2, #0
 80076d2:	60e0      	str	r0, [r4, #12]
 80076d4:	2104      	movs	r1, #4
 80076d6:	6860      	ldr	r0, [r4, #4]
 80076d8:	f7ff ff82 	bl	80075e0 <std>
 80076dc:	68a0      	ldr	r0, [r4, #8]
 80076de:	2201      	movs	r2, #1
 80076e0:	2109      	movs	r1, #9
 80076e2:	f7ff ff7d 	bl	80075e0 <std>
 80076e6:	68e0      	ldr	r0, [r4, #12]
 80076e8:	2202      	movs	r2, #2
 80076ea:	2112      	movs	r1, #18
 80076ec:	f7ff ff78 	bl	80075e0 <std>
 80076f0:	2301      	movs	r3, #1
 80076f2:	61a3      	str	r3, [r4, #24]
 80076f4:	e7d2      	b.n	800769c <__sinit+0xc>
 80076f6:	bf00      	nop
 80076f8:	080090a8 	.word	0x080090a8
 80076fc:	08007629 	.word	0x08007629

08007700 <__sfp>:
 8007700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007702:	4607      	mov	r7, r0
 8007704:	f7ff ffac 	bl	8007660 <__sfp_lock_acquire>
 8007708:	4b1e      	ldr	r3, [pc, #120]	; (8007784 <__sfp+0x84>)
 800770a:	681e      	ldr	r6, [r3, #0]
 800770c:	69b3      	ldr	r3, [r6, #24]
 800770e:	b913      	cbnz	r3, 8007716 <__sfp+0x16>
 8007710:	4630      	mov	r0, r6
 8007712:	f7ff ffbd 	bl	8007690 <__sinit>
 8007716:	3648      	adds	r6, #72	; 0x48
 8007718:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800771c:	3b01      	subs	r3, #1
 800771e:	d503      	bpl.n	8007728 <__sfp+0x28>
 8007720:	6833      	ldr	r3, [r6, #0]
 8007722:	b30b      	cbz	r3, 8007768 <__sfp+0x68>
 8007724:	6836      	ldr	r6, [r6, #0]
 8007726:	e7f7      	b.n	8007718 <__sfp+0x18>
 8007728:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800772c:	b9d5      	cbnz	r5, 8007764 <__sfp+0x64>
 800772e:	4b16      	ldr	r3, [pc, #88]	; (8007788 <__sfp+0x88>)
 8007730:	60e3      	str	r3, [r4, #12]
 8007732:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007736:	6665      	str	r5, [r4, #100]	; 0x64
 8007738:	f000 f859 	bl	80077ee <__retarget_lock_init_recursive>
 800773c:	f7ff ff96 	bl	800766c <__sfp_lock_release>
 8007740:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007744:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007748:	6025      	str	r5, [r4, #0]
 800774a:	61a5      	str	r5, [r4, #24]
 800774c:	2208      	movs	r2, #8
 800774e:	4629      	mov	r1, r5
 8007750:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007754:	f7fd f80e 	bl	8004774 <memset>
 8007758:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800775c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007760:	4620      	mov	r0, r4
 8007762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007764:	3468      	adds	r4, #104	; 0x68
 8007766:	e7d9      	b.n	800771c <__sfp+0x1c>
 8007768:	2104      	movs	r1, #4
 800776a:	4638      	mov	r0, r7
 800776c:	f7ff ff62 	bl	8007634 <__sfmoreglue>
 8007770:	4604      	mov	r4, r0
 8007772:	6030      	str	r0, [r6, #0]
 8007774:	2800      	cmp	r0, #0
 8007776:	d1d5      	bne.n	8007724 <__sfp+0x24>
 8007778:	f7ff ff78 	bl	800766c <__sfp_lock_release>
 800777c:	230c      	movs	r3, #12
 800777e:	603b      	str	r3, [r7, #0]
 8007780:	e7ee      	b.n	8007760 <__sfp+0x60>
 8007782:	bf00      	nop
 8007784:	080090a8 	.word	0x080090a8
 8007788:	ffff0001 	.word	0xffff0001

0800778c <fiprintf>:
 800778c:	b40e      	push	{r1, r2, r3}
 800778e:	b503      	push	{r0, r1, lr}
 8007790:	4601      	mov	r1, r0
 8007792:	ab03      	add	r3, sp, #12
 8007794:	4805      	ldr	r0, [pc, #20]	; (80077ac <fiprintf+0x20>)
 8007796:	f853 2b04 	ldr.w	r2, [r3], #4
 800779a:	6800      	ldr	r0, [r0, #0]
 800779c:	9301      	str	r3, [sp, #4]
 800779e:	f000 f8ad 	bl	80078fc <_vfiprintf_r>
 80077a2:	b002      	add	sp, #8
 80077a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077a8:	b003      	add	sp, #12
 80077aa:	4770      	bx	lr
 80077ac:	20000008 	.word	0x20000008

080077b0 <_fwalk_reent>:
 80077b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077b4:	4606      	mov	r6, r0
 80077b6:	4688      	mov	r8, r1
 80077b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077bc:	2700      	movs	r7, #0
 80077be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077c2:	f1b9 0901 	subs.w	r9, r9, #1
 80077c6:	d505      	bpl.n	80077d4 <_fwalk_reent+0x24>
 80077c8:	6824      	ldr	r4, [r4, #0]
 80077ca:	2c00      	cmp	r4, #0
 80077cc:	d1f7      	bne.n	80077be <_fwalk_reent+0xe>
 80077ce:	4638      	mov	r0, r7
 80077d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077d4:	89ab      	ldrh	r3, [r5, #12]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d907      	bls.n	80077ea <_fwalk_reent+0x3a>
 80077da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077de:	3301      	adds	r3, #1
 80077e0:	d003      	beq.n	80077ea <_fwalk_reent+0x3a>
 80077e2:	4629      	mov	r1, r5
 80077e4:	4630      	mov	r0, r6
 80077e6:	47c0      	blx	r8
 80077e8:	4307      	orrs	r7, r0
 80077ea:	3568      	adds	r5, #104	; 0x68
 80077ec:	e7e9      	b.n	80077c2 <_fwalk_reent+0x12>

080077ee <__retarget_lock_init_recursive>:
 80077ee:	4770      	bx	lr

080077f0 <__retarget_lock_acquire_recursive>:
 80077f0:	4770      	bx	lr

080077f2 <__retarget_lock_release_recursive>:
 80077f2:	4770      	bx	lr

080077f4 <__ascii_mbtowc>:
 80077f4:	b082      	sub	sp, #8
 80077f6:	b901      	cbnz	r1, 80077fa <__ascii_mbtowc+0x6>
 80077f8:	a901      	add	r1, sp, #4
 80077fa:	b142      	cbz	r2, 800780e <__ascii_mbtowc+0x1a>
 80077fc:	b14b      	cbz	r3, 8007812 <__ascii_mbtowc+0x1e>
 80077fe:	7813      	ldrb	r3, [r2, #0]
 8007800:	600b      	str	r3, [r1, #0]
 8007802:	7812      	ldrb	r2, [r2, #0]
 8007804:	1e10      	subs	r0, r2, #0
 8007806:	bf18      	it	ne
 8007808:	2001      	movne	r0, #1
 800780a:	b002      	add	sp, #8
 800780c:	4770      	bx	lr
 800780e:	4610      	mov	r0, r2
 8007810:	e7fb      	b.n	800780a <__ascii_mbtowc+0x16>
 8007812:	f06f 0001 	mvn.w	r0, #1
 8007816:	e7f8      	b.n	800780a <__ascii_mbtowc+0x16>

08007818 <memmove>:
 8007818:	4288      	cmp	r0, r1
 800781a:	b510      	push	{r4, lr}
 800781c:	eb01 0402 	add.w	r4, r1, r2
 8007820:	d902      	bls.n	8007828 <memmove+0x10>
 8007822:	4284      	cmp	r4, r0
 8007824:	4623      	mov	r3, r4
 8007826:	d807      	bhi.n	8007838 <memmove+0x20>
 8007828:	1e43      	subs	r3, r0, #1
 800782a:	42a1      	cmp	r1, r4
 800782c:	d008      	beq.n	8007840 <memmove+0x28>
 800782e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007836:	e7f8      	b.n	800782a <memmove+0x12>
 8007838:	4402      	add	r2, r0
 800783a:	4601      	mov	r1, r0
 800783c:	428a      	cmp	r2, r1
 800783e:	d100      	bne.n	8007842 <memmove+0x2a>
 8007840:	bd10      	pop	{r4, pc}
 8007842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800784a:	e7f7      	b.n	800783c <memmove+0x24>

0800784c <_realloc_r>:
 800784c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007850:	4680      	mov	r8, r0
 8007852:	4614      	mov	r4, r2
 8007854:	460e      	mov	r6, r1
 8007856:	b921      	cbnz	r1, 8007862 <_realloc_r+0x16>
 8007858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800785c:	4611      	mov	r1, r2
 800785e:	f7fc bffd 	b.w	800485c <_malloc_r>
 8007862:	b92a      	cbnz	r2, 8007870 <_realloc_r+0x24>
 8007864:	f7fc ff8e 	bl	8004784 <_free_r>
 8007868:	4625      	mov	r5, r4
 800786a:	4628      	mov	r0, r5
 800786c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007870:	f000 faae 	bl	8007dd0 <_malloc_usable_size_r>
 8007874:	4284      	cmp	r4, r0
 8007876:	4607      	mov	r7, r0
 8007878:	d802      	bhi.n	8007880 <_realloc_r+0x34>
 800787a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800787e:	d812      	bhi.n	80078a6 <_realloc_r+0x5a>
 8007880:	4621      	mov	r1, r4
 8007882:	4640      	mov	r0, r8
 8007884:	f7fc ffea 	bl	800485c <_malloc_r>
 8007888:	4605      	mov	r5, r0
 800788a:	2800      	cmp	r0, #0
 800788c:	d0ed      	beq.n	800786a <_realloc_r+0x1e>
 800788e:	42bc      	cmp	r4, r7
 8007890:	4622      	mov	r2, r4
 8007892:	4631      	mov	r1, r6
 8007894:	bf28      	it	cs
 8007896:	463a      	movcs	r2, r7
 8007898:	f7fe fc12 	bl	80060c0 <memcpy>
 800789c:	4631      	mov	r1, r6
 800789e:	4640      	mov	r0, r8
 80078a0:	f7fc ff70 	bl	8004784 <_free_r>
 80078a4:	e7e1      	b.n	800786a <_realloc_r+0x1e>
 80078a6:	4635      	mov	r5, r6
 80078a8:	e7df      	b.n	800786a <_realloc_r+0x1e>

080078aa <__sfputc_r>:
 80078aa:	6893      	ldr	r3, [r2, #8]
 80078ac:	3b01      	subs	r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	b410      	push	{r4}
 80078b2:	6093      	str	r3, [r2, #8]
 80078b4:	da08      	bge.n	80078c8 <__sfputc_r+0x1e>
 80078b6:	6994      	ldr	r4, [r2, #24]
 80078b8:	42a3      	cmp	r3, r4
 80078ba:	db01      	blt.n	80078c0 <__sfputc_r+0x16>
 80078bc:	290a      	cmp	r1, #10
 80078be:	d103      	bne.n	80078c8 <__sfputc_r+0x1e>
 80078c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078c4:	f000 b94a 	b.w	8007b5c <__swbuf_r>
 80078c8:	6813      	ldr	r3, [r2, #0]
 80078ca:	1c58      	adds	r0, r3, #1
 80078cc:	6010      	str	r0, [r2, #0]
 80078ce:	7019      	strb	r1, [r3, #0]
 80078d0:	4608      	mov	r0, r1
 80078d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <__sfputs_r>:
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078da:	4606      	mov	r6, r0
 80078dc:	460f      	mov	r7, r1
 80078de:	4614      	mov	r4, r2
 80078e0:	18d5      	adds	r5, r2, r3
 80078e2:	42ac      	cmp	r4, r5
 80078e4:	d101      	bne.n	80078ea <__sfputs_r+0x12>
 80078e6:	2000      	movs	r0, #0
 80078e8:	e007      	b.n	80078fa <__sfputs_r+0x22>
 80078ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ee:	463a      	mov	r2, r7
 80078f0:	4630      	mov	r0, r6
 80078f2:	f7ff ffda 	bl	80078aa <__sfputc_r>
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	d1f3      	bne.n	80078e2 <__sfputs_r+0xa>
 80078fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080078fc <_vfiprintf_r>:
 80078fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007900:	460d      	mov	r5, r1
 8007902:	b09d      	sub	sp, #116	; 0x74
 8007904:	4614      	mov	r4, r2
 8007906:	4698      	mov	r8, r3
 8007908:	4606      	mov	r6, r0
 800790a:	b118      	cbz	r0, 8007914 <_vfiprintf_r+0x18>
 800790c:	6983      	ldr	r3, [r0, #24]
 800790e:	b90b      	cbnz	r3, 8007914 <_vfiprintf_r+0x18>
 8007910:	f7ff febe 	bl	8007690 <__sinit>
 8007914:	4b89      	ldr	r3, [pc, #548]	; (8007b3c <_vfiprintf_r+0x240>)
 8007916:	429d      	cmp	r5, r3
 8007918:	d11b      	bne.n	8007952 <_vfiprintf_r+0x56>
 800791a:	6875      	ldr	r5, [r6, #4]
 800791c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800791e:	07d9      	lsls	r1, r3, #31
 8007920:	d405      	bmi.n	800792e <_vfiprintf_r+0x32>
 8007922:	89ab      	ldrh	r3, [r5, #12]
 8007924:	059a      	lsls	r2, r3, #22
 8007926:	d402      	bmi.n	800792e <_vfiprintf_r+0x32>
 8007928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800792a:	f7ff ff61 	bl	80077f0 <__retarget_lock_acquire_recursive>
 800792e:	89ab      	ldrh	r3, [r5, #12]
 8007930:	071b      	lsls	r3, r3, #28
 8007932:	d501      	bpl.n	8007938 <_vfiprintf_r+0x3c>
 8007934:	692b      	ldr	r3, [r5, #16]
 8007936:	b9eb      	cbnz	r3, 8007974 <_vfiprintf_r+0x78>
 8007938:	4629      	mov	r1, r5
 800793a:	4630      	mov	r0, r6
 800793c:	f000 f96e 	bl	8007c1c <__swsetup_r>
 8007940:	b1c0      	cbz	r0, 8007974 <_vfiprintf_r+0x78>
 8007942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007944:	07dc      	lsls	r4, r3, #31
 8007946:	d50e      	bpl.n	8007966 <_vfiprintf_r+0x6a>
 8007948:	f04f 30ff 	mov.w	r0, #4294967295
 800794c:	b01d      	add	sp, #116	; 0x74
 800794e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007952:	4b7b      	ldr	r3, [pc, #492]	; (8007b40 <_vfiprintf_r+0x244>)
 8007954:	429d      	cmp	r5, r3
 8007956:	d101      	bne.n	800795c <_vfiprintf_r+0x60>
 8007958:	68b5      	ldr	r5, [r6, #8]
 800795a:	e7df      	b.n	800791c <_vfiprintf_r+0x20>
 800795c:	4b79      	ldr	r3, [pc, #484]	; (8007b44 <_vfiprintf_r+0x248>)
 800795e:	429d      	cmp	r5, r3
 8007960:	bf08      	it	eq
 8007962:	68f5      	ldreq	r5, [r6, #12]
 8007964:	e7da      	b.n	800791c <_vfiprintf_r+0x20>
 8007966:	89ab      	ldrh	r3, [r5, #12]
 8007968:	0598      	lsls	r0, r3, #22
 800796a:	d4ed      	bmi.n	8007948 <_vfiprintf_r+0x4c>
 800796c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800796e:	f7ff ff40 	bl	80077f2 <__retarget_lock_release_recursive>
 8007972:	e7e9      	b.n	8007948 <_vfiprintf_r+0x4c>
 8007974:	2300      	movs	r3, #0
 8007976:	9309      	str	r3, [sp, #36]	; 0x24
 8007978:	2320      	movs	r3, #32
 800797a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800797e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007982:	2330      	movs	r3, #48	; 0x30
 8007984:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b48 <_vfiprintf_r+0x24c>
 8007988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800798c:	f04f 0901 	mov.w	r9, #1
 8007990:	4623      	mov	r3, r4
 8007992:	469a      	mov	sl, r3
 8007994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007998:	b10a      	cbz	r2, 800799e <_vfiprintf_r+0xa2>
 800799a:	2a25      	cmp	r2, #37	; 0x25
 800799c:	d1f9      	bne.n	8007992 <_vfiprintf_r+0x96>
 800799e:	ebba 0b04 	subs.w	fp, sl, r4
 80079a2:	d00b      	beq.n	80079bc <_vfiprintf_r+0xc0>
 80079a4:	465b      	mov	r3, fp
 80079a6:	4622      	mov	r2, r4
 80079a8:	4629      	mov	r1, r5
 80079aa:	4630      	mov	r0, r6
 80079ac:	f7ff ff94 	bl	80078d8 <__sfputs_r>
 80079b0:	3001      	adds	r0, #1
 80079b2:	f000 80aa 	beq.w	8007b0a <_vfiprintf_r+0x20e>
 80079b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079b8:	445a      	add	r2, fp
 80079ba:	9209      	str	r2, [sp, #36]	; 0x24
 80079bc:	f89a 3000 	ldrb.w	r3, [sl]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 80a2 	beq.w	8007b0a <_vfiprintf_r+0x20e>
 80079c6:	2300      	movs	r3, #0
 80079c8:	f04f 32ff 	mov.w	r2, #4294967295
 80079cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079d0:	f10a 0a01 	add.w	sl, sl, #1
 80079d4:	9304      	str	r3, [sp, #16]
 80079d6:	9307      	str	r3, [sp, #28]
 80079d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079dc:	931a      	str	r3, [sp, #104]	; 0x68
 80079de:	4654      	mov	r4, sl
 80079e0:	2205      	movs	r2, #5
 80079e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e6:	4858      	ldr	r0, [pc, #352]	; (8007b48 <_vfiprintf_r+0x24c>)
 80079e8:	f7f8 fc12 	bl	8000210 <memchr>
 80079ec:	9a04      	ldr	r2, [sp, #16]
 80079ee:	b9d8      	cbnz	r0, 8007a28 <_vfiprintf_r+0x12c>
 80079f0:	06d1      	lsls	r1, r2, #27
 80079f2:	bf44      	itt	mi
 80079f4:	2320      	movmi	r3, #32
 80079f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079fa:	0713      	lsls	r3, r2, #28
 80079fc:	bf44      	itt	mi
 80079fe:	232b      	movmi	r3, #43	; 0x2b
 8007a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a04:	f89a 3000 	ldrb.w	r3, [sl]
 8007a08:	2b2a      	cmp	r3, #42	; 0x2a
 8007a0a:	d015      	beq.n	8007a38 <_vfiprintf_r+0x13c>
 8007a0c:	9a07      	ldr	r2, [sp, #28]
 8007a0e:	4654      	mov	r4, sl
 8007a10:	2000      	movs	r0, #0
 8007a12:	f04f 0c0a 	mov.w	ip, #10
 8007a16:	4621      	mov	r1, r4
 8007a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a1c:	3b30      	subs	r3, #48	; 0x30
 8007a1e:	2b09      	cmp	r3, #9
 8007a20:	d94e      	bls.n	8007ac0 <_vfiprintf_r+0x1c4>
 8007a22:	b1b0      	cbz	r0, 8007a52 <_vfiprintf_r+0x156>
 8007a24:	9207      	str	r2, [sp, #28]
 8007a26:	e014      	b.n	8007a52 <_vfiprintf_r+0x156>
 8007a28:	eba0 0308 	sub.w	r3, r0, r8
 8007a2c:	fa09 f303 	lsl.w	r3, r9, r3
 8007a30:	4313      	orrs	r3, r2
 8007a32:	9304      	str	r3, [sp, #16]
 8007a34:	46a2      	mov	sl, r4
 8007a36:	e7d2      	b.n	80079de <_vfiprintf_r+0xe2>
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	1d19      	adds	r1, r3, #4
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	9103      	str	r1, [sp, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	bfbb      	ittet	lt
 8007a44:	425b      	neglt	r3, r3
 8007a46:	f042 0202 	orrlt.w	r2, r2, #2
 8007a4a:	9307      	strge	r3, [sp, #28]
 8007a4c:	9307      	strlt	r3, [sp, #28]
 8007a4e:	bfb8      	it	lt
 8007a50:	9204      	strlt	r2, [sp, #16]
 8007a52:	7823      	ldrb	r3, [r4, #0]
 8007a54:	2b2e      	cmp	r3, #46	; 0x2e
 8007a56:	d10c      	bne.n	8007a72 <_vfiprintf_r+0x176>
 8007a58:	7863      	ldrb	r3, [r4, #1]
 8007a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a5c:	d135      	bne.n	8007aca <_vfiprintf_r+0x1ce>
 8007a5e:	9b03      	ldr	r3, [sp, #12]
 8007a60:	1d1a      	adds	r2, r3, #4
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	9203      	str	r2, [sp, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	bfb8      	it	lt
 8007a6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a6e:	3402      	adds	r4, #2
 8007a70:	9305      	str	r3, [sp, #20]
 8007a72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b58 <_vfiprintf_r+0x25c>
 8007a76:	7821      	ldrb	r1, [r4, #0]
 8007a78:	2203      	movs	r2, #3
 8007a7a:	4650      	mov	r0, sl
 8007a7c:	f7f8 fbc8 	bl	8000210 <memchr>
 8007a80:	b140      	cbz	r0, 8007a94 <_vfiprintf_r+0x198>
 8007a82:	2340      	movs	r3, #64	; 0x40
 8007a84:	eba0 000a 	sub.w	r0, r0, sl
 8007a88:	fa03 f000 	lsl.w	r0, r3, r0
 8007a8c:	9b04      	ldr	r3, [sp, #16]
 8007a8e:	4303      	orrs	r3, r0
 8007a90:	3401      	adds	r4, #1
 8007a92:	9304      	str	r3, [sp, #16]
 8007a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a98:	482c      	ldr	r0, [pc, #176]	; (8007b4c <_vfiprintf_r+0x250>)
 8007a9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a9e:	2206      	movs	r2, #6
 8007aa0:	f7f8 fbb6 	bl	8000210 <memchr>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d03f      	beq.n	8007b28 <_vfiprintf_r+0x22c>
 8007aa8:	4b29      	ldr	r3, [pc, #164]	; (8007b50 <_vfiprintf_r+0x254>)
 8007aaa:	bb1b      	cbnz	r3, 8007af4 <_vfiprintf_r+0x1f8>
 8007aac:	9b03      	ldr	r3, [sp, #12]
 8007aae:	3307      	adds	r3, #7
 8007ab0:	f023 0307 	bic.w	r3, r3, #7
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	9303      	str	r3, [sp, #12]
 8007ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aba:	443b      	add	r3, r7
 8007abc:	9309      	str	r3, [sp, #36]	; 0x24
 8007abe:	e767      	b.n	8007990 <_vfiprintf_r+0x94>
 8007ac0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ac4:	460c      	mov	r4, r1
 8007ac6:	2001      	movs	r0, #1
 8007ac8:	e7a5      	b.n	8007a16 <_vfiprintf_r+0x11a>
 8007aca:	2300      	movs	r3, #0
 8007acc:	3401      	adds	r4, #1
 8007ace:	9305      	str	r3, [sp, #20]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	f04f 0c0a 	mov.w	ip, #10
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007adc:	3a30      	subs	r2, #48	; 0x30
 8007ade:	2a09      	cmp	r2, #9
 8007ae0:	d903      	bls.n	8007aea <_vfiprintf_r+0x1ee>
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0c5      	beq.n	8007a72 <_vfiprintf_r+0x176>
 8007ae6:	9105      	str	r1, [sp, #20]
 8007ae8:	e7c3      	b.n	8007a72 <_vfiprintf_r+0x176>
 8007aea:	fb0c 2101 	mla	r1, ip, r1, r2
 8007aee:	4604      	mov	r4, r0
 8007af0:	2301      	movs	r3, #1
 8007af2:	e7f0      	b.n	8007ad6 <_vfiprintf_r+0x1da>
 8007af4:	ab03      	add	r3, sp, #12
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	462a      	mov	r2, r5
 8007afa:	4b16      	ldr	r3, [pc, #88]	; (8007b54 <_vfiprintf_r+0x258>)
 8007afc:	a904      	add	r1, sp, #16
 8007afe:	4630      	mov	r0, r6
 8007b00:	f7fc ffc0 	bl	8004a84 <_printf_float>
 8007b04:	4607      	mov	r7, r0
 8007b06:	1c78      	adds	r0, r7, #1
 8007b08:	d1d6      	bne.n	8007ab8 <_vfiprintf_r+0x1bc>
 8007b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b0c:	07d9      	lsls	r1, r3, #31
 8007b0e:	d405      	bmi.n	8007b1c <_vfiprintf_r+0x220>
 8007b10:	89ab      	ldrh	r3, [r5, #12]
 8007b12:	059a      	lsls	r2, r3, #22
 8007b14:	d402      	bmi.n	8007b1c <_vfiprintf_r+0x220>
 8007b16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b18:	f7ff fe6b 	bl	80077f2 <__retarget_lock_release_recursive>
 8007b1c:	89ab      	ldrh	r3, [r5, #12]
 8007b1e:	065b      	lsls	r3, r3, #25
 8007b20:	f53f af12 	bmi.w	8007948 <_vfiprintf_r+0x4c>
 8007b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b26:	e711      	b.n	800794c <_vfiprintf_r+0x50>
 8007b28:	ab03      	add	r3, sp, #12
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	462a      	mov	r2, r5
 8007b2e:	4b09      	ldr	r3, [pc, #36]	; (8007b54 <_vfiprintf_r+0x258>)
 8007b30:	a904      	add	r1, sp, #16
 8007b32:	4630      	mov	r0, r6
 8007b34:	f7fd fa4a 	bl	8004fcc <_printf_i>
 8007b38:	e7e4      	b.n	8007b04 <_vfiprintf_r+0x208>
 8007b3a:	bf00      	nop
 8007b3c:	08009458 	.word	0x08009458
 8007b40:	08009478 	.word	0x08009478
 8007b44:	08009438 	.word	0x08009438
 8007b48:	080092cc 	.word	0x080092cc
 8007b4c:	080092d6 	.word	0x080092d6
 8007b50:	08004a85 	.word	0x08004a85
 8007b54:	080078d9 	.word	0x080078d9
 8007b58:	080092d2 	.word	0x080092d2

08007b5c <__swbuf_r>:
 8007b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5e:	460e      	mov	r6, r1
 8007b60:	4614      	mov	r4, r2
 8007b62:	4605      	mov	r5, r0
 8007b64:	b118      	cbz	r0, 8007b6e <__swbuf_r+0x12>
 8007b66:	6983      	ldr	r3, [r0, #24]
 8007b68:	b90b      	cbnz	r3, 8007b6e <__swbuf_r+0x12>
 8007b6a:	f7ff fd91 	bl	8007690 <__sinit>
 8007b6e:	4b21      	ldr	r3, [pc, #132]	; (8007bf4 <__swbuf_r+0x98>)
 8007b70:	429c      	cmp	r4, r3
 8007b72:	d12b      	bne.n	8007bcc <__swbuf_r+0x70>
 8007b74:	686c      	ldr	r4, [r5, #4]
 8007b76:	69a3      	ldr	r3, [r4, #24]
 8007b78:	60a3      	str	r3, [r4, #8]
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	071a      	lsls	r2, r3, #28
 8007b7e:	d52f      	bpl.n	8007be0 <__swbuf_r+0x84>
 8007b80:	6923      	ldr	r3, [r4, #16]
 8007b82:	b36b      	cbz	r3, 8007be0 <__swbuf_r+0x84>
 8007b84:	6923      	ldr	r3, [r4, #16]
 8007b86:	6820      	ldr	r0, [r4, #0]
 8007b88:	1ac0      	subs	r0, r0, r3
 8007b8a:	6963      	ldr	r3, [r4, #20]
 8007b8c:	b2f6      	uxtb	r6, r6
 8007b8e:	4283      	cmp	r3, r0
 8007b90:	4637      	mov	r7, r6
 8007b92:	dc04      	bgt.n	8007b9e <__swbuf_r+0x42>
 8007b94:	4621      	mov	r1, r4
 8007b96:	4628      	mov	r0, r5
 8007b98:	f7ff fce6 	bl	8007568 <_fflush_r>
 8007b9c:	bb30      	cbnz	r0, 8007bec <__swbuf_r+0x90>
 8007b9e:	68a3      	ldr	r3, [r4, #8]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	60a3      	str	r3, [r4, #8]
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	6022      	str	r2, [r4, #0]
 8007baa:	701e      	strb	r6, [r3, #0]
 8007bac:	6963      	ldr	r3, [r4, #20]
 8007bae:	3001      	adds	r0, #1
 8007bb0:	4283      	cmp	r3, r0
 8007bb2:	d004      	beq.n	8007bbe <__swbuf_r+0x62>
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	07db      	lsls	r3, r3, #31
 8007bb8:	d506      	bpl.n	8007bc8 <__swbuf_r+0x6c>
 8007bba:	2e0a      	cmp	r6, #10
 8007bbc:	d104      	bne.n	8007bc8 <__swbuf_r+0x6c>
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f7ff fcd1 	bl	8007568 <_fflush_r>
 8007bc6:	b988      	cbnz	r0, 8007bec <__swbuf_r+0x90>
 8007bc8:	4638      	mov	r0, r7
 8007bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <__swbuf_r+0x9c>)
 8007bce:	429c      	cmp	r4, r3
 8007bd0:	d101      	bne.n	8007bd6 <__swbuf_r+0x7a>
 8007bd2:	68ac      	ldr	r4, [r5, #8]
 8007bd4:	e7cf      	b.n	8007b76 <__swbuf_r+0x1a>
 8007bd6:	4b09      	ldr	r3, [pc, #36]	; (8007bfc <__swbuf_r+0xa0>)
 8007bd8:	429c      	cmp	r4, r3
 8007bda:	bf08      	it	eq
 8007bdc:	68ec      	ldreq	r4, [r5, #12]
 8007bde:	e7ca      	b.n	8007b76 <__swbuf_r+0x1a>
 8007be0:	4621      	mov	r1, r4
 8007be2:	4628      	mov	r0, r5
 8007be4:	f000 f81a 	bl	8007c1c <__swsetup_r>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d0cb      	beq.n	8007b84 <__swbuf_r+0x28>
 8007bec:	f04f 37ff 	mov.w	r7, #4294967295
 8007bf0:	e7ea      	b.n	8007bc8 <__swbuf_r+0x6c>
 8007bf2:	bf00      	nop
 8007bf4:	08009458 	.word	0x08009458
 8007bf8:	08009478 	.word	0x08009478
 8007bfc:	08009438 	.word	0x08009438

08007c00 <__ascii_wctomb>:
 8007c00:	b149      	cbz	r1, 8007c16 <__ascii_wctomb+0x16>
 8007c02:	2aff      	cmp	r2, #255	; 0xff
 8007c04:	bf85      	ittet	hi
 8007c06:	238a      	movhi	r3, #138	; 0x8a
 8007c08:	6003      	strhi	r3, [r0, #0]
 8007c0a:	700a      	strbls	r2, [r1, #0]
 8007c0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c10:	bf98      	it	ls
 8007c12:	2001      	movls	r0, #1
 8007c14:	4770      	bx	lr
 8007c16:	4608      	mov	r0, r1
 8007c18:	4770      	bx	lr
	...

08007c1c <__swsetup_r>:
 8007c1c:	4b32      	ldr	r3, [pc, #200]	; (8007ce8 <__swsetup_r+0xcc>)
 8007c1e:	b570      	push	{r4, r5, r6, lr}
 8007c20:	681d      	ldr	r5, [r3, #0]
 8007c22:	4606      	mov	r6, r0
 8007c24:	460c      	mov	r4, r1
 8007c26:	b125      	cbz	r5, 8007c32 <__swsetup_r+0x16>
 8007c28:	69ab      	ldr	r3, [r5, #24]
 8007c2a:	b913      	cbnz	r3, 8007c32 <__swsetup_r+0x16>
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	f7ff fd2f 	bl	8007690 <__sinit>
 8007c32:	4b2e      	ldr	r3, [pc, #184]	; (8007cec <__swsetup_r+0xd0>)
 8007c34:	429c      	cmp	r4, r3
 8007c36:	d10f      	bne.n	8007c58 <__swsetup_r+0x3c>
 8007c38:	686c      	ldr	r4, [r5, #4]
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c40:	0719      	lsls	r1, r3, #28
 8007c42:	d42c      	bmi.n	8007c9e <__swsetup_r+0x82>
 8007c44:	06dd      	lsls	r5, r3, #27
 8007c46:	d411      	bmi.n	8007c6c <__swsetup_r+0x50>
 8007c48:	2309      	movs	r3, #9
 8007c4a:	6033      	str	r3, [r6, #0]
 8007c4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c50:	81a3      	strh	r3, [r4, #12]
 8007c52:	f04f 30ff 	mov.w	r0, #4294967295
 8007c56:	e03e      	b.n	8007cd6 <__swsetup_r+0xba>
 8007c58:	4b25      	ldr	r3, [pc, #148]	; (8007cf0 <__swsetup_r+0xd4>)
 8007c5a:	429c      	cmp	r4, r3
 8007c5c:	d101      	bne.n	8007c62 <__swsetup_r+0x46>
 8007c5e:	68ac      	ldr	r4, [r5, #8]
 8007c60:	e7eb      	b.n	8007c3a <__swsetup_r+0x1e>
 8007c62:	4b24      	ldr	r3, [pc, #144]	; (8007cf4 <__swsetup_r+0xd8>)
 8007c64:	429c      	cmp	r4, r3
 8007c66:	bf08      	it	eq
 8007c68:	68ec      	ldreq	r4, [r5, #12]
 8007c6a:	e7e6      	b.n	8007c3a <__swsetup_r+0x1e>
 8007c6c:	0758      	lsls	r0, r3, #29
 8007c6e:	d512      	bpl.n	8007c96 <__swsetup_r+0x7a>
 8007c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c72:	b141      	cbz	r1, 8007c86 <__swsetup_r+0x6a>
 8007c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c78:	4299      	cmp	r1, r3
 8007c7a:	d002      	beq.n	8007c82 <__swsetup_r+0x66>
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f7fc fd81 	bl	8004784 <_free_r>
 8007c82:	2300      	movs	r3, #0
 8007c84:	6363      	str	r3, [r4, #52]	; 0x34
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c8c:	81a3      	strh	r3, [r4, #12]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	6063      	str	r3, [r4, #4]
 8007c92:	6923      	ldr	r3, [r4, #16]
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	f043 0308 	orr.w	r3, r3, #8
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	6923      	ldr	r3, [r4, #16]
 8007ca0:	b94b      	cbnz	r3, 8007cb6 <__swsetup_r+0x9a>
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cac:	d003      	beq.n	8007cb6 <__swsetup_r+0x9a>
 8007cae:	4621      	mov	r1, r4
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f000 f84d 	bl	8007d50 <__smakebuf_r>
 8007cb6:	89a0      	ldrh	r0, [r4, #12]
 8007cb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cbc:	f010 0301 	ands.w	r3, r0, #1
 8007cc0:	d00a      	beq.n	8007cd8 <__swsetup_r+0xbc>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60a3      	str	r3, [r4, #8]
 8007cc6:	6963      	ldr	r3, [r4, #20]
 8007cc8:	425b      	negs	r3, r3
 8007cca:	61a3      	str	r3, [r4, #24]
 8007ccc:	6923      	ldr	r3, [r4, #16]
 8007cce:	b943      	cbnz	r3, 8007ce2 <__swsetup_r+0xc6>
 8007cd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cd4:	d1ba      	bne.n	8007c4c <__swsetup_r+0x30>
 8007cd6:	bd70      	pop	{r4, r5, r6, pc}
 8007cd8:	0781      	lsls	r1, r0, #30
 8007cda:	bf58      	it	pl
 8007cdc:	6963      	ldrpl	r3, [r4, #20]
 8007cde:	60a3      	str	r3, [r4, #8]
 8007ce0:	e7f4      	b.n	8007ccc <__swsetup_r+0xb0>
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	e7f7      	b.n	8007cd6 <__swsetup_r+0xba>
 8007ce6:	bf00      	nop
 8007ce8:	20000008 	.word	0x20000008
 8007cec:	08009458 	.word	0x08009458
 8007cf0:	08009478 	.word	0x08009478
 8007cf4:	08009438 	.word	0x08009438

08007cf8 <abort>:
 8007cf8:	b508      	push	{r3, lr}
 8007cfa:	2006      	movs	r0, #6
 8007cfc:	f000 f898 	bl	8007e30 <raise>
 8007d00:	2001      	movs	r0, #1
 8007d02:	f7f9 fa3d 	bl	8001180 <_exit>

08007d06 <__swhatbuf_r>:
 8007d06:	b570      	push	{r4, r5, r6, lr}
 8007d08:	460e      	mov	r6, r1
 8007d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d0e:	2900      	cmp	r1, #0
 8007d10:	b096      	sub	sp, #88	; 0x58
 8007d12:	4614      	mov	r4, r2
 8007d14:	461d      	mov	r5, r3
 8007d16:	da08      	bge.n	8007d2a <__swhatbuf_r+0x24>
 8007d18:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	602a      	str	r2, [r5, #0]
 8007d20:	061a      	lsls	r2, r3, #24
 8007d22:	d410      	bmi.n	8007d46 <__swhatbuf_r+0x40>
 8007d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d28:	e00e      	b.n	8007d48 <__swhatbuf_r+0x42>
 8007d2a:	466a      	mov	r2, sp
 8007d2c:	f000 f89c 	bl	8007e68 <_fstat_r>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	dbf1      	blt.n	8007d18 <__swhatbuf_r+0x12>
 8007d34:	9a01      	ldr	r2, [sp, #4]
 8007d36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d3e:	425a      	negs	r2, r3
 8007d40:	415a      	adcs	r2, r3
 8007d42:	602a      	str	r2, [r5, #0]
 8007d44:	e7ee      	b.n	8007d24 <__swhatbuf_r+0x1e>
 8007d46:	2340      	movs	r3, #64	; 0x40
 8007d48:	2000      	movs	r0, #0
 8007d4a:	6023      	str	r3, [r4, #0]
 8007d4c:	b016      	add	sp, #88	; 0x58
 8007d4e:	bd70      	pop	{r4, r5, r6, pc}

08007d50 <__smakebuf_r>:
 8007d50:	898b      	ldrh	r3, [r1, #12]
 8007d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d54:	079d      	lsls	r5, r3, #30
 8007d56:	4606      	mov	r6, r0
 8007d58:	460c      	mov	r4, r1
 8007d5a:	d507      	bpl.n	8007d6c <__smakebuf_r+0x1c>
 8007d5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	6123      	str	r3, [r4, #16]
 8007d64:	2301      	movs	r3, #1
 8007d66:	6163      	str	r3, [r4, #20]
 8007d68:	b002      	add	sp, #8
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}
 8007d6c:	ab01      	add	r3, sp, #4
 8007d6e:	466a      	mov	r2, sp
 8007d70:	f7ff ffc9 	bl	8007d06 <__swhatbuf_r>
 8007d74:	9900      	ldr	r1, [sp, #0]
 8007d76:	4605      	mov	r5, r0
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f7fc fd6f 	bl	800485c <_malloc_r>
 8007d7e:	b948      	cbnz	r0, 8007d94 <__smakebuf_r+0x44>
 8007d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d84:	059a      	lsls	r2, r3, #22
 8007d86:	d4ef      	bmi.n	8007d68 <__smakebuf_r+0x18>
 8007d88:	f023 0303 	bic.w	r3, r3, #3
 8007d8c:	f043 0302 	orr.w	r3, r3, #2
 8007d90:	81a3      	strh	r3, [r4, #12]
 8007d92:	e7e3      	b.n	8007d5c <__smakebuf_r+0xc>
 8007d94:	4b0d      	ldr	r3, [pc, #52]	; (8007dcc <__smakebuf_r+0x7c>)
 8007d96:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	6020      	str	r0, [r4, #0]
 8007d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da0:	81a3      	strh	r3, [r4, #12]
 8007da2:	9b00      	ldr	r3, [sp, #0]
 8007da4:	6163      	str	r3, [r4, #20]
 8007da6:	9b01      	ldr	r3, [sp, #4]
 8007da8:	6120      	str	r0, [r4, #16]
 8007daa:	b15b      	cbz	r3, 8007dc4 <__smakebuf_r+0x74>
 8007dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007db0:	4630      	mov	r0, r6
 8007db2:	f000 f86b 	bl	8007e8c <_isatty_r>
 8007db6:	b128      	cbz	r0, 8007dc4 <__smakebuf_r+0x74>
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	f023 0303 	bic.w	r3, r3, #3
 8007dbe:	f043 0301 	orr.w	r3, r3, #1
 8007dc2:	81a3      	strh	r3, [r4, #12]
 8007dc4:	89a0      	ldrh	r0, [r4, #12]
 8007dc6:	4305      	orrs	r5, r0
 8007dc8:	81a5      	strh	r5, [r4, #12]
 8007dca:	e7cd      	b.n	8007d68 <__smakebuf_r+0x18>
 8007dcc:	08007629 	.word	0x08007629

08007dd0 <_malloc_usable_size_r>:
 8007dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd4:	1f18      	subs	r0, r3, #4
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	bfbc      	itt	lt
 8007dda:	580b      	ldrlt	r3, [r1, r0]
 8007ddc:	18c0      	addlt	r0, r0, r3
 8007dde:	4770      	bx	lr

08007de0 <_raise_r>:
 8007de0:	291f      	cmp	r1, #31
 8007de2:	b538      	push	{r3, r4, r5, lr}
 8007de4:	4604      	mov	r4, r0
 8007de6:	460d      	mov	r5, r1
 8007de8:	d904      	bls.n	8007df4 <_raise_r+0x14>
 8007dea:	2316      	movs	r3, #22
 8007dec:	6003      	str	r3, [r0, #0]
 8007dee:	f04f 30ff 	mov.w	r0, #4294967295
 8007df2:	bd38      	pop	{r3, r4, r5, pc}
 8007df4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007df6:	b112      	cbz	r2, 8007dfe <_raise_r+0x1e>
 8007df8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007dfc:	b94b      	cbnz	r3, 8007e12 <_raise_r+0x32>
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 f830 	bl	8007e64 <_getpid_r>
 8007e04:	462a      	mov	r2, r5
 8007e06:	4601      	mov	r1, r0
 8007e08:	4620      	mov	r0, r4
 8007e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e0e:	f000 b817 	b.w	8007e40 <_kill_r>
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d00a      	beq.n	8007e2c <_raise_r+0x4c>
 8007e16:	1c59      	adds	r1, r3, #1
 8007e18:	d103      	bne.n	8007e22 <_raise_r+0x42>
 8007e1a:	2316      	movs	r3, #22
 8007e1c:	6003      	str	r3, [r0, #0]
 8007e1e:	2001      	movs	r0, #1
 8007e20:	e7e7      	b.n	8007df2 <_raise_r+0x12>
 8007e22:	2400      	movs	r4, #0
 8007e24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e28:	4628      	mov	r0, r5
 8007e2a:	4798      	blx	r3
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	e7e0      	b.n	8007df2 <_raise_r+0x12>

08007e30 <raise>:
 8007e30:	4b02      	ldr	r3, [pc, #8]	; (8007e3c <raise+0xc>)
 8007e32:	4601      	mov	r1, r0
 8007e34:	6818      	ldr	r0, [r3, #0]
 8007e36:	f7ff bfd3 	b.w	8007de0 <_raise_r>
 8007e3a:	bf00      	nop
 8007e3c:	20000008 	.word	0x20000008

08007e40 <_kill_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	4d07      	ldr	r5, [pc, #28]	; (8007e60 <_kill_r+0x20>)
 8007e44:	2300      	movs	r3, #0
 8007e46:	4604      	mov	r4, r0
 8007e48:	4608      	mov	r0, r1
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	602b      	str	r3, [r5, #0]
 8007e4e:	f7f9 f987 	bl	8001160 <_kill>
 8007e52:	1c43      	adds	r3, r0, #1
 8007e54:	d102      	bne.n	8007e5c <_kill_r+0x1c>
 8007e56:	682b      	ldr	r3, [r5, #0]
 8007e58:	b103      	cbz	r3, 8007e5c <_kill_r+0x1c>
 8007e5a:	6023      	str	r3, [r4, #0]
 8007e5c:	bd38      	pop	{r3, r4, r5, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000a74 	.word	0x20000a74

08007e64 <_getpid_r>:
 8007e64:	f7f9 b974 	b.w	8001150 <_getpid>

08007e68 <_fstat_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4d07      	ldr	r5, [pc, #28]	; (8007e88 <_fstat_r+0x20>)
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	4604      	mov	r4, r0
 8007e70:	4608      	mov	r0, r1
 8007e72:	4611      	mov	r1, r2
 8007e74:	602b      	str	r3, [r5, #0]
 8007e76:	f7f9 f9d2 	bl	800121e <_fstat>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	d102      	bne.n	8007e84 <_fstat_r+0x1c>
 8007e7e:	682b      	ldr	r3, [r5, #0]
 8007e80:	b103      	cbz	r3, 8007e84 <_fstat_r+0x1c>
 8007e82:	6023      	str	r3, [r4, #0]
 8007e84:	bd38      	pop	{r3, r4, r5, pc}
 8007e86:	bf00      	nop
 8007e88:	20000a74 	.word	0x20000a74

08007e8c <_isatty_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4d06      	ldr	r5, [pc, #24]	; (8007ea8 <_isatty_r+0x1c>)
 8007e90:	2300      	movs	r3, #0
 8007e92:	4604      	mov	r4, r0
 8007e94:	4608      	mov	r0, r1
 8007e96:	602b      	str	r3, [r5, #0]
 8007e98:	f7f9 f9d1 	bl	800123e <_isatty>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d102      	bne.n	8007ea6 <_isatty_r+0x1a>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b103      	cbz	r3, 8007ea6 <_isatty_r+0x1a>
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}
 8007ea8:	20000a74 	.word	0x20000a74

08007eac <round>:
 8007eac:	ec51 0b10 	vmov	r0, r1, d0
 8007eb0:	b570      	push	{r4, r5, r6, lr}
 8007eb2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8007eb6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8007eba:	2c13      	cmp	r4, #19
 8007ebc:	ee10 2a10 	vmov	r2, s0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	dc19      	bgt.n	8007ef8 <round+0x4c>
 8007ec4:	2c00      	cmp	r4, #0
 8007ec6:	da09      	bge.n	8007edc <round+0x30>
 8007ec8:	3401      	adds	r4, #1
 8007eca:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007ece:	d103      	bne.n	8007ed8 <round+0x2c>
 8007ed0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007ed4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007ed8:	2200      	movs	r2, #0
 8007eda:	e028      	b.n	8007f2e <round+0x82>
 8007edc:	4d15      	ldr	r5, [pc, #84]	; (8007f34 <round+0x88>)
 8007ede:	4125      	asrs	r5, r4
 8007ee0:	ea01 0605 	and.w	r6, r1, r5
 8007ee4:	4332      	orrs	r2, r6
 8007ee6:	d00e      	beq.n	8007f06 <round+0x5a>
 8007ee8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007eec:	fa42 f404 	asr.w	r4, r2, r4
 8007ef0:	4423      	add	r3, r4
 8007ef2:	ea23 0305 	bic.w	r3, r3, r5
 8007ef6:	e7ef      	b.n	8007ed8 <round+0x2c>
 8007ef8:	2c33      	cmp	r4, #51	; 0x33
 8007efa:	dd07      	ble.n	8007f0c <round+0x60>
 8007efc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007f00:	d101      	bne.n	8007f06 <round+0x5a>
 8007f02:	f7f8 f9db 	bl	80002bc <__adddf3>
 8007f06:	ec41 0b10 	vmov	d0, r0, r1
 8007f0a:	bd70      	pop	{r4, r5, r6, pc}
 8007f0c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8007f10:	f04f 35ff 	mov.w	r5, #4294967295
 8007f14:	40f5      	lsrs	r5, r6
 8007f16:	4228      	tst	r0, r5
 8007f18:	d0f5      	beq.n	8007f06 <round+0x5a>
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007f20:	fa01 f404 	lsl.w	r4, r1, r4
 8007f24:	1912      	adds	r2, r2, r4
 8007f26:	bf28      	it	cs
 8007f28:	185b      	addcs	r3, r3, r1
 8007f2a:	ea22 0205 	bic.w	r2, r2, r5
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4610      	mov	r0, r2
 8007f32:	e7e8      	b.n	8007f06 <round+0x5a>
 8007f34:	000fffff 	.word	0x000fffff

08007f38 <pow>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	ed2d 8b02 	vpush	{d8}
 8007f3e:	eeb0 8a40 	vmov.f32	s16, s0
 8007f42:	eef0 8a60 	vmov.f32	s17, s1
 8007f46:	ec55 4b11 	vmov	r4, r5, d1
 8007f4a:	f000 f865 	bl	8008018 <__ieee754_pow>
 8007f4e:	4622      	mov	r2, r4
 8007f50:	462b      	mov	r3, r5
 8007f52:	4620      	mov	r0, r4
 8007f54:	4629      	mov	r1, r5
 8007f56:	ec57 6b10 	vmov	r6, r7, d0
 8007f5a:	f7f8 fdff 	bl	8000b5c <__aeabi_dcmpun>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d13b      	bne.n	8007fda <pow+0xa2>
 8007f62:	ec51 0b18 	vmov	r0, r1, d8
 8007f66:	2200      	movs	r2, #0
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f7f8 fdc5 	bl	8000af8 <__aeabi_dcmpeq>
 8007f6e:	b1b8      	cbz	r0, 8007fa0 <pow+0x68>
 8007f70:	2200      	movs	r2, #0
 8007f72:	2300      	movs	r3, #0
 8007f74:	4620      	mov	r0, r4
 8007f76:	4629      	mov	r1, r5
 8007f78:	f7f8 fdbe 	bl	8000af8 <__aeabi_dcmpeq>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d146      	bne.n	800800e <pow+0xd6>
 8007f80:	ec45 4b10 	vmov	d0, r4, r5
 8007f84:	f000 fe61 	bl	8008c4a <finite>
 8007f88:	b338      	cbz	r0, 8007fda <pow+0xa2>
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	4620      	mov	r0, r4
 8007f90:	4629      	mov	r1, r5
 8007f92:	f7f8 fdbb 	bl	8000b0c <__aeabi_dcmplt>
 8007f96:	b300      	cbz	r0, 8007fda <pow+0xa2>
 8007f98:	f7fc fbba 	bl	8004710 <__errno>
 8007f9c:	2322      	movs	r3, #34	; 0x22
 8007f9e:	e01b      	b.n	8007fd8 <pow+0xa0>
 8007fa0:	ec47 6b10 	vmov	d0, r6, r7
 8007fa4:	f000 fe51 	bl	8008c4a <finite>
 8007fa8:	b9e0      	cbnz	r0, 8007fe4 <pow+0xac>
 8007faa:	eeb0 0a48 	vmov.f32	s0, s16
 8007fae:	eef0 0a68 	vmov.f32	s1, s17
 8007fb2:	f000 fe4a 	bl	8008c4a <finite>
 8007fb6:	b1a8      	cbz	r0, 8007fe4 <pow+0xac>
 8007fb8:	ec45 4b10 	vmov	d0, r4, r5
 8007fbc:	f000 fe45 	bl	8008c4a <finite>
 8007fc0:	b180      	cbz	r0, 8007fe4 <pow+0xac>
 8007fc2:	4632      	mov	r2, r6
 8007fc4:	463b      	mov	r3, r7
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	4639      	mov	r1, r7
 8007fca:	f7f8 fdc7 	bl	8000b5c <__aeabi_dcmpun>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d0e2      	beq.n	8007f98 <pow+0x60>
 8007fd2:	f7fc fb9d 	bl	8004710 <__errno>
 8007fd6:	2321      	movs	r3, #33	; 0x21
 8007fd8:	6003      	str	r3, [r0, #0]
 8007fda:	ecbd 8b02 	vpop	{d8}
 8007fde:	ec47 6b10 	vmov	d0, r6, r7
 8007fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	4630      	mov	r0, r6
 8007fea:	4639      	mov	r1, r7
 8007fec:	f7f8 fd84 	bl	8000af8 <__aeabi_dcmpeq>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d0f2      	beq.n	8007fda <pow+0xa2>
 8007ff4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ff8:	eef0 0a68 	vmov.f32	s1, s17
 8007ffc:	f000 fe25 	bl	8008c4a <finite>
 8008000:	2800      	cmp	r0, #0
 8008002:	d0ea      	beq.n	8007fda <pow+0xa2>
 8008004:	ec45 4b10 	vmov	d0, r4, r5
 8008008:	f000 fe1f 	bl	8008c4a <finite>
 800800c:	e7c3      	b.n	8007f96 <pow+0x5e>
 800800e:	4f01      	ldr	r7, [pc, #4]	; (8008014 <pow+0xdc>)
 8008010:	2600      	movs	r6, #0
 8008012:	e7e2      	b.n	8007fda <pow+0xa2>
 8008014:	3ff00000 	.word	0x3ff00000

08008018 <__ieee754_pow>:
 8008018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	ed2d 8b06 	vpush	{d8-d10}
 8008020:	b089      	sub	sp, #36	; 0x24
 8008022:	ed8d 1b00 	vstr	d1, [sp]
 8008026:	e9dd 2900 	ldrd	r2, r9, [sp]
 800802a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800802e:	ea58 0102 	orrs.w	r1, r8, r2
 8008032:	ec57 6b10 	vmov	r6, r7, d0
 8008036:	d115      	bne.n	8008064 <__ieee754_pow+0x4c>
 8008038:	19b3      	adds	r3, r6, r6
 800803a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800803e:	4152      	adcs	r2, r2
 8008040:	4299      	cmp	r1, r3
 8008042:	4b89      	ldr	r3, [pc, #548]	; (8008268 <__ieee754_pow+0x250>)
 8008044:	4193      	sbcs	r3, r2
 8008046:	f080 84d2 	bcs.w	80089ee <__ieee754_pow+0x9d6>
 800804a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800804e:	4630      	mov	r0, r6
 8008050:	4639      	mov	r1, r7
 8008052:	f7f8 f933 	bl	80002bc <__adddf3>
 8008056:	ec41 0b10 	vmov	d0, r0, r1
 800805a:	b009      	add	sp, #36	; 0x24
 800805c:	ecbd 8b06 	vpop	{d8-d10}
 8008060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008064:	4b81      	ldr	r3, [pc, #516]	; (800826c <__ieee754_pow+0x254>)
 8008066:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800806a:	429c      	cmp	r4, r3
 800806c:	ee10 aa10 	vmov	sl, s0
 8008070:	463d      	mov	r5, r7
 8008072:	dc06      	bgt.n	8008082 <__ieee754_pow+0x6a>
 8008074:	d101      	bne.n	800807a <__ieee754_pow+0x62>
 8008076:	2e00      	cmp	r6, #0
 8008078:	d1e7      	bne.n	800804a <__ieee754_pow+0x32>
 800807a:	4598      	cmp	r8, r3
 800807c:	dc01      	bgt.n	8008082 <__ieee754_pow+0x6a>
 800807e:	d10f      	bne.n	80080a0 <__ieee754_pow+0x88>
 8008080:	b172      	cbz	r2, 80080a0 <__ieee754_pow+0x88>
 8008082:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008086:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800808a:	ea55 050a 	orrs.w	r5, r5, sl
 800808e:	d1dc      	bne.n	800804a <__ieee754_pow+0x32>
 8008090:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008094:	18db      	adds	r3, r3, r3
 8008096:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800809a:	4152      	adcs	r2, r2
 800809c:	429d      	cmp	r5, r3
 800809e:	e7d0      	b.n	8008042 <__ieee754_pow+0x2a>
 80080a0:	2d00      	cmp	r5, #0
 80080a2:	da3b      	bge.n	800811c <__ieee754_pow+0x104>
 80080a4:	4b72      	ldr	r3, [pc, #456]	; (8008270 <__ieee754_pow+0x258>)
 80080a6:	4598      	cmp	r8, r3
 80080a8:	dc51      	bgt.n	800814e <__ieee754_pow+0x136>
 80080aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80080ae:	4598      	cmp	r8, r3
 80080b0:	f340 84ac 	ble.w	8008a0c <__ieee754_pow+0x9f4>
 80080b4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80080b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80080bc:	2b14      	cmp	r3, #20
 80080be:	dd0f      	ble.n	80080e0 <__ieee754_pow+0xc8>
 80080c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80080c4:	fa22 f103 	lsr.w	r1, r2, r3
 80080c8:	fa01 f303 	lsl.w	r3, r1, r3
 80080cc:	4293      	cmp	r3, r2
 80080ce:	f040 849d 	bne.w	8008a0c <__ieee754_pow+0x9f4>
 80080d2:	f001 0101 	and.w	r1, r1, #1
 80080d6:	f1c1 0302 	rsb	r3, r1, #2
 80080da:	9304      	str	r3, [sp, #16]
 80080dc:	b182      	cbz	r2, 8008100 <__ieee754_pow+0xe8>
 80080de:	e05f      	b.n	80081a0 <__ieee754_pow+0x188>
 80080e0:	2a00      	cmp	r2, #0
 80080e2:	d15b      	bne.n	800819c <__ieee754_pow+0x184>
 80080e4:	f1c3 0314 	rsb	r3, r3, #20
 80080e8:	fa48 f103 	asr.w	r1, r8, r3
 80080ec:	fa01 f303 	lsl.w	r3, r1, r3
 80080f0:	4543      	cmp	r3, r8
 80080f2:	f040 8488 	bne.w	8008a06 <__ieee754_pow+0x9ee>
 80080f6:	f001 0101 	and.w	r1, r1, #1
 80080fa:	f1c1 0302 	rsb	r3, r1, #2
 80080fe:	9304      	str	r3, [sp, #16]
 8008100:	4b5c      	ldr	r3, [pc, #368]	; (8008274 <__ieee754_pow+0x25c>)
 8008102:	4598      	cmp	r8, r3
 8008104:	d132      	bne.n	800816c <__ieee754_pow+0x154>
 8008106:	f1b9 0f00 	cmp.w	r9, #0
 800810a:	f280 8478 	bge.w	80089fe <__ieee754_pow+0x9e6>
 800810e:	4959      	ldr	r1, [pc, #356]	; (8008274 <__ieee754_pow+0x25c>)
 8008110:	4632      	mov	r2, r6
 8008112:	463b      	mov	r3, r7
 8008114:	2000      	movs	r0, #0
 8008116:	f7f8 fbb1 	bl	800087c <__aeabi_ddiv>
 800811a:	e79c      	b.n	8008056 <__ieee754_pow+0x3e>
 800811c:	2300      	movs	r3, #0
 800811e:	9304      	str	r3, [sp, #16]
 8008120:	2a00      	cmp	r2, #0
 8008122:	d13d      	bne.n	80081a0 <__ieee754_pow+0x188>
 8008124:	4b51      	ldr	r3, [pc, #324]	; (800826c <__ieee754_pow+0x254>)
 8008126:	4598      	cmp	r8, r3
 8008128:	d1ea      	bne.n	8008100 <__ieee754_pow+0xe8>
 800812a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800812e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008132:	ea53 030a 	orrs.w	r3, r3, sl
 8008136:	f000 845a 	beq.w	80089ee <__ieee754_pow+0x9d6>
 800813a:	4b4f      	ldr	r3, [pc, #316]	; (8008278 <__ieee754_pow+0x260>)
 800813c:	429c      	cmp	r4, r3
 800813e:	dd08      	ble.n	8008152 <__ieee754_pow+0x13a>
 8008140:	f1b9 0f00 	cmp.w	r9, #0
 8008144:	f2c0 8457 	blt.w	80089f6 <__ieee754_pow+0x9de>
 8008148:	e9dd 0100 	ldrd	r0, r1, [sp]
 800814c:	e783      	b.n	8008056 <__ieee754_pow+0x3e>
 800814e:	2302      	movs	r3, #2
 8008150:	e7e5      	b.n	800811e <__ieee754_pow+0x106>
 8008152:	f1b9 0f00 	cmp.w	r9, #0
 8008156:	f04f 0000 	mov.w	r0, #0
 800815a:	f04f 0100 	mov.w	r1, #0
 800815e:	f6bf af7a 	bge.w	8008056 <__ieee754_pow+0x3e>
 8008162:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008166:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800816a:	e774      	b.n	8008056 <__ieee754_pow+0x3e>
 800816c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008170:	d106      	bne.n	8008180 <__ieee754_pow+0x168>
 8008172:	4632      	mov	r2, r6
 8008174:	463b      	mov	r3, r7
 8008176:	4630      	mov	r0, r6
 8008178:	4639      	mov	r1, r7
 800817a:	f7f8 fa55 	bl	8000628 <__aeabi_dmul>
 800817e:	e76a      	b.n	8008056 <__ieee754_pow+0x3e>
 8008180:	4b3e      	ldr	r3, [pc, #248]	; (800827c <__ieee754_pow+0x264>)
 8008182:	4599      	cmp	r9, r3
 8008184:	d10c      	bne.n	80081a0 <__ieee754_pow+0x188>
 8008186:	2d00      	cmp	r5, #0
 8008188:	db0a      	blt.n	80081a0 <__ieee754_pow+0x188>
 800818a:	ec47 6b10 	vmov	d0, r6, r7
 800818e:	b009      	add	sp, #36	; 0x24
 8008190:	ecbd 8b06 	vpop	{d8-d10}
 8008194:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008198:	f000 bc6c 	b.w	8008a74 <__ieee754_sqrt>
 800819c:	2300      	movs	r3, #0
 800819e:	9304      	str	r3, [sp, #16]
 80081a0:	ec47 6b10 	vmov	d0, r6, r7
 80081a4:	f000 fd48 	bl	8008c38 <fabs>
 80081a8:	ec51 0b10 	vmov	r0, r1, d0
 80081ac:	f1ba 0f00 	cmp.w	sl, #0
 80081b0:	d129      	bne.n	8008206 <__ieee754_pow+0x1ee>
 80081b2:	b124      	cbz	r4, 80081be <__ieee754_pow+0x1a6>
 80081b4:	4b2f      	ldr	r3, [pc, #188]	; (8008274 <__ieee754_pow+0x25c>)
 80081b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d123      	bne.n	8008206 <__ieee754_pow+0x1ee>
 80081be:	f1b9 0f00 	cmp.w	r9, #0
 80081c2:	da05      	bge.n	80081d0 <__ieee754_pow+0x1b8>
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	2000      	movs	r0, #0
 80081ca:	492a      	ldr	r1, [pc, #168]	; (8008274 <__ieee754_pow+0x25c>)
 80081cc:	f7f8 fb56 	bl	800087c <__aeabi_ddiv>
 80081d0:	2d00      	cmp	r5, #0
 80081d2:	f6bf af40 	bge.w	8008056 <__ieee754_pow+0x3e>
 80081d6:	9b04      	ldr	r3, [sp, #16]
 80081d8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80081dc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80081e0:	4323      	orrs	r3, r4
 80081e2:	d108      	bne.n	80081f6 <__ieee754_pow+0x1de>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4610      	mov	r0, r2
 80081ea:	4619      	mov	r1, r3
 80081ec:	f7f8 f864 	bl	80002b8 <__aeabi_dsub>
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	e78f      	b.n	8008116 <__ieee754_pow+0xfe>
 80081f6:	9b04      	ldr	r3, [sp, #16]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	f47f af2c 	bne.w	8008056 <__ieee754_pow+0x3e>
 80081fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008202:	4619      	mov	r1, r3
 8008204:	e727      	b.n	8008056 <__ieee754_pow+0x3e>
 8008206:	0feb      	lsrs	r3, r5, #31
 8008208:	3b01      	subs	r3, #1
 800820a:	9306      	str	r3, [sp, #24]
 800820c:	9a06      	ldr	r2, [sp, #24]
 800820e:	9b04      	ldr	r3, [sp, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	d102      	bne.n	800821a <__ieee754_pow+0x202>
 8008214:	4632      	mov	r2, r6
 8008216:	463b      	mov	r3, r7
 8008218:	e7e6      	b.n	80081e8 <__ieee754_pow+0x1d0>
 800821a:	4b19      	ldr	r3, [pc, #100]	; (8008280 <__ieee754_pow+0x268>)
 800821c:	4598      	cmp	r8, r3
 800821e:	f340 80fb 	ble.w	8008418 <__ieee754_pow+0x400>
 8008222:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008226:	4598      	cmp	r8, r3
 8008228:	4b13      	ldr	r3, [pc, #76]	; (8008278 <__ieee754_pow+0x260>)
 800822a:	dd0c      	ble.n	8008246 <__ieee754_pow+0x22e>
 800822c:	429c      	cmp	r4, r3
 800822e:	dc0f      	bgt.n	8008250 <__ieee754_pow+0x238>
 8008230:	f1b9 0f00 	cmp.w	r9, #0
 8008234:	da0f      	bge.n	8008256 <__ieee754_pow+0x23e>
 8008236:	2000      	movs	r0, #0
 8008238:	b009      	add	sp, #36	; 0x24
 800823a:	ecbd 8b06 	vpop	{d8-d10}
 800823e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008242:	f000 bcf0 	b.w	8008c26 <__math_oflow>
 8008246:	429c      	cmp	r4, r3
 8008248:	dbf2      	blt.n	8008230 <__ieee754_pow+0x218>
 800824a:	4b0a      	ldr	r3, [pc, #40]	; (8008274 <__ieee754_pow+0x25c>)
 800824c:	429c      	cmp	r4, r3
 800824e:	dd19      	ble.n	8008284 <__ieee754_pow+0x26c>
 8008250:	f1b9 0f00 	cmp.w	r9, #0
 8008254:	dcef      	bgt.n	8008236 <__ieee754_pow+0x21e>
 8008256:	2000      	movs	r0, #0
 8008258:	b009      	add	sp, #36	; 0x24
 800825a:	ecbd 8b06 	vpop	{d8-d10}
 800825e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008262:	f000 bcd7 	b.w	8008c14 <__math_uflow>
 8008266:	bf00      	nop
 8008268:	fff00000 	.word	0xfff00000
 800826c:	7ff00000 	.word	0x7ff00000
 8008270:	433fffff 	.word	0x433fffff
 8008274:	3ff00000 	.word	0x3ff00000
 8008278:	3fefffff 	.word	0x3fefffff
 800827c:	3fe00000 	.word	0x3fe00000
 8008280:	41e00000 	.word	0x41e00000
 8008284:	4b60      	ldr	r3, [pc, #384]	; (8008408 <__ieee754_pow+0x3f0>)
 8008286:	2200      	movs	r2, #0
 8008288:	f7f8 f816 	bl	80002b8 <__aeabi_dsub>
 800828c:	a354      	add	r3, pc, #336	; (adr r3, 80083e0 <__ieee754_pow+0x3c8>)
 800828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008292:	4604      	mov	r4, r0
 8008294:	460d      	mov	r5, r1
 8008296:	f7f8 f9c7 	bl	8000628 <__aeabi_dmul>
 800829a:	a353      	add	r3, pc, #332	; (adr r3, 80083e8 <__ieee754_pow+0x3d0>)
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	4606      	mov	r6, r0
 80082a2:	460f      	mov	r7, r1
 80082a4:	4620      	mov	r0, r4
 80082a6:	4629      	mov	r1, r5
 80082a8:	f7f8 f9be 	bl	8000628 <__aeabi_dmul>
 80082ac:	4b57      	ldr	r3, [pc, #348]	; (800840c <__ieee754_pow+0x3f4>)
 80082ae:	4682      	mov	sl, r0
 80082b0:	468b      	mov	fp, r1
 80082b2:	2200      	movs	r2, #0
 80082b4:	4620      	mov	r0, r4
 80082b6:	4629      	mov	r1, r5
 80082b8:	f7f8 f9b6 	bl	8000628 <__aeabi_dmul>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	a14b      	add	r1, pc, #300	; (adr r1, 80083f0 <__ieee754_pow+0x3d8>)
 80082c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082c6:	f7f7 fff7 	bl	80002b8 <__aeabi_dsub>
 80082ca:	4622      	mov	r2, r4
 80082cc:	462b      	mov	r3, r5
 80082ce:	f7f8 f9ab 	bl	8000628 <__aeabi_dmul>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	2000      	movs	r0, #0
 80082d8:	494d      	ldr	r1, [pc, #308]	; (8008410 <__ieee754_pow+0x3f8>)
 80082da:	f7f7 ffed 	bl	80002b8 <__aeabi_dsub>
 80082de:	4622      	mov	r2, r4
 80082e0:	4680      	mov	r8, r0
 80082e2:	4689      	mov	r9, r1
 80082e4:	462b      	mov	r3, r5
 80082e6:	4620      	mov	r0, r4
 80082e8:	4629      	mov	r1, r5
 80082ea:	f7f8 f99d 	bl	8000628 <__aeabi_dmul>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4640      	mov	r0, r8
 80082f4:	4649      	mov	r1, r9
 80082f6:	f7f8 f997 	bl	8000628 <__aeabi_dmul>
 80082fa:	a33f      	add	r3, pc, #252	; (adr r3, 80083f8 <__ieee754_pow+0x3e0>)
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	f7f8 f992 	bl	8000628 <__aeabi_dmul>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	4650      	mov	r0, sl
 800830a:	4659      	mov	r1, fp
 800830c:	f7f7 ffd4 	bl	80002b8 <__aeabi_dsub>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4680      	mov	r8, r0
 8008316:	4689      	mov	r9, r1
 8008318:	4630      	mov	r0, r6
 800831a:	4639      	mov	r1, r7
 800831c:	f7f7 ffce 	bl	80002bc <__adddf3>
 8008320:	2000      	movs	r0, #0
 8008322:	4632      	mov	r2, r6
 8008324:	463b      	mov	r3, r7
 8008326:	4604      	mov	r4, r0
 8008328:	460d      	mov	r5, r1
 800832a:	f7f7 ffc5 	bl	80002b8 <__aeabi_dsub>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4640      	mov	r0, r8
 8008334:	4649      	mov	r1, r9
 8008336:	f7f7 ffbf 	bl	80002b8 <__aeabi_dsub>
 800833a:	9b04      	ldr	r3, [sp, #16]
 800833c:	9a06      	ldr	r2, [sp, #24]
 800833e:	3b01      	subs	r3, #1
 8008340:	4313      	orrs	r3, r2
 8008342:	4682      	mov	sl, r0
 8008344:	468b      	mov	fp, r1
 8008346:	f040 81e7 	bne.w	8008718 <__ieee754_pow+0x700>
 800834a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008400 <__ieee754_pow+0x3e8>
 800834e:	eeb0 8a47 	vmov.f32	s16, s14
 8008352:	eef0 8a67 	vmov.f32	s17, s15
 8008356:	e9dd 6700 	ldrd	r6, r7, [sp]
 800835a:	2600      	movs	r6, #0
 800835c:	4632      	mov	r2, r6
 800835e:	463b      	mov	r3, r7
 8008360:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008364:	f7f7 ffa8 	bl	80002b8 <__aeabi_dsub>
 8008368:	4622      	mov	r2, r4
 800836a:	462b      	mov	r3, r5
 800836c:	f7f8 f95c 	bl	8000628 <__aeabi_dmul>
 8008370:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008374:	4680      	mov	r8, r0
 8008376:	4689      	mov	r9, r1
 8008378:	4650      	mov	r0, sl
 800837a:	4659      	mov	r1, fp
 800837c:	f7f8 f954 	bl	8000628 <__aeabi_dmul>
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	4640      	mov	r0, r8
 8008386:	4649      	mov	r1, r9
 8008388:	f7f7 ff98 	bl	80002bc <__adddf3>
 800838c:	4632      	mov	r2, r6
 800838e:	463b      	mov	r3, r7
 8008390:	4680      	mov	r8, r0
 8008392:	4689      	mov	r9, r1
 8008394:	4620      	mov	r0, r4
 8008396:	4629      	mov	r1, r5
 8008398:	f7f8 f946 	bl	8000628 <__aeabi_dmul>
 800839c:	460b      	mov	r3, r1
 800839e:	4604      	mov	r4, r0
 80083a0:	460d      	mov	r5, r1
 80083a2:	4602      	mov	r2, r0
 80083a4:	4649      	mov	r1, r9
 80083a6:	4640      	mov	r0, r8
 80083a8:	f7f7 ff88 	bl	80002bc <__adddf3>
 80083ac:	4b19      	ldr	r3, [pc, #100]	; (8008414 <__ieee754_pow+0x3fc>)
 80083ae:	4299      	cmp	r1, r3
 80083b0:	ec45 4b19 	vmov	d9, r4, r5
 80083b4:	4606      	mov	r6, r0
 80083b6:	460f      	mov	r7, r1
 80083b8:	468b      	mov	fp, r1
 80083ba:	f340 82f1 	ble.w	80089a0 <__ieee754_pow+0x988>
 80083be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80083c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80083c6:	4303      	orrs	r3, r0
 80083c8:	f000 81e4 	beq.w	8008794 <__ieee754_pow+0x77c>
 80083cc:	ec51 0b18 	vmov	r0, r1, d8
 80083d0:	2200      	movs	r2, #0
 80083d2:	2300      	movs	r3, #0
 80083d4:	f7f8 fb9a 	bl	8000b0c <__aeabi_dcmplt>
 80083d8:	3800      	subs	r0, #0
 80083da:	bf18      	it	ne
 80083dc:	2001      	movne	r0, #1
 80083de:	e72b      	b.n	8008238 <__ieee754_pow+0x220>
 80083e0:	60000000 	.word	0x60000000
 80083e4:	3ff71547 	.word	0x3ff71547
 80083e8:	f85ddf44 	.word	0xf85ddf44
 80083ec:	3e54ae0b 	.word	0x3e54ae0b
 80083f0:	55555555 	.word	0x55555555
 80083f4:	3fd55555 	.word	0x3fd55555
 80083f8:	652b82fe 	.word	0x652b82fe
 80083fc:	3ff71547 	.word	0x3ff71547
 8008400:	00000000 	.word	0x00000000
 8008404:	bff00000 	.word	0xbff00000
 8008408:	3ff00000 	.word	0x3ff00000
 800840c:	3fd00000 	.word	0x3fd00000
 8008410:	3fe00000 	.word	0x3fe00000
 8008414:	408fffff 	.word	0x408fffff
 8008418:	4bd5      	ldr	r3, [pc, #852]	; (8008770 <__ieee754_pow+0x758>)
 800841a:	402b      	ands	r3, r5
 800841c:	2200      	movs	r2, #0
 800841e:	b92b      	cbnz	r3, 800842c <__ieee754_pow+0x414>
 8008420:	4bd4      	ldr	r3, [pc, #848]	; (8008774 <__ieee754_pow+0x75c>)
 8008422:	f7f8 f901 	bl	8000628 <__aeabi_dmul>
 8008426:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800842a:	460c      	mov	r4, r1
 800842c:	1523      	asrs	r3, r4, #20
 800842e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008432:	4413      	add	r3, r2
 8008434:	9305      	str	r3, [sp, #20]
 8008436:	4bd0      	ldr	r3, [pc, #832]	; (8008778 <__ieee754_pow+0x760>)
 8008438:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800843c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008440:	429c      	cmp	r4, r3
 8008442:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008446:	dd08      	ble.n	800845a <__ieee754_pow+0x442>
 8008448:	4bcc      	ldr	r3, [pc, #816]	; (800877c <__ieee754_pow+0x764>)
 800844a:	429c      	cmp	r4, r3
 800844c:	f340 8162 	ble.w	8008714 <__ieee754_pow+0x6fc>
 8008450:	9b05      	ldr	r3, [sp, #20]
 8008452:	3301      	adds	r3, #1
 8008454:	9305      	str	r3, [sp, #20]
 8008456:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800845a:	2400      	movs	r4, #0
 800845c:	00e3      	lsls	r3, r4, #3
 800845e:	9307      	str	r3, [sp, #28]
 8008460:	4bc7      	ldr	r3, [pc, #796]	; (8008780 <__ieee754_pow+0x768>)
 8008462:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008466:	ed93 7b00 	vldr	d7, [r3]
 800846a:	4629      	mov	r1, r5
 800846c:	ec53 2b17 	vmov	r2, r3, d7
 8008470:	eeb0 9a47 	vmov.f32	s18, s14
 8008474:	eef0 9a67 	vmov.f32	s19, s15
 8008478:	4682      	mov	sl, r0
 800847a:	f7f7 ff1d 	bl	80002b8 <__aeabi_dsub>
 800847e:	4652      	mov	r2, sl
 8008480:	4606      	mov	r6, r0
 8008482:	460f      	mov	r7, r1
 8008484:	462b      	mov	r3, r5
 8008486:	ec51 0b19 	vmov	r0, r1, d9
 800848a:	f7f7 ff17 	bl	80002bc <__adddf3>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	2000      	movs	r0, #0
 8008494:	49bb      	ldr	r1, [pc, #748]	; (8008784 <__ieee754_pow+0x76c>)
 8008496:	f7f8 f9f1 	bl	800087c <__aeabi_ddiv>
 800849a:	ec41 0b1a 	vmov	d10, r0, r1
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4630      	mov	r0, r6
 80084a4:	4639      	mov	r1, r7
 80084a6:	f7f8 f8bf 	bl	8000628 <__aeabi_dmul>
 80084aa:	2300      	movs	r3, #0
 80084ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084b0:	9302      	str	r3, [sp, #8]
 80084b2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80084b6:	46ab      	mov	fp, r5
 80084b8:	106d      	asrs	r5, r5, #1
 80084ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80084be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80084c2:	ec41 0b18 	vmov	d8, r0, r1
 80084c6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80084ca:	2200      	movs	r2, #0
 80084cc:	4640      	mov	r0, r8
 80084ce:	4649      	mov	r1, r9
 80084d0:	4614      	mov	r4, r2
 80084d2:	461d      	mov	r5, r3
 80084d4:	f7f8 f8a8 	bl	8000628 <__aeabi_dmul>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4630      	mov	r0, r6
 80084de:	4639      	mov	r1, r7
 80084e0:	f7f7 feea 	bl	80002b8 <__aeabi_dsub>
 80084e4:	ec53 2b19 	vmov	r2, r3, d9
 80084e8:	4606      	mov	r6, r0
 80084ea:	460f      	mov	r7, r1
 80084ec:	4620      	mov	r0, r4
 80084ee:	4629      	mov	r1, r5
 80084f0:	f7f7 fee2 	bl	80002b8 <__aeabi_dsub>
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	4650      	mov	r0, sl
 80084fa:	4659      	mov	r1, fp
 80084fc:	f7f7 fedc 	bl	80002b8 <__aeabi_dsub>
 8008500:	4642      	mov	r2, r8
 8008502:	464b      	mov	r3, r9
 8008504:	f7f8 f890 	bl	8000628 <__aeabi_dmul>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	4630      	mov	r0, r6
 800850e:	4639      	mov	r1, r7
 8008510:	f7f7 fed2 	bl	80002b8 <__aeabi_dsub>
 8008514:	ec53 2b1a 	vmov	r2, r3, d10
 8008518:	f7f8 f886 	bl	8000628 <__aeabi_dmul>
 800851c:	ec53 2b18 	vmov	r2, r3, d8
 8008520:	ec41 0b19 	vmov	d9, r0, r1
 8008524:	ec51 0b18 	vmov	r0, r1, d8
 8008528:	f7f8 f87e 	bl	8000628 <__aeabi_dmul>
 800852c:	a37c      	add	r3, pc, #496	; (adr r3, 8008720 <__ieee754_pow+0x708>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	4604      	mov	r4, r0
 8008534:	460d      	mov	r5, r1
 8008536:	f7f8 f877 	bl	8000628 <__aeabi_dmul>
 800853a:	a37b      	add	r3, pc, #492	; (adr r3, 8008728 <__ieee754_pow+0x710>)
 800853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008540:	f7f7 febc 	bl	80002bc <__adddf3>
 8008544:	4622      	mov	r2, r4
 8008546:	462b      	mov	r3, r5
 8008548:	f7f8 f86e 	bl	8000628 <__aeabi_dmul>
 800854c:	a378      	add	r3, pc, #480	; (adr r3, 8008730 <__ieee754_pow+0x718>)
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	f7f7 feb3 	bl	80002bc <__adddf3>
 8008556:	4622      	mov	r2, r4
 8008558:	462b      	mov	r3, r5
 800855a:	f7f8 f865 	bl	8000628 <__aeabi_dmul>
 800855e:	a376      	add	r3, pc, #472	; (adr r3, 8008738 <__ieee754_pow+0x720>)
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	f7f7 feaa 	bl	80002bc <__adddf3>
 8008568:	4622      	mov	r2, r4
 800856a:	462b      	mov	r3, r5
 800856c:	f7f8 f85c 	bl	8000628 <__aeabi_dmul>
 8008570:	a373      	add	r3, pc, #460	; (adr r3, 8008740 <__ieee754_pow+0x728>)
 8008572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008576:	f7f7 fea1 	bl	80002bc <__adddf3>
 800857a:	4622      	mov	r2, r4
 800857c:	462b      	mov	r3, r5
 800857e:	f7f8 f853 	bl	8000628 <__aeabi_dmul>
 8008582:	a371      	add	r3, pc, #452	; (adr r3, 8008748 <__ieee754_pow+0x730>)
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	f7f7 fe98 	bl	80002bc <__adddf3>
 800858c:	4622      	mov	r2, r4
 800858e:	4606      	mov	r6, r0
 8008590:	460f      	mov	r7, r1
 8008592:	462b      	mov	r3, r5
 8008594:	4620      	mov	r0, r4
 8008596:	4629      	mov	r1, r5
 8008598:	f7f8 f846 	bl	8000628 <__aeabi_dmul>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	4630      	mov	r0, r6
 80085a2:	4639      	mov	r1, r7
 80085a4:	f7f8 f840 	bl	8000628 <__aeabi_dmul>
 80085a8:	4642      	mov	r2, r8
 80085aa:	4604      	mov	r4, r0
 80085ac:	460d      	mov	r5, r1
 80085ae:	464b      	mov	r3, r9
 80085b0:	ec51 0b18 	vmov	r0, r1, d8
 80085b4:	f7f7 fe82 	bl	80002bc <__adddf3>
 80085b8:	ec53 2b19 	vmov	r2, r3, d9
 80085bc:	f7f8 f834 	bl	8000628 <__aeabi_dmul>
 80085c0:	4622      	mov	r2, r4
 80085c2:	462b      	mov	r3, r5
 80085c4:	f7f7 fe7a 	bl	80002bc <__adddf3>
 80085c8:	4642      	mov	r2, r8
 80085ca:	4682      	mov	sl, r0
 80085cc:	468b      	mov	fp, r1
 80085ce:	464b      	mov	r3, r9
 80085d0:	4640      	mov	r0, r8
 80085d2:	4649      	mov	r1, r9
 80085d4:	f7f8 f828 	bl	8000628 <__aeabi_dmul>
 80085d8:	4b6b      	ldr	r3, [pc, #428]	; (8008788 <__ieee754_pow+0x770>)
 80085da:	2200      	movs	r2, #0
 80085dc:	4606      	mov	r6, r0
 80085de:	460f      	mov	r7, r1
 80085e0:	f7f7 fe6c 	bl	80002bc <__adddf3>
 80085e4:	4652      	mov	r2, sl
 80085e6:	465b      	mov	r3, fp
 80085e8:	f7f7 fe68 	bl	80002bc <__adddf3>
 80085ec:	2000      	movs	r0, #0
 80085ee:	4604      	mov	r4, r0
 80085f0:	460d      	mov	r5, r1
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	4640      	mov	r0, r8
 80085f8:	4649      	mov	r1, r9
 80085fa:	f7f8 f815 	bl	8000628 <__aeabi_dmul>
 80085fe:	4b62      	ldr	r3, [pc, #392]	; (8008788 <__ieee754_pow+0x770>)
 8008600:	4680      	mov	r8, r0
 8008602:	4689      	mov	r9, r1
 8008604:	2200      	movs	r2, #0
 8008606:	4620      	mov	r0, r4
 8008608:	4629      	mov	r1, r5
 800860a:	f7f7 fe55 	bl	80002b8 <__aeabi_dsub>
 800860e:	4632      	mov	r2, r6
 8008610:	463b      	mov	r3, r7
 8008612:	f7f7 fe51 	bl	80002b8 <__aeabi_dsub>
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	4650      	mov	r0, sl
 800861c:	4659      	mov	r1, fp
 800861e:	f7f7 fe4b 	bl	80002b8 <__aeabi_dsub>
 8008622:	ec53 2b18 	vmov	r2, r3, d8
 8008626:	f7f7 ffff 	bl	8000628 <__aeabi_dmul>
 800862a:	4622      	mov	r2, r4
 800862c:	4606      	mov	r6, r0
 800862e:	460f      	mov	r7, r1
 8008630:	462b      	mov	r3, r5
 8008632:	ec51 0b19 	vmov	r0, r1, d9
 8008636:	f7f7 fff7 	bl	8000628 <__aeabi_dmul>
 800863a:	4602      	mov	r2, r0
 800863c:	460b      	mov	r3, r1
 800863e:	4630      	mov	r0, r6
 8008640:	4639      	mov	r1, r7
 8008642:	f7f7 fe3b 	bl	80002bc <__adddf3>
 8008646:	4606      	mov	r6, r0
 8008648:	460f      	mov	r7, r1
 800864a:	4602      	mov	r2, r0
 800864c:	460b      	mov	r3, r1
 800864e:	4640      	mov	r0, r8
 8008650:	4649      	mov	r1, r9
 8008652:	f7f7 fe33 	bl	80002bc <__adddf3>
 8008656:	a33e      	add	r3, pc, #248	; (adr r3, 8008750 <__ieee754_pow+0x738>)
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	2000      	movs	r0, #0
 800865e:	4604      	mov	r4, r0
 8008660:	460d      	mov	r5, r1
 8008662:	f7f7 ffe1 	bl	8000628 <__aeabi_dmul>
 8008666:	4642      	mov	r2, r8
 8008668:	ec41 0b18 	vmov	d8, r0, r1
 800866c:	464b      	mov	r3, r9
 800866e:	4620      	mov	r0, r4
 8008670:	4629      	mov	r1, r5
 8008672:	f7f7 fe21 	bl	80002b8 <__aeabi_dsub>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	4630      	mov	r0, r6
 800867c:	4639      	mov	r1, r7
 800867e:	f7f7 fe1b 	bl	80002b8 <__aeabi_dsub>
 8008682:	a335      	add	r3, pc, #212	; (adr r3, 8008758 <__ieee754_pow+0x740>)
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	f7f7 ffce 	bl	8000628 <__aeabi_dmul>
 800868c:	a334      	add	r3, pc, #208	; (adr r3, 8008760 <__ieee754_pow+0x748>)
 800868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008692:	4606      	mov	r6, r0
 8008694:	460f      	mov	r7, r1
 8008696:	4620      	mov	r0, r4
 8008698:	4629      	mov	r1, r5
 800869a:	f7f7 ffc5 	bl	8000628 <__aeabi_dmul>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	4630      	mov	r0, r6
 80086a4:	4639      	mov	r1, r7
 80086a6:	f7f7 fe09 	bl	80002bc <__adddf3>
 80086aa:	9a07      	ldr	r2, [sp, #28]
 80086ac:	4b37      	ldr	r3, [pc, #220]	; (800878c <__ieee754_pow+0x774>)
 80086ae:	4413      	add	r3, r2
 80086b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b4:	f7f7 fe02 	bl	80002bc <__adddf3>
 80086b8:	4682      	mov	sl, r0
 80086ba:	9805      	ldr	r0, [sp, #20]
 80086bc:	468b      	mov	fp, r1
 80086be:	f7f7 ff49 	bl	8000554 <__aeabi_i2d>
 80086c2:	9a07      	ldr	r2, [sp, #28]
 80086c4:	4b32      	ldr	r3, [pc, #200]	; (8008790 <__ieee754_pow+0x778>)
 80086c6:	4413      	add	r3, r2
 80086c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086cc:	4606      	mov	r6, r0
 80086ce:	460f      	mov	r7, r1
 80086d0:	4652      	mov	r2, sl
 80086d2:	465b      	mov	r3, fp
 80086d4:	ec51 0b18 	vmov	r0, r1, d8
 80086d8:	f7f7 fdf0 	bl	80002bc <__adddf3>
 80086dc:	4642      	mov	r2, r8
 80086de:	464b      	mov	r3, r9
 80086e0:	f7f7 fdec 	bl	80002bc <__adddf3>
 80086e4:	4632      	mov	r2, r6
 80086e6:	463b      	mov	r3, r7
 80086e8:	f7f7 fde8 	bl	80002bc <__adddf3>
 80086ec:	2000      	movs	r0, #0
 80086ee:	4632      	mov	r2, r6
 80086f0:	463b      	mov	r3, r7
 80086f2:	4604      	mov	r4, r0
 80086f4:	460d      	mov	r5, r1
 80086f6:	f7f7 fddf 	bl	80002b8 <__aeabi_dsub>
 80086fa:	4642      	mov	r2, r8
 80086fc:	464b      	mov	r3, r9
 80086fe:	f7f7 fddb 	bl	80002b8 <__aeabi_dsub>
 8008702:	ec53 2b18 	vmov	r2, r3, d8
 8008706:	f7f7 fdd7 	bl	80002b8 <__aeabi_dsub>
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	4650      	mov	r0, sl
 8008710:	4659      	mov	r1, fp
 8008712:	e610      	b.n	8008336 <__ieee754_pow+0x31e>
 8008714:	2401      	movs	r4, #1
 8008716:	e6a1      	b.n	800845c <__ieee754_pow+0x444>
 8008718:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008768 <__ieee754_pow+0x750>
 800871c:	e617      	b.n	800834e <__ieee754_pow+0x336>
 800871e:	bf00      	nop
 8008720:	4a454eef 	.word	0x4a454eef
 8008724:	3fca7e28 	.word	0x3fca7e28
 8008728:	93c9db65 	.word	0x93c9db65
 800872c:	3fcd864a 	.word	0x3fcd864a
 8008730:	a91d4101 	.word	0xa91d4101
 8008734:	3fd17460 	.word	0x3fd17460
 8008738:	518f264d 	.word	0x518f264d
 800873c:	3fd55555 	.word	0x3fd55555
 8008740:	db6fabff 	.word	0xdb6fabff
 8008744:	3fdb6db6 	.word	0x3fdb6db6
 8008748:	33333303 	.word	0x33333303
 800874c:	3fe33333 	.word	0x3fe33333
 8008750:	e0000000 	.word	0xe0000000
 8008754:	3feec709 	.word	0x3feec709
 8008758:	dc3a03fd 	.word	0xdc3a03fd
 800875c:	3feec709 	.word	0x3feec709
 8008760:	145b01f5 	.word	0x145b01f5
 8008764:	be3e2fe0 	.word	0xbe3e2fe0
 8008768:	00000000 	.word	0x00000000
 800876c:	3ff00000 	.word	0x3ff00000
 8008770:	7ff00000 	.word	0x7ff00000
 8008774:	43400000 	.word	0x43400000
 8008778:	0003988e 	.word	0x0003988e
 800877c:	000bb679 	.word	0x000bb679
 8008780:	080094a8 	.word	0x080094a8
 8008784:	3ff00000 	.word	0x3ff00000
 8008788:	40080000 	.word	0x40080000
 800878c:	080094c8 	.word	0x080094c8
 8008790:	080094b8 	.word	0x080094b8
 8008794:	a3b5      	add	r3, pc, #724	; (adr r3, 8008a6c <__ieee754_pow+0xa54>)
 8008796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879a:	4640      	mov	r0, r8
 800879c:	4649      	mov	r1, r9
 800879e:	f7f7 fd8d 	bl	80002bc <__adddf3>
 80087a2:	4622      	mov	r2, r4
 80087a4:	ec41 0b1a 	vmov	d10, r0, r1
 80087a8:	462b      	mov	r3, r5
 80087aa:	4630      	mov	r0, r6
 80087ac:	4639      	mov	r1, r7
 80087ae:	f7f7 fd83 	bl	80002b8 <__aeabi_dsub>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	ec51 0b1a 	vmov	r0, r1, d10
 80087ba:	f7f8 f9c5 	bl	8000b48 <__aeabi_dcmpgt>
 80087be:	2800      	cmp	r0, #0
 80087c0:	f47f ae04 	bne.w	80083cc <__ieee754_pow+0x3b4>
 80087c4:	4aa4      	ldr	r2, [pc, #656]	; (8008a58 <__ieee754_pow+0xa40>)
 80087c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087ca:	4293      	cmp	r3, r2
 80087cc:	f340 8108 	ble.w	80089e0 <__ieee754_pow+0x9c8>
 80087d0:	151b      	asrs	r3, r3, #20
 80087d2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80087d6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80087da:	fa4a f303 	asr.w	r3, sl, r3
 80087de:	445b      	add	r3, fp
 80087e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80087e4:	4e9d      	ldr	r6, [pc, #628]	; (8008a5c <__ieee754_pow+0xa44>)
 80087e6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80087ea:	4116      	asrs	r6, r2
 80087ec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80087f0:	2000      	movs	r0, #0
 80087f2:	ea23 0106 	bic.w	r1, r3, r6
 80087f6:	f1c2 0214 	rsb	r2, r2, #20
 80087fa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80087fe:	fa4a fa02 	asr.w	sl, sl, r2
 8008802:	f1bb 0f00 	cmp.w	fp, #0
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4620      	mov	r0, r4
 800880c:	4629      	mov	r1, r5
 800880e:	bfb8      	it	lt
 8008810:	f1ca 0a00 	rsblt	sl, sl, #0
 8008814:	f7f7 fd50 	bl	80002b8 <__aeabi_dsub>
 8008818:	ec41 0b19 	vmov	d9, r0, r1
 800881c:	4642      	mov	r2, r8
 800881e:	464b      	mov	r3, r9
 8008820:	ec51 0b19 	vmov	r0, r1, d9
 8008824:	f7f7 fd4a 	bl	80002bc <__adddf3>
 8008828:	a37b      	add	r3, pc, #492	; (adr r3, 8008a18 <__ieee754_pow+0xa00>)
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	2000      	movs	r0, #0
 8008830:	4604      	mov	r4, r0
 8008832:	460d      	mov	r5, r1
 8008834:	f7f7 fef8 	bl	8000628 <__aeabi_dmul>
 8008838:	ec53 2b19 	vmov	r2, r3, d9
 800883c:	4606      	mov	r6, r0
 800883e:	460f      	mov	r7, r1
 8008840:	4620      	mov	r0, r4
 8008842:	4629      	mov	r1, r5
 8008844:	f7f7 fd38 	bl	80002b8 <__aeabi_dsub>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	4640      	mov	r0, r8
 800884e:	4649      	mov	r1, r9
 8008850:	f7f7 fd32 	bl	80002b8 <__aeabi_dsub>
 8008854:	a372      	add	r3, pc, #456	; (adr r3, 8008a20 <__ieee754_pow+0xa08>)
 8008856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885a:	f7f7 fee5 	bl	8000628 <__aeabi_dmul>
 800885e:	a372      	add	r3, pc, #456	; (adr r3, 8008a28 <__ieee754_pow+0xa10>)
 8008860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008864:	4680      	mov	r8, r0
 8008866:	4689      	mov	r9, r1
 8008868:	4620      	mov	r0, r4
 800886a:	4629      	mov	r1, r5
 800886c:	f7f7 fedc 	bl	8000628 <__aeabi_dmul>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4640      	mov	r0, r8
 8008876:	4649      	mov	r1, r9
 8008878:	f7f7 fd20 	bl	80002bc <__adddf3>
 800887c:	4604      	mov	r4, r0
 800887e:	460d      	mov	r5, r1
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4630      	mov	r0, r6
 8008886:	4639      	mov	r1, r7
 8008888:	f7f7 fd18 	bl	80002bc <__adddf3>
 800888c:	4632      	mov	r2, r6
 800888e:	463b      	mov	r3, r7
 8008890:	4680      	mov	r8, r0
 8008892:	4689      	mov	r9, r1
 8008894:	f7f7 fd10 	bl	80002b8 <__aeabi_dsub>
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	4620      	mov	r0, r4
 800889e:	4629      	mov	r1, r5
 80088a0:	f7f7 fd0a 	bl	80002b8 <__aeabi_dsub>
 80088a4:	4642      	mov	r2, r8
 80088a6:	4606      	mov	r6, r0
 80088a8:	460f      	mov	r7, r1
 80088aa:	464b      	mov	r3, r9
 80088ac:	4640      	mov	r0, r8
 80088ae:	4649      	mov	r1, r9
 80088b0:	f7f7 feba 	bl	8000628 <__aeabi_dmul>
 80088b4:	a35e      	add	r3, pc, #376	; (adr r3, 8008a30 <__ieee754_pow+0xa18>)
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	4604      	mov	r4, r0
 80088bc:	460d      	mov	r5, r1
 80088be:	f7f7 feb3 	bl	8000628 <__aeabi_dmul>
 80088c2:	a35d      	add	r3, pc, #372	; (adr r3, 8008a38 <__ieee754_pow+0xa20>)
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	f7f7 fcf6 	bl	80002b8 <__aeabi_dsub>
 80088cc:	4622      	mov	r2, r4
 80088ce:	462b      	mov	r3, r5
 80088d0:	f7f7 feaa 	bl	8000628 <__aeabi_dmul>
 80088d4:	a35a      	add	r3, pc, #360	; (adr r3, 8008a40 <__ieee754_pow+0xa28>)
 80088d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088da:	f7f7 fcef 	bl	80002bc <__adddf3>
 80088de:	4622      	mov	r2, r4
 80088e0:	462b      	mov	r3, r5
 80088e2:	f7f7 fea1 	bl	8000628 <__aeabi_dmul>
 80088e6:	a358      	add	r3, pc, #352	; (adr r3, 8008a48 <__ieee754_pow+0xa30>)
 80088e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ec:	f7f7 fce4 	bl	80002b8 <__aeabi_dsub>
 80088f0:	4622      	mov	r2, r4
 80088f2:	462b      	mov	r3, r5
 80088f4:	f7f7 fe98 	bl	8000628 <__aeabi_dmul>
 80088f8:	a355      	add	r3, pc, #340	; (adr r3, 8008a50 <__ieee754_pow+0xa38>)
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f7f7 fcdd 	bl	80002bc <__adddf3>
 8008902:	4622      	mov	r2, r4
 8008904:	462b      	mov	r3, r5
 8008906:	f7f7 fe8f 	bl	8000628 <__aeabi_dmul>
 800890a:	4602      	mov	r2, r0
 800890c:	460b      	mov	r3, r1
 800890e:	4640      	mov	r0, r8
 8008910:	4649      	mov	r1, r9
 8008912:	f7f7 fcd1 	bl	80002b8 <__aeabi_dsub>
 8008916:	4604      	mov	r4, r0
 8008918:	460d      	mov	r5, r1
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4640      	mov	r0, r8
 8008920:	4649      	mov	r1, r9
 8008922:	f7f7 fe81 	bl	8000628 <__aeabi_dmul>
 8008926:	2200      	movs	r2, #0
 8008928:	ec41 0b19 	vmov	d9, r0, r1
 800892c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008930:	4620      	mov	r0, r4
 8008932:	4629      	mov	r1, r5
 8008934:	f7f7 fcc0 	bl	80002b8 <__aeabi_dsub>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	ec51 0b19 	vmov	r0, r1, d9
 8008940:	f7f7 ff9c 	bl	800087c <__aeabi_ddiv>
 8008944:	4632      	mov	r2, r6
 8008946:	4604      	mov	r4, r0
 8008948:	460d      	mov	r5, r1
 800894a:	463b      	mov	r3, r7
 800894c:	4640      	mov	r0, r8
 800894e:	4649      	mov	r1, r9
 8008950:	f7f7 fe6a 	bl	8000628 <__aeabi_dmul>
 8008954:	4632      	mov	r2, r6
 8008956:	463b      	mov	r3, r7
 8008958:	f7f7 fcb0 	bl	80002bc <__adddf3>
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	4620      	mov	r0, r4
 8008962:	4629      	mov	r1, r5
 8008964:	f7f7 fca8 	bl	80002b8 <__aeabi_dsub>
 8008968:	4642      	mov	r2, r8
 800896a:	464b      	mov	r3, r9
 800896c:	f7f7 fca4 	bl	80002b8 <__aeabi_dsub>
 8008970:	460b      	mov	r3, r1
 8008972:	4602      	mov	r2, r0
 8008974:	493a      	ldr	r1, [pc, #232]	; (8008a60 <__ieee754_pow+0xa48>)
 8008976:	2000      	movs	r0, #0
 8008978:	f7f7 fc9e 	bl	80002b8 <__aeabi_dsub>
 800897c:	ec41 0b10 	vmov	d0, r0, r1
 8008980:	ee10 3a90 	vmov	r3, s1
 8008984:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800898c:	da2b      	bge.n	80089e6 <__ieee754_pow+0x9ce>
 800898e:	4650      	mov	r0, sl
 8008990:	f000 f966 	bl	8008c60 <scalbn>
 8008994:	ec51 0b10 	vmov	r0, r1, d0
 8008998:	ec53 2b18 	vmov	r2, r3, d8
 800899c:	f7ff bbed 	b.w	800817a <__ieee754_pow+0x162>
 80089a0:	4b30      	ldr	r3, [pc, #192]	; (8008a64 <__ieee754_pow+0xa4c>)
 80089a2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80089a6:	429e      	cmp	r6, r3
 80089a8:	f77f af0c 	ble.w	80087c4 <__ieee754_pow+0x7ac>
 80089ac:	4b2e      	ldr	r3, [pc, #184]	; (8008a68 <__ieee754_pow+0xa50>)
 80089ae:	440b      	add	r3, r1
 80089b0:	4303      	orrs	r3, r0
 80089b2:	d009      	beq.n	80089c8 <__ieee754_pow+0x9b0>
 80089b4:	ec51 0b18 	vmov	r0, r1, d8
 80089b8:	2200      	movs	r2, #0
 80089ba:	2300      	movs	r3, #0
 80089bc:	f7f8 f8a6 	bl	8000b0c <__aeabi_dcmplt>
 80089c0:	3800      	subs	r0, #0
 80089c2:	bf18      	it	ne
 80089c4:	2001      	movne	r0, #1
 80089c6:	e447      	b.n	8008258 <__ieee754_pow+0x240>
 80089c8:	4622      	mov	r2, r4
 80089ca:	462b      	mov	r3, r5
 80089cc:	f7f7 fc74 	bl	80002b8 <__aeabi_dsub>
 80089d0:	4642      	mov	r2, r8
 80089d2:	464b      	mov	r3, r9
 80089d4:	f7f8 f8ae 	bl	8000b34 <__aeabi_dcmpge>
 80089d8:	2800      	cmp	r0, #0
 80089da:	f43f aef3 	beq.w	80087c4 <__ieee754_pow+0x7ac>
 80089de:	e7e9      	b.n	80089b4 <__ieee754_pow+0x99c>
 80089e0:	f04f 0a00 	mov.w	sl, #0
 80089e4:	e71a      	b.n	800881c <__ieee754_pow+0x804>
 80089e6:	ec51 0b10 	vmov	r0, r1, d0
 80089ea:	4619      	mov	r1, r3
 80089ec:	e7d4      	b.n	8008998 <__ieee754_pow+0x980>
 80089ee:	491c      	ldr	r1, [pc, #112]	; (8008a60 <__ieee754_pow+0xa48>)
 80089f0:	2000      	movs	r0, #0
 80089f2:	f7ff bb30 	b.w	8008056 <__ieee754_pow+0x3e>
 80089f6:	2000      	movs	r0, #0
 80089f8:	2100      	movs	r1, #0
 80089fa:	f7ff bb2c 	b.w	8008056 <__ieee754_pow+0x3e>
 80089fe:	4630      	mov	r0, r6
 8008a00:	4639      	mov	r1, r7
 8008a02:	f7ff bb28 	b.w	8008056 <__ieee754_pow+0x3e>
 8008a06:	9204      	str	r2, [sp, #16]
 8008a08:	f7ff bb7a 	b.w	8008100 <__ieee754_pow+0xe8>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	f7ff bb64 	b.w	80080da <__ieee754_pow+0xc2>
 8008a12:	bf00      	nop
 8008a14:	f3af 8000 	nop.w
 8008a18:	00000000 	.word	0x00000000
 8008a1c:	3fe62e43 	.word	0x3fe62e43
 8008a20:	fefa39ef 	.word	0xfefa39ef
 8008a24:	3fe62e42 	.word	0x3fe62e42
 8008a28:	0ca86c39 	.word	0x0ca86c39
 8008a2c:	be205c61 	.word	0xbe205c61
 8008a30:	72bea4d0 	.word	0x72bea4d0
 8008a34:	3e663769 	.word	0x3e663769
 8008a38:	c5d26bf1 	.word	0xc5d26bf1
 8008a3c:	3ebbbd41 	.word	0x3ebbbd41
 8008a40:	af25de2c 	.word	0xaf25de2c
 8008a44:	3f11566a 	.word	0x3f11566a
 8008a48:	16bebd93 	.word	0x16bebd93
 8008a4c:	3f66c16c 	.word	0x3f66c16c
 8008a50:	5555553e 	.word	0x5555553e
 8008a54:	3fc55555 	.word	0x3fc55555
 8008a58:	3fe00000 	.word	0x3fe00000
 8008a5c:	000fffff 	.word	0x000fffff
 8008a60:	3ff00000 	.word	0x3ff00000
 8008a64:	4090cbff 	.word	0x4090cbff
 8008a68:	3f6f3400 	.word	0x3f6f3400
 8008a6c:	652b82fe 	.word	0x652b82fe
 8008a70:	3c971547 	.word	0x3c971547

08008a74 <__ieee754_sqrt>:
 8008a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a78:	ec55 4b10 	vmov	r4, r5, d0
 8008a7c:	4e55      	ldr	r6, [pc, #340]	; (8008bd4 <__ieee754_sqrt+0x160>)
 8008a7e:	43ae      	bics	r6, r5
 8008a80:	ee10 0a10 	vmov	r0, s0
 8008a84:	ee10 3a10 	vmov	r3, s0
 8008a88:	462a      	mov	r2, r5
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	d110      	bne.n	8008ab0 <__ieee754_sqrt+0x3c>
 8008a8e:	ee10 2a10 	vmov	r2, s0
 8008a92:	462b      	mov	r3, r5
 8008a94:	f7f7 fdc8 	bl	8000628 <__aeabi_dmul>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	f7f7 fc0c 	bl	80002bc <__adddf3>
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	460d      	mov	r5, r1
 8008aa8:	ec45 4b10 	vmov	d0, r4, r5
 8008aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab0:	2d00      	cmp	r5, #0
 8008ab2:	dc10      	bgt.n	8008ad6 <__ieee754_sqrt+0x62>
 8008ab4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008ab8:	4330      	orrs	r0, r6
 8008aba:	d0f5      	beq.n	8008aa8 <__ieee754_sqrt+0x34>
 8008abc:	b15d      	cbz	r5, 8008ad6 <__ieee754_sqrt+0x62>
 8008abe:	ee10 2a10 	vmov	r2, s0
 8008ac2:	462b      	mov	r3, r5
 8008ac4:	ee10 0a10 	vmov	r0, s0
 8008ac8:	f7f7 fbf6 	bl	80002b8 <__aeabi_dsub>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	f7f7 fed4 	bl	800087c <__aeabi_ddiv>
 8008ad4:	e7e6      	b.n	8008aa4 <__ieee754_sqrt+0x30>
 8008ad6:	1512      	asrs	r2, r2, #20
 8008ad8:	d074      	beq.n	8008bc4 <__ieee754_sqrt+0x150>
 8008ada:	07d4      	lsls	r4, r2, #31
 8008adc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008ae0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008ae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008ae8:	bf5e      	ittt	pl
 8008aea:	0fda      	lsrpl	r2, r3, #31
 8008aec:	005b      	lslpl	r3, r3, #1
 8008aee:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008af2:	2400      	movs	r4, #0
 8008af4:	0fda      	lsrs	r2, r3, #31
 8008af6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008afa:	107f      	asrs	r7, r7, #1
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	2516      	movs	r5, #22
 8008b00:	4620      	mov	r0, r4
 8008b02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008b06:	1886      	adds	r6, r0, r2
 8008b08:	428e      	cmp	r6, r1
 8008b0a:	bfde      	ittt	le
 8008b0c:	1b89      	suble	r1, r1, r6
 8008b0e:	18b0      	addle	r0, r6, r2
 8008b10:	18a4      	addle	r4, r4, r2
 8008b12:	0049      	lsls	r1, r1, #1
 8008b14:	3d01      	subs	r5, #1
 8008b16:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008b1a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008b1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008b22:	d1f0      	bne.n	8008b06 <__ieee754_sqrt+0x92>
 8008b24:	462a      	mov	r2, r5
 8008b26:	f04f 0e20 	mov.w	lr, #32
 8008b2a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008b2e:	4281      	cmp	r1, r0
 8008b30:	eb06 0c05 	add.w	ip, r6, r5
 8008b34:	dc02      	bgt.n	8008b3c <__ieee754_sqrt+0xc8>
 8008b36:	d113      	bne.n	8008b60 <__ieee754_sqrt+0xec>
 8008b38:	459c      	cmp	ip, r3
 8008b3a:	d811      	bhi.n	8008b60 <__ieee754_sqrt+0xec>
 8008b3c:	f1bc 0f00 	cmp.w	ip, #0
 8008b40:	eb0c 0506 	add.w	r5, ip, r6
 8008b44:	da43      	bge.n	8008bce <__ieee754_sqrt+0x15a>
 8008b46:	2d00      	cmp	r5, #0
 8008b48:	db41      	blt.n	8008bce <__ieee754_sqrt+0x15a>
 8008b4a:	f100 0801 	add.w	r8, r0, #1
 8008b4e:	1a09      	subs	r1, r1, r0
 8008b50:	459c      	cmp	ip, r3
 8008b52:	bf88      	it	hi
 8008b54:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008b58:	eba3 030c 	sub.w	r3, r3, ip
 8008b5c:	4432      	add	r2, r6
 8008b5e:	4640      	mov	r0, r8
 8008b60:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008b64:	f1be 0e01 	subs.w	lr, lr, #1
 8008b68:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008b70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008b74:	d1db      	bne.n	8008b2e <__ieee754_sqrt+0xba>
 8008b76:	430b      	orrs	r3, r1
 8008b78:	d006      	beq.n	8008b88 <__ieee754_sqrt+0x114>
 8008b7a:	1c50      	adds	r0, r2, #1
 8008b7c:	bf13      	iteet	ne
 8008b7e:	3201      	addne	r2, #1
 8008b80:	3401      	addeq	r4, #1
 8008b82:	4672      	moveq	r2, lr
 8008b84:	f022 0201 	bicne.w	r2, r2, #1
 8008b88:	1063      	asrs	r3, r4, #1
 8008b8a:	0852      	lsrs	r2, r2, #1
 8008b8c:	07e1      	lsls	r1, r4, #31
 8008b8e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008b92:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008b96:	bf48      	it	mi
 8008b98:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008b9c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008ba0:	4614      	mov	r4, r2
 8008ba2:	e781      	b.n	8008aa8 <__ieee754_sqrt+0x34>
 8008ba4:	0ad9      	lsrs	r1, r3, #11
 8008ba6:	3815      	subs	r0, #21
 8008ba8:	055b      	lsls	r3, r3, #21
 8008baa:	2900      	cmp	r1, #0
 8008bac:	d0fa      	beq.n	8008ba4 <__ieee754_sqrt+0x130>
 8008bae:	02cd      	lsls	r5, r1, #11
 8008bb0:	d50a      	bpl.n	8008bc8 <__ieee754_sqrt+0x154>
 8008bb2:	f1c2 0420 	rsb	r4, r2, #32
 8008bb6:	fa23 f404 	lsr.w	r4, r3, r4
 8008bba:	1e55      	subs	r5, r2, #1
 8008bbc:	4093      	lsls	r3, r2
 8008bbe:	4321      	orrs	r1, r4
 8008bc0:	1b42      	subs	r2, r0, r5
 8008bc2:	e78a      	b.n	8008ada <__ieee754_sqrt+0x66>
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	e7f0      	b.n	8008baa <__ieee754_sqrt+0x136>
 8008bc8:	0049      	lsls	r1, r1, #1
 8008bca:	3201      	adds	r2, #1
 8008bcc:	e7ef      	b.n	8008bae <__ieee754_sqrt+0x13a>
 8008bce:	4680      	mov	r8, r0
 8008bd0:	e7bd      	b.n	8008b4e <__ieee754_sqrt+0xda>
 8008bd2:	bf00      	nop
 8008bd4:	7ff00000 	.word	0x7ff00000

08008bd8 <with_errno>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	4604      	mov	r4, r0
 8008bdc:	460d      	mov	r5, r1
 8008bde:	4616      	mov	r6, r2
 8008be0:	f7fb fd96 	bl	8004710 <__errno>
 8008be4:	4629      	mov	r1, r5
 8008be6:	6006      	str	r6, [r0, #0]
 8008be8:	4620      	mov	r0, r4
 8008bea:	bd70      	pop	{r4, r5, r6, pc}

08008bec <xflow>:
 8008bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bee:	4614      	mov	r4, r2
 8008bf0:	461d      	mov	r5, r3
 8008bf2:	b108      	cbz	r0, 8008bf8 <xflow+0xc>
 8008bf4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008bf8:	e9cd 2300 	strd	r2, r3, [sp]
 8008bfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c00:	4620      	mov	r0, r4
 8008c02:	4629      	mov	r1, r5
 8008c04:	f7f7 fd10 	bl	8000628 <__aeabi_dmul>
 8008c08:	2222      	movs	r2, #34	; 0x22
 8008c0a:	b003      	add	sp, #12
 8008c0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c10:	f7ff bfe2 	b.w	8008bd8 <with_errno>

08008c14 <__math_uflow>:
 8008c14:	b508      	push	{r3, lr}
 8008c16:	2200      	movs	r2, #0
 8008c18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c1c:	f7ff ffe6 	bl	8008bec <xflow>
 8008c20:	ec41 0b10 	vmov	d0, r0, r1
 8008c24:	bd08      	pop	{r3, pc}

08008c26 <__math_oflow>:
 8008c26:	b508      	push	{r3, lr}
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008c2e:	f7ff ffdd 	bl	8008bec <xflow>
 8008c32:	ec41 0b10 	vmov	d0, r0, r1
 8008c36:	bd08      	pop	{r3, pc}

08008c38 <fabs>:
 8008c38:	ec51 0b10 	vmov	r0, r1, d0
 8008c3c:	ee10 2a10 	vmov	r2, s0
 8008c40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008c44:	ec43 2b10 	vmov	d0, r2, r3
 8008c48:	4770      	bx	lr

08008c4a <finite>:
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	ed8d 0b00 	vstr	d0, [sp]
 8008c50:	9801      	ldr	r0, [sp, #4]
 8008c52:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008c56:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008c5a:	0fc0      	lsrs	r0, r0, #31
 8008c5c:	b002      	add	sp, #8
 8008c5e:	4770      	bx	lr

08008c60 <scalbn>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	ec55 4b10 	vmov	r4, r5, d0
 8008c66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	462b      	mov	r3, r5
 8008c6e:	b99a      	cbnz	r2, 8008c98 <scalbn+0x38>
 8008c70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008c74:	4323      	orrs	r3, r4
 8008c76:	d036      	beq.n	8008ce6 <scalbn+0x86>
 8008c78:	4b39      	ldr	r3, [pc, #228]	; (8008d60 <scalbn+0x100>)
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	ee10 0a10 	vmov	r0, s0
 8008c80:	2200      	movs	r2, #0
 8008c82:	f7f7 fcd1 	bl	8000628 <__aeabi_dmul>
 8008c86:	4b37      	ldr	r3, [pc, #220]	; (8008d64 <scalbn+0x104>)
 8008c88:	429e      	cmp	r6, r3
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	460d      	mov	r5, r1
 8008c8e:	da10      	bge.n	8008cb2 <scalbn+0x52>
 8008c90:	a32b      	add	r3, pc, #172	; (adr r3, 8008d40 <scalbn+0xe0>)
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	e03a      	b.n	8008d0e <scalbn+0xae>
 8008c98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008c9c:	428a      	cmp	r2, r1
 8008c9e:	d10c      	bne.n	8008cba <scalbn+0x5a>
 8008ca0:	ee10 2a10 	vmov	r2, s0
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	f7f7 fb08 	bl	80002bc <__adddf3>
 8008cac:	4604      	mov	r4, r0
 8008cae:	460d      	mov	r5, r1
 8008cb0:	e019      	b.n	8008ce6 <scalbn+0x86>
 8008cb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	3a36      	subs	r2, #54	; 0x36
 8008cba:	4432      	add	r2, r6
 8008cbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008cc0:	428a      	cmp	r2, r1
 8008cc2:	dd08      	ble.n	8008cd6 <scalbn+0x76>
 8008cc4:	2d00      	cmp	r5, #0
 8008cc6:	a120      	add	r1, pc, #128	; (adr r1, 8008d48 <scalbn+0xe8>)
 8008cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ccc:	da1c      	bge.n	8008d08 <scalbn+0xa8>
 8008cce:	a120      	add	r1, pc, #128	; (adr r1, 8008d50 <scalbn+0xf0>)
 8008cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cd4:	e018      	b.n	8008d08 <scalbn+0xa8>
 8008cd6:	2a00      	cmp	r2, #0
 8008cd8:	dd08      	ble.n	8008cec <scalbn+0x8c>
 8008cda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008cde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ce2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ce6:	ec45 4b10 	vmov	d0, r4, r5
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
 8008cec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008cf0:	da19      	bge.n	8008d26 <scalbn+0xc6>
 8008cf2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008cf6:	429e      	cmp	r6, r3
 8008cf8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008cfc:	dd0a      	ble.n	8008d14 <scalbn+0xb4>
 8008cfe:	a112      	add	r1, pc, #72	; (adr r1, 8008d48 <scalbn+0xe8>)
 8008d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1e2      	bne.n	8008cce <scalbn+0x6e>
 8008d08:	a30f      	add	r3, pc, #60	; (adr r3, 8008d48 <scalbn+0xe8>)
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f7f7 fc8b 	bl	8000628 <__aeabi_dmul>
 8008d12:	e7cb      	b.n	8008cac <scalbn+0x4c>
 8008d14:	a10a      	add	r1, pc, #40	; (adr r1, 8008d40 <scalbn+0xe0>)
 8008d16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d0b8      	beq.n	8008c90 <scalbn+0x30>
 8008d1e:	a10e      	add	r1, pc, #56	; (adr r1, 8008d58 <scalbn+0xf8>)
 8008d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d24:	e7b4      	b.n	8008c90 <scalbn+0x30>
 8008d26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d2a:	3236      	adds	r2, #54	; 0x36
 8008d2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008d34:	4620      	mov	r0, r4
 8008d36:	4b0c      	ldr	r3, [pc, #48]	; (8008d68 <scalbn+0x108>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	e7e8      	b.n	8008d0e <scalbn+0xae>
 8008d3c:	f3af 8000 	nop.w
 8008d40:	c2f8f359 	.word	0xc2f8f359
 8008d44:	01a56e1f 	.word	0x01a56e1f
 8008d48:	8800759c 	.word	0x8800759c
 8008d4c:	7e37e43c 	.word	0x7e37e43c
 8008d50:	8800759c 	.word	0x8800759c
 8008d54:	fe37e43c 	.word	0xfe37e43c
 8008d58:	c2f8f359 	.word	0xc2f8f359
 8008d5c:	81a56e1f 	.word	0x81a56e1f
 8008d60:	43500000 	.word	0x43500000
 8008d64:	ffff3cb0 	.word	0xffff3cb0
 8008d68:	3c900000 	.word	0x3c900000

08008d6c <_sbrk>:
 8008d6c:	4a04      	ldr	r2, [pc, #16]	; (8008d80 <_sbrk+0x14>)
 8008d6e:	6811      	ldr	r1, [r2, #0]
 8008d70:	4603      	mov	r3, r0
 8008d72:	b909      	cbnz	r1, 8008d78 <_sbrk+0xc>
 8008d74:	4903      	ldr	r1, [pc, #12]	; (8008d84 <_sbrk+0x18>)
 8008d76:	6011      	str	r1, [r2, #0]
 8008d78:	6810      	ldr	r0, [r2, #0]
 8008d7a:	4403      	add	r3, r0
 8008d7c:	6013      	str	r3, [r2, #0]
 8008d7e:	4770      	bx	lr
 8008d80:	20000a7c 	.word	0x20000a7c
 8008d84:	20000a80 	.word	0x20000a80

08008d88 <_init>:
 8008d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8a:	bf00      	nop
 8008d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d8e:	bc08      	pop	{r3}
 8008d90:	469e      	mov	lr, r3
 8008d92:	4770      	bx	lr

08008d94 <_fini>:
 8008d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d96:	bf00      	nop
 8008d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d9a:	bc08      	pop	{r3}
 8008d9c:	469e      	mov	lr, r3
 8008d9e:	4770      	bx	lr
