
noFree_Oppy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010300  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc8  080104a0  080104a0  000204a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011068  08011068  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08011068  08011068  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011068  08011068  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011068  08011068  00021068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801106c  0801106c  0002106c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08011070  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000120a8  200001e8  08011254  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20012290  08011254  00032290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bcf  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001889  00000000  00000000  00038de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  0003a670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  0003adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011372  00000000  00000000  0003b470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e26  00000000  00000000  0004c7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005945d  00000000  00000000  00056608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000afa65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a4  00000000  00000000  000afab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010488 	.word	0x08010488

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08010488 	.word	0x08010488

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder


int main(void){
 8000cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cbc:	b08f      	sub	sp, #60	; 0x3c
 8000cbe:	af06      	add	r7, sp, #24

	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000cc0:	4b68      	ldr	r3, [pc, #416]	; (8000e64 <main+0x1ac>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a67      	ldr	r2, [pc, #412]	; (8000e64 <main+0x1ac>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC_enableMaxFrequencies(RCC_100MHz); // Velocidad maxima del MCU
 8000cd0:	2008      	movs	r0, #8
 8000cd2:	f008 f8c9 	bl	8008e68 <RCC_enableMaxFrequencies>
	inSystem (); // Configuracion global de los perifericos
 8000cd6:	f000 fc19 	bl	800150c <inSystem>

	//Calculamos el setpoint en la que queremos que el robot controle la velocidad de cada motor
	velSetPoint = (0.00169*fixed_dutty + 0.0619);
 8000cda:	4b63      	ldr	r3, [pc, #396]	; (8000e68 <main+0x1b0>)
 8000cdc:	4a63      	ldr	r2, [pc, #396]	; (8000e6c <main+0x1b4>)
 8000cde:	601a      	str	r2, [r3, #0]

	// calibramos el Giroscopio para que tengamos una medida de error controlable
	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z); // Calibramos el giroscopio que usaremos
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4863      	ldr	r0, [pc, #396]	; (8000e70 <main+0x1b8>)
 8000ce4:	f001 f8f4 	bl	8001ed0 <calibracionGyros>
 8000ce8:	ee10 3a10 	vmov	r3, s0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fc43 	bl	8000578 <__aeabi_f2d>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	495f      	ldr	r1, [pc, #380]	; (8000e74 <main+0x1bc>)
 8000cf8:	e9c1 2300 	strd	r2, r3, [r1]

	double angleToGo_Relative = 0;
 8000cfc:	f04f 0200 	mov.w	r2, #0
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double angle_start = 0;
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /* Loop forever */
	while(1){

		if (!flag_Astar){
 8000d14:	4b58      	ldr	r3, [pc, #352]	; (8000e78 <main+0x1c0>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <main+0x68>
			fillComand(); // Se puede leer cualquier comando excepto cuando se esta lleyendo el grid de Astar
 8000d1c:	f002 fd50 	bl	80037c0 <fillComand>
		}

		if (flag_NOP){
 8000d20:	4b56      	ldr	r3, [pc, #344]	; (8000e7c <main+0x1c4>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d01b      	beq.n	8000d60 <main+0xa8>

			 NOP(handler_Motor_Array,
 8000d28:	4b52      	ldr	r3, [pc, #328]	; (8000e74 <main+0x1bc>)
 8000d2a:	ed93 7b00 	vldr	d7, [r3]
 8000d2e:	4b54      	ldr	r3, [pc, #336]	; (8000e80 <main+0x1c8>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	f8ad 3010 	strh.w	r3, [sp, #16]
 8000d36:	4b53      	ldr	r3, [pc, #332]	; (8000e84 <main+0x1cc>)
 8000d38:	9303      	str	r3, [sp, #12]
 8000d3a:	4b53      	ldr	r3, [pc, #332]	; (8000e88 <main+0x1d0>)
 8000d3c:	9302      	str	r3, [sp, #8]
 8000d3e:	4b53      	ldr	r3, [pc, #332]	; (8000e8c <main+0x1d4>)
 8000d40:	9301      	str	r3, [sp, #4]
 8000d42:	4b53      	ldr	r3, [pc, #332]	; (8000e90 <main+0x1d8>)
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	eeb0 0a47 	vmov.f32	s0, s14
 8000d4a:	eef0 0a67 	vmov.f32	s1, s15
 8000d4e:	4b51      	ldr	r3, [pc, #324]	; (8000e94 <main+0x1dc>)
 8000d50:	4a51      	ldr	r2, [pc, #324]	; (8000e98 <main+0x1e0>)
 8000d52:	4947      	ldr	r1, [pc, #284]	; (8000e70 <main+0x1b8>)
 8000d54:	4851      	ldr	r0, [pc, #324]	; (8000e9c <main+0x1e4>)
 8000d56:	f002 fba9 	bl	80034ac <NOP>
				 &flag_measurements,
				 &flag_control,
				 data,
				 Mode_dir);

			 flag_NOP = RESET;
 8000d5a:	4b48      	ldr	r3, [pc, #288]	; (8000e7c <main+0x1c4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
		}

		// En esta parte ya usamos las medidas halladas para mover el robot en linea recta dependiendo de la operacion y el comando deseado
		if (flag_Go_Straigh){
 8000d60:	4b4f      	ldr	r3, [pc, #316]	; (8000ea0 <main+0x1e8>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d01a      	beq.n	8000d9e <main+0xe6>

			// Si llegamos a este comando, lo que se quiere es ir en linea recta usando un control PID

			go(handler_Motor_Array,
 8000d68:	4b42      	ldr	r3, [pc, #264]	; (8000e74 <main+0x1bc>)
 8000d6a:	ed93 7b00 	vldr	d7, [r3]
 8000d6e:	4b44      	ldr	r3, [pc, #272]	; (8000e80 <main+0x1c8>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000d76:	4b43      	ldr	r3, [pc, #268]	; (8000e84 <main+0x1cc>)
 8000d78:	9304      	str	r3, [sp, #16]
 8000d7a:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <main+0x1d0>)
 8000d7c:	9303      	str	r3, [sp, #12]
 8000d7e:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <main+0x1d4>)
 8000d80:	9302      	str	r3, [sp, #8]
 8000d82:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <main+0x1d8>)
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	4b47      	ldr	r3, [pc, #284]	; (8000ea4 <main+0x1ec>)
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	eeb0 0a47 	vmov.f32	s0, s14
 8000d8e:	eef0 0a67 	vmov.f32	s1, s15
 8000d92:	4b40      	ldr	r3, [pc, #256]	; (8000e94 <main+0x1dc>)
 8000d94:	4a40      	ldr	r2, [pc, #256]	; (8000e98 <main+0x1e0>)
 8000d96:	4936      	ldr	r1, [pc, #216]	; (8000e70 <main+0x1b8>)
 8000d98:	4840      	ldr	r0, [pc, #256]	; (8000e9c <main+0x1e4>)
 8000d9a:	f002 fadd 	bl	8003358 <go>
			   &flag_control,
			   data,
			   Mode_dir);
		}

		if (flag_GoTo_Straigh){
 8000d9e:	4b42      	ldr	r3, [pc, #264]	; (8000ea8 <main+0x1f0>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 80d7 	beq.w	8000f56 <main+0x29e>
			// SI llegamos a este comando, lo que se quiere es ir en linea recta a cierta distancia usando un control PID


			// esta funcion se encarga de enviar al robot en una linea recta hacia una distancia especifica
			// Para ello lo que se hara es simplemente encender el robot y al mismo tiempo calcular su distancia recorrida
			double distance_to_go = 0;
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e9c7 2300 	strd	r2, r3, [r7]
			uint8_t done = RESET;
 8000db4:	2300      	movs	r3, #0
 8000db6:	77fb      	strb	r3, [r7, #31]

			// seteamos la posicion inicial como la posicion actual global del robot
			parameters_Path_Robot.start_position_x = parameters_Pos_Robot.xg_position;
 8000db8:	4b37      	ldr	r3, [pc, #220]	; (8000e98 <main+0x1e0>)
 8000dba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000dbe:	4935      	ldr	r1, [pc, #212]	; (8000e94 <main+0x1dc>)
 8000dc0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			parameters_Path_Robot.start_position_y = parameters_Pos_Robot.yg_position;
 8000dc4:	4b34      	ldr	r3, [pc, #208]	; (8000e98 <main+0x1e0>)
 8000dc6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000dca:	4932      	ldr	r1, [pc, #200]	; (8000e94 <main+0x1dc>)
 8000dcc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

			// seteamos la posicion final usando parametros polares

			//Usando el angulo actual global con respecto al eje x se tiene que
			parameters_Path_Robot.goal_Position_x = parameters_Path_Robot.line_Distance
 8000dd0:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <main+0x1dc>)
 8000dd2:	e9d3 8910 	ldrd	r8, r9, [r3, #64]	; 0x40
						* cos(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_x ; // usando la funcion coseno para hallar la coordenada x de llegada
 8000dd6:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <main+0x1e0>)
 8000dd8:	ed93 7b04 	vldr	d7, [r3, #16]
 8000ddc:	eeb0 0a47 	vmov.f32	s0, s14
 8000de0:	eef0 0a67 	vmov.f32	s1, s15
 8000de4:	f00c fe94 	bl	800db10 <cos>
 8000de8:	ec53 2b10 	vmov	r2, r3, d0
 8000dec:	4640      	mov	r0, r8
 8000dee:	4649      	mov	r1, r9
 8000df0:	f7ff fc1a 	bl	8000628 <__aeabi_dmul>
 8000df4:	4602      	mov	r2, r0
 8000df6:	460b      	mov	r3, r1
 8000df8:	4610      	mov	r0, r2
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <main+0x1dc>)
 8000dfe:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8000e02:	f7ff fa5b 	bl	80002bc <__adddf3>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
			parameters_Path_Robot.goal_Position_x = parameters_Path_Robot.line_Distance
 8000e0a:	4922      	ldr	r1, [pc, #136]	; (8000e94 <main+0x1dc>)
 8000e0c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			parameters_Path_Robot.goal_Position_y = parameters_Path_Robot.line_Distance
 8000e10:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <main+0x1dc>)
 8000e12:	e9d3 8910 	ldrd	r8, r9, [r3, #64]	; 0x40
						* sin(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_y ; //usando la funcion coseno para hallar la coordenada y de llegada
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <main+0x1e0>)
 8000e18:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e1c:	eeb0 0a47 	vmov.f32	s0, s14
 8000e20:	eef0 0a67 	vmov.f32	s1, s15
 8000e24:	f00c ff10 	bl	800dc48 <sin>
 8000e28:	ec53 2b10 	vmov	r2, r3, d0
 8000e2c:	4640      	mov	r0, r8
 8000e2e:	4649      	mov	r1, r9
 8000e30:	f7ff fbfa 	bl	8000628 <__aeabi_dmul>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <main+0x1dc>)
 8000e3e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000e42:	f7ff fa3b 	bl	80002bc <__adddf3>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
			parameters_Path_Robot.goal_Position_y = parameters_Path_Robot.line_Distance
 8000e4a:	4912      	ldr	r1, [pc, #72]	; (8000e94 <main+0x1dc>)
 8000e4c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

			// definimos los parametros del camino en funcion de la situacion actual
			calculation_parameter_distance(&parameters_Path_Robot);
 8000e50:	4810      	ldr	r0, [pc, #64]	; (8000e94 <main+0x1dc>)
 8000e52:	f007 f8c9 	bl	8007fe8 <calculation_parameter_distance>

			On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos el robot en la direccion deseada
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <main+0x1c8>)
 8000e58:	6819      	ldr	r1, [r3, #0]
 8000e5a:	4810      	ldr	r0, [pc, #64]	; (8000e9c <main+0x1e4>)
 8000e5c:	f001 fe0c 	bl	8002a78 <On_motor_Straigh_Roll>

			while(!done){
 8000e60:	e06f      	b.n	8000f42 <main+0x28a>
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00
 8000e68:	20001628 	.word	0x20001628
 8000e6c:	3ddfaebc 	.word	0x3ddfaebc
 8000e70:	200003d0 	.word	0x200003d0
 8000e74:	20001618 	.word	0x20001618
 8000e78:	20001022 	.word	0x20001022
 8000e7c:	20001025 	.word	0x20001025
 8000e80:	20001018 	.word	0x20001018
 8000e84:	20000504 	.word	0x20000504
 8000e88:	2000101e 	.word	0x2000101e
 8000e8c:	2000101b 	.word	0x2000101b
 8000e90:	2000101a 	.word	0x2000101a
 8000e94:	20001050 	.word	0x20001050
 8000e98:	20001570 	.word	0x20001570
 8000e9c:	200003e0 	.word	0x200003e0
 8000ea0:	2000101c 	.word	0x2000101c
 8000ea4:	20001030 	.word	0x20001030
 8000ea8:	2000101d 	.word	0x2000101d
				// calculamos la distancia con la libreria PosRobt.h

				distance_to_go = distance_traveled( &parameters_Path_Robot, parameters_Pos_Robot.xg_position, parameters_Pos_Robot.yg_position);
 8000eac:	4b93      	ldr	r3, [pc, #588]	; (80010fc <main+0x444>)
 8000eae:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000eb2:	4b92      	ldr	r3, [pc, #584]	; (80010fc <main+0x444>)
 8000eb4:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000eb8:	eeb0 1a46 	vmov.f32	s2, s12
 8000ebc:	eef0 1a66 	vmov.f32	s3, s13
 8000ec0:	eeb0 0a47 	vmov.f32	s0, s14
 8000ec4:	eef0 0a67 	vmov.f32	s1, s15
 8000ec8:	488d      	ldr	r0, [pc, #564]	; (8001100 <main+0x448>)
 8000eca:	f007 f979 	bl	80081c0 <distance_traveled>
 8000ece:	ed87 0b00 	vstr	d0, [r7]

				// Función de control del robot
				go(handler_Motor_Array,
 8000ed2:	4b8c      	ldr	r3, [pc, #560]	; (8001104 <main+0x44c>)
 8000ed4:	ed93 7b00 	vldr	d7, [r3]
 8000ed8:	4b8b      	ldr	r3, [pc, #556]	; (8001108 <main+0x450>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000ee0:	4b8a      	ldr	r3, [pc, #552]	; (800110c <main+0x454>)
 8000ee2:	9304      	str	r3, [sp, #16]
 8000ee4:	4b8a      	ldr	r3, [pc, #552]	; (8001110 <main+0x458>)
 8000ee6:	9303      	str	r3, [sp, #12]
 8000ee8:	4b8a      	ldr	r3, [pc, #552]	; (8001114 <main+0x45c>)
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	4b8a      	ldr	r3, [pc, #552]	; (8001118 <main+0x460>)
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	4b8a      	ldr	r3, [pc, #552]	; (800111c <main+0x464>)
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	eeb0 0a47 	vmov.f32	s0, s14
 8000ef8:	eef0 0a67 	vmov.f32	s1, s15
 8000efc:	4b80      	ldr	r3, [pc, #512]	; (8001100 <main+0x448>)
 8000efe:	4a7f      	ldr	r2, [pc, #508]	; (80010fc <main+0x444>)
 8000f00:	4987      	ldr	r1, [pc, #540]	; (8001120 <main+0x468>)
 8000f02:	4888      	ldr	r0, [pc, #544]	; (8001124 <main+0x46c>)
 8000f04:	f002 fa28 	bl	8003358 <go>
				   &flag_measurements,
				   &flag_control,
				   data,
				   Mode_dir); // Con esta funcion hacemos que el robot simplemente se mueva

				if (!(distance_to_go < parameters_Path_Robot.line_Distance)){
 8000f08:	4b7d      	ldr	r3, [pc, #500]	; (8001100 <main+0x448>)
 8000f0a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000f0e:	2101      	movs	r1, #1
 8000f10:	460e      	mov	r6, r1
 8000f12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f16:	f7ff fdf9 	bl	8000b0c <__aeabi_dcmplt>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <main+0x26c>
 8000f20:	2300      	movs	r3, #0
 8000f22:	461e      	mov	r6, r3
 8000f24:	b2f3      	uxtb	r3, r6
 8000f26:	f083 0301 	eor.w	r3, r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <main+0x286>
					// Paramos el proceso
					done = !done;
 8000f30:	7ffb      	ldrb	r3, [r7, #31]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	bf0c      	ite	eq
 8000f36:	2301      	moveq	r3, #1
 8000f38:	2300      	movne	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	77fb      	strb	r3, [r7, #31]
				}

				// Observamos si hay algun comando en espera
				fillComand();
 8000f3e:	f002 fc3f 	bl	80037c0 <fillComand>
			while(!done){
 8000f42:	7ffb      	ldrb	r3, [r7, #31]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0b1      	beq.n	8000eac <main+0x1f4>
			}




			if (Done){parseCommands("stop");}
 8000f48:	4b77      	ldr	r3, [pc, #476]	; (8001128 <main+0x470>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <main+0x29e>
 8000f50:	4876      	ldr	r0, [pc, #472]	; (800112c <main+0x474>)
 8000f52:	f000 fd3b 	bl	80019cc <parseCommands>

		}

		if (flag_Roll){
 8000f56:	4b76      	ldr	r3, [pc, #472]	; (8001130 <main+0x478>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d018      	beq.n	8000f90 <main+0x2d8>

			// Si llegamos a este comando lo que se quiere es girar indefinidamente en cierta direccion (CW o CCW)

			// Cambiamos los parametros
			NOP(handler_Motor_Array,
 8000f5e:	4b69      	ldr	r3, [pc, #420]	; (8001104 <main+0x44c>)
 8000f60:	ed93 7b00 	vldr	d7, [r3]
 8000f64:	4b68      	ldr	r3, [pc, #416]	; (8001108 <main+0x450>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	f8ad 3010 	strh.w	r3, [sp, #16]
 8000f6c:	4b67      	ldr	r3, [pc, #412]	; (800110c <main+0x454>)
 8000f6e:	9303      	str	r3, [sp, #12]
 8000f70:	4b67      	ldr	r3, [pc, #412]	; (8001110 <main+0x458>)
 8000f72:	9302      	str	r3, [sp, #8]
 8000f74:	4b67      	ldr	r3, [pc, #412]	; (8001114 <main+0x45c>)
 8000f76:	9301      	str	r3, [sp, #4]
 8000f78:	4b67      	ldr	r3, [pc, #412]	; (8001118 <main+0x460>)
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	eeb0 0a47 	vmov.f32	s0, s14
 8000f80:	eef0 0a67 	vmov.f32	s1, s15
 8000f84:	4b5e      	ldr	r3, [pc, #376]	; (8001100 <main+0x448>)
 8000f86:	4a5d      	ldr	r2, [pc, #372]	; (80010fc <main+0x444>)
 8000f88:	4965      	ldr	r1, [pc, #404]	; (8001120 <main+0x468>)
 8000f8a:	4866      	ldr	r0, [pc, #408]	; (8001124 <main+0x46c>)
 8000f8c:	f002 fa8e 	bl	80034ac <NOP>
				data,
				Mode_dir);

		}

		if (flag_RollTo){
 8000f90:	4b68      	ldr	r3, [pc, #416]	; (8001134 <main+0x47c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d06f      	beq.n	8001078 <main+0x3c0>

			// Si llegamos a este comando lo que se quiere es girar un cierto ángulo el robot
			Done = RESET; // Reseteamos la bandera
 8000f98:	4b63      	ldr	r3, [pc, #396]	; (8001128 <main+0x470>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
			angle_start = parameters_Pos_Robot.grad_global;
 8000f9e:	4b57      	ldr	r3, [pc, #348]	; (80010fc <main+0x444>)
 8000fa0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000fa4:	e9c7 2302 	strd	r2, r3, [r7, #8]

			while (!Done){
 8000fa8:	e052      	b.n	8001050 <main+0x398>

				// comparamos el ángulo a rotar con el angulo actual, partiendo desde el angulo en el que se estaba
				angleToGo_Relative = abs(parameters_Pos_Robot.grad_global - angle_start);
 8000faa:	4b54      	ldr	r3, [pc, #336]	; (80010fc <main+0x444>)
 8000fac:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000fb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fb4:	f7ff f980 	bl	80002b8 <__aeabi_dsub>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f7ff fde2 	bl	8000b88 <__aeabi_d2iz>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bfb8      	it	lt
 8000fca:	425b      	neglt	r3, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fac1 	bl	8000554 <__aeabi_i2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	e9c7 2304 	strd	r2, r3, [r7, #16]
				// tomamos el angulo global y se lo restamos con el angulo con el que se empezo a rotar

				// Cambiamos los parametros
				NOP(handler_Motor_Array,
 8000fda:	4b4a      	ldr	r3, [pc, #296]	; (8001104 <main+0x44c>)
 8000fdc:	ed93 7b00 	vldr	d7, [r3]
 8000fe0:	4b49      	ldr	r3, [pc, #292]	; (8001108 <main+0x450>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	f8ad 3010 	strh.w	r3, [sp, #16]
 8000fe8:	4b48      	ldr	r3, [pc, #288]	; (800110c <main+0x454>)
 8000fea:	9303      	str	r3, [sp, #12]
 8000fec:	4b48      	ldr	r3, [pc, #288]	; (8001110 <main+0x458>)
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	4b48      	ldr	r3, [pc, #288]	; (8001114 <main+0x45c>)
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	4b48      	ldr	r3, [pc, #288]	; (8001118 <main+0x460>)
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	eeb0 0a47 	vmov.f32	s0, s14
 8000ffc:	eef0 0a67 	vmov.f32	s1, s15
 8001000:	4b3f      	ldr	r3, [pc, #252]	; (8001100 <main+0x448>)
 8001002:	4a3e      	ldr	r2, [pc, #248]	; (80010fc <main+0x444>)
 8001004:	4946      	ldr	r1, [pc, #280]	; (8001120 <main+0x468>)
 8001006:	4847      	ldr	r0, [pc, #284]	; (8001124 <main+0x46c>)
 8001008:	f002 fa50 	bl	80034ac <NOP>
					data,
				    Mode_dir);


				// Analizamos si ya se llego al angulo deseado
				if (!(angleToGo_Relative < parameters_Path_Robot.angle) ){Done = !Done;}
 800100c:	4b3c      	ldr	r3, [pc, #240]	; (8001100 <main+0x448>)
 800100e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa9f 	bl	8000554 <__aeabi_i2d>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	2101      	movs	r1, #1
 800101c:	460e      	mov	r6, r1
 800101e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001022:	f7ff fd73 	bl	8000b0c <__aeabi_dcmplt>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <main+0x378>
 800102c:	2300      	movs	r3, #0
 800102e:	461e      	mov	r6, r3
 8001030:	b2f3      	uxtb	r3, r6
 8001032:	f083 0301 	eor.w	r3, r3, #1
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d009      	beq.n	8001050 <main+0x398>
 800103c:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <main+0x470>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf0c      	ite	eq
 8001044:	2301      	moveq	r3, #1
 8001046:	2300      	movne	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	4b36      	ldr	r3, [pc, #216]	; (8001128 <main+0x470>)
 800104e:	701a      	strb	r2, [r3, #0]
			while (!Done){
 8001050:	4b35      	ldr	r3, [pc, #212]	; (8001128 <main+0x470>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0a8      	beq.n	8000faa <main+0x2f2>
			}

			// Paramos el robot
			if (Done){parseCommands("stop");}
 8001058:	4b33      	ldr	r3, [pc, #204]	; (8001128 <main+0x470>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <main+0x3ae>
 8001060:	4832      	ldr	r0, [pc, #200]	; (800112c <main+0x474>)
 8001062:	f000 fcb3 	bl	80019cc <parseCommands>
			angleToGo_Relative = 0; // Reseteamos
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	e9c7 2304 	strd	r2, r3, [r7, #16]
			Done = RESET; // Reseteamos la bandera
 8001072:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <main+0x470>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
		}

		if (flag_Astar){
 8001078:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <main+0x480>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 80c4 	beq.w	800120a <main+0x552>

			if (rxData != '\0'){
 8001082:	4b2e      	ldr	r3, [pc, #184]	; (800113c <main+0x484>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 8086 	beq.w	8001198 <main+0x4e0>

				if (rxData != '@'){
 800108c:	4b2b      	ldr	r3, [pc, #172]	; (800113c <main+0x484>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b40      	cmp	r3, #64	; 0x40
 8001092:	d05b      	beq.n	800114c <main+0x494>
					if (rxData != '\n'){ // Como estamos en Windows, el enter da un par the caracteres \r\n
 8001094:	4b29      	ldr	r3, [pc, #164]	; (800113c <main+0x484>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b0a      	cmp	r3, #10
 800109a:	d02a      	beq.n	80010f2 <main+0x43a>
						if (rxData != '\r'){
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <main+0x484>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b0d      	cmp	r3, #13
 80010a2:	d019      	beq.n	80010d8 <main+0x420>
							stringMatrix[stringRow][stringColumn] = rxData;
 80010a4:	4b26      	ldr	r3, [pc, #152]	; (8001140 <main+0x488>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461e      	mov	r6, r3
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <main+0x48c>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <main+0x484>)
 80010b2:	7819      	ldrb	r1, [r3, #0]
 80010b4:	4a24      	ldr	r2, [pc, #144]	; (8001148 <main+0x490>)
 80010b6:	2334      	movs	r3, #52	; 0x34
 80010b8:	fb06 f303 	mul.w	r3, r6, r3
 80010bc:	4413      	add	r3, r2
 80010be:	4403      	add	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	701a      	strb	r2, [r3, #0]
							stringColumn++;
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <main+0x48c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <main+0x48c>)
 80010ce:	701a      	strb	r2, [r3, #0]
							rxData = '\0';
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <main+0x484>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	e042      	b.n	800115e <main+0x4a6>
						}else{
							stringRow++;
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <main+0x488>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <main+0x488>)
 80010e2:	701a      	strb	r2, [r3, #0]
							stringColumn = 0;
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <main+0x48c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
							rxData = '\0';
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <main+0x484>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	e035      	b.n	800115e <main+0x4a6>
						}
					}else{
						rxData = '\0';
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <main+0x484>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	e031      	b.n	800115e <main+0x4a6>
 80010fa:	bf00      	nop
 80010fc:	20001570 	.word	0x20001570
 8001100:	20001050 	.word	0x20001050
 8001104:	20001618 	.word	0x20001618
 8001108:	20001018 	.word	0x20001018
 800110c:	20000504 	.word	0x20000504
 8001110:	2000101e 	.word	0x2000101e
 8001114:	2000101b 	.word	0x2000101b
 8001118:	2000101a 	.word	0x2000101a
 800111c:	20001030 	.word	0x20001030
 8001120:	200003d0 	.word	0x200003d0
 8001124:	200003e0 	.word	0x200003e0
 8001128:	20001021 	.word	0x20001021
 800112c:	08010508 	.word	0x08010508
 8001130:	2000101f 	.word	0x2000101f
 8001134:	20001020 	.word	0x20001020
 8001138:	20001022 	.word	0x20001022
 800113c:	200004d6 	.word	0x200004d6
 8001140:	20001015 	.word	0x20001015
 8001144:	20001014 	.word	0x20001014
 8001148:	20000584 	.word	0x20000584
					}
				}else{
					doneTransaction = SET;
 800114c:	4b9e      	ldr	r3, [pc, #632]	; (80013c8 <main+0x710>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]

					stringColumn = 0;
 8001152:	4b9e      	ldr	r3, [pc, #632]	; (80013cc <main+0x714>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
					rxData = '\0';
 8001158:	4b9d      	ldr	r3, [pc, #628]	; (80013d0 <main+0x718>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
				}
				if (rxData == 'z'){
 800115e:	4b9c      	ldr	r3, [pc, #624]	; (80013d0 <main+0x718>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b7a      	cmp	r3, #122	; 0x7a
 8001164:	d118      	bne.n	8001198 <main+0x4e0>

					memset(stringMatrix, 0, sizeof(stringMatrix));
 8001166:	f44f 6229 	mov.w	r2, #2704	; 0xa90
 800116a:	2100      	movs	r1, #0
 800116c:	4899      	ldr	r0, [pc, #612]	; (80013d4 <main+0x71c>)
 800116e:	f009 f92f 	bl	800a3d0 <memset>
					stringRow    = 0;
 8001172:	4b99      	ldr	r3, [pc, #612]	; (80013d8 <main+0x720>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 8001178:	4b94      	ldr	r3, [pc, #592]	; (80013cc <main+0x714>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 800117e:	4997      	ldr	r1, [pc, #604]	; (80013dc <main+0x724>)
 8001180:	4897      	ldr	r0, [pc, #604]	; (80013e0 <main+0x728>)
 8001182:	f008 fddb 	bl	8009d3c <writeMsg>
					writeMsg(&handlerUSART, msg_InsertGrid);
 8001186:	4b97      	ldr	r3, [pc, #604]	; (80013e4 <main+0x72c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4619      	mov	r1, r3
 800118c:	4894      	ldr	r0, [pc, #592]	; (80013e0 <main+0x728>)
 800118e:	f008 fdd5 	bl	8009d3c <writeMsg>
					rxData = '\0';
 8001192:	4b8f      	ldr	r3, [pc, #572]	; (80013d0 <main+0x718>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
				}

			}

			// Hallamos la ruta mas corta del Grid y con esto ya formamos nuestra matriz de operaciones
			if (doneTransaction){
 8001198:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <main+0x710>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d034      	beq.n	800120a <main+0x552>

				starWorking = findShorterWay(stringMatrix, readableGrid, costs, &handlerAstarParameters, &handlerCostsAstar, shorterWay);
 80011a0:	4b91      	ldr	r3, [pc, #580]	; (80013e8 <main+0x730>)
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	4b91      	ldr	r3, [pc, #580]	; (80013ec <main+0x734>)
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	4b91      	ldr	r3, [pc, #580]	; (80013f0 <main+0x738>)
 80011aa:	4a92      	ldr	r2, [pc, #584]	; (80013f4 <main+0x73c>)
 80011ac:	4992      	ldr	r1, [pc, #584]	; (80013f8 <main+0x740>)
 80011ae:	4889      	ldr	r0, [pc, #548]	; (80013d4 <main+0x71c>)
 80011b0:	f002 fc2e 	bl	8003a10 <findShorterWay>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b90      	ldr	r3, [pc, #576]	; (80013fc <main+0x744>)
 80011ba:	701a      	strb	r2, [r3, #0]

				if (starWorking){
 80011bc:	4b8f      	ldr	r3, [pc, #572]	; (80013fc <main+0x744>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <main+0x518>
					// si se llego hasta aca es porque Astar si funciona correctamente
				}else{
					writeMsg(&handlerUSART, msg_NotWorking);
 80011c4:	4b8e      	ldr	r3, [pc, #568]	; (8001400 <main+0x748>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4885      	ldr	r0, [pc, #532]	; (80013e0 <main+0x728>)
 80011cc:	f008 fdb6 	bl	8009d3c <writeMsg>
				}
				memset(stringMatrix, 0, sizeof(stringMatrix));
 80011d0:	f44f 6229 	mov.w	r2, #2704	; 0xa90
 80011d4:	2100      	movs	r1, #0
 80011d6:	487f      	ldr	r0, [pc, #508]	; (80013d4 <main+0x71c>)
 80011d8:	f009 f8fa 	bl	800a3d0 <memset>
				stringRow    = 0;
 80011dc:	4b7e      	ldr	r3, [pc, #504]	; (80013d8 <main+0x720>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
				stringColumn = 0;
 80011e2:	4b7a      	ldr	r3, [pc, #488]	; (80013cc <main+0x714>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
				writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 80011e8:	497c      	ldr	r1, [pc, #496]	; (80013dc <main+0x724>)
 80011ea:	487d      	ldr	r0, [pc, #500]	; (80013e0 <main+0x728>)
 80011ec:	f008 fda6 	bl	8009d3c <writeMsg>

				flag_Astar = RESET;
 80011f0:	4b84      	ldr	r3, [pc, #528]	; (8001404 <main+0x74c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
				doneTransaction = RESET;
 80011f6:	4b74      	ldr	r3, [pc, #464]	; (80013c8 <main+0x710>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
				Do_the_track = SET;
 80011fc:	4b82      	ldr	r3, [pc, #520]	; (8001408 <main+0x750>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]

				parameters_op_Robot.op_Mode = 1; // SETEAMOS EN 1 PARA OPERACIONES DE ASTAR
 8001202:	4b82      	ldr	r3, [pc, #520]	; (800140c <main+0x754>)
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2020 	strb.w	r2, [r3, #32]
			}
		}


		if (flag_square){
 800120a:	4b81      	ldr	r3, [pc, #516]	; (8001410 <main+0x758>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d019      	beq.n	8001246 <main+0x58e>
			// En este comando vamos a usar lo entrado en la terminal para contruir un cuadrado de LxL y que el robot
			// recorra el cuadrado

			// seteamos en la funcion create_square_operation las operaciones necesarias para recorrer el cuadrado
			create_square_operations(square_side,
 8001212:	4b80      	ldr	r3, [pc, #512]	; (8001414 <main+0x75c>)
 8001214:	ed93 7b00 	vldr	d7, [r3]
 8001218:	4b7f      	ldr	r3, [pc, #508]	; (8001418 <main+0x760>)
 800121a:	7818      	ldrb	r0, [r3, #0]
 800121c:	4b7f      	ldr	r3, [pc, #508]	; (800141c <main+0x764>)
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	4b7f      	ldr	r3, [pc, #508]	; (8001420 <main+0x768>)
 8001222:	4a80      	ldr	r2, [pc, #512]	; (8001424 <main+0x76c>)
 8001224:	4979      	ldr	r1, [pc, #484]	; (800140c <main+0x754>)
 8001226:	eeb0 0a47 	vmov.f32	s0, s14
 800122a:	eef0 0a67 	vmov.f32	s1, s15
 800122e:	f002 f967 	bl	8003500 <create_square_operations>
									 &parameters_op_Robot,
									 &parameters_buit_Robot,
									 &parameters_Path_Robot,
									 &parameters_Pos_Robot);

			flag_square = RESET;
 8001232:	4b77      	ldr	r3, [pc, #476]	; (8001410 <main+0x758>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
			Do_the_track = SET; // Realizamos las operaciones
 8001238:	4b73      	ldr	r3, [pc, #460]	; (8001408 <main+0x750>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
			parameters_op_Robot.op_Mode = 0; // SETEAMOS EN 1 PARA OPERACIONES DE SQUARE
 800123e:	4b73      	ldr	r3, [pc, #460]	; (800140c <main+0x754>)
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2020 	strb.w	r2, [r3, #32]

		}


		if (Do_the_track){
 8001246:	4b70      	ldr	r3, [pc, #448]	; (8001408 <main+0x750>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 814f 	beq.w	80014ee <main+0x836>

			// Si estamos aqui es porque queremos que nuestro robot haga unas operaciones contiguas
			switch (parameters_op_Robot.op_Mode) {
 8001250:	4b6e      	ldr	r3, [pc, #440]	; (800140c <main+0x754>)
 8001252:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d027      	beq.n	80012aa <main+0x5f2>
 800125a:	2b02      	cmp	r3, #2
 800125c:	f300 8149 	bgt.w	80014f2 <main+0x83a>
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <main+0x5b2>
 8001264:	2b01      	cmp	r3, #1
 8001266:	d00b      	beq.n	8001280 <main+0x5c8>
						// Ya en este punto la bandera de Astar esta bajada por loq ue no tenemos que bajarla nuevamente, y ya
					}

					break;
				}
				default:{break;}
 8001268:	e143      	b.n	80014f2 <main+0x83a>
					counter_operation = 0;
 800126a:	4b6f      	ldr	r3, [pc, #444]	; (8001428 <main+0x770>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
					parameters_op_Robot.op_Mode = 2;
 8001270:	4b66      	ldr	r3, [pc, #408]	; (800140c <main+0x754>)
 8001272:	2202      	movs	r2, #2
 8001274:	f883 2020 	strb.w	r2, [r3, #32]
					parseCommands("reinit"); //reiniciamos todos los parametros
 8001278:	486c      	ldr	r0, [pc, #432]	; (800142c <main+0x774>)
 800127a:	f000 fba7 	bl	80019cc <parseCommands>
					break;
 800127e:	e139      	b.n	80014f4 <main+0x83c>
					create_Astar_operations(&handlerAstarParameters,
 8001280:	4b66      	ldr	r3, [pc, #408]	; (800141c <main+0x764>)
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	4b66      	ldr	r3, [pc, #408]	; (8001420 <main+0x768>)
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	4b66      	ldr	r3, [pc, #408]	; (8001424 <main+0x76c>)
 800128a:	4a69      	ldr	r2, [pc, #420]	; (8001430 <main+0x778>)
 800128c:	4956      	ldr	r1, [pc, #344]	; (80013e8 <main+0x730>)
 800128e:	4858      	ldr	r0, [pc, #352]	; (80013f0 <main+0x738>)
 8001290:	f004 fb06 	bl	80058a0 <create_Astar_operations>
					counter_operation = 0;
 8001294:	4b64      	ldr	r3, [pc, #400]	; (8001428 <main+0x770>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
					parameters_op_Robot.op_Mode = 2;
 800129a:	4b5c      	ldr	r3, [pc, #368]	; (800140c <main+0x754>)
 800129c:	2202      	movs	r2, #2
 800129e:	f883 2020 	strb.w	r2, [r3, #32]
					parseCommands("reinit"); //reiniciamos todos los parametros
 80012a2:	4862      	ldr	r0, [pc, #392]	; (800142c <main+0x774>)
 80012a4:	f000 fb92 	bl	80019cc <parseCommands>
					break;
 80012a8:	e124      	b.n	80014f4 <main+0x83c>
					delay_ms(3000);
 80012aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012ae:	f004 fd8f 	bl	8005dd0 <delay_ms>
					if (parameters_Path_Robot.Operation_List[counter_operation].operacion == LINE){
 80012b2:	4b5d      	ldr	r3, [pc, #372]	; (8001428 <main+0x770>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4619      	mov	r1, r3
 80012b8:	4a59      	ldr	r2, [pc, #356]	; (8001420 <main+0x768>)
 80012ba:	460b      	mov	r3, r1
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4413      	add	r3, r2
 80012c4:	3370      	adds	r3, #112	; 0x70
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	f040 80b9 	bne.w	8001440 <main+0x788>
								sqrt(pow((parameters_Path_Robot.Operation_List[counter_operation].x_destination*10 - parameters_Pos_Robot.xg_position),2)+
 80012ce:	4b56      	ldr	r3, [pc, #344]	; (8001428 <main+0x770>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	4a52      	ldr	r2, [pc, #328]	; (8001420 <main+0x768>)
 80012d6:	460b      	mov	r3, r1
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4413      	add	r3, r2
 80012e0:	3378      	adds	r3, #120	; 0x78
 80012e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	4b52      	ldr	r3, [pc, #328]	; (8001434 <main+0x77c>)
 80012ec:	f7ff f99c 	bl	8000628 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	4b48      	ldr	r3, [pc, #288]	; (800141c <main+0x764>)
 80012fa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80012fe:	f7fe ffdb 	bl	80002b8 <__aeabi_dsub>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	ec43 2b17 	vmov	d7, r2, r3
 800130a:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 80013c0 <main+0x708>
 800130e:	eeb0 0a47 	vmov.f32	s0, s14
 8001312:	eef0 0a67 	vmov.f32	s1, s15
 8001316:	f00c fd25 	bl	800dd64 <pow>
 800131a:	ec59 8b10 	vmov	r8, r9, d0
								     pow((parameters_Path_Robot.Operation_List[counter_operation].y_destination*10 - parameters_Pos_Robot.yg_position),2));
 800131e:	4b42      	ldr	r3, [pc, #264]	; (8001428 <main+0x770>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	4a3e      	ldr	r2, [pc, #248]	; (8001420 <main+0x768>)
 8001326:	460b      	mov	r3, r1
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	3380      	adds	r3, #128	; 0x80
 8001332:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	4b3e      	ldr	r3, [pc, #248]	; (8001434 <main+0x77c>)
 800133c:	f7ff f974 	bl	8000628 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	4b34      	ldr	r3, [pc, #208]	; (800141c <main+0x764>)
 800134a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800134e:	f7fe ffb3 	bl	80002b8 <__aeabi_dsub>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	ec43 2b17 	vmov	d7, r2, r3
 800135a:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80013c0 <main+0x708>
 800135e:	eeb0 0a47 	vmov.f32	s0, s14
 8001362:	eef0 0a67 	vmov.f32	s1, s15
 8001366:	f00c fcfd 	bl	800dd64 <pow>
 800136a:	ec53 2b10 	vmov	r2, r3, d0
								sqrt(pow((parameters_Path_Robot.Operation_List[counter_operation].x_destination*10 - parameters_Pos_Robot.xg_position),2)+
 800136e:	4640      	mov	r0, r8
 8001370:	4649      	mov	r1, r9
 8001372:	f7fe ffa3 	bl	80002bc <__adddf3>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	ec43 2b17 	vmov	d7, r2, r3
 800137e:	eeb0 0a47 	vmov.f32	s0, s14
 8001382:	eef0 0a67 	vmov.f32	s1, s15
 8001386:	f00c fd5d 	bl	800de44 <sqrt>
 800138a:	eeb0 7a40 	vmov.f32	s14, s0
 800138e:	eef0 7a60 	vmov.f32	s15, s1
						parameters_Path_Robot.line_Distance =
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <main+0x768>)
 8001394:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
						sprintf(bufferReception, "goto %u %.2f" , 1 , parameters_Path_Robot.line_Distance); // Mandamos una direccion hacia adelante
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <main+0x768>)
 800139a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800139e:	e9cd 2300 	strd	r2, r3, [sp]
 80013a2:	2201      	movs	r2, #1
 80013a4:	4924      	ldr	r1, [pc, #144]	; (8001438 <main+0x780>)
 80013a6:	4825      	ldr	r0, [pc, #148]	; (800143c <main+0x784>)
 80013a8:	f009 fd74 	bl	800ae94 <siprintf>
						parseCommands(bufferReception); // Mandamos el comando
 80013ac:	4823      	ldr	r0, [pc, #140]	; (800143c <main+0x784>)
 80013ae:	f000 fb0d 	bl	80019cc <parseCommands>
						counter_operation++;
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <main+0x770>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <main+0x770>)
 80013bc:	701a      	strb	r2, [r3, #0]
					break;
 80013be:	e099      	b.n	80014f4 <main+0x83c>
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40000000 	.word	0x40000000
 80013c8:	200004d5 	.word	0x200004d5
 80013cc:	20001014 	.word	0x20001014
 80013d0:	200004d6 	.word	0x200004d6
 80013d4:	20000584 	.word	0x20000584
 80013d8:	20001015 	.word	0x20001015
 80013dc:	08010510 	.word	0x08010510
 80013e0:	20000330 	.word	0x20000330
 80013e4:	20000004 	.word	0x20000004
 80013e8:	20011f44 	.word	0x20011f44
 80013ec:	2000044c 	.word	0x2000044c
 80013f0:	20000440 	.word	0x20000440
 80013f4:	20001734 	.word	0x20001734
 80013f8:	200114b4 	.word	0x200114b4
 80013fc:	20001016 	.word	0x20001016
 8001400:	20000000 	.word	0x20000000
 8001404:	20001022 	.word	0x20001022
 8001408:	20001023 	.word	0x20001023
 800140c:	200015f0 	.word	0x200015f0
 8001410:	20001024 	.word	0x20001024
 8001414:	20001640 	.word	0x20001640
 8001418:	20001638 	.word	0x20001638
 800141c:	20001570 	.word	0x20001570
 8001420:	20001050 	.word	0x20001050
 8001424:	200015c0 	.word	0x200015c0
 8001428:	2000162c 	.word	0x2000162c
 800142c:	08010530 	.word	0x08010530
 8001430:	200010c0 	.word	0x200010c0
 8001434:	40240000 	.word	0x40240000
 8001438:	08010538 	.word	0x08010538
 800143c:	20000494 	.word	0x20000494
					}else if (parameters_Path_Robot.Operation_List[counter_operation].operacion == TURN){
 8001440:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <main+0x840>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	4a2d      	ldr	r2, [pc, #180]	; (80014fc <main+0x844>)
 8001448:	460b      	mov	r3, r1
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	3370      	adds	r3, #112	; 0x70
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d145      	bne.n	80014e6 <main+0x82e>
						if (parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative < 0 ){
 800145a:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <main+0x840>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	4619      	mov	r1, r3
 8001460:	4a26      	ldr	r2, [pc, #152]	; (80014fc <main+0x844>)
 8001462:	460b      	mov	r3, r1
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4413      	add	r3, r2
 800146c:	3388      	adds	r3, #136	; 0x88
 800146e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	f7ff fb47 	bl	8000b0c <__aeabi_dcmplt>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d016      	beq.n	80014b2 <main+0x7fa>
									-parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative);
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <main+0x840>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	4a1c      	ldr	r2, [pc, #112]	; (80014fc <main+0x844>)
 800148c:	460b      	mov	r3, r1
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4413      	add	r3, r2
 8001496:	3388      	adds	r3, #136	; 0x88
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
							sprintf(bufferReception,
 800149c:	4614      	mov	r4, r2
 800149e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014a2:	e9cd 4500 	strd	r4, r5, [sp]
 80014a6:	2200      	movs	r2, #0
 80014a8:	4915      	ldr	r1, [pc, #84]	; (8001500 <main+0x848>)
 80014aa:	4816      	ldr	r0, [pc, #88]	; (8001504 <main+0x84c>)
 80014ac:	f009 fcf2 	bl	800ae94 <siprintf>
 80014b0:	e012      	b.n	80014d8 <main+0x820>
							sprintf(bufferReception,
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <main+0x840>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4619      	mov	r1, r3
 80014b8:	4a10      	ldr	r2, [pc, #64]	; (80014fc <main+0x844>)
 80014ba:	460b      	mov	r3, r1
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	440b      	add	r3, r1
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4413      	add	r3, r2
 80014c4:	3388      	adds	r3, #136	; 0x88
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	e9cd 2300 	strd	r2, r3, [sp]
 80014ce:	2201      	movs	r2, #1
 80014d0:	490b      	ldr	r1, [pc, #44]	; (8001500 <main+0x848>)
 80014d2:	480c      	ldr	r0, [pc, #48]	; (8001504 <main+0x84c>)
 80014d4:	f009 fcde 	bl	800ae94 <siprintf>
						counter_operation++;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <main+0x840>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <main+0x840>)
 80014e2:	701a      	strb	r2, [r3, #0]
					break;
 80014e4:	e006      	b.n	80014f4 <main+0x83c>
						Do_the_track = RESET; // Bajamos la bandera de Do_the_track para dejar de hacer operaciones
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <main+0x850>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
					break;
 80014ec:	e002      	b.n	80014f4 <main+0x83c>
				}// Fin del switch case
			}
 80014ee:	bf00      	nop
 80014f0:	e410      	b.n	8000d14 <main+0x5c>
				default:{break;}
 80014f2:	bf00      	nop
		if (!flag_Astar){
 80014f4:	e40e      	b.n	8000d14 <main+0x5c>
 80014f6:	bf00      	nop
 80014f8:	2000162c 	.word	0x2000162c
 80014fc:	20001050 	.word	0x20001050
 8001500:	08010548 	.word	0x08010548
 8001504:	20000494 	.word	0x20000494
 8001508:	20001023 	.word	0x20001023

0800150c <inSystem>:
}




void inSystem (void){
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af02      	add	r7, sp, #8
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8001512:	4baf      	ldr	r3, [pc, #700]	; (80017d0 <inSystem+0x2c4>)
 8001514:	4aaf      	ldr	r2, [pc, #700]	; (80017d4 <inSystem+0x2c8>)
 8001516:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8001518:	4bad      	ldr	r3, [pc, #692]	; (80017d0 <inSystem+0x2c4>)
 800151a:	2200      	movs	r2, #0
 800151c:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800151e:	4bac      	ldr	r3, [pc, #688]	; (80017d0 <inSystem+0x2c4>)
 8001520:	2201      	movs	r2, #1
 8001522:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8001524:	4baa      	ldr	r3, [pc, #680]	; (80017d0 <inSystem+0x2c4>)
 8001526:	2200      	movs	r2, #0
 8001528:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 800152a:	4ba9      	ldr	r3, [pc, #676]	; (80017d0 <inSystem+0x2c4>)
 800152c:	2205      	movs	r2, #5
 800152e:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001530:	4ba7      	ldr	r3, [pc, #668]	; (80017d0 <inSystem+0x2c4>)
 8001532:	2200      	movs	r2, #0
 8001534:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8001536:	4ba6      	ldr	r3, [pc, #664]	; (80017d0 <inSystem+0x2c4>)
 8001538:	2202      	movs	r2, #2
 800153a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 800153c:	48a4      	ldr	r0, [pc, #656]	; (80017d0 <inSystem+0x2c4>)
 800153e:	f005 ff2d 	bl	800739c <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8001542:	2101      	movs	r1, #1
 8001544:	48a2      	ldr	r0, [pc, #648]	; (80017d0 <inSystem+0x2c4>)
 8001546:	f006 f853 	bl	80075f0 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 800154a:	4ba3      	ldr	r3, [pc, #652]	; (80017d8 <inSystem+0x2cc>)
 800154c:	4aa3      	ldr	r2, [pc, #652]	; (80017dc <inSystem+0x2d0>)
 800154e:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8001550:	4ba1      	ldr	r3, [pc, #644]	; (80017d8 <inSystem+0x2cc>)
 8001552:	2201      	movs	r2, #1
 8001554:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8001556:	4ba0      	ldr	r3, [pc, #640]	; (80017d8 <inSystem+0x2cc>)
 8001558:	2200      	movs	r2, #0
 800155a:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 800155c:	4b9e      	ldr	r3, [pc, #632]	; (80017d8 <inSystem+0x2cc>)
 800155e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001562:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 500;
 8001564:	4b9c      	ldr	r3, [pc, #624]	; (80017d8 <inSystem+0x2cc>)
 8001566:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800156a:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 800156c:	489a      	ldr	r0, [pc, #616]	; (80017d8 <inSystem+0x2cc>)
 800156e:	f004 faa9 	bl	8005ac4 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8001572:	4899      	ldr	r0, [pc, #612]	; (80017d8 <inSystem+0x2cc>)
 8001574:	f004 fea2 	bl	80062bc <startTimer>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 8001578:	f004 fa88 	bl	8005a8c <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array,
 800157c:	4b98      	ldr	r3, [pc, #608]	; (80017e0 <inSystem+0x2d4>)
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	4b98      	ldr	r3, [pc, #608]	; (80017e4 <inSystem+0x2d8>)
 8001582:	4a99      	ldr	r2, [pc, #612]	; (80017e8 <inSystem+0x2dc>)
 8001584:	4999      	ldr	r1, [pc, #612]	; (80017ec <inSystem+0x2e0>)
 8001586:	489a      	ldr	r0, [pc, #616]	; (80017f0 <inSystem+0x2e4>)
 8001588:	f001 fc5c 	bl	8002e44 <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 800158c:	4b99      	ldr	r3, [pc, #612]	; (80017f4 <inSystem+0x2e8>)
 800158e:	4a91      	ldr	r2, [pc, #580]	; (80017d4 <inSystem+0x2c8>)
 8001590:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001592:	4b98      	ldr	r3, [pc, #608]	; (80017f4 <inSystem+0x2e8>)
 8001594:	2202      	movs	r2, #2
 8001596:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001598:	4b96      	ldr	r3, [pc, #600]	; (80017f4 <inSystem+0x2e8>)
 800159a:	2202      	movs	r2, #2
 800159c:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800159e:	4b95      	ldr	r3, [pc, #596]	; (80017f4 <inSystem+0x2e8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 80015a4:	4b93      	ldr	r3, [pc, #588]	; (80017f4 <inSystem+0x2e8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80015aa:	4b92      	ldr	r3, [pc, #584]	; (80017f4 <inSystem+0x2e8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80015b0:	4b90      	ldr	r3, [pc, #576]	; (80017f4 <inSystem+0x2e8>)
 80015b2:	2202      	movs	r2, #2
 80015b4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 80015b6:	488f      	ldr	r0, [pc, #572]	; (80017f4 <inSystem+0x2e8>)
 80015b8:	f005 fef0 	bl	800739c <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 80015bc:	4b8e      	ldr	r3, [pc, #568]	; (80017f8 <inSystem+0x2ec>)
 80015be:	4a8f      	ldr	r2, [pc, #572]	; (80017fc <inSystem+0x2f0>)
 80015c0:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 80015c2:	4b8d      	ldr	r3, [pc, #564]	; (80017f8 <inSystem+0x2ec>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	721a      	strb	r2, [r3, #8]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 80015c8:	4b8b      	ldr	r3, [pc, #556]	; (80017f8 <inSystem+0x2ec>)
 80015ca:	4a8d      	ldr	r2, [pc, #564]	; (8001800 <inSystem+0x2f4>)
 80015cc:	619a      	str	r2, [r3, #24]
//	counter = fixed_dutty;
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 80015ce:	498a      	ldr	r1, [pc, #552]	; (80017f8 <inSystem+0x2ec>)
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	4b8b      	ldr	r3, [pc, #556]	; (8001804 <inSystem+0x2f8>)
 80015d6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 80015da:	4b87      	ldr	r3, [pc, #540]	; (80017f8 <inSystem+0x2ec>)
 80015dc:	2264      	movs	r2, #100	; 0x64
 80015de:	60da      	str	r2, [r3, #12]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 80015e0:	4b85      	ldr	r3, [pc, #532]	; (80017f8 <inSystem+0x2ec>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	771a      	strb	r2, [r3, #28]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 80015e6:	4b84      	ldr	r3, [pc, #528]	; (80017f8 <inSystem+0x2ec>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_1);
 80015ec:	4882      	ldr	r0, [pc, #520]	; (80017f8 <inSystem+0x2ec>)
 80015ee:	f006 ff3f 	bl	8008470 <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 80015f2:	4881      	ldr	r0, [pc, #516]	; (80017f8 <inSystem+0x2ec>)
 80015f4:	f007 f826 	bl	8008644 <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 80015f8:	4b83      	ldr	r3, [pc, #524]	; (8001808 <inSystem+0x2fc>)
 80015fa:	4a76      	ldr	r2, [pc, #472]	; (80017d4 <inSystem+0x2c8>)
 80015fc:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 80015fe:	4b82      	ldr	r3, [pc, #520]	; (8001808 <inSystem+0x2fc>)
 8001600:	2202      	movs	r2, #2
 8001602:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001604:	4b80      	ldr	r3, [pc, #512]	; (8001808 <inSystem+0x2fc>)
 8001606:	2202      	movs	r2, #2
 8001608:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800160a:	4b7f      	ldr	r3, [pc, #508]	; (8001808 <inSystem+0x2fc>)
 800160c:	2200      	movs	r2, #0
 800160e:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8001610:	4b7d      	ldr	r3, [pc, #500]	; (8001808 <inSystem+0x2fc>)
 8001612:	2201      	movs	r2, #1
 8001614:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001616:	4b7c      	ldr	r3, [pc, #496]	; (8001808 <inSystem+0x2fc>)
 8001618:	2200      	movs	r2, #0
 800161a:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800161c:	4b7a      	ldr	r3, [pc, #488]	; (8001808 <inSystem+0x2fc>)
 800161e:	2202      	movs	r2, #2
 8001620:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 8001622:	4879      	ldr	r0, [pc, #484]	; (8001808 <inSystem+0x2fc>)
 8001624:	f005 feba 	bl	800739c <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 8001628:	4b78      	ldr	r3, [pc, #480]	; (800180c <inSystem+0x300>)
 800162a:	4a74      	ldr	r2, [pc, #464]	; (80017fc <inSystem+0x2f0>)
 800162c:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 800162e:	4b77      	ldr	r3, [pc, #476]	; (800180c <inSystem+0x300>)
 8001630:	2201      	movs	r2, #1
 8001632:	721a      	strb	r2, [r3, #8]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 8001634:	4b75      	ldr	r3, [pc, #468]	; (800180c <inSystem+0x300>)
 8001636:	4a72      	ldr	r2, [pc, #456]	; (8001800 <inSystem+0x2f4>)
 8001638:	619a      	str	r2, [r3, #24]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 800163a:	4974      	ldr	r1, [pc, #464]	; (800180c <inSystem+0x300>)
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	4b70      	ldr	r3, [pc, #448]	; (8001804 <inSystem+0x2f8>)
 8001642:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 8001646:	4b71      	ldr	r3, [pc, #452]	; (800180c <inSystem+0x300>)
 8001648:	2264      	movs	r2, #100	; 0x64
 800164a:	60da      	str	r2, [r3, #12]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 800164c:	4b6f      	ldr	r3, [pc, #444]	; (800180c <inSystem+0x300>)
 800164e:	2201      	movs	r2, #1
 8001650:	771a      	strb	r2, [r3, #28]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8001652:	4b6e      	ldr	r3, [pc, #440]	; (800180c <inSystem+0x300>)
 8001654:	2201      	movs	r2, #1
 8001656:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_2);
 8001658:	486c      	ldr	r0, [pc, #432]	; (800180c <inSystem+0x300>)
 800165a:	f006 ff09 	bl	8008470 <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 800165e:	486b      	ldr	r0, [pc, #428]	; (800180c <inSystem+0x300>)
 8001660:	f006 fff0 	bl	8008644 <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 8001664:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <inSystem+0x304>)
 8001666:	4a6b      	ldr	r2, [pc, #428]	; (8001814 <inSystem+0x308>)
 8001668:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800166a:	4b69      	ldr	r3, [pc, #420]	; (8001810 <inSystem+0x304>)
 800166c:	2200      	movs	r2, #0
 800166e:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001670:	4b67      	ldr	r3, [pc, #412]	; (8001810 <inSystem+0x304>)
 8001672:	2201      	movs	r2, #1
 8001674:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 8001676:	4b66      	ldr	r3, [pc, #408]	; (8001810 <inSystem+0x304>)
 8001678:	220a      	movs	r2, #10
 800167a:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800167c:	4b64      	ldr	r3, [pc, #400]	; (8001810 <inSystem+0x304>)
 800167e:	2200      	movs	r2, #0
 8001680:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001682:	4b63      	ldr	r3, [pc, #396]	; (8001810 <inSystem+0x304>)
 8001684:	2200      	movs	r2, #0
 8001686:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001688:	4b61      	ldr	r3, [pc, #388]	; (8001810 <inSystem+0x304>)
 800168a:	2202      	movs	r2, #2
 800168c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 800168e:	4860      	ldr	r0, [pc, #384]	; (8001810 <inSystem+0x304>)
 8001690:	f005 fe84 	bl	800739c <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 8001694:	2100      	movs	r1, #0
 8001696:	485e      	ldr	r0, [pc, #376]	; (8001810 <inSystem+0x304>)
 8001698:	f005 ffd5 	bl	8007646 <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 800169c:	4b5e      	ldr	r3, [pc, #376]	; (8001818 <inSystem+0x30c>)
 800169e:	4a5d      	ldr	r2, [pc, #372]	; (8001814 <inSystem+0x308>)
 80016a0:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80016a2:	4b5d      	ldr	r3, [pc, #372]	; (8001818 <inSystem+0x30c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80016a8:	4b5b      	ldr	r3, [pc, #364]	; (8001818 <inSystem+0x30c>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 80016ae:	4b5a      	ldr	r3, [pc, #360]	; (8001818 <inSystem+0x30c>)
 80016b0:	220b      	movs	r2, #11
 80016b2:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80016b4:	4b58      	ldr	r3, [pc, #352]	; (8001818 <inSystem+0x30c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80016ba:	4b57      	ldr	r3, [pc, #348]	; (8001818 <inSystem+0x30c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80016c0:	4b55      	ldr	r3, [pc, #340]	; (8001818 <inSystem+0x30c>)
 80016c2:	2202      	movs	r2, #2
 80016c4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 80016c6:	4854      	ldr	r0, [pc, #336]	; (8001818 <inSystem+0x30c>)
 80016c8:	f005 fe68 	bl	800739c <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 80016cc:	2100      	movs	r1, #0
 80016ce:	4852      	ldr	r0, [pc, #328]	; (8001818 <inSystem+0x30c>)
 80016d0:	f005 ffb9 	bl	8007646 <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 80016d4:	4b51      	ldr	r3, [pc, #324]	; (800181c <inSystem+0x310>)
 80016d6:	4a4f      	ldr	r2, [pc, #316]	; (8001814 <inSystem+0x308>)
 80016d8:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80016da:	4b50      	ldr	r3, [pc, #320]	; (800181c <inSystem+0x310>)
 80016dc:	2200      	movs	r2, #0
 80016de:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80016e0:	4b4e      	ldr	r3, [pc, #312]	; (800181c <inSystem+0x310>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 80016e6:	4b4d      	ldr	r3, [pc, #308]	; (800181c <inSystem+0x310>)
 80016e8:	220c      	movs	r2, #12
 80016ea:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80016ec:	4b4b      	ldr	r3, [pc, #300]	; (800181c <inSystem+0x310>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80016f2:	4b4a      	ldr	r3, [pc, #296]	; (800181c <inSystem+0x310>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80016f8:	4b48      	ldr	r3, [pc, #288]	; (800181c <inSystem+0x310>)
 80016fa:	2202      	movs	r2, #2
 80016fc:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 80016fe:	4847      	ldr	r0, [pc, #284]	; (800181c <inSystem+0x310>)
 8001700:	f005 fe4c 	bl	800739c <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default SET
 8001704:	2100      	movs	r1, #0
 8001706:	4845      	ldr	r0, [pc, #276]	; (800181c <inSystem+0x310>)
 8001708:	f005 ff9d 	bl	8007646 <GPIO_WritePin_Afopt>
	handler_Motor_Array[0]->configMotor.dir = SET;
 800170c:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <inSystem+0x2e4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2201      	movs	r2, #1
 8001712:	771a      	strb	r2, [r3, #28]

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 8001714:	4b42      	ldr	r3, [pc, #264]	; (8001820 <inSystem+0x314>)
 8001716:	4a43      	ldr	r2, [pc, #268]	; (8001824 <inSystem+0x318>)
 8001718:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800171a:	4b41      	ldr	r3, [pc, #260]	; (8001820 <inSystem+0x314>)
 800171c:	2200      	movs	r2, #0
 800171e:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001720:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <inSystem+0x314>)
 8001722:	2201      	movs	r2, #1
 8001724:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8001726:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <inSystem+0x314>)
 8001728:	2202      	movs	r2, #2
 800172a:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800172c:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <inSystem+0x314>)
 800172e:	2200      	movs	r2, #0
 8001730:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001732:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <inSystem+0x314>)
 8001734:	2200      	movs	r2, #0
 8001736:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001738:	4b39      	ldr	r3, [pc, #228]	; (8001820 <inSystem+0x314>)
 800173a:	2202      	movs	r2, #2
 800173c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 800173e:	4838      	ldr	r0, [pc, #224]	; (8001820 <inSystem+0x314>)
 8001740:	f005 fe2c 	bl	800739c <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default SET
 8001744:	2100      	movs	r1, #0
 8001746:	4836      	ldr	r0, [pc, #216]	; (8001820 <inSystem+0x314>)
 8001748:	f005 ff7d 	bl	8007646 <GPIO_WritePin_Afopt>
	handler_Motor_Array[1]->configMotor.dir = SET;
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <inSystem+0x2e4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	771a      	strb	r2, [r3, #28]
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 8001754:	4b34      	ldr	r3, [pc, #208]	; (8001828 <inSystem+0x31c>)
 8001756:	4a2f      	ldr	r2, [pc, #188]	; (8001814 <inSystem+0x308>)
 8001758:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800175a:	4b33      	ldr	r3, [pc, #204]	; (8001828 <inSystem+0x31c>)
 800175c:	2200      	movs	r2, #0
 800175e:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8001760:	4b31      	ldr	r3, [pc, #196]	; (8001828 <inSystem+0x31c>)
 8001762:	2200      	movs	r2, #0
 8001764:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8001766:	4b30      	ldr	r3, [pc, #192]	; (8001828 <inSystem+0x31c>)
 8001768:	2201      	movs	r2, #1
 800176a:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800176c:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <inSystem+0x31c>)
 800176e:	2200      	movs	r2, #0
 8001770:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <inSystem+0x31c>)
 8001774:	2200      	movs	r2, #0
 8001776:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001778:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <inSystem+0x31c>)
 800177a:	2202      	movs	r2, #2
 800177c:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 800177e:	4b2b      	ldr	r3, [pc, #172]	; (800182c <inSystem+0x320>)
 8001780:	4a29      	ldr	r2, [pc, #164]	; (8001828 <inSystem+0x31c>)
 8001782:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001784:	4b29      	ldr	r3, [pc, #164]	; (800182c <inSystem+0x320>)
 8001786:	2202      	movs	r2, #2
 8001788:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 800178a:	4828      	ldr	r0, [pc, #160]	; (800182c <inSystem+0x320>)
 800178c:	f004 fdd8 	bl	8006340 <extInt_Config>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <inSystem+0x324>)
 8001792:	4a20      	ldr	r2, [pc, #128]	; (8001814 <inSystem+0x308>)
 8001794:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001796:	4b26      	ldr	r3, [pc, #152]	; (8001830 <inSystem+0x324>)
 8001798:	2200      	movs	r2, #0
 800179a:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <inSystem+0x324>)
 800179e:	2200      	movs	r2, #0
 80017a0:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <inSystem+0x324>)
 80017a4:	2203      	movs	r2, #3
 80017a6:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <inSystem+0x324>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <inSystem+0x324>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <inSystem+0x324>)
 80017b6:	2202      	movs	r2, #2
 80017b8:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <inSystem+0x328>)
 80017bc:	4a1c      	ldr	r2, [pc, #112]	; (8001830 <inSystem+0x324>)
 80017be:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <inSystem+0x328>)
 80017c2:	2202      	movs	r2, #2
 80017c4:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 80017c6:	481b      	ldr	r0, [pc, #108]	; (8001834 <inSystem+0x328>)
 80017c8:	f004 fdba 	bl	8006340 <extInt_Config>
 80017cc:	e034      	b.n	8001838 <inSystem+0x32c>
 80017ce:	bf00      	nop
 80017d0:	20000204 	.word	0x20000204
 80017d4:	40020000 	.word	0x40020000
 80017d8:	200002b0 	.word	0x200002b0
 80017dc:	40000400 	.word	0x40000400
 80017e0:	20001018 	.word	0x20001018
 80017e4:	20001030 	.word	0x20001030
 80017e8:	20001050 	.word	0x20001050
 80017ec:	20001570 	.word	0x20001570
 80017f0:	200003e0 	.word	0x200003e0
 80017f4:	20000210 	.word	0x20000210
 80017f8:	200002f0 	.word	0x200002f0
 80017fc:	40000c00 	.word	0x40000c00
 8001800:	41e00000 	.word	0x41e00000
 8001804:	40408000 	.word	0x40408000
 8001808:	2000021c 	.word	0x2000021c
 800180c:	20000310 	.word	0x20000310
 8001810:	2000024c 	.word	0x2000024c
 8001814:	40020800 	.word	0x40020800
 8001818:	20000240 	.word	0x20000240
 800181c:	20000264 	.word	0x20000264
 8001820:	20000258 	.word	0x20000258
 8001824:	40020c00 	.word	0x40020c00
 8001828:	20000270 	.word	0x20000270
 800182c:	200002a0 	.word	0x200002a0
 8001830:	2000027c 	.word	0x2000027c
 8001834:	200002a8 	.word	0x200002a8
		/////////A2 TX // A3 RX PARA USART 2 /////////
		////////A9 TX // A10 RX PARA USART 1 ////////

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 8001838:	4b57      	ldr	r3, [pc, #348]	; (8001998 <inSystem+0x48c>)
 800183a:	4a58      	ldr	r2, [pc, #352]	; (800199c <inSystem+0x490>)
 800183c:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 800183e:	4b56      	ldr	r3, [pc, #344]	; (8001998 <inSystem+0x48c>)
 8001840:	2207      	movs	r2, #7
 8001842:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001844:	4b54      	ldr	r3, [pc, #336]	; (8001998 <inSystem+0x48c>)
 8001846:	2202      	movs	r2, #2
 8001848:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800184a:	4b53      	ldr	r3, [pc, #332]	; (8001998 <inSystem+0x48c>)
 800184c:	2200      	movs	r2, #0
 800184e:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8001850:	4b51      	ldr	r3, [pc, #324]	; (8001998 <inSystem+0x48c>)
 8001852:	2202      	movs	r2, #2
 8001854:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001856:	4b50      	ldr	r3, [pc, #320]	; (8001998 <inSystem+0x48c>)
 8001858:	2200      	movs	r2, #0
 800185a:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800185c:	4b4e      	ldr	r3, [pc, #312]	; (8001998 <inSystem+0x48c>)
 800185e:	2203      	movs	r2, #3
 8001860:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 8001862:	484d      	ldr	r0, [pc, #308]	; (8001998 <inSystem+0x48c>)
 8001864:	f005 fd9a 	bl	800739c <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 8001868:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <inSystem+0x494>)
 800186a:	4a4c      	ldr	r2, [pc, #304]	; (800199c <inSystem+0x490>)
 800186c:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 800186e:	4b4c      	ldr	r3, [pc, #304]	; (80019a0 <inSystem+0x494>)
 8001870:	2207      	movs	r2, #7
 8001872:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001874:	4b4a      	ldr	r3, [pc, #296]	; (80019a0 <inSystem+0x494>)
 8001876:	2202      	movs	r2, #2
 8001878:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800187a:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <inSystem+0x494>)
 800187c:	2200      	movs	r2, #0
 800187e:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8001880:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <inSystem+0x494>)
 8001882:	2203      	movs	r2, #3
 8001884:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001886:	4b46      	ldr	r3, [pc, #280]	; (80019a0 <inSystem+0x494>)
 8001888:	2200      	movs	r2, #0
 800188a:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800188c:	4b44      	ldr	r3, [pc, #272]	; (80019a0 <inSystem+0x494>)
 800188e:	2203      	movs	r2, #3
 8001890:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 8001892:	4843      	ldr	r0, [pc, #268]	; (80019a0 <inSystem+0x494>)
 8001894:	f005 fd82 	bl	800739c <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 8001898:	4b42      	ldr	r3, [pc, #264]	; (80019a4 <inSystem+0x498>)
 800189a:	4a43      	ldr	r2, [pc, #268]	; (80019a8 <inSystem+0x49c>)
 800189c:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <inSystem+0x498>)
 80018a0:	4a42      	ldr	r2, [pc, #264]	; (80019ac <inSystem+0x4a0>)
 80018a2:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 80018a4:	4b3f      	ldr	r3, [pc, #252]	; (80019a4 <inSystem+0x498>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 80018aa:	4b3e      	ldr	r3, [pc, #248]	; (80019a4 <inSystem+0x498>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 80018b0:	4b3c      	ldr	r3, [pc, #240]	; (80019a4 <inSystem+0x498>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 80018b6:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <inSystem+0x498>)
 80018b8:	2202      	movs	r2, #2
 80018ba:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 80018bc:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <inSystem+0x498>)
 80018be:	2200      	movs	r2, #0
 80018c0:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 80018c2:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <inSystem+0x498>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 80018c8:	4b36      	ldr	r3, [pc, #216]	; (80019a4 <inSystem+0x498>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 80018ce:	4835      	ldr	r0, [pc, #212]	; (80019a4 <inSystem+0x498>)
 80018d0:	f007 fe48 	bl	8009564 <USART_Config>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 80018d4:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <inSystem+0x4a4>)
 80018d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018da:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 80018dc:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <inSystem+0x4a4>)
 80018de:	2201      	movs	r2, #1
 80018e0:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 80018e2:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <inSystem+0x4a4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 80018e8:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <inSystem+0x4a4>)
 80018ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ee:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 80018f0:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <inSystem+0x4a4>)
 80018f2:	2210      	movs	r2, #16
 80018f4:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 80018f6:	482e      	ldr	r0, [pc, #184]	; (80019b0 <inSystem+0x4a4>)
 80018f8:	f004 f8e4 	bl	8005ac4 <BasicTimer_Config>
	startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 80018fc:	482c      	ldr	r0, [pc, #176]	; (80019b0 <inSystem+0x4a4>)
 80018fe:	f004 fcdd 	bl	80062bc <startTimer>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 8001902:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <inSystem+0x4a8>)
 8001904:	4a2c      	ldr	r2, [pc, #176]	; (80019b8 <inSystem+0x4ac>)
 8001906:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001908:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <inSystem+0x4a8>)
 800190a:	2204      	movs	r2, #4
 800190c:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800190e:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <inSystem+0x4a8>)
 8001910:	2202      	movs	r2, #2
 8001912:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 8001914:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <inSystem+0x4a8>)
 8001916:	2208      	movs	r2, #8
 8001918:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <inSystem+0x4a8>)
 800191c:	2201      	movs	r2, #1
 800191e:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001920:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <inSystem+0x4a8>)
 8001922:	2200      	movs	r2, #0
 8001924:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001926:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <inSystem+0x4a8>)
 8001928:	2202      	movs	r2, #2
 800192a:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <inSystem+0x4b0>)
 800192e:	4a22      	ldr	r2, [pc, #136]	; (80019b8 <inSystem+0x4ac>)
 8001930:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001932:	4b22      	ldr	r3, [pc, #136]	; (80019bc <inSystem+0x4b0>)
 8001934:	2204      	movs	r2, #4
 8001936:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <inSystem+0x4b0>)
 800193a:	2202      	movs	r2, #2
 800193c:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <inSystem+0x4b0>)
 8001940:	2209      	movs	r2, #9
 8001942:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <inSystem+0x4b0>)
 8001946:	2201      	movs	r2, #1
 8001948:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800194a:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <inSystem+0x4b0>)
 800194c:	2200      	movs	r2, #0
 800194e:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001950:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <inSystem+0x4b0>)
 8001952:	2202      	movs	r2, #2
 8001954:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <inSystem+0x4b4>)
 8001958:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <inSystem+0x4b8>)
 800195a:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <inSystem+0x4b4>)
 800195e:	2232      	movs	r2, #50	; 0x32
 8001960:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <inSystem+0x4b4>)
 8001964:	2268      	movs	r2, #104	; 0x68
 8001966:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <inSystem+0x4b4>)
 800196a:	2201      	movs	r2, #1
 800196c:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <inSystem+0x4bc>)
 8001970:	4a10      	ldr	r2, [pc, #64]	; (80019b4 <inSystem+0x4a8>)
 8001972:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <inSystem+0x4bc>)
 8001976:	4a11      	ldr	r2, [pc, #68]	; (80019bc <inSystem+0x4b0>)
 8001978:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <inSystem+0x4bc>)
 800197c:	4a10      	ldr	r2, [pc, #64]	; (80019c0 <inSystem+0x4b4>)
 800197e:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <inSystem+0x4bc>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <inSystem+0x4bc>)
 8001988:	2200      	movs	r2, #0
 800198a:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 800198c:	480e      	ldr	r0, [pc, #56]	; (80019c8 <inSystem+0x4bc>)
 800198e:	f005 febd 	bl	800770c <configMPUAccel>

}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000234 	.word	0x20000234
 800199c:	40020000 	.word	0x40020000
 80019a0:	20000228 	.word	0x20000228
 80019a4:	20000330 	.word	0x20000330
 80019a8:	40004400 	.word	0x40004400
 80019ac:	02faf080 	.word	0x02faf080
 80019b0:	200002c4 	.word	0x200002c4
 80019b4:	20000288 	.word	0x20000288
 80019b8:	40020400 	.word	0x40020400
 80019bc:	20000294 	.word	0x20000294
 80019c0:	200003c4 	.word	0x200003c4
 80019c4:	40005400 	.word	0x40005400
 80019c8:	200003d0 	.word	0x200003d0

080019cc <parseCommands>:


void parseCommands(char *stringVector){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af04      	add	r7, sp, #16
 80019d2:	6078      	str	r0, [r7, #4]

	sscanf(stringVector, "%s %u %u %u %s", cmd ,&firstParameter, &secondParameter, &thirdParameter, userMsg);
 80019d4:	4b83      	ldr	r3, [pc, #524]	; (8001be4 <parseCommands+0x218>)
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	4b83      	ldr	r3, [pc, #524]	; (8001be8 <parseCommands+0x21c>)
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	4b83      	ldr	r3, [pc, #524]	; (8001bec <parseCommands+0x220>)
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4b83      	ldr	r3, [pc, #524]	; (8001bf0 <parseCommands+0x224>)
 80019e2:	4a84      	ldr	r2, [pc, #528]	; (8001bf4 <parseCommands+0x228>)
 80019e4:	4984      	ldr	r1, [pc, #528]	; (8001bf8 <parseCommands+0x22c>)
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f009 fa74 	bl	800aed4 <siscanf>


	if (strcmp(cmd, "help") == 0){
 80019ec:	4983      	ldr	r1, [pc, #524]	; (8001bfc <parseCommands+0x230>)
 80019ee:	4881      	ldr	r0, [pc, #516]	; (8001bf4 <parseCommands+0x228>)
 80019f0:	f7fe fbf6 	bl	80001e0 <strcmp>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d128      	bne.n	8001a4c <parseCommands+0x80>

		writeMsg(&handlerUSART, "HELP MENU CMD : \n");
 80019fa:	4981      	ldr	r1, [pc, #516]	; (8001c00 <parseCommands+0x234>)
 80019fc:	4881      	ldr	r0, [pc, #516]	; (8001c04 <parseCommands+0x238>)
 80019fe:	f008 f99d 	bl	8009d3c <writeMsg>
		writeMsg(&handlerUSART, "1)  go #dir 1--> Ahead , 0-->back Ward\n");
 8001a02:	4981      	ldr	r1, [pc, #516]	; (8001c08 <parseCommands+0x23c>)
 8001a04:	487f      	ldr	r0, [pc, #508]	; (8001c04 <parseCommands+0x238>)
 8001a06:	f008 f999 	bl	8009d3c <writeMsg>
		writeMsg(&handlerUSART, "2)  goto #dir #Distance \n");
 8001a0a:	4980      	ldr	r1, [pc, #512]	; (8001c0c <parseCommands+0x240>)
 8001a0c:	487d      	ldr	r0, [pc, #500]	; (8001c04 <parseCommands+0x238>)
 8001a0e:	f008 f995 	bl	8009d3c <writeMsg>
		writeMsg(&handlerUSART, "3)  roll #dir_roll 1--> CW , 0-->CCW \n");
 8001a12:	497f      	ldr	r1, [pc, #508]	; (8001c10 <parseCommands+0x244>)
 8001a14:	487b      	ldr	r0, [pc, #492]	; (8001c04 <parseCommands+0x238>)
 8001a16:	f008 f991 	bl	8009d3c <writeMsg>
		writeMsg(&handlerUSART, "4)  rollto #dir_roll #angle  \n");
 8001a1a:	497e      	ldr	r1, [pc, #504]	; (8001c14 <parseCommands+0x248>)
 8001a1c:	4879      	ldr	r0, [pc, #484]	; (8001c04 <parseCommands+0x238>)
 8001a1e:	f008 f98d 	bl	8009d3c <writeMsg>
		writeMsg(&handlerUSART, "5)  change #dir #operation 1--->Line , 0--->Roll \n");
 8001a22:	497d      	ldr	r1, [pc, #500]	; (8001c18 <parseCommands+0x24c>)
 8001a24:	4877      	ldr	r0, [pc, #476]	; (8001c04 <parseCommands+0x238>)
 8001a26:	f008 f989 	bl	8009d3c <writeMsg>
		writeMsg(&handlerUSART, "6)  square #dir_roll #side_distance (cm)  \n");
 8001a2a:	497c      	ldr	r1, [pc, #496]	; (8001c1c <parseCommands+0x250>)
 8001a2c:	4875      	ldr	r0, [pc, #468]	; (8001c04 <parseCommands+0x238>)
 8001a2e:	f008 f985 	bl	8009d3c <writeMsg>
		writeMsg(&handlerUSART, "7)  Astar  #Parallel-distance #Diagonal-distance \n");
 8001a32:	497b      	ldr	r1, [pc, #492]	; (8001c20 <parseCommands+0x254>)
 8001a34:	4873      	ldr	r0, [pc, #460]	; (8001c04 <parseCommands+0x238>)
 8001a36:	f008 f981 	bl	8009d3c <writeMsg>
		writeMsg(&handlerUSART, "8)  reinit  \n");
 8001a3a:	497a      	ldr	r1, [pc, #488]	; (8001c24 <parseCommands+0x258>)
 8001a3c:	4871      	ldr	r0, [pc, #452]	; (8001c04 <parseCommands+0x238>)
 8001a3e:	f008 f97d 	bl	8009d3c <writeMsg>
		writeMsg(&handlerUSART, " \n");
 8001a42:	4979      	ldr	r1, [pc, #484]	; (8001c28 <parseCommands+0x25c>)
 8001a44:	486f      	ldr	r0, [pc, #444]	; (8001c04 <parseCommands+0x238>)
 8001a46:	f008 f979 	bl	8009d3c <writeMsg>
	else {
		writeMsg(&handlerUSART, "\r\n _____________Comando Incorrecto :c_____________ \n");
	}


}
 8001a4a:	e194      	b.n	8001d76 <parseCommands+0x3aa>
	}else if (strcmp(cmd, "go") == 0){
 8001a4c:	4977      	ldr	r1, [pc, #476]	; (8001c2c <parseCommands+0x260>)
 8001a4e:	4869      	ldr	r0, [pc, #420]	; (8001bf4 <parseCommands+0x228>)
 8001a50:	f7fe fbc6 	bl	80001e0 <strcmp>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d118      	bne.n	8001a8c <parseCommands+0xc0>
		Mode_dir.Mode = Mode = sLine;
 8001a5a:	4b75      	ldr	r3, [pc, #468]	; (8001c30 <parseCommands+0x264>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	4b73      	ldr	r3, [pc, #460]	; (8001c30 <parseCommands+0x264>)
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	4b73      	ldr	r3, [pc, #460]	; (8001c34 <parseCommands+0x268>)
 8001a66:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 8001a68:	4b61      	ldr	r3, [pc, #388]	; (8001bf0 <parseCommands+0x224>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4b71      	ldr	r3, [pc, #452]	; (8001c34 <parseCommands+0x268>)
 8001a70:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001a72:	4b70      	ldr	r3, [pc, #448]	; (8001c34 <parseCommands+0x268>)
 8001a74:	6819      	ldr	r1, [r3, #0]
 8001a76:	4870      	ldr	r0, [pc, #448]	; (8001c38 <parseCommands+0x26c>)
 8001a78:	f000 fffe 	bl	8002a78 <On_motor_Straigh_Roll>
		flag_Go_Straigh = SET;
 8001a7c:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <parseCommands+0x270>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO go EJECUTADO____\n\r");
 8001a82:	496f      	ldr	r1, [pc, #444]	; (8001c40 <parseCommands+0x274>)
 8001a84:	485f      	ldr	r0, [pc, #380]	; (8001c04 <parseCommands+0x238>)
 8001a86:	f008 f959 	bl	8009d3c <writeMsg>
}
 8001a8a:	e174      	b.n	8001d76 <parseCommands+0x3aa>
	}else if (strcmp(cmd, "goto") == 0){
 8001a8c:	496d      	ldr	r1, [pc, #436]	; (8001c44 <parseCommands+0x278>)
 8001a8e:	4859      	ldr	r0, [pc, #356]	; (8001bf4 <parseCommands+0x228>)
 8001a90:	f7fe fba6 	bl	80001e0 <strcmp>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d122      	bne.n	8001ae0 <parseCommands+0x114>
		Mode_dir.Mode = Mode = sLine ;
 8001a9a:	4b65      	ldr	r3, [pc, #404]	; (8001c30 <parseCommands+0x264>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	4b63      	ldr	r3, [pc, #396]	; (8001c30 <parseCommands+0x264>)
 8001aa2:	781a      	ldrb	r2, [r3, #0]
 8001aa4:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <parseCommands+0x268>)
 8001aa6:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 8001aa8:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <parseCommands+0x224>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b61      	ldr	r3, [pc, #388]	; (8001c34 <parseCommands+0x268>)
 8001ab0:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001ab2:	4b60      	ldr	r3, [pc, #384]	; (8001c34 <parseCommands+0x268>)
 8001ab4:	6819      	ldr	r1, [r3, #0]
 8001ab6:	4860      	ldr	r0, [pc, #384]	; (8001c38 <parseCommands+0x26c>)
 8001ab8:	f000 ffde 	bl	8002a78 <On_motor_Straigh_Roll>
		parameters_Path_Robot.line_Distance = secondParameter; // almacenamos la distancia en milimrtros a recorrer
 8001abc:	4b4b      	ldr	r3, [pc, #300]	; (8001bec <parseCommands+0x220>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd37 	bl	8000534 <__aeabi_ui2d>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	495f      	ldr	r1, [pc, #380]	; (8001c48 <parseCommands+0x27c>)
 8001acc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		flag_GoTo_Straigh = SET;
 8001ad0:	4b5e      	ldr	r3, [pc, #376]	; (8001c4c <parseCommands+0x280>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO goto EJECUTADO____\n\r");
 8001ad6:	495e      	ldr	r1, [pc, #376]	; (8001c50 <parseCommands+0x284>)
 8001ad8:	484a      	ldr	r0, [pc, #296]	; (8001c04 <parseCommands+0x238>)
 8001ada:	f008 f92f 	bl	8009d3c <writeMsg>
}
 8001ade:	e14a      	b.n	8001d76 <parseCommands+0x3aa>
	}else if (strcmp(cmd, "roll") == 0){
 8001ae0:	495c      	ldr	r1, [pc, #368]	; (8001c54 <parseCommands+0x288>)
 8001ae2:	4844      	ldr	r0, [pc, #272]	; (8001bf4 <parseCommands+0x228>)
 8001ae4:	f7fe fb7c 	bl	80001e0 <strcmp>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d118      	bne.n	8001b20 <parseCommands+0x154>
		Mode_dir.Mode = Mode = sRoll;
 8001aee:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <parseCommands+0x264>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	4b4e      	ldr	r3, [pc, #312]	; (8001c30 <parseCommands+0x264>)
 8001af6:	781a      	ldrb	r2, [r3, #0]
 8001af8:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <parseCommands+0x268>)
 8001afa:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 8001afc:	4b3c      	ldr	r3, [pc, #240]	; (8001bf0 <parseCommands+0x224>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <parseCommands+0x268>)
 8001b04:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001b06:	4b4b      	ldr	r3, [pc, #300]	; (8001c34 <parseCommands+0x268>)
 8001b08:	6819      	ldr	r1, [r3, #0]
 8001b0a:	484b      	ldr	r0, [pc, #300]	; (8001c38 <parseCommands+0x26c>)
 8001b0c:	f000 ffb4 	bl	8002a78 <On_motor_Straigh_Roll>
		flag_Roll = SET;
 8001b10:	4b51      	ldr	r3, [pc, #324]	; (8001c58 <parseCommands+0x28c>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO roll EJECUTADO____\n\r");
 8001b16:	4951      	ldr	r1, [pc, #324]	; (8001c5c <parseCommands+0x290>)
 8001b18:	483a      	ldr	r0, [pc, #232]	; (8001c04 <parseCommands+0x238>)
 8001b1a:	f008 f90f 	bl	8009d3c <writeMsg>
}
 8001b1e:	e12a      	b.n	8001d76 <parseCommands+0x3aa>
	}else if (strcmp(cmd, "rollto") == 0){
 8001b20:	494f      	ldr	r1, [pc, #316]	; (8001c60 <parseCommands+0x294>)
 8001b22:	4834      	ldr	r0, [pc, #208]	; (8001bf4 <parseCommands+0x228>)
 8001b24:	f7fe fb5c 	bl	80001e0 <strcmp>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d11d      	bne.n	8001b6a <parseCommands+0x19e>
		Mode_dir.Mode = Mode = sRoll;
 8001b2e:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <parseCommands+0x264>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	4b3e      	ldr	r3, [pc, #248]	; (8001c30 <parseCommands+0x264>)
 8001b36:	781a      	ldrb	r2, [r3, #0]
 8001b38:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <parseCommands+0x268>)
 8001b3a:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 8001b3c:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <parseCommands+0x224>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <parseCommands+0x268>)
 8001b44:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001b46:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <parseCommands+0x268>)
 8001b48:	6819      	ldr	r1, [r3, #0]
 8001b4a:	483b      	ldr	r0, [pc, #236]	; (8001c38 <parseCommands+0x26c>)
 8001b4c:	f000 ff94 	bl	8002a78 <On_motor_Straigh_Roll>
		parameters_Path_Robot.angle = secondParameter;
 8001b50:	4b26      	ldr	r3, [pc, #152]	; (8001bec <parseCommands+0x220>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b3c      	ldr	r3, [pc, #240]	; (8001c48 <parseCommands+0x27c>)
 8001b58:	649a      	str	r2, [r3, #72]	; 0x48
		flag_RollTo = SET;
 8001b5a:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <parseCommands+0x298>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO rollto EJECUTADO____\n\r");
 8001b60:	4941      	ldr	r1, [pc, #260]	; (8001c68 <parseCommands+0x29c>)
 8001b62:	4828      	ldr	r0, [pc, #160]	; (8001c04 <parseCommands+0x238>)
 8001b64:	f008 f8ea 	bl	8009d3c <writeMsg>
}
 8001b68:	e105      	b.n	8001d76 <parseCommands+0x3aa>
	}else if (strcmp(cmd, "reinit") == 0){
 8001b6a:	4940      	ldr	r1, [pc, #256]	; (8001c6c <parseCommands+0x2a0>)
 8001b6c:	4821      	ldr	r0, [pc, #132]	; (8001bf4 <parseCommands+0x228>)
 8001b6e:	f7fe fb37 	bl	80001e0 <strcmp>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10c      	bne.n	8001b92 <parseCommands+0x1c6>
		int_Config_Motor(handler_Motor_Array,
 8001b78:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <parseCommands+0x268>)
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4b3c      	ldr	r3, [pc, #240]	; (8001c70 <parseCommands+0x2a4>)
 8001b7e:	4a32      	ldr	r2, [pc, #200]	; (8001c48 <parseCommands+0x27c>)
 8001b80:	493c      	ldr	r1, [pc, #240]	; (8001c74 <parseCommands+0x2a8>)
 8001b82:	482d      	ldr	r0, [pc, #180]	; (8001c38 <parseCommands+0x26c>)
 8001b84:	f001 f95e 	bl	8002e44 <int_Config_Motor>
		writeMsg(&handlerUSART, "\n____COMANDO reinit EJECUTADO____\n\r");
 8001b88:	493b      	ldr	r1, [pc, #236]	; (8001c78 <parseCommands+0x2ac>)
 8001b8a:	481e      	ldr	r0, [pc, #120]	; (8001c04 <parseCommands+0x238>)
 8001b8c:	f008 f8d6 	bl	8009d3c <writeMsg>
}
 8001b90:	e0f1      	b.n	8001d76 <parseCommands+0x3aa>
	}else if (strcmp(cmd, "change") == 0){
 8001b92:	493a      	ldr	r1, [pc, #232]	; (8001c7c <parseCommands+0x2b0>)
 8001b94:	4817      	ldr	r0, [pc, #92]	; (8001bf4 <parseCommands+0x228>)
 8001b96:	f7fe fb23 	bl	80001e0 <strcmp>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d16f      	bne.n	8001c80 <parseCommands+0x2b4>
		if (Mode == sLine ){
 8001ba0:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <parseCommands+0x264>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10a      	bne.n	8001bbe <parseCommands+0x1f2>
			Mode_dir.direction_s_r = firstParameter;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <parseCommands+0x224>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <parseCommands+0x268>)
 8001bb0:	705a      	strb	r2, [r3, #1]
			change_dir_straigh_Roll(handler_Motor_Array, Mode_dir);
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <parseCommands+0x268>)
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	4820      	ldr	r0, [pc, #128]	; (8001c38 <parseCommands+0x26c>)
 8001bb8:	f001 f849 	bl	8002c4e <change_dir_straigh_Roll>
 8001bbc:	e00d      	b.n	8001bda <parseCommands+0x20e>
		}else if (Mode == sRoll ){
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <parseCommands+0x264>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d109      	bne.n	8001bda <parseCommands+0x20e>
			Mode_dir.direction_s_r = firstParameter;
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <parseCommands+0x224>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <parseCommands+0x268>)
 8001bce:	705a      	strb	r2, [r3, #1]
			change_dir_straigh_Roll(handler_Motor_Array, Mode_dir);
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <parseCommands+0x268>)
 8001bd2:	6819      	ldr	r1, [r3, #0]
 8001bd4:	4818      	ldr	r0, [pc, #96]	; (8001c38 <parseCommands+0x26c>)
 8001bd6:	f001 f83a 	bl	8002c4e <change_dir_straigh_Roll>
		writeMsg(&handlerUSART, "\n____COMANDO reinit EJECUTADO____\n\r");
 8001bda:	4927      	ldr	r1, [pc, #156]	; (8001c78 <parseCommands+0x2ac>)
 8001bdc:	4809      	ldr	r0, [pc, #36]	; (8001c04 <parseCommands+0x238>)
 8001bde:	f008 f8ad 	bl	8009d3c <writeMsg>
}
 8001be2:	e0c8      	b.n	8001d76 <parseCommands+0x3aa>
 8001be4:	20000544 	.word	0x20000544
 8001be8:	20000500 	.word	0x20000500
 8001bec:	200004fc 	.word	0x200004fc
 8001bf0:	200004f8 	.word	0x200004f8
 8001bf4:	200004d8 	.word	0x200004d8
 8001bf8:	08010558 	.word	0x08010558
 8001bfc:	08010568 	.word	0x08010568
 8001c00:	08010570 	.word	0x08010570
 8001c04:	20000330 	.word	0x20000330
 8001c08:	08010584 	.word	0x08010584
 8001c0c:	080105ac 	.word	0x080105ac
 8001c10:	080105c8 	.word	0x080105c8
 8001c14:	080105f0 	.word	0x080105f0
 8001c18:	08010610 	.word	0x08010610
 8001c1c:	08010644 	.word	0x08010644
 8001c20:	08010670 	.word	0x08010670
 8001c24:	080106a4 	.word	0x080106a4
 8001c28:	080106b4 	.word	0x080106b4
 8001c2c:	080106b8 	.word	0x080106b8
 8001c30:	20000008 	.word	0x20000008
 8001c34:	20001018 	.word	0x20001018
 8001c38:	200003e0 	.word	0x200003e0
 8001c3c:	2000101c 	.word	0x2000101c
 8001c40:	080106bc 	.word	0x080106bc
 8001c44:	080106dc 	.word	0x080106dc
 8001c48:	20001050 	.word	0x20001050
 8001c4c:	2000101d 	.word	0x2000101d
 8001c50:	080106e4 	.word	0x080106e4
 8001c54:	08010708 	.word	0x08010708
 8001c58:	2000101f 	.word	0x2000101f
 8001c5c:	08010710 	.word	0x08010710
 8001c60:	08010734 	.word	0x08010734
 8001c64:	20001020 	.word	0x20001020
 8001c68:	0801073c 	.word	0x0801073c
 8001c6c:	08010530 	.word	0x08010530
 8001c70:	20001030 	.word	0x20001030
 8001c74:	20001570 	.word	0x20001570
 8001c78:	08010760 	.word	0x08010760
 8001c7c:	08010784 	.word	0x08010784
	}else if (strcmp(cmd, "Astar") == 0){
 8001c80:	493f      	ldr	r1, [pc, #252]	; (8001d80 <parseCommands+0x3b4>)
 8001c82:	4840      	ldr	r0, [pc, #256]	; (8001d84 <parseCommands+0x3b8>)
 8001c84:	f7fe faac 	bl	80001e0 <strcmp>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d130      	bne.n	8001cf0 <parseCommands+0x324>
		handlerAstarParameters.parallelDistance  = firstParameter;
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <parseCommands+0x3bc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c9a:	4b3c      	ldr	r3, [pc, #240]	; (8001d8c <parseCommands+0x3c0>)
 8001c9c:	edc3 7a00 	vstr	s15, [r3]
		handlerAstarParameters.diagonalDiastance = secondParameter;
 8001ca0:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <parseCommands+0x3c4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cac:	4b37      	ldr	r3, [pc, #220]	; (8001d8c <parseCommands+0x3c0>)
 8001cae:	edc3 7a01 	vstr	s15, [r3, #4]
		writeMsg(&handlerUSART, msg_InsertGrid);
 8001cb2:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <parseCommands+0x3c8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4837      	ldr	r0, [pc, #220]	; (8001d98 <parseCommands+0x3cc>)
 8001cba:	f008 f83f 	bl	8009d3c <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert * for  empty space______________\n");
 8001cbe:	4937      	ldr	r1, [pc, #220]	; (8001d9c <parseCommands+0x3d0>)
 8001cc0:	4835      	ldr	r0, [pc, #212]	; (8001d98 <parseCommands+0x3cc>)
 8001cc2:	f008 f83b 	bl	8009d3c <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert e for  the end space____________\n");
 8001cc6:	4936      	ldr	r1, [pc, #216]	; (8001da0 <parseCommands+0x3d4>)
 8001cc8:	4833      	ldr	r0, [pc, #204]	; (8001d98 <parseCommands+0x3cc>)
 8001cca:	f008 f837 	bl	8009d3c <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert s for  the start space__________\n");
 8001cce:	4935      	ldr	r1, [pc, #212]	; (8001da4 <parseCommands+0x3d8>)
 8001cd0:	4831      	ldr	r0, [pc, #196]	; (8001d98 <parseCommands+0x3cc>)
 8001cd2:	f008 f833 	bl	8009d3c <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert # for  obstacules_______________\n");
 8001cd6:	4934      	ldr	r1, [pc, #208]	; (8001da8 <parseCommands+0x3dc>)
 8001cd8:	482f      	ldr	r0, [pc, #188]	; (8001d98 <parseCommands+0x3cc>)
 8001cda:	f008 f82f 	bl	8009d3c <writeMsg>
		initSerialComunication(&handlerUSART, &handlerPinRx, &handlerPinTx);
 8001cde:	4a33      	ldr	r2, [pc, #204]	; (8001dac <parseCommands+0x3e0>)
 8001ce0:	4933      	ldr	r1, [pc, #204]	; (8001db0 <parseCommands+0x3e4>)
 8001ce2:	482d      	ldr	r0, [pc, #180]	; (8001d98 <parseCommands+0x3cc>)
 8001ce4:	f003 fd72 	bl	80057cc <initSerialComunication>
		flag_Astar = SET;
 8001ce8:	4b32      	ldr	r3, [pc, #200]	; (8001db4 <parseCommands+0x3e8>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
}
 8001cee:	e042      	b.n	8001d76 <parseCommands+0x3aa>
	}else if (strcmp(cmd, "square") == 0){
 8001cf0:	4931      	ldr	r1, [pc, #196]	; (8001db8 <parseCommands+0x3ec>)
 8001cf2:	4824      	ldr	r0, [pc, #144]	; (8001d84 <parseCommands+0x3b8>)
 8001cf4:	f7fe fa74 	bl	80001e0 <strcmp>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d112      	bne.n	8001d24 <parseCommands+0x358>
			square_dir  = firstParameter; // Direccion del cuadrado
 8001cfe:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <parseCommands+0x3bc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <parseCommands+0x3f0>)
 8001d06:	701a      	strb	r2, [r3, #0]
			square_side = secondParameter; // lado del cuadrado en cm
 8001d08:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <parseCommands+0x3c4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fc11 	bl	8000534 <__aeabi_ui2d>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	492a      	ldr	r1, [pc, #168]	; (8001dc0 <parseCommands+0x3f4>)
 8001d18:	e9c1 2300 	strd	r2, r3, [r1]
			flag_square = SET; // Levantamos la bandera para Square
 8001d1c:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <parseCommands+0x3f8>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
}
 8001d22:	e028      	b.n	8001d76 <parseCommands+0x3aa>
	}else if (strcmp(cmd, "stop") == 0){
 8001d24:	4928      	ldr	r1, [pc, #160]	; (8001dc8 <parseCommands+0x3fc>)
 8001d26:	4817      	ldr	r0, [pc, #92]	; (8001d84 <parseCommands+0x3b8>)
 8001d28:	f7fe fa5a 	bl	80001e0 <strcmp>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d112      	bne.n	8001d58 <parseCommands+0x38c>
		stop(handler_Motor_Array); // Apagamos los motores
 8001d32:	4826      	ldr	r0, [pc, #152]	; (8001dcc <parseCommands+0x400>)
 8001d34:	f001 f862 	bl	8002dfc <stop>
		flag_Go_Straigh   = RESET;
 8001d38:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <parseCommands+0x404>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
		flag_GoTo_Straigh = RESET;
 8001d3e:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <parseCommands+0x408>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
		flag_Roll         = RESET;
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <parseCommands+0x40c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
		flag_RollTo       = RESET;
 8001d4a:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <parseCommands+0x410>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
		Mode_dir.Mode     = sNone;
 8001d50:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <parseCommands+0x414>)
 8001d52:	2202      	movs	r2, #2
 8001d54:	701a      	strb	r2, [r3, #0]
}
 8001d56:	e00e      	b.n	8001d76 <parseCommands+0x3aa>
	}else if (strcmp(cmd, "stoptimer") == 0){
 8001d58:	4922      	ldr	r1, [pc, #136]	; (8001de4 <parseCommands+0x418>)
 8001d5a:	480a      	ldr	r0, [pc, #40]	; (8001d84 <parseCommands+0x3b8>)
 8001d5c:	f7fe fa40 	bl	80001e0 <strcmp>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d103      	bne.n	8001d6e <parseCommands+0x3a2>
		stopTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Paramos de medir
 8001d66:	4820      	ldr	r0, [pc, #128]	; (8001de8 <parseCommands+0x41c>)
 8001d68:	f004 faba 	bl	80062e0 <stopTimer>
}
 8001d6c:	e003      	b.n	8001d76 <parseCommands+0x3aa>
		writeMsg(&handlerUSART, "\r\n _____________Comando Incorrecto :c_____________ \n");
 8001d6e:	491f      	ldr	r1, [pc, #124]	; (8001dec <parseCommands+0x420>)
 8001d70:	4809      	ldr	r0, [pc, #36]	; (8001d98 <parseCommands+0x3cc>)
 8001d72:	f007 ffe3 	bl	8009d3c <writeMsg>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	0801078c 	.word	0x0801078c
 8001d84:	200004d8 	.word	0x200004d8
 8001d88:	200004f8 	.word	0x200004f8
 8001d8c:	20000440 	.word	0x20000440
 8001d90:	200004fc 	.word	0x200004fc
 8001d94:	20000004 	.word	0x20000004
 8001d98:	20000330 	.word	0x20000330
 8001d9c:	08010794 	.word	0x08010794
 8001da0:	080107cc 	.word	0x080107cc
 8001da4:	08010804 	.word	0x08010804
 8001da8:	0801083c 	.word	0x0801083c
 8001dac:	20000234 	.word	0x20000234
 8001db0:	20000228 	.word	0x20000228
 8001db4:	20001022 	.word	0x20001022
 8001db8:	08010874 	.word	0x08010874
 8001dbc:	20001638 	.word	0x20001638
 8001dc0:	20001640 	.word	0x20001640
 8001dc4:	20001024 	.word	0x20001024
 8001dc8:	08010508 	.word	0x08010508
 8001dcc:	200003e0 	.word	0x200003e0
 8001dd0:	2000101c 	.word	0x2000101c
 8001dd4:	2000101d 	.word	0x2000101d
 8001dd8:	2000101f 	.word	0x2000101f
 8001ddc:	20001020 	.word	0x20001020
 8001de0:	20001018 	.word	0x20001018
 8001de4:	0801087c 	.word	0x0801087c
 8001de8:	200002c4 	.word	0x200002c4
 8001dec:	08010888 	.word	0x08010888

08001df0 <usart2Rx_Callback>:

// Interrupcion usart 1
void usart2Rx_Callback(void){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8001df4:	f007 ffca 	bl	8009d8c <getRxData>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b01      	ldr	r3, [pc, #4]	; (8001e04 <usart2Rx_Callback+0x14>)
 8001dfe:	701a      	strb	r2, [r3, #0]
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200004d6 	.word	0x200004d6

08001e08 <BasicTimer3_Callback>:

//Interrupción Timer 3
void BasicTimer3_Callback(void){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerPinA5);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <BasicTimer3_Callback+0x10>)
 8001e0e:	f005 fc66 	bl	80076de <GPIOxTooglePin>
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000204 	.word	0x20000204

08001e1c <BasicTimer2_Callback>:

//Interrupcion Timer 2

void BasicTimer2_Callback(void){
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0

	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <BasicTimer2_Callback+0x44>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 8001e26:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <BasicTimer2_Callback+0x48>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <BasicTimer2_Callback+0x4c>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d803      	bhi.n	8001e3c <BasicTimer2_Callback+0x20>
			flag_measurements = SET;
 8001e34:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <BasicTimer2_Callback+0x50>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	e005      	b.n	8001e48 <BasicTimer2_Callback+0x2c>
	}else{ counting_action++; }
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <BasicTimer2_Callback+0x4c>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	3301      	adds	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <BasicTimer2_Callback+0x4c>)
 8001e46:	801a      	strh	r2, [r3, #0]

	if (Mode_dir.Mode == sNone){
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <BasicTimer2_Callback+0x54>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d102      	bne.n	8001e56 <BasicTimer2_Callback+0x3a>
		flag_NOP = SET;
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <BasicTimer2_Callback+0x58>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
	}

	// EN LA FUNCION 'GO' ESTAN LAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	2000101a 	.word	0x2000101a
 8001e64:	20000009 	.word	0x20000009
 8001e68:	20001028 	.word	0x20001028
 8001e6c:	2000101b 	.word	0x2000101b
 8001e70:	20001018 	.word	0x20001018
 8001e74:	20001025 	.word	0x20001025

08001e78 <callback_extInt1>:


//Interrupciones de Exti
void callback_extInt1(void){
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != sNone){
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <callback_extInt1+0x24>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d005      	beq.n	8001e90 <callback_extInt1+0x18>
		handler_Motor_Array[0]->parametersMotor.counts++;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <callback_extInt1+0x28>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	791a      	ldrb	r2, [r3, #4]
 8001e8a:	3201      	adds	r2, #1
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	711a      	strb	r2, [r3, #4]
	}
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20001018 	.word	0x20001018
 8001ea0:	200003e0 	.word	0x200003e0

08001ea4 <callback_extInt3>:

void callback_extInt3(void){
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != sNone){
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <callback_extInt3+0x24>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d005      	beq.n	8001ebc <callback_extInt3+0x18>
		handler_Motor_Array[1]->parametersMotor.counts++;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <callback_extInt3+0x28>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	791a      	ldrb	r2, [r3, #4]
 8001eb6:	3201      	adds	r2, #1
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	711a      	strb	r2, [r3, #4]
	}
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20001018 	.word	0x20001018
 8001ecc:	200003e0 	.word	0x200003e0

08001ed0 <calibracionGyros>:
//Definicion de funciones varias


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 8001edc:	23c8      	movs	r3, #200	; 0xc8
 8001ede:	827b      	strh	r3, [r7, #18]
	float     medidas    = 0;
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
	float     suma       = 0;
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
	uint8_t   contador   = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	76fb      	strb	r3, [r7, #27]
	float     promedio   = 0;
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]

	switch (axis) {
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d061      	beq.n	8001fc0 <calibracionGyros+0xf0>
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	dc70      	bgt.n	8001fe2 <calibracionGyros+0x112>
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d015      	beq.n	8001f30 <calibracionGyros+0x60>
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d037      	beq.n	8001f78 <calibracionGyros+0xa8>
				delay_ms(1); // esperamos 1 milisegundo
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 8001f08:	e06b      	b.n	8001fe2 <calibracionGyros+0x112>
				medidas = readGyro_X(ptrMPUAccel);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f005 fd88 	bl	8007a20 <readGyro_X>
 8001f10:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001f14:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f18:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f20:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001f24:	7efb      	ldrb	r3, [r7, #27]
 8001f26:	3301      	adds	r3, #1
 8001f28:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f003 ff50 	bl	8005dd0 <delay_ms>
			while (contador < numMedidas){
 8001f30:	7efb      	ldrb	r3, [r7, #27]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	8a7a      	ldrh	r2, [r7, #18]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d8e7      	bhi.n	8001f0a <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 8001f3a:	8a7b      	ldrh	r3, [r7, #18]
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f44:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f4c:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001f50:	e048      	b.n	8001fe4 <calibracionGyros+0x114>
				medidas = readGyro_Y(ptrMPUAccel);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f005 fdec 	bl	8007b30 <readGyro_Y>
 8001f58:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001f5c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f60:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f68:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001f6c:	7efb      	ldrb	r3, [r7, #27]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001f72:	2001      	movs	r0, #1
 8001f74:	f003 ff2c 	bl	8005dd0 <delay_ms>
			while (contador < numMedidas){
 8001f78:	7efb      	ldrb	r3, [r7, #27]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	8a7a      	ldrh	r2, [r7, #18]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d8e7      	bhi.n	8001f52 <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 8001f82:	8a7b      	ldrh	r3, [r7, #18]
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f94:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001f98:	e024      	b.n	8001fe4 <calibracionGyros+0x114>
				medidas = readGyro_Z(ptrMPUAccel);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f005 fe50 	bl	8007c40 <readGyro_Z>
 8001fa0:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001fa4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001fa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb0:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001fb4:	7efb      	ldrb	r3, [r7, #27]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f003 ff08 	bl	8005dd0 <delay_ms>
			while (contador < numMedidas){
 8001fc0:	7efb      	ldrb	r3, [r7, #27]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	8a7a      	ldrh	r2, [r7, #18]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d8e7      	bhi.n	8001f9a <calibracionGyros+0xca>
			promedio = suma / numMedidas;
 8001fca:	8a7b      	ldrh	r3, [r7, #18]
 8001fcc:	ee07 3a90 	vmov	s15, r3
 8001fd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fdc:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001fe0:	e000      	b.n	8001fe4 <calibracionGyros+0x114>
			break;
 8001fe2:	bf00      	nop
		}
	}


	return promedio;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	ee07 3a90 	vmov	s15, r3
}
 8001fea:	eeb0 0a67 	vmov.f32	s0, s15
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <getAngle>:


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6178      	str	r0, [r7, #20]
 8001ffc:	ed87 0a04 	vstr	s0, [r7, #16]
 8002000:	ed87 1b02 	vstr	d1, [r7, #8]
 8002004:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	f005 fe1a 	bl	8007c40 <readGyro_Z>
 800200c:	ee10 3a10 	vmov	r3, s0
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fab1 	bl	8000578 <__aeabi_f2d>
 8002016:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800201a:	f7fe f94d 	bl	80002b8 <__aeabi_dsub>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4610      	mov	r0, r2
 8002024:	4619      	mov	r1, r3
 8002026:	f7fe fdf7 	bl	8000c18 <__aeabi_d2f>
 800202a:	4603      	mov	r3, r0
 800202c:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 800202e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002032:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002036:	ee27 7a87 	vmul.f32	s14, s15, s14
 800203a:	eddf 6a19 	vldr	s13, [pc, #100]	; 80020a0 <getAngle+0xac>
 800203e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002042:	ed97 7a04 	vldr	s14, [r7, #16]
 8002046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204a:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 800204e:	69b8      	ldr	r0, [r7, #24]
 8002050:	f7fe fa92 	bl	8000578 <__aeabi_f2d>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <getAngle+0xb0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa88 	bl	8000578 <__aeabi_f2d>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	f7fe f925 	bl	80002bc <__adddf3>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f7fe fdcd 	bl	8000c18 <__aeabi_d2f>
 800207e:	4603      	mov	r3, r0
 8002080:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <getAngle+0xb0>)
 8002082:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <getAngle+0xb4>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	b29a      	uxth	r2, r3
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <getAngle+0xb8>)
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	4413      	add	r3, r2
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <getAngle+0xb8>)
 8002094:	801a      	strh	r2, [r3, #0]
}
 8002096:	bf00      	nop
 8002098:	3720      	adds	r7, #32
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	447a0000 	.word	0x447a0000
 80020a4:	20001620 	.word	0x20001620
 80020a8:	200002c4 	.word	0x200002c4
 80020ac:	20001026 	.word	0x20001026

080020b0 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_dir_t operation_mode_dir){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	ed2d 8b02 	vpush	{d8}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	80ba      	strh	r2, [r7, #4]

	//Verificamos el modo
	if(operation_mode_dir.Mode == sLine){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 80020c0:	793b      	ldrb	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f040 81d4 	bne.w	8002470 <get_measuremets_parameters+0x3c0>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 80020c8:	4bab      	ldr	r3, [pc, #684]	; (8002378 <get_measuremets_parameters+0x2c8>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4bab      	ldr	r3, [pc, #684]	; (800237c <get_measuremets_parameters+0x2cc>)
 80020d0:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 80020d2:	4bab      	ldr	r3, [pc, #684]	; (8002380 <get_measuremets_parameters+0x2d0>)
 80020d4:	edd3 6a00 	vldr	s13, [r3]
 80020d8:	4baa      	ldr	r3, [pc, #680]	; (8002384 <get_measuremets_parameters+0x2d4>)
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020e8:	4ba7      	ldr	r3, [pc, #668]	; (8002388 <get_measuremets_parameters+0x2d8>)
 80020ea:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 80020ee:	4ba6      	ldr	r3, [pc, #664]	; (8002388 <get_measuremets_parameters+0x2d8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fa40 	bl	8000578 <__aeabi_f2d>
 80020f8:	a39b      	add	r3, pc, #620	; (adr r3, 8002368 <get_measuremets_parameters+0x2b8>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fa93 	bl	8000628 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	4b9f      	ldr	r3, [pc, #636]	; (800238c <get_measuremets_parameters+0x2dc>)
 8002110:	f7fe fbb4 	bl	800087c <__aeabi_ddiv>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800211e:	4b98      	ldr	r3, [pc, #608]	; (8002380 <get_measuremets_parameters+0x2d0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fa28 	bl	8000578 <__aeabi_f2d>
 8002128:	a38f      	add	r3, pc, #572	; (adr r3, 8002368 <get_measuremets_parameters+0x2b8>)
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	f7fe fa7b 	bl	8000628 <__aeabi_dmul>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4610      	mov	r0, r2
 8002138:	4619      	mov	r1, r3
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	4b93      	ldr	r3, [pc, #588]	; (800238c <get_measuremets_parameters+0x2dc>)
 8002140:	f7fe fb9c 	bl	800087c <__aeabi_ddiv>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	ec43 2b17 	vmov	d7, r2, r3
 800214c:	eeb0 0a47 	vmov.f32	s0, s14
 8002150:	eef0 0a67 	vmov.f32	s1, s15
 8002154:	f00b fd78 	bl	800dc48 <sin>
 8002158:	eeb0 8a40 	vmov.f32	s16, s0
 800215c:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002160:	4b87      	ldr	r3, [pc, #540]	; (8002380 <get_measuremets_parameters+0x2d0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fa07 	bl	8000578 <__aeabi_f2d>
 800216a:	a37f      	add	r3, pc, #508	; (adr r3, 8002368 <get_measuremets_parameters+0x2b8>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	f7fe fa5a 	bl	8000628 <__aeabi_dmul>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	4b82      	ldr	r3, [pc, #520]	; (800238c <get_measuremets_parameters+0x2dc>)
 8002182:	f7fe fb7b 	bl	800087c <__aeabi_ddiv>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	ec43 2b17 	vmov	d7, r2, r3
 800218e:	eeb0 0a47 	vmov.f32	s0, s14
 8002192:	eef0 0a67 	vmov.f32	s1, s15
 8002196:	f00b fcbb 	bl	800db10 <cos>
 800219a:	eeb0 7a40 	vmov.f32	s14, s0
 800219e:	eef0 7a60 	vmov.f32	s15, s1
 80021a2:	eeb0 1a47 	vmov.f32	s2, s14
 80021a6:	eef0 1a67 	vmov.f32	s3, s15
 80021aa:	eeb0 0a48 	vmov.f32	s0, s16
 80021ae:	eef0 0a68 	vmov.f32	s1, s17
 80021b2:	f00b fdd5 	bl	800dd60 <atan2>
 80021b6:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 80021ba:	a36d      	add	r3, pc, #436	; (adr r3, 8002370 <get_measuremets_parameters+0x2c0>)
 80021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c0:	f7fe fa32 	bl	8000628 <__aeabi_dmul>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021d2:	f7fe f873 	bl	80002bc <__adddf3>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	e9c1 2306 	strd	r2, r3, [r1, #24]

			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80021e6:	a360      	add	r3, pc, #384	; (adr r3, 8002368 <get_measuremets_parameters+0x2b8>)
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	f7fe fa1c 	bl	8000628 <__aeabi_dmul>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	4b63      	ldr	r3, [pc, #396]	; (800238c <get_measuremets_parameters+0x2dc>)
 80021fe:	f7fe fb3d 	bl	800087c <__aeabi_ddiv>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	ec43 2b17 	vmov	d7, r2, r3
 800220a:	eeb0 0a47 	vmov.f32	s0, s14
 800220e:	eef0 0a67 	vmov.f32	s1, s15
 8002212:	f00b fd19 	bl	800dc48 <sin>
 8002216:	eeb0 8a40 	vmov.f32	s16, s0
 800221a:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002224:	a350      	add	r3, pc, #320	; (adr r3, 8002368 <get_measuremets_parameters+0x2b8>)
 8002226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222a:	f7fe f9fd 	bl	8000628 <__aeabi_dmul>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	4b54      	ldr	r3, [pc, #336]	; (800238c <get_measuremets_parameters+0x2dc>)
 800223c:	f7fe fb1e 	bl	800087c <__aeabi_ddiv>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	ec43 2b17 	vmov	d7, r2, r3
 8002248:	eeb0 0a47 	vmov.f32	s0, s14
 800224c:	eef0 0a67 	vmov.f32	s1, s15
 8002250:	f00b fc5e 	bl	800db10 <cos>
 8002254:	eeb0 7a40 	vmov.f32	s14, s0
 8002258:	eef0 7a60 	vmov.f32	s15, s1
 800225c:	eeb0 1a47 	vmov.f32	s2, s14
 8002260:	eef0 1a67 	vmov.f32	s3, s15
 8002264:	eeb0 0a48 	vmov.f32	s0, s16
 8002268:	eef0 0a68 	vmov.f32	s1, s17
 800226c:	f00b fd78 	bl	800dd60 <atan2>
 8002270:	eeb0 7a40 	vmov.f32	s14, s0
 8002274:	eef0 7a60 	vmov.f32	s15, s1
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	ed83 7b04 	vstr	d7, [r3, #16]

			// Con la siguiente accion conseguimos que el angulo que deseamos solo este dentro del rango [-pi,pi]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	ed93 7b02 	vldr	d7, [r3, #8]
 8002284:	eeb0 0a47 	vmov.f32	s0, s14
 8002288:	eef0 0a67 	vmov.f32	s1, s15
 800228c:	f00b fcdc 	bl	800dc48 <sin>
 8002290:	eeb0 8a40 	vmov.f32	s16, s0
 8002294:	eef0 8a60 	vmov.f32	s17, s1
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	ed93 7b02 	vldr	d7, [r3, #8]
 800229e:	eeb0 0a47 	vmov.f32	s0, s14
 80022a2:	eef0 0a67 	vmov.f32	s1, s15
 80022a6:	f00b fc33 	bl	800db10 <cos>
 80022aa:	eeb0 7a40 	vmov.f32	s14, s0
 80022ae:	eef0 7a60 	vmov.f32	s15, s1
 80022b2:	eeb0 1a47 	vmov.f32	s2, s14
 80022b6:	eef0 1a67 	vmov.f32	s3, s15
 80022ba:	eeb0 0a48 	vmov.f32	s0, s16
 80022be:	eef0 0a68 	vmov.f32	s1, s17
 80022c2:	f00b fd4d 	bl	800dd60 <atan2>
 80022c6:	eeb0 7a40 	vmov.f32	s14, s0
 80022ca:	eef0 7a60 	vmov.f32	s15, s1
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	ed83 7b02 	vstr	d7, [r3, #8]
														cos(ptrParameter_position->rad_relativo));

			//Calculamos la velocidad
			if (operation_mode_dir.direction_s_r == SET){
 80022d4:	797b      	ldrb	r3, [r7, #5]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d15e      	bne.n	8002398 <get_measuremets_parameters+0x2e8>

				// SI estamos aqui se tiene una direccion deseada hacia adelante
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	791b      	ldrb	r3, [r3, #4]
 80022e0:	ee07 3a90 	vmov	s15, r3
 80022e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022e8:	4b29      	ldr	r3, [pc, #164]	; (8002390 <get_measuremets_parameters+0x2e0>)
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f6:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3304      	adds	r3, #4
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	791b      	ldrb	r3, [r3, #4]
 8002302:	ee07 3a90 	vmov	s15, r3
 8002306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800230a:	4b22      	ldr	r3, [pc, #136]	; (8002394 <get_measuremets_parameters+0x2e4>)
 800230c:	edd3 7a00 	vldr	s15, [r3]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3304      	adds	r3, #4
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231a:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	edd3 6a03 	vldr	s13, [r3, #12]
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <get_measuremets_parameters+0x2cc>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800233a:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3304      	adds	r3, #4
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	edd3 6a03 	vldr	s13, [r3, #12]
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <get_measuremets_parameters+0x2cc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3304      	adds	r3, #4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800235e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002362:	e065      	b.n	8002430 <get_measuremets_parameters+0x380>
 8002364:	f3af 8000 	nop.w
 8002368:	54442d18 	.word	0x54442d18
 800236c:	400921fb 	.word	0x400921fb
 8002370:	1a63c1f8 	.word	0x1a63c1f8
 8002374:	404ca5dc 	.word	0x404ca5dc
 8002378:	20001026 	.word	0x20001026
 800237c:	2000102c 	.word	0x2000102c
 8002380:	20001620 	.word	0x20001620
 8002384:	20001028 	.word	0x20001028
 8002388:	20001624 	.word	0x20001624
 800238c:	40668000 	.word	0x40668000
 8002390:	2000000c 	.word	0x2000000c
 8002394:	20000010 	.word	0x20000010

			}else{
				// SI estamos aqui se tiene una direccion deseada hacia atras
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	791b      	ldrb	r3, [r3, #4]
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023a6:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <get_measuremets_parameters+0x3a8>)
 80023a8:	edd3 7a00 	vldr	s15, [r3]
 80023ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	eef1 7a67 	vneg.f32	s15, s15
 80023b8:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3304      	adds	r3, #4
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	791b      	ldrb	r3, [r3, #4]
 80023c4:	ee07 3a90 	vmov	s15, r3
 80023c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023cc:	4b23      	ldr	r3, [pc, #140]	; (800245c <get_measuremets_parameters+0x3ac>)
 80023ce:	edd3 7a00 	vldr	s15, [r3]
 80023d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3304      	adds	r3, #4
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	eef1 7a67 	vneg.f32	s15, s15
 80023e0:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80023ec:	eef1 6a67 	vneg.f32	s13, s15
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <get_measuremets_parameters+0x3b0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	ee07 3a90 	vmov	s15, r3
 80023f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002404:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3304      	adds	r3, #4
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002412:	eef1 6a67 	vneg.f32	s13, s15
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <get_measuremets_parameters+0x3b0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	ee07 3a90 	vmov	s15, r3
 800241e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	3304      	adds	r3, #4
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800242c:	edc3 7a02 	vstr	s15, [r3, #8]

			}

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2200      	movs	r2, #0
 8002436:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3304      	adds	r3, #4
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2200      	movs	r2, #0
 8002440:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <get_measuremets_parameters+0x3b4>)
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <get_measuremets_parameters+0x3b8>)
 800244c:	2200      	movs	r2, #0
 800244e:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <get_measuremets_parameters+0x3bc>)
 8002452:	2200      	movs	r2, #0
 8002454:	801a      	strh	r2, [r3, #0]
		//Reiniciamos el contador de acción
		counting_action  = 0;

	}

}
 8002456:	e2f0      	b.n	8002a3a <get_measuremets_parameters+0x98a>
 8002458:	2000000c 	.word	0x2000000c
 800245c:	20000010 	.word	0x20000010
 8002460:	2000102c 	.word	0x2000102c
 8002464:	20001620 	.word	0x20001620
 8002468:	20001026 	.word	0x20001026
 800246c:	20001028 	.word	0x20001028
	else if(operation_mode_dir.Mode == sRoll)
 8002470:	793b      	ldrb	r3, [r7, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	f040 81c8 	bne.w	8002808 <get_measuremets_parameters+0x758>
			time_accion = time_accumulated;
 8002478:	4bad      	ldr	r3, [pc, #692]	; (8002730 <get_measuremets_parameters+0x680>)
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	4bad      	ldr	r3, [pc, #692]	; (8002734 <get_measuremets_parameters+0x684>)
 8002480:	601a      	str	r2, [r3, #0]
			promAng = sum_ang / counting_action;
 8002482:	4bad      	ldr	r3, [pc, #692]	; (8002738 <get_measuremets_parameters+0x688>)
 8002484:	edd3 6a00 	vldr	s13, [r3]
 8002488:	4bac      	ldr	r3, [pc, #688]	; (800273c <get_measuremets_parameters+0x68c>)
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002498:	4ba9      	ldr	r3, [pc, #676]	; (8002740 <get_measuremets_parameters+0x690>)
 800249a:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 800249e:	4ba8      	ldr	r3, [pc, #672]	; (8002740 <get_measuremets_parameters+0x690>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f868 	bl	8000578 <__aeabi_f2d>
 80024a8:	a39d      	add	r3, pc, #628	; (adr r3, 8002720 <get_measuremets_parameters+0x670>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	f7fe f8bb 	bl	8000628 <__aeabi_dmul>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4610      	mov	r0, r2
 80024b8:	4619      	mov	r1, r3
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	4ba1      	ldr	r3, [pc, #644]	; (8002744 <get_measuremets_parameters+0x694>)
 80024c0:	f7fe f9dc 	bl	800087c <__aeabi_ddiv>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80024ce:	4b9a      	ldr	r3, [pc, #616]	; (8002738 <get_measuremets_parameters+0x688>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f850 	bl	8000578 <__aeabi_f2d>
 80024d8:	a391      	add	r3, pc, #580	; (adr r3, 8002720 <get_measuremets_parameters+0x670>)
 80024da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024de:	f7fe f8a3 	bl	8000628 <__aeabi_dmul>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	4b95      	ldr	r3, [pc, #596]	; (8002744 <get_measuremets_parameters+0x694>)
 80024f0:	f7fe f9c4 	bl	800087c <__aeabi_ddiv>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	ec43 2b17 	vmov	d7, r2, r3
 80024fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002500:	eef0 0a67 	vmov.f32	s1, s15
 8002504:	f00b fba0 	bl	800dc48 <sin>
 8002508:	eeb0 8a40 	vmov.f32	s16, s0
 800250c:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002510:	4b89      	ldr	r3, [pc, #548]	; (8002738 <get_measuremets_parameters+0x688>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe f82f 	bl	8000578 <__aeabi_f2d>
 800251a:	a381      	add	r3, pc, #516	; (adr r3, 8002720 <get_measuremets_parameters+0x670>)
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	f7fe f882 	bl	8000628 <__aeabi_dmul>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	4b84      	ldr	r3, [pc, #528]	; (8002744 <get_measuremets_parameters+0x694>)
 8002532:	f7fe f9a3 	bl	800087c <__aeabi_ddiv>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	ec43 2b17 	vmov	d7, r2, r3
 800253e:	eeb0 0a47 	vmov.f32	s0, s14
 8002542:	eef0 0a67 	vmov.f32	s1, s15
 8002546:	f00b fae3 	bl	800db10 <cos>
 800254a:	eeb0 7a40 	vmov.f32	s14, s0
 800254e:	eef0 7a60 	vmov.f32	s15, s1
 8002552:	eeb0 1a47 	vmov.f32	s2, s14
 8002556:	eef0 1a67 	vmov.f32	s3, s15
 800255a:	eeb0 0a48 	vmov.f32	s0, s16
 800255e:	eef0 0a68 	vmov.f32	s1, s17
 8002562:	f00b fbfd 	bl	800dd60 <atan2>
 8002566:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 800256a:	a36f      	add	r3, pc, #444	; (adr r3, 8002728 <get_measuremets_parameters+0x678>)
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f7fe f85a 	bl	8000628 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002582:	f7fd fe9b 	bl	80002bc <__adddf3>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002596:	a362      	add	r3, pc, #392	; (adr r3, 8002720 <get_measuremets_parameters+0x670>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	f7fe f844 	bl	8000628 <__aeabi_dmul>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4610      	mov	r0, r2
 80025a6:	4619      	mov	r1, r3
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	4b65      	ldr	r3, [pc, #404]	; (8002744 <get_measuremets_parameters+0x694>)
 80025ae:	f7fe f965 	bl	800087c <__aeabi_ddiv>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	ec43 2b17 	vmov	d7, r2, r3
 80025ba:	eeb0 0a47 	vmov.f32	s0, s14
 80025be:	eef0 0a67 	vmov.f32	s1, s15
 80025c2:	f00b fb41 	bl	800dc48 <sin>
 80025c6:	eeb0 8a40 	vmov.f32	s16, s0
 80025ca:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80025d4:	a352      	add	r3, pc, #328	; (adr r3, 8002720 <get_measuremets_parameters+0x670>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f7fe f825 	bl	8000628 <__aeabi_dmul>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	4b56      	ldr	r3, [pc, #344]	; (8002744 <get_measuremets_parameters+0x694>)
 80025ec:	f7fe f946 	bl	800087c <__aeabi_ddiv>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	ec43 2b17 	vmov	d7, r2, r3
 80025f8:	eeb0 0a47 	vmov.f32	s0, s14
 80025fc:	eef0 0a67 	vmov.f32	s1, s15
 8002600:	f00b fa86 	bl	800db10 <cos>
 8002604:	eeb0 7a40 	vmov.f32	s14, s0
 8002608:	eef0 7a60 	vmov.f32	s15, s1
 800260c:	eeb0 1a47 	vmov.f32	s2, s14
 8002610:	eef0 1a67 	vmov.f32	s3, s15
 8002614:	eeb0 0a48 	vmov.f32	s0, s16
 8002618:	eef0 0a68 	vmov.f32	s1, s17
 800261c:	f00b fba0 	bl	800dd60 <atan2>
 8002620:	eeb0 7a40 	vmov.f32	s14, s0
 8002624:	eef0 7a60 	vmov.f32	s15, s1
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	ed83 7b04 	vstr	d7, [r3, #16]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	ed93 7b02 	vldr	d7, [r3, #8]
 8002634:	eeb0 0a47 	vmov.f32	s0, s14
 8002638:	eef0 0a67 	vmov.f32	s1, s15
 800263c:	f00b fb04 	bl	800dc48 <sin>
 8002640:	eeb0 8a40 	vmov.f32	s16, s0
 8002644:	eef0 8a60 	vmov.f32	s17, s1
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	ed93 7b02 	vldr	d7, [r3, #8]
 800264e:	eeb0 0a47 	vmov.f32	s0, s14
 8002652:	eef0 0a67 	vmov.f32	s1, s15
 8002656:	f00b fa5b 	bl	800db10 <cos>
 800265a:	eeb0 7a40 	vmov.f32	s14, s0
 800265e:	eef0 7a60 	vmov.f32	s15, s1
 8002662:	eeb0 1a47 	vmov.f32	s2, s14
 8002666:	eef0 1a67 	vmov.f32	s3, s15
 800266a:	eeb0 0a48 	vmov.f32	s0, s16
 800266e:	eef0 0a68 	vmov.f32	s1, s17
 8002672:	f00b fb75 	bl	800dd60 <atan2>
 8002676:	eeb0 7a40 	vmov.f32	s14, s0
 800267a:	eef0 7a60 	vmov.f32	s15, s1
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	ed83 7b02 	vstr	d7, [r3, #8]
			if (operation_mode_dir.direction_s_r == SET){
 8002684:	797b      	ldrb	r3, [r7, #5]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d162      	bne.n	8002750 <get_measuremets_parameters+0x6a0>
				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	791b      	ldrb	r3, [r3, #4]
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002698:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <get_measuremets_parameters+0x698>)
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a6:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3304      	adds	r3, #4
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	791b      	ldrb	r3, [r3, #4]
 80026b2:	ee07 3a90 	vmov	s15, r3
 80026b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <get_measuremets_parameters+0x69c>)
 80026bc:	edd3 7a00 	vldr	s15, [r3]
 80026c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3304      	adds	r3, #4
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	eef1 7a67 	vneg.f32	s15, s15
 80026ce:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	edd3 6a03 	vldr	s13, [r3, #12]
 80026da:	4b16      	ldr	r3, [pc, #88]	; (8002734 <get_measuremets_parameters+0x684>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	ee07 3a90 	vmov	s15, r3
 80026e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ee:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	3304      	adds	r3, #4
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80026fc:	eef1 6a67 	vneg.f32	s13, s15
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <get_measuremets_parameters+0x684>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	ee07 3a90 	vmov	s15, r3
 8002708:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3304      	adds	r3, #4
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002716:	edc3 7a02 	vstr	s15, [r3, #8]
 800271a:	e061      	b.n	80027e0 <get_measuremets_parameters+0x730>
 800271c:	f3af 8000 	nop.w
 8002720:	54442d18 	.word	0x54442d18
 8002724:	400921fb 	.word	0x400921fb
 8002728:	1a63c1f8 	.word	0x1a63c1f8
 800272c:	404ca5dc 	.word	0x404ca5dc
 8002730:	20001026 	.word	0x20001026
 8002734:	2000102c 	.word	0x2000102c
 8002738:	20001620 	.word	0x20001620
 800273c:	20001028 	.word	0x20001028
 8002740:	20001624 	.word	0x20001624
 8002744:	40668000 	.word	0x40668000
 8002748:	2000000c 	.word	0x2000000c
 800274c:	20000010 	.word	0x20000010
				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	791b      	ldrb	r3, [r3, #4]
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800275e:	4bbe      	ldr	r3, [pc, #760]	; (8002a58 <get_measuremets_parameters+0x9a8>)
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	eef1 7a67 	vneg.f32	s15, s15
 8002770:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3304      	adds	r3, #4
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	791b      	ldrb	r3, [r3, #4]
 800277c:	ee07 3a90 	vmov	s15, r3
 8002780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002784:	4bb5      	ldr	r3, [pc, #724]	; (8002a5c <get_measuremets_parameters+0x9ac>)
 8002786:	edd3 7a00 	vldr	s15, [r3]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3304      	adds	r3, #4
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002794:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	edd3 7a03 	vldr	s15, [r3, #12]
 80027a0:	eef1 6a67 	vneg.f32	s13, s15
 80027a4:	4bae      	ldr	r3, [pc, #696]	; (8002a60 <get_measuremets_parameters+0x9b0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b8:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3304      	adds	r3, #4
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	edd3 6a03 	vldr	s13, [r3, #12]
 80027c6:	4ba6      	ldr	r3, [pc, #664]	; (8002a60 <get_measuremets_parameters+0x9b0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	ee07 3a90 	vmov	s15, r3
 80027ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3304      	adds	r3, #4
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027dc:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2200      	movs	r2, #0
 80027e6:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3304      	adds	r3, #4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2200      	movs	r2, #0
 80027f0:	711a      	strb	r2, [r3, #4]
			sum_ang = 0;
 80027f2:	4b9c      	ldr	r3, [pc, #624]	; (8002a64 <get_measuremets_parameters+0x9b4>)
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
			time_accumulated = 0;
 80027fa:	4b9b      	ldr	r3, [pc, #620]	; (8002a68 <get_measuremets_parameters+0x9b8>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 8002800:	4b9a      	ldr	r3, [pc, #616]	; (8002a6c <get_measuremets_parameters+0x9bc>)
 8002802:	2200      	movs	r2, #0
 8002804:	801a      	strh	r2, [r3, #0]
}
 8002806:	e118      	b.n	8002a3a <get_measuremets_parameters+0x98a>
		time_accion = time_accumulated;
 8002808:	4b97      	ldr	r3, [pc, #604]	; (8002a68 <get_measuremets_parameters+0x9b8>)
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	4b94      	ldr	r3, [pc, #592]	; (8002a60 <get_measuremets_parameters+0x9b0>)
 8002810:	601a      	str	r2, [r3, #0]
		promAng = sum_ang / counting_action;
 8002812:	4b94      	ldr	r3, [pc, #592]	; (8002a64 <get_measuremets_parameters+0x9b4>)
 8002814:	edd3 6a00 	vldr	s13, [r3]
 8002818:	4b94      	ldr	r3, [pc, #592]	; (8002a6c <get_measuremets_parameters+0x9bc>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	ee07 3a90 	vmov	s15, r3
 8002820:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002828:	4b91      	ldr	r3, [pc, #580]	; (8002a70 <get_measuremets_parameters+0x9c0>)
 800282a:	edc3 7a00 	vstr	s15, [r3]
		ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 800282e:	4b90      	ldr	r3, [pc, #576]	; (8002a70 <get_measuremets_parameters+0x9c0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fea0 	bl	8000578 <__aeabi_f2d>
 8002838:	a383      	add	r3, pc, #524	; (adr r3, 8002a48 <get_measuremets_parameters+0x998>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	f7fd fef3 	bl	8000628 <__aeabi_dmul>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4610      	mov	r0, r2
 8002848:	4619      	mov	r1, r3
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	4b89      	ldr	r3, [pc, #548]	; (8002a74 <get_measuremets_parameters+0x9c4>)
 8002850:	f7fe f814 	bl	800087c <__aeabi_ddiv>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800285e:	4b81      	ldr	r3, [pc, #516]	; (8002a64 <get_measuremets_parameters+0x9b4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd fe88 	bl	8000578 <__aeabi_f2d>
 8002868:	a377      	add	r3, pc, #476	; (adr r3, 8002a48 <get_measuremets_parameters+0x998>)
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	f7fd fedb 	bl	8000628 <__aeabi_dmul>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	4b7d      	ldr	r3, [pc, #500]	; (8002a74 <get_measuremets_parameters+0x9c4>)
 8002880:	f7fd fffc 	bl	800087c <__aeabi_ddiv>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	ec43 2b17 	vmov	d7, r2, r3
 800288c:	eeb0 0a47 	vmov.f32	s0, s14
 8002890:	eef0 0a67 	vmov.f32	s1, s15
 8002894:	f00b f9d8 	bl	800dc48 <sin>
 8002898:	eeb0 8a40 	vmov.f32	s16, s0
 800289c:	eef0 8a60 	vmov.f32	s17, s1
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 80028a0:	4b70      	ldr	r3, [pc, #448]	; (8002a64 <get_measuremets_parameters+0x9b4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd fe67 	bl	8000578 <__aeabi_f2d>
 80028aa:	a367      	add	r3, pc, #412	; (adr r3, 8002a48 <get_measuremets_parameters+0x998>)
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f7fd feba 	bl	8000628 <__aeabi_dmul>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	4b6c      	ldr	r3, [pc, #432]	; (8002a74 <get_measuremets_parameters+0x9c4>)
 80028c2:	f7fd ffdb 	bl	800087c <__aeabi_ddiv>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	ec43 2b17 	vmov	d7, r2, r3
 80028ce:	eeb0 0a47 	vmov.f32	s0, s14
 80028d2:	eef0 0a67 	vmov.f32	s1, s15
 80028d6:	f00b f91b 	bl	800db10 <cos>
 80028da:	eeb0 7a40 	vmov.f32	s14, s0
 80028de:	eef0 7a60 	vmov.f32	s15, s1
 80028e2:	eeb0 1a47 	vmov.f32	s2, s14
 80028e6:	eef0 1a67 	vmov.f32	s3, s15
 80028ea:	eeb0 0a48 	vmov.f32	s0, s16
 80028ee:	eef0 0a68 	vmov.f32	s1, s17
 80028f2:	f00b fa35 	bl	800dd60 <atan2>
 80028f6:	ec51 0b10 	vmov	r0, r1, d0
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 80028fa:	a355      	add	r3, pc, #340	; (adr r3, 8002a50 <get_measuremets_parameters+0x9a0>)
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	f7fd fe92 	bl	8000628 <__aeabi_dmul>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4610      	mov	r0, r2
 800290a:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002912:	f7fd fcd3 	bl	80002bc <__adddf3>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002926:	a348      	add	r3, pc, #288	; (adr r3, 8002a48 <get_measuremets_parameters+0x998>)
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f7fd fe7c 	bl	8000628 <__aeabi_dmul>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	4b4d      	ldr	r3, [pc, #308]	; (8002a74 <get_measuremets_parameters+0x9c4>)
 800293e:	f7fd ff9d 	bl	800087c <__aeabi_ddiv>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	ec43 2b17 	vmov	d7, r2, r3
 800294a:	eeb0 0a47 	vmov.f32	s0, s14
 800294e:	eef0 0a67 	vmov.f32	s1, s15
 8002952:	f00b f979 	bl	800dc48 <sin>
 8002956:	eeb0 8a40 	vmov.f32	s16, s0
 800295a:	eef0 8a60 	vmov.f32	s17, s1
												  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002964:	a338      	add	r3, pc, #224	; (adr r3, 8002a48 <get_measuremets_parameters+0x998>)
 8002966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296a:	f7fd fe5d 	bl	8000628 <__aeabi_dmul>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4610      	mov	r0, r2
 8002974:	4619      	mov	r1, r3
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	4b3e      	ldr	r3, [pc, #248]	; (8002a74 <get_measuremets_parameters+0x9c4>)
 800297c:	f7fd ff7e 	bl	800087c <__aeabi_ddiv>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	ec43 2b17 	vmov	d7, r2, r3
 8002988:	eeb0 0a47 	vmov.f32	s0, s14
 800298c:	eef0 0a67 	vmov.f32	s1, s15
 8002990:	f00b f8be 	bl	800db10 <cos>
 8002994:	eeb0 7a40 	vmov.f32	s14, s0
 8002998:	eef0 7a60 	vmov.f32	s15, s1
 800299c:	eeb0 1a47 	vmov.f32	s2, s14
 80029a0:	eef0 1a67 	vmov.f32	s3, s15
 80029a4:	eeb0 0a48 	vmov.f32	s0, s16
 80029a8:	eef0 0a68 	vmov.f32	s1, s17
 80029ac:	f00b f9d8 	bl	800dd60 <atan2>
 80029b0:	eeb0 7a40 	vmov.f32	s14, s0
 80029b4:	eef0 7a60 	vmov.f32	s15, s1
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	ed83 7b04 	vstr	d7, [r3, #16]
		ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	ed93 7b02 	vldr	d7, [r3, #8]
 80029c4:	eeb0 0a47 	vmov.f32	s0, s14
 80029c8:	eef0 0a67 	vmov.f32	s1, s15
 80029cc:	f00b f93c 	bl	800dc48 <sin>
 80029d0:	eeb0 8a40 	vmov.f32	s16, s0
 80029d4:	eef0 8a60 	vmov.f32	s17, s1
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	ed93 7b02 	vldr	d7, [r3, #8]
 80029de:	eeb0 0a47 	vmov.f32	s0, s14
 80029e2:	eef0 0a67 	vmov.f32	s1, s15
 80029e6:	f00b f893 	bl	800db10 <cos>
 80029ea:	eeb0 7a40 	vmov.f32	s14, s0
 80029ee:	eef0 7a60 	vmov.f32	s15, s1
 80029f2:	eeb0 1a47 	vmov.f32	s2, s14
 80029f6:	eef0 1a67 	vmov.f32	s3, s15
 80029fa:	eeb0 0a48 	vmov.f32	s0, s16
 80029fe:	eef0 0a68 	vmov.f32	s1, s17
 8002a02:	f00b f9ad 	bl	800dd60 <atan2>
 8002a06:	eeb0 7a40 	vmov.f32	s14, s0
 8002a0a:	eef0 7a60 	vmov.f32	s15, s1
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	ed83 7b02 	vstr	d7, [r3, #8]
		ptrMotorHandler[0]->parametersMotor.counts = 0;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	711a      	strb	r2, [r3, #4]
		ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2200      	movs	r2, #0
 8002a24:	711a      	strb	r2, [r3, #4]
		sum_ang = 0;
 8002a26:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <get_measuremets_parameters+0x9b4>)
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
		time_accumulated = 0;
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <get_measuremets_parameters+0x9b8>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	801a      	strh	r2, [r3, #0]
		counting_action  = 0;
 8002a34:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <get_measuremets_parameters+0x9bc>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	801a      	strh	r2, [r3, #0]
}
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	ecbd 8b02 	vpop	{d8}
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	54442d18 	.word	0x54442d18
 8002a4c:	400921fb 	.word	0x400921fb
 8002a50:	1a63c1f8 	.word	0x1a63c1f8
 8002a54:	404ca5dc 	.word	0x404ca5dc
 8002a58:	2000000c 	.word	0x2000000c
 8002a5c:	20000010 	.word	0x20000010
 8002a60:	2000102c 	.word	0x2000102c
 8002a64:	20001620 	.word	0x20001620
 8002a68:	20001026 	.word	0x20001026
 8002a6c:	20001028 	.word	0x20001028
 8002a70:	20001624 	.word	0x20001624
 8002a74:	40668000 	.word	0x40668000

08002a78 <On_motor_Straigh_Roll>:


void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == sLine){
 8002a82:	783b      	ldrb	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d120      	bne.n	8002aca <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8002a88:	6839      	ldr	r1, [r7, #0]
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f844 	bl	8002b18 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a96:	4618      	mov	r0, r3
 8002a98:	f005 fde6 	bl	8008668 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f004 fdce 	bl	8007646 <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3304      	adds	r3, #4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f005 fdd8 	bl	8008668 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3304      	adds	r3, #4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f004 fdbf 	bl	8007646 <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 8002ac8:	e022      	b.n	8002b10 <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == sRoll){
 8002aca:	783b      	ldrb	r3, [r7, #0]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d11f      	bne.n	8002b10 <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8002ad0:	6839      	ldr	r1, [r7, #0]
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f820 	bl	8002b18 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f005 fdc2 	bl	8008668 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	2101      	movs	r1, #1
 8002aec:	4618      	mov	r0, r3
 8002aee:	f004 fdaa 	bl	8007646 <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3304      	adds	r3, #4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	4618      	mov	r0, r3
 8002afc:	f005 fdb4 	bl	8008668 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	2101      	movs	r1, #1
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 fd9b 	bl	8007646 <GPIO_WritePin_Afopt>
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == sLine){
 8002b22:	783b      	ldrb	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d143      	bne.n	8002bb0 <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	7f1a      	ldrb	r2, [r3, #28]
 8002b2e:	787b      	ldrb	r3, [r7, #1]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d018      	beq.n	8002b66 <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	787a      	ldrb	r2, [r7, #1]
 8002b3a:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a1a      	ldr	r2, [r3, #32]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	7f1b      	ldrb	r3, [r3, #28]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	4619      	mov	r1, r3
 8002b54:	4610      	mov	r0, r2
 8002b56:	f004 fd76 	bl	8007646 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	4618      	mov	r0, r3
 8002b62:	f006 f941 	bl	8008de8 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	7f1a      	ldrb	r2, [r3, #28]
 8002b6e:	787b      	ldrb	r3, [r7, #1]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d068      	beq.n	8002c46 <set_direction_straigh_roll+0x12e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	787a      	ldrb	r2, [r7, #1]
 8002b7c:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3304      	adds	r3, #4
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6a1a      	ldr	r2, [r3, #32]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	7f1b      	ldrb	r3, [r3, #28]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf0c      	ite	eq
 8002b92:	2301      	moveq	r3, #1
 8002b94:	2300      	movne	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	f004 fd53 	bl	8007646 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f006 f91d 	bl	8008de8 <PWMx_Toggle>
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
			}
			// Puede que no analice ningun if y simplemente no haga nada
	}
}
 8002bae:	e04a      	b.n	8002c46 <set_direction_straigh_roll+0x12e>
	}else if (operation_mode_dir.Mode == sRoll){
 8002bb0:	783b      	ldrb	r3, [r7, #0]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d147      	bne.n	8002c46 <set_direction_straigh_roll+0x12e>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	7f1a      	ldrb	r2, [r3, #28]
 8002bbc:	787b      	ldrb	r3, [r7, #1]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d11d      	bne.n	8002bfe <set_direction_straigh_roll+0xe6>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 8002bc2:	787b      	ldrb	r3, [r7, #1]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6a1a      	ldr	r2, [r3, #32]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	7f1b      	ldrb	r3, [r3, #28]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	4619      	mov	r1, r3
 8002bec:	4610      	mov	r0, r2
 8002bee:	f004 fd2a 	bl	8007646 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f006 f8f5 	bl	8008de8 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3304      	adds	r3, #4
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	7f1a      	ldrb	r2, [r3, #28]
 8002c06:	787b      	ldrb	r3, [r7, #1]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d01c      	beq.n	8002c46 <set_direction_straigh_roll+0x12e>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	787a      	ldrb	r2, [r7, #1]
 8002c14:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6a1a      	ldr	r2, [r3, #32]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3304      	adds	r3, #4
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	7f1b      	ldrb	r3, [r3, #28]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	bf0c      	ite	eq
 8002c2a:	2301      	moveq	r3, #1
 8002c2c:	2300      	movne	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f004 fd07 	bl	8007646 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	4618      	mov	r0, r3
 8002c42:	f006 f8d1 	bl	8008de8 <PWMx_Toggle>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <change_dir_straigh_Roll>:

void change_dir_straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	8039      	strh	r1, [r7, #0]

	if (operation_mode_dir.Mode == sLine){
 8002c58:	783b      	ldrb	r3, [r7, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d161      	bne.n	8002d22 <change_dir_straigh_Roll+0xd4>
		// Si estamos aqui es porque queremos cambiar la direccion en linea recta correctamente

		// antes de cambiar la direccion apagamos los motores
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,RESET);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	2100      	movs	r1, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 fced 	bl	8007646 <GPIO_WritePin_Afopt>
		GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3304      	adds	r3, #4
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f004 fce5 	bl	8007646 <GPIO_WritePin_Afopt>

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	7f1a      	ldrb	r2, [r3, #28]
 8002c82:	787b      	ldrb	r3, [r7, #1]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d018      	beq.n	8002cba <change_dir_straigh_Roll+0x6c>
			// si estamos aqui es porque se quiere cambiar la direccion del robot

			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	787a      	ldrb	r2, [r7, #1]
 8002c8e:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6a1a      	ldr	r2, [r3, #32]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	7f1b      	ldrb	r3, [r3, #28]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f004 fccc 	bl	8007646 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f006 f897 	bl	8008de8 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	7f1a      	ldrb	r2, [r3, #28]
 8002cc2:	787b      	ldrb	r3, [r7, #1]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d01c      	beq.n	8002d02 <change_dir_straigh_Roll+0xb4>
			// si estamos aqui es porque se quiere cambiar la direccion del robot
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3304      	adds	r3, #4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	787a      	ldrb	r2, [r7, #1]
 8002cd0:	771a      	strb	r2, [r3, #28]
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6a1a      	ldr	r2, [r3, #32]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	7f1b      	ldrb	r3, [r3, #28]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bf0c      	ite	eq
 8002ce6:	2301      	moveq	r3, #1
 8002ce8:	2300      	movne	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f004 fca9 	bl	8007646 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f006 f873 	bl	8008de8 <PWMx_Toggle>
		}
		// Puede que no analice ningún if y simplemente no haga nada


		// volvemos a encender los motores
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f004 fc9b 	bl	8007646 <GPIO_WritePin_Afopt>
		GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3304      	adds	r3, #4
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f004 fc93 	bl	8007646 <GPIO_WritePin_Afopt>

			// volvemos a encender los motores
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);
	}
}
 8002d20:	e068      	b.n	8002df4 <change_dir_straigh_Roll+0x1a6>
	}else if (operation_mode_dir.Mode == sRoll){
 8002d22:	783b      	ldrb	r3, [r7, #0]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d165      	bne.n	8002df4 <change_dir_straigh_Roll+0x1a6>
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,RESET);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 fc88 	bl	8007646 <GPIO_WritePin_Afopt>
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f004 fc80 	bl	8007646 <GPIO_WritePin_Afopt>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	7f1a      	ldrb	r2, [r3, #28]
 8002d4c:	787b      	ldrb	r3, [r7, #1]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d11d      	bne.n	8002d8e <change_dir_straigh_Roll+0x140>
				ptrMotorhandler[0]->configMotor.dir = !operation_mode_dir.direction_s_r;
 8002d52:	787b      	ldrb	r3, [r7, #1]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir ); // La direccion estaba en RESET, la cambiamos a SET
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6a1a      	ldr	r2, [r3, #32]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	7f1b      	ldrb	r3, [r3, #28]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	f004 fc62 	bl	8007646 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f006 f82d 	bl	8008de8 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3304      	adds	r3, #4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	7f1a      	ldrb	r2, [r3, #28]
 8002d96:	787b      	ldrb	r3, [r7, #1]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d01c      	beq.n	8002dd6 <change_dir_straigh_Roll+0x188>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	787a      	ldrb	r2, [r7, #1]
 8002da4:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3304      	adds	r3, #4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6a1a      	ldr	r2, [r3, #32]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3304      	adds	r3, #4
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	7f1b      	ldrb	r3, [r3, #28]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	bf0c      	ite	eq
 8002dba:	2301      	moveq	r3, #1
 8002dbc:	2300      	movne	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f004 fc3f 	bl	8007646 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f006 f809 	bl	8008de8 <PWMx_Toggle>
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2101      	movs	r1, #1
 8002dde:	4618      	mov	r0, r3
 8002de0:	f004 fc31 	bl	8007646 <GPIO_WritePin_Afopt>
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3304      	adds	r3, #4
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	2101      	movs	r1, #1
 8002dee:	4618      	mov	r0, r3
 8002df0:	f004 fc29 	bl	8007646 <GPIO_WritePin_Afopt>
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <stop>:


void stop (Motor_Handler_t *ptrMotorhandler[2]){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]

	//DESACTIVAMOS EL MOTOR
	// APAGAMOS EL MOTOR 1 (LEFT)
		//Se enciende el motor 1
		disableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f005 ffac 	bl	8008d68 <disableOutput>
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN, RESET); // Apagamos el motor 1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f004 fc14 	bl	8007646 <GPIO_WritePin_Afopt>
		// APAGAMOS EL MOTOR 2 (Right)
		//Se enciende el motor 2
		disableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3304      	adds	r3, #4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	4618      	mov	r0, r3
 8002e28:	f005 ff9e 	bl	8008d68 <disableOutput>
		GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3304      	adds	r3, #4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f004 fc05 	bl	8007646 <GPIO_WritePin_Afopt>


}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <int_Config_Motor>:

void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2],
		              Parameters_Position_t *ptrPosHandler,
					  Parameters_Path_t *ptrPathHandler ,
					  PID_Parameters_t *ptrPIDHandler,
					  state_dir_t *operation_mode_dir){
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4a85      	ldr	r2, [pc, #532]	; (800306c <int_Config_Motor+0x228>)
 8002e56:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a84      	ldr	r2, [pc, #528]	; (8003070 <int_Config_Motor+0x22c>)
 8002e5e:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a83      	ldr	r2, [pc, #524]	; (8003074 <int_Config_Motor+0x230>)
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a82      	ldr	r2, [pc, #520]	; (8003078 <int_Config_Motor+0x234>)
 8002e6e:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM    = &handlerPWM_1;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a81      	ldr	r2, [pc, #516]	; (800307c <int_Config_Motor+0x238>)
 8002e76:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a74      	ldr	r2, [pc, #464]	; (8003080 <int_Config_Motor+0x23c>)
 8002eb0:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a6f      	ldr	r2, [pc, #444]	; (8003084 <int_Config_Motor+0x240>)
 8002ec6:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	4a6e      	ldr	r2, [pc, #440]	; (8003088 <int_Config_Motor+0x244>)
 8002ece:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a66      	ldr	r2, [pc, #408]	; (8003070 <int_Config_Motor+0x22c>)
 8002ed8:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3304      	adds	r3, #4
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a6a      	ldr	r2, [pc, #424]	; (800308c <int_Config_Motor+0x248>)
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a69      	ldr	r2, [pc, #420]	; (8003090 <int_Config_Motor+0x24c>)
 8002eec:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a67      	ldr	r2, [pc, #412]	; (8003094 <int_Config_Motor+0x250>)
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3304      	adds	r3, #4
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3304      	adds	r3, #4
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3304      	adds	r3, #4
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3304      	adds	r3, #4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a51      	ldr	r2, [pc, #324]	; (8003080 <int_Config_Motor+0x23c>)
 8002f3a:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a4c      	ldr	r2, [pc, #304]	; (8003084 <int_Config_Motor+0x240>)
 8002f54:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 1.0;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f7c:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	4a45      	ldr	r2, [pc, #276]	; (8003098 <int_Config_Motor+0x254>)
 8002f82:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 0.8;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	4a45      	ldr	r2, [pc, #276]	; (800309c <int_Config_Motor+0x258>)
 8002f88:	619a      	str	r2, [r3, #24]

	//-------------- Parametros de posicion---------------
	ptrPosHandler->grad_global   = 0;
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrPosHandler->rad_global    = 0;
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrPosHandler->grad_relativo = 0;
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	e9c1 2300 	strd	r2, r3, [r1]
	ptrPosHandler->rad_relativo  = 0;
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrPosHandler->xr_position   = 0;
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrPosHandler->yr_position   = 0;
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrPosHandler->xg_position   = ptrPosHandler->xg_position_inicial = 0;
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPosHandler->yg_position   = ptrPosHandler->yg_position_inicial = 0;
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	//--------------Parametros de Path-----------------
	ptrPathHandler->angle = 0;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	649a      	str	r2, [r3, #72]	; 0x48
	ptrPathHandler->goal_Position_x = ptrPathHandler->goal_Position_y = 0;
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ptrPathHandler->line_Distance = 0;
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPathHandler->start_position_x = ptrPathHandler->start_position_y = 0;
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50



	// Seteamos la direccion el modo de operacion en None
	operation_mode_dir->Mode = sNone;
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2202      	movs	r2, #2
 800305e:	701a      	strb	r2, [r3, #0]
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	200003e8 	.word	0x200003e8
 8003070:	41e00000 	.word	0x41e00000
 8003074:	2000024c 	.word	0x2000024c
 8003078:	20000264 	.word	0x20000264
 800307c:	200002f0 	.word	0x200002f0
 8003080:	437a0000 	.word	0x437a0000
 8003084:	42c80000 	.word	0x42c80000
 8003088:	20000414 	.word	0x20000414
 800308c:	20000240 	.word	0x20000240
 8003090:	20000258 	.word	0x20000258
 8003094:	20000310 	.word	0x20000310
 8003098:	3dcccccd 	.word	0x3dcccccd
 800309c:	3f4ccccd 	.word	0x3f4ccccd

080030a0 <PID_control>:


void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,
		        Parameters_Path_t *ptrPathHandler,
				Parameters_Position_t *ptrPosHandler,
				PID_Parameters_t *ptrPIDHandler){
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]

	//Conversion de tiempo
	float sampling_time = ((float) (handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period * timeAction_TIMER_Sampling) / 1000); //[s]
 80030ae:	4b6f      	ldr	r3, [pc, #444]	; (800326c <PID_control+0x1cc>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4a6f      	ldr	r2, [pc, #444]	; (8003270 <PID_control+0x1d0>)
 80030b4:	7812      	ldrb	r2, [r2, #0]
 80030b6:	fb02 f303 	mul.w	r3, r2, r3
 80030ba:	ee07 3a90 	vmov	s15, r3
 80030be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030c2:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8003274 <PID_control+0x1d4>
 80030c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030ca:	edc7 7a05 	vstr	s15, [r7, #20]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80030da:	eeb0 1a46 	vmov.f32	s2, s12
 80030de:	eef0 1a66 	vmov.f32	s3, s13
 80030e2:	eeb0 0a47 	vmov.f32	s0, s14
 80030e6:	eef0 0a67 	vmov.f32	s1, s15
 80030ea:	68b8      	ldr	r0, [r7, #8]
 80030ec:	f005 f824 	bl	8008138 <distance_to_straight_line>
 80030f0:	ec51 0b10 	vmov	r0, r1, d0
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	4b5f      	ldr	r3, [pc, #380]	; (8003278 <PID_control+0x1d8>)
 80030fa:	f7fd fbbf 	bl	800087c <__aeabi_ddiv>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4610      	mov	r0, r2
 8003104:	4619      	mov	r1, r3
 8003106:	f7fd fd87 	bl	8000c18 <__aeabi_d2f>
 800310a:	4603      	mov	r3, r0
 800310c:	613b      	str	r3, [r7, #16]

	//Aplicacion del PID par el control de la distancia del robot al centro
	PID_calc(ptrPIDHandler, sampling_time, 0,  distance_recta);
 800310e:	ed97 1a04 	vldr	s2, [r7, #16]
 8003112:	eddf 0a5a 	vldr	s1, [pc, #360]	; 800327c <PID_control+0x1dc>
 8003116:	ed97 0a05 	vldr	s0, [r7, #20]
 800311a:	6838      	ldr	r0, [r7, #0]
 800311c:	f000 f8bc 	bl	8003298 <PID_calc>

	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint - ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 8003120:	4b57      	ldr	r3, [pc, #348]	; (8003280 <PID_control+0x1e0>)
 8003122:	ed93 7a00 	vldr	s14, [r3]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	edd3 7a00 	vldr	s15, [r3]
 800312c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003130:	4b54      	ldr	r3, [pc, #336]	; (8003284 <PID_control+0x1e4>)
 8003132:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint + ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	ed93 7a00 	vldr	s14, [r3]
 800313c:	4b50      	ldr	r3, [pc, #320]	; (8003280 <PID_control+0x1e0>)
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003146:	4b50      	ldr	r3, [pc, #320]	; (8003288 <PID_control+0x1e8>)
 8003148:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b4c      	ldr	r3, [pc, #304]	; (8003284 <PID_control+0x1e4>)
 8003154:	edd3 7a00 	vldr	s15, [r3]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003160:	eeb0 1a47 	vmov.f32	s2, s14
 8003164:	eef0 0a67 	vmov.f32	s1, s15
 8003168:	ed97 0a05 	vldr	s0, [r7, #20]
 800316c:	4610      	mov	r0, r2
 800316e:	f000 f893 	bl	8003298 <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3304      	adds	r3, #4
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b43      	ldr	r3, [pc, #268]	; (8003288 <PID_control+0x1e8>)
 800317c:	edd3 7a00 	vldr	s15, [r3]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3304      	adds	r3, #4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	ed93 7a02 	vldr	s14, [r3, #8]
 800318a:	eeb0 1a47 	vmov.f32	s2, s14
 800318e:	eef0 0a67 	vmov.f32	s1, s15
 8003192:	ed97 0a05 	vldr	s0, [r7, #20]
 8003196:	4610      	mov	r0, r2
 8003198:	f000 f87e 	bl	8003298 <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	ed93 7a05 	vldr	s14, [r3, #20]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b6:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3304      	adds	r3, #4
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	ed93 7a05 	vldr	s14, [r3, #20]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3304      	adds	r3, #4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	edd3 7a00 	vldr	s15, [r3]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3304      	adds	r3, #4
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031da:	edc3 7a05 	vstr	s15, [r3, #20]

	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80031e6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800328c <PID_control+0x1ec>
 80031ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f2:	db04      	blt.n	80031fe <PID_control+0x15e>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a25      	ldr	r2, [pc, #148]	; (8003290 <PID_control+0x1f0>)
 80031fa:	615a      	str	r2, [r3, #20]
 80031fc:	e00e      	b.n	800321c <PID_control+0x17c>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	edd3 7a05 	vldr	s15, [r3, #20]
 8003206:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 800320a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003212:	d803      	bhi.n	800321c <PID_control+0x17c>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1e      	ldr	r2, [pc, #120]	; (8003294 <PID_control+0x1f4>)
 800321a:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3304      	adds	r3, #4
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	edd3 7a05 	vldr	s15, [r3, #20]
 8003226:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800328c <PID_control+0x1ec>
 800322a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800322e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003232:	db05      	blt.n	8003240 <PID_control+0x1a0>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3304      	adds	r3, #4
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a15      	ldr	r2, [pc, #84]	; (8003290 <PID_control+0x1f0>)
 800323c:	615a      	str	r2, [r3, #20]
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
	}

}
 800323e:	e011      	b.n	8003264 <PID_control+0x1c4>
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3304      	adds	r3, #4
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	edd3 7a05 	vldr	s15, [r3, #20]
 800324a:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 800324e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003256:	d900      	bls.n	800325a <PID_control+0x1ba>
}
 8003258:	e004      	b.n	8003264 <PID_control+0x1c4>
		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	3304      	adds	r3, #4
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <PID_control+0x1f4>)
 8003262:	615a      	str	r2, [r3, #20]
}
 8003264:	bf00      	nop
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	200002c4 	.word	0x200002c4
 8003270:	20000009 	.word	0x20000009
 8003274:	447a0000 	.word	0x447a0000
 8003278:	408f4000 	.word	0x408f4000
 800327c:	00000000 	.word	0x00000000
 8003280:	20001628 	.word	0x20001628
 8003284:	20001630 	.word	0x20001630
 8003288:	20001634 	.word	0x20001634
 800328c:	42700000 	.word	0x42700000
 8003290:	42700000 	.word	0x42700000
 8003294:	41b80000 	.word	0x41b80000

08003298 <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler,
		      float time_of_sampling,
			  float setpoint,
			  float current_measure){
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80032a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80032a8:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 80032ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80032b0:	edd7 7a00 	vldr	s15, [r7]
 80032b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	ed93 7a04 	vldr	s14, [r3, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ce:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	edd3 6a01 	vldr	s13, [r3, #4]
 80032de:	edd7 7a02 	vldr	s15, [r7, #8]
 80032e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80032fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003300:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd*(ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	ed93 7a06 	vldr	s14, [r3, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	edd3 7a03 	vldr	s15, [r3, #12]
 8003316:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800331a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800331e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003326:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 800332a:	ed97 7a07 	vldr	s14, [r7, #28]
 800332e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003336:	edd7 7a05 	vldr	s15, [r7, #20]
 800333a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	60da      	str	r2, [r3, #12]
}
 800334c:	bf00      	nop
 800334e:	3724      	adds	r7, #36	; 0x24
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <go>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	; 0x28
 800335c:	af02      	add	r7, sp, #8
 800335e:	6178      	str	r0, [r7, #20]
 8003360:	6139      	str	r1, [r7, #16]
 8003362:	60fa      	str	r2, [r7, #12]
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 800336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8003372:	68f9      	ldr	r1, [r7, #12]
 8003374:	ed97 1b00 	vldr	d1, [r7]
 8003378:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80034a0 <go+0x148>
 800337c:	6938      	ldr	r0, [r7, #16]
 800337e:	f7fe fe39 	bl	8001ff4 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <go+0x4e>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler,operation_mode_dir );
 8003390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003392:	68f9      	ldr	r1, [r7, #12]
 8003394:	6978      	ldr	r0, [r7, #20]
 8003396:	f7fe fe8b 	bl	80020b0 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 800339a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
		//Levandamos la bandera de control
		*fcontrol = SET;
 80033a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
	}

	// Control
	if (*fcontrol){
 80033a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d073      	beq.n	8003496 <go+0x13e>

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	3304      	adds	r3, #4
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80033c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80033c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80033cc:	ee16 0a90 	vmov	r0, s13
 80033d0:	f7fd f8d2 	bl	8000578 <__aeabi_f2d>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	e9c7 2306 	strd	r2, r3, [r7, #24]

		ptrPosHandler->xr_position = distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	ed93 7b04 	vldr	d7, [r3, #16]
 80033e2:	eeb0 0a47 	vmov.f32	s0, s14
 80033e6:	eef0 0a67 	vmov.f32	s1, s15
 80033ea:	f00a fb91 	bl	800db10 <cos>
 80033ee:	ec51 0b10 	vmov	r0, r1, d0
 80033f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033f6:	f7fd f917 	bl	8000628 <__aeabi_dmul>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	68f9      	ldr	r1, [r7, #12]
 8003400:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position = distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	ed93 7b04 	vldr	d7, [r3, #16]
 800340a:	eeb0 0a47 	vmov.f32	s0, s14
 800340e:	eef0 0a67 	vmov.f32	s1, s15
 8003412:	f00a fc19 	bl	800dc48 <sin>
 8003416:	ec51 0b10 	vmov	r0, r1, d0
 800341a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800341e:	f7fd f903 	bl	8000628 <__aeabi_dmul>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	68f9      	ldr	r1, [r7, #12]
 8003428:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003438:	f7fc ff40 	bl	80002bc <__adddf3>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	68f9      	ldr	r1, [r7, #12]
 8003442:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003452:	f7fc ff33 	bl	80002bc <__adddf3>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	68f9      	ldr	r1, [r7, #12]
 800345c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

		//Convertimos el valor y imprimimos en la terminal
		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800346c:	e9cd 2300 	strd	r2, r3, [sp]
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	490b      	ldr	r1, [pc, #44]	; (80034a4 <go+0x14c>)
 8003476:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003478:	f007 fd0c 	bl	800ae94 <siprintf>

		writeMsg(&handlerUSART, buff);
 800347c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800347e:	480a      	ldr	r0, [pc, #40]	; (80034a8 <go+0x150>)
 8003480:	f006 fc5c 	bl	8009d3c <writeMsg>

		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler);
 8003484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	6978      	ldr	r0, [r7, #20]
 800348c:	f7ff fe08 	bl	80030a0 <PID_control>

		*fcontrol = RESET;
 8003490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]
	}
}
 8003496:	bf00      	nop
 8003498:	3720      	adds	r7, #32
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	00000000 	.word	0x00000000
 80034a4:	080108c0 	.word	0x080108c0
 80034a8:	20000330 	.word	0x20000330

080034ac <NOP>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6178      	str	r0, [r7, #20]
 80034b4:	6139      	str	r1, [r7, #16]
 80034b6:	60fa      	str	r2, [r7, #12]
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <NOP+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	ed97 1b00 	vldr	d1, [r7]
 80034cc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80034fc <NOP+0x50>
 80034d0:	6938      	ldr	r0, [r7, #16]
 80034d2:	f7fe fd8f 	bl	8001ff4 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <NOP+0x48>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 80034e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e6:	68f9      	ldr	r1, [r7, #12]
 80034e8:	6978      	ldr	r0, [r7, #20]
 80034ea:	f7fe fde1 	bl	80020b0 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
	}

}
 80034f4:	bf00      	nop
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	00000000 	.word	0x00000000

08003500 <create_square_operations>:
void create_square_operations(double side,
							  uint8_t CW_CCW,
							  Parameters_Operation_t prtList[30],
							  Parameter_build_t *ptrbuild,
							  Parameters_Path_t *ptrPath,
							  Parameters_Position_t *ptrPos){
 8003500:	b5b0      	push	{r4, r5, r7, lr}
 8003502:	b09e      	sub	sp, #120	; 0x78
 8003504:	af00      	add	r7, sp, #0
 8003506:	ed87 0b06 	vstr	d0, [r7, #24]
 800350a:	6139      	str	r1, [r7, #16]
 800350c:	60fa      	str	r2, [r7, #12]
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	4603      	mov	r3, r0
 8003512:	75fb      	strb	r3, [r7, #23]
	// Aqui se va a suponer que donde se resetea el robot es el (0,0) de coordenadas y que su vector directos esta a 0 grados con respecto
	// al eje X, por lo que se puede colocar el robot como sea en la posicion inicial y este calculara sus operaciones dependiendo
	// de su posicion inicial


	double finishline_x = 0;
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double finishline_y = 0;
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

	ptrPath->start_position_x = ptrbuild->initline_x = 0;
 800352c:	68f9      	ldr	r1, [r7, #12]
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	e9c1 2300 	strd	r2, r3, [r1]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrPath->start_position_y = ptrbuild->initline_y = 0; //posicion de start, considerada como (0,0)
 8003546:	68f9      	ldr	r1, [r7, #12]
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58


	// Preguntamos si se quiere recorrer el cuadrado en CW o CCW, no importa donde este situado, comenzara en linea recta como primera operación

	if (CW_CCW == 1) // Se quiere ir en CW
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	2b01      	cmp	r3, #1
 8003564:	f040 8096 	bne.w	8003694 <create_square_operations+0x194>
	{

		// calculo del vector unitario del robot

		unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 8003568:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800356c:	ed93 7b04 	vldr	d7, [r3, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	3310      	adds	r3, #16
 8003574:	4618      	mov	r0, r3
 8003576:	eeb0 0a47 	vmov.f32	s0, s14
 800357a:	eef0 0a67 	vmov.f32	s1, s15
 800357e:	f004 ff55 	bl	800842c <unitary_vector>

		double coordenadas_cuadrado[4][2] = {{side,0},
 8003582:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003586:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003596:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800359a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
											 {side,-side},
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80035a8:	607b      	str	r3, [r7, #4]
		double coordenadas_cuadrado[4][2] = {{side,0},
 80035aa:	ed97 7b00 	vldr	d7, [r7]
 80035ae:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
											 {0,-side},
 80035be:	69bc      	ldr	r4, [r7, #24]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
		double coordenadas_cuadrado[4][2] = {{side,0},
 80035c6:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
											 {0,0}}; // Coordenadas (x,y) destino para hacer el cuadrado


		for (uint8_t i = 0 ; i < 4 - 1 ; i++){
 80035e2:	2300      	movs	r3, #0
 80035e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80035e8:	e041      	b.n	800366e <create_square_operations+0x16e>

			// Seteamos como punto inicial el punto de start y como punto final el siguiente punto a ir


			finishline_x += coordenadas_cuadrado[i][0]; // Coordenada x a ir
 80035ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	3370      	adds	r3, #112	; 0x70
 80035f2:	f107 0208 	add.w	r2, r7, #8
 80035f6:	4413      	add	r3, r2
 80035f8:	3b58      	subs	r3, #88	; 0x58
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003602:	f7fc fe5b 	bl	80002bc <__adddf3>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			finishline_y += coordenadas_cuadrado[i][1]; // Coordenada y a ir
 800360e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	3370      	adds	r3, #112	; 0x70
 8003616:	f107 0208 	add.w	r2, r7, #8
 800361a:	4413      	add	r3, r2
 800361c:	3b50      	subs	r3, #80	; 0x50
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003626:	f7fc fe49 	bl	80002bc <__adddf3>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			ptrPath->goal_Position_x = finishline_x;
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003638:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			ptrPath->goal_Position_y = finishline_y;
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003642:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

			build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 8003646:	ed97 1b1a 	vldr	d1, [r7, #104]	; 0x68
 800364a:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 800364e:	68f9      	ldr	r1, [r7, #12]
 8003650:	6938      	ldr	r0, [r7, #16]
 8003652:	f004 fb7d 	bl	8007d50 <build_Operation>

			change_coordinates_position(ptrPath, finishline_x, finishline_y); // Cambiamos de coordenada teorica para seguir construyendo el camino
 8003656:	ed97 1b1a 	vldr	d1, [r7, #104]	; 0x68
 800365a:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 800365e:	68b8      	ldr	r0, [r7, #8]
 8003660:	f004 fc5a 	bl	8007f18 <change_coordinates_position>
		for (uint8_t i = 0 ; i < 4 - 1 ; i++){
 8003664:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003668:	3301      	adds	r3, #1
 800366a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800366e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003672:	2b02      	cmp	r3, #2
 8003674:	d9b9      	bls.n	80035ea <create_square_operations+0xea>

		}


		// Agregamos la operacion nula
		add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800367c:	ed9f 2b4e 	vldr	d2, [pc, #312]	; 80037b8 <create_square_operations+0x2b8>
 8003680:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 80037b8 <create_square_operations+0x2b8>
 8003684:	ed9f 0b4c 	vldr	d0, [pc, #304]	; 80037b8 <create_square_operations+0x2b8>
 8003688:	2200      	movs	r2, #0
 800368a:	4619      	mov	r1, r3
 800368c:	6938      	ldr	r0, [r7, #16]
 800368e:	f004 fbff 	bl	8007e90 <add_Operation>
	}




}
 8003692:	e08c      	b.n	80037ae <create_square_operations+0x2ae>
		unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 8003694:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003698:	ed93 7b04 	vldr	d7, [r3, #16]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3310      	adds	r3, #16
 80036a0:	4618      	mov	r0, r3
 80036a2:	eeb0 0a47 	vmov.f32	s0, s14
 80036a6:	eef0 0a67 	vmov.f32	s1, s15
 80036aa:	f004 febf 	bl	800842c <unitary_vector>
		double coordenadas_cuadrado[4][2] = {{side,0},
 80036ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80036c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80036ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ce:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80036de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		for (uint8_t i = 0 ; i < 4 - 1 ; i++){
 80036fe:	2300      	movs	r3, #0
 8003700:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8003704:	e041      	b.n	800378a <create_square_operations+0x28a>
			finishline_x += coordenadas_cuadrado[i][0]; // Coordenada x a ir
 8003706:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	3370      	adds	r3, #112	; 0x70
 800370e:	f107 0208 	add.w	r2, r7, #8
 8003712:	4413      	add	r3, r2
 8003714:	3b58      	subs	r3, #88	; 0x58
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800371e:	f7fc fdcd 	bl	80002bc <__adddf3>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			finishline_y += coordenadas_cuadrado[i][1]; // Coordenada y a ir
 800372a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	3370      	adds	r3, #112	; 0x70
 8003732:	f107 0208 	add.w	r2, r7, #8
 8003736:	4413      	add	r3, r2
 8003738:	3b50      	subs	r3, #80	; 0x50
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003742:	f7fc fdbb 	bl	80002bc <__adddf3>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			ptrPath->goal_Position_x = finishline_x;
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003754:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			ptrPath->goal_Position_y = finishline_y;
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800375e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
			build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 8003762:	ed97 1b1a 	vldr	d1, [r7, #104]	; 0x68
 8003766:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 800376a:	68f9      	ldr	r1, [r7, #12]
 800376c:	6938      	ldr	r0, [r7, #16]
 800376e:	f004 faef 	bl	8007d50 <build_Operation>
			change_coordinates_position(ptrPath, finishline_x, finishline_y); // Cambiamos de coordenada teorica para seguir construyendo el camino
 8003772:	ed97 1b1a 	vldr	d1, [r7, #104]	; 0x68
 8003776:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 800377a:	68b8      	ldr	r0, [r7, #8]
 800377c:	f004 fbcc 	bl	8007f18 <change_coordinates_position>
		for (uint8_t i = 0 ; i < 4 - 1 ; i++){
 8003780:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003784:	3301      	adds	r3, #1
 8003786:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800378a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800378e:	2b02      	cmp	r3, #2
 8003790:	d9b9      	bls.n	8003706 <create_square_operations+0x206>
		add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003798:	ed9f 2b07 	vldr	d2, [pc, #28]	; 80037b8 <create_square_operations+0x2b8>
 800379c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80037b8 <create_square_operations+0x2b8>
 80037a0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80037b8 <create_square_operations+0x2b8>
 80037a4:	2200      	movs	r2, #0
 80037a6:	4619      	mov	r1, r3
 80037a8:	6938      	ldr	r0, [r7, #16]
 80037aa:	f004 fb71 	bl	8007e90 <add_Operation>
}
 80037ae:	bf00      	nop
 80037b0:	3778      	adds	r7, #120	; 0x78
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bdb0      	pop	{r4, r5, r7, pc}
 80037b6:	bf00      	nop
	...

080037c0 <fillComand>:




void fillComand(void){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0

	if (rxData != '\0'){
 80037c4:	4b1c      	ldr	r3, [pc, #112]	; (8003838 <fillComand+0x78>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d033      	beq.n	8003834 <fillComand+0x74>
//		writeChar(&handlerUSART, rxData);
		bufferReception[counterReception] = rxData;
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <fillComand+0x7c>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	4b19      	ldr	r3, [pc, #100]	; (8003838 <fillComand+0x78>)
 80037d4:	7819      	ldrb	r1, [r3, #0]
 80037d6:	4b1a      	ldr	r3, [pc, #104]	; (8003840 <fillComand+0x80>)
 80037d8:	5499      	strb	r1, [r3, r2]
		counterReception++;
 80037da:	4b18      	ldr	r3, [pc, #96]	; (800383c <fillComand+0x7c>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	3301      	adds	r3, #1
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	4b16      	ldr	r3, [pc, #88]	; (800383c <fillComand+0x7c>)
 80037e4:	701a      	strb	r2, [r3, #0]

		if (rxData == '@'){
 80037e6:	4b14      	ldr	r3, [pc, #80]	; (8003838 <fillComand+0x78>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b40      	cmp	r3, #64	; 0x40
 80037ec:	d10c      	bne.n	8003808 <fillComand+0x48>

			bufferReception[counterReception-1] = '\0';
 80037ee:	4b13      	ldr	r3, [pc, #76]	; (800383c <fillComand+0x7c>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	4a12      	ldr	r2, [pc, #72]	; (8003840 <fillComand+0x80>)
 80037f6:	2100      	movs	r1, #0
 80037f8:	54d1      	strb	r1, [r2, r3]

			counterReception = 0;
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <fillComand+0x7c>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
			parseCommands(bufferReception);
 8003800:	480f      	ldr	r0, [pc, #60]	; (8003840 <fillComand+0x80>)
 8003802:	f7fe f8e3 	bl	80019cc <parseCommands>
 8003806:	e012      	b.n	800382e <fillComand+0x6e>

		}else if (rxData == 'z'){
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <fillComand+0x78>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b7a      	cmp	r3, #122	; 0x7a
 800380e:	d10e      	bne.n	800382e <fillComand+0x6e>

			memset(bufferReception, 0, sizeof(bufferReception));
 8003810:	2240      	movs	r2, #64	; 0x40
 8003812:	2100      	movs	r1, #0
 8003814:	480a      	ldr	r0, [pc, #40]	; (8003840 <fillComand+0x80>)
 8003816:	f006 fddb 	bl	800a3d0 <memset>
			counterReception = 0;
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <fillComand+0x7c>)
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
			writeMsg(&handlerUSART, "\n___Buffer Vaciado___\n \r");
 8003820:	4908      	ldr	r1, [pc, #32]	; (8003844 <fillComand+0x84>)
 8003822:	4809      	ldr	r0, [pc, #36]	; (8003848 <fillComand+0x88>)
 8003824:	f006 fa8a 	bl	8009d3c <writeMsg>
			rxData = '\0';
 8003828:	4b03      	ldr	r3, [pc, #12]	; (8003838 <fillComand+0x78>)
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
		}
		rxData = '\0';
 800382e:	4b02      	ldr	r3, [pc, #8]	; (8003838 <fillComand+0x78>)
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
	}

}
 8003834:	bf00      	nop
 8003836:	bd80      	pop	{r7, pc}
 8003838:	200004d6 	.word	0x200004d6
 800383c:	200004d4 	.word	0x200004d4
 8003840:	20000494 	.word	0x20000494
 8003844:	080108d0 	.word	0x080108d0
 8003848:	20000330 	.word	0x20000330

0800384c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8003856:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <ITM_SendChar+0x48>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <ITM_SendChar+0x48>)
 800385c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003860:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <ITM_SendChar+0x4c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a0c      	ldr	r2, [pc, #48]	; (8003898 <ITM_SendChar+0x4c>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800386e:	bf00      	nop
 8003870:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f8      	beq.n	8003870 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800387e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	6013      	str	r3, [r2, #0]
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	e000edfc 	.word	0xe000edfc
 8003898:	e0000e00 	.word	0xe0000e00

0800389c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
	return 1;
 80038a0:	2301      	movs	r3, #1
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <_kill>:

int _kill(int pid, int sig)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038b6:	f006 fd59 	bl	800a36c <__errno>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2216      	movs	r2, #22
 80038be:	601a      	str	r2, [r3, #0]
	return -1;
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_exit>:

void _exit (int status)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038d4:	f04f 31ff 	mov.w	r1, #4294967295
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ffe7 	bl	80038ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80038de:	e7fe      	b.n	80038de <_exit+0x12>

080038e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	e00a      	b.n	8003908 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038f2:	f3af 8000 	nop.w
 80038f6:	4601      	mov	r1, r0
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	60ba      	str	r2, [r7, #8]
 80038fe:	b2ca      	uxtb	r2, r1
 8003900:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	3301      	adds	r3, #1
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	429a      	cmp	r2, r3
 800390e:	dbf0      	blt.n	80038f2 <_read+0x12>
	}

return len;
 8003910:	687b      	ldr	r3, [r7, #4]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b086      	sub	sp, #24
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	e009      	b.n	8003940 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	60ba      	str	r2, [r7, #8]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff ff89 	bl	800384c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	3301      	adds	r3, #1
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	429a      	cmp	r2, r3
 8003946:	dbf1      	blt.n	800392c <_write+0x12>
	}
	return len;
 8003948:	687b      	ldr	r3, [r7, #4]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <_close>:

int _close(int file)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
	return -1;
 800395a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800397a:	605a      	str	r2, [r3, #4]
	return 0;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <_isatty>:

int _isatty(int file)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
	return 1;
 8003992:	2301      	movs	r3, #1
}
 8003994:	4618      	mov	r0, r3
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
	return 0;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
	...

080039bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80039bc:	480d      	ldr	r0, [pc, #52]	; (80039f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80039be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80039c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039c4:	480c      	ldr	r0, [pc, #48]	; (80039f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80039c6:	490d      	ldr	r1, [pc, #52]	; (80039fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80039c8:	4a0d      	ldr	r2, [pc, #52]	; (8003a00 <LoopForever+0xe>)
  movs r3, #0
 80039ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039cc:	e002      	b.n	80039d4 <LoopCopyDataInit>

080039ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039d2:	3304      	adds	r3, #4

080039d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039d8:	d3f9      	bcc.n	80039ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039da:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039dc:	4c0a      	ldr	r4, [pc, #40]	; (8003a08 <LoopForever+0x16>)
  movs r3, #0
 80039de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039e0:	e001      	b.n	80039e6 <LoopFillZerobss>

080039e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039e4:	3204      	adds	r2, #4

080039e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039e8:	d3fb      	bcc.n	80039e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80039ea:	f006 fcc5 	bl	800a378 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039ee:	f7fd f963 	bl	8000cb8 <main>

080039f2 <LoopForever>:

LoopForever:
    b LoopForever
 80039f2:	e7fe      	b.n	80039f2 <LoopForever>
  ldr   r0, =_estack
 80039f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039fc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003a00:	08011070 	.word	0x08011070
  ldr r2, =_sbss
 8003a04:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003a08:	20012290 	.word	0x20012290

08003a0c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a0c:	e7fe      	b.n	8003a0c <ADC_IRQHandler>
	...

08003a10 <findShorterWay>:
int findShorterWay(char terminalGrid[52][52],
				   char Gridcopy[52][52],
				   float matrixCosts[52][52][6],
				   AStar_distancesHandler *parameters,
				   costChangesAndPos_t *ptrChanges,
				   int shorterWay[100][2]){
 8003a10:	b590      	push	{r4, r7, lr}
 8003a12:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	f507 6477 	add.w	r4, r7, #3952	; 0xf70
 8003a1e:	f6a4 7464 	subw	r4, r4, #3940	; 0xf64
 8003a22:	6020      	str	r0, [r4, #0]
 8003a24:	f507 6077 	add.w	r0, r7, #3952	; 0xf70
 8003a28:	f6a0 7068 	subw	r0, r0, #3944	; 0xf68
 8003a2c:	6001      	str	r1, [r0, #0]
 8003a2e:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003a32:	f6a1 716c 	subw	r1, r1, #3948	; 0xf6c
 8003a36:	600a      	str	r2, [r1, #0]
 8003a38:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003a3c:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 8003a40:	6013      	str	r3, [r2, #0]

	writeMsg(&handlerAstarUsart, "\n______________Comencemos el viaje_____________\n");
 8003a42:	49b5      	ldr	r1, [pc, #724]	; (8003d18 <findShorterWay+0x308>)
 8003a44:	48b5      	ldr	r0, [pc, #724]	; (8003d1c <findShorterWay+0x30c>)
 8003a46:	f006 f979 	bl	8009d3c <writeMsg>

	// seteamos las variables locales a usar
	char nineSlotsMatriz[3][3] = {0}; // matriz que tomara una parte de redeableGrid para analisis
 8003a4a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8003a4e:	f103 0318 	add.w	r3, r3, #24
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	605a      	str	r2, [r3, #4]
 8003a58:	721a      	strb	r2, [r3, #8]
	uint8_t shorterWayFound = RESET;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003a60:	f102 020f 	add.w	r2, r2, #15
 8003a64:	7013      	strb	r3, [r2, #0]
	uint8_t i = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003a6c:	f102 020e 	add.w	r2, r2, #14
 8003a70:	7013      	strb	r3, [r2, #0]
	uint8_t j = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003a78:	f102 020d 	add.w	r2, r2, #13
 8003a7c:	7013      	strb	r3, [r2, #0]
	int position[2];
	uint8_t numberOfPositions = 0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003a84:	f102 020c 	add.w	r2, r2, #12
 8003a88:	7013      	strb	r3, [r2, #0]
	uint8_t counter = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003a90:	f102 020b 	add.w	r2, r2, #11
 8003a94:	7013      	strb	r3, [r2, #0]
	uint8_t counterStudy = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003a9c:	f102 020a 	add.w	r2, r2, #10
 8003aa0:	7013      	strb	r3, [r2, #0]
	//matriz donde se almacenaran en orden ascendente los F cost de las posiciones en estado de Open, esta si tendra un valor maximo y dos columnas, donde
	// Se almacenara el F cost en la primera y el Hcost en la segunda,
	float decisionMatrix[500][4] = {0};
 8003aa2:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003aa6:	f5a3 6376 	sub.w	r3, r3, #3936	; 0xf60
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	f006 fc8c 	bl	800a3d0 <memset>



	// Primero seteamos dentro de los valores de los parametros cuales son los valores de las filas y las columnas
	parameters->numberOfRows    = getRows(terminalGrid);
 8003ab8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003abc:	f6a3 7364 	subw	r3, r3, #3940	; 0xf64
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	f001 fd63 	bl	800558c <getRows>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003ace:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	721a      	strb	r2, [r3, #8]
	parameters->numberOfColumns = getColums(terminalGrid);
 8003ad6:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003ada:	f6a3 7364 	subw	r3, r3, #3940	; 0xf64
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	f001 fd78 	bl	80055d4 <getColums>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003aec:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	725a      	strb	r2, [r3, #9]

	//Segundo construimos nuestra matriz dinamicamente repartida
	buildMatrixCopy(parameters, terminalGrid, Gridcopy);
 8003af4:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003af8:	f6a3 7268 	subw	r2, r3, #3944	; 0xf68
 8003afc:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003b00:	f6a3 7164 	subw	r1, r3, #3940	; 0xf64
 8003b04:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003b08:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	6809      	ldr	r1, [r1, #0]
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	f001 fce8 	bl	80054e6 <buildMatrixCopy>
	//Variables que dependen del analisis respectivo,y el H cost que es la heuristica el cual es un valor
	// fijo Se tendra entonces una matriz de arrays donde se almacenaran
	// los valores como siguen, [Gcost, Fcost, Hcost]

    //Cuarto, seteamos la matriz heuristica, la cual es la ultima matriz de el bloque de tres de la matriz de costos
    if (setHeuristic(parameters, ptrChanges, matrixCosts, Gridcopy)){
 8003b16:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003b1a:	f6a3 7368 	subw	r3, r3, #3944	; 0xf68
 8003b1e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003b22:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8003b26:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003b2a:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003b36:	6809      	ldr	r1, [r1, #0]
 8003b38:	6800      	ldr	r0, [r0, #0]
 8003b3a:	f001 fa4b 	bl	8004fd4 <setHeuristic>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d013      	beq.n	8003b6c <findShorterWay+0x15c>
    	// Si estamos aqui todo salio correctamente, el programa puede seguir su curso
    	__NOP();
 8003b44:	bf00      	nop
    	return 0;
    }

    // Seteada la heuristica AQUI COMIENZA EL ALGORITMO A TRABAJAR, seteamos el punto de inicio y lo guardamos dentro de la estructura
    // correspondiente
    if(findStart(Gridcopy, parameters, ptrChanges)){
 8003b46:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003b4a:	f5a3 6177 	sub.w	r1, r3, #3952	; 0xf70
 8003b4e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003b52:	f6a3 7368 	subw	r3, r3, #3944	; 0xf68
 8003b56:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	6809      	ldr	r1, [r1, #0]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	f001 fc55 	bl	800540e <findStart>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d026      	beq.n	8003bb8 <findShorterWay+0x1a8>
 8003b6a:	e002      	b.n	8003b72 <findShorterWay+0x162>
    	return 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f001 b96e 	b.w	8004e4e <findShorterWay+0x143e>
    	// Si estamos aqui es porque se encontro el punto de inicio con exito
    	__NOP();
 8003b72:	bf00      	nop
    // Comenzamos analizando los vecinos del punto de inicio, calculando para cada uno de ellos (incluyendo el punto de inicio) el Gcosto
    // y el Fcost, de todos ellos al final se selecciona aquel que tenga el F cost mas pequeño, del siguiente while no se sale hasta que se tenga el
    // Array de patents correspondiente a la ruta mas corta

    //guardamos en la posicion de analisis la posicion de start
    ptrChanges->posAnalisis[0] = ptrChanges->startPos[0];
 8003b74:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b7c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	609a      	str	r2, [r3, #8]
    ptrChanges->posAnalisis[1] = ptrChanges->startPos[1];
 8003b84:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b8c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60da      	str	r2, [r3, #12]
    // Definimos tambien el estado de abierto
    ptrChanges->posOpen[0] =  ptrChanges->startPos[0];
 8003b94:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b9c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	611a      	str	r2, [r3, #16]
    ptrChanges->posOpen[1] =  ptrChanges->startPos[1];
 8003ba4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bac:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	615a      	str	r2, [r3, #20]


    while(!shorterWayFound){
 8003bb4:	f001 b801 	b.w	8004bba <findShorterWay+0x11aa>
    	return 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f001 b948 	b.w	8004e4e <findShorterWay+0x143e>

    	// este while actuara como un while de recorrido lineal, donde se busca analizar las posiciones i,j de los aledaños recorriendo cada punto linealmente
    	// al punto de analisis

    	//Actualizamos el punto de analisis para seguir analizando a partir del punto de análisis siguiente
    	ptrChanges->posAnalisis[0] = ptrChanges->posOpen[0];
 8003bbe:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	609a      	str	r2, [r3, #8]
    	ptrChanges->posAnalisis[1] = ptrChanges->posOpen[1];
 8003bce:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60da      	str	r2, [r3, #12]

    	// guardamos la matriz 3x3 de redeableGrid para analisis, para posiciones no correctas se colocan tales posiciones en 0 tipo char
    	// Y para posiciones ya analizadas se coloca una D de done.
    	for(i = 0; i < 3; i++){
 8003bde:	2300      	movs	r3, #0
 8003be0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003be4:	f102 020e 	add.w	r2, r2, #14
 8003be8:	7013      	strb	r3, [r2, #0]
 8003bea:	e0ee      	b.n	8003dca <findShorterWay+0x3ba>
    		for (j = 0; j < 3; j++){
 8003bec:	2300      	movs	r3, #0
 8003bee:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003bf2:	f102 020d 	add.w	r2, r2, #13
 8003bf6:	7013      	strb	r3, [r2, #0]
 8003bf8:	e0d4      	b.n	8003da4 <findShorterWay+0x394>

    			if 	  ((ptrChanges->posAnalisis[0] + i - 1) < 0
 8003bfa:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003c06:	f103 030e 	add.w	r3, r3, #14
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	dd0b      	ble.n	8003c2a <findShorterWay+0x21a>
    			    || (ptrChanges->posAnalisis[1] + j - 1) < 0) {
 8003c12:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003c1e:	f103 030d 	add.w	r3, r3, #13
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	4413      	add	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	dc16      	bgt.n	8003c58 <findShorterWay+0x248>
    				// El primer caso seria cuando el puntero que estudia la matriz esta por fuera del rango , especificamente por detras del rango
    				// donde el indice seria negativo
    				nineSlotsMatriz[i][j] = '0';
 8003c2a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003c2e:	f103 030e 	add.w	r3, r3, #14
 8003c32:	781a      	ldrb	r2, [r3, #0]
 8003c34:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003c38:	f103 030d 	add.w	r3, r3, #13
 8003c3c:	7819      	ldrb	r1, [r3, #0]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003c48:	f103 0310 	add.w	r3, r3, #16
 8003c4c:	443b      	add	r3, r7
 8003c4e:	440b      	add	r3, r1
 8003c50:	3b18      	subs	r3, #24
 8003c52:	2230      	movs	r2, #48	; 0x30
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e09a      	b.n	8003d8e <findShorterWay+0x37e>

    			}else if ((ptrChanges->posAnalisis[0] + i - 1) > parameters->numberOfRows - 1
 8003c58:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003c64:	f103 030e 	add.w	r3, r3, #14
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003c70:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	7a12      	ldrb	r2, [r2, #8]
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	dc11      	bgt.n	8003ca0 <findShorterWay+0x290>
    				||    (ptrChanges->posAnalisis[1] + j - 1) > parameters->numberOfColumns - 1){
 8003c7c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003c88:	f103 030d 	add.w	r3, r3, #13
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003c94:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 8003c98:	6812      	ldr	r2, [r2, #0]
 8003c9a:	7a52      	ldrb	r2, [r2, #9]
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	dd16      	ble.n	8003cce <findShorterWay+0x2be>
    				// El segundo caso seria cuando el puntero que estudia la matriz esta por fuera del rango, especificamente por delante
    				// del rango donde el indice seria mayor al limite superior del numero de filas o columnas restado uno.
    				nineSlotsMatriz[i][j] = '0';
 8003ca0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ca4:	f103 030e 	add.w	r3, r3, #14
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003cae:	f103 030d 	add.w	r3, r3, #13
 8003cb2:	7819      	ldrb	r1, [r3, #0]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003cbe:	f103 0310 	add.w	r3, r3, #16
 8003cc2:	443b      	add	r3, r7
 8003cc4:	440b      	add	r3, r1
 8003cc6:	3b18      	subs	r3, #24
 8003cc8:	2230      	movs	r2, #48	; 0x30
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e05f      	b.n	8003d8e <findShorterWay+0x37e>
    			}else if(i == 1 && j == 1){
 8003cce:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003cd2:	f103 030e 	add.w	r3, r3, #14
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d121      	bne.n	8003d20 <findShorterWay+0x310>
 8003cdc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ce0:	f103 030d 	add.w	r3, r3, #13
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d11a      	bne.n	8003d20 <findShorterWay+0x310>
    				// Este caso corresponde con el punto de analisis , este caso no lo queremos estudiar ya que ya estaria estudiado como tal,
    				// queremos es solo estudiar sus aledanios, por lo que en esta posición colocaremos una 'P' como de Point
    				nineSlotsMatriz[i][j] = 'P';
 8003cea:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003cee:	f103 030e 	add.w	r3, r3, #14
 8003cf2:	781a      	ldrb	r2, [r3, #0]
 8003cf4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003cf8:	f103 030d 	add.w	r3, r3, #13
 8003cfc:	7819      	ldrb	r1, [r3, #0]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003d08:	f103 0310 	add.w	r3, r3, #16
 8003d0c:	443b      	add	r3, r7
 8003d0e:	440b      	add	r3, r1
 8003d10:	3b18      	subs	r3, #24
 8003d12:	2250      	movs	r2, #80	; 0x50
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	e03a      	b.n	8003d8e <findShorterWay+0x37e>
 8003d18:	080108ec 	.word	0x080108ec
 8003d1c:	20001648 	.word	0x20001648
    			}else{
    				// Este ultimo caso donde no se cumple lo anterior  simplemente copiamos exactamente lo mismo que aparece en la matriz de caracteres
    				nineSlotsMatriz[i][j] = Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1];
 8003d20:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d2c:	f103 030e 	add.w	r3, r3, #14
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	4413      	add	r3, r2
 8003d34:	461a      	mov	r2, r3
 8003d36:	2334      	movs	r3, #52	; 0x34
 8003d38:	fb02 f303 	mul.w	r3, r2, r3
 8003d3c:	3b34      	subs	r3, #52	; 0x34
 8003d3e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003d42:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	18d0      	adds	r0, r2, r3
 8003d4a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d56:	f103 030d 	add.w	r3, r3, #13
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003d64:	f102 020e 	add.w	r2, r2, #14
 8003d68:	7812      	ldrb	r2, [r2, #0]
 8003d6a:	f507 51fb 	add.w	r1, r7, #8032	; 0x1f60
 8003d6e:	f101 010d 	add.w	r1, r1, #13
 8003d72:	7809      	ldrb	r1, [r1, #0]
 8003d74:	5cc0      	ldrb	r0, [r0, r3]
 8003d76:	4613      	mov	r3, r2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003d80:	f103 0310 	add.w	r3, r3, #16
 8003d84:	443b      	add	r3, r7
 8003d86:	440b      	add	r3, r1
 8003d88:	3b18      	subs	r3, #24
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	701a      	strb	r2, [r3, #0]
    		for (j = 0; j < 3; j++){
 8003d8e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d92:	f103 030d 	add.w	r3, r3, #13
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003d9e:	f102 020d 	add.w	r2, r2, #13
 8003da2:	7013      	strb	r3, [r2, #0]
 8003da4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003da8:	f103 030d 	add.w	r3, r3, #13
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	f67f af23 	bls.w	8003bfa <findShorterWay+0x1ea>
    	for(i = 0; i < 3; i++){
 8003db4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003db8:	f103 030e 	add.w	r3, r3, #14
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003dc4:	f102 020e 	add.w	r2, r2, #14
 8003dc8:	7013      	strb	r3, [r2, #0]
 8003dca:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003dce:	f103 030e 	add.w	r3, r3, #14
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	f67f af09 	bls.w	8003bec <findShorterWay+0x1dc>
    	// Esta matriz, Se estudiaran los siguientes casos:

    	// Imprimimos la matriz a estudiar

    	// Imprimimos el mensaje de el estudio en el que estamos
    	sprintf (buffer,"\n__________ESTUDIO NUMERO %u__________\n", counterStudy);
 8003dda:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003dde:	f103 030a 	add.w	r3, r3, #10
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	49c9      	ldr	r1, [pc, #804]	; (800410c <findShorterWay+0x6fc>)
 8003de8:	48c9      	ldr	r0, [pc, #804]	; (8004110 <findShorterWay+0x700>)
 8003dea:	f007 f853 	bl	800ae94 <siprintf>
    	writeMsg(&handlerAstarUsart, buffer);
 8003dee:	49c8      	ldr	r1, [pc, #800]	; (8004110 <findShorterWay+0x700>)
 8003df0:	48c8      	ldr	r0, [pc, #800]	; (8004114 <findShorterWay+0x704>)
 8003df2:	f005 ffa3 	bl	8009d3c <writeMsg>

    	// Imprimimos la matriz 3x3 a estudiar
    	for(i = 0; i < 3; i++){
 8003df6:	2300      	movs	r3, #0
 8003df8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003dfc:	f102 020e 	add.w	r2, r2, #14
 8003e00:	7013      	strb	r3, [r2, #0]
 8003e02:	e040      	b.n	8003e86 <findShorterWay+0x476>
			for (j = 0; j < 3; j++){
 8003e04:	2300      	movs	r3, #0
 8003e06:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003e0a:	f102 020d 	add.w	r2, r2, #13
 8003e0e:	7013      	strb	r3, [r2, #0]
 8003e10:	e023      	b.n	8003e5a <findShorterWay+0x44a>
				writeChar(&handlerAstarUsart, nineSlotsMatriz[i][j]);
 8003e12:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e16:	f103 030e 	add.w	r3, r3, #14
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e20:	f103 030d 	add.w	r3, r3, #13
 8003e24:	7819      	ldrb	r1, [r3, #0]
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003e30:	f103 0310 	add.w	r3, r3, #16
 8003e34:	443b      	add	r3, r7
 8003e36:	440b      	add	r3, r1
 8003e38:	3b18      	subs	r3, #24
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	48b5      	ldr	r0, [pc, #724]	; (8004114 <findShorterWay+0x704>)
 8003e40:	f005 ff64 	bl	8009d0c <writeChar>
			for (j = 0; j < 3; j++){
 8003e44:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e48:	f103 030d 	add.w	r3, r3, #13
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003e54:	f102 020d 	add.w	r2, r2, #13
 8003e58:	7013      	strb	r3, [r2, #0]
 8003e5a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e5e:	f103 030d 	add.w	r3, r3, #13
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d9d4      	bls.n	8003e12 <findShorterWay+0x402>
			}
			writeChar(&handlerAstarUsart, '\r');
 8003e68:	210d      	movs	r1, #13
 8003e6a:	48aa      	ldr	r0, [pc, #680]	; (8004114 <findShorterWay+0x704>)
 8003e6c:	f005 ff4e 	bl	8009d0c <writeChar>
    	for(i = 0; i < 3; i++){
 8003e70:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e74:	f103 030e 	add.w	r3, r3, #14
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003e80:	f102 020e 	add.w	r2, r2, #14
 8003e84:	7013      	strb	r3, [r2, #0]
 8003e86:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e8a:	f103 030e 	add.w	r3, r3, #14
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d9b7      	bls.n	8003e04 <findShorterWay+0x3f4>
    	}

    	writeChar(&handlerAstarUsart, '\r');
 8003e94:	210d      	movs	r1, #13
 8003e96:	489f      	ldr	r0, [pc, #636]	; (8004114 <findShorterWay+0x704>)
 8003e98:	f005 ff38 	bl	8009d0c <writeChar>

    	// Imprimimos el estado actual de la matriz copia
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003ea2:	f102 0209 	add.w	r2, r2, #9
 8003ea6:	7013      	strb	r3, [r2, #0]
 8003ea8:	e01c      	b.n	8003ee4 <findShorterWay+0x4d4>
    			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 8003eaa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003eae:	f103 0309 	add.w	r3, r3, #9
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2234      	movs	r2, #52	; 0x34
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003ebe:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4892      	ldr	r0, [pc, #584]	; (8004114 <findShorterWay+0x704>)
 8003eca:	f005 ff37 	bl	8009d3c <writeMsg>
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8003ece:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ed2:	f103 0309 	add.w	r3, r3, #9
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003ede:	f102 0209 	add.w	r2, r2, #9
 8003ee2:	7013      	strb	r3, [r2, #0]
 8003ee4:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003ee8:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	7a1b      	ldrb	r3, [r3, #8]
 8003ef0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003ef4:	f102 0209 	add.w	r2, r2, #9
 8003ef8:	7812      	ldrb	r2, [r2, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d3d5      	bcc.n	8003eaa <findShorterWay+0x49a>
		}
    	// Escribimos enter para tener todo bien espaciado
    	writeChar(&handlerAstarUsart, '\r');
 8003efe:	210d      	movs	r1, #13
 8003f00:	4884      	ldr	r0, [pc, #528]	; (8004114 <findShorterWay+0x704>)
 8003f02:	f005 ff03 	bl	8009d0c <writeChar>


    	for(i = 0; i < 3; i++){
 8003f06:	2300      	movs	r3, #0
 8003f08:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003f0c:	f102 020e 	add.w	r2, r2, #14
 8003f10:	7013      	strb	r3, [r2, #0]
 8003f12:	e33c      	b.n	800458e <findShorterWay+0xb7e>
			for (j = 0; j < 3; j++){
 8003f14:	2300      	movs	r3, #0
 8003f16:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003f1a:	f102 020d 	add.w	r2, r2, #13
 8003f1e:	7013      	strb	r3, [r2, #0]
 8003f20:	e319      	b.n	8004556 <findShorterWay+0xb46>
				switch (nineSlotsMatriz[i][j]) {
 8003f22:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f26:	f103 030e 	add.w	r3, r3, #14
 8003f2a:	781a      	ldrb	r2, [r3, #0]
 8003f2c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f30:	f103 030d 	add.w	r3, r3, #13
 8003f34:	7819      	ldrb	r1, [r3, #0]
 8003f36:	4613      	mov	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003f40:	f103 0310 	add.w	r3, r3, #16
 8003f44:	443b      	add	r3, r7
 8003f46:	440b      	add	r3, r1
 8003f48:	3b18      	subs	r3, #24
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b73      	cmp	r3, #115	; 0x73
 8003f4e:	d075      	beq.n	800403c <findShorterWay+0x62c>
 8003f50:	2b73      	cmp	r3, #115	; 0x73
 8003f52:	f300 82eb 	bgt.w	800452c <findShorterWay+0xb1c>
 8003f56:	2b50      	cmp	r3, #80	; 0x50
 8003f58:	dc66      	bgt.n	8004028 <findShorterWay+0x618>
 8003f5a:	2b23      	cmp	r3, #35	; 0x23
 8003f5c:	f2c0 82e6 	blt.w	800452c <findShorterWay+0xb1c>
 8003f60:	3b23      	subs	r3, #35	; 0x23
 8003f62:	2b2d      	cmp	r3, #45	; 0x2d
 8003f64:	f200 82e2 	bhi.w	800452c <findShorterWay+0xb1c>
 8003f68:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <findShorterWay+0x560>)
 8003f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6e:	bf00      	nop
 8003f70:	08004031 	.word	0x08004031
 8003f74:	0800452d 	.word	0x0800452d
 8003f78:	0800452d 	.word	0x0800452d
 8003f7c:	0800452d 	.word	0x0800452d
 8003f80:	0800452d 	.word	0x0800452d
 8003f84:	0800452d 	.word	0x0800452d
 8003f88:	0800452d 	.word	0x0800452d
 8003f8c:	0800423f 	.word	0x0800423f
 8003f90:	0800452d 	.word	0x0800452d
 8003f94:	0800452d 	.word	0x0800452d
 8003f98:	0800452d 	.word	0x0800452d
 8003f9c:	0800452d 	.word	0x0800452d
 8003fa0:	0800452d 	.word	0x0800452d
 8003fa4:	08004039 	.word	0x08004039
 8003fa8:	0800452d 	.word	0x0800452d
 8003fac:	0800452d 	.word	0x0800452d
 8003fb0:	0800452d 	.word	0x0800452d
 8003fb4:	0800452d 	.word	0x0800452d
 8003fb8:	0800452d 	.word	0x0800452d
 8003fbc:	0800452d 	.word	0x0800452d
 8003fc0:	0800452d 	.word	0x0800452d
 8003fc4:	0800452d 	.word	0x0800452d
 8003fc8:	0800452d 	.word	0x0800452d
 8003fcc:	0800452d 	.word	0x0800452d
 8003fd0:	0800452d 	.word	0x0800452d
 8003fd4:	0800452d 	.word	0x0800452d
 8003fd8:	0800452d 	.word	0x0800452d
 8003fdc:	0800452d 	.word	0x0800452d
 8003fe0:	0800452d 	.word	0x0800452d
 8003fe4:	0800452d 	.word	0x0800452d
 8003fe8:	0800452d 	.word	0x0800452d
 8003fec:	0800452d 	.word	0x0800452d
 8003ff0:	0800452d 	.word	0x0800452d
 8003ff4:	08004035 	.word	0x08004035
 8003ff8:	0800452d 	.word	0x0800452d
 8003ffc:	0800452d 	.word	0x0800452d
 8004000:	0800452d 	.word	0x0800452d
 8004004:	0800452d 	.word	0x0800452d
 8004008:	0800452d 	.word	0x0800452d
 800400c:	0800452d 	.word	0x0800452d
 8004010:	0800452d 	.word	0x0800452d
 8004014:	0800452d 	.word	0x0800452d
 8004018:	0800452d 	.word	0x0800452d
 800401c:	0800452d 	.word	0x0800452d
 8004020:	08004045 	.word	0x08004045
 8004024:	08004041 	.word	0x08004041
 8004028:	2b65      	cmp	r3, #101	; 0x65
 800402a:	f000 8256 	beq.w	80044da <findShorterWay+0xaca>
 800402e:	e27d      	b.n	800452c <findShorterWay+0xb1c>
					case '#':{
						// El primer caso seria cuando el puntero Que estudia a la matriz 3x3 corresponde con un obstaculo, tal pisicion simpkemente se
						//ignora
						// No se hace nada ya que una posicion se obstaculo no se analiza
						__NOP();
 8004030:	bf00      	nop
						break;
 8004032:	e27e      	b.n	8004532 <findShorterWay+0xb22>
					}case 'D':{
						// El segundo caso seria cuando el puntero que estudia la matriz corresponde con un punto ya cerrado o ya pasado a la lista de
						// posiciones ya analizadas, por lo que tampoco se hace nada con este caso,
						__NOP();
 8004034:	bf00      	nop
						break;
 8004036:	e27c      	b.n	8004532 <findShorterWay+0xb22>
					}case '0':{
						// El tercer caso seria cuando el puntero que estudia la matriz corresponde con un punto 0 de tipo char que indica que
						// es una posicion por fuera del rango, por lo que tampoco se hace nada con este caso,
						__NOP();
 8004038:	bf00      	nop
						break;
 800403a:	e27a      	b.n	8004532 <findShorterWay+0xb22>
					}case 's':{
						// El cuarto caso seria cuando el puntero señala la posicion de start por lo que tampoco se hace nada con este caso,
						__NOP();
 800403c:	bf00      	nop
						break;
 800403e:	e278      	b.n	8004532 <findShorterWay+0xb22>
					}case 'P':{
						// El quinto caso seria cuando el puntero señala la posicion de analisis, dentro del analisis no queremos
						// que este se analice a si mismo, por lo que ignoramos este punto, solo nos intrresan sus aledanios
						__NOP();
 8004040:	bf00      	nop
						break;
 8004042:	e276      	b.n	8004532 <findShorterWay+0xb22>
					}case 'O':{
						// El Sexto caso nos encontramos con un estado Open , por lo que tenemos que recalcular para el punto de
						// analisis el Gcost y el Fcost
						position[0] = i;
 8004044:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004048:	f103 030e 	add.w	r3, r3, #14
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004052:	f102 0210 	add.w	r2, r2, #16
 8004056:	6013      	str	r3, [r2, #0]
						position[1] = j;
 8004058:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800405c:	f103 030d 	add.w	r3, r3, #13
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004066:	f102 0214 	add.w	r2, r2, #20
 800406a:	6013      	str	r3, [r2, #0]
						// Como la posicion estudiada esta en estado de open , se debe volver a calcular el G cost y el fcost correspondiente
						// a la posicion opened con respecto al punto de analisis
						ptrChanges->Fcost = setFcost(parameters, ptrChanges, position, matrixCosts);
 800406c:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004070:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8004074:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004078:	f102 0210 	add.w	r2, r2, #16
 800407c:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8004080:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 800408a:	6809      	ldr	r1, [r1, #0]
 800408c:	6800      	ldr	r0, [r0, #0]
 800408e:	f001 f950 	bl	8005332 <setFcost>
 8004092:	eef0 7a40 	vmov.f32	s15, s0
 8004096:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	edc3 7a01 	vstr	s15, [r3, #4]
						// Estudiamos si el nuevo FCost es mayor menor o igual al Fcost que ya tiene el estado abierto
						if (ptrChanges->Fcost >= matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]){
 80040a0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80040aa:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80040b6:	f103 030e 	add.w	r3, r3, #14
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	4413      	add	r3, r2
 80040be:	461a      	mov	r2, r3
 80040c0:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 80040c4:	fb02 f303 	mul.w	r3, r2, r3
 80040c8:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80040cc:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80040d0:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	18d1      	adds	r1, r2, r3
 80040d8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80040e4:	f103 030d 	add.w	r3, r3, #13
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	4413      	add	r3, r2
 80040ec:	1e5a      	subs	r2, r3, #1
 80040ee:	4613      	mov	r3, r2
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	4413      	add	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	440b      	add	r3, r1
 80040f8:	3304      	adds	r3, #4
 80040fa:	edd3 7a00 	vldr	s15, [r3]
 80040fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004106:	db07      	blt.n	8004118 <findShorterWay+0x708>
							// Si el Fcost es mayor o igual a el anteriormente calculado, Significa que el Gcost calculado es el mismo o mayor,
							//por lo que no se actualiza ni el G cost y el F cost ni el parent
							__NOP();
 8004108:	bf00      	nop
							// Si si actualizamos la posicion abierta respectiva, tambien se debe actualizar en la matriz de decisión el F cost
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs

						}
						break;
 800410a:	e212      	b.n	8004532 <findShorterWay+0xb22>
 800410c:	08010920 	.word	0x08010920
 8004110:	200016f4 	.word	0x200016f4
 8004114:	20001648 	.word	0x20001648
							updateGcost(parameters, ptrChanges, position, matrixCosts);
 8004118:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800411c:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8004120:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004124:	f102 0210 	add.w	r2, r2, #16
 8004128:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 800412c:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8004136:	6809      	ldr	r1, [r1, #0]
 8004138:	6800      	ldr	r0, [r0, #0]
 800413a:	f000 feed 	bl	8004f18 <updateGcost>
							updateFcost(parameters, ptrChanges, position, matrixCosts);
 800413e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004142:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8004146:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800414a:	f102 0210 	add.w	r2, r2, #16
 800414e:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8004152:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 800415c:	6809      	ldr	r1, [r1, #0]
 800415e:	6800      	ldr	r0, [r0, #0]
 8004160:	f000 ff08 	bl	8004f74 <updateFcost>
							updateParent(ptrChanges, position, matrixCosts);
 8004164:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004168:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 800416c:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 8004170:	f101 0110 	add.w	r1, r1, #16
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	f000 fe74 	bl	8004e68 <updateParent>
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8004180:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800418c:	f103 030e 	add.w	r3, r3, #14
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	4413      	add	r3, r2
 8004194:	461a      	mov	r2, r3
 8004196:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80041a2:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80041a6:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	18d0      	adds	r0, r2, r3
 80041ae:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80041ba:	f103 030d 	add.w	r3, r3, #13
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	4413      	add	r3, r2
 80041c2:	1e5a      	subs	r2, r3, #1
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 80041c4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6899      	ldr	r1, [r3, #8]
 80041cc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80041d0:	f103 030e 	add.w	r3, r3, #14
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	440b      	add	r3, r1
 80041d8:	4619      	mov	r1, r3
 80041da:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 80041de:	fb01 f303 	mul.w	r3, r1, r3
 80041e2:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80041e6:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80041ea:	f6a1 716c 	subw	r1, r1, #3948	; 0xf6c
 80041ee:	6809      	ldr	r1, [r1, #0]
 80041f0:	18cc      	adds	r4, r1, r3
 80041f2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68d9      	ldr	r1, [r3, #12]
 80041fa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80041fe:	f103 030d 	add.w	r3, r3, #13
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	440b      	add	r3, r1
 8004206:	1e59      	subs	r1, r3, #1
 8004208:	460b      	mov	r3, r1
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	440b      	add	r3, r1
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4423      	add	r3, r4
 8004212:	3314      	adds	r3, #20
 8004214:	edd3 7a00 	vldr	s15, [r3]
 8004218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800421c:	ee17 4a90 	vmov	r4, s15
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8004220:	4613      	mov	r3, r2
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	4413      	add	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4403      	add	r3, r0
 800422a:	3304      	adds	r3, #4
 800422c:	681a      	ldr	r2, [r3, #0]
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 800422e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004232:	f5a3 6176 	sub.w	r1, r3, #3936	; 0xf60
 8004236:	0123      	lsls	r3, r4, #4
 8004238:	440b      	add	r3, r1
 800423a:	601a      	str	r2, [r3, #0]
						break;
 800423c:	e179      	b.n	8004532 <findShorterWay+0xb22>
					}case '*':{
						// El séptimo caso seria cuando el puntero que estudia la matriz corresponde con un punto '*' que corresponde con un
						// espacio no estudiado, por lo que simplemente se setea sobre estos nuevos puntos su Gcost y su Fcost, incluyendo el parent
						position[0] = i;
 800423e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004242:	f103 030e 	add.w	r3, r3, #14
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800424c:	f102 0210 	add.w	r2, r2, #16
 8004250:	6013      	str	r3, [r2, #0]
						position[1] = j;
 8004252:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004256:	f103 030d 	add.w	r3, r3, #13
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004260:	f102 0214 	add.w	r2, r2, #20
 8004264:	6013      	str	r3, [r2, #0]
						updateGcost(parameters, ptrChanges, position, matrixCosts);
 8004266:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800426a:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 800426e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004272:	f102 0210 	add.w	r2, r2, #16
 8004276:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 800427a:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8004284:	6809      	ldr	r1, [r1, #0]
 8004286:	6800      	ldr	r0, [r0, #0]
 8004288:	f000 fe46 	bl	8004f18 <updateGcost>
						updateFcost(parameters, ptrChanges, position, matrixCosts);
 800428c:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004290:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8004294:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004298:	f102 0210 	add.w	r2, r2, #16
 800429c:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80042a0:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 80042aa:	6809      	ldr	r1, [r1, #0]
 80042ac:	6800      	ldr	r0, [r0, #0]
 80042ae:	f000 fe61 	bl	8004f74 <updateFcost>
						updateParent(ptrChanges, position, matrixCosts);
 80042b2:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80042b6:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 80042ba:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 80042be:	f101 0110 	add.w	r1, r1, #16
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80042c8:	6818      	ldr	r0, [r3, #0]
 80042ca:	f000 fdcd 	bl	8004e68 <updateParent>

						// Es conveniente que guardemos tambien esta información dentro de readableGrid porque se necesita luego almacenar esta ifnromacion ya
						// estudiada
						Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1] = 'O';
 80042ce:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80042da:	f103 030e 	add.w	r3, r3, #14
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	4413      	add	r3, r2
 80042e2:	461a      	mov	r2, r3
 80042e4:	2334      	movs	r3, #52	; 0x34
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	3b34      	subs	r3, #52	; 0x34
 80042ec:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80042f0:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80042f4:	6812      	ldr	r2, [r2, #0]
 80042f6:	441a      	add	r2, r3
 80042f8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68d9      	ldr	r1, [r3, #12]
 8004300:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004304:	f103 030d 	add.w	r3, r3, #13
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	440b      	add	r3, r1
 800430c:	3b01      	subs	r3, #1
 800430e:	214f      	movs	r1, #79	; 0x4f
 8004310:	54d1      	strb	r1, [r2, r3]

						// Como se crearon nuevos estados abiertos , se almacena dentro de la matriz de decicion el Fcost, el H cost, y la posicion
						// de cada punto analizado
						// se almacena el Fcost
						decisionMatrix[counter][0] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1];
 8004312:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800431e:	f103 030e 	add.w	r3, r3, #14
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	4413      	add	r3, r2
 8004326:	461a      	mov	r2, r3
 8004328:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 800432c:	fb02 f303 	mul.w	r3, r2, r3
 8004330:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004334:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004338:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 800433c:	6812      	ldr	r2, [r2, #0]
 800433e:	18d1      	adds	r1, r2, r3
 8004340:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800434c:	f103 030d 	add.w	r3, r3, #13
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	4413      	add	r3, r2
 8004354:	1e5a      	subs	r2, r3, #1
 8004356:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800435a:	f103 030b 	add.w	r3, r3, #11
 800435e:	7818      	ldrb	r0, [r3, #0]
 8004360:	4613      	mov	r3, r2
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	4413      	add	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	440b      	add	r3, r1
 800436a:	3304      	adds	r3, #4
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004372:	f5a3 6176 	sub.w	r1, r3, #3936	; 0xf60
 8004376:	0103      	lsls	r3, r0, #4
 8004378:	440b      	add	r3, r1
 800437a:	601a      	str	r2, [r3, #0]
						// Se almacena el H cost
						decisionMatrix[counter][1] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][2];
 800437c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004388:	f103 030e 	add.w	r3, r3, #14
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	4413      	add	r3, r2
 8004390:	461a      	mov	r2, r3
 8004392:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800439e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80043a2:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	18d1      	adds	r1, r2, r3
 80043aa:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80043b6:	f103 030d 	add.w	r3, r3, #13
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	4413      	add	r3, r2
 80043be:	1e5a      	subs	r2, r3, #1
 80043c0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80043c4:	f103 030b 	add.w	r3, r3, #11
 80043c8:	7818      	ldrb	r0, [r3, #0]
 80043ca:	4613      	mov	r3, r2
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	4413      	add	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	440b      	add	r3, r1
 80043d4:	3308      	adds	r3, #8
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80043dc:	f5a3 6176 	sub.w	r1, r3, #3936	; 0xf60
 80043e0:	0103      	lsls	r3, r0, #4
 80043e2:	440b      	add	r3, r1
 80043e4:	3304      	adds	r3, #4
 80043e6:	601a      	str	r2, [r3, #0]
						// Se almacena la posicion i
						decisionMatrix[counter][2] = ptrChanges->posAnalisis[0] + i - 1;
 80043e8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80043f4:	f103 030e 	add.w	r3, r3, #14
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	4413      	add	r3, r2
 80043fc:	1e5a      	subs	r2, r3, #1
 80043fe:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004402:	f103 030b 	add.w	r3, r3, #11
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	ee07 2a90 	vmov	s15, r2
 800440c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004410:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004414:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	4413      	add	r3, r2
 800441c:	3308      	adds	r3, #8
 800441e:	edc3 7a00 	vstr	s15, [r3]
						// Se almacena la posicion j
						decisionMatrix[counter][3] = ptrChanges->posAnalisis[1] + j - 1;
 8004422:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800442e:	f103 030d 	add.w	r3, r3, #13
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	4413      	add	r3, r2
 8004436:	1e5a      	subs	r2, r3, #1
 8004438:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800443c:	f103 030b 	add.w	r3, r3, #11
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	ee07 2a90 	vmov	s15, r2
 8004446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800444a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800444e:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	4413      	add	r3, r2
 8004456:	330c      	adds	r3, #12
 8004458:	edc3 7a00 	vstr	s15, [r3]

						// Guardamos en la matris grande de costos en la ultima matriz el valor del counter asignado a la posición
						matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5] = counter;
 800445c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004468:	f103 030e 	add.w	r3, r3, #14
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	4413      	add	r3, r2
 8004470:	461a      	mov	r2, r3
 8004472:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004476:	fb02 f303 	mul.w	r3, r2, r3
 800447a:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800447e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004482:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	18d1      	adds	r1, r2, r3
 800448a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004496:	f103 030d 	add.w	r3, r3, #13
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	4413      	add	r3, r2
 800449e:	1e5a      	subs	r2, r3, #1
 80044a0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044a4:	f103 030b 	add.w	r3, r3, #11
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b2:	4613      	mov	r3, r2
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	4413      	add	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	440b      	add	r3, r1
 80044bc:	3314      	adds	r3, #20
 80044be:	edc3 7a00 	vstr	s15, [r3]

						// Aumentamos el contador ya que cada posicion estudiada aqui es una nueva posicion que entra a estado open
						counter++;
 80044c2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044c6:	f103 030b 	add.w	r3, r3, #11
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	3301      	adds	r3, #1
 80044ce:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80044d2:	f102 020b 	add.w	r2, r2, #11
 80044d6:	7013      	strb	r3, [r2, #0]

						break;
 80044d8:	e02b      	b.n	8004532 <findShorterWay+0xb22>
					}case 'e':{
						// El octavo caso Sería cuando se encuentra la 'e' de end , donde ya logramos despues de viajar a traves de la maya llegar
						// hasta el punto final, aqui para economizar recursos simplemente haremos que el ciclo se detenga y de parent al end le asignamos
						// el ultimo
						position[0] = i;
 80044da:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044de:	f103 030e 	add.w	r3, r3, #14
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80044e8:	f102 0210 	add.w	r2, r2, #16
 80044ec:	6013      	str	r3, [r2, #0]
						position[1] = j;
 80044ee:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044f2:	f103 030d 	add.w	r3, r3, #13
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80044fc:	f102 0214 	add.w	r2, r2, #20
 8004500:	6013      	str	r3, [r2, #0]
						updateParent(ptrChanges, position, matrixCosts);
 8004502:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004506:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 800450a:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 800450e:	f101 0110 	add.w	r1, r1, #16
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	f000 fca5 	bl	8004e68 <updateParent>
						shorterWayFound = SET;
 800451e:	2301      	movs	r3, #1
 8004520:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004524:	f102 020f 	add.w	r2, r2, #15
 8004528:	7013      	strb	r3, [r2, #0]
						break;
 800452a:	e002      	b.n	8004532 <findShorterWay+0xb22>
					}
					default:{
						// Si se llega hasta aca es porque hay un caracter no permitido dentro de la malla y se debe parar la ejecucion del programa
						return 0;
 800452c:	2300      	movs	r3, #0
 800452e:	f000 bc8e 	b.w	8004e4e <findShorterWay+0x143e>
						break;
					}
				}// Termino del switch case

				if (shorterWayFound){
 8004532:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004536:	f103 030f 	add.w	r3, r3, #15
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d113      	bne.n	8004568 <findShorterWay+0xb58>
			for (j = 0; j < 3; j++){
 8004540:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004544:	f103 030d 	add.w	r3, r3, #13
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	3301      	adds	r3, #1
 800454c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004550:	f102 020d 	add.w	r2, r2, #13
 8004554:	7013      	strb	r3, [r2, #0]
 8004556:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800455a:	f103 030d 	add.w	r3, r3, #13
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b02      	cmp	r3, #2
 8004562:	f67f acde 	bls.w	8003f22 <findShorterWay+0x512>
 8004566:	e000      	b.n	800456a <findShorterWay+0xb5a>
					break;
 8004568:	bf00      	nop
				}

			}// Termino del ciclo for
			if (shorterWayFound){
 800456a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800456e:	f103 030f 	add.w	r3, r3, #15
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d113      	bne.n	80045a0 <findShorterWay+0xb90>
    	for(i = 0; i < 3; i++){
 8004578:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800457c:	f103 030e 	add.w	r3, r3, #14
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	3301      	adds	r3, #1
 8004584:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004588:	f102 020e 	add.w	r2, r2, #14
 800458c:	7013      	strb	r3, [r2, #0]
 800458e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004592:	f103 030e 	add.w	r3, r3, #14
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	2b02      	cmp	r3, #2
 800459a:	f67f acbb 	bls.w	8003f14 <findShorterWay+0x504>
 800459e:	e000      	b.n	80045a2 <findShorterWay+0xb92>
				break;
 80045a0:	bf00      	nop
    	// el que tiene el Fcost mas pequeño, y en caso de Fcost iguales desempata el que tenga una heuristica o Hcost menor
    	// Volvemos a recorrer los aledanios para seleccionar la nueva posicion, tal posicion pasara a ser el nuevo punto de analisis, el resto
    	// seran solo puntos en estado Open, y el antiguo punto de analisis sera ahora un punto Done, Para ello usaremos la funcion findeLesserValue
    	// Esta funcion almacena dentro de la estructura costChangesAndPos_t los valores de la pisicion del F cost mas pequeño, en el caso de que haya
    	// mas de uno igual, se alzará una bandera que indica que esto ocurrio, por lo que internamente el tambien analiza cual es la heuristica
    	if (!shorterWayFound){
 80045a2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80045a6:	f103 030f 	add.w	r3, r3, #15
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f040 8272 	bne.w	8004a96 <findShorterWay+0x1086>
			findLesserValue(ptrChanges, decisionMatrix, counter);
 80045b2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80045b6:	f103 030b 	add.w	r3, r3, #11
 80045ba:	781a      	ldrb	r2, [r3, #0]
 80045bc:	f107 0310 	add.w	r3, r7, #16
 80045c0:	4619      	mov	r1, r3
 80045c2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	f001 f81a 	bl	8005600 <findLesserValue>
			// A partir de aqui tendriamos la posicion del F cost mas pequeño, pero primero se compueba de que si depronto hubo un F cost igual
			if (ptrChanges->equalFcost){
 80045cc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 812c 	beq.w	8004834 <findShorterWay+0xe24>
				// Si estamos aqui es porque si hubo mas de un Fcost igual , por lo que se busca es la posicion del Hcost mas pequeño como la nueva posicion
				// que tomara el nuevo papel de punto de analisis, y el que fue el punto de analisis sera ahor aun estado Done o 'D'
				// Llevamos la posicion de analisis al estado cerrado
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 80045dc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 80045ec:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 80045fc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	461a      	mov	r2, r3
 8004606:	2334      	movs	r3, #52	; 0x34
 8004608:	fb02 f303 	mul.w	r3, r2, r3
 800460c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004610:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	441a      	add	r2, r3
 8004618:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	5cd3      	ldrb	r3, [r2, r3]
 8004622:	2b73      	cmp	r3, #115	; 0x73
 8004624:	d101      	bne.n	800462a <findShorterWay+0xc1a>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8004626:	bf00      	nop
 8004628:	e013      	b.n	8004652 <findShorterWay+0xc42>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 800462a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	461a      	mov	r2, r3
 8004634:	2334      	movs	r3, #52	; 0x34
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800463e:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	441a      	add	r2, r3
 8004646:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2144      	movs	r1, #68	; 0x44
 8004650:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserHcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8004652:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800465e:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	4413      	add	r3, r2
 8004666:	3308      	adds	r3, #8
 8004668:	edd3 7a00 	vldr	s15, [r3]
 800466c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004670:	ee17 2a90 	vmov	r2, s15
 8004674:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserHcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 800467c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004688:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	4413      	add	r3, r2
 8004690:	330c      	adds	r3, #12
 8004692:	edd3 7a00 	vldr	s15, [r3]
 8004696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800469a:	ee17 2a90 	vmov	r2, s15
 800469e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 80046a6:	2300      	movs	r3, #0
 80046a8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80046ac:	f102 020e 	add.w	r2, r2, #14
 80046b0:	7013      	strb	r3, [r2, #0]
 80046b2:	e01e      	b.n	80046f2 <findShorterWay+0xce2>
					decisionMatrix[ptrChanges->lesserHcostPosition][i] = 0;
 80046b4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046bc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80046c0:	f103 030e 	add.w	r3, r3, #14
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80046ca:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 80046ce:	0089      	lsls	r1, r1, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 80046dc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80046e0:	f103 030e 	add.w	r3, r3, #14
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	3301      	adds	r3, #1
 80046e8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80046ec:	f102 020e 	add.w	r2, r2, #14
 80046f0:	7013      	strb	r3, [r2, #0]
 80046f2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80046f6:	f103 030e 	add.w	r3, r3, #14
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d9d9      	bls.n	80046b4 <findShorterWay+0xca4>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8004700:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	b2db      	uxtb	r3, r3
 800470a:	3301      	adds	r3, #1
 800470c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004710:	f102 020e 	add.w	r2, r2, #14
 8004714:	7013      	strb	r3, [r2, #0]
 8004716:	e05f      	b.n	80047d8 <findShorterWay+0xdc8>
					for (j = 0 ; j < 4 ; j++){
 8004718:	2300      	movs	r3, #0
 800471a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800471e:	f102 020d 	add.w	r2, r2, #13
 8004722:	7013      	strb	r3, [r2, #0]
 8004724:	e046      	b.n	80047b4 <findShorterWay+0xda4>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 8004726:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800472a:	f103 030e 	add.w	r3, r3, #14
 800472e:	781c      	ldrb	r4, [r3, #0]
 8004730:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004734:	f103 030d 	add.w	r3, r3, #13
 8004738:	781a      	ldrb	r2, [r3, #0]
 800473a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800473e:	f103 030e 	add.w	r3, r3, #14
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	1e58      	subs	r0, r3, #1
 8004746:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800474a:	f103 030d 	add.w	r3, r3, #13
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8004754:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 8004758:	00a4      	lsls	r4, r4, #2
 800475a:	4422      	add	r2, r4
 800475c:	0092      	lsls	r2, r2, #2
 800475e:	440a      	add	r2, r1
 8004760:	6812      	ldr	r2, [r2, #0]
 8004762:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8004766:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 800476a:	0080      	lsls	r0, r0, #2
 800476c:	4403      	add	r3, r0
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8004774:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004778:	f103 030e 	add.w	r3, r3, #14
 800477c:	7819      	ldrb	r1, [r3, #0]
 800477e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004782:	f103 030d 	add.w	r3, r3, #13
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800478c:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8004790:	0089      	lsls	r1, r1, #2
 8004792:	440b      	add	r3, r1
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 800479e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80047a2:	f103 030d 	add.w	r3, r3, #13
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	3301      	adds	r3, #1
 80047aa:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80047ae:	f102 020d 	add.w	r2, r2, #13
 80047b2:	7013      	strb	r3, [r2, #0]
 80047b4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80047b8:	f103 030d 	add.w	r3, r3, #13
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d9b1      	bls.n	8004726 <findShorterWay+0xd16>
				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 80047c2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80047c6:	f103 030e 	add.w	r3, r3, #14
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	3301      	adds	r3, #1
 80047ce:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80047d2:	f102 020e 	add.w	r2, r2, #14
 80047d6:	7013      	strb	r3, [r2, #0]
 80047d8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80047dc:	f103 030e 	add.w	r3, r3, #14
 80047e0:	781a      	ldrb	r2, [r3, #0]
 80047e2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80047e6:	f103 030b 	add.w	r3, r3, #11
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d393      	bcc.n	8004718 <findShorterWay+0xd08>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 80047f0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80047f4:	f103 030b 	add.w	r3, r3, #11
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004800:	f102 020b 	add.w	r2, r2, #11
 8004804:	7013      	strb	r3, [r2, #0]

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8004806:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8004816:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	615a      	str	r2, [r3, #20]

				// Resetemos la bandera que nos indica si hay un valor de Fcost igual.
				ptrChanges->equalFcost = RESET;
 8004826:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004832:	e124      	b.n	8004a7e <findShorterWay+0x106e>

			}else{
				// Si estamos aqui es porque no hubo F costs iguales y se hara lo mismo que en el caso anterior solo que se tendra en cuenta
				// la posicion encontrada del Fcost mas pequeño, ya no del Hcost mas pequeño
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8004834:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8004844:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8004854:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	461a      	mov	r2, r3
 800485e:	2334      	movs	r3, #52	; 0x34
 8004860:	fb02 f303 	mul.w	r3, r2, r3
 8004864:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004868:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	441a      	add	r2, r3
 8004870:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	5cd3      	ldrb	r3, [r2, r3]
 800487a:	2b73      	cmp	r3, #115	; 0x73
 800487c:	d101      	bne.n	8004882 <findShorterWay+0xe72>
					// Dejamos el char de start tal cual como esta
					__NOP();
 800487e:	bf00      	nop
 8004880:	e013      	b.n	80048aa <findShorterWay+0xe9a>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8004882:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	461a      	mov	r2, r3
 800488c:	2334      	movs	r3, #52	; 0x34
 800488e:	fb02 f303 	mul.w	r3, r2, r3
 8004892:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004896:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	441a      	add	r2, r3
 800489e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2144      	movs	r1, #68	; 0x44
 80048a8:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserFcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 80048aa:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b2:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80048b6:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	4413      	add	r3, r2
 80048be:	3308      	adds	r3, #8
 80048c0:	edd3 7a00 	vldr	s15, [r3]
 80048c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048c8:	ee17 2a90 	vmov	r2, s15
 80048cc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserFcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 80048d4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048dc:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80048e0:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	4413      	add	r3, r2
 80048e8:	330c      	adds	r3, #12
 80048ea:	edd3 7a00 	vldr	s15, [r3]
 80048ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048f2:	ee17 2a90 	vmov	r2, s15
 80048f6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 80048fe:	2300      	movs	r3, #0
 8004900:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004904:	f102 020e 	add.w	r2, r2, #14
 8004908:	7013      	strb	r3, [r2, #0]
 800490a:	e01e      	b.n	800494a <findShorterWay+0xf3a>
					decisionMatrix[ptrChanges->lesserFcostPosition][i] = 0;
 800490c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004914:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004918:	f103 030e 	add.w	r3, r3, #14
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004922:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8004926:	0089      	lsls	r1, r1, #2
 8004928:	440b      	add	r3, r1
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 8004934:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004938:	f103 030e 	add.w	r3, r3, #14
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	3301      	adds	r3, #1
 8004940:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004944:	f102 020e 	add.w	r2, r2, #14
 8004948:	7013      	strb	r3, [r2, #0]
 800494a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800494e:	f103 030e 	add.w	r3, r3, #14
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d9d9      	bls.n	800490c <findShorterWay+0xefc>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 8004958:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004960:	b2db      	uxtb	r3, r3
 8004962:	3301      	adds	r3, #1
 8004964:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004968:	f102 020e 	add.w	r2, r2, #14
 800496c:	7013      	strb	r3, [r2, #0]
 800496e:	e05f      	b.n	8004a30 <findShorterWay+0x1020>
					for (j = 0 ; j < 4 ; j++){
 8004970:	2300      	movs	r3, #0
 8004972:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004976:	f102 020d 	add.w	r2, r2, #13
 800497a:	7013      	strb	r3, [r2, #0]
 800497c:	e046      	b.n	8004a0c <findShorterWay+0xffc>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 800497e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004982:	f103 030e 	add.w	r3, r3, #14
 8004986:	781c      	ldrb	r4, [r3, #0]
 8004988:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800498c:	f103 030d 	add.w	r3, r3, #13
 8004990:	781a      	ldrb	r2, [r3, #0]
 8004992:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004996:	f103 030e 	add.w	r3, r3, #14
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	1e58      	subs	r0, r3, #1
 800499e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80049a2:	f103 030d 	add.w	r3, r3, #13
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80049ac:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 80049b0:	00a4      	lsls	r4, r4, #2
 80049b2:	4422      	add	r2, r4
 80049b4:	0092      	lsls	r2, r2, #2
 80049b6:	440a      	add	r2, r1
 80049b8:	6812      	ldr	r2, [r2, #0]
 80049ba:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80049be:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 80049c2:	0080      	lsls	r0, r0, #2
 80049c4:	4403      	add	r3, r0
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 80049cc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80049d0:	f103 030e 	add.w	r3, r3, #14
 80049d4:	7819      	ldrb	r1, [r3, #0]
 80049d6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80049da:	f103 030d 	add.w	r3, r3, #13
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80049e4:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 80049e8:	0089      	lsls	r1, r1, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 80049f6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80049fa:	f103 030d 	add.w	r3, r3, #13
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	3301      	adds	r3, #1
 8004a02:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004a06:	f102 020d 	add.w	r2, r2, #13
 8004a0a:	7013      	strb	r3, [r2, #0]
 8004a0c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a10:	f103 030d 	add.w	r3, r3, #13
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d9b1      	bls.n	800497e <findShorterWay+0xf6e>
				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 8004a1a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a1e:	f103 030e 	add.w	r3, r3, #14
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004a2a:	f102 020e 	add.w	r2, r2, #14
 8004a2e:	7013      	strb	r3, [r2, #0]
 8004a30:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a34:	f103 030e 	add.w	r3, r3, #14
 8004a38:	781a      	ldrb	r2, [r3, #0]
 8004a3a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a3e:	f103 030b 	add.w	r3, r3, #11
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d393      	bcc.n	8004970 <findShorterWay+0xf60>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 8004a48:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a4c:	f103 030b 	add.w	r3, r3, #11
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004a58:	f102 020b 	add.w	r2, r2, #11
 8004a5c:	7013      	strb	r3, [r2, #0]

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8004a5e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8004a6e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	615a      	str	r2, [r3, #20]

			}

			counterStudy++;
 8004a7e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a82:	f103 030a 	add.w	r3, r3, #10
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004a8e:	f102 020a 	add.w	r2, r2, #10
 8004a92:	7013      	strb	r3, [r2, #0]
 8004a94:	e091      	b.n	8004bba <findShorterWay+0x11aa>
    	}else{
			// Si el programa entra en esta condicion quiere decir que ya se encontro la ruta mas corta y ya es hora de construir la matriz de posiciones
			// donde se almacenara la ruta mas corta
			//buscamos cuantos elementos deberia de tener el arreglo para ello usaremos el siguiente while donde recorreremos desde el end hasta el
			//start
			i = ptrChanges->endPos[0];
 8004a96:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004aa2:	f102 020e 	add.w	r2, r2, #14
 8004aa6:	7013      	strb	r3, [r2, #0]
			j = ptrChanges->endPos[1];
 8004aa8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004ab4:	f102 020d 	add.w	r2, r2, #13
 8004ab8:	7013      	strb	r3, [r2, #0]
			while(Gridcopy[i][j] != 's'){
 8004aba:	e068      	b.n	8004b8e <findShorterWay+0x117e>
				// Actualizamos a la nueva posición
				position[0] = matrixCosts[i][j][3];
 8004abc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004ac0:	f103 030e 	add.w	r3, r3, #14
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004ad2:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	18d1      	adds	r1, r2, r3
 8004ada:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004ade:	f103 030d 	add.w	r3, r3, #13
 8004ae2:	781a      	ldrb	r2, [r3, #0]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	4413      	add	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	440b      	add	r3, r1
 8004aee:	330c      	adds	r3, #12
 8004af0:	edd3 7a00 	vldr	s15, [r3]
 8004af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004af8:	ee17 3a90 	vmov	r3, s15
 8004afc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004b00:	f102 0210 	add.w	r2, r2, #16
 8004b04:	6013      	str	r3, [r2, #0]
				position[1] = matrixCosts[i][j][4];
 8004b06:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004b0a:	f103 030e 	add.w	r3, r3, #14
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004b14:	fb02 f303 	mul.w	r3, r2, r3
 8004b18:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004b1c:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	18d1      	adds	r1, r2, r3
 8004b24:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004b28:	f103 030d 	add.w	r3, r3, #13
 8004b2c:	781a      	ldrb	r2, [r3, #0]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4413      	add	r3, r2
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	440b      	add	r3, r1
 8004b38:	3310      	adds	r3, #16
 8004b3a:	edd3 7a00 	vldr	s15, [r3]
 8004b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b42:	ee17 3a90 	vmov	r3, s15
 8004b46:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004b4a:	f102 0214 	add.w	r2, r2, #20
 8004b4e:	6013      	str	r3, [r2, #0]

				// actualizamos la nueva posición
				i = position[0];
 8004b50:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004b54:	f103 0310 	add.w	r3, r3, #16
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004b5e:	f102 020e 	add.w	r2, r2, #14
 8004b62:	7013      	strb	r3, [r2, #0]
				j = position[1];
 8004b64:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004b68:	f103 0314 	add.w	r3, r3, #20
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004b72:	f102 020d 	add.w	r2, r2, #13
 8004b76:	7013      	strb	r3, [r2, #0]

				// incrementamos en uno la cantidad de posiciones a guardar
				numberOfPositions++;
 8004b78:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004b7c:	f103 030c 	add.w	r3, r3, #12
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	3301      	adds	r3, #1
 8004b84:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004b88:	f102 020c 	add.w	r2, r2, #12
 8004b8c:	7013      	strb	r3, [r2, #0]
			while(Gridcopy[i][j] != 's'){
 8004b8e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004b92:	f103 030e 	add.w	r3, r3, #14
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2234      	movs	r2, #52	; 0x34
 8004b9a:	fb02 f303 	mul.w	r3, r2, r3
 8004b9e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004ba2:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	441a      	add	r2, r3
 8004baa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004bae:	f103 030d 	add.w	r3, r3, #13
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	5cd3      	ldrb	r3, [r2, r3]
 8004bb6:	2b73      	cmp	r3, #115	; 0x73
 8004bb8:	d180      	bne.n	8004abc <findShorterWay+0x10ac>
    while(!shorterWayFound){
 8004bba:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004bbe:	f103 030f 	add.w	r3, r3, #15
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f43e affa 	beq.w	8003bbe <findShorterWay+0x1ae>
		}


    }// final del ciclo While

    writeMsg(&handlerAstarUsart, "\n___________Hemos Encontrado la ruta mas corta______________\n");
 8004bca:	49a4      	ldr	r1, [pc, #656]	; (8004e5c <findShorterWay+0x144c>)
 8004bcc:	48a4      	ldr	r0, [pc, #656]	; (8004e60 <findShorterWay+0x1450>)
 8004bce:	f005 f8b5 	bl	8009d3c <writeMsg>
    writeChar(&handlerAstarUsart, '\r');
 8004bd2:	210d      	movs	r1, #13
 8004bd4:	48a2      	ldr	r0, [pc, #648]	; (8004e60 <findShorterWay+0x1450>)
 8004bd6:	f005 f899 	bl	8009d0c <writeChar>

    // estando aqui ya solo queda almacenar toda las posiciones parent comenzando desde el end hasta el start, siguendo el parent de cada uno se asegura
    // que lo que se esta almacenando es la ruta mas corta

    //Almacenamos dentro de una de las variables del arreglo AStar_distancesHandler la cantidad de elementos que tiene la matriz de la ruta mas corta
    parameters->numberOfElements = numberOfPositions + 1 ; // Le sumamos uno mas para incluir el punto de inicio
 8004bda:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004bde:	f103 030c 	add.w	r3, r3, #12
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	3301      	adds	r3, #1
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004bec:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	729a      	strb	r2, [r3, #10]


    i = ptrChanges->endPos[0];
 8004bf4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004c00:	f102 020e 	add.w	r2, r2, #14
 8004c04:	7013      	strb	r3, [r2, #0]
	j = ptrChanges->endPos[1];
 8004c06:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004c12:	f102 020d 	add.w	r2, r2, #13
 8004c16:	7013      	strb	r3, [r2, #0]

    // Recorremos la matriz e iremos almacenando dentro de este comenzando desde la posicion final y terminando en la posicion inicial
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8004c18:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004c1c:	f103 030c 	add.w	r3, r3, #12
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004c26:	f102 0204 	add.w	r2, r2, #4
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	e0d1      	b.n	8004dd2 <findShorterWay+0x13c2>
    	//Cambiamos la matriz redeableGrid, las posiciones que corresponden a la ruta mas corta por un char 'I',
    	if (Gridcopy[i][j] == 'e'){
 8004c2e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004c32:	f103 030e 	add.w	r3, r3, #14
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2234      	movs	r2, #52	; 0x34
 8004c3a:	fb02 f303 	mul.w	r3, r2, r3
 8004c3e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004c42:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	441a      	add	r2, r3
 8004c4a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004c4e:	f103 030d 	add.w	r3, r3, #13
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	5cd3      	ldrb	r3, [r2, r3]
 8004c56:	2b65      	cmp	r3, #101	; 0x65
 8004c58:	d101      	bne.n	8004c5e <findShorterWay+0x124e>
    		// Si estamos aqui es porque no queremos cambiar el char de finalización
    		__NOP();
 8004c5a:	bf00      	nop
 8004c5c:	e02c      	b.n	8004cb8 <findShorterWay+0x12a8>
    	}else if (Gridcopy[i][j] == 's'){
 8004c5e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004c62:	f103 030e 	add.w	r3, r3, #14
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2234      	movs	r2, #52	; 0x34
 8004c6a:	fb02 f303 	mul.w	r3, r2, r3
 8004c6e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004c72:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	441a      	add	r2, r3
 8004c7a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004c7e:	f103 030d 	add.w	r3, r3, #13
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	5cd3      	ldrb	r3, [r2, r3]
 8004c86:	2b73      	cmp	r3, #115	; 0x73
 8004c88:	d101      	bne.n	8004c8e <findShorterWay+0x127e>
    		// Si estamos aqui es porque no queremos cambiar el char de inicio
    		__NOP();
 8004c8a:	bf00      	nop
 8004c8c:	e014      	b.n	8004cb8 <findShorterWay+0x12a8>
    	}else{
    		// Si estamos aqui es porque estamos dentro del camino a seguir, por lo cambiamos a una 'I'
    		Gridcopy[i][j] = 'I';
 8004c8e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004c92:	f103 030e 	add.w	r3, r3, #14
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2234      	movs	r2, #52	; 0x34
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004ca2:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	441a      	add	r2, r3
 8004caa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004cae:	f103 030d 	add.w	r3, r3, #13
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2149      	movs	r1, #73	; 0x49
 8004cb6:	54d1      	strb	r1, [r2, r3]
    	}


    	// Almacenamos en la matriz de ruta mas corta
		shorterWay[k][0] = i;
 8004cb8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004cbc:	f103 0304 	add.w	r3, r3, #4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8004cc8:	f102 0204 	add.w	r2, r2, #4
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004cd4:	f102 020e 	add.w	r2, r2, #14
 8004cd8:	7812      	ldrb	r2, [r2, #0]
 8004cda:	601a      	str	r2, [r3, #0]
		shorterWay[k][1] = j;
 8004cdc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004ce0:	f103 0304 	add.w	r3, r3, #4
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8004cec:	f102 0204 	add.w	r2, r2, #4
 8004cf0:	6812      	ldr	r2, [r2, #0]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004cf8:	f102 020d 	add.w	r2, r2, #13
 8004cfc:	7812      	ldrb	r2, [r2, #0]
 8004cfe:	605a      	str	r2, [r3, #4]

    	// comenzamos almacenando las posiciones en orden desde el final al punto inicial
		// Actualizamos a la nueva posición
		position[0] = matrixCosts[i][j][3];
 8004d00:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004d04:	f103 030e 	add.w	r3, r3, #14
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004d0e:	fb02 f303 	mul.w	r3, r2, r3
 8004d12:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004d16:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004d1a:	6812      	ldr	r2, [r2, #0]
 8004d1c:	18d1      	adds	r1, r2, r3
 8004d1e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004d22:	f103 030d 	add.w	r3, r3, #13
 8004d26:	781a      	ldrb	r2, [r3, #0]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	4413      	add	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	440b      	add	r3, r1
 8004d32:	330c      	adds	r3, #12
 8004d34:	edd3 7a00 	vldr	s15, [r3]
 8004d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d3c:	ee17 3a90 	vmov	r3, s15
 8004d40:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004d44:	f102 0210 	add.w	r2, r2, #16
 8004d48:	6013      	str	r3, [r2, #0]
		position[1] = matrixCosts[i][j][4];
 8004d4a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004d4e:	f103 030e 	add.w	r3, r3, #14
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004d58:	fb02 f303 	mul.w	r3, r2, r3
 8004d5c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004d60:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004d64:	6812      	ldr	r2, [r2, #0]
 8004d66:	18d1      	adds	r1, r2, r3
 8004d68:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004d6c:	f103 030d 	add.w	r3, r3, #13
 8004d70:	781a      	ldrb	r2, [r3, #0]
 8004d72:	4613      	mov	r3, r2
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	4413      	add	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	440b      	add	r3, r1
 8004d7c:	3310      	adds	r3, #16
 8004d7e:	edd3 7a00 	vldr	s15, [r3]
 8004d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d86:	ee17 3a90 	vmov	r3, s15
 8004d8a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004d8e:	f102 0214 	add.w	r2, r2, #20
 8004d92:	6013      	str	r3, [r2, #0]

		// actualizamos la nueva posición
		i = position[0];
 8004d94:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004d98:	f103 0310 	add.w	r3, r3, #16
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004da2:	f102 020e 	add.w	r2, r2, #14
 8004da6:	7013      	strb	r3, [r2, #0]
		j = position[1];
 8004da8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004dac:	f103 0314 	add.w	r3, r3, #20
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004db6:	f102 020d 	add.w	r2, r2, #13
 8004dba:	7013      	strb	r3, [r2, #0]
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8004dbc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004dc0:	f103 0304 	add.w	r3, r3, #4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004dcc:	f102 0204 	add.w	r2, r2, #4
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004dd6:	f103 0304 	add.w	r3, r3, #4
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f6bf af26 	bge.w	8004c2e <findShorterWay+0x121e>


    }
	// Imprimimos el estado actual de la matriz copia
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8004de2:	2300      	movs	r3, #0
 8004de4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004de8:	f102 0203 	add.w	r2, r2, #3
 8004dec:	7013      	strb	r3, [r2, #0]
 8004dee:	e01c      	b.n	8004e2a <findShorterWay+0x141a>
			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 8004df0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004df4:	f103 0303 	add.w	r3, r3, #3
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2234      	movs	r2, #52	; 0x34
 8004dfc:	fb02 f303 	mul.w	r3, r2, r3
 8004e00:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004e04:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4814      	ldr	r0, [pc, #80]	; (8004e60 <findShorterWay+0x1450>)
 8004e10:	f004 ff94 	bl	8009d3c <writeMsg>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8004e14:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004e18:	f103 0303 	add.w	r3, r3, #3
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004e24:	f102 0203 	add.w	r2, r2, #3
 8004e28:	7013      	strb	r3, [r2, #0]
 8004e2a:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004e2e:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	7a1b      	ldrb	r3, [r3, #8]
 8004e36:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004e3a:	f102 0203 	add.w	r2, r2, #3
 8004e3e:	7812      	ldrb	r2, [r2, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d3d5      	bcc.n	8004df0 <findShorterWay+0x13e0>

    // A partir de aqui habremos logrado despues de un largo camino hallar la ruta mas corta entre dos puntos , el robot ya con esa informacion
    // sabra hacia donde moverse y cuanto moverse

    // Si llegamos hasta aca, con exito hemos logrado todo lo cometido, ¡Felicidades!
    writeMsg(&handlerAstarUsart, "\n______________________Gracias por viajar con nuestra linea Astarlines____________________\n");
 8004e44:	4907      	ldr	r1, [pc, #28]	; (8004e64 <findShorterWay+0x1454>)
 8004e46:	4806      	ldr	r0, [pc, #24]	; (8004e60 <findShorterWay+0x1450>)
 8004e48:	f004 ff78 	bl	8009d3c <writeMsg>

    return 1;
 8004e4c:	2301      	movs	r3, #1


}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd90      	pop	{r4, r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	08010948 	.word	0x08010948
 8004e60:	20001648 	.word	0x20001648
 8004e64:	08010988 	.word	0x08010988

08004e68 <updateParent>:

// Esta función actuazliza en la matriz de costs y el parent correspondiente
void updateParent(costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6]){
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]

	setParents(ptrChanges, posIJ);
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 fa9a 	bl	80053b0 <setParents>

	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][3] = ptrChanges->parent[0]; //Posicion i del parent
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e82:	b2d8      	uxtb	r0, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004e94:	fb02 f303 	mul.w	r3, r2, r3
 8004e98:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	18d1      	adds	r1, r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4413      	add	r3, r2
 8004eac:	1e5a      	subs	r2, r3, #1
 8004eae:	ee07 0a90 	vmov	s15, r0
 8004eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	4413      	add	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	440b      	add	r3, r1
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	edc3 7a00 	vstr	s15, [r3]
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][4] = ptrChanges->parent[1]; //Posicion j del parent
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ecc:	b2d8      	uxtb	r0, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	461a      	mov	r2, r3
 8004eda:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004ede:	fb02 f303 	mul.w	r3, r2, r3
 8004ee2:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	18d1      	adds	r1, r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	1e5a      	subs	r2, r3, #1
 8004ef8:	ee07 0a90 	vmov	s15, r0
 8004efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f00:	4613      	mov	r3, r2
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	4413      	add	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	440b      	add	r3, r1
 8004f0a:	3310      	adds	r3, #16
 8004f0c:	edc3 7a00 	vstr	s15, [r3]

}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <updateGcost>:

// esta funcion actualiz el Gcost correspondiente
void updateGcost(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6] ){
 8004f18:	b5b0      	push	{r4, r5, r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][0] = setGcost(parameters, ptrChanges, posIJ);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4413      	add	r3, r2
 8004f30:	461a      	mov	r2, r3
 8004f32:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
 8004f3a:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	18d5      	adds	r5, r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	1e5c      	subs	r4, r3, #1
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 f905 	bl	8005164 <setGcost>
 8004f5a:	eef0 7a40 	vmov.f32	s15, s0
 8004f5e:	4623      	mov	r3, r4
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	4423      	add	r3, r4
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	442b      	add	r3, r5
 8004f68:	edc3 7a00 	vstr	s15, [r3]
}
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bdb0      	pop	{r4, r5, r7, pc}

08004f74 <updateFcost>:

// Esta función actualiza el Fcost correspondiente
void updateFcost(AStar_distancesHandler *parameters ,costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6] ){
 8004f74:	b5b0      	push	{r4, r5, r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][1] = setFcost(parameters, ptrChanges, posIJ, matrixCosts);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004f92:	fb02 f303 	mul.w	r3, r2, r3
 8004f96:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	18d5      	adds	r5, r2, r3
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4413      	add	r3, r2
 8004faa:	1e5c      	subs	r4, r3, #1
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f9bd 	bl	8005332 <setFcost>
 8004fb8:	eef0 7a40 	vmov.f32	s15, s0
 8004fbc:	4623      	mov	r3, r4
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	4423      	add	r3, r4
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	442b      	add	r3, r5
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	edc3 7a00 	vstr	s15, [r3]

}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bdb0      	pop	{r4, r5, r7, pc}

08004fd4 <setHeuristic>:

// con esta funcion seteamos la matriz Heuristica con la cual usaremos la info para buscar la ruta mas corta
int setHeuristic(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, float matrixCosts[52][52][6] , char Gridcopy[52][52]){
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]

	// definimos variables locales
	int distRows     = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
	int distanceToGo = 0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	613b      	str	r3, [r7, #16]
	//sicion de cada fila y columna el valor de la heuristica dependiendo de donde este el punto de termino o End point

	// Comenzamos entonces recorriendo cada posicion del terccer bloque matricial de ***costs
	// recorremos las filas
	// Almacenamos la posicion final
	if(findEnd(Gridcopy, parameters, ptrChanges)){
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	68f9      	ldr	r1, [r7, #12]
 8004ff2:	6838      	ldr	r0, [r7, #0]
 8004ff4:	f000 fa41 	bl	800547a <findEnd>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <setHeuristic+0x32>
		// Se encontro la posicion final, y continua con el programa
		__NOP();
 8004ffe:	bf00      	nop
	}

	// A partir de aqui ya se tiene la posicion del punto final y ya se puede entonces calcular la heuristica
	// partiendo siempre de que el robot puede ir en diagonal y luego en linea recta , siempre buscando la ruta mas eficiente

	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8005000:	2300      	movs	r3, #0
 8005002:	77fb      	strb	r3, [r7, #31]
 8005004:	e0a3      	b.n	800514e <setHeuristic+0x17a>
		return RESET;
 8005006:	2300      	movs	r3, #0
 8005008:	e0a8      	b.n	800515c <setHeuristic+0x188>
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 800500a:	2300      	movs	r3, #0
 800500c:	77bb      	strb	r3, [r7, #30]
 800500e:	e095      	b.n	800513c <setHeuristic+0x168>
			// para cada posicion i,j, se mira i-iend y j-jend, y se evalua cual de los dos es menor y luego
			// De los dos que sea mas pequeño, el robot tendra que ir diagonal hasta encontrarse con la fila o la columna
			// maas cercana a la fila o la columna del punto final, y ya luego sumarle la distancia paralela que falta para llegar al punto end
			distRows    = abs(i-ptrChanges->endPos[0]);
 8005010:	7ffa      	ldrb	r2, [r7, #31]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	bfb8      	it	lt
 800501c:	425b      	neglt	r3, r3
 800501e:	61bb      	str	r3, [r7, #24]
			distColumns = abs(j-ptrChanges->endPos[1]);
 8005020:	7fba      	ldrb	r2, [r7, #30]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	bfb8      	it	lt
 800502c:	425b      	neglt	r3, r3
 800502e:	617b      	str	r3, [r7, #20]
			if (distRows <= distColumns){
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	429a      	cmp	r2, r3
 8005036:	dc3f      	bgt.n	80050b8 <setHeuristic+0xe4>
				// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
				// que de la columna del end, por lo que se debe ir diagonal
				distanceToGo = parameters->diagonalDiastance * distRows;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	ed93 7a01 	vldr	s14, [r3, #4]
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005050:	ee17 3a90 	vmov	r3, s15
 8005054:	613b      	str	r3, [r7, #16]
				// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
				// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
				// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	edd3 6a00 	vldr	s13, [r3]
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	bfb8      	it	lt
 8005070:	425b      	neglt	r3, r3
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800507a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800507e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005082:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005086:	ee17 3a90 	vmov	r3, s15
 800508a:	613b      	str	r3, [r7, #16]
				//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la sumer matriz
				// de costos
				matrixCosts[i][j][2] = distanceToGo;
 800508c:	7ffb      	ldrb	r3, [r7, #31]
 800508e:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8005092:	fb02 f303 	mul.w	r3, r2, r3
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	18d1      	adds	r1, r2, r3
 800509a:	7fba      	ldrb	r2, [r7, #30]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050a6:	4613      	mov	r3, r2
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	4413      	add	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	440b      	add	r3, r1
 80050b0:	3308      	adds	r3, #8
 80050b2:	edc3 7a00 	vstr	s15, [r3]
 80050b6:	e03e      	b.n	8005136 <setHeuristic+0x162>
			}else{
				// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
				// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
				distanceToGo = parameters->diagonalDiastance * distColumns;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	ee07 3a90 	vmov	s15, r3
 80050c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050d0:	ee17 3a90 	vmov	r3, s15
 80050d4:	613b      	str	r3, [r7, #16]
				// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
				// distRows y distColumns
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	ee07 3a90 	vmov	s15, r3
 80050dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	edd3 6a00 	vldr	s13, [r3]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bfb8      	it	lt
 80050f0:	425b      	neglt	r3, r3
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005106:	ee17 3a90 	vmov	r3, s15
 800510a:	613b      	str	r3, [r7, #16]
				matrixCosts[i][j][2] = distanceToGo;
 800510c:	7ffb      	ldrb	r3, [r7, #31]
 800510e:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8005112:	fb02 f303 	mul.w	r3, r2, r3
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	18d1      	adds	r1, r2, r3
 800511a:	7fba      	ldrb	r2, [r7, #30]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005126:	4613      	mov	r3, r2
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	4413      	add	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	440b      	add	r3, r1
 8005130:	3308      	adds	r3, #8
 8005132:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 8005136:	7fbb      	ldrb	r3, [r7, #30]
 8005138:	3301      	adds	r3, #1
 800513a:	77bb      	strb	r3, [r7, #30]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	7a5b      	ldrb	r3, [r3, #9]
 8005140:	7fba      	ldrb	r2, [r7, #30]
 8005142:	429a      	cmp	r2, r3
 8005144:	f4ff af64 	bcc.w	8005010 <setHeuristic+0x3c>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8005148:	7ffb      	ldrb	r3, [r7, #31]
 800514a:	3301      	adds	r3, #1
 800514c:	77fb      	strb	r3, [r7, #31]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	7a1b      	ldrb	r3, [r3, #8]
 8005152:	7ffa      	ldrb	r2, [r7, #31]
 8005154:	429a      	cmp	r2, r3
 8005156:	f4ff af58 	bcc.w	800500a <setHeuristic+0x36>
		}

	}

	// Terminado TODO el recorrido se puede salir de la funcion y decir que todo fue correcto
	return SET;
 800515a:	2301      	movs	r3, #1

}
 800515c:	4618      	mov	r0, r3
 800515e:	3720      	adds	r7, #32
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <setGcost>:

//Con esta funcion se halla el Gcost teniendo en cuenta la posicion de analisis
float setGcost (AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2]){
 8005164:	b480      	push	{r7}
 8005166:	b089      	sub	sp, #36	; 0x24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
	// definimos variables locales
	int distRows     = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]
	float distanceToGo = 0;
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]

	// Luego calculamos el Gcost partiendo de que se tiene que pasar siempre por la posicion de analisis
	// Se analiza cual es la distancia que hay entre el punto de analisis y el punto de start
	distRows    = abs(ptrChanges->posAnalisis[0] -ptrChanges->startPos[0]);
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	bfb8      	it	lt
 800518c:	425b      	neglt	r3, r3
 800518e:	61bb      	str	r3, [r7, #24]
	distColumns = abs(ptrChanges->posAnalisis[1]-ptrChanges->startPos[1]);
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	bfb8      	it	lt
 800519e:	425b      	neglt	r3, r3
 80051a0:	617b      	str	r3, [r7, #20]

	if ((ptrChanges->posAnalisis[0] + posIJ[0] -1) != ptrChanges->posAnalisis[0]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4413      	add	r3, r2
 80051ac:	1e5a      	subs	r2, r3, #1
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d05d      	beq.n	8005272 <setGcost+0x10e>
	 && (ptrChanges->posAnalisis[1] + posIJ[1] -1) != ptrChanges->posAnalisis[1]){
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3304      	adds	r3, #4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4413      	add	r3, r2
 80051c2:	1e5a      	subs	r2, r3, #1
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d052      	beq.n	8005272 <setGcost+0x10e>
		// Si estamos aqui es porque estamos en una de las 4 esquinas aledanias, por lo que la distancia a la columna o la fila
		// mas cercana a el punto de analisis es 1, se tendra que ir diagonalmente
		distanceToGo = parameters->diagonalDiastance;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	61fb      	str	r3, [r7, #28]

		// Luego se calcula la distancia que resta aplicando el mismo algoritmo de la heuristica
		//pero esta vez para el punto de analisis hasta el punto de inicio

		if (distRows <= distColumns){
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	dc25      	bgt.n	8005226 <setGcost+0xc2>
			// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
			// que de la columna del end, por lo que se debe ir diagonal
			distanceToGo += parameters->diagonalDiastance * distRows;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80051f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051f6:	edc7 7a07 	vstr	s15, [r7, #28]
			// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
			// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
			// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	ed93 7a00 	vldr	s14, [r3]
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	bfb8      	it	lt
 800520a:	425b      	neglt	r3, r3
 800520c:	ee07 3a90 	vmov	s15, r3
 8005210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005218:	ed97 7a07 	vldr	s14, [r7, #28]
 800521c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005220:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8005224:	e077      	b.n	8005316 <setGcost+0x1b2>
		}else{
			// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
			// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
			distanceToGo += parameters->diagonalDiastance * distColumns;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	ed93 7a01 	vldr	s14, [r3, #4]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800523a:	ed97 7a07 	vldr	s14, [r7, #28]
 800523e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005242:	edc7 7a07 	vstr	s15, [r7, #28]
			// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
			// distRows y distColumns
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	ed93 7a00 	vldr	s14, [r3]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	bfb8      	it	lt
 8005256:	425b      	neglt	r3, r3
 8005258:	ee07 3a90 	vmov	s15, r3
 800525c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005264:	ed97 7a07 	vldr	s14, [r7, #28]
 8005268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800526c:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8005270:	e051      	b.n	8005316 <setGcost+0x1b2>

	}else {
		// Si estamos aqui es porque estamos en una de las cuatro aristas, donde tanto el puntero como la posicion real del punto de analisis
		// coinciden en fila o en columna, la unica diferencia aqui es que se calcula paralelamente al punto de analisis y a partir de ahi
		// se aplica el algoritmo de la heuristica
		distanceToGo = parameters->parallelDistance;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	61fb      	str	r3, [r7, #28]

		if (distRows <= distColumns){
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	429a      	cmp	r2, r3
 800527e:	dc25      	bgt.n	80052cc <setGcost+0x168>
			distanceToGo += parameters->diagonalDiastance * distRows;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	ed93 7a01 	vldr	s14, [r3, #4]
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	ee07 3a90 	vmov	s15, r3
 800528c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005294:	ed97 7a07 	vldr	s14, [r7, #28]
 8005298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800529c:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	ed93 7a00 	vldr	s14, [r3]
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bfb8      	it	lt
 80052b0:	425b      	neglt	r3, r3
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052be:	ed97 7a07 	vldr	s14, [r7, #28]
 80052c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052c6:	edc7 7a07 	vstr	s15, [r7, #28]
 80052ca:	e024      	b.n	8005316 <setGcost+0x1b2>
		}else{
			distanceToGo += parameters->diagonalDiastance * distColumns;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	ee07 3a90 	vmov	s15, r3
 80052d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80052e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052e8:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	ed93 7a00 	vldr	s14, [r3]
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	bfb8      	it	lt
 80052fc:	425b      	neglt	r3, r3
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800530a:	ed97 7a07 	vldr	s14, [r7, #28]
 800530e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005312:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}
	ptrChanges->Gcost = distanceToGo;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	601a      	str	r2, [r3, #0]

	return ptrChanges->Gcost;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	ee07 3a90 	vmov	s15, r3
}
 8005324:	eeb0 0a67 	vmov.f32	s0, s15
 8005328:	3724      	adds	r7, #36	; 0x24
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <setFcost>:

// Con esta funcion seteamos el F cost en la matriz 2 de la posicion correspondiente
float setFcost (AStar_distancesHandler *parameters , costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6]){
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	603b      	str	r3, [r7, #0]

	// Esta funcion es simple ya que solo tenemos que calcular de la matriz 3x3 de analisis y sumar el H cost y el G cost para tener el F cost
	ptrChanges->Gcost = setGcost(parameters, ptrChanges, posIJ);
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f7ff ff0d 	bl	8005164 <setGcost>
 800534a:	eef0 7a40 	vmov.f32	s15, s0
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	edc3 7a00 	vstr	s15, [r3]
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	ed93 7a00 	vldr	s14, [r3]
			          + matrixCosts[ptrChanges->posAnalisis[0]+ posIJ[0] -1][ptrChanges->posAnalisis[1]+ posIJ[1] -1][2]; // Hcost
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4413      	add	r3, r2
 8005364:	461a      	mov	r2, r3
 8005366:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	18d1      	adds	r1, r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3304      	adds	r3, #4
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4413      	add	r3, r2
 8005382:	1e5a      	subs	r2, r3, #1
 8005384:	4613      	mov	r3, r2
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	4413      	add	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	440b      	add	r3, r1
 800538e:	3308      	adds	r3, #8
 8005390:	edd3 7a00 	vldr	s15, [r3]
 8005394:	ee77 7a27 	vadd.f32	s15, s14, s15
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	edc3 7a01 	vstr	s15, [r3, #4]

	return ptrChanges->Fcost;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	ee07 3a90 	vmov	s15, r3

}
 80053a6:	eeb0 0a67 	vmov.f32	s0, s15
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <setParents>:

// Con esta funcion seteamos la posicion del parent de los aledanios,
void setParents (costChangesAndPos_t *ptrChanges, int posIJ[2]){
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
	// esta funcion es simple, ya que solo tenemos que setear de la matriz 3x3 de analisis y colocar en la posicion 4 y 5 el indice i y j correspondiente
	// al parent de cada punto aledanio, exceptuando el punto de analisis ya que ese tiene un parent propio

	if ((ptrChanges->posAnalisis[0] + posIJ[0] - 1) == ptrChanges->posAnalisis[0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4413      	add	r3, r2
 80053c4:	1e5a      	subs	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d10c      	bne.n	80053e8 <setParents+0x38>
	&&  (ptrChanges->posAnalisis[1] + posIJ[1] - 1) == ptrChanges->posAnalisis[1] ){
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	3304      	adds	r3, #4
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4413      	add	r3, r2
 80053da:	1e5a      	subs	r2, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d101      	bne.n	80053e8 <setParents+0x38>
		// Aqui no hacemos nada porque significa que estamos sobre el punto de analisis, y no queremos cambiarle el parent a este
		__NOP();
 80053e4:	bf00      	nop
 80053e6:	e00c      	b.n	8005402 <setParents+0x52>
	}else{
		// Si estamos aqui es porque estamos en alguno de los puntos aledanios
		ptrChanges->parent[0] = ptrChanges->posAnalisis[0];
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f883 2020 	strb.w	r2, [r3, #32]
		ptrChanges->parent[1] = ptrChanges->posAnalisis[1];
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

}
 8005400:	bf00      	nop
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <findStart>:

// En esta funcion nos centraremos en buscar la posicion i,j donde se almacena el punto de inicio del robot
int findStart(char Gridcopy[52][52], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 800540e:	b480      	push	{r7}
 8005410:	b087      	sub	sp, #28
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]

	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 's' de start
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 800541a:	2300      	movs	r3, #0
 800541c:	75fb      	strb	r3, [r7, #23]
 800541e:	e020      	b.n	8005462 <findStart+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8005420:	2300      	movs	r3, #0
 8005422:	75bb      	strb	r3, [r7, #22]
 8005424:	e015      	b.n	8005452 <findStart+0x44>
			if (Gridcopy[i][j] == 's'){
 8005426:	7dfb      	ldrb	r3, [r7, #23]
 8005428:	2234      	movs	r2, #52	; 0x34
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	441a      	add	r2, r3
 8005432:	7dbb      	ldrb	r3, [r7, #22]
 8005434:	5cd3      	ldrb	r3, [r2, r3]
 8005436:	2b73      	cmp	r3, #115	; 0x73
 8005438:	d107      	bne.n	800544a <findStart+0x3c>
				ptrChanges->startPos[0] = i;
 800543a:	7dfa      	ldrb	r2, [r7, #23]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	625a      	str	r2, [r3, #36]	; 0x24
				ptrChanges->startPos[1] = j;
 8005440:	7dba      	ldrb	r2, [r7, #22]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	629a      	str	r2, [r3, #40]	; 0x28
				return SET;
 8005446:	2301      	movs	r3, #1
 8005448:	e011      	b.n	800546e <findStart+0x60>
			}else{
				__NOP();
 800544a:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 800544c:	7dbb      	ldrb	r3, [r7, #22]
 800544e:	3301      	adds	r3, #1
 8005450:	75bb      	strb	r3, [r7, #22]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	7a5b      	ldrb	r3, [r3, #9]
 8005456:	7dba      	ldrb	r2, [r7, #22]
 8005458:	429a      	cmp	r2, r3
 800545a:	d3e4      	bcc.n	8005426 <findStart+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 800545c:	7dfb      	ldrb	r3, [r7, #23]
 800545e:	3301      	adds	r3, #1
 8005460:	75fb      	strb	r3, [r7, #23]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	7a1b      	ldrb	r3, [r3, #8]
 8005466:	7dfa      	ldrb	r2, [r7, #23]
 8005468:	429a      	cmp	r2, r3
 800546a:	d3d9      	bcc.n	8005420 <findStart+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 800546c:	2300      	movs	r3, #0



}
 800546e:	4618      	mov	r0, r3
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <findEnd>:
int findEnd(char Gridcopy[52][52], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 800547a:	b480      	push	{r7}
 800547c:	b087      	sub	sp, #28
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	607a      	str	r2, [r7, #4]


	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 'e' de end
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8005486:	2300      	movs	r3, #0
 8005488:	75fb      	strb	r3, [r7, #23]
 800548a:	e020      	b.n	80054ce <findEnd+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 800548c:	2300      	movs	r3, #0
 800548e:	75bb      	strb	r3, [r7, #22]
 8005490:	e015      	b.n	80054be <findEnd+0x44>
			if (Gridcopy[i][j] == 'e'){
 8005492:	7dfb      	ldrb	r3, [r7, #23]
 8005494:	2234      	movs	r2, #52	; 0x34
 8005496:	fb02 f303 	mul.w	r3, r2, r3
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	441a      	add	r2, r3
 800549e:	7dbb      	ldrb	r3, [r7, #22]
 80054a0:	5cd3      	ldrb	r3, [r2, r3]
 80054a2:	2b65      	cmp	r3, #101	; 0x65
 80054a4:	d107      	bne.n	80054b6 <findEnd+0x3c>
				ptrChanges->endPos[0] = i;
 80054a6:	7dfa      	ldrb	r2, [r7, #23]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	62da      	str	r2, [r3, #44]	; 0x2c
				ptrChanges->endPos[1] = j;
 80054ac:	7dba      	ldrb	r2, [r7, #22]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30
				return SET;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e011      	b.n	80054da <findEnd+0x60>
			}else{
				__NOP();
 80054b6:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 80054b8:	7dbb      	ldrb	r3, [r7, #22]
 80054ba:	3301      	adds	r3, #1
 80054bc:	75bb      	strb	r3, [r7, #22]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	7a5b      	ldrb	r3, [r3, #9]
 80054c2:	7dba      	ldrb	r2, [r7, #22]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d3e4      	bcc.n	8005492 <findEnd+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 80054c8:	7dfb      	ldrb	r3, [r7, #23]
 80054ca:	3301      	adds	r3, #1
 80054cc:	75fb      	strb	r3, [r7, #23]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	7a1b      	ldrb	r3, [r3, #8]
 80054d2:	7dfa      	ldrb	r2, [r7, #23]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d3d9      	bcc.n	800548c <findEnd+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 80054d8:	2300      	movs	r3, #0

}
 80054da:	4618      	mov	r0, r3
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <buildMatrixCopy>:
//
//}

//Con esta funcion se reparte la memoria para la matriz de entrada desde la terminal serial

void buildMatrixCopy(AStar_distancesHandler *parameters, char terminalGrid[52][52], char Gridcopy[52][52]){
 80054e6:	b480      	push	{r7}
 80054e8:	b087      	sub	sp, #28
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]


	// Seteamos los valores dentro de la matriz infoGrid de la entrada respectiva
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 80054f2:	2300      	movs	r3, #0
 80054f4:	75fb      	strb	r3, [r7, #23]
 80054f6:	e03d      	b.n	8005574 <buildMatrixCopy+0x8e>
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 80054f8:	2300      	movs	r3, #0
 80054fa:	75bb      	strb	r3, [r7, #22]
 80054fc:	e031      	b.n	8005562 <buildMatrixCopy+0x7c>

			if (j == parameters->numberOfColumns){
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	7a5b      	ldrb	r3, [r3, #9]
 8005502:	7dba      	ldrb	r2, [r7, #22]
 8005504:	429a      	cmp	r2, r3
 8005506:	d109      	bne.n	800551c <buildMatrixCopy+0x36>
				// Agregamos al a la posicion penultima, agregamos una terminacion de salto de linea para ipresion en consola
				Gridcopy[i][j] = '\r';
 8005508:	7dfb      	ldrb	r3, [r7, #23]
 800550a:	2234      	movs	r2, #52	; 0x34
 800550c:	fb02 f303 	mul.w	r3, r2, r3
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	441a      	add	r2, r3
 8005514:	7dbb      	ldrb	r3, [r7, #22]
 8005516:	210d      	movs	r1, #13
 8005518:	54d1      	strb	r1, [r2, r3]
 800551a:	e01f      	b.n	800555c <buildMatrixCopy+0x76>
			}else if (j == parameters->numberOfColumns + 1){
 800551c:	7dba      	ldrb	r2, [r7, #22]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	7a5b      	ldrb	r3, [r3, #9]
 8005522:	3301      	adds	r3, #1
 8005524:	429a      	cmp	r2, r3
 8005526:	d109      	bne.n	800553c <buildMatrixCopy+0x56>
				// Agregamos al final la terminacion nula para que cada fila sea un string completo
				Gridcopy[i][j] = '\0';
 8005528:	7dfb      	ldrb	r3, [r7, #23]
 800552a:	2234      	movs	r2, #52	; 0x34
 800552c:	fb02 f303 	mul.w	r3, r2, r3
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	441a      	add	r2, r3
 8005534:	7dbb      	ldrb	r3, [r7, #22]
 8005536:	2100      	movs	r1, #0
 8005538:	54d1      	strb	r1, [r2, r3]
 800553a:	e00f      	b.n	800555c <buildMatrixCopy+0x76>
			}else{
				Gridcopy[i][j] = terminalGrid[i][j];
 800553c:	7dfb      	ldrb	r3, [r7, #23]
 800553e:	2234      	movs	r2, #52	; 0x34
 8005540:	fb02 f303 	mul.w	r3, r2, r3
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	18d0      	adds	r0, r2, r3
 8005548:	7db9      	ldrb	r1, [r7, #22]
 800554a:	7dfb      	ldrb	r3, [r7, #23]
 800554c:	2234      	movs	r2, #52	; 0x34
 800554e:	fb02 f303 	mul.w	r3, r2, r3
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	441a      	add	r2, r3
 8005556:	7dbb      	ldrb	r3, [r7, #22]
 8005558:	5c41      	ldrb	r1, [r0, r1]
 800555a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 800555c:	7dbb      	ldrb	r3, [r7, #22]
 800555e:	3301      	adds	r3, #1
 8005560:	75bb      	strb	r3, [r7, #22]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	7a5b      	ldrb	r3, [r3, #9]
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	7dbb      	ldrb	r3, [r7, #22]
 800556a:	429a      	cmp	r2, r3
 800556c:	dac7      	bge.n	80054fe <buildMatrixCopy+0x18>
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	3301      	adds	r3, #1
 8005572:	75fb      	strb	r3, [r7, #23]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	7a1b      	ldrb	r3, [r3, #8]
 8005578:	7dfa      	ldrb	r2, [r7, #23]
 800557a:	429a      	cmp	r2, r3
 800557c:	d3bc      	bcc.n	80054f8 <buildMatrixCopy+0x12>
			}
		}
	}

}
 800557e:	bf00      	nop
 8005580:	bf00      	nop
 8005582:	371c      	adds	r7, #28
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <getRows>:



// Se define la funcion de tomar cantidad de filas recorriendo la cantidad de String que tenga el puntero de arreglos matrix hasta que se
// encuentre con el puntero nulo.
uint8_t getRows(char terminalGrid[52][52]){
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]

	uint8_t counterRows = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	73fb      	strb	r3, [r7, #15]
	char letter = '\0';
 8005598:	2300      	movs	r3, #0
 800559a:	73bb      	strb	r3, [r7, #14]
	(void)letter;
	while(terminalGrid[counterRows][0] != '\0'){
 800559c:	e00a      	b.n	80055b4 <getRows+0x28>
		letter = terminalGrid[counterRows][0];
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	2234      	movs	r2, #52	; 0x34
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	4413      	add	r3, r2
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	73bb      	strb	r3, [r7, #14]
		counterRows++;
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	3301      	adds	r3, #1
 80055b2:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[counterRows][0] != '\0'){
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2234      	movs	r2, #52	; 0x34
 80055b8:	fb02 f303 	mul.w	r3, r2, r3
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	4413      	add	r3, r2
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1eb      	bne.n	800559e <getRows+0x12>

	}

	return counterRows;
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <getColums>:

//Se define la funcion de tomar cantidad de columnas recorriendo el string hasta encontrar el elemento nulo char
uint8_t getColums(char terminalGrid[52][52]){
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

	uint8_t counterColumns = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 80055e0:	e002      	b.n	80055e8 <getColums+0x14>

		counterColumns++;
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
 80055e4:	3301      	adds	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	5cd3      	ldrb	r3, [r2, r3]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1f7      	bne.n	80055e2 <getColums+0xe>

	}

	return counterColumns;
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <findLesserValue>:

// esta funcion nos almacena en uno de los arrays volatiles de la estructura costChangesAndPos_t la posicion del valor Fcost o H cost mas pequeño,
// Se debe identificar con un string si se quiere hallar el Fcost mas pequeño o el Hcost mas pequeño, asi, "Fcost" si se quiere hallar el F cost o
// "Hcost" si se quiere hallar el H cost
void findLesserValue(costChangesAndPos_t *ptrChanges, float decisionMtrx[500][4], uint8_t contador){
 8005600:	b480      	push	{r7}
 8005602:	b089      	sub	sp, #36	; 0x24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	4613      	mov	r3, r2
 800560c:	71fb      	strb	r3, [r7, #7]
	// seteamos las variables locales
	uint8_t i;
	uint8_t j;
	float value_1 = 0;
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	61bb      	str	r3, [r7, #24]
	float value_2 = 0;
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	617b      	str	r3, [r7, #20]

	// El algoritmo que se usará es que se recorrerá cada una de las posiciones y se analizara con las demas , excpliyendo obviamente
	// la posicion central


	for(i = 0; i<contador ; i++){
 800561a:	2300      	movs	r3, #0
 800561c:	77fb      	strb	r3, [r7, #31]
 800561e:	e04d      	b.n	80056bc <findLesserValue+0xbc>
		for(j = 0; j<contador ; j++){
 8005620:	2300      	movs	r3, #0
 8005622:	77bb      	strb	r3, [r7, #30]
 8005624:	e034      	b.n	8005690 <findLesserValue+0x90>
			if (i == j){
 8005626:	7ffa      	ldrb	r2, [r7, #31]
 8005628:	7fbb      	ldrb	r3, [r7, #30]
 800562a:	429a      	cmp	r2, r3
 800562c:	d101      	bne.n	8005632 <findLesserValue+0x32>
				// Si estamos aqui es porque estamos analizando el mismo punto, y nosotros queremos es analizar a sus compañeros solamente
				__NOP();
 800562e:	bf00      	nop
 8005630:	e02b      	b.n	800568a <findLesserValue+0x8a>
			}else if (decisionMtrx[i][0]
 8005632:	7ffb      	ldrb	r3, [r7, #31]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	4413      	add	r3, r2
 800563a:	ed93 7a00 	vldr	s14, [r3]
					< decisionMtrx[j][0]){
 800563e:	7fbb      	ldrb	r3, [r7, #30]
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	4413      	add	r3, r2
 8005646:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 800564a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800564e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005652:	d41a      	bmi.n	800568a <findLesserValue+0x8a>
				// Si estamos aca es porque podemos hacer la comparación
				// Si estamos aca es porque efectivamente el Fcost es menor, Solo dejamos pasar el ciclo para asegurarnos de que el j
				// pueda llegar hasta su valor final permitido
			}else if (decisionMtrx[i][0]
 8005654:	7ffb      	ldrb	r3, [r7, #31]
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	4413      	add	r3, r2
 800565c:	ed93 7a00 	vldr	s14, [r3]
				   == decisionMtrx[j][0]){
 8005660:	7fbb      	ldrb	r3, [r7, #30]
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	4413      	add	r3, r2
 8005668:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 800566c:	eeb4 7a67 	vcmp.f32	s14, s15
 8005670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005674:	d104      	bne.n	8005680 <findLesserValue+0x80>
				// Si estamos aqui es porque el programa encontro mas de un  minimo un valor igual al analizado
				ptrChanges->equalFcost = SET;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800567e:	e004      	b.n	800568a <findLesserValue+0x8a>
			}else{
				// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
				// Se resetea la bandera que decia que habia un vakor igual, esto debe de ser solo cierto si el valor que es
				// igual es el menor de la matriz
				ptrChanges->equalFcost = RESET;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				break;
 8005688:	e006      	b.n	8005698 <findLesserValue+0x98>
		for(j = 0; j<contador ; j++){
 800568a:	7fbb      	ldrb	r3, [r7, #30]
 800568c:	3301      	adds	r3, #1
 800568e:	77bb      	strb	r3, [r7, #30]
 8005690:	7fba      	ldrb	r2, [r7, #30]
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	429a      	cmp	r2, r3
 8005696:	d3c6      	bcc.n	8005626 <findLesserValue+0x26>
			}

		}//Terminacion de un for
		if (j == contador){
 8005698:	7fba      	ldrb	r2, [r7, #30]
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	429a      	cmp	r2, r3
 800569e:	d10a      	bne.n	80056b6 <findLesserValue+0xb6>
			// Si entramos en esta condicion es porque el contador j logro llegar a su posicion final
			// Si entramos aqui es porque se logro analizar todo el arreglo y se encontro la posicion que corresponde con el Fcost mas pequeño
			// de todos, tambien guardamos el valor mas pequeño, si este se repite, se sabra gracias a la bandera
			// La posicion mas pequeña del F cost corresponde con la que se etsaba analizando en la posición i
			ptrChanges->lesserFcostPosition = i;
 80056a0:	7ffa      	ldrb	r2, [r7, #31]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	635a      	str	r2, [r3, #52]	; 0x34
			// Almacenamos en lesserFcost el valor de ese Fcost mas pequeño que se hallo
			ptrChanges->lesserFcost = decisionMtrx[i][0];
 80056a6:	7ffb      	ldrb	r3, [r7, #31]
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	4413      	add	r3, r2
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	641a      	str	r2, [r3, #64]	; 0x40
			// paramos el primer for
			break;
 80056b4:	e006      	b.n	80056c4 <findLesserValue+0xc4>
	for(i = 0; i<contador ; i++){
 80056b6:	7ffb      	ldrb	r3, [r7, #31]
 80056b8:	3301      	adds	r3, #1
 80056ba:	77fb      	strb	r3, [r7, #31]
 80056bc:	7ffa      	ldrb	r2, [r7, #31]
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d3ad      	bcc.n	8005620 <findLesserValue+0x20>

	}//Terminacion del otro for


	// Ahora hallaremos el valor mas pequeño de H cost, solo en el caso de que la bandera correspondiente se haya levantado
	if (ptrChanges->equalFcost){
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d076      	beq.n	80057bc <findLesserValue+0x1bc>
		// Si estamos aqui es porque si hay mas de un valor de F cost que corresponde con el valor mas pequeño, desempatamos buscando el Hcost mas pequeño
		// Para ello recorreremos la matriz a analizar de nuevo pero esta vez solo buscando aquellos valores que correspondan con el valor hallado de Fcost

		for(i = 0; i<contador ; i++){
 80056ce:	2300      	movs	r3, #0
 80056d0:	77fb      	strb	r3, [r7, #31]
 80056d2:	e06e      	b.n	80057b2 <findLesserValue+0x1b2>
			value_1 = decisionMtrx[i][0] / ptrChanges->lesserFcost;
 80056d4:	7ffb      	ldrb	r3, [r7, #31]
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	4413      	add	r3, r2
 80056dc:	edd3 6a00 	vldr	s13, [r3]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80056e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ea:	edc7 7a06 	vstr	s15, [r7, #24]
			for(j = 0; j<contador ; j++){
 80056ee:	2300      	movs	r3, #0
 80056f0:	77bb      	strb	r3, [r7, #30]
 80056f2:	e045      	b.n	8005780 <findLesserValue+0x180>
				value_2 = decisionMtrx[j][0] / ptrChanges->lesserFcost;
 80056f4:	7fbb      	ldrb	r3, [r7, #30]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	4413      	add	r3, r2
 80056fc:	edd3 6a00 	vldr	s13, [r3]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800570a:	edc7 7a05 	vstr	s15, [r7, #20]
 				if (i == j){
 800570e:	7ffa      	ldrb	r2, [r7, #31]
 8005710:	7fbb      	ldrb	r3, [r7, #30]
 8005712:	429a      	cmp	r2, r3
 8005714:	d101      	bne.n	800571a <findLesserValue+0x11a>
					// Si estamos aqui es porque estamos analizando la posición de analisis, por lo que lo ignoramos
					__NOP();
 8005716:	bf00      	nop
 8005718:	e02f      	b.n	800577a <findLesserValue+0x17a>
				}else if (value_1 == 1 && value_2 == 1){
 800571a:	edd7 7a06 	vldr	s15, [r7, #24]
 800571e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005722:	eef4 7a47 	vcmp.f32	s15, s14
 8005726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800572a:	d11c      	bne.n	8005766 <findLesserValue+0x166>
 800572c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005734:	eef4 7a47 	vcmp.f32	s15, s14
 8005738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573c:	d113      	bne.n	8005766 <findLesserValue+0x166>
					// Si estamos aca es porque podemos hacer la comparación pero esta vez con la matriz heuristica
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 800573e:	7ffb      	ldrb	r3, [r7, #31]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	4413      	add	r3, r2
 8005746:	ed93 7a01 	vldr	s14, [r3, #4]
 800574a:	7fbb      	ldrb	r3, [r7, #30]
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	4413      	add	r3, r2
 8005752:	edd3 7a01 	vldr	s15, [r3, #4]
 8005756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800575a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800575e:	d900      	bls.n	8005762 <findLesserValue+0x162>
						// Si estamos aca es porque efectivamente el Hcost es menor o igual al resto de Hcost
						__NOP();
					}else{
						// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
						break;
 8005760:	e014      	b.n	800578c <findLesserValue+0x18c>
						__NOP();
 8005762:	bf00      	nop
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8005764:	e009      	b.n	800577a <findLesserValue+0x17a>
					}
				}else if (value_1 == 1){
 8005766:	edd7 7a06 	vldr	s15, [r7, #24]
 800576a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800576e:	eef4 7a47 	vcmp.f32	s15, s14
 8005772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005776:	d108      	bne.n	800578a <findLesserValue+0x18a>
					// Si estamos aqui es porque aun podemos seguir comparando, por lo que el algoritmo debe de seguir bucando a sus iguales
					__NOP();
 8005778:	bf00      	nop
			for(j = 0; j<contador ; j++){
 800577a:	7fbb      	ldrb	r3, [r7, #30]
 800577c:	3301      	adds	r3, #1
 800577e:	77bb      	strb	r3, [r7, #30]
 8005780:	7fba      	ldrb	r2, [r7, #30]
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	429a      	cmp	r2, r3
 8005786:	d3b5      	bcc.n	80056f4 <findLesserValue+0xf4>
 8005788:	e000      	b.n	800578c <findLesserValue+0x18c>
				}else {
					// Estamos en un valor que no nos interesa evaluar, por lo que lo ignoramos y salimos
					break;
 800578a:	bf00      	nop
				}

			}//Terminacion de un for
			if (j == contador){
 800578c:	7fba      	ldrb	r2, [r7, #30]
 800578e:	79fb      	ldrb	r3, [r7, #7]
 8005790:	429a      	cmp	r2, r3
 8005792:	d10b      	bne.n	80057ac <findLesserValue+0x1ac>
				// Si entramos aqui es porque se logro analizar toda la matriz y se encontro la posicion que corresponde con la posicion mas pequeña
				// de todas, tambien guardamos el valor mas pequeño, es muy poco probable, por no decir imposible que tengamos una misma heuristica
				//repetida
				ptrChanges->lesserHcostPosition = i;
 8005794:	7ffa      	ldrb	r2, [r7, #31]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	639a      	str	r2, [r3, #56]	; 0x38
				//Almacenamos en lesserHcost el valor del Hcost mas pequeño encontrado
				ptrChanges->lesserHcost = decisionMtrx[i][1];
 800579a:	7ffb      	ldrb	r3, [r7, #31]
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	4413      	add	r3, r2
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	645a      	str	r2, [r3, #68]	; 0x44
				// Paramos el primer for
				break;
 80057a8:	bf00      	nop
	}else{
		// Si estamos aca es porque no se alzo la bandera que indica que hay mas de un F cost igual por lo que no hacemos nada
		__NOP();
	}

}
 80057aa:	e008      	b.n	80057be <findLesserValue+0x1be>
		for(i = 0; i<contador ; i++){
 80057ac:	7ffb      	ldrb	r3, [r7, #31]
 80057ae:	3301      	adds	r3, #1
 80057b0:	77fb      	strb	r3, [r7, #31]
 80057b2:	7ffa      	ldrb	r2, [r7, #31]
 80057b4:	79fb      	ldrb	r3, [r7, #7]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d38c      	bcc.n	80056d4 <findLesserValue+0xd4>
}
 80057ba:	e000      	b.n	80057be <findLesserValue+0x1be>
		__NOP();
 80057bc:	bf00      	nop
}
 80057be:	bf00      	nop
 80057c0:	3724      	adds	r7, #36	; 0x24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <initSerialComunication>:
	// Liberamos el arreglo de punteros
	free(shorterWayArray);

}
// Con las siguientes funciones inicializamos a los handler necesarios para poder usar la comunicacion serial desde aqui y no desde el main
void initSerialComunication (USART_Handler_t *ptrHandlerUsart, GPIO_Handler_t *ptrHandlerRx, GPIO_Handler_t *ptrHandlerTx){
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]

	// Inicializamos para el modulo Usart, no se necesita configurar ya que ya en el main se configuro con el handler específico
	handlerAstarUsart.ptrUSARTx                      = ptrHandlerUsart->ptrUSARTx;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2d      	ldr	r2, [pc, #180]	; (8005894 <initSerialComunication+0xc8>)
 80057de:	6013      	str	r3, [r2, #0]
	handlerAstarUsart.USART_Config.USART_MCUvelocity = ptrHandlerUsart->USART_Config.USART_MCUvelocity;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	4a2b      	ldr	r2, [pc, #172]	; (8005894 <initSerialComunication+0xc8>)
 80057e6:	60d3      	str	r3, [r2, #12]
	handlerAstarUsart.USART_Config.USART_baudrate    = ptrHandlerUsart->USART_Config.USART_baudrate;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	79da      	ldrb	r2, [r3, #7]
 80057ec:	4b29      	ldr	r3, [pc, #164]	; (8005894 <initSerialComunication+0xc8>)
 80057ee:	71da      	strb	r2, [r3, #7]
	handlerAstarUsart.USART_Config.USART_enableInTx  = ptrHandlerUsart->USART_Config.USART_enableInTx;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	791a      	ldrb	r2, [r3, #4]
 80057f4:	4b27      	ldr	r3, [pc, #156]	; (8005894 <initSerialComunication+0xc8>)
 80057f6:	711a      	strb	r2, [r3, #4]
	handlerAstarUsart.USART_Config.USART_mode        = ptrHandlerUsart->USART_Config.USART_mode;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	799a      	ldrb	r2, [r3, #6]
 80057fc:	4b25      	ldr	r3, [pc, #148]	; (8005894 <initSerialComunication+0xc8>)
 80057fe:	719a      	strb	r2, [r3, #6]
	handlerAstarUsart.USART_Config.USART_parity      = ptrHandlerUsart->USART_Config.USART_parity;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	7a5a      	ldrb	r2, [r3, #9]
 8005804:	4b23      	ldr	r3, [pc, #140]	; (8005894 <initSerialComunication+0xc8>)
 8005806:	725a      	strb	r2, [r3, #9]
	handlerAstarUsart.USART_Config.USART_stopbits    = ptrHandlerUsart->USART_Config.USART_stopbits;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	7a9a      	ldrb	r2, [r3, #10]
 800580c:	4b21      	ldr	r3, [pc, #132]	; (8005894 <initSerialComunication+0xc8>)
 800580e:	729a      	strb	r2, [r3, #10]
	handlerAstarUsart.USART_Config.USART_datasize    = ptrHandlerUsart->USART_Config.USART_datasize;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	7a1a      	ldrb	r2, [r3, #8]
 8005814:	4b1f      	ldr	r3, [pc, #124]	; (8005894 <initSerialComunication+0xc8>)
 8005816:	721a      	strb	r2, [r3, #8]

	// Hacemos lo mismo con los pines Rx y Tx del GPIO
	handlerAstarPinRx.pGPIOx                             = ptrHandlerRx->pGPIOx;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a1e      	ldr	r2, [pc, #120]	; (8005898 <initSerialComunication+0xcc>)
 800581e:	6013      	str	r3, [r2, #0]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerRx->GPIO_PinConfig.GPIO_PinAltFunMode;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	7a5a      	ldrb	r2, [r3, #9]
 8005824:	4b1c      	ldr	r3, [pc, #112]	; (8005898 <initSerialComunication+0xcc>)
 8005826:	725a      	strb	r2, [r3, #9]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerRx->GPIO_PinConfig.GPIO_PinMode;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	795a      	ldrb	r2, [r3, #5]
 800582c:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <initSerialComunication+0xcc>)
 800582e:	715a      	strb	r2, [r3, #5]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinOPType;
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	7a1a      	ldrb	r2, [r3, #8]
 8005834:	4b18      	ldr	r3, [pc, #96]	; (8005898 <initSerialComunication+0xcc>)
 8005836:	721a      	strb	r2, [r3, #8]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinNumber;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	791a      	ldrb	r2, [r3, #4]
 800583c:	4b16      	ldr	r3, [pc, #88]	; (8005898 <initSerialComunication+0xcc>)
 800583e:	711a      	strb	r2, [r3, #4]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerRx->GPIO_PinConfig.GPIO_PinPuPdControl;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	79da      	ldrb	r2, [r3, #7]
 8005844:	4b14      	ldr	r3, [pc, #80]	; (8005898 <initSerialComunication+0xcc>)
 8005846:	71da      	strb	r2, [r3, #7]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerRx->GPIO_PinConfig.GPIO_PinSpeed;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	799a      	ldrb	r2, [r3, #6]
 800584c:	4b12      	ldr	r3, [pc, #72]	; (8005898 <initSerialComunication+0xcc>)
 800584e:	719a      	strb	r2, [r3, #6]

	handlerAstarPinTx.pGPIOx                             = ptrHandlerTx->pGPIOx;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a11      	ldr	r2, [pc, #68]	; (800589c <initSerialComunication+0xd0>)
 8005856:	6013      	str	r3, [r2, #0]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerTx->GPIO_PinConfig.GPIO_PinAltFunMode;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	7a5a      	ldrb	r2, [r3, #9]
 800585c:	4b0f      	ldr	r3, [pc, #60]	; (800589c <initSerialComunication+0xd0>)
 800585e:	725a      	strb	r2, [r3, #9]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerTx->GPIO_PinConfig.GPIO_PinMode;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	795a      	ldrb	r2, [r3, #5]
 8005864:	4b0d      	ldr	r3, [pc, #52]	; (800589c <initSerialComunication+0xd0>)
 8005866:	715a      	strb	r2, [r3, #5]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinOPType;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	7a1a      	ldrb	r2, [r3, #8]
 800586c:	4b0b      	ldr	r3, [pc, #44]	; (800589c <initSerialComunication+0xd0>)
 800586e:	721a      	strb	r2, [r3, #8]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinNumber;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	791a      	ldrb	r2, [r3, #4]
 8005874:	4b09      	ldr	r3, [pc, #36]	; (800589c <initSerialComunication+0xd0>)
 8005876:	711a      	strb	r2, [r3, #4]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerTx->GPIO_PinConfig.GPIO_PinPuPdControl;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	79da      	ldrb	r2, [r3, #7]
 800587c:	4b07      	ldr	r3, [pc, #28]	; (800589c <initSerialComunication+0xd0>)
 800587e:	71da      	strb	r2, [r3, #7]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerTx->GPIO_PinConfig.GPIO_PinSpeed;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	799a      	ldrb	r2, [r3, #6]
 8005884:	4b05      	ldr	r3, [pc, #20]	; (800589c <initSerialComunication+0xd0>)
 8005886:	719a      	strb	r2, [r3, #6]

	// Ya seteados estos handler en teoria podriamos mandar por terminarl serial desde este .c

}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	20001648 	.word	0x20001648
 8005898:	200016dc 	.word	0x200016dc
 800589c:	200016e8 	.word	0x200016e8

080058a0 <create_Astar_operations>:
void create_Astar_operations(AStar_distancesHandler *parameters,
					   int shorterWayArray[100][2],
					   Parameters_Operation_t prtList[30],
					   Parameter_build_t *ptrbuild,
					   Parameters_Path_t *ptrPath,
					   Parameters_Position_t *ptrPos){
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08e      	sub	sp, #56	; 0x38
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
	// Aqui se va a suponer que donde se resetea el robot es el (0,0) de coordenadas y que su vector directos esta a 0 grados con respecto
	// al eje X, por lo que se puede colocar el robot como sea en la posicion inicial y este calculara sus operaciones dependiendo
	// de su posicion inicial


	double finishline_x = 0;
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	f04f 0300 	mov.w	r3, #0
 80058b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double finishline_y = 0;
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	f04f 0300 	mov.w	r3, #0
 80058c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double dist_to_x = 0;
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	f04f 0300 	mov.w	r3, #0
 80058ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double dist_to_y = 0;
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	e9c7 2304 	strd	r2, r3, [r7, #16]

	ptrPath->start_position_x = ptrbuild->initline_x = 0;
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	e9c1 2300 	strd	r2, r3, [r1]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058f4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrPath->start_position_y = ptrbuild->initline_y = 0; //posicion de start, considerada como (0,0)
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800590c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800590e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58


	// calculo del vector unitario del robot


	unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 8005912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005914:	ed93 7b04 	vldr	d7, [r3, #16]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	3310      	adds	r3, #16
 800591c:	4618      	mov	r0, r3
 800591e:	eeb0 0a47 	vmov.f32	s0, s14
 8005922:	eef0 0a67 	vmov.f32	s1, s15
 8005926:	f002 fd81 	bl	800842c <unitary_vector>




	for (uint8_t i = 0 ; i < parameters->numberOfElements - 1 ; i++){
 800592a:	2300      	movs	r3, #0
 800592c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005930:	e06f      	b.n	8005a12 <create_Astar_operations+0x172>

		// Seteamos como punto inicial el punto de start y como punto final el siguiente punto a ir

		dist_to_y = -(shorterWayArray[i+1][0] - shorterWayArray[i][0]) * parameters->parallelDistance;
 8005932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	4413      	add	r3, r2
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005942:	3301      	adds	r3, #1
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	440b      	add	r3, r1
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	edd3 7a00 	vldr	s15, [r3]
 800595c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005960:	ee17 0a90 	vmov	r0, s15
 8005964:	f7fa fe08 	bl	8000578 <__aeabi_f2d>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dist_to_x = (shorterWayArray[i+1][1] - shorterWayArray[i][1]) * parameters->parallelDistance;
 8005970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005974:	3301      	adds	r3, #1
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	4413      	add	r3, r2
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	440b      	add	r3, r1
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	ee07 3a90 	vmov	s15, r3
 8005990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	edd3 7a00 	vldr	s15, [r3]
 800599a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800599e:	ee17 0a90 	vmov	r0, s15
 80059a2:	f7fa fde9 	bl	8000578 <__aeabi_f2d>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	e9c7 2306 	strd	r2, r3, [r7, #24]

		finishline_x += dist_to_x; // Coordenada x a ir
 80059ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80059b6:	f7fa fc81 	bl	80002bc <__adddf3>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		finishline_y += dist_to_y; // Coordenada y a ir
 80059c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80059c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059ca:	f7fa fc77 	bl	80002bc <__adddf3>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		ptrPath->goal_Position_x = finishline_x;
 80059d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059dc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		ptrPath->goal_Position_y = finishline_y;
 80059e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059e6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 80059ea:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 80059ee:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f002 f9ab 	bl	8007d50 <build_Operation>

		change_coordinates_position(ptrPath, finishline_x, finishline_y); // Cambiamos de coordenada teorica para seguir construyendo el camino
 80059fa:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 80059fe:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8005a02:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005a04:	f002 fa88 	bl	8007f18 <change_coordinates_position>
	for (uint8_t i = 0 ; i < parameters->numberOfElements - 1 ; i++){
 8005a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a12:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	7a9b      	ldrb	r3, [r3, #10]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	db88      	blt.n	8005932 <create_Astar_operations+0x92>

	}


	// Agregamos la operacion nula
	add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a26:	ed9f 2b08 	vldr	d2, [pc, #32]	; 8005a48 <create_Astar_operations+0x1a8>
 8005a2a:	ed9f 1b07 	vldr	d1, [pc, #28]	; 8005a48 <create_Astar_operations+0x1a8>
 8005a2e:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8005a48 <create_Astar_operations+0x1a8>
 8005a32:	2200      	movs	r2, #0
 8005a34:	4619      	mov	r1, r3
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f002 fa2a 	bl	8007e90 <add_Operation>


}
 8005a3c:	bf00      	nop
 8005a3e:	3738      	adds	r7, #56	; 0x38
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	f3af 8000 	nop.w
	...

08005a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	db0b      	blt.n	8005a7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	f003 021f 	and.w	r2, r3, #31
 8005a68:	4907      	ldr	r1, [pc, #28]	; (8005a88 <__NVIC_EnableIRQ+0x38>)
 8005a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	2001      	movs	r0, #1
 8005a72:	fa00 f202 	lsl.w	r2, r0, r2
 8005a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	e000e100 	.word	0xe000e100

08005a8c <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 8005a90:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <inTIM4+0x30>)
 8005a92:	4a0b      	ldr	r2, [pc, #44]	; (8005ac0 <inTIM4+0x34>)
 8005a94:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8005a96:	4b09      	ldr	r3, [pc, #36]	; (8005abc <inTIM4+0x30>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8005a9c:	4b07      	ldr	r3, [pc, #28]	; (8005abc <inTIM4+0x30>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8005aa2:	4b06      	ldr	r3, [pc, #24]	; (8005abc <inTIM4+0x30>)
 8005aa4:	f242 7210 	movw	r2, #10000	; 0x2710
 8005aa8:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 8005aaa:	4b04      	ldr	r3, [pc, #16]	; (8005abc <inTIM4+0x30>)
 8005aac:	220a      	movs	r2, #10
 8005aae:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 8005ab0:	4802      	ldr	r0, [pc, #8]	; (8005abc <inTIM4+0x30>)
 8005ab2:	f000 f807 	bl	8005ac4 <BasicTimer_Config>

}
 8005ab6:	bf00      	nop
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	200002d8 	.word	0x200002d8
 8005ac0:	40000800 	.word	0x40000800

08005ac4 <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005ad4:	b672      	cpsid	i
}
 8005ad6:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a85      	ldr	r2, [pc, #532]	; (8005cf4 <BasicTimer_Config+0x230>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d106      	bne.n	8005af0 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8005ae2:	4b85      	ldr	r3, [pc, #532]	; (8005cf8 <BasicTimer_Config+0x234>)
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae6:	4a84      	ldr	r2, [pc, #528]	; (8005cf8 <BasicTimer_Config+0x234>)
 8005ae8:	f043 0301 	orr.w	r3, r3, #1
 8005aec:	6453      	str	r3, [r2, #68]	; 0x44
 8005aee:	e030      	b.n	8005b52 <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af8:	d106      	bne.n	8005b08 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8005afa:	4b7f      	ldr	r3, [pc, #508]	; (8005cf8 <BasicTimer_Config+0x234>)
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	4a7e      	ldr	r2, [pc, #504]	; (8005cf8 <BasicTimer_Config+0x234>)
 8005b00:	f043 0301 	orr.w	r3, r3, #1
 8005b04:	6413      	str	r3, [r2, #64]	; 0x40
 8005b06:	e024      	b.n	8005b52 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a7b      	ldr	r2, [pc, #492]	; (8005cfc <BasicTimer_Config+0x238>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d106      	bne.n	8005b20 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8005b12:	4b79      	ldr	r3, [pc, #484]	; (8005cf8 <BasicTimer_Config+0x234>)
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	4a78      	ldr	r2, [pc, #480]	; (8005cf8 <BasicTimer_Config+0x234>)
 8005b18:	f043 0302 	orr.w	r3, r3, #2
 8005b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b1e:	e018      	b.n	8005b52 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a76      	ldr	r2, [pc, #472]	; (8005d00 <BasicTimer_Config+0x23c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d106      	bne.n	8005b38 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8005b2a:	4b73      	ldr	r3, [pc, #460]	; (8005cf8 <BasicTimer_Config+0x234>)
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	4a72      	ldr	r2, [pc, #456]	; (8005cf8 <BasicTimer_Config+0x234>)
 8005b30:	f043 0304 	orr.w	r3, r3, #4
 8005b34:	6413      	str	r3, [r2, #64]	; 0x40
 8005b36:	e00c      	b.n	8005b52 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a71      	ldr	r2, [pc, #452]	; (8005d04 <BasicTimer_Config+0x240>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d106      	bne.n	8005b50 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8005b42:	4b6d      	ldr	r3, [pc, #436]	; (8005cf8 <BasicTimer_Config+0x234>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	4a6c      	ldr	r2, [pc, #432]	; (8005cf8 <BasicTimer_Config+0x234>)
 8005b48:	f043 0308 	orr.w	r3, r3, #8
 8005b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b4e:	e000      	b.n	8005b52 <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8005b50:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b60:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6892      	ldr	r2, [r2, #8]
 8005b6a:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	791b      	ldrb	r3, [r3, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f040 80d3 	bne.w	8005d1c <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0210 	bic.w	r2, r2, #16
 8005b84:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2ba0      	cmp	r3, #160	; 0xa0
 8005b90:	d022      	beq.n	8005bd8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2bc8      	cmp	r3, #200	; 0xc8
 8005b96:	d01f      	beq.n	8005bd8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005b9e:	d01b      	beq.n	8005bd8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005ba6:	d017      	beq.n	8005bd8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005bae:	d013      	beq.n	8005bd8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005bb6:	d00f      	beq.n	8005bd8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005bbe:	d00b      	beq.n	8005bd8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005bc6:	d007      	beq.n	8005bd8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8005bce:	d003      	beq.n	8005bd8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bd6:	d10b      	bne.n	8005bf0 <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	2264      	movs	r2, #100	; 0x64
 8005bde:	fb02 f303 	mul.w	r3, r2, r3
 8005be2:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	3a01      	subs	r2, #1
 8005bec:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bee:	e07c      	b.n	8005cea <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005bf6:	d029      	beq.n	8005c4c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005bfe:	d025      	beq.n	8005c4c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d020      	beq.n	8005c4c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8005c10:	d01c      	beq.n	8005c4c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d017      	beq.n	8005c4c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f241 7270 	movw	r2, #6000	; 0x1770
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d012      	beq.n	8005c4c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f641 3258 	movw	r2, #7000	; 0x1b58
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00d      	beq.n	8005c4c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005c36:	d009      	beq.n	8005c4c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f242 3228 	movw	r2, #9000	; 0x2328
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d004      	beq.n	8005c4c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d10c      	bne.n	8005c66 <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	3a01      	subs	r2, #1
 8005c62:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c64:	e041      	b.n	8005cea <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005c6c:	d028      	beq.n	8005cc0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f644 6220 	movw	r2, #20000	; 0x4e20
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d023      	beq.n	8005cc0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f247 5230 	movw	r2, #30000	; 0x7530
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d01e      	beq.n	8005cc0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f649 4240 	movw	r2, #40000	; 0x9c40
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d019      	beq.n	8005cc0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d014      	beq.n	8005cc0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00f      	beq.n	8005cc0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4a19      	ldr	r2, [pc, #100]	; (8005d08 <BasicTimer_Config+0x244>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00b      	beq.n	8005cc0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4a18      	ldr	r2, [pc, #96]	; (8005d0c <BasicTimer_Config+0x248>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d007      	beq.n	8005cc0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4a17      	ldr	r2, [pc, #92]	; (8005d10 <BasicTimer_Config+0x24c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4a16      	ldr	r2, [pc, #88]	; (8005d14 <BasicTimer_Config+0x250>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d108      	bne.n	8005cd2 <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	3a01      	subs	r2, #1
 8005cce:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cd0:	e00b      	b.n	8005cea <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	4a10      	ldr	r2, [pc, #64]	; (8005d18 <BasicTimer_Config+0x254>)
 8005cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cdc:	08db      	lsrs	r3, r3, #3
 8005cde:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	3a01      	subs	r2, #1
 8005ce8:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	625a      	str	r2, [r3, #36]	; 0x24
 8005cf2:	e027      	b.n	8005d44 <BasicTimer_Config+0x280>
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40023800 	.word	0x40023800
 8005cfc:	40000400 	.word	0x40000400
 8005d00:	40000800 	.word	0x40000800
 8005d04:	40000c00 	.word	0x40000c00
 8005d08:	00011170 	.word	0x00011170
 8005d0c:	00013880 	.word	0x00013880
 8005d10:	00015f90 	.word	0x00015f90
 8005d14:	000186a0 	.word	0x000186a0
 8005d18:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0210 	orr.w	r2, r2, #16
 8005d2a:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3a01      	subs	r2, #1
 8005d36:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3a01      	subs	r2, #1
 8005d42:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	7c1b      	ldrb	r3, [r3, #16]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d12d      	bne.n	8005da8 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d64:	d103      	bne.n	8005d6e <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 8005d66:	201c      	movs	r0, #28
 8005d68:	f7ff fe72 	bl	8005a50 <__NVIC_EnableIRQ>
 8005d6c:	e024      	b.n	8005db8 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a14      	ldr	r2, [pc, #80]	; (8005dc4 <BasicTimer_Config+0x300>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d103      	bne.n	8005d80 <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8005d78:	201d      	movs	r0, #29
 8005d7a:	f7ff fe69 	bl	8005a50 <__NVIC_EnableIRQ>
 8005d7e:	e01b      	b.n	8005db8 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a10      	ldr	r2, [pc, #64]	; (8005dc8 <BasicTimer_Config+0x304>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d103      	bne.n	8005d92 <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 8005d8a:	201e      	movs	r0, #30
 8005d8c:	f7ff fe60 	bl	8005a50 <__NVIC_EnableIRQ>
 8005d90:	e012      	b.n	8005db8 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a0d      	ldr	r2, [pc, #52]	; (8005dcc <BasicTimer_Config+0x308>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d103      	bne.n	8005da4 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 8005d9c:	2032      	movs	r0, #50	; 0x32
 8005d9e:	f7ff fe57 	bl	8005a50 <__NVIC_EnableIRQ>
 8005da2:	e009      	b.n	8005db8 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 8005da4:	bf00      	nop
 8005da6:	e007      	b.n	8005db8 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0201 	bic.w	r2, r2, #1
 8005db6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8005db8:	b662      	cpsie	i
}
 8005dba:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40000400 	.word	0x40000400
 8005dc8:	40000800 	.word	0x40000800
 8005dcc:	40000c00 	.word	0x40000c00

08005dd0 <delay_ms>:

void delay_ms(uint16_t time_to_wait_ms){
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 8005dda:	4818      	ldr	r0, [pc, #96]	; (8005e3c <delay_ms+0x6c>)
 8005ddc:	f000 fa6e 	bl	80062bc <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 8005de0:	88fb      	ldrh	r3, [r7, #6]
 8005de2:	461a      	mov	r2, r3
 8005de4:	0092      	lsls	r2, r2, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	3b01      	subs	r3, #1
 8005dee:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 8005df4:	e016      	b.n	8005e24 <delay_ms+0x54>
		if (handlerTIM4_time.ptrTIMx->SR & TIM_SR_UIF)  {
 8005df6:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <delay_ms+0x6c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00f      	beq.n	8005e24 <delay_ms+0x54>
			CNT += handlerTIM4_time.ptrTIMx->ARR + 1;
 8005e04:	4b0d      	ldr	r3, [pc, #52]	; (8005e3c <delay_ms+0x6c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	89fb      	ldrh	r3, [r7, #14]
 8005e10:	4413      	add	r3, r2
 8005e12:	81fb      	strh	r3, [r7, #14]
			handlerTIM4_time.ptrTIMx->SR &= ~TIM_SR_UIF;
 8005e14:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <delay_ms+0x6c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	4b08      	ldr	r3, [pc, #32]	; (8005e3c <delay_ms+0x6c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0201 	bic.w	r2, r2, #1
 8005e22:	611a      	str	r2, [r3, #16]
	while (CNT < limit){
 8005e24:	89fa      	ldrh	r2, [r7, #14]
 8005e26:	89bb      	ldrh	r3, [r7, #12]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d3e4      	bcc.n	8005df6 <delay_ms+0x26>
		}
	}
	stopTimer(&handlerTIM4_time);
 8005e2c:	4803      	ldr	r0, [pc, #12]	; (8005e3c <delay_ms+0x6c>)
 8005e2e:	f000 fa57 	bl	80062e0 <stopTimer>
}
 8005e32:	bf00      	nop
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	200002d8 	.word	0x200002d8

08005e40 <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005e44:	bf00      	nop
}
 8005e46:	bf00      	nop
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005e54:	bf00      	nop
}
 8005e56:	bf00      	nop
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005e64:	bf00      	nop
}
 8005e66:	bf00      	nop
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005e74:	bf00      	nop
}
 8005e76:	bf00      	nop
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005e84:	bf00      	nop
}
 8005e86:	bf00      	nop
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005e94:	bf00      	nop
}
 8005e96:	bf00      	nop
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8005ea0:	b480      	push	{r7}
 8005ea2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005ea4:	bf00      	nop
}
 8005ea6:	bf00      	nop
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005eb4:	bf00      	nop
}
 8005eb6:	bf00      	nop
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8005ec0:	b480      	push	{r7}
 8005ec2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005ec4:	bf00      	nop
}
 8005ec6:	bf00      	nop
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005ed4:	bf00      	nop
}
 8005ed6:	bf00      	nop
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005ee4:	bf00      	nop
}
 8005ee6:	bf00      	nop
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005ef4:	bf00      	nop
}
 8005ef6:	bf00      	nop
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005f04:	bf00      	nop
}
 8005f06:	bf00      	nop
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005f14:	bf00      	nop
}
 8005f16:	bf00      	nop
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005f24:	bf00      	nop
}
 8005f26:	bf00      	nop
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005f34:	bf00      	nop
}
 8005f36:	bf00      	nop
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005f44:	bf00      	nop
}
 8005f46:	bf00      	nop
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8005f54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8005f62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f6c:	f023 0301 	bic.w	r3, r3, #1
 8005f70:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 8005f72:	f7fb ff53 	bl	8001e1c <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 8005f76:	e066      	b.n	8006046 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8005f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d012      	beq.n	8005fac <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 8005f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f90:	f023 0302 	bic.w	r3, r3, #2
 8005f94:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 8005f96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fa4:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 8005fa6:	f7ff ff5b 	bl	8005e60 <Capture_TIM2_Ch1_Callback>
}
 8005faa:	e04c      	b.n	8006046 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8005fac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d012      	beq.n	8005fe0 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 8005fba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005fc4:	f023 0304 	bic.w	r3, r3, #4
 8005fc8:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 8005fca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005fd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fd8:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 8005fda:	f7ff ff49 	bl	8005e70 <Capture_TIM2_Ch2_Callback>
}
 8005fde:	e032      	b.n	8006046 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8005fe0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d012      	beq.n	8006014 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 8005fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ff8:	f023 0308 	bic.w	r3, r3, #8
 8005ffc:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 8005ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006008:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800600c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800600e:	f7ff ff37 	bl	8005e80 <Capture_TIM2_Ch3_Callback>
}
 8006012:	e018      	b.n	8006046 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8006014:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0310 	and.w	r3, r3, #16
 800601e:	2b00      	cmp	r3, #0
 8006020:	d011      	beq.n	8006046 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8006022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800602c:	f023 0310 	bic.w	r3, r3, #16
 8006030:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8006032:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800603c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006040:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8006042:	f7ff ff25 	bl	8005e90 <Capture_TIM2_Ch4_Callback>
}
 8006046:	bf00      	nop
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8006050:	4b31      	ldr	r3, [pc, #196]	; (8006118 <TIM3_IRQHandler+0xcc>)
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d008      	beq.n	800606e <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 800605c:	4b2e      	ldr	r3, [pc, #184]	; (8006118 <TIM3_IRQHandler+0xcc>)
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	4a2d      	ldr	r2, [pc, #180]	; (8006118 <TIM3_IRQHandler+0xcc>)
 8006062:	f023 0301 	bic.w	r3, r3, #1
 8006066:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8006068:	f7fb fece 	bl	8001e08 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 800606c:	e052      	b.n	8006114 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 800606e:	4b2a      	ldr	r3, [pc, #168]	; (8006118 <TIM3_IRQHandler+0xcc>)
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00e      	beq.n	8006098 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 800607a:	4b27      	ldr	r3, [pc, #156]	; (8006118 <TIM3_IRQHandler+0xcc>)
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	4a26      	ldr	r2, [pc, #152]	; (8006118 <TIM3_IRQHandler+0xcc>)
 8006080:	f023 0302 	bic.w	r3, r3, #2
 8006084:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 8006086:	4b24      	ldr	r3, [pc, #144]	; (8006118 <TIM3_IRQHandler+0xcc>)
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	4a23      	ldr	r2, [pc, #140]	; (8006118 <TIM3_IRQHandler+0xcc>)
 800608c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006090:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 8006092:	f7ff ff05 	bl	8005ea0 <Capture_TIM3_Ch1_Callback>
}
 8006096:	e03d      	b.n	8006114 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8006098:	4b1f      	ldr	r3, [pc, #124]	; (8006118 <TIM3_IRQHandler+0xcc>)
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f003 0304 	and.w	r3, r3, #4
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00e      	beq.n	80060c2 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 80060a4:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <TIM3_IRQHandler+0xcc>)
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	4a1b      	ldr	r2, [pc, #108]	; (8006118 <TIM3_IRQHandler+0xcc>)
 80060aa:	f023 0304 	bic.w	r3, r3, #4
 80060ae:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 80060b0:	4b19      	ldr	r3, [pc, #100]	; (8006118 <TIM3_IRQHandler+0xcc>)
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	4a18      	ldr	r2, [pc, #96]	; (8006118 <TIM3_IRQHandler+0xcc>)
 80060b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060ba:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 80060bc:	f7ff fef8 	bl	8005eb0 <Capture_TIM3_Ch2_Callback>
}
 80060c0:	e028      	b.n	8006114 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 80060c2:	4b15      	ldr	r3, [pc, #84]	; (8006118 <TIM3_IRQHandler+0xcc>)
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00e      	beq.n	80060ec <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 80060ce:	4b12      	ldr	r3, [pc, #72]	; (8006118 <TIM3_IRQHandler+0xcc>)
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	4a11      	ldr	r2, [pc, #68]	; (8006118 <TIM3_IRQHandler+0xcc>)
 80060d4:	f023 0308 	bic.w	r3, r3, #8
 80060d8:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 80060da:	4b0f      	ldr	r3, [pc, #60]	; (8006118 <TIM3_IRQHandler+0xcc>)
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	4a0e      	ldr	r2, [pc, #56]	; (8006118 <TIM3_IRQHandler+0xcc>)
 80060e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060e4:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 80060e6:	f7ff feeb 	bl	8005ec0 <Capture_TIM3_Ch3_Callback>
}
 80060ea:	e013      	b.n	8006114 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 80060ec:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <TIM3_IRQHandler+0xcc>)
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	f003 0310 	and.w	r3, r3, #16
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00d      	beq.n	8006114 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 80060f8:	4b07      	ldr	r3, [pc, #28]	; (8006118 <TIM3_IRQHandler+0xcc>)
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	4a06      	ldr	r2, [pc, #24]	; (8006118 <TIM3_IRQHandler+0xcc>)
 80060fe:	f023 0310 	bic.w	r3, r3, #16
 8006102:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8006104:	4b04      	ldr	r3, [pc, #16]	; (8006118 <TIM3_IRQHandler+0xcc>)
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	4a03      	ldr	r2, [pc, #12]	; (8006118 <TIM3_IRQHandler+0xcc>)
 800610a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800610e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8006110:	f7ff fede 	bl	8005ed0 <Capture_TIM3_Ch4_Callback>
}
 8006114:	bf00      	nop
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40000400 	.word	0x40000400

0800611c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8006120:	4b31      	ldr	r3, [pc, #196]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d008      	beq.n	800613e <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 800612c:	4b2e      	ldr	r3, [pc, #184]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	4a2d      	ldr	r2, [pc, #180]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 8006132:	f023 0301 	bic.w	r3, r3, #1
 8006136:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8006138:	f7ff fe82 	bl	8005e40 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 800613c:	e052      	b.n	80061e4 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 800613e:	4b2a      	ldr	r3, [pc, #168]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00e      	beq.n	8006168 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 800614a:	4b27      	ldr	r3, [pc, #156]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	4a26      	ldr	r2, [pc, #152]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 8006150:	f023 0302 	bic.w	r3, r3, #2
 8006154:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8006156:	4b24      	ldr	r3, [pc, #144]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	4a23      	ldr	r2, [pc, #140]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 800615c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006160:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8006162:	f7ff febd 	bl	8005ee0 <Capture_TIM4_Ch1_Callback>
}
 8006166:	e03d      	b.n	80061e4 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8006168:	4b1f      	ldr	r3, [pc, #124]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00e      	beq.n	8006192 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8006174:	4b1c      	ldr	r3, [pc, #112]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	4a1b      	ldr	r2, [pc, #108]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 800617a:	f023 0304 	bic.w	r3, r3, #4
 800617e:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8006180:	4b19      	ldr	r3, [pc, #100]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	4a18      	ldr	r2, [pc, #96]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 8006186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800618a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 800618c:	f7ff fec8 	bl	8005f20 <Capture_TIM5_Ch2_Callback>
}
 8006190:	e028      	b.n	80061e4 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8006192:	4b15      	ldr	r3, [pc, #84]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00e      	beq.n	80061bc <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 800619e:	4b12      	ldr	r3, [pc, #72]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	4a11      	ldr	r2, [pc, #68]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 80061a4:	f023 0308 	bic.w	r3, r3, #8
 80061a8:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 80061aa:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	4a0e      	ldr	r2, [pc, #56]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 80061b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061b4:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 80061b6:	f7ff fe9b 	bl	8005ef0 <Capture_TIM4_Ch3_Callback>
}
 80061ba:	e013      	b.n	80061e4 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 80061bc:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f003 0310 	and.w	r3, r3, #16
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00d      	beq.n	80061e4 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 80061c8:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	4a06      	ldr	r2, [pc, #24]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 80061ce:	f023 0310 	bic.w	r3, r3, #16
 80061d2:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 80061d4:	4b04      	ldr	r3, [pc, #16]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	4a03      	ldr	r2, [pc, #12]	; (80061e8 <TIM4_IRQHandler+0xcc>)
 80061da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061de:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 80061e0:	f7ff fe8e 	bl	8005f00 <Capture_TIM4_Ch4_Callback>
}
 80061e4:	bf00      	nop
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40000800 	.word	0x40000800

080061ec <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 80061f0:	4b31      	ldr	r3, [pc, #196]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 80061fc:	4b2e      	ldr	r3, [pc, #184]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	4a2d      	ldr	r2, [pc, #180]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 8006202:	f023 0301 	bic.w	r3, r3, #1
 8006206:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8006208:	f7ff fe22 	bl	8005e50 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 800620c:	e052      	b.n	80062b4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 800620e:	4b2a      	ldr	r3, [pc, #168]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00e      	beq.n	8006238 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 800621a:	4b27      	ldr	r3, [pc, #156]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	4a26      	ldr	r2, [pc, #152]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 8006220:	f023 0302 	bic.w	r3, r3, #2
 8006224:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8006226:	4b24      	ldr	r3, [pc, #144]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	4a23      	ldr	r2, [pc, #140]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 800622c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006230:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8006232:	f7ff fe6d 	bl	8005f10 <Capture_TIM5_Ch1_Callback>
}
 8006236:	e03d      	b.n	80062b4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8006238:	4b1f      	ldr	r3, [pc, #124]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00e      	beq.n	8006262 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8006244:	4b1c      	ldr	r3, [pc, #112]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	4a1b      	ldr	r2, [pc, #108]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 800624a:	f023 0304 	bic.w	r3, r3, #4
 800624e:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8006250:	4b19      	ldr	r3, [pc, #100]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	4a18      	ldr	r2, [pc, #96]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 8006256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800625a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 800625c:	f7ff fe60 	bl	8005f20 <Capture_TIM5_Ch2_Callback>
}
 8006260:	e028      	b.n	80062b4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8006262:	4b15      	ldr	r3, [pc, #84]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00e      	beq.n	800628c <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 800626e:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	4a11      	ldr	r2, [pc, #68]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 8006274:	f023 0308 	bic.w	r3, r3, #8
 8006278:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 800627a:	4b0f      	ldr	r3, [pc, #60]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	4a0e      	ldr	r2, [pc, #56]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 8006280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006284:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 8006286:	f7ff fe53 	bl	8005f30 <Capture_TIM5_Ch3_Callback>
}
 800628a:	e013      	b.n	80062b4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 800628c:	4b0a      	ldr	r3, [pc, #40]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	f003 0310 	and.w	r3, r3, #16
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00d      	beq.n	80062b4 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8006298:	4b07      	ldr	r3, [pc, #28]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	4a06      	ldr	r2, [pc, #24]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 800629e:	f023 0310 	bic.w	r3, r3, #16
 80062a2:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 80062a4:	4b04      	ldr	r3, [pc, #16]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	4a03      	ldr	r2, [pc, #12]	; (80062b8 <TIM5_IRQHandler+0xcc>)
 80062aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ae:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 80062b0:	f7ff fe46 	bl	8005f40 <Capture_TIM5_Ch4_Callback>
}
 80062b4:	bf00      	nop
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40000c00 	.word	0x40000c00

080062bc <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0201 	bic.w	r2, r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <__NVIC_EnableIRQ>:
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800630e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006312:	2b00      	cmp	r3, #0
 8006314:	db0b      	blt.n	800632e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	f003 021f 	and.w	r2, r3, #31
 800631c:	4907      	ldr	r1, [pc, #28]	; (800633c <__NVIC_EnableIRQ+0x38>)
 800631e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	2001      	movs	r0, #1
 8006326:	fa00 f202 	lsl.w	r2, r0, r2
 800632a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	e000e100 	.word	0xe000e100

08006340 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4618      	mov	r0, r3
 800634e:	f001 f825 	bl	800739c <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 8006352:	4b96      	ldr	r3, [pc, #600]	; (80065ac <extInt_Config+0x26c>)
 8006354:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006358:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	791b      	ldrb	r3, [r3, #4]
 8006360:	2b0f      	cmp	r3, #15
 8006362:	f200 85cd 	bhi.w	8006f00 <extInt_Config+0xbc0>
 8006366:	a201      	add	r2, pc, #4	; (adr r2, 800636c <extInt_Config+0x2c>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	080063ad 	.word	0x080063ad
 8006370:	08006463 	.word	0x08006463
 8006374:	08006519 	.word	0x08006519
 8006378:	080065ef 	.word	0x080065ef
 800637c:	080066a5 	.word	0x080066a5
 8006380:	08006753 	.word	0x08006753
 8006384:	08006819 	.word	0x08006819
 8006388:	080068c1 	.word	0x080068c1
 800638c:	08006969 	.word	0x08006969
 8006390:	08006a11 	.word	0x08006a11
 8006394:	08006ad7 	.word	0x08006ad7
 8006398:	08006b7f 	.word	0x08006b7f
 800639c:	08006c27 	.word	0x08006c27
 80063a0:	08006ced 	.word	0x08006ced
 80063a4:	08006d93 	.word	0x08006d93
 80063a8:	08006e3b 	.word	0x08006e3b
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 80063ac:	4b80      	ldr	r3, [pc, #512]	; (80065b0 <extInt_Config+0x270>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	4a7f      	ldr	r2, [pc, #508]	; (80065b0 <extInt_Config+0x270>)
 80063b2:	f023 030f 	bic.w	r3, r3, #15
 80063b6:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a7d      	ldr	r2, [pc, #500]	; (80065b4 <extInt_Config+0x274>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d105      	bne.n	80063d0 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80063c4:	4b7a      	ldr	r3, [pc, #488]	; (80065b0 <extInt_Config+0x270>)
 80063c6:	4a7a      	ldr	r2, [pc, #488]	; (80065b0 <extInt_Config+0x270>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80063cc:	f000 bd9a 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a78      	ldr	r2, [pc, #480]	; (80065b8 <extInt_Config+0x278>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d107      	bne.n	80063ec <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80063dc:	4b74      	ldr	r3, [pc, #464]	; (80065b0 <extInt_Config+0x270>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	4a73      	ldr	r2, [pc, #460]	; (80065b0 <extInt_Config+0x270>)
 80063e2:	f043 0301 	orr.w	r3, r3, #1
 80063e6:	6093      	str	r3, [r2, #8]
					break;
 80063e8:	f000 bd8c 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a72      	ldr	r2, [pc, #456]	; (80065bc <extInt_Config+0x27c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d107      	bne.n	8006408 <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 80063f8:	4b6d      	ldr	r3, [pc, #436]	; (80065b0 <extInt_Config+0x270>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	4a6c      	ldr	r2, [pc, #432]	; (80065b0 <extInt_Config+0x270>)
 80063fe:	f043 0302 	orr.w	r3, r3, #2
 8006402:	6093      	str	r3, [r2, #8]
					break;
 8006404:	f000 bd7e 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a6c      	ldr	r2, [pc, #432]	; (80065c0 <extInt_Config+0x280>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d107      	bne.n	8006424 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8006414:	4b66      	ldr	r3, [pc, #408]	; (80065b0 <extInt_Config+0x270>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	4a65      	ldr	r2, [pc, #404]	; (80065b0 <extInt_Config+0x270>)
 800641a:	f043 0303 	orr.w	r3, r3, #3
 800641e:	6093      	str	r3, [r2, #8]
					break;
 8006420:	f000 bd70 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a66      	ldr	r2, [pc, #408]	; (80065c4 <extInt_Config+0x284>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d107      	bne.n	8006440 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8006430:	4b5f      	ldr	r3, [pc, #380]	; (80065b0 <extInt_Config+0x270>)
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	4a5e      	ldr	r2, [pc, #376]	; (80065b0 <extInt_Config+0x270>)
 8006436:	f043 0304 	orr.w	r3, r3, #4
 800643a:	6093      	str	r3, [r2, #8]
					break;
 800643c:	f000 bd62 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a60      	ldr	r2, [pc, #384]	; (80065c8 <extInt_Config+0x288>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d107      	bne.n	800645c <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 800644c:	4b58      	ldr	r3, [pc, #352]	; (80065b0 <extInt_Config+0x270>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	4a57      	ldr	r2, [pc, #348]	; (80065b0 <extInt_Config+0x270>)
 8006452:	f043 0307 	orr.w	r3, r3, #7
 8006456:	6093      	str	r3, [r2, #8]
					break;
 8006458:	f000 bd54 	b.w	8006f04 <extInt_Config+0xbc4>
						__NOP();
 800645c:	bf00      	nop
					break;
 800645e:	f000 bd51 	b.w	8006f04 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8006462:	4b53      	ldr	r3, [pc, #332]	; (80065b0 <extInt_Config+0x270>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	4a52      	ldr	r2, [pc, #328]	; (80065b0 <extInt_Config+0x270>)
 8006468:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800646c:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a4f      	ldr	r2, [pc, #316]	; (80065b4 <extInt_Config+0x274>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d105      	bne.n	8006486 <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 800647a:	4b4d      	ldr	r3, [pc, #308]	; (80065b0 <extInt_Config+0x270>)
 800647c:	4a4c      	ldr	r2, [pc, #304]	; (80065b0 <extInt_Config+0x270>)
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006482:	f000 bd3f 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a4a      	ldr	r2, [pc, #296]	; (80065b8 <extInt_Config+0x278>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d107      	bne.n	80064a2 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8006492:	4b47      	ldr	r3, [pc, #284]	; (80065b0 <extInt_Config+0x270>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	4a46      	ldr	r2, [pc, #280]	; (80065b0 <extInt_Config+0x270>)
 8006498:	f043 0310 	orr.w	r3, r3, #16
 800649c:	6093      	str	r3, [r2, #8]
					break;
 800649e:	f000 bd31 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a44      	ldr	r2, [pc, #272]	; (80065bc <extInt_Config+0x27c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d107      	bne.n	80064be <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80064ae:	4b40      	ldr	r3, [pc, #256]	; (80065b0 <extInt_Config+0x270>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	4a3f      	ldr	r2, [pc, #252]	; (80065b0 <extInt_Config+0x270>)
 80064b4:	f043 0320 	orr.w	r3, r3, #32
 80064b8:	6093      	str	r3, [r2, #8]
					break;
 80064ba:	f000 bd23 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a3e      	ldr	r2, [pc, #248]	; (80065c0 <extInt_Config+0x280>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d107      	bne.n	80064da <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80064ca:	4b39      	ldr	r3, [pc, #228]	; (80065b0 <extInt_Config+0x270>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	4a38      	ldr	r2, [pc, #224]	; (80065b0 <extInt_Config+0x270>)
 80064d0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80064d4:	6093      	str	r3, [r2, #8]
					break;
 80064d6:	f000 bd15 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a38      	ldr	r2, [pc, #224]	; (80065c4 <extInt_Config+0x284>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d107      	bne.n	80064f6 <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 80064e6:	4b32      	ldr	r3, [pc, #200]	; (80065b0 <extInt_Config+0x270>)
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	4a31      	ldr	r2, [pc, #196]	; (80065b0 <extInt_Config+0x270>)
 80064ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f0:	6093      	str	r3, [r2, #8]
					break;
 80064f2:	f000 bd07 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a32      	ldr	r2, [pc, #200]	; (80065c8 <extInt_Config+0x288>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d107      	bne.n	8006512 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8006502:	4b2b      	ldr	r3, [pc, #172]	; (80065b0 <extInt_Config+0x270>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	4a2a      	ldr	r2, [pc, #168]	; (80065b0 <extInt_Config+0x270>)
 8006508:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800650c:	6093      	str	r3, [r2, #8]
					break;
 800650e:	f000 bcf9 	b.w	8006f04 <extInt_Config+0xbc4>
						__NOP();
 8006512:	bf00      	nop
					break;
 8006514:	f000 bcf6 	b.w	8006f04 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8006518:	4b25      	ldr	r3, [pc, #148]	; (80065b0 <extInt_Config+0x270>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	4a24      	ldr	r2, [pc, #144]	; (80065b0 <extInt_Config+0x270>)
 800651e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006522:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a22      	ldr	r2, [pc, #136]	; (80065b4 <extInt_Config+0x274>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d105      	bne.n	800653c <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8006530:	4b1f      	ldr	r3, [pc, #124]	; (80065b0 <extInt_Config+0x270>)
 8006532:	4a1f      	ldr	r2, [pc, #124]	; (80065b0 <extInt_Config+0x270>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006538:	f000 bce4 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a1d      	ldr	r2, [pc, #116]	; (80065b8 <extInt_Config+0x278>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d107      	bne.n	8006558 <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8006548:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <extInt_Config+0x270>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	4a18      	ldr	r2, [pc, #96]	; (80065b0 <extInt_Config+0x270>)
 800654e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006552:	6093      	str	r3, [r2, #8]
					break;
 8006554:	f000 bcd6 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a17      	ldr	r2, [pc, #92]	; (80065bc <extInt_Config+0x27c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d107      	bne.n	8006574 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8006564:	4b12      	ldr	r3, [pc, #72]	; (80065b0 <extInt_Config+0x270>)
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	4a11      	ldr	r2, [pc, #68]	; (80065b0 <extInt_Config+0x270>)
 800656a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800656e:	6093      	str	r3, [r2, #8]
					break;
 8006570:	f000 bcc8 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a11      	ldr	r2, [pc, #68]	; (80065c0 <extInt_Config+0x280>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d107      	bne.n	8006590 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8006580:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <extInt_Config+0x270>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	4a0a      	ldr	r2, [pc, #40]	; (80065b0 <extInt_Config+0x270>)
 8006586:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800658a:	6093      	str	r3, [r2, #8]
					break;
 800658c:	f000 bcba 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a0b      	ldr	r2, [pc, #44]	; (80065c4 <extInt_Config+0x284>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d117      	bne.n	80065cc <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 800659c:	4b04      	ldr	r3, [pc, #16]	; (80065b0 <extInt_Config+0x270>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	4a03      	ldr	r2, [pc, #12]	; (80065b0 <extInt_Config+0x270>)
 80065a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065a6:	6093      	str	r3, [r2, #8]
					break;
 80065a8:	f000 bcac 	b.w	8006f04 <extInt_Config+0xbc4>
 80065ac:	40023800 	.word	0x40023800
 80065b0:	40013800 	.word	0x40013800
 80065b4:	40020000 	.word	0x40020000
 80065b8:	40020400 	.word	0x40020400
 80065bc:	40020800 	.word	0x40020800
 80065c0:	40020c00 	.word	0x40020c00
 80065c4:	40021000 	.word	0x40021000
 80065c8:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a8a      	ldr	r2, [pc, #552]	; (80067fc <extInt_Config+0x4bc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d107      	bne.n	80065e8 <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80065d8:	4b89      	ldr	r3, [pc, #548]	; (8006800 <extInt_Config+0x4c0>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	4a88      	ldr	r2, [pc, #544]	; (8006800 <extInt_Config+0x4c0>)
 80065de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80065e2:	6093      	str	r3, [r2, #8]
					break;
 80065e4:	f000 bc8e 	b.w	8006f04 <extInt_Config+0xbc4>
						__NOP();
 80065e8:	bf00      	nop
					break;
 80065ea:	f000 bc8b 	b.w	8006f04 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 80065ee:	4b84      	ldr	r3, [pc, #528]	; (8006800 <extInt_Config+0x4c0>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	4a83      	ldr	r2, [pc, #524]	; (8006800 <extInt_Config+0x4c0>)
 80065f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065f8:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a80      	ldr	r2, [pc, #512]	; (8006804 <extInt_Config+0x4c4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d105      	bne.n	8006612 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8006606:	4b7e      	ldr	r3, [pc, #504]	; (8006800 <extInt_Config+0x4c0>)
 8006608:	4a7d      	ldr	r2, [pc, #500]	; (8006800 <extInt_Config+0x4c0>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 800660e:	f000 bc79 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a7b      	ldr	r2, [pc, #492]	; (8006808 <extInt_Config+0x4c8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d107      	bne.n	800662e <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 800661e:	4b78      	ldr	r3, [pc, #480]	; (8006800 <extInt_Config+0x4c0>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	4a77      	ldr	r2, [pc, #476]	; (8006800 <extInt_Config+0x4c0>)
 8006624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006628:	6093      	str	r3, [r2, #8]
					break;
 800662a:	f000 bc6b 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a75      	ldr	r2, [pc, #468]	; (800680c <extInt_Config+0x4cc>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d107      	bne.n	800664a <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 800663a:	4b71      	ldr	r3, [pc, #452]	; (8006800 <extInt_Config+0x4c0>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	4a70      	ldr	r2, [pc, #448]	; (8006800 <extInt_Config+0x4c0>)
 8006640:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006644:	6093      	str	r3, [r2, #8]
					break;
 8006646:	f000 bc5d 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a6f      	ldr	r2, [pc, #444]	; (8006810 <extInt_Config+0x4d0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d107      	bne.n	8006666 <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8006656:	4b6a      	ldr	r3, [pc, #424]	; (8006800 <extInt_Config+0x4c0>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	4a69      	ldr	r2, [pc, #420]	; (8006800 <extInt_Config+0x4c0>)
 800665c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006660:	6093      	str	r3, [r2, #8]
					break;
 8006662:	f000 bc4f 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a69      	ldr	r2, [pc, #420]	; (8006814 <extInt_Config+0x4d4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d107      	bne.n	8006682 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8006672:	4b63      	ldr	r3, [pc, #396]	; (8006800 <extInt_Config+0x4c0>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	4a62      	ldr	r2, [pc, #392]	; (8006800 <extInt_Config+0x4c0>)
 8006678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800667c:	6093      	str	r3, [r2, #8]
					break;
 800667e:	f000 bc41 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a5c      	ldr	r2, [pc, #368]	; (80067fc <extInt_Config+0x4bc>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d107      	bne.n	800669e <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 800668e:	4b5c      	ldr	r3, [pc, #368]	; (8006800 <extInt_Config+0x4c0>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	4a5b      	ldr	r2, [pc, #364]	; (8006800 <extInt_Config+0x4c0>)
 8006694:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006698:	6093      	str	r3, [r2, #8]
					break;
 800669a:	f000 bc33 	b.w	8006f04 <extInt_Config+0xbc4>
						__NOP();
 800669e:	bf00      	nop
					break;
 80066a0:	f000 bc30 	b.w	8006f04 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 80066a4:	4b56      	ldr	r3, [pc, #344]	; (8006800 <extInt_Config+0x4c0>)
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	4a55      	ldr	r2, [pc, #340]	; (8006800 <extInt_Config+0x4c0>)
 80066aa:	f023 030f 	bic.w	r3, r3, #15
 80066ae:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a53      	ldr	r2, [pc, #332]	; (8006804 <extInt_Config+0x4c4>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d105      	bne.n	80066c8 <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80066bc:	4b50      	ldr	r3, [pc, #320]	; (8006800 <extInt_Config+0x4c0>)
 80066be:	4a50      	ldr	r2, [pc, #320]	; (8006800 <extInt_Config+0x4c0>)
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80066c4:	f000 bc1e 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a4e      	ldr	r2, [pc, #312]	; (8006808 <extInt_Config+0x4c8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d107      	bne.n	80066e4 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80066d4:	4b4a      	ldr	r3, [pc, #296]	; (8006800 <extInt_Config+0x4c0>)
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	4a49      	ldr	r2, [pc, #292]	; (8006800 <extInt_Config+0x4c0>)
 80066da:	f043 0301 	orr.w	r3, r3, #1
 80066de:	60d3      	str	r3, [r2, #12]
					break;
 80066e0:	f000 bc10 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a48      	ldr	r2, [pc, #288]	; (800680c <extInt_Config+0x4cc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d107      	bne.n	8006700 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 80066f0:	4b43      	ldr	r3, [pc, #268]	; (8006800 <extInt_Config+0x4c0>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	4a42      	ldr	r2, [pc, #264]	; (8006800 <extInt_Config+0x4c0>)
 80066f6:	f043 0302 	orr.w	r3, r3, #2
 80066fa:	60d3      	str	r3, [r2, #12]
					break;
 80066fc:	f000 bc02 	b.w	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a42      	ldr	r2, [pc, #264]	; (8006810 <extInt_Config+0x4d0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d106      	bne.n	800671a <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 800670c:	4b3c      	ldr	r3, [pc, #240]	; (8006800 <extInt_Config+0x4c0>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	4a3b      	ldr	r2, [pc, #236]	; (8006800 <extInt_Config+0x4c0>)
 8006712:	f043 0303 	orr.w	r3, r3, #3
 8006716:	60d3      	str	r3, [r2, #12]
					break;
 8006718:	e3f4      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a3c      	ldr	r2, [pc, #240]	; (8006814 <extInt_Config+0x4d4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d106      	bne.n	8006734 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8006726:	4b36      	ldr	r3, [pc, #216]	; (8006800 <extInt_Config+0x4c0>)
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	4a35      	ldr	r2, [pc, #212]	; (8006800 <extInt_Config+0x4c0>)
 800672c:	f043 0304 	orr.w	r3, r3, #4
 8006730:	60d3      	str	r3, [r2, #12]
					break;
 8006732:	e3e7      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a30      	ldr	r2, [pc, #192]	; (80067fc <extInt_Config+0x4bc>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d106      	bne.n	800674e <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8006740:	4b2f      	ldr	r3, [pc, #188]	; (8006800 <extInt_Config+0x4c0>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	4a2e      	ldr	r2, [pc, #184]	; (8006800 <extInt_Config+0x4c0>)
 8006746:	f043 0307 	orr.w	r3, r3, #7
 800674a:	60d3      	str	r3, [r2, #12]
					break;
 800674c:	e3da      	b.n	8006f04 <extInt_Config+0xbc4>
						__NOP();
 800674e:	bf00      	nop
					break;
 8006750:	e3d8      	b.n	8006f04 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8006752:	4b2b      	ldr	r3, [pc, #172]	; (8006800 <extInt_Config+0x4c0>)
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	4a2a      	ldr	r2, [pc, #168]	; (8006800 <extInt_Config+0x4c0>)
 8006758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800675c:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a27      	ldr	r2, [pc, #156]	; (8006804 <extInt_Config+0x4c4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d104      	bne.n	8006774 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 800676a:	4b25      	ldr	r3, [pc, #148]	; (8006800 <extInt_Config+0x4c0>)
 800676c:	4a24      	ldr	r2, [pc, #144]	; (8006800 <extInt_Config+0x4c0>)
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006772:	e3c7      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a23      	ldr	r2, [pc, #140]	; (8006808 <extInt_Config+0x4c8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d106      	bne.n	800678e <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8006780:	4b1f      	ldr	r3, [pc, #124]	; (8006800 <extInt_Config+0x4c0>)
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	4a1e      	ldr	r2, [pc, #120]	; (8006800 <extInt_Config+0x4c0>)
 8006786:	f043 0310 	orr.w	r3, r3, #16
 800678a:	60d3      	str	r3, [r2, #12]
					break;
 800678c:	e3ba      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a1d      	ldr	r2, [pc, #116]	; (800680c <extInt_Config+0x4cc>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d106      	bne.n	80067a8 <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 800679a:	4b19      	ldr	r3, [pc, #100]	; (8006800 <extInt_Config+0x4c0>)
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	4a18      	ldr	r2, [pc, #96]	; (8006800 <extInt_Config+0x4c0>)
 80067a0:	f043 0320 	orr.w	r3, r3, #32
 80067a4:	60d3      	str	r3, [r2, #12]
					break;
 80067a6:	e3ad      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a18      	ldr	r2, [pc, #96]	; (8006810 <extInt_Config+0x4d0>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d106      	bne.n	80067c2 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80067b4:	4b12      	ldr	r3, [pc, #72]	; (8006800 <extInt_Config+0x4c0>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	4a11      	ldr	r2, [pc, #68]	; (8006800 <extInt_Config+0x4c0>)
 80067ba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80067be:	60d3      	str	r3, [r2, #12]
					break;
 80067c0:	e3a0      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a12      	ldr	r2, [pc, #72]	; (8006814 <extInt_Config+0x4d4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d106      	bne.n	80067dc <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80067ce:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <extInt_Config+0x4c0>)
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	4a0b      	ldr	r2, [pc, #44]	; (8006800 <extInt_Config+0x4c0>)
 80067d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067d8:	60d3      	str	r3, [r2, #12]
					break;
 80067da:	e393      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a06      	ldr	r2, [pc, #24]	; (80067fc <extInt_Config+0x4bc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d106      	bne.n	80067f6 <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <extInt_Config+0x4c0>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	4a04      	ldr	r2, [pc, #16]	; (8006800 <extInt_Config+0x4c0>)
 80067ee:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80067f2:	60d3      	str	r3, [r2, #12]
					break;
 80067f4:	e386      	b.n	8006f04 <extInt_Config+0xbc4>
						__NOP();
 80067f6:	bf00      	nop
					break;
 80067f8:	e384      	b.n	8006f04 <extInt_Config+0xbc4>
 80067fa:	bf00      	nop
 80067fc:	40021c00 	.word	0x40021c00
 8006800:	40013800 	.word	0x40013800
 8006804:	40020000 	.word	0x40020000
 8006808:	40020400 	.word	0x40020400
 800680c:	40020800 	.word	0x40020800
 8006810:	40020c00 	.word	0x40020c00
 8006814:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8006818:	4b86      	ldr	r3, [pc, #536]	; (8006a34 <extInt_Config+0x6f4>)
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	4a85      	ldr	r2, [pc, #532]	; (8006a34 <extInt_Config+0x6f4>)
 800681e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006822:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a83      	ldr	r2, [pc, #524]	; (8006a38 <extInt_Config+0x6f8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d104      	bne.n	800683a <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8006830:	4b80      	ldr	r3, [pc, #512]	; (8006a34 <extInt_Config+0x6f4>)
 8006832:	4a80      	ldr	r2, [pc, #512]	; (8006a34 <extInt_Config+0x6f4>)
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006838:	e364      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a7e      	ldr	r2, [pc, #504]	; (8006a3c <extInt_Config+0x6fc>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d106      	bne.n	8006854 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8006846:	4b7b      	ldr	r3, [pc, #492]	; (8006a34 <extInt_Config+0x6f4>)
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	4a7a      	ldr	r2, [pc, #488]	; (8006a34 <extInt_Config+0x6f4>)
 800684c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006850:	60d3      	str	r3, [r2, #12]
					break;
 8006852:	e357      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a79      	ldr	r2, [pc, #484]	; (8006a40 <extInt_Config+0x700>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d106      	bne.n	800686e <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8006860:	4b74      	ldr	r3, [pc, #464]	; (8006a34 <extInt_Config+0x6f4>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	4a73      	ldr	r2, [pc, #460]	; (8006a34 <extInt_Config+0x6f4>)
 8006866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800686a:	60d3      	str	r3, [r2, #12]
					break;
 800686c:	e34a      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a73      	ldr	r2, [pc, #460]	; (8006a44 <extInt_Config+0x704>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d106      	bne.n	8006888 <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800687a:	4b6e      	ldr	r3, [pc, #440]	; (8006a34 <extInt_Config+0x6f4>)
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	4a6d      	ldr	r2, [pc, #436]	; (8006a34 <extInt_Config+0x6f4>)
 8006880:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006884:	60d3      	str	r3, [r2, #12]
					break;
 8006886:	e33d      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a6e      	ldr	r2, [pc, #440]	; (8006a48 <extInt_Config+0x708>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d106      	bne.n	80068a2 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8006894:	4b67      	ldr	r3, [pc, #412]	; (8006a34 <extInt_Config+0x6f4>)
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	4a66      	ldr	r2, [pc, #408]	; (8006a34 <extInt_Config+0x6f4>)
 800689a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800689e:	60d3      	str	r3, [r2, #12]
					break;
 80068a0:	e330      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a68      	ldr	r2, [pc, #416]	; (8006a4c <extInt_Config+0x70c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d106      	bne.n	80068bc <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80068ae:	4b61      	ldr	r3, [pc, #388]	; (8006a34 <extInt_Config+0x6f4>)
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	4a60      	ldr	r2, [pc, #384]	; (8006a34 <extInt_Config+0x6f4>)
 80068b4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80068b8:	60d3      	str	r3, [r2, #12]
					break;
 80068ba:	e323      	b.n	8006f04 <extInt_Config+0xbc4>
						__NOP();
 80068bc:	bf00      	nop
					break;
 80068be:	e321      	b.n	8006f04 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 80068c0:	4b5c      	ldr	r3, [pc, #368]	; (8006a34 <extInt_Config+0x6f4>)
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	4a5b      	ldr	r2, [pc, #364]	; (8006a34 <extInt_Config+0x6f4>)
 80068c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068ca:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a59      	ldr	r2, [pc, #356]	; (8006a38 <extInt_Config+0x6f8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d104      	bne.n	80068e2 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80068d8:	4b56      	ldr	r3, [pc, #344]	; (8006a34 <extInt_Config+0x6f4>)
 80068da:	4a56      	ldr	r2, [pc, #344]	; (8006a34 <extInt_Config+0x6f4>)
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80068e0:	e310      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a54      	ldr	r2, [pc, #336]	; (8006a3c <extInt_Config+0x6fc>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d106      	bne.n	80068fc <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 80068ee:	4b51      	ldr	r3, [pc, #324]	; (8006a34 <extInt_Config+0x6f4>)
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	4a50      	ldr	r2, [pc, #320]	; (8006a34 <extInt_Config+0x6f4>)
 80068f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068f8:	60d3      	str	r3, [r2, #12]
					break;
 80068fa:	e303      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a4f      	ldr	r2, [pc, #316]	; (8006a40 <extInt_Config+0x700>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d106      	bne.n	8006916 <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8006908:	4b4a      	ldr	r3, [pc, #296]	; (8006a34 <extInt_Config+0x6f4>)
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	4a49      	ldr	r2, [pc, #292]	; (8006a34 <extInt_Config+0x6f4>)
 800690e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006912:	60d3      	str	r3, [r2, #12]
					break;
 8006914:	e2f6      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a49      	ldr	r2, [pc, #292]	; (8006a44 <extInt_Config+0x704>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d106      	bne.n	8006930 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8006922:	4b44      	ldr	r3, [pc, #272]	; (8006a34 <extInt_Config+0x6f4>)
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	4a43      	ldr	r2, [pc, #268]	; (8006a34 <extInt_Config+0x6f4>)
 8006928:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800692c:	60d3      	str	r3, [r2, #12]
					break;
 800692e:	e2e9      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a44      	ldr	r2, [pc, #272]	; (8006a48 <extInt_Config+0x708>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d106      	bne.n	800694a <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 800693c:	4b3d      	ldr	r3, [pc, #244]	; (8006a34 <extInt_Config+0x6f4>)
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	4a3c      	ldr	r2, [pc, #240]	; (8006a34 <extInt_Config+0x6f4>)
 8006942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006946:	60d3      	str	r3, [r2, #12]
					break;
 8006948:	e2dc      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a3e      	ldr	r2, [pc, #248]	; (8006a4c <extInt_Config+0x70c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d106      	bne.n	8006964 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8006956:	4b37      	ldr	r3, [pc, #220]	; (8006a34 <extInt_Config+0x6f4>)
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	4a36      	ldr	r2, [pc, #216]	; (8006a34 <extInt_Config+0x6f4>)
 800695c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006960:	60d3      	str	r3, [r2, #12]
					break;
 8006962:	e2cf      	b.n	8006f04 <extInt_Config+0xbc4>
						__NOP();
 8006964:	bf00      	nop
					break;
 8006966:	e2cd      	b.n	8006f04 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8006968:	4b32      	ldr	r3, [pc, #200]	; (8006a34 <extInt_Config+0x6f4>)
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	4a31      	ldr	r2, [pc, #196]	; (8006a34 <extInt_Config+0x6f4>)
 800696e:	f023 030f 	bic.w	r3, r3, #15
 8006972:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a2f      	ldr	r2, [pc, #188]	; (8006a38 <extInt_Config+0x6f8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d104      	bne.n	800698a <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8006980:	4b2c      	ldr	r3, [pc, #176]	; (8006a34 <extInt_Config+0x6f4>)
 8006982:	4a2c      	ldr	r2, [pc, #176]	; (8006a34 <extInt_Config+0x6f4>)
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006988:	e2bc      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a2a      	ldr	r2, [pc, #168]	; (8006a3c <extInt_Config+0x6fc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d106      	bne.n	80069a4 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8006996:	4b27      	ldr	r3, [pc, #156]	; (8006a34 <extInt_Config+0x6f4>)
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	4a26      	ldr	r2, [pc, #152]	; (8006a34 <extInt_Config+0x6f4>)
 800699c:	f043 0301 	orr.w	r3, r3, #1
 80069a0:	6113      	str	r3, [r2, #16]
					break;
 80069a2:	e2af      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a25      	ldr	r2, [pc, #148]	; (8006a40 <extInt_Config+0x700>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d106      	bne.n	80069be <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 80069b0:	4b20      	ldr	r3, [pc, #128]	; (8006a34 <extInt_Config+0x6f4>)
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	4a1f      	ldr	r2, [pc, #124]	; (8006a34 <extInt_Config+0x6f4>)
 80069b6:	f043 0302 	orr.w	r3, r3, #2
 80069ba:	6113      	str	r3, [r2, #16]
					break;
 80069bc:	e2a2      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1f      	ldr	r2, [pc, #124]	; (8006a44 <extInt_Config+0x704>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d106      	bne.n	80069d8 <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 80069ca:	4b1a      	ldr	r3, [pc, #104]	; (8006a34 <extInt_Config+0x6f4>)
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	4a19      	ldr	r2, [pc, #100]	; (8006a34 <extInt_Config+0x6f4>)
 80069d0:	f043 0303 	orr.w	r3, r3, #3
 80069d4:	6113      	str	r3, [r2, #16]
					break;
 80069d6:	e295      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a1a      	ldr	r2, [pc, #104]	; (8006a48 <extInt_Config+0x708>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d106      	bne.n	80069f2 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 80069e4:	4b13      	ldr	r3, [pc, #76]	; (8006a34 <extInt_Config+0x6f4>)
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	4a12      	ldr	r2, [pc, #72]	; (8006a34 <extInt_Config+0x6f4>)
 80069ea:	f043 0304 	orr.w	r3, r3, #4
 80069ee:	6113      	str	r3, [r2, #16]
					break;
 80069f0:	e288      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a14      	ldr	r2, [pc, #80]	; (8006a4c <extInt_Config+0x70c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d106      	bne.n	8006a0c <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 80069fe:	4b0d      	ldr	r3, [pc, #52]	; (8006a34 <extInt_Config+0x6f4>)
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	4a0c      	ldr	r2, [pc, #48]	; (8006a34 <extInt_Config+0x6f4>)
 8006a04:	f043 0307 	orr.w	r3, r3, #7
 8006a08:	6113      	str	r3, [r2, #16]
					break;
 8006a0a:	e27b      	b.n	8006f04 <extInt_Config+0xbc4>
						__NOP();
 8006a0c:	bf00      	nop
					break;
 8006a0e:	e279      	b.n	8006f04 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8006a10:	4b08      	ldr	r3, [pc, #32]	; (8006a34 <extInt_Config+0x6f4>)
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	4a07      	ldr	r2, [pc, #28]	; (8006a34 <extInt_Config+0x6f4>)
 8006a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a1a:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a05      	ldr	r2, [pc, #20]	; (8006a38 <extInt_Config+0x6f8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d113      	bne.n	8006a50 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8006a28:	4b02      	ldr	r3, [pc, #8]	; (8006a34 <extInt_Config+0x6f4>)
 8006a2a:	4a02      	ldr	r2, [pc, #8]	; (8006a34 <extInt_Config+0x6f4>)
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006a30:	e268      	b.n	8006f04 <extInt_Config+0xbc4>
 8006a32:	bf00      	nop
 8006a34:	40013800 	.word	0x40013800
 8006a38:	40020000 	.word	0x40020000
 8006a3c:	40020400 	.word	0x40020400
 8006a40:	40020800 	.word	0x40020800
 8006a44:	40020c00 	.word	0x40020c00
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a83      	ldr	r2, [pc, #524]	; (8006c64 <extInt_Config+0x924>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d106      	bne.n	8006a6a <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8006a5c:	4b82      	ldr	r3, [pc, #520]	; (8006c68 <extInt_Config+0x928>)
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	4a81      	ldr	r2, [pc, #516]	; (8006c68 <extInt_Config+0x928>)
 8006a62:	f043 0310 	orr.w	r3, r3, #16
 8006a66:	6113      	str	r3, [r2, #16]
					break;
 8006a68:	e24c      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a7e      	ldr	r2, [pc, #504]	; (8006c6c <extInt_Config+0x92c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d106      	bne.n	8006a84 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8006a76:	4b7c      	ldr	r3, [pc, #496]	; (8006c68 <extInt_Config+0x928>)
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	4a7b      	ldr	r2, [pc, #492]	; (8006c68 <extInt_Config+0x928>)
 8006a7c:	f043 0320 	orr.w	r3, r3, #32
 8006a80:	6113      	str	r3, [r2, #16]
					break;
 8006a82:	e23f      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a79      	ldr	r2, [pc, #484]	; (8006c70 <extInt_Config+0x930>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d106      	bne.n	8006a9e <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8006a90:	4b75      	ldr	r3, [pc, #468]	; (8006c68 <extInt_Config+0x928>)
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	4a74      	ldr	r2, [pc, #464]	; (8006c68 <extInt_Config+0x928>)
 8006a96:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006a9a:	6113      	str	r3, [r2, #16]
					break;
 8006a9c:	e232      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a73      	ldr	r2, [pc, #460]	; (8006c74 <extInt_Config+0x934>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d106      	bne.n	8006ab8 <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8006aaa:	4b6f      	ldr	r3, [pc, #444]	; (8006c68 <extInt_Config+0x928>)
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	4a6e      	ldr	r2, [pc, #440]	; (8006c68 <extInt_Config+0x928>)
 8006ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ab4:	6113      	str	r3, [r2, #16]
					break;
 8006ab6:	e225      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a6e      	ldr	r2, [pc, #440]	; (8006c78 <extInt_Config+0x938>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d106      	bne.n	8006ad2 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8006ac4:	4b68      	ldr	r3, [pc, #416]	; (8006c68 <extInt_Config+0x928>)
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	4a67      	ldr	r2, [pc, #412]	; (8006c68 <extInt_Config+0x928>)
 8006aca:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006ace:	6113      	str	r3, [r2, #16]
					break;
 8006ad0:	e218      	b.n	8006f04 <extInt_Config+0xbc4>
						__NOP();
 8006ad2:	bf00      	nop
					break;
 8006ad4:	e216      	b.n	8006f04 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8006ad6:	4b64      	ldr	r3, [pc, #400]	; (8006c68 <extInt_Config+0x928>)
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	4a63      	ldr	r2, [pc, #396]	; (8006c68 <extInt_Config+0x928>)
 8006adc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ae0:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a64      	ldr	r2, [pc, #400]	; (8006c7c <extInt_Config+0x93c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d104      	bne.n	8006af8 <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8006aee:	4b5e      	ldr	r3, [pc, #376]	; (8006c68 <extInt_Config+0x928>)
 8006af0:	4a5d      	ldr	r2, [pc, #372]	; (8006c68 <extInt_Config+0x928>)
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006af6:	e205      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a59      	ldr	r2, [pc, #356]	; (8006c64 <extInt_Config+0x924>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d106      	bne.n	8006b12 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8006b04:	4b58      	ldr	r3, [pc, #352]	; (8006c68 <extInt_Config+0x928>)
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	4a57      	ldr	r2, [pc, #348]	; (8006c68 <extInt_Config+0x928>)
 8006b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b0e:	6113      	str	r3, [r2, #16]
					break;
 8006b10:	e1f8      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a54      	ldr	r2, [pc, #336]	; (8006c6c <extInt_Config+0x92c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d106      	bne.n	8006b2c <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8006b1e:	4b52      	ldr	r3, [pc, #328]	; (8006c68 <extInt_Config+0x928>)
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	4a51      	ldr	r2, [pc, #324]	; (8006c68 <extInt_Config+0x928>)
 8006b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b28:	6113      	str	r3, [r2, #16]
					break;
 8006b2a:	e1eb      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a4f      	ldr	r2, [pc, #316]	; (8006c70 <extInt_Config+0x930>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d106      	bne.n	8006b46 <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8006b38:	4b4b      	ldr	r3, [pc, #300]	; (8006c68 <extInt_Config+0x928>)
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	4a4a      	ldr	r2, [pc, #296]	; (8006c68 <extInt_Config+0x928>)
 8006b3e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006b42:	6113      	str	r3, [r2, #16]
					break;
 8006b44:	e1de      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a49      	ldr	r2, [pc, #292]	; (8006c74 <extInt_Config+0x934>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d106      	bne.n	8006b60 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8006b52:	4b45      	ldr	r3, [pc, #276]	; (8006c68 <extInt_Config+0x928>)
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	4a44      	ldr	r2, [pc, #272]	; (8006c68 <extInt_Config+0x928>)
 8006b58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b5c:	6113      	str	r3, [r2, #16]
					break;
 8006b5e:	e1d1      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a44      	ldr	r2, [pc, #272]	; (8006c78 <extInt_Config+0x938>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d106      	bne.n	8006b7a <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8006b6c:	4b3e      	ldr	r3, [pc, #248]	; (8006c68 <extInt_Config+0x928>)
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	4a3d      	ldr	r2, [pc, #244]	; (8006c68 <extInt_Config+0x928>)
 8006b72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006b76:	6113      	str	r3, [r2, #16]
					break;
 8006b78:	e1c4      	b.n	8006f04 <extInt_Config+0xbc4>
						__NOP();
 8006b7a:	bf00      	nop
					break;
 8006b7c:	e1c2      	b.n	8006f04 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8006b7e:	4b3a      	ldr	r3, [pc, #232]	; (8006c68 <extInt_Config+0x928>)
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	4a39      	ldr	r2, [pc, #228]	; (8006c68 <extInt_Config+0x928>)
 8006b84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b88:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a3a      	ldr	r2, [pc, #232]	; (8006c7c <extInt_Config+0x93c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d104      	bne.n	8006ba0 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8006b96:	4b34      	ldr	r3, [pc, #208]	; (8006c68 <extInt_Config+0x928>)
 8006b98:	4a33      	ldr	r2, [pc, #204]	; (8006c68 <extInt_Config+0x928>)
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006b9e:	e1b1      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a2f      	ldr	r2, [pc, #188]	; (8006c64 <extInt_Config+0x924>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d106      	bne.n	8006bba <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8006bac:	4b2e      	ldr	r3, [pc, #184]	; (8006c68 <extInt_Config+0x928>)
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	4a2d      	ldr	r2, [pc, #180]	; (8006c68 <extInt_Config+0x928>)
 8006bb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bb6:	6113      	str	r3, [r2, #16]
					break;
 8006bb8:	e1a4      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a2a      	ldr	r2, [pc, #168]	; (8006c6c <extInt_Config+0x92c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d106      	bne.n	8006bd4 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8006bc6:	4b28      	ldr	r3, [pc, #160]	; (8006c68 <extInt_Config+0x928>)
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	4a27      	ldr	r2, [pc, #156]	; (8006c68 <extInt_Config+0x928>)
 8006bcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006bd0:	6113      	str	r3, [r2, #16]
					break;
 8006bd2:	e197      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a25      	ldr	r2, [pc, #148]	; (8006c70 <extInt_Config+0x930>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d106      	bne.n	8006bee <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8006be0:	4b21      	ldr	r3, [pc, #132]	; (8006c68 <extInt_Config+0x928>)
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	4a20      	ldr	r2, [pc, #128]	; (8006c68 <extInt_Config+0x928>)
 8006be6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006bea:	6113      	str	r3, [r2, #16]
					break;
 8006bec:	e18a      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a1f      	ldr	r2, [pc, #124]	; (8006c74 <extInt_Config+0x934>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d106      	bne.n	8006c08 <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8006bfa:	4b1b      	ldr	r3, [pc, #108]	; (8006c68 <extInt_Config+0x928>)
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	4a1a      	ldr	r2, [pc, #104]	; (8006c68 <extInt_Config+0x928>)
 8006c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c04:	6113      	str	r3, [r2, #16]
					break;
 8006c06:	e17d      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a1a      	ldr	r2, [pc, #104]	; (8006c78 <extInt_Config+0x938>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d106      	bne.n	8006c22 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8006c14:	4b14      	ldr	r3, [pc, #80]	; (8006c68 <extInt_Config+0x928>)
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	4a13      	ldr	r2, [pc, #76]	; (8006c68 <extInt_Config+0x928>)
 8006c1a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006c1e:	6113      	str	r3, [r2, #16]
					break;
 8006c20:	e170      	b.n	8006f04 <extInt_Config+0xbc4>
						__NOP();
 8006c22:	bf00      	nop
					break;
 8006c24:	e16e      	b.n	8006f04 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8006c26:	4b10      	ldr	r3, [pc, #64]	; (8006c68 <extInt_Config+0x928>)
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	4a0f      	ldr	r2, [pc, #60]	; (8006c68 <extInt_Config+0x928>)
 8006c2c:	f023 030f 	bic.w	r3, r3, #15
 8006c30:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a10      	ldr	r2, [pc, #64]	; (8006c7c <extInt_Config+0x93c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d104      	bne.n	8006c48 <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8006c3e:	4b0a      	ldr	r3, [pc, #40]	; (8006c68 <extInt_Config+0x928>)
 8006c40:	4a09      	ldr	r2, [pc, #36]	; (8006c68 <extInt_Config+0x928>)
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8006c46:	e15d      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a05      	ldr	r2, [pc, #20]	; (8006c64 <extInt_Config+0x924>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d115      	bne.n	8006c80 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8006c54:	4b04      	ldr	r3, [pc, #16]	; (8006c68 <extInt_Config+0x928>)
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	4a03      	ldr	r2, [pc, #12]	; (8006c68 <extInt_Config+0x928>)
 8006c5a:	f043 0301 	orr.w	r3, r3, #1
 8006c5e:	6153      	str	r3, [r2, #20]
					break;
 8006c60:	e150      	b.n	8006f04 <extInt_Config+0xbc4>
 8006c62:	bf00      	nop
 8006c64:	40020400 	.word	0x40020400
 8006c68:	40013800 	.word	0x40013800
 8006c6c:	40020800 	.word	0x40020800
 8006c70:	40020c00 	.word	0x40020c00
 8006c74:	40021000 	.word	0x40021000
 8006c78:	40021c00 	.word	0x40021c00
 8006c7c:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a89      	ldr	r2, [pc, #548]	; (8006eac <extInt_Config+0xb6c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d106      	bne.n	8006c9a <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8006c8c:	4b88      	ldr	r3, [pc, #544]	; (8006eb0 <extInt_Config+0xb70>)
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	4a87      	ldr	r2, [pc, #540]	; (8006eb0 <extInt_Config+0xb70>)
 8006c92:	f043 0302 	orr.w	r3, r3, #2
 8006c96:	6153      	str	r3, [r2, #20]
					break;
 8006c98:	e134      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a84      	ldr	r2, [pc, #528]	; (8006eb4 <extInt_Config+0xb74>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d106      	bne.n	8006cb4 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8006ca6:	4b82      	ldr	r3, [pc, #520]	; (8006eb0 <extInt_Config+0xb70>)
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	4a81      	ldr	r2, [pc, #516]	; (8006eb0 <extInt_Config+0xb70>)
 8006cac:	f043 0303 	orr.w	r3, r3, #3
 8006cb0:	6153      	str	r3, [r2, #20]
					break;
 8006cb2:	e127      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a7f      	ldr	r2, [pc, #508]	; (8006eb8 <extInt_Config+0xb78>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d106      	bne.n	8006cce <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8006cc0:	4b7b      	ldr	r3, [pc, #492]	; (8006eb0 <extInt_Config+0xb70>)
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	4a7a      	ldr	r2, [pc, #488]	; (8006eb0 <extInt_Config+0xb70>)
 8006cc6:	f043 0304 	orr.w	r3, r3, #4
 8006cca:	6153      	str	r3, [r2, #20]
					break;
 8006ccc:	e11a      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a79      	ldr	r2, [pc, #484]	; (8006ebc <extInt_Config+0xb7c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d106      	bne.n	8006ce8 <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8006cda:	4b75      	ldr	r3, [pc, #468]	; (8006eb0 <extInt_Config+0xb70>)
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	4a74      	ldr	r2, [pc, #464]	; (8006eb0 <extInt_Config+0xb70>)
 8006ce0:	f043 0307 	orr.w	r3, r3, #7
 8006ce4:	6153      	str	r3, [r2, #20]
					break;
 8006ce6:	e10d      	b.n	8006f04 <extInt_Config+0xbc4>
						__NOP();
 8006ce8:	bf00      	nop
					break;
 8006cea:	e10b      	b.n	8006f04 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8006cec:	4b70      	ldr	r3, [pc, #448]	; (8006eb0 <extInt_Config+0xb70>)
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	4a6f      	ldr	r2, [pc, #444]	; (8006eb0 <extInt_Config+0xb70>)
 8006cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cf6:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a70      	ldr	r2, [pc, #448]	; (8006ec0 <extInt_Config+0xb80>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d104      	bne.n	8006d0e <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8006d04:	4b6a      	ldr	r3, [pc, #424]	; (8006eb0 <extInt_Config+0xb70>)
 8006d06:	4a6a      	ldr	r2, [pc, #424]	; (8006eb0 <extInt_Config+0xb70>)
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	6153      	str	r3, [r2, #20]
 8006d0c:	e041      	b.n	8006d92 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a6b      	ldr	r2, [pc, #428]	; (8006ec4 <extInt_Config+0xb84>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d106      	bne.n	8006d28 <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8006d1a:	4b65      	ldr	r3, [pc, #404]	; (8006eb0 <extInt_Config+0xb70>)
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	4a64      	ldr	r2, [pc, #400]	; (8006eb0 <extInt_Config+0xb70>)
 8006d20:	f043 0310 	orr.w	r3, r3, #16
 8006d24:	6153      	str	r3, [r2, #20]
 8006d26:	e034      	b.n	8006d92 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a5f      	ldr	r2, [pc, #380]	; (8006eac <extInt_Config+0xb6c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d106      	bne.n	8006d42 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8006d34:	4b5e      	ldr	r3, [pc, #376]	; (8006eb0 <extInt_Config+0xb70>)
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	4a5d      	ldr	r2, [pc, #372]	; (8006eb0 <extInt_Config+0xb70>)
 8006d3a:	f043 0320 	orr.w	r3, r3, #32
 8006d3e:	6153      	str	r3, [r2, #20]
 8006d40:	e027      	b.n	8006d92 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a5a      	ldr	r2, [pc, #360]	; (8006eb4 <extInt_Config+0xb74>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d106      	bne.n	8006d5c <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8006d4e:	4b58      	ldr	r3, [pc, #352]	; (8006eb0 <extInt_Config+0xb70>)
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	4a57      	ldr	r2, [pc, #348]	; (8006eb0 <extInt_Config+0xb70>)
 8006d54:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006d58:	6153      	str	r3, [r2, #20]
 8006d5a:	e01a      	b.n	8006d92 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a55      	ldr	r2, [pc, #340]	; (8006eb8 <extInt_Config+0xb78>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d106      	bne.n	8006d76 <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8006d68:	4b51      	ldr	r3, [pc, #324]	; (8006eb0 <extInt_Config+0xb70>)
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	4a50      	ldr	r2, [pc, #320]	; (8006eb0 <extInt_Config+0xb70>)
 8006d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d72:	6153      	str	r3, [r2, #20]
 8006d74:	e00d      	b.n	8006d92 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a4f      	ldr	r2, [pc, #316]	; (8006ebc <extInt_Config+0xb7c>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d106      	bne.n	8006d90 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8006d82:	4b4b      	ldr	r3, [pc, #300]	; (8006eb0 <extInt_Config+0xb70>)
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	4a4a      	ldr	r2, [pc, #296]	; (8006eb0 <extInt_Config+0xb70>)
 8006d88:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006d8c:	6153      	str	r3, [r2, #20]
 8006d8e:	e000      	b.n	8006d92 <extInt_Config+0xa52>

					} else {
						__NOP();
 8006d90:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8006d92:	4b47      	ldr	r3, [pc, #284]	; (8006eb0 <extInt_Config+0xb70>)
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	4a46      	ldr	r2, [pc, #280]	; (8006eb0 <extInt_Config+0xb70>)
 8006d98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d9c:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a46      	ldr	r2, [pc, #280]	; (8006ec0 <extInt_Config+0xb80>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d104      	bne.n	8006db4 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8006daa:	4b41      	ldr	r3, [pc, #260]	; (8006eb0 <extInt_Config+0xb70>)
 8006dac:	4a40      	ldr	r2, [pc, #256]	; (8006eb0 <extInt_Config+0xb70>)
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8006db2:	e0a7      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a42      	ldr	r2, [pc, #264]	; (8006ec4 <extInt_Config+0xb84>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d106      	bne.n	8006dce <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8006dc0:	4b3b      	ldr	r3, [pc, #236]	; (8006eb0 <extInt_Config+0xb70>)
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	4a3a      	ldr	r2, [pc, #232]	; (8006eb0 <extInt_Config+0xb70>)
 8006dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dca:	6153      	str	r3, [r2, #20]
					break;
 8006dcc:	e09a      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a35      	ldr	r2, [pc, #212]	; (8006eac <extInt_Config+0xb6c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d106      	bne.n	8006de8 <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8006dda:	4b35      	ldr	r3, [pc, #212]	; (8006eb0 <extInt_Config+0xb70>)
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	4a34      	ldr	r2, [pc, #208]	; (8006eb0 <extInt_Config+0xb70>)
 8006de0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006de4:	6153      	str	r3, [r2, #20]
					break;
 8006de6:	e08d      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a31      	ldr	r2, [pc, #196]	; (8006eb4 <extInt_Config+0xb74>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d106      	bne.n	8006e02 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8006df4:	4b2e      	ldr	r3, [pc, #184]	; (8006eb0 <extInt_Config+0xb70>)
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	4a2d      	ldr	r2, [pc, #180]	; (8006eb0 <extInt_Config+0xb70>)
 8006dfa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006dfe:	6153      	str	r3, [r2, #20]
					break;
 8006e00:	e080      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a2b      	ldr	r2, [pc, #172]	; (8006eb8 <extInt_Config+0xb78>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d106      	bne.n	8006e1c <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8006e0e:	4b28      	ldr	r3, [pc, #160]	; (8006eb0 <extInt_Config+0xb70>)
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	4a27      	ldr	r2, [pc, #156]	; (8006eb0 <extInt_Config+0xb70>)
 8006e14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e18:	6153      	str	r3, [r2, #20]
					break;
 8006e1a:	e073      	b.n	8006f04 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a26      	ldr	r2, [pc, #152]	; (8006ebc <extInt_Config+0xb7c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d106      	bne.n	8006e36 <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8006e28:	4b21      	ldr	r3, [pc, #132]	; (8006eb0 <extInt_Config+0xb70>)
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	4a20      	ldr	r2, [pc, #128]	; (8006eb0 <extInt_Config+0xb70>)
 8006e2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006e32:	6153      	str	r3, [r2, #20]
					break;
 8006e34:	e066      	b.n	8006f04 <extInt_Config+0xbc4>
						__NOP();
 8006e36:	bf00      	nop
					break;
 8006e38:	e064      	b.n	8006f04 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8006e3a:	4b1d      	ldr	r3, [pc, #116]	; (8006eb0 <extInt_Config+0xb70>)
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	4a1c      	ldr	r2, [pc, #112]	; (8006eb0 <extInt_Config+0xb70>)
 8006e40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e44:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a1c      	ldr	r2, [pc, #112]	; (8006ec0 <extInt_Config+0xb80>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d104      	bne.n	8006e5c <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8006e52:	4b17      	ldr	r3, [pc, #92]	; (8006eb0 <extInt_Config+0xb70>)
 8006e54:	4a16      	ldr	r2, [pc, #88]	; (8006eb0 <extInt_Config+0xb70>)
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 8006e5a:	e053      	b.n	8006f04 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a18      	ldr	r2, [pc, #96]	; (8006ec4 <extInt_Config+0xb84>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d106      	bne.n	8006e76 <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8006e68:	4b11      	ldr	r3, [pc, #68]	; (8006eb0 <extInt_Config+0xb70>)
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	4a10      	ldr	r2, [pc, #64]	; (8006eb0 <extInt_Config+0xb70>)
 8006e6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e72:	6153      	str	r3, [r2, #20]
						break;
 8006e74:	e046      	b.n	8006f04 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a0b      	ldr	r2, [pc, #44]	; (8006eac <extInt_Config+0xb6c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d106      	bne.n	8006e90 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8006e82:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <extInt_Config+0xb70>)
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	4a0a      	ldr	r2, [pc, #40]	; (8006eb0 <extInt_Config+0xb70>)
 8006e88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e8c:	6153      	str	r3, [r2, #20]
						break;
 8006e8e:	e039      	b.n	8006f04 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a07      	ldr	r2, [pc, #28]	; (8006eb4 <extInt_Config+0xb74>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d115      	bne.n	8006ec8 <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8006e9c:	4b04      	ldr	r3, [pc, #16]	; (8006eb0 <extInt_Config+0xb70>)
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	4a03      	ldr	r2, [pc, #12]	; (8006eb0 <extInt_Config+0xb70>)
 8006ea2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006ea6:	6153      	str	r3, [r2, #20]
						break;
 8006ea8:	e02c      	b.n	8006f04 <extInt_Config+0xbc4>
 8006eaa:	bf00      	nop
 8006eac:	40020800 	.word	0x40020800
 8006eb0:	40013800 	.word	0x40013800
 8006eb4:	40020c00 	.word	0x40020c00
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	40021c00 	.word	0x40021c00
 8006ec0:	40020000 	.word	0x40020000
 8006ec4:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a6c      	ldr	r2, [pc, #432]	; (8007080 <extInt_Config+0xd40>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d106      	bne.n	8006ee2 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8006ed4:	4b6b      	ldr	r3, [pc, #428]	; (8007084 <extInt_Config+0xd44>)
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	4a6a      	ldr	r2, [pc, #424]	; (8007084 <extInt_Config+0xd44>)
 8006eda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ede:	6153      	str	r3, [r2, #20]
						break;
 8006ee0:	e010      	b.n	8006f04 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a67      	ldr	r2, [pc, #412]	; (8007088 <extInt_Config+0xd48>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d106      	bne.n	8006efc <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8006eee:	4b65      	ldr	r3, [pc, #404]	; (8007084 <extInt_Config+0xd44>)
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	4a64      	ldr	r2, [pc, #400]	; (8007084 <extInt_Config+0xd44>)
 8006ef4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006ef8:	6153      	str	r3, [r2, #20]
						break;
 8006efa:	e003      	b.n	8006f04 <extInt_Config+0xbc4>
							__NOP();
 8006efc:	bf00      	nop
						break;
 8006efe:	e001      	b.n	8006f04 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8006f00:	bf00      	nop
						break;
 8006f02:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	791b      	ldrb	r3, [r3, #4]
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d020      	beq.n	8006f4e <extInt_Config+0xc0e>
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	dc37      	bgt.n	8006f80 <extInt_Config+0xc40>
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <extInt_Config+0xbda>
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d00d      	beq.n	8006f34 <extInt_Config+0xbf4>
 8006f18:	e032      	b.n	8006f80 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006f1a:	4b5c      	ldr	r3, [pc, #368]	; (800708c <extInt_Config+0xd4c>)
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	6812      	ldr	r2, [r2, #0]
 8006f22:	7912      	ldrb	r2, [r2, #4]
 8006f24:	4611      	mov	r1, r2
 8006f26:	2201      	movs	r2, #1
 8006f28:	408a      	lsls	r2, r1
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	4a57      	ldr	r2, [pc, #348]	; (800708c <extInt_Config+0xd4c>)
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	60d3      	str	r3, [r2, #12]

		break;
 8006f32:	e027      	b.n	8006f84 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006f34:	4b55      	ldr	r3, [pc, #340]	; (800708c <extInt_Config+0xd4c>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	6812      	ldr	r2, [r2, #0]
 8006f3c:	7912      	ldrb	r2, [r2, #4]
 8006f3e:	4611      	mov	r1, r2
 8006f40:	2201      	movs	r2, #1
 8006f42:	408a      	lsls	r2, r1
 8006f44:	4611      	mov	r1, r2
 8006f46:	4a51      	ldr	r2, [pc, #324]	; (800708c <extInt_Config+0xd4c>)
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	6093      	str	r3, [r2, #8]

		break;
 8006f4c:	e01a      	b.n	8006f84 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006f4e:	4b4f      	ldr	r3, [pc, #316]	; (800708c <extInt_Config+0xd4c>)
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6812      	ldr	r2, [r2, #0]
 8006f56:	7912      	ldrb	r2, [r2, #4]
 8006f58:	4611      	mov	r1, r2
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	408a      	lsls	r2, r1
 8006f5e:	4611      	mov	r1, r2
 8006f60:	4a4a      	ldr	r2, [pc, #296]	; (800708c <extInt_Config+0xd4c>)
 8006f62:	430b      	orrs	r3, r1
 8006f64:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006f66:	4b49      	ldr	r3, [pc, #292]	; (800708c <extInt_Config+0xd4c>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6812      	ldr	r2, [r2, #0]
 8006f6e:	7912      	ldrb	r2, [r2, #4]
 8006f70:	4611      	mov	r1, r2
 8006f72:	2201      	movs	r2, #1
 8006f74:	408a      	lsls	r2, r1
 8006f76:	4611      	mov	r1, r2
 8006f78:	4a44      	ldr	r2, [pc, #272]	; (800708c <extInt_Config+0xd4c>)
 8006f7a:	430b      	orrs	r3, r1
 8006f7c:	6093      	str	r3, [r2, #8]

		break;
 8006f7e:	e001      	b.n	8006f84 <extInt_Config+0xc44>

	}default :{

		__NOP();
 8006f80:	bf00      	nop
		break;
 8006f82:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8006f84:	b672      	cpsid	i
}
 8006f86:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006f88:	4b40      	ldr	r3, [pc, #256]	; (800708c <extInt_Config+0xd4c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	6812      	ldr	r2, [r2, #0]
 8006f90:	7912      	ldrb	r2, [r2, #4]
 8006f92:	4611      	mov	r1, r2
 8006f94:	2201      	movs	r2, #1
 8006f96:	408a      	lsls	r2, r1
 8006f98:	4611      	mov	r1, r2
 8006f9a:	4a3c      	ldr	r2, [pc, #240]	; (800708c <extInt_Config+0xd4c>)
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	791b      	ldrb	r3, [r3, #4]
 8006fa6:	2b0f      	cmp	r3, #15
 8006fa8:	d862      	bhi.n	8007070 <extInt_Config+0xd30>
 8006faa:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <extInt_Config+0xc70>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006ff1 	.word	0x08006ff1
 8006fb4:	08006ff9 	.word	0x08006ff9
 8006fb8:	08007001 	.word	0x08007001
 8006fbc:	08007009 	.word	0x08007009
 8006fc0:	08007011 	.word	0x08007011
 8006fc4:	08007019 	.word	0x08007019
 8006fc8:	08007021 	.word	0x08007021
 8006fcc:	08007029 	.word	0x08007029
 8006fd0:	08007031 	.word	0x08007031
 8006fd4:	08007039 	.word	0x08007039
 8006fd8:	08007041 	.word	0x08007041
 8006fdc:	08007049 	.word	0x08007049
 8006fe0:	08007051 	.word	0x08007051
 8006fe4:	08007059 	.word	0x08007059
 8006fe8:	08007061 	.word	0x08007061
 8006fec:	08007069 	.word	0x08007069
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8006ff0:	2006      	movs	r0, #6
 8006ff2:	f7ff f987 	bl	8006304 <__NVIC_EnableIRQ>
			break;
 8006ff6:	e03d      	b.n	8007074 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 8006ff8:	2007      	movs	r0, #7
 8006ffa:	f7ff f983 	bl	8006304 <__NVIC_EnableIRQ>
			break;
 8006ffe:	e039      	b.n	8007074 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8007000:	2008      	movs	r0, #8
 8007002:	f7ff f97f 	bl	8006304 <__NVIC_EnableIRQ>
			break;
 8007006:	e035      	b.n	8007074 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 8007008:	2009      	movs	r0, #9
 800700a:	f7ff f97b 	bl	8006304 <__NVIC_EnableIRQ>
			break;
 800700e:	e031      	b.n	8007074 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8007010:	200a      	movs	r0, #10
 8007012:	f7ff f977 	bl	8006304 <__NVIC_EnableIRQ>
			break;
 8007016:	e02d      	b.n	8007074 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007018:	2017      	movs	r0, #23
 800701a:	f7ff f973 	bl	8006304 <__NVIC_EnableIRQ>
			break;
 800701e:	e029      	b.n	8007074 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007020:	2017      	movs	r0, #23
 8007022:	f7ff f96f 	bl	8006304 <__NVIC_EnableIRQ>
			break;
 8007026:	e025      	b.n	8007074 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007028:	2017      	movs	r0, #23
 800702a:	f7ff f96b 	bl	8006304 <__NVIC_EnableIRQ>
			break;
 800702e:	e021      	b.n	8007074 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007030:	2017      	movs	r0, #23
 8007032:	f7ff f967 	bl	8006304 <__NVIC_EnableIRQ>
			break;
 8007036:	e01d      	b.n	8007074 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007038:	2017      	movs	r0, #23
 800703a:	f7ff f963 	bl	8006304 <__NVIC_EnableIRQ>
			break;
 800703e:	e019      	b.n	8007074 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007040:	2028      	movs	r0, #40	; 0x28
 8007042:	f7ff f95f 	bl	8006304 <__NVIC_EnableIRQ>
			break;
 8007046:	e015      	b.n	8007074 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007048:	2028      	movs	r0, #40	; 0x28
 800704a:	f7ff f95b 	bl	8006304 <__NVIC_EnableIRQ>
			break;
 800704e:	e011      	b.n	8007074 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007050:	2028      	movs	r0, #40	; 0x28
 8007052:	f7ff f957 	bl	8006304 <__NVIC_EnableIRQ>
			break;
 8007056:	e00d      	b.n	8007074 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007058:	2028      	movs	r0, #40	; 0x28
 800705a:	f7ff f953 	bl	8006304 <__NVIC_EnableIRQ>
			break;
 800705e:	e009      	b.n	8007074 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007060:	2028      	movs	r0, #40	; 0x28
 8007062:	f7ff f94f 	bl	8006304 <__NVIC_EnableIRQ>
			break;
 8007066:	e005      	b.n	8007074 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007068:	2028      	movs	r0, #40	; 0x28
 800706a:	f7ff f94b 	bl	8006304 <__NVIC_EnableIRQ>
			break;
 800706e:	e001      	b.n	8007074 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 8007070:	bf00      	nop
			break;
 8007072:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8007074:	b662      	cpsie	i
}
 8007076:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 8007078:	bf00      	nop
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	40021000 	.word	0x40021000
 8007084:	40013800 	.word	0x40013800
 8007088:	40021c00 	.word	0x40021c00
 800708c:	40013c00 	.word	0x40013c00

08007090 <callback_extInt0>:
	__enable_irq();

}

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
	__NOP();
 8007094:	bf00      	nop
}
 8007096:	bf00      	nop
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 80070a0:	b480      	push	{r7}
 80070a2:	af00      	add	r7, sp, #0
	__NOP();
 80070a4:	bf00      	nop
}
 80070a6:	bf00      	nop
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
	__NOP();
 80070b4:	bf00      	nop
}
 80070b6:	bf00      	nop
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 80070c0:	b480      	push	{r7}
 80070c2:	af00      	add	r7, sp, #0
	__NOP();
 80070c4:	bf00      	nop
}
 80070c6:	bf00      	nop
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
	__NOP();
 80070d4:	bf00      	nop
}
 80070d6:	bf00      	nop
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 80070e0:	b480      	push	{r7}
 80070e2:	af00      	add	r7, sp, #0
	__NOP();
 80070e4:	bf00      	nop
}
 80070e6:	bf00      	nop
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 80070f0:	b480      	push	{r7}
 80070f2:	af00      	add	r7, sp, #0
	__NOP();
 80070f4:	bf00      	nop
}
 80070f6:	bf00      	nop
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
	__NOP();
 8007104:	bf00      	nop
}
 8007106:	bf00      	nop
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8007110:	b480      	push	{r7}
 8007112:	af00      	add	r7, sp, #0
	__NOP();
 8007114:	bf00      	nop
}
 8007116:	bf00      	nop
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8007120:	b480      	push	{r7}
 8007122:	af00      	add	r7, sp, #0
	__NOP();
 8007124:	bf00      	nop
}
 8007126:	bf00      	nop
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8007130:	b480      	push	{r7}
 8007132:	af00      	add	r7, sp, #0
	__NOP();
 8007134:	bf00      	nop
}
 8007136:	bf00      	nop
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0
	__NOP();
 8007144:	bf00      	nop
}
 8007146:	bf00      	nop
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
	__NOP();
 8007154:	bf00      	nop
}
 8007156:	bf00      	nop
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
	__NOP();
 8007164:	bf00      	nop
}
 8007166:	bf00      	nop
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8007174:	4b07      	ldr	r3, [pc, #28]	; (8007194 <EXTI0_IRQHandler+0x24>)
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d007      	beq.n	8007190 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8007180:	4b04      	ldr	r3, [pc, #16]	; (8007194 <EXTI0_IRQHandler+0x24>)
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	4a03      	ldr	r2, [pc, #12]	; (8007194 <EXTI0_IRQHandler+0x24>)
 8007186:	f043 0301 	orr.w	r3, r3, #1
 800718a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 800718c:	f7ff ff80 	bl	8007090 <callback_extInt0>
	}
}
 8007190:	bf00      	nop
 8007192:	bd80      	pop	{r7, pc}
 8007194:	40013c00 	.word	0x40013c00

08007198 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 8007198:	b580      	push	{r7, lr}
 800719a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 800719c:	4b07      	ldr	r3, [pc, #28]	; (80071bc <EXTI1_IRQHandler+0x24>)
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d007      	beq.n	80071b8 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 80071a8:	4b04      	ldr	r3, [pc, #16]	; (80071bc <EXTI1_IRQHandler+0x24>)
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	4a03      	ldr	r2, [pc, #12]	; (80071bc <EXTI1_IRQHandler+0x24>)
 80071ae:	f043 0302 	orr.w	r3, r3, #2
 80071b2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 80071b4:	f7fa fe60 	bl	8001e78 <callback_extInt1>
	}
}
 80071b8:	bf00      	nop
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	40013c00 	.word	0x40013c00

080071c0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 80071c4:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <EXTI2_IRQHandler+0x24>)
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	f003 0304 	and.w	r3, r3, #4
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d007      	beq.n	80071e0 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 80071d0:	4b04      	ldr	r3, [pc, #16]	; (80071e4 <EXTI2_IRQHandler+0x24>)
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	4a03      	ldr	r2, [pc, #12]	; (80071e4 <EXTI2_IRQHandler+0x24>)
 80071d6:	f043 0304 	orr.w	r3, r3, #4
 80071da:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 80071dc:	f7ff ff60 	bl	80070a0 <callback_extInt2>
	}
}
 80071e0:	bf00      	nop
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	40013c00 	.word	0x40013c00

080071e8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80071e8:	b580      	push	{r7, lr}
 80071ea:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 80071ec:	4b07      	ldr	r3, [pc, #28]	; (800720c <EXTI3_IRQHandler+0x24>)
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	f003 0308 	and.w	r3, r3, #8
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 80071f8:	4b04      	ldr	r3, [pc, #16]	; (800720c <EXTI3_IRQHandler+0x24>)
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	4a03      	ldr	r2, [pc, #12]	; (800720c <EXTI3_IRQHandler+0x24>)
 80071fe:	f043 0308 	orr.w	r3, r3, #8
 8007202:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8007204:	f7fa fe4e 	bl	8001ea4 <callback_extInt3>
	}
}
 8007208:	bf00      	nop
 800720a:	bd80      	pop	{r7, pc}
 800720c:	40013c00 	.word	0x40013c00

08007210 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8007210:	b580      	push	{r7, lr}
 8007212:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8007214:	4b07      	ldr	r3, [pc, #28]	; (8007234 <EXTI4_IRQHandler+0x24>)
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	f003 0310 	and.w	r3, r3, #16
 800721c:	2b00      	cmp	r3, #0
 800721e:	d007      	beq.n	8007230 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8007220:	4b04      	ldr	r3, [pc, #16]	; (8007234 <EXTI4_IRQHandler+0x24>)
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	4a03      	ldr	r2, [pc, #12]	; (8007234 <EXTI4_IRQHandler+0x24>)
 8007226:	f043 0310 	orr.w	r3, r3, #16
 800722a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 800722c:	f7ff ff40 	bl	80070b0 <callback_extInt4>
	}
}
 8007230:	bf00      	nop
 8007232:	bd80      	pop	{r7, pc}
 8007234:	40013c00 	.word	0x40013c00

08007238 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 800723c:	4b26      	ldr	r3, [pc, #152]	; (80072d8 <EXTI9_5_IRQHandler+0xa0>)
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	f003 0320 	and.w	r3, r3, #32
 8007244:	2b00      	cmp	r3, #0
 8007246:	d008      	beq.n	800725a <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8007248:	4b23      	ldr	r3, [pc, #140]	; (80072d8 <EXTI9_5_IRQHandler+0xa0>)
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	4a22      	ldr	r2, [pc, #136]	; (80072d8 <EXTI9_5_IRQHandler+0xa0>)
 800724e:	f043 0320 	orr.w	r3, r3, #32
 8007252:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 8007254:	f7ff ff34 	bl	80070c0 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 8007258:	e03c      	b.n	80072d4 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 800725a:	4b1f      	ldr	r3, [pc, #124]	; (80072d8 <EXTI9_5_IRQHandler+0xa0>)
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007262:	2b00      	cmp	r3, #0
 8007264:	d008      	beq.n	8007278 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8007266:	4b1c      	ldr	r3, [pc, #112]	; (80072d8 <EXTI9_5_IRQHandler+0xa0>)
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	4a1b      	ldr	r2, [pc, #108]	; (80072d8 <EXTI9_5_IRQHandler+0xa0>)
 800726c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007270:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 8007272:	f7ff ff2d 	bl	80070d0 <callback_extInt6>
}
 8007276:	e02d      	b.n	80072d4 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 8007278:	4b17      	ldr	r3, [pc, #92]	; (80072d8 <EXTI9_5_IRQHandler+0xa0>)
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007280:	2b00      	cmp	r3, #0
 8007282:	d008      	beq.n	8007296 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8007284:	4b14      	ldr	r3, [pc, #80]	; (80072d8 <EXTI9_5_IRQHandler+0xa0>)
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	4a13      	ldr	r2, [pc, #76]	; (80072d8 <EXTI9_5_IRQHandler+0xa0>)
 800728a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800728e:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8007290:	f7ff ff26 	bl	80070e0 <callback_extInt7>
}
 8007294:	e01e      	b.n	80072d4 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 8007296:	4b10      	ldr	r3, [pc, #64]	; (80072d8 <EXTI9_5_IRQHandler+0xa0>)
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d008      	beq.n	80072b4 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 80072a2:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <EXTI9_5_IRQHandler+0xa0>)
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	4a0c      	ldr	r2, [pc, #48]	; (80072d8 <EXTI9_5_IRQHandler+0xa0>)
 80072a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ac:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 80072ae:	f7ff ff1f 	bl	80070f0 <callback_extInt8>
}
 80072b2:	e00f      	b.n	80072d4 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 80072b4:	4b08      	ldr	r3, [pc, #32]	; (80072d8 <EXTI9_5_IRQHandler+0xa0>)
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d008      	beq.n	80072d2 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 80072c0:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <EXTI9_5_IRQHandler+0xa0>)
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	4a04      	ldr	r2, [pc, #16]	; (80072d8 <EXTI9_5_IRQHandler+0xa0>)
 80072c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072ca:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 80072cc:	f7ff ff18 	bl	8007100 <callback_extInt9>
}
 80072d0:	e000      	b.n	80072d4 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 80072d2:	bf00      	nop
}
 80072d4:	bf00      	nop
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	40013c00 	.word	0x40013c00

080072dc <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 80072e0:	4b2d      	ldr	r3, [pc, #180]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d008      	beq.n	80072fe <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 80072ec:	4b2a      	ldr	r3, [pc, #168]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	4a29      	ldr	r2, [pc, #164]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 80072f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072f6:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 80072f8:	f7ff ff0a 	bl	8007110 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 80072fc:	e049      	b.n	8007392 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 80072fe:	4b26      	ldr	r3, [pc, #152]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007306:	2b00      	cmp	r3, #0
 8007308:	d008      	beq.n	800731c <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 800730a:	4b23      	ldr	r3, [pc, #140]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	4a22      	ldr	r2, [pc, #136]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 8007310:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007314:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 8007316:	f7ff ff03 	bl	8007120 <callback_extInt11>
}
 800731a:	e03a      	b.n	8007392 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 800731c:	4b1e      	ldr	r3, [pc, #120]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d008      	beq.n	800733a <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8007328:	4b1b      	ldr	r3, [pc, #108]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	4a1a      	ldr	r2, [pc, #104]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 800732e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007332:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 8007334:	f7ff fefc 	bl	8007130 <callback_extInt12>
}
 8007338:	e02b      	b.n	8007392 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 800733a:	4b17      	ldr	r3, [pc, #92]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d008      	beq.n	8007358 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8007346:	4b14      	ldr	r3, [pc, #80]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	4a13      	ldr	r2, [pc, #76]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 800734c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007350:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 8007352:	f7ff fef5 	bl	8007140 <callback_extInt13>
}
 8007356:	e01c      	b.n	8007392 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 8007358:	4b0f      	ldr	r3, [pc, #60]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d008      	beq.n	8007376 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8007364:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	4a0b      	ldr	r2, [pc, #44]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 800736a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800736e:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8007370:	f7ff feee 	bl	8007150 <callback_extInt14>
}
 8007374:	e00d      	b.n	8007392 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 8007376:	4b08      	ldr	r3, [pc, #32]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d007      	beq.n	8007392 <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 8007382:	4b05      	ldr	r3, [pc, #20]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	4a04      	ldr	r2, [pc, #16]	; (8007398 <EXTI15_10_IRQHandler+0xbc>)
 8007388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800738c:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 800738e:	f7ff fee7 	bl	8007160 <callback_extInt15>
}
 8007392:	bf00      	nop
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	40013c00 	.word	0x40013c00

0800739c <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a88      	ldr	r2, [pc, #544]	; (80075d4 <GPIO_Config+0x238>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d106      	bne.n	80073c4 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 80073b6:	4b88      	ldr	r3, [pc, #544]	; (80075d8 <GPIO_Config+0x23c>)
 80073b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ba:	4a87      	ldr	r2, [pc, #540]	; (80075d8 <GPIO_Config+0x23c>)
 80073bc:	f043 0301 	orr.w	r3, r3, #1
 80073c0:	6313      	str	r3, [r2, #48]	; 0x30
 80073c2:	e03a      	b.n	800743a <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a84      	ldr	r2, [pc, #528]	; (80075dc <GPIO_Config+0x240>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d106      	bne.n	80073dc <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 80073ce:	4b82      	ldr	r3, [pc, #520]	; (80075d8 <GPIO_Config+0x23c>)
 80073d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d2:	4a81      	ldr	r2, [pc, #516]	; (80075d8 <GPIO_Config+0x23c>)
 80073d4:	f043 0302 	orr.w	r3, r3, #2
 80073d8:	6313      	str	r3, [r2, #48]	; 0x30
 80073da:	e02e      	b.n	800743a <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a7f      	ldr	r2, [pc, #508]	; (80075e0 <GPIO_Config+0x244>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d106      	bne.n	80073f4 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 80073e6:	4b7c      	ldr	r3, [pc, #496]	; (80075d8 <GPIO_Config+0x23c>)
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	4a7b      	ldr	r2, [pc, #492]	; (80075d8 <GPIO_Config+0x23c>)
 80073ec:	f043 0304 	orr.w	r3, r3, #4
 80073f0:	6313      	str	r3, [r2, #48]	; 0x30
 80073f2:	e022      	b.n	800743a <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a7a      	ldr	r2, [pc, #488]	; (80075e4 <GPIO_Config+0x248>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d106      	bne.n	800740c <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 80073fe:	4b76      	ldr	r3, [pc, #472]	; (80075d8 <GPIO_Config+0x23c>)
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	4a75      	ldr	r2, [pc, #468]	; (80075d8 <GPIO_Config+0x23c>)
 8007404:	f043 0308 	orr.w	r3, r3, #8
 8007408:	6313      	str	r3, [r2, #48]	; 0x30
 800740a:	e016      	b.n	800743a <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a75      	ldr	r2, [pc, #468]	; (80075e8 <GPIO_Config+0x24c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d106      	bne.n	8007424 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8007416:	4b70      	ldr	r3, [pc, #448]	; (80075d8 <GPIO_Config+0x23c>)
 8007418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741a:	4a6f      	ldr	r2, [pc, #444]	; (80075d8 <GPIO_Config+0x23c>)
 800741c:	f043 0310 	orr.w	r3, r3, #16
 8007420:	6313      	str	r3, [r2, #48]	; 0x30
 8007422:	e00a      	b.n	800743a <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a70      	ldr	r2, [pc, #448]	; (80075ec <GPIO_Config+0x250>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d105      	bne.n	800743a <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 800742e:	4b6a      	ldr	r3, [pc, #424]	; (80075d8 <GPIO_Config+0x23c>)
 8007430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007432:	4a69      	ldr	r2, [pc, #420]	; (80075d8 <GPIO_Config+0x23c>)
 8007434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007438:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	795b      	ldrb	r3, [r3, #5]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d143      	bne.n	80074ca <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	791b      	ldrb	r3, [r3, #4]
 8007446:	2b07      	cmp	r3, #7
 8007448:	d81f      	bhi.n	800748a <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	791b      	ldrb	r3, [r3, #4]
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6a1a      	ldr	r2, [r3, #32]
 8007458:	210f      	movs	r1, #15
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	fa01 f303 	lsl.w	r3, r1, r3
 8007460:	43db      	mvns	r3, r3
 8007462:	4619      	mov	r1, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	400a      	ands	r2, r1
 800746a:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6a1a      	ldr	r2, [r3, #32]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	7a5b      	ldrb	r3, [r3, #9]
 8007476:	4619      	mov	r1, r3
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	fa01 f303 	lsl.w	r3, r1, r3
 800747e:	4619      	mov	r1, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	621a      	str	r2, [r3, #32]
 8007488:	e01f      	b.n	80074ca <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	791b      	ldrb	r3, [r3, #4]
 800748e:	3b08      	subs	r3, #8
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800749a:	210f      	movs	r1, #15
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	fa01 f303 	lsl.w	r3, r1, r3
 80074a2:	43db      	mvns	r3, r3
 80074a4:	4619      	mov	r1, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	400a      	ands	r2, r1
 80074ac:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	7a5b      	ldrb	r3, [r3, #9]
 80074b8:	4619      	mov	r1, r3
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	fa01 f303 	lsl.w	r3, r1, r3
 80074c0:	4619      	mov	r1, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	795b      	ldrb	r3, [r3, #5]
 80074ce:	461a      	mov	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	791b      	ldrb	r3, [r3, #4]
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	791b      	ldrb	r3, [r3, #4]
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	2103      	movs	r1, #3
 80074ea:	fa01 f303 	lsl.w	r3, r1, r3
 80074ee:	43db      	mvns	r3, r3
 80074f0:	4619      	mov	r1, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	400a      	ands	r2, r1
 80074f8:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6819      	ldr	r1, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	430a      	orrs	r2, r1
 8007508:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	7a1b      	ldrb	r3, [r3, #8]
 800750e:	461a      	mov	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	791b      	ldrb	r3, [r3, #4]
 8007514:	fa02 f303 	lsl.w	r3, r2, r3
 8007518:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	791b      	ldrb	r3, [r3, #4]
 8007524:	4619      	mov	r1, r3
 8007526:	2301      	movs	r3, #1
 8007528:	408b      	lsls	r3, r1
 800752a:	43db      	mvns	r3, r3
 800752c:	4619      	mov	r1, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	400a      	ands	r2, r1
 8007534:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6859      	ldr	r1, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	430a      	orrs	r2, r1
 8007544:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	799b      	ldrb	r3, [r3, #6]
 800754a:	461a      	mov	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	791b      	ldrb	r3, [r3, #4]
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	fa02 f303 	lsl.w	r3, r2, r3
 8007556:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	791b      	ldrb	r3, [r3, #4]
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	2103      	movs	r1, #3
 8007566:	fa01 f303 	lsl.w	r3, r1, r3
 800756a:	43db      	mvns	r3, r3
 800756c:	4619      	mov	r1, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	400a      	ands	r2, r1
 8007574:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6899      	ldr	r1, [r3, #8]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	430a      	orrs	r2, r1
 8007584:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	79db      	ldrb	r3, [r3, #7]
 800758a:	461a      	mov	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	791b      	ldrb	r3, [r3, #4]
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	fa02 f303 	lsl.w	r3, r2, r3
 8007596:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68da      	ldr	r2, [r3, #12]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	791b      	ldrb	r3, [r3, #4]
 80075a2:	005b      	lsls	r3, r3, #1
 80075a4:	2103      	movs	r1, #3
 80075a6:	fa01 f303 	lsl.w	r3, r1, r3
 80075aa:	43db      	mvns	r3, r3
 80075ac:	4619      	mov	r1, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	400a      	ands	r2, r1
 80075b4:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68d9      	ldr	r1, [r3, #12]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 80075c6:	bf00      	nop
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40020000 	.word	0x40020000
 80075d8:	40023800 	.word	0x40023800
 80075dc:	40020400 	.word	0x40020400
 80075e0:	40020800 	.word	0x40020800
 80075e4:	40020c00 	.word	0x40020c00
 80075e8:	40021000 	.word	0x40021000
 80075ec:	40021c00 	.word	0x40021c00

080075f0 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d10d      	bne.n	800761e <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	699a      	ldr	r2, [r3, #24]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	791b      	ldrb	r3, [r3, #4]
 800760c:	4619      	mov	r1, r3
 800760e:	2301      	movs	r3, #1
 8007610:	408b      	lsls	r3, r1
 8007612:	4619      	mov	r1, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 800761c:	e00d      	b.n	800763a <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	699a      	ldr	r2, [r3, #24]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	791b      	ldrb	r3, [r3, #4]
 8007628:	3310      	adds	r3, #16
 800762a:	2101      	movs	r1, #1
 800762c:	fa01 f303 	lsl.w	r3, r1, r3
 8007630:	4619      	mov	r1, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	619a      	str	r2, [r3, #24]
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 8007652:	78fb      	ldrb	r3, [r7, #3]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10d      	bne.n	8007674 <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	791b      	ldrb	r3, [r3, #4]
 8007662:	4619      	mov	r1, r3
 8007664:	2301      	movs	r3, #1
 8007666:	408b      	lsls	r3, r1
 8007668:	4619      	mov	r1, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 8007672:	e00d      	b.n	8007690 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	699a      	ldr	r2, [r3, #24]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	791b      	ldrb	r3, [r3, #4]
 800767e:	3310      	adds	r3, #16
 8007680:	2101      	movs	r1, #1
 8007682:	fa01 f303 	lsl.w	r3, r1, r3
 8007686:	4619      	mov	r1, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	619a      	str	r2, [r3, #24]
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 80076a4:	2300      	movs	r3, #0
 80076a6:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	791b      	ldrb	r3, [r3, #4]
 80076ac:	461a      	mov	r2, r3
 80076ae:	2301      	movs	r3, #1
 80076b0:	4093      	lsls	r3, r2
 80076b2:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 80076bc:	897b      	ldrh	r3, [r7, #10]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	4013      	ands	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	791b      	ldrb	r3, [r3, #4]
 80076c8:	461a      	mov	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	40d3      	lsrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]

	return pinValue;
 80076d0:	68fb      	ldr	r3, [r7, #12]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7ff ffd8 	bl	800769c <GPIO_ReadPin>
 80076ec:	4603      	mov	r3, r0
 80076ee:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	bf0c      	ite	eq
 80076f6:	2301      	moveq	r3, #1
 80076f8:	2300      	movne	r3, #0
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7ff ff76 	bl	80075f0 <GPIO_WritePin>
}
 8007704:	bf00      	nop
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <configMPUAccel>:
#include "I2CDriver.h"
#include "GPIOxDriver.h"
#include "BasicTimer.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 8007714:	2300      	movs	r3, #0
 8007716:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff fe3b 	bl	800739c <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff fe36 	bl	800739c <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	4618      	mov	r0, r3
 8007736:	f002 fbc7 	bl	8009ec8 <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 800773a:	e004      	b.n	8007746 <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f94f 	bl	80079e0 <WHOIAM>
 8007742:	4603      	mov	r3, r0
 8007744:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d0f7      	beq.n	800773c <configMPUAccel+0x30>
	}


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 800774c:	216b      	movs	r1, #107	; 0x6b
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f8f1 	bl	8007936 <readData>
 8007754:	4603      	mov	r3, r0
 8007756:	73bb      	strb	r3, [r7, #14]

	byte &=  ~byte;
 8007758:	2300      	movs	r3, #0
 800775a:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	461a      	mov	r2, r3
 8007760:	216b      	movs	r1, #107	; 0x6b
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f89c 	bl	80078a0 <writeData>

	byte = readData(ptrMPUAccel, 0x6B);
 8007768:	216b      	movs	r1, #107	; 0x6b
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f8e3 	bl	8007936 <readData>
 8007770:	4603      	mov	r3, r0
 8007772:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 8007774:	211c      	movs	r1, #28
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f8dd 	bl	8007936 <readData>
 800777c:	4603      	mov	r3, r0
 800777e:	73bb      	strb	r3, [r7, #14]

		byte &= ~(0b00011000) ;
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	f023 0318 	bic.w	r3, r3, #24
 8007786:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b03      	cmp	r3, #3
 800778e:	d833      	bhi.n	80077f8 <configMPUAccel+0xec>
 8007790:	a201      	add	r2, pc, #4	; (adr r2, 8007798 <configMPUAccel+0x8c>)
 8007792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007796:	bf00      	nop
 8007798:	080077a9 	.word	0x080077a9
 800779c:	080077b7 	.word	0x080077b7
 80077a0:	080077cd 	.word	0x080077cd
 80077a4:	080077e3 	.word	0x080077e3
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 80077a8:	7bbb      	ldrb	r3, [r7, #14]
 80077aa:	461a      	mov	r2, r3
 80077ac:	211c      	movs	r1, #28
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f876 	bl	80078a0 <writeData>


				break;
 80077b4:	e021      	b.n	80077fa <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
 80077b8:	f043 0308 	orr.w	r3, r3, #8
 80077bc:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80077be:	7bbb      	ldrb	r3, [r7, #14]
 80077c0:	461a      	mov	r2, r3
 80077c2:	211c      	movs	r1, #28
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f86b 	bl	80078a0 <writeData>


				break;
 80077ca:	e016      	b.n	80077fa <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	f043 0310 	orr.w	r3, r3, #16
 80077d2:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	461a      	mov	r2, r3
 80077d8:	211c      	movs	r1, #28
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f860 	bl	80078a0 <writeData>


				break;
 80077e0:	e00b      	b.n	80077fa <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	f043 0318 	orr.w	r3, r3, #24
 80077e8:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	461a      	mov	r2, r3
 80077ee:	211c      	movs	r1, #28
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f855 	bl	80078a0 <writeData>


				break;
 80077f6:	e000      	b.n	80077fa <configMPUAccel+0xee>
			}default:{
				break;
 80077f8:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 80077fa:	211c      	movs	r1, #28
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f89a 	bl	8007936 <readData>
 8007802:	4603      	mov	r3, r0
 8007804:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 8007806:	211b      	movs	r1, #27
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f894 	bl	8007936 <readData>
 800780e:	4603      	mov	r3, r0
 8007810:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 8007812:	7bbb      	ldrb	r3, [r7, #14]
 8007814:	f023 0318 	bic.w	r3, r3, #24
 8007818:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	785b      	ldrb	r3, [r3, #1]
 800781e:	2b03      	cmp	r3, #3
 8007820:	d832      	bhi.n	8007888 <configMPUAccel+0x17c>
 8007822:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <configMPUAccel+0x11c>)
 8007824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007828:	08007839 	.word	0x08007839
 800782c:	08007847 	.word	0x08007847
 8007830:	0800785d 	.word	0x0800785d
 8007834:	08007873 	.word	0x08007873
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	461a      	mov	r2, r3
 800783c:	211b      	movs	r1, #27
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f82e 	bl	80078a0 <writeData>


				break;
 8007844:	e021      	b.n	800788a <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	f043 0308 	orr.w	r3, r3, #8
 800784c:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	461a      	mov	r2, r3
 8007852:	211b      	movs	r1, #27
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f823 	bl	80078a0 <writeData>


				break;
 800785a:	e016      	b.n	800788a <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	f043 0310 	orr.w	r3, r3, #16
 8007862:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	461a      	mov	r2, r3
 8007868:	211b      	movs	r1, #27
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f818 	bl	80078a0 <writeData>


				break;
 8007870:	e00b      	b.n	800788a <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	f043 0318 	orr.w	r3, r3, #24
 8007878:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	461a      	mov	r2, r3
 800787e:	211b      	movs	r1, #27
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f80d 	bl	80078a0 <writeData>


				break;
 8007886:	e000      	b.n	800788a <configMPUAccel+0x17e>
			}default:{
				break;
 8007888:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 800788a:	211b      	movs	r1, #27
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f852 	bl	8007936 <readData>
 8007892:	4603      	mov	r3, r0
 8007894:	73bb      	strb	r3, [r7, #14]


}
 8007896:	bf00      	nop
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop

080078a0 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
 80078ac:	4613      	mov	r3, r2
 80078ae:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	695a      	ldr	r2, [r3, #20]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078c2:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f002 fc6d 	bl	800a1a8 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68d8      	ldr	r0, [r3, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	791b      	ldrb	r3, [r3, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	4619      	mov	r1, r3
 80078dc:	f002 fccf 	bl	800a27e <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	78fa      	ldrb	r2, [r7, #3]
 80078e6:	4611      	mov	r1, r2
 80078e8:	4618      	mov	r0, r3
 80078ea:	f002 fcf0 	bl	800a2ce <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80078ee:	e000      	b.n	80078f2 <writeData+0x52>
		__NOP();
 80078f0:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1f6      	bne.n	80078f0 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	78ba      	ldrb	r2, [r7, #2]
 8007908:	4611      	mov	r1, r2
 800790a:	4618      	mov	r0, r3
 800790c:	f002 fcf9 	bl	800a302 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007910:	e000      	b.n	8007914 <writeData+0x74>
		__NOP();
 8007912:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1f6      	bne.n	8007912 <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	4618      	mov	r0, r3
 800792a:	f002 fc2b 	bl	800a184 <i2c_stopTransaction>



}
 800792e:	bf00      	nop
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	460b      	mov	r3, r1
 8007940:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 8007942:	2300      	movs	r3, #0
 8007944:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695a      	ldr	r2, [r3, #20]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007958:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	4618      	mov	r0, r3
 8007960:	f002 fc22 	bl	800a1a8 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68d8      	ldr	r0, [r3, #12]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	791b      	ldrb	r3, [r3, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	4619      	mov	r1, r3
 8007972:	f002 fc84 	bl	800a27e <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	78fa      	ldrb	r2, [r7, #3]
 800797c:	4611      	mov	r1, r2
 800797e:	4618      	mov	r0, r3
 8007980:	f002 fca5 	bl	800a2ce <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007984:	e000      	b.n	8007988 <readData+0x52>
		__NOP();
 8007986:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1f6      	bne.n	8007986 <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	4618      	mov	r0, r3
 800799e:	f002 fc34 	bl	800a20a <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68d8      	ldr	r0, [r3, #12]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	791b      	ldrb	r3, [r3, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	4619      	mov	r1, r3
 80079b0:	f002 fc65 	bl	800a27e <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f002 fc4e 	bl	800a25a <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f002 fbde 	bl	800a184 <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f002 fcb2 	bl	800a336 <i2c_readDataByte>
 80079d2:	4603      	mov	r3, r0
 80079d4:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 80079ec:	2300      	movs	r3, #0
 80079ee:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 80079f0:	2175      	movs	r1, #117	; 0x75
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff ff9f 	bl	8007936 <readData>
 80079f8:	4603      	mov	r3, r0
 80079fa:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007a02:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
 8007a06:	085b      	lsrs	r3, r3, #1
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	bf14      	ite	ne
 8007a0e:	2301      	movne	r3, #1
 8007a10:	2300      	moveq	r3, #0
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8007a16:	7bbb      	ldrb	r3, [r7, #14]

}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 8007a30:	2300      	movs	r3, #0
 8007a32:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 8007a34:	f04f 0200 	mov.w	r2, #0
 8007a38:	f04f 0300 	mov.w	r3, #0
 8007a3c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 8007a40:	2143      	movs	r1, #67	; 0x43
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff ff77 	bl	8007936 <readData>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 8007a4c:	2144      	movs	r1, #68	; 0x44
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7ff ff71 	bl	8007936 <readData>
 8007a54:	4603      	mov	r3, r0
 8007a56:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 8007a58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a5c:	021b      	lsls	r3, r3, #8
 8007a5e:	b21a      	sxth	r2, r3
 8007a60:	89bb      	ldrh	r3, [r7, #12]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	785b      	ldrb	r3, [r3, #1]
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d846      	bhi.n	8007afc <readGyro_X+0xdc>
 8007a6e:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <readGyro_X+0x54>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007a85 	.word	0x08007a85
 8007a78:	08007aa3 	.word	0x08007aa3
 8007a7c:	08007ac1 	.word	0x08007ac1
 8007a80:	08007adf 	.word	0x08007adf
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 8007a84:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7f8 fd63 	bl	8000554 <__aeabi_i2d>
 8007a8e:	a325      	add	r3, pc, #148	; (adr r3, 8007b24 <readGyro_X+0x104>)
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	f7f8 fef2 	bl	800087c <__aeabi_ddiv>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007aa0:	e02d      	b.n	8007afe <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 8007aa2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7f8 fd54 	bl	8000554 <__aeabi_i2d>
 8007aac:	f04f 0200 	mov.w	r2, #0
 8007ab0:	4b19      	ldr	r3, [pc, #100]	; (8007b18 <readGyro_X+0xf8>)
 8007ab2:	f7f8 fee3 	bl	800087c <__aeabi_ddiv>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007abe:	e01e      	b.n	8007afe <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 8007ac0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7f8 fd45 	bl	8000554 <__aeabi_i2d>
 8007aca:	f04f 0200 	mov.w	r2, #0
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <readGyro_X+0xfc>)
 8007ad0:	f7f8 fed4 	bl	800087c <__aeabi_ddiv>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007adc:	e00f      	b.n	8007afe <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 8007ade:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7f8 fd36 	bl	8000554 <__aeabi_i2d>
 8007ae8:	f04f 0200 	mov.w	r2, #0
 8007aec:	4b0c      	ldr	r3, [pc, #48]	; (8007b20 <readGyro_X+0x100>)
 8007aee:	f7f8 fec5 	bl	800087c <__aeabi_ddiv>
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007afa:	e000      	b.n	8007afe <readGyro_X+0xde>
		}default:{
			break;
 8007afc:	bf00      	nop
		}

	}

	return GYROX_R;
 8007afe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007b02:	f7f9 f889 	bl	8000c18 <__aeabi_d2f>
 8007b06:	4603      	mov	r3, r0
 8007b08:	ee07 3a90 	vmov	s15, r3

}
 8007b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	40508000 	.word	0x40508000
 8007b1c:	40408000 	.word	0x40408000
 8007b20:	40300000 	.word	0x40300000
 8007b24:	00000000 	.word	0x00000000
 8007b28:	40606000 	.word	0x40606000
 8007b2c:	00000000 	.word	0x00000000

08007b30 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 8007b40:	2300      	movs	r3, #0
 8007b42:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 8007b44:	f04f 0200 	mov.w	r2, #0
 8007b48:	f04f 0300 	mov.w	r3, #0
 8007b4c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 8007b50:	2145      	movs	r1, #69	; 0x45
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff feef 	bl	8007936 <readData>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 8007b5c:	2146      	movs	r1, #70	; 0x46
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff fee9 	bl	8007936 <readData>
 8007b64:	4603      	mov	r3, r0
 8007b66:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 8007b68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	b21a      	sxth	r2, r3
 8007b70:	89bb      	ldrh	r3, [r7, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	785b      	ldrb	r3, [r3, #1]
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d846      	bhi.n	8007c0c <readGyro_Y+0xdc>
 8007b7e:	a201      	add	r2, pc, #4	; (adr r2, 8007b84 <readGyro_Y+0x54>)
 8007b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b84:	08007b95 	.word	0x08007b95
 8007b88:	08007bb3 	.word	0x08007bb3
 8007b8c:	08007bd1 	.word	0x08007bd1
 8007b90:	08007bef 	.word	0x08007bef
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 8007b94:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7f8 fcdb 	bl	8000554 <__aeabi_i2d>
 8007b9e:	a325      	add	r3, pc, #148	; (adr r3, 8007c34 <readGyro_Y+0x104>)
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f7f8 fe6a 	bl	800087c <__aeabi_ddiv>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007bb0:	e02d      	b.n	8007c0e <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 8007bb2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7f8 fccc 	bl	8000554 <__aeabi_i2d>
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	4b19      	ldr	r3, [pc, #100]	; (8007c28 <readGyro_Y+0xf8>)
 8007bc2:	f7f8 fe5b 	bl	800087c <__aeabi_ddiv>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007bce:	e01e      	b.n	8007c0e <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 8007bd0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7f8 fcbd 	bl	8000554 <__aeabi_i2d>
 8007bda:	f04f 0200 	mov.w	r2, #0
 8007bde:	4b13      	ldr	r3, [pc, #76]	; (8007c2c <readGyro_Y+0xfc>)
 8007be0:	f7f8 fe4c 	bl	800087c <__aeabi_ddiv>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007bec:	e00f      	b.n	8007c0e <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 8007bee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7f8 fcae 	bl	8000554 <__aeabi_i2d>
 8007bf8:	f04f 0200 	mov.w	r2, #0
 8007bfc:	4b0c      	ldr	r3, [pc, #48]	; (8007c30 <readGyro_Y+0x100>)
 8007bfe:	f7f8 fe3d 	bl	800087c <__aeabi_ddiv>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007c0a:	e000      	b.n	8007c0e <readGyro_Y+0xde>
		}default:{
			break;
 8007c0c:	bf00      	nop
		}

	}

	return GYROY_R;
 8007c0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c12:	f7f9 f801 	bl	8000c18 <__aeabi_d2f>
 8007c16:	4603      	mov	r3, r0
 8007c18:	ee07 3a90 	vmov	s15, r3

}
 8007c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	40508000 	.word	0x40508000
 8007c2c:	40408000 	.word	0x40408000
 8007c30:	40300000 	.word	0x40300000
 8007c34:	00000000 	.word	0x00000000
 8007c38:	40606000 	.word	0x40606000
 8007c3c:	00000000 	.word	0x00000000

08007c40 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	f04f 0300 	mov.w	r3, #0
 8007c5c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8007c60:	2147      	movs	r1, #71	; 0x47
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff fe67 	bl	8007936 <readData>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 8007c6c:	2148      	movs	r1, #72	; 0x48
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7ff fe61 	bl	8007936 <readData>
 8007c74:	4603      	mov	r3, r0
 8007c76:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8007c78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	b21a      	sxth	r2, r3
 8007c80:	89bb      	ldrh	r3, [r7, #12]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	785b      	ldrb	r3, [r3, #1]
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d846      	bhi.n	8007d1c <readGyro_Z+0xdc>
 8007c8e:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <readGyro_Z+0x54>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007ca5 	.word	0x08007ca5
 8007c98:	08007cc3 	.word	0x08007cc3
 8007c9c:	08007ce1 	.word	0x08007ce1
 8007ca0:	08007cff 	.word	0x08007cff
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 8007ca4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7f8 fc53 	bl	8000554 <__aeabi_i2d>
 8007cae:	a325      	add	r3, pc, #148	; (adr r3, 8007d44 <readGyro_Z+0x104>)
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f7f8 fde2 	bl	800087c <__aeabi_ddiv>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007cc0:	e02d      	b.n	8007d1e <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 8007cc2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7f8 fc44 	bl	8000554 <__aeabi_i2d>
 8007ccc:	f04f 0200 	mov.w	r2, #0
 8007cd0:	4b19      	ldr	r3, [pc, #100]	; (8007d38 <readGyro_Z+0xf8>)
 8007cd2:	f7f8 fdd3 	bl	800087c <__aeabi_ddiv>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007cde:	e01e      	b.n	8007d1e <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 8007ce0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7f8 fc35 	bl	8000554 <__aeabi_i2d>
 8007cea:	f04f 0200 	mov.w	r2, #0
 8007cee:	4b13      	ldr	r3, [pc, #76]	; (8007d3c <readGyro_Z+0xfc>)
 8007cf0:	f7f8 fdc4 	bl	800087c <__aeabi_ddiv>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007cfc:	e00f      	b.n	8007d1e <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 8007cfe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7f8 fc26 	bl	8000554 <__aeabi_i2d>
 8007d08:	f04f 0200 	mov.w	r2, #0
 8007d0c:	4b0c      	ldr	r3, [pc, #48]	; (8007d40 <readGyro_Z+0x100>)
 8007d0e:	f7f8 fdb5 	bl	800087c <__aeabi_ddiv>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007d1a:	e000      	b.n	8007d1e <readGyro_Z+0xde>
		}default:{
			break;
 8007d1c:	bf00      	nop
		}

	}

	return GYROZ_R;
 8007d1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d22:	f7f8 ff79 	bl	8000c18 <__aeabi_d2f>
 8007d26:	4603      	mov	r3, r0
 8007d28:	ee07 3a90 	vmov	s15, r3

}
 8007d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	40508000 	.word	0x40508000
 8007d3c:	40408000 	.word	0x40408000
 8007d40:	40300000 	.word	0x40300000
 8007d44:	00000000 	.word	0x00000000
 8007d48:	40606000 	.word	0x40606000
 8007d4c:	00000000 	.word	0x00000000

08007d50 <build_Operation>:



//-------------------------Funcion para la definicion de operaciones--------------------------
void build_Operation(Parameters_Operation_t *prtList, Parameter_build_t *prtbuild, double finishline_x, double finishline_y)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08c      	sub	sp, #48	; 0x30
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6178      	str	r0, [r7, #20]
 8007d58:	6139      	str	r1, [r7, #16]
 8007d5a:	ed87 0b02 	vstr	d0, [r7, #8]
 8007d5e:	ed87 1b00 	vstr	d1, [r7]
	//Definicion el vector director
	double delta[2] = {finishline_x - prtbuild->initline_x, finishline_y - prtbuild->initline_y};
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d6c:	f7f8 faa4 	bl	80002b8 <__aeabi_dsub>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007d7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d82:	f7f8 fa99 	bl	80002b8 <__aeabi_dsub>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	//Calculo angulo entre vectores directores
	double grad_turn_res = calculed_ang_turn(prtbuild->delta_before, delta);
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	3310      	adds	r3, #16
 8007d92:	f107 0218 	add.w	r2, r7, #24
 8007d96:	4611      	mov	r1, r2
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 fa55 	bl	8008248 <calculed_ang_turn>
 8007d9e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	//condicional de cambio de angulo
	if( -5 < grad_turn_res  && grad_turn_res < 5 )
 8007da2:	f04f 0200 	mov.w	r2, #0
 8007da6:	4b38      	ldr	r3, [pc, #224]	; (8007e88 <build_Operation+0x138>)
 8007da8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007dac:	f7f8 fecc 	bl	8000b48 <__aeabi_dcmpgt>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d020      	beq.n	8007df8 <build_Operation+0xa8>
 8007db6:	f04f 0200 	mov.w	r2, #0
 8007dba:	4b34      	ldr	r3, [pc, #208]	; (8007e8c <build_Operation+0x13c>)
 8007dbc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007dc0:	f7f8 fea4 	bl	8000b0c <__aeabi_dcmplt>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d016      	beq.n	8007df8 <build_Operation+0xa8>
	{
		//agregar operacion de linea recta
		 add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dd0:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 8007e80 <build_Operation+0x130>
 8007dd4:	ed97 1b00 	vldr	d1, [r7]
 8007dd8:	ed97 0b02 	vldr	d0, [r7, #8]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	4619      	mov	r1, r3
 8007de0:	6978      	ldr	r0, [r7, #20]
 8007de2:	f000 f855 	bl	8007e90 <add_Operation>
		 //Agregar operacion de rotacion
		 prtbuild->number_operation++;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dec:	3301      	adds	r3, #1
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007df6:	e02b      	b.n	8007e50 <build_Operation+0x100>
	}
	else
	{
		add_Operation(prtList, prtbuild->number_operation, TURN, 0, 0, grad_turn_res); // Agregamos la operacion de girar
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dfe:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8007e02:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007e80 <build_Operation+0x130>
 8007e06:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007e80 <build_Operation+0x130>
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6978      	ldr	r0, [r7, #20]
 8007e10:	f000 f83e 	bl	8007e90 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0); // Agregamos la operacion de ir a
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e2a:	ed9f 2b15 	vldr	d2, [pc, #84]	; 8007e80 <build_Operation+0x130>
 8007e2e:	ed97 1b00 	vldr	d1, [r7]
 8007e32:	ed97 0b02 	vldr	d0, [r7, #8]
 8007e36:	2201      	movs	r2, #1
 8007e38:	4619      	mov	r1, r3
 8007e3a:	6978      	ldr	r0, [r7, #20]
 8007e3c:	f000 f828 	bl	8007e90 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e46:	3301      	adds	r3, #1
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	//Se redefine los valores iniciales
	prtbuild->delta_before[0] = delta[0];
 8007e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e54:	6939      	ldr	r1, [r7, #16]
 8007e56:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtbuild->delta_before[1] = delta[1];
 8007e5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e5e:	6939      	ldr	r1, [r7, #16]
 8007e60:	e9c1 2306 	strd	r2, r3, [r1, #24]
	prtbuild->initline_x = finishline_x;
 8007e64:	6939      	ldr	r1, [r7, #16]
 8007e66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e6a:	e9c1 2300 	strd	r2, r3, [r1]
	prtbuild->initline_y = finishline_y;
 8007e6e:	6939      	ldr	r1, [r7, #16]
 8007e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e74:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8007e78:	bf00      	nop
 8007e7a:	3730      	adds	r7, #48	; 0x30
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
	...
 8007e88:	c0140000 	.word	0xc0140000
 8007e8c:	40140000 	.word	0x40140000

08007e90 <add_Operation>:

void add_Operation(Parameters_Operation_t *prtList, uint8_t num_operation, uint8_t type_operation, double coor_x, double coor_y, double grad_turn)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b089      	sub	sp, #36	; 0x24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	61f8      	str	r0, [r7, #28]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	ed87 0b04 	vstr	d0, [r7, #16]
 8007e9e:	ed87 1b02 	vstr	d1, [r7, #8]
 8007ea2:	ed87 2b00 	vstr	d2, [r7]
 8007ea6:	76fb      	strb	r3, [r7, #27]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	76bb      	strb	r3, [r7, #26]
	prtList[num_operation].operacion = type_operation;
 8007eac:	7efa      	ldrb	r2, [r7, #27]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	00db      	lsls	r3, r3, #3
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	4413      	add	r3, r2
 8007ebc:	7eba      	ldrb	r2, [r7, #26]
 8007ebe:	701a      	strb	r2, [r3, #0]
	prtList[num_operation].x_destination = coor_x;
 8007ec0:	7efa      	ldrb	r2, [r7, #27]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	00db      	lsls	r3, r3, #3
 8007eca:	461a      	mov	r2, r3
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	1899      	adds	r1, r3, r2
 8007ed0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ed4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	prtList[num_operation].y_destination = coor_y;
 8007ed8:	7efa      	ldrb	r2, [r7, #27]
 8007eda:	4613      	mov	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4413      	add	r3, r2
 8007ee0:	00db      	lsls	r3, r3, #3
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	1899      	adds	r1, r3, r2
 8007ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007eec:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtList[num_operation].grad_Rotative = grad_turn;
 8007ef0:	7efa      	ldrb	r2, [r7, #27]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	00db      	lsls	r3, r3, #3
 8007efa:	461a      	mov	r2, r3
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	1899      	adds	r1, r3, r2
 8007f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f04:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8007f08:	bf00      	nop
 8007f0a:	3724      	adds	r7, #36	; 0x24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	0000      	movs	r0, r0
	...

08007f18 <change_coordinates_position>:
	ptrParameterPath->goal_Position_x += pot_x;
	ptrParameterPath->goal_Position_y += pot_y;
}

void change_coordinates_position(Parameters_Path_t *ptrParameterPath, double coor_x, double coor_y)
{
 8007f18:	b5b0      	push	{r4, r5, r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6178      	str	r0, [r7, #20]
 8007f20:	ed87 0b02 	vstr	d0, [r7, #8]
 8007f24:	ed87 1b00 	vstr	d1, [r7]
	//Guardamos la posicion del Goal como la posicion de Start
	ptrParameterPath->start_position_x = ptrParameterPath->goal_Position_x;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007f2e:	6979      	ldr	r1, [r7, #20]
 8007f30:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrParameterPath->start_position_y = ptrParameterPath->goal_Position_y;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007f3a:	6979      	ldr	r1, [r7, #20]
 8007f3c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x = coor_x;
 8007f40:	6979      	ldr	r1, [r7, #20]
 8007f42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f46:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ptrParameterPath->goal_Position_y = coor_y;
 8007f4a:	6979      	ldr	r1, [r7, #20]
 8007f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f50:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	//Definimos la distancia
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007f60:	f7f8 f9aa 	bl	80002b8 <__aeabi_dsub>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	ec43 2b17 	vmov	d7, r2, r3
 8007f6c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8007fe0 <change_coordinates_position+0xc8>
 8007f70:	eeb0 0a47 	vmov.f32	s0, s14
 8007f74:	eef0 0a67 	vmov.f32	s1, s15
 8007f78:	f005 fef4 	bl	800dd64 <pow>
 8007f7c:	ec55 4b10 	vmov	r4, r5, d0
										   pow(ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y,2));                  //[mm]
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8007f8c:	f7f8 f994 	bl	80002b8 <__aeabi_dsub>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	ec43 2b17 	vmov	d7, r2, r3
 8007f98:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8007fe0 <change_coordinates_position+0xc8>
 8007f9c:	eeb0 0a47 	vmov.f32	s0, s14
 8007fa0:	eef0 0a67 	vmov.f32	s1, s15
 8007fa4:	f005 fede 	bl	800dd64 <pow>
 8007fa8:	ec53 2b10 	vmov	r2, r3, d0
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 8007fac:	4620      	mov	r0, r4
 8007fae:	4629      	mov	r1, r5
 8007fb0:	f7f8 f984 	bl	80002bc <__adddf3>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	ec43 2b17 	vmov	d7, r2, r3
 8007fbc:	eeb0 0a47 	vmov.f32	s0, s14
 8007fc0:	eef0 0a67 	vmov.f32	s1, s15
 8007fc4:	f005 ff3e 	bl	800de44 <sqrt>
 8007fc8:	eeb0 7a40 	vmov.f32	s14, s0
 8007fcc:	eef0 7a60 	vmov.f32	s15, s1
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

}
 8007fd6:	bf00      	nop
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	00000000 	.word	0x00000000
 8007fe4:	40000000 	.word	0x40000000

08007fe8 <calculation_parameter_distance>:

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8007fe8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007fec:	b08a      	sub	sp, #40	; 0x28
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6178      	str	r0, [r7, #20]
	// Obteniendo en el desarrollo como resultado:
	// -((pos final y - pos inicial y) * pos actual global x - (pos final x - pos inicial x) * pos actual global y)/ magnitud del director



	double director_x = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007ffe:	f7f8 f95b 	bl	80002b8 <__aeabi_dsub>
 8008002:	4602      	mov	r2, r0
 8008004:	460b      	mov	r3, r1
 8008006:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double director_y = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8008016:	f7f8 f94f 	bl	80002b8 <__aeabi_dsub>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->magnitude_director = sqrt(pow(director_x,2)+pow(director_y,2));
 8008022:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8008130 <calculation_parameter_distance+0x148>
 8008026:	ed97 0b08 	vldr	d0, [r7, #32]
 800802a:	f005 fe9b 	bl	800dd64 <pow>
 800802e:	ec59 8b10 	vmov	r8, r9, d0
 8008032:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8008130 <calculation_parameter_distance+0x148>
 8008036:	ed97 0b06 	vldr	d0, [r7, #24]
 800803a:	f005 fe93 	bl	800dd64 <pow>
 800803e:	ec53 2b10 	vmov	r2, r3, d0
 8008042:	4640      	mov	r0, r8
 8008044:	4649      	mov	r1, r9
 8008046:	f7f8 f939 	bl	80002bc <__adddf3>
 800804a:	4602      	mov	r2, r0
 800804c:	460b      	mov	r3, r1
 800804e:	ec43 2b17 	vmov	d7, r2, r3
 8008052:	eeb0 0a47 	vmov.f32	s0, s14
 8008056:	eef0 0a67 	vmov.f32	s1, s15
 800805a:	f005 fef3 	bl	800de44 <sqrt>
 800805e:	eeb0 7a40 	vmov.f32	s14, s0
 8008062:	eef0 7a60 	vmov.f32	s15, s1
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->proy_Parte_1 = director_x;
 800806c:	6979      	ldr	r1, [r7, #20]
 800806e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008072:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->proy_Parte_2 = director_y;
 8008076:	6979      	ldr	r1, [r7, #20]
 8008078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800807c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->proy_Parte_1_2 = -1 * director_x * ptrParameterPath->start_position_x - director_y * ptrParameterPath->start_position_y;
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	60bb      	str	r3, [r7, #8]
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008092:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008096:	f7f8 fac7 	bl	8000628 <__aeabi_dmul>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	4690      	mov	r8, r2
 80080a0:	4699      	mov	r9, r3
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80080a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080ac:	f7f8 fabc 	bl	8000628 <__aeabi_dmul>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	4640      	mov	r0, r8
 80080b6:	4649      	mov	r1, r9
 80080b8:	f7f8 f8fe 	bl	80002b8 <__aeabi_dsub>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	6979      	ldr	r1, [r7, #20]
 80080c2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->dis_point_Parte_1 = director_y;
 80080c6:	6979      	ldr	r1, [r7, #20]
 80080c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080cc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->dis_point_Parte_2 = -1 * director_x;
 80080d0:	6a3c      	ldr	r4, [r7, #32]
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	603b      	str	r3, [r7, #0]
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80080e8:	607b      	str	r3, [r7, #4]
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80080f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080f4:	f7f8 fa98 	bl	8000628 <__aeabi_dmul>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	4614      	mov	r4, r2
 80080fe:	461d      	mov	r5, r3
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8008106:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800810a:	f7f8 fa8d 	bl	8000628 <__aeabi_dmul>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4620      	mov	r0, r4
 8008114:	4629      	mov	r1, r5
 8008116:	f7f8 f8d1 	bl	80002bc <__adddf3>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	6979      	ldr	r1, [r7, #20]
 8008120:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8008124:	bf00      	nop
 8008126:	3728      	adds	r7, #40	; 0x28
 8008128:	46bd      	mov	sp, r7
 800812a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800812e:	bf00      	nop
 8008130:	00000000 	.word	0x00000000
 8008134:	40000000 	.word	0x40000000

08008138 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8008138:	b5b0      	push	{r4, r5, r7, lr}
 800813a:	b088      	sub	sp, #32
 800813c:	af00      	add	r7, sp, #0
 800813e:	6178      	str	r0, [r7, #20]
 8008140:	ed87 0b02 	vstr	d0, [r7, #8]
 8008144:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800814e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008152:	f7f8 fa69 	bl	8000628 <__aeabi_dmul>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	4614      	mov	r4, r2
 800815c:	461d      	mov	r5, r3
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8008164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008168:	f7f8 fa5e 	bl	8000628 <__aeabi_dmul>
 800816c:	4602      	mov	r2, r0
 800816e:	460b      	mov	r3, r1
 8008170:	4620      	mov	r0, r4
 8008172:	4629      	mov	r1, r5
 8008174:	f7f8 f8a2 	bl	80002bc <__adddf3>
 8008178:	4602      	mov	r2, r0
 800817a:	460b      	mov	r3, r1
 800817c:	4610      	mov	r0, r2
 800817e:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / ptrParameterPath->magnitude_director);
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008186:	f7f8 f899 	bl	80002bc <__adddf3>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	4610      	mov	r0, r2
 8008190:	4619      	mov	r1, r3
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	f7f8 fb70 	bl	800087c <__aeabi_ddiv>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 80081a0:	4611      	mov	r1, r2
 80081a2:	61b9      	str	r1, [r7, #24]
 80081a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80081a8:	61fb      	str	r3, [r7, #28]

	return distance;
 80081aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80081b2:	eeb0 0a47 	vmov.f32	s0, s14
 80081b6:	eef0 0a67 	vmov.f32	s1, s15
 80081ba:	3720      	adds	r7, #32
 80081bc:	46bd      	mov	sp, r7
 80081be:	bdb0      	pop	{r4, r5, r7, pc}

080081c0 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 80081c0:	b5b0      	push	{r4, r5, r7, lr}
 80081c2:	b088      	sub	sp, #32
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6178      	str	r0, [r7, #20]
 80081c8:	ed87 0b02 	vstr	d0, [r7, #8]
 80081cc:	ed87 1b00 	vstr	d1, [r7]
	//Calculo de la distancia viajada relativo a la linea recta
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80081d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081da:	f7f8 fa25 	bl	8000628 <__aeabi_dmul>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	4614      	mov	r4, r2
 80081e4:	461d      	mov	r5, r3
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80081ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081f0:	f7f8 fa1a 	bl	8000628 <__aeabi_dmul>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	4620      	mov	r0, r4
 80081fa:	4629      	mov	r1, r5
 80081fc:	f7f8 f85e 	bl	80002bc <__adddf3>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	4610      	mov	r0, r2
 8008206:	4619      	mov	r1, r3
			+ ptrParameterPath->proy_Parte_1_2) / ptrParameterPath->magnitude_director;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800820e:	f7f8 f855 	bl	80002bc <__adddf3>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	4610      	mov	r0, r2
 8008218:	4619      	mov	r1, r3
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 8008220:	f7f8 fb2c 	bl	800087c <__aeabi_ddiv>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 800822c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008230:	ec43 2b17 	vmov	d7, r2, r3
}
 8008234:	eeb0 0a47 	vmov.f32	s0, s14
 8008238:	eef0 0a67 	vmov.f32	s1, s15
 800823c:	3720      	adds	r7, #32
 800823e:	46bd      	mov	sp, r7
 8008240:	bdb0      	pop	{r4, r5, r7, pc}
 8008242:	0000      	movs	r0, r0
 8008244:	0000      	movs	r0, r0
	...

08008248 <calculed_ang_turn>:

//------------------------------Funciones auxiliares-----------------------------------

double calculed_ang_turn(double vector_a[2], double vector_b[2])
{
 8008248:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800824c:	b08a      	sub	sp, #40	; 0x28
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
    //Calculo de los diferentes elementos
    double dot = vector_a[0]*vector_b[1]-vector_b[0]*vector_a[1];
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	e9d3 0100 	ldrd	r0, r1, [r3]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	3308      	adds	r3, #8
 800825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008262:	f7f8 f9e1 	bl	8000628 <__aeabi_dmul>
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	4690      	mov	r8, r2
 800826c:	4699      	mov	r9, r3
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	3308      	adds	r3, #8
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	f7f8 f9d4 	bl	8000628 <__aeabi_dmul>
 8008280:	4602      	mov	r2, r0
 8008282:	460b      	mov	r3, r1
 8008284:	4640      	mov	r0, r8
 8008286:	4649      	mov	r1, r9
 8008288:	f7f8 f816 	bl	80002b8 <__aeabi_dsub>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double magvector_a = sqrt(pow(vector_a[0],2)+pow(vector_a[1],2));
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	ed93 7b00 	vldr	d7, [r3]
 800829a:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8008418 <calculed_ang_turn+0x1d0>
 800829e:	eeb0 0a47 	vmov.f32	s0, s14
 80082a2:	eef0 0a67 	vmov.f32	s1, s15
 80082a6:	f005 fd5d 	bl	800dd64 <pow>
 80082aa:	ec59 8b10 	vmov	r8, r9, d0
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3308      	adds	r3, #8
 80082b2:	ed93 7b00 	vldr	d7, [r3]
 80082b6:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8008418 <calculed_ang_turn+0x1d0>
 80082ba:	eeb0 0a47 	vmov.f32	s0, s14
 80082be:	eef0 0a67 	vmov.f32	s1, s15
 80082c2:	f005 fd4f 	bl	800dd64 <pow>
 80082c6:	ec53 2b10 	vmov	r2, r3, d0
 80082ca:	4640      	mov	r0, r8
 80082cc:	4649      	mov	r1, r9
 80082ce:	f7f7 fff5 	bl	80002bc <__adddf3>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	ec43 2b17 	vmov	d7, r2, r3
 80082da:	eeb0 0a47 	vmov.f32	s0, s14
 80082de:	eef0 0a67 	vmov.f32	s1, s15
 80082e2:	f005 fdaf 	bl	800de44 <sqrt>
 80082e6:	ed87 0b04 	vstr	d0, [r7, #16]
    double magvector_b = sqrt(pow(vector_b[0],2)+pow(vector_b[1],2));
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	ed93 7b00 	vldr	d7, [r3]
 80082f0:	ed9f 1b49 	vldr	d1, [pc, #292]	; 8008418 <calculed_ang_turn+0x1d0>
 80082f4:	eeb0 0a47 	vmov.f32	s0, s14
 80082f8:	eef0 0a67 	vmov.f32	s1, s15
 80082fc:	f005 fd32 	bl	800dd64 <pow>
 8008300:	ec59 8b10 	vmov	r8, r9, d0
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	3308      	adds	r3, #8
 8008308:	ed93 7b00 	vldr	d7, [r3]
 800830c:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8008418 <calculed_ang_turn+0x1d0>
 8008310:	eeb0 0a47 	vmov.f32	s0, s14
 8008314:	eef0 0a67 	vmov.f32	s1, s15
 8008318:	f005 fd24 	bl	800dd64 <pow>
 800831c:	ec53 2b10 	vmov	r2, r3, d0
 8008320:	4640      	mov	r0, r8
 8008322:	4649      	mov	r1, r9
 8008324:	f7f7 ffca 	bl	80002bc <__adddf3>
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	ec43 2b17 	vmov	d7, r2, r3
 8008330:	eeb0 0a47 	vmov.f32	s0, s14
 8008334:	eef0 0a67 	vmov.f32	s1, s15
 8008338:	f005 fd84 	bl	800de44 <sqrt>
 800833c:	ed87 0b02 	vstr	d0, [r7, #8]
    double ang_between_vector = acos((vector_a[0]*vector_b[0]+vector_a[1]*vector_b[1]) / (magvector_b * magvector_a));
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	f7f8 f96c 	bl	8000628 <__aeabi_dmul>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	4690      	mov	r8, r2
 8008356:	4699      	mov	r9, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	3308      	adds	r3, #8
 800835c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	3308      	adds	r3, #8
 8008364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008368:	f7f8 f95e 	bl	8000628 <__aeabi_dmul>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4640      	mov	r0, r8
 8008372:	4649      	mov	r1, r9
 8008374:	f7f7 ffa2 	bl	80002bc <__adddf3>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	4690      	mov	r8, r2
 800837e:	4699      	mov	r9, r3
 8008380:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008384:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008388:	f7f8 f94e 	bl	8000628 <__aeabi_dmul>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	4640      	mov	r0, r8
 8008392:	4649      	mov	r1, r9
 8008394:	f7f8 fa72 	bl	800087c <__aeabi_ddiv>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	ec43 2b17 	vmov	d7, r2, r3
 80083a0:	eeb0 0a47 	vmov.f32	s0, s14
 80083a4:	eef0 0a67 	vmov.f32	s1, s15
 80083a8:	f005 fca6 	bl	800dcf8 <acos>
 80083ac:	ed87 0b08 	vstr	d0, [r7, #32]
    //conversion a grados
    ang_between_vector = (ang_between_vector*180) / M_PI;
 80083b0:	f04f 0200 	mov.w	r2, #0
 80083b4:	4b1c      	ldr	r3, [pc, #112]	; (8008428 <calculed_ang_turn+0x1e0>)
 80083b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80083ba:	f7f8 f935 	bl	8000628 <__aeabi_dmul>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	4610      	mov	r0, r2
 80083c4:	4619      	mov	r1, r3
 80083c6:	a316      	add	r3, pc, #88	; (adr r3, 8008420 <calculed_ang_turn+0x1d8>)
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f7f8 fa56 	bl	800087c <__aeabi_ddiv>
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    //agregamos la direccion de giro
    if(dot<0){ang_between_vector = -ang_between_vector;}
 80083d8:	f04f 0200 	mov.w	r2, #0
 80083dc:	f04f 0300 	mov.w	r3, #0
 80083e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80083e4:	f7f8 fb92 	bl	8000b0c <__aeabi_dcmplt>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d005      	beq.n	80083fa <calculed_ang_turn+0x1b2>
 80083ee:	6a3c      	ldr	r4, [r7, #32]
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80083f6:	e9c7 4508 	strd	r4, r5, [r7, #32]
    //Retornar valor
    return ang_between_vector;
 80083fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083fe:	ec43 2b17 	vmov	d7, r2, r3
}
 8008402:	eeb0 0a47 	vmov.f32	s0, s14
 8008406:	eef0 0a67 	vmov.f32	s1, s15
 800840a:	3728      	adds	r7, #40	; 0x28
 800840c:	46bd      	mov	sp, r7
 800840e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008412:	bf00      	nop
 8008414:	f3af 8000 	nop.w
 8008418:	00000000 	.word	0x00000000
 800841c:	40000000 	.word	0x40000000
 8008420:	54442d18 	.word	0x54442d18
 8008424:	400921fb 	.word	0x400921fb
 8008428:	40668000 	.word	0x40668000

0800842c <unitary_vector>:



void unitary_vector (double angle,double vector_b[2]){
 800842c:	b590      	push	{r4, r7, lr}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	ed87 0b02 	vstr	d0, [r7, #8]
 8008436:	6078      	str	r0, [r7, #4]

	// Esta función lo que haremos es definir un vector unitario con respecto al angulo actual que tenga el robot
	vector_b[0] = cos(angle);
 8008438:	ed97 0b02 	vldr	d0, [r7, #8]
 800843c:	f005 fb68 	bl	800db10 <cos>
 8008440:	eeb0 7a40 	vmov.f32	s14, s0
 8008444:	eef0 7a60 	vmov.f32	s15, s1
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	ed83 7b00 	vstr	d7, [r3]
	vector_b[1] = sin(angle);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f103 0408 	add.w	r4, r3, #8
 8008454:	ed97 0b02 	vldr	d0, [r7, #8]
 8008458:	f005 fbf6 	bl	800dc48 <sin>
 800845c:	eeb0 7a40 	vmov.f32	s14, s0
 8008460:	eef0 7a60 	vmov.f32	s15, s1
 8008464:	ed84 7b00 	vstr	d7, [r4]

}
 8008468:	bf00      	nop
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	bd90      	pop	{r4, r7, pc}

08008470 <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a6c      	ldr	r2, [pc, #432]	; (8008630 <pwm_Config+0x1c0>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d106      	bne.n	8008490 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8008482:	4b6c      	ldr	r3, [pc, #432]	; (8008634 <pwm_Config+0x1c4>)
 8008484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008486:	4a6b      	ldr	r2, [pc, #428]	; (8008634 <pwm_Config+0x1c4>)
 8008488:	f043 0301 	orr.w	r3, r3, #1
 800848c:	6453      	str	r3, [r2, #68]	; 0x44
 800848e:	e030      	b.n	80084f2 <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008498:	d106      	bne.n	80084a8 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800849a:	4b66      	ldr	r3, [pc, #408]	; (8008634 <pwm_Config+0x1c4>)
 800849c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849e:	4a65      	ldr	r2, [pc, #404]	; (8008634 <pwm_Config+0x1c4>)
 80084a0:	f043 0301 	orr.w	r3, r3, #1
 80084a4:	6413      	str	r3, [r2, #64]	; 0x40
 80084a6:	e024      	b.n	80084f2 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a62      	ldr	r2, [pc, #392]	; (8008638 <pwm_Config+0x1c8>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d106      	bne.n	80084c0 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80084b2:	4b60      	ldr	r3, [pc, #384]	; (8008634 <pwm_Config+0x1c4>)
 80084b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b6:	4a5f      	ldr	r2, [pc, #380]	; (8008634 <pwm_Config+0x1c4>)
 80084b8:	f043 0302 	orr.w	r3, r3, #2
 80084bc:	6413      	str	r3, [r2, #64]	; 0x40
 80084be:	e018      	b.n	80084f2 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a5d      	ldr	r2, [pc, #372]	; (800863c <pwm_Config+0x1cc>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d106      	bne.n	80084d8 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80084ca:	4b5a      	ldr	r3, [pc, #360]	; (8008634 <pwm_Config+0x1c4>)
 80084cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ce:	4a59      	ldr	r2, [pc, #356]	; (8008634 <pwm_Config+0x1c4>)
 80084d0:	f043 0304 	orr.w	r3, r3, #4
 80084d4:	6413      	str	r3, [r2, #64]	; 0x40
 80084d6:	e00c      	b.n	80084f2 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a58      	ldr	r2, [pc, #352]	; (8008640 <pwm_Config+0x1d0>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d106      	bne.n	80084f0 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80084e2:	4b54      	ldr	r3, [pc, #336]	; (8008634 <pwm_Config+0x1c4>)
 80084e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e6:	4a53      	ldr	r2, [pc, #332]	; (8008634 <pwm_Config+0x1c4>)
 80084e8:	f043 0308 	orr.w	r3, r3, #8
 80084ec:	6413      	str	r3, [r2, #64]	; 0x40
 80084ee:	e000      	b.n	80084f2 <pwm_Config+0x82>
	}
	else{
		__NOP();
 80084f0:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008500:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	7f5b      	ldrb	r3, [r3, #29]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d106      	bne.n	8008518 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f930 	bl	8008770 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fa67 	bl	80089e4 <setDuttyCycle>
 8008516:	e005      	b.n	8008524 <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f929 	bl	8008770 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fb38 	bl	8008b94 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0210 	bic.w	r2, r2, #16
 8008532:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2200      	movs	r2, #0
 800853a:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	7a1b      	ldrb	r3, [r3, #8]
 8008540:	2b03      	cmp	r3, #3
 8008542:	d86f      	bhi.n	8008624 <pwm_Config+0x1b4>
 8008544:	a201      	add	r2, pc, #4	; (adr r2, 800854c <pwm_Config+0xdc>)
 8008546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854a:	bf00      	nop
 800854c:	0800855d 	.word	0x0800855d
 8008550:	0800858f 	.word	0x0800858f
 8008554:	080085c1 	.word	0x080085c1
 8008558:	080085f3 	.word	0x080085f3
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	699a      	ldr	r2, [r3, #24]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 0203 	bic.w	r2, r2, #3
 800856a:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	699a      	ldr	r2, [r3, #24]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800857a:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	699a      	ldr	r2, [r3, #24]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f042 0208 	orr.w	r2, r2, #8
 800858a:	619a      	str	r2, [r3, #24]


		break;
 800858c:	e04b      	b.n	8008626 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	699a      	ldr	r2, [r3, #24]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800859c:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	699a      	ldr	r2, [r3, #24]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80085ac:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	699a      	ldr	r2, [r3, #24]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085bc:	619a      	str	r2, [r3, #24]

		break;
 80085be:	e032      	b.n	8008626 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	69da      	ldr	r2, [r3, #28]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f022 0203 	bic.w	r2, r2, #3
 80085ce:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	69da      	ldr	r2, [r3, #28]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80085de:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	69da      	ldr	r2, [r3, #28]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f042 0208 	orr.w	r2, r2, #8
 80085ee:	61da      	str	r2, [r3, #28]

		break;
 80085f0:	e019      	b.n	8008626 <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69da      	ldr	r2, [r3, #28]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008600:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69da      	ldr	r2, [r3, #28]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8008610:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69da      	ldr	r2, [r3, #28]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008620:	61da      	str	r2, [r3, #28]

		break;
 8008622:	e000      	b.n	8008626 <pwm_Config+0x1b6>
	}

	default:{
		break;
 8008624:	bf00      	nop
	}// fin del switch-case




}
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	40010000 	.word	0x40010000
 8008634:	40023800 	.word	0x40023800
 8008638:	40000400 	.word	0x40000400
 800863c:	40000800 	.word	0x40000800
 8008640:	40000c00 	.word	0x40000c00

08008644 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f042 0201 	orr.w	r2, r2, #1
 800865a:	601a      	str	r2, [r3, #0]

}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a3d      	ldr	r2, [pc, #244]	; (800876c <enableOutput+0x104>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d13a      	bne.n	80086f0 <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008688:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	7a1b      	ldrb	r3, [r3, #8]
 800868e:	2b03      	cmp	r3, #3
 8008690:	d862      	bhi.n	8008758 <enableOutput+0xf0>
 8008692:	a201      	add	r2, pc, #4	; (adr r2, 8008698 <enableOutput+0x30>)
 8008694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008698:	080086a9 	.word	0x080086a9
 800869c:	080086bb 	.word	0x080086bb
 80086a0:	080086cd 	.word	0x080086cd
 80086a4:	080086df 	.word	0x080086df
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6a1a      	ldr	r2, [r3, #32]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f042 0201 	orr.w	r2, r2, #1
 80086b6:	621a      	str	r2, [r3, #32]

				break;
 80086b8:	e051      	b.n	800875e <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6a1a      	ldr	r2, [r3, #32]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f042 0210 	orr.w	r2, r2, #16
 80086c8:	621a      	str	r2, [r3, #32]

				break;
 80086ca:	e048      	b.n	800875e <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6a1a      	ldr	r2, [r3, #32]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086da:	621a      	str	r2, [r3, #32]

				break;
 80086dc:	e03f      	b.n	800875e <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6a1a      	ldr	r2, [r3, #32]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086ec:	621a      	str	r2, [r3, #32]

				break;
 80086ee:	e036      	b.n	800875e <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	7a1b      	ldrb	r3, [r3, #8]
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d831      	bhi.n	800875c <enableOutput+0xf4>
 80086f8:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <enableOutput+0x98>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	08008711 	.word	0x08008711
 8008704:	08008723 	.word	0x08008723
 8008708:	08008735 	.word	0x08008735
 800870c:	08008747 	.word	0x08008747
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6a1a      	ldr	r2, [r3, #32]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f042 0201 	orr.w	r2, r2, #1
 800871e:	621a      	str	r2, [r3, #32]

				break;
 8008720:	e01d      	b.n	800875e <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6a1a      	ldr	r2, [r3, #32]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f042 0210 	orr.w	r2, r2, #16
 8008730:	621a      	str	r2, [r3, #32]

				break;
 8008732:	e014      	b.n	800875e <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6a1a      	ldr	r2, [r3, #32]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008742:	621a      	str	r2, [r3, #32]

				break;
 8008744:	e00b      	b.n	800875e <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	6a1a      	ldr	r2, [r3, #32]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008754:	621a      	str	r2, [r3, #32]

				break;
 8008756:	e002      	b.n	800875e <enableOutput+0xf6>
				break;
 8008758:	bf00      	nop
 800875a:	e000      	b.n	800875e <enableOutput+0xf6>
			}

			default: {
				break;
 800875c:	bf00      	nop
			}

		}
	}
	return SET;
 800875e:	2301      	movs	r3, #1
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	40010000 	.word	0x40010000

08008770 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	68d2      	ldr	r2, [r2, #12]
 8008784:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b10      	cmp	r3, #16
 8008790:	d01a      	beq.n	80087c8 <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b14      	cmp	r3, #20
 8008796:	d017      	beq.n	80087c8 <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b1e      	cmp	r3, #30
 800879c:	d014      	beq.n	80087c8 <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b28      	cmp	r3, #40	; 0x28
 80087a2:	d011      	beq.n	80087c8 <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b32      	cmp	r3, #50	; 0x32
 80087a8:	d00e      	beq.n	80087c8 <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2b3c      	cmp	r3, #60	; 0x3c
 80087ae:	d00b      	beq.n	80087c8 <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2b46      	cmp	r3, #70	; 0x46
 80087b4:	d008      	beq.n	80087c8 <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2b50      	cmp	r3, #80	; 0x50
 80087ba:	d005      	beq.n	80087c8 <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b5a      	cmp	r3, #90	; 0x5a
 80087c0:	d002      	beq.n	80087c8 <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b64      	cmp	r3, #100	; 0x64
 80087c6:	d118      	bne.n	80087fa <setFrequency+0x8a>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80087ce:	f04f 0200 	mov.w	r2, #0
 80087d2:	4b7b      	ldr	r3, [pc, #492]	; (80089c0 <setFrequency+0x250>)
 80087d4:	f7f7 ff28 	bl	8000628 <__aeabi_dmul>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4610      	mov	r0, r2
 80087de:	4619      	mov	r1, r3
 80087e0:	f7f8 f9fa 	bl	8000bd8 <__aeabi_d2uiz>
 80087e4:	4603      	mov	r3, r0
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	4b76      	ldr	r3, [pc, #472]	; (80089c4 <setFrequency+0x254>)
 80087ea:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80087ec:	4b75      	ldr	r3, [pc, #468]	; (80089c4 <setFrequency+0x254>)
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	1e5a      	subs	r2, r3, #1
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80087f8:	e0dd      	b.n	80089b6 <setFrequency+0x246>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2ba0      	cmp	r3, #160	; 0xa0
 80087fe:	d022      	beq.n	8008846 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_20MHz_10us)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2bc8      	cmp	r3, #200	; 0xc8
 8008804:	d01f      	beq.n	8008846 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_30MHz_10us)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800880c:	d01b      	beq.n	8008846 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_40MHz_10us)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8008814:	d017      	beq.n	8008846 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_50MHz_10us)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800881c:	d013      	beq.n	8008846 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_60MHz_10us)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8008824:	d00f      	beq.n	8008846 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_70MHz_10us)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800882c:	d00b      	beq.n	8008846 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_80MHz_10us)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008834:	d007      	beq.n	8008846 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_90MHz_10us)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800883c:	d003      	beq.n	8008846 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008844:	d118      	bne.n	8008878 <setFrequency+0x108>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800884c:	f04f 0200 	mov.w	r2, #0
 8008850:	4b5d      	ldr	r3, [pc, #372]	; (80089c8 <setFrequency+0x258>)
 8008852:	f7f7 fee9 	bl	8000628 <__aeabi_dmul>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	4610      	mov	r0, r2
 800885c:	4619      	mov	r1, r3
 800885e:	f7f8 f9bb 	bl	8000bd8 <__aeabi_d2uiz>
 8008862:	4603      	mov	r3, r0
 8008864:	b29a      	uxth	r2, r3
 8008866:	4b57      	ldr	r3, [pc, #348]	; (80089c4 <setFrequency+0x254>)
 8008868:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800886a:	4b56      	ldr	r3, [pc, #344]	; (80089c4 <setFrequency+0x254>)
 800886c:	881b      	ldrh	r3, [r3, #0]
 800886e:	1e5a      	subs	r2, r3, #1
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	62da      	str	r2, [r3, #44]	; 0x2c
 8008876:	e09e      	b.n	80089b6 <setFrequency+0x246>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800887e:	d029      	beq.n	80088d4 <setFrequency+0x164>
		   || (speed == PWM_SPEED_20MHz_100us)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008886:	d025      	beq.n	80088d4 <setFrequency+0x164>
		   || (speed == PWM_SPEED_30MHz_100us)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800888e:	4293      	cmp	r3, r2
 8008890:	d020      	beq.n	80088d4 <setFrequency+0x164>
		   || (speed == PWM_SPEED_40MHz_100us)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008898:	d01c      	beq.n	80088d4 <setFrequency+0x164>
		   || (speed == PWM_SPEED_50MHz_100us)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f241 3288 	movw	r2, #5000	; 0x1388
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d017      	beq.n	80088d4 <setFrequency+0x164>
		   || (speed == PWM_SPEED_60MHz_100us)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f241 7270 	movw	r2, #6000	; 0x1770
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d012      	beq.n	80088d4 <setFrequency+0x164>
		   || (speed == PWM_SPEED_70MHz_100us)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f641 3258 	movw	r2, #7000	; 0x1b58
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d00d      	beq.n	80088d4 <setFrequency+0x164>
		   || (speed == PWM_SPEED_80MHz_100us)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80088be:	d009      	beq.n	80088d4 <setFrequency+0x164>
		   || (speed == PWM_SPEED_90MHz_100us)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f242 3228 	movw	r2, #9000	; 0x2328
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d004      	beq.n	80088d4 <setFrequency+0x164>
		   || (speed == PWM_SPEED_100MHz_100us)){
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f242 7210 	movw	r2, #10000	; 0x2710
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d118      	bne.n	8008906 <setFrequency+0x196>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80088da:	f04f 0200 	mov.w	r2, #0
 80088de:	4b3b      	ldr	r3, [pc, #236]	; (80089cc <setFrequency+0x25c>)
 80088e0:	f7f7 fea2 	bl	8000628 <__aeabi_dmul>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4610      	mov	r0, r2
 80088ea:	4619      	mov	r1, r3
 80088ec:	f7f8 f974 	bl	8000bd8 <__aeabi_d2uiz>
 80088f0:	4603      	mov	r3, r0
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	4b33      	ldr	r3, [pc, #204]	; (80089c4 <setFrequency+0x254>)
 80088f6:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80088f8:	4b32      	ldr	r3, [pc, #200]	; (80089c4 <setFrequency+0x254>)
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	1e5a      	subs	r2, r3, #1
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	62da      	str	r2, [r3, #44]	; 0x2c
 8008904:	e057      	b.n	80089b6 <setFrequency+0x246>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800890c:	d028      	beq.n	8008960 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_20MHz_1ms)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008914:	4293      	cmp	r3, r2
 8008916:	d023      	beq.n	8008960 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_30MHz_1ms)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f247 5230 	movw	r2, #30000	; 0x7530
 800891e:	4293      	cmp	r3, r2
 8008920:	d01e      	beq.n	8008960 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_40MHz_1ms)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f649 4240 	movw	r2, #40000	; 0x9c40
 8008928:	4293      	cmp	r3, r2
 800892a:	d019      	beq.n	8008960 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_50MHz_1ms)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008932:	4293      	cmp	r3, r2
 8008934:	d014      	beq.n	8008960 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_60MHz_1ms)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f64e 2260 	movw	r2, #60000	; 0xea60
 800893c:	4293      	cmp	r3, r2
 800893e:	d00f      	beq.n	8008960 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_70MHz_1ms)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4a23      	ldr	r2, [pc, #140]	; (80089d0 <setFrequency+0x260>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d00b      	beq.n	8008960 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_80MHz_1ms)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4a22      	ldr	r2, [pc, #136]	; (80089d4 <setFrequency+0x264>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d007      	beq.n	8008960 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_90MHz_1ms)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4a21      	ldr	r2, [pc, #132]	; (80089d8 <setFrequency+0x268>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d003      	beq.n	8008960 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	4a20      	ldr	r2, [pc, #128]	; (80089dc <setFrequency+0x26c>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d111      	bne.n	8008984 <setFrequency+0x214>

		periodo = ptrPwmHandler->config.periodo;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008966:	4610      	mov	r0, r2
 8008968:	4619      	mov	r1, r3
 800896a:	f7f8 f935 	bl	8000bd8 <__aeabi_d2uiz>
 800896e:	4603      	mov	r3, r0
 8008970:	b29a      	uxth	r2, r3
 8008972:	4b14      	ldr	r3, [pc, #80]	; (80089c4 <setFrequency+0x254>)
 8008974:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008976:	4b13      	ldr	r3, [pc, #76]	; (80089c4 <setFrequency+0x254>)
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	1e5a      	subs	r2, r3, #1
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	62da      	str	r2, [r3, #44]	; 0x2c
 8008982:	e018      	b.n	80089b6 <setFrequency+0x246>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800898a:	f04f 0200 	mov.w	r2, #0
 800898e:	4b14      	ldr	r3, [pc, #80]	; (80089e0 <setFrequency+0x270>)
 8008990:	f7f7 ff74 	bl	800087c <__aeabi_ddiv>
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	4610      	mov	r0, r2
 800899a:	4619      	mov	r1, r3
 800899c:	f7f8 f91c 	bl	8000bd8 <__aeabi_d2uiz>
 80089a0:	4603      	mov	r3, r0
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	4b07      	ldr	r3, [pc, #28]	; (80089c4 <setFrequency+0x254>)
 80089a6:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80089a8:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <setFrequency+0x254>)
 80089aa:	881b      	ldrh	r3, [r3, #0]
 80089ac:	1e5a      	subs	r2, r3, #1
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	408f4000 	.word	0x408f4000
 80089c4:	20012264 	.word	0x20012264
 80089c8:	40590000 	.word	0x40590000
 80089cc:	40240000 	.word	0x40240000
 80089d0:	00011170 	.word	0x00011170
 80089d4:	00013880 	.word	0x00013880
 80089d8:	00015f90 	.word	0x00015f90
 80089dc:	000186a0 	.word	0x000186a0
 80089e0:	40340000 	.word	0x40340000

080089e4 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 80089e4:	b590      	push	{r4, r7, lr}
 80089e6:	b08b      	sub	sp, #44	; 0x2c
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	7a1b      	ldrb	r3, [r3, #8]
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	f200 80c3 	bhi.w	8008b7c <setDuttyCycle+0x198>
 80089f6:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <setDuttyCycle+0x18>)
 80089f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fc:	08008a0d 	.word	0x08008a0d
 8008a00:	08008a69 	.word	0x08008a69
 8008a04:	08008ac5 	.word	0x08008ac5
 8008a08:	08008b21 	.word	0x08008b21
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	ed93 7a06 	vldr	s14, [r3, #24]
 8008a12:	4b5d      	ldr	r3, [pc, #372]	; (8008b88 <setDuttyCycle+0x1a4>)
 8008a14:	881b      	ldrh	r3, [r3, #0]
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a22:	ee17 0a90 	vmov	r0, s15
 8008a26:	f7f7 fda7 	bl	8000578 <__aeabi_f2d>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 8008a32:	f04f 0200 	mov.w	r2, #0
 8008a36:	4b55      	ldr	r3, [pc, #340]	; (8008b8c <setDuttyCycle+0x1a8>)
 8008a38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a3c:	f7f7 ff1e 	bl	800087c <__aeabi_ddiv>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4610      	mov	r0, r2
 8008a46:	4619      	mov	r1, r3
 8008a48:	f04f 0200 	mov.w	r2, #0
 8008a4c:	4b50      	ldr	r3, [pc, #320]	; (8008b90 <setDuttyCycle+0x1ac>)
 8008a4e:	f7f7 fc33 	bl	80002b8 <__aeabi_dsub>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4610      	mov	r0, r2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681c      	ldr	r4, [r3, #0]
 8008a5e:	f7f8 f8bb 	bl	8000bd8 <__aeabi_d2uiz>
 8008a62:	4603      	mov	r3, r0
 8008a64:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8008a66:	e08a      	b.n	8008b7e <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	ed93 7a06 	vldr	s14, [r3, #24]
 8008a6e:	4b46      	ldr	r3, [pc, #280]	; (8008b88 <setDuttyCycle+0x1a4>)
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	ee07 3a90 	vmov	s15, r3
 8008a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7e:	ee17 0a90 	vmov	r0, s15
 8008a82:	f7f7 fd79 	bl	8000578 <__aeabi_f2d>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 8008a8e:	f04f 0200 	mov.w	r2, #0
 8008a92:	4b3e      	ldr	r3, [pc, #248]	; (8008b8c <setDuttyCycle+0x1a8>)
 8008a94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008a98:	f7f7 fef0 	bl	800087c <__aeabi_ddiv>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	f04f 0200 	mov.w	r2, #0
 8008aa8:	4b39      	ldr	r3, [pc, #228]	; (8008b90 <setDuttyCycle+0x1ac>)
 8008aaa:	f7f7 fc05 	bl	80002b8 <__aeabi_dsub>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	4610      	mov	r0, r2
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681c      	ldr	r4, [r3, #0]
 8008aba:	f7f8 f88d 	bl	8000bd8 <__aeabi_d2uiz>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8008ac2:	e05c      	b.n	8008b7e <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	ed93 7a06 	vldr	s14, [r3, #24]
 8008aca:	4b2f      	ldr	r3, [pc, #188]	; (8008b88 <setDuttyCycle+0x1a4>)
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ada:	ee17 0a90 	vmov	r0, s15
 8008ade:	f7f7 fd4b 	bl	8000578 <__aeabi_f2d>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 8008aea:	f04f 0200 	mov.w	r2, #0
 8008aee:	4b27      	ldr	r3, [pc, #156]	; (8008b8c <setDuttyCycle+0x1a8>)
 8008af0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008af4:	f7f7 fec2 	bl	800087c <__aeabi_ddiv>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	4610      	mov	r0, r2
 8008afe:	4619      	mov	r1, r3
 8008b00:	f04f 0200 	mov.w	r2, #0
 8008b04:	4b22      	ldr	r3, [pc, #136]	; (8008b90 <setDuttyCycle+0x1ac>)
 8008b06:	f7f7 fbd7 	bl	80002b8 <__aeabi_dsub>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4610      	mov	r0, r2
 8008b10:	4619      	mov	r1, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681c      	ldr	r4, [r3, #0]
 8008b16:	f7f8 f85f 	bl	8000bd8 <__aeabi_d2uiz>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8008b1e:	e02e      	b.n	8008b7e <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	ed93 7a06 	vldr	s14, [r3, #24]
 8008b26:	4b18      	ldr	r3, [pc, #96]	; (8008b88 <setDuttyCycle+0x1a4>)
 8008b28:	881b      	ldrh	r3, [r3, #0]
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b36:	ee17 0a90 	vmov	r0, s15
 8008b3a:	f7f7 fd1d 	bl	8000578 <__aeabi_f2d>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	4b10      	ldr	r3, [pc, #64]	; (8008b8c <setDuttyCycle+0x1a8>)
 8008b4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b50:	f7f7 fe94 	bl	800087c <__aeabi_ddiv>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4610      	mov	r0, r2
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	f04f 0200 	mov.w	r2, #0
 8008b60:	4b0b      	ldr	r3, [pc, #44]	; (8008b90 <setDuttyCycle+0x1ac>)
 8008b62:	f7f7 fba9 	bl	80002b8 <__aeabi_dsub>
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	4610      	mov	r0, r2
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681c      	ldr	r4, [r3, #0]
 8008b72:	f7f8 f831 	bl	8000bd8 <__aeabi_d2uiz>
 8008b76:	4603      	mov	r3, r0
 8008b78:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8008b7a:	e000      	b.n	8008b7e <setDuttyCycle+0x19a>
	}

	default:{
		break;
 8008b7c:	bf00      	nop
	}

	}// fin del switch-case

}
 8008b7e:	bf00      	nop
 8008b80:	372c      	adds	r7, #44	; 0x2c
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd90      	pop	{r4, r7, pc}
 8008b86:	bf00      	nop
 8008b88:	20012264 	.word	0x20012264
 8008b8c:	40590000 	.word	0x40590000
 8008b90:	3ff00000 	.word	0x3ff00000

08008b94 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8008b94:	b590      	push	{r4, r7, lr}
 8008b96:	b08b      	sub	sp, #44	; 0x2c
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	7a1b      	ldrb	r3, [r3, #8]
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	f200 80d3 	bhi.w	8008d4c <setDuttyCycleAfOpt+0x1b8>
 8008ba6:	a201      	add	r2, pc, #4	; (adr r2, 8008bac <setDuttyCycleAfOpt+0x18>)
 8008ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bac:	08008bbd 	.word	0x08008bbd
 8008bb0:	08008c21 	.word	0x08008c21
 8008bb4:	08008c85 	.word	0x08008c85
 8008bb8:	08008ce9 	.word	0x08008ce9
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	edd3 7a06 	vldr	s15, [r3, #24]
 8008bc2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8008d58 <setDuttyCycleAfOpt+0x1c4>
 8008bc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bca:	4b64      	ldr	r3, [pc, #400]	; (8008d5c <setDuttyCycleAfOpt+0x1c8>)
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	ee07 3a90 	vmov	s15, r3
 8008bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bda:	ee17 0a90 	vmov	r0, s15
 8008bde:	f7f7 fccb 	bl	8000578 <__aeabi_f2d>
 8008be2:	4602      	mov	r2, r0
 8008be4:	460b      	mov	r3, r1
 8008be6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 8008bea:	f04f 0200 	mov.w	r2, #0
 8008bee:	4b5c      	ldr	r3, [pc, #368]	; (8008d60 <setDuttyCycleAfOpt+0x1cc>)
 8008bf0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bf4:	f7f7 fe42 	bl	800087c <__aeabi_ddiv>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	4619      	mov	r1, r3
 8008c00:	f04f 0200 	mov.w	r2, #0
 8008c04:	4b57      	ldr	r3, [pc, #348]	; (8008d64 <setDuttyCycleAfOpt+0x1d0>)
 8008c06:	f7f7 fb57 	bl	80002b8 <__aeabi_dsub>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4619      	mov	r1, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681c      	ldr	r4, [r3, #0]
 8008c16:	f7f7 ffdf 	bl	8000bd8 <__aeabi_d2uiz>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8008c1e:	e096      	b.n	8008d4e <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	edd3 7a06 	vldr	s15, [r3, #24]
 8008c26:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8008d58 <setDuttyCycleAfOpt+0x1c4>
 8008c2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008c2e:	4b4b      	ldr	r3, [pc, #300]	; (8008d5c <setDuttyCycleAfOpt+0x1c8>)
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	ee07 3a90 	vmov	s15, r3
 8008c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c3e:	ee17 0a90 	vmov	r0, s15
 8008c42:	f7f7 fc99 	bl	8000578 <__aeabi_f2d>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 8008c4e:	f04f 0200 	mov.w	r2, #0
 8008c52:	4b43      	ldr	r3, [pc, #268]	; (8008d60 <setDuttyCycleAfOpt+0x1cc>)
 8008c54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008c58:	f7f7 fe10 	bl	800087c <__aeabi_ddiv>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	4610      	mov	r0, r2
 8008c62:	4619      	mov	r1, r3
 8008c64:	f04f 0200 	mov.w	r2, #0
 8008c68:	4b3e      	ldr	r3, [pc, #248]	; (8008d64 <setDuttyCycleAfOpt+0x1d0>)
 8008c6a:	f7f7 fb25 	bl	80002b8 <__aeabi_dsub>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	4610      	mov	r0, r2
 8008c74:	4619      	mov	r1, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681c      	ldr	r4, [r3, #0]
 8008c7a:	f7f7 ffad 	bl	8000bd8 <__aeabi_d2uiz>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8008c82:	e064      	b.n	8008d4e <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	edd3 7a06 	vldr	s15, [r3, #24]
 8008c8a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8008d58 <setDuttyCycleAfOpt+0x1c4>
 8008c8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008c92:	4b32      	ldr	r3, [pc, #200]	; (8008d5c <setDuttyCycleAfOpt+0x1c8>)
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	ee07 3a90 	vmov	s15, r3
 8008c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ca2:	ee17 0a90 	vmov	r0, s15
 8008ca6:	f7f7 fc67 	bl	8000578 <__aeabi_f2d>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 8008cb2:	f04f 0200 	mov.w	r2, #0
 8008cb6:	4b2a      	ldr	r3, [pc, #168]	; (8008d60 <setDuttyCycleAfOpt+0x1cc>)
 8008cb8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008cbc:	f7f7 fdde 	bl	800087c <__aeabi_ddiv>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	f04f 0200 	mov.w	r2, #0
 8008ccc:	4b25      	ldr	r3, [pc, #148]	; (8008d64 <setDuttyCycleAfOpt+0x1d0>)
 8008cce:	f7f7 faf3 	bl	80002b8 <__aeabi_dsub>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	4619      	mov	r1, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681c      	ldr	r4, [r3, #0]
 8008cde:	f7f7 ff7b 	bl	8000bd8 <__aeabi_d2uiz>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8008ce6:	e032      	b.n	8008d4e <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	edd3 7a06 	vldr	s15, [r3, #24]
 8008cee:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008d58 <setDuttyCycleAfOpt+0x1c4>
 8008cf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008cf6:	4b19      	ldr	r3, [pc, #100]	; (8008d5c <setDuttyCycleAfOpt+0x1c8>)
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	ee07 3a90 	vmov	s15, r3
 8008cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d06:	ee17 0a90 	vmov	r0, s15
 8008d0a:	f7f7 fc35 	bl	8000578 <__aeabi_f2d>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 8008d16:	f04f 0200 	mov.w	r2, #0
 8008d1a:	4b11      	ldr	r3, [pc, #68]	; (8008d60 <setDuttyCycleAfOpt+0x1cc>)
 8008d1c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008d20:	f7f7 fdac 	bl	800087c <__aeabi_ddiv>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4610      	mov	r0, r2
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	f04f 0200 	mov.w	r2, #0
 8008d30:	4b0c      	ldr	r3, [pc, #48]	; (8008d64 <setDuttyCycleAfOpt+0x1d0>)
 8008d32:	f7f7 fac1 	bl	80002b8 <__aeabi_dsub>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681c      	ldr	r4, [r3, #0]
 8008d42:	f7f7 ff49 	bl	8000bd8 <__aeabi_d2uiz>
 8008d46:	4603      	mov	r3, r0
 8008d48:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8008d4a:	e000      	b.n	8008d4e <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 8008d4c:	bf00      	nop
	}

	}// fin del switch-case


}
 8008d4e:	bf00      	nop
 8008d50:	372c      	adds	r7, #44	; 0x2c
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd90      	pop	{r4, r7, pc}
 8008d56:	bf00      	nop
 8008d58:	42c80000 	.word	0x42c80000
 8008d5c:	20012264 	.word	0x20012264
 8008d60:	40590000 	.word	0x40590000
 8008d64:	3ff00000 	.word	0x3ff00000

08008d68 <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	7a1b      	ldrb	r3, [r3, #8]
 8008d74:	2b03      	cmp	r3, #3
 8008d76:	d82f      	bhi.n	8008dd8 <disableOutput+0x70>
 8008d78:	a201      	add	r2, pc, #4	; (adr r2, 8008d80 <disableOutput+0x18>)
 8008d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7e:	bf00      	nop
 8008d80:	08008d91 	.word	0x08008d91
 8008d84:	08008da3 	.word	0x08008da3
 8008d88:	08008db5 	.word	0x08008db5
 8008d8c:	08008dc7 	.word	0x08008dc7
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6a1a      	ldr	r2, [r3, #32]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 0201 	bic.w	r2, r2, #1
 8008d9e:	621a      	str	r2, [r3, #32]

			break;
 8008da0:	e01b      	b.n	8008dda <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6a1a      	ldr	r2, [r3, #32]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 0210 	bic.w	r2, r2, #16
 8008db0:	621a      	str	r2, [r3, #32]

			break;
 8008db2:	e012      	b.n	8008dda <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	6a1a      	ldr	r2, [r3, #32]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dc2:	621a      	str	r2, [r3, #32]

			break;
 8008dc4:	e009      	b.n	8008dda <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	6a1a      	ldr	r2, [r3, #32]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008dd4:	621a      	str	r2, [r3, #32]

			break;
 8008dd6:	e000      	b.n	8008dda <disableOutput+0x72>
		}

		default: {
			break;
 8008dd8:	bf00      	nop
		}
		}

	return RESET;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <PWMx_Toggle>:

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	7a1b      	ldrb	r3, [r3, #8]
 8008df4:	2b03      	cmp	r3, #3
 8008df6:	d82f      	bhi.n	8008e58 <PWMx_Toggle+0x70>
 8008df8:	a201      	add	r2, pc, #4	; (adr r2, 8008e00 <PWMx_Toggle+0x18>)
 8008dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfe:	bf00      	nop
 8008e00:	08008e11 	.word	0x08008e11
 8008e04:	08008e23 	.word	0x08008e23
 8008e08:	08008e35 	.word	0x08008e35
 8008e0c:	08008e47 	.word	0x08008e47
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6a1a      	ldr	r2, [r3, #32]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f082 0202 	eor.w	r2, r2, #2
 8008e1e:	621a      	str	r2, [r3, #32]

				break;
 8008e20:	e01b      	b.n	8008e5a <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	6a1a      	ldr	r2, [r3, #32]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f082 0220 	eor.w	r2, r2, #32
 8008e30:	621a      	str	r2, [r3, #32]

				break;
 8008e32:	e012      	b.n	8008e5a <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6a1a      	ldr	r2, [r3, #32]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8008e42:	621a      	str	r2, [r3, #32]

				break;
 8008e44:	e009      	b.n	8008e5a <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6a1a      	ldr	r2, [r3, #32]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8008e54:	621a      	str	r2, [r3, #32]

				break;
 8008e56:	e000      	b.n	8008e5a <PWMx_Toggle+0x72>
			}

			default: {
				break;
 8008e58:	bf00      	nop
			}
			}


}
 8008e5a:	bf00      	nop
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop

08008e68 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 8008e72:	4b92      	ldr	r3, [pc, #584]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a91      	ldr	r2, [pc, #580]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008e78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e7c:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8008e7e:	4b8f      	ldr	r3, [pc, #572]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e84:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 8008e86:	4b8e      	ldr	r3, [pc, #568]	; (80090c0 <RCC_enableMaxFrequencies+0x258>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a8d      	ldr	r2, [pc, #564]	; (80090c0 <RCC_enableMaxFrequencies+0x258>)
 8008e8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e90:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 8008e92:	4b8a      	ldr	r3, [pc, #552]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	4a89      	ldr	r2, [pc, #548]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008e98:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008e9c:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 8008e9e:	79fb      	ldrb	r3, [r7, #7]
 8008ea0:	2b08      	cmp	r3, #8
 8008ea2:	f200 82fc 	bhi.w	800949e <RCC_enableMaxFrequencies+0x636>
 8008ea6:	a201      	add	r2, pc, #4	; (adr r2, 8008eac <RCC_enableMaxFrequencies+0x44>)
 8008ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eac:	08008ed1 	.word	0x08008ed1
 8008eb0:	08008f73 	.word	0x08008f73
 8008eb4:	08009015 	.word	0x08009015
 8008eb8:	080090c9 	.word	0x080090c9
 8008ebc:	0800916b 	.word	0x0800916b
 8008ec0:	0800920d 	.word	0x0800920d
 8008ec4:	080092b9 	.word	0x080092b9
 8008ec8:	0800935b 	.word	0x0800935b
 8008ecc:	080093fd 	.word	0x080093fd
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008ed0:	4b7a      	ldr	r3, [pc, #488]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	4a79      	ldr	r2, [pc, #484]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008ed6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008eda:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008edc:	4b77      	ldr	r3, [pc, #476]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	4a76      	ldr	r2, [pc, #472]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008ee2:	f043 0310 	orr.w	r3, r3, #16
 8008ee6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008ee8:	4b74      	ldr	r3, [pc, #464]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	4a73      	ldr	r2, [pc, #460]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008eee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ef6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8008ef8:	4b70      	ldr	r3, [pc, #448]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	4a6f      	ldr	r2, [pc, #444]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008efe:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8008f02:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008f04:	4b6d      	ldr	r3, [pc, #436]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	4a6c      	ldr	r2, [pc, #432]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f0a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008f0e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8008f10:	4b6a      	ldr	r3, [pc, #424]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	4a69      	ldr	r2, [pc, #420]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f1a:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008f1c:	4b67      	ldr	r3, [pc, #412]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	4a66      	ldr	r2, [pc, #408]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f26:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008f28:	4b64      	ldr	r3, [pc, #400]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	4a63      	ldr	r2, [pc, #396]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f32:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8008f34:	4b61      	ldr	r3, [pc, #388]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	4a60      	ldr	r2, [pc, #384]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f3e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008f40:	4b5e      	ldr	r3, [pc, #376]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a5d      	ldr	r2, [pc, #372]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f4a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008f4c:	e000      	b.n	8008f50 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 8008f4e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008f50:	4b5a      	ldr	r3, [pc, #360]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0f8      	beq.n	8008f4e <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008f5c:	4b59      	ldr	r3, [pc, #356]	; (80090c4 <RCC_enableMaxFrequencies+0x25c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a58      	ldr	r2, [pc, #352]	; (80090c4 <RCC_enableMaxFrequencies+0x25c>)
 8008f62:	f023 030f 	bic.w	r3, r3, #15
 8008f66:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8008f68:	4b56      	ldr	r3, [pc, #344]	; (80090c4 <RCC_enableMaxFrequencies+0x25c>)
 8008f6a:	4a56      	ldr	r2, [pc, #344]	; (80090c4 <RCC_enableMaxFrequencies+0x25c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	6013      	str	r3, [r2, #0]

			break;
 8008f70:	e296      	b.n	80094a0 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008f72:	4b52      	ldr	r3, [pc, #328]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	4a51      	ldr	r2, [pc, #324]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f7c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008f7e:	4b4f      	ldr	r3, [pc, #316]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	4a4e      	ldr	r2, [pc, #312]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f84:	f043 0310 	orr.w	r3, r3, #16
 8008f88:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008f8a:	4b4c      	ldr	r3, [pc, #304]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	4a4b      	ldr	r2, [pc, #300]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f90:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f98:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8008f9a:	4b48      	ldr	r3, [pc, #288]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	4a47      	ldr	r2, [pc, #284]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008fa0:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8008fa4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008fa6:	4b45      	ldr	r3, [pc, #276]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	4a44      	ldr	r2, [pc, #272]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008fac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008fb0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 8008fb2:	4b42      	ldr	r3, [pc, #264]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	4a41      	ldr	r2, [pc, #260]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fbc:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008fbe:	4b3f      	ldr	r3, [pc, #252]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	4a3e      	ldr	r2, [pc, #248]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fc8:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008fca:	4b3c      	ldr	r3, [pc, #240]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	4a3b      	ldr	r2, [pc, #236]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008fd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fd4:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8008fd6:	4b39      	ldr	r3, [pc, #228]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	4a38      	ldr	r2, [pc, #224]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fe0:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008fe2:	4b36      	ldr	r3, [pc, #216]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a35      	ldr	r2, [pc, #212]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008fe8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fec:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008fee:	e000      	b.n	8008ff2 <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 8008ff0:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008ff2:	4b32      	ldr	r3, [pc, #200]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d0f8      	beq.n	8008ff0 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008ffe:	4b31      	ldr	r3, [pc, #196]	; (80090c4 <RCC_enableMaxFrequencies+0x25c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a30      	ldr	r2, [pc, #192]	; (80090c4 <RCC_enableMaxFrequencies+0x25c>)
 8009004:	f023 030f 	bic.w	r3, r3, #15
 8009008:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800900a:	4b2e      	ldr	r3, [pc, #184]	; (80090c4 <RCC_enableMaxFrequencies+0x25c>)
 800900c:	4a2d      	ldr	r2, [pc, #180]	; (80090c4 <RCC_enableMaxFrequencies+0x25c>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6013      	str	r3, [r2, #0]

			break;
 8009012:	e245      	b.n	80094a0 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009014:	4b29      	ldr	r3, [pc, #164]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	4a28      	ldr	r2, [pc, #160]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 800901a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800901e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009020:	4b26      	ldr	r3, [pc, #152]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	4a25      	ldr	r2, [pc, #148]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8009026:	f043 0310 	orr.w	r3, r3, #16
 800902a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800902c:	4b23      	ldr	r3, [pc, #140]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	4a22      	ldr	r2, [pc, #136]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8009032:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800903a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 800903c:	4b1f      	ldr	r3, [pc, #124]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	4a1e      	ldr	r2, [pc, #120]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8009042:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8009046:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009048:	4b1c      	ldr	r3, [pc, #112]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	4a1b      	ldr	r2, [pc, #108]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 800904e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009052:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8009054:	4b19      	ldr	r3, [pc, #100]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	4a18      	ldr	r2, [pc, #96]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 800905a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800905e:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009060:	4b16      	ldr	r3, [pc, #88]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	4a15      	ldr	r2, [pc, #84]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8009066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800906a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800906c:	4b13      	ldr	r3, [pc, #76]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	4a12      	ldr	r2, [pc, #72]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8009072:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009076:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8009078:	4b10      	ldr	r3, [pc, #64]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	4a0f      	ldr	r2, [pc, #60]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 800907e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009082:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009084:	4b0d      	ldr	r3, [pc, #52]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a0c      	ldr	r2, [pc, #48]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 800908a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800908e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009090:	e000      	b.n	8009094 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 8009092:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009094:	4b09      	ldr	r3, [pc, #36]	; (80090bc <RCC_enableMaxFrequencies+0x254>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d0f8      	beq.n	8009092 <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80090a0:	4b08      	ldr	r3, [pc, #32]	; (80090c4 <RCC_enableMaxFrequencies+0x25c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a07      	ldr	r2, [pc, #28]	; (80090c4 <RCC_enableMaxFrequencies+0x25c>)
 80090a6:	f023 030f 	bic.w	r3, r3, #15
 80090aa:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80090ac:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <RCC_enableMaxFrequencies+0x25c>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a04      	ldr	r2, [pc, #16]	; (80090c4 <RCC_enableMaxFrequencies+0x25c>)
 80090b2:	f043 0301 	orr.w	r3, r3, #1
 80090b6:	6013      	str	r3, [r2, #0]


			break;
 80090b8:	e1f2      	b.n	80094a0 <RCC_enableMaxFrequencies+0x638>
 80090ba:	bf00      	nop
 80090bc:	40023800 	.word	0x40023800
 80090c0:	40007000 	.word	0x40007000
 80090c4:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80090c8:	4b79      	ldr	r3, [pc, #484]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	4a78      	ldr	r2, [pc, #480]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80090ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80090d2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80090d4:	4b76      	ldr	r3, [pc, #472]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	4a75      	ldr	r2, [pc, #468]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80090da:	f043 0310 	orr.w	r3, r3, #16
 80090de:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80090e0:	4b73      	ldr	r3, [pc, #460]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	4a72      	ldr	r2, [pc, #456]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80090e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80090ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 80090f0:	4b6f      	ldr	r3, [pc, #444]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	4a6e      	ldr	r2, [pc, #440]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80090f6:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 80090fa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80090fc:	4b6c      	ldr	r3, [pc, #432]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	4a6b      	ldr	r2, [pc, #428]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009102:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009106:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009108:	4b69      	ldr	r3, [pc, #420]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800910a:	4a69      	ldr	r2, [pc, #420]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009110:	4b67      	ldr	r3, [pc, #412]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	4a66      	ldr	r2, [pc, #408]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800911a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800911c:	4b64      	ldr	r3, [pc, #400]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	4a63      	ldr	r2, [pc, #396]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009122:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009126:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8009128:	4b61      	ldr	r3, [pc, #388]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	4a60      	ldr	r2, [pc, #384]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800912e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009132:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009134:	4b5e      	ldr	r3, [pc, #376]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a5d      	ldr	r2, [pc, #372]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800913a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800913e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009140:	e000      	b.n	8009144 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 8009142:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009144:	4b5a      	ldr	r3, [pc, #360]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d0f8      	beq.n	8009142 <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009150:	4b58      	ldr	r3, [pc, #352]	; (80092b4 <RCC_enableMaxFrequencies+0x44c>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a57      	ldr	r2, [pc, #348]	; (80092b4 <RCC_enableMaxFrequencies+0x44c>)
 8009156:	f023 030f 	bic.w	r3, r3, #15
 800915a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800915c:	4b55      	ldr	r3, [pc, #340]	; (80092b4 <RCC_enableMaxFrequencies+0x44c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a54      	ldr	r2, [pc, #336]	; (80092b4 <RCC_enableMaxFrequencies+0x44c>)
 8009162:	f043 0301 	orr.w	r3, r3, #1
 8009166:	6013      	str	r3, [r2, #0]

			break;
 8009168:	e19a      	b.n	80094a0 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800916a:	4b51      	ldr	r3, [pc, #324]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	4a50      	ldr	r2, [pc, #320]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009170:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009174:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009176:	4b4e      	ldr	r3, [pc, #312]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	4a4d      	ldr	r2, [pc, #308]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800917c:	f043 0310 	orr.w	r3, r3, #16
 8009180:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009182:	4b4b      	ldr	r3, [pc, #300]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	4a4a      	ldr	r2, [pc, #296]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009188:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800918c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009190:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8009192:	4b47      	ldr	r3, [pc, #284]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	4a46      	ldr	r2, [pc, #280]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009198:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800919c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800919e:	4b44      	ldr	r3, [pc, #272]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	4a43      	ldr	r2, [pc, #268]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80091a4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80091a8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80091aa:	4b41      	ldr	r3, [pc, #260]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80091ac:	4a40      	ldr	r2, [pc, #256]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80091b2:	4b3f      	ldr	r3, [pc, #252]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	4a3e      	ldr	r2, [pc, #248]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80091b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091bc:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80091be:	4b3c      	ldr	r3, [pc, #240]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	4a3b      	ldr	r2, [pc, #236]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80091c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80091c8:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80091ca:	4b39      	ldr	r3, [pc, #228]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	4a38      	ldr	r2, [pc, #224]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80091d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80091d4:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80091d6:	4b36      	ldr	r3, [pc, #216]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a35      	ldr	r2, [pc, #212]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80091dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091e0:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80091e2:	e000      	b.n	80091e6 <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 80091e4:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80091e6:	4b32      	ldr	r3, [pc, #200]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0f8      	beq.n	80091e4 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80091f2:	4b30      	ldr	r3, [pc, #192]	; (80092b4 <RCC_enableMaxFrequencies+0x44c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a2f      	ldr	r2, [pc, #188]	; (80092b4 <RCC_enableMaxFrequencies+0x44c>)
 80091f8:	f023 030f 	bic.w	r3, r3, #15
 80091fc:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80091fe:	4b2d      	ldr	r3, [pc, #180]	; (80092b4 <RCC_enableMaxFrequencies+0x44c>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a2c      	ldr	r2, [pc, #176]	; (80092b4 <RCC_enableMaxFrequencies+0x44c>)
 8009204:	f043 0301 	orr.w	r3, r3, #1
 8009208:	6013      	str	r3, [r2, #0]

			break;
 800920a:	e149      	b.n	80094a0 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800920c:	4b28      	ldr	r3, [pc, #160]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	4a27      	ldr	r2, [pc, #156]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009212:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009216:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009218:	4b25      	ldr	r3, [pc, #148]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	4a24      	ldr	r2, [pc, #144]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800921e:	f043 0310 	orr.w	r3, r3, #16
 8009222:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009224:	4b22      	ldr	r3, [pc, #136]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	4a21      	ldr	r2, [pc, #132]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800922a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800922e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009232:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 8009234:	4b1e      	ldr	r3, [pc, #120]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	4a1d      	ldr	r2, [pc, #116]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800923a:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 800923e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009240:	4b1b      	ldr	r3, [pc, #108]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	4a1a      	ldr	r2, [pc, #104]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009246:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800924a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800924c:	4b18      	ldr	r3, [pc, #96]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800924e:	4a18      	ldr	r2, [pc, #96]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009254:	4b16      	ldr	r3, [pc, #88]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	4a15      	ldr	r2, [pc, #84]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800925a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800925e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009260:	4b13      	ldr	r3, [pc, #76]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	4a12      	ldr	r2, [pc, #72]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009266:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800926a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800926c:	4b10      	ldr	r3, [pc, #64]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	4a0f      	ldr	r2, [pc, #60]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 8009272:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009276:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009278:	4b0d      	ldr	r3, [pc, #52]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a0c      	ldr	r2, [pc, #48]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800927e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009282:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009284:	e000      	b.n	8009288 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 8009286:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009288:	4b09      	ldr	r3, [pc, #36]	; (80092b0 <RCC_enableMaxFrequencies+0x448>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009290:	2b00      	cmp	r3, #0
 8009292:	d0f8      	beq.n	8009286 <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009294:	4b07      	ldr	r3, [pc, #28]	; (80092b4 <RCC_enableMaxFrequencies+0x44c>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a06      	ldr	r2, [pc, #24]	; (80092b4 <RCC_enableMaxFrequencies+0x44c>)
 800929a:	f023 030f 	bic.w	r3, r3, #15
 800929e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80092a0:	4b04      	ldr	r3, [pc, #16]	; (80092b4 <RCC_enableMaxFrequencies+0x44c>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a03      	ldr	r2, [pc, #12]	; (80092b4 <RCC_enableMaxFrequencies+0x44c>)
 80092a6:	f043 0302 	orr.w	r3, r3, #2
 80092aa:	6013      	str	r3, [r2, #0]

			break;
 80092ac:	e0f8      	b.n	80094a0 <RCC_enableMaxFrequencies+0x638>
 80092ae:	bf00      	nop
 80092b0:	40023800 	.word	0x40023800
 80092b4:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80092b8:	4b84      	ldr	r3, [pc, #528]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	4a83      	ldr	r2, [pc, #524]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80092be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80092c2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80092c4:	4b81      	ldr	r3, [pc, #516]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	4a80      	ldr	r2, [pc, #512]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80092ca:	f043 0310 	orr.w	r3, r3, #16
 80092ce:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80092d0:	4b7e      	ldr	r3, [pc, #504]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	4a7d      	ldr	r2, [pc, #500]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80092d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80092da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092de:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 80092e0:	4b7a      	ldr	r3, [pc, #488]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	4a79      	ldr	r2, [pc, #484]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80092e6:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80092ea:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80092ec:	4b77      	ldr	r3, [pc, #476]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	4a76      	ldr	r2, [pc, #472]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80092f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80092f6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80092f8:	4b74      	ldr	r3, [pc, #464]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80092fa:	4a74      	ldr	r2, [pc, #464]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009300:	4b72      	ldr	r3, [pc, #456]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	4a71      	ldr	r2, [pc, #452]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800930a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800930c:	4b6f      	ldr	r3, [pc, #444]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	4a6e      	ldr	r2, [pc, #440]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009312:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009316:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8009318:	4b6c      	ldr	r3, [pc, #432]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	4a6b      	ldr	r2, [pc, #428]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800931e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009322:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009324:	4b69      	ldr	r3, [pc, #420]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a68      	ldr	r2, [pc, #416]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800932a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800932e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009330:	e000      	b.n	8009334 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 8009332:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009334:	4b65      	ldr	r3, [pc, #404]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d0f8      	beq.n	8009332 <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009340:	4b63      	ldr	r3, [pc, #396]	; (80094d0 <RCC_enableMaxFrequencies+0x668>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a62      	ldr	r2, [pc, #392]	; (80094d0 <RCC_enableMaxFrequencies+0x668>)
 8009346:	f023 030f 	bic.w	r3, r3, #15
 800934a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800934c:	4b60      	ldr	r3, [pc, #384]	; (80094d0 <RCC_enableMaxFrequencies+0x668>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a5f      	ldr	r2, [pc, #380]	; (80094d0 <RCC_enableMaxFrequencies+0x668>)
 8009352:	f043 0302 	orr.w	r3, r3, #2
 8009356:	6013      	str	r3, [r2, #0]

			break;
 8009358:	e0a2      	b.n	80094a0 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800935a:	4b5c      	ldr	r3, [pc, #368]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	4a5b      	ldr	r2, [pc, #364]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009360:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009364:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009366:	4b59      	ldr	r3, [pc, #356]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	4a58      	ldr	r2, [pc, #352]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800936c:	f043 0310 	orr.w	r3, r3, #16
 8009370:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009372:	4b56      	ldr	r3, [pc, #344]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	4a55      	ldr	r2, [pc, #340]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009378:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800937c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009380:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8009382:	4b52      	ldr	r3, [pc, #328]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	4a51      	ldr	r2, [pc, #324]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009388:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 800938c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800938e:	4b4f      	ldr	r3, [pc, #316]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	4a4e      	ldr	r2, [pc, #312]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009394:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009398:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800939a:	4b4c      	ldr	r3, [pc, #304]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800939c:	4a4b      	ldr	r2, [pc, #300]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80093a2:	4b4a      	ldr	r3, [pc, #296]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	4a49      	ldr	r2, [pc, #292]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80093a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093ac:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80093ae:	4b47      	ldr	r3, [pc, #284]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	4a46      	ldr	r2, [pc, #280]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80093b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093b8:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80093ba:	4b44      	ldr	r3, [pc, #272]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	4a43      	ldr	r2, [pc, #268]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80093c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80093c4:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80093c6:	4b41      	ldr	r3, [pc, #260]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a40      	ldr	r2, [pc, #256]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80093cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093d0:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80093d2:	e000      	b.n	80093d6 <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 80093d4:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80093d6:	4b3d      	ldr	r3, [pc, #244]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d0f8      	beq.n	80093d4 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80093e2:	4b3b      	ldr	r3, [pc, #236]	; (80094d0 <RCC_enableMaxFrequencies+0x668>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a3a      	ldr	r2, [pc, #232]	; (80094d0 <RCC_enableMaxFrequencies+0x668>)
 80093e8:	f023 030f 	bic.w	r3, r3, #15
 80093ec:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80093ee:	4b38      	ldr	r3, [pc, #224]	; (80094d0 <RCC_enableMaxFrequencies+0x668>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a37      	ldr	r2, [pc, #220]	; (80094d0 <RCC_enableMaxFrequencies+0x668>)
 80093f4:	f043 0302 	orr.w	r3, r3, #2
 80093f8:	6013      	str	r3, [r2, #0]

			break;
 80093fa:	e051      	b.n	80094a0 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80093fc:	4b33      	ldr	r3, [pc, #204]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	4a32      	ldr	r2, [pc, #200]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009402:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009406:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8009408:	4b30      	ldr	r3, [pc, #192]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	4a2f      	ldr	r2, [pc, #188]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800940e:	f043 0308 	orr.w	r3, r3, #8
 8009412:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009414:	4b2d      	ldr	r3, [pc, #180]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	4a2c      	ldr	r2, [pc, #176]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800941a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800941e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009422:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8009424:	4b29      	ldr	r3, [pc, #164]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	4a28      	ldr	r2, [pc, #160]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800942a:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800942e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009430:	4b26      	ldr	r3, [pc, #152]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	4a25      	ldr	r2, [pc, #148]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009436:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800943a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800943c:	4b23      	ldr	r3, [pc, #140]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800943e:	4a23      	ldr	r2, [pc, #140]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009444:	4b21      	ldr	r3, [pc, #132]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	4a20      	ldr	r2, [pc, #128]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800944a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800944e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009450:	4b1e      	ldr	r3, [pc, #120]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	4a1d      	ldr	r2, [pc, #116]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009456:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800945a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800945c:	4b1b      	ldr	r3, [pc, #108]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	4a1a      	ldr	r2, [pc, #104]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 8009462:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009466:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009468:	4b18      	ldr	r3, [pc, #96]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a17      	ldr	r2, [pc, #92]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800946e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009472:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009474:	e000      	b.n	8009478 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 8009476:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009478:	4b14      	ldr	r3, [pc, #80]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d0f8      	beq.n	8009476 <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009484:	4b12      	ldr	r3, [pc, #72]	; (80094d0 <RCC_enableMaxFrequencies+0x668>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a11      	ldr	r2, [pc, #68]	; (80094d0 <RCC_enableMaxFrequencies+0x668>)
 800948a:	f023 030f 	bic.w	r3, r3, #15
 800948e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8009490:	4b0f      	ldr	r3, [pc, #60]	; (80094d0 <RCC_enableMaxFrequencies+0x668>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a0e      	ldr	r2, [pc, #56]	; (80094d0 <RCC_enableMaxFrequencies+0x668>)
 8009496:	f043 0303 	orr.w	r3, r3, #3
 800949a:	6013      	str	r3, [r2, #0]

			break;
 800949c:	e000      	b.n	80094a0 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 800949e:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80094a0:	4b0a      	ldr	r3, [pc, #40]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	4a09      	ldr	r2, [pc, #36]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80094a6:	f043 0302 	orr.w	r3, r3, #2
 80094aa:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 80094ac:	e000      	b.n	80094b0 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 80094ae:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 80094b0:	4b06      	ldr	r3, [pc, #24]	; (80094cc <RCC_enableMaxFrequencies+0x664>)
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f003 0308 	and.w	r3, r3, #8
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d0f8      	beq.n	80094ae <RCC_enableMaxFrequencies+0x646>
	}

//	SystemCoreClockUpdate();

}
 80094bc:	bf00      	nop
 80094be:	bf00      	nop
 80094c0:	370c      	adds	r7, #12
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	40023800 	.word	0x40023800
 80094d0:	40023c00 	.word	0x40023c00

080094d4 <__NVIC_EnableIRQ>:
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	4603      	mov	r3, r0
 80094dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	db0b      	blt.n	80094fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80094e6:	79fb      	ldrb	r3, [r7, #7]
 80094e8:	f003 021f 	and.w	r2, r3, #31
 80094ec:	4907      	ldr	r1, [pc, #28]	; (800950c <__NVIC_EnableIRQ+0x38>)
 80094ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094f2:	095b      	lsrs	r3, r3, #5
 80094f4:	2001      	movs	r0, #1
 80094f6:	fa00 f202 	lsl.w	r2, r0, r2
 80094fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80094fe:	bf00      	nop
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	e000e100 	.word	0xe000e100

08009510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	6039      	str	r1, [r7, #0]
 800951a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800951c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009520:	2b00      	cmp	r3, #0
 8009522:	db0a      	blt.n	800953a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	b2da      	uxtb	r2, r3
 8009528:	490c      	ldr	r1, [pc, #48]	; (800955c <__NVIC_SetPriority+0x4c>)
 800952a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800952e:	0112      	lsls	r2, r2, #4
 8009530:	b2d2      	uxtb	r2, r2
 8009532:	440b      	add	r3, r1
 8009534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009538:	e00a      	b.n	8009550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	b2da      	uxtb	r2, r3
 800953e:	4908      	ldr	r1, [pc, #32]	; (8009560 <__NVIC_SetPriority+0x50>)
 8009540:	79fb      	ldrb	r3, [r7, #7]
 8009542:	f003 030f 	and.w	r3, r3, #15
 8009546:	3b04      	subs	r3, #4
 8009548:	0112      	lsls	r2, r2, #4
 800954a:	b2d2      	uxtb	r2, r2
 800954c:	440b      	add	r3, r1
 800954e:	761a      	strb	r2, [r3, #24]
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	e000e100 	.word	0xe000e100
 8009560:	e000ed00 	.word	0xe000ed00

08009564 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8009564:	b590      	push	{r4, r7, lr}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800956c:	b672      	cpsid	i
}
 800956e:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a91      	ldr	r2, [pc, #580]	; (80097bc <USART_Config+0x258>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d106      	bne.n	8009588 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800957a:	4b91      	ldr	r3, [pc, #580]	; (80097c0 <USART_Config+0x25c>)
 800957c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800957e:	4a90      	ldr	r2, [pc, #576]	; (80097c0 <USART_Config+0x25c>)
 8009580:	f043 0310 	orr.w	r3, r3, #16
 8009584:	6453      	str	r3, [r2, #68]	; 0x44
 8009586:	e018      	b.n	80095ba <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a8d      	ldr	r2, [pc, #564]	; (80097c4 <USART_Config+0x260>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d106      	bne.n	80095a0 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8009592:	4b8b      	ldr	r3, [pc, #556]	; (80097c0 <USART_Config+0x25c>)
 8009594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009596:	4a8a      	ldr	r2, [pc, #552]	; (80097c0 <USART_Config+0x25c>)
 8009598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800959c:	6413      	str	r3, [r2, #64]	; 0x40
 800959e:	e00c      	b.n	80095ba <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a88      	ldr	r2, [pc, #544]	; (80097c8 <USART_Config+0x264>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d106      	bne.n	80095b8 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 80095aa:	4b85      	ldr	r3, [pc, #532]	; (80097c0 <USART_Config+0x25c>)
 80095ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ae:	4a84      	ldr	r2, [pc, #528]	; (80097c0 <USART_Config+0x25c>)
 80095b0:	f043 0320 	orr.w	r3, r3, #32
 80095b4:	6453      	str	r3, [r2, #68]	; 0x44
 80095b6:	e000      	b.n	80095ba <USART_Config+0x56>
	}
	else{
		__NOP();
 80095b8:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2200      	movs	r2, #0
 80095c0:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2200      	movs	r2, #0
 80095c8:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	7a5b      	ldrb	r3, [r3, #9]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d025      	beq.n	800961e <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	7a5b      	ldrb	r3, [r3, #9]
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d110      	bne.n	80095fc <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68da      	ldr	r2, [r3, #12]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80095e8:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68da      	ldr	r2, [r3, #12]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095f8:	60da      	str	r2, [r3, #12]
 80095fa:	e018      	b.n	800962e <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68da      	ldr	r2, [r3, #12]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800960a:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68da      	ldr	r2, [r3, #12]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800961a:	60da      	str	r2, [r3, #12]
 800961c:	e007      	b.n	800962e <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68da      	ldr	r2, [r3, #12]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800962c:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	7a1b      	ldrb	r3, [r3, #8]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d108      	bne.n	8009648 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68da      	ldr	r2, [r3, #12]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009644:	60da      	str	r2, [r3, #12]
 8009646:	e007      	b.n	8009658 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68da      	ldr	r2, [r3, #12]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009656:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	7a9b      	ldrb	r3, [r3, #10]
 800965c:	2b03      	cmp	r3, #3
 800965e:	d82f      	bhi.n	80096c0 <USART_Config+0x15c>
 8009660:	a201      	add	r2, pc, #4	; (adr r2, 8009668 <USART_Config+0x104>)
 8009662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009666:	bf00      	nop
 8009668:	08009679 	.word	0x08009679
 800966c:	0800968b 	.word	0x0800968b
 8009670:	0800969d 	.word	0x0800969d
 8009674:	080096af 	.word	0x080096af
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	691a      	ldr	r2, [r3, #16]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009686:	611a      	str	r2, [r3, #16]
			break;
 8009688:	e023      	b.n	80096d2 <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	691a      	ldr	r2, [r3, #16]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009698:	611a      	str	r2, [r3, #16]
			break;
 800969a:	e01a      	b.n	80096d2 <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	691a      	ldr	r2, [r3, #16]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096aa:	611a      	str	r2, [r3, #16]
			break;
 80096ac:	e011      	b.n	80096d2 <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	691a      	ldr	r2, [r3, #16]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80096bc:	611a      	str	r2, [r3, #16]
			break;
 80096be:	e008      	b.n	80096d2 <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	691a      	ldr	r2, [r3, #16]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80096ce:	611a      	str	r2, [r3, #16]
			break;
 80096d0:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681c      	ldr	r4, [r3, #0]
 80096da:	4611      	mov	r1, r2
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f8d7 	bl	8009890 <brrCalculus>
 80096e2:	4603      	mov	r3, r0
 80096e4:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	799b      	ldrb	r3, [r3, #6]
 80096ea:	2b03      	cmp	r3, #3
 80096ec:	d82e      	bhi.n	800974c <USART_Config+0x1e8>
 80096ee:	a201      	add	r2, pc, #4	; (adr r2, 80096f4 <USART_Config+0x190>)
 80096f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f4:	08009705 	.word	0x08009705
 80096f8:	08009717 	.word	0x08009717
 80096fc:	08009729 	.word	0x08009729
 8009700:	0800973b 	.word	0x0800973b
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68da      	ldr	r2, [r3, #12]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f042 0208 	orr.w	r2, r2, #8
 8009712:	60da      	str	r2, [r3, #12]
			break;
 8009714:	e023      	b.n	800975e <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68da      	ldr	r2, [r3, #12]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f042 0204 	orr.w	r2, r2, #4
 8009724:	60da      	str	r2, [r3, #12]
			break;
 8009726:	e01a      	b.n	800975e <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f042 020c 	orr.w	r2, r2, #12
 8009736:	60da      	str	r2, [r3, #12]
			break;
 8009738:	e011      	b.n	800975e <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68da      	ldr	r2, [r3, #12]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f022 020c 	bic.w	r2, r2, #12
 8009748:	60da      	str	r2, [r3, #12]
			break;
 800974a:	e008      	b.n	800975e <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68da      	ldr	r2, [r3, #12]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f022 020c 	bic.w	r2, r2, #12
 800975a:	60da      	str	r2, [r3, #12]
			break;
 800975c:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	799b      	ldrb	r3, [r3, #6]
 8009762:	2b03      	cmp	r3, #3
 8009764:	d008      	beq.n	8009778 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68da      	ldr	r2, [r3, #12]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009774:	60da      	str	r2, [r3, #12]
 8009776:	e007      	b.n	8009788 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68da      	ldr	r2, [r3, #12]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009786:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	795b      	ldrb	r3, [r3, #5]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d139      	bne.n	8009804 <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68da      	ldr	r2, [r3, #12]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f042 0220 	orr.w	r2, r2, #32
 800979e:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a05      	ldr	r2, [pc, #20]	; (80097bc <USART_Config+0x258>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d110      	bne.n	80097cc <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 80097aa:	2025      	movs	r0, #37	; 0x25
 80097ac:	f7ff fe92 	bl	80094d4 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 80097b0:	2101      	movs	r1, #1
 80097b2:	2025      	movs	r0, #37	; 0x25
 80097b4:	f7ff feac 	bl	8009510 <__NVIC_SetPriority>
 80097b8:	e02c      	b.n	8009814 <USART_Config+0x2b0>
 80097ba:	bf00      	nop
 80097bc:	40011000 	.word	0x40011000
 80097c0:	40023800 	.word	0x40023800
 80097c4:	40004400 	.word	0x40004400
 80097c8:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a2c      	ldr	r2, [pc, #176]	; (8009884 <USART_Config+0x320>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d107      	bne.n	80097e6 <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 80097d6:	2026      	movs	r0, #38	; 0x26
 80097d8:	f7ff fe7c 	bl	80094d4 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 80097dc:	2101      	movs	r1, #1
 80097de:	2026      	movs	r0, #38	; 0x26
 80097e0:	f7ff fe96 	bl	8009510 <__NVIC_SetPriority>
 80097e4:	e016      	b.n	8009814 <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a27      	ldr	r2, [pc, #156]	; (8009888 <USART_Config+0x324>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d107      	bne.n	8009800 <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 80097f0:	2047      	movs	r0, #71	; 0x47
 80097f2:	f7ff fe6f 	bl	80094d4 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 80097f6:	2101      	movs	r1, #1
 80097f8:	2047      	movs	r0, #71	; 0x47
 80097fa:	f7ff fe89 	bl	8009510 <__NVIC_SetPriority>
 80097fe:	e009      	b.n	8009814 <USART_Config+0x2b0>
		}
		else{
				__NOP();
 8009800:	bf00      	nop
 8009802:	e007      	b.n	8009814 <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68da      	ldr	r2, [r3, #12]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f022 0220 	bic.w	r2, r2, #32
 8009812:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	791b      	ldrb	r3, [r3, #4]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d124      	bne.n	8009866 <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800982a:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a16      	ldr	r2, [pc, #88]	; (800988c <USART_Config+0x328>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d103      	bne.n	800983e <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8009836:	2025      	movs	r0, #37	; 0x25
 8009838:	f7ff fe4c 	bl	80094d4 <__NVIC_EnableIRQ>
 800983c:	e01b      	b.n	8009876 <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a10      	ldr	r2, [pc, #64]	; (8009884 <USART_Config+0x320>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d103      	bne.n	8009850 <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8009848:	2026      	movs	r0, #38	; 0x26
 800984a:	f7ff fe43 	bl	80094d4 <__NVIC_EnableIRQ>
 800984e:	e012      	b.n	8009876 <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a0c      	ldr	r2, [pc, #48]	; (8009888 <USART_Config+0x324>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d103      	bne.n	8009862 <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800985a:	2047      	movs	r0, #71	; 0x47
 800985c:	f7ff fe3a 	bl	80094d4 <__NVIC_EnableIRQ>
 8009860:	e009      	b.n	8009876 <USART_Config+0x312>
		}
		else{
				__NOP();
 8009862:	bf00      	nop
 8009864:	e007      	b.n	8009876 <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68da      	ldr	r2, [r3, #12]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009874:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8009876:	b662      	cpsie	i
}
 8009878:	bf00      	nop
	}

	__enable_irq();
}
 800987a:	bf00      	nop
 800987c:	370c      	adds	r7, #12
 800987e:	46bd      	mov	sp, r7
 8009880:	bd90      	pop	{r4, r7, pc}
 8009882:	bf00      	nop
 8009884:	40004400 	.word	0x40004400
 8009888:	40011400 	.word	0x40011400
 800988c:	40011000 	.word	0x40011000

08009890 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8009890:	b5b0      	push	{r4, r5, r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	79db      	ldrb	r3, [r3, #7]
 800989e:	2b03      	cmp	r3, #3
 80098a0:	f200 8217 	bhi.w	8009cd2 <brrCalculus+0x442>
 80098a4:	a201      	add	r2, pc, #4	; (adr r2, 80098ac <brrCalculus+0x1c>)
 80098a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098aa:	bf00      	nop
 80098ac:	080098bd 	.word	0x080098bd
 80098b0:	080099b7 	.word	0x080099b7
 80098b4:	08009ad1 	.word	0x08009ad1
 80098b8:	08009bd9 	.word	0x08009bd9

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 80098bc:	4980      	ldr	r1, [pc, #512]	; (8009ac0 <brrCalculus+0x230>)
 80098be:	a37c      	add	r3, pc, #496	; (adr r3, 8009ab0 <brrCalculus+0x220>)
 80098c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c4:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d2:	ee17 0a90 	vmov	r0, s15
 80098d6:	f7f6 fe4f 	bl	8000578 <__aeabi_f2d>
 80098da:	4b79      	ldr	r3, [pc, #484]	; (8009ac0 <brrCalculus+0x230>)
 80098dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e0:	f7f6 fea2 	bl	8000628 <__aeabi_dmul>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4975      	ldr	r1, [pc, #468]	; (8009ac0 <brrCalculus+0x230>)
 80098ea:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80098ee:	4b74      	ldr	r3, [pc, #464]	; (8009ac0 <brrCalculus+0x230>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	4610      	mov	r0, r2
 80098f6:	4619      	mov	r1, r3
 80098f8:	f7f7 f946 	bl	8000b88 <__aeabi_d2iz>
 80098fc:	4603      	mov	r3, r0
 80098fe:	b29a      	uxth	r2, r3
 8009900:	4b70      	ldr	r3, [pc, #448]	; (8009ac4 <brrCalculus+0x234>)
 8009902:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8009904:	4b6e      	ldr	r3, [pc, #440]	; (8009ac0 <brrCalculus+0x230>)
 8009906:	e9d3 4500 	ldrd	r4, r5, [r3]
 800990a:	4b6d      	ldr	r3, [pc, #436]	; (8009ac0 <brrCalculus+0x230>)
 800990c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009910:	4610      	mov	r0, r2
 8009912:	4619      	mov	r1, r3
 8009914:	f7f7 f938 	bl	8000b88 <__aeabi_d2iz>
 8009918:	4603      	mov	r3, r0
 800991a:	4618      	mov	r0, r3
 800991c:	f7f6 fe1a 	bl	8000554 <__aeabi_i2d>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	4620      	mov	r0, r4
 8009926:	4629      	mov	r1, r5
 8009928:	f7f6 fcc6 	bl	80002b8 <__aeabi_dsub>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	4610      	mov	r0, r2
 8009932:	4619      	mov	r1, r3
 8009934:	f7f7 f970 	bl	8000c18 <__aeabi_d2f>
 8009938:	4603      	mov	r3, r0
 800993a:	4a63      	ldr	r2, [pc, #396]	; (8009ac8 <brrCalculus+0x238>)
 800993c:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800993e:	4b62      	ldr	r3, [pc, #392]	; (8009ac8 <brrCalculus+0x238>)
 8009940:	edd3 7a00 	vldr	s15, [r3]
 8009944:	2004      	movs	r0, #4
 8009946:	eeb0 0a67 	vmov.f32	s0, s15
 800994a:	f000 fa6d 	bl	8009e28 <roundToNDecimals>
 800994e:	eef0 7a40 	vmov.f32	s15, s0
 8009952:	4b5d      	ldr	r3, [pc, #372]	; (8009ac8 <brrCalculus+0x238>)
 8009954:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009958:	4b5b      	ldr	r3, [pc, #364]	; (8009ac8 <brrCalculus+0x238>)
 800995a:	edd3 7a00 	vldr	s15, [r3]
 800995e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009966:	4b58      	ldr	r3, [pc, #352]	; (8009ac8 <brrCalculus+0x238>)
 8009968:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800996c:	4b56      	ldr	r3, [pc, #344]	; (8009ac8 <brrCalculus+0x238>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4618      	mov	r0, r3
 8009972:	f7f6 fe01 	bl	8000578 <__aeabi_f2d>
 8009976:	4602      	mov	r2, r0
 8009978:	460b      	mov	r3, r1
 800997a:	ec43 2b10 	vmov	d0, r2, r3
 800997e:	f004 f91b 	bl	800dbb8 <round>
 8009982:	ec53 2b10 	vmov	r2, r3, d0
 8009986:	4610      	mov	r0, r2
 8009988:	4619      	mov	r1, r3
 800998a:	f7f7 f945 	bl	8000c18 <__aeabi_d2f>
 800998e:	4603      	mov	r3, r0
 8009990:	4a4d      	ldr	r2, [pc, #308]	; (8009ac8 <brrCalculus+0x238>)
 8009992:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009994:	4b4b      	ldr	r3, [pc, #300]	; (8009ac4 <brrCalculus+0x234>)
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	011b      	lsls	r3, r3, #4
 800999a:	b29a      	uxth	r2, r3
 800999c:	4b4a      	ldr	r3, [pc, #296]	; (8009ac8 <brrCalculus+0x238>)
 800999e:	edd3 7a00 	vldr	s15, [r3]
 80099a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099a6:	ee17 3a90 	vmov	r3, s15
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	4313      	orrs	r3, r2
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	4b46      	ldr	r3, [pc, #280]	; (8009acc <brrCalculus+0x23c>)
 80099b2:	801a      	strh	r2, [r3, #0]


		break;
 80099b4:	e18f      	b.n	8009cd6 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 80099b6:	4942      	ldr	r1, [pc, #264]	; (8009ac0 <brrCalculus+0x230>)
 80099b8:	a33f      	add	r3, pc, #252	; (adr r3, 8009ab8 <brrCalculus+0x228>)
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	ee07 3a90 	vmov	s15, r3
 80099c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099cc:	ee17 0a90 	vmov	r0, s15
 80099d0:	f7f6 fdd2 	bl	8000578 <__aeabi_f2d>
 80099d4:	4b3a      	ldr	r3, [pc, #232]	; (8009ac0 <brrCalculus+0x230>)
 80099d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099da:	f7f6 fe25 	bl	8000628 <__aeabi_dmul>
 80099de:	4602      	mov	r2, r0
 80099e0:	460b      	mov	r3, r1
 80099e2:	4937      	ldr	r1, [pc, #220]	; (8009ac0 <brrCalculus+0x230>)
 80099e4:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80099e8:	4b35      	ldr	r3, [pc, #212]	; (8009ac0 <brrCalculus+0x230>)
 80099ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ee:	4610      	mov	r0, r2
 80099f0:	4619      	mov	r1, r3
 80099f2:	f7f7 f8c9 	bl	8000b88 <__aeabi_d2iz>
 80099f6:	4603      	mov	r3, r0
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	4b32      	ldr	r3, [pc, #200]	; (8009ac4 <brrCalculus+0x234>)
 80099fc:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80099fe:	4b30      	ldr	r3, [pc, #192]	; (8009ac0 <brrCalculus+0x230>)
 8009a00:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009a04:	4b2e      	ldr	r3, [pc, #184]	; (8009ac0 <brrCalculus+0x230>)
 8009a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	f7f7 f8bb 	bl	8000b88 <__aeabi_d2iz>
 8009a12:	4603      	mov	r3, r0
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7f6 fd9d 	bl	8000554 <__aeabi_i2d>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4620      	mov	r0, r4
 8009a20:	4629      	mov	r1, r5
 8009a22:	f7f6 fc49 	bl	80002b8 <__aeabi_dsub>
 8009a26:	4602      	mov	r2, r0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	4610      	mov	r0, r2
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	f7f7 f8f3 	bl	8000c18 <__aeabi_d2f>
 8009a32:	4603      	mov	r3, r0
 8009a34:	4a24      	ldr	r2, [pc, #144]	; (8009ac8 <brrCalculus+0x238>)
 8009a36:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009a38:	4b23      	ldr	r3, [pc, #140]	; (8009ac8 <brrCalculus+0x238>)
 8009a3a:	edd3 7a00 	vldr	s15, [r3]
 8009a3e:	2004      	movs	r0, #4
 8009a40:	eeb0 0a67 	vmov.f32	s0, s15
 8009a44:	f000 f9f0 	bl	8009e28 <roundToNDecimals>
 8009a48:	eef0 7a40 	vmov.f32	s15, s0
 8009a4c:	4b1e      	ldr	r3, [pc, #120]	; (8009ac8 <brrCalculus+0x238>)
 8009a4e:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009a52:	4b1d      	ldr	r3, [pc, #116]	; (8009ac8 <brrCalculus+0x238>)
 8009a54:	edd3 7a00 	vldr	s15, [r3]
 8009a58:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009a5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a60:	4b19      	ldr	r3, [pc, #100]	; (8009ac8 <brrCalculus+0x238>)
 8009a62:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8009a66:	4b18      	ldr	r3, [pc, #96]	; (8009ac8 <brrCalculus+0x238>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7f6 fd84 	bl	8000578 <__aeabi_f2d>
 8009a70:	4602      	mov	r2, r0
 8009a72:	460b      	mov	r3, r1
 8009a74:	ec43 2b10 	vmov	d0, r2, r3
 8009a78:	f004 f89e 	bl	800dbb8 <round>
 8009a7c:	ec53 2b10 	vmov	r2, r3, d0
 8009a80:	4610      	mov	r0, r2
 8009a82:	4619      	mov	r1, r3
 8009a84:	f7f7 f8c8 	bl	8000c18 <__aeabi_d2f>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	4a0f      	ldr	r2, [pc, #60]	; (8009ac8 <brrCalculus+0x238>)
 8009a8c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009a8e:	4b0d      	ldr	r3, [pc, #52]	; (8009ac4 <brrCalculus+0x234>)
 8009a90:	881b      	ldrh	r3, [r3, #0]
 8009a92:	011b      	lsls	r3, r3, #4
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <brrCalculus+0x238>)
 8009a98:	edd3 7a00 	vldr	s15, [r3]
 8009a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aa0:	ee17 3a90 	vmov	r3, s15
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	4b08      	ldr	r3, [pc, #32]	; (8009acc <brrCalculus+0x23c>)
 8009aac:	801a      	strh	r2, [r3, #0]


		break;
 8009aae:	e112      	b.n	8009cd6 <brrCalculus+0x446>
 8009ab0:	b4e81b4f 	.word	0xb4e81b4f
 8009ab4:	3edb4e81 	.word	0x3edb4e81
 8009ab8:	b4e81b4f 	.word	0xb4e81b4f
 8009abc:	3ecb4e81 	.word	0x3ecb4e81
 8009ac0:	20012270 	.word	0x20012270
 8009ac4:	20012268 	.word	0x20012268
 8009ac8:	2001226c 	.word	0x2001226c
 8009acc:	20012266 	.word	0x20012266
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8009ad0:	4989      	ldr	r1, [pc, #548]	; (8009cf8 <brrCalculus+0x468>)
 8009ad2:	a385      	add	r3, pc, #532	; (adr r3, 8009ce8 <brrCalculus+0x458>)
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	ee07 3a90 	vmov	s15, r3
 8009ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae6:	ee17 0a90 	vmov	r0, s15
 8009aea:	f7f6 fd45 	bl	8000578 <__aeabi_f2d>
 8009aee:	4b82      	ldr	r3, [pc, #520]	; (8009cf8 <brrCalculus+0x468>)
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	f7f6 fd98 	bl	8000628 <__aeabi_dmul>
 8009af8:	4602      	mov	r2, r0
 8009afa:	460b      	mov	r3, r1
 8009afc:	497e      	ldr	r1, [pc, #504]	; (8009cf8 <brrCalculus+0x468>)
 8009afe:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8009b02:	4b7d      	ldr	r3, [pc, #500]	; (8009cf8 <brrCalculus+0x468>)
 8009b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b08:	4610      	mov	r0, r2
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	f7f7 f83c 	bl	8000b88 <__aeabi_d2iz>
 8009b10:	4603      	mov	r3, r0
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	4b79      	ldr	r3, [pc, #484]	; (8009cfc <brrCalculus+0x46c>)
 8009b16:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8009b18:	4b77      	ldr	r3, [pc, #476]	; (8009cf8 <brrCalculus+0x468>)
 8009b1a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009b1e:	4b76      	ldr	r3, [pc, #472]	; (8009cf8 <brrCalculus+0x468>)
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	4610      	mov	r0, r2
 8009b26:	4619      	mov	r1, r3
 8009b28:	f7f7 f82e 	bl	8000b88 <__aeabi_d2iz>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7f6 fd10 	bl	8000554 <__aeabi_i2d>
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	4620      	mov	r0, r4
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	f7f6 fbbc 	bl	80002b8 <__aeabi_dsub>
 8009b40:	4602      	mov	r2, r0
 8009b42:	460b      	mov	r3, r1
 8009b44:	4610      	mov	r0, r2
 8009b46:	4619      	mov	r1, r3
 8009b48:	f7f7 f866 	bl	8000c18 <__aeabi_d2f>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	4a6c      	ldr	r2, [pc, #432]	; (8009d00 <brrCalculus+0x470>)
 8009b50:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009b52:	4b6b      	ldr	r3, [pc, #428]	; (8009d00 <brrCalculus+0x470>)
 8009b54:	edd3 7a00 	vldr	s15, [r3]
 8009b58:	2004      	movs	r0, #4
 8009b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8009b5e:	f000 f963 	bl	8009e28 <roundToNDecimals>
 8009b62:	eef0 7a40 	vmov.f32	s15, s0
 8009b66:	4b66      	ldr	r3, [pc, #408]	; (8009d00 <brrCalculus+0x470>)
 8009b68:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009b6c:	4b64      	ldr	r3, [pc, #400]	; (8009d00 <brrCalculus+0x470>)
 8009b6e:	edd3 7a00 	vldr	s15, [r3]
 8009b72:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b7a:	4b61      	ldr	r3, [pc, #388]	; (8009d00 <brrCalculus+0x470>)
 8009b7c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8009b80:	4b5f      	ldr	r3, [pc, #380]	; (8009d00 <brrCalculus+0x470>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7f6 fcf7 	bl	8000578 <__aeabi_f2d>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	ec43 2b10 	vmov	d0, r2, r3
 8009b92:	f004 f811 	bl	800dbb8 <round>
 8009b96:	ec51 0b10 	vmov	r0, r1, d0
 8009b9a:	f04f 0200 	mov.w	r2, #0
 8009b9e:	4b59      	ldr	r3, [pc, #356]	; (8009d04 <brrCalculus+0x474>)
 8009ba0:	f7f6 fb8c 	bl	80002bc <__adddf3>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	4610      	mov	r0, r2
 8009baa:	4619      	mov	r1, r3
 8009bac:	f7f7 f834 	bl	8000c18 <__aeabi_d2f>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	4a53      	ldr	r2, [pc, #332]	; (8009d00 <brrCalculus+0x470>)
 8009bb4:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009bb6:	4b51      	ldr	r3, [pc, #324]	; (8009cfc <brrCalculus+0x46c>)
 8009bb8:	881b      	ldrh	r3, [r3, #0]
 8009bba:	011b      	lsls	r3, r3, #4
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	4b50      	ldr	r3, [pc, #320]	; (8009d00 <brrCalculus+0x470>)
 8009bc0:	edd3 7a00 	vldr	s15, [r3]
 8009bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bc8:	ee17 3a90 	vmov	r3, s15
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	4b4d      	ldr	r3, [pc, #308]	; (8009d08 <brrCalculus+0x478>)
 8009bd4:	801a      	strh	r2, [r3, #0]


		break;
 8009bd6:	e07e      	b.n	8009cd6 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8009bd8:	4947      	ldr	r1, [pc, #284]	; (8009cf8 <brrCalculus+0x468>)
 8009bda:	a345      	add	r3, pc, #276	; (adr r3, 8009cf0 <brrCalculus+0x460>)
 8009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be0:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bee:	ee17 0a90 	vmov	r0, s15
 8009bf2:	f7f6 fcc1 	bl	8000578 <__aeabi_f2d>
 8009bf6:	4b40      	ldr	r3, [pc, #256]	; (8009cf8 <brrCalculus+0x468>)
 8009bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfc:	f7f6 fd14 	bl	8000628 <__aeabi_dmul>
 8009c00:	4602      	mov	r2, r0
 8009c02:	460b      	mov	r3, r1
 8009c04:	493c      	ldr	r1, [pc, #240]	; (8009cf8 <brrCalculus+0x468>)
 8009c06:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8009c0a:	4b3b      	ldr	r3, [pc, #236]	; (8009cf8 <brrCalculus+0x468>)
 8009c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c10:	4610      	mov	r0, r2
 8009c12:	4619      	mov	r1, r3
 8009c14:	f7f6 ffb8 	bl	8000b88 <__aeabi_d2iz>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	4b37      	ldr	r3, [pc, #220]	; (8009cfc <brrCalculus+0x46c>)
 8009c1e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8009c20:	4b35      	ldr	r3, [pc, #212]	; (8009cf8 <brrCalculus+0x468>)
 8009c22:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009c26:	4b34      	ldr	r3, [pc, #208]	; (8009cf8 <brrCalculus+0x468>)
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	4619      	mov	r1, r3
 8009c30:	f7f6 ffaa 	bl	8000b88 <__aeabi_d2iz>
 8009c34:	4603      	mov	r3, r0
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7f6 fc8c 	bl	8000554 <__aeabi_i2d>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	4620      	mov	r0, r4
 8009c42:	4629      	mov	r1, r5
 8009c44:	f7f6 fb38 	bl	80002b8 <__aeabi_dsub>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	4619      	mov	r1, r3
 8009c50:	f7f6 ffe2 	bl	8000c18 <__aeabi_d2f>
 8009c54:	4603      	mov	r3, r0
 8009c56:	4a2a      	ldr	r2, [pc, #168]	; (8009d00 <brrCalculus+0x470>)
 8009c58:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009c5a:	4b29      	ldr	r3, [pc, #164]	; (8009d00 <brrCalculus+0x470>)
 8009c5c:	edd3 7a00 	vldr	s15, [r3]
 8009c60:	2004      	movs	r0, #4
 8009c62:	eeb0 0a67 	vmov.f32	s0, s15
 8009c66:	f000 f8df 	bl	8009e28 <roundToNDecimals>
 8009c6a:	eef0 7a40 	vmov.f32	s15, s0
 8009c6e:	4b24      	ldr	r3, [pc, #144]	; (8009d00 <brrCalculus+0x470>)
 8009c70:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009c74:	4b22      	ldr	r3, [pc, #136]	; (8009d00 <brrCalculus+0x470>)
 8009c76:	edd3 7a00 	vldr	s15, [r3]
 8009c7a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c82:	4b1f      	ldr	r3, [pc, #124]	; (8009d00 <brrCalculus+0x470>)
 8009c84:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8009c88:	4b1d      	ldr	r3, [pc, #116]	; (8009d00 <brrCalculus+0x470>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7f6 fc73 	bl	8000578 <__aeabi_f2d>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	ec43 2b10 	vmov	d0, r2, r3
 8009c9a:	f003 ff8d 	bl	800dbb8 <round>
 8009c9e:	ec53 2b10 	vmov	r2, r3, d0
 8009ca2:	4610      	mov	r0, r2
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	f7f6 ffb7 	bl	8000c18 <__aeabi_d2f>
 8009caa:	4603      	mov	r3, r0
 8009cac:	4a14      	ldr	r2, [pc, #80]	; (8009d00 <brrCalculus+0x470>)
 8009cae:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009cb0:	4b12      	ldr	r3, [pc, #72]	; (8009cfc <brrCalculus+0x46c>)
 8009cb2:	881b      	ldrh	r3, [r3, #0]
 8009cb4:	011b      	lsls	r3, r3, #4
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	4b11      	ldr	r3, [pc, #68]	; (8009d00 <brrCalculus+0x470>)
 8009cba:	edd3 7a00 	vldr	s15, [r3]
 8009cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cc2:	ee17 3a90 	vmov	r3, s15
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	4b0e      	ldr	r3, [pc, #56]	; (8009d08 <brrCalculus+0x478>)
 8009cce:	801a      	strh	r2, [r3, #0]


		break;
 8009cd0:	e001      	b.n	8009cd6 <brrCalculus+0x446>
	}
	default:{

		__NOP();
 8009cd2:	bf00      	nop
		break;
 8009cd4:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 8009cd6:	4b0c      	ldr	r3, [pc, #48]	; (8009d08 <brrCalculus+0x478>)
 8009cd8:	881b      	ldrh	r3, [r3, #0]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	f3af 8000 	nop.w
 8009ce8:	789abcdf 	.word	0x789abcdf
 8009cec:	3ec23456 	.word	0x3ec23456
 8009cf0:	789abcdf 	.word	0x789abcdf
 8009cf4:	3ea23456 	.word	0x3ea23456
 8009cf8:	20012270 	.word	0x20012270
 8009cfc:	20012268 	.word	0x20012268
 8009d00:	2001226c 	.word	0x2001226c
 8009d04:	3ff00000 	.word	0x3ff00000
 8009d08:	20012266 	.word	0x20012266

08009d0c <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8009d16:	e000      	b.n	8009d1a <writeChar+0xe>
		__NOP();
 8009d18:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d0f7      	beq.n	8009d18 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	683a      	ldr	r2, [r7, #0]
 8009d2e:	605a      	str	r2, [r3, #4]

}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 8009d46:	e008      	b.n	8009d5a <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7ff ffdc 	bl	8009d0c <writeChar>
		msgToSend ++ ;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	3301      	adds	r3, #1
 8009d58:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1f2      	bne.n	8009d48 <writeMsg+0xc>
	}
}
 8009d62:	bf00      	nop
 8009d64:	bf00      	nop
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 8009d6c:	b480      	push	{r7}
 8009d6e:	af00      	add	r7, sp, #0
	__NOP();
 8009d70:	bf00      	nop
}
 8009d72:	bf00      	nop
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 8009d7c:	b480      	push	{r7}
 8009d7e:	af00      	add	r7, sp, #0
	__NOP();
 8009d80:	bf00      	nop
}
 8009d82:	bf00      	nop
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 8009d8c:	b480      	push	{r7}
 8009d8e:	af00      	add	r7, sp, #0
	return auxRxData;
 8009d90:	4b03      	ldr	r3, [pc, #12]	; (8009da0 <getRxData+0x14>)
 8009d92:	781b      	ldrb	r3, [r3, #0]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	20012278 	.word	0x20012278

08009da4 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8009da4:	b580      	push	{r7, lr}
 8009da6:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8009da8:	4b07      	ldr	r3, [pc, #28]	; (8009dc8 <USART2_IRQHandler+0x24>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f003 0320 	and.w	r3, r3, #32
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d006      	beq.n	8009dc2 <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 8009db4:	4b04      	ldr	r3, [pc, #16]	; (8009dc8 <USART2_IRQHandler+0x24>)
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	4b04      	ldr	r3, [pc, #16]	; (8009dcc <USART2_IRQHandler+0x28>)
 8009dbc:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8009dbe:	f7f8 f817 	bl	8001df0 <usart2Rx_Callback>
	}

}
 8009dc2:	bf00      	nop
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	40004400 	.word	0x40004400
 8009dcc:	20012278 	.word	0x20012278

08009dd0 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 8009dd4:	4b07      	ldr	r3, [pc, #28]	; (8009df4 <USART1_IRQHandler+0x24>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0320 	and.w	r3, r3, #32
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d006      	beq.n	8009dee <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8009de0:	4b04      	ldr	r3, [pc, #16]	; (8009df4 <USART1_IRQHandler+0x24>)
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	b2da      	uxtb	r2, r3
 8009de6:	4b04      	ldr	r3, [pc, #16]	; (8009df8 <USART1_IRQHandler+0x28>)
 8009de8:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8009dea:	f7ff ffbf 	bl	8009d6c <usart1Rx_Callback>
	}
}
 8009dee:	bf00      	nop
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	40011000 	.word	0x40011000
 8009df8:	20012278 	.word	0x20012278

08009dfc <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8009e00:	4b07      	ldr	r3, [pc, #28]	; (8009e20 <USART6_IRQHandler+0x24>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 0320 	and.w	r3, r3, #32
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d006      	beq.n	8009e1a <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8009e0c:	4b04      	ldr	r3, [pc, #16]	; (8009e20 <USART6_IRQHandler+0x24>)
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	b2da      	uxtb	r2, r3
 8009e12:	4b04      	ldr	r3, [pc, #16]	; (8009e24 <USART6_IRQHandler+0x28>)
 8009e14:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8009e16:	f7ff ffb1 	bl	8009d7c <usart6Rx_Callback>
	}

}
 8009e1a:	bf00      	nop
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	40011400 	.word	0x40011400
 8009e24:	20012278 	.word	0x20012278

08009e28 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009e32:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 8009e34:	6838      	ldr	r0, [r7, #0]
 8009e36:	f7f6 fb8d 	bl	8000554 <__aeabi_i2d>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	ec43 2b11 	vmov	d1, r2, r3
 8009e42:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8009ec0 <roundToNDecimals+0x98>
 8009e46:	f003 ff8d 	bl	800dd64 <pow>
 8009e4a:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7f6 fb92 	bl	8000578 <__aeabi_f2d>
 8009e54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e58:	f7f6 fbe6 	bl	8000628 <__aeabi_dmul>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4610      	mov	r0, r2
 8009e62:	4619      	mov	r1, r3
 8009e64:	f7f6 fed8 	bl	8000c18 <__aeabi_d2f>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	607b      	str	r3, [r7, #4]

    number = round(number);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f7f6 fb83 	bl	8000578 <__aeabi_f2d>
 8009e72:	4602      	mov	r2, r0
 8009e74:	460b      	mov	r3, r1
 8009e76:	ec43 2b10 	vmov	d0, r2, r3
 8009e7a:	f003 fe9d 	bl	800dbb8 <round>
 8009e7e:	ec53 2b10 	vmov	r2, r3, d0
 8009e82:	4610      	mov	r0, r2
 8009e84:	4619      	mov	r1, r3
 8009e86:	f7f6 fec7 	bl	8000c18 <__aeabi_d2f>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	607b      	str	r3, [r7, #4]

    number /= factor;
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f7f6 fb72 	bl	8000578 <__aeabi_f2d>
 8009e94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e98:	f7f6 fcf0 	bl	800087c <__aeabi_ddiv>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	f7f6 feb8 	bl	8000c18 <__aeabi_d2f>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	607b      	str	r3, [r7, #4]

    return number;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	ee07 3a90 	vmov	s15, r3
}
 8009eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	f3af 8000 	nop.w
 8009ec0:	00000000 	.word	0x00000000
 8009ec4:	40240000 	.word	0x40240000

08009ec8 <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
//
//	ptrDMA_handler[1]->ptrDMAType = DMA1;
//	ptrDMA_handler[1]->ptrDMAStream = DMA1_Stream6;

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a89      	ldr	r2, [pc, #548]	; (800a0fc <i2c_config+0x234>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d106      	bne.n	8009ee8 <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 8009eda:	4b89      	ldr	r3, [pc, #548]	; (800a100 <i2c_config+0x238>)
 8009edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ede:	4a88      	ldr	r2, [pc, #544]	; (800a100 <i2c_config+0x238>)
 8009ee0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8009ee6:	e016      	b.n	8009f16 <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a85      	ldr	r2, [pc, #532]	; (800a104 <i2c_config+0x23c>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d106      	bne.n	8009f00 <i2c_config+0x38>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 8009ef2:	4b83      	ldr	r3, [pc, #524]	; (800a100 <i2c_config+0x238>)
 8009ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef6:	4a82      	ldr	r2, [pc, #520]	; (800a100 <i2c_config+0x238>)
 8009ef8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009efc:	6413      	str	r3, [r2, #64]	; 0x40
 8009efe:	e00a      	b.n	8009f16 <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a80      	ldr	r2, [pc, #512]	; (800a108 <i2c_config+0x240>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d105      	bne.n	8009f16 <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 8009f0a:	4b7d      	ldr	r3, [pc, #500]	; (800a100 <i2c_config+0x238>)
 8009f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f0e:	4a7c      	ldr	r2, [pc, #496]	; (800a100 <i2c_config+0x238>)
 8009f10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f14:	6413      	str	r3, [r2, #64]	; 0x40
	}



	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f022 0201 	bic.w	r2, r2, #1
 8009f24:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009f26:	e000      	b.n	8009f2a <i2c_config+0x62>
		__NOP();
 8009f28:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	f003 0302 	and.w	r3, r3, #2
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1f7      	bne.n	8009f28 <i2c_config+0x60>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f46:	601a      	str	r2, [r3, #0]

	__NOP();
 8009f48:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009f58:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8009f68:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	79db      	ldrb	r3, [r3, #7]
 8009f6e:	2b10      	cmp	r3, #16
 8009f70:	d108      	bne.n	8009f84 <i2c_config+0xbc>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	685a      	ldr	r2, [r3, #4]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f042 0210 	orr.w	r2, r2, #16
 8009f80:	605a      	str	r2, [r3, #4]
 8009f82:	e018      	b.n	8009fb6 <i2c_config+0xee>

	}else if(ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_25_MHz_FOR_I2C){
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	79db      	ldrb	r3, [r3, #7]
 8009f88:	2b19      	cmp	r3, #25
 8009f8a:	d108      	bne.n	8009f9e <i2c_config+0xd6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_25_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685a      	ldr	r2, [r3, #4]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f042 0219 	orr.w	r2, r2, #25
 8009f9a:	605a      	str	r2, [r3, #4]
 8009f9c:	e00b      	b.n	8009fb6 <i2c_config+0xee>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	79db      	ldrb	r3, [r3, #7]
 8009fa2:	2b32      	cmp	r3, #50	; 0x32
 8009fa4:	d107      	bne.n	8009fb6 <i2c_config+0xee>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8009fb4:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	795b      	ldrb	r3, [r3, #5]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d15c      	bne.n	800a088 <i2c_config+0x1c0>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	69da      	ldr	r2, [r3, #28]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009fdc:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	79db      	ldrb	r3, [r3, #7]
 8009fe2:	2b32      	cmp	r3, #50	; 0x32
 8009fe4:	d03f      	beq.n	800a066 <i2c_config+0x19e>
 8009fe6:	2b32      	cmp	r3, #50	; 0x32
 8009fe8:	f300 80b2 	bgt.w	800a150 <i2c_config+0x288>
 8009fec:	2b19      	cmp	r3, #25
 8009fee:	d029      	beq.n	800a044 <i2c_config+0x17c>
 8009ff0:	2b19      	cmp	r3, #25
 8009ff2:	f300 80ad 	bgt.w	800a150 <i2c_config+0x288>
 8009ff6:	2b04      	cmp	r3, #4
 8009ff8:	d002      	beq.n	800a000 <i2c_config+0x138>
 8009ffa:	2b10      	cmp	r3, #16
 8009ffc:	d011      	beq.n	800a022 <i2c_config+0x15a>


				break;
			}default:{

				break;
 8009ffe:	e0a7      	b.n	800a150 <i2c_config+0x288>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	69da      	ldr	r2, [r3, #28]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f042 0214 	orr.w	r2, r2, #20
 800a00e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	6a1a      	ldr	r2, [r3, #32]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f042 0205 	orr.w	r2, r2, #5
 800a01e:	621a      	str	r2, [r3, #32]
				break;
 800a020:	e099      	b.n	800a156 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	69da      	ldr	r2, [r3, #28]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800a030:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6a1a      	ldr	r2, [r3, #32]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f042 0211 	orr.w	r2, r2, #17
 800a040:	621a      	str	r2, [r3, #32]
				break;
 800a042:	e088      	b.n	800a156 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_25MHz << I2C_CCR_CCR_Pos);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	69da      	ldr	r2, [r3, #28]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 800a052:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_25MHz;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6a1a      	ldr	r2, [r3, #32]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f042 0215 	orr.w	r2, r2, #21
 800a062:	621a      	str	r2, [r3, #32]
				break;
 800a064:	e077      	b.n	800a156 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	69da      	ldr	r2, [r3, #28]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 800a074:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	6a1a      	ldr	r2, [r3, #32]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 800a084:	621a      	str	r2, [r3, #32]
				break;
 800a086:	e066      	b.n	800a156 <i2c_config+0x28e>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	69da      	ldr	r2, [r3, #28]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a096:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	79db      	ldrb	r3, [r3, #7]
 800a09c:	2b32      	cmp	r3, #50	; 0x32
 800a09e:	d046      	beq.n	800a12e <i2c_config+0x266>
 800a0a0:	2b32      	cmp	r3, #50	; 0x32
 800a0a2:	dc57      	bgt.n	800a154 <i2c_config+0x28c>
 800a0a4:	2b19      	cmp	r3, #25
 800a0a6:	d031      	beq.n	800a10c <i2c_config+0x244>
 800a0a8:	2b19      	cmp	r3, #25
 800a0aa:	dc53      	bgt.n	800a154 <i2c_config+0x28c>
 800a0ac:	2b04      	cmp	r3, #4
 800a0ae:	d002      	beq.n	800a0b6 <i2c_config+0x1ee>
 800a0b0:	2b10      	cmp	r3, #16
 800a0b2:	d011      	beq.n	800a0d8 <i2c_config+0x210>


				break;
			}default:{

				break;
 800a0b4:	e04e      	b.n	800a154 <i2c_config+0x28c>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	69da      	ldr	r2, [r3, #28]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f042 0203 	orr.w	r2, r2, #3
 800a0c4:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	6a1a      	ldr	r2, [r3, #32]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f042 0202 	orr.w	r2, r2, #2
 800a0d4:	621a      	str	r2, [r3, #32]
				break;
 800a0d6:	e03e      	b.n	800a156 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	69da      	ldr	r2, [r3, #28]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f042 020d 	orr.w	r2, r2, #13
 800a0e6:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	6a1a      	ldr	r2, [r3, #32]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f042 0206 	orr.w	r2, r2, #6
 800a0f6:	621a      	str	r2, [r3, #32]
				break;
 800a0f8:	e02d      	b.n	800a156 <i2c_config+0x28e>
 800a0fa:	bf00      	nop
 800a0fc:	40005400 	.word	0x40005400
 800a100:	40023800 	.word	0x40023800
 800a104:	40005800 	.word	0x40005800
 800a108:	40005c00 	.word	0x40005c00
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_25MHz << I2C_CCR_CCR_Pos);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	69da      	ldr	r2, [r3, #28]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f042 0215 	orr.w	r2, r2, #21
 800a11a:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_25MHz;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6a1a      	ldr	r2, [r3, #32]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f042 0208 	orr.w	r2, r2, #8
 800a12a:	621a      	str	r2, [r3, #32]
				break;
 800a12c:	e013      	b.n	800a156 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	69da      	ldr	r2, [r3, #28]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800a13c:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	6a1a      	ldr	r2, [r3, #32]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f042 0210 	orr.w	r2, r2, #16
 800a14c:	621a      	str	r2, [r3, #32]
				break;
 800a14e:	e002      	b.n	800a156 <i2c_config+0x28e>
				break;
 800a150:	bf00      	nop
 800a152:	e002      	b.n	800a15a <i2c_config+0x292>
				break;
 800a154:	bf00      	nop

		}

	}

	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a156:	e000      	b.n	800a15a <i2c_config+0x292>
		__NOP();
 800a158:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	f003 0302 	and.w	r3, r3, #2
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1f7      	bne.n	800a158 <i2c_config+0x290>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f042 0201 	orr.w	r2, r2, #1
 800a176:	601a      	str	r2, [r3, #0]


}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a19a:	601a      	str	r2, [r3, #0]
}
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	7a1b      	ldrb	r3, [r3, #8]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d009      	beq.n	800a1cc <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1c6:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a1c8:	e000      	b.n	800a1cc <i2c_startTransaction+0x24>
		__NOP();
 800a1ca:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	699b      	ldr	r3, [r3, #24]
 800a1d2:	f003 0302 	and.w	r3, r3, #2
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1f7      	bne.n	800a1ca <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1e8:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a1ea:	e000      	b.n	800a1ee <i2c_startTransaction+0x46>
		__NOP();
 800a1ec:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	f003 0301 	and.w	r3, r3, #1
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d0f7      	beq.n	800a1ec <i2c_startTransaction+0x44>
	}
}
 800a1fc:	bf00      	nop
 800a1fe:	bf00      	nop
 800a200:	370c      	adds	r7, #12
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 800a20a:	b480      	push	{r7}
 800a20c:	b083      	sub	sp, #12
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	7a1b      	ldrb	r3, [r3, #8]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d007      	beq.n	800a22a <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a228:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a238:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a23a:	e000      	b.n	800a23e <i2c_reStartTransaction+0x34>
		__NOP();
 800a23c:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	695b      	ldr	r3, [r3, #20]
 800a244:	f003 0301 	and.w	r3, r3, #1
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d0f7      	beq.n	800a23c <i2c_reStartTransaction+0x32>
	}
}
 800a24c:	bf00      	nop
 800a24e:	bf00      	nop
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a270:	601a      	str	r2, [r3, #0]
}
 800a272:	bf00      	nop
 800a274:	370c      	adds	r7, #12
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800a27e:	b480      	push	{r7}
 800a280:	b085      	sub	sp, #20
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	460b      	mov	r3, r1
 800a288:	70fb      	strb	r3, [r7, #3]
 800a28a:	4613      	mov	r3, r2
 800a28c:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 800a292:	78fb      	ldrb	r3, [r7, #3]
 800a294:	005a      	lsls	r2, r3, #1
 800a296:	78bb      	ldrb	r3, [r7, #2]
 800a298:	431a      	orrs	r2, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800a2a0:	e000      	b.n	800a2a4 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 800a2a2:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	f003 0302 	and.w	r3, r3, #2
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0f7      	beq.n	800a2a2 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	699b      	ldr	r3, [r3, #24]
 800a2c0:	73fb      	strb	r3, [r7, #15]

}
 800a2c2:	bf00      	nop
 800a2c4:	3714      	adds	r7, #20
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr

0800a2ce <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800a2ce:	b480      	push	{r7}
 800a2d0:	b083      	sub	sp, #12
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	78fa      	ldrb	r2, [r7, #3]
 800a2e0:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800a2e2:	e000      	b.n	800a2e6 <i2c_sendMemoryAddress+0x18>
		__NOP();
 800a2e4:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d0f7      	beq.n	800a2e4 <i2c_sendMemoryAddress+0x16>
	}
}
 800a2f4:	bf00      	nop
 800a2f6:	bf00      	nop
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 800a302:	b480      	push	{r7}
 800a304:	b083      	sub	sp, #12
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	460b      	mov	r3, r1
 800a30c:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	78fa      	ldrb	r2, [r7, #3]
 800a314:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800a316:	e000      	b.n	800a31a <i2c_sendDataByte+0x18>
		__NOP();
 800a318:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	f003 0304 	and.w	r3, r3, #4
 800a324:	2b00      	cmp	r3, #0
 800a326:	d0f7      	beq.n	800a318 <i2c_sendDataByte+0x16>
	}
}
 800a328:	bf00      	nop
 800a32a:	bf00      	nop
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 800a336:	b480      	push	{r7}
 800a338:	b083      	sub	sp, #12
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800a33e:	e000      	b.n	800a342 <i2c_readDataByte+0xc>
		__NOP();
 800a340:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	695b      	ldr	r3, [r3, #20]
 800a348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d0f7      	beq.n	800a340 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	b2da      	uxtb	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	799b      	ldrb	r3, [r3, #6]
}
 800a360:	4618      	mov	r0, r3
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <__errno>:
 800a36c:	4b01      	ldr	r3, [pc, #4]	; (800a374 <__errno+0x8>)
 800a36e:	6818      	ldr	r0, [r3, #0]
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	20000014 	.word	0x20000014

0800a378 <__libc_init_array>:
 800a378:	b570      	push	{r4, r5, r6, lr}
 800a37a:	4d0d      	ldr	r5, [pc, #52]	; (800a3b0 <__libc_init_array+0x38>)
 800a37c:	4c0d      	ldr	r4, [pc, #52]	; (800a3b4 <__libc_init_array+0x3c>)
 800a37e:	1b64      	subs	r4, r4, r5
 800a380:	10a4      	asrs	r4, r4, #2
 800a382:	2600      	movs	r6, #0
 800a384:	42a6      	cmp	r6, r4
 800a386:	d109      	bne.n	800a39c <__libc_init_array+0x24>
 800a388:	4d0b      	ldr	r5, [pc, #44]	; (800a3b8 <__libc_init_array+0x40>)
 800a38a:	4c0c      	ldr	r4, [pc, #48]	; (800a3bc <__libc_init_array+0x44>)
 800a38c:	f006 f87c 	bl	8010488 <_init>
 800a390:	1b64      	subs	r4, r4, r5
 800a392:	10a4      	asrs	r4, r4, #2
 800a394:	2600      	movs	r6, #0
 800a396:	42a6      	cmp	r6, r4
 800a398:	d105      	bne.n	800a3a6 <__libc_init_array+0x2e>
 800a39a:	bd70      	pop	{r4, r5, r6, pc}
 800a39c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3a0:	4798      	blx	r3
 800a3a2:	3601      	adds	r6, #1
 800a3a4:	e7ee      	b.n	800a384 <__libc_init_array+0xc>
 800a3a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3aa:	4798      	blx	r3
 800a3ac:	3601      	adds	r6, #1
 800a3ae:	e7f2      	b.n	800a396 <__libc_init_array+0x1e>
 800a3b0:	08011068 	.word	0x08011068
 800a3b4:	08011068 	.word	0x08011068
 800a3b8:	08011068 	.word	0x08011068
 800a3bc:	0801106c 	.word	0x0801106c

0800a3c0 <malloc>:
 800a3c0:	4b02      	ldr	r3, [pc, #8]	; (800a3cc <malloc+0xc>)
 800a3c2:	4601      	mov	r1, r0
 800a3c4:	6818      	ldr	r0, [r3, #0]
 800a3c6:	f000 b877 	b.w	800a4b8 <_malloc_r>
 800a3ca:	bf00      	nop
 800a3cc:	20000014 	.word	0x20000014

0800a3d0 <memset>:
 800a3d0:	4402      	add	r2, r0
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d100      	bne.n	800a3da <memset+0xa>
 800a3d8:	4770      	bx	lr
 800a3da:	f803 1b01 	strb.w	r1, [r3], #1
 800a3de:	e7f9      	b.n	800a3d4 <memset+0x4>

0800a3e0 <_free_r>:
 800a3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3e2:	2900      	cmp	r1, #0
 800a3e4:	d044      	beq.n	800a470 <_free_r+0x90>
 800a3e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ea:	9001      	str	r0, [sp, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f1a1 0404 	sub.w	r4, r1, #4
 800a3f2:	bfb8      	it	lt
 800a3f4:	18e4      	addlt	r4, r4, r3
 800a3f6:	f001 fca1 	bl	800bd3c <__malloc_lock>
 800a3fa:	4a1e      	ldr	r2, [pc, #120]	; (800a474 <_free_r+0x94>)
 800a3fc:	9801      	ldr	r0, [sp, #4]
 800a3fe:	6813      	ldr	r3, [r2, #0]
 800a400:	b933      	cbnz	r3, 800a410 <_free_r+0x30>
 800a402:	6063      	str	r3, [r4, #4]
 800a404:	6014      	str	r4, [r2, #0]
 800a406:	b003      	add	sp, #12
 800a408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a40c:	f001 bc9c 	b.w	800bd48 <__malloc_unlock>
 800a410:	42a3      	cmp	r3, r4
 800a412:	d908      	bls.n	800a426 <_free_r+0x46>
 800a414:	6825      	ldr	r5, [r4, #0]
 800a416:	1961      	adds	r1, r4, r5
 800a418:	428b      	cmp	r3, r1
 800a41a:	bf01      	itttt	eq
 800a41c:	6819      	ldreq	r1, [r3, #0]
 800a41e:	685b      	ldreq	r3, [r3, #4]
 800a420:	1949      	addeq	r1, r1, r5
 800a422:	6021      	streq	r1, [r4, #0]
 800a424:	e7ed      	b.n	800a402 <_free_r+0x22>
 800a426:	461a      	mov	r2, r3
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	b10b      	cbz	r3, 800a430 <_free_r+0x50>
 800a42c:	42a3      	cmp	r3, r4
 800a42e:	d9fa      	bls.n	800a426 <_free_r+0x46>
 800a430:	6811      	ldr	r1, [r2, #0]
 800a432:	1855      	adds	r5, r2, r1
 800a434:	42a5      	cmp	r5, r4
 800a436:	d10b      	bne.n	800a450 <_free_r+0x70>
 800a438:	6824      	ldr	r4, [r4, #0]
 800a43a:	4421      	add	r1, r4
 800a43c:	1854      	adds	r4, r2, r1
 800a43e:	42a3      	cmp	r3, r4
 800a440:	6011      	str	r1, [r2, #0]
 800a442:	d1e0      	bne.n	800a406 <_free_r+0x26>
 800a444:	681c      	ldr	r4, [r3, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	6053      	str	r3, [r2, #4]
 800a44a:	4421      	add	r1, r4
 800a44c:	6011      	str	r1, [r2, #0]
 800a44e:	e7da      	b.n	800a406 <_free_r+0x26>
 800a450:	d902      	bls.n	800a458 <_free_r+0x78>
 800a452:	230c      	movs	r3, #12
 800a454:	6003      	str	r3, [r0, #0]
 800a456:	e7d6      	b.n	800a406 <_free_r+0x26>
 800a458:	6825      	ldr	r5, [r4, #0]
 800a45a:	1961      	adds	r1, r4, r5
 800a45c:	428b      	cmp	r3, r1
 800a45e:	bf04      	itt	eq
 800a460:	6819      	ldreq	r1, [r3, #0]
 800a462:	685b      	ldreq	r3, [r3, #4]
 800a464:	6063      	str	r3, [r4, #4]
 800a466:	bf04      	itt	eq
 800a468:	1949      	addeq	r1, r1, r5
 800a46a:	6021      	streq	r1, [r4, #0]
 800a46c:	6054      	str	r4, [r2, #4]
 800a46e:	e7ca      	b.n	800a406 <_free_r+0x26>
 800a470:	b003      	add	sp, #12
 800a472:	bd30      	pop	{r4, r5, pc}
 800a474:	2001227c 	.word	0x2001227c

0800a478 <sbrk_aligned>:
 800a478:	b570      	push	{r4, r5, r6, lr}
 800a47a:	4e0e      	ldr	r6, [pc, #56]	; (800a4b4 <sbrk_aligned+0x3c>)
 800a47c:	460c      	mov	r4, r1
 800a47e:	6831      	ldr	r1, [r6, #0]
 800a480:	4605      	mov	r5, r0
 800a482:	b911      	cbnz	r1, 800a48a <sbrk_aligned+0x12>
 800a484:	f000 fcf6 	bl	800ae74 <_sbrk_r>
 800a488:	6030      	str	r0, [r6, #0]
 800a48a:	4621      	mov	r1, r4
 800a48c:	4628      	mov	r0, r5
 800a48e:	f000 fcf1 	bl	800ae74 <_sbrk_r>
 800a492:	1c43      	adds	r3, r0, #1
 800a494:	d00a      	beq.n	800a4ac <sbrk_aligned+0x34>
 800a496:	1cc4      	adds	r4, r0, #3
 800a498:	f024 0403 	bic.w	r4, r4, #3
 800a49c:	42a0      	cmp	r0, r4
 800a49e:	d007      	beq.n	800a4b0 <sbrk_aligned+0x38>
 800a4a0:	1a21      	subs	r1, r4, r0
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	f000 fce6 	bl	800ae74 <_sbrk_r>
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	d101      	bne.n	800a4b0 <sbrk_aligned+0x38>
 800a4ac:	f04f 34ff 	mov.w	r4, #4294967295
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	bd70      	pop	{r4, r5, r6, pc}
 800a4b4:	20012280 	.word	0x20012280

0800a4b8 <_malloc_r>:
 800a4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4bc:	1ccd      	adds	r5, r1, #3
 800a4be:	f025 0503 	bic.w	r5, r5, #3
 800a4c2:	3508      	adds	r5, #8
 800a4c4:	2d0c      	cmp	r5, #12
 800a4c6:	bf38      	it	cc
 800a4c8:	250c      	movcc	r5, #12
 800a4ca:	2d00      	cmp	r5, #0
 800a4cc:	4607      	mov	r7, r0
 800a4ce:	db01      	blt.n	800a4d4 <_malloc_r+0x1c>
 800a4d0:	42a9      	cmp	r1, r5
 800a4d2:	d905      	bls.n	800a4e0 <_malloc_r+0x28>
 800a4d4:	230c      	movs	r3, #12
 800a4d6:	603b      	str	r3, [r7, #0]
 800a4d8:	2600      	movs	r6, #0
 800a4da:	4630      	mov	r0, r6
 800a4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e0:	4e2e      	ldr	r6, [pc, #184]	; (800a59c <_malloc_r+0xe4>)
 800a4e2:	f001 fc2b 	bl	800bd3c <__malloc_lock>
 800a4e6:	6833      	ldr	r3, [r6, #0]
 800a4e8:	461c      	mov	r4, r3
 800a4ea:	bb34      	cbnz	r4, 800a53a <_malloc_r+0x82>
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	f7ff ffc2 	bl	800a478 <sbrk_aligned>
 800a4f4:	1c43      	adds	r3, r0, #1
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	d14d      	bne.n	800a596 <_malloc_r+0xde>
 800a4fa:	6834      	ldr	r4, [r6, #0]
 800a4fc:	4626      	mov	r6, r4
 800a4fe:	2e00      	cmp	r6, #0
 800a500:	d140      	bne.n	800a584 <_malloc_r+0xcc>
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	4631      	mov	r1, r6
 800a506:	4638      	mov	r0, r7
 800a508:	eb04 0803 	add.w	r8, r4, r3
 800a50c:	f000 fcb2 	bl	800ae74 <_sbrk_r>
 800a510:	4580      	cmp	r8, r0
 800a512:	d13a      	bne.n	800a58a <_malloc_r+0xd2>
 800a514:	6821      	ldr	r1, [r4, #0]
 800a516:	3503      	adds	r5, #3
 800a518:	1a6d      	subs	r5, r5, r1
 800a51a:	f025 0503 	bic.w	r5, r5, #3
 800a51e:	3508      	adds	r5, #8
 800a520:	2d0c      	cmp	r5, #12
 800a522:	bf38      	it	cc
 800a524:	250c      	movcc	r5, #12
 800a526:	4629      	mov	r1, r5
 800a528:	4638      	mov	r0, r7
 800a52a:	f7ff ffa5 	bl	800a478 <sbrk_aligned>
 800a52e:	3001      	adds	r0, #1
 800a530:	d02b      	beq.n	800a58a <_malloc_r+0xd2>
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	442b      	add	r3, r5
 800a536:	6023      	str	r3, [r4, #0]
 800a538:	e00e      	b.n	800a558 <_malloc_r+0xa0>
 800a53a:	6822      	ldr	r2, [r4, #0]
 800a53c:	1b52      	subs	r2, r2, r5
 800a53e:	d41e      	bmi.n	800a57e <_malloc_r+0xc6>
 800a540:	2a0b      	cmp	r2, #11
 800a542:	d916      	bls.n	800a572 <_malloc_r+0xba>
 800a544:	1961      	adds	r1, r4, r5
 800a546:	42a3      	cmp	r3, r4
 800a548:	6025      	str	r5, [r4, #0]
 800a54a:	bf18      	it	ne
 800a54c:	6059      	strne	r1, [r3, #4]
 800a54e:	6863      	ldr	r3, [r4, #4]
 800a550:	bf08      	it	eq
 800a552:	6031      	streq	r1, [r6, #0]
 800a554:	5162      	str	r2, [r4, r5]
 800a556:	604b      	str	r3, [r1, #4]
 800a558:	4638      	mov	r0, r7
 800a55a:	f104 060b 	add.w	r6, r4, #11
 800a55e:	f001 fbf3 	bl	800bd48 <__malloc_unlock>
 800a562:	f026 0607 	bic.w	r6, r6, #7
 800a566:	1d23      	adds	r3, r4, #4
 800a568:	1af2      	subs	r2, r6, r3
 800a56a:	d0b6      	beq.n	800a4da <_malloc_r+0x22>
 800a56c:	1b9b      	subs	r3, r3, r6
 800a56e:	50a3      	str	r3, [r4, r2]
 800a570:	e7b3      	b.n	800a4da <_malloc_r+0x22>
 800a572:	6862      	ldr	r2, [r4, #4]
 800a574:	42a3      	cmp	r3, r4
 800a576:	bf0c      	ite	eq
 800a578:	6032      	streq	r2, [r6, #0]
 800a57a:	605a      	strne	r2, [r3, #4]
 800a57c:	e7ec      	b.n	800a558 <_malloc_r+0xa0>
 800a57e:	4623      	mov	r3, r4
 800a580:	6864      	ldr	r4, [r4, #4]
 800a582:	e7b2      	b.n	800a4ea <_malloc_r+0x32>
 800a584:	4634      	mov	r4, r6
 800a586:	6876      	ldr	r6, [r6, #4]
 800a588:	e7b9      	b.n	800a4fe <_malloc_r+0x46>
 800a58a:	230c      	movs	r3, #12
 800a58c:	603b      	str	r3, [r7, #0]
 800a58e:	4638      	mov	r0, r7
 800a590:	f001 fbda 	bl	800bd48 <__malloc_unlock>
 800a594:	e7a1      	b.n	800a4da <_malloc_r+0x22>
 800a596:	6025      	str	r5, [r4, #0]
 800a598:	e7de      	b.n	800a558 <_malloc_r+0xa0>
 800a59a:	bf00      	nop
 800a59c:	2001227c 	.word	0x2001227c

0800a5a0 <__cvt>:
 800a5a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a4:	ec55 4b10 	vmov	r4, r5, d0
 800a5a8:	2d00      	cmp	r5, #0
 800a5aa:	460e      	mov	r6, r1
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	462b      	mov	r3, r5
 800a5b0:	bfbb      	ittet	lt
 800a5b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a5b6:	461d      	movlt	r5, r3
 800a5b8:	2300      	movge	r3, #0
 800a5ba:	232d      	movlt	r3, #45	; 0x2d
 800a5bc:	700b      	strb	r3, [r1, #0]
 800a5be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a5c4:	4691      	mov	r9, r2
 800a5c6:	f023 0820 	bic.w	r8, r3, #32
 800a5ca:	bfbc      	itt	lt
 800a5cc:	4622      	movlt	r2, r4
 800a5ce:	4614      	movlt	r4, r2
 800a5d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a5d4:	d005      	beq.n	800a5e2 <__cvt+0x42>
 800a5d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a5da:	d100      	bne.n	800a5de <__cvt+0x3e>
 800a5dc:	3601      	adds	r6, #1
 800a5de:	2102      	movs	r1, #2
 800a5e0:	e000      	b.n	800a5e4 <__cvt+0x44>
 800a5e2:	2103      	movs	r1, #3
 800a5e4:	ab03      	add	r3, sp, #12
 800a5e6:	9301      	str	r3, [sp, #4]
 800a5e8:	ab02      	add	r3, sp, #8
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	ec45 4b10 	vmov	d0, r4, r5
 800a5f0:	4653      	mov	r3, sl
 800a5f2:	4632      	mov	r2, r6
 800a5f4:	f000 fd90 	bl	800b118 <_dtoa_r>
 800a5f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a5fc:	4607      	mov	r7, r0
 800a5fe:	d102      	bne.n	800a606 <__cvt+0x66>
 800a600:	f019 0f01 	tst.w	r9, #1
 800a604:	d022      	beq.n	800a64c <__cvt+0xac>
 800a606:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a60a:	eb07 0906 	add.w	r9, r7, r6
 800a60e:	d110      	bne.n	800a632 <__cvt+0x92>
 800a610:	783b      	ldrb	r3, [r7, #0]
 800a612:	2b30      	cmp	r3, #48	; 0x30
 800a614:	d10a      	bne.n	800a62c <__cvt+0x8c>
 800a616:	2200      	movs	r2, #0
 800a618:	2300      	movs	r3, #0
 800a61a:	4620      	mov	r0, r4
 800a61c:	4629      	mov	r1, r5
 800a61e:	f7f6 fa6b 	bl	8000af8 <__aeabi_dcmpeq>
 800a622:	b918      	cbnz	r0, 800a62c <__cvt+0x8c>
 800a624:	f1c6 0601 	rsb	r6, r6, #1
 800a628:	f8ca 6000 	str.w	r6, [sl]
 800a62c:	f8da 3000 	ldr.w	r3, [sl]
 800a630:	4499      	add	r9, r3
 800a632:	2200      	movs	r2, #0
 800a634:	2300      	movs	r3, #0
 800a636:	4620      	mov	r0, r4
 800a638:	4629      	mov	r1, r5
 800a63a:	f7f6 fa5d 	bl	8000af8 <__aeabi_dcmpeq>
 800a63e:	b108      	cbz	r0, 800a644 <__cvt+0xa4>
 800a640:	f8cd 900c 	str.w	r9, [sp, #12]
 800a644:	2230      	movs	r2, #48	; 0x30
 800a646:	9b03      	ldr	r3, [sp, #12]
 800a648:	454b      	cmp	r3, r9
 800a64a:	d307      	bcc.n	800a65c <__cvt+0xbc>
 800a64c:	9b03      	ldr	r3, [sp, #12]
 800a64e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a650:	1bdb      	subs	r3, r3, r7
 800a652:	4638      	mov	r0, r7
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	b004      	add	sp, #16
 800a658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a65c:	1c59      	adds	r1, r3, #1
 800a65e:	9103      	str	r1, [sp, #12]
 800a660:	701a      	strb	r2, [r3, #0]
 800a662:	e7f0      	b.n	800a646 <__cvt+0xa6>

0800a664 <__exponent>:
 800a664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a666:	4603      	mov	r3, r0
 800a668:	2900      	cmp	r1, #0
 800a66a:	bfb8      	it	lt
 800a66c:	4249      	neglt	r1, r1
 800a66e:	f803 2b02 	strb.w	r2, [r3], #2
 800a672:	bfb4      	ite	lt
 800a674:	222d      	movlt	r2, #45	; 0x2d
 800a676:	222b      	movge	r2, #43	; 0x2b
 800a678:	2909      	cmp	r1, #9
 800a67a:	7042      	strb	r2, [r0, #1]
 800a67c:	dd2a      	ble.n	800a6d4 <__exponent+0x70>
 800a67e:	f10d 0407 	add.w	r4, sp, #7
 800a682:	46a4      	mov	ip, r4
 800a684:	270a      	movs	r7, #10
 800a686:	46a6      	mov	lr, r4
 800a688:	460a      	mov	r2, r1
 800a68a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a68e:	fb07 1516 	mls	r5, r7, r6, r1
 800a692:	3530      	adds	r5, #48	; 0x30
 800a694:	2a63      	cmp	r2, #99	; 0x63
 800a696:	f104 34ff 	add.w	r4, r4, #4294967295
 800a69a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a69e:	4631      	mov	r1, r6
 800a6a0:	dcf1      	bgt.n	800a686 <__exponent+0x22>
 800a6a2:	3130      	adds	r1, #48	; 0x30
 800a6a4:	f1ae 0502 	sub.w	r5, lr, #2
 800a6a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a6ac:	1c44      	adds	r4, r0, #1
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4561      	cmp	r1, ip
 800a6b2:	d30a      	bcc.n	800a6ca <__exponent+0x66>
 800a6b4:	f10d 0209 	add.w	r2, sp, #9
 800a6b8:	eba2 020e 	sub.w	r2, r2, lr
 800a6bc:	4565      	cmp	r5, ip
 800a6be:	bf88      	it	hi
 800a6c0:	2200      	movhi	r2, #0
 800a6c2:	4413      	add	r3, r2
 800a6c4:	1a18      	subs	r0, r3, r0
 800a6c6:	b003      	add	sp, #12
 800a6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a6d2:	e7ed      	b.n	800a6b0 <__exponent+0x4c>
 800a6d4:	2330      	movs	r3, #48	; 0x30
 800a6d6:	3130      	adds	r1, #48	; 0x30
 800a6d8:	7083      	strb	r3, [r0, #2]
 800a6da:	70c1      	strb	r1, [r0, #3]
 800a6dc:	1d03      	adds	r3, r0, #4
 800a6de:	e7f1      	b.n	800a6c4 <__exponent+0x60>

0800a6e0 <_printf_float>:
 800a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e4:	ed2d 8b02 	vpush	{d8}
 800a6e8:	b08d      	sub	sp, #52	; 0x34
 800a6ea:	460c      	mov	r4, r1
 800a6ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a6f0:	4616      	mov	r6, r2
 800a6f2:	461f      	mov	r7, r3
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	f001 fafd 	bl	800bcf4 <_localeconv_r>
 800a6fa:	f8d0 a000 	ldr.w	sl, [r0]
 800a6fe:	4650      	mov	r0, sl
 800a700:	f7f5 fd78 	bl	80001f4 <strlen>
 800a704:	2300      	movs	r3, #0
 800a706:	930a      	str	r3, [sp, #40]	; 0x28
 800a708:	6823      	ldr	r3, [r4, #0]
 800a70a:	9305      	str	r3, [sp, #20]
 800a70c:	f8d8 3000 	ldr.w	r3, [r8]
 800a710:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a714:	3307      	adds	r3, #7
 800a716:	f023 0307 	bic.w	r3, r3, #7
 800a71a:	f103 0208 	add.w	r2, r3, #8
 800a71e:	f8c8 2000 	str.w	r2, [r8]
 800a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a726:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a72a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a72e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a732:	9307      	str	r3, [sp, #28]
 800a734:	f8cd 8018 	str.w	r8, [sp, #24]
 800a738:	ee08 0a10 	vmov	s16, r0
 800a73c:	4b9f      	ldr	r3, [pc, #636]	; (800a9bc <_printf_float+0x2dc>)
 800a73e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a742:	f04f 32ff 	mov.w	r2, #4294967295
 800a746:	f7f6 fa09 	bl	8000b5c <__aeabi_dcmpun>
 800a74a:	bb88      	cbnz	r0, 800a7b0 <_printf_float+0xd0>
 800a74c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a750:	4b9a      	ldr	r3, [pc, #616]	; (800a9bc <_printf_float+0x2dc>)
 800a752:	f04f 32ff 	mov.w	r2, #4294967295
 800a756:	f7f6 f9e3 	bl	8000b20 <__aeabi_dcmple>
 800a75a:	bb48      	cbnz	r0, 800a7b0 <_printf_float+0xd0>
 800a75c:	2200      	movs	r2, #0
 800a75e:	2300      	movs	r3, #0
 800a760:	4640      	mov	r0, r8
 800a762:	4649      	mov	r1, r9
 800a764:	f7f6 f9d2 	bl	8000b0c <__aeabi_dcmplt>
 800a768:	b110      	cbz	r0, 800a770 <_printf_float+0x90>
 800a76a:	232d      	movs	r3, #45	; 0x2d
 800a76c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a770:	4b93      	ldr	r3, [pc, #588]	; (800a9c0 <_printf_float+0x2e0>)
 800a772:	4894      	ldr	r0, [pc, #592]	; (800a9c4 <_printf_float+0x2e4>)
 800a774:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a778:	bf94      	ite	ls
 800a77a:	4698      	movls	r8, r3
 800a77c:	4680      	movhi	r8, r0
 800a77e:	2303      	movs	r3, #3
 800a780:	6123      	str	r3, [r4, #16]
 800a782:	9b05      	ldr	r3, [sp, #20]
 800a784:	f023 0204 	bic.w	r2, r3, #4
 800a788:	6022      	str	r2, [r4, #0]
 800a78a:	f04f 0900 	mov.w	r9, #0
 800a78e:	9700      	str	r7, [sp, #0]
 800a790:	4633      	mov	r3, r6
 800a792:	aa0b      	add	r2, sp, #44	; 0x2c
 800a794:	4621      	mov	r1, r4
 800a796:	4628      	mov	r0, r5
 800a798:	f000 f9d8 	bl	800ab4c <_printf_common>
 800a79c:	3001      	adds	r0, #1
 800a79e:	f040 8090 	bne.w	800a8c2 <_printf_float+0x1e2>
 800a7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a6:	b00d      	add	sp, #52	; 0x34
 800a7a8:	ecbd 8b02 	vpop	{d8}
 800a7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b0:	4642      	mov	r2, r8
 800a7b2:	464b      	mov	r3, r9
 800a7b4:	4640      	mov	r0, r8
 800a7b6:	4649      	mov	r1, r9
 800a7b8:	f7f6 f9d0 	bl	8000b5c <__aeabi_dcmpun>
 800a7bc:	b140      	cbz	r0, 800a7d0 <_printf_float+0xf0>
 800a7be:	464b      	mov	r3, r9
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	bfbc      	itt	lt
 800a7c4:	232d      	movlt	r3, #45	; 0x2d
 800a7c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a7ca:	487f      	ldr	r0, [pc, #508]	; (800a9c8 <_printf_float+0x2e8>)
 800a7cc:	4b7f      	ldr	r3, [pc, #508]	; (800a9cc <_printf_float+0x2ec>)
 800a7ce:	e7d1      	b.n	800a774 <_printf_float+0x94>
 800a7d0:	6863      	ldr	r3, [r4, #4]
 800a7d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a7d6:	9206      	str	r2, [sp, #24]
 800a7d8:	1c5a      	adds	r2, r3, #1
 800a7da:	d13f      	bne.n	800a85c <_printf_float+0x17c>
 800a7dc:	2306      	movs	r3, #6
 800a7de:	6063      	str	r3, [r4, #4]
 800a7e0:	9b05      	ldr	r3, [sp, #20]
 800a7e2:	6861      	ldr	r1, [r4, #4]
 800a7e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	9303      	str	r3, [sp, #12]
 800a7ec:	ab0a      	add	r3, sp, #40	; 0x28
 800a7ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a7f2:	ab09      	add	r3, sp, #36	; 0x24
 800a7f4:	ec49 8b10 	vmov	d0, r8, r9
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	6022      	str	r2, [r4, #0]
 800a7fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a800:	4628      	mov	r0, r5
 800a802:	f7ff fecd 	bl	800a5a0 <__cvt>
 800a806:	9b06      	ldr	r3, [sp, #24]
 800a808:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a80a:	2b47      	cmp	r3, #71	; 0x47
 800a80c:	4680      	mov	r8, r0
 800a80e:	d108      	bne.n	800a822 <_printf_float+0x142>
 800a810:	1cc8      	adds	r0, r1, #3
 800a812:	db02      	blt.n	800a81a <_printf_float+0x13a>
 800a814:	6863      	ldr	r3, [r4, #4]
 800a816:	4299      	cmp	r1, r3
 800a818:	dd41      	ble.n	800a89e <_printf_float+0x1be>
 800a81a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a81e:	fa5f fb8b 	uxtb.w	fp, fp
 800a822:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a826:	d820      	bhi.n	800a86a <_printf_float+0x18a>
 800a828:	3901      	subs	r1, #1
 800a82a:	465a      	mov	r2, fp
 800a82c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a830:	9109      	str	r1, [sp, #36]	; 0x24
 800a832:	f7ff ff17 	bl	800a664 <__exponent>
 800a836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a838:	1813      	adds	r3, r2, r0
 800a83a:	2a01      	cmp	r2, #1
 800a83c:	4681      	mov	r9, r0
 800a83e:	6123      	str	r3, [r4, #16]
 800a840:	dc02      	bgt.n	800a848 <_printf_float+0x168>
 800a842:	6822      	ldr	r2, [r4, #0]
 800a844:	07d2      	lsls	r2, r2, #31
 800a846:	d501      	bpl.n	800a84c <_printf_float+0x16c>
 800a848:	3301      	adds	r3, #1
 800a84a:	6123      	str	r3, [r4, #16]
 800a84c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a850:	2b00      	cmp	r3, #0
 800a852:	d09c      	beq.n	800a78e <_printf_float+0xae>
 800a854:	232d      	movs	r3, #45	; 0x2d
 800a856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a85a:	e798      	b.n	800a78e <_printf_float+0xae>
 800a85c:	9a06      	ldr	r2, [sp, #24]
 800a85e:	2a47      	cmp	r2, #71	; 0x47
 800a860:	d1be      	bne.n	800a7e0 <_printf_float+0x100>
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1bc      	bne.n	800a7e0 <_printf_float+0x100>
 800a866:	2301      	movs	r3, #1
 800a868:	e7b9      	b.n	800a7de <_printf_float+0xfe>
 800a86a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a86e:	d118      	bne.n	800a8a2 <_printf_float+0x1c2>
 800a870:	2900      	cmp	r1, #0
 800a872:	6863      	ldr	r3, [r4, #4]
 800a874:	dd0b      	ble.n	800a88e <_printf_float+0x1ae>
 800a876:	6121      	str	r1, [r4, #16]
 800a878:	b913      	cbnz	r3, 800a880 <_printf_float+0x1a0>
 800a87a:	6822      	ldr	r2, [r4, #0]
 800a87c:	07d0      	lsls	r0, r2, #31
 800a87e:	d502      	bpl.n	800a886 <_printf_float+0x1a6>
 800a880:	3301      	adds	r3, #1
 800a882:	440b      	add	r3, r1
 800a884:	6123      	str	r3, [r4, #16]
 800a886:	65a1      	str	r1, [r4, #88]	; 0x58
 800a888:	f04f 0900 	mov.w	r9, #0
 800a88c:	e7de      	b.n	800a84c <_printf_float+0x16c>
 800a88e:	b913      	cbnz	r3, 800a896 <_printf_float+0x1b6>
 800a890:	6822      	ldr	r2, [r4, #0]
 800a892:	07d2      	lsls	r2, r2, #31
 800a894:	d501      	bpl.n	800a89a <_printf_float+0x1ba>
 800a896:	3302      	adds	r3, #2
 800a898:	e7f4      	b.n	800a884 <_printf_float+0x1a4>
 800a89a:	2301      	movs	r3, #1
 800a89c:	e7f2      	b.n	800a884 <_printf_float+0x1a4>
 800a89e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a8a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8a4:	4299      	cmp	r1, r3
 800a8a6:	db05      	blt.n	800a8b4 <_printf_float+0x1d4>
 800a8a8:	6823      	ldr	r3, [r4, #0]
 800a8aa:	6121      	str	r1, [r4, #16]
 800a8ac:	07d8      	lsls	r0, r3, #31
 800a8ae:	d5ea      	bpl.n	800a886 <_printf_float+0x1a6>
 800a8b0:	1c4b      	adds	r3, r1, #1
 800a8b2:	e7e7      	b.n	800a884 <_printf_float+0x1a4>
 800a8b4:	2900      	cmp	r1, #0
 800a8b6:	bfd4      	ite	le
 800a8b8:	f1c1 0202 	rsble	r2, r1, #2
 800a8bc:	2201      	movgt	r2, #1
 800a8be:	4413      	add	r3, r2
 800a8c0:	e7e0      	b.n	800a884 <_printf_float+0x1a4>
 800a8c2:	6823      	ldr	r3, [r4, #0]
 800a8c4:	055a      	lsls	r2, r3, #21
 800a8c6:	d407      	bmi.n	800a8d8 <_printf_float+0x1f8>
 800a8c8:	6923      	ldr	r3, [r4, #16]
 800a8ca:	4642      	mov	r2, r8
 800a8cc:	4631      	mov	r1, r6
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	47b8      	blx	r7
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	d12c      	bne.n	800a930 <_printf_float+0x250>
 800a8d6:	e764      	b.n	800a7a2 <_printf_float+0xc2>
 800a8d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8dc:	f240 80e0 	bls.w	800aaa0 <_printf_float+0x3c0>
 800a8e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	f7f6 f906 	bl	8000af8 <__aeabi_dcmpeq>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d034      	beq.n	800a95a <_printf_float+0x27a>
 800a8f0:	4a37      	ldr	r2, [pc, #220]	; (800a9d0 <_printf_float+0x2f0>)
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	4631      	mov	r1, r6
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	47b8      	blx	r7
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	f43f af51 	beq.w	800a7a2 <_printf_float+0xc2>
 800a900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a904:	429a      	cmp	r2, r3
 800a906:	db02      	blt.n	800a90e <_printf_float+0x22e>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	07d8      	lsls	r0, r3, #31
 800a90c:	d510      	bpl.n	800a930 <_printf_float+0x250>
 800a90e:	ee18 3a10 	vmov	r3, s16
 800a912:	4652      	mov	r2, sl
 800a914:	4631      	mov	r1, r6
 800a916:	4628      	mov	r0, r5
 800a918:	47b8      	blx	r7
 800a91a:	3001      	adds	r0, #1
 800a91c:	f43f af41 	beq.w	800a7a2 <_printf_float+0xc2>
 800a920:	f04f 0800 	mov.w	r8, #0
 800a924:	f104 091a 	add.w	r9, r4, #26
 800a928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a92a:	3b01      	subs	r3, #1
 800a92c:	4543      	cmp	r3, r8
 800a92e:	dc09      	bgt.n	800a944 <_printf_float+0x264>
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	079b      	lsls	r3, r3, #30
 800a934:	f100 8105 	bmi.w	800ab42 <_printf_float+0x462>
 800a938:	68e0      	ldr	r0, [r4, #12]
 800a93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a93c:	4298      	cmp	r0, r3
 800a93e:	bfb8      	it	lt
 800a940:	4618      	movlt	r0, r3
 800a942:	e730      	b.n	800a7a6 <_printf_float+0xc6>
 800a944:	2301      	movs	r3, #1
 800a946:	464a      	mov	r2, r9
 800a948:	4631      	mov	r1, r6
 800a94a:	4628      	mov	r0, r5
 800a94c:	47b8      	blx	r7
 800a94e:	3001      	adds	r0, #1
 800a950:	f43f af27 	beq.w	800a7a2 <_printf_float+0xc2>
 800a954:	f108 0801 	add.w	r8, r8, #1
 800a958:	e7e6      	b.n	800a928 <_printf_float+0x248>
 800a95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dc39      	bgt.n	800a9d4 <_printf_float+0x2f4>
 800a960:	4a1b      	ldr	r2, [pc, #108]	; (800a9d0 <_printf_float+0x2f0>)
 800a962:	2301      	movs	r3, #1
 800a964:	4631      	mov	r1, r6
 800a966:	4628      	mov	r0, r5
 800a968:	47b8      	blx	r7
 800a96a:	3001      	adds	r0, #1
 800a96c:	f43f af19 	beq.w	800a7a2 <_printf_float+0xc2>
 800a970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a974:	4313      	orrs	r3, r2
 800a976:	d102      	bne.n	800a97e <_printf_float+0x29e>
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	07d9      	lsls	r1, r3, #31
 800a97c:	d5d8      	bpl.n	800a930 <_printf_float+0x250>
 800a97e:	ee18 3a10 	vmov	r3, s16
 800a982:	4652      	mov	r2, sl
 800a984:	4631      	mov	r1, r6
 800a986:	4628      	mov	r0, r5
 800a988:	47b8      	blx	r7
 800a98a:	3001      	adds	r0, #1
 800a98c:	f43f af09 	beq.w	800a7a2 <_printf_float+0xc2>
 800a990:	f04f 0900 	mov.w	r9, #0
 800a994:	f104 0a1a 	add.w	sl, r4, #26
 800a998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a99a:	425b      	negs	r3, r3
 800a99c:	454b      	cmp	r3, r9
 800a99e:	dc01      	bgt.n	800a9a4 <_printf_float+0x2c4>
 800a9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9a2:	e792      	b.n	800a8ca <_printf_float+0x1ea>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	4652      	mov	r2, sl
 800a9a8:	4631      	mov	r1, r6
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	47b8      	blx	r7
 800a9ae:	3001      	adds	r0, #1
 800a9b0:	f43f aef7 	beq.w	800a7a2 <_printf_float+0xc2>
 800a9b4:	f109 0901 	add.w	r9, r9, #1
 800a9b8:	e7ee      	b.n	800a998 <_printf_float+0x2b8>
 800a9ba:	bf00      	nop
 800a9bc:	7fefffff 	.word	0x7fefffff
 800a9c0:	080109f4 	.word	0x080109f4
 800a9c4:	080109f8 	.word	0x080109f8
 800a9c8:	08010a00 	.word	0x08010a00
 800a9cc:	080109fc 	.word	0x080109fc
 800a9d0:	08010c29 	.word	0x08010c29
 800a9d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	bfa8      	it	ge
 800a9dc:	461a      	movge	r2, r3
 800a9de:	2a00      	cmp	r2, #0
 800a9e0:	4691      	mov	r9, r2
 800a9e2:	dc37      	bgt.n	800aa54 <_printf_float+0x374>
 800a9e4:	f04f 0b00 	mov.w	fp, #0
 800a9e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9ec:	f104 021a 	add.w	r2, r4, #26
 800a9f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9f2:	9305      	str	r3, [sp, #20]
 800a9f4:	eba3 0309 	sub.w	r3, r3, r9
 800a9f8:	455b      	cmp	r3, fp
 800a9fa:	dc33      	bgt.n	800aa64 <_printf_float+0x384>
 800a9fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa00:	429a      	cmp	r2, r3
 800aa02:	db3b      	blt.n	800aa7c <_printf_float+0x39c>
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	07da      	lsls	r2, r3, #31
 800aa08:	d438      	bmi.n	800aa7c <_printf_float+0x39c>
 800aa0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa0c:	9a05      	ldr	r2, [sp, #20]
 800aa0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa10:	1a9a      	subs	r2, r3, r2
 800aa12:	eba3 0901 	sub.w	r9, r3, r1
 800aa16:	4591      	cmp	r9, r2
 800aa18:	bfa8      	it	ge
 800aa1a:	4691      	movge	r9, r2
 800aa1c:	f1b9 0f00 	cmp.w	r9, #0
 800aa20:	dc35      	bgt.n	800aa8e <_printf_float+0x3ae>
 800aa22:	f04f 0800 	mov.w	r8, #0
 800aa26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa2a:	f104 0a1a 	add.w	sl, r4, #26
 800aa2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa32:	1a9b      	subs	r3, r3, r2
 800aa34:	eba3 0309 	sub.w	r3, r3, r9
 800aa38:	4543      	cmp	r3, r8
 800aa3a:	f77f af79 	ble.w	800a930 <_printf_float+0x250>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	4652      	mov	r2, sl
 800aa42:	4631      	mov	r1, r6
 800aa44:	4628      	mov	r0, r5
 800aa46:	47b8      	blx	r7
 800aa48:	3001      	adds	r0, #1
 800aa4a:	f43f aeaa 	beq.w	800a7a2 <_printf_float+0xc2>
 800aa4e:	f108 0801 	add.w	r8, r8, #1
 800aa52:	e7ec      	b.n	800aa2e <_printf_float+0x34e>
 800aa54:	4613      	mov	r3, r2
 800aa56:	4631      	mov	r1, r6
 800aa58:	4642      	mov	r2, r8
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	47b8      	blx	r7
 800aa5e:	3001      	adds	r0, #1
 800aa60:	d1c0      	bne.n	800a9e4 <_printf_float+0x304>
 800aa62:	e69e      	b.n	800a7a2 <_printf_float+0xc2>
 800aa64:	2301      	movs	r3, #1
 800aa66:	4631      	mov	r1, r6
 800aa68:	4628      	mov	r0, r5
 800aa6a:	9205      	str	r2, [sp, #20]
 800aa6c:	47b8      	blx	r7
 800aa6e:	3001      	adds	r0, #1
 800aa70:	f43f ae97 	beq.w	800a7a2 <_printf_float+0xc2>
 800aa74:	9a05      	ldr	r2, [sp, #20]
 800aa76:	f10b 0b01 	add.w	fp, fp, #1
 800aa7a:	e7b9      	b.n	800a9f0 <_printf_float+0x310>
 800aa7c:	ee18 3a10 	vmov	r3, s16
 800aa80:	4652      	mov	r2, sl
 800aa82:	4631      	mov	r1, r6
 800aa84:	4628      	mov	r0, r5
 800aa86:	47b8      	blx	r7
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d1be      	bne.n	800aa0a <_printf_float+0x32a>
 800aa8c:	e689      	b.n	800a7a2 <_printf_float+0xc2>
 800aa8e:	9a05      	ldr	r2, [sp, #20]
 800aa90:	464b      	mov	r3, r9
 800aa92:	4442      	add	r2, r8
 800aa94:	4631      	mov	r1, r6
 800aa96:	4628      	mov	r0, r5
 800aa98:	47b8      	blx	r7
 800aa9a:	3001      	adds	r0, #1
 800aa9c:	d1c1      	bne.n	800aa22 <_printf_float+0x342>
 800aa9e:	e680      	b.n	800a7a2 <_printf_float+0xc2>
 800aaa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaa2:	2a01      	cmp	r2, #1
 800aaa4:	dc01      	bgt.n	800aaaa <_printf_float+0x3ca>
 800aaa6:	07db      	lsls	r3, r3, #31
 800aaa8:	d538      	bpl.n	800ab1c <_printf_float+0x43c>
 800aaaa:	2301      	movs	r3, #1
 800aaac:	4642      	mov	r2, r8
 800aaae:	4631      	mov	r1, r6
 800aab0:	4628      	mov	r0, r5
 800aab2:	47b8      	blx	r7
 800aab4:	3001      	adds	r0, #1
 800aab6:	f43f ae74 	beq.w	800a7a2 <_printf_float+0xc2>
 800aaba:	ee18 3a10 	vmov	r3, s16
 800aabe:	4652      	mov	r2, sl
 800aac0:	4631      	mov	r1, r6
 800aac2:	4628      	mov	r0, r5
 800aac4:	47b8      	blx	r7
 800aac6:	3001      	adds	r0, #1
 800aac8:	f43f ae6b 	beq.w	800a7a2 <_printf_float+0xc2>
 800aacc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aad0:	2200      	movs	r2, #0
 800aad2:	2300      	movs	r3, #0
 800aad4:	f7f6 f810 	bl	8000af8 <__aeabi_dcmpeq>
 800aad8:	b9d8      	cbnz	r0, 800ab12 <_printf_float+0x432>
 800aada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aadc:	f108 0201 	add.w	r2, r8, #1
 800aae0:	3b01      	subs	r3, #1
 800aae2:	4631      	mov	r1, r6
 800aae4:	4628      	mov	r0, r5
 800aae6:	47b8      	blx	r7
 800aae8:	3001      	adds	r0, #1
 800aaea:	d10e      	bne.n	800ab0a <_printf_float+0x42a>
 800aaec:	e659      	b.n	800a7a2 <_printf_float+0xc2>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	4652      	mov	r2, sl
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	47b8      	blx	r7
 800aaf8:	3001      	adds	r0, #1
 800aafa:	f43f ae52 	beq.w	800a7a2 <_printf_float+0xc2>
 800aafe:	f108 0801 	add.w	r8, r8, #1
 800ab02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab04:	3b01      	subs	r3, #1
 800ab06:	4543      	cmp	r3, r8
 800ab08:	dcf1      	bgt.n	800aaee <_printf_float+0x40e>
 800ab0a:	464b      	mov	r3, r9
 800ab0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ab10:	e6dc      	b.n	800a8cc <_printf_float+0x1ec>
 800ab12:	f04f 0800 	mov.w	r8, #0
 800ab16:	f104 0a1a 	add.w	sl, r4, #26
 800ab1a:	e7f2      	b.n	800ab02 <_printf_float+0x422>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	4642      	mov	r2, r8
 800ab20:	e7df      	b.n	800aae2 <_printf_float+0x402>
 800ab22:	2301      	movs	r3, #1
 800ab24:	464a      	mov	r2, r9
 800ab26:	4631      	mov	r1, r6
 800ab28:	4628      	mov	r0, r5
 800ab2a:	47b8      	blx	r7
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	f43f ae38 	beq.w	800a7a2 <_printf_float+0xc2>
 800ab32:	f108 0801 	add.w	r8, r8, #1
 800ab36:	68e3      	ldr	r3, [r4, #12]
 800ab38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab3a:	1a5b      	subs	r3, r3, r1
 800ab3c:	4543      	cmp	r3, r8
 800ab3e:	dcf0      	bgt.n	800ab22 <_printf_float+0x442>
 800ab40:	e6fa      	b.n	800a938 <_printf_float+0x258>
 800ab42:	f04f 0800 	mov.w	r8, #0
 800ab46:	f104 0919 	add.w	r9, r4, #25
 800ab4a:	e7f4      	b.n	800ab36 <_printf_float+0x456>

0800ab4c <_printf_common>:
 800ab4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab50:	4616      	mov	r6, r2
 800ab52:	4699      	mov	r9, r3
 800ab54:	688a      	ldr	r2, [r1, #8]
 800ab56:	690b      	ldr	r3, [r1, #16]
 800ab58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	bfb8      	it	lt
 800ab60:	4613      	movlt	r3, r2
 800ab62:	6033      	str	r3, [r6, #0]
 800ab64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab68:	4607      	mov	r7, r0
 800ab6a:	460c      	mov	r4, r1
 800ab6c:	b10a      	cbz	r2, 800ab72 <_printf_common+0x26>
 800ab6e:	3301      	adds	r3, #1
 800ab70:	6033      	str	r3, [r6, #0]
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	0699      	lsls	r1, r3, #26
 800ab76:	bf42      	ittt	mi
 800ab78:	6833      	ldrmi	r3, [r6, #0]
 800ab7a:	3302      	addmi	r3, #2
 800ab7c:	6033      	strmi	r3, [r6, #0]
 800ab7e:	6825      	ldr	r5, [r4, #0]
 800ab80:	f015 0506 	ands.w	r5, r5, #6
 800ab84:	d106      	bne.n	800ab94 <_printf_common+0x48>
 800ab86:	f104 0a19 	add.w	sl, r4, #25
 800ab8a:	68e3      	ldr	r3, [r4, #12]
 800ab8c:	6832      	ldr	r2, [r6, #0]
 800ab8e:	1a9b      	subs	r3, r3, r2
 800ab90:	42ab      	cmp	r3, r5
 800ab92:	dc26      	bgt.n	800abe2 <_printf_common+0x96>
 800ab94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab98:	1e13      	subs	r3, r2, #0
 800ab9a:	6822      	ldr	r2, [r4, #0]
 800ab9c:	bf18      	it	ne
 800ab9e:	2301      	movne	r3, #1
 800aba0:	0692      	lsls	r2, r2, #26
 800aba2:	d42b      	bmi.n	800abfc <_printf_common+0xb0>
 800aba4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aba8:	4649      	mov	r1, r9
 800abaa:	4638      	mov	r0, r7
 800abac:	47c0      	blx	r8
 800abae:	3001      	adds	r0, #1
 800abb0:	d01e      	beq.n	800abf0 <_printf_common+0xa4>
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	68e5      	ldr	r5, [r4, #12]
 800abb6:	6832      	ldr	r2, [r6, #0]
 800abb8:	f003 0306 	and.w	r3, r3, #6
 800abbc:	2b04      	cmp	r3, #4
 800abbe:	bf08      	it	eq
 800abc0:	1aad      	subeq	r5, r5, r2
 800abc2:	68a3      	ldr	r3, [r4, #8]
 800abc4:	6922      	ldr	r2, [r4, #16]
 800abc6:	bf0c      	ite	eq
 800abc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abcc:	2500      	movne	r5, #0
 800abce:	4293      	cmp	r3, r2
 800abd0:	bfc4      	itt	gt
 800abd2:	1a9b      	subgt	r3, r3, r2
 800abd4:	18ed      	addgt	r5, r5, r3
 800abd6:	2600      	movs	r6, #0
 800abd8:	341a      	adds	r4, #26
 800abda:	42b5      	cmp	r5, r6
 800abdc:	d11a      	bne.n	800ac14 <_printf_common+0xc8>
 800abde:	2000      	movs	r0, #0
 800abe0:	e008      	b.n	800abf4 <_printf_common+0xa8>
 800abe2:	2301      	movs	r3, #1
 800abe4:	4652      	mov	r2, sl
 800abe6:	4649      	mov	r1, r9
 800abe8:	4638      	mov	r0, r7
 800abea:	47c0      	blx	r8
 800abec:	3001      	adds	r0, #1
 800abee:	d103      	bne.n	800abf8 <_printf_common+0xac>
 800abf0:	f04f 30ff 	mov.w	r0, #4294967295
 800abf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf8:	3501      	adds	r5, #1
 800abfa:	e7c6      	b.n	800ab8a <_printf_common+0x3e>
 800abfc:	18e1      	adds	r1, r4, r3
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	2030      	movs	r0, #48	; 0x30
 800ac02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac06:	4422      	add	r2, r4
 800ac08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac10:	3302      	adds	r3, #2
 800ac12:	e7c7      	b.n	800aba4 <_printf_common+0x58>
 800ac14:	2301      	movs	r3, #1
 800ac16:	4622      	mov	r2, r4
 800ac18:	4649      	mov	r1, r9
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	47c0      	blx	r8
 800ac1e:	3001      	adds	r0, #1
 800ac20:	d0e6      	beq.n	800abf0 <_printf_common+0xa4>
 800ac22:	3601      	adds	r6, #1
 800ac24:	e7d9      	b.n	800abda <_printf_common+0x8e>
	...

0800ac28 <_printf_i>:
 800ac28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac2c:	7e0f      	ldrb	r7, [r1, #24]
 800ac2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac30:	2f78      	cmp	r7, #120	; 0x78
 800ac32:	4691      	mov	r9, r2
 800ac34:	4680      	mov	r8, r0
 800ac36:	460c      	mov	r4, r1
 800ac38:	469a      	mov	sl, r3
 800ac3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac3e:	d807      	bhi.n	800ac50 <_printf_i+0x28>
 800ac40:	2f62      	cmp	r7, #98	; 0x62
 800ac42:	d80a      	bhi.n	800ac5a <_printf_i+0x32>
 800ac44:	2f00      	cmp	r7, #0
 800ac46:	f000 80d8 	beq.w	800adfa <_printf_i+0x1d2>
 800ac4a:	2f58      	cmp	r7, #88	; 0x58
 800ac4c:	f000 80a3 	beq.w	800ad96 <_printf_i+0x16e>
 800ac50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac58:	e03a      	b.n	800acd0 <_printf_i+0xa8>
 800ac5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac5e:	2b15      	cmp	r3, #21
 800ac60:	d8f6      	bhi.n	800ac50 <_printf_i+0x28>
 800ac62:	a101      	add	r1, pc, #4	; (adr r1, 800ac68 <_printf_i+0x40>)
 800ac64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac68:	0800acc1 	.word	0x0800acc1
 800ac6c:	0800acd5 	.word	0x0800acd5
 800ac70:	0800ac51 	.word	0x0800ac51
 800ac74:	0800ac51 	.word	0x0800ac51
 800ac78:	0800ac51 	.word	0x0800ac51
 800ac7c:	0800ac51 	.word	0x0800ac51
 800ac80:	0800acd5 	.word	0x0800acd5
 800ac84:	0800ac51 	.word	0x0800ac51
 800ac88:	0800ac51 	.word	0x0800ac51
 800ac8c:	0800ac51 	.word	0x0800ac51
 800ac90:	0800ac51 	.word	0x0800ac51
 800ac94:	0800ade1 	.word	0x0800ade1
 800ac98:	0800ad05 	.word	0x0800ad05
 800ac9c:	0800adc3 	.word	0x0800adc3
 800aca0:	0800ac51 	.word	0x0800ac51
 800aca4:	0800ac51 	.word	0x0800ac51
 800aca8:	0800ae03 	.word	0x0800ae03
 800acac:	0800ac51 	.word	0x0800ac51
 800acb0:	0800ad05 	.word	0x0800ad05
 800acb4:	0800ac51 	.word	0x0800ac51
 800acb8:	0800ac51 	.word	0x0800ac51
 800acbc:	0800adcb 	.word	0x0800adcb
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	1d1a      	adds	r2, r3, #4
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	602a      	str	r2, [r5, #0]
 800acc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800accc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acd0:	2301      	movs	r3, #1
 800acd2:	e0a3      	b.n	800ae1c <_printf_i+0x1f4>
 800acd4:	6820      	ldr	r0, [r4, #0]
 800acd6:	6829      	ldr	r1, [r5, #0]
 800acd8:	0606      	lsls	r6, r0, #24
 800acda:	f101 0304 	add.w	r3, r1, #4
 800acde:	d50a      	bpl.n	800acf6 <_printf_i+0xce>
 800ace0:	680e      	ldr	r6, [r1, #0]
 800ace2:	602b      	str	r3, [r5, #0]
 800ace4:	2e00      	cmp	r6, #0
 800ace6:	da03      	bge.n	800acf0 <_printf_i+0xc8>
 800ace8:	232d      	movs	r3, #45	; 0x2d
 800acea:	4276      	negs	r6, r6
 800acec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acf0:	485e      	ldr	r0, [pc, #376]	; (800ae6c <_printf_i+0x244>)
 800acf2:	230a      	movs	r3, #10
 800acf4:	e019      	b.n	800ad2a <_printf_i+0x102>
 800acf6:	680e      	ldr	r6, [r1, #0]
 800acf8:	602b      	str	r3, [r5, #0]
 800acfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800acfe:	bf18      	it	ne
 800ad00:	b236      	sxthne	r6, r6
 800ad02:	e7ef      	b.n	800ace4 <_printf_i+0xbc>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	6820      	ldr	r0, [r4, #0]
 800ad08:	1d19      	adds	r1, r3, #4
 800ad0a:	6029      	str	r1, [r5, #0]
 800ad0c:	0601      	lsls	r1, r0, #24
 800ad0e:	d501      	bpl.n	800ad14 <_printf_i+0xec>
 800ad10:	681e      	ldr	r6, [r3, #0]
 800ad12:	e002      	b.n	800ad1a <_printf_i+0xf2>
 800ad14:	0646      	lsls	r6, r0, #25
 800ad16:	d5fb      	bpl.n	800ad10 <_printf_i+0xe8>
 800ad18:	881e      	ldrh	r6, [r3, #0]
 800ad1a:	4854      	ldr	r0, [pc, #336]	; (800ae6c <_printf_i+0x244>)
 800ad1c:	2f6f      	cmp	r7, #111	; 0x6f
 800ad1e:	bf0c      	ite	eq
 800ad20:	2308      	moveq	r3, #8
 800ad22:	230a      	movne	r3, #10
 800ad24:	2100      	movs	r1, #0
 800ad26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad2a:	6865      	ldr	r5, [r4, #4]
 800ad2c:	60a5      	str	r5, [r4, #8]
 800ad2e:	2d00      	cmp	r5, #0
 800ad30:	bfa2      	ittt	ge
 800ad32:	6821      	ldrge	r1, [r4, #0]
 800ad34:	f021 0104 	bicge.w	r1, r1, #4
 800ad38:	6021      	strge	r1, [r4, #0]
 800ad3a:	b90e      	cbnz	r6, 800ad40 <_printf_i+0x118>
 800ad3c:	2d00      	cmp	r5, #0
 800ad3e:	d04d      	beq.n	800addc <_printf_i+0x1b4>
 800ad40:	4615      	mov	r5, r2
 800ad42:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad46:	fb03 6711 	mls	r7, r3, r1, r6
 800ad4a:	5dc7      	ldrb	r7, [r0, r7]
 800ad4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad50:	4637      	mov	r7, r6
 800ad52:	42bb      	cmp	r3, r7
 800ad54:	460e      	mov	r6, r1
 800ad56:	d9f4      	bls.n	800ad42 <_printf_i+0x11a>
 800ad58:	2b08      	cmp	r3, #8
 800ad5a:	d10b      	bne.n	800ad74 <_printf_i+0x14c>
 800ad5c:	6823      	ldr	r3, [r4, #0]
 800ad5e:	07de      	lsls	r6, r3, #31
 800ad60:	d508      	bpl.n	800ad74 <_printf_i+0x14c>
 800ad62:	6923      	ldr	r3, [r4, #16]
 800ad64:	6861      	ldr	r1, [r4, #4]
 800ad66:	4299      	cmp	r1, r3
 800ad68:	bfde      	ittt	le
 800ad6a:	2330      	movle	r3, #48	; 0x30
 800ad6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad70:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad74:	1b52      	subs	r2, r2, r5
 800ad76:	6122      	str	r2, [r4, #16]
 800ad78:	f8cd a000 	str.w	sl, [sp]
 800ad7c:	464b      	mov	r3, r9
 800ad7e:	aa03      	add	r2, sp, #12
 800ad80:	4621      	mov	r1, r4
 800ad82:	4640      	mov	r0, r8
 800ad84:	f7ff fee2 	bl	800ab4c <_printf_common>
 800ad88:	3001      	adds	r0, #1
 800ad8a:	d14c      	bne.n	800ae26 <_printf_i+0x1fe>
 800ad8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad90:	b004      	add	sp, #16
 800ad92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad96:	4835      	ldr	r0, [pc, #212]	; (800ae6c <_printf_i+0x244>)
 800ad98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad9c:	6829      	ldr	r1, [r5, #0]
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	f851 6b04 	ldr.w	r6, [r1], #4
 800ada4:	6029      	str	r1, [r5, #0]
 800ada6:	061d      	lsls	r5, r3, #24
 800ada8:	d514      	bpl.n	800add4 <_printf_i+0x1ac>
 800adaa:	07df      	lsls	r7, r3, #31
 800adac:	bf44      	itt	mi
 800adae:	f043 0320 	orrmi.w	r3, r3, #32
 800adb2:	6023      	strmi	r3, [r4, #0]
 800adb4:	b91e      	cbnz	r6, 800adbe <_printf_i+0x196>
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	f023 0320 	bic.w	r3, r3, #32
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	2310      	movs	r3, #16
 800adc0:	e7b0      	b.n	800ad24 <_printf_i+0xfc>
 800adc2:	6823      	ldr	r3, [r4, #0]
 800adc4:	f043 0320 	orr.w	r3, r3, #32
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	2378      	movs	r3, #120	; 0x78
 800adcc:	4828      	ldr	r0, [pc, #160]	; (800ae70 <_printf_i+0x248>)
 800adce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800add2:	e7e3      	b.n	800ad9c <_printf_i+0x174>
 800add4:	0659      	lsls	r1, r3, #25
 800add6:	bf48      	it	mi
 800add8:	b2b6      	uxthmi	r6, r6
 800adda:	e7e6      	b.n	800adaa <_printf_i+0x182>
 800addc:	4615      	mov	r5, r2
 800adde:	e7bb      	b.n	800ad58 <_printf_i+0x130>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	6826      	ldr	r6, [r4, #0]
 800ade4:	6961      	ldr	r1, [r4, #20]
 800ade6:	1d18      	adds	r0, r3, #4
 800ade8:	6028      	str	r0, [r5, #0]
 800adea:	0635      	lsls	r5, r6, #24
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	d501      	bpl.n	800adf4 <_printf_i+0x1cc>
 800adf0:	6019      	str	r1, [r3, #0]
 800adf2:	e002      	b.n	800adfa <_printf_i+0x1d2>
 800adf4:	0670      	lsls	r0, r6, #25
 800adf6:	d5fb      	bpl.n	800adf0 <_printf_i+0x1c8>
 800adf8:	8019      	strh	r1, [r3, #0]
 800adfa:	2300      	movs	r3, #0
 800adfc:	6123      	str	r3, [r4, #16]
 800adfe:	4615      	mov	r5, r2
 800ae00:	e7ba      	b.n	800ad78 <_printf_i+0x150>
 800ae02:	682b      	ldr	r3, [r5, #0]
 800ae04:	1d1a      	adds	r2, r3, #4
 800ae06:	602a      	str	r2, [r5, #0]
 800ae08:	681d      	ldr	r5, [r3, #0]
 800ae0a:	6862      	ldr	r2, [r4, #4]
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f7f5 f9fe 	bl	8000210 <memchr>
 800ae14:	b108      	cbz	r0, 800ae1a <_printf_i+0x1f2>
 800ae16:	1b40      	subs	r0, r0, r5
 800ae18:	6060      	str	r0, [r4, #4]
 800ae1a:	6863      	ldr	r3, [r4, #4]
 800ae1c:	6123      	str	r3, [r4, #16]
 800ae1e:	2300      	movs	r3, #0
 800ae20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae24:	e7a8      	b.n	800ad78 <_printf_i+0x150>
 800ae26:	6923      	ldr	r3, [r4, #16]
 800ae28:	462a      	mov	r2, r5
 800ae2a:	4649      	mov	r1, r9
 800ae2c:	4640      	mov	r0, r8
 800ae2e:	47d0      	blx	sl
 800ae30:	3001      	adds	r0, #1
 800ae32:	d0ab      	beq.n	800ad8c <_printf_i+0x164>
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	079b      	lsls	r3, r3, #30
 800ae38:	d413      	bmi.n	800ae62 <_printf_i+0x23a>
 800ae3a:	68e0      	ldr	r0, [r4, #12]
 800ae3c:	9b03      	ldr	r3, [sp, #12]
 800ae3e:	4298      	cmp	r0, r3
 800ae40:	bfb8      	it	lt
 800ae42:	4618      	movlt	r0, r3
 800ae44:	e7a4      	b.n	800ad90 <_printf_i+0x168>
 800ae46:	2301      	movs	r3, #1
 800ae48:	4632      	mov	r2, r6
 800ae4a:	4649      	mov	r1, r9
 800ae4c:	4640      	mov	r0, r8
 800ae4e:	47d0      	blx	sl
 800ae50:	3001      	adds	r0, #1
 800ae52:	d09b      	beq.n	800ad8c <_printf_i+0x164>
 800ae54:	3501      	adds	r5, #1
 800ae56:	68e3      	ldr	r3, [r4, #12]
 800ae58:	9903      	ldr	r1, [sp, #12]
 800ae5a:	1a5b      	subs	r3, r3, r1
 800ae5c:	42ab      	cmp	r3, r5
 800ae5e:	dcf2      	bgt.n	800ae46 <_printf_i+0x21e>
 800ae60:	e7eb      	b.n	800ae3a <_printf_i+0x212>
 800ae62:	2500      	movs	r5, #0
 800ae64:	f104 0619 	add.w	r6, r4, #25
 800ae68:	e7f5      	b.n	800ae56 <_printf_i+0x22e>
 800ae6a:	bf00      	nop
 800ae6c:	08010a04 	.word	0x08010a04
 800ae70:	08010a15 	.word	0x08010a15

0800ae74 <_sbrk_r>:
 800ae74:	b538      	push	{r3, r4, r5, lr}
 800ae76:	4d06      	ldr	r5, [pc, #24]	; (800ae90 <_sbrk_r+0x1c>)
 800ae78:	2300      	movs	r3, #0
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	4608      	mov	r0, r1
 800ae7e:	602b      	str	r3, [r5, #0]
 800ae80:	f005 faf4 	bl	801046c <_sbrk>
 800ae84:	1c43      	adds	r3, r0, #1
 800ae86:	d102      	bne.n	800ae8e <_sbrk_r+0x1a>
 800ae88:	682b      	ldr	r3, [r5, #0]
 800ae8a:	b103      	cbz	r3, 800ae8e <_sbrk_r+0x1a>
 800ae8c:	6023      	str	r3, [r4, #0]
 800ae8e:	bd38      	pop	{r3, r4, r5, pc}
 800ae90:	20012284 	.word	0x20012284

0800ae94 <siprintf>:
 800ae94:	b40e      	push	{r1, r2, r3}
 800ae96:	b500      	push	{lr}
 800ae98:	b09c      	sub	sp, #112	; 0x70
 800ae9a:	ab1d      	add	r3, sp, #116	; 0x74
 800ae9c:	9002      	str	r0, [sp, #8]
 800ae9e:	9006      	str	r0, [sp, #24]
 800aea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aea4:	4809      	ldr	r0, [pc, #36]	; (800aecc <siprintf+0x38>)
 800aea6:	9107      	str	r1, [sp, #28]
 800aea8:	9104      	str	r1, [sp, #16]
 800aeaa:	4909      	ldr	r1, [pc, #36]	; (800aed0 <siprintf+0x3c>)
 800aeac:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeb0:	9105      	str	r1, [sp, #20]
 800aeb2:	6800      	ldr	r0, [r0, #0]
 800aeb4:	9301      	str	r3, [sp, #4]
 800aeb6:	a902      	add	r1, sp, #8
 800aeb8:	f001 fb42 	bl	800c540 <_svfiprintf_r>
 800aebc:	9b02      	ldr	r3, [sp, #8]
 800aebe:	2200      	movs	r2, #0
 800aec0:	701a      	strb	r2, [r3, #0]
 800aec2:	b01c      	add	sp, #112	; 0x70
 800aec4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aec8:	b003      	add	sp, #12
 800aeca:	4770      	bx	lr
 800aecc:	20000014 	.word	0x20000014
 800aed0:	ffff0208 	.word	0xffff0208

0800aed4 <siscanf>:
 800aed4:	b40e      	push	{r1, r2, r3}
 800aed6:	b510      	push	{r4, lr}
 800aed8:	b09f      	sub	sp, #124	; 0x7c
 800aeda:	ac21      	add	r4, sp, #132	; 0x84
 800aedc:	f44f 7101 	mov.w	r1, #516	; 0x204
 800aee0:	f854 2b04 	ldr.w	r2, [r4], #4
 800aee4:	9201      	str	r2, [sp, #4]
 800aee6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800aeea:	9004      	str	r0, [sp, #16]
 800aeec:	9008      	str	r0, [sp, #32]
 800aeee:	f7f5 f981 	bl	80001f4 <strlen>
 800aef2:	4b0c      	ldr	r3, [pc, #48]	; (800af24 <siscanf+0x50>)
 800aef4:	9005      	str	r0, [sp, #20]
 800aef6:	9009      	str	r0, [sp, #36]	; 0x24
 800aef8:	930d      	str	r3, [sp, #52]	; 0x34
 800aefa:	480b      	ldr	r0, [pc, #44]	; (800af28 <siscanf+0x54>)
 800aefc:	9a01      	ldr	r2, [sp, #4]
 800aefe:	6800      	ldr	r0, [r0, #0]
 800af00:	9403      	str	r4, [sp, #12]
 800af02:	2300      	movs	r3, #0
 800af04:	9311      	str	r3, [sp, #68]	; 0x44
 800af06:	9316      	str	r3, [sp, #88]	; 0x58
 800af08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af0c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800af10:	a904      	add	r1, sp, #16
 800af12:	4623      	mov	r3, r4
 800af14:	f001 fc6e 	bl	800c7f4 <__ssvfiscanf_r>
 800af18:	b01f      	add	sp, #124	; 0x7c
 800af1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af1e:	b003      	add	sp, #12
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	0800af4f 	.word	0x0800af4f
 800af28:	20000014 	.word	0x20000014

0800af2c <__sread>:
 800af2c:	b510      	push	{r4, lr}
 800af2e:	460c      	mov	r4, r1
 800af30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af34:	f001 ff28 	bl	800cd88 <_read_r>
 800af38:	2800      	cmp	r0, #0
 800af3a:	bfab      	itete	ge
 800af3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af3e:	89a3      	ldrhlt	r3, [r4, #12]
 800af40:	181b      	addge	r3, r3, r0
 800af42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af46:	bfac      	ite	ge
 800af48:	6563      	strge	r3, [r4, #84]	; 0x54
 800af4a:	81a3      	strhlt	r3, [r4, #12]
 800af4c:	bd10      	pop	{r4, pc}

0800af4e <__seofread>:
 800af4e:	2000      	movs	r0, #0
 800af50:	4770      	bx	lr

0800af52 <__swrite>:
 800af52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af56:	461f      	mov	r7, r3
 800af58:	898b      	ldrh	r3, [r1, #12]
 800af5a:	05db      	lsls	r3, r3, #23
 800af5c:	4605      	mov	r5, r0
 800af5e:	460c      	mov	r4, r1
 800af60:	4616      	mov	r6, r2
 800af62:	d505      	bpl.n	800af70 <__swrite+0x1e>
 800af64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af68:	2302      	movs	r3, #2
 800af6a:	2200      	movs	r2, #0
 800af6c:	f000 fec6 	bl	800bcfc <_lseek_r>
 800af70:	89a3      	ldrh	r3, [r4, #12]
 800af72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af7a:	81a3      	strh	r3, [r4, #12]
 800af7c:	4632      	mov	r2, r6
 800af7e:	463b      	mov	r3, r7
 800af80:	4628      	mov	r0, r5
 800af82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af86:	f000 b817 	b.w	800afb8 <_write_r>

0800af8a <__sseek>:
 800af8a:	b510      	push	{r4, lr}
 800af8c:	460c      	mov	r4, r1
 800af8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af92:	f000 feb3 	bl	800bcfc <_lseek_r>
 800af96:	1c43      	adds	r3, r0, #1
 800af98:	89a3      	ldrh	r3, [r4, #12]
 800af9a:	bf15      	itete	ne
 800af9c:	6560      	strne	r0, [r4, #84]	; 0x54
 800af9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800afa6:	81a3      	strheq	r3, [r4, #12]
 800afa8:	bf18      	it	ne
 800afaa:	81a3      	strhne	r3, [r4, #12]
 800afac:	bd10      	pop	{r4, pc}

0800afae <__sclose>:
 800afae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afb2:	f000 b813 	b.w	800afdc <_close_r>
	...

0800afb8 <_write_r>:
 800afb8:	b538      	push	{r3, r4, r5, lr}
 800afba:	4d07      	ldr	r5, [pc, #28]	; (800afd8 <_write_r+0x20>)
 800afbc:	4604      	mov	r4, r0
 800afbe:	4608      	mov	r0, r1
 800afc0:	4611      	mov	r1, r2
 800afc2:	2200      	movs	r2, #0
 800afc4:	602a      	str	r2, [r5, #0]
 800afc6:	461a      	mov	r2, r3
 800afc8:	f7f8 fca7 	bl	800391a <_write>
 800afcc:	1c43      	adds	r3, r0, #1
 800afce:	d102      	bne.n	800afd6 <_write_r+0x1e>
 800afd0:	682b      	ldr	r3, [r5, #0]
 800afd2:	b103      	cbz	r3, 800afd6 <_write_r+0x1e>
 800afd4:	6023      	str	r3, [r4, #0]
 800afd6:	bd38      	pop	{r3, r4, r5, pc}
 800afd8:	20012284 	.word	0x20012284

0800afdc <_close_r>:
 800afdc:	b538      	push	{r3, r4, r5, lr}
 800afde:	4d06      	ldr	r5, [pc, #24]	; (800aff8 <_close_r+0x1c>)
 800afe0:	2300      	movs	r3, #0
 800afe2:	4604      	mov	r4, r0
 800afe4:	4608      	mov	r0, r1
 800afe6:	602b      	str	r3, [r5, #0]
 800afe8:	f7f8 fcb3 	bl	8003952 <_close>
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	d102      	bne.n	800aff6 <_close_r+0x1a>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	b103      	cbz	r3, 800aff6 <_close_r+0x1a>
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	bd38      	pop	{r3, r4, r5, pc}
 800aff8:	20012284 	.word	0x20012284

0800affc <quorem>:
 800affc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b000:	6903      	ldr	r3, [r0, #16]
 800b002:	690c      	ldr	r4, [r1, #16]
 800b004:	42a3      	cmp	r3, r4
 800b006:	4607      	mov	r7, r0
 800b008:	f2c0 8081 	blt.w	800b10e <quorem+0x112>
 800b00c:	3c01      	subs	r4, #1
 800b00e:	f101 0814 	add.w	r8, r1, #20
 800b012:	f100 0514 	add.w	r5, r0, #20
 800b016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b01a:	9301      	str	r3, [sp, #4]
 800b01c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b020:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b024:	3301      	adds	r3, #1
 800b026:	429a      	cmp	r2, r3
 800b028:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b02c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b030:	fbb2 f6f3 	udiv	r6, r2, r3
 800b034:	d331      	bcc.n	800b09a <quorem+0x9e>
 800b036:	f04f 0e00 	mov.w	lr, #0
 800b03a:	4640      	mov	r0, r8
 800b03c:	46ac      	mov	ip, r5
 800b03e:	46f2      	mov	sl, lr
 800b040:	f850 2b04 	ldr.w	r2, [r0], #4
 800b044:	b293      	uxth	r3, r2
 800b046:	fb06 e303 	mla	r3, r6, r3, lr
 800b04a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b04e:	b29b      	uxth	r3, r3
 800b050:	ebaa 0303 	sub.w	r3, sl, r3
 800b054:	f8dc a000 	ldr.w	sl, [ip]
 800b058:	0c12      	lsrs	r2, r2, #16
 800b05a:	fa13 f38a 	uxtah	r3, r3, sl
 800b05e:	fb06 e202 	mla	r2, r6, r2, lr
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	9b00      	ldr	r3, [sp, #0]
 800b066:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b06a:	b292      	uxth	r2, r2
 800b06c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b074:	f8bd 3000 	ldrh.w	r3, [sp]
 800b078:	4581      	cmp	r9, r0
 800b07a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b07e:	f84c 3b04 	str.w	r3, [ip], #4
 800b082:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b086:	d2db      	bcs.n	800b040 <quorem+0x44>
 800b088:	f855 300b 	ldr.w	r3, [r5, fp]
 800b08c:	b92b      	cbnz	r3, 800b09a <quorem+0x9e>
 800b08e:	9b01      	ldr	r3, [sp, #4]
 800b090:	3b04      	subs	r3, #4
 800b092:	429d      	cmp	r5, r3
 800b094:	461a      	mov	r2, r3
 800b096:	d32e      	bcc.n	800b0f6 <quorem+0xfa>
 800b098:	613c      	str	r4, [r7, #16]
 800b09a:	4638      	mov	r0, r7
 800b09c:	f001 f8dc 	bl	800c258 <__mcmp>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	db24      	blt.n	800b0ee <quorem+0xf2>
 800b0a4:	3601      	adds	r6, #1
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	f04f 0c00 	mov.w	ip, #0
 800b0ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0b0:	f8d0 e000 	ldr.w	lr, [r0]
 800b0b4:	b293      	uxth	r3, r2
 800b0b6:	ebac 0303 	sub.w	r3, ip, r3
 800b0ba:	0c12      	lsrs	r2, r2, #16
 800b0bc:	fa13 f38e 	uxtah	r3, r3, lr
 800b0c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b0c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0ce:	45c1      	cmp	r9, r8
 800b0d0:	f840 3b04 	str.w	r3, [r0], #4
 800b0d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b0d8:	d2e8      	bcs.n	800b0ac <quorem+0xb0>
 800b0da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0e2:	b922      	cbnz	r2, 800b0ee <quorem+0xf2>
 800b0e4:	3b04      	subs	r3, #4
 800b0e6:	429d      	cmp	r5, r3
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	d30a      	bcc.n	800b102 <quorem+0x106>
 800b0ec:	613c      	str	r4, [r7, #16]
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	b003      	add	sp, #12
 800b0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f6:	6812      	ldr	r2, [r2, #0]
 800b0f8:	3b04      	subs	r3, #4
 800b0fa:	2a00      	cmp	r2, #0
 800b0fc:	d1cc      	bne.n	800b098 <quorem+0x9c>
 800b0fe:	3c01      	subs	r4, #1
 800b100:	e7c7      	b.n	800b092 <quorem+0x96>
 800b102:	6812      	ldr	r2, [r2, #0]
 800b104:	3b04      	subs	r3, #4
 800b106:	2a00      	cmp	r2, #0
 800b108:	d1f0      	bne.n	800b0ec <quorem+0xf0>
 800b10a:	3c01      	subs	r4, #1
 800b10c:	e7eb      	b.n	800b0e6 <quorem+0xea>
 800b10e:	2000      	movs	r0, #0
 800b110:	e7ee      	b.n	800b0f0 <quorem+0xf4>
 800b112:	0000      	movs	r0, r0
 800b114:	0000      	movs	r0, r0
	...

0800b118 <_dtoa_r>:
 800b118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b11c:	ed2d 8b04 	vpush	{d8-d9}
 800b120:	ec57 6b10 	vmov	r6, r7, d0
 800b124:	b093      	sub	sp, #76	; 0x4c
 800b126:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b128:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b12c:	9106      	str	r1, [sp, #24]
 800b12e:	ee10 aa10 	vmov	sl, s0
 800b132:	4604      	mov	r4, r0
 800b134:	9209      	str	r2, [sp, #36]	; 0x24
 800b136:	930c      	str	r3, [sp, #48]	; 0x30
 800b138:	46bb      	mov	fp, r7
 800b13a:	b975      	cbnz	r5, 800b15a <_dtoa_r+0x42>
 800b13c:	2010      	movs	r0, #16
 800b13e:	f7ff f93f 	bl	800a3c0 <malloc>
 800b142:	4602      	mov	r2, r0
 800b144:	6260      	str	r0, [r4, #36]	; 0x24
 800b146:	b920      	cbnz	r0, 800b152 <_dtoa_r+0x3a>
 800b148:	4ba7      	ldr	r3, [pc, #668]	; (800b3e8 <_dtoa_r+0x2d0>)
 800b14a:	21ea      	movs	r1, #234	; 0xea
 800b14c:	48a7      	ldr	r0, [pc, #668]	; (800b3ec <_dtoa_r+0x2d4>)
 800b14e:	f001 ff97 	bl	800d080 <__assert_func>
 800b152:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b156:	6005      	str	r5, [r0, #0]
 800b158:	60c5      	str	r5, [r0, #12]
 800b15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b15c:	6819      	ldr	r1, [r3, #0]
 800b15e:	b151      	cbz	r1, 800b176 <_dtoa_r+0x5e>
 800b160:	685a      	ldr	r2, [r3, #4]
 800b162:	604a      	str	r2, [r1, #4]
 800b164:	2301      	movs	r3, #1
 800b166:	4093      	lsls	r3, r2
 800b168:	608b      	str	r3, [r1, #8]
 800b16a:	4620      	mov	r0, r4
 800b16c:	f000 fe32 	bl	800bdd4 <_Bfree>
 800b170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b172:	2200      	movs	r2, #0
 800b174:	601a      	str	r2, [r3, #0]
 800b176:	1e3b      	subs	r3, r7, #0
 800b178:	bfaa      	itet	ge
 800b17a:	2300      	movge	r3, #0
 800b17c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b180:	f8c8 3000 	strge.w	r3, [r8]
 800b184:	4b9a      	ldr	r3, [pc, #616]	; (800b3f0 <_dtoa_r+0x2d8>)
 800b186:	bfbc      	itt	lt
 800b188:	2201      	movlt	r2, #1
 800b18a:	f8c8 2000 	strlt.w	r2, [r8]
 800b18e:	ea33 030b 	bics.w	r3, r3, fp
 800b192:	d11b      	bne.n	800b1cc <_dtoa_r+0xb4>
 800b194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b196:	f242 730f 	movw	r3, #9999	; 0x270f
 800b19a:	6013      	str	r3, [r2, #0]
 800b19c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1a0:	4333      	orrs	r3, r6
 800b1a2:	f000 8592 	beq.w	800bcca <_dtoa_r+0xbb2>
 800b1a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1a8:	b963      	cbnz	r3, 800b1c4 <_dtoa_r+0xac>
 800b1aa:	4b92      	ldr	r3, [pc, #584]	; (800b3f4 <_dtoa_r+0x2dc>)
 800b1ac:	e022      	b.n	800b1f4 <_dtoa_r+0xdc>
 800b1ae:	4b92      	ldr	r3, [pc, #584]	; (800b3f8 <_dtoa_r+0x2e0>)
 800b1b0:	9301      	str	r3, [sp, #4]
 800b1b2:	3308      	adds	r3, #8
 800b1b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1b6:	6013      	str	r3, [r2, #0]
 800b1b8:	9801      	ldr	r0, [sp, #4]
 800b1ba:	b013      	add	sp, #76	; 0x4c
 800b1bc:	ecbd 8b04 	vpop	{d8-d9}
 800b1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c4:	4b8b      	ldr	r3, [pc, #556]	; (800b3f4 <_dtoa_r+0x2dc>)
 800b1c6:	9301      	str	r3, [sp, #4]
 800b1c8:	3303      	adds	r3, #3
 800b1ca:	e7f3      	b.n	800b1b4 <_dtoa_r+0x9c>
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	4650      	mov	r0, sl
 800b1d2:	4659      	mov	r1, fp
 800b1d4:	f7f5 fc90 	bl	8000af8 <__aeabi_dcmpeq>
 800b1d8:	ec4b ab19 	vmov	d9, sl, fp
 800b1dc:	4680      	mov	r8, r0
 800b1de:	b158      	cbz	r0, 800b1f8 <_dtoa_r+0xe0>
 800b1e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	6013      	str	r3, [r2, #0]
 800b1e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f000 856b 	beq.w	800bcc4 <_dtoa_r+0xbac>
 800b1ee:	4883      	ldr	r0, [pc, #524]	; (800b3fc <_dtoa_r+0x2e4>)
 800b1f0:	6018      	str	r0, [r3, #0]
 800b1f2:	1e43      	subs	r3, r0, #1
 800b1f4:	9301      	str	r3, [sp, #4]
 800b1f6:	e7df      	b.n	800b1b8 <_dtoa_r+0xa0>
 800b1f8:	ec4b ab10 	vmov	d0, sl, fp
 800b1fc:	aa10      	add	r2, sp, #64	; 0x40
 800b1fe:	a911      	add	r1, sp, #68	; 0x44
 800b200:	4620      	mov	r0, r4
 800b202:	f001 f8cf 	bl	800c3a4 <__d2b>
 800b206:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b20a:	ee08 0a10 	vmov	s16, r0
 800b20e:	2d00      	cmp	r5, #0
 800b210:	f000 8084 	beq.w	800b31c <_dtoa_r+0x204>
 800b214:	ee19 3a90 	vmov	r3, s19
 800b218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b21c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b220:	4656      	mov	r6, sl
 800b222:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b226:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b22a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b22e:	4b74      	ldr	r3, [pc, #464]	; (800b400 <_dtoa_r+0x2e8>)
 800b230:	2200      	movs	r2, #0
 800b232:	4630      	mov	r0, r6
 800b234:	4639      	mov	r1, r7
 800b236:	f7f5 f83f 	bl	80002b8 <__aeabi_dsub>
 800b23a:	a365      	add	r3, pc, #404	; (adr r3, 800b3d0 <_dtoa_r+0x2b8>)
 800b23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b240:	f7f5 f9f2 	bl	8000628 <__aeabi_dmul>
 800b244:	a364      	add	r3, pc, #400	; (adr r3, 800b3d8 <_dtoa_r+0x2c0>)
 800b246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24a:	f7f5 f837 	bl	80002bc <__adddf3>
 800b24e:	4606      	mov	r6, r0
 800b250:	4628      	mov	r0, r5
 800b252:	460f      	mov	r7, r1
 800b254:	f7f5 f97e 	bl	8000554 <__aeabi_i2d>
 800b258:	a361      	add	r3, pc, #388	; (adr r3, 800b3e0 <_dtoa_r+0x2c8>)
 800b25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25e:	f7f5 f9e3 	bl	8000628 <__aeabi_dmul>
 800b262:	4602      	mov	r2, r0
 800b264:	460b      	mov	r3, r1
 800b266:	4630      	mov	r0, r6
 800b268:	4639      	mov	r1, r7
 800b26a:	f7f5 f827 	bl	80002bc <__adddf3>
 800b26e:	4606      	mov	r6, r0
 800b270:	460f      	mov	r7, r1
 800b272:	f7f5 fc89 	bl	8000b88 <__aeabi_d2iz>
 800b276:	2200      	movs	r2, #0
 800b278:	9000      	str	r0, [sp, #0]
 800b27a:	2300      	movs	r3, #0
 800b27c:	4630      	mov	r0, r6
 800b27e:	4639      	mov	r1, r7
 800b280:	f7f5 fc44 	bl	8000b0c <__aeabi_dcmplt>
 800b284:	b150      	cbz	r0, 800b29c <_dtoa_r+0x184>
 800b286:	9800      	ldr	r0, [sp, #0]
 800b288:	f7f5 f964 	bl	8000554 <__aeabi_i2d>
 800b28c:	4632      	mov	r2, r6
 800b28e:	463b      	mov	r3, r7
 800b290:	f7f5 fc32 	bl	8000af8 <__aeabi_dcmpeq>
 800b294:	b910      	cbnz	r0, 800b29c <_dtoa_r+0x184>
 800b296:	9b00      	ldr	r3, [sp, #0]
 800b298:	3b01      	subs	r3, #1
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	9b00      	ldr	r3, [sp, #0]
 800b29e:	2b16      	cmp	r3, #22
 800b2a0:	d85a      	bhi.n	800b358 <_dtoa_r+0x240>
 800b2a2:	9a00      	ldr	r2, [sp, #0]
 800b2a4:	4b57      	ldr	r3, [pc, #348]	; (800b404 <_dtoa_r+0x2ec>)
 800b2a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	ec51 0b19 	vmov	r0, r1, d9
 800b2b2:	f7f5 fc2b 	bl	8000b0c <__aeabi_dcmplt>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d050      	beq.n	800b35c <_dtoa_r+0x244>
 800b2ba:	9b00      	ldr	r3, [sp, #0]
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2c6:	1b5d      	subs	r5, r3, r5
 800b2c8:	1e6b      	subs	r3, r5, #1
 800b2ca:	9305      	str	r3, [sp, #20]
 800b2cc:	bf45      	ittet	mi
 800b2ce:	f1c5 0301 	rsbmi	r3, r5, #1
 800b2d2:	9304      	strmi	r3, [sp, #16]
 800b2d4:	2300      	movpl	r3, #0
 800b2d6:	2300      	movmi	r3, #0
 800b2d8:	bf4c      	ite	mi
 800b2da:	9305      	strmi	r3, [sp, #20]
 800b2dc:	9304      	strpl	r3, [sp, #16]
 800b2de:	9b00      	ldr	r3, [sp, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	db3d      	blt.n	800b360 <_dtoa_r+0x248>
 800b2e4:	9b05      	ldr	r3, [sp, #20]
 800b2e6:	9a00      	ldr	r2, [sp, #0]
 800b2e8:	920a      	str	r2, [sp, #40]	; 0x28
 800b2ea:	4413      	add	r3, r2
 800b2ec:	9305      	str	r3, [sp, #20]
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	9307      	str	r3, [sp, #28]
 800b2f2:	9b06      	ldr	r3, [sp, #24]
 800b2f4:	2b09      	cmp	r3, #9
 800b2f6:	f200 8089 	bhi.w	800b40c <_dtoa_r+0x2f4>
 800b2fa:	2b05      	cmp	r3, #5
 800b2fc:	bfc4      	itt	gt
 800b2fe:	3b04      	subgt	r3, #4
 800b300:	9306      	strgt	r3, [sp, #24]
 800b302:	9b06      	ldr	r3, [sp, #24]
 800b304:	f1a3 0302 	sub.w	r3, r3, #2
 800b308:	bfcc      	ite	gt
 800b30a:	2500      	movgt	r5, #0
 800b30c:	2501      	movle	r5, #1
 800b30e:	2b03      	cmp	r3, #3
 800b310:	f200 8087 	bhi.w	800b422 <_dtoa_r+0x30a>
 800b314:	e8df f003 	tbb	[pc, r3]
 800b318:	59383a2d 	.word	0x59383a2d
 800b31c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b320:	441d      	add	r5, r3
 800b322:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b326:	2b20      	cmp	r3, #32
 800b328:	bfc1      	itttt	gt
 800b32a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b32e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b332:	fa0b f303 	lslgt.w	r3, fp, r3
 800b336:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b33a:	bfda      	itte	le
 800b33c:	f1c3 0320 	rsble	r3, r3, #32
 800b340:	fa06 f003 	lslle.w	r0, r6, r3
 800b344:	4318      	orrgt	r0, r3
 800b346:	f7f5 f8f5 	bl	8000534 <__aeabi_ui2d>
 800b34a:	2301      	movs	r3, #1
 800b34c:	4606      	mov	r6, r0
 800b34e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b352:	3d01      	subs	r5, #1
 800b354:	930e      	str	r3, [sp, #56]	; 0x38
 800b356:	e76a      	b.n	800b22e <_dtoa_r+0x116>
 800b358:	2301      	movs	r3, #1
 800b35a:	e7b2      	b.n	800b2c2 <_dtoa_r+0x1aa>
 800b35c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b35e:	e7b1      	b.n	800b2c4 <_dtoa_r+0x1ac>
 800b360:	9b04      	ldr	r3, [sp, #16]
 800b362:	9a00      	ldr	r2, [sp, #0]
 800b364:	1a9b      	subs	r3, r3, r2
 800b366:	9304      	str	r3, [sp, #16]
 800b368:	4253      	negs	r3, r2
 800b36a:	9307      	str	r3, [sp, #28]
 800b36c:	2300      	movs	r3, #0
 800b36e:	930a      	str	r3, [sp, #40]	; 0x28
 800b370:	e7bf      	b.n	800b2f2 <_dtoa_r+0x1da>
 800b372:	2300      	movs	r3, #0
 800b374:	9308      	str	r3, [sp, #32]
 800b376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b378:	2b00      	cmp	r3, #0
 800b37a:	dc55      	bgt.n	800b428 <_dtoa_r+0x310>
 800b37c:	2301      	movs	r3, #1
 800b37e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b382:	461a      	mov	r2, r3
 800b384:	9209      	str	r2, [sp, #36]	; 0x24
 800b386:	e00c      	b.n	800b3a2 <_dtoa_r+0x28a>
 800b388:	2301      	movs	r3, #1
 800b38a:	e7f3      	b.n	800b374 <_dtoa_r+0x25c>
 800b38c:	2300      	movs	r3, #0
 800b38e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b390:	9308      	str	r3, [sp, #32]
 800b392:	9b00      	ldr	r3, [sp, #0]
 800b394:	4413      	add	r3, r2
 800b396:	9302      	str	r3, [sp, #8]
 800b398:	3301      	adds	r3, #1
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	9303      	str	r3, [sp, #12]
 800b39e:	bfb8      	it	lt
 800b3a0:	2301      	movlt	r3, #1
 800b3a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	6042      	str	r2, [r0, #4]
 800b3a8:	2204      	movs	r2, #4
 800b3aa:	f102 0614 	add.w	r6, r2, #20
 800b3ae:	429e      	cmp	r6, r3
 800b3b0:	6841      	ldr	r1, [r0, #4]
 800b3b2:	d93d      	bls.n	800b430 <_dtoa_r+0x318>
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f000 fccd 	bl	800bd54 <_Balloc>
 800b3ba:	9001      	str	r0, [sp, #4]
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d13b      	bne.n	800b438 <_dtoa_r+0x320>
 800b3c0:	4b11      	ldr	r3, [pc, #68]	; (800b408 <_dtoa_r+0x2f0>)
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b3c8:	e6c0      	b.n	800b14c <_dtoa_r+0x34>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e7df      	b.n	800b38e <_dtoa_r+0x276>
 800b3ce:	bf00      	nop
 800b3d0:	636f4361 	.word	0x636f4361
 800b3d4:	3fd287a7 	.word	0x3fd287a7
 800b3d8:	8b60c8b3 	.word	0x8b60c8b3
 800b3dc:	3fc68a28 	.word	0x3fc68a28
 800b3e0:	509f79fb 	.word	0x509f79fb
 800b3e4:	3fd34413 	.word	0x3fd34413
 800b3e8:	08010a33 	.word	0x08010a33
 800b3ec:	08010a4a 	.word	0x08010a4a
 800b3f0:	7ff00000 	.word	0x7ff00000
 800b3f4:	08010a2f 	.word	0x08010a2f
 800b3f8:	08010a26 	.word	0x08010a26
 800b3fc:	08010c2a 	.word	0x08010c2a
 800b400:	3ff80000 	.word	0x3ff80000
 800b404:	08010b40 	.word	0x08010b40
 800b408:	08010aa5 	.word	0x08010aa5
 800b40c:	2501      	movs	r5, #1
 800b40e:	2300      	movs	r3, #0
 800b410:	9306      	str	r3, [sp, #24]
 800b412:	9508      	str	r5, [sp, #32]
 800b414:	f04f 33ff 	mov.w	r3, #4294967295
 800b418:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b41c:	2200      	movs	r2, #0
 800b41e:	2312      	movs	r3, #18
 800b420:	e7b0      	b.n	800b384 <_dtoa_r+0x26c>
 800b422:	2301      	movs	r3, #1
 800b424:	9308      	str	r3, [sp, #32]
 800b426:	e7f5      	b.n	800b414 <_dtoa_r+0x2fc>
 800b428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b42a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b42e:	e7b8      	b.n	800b3a2 <_dtoa_r+0x28a>
 800b430:	3101      	adds	r1, #1
 800b432:	6041      	str	r1, [r0, #4]
 800b434:	0052      	lsls	r2, r2, #1
 800b436:	e7b8      	b.n	800b3aa <_dtoa_r+0x292>
 800b438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b43a:	9a01      	ldr	r2, [sp, #4]
 800b43c:	601a      	str	r2, [r3, #0]
 800b43e:	9b03      	ldr	r3, [sp, #12]
 800b440:	2b0e      	cmp	r3, #14
 800b442:	f200 809d 	bhi.w	800b580 <_dtoa_r+0x468>
 800b446:	2d00      	cmp	r5, #0
 800b448:	f000 809a 	beq.w	800b580 <_dtoa_r+0x468>
 800b44c:	9b00      	ldr	r3, [sp, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	dd32      	ble.n	800b4b8 <_dtoa_r+0x3a0>
 800b452:	4ab7      	ldr	r2, [pc, #732]	; (800b730 <_dtoa_r+0x618>)
 800b454:	f003 030f 	and.w	r3, r3, #15
 800b458:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b45c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b460:	9b00      	ldr	r3, [sp, #0]
 800b462:	05d8      	lsls	r0, r3, #23
 800b464:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b468:	d516      	bpl.n	800b498 <_dtoa_r+0x380>
 800b46a:	4bb2      	ldr	r3, [pc, #712]	; (800b734 <_dtoa_r+0x61c>)
 800b46c:	ec51 0b19 	vmov	r0, r1, d9
 800b470:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b474:	f7f5 fa02 	bl	800087c <__aeabi_ddiv>
 800b478:	f007 070f 	and.w	r7, r7, #15
 800b47c:	4682      	mov	sl, r0
 800b47e:	468b      	mov	fp, r1
 800b480:	2503      	movs	r5, #3
 800b482:	4eac      	ldr	r6, [pc, #688]	; (800b734 <_dtoa_r+0x61c>)
 800b484:	b957      	cbnz	r7, 800b49c <_dtoa_r+0x384>
 800b486:	4642      	mov	r2, r8
 800b488:	464b      	mov	r3, r9
 800b48a:	4650      	mov	r0, sl
 800b48c:	4659      	mov	r1, fp
 800b48e:	f7f5 f9f5 	bl	800087c <__aeabi_ddiv>
 800b492:	4682      	mov	sl, r0
 800b494:	468b      	mov	fp, r1
 800b496:	e028      	b.n	800b4ea <_dtoa_r+0x3d2>
 800b498:	2502      	movs	r5, #2
 800b49a:	e7f2      	b.n	800b482 <_dtoa_r+0x36a>
 800b49c:	07f9      	lsls	r1, r7, #31
 800b49e:	d508      	bpl.n	800b4b2 <_dtoa_r+0x39a>
 800b4a0:	4640      	mov	r0, r8
 800b4a2:	4649      	mov	r1, r9
 800b4a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b4a8:	f7f5 f8be 	bl	8000628 <__aeabi_dmul>
 800b4ac:	3501      	adds	r5, #1
 800b4ae:	4680      	mov	r8, r0
 800b4b0:	4689      	mov	r9, r1
 800b4b2:	107f      	asrs	r7, r7, #1
 800b4b4:	3608      	adds	r6, #8
 800b4b6:	e7e5      	b.n	800b484 <_dtoa_r+0x36c>
 800b4b8:	f000 809b 	beq.w	800b5f2 <_dtoa_r+0x4da>
 800b4bc:	9b00      	ldr	r3, [sp, #0]
 800b4be:	4f9d      	ldr	r7, [pc, #628]	; (800b734 <_dtoa_r+0x61c>)
 800b4c0:	425e      	negs	r6, r3
 800b4c2:	4b9b      	ldr	r3, [pc, #620]	; (800b730 <_dtoa_r+0x618>)
 800b4c4:	f006 020f 	and.w	r2, r6, #15
 800b4c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	ec51 0b19 	vmov	r0, r1, d9
 800b4d4:	f7f5 f8a8 	bl	8000628 <__aeabi_dmul>
 800b4d8:	1136      	asrs	r6, r6, #4
 800b4da:	4682      	mov	sl, r0
 800b4dc:	468b      	mov	fp, r1
 800b4de:	2300      	movs	r3, #0
 800b4e0:	2502      	movs	r5, #2
 800b4e2:	2e00      	cmp	r6, #0
 800b4e4:	d17a      	bne.n	800b5dc <_dtoa_r+0x4c4>
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1d3      	bne.n	800b492 <_dtoa_r+0x37a>
 800b4ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f000 8082 	beq.w	800b5f6 <_dtoa_r+0x4de>
 800b4f2:	4b91      	ldr	r3, [pc, #580]	; (800b738 <_dtoa_r+0x620>)
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	4650      	mov	r0, sl
 800b4f8:	4659      	mov	r1, fp
 800b4fa:	f7f5 fb07 	bl	8000b0c <__aeabi_dcmplt>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d079      	beq.n	800b5f6 <_dtoa_r+0x4de>
 800b502:	9b03      	ldr	r3, [sp, #12]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d076      	beq.n	800b5f6 <_dtoa_r+0x4de>
 800b508:	9b02      	ldr	r3, [sp, #8]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	dd36      	ble.n	800b57c <_dtoa_r+0x464>
 800b50e:	9b00      	ldr	r3, [sp, #0]
 800b510:	4650      	mov	r0, sl
 800b512:	4659      	mov	r1, fp
 800b514:	1e5f      	subs	r7, r3, #1
 800b516:	2200      	movs	r2, #0
 800b518:	4b88      	ldr	r3, [pc, #544]	; (800b73c <_dtoa_r+0x624>)
 800b51a:	f7f5 f885 	bl	8000628 <__aeabi_dmul>
 800b51e:	9e02      	ldr	r6, [sp, #8]
 800b520:	4682      	mov	sl, r0
 800b522:	468b      	mov	fp, r1
 800b524:	3501      	adds	r5, #1
 800b526:	4628      	mov	r0, r5
 800b528:	f7f5 f814 	bl	8000554 <__aeabi_i2d>
 800b52c:	4652      	mov	r2, sl
 800b52e:	465b      	mov	r3, fp
 800b530:	f7f5 f87a 	bl	8000628 <__aeabi_dmul>
 800b534:	4b82      	ldr	r3, [pc, #520]	; (800b740 <_dtoa_r+0x628>)
 800b536:	2200      	movs	r2, #0
 800b538:	f7f4 fec0 	bl	80002bc <__adddf3>
 800b53c:	46d0      	mov	r8, sl
 800b53e:	46d9      	mov	r9, fp
 800b540:	4682      	mov	sl, r0
 800b542:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b546:	2e00      	cmp	r6, #0
 800b548:	d158      	bne.n	800b5fc <_dtoa_r+0x4e4>
 800b54a:	4b7e      	ldr	r3, [pc, #504]	; (800b744 <_dtoa_r+0x62c>)
 800b54c:	2200      	movs	r2, #0
 800b54e:	4640      	mov	r0, r8
 800b550:	4649      	mov	r1, r9
 800b552:	f7f4 feb1 	bl	80002b8 <__aeabi_dsub>
 800b556:	4652      	mov	r2, sl
 800b558:	465b      	mov	r3, fp
 800b55a:	4680      	mov	r8, r0
 800b55c:	4689      	mov	r9, r1
 800b55e:	f7f5 faf3 	bl	8000b48 <__aeabi_dcmpgt>
 800b562:	2800      	cmp	r0, #0
 800b564:	f040 8295 	bne.w	800ba92 <_dtoa_r+0x97a>
 800b568:	4652      	mov	r2, sl
 800b56a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b56e:	4640      	mov	r0, r8
 800b570:	4649      	mov	r1, r9
 800b572:	f7f5 facb 	bl	8000b0c <__aeabi_dcmplt>
 800b576:	2800      	cmp	r0, #0
 800b578:	f040 8289 	bne.w	800ba8e <_dtoa_r+0x976>
 800b57c:	ec5b ab19 	vmov	sl, fp, d9
 800b580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b582:	2b00      	cmp	r3, #0
 800b584:	f2c0 8148 	blt.w	800b818 <_dtoa_r+0x700>
 800b588:	9a00      	ldr	r2, [sp, #0]
 800b58a:	2a0e      	cmp	r2, #14
 800b58c:	f300 8144 	bgt.w	800b818 <_dtoa_r+0x700>
 800b590:	4b67      	ldr	r3, [pc, #412]	; (800b730 <_dtoa_r+0x618>)
 800b592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b596:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f280 80d5 	bge.w	800b74c <_dtoa_r+0x634>
 800b5a2:	9b03      	ldr	r3, [sp, #12]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f300 80d1 	bgt.w	800b74c <_dtoa_r+0x634>
 800b5aa:	f040 826f 	bne.w	800ba8c <_dtoa_r+0x974>
 800b5ae:	4b65      	ldr	r3, [pc, #404]	; (800b744 <_dtoa_r+0x62c>)
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	4640      	mov	r0, r8
 800b5b4:	4649      	mov	r1, r9
 800b5b6:	f7f5 f837 	bl	8000628 <__aeabi_dmul>
 800b5ba:	4652      	mov	r2, sl
 800b5bc:	465b      	mov	r3, fp
 800b5be:	f7f5 fab9 	bl	8000b34 <__aeabi_dcmpge>
 800b5c2:	9e03      	ldr	r6, [sp, #12]
 800b5c4:	4637      	mov	r7, r6
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	f040 8245 	bne.w	800ba56 <_dtoa_r+0x93e>
 800b5cc:	9d01      	ldr	r5, [sp, #4]
 800b5ce:	2331      	movs	r3, #49	; 0x31
 800b5d0:	f805 3b01 	strb.w	r3, [r5], #1
 800b5d4:	9b00      	ldr	r3, [sp, #0]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	e240      	b.n	800ba5e <_dtoa_r+0x946>
 800b5dc:	07f2      	lsls	r2, r6, #31
 800b5de:	d505      	bpl.n	800b5ec <_dtoa_r+0x4d4>
 800b5e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5e4:	f7f5 f820 	bl	8000628 <__aeabi_dmul>
 800b5e8:	3501      	adds	r5, #1
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	1076      	asrs	r6, r6, #1
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	e777      	b.n	800b4e2 <_dtoa_r+0x3ca>
 800b5f2:	2502      	movs	r5, #2
 800b5f4:	e779      	b.n	800b4ea <_dtoa_r+0x3d2>
 800b5f6:	9f00      	ldr	r7, [sp, #0]
 800b5f8:	9e03      	ldr	r6, [sp, #12]
 800b5fa:	e794      	b.n	800b526 <_dtoa_r+0x40e>
 800b5fc:	9901      	ldr	r1, [sp, #4]
 800b5fe:	4b4c      	ldr	r3, [pc, #304]	; (800b730 <_dtoa_r+0x618>)
 800b600:	4431      	add	r1, r6
 800b602:	910d      	str	r1, [sp, #52]	; 0x34
 800b604:	9908      	ldr	r1, [sp, #32]
 800b606:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b60a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b60e:	2900      	cmp	r1, #0
 800b610:	d043      	beq.n	800b69a <_dtoa_r+0x582>
 800b612:	494d      	ldr	r1, [pc, #308]	; (800b748 <_dtoa_r+0x630>)
 800b614:	2000      	movs	r0, #0
 800b616:	f7f5 f931 	bl	800087c <__aeabi_ddiv>
 800b61a:	4652      	mov	r2, sl
 800b61c:	465b      	mov	r3, fp
 800b61e:	f7f4 fe4b 	bl	80002b8 <__aeabi_dsub>
 800b622:	9d01      	ldr	r5, [sp, #4]
 800b624:	4682      	mov	sl, r0
 800b626:	468b      	mov	fp, r1
 800b628:	4649      	mov	r1, r9
 800b62a:	4640      	mov	r0, r8
 800b62c:	f7f5 faac 	bl	8000b88 <__aeabi_d2iz>
 800b630:	4606      	mov	r6, r0
 800b632:	f7f4 ff8f 	bl	8000554 <__aeabi_i2d>
 800b636:	4602      	mov	r2, r0
 800b638:	460b      	mov	r3, r1
 800b63a:	4640      	mov	r0, r8
 800b63c:	4649      	mov	r1, r9
 800b63e:	f7f4 fe3b 	bl	80002b8 <__aeabi_dsub>
 800b642:	3630      	adds	r6, #48	; 0x30
 800b644:	f805 6b01 	strb.w	r6, [r5], #1
 800b648:	4652      	mov	r2, sl
 800b64a:	465b      	mov	r3, fp
 800b64c:	4680      	mov	r8, r0
 800b64e:	4689      	mov	r9, r1
 800b650:	f7f5 fa5c 	bl	8000b0c <__aeabi_dcmplt>
 800b654:	2800      	cmp	r0, #0
 800b656:	d163      	bne.n	800b720 <_dtoa_r+0x608>
 800b658:	4642      	mov	r2, r8
 800b65a:	464b      	mov	r3, r9
 800b65c:	4936      	ldr	r1, [pc, #216]	; (800b738 <_dtoa_r+0x620>)
 800b65e:	2000      	movs	r0, #0
 800b660:	f7f4 fe2a 	bl	80002b8 <__aeabi_dsub>
 800b664:	4652      	mov	r2, sl
 800b666:	465b      	mov	r3, fp
 800b668:	f7f5 fa50 	bl	8000b0c <__aeabi_dcmplt>
 800b66c:	2800      	cmp	r0, #0
 800b66e:	f040 80b5 	bne.w	800b7dc <_dtoa_r+0x6c4>
 800b672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b674:	429d      	cmp	r5, r3
 800b676:	d081      	beq.n	800b57c <_dtoa_r+0x464>
 800b678:	4b30      	ldr	r3, [pc, #192]	; (800b73c <_dtoa_r+0x624>)
 800b67a:	2200      	movs	r2, #0
 800b67c:	4650      	mov	r0, sl
 800b67e:	4659      	mov	r1, fp
 800b680:	f7f4 ffd2 	bl	8000628 <__aeabi_dmul>
 800b684:	4b2d      	ldr	r3, [pc, #180]	; (800b73c <_dtoa_r+0x624>)
 800b686:	4682      	mov	sl, r0
 800b688:	468b      	mov	fp, r1
 800b68a:	4640      	mov	r0, r8
 800b68c:	4649      	mov	r1, r9
 800b68e:	2200      	movs	r2, #0
 800b690:	f7f4 ffca 	bl	8000628 <__aeabi_dmul>
 800b694:	4680      	mov	r8, r0
 800b696:	4689      	mov	r9, r1
 800b698:	e7c6      	b.n	800b628 <_dtoa_r+0x510>
 800b69a:	4650      	mov	r0, sl
 800b69c:	4659      	mov	r1, fp
 800b69e:	f7f4 ffc3 	bl	8000628 <__aeabi_dmul>
 800b6a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6a4:	9d01      	ldr	r5, [sp, #4]
 800b6a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6a8:	4682      	mov	sl, r0
 800b6aa:	468b      	mov	fp, r1
 800b6ac:	4649      	mov	r1, r9
 800b6ae:	4640      	mov	r0, r8
 800b6b0:	f7f5 fa6a 	bl	8000b88 <__aeabi_d2iz>
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	f7f4 ff4d 	bl	8000554 <__aeabi_i2d>
 800b6ba:	3630      	adds	r6, #48	; 0x30
 800b6bc:	4602      	mov	r2, r0
 800b6be:	460b      	mov	r3, r1
 800b6c0:	4640      	mov	r0, r8
 800b6c2:	4649      	mov	r1, r9
 800b6c4:	f7f4 fdf8 	bl	80002b8 <__aeabi_dsub>
 800b6c8:	f805 6b01 	strb.w	r6, [r5], #1
 800b6cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6ce:	429d      	cmp	r5, r3
 800b6d0:	4680      	mov	r8, r0
 800b6d2:	4689      	mov	r9, r1
 800b6d4:	f04f 0200 	mov.w	r2, #0
 800b6d8:	d124      	bne.n	800b724 <_dtoa_r+0x60c>
 800b6da:	4b1b      	ldr	r3, [pc, #108]	; (800b748 <_dtoa_r+0x630>)
 800b6dc:	4650      	mov	r0, sl
 800b6de:	4659      	mov	r1, fp
 800b6e0:	f7f4 fdec 	bl	80002bc <__adddf3>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	4640      	mov	r0, r8
 800b6ea:	4649      	mov	r1, r9
 800b6ec:	f7f5 fa2c 	bl	8000b48 <__aeabi_dcmpgt>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d173      	bne.n	800b7dc <_dtoa_r+0x6c4>
 800b6f4:	4652      	mov	r2, sl
 800b6f6:	465b      	mov	r3, fp
 800b6f8:	4913      	ldr	r1, [pc, #76]	; (800b748 <_dtoa_r+0x630>)
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	f7f4 fddc 	bl	80002b8 <__aeabi_dsub>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	4640      	mov	r0, r8
 800b706:	4649      	mov	r1, r9
 800b708:	f7f5 fa00 	bl	8000b0c <__aeabi_dcmplt>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	f43f af35 	beq.w	800b57c <_dtoa_r+0x464>
 800b712:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b714:	1e6b      	subs	r3, r5, #1
 800b716:	930f      	str	r3, [sp, #60]	; 0x3c
 800b718:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b71c:	2b30      	cmp	r3, #48	; 0x30
 800b71e:	d0f8      	beq.n	800b712 <_dtoa_r+0x5fa>
 800b720:	9700      	str	r7, [sp, #0]
 800b722:	e049      	b.n	800b7b8 <_dtoa_r+0x6a0>
 800b724:	4b05      	ldr	r3, [pc, #20]	; (800b73c <_dtoa_r+0x624>)
 800b726:	f7f4 ff7f 	bl	8000628 <__aeabi_dmul>
 800b72a:	4680      	mov	r8, r0
 800b72c:	4689      	mov	r9, r1
 800b72e:	e7bd      	b.n	800b6ac <_dtoa_r+0x594>
 800b730:	08010b40 	.word	0x08010b40
 800b734:	08010b18 	.word	0x08010b18
 800b738:	3ff00000 	.word	0x3ff00000
 800b73c:	40240000 	.word	0x40240000
 800b740:	401c0000 	.word	0x401c0000
 800b744:	40140000 	.word	0x40140000
 800b748:	3fe00000 	.word	0x3fe00000
 800b74c:	9d01      	ldr	r5, [sp, #4]
 800b74e:	4656      	mov	r6, sl
 800b750:	465f      	mov	r7, fp
 800b752:	4642      	mov	r2, r8
 800b754:	464b      	mov	r3, r9
 800b756:	4630      	mov	r0, r6
 800b758:	4639      	mov	r1, r7
 800b75a:	f7f5 f88f 	bl	800087c <__aeabi_ddiv>
 800b75e:	f7f5 fa13 	bl	8000b88 <__aeabi_d2iz>
 800b762:	4682      	mov	sl, r0
 800b764:	f7f4 fef6 	bl	8000554 <__aeabi_i2d>
 800b768:	4642      	mov	r2, r8
 800b76a:	464b      	mov	r3, r9
 800b76c:	f7f4 ff5c 	bl	8000628 <__aeabi_dmul>
 800b770:	4602      	mov	r2, r0
 800b772:	460b      	mov	r3, r1
 800b774:	4630      	mov	r0, r6
 800b776:	4639      	mov	r1, r7
 800b778:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b77c:	f7f4 fd9c 	bl	80002b8 <__aeabi_dsub>
 800b780:	f805 6b01 	strb.w	r6, [r5], #1
 800b784:	9e01      	ldr	r6, [sp, #4]
 800b786:	9f03      	ldr	r7, [sp, #12]
 800b788:	1bae      	subs	r6, r5, r6
 800b78a:	42b7      	cmp	r7, r6
 800b78c:	4602      	mov	r2, r0
 800b78e:	460b      	mov	r3, r1
 800b790:	d135      	bne.n	800b7fe <_dtoa_r+0x6e6>
 800b792:	f7f4 fd93 	bl	80002bc <__adddf3>
 800b796:	4642      	mov	r2, r8
 800b798:	464b      	mov	r3, r9
 800b79a:	4606      	mov	r6, r0
 800b79c:	460f      	mov	r7, r1
 800b79e:	f7f5 f9d3 	bl	8000b48 <__aeabi_dcmpgt>
 800b7a2:	b9d0      	cbnz	r0, 800b7da <_dtoa_r+0x6c2>
 800b7a4:	4642      	mov	r2, r8
 800b7a6:	464b      	mov	r3, r9
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	4639      	mov	r1, r7
 800b7ac:	f7f5 f9a4 	bl	8000af8 <__aeabi_dcmpeq>
 800b7b0:	b110      	cbz	r0, 800b7b8 <_dtoa_r+0x6a0>
 800b7b2:	f01a 0f01 	tst.w	sl, #1
 800b7b6:	d110      	bne.n	800b7da <_dtoa_r+0x6c2>
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	ee18 1a10 	vmov	r1, s16
 800b7be:	f000 fb09 	bl	800bdd4 <_Bfree>
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	9800      	ldr	r0, [sp, #0]
 800b7c6:	702b      	strb	r3, [r5, #0]
 800b7c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7ca:	3001      	adds	r0, #1
 800b7cc:	6018      	str	r0, [r3, #0]
 800b7ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f43f acf1 	beq.w	800b1b8 <_dtoa_r+0xa0>
 800b7d6:	601d      	str	r5, [r3, #0]
 800b7d8:	e4ee      	b.n	800b1b8 <_dtoa_r+0xa0>
 800b7da:	9f00      	ldr	r7, [sp, #0]
 800b7dc:	462b      	mov	r3, r5
 800b7de:	461d      	mov	r5, r3
 800b7e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7e4:	2a39      	cmp	r2, #57	; 0x39
 800b7e6:	d106      	bne.n	800b7f6 <_dtoa_r+0x6de>
 800b7e8:	9a01      	ldr	r2, [sp, #4]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d1f7      	bne.n	800b7de <_dtoa_r+0x6c6>
 800b7ee:	9901      	ldr	r1, [sp, #4]
 800b7f0:	2230      	movs	r2, #48	; 0x30
 800b7f2:	3701      	adds	r7, #1
 800b7f4:	700a      	strb	r2, [r1, #0]
 800b7f6:	781a      	ldrb	r2, [r3, #0]
 800b7f8:	3201      	adds	r2, #1
 800b7fa:	701a      	strb	r2, [r3, #0]
 800b7fc:	e790      	b.n	800b720 <_dtoa_r+0x608>
 800b7fe:	4ba6      	ldr	r3, [pc, #664]	; (800ba98 <_dtoa_r+0x980>)
 800b800:	2200      	movs	r2, #0
 800b802:	f7f4 ff11 	bl	8000628 <__aeabi_dmul>
 800b806:	2200      	movs	r2, #0
 800b808:	2300      	movs	r3, #0
 800b80a:	4606      	mov	r6, r0
 800b80c:	460f      	mov	r7, r1
 800b80e:	f7f5 f973 	bl	8000af8 <__aeabi_dcmpeq>
 800b812:	2800      	cmp	r0, #0
 800b814:	d09d      	beq.n	800b752 <_dtoa_r+0x63a>
 800b816:	e7cf      	b.n	800b7b8 <_dtoa_r+0x6a0>
 800b818:	9a08      	ldr	r2, [sp, #32]
 800b81a:	2a00      	cmp	r2, #0
 800b81c:	f000 80d7 	beq.w	800b9ce <_dtoa_r+0x8b6>
 800b820:	9a06      	ldr	r2, [sp, #24]
 800b822:	2a01      	cmp	r2, #1
 800b824:	f300 80ba 	bgt.w	800b99c <_dtoa_r+0x884>
 800b828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b82a:	2a00      	cmp	r2, #0
 800b82c:	f000 80b2 	beq.w	800b994 <_dtoa_r+0x87c>
 800b830:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b834:	9e07      	ldr	r6, [sp, #28]
 800b836:	9d04      	ldr	r5, [sp, #16]
 800b838:	9a04      	ldr	r2, [sp, #16]
 800b83a:	441a      	add	r2, r3
 800b83c:	9204      	str	r2, [sp, #16]
 800b83e:	9a05      	ldr	r2, [sp, #20]
 800b840:	2101      	movs	r1, #1
 800b842:	441a      	add	r2, r3
 800b844:	4620      	mov	r0, r4
 800b846:	9205      	str	r2, [sp, #20]
 800b848:	f000 fb7c 	bl	800bf44 <__i2b>
 800b84c:	4607      	mov	r7, r0
 800b84e:	2d00      	cmp	r5, #0
 800b850:	dd0c      	ble.n	800b86c <_dtoa_r+0x754>
 800b852:	9b05      	ldr	r3, [sp, #20]
 800b854:	2b00      	cmp	r3, #0
 800b856:	dd09      	ble.n	800b86c <_dtoa_r+0x754>
 800b858:	42ab      	cmp	r3, r5
 800b85a:	9a04      	ldr	r2, [sp, #16]
 800b85c:	bfa8      	it	ge
 800b85e:	462b      	movge	r3, r5
 800b860:	1ad2      	subs	r2, r2, r3
 800b862:	9204      	str	r2, [sp, #16]
 800b864:	9a05      	ldr	r2, [sp, #20]
 800b866:	1aed      	subs	r5, r5, r3
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	9305      	str	r3, [sp, #20]
 800b86c:	9b07      	ldr	r3, [sp, #28]
 800b86e:	b31b      	cbz	r3, 800b8b8 <_dtoa_r+0x7a0>
 800b870:	9b08      	ldr	r3, [sp, #32]
 800b872:	2b00      	cmp	r3, #0
 800b874:	f000 80af 	beq.w	800b9d6 <_dtoa_r+0x8be>
 800b878:	2e00      	cmp	r6, #0
 800b87a:	dd13      	ble.n	800b8a4 <_dtoa_r+0x78c>
 800b87c:	4639      	mov	r1, r7
 800b87e:	4632      	mov	r2, r6
 800b880:	4620      	mov	r0, r4
 800b882:	f000 fc1f 	bl	800c0c4 <__pow5mult>
 800b886:	ee18 2a10 	vmov	r2, s16
 800b88a:	4601      	mov	r1, r0
 800b88c:	4607      	mov	r7, r0
 800b88e:	4620      	mov	r0, r4
 800b890:	f000 fb6e 	bl	800bf70 <__multiply>
 800b894:	ee18 1a10 	vmov	r1, s16
 800b898:	4680      	mov	r8, r0
 800b89a:	4620      	mov	r0, r4
 800b89c:	f000 fa9a 	bl	800bdd4 <_Bfree>
 800b8a0:	ee08 8a10 	vmov	s16, r8
 800b8a4:	9b07      	ldr	r3, [sp, #28]
 800b8a6:	1b9a      	subs	r2, r3, r6
 800b8a8:	d006      	beq.n	800b8b8 <_dtoa_r+0x7a0>
 800b8aa:	ee18 1a10 	vmov	r1, s16
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f000 fc08 	bl	800c0c4 <__pow5mult>
 800b8b4:	ee08 0a10 	vmov	s16, r0
 800b8b8:	2101      	movs	r1, #1
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f000 fb42 	bl	800bf44 <__i2b>
 800b8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	4606      	mov	r6, r0
 800b8c6:	f340 8088 	ble.w	800b9da <_dtoa_r+0x8c2>
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	4601      	mov	r1, r0
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f000 fbf8 	bl	800c0c4 <__pow5mult>
 800b8d4:	9b06      	ldr	r3, [sp, #24]
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	4606      	mov	r6, r0
 800b8da:	f340 8081 	ble.w	800b9e0 <_dtoa_r+0x8c8>
 800b8de:	f04f 0800 	mov.w	r8, #0
 800b8e2:	6933      	ldr	r3, [r6, #16]
 800b8e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b8e8:	6918      	ldr	r0, [r3, #16]
 800b8ea:	f000 fadb 	bl	800bea4 <__hi0bits>
 800b8ee:	f1c0 0020 	rsb	r0, r0, #32
 800b8f2:	9b05      	ldr	r3, [sp, #20]
 800b8f4:	4418      	add	r0, r3
 800b8f6:	f010 001f 	ands.w	r0, r0, #31
 800b8fa:	f000 8092 	beq.w	800ba22 <_dtoa_r+0x90a>
 800b8fe:	f1c0 0320 	rsb	r3, r0, #32
 800b902:	2b04      	cmp	r3, #4
 800b904:	f340 808a 	ble.w	800ba1c <_dtoa_r+0x904>
 800b908:	f1c0 001c 	rsb	r0, r0, #28
 800b90c:	9b04      	ldr	r3, [sp, #16]
 800b90e:	4403      	add	r3, r0
 800b910:	9304      	str	r3, [sp, #16]
 800b912:	9b05      	ldr	r3, [sp, #20]
 800b914:	4403      	add	r3, r0
 800b916:	4405      	add	r5, r0
 800b918:	9305      	str	r3, [sp, #20]
 800b91a:	9b04      	ldr	r3, [sp, #16]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	dd07      	ble.n	800b930 <_dtoa_r+0x818>
 800b920:	ee18 1a10 	vmov	r1, s16
 800b924:	461a      	mov	r2, r3
 800b926:	4620      	mov	r0, r4
 800b928:	f000 fc26 	bl	800c178 <__lshift>
 800b92c:	ee08 0a10 	vmov	s16, r0
 800b930:	9b05      	ldr	r3, [sp, #20]
 800b932:	2b00      	cmp	r3, #0
 800b934:	dd05      	ble.n	800b942 <_dtoa_r+0x82a>
 800b936:	4631      	mov	r1, r6
 800b938:	461a      	mov	r2, r3
 800b93a:	4620      	mov	r0, r4
 800b93c:	f000 fc1c 	bl	800c178 <__lshift>
 800b940:	4606      	mov	r6, r0
 800b942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b944:	2b00      	cmp	r3, #0
 800b946:	d06e      	beq.n	800ba26 <_dtoa_r+0x90e>
 800b948:	ee18 0a10 	vmov	r0, s16
 800b94c:	4631      	mov	r1, r6
 800b94e:	f000 fc83 	bl	800c258 <__mcmp>
 800b952:	2800      	cmp	r0, #0
 800b954:	da67      	bge.n	800ba26 <_dtoa_r+0x90e>
 800b956:	9b00      	ldr	r3, [sp, #0]
 800b958:	3b01      	subs	r3, #1
 800b95a:	ee18 1a10 	vmov	r1, s16
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	220a      	movs	r2, #10
 800b962:	2300      	movs	r3, #0
 800b964:	4620      	mov	r0, r4
 800b966:	f000 fa57 	bl	800be18 <__multadd>
 800b96a:	9b08      	ldr	r3, [sp, #32]
 800b96c:	ee08 0a10 	vmov	s16, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 81b1 	beq.w	800bcd8 <_dtoa_r+0xbc0>
 800b976:	2300      	movs	r3, #0
 800b978:	4639      	mov	r1, r7
 800b97a:	220a      	movs	r2, #10
 800b97c:	4620      	mov	r0, r4
 800b97e:	f000 fa4b 	bl	800be18 <__multadd>
 800b982:	9b02      	ldr	r3, [sp, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	4607      	mov	r7, r0
 800b988:	f300 808e 	bgt.w	800baa8 <_dtoa_r+0x990>
 800b98c:	9b06      	ldr	r3, [sp, #24]
 800b98e:	2b02      	cmp	r3, #2
 800b990:	dc51      	bgt.n	800ba36 <_dtoa_r+0x91e>
 800b992:	e089      	b.n	800baa8 <_dtoa_r+0x990>
 800b994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b996:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b99a:	e74b      	b.n	800b834 <_dtoa_r+0x71c>
 800b99c:	9b03      	ldr	r3, [sp, #12]
 800b99e:	1e5e      	subs	r6, r3, #1
 800b9a0:	9b07      	ldr	r3, [sp, #28]
 800b9a2:	42b3      	cmp	r3, r6
 800b9a4:	bfbf      	itttt	lt
 800b9a6:	9b07      	ldrlt	r3, [sp, #28]
 800b9a8:	9607      	strlt	r6, [sp, #28]
 800b9aa:	1af2      	sublt	r2, r6, r3
 800b9ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b9ae:	bfb6      	itet	lt
 800b9b0:	189b      	addlt	r3, r3, r2
 800b9b2:	1b9e      	subge	r6, r3, r6
 800b9b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b9b6:	9b03      	ldr	r3, [sp, #12]
 800b9b8:	bfb8      	it	lt
 800b9ba:	2600      	movlt	r6, #0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	bfb7      	itett	lt
 800b9c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b9c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b9c8:	1a9d      	sublt	r5, r3, r2
 800b9ca:	2300      	movlt	r3, #0
 800b9cc:	e734      	b.n	800b838 <_dtoa_r+0x720>
 800b9ce:	9e07      	ldr	r6, [sp, #28]
 800b9d0:	9d04      	ldr	r5, [sp, #16]
 800b9d2:	9f08      	ldr	r7, [sp, #32]
 800b9d4:	e73b      	b.n	800b84e <_dtoa_r+0x736>
 800b9d6:	9a07      	ldr	r2, [sp, #28]
 800b9d8:	e767      	b.n	800b8aa <_dtoa_r+0x792>
 800b9da:	9b06      	ldr	r3, [sp, #24]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	dc18      	bgt.n	800ba12 <_dtoa_r+0x8fa>
 800b9e0:	f1ba 0f00 	cmp.w	sl, #0
 800b9e4:	d115      	bne.n	800ba12 <_dtoa_r+0x8fa>
 800b9e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9ea:	b993      	cbnz	r3, 800ba12 <_dtoa_r+0x8fa>
 800b9ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b9f0:	0d1b      	lsrs	r3, r3, #20
 800b9f2:	051b      	lsls	r3, r3, #20
 800b9f4:	b183      	cbz	r3, 800ba18 <_dtoa_r+0x900>
 800b9f6:	9b04      	ldr	r3, [sp, #16]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	9304      	str	r3, [sp, #16]
 800b9fc:	9b05      	ldr	r3, [sp, #20]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	9305      	str	r3, [sp, #20]
 800ba02:	f04f 0801 	mov.w	r8, #1
 800ba06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f47f af6a 	bne.w	800b8e2 <_dtoa_r+0x7ca>
 800ba0e:	2001      	movs	r0, #1
 800ba10:	e76f      	b.n	800b8f2 <_dtoa_r+0x7da>
 800ba12:	f04f 0800 	mov.w	r8, #0
 800ba16:	e7f6      	b.n	800ba06 <_dtoa_r+0x8ee>
 800ba18:	4698      	mov	r8, r3
 800ba1a:	e7f4      	b.n	800ba06 <_dtoa_r+0x8ee>
 800ba1c:	f43f af7d 	beq.w	800b91a <_dtoa_r+0x802>
 800ba20:	4618      	mov	r0, r3
 800ba22:	301c      	adds	r0, #28
 800ba24:	e772      	b.n	800b90c <_dtoa_r+0x7f4>
 800ba26:	9b03      	ldr	r3, [sp, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	dc37      	bgt.n	800ba9c <_dtoa_r+0x984>
 800ba2c:	9b06      	ldr	r3, [sp, #24]
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	dd34      	ble.n	800ba9c <_dtoa_r+0x984>
 800ba32:	9b03      	ldr	r3, [sp, #12]
 800ba34:	9302      	str	r3, [sp, #8]
 800ba36:	9b02      	ldr	r3, [sp, #8]
 800ba38:	b96b      	cbnz	r3, 800ba56 <_dtoa_r+0x93e>
 800ba3a:	4631      	mov	r1, r6
 800ba3c:	2205      	movs	r2, #5
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f000 f9ea 	bl	800be18 <__multadd>
 800ba44:	4601      	mov	r1, r0
 800ba46:	4606      	mov	r6, r0
 800ba48:	ee18 0a10 	vmov	r0, s16
 800ba4c:	f000 fc04 	bl	800c258 <__mcmp>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	f73f adbb 	bgt.w	800b5cc <_dtoa_r+0x4b4>
 800ba56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba58:	9d01      	ldr	r5, [sp, #4]
 800ba5a:	43db      	mvns	r3, r3
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	f04f 0800 	mov.w	r8, #0
 800ba62:	4631      	mov	r1, r6
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 f9b5 	bl	800bdd4 <_Bfree>
 800ba6a:	2f00      	cmp	r7, #0
 800ba6c:	f43f aea4 	beq.w	800b7b8 <_dtoa_r+0x6a0>
 800ba70:	f1b8 0f00 	cmp.w	r8, #0
 800ba74:	d005      	beq.n	800ba82 <_dtoa_r+0x96a>
 800ba76:	45b8      	cmp	r8, r7
 800ba78:	d003      	beq.n	800ba82 <_dtoa_r+0x96a>
 800ba7a:	4641      	mov	r1, r8
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f000 f9a9 	bl	800bdd4 <_Bfree>
 800ba82:	4639      	mov	r1, r7
 800ba84:	4620      	mov	r0, r4
 800ba86:	f000 f9a5 	bl	800bdd4 <_Bfree>
 800ba8a:	e695      	b.n	800b7b8 <_dtoa_r+0x6a0>
 800ba8c:	2600      	movs	r6, #0
 800ba8e:	4637      	mov	r7, r6
 800ba90:	e7e1      	b.n	800ba56 <_dtoa_r+0x93e>
 800ba92:	9700      	str	r7, [sp, #0]
 800ba94:	4637      	mov	r7, r6
 800ba96:	e599      	b.n	800b5cc <_dtoa_r+0x4b4>
 800ba98:	40240000 	.word	0x40240000
 800ba9c:	9b08      	ldr	r3, [sp, #32]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 80ca 	beq.w	800bc38 <_dtoa_r+0xb20>
 800baa4:	9b03      	ldr	r3, [sp, #12]
 800baa6:	9302      	str	r3, [sp, #8]
 800baa8:	2d00      	cmp	r5, #0
 800baaa:	dd05      	ble.n	800bab8 <_dtoa_r+0x9a0>
 800baac:	4639      	mov	r1, r7
 800baae:	462a      	mov	r2, r5
 800bab0:	4620      	mov	r0, r4
 800bab2:	f000 fb61 	bl	800c178 <__lshift>
 800bab6:	4607      	mov	r7, r0
 800bab8:	f1b8 0f00 	cmp.w	r8, #0
 800babc:	d05b      	beq.n	800bb76 <_dtoa_r+0xa5e>
 800babe:	6879      	ldr	r1, [r7, #4]
 800bac0:	4620      	mov	r0, r4
 800bac2:	f000 f947 	bl	800bd54 <_Balloc>
 800bac6:	4605      	mov	r5, r0
 800bac8:	b928      	cbnz	r0, 800bad6 <_dtoa_r+0x9be>
 800baca:	4b87      	ldr	r3, [pc, #540]	; (800bce8 <_dtoa_r+0xbd0>)
 800bacc:	4602      	mov	r2, r0
 800bace:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bad2:	f7ff bb3b 	b.w	800b14c <_dtoa_r+0x34>
 800bad6:	693a      	ldr	r2, [r7, #16]
 800bad8:	3202      	adds	r2, #2
 800bada:	0092      	lsls	r2, r2, #2
 800badc:	f107 010c 	add.w	r1, r7, #12
 800bae0:	300c      	adds	r0, #12
 800bae2:	f000 f91d 	bl	800bd20 <memcpy>
 800bae6:	2201      	movs	r2, #1
 800bae8:	4629      	mov	r1, r5
 800baea:	4620      	mov	r0, r4
 800baec:	f000 fb44 	bl	800c178 <__lshift>
 800baf0:	9b01      	ldr	r3, [sp, #4]
 800baf2:	f103 0901 	add.w	r9, r3, #1
 800baf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bafa:	4413      	add	r3, r2
 800bafc:	9305      	str	r3, [sp, #20]
 800bafe:	f00a 0301 	and.w	r3, sl, #1
 800bb02:	46b8      	mov	r8, r7
 800bb04:	9304      	str	r3, [sp, #16]
 800bb06:	4607      	mov	r7, r0
 800bb08:	4631      	mov	r1, r6
 800bb0a:	ee18 0a10 	vmov	r0, s16
 800bb0e:	f7ff fa75 	bl	800affc <quorem>
 800bb12:	4641      	mov	r1, r8
 800bb14:	9002      	str	r0, [sp, #8]
 800bb16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb1a:	ee18 0a10 	vmov	r0, s16
 800bb1e:	f000 fb9b 	bl	800c258 <__mcmp>
 800bb22:	463a      	mov	r2, r7
 800bb24:	9003      	str	r0, [sp, #12]
 800bb26:	4631      	mov	r1, r6
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f000 fbb1 	bl	800c290 <__mdiff>
 800bb2e:	68c2      	ldr	r2, [r0, #12]
 800bb30:	f109 3bff 	add.w	fp, r9, #4294967295
 800bb34:	4605      	mov	r5, r0
 800bb36:	bb02      	cbnz	r2, 800bb7a <_dtoa_r+0xa62>
 800bb38:	4601      	mov	r1, r0
 800bb3a:	ee18 0a10 	vmov	r0, s16
 800bb3e:	f000 fb8b 	bl	800c258 <__mcmp>
 800bb42:	4602      	mov	r2, r0
 800bb44:	4629      	mov	r1, r5
 800bb46:	4620      	mov	r0, r4
 800bb48:	9207      	str	r2, [sp, #28]
 800bb4a:	f000 f943 	bl	800bdd4 <_Bfree>
 800bb4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bb52:	ea43 0102 	orr.w	r1, r3, r2
 800bb56:	9b04      	ldr	r3, [sp, #16]
 800bb58:	430b      	orrs	r3, r1
 800bb5a:	464d      	mov	r5, r9
 800bb5c:	d10f      	bne.n	800bb7e <_dtoa_r+0xa66>
 800bb5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb62:	d02a      	beq.n	800bbba <_dtoa_r+0xaa2>
 800bb64:	9b03      	ldr	r3, [sp, #12]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	dd02      	ble.n	800bb70 <_dtoa_r+0xa58>
 800bb6a:	9b02      	ldr	r3, [sp, #8]
 800bb6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bb70:	f88b a000 	strb.w	sl, [fp]
 800bb74:	e775      	b.n	800ba62 <_dtoa_r+0x94a>
 800bb76:	4638      	mov	r0, r7
 800bb78:	e7ba      	b.n	800baf0 <_dtoa_r+0x9d8>
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	e7e2      	b.n	800bb44 <_dtoa_r+0xa2c>
 800bb7e:	9b03      	ldr	r3, [sp, #12]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	db04      	blt.n	800bb8e <_dtoa_r+0xa76>
 800bb84:	9906      	ldr	r1, [sp, #24]
 800bb86:	430b      	orrs	r3, r1
 800bb88:	9904      	ldr	r1, [sp, #16]
 800bb8a:	430b      	orrs	r3, r1
 800bb8c:	d122      	bne.n	800bbd4 <_dtoa_r+0xabc>
 800bb8e:	2a00      	cmp	r2, #0
 800bb90:	ddee      	ble.n	800bb70 <_dtoa_r+0xa58>
 800bb92:	ee18 1a10 	vmov	r1, s16
 800bb96:	2201      	movs	r2, #1
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f000 faed 	bl	800c178 <__lshift>
 800bb9e:	4631      	mov	r1, r6
 800bba0:	ee08 0a10 	vmov	s16, r0
 800bba4:	f000 fb58 	bl	800c258 <__mcmp>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	dc03      	bgt.n	800bbb4 <_dtoa_r+0xa9c>
 800bbac:	d1e0      	bne.n	800bb70 <_dtoa_r+0xa58>
 800bbae:	f01a 0f01 	tst.w	sl, #1
 800bbb2:	d0dd      	beq.n	800bb70 <_dtoa_r+0xa58>
 800bbb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbb8:	d1d7      	bne.n	800bb6a <_dtoa_r+0xa52>
 800bbba:	2339      	movs	r3, #57	; 0x39
 800bbbc:	f88b 3000 	strb.w	r3, [fp]
 800bbc0:	462b      	mov	r3, r5
 800bbc2:	461d      	mov	r5, r3
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bbca:	2a39      	cmp	r2, #57	; 0x39
 800bbcc:	d071      	beq.n	800bcb2 <_dtoa_r+0xb9a>
 800bbce:	3201      	adds	r2, #1
 800bbd0:	701a      	strb	r2, [r3, #0]
 800bbd2:	e746      	b.n	800ba62 <_dtoa_r+0x94a>
 800bbd4:	2a00      	cmp	r2, #0
 800bbd6:	dd07      	ble.n	800bbe8 <_dtoa_r+0xad0>
 800bbd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbdc:	d0ed      	beq.n	800bbba <_dtoa_r+0xaa2>
 800bbde:	f10a 0301 	add.w	r3, sl, #1
 800bbe2:	f88b 3000 	strb.w	r3, [fp]
 800bbe6:	e73c      	b.n	800ba62 <_dtoa_r+0x94a>
 800bbe8:	9b05      	ldr	r3, [sp, #20]
 800bbea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bbee:	4599      	cmp	r9, r3
 800bbf0:	d047      	beq.n	800bc82 <_dtoa_r+0xb6a>
 800bbf2:	ee18 1a10 	vmov	r1, s16
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	220a      	movs	r2, #10
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f000 f90c 	bl	800be18 <__multadd>
 800bc00:	45b8      	cmp	r8, r7
 800bc02:	ee08 0a10 	vmov	s16, r0
 800bc06:	f04f 0300 	mov.w	r3, #0
 800bc0a:	f04f 020a 	mov.w	r2, #10
 800bc0e:	4641      	mov	r1, r8
 800bc10:	4620      	mov	r0, r4
 800bc12:	d106      	bne.n	800bc22 <_dtoa_r+0xb0a>
 800bc14:	f000 f900 	bl	800be18 <__multadd>
 800bc18:	4680      	mov	r8, r0
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	f109 0901 	add.w	r9, r9, #1
 800bc20:	e772      	b.n	800bb08 <_dtoa_r+0x9f0>
 800bc22:	f000 f8f9 	bl	800be18 <__multadd>
 800bc26:	4639      	mov	r1, r7
 800bc28:	4680      	mov	r8, r0
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	220a      	movs	r2, #10
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f000 f8f2 	bl	800be18 <__multadd>
 800bc34:	4607      	mov	r7, r0
 800bc36:	e7f1      	b.n	800bc1c <_dtoa_r+0xb04>
 800bc38:	9b03      	ldr	r3, [sp, #12]
 800bc3a:	9302      	str	r3, [sp, #8]
 800bc3c:	9d01      	ldr	r5, [sp, #4]
 800bc3e:	ee18 0a10 	vmov	r0, s16
 800bc42:	4631      	mov	r1, r6
 800bc44:	f7ff f9da 	bl	800affc <quorem>
 800bc48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc4c:	9b01      	ldr	r3, [sp, #4]
 800bc4e:	f805 ab01 	strb.w	sl, [r5], #1
 800bc52:	1aea      	subs	r2, r5, r3
 800bc54:	9b02      	ldr	r3, [sp, #8]
 800bc56:	4293      	cmp	r3, r2
 800bc58:	dd09      	ble.n	800bc6e <_dtoa_r+0xb56>
 800bc5a:	ee18 1a10 	vmov	r1, s16
 800bc5e:	2300      	movs	r3, #0
 800bc60:	220a      	movs	r2, #10
 800bc62:	4620      	mov	r0, r4
 800bc64:	f000 f8d8 	bl	800be18 <__multadd>
 800bc68:	ee08 0a10 	vmov	s16, r0
 800bc6c:	e7e7      	b.n	800bc3e <_dtoa_r+0xb26>
 800bc6e:	9b02      	ldr	r3, [sp, #8]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	bfc8      	it	gt
 800bc74:	461d      	movgt	r5, r3
 800bc76:	9b01      	ldr	r3, [sp, #4]
 800bc78:	bfd8      	it	le
 800bc7a:	2501      	movle	r5, #1
 800bc7c:	441d      	add	r5, r3
 800bc7e:	f04f 0800 	mov.w	r8, #0
 800bc82:	ee18 1a10 	vmov	r1, s16
 800bc86:	2201      	movs	r2, #1
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f000 fa75 	bl	800c178 <__lshift>
 800bc8e:	4631      	mov	r1, r6
 800bc90:	ee08 0a10 	vmov	s16, r0
 800bc94:	f000 fae0 	bl	800c258 <__mcmp>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	dc91      	bgt.n	800bbc0 <_dtoa_r+0xaa8>
 800bc9c:	d102      	bne.n	800bca4 <_dtoa_r+0xb8c>
 800bc9e:	f01a 0f01 	tst.w	sl, #1
 800bca2:	d18d      	bne.n	800bbc0 <_dtoa_r+0xaa8>
 800bca4:	462b      	mov	r3, r5
 800bca6:	461d      	mov	r5, r3
 800bca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcac:	2a30      	cmp	r2, #48	; 0x30
 800bcae:	d0fa      	beq.n	800bca6 <_dtoa_r+0xb8e>
 800bcb0:	e6d7      	b.n	800ba62 <_dtoa_r+0x94a>
 800bcb2:	9a01      	ldr	r2, [sp, #4]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d184      	bne.n	800bbc2 <_dtoa_r+0xaaa>
 800bcb8:	9b00      	ldr	r3, [sp, #0]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	2331      	movs	r3, #49	; 0x31
 800bcc0:	7013      	strb	r3, [r2, #0]
 800bcc2:	e6ce      	b.n	800ba62 <_dtoa_r+0x94a>
 800bcc4:	4b09      	ldr	r3, [pc, #36]	; (800bcec <_dtoa_r+0xbd4>)
 800bcc6:	f7ff ba95 	b.w	800b1f4 <_dtoa_r+0xdc>
 800bcca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	f47f aa6e 	bne.w	800b1ae <_dtoa_r+0x96>
 800bcd2:	4b07      	ldr	r3, [pc, #28]	; (800bcf0 <_dtoa_r+0xbd8>)
 800bcd4:	f7ff ba8e 	b.w	800b1f4 <_dtoa_r+0xdc>
 800bcd8:	9b02      	ldr	r3, [sp, #8]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	dcae      	bgt.n	800bc3c <_dtoa_r+0xb24>
 800bcde:	9b06      	ldr	r3, [sp, #24]
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	f73f aea8 	bgt.w	800ba36 <_dtoa_r+0x91e>
 800bce6:	e7a9      	b.n	800bc3c <_dtoa_r+0xb24>
 800bce8:	08010aa5 	.word	0x08010aa5
 800bcec:	08010c29 	.word	0x08010c29
 800bcf0:	08010a26 	.word	0x08010a26

0800bcf4 <_localeconv_r>:
 800bcf4:	4800      	ldr	r0, [pc, #0]	; (800bcf8 <_localeconv_r+0x4>)
 800bcf6:	4770      	bx	lr
 800bcf8:	20000168 	.word	0x20000168

0800bcfc <_lseek_r>:
 800bcfc:	b538      	push	{r3, r4, r5, lr}
 800bcfe:	4d07      	ldr	r5, [pc, #28]	; (800bd1c <_lseek_r+0x20>)
 800bd00:	4604      	mov	r4, r0
 800bd02:	4608      	mov	r0, r1
 800bd04:	4611      	mov	r1, r2
 800bd06:	2200      	movs	r2, #0
 800bd08:	602a      	str	r2, [r5, #0]
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	f7f7 fe48 	bl	80039a0 <_lseek>
 800bd10:	1c43      	adds	r3, r0, #1
 800bd12:	d102      	bne.n	800bd1a <_lseek_r+0x1e>
 800bd14:	682b      	ldr	r3, [r5, #0]
 800bd16:	b103      	cbz	r3, 800bd1a <_lseek_r+0x1e>
 800bd18:	6023      	str	r3, [r4, #0]
 800bd1a:	bd38      	pop	{r3, r4, r5, pc}
 800bd1c:	20012284 	.word	0x20012284

0800bd20 <memcpy>:
 800bd20:	440a      	add	r2, r1
 800bd22:	4291      	cmp	r1, r2
 800bd24:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd28:	d100      	bne.n	800bd2c <memcpy+0xc>
 800bd2a:	4770      	bx	lr
 800bd2c:	b510      	push	{r4, lr}
 800bd2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd36:	4291      	cmp	r1, r2
 800bd38:	d1f9      	bne.n	800bd2e <memcpy+0xe>
 800bd3a:	bd10      	pop	{r4, pc}

0800bd3c <__malloc_lock>:
 800bd3c:	4801      	ldr	r0, [pc, #4]	; (800bd44 <__malloc_lock+0x8>)
 800bd3e:	f001 bb87 	b.w	800d450 <__retarget_lock_acquire_recursive>
 800bd42:	bf00      	nop
 800bd44:	20012288 	.word	0x20012288

0800bd48 <__malloc_unlock>:
 800bd48:	4801      	ldr	r0, [pc, #4]	; (800bd50 <__malloc_unlock+0x8>)
 800bd4a:	f001 bb82 	b.w	800d452 <__retarget_lock_release_recursive>
 800bd4e:	bf00      	nop
 800bd50:	20012288 	.word	0x20012288

0800bd54 <_Balloc>:
 800bd54:	b570      	push	{r4, r5, r6, lr}
 800bd56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd58:	4604      	mov	r4, r0
 800bd5a:	460d      	mov	r5, r1
 800bd5c:	b976      	cbnz	r6, 800bd7c <_Balloc+0x28>
 800bd5e:	2010      	movs	r0, #16
 800bd60:	f7fe fb2e 	bl	800a3c0 <malloc>
 800bd64:	4602      	mov	r2, r0
 800bd66:	6260      	str	r0, [r4, #36]	; 0x24
 800bd68:	b920      	cbnz	r0, 800bd74 <_Balloc+0x20>
 800bd6a:	4b18      	ldr	r3, [pc, #96]	; (800bdcc <_Balloc+0x78>)
 800bd6c:	4818      	ldr	r0, [pc, #96]	; (800bdd0 <_Balloc+0x7c>)
 800bd6e:	2166      	movs	r1, #102	; 0x66
 800bd70:	f001 f986 	bl	800d080 <__assert_func>
 800bd74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd78:	6006      	str	r6, [r0, #0]
 800bd7a:	60c6      	str	r6, [r0, #12]
 800bd7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bd7e:	68f3      	ldr	r3, [r6, #12]
 800bd80:	b183      	cbz	r3, 800bda4 <_Balloc+0x50>
 800bd82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd8a:	b9b8      	cbnz	r0, 800bdbc <_Balloc+0x68>
 800bd8c:	2101      	movs	r1, #1
 800bd8e:	fa01 f605 	lsl.w	r6, r1, r5
 800bd92:	1d72      	adds	r2, r6, #5
 800bd94:	0092      	lsls	r2, r2, #2
 800bd96:	4620      	mov	r0, r4
 800bd98:	f000 fb60 	bl	800c45c <_calloc_r>
 800bd9c:	b160      	cbz	r0, 800bdb8 <_Balloc+0x64>
 800bd9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bda2:	e00e      	b.n	800bdc2 <_Balloc+0x6e>
 800bda4:	2221      	movs	r2, #33	; 0x21
 800bda6:	2104      	movs	r1, #4
 800bda8:	4620      	mov	r0, r4
 800bdaa:	f000 fb57 	bl	800c45c <_calloc_r>
 800bdae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdb0:	60f0      	str	r0, [r6, #12]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1e4      	bne.n	800bd82 <_Balloc+0x2e>
 800bdb8:	2000      	movs	r0, #0
 800bdba:	bd70      	pop	{r4, r5, r6, pc}
 800bdbc:	6802      	ldr	r2, [r0, #0]
 800bdbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bdc8:	e7f7      	b.n	800bdba <_Balloc+0x66>
 800bdca:	bf00      	nop
 800bdcc:	08010a33 	.word	0x08010a33
 800bdd0:	08010ab6 	.word	0x08010ab6

0800bdd4 <_Bfree>:
 800bdd4:	b570      	push	{r4, r5, r6, lr}
 800bdd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bdd8:	4605      	mov	r5, r0
 800bdda:	460c      	mov	r4, r1
 800bddc:	b976      	cbnz	r6, 800bdfc <_Bfree+0x28>
 800bdde:	2010      	movs	r0, #16
 800bde0:	f7fe faee 	bl	800a3c0 <malloc>
 800bde4:	4602      	mov	r2, r0
 800bde6:	6268      	str	r0, [r5, #36]	; 0x24
 800bde8:	b920      	cbnz	r0, 800bdf4 <_Bfree+0x20>
 800bdea:	4b09      	ldr	r3, [pc, #36]	; (800be10 <_Bfree+0x3c>)
 800bdec:	4809      	ldr	r0, [pc, #36]	; (800be14 <_Bfree+0x40>)
 800bdee:	218a      	movs	r1, #138	; 0x8a
 800bdf0:	f001 f946 	bl	800d080 <__assert_func>
 800bdf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdf8:	6006      	str	r6, [r0, #0]
 800bdfa:	60c6      	str	r6, [r0, #12]
 800bdfc:	b13c      	cbz	r4, 800be0e <_Bfree+0x3a>
 800bdfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800be00:	6862      	ldr	r2, [r4, #4]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be08:	6021      	str	r1, [r4, #0]
 800be0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be0e:	bd70      	pop	{r4, r5, r6, pc}
 800be10:	08010a33 	.word	0x08010a33
 800be14:	08010ab6 	.word	0x08010ab6

0800be18 <__multadd>:
 800be18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be1c:	690d      	ldr	r5, [r1, #16]
 800be1e:	4607      	mov	r7, r0
 800be20:	460c      	mov	r4, r1
 800be22:	461e      	mov	r6, r3
 800be24:	f101 0c14 	add.w	ip, r1, #20
 800be28:	2000      	movs	r0, #0
 800be2a:	f8dc 3000 	ldr.w	r3, [ip]
 800be2e:	b299      	uxth	r1, r3
 800be30:	fb02 6101 	mla	r1, r2, r1, r6
 800be34:	0c1e      	lsrs	r6, r3, #16
 800be36:	0c0b      	lsrs	r3, r1, #16
 800be38:	fb02 3306 	mla	r3, r2, r6, r3
 800be3c:	b289      	uxth	r1, r1
 800be3e:	3001      	adds	r0, #1
 800be40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be44:	4285      	cmp	r5, r0
 800be46:	f84c 1b04 	str.w	r1, [ip], #4
 800be4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be4e:	dcec      	bgt.n	800be2a <__multadd+0x12>
 800be50:	b30e      	cbz	r6, 800be96 <__multadd+0x7e>
 800be52:	68a3      	ldr	r3, [r4, #8]
 800be54:	42ab      	cmp	r3, r5
 800be56:	dc19      	bgt.n	800be8c <__multadd+0x74>
 800be58:	6861      	ldr	r1, [r4, #4]
 800be5a:	4638      	mov	r0, r7
 800be5c:	3101      	adds	r1, #1
 800be5e:	f7ff ff79 	bl	800bd54 <_Balloc>
 800be62:	4680      	mov	r8, r0
 800be64:	b928      	cbnz	r0, 800be72 <__multadd+0x5a>
 800be66:	4602      	mov	r2, r0
 800be68:	4b0c      	ldr	r3, [pc, #48]	; (800be9c <__multadd+0x84>)
 800be6a:	480d      	ldr	r0, [pc, #52]	; (800bea0 <__multadd+0x88>)
 800be6c:	21b5      	movs	r1, #181	; 0xb5
 800be6e:	f001 f907 	bl	800d080 <__assert_func>
 800be72:	6922      	ldr	r2, [r4, #16]
 800be74:	3202      	adds	r2, #2
 800be76:	f104 010c 	add.w	r1, r4, #12
 800be7a:	0092      	lsls	r2, r2, #2
 800be7c:	300c      	adds	r0, #12
 800be7e:	f7ff ff4f 	bl	800bd20 <memcpy>
 800be82:	4621      	mov	r1, r4
 800be84:	4638      	mov	r0, r7
 800be86:	f7ff ffa5 	bl	800bdd4 <_Bfree>
 800be8a:	4644      	mov	r4, r8
 800be8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be90:	3501      	adds	r5, #1
 800be92:	615e      	str	r6, [r3, #20]
 800be94:	6125      	str	r5, [r4, #16]
 800be96:	4620      	mov	r0, r4
 800be98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be9c:	08010aa5 	.word	0x08010aa5
 800bea0:	08010ab6 	.word	0x08010ab6

0800bea4 <__hi0bits>:
 800bea4:	0c03      	lsrs	r3, r0, #16
 800bea6:	041b      	lsls	r3, r3, #16
 800bea8:	b9d3      	cbnz	r3, 800bee0 <__hi0bits+0x3c>
 800beaa:	0400      	lsls	r0, r0, #16
 800beac:	2310      	movs	r3, #16
 800beae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800beb2:	bf04      	itt	eq
 800beb4:	0200      	lsleq	r0, r0, #8
 800beb6:	3308      	addeq	r3, #8
 800beb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bebc:	bf04      	itt	eq
 800bebe:	0100      	lsleq	r0, r0, #4
 800bec0:	3304      	addeq	r3, #4
 800bec2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bec6:	bf04      	itt	eq
 800bec8:	0080      	lsleq	r0, r0, #2
 800beca:	3302      	addeq	r3, #2
 800becc:	2800      	cmp	r0, #0
 800bece:	db05      	blt.n	800bedc <__hi0bits+0x38>
 800bed0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bed4:	f103 0301 	add.w	r3, r3, #1
 800bed8:	bf08      	it	eq
 800beda:	2320      	moveq	r3, #32
 800bedc:	4618      	mov	r0, r3
 800bede:	4770      	bx	lr
 800bee0:	2300      	movs	r3, #0
 800bee2:	e7e4      	b.n	800beae <__hi0bits+0xa>

0800bee4 <__lo0bits>:
 800bee4:	6803      	ldr	r3, [r0, #0]
 800bee6:	f013 0207 	ands.w	r2, r3, #7
 800beea:	4601      	mov	r1, r0
 800beec:	d00b      	beq.n	800bf06 <__lo0bits+0x22>
 800beee:	07da      	lsls	r2, r3, #31
 800bef0:	d423      	bmi.n	800bf3a <__lo0bits+0x56>
 800bef2:	0798      	lsls	r0, r3, #30
 800bef4:	bf49      	itett	mi
 800bef6:	085b      	lsrmi	r3, r3, #1
 800bef8:	089b      	lsrpl	r3, r3, #2
 800befa:	2001      	movmi	r0, #1
 800befc:	600b      	strmi	r3, [r1, #0]
 800befe:	bf5c      	itt	pl
 800bf00:	600b      	strpl	r3, [r1, #0]
 800bf02:	2002      	movpl	r0, #2
 800bf04:	4770      	bx	lr
 800bf06:	b298      	uxth	r0, r3
 800bf08:	b9a8      	cbnz	r0, 800bf36 <__lo0bits+0x52>
 800bf0a:	0c1b      	lsrs	r3, r3, #16
 800bf0c:	2010      	movs	r0, #16
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	b90a      	cbnz	r2, 800bf16 <__lo0bits+0x32>
 800bf12:	3008      	adds	r0, #8
 800bf14:	0a1b      	lsrs	r3, r3, #8
 800bf16:	071a      	lsls	r2, r3, #28
 800bf18:	bf04      	itt	eq
 800bf1a:	091b      	lsreq	r3, r3, #4
 800bf1c:	3004      	addeq	r0, #4
 800bf1e:	079a      	lsls	r2, r3, #30
 800bf20:	bf04      	itt	eq
 800bf22:	089b      	lsreq	r3, r3, #2
 800bf24:	3002      	addeq	r0, #2
 800bf26:	07da      	lsls	r2, r3, #31
 800bf28:	d403      	bmi.n	800bf32 <__lo0bits+0x4e>
 800bf2a:	085b      	lsrs	r3, r3, #1
 800bf2c:	f100 0001 	add.w	r0, r0, #1
 800bf30:	d005      	beq.n	800bf3e <__lo0bits+0x5a>
 800bf32:	600b      	str	r3, [r1, #0]
 800bf34:	4770      	bx	lr
 800bf36:	4610      	mov	r0, r2
 800bf38:	e7e9      	b.n	800bf0e <__lo0bits+0x2a>
 800bf3a:	2000      	movs	r0, #0
 800bf3c:	4770      	bx	lr
 800bf3e:	2020      	movs	r0, #32
 800bf40:	4770      	bx	lr
	...

0800bf44 <__i2b>:
 800bf44:	b510      	push	{r4, lr}
 800bf46:	460c      	mov	r4, r1
 800bf48:	2101      	movs	r1, #1
 800bf4a:	f7ff ff03 	bl	800bd54 <_Balloc>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	b928      	cbnz	r0, 800bf5e <__i2b+0x1a>
 800bf52:	4b05      	ldr	r3, [pc, #20]	; (800bf68 <__i2b+0x24>)
 800bf54:	4805      	ldr	r0, [pc, #20]	; (800bf6c <__i2b+0x28>)
 800bf56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bf5a:	f001 f891 	bl	800d080 <__assert_func>
 800bf5e:	2301      	movs	r3, #1
 800bf60:	6144      	str	r4, [r0, #20]
 800bf62:	6103      	str	r3, [r0, #16]
 800bf64:	bd10      	pop	{r4, pc}
 800bf66:	bf00      	nop
 800bf68:	08010aa5 	.word	0x08010aa5
 800bf6c:	08010ab6 	.word	0x08010ab6

0800bf70 <__multiply>:
 800bf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf74:	4691      	mov	r9, r2
 800bf76:	690a      	ldr	r2, [r1, #16]
 800bf78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	bfb8      	it	lt
 800bf80:	460b      	movlt	r3, r1
 800bf82:	460c      	mov	r4, r1
 800bf84:	bfbc      	itt	lt
 800bf86:	464c      	movlt	r4, r9
 800bf88:	4699      	movlt	r9, r3
 800bf8a:	6927      	ldr	r7, [r4, #16]
 800bf8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf90:	68a3      	ldr	r3, [r4, #8]
 800bf92:	6861      	ldr	r1, [r4, #4]
 800bf94:	eb07 060a 	add.w	r6, r7, sl
 800bf98:	42b3      	cmp	r3, r6
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	bfb8      	it	lt
 800bf9e:	3101      	addlt	r1, #1
 800bfa0:	f7ff fed8 	bl	800bd54 <_Balloc>
 800bfa4:	b930      	cbnz	r0, 800bfb4 <__multiply+0x44>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	4b44      	ldr	r3, [pc, #272]	; (800c0bc <__multiply+0x14c>)
 800bfaa:	4845      	ldr	r0, [pc, #276]	; (800c0c0 <__multiply+0x150>)
 800bfac:	f240 115d 	movw	r1, #349	; 0x15d
 800bfb0:	f001 f866 	bl	800d080 <__assert_func>
 800bfb4:	f100 0514 	add.w	r5, r0, #20
 800bfb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bfbc:	462b      	mov	r3, r5
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	4543      	cmp	r3, r8
 800bfc2:	d321      	bcc.n	800c008 <__multiply+0x98>
 800bfc4:	f104 0314 	add.w	r3, r4, #20
 800bfc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bfcc:	f109 0314 	add.w	r3, r9, #20
 800bfd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bfd4:	9202      	str	r2, [sp, #8]
 800bfd6:	1b3a      	subs	r2, r7, r4
 800bfd8:	3a15      	subs	r2, #21
 800bfda:	f022 0203 	bic.w	r2, r2, #3
 800bfde:	3204      	adds	r2, #4
 800bfe0:	f104 0115 	add.w	r1, r4, #21
 800bfe4:	428f      	cmp	r7, r1
 800bfe6:	bf38      	it	cc
 800bfe8:	2204      	movcc	r2, #4
 800bfea:	9201      	str	r2, [sp, #4]
 800bfec:	9a02      	ldr	r2, [sp, #8]
 800bfee:	9303      	str	r3, [sp, #12]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d80c      	bhi.n	800c00e <__multiply+0x9e>
 800bff4:	2e00      	cmp	r6, #0
 800bff6:	dd03      	ble.n	800c000 <__multiply+0x90>
 800bff8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d05a      	beq.n	800c0b6 <__multiply+0x146>
 800c000:	6106      	str	r6, [r0, #16]
 800c002:	b005      	add	sp, #20
 800c004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c008:	f843 2b04 	str.w	r2, [r3], #4
 800c00c:	e7d8      	b.n	800bfc0 <__multiply+0x50>
 800c00e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c012:	f1ba 0f00 	cmp.w	sl, #0
 800c016:	d024      	beq.n	800c062 <__multiply+0xf2>
 800c018:	f104 0e14 	add.w	lr, r4, #20
 800c01c:	46a9      	mov	r9, r5
 800c01e:	f04f 0c00 	mov.w	ip, #0
 800c022:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c026:	f8d9 1000 	ldr.w	r1, [r9]
 800c02a:	fa1f fb82 	uxth.w	fp, r2
 800c02e:	b289      	uxth	r1, r1
 800c030:	fb0a 110b 	mla	r1, sl, fp, r1
 800c034:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c038:	f8d9 2000 	ldr.w	r2, [r9]
 800c03c:	4461      	add	r1, ip
 800c03e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c042:	fb0a c20b 	mla	r2, sl, fp, ip
 800c046:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c04a:	b289      	uxth	r1, r1
 800c04c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c050:	4577      	cmp	r7, lr
 800c052:	f849 1b04 	str.w	r1, [r9], #4
 800c056:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c05a:	d8e2      	bhi.n	800c022 <__multiply+0xb2>
 800c05c:	9a01      	ldr	r2, [sp, #4]
 800c05e:	f845 c002 	str.w	ip, [r5, r2]
 800c062:	9a03      	ldr	r2, [sp, #12]
 800c064:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c068:	3304      	adds	r3, #4
 800c06a:	f1b9 0f00 	cmp.w	r9, #0
 800c06e:	d020      	beq.n	800c0b2 <__multiply+0x142>
 800c070:	6829      	ldr	r1, [r5, #0]
 800c072:	f104 0c14 	add.w	ip, r4, #20
 800c076:	46ae      	mov	lr, r5
 800c078:	f04f 0a00 	mov.w	sl, #0
 800c07c:	f8bc b000 	ldrh.w	fp, [ip]
 800c080:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c084:	fb09 220b 	mla	r2, r9, fp, r2
 800c088:	4492      	add	sl, r2
 800c08a:	b289      	uxth	r1, r1
 800c08c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c090:	f84e 1b04 	str.w	r1, [lr], #4
 800c094:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c098:	f8be 1000 	ldrh.w	r1, [lr]
 800c09c:	0c12      	lsrs	r2, r2, #16
 800c09e:	fb09 1102 	mla	r1, r9, r2, r1
 800c0a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c0a6:	4567      	cmp	r7, ip
 800c0a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c0ac:	d8e6      	bhi.n	800c07c <__multiply+0x10c>
 800c0ae:	9a01      	ldr	r2, [sp, #4]
 800c0b0:	50a9      	str	r1, [r5, r2]
 800c0b2:	3504      	adds	r5, #4
 800c0b4:	e79a      	b.n	800bfec <__multiply+0x7c>
 800c0b6:	3e01      	subs	r6, #1
 800c0b8:	e79c      	b.n	800bff4 <__multiply+0x84>
 800c0ba:	bf00      	nop
 800c0bc:	08010aa5 	.word	0x08010aa5
 800c0c0:	08010ab6 	.word	0x08010ab6

0800c0c4 <__pow5mult>:
 800c0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0c8:	4615      	mov	r5, r2
 800c0ca:	f012 0203 	ands.w	r2, r2, #3
 800c0ce:	4606      	mov	r6, r0
 800c0d0:	460f      	mov	r7, r1
 800c0d2:	d007      	beq.n	800c0e4 <__pow5mult+0x20>
 800c0d4:	4c25      	ldr	r4, [pc, #148]	; (800c16c <__pow5mult+0xa8>)
 800c0d6:	3a01      	subs	r2, #1
 800c0d8:	2300      	movs	r3, #0
 800c0da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0de:	f7ff fe9b 	bl	800be18 <__multadd>
 800c0e2:	4607      	mov	r7, r0
 800c0e4:	10ad      	asrs	r5, r5, #2
 800c0e6:	d03d      	beq.n	800c164 <__pow5mult+0xa0>
 800c0e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c0ea:	b97c      	cbnz	r4, 800c10c <__pow5mult+0x48>
 800c0ec:	2010      	movs	r0, #16
 800c0ee:	f7fe f967 	bl	800a3c0 <malloc>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	6270      	str	r0, [r6, #36]	; 0x24
 800c0f6:	b928      	cbnz	r0, 800c104 <__pow5mult+0x40>
 800c0f8:	4b1d      	ldr	r3, [pc, #116]	; (800c170 <__pow5mult+0xac>)
 800c0fa:	481e      	ldr	r0, [pc, #120]	; (800c174 <__pow5mult+0xb0>)
 800c0fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c100:	f000 ffbe 	bl	800d080 <__assert_func>
 800c104:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c108:	6004      	str	r4, [r0, #0]
 800c10a:	60c4      	str	r4, [r0, #12]
 800c10c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c110:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c114:	b94c      	cbnz	r4, 800c12a <__pow5mult+0x66>
 800c116:	f240 2171 	movw	r1, #625	; 0x271
 800c11a:	4630      	mov	r0, r6
 800c11c:	f7ff ff12 	bl	800bf44 <__i2b>
 800c120:	2300      	movs	r3, #0
 800c122:	f8c8 0008 	str.w	r0, [r8, #8]
 800c126:	4604      	mov	r4, r0
 800c128:	6003      	str	r3, [r0, #0]
 800c12a:	f04f 0900 	mov.w	r9, #0
 800c12e:	07eb      	lsls	r3, r5, #31
 800c130:	d50a      	bpl.n	800c148 <__pow5mult+0x84>
 800c132:	4639      	mov	r1, r7
 800c134:	4622      	mov	r2, r4
 800c136:	4630      	mov	r0, r6
 800c138:	f7ff ff1a 	bl	800bf70 <__multiply>
 800c13c:	4639      	mov	r1, r7
 800c13e:	4680      	mov	r8, r0
 800c140:	4630      	mov	r0, r6
 800c142:	f7ff fe47 	bl	800bdd4 <_Bfree>
 800c146:	4647      	mov	r7, r8
 800c148:	106d      	asrs	r5, r5, #1
 800c14a:	d00b      	beq.n	800c164 <__pow5mult+0xa0>
 800c14c:	6820      	ldr	r0, [r4, #0]
 800c14e:	b938      	cbnz	r0, 800c160 <__pow5mult+0x9c>
 800c150:	4622      	mov	r2, r4
 800c152:	4621      	mov	r1, r4
 800c154:	4630      	mov	r0, r6
 800c156:	f7ff ff0b 	bl	800bf70 <__multiply>
 800c15a:	6020      	str	r0, [r4, #0]
 800c15c:	f8c0 9000 	str.w	r9, [r0]
 800c160:	4604      	mov	r4, r0
 800c162:	e7e4      	b.n	800c12e <__pow5mult+0x6a>
 800c164:	4638      	mov	r0, r7
 800c166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c16a:	bf00      	nop
 800c16c:	08010c08 	.word	0x08010c08
 800c170:	08010a33 	.word	0x08010a33
 800c174:	08010ab6 	.word	0x08010ab6

0800c178 <__lshift>:
 800c178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c17c:	460c      	mov	r4, r1
 800c17e:	6849      	ldr	r1, [r1, #4]
 800c180:	6923      	ldr	r3, [r4, #16]
 800c182:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c186:	68a3      	ldr	r3, [r4, #8]
 800c188:	4607      	mov	r7, r0
 800c18a:	4691      	mov	r9, r2
 800c18c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c190:	f108 0601 	add.w	r6, r8, #1
 800c194:	42b3      	cmp	r3, r6
 800c196:	db0b      	blt.n	800c1b0 <__lshift+0x38>
 800c198:	4638      	mov	r0, r7
 800c19a:	f7ff fddb 	bl	800bd54 <_Balloc>
 800c19e:	4605      	mov	r5, r0
 800c1a0:	b948      	cbnz	r0, 800c1b6 <__lshift+0x3e>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	4b2a      	ldr	r3, [pc, #168]	; (800c250 <__lshift+0xd8>)
 800c1a6:	482b      	ldr	r0, [pc, #172]	; (800c254 <__lshift+0xdc>)
 800c1a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c1ac:	f000 ff68 	bl	800d080 <__assert_func>
 800c1b0:	3101      	adds	r1, #1
 800c1b2:	005b      	lsls	r3, r3, #1
 800c1b4:	e7ee      	b.n	800c194 <__lshift+0x1c>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	f100 0114 	add.w	r1, r0, #20
 800c1bc:	f100 0210 	add.w	r2, r0, #16
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	4553      	cmp	r3, sl
 800c1c4:	db37      	blt.n	800c236 <__lshift+0xbe>
 800c1c6:	6920      	ldr	r0, [r4, #16]
 800c1c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1cc:	f104 0314 	add.w	r3, r4, #20
 800c1d0:	f019 091f 	ands.w	r9, r9, #31
 800c1d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c1dc:	d02f      	beq.n	800c23e <__lshift+0xc6>
 800c1de:	f1c9 0e20 	rsb	lr, r9, #32
 800c1e2:	468a      	mov	sl, r1
 800c1e4:	f04f 0c00 	mov.w	ip, #0
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	fa02 f209 	lsl.w	r2, r2, r9
 800c1ee:	ea42 020c 	orr.w	r2, r2, ip
 800c1f2:	f84a 2b04 	str.w	r2, [sl], #4
 800c1f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1fa:	4298      	cmp	r0, r3
 800c1fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c200:	d8f2      	bhi.n	800c1e8 <__lshift+0x70>
 800c202:	1b03      	subs	r3, r0, r4
 800c204:	3b15      	subs	r3, #21
 800c206:	f023 0303 	bic.w	r3, r3, #3
 800c20a:	3304      	adds	r3, #4
 800c20c:	f104 0215 	add.w	r2, r4, #21
 800c210:	4290      	cmp	r0, r2
 800c212:	bf38      	it	cc
 800c214:	2304      	movcc	r3, #4
 800c216:	f841 c003 	str.w	ip, [r1, r3]
 800c21a:	f1bc 0f00 	cmp.w	ip, #0
 800c21e:	d001      	beq.n	800c224 <__lshift+0xac>
 800c220:	f108 0602 	add.w	r6, r8, #2
 800c224:	3e01      	subs	r6, #1
 800c226:	4638      	mov	r0, r7
 800c228:	612e      	str	r6, [r5, #16]
 800c22a:	4621      	mov	r1, r4
 800c22c:	f7ff fdd2 	bl	800bdd4 <_Bfree>
 800c230:	4628      	mov	r0, r5
 800c232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c236:	f842 0f04 	str.w	r0, [r2, #4]!
 800c23a:	3301      	adds	r3, #1
 800c23c:	e7c1      	b.n	800c1c2 <__lshift+0x4a>
 800c23e:	3904      	subs	r1, #4
 800c240:	f853 2b04 	ldr.w	r2, [r3], #4
 800c244:	f841 2f04 	str.w	r2, [r1, #4]!
 800c248:	4298      	cmp	r0, r3
 800c24a:	d8f9      	bhi.n	800c240 <__lshift+0xc8>
 800c24c:	e7ea      	b.n	800c224 <__lshift+0xac>
 800c24e:	bf00      	nop
 800c250:	08010aa5 	.word	0x08010aa5
 800c254:	08010ab6 	.word	0x08010ab6

0800c258 <__mcmp>:
 800c258:	b530      	push	{r4, r5, lr}
 800c25a:	6902      	ldr	r2, [r0, #16]
 800c25c:	690c      	ldr	r4, [r1, #16]
 800c25e:	1b12      	subs	r2, r2, r4
 800c260:	d10e      	bne.n	800c280 <__mcmp+0x28>
 800c262:	f100 0314 	add.w	r3, r0, #20
 800c266:	3114      	adds	r1, #20
 800c268:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c26c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c270:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c274:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c278:	42a5      	cmp	r5, r4
 800c27a:	d003      	beq.n	800c284 <__mcmp+0x2c>
 800c27c:	d305      	bcc.n	800c28a <__mcmp+0x32>
 800c27e:	2201      	movs	r2, #1
 800c280:	4610      	mov	r0, r2
 800c282:	bd30      	pop	{r4, r5, pc}
 800c284:	4283      	cmp	r3, r0
 800c286:	d3f3      	bcc.n	800c270 <__mcmp+0x18>
 800c288:	e7fa      	b.n	800c280 <__mcmp+0x28>
 800c28a:	f04f 32ff 	mov.w	r2, #4294967295
 800c28e:	e7f7      	b.n	800c280 <__mcmp+0x28>

0800c290 <__mdiff>:
 800c290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c294:	460c      	mov	r4, r1
 800c296:	4606      	mov	r6, r0
 800c298:	4611      	mov	r1, r2
 800c29a:	4620      	mov	r0, r4
 800c29c:	4690      	mov	r8, r2
 800c29e:	f7ff ffdb 	bl	800c258 <__mcmp>
 800c2a2:	1e05      	subs	r5, r0, #0
 800c2a4:	d110      	bne.n	800c2c8 <__mdiff+0x38>
 800c2a6:	4629      	mov	r1, r5
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f7ff fd53 	bl	800bd54 <_Balloc>
 800c2ae:	b930      	cbnz	r0, 800c2be <__mdiff+0x2e>
 800c2b0:	4b3a      	ldr	r3, [pc, #232]	; (800c39c <__mdiff+0x10c>)
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	f240 2132 	movw	r1, #562	; 0x232
 800c2b8:	4839      	ldr	r0, [pc, #228]	; (800c3a0 <__mdiff+0x110>)
 800c2ba:	f000 fee1 	bl	800d080 <__assert_func>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c2c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c8:	bfa4      	itt	ge
 800c2ca:	4643      	movge	r3, r8
 800c2cc:	46a0      	movge	r8, r4
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c2d4:	bfa6      	itte	ge
 800c2d6:	461c      	movge	r4, r3
 800c2d8:	2500      	movge	r5, #0
 800c2da:	2501      	movlt	r5, #1
 800c2dc:	f7ff fd3a 	bl	800bd54 <_Balloc>
 800c2e0:	b920      	cbnz	r0, 800c2ec <__mdiff+0x5c>
 800c2e2:	4b2e      	ldr	r3, [pc, #184]	; (800c39c <__mdiff+0x10c>)
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c2ea:	e7e5      	b.n	800c2b8 <__mdiff+0x28>
 800c2ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c2f0:	6926      	ldr	r6, [r4, #16]
 800c2f2:	60c5      	str	r5, [r0, #12]
 800c2f4:	f104 0914 	add.w	r9, r4, #20
 800c2f8:	f108 0514 	add.w	r5, r8, #20
 800c2fc:	f100 0e14 	add.w	lr, r0, #20
 800c300:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c304:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c308:	f108 0210 	add.w	r2, r8, #16
 800c30c:	46f2      	mov	sl, lr
 800c30e:	2100      	movs	r1, #0
 800c310:	f859 3b04 	ldr.w	r3, [r9], #4
 800c314:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c318:	fa1f f883 	uxth.w	r8, r3
 800c31c:	fa11 f18b 	uxtah	r1, r1, fp
 800c320:	0c1b      	lsrs	r3, r3, #16
 800c322:	eba1 0808 	sub.w	r8, r1, r8
 800c326:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c32a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c32e:	fa1f f888 	uxth.w	r8, r8
 800c332:	1419      	asrs	r1, r3, #16
 800c334:	454e      	cmp	r6, r9
 800c336:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c33a:	f84a 3b04 	str.w	r3, [sl], #4
 800c33e:	d8e7      	bhi.n	800c310 <__mdiff+0x80>
 800c340:	1b33      	subs	r3, r6, r4
 800c342:	3b15      	subs	r3, #21
 800c344:	f023 0303 	bic.w	r3, r3, #3
 800c348:	3304      	adds	r3, #4
 800c34a:	3415      	adds	r4, #21
 800c34c:	42a6      	cmp	r6, r4
 800c34e:	bf38      	it	cc
 800c350:	2304      	movcc	r3, #4
 800c352:	441d      	add	r5, r3
 800c354:	4473      	add	r3, lr
 800c356:	469e      	mov	lr, r3
 800c358:	462e      	mov	r6, r5
 800c35a:	4566      	cmp	r6, ip
 800c35c:	d30e      	bcc.n	800c37c <__mdiff+0xec>
 800c35e:	f10c 0203 	add.w	r2, ip, #3
 800c362:	1b52      	subs	r2, r2, r5
 800c364:	f022 0203 	bic.w	r2, r2, #3
 800c368:	3d03      	subs	r5, #3
 800c36a:	45ac      	cmp	ip, r5
 800c36c:	bf38      	it	cc
 800c36e:	2200      	movcc	r2, #0
 800c370:	441a      	add	r2, r3
 800c372:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c376:	b17b      	cbz	r3, 800c398 <__mdiff+0x108>
 800c378:	6107      	str	r7, [r0, #16]
 800c37a:	e7a3      	b.n	800c2c4 <__mdiff+0x34>
 800c37c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c380:	fa11 f288 	uxtah	r2, r1, r8
 800c384:	1414      	asrs	r4, r2, #16
 800c386:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c38a:	b292      	uxth	r2, r2
 800c38c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c390:	f84e 2b04 	str.w	r2, [lr], #4
 800c394:	1421      	asrs	r1, r4, #16
 800c396:	e7e0      	b.n	800c35a <__mdiff+0xca>
 800c398:	3f01      	subs	r7, #1
 800c39a:	e7ea      	b.n	800c372 <__mdiff+0xe2>
 800c39c:	08010aa5 	.word	0x08010aa5
 800c3a0:	08010ab6 	.word	0x08010ab6

0800c3a4 <__d2b>:
 800c3a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3a8:	4689      	mov	r9, r1
 800c3aa:	2101      	movs	r1, #1
 800c3ac:	ec57 6b10 	vmov	r6, r7, d0
 800c3b0:	4690      	mov	r8, r2
 800c3b2:	f7ff fccf 	bl	800bd54 <_Balloc>
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	b930      	cbnz	r0, 800c3c8 <__d2b+0x24>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	4b25      	ldr	r3, [pc, #148]	; (800c454 <__d2b+0xb0>)
 800c3be:	4826      	ldr	r0, [pc, #152]	; (800c458 <__d2b+0xb4>)
 800c3c0:	f240 310a 	movw	r1, #778	; 0x30a
 800c3c4:	f000 fe5c 	bl	800d080 <__assert_func>
 800c3c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c3cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c3d0:	bb35      	cbnz	r5, 800c420 <__d2b+0x7c>
 800c3d2:	2e00      	cmp	r6, #0
 800c3d4:	9301      	str	r3, [sp, #4]
 800c3d6:	d028      	beq.n	800c42a <__d2b+0x86>
 800c3d8:	4668      	mov	r0, sp
 800c3da:	9600      	str	r6, [sp, #0]
 800c3dc:	f7ff fd82 	bl	800bee4 <__lo0bits>
 800c3e0:	9900      	ldr	r1, [sp, #0]
 800c3e2:	b300      	cbz	r0, 800c426 <__d2b+0x82>
 800c3e4:	9a01      	ldr	r2, [sp, #4]
 800c3e6:	f1c0 0320 	rsb	r3, r0, #32
 800c3ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ee:	430b      	orrs	r3, r1
 800c3f0:	40c2      	lsrs	r2, r0
 800c3f2:	6163      	str	r3, [r4, #20]
 800c3f4:	9201      	str	r2, [sp, #4]
 800c3f6:	9b01      	ldr	r3, [sp, #4]
 800c3f8:	61a3      	str	r3, [r4, #24]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	bf14      	ite	ne
 800c3fe:	2202      	movne	r2, #2
 800c400:	2201      	moveq	r2, #1
 800c402:	6122      	str	r2, [r4, #16]
 800c404:	b1d5      	cbz	r5, 800c43c <__d2b+0x98>
 800c406:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c40a:	4405      	add	r5, r0
 800c40c:	f8c9 5000 	str.w	r5, [r9]
 800c410:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c414:	f8c8 0000 	str.w	r0, [r8]
 800c418:	4620      	mov	r0, r4
 800c41a:	b003      	add	sp, #12
 800c41c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c424:	e7d5      	b.n	800c3d2 <__d2b+0x2e>
 800c426:	6161      	str	r1, [r4, #20]
 800c428:	e7e5      	b.n	800c3f6 <__d2b+0x52>
 800c42a:	a801      	add	r0, sp, #4
 800c42c:	f7ff fd5a 	bl	800bee4 <__lo0bits>
 800c430:	9b01      	ldr	r3, [sp, #4]
 800c432:	6163      	str	r3, [r4, #20]
 800c434:	2201      	movs	r2, #1
 800c436:	6122      	str	r2, [r4, #16]
 800c438:	3020      	adds	r0, #32
 800c43a:	e7e3      	b.n	800c404 <__d2b+0x60>
 800c43c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c440:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c444:	f8c9 0000 	str.w	r0, [r9]
 800c448:	6918      	ldr	r0, [r3, #16]
 800c44a:	f7ff fd2b 	bl	800bea4 <__hi0bits>
 800c44e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c452:	e7df      	b.n	800c414 <__d2b+0x70>
 800c454:	08010aa5 	.word	0x08010aa5
 800c458:	08010ab6 	.word	0x08010ab6

0800c45c <_calloc_r>:
 800c45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c45e:	fba1 2402 	umull	r2, r4, r1, r2
 800c462:	b94c      	cbnz	r4, 800c478 <_calloc_r+0x1c>
 800c464:	4611      	mov	r1, r2
 800c466:	9201      	str	r2, [sp, #4]
 800c468:	f7fe f826 	bl	800a4b8 <_malloc_r>
 800c46c:	9a01      	ldr	r2, [sp, #4]
 800c46e:	4605      	mov	r5, r0
 800c470:	b930      	cbnz	r0, 800c480 <_calloc_r+0x24>
 800c472:	4628      	mov	r0, r5
 800c474:	b003      	add	sp, #12
 800c476:	bd30      	pop	{r4, r5, pc}
 800c478:	220c      	movs	r2, #12
 800c47a:	6002      	str	r2, [r0, #0]
 800c47c:	2500      	movs	r5, #0
 800c47e:	e7f8      	b.n	800c472 <_calloc_r+0x16>
 800c480:	4621      	mov	r1, r4
 800c482:	f7fd ffa5 	bl	800a3d0 <memset>
 800c486:	e7f4      	b.n	800c472 <_calloc_r+0x16>

0800c488 <__ssputs_r>:
 800c488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c48c:	688e      	ldr	r6, [r1, #8]
 800c48e:	429e      	cmp	r6, r3
 800c490:	4682      	mov	sl, r0
 800c492:	460c      	mov	r4, r1
 800c494:	4690      	mov	r8, r2
 800c496:	461f      	mov	r7, r3
 800c498:	d838      	bhi.n	800c50c <__ssputs_r+0x84>
 800c49a:	898a      	ldrh	r2, [r1, #12]
 800c49c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4a0:	d032      	beq.n	800c508 <__ssputs_r+0x80>
 800c4a2:	6825      	ldr	r5, [r4, #0]
 800c4a4:	6909      	ldr	r1, [r1, #16]
 800c4a6:	eba5 0901 	sub.w	r9, r5, r1
 800c4aa:	6965      	ldr	r5, [r4, #20]
 800c4ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	444b      	add	r3, r9
 800c4b8:	106d      	asrs	r5, r5, #1
 800c4ba:	429d      	cmp	r5, r3
 800c4bc:	bf38      	it	cc
 800c4be:	461d      	movcc	r5, r3
 800c4c0:	0553      	lsls	r3, r2, #21
 800c4c2:	d531      	bpl.n	800c528 <__ssputs_r+0xa0>
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	f7fd fff7 	bl	800a4b8 <_malloc_r>
 800c4ca:	4606      	mov	r6, r0
 800c4cc:	b950      	cbnz	r0, 800c4e4 <__ssputs_r+0x5c>
 800c4ce:	230c      	movs	r3, #12
 800c4d0:	f8ca 3000 	str.w	r3, [sl]
 800c4d4:	89a3      	ldrh	r3, [r4, #12]
 800c4d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4da:	81a3      	strh	r3, [r4, #12]
 800c4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e4:	6921      	ldr	r1, [r4, #16]
 800c4e6:	464a      	mov	r2, r9
 800c4e8:	f7ff fc1a 	bl	800bd20 <memcpy>
 800c4ec:	89a3      	ldrh	r3, [r4, #12]
 800c4ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4f6:	81a3      	strh	r3, [r4, #12]
 800c4f8:	6126      	str	r6, [r4, #16]
 800c4fa:	6165      	str	r5, [r4, #20]
 800c4fc:	444e      	add	r6, r9
 800c4fe:	eba5 0509 	sub.w	r5, r5, r9
 800c502:	6026      	str	r6, [r4, #0]
 800c504:	60a5      	str	r5, [r4, #8]
 800c506:	463e      	mov	r6, r7
 800c508:	42be      	cmp	r6, r7
 800c50a:	d900      	bls.n	800c50e <__ssputs_r+0x86>
 800c50c:	463e      	mov	r6, r7
 800c50e:	6820      	ldr	r0, [r4, #0]
 800c510:	4632      	mov	r2, r6
 800c512:	4641      	mov	r1, r8
 800c514:	f000 ffb0 	bl	800d478 <memmove>
 800c518:	68a3      	ldr	r3, [r4, #8]
 800c51a:	1b9b      	subs	r3, r3, r6
 800c51c:	60a3      	str	r3, [r4, #8]
 800c51e:	6823      	ldr	r3, [r4, #0]
 800c520:	4433      	add	r3, r6
 800c522:	6023      	str	r3, [r4, #0]
 800c524:	2000      	movs	r0, #0
 800c526:	e7db      	b.n	800c4e0 <__ssputs_r+0x58>
 800c528:	462a      	mov	r2, r5
 800c52a:	f000 ffbf 	bl	800d4ac <_realloc_r>
 800c52e:	4606      	mov	r6, r0
 800c530:	2800      	cmp	r0, #0
 800c532:	d1e1      	bne.n	800c4f8 <__ssputs_r+0x70>
 800c534:	6921      	ldr	r1, [r4, #16]
 800c536:	4650      	mov	r0, sl
 800c538:	f7fd ff52 	bl	800a3e0 <_free_r>
 800c53c:	e7c7      	b.n	800c4ce <__ssputs_r+0x46>
	...

0800c540 <_svfiprintf_r>:
 800c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c544:	4698      	mov	r8, r3
 800c546:	898b      	ldrh	r3, [r1, #12]
 800c548:	061b      	lsls	r3, r3, #24
 800c54a:	b09d      	sub	sp, #116	; 0x74
 800c54c:	4607      	mov	r7, r0
 800c54e:	460d      	mov	r5, r1
 800c550:	4614      	mov	r4, r2
 800c552:	d50e      	bpl.n	800c572 <_svfiprintf_r+0x32>
 800c554:	690b      	ldr	r3, [r1, #16]
 800c556:	b963      	cbnz	r3, 800c572 <_svfiprintf_r+0x32>
 800c558:	2140      	movs	r1, #64	; 0x40
 800c55a:	f7fd ffad 	bl	800a4b8 <_malloc_r>
 800c55e:	6028      	str	r0, [r5, #0]
 800c560:	6128      	str	r0, [r5, #16]
 800c562:	b920      	cbnz	r0, 800c56e <_svfiprintf_r+0x2e>
 800c564:	230c      	movs	r3, #12
 800c566:	603b      	str	r3, [r7, #0]
 800c568:	f04f 30ff 	mov.w	r0, #4294967295
 800c56c:	e0d1      	b.n	800c712 <_svfiprintf_r+0x1d2>
 800c56e:	2340      	movs	r3, #64	; 0x40
 800c570:	616b      	str	r3, [r5, #20]
 800c572:	2300      	movs	r3, #0
 800c574:	9309      	str	r3, [sp, #36]	; 0x24
 800c576:	2320      	movs	r3, #32
 800c578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c57c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c580:	2330      	movs	r3, #48	; 0x30
 800c582:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c72c <_svfiprintf_r+0x1ec>
 800c586:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c58a:	f04f 0901 	mov.w	r9, #1
 800c58e:	4623      	mov	r3, r4
 800c590:	469a      	mov	sl, r3
 800c592:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c596:	b10a      	cbz	r2, 800c59c <_svfiprintf_r+0x5c>
 800c598:	2a25      	cmp	r2, #37	; 0x25
 800c59a:	d1f9      	bne.n	800c590 <_svfiprintf_r+0x50>
 800c59c:	ebba 0b04 	subs.w	fp, sl, r4
 800c5a0:	d00b      	beq.n	800c5ba <_svfiprintf_r+0x7a>
 800c5a2:	465b      	mov	r3, fp
 800c5a4:	4622      	mov	r2, r4
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	4638      	mov	r0, r7
 800c5aa:	f7ff ff6d 	bl	800c488 <__ssputs_r>
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	f000 80aa 	beq.w	800c708 <_svfiprintf_r+0x1c8>
 800c5b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5b6:	445a      	add	r2, fp
 800c5b8:	9209      	str	r2, [sp, #36]	; 0x24
 800c5ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	f000 80a2 	beq.w	800c708 <_svfiprintf_r+0x1c8>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5ce:	f10a 0a01 	add.w	sl, sl, #1
 800c5d2:	9304      	str	r3, [sp, #16]
 800c5d4:	9307      	str	r3, [sp, #28]
 800c5d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5da:	931a      	str	r3, [sp, #104]	; 0x68
 800c5dc:	4654      	mov	r4, sl
 800c5de:	2205      	movs	r2, #5
 800c5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e4:	4851      	ldr	r0, [pc, #324]	; (800c72c <_svfiprintf_r+0x1ec>)
 800c5e6:	f7f3 fe13 	bl	8000210 <memchr>
 800c5ea:	9a04      	ldr	r2, [sp, #16]
 800c5ec:	b9d8      	cbnz	r0, 800c626 <_svfiprintf_r+0xe6>
 800c5ee:	06d0      	lsls	r0, r2, #27
 800c5f0:	bf44      	itt	mi
 800c5f2:	2320      	movmi	r3, #32
 800c5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5f8:	0711      	lsls	r1, r2, #28
 800c5fa:	bf44      	itt	mi
 800c5fc:	232b      	movmi	r3, #43	; 0x2b
 800c5fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c602:	f89a 3000 	ldrb.w	r3, [sl]
 800c606:	2b2a      	cmp	r3, #42	; 0x2a
 800c608:	d015      	beq.n	800c636 <_svfiprintf_r+0xf6>
 800c60a:	9a07      	ldr	r2, [sp, #28]
 800c60c:	4654      	mov	r4, sl
 800c60e:	2000      	movs	r0, #0
 800c610:	f04f 0c0a 	mov.w	ip, #10
 800c614:	4621      	mov	r1, r4
 800c616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c61a:	3b30      	subs	r3, #48	; 0x30
 800c61c:	2b09      	cmp	r3, #9
 800c61e:	d94e      	bls.n	800c6be <_svfiprintf_r+0x17e>
 800c620:	b1b0      	cbz	r0, 800c650 <_svfiprintf_r+0x110>
 800c622:	9207      	str	r2, [sp, #28]
 800c624:	e014      	b.n	800c650 <_svfiprintf_r+0x110>
 800c626:	eba0 0308 	sub.w	r3, r0, r8
 800c62a:	fa09 f303 	lsl.w	r3, r9, r3
 800c62e:	4313      	orrs	r3, r2
 800c630:	9304      	str	r3, [sp, #16]
 800c632:	46a2      	mov	sl, r4
 800c634:	e7d2      	b.n	800c5dc <_svfiprintf_r+0x9c>
 800c636:	9b03      	ldr	r3, [sp, #12]
 800c638:	1d19      	adds	r1, r3, #4
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	9103      	str	r1, [sp, #12]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	bfbb      	ittet	lt
 800c642:	425b      	neglt	r3, r3
 800c644:	f042 0202 	orrlt.w	r2, r2, #2
 800c648:	9307      	strge	r3, [sp, #28]
 800c64a:	9307      	strlt	r3, [sp, #28]
 800c64c:	bfb8      	it	lt
 800c64e:	9204      	strlt	r2, [sp, #16]
 800c650:	7823      	ldrb	r3, [r4, #0]
 800c652:	2b2e      	cmp	r3, #46	; 0x2e
 800c654:	d10c      	bne.n	800c670 <_svfiprintf_r+0x130>
 800c656:	7863      	ldrb	r3, [r4, #1]
 800c658:	2b2a      	cmp	r3, #42	; 0x2a
 800c65a:	d135      	bne.n	800c6c8 <_svfiprintf_r+0x188>
 800c65c:	9b03      	ldr	r3, [sp, #12]
 800c65e:	1d1a      	adds	r2, r3, #4
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	9203      	str	r2, [sp, #12]
 800c664:	2b00      	cmp	r3, #0
 800c666:	bfb8      	it	lt
 800c668:	f04f 33ff 	movlt.w	r3, #4294967295
 800c66c:	3402      	adds	r4, #2
 800c66e:	9305      	str	r3, [sp, #20]
 800c670:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c73c <_svfiprintf_r+0x1fc>
 800c674:	7821      	ldrb	r1, [r4, #0]
 800c676:	2203      	movs	r2, #3
 800c678:	4650      	mov	r0, sl
 800c67a:	f7f3 fdc9 	bl	8000210 <memchr>
 800c67e:	b140      	cbz	r0, 800c692 <_svfiprintf_r+0x152>
 800c680:	2340      	movs	r3, #64	; 0x40
 800c682:	eba0 000a 	sub.w	r0, r0, sl
 800c686:	fa03 f000 	lsl.w	r0, r3, r0
 800c68a:	9b04      	ldr	r3, [sp, #16]
 800c68c:	4303      	orrs	r3, r0
 800c68e:	3401      	adds	r4, #1
 800c690:	9304      	str	r3, [sp, #16]
 800c692:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c696:	4826      	ldr	r0, [pc, #152]	; (800c730 <_svfiprintf_r+0x1f0>)
 800c698:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c69c:	2206      	movs	r2, #6
 800c69e:	f7f3 fdb7 	bl	8000210 <memchr>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d038      	beq.n	800c718 <_svfiprintf_r+0x1d8>
 800c6a6:	4b23      	ldr	r3, [pc, #140]	; (800c734 <_svfiprintf_r+0x1f4>)
 800c6a8:	bb1b      	cbnz	r3, 800c6f2 <_svfiprintf_r+0x1b2>
 800c6aa:	9b03      	ldr	r3, [sp, #12]
 800c6ac:	3307      	adds	r3, #7
 800c6ae:	f023 0307 	bic.w	r3, r3, #7
 800c6b2:	3308      	adds	r3, #8
 800c6b4:	9303      	str	r3, [sp, #12]
 800c6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6b8:	4433      	add	r3, r6
 800c6ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c6bc:	e767      	b.n	800c58e <_svfiprintf_r+0x4e>
 800c6be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6c2:	460c      	mov	r4, r1
 800c6c4:	2001      	movs	r0, #1
 800c6c6:	e7a5      	b.n	800c614 <_svfiprintf_r+0xd4>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	3401      	adds	r4, #1
 800c6cc:	9305      	str	r3, [sp, #20]
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	f04f 0c0a 	mov.w	ip, #10
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6da:	3a30      	subs	r2, #48	; 0x30
 800c6dc:	2a09      	cmp	r2, #9
 800c6de:	d903      	bls.n	800c6e8 <_svfiprintf_r+0x1a8>
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d0c5      	beq.n	800c670 <_svfiprintf_r+0x130>
 800c6e4:	9105      	str	r1, [sp, #20]
 800c6e6:	e7c3      	b.n	800c670 <_svfiprintf_r+0x130>
 800c6e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e7f0      	b.n	800c6d4 <_svfiprintf_r+0x194>
 800c6f2:	ab03      	add	r3, sp, #12
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	462a      	mov	r2, r5
 800c6f8:	4b0f      	ldr	r3, [pc, #60]	; (800c738 <_svfiprintf_r+0x1f8>)
 800c6fa:	a904      	add	r1, sp, #16
 800c6fc:	4638      	mov	r0, r7
 800c6fe:	f7fd ffef 	bl	800a6e0 <_printf_float>
 800c702:	1c42      	adds	r2, r0, #1
 800c704:	4606      	mov	r6, r0
 800c706:	d1d6      	bne.n	800c6b6 <_svfiprintf_r+0x176>
 800c708:	89ab      	ldrh	r3, [r5, #12]
 800c70a:	065b      	lsls	r3, r3, #25
 800c70c:	f53f af2c 	bmi.w	800c568 <_svfiprintf_r+0x28>
 800c710:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c712:	b01d      	add	sp, #116	; 0x74
 800c714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c718:	ab03      	add	r3, sp, #12
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	462a      	mov	r2, r5
 800c71e:	4b06      	ldr	r3, [pc, #24]	; (800c738 <_svfiprintf_r+0x1f8>)
 800c720:	a904      	add	r1, sp, #16
 800c722:	4638      	mov	r0, r7
 800c724:	f7fe fa80 	bl	800ac28 <_printf_i>
 800c728:	e7eb      	b.n	800c702 <_svfiprintf_r+0x1c2>
 800c72a:	bf00      	nop
 800c72c:	08010c14 	.word	0x08010c14
 800c730:	08010c1e 	.word	0x08010c1e
 800c734:	0800a6e1 	.word	0x0800a6e1
 800c738:	0800c489 	.word	0x0800c489
 800c73c:	08010c1a 	.word	0x08010c1a

0800c740 <_sungetc_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	1c4b      	adds	r3, r1, #1
 800c744:	4614      	mov	r4, r2
 800c746:	d103      	bne.n	800c750 <_sungetc_r+0x10>
 800c748:	f04f 35ff 	mov.w	r5, #4294967295
 800c74c:	4628      	mov	r0, r5
 800c74e:	bd38      	pop	{r3, r4, r5, pc}
 800c750:	8993      	ldrh	r3, [r2, #12]
 800c752:	f023 0320 	bic.w	r3, r3, #32
 800c756:	8193      	strh	r3, [r2, #12]
 800c758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c75a:	6852      	ldr	r2, [r2, #4]
 800c75c:	b2cd      	uxtb	r5, r1
 800c75e:	b18b      	cbz	r3, 800c784 <_sungetc_r+0x44>
 800c760:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c762:	4293      	cmp	r3, r2
 800c764:	dd08      	ble.n	800c778 <_sungetc_r+0x38>
 800c766:	6823      	ldr	r3, [r4, #0]
 800c768:	1e5a      	subs	r2, r3, #1
 800c76a:	6022      	str	r2, [r4, #0]
 800c76c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c770:	6863      	ldr	r3, [r4, #4]
 800c772:	3301      	adds	r3, #1
 800c774:	6063      	str	r3, [r4, #4]
 800c776:	e7e9      	b.n	800c74c <_sungetc_r+0xc>
 800c778:	4621      	mov	r1, r4
 800c77a:	f000 fc47 	bl	800d00c <__submore>
 800c77e:	2800      	cmp	r0, #0
 800c780:	d0f1      	beq.n	800c766 <_sungetc_r+0x26>
 800c782:	e7e1      	b.n	800c748 <_sungetc_r+0x8>
 800c784:	6921      	ldr	r1, [r4, #16]
 800c786:	6823      	ldr	r3, [r4, #0]
 800c788:	b151      	cbz	r1, 800c7a0 <_sungetc_r+0x60>
 800c78a:	4299      	cmp	r1, r3
 800c78c:	d208      	bcs.n	800c7a0 <_sungetc_r+0x60>
 800c78e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c792:	42a9      	cmp	r1, r5
 800c794:	d104      	bne.n	800c7a0 <_sungetc_r+0x60>
 800c796:	3b01      	subs	r3, #1
 800c798:	3201      	adds	r2, #1
 800c79a:	6023      	str	r3, [r4, #0]
 800c79c:	6062      	str	r2, [r4, #4]
 800c79e:	e7d5      	b.n	800c74c <_sungetc_r+0xc>
 800c7a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c7a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7a8:	6363      	str	r3, [r4, #52]	; 0x34
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	63a3      	str	r3, [r4, #56]	; 0x38
 800c7ae:	4623      	mov	r3, r4
 800c7b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c7b4:	6023      	str	r3, [r4, #0]
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e7dc      	b.n	800c774 <_sungetc_r+0x34>

0800c7ba <__ssrefill_r>:
 800c7ba:	b510      	push	{r4, lr}
 800c7bc:	460c      	mov	r4, r1
 800c7be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c7c0:	b169      	cbz	r1, 800c7de <__ssrefill_r+0x24>
 800c7c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7c6:	4299      	cmp	r1, r3
 800c7c8:	d001      	beq.n	800c7ce <__ssrefill_r+0x14>
 800c7ca:	f7fd fe09 	bl	800a3e0 <_free_r>
 800c7ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7d0:	6063      	str	r3, [r4, #4]
 800c7d2:	2000      	movs	r0, #0
 800c7d4:	6360      	str	r0, [r4, #52]	; 0x34
 800c7d6:	b113      	cbz	r3, 800c7de <__ssrefill_r+0x24>
 800c7d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c7da:	6023      	str	r3, [r4, #0]
 800c7dc:	bd10      	pop	{r4, pc}
 800c7de:	6923      	ldr	r3, [r4, #16]
 800c7e0:	6023      	str	r3, [r4, #0]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	6063      	str	r3, [r4, #4]
 800c7e6:	89a3      	ldrh	r3, [r4, #12]
 800c7e8:	f043 0320 	orr.w	r3, r3, #32
 800c7ec:	81a3      	strh	r3, [r4, #12]
 800c7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f2:	e7f3      	b.n	800c7dc <__ssrefill_r+0x22>

0800c7f4 <__ssvfiscanf_r>:
 800c7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f8:	460c      	mov	r4, r1
 800c7fa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c7fe:	2100      	movs	r1, #0
 800c800:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c804:	49a6      	ldr	r1, [pc, #664]	; (800caa0 <__ssvfiscanf_r+0x2ac>)
 800c806:	91a0      	str	r1, [sp, #640]	; 0x280
 800c808:	f10d 0804 	add.w	r8, sp, #4
 800c80c:	49a5      	ldr	r1, [pc, #660]	; (800caa4 <__ssvfiscanf_r+0x2b0>)
 800c80e:	4fa6      	ldr	r7, [pc, #664]	; (800caa8 <__ssvfiscanf_r+0x2b4>)
 800c810:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800caac <__ssvfiscanf_r+0x2b8>
 800c814:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c818:	4606      	mov	r6, r0
 800c81a:	91a1      	str	r1, [sp, #644]	; 0x284
 800c81c:	9300      	str	r3, [sp, #0]
 800c81e:	7813      	ldrb	r3, [r2, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 815a 	beq.w	800cada <__ssvfiscanf_r+0x2e6>
 800c826:	5dd9      	ldrb	r1, [r3, r7]
 800c828:	f011 0108 	ands.w	r1, r1, #8
 800c82c:	f102 0501 	add.w	r5, r2, #1
 800c830:	d019      	beq.n	800c866 <__ssvfiscanf_r+0x72>
 800c832:	6863      	ldr	r3, [r4, #4]
 800c834:	2b00      	cmp	r3, #0
 800c836:	dd0f      	ble.n	800c858 <__ssvfiscanf_r+0x64>
 800c838:	6823      	ldr	r3, [r4, #0]
 800c83a:	781a      	ldrb	r2, [r3, #0]
 800c83c:	5cba      	ldrb	r2, [r7, r2]
 800c83e:	0712      	lsls	r2, r2, #28
 800c840:	d401      	bmi.n	800c846 <__ssvfiscanf_r+0x52>
 800c842:	462a      	mov	r2, r5
 800c844:	e7eb      	b.n	800c81e <__ssvfiscanf_r+0x2a>
 800c846:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c848:	3201      	adds	r2, #1
 800c84a:	9245      	str	r2, [sp, #276]	; 0x114
 800c84c:	6862      	ldr	r2, [r4, #4]
 800c84e:	3301      	adds	r3, #1
 800c850:	3a01      	subs	r2, #1
 800c852:	6062      	str	r2, [r4, #4]
 800c854:	6023      	str	r3, [r4, #0]
 800c856:	e7ec      	b.n	800c832 <__ssvfiscanf_r+0x3e>
 800c858:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c85a:	4621      	mov	r1, r4
 800c85c:	4630      	mov	r0, r6
 800c85e:	4798      	blx	r3
 800c860:	2800      	cmp	r0, #0
 800c862:	d0e9      	beq.n	800c838 <__ssvfiscanf_r+0x44>
 800c864:	e7ed      	b.n	800c842 <__ssvfiscanf_r+0x4e>
 800c866:	2b25      	cmp	r3, #37	; 0x25
 800c868:	d012      	beq.n	800c890 <__ssvfiscanf_r+0x9c>
 800c86a:	469a      	mov	sl, r3
 800c86c:	6863      	ldr	r3, [r4, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f340 8091 	ble.w	800c996 <__ssvfiscanf_r+0x1a2>
 800c874:	6822      	ldr	r2, [r4, #0]
 800c876:	7813      	ldrb	r3, [r2, #0]
 800c878:	4553      	cmp	r3, sl
 800c87a:	f040 812e 	bne.w	800cada <__ssvfiscanf_r+0x2e6>
 800c87e:	6863      	ldr	r3, [r4, #4]
 800c880:	3b01      	subs	r3, #1
 800c882:	6063      	str	r3, [r4, #4]
 800c884:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c886:	3201      	adds	r2, #1
 800c888:	3301      	adds	r3, #1
 800c88a:	6022      	str	r2, [r4, #0]
 800c88c:	9345      	str	r3, [sp, #276]	; 0x114
 800c88e:	e7d8      	b.n	800c842 <__ssvfiscanf_r+0x4e>
 800c890:	9141      	str	r1, [sp, #260]	; 0x104
 800c892:	9143      	str	r1, [sp, #268]	; 0x10c
 800c894:	7853      	ldrb	r3, [r2, #1]
 800c896:	2b2a      	cmp	r3, #42	; 0x2a
 800c898:	bf02      	ittt	eq
 800c89a:	2310      	moveq	r3, #16
 800c89c:	1c95      	addeq	r5, r2, #2
 800c89e:	9341      	streq	r3, [sp, #260]	; 0x104
 800c8a0:	220a      	movs	r2, #10
 800c8a2:	46aa      	mov	sl, r5
 800c8a4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c8a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c8ac:	2b09      	cmp	r3, #9
 800c8ae:	d91d      	bls.n	800c8ec <__ssvfiscanf_r+0xf8>
 800c8b0:	487e      	ldr	r0, [pc, #504]	; (800caac <__ssvfiscanf_r+0x2b8>)
 800c8b2:	2203      	movs	r2, #3
 800c8b4:	f7f3 fcac 	bl	8000210 <memchr>
 800c8b8:	b140      	cbz	r0, 800c8cc <__ssvfiscanf_r+0xd8>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	eba0 0009 	sub.w	r0, r0, r9
 800c8c0:	fa03 f000 	lsl.w	r0, r3, r0
 800c8c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c8c6:	4318      	orrs	r0, r3
 800c8c8:	9041      	str	r0, [sp, #260]	; 0x104
 800c8ca:	4655      	mov	r5, sl
 800c8cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c8d0:	2b78      	cmp	r3, #120	; 0x78
 800c8d2:	d806      	bhi.n	800c8e2 <__ssvfiscanf_r+0xee>
 800c8d4:	2b57      	cmp	r3, #87	; 0x57
 800c8d6:	d810      	bhi.n	800c8fa <__ssvfiscanf_r+0x106>
 800c8d8:	2b25      	cmp	r3, #37	; 0x25
 800c8da:	d0c6      	beq.n	800c86a <__ssvfiscanf_r+0x76>
 800c8dc:	d856      	bhi.n	800c98c <__ssvfiscanf_r+0x198>
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d064      	beq.n	800c9ac <__ssvfiscanf_r+0x1b8>
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	9347      	str	r3, [sp, #284]	; 0x11c
 800c8e6:	230a      	movs	r3, #10
 800c8e8:	9342      	str	r3, [sp, #264]	; 0x108
 800c8ea:	e071      	b.n	800c9d0 <__ssvfiscanf_r+0x1dc>
 800c8ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c8ee:	fb02 1103 	mla	r1, r2, r3, r1
 800c8f2:	3930      	subs	r1, #48	; 0x30
 800c8f4:	9143      	str	r1, [sp, #268]	; 0x10c
 800c8f6:	4655      	mov	r5, sl
 800c8f8:	e7d3      	b.n	800c8a2 <__ssvfiscanf_r+0xae>
 800c8fa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c8fe:	2a20      	cmp	r2, #32
 800c900:	d8ef      	bhi.n	800c8e2 <__ssvfiscanf_r+0xee>
 800c902:	a101      	add	r1, pc, #4	; (adr r1, 800c908 <__ssvfiscanf_r+0x114>)
 800c904:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c908:	0800c9bb 	.word	0x0800c9bb
 800c90c:	0800c8e3 	.word	0x0800c8e3
 800c910:	0800c8e3 	.word	0x0800c8e3
 800c914:	0800ca19 	.word	0x0800ca19
 800c918:	0800c8e3 	.word	0x0800c8e3
 800c91c:	0800c8e3 	.word	0x0800c8e3
 800c920:	0800c8e3 	.word	0x0800c8e3
 800c924:	0800c8e3 	.word	0x0800c8e3
 800c928:	0800c8e3 	.word	0x0800c8e3
 800c92c:	0800c8e3 	.word	0x0800c8e3
 800c930:	0800c8e3 	.word	0x0800c8e3
 800c934:	0800ca2f 	.word	0x0800ca2f
 800c938:	0800ca05 	.word	0x0800ca05
 800c93c:	0800c993 	.word	0x0800c993
 800c940:	0800c993 	.word	0x0800c993
 800c944:	0800c993 	.word	0x0800c993
 800c948:	0800c8e3 	.word	0x0800c8e3
 800c94c:	0800ca09 	.word	0x0800ca09
 800c950:	0800c8e3 	.word	0x0800c8e3
 800c954:	0800c8e3 	.word	0x0800c8e3
 800c958:	0800c8e3 	.word	0x0800c8e3
 800c95c:	0800c8e3 	.word	0x0800c8e3
 800c960:	0800ca3f 	.word	0x0800ca3f
 800c964:	0800ca11 	.word	0x0800ca11
 800c968:	0800c9b3 	.word	0x0800c9b3
 800c96c:	0800c8e3 	.word	0x0800c8e3
 800c970:	0800c8e3 	.word	0x0800c8e3
 800c974:	0800ca3b 	.word	0x0800ca3b
 800c978:	0800c8e3 	.word	0x0800c8e3
 800c97c:	0800ca05 	.word	0x0800ca05
 800c980:	0800c8e3 	.word	0x0800c8e3
 800c984:	0800c8e3 	.word	0x0800c8e3
 800c988:	0800c9bb 	.word	0x0800c9bb
 800c98c:	3b45      	subs	r3, #69	; 0x45
 800c98e:	2b02      	cmp	r3, #2
 800c990:	d8a7      	bhi.n	800c8e2 <__ssvfiscanf_r+0xee>
 800c992:	2305      	movs	r3, #5
 800c994:	e01b      	b.n	800c9ce <__ssvfiscanf_r+0x1da>
 800c996:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c998:	4621      	mov	r1, r4
 800c99a:	4630      	mov	r0, r6
 800c99c:	4798      	blx	r3
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	f43f af68 	beq.w	800c874 <__ssvfiscanf_r+0x80>
 800c9a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	f040 808d 	bne.w	800cac6 <__ssvfiscanf_r+0x2d2>
 800c9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b0:	e08f      	b.n	800cad2 <__ssvfiscanf_r+0x2de>
 800c9b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c9b4:	f042 0220 	orr.w	r2, r2, #32
 800c9b8:	9241      	str	r2, [sp, #260]	; 0x104
 800c9ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c9bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9c0:	9241      	str	r2, [sp, #260]	; 0x104
 800c9c2:	2210      	movs	r2, #16
 800c9c4:	2b6f      	cmp	r3, #111	; 0x6f
 800c9c6:	9242      	str	r2, [sp, #264]	; 0x108
 800c9c8:	bf34      	ite	cc
 800c9ca:	2303      	movcc	r3, #3
 800c9cc:	2304      	movcs	r3, #4
 800c9ce:	9347      	str	r3, [sp, #284]	; 0x11c
 800c9d0:	6863      	ldr	r3, [r4, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	dd42      	ble.n	800ca5c <__ssvfiscanf_r+0x268>
 800c9d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c9d8:	0659      	lsls	r1, r3, #25
 800c9da:	d404      	bmi.n	800c9e6 <__ssvfiscanf_r+0x1f2>
 800c9dc:	6823      	ldr	r3, [r4, #0]
 800c9de:	781a      	ldrb	r2, [r3, #0]
 800c9e0:	5cba      	ldrb	r2, [r7, r2]
 800c9e2:	0712      	lsls	r2, r2, #28
 800c9e4:	d441      	bmi.n	800ca6a <__ssvfiscanf_r+0x276>
 800c9e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	dc50      	bgt.n	800ca8e <__ssvfiscanf_r+0x29a>
 800c9ec:	466b      	mov	r3, sp
 800c9ee:	4622      	mov	r2, r4
 800c9f0:	a941      	add	r1, sp, #260	; 0x104
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f000 f876 	bl	800cae4 <_scanf_chars>
 800c9f8:	2801      	cmp	r0, #1
 800c9fa:	d06e      	beq.n	800cada <__ssvfiscanf_r+0x2e6>
 800c9fc:	2802      	cmp	r0, #2
 800c9fe:	f47f af20 	bne.w	800c842 <__ssvfiscanf_r+0x4e>
 800ca02:	e7cf      	b.n	800c9a4 <__ssvfiscanf_r+0x1b0>
 800ca04:	220a      	movs	r2, #10
 800ca06:	e7dd      	b.n	800c9c4 <__ssvfiscanf_r+0x1d0>
 800ca08:	2300      	movs	r3, #0
 800ca0a:	9342      	str	r3, [sp, #264]	; 0x108
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	e7de      	b.n	800c9ce <__ssvfiscanf_r+0x1da>
 800ca10:	2308      	movs	r3, #8
 800ca12:	9342      	str	r3, [sp, #264]	; 0x108
 800ca14:	2304      	movs	r3, #4
 800ca16:	e7da      	b.n	800c9ce <__ssvfiscanf_r+0x1da>
 800ca18:	4629      	mov	r1, r5
 800ca1a:	4640      	mov	r0, r8
 800ca1c:	f000 f9c6 	bl	800cdac <__sccl>
 800ca20:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca26:	9341      	str	r3, [sp, #260]	; 0x104
 800ca28:	4605      	mov	r5, r0
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	e7cf      	b.n	800c9ce <__ssvfiscanf_r+0x1da>
 800ca2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca34:	9341      	str	r3, [sp, #260]	; 0x104
 800ca36:	2300      	movs	r3, #0
 800ca38:	e7c9      	b.n	800c9ce <__ssvfiscanf_r+0x1da>
 800ca3a:	2302      	movs	r3, #2
 800ca3c:	e7c7      	b.n	800c9ce <__ssvfiscanf_r+0x1da>
 800ca3e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ca40:	06c3      	lsls	r3, r0, #27
 800ca42:	f53f aefe 	bmi.w	800c842 <__ssvfiscanf_r+0x4e>
 800ca46:	9b00      	ldr	r3, [sp, #0]
 800ca48:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ca4a:	1d19      	adds	r1, r3, #4
 800ca4c:	9100      	str	r1, [sp, #0]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f010 0f01 	tst.w	r0, #1
 800ca54:	bf14      	ite	ne
 800ca56:	801a      	strhne	r2, [r3, #0]
 800ca58:	601a      	streq	r2, [r3, #0]
 800ca5a:	e6f2      	b.n	800c842 <__ssvfiscanf_r+0x4e>
 800ca5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca5e:	4621      	mov	r1, r4
 800ca60:	4630      	mov	r0, r6
 800ca62:	4798      	blx	r3
 800ca64:	2800      	cmp	r0, #0
 800ca66:	d0b6      	beq.n	800c9d6 <__ssvfiscanf_r+0x1e2>
 800ca68:	e79c      	b.n	800c9a4 <__ssvfiscanf_r+0x1b0>
 800ca6a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ca6c:	3201      	adds	r2, #1
 800ca6e:	9245      	str	r2, [sp, #276]	; 0x114
 800ca70:	6862      	ldr	r2, [r4, #4]
 800ca72:	3a01      	subs	r2, #1
 800ca74:	2a00      	cmp	r2, #0
 800ca76:	6062      	str	r2, [r4, #4]
 800ca78:	dd02      	ble.n	800ca80 <__ssvfiscanf_r+0x28c>
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	e7ad      	b.n	800c9dc <__ssvfiscanf_r+0x1e8>
 800ca80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca82:	4621      	mov	r1, r4
 800ca84:	4630      	mov	r0, r6
 800ca86:	4798      	blx	r3
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	d0a7      	beq.n	800c9dc <__ssvfiscanf_r+0x1e8>
 800ca8c:	e78a      	b.n	800c9a4 <__ssvfiscanf_r+0x1b0>
 800ca8e:	2b04      	cmp	r3, #4
 800ca90:	dc0e      	bgt.n	800cab0 <__ssvfiscanf_r+0x2bc>
 800ca92:	466b      	mov	r3, sp
 800ca94:	4622      	mov	r2, r4
 800ca96:	a941      	add	r1, sp, #260	; 0x104
 800ca98:	4630      	mov	r0, r6
 800ca9a:	f000 f87d 	bl	800cb98 <_scanf_i>
 800ca9e:	e7ab      	b.n	800c9f8 <__ssvfiscanf_r+0x204>
 800caa0:	0800c741 	.word	0x0800c741
 800caa4:	0800c7bb 	.word	0x0800c7bb
 800caa8:	08010c7d 	.word	0x08010c7d
 800caac:	08010c1a 	.word	0x08010c1a
 800cab0:	4b0b      	ldr	r3, [pc, #44]	; (800cae0 <__ssvfiscanf_r+0x2ec>)
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f43f aec5 	beq.w	800c842 <__ssvfiscanf_r+0x4e>
 800cab8:	466b      	mov	r3, sp
 800caba:	4622      	mov	r2, r4
 800cabc:	a941      	add	r1, sp, #260	; 0x104
 800cabe:	4630      	mov	r0, r6
 800cac0:	f3af 8000 	nop.w
 800cac4:	e798      	b.n	800c9f8 <__ssvfiscanf_r+0x204>
 800cac6:	89a3      	ldrh	r3, [r4, #12]
 800cac8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cacc:	bf18      	it	ne
 800cace:	f04f 30ff 	movne.w	r0, #4294967295
 800cad2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cada:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cadc:	e7f9      	b.n	800cad2 <__ssvfiscanf_r+0x2de>
 800cade:	bf00      	nop
 800cae0:	00000000 	.word	0x00000000

0800cae4 <_scanf_chars>:
 800cae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cae8:	4615      	mov	r5, r2
 800caea:	688a      	ldr	r2, [r1, #8]
 800caec:	4680      	mov	r8, r0
 800caee:	460c      	mov	r4, r1
 800caf0:	b932      	cbnz	r2, 800cb00 <_scanf_chars+0x1c>
 800caf2:	698a      	ldr	r2, [r1, #24]
 800caf4:	2a00      	cmp	r2, #0
 800caf6:	bf0c      	ite	eq
 800caf8:	2201      	moveq	r2, #1
 800cafa:	f04f 32ff 	movne.w	r2, #4294967295
 800cafe:	608a      	str	r2, [r1, #8]
 800cb00:	6822      	ldr	r2, [r4, #0]
 800cb02:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cb94 <_scanf_chars+0xb0>
 800cb06:	06d1      	lsls	r1, r2, #27
 800cb08:	bf5f      	itttt	pl
 800cb0a:	681a      	ldrpl	r2, [r3, #0]
 800cb0c:	1d11      	addpl	r1, r2, #4
 800cb0e:	6019      	strpl	r1, [r3, #0]
 800cb10:	6816      	ldrpl	r6, [r2, #0]
 800cb12:	2700      	movs	r7, #0
 800cb14:	69a0      	ldr	r0, [r4, #24]
 800cb16:	b188      	cbz	r0, 800cb3c <_scanf_chars+0x58>
 800cb18:	2801      	cmp	r0, #1
 800cb1a:	d107      	bne.n	800cb2c <_scanf_chars+0x48>
 800cb1c:	682a      	ldr	r2, [r5, #0]
 800cb1e:	7811      	ldrb	r1, [r2, #0]
 800cb20:	6962      	ldr	r2, [r4, #20]
 800cb22:	5c52      	ldrb	r2, [r2, r1]
 800cb24:	b952      	cbnz	r2, 800cb3c <_scanf_chars+0x58>
 800cb26:	2f00      	cmp	r7, #0
 800cb28:	d031      	beq.n	800cb8e <_scanf_chars+0xaa>
 800cb2a:	e022      	b.n	800cb72 <_scanf_chars+0x8e>
 800cb2c:	2802      	cmp	r0, #2
 800cb2e:	d120      	bne.n	800cb72 <_scanf_chars+0x8e>
 800cb30:	682b      	ldr	r3, [r5, #0]
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cb38:	071b      	lsls	r3, r3, #28
 800cb3a:	d41a      	bmi.n	800cb72 <_scanf_chars+0x8e>
 800cb3c:	6823      	ldr	r3, [r4, #0]
 800cb3e:	06da      	lsls	r2, r3, #27
 800cb40:	bf5e      	ittt	pl
 800cb42:	682b      	ldrpl	r3, [r5, #0]
 800cb44:	781b      	ldrbpl	r3, [r3, #0]
 800cb46:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cb4a:	682a      	ldr	r2, [r5, #0]
 800cb4c:	686b      	ldr	r3, [r5, #4]
 800cb4e:	3201      	adds	r2, #1
 800cb50:	602a      	str	r2, [r5, #0]
 800cb52:	68a2      	ldr	r2, [r4, #8]
 800cb54:	3b01      	subs	r3, #1
 800cb56:	3a01      	subs	r2, #1
 800cb58:	606b      	str	r3, [r5, #4]
 800cb5a:	3701      	adds	r7, #1
 800cb5c:	60a2      	str	r2, [r4, #8]
 800cb5e:	b142      	cbz	r2, 800cb72 <_scanf_chars+0x8e>
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	dcd7      	bgt.n	800cb14 <_scanf_chars+0x30>
 800cb64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cb68:	4629      	mov	r1, r5
 800cb6a:	4640      	mov	r0, r8
 800cb6c:	4798      	blx	r3
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	d0d0      	beq.n	800cb14 <_scanf_chars+0x30>
 800cb72:	6823      	ldr	r3, [r4, #0]
 800cb74:	f013 0310 	ands.w	r3, r3, #16
 800cb78:	d105      	bne.n	800cb86 <_scanf_chars+0xa2>
 800cb7a:	68e2      	ldr	r2, [r4, #12]
 800cb7c:	3201      	adds	r2, #1
 800cb7e:	60e2      	str	r2, [r4, #12]
 800cb80:	69a2      	ldr	r2, [r4, #24]
 800cb82:	b102      	cbz	r2, 800cb86 <_scanf_chars+0xa2>
 800cb84:	7033      	strb	r3, [r6, #0]
 800cb86:	6923      	ldr	r3, [r4, #16]
 800cb88:	443b      	add	r3, r7
 800cb8a:	6123      	str	r3, [r4, #16]
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb92:	bf00      	nop
 800cb94:	08010c7d 	.word	0x08010c7d

0800cb98 <_scanf_i>:
 800cb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb9c:	4698      	mov	r8, r3
 800cb9e:	4b76      	ldr	r3, [pc, #472]	; (800cd78 <_scanf_i+0x1e0>)
 800cba0:	460c      	mov	r4, r1
 800cba2:	4682      	mov	sl, r0
 800cba4:	4616      	mov	r6, r2
 800cba6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cbaa:	b087      	sub	sp, #28
 800cbac:	ab03      	add	r3, sp, #12
 800cbae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cbb2:	4b72      	ldr	r3, [pc, #456]	; (800cd7c <_scanf_i+0x1e4>)
 800cbb4:	69a1      	ldr	r1, [r4, #24]
 800cbb6:	4a72      	ldr	r2, [pc, #456]	; (800cd80 <_scanf_i+0x1e8>)
 800cbb8:	2903      	cmp	r1, #3
 800cbba:	bf18      	it	ne
 800cbbc:	461a      	movne	r2, r3
 800cbbe:	68a3      	ldr	r3, [r4, #8]
 800cbc0:	9201      	str	r2, [sp, #4]
 800cbc2:	1e5a      	subs	r2, r3, #1
 800cbc4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cbc8:	bf88      	it	hi
 800cbca:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cbce:	4627      	mov	r7, r4
 800cbd0:	bf82      	ittt	hi
 800cbd2:	eb03 0905 	addhi.w	r9, r3, r5
 800cbd6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cbda:	60a3      	strhi	r3, [r4, #8]
 800cbdc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cbe0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cbe4:	bf98      	it	ls
 800cbe6:	f04f 0900 	movls.w	r9, #0
 800cbea:	6023      	str	r3, [r4, #0]
 800cbec:	463d      	mov	r5, r7
 800cbee:	f04f 0b00 	mov.w	fp, #0
 800cbf2:	6831      	ldr	r1, [r6, #0]
 800cbf4:	ab03      	add	r3, sp, #12
 800cbf6:	7809      	ldrb	r1, [r1, #0]
 800cbf8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cbfc:	2202      	movs	r2, #2
 800cbfe:	f7f3 fb07 	bl	8000210 <memchr>
 800cc02:	b328      	cbz	r0, 800cc50 <_scanf_i+0xb8>
 800cc04:	f1bb 0f01 	cmp.w	fp, #1
 800cc08:	d159      	bne.n	800ccbe <_scanf_i+0x126>
 800cc0a:	6862      	ldr	r2, [r4, #4]
 800cc0c:	b92a      	cbnz	r2, 800cc1a <_scanf_i+0x82>
 800cc0e:	6822      	ldr	r2, [r4, #0]
 800cc10:	2308      	movs	r3, #8
 800cc12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc16:	6063      	str	r3, [r4, #4]
 800cc18:	6022      	str	r2, [r4, #0]
 800cc1a:	6822      	ldr	r2, [r4, #0]
 800cc1c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cc20:	6022      	str	r2, [r4, #0]
 800cc22:	68a2      	ldr	r2, [r4, #8]
 800cc24:	1e51      	subs	r1, r2, #1
 800cc26:	60a1      	str	r1, [r4, #8]
 800cc28:	b192      	cbz	r2, 800cc50 <_scanf_i+0xb8>
 800cc2a:	6832      	ldr	r2, [r6, #0]
 800cc2c:	1c51      	adds	r1, r2, #1
 800cc2e:	6031      	str	r1, [r6, #0]
 800cc30:	7812      	ldrb	r2, [r2, #0]
 800cc32:	f805 2b01 	strb.w	r2, [r5], #1
 800cc36:	6872      	ldr	r2, [r6, #4]
 800cc38:	3a01      	subs	r2, #1
 800cc3a:	2a00      	cmp	r2, #0
 800cc3c:	6072      	str	r2, [r6, #4]
 800cc3e:	dc07      	bgt.n	800cc50 <_scanf_i+0xb8>
 800cc40:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cc44:	4631      	mov	r1, r6
 800cc46:	4650      	mov	r0, sl
 800cc48:	4790      	blx	r2
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	f040 8085 	bne.w	800cd5a <_scanf_i+0x1c2>
 800cc50:	f10b 0b01 	add.w	fp, fp, #1
 800cc54:	f1bb 0f03 	cmp.w	fp, #3
 800cc58:	d1cb      	bne.n	800cbf2 <_scanf_i+0x5a>
 800cc5a:	6863      	ldr	r3, [r4, #4]
 800cc5c:	b90b      	cbnz	r3, 800cc62 <_scanf_i+0xca>
 800cc5e:	230a      	movs	r3, #10
 800cc60:	6063      	str	r3, [r4, #4]
 800cc62:	6863      	ldr	r3, [r4, #4]
 800cc64:	4947      	ldr	r1, [pc, #284]	; (800cd84 <_scanf_i+0x1ec>)
 800cc66:	6960      	ldr	r0, [r4, #20]
 800cc68:	1ac9      	subs	r1, r1, r3
 800cc6a:	f000 f89f 	bl	800cdac <__sccl>
 800cc6e:	f04f 0b00 	mov.w	fp, #0
 800cc72:	68a3      	ldr	r3, [r4, #8]
 800cc74:	6822      	ldr	r2, [r4, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d03d      	beq.n	800ccf6 <_scanf_i+0x15e>
 800cc7a:	6831      	ldr	r1, [r6, #0]
 800cc7c:	6960      	ldr	r0, [r4, #20]
 800cc7e:	f891 c000 	ldrb.w	ip, [r1]
 800cc82:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cc86:	2800      	cmp	r0, #0
 800cc88:	d035      	beq.n	800ccf6 <_scanf_i+0x15e>
 800cc8a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cc8e:	d124      	bne.n	800ccda <_scanf_i+0x142>
 800cc90:	0510      	lsls	r0, r2, #20
 800cc92:	d522      	bpl.n	800ccda <_scanf_i+0x142>
 800cc94:	f10b 0b01 	add.w	fp, fp, #1
 800cc98:	f1b9 0f00 	cmp.w	r9, #0
 800cc9c:	d003      	beq.n	800cca6 <_scanf_i+0x10e>
 800cc9e:	3301      	adds	r3, #1
 800cca0:	f109 39ff 	add.w	r9, r9, #4294967295
 800cca4:	60a3      	str	r3, [r4, #8]
 800cca6:	6873      	ldr	r3, [r6, #4]
 800cca8:	3b01      	subs	r3, #1
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	6073      	str	r3, [r6, #4]
 800ccae:	dd1b      	ble.n	800cce8 <_scanf_i+0x150>
 800ccb0:	6833      	ldr	r3, [r6, #0]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	6033      	str	r3, [r6, #0]
 800ccb6:	68a3      	ldr	r3, [r4, #8]
 800ccb8:	3b01      	subs	r3, #1
 800ccba:	60a3      	str	r3, [r4, #8]
 800ccbc:	e7d9      	b.n	800cc72 <_scanf_i+0xda>
 800ccbe:	f1bb 0f02 	cmp.w	fp, #2
 800ccc2:	d1ae      	bne.n	800cc22 <_scanf_i+0x8a>
 800ccc4:	6822      	ldr	r2, [r4, #0]
 800ccc6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ccca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ccce:	d1bf      	bne.n	800cc50 <_scanf_i+0xb8>
 800ccd0:	2310      	movs	r3, #16
 800ccd2:	6063      	str	r3, [r4, #4]
 800ccd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ccd8:	e7a2      	b.n	800cc20 <_scanf_i+0x88>
 800ccda:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ccde:	6022      	str	r2, [r4, #0]
 800cce0:	780b      	ldrb	r3, [r1, #0]
 800cce2:	f805 3b01 	strb.w	r3, [r5], #1
 800cce6:	e7de      	b.n	800cca6 <_scanf_i+0x10e>
 800cce8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ccec:	4631      	mov	r1, r6
 800ccee:	4650      	mov	r0, sl
 800ccf0:	4798      	blx	r3
 800ccf2:	2800      	cmp	r0, #0
 800ccf4:	d0df      	beq.n	800ccb6 <_scanf_i+0x11e>
 800ccf6:	6823      	ldr	r3, [r4, #0]
 800ccf8:	05db      	lsls	r3, r3, #23
 800ccfa:	d50d      	bpl.n	800cd18 <_scanf_i+0x180>
 800ccfc:	42bd      	cmp	r5, r7
 800ccfe:	d909      	bls.n	800cd14 <_scanf_i+0x17c>
 800cd00:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cd04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd08:	4632      	mov	r2, r6
 800cd0a:	4650      	mov	r0, sl
 800cd0c:	4798      	blx	r3
 800cd0e:	f105 39ff 	add.w	r9, r5, #4294967295
 800cd12:	464d      	mov	r5, r9
 800cd14:	42bd      	cmp	r5, r7
 800cd16:	d02d      	beq.n	800cd74 <_scanf_i+0x1dc>
 800cd18:	6822      	ldr	r2, [r4, #0]
 800cd1a:	f012 0210 	ands.w	r2, r2, #16
 800cd1e:	d113      	bne.n	800cd48 <_scanf_i+0x1b0>
 800cd20:	702a      	strb	r2, [r5, #0]
 800cd22:	6863      	ldr	r3, [r4, #4]
 800cd24:	9e01      	ldr	r6, [sp, #4]
 800cd26:	4639      	mov	r1, r7
 800cd28:	4650      	mov	r0, sl
 800cd2a:	47b0      	blx	r6
 800cd2c:	6821      	ldr	r1, [r4, #0]
 800cd2e:	f8d8 3000 	ldr.w	r3, [r8]
 800cd32:	f011 0f20 	tst.w	r1, #32
 800cd36:	d013      	beq.n	800cd60 <_scanf_i+0x1c8>
 800cd38:	1d1a      	adds	r2, r3, #4
 800cd3a:	f8c8 2000 	str.w	r2, [r8]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	6018      	str	r0, [r3, #0]
 800cd42:	68e3      	ldr	r3, [r4, #12]
 800cd44:	3301      	adds	r3, #1
 800cd46:	60e3      	str	r3, [r4, #12]
 800cd48:	1bed      	subs	r5, r5, r7
 800cd4a:	44ab      	add	fp, r5
 800cd4c:	6925      	ldr	r5, [r4, #16]
 800cd4e:	445d      	add	r5, fp
 800cd50:	6125      	str	r5, [r4, #16]
 800cd52:	2000      	movs	r0, #0
 800cd54:	b007      	add	sp, #28
 800cd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd5a:	f04f 0b00 	mov.w	fp, #0
 800cd5e:	e7ca      	b.n	800ccf6 <_scanf_i+0x15e>
 800cd60:	1d1a      	adds	r2, r3, #4
 800cd62:	f8c8 2000 	str.w	r2, [r8]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f011 0f01 	tst.w	r1, #1
 800cd6c:	bf14      	ite	ne
 800cd6e:	8018      	strhne	r0, [r3, #0]
 800cd70:	6018      	streq	r0, [r3, #0]
 800cd72:	e7e6      	b.n	800cd42 <_scanf_i+0x1aa>
 800cd74:	2001      	movs	r0, #1
 800cd76:	e7ed      	b.n	800cd54 <_scanf_i+0x1bc>
 800cd78:	080109e4 	.word	0x080109e4
 800cd7c:	0800d009 	.word	0x0800d009
 800cd80:	0800cf21 	.word	0x0800cf21
 800cd84:	08010c3e 	.word	0x08010c3e

0800cd88 <_read_r>:
 800cd88:	b538      	push	{r3, r4, r5, lr}
 800cd8a:	4d07      	ldr	r5, [pc, #28]	; (800cda8 <_read_r+0x20>)
 800cd8c:	4604      	mov	r4, r0
 800cd8e:	4608      	mov	r0, r1
 800cd90:	4611      	mov	r1, r2
 800cd92:	2200      	movs	r2, #0
 800cd94:	602a      	str	r2, [r5, #0]
 800cd96:	461a      	mov	r2, r3
 800cd98:	f7f6 fda2 	bl	80038e0 <_read>
 800cd9c:	1c43      	adds	r3, r0, #1
 800cd9e:	d102      	bne.n	800cda6 <_read_r+0x1e>
 800cda0:	682b      	ldr	r3, [r5, #0]
 800cda2:	b103      	cbz	r3, 800cda6 <_read_r+0x1e>
 800cda4:	6023      	str	r3, [r4, #0]
 800cda6:	bd38      	pop	{r3, r4, r5, pc}
 800cda8:	20012284 	.word	0x20012284

0800cdac <__sccl>:
 800cdac:	b570      	push	{r4, r5, r6, lr}
 800cdae:	780b      	ldrb	r3, [r1, #0]
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	2b5e      	cmp	r3, #94	; 0x5e
 800cdb4:	bf0b      	itete	eq
 800cdb6:	784b      	ldrbeq	r3, [r1, #1]
 800cdb8:	1c48      	addne	r0, r1, #1
 800cdba:	1c88      	addeq	r0, r1, #2
 800cdbc:	2200      	movne	r2, #0
 800cdbe:	bf08      	it	eq
 800cdc0:	2201      	moveq	r2, #1
 800cdc2:	1e61      	subs	r1, r4, #1
 800cdc4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cdc8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cdcc:	42a9      	cmp	r1, r5
 800cdce:	d1fb      	bne.n	800cdc8 <__sccl+0x1c>
 800cdd0:	b90b      	cbnz	r3, 800cdd6 <__sccl+0x2a>
 800cdd2:	3801      	subs	r0, #1
 800cdd4:	bd70      	pop	{r4, r5, r6, pc}
 800cdd6:	f082 0201 	eor.w	r2, r2, #1
 800cdda:	54e2      	strb	r2, [r4, r3]
 800cddc:	4605      	mov	r5, r0
 800cdde:	4628      	mov	r0, r5
 800cde0:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cde4:	292d      	cmp	r1, #45	; 0x2d
 800cde6:	d006      	beq.n	800cdf6 <__sccl+0x4a>
 800cde8:	295d      	cmp	r1, #93	; 0x5d
 800cdea:	d0f3      	beq.n	800cdd4 <__sccl+0x28>
 800cdec:	b909      	cbnz	r1, 800cdf2 <__sccl+0x46>
 800cdee:	4628      	mov	r0, r5
 800cdf0:	e7f0      	b.n	800cdd4 <__sccl+0x28>
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	e7f1      	b.n	800cdda <__sccl+0x2e>
 800cdf6:	786e      	ldrb	r6, [r5, #1]
 800cdf8:	2e5d      	cmp	r6, #93	; 0x5d
 800cdfa:	d0fa      	beq.n	800cdf2 <__sccl+0x46>
 800cdfc:	42b3      	cmp	r3, r6
 800cdfe:	dcf8      	bgt.n	800cdf2 <__sccl+0x46>
 800ce00:	3502      	adds	r5, #2
 800ce02:	4619      	mov	r1, r3
 800ce04:	3101      	adds	r1, #1
 800ce06:	428e      	cmp	r6, r1
 800ce08:	5462      	strb	r2, [r4, r1]
 800ce0a:	dcfb      	bgt.n	800ce04 <__sccl+0x58>
 800ce0c:	1af1      	subs	r1, r6, r3
 800ce0e:	3901      	subs	r1, #1
 800ce10:	1c58      	adds	r0, r3, #1
 800ce12:	42b3      	cmp	r3, r6
 800ce14:	bfa8      	it	ge
 800ce16:	2100      	movge	r1, #0
 800ce18:	1843      	adds	r3, r0, r1
 800ce1a:	e7e0      	b.n	800cdde <__sccl+0x32>

0800ce1c <_strtol_l.constprop.0>:
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce22:	d001      	beq.n	800ce28 <_strtol_l.constprop.0+0xc>
 800ce24:	2b24      	cmp	r3, #36	; 0x24
 800ce26:	d906      	bls.n	800ce36 <_strtol_l.constprop.0+0x1a>
 800ce28:	f7fd faa0 	bl	800a36c <__errno>
 800ce2c:	2316      	movs	r3, #22
 800ce2e:	6003      	str	r3, [r0, #0]
 800ce30:	2000      	movs	r0, #0
 800ce32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cf1c <_strtol_l.constprop.0+0x100>
 800ce3a:	460d      	mov	r5, r1
 800ce3c:	462e      	mov	r6, r5
 800ce3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce42:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ce46:	f017 0708 	ands.w	r7, r7, #8
 800ce4a:	d1f7      	bne.n	800ce3c <_strtol_l.constprop.0+0x20>
 800ce4c:	2c2d      	cmp	r4, #45	; 0x2d
 800ce4e:	d132      	bne.n	800ceb6 <_strtol_l.constprop.0+0x9a>
 800ce50:	782c      	ldrb	r4, [r5, #0]
 800ce52:	2701      	movs	r7, #1
 800ce54:	1cb5      	adds	r5, r6, #2
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d05b      	beq.n	800cf12 <_strtol_l.constprop.0+0xf6>
 800ce5a:	2b10      	cmp	r3, #16
 800ce5c:	d109      	bne.n	800ce72 <_strtol_l.constprop.0+0x56>
 800ce5e:	2c30      	cmp	r4, #48	; 0x30
 800ce60:	d107      	bne.n	800ce72 <_strtol_l.constprop.0+0x56>
 800ce62:	782c      	ldrb	r4, [r5, #0]
 800ce64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ce68:	2c58      	cmp	r4, #88	; 0x58
 800ce6a:	d14d      	bne.n	800cf08 <_strtol_l.constprop.0+0xec>
 800ce6c:	786c      	ldrb	r4, [r5, #1]
 800ce6e:	2310      	movs	r3, #16
 800ce70:	3502      	adds	r5, #2
 800ce72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ce76:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce7a:	f04f 0c00 	mov.w	ip, #0
 800ce7e:	fbb8 f9f3 	udiv	r9, r8, r3
 800ce82:	4666      	mov	r6, ip
 800ce84:	fb03 8a19 	mls	sl, r3, r9, r8
 800ce88:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ce8c:	f1be 0f09 	cmp.w	lr, #9
 800ce90:	d816      	bhi.n	800cec0 <_strtol_l.constprop.0+0xa4>
 800ce92:	4674      	mov	r4, lr
 800ce94:	42a3      	cmp	r3, r4
 800ce96:	dd24      	ble.n	800cee2 <_strtol_l.constprop.0+0xc6>
 800ce98:	f1bc 0f00 	cmp.w	ip, #0
 800ce9c:	db1e      	blt.n	800cedc <_strtol_l.constprop.0+0xc0>
 800ce9e:	45b1      	cmp	r9, r6
 800cea0:	d31c      	bcc.n	800cedc <_strtol_l.constprop.0+0xc0>
 800cea2:	d101      	bne.n	800cea8 <_strtol_l.constprop.0+0x8c>
 800cea4:	45a2      	cmp	sl, r4
 800cea6:	db19      	blt.n	800cedc <_strtol_l.constprop.0+0xc0>
 800cea8:	fb06 4603 	mla	r6, r6, r3, r4
 800ceac:	f04f 0c01 	mov.w	ip, #1
 800ceb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ceb4:	e7e8      	b.n	800ce88 <_strtol_l.constprop.0+0x6c>
 800ceb6:	2c2b      	cmp	r4, #43	; 0x2b
 800ceb8:	bf04      	itt	eq
 800ceba:	782c      	ldrbeq	r4, [r5, #0]
 800cebc:	1cb5      	addeq	r5, r6, #2
 800cebe:	e7ca      	b.n	800ce56 <_strtol_l.constprop.0+0x3a>
 800cec0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cec4:	f1be 0f19 	cmp.w	lr, #25
 800cec8:	d801      	bhi.n	800cece <_strtol_l.constprop.0+0xb2>
 800ceca:	3c37      	subs	r4, #55	; 0x37
 800cecc:	e7e2      	b.n	800ce94 <_strtol_l.constprop.0+0x78>
 800cece:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ced2:	f1be 0f19 	cmp.w	lr, #25
 800ced6:	d804      	bhi.n	800cee2 <_strtol_l.constprop.0+0xc6>
 800ced8:	3c57      	subs	r4, #87	; 0x57
 800ceda:	e7db      	b.n	800ce94 <_strtol_l.constprop.0+0x78>
 800cedc:	f04f 3cff 	mov.w	ip, #4294967295
 800cee0:	e7e6      	b.n	800ceb0 <_strtol_l.constprop.0+0x94>
 800cee2:	f1bc 0f00 	cmp.w	ip, #0
 800cee6:	da05      	bge.n	800cef4 <_strtol_l.constprop.0+0xd8>
 800cee8:	2322      	movs	r3, #34	; 0x22
 800ceea:	6003      	str	r3, [r0, #0]
 800ceec:	4646      	mov	r6, r8
 800ceee:	b942      	cbnz	r2, 800cf02 <_strtol_l.constprop.0+0xe6>
 800cef0:	4630      	mov	r0, r6
 800cef2:	e79e      	b.n	800ce32 <_strtol_l.constprop.0+0x16>
 800cef4:	b107      	cbz	r7, 800cef8 <_strtol_l.constprop.0+0xdc>
 800cef6:	4276      	negs	r6, r6
 800cef8:	2a00      	cmp	r2, #0
 800cefa:	d0f9      	beq.n	800cef0 <_strtol_l.constprop.0+0xd4>
 800cefc:	f1bc 0f00 	cmp.w	ip, #0
 800cf00:	d000      	beq.n	800cf04 <_strtol_l.constprop.0+0xe8>
 800cf02:	1e69      	subs	r1, r5, #1
 800cf04:	6011      	str	r1, [r2, #0]
 800cf06:	e7f3      	b.n	800cef0 <_strtol_l.constprop.0+0xd4>
 800cf08:	2430      	movs	r4, #48	; 0x30
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d1b1      	bne.n	800ce72 <_strtol_l.constprop.0+0x56>
 800cf0e:	2308      	movs	r3, #8
 800cf10:	e7af      	b.n	800ce72 <_strtol_l.constprop.0+0x56>
 800cf12:	2c30      	cmp	r4, #48	; 0x30
 800cf14:	d0a5      	beq.n	800ce62 <_strtol_l.constprop.0+0x46>
 800cf16:	230a      	movs	r3, #10
 800cf18:	e7ab      	b.n	800ce72 <_strtol_l.constprop.0+0x56>
 800cf1a:	bf00      	nop
 800cf1c:	08010c7d 	.word	0x08010c7d

0800cf20 <_strtol_r>:
 800cf20:	f7ff bf7c 	b.w	800ce1c <_strtol_l.constprop.0>

0800cf24 <_strtoul_l.constprop.0>:
 800cf24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf28:	4f36      	ldr	r7, [pc, #216]	; (800d004 <_strtoul_l.constprop.0+0xe0>)
 800cf2a:	4686      	mov	lr, r0
 800cf2c:	460d      	mov	r5, r1
 800cf2e:	4628      	mov	r0, r5
 800cf30:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf34:	5de6      	ldrb	r6, [r4, r7]
 800cf36:	f016 0608 	ands.w	r6, r6, #8
 800cf3a:	d1f8      	bne.n	800cf2e <_strtoul_l.constprop.0+0xa>
 800cf3c:	2c2d      	cmp	r4, #45	; 0x2d
 800cf3e:	d12f      	bne.n	800cfa0 <_strtoul_l.constprop.0+0x7c>
 800cf40:	782c      	ldrb	r4, [r5, #0]
 800cf42:	2601      	movs	r6, #1
 800cf44:	1c85      	adds	r5, r0, #2
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d057      	beq.n	800cffa <_strtoul_l.constprop.0+0xd6>
 800cf4a:	2b10      	cmp	r3, #16
 800cf4c:	d109      	bne.n	800cf62 <_strtoul_l.constprop.0+0x3e>
 800cf4e:	2c30      	cmp	r4, #48	; 0x30
 800cf50:	d107      	bne.n	800cf62 <_strtoul_l.constprop.0+0x3e>
 800cf52:	7828      	ldrb	r0, [r5, #0]
 800cf54:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cf58:	2858      	cmp	r0, #88	; 0x58
 800cf5a:	d149      	bne.n	800cff0 <_strtoul_l.constprop.0+0xcc>
 800cf5c:	786c      	ldrb	r4, [r5, #1]
 800cf5e:	2310      	movs	r3, #16
 800cf60:	3502      	adds	r5, #2
 800cf62:	f04f 38ff 	mov.w	r8, #4294967295
 800cf66:	2700      	movs	r7, #0
 800cf68:	fbb8 f8f3 	udiv	r8, r8, r3
 800cf6c:	fb03 f908 	mul.w	r9, r3, r8
 800cf70:	ea6f 0909 	mvn.w	r9, r9
 800cf74:	4638      	mov	r0, r7
 800cf76:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cf7a:	f1bc 0f09 	cmp.w	ip, #9
 800cf7e:	d814      	bhi.n	800cfaa <_strtoul_l.constprop.0+0x86>
 800cf80:	4664      	mov	r4, ip
 800cf82:	42a3      	cmp	r3, r4
 800cf84:	dd22      	ble.n	800cfcc <_strtoul_l.constprop.0+0xa8>
 800cf86:	2f00      	cmp	r7, #0
 800cf88:	db1d      	blt.n	800cfc6 <_strtoul_l.constprop.0+0xa2>
 800cf8a:	4580      	cmp	r8, r0
 800cf8c:	d31b      	bcc.n	800cfc6 <_strtoul_l.constprop.0+0xa2>
 800cf8e:	d101      	bne.n	800cf94 <_strtoul_l.constprop.0+0x70>
 800cf90:	45a1      	cmp	r9, r4
 800cf92:	db18      	blt.n	800cfc6 <_strtoul_l.constprop.0+0xa2>
 800cf94:	fb00 4003 	mla	r0, r0, r3, r4
 800cf98:	2701      	movs	r7, #1
 800cf9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf9e:	e7ea      	b.n	800cf76 <_strtoul_l.constprop.0+0x52>
 800cfa0:	2c2b      	cmp	r4, #43	; 0x2b
 800cfa2:	bf04      	itt	eq
 800cfa4:	782c      	ldrbeq	r4, [r5, #0]
 800cfa6:	1c85      	addeq	r5, r0, #2
 800cfa8:	e7cd      	b.n	800cf46 <_strtoul_l.constprop.0+0x22>
 800cfaa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cfae:	f1bc 0f19 	cmp.w	ip, #25
 800cfb2:	d801      	bhi.n	800cfb8 <_strtoul_l.constprop.0+0x94>
 800cfb4:	3c37      	subs	r4, #55	; 0x37
 800cfb6:	e7e4      	b.n	800cf82 <_strtoul_l.constprop.0+0x5e>
 800cfb8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cfbc:	f1bc 0f19 	cmp.w	ip, #25
 800cfc0:	d804      	bhi.n	800cfcc <_strtoul_l.constprop.0+0xa8>
 800cfc2:	3c57      	subs	r4, #87	; 0x57
 800cfc4:	e7dd      	b.n	800cf82 <_strtoul_l.constprop.0+0x5e>
 800cfc6:	f04f 37ff 	mov.w	r7, #4294967295
 800cfca:	e7e6      	b.n	800cf9a <_strtoul_l.constprop.0+0x76>
 800cfcc:	2f00      	cmp	r7, #0
 800cfce:	da07      	bge.n	800cfe0 <_strtoul_l.constprop.0+0xbc>
 800cfd0:	2322      	movs	r3, #34	; 0x22
 800cfd2:	f8ce 3000 	str.w	r3, [lr]
 800cfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfda:	b932      	cbnz	r2, 800cfea <_strtoul_l.constprop.0+0xc6>
 800cfdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfe0:	b106      	cbz	r6, 800cfe4 <_strtoul_l.constprop.0+0xc0>
 800cfe2:	4240      	negs	r0, r0
 800cfe4:	2a00      	cmp	r2, #0
 800cfe6:	d0f9      	beq.n	800cfdc <_strtoul_l.constprop.0+0xb8>
 800cfe8:	b107      	cbz	r7, 800cfec <_strtoul_l.constprop.0+0xc8>
 800cfea:	1e69      	subs	r1, r5, #1
 800cfec:	6011      	str	r1, [r2, #0]
 800cfee:	e7f5      	b.n	800cfdc <_strtoul_l.constprop.0+0xb8>
 800cff0:	2430      	movs	r4, #48	; 0x30
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1b5      	bne.n	800cf62 <_strtoul_l.constprop.0+0x3e>
 800cff6:	2308      	movs	r3, #8
 800cff8:	e7b3      	b.n	800cf62 <_strtoul_l.constprop.0+0x3e>
 800cffa:	2c30      	cmp	r4, #48	; 0x30
 800cffc:	d0a9      	beq.n	800cf52 <_strtoul_l.constprop.0+0x2e>
 800cffe:	230a      	movs	r3, #10
 800d000:	e7af      	b.n	800cf62 <_strtoul_l.constprop.0+0x3e>
 800d002:	bf00      	nop
 800d004:	08010c7d 	.word	0x08010c7d

0800d008 <_strtoul_r>:
 800d008:	f7ff bf8c 	b.w	800cf24 <_strtoul_l.constprop.0>

0800d00c <__submore>:
 800d00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d010:	460c      	mov	r4, r1
 800d012:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d018:	4299      	cmp	r1, r3
 800d01a:	d11d      	bne.n	800d058 <__submore+0x4c>
 800d01c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d020:	f7fd fa4a 	bl	800a4b8 <_malloc_r>
 800d024:	b918      	cbnz	r0, 800d02e <__submore+0x22>
 800d026:	f04f 30ff 	mov.w	r0, #4294967295
 800d02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d02e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d032:	63a3      	str	r3, [r4, #56]	; 0x38
 800d034:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d038:	6360      	str	r0, [r4, #52]	; 0x34
 800d03a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d03e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d042:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d046:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d04a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d04e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d052:	6020      	str	r0, [r4, #0]
 800d054:	2000      	movs	r0, #0
 800d056:	e7e8      	b.n	800d02a <__submore+0x1e>
 800d058:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d05a:	0077      	lsls	r7, r6, #1
 800d05c:	463a      	mov	r2, r7
 800d05e:	f000 fa25 	bl	800d4ac <_realloc_r>
 800d062:	4605      	mov	r5, r0
 800d064:	2800      	cmp	r0, #0
 800d066:	d0de      	beq.n	800d026 <__submore+0x1a>
 800d068:	eb00 0806 	add.w	r8, r0, r6
 800d06c:	4601      	mov	r1, r0
 800d06e:	4632      	mov	r2, r6
 800d070:	4640      	mov	r0, r8
 800d072:	f7fe fe55 	bl	800bd20 <memcpy>
 800d076:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d07a:	f8c4 8000 	str.w	r8, [r4]
 800d07e:	e7e9      	b.n	800d054 <__submore+0x48>

0800d080 <__assert_func>:
 800d080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d082:	4614      	mov	r4, r2
 800d084:	461a      	mov	r2, r3
 800d086:	4b09      	ldr	r3, [pc, #36]	; (800d0ac <__assert_func+0x2c>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4605      	mov	r5, r0
 800d08c:	68d8      	ldr	r0, [r3, #12]
 800d08e:	b14c      	cbz	r4, 800d0a4 <__assert_func+0x24>
 800d090:	4b07      	ldr	r3, [pc, #28]	; (800d0b0 <__assert_func+0x30>)
 800d092:	9100      	str	r1, [sp, #0]
 800d094:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d098:	4906      	ldr	r1, [pc, #24]	; (800d0b4 <__assert_func+0x34>)
 800d09a:	462b      	mov	r3, r5
 800d09c:	f000 f9a6 	bl	800d3ec <fiprintf>
 800d0a0:	f000 fc5a 	bl	800d958 <abort>
 800d0a4:	4b04      	ldr	r3, [pc, #16]	; (800d0b8 <__assert_func+0x38>)
 800d0a6:	461c      	mov	r4, r3
 800d0a8:	e7f3      	b.n	800d092 <__assert_func+0x12>
 800d0aa:	bf00      	nop
 800d0ac:	20000014 	.word	0x20000014
 800d0b0:	08010c40 	.word	0x08010c40
 800d0b4:	08010c4d 	.word	0x08010c4d
 800d0b8:	08010c7b 	.word	0x08010c7b

0800d0bc <__sflush_r>:
 800d0bc:	898a      	ldrh	r2, [r1, #12]
 800d0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c2:	4605      	mov	r5, r0
 800d0c4:	0710      	lsls	r0, r2, #28
 800d0c6:	460c      	mov	r4, r1
 800d0c8:	d458      	bmi.n	800d17c <__sflush_r+0xc0>
 800d0ca:	684b      	ldr	r3, [r1, #4]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	dc05      	bgt.n	800d0dc <__sflush_r+0x20>
 800d0d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	dc02      	bgt.n	800d0dc <__sflush_r+0x20>
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0de:	2e00      	cmp	r6, #0
 800d0e0:	d0f9      	beq.n	800d0d6 <__sflush_r+0x1a>
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0e8:	682f      	ldr	r7, [r5, #0]
 800d0ea:	602b      	str	r3, [r5, #0]
 800d0ec:	d032      	beq.n	800d154 <__sflush_r+0x98>
 800d0ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0f0:	89a3      	ldrh	r3, [r4, #12]
 800d0f2:	075a      	lsls	r2, r3, #29
 800d0f4:	d505      	bpl.n	800d102 <__sflush_r+0x46>
 800d0f6:	6863      	ldr	r3, [r4, #4]
 800d0f8:	1ac0      	subs	r0, r0, r3
 800d0fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0fc:	b10b      	cbz	r3, 800d102 <__sflush_r+0x46>
 800d0fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d100:	1ac0      	subs	r0, r0, r3
 800d102:	2300      	movs	r3, #0
 800d104:	4602      	mov	r2, r0
 800d106:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d108:	6a21      	ldr	r1, [r4, #32]
 800d10a:	4628      	mov	r0, r5
 800d10c:	47b0      	blx	r6
 800d10e:	1c43      	adds	r3, r0, #1
 800d110:	89a3      	ldrh	r3, [r4, #12]
 800d112:	d106      	bne.n	800d122 <__sflush_r+0x66>
 800d114:	6829      	ldr	r1, [r5, #0]
 800d116:	291d      	cmp	r1, #29
 800d118:	d82c      	bhi.n	800d174 <__sflush_r+0xb8>
 800d11a:	4a2a      	ldr	r2, [pc, #168]	; (800d1c4 <__sflush_r+0x108>)
 800d11c:	40ca      	lsrs	r2, r1
 800d11e:	07d6      	lsls	r6, r2, #31
 800d120:	d528      	bpl.n	800d174 <__sflush_r+0xb8>
 800d122:	2200      	movs	r2, #0
 800d124:	6062      	str	r2, [r4, #4]
 800d126:	04d9      	lsls	r1, r3, #19
 800d128:	6922      	ldr	r2, [r4, #16]
 800d12a:	6022      	str	r2, [r4, #0]
 800d12c:	d504      	bpl.n	800d138 <__sflush_r+0x7c>
 800d12e:	1c42      	adds	r2, r0, #1
 800d130:	d101      	bne.n	800d136 <__sflush_r+0x7a>
 800d132:	682b      	ldr	r3, [r5, #0]
 800d134:	b903      	cbnz	r3, 800d138 <__sflush_r+0x7c>
 800d136:	6560      	str	r0, [r4, #84]	; 0x54
 800d138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d13a:	602f      	str	r7, [r5, #0]
 800d13c:	2900      	cmp	r1, #0
 800d13e:	d0ca      	beq.n	800d0d6 <__sflush_r+0x1a>
 800d140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d144:	4299      	cmp	r1, r3
 800d146:	d002      	beq.n	800d14e <__sflush_r+0x92>
 800d148:	4628      	mov	r0, r5
 800d14a:	f7fd f949 	bl	800a3e0 <_free_r>
 800d14e:	2000      	movs	r0, #0
 800d150:	6360      	str	r0, [r4, #52]	; 0x34
 800d152:	e7c1      	b.n	800d0d8 <__sflush_r+0x1c>
 800d154:	6a21      	ldr	r1, [r4, #32]
 800d156:	2301      	movs	r3, #1
 800d158:	4628      	mov	r0, r5
 800d15a:	47b0      	blx	r6
 800d15c:	1c41      	adds	r1, r0, #1
 800d15e:	d1c7      	bne.n	800d0f0 <__sflush_r+0x34>
 800d160:	682b      	ldr	r3, [r5, #0]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d0c4      	beq.n	800d0f0 <__sflush_r+0x34>
 800d166:	2b1d      	cmp	r3, #29
 800d168:	d001      	beq.n	800d16e <__sflush_r+0xb2>
 800d16a:	2b16      	cmp	r3, #22
 800d16c:	d101      	bne.n	800d172 <__sflush_r+0xb6>
 800d16e:	602f      	str	r7, [r5, #0]
 800d170:	e7b1      	b.n	800d0d6 <__sflush_r+0x1a>
 800d172:	89a3      	ldrh	r3, [r4, #12]
 800d174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d178:	81a3      	strh	r3, [r4, #12]
 800d17a:	e7ad      	b.n	800d0d8 <__sflush_r+0x1c>
 800d17c:	690f      	ldr	r7, [r1, #16]
 800d17e:	2f00      	cmp	r7, #0
 800d180:	d0a9      	beq.n	800d0d6 <__sflush_r+0x1a>
 800d182:	0793      	lsls	r3, r2, #30
 800d184:	680e      	ldr	r6, [r1, #0]
 800d186:	bf08      	it	eq
 800d188:	694b      	ldreq	r3, [r1, #20]
 800d18a:	600f      	str	r7, [r1, #0]
 800d18c:	bf18      	it	ne
 800d18e:	2300      	movne	r3, #0
 800d190:	eba6 0807 	sub.w	r8, r6, r7
 800d194:	608b      	str	r3, [r1, #8]
 800d196:	f1b8 0f00 	cmp.w	r8, #0
 800d19a:	dd9c      	ble.n	800d0d6 <__sflush_r+0x1a>
 800d19c:	6a21      	ldr	r1, [r4, #32]
 800d19e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d1a0:	4643      	mov	r3, r8
 800d1a2:	463a      	mov	r2, r7
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	47b0      	blx	r6
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	dc06      	bgt.n	800d1ba <__sflush_r+0xfe>
 800d1ac:	89a3      	ldrh	r3, [r4, #12]
 800d1ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1b2:	81a3      	strh	r3, [r4, #12]
 800d1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b8:	e78e      	b.n	800d0d8 <__sflush_r+0x1c>
 800d1ba:	4407      	add	r7, r0
 800d1bc:	eba8 0800 	sub.w	r8, r8, r0
 800d1c0:	e7e9      	b.n	800d196 <__sflush_r+0xda>
 800d1c2:	bf00      	nop
 800d1c4:	20400001 	.word	0x20400001

0800d1c8 <_fflush_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	690b      	ldr	r3, [r1, #16]
 800d1cc:	4605      	mov	r5, r0
 800d1ce:	460c      	mov	r4, r1
 800d1d0:	b913      	cbnz	r3, 800d1d8 <_fflush_r+0x10>
 800d1d2:	2500      	movs	r5, #0
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	bd38      	pop	{r3, r4, r5, pc}
 800d1d8:	b118      	cbz	r0, 800d1e2 <_fflush_r+0x1a>
 800d1da:	6983      	ldr	r3, [r0, #24]
 800d1dc:	b90b      	cbnz	r3, 800d1e2 <_fflush_r+0x1a>
 800d1de:	f000 f887 	bl	800d2f0 <__sinit>
 800d1e2:	4b14      	ldr	r3, [pc, #80]	; (800d234 <_fflush_r+0x6c>)
 800d1e4:	429c      	cmp	r4, r3
 800d1e6:	d11b      	bne.n	800d220 <_fflush_r+0x58>
 800d1e8:	686c      	ldr	r4, [r5, #4]
 800d1ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d0ef      	beq.n	800d1d2 <_fflush_r+0xa>
 800d1f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1f4:	07d0      	lsls	r0, r2, #31
 800d1f6:	d404      	bmi.n	800d202 <_fflush_r+0x3a>
 800d1f8:	0599      	lsls	r1, r3, #22
 800d1fa:	d402      	bmi.n	800d202 <_fflush_r+0x3a>
 800d1fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1fe:	f000 f927 	bl	800d450 <__retarget_lock_acquire_recursive>
 800d202:	4628      	mov	r0, r5
 800d204:	4621      	mov	r1, r4
 800d206:	f7ff ff59 	bl	800d0bc <__sflush_r>
 800d20a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d20c:	07da      	lsls	r2, r3, #31
 800d20e:	4605      	mov	r5, r0
 800d210:	d4e0      	bmi.n	800d1d4 <_fflush_r+0xc>
 800d212:	89a3      	ldrh	r3, [r4, #12]
 800d214:	059b      	lsls	r3, r3, #22
 800d216:	d4dd      	bmi.n	800d1d4 <_fflush_r+0xc>
 800d218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d21a:	f000 f91a 	bl	800d452 <__retarget_lock_release_recursive>
 800d21e:	e7d9      	b.n	800d1d4 <_fflush_r+0xc>
 800d220:	4b05      	ldr	r3, [pc, #20]	; (800d238 <_fflush_r+0x70>)
 800d222:	429c      	cmp	r4, r3
 800d224:	d101      	bne.n	800d22a <_fflush_r+0x62>
 800d226:	68ac      	ldr	r4, [r5, #8]
 800d228:	e7df      	b.n	800d1ea <_fflush_r+0x22>
 800d22a:	4b04      	ldr	r3, [pc, #16]	; (800d23c <_fflush_r+0x74>)
 800d22c:	429c      	cmp	r4, r3
 800d22e:	bf08      	it	eq
 800d230:	68ec      	ldreq	r4, [r5, #12]
 800d232:	e7da      	b.n	800d1ea <_fflush_r+0x22>
 800d234:	08010da0 	.word	0x08010da0
 800d238:	08010dc0 	.word	0x08010dc0
 800d23c:	08010d80 	.word	0x08010d80

0800d240 <std>:
 800d240:	2300      	movs	r3, #0
 800d242:	b510      	push	{r4, lr}
 800d244:	4604      	mov	r4, r0
 800d246:	e9c0 3300 	strd	r3, r3, [r0]
 800d24a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d24e:	6083      	str	r3, [r0, #8]
 800d250:	8181      	strh	r1, [r0, #12]
 800d252:	6643      	str	r3, [r0, #100]	; 0x64
 800d254:	81c2      	strh	r2, [r0, #14]
 800d256:	6183      	str	r3, [r0, #24]
 800d258:	4619      	mov	r1, r3
 800d25a:	2208      	movs	r2, #8
 800d25c:	305c      	adds	r0, #92	; 0x5c
 800d25e:	f7fd f8b7 	bl	800a3d0 <memset>
 800d262:	4b05      	ldr	r3, [pc, #20]	; (800d278 <std+0x38>)
 800d264:	6263      	str	r3, [r4, #36]	; 0x24
 800d266:	4b05      	ldr	r3, [pc, #20]	; (800d27c <std+0x3c>)
 800d268:	62a3      	str	r3, [r4, #40]	; 0x28
 800d26a:	4b05      	ldr	r3, [pc, #20]	; (800d280 <std+0x40>)
 800d26c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d26e:	4b05      	ldr	r3, [pc, #20]	; (800d284 <std+0x44>)
 800d270:	6224      	str	r4, [r4, #32]
 800d272:	6323      	str	r3, [r4, #48]	; 0x30
 800d274:	bd10      	pop	{r4, pc}
 800d276:	bf00      	nop
 800d278:	0800af2d 	.word	0x0800af2d
 800d27c:	0800af53 	.word	0x0800af53
 800d280:	0800af8b 	.word	0x0800af8b
 800d284:	0800afaf 	.word	0x0800afaf

0800d288 <_cleanup_r>:
 800d288:	4901      	ldr	r1, [pc, #4]	; (800d290 <_cleanup_r+0x8>)
 800d28a:	f000 b8c1 	b.w	800d410 <_fwalk_reent>
 800d28e:	bf00      	nop
 800d290:	0800d1c9 	.word	0x0800d1c9

0800d294 <__sfmoreglue>:
 800d294:	b570      	push	{r4, r5, r6, lr}
 800d296:	2268      	movs	r2, #104	; 0x68
 800d298:	1e4d      	subs	r5, r1, #1
 800d29a:	4355      	muls	r5, r2
 800d29c:	460e      	mov	r6, r1
 800d29e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d2a2:	f7fd f909 	bl	800a4b8 <_malloc_r>
 800d2a6:	4604      	mov	r4, r0
 800d2a8:	b140      	cbz	r0, 800d2bc <__sfmoreglue+0x28>
 800d2aa:	2100      	movs	r1, #0
 800d2ac:	e9c0 1600 	strd	r1, r6, [r0]
 800d2b0:	300c      	adds	r0, #12
 800d2b2:	60a0      	str	r0, [r4, #8]
 800d2b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d2b8:	f7fd f88a 	bl	800a3d0 <memset>
 800d2bc:	4620      	mov	r0, r4
 800d2be:	bd70      	pop	{r4, r5, r6, pc}

0800d2c0 <__sfp_lock_acquire>:
 800d2c0:	4801      	ldr	r0, [pc, #4]	; (800d2c8 <__sfp_lock_acquire+0x8>)
 800d2c2:	f000 b8c5 	b.w	800d450 <__retarget_lock_acquire_recursive>
 800d2c6:	bf00      	nop
 800d2c8:	20012289 	.word	0x20012289

0800d2cc <__sfp_lock_release>:
 800d2cc:	4801      	ldr	r0, [pc, #4]	; (800d2d4 <__sfp_lock_release+0x8>)
 800d2ce:	f000 b8c0 	b.w	800d452 <__retarget_lock_release_recursive>
 800d2d2:	bf00      	nop
 800d2d4:	20012289 	.word	0x20012289

0800d2d8 <__sinit_lock_acquire>:
 800d2d8:	4801      	ldr	r0, [pc, #4]	; (800d2e0 <__sinit_lock_acquire+0x8>)
 800d2da:	f000 b8b9 	b.w	800d450 <__retarget_lock_acquire_recursive>
 800d2de:	bf00      	nop
 800d2e0:	2001228a 	.word	0x2001228a

0800d2e4 <__sinit_lock_release>:
 800d2e4:	4801      	ldr	r0, [pc, #4]	; (800d2ec <__sinit_lock_release+0x8>)
 800d2e6:	f000 b8b4 	b.w	800d452 <__retarget_lock_release_recursive>
 800d2ea:	bf00      	nop
 800d2ec:	2001228a 	.word	0x2001228a

0800d2f0 <__sinit>:
 800d2f0:	b510      	push	{r4, lr}
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	f7ff fff0 	bl	800d2d8 <__sinit_lock_acquire>
 800d2f8:	69a3      	ldr	r3, [r4, #24]
 800d2fa:	b11b      	cbz	r3, 800d304 <__sinit+0x14>
 800d2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d300:	f7ff bff0 	b.w	800d2e4 <__sinit_lock_release>
 800d304:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d308:	6523      	str	r3, [r4, #80]	; 0x50
 800d30a:	4b13      	ldr	r3, [pc, #76]	; (800d358 <__sinit+0x68>)
 800d30c:	4a13      	ldr	r2, [pc, #76]	; (800d35c <__sinit+0x6c>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	62a2      	str	r2, [r4, #40]	; 0x28
 800d312:	42a3      	cmp	r3, r4
 800d314:	bf04      	itt	eq
 800d316:	2301      	moveq	r3, #1
 800d318:	61a3      	streq	r3, [r4, #24]
 800d31a:	4620      	mov	r0, r4
 800d31c:	f000 f820 	bl	800d360 <__sfp>
 800d320:	6060      	str	r0, [r4, #4]
 800d322:	4620      	mov	r0, r4
 800d324:	f000 f81c 	bl	800d360 <__sfp>
 800d328:	60a0      	str	r0, [r4, #8]
 800d32a:	4620      	mov	r0, r4
 800d32c:	f000 f818 	bl	800d360 <__sfp>
 800d330:	2200      	movs	r2, #0
 800d332:	60e0      	str	r0, [r4, #12]
 800d334:	2104      	movs	r1, #4
 800d336:	6860      	ldr	r0, [r4, #4]
 800d338:	f7ff ff82 	bl	800d240 <std>
 800d33c:	68a0      	ldr	r0, [r4, #8]
 800d33e:	2201      	movs	r2, #1
 800d340:	2109      	movs	r1, #9
 800d342:	f7ff ff7d 	bl	800d240 <std>
 800d346:	68e0      	ldr	r0, [r4, #12]
 800d348:	2202      	movs	r2, #2
 800d34a:	2112      	movs	r1, #18
 800d34c:	f7ff ff78 	bl	800d240 <std>
 800d350:	2301      	movs	r3, #1
 800d352:	61a3      	str	r3, [r4, #24]
 800d354:	e7d2      	b.n	800d2fc <__sinit+0xc>
 800d356:	bf00      	nop
 800d358:	080109f0 	.word	0x080109f0
 800d35c:	0800d289 	.word	0x0800d289

0800d360 <__sfp>:
 800d360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d362:	4607      	mov	r7, r0
 800d364:	f7ff ffac 	bl	800d2c0 <__sfp_lock_acquire>
 800d368:	4b1e      	ldr	r3, [pc, #120]	; (800d3e4 <__sfp+0x84>)
 800d36a:	681e      	ldr	r6, [r3, #0]
 800d36c:	69b3      	ldr	r3, [r6, #24]
 800d36e:	b913      	cbnz	r3, 800d376 <__sfp+0x16>
 800d370:	4630      	mov	r0, r6
 800d372:	f7ff ffbd 	bl	800d2f0 <__sinit>
 800d376:	3648      	adds	r6, #72	; 0x48
 800d378:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d37c:	3b01      	subs	r3, #1
 800d37e:	d503      	bpl.n	800d388 <__sfp+0x28>
 800d380:	6833      	ldr	r3, [r6, #0]
 800d382:	b30b      	cbz	r3, 800d3c8 <__sfp+0x68>
 800d384:	6836      	ldr	r6, [r6, #0]
 800d386:	e7f7      	b.n	800d378 <__sfp+0x18>
 800d388:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d38c:	b9d5      	cbnz	r5, 800d3c4 <__sfp+0x64>
 800d38e:	4b16      	ldr	r3, [pc, #88]	; (800d3e8 <__sfp+0x88>)
 800d390:	60e3      	str	r3, [r4, #12]
 800d392:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d396:	6665      	str	r5, [r4, #100]	; 0x64
 800d398:	f000 f859 	bl	800d44e <__retarget_lock_init_recursive>
 800d39c:	f7ff ff96 	bl	800d2cc <__sfp_lock_release>
 800d3a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d3a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d3a8:	6025      	str	r5, [r4, #0]
 800d3aa:	61a5      	str	r5, [r4, #24]
 800d3ac:	2208      	movs	r2, #8
 800d3ae:	4629      	mov	r1, r5
 800d3b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d3b4:	f7fd f80c 	bl	800a3d0 <memset>
 800d3b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d3bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3c4:	3468      	adds	r4, #104	; 0x68
 800d3c6:	e7d9      	b.n	800d37c <__sfp+0x1c>
 800d3c8:	2104      	movs	r1, #4
 800d3ca:	4638      	mov	r0, r7
 800d3cc:	f7ff ff62 	bl	800d294 <__sfmoreglue>
 800d3d0:	4604      	mov	r4, r0
 800d3d2:	6030      	str	r0, [r6, #0]
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	d1d5      	bne.n	800d384 <__sfp+0x24>
 800d3d8:	f7ff ff78 	bl	800d2cc <__sfp_lock_release>
 800d3dc:	230c      	movs	r3, #12
 800d3de:	603b      	str	r3, [r7, #0]
 800d3e0:	e7ee      	b.n	800d3c0 <__sfp+0x60>
 800d3e2:	bf00      	nop
 800d3e4:	080109f0 	.word	0x080109f0
 800d3e8:	ffff0001 	.word	0xffff0001

0800d3ec <fiprintf>:
 800d3ec:	b40e      	push	{r1, r2, r3}
 800d3ee:	b503      	push	{r0, r1, lr}
 800d3f0:	4601      	mov	r1, r0
 800d3f2:	ab03      	add	r3, sp, #12
 800d3f4:	4805      	ldr	r0, [pc, #20]	; (800d40c <fiprintf+0x20>)
 800d3f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3fa:	6800      	ldr	r0, [r0, #0]
 800d3fc:	9301      	str	r3, [sp, #4]
 800d3fe:	f000 f8ad 	bl	800d55c <_vfiprintf_r>
 800d402:	b002      	add	sp, #8
 800d404:	f85d eb04 	ldr.w	lr, [sp], #4
 800d408:	b003      	add	sp, #12
 800d40a:	4770      	bx	lr
 800d40c:	20000014 	.word	0x20000014

0800d410 <_fwalk_reent>:
 800d410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d414:	4606      	mov	r6, r0
 800d416:	4688      	mov	r8, r1
 800d418:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d41c:	2700      	movs	r7, #0
 800d41e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d422:	f1b9 0901 	subs.w	r9, r9, #1
 800d426:	d505      	bpl.n	800d434 <_fwalk_reent+0x24>
 800d428:	6824      	ldr	r4, [r4, #0]
 800d42a:	2c00      	cmp	r4, #0
 800d42c:	d1f7      	bne.n	800d41e <_fwalk_reent+0xe>
 800d42e:	4638      	mov	r0, r7
 800d430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d434:	89ab      	ldrh	r3, [r5, #12]
 800d436:	2b01      	cmp	r3, #1
 800d438:	d907      	bls.n	800d44a <_fwalk_reent+0x3a>
 800d43a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d43e:	3301      	adds	r3, #1
 800d440:	d003      	beq.n	800d44a <_fwalk_reent+0x3a>
 800d442:	4629      	mov	r1, r5
 800d444:	4630      	mov	r0, r6
 800d446:	47c0      	blx	r8
 800d448:	4307      	orrs	r7, r0
 800d44a:	3568      	adds	r5, #104	; 0x68
 800d44c:	e7e9      	b.n	800d422 <_fwalk_reent+0x12>

0800d44e <__retarget_lock_init_recursive>:
 800d44e:	4770      	bx	lr

0800d450 <__retarget_lock_acquire_recursive>:
 800d450:	4770      	bx	lr

0800d452 <__retarget_lock_release_recursive>:
 800d452:	4770      	bx	lr

0800d454 <__ascii_mbtowc>:
 800d454:	b082      	sub	sp, #8
 800d456:	b901      	cbnz	r1, 800d45a <__ascii_mbtowc+0x6>
 800d458:	a901      	add	r1, sp, #4
 800d45a:	b142      	cbz	r2, 800d46e <__ascii_mbtowc+0x1a>
 800d45c:	b14b      	cbz	r3, 800d472 <__ascii_mbtowc+0x1e>
 800d45e:	7813      	ldrb	r3, [r2, #0]
 800d460:	600b      	str	r3, [r1, #0]
 800d462:	7812      	ldrb	r2, [r2, #0]
 800d464:	1e10      	subs	r0, r2, #0
 800d466:	bf18      	it	ne
 800d468:	2001      	movne	r0, #1
 800d46a:	b002      	add	sp, #8
 800d46c:	4770      	bx	lr
 800d46e:	4610      	mov	r0, r2
 800d470:	e7fb      	b.n	800d46a <__ascii_mbtowc+0x16>
 800d472:	f06f 0001 	mvn.w	r0, #1
 800d476:	e7f8      	b.n	800d46a <__ascii_mbtowc+0x16>

0800d478 <memmove>:
 800d478:	4288      	cmp	r0, r1
 800d47a:	b510      	push	{r4, lr}
 800d47c:	eb01 0402 	add.w	r4, r1, r2
 800d480:	d902      	bls.n	800d488 <memmove+0x10>
 800d482:	4284      	cmp	r4, r0
 800d484:	4623      	mov	r3, r4
 800d486:	d807      	bhi.n	800d498 <memmove+0x20>
 800d488:	1e43      	subs	r3, r0, #1
 800d48a:	42a1      	cmp	r1, r4
 800d48c:	d008      	beq.n	800d4a0 <memmove+0x28>
 800d48e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d492:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d496:	e7f8      	b.n	800d48a <memmove+0x12>
 800d498:	4402      	add	r2, r0
 800d49a:	4601      	mov	r1, r0
 800d49c:	428a      	cmp	r2, r1
 800d49e:	d100      	bne.n	800d4a2 <memmove+0x2a>
 800d4a0:	bd10      	pop	{r4, pc}
 800d4a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4aa:	e7f7      	b.n	800d49c <memmove+0x24>

0800d4ac <_realloc_r>:
 800d4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b0:	4680      	mov	r8, r0
 800d4b2:	4614      	mov	r4, r2
 800d4b4:	460e      	mov	r6, r1
 800d4b6:	b921      	cbnz	r1, 800d4c2 <_realloc_r+0x16>
 800d4b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4bc:	4611      	mov	r1, r2
 800d4be:	f7fc bffb 	b.w	800a4b8 <_malloc_r>
 800d4c2:	b92a      	cbnz	r2, 800d4d0 <_realloc_r+0x24>
 800d4c4:	f7fc ff8c 	bl	800a3e0 <_free_r>
 800d4c8:	4625      	mov	r5, r4
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4d0:	f000 faae 	bl	800da30 <_malloc_usable_size_r>
 800d4d4:	4284      	cmp	r4, r0
 800d4d6:	4607      	mov	r7, r0
 800d4d8:	d802      	bhi.n	800d4e0 <_realloc_r+0x34>
 800d4da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d4de:	d812      	bhi.n	800d506 <_realloc_r+0x5a>
 800d4e0:	4621      	mov	r1, r4
 800d4e2:	4640      	mov	r0, r8
 800d4e4:	f7fc ffe8 	bl	800a4b8 <_malloc_r>
 800d4e8:	4605      	mov	r5, r0
 800d4ea:	2800      	cmp	r0, #0
 800d4ec:	d0ed      	beq.n	800d4ca <_realloc_r+0x1e>
 800d4ee:	42bc      	cmp	r4, r7
 800d4f0:	4622      	mov	r2, r4
 800d4f2:	4631      	mov	r1, r6
 800d4f4:	bf28      	it	cs
 800d4f6:	463a      	movcs	r2, r7
 800d4f8:	f7fe fc12 	bl	800bd20 <memcpy>
 800d4fc:	4631      	mov	r1, r6
 800d4fe:	4640      	mov	r0, r8
 800d500:	f7fc ff6e 	bl	800a3e0 <_free_r>
 800d504:	e7e1      	b.n	800d4ca <_realloc_r+0x1e>
 800d506:	4635      	mov	r5, r6
 800d508:	e7df      	b.n	800d4ca <_realloc_r+0x1e>

0800d50a <__sfputc_r>:
 800d50a:	6893      	ldr	r3, [r2, #8]
 800d50c:	3b01      	subs	r3, #1
 800d50e:	2b00      	cmp	r3, #0
 800d510:	b410      	push	{r4}
 800d512:	6093      	str	r3, [r2, #8]
 800d514:	da08      	bge.n	800d528 <__sfputc_r+0x1e>
 800d516:	6994      	ldr	r4, [r2, #24]
 800d518:	42a3      	cmp	r3, r4
 800d51a:	db01      	blt.n	800d520 <__sfputc_r+0x16>
 800d51c:	290a      	cmp	r1, #10
 800d51e:	d103      	bne.n	800d528 <__sfputc_r+0x1e>
 800d520:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d524:	f000 b94a 	b.w	800d7bc <__swbuf_r>
 800d528:	6813      	ldr	r3, [r2, #0]
 800d52a:	1c58      	adds	r0, r3, #1
 800d52c:	6010      	str	r0, [r2, #0]
 800d52e:	7019      	strb	r1, [r3, #0]
 800d530:	4608      	mov	r0, r1
 800d532:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d536:	4770      	bx	lr

0800d538 <__sfputs_r>:
 800d538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d53a:	4606      	mov	r6, r0
 800d53c:	460f      	mov	r7, r1
 800d53e:	4614      	mov	r4, r2
 800d540:	18d5      	adds	r5, r2, r3
 800d542:	42ac      	cmp	r4, r5
 800d544:	d101      	bne.n	800d54a <__sfputs_r+0x12>
 800d546:	2000      	movs	r0, #0
 800d548:	e007      	b.n	800d55a <__sfputs_r+0x22>
 800d54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d54e:	463a      	mov	r2, r7
 800d550:	4630      	mov	r0, r6
 800d552:	f7ff ffda 	bl	800d50a <__sfputc_r>
 800d556:	1c43      	adds	r3, r0, #1
 800d558:	d1f3      	bne.n	800d542 <__sfputs_r+0xa>
 800d55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d55c <_vfiprintf_r>:
 800d55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d560:	460d      	mov	r5, r1
 800d562:	b09d      	sub	sp, #116	; 0x74
 800d564:	4614      	mov	r4, r2
 800d566:	4698      	mov	r8, r3
 800d568:	4606      	mov	r6, r0
 800d56a:	b118      	cbz	r0, 800d574 <_vfiprintf_r+0x18>
 800d56c:	6983      	ldr	r3, [r0, #24]
 800d56e:	b90b      	cbnz	r3, 800d574 <_vfiprintf_r+0x18>
 800d570:	f7ff febe 	bl	800d2f0 <__sinit>
 800d574:	4b89      	ldr	r3, [pc, #548]	; (800d79c <_vfiprintf_r+0x240>)
 800d576:	429d      	cmp	r5, r3
 800d578:	d11b      	bne.n	800d5b2 <_vfiprintf_r+0x56>
 800d57a:	6875      	ldr	r5, [r6, #4]
 800d57c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d57e:	07d9      	lsls	r1, r3, #31
 800d580:	d405      	bmi.n	800d58e <_vfiprintf_r+0x32>
 800d582:	89ab      	ldrh	r3, [r5, #12]
 800d584:	059a      	lsls	r2, r3, #22
 800d586:	d402      	bmi.n	800d58e <_vfiprintf_r+0x32>
 800d588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d58a:	f7ff ff61 	bl	800d450 <__retarget_lock_acquire_recursive>
 800d58e:	89ab      	ldrh	r3, [r5, #12]
 800d590:	071b      	lsls	r3, r3, #28
 800d592:	d501      	bpl.n	800d598 <_vfiprintf_r+0x3c>
 800d594:	692b      	ldr	r3, [r5, #16]
 800d596:	b9eb      	cbnz	r3, 800d5d4 <_vfiprintf_r+0x78>
 800d598:	4629      	mov	r1, r5
 800d59a:	4630      	mov	r0, r6
 800d59c:	f000 f96e 	bl	800d87c <__swsetup_r>
 800d5a0:	b1c0      	cbz	r0, 800d5d4 <_vfiprintf_r+0x78>
 800d5a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5a4:	07dc      	lsls	r4, r3, #31
 800d5a6:	d50e      	bpl.n	800d5c6 <_vfiprintf_r+0x6a>
 800d5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ac:	b01d      	add	sp, #116	; 0x74
 800d5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b2:	4b7b      	ldr	r3, [pc, #492]	; (800d7a0 <_vfiprintf_r+0x244>)
 800d5b4:	429d      	cmp	r5, r3
 800d5b6:	d101      	bne.n	800d5bc <_vfiprintf_r+0x60>
 800d5b8:	68b5      	ldr	r5, [r6, #8]
 800d5ba:	e7df      	b.n	800d57c <_vfiprintf_r+0x20>
 800d5bc:	4b79      	ldr	r3, [pc, #484]	; (800d7a4 <_vfiprintf_r+0x248>)
 800d5be:	429d      	cmp	r5, r3
 800d5c0:	bf08      	it	eq
 800d5c2:	68f5      	ldreq	r5, [r6, #12]
 800d5c4:	e7da      	b.n	800d57c <_vfiprintf_r+0x20>
 800d5c6:	89ab      	ldrh	r3, [r5, #12]
 800d5c8:	0598      	lsls	r0, r3, #22
 800d5ca:	d4ed      	bmi.n	800d5a8 <_vfiprintf_r+0x4c>
 800d5cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5ce:	f7ff ff40 	bl	800d452 <__retarget_lock_release_recursive>
 800d5d2:	e7e9      	b.n	800d5a8 <_vfiprintf_r+0x4c>
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d5d8:	2320      	movs	r3, #32
 800d5da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5de:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5e2:	2330      	movs	r3, #48	; 0x30
 800d5e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d7a8 <_vfiprintf_r+0x24c>
 800d5e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5ec:	f04f 0901 	mov.w	r9, #1
 800d5f0:	4623      	mov	r3, r4
 800d5f2:	469a      	mov	sl, r3
 800d5f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5f8:	b10a      	cbz	r2, 800d5fe <_vfiprintf_r+0xa2>
 800d5fa:	2a25      	cmp	r2, #37	; 0x25
 800d5fc:	d1f9      	bne.n	800d5f2 <_vfiprintf_r+0x96>
 800d5fe:	ebba 0b04 	subs.w	fp, sl, r4
 800d602:	d00b      	beq.n	800d61c <_vfiprintf_r+0xc0>
 800d604:	465b      	mov	r3, fp
 800d606:	4622      	mov	r2, r4
 800d608:	4629      	mov	r1, r5
 800d60a:	4630      	mov	r0, r6
 800d60c:	f7ff ff94 	bl	800d538 <__sfputs_r>
 800d610:	3001      	adds	r0, #1
 800d612:	f000 80aa 	beq.w	800d76a <_vfiprintf_r+0x20e>
 800d616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d618:	445a      	add	r2, fp
 800d61a:	9209      	str	r2, [sp, #36]	; 0x24
 800d61c:	f89a 3000 	ldrb.w	r3, [sl]
 800d620:	2b00      	cmp	r3, #0
 800d622:	f000 80a2 	beq.w	800d76a <_vfiprintf_r+0x20e>
 800d626:	2300      	movs	r3, #0
 800d628:	f04f 32ff 	mov.w	r2, #4294967295
 800d62c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d630:	f10a 0a01 	add.w	sl, sl, #1
 800d634:	9304      	str	r3, [sp, #16]
 800d636:	9307      	str	r3, [sp, #28]
 800d638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d63c:	931a      	str	r3, [sp, #104]	; 0x68
 800d63e:	4654      	mov	r4, sl
 800d640:	2205      	movs	r2, #5
 800d642:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d646:	4858      	ldr	r0, [pc, #352]	; (800d7a8 <_vfiprintf_r+0x24c>)
 800d648:	f7f2 fde2 	bl	8000210 <memchr>
 800d64c:	9a04      	ldr	r2, [sp, #16]
 800d64e:	b9d8      	cbnz	r0, 800d688 <_vfiprintf_r+0x12c>
 800d650:	06d1      	lsls	r1, r2, #27
 800d652:	bf44      	itt	mi
 800d654:	2320      	movmi	r3, #32
 800d656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d65a:	0713      	lsls	r3, r2, #28
 800d65c:	bf44      	itt	mi
 800d65e:	232b      	movmi	r3, #43	; 0x2b
 800d660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d664:	f89a 3000 	ldrb.w	r3, [sl]
 800d668:	2b2a      	cmp	r3, #42	; 0x2a
 800d66a:	d015      	beq.n	800d698 <_vfiprintf_r+0x13c>
 800d66c:	9a07      	ldr	r2, [sp, #28]
 800d66e:	4654      	mov	r4, sl
 800d670:	2000      	movs	r0, #0
 800d672:	f04f 0c0a 	mov.w	ip, #10
 800d676:	4621      	mov	r1, r4
 800d678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d67c:	3b30      	subs	r3, #48	; 0x30
 800d67e:	2b09      	cmp	r3, #9
 800d680:	d94e      	bls.n	800d720 <_vfiprintf_r+0x1c4>
 800d682:	b1b0      	cbz	r0, 800d6b2 <_vfiprintf_r+0x156>
 800d684:	9207      	str	r2, [sp, #28]
 800d686:	e014      	b.n	800d6b2 <_vfiprintf_r+0x156>
 800d688:	eba0 0308 	sub.w	r3, r0, r8
 800d68c:	fa09 f303 	lsl.w	r3, r9, r3
 800d690:	4313      	orrs	r3, r2
 800d692:	9304      	str	r3, [sp, #16]
 800d694:	46a2      	mov	sl, r4
 800d696:	e7d2      	b.n	800d63e <_vfiprintf_r+0xe2>
 800d698:	9b03      	ldr	r3, [sp, #12]
 800d69a:	1d19      	adds	r1, r3, #4
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	9103      	str	r1, [sp, #12]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	bfbb      	ittet	lt
 800d6a4:	425b      	neglt	r3, r3
 800d6a6:	f042 0202 	orrlt.w	r2, r2, #2
 800d6aa:	9307      	strge	r3, [sp, #28]
 800d6ac:	9307      	strlt	r3, [sp, #28]
 800d6ae:	bfb8      	it	lt
 800d6b0:	9204      	strlt	r2, [sp, #16]
 800d6b2:	7823      	ldrb	r3, [r4, #0]
 800d6b4:	2b2e      	cmp	r3, #46	; 0x2e
 800d6b6:	d10c      	bne.n	800d6d2 <_vfiprintf_r+0x176>
 800d6b8:	7863      	ldrb	r3, [r4, #1]
 800d6ba:	2b2a      	cmp	r3, #42	; 0x2a
 800d6bc:	d135      	bne.n	800d72a <_vfiprintf_r+0x1ce>
 800d6be:	9b03      	ldr	r3, [sp, #12]
 800d6c0:	1d1a      	adds	r2, r3, #4
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	9203      	str	r2, [sp, #12]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	bfb8      	it	lt
 800d6ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6ce:	3402      	adds	r4, #2
 800d6d0:	9305      	str	r3, [sp, #20]
 800d6d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d7b8 <_vfiprintf_r+0x25c>
 800d6d6:	7821      	ldrb	r1, [r4, #0]
 800d6d8:	2203      	movs	r2, #3
 800d6da:	4650      	mov	r0, sl
 800d6dc:	f7f2 fd98 	bl	8000210 <memchr>
 800d6e0:	b140      	cbz	r0, 800d6f4 <_vfiprintf_r+0x198>
 800d6e2:	2340      	movs	r3, #64	; 0x40
 800d6e4:	eba0 000a 	sub.w	r0, r0, sl
 800d6e8:	fa03 f000 	lsl.w	r0, r3, r0
 800d6ec:	9b04      	ldr	r3, [sp, #16]
 800d6ee:	4303      	orrs	r3, r0
 800d6f0:	3401      	adds	r4, #1
 800d6f2:	9304      	str	r3, [sp, #16]
 800d6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6f8:	482c      	ldr	r0, [pc, #176]	; (800d7ac <_vfiprintf_r+0x250>)
 800d6fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6fe:	2206      	movs	r2, #6
 800d700:	f7f2 fd86 	bl	8000210 <memchr>
 800d704:	2800      	cmp	r0, #0
 800d706:	d03f      	beq.n	800d788 <_vfiprintf_r+0x22c>
 800d708:	4b29      	ldr	r3, [pc, #164]	; (800d7b0 <_vfiprintf_r+0x254>)
 800d70a:	bb1b      	cbnz	r3, 800d754 <_vfiprintf_r+0x1f8>
 800d70c:	9b03      	ldr	r3, [sp, #12]
 800d70e:	3307      	adds	r3, #7
 800d710:	f023 0307 	bic.w	r3, r3, #7
 800d714:	3308      	adds	r3, #8
 800d716:	9303      	str	r3, [sp, #12]
 800d718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d71a:	443b      	add	r3, r7
 800d71c:	9309      	str	r3, [sp, #36]	; 0x24
 800d71e:	e767      	b.n	800d5f0 <_vfiprintf_r+0x94>
 800d720:	fb0c 3202 	mla	r2, ip, r2, r3
 800d724:	460c      	mov	r4, r1
 800d726:	2001      	movs	r0, #1
 800d728:	e7a5      	b.n	800d676 <_vfiprintf_r+0x11a>
 800d72a:	2300      	movs	r3, #0
 800d72c:	3401      	adds	r4, #1
 800d72e:	9305      	str	r3, [sp, #20]
 800d730:	4619      	mov	r1, r3
 800d732:	f04f 0c0a 	mov.w	ip, #10
 800d736:	4620      	mov	r0, r4
 800d738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d73c:	3a30      	subs	r2, #48	; 0x30
 800d73e:	2a09      	cmp	r2, #9
 800d740:	d903      	bls.n	800d74a <_vfiprintf_r+0x1ee>
 800d742:	2b00      	cmp	r3, #0
 800d744:	d0c5      	beq.n	800d6d2 <_vfiprintf_r+0x176>
 800d746:	9105      	str	r1, [sp, #20]
 800d748:	e7c3      	b.n	800d6d2 <_vfiprintf_r+0x176>
 800d74a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d74e:	4604      	mov	r4, r0
 800d750:	2301      	movs	r3, #1
 800d752:	e7f0      	b.n	800d736 <_vfiprintf_r+0x1da>
 800d754:	ab03      	add	r3, sp, #12
 800d756:	9300      	str	r3, [sp, #0]
 800d758:	462a      	mov	r2, r5
 800d75a:	4b16      	ldr	r3, [pc, #88]	; (800d7b4 <_vfiprintf_r+0x258>)
 800d75c:	a904      	add	r1, sp, #16
 800d75e:	4630      	mov	r0, r6
 800d760:	f7fc ffbe 	bl	800a6e0 <_printf_float>
 800d764:	4607      	mov	r7, r0
 800d766:	1c78      	adds	r0, r7, #1
 800d768:	d1d6      	bne.n	800d718 <_vfiprintf_r+0x1bc>
 800d76a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d76c:	07d9      	lsls	r1, r3, #31
 800d76e:	d405      	bmi.n	800d77c <_vfiprintf_r+0x220>
 800d770:	89ab      	ldrh	r3, [r5, #12]
 800d772:	059a      	lsls	r2, r3, #22
 800d774:	d402      	bmi.n	800d77c <_vfiprintf_r+0x220>
 800d776:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d778:	f7ff fe6b 	bl	800d452 <__retarget_lock_release_recursive>
 800d77c:	89ab      	ldrh	r3, [r5, #12]
 800d77e:	065b      	lsls	r3, r3, #25
 800d780:	f53f af12 	bmi.w	800d5a8 <_vfiprintf_r+0x4c>
 800d784:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d786:	e711      	b.n	800d5ac <_vfiprintf_r+0x50>
 800d788:	ab03      	add	r3, sp, #12
 800d78a:	9300      	str	r3, [sp, #0]
 800d78c:	462a      	mov	r2, r5
 800d78e:	4b09      	ldr	r3, [pc, #36]	; (800d7b4 <_vfiprintf_r+0x258>)
 800d790:	a904      	add	r1, sp, #16
 800d792:	4630      	mov	r0, r6
 800d794:	f7fd fa48 	bl	800ac28 <_printf_i>
 800d798:	e7e4      	b.n	800d764 <_vfiprintf_r+0x208>
 800d79a:	bf00      	nop
 800d79c:	08010da0 	.word	0x08010da0
 800d7a0:	08010dc0 	.word	0x08010dc0
 800d7a4:	08010d80 	.word	0x08010d80
 800d7a8:	08010c14 	.word	0x08010c14
 800d7ac:	08010c1e 	.word	0x08010c1e
 800d7b0:	0800a6e1 	.word	0x0800a6e1
 800d7b4:	0800d539 	.word	0x0800d539
 800d7b8:	08010c1a 	.word	0x08010c1a

0800d7bc <__swbuf_r>:
 800d7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7be:	460e      	mov	r6, r1
 800d7c0:	4614      	mov	r4, r2
 800d7c2:	4605      	mov	r5, r0
 800d7c4:	b118      	cbz	r0, 800d7ce <__swbuf_r+0x12>
 800d7c6:	6983      	ldr	r3, [r0, #24]
 800d7c8:	b90b      	cbnz	r3, 800d7ce <__swbuf_r+0x12>
 800d7ca:	f7ff fd91 	bl	800d2f0 <__sinit>
 800d7ce:	4b21      	ldr	r3, [pc, #132]	; (800d854 <__swbuf_r+0x98>)
 800d7d0:	429c      	cmp	r4, r3
 800d7d2:	d12b      	bne.n	800d82c <__swbuf_r+0x70>
 800d7d4:	686c      	ldr	r4, [r5, #4]
 800d7d6:	69a3      	ldr	r3, [r4, #24]
 800d7d8:	60a3      	str	r3, [r4, #8]
 800d7da:	89a3      	ldrh	r3, [r4, #12]
 800d7dc:	071a      	lsls	r2, r3, #28
 800d7de:	d52f      	bpl.n	800d840 <__swbuf_r+0x84>
 800d7e0:	6923      	ldr	r3, [r4, #16]
 800d7e2:	b36b      	cbz	r3, 800d840 <__swbuf_r+0x84>
 800d7e4:	6923      	ldr	r3, [r4, #16]
 800d7e6:	6820      	ldr	r0, [r4, #0]
 800d7e8:	1ac0      	subs	r0, r0, r3
 800d7ea:	6963      	ldr	r3, [r4, #20]
 800d7ec:	b2f6      	uxtb	r6, r6
 800d7ee:	4283      	cmp	r3, r0
 800d7f0:	4637      	mov	r7, r6
 800d7f2:	dc04      	bgt.n	800d7fe <__swbuf_r+0x42>
 800d7f4:	4621      	mov	r1, r4
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	f7ff fce6 	bl	800d1c8 <_fflush_r>
 800d7fc:	bb30      	cbnz	r0, 800d84c <__swbuf_r+0x90>
 800d7fe:	68a3      	ldr	r3, [r4, #8]
 800d800:	3b01      	subs	r3, #1
 800d802:	60a3      	str	r3, [r4, #8]
 800d804:	6823      	ldr	r3, [r4, #0]
 800d806:	1c5a      	adds	r2, r3, #1
 800d808:	6022      	str	r2, [r4, #0]
 800d80a:	701e      	strb	r6, [r3, #0]
 800d80c:	6963      	ldr	r3, [r4, #20]
 800d80e:	3001      	adds	r0, #1
 800d810:	4283      	cmp	r3, r0
 800d812:	d004      	beq.n	800d81e <__swbuf_r+0x62>
 800d814:	89a3      	ldrh	r3, [r4, #12]
 800d816:	07db      	lsls	r3, r3, #31
 800d818:	d506      	bpl.n	800d828 <__swbuf_r+0x6c>
 800d81a:	2e0a      	cmp	r6, #10
 800d81c:	d104      	bne.n	800d828 <__swbuf_r+0x6c>
 800d81e:	4621      	mov	r1, r4
 800d820:	4628      	mov	r0, r5
 800d822:	f7ff fcd1 	bl	800d1c8 <_fflush_r>
 800d826:	b988      	cbnz	r0, 800d84c <__swbuf_r+0x90>
 800d828:	4638      	mov	r0, r7
 800d82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d82c:	4b0a      	ldr	r3, [pc, #40]	; (800d858 <__swbuf_r+0x9c>)
 800d82e:	429c      	cmp	r4, r3
 800d830:	d101      	bne.n	800d836 <__swbuf_r+0x7a>
 800d832:	68ac      	ldr	r4, [r5, #8]
 800d834:	e7cf      	b.n	800d7d6 <__swbuf_r+0x1a>
 800d836:	4b09      	ldr	r3, [pc, #36]	; (800d85c <__swbuf_r+0xa0>)
 800d838:	429c      	cmp	r4, r3
 800d83a:	bf08      	it	eq
 800d83c:	68ec      	ldreq	r4, [r5, #12]
 800d83e:	e7ca      	b.n	800d7d6 <__swbuf_r+0x1a>
 800d840:	4621      	mov	r1, r4
 800d842:	4628      	mov	r0, r5
 800d844:	f000 f81a 	bl	800d87c <__swsetup_r>
 800d848:	2800      	cmp	r0, #0
 800d84a:	d0cb      	beq.n	800d7e4 <__swbuf_r+0x28>
 800d84c:	f04f 37ff 	mov.w	r7, #4294967295
 800d850:	e7ea      	b.n	800d828 <__swbuf_r+0x6c>
 800d852:	bf00      	nop
 800d854:	08010da0 	.word	0x08010da0
 800d858:	08010dc0 	.word	0x08010dc0
 800d85c:	08010d80 	.word	0x08010d80

0800d860 <__ascii_wctomb>:
 800d860:	b149      	cbz	r1, 800d876 <__ascii_wctomb+0x16>
 800d862:	2aff      	cmp	r2, #255	; 0xff
 800d864:	bf85      	ittet	hi
 800d866:	238a      	movhi	r3, #138	; 0x8a
 800d868:	6003      	strhi	r3, [r0, #0]
 800d86a:	700a      	strbls	r2, [r1, #0]
 800d86c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d870:	bf98      	it	ls
 800d872:	2001      	movls	r0, #1
 800d874:	4770      	bx	lr
 800d876:	4608      	mov	r0, r1
 800d878:	4770      	bx	lr
	...

0800d87c <__swsetup_r>:
 800d87c:	4b32      	ldr	r3, [pc, #200]	; (800d948 <__swsetup_r+0xcc>)
 800d87e:	b570      	push	{r4, r5, r6, lr}
 800d880:	681d      	ldr	r5, [r3, #0]
 800d882:	4606      	mov	r6, r0
 800d884:	460c      	mov	r4, r1
 800d886:	b125      	cbz	r5, 800d892 <__swsetup_r+0x16>
 800d888:	69ab      	ldr	r3, [r5, #24]
 800d88a:	b913      	cbnz	r3, 800d892 <__swsetup_r+0x16>
 800d88c:	4628      	mov	r0, r5
 800d88e:	f7ff fd2f 	bl	800d2f0 <__sinit>
 800d892:	4b2e      	ldr	r3, [pc, #184]	; (800d94c <__swsetup_r+0xd0>)
 800d894:	429c      	cmp	r4, r3
 800d896:	d10f      	bne.n	800d8b8 <__swsetup_r+0x3c>
 800d898:	686c      	ldr	r4, [r5, #4]
 800d89a:	89a3      	ldrh	r3, [r4, #12]
 800d89c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d8a0:	0719      	lsls	r1, r3, #28
 800d8a2:	d42c      	bmi.n	800d8fe <__swsetup_r+0x82>
 800d8a4:	06dd      	lsls	r5, r3, #27
 800d8a6:	d411      	bmi.n	800d8cc <__swsetup_r+0x50>
 800d8a8:	2309      	movs	r3, #9
 800d8aa:	6033      	str	r3, [r6, #0]
 800d8ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d8b0:	81a3      	strh	r3, [r4, #12]
 800d8b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b6:	e03e      	b.n	800d936 <__swsetup_r+0xba>
 800d8b8:	4b25      	ldr	r3, [pc, #148]	; (800d950 <__swsetup_r+0xd4>)
 800d8ba:	429c      	cmp	r4, r3
 800d8bc:	d101      	bne.n	800d8c2 <__swsetup_r+0x46>
 800d8be:	68ac      	ldr	r4, [r5, #8]
 800d8c0:	e7eb      	b.n	800d89a <__swsetup_r+0x1e>
 800d8c2:	4b24      	ldr	r3, [pc, #144]	; (800d954 <__swsetup_r+0xd8>)
 800d8c4:	429c      	cmp	r4, r3
 800d8c6:	bf08      	it	eq
 800d8c8:	68ec      	ldreq	r4, [r5, #12]
 800d8ca:	e7e6      	b.n	800d89a <__swsetup_r+0x1e>
 800d8cc:	0758      	lsls	r0, r3, #29
 800d8ce:	d512      	bpl.n	800d8f6 <__swsetup_r+0x7a>
 800d8d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8d2:	b141      	cbz	r1, 800d8e6 <__swsetup_r+0x6a>
 800d8d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8d8:	4299      	cmp	r1, r3
 800d8da:	d002      	beq.n	800d8e2 <__swsetup_r+0x66>
 800d8dc:	4630      	mov	r0, r6
 800d8de:	f7fc fd7f 	bl	800a3e0 <_free_r>
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	6363      	str	r3, [r4, #52]	; 0x34
 800d8e6:	89a3      	ldrh	r3, [r4, #12]
 800d8e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d8ec:	81a3      	strh	r3, [r4, #12]
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	6063      	str	r3, [r4, #4]
 800d8f2:	6923      	ldr	r3, [r4, #16]
 800d8f4:	6023      	str	r3, [r4, #0]
 800d8f6:	89a3      	ldrh	r3, [r4, #12]
 800d8f8:	f043 0308 	orr.w	r3, r3, #8
 800d8fc:	81a3      	strh	r3, [r4, #12]
 800d8fe:	6923      	ldr	r3, [r4, #16]
 800d900:	b94b      	cbnz	r3, 800d916 <__swsetup_r+0x9a>
 800d902:	89a3      	ldrh	r3, [r4, #12]
 800d904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d90c:	d003      	beq.n	800d916 <__swsetup_r+0x9a>
 800d90e:	4621      	mov	r1, r4
 800d910:	4630      	mov	r0, r6
 800d912:	f000 f84d 	bl	800d9b0 <__smakebuf_r>
 800d916:	89a0      	ldrh	r0, [r4, #12]
 800d918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d91c:	f010 0301 	ands.w	r3, r0, #1
 800d920:	d00a      	beq.n	800d938 <__swsetup_r+0xbc>
 800d922:	2300      	movs	r3, #0
 800d924:	60a3      	str	r3, [r4, #8]
 800d926:	6963      	ldr	r3, [r4, #20]
 800d928:	425b      	negs	r3, r3
 800d92a:	61a3      	str	r3, [r4, #24]
 800d92c:	6923      	ldr	r3, [r4, #16]
 800d92e:	b943      	cbnz	r3, 800d942 <__swsetup_r+0xc6>
 800d930:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d934:	d1ba      	bne.n	800d8ac <__swsetup_r+0x30>
 800d936:	bd70      	pop	{r4, r5, r6, pc}
 800d938:	0781      	lsls	r1, r0, #30
 800d93a:	bf58      	it	pl
 800d93c:	6963      	ldrpl	r3, [r4, #20]
 800d93e:	60a3      	str	r3, [r4, #8]
 800d940:	e7f4      	b.n	800d92c <__swsetup_r+0xb0>
 800d942:	2000      	movs	r0, #0
 800d944:	e7f7      	b.n	800d936 <__swsetup_r+0xba>
 800d946:	bf00      	nop
 800d948:	20000014 	.word	0x20000014
 800d94c:	08010da0 	.word	0x08010da0
 800d950:	08010dc0 	.word	0x08010dc0
 800d954:	08010d80 	.word	0x08010d80

0800d958 <abort>:
 800d958:	b508      	push	{r3, lr}
 800d95a:	2006      	movs	r0, #6
 800d95c:	f000 f898 	bl	800da90 <raise>
 800d960:	2001      	movs	r0, #1
 800d962:	f7f5 ffb3 	bl	80038cc <_exit>

0800d966 <__swhatbuf_r>:
 800d966:	b570      	push	{r4, r5, r6, lr}
 800d968:	460e      	mov	r6, r1
 800d96a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d96e:	2900      	cmp	r1, #0
 800d970:	b096      	sub	sp, #88	; 0x58
 800d972:	4614      	mov	r4, r2
 800d974:	461d      	mov	r5, r3
 800d976:	da08      	bge.n	800d98a <__swhatbuf_r+0x24>
 800d978:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d97c:	2200      	movs	r2, #0
 800d97e:	602a      	str	r2, [r5, #0]
 800d980:	061a      	lsls	r2, r3, #24
 800d982:	d410      	bmi.n	800d9a6 <__swhatbuf_r+0x40>
 800d984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d988:	e00e      	b.n	800d9a8 <__swhatbuf_r+0x42>
 800d98a:	466a      	mov	r2, sp
 800d98c:	f000 f89c 	bl	800dac8 <_fstat_r>
 800d990:	2800      	cmp	r0, #0
 800d992:	dbf1      	blt.n	800d978 <__swhatbuf_r+0x12>
 800d994:	9a01      	ldr	r2, [sp, #4]
 800d996:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d99a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d99e:	425a      	negs	r2, r3
 800d9a0:	415a      	adcs	r2, r3
 800d9a2:	602a      	str	r2, [r5, #0]
 800d9a4:	e7ee      	b.n	800d984 <__swhatbuf_r+0x1e>
 800d9a6:	2340      	movs	r3, #64	; 0x40
 800d9a8:	2000      	movs	r0, #0
 800d9aa:	6023      	str	r3, [r4, #0]
 800d9ac:	b016      	add	sp, #88	; 0x58
 800d9ae:	bd70      	pop	{r4, r5, r6, pc}

0800d9b0 <__smakebuf_r>:
 800d9b0:	898b      	ldrh	r3, [r1, #12]
 800d9b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9b4:	079d      	lsls	r5, r3, #30
 800d9b6:	4606      	mov	r6, r0
 800d9b8:	460c      	mov	r4, r1
 800d9ba:	d507      	bpl.n	800d9cc <__smakebuf_r+0x1c>
 800d9bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d9c0:	6023      	str	r3, [r4, #0]
 800d9c2:	6123      	str	r3, [r4, #16]
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	6163      	str	r3, [r4, #20]
 800d9c8:	b002      	add	sp, #8
 800d9ca:	bd70      	pop	{r4, r5, r6, pc}
 800d9cc:	ab01      	add	r3, sp, #4
 800d9ce:	466a      	mov	r2, sp
 800d9d0:	f7ff ffc9 	bl	800d966 <__swhatbuf_r>
 800d9d4:	9900      	ldr	r1, [sp, #0]
 800d9d6:	4605      	mov	r5, r0
 800d9d8:	4630      	mov	r0, r6
 800d9da:	f7fc fd6d 	bl	800a4b8 <_malloc_r>
 800d9de:	b948      	cbnz	r0, 800d9f4 <__smakebuf_r+0x44>
 800d9e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9e4:	059a      	lsls	r2, r3, #22
 800d9e6:	d4ef      	bmi.n	800d9c8 <__smakebuf_r+0x18>
 800d9e8:	f023 0303 	bic.w	r3, r3, #3
 800d9ec:	f043 0302 	orr.w	r3, r3, #2
 800d9f0:	81a3      	strh	r3, [r4, #12]
 800d9f2:	e7e3      	b.n	800d9bc <__smakebuf_r+0xc>
 800d9f4:	4b0d      	ldr	r3, [pc, #52]	; (800da2c <__smakebuf_r+0x7c>)
 800d9f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9f8:	89a3      	ldrh	r3, [r4, #12]
 800d9fa:	6020      	str	r0, [r4, #0]
 800d9fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da00:	81a3      	strh	r3, [r4, #12]
 800da02:	9b00      	ldr	r3, [sp, #0]
 800da04:	6163      	str	r3, [r4, #20]
 800da06:	9b01      	ldr	r3, [sp, #4]
 800da08:	6120      	str	r0, [r4, #16]
 800da0a:	b15b      	cbz	r3, 800da24 <__smakebuf_r+0x74>
 800da0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da10:	4630      	mov	r0, r6
 800da12:	f000 f86b 	bl	800daec <_isatty_r>
 800da16:	b128      	cbz	r0, 800da24 <__smakebuf_r+0x74>
 800da18:	89a3      	ldrh	r3, [r4, #12]
 800da1a:	f023 0303 	bic.w	r3, r3, #3
 800da1e:	f043 0301 	orr.w	r3, r3, #1
 800da22:	81a3      	strh	r3, [r4, #12]
 800da24:	89a0      	ldrh	r0, [r4, #12]
 800da26:	4305      	orrs	r5, r0
 800da28:	81a5      	strh	r5, [r4, #12]
 800da2a:	e7cd      	b.n	800d9c8 <__smakebuf_r+0x18>
 800da2c:	0800d289 	.word	0x0800d289

0800da30 <_malloc_usable_size_r>:
 800da30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da34:	1f18      	subs	r0, r3, #4
 800da36:	2b00      	cmp	r3, #0
 800da38:	bfbc      	itt	lt
 800da3a:	580b      	ldrlt	r3, [r1, r0]
 800da3c:	18c0      	addlt	r0, r0, r3
 800da3e:	4770      	bx	lr

0800da40 <_raise_r>:
 800da40:	291f      	cmp	r1, #31
 800da42:	b538      	push	{r3, r4, r5, lr}
 800da44:	4604      	mov	r4, r0
 800da46:	460d      	mov	r5, r1
 800da48:	d904      	bls.n	800da54 <_raise_r+0x14>
 800da4a:	2316      	movs	r3, #22
 800da4c:	6003      	str	r3, [r0, #0]
 800da4e:	f04f 30ff 	mov.w	r0, #4294967295
 800da52:	bd38      	pop	{r3, r4, r5, pc}
 800da54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da56:	b112      	cbz	r2, 800da5e <_raise_r+0x1e>
 800da58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da5c:	b94b      	cbnz	r3, 800da72 <_raise_r+0x32>
 800da5e:	4620      	mov	r0, r4
 800da60:	f000 f830 	bl	800dac4 <_getpid_r>
 800da64:	462a      	mov	r2, r5
 800da66:	4601      	mov	r1, r0
 800da68:	4620      	mov	r0, r4
 800da6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da6e:	f000 b817 	b.w	800daa0 <_kill_r>
 800da72:	2b01      	cmp	r3, #1
 800da74:	d00a      	beq.n	800da8c <_raise_r+0x4c>
 800da76:	1c59      	adds	r1, r3, #1
 800da78:	d103      	bne.n	800da82 <_raise_r+0x42>
 800da7a:	2316      	movs	r3, #22
 800da7c:	6003      	str	r3, [r0, #0]
 800da7e:	2001      	movs	r0, #1
 800da80:	e7e7      	b.n	800da52 <_raise_r+0x12>
 800da82:	2400      	movs	r4, #0
 800da84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da88:	4628      	mov	r0, r5
 800da8a:	4798      	blx	r3
 800da8c:	2000      	movs	r0, #0
 800da8e:	e7e0      	b.n	800da52 <_raise_r+0x12>

0800da90 <raise>:
 800da90:	4b02      	ldr	r3, [pc, #8]	; (800da9c <raise+0xc>)
 800da92:	4601      	mov	r1, r0
 800da94:	6818      	ldr	r0, [r3, #0]
 800da96:	f7ff bfd3 	b.w	800da40 <_raise_r>
 800da9a:	bf00      	nop
 800da9c:	20000014 	.word	0x20000014

0800daa0 <_kill_r>:
 800daa0:	b538      	push	{r3, r4, r5, lr}
 800daa2:	4d07      	ldr	r5, [pc, #28]	; (800dac0 <_kill_r+0x20>)
 800daa4:	2300      	movs	r3, #0
 800daa6:	4604      	mov	r4, r0
 800daa8:	4608      	mov	r0, r1
 800daaa:	4611      	mov	r1, r2
 800daac:	602b      	str	r3, [r5, #0]
 800daae:	f7f5 fefd 	bl	80038ac <_kill>
 800dab2:	1c43      	adds	r3, r0, #1
 800dab4:	d102      	bne.n	800dabc <_kill_r+0x1c>
 800dab6:	682b      	ldr	r3, [r5, #0]
 800dab8:	b103      	cbz	r3, 800dabc <_kill_r+0x1c>
 800daba:	6023      	str	r3, [r4, #0]
 800dabc:	bd38      	pop	{r3, r4, r5, pc}
 800dabe:	bf00      	nop
 800dac0:	20012284 	.word	0x20012284

0800dac4 <_getpid_r>:
 800dac4:	f7f5 beea 	b.w	800389c <_getpid>

0800dac8 <_fstat_r>:
 800dac8:	b538      	push	{r3, r4, r5, lr}
 800daca:	4d07      	ldr	r5, [pc, #28]	; (800dae8 <_fstat_r+0x20>)
 800dacc:	2300      	movs	r3, #0
 800dace:	4604      	mov	r4, r0
 800dad0:	4608      	mov	r0, r1
 800dad2:	4611      	mov	r1, r2
 800dad4:	602b      	str	r3, [r5, #0]
 800dad6:	f7f5 ff48 	bl	800396a <_fstat>
 800dada:	1c43      	adds	r3, r0, #1
 800dadc:	d102      	bne.n	800dae4 <_fstat_r+0x1c>
 800dade:	682b      	ldr	r3, [r5, #0]
 800dae0:	b103      	cbz	r3, 800dae4 <_fstat_r+0x1c>
 800dae2:	6023      	str	r3, [r4, #0]
 800dae4:	bd38      	pop	{r3, r4, r5, pc}
 800dae6:	bf00      	nop
 800dae8:	20012284 	.word	0x20012284

0800daec <_isatty_r>:
 800daec:	b538      	push	{r3, r4, r5, lr}
 800daee:	4d06      	ldr	r5, [pc, #24]	; (800db08 <_isatty_r+0x1c>)
 800daf0:	2300      	movs	r3, #0
 800daf2:	4604      	mov	r4, r0
 800daf4:	4608      	mov	r0, r1
 800daf6:	602b      	str	r3, [r5, #0]
 800daf8:	f7f5 ff47 	bl	800398a <_isatty>
 800dafc:	1c43      	adds	r3, r0, #1
 800dafe:	d102      	bne.n	800db06 <_isatty_r+0x1a>
 800db00:	682b      	ldr	r3, [r5, #0]
 800db02:	b103      	cbz	r3, 800db06 <_isatty_r+0x1a>
 800db04:	6023      	str	r3, [r4, #0]
 800db06:	bd38      	pop	{r3, r4, r5, pc}
 800db08:	20012284 	.word	0x20012284
 800db0c:	00000000 	.word	0x00000000

0800db10 <cos>:
 800db10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db12:	ec53 2b10 	vmov	r2, r3, d0
 800db16:	4826      	ldr	r0, [pc, #152]	; (800dbb0 <cos+0xa0>)
 800db18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800db1c:	4281      	cmp	r1, r0
 800db1e:	dc06      	bgt.n	800db2e <cos+0x1e>
 800db20:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800dba8 <cos+0x98>
 800db24:	b005      	add	sp, #20
 800db26:	f85d eb04 	ldr.w	lr, [sp], #4
 800db2a:	f001 bcd5 	b.w	800f4d8 <__kernel_cos>
 800db2e:	4821      	ldr	r0, [pc, #132]	; (800dbb4 <cos+0xa4>)
 800db30:	4281      	cmp	r1, r0
 800db32:	dd09      	ble.n	800db48 <cos+0x38>
 800db34:	ee10 0a10 	vmov	r0, s0
 800db38:	4619      	mov	r1, r3
 800db3a:	f7f2 fbbd 	bl	80002b8 <__aeabi_dsub>
 800db3e:	ec41 0b10 	vmov	d0, r0, r1
 800db42:	b005      	add	sp, #20
 800db44:	f85d fb04 	ldr.w	pc, [sp], #4
 800db48:	4668      	mov	r0, sp
 800db4a:	f001 fa05 	bl	800ef58 <__ieee754_rem_pio2>
 800db4e:	f000 0003 	and.w	r0, r0, #3
 800db52:	2801      	cmp	r0, #1
 800db54:	d00b      	beq.n	800db6e <cos+0x5e>
 800db56:	2802      	cmp	r0, #2
 800db58:	d016      	beq.n	800db88 <cos+0x78>
 800db5a:	b9e0      	cbnz	r0, 800db96 <cos+0x86>
 800db5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db60:	ed9d 0b00 	vldr	d0, [sp]
 800db64:	f001 fcb8 	bl	800f4d8 <__kernel_cos>
 800db68:	ec51 0b10 	vmov	r0, r1, d0
 800db6c:	e7e7      	b.n	800db3e <cos+0x2e>
 800db6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db72:	ed9d 0b00 	vldr	d0, [sp]
 800db76:	f002 f8c7 	bl	800fd08 <__kernel_sin>
 800db7a:	ec53 2b10 	vmov	r2, r3, d0
 800db7e:	ee10 0a10 	vmov	r0, s0
 800db82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800db86:	e7da      	b.n	800db3e <cos+0x2e>
 800db88:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db8c:	ed9d 0b00 	vldr	d0, [sp]
 800db90:	f001 fca2 	bl	800f4d8 <__kernel_cos>
 800db94:	e7f1      	b.n	800db7a <cos+0x6a>
 800db96:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db9a:	ed9d 0b00 	vldr	d0, [sp]
 800db9e:	2001      	movs	r0, #1
 800dba0:	f002 f8b2 	bl	800fd08 <__kernel_sin>
 800dba4:	e7e0      	b.n	800db68 <cos+0x58>
 800dba6:	bf00      	nop
	...
 800dbb0:	3fe921fb 	.word	0x3fe921fb
 800dbb4:	7fefffff 	.word	0x7fefffff

0800dbb8 <round>:
 800dbb8:	ec51 0b10 	vmov	r0, r1, d0
 800dbbc:	b570      	push	{r4, r5, r6, lr}
 800dbbe:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800dbc2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800dbc6:	2c13      	cmp	r4, #19
 800dbc8:	ee10 2a10 	vmov	r2, s0
 800dbcc:	460b      	mov	r3, r1
 800dbce:	dc19      	bgt.n	800dc04 <round+0x4c>
 800dbd0:	2c00      	cmp	r4, #0
 800dbd2:	da09      	bge.n	800dbe8 <round+0x30>
 800dbd4:	3401      	adds	r4, #1
 800dbd6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800dbda:	d103      	bne.n	800dbe4 <round+0x2c>
 800dbdc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dbe0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	e028      	b.n	800dc3a <round+0x82>
 800dbe8:	4d15      	ldr	r5, [pc, #84]	; (800dc40 <round+0x88>)
 800dbea:	4125      	asrs	r5, r4
 800dbec:	ea01 0605 	and.w	r6, r1, r5
 800dbf0:	4332      	orrs	r2, r6
 800dbf2:	d00e      	beq.n	800dc12 <round+0x5a>
 800dbf4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800dbf8:	fa42 f404 	asr.w	r4, r2, r4
 800dbfc:	4423      	add	r3, r4
 800dbfe:	ea23 0305 	bic.w	r3, r3, r5
 800dc02:	e7ef      	b.n	800dbe4 <round+0x2c>
 800dc04:	2c33      	cmp	r4, #51	; 0x33
 800dc06:	dd07      	ble.n	800dc18 <round+0x60>
 800dc08:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800dc0c:	d101      	bne.n	800dc12 <round+0x5a>
 800dc0e:	f7f2 fb55 	bl	80002bc <__adddf3>
 800dc12:	ec41 0b10 	vmov	d0, r0, r1
 800dc16:	bd70      	pop	{r4, r5, r6, pc}
 800dc18:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800dc1c:	f04f 35ff 	mov.w	r5, #4294967295
 800dc20:	40f5      	lsrs	r5, r6
 800dc22:	4228      	tst	r0, r5
 800dc24:	d0f5      	beq.n	800dc12 <round+0x5a>
 800dc26:	2101      	movs	r1, #1
 800dc28:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800dc2c:	fa01 f404 	lsl.w	r4, r1, r4
 800dc30:	1912      	adds	r2, r2, r4
 800dc32:	bf28      	it	cs
 800dc34:	185b      	addcs	r3, r3, r1
 800dc36:	ea22 0205 	bic.w	r2, r2, r5
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	4610      	mov	r0, r2
 800dc3e:	e7e8      	b.n	800dc12 <round+0x5a>
 800dc40:	000fffff 	.word	0x000fffff
 800dc44:	00000000 	.word	0x00000000

0800dc48 <sin>:
 800dc48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc4a:	ec53 2b10 	vmov	r2, r3, d0
 800dc4e:	4828      	ldr	r0, [pc, #160]	; (800dcf0 <sin+0xa8>)
 800dc50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dc54:	4281      	cmp	r1, r0
 800dc56:	dc07      	bgt.n	800dc68 <sin+0x20>
 800dc58:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800dce8 <sin+0xa0>
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	b005      	add	sp, #20
 800dc60:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc64:	f002 b850 	b.w	800fd08 <__kernel_sin>
 800dc68:	4822      	ldr	r0, [pc, #136]	; (800dcf4 <sin+0xac>)
 800dc6a:	4281      	cmp	r1, r0
 800dc6c:	dd09      	ble.n	800dc82 <sin+0x3a>
 800dc6e:	ee10 0a10 	vmov	r0, s0
 800dc72:	4619      	mov	r1, r3
 800dc74:	f7f2 fb20 	bl	80002b8 <__aeabi_dsub>
 800dc78:	ec41 0b10 	vmov	d0, r0, r1
 800dc7c:	b005      	add	sp, #20
 800dc7e:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc82:	4668      	mov	r0, sp
 800dc84:	f001 f968 	bl	800ef58 <__ieee754_rem_pio2>
 800dc88:	f000 0003 	and.w	r0, r0, #3
 800dc8c:	2801      	cmp	r0, #1
 800dc8e:	d00c      	beq.n	800dcaa <sin+0x62>
 800dc90:	2802      	cmp	r0, #2
 800dc92:	d011      	beq.n	800dcb8 <sin+0x70>
 800dc94:	b9f0      	cbnz	r0, 800dcd4 <sin+0x8c>
 800dc96:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dc9a:	ed9d 0b00 	vldr	d0, [sp]
 800dc9e:	2001      	movs	r0, #1
 800dca0:	f002 f832 	bl	800fd08 <__kernel_sin>
 800dca4:	ec51 0b10 	vmov	r0, r1, d0
 800dca8:	e7e6      	b.n	800dc78 <sin+0x30>
 800dcaa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dcae:	ed9d 0b00 	vldr	d0, [sp]
 800dcb2:	f001 fc11 	bl	800f4d8 <__kernel_cos>
 800dcb6:	e7f5      	b.n	800dca4 <sin+0x5c>
 800dcb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dcbc:	ed9d 0b00 	vldr	d0, [sp]
 800dcc0:	2001      	movs	r0, #1
 800dcc2:	f002 f821 	bl	800fd08 <__kernel_sin>
 800dcc6:	ec53 2b10 	vmov	r2, r3, d0
 800dcca:	ee10 0a10 	vmov	r0, s0
 800dcce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dcd2:	e7d1      	b.n	800dc78 <sin+0x30>
 800dcd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dcd8:	ed9d 0b00 	vldr	d0, [sp]
 800dcdc:	f001 fbfc 	bl	800f4d8 <__kernel_cos>
 800dce0:	e7f1      	b.n	800dcc6 <sin+0x7e>
 800dce2:	bf00      	nop
 800dce4:	f3af 8000 	nop.w
	...
 800dcf0:	3fe921fb 	.word	0x3fe921fb
 800dcf4:	7fefffff 	.word	0x7fefffff

0800dcf8 <acos>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	ed2d 8b02 	vpush	{d8}
 800dcfe:	ec55 4b10 	vmov	r4, r5, d0
 800dd02:	f000 f8cd 	bl	800dea0 <__ieee754_acos>
 800dd06:	4622      	mov	r2, r4
 800dd08:	462b      	mov	r3, r5
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	4629      	mov	r1, r5
 800dd0e:	eeb0 8a40 	vmov.f32	s16, s0
 800dd12:	eef0 8a60 	vmov.f32	s17, s1
 800dd16:	f7f2 ff21 	bl	8000b5c <__aeabi_dcmpun>
 800dd1a:	b9a8      	cbnz	r0, 800dd48 <acos+0x50>
 800dd1c:	ec45 4b10 	vmov	d0, r4, r5
 800dd20:	f002 fa82 	bl	8010228 <fabs>
 800dd24:	4b0c      	ldr	r3, [pc, #48]	; (800dd58 <acos+0x60>)
 800dd26:	ec51 0b10 	vmov	r0, r1, d0
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f7f2 ff0c 	bl	8000b48 <__aeabi_dcmpgt>
 800dd30:	b150      	cbz	r0, 800dd48 <acos+0x50>
 800dd32:	f7fc fb1b 	bl	800a36c <__errno>
 800dd36:	ecbd 8b02 	vpop	{d8}
 800dd3a:	2321      	movs	r3, #33	; 0x21
 800dd3c:	6003      	str	r3, [r0, #0]
 800dd3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd42:	4806      	ldr	r0, [pc, #24]	; (800dd5c <acos+0x64>)
 800dd44:	f002 bb04 	b.w	8010350 <nan>
 800dd48:	eeb0 0a48 	vmov.f32	s0, s16
 800dd4c:	eef0 0a68 	vmov.f32	s1, s17
 800dd50:	ecbd 8b02 	vpop	{d8}
 800dd54:	bd38      	pop	{r3, r4, r5, pc}
 800dd56:	bf00      	nop
 800dd58:	3ff00000 	.word	0x3ff00000
 800dd5c:	08010c7b 	.word	0x08010c7b

0800dd60 <atan2>:
 800dd60:	f000 bafe 	b.w	800e360 <__ieee754_atan2>

0800dd64 <pow>:
 800dd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd66:	ed2d 8b02 	vpush	{d8}
 800dd6a:	eeb0 8a40 	vmov.f32	s16, s0
 800dd6e:	eef0 8a60 	vmov.f32	s17, s1
 800dd72:	ec55 4b11 	vmov	r4, r5, d1
 800dd76:	f000 fbbf 	bl	800e4f8 <__ieee754_pow>
 800dd7a:	4622      	mov	r2, r4
 800dd7c:	462b      	mov	r3, r5
 800dd7e:	4620      	mov	r0, r4
 800dd80:	4629      	mov	r1, r5
 800dd82:	ec57 6b10 	vmov	r6, r7, d0
 800dd86:	f7f2 fee9 	bl	8000b5c <__aeabi_dcmpun>
 800dd8a:	2800      	cmp	r0, #0
 800dd8c:	d13b      	bne.n	800de06 <pow+0xa2>
 800dd8e:	ec51 0b18 	vmov	r0, r1, d8
 800dd92:	2200      	movs	r2, #0
 800dd94:	2300      	movs	r3, #0
 800dd96:	f7f2 feaf 	bl	8000af8 <__aeabi_dcmpeq>
 800dd9a:	b1b8      	cbz	r0, 800ddcc <pow+0x68>
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	2300      	movs	r3, #0
 800dda0:	4620      	mov	r0, r4
 800dda2:	4629      	mov	r1, r5
 800dda4:	f7f2 fea8 	bl	8000af8 <__aeabi_dcmpeq>
 800dda8:	2800      	cmp	r0, #0
 800ddaa:	d146      	bne.n	800de3a <pow+0xd6>
 800ddac:	ec45 4b10 	vmov	d0, r4, r5
 800ddb0:	f002 fa43 	bl	801023a <finite>
 800ddb4:	b338      	cbz	r0, 800de06 <pow+0xa2>
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	2300      	movs	r3, #0
 800ddba:	4620      	mov	r0, r4
 800ddbc:	4629      	mov	r1, r5
 800ddbe:	f7f2 fea5 	bl	8000b0c <__aeabi_dcmplt>
 800ddc2:	b300      	cbz	r0, 800de06 <pow+0xa2>
 800ddc4:	f7fc fad2 	bl	800a36c <__errno>
 800ddc8:	2322      	movs	r3, #34	; 0x22
 800ddca:	e01b      	b.n	800de04 <pow+0xa0>
 800ddcc:	ec47 6b10 	vmov	d0, r6, r7
 800ddd0:	f002 fa33 	bl	801023a <finite>
 800ddd4:	b9e0      	cbnz	r0, 800de10 <pow+0xac>
 800ddd6:	eeb0 0a48 	vmov.f32	s0, s16
 800ddda:	eef0 0a68 	vmov.f32	s1, s17
 800ddde:	f002 fa2c 	bl	801023a <finite>
 800dde2:	b1a8      	cbz	r0, 800de10 <pow+0xac>
 800dde4:	ec45 4b10 	vmov	d0, r4, r5
 800dde8:	f002 fa27 	bl	801023a <finite>
 800ddec:	b180      	cbz	r0, 800de10 <pow+0xac>
 800ddee:	4632      	mov	r2, r6
 800ddf0:	463b      	mov	r3, r7
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	4639      	mov	r1, r7
 800ddf6:	f7f2 feb1 	bl	8000b5c <__aeabi_dcmpun>
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	d0e2      	beq.n	800ddc4 <pow+0x60>
 800ddfe:	f7fc fab5 	bl	800a36c <__errno>
 800de02:	2321      	movs	r3, #33	; 0x21
 800de04:	6003      	str	r3, [r0, #0]
 800de06:	ecbd 8b02 	vpop	{d8}
 800de0a:	ec47 6b10 	vmov	d0, r6, r7
 800de0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de10:	2200      	movs	r2, #0
 800de12:	2300      	movs	r3, #0
 800de14:	4630      	mov	r0, r6
 800de16:	4639      	mov	r1, r7
 800de18:	f7f2 fe6e 	bl	8000af8 <__aeabi_dcmpeq>
 800de1c:	2800      	cmp	r0, #0
 800de1e:	d0f2      	beq.n	800de06 <pow+0xa2>
 800de20:	eeb0 0a48 	vmov.f32	s0, s16
 800de24:	eef0 0a68 	vmov.f32	s1, s17
 800de28:	f002 fa07 	bl	801023a <finite>
 800de2c:	2800      	cmp	r0, #0
 800de2e:	d0ea      	beq.n	800de06 <pow+0xa2>
 800de30:	ec45 4b10 	vmov	d0, r4, r5
 800de34:	f002 fa01 	bl	801023a <finite>
 800de38:	e7c3      	b.n	800ddc2 <pow+0x5e>
 800de3a:	4f01      	ldr	r7, [pc, #4]	; (800de40 <pow+0xdc>)
 800de3c:	2600      	movs	r6, #0
 800de3e:	e7e2      	b.n	800de06 <pow+0xa2>
 800de40:	3ff00000 	.word	0x3ff00000

0800de44 <sqrt>:
 800de44:	b538      	push	{r3, r4, r5, lr}
 800de46:	ed2d 8b02 	vpush	{d8}
 800de4a:	ec55 4b10 	vmov	r4, r5, d0
 800de4e:	f001 fa8f 	bl	800f370 <__ieee754_sqrt>
 800de52:	4622      	mov	r2, r4
 800de54:	462b      	mov	r3, r5
 800de56:	4620      	mov	r0, r4
 800de58:	4629      	mov	r1, r5
 800de5a:	eeb0 8a40 	vmov.f32	s16, s0
 800de5e:	eef0 8a60 	vmov.f32	s17, s1
 800de62:	f7f2 fe7b 	bl	8000b5c <__aeabi_dcmpun>
 800de66:	b990      	cbnz	r0, 800de8e <sqrt+0x4a>
 800de68:	2200      	movs	r2, #0
 800de6a:	2300      	movs	r3, #0
 800de6c:	4620      	mov	r0, r4
 800de6e:	4629      	mov	r1, r5
 800de70:	f7f2 fe4c 	bl	8000b0c <__aeabi_dcmplt>
 800de74:	b158      	cbz	r0, 800de8e <sqrt+0x4a>
 800de76:	f7fc fa79 	bl	800a36c <__errno>
 800de7a:	2321      	movs	r3, #33	; 0x21
 800de7c:	6003      	str	r3, [r0, #0]
 800de7e:	2200      	movs	r2, #0
 800de80:	2300      	movs	r3, #0
 800de82:	4610      	mov	r0, r2
 800de84:	4619      	mov	r1, r3
 800de86:	f7f2 fcf9 	bl	800087c <__aeabi_ddiv>
 800de8a:	ec41 0b18 	vmov	d8, r0, r1
 800de8e:	eeb0 0a48 	vmov.f32	s0, s16
 800de92:	eef0 0a68 	vmov.f32	s1, s17
 800de96:	ecbd 8b02 	vpop	{d8}
 800de9a:	bd38      	pop	{r3, r4, r5, pc}
 800de9c:	0000      	movs	r0, r0
	...

0800dea0 <__ieee754_acos>:
 800dea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea4:	ec55 4b10 	vmov	r4, r5, d0
 800dea8:	49b7      	ldr	r1, [pc, #732]	; (800e188 <__ieee754_acos+0x2e8>)
 800deaa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800deae:	428b      	cmp	r3, r1
 800deb0:	dd1b      	ble.n	800deea <__ieee754_acos+0x4a>
 800deb2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800deb6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800deba:	4323      	orrs	r3, r4
 800debc:	d106      	bne.n	800decc <__ieee754_acos+0x2c>
 800debe:	2d00      	cmp	r5, #0
 800dec0:	f300 8211 	bgt.w	800e2e6 <__ieee754_acos+0x446>
 800dec4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800e120 <__ieee754_acos+0x280>
 800dec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800decc:	ee10 2a10 	vmov	r2, s0
 800ded0:	462b      	mov	r3, r5
 800ded2:	ee10 0a10 	vmov	r0, s0
 800ded6:	4629      	mov	r1, r5
 800ded8:	f7f2 f9ee 	bl	80002b8 <__aeabi_dsub>
 800dedc:	4602      	mov	r2, r0
 800dede:	460b      	mov	r3, r1
 800dee0:	f7f2 fccc 	bl	800087c <__aeabi_ddiv>
 800dee4:	ec41 0b10 	vmov	d0, r0, r1
 800dee8:	e7ee      	b.n	800dec8 <__ieee754_acos+0x28>
 800deea:	49a8      	ldr	r1, [pc, #672]	; (800e18c <__ieee754_acos+0x2ec>)
 800deec:	428b      	cmp	r3, r1
 800deee:	f300 8087 	bgt.w	800e000 <__ieee754_acos+0x160>
 800def2:	4aa7      	ldr	r2, [pc, #668]	; (800e190 <__ieee754_acos+0x2f0>)
 800def4:	4293      	cmp	r3, r2
 800def6:	f340 81f9 	ble.w	800e2ec <__ieee754_acos+0x44c>
 800defa:	ee10 2a10 	vmov	r2, s0
 800defe:	ee10 0a10 	vmov	r0, s0
 800df02:	462b      	mov	r3, r5
 800df04:	4629      	mov	r1, r5
 800df06:	f7f2 fb8f 	bl	8000628 <__aeabi_dmul>
 800df0a:	a387      	add	r3, pc, #540	; (adr r3, 800e128 <__ieee754_acos+0x288>)
 800df0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df10:	4606      	mov	r6, r0
 800df12:	460f      	mov	r7, r1
 800df14:	f7f2 fb88 	bl	8000628 <__aeabi_dmul>
 800df18:	a385      	add	r3, pc, #532	; (adr r3, 800e130 <__ieee754_acos+0x290>)
 800df1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1e:	f7f2 f9cd 	bl	80002bc <__adddf3>
 800df22:	4632      	mov	r2, r6
 800df24:	463b      	mov	r3, r7
 800df26:	f7f2 fb7f 	bl	8000628 <__aeabi_dmul>
 800df2a:	a383      	add	r3, pc, #524	; (adr r3, 800e138 <__ieee754_acos+0x298>)
 800df2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df30:	f7f2 f9c2 	bl	80002b8 <__aeabi_dsub>
 800df34:	4632      	mov	r2, r6
 800df36:	463b      	mov	r3, r7
 800df38:	f7f2 fb76 	bl	8000628 <__aeabi_dmul>
 800df3c:	a380      	add	r3, pc, #512	; (adr r3, 800e140 <__ieee754_acos+0x2a0>)
 800df3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df42:	f7f2 f9bb 	bl	80002bc <__adddf3>
 800df46:	4632      	mov	r2, r6
 800df48:	463b      	mov	r3, r7
 800df4a:	f7f2 fb6d 	bl	8000628 <__aeabi_dmul>
 800df4e:	a37e      	add	r3, pc, #504	; (adr r3, 800e148 <__ieee754_acos+0x2a8>)
 800df50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df54:	f7f2 f9b0 	bl	80002b8 <__aeabi_dsub>
 800df58:	4632      	mov	r2, r6
 800df5a:	463b      	mov	r3, r7
 800df5c:	f7f2 fb64 	bl	8000628 <__aeabi_dmul>
 800df60:	a37b      	add	r3, pc, #492	; (adr r3, 800e150 <__ieee754_acos+0x2b0>)
 800df62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df66:	f7f2 f9a9 	bl	80002bc <__adddf3>
 800df6a:	4632      	mov	r2, r6
 800df6c:	463b      	mov	r3, r7
 800df6e:	f7f2 fb5b 	bl	8000628 <__aeabi_dmul>
 800df72:	a379      	add	r3, pc, #484	; (adr r3, 800e158 <__ieee754_acos+0x2b8>)
 800df74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df78:	4680      	mov	r8, r0
 800df7a:	4689      	mov	r9, r1
 800df7c:	4630      	mov	r0, r6
 800df7e:	4639      	mov	r1, r7
 800df80:	f7f2 fb52 	bl	8000628 <__aeabi_dmul>
 800df84:	a376      	add	r3, pc, #472	; (adr r3, 800e160 <__ieee754_acos+0x2c0>)
 800df86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8a:	f7f2 f995 	bl	80002b8 <__aeabi_dsub>
 800df8e:	4632      	mov	r2, r6
 800df90:	463b      	mov	r3, r7
 800df92:	f7f2 fb49 	bl	8000628 <__aeabi_dmul>
 800df96:	a374      	add	r3, pc, #464	; (adr r3, 800e168 <__ieee754_acos+0x2c8>)
 800df98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9c:	f7f2 f98e 	bl	80002bc <__adddf3>
 800dfa0:	4632      	mov	r2, r6
 800dfa2:	463b      	mov	r3, r7
 800dfa4:	f7f2 fb40 	bl	8000628 <__aeabi_dmul>
 800dfa8:	a371      	add	r3, pc, #452	; (adr r3, 800e170 <__ieee754_acos+0x2d0>)
 800dfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfae:	f7f2 f983 	bl	80002b8 <__aeabi_dsub>
 800dfb2:	4632      	mov	r2, r6
 800dfb4:	463b      	mov	r3, r7
 800dfb6:	f7f2 fb37 	bl	8000628 <__aeabi_dmul>
 800dfba:	4b76      	ldr	r3, [pc, #472]	; (800e194 <__ieee754_acos+0x2f4>)
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	f7f2 f97d 	bl	80002bc <__adddf3>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	4640      	mov	r0, r8
 800dfc8:	4649      	mov	r1, r9
 800dfca:	f7f2 fc57 	bl	800087c <__aeabi_ddiv>
 800dfce:	4622      	mov	r2, r4
 800dfd0:	462b      	mov	r3, r5
 800dfd2:	f7f2 fb29 	bl	8000628 <__aeabi_dmul>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	460b      	mov	r3, r1
 800dfda:	a167      	add	r1, pc, #412	; (adr r1, 800e178 <__ieee754_acos+0x2d8>)
 800dfdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfe0:	f7f2 f96a 	bl	80002b8 <__aeabi_dsub>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	4620      	mov	r0, r4
 800dfea:	4629      	mov	r1, r5
 800dfec:	f7f2 f964 	bl	80002b8 <__aeabi_dsub>
 800dff0:	4602      	mov	r2, r0
 800dff2:	460b      	mov	r3, r1
 800dff4:	a162      	add	r1, pc, #392	; (adr r1, 800e180 <__ieee754_acos+0x2e0>)
 800dff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dffa:	f7f2 f95d 	bl	80002b8 <__aeabi_dsub>
 800dffe:	e771      	b.n	800dee4 <__ieee754_acos+0x44>
 800e000:	2d00      	cmp	r5, #0
 800e002:	f280 80cb 	bge.w	800e19c <__ieee754_acos+0x2fc>
 800e006:	ee10 0a10 	vmov	r0, s0
 800e00a:	4b62      	ldr	r3, [pc, #392]	; (800e194 <__ieee754_acos+0x2f4>)
 800e00c:	2200      	movs	r2, #0
 800e00e:	4629      	mov	r1, r5
 800e010:	f7f2 f954 	bl	80002bc <__adddf3>
 800e014:	4b60      	ldr	r3, [pc, #384]	; (800e198 <__ieee754_acos+0x2f8>)
 800e016:	2200      	movs	r2, #0
 800e018:	f7f2 fb06 	bl	8000628 <__aeabi_dmul>
 800e01c:	a342      	add	r3, pc, #264	; (adr r3, 800e128 <__ieee754_acos+0x288>)
 800e01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e022:	4604      	mov	r4, r0
 800e024:	460d      	mov	r5, r1
 800e026:	f7f2 faff 	bl	8000628 <__aeabi_dmul>
 800e02a:	a341      	add	r3, pc, #260	; (adr r3, 800e130 <__ieee754_acos+0x290>)
 800e02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e030:	f7f2 f944 	bl	80002bc <__adddf3>
 800e034:	4622      	mov	r2, r4
 800e036:	462b      	mov	r3, r5
 800e038:	f7f2 faf6 	bl	8000628 <__aeabi_dmul>
 800e03c:	a33e      	add	r3, pc, #248	; (adr r3, 800e138 <__ieee754_acos+0x298>)
 800e03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e042:	f7f2 f939 	bl	80002b8 <__aeabi_dsub>
 800e046:	4622      	mov	r2, r4
 800e048:	462b      	mov	r3, r5
 800e04a:	f7f2 faed 	bl	8000628 <__aeabi_dmul>
 800e04e:	a33c      	add	r3, pc, #240	; (adr r3, 800e140 <__ieee754_acos+0x2a0>)
 800e050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e054:	f7f2 f932 	bl	80002bc <__adddf3>
 800e058:	4622      	mov	r2, r4
 800e05a:	462b      	mov	r3, r5
 800e05c:	f7f2 fae4 	bl	8000628 <__aeabi_dmul>
 800e060:	a339      	add	r3, pc, #228	; (adr r3, 800e148 <__ieee754_acos+0x2a8>)
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	f7f2 f927 	bl	80002b8 <__aeabi_dsub>
 800e06a:	4622      	mov	r2, r4
 800e06c:	462b      	mov	r3, r5
 800e06e:	f7f2 fadb 	bl	8000628 <__aeabi_dmul>
 800e072:	a337      	add	r3, pc, #220	; (adr r3, 800e150 <__ieee754_acos+0x2b0>)
 800e074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e078:	f7f2 f920 	bl	80002bc <__adddf3>
 800e07c:	4622      	mov	r2, r4
 800e07e:	462b      	mov	r3, r5
 800e080:	f7f2 fad2 	bl	8000628 <__aeabi_dmul>
 800e084:	ec45 4b10 	vmov	d0, r4, r5
 800e088:	4680      	mov	r8, r0
 800e08a:	4689      	mov	r9, r1
 800e08c:	f001 f970 	bl	800f370 <__ieee754_sqrt>
 800e090:	a331      	add	r3, pc, #196	; (adr r3, 800e158 <__ieee754_acos+0x2b8>)
 800e092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e096:	4620      	mov	r0, r4
 800e098:	4629      	mov	r1, r5
 800e09a:	ec57 6b10 	vmov	r6, r7, d0
 800e09e:	f7f2 fac3 	bl	8000628 <__aeabi_dmul>
 800e0a2:	a32f      	add	r3, pc, #188	; (adr r3, 800e160 <__ieee754_acos+0x2c0>)
 800e0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a8:	f7f2 f906 	bl	80002b8 <__aeabi_dsub>
 800e0ac:	4622      	mov	r2, r4
 800e0ae:	462b      	mov	r3, r5
 800e0b0:	f7f2 faba 	bl	8000628 <__aeabi_dmul>
 800e0b4:	a32c      	add	r3, pc, #176	; (adr r3, 800e168 <__ieee754_acos+0x2c8>)
 800e0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ba:	f7f2 f8ff 	bl	80002bc <__adddf3>
 800e0be:	4622      	mov	r2, r4
 800e0c0:	462b      	mov	r3, r5
 800e0c2:	f7f2 fab1 	bl	8000628 <__aeabi_dmul>
 800e0c6:	a32a      	add	r3, pc, #168	; (adr r3, 800e170 <__ieee754_acos+0x2d0>)
 800e0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0cc:	f7f2 f8f4 	bl	80002b8 <__aeabi_dsub>
 800e0d0:	4622      	mov	r2, r4
 800e0d2:	462b      	mov	r3, r5
 800e0d4:	f7f2 faa8 	bl	8000628 <__aeabi_dmul>
 800e0d8:	4b2e      	ldr	r3, [pc, #184]	; (800e194 <__ieee754_acos+0x2f4>)
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f7f2 f8ee 	bl	80002bc <__adddf3>
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	4640      	mov	r0, r8
 800e0e6:	4649      	mov	r1, r9
 800e0e8:	f7f2 fbc8 	bl	800087c <__aeabi_ddiv>
 800e0ec:	4632      	mov	r2, r6
 800e0ee:	463b      	mov	r3, r7
 800e0f0:	f7f2 fa9a 	bl	8000628 <__aeabi_dmul>
 800e0f4:	a320      	add	r3, pc, #128	; (adr r3, 800e178 <__ieee754_acos+0x2d8>)
 800e0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fa:	f7f2 f8dd 	bl	80002b8 <__aeabi_dsub>
 800e0fe:	4632      	mov	r2, r6
 800e100:	463b      	mov	r3, r7
 800e102:	f7f2 f8db 	bl	80002bc <__adddf3>
 800e106:	4602      	mov	r2, r0
 800e108:	460b      	mov	r3, r1
 800e10a:	f7f2 f8d7 	bl	80002bc <__adddf3>
 800e10e:	4602      	mov	r2, r0
 800e110:	460b      	mov	r3, r1
 800e112:	a103      	add	r1, pc, #12	; (adr r1, 800e120 <__ieee754_acos+0x280>)
 800e114:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e118:	e76f      	b.n	800dffa <__ieee754_acos+0x15a>
 800e11a:	bf00      	nop
 800e11c:	f3af 8000 	nop.w
 800e120:	54442d18 	.word	0x54442d18
 800e124:	400921fb 	.word	0x400921fb
 800e128:	0dfdf709 	.word	0x0dfdf709
 800e12c:	3f023de1 	.word	0x3f023de1
 800e130:	7501b288 	.word	0x7501b288
 800e134:	3f49efe0 	.word	0x3f49efe0
 800e138:	b5688f3b 	.word	0xb5688f3b
 800e13c:	3fa48228 	.word	0x3fa48228
 800e140:	0e884455 	.word	0x0e884455
 800e144:	3fc9c155 	.word	0x3fc9c155
 800e148:	03eb6f7d 	.word	0x03eb6f7d
 800e14c:	3fd4d612 	.word	0x3fd4d612
 800e150:	55555555 	.word	0x55555555
 800e154:	3fc55555 	.word	0x3fc55555
 800e158:	b12e9282 	.word	0xb12e9282
 800e15c:	3fb3b8c5 	.word	0x3fb3b8c5
 800e160:	1b8d0159 	.word	0x1b8d0159
 800e164:	3fe6066c 	.word	0x3fe6066c
 800e168:	9c598ac8 	.word	0x9c598ac8
 800e16c:	40002ae5 	.word	0x40002ae5
 800e170:	1c8a2d4b 	.word	0x1c8a2d4b
 800e174:	40033a27 	.word	0x40033a27
 800e178:	33145c07 	.word	0x33145c07
 800e17c:	3c91a626 	.word	0x3c91a626
 800e180:	54442d18 	.word	0x54442d18
 800e184:	3ff921fb 	.word	0x3ff921fb
 800e188:	3fefffff 	.word	0x3fefffff
 800e18c:	3fdfffff 	.word	0x3fdfffff
 800e190:	3c600000 	.word	0x3c600000
 800e194:	3ff00000 	.word	0x3ff00000
 800e198:	3fe00000 	.word	0x3fe00000
 800e19c:	ee10 2a10 	vmov	r2, s0
 800e1a0:	462b      	mov	r3, r5
 800e1a2:	496d      	ldr	r1, [pc, #436]	; (800e358 <__ieee754_acos+0x4b8>)
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	f7f2 f887 	bl	80002b8 <__aeabi_dsub>
 800e1aa:	4b6c      	ldr	r3, [pc, #432]	; (800e35c <__ieee754_acos+0x4bc>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	f7f2 fa3b 	bl	8000628 <__aeabi_dmul>
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	460d      	mov	r5, r1
 800e1b6:	ec45 4b10 	vmov	d0, r4, r5
 800e1ba:	f001 f8d9 	bl	800f370 <__ieee754_sqrt>
 800e1be:	a34e      	add	r3, pc, #312	; (adr r3, 800e2f8 <__ieee754_acos+0x458>)
 800e1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	4629      	mov	r1, r5
 800e1c8:	ec59 8b10 	vmov	r8, r9, d0
 800e1cc:	f7f2 fa2c 	bl	8000628 <__aeabi_dmul>
 800e1d0:	a34b      	add	r3, pc, #300	; (adr r3, 800e300 <__ieee754_acos+0x460>)
 800e1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d6:	f7f2 f871 	bl	80002bc <__adddf3>
 800e1da:	4622      	mov	r2, r4
 800e1dc:	462b      	mov	r3, r5
 800e1de:	f7f2 fa23 	bl	8000628 <__aeabi_dmul>
 800e1e2:	a349      	add	r3, pc, #292	; (adr r3, 800e308 <__ieee754_acos+0x468>)
 800e1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e8:	f7f2 f866 	bl	80002b8 <__aeabi_dsub>
 800e1ec:	4622      	mov	r2, r4
 800e1ee:	462b      	mov	r3, r5
 800e1f0:	f7f2 fa1a 	bl	8000628 <__aeabi_dmul>
 800e1f4:	a346      	add	r3, pc, #280	; (adr r3, 800e310 <__ieee754_acos+0x470>)
 800e1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fa:	f7f2 f85f 	bl	80002bc <__adddf3>
 800e1fe:	4622      	mov	r2, r4
 800e200:	462b      	mov	r3, r5
 800e202:	f7f2 fa11 	bl	8000628 <__aeabi_dmul>
 800e206:	a344      	add	r3, pc, #272	; (adr r3, 800e318 <__ieee754_acos+0x478>)
 800e208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20c:	f7f2 f854 	bl	80002b8 <__aeabi_dsub>
 800e210:	4622      	mov	r2, r4
 800e212:	462b      	mov	r3, r5
 800e214:	f7f2 fa08 	bl	8000628 <__aeabi_dmul>
 800e218:	a341      	add	r3, pc, #260	; (adr r3, 800e320 <__ieee754_acos+0x480>)
 800e21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21e:	f7f2 f84d 	bl	80002bc <__adddf3>
 800e222:	4622      	mov	r2, r4
 800e224:	462b      	mov	r3, r5
 800e226:	f7f2 f9ff 	bl	8000628 <__aeabi_dmul>
 800e22a:	a33f      	add	r3, pc, #252	; (adr r3, 800e328 <__ieee754_acos+0x488>)
 800e22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e230:	4682      	mov	sl, r0
 800e232:	468b      	mov	fp, r1
 800e234:	4620      	mov	r0, r4
 800e236:	4629      	mov	r1, r5
 800e238:	f7f2 f9f6 	bl	8000628 <__aeabi_dmul>
 800e23c:	a33c      	add	r3, pc, #240	; (adr r3, 800e330 <__ieee754_acos+0x490>)
 800e23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e242:	f7f2 f839 	bl	80002b8 <__aeabi_dsub>
 800e246:	4622      	mov	r2, r4
 800e248:	462b      	mov	r3, r5
 800e24a:	f7f2 f9ed 	bl	8000628 <__aeabi_dmul>
 800e24e:	a33a      	add	r3, pc, #232	; (adr r3, 800e338 <__ieee754_acos+0x498>)
 800e250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e254:	f7f2 f832 	bl	80002bc <__adddf3>
 800e258:	4622      	mov	r2, r4
 800e25a:	462b      	mov	r3, r5
 800e25c:	f7f2 f9e4 	bl	8000628 <__aeabi_dmul>
 800e260:	a337      	add	r3, pc, #220	; (adr r3, 800e340 <__ieee754_acos+0x4a0>)
 800e262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e266:	f7f2 f827 	bl	80002b8 <__aeabi_dsub>
 800e26a:	4622      	mov	r2, r4
 800e26c:	462b      	mov	r3, r5
 800e26e:	f7f2 f9db 	bl	8000628 <__aeabi_dmul>
 800e272:	4b39      	ldr	r3, [pc, #228]	; (800e358 <__ieee754_acos+0x4b8>)
 800e274:	2200      	movs	r2, #0
 800e276:	f7f2 f821 	bl	80002bc <__adddf3>
 800e27a:	4602      	mov	r2, r0
 800e27c:	460b      	mov	r3, r1
 800e27e:	4650      	mov	r0, sl
 800e280:	4659      	mov	r1, fp
 800e282:	f7f2 fafb 	bl	800087c <__aeabi_ddiv>
 800e286:	4642      	mov	r2, r8
 800e288:	464b      	mov	r3, r9
 800e28a:	f7f2 f9cd 	bl	8000628 <__aeabi_dmul>
 800e28e:	2600      	movs	r6, #0
 800e290:	4682      	mov	sl, r0
 800e292:	468b      	mov	fp, r1
 800e294:	4632      	mov	r2, r6
 800e296:	464b      	mov	r3, r9
 800e298:	4630      	mov	r0, r6
 800e29a:	4649      	mov	r1, r9
 800e29c:	f7f2 f9c4 	bl	8000628 <__aeabi_dmul>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	4629      	mov	r1, r5
 800e2a8:	f7f2 f806 	bl	80002b8 <__aeabi_dsub>
 800e2ac:	4632      	mov	r2, r6
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	460d      	mov	r5, r1
 800e2b2:	464b      	mov	r3, r9
 800e2b4:	4640      	mov	r0, r8
 800e2b6:	4649      	mov	r1, r9
 800e2b8:	f7f2 f800 	bl	80002bc <__adddf3>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	460b      	mov	r3, r1
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	4629      	mov	r1, r5
 800e2c4:	f7f2 fada 	bl	800087c <__aeabi_ddiv>
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	4650      	mov	r0, sl
 800e2ce:	4659      	mov	r1, fp
 800e2d0:	f7f1 fff4 	bl	80002bc <__adddf3>
 800e2d4:	4632      	mov	r2, r6
 800e2d6:	464b      	mov	r3, r9
 800e2d8:	f7f1 fff0 	bl	80002bc <__adddf3>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	460b      	mov	r3, r1
 800e2e0:	f7f1 ffec 	bl	80002bc <__adddf3>
 800e2e4:	e5fe      	b.n	800dee4 <__ieee754_acos+0x44>
 800e2e6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800e348 <__ieee754_acos+0x4a8>
 800e2ea:	e5ed      	b.n	800dec8 <__ieee754_acos+0x28>
 800e2ec:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800e350 <__ieee754_acos+0x4b0>
 800e2f0:	e5ea      	b.n	800dec8 <__ieee754_acos+0x28>
 800e2f2:	bf00      	nop
 800e2f4:	f3af 8000 	nop.w
 800e2f8:	0dfdf709 	.word	0x0dfdf709
 800e2fc:	3f023de1 	.word	0x3f023de1
 800e300:	7501b288 	.word	0x7501b288
 800e304:	3f49efe0 	.word	0x3f49efe0
 800e308:	b5688f3b 	.word	0xb5688f3b
 800e30c:	3fa48228 	.word	0x3fa48228
 800e310:	0e884455 	.word	0x0e884455
 800e314:	3fc9c155 	.word	0x3fc9c155
 800e318:	03eb6f7d 	.word	0x03eb6f7d
 800e31c:	3fd4d612 	.word	0x3fd4d612
 800e320:	55555555 	.word	0x55555555
 800e324:	3fc55555 	.word	0x3fc55555
 800e328:	b12e9282 	.word	0xb12e9282
 800e32c:	3fb3b8c5 	.word	0x3fb3b8c5
 800e330:	1b8d0159 	.word	0x1b8d0159
 800e334:	3fe6066c 	.word	0x3fe6066c
 800e338:	9c598ac8 	.word	0x9c598ac8
 800e33c:	40002ae5 	.word	0x40002ae5
 800e340:	1c8a2d4b 	.word	0x1c8a2d4b
 800e344:	40033a27 	.word	0x40033a27
	...
 800e350:	54442d18 	.word	0x54442d18
 800e354:	3ff921fb 	.word	0x3ff921fb
 800e358:	3ff00000 	.word	0x3ff00000
 800e35c:	3fe00000 	.word	0x3fe00000

0800e360 <__ieee754_atan2>:
 800e360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e364:	ec57 6b11 	vmov	r6, r7, d1
 800e368:	4273      	negs	r3, r6
 800e36a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e4f0 <__ieee754_atan2+0x190>
 800e36e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e372:	4333      	orrs	r3, r6
 800e374:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e378:	4573      	cmp	r3, lr
 800e37a:	ec51 0b10 	vmov	r0, r1, d0
 800e37e:	ee11 8a10 	vmov	r8, s2
 800e382:	d80a      	bhi.n	800e39a <__ieee754_atan2+0x3a>
 800e384:	4244      	negs	r4, r0
 800e386:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e38a:	4304      	orrs	r4, r0
 800e38c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e390:	4574      	cmp	r4, lr
 800e392:	ee10 9a10 	vmov	r9, s0
 800e396:	468c      	mov	ip, r1
 800e398:	d907      	bls.n	800e3aa <__ieee754_atan2+0x4a>
 800e39a:	4632      	mov	r2, r6
 800e39c:	463b      	mov	r3, r7
 800e39e:	f7f1 ff8d 	bl	80002bc <__adddf3>
 800e3a2:	ec41 0b10 	vmov	d0, r0, r1
 800e3a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e3ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e3b2:	4334      	orrs	r4, r6
 800e3b4:	d103      	bne.n	800e3be <__ieee754_atan2+0x5e>
 800e3b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3ba:	f001 bd95 	b.w	800fee8 <atan>
 800e3be:	17bc      	asrs	r4, r7, #30
 800e3c0:	f004 0402 	and.w	r4, r4, #2
 800e3c4:	ea53 0909 	orrs.w	r9, r3, r9
 800e3c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e3cc:	d107      	bne.n	800e3de <__ieee754_atan2+0x7e>
 800e3ce:	2c02      	cmp	r4, #2
 800e3d0:	d060      	beq.n	800e494 <__ieee754_atan2+0x134>
 800e3d2:	2c03      	cmp	r4, #3
 800e3d4:	d1e5      	bne.n	800e3a2 <__ieee754_atan2+0x42>
 800e3d6:	a142      	add	r1, pc, #264	; (adr r1, 800e4e0 <__ieee754_atan2+0x180>)
 800e3d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3dc:	e7e1      	b.n	800e3a2 <__ieee754_atan2+0x42>
 800e3de:	ea52 0808 	orrs.w	r8, r2, r8
 800e3e2:	d106      	bne.n	800e3f2 <__ieee754_atan2+0x92>
 800e3e4:	f1bc 0f00 	cmp.w	ip, #0
 800e3e8:	da5f      	bge.n	800e4aa <__ieee754_atan2+0x14a>
 800e3ea:	a13f      	add	r1, pc, #252	; (adr r1, 800e4e8 <__ieee754_atan2+0x188>)
 800e3ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3f0:	e7d7      	b.n	800e3a2 <__ieee754_atan2+0x42>
 800e3f2:	4572      	cmp	r2, lr
 800e3f4:	d10f      	bne.n	800e416 <__ieee754_atan2+0xb6>
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	f104 34ff 	add.w	r4, r4, #4294967295
 800e3fc:	d107      	bne.n	800e40e <__ieee754_atan2+0xae>
 800e3fe:	2c02      	cmp	r4, #2
 800e400:	d84c      	bhi.n	800e49c <__ieee754_atan2+0x13c>
 800e402:	4b35      	ldr	r3, [pc, #212]	; (800e4d8 <__ieee754_atan2+0x178>)
 800e404:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e408:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e40c:	e7c9      	b.n	800e3a2 <__ieee754_atan2+0x42>
 800e40e:	2c02      	cmp	r4, #2
 800e410:	d848      	bhi.n	800e4a4 <__ieee754_atan2+0x144>
 800e412:	4b32      	ldr	r3, [pc, #200]	; (800e4dc <__ieee754_atan2+0x17c>)
 800e414:	e7f6      	b.n	800e404 <__ieee754_atan2+0xa4>
 800e416:	4573      	cmp	r3, lr
 800e418:	d0e4      	beq.n	800e3e4 <__ieee754_atan2+0x84>
 800e41a:	1a9b      	subs	r3, r3, r2
 800e41c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e420:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e424:	da1e      	bge.n	800e464 <__ieee754_atan2+0x104>
 800e426:	2f00      	cmp	r7, #0
 800e428:	da01      	bge.n	800e42e <__ieee754_atan2+0xce>
 800e42a:	323c      	adds	r2, #60	; 0x3c
 800e42c:	db1e      	blt.n	800e46c <__ieee754_atan2+0x10c>
 800e42e:	4632      	mov	r2, r6
 800e430:	463b      	mov	r3, r7
 800e432:	f7f2 fa23 	bl	800087c <__aeabi_ddiv>
 800e436:	ec41 0b10 	vmov	d0, r0, r1
 800e43a:	f001 fef5 	bl	8010228 <fabs>
 800e43e:	f001 fd53 	bl	800fee8 <atan>
 800e442:	ec51 0b10 	vmov	r0, r1, d0
 800e446:	2c01      	cmp	r4, #1
 800e448:	d013      	beq.n	800e472 <__ieee754_atan2+0x112>
 800e44a:	2c02      	cmp	r4, #2
 800e44c:	d015      	beq.n	800e47a <__ieee754_atan2+0x11a>
 800e44e:	2c00      	cmp	r4, #0
 800e450:	d0a7      	beq.n	800e3a2 <__ieee754_atan2+0x42>
 800e452:	a319      	add	r3, pc, #100	; (adr r3, 800e4b8 <__ieee754_atan2+0x158>)
 800e454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e458:	f7f1 ff2e 	bl	80002b8 <__aeabi_dsub>
 800e45c:	a318      	add	r3, pc, #96	; (adr r3, 800e4c0 <__ieee754_atan2+0x160>)
 800e45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e462:	e014      	b.n	800e48e <__ieee754_atan2+0x12e>
 800e464:	a118      	add	r1, pc, #96	; (adr r1, 800e4c8 <__ieee754_atan2+0x168>)
 800e466:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e46a:	e7ec      	b.n	800e446 <__ieee754_atan2+0xe6>
 800e46c:	2000      	movs	r0, #0
 800e46e:	2100      	movs	r1, #0
 800e470:	e7e9      	b.n	800e446 <__ieee754_atan2+0xe6>
 800e472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e476:	4619      	mov	r1, r3
 800e478:	e793      	b.n	800e3a2 <__ieee754_atan2+0x42>
 800e47a:	a30f      	add	r3, pc, #60	; (adr r3, 800e4b8 <__ieee754_atan2+0x158>)
 800e47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e480:	f7f1 ff1a 	bl	80002b8 <__aeabi_dsub>
 800e484:	4602      	mov	r2, r0
 800e486:	460b      	mov	r3, r1
 800e488:	a10d      	add	r1, pc, #52	; (adr r1, 800e4c0 <__ieee754_atan2+0x160>)
 800e48a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e48e:	f7f1 ff13 	bl	80002b8 <__aeabi_dsub>
 800e492:	e786      	b.n	800e3a2 <__ieee754_atan2+0x42>
 800e494:	a10a      	add	r1, pc, #40	; (adr r1, 800e4c0 <__ieee754_atan2+0x160>)
 800e496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e49a:	e782      	b.n	800e3a2 <__ieee754_atan2+0x42>
 800e49c:	a10c      	add	r1, pc, #48	; (adr r1, 800e4d0 <__ieee754_atan2+0x170>)
 800e49e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4a2:	e77e      	b.n	800e3a2 <__ieee754_atan2+0x42>
 800e4a4:	2000      	movs	r0, #0
 800e4a6:	2100      	movs	r1, #0
 800e4a8:	e77b      	b.n	800e3a2 <__ieee754_atan2+0x42>
 800e4aa:	a107      	add	r1, pc, #28	; (adr r1, 800e4c8 <__ieee754_atan2+0x168>)
 800e4ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4b0:	e777      	b.n	800e3a2 <__ieee754_atan2+0x42>
 800e4b2:	bf00      	nop
 800e4b4:	f3af 8000 	nop.w
 800e4b8:	33145c07 	.word	0x33145c07
 800e4bc:	3ca1a626 	.word	0x3ca1a626
 800e4c0:	54442d18 	.word	0x54442d18
 800e4c4:	400921fb 	.word	0x400921fb
 800e4c8:	54442d18 	.word	0x54442d18
 800e4cc:	3ff921fb 	.word	0x3ff921fb
 800e4d0:	54442d18 	.word	0x54442d18
 800e4d4:	3fe921fb 	.word	0x3fe921fb
 800e4d8:	08010df0 	.word	0x08010df0
 800e4dc:	08010e08 	.word	0x08010e08
 800e4e0:	54442d18 	.word	0x54442d18
 800e4e4:	c00921fb 	.word	0xc00921fb
 800e4e8:	54442d18 	.word	0x54442d18
 800e4ec:	bff921fb 	.word	0xbff921fb
 800e4f0:	7ff00000 	.word	0x7ff00000
 800e4f4:	00000000 	.word	0x00000000

0800e4f8 <__ieee754_pow>:
 800e4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4fc:	ed2d 8b06 	vpush	{d8-d10}
 800e500:	b089      	sub	sp, #36	; 0x24
 800e502:	ed8d 1b00 	vstr	d1, [sp]
 800e506:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e50a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e50e:	ea58 0102 	orrs.w	r1, r8, r2
 800e512:	ec57 6b10 	vmov	r6, r7, d0
 800e516:	d115      	bne.n	800e544 <__ieee754_pow+0x4c>
 800e518:	19b3      	adds	r3, r6, r6
 800e51a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e51e:	4152      	adcs	r2, r2
 800e520:	4299      	cmp	r1, r3
 800e522:	4b89      	ldr	r3, [pc, #548]	; (800e748 <__ieee754_pow+0x250>)
 800e524:	4193      	sbcs	r3, r2
 800e526:	f080 84d2 	bcs.w	800eece <__ieee754_pow+0x9d6>
 800e52a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e52e:	4630      	mov	r0, r6
 800e530:	4639      	mov	r1, r7
 800e532:	f7f1 fec3 	bl	80002bc <__adddf3>
 800e536:	ec41 0b10 	vmov	d0, r0, r1
 800e53a:	b009      	add	sp, #36	; 0x24
 800e53c:	ecbd 8b06 	vpop	{d8-d10}
 800e540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e544:	4b81      	ldr	r3, [pc, #516]	; (800e74c <__ieee754_pow+0x254>)
 800e546:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e54a:	429c      	cmp	r4, r3
 800e54c:	ee10 aa10 	vmov	sl, s0
 800e550:	463d      	mov	r5, r7
 800e552:	dc06      	bgt.n	800e562 <__ieee754_pow+0x6a>
 800e554:	d101      	bne.n	800e55a <__ieee754_pow+0x62>
 800e556:	2e00      	cmp	r6, #0
 800e558:	d1e7      	bne.n	800e52a <__ieee754_pow+0x32>
 800e55a:	4598      	cmp	r8, r3
 800e55c:	dc01      	bgt.n	800e562 <__ieee754_pow+0x6a>
 800e55e:	d10f      	bne.n	800e580 <__ieee754_pow+0x88>
 800e560:	b172      	cbz	r2, 800e580 <__ieee754_pow+0x88>
 800e562:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e566:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e56a:	ea55 050a 	orrs.w	r5, r5, sl
 800e56e:	d1dc      	bne.n	800e52a <__ieee754_pow+0x32>
 800e570:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e574:	18db      	adds	r3, r3, r3
 800e576:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e57a:	4152      	adcs	r2, r2
 800e57c:	429d      	cmp	r5, r3
 800e57e:	e7d0      	b.n	800e522 <__ieee754_pow+0x2a>
 800e580:	2d00      	cmp	r5, #0
 800e582:	da3b      	bge.n	800e5fc <__ieee754_pow+0x104>
 800e584:	4b72      	ldr	r3, [pc, #456]	; (800e750 <__ieee754_pow+0x258>)
 800e586:	4598      	cmp	r8, r3
 800e588:	dc51      	bgt.n	800e62e <__ieee754_pow+0x136>
 800e58a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e58e:	4598      	cmp	r8, r3
 800e590:	f340 84ac 	ble.w	800eeec <__ieee754_pow+0x9f4>
 800e594:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e598:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e59c:	2b14      	cmp	r3, #20
 800e59e:	dd0f      	ble.n	800e5c0 <__ieee754_pow+0xc8>
 800e5a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e5a4:	fa22 f103 	lsr.w	r1, r2, r3
 800e5a8:	fa01 f303 	lsl.w	r3, r1, r3
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	f040 849d 	bne.w	800eeec <__ieee754_pow+0x9f4>
 800e5b2:	f001 0101 	and.w	r1, r1, #1
 800e5b6:	f1c1 0302 	rsb	r3, r1, #2
 800e5ba:	9304      	str	r3, [sp, #16]
 800e5bc:	b182      	cbz	r2, 800e5e0 <__ieee754_pow+0xe8>
 800e5be:	e05f      	b.n	800e680 <__ieee754_pow+0x188>
 800e5c0:	2a00      	cmp	r2, #0
 800e5c2:	d15b      	bne.n	800e67c <__ieee754_pow+0x184>
 800e5c4:	f1c3 0314 	rsb	r3, r3, #20
 800e5c8:	fa48 f103 	asr.w	r1, r8, r3
 800e5cc:	fa01 f303 	lsl.w	r3, r1, r3
 800e5d0:	4543      	cmp	r3, r8
 800e5d2:	f040 8488 	bne.w	800eee6 <__ieee754_pow+0x9ee>
 800e5d6:	f001 0101 	and.w	r1, r1, #1
 800e5da:	f1c1 0302 	rsb	r3, r1, #2
 800e5de:	9304      	str	r3, [sp, #16]
 800e5e0:	4b5c      	ldr	r3, [pc, #368]	; (800e754 <__ieee754_pow+0x25c>)
 800e5e2:	4598      	cmp	r8, r3
 800e5e4:	d132      	bne.n	800e64c <__ieee754_pow+0x154>
 800e5e6:	f1b9 0f00 	cmp.w	r9, #0
 800e5ea:	f280 8478 	bge.w	800eede <__ieee754_pow+0x9e6>
 800e5ee:	4959      	ldr	r1, [pc, #356]	; (800e754 <__ieee754_pow+0x25c>)
 800e5f0:	4632      	mov	r2, r6
 800e5f2:	463b      	mov	r3, r7
 800e5f4:	2000      	movs	r0, #0
 800e5f6:	f7f2 f941 	bl	800087c <__aeabi_ddiv>
 800e5fa:	e79c      	b.n	800e536 <__ieee754_pow+0x3e>
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	9304      	str	r3, [sp, #16]
 800e600:	2a00      	cmp	r2, #0
 800e602:	d13d      	bne.n	800e680 <__ieee754_pow+0x188>
 800e604:	4b51      	ldr	r3, [pc, #324]	; (800e74c <__ieee754_pow+0x254>)
 800e606:	4598      	cmp	r8, r3
 800e608:	d1ea      	bne.n	800e5e0 <__ieee754_pow+0xe8>
 800e60a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e60e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e612:	ea53 030a 	orrs.w	r3, r3, sl
 800e616:	f000 845a 	beq.w	800eece <__ieee754_pow+0x9d6>
 800e61a:	4b4f      	ldr	r3, [pc, #316]	; (800e758 <__ieee754_pow+0x260>)
 800e61c:	429c      	cmp	r4, r3
 800e61e:	dd08      	ble.n	800e632 <__ieee754_pow+0x13a>
 800e620:	f1b9 0f00 	cmp.w	r9, #0
 800e624:	f2c0 8457 	blt.w	800eed6 <__ieee754_pow+0x9de>
 800e628:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e62c:	e783      	b.n	800e536 <__ieee754_pow+0x3e>
 800e62e:	2302      	movs	r3, #2
 800e630:	e7e5      	b.n	800e5fe <__ieee754_pow+0x106>
 800e632:	f1b9 0f00 	cmp.w	r9, #0
 800e636:	f04f 0000 	mov.w	r0, #0
 800e63a:	f04f 0100 	mov.w	r1, #0
 800e63e:	f6bf af7a 	bge.w	800e536 <__ieee754_pow+0x3e>
 800e642:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e646:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e64a:	e774      	b.n	800e536 <__ieee754_pow+0x3e>
 800e64c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e650:	d106      	bne.n	800e660 <__ieee754_pow+0x168>
 800e652:	4632      	mov	r2, r6
 800e654:	463b      	mov	r3, r7
 800e656:	4630      	mov	r0, r6
 800e658:	4639      	mov	r1, r7
 800e65a:	f7f1 ffe5 	bl	8000628 <__aeabi_dmul>
 800e65e:	e76a      	b.n	800e536 <__ieee754_pow+0x3e>
 800e660:	4b3e      	ldr	r3, [pc, #248]	; (800e75c <__ieee754_pow+0x264>)
 800e662:	4599      	cmp	r9, r3
 800e664:	d10c      	bne.n	800e680 <__ieee754_pow+0x188>
 800e666:	2d00      	cmp	r5, #0
 800e668:	db0a      	blt.n	800e680 <__ieee754_pow+0x188>
 800e66a:	ec47 6b10 	vmov	d0, r6, r7
 800e66e:	b009      	add	sp, #36	; 0x24
 800e670:	ecbd 8b06 	vpop	{d8-d10}
 800e674:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e678:	f000 be7a 	b.w	800f370 <__ieee754_sqrt>
 800e67c:	2300      	movs	r3, #0
 800e67e:	9304      	str	r3, [sp, #16]
 800e680:	ec47 6b10 	vmov	d0, r6, r7
 800e684:	f001 fdd0 	bl	8010228 <fabs>
 800e688:	ec51 0b10 	vmov	r0, r1, d0
 800e68c:	f1ba 0f00 	cmp.w	sl, #0
 800e690:	d129      	bne.n	800e6e6 <__ieee754_pow+0x1ee>
 800e692:	b124      	cbz	r4, 800e69e <__ieee754_pow+0x1a6>
 800e694:	4b2f      	ldr	r3, [pc, #188]	; (800e754 <__ieee754_pow+0x25c>)
 800e696:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d123      	bne.n	800e6e6 <__ieee754_pow+0x1ee>
 800e69e:	f1b9 0f00 	cmp.w	r9, #0
 800e6a2:	da05      	bge.n	800e6b0 <__ieee754_pow+0x1b8>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	2000      	movs	r0, #0
 800e6aa:	492a      	ldr	r1, [pc, #168]	; (800e754 <__ieee754_pow+0x25c>)
 800e6ac:	f7f2 f8e6 	bl	800087c <__aeabi_ddiv>
 800e6b0:	2d00      	cmp	r5, #0
 800e6b2:	f6bf af40 	bge.w	800e536 <__ieee754_pow+0x3e>
 800e6b6:	9b04      	ldr	r3, [sp, #16]
 800e6b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e6bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e6c0:	4323      	orrs	r3, r4
 800e6c2:	d108      	bne.n	800e6d6 <__ieee754_pow+0x1de>
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	4610      	mov	r0, r2
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	f7f1 fdf4 	bl	80002b8 <__aeabi_dsub>
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	460b      	mov	r3, r1
 800e6d4:	e78f      	b.n	800e5f6 <__ieee754_pow+0xfe>
 800e6d6:	9b04      	ldr	r3, [sp, #16]
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	f47f af2c 	bne.w	800e536 <__ieee754_pow+0x3e>
 800e6de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	e727      	b.n	800e536 <__ieee754_pow+0x3e>
 800e6e6:	0feb      	lsrs	r3, r5, #31
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	9306      	str	r3, [sp, #24]
 800e6ec:	9a06      	ldr	r2, [sp, #24]
 800e6ee:	9b04      	ldr	r3, [sp, #16]
 800e6f0:	4313      	orrs	r3, r2
 800e6f2:	d102      	bne.n	800e6fa <__ieee754_pow+0x202>
 800e6f4:	4632      	mov	r2, r6
 800e6f6:	463b      	mov	r3, r7
 800e6f8:	e7e6      	b.n	800e6c8 <__ieee754_pow+0x1d0>
 800e6fa:	4b19      	ldr	r3, [pc, #100]	; (800e760 <__ieee754_pow+0x268>)
 800e6fc:	4598      	cmp	r8, r3
 800e6fe:	f340 80fb 	ble.w	800e8f8 <__ieee754_pow+0x400>
 800e702:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e706:	4598      	cmp	r8, r3
 800e708:	4b13      	ldr	r3, [pc, #76]	; (800e758 <__ieee754_pow+0x260>)
 800e70a:	dd0c      	ble.n	800e726 <__ieee754_pow+0x22e>
 800e70c:	429c      	cmp	r4, r3
 800e70e:	dc0f      	bgt.n	800e730 <__ieee754_pow+0x238>
 800e710:	f1b9 0f00 	cmp.w	r9, #0
 800e714:	da0f      	bge.n	800e736 <__ieee754_pow+0x23e>
 800e716:	2000      	movs	r0, #0
 800e718:	b009      	add	sp, #36	; 0x24
 800e71a:	ecbd 8b06 	vpop	{d8-d10}
 800e71e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e722:	f001 bbd6 	b.w	800fed2 <__math_oflow>
 800e726:	429c      	cmp	r4, r3
 800e728:	dbf2      	blt.n	800e710 <__ieee754_pow+0x218>
 800e72a:	4b0a      	ldr	r3, [pc, #40]	; (800e754 <__ieee754_pow+0x25c>)
 800e72c:	429c      	cmp	r4, r3
 800e72e:	dd19      	ble.n	800e764 <__ieee754_pow+0x26c>
 800e730:	f1b9 0f00 	cmp.w	r9, #0
 800e734:	dcef      	bgt.n	800e716 <__ieee754_pow+0x21e>
 800e736:	2000      	movs	r0, #0
 800e738:	b009      	add	sp, #36	; 0x24
 800e73a:	ecbd 8b06 	vpop	{d8-d10}
 800e73e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e742:	f001 bbbd 	b.w	800fec0 <__math_uflow>
 800e746:	bf00      	nop
 800e748:	fff00000 	.word	0xfff00000
 800e74c:	7ff00000 	.word	0x7ff00000
 800e750:	433fffff 	.word	0x433fffff
 800e754:	3ff00000 	.word	0x3ff00000
 800e758:	3fefffff 	.word	0x3fefffff
 800e75c:	3fe00000 	.word	0x3fe00000
 800e760:	41e00000 	.word	0x41e00000
 800e764:	4b60      	ldr	r3, [pc, #384]	; (800e8e8 <__ieee754_pow+0x3f0>)
 800e766:	2200      	movs	r2, #0
 800e768:	f7f1 fda6 	bl	80002b8 <__aeabi_dsub>
 800e76c:	a354      	add	r3, pc, #336	; (adr r3, 800e8c0 <__ieee754_pow+0x3c8>)
 800e76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e772:	4604      	mov	r4, r0
 800e774:	460d      	mov	r5, r1
 800e776:	f7f1 ff57 	bl	8000628 <__aeabi_dmul>
 800e77a:	a353      	add	r3, pc, #332	; (adr r3, 800e8c8 <__ieee754_pow+0x3d0>)
 800e77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e780:	4606      	mov	r6, r0
 800e782:	460f      	mov	r7, r1
 800e784:	4620      	mov	r0, r4
 800e786:	4629      	mov	r1, r5
 800e788:	f7f1 ff4e 	bl	8000628 <__aeabi_dmul>
 800e78c:	4b57      	ldr	r3, [pc, #348]	; (800e8ec <__ieee754_pow+0x3f4>)
 800e78e:	4682      	mov	sl, r0
 800e790:	468b      	mov	fp, r1
 800e792:	2200      	movs	r2, #0
 800e794:	4620      	mov	r0, r4
 800e796:	4629      	mov	r1, r5
 800e798:	f7f1 ff46 	bl	8000628 <__aeabi_dmul>
 800e79c:	4602      	mov	r2, r0
 800e79e:	460b      	mov	r3, r1
 800e7a0:	a14b      	add	r1, pc, #300	; (adr r1, 800e8d0 <__ieee754_pow+0x3d8>)
 800e7a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7a6:	f7f1 fd87 	bl	80002b8 <__aeabi_dsub>
 800e7aa:	4622      	mov	r2, r4
 800e7ac:	462b      	mov	r3, r5
 800e7ae:	f7f1 ff3b 	bl	8000628 <__aeabi_dmul>
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	2000      	movs	r0, #0
 800e7b8:	494d      	ldr	r1, [pc, #308]	; (800e8f0 <__ieee754_pow+0x3f8>)
 800e7ba:	f7f1 fd7d 	bl	80002b8 <__aeabi_dsub>
 800e7be:	4622      	mov	r2, r4
 800e7c0:	4680      	mov	r8, r0
 800e7c2:	4689      	mov	r9, r1
 800e7c4:	462b      	mov	r3, r5
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	4629      	mov	r1, r5
 800e7ca:	f7f1 ff2d 	bl	8000628 <__aeabi_dmul>
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	4640      	mov	r0, r8
 800e7d4:	4649      	mov	r1, r9
 800e7d6:	f7f1 ff27 	bl	8000628 <__aeabi_dmul>
 800e7da:	a33f      	add	r3, pc, #252	; (adr r3, 800e8d8 <__ieee754_pow+0x3e0>)
 800e7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e0:	f7f1 ff22 	bl	8000628 <__aeabi_dmul>
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	4650      	mov	r0, sl
 800e7ea:	4659      	mov	r1, fp
 800e7ec:	f7f1 fd64 	bl	80002b8 <__aeabi_dsub>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	4680      	mov	r8, r0
 800e7f6:	4689      	mov	r9, r1
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	4639      	mov	r1, r7
 800e7fc:	f7f1 fd5e 	bl	80002bc <__adddf3>
 800e800:	2000      	movs	r0, #0
 800e802:	4632      	mov	r2, r6
 800e804:	463b      	mov	r3, r7
 800e806:	4604      	mov	r4, r0
 800e808:	460d      	mov	r5, r1
 800e80a:	f7f1 fd55 	bl	80002b8 <__aeabi_dsub>
 800e80e:	4602      	mov	r2, r0
 800e810:	460b      	mov	r3, r1
 800e812:	4640      	mov	r0, r8
 800e814:	4649      	mov	r1, r9
 800e816:	f7f1 fd4f 	bl	80002b8 <__aeabi_dsub>
 800e81a:	9b04      	ldr	r3, [sp, #16]
 800e81c:	9a06      	ldr	r2, [sp, #24]
 800e81e:	3b01      	subs	r3, #1
 800e820:	4313      	orrs	r3, r2
 800e822:	4682      	mov	sl, r0
 800e824:	468b      	mov	fp, r1
 800e826:	f040 81e7 	bne.w	800ebf8 <__ieee754_pow+0x700>
 800e82a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e8e0 <__ieee754_pow+0x3e8>
 800e82e:	eeb0 8a47 	vmov.f32	s16, s14
 800e832:	eef0 8a67 	vmov.f32	s17, s15
 800e836:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e83a:	2600      	movs	r6, #0
 800e83c:	4632      	mov	r2, r6
 800e83e:	463b      	mov	r3, r7
 800e840:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e844:	f7f1 fd38 	bl	80002b8 <__aeabi_dsub>
 800e848:	4622      	mov	r2, r4
 800e84a:	462b      	mov	r3, r5
 800e84c:	f7f1 feec 	bl	8000628 <__aeabi_dmul>
 800e850:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e854:	4680      	mov	r8, r0
 800e856:	4689      	mov	r9, r1
 800e858:	4650      	mov	r0, sl
 800e85a:	4659      	mov	r1, fp
 800e85c:	f7f1 fee4 	bl	8000628 <__aeabi_dmul>
 800e860:	4602      	mov	r2, r0
 800e862:	460b      	mov	r3, r1
 800e864:	4640      	mov	r0, r8
 800e866:	4649      	mov	r1, r9
 800e868:	f7f1 fd28 	bl	80002bc <__adddf3>
 800e86c:	4632      	mov	r2, r6
 800e86e:	463b      	mov	r3, r7
 800e870:	4680      	mov	r8, r0
 800e872:	4689      	mov	r9, r1
 800e874:	4620      	mov	r0, r4
 800e876:	4629      	mov	r1, r5
 800e878:	f7f1 fed6 	bl	8000628 <__aeabi_dmul>
 800e87c:	460b      	mov	r3, r1
 800e87e:	4604      	mov	r4, r0
 800e880:	460d      	mov	r5, r1
 800e882:	4602      	mov	r2, r0
 800e884:	4649      	mov	r1, r9
 800e886:	4640      	mov	r0, r8
 800e888:	f7f1 fd18 	bl	80002bc <__adddf3>
 800e88c:	4b19      	ldr	r3, [pc, #100]	; (800e8f4 <__ieee754_pow+0x3fc>)
 800e88e:	4299      	cmp	r1, r3
 800e890:	ec45 4b19 	vmov	d9, r4, r5
 800e894:	4606      	mov	r6, r0
 800e896:	460f      	mov	r7, r1
 800e898:	468b      	mov	fp, r1
 800e89a:	f340 82f1 	ble.w	800ee80 <__ieee754_pow+0x988>
 800e89e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e8a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e8a6:	4303      	orrs	r3, r0
 800e8a8:	f000 81e4 	beq.w	800ec74 <__ieee754_pow+0x77c>
 800e8ac:	ec51 0b18 	vmov	r0, r1, d8
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	f7f2 f92a 	bl	8000b0c <__aeabi_dcmplt>
 800e8b8:	3800      	subs	r0, #0
 800e8ba:	bf18      	it	ne
 800e8bc:	2001      	movne	r0, #1
 800e8be:	e72b      	b.n	800e718 <__ieee754_pow+0x220>
 800e8c0:	60000000 	.word	0x60000000
 800e8c4:	3ff71547 	.word	0x3ff71547
 800e8c8:	f85ddf44 	.word	0xf85ddf44
 800e8cc:	3e54ae0b 	.word	0x3e54ae0b
 800e8d0:	55555555 	.word	0x55555555
 800e8d4:	3fd55555 	.word	0x3fd55555
 800e8d8:	652b82fe 	.word	0x652b82fe
 800e8dc:	3ff71547 	.word	0x3ff71547
 800e8e0:	00000000 	.word	0x00000000
 800e8e4:	bff00000 	.word	0xbff00000
 800e8e8:	3ff00000 	.word	0x3ff00000
 800e8ec:	3fd00000 	.word	0x3fd00000
 800e8f0:	3fe00000 	.word	0x3fe00000
 800e8f4:	408fffff 	.word	0x408fffff
 800e8f8:	4bd5      	ldr	r3, [pc, #852]	; (800ec50 <__ieee754_pow+0x758>)
 800e8fa:	402b      	ands	r3, r5
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	b92b      	cbnz	r3, 800e90c <__ieee754_pow+0x414>
 800e900:	4bd4      	ldr	r3, [pc, #848]	; (800ec54 <__ieee754_pow+0x75c>)
 800e902:	f7f1 fe91 	bl	8000628 <__aeabi_dmul>
 800e906:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e90a:	460c      	mov	r4, r1
 800e90c:	1523      	asrs	r3, r4, #20
 800e90e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e912:	4413      	add	r3, r2
 800e914:	9305      	str	r3, [sp, #20]
 800e916:	4bd0      	ldr	r3, [pc, #832]	; (800ec58 <__ieee754_pow+0x760>)
 800e918:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e91c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e920:	429c      	cmp	r4, r3
 800e922:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e926:	dd08      	ble.n	800e93a <__ieee754_pow+0x442>
 800e928:	4bcc      	ldr	r3, [pc, #816]	; (800ec5c <__ieee754_pow+0x764>)
 800e92a:	429c      	cmp	r4, r3
 800e92c:	f340 8162 	ble.w	800ebf4 <__ieee754_pow+0x6fc>
 800e930:	9b05      	ldr	r3, [sp, #20]
 800e932:	3301      	adds	r3, #1
 800e934:	9305      	str	r3, [sp, #20]
 800e936:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e93a:	2400      	movs	r4, #0
 800e93c:	00e3      	lsls	r3, r4, #3
 800e93e:	9307      	str	r3, [sp, #28]
 800e940:	4bc7      	ldr	r3, [pc, #796]	; (800ec60 <__ieee754_pow+0x768>)
 800e942:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e946:	ed93 7b00 	vldr	d7, [r3]
 800e94a:	4629      	mov	r1, r5
 800e94c:	ec53 2b17 	vmov	r2, r3, d7
 800e950:	eeb0 9a47 	vmov.f32	s18, s14
 800e954:	eef0 9a67 	vmov.f32	s19, s15
 800e958:	4682      	mov	sl, r0
 800e95a:	f7f1 fcad 	bl	80002b8 <__aeabi_dsub>
 800e95e:	4652      	mov	r2, sl
 800e960:	4606      	mov	r6, r0
 800e962:	460f      	mov	r7, r1
 800e964:	462b      	mov	r3, r5
 800e966:	ec51 0b19 	vmov	r0, r1, d9
 800e96a:	f7f1 fca7 	bl	80002bc <__adddf3>
 800e96e:	4602      	mov	r2, r0
 800e970:	460b      	mov	r3, r1
 800e972:	2000      	movs	r0, #0
 800e974:	49bb      	ldr	r1, [pc, #748]	; (800ec64 <__ieee754_pow+0x76c>)
 800e976:	f7f1 ff81 	bl	800087c <__aeabi_ddiv>
 800e97a:	ec41 0b1a 	vmov	d10, r0, r1
 800e97e:	4602      	mov	r2, r0
 800e980:	460b      	mov	r3, r1
 800e982:	4630      	mov	r0, r6
 800e984:	4639      	mov	r1, r7
 800e986:	f7f1 fe4f 	bl	8000628 <__aeabi_dmul>
 800e98a:	2300      	movs	r3, #0
 800e98c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e990:	9302      	str	r3, [sp, #8]
 800e992:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e996:	46ab      	mov	fp, r5
 800e998:	106d      	asrs	r5, r5, #1
 800e99a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e99e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e9a2:	ec41 0b18 	vmov	d8, r0, r1
 800e9a6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	4640      	mov	r0, r8
 800e9ae:	4649      	mov	r1, r9
 800e9b0:	4614      	mov	r4, r2
 800e9b2:	461d      	mov	r5, r3
 800e9b4:	f7f1 fe38 	bl	8000628 <__aeabi_dmul>
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	460b      	mov	r3, r1
 800e9bc:	4630      	mov	r0, r6
 800e9be:	4639      	mov	r1, r7
 800e9c0:	f7f1 fc7a 	bl	80002b8 <__aeabi_dsub>
 800e9c4:	ec53 2b19 	vmov	r2, r3, d9
 800e9c8:	4606      	mov	r6, r0
 800e9ca:	460f      	mov	r7, r1
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	4629      	mov	r1, r5
 800e9d0:	f7f1 fc72 	bl	80002b8 <__aeabi_dsub>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	4650      	mov	r0, sl
 800e9da:	4659      	mov	r1, fp
 800e9dc:	f7f1 fc6c 	bl	80002b8 <__aeabi_dsub>
 800e9e0:	4642      	mov	r2, r8
 800e9e2:	464b      	mov	r3, r9
 800e9e4:	f7f1 fe20 	bl	8000628 <__aeabi_dmul>
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	4630      	mov	r0, r6
 800e9ee:	4639      	mov	r1, r7
 800e9f0:	f7f1 fc62 	bl	80002b8 <__aeabi_dsub>
 800e9f4:	ec53 2b1a 	vmov	r2, r3, d10
 800e9f8:	f7f1 fe16 	bl	8000628 <__aeabi_dmul>
 800e9fc:	ec53 2b18 	vmov	r2, r3, d8
 800ea00:	ec41 0b19 	vmov	d9, r0, r1
 800ea04:	ec51 0b18 	vmov	r0, r1, d8
 800ea08:	f7f1 fe0e 	bl	8000628 <__aeabi_dmul>
 800ea0c:	a37c      	add	r3, pc, #496	; (adr r3, 800ec00 <__ieee754_pow+0x708>)
 800ea0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea12:	4604      	mov	r4, r0
 800ea14:	460d      	mov	r5, r1
 800ea16:	f7f1 fe07 	bl	8000628 <__aeabi_dmul>
 800ea1a:	a37b      	add	r3, pc, #492	; (adr r3, 800ec08 <__ieee754_pow+0x710>)
 800ea1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea20:	f7f1 fc4c 	bl	80002bc <__adddf3>
 800ea24:	4622      	mov	r2, r4
 800ea26:	462b      	mov	r3, r5
 800ea28:	f7f1 fdfe 	bl	8000628 <__aeabi_dmul>
 800ea2c:	a378      	add	r3, pc, #480	; (adr r3, 800ec10 <__ieee754_pow+0x718>)
 800ea2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea32:	f7f1 fc43 	bl	80002bc <__adddf3>
 800ea36:	4622      	mov	r2, r4
 800ea38:	462b      	mov	r3, r5
 800ea3a:	f7f1 fdf5 	bl	8000628 <__aeabi_dmul>
 800ea3e:	a376      	add	r3, pc, #472	; (adr r3, 800ec18 <__ieee754_pow+0x720>)
 800ea40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea44:	f7f1 fc3a 	bl	80002bc <__adddf3>
 800ea48:	4622      	mov	r2, r4
 800ea4a:	462b      	mov	r3, r5
 800ea4c:	f7f1 fdec 	bl	8000628 <__aeabi_dmul>
 800ea50:	a373      	add	r3, pc, #460	; (adr r3, 800ec20 <__ieee754_pow+0x728>)
 800ea52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea56:	f7f1 fc31 	bl	80002bc <__adddf3>
 800ea5a:	4622      	mov	r2, r4
 800ea5c:	462b      	mov	r3, r5
 800ea5e:	f7f1 fde3 	bl	8000628 <__aeabi_dmul>
 800ea62:	a371      	add	r3, pc, #452	; (adr r3, 800ec28 <__ieee754_pow+0x730>)
 800ea64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea68:	f7f1 fc28 	bl	80002bc <__adddf3>
 800ea6c:	4622      	mov	r2, r4
 800ea6e:	4606      	mov	r6, r0
 800ea70:	460f      	mov	r7, r1
 800ea72:	462b      	mov	r3, r5
 800ea74:	4620      	mov	r0, r4
 800ea76:	4629      	mov	r1, r5
 800ea78:	f7f1 fdd6 	bl	8000628 <__aeabi_dmul>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	4630      	mov	r0, r6
 800ea82:	4639      	mov	r1, r7
 800ea84:	f7f1 fdd0 	bl	8000628 <__aeabi_dmul>
 800ea88:	4642      	mov	r2, r8
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	460d      	mov	r5, r1
 800ea8e:	464b      	mov	r3, r9
 800ea90:	ec51 0b18 	vmov	r0, r1, d8
 800ea94:	f7f1 fc12 	bl	80002bc <__adddf3>
 800ea98:	ec53 2b19 	vmov	r2, r3, d9
 800ea9c:	f7f1 fdc4 	bl	8000628 <__aeabi_dmul>
 800eaa0:	4622      	mov	r2, r4
 800eaa2:	462b      	mov	r3, r5
 800eaa4:	f7f1 fc0a 	bl	80002bc <__adddf3>
 800eaa8:	4642      	mov	r2, r8
 800eaaa:	4682      	mov	sl, r0
 800eaac:	468b      	mov	fp, r1
 800eaae:	464b      	mov	r3, r9
 800eab0:	4640      	mov	r0, r8
 800eab2:	4649      	mov	r1, r9
 800eab4:	f7f1 fdb8 	bl	8000628 <__aeabi_dmul>
 800eab8:	4b6b      	ldr	r3, [pc, #428]	; (800ec68 <__ieee754_pow+0x770>)
 800eaba:	2200      	movs	r2, #0
 800eabc:	4606      	mov	r6, r0
 800eabe:	460f      	mov	r7, r1
 800eac0:	f7f1 fbfc 	bl	80002bc <__adddf3>
 800eac4:	4652      	mov	r2, sl
 800eac6:	465b      	mov	r3, fp
 800eac8:	f7f1 fbf8 	bl	80002bc <__adddf3>
 800eacc:	2000      	movs	r0, #0
 800eace:	4604      	mov	r4, r0
 800ead0:	460d      	mov	r5, r1
 800ead2:	4602      	mov	r2, r0
 800ead4:	460b      	mov	r3, r1
 800ead6:	4640      	mov	r0, r8
 800ead8:	4649      	mov	r1, r9
 800eada:	f7f1 fda5 	bl	8000628 <__aeabi_dmul>
 800eade:	4b62      	ldr	r3, [pc, #392]	; (800ec68 <__ieee754_pow+0x770>)
 800eae0:	4680      	mov	r8, r0
 800eae2:	4689      	mov	r9, r1
 800eae4:	2200      	movs	r2, #0
 800eae6:	4620      	mov	r0, r4
 800eae8:	4629      	mov	r1, r5
 800eaea:	f7f1 fbe5 	bl	80002b8 <__aeabi_dsub>
 800eaee:	4632      	mov	r2, r6
 800eaf0:	463b      	mov	r3, r7
 800eaf2:	f7f1 fbe1 	bl	80002b8 <__aeabi_dsub>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	460b      	mov	r3, r1
 800eafa:	4650      	mov	r0, sl
 800eafc:	4659      	mov	r1, fp
 800eafe:	f7f1 fbdb 	bl	80002b8 <__aeabi_dsub>
 800eb02:	ec53 2b18 	vmov	r2, r3, d8
 800eb06:	f7f1 fd8f 	bl	8000628 <__aeabi_dmul>
 800eb0a:	4622      	mov	r2, r4
 800eb0c:	4606      	mov	r6, r0
 800eb0e:	460f      	mov	r7, r1
 800eb10:	462b      	mov	r3, r5
 800eb12:	ec51 0b19 	vmov	r0, r1, d9
 800eb16:	f7f1 fd87 	bl	8000628 <__aeabi_dmul>
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	4630      	mov	r0, r6
 800eb20:	4639      	mov	r1, r7
 800eb22:	f7f1 fbcb 	bl	80002bc <__adddf3>
 800eb26:	4606      	mov	r6, r0
 800eb28:	460f      	mov	r7, r1
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	4640      	mov	r0, r8
 800eb30:	4649      	mov	r1, r9
 800eb32:	f7f1 fbc3 	bl	80002bc <__adddf3>
 800eb36:	a33e      	add	r3, pc, #248	; (adr r3, 800ec30 <__ieee754_pow+0x738>)
 800eb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	4604      	mov	r4, r0
 800eb40:	460d      	mov	r5, r1
 800eb42:	f7f1 fd71 	bl	8000628 <__aeabi_dmul>
 800eb46:	4642      	mov	r2, r8
 800eb48:	ec41 0b18 	vmov	d8, r0, r1
 800eb4c:	464b      	mov	r3, r9
 800eb4e:	4620      	mov	r0, r4
 800eb50:	4629      	mov	r1, r5
 800eb52:	f7f1 fbb1 	bl	80002b8 <__aeabi_dsub>
 800eb56:	4602      	mov	r2, r0
 800eb58:	460b      	mov	r3, r1
 800eb5a:	4630      	mov	r0, r6
 800eb5c:	4639      	mov	r1, r7
 800eb5e:	f7f1 fbab 	bl	80002b8 <__aeabi_dsub>
 800eb62:	a335      	add	r3, pc, #212	; (adr r3, 800ec38 <__ieee754_pow+0x740>)
 800eb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb68:	f7f1 fd5e 	bl	8000628 <__aeabi_dmul>
 800eb6c:	a334      	add	r3, pc, #208	; (adr r3, 800ec40 <__ieee754_pow+0x748>)
 800eb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb72:	4606      	mov	r6, r0
 800eb74:	460f      	mov	r7, r1
 800eb76:	4620      	mov	r0, r4
 800eb78:	4629      	mov	r1, r5
 800eb7a:	f7f1 fd55 	bl	8000628 <__aeabi_dmul>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	460b      	mov	r3, r1
 800eb82:	4630      	mov	r0, r6
 800eb84:	4639      	mov	r1, r7
 800eb86:	f7f1 fb99 	bl	80002bc <__adddf3>
 800eb8a:	9a07      	ldr	r2, [sp, #28]
 800eb8c:	4b37      	ldr	r3, [pc, #220]	; (800ec6c <__ieee754_pow+0x774>)
 800eb8e:	4413      	add	r3, r2
 800eb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb94:	f7f1 fb92 	bl	80002bc <__adddf3>
 800eb98:	4682      	mov	sl, r0
 800eb9a:	9805      	ldr	r0, [sp, #20]
 800eb9c:	468b      	mov	fp, r1
 800eb9e:	f7f1 fcd9 	bl	8000554 <__aeabi_i2d>
 800eba2:	9a07      	ldr	r2, [sp, #28]
 800eba4:	4b32      	ldr	r3, [pc, #200]	; (800ec70 <__ieee754_pow+0x778>)
 800eba6:	4413      	add	r3, r2
 800eba8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ebac:	4606      	mov	r6, r0
 800ebae:	460f      	mov	r7, r1
 800ebb0:	4652      	mov	r2, sl
 800ebb2:	465b      	mov	r3, fp
 800ebb4:	ec51 0b18 	vmov	r0, r1, d8
 800ebb8:	f7f1 fb80 	bl	80002bc <__adddf3>
 800ebbc:	4642      	mov	r2, r8
 800ebbe:	464b      	mov	r3, r9
 800ebc0:	f7f1 fb7c 	bl	80002bc <__adddf3>
 800ebc4:	4632      	mov	r2, r6
 800ebc6:	463b      	mov	r3, r7
 800ebc8:	f7f1 fb78 	bl	80002bc <__adddf3>
 800ebcc:	2000      	movs	r0, #0
 800ebce:	4632      	mov	r2, r6
 800ebd0:	463b      	mov	r3, r7
 800ebd2:	4604      	mov	r4, r0
 800ebd4:	460d      	mov	r5, r1
 800ebd6:	f7f1 fb6f 	bl	80002b8 <__aeabi_dsub>
 800ebda:	4642      	mov	r2, r8
 800ebdc:	464b      	mov	r3, r9
 800ebde:	f7f1 fb6b 	bl	80002b8 <__aeabi_dsub>
 800ebe2:	ec53 2b18 	vmov	r2, r3, d8
 800ebe6:	f7f1 fb67 	bl	80002b8 <__aeabi_dsub>
 800ebea:	4602      	mov	r2, r0
 800ebec:	460b      	mov	r3, r1
 800ebee:	4650      	mov	r0, sl
 800ebf0:	4659      	mov	r1, fp
 800ebf2:	e610      	b.n	800e816 <__ieee754_pow+0x31e>
 800ebf4:	2401      	movs	r4, #1
 800ebf6:	e6a1      	b.n	800e93c <__ieee754_pow+0x444>
 800ebf8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ec48 <__ieee754_pow+0x750>
 800ebfc:	e617      	b.n	800e82e <__ieee754_pow+0x336>
 800ebfe:	bf00      	nop
 800ec00:	4a454eef 	.word	0x4a454eef
 800ec04:	3fca7e28 	.word	0x3fca7e28
 800ec08:	93c9db65 	.word	0x93c9db65
 800ec0c:	3fcd864a 	.word	0x3fcd864a
 800ec10:	a91d4101 	.word	0xa91d4101
 800ec14:	3fd17460 	.word	0x3fd17460
 800ec18:	518f264d 	.word	0x518f264d
 800ec1c:	3fd55555 	.word	0x3fd55555
 800ec20:	db6fabff 	.word	0xdb6fabff
 800ec24:	3fdb6db6 	.word	0x3fdb6db6
 800ec28:	33333303 	.word	0x33333303
 800ec2c:	3fe33333 	.word	0x3fe33333
 800ec30:	e0000000 	.word	0xe0000000
 800ec34:	3feec709 	.word	0x3feec709
 800ec38:	dc3a03fd 	.word	0xdc3a03fd
 800ec3c:	3feec709 	.word	0x3feec709
 800ec40:	145b01f5 	.word	0x145b01f5
 800ec44:	be3e2fe0 	.word	0xbe3e2fe0
 800ec48:	00000000 	.word	0x00000000
 800ec4c:	3ff00000 	.word	0x3ff00000
 800ec50:	7ff00000 	.word	0x7ff00000
 800ec54:	43400000 	.word	0x43400000
 800ec58:	0003988e 	.word	0x0003988e
 800ec5c:	000bb679 	.word	0x000bb679
 800ec60:	08010e20 	.word	0x08010e20
 800ec64:	3ff00000 	.word	0x3ff00000
 800ec68:	40080000 	.word	0x40080000
 800ec6c:	08010e40 	.word	0x08010e40
 800ec70:	08010e30 	.word	0x08010e30
 800ec74:	a3b5      	add	r3, pc, #724	; (adr r3, 800ef4c <__ieee754_pow+0xa54>)
 800ec76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7a:	4640      	mov	r0, r8
 800ec7c:	4649      	mov	r1, r9
 800ec7e:	f7f1 fb1d 	bl	80002bc <__adddf3>
 800ec82:	4622      	mov	r2, r4
 800ec84:	ec41 0b1a 	vmov	d10, r0, r1
 800ec88:	462b      	mov	r3, r5
 800ec8a:	4630      	mov	r0, r6
 800ec8c:	4639      	mov	r1, r7
 800ec8e:	f7f1 fb13 	bl	80002b8 <__aeabi_dsub>
 800ec92:	4602      	mov	r2, r0
 800ec94:	460b      	mov	r3, r1
 800ec96:	ec51 0b1a 	vmov	r0, r1, d10
 800ec9a:	f7f1 ff55 	bl	8000b48 <__aeabi_dcmpgt>
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	f47f ae04 	bne.w	800e8ac <__ieee754_pow+0x3b4>
 800eca4:	4aa4      	ldr	r2, [pc, #656]	; (800ef38 <__ieee754_pow+0xa40>)
 800eca6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	f340 8108 	ble.w	800eec0 <__ieee754_pow+0x9c8>
 800ecb0:	151b      	asrs	r3, r3, #20
 800ecb2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ecb6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ecba:	fa4a f303 	asr.w	r3, sl, r3
 800ecbe:	445b      	add	r3, fp
 800ecc0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ecc4:	4e9d      	ldr	r6, [pc, #628]	; (800ef3c <__ieee754_pow+0xa44>)
 800ecc6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ecca:	4116      	asrs	r6, r2
 800eccc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	ea23 0106 	bic.w	r1, r3, r6
 800ecd6:	f1c2 0214 	rsb	r2, r2, #20
 800ecda:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ecde:	fa4a fa02 	asr.w	sl, sl, r2
 800ece2:	f1bb 0f00 	cmp.w	fp, #0
 800ece6:	4602      	mov	r2, r0
 800ece8:	460b      	mov	r3, r1
 800ecea:	4620      	mov	r0, r4
 800ecec:	4629      	mov	r1, r5
 800ecee:	bfb8      	it	lt
 800ecf0:	f1ca 0a00 	rsblt	sl, sl, #0
 800ecf4:	f7f1 fae0 	bl	80002b8 <__aeabi_dsub>
 800ecf8:	ec41 0b19 	vmov	d9, r0, r1
 800ecfc:	4642      	mov	r2, r8
 800ecfe:	464b      	mov	r3, r9
 800ed00:	ec51 0b19 	vmov	r0, r1, d9
 800ed04:	f7f1 fada 	bl	80002bc <__adddf3>
 800ed08:	a37b      	add	r3, pc, #492	; (adr r3, 800eef8 <__ieee754_pow+0xa00>)
 800ed0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0e:	2000      	movs	r0, #0
 800ed10:	4604      	mov	r4, r0
 800ed12:	460d      	mov	r5, r1
 800ed14:	f7f1 fc88 	bl	8000628 <__aeabi_dmul>
 800ed18:	ec53 2b19 	vmov	r2, r3, d9
 800ed1c:	4606      	mov	r6, r0
 800ed1e:	460f      	mov	r7, r1
 800ed20:	4620      	mov	r0, r4
 800ed22:	4629      	mov	r1, r5
 800ed24:	f7f1 fac8 	bl	80002b8 <__aeabi_dsub>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	4640      	mov	r0, r8
 800ed2e:	4649      	mov	r1, r9
 800ed30:	f7f1 fac2 	bl	80002b8 <__aeabi_dsub>
 800ed34:	a372      	add	r3, pc, #456	; (adr r3, 800ef00 <__ieee754_pow+0xa08>)
 800ed36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3a:	f7f1 fc75 	bl	8000628 <__aeabi_dmul>
 800ed3e:	a372      	add	r3, pc, #456	; (adr r3, 800ef08 <__ieee754_pow+0xa10>)
 800ed40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed44:	4680      	mov	r8, r0
 800ed46:	4689      	mov	r9, r1
 800ed48:	4620      	mov	r0, r4
 800ed4a:	4629      	mov	r1, r5
 800ed4c:	f7f1 fc6c 	bl	8000628 <__aeabi_dmul>
 800ed50:	4602      	mov	r2, r0
 800ed52:	460b      	mov	r3, r1
 800ed54:	4640      	mov	r0, r8
 800ed56:	4649      	mov	r1, r9
 800ed58:	f7f1 fab0 	bl	80002bc <__adddf3>
 800ed5c:	4604      	mov	r4, r0
 800ed5e:	460d      	mov	r5, r1
 800ed60:	4602      	mov	r2, r0
 800ed62:	460b      	mov	r3, r1
 800ed64:	4630      	mov	r0, r6
 800ed66:	4639      	mov	r1, r7
 800ed68:	f7f1 faa8 	bl	80002bc <__adddf3>
 800ed6c:	4632      	mov	r2, r6
 800ed6e:	463b      	mov	r3, r7
 800ed70:	4680      	mov	r8, r0
 800ed72:	4689      	mov	r9, r1
 800ed74:	f7f1 faa0 	bl	80002b8 <__aeabi_dsub>
 800ed78:	4602      	mov	r2, r0
 800ed7a:	460b      	mov	r3, r1
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	4629      	mov	r1, r5
 800ed80:	f7f1 fa9a 	bl	80002b8 <__aeabi_dsub>
 800ed84:	4642      	mov	r2, r8
 800ed86:	4606      	mov	r6, r0
 800ed88:	460f      	mov	r7, r1
 800ed8a:	464b      	mov	r3, r9
 800ed8c:	4640      	mov	r0, r8
 800ed8e:	4649      	mov	r1, r9
 800ed90:	f7f1 fc4a 	bl	8000628 <__aeabi_dmul>
 800ed94:	a35e      	add	r3, pc, #376	; (adr r3, 800ef10 <__ieee754_pow+0xa18>)
 800ed96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed9a:	4604      	mov	r4, r0
 800ed9c:	460d      	mov	r5, r1
 800ed9e:	f7f1 fc43 	bl	8000628 <__aeabi_dmul>
 800eda2:	a35d      	add	r3, pc, #372	; (adr r3, 800ef18 <__ieee754_pow+0xa20>)
 800eda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda8:	f7f1 fa86 	bl	80002b8 <__aeabi_dsub>
 800edac:	4622      	mov	r2, r4
 800edae:	462b      	mov	r3, r5
 800edb0:	f7f1 fc3a 	bl	8000628 <__aeabi_dmul>
 800edb4:	a35a      	add	r3, pc, #360	; (adr r3, 800ef20 <__ieee754_pow+0xa28>)
 800edb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edba:	f7f1 fa7f 	bl	80002bc <__adddf3>
 800edbe:	4622      	mov	r2, r4
 800edc0:	462b      	mov	r3, r5
 800edc2:	f7f1 fc31 	bl	8000628 <__aeabi_dmul>
 800edc6:	a358      	add	r3, pc, #352	; (adr r3, 800ef28 <__ieee754_pow+0xa30>)
 800edc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edcc:	f7f1 fa74 	bl	80002b8 <__aeabi_dsub>
 800edd0:	4622      	mov	r2, r4
 800edd2:	462b      	mov	r3, r5
 800edd4:	f7f1 fc28 	bl	8000628 <__aeabi_dmul>
 800edd8:	a355      	add	r3, pc, #340	; (adr r3, 800ef30 <__ieee754_pow+0xa38>)
 800edda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edde:	f7f1 fa6d 	bl	80002bc <__adddf3>
 800ede2:	4622      	mov	r2, r4
 800ede4:	462b      	mov	r3, r5
 800ede6:	f7f1 fc1f 	bl	8000628 <__aeabi_dmul>
 800edea:	4602      	mov	r2, r0
 800edec:	460b      	mov	r3, r1
 800edee:	4640      	mov	r0, r8
 800edf0:	4649      	mov	r1, r9
 800edf2:	f7f1 fa61 	bl	80002b8 <__aeabi_dsub>
 800edf6:	4604      	mov	r4, r0
 800edf8:	460d      	mov	r5, r1
 800edfa:	4602      	mov	r2, r0
 800edfc:	460b      	mov	r3, r1
 800edfe:	4640      	mov	r0, r8
 800ee00:	4649      	mov	r1, r9
 800ee02:	f7f1 fc11 	bl	8000628 <__aeabi_dmul>
 800ee06:	2200      	movs	r2, #0
 800ee08:	ec41 0b19 	vmov	d9, r0, r1
 800ee0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee10:	4620      	mov	r0, r4
 800ee12:	4629      	mov	r1, r5
 800ee14:	f7f1 fa50 	bl	80002b8 <__aeabi_dsub>
 800ee18:	4602      	mov	r2, r0
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	ec51 0b19 	vmov	r0, r1, d9
 800ee20:	f7f1 fd2c 	bl	800087c <__aeabi_ddiv>
 800ee24:	4632      	mov	r2, r6
 800ee26:	4604      	mov	r4, r0
 800ee28:	460d      	mov	r5, r1
 800ee2a:	463b      	mov	r3, r7
 800ee2c:	4640      	mov	r0, r8
 800ee2e:	4649      	mov	r1, r9
 800ee30:	f7f1 fbfa 	bl	8000628 <__aeabi_dmul>
 800ee34:	4632      	mov	r2, r6
 800ee36:	463b      	mov	r3, r7
 800ee38:	f7f1 fa40 	bl	80002bc <__adddf3>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	460b      	mov	r3, r1
 800ee40:	4620      	mov	r0, r4
 800ee42:	4629      	mov	r1, r5
 800ee44:	f7f1 fa38 	bl	80002b8 <__aeabi_dsub>
 800ee48:	4642      	mov	r2, r8
 800ee4a:	464b      	mov	r3, r9
 800ee4c:	f7f1 fa34 	bl	80002b8 <__aeabi_dsub>
 800ee50:	460b      	mov	r3, r1
 800ee52:	4602      	mov	r2, r0
 800ee54:	493a      	ldr	r1, [pc, #232]	; (800ef40 <__ieee754_pow+0xa48>)
 800ee56:	2000      	movs	r0, #0
 800ee58:	f7f1 fa2e 	bl	80002b8 <__aeabi_dsub>
 800ee5c:	ec41 0b10 	vmov	d0, r0, r1
 800ee60:	ee10 3a90 	vmov	r3, s1
 800ee64:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ee68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee6c:	da2b      	bge.n	800eec6 <__ieee754_pow+0x9ce>
 800ee6e:	4650      	mov	r0, sl
 800ee70:	f001 fa76 	bl	8010360 <scalbn>
 800ee74:	ec51 0b10 	vmov	r0, r1, d0
 800ee78:	ec53 2b18 	vmov	r2, r3, d8
 800ee7c:	f7ff bbed 	b.w	800e65a <__ieee754_pow+0x162>
 800ee80:	4b30      	ldr	r3, [pc, #192]	; (800ef44 <__ieee754_pow+0xa4c>)
 800ee82:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ee86:	429e      	cmp	r6, r3
 800ee88:	f77f af0c 	ble.w	800eca4 <__ieee754_pow+0x7ac>
 800ee8c:	4b2e      	ldr	r3, [pc, #184]	; (800ef48 <__ieee754_pow+0xa50>)
 800ee8e:	440b      	add	r3, r1
 800ee90:	4303      	orrs	r3, r0
 800ee92:	d009      	beq.n	800eea8 <__ieee754_pow+0x9b0>
 800ee94:	ec51 0b18 	vmov	r0, r1, d8
 800ee98:	2200      	movs	r2, #0
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	f7f1 fe36 	bl	8000b0c <__aeabi_dcmplt>
 800eea0:	3800      	subs	r0, #0
 800eea2:	bf18      	it	ne
 800eea4:	2001      	movne	r0, #1
 800eea6:	e447      	b.n	800e738 <__ieee754_pow+0x240>
 800eea8:	4622      	mov	r2, r4
 800eeaa:	462b      	mov	r3, r5
 800eeac:	f7f1 fa04 	bl	80002b8 <__aeabi_dsub>
 800eeb0:	4642      	mov	r2, r8
 800eeb2:	464b      	mov	r3, r9
 800eeb4:	f7f1 fe3e 	bl	8000b34 <__aeabi_dcmpge>
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	f43f aef3 	beq.w	800eca4 <__ieee754_pow+0x7ac>
 800eebe:	e7e9      	b.n	800ee94 <__ieee754_pow+0x99c>
 800eec0:	f04f 0a00 	mov.w	sl, #0
 800eec4:	e71a      	b.n	800ecfc <__ieee754_pow+0x804>
 800eec6:	ec51 0b10 	vmov	r0, r1, d0
 800eeca:	4619      	mov	r1, r3
 800eecc:	e7d4      	b.n	800ee78 <__ieee754_pow+0x980>
 800eece:	491c      	ldr	r1, [pc, #112]	; (800ef40 <__ieee754_pow+0xa48>)
 800eed0:	2000      	movs	r0, #0
 800eed2:	f7ff bb30 	b.w	800e536 <__ieee754_pow+0x3e>
 800eed6:	2000      	movs	r0, #0
 800eed8:	2100      	movs	r1, #0
 800eeda:	f7ff bb2c 	b.w	800e536 <__ieee754_pow+0x3e>
 800eede:	4630      	mov	r0, r6
 800eee0:	4639      	mov	r1, r7
 800eee2:	f7ff bb28 	b.w	800e536 <__ieee754_pow+0x3e>
 800eee6:	9204      	str	r2, [sp, #16]
 800eee8:	f7ff bb7a 	b.w	800e5e0 <__ieee754_pow+0xe8>
 800eeec:	2300      	movs	r3, #0
 800eeee:	f7ff bb64 	b.w	800e5ba <__ieee754_pow+0xc2>
 800eef2:	bf00      	nop
 800eef4:	f3af 8000 	nop.w
 800eef8:	00000000 	.word	0x00000000
 800eefc:	3fe62e43 	.word	0x3fe62e43
 800ef00:	fefa39ef 	.word	0xfefa39ef
 800ef04:	3fe62e42 	.word	0x3fe62e42
 800ef08:	0ca86c39 	.word	0x0ca86c39
 800ef0c:	be205c61 	.word	0xbe205c61
 800ef10:	72bea4d0 	.word	0x72bea4d0
 800ef14:	3e663769 	.word	0x3e663769
 800ef18:	c5d26bf1 	.word	0xc5d26bf1
 800ef1c:	3ebbbd41 	.word	0x3ebbbd41
 800ef20:	af25de2c 	.word	0xaf25de2c
 800ef24:	3f11566a 	.word	0x3f11566a
 800ef28:	16bebd93 	.word	0x16bebd93
 800ef2c:	3f66c16c 	.word	0x3f66c16c
 800ef30:	5555553e 	.word	0x5555553e
 800ef34:	3fc55555 	.word	0x3fc55555
 800ef38:	3fe00000 	.word	0x3fe00000
 800ef3c:	000fffff 	.word	0x000fffff
 800ef40:	3ff00000 	.word	0x3ff00000
 800ef44:	4090cbff 	.word	0x4090cbff
 800ef48:	3f6f3400 	.word	0x3f6f3400
 800ef4c:	652b82fe 	.word	0x652b82fe
 800ef50:	3c971547 	.word	0x3c971547
 800ef54:	00000000 	.word	0x00000000

0800ef58 <__ieee754_rem_pio2>:
 800ef58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef5c:	ed2d 8b02 	vpush	{d8}
 800ef60:	ec55 4b10 	vmov	r4, r5, d0
 800ef64:	4bca      	ldr	r3, [pc, #808]	; (800f290 <__ieee754_rem_pio2+0x338>)
 800ef66:	b08b      	sub	sp, #44	; 0x2c
 800ef68:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ef6c:	4598      	cmp	r8, r3
 800ef6e:	4682      	mov	sl, r0
 800ef70:	9502      	str	r5, [sp, #8]
 800ef72:	dc08      	bgt.n	800ef86 <__ieee754_rem_pio2+0x2e>
 800ef74:	2200      	movs	r2, #0
 800ef76:	2300      	movs	r3, #0
 800ef78:	ed80 0b00 	vstr	d0, [r0]
 800ef7c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ef80:	f04f 0b00 	mov.w	fp, #0
 800ef84:	e028      	b.n	800efd8 <__ieee754_rem_pio2+0x80>
 800ef86:	4bc3      	ldr	r3, [pc, #780]	; (800f294 <__ieee754_rem_pio2+0x33c>)
 800ef88:	4598      	cmp	r8, r3
 800ef8a:	dc78      	bgt.n	800f07e <__ieee754_rem_pio2+0x126>
 800ef8c:	9b02      	ldr	r3, [sp, #8]
 800ef8e:	4ec2      	ldr	r6, [pc, #776]	; (800f298 <__ieee754_rem_pio2+0x340>)
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	ee10 0a10 	vmov	r0, s0
 800ef96:	a3b0      	add	r3, pc, #704	; (adr r3, 800f258 <__ieee754_rem_pio2+0x300>)
 800ef98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9c:	4629      	mov	r1, r5
 800ef9e:	dd39      	ble.n	800f014 <__ieee754_rem_pio2+0xbc>
 800efa0:	f7f1 f98a 	bl	80002b8 <__aeabi_dsub>
 800efa4:	45b0      	cmp	r8, r6
 800efa6:	4604      	mov	r4, r0
 800efa8:	460d      	mov	r5, r1
 800efaa:	d01b      	beq.n	800efe4 <__ieee754_rem_pio2+0x8c>
 800efac:	a3ac      	add	r3, pc, #688	; (adr r3, 800f260 <__ieee754_rem_pio2+0x308>)
 800efae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb2:	f7f1 f981 	bl	80002b8 <__aeabi_dsub>
 800efb6:	4602      	mov	r2, r0
 800efb8:	460b      	mov	r3, r1
 800efba:	e9ca 2300 	strd	r2, r3, [sl]
 800efbe:	4620      	mov	r0, r4
 800efc0:	4629      	mov	r1, r5
 800efc2:	f7f1 f979 	bl	80002b8 <__aeabi_dsub>
 800efc6:	a3a6      	add	r3, pc, #664	; (adr r3, 800f260 <__ieee754_rem_pio2+0x308>)
 800efc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efcc:	f7f1 f974 	bl	80002b8 <__aeabi_dsub>
 800efd0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800efd4:	f04f 0b01 	mov.w	fp, #1
 800efd8:	4658      	mov	r0, fp
 800efda:	b00b      	add	sp, #44	; 0x2c
 800efdc:	ecbd 8b02 	vpop	{d8}
 800efe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efe4:	a3a0      	add	r3, pc, #640	; (adr r3, 800f268 <__ieee754_rem_pio2+0x310>)
 800efe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efea:	f7f1 f965 	bl	80002b8 <__aeabi_dsub>
 800efee:	a3a0      	add	r3, pc, #640	; (adr r3, 800f270 <__ieee754_rem_pio2+0x318>)
 800eff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff4:	4604      	mov	r4, r0
 800eff6:	460d      	mov	r5, r1
 800eff8:	f7f1 f95e 	bl	80002b8 <__aeabi_dsub>
 800effc:	4602      	mov	r2, r0
 800effe:	460b      	mov	r3, r1
 800f000:	e9ca 2300 	strd	r2, r3, [sl]
 800f004:	4620      	mov	r0, r4
 800f006:	4629      	mov	r1, r5
 800f008:	f7f1 f956 	bl	80002b8 <__aeabi_dsub>
 800f00c:	a398      	add	r3, pc, #608	; (adr r3, 800f270 <__ieee754_rem_pio2+0x318>)
 800f00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f012:	e7db      	b.n	800efcc <__ieee754_rem_pio2+0x74>
 800f014:	f7f1 f952 	bl	80002bc <__adddf3>
 800f018:	45b0      	cmp	r8, r6
 800f01a:	4604      	mov	r4, r0
 800f01c:	460d      	mov	r5, r1
 800f01e:	d016      	beq.n	800f04e <__ieee754_rem_pio2+0xf6>
 800f020:	a38f      	add	r3, pc, #572	; (adr r3, 800f260 <__ieee754_rem_pio2+0x308>)
 800f022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f026:	f7f1 f949 	bl	80002bc <__adddf3>
 800f02a:	4602      	mov	r2, r0
 800f02c:	460b      	mov	r3, r1
 800f02e:	e9ca 2300 	strd	r2, r3, [sl]
 800f032:	4620      	mov	r0, r4
 800f034:	4629      	mov	r1, r5
 800f036:	f7f1 f93f 	bl	80002b8 <__aeabi_dsub>
 800f03a:	a389      	add	r3, pc, #548	; (adr r3, 800f260 <__ieee754_rem_pio2+0x308>)
 800f03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f040:	f7f1 f93c 	bl	80002bc <__adddf3>
 800f044:	f04f 3bff 	mov.w	fp, #4294967295
 800f048:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f04c:	e7c4      	b.n	800efd8 <__ieee754_rem_pio2+0x80>
 800f04e:	a386      	add	r3, pc, #536	; (adr r3, 800f268 <__ieee754_rem_pio2+0x310>)
 800f050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f054:	f7f1 f932 	bl	80002bc <__adddf3>
 800f058:	a385      	add	r3, pc, #532	; (adr r3, 800f270 <__ieee754_rem_pio2+0x318>)
 800f05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05e:	4604      	mov	r4, r0
 800f060:	460d      	mov	r5, r1
 800f062:	f7f1 f92b 	bl	80002bc <__adddf3>
 800f066:	4602      	mov	r2, r0
 800f068:	460b      	mov	r3, r1
 800f06a:	e9ca 2300 	strd	r2, r3, [sl]
 800f06e:	4620      	mov	r0, r4
 800f070:	4629      	mov	r1, r5
 800f072:	f7f1 f921 	bl	80002b8 <__aeabi_dsub>
 800f076:	a37e      	add	r3, pc, #504	; (adr r3, 800f270 <__ieee754_rem_pio2+0x318>)
 800f078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07c:	e7e0      	b.n	800f040 <__ieee754_rem_pio2+0xe8>
 800f07e:	4b87      	ldr	r3, [pc, #540]	; (800f29c <__ieee754_rem_pio2+0x344>)
 800f080:	4598      	cmp	r8, r3
 800f082:	f300 80d9 	bgt.w	800f238 <__ieee754_rem_pio2+0x2e0>
 800f086:	f001 f8cf 	bl	8010228 <fabs>
 800f08a:	ec55 4b10 	vmov	r4, r5, d0
 800f08e:	ee10 0a10 	vmov	r0, s0
 800f092:	a379      	add	r3, pc, #484	; (adr r3, 800f278 <__ieee754_rem_pio2+0x320>)
 800f094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f098:	4629      	mov	r1, r5
 800f09a:	f7f1 fac5 	bl	8000628 <__aeabi_dmul>
 800f09e:	4b80      	ldr	r3, [pc, #512]	; (800f2a0 <__ieee754_rem_pio2+0x348>)
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	f7f1 f90b 	bl	80002bc <__adddf3>
 800f0a6:	f7f1 fd6f 	bl	8000b88 <__aeabi_d2iz>
 800f0aa:	4683      	mov	fp, r0
 800f0ac:	f7f1 fa52 	bl	8000554 <__aeabi_i2d>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	460b      	mov	r3, r1
 800f0b4:	ec43 2b18 	vmov	d8, r2, r3
 800f0b8:	a367      	add	r3, pc, #412	; (adr r3, 800f258 <__ieee754_rem_pio2+0x300>)
 800f0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0be:	f7f1 fab3 	bl	8000628 <__aeabi_dmul>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	4629      	mov	r1, r5
 800f0ca:	f7f1 f8f5 	bl	80002b8 <__aeabi_dsub>
 800f0ce:	a364      	add	r3, pc, #400	; (adr r3, 800f260 <__ieee754_rem_pio2+0x308>)
 800f0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d4:	4606      	mov	r6, r0
 800f0d6:	460f      	mov	r7, r1
 800f0d8:	ec51 0b18 	vmov	r0, r1, d8
 800f0dc:	f7f1 faa4 	bl	8000628 <__aeabi_dmul>
 800f0e0:	f1bb 0f1f 	cmp.w	fp, #31
 800f0e4:	4604      	mov	r4, r0
 800f0e6:	460d      	mov	r5, r1
 800f0e8:	dc0d      	bgt.n	800f106 <__ieee754_rem_pio2+0x1ae>
 800f0ea:	4b6e      	ldr	r3, [pc, #440]	; (800f2a4 <__ieee754_rem_pio2+0x34c>)
 800f0ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0f4:	4543      	cmp	r3, r8
 800f0f6:	d006      	beq.n	800f106 <__ieee754_rem_pio2+0x1ae>
 800f0f8:	4622      	mov	r2, r4
 800f0fa:	462b      	mov	r3, r5
 800f0fc:	4630      	mov	r0, r6
 800f0fe:	4639      	mov	r1, r7
 800f100:	f7f1 f8da 	bl	80002b8 <__aeabi_dsub>
 800f104:	e00f      	b.n	800f126 <__ieee754_rem_pio2+0x1ce>
 800f106:	462b      	mov	r3, r5
 800f108:	4622      	mov	r2, r4
 800f10a:	4630      	mov	r0, r6
 800f10c:	4639      	mov	r1, r7
 800f10e:	f7f1 f8d3 	bl	80002b8 <__aeabi_dsub>
 800f112:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f116:	9303      	str	r3, [sp, #12]
 800f118:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f11c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f120:	f1b8 0f10 	cmp.w	r8, #16
 800f124:	dc02      	bgt.n	800f12c <__ieee754_rem_pio2+0x1d4>
 800f126:	e9ca 0100 	strd	r0, r1, [sl]
 800f12a:	e039      	b.n	800f1a0 <__ieee754_rem_pio2+0x248>
 800f12c:	a34e      	add	r3, pc, #312	; (adr r3, 800f268 <__ieee754_rem_pio2+0x310>)
 800f12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f132:	ec51 0b18 	vmov	r0, r1, d8
 800f136:	f7f1 fa77 	bl	8000628 <__aeabi_dmul>
 800f13a:	4604      	mov	r4, r0
 800f13c:	460d      	mov	r5, r1
 800f13e:	4602      	mov	r2, r0
 800f140:	460b      	mov	r3, r1
 800f142:	4630      	mov	r0, r6
 800f144:	4639      	mov	r1, r7
 800f146:	f7f1 f8b7 	bl	80002b8 <__aeabi_dsub>
 800f14a:	4602      	mov	r2, r0
 800f14c:	460b      	mov	r3, r1
 800f14e:	4680      	mov	r8, r0
 800f150:	4689      	mov	r9, r1
 800f152:	4630      	mov	r0, r6
 800f154:	4639      	mov	r1, r7
 800f156:	f7f1 f8af 	bl	80002b8 <__aeabi_dsub>
 800f15a:	4622      	mov	r2, r4
 800f15c:	462b      	mov	r3, r5
 800f15e:	f7f1 f8ab 	bl	80002b8 <__aeabi_dsub>
 800f162:	a343      	add	r3, pc, #268	; (adr r3, 800f270 <__ieee754_rem_pio2+0x318>)
 800f164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f168:	4604      	mov	r4, r0
 800f16a:	460d      	mov	r5, r1
 800f16c:	ec51 0b18 	vmov	r0, r1, d8
 800f170:	f7f1 fa5a 	bl	8000628 <__aeabi_dmul>
 800f174:	4622      	mov	r2, r4
 800f176:	462b      	mov	r3, r5
 800f178:	f7f1 f89e 	bl	80002b8 <__aeabi_dsub>
 800f17c:	4602      	mov	r2, r0
 800f17e:	460b      	mov	r3, r1
 800f180:	4604      	mov	r4, r0
 800f182:	460d      	mov	r5, r1
 800f184:	4640      	mov	r0, r8
 800f186:	4649      	mov	r1, r9
 800f188:	f7f1 f896 	bl	80002b8 <__aeabi_dsub>
 800f18c:	9a03      	ldr	r2, [sp, #12]
 800f18e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f192:	1ad3      	subs	r3, r2, r3
 800f194:	2b31      	cmp	r3, #49	; 0x31
 800f196:	dc24      	bgt.n	800f1e2 <__ieee754_rem_pio2+0x28a>
 800f198:	e9ca 0100 	strd	r0, r1, [sl]
 800f19c:	4646      	mov	r6, r8
 800f19e:	464f      	mov	r7, r9
 800f1a0:	e9da 8900 	ldrd	r8, r9, [sl]
 800f1a4:	4630      	mov	r0, r6
 800f1a6:	4642      	mov	r2, r8
 800f1a8:	464b      	mov	r3, r9
 800f1aa:	4639      	mov	r1, r7
 800f1ac:	f7f1 f884 	bl	80002b8 <__aeabi_dsub>
 800f1b0:	462b      	mov	r3, r5
 800f1b2:	4622      	mov	r2, r4
 800f1b4:	f7f1 f880 	bl	80002b8 <__aeabi_dsub>
 800f1b8:	9b02      	ldr	r3, [sp, #8]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f1c0:	f6bf af0a 	bge.w	800efd8 <__ieee754_rem_pio2+0x80>
 800f1c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f1c8:	f8ca 3004 	str.w	r3, [sl, #4]
 800f1cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1d0:	f8ca 8000 	str.w	r8, [sl]
 800f1d4:	f8ca 0008 	str.w	r0, [sl, #8]
 800f1d8:	f8ca 300c 	str.w	r3, [sl, #12]
 800f1dc:	f1cb 0b00 	rsb	fp, fp, #0
 800f1e0:	e6fa      	b.n	800efd8 <__ieee754_rem_pio2+0x80>
 800f1e2:	a327      	add	r3, pc, #156	; (adr r3, 800f280 <__ieee754_rem_pio2+0x328>)
 800f1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e8:	ec51 0b18 	vmov	r0, r1, d8
 800f1ec:	f7f1 fa1c 	bl	8000628 <__aeabi_dmul>
 800f1f0:	4604      	mov	r4, r0
 800f1f2:	460d      	mov	r5, r1
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	460b      	mov	r3, r1
 800f1f8:	4640      	mov	r0, r8
 800f1fa:	4649      	mov	r1, r9
 800f1fc:	f7f1 f85c 	bl	80002b8 <__aeabi_dsub>
 800f200:	4602      	mov	r2, r0
 800f202:	460b      	mov	r3, r1
 800f204:	4606      	mov	r6, r0
 800f206:	460f      	mov	r7, r1
 800f208:	4640      	mov	r0, r8
 800f20a:	4649      	mov	r1, r9
 800f20c:	f7f1 f854 	bl	80002b8 <__aeabi_dsub>
 800f210:	4622      	mov	r2, r4
 800f212:	462b      	mov	r3, r5
 800f214:	f7f1 f850 	bl	80002b8 <__aeabi_dsub>
 800f218:	a31b      	add	r3, pc, #108	; (adr r3, 800f288 <__ieee754_rem_pio2+0x330>)
 800f21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21e:	4604      	mov	r4, r0
 800f220:	460d      	mov	r5, r1
 800f222:	ec51 0b18 	vmov	r0, r1, d8
 800f226:	f7f1 f9ff 	bl	8000628 <__aeabi_dmul>
 800f22a:	4622      	mov	r2, r4
 800f22c:	462b      	mov	r3, r5
 800f22e:	f7f1 f843 	bl	80002b8 <__aeabi_dsub>
 800f232:	4604      	mov	r4, r0
 800f234:	460d      	mov	r5, r1
 800f236:	e75f      	b.n	800f0f8 <__ieee754_rem_pio2+0x1a0>
 800f238:	4b1b      	ldr	r3, [pc, #108]	; (800f2a8 <__ieee754_rem_pio2+0x350>)
 800f23a:	4598      	cmp	r8, r3
 800f23c:	dd36      	ble.n	800f2ac <__ieee754_rem_pio2+0x354>
 800f23e:	ee10 2a10 	vmov	r2, s0
 800f242:	462b      	mov	r3, r5
 800f244:	4620      	mov	r0, r4
 800f246:	4629      	mov	r1, r5
 800f248:	f7f1 f836 	bl	80002b8 <__aeabi_dsub>
 800f24c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f250:	e9ca 0100 	strd	r0, r1, [sl]
 800f254:	e694      	b.n	800ef80 <__ieee754_rem_pio2+0x28>
 800f256:	bf00      	nop
 800f258:	54400000 	.word	0x54400000
 800f25c:	3ff921fb 	.word	0x3ff921fb
 800f260:	1a626331 	.word	0x1a626331
 800f264:	3dd0b461 	.word	0x3dd0b461
 800f268:	1a600000 	.word	0x1a600000
 800f26c:	3dd0b461 	.word	0x3dd0b461
 800f270:	2e037073 	.word	0x2e037073
 800f274:	3ba3198a 	.word	0x3ba3198a
 800f278:	6dc9c883 	.word	0x6dc9c883
 800f27c:	3fe45f30 	.word	0x3fe45f30
 800f280:	2e000000 	.word	0x2e000000
 800f284:	3ba3198a 	.word	0x3ba3198a
 800f288:	252049c1 	.word	0x252049c1
 800f28c:	397b839a 	.word	0x397b839a
 800f290:	3fe921fb 	.word	0x3fe921fb
 800f294:	4002d97b 	.word	0x4002d97b
 800f298:	3ff921fb 	.word	0x3ff921fb
 800f29c:	413921fb 	.word	0x413921fb
 800f2a0:	3fe00000 	.word	0x3fe00000
 800f2a4:	08010e50 	.word	0x08010e50
 800f2a8:	7fefffff 	.word	0x7fefffff
 800f2ac:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f2b0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f2b4:	ee10 0a10 	vmov	r0, s0
 800f2b8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f2bc:	ee10 6a10 	vmov	r6, s0
 800f2c0:	460f      	mov	r7, r1
 800f2c2:	f7f1 fc61 	bl	8000b88 <__aeabi_d2iz>
 800f2c6:	f7f1 f945 	bl	8000554 <__aeabi_i2d>
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	4630      	mov	r0, r6
 800f2d0:	4639      	mov	r1, r7
 800f2d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f2d6:	f7f0 ffef 	bl	80002b8 <__aeabi_dsub>
 800f2da:	4b23      	ldr	r3, [pc, #140]	; (800f368 <__ieee754_rem_pio2+0x410>)
 800f2dc:	2200      	movs	r2, #0
 800f2de:	f7f1 f9a3 	bl	8000628 <__aeabi_dmul>
 800f2e2:	460f      	mov	r7, r1
 800f2e4:	4606      	mov	r6, r0
 800f2e6:	f7f1 fc4f 	bl	8000b88 <__aeabi_d2iz>
 800f2ea:	f7f1 f933 	bl	8000554 <__aeabi_i2d>
 800f2ee:	4602      	mov	r2, r0
 800f2f0:	460b      	mov	r3, r1
 800f2f2:	4630      	mov	r0, r6
 800f2f4:	4639      	mov	r1, r7
 800f2f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f2fa:	f7f0 ffdd 	bl	80002b8 <__aeabi_dsub>
 800f2fe:	4b1a      	ldr	r3, [pc, #104]	; (800f368 <__ieee754_rem_pio2+0x410>)
 800f300:	2200      	movs	r2, #0
 800f302:	f7f1 f991 	bl	8000628 <__aeabi_dmul>
 800f306:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f30a:	ad04      	add	r5, sp, #16
 800f30c:	f04f 0803 	mov.w	r8, #3
 800f310:	46a9      	mov	r9, r5
 800f312:	2600      	movs	r6, #0
 800f314:	2700      	movs	r7, #0
 800f316:	4632      	mov	r2, r6
 800f318:	463b      	mov	r3, r7
 800f31a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f31e:	46c3      	mov	fp, r8
 800f320:	3d08      	subs	r5, #8
 800f322:	f108 38ff 	add.w	r8, r8, #4294967295
 800f326:	f7f1 fbe7 	bl	8000af8 <__aeabi_dcmpeq>
 800f32a:	2800      	cmp	r0, #0
 800f32c:	d1f3      	bne.n	800f316 <__ieee754_rem_pio2+0x3be>
 800f32e:	4b0f      	ldr	r3, [pc, #60]	; (800f36c <__ieee754_rem_pio2+0x414>)
 800f330:	9301      	str	r3, [sp, #4]
 800f332:	2302      	movs	r3, #2
 800f334:	9300      	str	r3, [sp, #0]
 800f336:	4622      	mov	r2, r4
 800f338:	465b      	mov	r3, fp
 800f33a:	4651      	mov	r1, sl
 800f33c:	4648      	mov	r0, r9
 800f33e:	f000 f993 	bl	800f668 <__kernel_rem_pio2>
 800f342:	9b02      	ldr	r3, [sp, #8]
 800f344:	2b00      	cmp	r3, #0
 800f346:	4683      	mov	fp, r0
 800f348:	f6bf ae46 	bge.w	800efd8 <__ieee754_rem_pio2+0x80>
 800f34c:	e9da 2100 	ldrd	r2, r1, [sl]
 800f350:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f354:	e9ca 2300 	strd	r2, r3, [sl]
 800f358:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f35c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f360:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f364:	e73a      	b.n	800f1dc <__ieee754_rem_pio2+0x284>
 800f366:	bf00      	nop
 800f368:	41700000 	.word	0x41700000
 800f36c:	08010ed0 	.word	0x08010ed0

0800f370 <__ieee754_sqrt>:
 800f370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f374:	ec55 4b10 	vmov	r4, r5, d0
 800f378:	4e55      	ldr	r6, [pc, #340]	; (800f4d0 <__ieee754_sqrt+0x160>)
 800f37a:	43ae      	bics	r6, r5
 800f37c:	ee10 0a10 	vmov	r0, s0
 800f380:	ee10 3a10 	vmov	r3, s0
 800f384:	462a      	mov	r2, r5
 800f386:	4629      	mov	r1, r5
 800f388:	d110      	bne.n	800f3ac <__ieee754_sqrt+0x3c>
 800f38a:	ee10 2a10 	vmov	r2, s0
 800f38e:	462b      	mov	r3, r5
 800f390:	f7f1 f94a 	bl	8000628 <__aeabi_dmul>
 800f394:	4602      	mov	r2, r0
 800f396:	460b      	mov	r3, r1
 800f398:	4620      	mov	r0, r4
 800f39a:	4629      	mov	r1, r5
 800f39c:	f7f0 ff8e 	bl	80002bc <__adddf3>
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	460d      	mov	r5, r1
 800f3a4:	ec45 4b10 	vmov	d0, r4, r5
 800f3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3ac:	2d00      	cmp	r5, #0
 800f3ae:	dc10      	bgt.n	800f3d2 <__ieee754_sqrt+0x62>
 800f3b0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f3b4:	4330      	orrs	r0, r6
 800f3b6:	d0f5      	beq.n	800f3a4 <__ieee754_sqrt+0x34>
 800f3b8:	b15d      	cbz	r5, 800f3d2 <__ieee754_sqrt+0x62>
 800f3ba:	ee10 2a10 	vmov	r2, s0
 800f3be:	462b      	mov	r3, r5
 800f3c0:	ee10 0a10 	vmov	r0, s0
 800f3c4:	f7f0 ff78 	bl	80002b8 <__aeabi_dsub>
 800f3c8:	4602      	mov	r2, r0
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	f7f1 fa56 	bl	800087c <__aeabi_ddiv>
 800f3d0:	e7e6      	b.n	800f3a0 <__ieee754_sqrt+0x30>
 800f3d2:	1512      	asrs	r2, r2, #20
 800f3d4:	d074      	beq.n	800f4c0 <__ieee754_sqrt+0x150>
 800f3d6:	07d4      	lsls	r4, r2, #31
 800f3d8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f3dc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f3e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f3e4:	bf5e      	ittt	pl
 800f3e6:	0fda      	lsrpl	r2, r3, #31
 800f3e8:	005b      	lslpl	r3, r3, #1
 800f3ea:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f3ee:	2400      	movs	r4, #0
 800f3f0:	0fda      	lsrs	r2, r3, #31
 800f3f2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f3f6:	107f      	asrs	r7, r7, #1
 800f3f8:	005b      	lsls	r3, r3, #1
 800f3fa:	2516      	movs	r5, #22
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f402:	1886      	adds	r6, r0, r2
 800f404:	428e      	cmp	r6, r1
 800f406:	bfde      	ittt	le
 800f408:	1b89      	suble	r1, r1, r6
 800f40a:	18b0      	addle	r0, r6, r2
 800f40c:	18a4      	addle	r4, r4, r2
 800f40e:	0049      	lsls	r1, r1, #1
 800f410:	3d01      	subs	r5, #1
 800f412:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f416:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f41a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f41e:	d1f0      	bne.n	800f402 <__ieee754_sqrt+0x92>
 800f420:	462a      	mov	r2, r5
 800f422:	f04f 0e20 	mov.w	lr, #32
 800f426:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f42a:	4281      	cmp	r1, r0
 800f42c:	eb06 0c05 	add.w	ip, r6, r5
 800f430:	dc02      	bgt.n	800f438 <__ieee754_sqrt+0xc8>
 800f432:	d113      	bne.n	800f45c <__ieee754_sqrt+0xec>
 800f434:	459c      	cmp	ip, r3
 800f436:	d811      	bhi.n	800f45c <__ieee754_sqrt+0xec>
 800f438:	f1bc 0f00 	cmp.w	ip, #0
 800f43c:	eb0c 0506 	add.w	r5, ip, r6
 800f440:	da43      	bge.n	800f4ca <__ieee754_sqrt+0x15a>
 800f442:	2d00      	cmp	r5, #0
 800f444:	db41      	blt.n	800f4ca <__ieee754_sqrt+0x15a>
 800f446:	f100 0801 	add.w	r8, r0, #1
 800f44a:	1a09      	subs	r1, r1, r0
 800f44c:	459c      	cmp	ip, r3
 800f44e:	bf88      	it	hi
 800f450:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f454:	eba3 030c 	sub.w	r3, r3, ip
 800f458:	4432      	add	r2, r6
 800f45a:	4640      	mov	r0, r8
 800f45c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f460:	f1be 0e01 	subs.w	lr, lr, #1
 800f464:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f468:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f46c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f470:	d1db      	bne.n	800f42a <__ieee754_sqrt+0xba>
 800f472:	430b      	orrs	r3, r1
 800f474:	d006      	beq.n	800f484 <__ieee754_sqrt+0x114>
 800f476:	1c50      	adds	r0, r2, #1
 800f478:	bf13      	iteet	ne
 800f47a:	3201      	addne	r2, #1
 800f47c:	3401      	addeq	r4, #1
 800f47e:	4672      	moveq	r2, lr
 800f480:	f022 0201 	bicne.w	r2, r2, #1
 800f484:	1063      	asrs	r3, r4, #1
 800f486:	0852      	lsrs	r2, r2, #1
 800f488:	07e1      	lsls	r1, r4, #31
 800f48a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f48e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f492:	bf48      	it	mi
 800f494:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f498:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f49c:	4614      	mov	r4, r2
 800f49e:	e781      	b.n	800f3a4 <__ieee754_sqrt+0x34>
 800f4a0:	0ad9      	lsrs	r1, r3, #11
 800f4a2:	3815      	subs	r0, #21
 800f4a4:	055b      	lsls	r3, r3, #21
 800f4a6:	2900      	cmp	r1, #0
 800f4a8:	d0fa      	beq.n	800f4a0 <__ieee754_sqrt+0x130>
 800f4aa:	02cd      	lsls	r5, r1, #11
 800f4ac:	d50a      	bpl.n	800f4c4 <__ieee754_sqrt+0x154>
 800f4ae:	f1c2 0420 	rsb	r4, r2, #32
 800f4b2:	fa23 f404 	lsr.w	r4, r3, r4
 800f4b6:	1e55      	subs	r5, r2, #1
 800f4b8:	4093      	lsls	r3, r2
 800f4ba:	4321      	orrs	r1, r4
 800f4bc:	1b42      	subs	r2, r0, r5
 800f4be:	e78a      	b.n	800f3d6 <__ieee754_sqrt+0x66>
 800f4c0:	4610      	mov	r0, r2
 800f4c2:	e7f0      	b.n	800f4a6 <__ieee754_sqrt+0x136>
 800f4c4:	0049      	lsls	r1, r1, #1
 800f4c6:	3201      	adds	r2, #1
 800f4c8:	e7ef      	b.n	800f4aa <__ieee754_sqrt+0x13a>
 800f4ca:	4680      	mov	r8, r0
 800f4cc:	e7bd      	b.n	800f44a <__ieee754_sqrt+0xda>
 800f4ce:	bf00      	nop
 800f4d0:	7ff00000 	.word	0x7ff00000
 800f4d4:	00000000 	.word	0x00000000

0800f4d8 <__kernel_cos>:
 800f4d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4dc:	ec57 6b10 	vmov	r6, r7, d0
 800f4e0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f4e4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f4e8:	ed8d 1b00 	vstr	d1, [sp]
 800f4ec:	da07      	bge.n	800f4fe <__kernel_cos+0x26>
 800f4ee:	ee10 0a10 	vmov	r0, s0
 800f4f2:	4639      	mov	r1, r7
 800f4f4:	f7f1 fb48 	bl	8000b88 <__aeabi_d2iz>
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	f000 8088 	beq.w	800f60e <__kernel_cos+0x136>
 800f4fe:	4632      	mov	r2, r6
 800f500:	463b      	mov	r3, r7
 800f502:	4630      	mov	r0, r6
 800f504:	4639      	mov	r1, r7
 800f506:	f7f1 f88f 	bl	8000628 <__aeabi_dmul>
 800f50a:	4b51      	ldr	r3, [pc, #324]	; (800f650 <__kernel_cos+0x178>)
 800f50c:	2200      	movs	r2, #0
 800f50e:	4604      	mov	r4, r0
 800f510:	460d      	mov	r5, r1
 800f512:	f7f1 f889 	bl	8000628 <__aeabi_dmul>
 800f516:	a340      	add	r3, pc, #256	; (adr r3, 800f618 <__kernel_cos+0x140>)
 800f518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51c:	4682      	mov	sl, r0
 800f51e:	468b      	mov	fp, r1
 800f520:	4620      	mov	r0, r4
 800f522:	4629      	mov	r1, r5
 800f524:	f7f1 f880 	bl	8000628 <__aeabi_dmul>
 800f528:	a33d      	add	r3, pc, #244	; (adr r3, 800f620 <__kernel_cos+0x148>)
 800f52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52e:	f7f0 fec5 	bl	80002bc <__adddf3>
 800f532:	4622      	mov	r2, r4
 800f534:	462b      	mov	r3, r5
 800f536:	f7f1 f877 	bl	8000628 <__aeabi_dmul>
 800f53a:	a33b      	add	r3, pc, #236	; (adr r3, 800f628 <__kernel_cos+0x150>)
 800f53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f540:	f7f0 feba 	bl	80002b8 <__aeabi_dsub>
 800f544:	4622      	mov	r2, r4
 800f546:	462b      	mov	r3, r5
 800f548:	f7f1 f86e 	bl	8000628 <__aeabi_dmul>
 800f54c:	a338      	add	r3, pc, #224	; (adr r3, 800f630 <__kernel_cos+0x158>)
 800f54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f552:	f7f0 feb3 	bl	80002bc <__adddf3>
 800f556:	4622      	mov	r2, r4
 800f558:	462b      	mov	r3, r5
 800f55a:	f7f1 f865 	bl	8000628 <__aeabi_dmul>
 800f55e:	a336      	add	r3, pc, #216	; (adr r3, 800f638 <__kernel_cos+0x160>)
 800f560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f564:	f7f0 fea8 	bl	80002b8 <__aeabi_dsub>
 800f568:	4622      	mov	r2, r4
 800f56a:	462b      	mov	r3, r5
 800f56c:	f7f1 f85c 	bl	8000628 <__aeabi_dmul>
 800f570:	a333      	add	r3, pc, #204	; (adr r3, 800f640 <__kernel_cos+0x168>)
 800f572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f576:	f7f0 fea1 	bl	80002bc <__adddf3>
 800f57a:	4622      	mov	r2, r4
 800f57c:	462b      	mov	r3, r5
 800f57e:	f7f1 f853 	bl	8000628 <__aeabi_dmul>
 800f582:	4622      	mov	r2, r4
 800f584:	462b      	mov	r3, r5
 800f586:	f7f1 f84f 	bl	8000628 <__aeabi_dmul>
 800f58a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f58e:	4604      	mov	r4, r0
 800f590:	460d      	mov	r5, r1
 800f592:	4630      	mov	r0, r6
 800f594:	4639      	mov	r1, r7
 800f596:	f7f1 f847 	bl	8000628 <__aeabi_dmul>
 800f59a:	460b      	mov	r3, r1
 800f59c:	4602      	mov	r2, r0
 800f59e:	4629      	mov	r1, r5
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	f7f0 fe89 	bl	80002b8 <__aeabi_dsub>
 800f5a6:	4b2b      	ldr	r3, [pc, #172]	; (800f654 <__kernel_cos+0x17c>)
 800f5a8:	4598      	cmp	r8, r3
 800f5aa:	4606      	mov	r6, r0
 800f5ac:	460f      	mov	r7, r1
 800f5ae:	dc10      	bgt.n	800f5d2 <__kernel_cos+0xfa>
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	460b      	mov	r3, r1
 800f5b4:	4650      	mov	r0, sl
 800f5b6:	4659      	mov	r1, fp
 800f5b8:	f7f0 fe7e 	bl	80002b8 <__aeabi_dsub>
 800f5bc:	460b      	mov	r3, r1
 800f5be:	4926      	ldr	r1, [pc, #152]	; (800f658 <__kernel_cos+0x180>)
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	2000      	movs	r0, #0
 800f5c4:	f7f0 fe78 	bl	80002b8 <__aeabi_dsub>
 800f5c8:	ec41 0b10 	vmov	d0, r0, r1
 800f5cc:	b003      	add	sp, #12
 800f5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d2:	4b22      	ldr	r3, [pc, #136]	; (800f65c <__kernel_cos+0x184>)
 800f5d4:	4920      	ldr	r1, [pc, #128]	; (800f658 <__kernel_cos+0x180>)
 800f5d6:	4598      	cmp	r8, r3
 800f5d8:	bfcc      	ite	gt
 800f5da:	4d21      	ldrgt	r5, [pc, #132]	; (800f660 <__kernel_cos+0x188>)
 800f5dc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f5e0:	2400      	movs	r4, #0
 800f5e2:	4622      	mov	r2, r4
 800f5e4:	462b      	mov	r3, r5
 800f5e6:	2000      	movs	r0, #0
 800f5e8:	f7f0 fe66 	bl	80002b8 <__aeabi_dsub>
 800f5ec:	4622      	mov	r2, r4
 800f5ee:	4680      	mov	r8, r0
 800f5f0:	4689      	mov	r9, r1
 800f5f2:	462b      	mov	r3, r5
 800f5f4:	4650      	mov	r0, sl
 800f5f6:	4659      	mov	r1, fp
 800f5f8:	f7f0 fe5e 	bl	80002b8 <__aeabi_dsub>
 800f5fc:	4632      	mov	r2, r6
 800f5fe:	463b      	mov	r3, r7
 800f600:	f7f0 fe5a 	bl	80002b8 <__aeabi_dsub>
 800f604:	4602      	mov	r2, r0
 800f606:	460b      	mov	r3, r1
 800f608:	4640      	mov	r0, r8
 800f60a:	4649      	mov	r1, r9
 800f60c:	e7da      	b.n	800f5c4 <__kernel_cos+0xec>
 800f60e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f648 <__kernel_cos+0x170>
 800f612:	e7db      	b.n	800f5cc <__kernel_cos+0xf4>
 800f614:	f3af 8000 	nop.w
 800f618:	be8838d4 	.word	0xbe8838d4
 800f61c:	bda8fae9 	.word	0xbda8fae9
 800f620:	bdb4b1c4 	.word	0xbdb4b1c4
 800f624:	3e21ee9e 	.word	0x3e21ee9e
 800f628:	809c52ad 	.word	0x809c52ad
 800f62c:	3e927e4f 	.word	0x3e927e4f
 800f630:	19cb1590 	.word	0x19cb1590
 800f634:	3efa01a0 	.word	0x3efa01a0
 800f638:	16c15177 	.word	0x16c15177
 800f63c:	3f56c16c 	.word	0x3f56c16c
 800f640:	5555554c 	.word	0x5555554c
 800f644:	3fa55555 	.word	0x3fa55555
 800f648:	00000000 	.word	0x00000000
 800f64c:	3ff00000 	.word	0x3ff00000
 800f650:	3fe00000 	.word	0x3fe00000
 800f654:	3fd33332 	.word	0x3fd33332
 800f658:	3ff00000 	.word	0x3ff00000
 800f65c:	3fe90000 	.word	0x3fe90000
 800f660:	3fd20000 	.word	0x3fd20000
 800f664:	00000000 	.word	0x00000000

0800f668 <__kernel_rem_pio2>:
 800f668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f66c:	ed2d 8b02 	vpush	{d8}
 800f670:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f674:	f112 0f14 	cmn.w	r2, #20
 800f678:	9308      	str	r3, [sp, #32]
 800f67a:	9101      	str	r1, [sp, #4]
 800f67c:	4bc4      	ldr	r3, [pc, #784]	; (800f990 <__kernel_rem_pio2+0x328>)
 800f67e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f680:	900b      	str	r0, [sp, #44]	; 0x2c
 800f682:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f686:	9302      	str	r3, [sp, #8]
 800f688:	9b08      	ldr	r3, [sp, #32]
 800f68a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f68e:	bfa8      	it	ge
 800f690:	1ed4      	subge	r4, r2, #3
 800f692:	9306      	str	r3, [sp, #24]
 800f694:	bfb2      	itee	lt
 800f696:	2400      	movlt	r4, #0
 800f698:	2318      	movge	r3, #24
 800f69a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f69e:	f06f 0317 	mvn.w	r3, #23
 800f6a2:	fb04 3303 	mla	r3, r4, r3, r3
 800f6a6:	eb03 0a02 	add.w	sl, r3, r2
 800f6aa:	9b02      	ldr	r3, [sp, #8]
 800f6ac:	9a06      	ldr	r2, [sp, #24]
 800f6ae:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800f980 <__kernel_rem_pio2+0x318>
 800f6b2:	eb03 0802 	add.w	r8, r3, r2
 800f6b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f6b8:	1aa7      	subs	r7, r4, r2
 800f6ba:	ae22      	add	r6, sp, #136	; 0x88
 800f6bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f6c0:	2500      	movs	r5, #0
 800f6c2:	4545      	cmp	r5, r8
 800f6c4:	dd13      	ble.n	800f6ee <__kernel_rem_pio2+0x86>
 800f6c6:	9b08      	ldr	r3, [sp, #32]
 800f6c8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800f980 <__kernel_rem_pio2+0x318>
 800f6cc:	aa22      	add	r2, sp, #136	; 0x88
 800f6ce:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f6d2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f6d6:	f04f 0800 	mov.w	r8, #0
 800f6da:	9b02      	ldr	r3, [sp, #8]
 800f6dc:	4598      	cmp	r8, r3
 800f6de:	dc2f      	bgt.n	800f740 <__kernel_rem_pio2+0xd8>
 800f6e0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f6e4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800f6e8:	462f      	mov	r7, r5
 800f6ea:	2600      	movs	r6, #0
 800f6ec:	e01b      	b.n	800f726 <__kernel_rem_pio2+0xbe>
 800f6ee:	42ef      	cmn	r7, r5
 800f6f0:	d407      	bmi.n	800f702 <__kernel_rem_pio2+0x9a>
 800f6f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f6f6:	f7f0 ff2d 	bl	8000554 <__aeabi_i2d>
 800f6fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f6fe:	3501      	adds	r5, #1
 800f700:	e7df      	b.n	800f6c2 <__kernel_rem_pio2+0x5a>
 800f702:	ec51 0b18 	vmov	r0, r1, d8
 800f706:	e7f8      	b.n	800f6fa <__kernel_rem_pio2+0x92>
 800f708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f70c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f710:	f7f0 ff8a 	bl	8000628 <__aeabi_dmul>
 800f714:	4602      	mov	r2, r0
 800f716:	460b      	mov	r3, r1
 800f718:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f71c:	f7f0 fdce 	bl	80002bc <__adddf3>
 800f720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f724:	3601      	adds	r6, #1
 800f726:	9b06      	ldr	r3, [sp, #24]
 800f728:	429e      	cmp	r6, r3
 800f72a:	f1a7 0708 	sub.w	r7, r7, #8
 800f72e:	ddeb      	ble.n	800f708 <__kernel_rem_pio2+0xa0>
 800f730:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f734:	f108 0801 	add.w	r8, r8, #1
 800f738:	ecab 7b02 	vstmia	fp!, {d7}
 800f73c:	3508      	adds	r5, #8
 800f73e:	e7cc      	b.n	800f6da <__kernel_rem_pio2+0x72>
 800f740:	9b02      	ldr	r3, [sp, #8]
 800f742:	aa0e      	add	r2, sp, #56	; 0x38
 800f744:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f748:	930d      	str	r3, [sp, #52]	; 0x34
 800f74a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f74c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f750:	9c02      	ldr	r4, [sp, #8]
 800f752:	930c      	str	r3, [sp, #48]	; 0x30
 800f754:	00e3      	lsls	r3, r4, #3
 800f756:	930a      	str	r3, [sp, #40]	; 0x28
 800f758:	ab9a      	add	r3, sp, #616	; 0x268
 800f75a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f75e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f762:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f766:	ab72      	add	r3, sp, #456	; 0x1c8
 800f768:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f76c:	46c3      	mov	fp, r8
 800f76e:	46a1      	mov	r9, r4
 800f770:	f1b9 0f00 	cmp.w	r9, #0
 800f774:	f1a5 0508 	sub.w	r5, r5, #8
 800f778:	dc77      	bgt.n	800f86a <__kernel_rem_pio2+0x202>
 800f77a:	ec47 6b10 	vmov	d0, r6, r7
 800f77e:	4650      	mov	r0, sl
 800f780:	f000 fdee 	bl	8010360 <scalbn>
 800f784:	ec57 6b10 	vmov	r6, r7, d0
 800f788:	2200      	movs	r2, #0
 800f78a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f78e:	ee10 0a10 	vmov	r0, s0
 800f792:	4639      	mov	r1, r7
 800f794:	f7f0 ff48 	bl	8000628 <__aeabi_dmul>
 800f798:	ec41 0b10 	vmov	d0, r0, r1
 800f79c:	f000 fd58 	bl	8010250 <floor>
 800f7a0:	4b7c      	ldr	r3, [pc, #496]	; (800f994 <__kernel_rem_pio2+0x32c>)
 800f7a2:	ec51 0b10 	vmov	r0, r1, d0
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	f7f0 ff3e 	bl	8000628 <__aeabi_dmul>
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	460b      	mov	r3, r1
 800f7b0:	4630      	mov	r0, r6
 800f7b2:	4639      	mov	r1, r7
 800f7b4:	f7f0 fd80 	bl	80002b8 <__aeabi_dsub>
 800f7b8:	460f      	mov	r7, r1
 800f7ba:	4606      	mov	r6, r0
 800f7bc:	f7f1 f9e4 	bl	8000b88 <__aeabi_d2iz>
 800f7c0:	9004      	str	r0, [sp, #16]
 800f7c2:	f7f0 fec7 	bl	8000554 <__aeabi_i2d>
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	4630      	mov	r0, r6
 800f7cc:	4639      	mov	r1, r7
 800f7ce:	f7f0 fd73 	bl	80002b8 <__aeabi_dsub>
 800f7d2:	f1ba 0f00 	cmp.w	sl, #0
 800f7d6:	4606      	mov	r6, r0
 800f7d8:	460f      	mov	r7, r1
 800f7da:	dd6d      	ble.n	800f8b8 <__kernel_rem_pio2+0x250>
 800f7dc:	1e62      	subs	r2, r4, #1
 800f7de:	ab0e      	add	r3, sp, #56	; 0x38
 800f7e0:	9d04      	ldr	r5, [sp, #16]
 800f7e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f7e6:	f1ca 0118 	rsb	r1, sl, #24
 800f7ea:	fa40 f301 	asr.w	r3, r0, r1
 800f7ee:	441d      	add	r5, r3
 800f7f0:	408b      	lsls	r3, r1
 800f7f2:	1ac0      	subs	r0, r0, r3
 800f7f4:	ab0e      	add	r3, sp, #56	; 0x38
 800f7f6:	9504      	str	r5, [sp, #16]
 800f7f8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f7fc:	f1ca 0317 	rsb	r3, sl, #23
 800f800:	fa40 fb03 	asr.w	fp, r0, r3
 800f804:	f1bb 0f00 	cmp.w	fp, #0
 800f808:	dd65      	ble.n	800f8d6 <__kernel_rem_pio2+0x26e>
 800f80a:	9b04      	ldr	r3, [sp, #16]
 800f80c:	2200      	movs	r2, #0
 800f80e:	3301      	adds	r3, #1
 800f810:	9304      	str	r3, [sp, #16]
 800f812:	4615      	mov	r5, r2
 800f814:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f818:	4294      	cmp	r4, r2
 800f81a:	f300 809c 	bgt.w	800f956 <__kernel_rem_pio2+0x2ee>
 800f81e:	f1ba 0f00 	cmp.w	sl, #0
 800f822:	dd07      	ble.n	800f834 <__kernel_rem_pio2+0x1cc>
 800f824:	f1ba 0f01 	cmp.w	sl, #1
 800f828:	f000 80c0 	beq.w	800f9ac <__kernel_rem_pio2+0x344>
 800f82c:	f1ba 0f02 	cmp.w	sl, #2
 800f830:	f000 80c6 	beq.w	800f9c0 <__kernel_rem_pio2+0x358>
 800f834:	f1bb 0f02 	cmp.w	fp, #2
 800f838:	d14d      	bne.n	800f8d6 <__kernel_rem_pio2+0x26e>
 800f83a:	4632      	mov	r2, r6
 800f83c:	463b      	mov	r3, r7
 800f83e:	4956      	ldr	r1, [pc, #344]	; (800f998 <__kernel_rem_pio2+0x330>)
 800f840:	2000      	movs	r0, #0
 800f842:	f7f0 fd39 	bl	80002b8 <__aeabi_dsub>
 800f846:	4606      	mov	r6, r0
 800f848:	460f      	mov	r7, r1
 800f84a:	2d00      	cmp	r5, #0
 800f84c:	d043      	beq.n	800f8d6 <__kernel_rem_pio2+0x26e>
 800f84e:	4650      	mov	r0, sl
 800f850:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800f988 <__kernel_rem_pio2+0x320>
 800f854:	f000 fd84 	bl	8010360 <scalbn>
 800f858:	4630      	mov	r0, r6
 800f85a:	4639      	mov	r1, r7
 800f85c:	ec53 2b10 	vmov	r2, r3, d0
 800f860:	f7f0 fd2a 	bl	80002b8 <__aeabi_dsub>
 800f864:	4606      	mov	r6, r0
 800f866:	460f      	mov	r7, r1
 800f868:	e035      	b.n	800f8d6 <__kernel_rem_pio2+0x26e>
 800f86a:	4b4c      	ldr	r3, [pc, #304]	; (800f99c <__kernel_rem_pio2+0x334>)
 800f86c:	2200      	movs	r2, #0
 800f86e:	4630      	mov	r0, r6
 800f870:	4639      	mov	r1, r7
 800f872:	f7f0 fed9 	bl	8000628 <__aeabi_dmul>
 800f876:	f7f1 f987 	bl	8000b88 <__aeabi_d2iz>
 800f87a:	f7f0 fe6b 	bl	8000554 <__aeabi_i2d>
 800f87e:	4602      	mov	r2, r0
 800f880:	460b      	mov	r3, r1
 800f882:	ec43 2b18 	vmov	d8, r2, r3
 800f886:	4b46      	ldr	r3, [pc, #280]	; (800f9a0 <__kernel_rem_pio2+0x338>)
 800f888:	2200      	movs	r2, #0
 800f88a:	f7f0 fecd 	bl	8000628 <__aeabi_dmul>
 800f88e:	4602      	mov	r2, r0
 800f890:	460b      	mov	r3, r1
 800f892:	4630      	mov	r0, r6
 800f894:	4639      	mov	r1, r7
 800f896:	f7f0 fd0f 	bl	80002b8 <__aeabi_dsub>
 800f89a:	f7f1 f975 	bl	8000b88 <__aeabi_d2iz>
 800f89e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f8a2:	f84b 0b04 	str.w	r0, [fp], #4
 800f8a6:	ec51 0b18 	vmov	r0, r1, d8
 800f8aa:	f7f0 fd07 	bl	80002bc <__adddf3>
 800f8ae:	f109 39ff 	add.w	r9, r9, #4294967295
 800f8b2:	4606      	mov	r6, r0
 800f8b4:	460f      	mov	r7, r1
 800f8b6:	e75b      	b.n	800f770 <__kernel_rem_pio2+0x108>
 800f8b8:	d106      	bne.n	800f8c8 <__kernel_rem_pio2+0x260>
 800f8ba:	1e63      	subs	r3, r4, #1
 800f8bc:	aa0e      	add	r2, sp, #56	; 0x38
 800f8be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f8c2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800f8c6:	e79d      	b.n	800f804 <__kernel_rem_pio2+0x19c>
 800f8c8:	4b36      	ldr	r3, [pc, #216]	; (800f9a4 <__kernel_rem_pio2+0x33c>)
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	f7f1 f932 	bl	8000b34 <__aeabi_dcmpge>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	d13d      	bne.n	800f950 <__kernel_rem_pio2+0x2e8>
 800f8d4:	4683      	mov	fp, r0
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	2300      	movs	r3, #0
 800f8da:	4630      	mov	r0, r6
 800f8dc:	4639      	mov	r1, r7
 800f8de:	f7f1 f90b 	bl	8000af8 <__aeabi_dcmpeq>
 800f8e2:	2800      	cmp	r0, #0
 800f8e4:	f000 80c0 	beq.w	800fa68 <__kernel_rem_pio2+0x400>
 800f8e8:	1e65      	subs	r5, r4, #1
 800f8ea:	462b      	mov	r3, r5
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	9902      	ldr	r1, [sp, #8]
 800f8f0:	428b      	cmp	r3, r1
 800f8f2:	da6c      	bge.n	800f9ce <__kernel_rem_pio2+0x366>
 800f8f4:	2a00      	cmp	r2, #0
 800f8f6:	f000 8089 	beq.w	800fa0c <__kernel_rem_pio2+0x3a4>
 800f8fa:	ab0e      	add	r3, sp, #56	; 0x38
 800f8fc:	f1aa 0a18 	sub.w	sl, sl, #24
 800f900:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f904:	2b00      	cmp	r3, #0
 800f906:	f000 80ad 	beq.w	800fa64 <__kernel_rem_pio2+0x3fc>
 800f90a:	4650      	mov	r0, sl
 800f90c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800f988 <__kernel_rem_pio2+0x320>
 800f910:	f000 fd26 	bl	8010360 <scalbn>
 800f914:	ab9a      	add	r3, sp, #616	; 0x268
 800f916:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f91a:	ec57 6b10 	vmov	r6, r7, d0
 800f91e:	00ec      	lsls	r4, r5, #3
 800f920:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800f924:	46aa      	mov	sl, r5
 800f926:	f1ba 0f00 	cmp.w	sl, #0
 800f92a:	f280 80d6 	bge.w	800fada <__kernel_rem_pio2+0x472>
 800f92e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800f980 <__kernel_rem_pio2+0x318>
 800f932:	462e      	mov	r6, r5
 800f934:	2e00      	cmp	r6, #0
 800f936:	f2c0 8104 	blt.w	800fb42 <__kernel_rem_pio2+0x4da>
 800f93a:	ab72      	add	r3, sp, #456	; 0x1c8
 800f93c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f940:	f8df a064 	ldr.w	sl, [pc, #100]	; 800f9a8 <__kernel_rem_pio2+0x340>
 800f944:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800f948:	f04f 0800 	mov.w	r8, #0
 800f94c:	1baf      	subs	r7, r5, r6
 800f94e:	e0ea      	b.n	800fb26 <__kernel_rem_pio2+0x4be>
 800f950:	f04f 0b02 	mov.w	fp, #2
 800f954:	e759      	b.n	800f80a <__kernel_rem_pio2+0x1a2>
 800f956:	f8d8 3000 	ldr.w	r3, [r8]
 800f95a:	b955      	cbnz	r5, 800f972 <__kernel_rem_pio2+0x30a>
 800f95c:	b123      	cbz	r3, 800f968 <__kernel_rem_pio2+0x300>
 800f95e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f962:	f8c8 3000 	str.w	r3, [r8]
 800f966:	2301      	movs	r3, #1
 800f968:	3201      	adds	r2, #1
 800f96a:	f108 0804 	add.w	r8, r8, #4
 800f96e:	461d      	mov	r5, r3
 800f970:	e752      	b.n	800f818 <__kernel_rem_pio2+0x1b0>
 800f972:	1acb      	subs	r3, r1, r3
 800f974:	f8c8 3000 	str.w	r3, [r8]
 800f978:	462b      	mov	r3, r5
 800f97a:	e7f5      	b.n	800f968 <__kernel_rem_pio2+0x300>
 800f97c:	f3af 8000 	nop.w
	...
 800f98c:	3ff00000 	.word	0x3ff00000
 800f990:	08011018 	.word	0x08011018
 800f994:	40200000 	.word	0x40200000
 800f998:	3ff00000 	.word	0x3ff00000
 800f99c:	3e700000 	.word	0x3e700000
 800f9a0:	41700000 	.word	0x41700000
 800f9a4:	3fe00000 	.word	0x3fe00000
 800f9a8:	08010fd8 	.word	0x08010fd8
 800f9ac:	1e62      	subs	r2, r4, #1
 800f9ae:	ab0e      	add	r3, sp, #56	; 0x38
 800f9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f9b8:	a90e      	add	r1, sp, #56	; 0x38
 800f9ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f9be:	e739      	b.n	800f834 <__kernel_rem_pio2+0x1cc>
 800f9c0:	1e62      	subs	r2, r4, #1
 800f9c2:	ab0e      	add	r3, sp, #56	; 0x38
 800f9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9c8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f9cc:	e7f4      	b.n	800f9b8 <__kernel_rem_pio2+0x350>
 800f9ce:	a90e      	add	r1, sp, #56	; 0x38
 800f9d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f9d4:	3b01      	subs	r3, #1
 800f9d6:	430a      	orrs	r2, r1
 800f9d8:	e789      	b.n	800f8ee <__kernel_rem_pio2+0x286>
 800f9da:	3301      	adds	r3, #1
 800f9dc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f9e0:	2900      	cmp	r1, #0
 800f9e2:	d0fa      	beq.n	800f9da <__kernel_rem_pio2+0x372>
 800f9e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9e6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800f9ea:	446a      	add	r2, sp
 800f9ec:	3a98      	subs	r2, #152	; 0x98
 800f9ee:	920a      	str	r2, [sp, #40]	; 0x28
 800f9f0:	9a08      	ldr	r2, [sp, #32]
 800f9f2:	18e3      	adds	r3, r4, r3
 800f9f4:	18a5      	adds	r5, r4, r2
 800f9f6:	aa22      	add	r2, sp, #136	; 0x88
 800f9f8:	f104 0801 	add.w	r8, r4, #1
 800f9fc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800fa00:	9304      	str	r3, [sp, #16]
 800fa02:	9b04      	ldr	r3, [sp, #16]
 800fa04:	4543      	cmp	r3, r8
 800fa06:	da04      	bge.n	800fa12 <__kernel_rem_pio2+0x3aa>
 800fa08:	461c      	mov	r4, r3
 800fa0a:	e6a3      	b.n	800f754 <__kernel_rem_pio2+0xec>
 800fa0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e7e4      	b.n	800f9dc <__kernel_rem_pio2+0x374>
 800fa12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa14:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800fa18:	f7f0 fd9c 	bl	8000554 <__aeabi_i2d>
 800fa1c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800fa20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa22:	46ab      	mov	fp, r5
 800fa24:	461c      	mov	r4, r3
 800fa26:	f04f 0900 	mov.w	r9, #0
 800fa2a:	2600      	movs	r6, #0
 800fa2c:	2700      	movs	r7, #0
 800fa2e:	9b06      	ldr	r3, [sp, #24]
 800fa30:	4599      	cmp	r9, r3
 800fa32:	dd06      	ble.n	800fa42 <__kernel_rem_pio2+0x3da>
 800fa34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa36:	e8e3 6702 	strd	r6, r7, [r3], #8
 800fa3a:	f108 0801 	add.w	r8, r8, #1
 800fa3e:	930a      	str	r3, [sp, #40]	; 0x28
 800fa40:	e7df      	b.n	800fa02 <__kernel_rem_pio2+0x39a>
 800fa42:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800fa46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800fa4a:	f7f0 fded 	bl	8000628 <__aeabi_dmul>
 800fa4e:	4602      	mov	r2, r0
 800fa50:	460b      	mov	r3, r1
 800fa52:	4630      	mov	r0, r6
 800fa54:	4639      	mov	r1, r7
 800fa56:	f7f0 fc31 	bl	80002bc <__adddf3>
 800fa5a:	f109 0901 	add.w	r9, r9, #1
 800fa5e:	4606      	mov	r6, r0
 800fa60:	460f      	mov	r7, r1
 800fa62:	e7e4      	b.n	800fa2e <__kernel_rem_pio2+0x3c6>
 800fa64:	3d01      	subs	r5, #1
 800fa66:	e748      	b.n	800f8fa <__kernel_rem_pio2+0x292>
 800fa68:	ec47 6b10 	vmov	d0, r6, r7
 800fa6c:	f1ca 0000 	rsb	r0, sl, #0
 800fa70:	f000 fc76 	bl	8010360 <scalbn>
 800fa74:	ec57 6b10 	vmov	r6, r7, d0
 800fa78:	4ba0      	ldr	r3, [pc, #640]	; (800fcfc <__kernel_rem_pio2+0x694>)
 800fa7a:	ee10 0a10 	vmov	r0, s0
 800fa7e:	2200      	movs	r2, #0
 800fa80:	4639      	mov	r1, r7
 800fa82:	f7f1 f857 	bl	8000b34 <__aeabi_dcmpge>
 800fa86:	b1f8      	cbz	r0, 800fac8 <__kernel_rem_pio2+0x460>
 800fa88:	4b9d      	ldr	r3, [pc, #628]	; (800fd00 <__kernel_rem_pio2+0x698>)
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	4630      	mov	r0, r6
 800fa8e:	4639      	mov	r1, r7
 800fa90:	f7f0 fdca 	bl	8000628 <__aeabi_dmul>
 800fa94:	f7f1 f878 	bl	8000b88 <__aeabi_d2iz>
 800fa98:	4680      	mov	r8, r0
 800fa9a:	f7f0 fd5b 	bl	8000554 <__aeabi_i2d>
 800fa9e:	4b97      	ldr	r3, [pc, #604]	; (800fcfc <__kernel_rem_pio2+0x694>)
 800faa0:	2200      	movs	r2, #0
 800faa2:	f7f0 fdc1 	bl	8000628 <__aeabi_dmul>
 800faa6:	460b      	mov	r3, r1
 800faa8:	4602      	mov	r2, r0
 800faaa:	4639      	mov	r1, r7
 800faac:	4630      	mov	r0, r6
 800faae:	f7f0 fc03 	bl	80002b8 <__aeabi_dsub>
 800fab2:	f7f1 f869 	bl	8000b88 <__aeabi_d2iz>
 800fab6:	1c65      	adds	r5, r4, #1
 800fab8:	ab0e      	add	r3, sp, #56	; 0x38
 800faba:	f10a 0a18 	add.w	sl, sl, #24
 800fabe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fac2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800fac6:	e720      	b.n	800f90a <__kernel_rem_pio2+0x2a2>
 800fac8:	4630      	mov	r0, r6
 800faca:	4639      	mov	r1, r7
 800facc:	f7f1 f85c 	bl	8000b88 <__aeabi_d2iz>
 800fad0:	ab0e      	add	r3, sp, #56	; 0x38
 800fad2:	4625      	mov	r5, r4
 800fad4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fad8:	e717      	b.n	800f90a <__kernel_rem_pio2+0x2a2>
 800fada:	ab0e      	add	r3, sp, #56	; 0x38
 800fadc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800fae0:	f7f0 fd38 	bl	8000554 <__aeabi_i2d>
 800fae4:	4632      	mov	r2, r6
 800fae6:	463b      	mov	r3, r7
 800fae8:	f7f0 fd9e 	bl	8000628 <__aeabi_dmul>
 800faec:	4b84      	ldr	r3, [pc, #528]	; (800fd00 <__kernel_rem_pio2+0x698>)
 800faee:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800faf2:	2200      	movs	r2, #0
 800faf4:	4630      	mov	r0, r6
 800faf6:	4639      	mov	r1, r7
 800faf8:	f7f0 fd96 	bl	8000628 <__aeabi_dmul>
 800fafc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb00:	4606      	mov	r6, r0
 800fb02:	460f      	mov	r7, r1
 800fb04:	e70f      	b.n	800f926 <__kernel_rem_pio2+0x2be>
 800fb06:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800fb0a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800fb0e:	f7f0 fd8b 	bl	8000628 <__aeabi_dmul>
 800fb12:	4602      	mov	r2, r0
 800fb14:	460b      	mov	r3, r1
 800fb16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fb1a:	f7f0 fbcf 	bl	80002bc <__adddf3>
 800fb1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fb22:	f108 0801 	add.w	r8, r8, #1
 800fb26:	9b02      	ldr	r3, [sp, #8]
 800fb28:	4598      	cmp	r8, r3
 800fb2a:	dc01      	bgt.n	800fb30 <__kernel_rem_pio2+0x4c8>
 800fb2c:	45b8      	cmp	r8, r7
 800fb2e:	ddea      	ble.n	800fb06 <__kernel_rem_pio2+0x49e>
 800fb30:	ed9d 7b06 	vldr	d7, [sp, #24]
 800fb34:	ab4a      	add	r3, sp, #296	; 0x128
 800fb36:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800fb3a:	ed87 7b00 	vstr	d7, [r7]
 800fb3e:	3e01      	subs	r6, #1
 800fb40:	e6f8      	b.n	800f934 <__kernel_rem_pio2+0x2cc>
 800fb42:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800fb44:	2b02      	cmp	r3, #2
 800fb46:	dc0b      	bgt.n	800fb60 <__kernel_rem_pio2+0x4f8>
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	dc35      	bgt.n	800fbb8 <__kernel_rem_pio2+0x550>
 800fb4c:	d059      	beq.n	800fc02 <__kernel_rem_pio2+0x59a>
 800fb4e:	9b04      	ldr	r3, [sp, #16]
 800fb50:	f003 0007 	and.w	r0, r3, #7
 800fb54:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800fb58:	ecbd 8b02 	vpop	{d8}
 800fb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb60:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800fb62:	2b03      	cmp	r3, #3
 800fb64:	d1f3      	bne.n	800fb4e <__kernel_rem_pio2+0x4e6>
 800fb66:	ab4a      	add	r3, sp, #296	; 0x128
 800fb68:	4423      	add	r3, r4
 800fb6a:	9306      	str	r3, [sp, #24]
 800fb6c:	461c      	mov	r4, r3
 800fb6e:	469a      	mov	sl, r3
 800fb70:	9502      	str	r5, [sp, #8]
 800fb72:	9b02      	ldr	r3, [sp, #8]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	f1aa 0a08 	sub.w	sl, sl, #8
 800fb7a:	dc6b      	bgt.n	800fc54 <__kernel_rem_pio2+0x5ec>
 800fb7c:	46aa      	mov	sl, r5
 800fb7e:	f1ba 0f01 	cmp.w	sl, #1
 800fb82:	f1a4 0408 	sub.w	r4, r4, #8
 800fb86:	f300 8085 	bgt.w	800fc94 <__kernel_rem_pio2+0x62c>
 800fb8a:	9c06      	ldr	r4, [sp, #24]
 800fb8c:	2000      	movs	r0, #0
 800fb8e:	3408      	adds	r4, #8
 800fb90:	2100      	movs	r1, #0
 800fb92:	2d01      	cmp	r5, #1
 800fb94:	f300 809d 	bgt.w	800fcd2 <__kernel_rem_pio2+0x66a>
 800fb98:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800fb9c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800fba0:	f1bb 0f00 	cmp.w	fp, #0
 800fba4:	f040 809b 	bne.w	800fcde <__kernel_rem_pio2+0x676>
 800fba8:	9b01      	ldr	r3, [sp, #4]
 800fbaa:	e9c3 5600 	strd	r5, r6, [r3]
 800fbae:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800fbb2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fbb6:	e7ca      	b.n	800fb4e <__kernel_rem_pio2+0x4e6>
 800fbb8:	3408      	adds	r4, #8
 800fbba:	ab4a      	add	r3, sp, #296	; 0x128
 800fbbc:	441c      	add	r4, r3
 800fbbe:	462e      	mov	r6, r5
 800fbc0:	2000      	movs	r0, #0
 800fbc2:	2100      	movs	r1, #0
 800fbc4:	2e00      	cmp	r6, #0
 800fbc6:	da36      	bge.n	800fc36 <__kernel_rem_pio2+0x5ce>
 800fbc8:	f1bb 0f00 	cmp.w	fp, #0
 800fbcc:	d039      	beq.n	800fc42 <__kernel_rem_pio2+0x5da>
 800fbce:	4602      	mov	r2, r0
 800fbd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbd4:	9c01      	ldr	r4, [sp, #4]
 800fbd6:	e9c4 2300 	strd	r2, r3, [r4]
 800fbda:	4602      	mov	r2, r0
 800fbdc:	460b      	mov	r3, r1
 800fbde:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800fbe2:	f7f0 fb69 	bl	80002b8 <__aeabi_dsub>
 800fbe6:	ae4c      	add	r6, sp, #304	; 0x130
 800fbe8:	2401      	movs	r4, #1
 800fbea:	42a5      	cmp	r5, r4
 800fbec:	da2c      	bge.n	800fc48 <__kernel_rem_pio2+0x5e0>
 800fbee:	f1bb 0f00 	cmp.w	fp, #0
 800fbf2:	d002      	beq.n	800fbfa <__kernel_rem_pio2+0x592>
 800fbf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	9b01      	ldr	r3, [sp, #4]
 800fbfc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fc00:	e7a5      	b.n	800fb4e <__kernel_rem_pio2+0x4e6>
 800fc02:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800fc06:	eb0d 0403 	add.w	r4, sp, r3
 800fc0a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800fc0e:	2000      	movs	r0, #0
 800fc10:	2100      	movs	r1, #0
 800fc12:	2d00      	cmp	r5, #0
 800fc14:	da09      	bge.n	800fc2a <__kernel_rem_pio2+0x5c2>
 800fc16:	f1bb 0f00 	cmp.w	fp, #0
 800fc1a:	d002      	beq.n	800fc22 <__kernel_rem_pio2+0x5ba>
 800fc1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc20:	4619      	mov	r1, r3
 800fc22:	9b01      	ldr	r3, [sp, #4]
 800fc24:	e9c3 0100 	strd	r0, r1, [r3]
 800fc28:	e791      	b.n	800fb4e <__kernel_rem_pio2+0x4e6>
 800fc2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fc2e:	f7f0 fb45 	bl	80002bc <__adddf3>
 800fc32:	3d01      	subs	r5, #1
 800fc34:	e7ed      	b.n	800fc12 <__kernel_rem_pio2+0x5aa>
 800fc36:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fc3a:	f7f0 fb3f 	bl	80002bc <__adddf3>
 800fc3e:	3e01      	subs	r6, #1
 800fc40:	e7c0      	b.n	800fbc4 <__kernel_rem_pio2+0x55c>
 800fc42:	4602      	mov	r2, r0
 800fc44:	460b      	mov	r3, r1
 800fc46:	e7c5      	b.n	800fbd4 <__kernel_rem_pio2+0x56c>
 800fc48:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800fc4c:	f7f0 fb36 	bl	80002bc <__adddf3>
 800fc50:	3401      	adds	r4, #1
 800fc52:	e7ca      	b.n	800fbea <__kernel_rem_pio2+0x582>
 800fc54:	e9da 8900 	ldrd	r8, r9, [sl]
 800fc58:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800fc5c:	9b02      	ldr	r3, [sp, #8]
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	9302      	str	r3, [sp, #8]
 800fc62:	4632      	mov	r2, r6
 800fc64:	463b      	mov	r3, r7
 800fc66:	4640      	mov	r0, r8
 800fc68:	4649      	mov	r1, r9
 800fc6a:	f7f0 fb27 	bl	80002bc <__adddf3>
 800fc6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fc72:	4602      	mov	r2, r0
 800fc74:	460b      	mov	r3, r1
 800fc76:	4640      	mov	r0, r8
 800fc78:	4649      	mov	r1, r9
 800fc7a:	f7f0 fb1d 	bl	80002b8 <__aeabi_dsub>
 800fc7e:	4632      	mov	r2, r6
 800fc80:	463b      	mov	r3, r7
 800fc82:	f7f0 fb1b 	bl	80002bc <__adddf3>
 800fc86:	ed9d 7b08 	vldr	d7, [sp, #32]
 800fc8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fc8e:	ed8a 7b00 	vstr	d7, [sl]
 800fc92:	e76e      	b.n	800fb72 <__kernel_rem_pio2+0x50a>
 800fc94:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fc98:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800fc9c:	4640      	mov	r0, r8
 800fc9e:	4632      	mov	r2, r6
 800fca0:	463b      	mov	r3, r7
 800fca2:	4649      	mov	r1, r9
 800fca4:	f7f0 fb0a 	bl	80002bc <__adddf3>
 800fca8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fcac:	4602      	mov	r2, r0
 800fcae:	460b      	mov	r3, r1
 800fcb0:	4640      	mov	r0, r8
 800fcb2:	4649      	mov	r1, r9
 800fcb4:	f7f0 fb00 	bl	80002b8 <__aeabi_dsub>
 800fcb8:	4632      	mov	r2, r6
 800fcba:	463b      	mov	r3, r7
 800fcbc:	f7f0 fafe 	bl	80002bc <__adddf3>
 800fcc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fcc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fcc8:	ed84 7b00 	vstr	d7, [r4]
 800fccc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fcd0:	e755      	b.n	800fb7e <__kernel_rem_pio2+0x516>
 800fcd2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fcd6:	f7f0 faf1 	bl	80002bc <__adddf3>
 800fcda:	3d01      	subs	r5, #1
 800fcdc:	e759      	b.n	800fb92 <__kernel_rem_pio2+0x52a>
 800fcde:	9b01      	ldr	r3, [sp, #4]
 800fce0:	9a01      	ldr	r2, [sp, #4]
 800fce2:	601d      	str	r5, [r3, #0]
 800fce4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800fce8:	605c      	str	r4, [r3, #4]
 800fcea:	609f      	str	r7, [r3, #8]
 800fcec:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800fcf0:	60d3      	str	r3, [r2, #12]
 800fcf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fcf6:	6110      	str	r0, [r2, #16]
 800fcf8:	6153      	str	r3, [r2, #20]
 800fcfa:	e728      	b.n	800fb4e <__kernel_rem_pio2+0x4e6>
 800fcfc:	41700000 	.word	0x41700000
 800fd00:	3e700000 	.word	0x3e700000
 800fd04:	00000000 	.word	0x00000000

0800fd08 <__kernel_sin>:
 800fd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd0c:	ed2d 8b04 	vpush	{d8-d9}
 800fd10:	eeb0 8a41 	vmov.f32	s16, s2
 800fd14:	eef0 8a61 	vmov.f32	s17, s3
 800fd18:	ec55 4b10 	vmov	r4, r5, d0
 800fd1c:	b083      	sub	sp, #12
 800fd1e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fd22:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fd26:	9001      	str	r0, [sp, #4]
 800fd28:	da06      	bge.n	800fd38 <__kernel_sin+0x30>
 800fd2a:	ee10 0a10 	vmov	r0, s0
 800fd2e:	4629      	mov	r1, r5
 800fd30:	f7f0 ff2a 	bl	8000b88 <__aeabi_d2iz>
 800fd34:	2800      	cmp	r0, #0
 800fd36:	d051      	beq.n	800fddc <__kernel_sin+0xd4>
 800fd38:	4622      	mov	r2, r4
 800fd3a:	462b      	mov	r3, r5
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	4629      	mov	r1, r5
 800fd40:	f7f0 fc72 	bl	8000628 <__aeabi_dmul>
 800fd44:	4682      	mov	sl, r0
 800fd46:	468b      	mov	fp, r1
 800fd48:	4602      	mov	r2, r0
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	4629      	mov	r1, r5
 800fd50:	f7f0 fc6a 	bl	8000628 <__aeabi_dmul>
 800fd54:	a341      	add	r3, pc, #260	; (adr r3, 800fe5c <__kernel_sin+0x154>)
 800fd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5a:	4680      	mov	r8, r0
 800fd5c:	4689      	mov	r9, r1
 800fd5e:	4650      	mov	r0, sl
 800fd60:	4659      	mov	r1, fp
 800fd62:	f7f0 fc61 	bl	8000628 <__aeabi_dmul>
 800fd66:	a33f      	add	r3, pc, #252	; (adr r3, 800fe64 <__kernel_sin+0x15c>)
 800fd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6c:	f7f0 faa4 	bl	80002b8 <__aeabi_dsub>
 800fd70:	4652      	mov	r2, sl
 800fd72:	465b      	mov	r3, fp
 800fd74:	f7f0 fc58 	bl	8000628 <__aeabi_dmul>
 800fd78:	a33c      	add	r3, pc, #240	; (adr r3, 800fe6c <__kernel_sin+0x164>)
 800fd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7e:	f7f0 fa9d 	bl	80002bc <__adddf3>
 800fd82:	4652      	mov	r2, sl
 800fd84:	465b      	mov	r3, fp
 800fd86:	f7f0 fc4f 	bl	8000628 <__aeabi_dmul>
 800fd8a:	a33a      	add	r3, pc, #232	; (adr r3, 800fe74 <__kernel_sin+0x16c>)
 800fd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd90:	f7f0 fa92 	bl	80002b8 <__aeabi_dsub>
 800fd94:	4652      	mov	r2, sl
 800fd96:	465b      	mov	r3, fp
 800fd98:	f7f0 fc46 	bl	8000628 <__aeabi_dmul>
 800fd9c:	a337      	add	r3, pc, #220	; (adr r3, 800fe7c <__kernel_sin+0x174>)
 800fd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda2:	f7f0 fa8b 	bl	80002bc <__adddf3>
 800fda6:	9b01      	ldr	r3, [sp, #4]
 800fda8:	4606      	mov	r6, r0
 800fdaa:	460f      	mov	r7, r1
 800fdac:	b9eb      	cbnz	r3, 800fdea <__kernel_sin+0xe2>
 800fdae:	4602      	mov	r2, r0
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	4650      	mov	r0, sl
 800fdb4:	4659      	mov	r1, fp
 800fdb6:	f7f0 fc37 	bl	8000628 <__aeabi_dmul>
 800fdba:	a325      	add	r3, pc, #148	; (adr r3, 800fe50 <__kernel_sin+0x148>)
 800fdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc0:	f7f0 fa7a 	bl	80002b8 <__aeabi_dsub>
 800fdc4:	4642      	mov	r2, r8
 800fdc6:	464b      	mov	r3, r9
 800fdc8:	f7f0 fc2e 	bl	8000628 <__aeabi_dmul>
 800fdcc:	4602      	mov	r2, r0
 800fdce:	460b      	mov	r3, r1
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	4629      	mov	r1, r5
 800fdd4:	f7f0 fa72 	bl	80002bc <__adddf3>
 800fdd8:	4604      	mov	r4, r0
 800fdda:	460d      	mov	r5, r1
 800fddc:	ec45 4b10 	vmov	d0, r4, r5
 800fde0:	b003      	add	sp, #12
 800fde2:	ecbd 8b04 	vpop	{d8-d9}
 800fde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdea:	4b1b      	ldr	r3, [pc, #108]	; (800fe58 <__kernel_sin+0x150>)
 800fdec:	ec51 0b18 	vmov	r0, r1, d8
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	f7f0 fc19 	bl	8000628 <__aeabi_dmul>
 800fdf6:	4632      	mov	r2, r6
 800fdf8:	ec41 0b19 	vmov	d9, r0, r1
 800fdfc:	463b      	mov	r3, r7
 800fdfe:	4640      	mov	r0, r8
 800fe00:	4649      	mov	r1, r9
 800fe02:	f7f0 fc11 	bl	8000628 <__aeabi_dmul>
 800fe06:	4602      	mov	r2, r0
 800fe08:	460b      	mov	r3, r1
 800fe0a:	ec51 0b19 	vmov	r0, r1, d9
 800fe0e:	f7f0 fa53 	bl	80002b8 <__aeabi_dsub>
 800fe12:	4652      	mov	r2, sl
 800fe14:	465b      	mov	r3, fp
 800fe16:	f7f0 fc07 	bl	8000628 <__aeabi_dmul>
 800fe1a:	ec53 2b18 	vmov	r2, r3, d8
 800fe1e:	f7f0 fa4b 	bl	80002b8 <__aeabi_dsub>
 800fe22:	a30b      	add	r3, pc, #44	; (adr r3, 800fe50 <__kernel_sin+0x148>)
 800fe24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe28:	4606      	mov	r6, r0
 800fe2a:	460f      	mov	r7, r1
 800fe2c:	4640      	mov	r0, r8
 800fe2e:	4649      	mov	r1, r9
 800fe30:	f7f0 fbfa 	bl	8000628 <__aeabi_dmul>
 800fe34:	4602      	mov	r2, r0
 800fe36:	460b      	mov	r3, r1
 800fe38:	4630      	mov	r0, r6
 800fe3a:	4639      	mov	r1, r7
 800fe3c:	f7f0 fa3e 	bl	80002bc <__adddf3>
 800fe40:	4602      	mov	r2, r0
 800fe42:	460b      	mov	r3, r1
 800fe44:	4620      	mov	r0, r4
 800fe46:	4629      	mov	r1, r5
 800fe48:	f7f0 fa36 	bl	80002b8 <__aeabi_dsub>
 800fe4c:	e7c4      	b.n	800fdd8 <__kernel_sin+0xd0>
 800fe4e:	bf00      	nop
 800fe50:	55555549 	.word	0x55555549
 800fe54:	3fc55555 	.word	0x3fc55555
 800fe58:	3fe00000 	.word	0x3fe00000
 800fe5c:	5acfd57c 	.word	0x5acfd57c
 800fe60:	3de5d93a 	.word	0x3de5d93a
 800fe64:	8a2b9ceb 	.word	0x8a2b9ceb
 800fe68:	3e5ae5e6 	.word	0x3e5ae5e6
 800fe6c:	57b1fe7d 	.word	0x57b1fe7d
 800fe70:	3ec71de3 	.word	0x3ec71de3
 800fe74:	19c161d5 	.word	0x19c161d5
 800fe78:	3f2a01a0 	.word	0x3f2a01a0
 800fe7c:	1110f8a6 	.word	0x1110f8a6
 800fe80:	3f811111 	.word	0x3f811111

0800fe84 <with_errno>:
 800fe84:	b570      	push	{r4, r5, r6, lr}
 800fe86:	4604      	mov	r4, r0
 800fe88:	460d      	mov	r5, r1
 800fe8a:	4616      	mov	r6, r2
 800fe8c:	f7fa fa6e 	bl	800a36c <__errno>
 800fe90:	4629      	mov	r1, r5
 800fe92:	6006      	str	r6, [r0, #0]
 800fe94:	4620      	mov	r0, r4
 800fe96:	bd70      	pop	{r4, r5, r6, pc}

0800fe98 <xflow>:
 800fe98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe9a:	4614      	mov	r4, r2
 800fe9c:	461d      	mov	r5, r3
 800fe9e:	b108      	cbz	r0, 800fea4 <xflow+0xc>
 800fea0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fea4:	e9cd 2300 	strd	r2, r3, [sp]
 800fea8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800feac:	4620      	mov	r0, r4
 800feae:	4629      	mov	r1, r5
 800feb0:	f7f0 fbba 	bl	8000628 <__aeabi_dmul>
 800feb4:	2222      	movs	r2, #34	; 0x22
 800feb6:	b003      	add	sp, #12
 800feb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800febc:	f7ff bfe2 	b.w	800fe84 <with_errno>

0800fec0 <__math_uflow>:
 800fec0:	b508      	push	{r3, lr}
 800fec2:	2200      	movs	r2, #0
 800fec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fec8:	f7ff ffe6 	bl	800fe98 <xflow>
 800fecc:	ec41 0b10 	vmov	d0, r0, r1
 800fed0:	bd08      	pop	{r3, pc}

0800fed2 <__math_oflow>:
 800fed2:	b508      	push	{r3, lr}
 800fed4:	2200      	movs	r2, #0
 800fed6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800feda:	f7ff ffdd 	bl	800fe98 <xflow>
 800fede:	ec41 0b10 	vmov	d0, r0, r1
 800fee2:	bd08      	pop	{r3, pc}
 800fee4:	0000      	movs	r0, r0
	...

0800fee8 <atan>:
 800fee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feec:	ec55 4b10 	vmov	r4, r5, d0
 800fef0:	4bc3      	ldr	r3, [pc, #780]	; (8010200 <atan+0x318>)
 800fef2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fef6:	429e      	cmp	r6, r3
 800fef8:	46ab      	mov	fp, r5
 800fefa:	dd18      	ble.n	800ff2e <atan+0x46>
 800fefc:	4bc1      	ldr	r3, [pc, #772]	; (8010204 <atan+0x31c>)
 800fefe:	429e      	cmp	r6, r3
 800ff00:	dc01      	bgt.n	800ff06 <atan+0x1e>
 800ff02:	d109      	bne.n	800ff18 <atan+0x30>
 800ff04:	b144      	cbz	r4, 800ff18 <atan+0x30>
 800ff06:	4622      	mov	r2, r4
 800ff08:	462b      	mov	r3, r5
 800ff0a:	4620      	mov	r0, r4
 800ff0c:	4629      	mov	r1, r5
 800ff0e:	f7f0 f9d5 	bl	80002bc <__adddf3>
 800ff12:	4604      	mov	r4, r0
 800ff14:	460d      	mov	r5, r1
 800ff16:	e006      	b.n	800ff26 <atan+0x3e>
 800ff18:	f1bb 0f00 	cmp.w	fp, #0
 800ff1c:	f300 8131 	bgt.w	8010182 <atan+0x29a>
 800ff20:	a59b      	add	r5, pc, #620	; (adr r5, 8010190 <atan+0x2a8>)
 800ff22:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ff26:	ec45 4b10 	vmov	d0, r4, r5
 800ff2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff2e:	4bb6      	ldr	r3, [pc, #728]	; (8010208 <atan+0x320>)
 800ff30:	429e      	cmp	r6, r3
 800ff32:	dc14      	bgt.n	800ff5e <atan+0x76>
 800ff34:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ff38:	429e      	cmp	r6, r3
 800ff3a:	dc0d      	bgt.n	800ff58 <atan+0x70>
 800ff3c:	a396      	add	r3, pc, #600	; (adr r3, 8010198 <atan+0x2b0>)
 800ff3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff42:	ee10 0a10 	vmov	r0, s0
 800ff46:	4629      	mov	r1, r5
 800ff48:	f7f0 f9b8 	bl	80002bc <__adddf3>
 800ff4c:	4baf      	ldr	r3, [pc, #700]	; (801020c <atan+0x324>)
 800ff4e:	2200      	movs	r2, #0
 800ff50:	f7f0 fdfa 	bl	8000b48 <__aeabi_dcmpgt>
 800ff54:	2800      	cmp	r0, #0
 800ff56:	d1e6      	bne.n	800ff26 <atan+0x3e>
 800ff58:	f04f 3aff 	mov.w	sl, #4294967295
 800ff5c:	e02b      	b.n	800ffb6 <atan+0xce>
 800ff5e:	f000 f963 	bl	8010228 <fabs>
 800ff62:	4bab      	ldr	r3, [pc, #684]	; (8010210 <atan+0x328>)
 800ff64:	429e      	cmp	r6, r3
 800ff66:	ec55 4b10 	vmov	r4, r5, d0
 800ff6a:	f300 80bf 	bgt.w	80100ec <atan+0x204>
 800ff6e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ff72:	429e      	cmp	r6, r3
 800ff74:	f300 80a0 	bgt.w	80100b8 <atan+0x1d0>
 800ff78:	ee10 2a10 	vmov	r2, s0
 800ff7c:	ee10 0a10 	vmov	r0, s0
 800ff80:	462b      	mov	r3, r5
 800ff82:	4629      	mov	r1, r5
 800ff84:	f7f0 f99a 	bl	80002bc <__adddf3>
 800ff88:	4ba0      	ldr	r3, [pc, #640]	; (801020c <atan+0x324>)
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	f7f0 f994 	bl	80002b8 <__aeabi_dsub>
 800ff90:	2200      	movs	r2, #0
 800ff92:	4606      	mov	r6, r0
 800ff94:	460f      	mov	r7, r1
 800ff96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	4629      	mov	r1, r5
 800ff9e:	f7f0 f98d 	bl	80002bc <__adddf3>
 800ffa2:	4602      	mov	r2, r0
 800ffa4:	460b      	mov	r3, r1
 800ffa6:	4630      	mov	r0, r6
 800ffa8:	4639      	mov	r1, r7
 800ffaa:	f7f0 fc67 	bl	800087c <__aeabi_ddiv>
 800ffae:	f04f 0a00 	mov.w	sl, #0
 800ffb2:	4604      	mov	r4, r0
 800ffb4:	460d      	mov	r5, r1
 800ffb6:	4622      	mov	r2, r4
 800ffb8:	462b      	mov	r3, r5
 800ffba:	4620      	mov	r0, r4
 800ffbc:	4629      	mov	r1, r5
 800ffbe:	f7f0 fb33 	bl	8000628 <__aeabi_dmul>
 800ffc2:	4602      	mov	r2, r0
 800ffc4:	460b      	mov	r3, r1
 800ffc6:	4680      	mov	r8, r0
 800ffc8:	4689      	mov	r9, r1
 800ffca:	f7f0 fb2d 	bl	8000628 <__aeabi_dmul>
 800ffce:	a374      	add	r3, pc, #464	; (adr r3, 80101a0 <atan+0x2b8>)
 800ffd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd4:	4606      	mov	r6, r0
 800ffd6:	460f      	mov	r7, r1
 800ffd8:	f7f0 fb26 	bl	8000628 <__aeabi_dmul>
 800ffdc:	a372      	add	r3, pc, #456	; (adr r3, 80101a8 <atan+0x2c0>)
 800ffde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe2:	f7f0 f96b 	bl	80002bc <__adddf3>
 800ffe6:	4632      	mov	r2, r6
 800ffe8:	463b      	mov	r3, r7
 800ffea:	f7f0 fb1d 	bl	8000628 <__aeabi_dmul>
 800ffee:	a370      	add	r3, pc, #448	; (adr r3, 80101b0 <atan+0x2c8>)
 800fff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff4:	f7f0 f962 	bl	80002bc <__adddf3>
 800fff8:	4632      	mov	r2, r6
 800fffa:	463b      	mov	r3, r7
 800fffc:	f7f0 fb14 	bl	8000628 <__aeabi_dmul>
 8010000:	a36d      	add	r3, pc, #436	; (adr r3, 80101b8 <atan+0x2d0>)
 8010002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010006:	f7f0 f959 	bl	80002bc <__adddf3>
 801000a:	4632      	mov	r2, r6
 801000c:	463b      	mov	r3, r7
 801000e:	f7f0 fb0b 	bl	8000628 <__aeabi_dmul>
 8010012:	a36b      	add	r3, pc, #428	; (adr r3, 80101c0 <atan+0x2d8>)
 8010014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010018:	f7f0 f950 	bl	80002bc <__adddf3>
 801001c:	4632      	mov	r2, r6
 801001e:	463b      	mov	r3, r7
 8010020:	f7f0 fb02 	bl	8000628 <__aeabi_dmul>
 8010024:	a368      	add	r3, pc, #416	; (adr r3, 80101c8 <atan+0x2e0>)
 8010026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002a:	f7f0 f947 	bl	80002bc <__adddf3>
 801002e:	4642      	mov	r2, r8
 8010030:	464b      	mov	r3, r9
 8010032:	f7f0 faf9 	bl	8000628 <__aeabi_dmul>
 8010036:	a366      	add	r3, pc, #408	; (adr r3, 80101d0 <atan+0x2e8>)
 8010038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003c:	4680      	mov	r8, r0
 801003e:	4689      	mov	r9, r1
 8010040:	4630      	mov	r0, r6
 8010042:	4639      	mov	r1, r7
 8010044:	f7f0 faf0 	bl	8000628 <__aeabi_dmul>
 8010048:	a363      	add	r3, pc, #396	; (adr r3, 80101d8 <atan+0x2f0>)
 801004a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004e:	f7f0 f933 	bl	80002b8 <__aeabi_dsub>
 8010052:	4632      	mov	r2, r6
 8010054:	463b      	mov	r3, r7
 8010056:	f7f0 fae7 	bl	8000628 <__aeabi_dmul>
 801005a:	a361      	add	r3, pc, #388	; (adr r3, 80101e0 <atan+0x2f8>)
 801005c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010060:	f7f0 f92a 	bl	80002b8 <__aeabi_dsub>
 8010064:	4632      	mov	r2, r6
 8010066:	463b      	mov	r3, r7
 8010068:	f7f0 fade 	bl	8000628 <__aeabi_dmul>
 801006c:	a35e      	add	r3, pc, #376	; (adr r3, 80101e8 <atan+0x300>)
 801006e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010072:	f7f0 f921 	bl	80002b8 <__aeabi_dsub>
 8010076:	4632      	mov	r2, r6
 8010078:	463b      	mov	r3, r7
 801007a:	f7f0 fad5 	bl	8000628 <__aeabi_dmul>
 801007e:	a35c      	add	r3, pc, #368	; (adr r3, 80101f0 <atan+0x308>)
 8010080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010084:	f7f0 f918 	bl	80002b8 <__aeabi_dsub>
 8010088:	4632      	mov	r2, r6
 801008a:	463b      	mov	r3, r7
 801008c:	f7f0 facc 	bl	8000628 <__aeabi_dmul>
 8010090:	4602      	mov	r2, r0
 8010092:	460b      	mov	r3, r1
 8010094:	4640      	mov	r0, r8
 8010096:	4649      	mov	r1, r9
 8010098:	f7f0 f910 	bl	80002bc <__adddf3>
 801009c:	4622      	mov	r2, r4
 801009e:	462b      	mov	r3, r5
 80100a0:	f7f0 fac2 	bl	8000628 <__aeabi_dmul>
 80100a4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80100a8:	4602      	mov	r2, r0
 80100aa:	460b      	mov	r3, r1
 80100ac:	d14b      	bne.n	8010146 <atan+0x25e>
 80100ae:	4620      	mov	r0, r4
 80100b0:	4629      	mov	r1, r5
 80100b2:	f7f0 f901 	bl	80002b8 <__aeabi_dsub>
 80100b6:	e72c      	b.n	800ff12 <atan+0x2a>
 80100b8:	ee10 0a10 	vmov	r0, s0
 80100bc:	4b53      	ldr	r3, [pc, #332]	; (801020c <atan+0x324>)
 80100be:	2200      	movs	r2, #0
 80100c0:	4629      	mov	r1, r5
 80100c2:	f7f0 f8f9 	bl	80002b8 <__aeabi_dsub>
 80100c6:	4b51      	ldr	r3, [pc, #324]	; (801020c <atan+0x324>)
 80100c8:	4606      	mov	r6, r0
 80100ca:	460f      	mov	r7, r1
 80100cc:	2200      	movs	r2, #0
 80100ce:	4620      	mov	r0, r4
 80100d0:	4629      	mov	r1, r5
 80100d2:	f7f0 f8f3 	bl	80002bc <__adddf3>
 80100d6:	4602      	mov	r2, r0
 80100d8:	460b      	mov	r3, r1
 80100da:	4630      	mov	r0, r6
 80100dc:	4639      	mov	r1, r7
 80100de:	f7f0 fbcd 	bl	800087c <__aeabi_ddiv>
 80100e2:	f04f 0a01 	mov.w	sl, #1
 80100e6:	4604      	mov	r4, r0
 80100e8:	460d      	mov	r5, r1
 80100ea:	e764      	b.n	800ffb6 <atan+0xce>
 80100ec:	4b49      	ldr	r3, [pc, #292]	; (8010214 <atan+0x32c>)
 80100ee:	429e      	cmp	r6, r3
 80100f0:	da1d      	bge.n	801012e <atan+0x246>
 80100f2:	ee10 0a10 	vmov	r0, s0
 80100f6:	4b48      	ldr	r3, [pc, #288]	; (8010218 <atan+0x330>)
 80100f8:	2200      	movs	r2, #0
 80100fa:	4629      	mov	r1, r5
 80100fc:	f7f0 f8dc 	bl	80002b8 <__aeabi_dsub>
 8010100:	4b45      	ldr	r3, [pc, #276]	; (8010218 <atan+0x330>)
 8010102:	4606      	mov	r6, r0
 8010104:	460f      	mov	r7, r1
 8010106:	2200      	movs	r2, #0
 8010108:	4620      	mov	r0, r4
 801010a:	4629      	mov	r1, r5
 801010c:	f7f0 fa8c 	bl	8000628 <__aeabi_dmul>
 8010110:	4b3e      	ldr	r3, [pc, #248]	; (801020c <atan+0x324>)
 8010112:	2200      	movs	r2, #0
 8010114:	f7f0 f8d2 	bl	80002bc <__adddf3>
 8010118:	4602      	mov	r2, r0
 801011a:	460b      	mov	r3, r1
 801011c:	4630      	mov	r0, r6
 801011e:	4639      	mov	r1, r7
 8010120:	f7f0 fbac 	bl	800087c <__aeabi_ddiv>
 8010124:	f04f 0a02 	mov.w	sl, #2
 8010128:	4604      	mov	r4, r0
 801012a:	460d      	mov	r5, r1
 801012c:	e743      	b.n	800ffb6 <atan+0xce>
 801012e:	462b      	mov	r3, r5
 8010130:	ee10 2a10 	vmov	r2, s0
 8010134:	4939      	ldr	r1, [pc, #228]	; (801021c <atan+0x334>)
 8010136:	2000      	movs	r0, #0
 8010138:	f7f0 fba0 	bl	800087c <__aeabi_ddiv>
 801013c:	f04f 0a03 	mov.w	sl, #3
 8010140:	4604      	mov	r4, r0
 8010142:	460d      	mov	r5, r1
 8010144:	e737      	b.n	800ffb6 <atan+0xce>
 8010146:	4b36      	ldr	r3, [pc, #216]	; (8010220 <atan+0x338>)
 8010148:	4e36      	ldr	r6, [pc, #216]	; (8010224 <atan+0x33c>)
 801014a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801014e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8010152:	e9da 2300 	ldrd	r2, r3, [sl]
 8010156:	f7f0 f8af 	bl	80002b8 <__aeabi_dsub>
 801015a:	4622      	mov	r2, r4
 801015c:	462b      	mov	r3, r5
 801015e:	f7f0 f8ab 	bl	80002b8 <__aeabi_dsub>
 8010162:	4602      	mov	r2, r0
 8010164:	460b      	mov	r3, r1
 8010166:	e9d6 0100 	ldrd	r0, r1, [r6]
 801016a:	f7f0 f8a5 	bl	80002b8 <__aeabi_dsub>
 801016e:	f1bb 0f00 	cmp.w	fp, #0
 8010172:	4604      	mov	r4, r0
 8010174:	460d      	mov	r5, r1
 8010176:	f6bf aed6 	bge.w	800ff26 <atan+0x3e>
 801017a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801017e:	461d      	mov	r5, r3
 8010180:	e6d1      	b.n	800ff26 <atan+0x3e>
 8010182:	a51d      	add	r5, pc, #116	; (adr r5, 80101f8 <atan+0x310>)
 8010184:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010188:	e6cd      	b.n	800ff26 <atan+0x3e>
 801018a:	bf00      	nop
 801018c:	f3af 8000 	nop.w
 8010190:	54442d18 	.word	0x54442d18
 8010194:	bff921fb 	.word	0xbff921fb
 8010198:	8800759c 	.word	0x8800759c
 801019c:	7e37e43c 	.word	0x7e37e43c
 80101a0:	e322da11 	.word	0xe322da11
 80101a4:	3f90ad3a 	.word	0x3f90ad3a
 80101a8:	24760deb 	.word	0x24760deb
 80101ac:	3fa97b4b 	.word	0x3fa97b4b
 80101b0:	a0d03d51 	.word	0xa0d03d51
 80101b4:	3fb10d66 	.word	0x3fb10d66
 80101b8:	c54c206e 	.word	0xc54c206e
 80101bc:	3fb745cd 	.word	0x3fb745cd
 80101c0:	920083ff 	.word	0x920083ff
 80101c4:	3fc24924 	.word	0x3fc24924
 80101c8:	5555550d 	.word	0x5555550d
 80101cc:	3fd55555 	.word	0x3fd55555
 80101d0:	2c6a6c2f 	.word	0x2c6a6c2f
 80101d4:	bfa2b444 	.word	0xbfa2b444
 80101d8:	52defd9a 	.word	0x52defd9a
 80101dc:	3fadde2d 	.word	0x3fadde2d
 80101e0:	af749a6d 	.word	0xaf749a6d
 80101e4:	3fb3b0f2 	.word	0x3fb3b0f2
 80101e8:	fe231671 	.word	0xfe231671
 80101ec:	3fbc71c6 	.word	0x3fbc71c6
 80101f0:	9998ebc4 	.word	0x9998ebc4
 80101f4:	3fc99999 	.word	0x3fc99999
 80101f8:	54442d18 	.word	0x54442d18
 80101fc:	3ff921fb 	.word	0x3ff921fb
 8010200:	440fffff 	.word	0x440fffff
 8010204:	7ff00000 	.word	0x7ff00000
 8010208:	3fdbffff 	.word	0x3fdbffff
 801020c:	3ff00000 	.word	0x3ff00000
 8010210:	3ff2ffff 	.word	0x3ff2ffff
 8010214:	40038000 	.word	0x40038000
 8010218:	3ff80000 	.word	0x3ff80000
 801021c:	bff00000 	.word	0xbff00000
 8010220:	08011048 	.word	0x08011048
 8010224:	08011028 	.word	0x08011028

08010228 <fabs>:
 8010228:	ec51 0b10 	vmov	r0, r1, d0
 801022c:	ee10 2a10 	vmov	r2, s0
 8010230:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010234:	ec43 2b10 	vmov	d0, r2, r3
 8010238:	4770      	bx	lr

0801023a <finite>:
 801023a:	b082      	sub	sp, #8
 801023c:	ed8d 0b00 	vstr	d0, [sp]
 8010240:	9801      	ldr	r0, [sp, #4]
 8010242:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010246:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801024a:	0fc0      	lsrs	r0, r0, #31
 801024c:	b002      	add	sp, #8
 801024e:	4770      	bx	lr

08010250 <floor>:
 8010250:	ec51 0b10 	vmov	r0, r1, d0
 8010254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010258:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801025c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010260:	2e13      	cmp	r6, #19
 8010262:	ee10 5a10 	vmov	r5, s0
 8010266:	ee10 8a10 	vmov	r8, s0
 801026a:	460c      	mov	r4, r1
 801026c:	dc32      	bgt.n	80102d4 <floor+0x84>
 801026e:	2e00      	cmp	r6, #0
 8010270:	da14      	bge.n	801029c <floor+0x4c>
 8010272:	a333      	add	r3, pc, #204	; (adr r3, 8010340 <floor+0xf0>)
 8010274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010278:	f7f0 f820 	bl	80002bc <__adddf3>
 801027c:	2200      	movs	r2, #0
 801027e:	2300      	movs	r3, #0
 8010280:	f7f0 fc62 	bl	8000b48 <__aeabi_dcmpgt>
 8010284:	b138      	cbz	r0, 8010296 <floor+0x46>
 8010286:	2c00      	cmp	r4, #0
 8010288:	da57      	bge.n	801033a <floor+0xea>
 801028a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801028e:	431d      	orrs	r5, r3
 8010290:	d001      	beq.n	8010296 <floor+0x46>
 8010292:	4c2d      	ldr	r4, [pc, #180]	; (8010348 <floor+0xf8>)
 8010294:	2500      	movs	r5, #0
 8010296:	4621      	mov	r1, r4
 8010298:	4628      	mov	r0, r5
 801029a:	e025      	b.n	80102e8 <floor+0x98>
 801029c:	4f2b      	ldr	r7, [pc, #172]	; (801034c <floor+0xfc>)
 801029e:	4137      	asrs	r7, r6
 80102a0:	ea01 0307 	and.w	r3, r1, r7
 80102a4:	4303      	orrs	r3, r0
 80102a6:	d01f      	beq.n	80102e8 <floor+0x98>
 80102a8:	a325      	add	r3, pc, #148	; (adr r3, 8010340 <floor+0xf0>)
 80102aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ae:	f7f0 f805 	bl	80002bc <__adddf3>
 80102b2:	2200      	movs	r2, #0
 80102b4:	2300      	movs	r3, #0
 80102b6:	f7f0 fc47 	bl	8000b48 <__aeabi_dcmpgt>
 80102ba:	2800      	cmp	r0, #0
 80102bc:	d0eb      	beq.n	8010296 <floor+0x46>
 80102be:	2c00      	cmp	r4, #0
 80102c0:	bfbe      	ittt	lt
 80102c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80102c6:	fa43 f606 	asrlt.w	r6, r3, r6
 80102ca:	19a4      	addlt	r4, r4, r6
 80102cc:	ea24 0407 	bic.w	r4, r4, r7
 80102d0:	2500      	movs	r5, #0
 80102d2:	e7e0      	b.n	8010296 <floor+0x46>
 80102d4:	2e33      	cmp	r6, #51	; 0x33
 80102d6:	dd0b      	ble.n	80102f0 <floor+0xa0>
 80102d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80102dc:	d104      	bne.n	80102e8 <floor+0x98>
 80102de:	ee10 2a10 	vmov	r2, s0
 80102e2:	460b      	mov	r3, r1
 80102e4:	f7ef ffea 	bl	80002bc <__adddf3>
 80102e8:	ec41 0b10 	vmov	d0, r0, r1
 80102ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102f0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80102f4:	f04f 33ff 	mov.w	r3, #4294967295
 80102f8:	fa23 f707 	lsr.w	r7, r3, r7
 80102fc:	4207      	tst	r7, r0
 80102fe:	d0f3      	beq.n	80102e8 <floor+0x98>
 8010300:	a30f      	add	r3, pc, #60	; (adr r3, 8010340 <floor+0xf0>)
 8010302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010306:	f7ef ffd9 	bl	80002bc <__adddf3>
 801030a:	2200      	movs	r2, #0
 801030c:	2300      	movs	r3, #0
 801030e:	f7f0 fc1b 	bl	8000b48 <__aeabi_dcmpgt>
 8010312:	2800      	cmp	r0, #0
 8010314:	d0bf      	beq.n	8010296 <floor+0x46>
 8010316:	2c00      	cmp	r4, #0
 8010318:	da02      	bge.n	8010320 <floor+0xd0>
 801031a:	2e14      	cmp	r6, #20
 801031c:	d103      	bne.n	8010326 <floor+0xd6>
 801031e:	3401      	adds	r4, #1
 8010320:	ea25 0507 	bic.w	r5, r5, r7
 8010324:	e7b7      	b.n	8010296 <floor+0x46>
 8010326:	2301      	movs	r3, #1
 8010328:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801032c:	fa03 f606 	lsl.w	r6, r3, r6
 8010330:	4435      	add	r5, r6
 8010332:	4545      	cmp	r5, r8
 8010334:	bf38      	it	cc
 8010336:	18e4      	addcc	r4, r4, r3
 8010338:	e7f2      	b.n	8010320 <floor+0xd0>
 801033a:	2500      	movs	r5, #0
 801033c:	462c      	mov	r4, r5
 801033e:	e7aa      	b.n	8010296 <floor+0x46>
 8010340:	8800759c 	.word	0x8800759c
 8010344:	7e37e43c 	.word	0x7e37e43c
 8010348:	bff00000 	.word	0xbff00000
 801034c:	000fffff 	.word	0x000fffff

08010350 <nan>:
 8010350:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010358 <nan+0x8>
 8010354:	4770      	bx	lr
 8010356:	bf00      	nop
 8010358:	00000000 	.word	0x00000000
 801035c:	7ff80000 	.word	0x7ff80000

08010360 <scalbn>:
 8010360:	b570      	push	{r4, r5, r6, lr}
 8010362:	ec55 4b10 	vmov	r4, r5, d0
 8010366:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801036a:	4606      	mov	r6, r0
 801036c:	462b      	mov	r3, r5
 801036e:	b99a      	cbnz	r2, 8010398 <scalbn+0x38>
 8010370:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010374:	4323      	orrs	r3, r4
 8010376:	d036      	beq.n	80103e6 <scalbn+0x86>
 8010378:	4b39      	ldr	r3, [pc, #228]	; (8010460 <scalbn+0x100>)
 801037a:	4629      	mov	r1, r5
 801037c:	ee10 0a10 	vmov	r0, s0
 8010380:	2200      	movs	r2, #0
 8010382:	f7f0 f951 	bl	8000628 <__aeabi_dmul>
 8010386:	4b37      	ldr	r3, [pc, #220]	; (8010464 <scalbn+0x104>)
 8010388:	429e      	cmp	r6, r3
 801038a:	4604      	mov	r4, r0
 801038c:	460d      	mov	r5, r1
 801038e:	da10      	bge.n	80103b2 <scalbn+0x52>
 8010390:	a32b      	add	r3, pc, #172	; (adr r3, 8010440 <scalbn+0xe0>)
 8010392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010396:	e03a      	b.n	801040e <scalbn+0xae>
 8010398:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801039c:	428a      	cmp	r2, r1
 801039e:	d10c      	bne.n	80103ba <scalbn+0x5a>
 80103a0:	ee10 2a10 	vmov	r2, s0
 80103a4:	4620      	mov	r0, r4
 80103a6:	4629      	mov	r1, r5
 80103a8:	f7ef ff88 	bl	80002bc <__adddf3>
 80103ac:	4604      	mov	r4, r0
 80103ae:	460d      	mov	r5, r1
 80103b0:	e019      	b.n	80103e6 <scalbn+0x86>
 80103b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80103b6:	460b      	mov	r3, r1
 80103b8:	3a36      	subs	r2, #54	; 0x36
 80103ba:	4432      	add	r2, r6
 80103bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80103c0:	428a      	cmp	r2, r1
 80103c2:	dd08      	ble.n	80103d6 <scalbn+0x76>
 80103c4:	2d00      	cmp	r5, #0
 80103c6:	a120      	add	r1, pc, #128	; (adr r1, 8010448 <scalbn+0xe8>)
 80103c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103cc:	da1c      	bge.n	8010408 <scalbn+0xa8>
 80103ce:	a120      	add	r1, pc, #128	; (adr r1, 8010450 <scalbn+0xf0>)
 80103d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103d4:	e018      	b.n	8010408 <scalbn+0xa8>
 80103d6:	2a00      	cmp	r2, #0
 80103d8:	dd08      	ble.n	80103ec <scalbn+0x8c>
 80103da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80103de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80103e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80103e6:	ec45 4b10 	vmov	d0, r4, r5
 80103ea:	bd70      	pop	{r4, r5, r6, pc}
 80103ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80103f0:	da19      	bge.n	8010426 <scalbn+0xc6>
 80103f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80103f6:	429e      	cmp	r6, r3
 80103f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80103fc:	dd0a      	ble.n	8010414 <scalbn+0xb4>
 80103fe:	a112      	add	r1, pc, #72	; (adr r1, 8010448 <scalbn+0xe8>)
 8010400:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d1e2      	bne.n	80103ce <scalbn+0x6e>
 8010408:	a30f      	add	r3, pc, #60	; (adr r3, 8010448 <scalbn+0xe8>)
 801040a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040e:	f7f0 f90b 	bl	8000628 <__aeabi_dmul>
 8010412:	e7cb      	b.n	80103ac <scalbn+0x4c>
 8010414:	a10a      	add	r1, pc, #40	; (adr r1, 8010440 <scalbn+0xe0>)
 8010416:	e9d1 0100 	ldrd	r0, r1, [r1]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d0b8      	beq.n	8010390 <scalbn+0x30>
 801041e:	a10e      	add	r1, pc, #56	; (adr r1, 8010458 <scalbn+0xf8>)
 8010420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010424:	e7b4      	b.n	8010390 <scalbn+0x30>
 8010426:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801042a:	3236      	adds	r2, #54	; 0x36
 801042c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010430:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010434:	4620      	mov	r0, r4
 8010436:	4b0c      	ldr	r3, [pc, #48]	; (8010468 <scalbn+0x108>)
 8010438:	2200      	movs	r2, #0
 801043a:	e7e8      	b.n	801040e <scalbn+0xae>
 801043c:	f3af 8000 	nop.w
 8010440:	c2f8f359 	.word	0xc2f8f359
 8010444:	01a56e1f 	.word	0x01a56e1f
 8010448:	8800759c 	.word	0x8800759c
 801044c:	7e37e43c 	.word	0x7e37e43c
 8010450:	8800759c 	.word	0x8800759c
 8010454:	fe37e43c 	.word	0xfe37e43c
 8010458:	c2f8f359 	.word	0xc2f8f359
 801045c:	81a56e1f 	.word	0x81a56e1f
 8010460:	43500000 	.word	0x43500000
 8010464:	ffff3cb0 	.word	0xffff3cb0
 8010468:	3c900000 	.word	0x3c900000

0801046c <_sbrk>:
 801046c:	4a04      	ldr	r2, [pc, #16]	; (8010480 <_sbrk+0x14>)
 801046e:	6811      	ldr	r1, [r2, #0]
 8010470:	4603      	mov	r3, r0
 8010472:	b909      	cbnz	r1, 8010478 <_sbrk+0xc>
 8010474:	4903      	ldr	r1, [pc, #12]	; (8010484 <_sbrk+0x18>)
 8010476:	6011      	str	r1, [r2, #0]
 8010478:	6810      	ldr	r0, [r2, #0]
 801047a:	4403      	add	r3, r0
 801047c:	6013      	str	r3, [r2, #0]
 801047e:	4770      	bx	lr
 8010480:	2001228c 	.word	0x2001228c
 8010484:	20012290 	.word	0x20012290

08010488 <_init>:
 8010488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801048a:	bf00      	nop
 801048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801048e:	bc08      	pop	{r3}
 8010490:	469e      	mov	lr, r3
 8010492:	4770      	bx	lr

08010494 <_fini>:
 8010494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010496:	bf00      	nop
 8010498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801049a:	bc08      	pop	{r3}
 801049c:	469e      	mov	lr, r3
 801049e:	4770      	bx	lr
