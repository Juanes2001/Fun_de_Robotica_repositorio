
noFree_Oppy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b8  0800d028  0800d028  0001d028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8e0  0800d8e0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d8e0  0800d8e0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d8e0  0800d8e0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8e0  0800d8e0  0001d8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8e4  0800d8e4  0001d8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d8e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  200001e0  0800dac8  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  0800dac8  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000774b  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016db  00000000  00000000  0002795b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00029038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  000296f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011164  00000000  00000000  00029cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008813  00000000  00000000  0003ae54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058fe7  00000000  00000000  00043667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009c64e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003404  00000000  00000000  0009c6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d010 	.word	0x0800d010

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800d010 	.word	0x0800d010

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder

int main(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b08d      	sub	sp, #52	; 0x34
 8000cbc:	af08      	add	r7, sp, #32

	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000cbe:	4b8b      	ldr	r3, [pc, #556]	; (8000eec <main+0x234>)
 8000cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc4:	4a89      	ldr	r2, [pc, #548]	; (8000eec <main+0x234>)
 8000cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC_enableMaxFrequencies(RCC_100MHz); // Velocidad maxima del MCU
 8000cce:	2008      	movs	r0, #8
 8000cd0:	f005 f8d0 	bl	8005e74 <RCC_enableMaxFrequencies>
	inSystem (); // Configuracion global de los perifericos
 8000cd4:	f000 f934 	bl	8000f40 <inSystem>

	//Calculamos el setpoint en la que queremos que el robot controle la velocidad de cada motor
	velSetPoint = (0.00169*fixed_dutty + 0.0619);
 8000cd8:	4b85      	ldr	r3, [pc, #532]	; (8000ef0 <main+0x238>)
 8000cda:	4a86      	ldr	r2, [pc, #536]	; (8000ef4 <main+0x23c>)
 8000cdc:	601a      	str	r2, [r3, #0]

	// calibramos el Giroscopio para que tengamos una medida de error controlable
	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z); // Calibramos el giroscopio que usaremos
 8000cde:	2102      	movs	r1, #2
 8000ce0:	4885      	ldr	r0, [pc, #532]	; (8000ef8 <main+0x240>)
 8000ce2:	f000 fd55 	bl	8001790 <calibracionGyros>
 8000ce6:	ee10 3a10 	vmov	r3, s0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fc44 	bl	8000578 <__aeabi_f2d>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4981      	ldr	r1, [pc, #516]	; (8000efc <main+0x244>)
 8000cf6:	e9c1 2300 	strd	r2, r3, [r1]

	double angleToGo_Relative = 0;
 8000cfa:	f04f 0200 	mov.w	r2, #0
 8000cfe:	f04f 0300 	mov.w	r3, #0
 8000d02:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double angle_start = 0;
 8000d06:	f04f 0200 	mov.w	r2, #0
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	e9c7 2300 	strd	r2, r3, [r7]

    /* Loop forever */
	while(1){

		fillComand();
 8000d12:	f001 fff9 	bl	8002d08 <fillComand>

		// En esta parte ya usamos las medidas halladas para mover el robot en linea recta dependiendo de la operacion y el comando deseado
		if (flag_Go_Straigh){
 8000d16:	4b7a      	ldr	r3, [pc, #488]	; (8000f00 <main+0x248>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d01d      	beq.n	8000d5a <main+0xa2>

			// Si llegamos a este comando, lo que se quiere es ir en linea recta usando un control PID

			go(handler_Motor_Array,
 8000d1e:	4b77      	ldr	r3, [pc, #476]	; (8000efc <main+0x244>)
 8000d20:	ed93 7b00 	vldr	d7, [r3]
 8000d24:	4b77      	ldr	r3, [pc, #476]	; (8000f04 <main+0x24c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4a77      	ldr	r2, [pc, #476]	; (8000f08 <main+0x250>)
 8000d2a:	8812      	ldrh	r2, [r2, #0]
 8000d2c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8000d30:	4a76      	ldr	r2, [pc, #472]	; (8000f0c <main+0x254>)
 8000d32:	9205      	str	r2, [sp, #20]
 8000d34:	4a76      	ldr	r2, [pc, #472]	; (8000f10 <main+0x258>)
 8000d36:	9204      	str	r2, [sp, #16]
 8000d38:	4a76      	ldr	r2, [pc, #472]	; (8000f14 <main+0x25c>)
 8000d3a:	9203      	str	r2, [sp, #12]
 8000d3c:	4a76      	ldr	r2, [pc, #472]	; (8000f18 <main+0x260>)
 8000d3e:	9202      	str	r2, [sp, #8]
 8000d40:	9301      	str	r3, [sp, #4]
 8000d42:	4b76      	ldr	r3, [pc, #472]	; (8000f1c <main+0x264>)
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	eeb0 0a47 	vmov.f32	s0, s14
 8000d4a:	eef0 0a67 	vmov.f32	s1, s15
 8000d4e:	4b74      	ldr	r3, [pc, #464]	; (8000f20 <main+0x268>)
 8000d50:	4a74      	ldr	r2, [pc, #464]	; (8000f24 <main+0x26c>)
 8000d52:	4969      	ldr	r1, [pc, #420]	; (8000ef8 <main+0x240>)
 8000d54:	4874      	ldr	r0, [pc, #464]	; (8000f28 <main+0x270>)
 8000d56:	f001 feff 	bl	8002b58 <go>
			   &flag_control,
			   data,
			   Mode_dir);
		}

		if (flag_GoTo_Straigh){
 8000d5a:	4b74      	ldr	r3, [pc, #464]	; (8000f2c <main+0x274>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d02c      	beq.n	8000dbc <main+0x104>

			// SI llegamos a este comando, lo que se quiere es ir en linea recta a cierta distancia usando un control PID
			Done = goTo(handler_Motor_Array,
 8000d62:	4b66      	ldr	r3, [pc, #408]	; (8000efc <main+0x244>)
 8000d64:	ed93 7b00 	vldr	d7, [r3]
 8000d68:	4b66      	ldr	r3, [pc, #408]	; (8000f04 <main+0x24c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
					    Mode,
					    &flag_angulo,
					    &flag_measurements,
					    &flag_control,
					    data,
					    parameters_Path_Robot.line_Distance,
 8000d6c:	4a6c      	ldr	r2, [pc, #432]	; (8000f20 <main+0x268>)
 8000d6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
			Done = goTo(handler_Motor_Array,
 8000d70:	4611      	mov	r1, r2
 8000d72:	4a65      	ldr	r2, [pc, #404]	; (8000f08 <main+0x250>)
 8000d74:	8812      	ldrh	r2, [r2, #0]
 8000d76:	f8ad 201c 	strh.w	r2, [sp, #28]
 8000d7a:	9106      	str	r1, [sp, #24]
 8000d7c:	4a63      	ldr	r2, [pc, #396]	; (8000f0c <main+0x254>)
 8000d7e:	9205      	str	r2, [sp, #20]
 8000d80:	4a63      	ldr	r2, [pc, #396]	; (8000f10 <main+0x258>)
 8000d82:	9204      	str	r2, [sp, #16]
 8000d84:	4a63      	ldr	r2, [pc, #396]	; (8000f14 <main+0x25c>)
 8000d86:	9203      	str	r2, [sp, #12]
 8000d88:	4a63      	ldr	r2, [pc, #396]	; (8000f18 <main+0x260>)
 8000d8a:	9202      	str	r2, [sp, #8]
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	4b63      	ldr	r3, [pc, #396]	; (8000f1c <main+0x264>)
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	eeb0 0a47 	vmov.f32	s0, s14
 8000d96:	eef0 0a67 	vmov.f32	s1, s15
 8000d9a:	4b61      	ldr	r3, [pc, #388]	; (8000f20 <main+0x268>)
 8000d9c:	4a61      	ldr	r2, [pc, #388]	; (8000f24 <main+0x26c>)
 8000d9e:	4956      	ldr	r1, [pc, #344]	; (8000ef8 <main+0x240>)
 8000da0:	4861      	ldr	r0, [pc, #388]	; (8000f28 <main+0x270>)
 8000da2:	f001 fcbb 	bl	800271c <goTo>
 8000da6:	4603      	mov	r3, r0
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b61      	ldr	r3, [pc, #388]	; (8000f30 <main+0x278>)
 8000dac:	701a      	strb	r2, [r3, #0]
					    Mode_dir);

			if (Done){parseCommands("stop");}
 8000dae:	4b60      	ldr	r3, [pc, #384]	; (8000f30 <main+0x278>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <main+0x104>
 8000db6:	485f      	ldr	r0, [pc, #380]	; (8000f34 <main+0x27c>)
 8000db8:	f000 fb14 	bl	80013e4 <parseCommands>

		}

		if (flag_Roll){
 8000dbc:	4b5e      	ldr	r3, [pc, #376]	; (8000f38 <main+0x280>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d01b      	beq.n	8000dfc <main+0x144>

			// Si llegamos a este comando lo que se quiere es girar indefinidamente en cierta direccion (CW o CCW)

			// Cambiamos los parametros
			roll(handler_Motor_Array,
 8000dc4:	4b4d      	ldr	r3, [pc, #308]	; (8000efc <main+0x244>)
 8000dc6:	ed93 7b00 	vldr	d7, [r3]
 8000dca:	4b4e      	ldr	r3, [pc, #312]	; (8000f04 <main+0x24c>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	4a4e      	ldr	r2, [pc, #312]	; (8000f08 <main+0x250>)
 8000dd0:	8812      	ldrh	r2, [r2, #0]
 8000dd2:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000dd6:	4a4d      	ldr	r2, [pc, #308]	; (8000f0c <main+0x254>)
 8000dd8:	9204      	str	r2, [sp, #16]
 8000dda:	4a4d      	ldr	r2, [pc, #308]	; (8000f10 <main+0x258>)
 8000ddc:	9203      	str	r2, [sp, #12]
 8000dde:	4a4d      	ldr	r2, [pc, #308]	; (8000f14 <main+0x25c>)
 8000de0:	9202      	str	r2, [sp, #8]
 8000de2:	4a4d      	ldr	r2, [pc, #308]	; (8000f18 <main+0x260>)
 8000de4:	9201      	str	r2, [sp, #4]
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	eeb0 0a47 	vmov.f32	s0, s14
 8000dec:	eef0 0a67 	vmov.f32	s1, s15
 8000df0:	4b4b      	ldr	r3, [pc, #300]	; (8000f20 <main+0x268>)
 8000df2:	4a4c      	ldr	r2, [pc, #304]	; (8000f24 <main+0x26c>)
 8000df4:	4940      	ldr	r1, [pc, #256]	; (8000ef8 <main+0x240>)
 8000df6:	484c      	ldr	r0, [pc, #304]	; (8000f28 <main+0x270>)
 8000df8:	f001 ff5a 	bl	8002cb0 <roll>
				data,
				Mode_dir);

		}

		if (flag_RollTo){
 8000dfc:	4b4f      	ldr	r3, [pc, #316]	; (8000f3c <main+0x284>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d086      	beq.n	8000d12 <main+0x5a>

			// Si llegamos a este comando lo que se quiere es girar un cierto ángulo el robot
			Done = RESET; // Reseteamos la bandera
 8000e04:	4b4a      	ldr	r3, [pc, #296]	; (8000f30 <main+0x278>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
			angle_start = parameters_Pos_Robot.grad_global;
 8000e0a:	4b46      	ldr	r3, [pc, #280]	; (8000f24 <main+0x26c>)
 8000e0c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e10:	e9c7 2300 	strd	r2, r3, [r7]

			while (!Done){
 8000e14:	e055      	b.n	8000ec2 <main+0x20a>

				// comparamos el ángulo a rotar con el angulo actual, partiendo desde el angulo en el que se estaba
				angleToGo_Relative = abs(parameters_Pos_Robot.grad_global - angle_start);
 8000e16:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <main+0x26c>)
 8000e18:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e20:	f7ff fa4a 	bl	80002b8 <__aeabi_dsub>
 8000e24:	4602      	mov	r2, r0
 8000e26:	460b      	mov	r3, r1
 8000e28:	4610      	mov	r0, r2
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f7ff feac 	bl	8000b88 <__aeabi_d2iz>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	bfb8      	it	lt
 8000e36:	425b      	neglt	r3, r3
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fb8b 	bl	8000554 <__aeabi_i2d>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	e9c7 2302 	strd	r2, r3, [r7, #8]
				// tomamos el angulo global y se lo restamos con el angulo con el que se empezo a rotar

				// Cambiamos los parametros
				roll(handler_Motor_Array,
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <main+0x244>)
 8000e48:	ed93 7b00 	vldr	d7, [r3]
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <main+0x24c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4a2d      	ldr	r2, [pc, #180]	; (8000f08 <main+0x250>)
 8000e52:	8812      	ldrh	r2, [r2, #0]
 8000e54:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000e58:	4a2c      	ldr	r2, [pc, #176]	; (8000f0c <main+0x254>)
 8000e5a:	9204      	str	r2, [sp, #16]
 8000e5c:	4a2c      	ldr	r2, [pc, #176]	; (8000f10 <main+0x258>)
 8000e5e:	9203      	str	r2, [sp, #12]
 8000e60:	4a2c      	ldr	r2, [pc, #176]	; (8000f14 <main+0x25c>)
 8000e62:	9202      	str	r2, [sp, #8]
 8000e64:	4a2c      	ldr	r2, [pc, #176]	; (8000f18 <main+0x260>)
 8000e66:	9201      	str	r2, [sp, #4]
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	eeb0 0a47 	vmov.f32	s0, s14
 8000e6e:	eef0 0a67 	vmov.f32	s1, s15
 8000e72:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <main+0x268>)
 8000e74:	4a2b      	ldr	r2, [pc, #172]	; (8000f24 <main+0x26c>)
 8000e76:	4920      	ldr	r1, [pc, #128]	; (8000ef8 <main+0x240>)
 8000e78:	482b      	ldr	r0, [pc, #172]	; (8000f28 <main+0x270>)
 8000e7a:	f001 ff19 	bl	8002cb0 <roll>
					data,
				    Mode_dir);


				// Analizamos si ya se llego al angulo deseado
				if (!(angleToGo_Relative < parameters_Path_Robot.angle) ){Done = !Done;}
 8000e7e:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <main+0x268>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fb66 	bl	8000554 <__aeabi_i2d>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	460c      	mov	r4, r1
 8000e90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e94:	f7ff fe3a 	bl	8000b0c <__aeabi_dcmplt>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <main+0x1ea>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	461c      	mov	r4, r3
 8000ea2:	b2e3      	uxtb	r3, r4
 8000ea4:	f083 0301 	eor.w	r3, r3, #1
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d009      	beq.n	8000ec2 <main+0x20a>
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <main+0x278>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	bf0c      	ite	eq
 8000eb6:	2301      	moveq	r3, #1
 8000eb8:	2300      	movne	r3, #0
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <main+0x278>)
 8000ec0:	701a      	strb	r2, [r3, #0]
			while (!Done){
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <main+0x278>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0a5      	beq.n	8000e16 <main+0x15e>
			}

			// Paramos el robot
			if (Done){parseCommands("stop");}
 8000eca:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <main+0x278>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <main+0x220>
 8000ed2:	4818      	ldr	r0, [pc, #96]	; (8000f34 <main+0x27c>)
 8000ed4:	f000 fa86 	bl	80013e4 <parseCommands>
			angleToGo_Relative = 0; // Reseteamos
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	f04f 0300 	mov.w	r3, #0
 8000ee0:	e9c7 2302 	strd	r2, r3, [r7, #8]
			Done = RESET; // Reseteamos la bandera
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <main+0x278>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
		fillComand();
 8000eea:	e712      	b.n	8000d12 <main+0x5a>
 8000eec:	e000ed00 	.word	0xe000ed00
 8000ef0:	20000610 	.word	0x20000610
 8000ef4:	3ddfaebc 	.word	0x3ddfaebc
 8000ef8:	200003b4 	.word	0x200003b4
 8000efc:	20000600 	.word	0x20000600
 8000f00:	20000519 	.word	0x20000519
 8000f04:	20000516 	.word	0x20000516
 8000f08:	20000514 	.word	0x20000514
 8000f0c:	20000494 	.word	0x20000494
 8000f10:	2000051b 	.word	0x2000051b
 8000f14:	20000518 	.word	0x20000518
 8000f18:	20000517 	.word	0x20000517
 8000f1c:	20000528 	.word	0x20000528
 8000f20:	20000548 	.word	0x20000548
 8000f24:	200005b0 	.word	0x200005b0
 8000f28:	200003c4 	.word	0x200003c4
 8000f2c:	2000051a 	.word	0x2000051a
 8000f30:	2000051e 	.word	0x2000051e
 8000f34:	0800d028 	.word	0x0800d028
 8000f38:	2000051c 	.word	0x2000051c
 8000f3c:	2000051d 	.word	0x2000051d

08000f40 <inSystem>:
}




void inSystem (void){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000f44:	4baf      	ldr	r3, [pc, #700]	; (8001204 <inSystem+0x2c4>)
 8000f46:	4ab0      	ldr	r2, [pc, #704]	; (8001208 <inSystem+0x2c8>)
 8000f48:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000f4a:	4bae      	ldr	r3, [pc, #696]	; (8001204 <inSystem+0x2c4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000f50:	4bac      	ldr	r3, [pc, #688]	; (8001204 <inSystem+0x2c4>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000f56:	4bab      	ldr	r3, [pc, #684]	; (8001204 <inSystem+0x2c4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000f5c:	4ba9      	ldr	r3, [pc, #676]	; (8001204 <inSystem+0x2c4>)
 8000f5e:	2205      	movs	r2, #5
 8000f60:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f62:	4ba8      	ldr	r3, [pc, #672]	; (8001204 <inSystem+0x2c4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000f68:	4ba6      	ldr	r3, [pc, #664]	; (8001204 <inSystem+0x2c4>)
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000f6e:	48a5      	ldr	r0, [pc, #660]	; (8001204 <inSystem+0x2c4>)
 8000f70:	f003 fca4 	bl	80048bc <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000f74:	2101      	movs	r1, #1
 8000f76:	48a3      	ldr	r0, [pc, #652]	; (8001204 <inSystem+0x2c4>)
 8000f78:	f003 fdca 	bl	8004b10 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 8000f7c:	4ba3      	ldr	r3, [pc, #652]	; (800120c <inSystem+0x2cc>)
 8000f7e:	4aa4      	ldr	r2, [pc, #656]	; (8001210 <inSystem+0x2d0>)
 8000f80:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8000f82:	4ba2      	ldr	r3, [pc, #648]	; (800120c <inSystem+0x2cc>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8000f88:	4ba0      	ldr	r3, [pc, #640]	; (800120c <inSystem+0x2cc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8000f8e:	4b9f      	ldr	r3, [pc, #636]	; (800120c <inSystem+0x2cc>)
 8000f90:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f94:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 500;
 8000f96:	4b9d      	ldr	r3, [pc, #628]	; (800120c <inSystem+0x2cc>)
 8000f98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f9c:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 8000f9e:	489b      	ldr	r0, [pc, #620]	; (800120c <inSystem+0x2cc>)
 8000fa0:	f002 f820 	bl	8002fe4 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8000fa4:	4899      	ldr	r0, [pc, #612]	; (800120c <inSystem+0x2cc>)
 8000fa6:	f002 fc19 	bl	80037dc <startTimer>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 8000faa:	f001 ffff 	bl	8002fac <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array, &parameters_Pos_Robot, &parameters_Path_Robot, &parameter_PID_distace);
 8000fae:	4b99      	ldr	r3, [pc, #612]	; (8001214 <inSystem+0x2d4>)
 8000fb0:	4a99      	ldr	r2, [pc, #612]	; (8001218 <inSystem+0x2d8>)
 8000fb2:	499a      	ldr	r1, [pc, #616]	; (800121c <inSystem+0x2dc>)
 8000fb4:	489a      	ldr	r0, [pc, #616]	; (8001220 <inSystem+0x2e0>)
 8000fb6:	f001 fa89 	bl	80024cc <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 8000fba:	4b9a      	ldr	r3, [pc, #616]	; (8001224 <inSystem+0x2e4>)
 8000fbc:	4a92      	ldr	r2, [pc, #584]	; (8001208 <inSystem+0x2c8>)
 8000fbe:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000fc0:	4b98      	ldr	r3, [pc, #608]	; (8001224 <inSystem+0x2e4>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000fc6:	4b97      	ldr	r3, [pc, #604]	; (8001224 <inSystem+0x2e4>)
 8000fc8:	2202      	movs	r2, #2
 8000fca:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000fcc:	4b95      	ldr	r3, [pc, #596]	; (8001224 <inSystem+0x2e4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8000fd2:	4b94      	ldr	r3, [pc, #592]	; (8001224 <inSystem+0x2e4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fd8:	4b92      	ldr	r3, [pc, #584]	; (8001224 <inSystem+0x2e4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000fde:	4b91      	ldr	r3, [pc, #580]	; (8001224 <inSystem+0x2e4>)
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 8000fe4:	488f      	ldr	r0, [pc, #572]	; (8001224 <inSystem+0x2e4>)
 8000fe6:	f003 fc69 	bl	80048bc <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 8000fea:	4b8f      	ldr	r3, [pc, #572]	; (8001228 <inSystem+0x2e8>)
 8000fec:	4a8f      	ldr	r2, [pc, #572]	; (800122c <inSystem+0x2ec>)
 8000fee:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 8000ff0:	4b8d      	ldr	r3, [pc, #564]	; (8001228 <inSystem+0x2e8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 8000ff6:	4b8c      	ldr	r3, [pc, #560]	; (8001228 <inSystem+0x2e8>)
 8000ff8:	4a8d      	ldr	r2, [pc, #564]	; (8001230 <inSystem+0x2f0>)
 8000ffa:	611a      	str	r2, [r3, #16]
//	counter = fixed_dutty;
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 8000ffc:	4b8a      	ldr	r3, [pc, #552]	; (8001228 <inSystem+0x2e8>)
 8000ffe:	2221      	movs	r2, #33	; 0x21
 8001000:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8001002:	4b89      	ldr	r3, [pc, #548]	; (8001228 <inSystem+0x2e8>)
 8001004:	2264      	movs	r2, #100	; 0x64
 8001006:	609a      	str	r2, [r3, #8]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8001008:	4b87      	ldr	r3, [pc, #540]	; (8001228 <inSystem+0x2e8>)
 800100a:	2201      	movs	r2, #1
 800100c:	751a      	strb	r2, [r3, #20]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 800100e:	4b86      	ldr	r3, [pc, #536]	; (8001228 <inSystem+0x2e8>)
 8001010:	2201      	movs	r2, #1
 8001012:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_1);
 8001014:	4884      	ldr	r0, [pc, #528]	; (8001228 <inSystem+0x2e8>)
 8001016:	f004 fa59 	bl	80054cc <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 800101a:	4883      	ldr	r0, [pc, #524]	; (8001228 <inSystem+0x2e8>)
 800101c:	f004 fb40 	bl	80056a0 <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 8001020:	4b84      	ldr	r3, [pc, #528]	; (8001234 <inSystem+0x2f4>)
 8001022:	4a79      	ldr	r2, [pc, #484]	; (8001208 <inSystem+0x2c8>)
 8001024:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001026:	4b83      	ldr	r3, [pc, #524]	; (8001234 <inSystem+0x2f4>)
 8001028:	2202      	movs	r2, #2
 800102a:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800102c:	4b81      	ldr	r3, [pc, #516]	; (8001234 <inSystem+0x2f4>)
 800102e:	2202      	movs	r2, #2
 8001030:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001032:	4b80      	ldr	r3, [pc, #512]	; (8001234 <inSystem+0x2f4>)
 8001034:	2200      	movs	r2, #0
 8001036:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8001038:	4b7e      	ldr	r3, [pc, #504]	; (8001234 <inSystem+0x2f4>)
 800103a:	2201      	movs	r2, #1
 800103c:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800103e:	4b7d      	ldr	r3, [pc, #500]	; (8001234 <inSystem+0x2f4>)
 8001040:	2200      	movs	r2, #0
 8001042:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001044:	4b7b      	ldr	r3, [pc, #492]	; (8001234 <inSystem+0x2f4>)
 8001046:	2202      	movs	r2, #2
 8001048:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 800104a:	487a      	ldr	r0, [pc, #488]	; (8001234 <inSystem+0x2f4>)
 800104c:	f003 fc36 	bl	80048bc <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 8001050:	4b79      	ldr	r3, [pc, #484]	; (8001238 <inSystem+0x2f8>)
 8001052:	4a76      	ldr	r2, [pc, #472]	; (800122c <inSystem+0x2ec>)
 8001054:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 8001056:	4b78      	ldr	r3, [pc, #480]	; (8001238 <inSystem+0x2f8>)
 8001058:	2201      	movs	r2, #1
 800105a:	711a      	strb	r2, [r3, #4]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 800105c:	4b76      	ldr	r3, [pc, #472]	; (8001238 <inSystem+0x2f8>)
 800105e:	4a74      	ldr	r2, [pc, #464]	; (8001230 <inSystem+0x2f0>)
 8001060:	611a      	str	r2, [r3, #16]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 8001062:	4b75      	ldr	r3, [pc, #468]	; (8001238 <inSystem+0x2f8>)
 8001064:	2221      	movs	r2, #33	; 0x21
 8001066:	819a      	strh	r2, [r3, #12]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 8001068:	4b73      	ldr	r3, [pc, #460]	; (8001238 <inSystem+0x2f8>)
 800106a:	2264      	movs	r2, #100	; 0x64
 800106c:	609a      	str	r2, [r3, #8]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 800106e:	4b72      	ldr	r3, [pc, #456]	; (8001238 <inSystem+0x2f8>)
 8001070:	2201      	movs	r2, #1
 8001072:	751a      	strb	r2, [r3, #20]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8001074:	4b70      	ldr	r3, [pc, #448]	; (8001238 <inSystem+0x2f8>)
 8001076:	2201      	movs	r2, #1
 8001078:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_2);
 800107a:	486f      	ldr	r0, [pc, #444]	; (8001238 <inSystem+0x2f8>)
 800107c:	f004 fa26 	bl	80054cc <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 8001080:	486d      	ldr	r0, [pc, #436]	; (8001238 <inSystem+0x2f8>)
 8001082:	f004 fb0d 	bl	80056a0 <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 8001086:	4b6d      	ldr	r3, [pc, #436]	; (800123c <inSystem+0x2fc>)
 8001088:	4a6d      	ldr	r2, [pc, #436]	; (8001240 <inSystem+0x300>)
 800108a:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800108c:	4b6b      	ldr	r3, [pc, #428]	; (800123c <inSystem+0x2fc>)
 800108e:	2200      	movs	r2, #0
 8001090:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001092:	4b6a      	ldr	r3, [pc, #424]	; (800123c <inSystem+0x2fc>)
 8001094:	2201      	movs	r2, #1
 8001096:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 8001098:	4b68      	ldr	r3, [pc, #416]	; (800123c <inSystem+0x2fc>)
 800109a:	220a      	movs	r2, #10
 800109c:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800109e:	4b67      	ldr	r3, [pc, #412]	; (800123c <inSystem+0x2fc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010a4:	4b65      	ldr	r3, [pc, #404]	; (800123c <inSystem+0x2fc>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80010aa:	4b64      	ldr	r3, [pc, #400]	; (800123c <inSystem+0x2fc>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 80010b0:	4862      	ldr	r0, [pc, #392]	; (800123c <inSystem+0x2fc>)
 80010b2:	f003 fc03 	bl	80048bc <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 80010b6:	2100      	movs	r1, #0
 80010b8:	4860      	ldr	r0, [pc, #384]	; (800123c <inSystem+0x2fc>)
 80010ba:	f003 fd54 	bl	8004b66 <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 80010be:	4b61      	ldr	r3, [pc, #388]	; (8001244 <inSystem+0x304>)
 80010c0:	4a5f      	ldr	r2, [pc, #380]	; (8001240 <inSystem+0x300>)
 80010c2:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80010c4:	4b5f      	ldr	r3, [pc, #380]	; (8001244 <inSystem+0x304>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80010ca:	4b5e      	ldr	r3, [pc, #376]	; (8001244 <inSystem+0x304>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 80010d0:	4b5c      	ldr	r3, [pc, #368]	; (8001244 <inSystem+0x304>)
 80010d2:	220b      	movs	r2, #11
 80010d4:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80010d6:	4b5b      	ldr	r3, [pc, #364]	; (8001244 <inSystem+0x304>)
 80010d8:	2200      	movs	r2, #0
 80010da:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010dc:	4b59      	ldr	r3, [pc, #356]	; (8001244 <inSystem+0x304>)
 80010de:	2200      	movs	r2, #0
 80010e0:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80010e2:	4b58      	ldr	r3, [pc, #352]	; (8001244 <inSystem+0x304>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 80010e8:	4856      	ldr	r0, [pc, #344]	; (8001244 <inSystem+0x304>)
 80010ea:	f003 fbe7 	bl	80048bc <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 80010ee:	2100      	movs	r1, #0
 80010f0:	4854      	ldr	r0, [pc, #336]	; (8001244 <inSystem+0x304>)
 80010f2:	f003 fd38 	bl	8004b66 <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 80010f6:	4b54      	ldr	r3, [pc, #336]	; (8001248 <inSystem+0x308>)
 80010f8:	4a51      	ldr	r2, [pc, #324]	; (8001240 <inSystem+0x300>)
 80010fa:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80010fc:	4b52      	ldr	r3, [pc, #328]	; (8001248 <inSystem+0x308>)
 80010fe:	2200      	movs	r2, #0
 8001100:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001102:	4b51      	ldr	r3, [pc, #324]	; (8001248 <inSystem+0x308>)
 8001104:	2201      	movs	r2, #1
 8001106:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 8001108:	4b4f      	ldr	r3, [pc, #316]	; (8001248 <inSystem+0x308>)
 800110a:	220c      	movs	r2, #12
 800110c:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800110e:	4b4e      	ldr	r3, [pc, #312]	; (8001248 <inSystem+0x308>)
 8001110:	2200      	movs	r2, #0
 8001112:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001114:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <inSystem+0x308>)
 8001116:	2200      	movs	r2, #0
 8001118:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800111a:	4b4b      	ldr	r3, [pc, #300]	; (8001248 <inSystem+0x308>)
 800111c:	2202      	movs	r2, #2
 800111e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 8001120:	4849      	ldr	r0, [pc, #292]	; (8001248 <inSystem+0x308>)
 8001122:	f003 fbcb 	bl	80048bc <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default SET
 8001126:	2100      	movs	r1, #0
 8001128:	4847      	ldr	r0, [pc, #284]	; (8001248 <inSystem+0x308>)
 800112a:	f003 fd1c 	bl	8004b66 <GPIO_WritePin_Afopt>
	handler_Motor_Array[0]->configMotor.dir = SET;
 800112e:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <inSystem+0x2e0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2201      	movs	r2, #1
 8001134:	771a      	strb	r2, [r3, #28]

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 8001136:	4b45      	ldr	r3, [pc, #276]	; (800124c <inSystem+0x30c>)
 8001138:	4a45      	ldr	r2, [pc, #276]	; (8001250 <inSystem+0x310>)
 800113a:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800113c:	4b43      	ldr	r3, [pc, #268]	; (800124c <inSystem+0x30c>)
 800113e:	2200      	movs	r2, #0
 8001140:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001142:	4b42      	ldr	r3, [pc, #264]	; (800124c <inSystem+0x30c>)
 8001144:	2201      	movs	r2, #1
 8001146:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8001148:	4b40      	ldr	r3, [pc, #256]	; (800124c <inSystem+0x30c>)
 800114a:	2202      	movs	r2, #2
 800114c:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <inSystem+0x30c>)
 8001150:	2200      	movs	r2, #0
 8001152:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001154:	4b3d      	ldr	r3, [pc, #244]	; (800124c <inSystem+0x30c>)
 8001156:	2200      	movs	r2, #0
 8001158:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800115a:	4b3c      	ldr	r3, [pc, #240]	; (800124c <inSystem+0x30c>)
 800115c:	2202      	movs	r2, #2
 800115e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 8001160:	483a      	ldr	r0, [pc, #232]	; (800124c <inSystem+0x30c>)
 8001162:	f003 fbab 	bl	80048bc <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default SET
 8001166:	2100      	movs	r1, #0
 8001168:	4838      	ldr	r0, [pc, #224]	; (800124c <inSystem+0x30c>)
 800116a:	f003 fcfc 	bl	8004b66 <GPIO_WritePin_Afopt>
	handler_Motor_Array[1]->configMotor.dir = SET;
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <inSystem+0x2e0>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	771a      	strb	r2, [r3, #28]
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 8001176:	4b37      	ldr	r3, [pc, #220]	; (8001254 <inSystem+0x314>)
 8001178:	4a31      	ldr	r2, [pc, #196]	; (8001240 <inSystem+0x300>)
 800117a:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800117c:	4b35      	ldr	r3, [pc, #212]	; (8001254 <inSystem+0x314>)
 800117e:	2200      	movs	r2, #0
 8001180:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8001182:	4b34      	ldr	r3, [pc, #208]	; (8001254 <inSystem+0x314>)
 8001184:	2200      	movs	r2, #0
 8001186:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8001188:	4b32      	ldr	r3, [pc, #200]	; (8001254 <inSystem+0x314>)
 800118a:	2201      	movs	r2, #1
 800118c:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800118e:	4b31      	ldr	r3, [pc, #196]	; (8001254 <inSystem+0x314>)
 8001190:	2200      	movs	r2, #0
 8001192:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001194:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <inSystem+0x314>)
 8001196:	2200      	movs	r2, #0
 8001198:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800119a:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <inSystem+0x314>)
 800119c:	2202      	movs	r2, #2
 800119e:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <inSystem+0x318>)
 80011a2:	4a2c      	ldr	r2, [pc, #176]	; (8001254 <inSystem+0x314>)
 80011a4:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <inSystem+0x318>)
 80011a8:	2202      	movs	r2, #2
 80011aa:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 80011ac:	482a      	ldr	r0, [pc, #168]	; (8001258 <inSystem+0x318>)
 80011ae:	f002 fb57 	bl	8003860 <extInt_Config>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <inSystem+0x31c>)
 80011b4:	4a22      	ldr	r2, [pc, #136]	; (8001240 <inSystem+0x300>)
 80011b6:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80011b8:	4b28      	ldr	r3, [pc, #160]	; (800125c <inSystem+0x31c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <inSystem+0x31c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 80011c4:	4b25      	ldr	r3, [pc, #148]	; (800125c <inSystem+0x31c>)
 80011c6:	2203      	movs	r2, #3
 80011c8:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <inSystem+0x31c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011d0:	4b22      	ldr	r3, [pc, #136]	; (800125c <inSystem+0x31c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <inSystem+0x31c>)
 80011d8:	2202      	movs	r2, #2
 80011da:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <inSystem+0x320>)
 80011de:	4a1f      	ldr	r2, [pc, #124]	; (800125c <inSystem+0x31c>)
 80011e0:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <inSystem+0x320>)
 80011e4:	2202      	movs	r2, #2
 80011e6:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 80011e8:	481d      	ldr	r0, [pc, #116]	; (8001260 <inSystem+0x320>)
 80011ea:	f002 fb39 	bl	8003860 <extInt_Config>
		/////////A2 TX // A3 RX PARA USART 2 /////////
		////////A9 TX // A10 RX PARA USART 1 ////////

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <inSystem+0x324>)
 80011f0:	4a05      	ldr	r2, [pc, #20]	; (8001208 <inSystem+0x2c8>)
 80011f2:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <inSystem+0x324>)
 80011f6:	2207      	movs	r2, #7
 80011f8:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <inSystem+0x324>)
 80011fc:	2202      	movs	r2, #2
 80011fe:	715a      	strb	r2, [r3, #5]
 8001200:	e032      	b.n	8001268 <inSystem+0x328>
 8001202:	bf00      	nop
 8001204:	200001fc 	.word	0x200001fc
 8001208:	40020000 	.word	0x40020000
 800120c:	200002a8 	.word	0x200002a8
 8001210:	40000400 	.word	0x40000400
 8001214:	20000528 	.word	0x20000528
 8001218:	20000548 	.word	0x20000548
 800121c:	200005b0 	.word	0x200005b0
 8001220:	200003c4 	.word	0x200003c4
 8001224:	20000208 	.word	0x20000208
 8001228:	200002e4 	.word	0x200002e4
 800122c:	40000c00 	.word	0x40000c00
 8001230:	41e00000 	.word	0x41e00000
 8001234:	20000214 	.word	0x20000214
 8001238:	200002fc 	.word	0x200002fc
 800123c:	20000244 	.word	0x20000244
 8001240:	40020800 	.word	0x40020800
 8001244:	20000238 	.word	0x20000238
 8001248:	2000025c 	.word	0x2000025c
 800124c:	20000250 	.word	0x20000250
 8001250:	40020c00 	.word	0x40020c00
 8001254:	20000268 	.word	0x20000268
 8001258:	20000298 	.word	0x20000298
 800125c:	20000274 	.word	0x20000274
 8001260:	200002a0 	.word	0x200002a0
 8001264:	2000022c 	.word	0x2000022c
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001268:	4b51      	ldr	r3, [pc, #324]	; (80013b0 <inSystem+0x470>)
 800126a:	2200      	movs	r2, #0
 800126c:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 800126e:	4b50      	ldr	r3, [pc, #320]	; (80013b0 <inSystem+0x470>)
 8001270:	2202      	movs	r2, #2
 8001272:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001274:	4b4e      	ldr	r3, [pc, #312]	; (80013b0 <inSystem+0x470>)
 8001276:	2200      	movs	r2, #0
 8001278:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800127a:	4b4d      	ldr	r3, [pc, #308]	; (80013b0 <inSystem+0x470>)
 800127c:	2203      	movs	r2, #3
 800127e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 8001280:	484b      	ldr	r0, [pc, #300]	; (80013b0 <inSystem+0x470>)
 8001282:	f003 fb1b 	bl	80048bc <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 8001286:	4b4b      	ldr	r3, [pc, #300]	; (80013b4 <inSystem+0x474>)
 8001288:	4a4b      	ldr	r2, [pc, #300]	; (80013b8 <inSystem+0x478>)
 800128a:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 800128c:	4b49      	ldr	r3, [pc, #292]	; (80013b4 <inSystem+0x474>)
 800128e:	2207      	movs	r2, #7
 8001290:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001292:	4b48      	ldr	r3, [pc, #288]	; (80013b4 <inSystem+0x474>)
 8001294:	2202      	movs	r2, #2
 8001296:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001298:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <inSystem+0x474>)
 800129a:	2200      	movs	r2, #0
 800129c:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 800129e:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <inSystem+0x474>)
 80012a0:	2203      	movs	r2, #3
 80012a2:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80012a4:	4b43      	ldr	r3, [pc, #268]	; (80013b4 <inSystem+0x474>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80012aa:	4b42      	ldr	r3, [pc, #264]	; (80013b4 <inSystem+0x474>)
 80012ac:	2203      	movs	r2, #3
 80012ae:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 80012b0:	4840      	ldr	r0, [pc, #256]	; (80013b4 <inSystem+0x474>)
 80012b2:	f003 fb03 	bl	80048bc <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 80012b6:	4b41      	ldr	r3, [pc, #260]	; (80013bc <inSystem+0x47c>)
 80012b8:	4a41      	ldr	r2, [pc, #260]	; (80013c0 <inSystem+0x480>)
 80012ba:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 80012bc:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <inSystem+0x47c>)
 80012be:	4a41      	ldr	r2, [pc, #260]	; (80013c4 <inSystem+0x484>)
 80012c0:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 80012c2:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <inSystem+0x47c>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 80012c8:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <inSystem+0x47c>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 80012ce:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <inSystem+0x47c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 80012d4:	4b39      	ldr	r3, [pc, #228]	; (80013bc <inSystem+0x47c>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 80012da:	4b38      	ldr	r3, [pc, #224]	; (80013bc <inSystem+0x47c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 80012e0:	4b36      	ldr	r3, [pc, #216]	; (80013bc <inSystem+0x47c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 80012e6:	4b35      	ldr	r3, [pc, #212]	; (80013bc <inSystem+0x47c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 80012ec:	4833      	ldr	r0, [pc, #204]	; (80013bc <inSystem+0x47c>)
 80012ee:	f005 f913 	bl	8006518 <USART_Config>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 80012f2:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <inSystem+0x488>)
 80012f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f8:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <inSystem+0x488>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8001300:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <inSystem+0x488>)
 8001302:	2200      	movs	r2, #0
 8001304:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <inSystem+0x488>)
 8001308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800130c:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <inSystem+0x488>)
 8001310:	2210      	movs	r2, #16
 8001312:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 8001314:	482c      	ldr	r0, [pc, #176]	; (80013c8 <inSystem+0x488>)
 8001316:	f001 fe65 	bl	8002fe4 <BasicTimer_Config>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 800131a:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <inSystem+0x48c>)
 800131c:	4a2c      	ldr	r2, [pc, #176]	; (80013d0 <inSystem+0x490>)
 800131e:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <inSystem+0x48c>)
 8001322:	2204      	movs	r2, #4
 8001324:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <inSystem+0x48c>)
 8001328:	2202      	movs	r2, #2
 800132a:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <inSystem+0x48c>)
 800132e:	2208      	movs	r2, #8
 8001330:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <inSystem+0x48c>)
 8001334:	2201      	movs	r2, #1
 8001336:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <inSystem+0x48c>)
 800133a:	2200      	movs	r2, #0
 800133c:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <inSystem+0x48c>)
 8001340:	2202      	movs	r2, #2
 8001342:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 8001344:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <inSystem+0x494>)
 8001346:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <inSystem+0x490>)
 8001348:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <inSystem+0x494>)
 800134c:	2204      	movs	r2, #4
 800134e:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <inSystem+0x494>)
 8001352:	2202      	movs	r2, #2
 8001354:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <inSystem+0x494>)
 8001358:	2209      	movs	r2, #9
 800135a:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <inSystem+0x494>)
 800135e:	2201      	movs	r2, #1
 8001360:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <inSystem+0x494>)
 8001364:	2200      	movs	r2, #0
 8001366:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <inSystem+0x494>)
 800136a:	2202      	movs	r2, #2
 800136c:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <inSystem+0x498>)
 8001370:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <inSystem+0x49c>)
 8001372:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <inSystem+0x498>)
 8001376:	2232      	movs	r2, #50	; 0x32
 8001378:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <inSystem+0x498>)
 800137c:	2268      	movs	r2, #104	; 0x68
 800137e:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <inSystem+0x498>)
 8001382:	2201      	movs	r2, #1
 8001384:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <inSystem+0x4a0>)
 8001388:	4a10      	ldr	r2, [pc, #64]	; (80013cc <inSystem+0x48c>)
 800138a:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <inSystem+0x4a0>)
 800138e:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <inSystem+0x494>)
 8001390:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <inSystem+0x4a0>)
 8001394:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <inSystem+0x498>)
 8001396:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <inSystem+0x4a0>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <inSystem+0x4a0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 80013a4:	480e      	ldr	r0, [pc, #56]	; (80013e0 <inSystem+0x4a0>)
 80013a6:	f003 fc41 	bl	8004c2c <configMPUAccel>

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000022c 	.word	0x2000022c
 80013b4:	20000220 	.word	0x20000220
 80013b8:	40020000 	.word	0x40020000
 80013bc:	20000314 	.word	0x20000314
 80013c0:	40004400 	.word	0x40004400
 80013c4:	02faf080 	.word	0x02faf080
 80013c8:	200002bc 	.word	0x200002bc
 80013cc:	20000280 	.word	0x20000280
 80013d0:	40020400 	.word	0x40020400
 80013d4:	2000028c 	.word	0x2000028c
 80013d8:	200003a8 	.word	0x200003a8
 80013dc:	40005400 	.word	0x40005400
 80013e0:	200003b4 	.word	0x200003b4

080013e4 <parseCommands>:


void parseCommands(char *stringVector){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af04      	add	r7, sp, #16
 80013ea:	6078      	str	r0, [r7, #4]

	sscanf(stringVector, "%s %u %u %u %s", cmd ,&firstParameter, &secondParameter, &thirdParameter, userMsg);
 80013ec:	4b93      	ldr	r3, [pc, #588]	; (800163c <parseCommands+0x258>)
 80013ee:	9302      	str	r3, [sp, #8]
 80013f0:	4b93      	ldr	r3, [pc, #588]	; (8001640 <parseCommands+0x25c>)
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	4b93      	ldr	r3, [pc, #588]	; (8001644 <parseCommands+0x260>)
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	4b93      	ldr	r3, [pc, #588]	; (8001648 <parseCommands+0x264>)
 80013fa:	4a94      	ldr	r2, [pc, #592]	; (800164c <parseCommands+0x268>)
 80013fc:	4994      	ldr	r1, [pc, #592]	; (8001650 <parseCommands+0x26c>)
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f006 fdca 	bl	8007f98 <siscanf>


	if (strcmp(cmd, "help") == 0){
 8001404:	4993      	ldr	r1, [pc, #588]	; (8001654 <parseCommands+0x270>)
 8001406:	4891      	ldr	r0, [pc, #580]	; (800164c <parseCommands+0x268>)
 8001408:	f7fe feea 	bl	80001e0 <strcmp>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d120      	bne.n	8001454 <parseCommands+0x70>

		writeMsg(&handlerUSART, "HELP MENU CMD : \n");
 8001412:	4991      	ldr	r1, [pc, #580]	; (8001658 <parseCommands+0x274>)
 8001414:	4891      	ldr	r0, [pc, #580]	; (800165c <parseCommands+0x278>)
 8001416:	f005 fc61 	bl	8006cdc <writeMsg>
		writeMsg(&handlerUSART, "1)  go #dir 1--> Ahead , 0-->back Ward\n");
 800141a:	4991      	ldr	r1, [pc, #580]	; (8001660 <parseCommands+0x27c>)
 800141c:	488f      	ldr	r0, [pc, #572]	; (800165c <parseCommands+0x278>)
 800141e:	f005 fc5d 	bl	8006cdc <writeMsg>
		writeMsg(&handlerUSART, "2)  goto #dir #Distance \n");
 8001422:	4990      	ldr	r1, [pc, #576]	; (8001664 <parseCommands+0x280>)
 8001424:	488d      	ldr	r0, [pc, #564]	; (800165c <parseCommands+0x278>)
 8001426:	f005 fc59 	bl	8006cdc <writeMsg>
		writeMsg(&handlerUSART, "3)  roll #dir_roll 1--> CW , 0-->CCW \n");
 800142a:	498f      	ldr	r1, [pc, #572]	; (8001668 <parseCommands+0x284>)
 800142c:	488b      	ldr	r0, [pc, #556]	; (800165c <parseCommands+0x278>)
 800142e:	f005 fc55 	bl	8006cdc <writeMsg>
		writeMsg(&handlerUSART, "4)  rollto #dir_roll #angle  \n");
 8001432:	498e      	ldr	r1, [pc, #568]	; (800166c <parseCommands+0x288>)
 8001434:	4889      	ldr	r0, [pc, #548]	; (800165c <parseCommands+0x278>)
 8001436:	f005 fc51 	bl	8006cdc <writeMsg>
		writeMsg(&handlerUSART, "5)  change #dir #operation 1--->Line , 0--->Roll \n");
 800143a:	498d      	ldr	r1, [pc, #564]	; (8001670 <parseCommands+0x28c>)
 800143c:	4887      	ldr	r0, [pc, #540]	; (800165c <parseCommands+0x278>)
 800143e:	f005 fc4d 	bl	8006cdc <writeMsg>
		writeMsg(&handlerUSART, "6)  reinit  \n");
 8001442:	498c      	ldr	r1, [pc, #560]	; (8001674 <parseCommands+0x290>)
 8001444:	4885      	ldr	r0, [pc, #532]	; (800165c <parseCommands+0x278>)
 8001446:	f005 fc49 	bl	8006cdc <writeMsg>
		writeMsg(&handlerUSART, " \n");
 800144a:	498b      	ldr	r1, [pc, #556]	; (8001678 <parseCommands+0x294>)
 800144c:	4883      	ldr	r0, [pc, #524]	; (800165c <parseCommands+0x278>)
 800144e:	f005 fc45 	bl	8006cdc <writeMsg>
	else {
		writeMsg(&handlerUSART, "Comando Incorrecto :c \n");
	}


}
 8001452:	e0ee      	b.n	8001632 <parseCommands+0x24e>
	}else if (strcmp(cmd, "go") == 0){
 8001454:	4989      	ldr	r1, [pc, #548]	; (800167c <parseCommands+0x298>)
 8001456:	487d      	ldr	r0, [pc, #500]	; (800164c <parseCommands+0x268>)
 8001458:	f7fe fec2 	bl	80001e0 <strcmp>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d11b      	bne.n	800149a <parseCommands+0xb6>
		Mode_dir.Mode = Mode = sLine;
 8001462:	4b87      	ldr	r3, [pc, #540]	; (8001680 <parseCommands+0x29c>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	4b85      	ldr	r3, [pc, #532]	; (8001680 <parseCommands+0x29c>)
 800146a:	781a      	ldrb	r2, [r3, #0]
 800146c:	4b85      	ldr	r3, [pc, #532]	; (8001684 <parseCommands+0x2a0>)
 800146e:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 8001470:	4b75      	ldr	r3, [pc, #468]	; (8001648 <parseCommands+0x264>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b83      	ldr	r3, [pc, #524]	; (8001684 <parseCommands+0x2a0>)
 8001478:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 800147a:	4b82      	ldr	r3, [pc, #520]	; (8001684 <parseCommands+0x2a0>)
 800147c:	6819      	ldr	r1, [r3, #0]
 800147e:	4882      	ldr	r0, [pc, #520]	; (8001688 <parseCommands+0x2a4>)
 8001480:	f000 fe3e 	bl	8002100 <On_motor_Straigh_Roll>
		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 8001484:	4881      	ldr	r0, [pc, #516]	; (800168c <parseCommands+0x2a8>)
 8001486:	f002 f9a9 	bl	80037dc <startTimer>
		flag_Go_Straigh = SET;
 800148a:	4b81      	ldr	r3, [pc, #516]	; (8001690 <parseCommands+0x2ac>)
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO go EJECUTADO____\n\r");
 8001490:	4980      	ldr	r1, [pc, #512]	; (8001694 <parseCommands+0x2b0>)
 8001492:	4872      	ldr	r0, [pc, #456]	; (800165c <parseCommands+0x278>)
 8001494:	f005 fc22 	bl	8006cdc <writeMsg>
}
 8001498:	e0cb      	b.n	8001632 <parseCommands+0x24e>
	}else if (strcmp(cmd, "goto") == 0){
 800149a:	497f      	ldr	r1, [pc, #508]	; (8001698 <parseCommands+0x2b4>)
 800149c:	486b      	ldr	r0, [pc, #428]	; (800164c <parseCommands+0x268>)
 800149e:	f7fe fe9f 	bl	80001e0 <strcmp>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d120      	bne.n	80014ea <parseCommands+0x106>
		Mode_dir.Mode = Mode = sLine ;
 80014a8:	4b75      	ldr	r3, [pc, #468]	; (8001680 <parseCommands+0x29c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
 80014ae:	4b74      	ldr	r3, [pc, #464]	; (8001680 <parseCommands+0x29c>)
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	4b74      	ldr	r3, [pc, #464]	; (8001684 <parseCommands+0x2a0>)
 80014b4:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 80014b6:	4b64      	ldr	r3, [pc, #400]	; (8001648 <parseCommands+0x264>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	4b71      	ldr	r3, [pc, #452]	; (8001684 <parseCommands+0x2a0>)
 80014be:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 80014c0:	4b70      	ldr	r3, [pc, #448]	; (8001684 <parseCommands+0x2a0>)
 80014c2:	6819      	ldr	r1, [r3, #0]
 80014c4:	4870      	ldr	r0, [pc, #448]	; (8001688 <parseCommands+0x2a4>)
 80014c6:	f000 fe1b 	bl	8002100 <On_motor_Straigh_Roll>
		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 80014ca:	4870      	ldr	r0, [pc, #448]	; (800168c <parseCommands+0x2a8>)
 80014cc:	f002 f986 	bl	80037dc <startTimer>
		parameters_Path_Robot.line_Distance = secondParameter; // almacenamos la distancia en milimrtros a recorrer
 80014d0:	4b5c      	ldr	r3, [pc, #368]	; (8001644 <parseCommands+0x260>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b71      	ldr	r3, [pc, #452]	; (800169c <parseCommands+0x2b8>)
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
		flag_GoTo_Straigh = SET;
 80014da:	4b71      	ldr	r3, [pc, #452]	; (80016a0 <parseCommands+0x2bc>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO goto EJECUTADO____\n\r");
 80014e0:	4970      	ldr	r1, [pc, #448]	; (80016a4 <parseCommands+0x2c0>)
 80014e2:	485e      	ldr	r0, [pc, #376]	; (800165c <parseCommands+0x278>)
 80014e4:	f005 fbfa 	bl	8006cdc <writeMsg>
}
 80014e8:	e0a3      	b.n	8001632 <parseCommands+0x24e>
	}else if (strcmp(cmd, "roll") == 0){
 80014ea:	496f      	ldr	r1, [pc, #444]	; (80016a8 <parseCommands+0x2c4>)
 80014ec:	4857      	ldr	r0, [pc, #348]	; (800164c <parseCommands+0x268>)
 80014ee:	f7fe fe77 	bl	80001e0 <strcmp>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d11b      	bne.n	8001530 <parseCommands+0x14c>
		Mode_dir.Mode = Mode = sRoll;
 80014f8:	4b61      	ldr	r3, [pc, #388]	; (8001680 <parseCommands+0x29c>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
 80014fe:	4b60      	ldr	r3, [pc, #384]	; (8001680 <parseCommands+0x29c>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b60      	ldr	r3, [pc, #384]	; (8001684 <parseCommands+0x2a0>)
 8001504:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 8001506:	4b50      	ldr	r3, [pc, #320]	; (8001648 <parseCommands+0x264>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <parseCommands+0x2a0>)
 800150e:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001510:	4b5c      	ldr	r3, [pc, #368]	; (8001684 <parseCommands+0x2a0>)
 8001512:	6819      	ldr	r1, [r3, #0]
 8001514:	485c      	ldr	r0, [pc, #368]	; (8001688 <parseCommands+0x2a4>)
 8001516:	f000 fdf3 	bl	8002100 <On_motor_Straigh_Roll>
		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 800151a:	485c      	ldr	r0, [pc, #368]	; (800168c <parseCommands+0x2a8>)
 800151c:	f002 f95e 	bl	80037dc <startTimer>
		flag_Roll = SET;
 8001520:	4b62      	ldr	r3, [pc, #392]	; (80016ac <parseCommands+0x2c8>)
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO roll EJECUTADO____\n\r");
 8001526:	4962      	ldr	r1, [pc, #392]	; (80016b0 <parseCommands+0x2cc>)
 8001528:	484c      	ldr	r0, [pc, #304]	; (800165c <parseCommands+0x278>)
 800152a:	f005 fbd7 	bl	8006cdc <writeMsg>
}
 800152e:	e080      	b.n	8001632 <parseCommands+0x24e>
	}else if (strcmp(cmd, "rollto") == 0){
 8001530:	4960      	ldr	r1, [pc, #384]	; (80016b4 <parseCommands+0x2d0>)
 8001532:	4846      	ldr	r0, [pc, #280]	; (800164c <parseCommands+0x268>)
 8001534:	f7fe fe54 	bl	80001e0 <strcmp>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d120      	bne.n	8001580 <parseCommands+0x19c>
		Mode_dir.Mode = Mode = sRoll;
 800153e:	4b50      	ldr	r3, [pc, #320]	; (8001680 <parseCommands+0x29c>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	4b4e      	ldr	r3, [pc, #312]	; (8001680 <parseCommands+0x29c>)
 8001546:	781a      	ldrb	r2, [r3, #0]
 8001548:	4b4e      	ldr	r3, [pc, #312]	; (8001684 <parseCommands+0x2a0>)
 800154a:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 800154c:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <parseCommands+0x264>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <parseCommands+0x2a0>)
 8001554:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001556:	4b4b      	ldr	r3, [pc, #300]	; (8001684 <parseCommands+0x2a0>)
 8001558:	6819      	ldr	r1, [r3, #0]
 800155a:	484b      	ldr	r0, [pc, #300]	; (8001688 <parseCommands+0x2a4>)
 800155c:	f000 fdd0 	bl	8002100 <On_motor_Straigh_Roll>
		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 8001560:	484a      	ldr	r0, [pc, #296]	; (800168c <parseCommands+0x2a8>)
 8001562:	f002 f93b 	bl	80037dc <startTimer>
		parameters_Path_Robot.angle = secondParameter;
 8001566:	4b37      	ldr	r3, [pc, #220]	; (8001644 <parseCommands+0x260>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	4b4b      	ldr	r3, [pc, #300]	; (800169c <parseCommands+0x2b8>)
 800156e:	645a      	str	r2, [r3, #68]	; 0x44
		flag_RollTo = SET;
 8001570:	4b51      	ldr	r3, [pc, #324]	; (80016b8 <parseCommands+0x2d4>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO rollto EJECUTADO____\n\r");
 8001576:	4951      	ldr	r1, [pc, #324]	; (80016bc <parseCommands+0x2d8>)
 8001578:	4838      	ldr	r0, [pc, #224]	; (800165c <parseCommands+0x278>)
 800157a:	f005 fbaf 	bl	8006cdc <writeMsg>
}
 800157e:	e058      	b.n	8001632 <parseCommands+0x24e>
	}else if (strcmp(cmd, "reinit") == 0){
 8001580:	494f      	ldr	r1, [pc, #316]	; (80016c0 <parseCommands+0x2dc>)
 8001582:	4832      	ldr	r0, [pc, #200]	; (800164c <parseCommands+0x268>)
 8001584:	f7fe fe2c 	bl	80001e0 <strcmp>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10a      	bne.n	80015a4 <parseCommands+0x1c0>
		int_Config_Motor(handler_Motor_Array, &parameters_Pos_Robot, &parameters_Path_Robot, &parameter_PID_distace);
 800158e:	4b4d      	ldr	r3, [pc, #308]	; (80016c4 <parseCommands+0x2e0>)
 8001590:	4a42      	ldr	r2, [pc, #264]	; (800169c <parseCommands+0x2b8>)
 8001592:	494d      	ldr	r1, [pc, #308]	; (80016c8 <parseCommands+0x2e4>)
 8001594:	483c      	ldr	r0, [pc, #240]	; (8001688 <parseCommands+0x2a4>)
 8001596:	f000 ff99 	bl	80024cc <int_Config_Motor>
		writeMsg(&handlerUSART, "\n____COMANDO reinit EJECUTADO____\n\r");
 800159a:	494c      	ldr	r1, [pc, #304]	; (80016cc <parseCommands+0x2e8>)
 800159c:	482f      	ldr	r0, [pc, #188]	; (800165c <parseCommands+0x278>)
 800159e:	f005 fb9d 	bl	8006cdc <writeMsg>
}
 80015a2:	e046      	b.n	8001632 <parseCommands+0x24e>
	}else if (strcmp(cmd, "change") == 0){
 80015a4:	494a      	ldr	r1, [pc, #296]	; (80016d0 <parseCommands+0x2ec>)
 80015a6:	4829      	ldr	r0, [pc, #164]	; (800164c <parseCommands+0x268>)
 80015a8:	f7fe fe1a 	bl	80001e0 <strcmp>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d121      	bne.n	80015f6 <parseCommands+0x212>
		if (Mode == sLine ){
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <parseCommands+0x29c>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10a      	bne.n	80015d0 <parseCommands+0x1ec>
			Mode_dir.direction_s_r = firstParameter;
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <parseCommands+0x264>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b30      	ldr	r3, [pc, #192]	; (8001684 <parseCommands+0x2a0>)
 80015c2:	705a      	strb	r2, [r3, #1]
			change_dir_straigh_Roll(handler_Motor_Array, Mode_dir);
 80015c4:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <parseCommands+0x2a0>)
 80015c6:	6819      	ldr	r1, [r3, #0]
 80015c8:	482f      	ldr	r0, [pc, #188]	; (8001688 <parseCommands+0x2a4>)
 80015ca:	f000 fe84 	bl	80022d6 <change_dir_straigh_Roll>
 80015ce:	e00d      	b.n	80015ec <parseCommands+0x208>
		}else if (Mode == sRoll ){
 80015d0:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <parseCommands+0x29c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d109      	bne.n	80015ec <parseCommands+0x208>
			Mode_dir.direction_s_r = firstParameter;
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <parseCommands+0x264>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b29      	ldr	r3, [pc, #164]	; (8001684 <parseCommands+0x2a0>)
 80015e0:	705a      	strb	r2, [r3, #1]
			change_dir_straigh_Roll(handler_Motor_Array, Mode_dir);
 80015e2:	4b28      	ldr	r3, [pc, #160]	; (8001684 <parseCommands+0x2a0>)
 80015e4:	6819      	ldr	r1, [r3, #0]
 80015e6:	4828      	ldr	r0, [pc, #160]	; (8001688 <parseCommands+0x2a4>)
 80015e8:	f000 fe75 	bl	80022d6 <change_dir_straigh_Roll>
		writeMsg(&handlerUSART, "\n____COMANDO reinit EJECUTADO____\n\r");
 80015ec:	4937      	ldr	r1, [pc, #220]	; (80016cc <parseCommands+0x2e8>)
 80015ee:	481b      	ldr	r0, [pc, #108]	; (800165c <parseCommands+0x278>)
 80015f0:	f005 fb74 	bl	8006cdc <writeMsg>
}
 80015f4:	e01d      	b.n	8001632 <parseCommands+0x24e>
	else if (strcmp(cmd, "stop") == 0){
 80015f6:	4937      	ldr	r1, [pc, #220]	; (80016d4 <parseCommands+0x2f0>)
 80015f8:	4814      	ldr	r0, [pc, #80]	; (800164c <parseCommands+0x268>)
 80015fa:	f7fe fdf1 	bl	80001e0 <strcmp>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d112      	bne.n	800162a <parseCommands+0x246>
		stop(handler_Motor_Array); // Apagamos los motores
 8001604:	4820      	ldr	r0, [pc, #128]	; (8001688 <parseCommands+0x2a4>)
 8001606:	f000 ff3d 	bl	8002484 <stop>
		stopTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Detenemos los muestreos
 800160a:	4820      	ldr	r0, [pc, #128]	; (800168c <parseCommands+0x2a8>)
 800160c:	f002 f8f8 	bl	8003800 <stopTimer>
		flag_Go_Straigh   = RESET;
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <parseCommands+0x2ac>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
		flag_GoTo_Straigh = RESET;
 8001616:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <parseCommands+0x2bc>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
		flag_Roll         = RESET;
 800161c:	4b23      	ldr	r3, [pc, #140]	; (80016ac <parseCommands+0x2c8>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
		flag_RollTo       = RESET;
 8001622:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <parseCommands+0x2d4>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
}
 8001628:	e003      	b.n	8001632 <parseCommands+0x24e>
		writeMsg(&handlerUSART, "Comando Incorrecto :c \n");
 800162a:	492b      	ldr	r1, [pc, #172]	; (80016d8 <parseCommands+0x2f4>)
 800162c:	480b      	ldr	r0, [pc, #44]	; (800165c <parseCommands+0x278>)
 800162e:	f005 fb55 	bl	8006cdc <writeMsg>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200004d4 	.word	0x200004d4
 8001640:	20000490 	.word	0x20000490
 8001644:	2000048c 	.word	0x2000048c
 8001648:	20000488 	.word	0x20000488
 800164c:	20000468 	.word	0x20000468
 8001650:	0800d030 	.word	0x0800d030
 8001654:	0800d040 	.word	0x0800d040
 8001658:	0800d048 	.word	0x0800d048
 800165c:	20000314 	.word	0x20000314
 8001660:	0800d05c 	.word	0x0800d05c
 8001664:	0800d084 	.word	0x0800d084
 8001668:	0800d0a0 	.word	0x0800d0a0
 800166c:	0800d0c8 	.word	0x0800d0c8
 8001670:	0800d0e8 	.word	0x0800d0e8
 8001674:	0800d11c 	.word	0x0800d11c
 8001678:	0800d12c 	.word	0x0800d12c
 800167c:	0800d130 	.word	0x0800d130
 8001680:	20000516 	.word	0x20000516
 8001684:	20000514 	.word	0x20000514
 8001688:	200003c4 	.word	0x200003c4
 800168c:	200002bc 	.word	0x200002bc
 8001690:	20000519 	.word	0x20000519
 8001694:	0800d134 	.word	0x0800d134
 8001698:	0800d154 	.word	0x0800d154
 800169c:	20000548 	.word	0x20000548
 80016a0:	2000051a 	.word	0x2000051a
 80016a4:	0800d15c 	.word	0x0800d15c
 80016a8:	0800d180 	.word	0x0800d180
 80016ac:	2000051c 	.word	0x2000051c
 80016b0:	0800d188 	.word	0x0800d188
 80016b4:	0800d1ac 	.word	0x0800d1ac
 80016b8:	2000051d 	.word	0x2000051d
 80016bc:	0800d1b4 	.word	0x0800d1b4
 80016c0:	0800d1d8 	.word	0x0800d1d8
 80016c4:	20000528 	.word	0x20000528
 80016c8:	200005b0 	.word	0x200005b0
 80016cc:	0800d1e0 	.word	0x0800d1e0
 80016d0:	0800d204 	.word	0x0800d204
 80016d4:	0800d028 	.word	0x0800d028
 80016d8:	0800d20c 	.word	0x0800d20c

080016dc <usart2Rx_Callback>:


// Interrupcion usart 1
void usart2Rx_Callback(void){
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	rxData = getRxData();
 80016e0:	f005 fb24 	bl	8006d2c <getRxData>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	4b01      	ldr	r3, [pc, #4]	; (80016f0 <usart2Rx_Callback+0x14>)
 80016ea:	701a      	strb	r2, [r3, #0]
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000466 	.word	0x20000466

080016f4 <BasicTimer3_Callback>:


//Interrupción Timer 3
void BasicTimer3_Callback(void){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerPinA5);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <BasicTimer3_Callback+0x10>)
 80016fa:	f003 fa80 	bl	8004bfe <GPIOxTooglePin>
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200001fc 	.word	0x200001fc

08001708 <BasicTimer2_Callback>:

//Interrupcion Timer 2

void BasicTimer2_Callback(void){
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <BasicTimer2_Callback+0x38>)
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <BasicTimer2_Callback+0x3c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b29a      	uxth	r2, r3
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <BasicTimer2_Callback+0x40>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d803      	bhi.n	8001728 <BasicTimer2_Callback+0x20>
			flag_measurements = SET;
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <BasicTimer2_Callback+0x44>)
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
	}else{ counting_action++; }

	// EN LA FUNCION 'GO' ESTAN LAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 8001726:	e005      	b.n	8001734 <BasicTimer2_Callback+0x2c>
	}else{ counting_action++; }
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <BasicTimer2_Callback+0x40>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <BasicTimer2_Callback+0x40>)
 8001732:	801a      	strh	r2, [r3, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000517 	.word	0x20000517
 8001744:	20000000 	.word	0x20000000
 8001748:	20000522 	.word	0x20000522
 800174c:	20000518 	.word	0x20000518

08001750 <callback_extInt1>:


//Interrupciones de Exti
void callback_extInt1(void){
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	handler_Motor_Array[0]->parametersMotor.counts++;
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <callback_extInt1+0x1c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	791a      	ldrb	r2, [r3, #4]
 800175a:	3201      	adds	r2, #1
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	711a      	strb	r2, [r3, #4]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	200003c4 	.word	0x200003c4

08001770 <callback_extInt3>:

void callback_extInt3(void){
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	handler_Motor_Array[1]->parametersMotor.counts++;
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <callback_extInt3+0x1c>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	791a      	ldrb	r2, [r3, #4]
 800177a:	3201      	adds	r2, #1
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	711a      	strb	r2, [r3, #4]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	200003c4 	.word	0x200003c4

08001790 <calibracionGyros>:
//Definicion de funciones varias


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 800179c:	23c8      	movs	r3, #200	; 0xc8
 800179e:	827b      	strh	r3, [r7, #18]
	float     medidas    = 0;
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
	float     suma       = 0;
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
	uint8_t   contador   = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	76fb      	strb	r3, [r7, #27]
	float     promedio   = 0;
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]

	switch (axis) {
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d061      	beq.n	8001880 <calibracionGyros+0xf0>
 80017bc:	2b02      	cmp	r3, #2
 80017be:	dc70      	bgt.n	80018a2 <calibracionGyros+0x112>
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d015      	beq.n	80017f0 <calibracionGyros+0x60>
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d037      	beq.n	8001838 <calibracionGyros+0xa8>
				delay_ms(1); // esperamos 1 milisegundo
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 80017c8:	e06b      	b.n	80018a2 <calibracionGyros+0x112>
				medidas = readGyro_X(ptrMPUAccel);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f003 fbb8 	bl	8004f40 <readGyro_X>
 80017d0:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 80017d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80017d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80017dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e0:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 80017e4:	7efb      	ldrb	r3, [r7, #27]
 80017e6:	3301      	adds	r3, #1
 80017e8:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 80017ea:	2001      	movs	r0, #1
 80017ec:	f001 fd80 	bl	80032f0 <delay_ms>
			while (contador < numMedidas){
 80017f0:	7efb      	ldrb	r3, [r7, #27]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	8a7a      	ldrh	r2, [r7, #18]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d8e7      	bhi.n	80017ca <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 80017fa:	8a7b      	ldrh	r3, [r7, #18]
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001804:	edd7 6a07 	vldr	s13, [r7, #28]
 8001808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180c:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001810:	e048      	b.n	80018a4 <calibracionGyros+0x114>
				medidas = readGyro_Y(ptrMPUAccel);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f003 fc1c 	bl	8005050 <readGyro_Y>
 8001818:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 800181c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001820:	edd7 7a03 	vldr	s15, [r7, #12]
 8001824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001828:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 800182c:	7efb      	ldrb	r3, [r7, #27]
 800182e:	3301      	adds	r3, #1
 8001830:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001832:	2001      	movs	r0, #1
 8001834:	f001 fd5c 	bl	80032f0 <delay_ms>
			while (contador < numMedidas){
 8001838:	7efb      	ldrb	r3, [r7, #27]
 800183a:	b29b      	uxth	r3, r3
 800183c:	8a7a      	ldrh	r2, [r7, #18]
 800183e:	429a      	cmp	r2, r3
 8001840:	d8e7      	bhi.n	8001812 <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 8001842:	8a7b      	ldrh	r3, [r7, #18]
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001854:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001858:	e024      	b.n	80018a4 <calibracionGyros+0x114>
				medidas = readGyro_Z(ptrMPUAccel);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f003 fc80 	bl	8005160 <readGyro_Z>
 8001860:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001864:	ed97 7a07 	vldr	s14, [r7, #28]
 8001868:	edd7 7a03 	vldr	s15, [r7, #12]
 800186c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001870:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001874:	7efb      	ldrb	r3, [r7, #27]
 8001876:	3301      	adds	r3, #1
 8001878:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 800187a:	2001      	movs	r0, #1
 800187c:	f001 fd38 	bl	80032f0 <delay_ms>
			while (contador < numMedidas){
 8001880:	7efb      	ldrb	r3, [r7, #27]
 8001882:	b29b      	uxth	r3, r3
 8001884:	8a7a      	ldrh	r2, [r7, #18]
 8001886:	429a      	cmp	r2, r3
 8001888:	d8e7      	bhi.n	800185a <calibracionGyros+0xca>
			promedio = suma / numMedidas;
 800188a:	8a7b      	ldrh	r3, [r7, #18]
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001894:	edd7 6a07 	vldr	s13, [r7, #28]
 8001898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800189c:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80018a0:	e000      	b.n	80018a4 <calibracionGyros+0x114>
			break;
 80018a2:	bf00      	nop
		}
	}


	return promedio;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	ee07 3a90 	vmov	s15, r3
}
 80018aa:	eeb0 0a67 	vmov.f32	s0, s15
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <getAngle>:


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6178      	str	r0, [r7, #20]
 80018bc:	ed87 0a04 	vstr	s0, [r7, #16]
 80018c0:	ed87 1b02 	vstr	d1, [r7, #8]
 80018c4:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 80018c6:	6978      	ldr	r0, [r7, #20]
 80018c8:	f003 fc4a 	bl	8005160 <readGyro_Z>
 80018cc:	ee10 3a10 	vmov	r3, s0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe51 	bl	8000578 <__aeabi_f2d>
 80018d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018da:	f7fe fced 	bl	80002b8 <__aeabi_dsub>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7ff f997 	bl	8000c18 <__aeabi_d2f>
 80018ea:	4603      	mov	r3, r0
 80018ec:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 80018ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80018f2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80018f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018fa:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001960 <getAngle+0xac>
 80018fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001902:	ed97 7a04 	vldr	s14, [r7, #16]
 8001906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800190a:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 800190e:	69b8      	ldr	r0, [r7, #24]
 8001910:	f7fe fe32 	bl	8000578 <__aeabi_f2d>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <getAngle+0xb0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fe28 	bl	8000578 <__aeabi_f2d>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe fcc5 	bl	80002bc <__adddf3>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff f96d 	bl	8000c18 <__aeabi_d2f>
 800193e:	4603      	mov	r3, r0
 8001940:	4a08      	ldr	r2, [pc, #32]	; (8001964 <getAngle+0xb0>)
 8001942:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <getAngle+0xb4>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <getAngle+0xb8>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	b29a      	uxth	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <getAngle+0xb8>)
 8001954:	801a      	strh	r2, [r3, #0]
}
 8001956:	bf00      	nop
 8001958:	3720      	adds	r7, #32
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	447a0000 	.word	0x447a0000
 8001964:	20000608 	.word	0x20000608
 8001968:	200002bc 	.word	0x200002bc
 800196c:	20000520 	.word	0x20000520

08001970 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_t operation_mode){
 8001970:	b580      	push	{r7, lr}
 8001972:	ed2d 8b02 	vpush	{d8}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	4613      	mov	r3, r2
 8001980:	71fb      	strb	r3, [r7, #7]

	//Verificamos el modo
	if(operation_mode == sLine){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	f040 81d5 	bne.w	8001d34 <get_measuremets_parameters+0x3c4>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 800198a:	4bab      	ldr	r3, [pc, #684]	; (8001c38 <get_measuremets_parameters+0x2c8>)
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	4baa      	ldr	r3, [pc, #680]	; (8001c3c <get_measuremets_parameters+0x2cc>)
 8001992:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 8001994:	4baa      	ldr	r3, [pc, #680]	; (8001c40 <get_measuremets_parameters+0x2d0>)
 8001996:	edd3 6a00 	vldr	s13, [r3]
 800199a:	4baa      	ldr	r3, [pc, #680]	; (8001c44 <get_measuremets_parameters+0x2d4>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019aa:	4ba7      	ldr	r3, [pc, #668]	; (8001c48 <get_measuremets_parameters+0x2d8>)
 80019ac:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 80019b0:	4ba5      	ldr	r3, [pc, #660]	; (8001c48 <get_measuremets_parameters+0x2d8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fddf 	bl	8000578 <__aeabi_f2d>
 80019ba:	a39b      	add	r3, pc, #620	; (adr r3, 8001c28 <get_measuremets_parameters+0x2b8>)
 80019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c0:	f7fe fe32 	bl	8000628 <__aeabi_dmul>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b9e      	ldr	r3, [pc, #632]	; (8001c4c <get_measuremets_parameters+0x2dc>)
 80019d2:	f7fe ff53 	bl	800087c <__aeabi_ddiv>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80019e0:	4b97      	ldr	r3, [pc, #604]	; (8001c40 <get_measuremets_parameters+0x2d0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fdc7 	bl	8000578 <__aeabi_f2d>
 80019ea:	a38f      	add	r3, pc, #572	; (adr r3, 8001c28 <get_measuremets_parameters+0x2b8>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe fe1a 	bl	8000628 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4b92      	ldr	r3, [pc, #584]	; (8001c4c <get_measuremets_parameters+0x2dc>)
 8001a02:	f7fe ff3b 	bl	800087c <__aeabi_ddiv>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	ec43 2b17 	vmov	d7, r2, r3
 8001a0e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a12:	eef0 0a67 	vmov.f32	s1, s15
 8001a16:	f009 f977 	bl	800ad08 <sin>
 8001a1a:	eeb0 8a40 	vmov.f32	s16, s0
 8001a1e:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001a22:	4b87      	ldr	r3, [pc, #540]	; (8001c40 <get_measuremets_parameters+0x2d0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fda6 	bl	8000578 <__aeabi_f2d>
 8001a2c:	a37e      	add	r3, pc, #504	; (adr r3, 8001c28 <get_measuremets_parameters+0x2b8>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f7fe fdf9 	bl	8000628 <__aeabi_dmul>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	4b82      	ldr	r3, [pc, #520]	; (8001c4c <get_measuremets_parameters+0x2dc>)
 8001a44:	f7fe ff1a 	bl	800087c <__aeabi_ddiv>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	ec43 2b17 	vmov	d7, r2, r3
 8001a50:	eeb0 0a47 	vmov.f32	s0, s14
 8001a54:	eef0 0a67 	vmov.f32	s1, s15
 8001a58:	f009 f8ba 	bl	800abd0 <cos>
 8001a5c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a60:	eef0 7a60 	vmov.f32	s15, s1
 8001a64:	eeb0 1a47 	vmov.f32	s2, s14
 8001a68:	eef0 1a67 	vmov.f32	s3, s15
 8001a6c:	eeb0 0a48 	vmov.f32	s0, s16
 8001a70:	eef0 0a68 	vmov.f32	s1, s17
 8001a74:	f009 f9a0 	bl	800adb8 <atan2>
 8001a78:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001a7c:	a36c      	add	r3, pc, #432	; (adr r3, 8001c30 <get_measuremets_parameters+0x2c0>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f7fe fdd1 	bl	8000628 <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a94:	f7fe fc12 	bl	80002bc <__adddf3>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	e9c1 2306 	strd	r2, r3, [r1, #24]

			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001aa8:	a35f      	add	r3, pc, #380	; (adr r3, 8001c28 <get_measuremets_parameters+0x2b8>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	f7fe fdbb 	bl	8000628 <__aeabi_dmul>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	4b63      	ldr	r3, [pc, #396]	; (8001c4c <get_measuremets_parameters+0x2dc>)
 8001ac0:	f7fe fedc 	bl	800087c <__aeabi_ddiv>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	ec43 2b17 	vmov	d7, r2, r3
 8001acc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ad0:	eef0 0a67 	vmov.f32	s1, s15
 8001ad4:	f009 f918 	bl	800ad08 <sin>
 8001ad8:	eeb0 8a40 	vmov.f32	s16, s0
 8001adc:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001ae6:	a350      	add	r3, pc, #320	; (adr r3, 8001c28 <get_measuremets_parameters+0x2b8>)
 8001ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aec:	f7fe fd9c 	bl	8000628 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <get_measuremets_parameters+0x2dc>)
 8001afe:	f7fe febd 	bl	800087c <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	ec43 2b17 	vmov	d7, r2, r3
 8001b0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b0e:	eef0 0a67 	vmov.f32	s1, s15
 8001b12:	f009 f85d 	bl	800abd0 <cos>
 8001b16:	eeb0 7a40 	vmov.f32	s14, s0
 8001b1a:	eef0 7a60 	vmov.f32	s15, s1
 8001b1e:	eeb0 1a47 	vmov.f32	s2, s14
 8001b22:	eef0 1a67 	vmov.f32	s3, s15
 8001b26:	eeb0 0a48 	vmov.f32	s0, s16
 8001b2a:	eef0 0a68 	vmov.f32	s1, s17
 8001b2e:	f009 f943 	bl	800adb8 <atan2>
 8001b32:	eeb0 7a40 	vmov.f32	s14, s0
 8001b36:	eef0 7a60 	vmov.f32	s15, s1
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	ed83 7b04 	vstr	d7, [r3, #16]

			// Con la siguiente accion conseguimos que el angulo que deseamos solo este dentro del rango [-pi,pi]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	ed93 7b02 	vldr	d7, [r3, #8]
 8001b46:	eeb0 0a47 	vmov.f32	s0, s14
 8001b4a:	eef0 0a67 	vmov.f32	s1, s15
 8001b4e:	f009 f8db 	bl	800ad08 <sin>
 8001b52:	eeb0 8a40 	vmov.f32	s16, s0
 8001b56:	eef0 8a60 	vmov.f32	s17, s1
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	ed93 7b02 	vldr	d7, [r3, #8]
 8001b60:	eeb0 0a47 	vmov.f32	s0, s14
 8001b64:	eef0 0a67 	vmov.f32	s1, s15
 8001b68:	f009 f832 	bl	800abd0 <cos>
 8001b6c:	eeb0 7a40 	vmov.f32	s14, s0
 8001b70:	eef0 7a60 	vmov.f32	s15, s1
 8001b74:	eeb0 1a47 	vmov.f32	s2, s14
 8001b78:	eef0 1a67 	vmov.f32	s3, s15
 8001b7c:	eeb0 0a48 	vmov.f32	s0, s16
 8001b80:	eef0 0a68 	vmov.f32	s1, s17
 8001b84:	f009 f918 	bl	800adb8 <atan2>
 8001b88:	eeb0 7a40 	vmov.f32	s14, s0
 8001b8c:	eef0 7a60 	vmov.f32	s15, s1
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	ed83 7b02 	vstr	d7, [r3, #8]
														cos(ptrParameter_position->rad_relativo));

			//Calculamos la velocidad
			if (Mode_dir.direction_s_r == SET){
 8001b96:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <get_measuremets_parameters+0x2e0>)
 8001b98:	785b      	ldrb	r3, [r3, #1]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d15e      	bne.n	8001c5c <get_measuremets_parameters+0x2ec>

				// SI estamos aqui se tiene una direccion deseada hacia adelante
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	791b      	ldrb	r3, [r3, #4]
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bac:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <get_measuremets_parameters+0x2e4>)
 8001bae:	edd3 7a00 	vldr	s15, [r3]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bba:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	791b      	ldrb	r3, [r3, #4]
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <get_measuremets_parameters+0x2e8>)
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bde:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	edd3 6a03 	vldr	s13, [r3, #12]
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <get_measuremets_parameters+0x2cc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bfe:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	3304      	adds	r3, #4
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <get_measuremets_parameters+0x2cc>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	ee07 3a90 	vmov	s15, r3
 8001c14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c22:	edc3 7a02 	vstr	s15, [r3, #8]
 8001c26:	e065      	b.n	8001cf4 <get_measuremets_parameters+0x384>
 8001c28:	54442d18 	.word	0x54442d18
 8001c2c:	400921fb 	.word	0x400921fb
 8001c30:	1a63c1f8 	.word	0x1a63c1f8
 8001c34:	404ca5dc 	.word	0x404ca5dc
 8001c38:	20000520 	.word	0x20000520
 8001c3c:	20000524 	.word	0x20000524
 8001c40:	20000608 	.word	0x20000608
 8001c44:	20000522 	.word	0x20000522
 8001c48:	2000060c 	.word	0x2000060c
 8001c4c:	40668000 	.word	0x40668000
 8001c50:	20000514 	.word	0x20000514
 8001c54:	20000004 	.word	0x20000004
 8001c58:	20000008 	.word	0x20000008

			}else{
				// SI estamos aqui se tiene una direccion deseada hacia atras
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	791b      	ldrb	r3, [r3, #4]
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c6a:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <get_measuremets_parameters+0x3ac>)
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	eef1 7a67 	vneg.f32	s15, s15
 8001c7c:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3304      	adds	r3, #4
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	791b      	ldrb	r3, [r3, #4]
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c90:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <get_measuremets_parameters+0x3b0>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	eef1 7a67 	vneg.f32	s15, s15
 8001ca4:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cb0:	eef1 6a67 	vneg.f32	s13, s15
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <get_measuremets_parameters+0x3b4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cc8:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cd6:	eef1 6a67 	vneg.f32	s13, s15
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <get_measuremets_parameters+0x3b4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf0:	edc3 7a02 	vstr	s15, [r3, #8]

			}

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2200      	movs	r2, #0
 8001d04:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <get_measuremets_parameters+0x3b8>)
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <get_measuremets_parameters+0x3bc>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <get_measuremets_parameters+0x3c0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	801a      	strh	r2, [r3, #0]
		//Combinar ambos ángulos
//		ang_complementary = ptrParameter_position->grad_relativo + ang_for_Displament;
	}
	else{  __NOP(); }

}
 8001d1a:	e1de      	b.n	80020da <get_measuremets_parameters+0x76a>
 8001d1c:	20000004 	.word	0x20000004
 8001d20:	20000008 	.word	0x20000008
 8001d24:	20000524 	.word	0x20000524
 8001d28:	20000608 	.word	0x20000608
 8001d2c:	20000520 	.word	0x20000520
 8001d30:	20000522 	.word	0x20000522
	else if(Mode == sRoll)
 8001d34:	4bb0      	ldr	r3, [pc, #704]	; (8001ff8 <get_measuremets_parameters+0x688>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	f040 81cd 	bne.w	80020d8 <get_measuremets_parameters+0x768>
			time_accion = time_accumulated;
 8001d3e:	4baf      	ldr	r3, [pc, #700]	; (8001ffc <get_measuremets_parameters+0x68c>)
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	4bae      	ldr	r3, [pc, #696]	; (8002000 <get_measuremets_parameters+0x690>)
 8001d46:	601a      	str	r2, [r3, #0]
			promAng = sum_ang / counting_action;
 8001d48:	4bae      	ldr	r3, [pc, #696]	; (8002004 <get_measuremets_parameters+0x694>)
 8001d4a:	edd3 6a00 	vldr	s13, [r3]
 8001d4e:	4bae      	ldr	r3, [pc, #696]	; (8002008 <get_measuremets_parameters+0x698>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	ee07 3a90 	vmov	s15, r3
 8001d56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d5e:	4bab      	ldr	r3, [pc, #684]	; (800200c <get_measuremets_parameters+0x69c>)
 8001d60:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8001d64:	4ba9      	ldr	r3, [pc, #676]	; (800200c <get_measuremets_parameters+0x69c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fc05 	bl	8000578 <__aeabi_f2d>
 8001d6e:	a39e      	add	r3, pc, #632	; (adr r3, 8001fe8 <get_measuremets_parameters+0x678>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fc58 	bl	8000628 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	4ba2      	ldr	r3, [pc, #648]	; (8002010 <get_measuremets_parameters+0x6a0>)
 8001d86:	f7fe fd79 	bl	800087c <__aeabi_ddiv>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	68b9      	ldr	r1, [r7, #8]
 8001d90:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001d94:	4b9b      	ldr	r3, [pc, #620]	; (8002004 <get_measuremets_parameters+0x694>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbed 	bl	8000578 <__aeabi_f2d>
 8001d9e:	a392      	add	r3, pc, #584	; (adr r3, 8001fe8 <get_measuremets_parameters+0x678>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fc40 	bl	8000628 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	4b96      	ldr	r3, [pc, #600]	; (8002010 <get_measuremets_parameters+0x6a0>)
 8001db6:	f7fe fd61 	bl	800087c <__aeabi_ddiv>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	ec43 2b17 	vmov	d7, r2, r3
 8001dc2:	eeb0 0a47 	vmov.f32	s0, s14
 8001dc6:	eef0 0a67 	vmov.f32	s1, s15
 8001dca:	f008 ff9d 	bl	800ad08 <sin>
 8001dce:	eeb0 8a40 	vmov.f32	s16, s0
 8001dd2:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001dd6:	4b8b      	ldr	r3, [pc, #556]	; (8002004 <get_measuremets_parameters+0x694>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fbcc 	bl	8000578 <__aeabi_f2d>
 8001de0:	a381      	add	r3, pc, #516	; (adr r3, 8001fe8 <get_measuremets_parameters+0x678>)
 8001de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de6:	f7fe fc1f 	bl	8000628 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b86      	ldr	r3, [pc, #536]	; (8002010 <get_measuremets_parameters+0x6a0>)
 8001df8:	f7fe fd40 	bl	800087c <__aeabi_ddiv>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	ec43 2b17 	vmov	d7, r2, r3
 8001e04:	eeb0 0a47 	vmov.f32	s0, s14
 8001e08:	eef0 0a67 	vmov.f32	s1, s15
 8001e0c:	f008 fee0 	bl	800abd0 <cos>
 8001e10:	eeb0 7a40 	vmov.f32	s14, s0
 8001e14:	eef0 7a60 	vmov.f32	s15, s1
 8001e18:	eeb0 1a47 	vmov.f32	s2, s14
 8001e1c:	eef0 1a67 	vmov.f32	s3, s15
 8001e20:	eeb0 0a48 	vmov.f32	s0, s16
 8001e24:	eef0 0a68 	vmov.f32	s1, s17
 8001e28:	f008 ffc6 	bl	800adb8 <atan2>
 8001e2c:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001e30:	a36f      	add	r3, pc, #444	; (adr r3, 8001ff0 <get_measuremets_parameters+0x680>)
 8001e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e36:	f7fe fbf7 	bl	8000628 <__aeabi_dmul>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e48:	f7fe fa38 	bl	80002bc <__adddf3>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001e5c:	a362      	add	r3, pc, #392	; (adr r3, 8001fe8 <get_measuremets_parameters+0x678>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	f7fe fbe1 	bl	8000628 <__aeabi_dmul>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	4b67      	ldr	r3, [pc, #412]	; (8002010 <get_measuremets_parameters+0x6a0>)
 8001e74:	f7fe fd02 	bl	800087c <__aeabi_ddiv>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	ec43 2b17 	vmov	d7, r2, r3
 8001e80:	eeb0 0a47 	vmov.f32	s0, s14
 8001e84:	eef0 0a67 	vmov.f32	s1, s15
 8001e88:	f008 ff3e 	bl	800ad08 <sin>
 8001e8c:	eeb0 8a40 	vmov.f32	s16, s0
 8001e90:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001e9a:	a353      	add	r3, pc, #332	; (adr r3, 8001fe8 <get_measuremets_parameters+0x678>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	f7fe fbc2 	bl	8000628 <__aeabi_dmul>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	4b57      	ldr	r3, [pc, #348]	; (8002010 <get_measuremets_parameters+0x6a0>)
 8001eb2:	f7fe fce3 	bl	800087c <__aeabi_ddiv>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	ec43 2b17 	vmov	d7, r2, r3
 8001ebe:	eeb0 0a47 	vmov.f32	s0, s14
 8001ec2:	eef0 0a67 	vmov.f32	s1, s15
 8001ec6:	f008 fe83 	bl	800abd0 <cos>
 8001eca:	eeb0 7a40 	vmov.f32	s14, s0
 8001ece:	eef0 7a60 	vmov.f32	s15, s1
 8001ed2:	eeb0 1a47 	vmov.f32	s2, s14
 8001ed6:	eef0 1a67 	vmov.f32	s3, s15
 8001eda:	eeb0 0a48 	vmov.f32	s0, s16
 8001ede:	eef0 0a68 	vmov.f32	s1, s17
 8001ee2:	f008 ff69 	bl	800adb8 <atan2>
 8001ee6:	eeb0 7a40 	vmov.f32	s14, s0
 8001eea:	eef0 7a60 	vmov.f32	s15, s1
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	ed83 7b04 	vstr	d7, [r3, #16]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	ed93 7b02 	vldr	d7, [r3, #8]
 8001efa:	eeb0 0a47 	vmov.f32	s0, s14
 8001efe:	eef0 0a67 	vmov.f32	s1, s15
 8001f02:	f008 ff01 	bl	800ad08 <sin>
 8001f06:	eeb0 8a40 	vmov.f32	s16, s0
 8001f0a:	eef0 8a60 	vmov.f32	s17, s1
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	ed93 7b02 	vldr	d7, [r3, #8]
 8001f14:	eeb0 0a47 	vmov.f32	s0, s14
 8001f18:	eef0 0a67 	vmov.f32	s1, s15
 8001f1c:	f008 fe58 	bl	800abd0 <cos>
 8001f20:	eeb0 7a40 	vmov.f32	s14, s0
 8001f24:	eef0 7a60 	vmov.f32	s15, s1
 8001f28:	eeb0 1a47 	vmov.f32	s2, s14
 8001f2c:	eef0 1a67 	vmov.f32	s3, s15
 8001f30:	eeb0 0a48 	vmov.f32	s0, s16
 8001f34:	eef0 0a68 	vmov.f32	s1, s17
 8001f38:	f008 ff3e 	bl	800adb8 <atan2>
 8001f3c:	eeb0 7a40 	vmov.f32	s14, s0
 8001f40:	eef0 7a60 	vmov.f32	s15, s1
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	ed83 7b02 	vstr	d7, [r3, #8]
			if (Mode_dir.direction_s_r == SET){
 8001f4a:	4b32      	ldr	r3, [pc, #200]	; (8002014 <get_measuremets_parameters+0x6a4>)
 8001f4c:	785b      	ldrb	r3, [r3, #1]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d166      	bne.n	8002020 <get_measuremets_parameters+0x6b0>
				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	791b      	ldrb	r3, [r3, #4]
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f60:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <get_measuremets_parameters+0x6a8>)
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3304      	adds	r3, #4
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	791b      	ldrb	r3, [r3, #4]
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f82:	4b26      	ldr	r3, [pc, #152]	; (800201c <get_measuremets_parameters+0x6ac>)
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	3304      	adds	r3, #4
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	eef1 7a67 	vneg.f32	s15, s15
 8001f96:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <get_measuremets_parameters+0x690>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb6:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fc4:	eef1 6a67 	vneg.f32	s13, s15
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <get_measuremets_parameters+0x690>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	ee07 3a90 	vmov	s15, r3
 8001fd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fde:	edc3 7a02 	vstr	s15, [r3, #8]
 8001fe2:	e065      	b.n	80020b0 <get_measuremets_parameters+0x740>
 8001fe4:	f3af 8000 	nop.w
 8001fe8:	54442d18 	.word	0x54442d18
 8001fec:	400921fb 	.word	0x400921fb
 8001ff0:	1a63c1f8 	.word	0x1a63c1f8
 8001ff4:	404ca5dc 	.word	0x404ca5dc
 8001ff8:	20000516 	.word	0x20000516
 8001ffc:	20000520 	.word	0x20000520
 8002000:	20000524 	.word	0x20000524
 8002004:	20000608 	.word	0x20000608
 8002008:	20000522 	.word	0x20000522
 800200c:	2000060c 	.word	0x2000060c
 8002010:	40668000 	.word	0x40668000
 8002014:	20000514 	.word	0x20000514
 8002018:	20000004 	.word	0x20000004
 800201c:	20000008 	.word	0x20000008
				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	791b      	ldrb	r3, [r3, #4]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800202e:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <get_measuremets_parameters+0x778>)
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	eef1 7a67 	vneg.f32	s15, s15
 8002040:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3304      	adds	r3, #4
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	791b      	ldrb	r3, [r3, #4]
 800204c:	ee07 3a90 	vmov	s15, r3
 8002050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <get_measuremets_parameters+0x77c>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3304      	adds	r3, #4
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002064:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002070:	eef1 6a67 	vneg.f32	s13, s15
 8002074:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <get_measuremets_parameters+0x780>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	ee07 3a90 	vmov	s15, r3
 800207c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002088:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3304      	adds	r3, #4
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	edd3 6a03 	vldr	s13, [r3, #12]
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <get_measuremets_parameters+0x780>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3304      	adds	r3, #4
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ac:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2200      	movs	r2, #0
 80020b6:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3304      	adds	r3, #4
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2200      	movs	r2, #0
 80020c0:	711a      	strb	r2, [r3, #4]
			sum_ang = 0;
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <get_measuremets_parameters+0x784>)
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
			time_accumulated = 0;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <get_measuremets_parameters+0x788>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 80020d0:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <get_measuremets_parameters+0x78c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	801a      	strh	r2, [r3, #0]
}
 80020d6:	e000      	b.n	80020da <get_measuremets_parameters+0x76a>
	else{  __NOP(); }
 80020d8:	bf00      	nop
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	ecbd 8b02 	vpop	{d8}
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000004 	.word	0x20000004
 80020ec:	20000008 	.word	0x20000008
 80020f0:	20000524 	.word	0x20000524
 80020f4:	20000608 	.word	0x20000608
 80020f8:	20000520 	.word	0x20000520
 80020fc:	20000522 	.word	0x20000522

08002100 <On_motor_Straigh_Roll>:


void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == sLine){
 800210a:	783b      	ldrb	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d120      	bne.n	8002152 <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f844 	bl	80021a0 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	4618      	mov	r0, r3
 8002120:	f003 fad0 	bl	80056c4 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	2101      	movs	r1, #1
 800212c:	4618      	mov	r0, r3
 800212e:	f002 fd1a 	bl	8004b66 <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3304      	adds	r3, #4
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213a:	4618      	mov	r0, r3
 800213c:	f003 fac2 	bl	80056c4 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	2101      	movs	r1, #1
 800214a:	4618      	mov	r0, r3
 800214c:	f002 fd0b 	bl	8004b66 <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 8002150:	e022      	b.n	8002198 <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == sRoll){
 8002152:	783b      	ldrb	r3, [r7, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d11f      	bne.n	8002198 <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8002158:	6839      	ldr	r1, [r7, #0]
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f820 	bl	80021a0 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	4618      	mov	r0, r3
 8002168:	f003 faac 	bl	80056c4 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	2101      	movs	r1, #1
 8002174:	4618      	mov	r0, r3
 8002176:	f002 fcf6 	bl	8004b66 <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3304      	adds	r3, #4
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	4618      	mov	r0, r3
 8002184:	f003 fa9e 	bl	80056c4 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3304      	adds	r3, #4
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	2101      	movs	r1, #1
 8002192:	4618      	mov	r0, r3
 8002194:	f002 fce7 	bl	8004b66 <GPIO_WritePin_Afopt>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == sLine){
 80021aa:	783b      	ldrb	r3, [r7, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d143      	bne.n	8002238 <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	7f1a      	ldrb	r2, [r3, #28]
 80021b6:	787b      	ldrb	r3, [r7, #1]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d018      	beq.n	80021ee <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	787a      	ldrb	r2, [r7, #1]
 80021c2:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6a1a      	ldr	r2, [r3, #32]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	7f1b      	ldrb	r3, [r3, #28]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	4619      	mov	r1, r3
 80021dc:	4610      	mov	r0, r2
 80021de:	f002 fcc2 	bl	8004b66 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 fe03 	bl	8005df4 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3304      	adds	r3, #4
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	7f1a      	ldrb	r2, [r3, #28]
 80021f6:	787b      	ldrb	r3, [r7, #1]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d068      	beq.n	80022ce <set_direction_straigh_roll+0x12e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3304      	adds	r3, #4
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	787a      	ldrb	r2, [r7, #1]
 8002204:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3304      	adds	r3, #4
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6a1a      	ldr	r2, [r3, #32]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3304      	adds	r3, #4
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	7f1b      	ldrb	r3, [r3, #28]
 8002216:	2b00      	cmp	r3, #0
 8002218:	bf0c      	ite	eq
 800221a:	2301      	moveq	r3, #1
 800221c:	2300      	movne	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4619      	mov	r1, r3
 8002222:	4610      	mov	r0, r2
 8002224:	f002 fc9f 	bl	8004b66 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3304      	adds	r3, #4
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	4618      	mov	r0, r3
 8002232:	f003 fddf 	bl	8005df4 <PWMx_Toggle>
			}
			// Puede que no analice ningun if y simplemente no haga nada


	}
}
 8002236:	e04a      	b.n	80022ce <set_direction_straigh_roll+0x12e>
	}else if (operation_mode_dir.Mode == sRoll){
 8002238:	783b      	ldrb	r3, [r7, #0]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d147      	bne.n	80022ce <set_direction_straigh_roll+0x12e>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	7f1a      	ldrb	r2, [r3, #28]
 8002244:	787b      	ldrb	r3, [r7, #1]
 8002246:	429a      	cmp	r2, r3
 8002248:	d11d      	bne.n	8002286 <set_direction_straigh_roll+0xe6>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 800224a:	787b      	ldrb	r3, [r7, #1]
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf0c      	ite	eq
 8002250:	2301      	moveq	r3, #1
 8002252:	2300      	movne	r3, #0
 8002254:	b2da      	uxtb	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6a1a      	ldr	r2, [r3, #32]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	7f1b      	ldrb	r3, [r3, #28]
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f002 fc76 	bl	8004b66 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	4618      	mov	r0, r3
 8002282:	f003 fdb7 	bl	8005df4 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3304      	adds	r3, #4
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	7f1a      	ldrb	r2, [r3, #28]
 800228e:	787b      	ldrb	r3, [r7, #1]
 8002290:	429a      	cmp	r2, r3
 8002292:	d01c      	beq.n	80022ce <set_direction_straigh_roll+0x12e>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3304      	adds	r3, #4
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	787a      	ldrb	r2, [r7, #1]
 800229c:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3304      	adds	r3, #4
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6a1a      	ldr	r2, [r3, #32]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3304      	adds	r3, #4
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	7f1b      	ldrb	r3, [r3, #28]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bf0c      	ite	eq
 80022b2:	2301      	moveq	r3, #1
 80022b4:	2300      	movne	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	4619      	mov	r1, r3
 80022ba:	4610      	mov	r0, r2
 80022bc:	f002 fc53 	bl	8004b66 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3304      	adds	r3, #4
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 fd93 	bl	8005df4 <PWMx_Toggle>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <change_dir_straigh_Roll>:

void change_dir_straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	8039      	strh	r1, [r7, #0]

	if (operation_mode_dir.Mode == sLine){
 80022e0:	783b      	ldrb	r3, [r7, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d161      	bne.n	80023aa <change_dir_straigh_Roll+0xd4>
		// Si estamos aqui es porque queremos cambiar la direccion en linea recta correctamente

		// antes de cambiar la direccion apagamos los motores
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,RESET);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f002 fc39 	bl	8004b66 <GPIO_WritePin_Afopt>
		GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3304      	adds	r3, #4
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f002 fc31 	bl	8004b66 <GPIO_WritePin_Afopt>

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	7f1a      	ldrb	r2, [r3, #28]
 800230a:	787b      	ldrb	r3, [r7, #1]
 800230c:	429a      	cmp	r2, r3
 800230e:	d018      	beq.n	8002342 <change_dir_straigh_Roll+0x6c>
			// si estamos aqui es porque se quiere cambiar la direccion del robot

			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	787a      	ldrb	r2, [r7, #1]
 8002316:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6a1a      	ldr	r2, [r3, #32]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	7f1b      	ldrb	r3, [r3, #28]
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf0c      	ite	eq
 8002328:	2301      	moveq	r3, #1
 800232a:	2300      	movne	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4619      	mov	r1, r3
 8002330:	4610      	mov	r0, r2
 8002332:	f002 fc18 	bl	8004b66 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	4618      	mov	r0, r3
 800233e:	f003 fd59 	bl	8005df4 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	7f1a      	ldrb	r2, [r3, #28]
 800234a:	787b      	ldrb	r3, [r7, #1]
 800234c:	429a      	cmp	r2, r3
 800234e:	d01c      	beq.n	800238a <change_dir_straigh_Roll+0xb4>
			// si estamos aqui es porque se quiere cambiar la direccion del robot
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3304      	adds	r3, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	787a      	ldrb	r2, [r7, #1]
 8002358:	771a      	strb	r2, [r3, #28]
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3304      	adds	r3, #4
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6a1a      	ldr	r2, [r3, #32]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	7f1b      	ldrb	r3, [r3, #28]
 800236a:	2b00      	cmp	r3, #0
 800236c:	bf0c      	ite	eq
 800236e:	2301      	moveq	r3, #1
 8002370:	2300      	movne	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	4619      	mov	r1, r3
 8002376:	4610      	mov	r0, r2
 8002378:	f002 fbf5 	bl	8004b66 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3304      	adds	r3, #4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	4618      	mov	r0, r3
 8002386:	f003 fd35 	bl	8005df4 <PWMx_Toggle>
		}
		// Puede que no analice ningún if y simplemente no haga nada


		// volvemos a encender los motores
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	2101      	movs	r1, #1
 8002392:	4618      	mov	r0, r3
 8002394:	f002 fbe7 	bl	8004b66 <GPIO_WritePin_Afopt>
		GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3304      	adds	r3, #4
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	2101      	movs	r1, #1
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 fbdf 	bl	8004b66 <GPIO_WritePin_Afopt>
			// volvemos a encender los motores
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);

	}
}
 80023a8:	e068      	b.n	800247c <change_dir_straigh_Roll+0x1a6>
	}else if (operation_mode_dir.Mode == sRoll){
 80023aa:	783b      	ldrb	r3, [r7, #0]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d165      	bne.n	800247c <change_dir_straigh_Roll+0x1a6>
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,RESET);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f002 fbd4 	bl	8004b66 <GPIO_WritePin_Afopt>
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3304      	adds	r3, #4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f002 fbcc 	bl	8004b66 <GPIO_WritePin_Afopt>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	7f1a      	ldrb	r2, [r3, #28]
 80023d4:	787b      	ldrb	r3, [r7, #1]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d11d      	bne.n	8002416 <change_dir_straigh_Roll+0x140>
				ptrMotorhandler[0]->configMotor.dir = !operation_mode_dir.direction_s_r;
 80023da:	787b      	ldrb	r3, [r7, #1]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf0c      	ite	eq
 80023e0:	2301      	moveq	r3, #1
 80023e2:	2300      	movne	r3, #0
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir ); // La direccion estaba en RESET, la cambiamos a SET
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6a1a      	ldr	r2, [r3, #32]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	7f1b      	ldrb	r3, [r3, #28]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	4619      	mov	r1, r3
 8002404:	4610      	mov	r0, r2
 8002406:	f002 fbae 	bl	8004b66 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	4618      	mov	r0, r3
 8002412:	f003 fcef 	bl	8005df4 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3304      	adds	r3, #4
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	7f1a      	ldrb	r2, [r3, #28]
 800241e:	787b      	ldrb	r3, [r7, #1]
 8002420:	429a      	cmp	r2, r3
 8002422:	d01c      	beq.n	800245e <change_dir_straigh_Roll+0x188>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3304      	adds	r3, #4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	787a      	ldrb	r2, [r7, #1]
 800242c:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3304      	adds	r3, #4
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6a1a      	ldr	r2, [r3, #32]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	7f1b      	ldrb	r3, [r3, #28]
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf0c      	ite	eq
 8002442:	2301      	moveq	r3, #1
 8002444:	2300      	movne	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	4619      	mov	r1, r3
 800244a:	4610      	mov	r0, r2
 800244c:	f002 fb8b 	bl	8004b66 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	4618      	mov	r0, r3
 800245a:	f003 fccb 	bl	8005df4 <PWMx_Toggle>
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	2101      	movs	r1, #1
 8002466:	4618      	mov	r0, r3
 8002468:	f002 fb7d 	bl	8004b66 <GPIO_WritePin_Afopt>
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3304      	adds	r3, #4
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	2101      	movs	r1, #1
 8002476:	4618      	mov	r0, r3
 8002478:	f002 fb75 	bl	8004b66 <GPIO_WritePin_Afopt>
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <stop>:


void stop (Motor_Handler_t *ptrMotorhandler[2]){
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

	//DESACTIVAMOS EL MOTOR
	// APAGAMOS EL MOTOR 1 (LEFT)
		//Se enciende el motor 1
		disableOutput(ptrMotorhandler[0]->phandlerPWM);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	4618      	mov	r0, r3
 8002494:	f003 fc6e 	bl	8005d74 <disableOutput>
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN, RESET); // Apagamos el motor 1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	2100      	movs	r1, #0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f002 fb60 	bl	8004b66 <GPIO_WritePin_Afopt>
		// APAGAMOS EL MOTOR 2 (Right)
		//Se enciende el motor 2
		disableOutput(ptrMotorhandler[1]->phandlerPWM);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 fc60 	bl	8005d74 <disableOutput>
		GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3304      	adds	r3, #4
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f002 fb51 	bl	8004b66 <GPIO_WritePin_Afopt>


}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <int_Config_Motor>:


void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2],
		              Parameters_Position_t *ptrPosHandler,
					  Parameters_Path_t *ptrPathHandler ,
					  PID_Parameters_t *ptrPIDHandler){
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4a82      	ldr	r2, [pc, #520]	; (80026e8 <int_Config_Motor+0x21c>)
 80024de:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a81      	ldr	r2, [pc, #516]	; (80026ec <int_Config_Motor+0x220>)
 80024e6:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a80      	ldr	r2, [pc, #512]	; (80026f0 <int_Config_Motor+0x224>)
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a7f      	ldr	r2, [pc, #508]	; (80026f4 <int_Config_Motor+0x228>)
 80024f6:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM = &handlerPWM_1;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a7e      	ldr	r2, [pc, #504]	; (80026f8 <int_Config_Motor+0x22c>)
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a71      	ldr	r2, [pc, #452]	; (80026fc <int_Config_Motor+0x230>)
 8002538:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a6c      	ldr	r2, [pc, #432]	; (8002700 <int_Config_Motor+0x234>)
 800254e:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3304      	adds	r3, #4
 8002554:	4a6b      	ldr	r2, [pc, #428]	; (8002704 <int_Config_Motor+0x238>)
 8002556:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3304      	adds	r3, #4
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a63      	ldr	r2, [pc, #396]	; (80026ec <int_Config_Motor+0x220>)
 8002560:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3304      	adds	r3, #4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a67      	ldr	r2, [pc, #412]	; (8002708 <int_Config_Motor+0x23c>)
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3304      	adds	r3, #4
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a66      	ldr	r2, [pc, #408]	; (800270c <int_Config_Motor+0x240>)
 8002574:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3304      	adds	r3, #4
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a64      	ldr	r2, [pc, #400]	; (8002710 <int_Config_Motor+0x244>)
 800257e:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3304      	adds	r3, #4
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	3304      	adds	r3, #4
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3304      	adds	r3, #4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3304      	adds	r3, #4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3304      	adds	r3, #4
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a4e      	ldr	r2, [pc, #312]	; (80026fc <int_Config_Motor+0x230>)
 80025c2:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3304      	adds	r3, #4
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3304      	adds	r3, #4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a49      	ldr	r2, [pc, #292]	; (8002700 <int_Config_Motor+0x234>)
 80025dc:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 1.0;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002604:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	4a42      	ldr	r2, [pc, #264]	; (8002714 <int_Config_Motor+0x248>)
 800260a:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 0.8;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4a42      	ldr	r2, [pc, #264]	; (8002718 <int_Config_Motor+0x24c>)
 8002610:	619a      	str	r2, [r3, #24]

	//-------------- Parametros de posicion---------------
	ptrPosHandler->grad_global   = 0;
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrPosHandler->rad_global    = 0;
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrPosHandler->grad_relativo = 0;
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9c1 2300 	strd	r2, r3, [r1]
	ptrPosHandler->rad_relativo  = 0;
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrPosHandler->xr_position   = 0;
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrPosHandler->yr_position   = 0;
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrPosHandler->xg_position   = ptrPosHandler->xg_position_inicial = 0;
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPosHandler->yg_position   = ptrPosHandler->yg_position_inicial = 0;
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	//--------------Parametros de Path-----------------
	ptrPathHandler->angle = 0;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	645a      	str	r2, [r3, #68]	; 0x44
	ptrPathHandler->goal_Position_x = ptrPathHandler->goal_Position_y = 0;
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrPathHandler->line_Distance = 0;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	641a      	str	r2, [r3, #64]	; 0x40
	ptrPathHandler->start_position_x = ptrPathHandler->start_position_y = 0;
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	200003cc 	.word	0x200003cc
 80026ec:	41e00000 	.word	0x41e00000
 80026f0:	20000244 	.word	0x20000244
 80026f4:	2000025c 	.word	0x2000025c
 80026f8:	200002e4 	.word	0x200002e4
 80026fc:	437a0000 	.word	0x437a0000
 8002700:	42c80000 	.word	0x42c80000
 8002704:	200003f8 	.word	0x200003f8
 8002708:	20000238 	.word	0x20000238
 800270c:	20000250 	.word	0x20000250
 8002710:	200002fc 	.word	0x200002fc
 8002714:	3dcccccd 	.word	0x3dcccccd
 8002718:	3f4ccccd 	.word	0x3f4ccccd

0800271c <goTo>:
		 uint8_t *fAnglulo,
		 uint8_t *fMeasurements,
		 uint8_t *fcontrol,
		 char buff[64],
		 uint32_t distance_mm ,
		 state_dir_t operation_mode_dir){
 800271c:	b5b0      	push	{r4, r5, r7, lr}
 800271e:	b092      	sub	sp, #72	; 0x48
 8002720:	af08      	add	r7, sp, #32
 8002722:	6178      	str	r0, [r7, #20]
 8002724:	6139      	str	r1, [r7, #16]
 8002726:	60fa      	str	r2, [r7, #12]
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	ed87 0b00 	vstr	d0, [r7]

	// esta funcion se encarga de enviar al robot en una linea recta hacia una distancia especifica
	// Para ello lo que se hara es simplemente encender el robot y al mismo tiempo calcular su distancia recorrida
	double distance_to_go = 0;
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint8_t done = RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// seteamos la posicion inicial como la posicion actual global del robot
	ptrPathHandler->start_position_x = ptrPosHandler->xg_position;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrPathHandler->start_position_y = ptrPosHandler->yg_position;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	// seteamos la posicion final usando parametros polares

	//Usando el angulo actual global con respecto al eje x se tiene que
	ptrPathHandler->goal_Position_x = distance_mm * cos(ptrPosHandler->rad_global) + ptrPathHandler->start_position_x ; // usando la funcion coseno para hallar la coordenada x de llegada
 8002758:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800275a:	f7fd feeb 	bl	8000534 <__aeabi_ui2d>
 800275e:	4604      	mov	r4, r0
 8002760:	460d      	mov	r5, r1
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	ed93 7b04 	vldr	d7, [r3, #16]
 8002768:	eeb0 0a47 	vmov.f32	s0, s14
 800276c:	eef0 0a67 	vmov.f32	s1, s15
 8002770:	f008 fa2e 	bl	800abd0 <cos>
 8002774:	ec53 2b10 	vmov	r2, r3, d0
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd ff54 	bl	8000628 <__aeabi_dmul>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800278e:	f7fd fd95 	bl	80002bc <__adddf3>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrPathHandler->goal_Position_y = distance_mm * sin(ptrPosHandler->rad_global) + ptrPathHandler->start_position_y ; //usando la funcion coseno para hallar la coordenada y de llegada
 800279c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800279e:	f7fd fec9 	bl	8000534 <__aeabi_ui2d>
 80027a2:	4604      	mov	r4, r0
 80027a4:	460d      	mov	r5, r1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	ed93 7b04 	vldr	d7, [r3, #16]
 80027ac:	eeb0 0a47 	vmov.f32	s0, s14
 80027b0:	eef0 0a67 	vmov.f32	s1, s15
 80027b4:	f008 faa8 	bl	800ad08 <sin>
 80027b8:	ec53 2b10 	vmov	r2, r3, d0
 80027bc:	4620      	mov	r0, r4
 80027be:	4629      	mov	r1, r5
 80027c0:	f7fd ff32 	bl	8000628 <__aeabi_dmul>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4610      	mov	r0, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80027d2:	f7fd fd73 	bl	80002bc <__adddf3>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	// definimos los parametros del camino en funcion de la situacion actual
	calculation_parameter_distance(ptrPathHandler);
 80027e0:	68b8      	ldr	r0, [r7, #8]
 80027e2:	f002 fd45 	bl	8005270 <calculation_parameter_distance>

	On_motor_Straigh_Roll(ptrMotorhandler, operation_mode_dir); // Encendemos el robot en la direccion deseada
 80027e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027e8:	6978      	ldr	r0, [r7, #20]
 80027ea:	f7ff fc89 	bl	8002100 <On_motor_Straigh_Roll>

	while(!done){
 80027ee:	e04c      	b.n	800288a <goTo+0x16e>
		// calculamos la distancia con la libreria PosRobt.h

		distance_to_go = distance_traveled( ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80027fc:	eeb0 1a46 	vmov.f32	s2, s12
 8002800:	eef0 1a66 	vmov.f32	s3, s13
 8002804:	eeb0 0a47 	vmov.f32	s0, s14
 8002808:	eef0 0a67 	vmov.f32	s1, s15
 800280c:	68b8      	ldr	r0, [r7, #8]
 800280e:	f002 fe1b 	bl	8005448 <distance_traveled>
 8002812:	ed87 0b06 	vstr	d0, [r7, #24]

		// Función de control del robot
		go(ptrMotorhandler,
 8002816:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800281a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800281e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002820:	9305      	str	r3, [sp, #20]
 8002822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002824:	9304      	str	r3, [sp, #16]
 8002826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002828:	9303      	str	r3, [sp, #12]
 800282a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800282c:	9302      	str	r3, [sp, #8]
 800282e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	ed97 0b00 	vldr	d0, [r7]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	6939      	ldr	r1, [r7, #16]
 8002842:	6978      	ldr	r0, [r7, #20]
 8002844:	f000 f988 	bl	8002b58 <go>
		   fMeasurements,
		   fcontrol,
		   buff,
		   operation_mode_dir); // Con esta funcion hacemos que el robot simplemente se mueva

		if (!(distance_to_go < distance_mm)){
 8002848:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800284a:	f7fd fe73 	bl	8000534 <__aeabi_ui2d>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	2101      	movs	r1, #1
 8002854:	460c      	mov	r4, r1
 8002856:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800285a:	f7fe f957 	bl	8000b0c <__aeabi_dcmplt>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <goTo+0x14c>
 8002864:	2300      	movs	r3, #0
 8002866:	461c      	mov	r4, r3
 8002868:	b2e3      	uxtb	r3, r4
 800286a:	f083 0301 	eor.w	r3, r3, #1
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <goTo+0x16a>
			// Paramos el proceso
			done = !done;
 8002874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		// Observamos si hay algun comando en espera
		fillComand();
 8002886:	f000 fa3f 	bl	8002d08 <fillComand>
	while(!done){
 800288a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0ae      	beq.n	80027f0 <goTo+0xd4>

	}


	return done;
 8002892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002896:	4618      	mov	r0, r3
 8002898:	3728      	adds	r7, #40	; 0x28
 800289a:	46bd      	mov	sp, r7
 800289c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080028a0 <PID_control>:


void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,
		        Parameters_Path_t *ptrPathHandler,
				Parameters_Position_t *ptrPosHandler,
				PID_Parameters_t *ptrPIDHandler){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]

	//Conversion de tiempo
	float sampling_time = ((float) (handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period * timeAction_TIMER_Sampling) / 1000); //[s]
 80028ae:	4b6f      	ldr	r3, [pc, #444]	; (8002a6c <PID_control+0x1cc>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	4a6f      	ldr	r2, [pc, #444]	; (8002a70 <PID_control+0x1d0>)
 80028b4:	7812      	ldrb	r2, [r2, #0]
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028c2:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8002a74 <PID_control+0x1d4>
 80028c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028ca:	edc7 7a05 	vstr	s15, [r7, #20]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80028da:	eeb0 1a46 	vmov.f32	s2, s12
 80028de:	eef0 1a66 	vmov.f32	s3, s13
 80028e2:	eeb0 0a47 	vmov.f32	s0, s14
 80028e6:	eef0 0a67 	vmov.f32	s1, s15
 80028ea:	68b8      	ldr	r0, [r7, #8]
 80028ec:	f002 fd68 	bl	80053c0 <distance_to_straight_line>
 80028f0:	ec51 0b10 	vmov	r0, r1, d0
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	4b5f      	ldr	r3, [pc, #380]	; (8002a78 <PID_control+0x1d8>)
 80028fa:	f7fd ffbf 	bl	800087c <__aeabi_ddiv>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	f7fe f987 	bl	8000c18 <__aeabi_d2f>
 800290a:	4603      	mov	r3, r0
 800290c:	613b      	str	r3, [r7, #16]

	//Aplicacion del PID par el control de la distancia del robot al centro
	PID_calc(ptrPIDHandler, sampling_time, 0,  distance_recta);
 800290e:	ed97 1a04 	vldr	s2, [r7, #16]
 8002912:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8002a7c <PID_control+0x1dc>
 8002916:	ed97 0a05 	vldr	s0, [r7, #20]
 800291a:	6838      	ldr	r0, [r7, #0]
 800291c:	f000 f8bc 	bl	8002a98 <PID_calc>

	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint - ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 8002920:	4b57      	ldr	r3, [pc, #348]	; (8002a80 <PID_control+0x1e0>)
 8002922:	ed93 7a00 	vldr	s14, [r3]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	edd3 7a00 	vldr	s15, [r3]
 800292c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002930:	4b54      	ldr	r3, [pc, #336]	; (8002a84 <PID_control+0x1e4>)
 8002932:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint + ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	ed93 7a00 	vldr	s14, [r3]
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <PID_control+0x1e0>)
 800293e:	edd3 7a00 	vldr	s15, [r3]
 8002942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002946:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <PID_control+0x1e8>)
 8002948:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <PID_control+0x1e4>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002960:	eeb0 1a47 	vmov.f32	s2, s14
 8002964:	eef0 0a67 	vmov.f32	s1, s15
 8002968:	ed97 0a05 	vldr	s0, [r7, #20]
 800296c:	4610      	mov	r0, r2
 800296e:	f000 f893 	bl	8002a98 <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3304      	adds	r3, #4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4b43      	ldr	r3, [pc, #268]	; (8002a88 <PID_control+0x1e8>)
 800297c:	edd3 7a00 	vldr	s15, [r3]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3304      	adds	r3, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	ed93 7a02 	vldr	s14, [r3, #8]
 800298a:	eeb0 1a47 	vmov.f32	s2, s14
 800298e:	eef0 0a67 	vmov.f32	s1, s15
 8002992:	ed97 0a05 	vldr	s0, [r7, #20]
 8002996:	4610      	mov	r0, r2
 8002998:	f000 f87e 	bl	8002a98 <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	ed93 7a05 	vldr	s14, [r3, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	edd3 7a00 	vldr	s15, [r3]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b6:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3304      	adds	r3, #4
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	ed93 7a05 	vldr	s14, [r3, #20]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3304      	adds	r3, #4
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	edd3 7a00 	vldr	s15, [r3]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3304      	adds	r3, #4
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029da:	edc3 7a05 	vstr	s15, [r3, #20]

	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80029e6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002a8c <PID_control+0x1ec>
 80029ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f2:	db04      	blt.n	80029fe <PID_control+0x15e>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a25      	ldr	r2, [pc, #148]	; (8002a90 <PID_control+0x1f0>)
 80029fa:	615a      	str	r2, [r3, #20]
 80029fc:	e00e      	b.n	8002a1c <PID_control+0x17c>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a06:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a12:	d803      	bhi.n	8002a1c <PID_control+0x17c>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1e      	ldr	r2, [pc, #120]	; (8002a94 <PID_control+0x1f4>)
 8002a1a:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a26:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002a8c <PID_control+0x1ec>
 8002a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a32:	db05      	blt.n	8002a40 <PID_control+0x1a0>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3304      	adds	r3, #4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a15      	ldr	r2, [pc, #84]	; (8002a90 <PID_control+0x1f0>)
 8002a3c:	615a      	str	r2, [r3, #20]
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
	}

}
 8002a3e:	e011      	b.n	8002a64 <PID_control+0x1c4>
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3304      	adds	r3, #4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a4a:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a56:	d900      	bls.n	8002a5a <PID_control+0x1ba>
}
 8002a58:	e004      	b.n	8002a64 <PID_control+0x1c4>
		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a0c      	ldr	r2, [pc, #48]	; (8002a94 <PID_control+0x1f4>)
 8002a62:	615a      	str	r2, [r3, #20]
}
 8002a64:	bf00      	nop
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	200002bc 	.word	0x200002bc
 8002a70:	20000000 	.word	0x20000000
 8002a74:	447a0000 	.word	0x447a0000
 8002a78:	408f4000 	.word	0x408f4000
 8002a7c:	00000000 	.word	0x00000000
 8002a80:	20000610 	.word	0x20000610
 8002a84:	20000614 	.word	0x20000614
 8002a88:	20000618 	.word	0x20000618
 8002a8c:	42700000 	.word	0x42700000
 8002a90:	42700000 	.word	0x42700000
 8002a94:	41b80000 	.word	0x41b80000

08002a98 <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler,
		      float time_of_sampling,
			  float setpoint,
			  float current_measure){
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002aa4:	edc7 0a01 	vstr	s1, [r7, #4]
 8002aa8:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 8002aac:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ab0:	edd7 7a00 	vldr	s15, [r7]
 8002ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	ed93 7a04 	vldr	s14, [r3, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ace:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ade:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ae2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	ed93 7a05 	vldr	s14, [r3, #20]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b00:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd*(ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b1a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b26:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 8002b2a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b36:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	60da      	str	r2, [r3, #12]
}
 8002b4c:	bf00      	nop
 8002b4e:	3724      	adds	r7, #36	; 0x24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <go>:
		state_t mode,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	6178      	str	r0, [r7, #20]
 8002b60:	6139      	str	r1, [r7, #16]
 8002b62:	60fa      	str	r2, [r7, #12]
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8002b72:	68f9      	ldr	r1, [r7, #12]
 8002b74:	ed97 1b00 	vldr	d1, [r7]
 8002b78:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8002ca4 <go+0x14c>
 8002b7c:	6938      	ldr	r0, [r7, #16]
 8002b7e:	f7fe fe99 	bl	80018b4 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8002b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00c      	beq.n	8002baa <go+0x52>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, mode);
 8002b90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b94:	461a      	mov	r2, r3
 8002b96:	68f9      	ldr	r1, [r7, #12]
 8002b98:	6978      	ldr	r0, [r7, #20]
 8002b9a:	f7fe fee9 	bl	8001970 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 8002b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
		//Levandamos la bandera de control
		*fcontrol = SET;
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	701a      	strb	r2, [r3, #0]
	}

	// Control
	if (*fcontrol){
 8002baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d073      	beq.n	8002c9a <go+0x142>

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	ed93 7a03 	vldr	s14, [r3, #12]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002bcc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002bd0:	ee16 0a90 	vmov	r0, s13
 8002bd4:	f7fd fcd0 	bl	8000578 <__aeabi_f2d>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	e9c7 2306 	strd	r2, r3, [r7, #24]

		ptrPosHandler->xr_position = distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	ed93 7b04 	vldr	d7, [r3, #16]
 8002be6:	eeb0 0a47 	vmov.f32	s0, s14
 8002bea:	eef0 0a67 	vmov.f32	s1, s15
 8002bee:	f007 ffef 	bl	800abd0 <cos>
 8002bf2:	ec51 0b10 	vmov	r0, r1, d0
 8002bf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bfa:	f7fd fd15 	bl	8000628 <__aeabi_dmul>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	68f9      	ldr	r1, [r7, #12]
 8002c04:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position = distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	ed93 7b04 	vldr	d7, [r3, #16]
 8002c0e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c12:	eef0 0a67 	vmov.f32	s1, s15
 8002c16:	f008 f877 	bl	800ad08 <sin>
 8002c1a:	ec51 0b10 	vmov	r0, r1, d0
 8002c1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c22:	f7fd fd01 	bl	8000628 <__aeabi_dmul>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	68f9      	ldr	r1, [r7, #12]
 8002c2c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002c3c:	f7fd fb3e 	bl	80002bc <__adddf3>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	68f9      	ldr	r1, [r7, #12]
 8002c46:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002c56:	f7fd fb31 	bl	80002bc <__adddf3>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	68f9      	ldr	r1, [r7, #12]
 8002c60:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

		//Convertimos el valor y imprimimos en la terminal
		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002c70:	e9cd 2300 	strd	r2, r3, [sp]
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	490b      	ldr	r1, [pc, #44]	; (8002ca8 <go+0x150>)
 8002c7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c7c:	f005 f96c 	bl	8007f58 <siprintf>

		writeMsg(&handlerUSART, buff);
 8002c80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c82:	480a      	ldr	r0, [pc, #40]	; (8002cac <go+0x154>)
 8002c84:	f004 f82a 	bl	8006cdc <writeMsg>

		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler);
 8002c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	6978      	ldr	r0, [r7, #20]
 8002c90:	f7ff fe06 	bl	80028a0 <PID_control>

		*fcontrol = RESET;
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
	}
}
 8002c9a:	bf00      	nop
 8002c9c:	3720      	adds	r7, #32
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	00000000 	.word	0x00000000
 8002ca8:	0800d224 	.word	0x0800d224
 8002cac:	20000314 	.word	0x20000314

08002cb0 <roll>:
		state_t mode,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6178      	str	r0, [r7, #20]
 8002cb8:	6139      	str	r1, [r7, #16]
 8002cba:	60fa      	str	r2, [r7, #12]
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <roll+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8002cca:	68f9      	ldr	r1, [r7, #12]
 8002ccc:	ed97 1b00 	vldr	d1, [r7]
 8002cd0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002d04 <roll+0x54>
 8002cd4:	6938      	ldr	r0, [r7, #16]
 8002cd6:	f7fe fded 	bl	80018b4 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d009      	beq.n	8002cfc <roll+0x4c>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, mode);
 8002ce8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cec:	461a      	mov	r2, r3
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	6978      	ldr	r0, [r7, #20]
 8002cf2:	f7fe fe3d 	bl	8001970 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
	}

}
 8002cfc:	bf00      	nop
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	00000000 	.word	0x00000000

08002d08 <fillComand>:



void fillComand(void){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0

	if (rxData != '\0'){
 8002d0c:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <fillComand+0x8c>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d03c      	beq.n	8002d8e <fillComand+0x86>
		writeChar(&handlerUSART, rxData);
 8002d14:	4b1f      	ldr	r3, [pc, #124]	; (8002d94 <fillComand+0x8c>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	481f      	ldr	r0, [pc, #124]	; (8002d98 <fillComand+0x90>)
 8002d1c:	f003 ffc6 	bl	8006cac <writeChar>
		bufferReception[counterReception] = rxData;
 8002d20:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <fillComand+0x94>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <fillComand+0x8c>)
 8002d28:	7819      	ldrb	r1, [r3, #0]
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <fillComand+0x98>)
 8002d2c:	5499      	strb	r1, [r3, r2]
		counterReception++;
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <fillComand+0x94>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <fillComand+0x94>)
 8002d38:	701a      	strb	r2, [r3, #0]

		if (rxData == '@'){
 8002d3a:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <fillComand+0x8c>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b40      	cmp	r3, #64	; 0x40
 8002d40:	d10f      	bne.n	8002d62 <fillComand+0x5a>
			doneTransaction = SET;
 8002d42:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <fillComand+0x9c>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]

			bufferReception[counterReception-1] = '\0';
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <fillComand+0x94>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <fillComand+0x98>)
 8002d50:	2100      	movs	r1, #0
 8002d52:	54d1      	strb	r1, [r2, r3]

			counterReception = 0;
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <fillComand+0x94>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]
			parseCommands(bufferReception);
 8002d5a:	4811      	ldr	r0, [pc, #68]	; (8002da0 <fillComand+0x98>)
 8002d5c:	f7fe fb42 	bl	80013e4 <parseCommands>
 8002d60:	e012      	b.n	8002d88 <fillComand+0x80>

		}else if (rxData == 'z'){
 8002d62:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <fillComand+0x8c>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b7a      	cmp	r3, #122	; 0x7a
 8002d68:	d10e      	bne.n	8002d88 <fillComand+0x80>

			memset(bufferReception, 0, sizeof(bufferReception));
 8002d6a:	2240      	movs	r2, #64	; 0x40
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	480c      	ldr	r0, [pc, #48]	; (8002da0 <fillComand+0x98>)
 8002d70:	f004 fb90 	bl	8007494 <memset>
			counterReception = 0;
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <fillComand+0x94>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
			writeMsg(&handlerUSART, "\n___Buffer Vaciado___\n \r");
 8002d7a:	490b      	ldr	r1, [pc, #44]	; (8002da8 <fillComand+0xa0>)
 8002d7c:	4806      	ldr	r0, [pc, #24]	; (8002d98 <fillComand+0x90>)
 8002d7e:	f003 ffad 	bl	8006cdc <writeMsg>
			rxData = '\0';
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <fillComand+0x8c>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
		}
		rxData = '\0';
 8002d88:	4b02      	ldr	r3, [pc, #8]	; (8002d94 <fillComand+0x8c>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
	}

}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000466 	.word	0x20000466
 8002d98:	20000314 	.word	0x20000314
 8002d9c:	20000464 	.word	0x20000464
 8002da0:	20000424 	.word	0x20000424
 8002da4:	20000465 	.word	0x20000465
 8002da8:	0800d234 	.word	0x0800d234

08002dac <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <ITM_SendChar+0x48>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a0e      	ldr	r2, [pc, #56]	; (8002df4 <ITM_SendChar+0x48>)
 8002dbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <ITM_SendChar+0x4c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	; (8002df8 <ITM_SendChar+0x4c>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002dce:	bf00      	nop
 8002dd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f8      	beq.n	8002dd0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002dde:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	6013      	str	r3, [r2, #0]
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000edfc 	.word	0xe000edfc
 8002df8:	e0000e00 	.word	0xe0000e00

08002dfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
	return 1;
 8002e00:	2301      	movs	r3, #1
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <_kill>:

int _kill(int pid, int sig)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e16:	f004 fb0b 	bl	8007430 <__errno>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2216      	movs	r2, #22
 8002e1e:	601a      	str	r2, [r3, #0]
	return -1;
 8002e20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <_exit>:

void _exit (int status)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e34:	f04f 31ff 	mov.w	r1, #4294967295
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ffe7 	bl	8002e0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e3e:	e7fe      	b.n	8002e3e <_exit+0x12>

08002e40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	e00a      	b.n	8002e68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e52:	f3af 8000 	nop.w
 8002e56:	4601      	mov	r1, r0
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	60ba      	str	r2, [r7, #8]
 8002e5e:	b2ca      	uxtb	r2, r1
 8002e60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	3301      	adds	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	dbf0      	blt.n	8002e52 <_read+0x12>
	}

return len;
 8002e70:	687b      	ldr	r3, [r7, #4]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e009      	b.n	8002ea0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	60ba      	str	r2, [r7, #8]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff89 	bl	8002dac <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	dbf1      	blt.n	8002e8c <_write+0x12>
	}
	return len;
 8002ea8:	687b      	ldr	r3, [r7, #4]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <_close>:

int _close(int file)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
	return -1;
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eda:	605a      	str	r2, [r3, #4]
	return 0;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <_isatty>:

int _isatty(int file)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
	return 1;
 8002ef2:	2301      	movs	r3, #1
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f1c:	480d      	ldr	r0, [pc, #52]	; (8002f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f20:	f003 ffa2 	bl	8006e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f24:	480c      	ldr	r0, [pc, #48]	; (8002f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f26:	490d      	ldr	r1, [pc, #52]	; (8002f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f28:	4a0d      	ldr	r2, [pc, #52]	; (8002f60 <LoopForever+0xe>)
  movs r3, #0
 8002f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f2c:	e002      	b.n	8002f34 <LoopCopyDataInit>

08002f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f32:	3304      	adds	r3, #4

08002f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f38:	d3f9      	bcc.n	8002f2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f3c:	4c0a      	ldr	r4, [pc, #40]	; (8002f68 <LoopForever+0x16>)
  movs r3, #0
 8002f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f40:	e001      	b.n	8002f46 <LoopFillZerobss>

08002f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f44:	3204      	adds	r2, #4

08002f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f48:	d3fb      	bcc.n	8002f42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f4a:	f004 fa77 	bl	800743c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f4e:	f7fd feb3 	bl	8000cb8 <main>

08002f52 <LoopForever>:

LoopForever:
    b LoopForever
 8002f52:	e7fe      	b.n	8002f52 <LoopForever>
  ldr   r0, =_estack
 8002f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f5c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002f60:	0800d8e8 	.word	0x0800d8e8
  ldr r2, =_sbss
 8002f64:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002f68:	20000648 	.word	0x20000648

08002f6c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f6c:	e7fe      	b.n	8002f6c <ADC_IRQHandler>
	...

08002f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	db0b      	blt.n	8002f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	f003 021f 	and.w	r2, r3, #31
 8002f88:	4907      	ldr	r1, [pc, #28]	; (8002fa8 <__NVIC_EnableIRQ+0x38>)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2001      	movs	r0, #1
 8002f92:	fa00 f202 	lsl.w	r2, r0, r2
 8002f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000e100 	.word	0xe000e100

08002fac <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <inTIM4+0x30>)
 8002fb2:	4a0b      	ldr	r2, [pc, #44]	; (8002fe0 <inTIM4+0x34>)
 8002fb4:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <inTIM4+0x30>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <inTIM4+0x30>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <inTIM4+0x30>)
 8002fc4:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fc8:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 8002fca:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <inTIM4+0x30>)
 8002fcc:	220a      	movs	r2, #10
 8002fce:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 8002fd0:	4802      	ldr	r0, [pc, #8]	; (8002fdc <inTIM4+0x30>)
 8002fd2:	f000 f807 	bl	8002fe4 <BasicTimer_Config>

}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200002d0 	.word	0x200002d0
 8002fe0:	40000800 	.word	0x40000800

08002fe4 <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff4:	b672      	cpsid	i
}
 8002ff6:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a85      	ldr	r2, [pc, #532]	; (8003214 <BasicTimer_Config+0x230>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d106      	bne.n	8003010 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8003002:	4b85      	ldr	r3, [pc, #532]	; (8003218 <BasicTimer_Config+0x234>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	4a84      	ldr	r2, [pc, #528]	; (8003218 <BasicTimer_Config+0x234>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6453      	str	r3, [r2, #68]	; 0x44
 800300e:	e030      	b.n	8003072 <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003018:	d106      	bne.n	8003028 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800301a:	4b7f      	ldr	r3, [pc, #508]	; (8003218 <BasicTimer_Config+0x234>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	4a7e      	ldr	r2, [pc, #504]	; (8003218 <BasicTimer_Config+0x234>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6413      	str	r3, [r2, #64]	; 0x40
 8003026:	e024      	b.n	8003072 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a7b      	ldr	r2, [pc, #492]	; (800321c <BasicTimer_Config+0x238>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d106      	bne.n	8003040 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8003032:	4b79      	ldr	r3, [pc, #484]	; (8003218 <BasicTimer_Config+0x234>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4a78      	ldr	r2, [pc, #480]	; (8003218 <BasicTimer_Config+0x234>)
 8003038:	f043 0302 	orr.w	r3, r3, #2
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
 800303e:	e018      	b.n	8003072 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a76      	ldr	r2, [pc, #472]	; (8003220 <BasicTimer_Config+0x23c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d106      	bne.n	8003058 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800304a:	4b73      	ldr	r3, [pc, #460]	; (8003218 <BasicTimer_Config+0x234>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	4a72      	ldr	r2, [pc, #456]	; (8003218 <BasicTimer_Config+0x234>)
 8003050:	f043 0304 	orr.w	r3, r3, #4
 8003054:	6413      	str	r3, [r2, #64]	; 0x40
 8003056:	e00c      	b.n	8003072 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a71      	ldr	r2, [pc, #452]	; (8003224 <BasicTimer_Config+0x240>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d106      	bne.n	8003070 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8003062:	4b6d      	ldr	r3, [pc, #436]	; (8003218 <BasicTimer_Config+0x234>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a6c      	ldr	r2, [pc, #432]	; (8003218 <BasicTimer_Config+0x234>)
 8003068:	f043 0308 	orr.w	r3, r3, #8
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
 800306e:	e000      	b.n	8003072 <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8003070:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003080:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6892      	ldr	r2, [r2, #8]
 800308a:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	791b      	ldrb	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 80d3 	bne.w	800323c <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0210 	bic.w	r2, r2, #16
 80030a4:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2ba0      	cmp	r3, #160	; 0xa0
 80030b0:	d022      	beq.n	80030f8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2bc8      	cmp	r3, #200	; 0xc8
 80030b6:	d01f      	beq.n	80030f8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80030be:	d01b      	beq.n	80030f8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80030c6:	d017      	beq.n	80030f8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030ce:	d013      	beq.n	80030f8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80030d6:	d00f      	beq.n	80030f8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80030de:	d00b      	beq.n	80030f8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80030e6:	d007      	beq.n	80030f8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80030ee:	d003      	beq.n	80030f8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030f6:	d10b      	bne.n	8003110 <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2264      	movs	r2, #100	; 0x64
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	3a01      	subs	r2, #1
 800310c:	62da      	str	r2, [r3, #44]	; 0x2c
 800310e:	e07c      	b.n	800320a <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003116:	d029      	beq.n	800316c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800311e:	d025      	beq.n	800316c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003126:	4293      	cmp	r3, r2
 8003128:	d020      	beq.n	800316c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003130:	d01c      	beq.n	800316c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f241 3288 	movw	r2, #5000	; 0x1388
 8003138:	4293      	cmp	r3, r2
 800313a:	d017      	beq.n	800316c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f241 7270 	movw	r2, #6000	; 0x1770
 8003142:	4293      	cmp	r3, r2
 8003144:	d012      	beq.n	800316c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f641 3258 	movw	r2, #7000	; 0x1b58
 800314c:	4293      	cmp	r3, r2
 800314e:	d00d      	beq.n	800316c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003156:	d009      	beq.n	800316c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f242 3228 	movw	r2, #9000	; 0x2328
 800315e:	4293      	cmp	r3, r2
 8003160:	d004      	beq.n	800316c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f242 7210 	movw	r2, #10000	; 0x2710
 8003168:	4293      	cmp	r3, r2
 800316a:	d10c      	bne.n	8003186 <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	3a01      	subs	r2, #1
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c
 8003184:	e041      	b.n	800320a <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800318c:	d028      	beq.n	80031e0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003194:	4293      	cmp	r3, r2
 8003196:	d023      	beq.n	80031e0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f247 5230 	movw	r2, #30000	; 0x7530
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01e      	beq.n	80031e0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f649 4240 	movw	r2, #40000	; 0x9c40
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d019      	beq.n	80031e0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f24c 3250 	movw	r2, #50000	; 0xc350
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d014      	beq.n	80031e0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f64e 2260 	movw	r2, #60000	; 0xea60
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00f      	beq.n	80031e0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4a19      	ldr	r2, [pc, #100]	; (8003228 <BasicTimer_Config+0x244>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00b      	beq.n	80031e0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4a18      	ldr	r2, [pc, #96]	; (800322c <BasicTimer_Config+0x248>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d007      	beq.n	80031e0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4a17      	ldr	r2, [pc, #92]	; (8003230 <BasicTimer_Config+0x24c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d003      	beq.n	80031e0 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4a16      	ldr	r2, [pc, #88]	; (8003234 <BasicTimer_Config+0x250>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d108      	bne.n	80031f2 <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	3a01      	subs	r2, #1
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80031f0:	e00b      	b.n	800320a <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	4a10      	ldr	r2, [pc, #64]	; (8003238 <BasicTimer_Config+0x254>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	08db      	lsrs	r3, r3, #3
 80031fe:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	3a01      	subs	r2, #1
 8003208:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2200      	movs	r2, #0
 8003210:	625a      	str	r2, [r3, #36]	; 0x24
 8003212:	e027      	b.n	8003264 <BasicTimer_Config+0x280>
 8003214:	40010000 	.word	0x40010000
 8003218:	40023800 	.word	0x40023800
 800321c:	40000400 	.word	0x40000400
 8003220:	40000800 	.word	0x40000800
 8003224:	40000c00 	.word	0x40000c00
 8003228:	00011170 	.word	0x00011170
 800322c:	00013880 	.word	0x00013880
 8003230:	00015f90 	.word	0x00015f90
 8003234:	000186a0 	.word	0x000186a0
 8003238:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0210 	orr.w	r2, r2, #16
 800324a:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3a01      	subs	r2, #1
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3a01      	subs	r2, #1
 8003262:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	7c1b      	ldrb	r3, [r3, #16]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d12d      	bne.n	80032c8 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003284:	d103      	bne.n	800328e <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 8003286:	201c      	movs	r0, #28
 8003288:	f7ff fe72 	bl	8002f70 <__NVIC_EnableIRQ>
 800328c:	e024      	b.n	80032d8 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <BasicTimer_Config+0x300>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d103      	bne.n	80032a0 <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8003298:	201d      	movs	r0, #29
 800329a:	f7ff fe69 	bl	8002f70 <__NVIC_EnableIRQ>
 800329e:	e01b      	b.n	80032d8 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <BasicTimer_Config+0x304>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d103      	bne.n	80032b2 <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 80032aa:	201e      	movs	r0, #30
 80032ac:	f7ff fe60 	bl	8002f70 <__NVIC_EnableIRQ>
 80032b0:	e012      	b.n	80032d8 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <BasicTimer_Config+0x308>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d103      	bne.n	80032c4 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 80032bc:	2032      	movs	r0, #50	; 0x32
 80032be:	f7ff fe57 	bl	8002f70 <__NVIC_EnableIRQ>
 80032c2:	e009      	b.n	80032d8 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 80032c4:	bf00      	nop
 80032c6:	e007      	b.n	80032d8 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80032d8:	b662      	cpsie	i
}
 80032da:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40000400 	.word	0x40000400
 80032e8:	40000800 	.word	0x40000800
 80032ec:	40000c00 	.word	0x40000c00

080032f0 <delay_ms>:

void delay_ms(uint16_t time_to_wait_ms){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 80032fa:	4818      	ldr	r0, [pc, #96]	; (800335c <delay_ms+0x6c>)
 80032fc:	f000 fa6e 	bl	80037dc <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	461a      	mov	r2, r3
 8003304:	0092      	lsls	r2, r2, #2
 8003306:	4413      	add	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 8003314:	e016      	b.n	8003344 <delay_ms+0x54>
		if (handlerTIM4_time.ptrTIMx->SR & TIM_SR_UIF)  {
 8003316:	4b11      	ldr	r3, [pc, #68]	; (800335c <delay_ms+0x6c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00f      	beq.n	8003344 <delay_ms+0x54>
			CNT += handlerTIM4_time.ptrTIMx->ARR + 1;
 8003324:	4b0d      	ldr	r3, [pc, #52]	; (800335c <delay_ms+0x6c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	3301      	adds	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	89fb      	ldrh	r3, [r7, #14]
 8003330:	4413      	add	r3, r2
 8003332:	81fb      	strh	r3, [r7, #14]
			handlerTIM4_time.ptrTIMx->SR &= ~TIM_SR_UIF;
 8003334:	4b09      	ldr	r3, [pc, #36]	; (800335c <delay_ms+0x6c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <delay_ms+0x6c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	611a      	str	r2, [r3, #16]
	while (CNT < limit){
 8003344:	89fa      	ldrh	r2, [r7, #14]
 8003346:	89bb      	ldrh	r3, [r7, #12]
 8003348:	429a      	cmp	r2, r3
 800334a:	d3e4      	bcc.n	8003316 <delay_ms+0x26>
		}
	}
	stopTimer(&handlerTIM4_time);
 800334c:	4803      	ldr	r0, [pc, #12]	; (800335c <delay_ms+0x6c>)
 800334e:	f000 fa57 	bl	8003800 <stopTimer>
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	200002d0 	.word	0x200002d0

08003360 <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003364:	bf00      	nop
}
 8003366:	bf00      	nop
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003374:	bf00      	nop
}
 8003376:	bf00      	nop
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003384:	bf00      	nop
}
 8003386:	bf00      	nop
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003394:	bf00      	nop
}
 8003396:	bf00      	nop
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80033a4:	bf00      	nop
}
 80033a6:	bf00      	nop
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80033b4:	bf00      	nop
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80033c4:	bf00      	nop
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80033d4:	bf00      	nop
}
 80033d6:	bf00      	nop
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80033e4:	bf00      	nop
}
 80033e6:	bf00      	nop
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80033f4:	bf00      	nop
}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003404:	bf00      	nop
}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003414:	bf00      	nop
}
 8003416:	bf00      	nop
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003424:	bf00      	nop
}
 8003426:	bf00      	nop
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003434:	bf00      	nop
}
 8003436:	bf00      	nop
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003444:	bf00      	nop
}
 8003446:	bf00      	nop
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003454:	bf00      	nop
}
 8003456:	bf00      	nop
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003464:	bf00      	nop
}
 8003466:	bf00      	nop
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8003474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8003482:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 8003492:	f7fe f939 	bl	8001708 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 8003496:	e066      	b.n	8003566 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8003498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d012      	beq.n	80034cc <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 80034a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034b0:	f023 0302 	bic.w	r3, r3, #2
 80034b4:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 80034b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034c4:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 80034c6:	f7ff ff5b 	bl	8003380 <Capture_TIM2_Ch1_Callback>
}
 80034ca:	e04c      	b.n	8003566 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 80034cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d012      	beq.n	8003500 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 80034da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034e4:	f023 0304 	bic.w	r3, r3, #4
 80034e8:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 80034ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034f8:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 80034fa:	f7ff ff49 	bl	8003390 <Capture_TIM2_Ch2_Callback>
}
 80034fe:	e032      	b.n	8003566 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8003500:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d012      	beq.n	8003534 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 800350e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003518:	f023 0308 	bic.w	r3, r3, #8
 800351c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 800351e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003528:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800352c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800352e:	f7ff ff37 	bl	80033a0 <Capture_TIM2_Ch3_Callback>
}
 8003532:	e018      	b.n	8003566 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8003534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b00      	cmp	r3, #0
 8003540:	d011      	beq.n	8003566 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8003542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800354c:	f023 0310 	bic.w	r3, r3, #16
 8003550:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8003552:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800355c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003560:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8003562:	f7ff ff25 	bl	80033b0 <Capture_TIM2_Ch4_Callback>
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8003570:	4b31      	ldr	r3, [pc, #196]	; (8003638 <TIM3_IRQHandler+0xcc>)
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 800357c:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <TIM3_IRQHandler+0xcc>)
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	4a2d      	ldr	r2, [pc, #180]	; (8003638 <TIM3_IRQHandler+0xcc>)
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8003588:	f7fe f8b4 	bl	80016f4 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 800358c:	e052      	b.n	8003634 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 800358e:	4b2a      	ldr	r3, [pc, #168]	; (8003638 <TIM3_IRQHandler+0xcc>)
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00e      	beq.n	80035b8 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 800359a:	4b27      	ldr	r3, [pc, #156]	; (8003638 <TIM3_IRQHandler+0xcc>)
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	4a26      	ldr	r2, [pc, #152]	; (8003638 <TIM3_IRQHandler+0xcc>)
 80035a0:	f023 0302 	bic.w	r3, r3, #2
 80035a4:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 80035a6:	4b24      	ldr	r3, [pc, #144]	; (8003638 <TIM3_IRQHandler+0xcc>)
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	4a23      	ldr	r2, [pc, #140]	; (8003638 <TIM3_IRQHandler+0xcc>)
 80035ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035b0:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 80035b2:	f7ff ff05 	bl	80033c0 <Capture_TIM3_Ch1_Callback>
}
 80035b6:	e03d      	b.n	8003634 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 80035b8:	4b1f      	ldr	r3, [pc, #124]	; (8003638 <TIM3_IRQHandler+0xcc>)
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00e      	beq.n	80035e2 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 80035c4:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <TIM3_IRQHandler+0xcc>)
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	4a1b      	ldr	r2, [pc, #108]	; (8003638 <TIM3_IRQHandler+0xcc>)
 80035ca:	f023 0304 	bic.w	r3, r3, #4
 80035ce:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 80035d0:	4b19      	ldr	r3, [pc, #100]	; (8003638 <TIM3_IRQHandler+0xcc>)
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	4a18      	ldr	r2, [pc, #96]	; (8003638 <TIM3_IRQHandler+0xcc>)
 80035d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035da:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 80035dc:	f7ff fef8 	bl	80033d0 <Capture_TIM3_Ch2_Callback>
}
 80035e0:	e028      	b.n	8003634 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 80035e2:	4b15      	ldr	r3, [pc, #84]	; (8003638 <TIM3_IRQHandler+0xcc>)
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00e      	beq.n	800360c <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <TIM3_IRQHandler+0xcc>)
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	4a11      	ldr	r2, [pc, #68]	; (8003638 <TIM3_IRQHandler+0xcc>)
 80035f4:	f023 0308 	bic.w	r3, r3, #8
 80035f8:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 80035fa:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <TIM3_IRQHandler+0xcc>)
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	4a0e      	ldr	r2, [pc, #56]	; (8003638 <TIM3_IRQHandler+0xcc>)
 8003600:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003604:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8003606:	f7ff feeb 	bl	80033e0 <Capture_TIM3_Ch3_Callback>
}
 800360a:	e013      	b.n	8003634 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 800360c:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <TIM3_IRQHandler+0xcc>)
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8003618:	4b07      	ldr	r3, [pc, #28]	; (8003638 <TIM3_IRQHandler+0xcc>)
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	4a06      	ldr	r2, [pc, #24]	; (8003638 <TIM3_IRQHandler+0xcc>)
 800361e:	f023 0310 	bic.w	r3, r3, #16
 8003622:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <TIM3_IRQHandler+0xcc>)
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	4a03      	ldr	r2, [pc, #12]	; (8003638 <TIM3_IRQHandler+0xcc>)
 800362a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800362e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8003630:	f7ff fede 	bl	80033f0 <Capture_TIM3_Ch4_Callback>
}
 8003634:	bf00      	nop
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40000400 	.word	0x40000400

0800363c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8003640:	4b31      	ldr	r3, [pc, #196]	; (8003708 <TIM4_IRQHandler+0xcc>)
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 800364c:	4b2e      	ldr	r3, [pc, #184]	; (8003708 <TIM4_IRQHandler+0xcc>)
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	4a2d      	ldr	r2, [pc, #180]	; (8003708 <TIM4_IRQHandler+0xcc>)
 8003652:	f023 0301 	bic.w	r3, r3, #1
 8003656:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8003658:	f7ff fe82 	bl	8003360 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 800365c:	e052      	b.n	8003704 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 800365e:	4b2a      	ldr	r3, [pc, #168]	; (8003708 <TIM4_IRQHandler+0xcc>)
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00e      	beq.n	8003688 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 800366a:	4b27      	ldr	r3, [pc, #156]	; (8003708 <TIM4_IRQHandler+0xcc>)
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	4a26      	ldr	r2, [pc, #152]	; (8003708 <TIM4_IRQHandler+0xcc>)
 8003670:	f023 0302 	bic.w	r3, r3, #2
 8003674:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8003676:	4b24      	ldr	r3, [pc, #144]	; (8003708 <TIM4_IRQHandler+0xcc>)
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	4a23      	ldr	r2, [pc, #140]	; (8003708 <TIM4_IRQHandler+0xcc>)
 800367c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003680:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8003682:	f7ff febd 	bl	8003400 <Capture_TIM4_Ch1_Callback>
}
 8003686:	e03d      	b.n	8003704 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8003688:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <TIM4_IRQHandler+0xcc>)
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00e      	beq.n	80036b2 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8003694:	4b1c      	ldr	r3, [pc, #112]	; (8003708 <TIM4_IRQHandler+0xcc>)
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <TIM4_IRQHandler+0xcc>)
 800369a:	f023 0304 	bic.w	r3, r3, #4
 800369e:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <TIM4_IRQHandler+0xcc>)
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	4a18      	ldr	r2, [pc, #96]	; (8003708 <TIM4_IRQHandler+0xcc>)
 80036a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036aa:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80036ac:	f7ff fec8 	bl	8003440 <Capture_TIM5_Ch2_Callback>
}
 80036b0:	e028      	b.n	8003704 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <TIM4_IRQHandler+0xcc>)
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00e      	beq.n	80036dc <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 80036be:	4b12      	ldr	r3, [pc, #72]	; (8003708 <TIM4_IRQHandler+0xcc>)
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	4a11      	ldr	r2, [pc, #68]	; (8003708 <TIM4_IRQHandler+0xcc>)
 80036c4:	f023 0308 	bic.w	r3, r3, #8
 80036c8:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 80036ca:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <TIM4_IRQHandler+0xcc>)
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	4a0e      	ldr	r2, [pc, #56]	; (8003708 <TIM4_IRQHandler+0xcc>)
 80036d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036d4:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 80036d6:	f7ff fe9b 	bl	8003410 <Capture_TIM4_Ch3_Callback>
}
 80036da:	e013      	b.n	8003704 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 80036dc:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <TIM4_IRQHandler+0xcc>)
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00d      	beq.n	8003704 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 80036e8:	4b07      	ldr	r3, [pc, #28]	; (8003708 <TIM4_IRQHandler+0xcc>)
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	4a06      	ldr	r2, [pc, #24]	; (8003708 <TIM4_IRQHandler+0xcc>)
 80036ee:	f023 0310 	bic.w	r3, r3, #16
 80036f2:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <TIM4_IRQHandler+0xcc>)
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	4a03      	ldr	r2, [pc, #12]	; (8003708 <TIM4_IRQHandler+0xcc>)
 80036fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036fe:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8003700:	f7ff fe8e 	bl	8003420 <Capture_TIM4_Ch4_Callback>
}
 8003704:	bf00      	nop
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40000800 	.word	0x40000800

0800370c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8003710:	4b31      	ldr	r3, [pc, #196]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 800371c:	4b2e      	ldr	r3, [pc, #184]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	4a2d      	ldr	r2, [pc, #180]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8003728:	f7ff fe22 	bl	8003370 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 800372c:	e052      	b.n	80037d4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 800372e:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00e      	beq.n	8003758 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 800373a:	4b27      	ldr	r3, [pc, #156]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	4a26      	ldr	r2, [pc, #152]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 8003740:	f023 0302 	bic.w	r3, r3, #2
 8003744:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8003746:	4b24      	ldr	r3, [pc, #144]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	4a23      	ldr	r2, [pc, #140]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 800374c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003750:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8003752:	f7ff fe6d 	bl	8003430 <Capture_TIM5_Ch1_Callback>
}
 8003756:	e03d      	b.n	80037d4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8003758:	4b1f      	ldr	r3, [pc, #124]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00e      	beq.n	8003782 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8003764:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	4a1b      	ldr	r2, [pc, #108]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 800376a:	f023 0304 	bic.w	r3, r3, #4
 800376e:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8003770:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 8003776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800377a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 800377c:	f7ff fe60 	bl	8003440 <Capture_TIM5_Ch2_Callback>
}
 8003780:	e028      	b.n	80037d4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8003782:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00e      	beq.n	80037ac <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 800378e:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	4a11      	ldr	r2, [pc, #68]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 8003794:	f023 0308 	bic.w	r3, r3, #8
 8003798:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 800379a:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	4a0e      	ldr	r2, [pc, #56]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 80037a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037a4:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 80037a6:	f7ff fe53 	bl	8003450 <Capture_TIM5_Ch3_Callback>
}
 80037aa:	e013      	b.n	80037d4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 80037ac:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00d      	beq.n	80037d4 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 80037b8:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	4a06      	ldr	r2, [pc, #24]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 80037be:	f023 0310 	bic.w	r3, r3, #16
 80037c2:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	4a03      	ldr	r2, [pc, #12]	; (80037d8 <TIM5_IRQHandler+0xcc>)
 80037ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037ce:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 80037d0:	f7ff fe46 	bl	8003460 <Capture_TIM5_Ch4_Callback>
}
 80037d4:	bf00      	nop
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40000c00 	.word	0x40000c00

080037dc <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <__NVIC_EnableIRQ>:
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	2b00      	cmp	r3, #0
 8003834:	db0b      	blt.n	800384e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	4907      	ldr	r1, [pc, #28]	; (800385c <__NVIC_EnableIRQ+0x38>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2001      	movs	r0, #1
 8003846:	fa00 f202 	lsl.w	r2, r0, r2
 800384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	e000e100 	.word	0xe000e100

08003860 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f001 f825 	bl	80048bc <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 8003872:	4b96      	ldr	r3, [pc, #600]	; (8003acc <extInt_Config+0x26c>)
 8003874:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003878:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	791b      	ldrb	r3, [r3, #4]
 8003880:	2b0f      	cmp	r3, #15
 8003882:	f200 85cd 	bhi.w	8004420 <extInt_Config+0xbc0>
 8003886:	a201      	add	r2, pc, #4	; (adr r2, 800388c <extInt_Config+0x2c>)
 8003888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388c:	080038cd 	.word	0x080038cd
 8003890:	08003983 	.word	0x08003983
 8003894:	08003a39 	.word	0x08003a39
 8003898:	08003b0f 	.word	0x08003b0f
 800389c:	08003bc5 	.word	0x08003bc5
 80038a0:	08003c73 	.word	0x08003c73
 80038a4:	08003d39 	.word	0x08003d39
 80038a8:	08003de1 	.word	0x08003de1
 80038ac:	08003e89 	.word	0x08003e89
 80038b0:	08003f31 	.word	0x08003f31
 80038b4:	08003ff7 	.word	0x08003ff7
 80038b8:	0800409f 	.word	0x0800409f
 80038bc:	08004147 	.word	0x08004147
 80038c0:	0800420d 	.word	0x0800420d
 80038c4:	080042b3 	.word	0x080042b3
 80038c8:	0800435b 	.word	0x0800435b
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 80038cc:	4b80      	ldr	r3, [pc, #512]	; (8003ad0 <extInt_Config+0x270>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4a7f      	ldr	r2, [pc, #508]	; (8003ad0 <extInt_Config+0x270>)
 80038d2:	f023 030f 	bic.w	r3, r3, #15
 80038d6:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a7d      	ldr	r2, [pc, #500]	; (8003ad4 <extInt_Config+0x274>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d105      	bne.n	80038f0 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80038e4:	4b7a      	ldr	r3, [pc, #488]	; (8003ad0 <extInt_Config+0x270>)
 80038e6:	4a7a      	ldr	r2, [pc, #488]	; (8003ad0 <extInt_Config+0x270>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80038ec:	f000 bd9a 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a78      	ldr	r2, [pc, #480]	; (8003ad8 <extInt_Config+0x278>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d107      	bne.n	800390c <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80038fc:	4b74      	ldr	r3, [pc, #464]	; (8003ad0 <extInt_Config+0x270>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4a73      	ldr	r2, [pc, #460]	; (8003ad0 <extInt_Config+0x270>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6093      	str	r3, [r2, #8]
					break;
 8003908:	f000 bd8c 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a72      	ldr	r2, [pc, #456]	; (8003adc <extInt_Config+0x27c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d107      	bne.n	8003928 <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8003918:	4b6d      	ldr	r3, [pc, #436]	; (8003ad0 <extInt_Config+0x270>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4a6c      	ldr	r2, [pc, #432]	; (8003ad0 <extInt_Config+0x270>)
 800391e:	f043 0302 	orr.w	r3, r3, #2
 8003922:	6093      	str	r3, [r2, #8]
					break;
 8003924:	f000 bd7e 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a6c      	ldr	r2, [pc, #432]	; (8003ae0 <extInt_Config+0x280>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d107      	bne.n	8003944 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8003934:	4b66      	ldr	r3, [pc, #408]	; (8003ad0 <extInt_Config+0x270>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4a65      	ldr	r2, [pc, #404]	; (8003ad0 <extInt_Config+0x270>)
 800393a:	f043 0303 	orr.w	r3, r3, #3
 800393e:	6093      	str	r3, [r2, #8]
					break;
 8003940:	f000 bd70 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a66      	ldr	r2, [pc, #408]	; (8003ae4 <extInt_Config+0x284>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d107      	bne.n	8003960 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8003950:	4b5f      	ldr	r3, [pc, #380]	; (8003ad0 <extInt_Config+0x270>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	4a5e      	ldr	r2, [pc, #376]	; (8003ad0 <extInt_Config+0x270>)
 8003956:	f043 0304 	orr.w	r3, r3, #4
 800395a:	6093      	str	r3, [r2, #8]
					break;
 800395c:	f000 bd62 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a60      	ldr	r2, [pc, #384]	; (8003ae8 <extInt_Config+0x288>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d107      	bne.n	800397c <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 800396c:	4b58      	ldr	r3, [pc, #352]	; (8003ad0 <extInt_Config+0x270>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4a57      	ldr	r2, [pc, #348]	; (8003ad0 <extInt_Config+0x270>)
 8003972:	f043 0307 	orr.w	r3, r3, #7
 8003976:	6093      	str	r3, [r2, #8]
					break;
 8003978:	f000 bd54 	b.w	8004424 <extInt_Config+0xbc4>
						__NOP();
 800397c:	bf00      	nop
					break;
 800397e:	f000 bd51 	b.w	8004424 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8003982:	4b53      	ldr	r3, [pc, #332]	; (8003ad0 <extInt_Config+0x270>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	4a52      	ldr	r2, [pc, #328]	; (8003ad0 <extInt_Config+0x270>)
 8003988:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800398c:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a4f      	ldr	r2, [pc, #316]	; (8003ad4 <extInt_Config+0x274>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d105      	bne.n	80039a6 <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 800399a:	4b4d      	ldr	r3, [pc, #308]	; (8003ad0 <extInt_Config+0x270>)
 800399c:	4a4c      	ldr	r2, [pc, #304]	; (8003ad0 <extInt_Config+0x270>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80039a2:	f000 bd3f 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a4a      	ldr	r2, [pc, #296]	; (8003ad8 <extInt_Config+0x278>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d107      	bne.n	80039c2 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 80039b2:	4b47      	ldr	r3, [pc, #284]	; (8003ad0 <extInt_Config+0x270>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	4a46      	ldr	r2, [pc, #280]	; (8003ad0 <extInt_Config+0x270>)
 80039b8:	f043 0310 	orr.w	r3, r3, #16
 80039bc:	6093      	str	r3, [r2, #8]
					break;
 80039be:	f000 bd31 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a44      	ldr	r2, [pc, #272]	; (8003adc <extInt_Config+0x27c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d107      	bne.n	80039de <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80039ce:	4b40      	ldr	r3, [pc, #256]	; (8003ad0 <extInt_Config+0x270>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	4a3f      	ldr	r2, [pc, #252]	; (8003ad0 <extInt_Config+0x270>)
 80039d4:	f043 0320 	orr.w	r3, r3, #32
 80039d8:	6093      	str	r3, [r2, #8]
					break;
 80039da:	f000 bd23 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a3e      	ldr	r2, [pc, #248]	; (8003ae0 <extInt_Config+0x280>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d107      	bne.n	80039fa <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80039ea:	4b39      	ldr	r3, [pc, #228]	; (8003ad0 <extInt_Config+0x270>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	4a38      	ldr	r2, [pc, #224]	; (8003ad0 <extInt_Config+0x270>)
 80039f0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80039f4:	6093      	str	r3, [r2, #8]
					break;
 80039f6:	f000 bd15 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a38      	ldr	r2, [pc, #224]	; (8003ae4 <extInt_Config+0x284>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d107      	bne.n	8003a16 <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8003a06:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <extInt_Config+0x270>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	4a31      	ldr	r2, [pc, #196]	; (8003ad0 <extInt_Config+0x270>)
 8003a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a10:	6093      	str	r3, [r2, #8]
					break;
 8003a12:	f000 bd07 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a32      	ldr	r2, [pc, #200]	; (8003ae8 <extInt_Config+0x288>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d107      	bne.n	8003a32 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8003a22:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <extInt_Config+0x270>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	4a2a      	ldr	r2, [pc, #168]	; (8003ad0 <extInt_Config+0x270>)
 8003a28:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003a2c:	6093      	str	r3, [r2, #8]
					break;
 8003a2e:	f000 bcf9 	b.w	8004424 <extInt_Config+0xbc4>
						__NOP();
 8003a32:	bf00      	nop
					break;
 8003a34:	f000 bcf6 	b.w	8004424 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8003a38:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <extInt_Config+0x270>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a24      	ldr	r2, [pc, #144]	; (8003ad0 <extInt_Config+0x270>)
 8003a3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a42:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <extInt_Config+0x274>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d105      	bne.n	8003a5c <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8003a50:	4b1f      	ldr	r3, [pc, #124]	; (8003ad0 <extInt_Config+0x270>)
 8003a52:	4a1f      	ldr	r2, [pc, #124]	; (8003ad0 <extInt_Config+0x270>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8003a58:	f000 bce4 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <extInt_Config+0x278>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d107      	bne.n	8003a78 <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <extInt_Config+0x270>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <extInt_Config+0x270>)
 8003a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a72:	6093      	str	r3, [r2, #8]
					break;
 8003a74:	f000 bcd6 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a17      	ldr	r2, [pc, #92]	; (8003adc <extInt_Config+0x27c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d107      	bne.n	8003a94 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8003a84:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <extInt_Config+0x270>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4a11      	ldr	r2, [pc, #68]	; (8003ad0 <extInt_Config+0x270>)
 8003a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a8e:	6093      	str	r3, [r2, #8]
					break;
 8003a90:	f000 bcc8 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a11      	ldr	r2, [pc, #68]	; (8003ae0 <extInt_Config+0x280>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d107      	bne.n	8003ab0 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <extInt_Config+0x270>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <extInt_Config+0x270>)
 8003aa6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003aaa:	6093      	str	r3, [r2, #8]
					break;
 8003aac:	f000 bcba 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a0b      	ldr	r2, [pc, #44]	; (8003ae4 <extInt_Config+0x284>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d117      	bne.n	8003aec <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8003abc:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <extInt_Config+0x270>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	4a03      	ldr	r2, [pc, #12]	; (8003ad0 <extInt_Config+0x270>)
 8003ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ac6:	6093      	str	r3, [r2, #8]
					break;
 8003ac8:	f000 bcac 	b.w	8004424 <extInt_Config+0xbc4>
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40013800 	.word	0x40013800
 8003ad4:	40020000 	.word	0x40020000
 8003ad8:	40020400 	.word	0x40020400
 8003adc:	40020800 	.word	0x40020800
 8003ae0:	40020c00 	.word	0x40020c00
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a8a      	ldr	r2, [pc, #552]	; (8003d1c <extInt_Config+0x4bc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d107      	bne.n	8003b08 <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8003af8:	4b89      	ldr	r3, [pc, #548]	; (8003d20 <extInt_Config+0x4c0>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	4a88      	ldr	r2, [pc, #544]	; (8003d20 <extInt_Config+0x4c0>)
 8003afe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b02:	6093      	str	r3, [r2, #8]
					break;
 8003b04:	f000 bc8e 	b.w	8004424 <extInt_Config+0xbc4>
						__NOP();
 8003b08:	bf00      	nop
					break;
 8003b0a:	f000 bc8b 	b.w	8004424 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8003b0e:	4b84      	ldr	r3, [pc, #528]	; (8003d20 <extInt_Config+0x4c0>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	4a83      	ldr	r2, [pc, #524]	; (8003d20 <extInt_Config+0x4c0>)
 8003b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b18:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a80      	ldr	r2, [pc, #512]	; (8003d24 <extInt_Config+0x4c4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d105      	bne.n	8003b32 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8003b26:	4b7e      	ldr	r3, [pc, #504]	; (8003d20 <extInt_Config+0x4c0>)
 8003b28:	4a7d      	ldr	r2, [pc, #500]	; (8003d20 <extInt_Config+0x4c0>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8003b2e:	f000 bc79 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a7b      	ldr	r2, [pc, #492]	; (8003d28 <extInt_Config+0x4c8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d107      	bne.n	8003b4e <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8003b3e:	4b78      	ldr	r3, [pc, #480]	; (8003d20 <extInt_Config+0x4c0>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	4a77      	ldr	r2, [pc, #476]	; (8003d20 <extInt_Config+0x4c0>)
 8003b44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b48:	6093      	str	r3, [r2, #8]
					break;
 8003b4a:	f000 bc6b 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a75      	ldr	r2, [pc, #468]	; (8003d2c <extInt_Config+0x4cc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d107      	bne.n	8003b6a <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8003b5a:	4b71      	ldr	r3, [pc, #452]	; (8003d20 <extInt_Config+0x4c0>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	4a70      	ldr	r2, [pc, #448]	; (8003d20 <extInt_Config+0x4c0>)
 8003b60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b64:	6093      	str	r3, [r2, #8]
					break;
 8003b66:	f000 bc5d 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a6f      	ldr	r2, [pc, #444]	; (8003d30 <extInt_Config+0x4d0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d107      	bne.n	8003b86 <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8003b76:	4b6a      	ldr	r3, [pc, #424]	; (8003d20 <extInt_Config+0x4c0>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	4a69      	ldr	r2, [pc, #420]	; (8003d20 <extInt_Config+0x4c0>)
 8003b7c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003b80:	6093      	str	r3, [r2, #8]
					break;
 8003b82:	f000 bc4f 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a69      	ldr	r2, [pc, #420]	; (8003d34 <extInt_Config+0x4d4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d107      	bne.n	8003ba2 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8003b92:	4b63      	ldr	r3, [pc, #396]	; (8003d20 <extInt_Config+0x4c0>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	4a62      	ldr	r2, [pc, #392]	; (8003d20 <extInt_Config+0x4c0>)
 8003b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b9c:	6093      	str	r3, [r2, #8]
					break;
 8003b9e:	f000 bc41 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a5c      	ldr	r2, [pc, #368]	; (8003d1c <extInt_Config+0x4bc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d107      	bne.n	8003bbe <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8003bae:	4b5c      	ldr	r3, [pc, #368]	; (8003d20 <extInt_Config+0x4c0>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	4a5b      	ldr	r2, [pc, #364]	; (8003d20 <extInt_Config+0x4c0>)
 8003bb4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003bb8:	6093      	str	r3, [r2, #8]
					break;
 8003bba:	f000 bc33 	b.w	8004424 <extInt_Config+0xbc4>
						__NOP();
 8003bbe:	bf00      	nop
					break;
 8003bc0:	f000 bc30 	b.w	8004424 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8003bc4:	4b56      	ldr	r3, [pc, #344]	; (8003d20 <extInt_Config+0x4c0>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	4a55      	ldr	r2, [pc, #340]	; (8003d20 <extInt_Config+0x4c0>)
 8003bca:	f023 030f 	bic.w	r3, r3, #15
 8003bce:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a53      	ldr	r2, [pc, #332]	; (8003d24 <extInt_Config+0x4c4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d105      	bne.n	8003be8 <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8003bdc:	4b50      	ldr	r3, [pc, #320]	; (8003d20 <extInt_Config+0x4c0>)
 8003bde:	4a50      	ldr	r2, [pc, #320]	; (8003d20 <extInt_Config+0x4c0>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8003be4:	f000 bc1e 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a4e      	ldr	r2, [pc, #312]	; (8003d28 <extInt_Config+0x4c8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d107      	bne.n	8003c04 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8003bf4:	4b4a      	ldr	r3, [pc, #296]	; (8003d20 <extInt_Config+0x4c0>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4a49      	ldr	r2, [pc, #292]	; (8003d20 <extInt_Config+0x4c0>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	60d3      	str	r3, [r2, #12]
					break;
 8003c00:	f000 bc10 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a48      	ldr	r2, [pc, #288]	; (8003d2c <extInt_Config+0x4cc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d107      	bne.n	8003c20 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8003c10:	4b43      	ldr	r3, [pc, #268]	; (8003d20 <extInt_Config+0x4c0>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4a42      	ldr	r2, [pc, #264]	; (8003d20 <extInt_Config+0x4c0>)
 8003c16:	f043 0302 	orr.w	r3, r3, #2
 8003c1a:	60d3      	str	r3, [r2, #12]
					break;
 8003c1c:	f000 bc02 	b.w	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a42      	ldr	r2, [pc, #264]	; (8003d30 <extInt_Config+0x4d0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d106      	bne.n	8003c3a <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8003c2c:	4b3c      	ldr	r3, [pc, #240]	; (8003d20 <extInt_Config+0x4c0>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4a3b      	ldr	r2, [pc, #236]	; (8003d20 <extInt_Config+0x4c0>)
 8003c32:	f043 0303 	orr.w	r3, r3, #3
 8003c36:	60d3      	str	r3, [r2, #12]
					break;
 8003c38:	e3f4      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a3c      	ldr	r2, [pc, #240]	; (8003d34 <extInt_Config+0x4d4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d106      	bne.n	8003c54 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8003c46:	4b36      	ldr	r3, [pc, #216]	; (8003d20 <extInt_Config+0x4c0>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	4a35      	ldr	r2, [pc, #212]	; (8003d20 <extInt_Config+0x4c0>)
 8003c4c:	f043 0304 	orr.w	r3, r3, #4
 8003c50:	60d3      	str	r3, [r2, #12]
					break;
 8003c52:	e3e7      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a30      	ldr	r2, [pc, #192]	; (8003d1c <extInt_Config+0x4bc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d106      	bne.n	8003c6e <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8003c60:	4b2f      	ldr	r3, [pc, #188]	; (8003d20 <extInt_Config+0x4c0>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4a2e      	ldr	r2, [pc, #184]	; (8003d20 <extInt_Config+0x4c0>)
 8003c66:	f043 0307 	orr.w	r3, r3, #7
 8003c6a:	60d3      	str	r3, [r2, #12]
					break;
 8003c6c:	e3da      	b.n	8004424 <extInt_Config+0xbc4>
						__NOP();
 8003c6e:	bf00      	nop
					break;
 8003c70:	e3d8      	b.n	8004424 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8003c72:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <extInt_Config+0x4c0>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	4a2a      	ldr	r2, [pc, #168]	; (8003d20 <extInt_Config+0x4c0>)
 8003c78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c7c:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a27      	ldr	r2, [pc, #156]	; (8003d24 <extInt_Config+0x4c4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d104      	bne.n	8003c94 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8003c8a:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <extInt_Config+0x4c0>)
 8003c8c:	4a24      	ldr	r2, [pc, #144]	; (8003d20 <extInt_Config+0x4c0>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8003c92:	e3c7      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a23      	ldr	r2, [pc, #140]	; (8003d28 <extInt_Config+0x4c8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d106      	bne.n	8003cae <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8003ca0:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <extInt_Config+0x4c0>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <extInt_Config+0x4c0>)
 8003ca6:	f043 0310 	orr.w	r3, r3, #16
 8003caa:	60d3      	str	r3, [r2, #12]
					break;
 8003cac:	e3ba      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1d      	ldr	r2, [pc, #116]	; (8003d2c <extInt_Config+0x4cc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d106      	bne.n	8003cc8 <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8003cba:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <extInt_Config+0x4c0>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	4a18      	ldr	r2, [pc, #96]	; (8003d20 <extInt_Config+0x4c0>)
 8003cc0:	f043 0320 	orr.w	r3, r3, #32
 8003cc4:	60d3      	str	r3, [r2, #12]
					break;
 8003cc6:	e3ad      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <extInt_Config+0x4d0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d106      	bne.n	8003ce2 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8003cd4:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <extInt_Config+0x4c0>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4a11      	ldr	r2, [pc, #68]	; (8003d20 <extInt_Config+0x4c0>)
 8003cda:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003cde:	60d3      	str	r3, [r2, #12]
					break;
 8003ce0:	e3a0      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <extInt_Config+0x4d4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d106      	bne.n	8003cfc <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8003cee:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <extInt_Config+0x4c0>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	4a0b      	ldr	r2, [pc, #44]	; (8003d20 <extInt_Config+0x4c0>)
 8003cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf8:	60d3      	str	r3, [r2, #12]
					break;
 8003cfa:	e393      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a06      	ldr	r2, [pc, #24]	; (8003d1c <extInt_Config+0x4bc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d106      	bne.n	8003d16 <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <extInt_Config+0x4c0>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <extInt_Config+0x4c0>)
 8003d0e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003d12:	60d3      	str	r3, [r2, #12]
					break;
 8003d14:	e386      	b.n	8004424 <extInt_Config+0xbc4>
						__NOP();
 8003d16:	bf00      	nop
					break;
 8003d18:	e384      	b.n	8004424 <extInt_Config+0xbc4>
 8003d1a:	bf00      	nop
 8003d1c:	40021c00 	.word	0x40021c00
 8003d20:	40013800 	.word	0x40013800
 8003d24:	40020000 	.word	0x40020000
 8003d28:	40020400 	.word	0x40020400
 8003d2c:	40020800 	.word	0x40020800
 8003d30:	40020c00 	.word	0x40020c00
 8003d34:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8003d38:	4b86      	ldr	r3, [pc, #536]	; (8003f54 <extInt_Config+0x6f4>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4a85      	ldr	r2, [pc, #532]	; (8003f54 <extInt_Config+0x6f4>)
 8003d3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d42:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a83      	ldr	r2, [pc, #524]	; (8003f58 <extInt_Config+0x6f8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d104      	bne.n	8003d5a <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8003d50:	4b80      	ldr	r3, [pc, #512]	; (8003f54 <extInt_Config+0x6f4>)
 8003d52:	4a80      	ldr	r2, [pc, #512]	; (8003f54 <extInt_Config+0x6f4>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8003d58:	e364      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a7e      	ldr	r2, [pc, #504]	; (8003f5c <extInt_Config+0x6fc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d106      	bne.n	8003d74 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8003d66:	4b7b      	ldr	r3, [pc, #492]	; (8003f54 <extInt_Config+0x6f4>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	4a7a      	ldr	r2, [pc, #488]	; (8003f54 <extInt_Config+0x6f4>)
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d70:	60d3      	str	r3, [r2, #12]
					break;
 8003d72:	e357      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a79      	ldr	r2, [pc, #484]	; (8003f60 <extInt_Config+0x700>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d106      	bne.n	8003d8e <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8003d80:	4b74      	ldr	r3, [pc, #464]	; (8003f54 <extInt_Config+0x6f4>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4a73      	ldr	r2, [pc, #460]	; (8003f54 <extInt_Config+0x6f4>)
 8003d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d8a:	60d3      	str	r3, [r2, #12]
					break;
 8003d8c:	e34a      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a73      	ldr	r2, [pc, #460]	; (8003f64 <extInt_Config+0x704>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d106      	bne.n	8003da8 <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8003d9a:	4b6e      	ldr	r3, [pc, #440]	; (8003f54 <extInt_Config+0x6f4>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	4a6d      	ldr	r2, [pc, #436]	; (8003f54 <extInt_Config+0x6f4>)
 8003da0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003da4:	60d3      	str	r3, [r2, #12]
					break;
 8003da6:	e33d      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a6e      	ldr	r2, [pc, #440]	; (8003f68 <extInt_Config+0x708>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d106      	bne.n	8003dc2 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8003db4:	4b67      	ldr	r3, [pc, #412]	; (8003f54 <extInt_Config+0x6f4>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a66      	ldr	r2, [pc, #408]	; (8003f54 <extInt_Config+0x6f4>)
 8003dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dbe:	60d3      	str	r3, [r2, #12]
					break;
 8003dc0:	e330      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a68      	ldr	r2, [pc, #416]	; (8003f6c <extInt_Config+0x70c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d106      	bne.n	8003ddc <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8003dce:	4b61      	ldr	r3, [pc, #388]	; (8003f54 <extInt_Config+0x6f4>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	4a60      	ldr	r2, [pc, #384]	; (8003f54 <extInt_Config+0x6f4>)
 8003dd4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dd8:	60d3      	str	r3, [r2, #12]
					break;
 8003dda:	e323      	b.n	8004424 <extInt_Config+0xbc4>
						__NOP();
 8003ddc:	bf00      	nop
					break;
 8003dde:	e321      	b.n	8004424 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8003de0:	4b5c      	ldr	r3, [pc, #368]	; (8003f54 <extInt_Config+0x6f4>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4a5b      	ldr	r2, [pc, #364]	; (8003f54 <extInt_Config+0x6f4>)
 8003de6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dea:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a59      	ldr	r2, [pc, #356]	; (8003f58 <extInt_Config+0x6f8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d104      	bne.n	8003e02 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8003df8:	4b56      	ldr	r3, [pc, #344]	; (8003f54 <extInt_Config+0x6f4>)
 8003dfa:	4a56      	ldr	r2, [pc, #344]	; (8003f54 <extInt_Config+0x6f4>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8003e00:	e310      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a54      	ldr	r2, [pc, #336]	; (8003f5c <extInt_Config+0x6fc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d106      	bne.n	8003e1c <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8003e0e:	4b51      	ldr	r3, [pc, #324]	; (8003f54 <extInt_Config+0x6f4>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	4a50      	ldr	r2, [pc, #320]	; (8003f54 <extInt_Config+0x6f4>)
 8003e14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e18:	60d3      	str	r3, [r2, #12]
					break;
 8003e1a:	e303      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a4f      	ldr	r2, [pc, #316]	; (8003f60 <extInt_Config+0x700>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d106      	bne.n	8003e36 <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8003e28:	4b4a      	ldr	r3, [pc, #296]	; (8003f54 <extInt_Config+0x6f4>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4a49      	ldr	r2, [pc, #292]	; (8003f54 <extInt_Config+0x6f4>)
 8003e2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e32:	60d3      	str	r3, [r2, #12]
					break;
 8003e34:	e2f6      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a49      	ldr	r2, [pc, #292]	; (8003f64 <extInt_Config+0x704>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d106      	bne.n	8003e50 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8003e42:	4b44      	ldr	r3, [pc, #272]	; (8003f54 <extInt_Config+0x6f4>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	4a43      	ldr	r2, [pc, #268]	; (8003f54 <extInt_Config+0x6f4>)
 8003e48:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003e4c:	60d3      	str	r3, [r2, #12]
					break;
 8003e4e:	e2e9      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a44      	ldr	r2, [pc, #272]	; (8003f68 <extInt_Config+0x708>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d106      	bne.n	8003e6a <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8003e5c:	4b3d      	ldr	r3, [pc, #244]	; (8003f54 <extInt_Config+0x6f4>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a3c      	ldr	r2, [pc, #240]	; (8003f54 <extInt_Config+0x6f4>)
 8003e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e66:	60d3      	str	r3, [r2, #12]
					break;
 8003e68:	e2dc      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a3e      	ldr	r2, [pc, #248]	; (8003f6c <extInt_Config+0x70c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d106      	bne.n	8003e84 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8003e76:	4b37      	ldr	r3, [pc, #220]	; (8003f54 <extInt_Config+0x6f4>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	4a36      	ldr	r2, [pc, #216]	; (8003f54 <extInt_Config+0x6f4>)
 8003e7c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003e80:	60d3      	str	r3, [r2, #12]
					break;
 8003e82:	e2cf      	b.n	8004424 <extInt_Config+0xbc4>
						__NOP();
 8003e84:	bf00      	nop
					break;
 8003e86:	e2cd      	b.n	8004424 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8003e88:	4b32      	ldr	r3, [pc, #200]	; (8003f54 <extInt_Config+0x6f4>)
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	4a31      	ldr	r2, [pc, #196]	; (8003f54 <extInt_Config+0x6f4>)
 8003e8e:	f023 030f 	bic.w	r3, r3, #15
 8003e92:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a2f      	ldr	r2, [pc, #188]	; (8003f58 <extInt_Config+0x6f8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d104      	bne.n	8003eaa <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8003ea0:	4b2c      	ldr	r3, [pc, #176]	; (8003f54 <extInt_Config+0x6f4>)
 8003ea2:	4a2c      	ldr	r2, [pc, #176]	; (8003f54 <extInt_Config+0x6f4>)
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8003ea8:	e2bc      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a2a      	ldr	r2, [pc, #168]	; (8003f5c <extInt_Config+0x6fc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d106      	bne.n	8003ec4 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8003eb6:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <extInt_Config+0x6f4>)
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <extInt_Config+0x6f4>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6113      	str	r3, [r2, #16]
					break;
 8003ec2:	e2af      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a25      	ldr	r2, [pc, #148]	; (8003f60 <extInt_Config+0x700>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d106      	bne.n	8003ede <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8003ed0:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <extInt_Config+0x6f4>)
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	4a1f      	ldr	r2, [pc, #124]	; (8003f54 <extInt_Config+0x6f4>)
 8003ed6:	f043 0302 	orr.w	r3, r3, #2
 8003eda:	6113      	str	r3, [r2, #16]
					break;
 8003edc:	e2a2      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1f      	ldr	r2, [pc, #124]	; (8003f64 <extInt_Config+0x704>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d106      	bne.n	8003ef8 <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8003eea:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <extInt_Config+0x6f4>)
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <extInt_Config+0x6f4>)
 8003ef0:	f043 0303 	orr.w	r3, r3, #3
 8003ef4:	6113      	str	r3, [r2, #16]
					break;
 8003ef6:	e295      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1a      	ldr	r2, [pc, #104]	; (8003f68 <extInt_Config+0x708>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d106      	bne.n	8003f12 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8003f04:	4b13      	ldr	r3, [pc, #76]	; (8003f54 <extInt_Config+0x6f4>)
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	4a12      	ldr	r2, [pc, #72]	; (8003f54 <extInt_Config+0x6f4>)
 8003f0a:	f043 0304 	orr.w	r3, r3, #4
 8003f0e:	6113      	str	r3, [r2, #16]
					break;
 8003f10:	e288      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a14      	ldr	r2, [pc, #80]	; (8003f6c <extInt_Config+0x70c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d106      	bne.n	8003f2c <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <extInt_Config+0x6f4>)
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	4a0c      	ldr	r2, [pc, #48]	; (8003f54 <extInt_Config+0x6f4>)
 8003f24:	f043 0307 	orr.w	r3, r3, #7
 8003f28:	6113      	str	r3, [r2, #16]
					break;
 8003f2a:	e27b      	b.n	8004424 <extInt_Config+0xbc4>
						__NOP();
 8003f2c:	bf00      	nop
					break;
 8003f2e:	e279      	b.n	8004424 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <extInt_Config+0x6f4>)
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <extInt_Config+0x6f4>)
 8003f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f3a:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a05      	ldr	r2, [pc, #20]	; (8003f58 <extInt_Config+0x6f8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d113      	bne.n	8003f70 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8003f48:	4b02      	ldr	r3, [pc, #8]	; (8003f54 <extInt_Config+0x6f4>)
 8003f4a:	4a02      	ldr	r2, [pc, #8]	; (8003f54 <extInt_Config+0x6f4>)
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8003f50:	e268      	b.n	8004424 <extInt_Config+0xbc4>
 8003f52:	bf00      	nop
 8003f54:	40013800 	.word	0x40013800
 8003f58:	40020000 	.word	0x40020000
 8003f5c:	40020400 	.word	0x40020400
 8003f60:	40020800 	.word	0x40020800
 8003f64:	40020c00 	.word	0x40020c00
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a83      	ldr	r2, [pc, #524]	; (8004184 <extInt_Config+0x924>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d106      	bne.n	8003f8a <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8003f7c:	4b82      	ldr	r3, [pc, #520]	; (8004188 <extInt_Config+0x928>)
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	4a81      	ldr	r2, [pc, #516]	; (8004188 <extInt_Config+0x928>)
 8003f82:	f043 0310 	orr.w	r3, r3, #16
 8003f86:	6113      	str	r3, [r2, #16]
					break;
 8003f88:	e24c      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a7e      	ldr	r2, [pc, #504]	; (800418c <extInt_Config+0x92c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d106      	bne.n	8003fa4 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8003f96:	4b7c      	ldr	r3, [pc, #496]	; (8004188 <extInt_Config+0x928>)
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	4a7b      	ldr	r2, [pc, #492]	; (8004188 <extInt_Config+0x928>)
 8003f9c:	f043 0320 	orr.w	r3, r3, #32
 8003fa0:	6113      	str	r3, [r2, #16]
					break;
 8003fa2:	e23f      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a79      	ldr	r2, [pc, #484]	; (8004190 <extInt_Config+0x930>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d106      	bne.n	8003fbe <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8003fb0:	4b75      	ldr	r3, [pc, #468]	; (8004188 <extInt_Config+0x928>)
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	4a74      	ldr	r2, [pc, #464]	; (8004188 <extInt_Config+0x928>)
 8003fb6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003fba:	6113      	str	r3, [r2, #16]
					break;
 8003fbc:	e232      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a73      	ldr	r2, [pc, #460]	; (8004194 <extInt_Config+0x934>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d106      	bne.n	8003fd8 <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8003fca:	4b6f      	ldr	r3, [pc, #444]	; (8004188 <extInt_Config+0x928>)
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	4a6e      	ldr	r2, [pc, #440]	; (8004188 <extInt_Config+0x928>)
 8003fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fd4:	6113      	str	r3, [r2, #16]
					break;
 8003fd6:	e225      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a6e      	ldr	r2, [pc, #440]	; (8004198 <extInt_Config+0x938>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d106      	bne.n	8003ff2 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8003fe4:	4b68      	ldr	r3, [pc, #416]	; (8004188 <extInt_Config+0x928>)
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	4a67      	ldr	r2, [pc, #412]	; (8004188 <extInt_Config+0x928>)
 8003fea:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003fee:	6113      	str	r3, [r2, #16]
					break;
 8003ff0:	e218      	b.n	8004424 <extInt_Config+0xbc4>
						__NOP();
 8003ff2:	bf00      	nop
					break;
 8003ff4:	e216      	b.n	8004424 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8003ff6:	4b64      	ldr	r3, [pc, #400]	; (8004188 <extInt_Config+0x928>)
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	4a63      	ldr	r2, [pc, #396]	; (8004188 <extInt_Config+0x928>)
 8003ffc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004000:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a64      	ldr	r2, [pc, #400]	; (800419c <extInt_Config+0x93c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d104      	bne.n	8004018 <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 800400e:	4b5e      	ldr	r3, [pc, #376]	; (8004188 <extInt_Config+0x928>)
 8004010:	4a5d      	ldr	r2, [pc, #372]	; (8004188 <extInt_Config+0x928>)
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8004016:	e205      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a59      	ldr	r2, [pc, #356]	; (8004184 <extInt_Config+0x924>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d106      	bne.n	8004032 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8004024:	4b58      	ldr	r3, [pc, #352]	; (8004188 <extInt_Config+0x928>)
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	4a57      	ldr	r2, [pc, #348]	; (8004188 <extInt_Config+0x928>)
 800402a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402e:	6113      	str	r3, [r2, #16]
					break;
 8004030:	e1f8      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a54      	ldr	r2, [pc, #336]	; (800418c <extInt_Config+0x92c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d106      	bne.n	800404c <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 800403e:	4b52      	ldr	r3, [pc, #328]	; (8004188 <extInt_Config+0x928>)
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	4a51      	ldr	r2, [pc, #324]	; (8004188 <extInt_Config+0x928>)
 8004044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004048:	6113      	str	r3, [r2, #16]
					break;
 800404a:	e1eb      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a4f      	ldr	r2, [pc, #316]	; (8004190 <extInt_Config+0x930>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d106      	bne.n	8004066 <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8004058:	4b4b      	ldr	r3, [pc, #300]	; (8004188 <extInt_Config+0x928>)
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	4a4a      	ldr	r2, [pc, #296]	; (8004188 <extInt_Config+0x928>)
 800405e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004062:	6113      	str	r3, [r2, #16]
					break;
 8004064:	e1de      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a49      	ldr	r2, [pc, #292]	; (8004194 <extInt_Config+0x934>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d106      	bne.n	8004080 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8004072:	4b45      	ldr	r3, [pc, #276]	; (8004188 <extInt_Config+0x928>)
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	4a44      	ldr	r2, [pc, #272]	; (8004188 <extInt_Config+0x928>)
 8004078:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800407c:	6113      	str	r3, [r2, #16]
					break;
 800407e:	e1d1      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a44      	ldr	r2, [pc, #272]	; (8004198 <extInt_Config+0x938>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d106      	bne.n	800409a <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 800408c:	4b3e      	ldr	r3, [pc, #248]	; (8004188 <extInt_Config+0x928>)
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	4a3d      	ldr	r2, [pc, #244]	; (8004188 <extInt_Config+0x928>)
 8004092:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004096:	6113      	str	r3, [r2, #16]
					break;
 8004098:	e1c4      	b.n	8004424 <extInt_Config+0xbc4>
						__NOP();
 800409a:	bf00      	nop
					break;
 800409c:	e1c2      	b.n	8004424 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 800409e:	4b3a      	ldr	r3, [pc, #232]	; (8004188 <extInt_Config+0x928>)
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	4a39      	ldr	r2, [pc, #228]	; (8004188 <extInt_Config+0x928>)
 80040a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040a8:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a3a      	ldr	r2, [pc, #232]	; (800419c <extInt_Config+0x93c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d104      	bne.n	80040c0 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 80040b6:	4b34      	ldr	r3, [pc, #208]	; (8004188 <extInt_Config+0x928>)
 80040b8:	4a33      	ldr	r2, [pc, #204]	; (8004188 <extInt_Config+0x928>)
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 80040be:	e1b1      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a2f      	ldr	r2, [pc, #188]	; (8004184 <extInt_Config+0x924>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d106      	bne.n	80040da <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80040cc:	4b2e      	ldr	r3, [pc, #184]	; (8004188 <extInt_Config+0x928>)
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	4a2d      	ldr	r2, [pc, #180]	; (8004188 <extInt_Config+0x928>)
 80040d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040d6:	6113      	str	r3, [r2, #16]
					break;
 80040d8:	e1a4      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a2a      	ldr	r2, [pc, #168]	; (800418c <extInt_Config+0x92c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d106      	bne.n	80040f4 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80040e6:	4b28      	ldr	r3, [pc, #160]	; (8004188 <extInt_Config+0x928>)
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	4a27      	ldr	r2, [pc, #156]	; (8004188 <extInt_Config+0x928>)
 80040ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040f0:	6113      	str	r3, [r2, #16]
					break;
 80040f2:	e197      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a25      	ldr	r2, [pc, #148]	; (8004190 <extInt_Config+0x930>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d106      	bne.n	800410e <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8004100:	4b21      	ldr	r3, [pc, #132]	; (8004188 <extInt_Config+0x928>)
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	4a20      	ldr	r2, [pc, #128]	; (8004188 <extInt_Config+0x928>)
 8004106:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800410a:	6113      	str	r3, [r2, #16]
					break;
 800410c:	e18a      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1f      	ldr	r2, [pc, #124]	; (8004194 <extInt_Config+0x934>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d106      	bne.n	8004128 <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800411a:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <extInt_Config+0x928>)
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	4a1a      	ldr	r2, [pc, #104]	; (8004188 <extInt_Config+0x928>)
 8004120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004124:	6113      	str	r3, [r2, #16]
					break;
 8004126:	e17d      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1a      	ldr	r2, [pc, #104]	; (8004198 <extInt_Config+0x938>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d106      	bne.n	8004142 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8004134:	4b14      	ldr	r3, [pc, #80]	; (8004188 <extInt_Config+0x928>)
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	4a13      	ldr	r2, [pc, #76]	; (8004188 <extInt_Config+0x928>)
 800413a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800413e:	6113      	str	r3, [r2, #16]
					break;
 8004140:	e170      	b.n	8004424 <extInt_Config+0xbc4>
						__NOP();
 8004142:	bf00      	nop
					break;
 8004144:	e16e      	b.n	8004424 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8004146:	4b10      	ldr	r3, [pc, #64]	; (8004188 <extInt_Config+0x928>)
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	4a0f      	ldr	r2, [pc, #60]	; (8004188 <extInt_Config+0x928>)
 800414c:	f023 030f 	bic.w	r3, r3, #15
 8004150:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a10      	ldr	r2, [pc, #64]	; (800419c <extInt_Config+0x93c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d104      	bne.n	8004168 <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 800415e:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <extInt_Config+0x928>)
 8004160:	4a09      	ldr	r2, [pc, #36]	; (8004188 <extInt_Config+0x928>)
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8004166:	e15d      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a05      	ldr	r2, [pc, #20]	; (8004184 <extInt_Config+0x924>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d115      	bne.n	80041a0 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <extInt_Config+0x928>)
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	4a03      	ldr	r2, [pc, #12]	; (8004188 <extInt_Config+0x928>)
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	6153      	str	r3, [r2, #20]
					break;
 8004180:	e150      	b.n	8004424 <extInt_Config+0xbc4>
 8004182:	bf00      	nop
 8004184:	40020400 	.word	0x40020400
 8004188:	40013800 	.word	0x40013800
 800418c:	40020800 	.word	0x40020800
 8004190:	40020c00 	.word	0x40020c00
 8004194:	40021000 	.word	0x40021000
 8004198:	40021c00 	.word	0x40021c00
 800419c:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a89      	ldr	r2, [pc, #548]	; (80043cc <extInt_Config+0xb6c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d106      	bne.n	80041ba <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 80041ac:	4b88      	ldr	r3, [pc, #544]	; (80043d0 <extInt_Config+0xb70>)
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	4a87      	ldr	r2, [pc, #540]	; (80043d0 <extInt_Config+0xb70>)
 80041b2:	f043 0302 	orr.w	r3, r3, #2
 80041b6:	6153      	str	r3, [r2, #20]
					break;
 80041b8:	e134      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a84      	ldr	r2, [pc, #528]	; (80043d4 <extInt_Config+0xb74>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d106      	bne.n	80041d4 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 80041c6:	4b82      	ldr	r3, [pc, #520]	; (80043d0 <extInt_Config+0xb70>)
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	4a81      	ldr	r2, [pc, #516]	; (80043d0 <extInt_Config+0xb70>)
 80041cc:	f043 0303 	orr.w	r3, r3, #3
 80041d0:	6153      	str	r3, [r2, #20]
					break;
 80041d2:	e127      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a7f      	ldr	r2, [pc, #508]	; (80043d8 <extInt_Config+0xb78>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d106      	bne.n	80041ee <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80041e0:	4b7b      	ldr	r3, [pc, #492]	; (80043d0 <extInt_Config+0xb70>)
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	4a7a      	ldr	r2, [pc, #488]	; (80043d0 <extInt_Config+0xb70>)
 80041e6:	f043 0304 	orr.w	r3, r3, #4
 80041ea:	6153      	str	r3, [r2, #20]
					break;
 80041ec:	e11a      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a79      	ldr	r2, [pc, #484]	; (80043dc <extInt_Config+0xb7c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d106      	bne.n	8004208 <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80041fa:	4b75      	ldr	r3, [pc, #468]	; (80043d0 <extInt_Config+0xb70>)
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	4a74      	ldr	r2, [pc, #464]	; (80043d0 <extInt_Config+0xb70>)
 8004200:	f043 0307 	orr.w	r3, r3, #7
 8004204:	6153      	str	r3, [r2, #20]
					break;
 8004206:	e10d      	b.n	8004424 <extInt_Config+0xbc4>
						__NOP();
 8004208:	bf00      	nop
					break;
 800420a:	e10b      	b.n	8004424 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 800420c:	4b70      	ldr	r3, [pc, #448]	; (80043d0 <extInt_Config+0xb70>)
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	4a6f      	ldr	r2, [pc, #444]	; (80043d0 <extInt_Config+0xb70>)
 8004212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004216:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a70      	ldr	r2, [pc, #448]	; (80043e0 <extInt_Config+0xb80>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d104      	bne.n	800422e <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8004224:	4b6a      	ldr	r3, [pc, #424]	; (80043d0 <extInt_Config+0xb70>)
 8004226:	4a6a      	ldr	r2, [pc, #424]	; (80043d0 <extInt_Config+0xb70>)
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	6153      	str	r3, [r2, #20]
 800422c:	e041      	b.n	80042b2 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a6b      	ldr	r2, [pc, #428]	; (80043e4 <extInt_Config+0xb84>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d106      	bne.n	8004248 <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800423a:	4b65      	ldr	r3, [pc, #404]	; (80043d0 <extInt_Config+0xb70>)
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	4a64      	ldr	r2, [pc, #400]	; (80043d0 <extInt_Config+0xb70>)
 8004240:	f043 0310 	orr.w	r3, r3, #16
 8004244:	6153      	str	r3, [r2, #20]
 8004246:	e034      	b.n	80042b2 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a5f      	ldr	r2, [pc, #380]	; (80043cc <extInt_Config+0xb6c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d106      	bne.n	8004262 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8004254:	4b5e      	ldr	r3, [pc, #376]	; (80043d0 <extInt_Config+0xb70>)
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	4a5d      	ldr	r2, [pc, #372]	; (80043d0 <extInt_Config+0xb70>)
 800425a:	f043 0320 	orr.w	r3, r3, #32
 800425e:	6153      	str	r3, [r2, #20]
 8004260:	e027      	b.n	80042b2 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a5a      	ldr	r2, [pc, #360]	; (80043d4 <extInt_Config+0xb74>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d106      	bne.n	800427c <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 800426e:	4b58      	ldr	r3, [pc, #352]	; (80043d0 <extInt_Config+0xb70>)
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	4a57      	ldr	r2, [pc, #348]	; (80043d0 <extInt_Config+0xb70>)
 8004274:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004278:	6153      	str	r3, [r2, #20]
 800427a:	e01a      	b.n	80042b2 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a55      	ldr	r2, [pc, #340]	; (80043d8 <extInt_Config+0xb78>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d106      	bne.n	8004296 <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8004288:	4b51      	ldr	r3, [pc, #324]	; (80043d0 <extInt_Config+0xb70>)
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	4a50      	ldr	r2, [pc, #320]	; (80043d0 <extInt_Config+0xb70>)
 800428e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004292:	6153      	str	r3, [r2, #20]
 8004294:	e00d      	b.n	80042b2 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a4f      	ldr	r2, [pc, #316]	; (80043dc <extInt_Config+0xb7c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d106      	bne.n	80042b0 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 80042a2:	4b4b      	ldr	r3, [pc, #300]	; (80043d0 <extInt_Config+0xb70>)
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	4a4a      	ldr	r2, [pc, #296]	; (80043d0 <extInt_Config+0xb70>)
 80042a8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80042ac:	6153      	str	r3, [r2, #20]
 80042ae:	e000      	b.n	80042b2 <extInt_Config+0xa52>

					} else {
						__NOP();
 80042b0:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 80042b2:	4b47      	ldr	r3, [pc, #284]	; (80043d0 <extInt_Config+0xb70>)
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	4a46      	ldr	r2, [pc, #280]	; (80043d0 <extInt_Config+0xb70>)
 80042b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042bc:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a46      	ldr	r2, [pc, #280]	; (80043e0 <extInt_Config+0xb80>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d104      	bne.n	80042d4 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 80042ca:	4b41      	ldr	r3, [pc, #260]	; (80043d0 <extInt_Config+0xb70>)
 80042cc:	4a40      	ldr	r2, [pc, #256]	; (80043d0 <extInt_Config+0xb70>)
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 80042d2:	e0a7      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a42      	ldr	r2, [pc, #264]	; (80043e4 <extInt_Config+0xb84>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d106      	bne.n	80042ee <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80042e0:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <extInt_Config+0xb70>)
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	4a3a      	ldr	r2, [pc, #232]	; (80043d0 <extInt_Config+0xb70>)
 80042e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ea:	6153      	str	r3, [r2, #20]
					break;
 80042ec:	e09a      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a35      	ldr	r2, [pc, #212]	; (80043cc <extInt_Config+0xb6c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d106      	bne.n	8004308 <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 80042fa:	4b35      	ldr	r3, [pc, #212]	; (80043d0 <extInt_Config+0xb70>)
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	4a34      	ldr	r2, [pc, #208]	; (80043d0 <extInt_Config+0xb70>)
 8004300:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004304:	6153      	str	r3, [r2, #20]
					break;
 8004306:	e08d      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a31      	ldr	r2, [pc, #196]	; (80043d4 <extInt_Config+0xb74>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d106      	bne.n	8004322 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8004314:	4b2e      	ldr	r3, [pc, #184]	; (80043d0 <extInt_Config+0xb70>)
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	4a2d      	ldr	r2, [pc, #180]	; (80043d0 <extInt_Config+0xb70>)
 800431a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800431e:	6153      	str	r3, [r2, #20]
					break;
 8004320:	e080      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a2b      	ldr	r2, [pc, #172]	; (80043d8 <extInt_Config+0xb78>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d106      	bne.n	800433c <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 800432e:	4b28      	ldr	r3, [pc, #160]	; (80043d0 <extInt_Config+0xb70>)
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	4a27      	ldr	r2, [pc, #156]	; (80043d0 <extInt_Config+0xb70>)
 8004334:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004338:	6153      	str	r3, [r2, #20]
					break;
 800433a:	e073      	b.n	8004424 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a26      	ldr	r2, [pc, #152]	; (80043dc <extInt_Config+0xb7c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d106      	bne.n	8004356 <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8004348:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <extInt_Config+0xb70>)
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	4a20      	ldr	r2, [pc, #128]	; (80043d0 <extInt_Config+0xb70>)
 800434e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004352:	6153      	str	r3, [r2, #20]
					break;
 8004354:	e066      	b.n	8004424 <extInt_Config+0xbc4>
						__NOP();
 8004356:	bf00      	nop
					break;
 8004358:	e064      	b.n	8004424 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 800435a:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <extInt_Config+0xb70>)
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	4a1c      	ldr	r2, [pc, #112]	; (80043d0 <extInt_Config+0xb70>)
 8004360:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004364:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1c      	ldr	r2, [pc, #112]	; (80043e0 <extInt_Config+0xb80>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d104      	bne.n	800437c <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8004372:	4b17      	ldr	r3, [pc, #92]	; (80043d0 <extInt_Config+0xb70>)
 8004374:	4a16      	ldr	r2, [pc, #88]	; (80043d0 <extInt_Config+0xb70>)
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 800437a:	e053      	b.n	8004424 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a18      	ldr	r2, [pc, #96]	; (80043e4 <extInt_Config+0xb84>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d106      	bne.n	8004396 <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8004388:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <extInt_Config+0xb70>)
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	4a10      	ldr	r2, [pc, #64]	; (80043d0 <extInt_Config+0xb70>)
 800438e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004392:	6153      	str	r3, [r2, #20]
						break;
 8004394:	e046      	b.n	8004424 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <extInt_Config+0xb6c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d106      	bne.n	80043b0 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 80043a2:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <extInt_Config+0xb70>)
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <extInt_Config+0xb70>)
 80043a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043ac:	6153      	str	r3, [r2, #20]
						break;
 80043ae:	e039      	b.n	8004424 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a07      	ldr	r2, [pc, #28]	; (80043d4 <extInt_Config+0xb74>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d115      	bne.n	80043e8 <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 80043bc:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <extInt_Config+0xb70>)
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	4a03      	ldr	r2, [pc, #12]	; (80043d0 <extInt_Config+0xb70>)
 80043c2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80043c6:	6153      	str	r3, [r2, #20]
						break;
 80043c8:	e02c      	b.n	8004424 <extInt_Config+0xbc4>
 80043ca:	bf00      	nop
 80043cc:	40020800 	.word	0x40020800
 80043d0:	40013800 	.word	0x40013800
 80043d4:	40020c00 	.word	0x40020c00
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40021c00 	.word	0x40021c00
 80043e0:	40020000 	.word	0x40020000
 80043e4:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a6c      	ldr	r2, [pc, #432]	; (80045a0 <extInt_Config+0xd40>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d106      	bne.n	8004402 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80043f4:	4b6b      	ldr	r3, [pc, #428]	; (80045a4 <extInt_Config+0xd44>)
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	4a6a      	ldr	r2, [pc, #424]	; (80045a4 <extInt_Config+0xd44>)
 80043fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043fe:	6153      	str	r3, [r2, #20]
						break;
 8004400:	e010      	b.n	8004424 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a67      	ldr	r2, [pc, #412]	; (80045a8 <extInt_Config+0xd48>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d106      	bne.n	800441c <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 800440e:	4b65      	ldr	r3, [pc, #404]	; (80045a4 <extInt_Config+0xd44>)
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	4a64      	ldr	r2, [pc, #400]	; (80045a4 <extInt_Config+0xd44>)
 8004414:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8004418:	6153      	str	r3, [r2, #20]
						break;
 800441a:	e003      	b.n	8004424 <extInt_Config+0xbc4>
							__NOP();
 800441c:	bf00      	nop
						break;
 800441e:	e001      	b.n	8004424 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8004420:	bf00      	nop
						break;
 8004422:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	791b      	ldrb	r3, [r3, #4]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d020      	beq.n	800446e <extInt_Config+0xc0e>
 800442c:	2b02      	cmp	r3, #2
 800442e:	dc37      	bgt.n	80044a0 <extInt_Config+0xc40>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <extInt_Config+0xbda>
 8004434:	2b01      	cmp	r3, #1
 8004436:	d00d      	beq.n	8004454 <extInt_Config+0xbf4>
 8004438:	e032      	b.n	80044a0 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800443a:	4b5c      	ldr	r3, [pc, #368]	; (80045ac <extInt_Config+0xd4c>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6812      	ldr	r2, [r2, #0]
 8004442:	7912      	ldrb	r2, [r2, #4]
 8004444:	4611      	mov	r1, r2
 8004446:	2201      	movs	r2, #1
 8004448:	408a      	lsls	r2, r1
 800444a:	4611      	mov	r1, r2
 800444c:	4a57      	ldr	r2, [pc, #348]	; (80045ac <extInt_Config+0xd4c>)
 800444e:	430b      	orrs	r3, r1
 8004450:	60d3      	str	r3, [r2, #12]

		break;
 8004452:	e027      	b.n	80044a4 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004454:	4b55      	ldr	r3, [pc, #340]	; (80045ac <extInt_Config+0xd4c>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	7912      	ldrb	r2, [r2, #4]
 800445e:	4611      	mov	r1, r2
 8004460:	2201      	movs	r2, #1
 8004462:	408a      	lsls	r2, r1
 8004464:	4611      	mov	r1, r2
 8004466:	4a51      	ldr	r2, [pc, #324]	; (80045ac <extInt_Config+0xd4c>)
 8004468:	430b      	orrs	r3, r1
 800446a:	6093      	str	r3, [r2, #8]

		break;
 800446c:	e01a      	b.n	80044a4 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800446e:	4b4f      	ldr	r3, [pc, #316]	; (80045ac <extInt_Config+0xd4c>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	7912      	ldrb	r2, [r2, #4]
 8004478:	4611      	mov	r1, r2
 800447a:	2201      	movs	r2, #1
 800447c:	408a      	lsls	r2, r1
 800447e:	4611      	mov	r1, r2
 8004480:	4a4a      	ldr	r2, [pc, #296]	; (80045ac <extInt_Config+0xd4c>)
 8004482:	430b      	orrs	r3, r1
 8004484:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004486:	4b49      	ldr	r3, [pc, #292]	; (80045ac <extInt_Config+0xd4c>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	7912      	ldrb	r2, [r2, #4]
 8004490:	4611      	mov	r1, r2
 8004492:	2201      	movs	r2, #1
 8004494:	408a      	lsls	r2, r1
 8004496:	4611      	mov	r1, r2
 8004498:	4a44      	ldr	r2, [pc, #272]	; (80045ac <extInt_Config+0xd4c>)
 800449a:	430b      	orrs	r3, r1
 800449c:	6093      	str	r3, [r2, #8]

		break;
 800449e:	e001      	b.n	80044a4 <extInt_Config+0xc44>

	}default :{

		__NOP();
 80044a0:	bf00      	nop
		break;
 80044a2:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80044a4:	b672      	cpsid	i
}
 80044a6:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80044a8:	4b40      	ldr	r3, [pc, #256]	; (80045ac <extInt_Config+0xd4c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	7912      	ldrb	r2, [r2, #4]
 80044b2:	4611      	mov	r1, r2
 80044b4:	2201      	movs	r2, #1
 80044b6:	408a      	lsls	r2, r1
 80044b8:	4611      	mov	r1, r2
 80044ba:	4a3c      	ldr	r2, [pc, #240]	; (80045ac <extInt_Config+0xd4c>)
 80044bc:	430b      	orrs	r3, r1
 80044be:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	791b      	ldrb	r3, [r3, #4]
 80044c6:	2b0f      	cmp	r3, #15
 80044c8:	d862      	bhi.n	8004590 <extInt_Config+0xd30>
 80044ca:	a201      	add	r2, pc, #4	; (adr r2, 80044d0 <extInt_Config+0xc70>)
 80044cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d0:	08004511 	.word	0x08004511
 80044d4:	08004519 	.word	0x08004519
 80044d8:	08004521 	.word	0x08004521
 80044dc:	08004529 	.word	0x08004529
 80044e0:	08004531 	.word	0x08004531
 80044e4:	08004539 	.word	0x08004539
 80044e8:	08004541 	.word	0x08004541
 80044ec:	08004549 	.word	0x08004549
 80044f0:	08004551 	.word	0x08004551
 80044f4:	08004559 	.word	0x08004559
 80044f8:	08004561 	.word	0x08004561
 80044fc:	08004569 	.word	0x08004569
 8004500:	08004571 	.word	0x08004571
 8004504:	08004579 	.word	0x08004579
 8004508:	08004581 	.word	0x08004581
 800450c:	08004589 	.word	0x08004589
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8004510:	2006      	movs	r0, #6
 8004512:	f7ff f987 	bl	8003824 <__NVIC_EnableIRQ>
			break;
 8004516:	e03d      	b.n	8004594 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 8004518:	2007      	movs	r0, #7
 800451a:	f7ff f983 	bl	8003824 <__NVIC_EnableIRQ>
			break;
 800451e:	e039      	b.n	8004594 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8004520:	2008      	movs	r0, #8
 8004522:	f7ff f97f 	bl	8003824 <__NVIC_EnableIRQ>
			break;
 8004526:	e035      	b.n	8004594 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 8004528:	2009      	movs	r0, #9
 800452a:	f7ff f97b 	bl	8003824 <__NVIC_EnableIRQ>
			break;
 800452e:	e031      	b.n	8004594 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8004530:	200a      	movs	r0, #10
 8004532:	f7ff f977 	bl	8003824 <__NVIC_EnableIRQ>
			break;
 8004536:	e02d      	b.n	8004594 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004538:	2017      	movs	r0, #23
 800453a:	f7ff f973 	bl	8003824 <__NVIC_EnableIRQ>
			break;
 800453e:	e029      	b.n	8004594 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004540:	2017      	movs	r0, #23
 8004542:	f7ff f96f 	bl	8003824 <__NVIC_EnableIRQ>
			break;
 8004546:	e025      	b.n	8004594 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004548:	2017      	movs	r0, #23
 800454a:	f7ff f96b 	bl	8003824 <__NVIC_EnableIRQ>
			break;
 800454e:	e021      	b.n	8004594 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004550:	2017      	movs	r0, #23
 8004552:	f7ff f967 	bl	8003824 <__NVIC_EnableIRQ>
			break;
 8004556:	e01d      	b.n	8004594 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004558:	2017      	movs	r0, #23
 800455a:	f7ff f963 	bl	8003824 <__NVIC_EnableIRQ>
			break;
 800455e:	e019      	b.n	8004594 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004560:	2028      	movs	r0, #40	; 0x28
 8004562:	f7ff f95f 	bl	8003824 <__NVIC_EnableIRQ>
			break;
 8004566:	e015      	b.n	8004594 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004568:	2028      	movs	r0, #40	; 0x28
 800456a:	f7ff f95b 	bl	8003824 <__NVIC_EnableIRQ>
			break;
 800456e:	e011      	b.n	8004594 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004570:	2028      	movs	r0, #40	; 0x28
 8004572:	f7ff f957 	bl	8003824 <__NVIC_EnableIRQ>
			break;
 8004576:	e00d      	b.n	8004594 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004578:	2028      	movs	r0, #40	; 0x28
 800457a:	f7ff f953 	bl	8003824 <__NVIC_EnableIRQ>
			break;
 800457e:	e009      	b.n	8004594 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004580:	2028      	movs	r0, #40	; 0x28
 8004582:	f7ff f94f 	bl	8003824 <__NVIC_EnableIRQ>
			break;
 8004586:	e005      	b.n	8004594 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004588:	2028      	movs	r0, #40	; 0x28
 800458a:	f7ff f94b 	bl	8003824 <__NVIC_EnableIRQ>
			break;
 800458e:	e001      	b.n	8004594 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 8004590:	bf00      	nop
			break;
 8004592:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004594:	b662      	cpsie	i
}
 8004596:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 8004598:	bf00      	nop
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40021000 	.word	0x40021000
 80045a4:	40013800 	.word	0x40013800
 80045a8:	40021c00 	.word	0x40021c00
 80045ac:	40013c00 	.word	0x40013c00

080045b0 <callback_extInt0>:
	__enable_irq();

}

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
	__NOP();
 80045b4:	bf00      	nop
}
 80045b6:	bf00      	nop
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
	__NOP();
 80045c4:	bf00      	nop
}
 80045c6:	bf00      	nop
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
	__NOP();
 80045d4:	bf00      	nop
}
 80045d6:	bf00      	nop
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
	__NOP();
 80045e4:	bf00      	nop
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
	__NOP();
 80045f4:	bf00      	nop
}
 80045f6:	bf00      	nop
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
	__NOP();
 8004604:	bf00      	nop
}
 8004606:	bf00      	nop
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
	__NOP();
 8004614:	bf00      	nop
}
 8004616:	bf00      	nop
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
	__NOP();
 8004624:	bf00      	nop
}
 8004626:	bf00      	nop
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
	__NOP();
 8004634:	bf00      	nop
}
 8004636:	bf00      	nop
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
	__NOP();
 8004644:	bf00      	nop
}
 8004646:	bf00      	nop
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
	__NOP();
 8004654:	bf00      	nop
}
 8004656:	bf00      	nop
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
	__NOP();
 8004664:	bf00      	nop
}
 8004666:	bf00      	nop
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
	__NOP();
 8004674:	bf00      	nop
}
 8004676:	bf00      	nop
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
	__NOP();
 8004684:	bf00      	nop
}
 8004686:	bf00      	nop
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8004694:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <EXTI0_IRQHandler+0x24>)
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 80046a0:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <EXTI0_IRQHandler+0x24>)
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	4a03      	ldr	r2, [pc, #12]	; (80046b4 <EXTI0_IRQHandler+0x24>)
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 80046ac:	f7ff ff80 	bl	80045b0 <callback_extInt0>
	}
}
 80046b0:	bf00      	nop
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40013c00 	.word	0x40013c00

080046b8 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 80046bc:	4b07      	ldr	r3, [pc, #28]	; (80046dc <EXTI1_IRQHandler+0x24>)
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d007      	beq.n	80046d8 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 80046c8:	4b04      	ldr	r3, [pc, #16]	; (80046dc <EXTI1_IRQHandler+0x24>)
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	4a03      	ldr	r2, [pc, #12]	; (80046dc <EXTI1_IRQHandler+0x24>)
 80046ce:	f043 0302 	orr.w	r3, r3, #2
 80046d2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 80046d4:	f7fd f83c 	bl	8001750 <callback_extInt1>
	}
}
 80046d8:	bf00      	nop
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40013c00 	.word	0x40013c00

080046e0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 80046e4:	4b07      	ldr	r3, [pc, #28]	; (8004704 <EXTI2_IRQHandler+0x24>)
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <EXTI2_IRQHandler+0x24>)
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	4a03      	ldr	r2, [pc, #12]	; (8004704 <EXTI2_IRQHandler+0x24>)
 80046f6:	f043 0304 	orr.w	r3, r3, #4
 80046fa:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 80046fc:	f7ff ff60 	bl	80045c0 <callback_extInt2>
	}
}
 8004700:	bf00      	nop
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40013c00 	.word	0x40013c00

08004708 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <EXTI3_IRQHandler+0x24>)
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8004718:	4b04      	ldr	r3, [pc, #16]	; (800472c <EXTI3_IRQHandler+0x24>)
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	4a03      	ldr	r2, [pc, #12]	; (800472c <EXTI3_IRQHandler+0x24>)
 800471e:	f043 0308 	orr.w	r3, r3, #8
 8004722:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8004724:	f7fd f824 	bl	8001770 <callback_extInt3>
	}
}
 8004728:	bf00      	nop
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40013c00 	.word	0x40013c00

08004730 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8004734:	4b07      	ldr	r3, [pc, #28]	; (8004754 <EXTI4_IRQHandler+0x24>)
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8004740:	4b04      	ldr	r3, [pc, #16]	; (8004754 <EXTI4_IRQHandler+0x24>)
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	4a03      	ldr	r2, [pc, #12]	; (8004754 <EXTI4_IRQHandler+0x24>)
 8004746:	f043 0310 	orr.w	r3, r3, #16
 800474a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 800474c:	f7ff ff40 	bl	80045d0 <callback_extInt4>
	}
}
 8004750:	bf00      	nop
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40013c00 	.word	0x40013c00

08004758 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 800475c:	4b26      	ldr	r3, [pc, #152]	; (80047f8 <EXTI9_5_IRQHandler+0xa0>)
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f003 0320 	and.w	r3, r3, #32
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8004768:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <EXTI9_5_IRQHandler+0xa0>)
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	4a22      	ldr	r2, [pc, #136]	; (80047f8 <EXTI9_5_IRQHandler+0xa0>)
 800476e:	f043 0320 	orr.w	r3, r3, #32
 8004772:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 8004774:	f7ff ff34 	bl	80045e0 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 8004778:	e03c      	b.n	80047f4 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 800477a:	4b1f      	ldr	r3, [pc, #124]	; (80047f8 <EXTI9_5_IRQHandler+0xa0>)
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8004786:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <EXTI9_5_IRQHandler+0xa0>)
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	4a1b      	ldr	r2, [pc, #108]	; (80047f8 <EXTI9_5_IRQHandler+0xa0>)
 800478c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004790:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 8004792:	f7ff ff2d 	bl	80045f0 <callback_extInt6>
}
 8004796:	e02d      	b.n	80047f4 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 8004798:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <EXTI9_5_IRQHandler+0xa0>)
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 80047a4:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <EXTI9_5_IRQHandler+0xa0>)
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	4a13      	ldr	r2, [pc, #76]	; (80047f8 <EXTI9_5_IRQHandler+0xa0>)
 80047aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ae:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 80047b0:	f7ff ff26 	bl	8004600 <callback_extInt7>
}
 80047b4:	e01e      	b.n	80047f4 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <EXTI9_5_IRQHandler+0xa0>)
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d008      	beq.n	80047d4 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 80047c2:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <EXTI9_5_IRQHandler+0xa0>)
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	4a0c      	ldr	r2, [pc, #48]	; (80047f8 <EXTI9_5_IRQHandler+0xa0>)
 80047c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047cc:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 80047ce:	f7ff ff1f 	bl	8004610 <callback_extInt8>
}
 80047d2:	e00f      	b.n	80047f4 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 80047d4:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <EXTI9_5_IRQHandler+0xa0>)
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <EXTI9_5_IRQHandler+0xa0>)
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	4a04      	ldr	r2, [pc, #16]	; (80047f8 <EXTI9_5_IRQHandler+0xa0>)
 80047e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ea:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 80047ec:	f7ff ff18 	bl	8004620 <callback_extInt9>
}
 80047f0:	e000      	b.n	80047f4 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 80047f2:	bf00      	nop
}
 80047f4:	bf00      	nop
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40013c00 	.word	0x40013c00

080047fc <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8004800:	4b2d      	ldr	r3, [pc, #180]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 800480c:	4b2a      	ldr	r3, [pc, #168]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	4a29      	ldr	r2, [pc, #164]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 8004812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004816:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8004818:	f7ff ff0a 	bl	8004630 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 800481c:	e049      	b.n	80048b2 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 800481e:	4b26      	ldr	r3, [pc, #152]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 800482a:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	4a22      	ldr	r2, [pc, #136]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 8004830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004834:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 8004836:	f7ff ff03 	bl	8004640 <callback_extInt11>
}
 800483a:	e03a      	b.n	80048b2 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 800483c:	4b1e      	ldr	r3, [pc, #120]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8004848:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	4a1a      	ldr	r2, [pc, #104]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 800484e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004852:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 8004854:	f7ff fefc 	bl	8004650 <callback_extInt12>
}
 8004858:	e02b      	b.n	80048b2 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 800485a:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8004866:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 800486c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004870:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 8004872:	f7ff fef5 	bl	8004660 <callback_extInt13>
}
 8004876:	e01c      	b.n	80048b2 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 8004878:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8004884:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	4a0b      	ldr	r2, [pc, #44]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 800488a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800488e:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8004890:	f7ff feee 	bl	8004670 <callback_extInt14>
}
 8004894:	e00d      	b.n	80048b2 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d007      	beq.n	80048b2 <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	4a04      	ldr	r2, [pc, #16]	; (80048b8 <EXTI15_10_IRQHandler+0xbc>)
 80048a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ac:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 80048ae:	f7ff fee7 	bl	8004680 <callback_extInt15>
}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40013c00 	.word	0x40013c00

080048bc <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a88      	ldr	r2, [pc, #544]	; (8004af4 <GPIO_Config+0x238>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d106      	bne.n	80048e4 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 80048d6:	4b88      	ldr	r3, [pc, #544]	; (8004af8 <GPIO_Config+0x23c>)
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	4a87      	ldr	r2, [pc, #540]	; (8004af8 <GPIO_Config+0x23c>)
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	6313      	str	r3, [r2, #48]	; 0x30
 80048e2:	e03a      	b.n	800495a <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a84      	ldr	r2, [pc, #528]	; (8004afc <GPIO_Config+0x240>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d106      	bne.n	80048fc <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 80048ee:	4b82      	ldr	r3, [pc, #520]	; (8004af8 <GPIO_Config+0x23c>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	4a81      	ldr	r2, [pc, #516]	; (8004af8 <GPIO_Config+0x23c>)
 80048f4:	f043 0302 	orr.w	r3, r3, #2
 80048f8:	6313      	str	r3, [r2, #48]	; 0x30
 80048fa:	e02e      	b.n	800495a <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a7f      	ldr	r2, [pc, #508]	; (8004b00 <GPIO_Config+0x244>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d106      	bne.n	8004914 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8004906:	4b7c      	ldr	r3, [pc, #496]	; (8004af8 <GPIO_Config+0x23c>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	4a7b      	ldr	r2, [pc, #492]	; (8004af8 <GPIO_Config+0x23c>)
 800490c:	f043 0304 	orr.w	r3, r3, #4
 8004910:	6313      	str	r3, [r2, #48]	; 0x30
 8004912:	e022      	b.n	800495a <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a7a      	ldr	r2, [pc, #488]	; (8004b04 <GPIO_Config+0x248>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d106      	bne.n	800492c <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 800491e:	4b76      	ldr	r3, [pc, #472]	; (8004af8 <GPIO_Config+0x23c>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	4a75      	ldr	r2, [pc, #468]	; (8004af8 <GPIO_Config+0x23c>)
 8004924:	f043 0308 	orr.w	r3, r3, #8
 8004928:	6313      	str	r3, [r2, #48]	; 0x30
 800492a:	e016      	b.n	800495a <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a75      	ldr	r2, [pc, #468]	; (8004b08 <GPIO_Config+0x24c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d106      	bne.n	8004944 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8004936:	4b70      	ldr	r3, [pc, #448]	; (8004af8 <GPIO_Config+0x23c>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	4a6f      	ldr	r2, [pc, #444]	; (8004af8 <GPIO_Config+0x23c>)
 800493c:	f043 0310 	orr.w	r3, r3, #16
 8004940:	6313      	str	r3, [r2, #48]	; 0x30
 8004942:	e00a      	b.n	800495a <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a70      	ldr	r2, [pc, #448]	; (8004b0c <GPIO_Config+0x250>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d105      	bne.n	800495a <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 800494e:	4b6a      	ldr	r3, [pc, #424]	; (8004af8 <GPIO_Config+0x23c>)
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	4a69      	ldr	r2, [pc, #420]	; (8004af8 <GPIO_Config+0x23c>)
 8004954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004958:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	795b      	ldrb	r3, [r3, #5]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d143      	bne.n	80049ea <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	791b      	ldrb	r3, [r3, #4]
 8004966:	2b07      	cmp	r3, #7
 8004968:	d81f      	bhi.n	80049aa <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	791b      	ldrb	r3, [r3, #4]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a1a      	ldr	r2, [r3, #32]
 8004978:	210f      	movs	r1, #15
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	fa01 f303 	lsl.w	r3, r1, r3
 8004980:	43db      	mvns	r3, r3
 8004982:	4619      	mov	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	400a      	ands	r2, r1
 800498a:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6a1a      	ldr	r2, [r3, #32]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	7a5b      	ldrb	r3, [r3, #9]
 8004996:	4619      	mov	r1, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	fa01 f303 	lsl.w	r3, r1, r3
 800499e:	4619      	mov	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	621a      	str	r2, [r3, #32]
 80049a8:	e01f      	b.n	80049ea <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	791b      	ldrb	r3, [r3, #4]
 80049ae:	3b08      	subs	r3, #8
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ba:	210f      	movs	r1, #15
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	fa01 f303 	lsl.w	r3, r1, r3
 80049c2:	43db      	mvns	r3, r3
 80049c4:	4619      	mov	r1, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	400a      	ands	r2, r1
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	7a5b      	ldrb	r3, [r3, #9]
 80049d8:	4619      	mov	r1, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	fa01 f303 	lsl.w	r3, r1, r3
 80049e0:	4619      	mov	r1, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	795b      	ldrb	r3, [r3, #5]
 80049ee:	461a      	mov	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	791b      	ldrb	r3, [r3, #4]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	791b      	ldrb	r3, [r3, #4]
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	2103      	movs	r1, #3
 8004a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0e:	43db      	mvns	r3, r3
 8004a10:	4619      	mov	r1, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	400a      	ands	r2, r1
 8004a18:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6819      	ldr	r1, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	7a1b      	ldrb	r3, [r3, #8]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	791b      	ldrb	r3, [r3, #4]
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	791b      	ldrb	r3, [r3, #4]
 8004a44:	4619      	mov	r1, r3
 8004a46:	2301      	movs	r3, #1
 8004a48:	408b      	lsls	r3, r1
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	400a      	ands	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6859      	ldr	r1, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	799b      	ldrb	r3, [r3, #6]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	791b      	ldrb	r3, [r3, #4]
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	fa02 f303 	lsl.w	r3, r2, r3
 8004a76:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	791b      	ldrb	r3, [r3, #4]
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	2103      	movs	r1, #3
 8004a86:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	400a      	ands	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6899      	ldr	r1, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	79db      	ldrb	r3, [r3, #7]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	791b      	ldrb	r3, [r3, #4]
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	791b      	ldrb	r3, [r3, #4]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	2103      	movs	r1, #3
 8004ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aca:	43db      	mvns	r3, r3
 8004acc:	4619      	mov	r1, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	400a      	ands	r2, r1
 8004ad4:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68d9      	ldr	r1, [r3, #12]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 8004ae6:	bf00      	nop
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40020000 	.word	0x40020000
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40020400 	.word	0x40020400
 8004b00:	40020800 	.word	0x40020800
 8004b04:	40020c00 	.word	0x40020c00
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	40021c00 	.word	0x40021c00

08004b10 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d10d      	bne.n	8004b3e <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699a      	ldr	r2, [r3, #24]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	791b      	ldrb	r3, [r3, #4]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	2301      	movs	r3, #1
 8004b30:	408b      	lsls	r3, r1
 8004b32:	4619      	mov	r1, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8004b3c:	e00d      	b.n	8004b5a <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699a      	ldr	r2, [r3, #24]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	791b      	ldrb	r3, [r3, #4]
 8004b48:	3310      	adds	r3, #16
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	4619      	mov	r1, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	619a      	str	r2, [r3, #24]
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 8004b72:	78fb      	ldrb	r3, [r7, #3]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10d      	bne.n	8004b94 <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	791b      	ldrb	r3, [r3, #4]
 8004b82:	4619      	mov	r1, r3
 8004b84:	2301      	movs	r3, #1
 8004b86:	408b      	lsls	r3, r1
 8004b88:	4619      	mov	r1, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 8004b92:	e00d      	b.n	8004bb0 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	791b      	ldrb	r3, [r3, #4]
 8004b9e:	3310      	adds	r3, #16
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	619a      	str	r2, [r3, #24]
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	791b      	ldrb	r3, [r3, #4]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	2301      	movs	r3, #1
 8004bd0:	4093      	lsls	r3, r2
 8004bd2:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8004bdc:	897b      	ldrh	r3, [r7, #10]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4013      	ands	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	791b      	ldrb	r3, [r3, #4]
 8004be8:	461a      	mov	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	40d3      	lsrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b084      	sub	sp, #16
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff ffd8 	bl	8004bbc <GPIO_ReadPin>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	bf0c      	ite	eq
 8004c16:	2301      	moveq	r3, #1
 8004c18:	2300      	movne	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff ff76 	bl	8004b10 <GPIO_WritePin>
}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <configMPUAccel>:
#include "I2CDriver.h"
#include "GPIOxDriver.h"
#include "BasicTimer.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff fe3b 	bl	80048bc <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fe36 	bl	80048bc <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f002 f999 	bl	8006f8c <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 8004c5a:	e004      	b.n	8004c66 <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f94f 	bl	8004f00 <WHOIAM>
 8004c62:	4603      	mov	r3, r0
 8004c64:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f7      	beq.n	8004c5c <configMPUAccel+0x30>
	}


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 8004c6c:	216b      	movs	r1, #107	; 0x6b
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f8f1 	bl	8004e56 <readData>
 8004c74:	4603      	mov	r3, r0
 8004c76:	73bb      	strb	r3, [r7, #14]

	byte &=  ~byte;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 8004c7c:	7bbb      	ldrb	r3, [r7, #14]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	216b      	movs	r1, #107	; 0x6b
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f89c 	bl	8004dc0 <writeData>

	byte = readData(ptrMPUAccel, 0x6B);
 8004c88:	216b      	movs	r1, #107	; 0x6b
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f8e3 	bl	8004e56 <readData>
 8004c90:	4603      	mov	r3, r0
 8004c92:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 8004c94:	211c      	movs	r1, #28
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f8dd 	bl	8004e56 <readData>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	73bb      	strb	r3, [r7, #14]

		byte &= ~(0b00011000) ;
 8004ca0:	7bbb      	ldrb	r3, [r7, #14]
 8004ca2:	f023 0318 	bic.w	r3, r3, #24
 8004ca6:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d833      	bhi.n	8004d18 <configMPUAccel+0xec>
 8004cb0:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <configMPUAccel+0x8c>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004cc9 	.word	0x08004cc9
 8004cbc:	08004cd7 	.word	0x08004cd7
 8004cc0:	08004ced 	.word	0x08004ced
 8004cc4:	08004d03 	.word	0x08004d03
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 8004cc8:	7bbb      	ldrb	r3, [r7, #14]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	211c      	movs	r1, #28
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f876 	bl	8004dc0 <writeData>


				break;
 8004cd4:	e021      	b.n	8004d1a <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 8004cd6:	7bbb      	ldrb	r3, [r7, #14]
 8004cd8:	f043 0308 	orr.w	r3, r3, #8
 8004cdc:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8004cde:	7bbb      	ldrb	r3, [r7, #14]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	211c      	movs	r1, #28
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f86b 	bl	8004dc0 <writeData>


				break;
 8004cea:	e016      	b.n	8004d1a <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 8004cec:	7bbb      	ldrb	r3, [r7, #14]
 8004cee:	f043 0310 	orr.w	r3, r3, #16
 8004cf2:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8004cf4:	7bbb      	ldrb	r3, [r7, #14]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	211c      	movs	r1, #28
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f860 	bl	8004dc0 <writeData>


				break;
 8004d00:	e00b      	b.n	8004d1a <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 8004d02:	7bbb      	ldrb	r3, [r7, #14]
 8004d04:	f043 0318 	orr.w	r3, r3, #24
 8004d08:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8004d0a:	7bbb      	ldrb	r3, [r7, #14]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	211c      	movs	r1, #28
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f855 	bl	8004dc0 <writeData>


				break;
 8004d16:	e000      	b.n	8004d1a <configMPUAccel+0xee>
			}default:{
				break;
 8004d18:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 8004d1a:	211c      	movs	r1, #28
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f89a 	bl	8004e56 <readData>
 8004d22:	4603      	mov	r3, r0
 8004d24:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 8004d26:	211b      	movs	r1, #27
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f894 	bl	8004e56 <readData>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 8004d32:	7bbb      	ldrb	r3, [r7, #14]
 8004d34:	f023 0318 	bic.w	r3, r3, #24
 8004d38:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	785b      	ldrb	r3, [r3, #1]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d832      	bhi.n	8004da8 <configMPUAccel+0x17c>
 8004d42:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <configMPUAccel+0x11c>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d67 	.word	0x08004d67
 8004d50:	08004d7d 	.word	0x08004d7d
 8004d54:	08004d93 	.word	0x08004d93
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 8004d58:	7bbb      	ldrb	r3, [r7, #14]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	211b      	movs	r1, #27
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f82e 	bl	8004dc0 <writeData>


				break;
 8004d64:	e021      	b.n	8004daa <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 8004d66:	7bbb      	ldrb	r3, [r7, #14]
 8004d68:	f043 0308 	orr.w	r3, r3, #8
 8004d6c:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8004d6e:	7bbb      	ldrb	r3, [r7, #14]
 8004d70:	461a      	mov	r2, r3
 8004d72:	211b      	movs	r1, #27
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f823 	bl	8004dc0 <writeData>


				break;
 8004d7a:	e016      	b.n	8004daa <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 8004d7c:	7bbb      	ldrb	r3, [r7, #14]
 8004d7e:	f043 0310 	orr.w	r3, r3, #16
 8004d82:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8004d84:	7bbb      	ldrb	r3, [r7, #14]
 8004d86:	461a      	mov	r2, r3
 8004d88:	211b      	movs	r1, #27
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f818 	bl	8004dc0 <writeData>


				break;
 8004d90:	e00b      	b.n	8004daa <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 8004d92:	7bbb      	ldrb	r3, [r7, #14]
 8004d94:	f043 0318 	orr.w	r3, r3, #24
 8004d98:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8004d9a:	7bbb      	ldrb	r3, [r7, #14]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	211b      	movs	r1, #27
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f80d 	bl	8004dc0 <writeData>


				break;
 8004da6:	e000      	b.n	8004daa <configMPUAccel+0x17e>
			}default:{
				break;
 8004da8:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 8004daa:	211b      	movs	r1, #27
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f852 	bl	8004e56 <readData>
 8004db2:	4603      	mov	r3, r0
 8004db4:	73bb      	strb	r3, [r7, #14]


}
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop

08004dc0 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	70fb      	strb	r3, [r7, #3]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de2:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f002 fa3f 	bl	800726c <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68d8      	ldr	r0, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	791b      	ldrb	r3, [r3, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	f002 faa1 	bl	8007342 <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	78fa      	ldrb	r2, [r7, #3]
 8004e06:	4611      	mov	r1, r2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f002 fac2 	bl	8007392 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8004e0e:	e000      	b.n	8004e12 <writeData+0x52>
		__NOP();
 8004e10:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f6      	bne.n	8004e10 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	78ba      	ldrb	r2, [r7, #2]
 8004e28:	4611      	mov	r1, r2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f002 facb 	bl	80073c6 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8004e30:	e000      	b.n	8004e34 <writeData+0x74>
		__NOP();
 8004e32:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f6      	bne.n	8004e32 <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f002 f9fd 	bl	8007248 <i2c_stopTransaction>



}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695a      	ldr	r2, [r3, #20]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e78:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f002 f9f4 	bl	800726c <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68d8      	ldr	r0, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	791b      	ldrb	r3, [r3, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	4619      	mov	r1, r3
 8004e92:	f002 fa56 	bl	8007342 <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	78fa      	ldrb	r2, [r7, #3]
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f002 fa77 	bl	8007392 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8004ea4:	e000      	b.n	8004ea8 <readData+0x52>
		__NOP();
 8004ea6:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1f6      	bne.n	8004ea6 <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f002 fa06 	bl	80072ce <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68d8      	ldr	r0, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	791b      	ldrb	r3, [r3, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	4619      	mov	r1, r3
 8004ed0:	f002 fa37 	bl	8007342 <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f002 fa20 	bl	800731e <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f002 f9b0 	bl	8007248 <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f002 fa84 	bl	80073fa <i2c_readDataByte>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 8004f10:	2175      	movs	r1, #117	; 0x75
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff ff9f 	bl	8004e56 <readData>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004f22:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bf14      	ite	ne
 8004f2e:	2301      	movne	r3, #1
 8004f30:	2300      	moveq	r3, #0
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8004f36:	7bbb      	ldrb	r3, [r7, #14]

}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 8004f60:	2143      	movs	r1, #67	; 0x43
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff ff77 	bl	8004e56 <readData>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 8004f6c:	2144      	movs	r1, #68	; 0x44
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff ff71 	bl	8004e56 <readData>
 8004f74:	4603      	mov	r3, r0
 8004f76:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 8004f78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f7c:	021b      	lsls	r3, r3, #8
 8004f7e:	b21a      	sxth	r2, r3
 8004f80:	89bb      	ldrh	r3, [r7, #12]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	785b      	ldrb	r3, [r3, #1]
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d846      	bhi.n	800501c <readGyro_X+0xdc>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <readGyro_X+0x54>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fa5 	.word	0x08004fa5
 8004f98:	08004fc3 	.word	0x08004fc3
 8004f9c:	08004fe1 	.word	0x08004fe1
 8004fa0:	08004fff 	.word	0x08004fff
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 8004fa4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fb fad3 	bl	8000554 <__aeabi_i2d>
 8004fae:	a325      	add	r3, pc, #148	; (adr r3, 8005044 <readGyro_X+0x104>)
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	f7fb fc62 	bl	800087c <__aeabi_ddiv>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8004fc0:	e02d      	b.n	800501e <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 8004fc2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fb fac4 	bl	8000554 <__aeabi_i2d>
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	4b19      	ldr	r3, [pc, #100]	; (8005038 <readGyro_X+0xf8>)
 8004fd2:	f7fb fc53 	bl	800087c <__aeabi_ddiv>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8004fde:	e01e      	b.n	800501e <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 8004fe0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fb fab5 	bl	8000554 <__aeabi_i2d>
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	4b13      	ldr	r3, [pc, #76]	; (800503c <readGyro_X+0xfc>)
 8004ff0:	f7fb fc44 	bl	800087c <__aeabi_ddiv>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8004ffc:	e00f      	b.n	800501e <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 8004ffe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005002:	4618      	mov	r0, r3
 8005004:	f7fb faa6 	bl	8000554 <__aeabi_i2d>
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <readGyro_X+0x100>)
 800500e:	f7fb fc35 	bl	800087c <__aeabi_ddiv>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800501a:	e000      	b.n	800501e <readGyro_X+0xde>
		}default:{
			break;
 800501c:	bf00      	nop
		}

	}

	return GYROX_R;
 800501e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005022:	f7fb fdf9 	bl	8000c18 <__aeabi_d2f>
 8005026:	4603      	mov	r3, r0
 8005028:	ee07 3a90 	vmov	s15, r3

}
 800502c:	eeb0 0a67 	vmov.f32	s0, s15
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40508000 	.word	0x40508000
 800503c:	40408000 	.word	0x40408000
 8005040:	40300000 	.word	0x40300000
 8005044:	00000000 	.word	0x00000000
 8005048:	40606000 	.word	0x40606000
 800504c:	00000000 	.word	0x00000000

08005050 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 8005058:	2300      	movs	r3, #0
 800505a:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 8005070:	2145      	movs	r1, #69	; 0x45
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7ff feef 	bl	8004e56 <readData>
 8005078:	4603      	mov	r3, r0
 800507a:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 800507c:	2146      	movs	r1, #70	; 0x46
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff fee9 	bl	8004e56 <readData>
 8005084:	4603      	mov	r3, r0
 8005086:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 8005088:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800508c:	021b      	lsls	r3, r3, #8
 800508e:	b21a      	sxth	r2, r3
 8005090:	89bb      	ldrh	r3, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	785b      	ldrb	r3, [r3, #1]
 800509a:	2b03      	cmp	r3, #3
 800509c:	d846      	bhi.n	800512c <readGyro_Y+0xdc>
 800509e:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <readGyro_Y+0x54>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050b5 	.word	0x080050b5
 80050a8:	080050d3 	.word	0x080050d3
 80050ac:	080050f1 	.word	0x080050f1
 80050b0:	0800510f 	.word	0x0800510f
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 80050b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fb fa4b 	bl	8000554 <__aeabi_i2d>
 80050be:	a325      	add	r3, pc, #148	; (adr r3, 8005154 <readGyro_Y+0x104>)
 80050c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c4:	f7fb fbda 	bl	800087c <__aeabi_ddiv>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80050d0:	e02d      	b.n	800512e <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 80050d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fb fa3c 	bl	8000554 <__aeabi_i2d>
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	4b19      	ldr	r3, [pc, #100]	; (8005148 <readGyro_Y+0xf8>)
 80050e2:	f7fb fbcb 	bl	800087c <__aeabi_ddiv>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80050ee:	e01e      	b.n	800512e <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 80050f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fb fa2d 	bl	8000554 <__aeabi_i2d>
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	4b13      	ldr	r3, [pc, #76]	; (800514c <readGyro_Y+0xfc>)
 8005100:	f7fb fbbc 	bl	800087c <__aeabi_ddiv>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800510c:	e00f      	b.n	800512e <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 800510e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005112:	4618      	mov	r0, r3
 8005114:	f7fb fa1e 	bl	8000554 <__aeabi_i2d>
 8005118:	f04f 0200 	mov.w	r2, #0
 800511c:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <readGyro_Y+0x100>)
 800511e:	f7fb fbad 	bl	800087c <__aeabi_ddiv>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800512a:	e000      	b.n	800512e <readGyro_Y+0xde>
		}default:{
			break;
 800512c:	bf00      	nop
		}

	}

	return GYROY_R;
 800512e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005132:	f7fb fd71 	bl	8000c18 <__aeabi_d2f>
 8005136:	4603      	mov	r3, r0
 8005138:	ee07 3a90 	vmov	s15, r3

}
 800513c:	eeb0 0a67 	vmov.f32	s0, s15
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40508000 	.word	0x40508000
 800514c:	40408000 	.word	0x40408000
 8005150:	40300000 	.word	0x40300000
 8005154:	00000000 	.word	0x00000000
 8005158:	40606000 	.word	0x40606000
 800515c:	00000000 	.word	0x00000000

08005160 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8005168:	2300      	movs	r3, #0
 800516a:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 800516c:	2300      	movs	r3, #0
 800516e:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8005180:	2147      	movs	r1, #71	; 0x47
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff fe67 	bl	8004e56 <readData>
 8005188:	4603      	mov	r3, r0
 800518a:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 800518c:	2148      	movs	r1, #72	; 0x48
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7ff fe61 	bl	8004e56 <readData>
 8005194:	4603      	mov	r3, r0
 8005196:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8005198:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	b21a      	sxth	r2, r3
 80051a0:	89bb      	ldrh	r3, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	785b      	ldrb	r3, [r3, #1]
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d846      	bhi.n	800523c <readGyro_Z+0xdc>
 80051ae:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <readGyro_Z+0x54>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	080051c5 	.word	0x080051c5
 80051b8:	080051e3 	.word	0x080051e3
 80051bc:	08005201 	.word	0x08005201
 80051c0:	0800521f 	.word	0x0800521f
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 80051c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fb f9c3 	bl	8000554 <__aeabi_i2d>
 80051ce:	a325      	add	r3, pc, #148	; (adr r3, 8005264 <readGyro_Z+0x104>)
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	f7fb fb52 	bl	800087c <__aeabi_ddiv>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80051e0:	e02d      	b.n	800523e <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 80051e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fb f9b4 	bl	8000554 <__aeabi_i2d>
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	4b19      	ldr	r3, [pc, #100]	; (8005258 <readGyro_Z+0xf8>)
 80051f2:	f7fb fb43 	bl	800087c <__aeabi_ddiv>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80051fe:	e01e      	b.n	800523e <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 8005200:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005204:	4618      	mov	r0, r3
 8005206:	f7fb f9a5 	bl	8000554 <__aeabi_i2d>
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	4b13      	ldr	r3, [pc, #76]	; (800525c <readGyro_Z+0xfc>)
 8005210:	f7fb fb34 	bl	800087c <__aeabi_ddiv>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800521c:	e00f      	b.n	800523e <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 800521e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005222:	4618      	mov	r0, r3
 8005224:	f7fb f996 	bl	8000554 <__aeabi_i2d>
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <readGyro_Z+0x100>)
 800522e:	f7fb fb25 	bl	800087c <__aeabi_ddiv>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800523a:	e000      	b.n	800523e <readGyro_Z+0xde>
		}default:{
			break;
 800523c:	bf00      	nop
		}

	}

	return GYROZ_R;
 800523e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005242:	f7fb fce9 	bl	8000c18 <__aeabi_d2f>
 8005246:	4603      	mov	r3, r0
 8005248:	ee07 3a90 	vmov	s15, r3

}
 800524c:	eeb0 0a67 	vmov.f32	s0, s15
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40508000 	.word	0x40508000
 800525c:	40408000 	.word	0x40408000
 8005260:	40300000 	.word	0x40300000
 8005264:	00000000 	.word	0x00000000
 8005268:	40606000 	.word	0x40606000
 800526c:	00000000 	.word	0x00000000

08005270 <calculation_parameter_distance>:

}

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8005270:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005274:	b08a      	sub	sp, #40	; 0x28
 8005276:	af00      	add	r7, sp, #0
 8005278:	6178      	str	r0, [r7, #20]
	// Obteniendo en el desarrollo como resultado:
	// -((pos final y - pos inicial y) * pos actual global x - (pos final x - pos inicial x) * pos actual global y)/ magnitud del director



	double director_x = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005286:	f7fb f817 	bl	80002b8 <__aeabi_dsub>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double director_y = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800529e:	f7fb f80b 	bl	80002b8 <__aeabi_dsub>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->magnitude_director = sqrt(pow(director_x,2)+pow(director_y,2));
 80052aa:	ed9f 1b43 	vldr	d1, [pc, #268]	; 80053b8 <calculation_parameter_distance+0x148>
 80052ae:	ed97 0b08 	vldr	d0, [r7, #32]
 80052b2:	f005 fd83 	bl	800adbc <pow>
 80052b6:	ec59 8b10 	vmov	r8, r9, d0
 80052ba:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 80053b8 <calculation_parameter_distance+0x148>
 80052be:	ed97 0b06 	vldr	d0, [r7, #24]
 80052c2:	f005 fd7b 	bl	800adbc <pow>
 80052c6:	ec53 2b10 	vmov	r2, r3, d0
 80052ca:	4640      	mov	r0, r8
 80052cc:	4649      	mov	r1, r9
 80052ce:	f7fa fff5 	bl	80002bc <__adddf3>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	ec43 2b17 	vmov	d7, r2, r3
 80052da:	eeb0 0a47 	vmov.f32	s0, s14
 80052de:	eef0 0a67 	vmov.f32	s1, s15
 80052e2:	f005 fddb 	bl	800ae9c <sqrt>
 80052e6:	eeb0 7a40 	vmov.f32	s14, s0
 80052ea:	eef0 7a60 	vmov.f32	s15, s1
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->proy_Parte_1 = director_x;
 80052f4:	6979      	ldr	r1, [r7, #20]
 80052f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->proy_Parte_2 = director_y;
 80052fe:	6979      	ldr	r1, [r7, #20]
 8005300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005304:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->proy_Parte_1_2 = -1 * director_x * ptrParameterPath->start_position_x - director_y * ptrParameterPath->start_position_y;
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	60bb      	str	r3, [r7, #8]
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800531a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800531e:	f7fb f983 	bl	8000628 <__aeabi_dmul>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4690      	mov	r8, r2
 8005328:	4699      	mov	r9, r3
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005334:	f7fb f978 	bl	8000628 <__aeabi_dmul>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4640      	mov	r0, r8
 800533e:	4649      	mov	r1, r9
 8005340:	f7fa ffba 	bl	80002b8 <__aeabi_dsub>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	6979      	ldr	r1, [r7, #20]
 800534a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->dis_point_Parte_1 = director_y;
 800534e:	6979      	ldr	r1, [r7, #20]
 8005350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005354:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->dis_point_Parte_2 = -1 * director_x;
 8005358:	6a3c      	ldr	r4, [r7, #32]
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	603b      	str	r3, [r7, #0]
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005378:	e9d7 0100 	ldrd	r0, r1, [r7]
 800537c:	f7fb f954 	bl	8000628 <__aeabi_dmul>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4614      	mov	r4, r2
 8005386:	461d      	mov	r5, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800538e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005392:	f7fb f949 	bl	8000628 <__aeabi_dmul>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4620      	mov	r0, r4
 800539c:	4629      	mov	r1, r5
 800539e:	f7fa ff8d 	bl	80002bc <__adddf3>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	6979      	ldr	r1, [r7, #20]
 80053a8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 80053ac:	bf00      	nop
 80053ae:	3728      	adds	r7, #40	; 0x28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80053b6:	bf00      	nop
 80053b8:	00000000 	.word	0x00000000
 80053bc:	40000000 	.word	0x40000000

080053c0 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 80053c0:	b5b0      	push	{r4, r5, r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6178      	str	r0, [r7, #20]
 80053c8:	ed87 0b02 	vstr	d0, [r7, #8]
 80053cc:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80053d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053da:	f7fb f925 	bl	8000628 <__aeabi_dmul>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4614      	mov	r4, r2
 80053e4:	461d      	mov	r5, r3
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80053ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053f0:	f7fb f91a 	bl	8000628 <__aeabi_dmul>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4620      	mov	r0, r4
 80053fa:	4629      	mov	r1, r5
 80053fc:	f7fa ff5e 	bl	80002bc <__adddf3>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4610      	mov	r0, r2
 8005406:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / ptrParameterPath->magnitude_director);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800540e:	f7fa ff55 	bl	80002bc <__adddf3>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4610      	mov	r0, r2
 8005418:	4619      	mov	r1, r3
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005420:	f7fb fa2c 	bl	800087c <__aeabi_ddiv>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8005428:	4611      	mov	r1, r2
 800542a:	61b9      	str	r1, [r7, #24]
 800542c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005430:	61fb      	str	r3, [r7, #28]

	return distance;
 8005432:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005436:	ec43 2b17 	vmov	d7, r2, r3
}
 800543a:	eeb0 0a47 	vmov.f32	s0, s14
 800543e:	eef0 0a67 	vmov.f32	s1, s15
 8005442:	3720      	adds	r7, #32
 8005444:	46bd      	mov	sp, r7
 8005446:	bdb0      	pop	{r4, r5, r7, pc}

08005448 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8005448:	b5b0      	push	{r4, r5, r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af00      	add	r7, sp, #0
 800544e:	6178      	str	r0, [r7, #20]
 8005450:	ed87 0b02 	vstr	d0, [r7, #8]
 8005454:	ed87 1b00 	vstr	d1, [r7]
	//Calculo de la distancia viajada relativo a la linea recta
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800545e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005462:	f7fb f8e1 	bl	8000628 <__aeabi_dmul>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4614      	mov	r4, r2
 800546c:	461d      	mov	r5, r3
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005478:	f7fb f8d6 	bl	8000628 <__aeabi_dmul>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4620      	mov	r0, r4
 8005482:	4629      	mov	r1, r5
 8005484:	f7fa ff1a 	bl	80002bc <__adddf3>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4610      	mov	r0, r2
 800548e:	4619      	mov	r1, r3
			+ ptrParameterPath->proy_Parte_1_2) / ptrParameterPath->magnitude_director;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005496:	f7fa ff11 	bl	80002bc <__adddf3>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4610      	mov	r0, r2
 80054a0:	4619      	mov	r1, r3
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 80054a8:	f7fb f9e8 	bl	800087c <__aeabi_ddiv>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 80054b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054b8:	ec43 2b17 	vmov	d7, r2, r3
}
 80054bc:	eeb0 0a47 	vmov.f32	s0, s14
 80054c0:	eef0 0a67 	vmov.f32	s1, s15
 80054c4:	3720      	adds	r7, #32
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080054cc <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a6c      	ldr	r2, [pc, #432]	; (800568c <pwm_Config+0x1c0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d106      	bne.n	80054ec <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80054de:	4b6c      	ldr	r3, [pc, #432]	; (8005690 <pwm_Config+0x1c4>)
 80054e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e2:	4a6b      	ldr	r2, [pc, #428]	; (8005690 <pwm_Config+0x1c4>)
 80054e4:	f043 0301 	orr.w	r3, r3, #1
 80054e8:	6453      	str	r3, [r2, #68]	; 0x44
 80054ea:	e030      	b.n	800554e <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f4:	d106      	bne.n	8005504 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80054f6:	4b66      	ldr	r3, [pc, #408]	; (8005690 <pwm_Config+0x1c4>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	4a65      	ldr	r2, [pc, #404]	; (8005690 <pwm_Config+0x1c4>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	6413      	str	r3, [r2, #64]	; 0x40
 8005502:	e024      	b.n	800554e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a62      	ldr	r2, [pc, #392]	; (8005694 <pwm_Config+0x1c8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d106      	bne.n	800551c <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800550e:	4b60      	ldr	r3, [pc, #384]	; (8005690 <pwm_Config+0x1c4>)
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	4a5f      	ldr	r2, [pc, #380]	; (8005690 <pwm_Config+0x1c4>)
 8005514:	f043 0302 	orr.w	r3, r3, #2
 8005518:	6413      	str	r3, [r2, #64]	; 0x40
 800551a:	e018      	b.n	800554e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a5d      	ldr	r2, [pc, #372]	; (8005698 <pwm_Config+0x1cc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d106      	bne.n	8005534 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8005526:	4b5a      	ldr	r3, [pc, #360]	; (8005690 <pwm_Config+0x1c4>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	4a59      	ldr	r2, [pc, #356]	; (8005690 <pwm_Config+0x1c4>)
 800552c:	f043 0304 	orr.w	r3, r3, #4
 8005530:	6413      	str	r3, [r2, #64]	; 0x40
 8005532:	e00c      	b.n	800554e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a58      	ldr	r2, [pc, #352]	; (800569c <pwm_Config+0x1d0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d106      	bne.n	800554c <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800553e:	4b54      	ldr	r3, [pc, #336]	; (8005690 <pwm_Config+0x1c4>)
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	4a53      	ldr	r2, [pc, #332]	; (8005690 <pwm_Config+0x1c4>)
 8005544:	f043 0308 	orr.w	r3, r3, #8
 8005548:	6413      	str	r3, [r2, #64]	; 0x40
 800554a:	e000      	b.n	800554e <pwm_Config+0x82>
	}
	else{
		__NOP();
 800554c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800555c:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	7d5b      	ldrb	r3, [r3, #21]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f930 	bl	80057cc <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fa3f 	bl	80059f0 <setDuttyCycle>
 8005572:	e005      	b.n	8005580 <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f929 	bl	80057cc <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fb10 	bl	8005ba0 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0210 	bic.w	r2, r2, #16
 800558e:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2200      	movs	r2, #0
 8005596:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	791b      	ldrb	r3, [r3, #4]
 800559c:	2b03      	cmp	r3, #3
 800559e:	d86f      	bhi.n	8005680 <pwm_Config+0x1b4>
 80055a0:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <pwm_Config+0xdc>)
 80055a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a6:	bf00      	nop
 80055a8:	080055b9 	.word	0x080055b9
 80055ac:	080055eb 	.word	0x080055eb
 80055b0:	0800561d 	.word	0x0800561d
 80055b4:	0800564f 	.word	0x0800564f
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0203 	bic.w	r2, r2, #3
 80055c6:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80055d6:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0208 	orr.w	r2, r2, #8
 80055e6:	619a      	str	r2, [r3, #24]


		break;
 80055e8:	e04b      	b.n	8005682 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	699a      	ldr	r2, [r3, #24]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80055f8:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	699a      	ldr	r2, [r3, #24]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8005608:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	699a      	ldr	r2, [r3, #24]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005618:	619a      	str	r2, [r3, #24]

		break;
 800561a:	e032      	b.n	8005682 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69da      	ldr	r2, [r3, #28]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0203 	bic.w	r2, r2, #3
 800562a:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69da      	ldr	r2, [r3, #28]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800563a:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69da      	ldr	r2, [r3, #28]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0208 	orr.w	r2, r2, #8
 800564a:	61da      	str	r2, [r3, #28]

		break;
 800564c:	e019      	b.n	8005682 <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800565c:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800566c:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800567c:	61da      	str	r2, [r3, #28]

		break;
 800567e:	e000      	b.n	8005682 <pwm_Config+0x1b6>
	}

	default:{
		break;
 8005680:	bf00      	nop
	}// fin del switch-case




}
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	40010000 	.word	0x40010000
 8005690:	40023800 	.word	0x40023800
 8005694:	40000400 	.word	0x40000400
 8005698:	40000800 	.word	0x40000800
 800569c:	40000c00 	.word	0x40000c00

080056a0 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]

}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a3d      	ldr	r2, [pc, #244]	; (80057c8 <enableOutput+0x104>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d13a      	bne.n	800574c <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056e4:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	791b      	ldrb	r3, [r3, #4]
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d862      	bhi.n	80057b4 <enableOutput+0xf0>
 80056ee:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <enableOutput+0x30>)
 80056f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f4:	08005705 	.word	0x08005705
 80056f8:	08005717 	.word	0x08005717
 80056fc:	08005729 	.word	0x08005729
 8005700:	0800573b 	.word	0x0800573b
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6a1a      	ldr	r2, [r3, #32]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	621a      	str	r2, [r3, #32]

				break;
 8005714:	e051      	b.n	80057ba <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6a1a      	ldr	r2, [r3, #32]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0210 	orr.w	r2, r2, #16
 8005724:	621a      	str	r2, [r3, #32]

				break;
 8005726:	e048      	b.n	80057ba <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6a1a      	ldr	r2, [r3, #32]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005736:	621a      	str	r2, [r3, #32]

				break;
 8005738:	e03f      	b.n	80057ba <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6a1a      	ldr	r2, [r3, #32]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005748:	621a      	str	r2, [r3, #32]

				break;
 800574a:	e036      	b.n	80057ba <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	791b      	ldrb	r3, [r3, #4]
 8005750:	2b03      	cmp	r3, #3
 8005752:	d831      	bhi.n	80057b8 <enableOutput+0xf4>
 8005754:	a201      	add	r2, pc, #4	; (adr r2, 800575c <enableOutput+0x98>)
 8005756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575a:	bf00      	nop
 800575c:	0800576d 	.word	0x0800576d
 8005760:	0800577f 	.word	0x0800577f
 8005764:	08005791 	.word	0x08005791
 8005768:	080057a3 	.word	0x080057a3
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6a1a      	ldr	r2, [r3, #32]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	621a      	str	r2, [r3, #32]

				break;
 800577c:	e01d      	b.n	80057ba <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6a1a      	ldr	r2, [r3, #32]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0210 	orr.w	r2, r2, #16
 800578c:	621a      	str	r2, [r3, #32]

				break;
 800578e:	e014      	b.n	80057ba <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6a1a      	ldr	r2, [r3, #32]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800579e:	621a      	str	r2, [r3, #32]

				break;
 80057a0:	e00b      	b.n	80057ba <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6a1a      	ldr	r2, [r3, #32]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057b0:	621a      	str	r2, [r3, #32]

				break;
 80057b2:	e002      	b.n	80057ba <enableOutput+0xf6>
				break;
 80057b4:	bf00      	nop
 80057b6:	e000      	b.n	80057ba <enableOutput+0xf6>
			}

			default: {
				break;
 80057b8:	bf00      	nop
			}

		}
	}
	return SET;
 80057ba:	2301      	movs	r3, #1
}
 80057bc:	4618      	mov	r0, r3
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	40010000 	.word	0x40010000

080057cc <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6892      	ldr	r2, [r2, #8]
 80057e0:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b10      	cmp	r3, #16
 80057ec:	d01a      	beq.n	8005824 <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b14      	cmp	r3, #20
 80057f2:	d017      	beq.n	8005824 <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b1e      	cmp	r3, #30
 80057f8:	d014      	beq.n	8005824 <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b28      	cmp	r3, #40	; 0x28
 80057fe:	d011      	beq.n	8005824 <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b32      	cmp	r3, #50	; 0x32
 8005804:	d00e      	beq.n	8005824 <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b3c      	cmp	r3, #60	; 0x3c
 800580a:	d00b      	beq.n	8005824 <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b46      	cmp	r3, #70	; 0x46
 8005810:	d008      	beq.n	8005824 <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b50      	cmp	r3, #80	; 0x50
 8005816:	d005      	beq.n	8005824 <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b5a      	cmp	r3, #90	; 0x5a
 800581c:	d002      	beq.n	8005824 <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b64      	cmp	r3, #100	; 0x64
 8005822:	d111      	bne.n	8005848 <setFrequency+0x7c>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	899b      	ldrh	r3, [r3, #12]
 8005828:	461a      	mov	r2, r3
 800582a:	0152      	lsls	r2, r2, #5
 800582c:	1ad2      	subs	r2, r2, r3
 800582e:	0092      	lsls	r2, r2, #2
 8005830:	4413      	add	r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	b29a      	uxth	r2, r3
 8005836:	4b68      	ldr	r3, [pc, #416]	; (80059d8 <setFrequency+0x20c>)
 8005838:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800583a:	4b67      	ldr	r3, [pc, #412]	; (80059d8 <setFrequency+0x20c>)
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	1e5a      	subs	r2, r3, #1
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	62da      	str	r2, [r3, #44]	; 0x2c
 8005846:	e0c0      	b.n	80059ca <setFrequency+0x1fe>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2ba0      	cmp	r3, #160	; 0xa0
 800584c:	d022      	beq.n	8005894 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_20MHz_10us)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2bc8      	cmp	r3, #200	; 0xc8
 8005852:	d01f      	beq.n	8005894 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_30MHz_10us)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800585a:	d01b      	beq.n	8005894 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_40MHz_10us)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005862:	d017      	beq.n	8005894 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_50MHz_10us)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800586a:	d013      	beq.n	8005894 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_60MHz_10us)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005872:	d00f      	beq.n	8005894 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_70MHz_10us)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800587a:	d00b      	beq.n	8005894 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_80MHz_10us)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005882:	d007      	beq.n	8005894 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_90MHz_10us)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800588a:	d003      	beq.n	8005894 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005892:	d114      	bne.n	80058be <setFrequency+0xf2>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	899b      	ldrh	r3, [r3, #12]
 8005898:	461a      	mov	r2, r3
 800589a:	0092      	lsls	r2, r2, #2
 800589c:	4413      	add	r3, r2
 800589e:	461a      	mov	r2, r3
 80058a0:	0091      	lsls	r1, r2, #2
 80058a2:	461a      	mov	r2, r3
 80058a4:	460b      	mov	r3, r1
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	4b4a      	ldr	r3, [pc, #296]	; (80059d8 <setFrequency+0x20c>)
 80058ae:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80058b0:	4b49      	ldr	r3, [pc, #292]	; (80059d8 <setFrequency+0x20c>)
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	1e5a      	subs	r2, r3, #1
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80058bc:	e085      	b.n	80059ca <setFrequency+0x1fe>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80058c4:	d029      	beq.n	800591a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_20MHz_100us)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80058cc:	d025      	beq.n	800591a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_30MHz_100us)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d020      	beq.n	800591a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_40MHz_100us)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80058de:	d01c      	beq.n	800591a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_50MHz_100us)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d017      	beq.n	800591a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_60MHz_100us)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f241 7270 	movw	r2, #6000	; 0x1770
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d012      	beq.n	800591a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_70MHz_100us)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f641 3258 	movw	r2, #7000	; 0x1b58
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00d      	beq.n	800591a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_80MHz_100us)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005904:	d009      	beq.n	800591a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_90MHz_100us)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f242 3228 	movw	r2, #9000	; 0x2328
 800590c:	4293      	cmp	r3, r2
 800590e:	d004      	beq.n	800591a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_100MHz_100us)){
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f242 7210 	movw	r2, #10000	; 0x2710
 8005916:	4293      	cmp	r3, r2
 8005918:	d10f      	bne.n	800593a <setFrequency+0x16e>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	899b      	ldrh	r3, [r3, #12]
 800591e:	461a      	mov	r2, r3
 8005920:	0092      	lsls	r2, r2, #2
 8005922:	4413      	add	r3, r2
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	4b2b      	ldr	r3, [pc, #172]	; (80059d8 <setFrequency+0x20c>)
 800592a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800592c:	4b2a      	ldr	r3, [pc, #168]	; (80059d8 <setFrequency+0x20c>)
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	1e5a      	subs	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	62da      	str	r2, [r3, #44]	; 0x2c
 8005938:	e047      	b.n	80059ca <setFrequency+0x1fe>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005940:	d028      	beq.n	8005994 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_20MHz_1ms)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f644 6220 	movw	r2, #20000	; 0x4e20
 8005948:	4293      	cmp	r3, r2
 800594a:	d023      	beq.n	8005994 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_30MHz_1ms)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f247 5230 	movw	r2, #30000	; 0x7530
 8005952:	4293      	cmp	r3, r2
 8005954:	d01e      	beq.n	8005994 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_40MHz_1ms)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f649 4240 	movw	r2, #40000	; 0x9c40
 800595c:	4293      	cmp	r3, r2
 800595e:	d019      	beq.n	8005994 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_50MHz_1ms)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005966:	4293      	cmp	r3, r2
 8005968:	d014      	beq.n	8005994 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_60MHz_1ms)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005970:	4293      	cmp	r3, r2
 8005972:	d00f      	beq.n	8005994 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_70MHz_1ms)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a19      	ldr	r2, [pc, #100]	; (80059dc <setFrequency+0x210>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00b      	beq.n	8005994 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_80MHz_1ms)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <setFrequency+0x214>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d007      	beq.n	8005994 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_90MHz_1ms)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <setFrequency+0x218>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4a16      	ldr	r2, [pc, #88]	; (80059e8 <setFrequency+0x21c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d10a      	bne.n	80059aa <setFrequency+0x1de>

		periodo = ptrPwmHandler->config.periodo;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	899a      	ldrh	r2, [r3, #12]
 8005998:	4b0f      	ldr	r3, [pc, #60]	; (80059d8 <setFrequency+0x20c>)
 800599a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800599c:	4b0e      	ldr	r3, [pc, #56]	; (80059d8 <setFrequency+0x20c>)
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	1e5a      	subs	r2, r3, #1
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80059a8:	e00f      	b.n	80059ca <setFrequency+0x1fe>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	899b      	ldrh	r3, [r3, #12]
 80059ae:	4a0f      	ldr	r2, [pc, #60]	; (80059ec <setFrequency+0x220>)
 80059b0:	fba2 2303 	umull	r2, r3, r2, r3
 80059b4:	091b      	lsrs	r3, r3, #4
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	4b07      	ldr	r3, [pc, #28]	; (80059d8 <setFrequency+0x20c>)
 80059ba:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80059bc:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <setFrequency+0x20c>)
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	1e5a      	subs	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 80059c8:	bf00      	nop
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	2000061c 	.word	0x2000061c
 80059dc:	00011170 	.word	0x00011170
 80059e0:	00013880 	.word	0x00013880
 80059e4:	00015f90 	.word	0x00015f90
 80059e8:	000186a0 	.word	0x000186a0
 80059ec:	cccccccd 	.word	0xcccccccd

080059f0 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 80059f0:	b590      	push	{r4, r7, lr}
 80059f2:	b08b      	sub	sp, #44	; 0x2c
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	791b      	ldrb	r3, [r3, #4]
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	f200 80c3 	bhi.w	8005b88 <setDuttyCycle+0x198>
 8005a02:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <setDuttyCycle+0x18>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a19 	.word	0x08005a19
 8005a0c:	08005a75 	.word	0x08005a75
 8005a10:	08005ad1 	.word	0x08005ad1
 8005a14:	08005b2d 	.word	0x08005b2d
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	ed93 7a04 	vldr	s14, [r3, #16]
 8005a1e:	4b5d      	ldr	r3, [pc, #372]	; (8005b94 <setDuttyCycle+0x1a4>)
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2e:	ee17 0a90 	vmov	r0, s15
 8005a32:	f7fa fda1 	bl	8000578 <__aeabi_f2d>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	4b55      	ldr	r3, [pc, #340]	; (8005b98 <setDuttyCycle+0x1a8>)
 8005a44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a48:	f7fa ff18 	bl	800087c <__aeabi_ddiv>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4610      	mov	r0, r2
 8005a52:	4619      	mov	r1, r3
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	4b50      	ldr	r3, [pc, #320]	; (8005b9c <setDuttyCycle+0x1ac>)
 8005a5a:	f7fa fc2d 	bl	80002b8 <__aeabi_dsub>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	4610      	mov	r0, r2
 8005a64:	4619      	mov	r1, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681c      	ldr	r4, [r3, #0]
 8005a6a:	f7fb f8b5 	bl	8000bd8 <__aeabi_d2uiz>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8005a72:	e08a      	b.n	8005b8a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	ed93 7a04 	vldr	s14, [r3, #16]
 8005a7a:	4b46      	ldr	r3, [pc, #280]	; (8005b94 <setDuttyCycle+0x1a4>)
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a8a:	ee17 0a90 	vmov	r0, s15
 8005a8e:	f7fa fd73 	bl	8000578 <__aeabi_f2d>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	4b3e      	ldr	r3, [pc, #248]	; (8005b98 <setDuttyCycle+0x1a8>)
 8005aa0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005aa4:	f7fa feea 	bl	800087c <__aeabi_ddiv>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4610      	mov	r0, r2
 8005aae:	4619      	mov	r1, r3
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	4b39      	ldr	r3, [pc, #228]	; (8005b9c <setDuttyCycle+0x1ac>)
 8005ab6:	f7fa fbff 	bl	80002b8 <__aeabi_dsub>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681c      	ldr	r4, [r3, #0]
 8005ac6:	f7fb f887 	bl	8000bd8 <__aeabi_d2uiz>
 8005aca:	4603      	mov	r3, r0
 8005acc:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8005ace:	e05c      	b.n	8005b8a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	ed93 7a04 	vldr	s14, [r3, #16]
 8005ad6:	4b2f      	ldr	r3, [pc, #188]	; (8005b94 <setDuttyCycle+0x1a4>)
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	ee07 3a90 	vmov	s15, r3
 8005ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae6:	ee17 0a90 	vmov	r0, s15
 8005aea:	f7fa fd45 	bl	8000578 <__aeabi_f2d>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	4b27      	ldr	r3, [pc, #156]	; (8005b98 <setDuttyCycle+0x1a8>)
 8005afc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005b00:	f7fa febc 	bl	800087c <__aeabi_ddiv>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	4b22      	ldr	r3, [pc, #136]	; (8005b9c <setDuttyCycle+0x1ac>)
 8005b12:	f7fa fbd1 	bl	80002b8 <__aeabi_dsub>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681c      	ldr	r4, [r3, #0]
 8005b22:	f7fb f859 	bl	8000bd8 <__aeabi_d2uiz>
 8005b26:	4603      	mov	r3, r0
 8005b28:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8005b2a:	e02e      	b.n	8005b8a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005b32:	4b18      	ldr	r3, [pc, #96]	; (8005b94 <setDuttyCycle+0x1a4>)
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	ee07 3a90 	vmov	s15, r3
 8005b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b42:	ee17 0a90 	vmov	r0, s15
 8005b46:	f7fa fd17 	bl	8000578 <__aeabi_f2d>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	4b10      	ldr	r3, [pc, #64]	; (8005b98 <setDuttyCycle+0x1a8>)
 8005b58:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005b5c:	f7fa fe8e 	bl	800087c <__aeabi_ddiv>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4610      	mov	r0, r2
 8005b66:	4619      	mov	r1, r3
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <setDuttyCycle+0x1ac>)
 8005b6e:	f7fa fba3 	bl	80002b8 <__aeabi_dsub>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4610      	mov	r0, r2
 8005b78:	4619      	mov	r1, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681c      	ldr	r4, [r3, #0]
 8005b7e:	f7fb f82b 	bl	8000bd8 <__aeabi_d2uiz>
 8005b82:	4603      	mov	r3, r0
 8005b84:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8005b86:	e000      	b.n	8005b8a <setDuttyCycle+0x19a>
	}

	default:{
		break;
 8005b88:	bf00      	nop
	}

	}// fin del switch-case

}
 8005b8a:	bf00      	nop
 8005b8c:	372c      	adds	r7, #44	; 0x2c
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd90      	pop	{r4, r7, pc}
 8005b92:	bf00      	nop
 8005b94:	2000061c 	.word	0x2000061c
 8005b98:	40590000 	.word	0x40590000
 8005b9c:	3ff00000 	.word	0x3ff00000

08005ba0 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8005ba0:	b590      	push	{r4, r7, lr}
 8005ba2:	b08b      	sub	sp, #44	; 0x2c
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	791b      	ldrb	r3, [r3, #4]
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	f200 80d3 	bhi.w	8005d58 <setDuttyCycleAfOpt+0x1b8>
 8005bb2:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <setDuttyCycleAfOpt+0x18>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005bc9 	.word	0x08005bc9
 8005bbc:	08005c2d 	.word	0x08005c2d
 8005bc0:	08005c91 	.word	0x08005c91
 8005bc4:	08005cf5 	.word	0x08005cf5
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	edd3 7a04 	vldr	s15, [r3, #16]
 8005bce:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8005d64 <setDuttyCycleAfOpt+0x1c4>
 8005bd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bd6:	4b64      	ldr	r3, [pc, #400]	; (8005d68 <setDuttyCycleAfOpt+0x1c8>)
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be6:	ee17 0a90 	vmov	r0, s15
 8005bea:	f7fa fcc5 	bl	8000578 <__aeabi_f2d>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	4b5c      	ldr	r3, [pc, #368]	; (8005d6c <setDuttyCycleAfOpt+0x1cc>)
 8005bfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c00:	f7fa fe3c 	bl	800087c <__aeabi_ddiv>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	4b57      	ldr	r3, [pc, #348]	; (8005d70 <setDuttyCycleAfOpt+0x1d0>)
 8005c12:	f7fa fb51 	bl	80002b8 <__aeabi_dsub>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681c      	ldr	r4, [r3, #0]
 8005c22:	f7fa ffd9 	bl	8000bd8 <__aeabi_d2uiz>
 8005c26:	4603      	mov	r3, r0
 8005c28:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8005c2a:	e096      	b.n	8005d5a <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c32:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005d64 <setDuttyCycleAfOpt+0x1c4>
 8005c36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c3a:	4b4b      	ldr	r3, [pc, #300]	; (8005d68 <setDuttyCycleAfOpt+0x1c8>)
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4a:	ee17 0a90 	vmov	r0, s15
 8005c4e:	f7fa fc93 	bl	8000578 <__aeabi_f2d>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	4b43      	ldr	r3, [pc, #268]	; (8005d6c <setDuttyCycleAfOpt+0x1cc>)
 8005c60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005c64:	f7fa fe0a 	bl	800087c <__aeabi_ddiv>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	4619      	mov	r1, r3
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	4b3e      	ldr	r3, [pc, #248]	; (8005d70 <setDuttyCycleAfOpt+0x1d0>)
 8005c76:	f7fa fb1f 	bl	80002b8 <__aeabi_dsub>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4610      	mov	r0, r2
 8005c80:	4619      	mov	r1, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681c      	ldr	r4, [r3, #0]
 8005c86:	f7fa ffa7 	bl	8000bd8 <__aeabi_d2uiz>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8005c8e:	e064      	b.n	8005d5a <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c96:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8005d64 <setDuttyCycleAfOpt+0x1c4>
 8005c9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c9e:	4b32      	ldr	r3, [pc, #200]	; (8005d68 <setDuttyCycleAfOpt+0x1c8>)
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cae:	ee17 0a90 	vmov	r0, s15
 8005cb2:	f7fa fc61 	bl	8000578 <__aeabi_f2d>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	4b2a      	ldr	r3, [pc, #168]	; (8005d6c <setDuttyCycleAfOpt+0x1cc>)
 8005cc4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005cc8:	f7fa fdd8 	bl	800087c <__aeabi_ddiv>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	4b25      	ldr	r3, [pc, #148]	; (8005d70 <setDuttyCycleAfOpt+0x1d0>)
 8005cda:	f7fa faed 	bl	80002b8 <__aeabi_dsub>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681c      	ldr	r4, [r3, #0]
 8005cea:	f7fa ff75 	bl	8000bd8 <__aeabi_d2uiz>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8005cf2:	e032      	b.n	8005d5a <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	edd3 7a04 	vldr	s15, [r3, #16]
 8005cfa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005d64 <setDuttyCycleAfOpt+0x1c4>
 8005cfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d02:	4b19      	ldr	r3, [pc, #100]	; (8005d68 <setDuttyCycleAfOpt+0x1c8>)
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d12:	ee17 0a90 	vmov	r0, s15
 8005d16:	f7fa fc2f 	bl	8000578 <__aeabi_f2d>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <setDuttyCycleAfOpt+0x1cc>)
 8005d28:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005d2c:	f7fa fda6 	bl	800087c <__aeabi_ddiv>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4610      	mov	r0, r2
 8005d36:	4619      	mov	r1, r3
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <setDuttyCycleAfOpt+0x1d0>)
 8005d3e:	f7fa fabb 	bl	80002b8 <__aeabi_dsub>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4610      	mov	r0, r2
 8005d48:	4619      	mov	r1, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681c      	ldr	r4, [r3, #0]
 8005d4e:	f7fa ff43 	bl	8000bd8 <__aeabi_d2uiz>
 8005d52:	4603      	mov	r3, r0
 8005d54:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8005d56:	e000      	b.n	8005d5a <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 8005d58:	bf00      	nop
	}

	}// fin del switch-case


}
 8005d5a:	bf00      	nop
 8005d5c:	372c      	adds	r7, #44	; 0x2c
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd90      	pop	{r4, r7, pc}
 8005d62:	bf00      	nop
 8005d64:	42c80000 	.word	0x42c80000
 8005d68:	2000061c 	.word	0x2000061c
 8005d6c:	40590000 	.word	0x40590000
 8005d70:	3ff00000 	.word	0x3ff00000

08005d74 <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	791b      	ldrb	r3, [r3, #4]
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d82f      	bhi.n	8005de4 <disableOutput+0x70>
 8005d84:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <disableOutput+0x18>)
 8005d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8a:	bf00      	nop
 8005d8c:	08005d9d 	.word	0x08005d9d
 8005d90:	08005daf 	.word	0x08005daf
 8005d94:	08005dc1 	.word	0x08005dc1
 8005d98:	08005dd3 	.word	0x08005dd3
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6a1a      	ldr	r2, [r3, #32]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0201 	bic.w	r2, r2, #1
 8005daa:	621a      	str	r2, [r3, #32]

			break;
 8005dac:	e01b      	b.n	8005de6 <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6a1a      	ldr	r2, [r3, #32]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0210 	bic.w	r2, r2, #16
 8005dbc:	621a      	str	r2, [r3, #32]

			break;
 8005dbe:	e012      	b.n	8005de6 <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6a1a      	ldr	r2, [r3, #32]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dce:	621a      	str	r2, [r3, #32]

			break;
 8005dd0:	e009      	b.n	8005de6 <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6a1a      	ldr	r2, [r3, #32]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005de0:	621a      	str	r2, [r3, #32]

			break;
 8005de2:	e000      	b.n	8005de6 <disableOutput+0x72>
		}

		default: {
			break;
 8005de4:	bf00      	nop
		}
		}

	return RESET;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <PWMx_Toggle>:

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	791b      	ldrb	r3, [r3, #4]
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d82f      	bhi.n	8005e64 <PWMx_Toggle+0x70>
 8005e04:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <PWMx_Toggle+0x18>)
 8005e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0a:	bf00      	nop
 8005e0c:	08005e1d 	.word	0x08005e1d
 8005e10:	08005e2f 	.word	0x08005e2f
 8005e14:	08005e41 	.word	0x08005e41
 8005e18:	08005e53 	.word	0x08005e53
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6a1a      	ldr	r2, [r3, #32]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f082 0202 	eor.w	r2, r2, #2
 8005e2a:	621a      	str	r2, [r3, #32]

				break;
 8005e2c:	e01b      	b.n	8005e66 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6a1a      	ldr	r2, [r3, #32]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f082 0220 	eor.w	r2, r2, #32
 8005e3c:	621a      	str	r2, [r3, #32]

				break;
 8005e3e:	e012      	b.n	8005e66 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6a1a      	ldr	r2, [r3, #32]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8005e4e:	621a      	str	r2, [r3, #32]

				break;
 8005e50:	e009      	b.n	8005e66 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6a1a      	ldr	r2, [r3, #32]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8005e60:	621a      	str	r2, [r3, #32]

				break;
 8005e62:	e000      	b.n	8005e66 <PWMx_Toggle+0x72>
			}

			default: {
				break;
 8005e64:	bf00      	nop
			}
			}


}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop

08005e74 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 8005e7e:	4b92      	ldr	r3, [pc, #584]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a91      	ldr	r2, [pc, #580]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005e84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e88:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8005e8a:	4b8f      	ldr	r3, [pc, #572]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e90:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 8005e92:	4b8e      	ldr	r3, [pc, #568]	; (80060cc <RCC_enableMaxFrequencies+0x258>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a8d      	ldr	r2, [pc, #564]	; (80060cc <RCC_enableMaxFrequencies+0x258>)
 8005e98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e9c:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 8005e9e:	4b8a      	ldr	r3, [pc, #552]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	4a89      	ldr	r2, [pc, #548]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005ea4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005ea8:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 8005eaa:	79fb      	ldrb	r3, [r7, #7]
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	f200 82fc 	bhi.w	80064aa <RCC_enableMaxFrequencies+0x636>
 8005eb2:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <RCC_enableMaxFrequencies+0x44>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005edd 	.word	0x08005edd
 8005ebc:	08005f7f 	.word	0x08005f7f
 8005ec0:	08006021 	.word	0x08006021
 8005ec4:	080060d5 	.word	0x080060d5
 8005ec8:	08006177 	.word	0x08006177
 8005ecc:	08006219 	.word	0x08006219
 8005ed0:	080062c5 	.word	0x080062c5
 8005ed4:	08006367 	.word	0x08006367
 8005ed8:	08006409 	.word	0x08006409
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8005edc:	4b7a      	ldr	r3, [pc, #488]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	4a79      	ldr	r2, [pc, #484]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005ee2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ee6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8005ee8:	4b77      	ldr	r3, [pc, #476]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	4a76      	ldr	r2, [pc, #472]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005eee:	f043 0310 	orr.w	r3, r3, #16
 8005ef2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005ef4:	4b74      	ldr	r3, [pc, #464]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	4a73      	ldr	r2, [pc, #460]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005efa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f02:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8005f04:	4b70      	ldr	r3, [pc, #448]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	4a6f      	ldr	r2, [pc, #444]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f0a:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8005f0e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005f10:	4b6d      	ldr	r3, [pc, #436]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	4a6c      	ldr	r2, [pc, #432]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f16:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005f1a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8005f1c:	4b6a      	ldr	r3, [pc, #424]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	4a69      	ldr	r2, [pc, #420]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f26:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8005f28:	4b67      	ldr	r3, [pc, #412]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	4a66      	ldr	r2, [pc, #408]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f32:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005f34:	4b64      	ldr	r3, [pc, #400]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	4a63      	ldr	r2, [pc, #396]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f3e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8005f40:	4b61      	ldr	r3, [pc, #388]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	4a60      	ldr	r2, [pc, #384]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f4a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8005f4c:	4b5e      	ldr	r3, [pc, #376]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a5d      	ldr	r2, [pc, #372]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f56:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005f58:	e000      	b.n	8005f5c <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 8005f5a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005f5c:	4b5a      	ldr	r3, [pc, #360]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0f8      	beq.n	8005f5a <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005f68:	4b59      	ldr	r3, [pc, #356]	; (80060d0 <RCC_enableMaxFrequencies+0x25c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a58      	ldr	r2, [pc, #352]	; (80060d0 <RCC_enableMaxFrequencies+0x25c>)
 8005f6e:	f023 030f 	bic.w	r3, r3, #15
 8005f72:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8005f74:	4b56      	ldr	r3, [pc, #344]	; (80060d0 <RCC_enableMaxFrequencies+0x25c>)
 8005f76:	4a56      	ldr	r2, [pc, #344]	; (80060d0 <RCC_enableMaxFrequencies+0x25c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6013      	str	r3, [r2, #0]

			break;
 8005f7c:	e296      	b.n	80064ac <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8005f7e:	4b52      	ldr	r3, [pc, #328]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	4a51      	ldr	r2, [pc, #324]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f84:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f88:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8005f8a:	4b4f      	ldr	r3, [pc, #316]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	4a4e      	ldr	r2, [pc, #312]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f90:	f043 0310 	orr.w	r3, r3, #16
 8005f94:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005f96:	4b4c      	ldr	r3, [pc, #304]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	4a4b      	ldr	r2, [pc, #300]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005f9c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8005fa6:	4b48      	ldr	r3, [pc, #288]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	4a47      	ldr	r2, [pc, #284]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005fac:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8005fb0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005fb2:	4b45      	ldr	r3, [pc, #276]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	4a44      	ldr	r2, [pc, #272]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005fb8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005fbc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 8005fbe:	4b42      	ldr	r3, [pc, #264]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	4a41      	ldr	r2, [pc, #260]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc8:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8005fca:	4b3f      	ldr	r3, [pc, #252]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	4a3e      	ldr	r2, [pc, #248]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fd4:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005fd6:	4b3c      	ldr	r3, [pc, #240]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	4a3b      	ldr	r2, [pc, #236]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005fdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fe0:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8005fe2:	4b39      	ldr	r3, [pc, #228]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	4a38      	ldr	r2, [pc, #224]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005fe8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fec:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8005fee:	4b36      	ldr	r3, [pc, #216]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a35      	ldr	r2, [pc, #212]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8005ff4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ff8:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005ffa:	e000      	b.n	8005ffe <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 8005ffc:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005ffe:	4b32      	ldr	r3, [pc, #200]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d0f8      	beq.n	8005ffc <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800600a:	4b31      	ldr	r3, [pc, #196]	; (80060d0 <RCC_enableMaxFrequencies+0x25c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a30      	ldr	r2, [pc, #192]	; (80060d0 <RCC_enableMaxFrequencies+0x25c>)
 8006010:	f023 030f 	bic.w	r3, r3, #15
 8006014:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8006016:	4b2e      	ldr	r3, [pc, #184]	; (80060d0 <RCC_enableMaxFrequencies+0x25c>)
 8006018:	4a2d      	ldr	r2, [pc, #180]	; (80060d0 <RCC_enableMaxFrequencies+0x25c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6013      	str	r3, [r2, #0]

			break;
 800601e:	e245      	b.n	80064ac <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8006020:	4b29      	ldr	r3, [pc, #164]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	4a28      	ldr	r2, [pc, #160]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8006026:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800602a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800602c:	4b26      	ldr	r3, [pc, #152]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	4a25      	ldr	r2, [pc, #148]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8006032:	f043 0310 	orr.w	r3, r3, #16
 8006036:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8006038:	4b23      	ldr	r3, [pc, #140]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	4a22      	ldr	r2, [pc, #136]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 800603e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006046:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 8006048:	4b1f      	ldr	r3, [pc, #124]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4a1e      	ldr	r2, [pc, #120]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 800604e:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8006052:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8006054:	4b1c      	ldr	r3, [pc, #112]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	4a1b      	ldr	r2, [pc, #108]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 800605a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800605e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8006060:	4b19      	ldr	r3, [pc, #100]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8006066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800606a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800606c:	4b16      	ldr	r3, [pc, #88]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	4a15      	ldr	r2, [pc, #84]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8006072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006076:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8006078:	4b13      	ldr	r3, [pc, #76]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	4a12      	ldr	r2, [pc, #72]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 800607e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006082:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8006084:	4b10      	ldr	r3, [pc, #64]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	4a0f      	ldr	r2, [pc, #60]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 800608a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800608e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8006090:	4b0d      	ldr	r3, [pc, #52]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a0c      	ldr	r2, [pc, #48]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 8006096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800609a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800609c:	e000      	b.n	80060a0 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 800609e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80060a0:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <RCC_enableMaxFrequencies+0x254>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0f8      	beq.n	800609e <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80060ac:	4b08      	ldr	r3, [pc, #32]	; (80060d0 <RCC_enableMaxFrequencies+0x25c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a07      	ldr	r2, [pc, #28]	; (80060d0 <RCC_enableMaxFrequencies+0x25c>)
 80060b2:	f023 030f 	bic.w	r3, r3, #15
 80060b6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80060b8:	4b05      	ldr	r3, [pc, #20]	; (80060d0 <RCC_enableMaxFrequencies+0x25c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a04      	ldr	r2, [pc, #16]	; (80060d0 <RCC_enableMaxFrequencies+0x25c>)
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	6013      	str	r3, [r2, #0]


			break;
 80060c4:	e1f2      	b.n	80064ac <RCC_enableMaxFrequencies+0x638>
 80060c6:	bf00      	nop
 80060c8:	40023800 	.word	0x40023800
 80060cc:	40007000 	.word	0x40007000
 80060d0:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80060d4:	4b79      	ldr	r3, [pc, #484]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	4a78      	ldr	r2, [pc, #480]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80060da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060de:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80060e0:	4b76      	ldr	r3, [pc, #472]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	4a75      	ldr	r2, [pc, #468]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80060e6:	f043 0310 	orr.w	r3, r3, #16
 80060ea:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80060ec:	4b73      	ldr	r3, [pc, #460]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	4a72      	ldr	r2, [pc, #456]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80060f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80060f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060fa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 80060fc:	4b6f      	ldr	r3, [pc, #444]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	4a6e      	ldr	r2, [pc, #440]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006102:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8006106:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8006108:	4b6c      	ldr	r3, [pc, #432]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	4a6b      	ldr	r2, [pc, #428]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800610e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006112:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8006114:	4b69      	ldr	r3, [pc, #420]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006116:	4a69      	ldr	r2, [pc, #420]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800611c:	4b67      	ldr	r3, [pc, #412]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	4a66      	ldr	r2, [pc, #408]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006126:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8006128:	4b64      	ldr	r3, [pc, #400]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	4a63      	ldr	r2, [pc, #396]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800612e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006132:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8006134:	4b61      	ldr	r3, [pc, #388]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	4a60      	ldr	r2, [pc, #384]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800613a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800613e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8006140:	4b5e      	ldr	r3, [pc, #376]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a5d      	ldr	r2, [pc, #372]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800614a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800614c:	e000      	b.n	8006150 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 800614e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8006150:	4b5a      	ldr	r3, [pc, #360]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0f8      	beq.n	800614e <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800615c:	4b58      	ldr	r3, [pc, #352]	; (80062c0 <RCC_enableMaxFrequencies+0x44c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a57      	ldr	r2, [pc, #348]	; (80062c0 <RCC_enableMaxFrequencies+0x44c>)
 8006162:	f023 030f 	bic.w	r3, r3, #15
 8006166:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8006168:	4b55      	ldr	r3, [pc, #340]	; (80062c0 <RCC_enableMaxFrequencies+0x44c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a54      	ldr	r2, [pc, #336]	; (80062c0 <RCC_enableMaxFrequencies+0x44c>)
 800616e:	f043 0301 	orr.w	r3, r3, #1
 8006172:	6013      	str	r3, [r2, #0]

			break;
 8006174:	e19a      	b.n	80064ac <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8006176:	4b51      	ldr	r3, [pc, #324]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	4a50      	ldr	r2, [pc, #320]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800617c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006180:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8006182:	4b4e      	ldr	r3, [pc, #312]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	4a4d      	ldr	r2, [pc, #308]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006188:	f043 0310 	orr.w	r3, r3, #16
 800618c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800618e:	4b4b      	ldr	r3, [pc, #300]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	4a4a      	ldr	r2, [pc, #296]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006194:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800619c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800619e:	4b47      	ldr	r3, [pc, #284]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	4a46      	ldr	r2, [pc, #280]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80061a4:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 80061a8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80061aa:	4b44      	ldr	r3, [pc, #272]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	4a43      	ldr	r2, [pc, #268]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80061b0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80061b4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80061b6:	4b41      	ldr	r3, [pc, #260]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80061b8:	4a40      	ldr	r2, [pc, #256]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80061be:	4b3f      	ldr	r3, [pc, #252]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	4a3e      	ldr	r2, [pc, #248]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80061c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c8:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80061ca:	4b3c      	ldr	r3, [pc, #240]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	4a3b      	ldr	r2, [pc, #236]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80061d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061d4:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80061d6:	4b39      	ldr	r3, [pc, #228]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	4a38      	ldr	r2, [pc, #224]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80061dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061e0:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80061e2:	4b36      	ldr	r3, [pc, #216]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a35      	ldr	r2, [pc, #212]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80061e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061ec:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80061ee:	e000      	b.n	80061f2 <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 80061f0:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80061f2:	4b32      	ldr	r3, [pc, #200]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0f8      	beq.n	80061f0 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80061fe:	4b30      	ldr	r3, [pc, #192]	; (80062c0 <RCC_enableMaxFrequencies+0x44c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a2f      	ldr	r2, [pc, #188]	; (80062c0 <RCC_enableMaxFrequencies+0x44c>)
 8006204:	f023 030f 	bic.w	r3, r3, #15
 8006208:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800620a:	4b2d      	ldr	r3, [pc, #180]	; (80062c0 <RCC_enableMaxFrequencies+0x44c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a2c      	ldr	r2, [pc, #176]	; (80062c0 <RCC_enableMaxFrequencies+0x44c>)
 8006210:	f043 0301 	orr.w	r3, r3, #1
 8006214:	6013      	str	r3, [r2, #0]

			break;
 8006216:	e149      	b.n	80064ac <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8006218:	4b28      	ldr	r3, [pc, #160]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	4a27      	ldr	r2, [pc, #156]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800621e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006222:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8006224:	4b25      	ldr	r3, [pc, #148]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	4a24      	ldr	r2, [pc, #144]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800622a:	f043 0310 	orr.w	r3, r3, #16
 800622e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8006230:	4b22      	ldr	r3, [pc, #136]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	4a21      	ldr	r2, [pc, #132]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006236:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800623a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800623e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 8006240:	4b1e      	ldr	r3, [pc, #120]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	4a1d      	ldr	r2, [pc, #116]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006246:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 800624a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800624c:	4b1b      	ldr	r3, [pc, #108]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	4a1a      	ldr	r2, [pc, #104]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006252:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006256:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8006258:	4b18      	ldr	r3, [pc, #96]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800625a:	4a18      	ldr	r2, [pc, #96]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8006260:	4b16      	ldr	r3, [pc, #88]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	4a15      	ldr	r2, [pc, #84]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800626a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800626c:	4b13      	ldr	r3, [pc, #76]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	4a12      	ldr	r2, [pc, #72]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006272:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006276:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8006278:	4b10      	ldr	r3, [pc, #64]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4a0f      	ldr	r2, [pc, #60]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800627e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006282:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8006284:	4b0d      	ldr	r3, [pc, #52]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a0c      	ldr	r2, [pc, #48]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 800628a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800628e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8006290:	e000      	b.n	8006294 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 8006292:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8006294:	4b09      	ldr	r3, [pc, #36]	; (80062bc <RCC_enableMaxFrequencies+0x448>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0f8      	beq.n	8006292 <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80062a0:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <RCC_enableMaxFrequencies+0x44c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a06      	ldr	r2, [pc, #24]	; (80062c0 <RCC_enableMaxFrequencies+0x44c>)
 80062a6:	f023 030f 	bic.w	r3, r3, #15
 80062aa:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80062ac:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <RCC_enableMaxFrequencies+0x44c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a03      	ldr	r2, [pc, #12]	; (80062c0 <RCC_enableMaxFrequencies+0x44c>)
 80062b2:	f043 0302 	orr.w	r3, r3, #2
 80062b6:	6013      	str	r3, [r2, #0]

			break;
 80062b8:	e0f8      	b.n	80064ac <RCC_enableMaxFrequencies+0x638>
 80062ba:	bf00      	nop
 80062bc:	40023800 	.word	0x40023800
 80062c0:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80062c4:	4b83      	ldr	r3, [pc, #524]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	4a82      	ldr	r2, [pc, #520]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80062ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062ce:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80062d0:	4b80      	ldr	r3, [pc, #512]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	4a7f      	ldr	r2, [pc, #508]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80062d6:	f043 0310 	orr.w	r3, r3, #16
 80062da:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80062dc:	4b7d      	ldr	r3, [pc, #500]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	4a7c      	ldr	r2, [pc, #496]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80062e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80062e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ea:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 80062ec:	4b79      	ldr	r3, [pc, #484]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	4a78      	ldr	r2, [pc, #480]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80062f2:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80062f6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80062f8:	4b76      	ldr	r3, [pc, #472]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	4a75      	ldr	r2, [pc, #468]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80062fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006302:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8006304:	4b73      	ldr	r3, [pc, #460]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006306:	4a73      	ldr	r2, [pc, #460]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800630c:	4b71      	ldr	r3, [pc, #452]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	4a70      	ldr	r2, [pc, #448]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006316:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8006318:	4b6e      	ldr	r3, [pc, #440]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	4a6d      	ldr	r2, [pc, #436]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 800631e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006322:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8006324:	4b6b      	ldr	r3, [pc, #428]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	4a6a      	ldr	r2, [pc, #424]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 800632a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800632e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8006330:	4b68      	ldr	r3, [pc, #416]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a67      	ldr	r2, [pc, #412]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800633a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800633c:	e000      	b.n	8006340 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 800633e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8006340:	4b64      	ldr	r3, [pc, #400]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0f8      	beq.n	800633e <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800634c:	4b62      	ldr	r3, [pc, #392]	; (80064d8 <RCC_enableMaxFrequencies+0x664>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a61      	ldr	r2, [pc, #388]	; (80064d8 <RCC_enableMaxFrequencies+0x664>)
 8006352:	f023 030f 	bic.w	r3, r3, #15
 8006356:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8006358:	4b5f      	ldr	r3, [pc, #380]	; (80064d8 <RCC_enableMaxFrequencies+0x664>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a5e      	ldr	r2, [pc, #376]	; (80064d8 <RCC_enableMaxFrequencies+0x664>)
 800635e:	f043 0302 	orr.w	r3, r3, #2
 8006362:	6013      	str	r3, [r2, #0]

			break;
 8006364:	e0a2      	b.n	80064ac <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8006366:	4b5b      	ldr	r3, [pc, #364]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	4a5a      	ldr	r2, [pc, #360]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 800636c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006370:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8006372:	4b58      	ldr	r3, [pc, #352]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	4a57      	ldr	r2, [pc, #348]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006378:	f043 0310 	orr.w	r3, r3, #16
 800637c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800637e:	4b55      	ldr	r3, [pc, #340]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	4a54      	ldr	r2, [pc, #336]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006384:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800638c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 800638e:	4b51      	ldr	r3, [pc, #324]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	4a50      	ldr	r2, [pc, #320]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006394:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8006398:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800639a:	4b4e      	ldr	r3, [pc, #312]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	4a4d      	ldr	r2, [pc, #308]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80063a0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80063a4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80063a6:	4b4b      	ldr	r3, [pc, #300]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80063a8:	4a4a      	ldr	r2, [pc, #296]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80063ae:	4b49      	ldr	r3, [pc, #292]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	4a48      	ldr	r2, [pc, #288]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80063b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b8:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80063ba:	4b46      	ldr	r3, [pc, #280]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	4a45      	ldr	r2, [pc, #276]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80063c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063c4:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80063c6:	4b43      	ldr	r3, [pc, #268]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	4a42      	ldr	r2, [pc, #264]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80063cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063d0:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80063d2:	4b40      	ldr	r3, [pc, #256]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a3f      	ldr	r2, [pc, #252]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80063d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063dc:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80063de:	e000      	b.n	80063e2 <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 80063e0:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80063e2:	4b3c      	ldr	r3, [pc, #240]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0f8      	beq.n	80063e0 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80063ee:	4b3a      	ldr	r3, [pc, #232]	; (80064d8 <RCC_enableMaxFrequencies+0x664>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a39      	ldr	r2, [pc, #228]	; (80064d8 <RCC_enableMaxFrequencies+0x664>)
 80063f4:	f023 030f 	bic.w	r3, r3, #15
 80063f8:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80063fa:	4b37      	ldr	r3, [pc, #220]	; (80064d8 <RCC_enableMaxFrequencies+0x664>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a36      	ldr	r2, [pc, #216]	; (80064d8 <RCC_enableMaxFrequencies+0x664>)
 8006400:	f043 0302 	orr.w	r3, r3, #2
 8006404:	6013      	str	r3, [r2, #0]

			break;
 8006406:	e051      	b.n	80064ac <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8006408:	4b32      	ldr	r3, [pc, #200]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	4a31      	ldr	r2, [pc, #196]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 800640e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006412:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8006414:	4b2f      	ldr	r3, [pc, #188]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	4a2e      	ldr	r2, [pc, #184]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 800641a:	f043 0308 	orr.w	r3, r3, #8
 800641e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8006420:	4b2c      	ldr	r3, [pc, #176]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	4a2b      	ldr	r2, [pc, #172]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006426:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800642a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8006430:	4b28      	ldr	r3, [pc, #160]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	4a27      	ldr	r2, [pc, #156]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006436:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800643a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800643c:	4b25      	ldr	r3, [pc, #148]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	4a24      	ldr	r2, [pc, #144]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006442:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006446:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8006448:	4b22      	ldr	r3, [pc, #136]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 800644a:	4a22      	ldr	r2, [pc, #136]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8006450:	4b20      	ldr	r3, [pc, #128]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	4a1f      	ldr	r2, [pc, #124]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800645a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800645c:	4b1d      	ldr	r3, [pc, #116]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	4a1c      	ldr	r2, [pc, #112]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006462:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006466:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8006468:	4b1a      	ldr	r3, [pc, #104]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	4a19      	ldr	r2, [pc, #100]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 800646e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006472:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8006474:	4b17      	ldr	r3, [pc, #92]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a16      	ldr	r2, [pc, #88]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 800647a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800647e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8006480:	e000      	b.n	8006484 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 8006482:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8006484:	4b13      	ldr	r3, [pc, #76]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0f8      	beq.n	8006482 <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8006490:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <RCC_enableMaxFrequencies+0x664>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a10      	ldr	r2, [pc, #64]	; (80064d8 <RCC_enableMaxFrequencies+0x664>)
 8006496:	f023 030f 	bic.w	r3, r3, #15
 800649a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 800649c:	4b0e      	ldr	r3, [pc, #56]	; (80064d8 <RCC_enableMaxFrequencies+0x664>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a0d      	ldr	r2, [pc, #52]	; (80064d8 <RCC_enableMaxFrequencies+0x664>)
 80064a2:	f043 0303 	orr.w	r3, r3, #3
 80064a6:	6013      	str	r3, [r2, #0]

			break;
 80064a8:	e000      	b.n	80064ac <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 80064aa:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80064ac:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	4a08      	ldr	r2, [pc, #32]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80064b2:	f043 0302 	orr.w	r3, r3, #2
 80064b6:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 80064b8:	e000      	b.n	80064bc <RCC_enableMaxFrequencies+0x648>
		__NOP();
 80064ba:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 80064bc:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <RCC_enableMaxFrequencies+0x660>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0f8      	beq.n	80064ba <RCC_enableMaxFrequencies+0x646>
	}

	SystemCoreClockUpdate();
 80064c8:	f000 fce0 	bl	8006e8c <SystemCoreClockUpdate>

}
 80064cc:	bf00      	nop
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40023800 	.word	0x40023800
 80064d8:	40023c00 	.word	0x40023c00

080064dc <__NVIC_EnableIRQ>:
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	4603      	mov	r3, r0
 80064e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	db0b      	blt.n	8006506 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	f003 021f 	and.w	r2, r3, #31
 80064f4:	4907      	ldr	r1, [pc, #28]	; (8006514 <__NVIC_EnableIRQ+0x38>)
 80064f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064fa:	095b      	lsrs	r3, r3, #5
 80064fc:	2001      	movs	r0, #1
 80064fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	e000e100 	.word	0xe000e100

08006518 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8006518:	b590      	push	{r4, r7, lr}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8006520:	b672      	cpsid	i
}
 8006522:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a8f      	ldr	r2, [pc, #572]	; (8006768 <USART_Config+0x250>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d106      	bne.n	800653c <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800652e:	4b8f      	ldr	r3, [pc, #572]	; (800676c <USART_Config+0x254>)
 8006530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006532:	4a8e      	ldr	r2, [pc, #568]	; (800676c <USART_Config+0x254>)
 8006534:	f043 0310 	orr.w	r3, r3, #16
 8006538:	6453      	str	r3, [r2, #68]	; 0x44
 800653a:	e018      	b.n	800656e <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a8b      	ldr	r2, [pc, #556]	; (8006770 <USART_Config+0x258>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d106      	bne.n	8006554 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8006546:	4b89      	ldr	r3, [pc, #548]	; (800676c <USART_Config+0x254>)
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	4a88      	ldr	r2, [pc, #544]	; (800676c <USART_Config+0x254>)
 800654c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006550:	6413      	str	r3, [r2, #64]	; 0x40
 8006552:	e00c      	b.n	800656e <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a86      	ldr	r2, [pc, #536]	; (8006774 <USART_Config+0x25c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d106      	bne.n	800656c <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 800655e:	4b83      	ldr	r3, [pc, #524]	; (800676c <USART_Config+0x254>)
 8006560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006562:	4a82      	ldr	r2, [pc, #520]	; (800676c <USART_Config+0x254>)
 8006564:	f043 0320 	orr.w	r3, r3, #32
 8006568:	6453      	str	r3, [r2, #68]	; 0x44
 800656a:	e000      	b.n	800656e <USART_Config+0x56>
	}
	else{
		__NOP();
 800656c:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2200      	movs	r2, #0
 8006574:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2200      	movs	r2, #0
 800657c:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	7a5b      	ldrb	r3, [r3, #9]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d025      	beq.n	80065d2 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	7a5b      	ldrb	r3, [r3, #9]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d110      	bne.n	80065b0 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800659c:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ac:	60da      	str	r2, [r3, #12]
 80065ae:	e018      	b.n	80065e2 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065be:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ce:	60da      	str	r2, [r3, #12]
 80065d0:	e007      	b.n	80065e2 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e0:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	7a1b      	ldrb	r3, [r3, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d108      	bne.n	80065fc <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065f8:	60da      	str	r2, [r3, #12]
 80065fa:	e007      	b.n	800660c <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800660a:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	7a9b      	ldrb	r3, [r3, #10]
 8006610:	2b03      	cmp	r3, #3
 8006612:	d82f      	bhi.n	8006674 <USART_Config+0x15c>
 8006614:	a201      	add	r2, pc, #4	; (adr r2, 800661c <USART_Config+0x104>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	0800662d 	.word	0x0800662d
 8006620:	0800663f 	.word	0x0800663f
 8006624:	08006651 	.word	0x08006651
 8006628:	08006663 	.word	0x08006663
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	691a      	ldr	r2, [r3, #16]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800663a:	611a      	str	r2, [r3, #16]
			break;
 800663c:	e023      	b.n	8006686 <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800664c:	611a      	str	r2, [r3, #16]
			break;
 800664e:	e01a      	b.n	8006686 <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	691a      	ldr	r2, [r3, #16]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800665e:	611a      	str	r2, [r3, #16]
			break;
 8006660:	e011      	b.n	8006686 <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8006670:	611a      	str	r2, [r3, #16]
			break;
 8006672:	e008      	b.n	8006686 <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	691a      	ldr	r2, [r3, #16]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006682:	611a      	str	r2, [r3, #16]
			break;
 8006684:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68da      	ldr	r2, [r3, #12]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681c      	ldr	r4, [r3, #0]
 800668e:	4611      	mov	r1, r2
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f8cd 	bl	8006830 <brrCalculus>
 8006696:	4603      	mov	r3, r0
 8006698:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	799b      	ldrb	r3, [r3, #6]
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d82e      	bhi.n	8006700 <USART_Config+0x1e8>
 80066a2:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <USART_Config+0x190>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066b9 	.word	0x080066b9
 80066ac:	080066cb 	.word	0x080066cb
 80066b0:	080066dd 	.word	0x080066dd
 80066b4:	080066ef 	.word	0x080066ef
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0208 	orr.w	r2, r2, #8
 80066c6:	60da      	str	r2, [r3, #12]
			break;
 80066c8:	e023      	b.n	8006712 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0204 	orr.w	r2, r2, #4
 80066d8:	60da      	str	r2, [r3, #12]
			break;
 80066da:	e01a      	b.n	8006712 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 020c 	orr.w	r2, r2, #12
 80066ea:	60da      	str	r2, [r3, #12]
			break;
 80066ec:	e011      	b.n	8006712 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 020c 	bic.w	r2, r2, #12
 80066fc:	60da      	str	r2, [r3, #12]
			break;
 80066fe:	e008      	b.n	8006712 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 020c 	bic.w	r2, r2, #12
 800670e:	60da      	str	r2, [r3, #12]
			break;
 8006710:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	799b      	ldrb	r3, [r3, #6]
 8006716:	2b03      	cmp	r3, #3
 8006718:	d008      	beq.n	800672c <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006728:	60da      	str	r2, [r3, #12]
 800672a:	e007      	b.n	800673c <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800673a:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	795b      	ldrb	r3, [r3, #5]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d12d      	bne.n	80067a0 <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0220 	orr.w	r2, r2, #32
 8006752:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a03      	ldr	r2, [pc, #12]	; (8006768 <USART_Config+0x250>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d10c      	bne.n	8006778 <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800675e:	2025      	movs	r0, #37	; 0x25
 8006760:	f7ff febc 	bl	80064dc <__NVIC_EnableIRQ>
 8006764:	e024      	b.n	80067b0 <USART_Config+0x298>
 8006766:	bf00      	nop
 8006768:	40011000 	.word	0x40011000
 800676c:	40023800 	.word	0x40023800
 8006770:	40004400 	.word	0x40004400
 8006774:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a28      	ldr	r2, [pc, #160]	; (8006820 <USART_Config+0x308>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d103      	bne.n	800678a <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8006782:	2026      	movs	r0, #38	; 0x26
 8006784:	f7ff feaa 	bl	80064dc <__NVIC_EnableIRQ>
 8006788:	e012      	b.n	80067b0 <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a25      	ldr	r2, [pc, #148]	; (8006824 <USART_Config+0x30c>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d103      	bne.n	800679c <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8006794:	2047      	movs	r0, #71	; 0x47
 8006796:	f7ff fea1 	bl	80064dc <__NVIC_EnableIRQ>
 800679a:	e009      	b.n	80067b0 <USART_Config+0x298>
		}
		else{
				__NOP();
 800679c:	bf00      	nop
 800679e:	e007      	b.n	80067b0 <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0220 	bic.w	r2, r2, #32
 80067ae:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	791b      	ldrb	r3, [r3, #4]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d124      	bne.n	8006802 <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067c6:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a16      	ldr	r2, [pc, #88]	; (8006828 <USART_Config+0x310>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d103      	bne.n	80067da <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 80067d2:	2025      	movs	r0, #37	; 0x25
 80067d4:	f7ff fe82 	bl	80064dc <__NVIC_EnableIRQ>
 80067d8:	e01b      	b.n	8006812 <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a10      	ldr	r2, [pc, #64]	; (8006820 <USART_Config+0x308>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d103      	bne.n	80067ec <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 80067e4:	2026      	movs	r0, #38	; 0x26
 80067e6:	f7ff fe79 	bl	80064dc <__NVIC_EnableIRQ>
 80067ea:	e012      	b.n	8006812 <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a0c      	ldr	r2, [pc, #48]	; (8006824 <USART_Config+0x30c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d103      	bne.n	80067fe <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 80067f6:	2047      	movs	r0, #71	; 0x47
 80067f8:	f7ff fe70 	bl	80064dc <__NVIC_EnableIRQ>
 80067fc:	e009      	b.n	8006812 <USART_Config+0x2fa>
		}
		else{
				__NOP();
 80067fe:	bf00      	nop
 8006800:	e007      	b.n	8006812 <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006810:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8006812:	b662      	cpsie	i
}
 8006814:	bf00      	nop
	}

	__enable_irq();
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	bd90      	pop	{r4, r7, pc}
 800681e:	bf00      	nop
 8006820:	40004400 	.word	0x40004400
 8006824:	40011400 	.word	0x40011400
 8006828:	40011000 	.word	0x40011000
 800682c:	00000000 	.word	0x00000000

08006830 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8006830:	b5b0      	push	{r4, r5, r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	79db      	ldrb	r3, [r3, #7]
 800683e:	2b03      	cmp	r3, #3
 8006840:	f200 8217 	bhi.w	8006c72 <brrCalculus+0x442>
 8006844:	a201      	add	r2, pc, #4	; (adr r2, 800684c <brrCalculus+0x1c>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	0800685d 	.word	0x0800685d
 8006850:	08006957 	.word	0x08006957
 8006854:	08006a71 	.word	0x08006a71
 8006858:	08006b79 	.word	0x08006b79

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 800685c:	4980      	ldr	r1, [pc, #512]	; (8006a60 <brrCalculus+0x230>)
 800685e:	a37c      	add	r3, pc, #496	; (adr r3, 8006a50 <brrCalculus+0x220>)
 8006860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006864:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006872:	ee17 0a90 	vmov	r0, s15
 8006876:	f7f9 fe7f 	bl	8000578 <__aeabi_f2d>
 800687a:	4b79      	ldr	r3, [pc, #484]	; (8006a60 <brrCalculus+0x230>)
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	f7f9 fed2 	bl	8000628 <__aeabi_dmul>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4975      	ldr	r1, [pc, #468]	; (8006a60 <brrCalculus+0x230>)
 800688a:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800688e:	4b74      	ldr	r3, [pc, #464]	; (8006a60 <brrCalculus+0x230>)
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	4610      	mov	r0, r2
 8006896:	4619      	mov	r1, r3
 8006898:	f7fa f976 	bl	8000b88 <__aeabi_d2iz>
 800689c:	4603      	mov	r3, r0
 800689e:	b29a      	uxth	r2, r3
 80068a0:	4b70      	ldr	r3, [pc, #448]	; (8006a64 <brrCalculus+0x234>)
 80068a2:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80068a4:	4b6e      	ldr	r3, [pc, #440]	; (8006a60 <brrCalculus+0x230>)
 80068a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80068aa:	4b6d      	ldr	r3, [pc, #436]	; (8006a60 <brrCalculus+0x230>)
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	4610      	mov	r0, r2
 80068b2:	4619      	mov	r1, r3
 80068b4:	f7fa f968 	bl	8000b88 <__aeabi_d2iz>
 80068b8:	4603      	mov	r3, r0
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7f9 fe4a 	bl	8000554 <__aeabi_i2d>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4620      	mov	r0, r4
 80068c6:	4629      	mov	r1, r5
 80068c8:	f7f9 fcf6 	bl	80002b8 <__aeabi_dsub>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4610      	mov	r0, r2
 80068d2:	4619      	mov	r1, r3
 80068d4:	f7fa f9a0 	bl	8000c18 <__aeabi_d2f>
 80068d8:	4603      	mov	r3, r0
 80068da:	4a63      	ldr	r2, [pc, #396]	; (8006a68 <brrCalculus+0x238>)
 80068dc:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80068de:	4b62      	ldr	r3, [pc, #392]	; (8006a68 <brrCalculus+0x238>)
 80068e0:	edd3 7a00 	vldr	s15, [r3]
 80068e4:	2004      	movs	r0, #4
 80068e6:	eeb0 0a67 	vmov.f32	s0, s15
 80068ea:	f000 fa6d 	bl	8006dc8 <roundToNDecimals>
 80068ee:	eef0 7a40 	vmov.f32	s15, s0
 80068f2:	4b5d      	ldr	r3, [pc, #372]	; (8006a68 <brrCalculus+0x238>)
 80068f4:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80068f8:	4b5b      	ldr	r3, [pc, #364]	; (8006a68 <brrCalculus+0x238>)
 80068fa:	edd3 7a00 	vldr	s15, [r3]
 80068fe:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8006902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006906:	4b58      	ldr	r3, [pc, #352]	; (8006a68 <brrCalculus+0x238>)
 8006908:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800690c:	4b56      	ldr	r3, [pc, #344]	; (8006a68 <brrCalculus+0x238>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4618      	mov	r0, r3
 8006912:	f7f9 fe31 	bl	8000578 <__aeabi_f2d>
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	ec43 2b10 	vmov	d0, r2, r3
 800691e:	f004 f9ab 	bl	800ac78 <round>
 8006922:	ec53 2b10 	vmov	r2, r3, d0
 8006926:	4610      	mov	r0, r2
 8006928:	4619      	mov	r1, r3
 800692a:	f7fa f975 	bl	8000c18 <__aeabi_d2f>
 800692e:	4603      	mov	r3, r0
 8006930:	4a4d      	ldr	r2, [pc, #308]	; (8006a68 <brrCalculus+0x238>)
 8006932:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8006934:	4b4b      	ldr	r3, [pc, #300]	; (8006a64 <brrCalculus+0x234>)
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	011b      	lsls	r3, r3, #4
 800693a:	b29a      	uxth	r2, r3
 800693c:	4b4a      	ldr	r3, [pc, #296]	; (8006a68 <brrCalculus+0x238>)
 800693e:	edd3 7a00 	vldr	s15, [r3]
 8006942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006946:	ee17 3a90 	vmov	r3, s15
 800694a:	b29b      	uxth	r3, r3
 800694c:	4313      	orrs	r3, r2
 800694e:	b29a      	uxth	r2, r3
 8006950:	4b46      	ldr	r3, [pc, #280]	; (8006a6c <brrCalculus+0x23c>)
 8006952:	801a      	strh	r2, [r3, #0]


		break;
 8006954:	e18f      	b.n	8006c76 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 8006956:	4942      	ldr	r1, [pc, #264]	; (8006a60 <brrCalculus+0x230>)
 8006958:	a33f      	add	r3, pc, #252	; (adr r3, 8006a58 <brrCalculus+0x228>)
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695e:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	ee07 3a90 	vmov	s15, r3
 8006968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696c:	ee17 0a90 	vmov	r0, s15
 8006970:	f7f9 fe02 	bl	8000578 <__aeabi_f2d>
 8006974:	4b3a      	ldr	r3, [pc, #232]	; (8006a60 <brrCalculus+0x230>)
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	f7f9 fe55 	bl	8000628 <__aeabi_dmul>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4937      	ldr	r1, [pc, #220]	; (8006a60 <brrCalculus+0x230>)
 8006984:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8006988:	4b35      	ldr	r3, [pc, #212]	; (8006a60 <brrCalculus+0x230>)
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	4610      	mov	r0, r2
 8006990:	4619      	mov	r1, r3
 8006992:	f7fa f8f9 	bl	8000b88 <__aeabi_d2iz>
 8006996:	4603      	mov	r3, r0
 8006998:	b29a      	uxth	r2, r3
 800699a:	4b32      	ldr	r3, [pc, #200]	; (8006a64 <brrCalculus+0x234>)
 800699c:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800699e:	4b30      	ldr	r3, [pc, #192]	; (8006a60 <brrCalculus+0x230>)
 80069a0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80069a4:	4b2e      	ldr	r3, [pc, #184]	; (8006a60 <brrCalculus+0x230>)
 80069a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069aa:	4610      	mov	r0, r2
 80069ac:	4619      	mov	r1, r3
 80069ae:	f7fa f8eb 	bl	8000b88 <__aeabi_d2iz>
 80069b2:	4603      	mov	r3, r0
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7f9 fdcd 	bl	8000554 <__aeabi_i2d>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	4620      	mov	r0, r4
 80069c0:	4629      	mov	r1, r5
 80069c2:	f7f9 fc79 	bl	80002b8 <__aeabi_dsub>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	4610      	mov	r0, r2
 80069cc:	4619      	mov	r1, r3
 80069ce:	f7fa f923 	bl	8000c18 <__aeabi_d2f>
 80069d2:	4603      	mov	r3, r0
 80069d4:	4a24      	ldr	r2, [pc, #144]	; (8006a68 <brrCalculus+0x238>)
 80069d6:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80069d8:	4b23      	ldr	r3, [pc, #140]	; (8006a68 <brrCalculus+0x238>)
 80069da:	edd3 7a00 	vldr	s15, [r3]
 80069de:	2004      	movs	r0, #4
 80069e0:	eeb0 0a67 	vmov.f32	s0, s15
 80069e4:	f000 f9f0 	bl	8006dc8 <roundToNDecimals>
 80069e8:	eef0 7a40 	vmov.f32	s15, s0
 80069ec:	4b1e      	ldr	r3, [pc, #120]	; (8006a68 <brrCalculus+0x238>)
 80069ee:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80069f2:	4b1d      	ldr	r3, [pc, #116]	; (8006a68 <brrCalculus+0x238>)
 80069f4:	edd3 7a00 	vldr	s15, [r3]
 80069f8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80069fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a00:	4b19      	ldr	r3, [pc, #100]	; (8006a68 <brrCalculus+0x238>)
 8006a02:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8006a06:	4b18      	ldr	r3, [pc, #96]	; (8006a68 <brrCalculus+0x238>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7f9 fdb4 	bl	8000578 <__aeabi_f2d>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	ec43 2b10 	vmov	d0, r2, r3
 8006a18:	f004 f92e 	bl	800ac78 <round>
 8006a1c:	ec53 2b10 	vmov	r2, r3, d0
 8006a20:	4610      	mov	r0, r2
 8006a22:	4619      	mov	r1, r3
 8006a24:	f7fa f8f8 	bl	8000c18 <__aeabi_d2f>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	4a0f      	ldr	r2, [pc, #60]	; (8006a68 <brrCalculus+0x238>)
 8006a2c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8006a2e:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <brrCalculus+0x234>)
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <brrCalculus+0x238>)
 8006a38:	edd3 7a00 	vldr	s15, [r3]
 8006a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a40:	ee17 3a90 	vmov	r3, s15
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	4313      	orrs	r3, r2
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	4b08      	ldr	r3, [pc, #32]	; (8006a6c <brrCalculus+0x23c>)
 8006a4c:	801a      	strh	r2, [r3, #0]


		break;
 8006a4e:	e112      	b.n	8006c76 <brrCalculus+0x446>
 8006a50:	b4e81b4f 	.word	0xb4e81b4f
 8006a54:	3edb4e81 	.word	0x3edb4e81
 8006a58:	b4e81b4f 	.word	0xb4e81b4f
 8006a5c:	3ecb4e81 	.word	0x3ecb4e81
 8006a60:	20000628 	.word	0x20000628
 8006a64:	20000620 	.word	0x20000620
 8006a68:	20000624 	.word	0x20000624
 8006a6c:	2000061e 	.word	0x2000061e
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8006a70:	4989      	ldr	r1, [pc, #548]	; (8006c98 <brrCalculus+0x468>)
 8006a72:	a385      	add	r3, pc, #532	; (adr r3, 8006c88 <brrCalculus+0x458>)
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a86:	ee17 0a90 	vmov	r0, s15
 8006a8a:	f7f9 fd75 	bl	8000578 <__aeabi_f2d>
 8006a8e:	4b82      	ldr	r3, [pc, #520]	; (8006c98 <brrCalculus+0x468>)
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f7f9 fdc8 	bl	8000628 <__aeabi_dmul>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	497e      	ldr	r1, [pc, #504]	; (8006c98 <brrCalculus+0x468>)
 8006a9e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8006aa2:	4b7d      	ldr	r3, [pc, #500]	; (8006c98 <brrCalculus+0x468>)
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	4619      	mov	r1, r3
 8006aac:	f7fa f86c 	bl	8000b88 <__aeabi_d2iz>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	4b79      	ldr	r3, [pc, #484]	; (8006c9c <brrCalculus+0x46c>)
 8006ab6:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8006ab8:	4b77      	ldr	r3, [pc, #476]	; (8006c98 <brrCalculus+0x468>)
 8006aba:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006abe:	4b76      	ldr	r3, [pc, #472]	; (8006c98 <brrCalculus+0x468>)
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	f7fa f85e 	bl	8000b88 <__aeabi_d2iz>
 8006acc:	4603      	mov	r3, r0
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7f9 fd40 	bl	8000554 <__aeabi_i2d>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4620      	mov	r0, r4
 8006ada:	4629      	mov	r1, r5
 8006adc:	f7f9 fbec 	bl	80002b8 <__aeabi_dsub>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	f7fa f896 	bl	8000c18 <__aeabi_d2f>
 8006aec:	4603      	mov	r3, r0
 8006aee:	4a6c      	ldr	r2, [pc, #432]	; (8006ca0 <brrCalculus+0x470>)
 8006af0:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8006af2:	4b6b      	ldr	r3, [pc, #428]	; (8006ca0 <brrCalculus+0x470>)
 8006af4:	edd3 7a00 	vldr	s15, [r3]
 8006af8:	2004      	movs	r0, #4
 8006afa:	eeb0 0a67 	vmov.f32	s0, s15
 8006afe:	f000 f963 	bl	8006dc8 <roundToNDecimals>
 8006b02:	eef0 7a40 	vmov.f32	s15, s0
 8006b06:	4b66      	ldr	r3, [pc, #408]	; (8006ca0 <brrCalculus+0x470>)
 8006b08:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8006b0c:	4b64      	ldr	r3, [pc, #400]	; (8006ca0 <brrCalculus+0x470>)
 8006b0e:	edd3 7a00 	vldr	s15, [r3]
 8006b12:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8006b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b1a:	4b61      	ldr	r3, [pc, #388]	; (8006ca0 <brrCalculus+0x470>)
 8006b1c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8006b20:	4b5f      	ldr	r3, [pc, #380]	; (8006ca0 <brrCalculus+0x470>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7f9 fd27 	bl	8000578 <__aeabi_f2d>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	ec43 2b10 	vmov	d0, r2, r3
 8006b32:	f004 f8a1 	bl	800ac78 <round>
 8006b36:	ec51 0b10 	vmov	r0, r1, d0
 8006b3a:	f04f 0200 	mov.w	r2, #0
 8006b3e:	4b59      	ldr	r3, [pc, #356]	; (8006ca4 <brrCalculus+0x474>)
 8006b40:	f7f9 fbbc 	bl	80002bc <__adddf3>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	f7fa f864 	bl	8000c18 <__aeabi_d2f>
 8006b50:	4603      	mov	r3, r0
 8006b52:	4a53      	ldr	r2, [pc, #332]	; (8006ca0 <brrCalculus+0x470>)
 8006b54:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8006b56:	4b51      	ldr	r3, [pc, #324]	; (8006c9c <brrCalculus+0x46c>)
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	4b50      	ldr	r3, [pc, #320]	; (8006ca0 <brrCalculus+0x470>)
 8006b60:	edd3 7a00 	vldr	s15, [r3]
 8006b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b68:	ee17 3a90 	vmov	r3, s15
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	4b4d      	ldr	r3, [pc, #308]	; (8006ca8 <brrCalculus+0x478>)
 8006b74:	801a      	strh	r2, [r3, #0]


		break;
 8006b76:	e07e      	b.n	8006c76 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8006b78:	4947      	ldr	r1, [pc, #284]	; (8006c98 <brrCalculus+0x468>)
 8006b7a:	a345      	add	r3, pc, #276	; (adr r3, 8006c90 <brrCalculus+0x460>)
 8006b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b80:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8e:	ee17 0a90 	vmov	r0, s15
 8006b92:	f7f9 fcf1 	bl	8000578 <__aeabi_f2d>
 8006b96:	4b40      	ldr	r3, [pc, #256]	; (8006c98 <brrCalculus+0x468>)
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	f7f9 fd44 	bl	8000628 <__aeabi_dmul>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	493c      	ldr	r1, [pc, #240]	; (8006c98 <brrCalculus+0x468>)
 8006ba6:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8006baa:	4b3b      	ldr	r3, [pc, #236]	; (8006c98 <brrCalculus+0x468>)
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	f7f9 ffe8 	bl	8000b88 <__aeabi_d2iz>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	4b37      	ldr	r3, [pc, #220]	; (8006c9c <brrCalculus+0x46c>)
 8006bbe:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8006bc0:	4b35      	ldr	r3, [pc, #212]	; (8006c98 <brrCalculus+0x468>)
 8006bc2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006bc6:	4b34      	ldr	r3, [pc, #208]	; (8006c98 <brrCalculus+0x468>)
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	4610      	mov	r0, r2
 8006bce:	4619      	mov	r1, r3
 8006bd0:	f7f9 ffda 	bl	8000b88 <__aeabi_d2iz>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7f9 fcbc 	bl	8000554 <__aeabi_i2d>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4620      	mov	r0, r4
 8006be2:	4629      	mov	r1, r5
 8006be4:	f7f9 fb68 	bl	80002b8 <__aeabi_dsub>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4610      	mov	r0, r2
 8006bee:	4619      	mov	r1, r3
 8006bf0:	f7fa f812 	bl	8000c18 <__aeabi_d2f>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	4a2a      	ldr	r2, [pc, #168]	; (8006ca0 <brrCalculus+0x470>)
 8006bf8:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8006bfa:	4b29      	ldr	r3, [pc, #164]	; (8006ca0 <brrCalculus+0x470>)
 8006bfc:	edd3 7a00 	vldr	s15, [r3]
 8006c00:	2004      	movs	r0, #4
 8006c02:	eeb0 0a67 	vmov.f32	s0, s15
 8006c06:	f000 f8df 	bl	8006dc8 <roundToNDecimals>
 8006c0a:	eef0 7a40 	vmov.f32	s15, s0
 8006c0e:	4b24      	ldr	r3, [pc, #144]	; (8006ca0 <brrCalculus+0x470>)
 8006c10:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8006c14:	4b22      	ldr	r3, [pc, #136]	; (8006ca0 <brrCalculus+0x470>)
 8006c16:	edd3 7a00 	vldr	s15, [r3]
 8006c1a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8006c1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c22:	4b1f      	ldr	r3, [pc, #124]	; (8006ca0 <brrCalculus+0x470>)
 8006c24:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8006c28:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <brrCalculus+0x470>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7f9 fca3 	bl	8000578 <__aeabi_f2d>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	ec43 2b10 	vmov	d0, r2, r3
 8006c3a:	f004 f81d 	bl	800ac78 <round>
 8006c3e:	ec53 2b10 	vmov	r2, r3, d0
 8006c42:	4610      	mov	r0, r2
 8006c44:	4619      	mov	r1, r3
 8006c46:	f7f9 ffe7 	bl	8000c18 <__aeabi_d2f>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	4a14      	ldr	r2, [pc, #80]	; (8006ca0 <brrCalculus+0x470>)
 8006c4e:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8006c50:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <brrCalculus+0x46c>)
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <brrCalculus+0x470>)
 8006c5a:	edd3 7a00 	vldr	s15, [r3]
 8006c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c62:	ee17 3a90 	vmov	r3, s15
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <brrCalculus+0x478>)
 8006c6e:	801a      	strh	r2, [r3, #0]


		break;
 8006c70:	e001      	b.n	8006c76 <brrCalculus+0x446>
	}
	default:{

		__NOP();
 8006c72:	bf00      	nop
		break;
 8006c74:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 8006c76:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <brrCalculus+0x478>)
 8006c78:	881b      	ldrh	r3, [r3, #0]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bdb0      	pop	{r4, r5, r7, pc}
 8006c82:	bf00      	nop
 8006c84:	f3af 8000 	nop.w
 8006c88:	789abcdf 	.word	0x789abcdf
 8006c8c:	3ec23456 	.word	0x3ec23456
 8006c90:	789abcdf 	.word	0x789abcdf
 8006c94:	3ea23456 	.word	0x3ea23456
 8006c98:	20000628 	.word	0x20000628
 8006c9c:	20000620 	.word	0x20000620
 8006ca0:	20000624 	.word	0x20000624
 8006ca4:	3ff00000 	.word	0x3ff00000
 8006ca8:	2000061e 	.word	0x2000061e

08006cac <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8006cb6:	e000      	b.n	8006cba <writeChar+0xe>
		__NOP();
 8006cb8:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0f7      	beq.n	8006cb8 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	605a      	str	r2, [r3, #4]

}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 8006ce6:	e008      	b.n	8006cfa <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff ffdc 	bl	8006cac <writeChar>
		msgToSend ++ ;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1f2      	bne.n	8006ce8 <writeMsg+0xc>
	}
}
 8006d02:	bf00      	nop
 8006d04:	bf00      	nop
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
	__NOP();
 8006d10:	bf00      	nop
}
 8006d12:	bf00      	nop
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
	__NOP();
 8006d20:	bf00      	nop
}
 8006d22:	bf00      	nop
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
	return auxRxData;
 8006d30:	4b03      	ldr	r3, [pc, #12]	; (8006d40 <getRxData+0x14>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	20000630 	.word	0x20000630

08006d44 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8006d44:	b580      	push	{r7, lr}
 8006d46:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8006d48:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <USART2_IRQHandler+0x24>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0320 	and.w	r3, r3, #32
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d006      	beq.n	8006d62 <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 8006d54:	4b04      	ldr	r3, [pc, #16]	; (8006d68 <USART2_IRQHandler+0x24>)
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <USART2_IRQHandler+0x28>)
 8006d5c:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8006d5e:	f7fa fcbd 	bl	80016dc <usart2Rx_Callback>
	}

}
 8006d62:	bf00      	nop
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	40004400 	.word	0x40004400
 8006d6c:	20000630 	.word	0x20000630

08006d70 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 8006d74:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <USART1_IRQHandler+0x24>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0320 	and.w	r3, r3, #32
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d006      	beq.n	8006d8e <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8006d80:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <USART1_IRQHandler+0x24>)
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	4b04      	ldr	r3, [pc, #16]	; (8006d98 <USART1_IRQHandler+0x28>)
 8006d88:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8006d8a:	f7ff ffbf 	bl	8006d0c <usart1Rx_Callback>
	}
}
 8006d8e:	bf00      	nop
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	40011000 	.word	0x40011000
 8006d98:	20000630 	.word	0x20000630

08006d9c <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8006da0:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <USART6_IRQHandler+0x24>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d006      	beq.n	8006dba <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8006dac:	4b04      	ldr	r3, [pc, #16]	; (8006dc0 <USART6_IRQHandler+0x24>)
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	4b04      	ldr	r3, [pc, #16]	; (8006dc4 <USART6_IRQHandler+0x28>)
 8006db4:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8006db6:	f7ff ffb1 	bl	8006d1c <usart6Rx_Callback>
	}

}
 8006dba:	bf00      	nop
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	40011400 	.word	0x40011400
 8006dc4:	20000630 	.word	0x20000630

08006dc8 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	ed87 0a01 	vstr	s0, [r7, #4]
 8006dd2:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 8006dd4:	6838      	ldr	r0, [r7, #0]
 8006dd6:	f7f9 fbbd 	bl	8000554 <__aeabi_i2d>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	ec43 2b11 	vmov	d1, r2, r3
 8006de2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8006e60 <roundToNDecimals+0x98>
 8006de6:	f003 ffe9 	bl	800adbc <pow>
 8006dea:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7f9 fbc2 	bl	8000578 <__aeabi_f2d>
 8006df4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006df8:	f7f9 fc16 	bl	8000628 <__aeabi_dmul>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4610      	mov	r0, r2
 8006e02:	4619      	mov	r1, r3
 8006e04:	f7f9 ff08 	bl	8000c18 <__aeabi_d2f>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	607b      	str	r3, [r7, #4]

    number = round(number);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7f9 fbb3 	bl	8000578 <__aeabi_f2d>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	ec43 2b10 	vmov	d0, r2, r3
 8006e1a:	f003 ff2d 	bl	800ac78 <round>
 8006e1e:	ec53 2b10 	vmov	r2, r3, d0
 8006e22:	4610      	mov	r0, r2
 8006e24:	4619      	mov	r1, r3
 8006e26:	f7f9 fef7 	bl	8000c18 <__aeabi_d2f>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	607b      	str	r3, [r7, #4]

    number /= factor;
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7f9 fba2 	bl	8000578 <__aeabi_f2d>
 8006e34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e38:	f7f9 fd20 	bl	800087c <__aeabi_ddiv>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4610      	mov	r0, r2
 8006e42:	4619      	mov	r1, r3
 8006e44:	f7f9 fee8 	bl	8000c18 <__aeabi_d2f>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	607b      	str	r3, [r7, #4]

    return number;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	ee07 3a90 	vmov	s15, r3
}
 8006e52:	eeb0 0a67 	vmov.f32	s0, s15
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	f3af 8000 	nop.w
 8006e60:	00000000 	.word	0x00000000
 8006e64:	40240000 	.word	0x40240000

08006e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006e6c:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <SystemInit+0x20>)
 8006e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e72:	4a05      	ldr	r2, [pc, #20]	; (8006e88 <SystemInit+0x20>)
 8006e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006e7c:	bf00      	nop
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	e000ed00 	.word	0xe000ed00

08006e8c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8006e92:	2300      	movs	r3, #0
 8006e94:	613b      	str	r3, [r7, #16]
 8006e96:	2300      	movs	r3, #0
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8006ea6:	4b34      	ldr	r3, [pc, #208]	; (8006f78 <SystemCoreClockUpdate+0xec>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 030c 	and.w	r3, r3, #12
 8006eae:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	2b08      	cmp	r3, #8
 8006eb4:	d011      	beq.n	8006eda <SystemCoreClockUpdate+0x4e>
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	d844      	bhi.n	8006f46 <SystemCoreClockUpdate+0xba>
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <SystemCoreClockUpdate+0x3e>
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d004      	beq.n	8006ed2 <SystemCoreClockUpdate+0x46>
 8006ec8:	e03d      	b.n	8006f46 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8006eca:	4b2c      	ldr	r3, [pc, #176]	; (8006f7c <SystemCoreClockUpdate+0xf0>)
 8006ecc:	4a2c      	ldr	r2, [pc, #176]	; (8006f80 <SystemCoreClockUpdate+0xf4>)
 8006ece:	601a      	str	r2, [r3, #0]
      break;
 8006ed0:	e03d      	b.n	8006f4e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8006ed2:	4b2a      	ldr	r3, [pc, #168]	; (8006f7c <SystemCoreClockUpdate+0xf0>)
 8006ed4:	4a2b      	ldr	r2, [pc, #172]	; (8006f84 <SystemCoreClockUpdate+0xf8>)
 8006ed6:	601a      	str	r2, [r3, #0]
      break;
 8006ed8:	e039      	b.n	8006f4e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8006eda:	4b27      	ldr	r3, [pc, #156]	; (8006f78 <SystemCoreClockUpdate+0xec>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	0d9b      	lsrs	r3, r3, #22
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ee6:	4b24      	ldr	r3, [pc, #144]	; (8006f78 <SystemCoreClockUpdate+0xec>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eee:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00c      	beq.n	8006f10 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006ef6:	4a23      	ldr	r2, [pc, #140]	; (8006f84 <SystemCoreClockUpdate+0xf8>)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efe:	4a1e      	ldr	r2, [pc, #120]	; (8006f78 <SystemCoreClockUpdate+0xec>)
 8006f00:	6852      	ldr	r2, [r2, #4]
 8006f02:	0992      	lsrs	r2, r2, #6
 8006f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f08:	fb02 f303 	mul.w	r3, r2, r3
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	e00b      	b.n	8006f28 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006f10:	4a1b      	ldr	r2, [pc, #108]	; (8006f80 <SystemCoreClockUpdate+0xf4>)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f18:	4a17      	ldr	r2, [pc, #92]	; (8006f78 <SystemCoreClockUpdate+0xec>)
 8006f1a:	6852      	ldr	r2, [r2, #4]
 8006f1c:	0992      	lsrs	r2, r2, #6
 8006f1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f22:	fb02 f303 	mul.w	r3, r2, r3
 8006f26:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8006f28:	4b13      	ldr	r3, [pc, #76]	; (8006f78 <SystemCoreClockUpdate+0xec>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	0c1b      	lsrs	r3, r3, #16
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	3301      	adds	r3, #1
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f40:	4a0e      	ldr	r2, [pc, #56]	; (8006f7c <SystemCoreClockUpdate+0xf0>)
 8006f42:	6013      	str	r3, [r2, #0]
      break;
 8006f44:	e003      	b.n	8006f4e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8006f46:	4b0d      	ldr	r3, [pc, #52]	; (8006f7c <SystemCoreClockUpdate+0xf0>)
 8006f48:	4a0d      	ldr	r2, [pc, #52]	; (8006f80 <SystemCoreClockUpdate+0xf4>)
 8006f4a:	601a      	str	r2, [r3, #0]
      break;
 8006f4c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8006f4e:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <SystemCoreClockUpdate+0xec>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	091b      	lsrs	r3, r3, #4
 8006f54:	f003 030f 	and.w	r3, r3, #15
 8006f58:	4a0b      	ldr	r2, [pc, #44]	; (8006f88 <SystemCoreClockUpdate+0xfc>)
 8006f5a:	5cd3      	ldrb	r3, [r2, r3]
 8006f5c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8006f5e:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <SystemCoreClockUpdate+0xf0>)
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	fa22 f303 	lsr.w	r3, r2, r3
 8006f68:	4a04      	ldr	r2, [pc, #16]	; (8006f7c <SystemCoreClockUpdate+0xf0>)
 8006f6a:	6013      	str	r3, [r2, #0]
}
 8006f6c:	bf00      	nop
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	40023800 	.word	0x40023800
 8006f7c:	2000000c 	.word	0x2000000c
 8006f80:	00f42400 	.word	0x00f42400
 8006f84:	017d7840 	.word	0x017d7840
 8006f88:	0800d25c 	.word	0x0800d25c

08006f8c <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
//
//	ptrDMA_handler[1]->ptrDMAType = DMA1;
//	ptrDMA_handler[1]->ptrDMAStream = DMA1_Stream6;

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a89      	ldr	r2, [pc, #548]	; (80071c0 <i2c_config+0x234>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d106      	bne.n	8006fac <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 8006f9e:	4b89      	ldr	r3, [pc, #548]	; (80071c4 <i2c_config+0x238>)
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	4a88      	ldr	r2, [pc, #544]	; (80071c4 <i2c_config+0x238>)
 8006fa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8006faa:	e016      	b.n	8006fda <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a85      	ldr	r2, [pc, #532]	; (80071c8 <i2c_config+0x23c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d106      	bne.n	8006fc4 <i2c_config+0x38>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 8006fb6:	4b83      	ldr	r3, [pc, #524]	; (80071c4 <i2c_config+0x238>)
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	4a82      	ldr	r2, [pc, #520]	; (80071c4 <i2c_config+0x238>)
 8006fbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8006fc2:	e00a      	b.n	8006fda <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a80      	ldr	r2, [pc, #512]	; (80071cc <i2c_config+0x240>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d105      	bne.n	8006fda <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 8006fce:	4b7d      	ldr	r3, [pc, #500]	; (80071c4 <i2c_config+0x238>)
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	4a7c      	ldr	r2, [pc, #496]	; (80071c4 <i2c_config+0x238>)
 8006fd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fd8:	6413      	str	r3, [r2, #64]	; 0x40
	}



	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0201 	bic.w	r2, r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8006fea:	e000      	b.n	8006fee <i2c_config+0x62>
		__NOP();
 8006fec:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1f7      	bne.n	8006fec <i2c_config+0x60>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800700a:	601a      	str	r2, [r3, #0]

	__NOP();
 800700c:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800701c:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800702c:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	79db      	ldrb	r3, [r3, #7]
 8007032:	2b10      	cmp	r3, #16
 8007034:	d108      	bne.n	8007048 <i2c_config+0xbc>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f042 0210 	orr.w	r2, r2, #16
 8007044:	605a      	str	r2, [r3, #4]
 8007046:	e018      	b.n	800707a <i2c_config+0xee>

	}else if(ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_25_MHz_FOR_I2C){
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	79db      	ldrb	r3, [r3, #7]
 800704c:	2b19      	cmp	r3, #25
 800704e:	d108      	bne.n	8007062 <i2c_config+0xd6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_25_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f042 0219 	orr.w	r2, r2, #25
 800705e:	605a      	str	r2, [r3, #4]
 8007060:	e00b      	b.n	800707a <i2c_config+0xee>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	79db      	ldrb	r3, [r3, #7]
 8007066:	2b32      	cmp	r3, #50	; 0x32
 8007068:	d107      	bne.n	800707a <i2c_config+0xee>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8007078:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2200      	movs	r2, #0
 8007080:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2200      	movs	r2, #0
 8007088:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	795b      	ldrb	r3, [r3, #5]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d15c      	bne.n	800714c <i2c_config+0x1c0>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69da      	ldr	r2, [r3, #28]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070a0:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	79db      	ldrb	r3, [r3, #7]
 80070a6:	2b32      	cmp	r3, #50	; 0x32
 80070a8:	d03f      	beq.n	800712a <i2c_config+0x19e>
 80070aa:	2b32      	cmp	r3, #50	; 0x32
 80070ac:	f300 80b2 	bgt.w	8007214 <i2c_config+0x288>
 80070b0:	2b19      	cmp	r3, #25
 80070b2:	d029      	beq.n	8007108 <i2c_config+0x17c>
 80070b4:	2b19      	cmp	r3, #25
 80070b6:	f300 80ad 	bgt.w	8007214 <i2c_config+0x288>
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d002      	beq.n	80070c4 <i2c_config+0x138>
 80070be:	2b10      	cmp	r3, #16
 80070c0:	d011      	beq.n	80070e6 <i2c_config+0x15a>


				break;
			}default:{

				break;
 80070c2:	e0a7      	b.n	8007214 <i2c_config+0x288>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	69da      	ldr	r2, [r3, #28]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0214 	orr.w	r2, r2, #20
 80070d2:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6a1a      	ldr	r2, [r3, #32]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0205 	orr.w	r2, r2, #5
 80070e2:	621a      	str	r2, [r3, #32]
				break;
 80070e4:	e099      	b.n	800721a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69da      	ldr	r2, [r3, #28]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80070f4:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6a1a      	ldr	r2, [r3, #32]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f042 0211 	orr.w	r2, r2, #17
 8007104:	621a      	str	r2, [r3, #32]
				break;
 8007106:	e088      	b.n	800721a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_25MHz << I2C_CCR_CCR_Pos);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	69da      	ldr	r2, [r3, #28]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8007116:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_25MHz;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6a1a      	ldr	r2, [r3, #32]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0215 	orr.w	r2, r2, #21
 8007126:	621a      	str	r2, [r3, #32]
				break;
 8007128:	e077      	b.n	800721a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	69da      	ldr	r2, [r3, #28]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 8007138:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6a1a      	ldr	r2, [r3, #32]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 8007148:	621a      	str	r2, [r3, #32]
				break;
 800714a:	e066      	b.n	800721a <i2c_config+0x28e>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	69da      	ldr	r2, [r3, #28]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800715a:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	79db      	ldrb	r3, [r3, #7]
 8007160:	2b32      	cmp	r3, #50	; 0x32
 8007162:	d046      	beq.n	80071f2 <i2c_config+0x266>
 8007164:	2b32      	cmp	r3, #50	; 0x32
 8007166:	dc57      	bgt.n	8007218 <i2c_config+0x28c>
 8007168:	2b19      	cmp	r3, #25
 800716a:	d031      	beq.n	80071d0 <i2c_config+0x244>
 800716c:	2b19      	cmp	r3, #25
 800716e:	dc53      	bgt.n	8007218 <i2c_config+0x28c>
 8007170:	2b04      	cmp	r3, #4
 8007172:	d002      	beq.n	800717a <i2c_config+0x1ee>
 8007174:	2b10      	cmp	r3, #16
 8007176:	d011      	beq.n	800719c <i2c_config+0x210>


				break;
			}default:{

				break;
 8007178:	e04e      	b.n	8007218 <i2c_config+0x28c>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69da      	ldr	r2, [r3, #28]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0203 	orr.w	r2, r2, #3
 8007188:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6a1a      	ldr	r2, [r3, #32]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f042 0202 	orr.w	r2, r2, #2
 8007198:	621a      	str	r2, [r3, #32]
				break;
 800719a:	e03e      	b.n	800721a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	69da      	ldr	r2, [r3, #28]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 020d 	orr.w	r2, r2, #13
 80071aa:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6a1a      	ldr	r2, [r3, #32]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0206 	orr.w	r2, r2, #6
 80071ba:	621a      	str	r2, [r3, #32]
				break;
 80071bc:	e02d      	b.n	800721a <i2c_config+0x28e>
 80071be:	bf00      	nop
 80071c0:	40005400 	.word	0x40005400
 80071c4:	40023800 	.word	0x40023800
 80071c8:	40005800 	.word	0x40005800
 80071cc:	40005c00 	.word	0x40005c00
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_25MHz << I2C_CCR_CCR_Pos);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	69da      	ldr	r2, [r3, #28]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0215 	orr.w	r2, r2, #21
 80071de:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_25MHz;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6a1a      	ldr	r2, [r3, #32]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0208 	orr.w	r2, r2, #8
 80071ee:	621a      	str	r2, [r3, #32]
				break;
 80071f0:	e013      	b.n	800721a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69da      	ldr	r2, [r3, #28]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8007200:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6a1a      	ldr	r2, [r3, #32]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f042 0210 	orr.w	r2, r2, #16
 8007210:	621a      	str	r2, [r3, #32]
				break;
 8007212:	e002      	b.n	800721a <i2c_config+0x28e>
				break;
 8007214:	bf00      	nop
 8007216:	e002      	b.n	800721e <i2c_config+0x292>
				break;
 8007218:	bf00      	nop

		}

	}

	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800721a:	e000      	b.n	800721e <i2c_config+0x292>
		__NOP();
 800721c:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1f7      	bne.n	800721c <i2c_config+0x290>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f042 0201 	orr.w	r2, r2, #1
 800723a:	601a      	str	r2, [r3, #0]


}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800725e:	601a      	str	r2, [r3, #0]
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	7a1b      	ldrb	r3, [r3, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d009      	beq.n	8007290 <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800728a:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800728c:	e000      	b.n	8007290 <i2c_startTransaction+0x24>
		__NOP();
 800728e:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1f7      	bne.n	800728e <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072ac:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80072ae:	e000      	b.n	80072b2 <i2c_startTransaction+0x46>
		__NOP();
 80072b0:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0f7      	beq.n	80072b0 <i2c_startTransaction+0x44>
	}
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	7a1b      	ldrb	r3, [r3, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d007      	beq.n	80072ee <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ec:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072fc:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80072fe:	e000      	b.n	8007302 <i2c_reStartTransaction+0x34>
		__NOP();
 8007300:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0f7      	beq.n	8007300 <i2c_reStartTransaction+0x32>
	}
}
 8007310:	bf00      	nop
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007334:	601a      	str	r2, [r3, #0]
}
 8007336:	bf00      	nop
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 8007342:	b480      	push	{r7}
 8007344:	b085      	sub	sp, #20
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
 800734e:	4613      	mov	r3, r2
 8007350:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	005a      	lsls	r2, r3, #1
 800735a:	78bb      	ldrb	r3, [r7, #2]
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8007364:	e000      	b.n	8007368 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8007366:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0f7      	beq.n	8007366 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	73fb      	strb	r3, [r7, #15]

}
 8007386:	bf00      	nop
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	460b      	mov	r3, r1
 800739c:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	78fa      	ldrb	r2, [r7, #3]
 80073a4:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 80073a6:	e000      	b.n	80073aa <i2c_sendMemoryAddress+0x18>
		__NOP();
 80073a8:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d0f7      	beq.n	80073a8 <i2c_sendMemoryAddress+0x16>
	}
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	78fa      	ldrb	r2, [r7, #3]
 80073d8:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80073da:	e000      	b.n	80073de <i2c_sendDataByte+0x18>
		__NOP();
 80073dc:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	f003 0304 	and.w	r3, r3, #4
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0f7      	beq.n	80073dc <i2c_sendDataByte+0x16>
	}
}
 80073ec:	bf00      	nop
 80073ee:	bf00      	nop
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8007402:	e000      	b.n	8007406 <i2c_readDataByte+0xc>
		__NOP();
 8007404:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007410:	2b00      	cmp	r3, #0
 8007412:	d0f7      	beq.n	8007404 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	b2da      	uxtb	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	799b      	ldrb	r3, [r3, #6]
}
 8007424:	4618      	mov	r0, r3
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <__errno>:
 8007430:	4b01      	ldr	r3, [pc, #4]	; (8007438 <__errno+0x8>)
 8007432:	6818      	ldr	r0, [r3, #0]
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	20000010 	.word	0x20000010

0800743c <__libc_init_array>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	4d0d      	ldr	r5, [pc, #52]	; (8007474 <__libc_init_array+0x38>)
 8007440:	4c0d      	ldr	r4, [pc, #52]	; (8007478 <__libc_init_array+0x3c>)
 8007442:	1b64      	subs	r4, r4, r5
 8007444:	10a4      	asrs	r4, r4, #2
 8007446:	2600      	movs	r6, #0
 8007448:	42a6      	cmp	r6, r4
 800744a:	d109      	bne.n	8007460 <__libc_init_array+0x24>
 800744c:	4d0b      	ldr	r5, [pc, #44]	; (800747c <__libc_init_array+0x40>)
 800744e:	4c0c      	ldr	r4, [pc, #48]	; (8007480 <__libc_init_array+0x44>)
 8007450:	f005 fdde 	bl	800d010 <_init>
 8007454:	1b64      	subs	r4, r4, r5
 8007456:	10a4      	asrs	r4, r4, #2
 8007458:	2600      	movs	r6, #0
 800745a:	42a6      	cmp	r6, r4
 800745c:	d105      	bne.n	800746a <__libc_init_array+0x2e>
 800745e:	bd70      	pop	{r4, r5, r6, pc}
 8007460:	f855 3b04 	ldr.w	r3, [r5], #4
 8007464:	4798      	blx	r3
 8007466:	3601      	adds	r6, #1
 8007468:	e7ee      	b.n	8007448 <__libc_init_array+0xc>
 800746a:	f855 3b04 	ldr.w	r3, [r5], #4
 800746e:	4798      	blx	r3
 8007470:	3601      	adds	r6, #1
 8007472:	e7f2      	b.n	800745a <__libc_init_array+0x1e>
 8007474:	0800d8e0 	.word	0x0800d8e0
 8007478:	0800d8e0 	.word	0x0800d8e0
 800747c:	0800d8e0 	.word	0x0800d8e0
 8007480:	0800d8e4 	.word	0x0800d8e4

08007484 <malloc>:
 8007484:	4b02      	ldr	r3, [pc, #8]	; (8007490 <malloc+0xc>)
 8007486:	4601      	mov	r1, r0
 8007488:	6818      	ldr	r0, [r3, #0]
 800748a:	f000 b877 	b.w	800757c <_malloc_r>
 800748e:	bf00      	nop
 8007490:	20000010 	.word	0x20000010

08007494 <memset>:
 8007494:	4402      	add	r2, r0
 8007496:	4603      	mov	r3, r0
 8007498:	4293      	cmp	r3, r2
 800749a:	d100      	bne.n	800749e <memset+0xa>
 800749c:	4770      	bx	lr
 800749e:	f803 1b01 	strb.w	r1, [r3], #1
 80074a2:	e7f9      	b.n	8007498 <memset+0x4>

080074a4 <_free_r>:
 80074a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074a6:	2900      	cmp	r1, #0
 80074a8:	d044      	beq.n	8007534 <_free_r+0x90>
 80074aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074ae:	9001      	str	r0, [sp, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f1a1 0404 	sub.w	r4, r1, #4
 80074b6:	bfb8      	it	lt
 80074b8:	18e4      	addlt	r4, r4, r3
 80074ba:	f001 fc9f 	bl	8008dfc <__malloc_lock>
 80074be:	4a1e      	ldr	r2, [pc, #120]	; (8007538 <_free_r+0x94>)
 80074c0:	9801      	ldr	r0, [sp, #4]
 80074c2:	6813      	ldr	r3, [r2, #0]
 80074c4:	b933      	cbnz	r3, 80074d4 <_free_r+0x30>
 80074c6:	6063      	str	r3, [r4, #4]
 80074c8:	6014      	str	r4, [r2, #0]
 80074ca:	b003      	add	sp, #12
 80074cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074d0:	f001 bc9a 	b.w	8008e08 <__malloc_unlock>
 80074d4:	42a3      	cmp	r3, r4
 80074d6:	d908      	bls.n	80074ea <_free_r+0x46>
 80074d8:	6825      	ldr	r5, [r4, #0]
 80074da:	1961      	adds	r1, r4, r5
 80074dc:	428b      	cmp	r3, r1
 80074de:	bf01      	itttt	eq
 80074e0:	6819      	ldreq	r1, [r3, #0]
 80074e2:	685b      	ldreq	r3, [r3, #4]
 80074e4:	1949      	addeq	r1, r1, r5
 80074e6:	6021      	streq	r1, [r4, #0]
 80074e8:	e7ed      	b.n	80074c6 <_free_r+0x22>
 80074ea:	461a      	mov	r2, r3
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	b10b      	cbz	r3, 80074f4 <_free_r+0x50>
 80074f0:	42a3      	cmp	r3, r4
 80074f2:	d9fa      	bls.n	80074ea <_free_r+0x46>
 80074f4:	6811      	ldr	r1, [r2, #0]
 80074f6:	1855      	adds	r5, r2, r1
 80074f8:	42a5      	cmp	r5, r4
 80074fa:	d10b      	bne.n	8007514 <_free_r+0x70>
 80074fc:	6824      	ldr	r4, [r4, #0]
 80074fe:	4421      	add	r1, r4
 8007500:	1854      	adds	r4, r2, r1
 8007502:	42a3      	cmp	r3, r4
 8007504:	6011      	str	r1, [r2, #0]
 8007506:	d1e0      	bne.n	80074ca <_free_r+0x26>
 8007508:	681c      	ldr	r4, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	6053      	str	r3, [r2, #4]
 800750e:	4421      	add	r1, r4
 8007510:	6011      	str	r1, [r2, #0]
 8007512:	e7da      	b.n	80074ca <_free_r+0x26>
 8007514:	d902      	bls.n	800751c <_free_r+0x78>
 8007516:	230c      	movs	r3, #12
 8007518:	6003      	str	r3, [r0, #0]
 800751a:	e7d6      	b.n	80074ca <_free_r+0x26>
 800751c:	6825      	ldr	r5, [r4, #0]
 800751e:	1961      	adds	r1, r4, r5
 8007520:	428b      	cmp	r3, r1
 8007522:	bf04      	itt	eq
 8007524:	6819      	ldreq	r1, [r3, #0]
 8007526:	685b      	ldreq	r3, [r3, #4]
 8007528:	6063      	str	r3, [r4, #4]
 800752a:	bf04      	itt	eq
 800752c:	1949      	addeq	r1, r1, r5
 800752e:	6021      	streq	r1, [r4, #0]
 8007530:	6054      	str	r4, [r2, #4]
 8007532:	e7ca      	b.n	80074ca <_free_r+0x26>
 8007534:	b003      	add	sp, #12
 8007536:	bd30      	pop	{r4, r5, pc}
 8007538:	20000634 	.word	0x20000634

0800753c <sbrk_aligned>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	4e0e      	ldr	r6, [pc, #56]	; (8007578 <sbrk_aligned+0x3c>)
 8007540:	460c      	mov	r4, r1
 8007542:	6831      	ldr	r1, [r6, #0]
 8007544:	4605      	mov	r5, r0
 8007546:	b911      	cbnz	r1, 800754e <sbrk_aligned+0x12>
 8007548:	f000 fcf6 	bl	8007f38 <_sbrk_r>
 800754c:	6030      	str	r0, [r6, #0]
 800754e:	4621      	mov	r1, r4
 8007550:	4628      	mov	r0, r5
 8007552:	f000 fcf1 	bl	8007f38 <_sbrk_r>
 8007556:	1c43      	adds	r3, r0, #1
 8007558:	d00a      	beq.n	8007570 <sbrk_aligned+0x34>
 800755a:	1cc4      	adds	r4, r0, #3
 800755c:	f024 0403 	bic.w	r4, r4, #3
 8007560:	42a0      	cmp	r0, r4
 8007562:	d007      	beq.n	8007574 <sbrk_aligned+0x38>
 8007564:	1a21      	subs	r1, r4, r0
 8007566:	4628      	mov	r0, r5
 8007568:	f000 fce6 	bl	8007f38 <_sbrk_r>
 800756c:	3001      	adds	r0, #1
 800756e:	d101      	bne.n	8007574 <sbrk_aligned+0x38>
 8007570:	f04f 34ff 	mov.w	r4, #4294967295
 8007574:	4620      	mov	r0, r4
 8007576:	bd70      	pop	{r4, r5, r6, pc}
 8007578:	20000638 	.word	0x20000638

0800757c <_malloc_r>:
 800757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007580:	1ccd      	adds	r5, r1, #3
 8007582:	f025 0503 	bic.w	r5, r5, #3
 8007586:	3508      	adds	r5, #8
 8007588:	2d0c      	cmp	r5, #12
 800758a:	bf38      	it	cc
 800758c:	250c      	movcc	r5, #12
 800758e:	2d00      	cmp	r5, #0
 8007590:	4607      	mov	r7, r0
 8007592:	db01      	blt.n	8007598 <_malloc_r+0x1c>
 8007594:	42a9      	cmp	r1, r5
 8007596:	d905      	bls.n	80075a4 <_malloc_r+0x28>
 8007598:	230c      	movs	r3, #12
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	2600      	movs	r6, #0
 800759e:	4630      	mov	r0, r6
 80075a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a4:	4e2e      	ldr	r6, [pc, #184]	; (8007660 <_malloc_r+0xe4>)
 80075a6:	f001 fc29 	bl	8008dfc <__malloc_lock>
 80075aa:	6833      	ldr	r3, [r6, #0]
 80075ac:	461c      	mov	r4, r3
 80075ae:	bb34      	cbnz	r4, 80075fe <_malloc_r+0x82>
 80075b0:	4629      	mov	r1, r5
 80075b2:	4638      	mov	r0, r7
 80075b4:	f7ff ffc2 	bl	800753c <sbrk_aligned>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	4604      	mov	r4, r0
 80075bc:	d14d      	bne.n	800765a <_malloc_r+0xde>
 80075be:	6834      	ldr	r4, [r6, #0]
 80075c0:	4626      	mov	r6, r4
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	d140      	bne.n	8007648 <_malloc_r+0xcc>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	4631      	mov	r1, r6
 80075ca:	4638      	mov	r0, r7
 80075cc:	eb04 0803 	add.w	r8, r4, r3
 80075d0:	f000 fcb2 	bl	8007f38 <_sbrk_r>
 80075d4:	4580      	cmp	r8, r0
 80075d6:	d13a      	bne.n	800764e <_malloc_r+0xd2>
 80075d8:	6821      	ldr	r1, [r4, #0]
 80075da:	3503      	adds	r5, #3
 80075dc:	1a6d      	subs	r5, r5, r1
 80075de:	f025 0503 	bic.w	r5, r5, #3
 80075e2:	3508      	adds	r5, #8
 80075e4:	2d0c      	cmp	r5, #12
 80075e6:	bf38      	it	cc
 80075e8:	250c      	movcc	r5, #12
 80075ea:	4629      	mov	r1, r5
 80075ec:	4638      	mov	r0, r7
 80075ee:	f7ff ffa5 	bl	800753c <sbrk_aligned>
 80075f2:	3001      	adds	r0, #1
 80075f4:	d02b      	beq.n	800764e <_malloc_r+0xd2>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	442b      	add	r3, r5
 80075fa:	6023      	str	r3, [r4, #0]
 80075fc:	e00e      	b.n	800761c <_malloc_r+0xa0>
 80075fe:	6822      	ldr	r2, [r4, #0]
 8007600:	1b52      	subs	r2, r2, r5
 8007602:	d41e      	bmi.n	8007642 <_malloc_r+0xc6>
 8007604:	2a0b      	cmp	r2, #11
 8007606:	d916      	bls.n	8007636 <_malloc_r+0xba>
 8007608:	1961      	adds	r1, r4, r5
 800760a:	42a3      	cmp	r3, r4
 800760c:	6025      	str	r5, [r4, #0]
 800760e:	bf18      	it	ne
 8007610:	6059      	strne	r1, [r3, #4]
 8007612:	6863      	ldr	r3, [r4, #4]
 8007614:	bf08      	it	eq
 8007616:	6031      	streq	r1, [r6, #0]
 8007618:	5162      	str	r2, [r4, r5]
 800761a:	604b      	str	r3, [r1, #4]
 800761c:	4638      	mov	r0, r7
 800761e:	f104 060b 	add.w	r6, r4, #11
 8007622:	f001 fbf1 	bl	8008e08 <__malloc_unlock>
 8007626:	f026 0607 	bic.w	r6, r6, #7
 800762a:	1d23      	adds	r3, r4, #4
 800762c:	1af2      	subs	r2, r6, r3
 800762e:	d0b6      	beq.n	800759e <_malloc_r+0x22>
 8007630:	1b9b      	subs	r3, r3, r6
 8007632:	50a3      	str	r3, [r4, r2]
 8007634:	e7b3      	b.n	800759e <_malloc_r+0x22>
 8007636:	6862      	ldr	r2, [r4, #4]
 8007638:	42a3      	cmp	r3, r4
 800763a:	bf0c      	ite	eq
 800763c:	6032      	streq	r2, [r6, #0]
 800763e:	605a      	strne	r2, [r3, #4]
 8007640:	e7ec      	b.n	800761c <_malloc_r+0xa0>
 8007642:	4623      	mov	r3, r4
 8007644:	6864      	ldr	r4, [r4, #4]
 8007646:	e7b2      	b.n	80075ae <_malloc_r+0x32>
 8007648:	4634      	mov	r4, r6
 800764a:	6876      	ldr	r6, [r6, #4]
 800764c:	e7b9      	b.n	80075c2 <_malloc_r+0x46>
 800764e:	230c      	movs	r3, #12
 8007650:	603b      	str	r3, [r7, #0]
 8007652:	4638      	mov	r0, r7
 8007654:	f001 fbd8 	bl	8008e08 <__malloc_unlock>
 8007658:	e7a1      	b.n	800759e <_malloc_r+0x22>
 800765a:	6025      	str	r5, [r4, #0]
 800765c:	e7de      	b.n	800761c <_malloc_r+0xa0>
 800765e:	bf00      	nop
 8007660:	20000634 	.word	0x20000634

08007664 <__cvt>:
 8007664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007668:	ec55 4b10 	vmov	r4, r5, d0
 800766c:	2d00      	cmp	r5, #0
 800766e:	460e      	mov	r6, r1
 8007670:	4619      	mov	r1, r3
 8007672:	462b      	mov	r3, r5
 8007674:	bfbb      	ittet	lt
 8007676:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800767a:	461d      	movlt	r5, r3
 800767c:	2300      	movge	r3, #0
 800767e:	232d      	movlt	r3, #45	; 0x2d
 8007680:	700b      	strb	r3, [r1, #0]
 8007682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007684:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007688:	4691      	mov	r9, r2
 800768a:	f023 0820 	bic.w	r8, r3, #32
 800768e:	bfbc      	itt	lt
 8007690:	4622      	movlt	r2, r4
 8007692:	4614      	movlt	r4, r2
 8007694:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007698:	d005      	beq.n	80076a6 <__cvt+0x42>
 800769a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800769e:	d100      	bne.n	80076a2 <__cvt+0x3e>
 80076a0:	3601      	adds	r6, #1
 80076a2:	2102      	movs	r1, #2
 80076a4:	e000      	b.n	80076a8 <__cvt+0x44>
 80076a6:	2103      	movs	r1, #3
 80076a8:	ab03      	add	r3, sp, #12
 80076aa:	9301      	str	r3, [sp, #4]
 80076ac:	ab02      	add	r3, sp, #8
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	ec45 4b10 	vmov	d0, r4, r5
 80076b4:	4653      	mov	r3, sl
 80076b6:	4632      	mov	r2, r6
 80076b8:	f000 fd8e 	bl	80081d8 <_dtoa_r>
 80076bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80076c0:	4607      	mov	r7, r0
 80076c2:	d102      	bne.n	80076ca <__cvt+0x66>
 80076c4:	f019 0f01 	tst.w	r9, #1
 80076c8:	d022      	beq.n	8007710 <__cvt+0xac>
 80076ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076ce:	eb07 0906 	add.w	r9, r7, r6
 80076d2:	d110      	bne.n	80076f6 <__cvt+0x92>
 80076d4:	783b      	ldrb	r3, [r7, #0]
 80076d6:	2b30      	cmp	r3, #48	; 0x30
 80076d8:	d10a      	bne.n	80076f0 <__cvt+0x8c>
 80076da:	2200      	movs	r2, #0
 80076dc:	2300      	movs	r3, #0
 80076de:	4620      	mov	r0, r4
 80076e0:	4629      	mov	r1, r5
 80076e2:	f7f9 fa09 	bl	8000af8 <__aeabi_dcmpeq>
 80076e6:	b918      	cbnz	r0, 80076f0 <__cvt+0x8c>
 80076e8:	f1c6 0601 	rsb	r6, r6, #1
 80076ec:	f8ca 6000 	str.w	r6, [sl]
 80076f0:	f8da 3000 	ldr.w	r3, [sl]
 80076f4:	4499      	add	r9, r3
 80076f6:	2200      	movs	r2, #0
 80076f8:	2300      	movs	r3, #0
 80076fa:	4620      	mov	r0, r4
 80076fc:	4629      	mov	r1, r5
 80076fe:	f7f9 f9fb 	bl	8000af8 <__aeabi_dcmpeq>
 8007702:	b108      	cbz	r0, 8007708 <__cvt+0xa4>
 8007704:	f8cd 900c 	str.w	r9, [sp, #12]
 8007708:	2230      	movs	r2, #48	; 0x30
 800770a:	9b03      	ldr	r3, [sp, #12]
 800770c:	454b      	cmp	r3, r9
 800770e:	d307      	bcc.n	8007720 <__cvt+0xbc>
 8007710:	9b03      	ldr	r3, [sp, #12]
 8007712:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007714:	1bdb      	subs	r3, r3, r7
 8007716:	4638      	mov	r0, r7
 8007718:	6013      	str	r3, [r2, #0]
 800771a:	b004      	add	sp, #16
 800771c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007720:	1c59      	adds	r1, r3, #1
 8007722:	9103      	str	r1, [sp, #12]
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	e7f0      	b.n	800770a <__cvt+0xa6>

08007728 <__exponent>:
 8007728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800772a:	4603      	mov	r3, r0
 800772c:	2900      	cmp	r1, #0
 800772e:	bfb8      	it	lt
 8007730:	4249      	neglt	r1, r1
 8007732:	f803 2b02 	strb.w	r2, [r3], #2
 8007736:	bfb4      	ite	lt
 8007738:	222d      	movlt	r2, #45	; 0x2d
 800773a:	222b      	movge	r2, #43	; 0x2b
 800773c:	2909      	cmp	r1, #9
 800773e:	7042      	strb	r2, [r0, #1]
 8007740:	dd2a      	ble.n	8007798 <__exponent+0x70>
 8007742:	f10d 0407 	add.w	r4, sp, #7
 8007746:	46a4      	mov	ip, r4
 8007748:	270a      	movs	r7, #10
 800774a:	46a6      	mov	lr, r4
 800774c:	460a      	mov	r2, r1
 800774e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007752:	fb07 1516 	mls	r5, r7, r6, r1
 8007756:	3530      	adds	r5, #48	; 0x30
 8007758:	2a63      	cmp	r2, #99	; 0x63
 800775a:	f104 34ff 	add.w	r4, r4, #4294967295
 800775e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007762:	4631      	mov	r1, r6
 8007764:	dcf1      	bgt.n	800774a <__exponent+0x22>
 8007766:	3130      	adds	r1, #48	; 0x30
 8007768:	f1ae 0502 	sub.w	r5, lr, #2
 800776c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007770:	1c44      	adds	r4, r0, #1
 8007772:	4629      	mov	r1, r5
 8007774:	4561      	cmp	r1, ip
 8007776:	d30a      	bcc.n	800778e <__exponent+0x66>
 8007778:	f10d 0209 	add.w	r2, sp, #9
 800777c:	eba2 020e 	sub.w	r2, r2, lr
 8007780:	4565      	cmp	r5, ip
 8007782:	bf88      	it	hi
 8007784:	2200      	movhi	r2, #0
 8007786:	4413      	add	r3, r2
 8007788:	1a18      	subs	r0, r3, r0
 800778a:	b003      	add	sp, #12
 800778c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800778e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007792:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007796:	e7ed      	b.n	8007774 <__exponent+0x4c>
 8007798:	2330      	movs	r3, #48	; 0x30
 800779a:	3130      	adds	r1, #48	; 0x30
 800779c:	7083      	strb	r3, [r0, #2]
 800779e:	70c1      	strb	r1, [r0, #3]
 80077a0:	1d03      	adds	r3, r0, #4
 80077a2:	e7f1      	b.n	8007788 <__exponent+0x60>

080077a4 <_printf_float>:
 80077a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a8:	ed2d 8b02 	vpush	{d8}
 80077ac:	b08d      	sub	sp, #52	; 0x34
 80077ae:	460c      	mov	r4, r1
 80077b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077b4:	4616      	mov	r6, r2
 80077b6:	461f      	mov	r7, r3
 80077b8:	4605      	mov	r5, r0
 80077ba:	f001 fafb 	bl	8008db4 <_localeconv_r>
 80077be:	f8d0 a000 	ldr.w	sl, [r0]
 80077c2:	4650      	mov	r0, sl
 80077c4:	f7f8 fd16 	bl	80001f4 <strlen>
 80077c8:	2300      	movs	r3, #0
 80077ca:	930a      	str	r3, [sp, #40]	; 0x28
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	9305      	str	r3, [sp, #20]
 80077d0:	f8d8 3000 	ldr.w	r3, [r8]
 80077d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80077d8:	3307      	adds	r3, #7
 80077da:	f023 0307 	bic.w	r3, r3, #7
 80077de:	f103 0208 	add.w	r2, r3, #8
 80077e2:	f8c8 2000 	str.w	r2, [r8]
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80077ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80077f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077f6:	9307      	str	r3, [sp, #28]
 80077f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80077fc:	ee08 0a10 	vmov	s16, r0
 8007800:	4b9f      	ldr	r3, [pc, #636]	; (8007a80 <_printf_float+0x2dc>)
 8007802:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007806:	f04f 32ff 	mov.w	r2, #4294967295
 800780a:	f7f9 f9a7 	bl	8000b5c <__aeabi_dcmpun>
 800780e:	bb88      	cbnz	r0, 8007874 <_printf_float+0xd0>
 8007810:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007814:	4b9a      	ldr	r3, [pc, #616]	; (8007a80 <_printf_float+0x2dc>)
 8007816:	f04f 32ff 	mov.w	r2, #4294967295
 800781a:	f7f9 f981 	bl	8000b20 <__aeabi_dcmple>
 800781e:	bb48      	cbnz	r0, 8007874 <_printf_float+0xd0>
 8007820:	2200      	movs	r2, #0
 8007822:	2300      	movs	r3, #0
 8007824:	4640      	mov	r0, r8
 8007826:	4649      	mov	r1, r9
 8007828:	f7f9 f970 	bl	8000b0c <__aeabi_dcmplt>
 800782c:	b110      	cbz	r0, 8007834 <_printf_float+0x90>
 800782e:	232d      	movs	r3, #45	; 0x2d
 8007830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007834:	4b93      	ldr	r3, [pc, #588]	; (8007a84 <_printf_float+0x2e0>)
 8007836:	4894      	ldr	r0, [pc, #592]	; (8007a88 <_printf_float+0x2e4>)
 8007838:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800783c:	bf94      	ite	ls
 800783e:	4698      	movls	r8, r3
 8007840:	4680      	movhi	r8, r0
 8007842:	2303      	movs	r3, #3
 8007844:	6123      	str	r3, [r4, #16]
 8007846:	9b05      	ldr	r3, [sp, #20]
 8007848:	f023 0204 	bic.w	r2, r3, #4
 800784c:	6022      	str	r2, [r4, #0]
 800784e:	f04f 0900 	mov.w	r9, #0
 8007852:	9700      	str	r7, [sp, #0]
 8007854:	4633      	mov	r3, r6
 8007856:	aa0b      	add	r2, sp, #44	; 0x2c
 8007858:	4621      	mov	r1, r4
 800785a:	4628      	mov	r0, r5
 800785c:	f000 f9d8 	bl	8007c10 <_printf_common>
 8007860:	3001      	adds	r0, #1
 8007862:	f040 8090 	bne.w	8007986 <_printf_float+0x1e2>
 8007866:	f04f 30ff 	mov.w	r0, #4294967295
 800786a:	b00d      	add	sp, #52	; 0x34
 800786c:	ecbd 8b02 	vpop	{d8}
 8007870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007874:	4642      	mov	r2, r8
 8007876:	464b      	mov	r3, r9
 8007878:	4640      	mov	r0, r8
 800787a:	4649      	mov	r1, r9
 800787c:	f7f9 f96e 	bl	8000b5c <__aeabi_dcmpun>
 8007880:	b140      	cbz	r0, 8007894 <_printf_float+0xf0>
 8007882:	464b      	mov	r3, r9
 8007884:	2b00      	cmp	r3, #0
 8007886:	bfbc      	itt	lt
 8007888:	232d      	movlt	r3, #45	; 0x2d
 800788a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800788e:	487f      	ldr	r0, [pc, #508]	; (8007a8c <_printf_float+0x2e8>)
 8007890:	4b7f      	ldr	r3, [pc, #508]	; (8007a90 <_printf_float+0x2ec>)
 8007892:	e7d1      	b.n	8007838 <_printf_float+0x94>
 8007894:	6863      	ldr	r3, [r4, #4]
 8007896:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800789a:	9206      	str	r2, [sp, #24]
 800789c:	1c5a      	adds	r2, r3, #1
 800789e:	d13f      	bne.n	8007920 <_printf_float+0x17c>
 80078a0:	2306      	movs	r3, #6
 80078a2:	6063      	str	r3, [r4, #4]
 80078a4:	9b05      	ldr	r3, [sp, #20]
 80078a6:	6861      	ldr	r1, [r4, #4]
 80078a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078ac:	2300      	movs	r3, #0
 80078ae:	9303      	str	r3, [sp, #12]
 80078b0:	ab0a      	add	r3, sp, #40	; 0x28
 80078b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078b6:	ab09      	add	r3, sp, #36	; 0x24
 80078b8:	ec49 8b10 	vmov	d0, r8, r9
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	6022      	str	r2, [r4, #0]
 80078c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078c4:	4628      	mov	r0, r5
 80078c6:	f7ff fecd 	bl	8007664 <__cvt>
 80078ca:	9b06      	ldr	r3, [sp, #24]
 80078cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078ce:	2b47      	cmp	r3, #71	; 0x47
 80078d0:	4680      	mov	r8, r0
 80078d2:	d108      	bne.n	80078e6 <_printf_float+0x142>
 80078d4:	1cc8      	adds	r0, r1, #3
 80078d6:	db02      	blt.n	80078de <_printf_float+0x13a>
 80078d8:	6863      	ldr	r3, [r4, #4]
 80078da:	4299      	cmp	r1, r3
 80078dc:	dd41      	ble.n	8007962 <_printf_float+0x1be>
 80078de:	f1ab 0b02 	sub.w	fp, fp, #2
 80078e2:	fa5f fb8b 	uxtb.w	fp, fp
 80078e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078ea:	d820      	bhi.n	800792e <_printf_float+0x18a>
 80078ec:	3901      	subs	r1, #1
 80078ee:	465a      	mov	r2, fp
 80078f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80078f4:	9109      	str	r1, [sp, #36]	; 0x24
 80078f6:	f7ff ff17 	bl	8007728 <__exponent>
 80078fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078fc:	1813      	adds	r3, r2, r0
 80078fe:	2a01      	cmp	r2, #1
 8007900:	4681      	mov	r9, r0
 8007902:	6123      	str	r3, [r4, #16]
 8007904:	dc02      	bgt.n	800790c <_printf_float+0x168>
 8007906:	6822      	ldr	r2, [r4, #0]
 8007908:	07d2      	lsls	r2, r2, #31
 800790a:	d501      	bpl.n	8007910 <_printf_float+0x16c>
 800790c:	3301      	adds	r3, #1
 800790e:	6123      	str	r3, [r4, #16]
 8007910:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007914:	2b00      	cmp	r3, #0
 8007916:	d09c      	beq.n	8007852 <_printf_float+0xae>
 8007918:	232d      	movs	r3, #45	; 0x2d
 800791a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800791e:	e798      	b.n	8007852 <_printf_float+0xae>
 8007920:	9a06      	ldr	r2, [sp, #24]
 8007922:	2a47      	cmp	r2, #71	; 0x47
 8007924:	d1be      	bne.n	80078a4 <_printf_float+0x100>
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1bc      	bne.n	80078a4 <_printf_float+0x100>
 800792a:	2301      	movs	r3, #1
 800792c:	e7b9      	b.n	80078a2 <_printf_float+0xfe>
 800792e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007932:	d118      	bne.n	8007966 <_printf_float+0x1c2>
 8007934:	2900      	cmp	r1, #0
 8007936:	6863      	ldr	r3, [r4, #4]
 8007938:	dd0b      	ble.n	8007952 <_printf_float+0x1ae>
 800793a:	6121      	str	r1, [r4, #16]
 800793c:	b913      	cbnz	r3, 8007944 <_printf_float+0x1a0>
 800793e:	6822      	ldr	r2, [r4, #0]
 8007940:	07d0      	lsls	r0, r2, #31
 8007942:	d502      	bpl.n	800794a <_printf_float+0x1a6>
 8007944:	3301      	adds	r3, #1
 8007946:	440b      	add	r3, r1
 8007948:	6123      	str	r3, [r4, #16]
 800794a:	65a1      	str	r1, [r4, #88]	; 0x58
 800794c:	f04f 0900 	mov.w	r9, #0
 8007950:	e7de      	b.n	8007910 <_printf_float+0x16c>
 8007952:	b913      	cbnz	r3, 800795a <_printf_float+0x1b6>
 8007954:	6822      	ldr	r2, [r4, #0]
 8007956:	07d2      	lsls	r2, r2, #31
 8007958:	d501      	bpl.n	800795e <_printf_float+0x1ba>
 800795a:	3302      	adds	r3, #2
 800795c:	e7f4      	b.n	8007948 <_printf_float+0x1a4>
 800795e:	2301      	movs	r3, #1
 8007960:	e7f2      	b.n	8007948 <_printf_float+0x1a4>
 8007962:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007968:	4299      	cmp	r1, r3
 800796a:	db05      	blt.n	8007978 <_printf_float+0x1d4>
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	6121      	str	r1, [r4, #16]
 8007970:	07d8      	lsls	r0, r3, #31
 8007972:	d5ea      	bpl.n	800794a <_printf_float+0x1a6>
 8007974:	1c4b      	adds	r3, r1, #1
 8007976:	e7e7      	b.n	8007948 <_printf_float+0x1a4>
 8007978:	2900      	cmp	r1, #0
 800797a:	bfd4      	ite	le
 800797c:	f1c1 0202 	rsble	r2, r1, #2
 8007980:	2201      	movgt	r2, #1
 8007982:	4413      	add	r3, r2
 8007984:	e7e0      	b.n	8007948 <_printf_float+0x1a4>
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	055a      	lsls	r2, r3, #21
 800798a:	d407      	bmi.n	800799c <_printf_float+0x1f8>
 800798c:	6923      	ldr	r3, [r4, #16]
 800798e:	4642      	mov	r2, r8
 8007990:	4631      	mov	r1, r6
 8007992:	4628      	mov	r0, r5
 8007994:	47b8      	blx	r7
 8007996:	3001      	adds	r0, #1
 8007998:	d12c      	bne.n	80079f4 <_printf_float+0x250>
 800799a:	e764      	b.n	8007866 <_printf_float+0xc2>
 800799c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079a0:	f240 80e0 	bls.w	8007b64 <_printf_float+0x3c0>
 80079a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079a8:	2200      	movs	r2, #0
 80079aa:	2300      	movs	r3, #0
 80079ac:	f7f9 f8a4 	bl	8000af8 <__aeabi_dcmpeq>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d034      	beq.n	8007a1e <_printf_float+0x27a>
 80079b4:	4a37      	ldr	r2, [pc, #220]	; (8007a94 <_printf_float+0x2f0>)
 80079b6:	2301      	movs	r3, #1
 80079b8:	4631      	mov	r1, r6
 80079ba:	4628      	mov	r0, r5
 80079bc:	47b8      	blx	r7
 80079be:	3001      	adds	r0, #1
 80079c0:	f43f af51 	beq.w	8007866 <_printf_float+0xc2>
 80079c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079c8:	429a      	cmp	r2, r3
 80079ca:	db02      	blt.n	80079d2 <_printf_float+0x22e>
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	07d8      	lsls	r0, r3, #31
 80079d0:	d510      	bpl.n	80079f4 <_printf_float+0x250>
 80079d2:	ee18 3a10 	vmov	r3, s16
 80079d6:	4652      	mov	r2, sl
 80079d8:	4631      	mov	r1, r6
 80079da:	4628      	mov	r0, r5
 80079dc:	47b8      	blx	r7
 80079de:	3001      	adds	r0, #1
 80079e0:	f43f af41 	beq.w	8007866 <_printf_float+0xc2>
 80079e4:	f04f 0800 	mov.w	r8, #0
 80079e8:	f104 091a 	add.w	r9, r4, #26
 80079ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ee:	3b01      	subs	r3, #1
 80079f0:	4543      	cmp	r3, r8
 80079f2:	dc09      	bgt.n	8007a08 <_printf_float+0x264>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	079b      	lsls	r3, r3, #30
 80079f8:	f100 8105 	bmi.w	8007c06 <_printf_float+0x462>
 80079fc:	68e0      	ldr	r0, [r4, #12]
 80079fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a00:	4298      	cmp	r0, r3
 8007a02:	bfb8      	it	lt
 8007a04:	4618      	movlt	r0, r3
 8007a06:	e730      	b.n	800786a <_printf_float+0xc6>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	464a      	mov	r2, r9
 8007a0c:	4631      	mov	r1, r6
 8007a0e:	4628      	mov	r0, r5
 8007a10:	47b8      	blx	r7
 8007a12:	3001      	adds	r0, #1
 8007a14:	f43f af27 	beq.w	8007866 <_printf_float+0xc2>
 8007a18:	f108 0801 	add.w	r8, r8, #1
 8007a1c:	e7e6      	b.n	80079ec <_printf_float+0x248>
 8007a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	dc39      	bgt.n	8007a98 <_printf_float+0x2f4>
 8007a24:	4a1b      	ldr	r2, [pc, #108]	; (8007a94 <_printf_float+0x2f0>)
 8007a26:	2301      	movs	r3, #1
 8007a28:	4631      	mov	r1, r6
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	47b8      	blx	r7
 8007a2e:	3001      	adds	r0, #1
 8007a30:	f43f af19 	beq.w	8007866 <_printf_float+0xc2>
 8007a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	d102      	bne.n	8007a42 <_printf_float+0x29e>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	07d9      	lsls	r1, r3, #31
 8007a40:	d5d8      	bpl.n	80079f4 <_printf_float+0x250>
 8007a42:	ee18 3a10 	vmov	r3, s16
 8007a46:	4652      	mov	r2, sl
 8007a48:	4631      	mov	r1, r6
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	47b8      	blx	r7
 8007a4e:	3001      	adds	r0, #1
 8007a50:	f43f af09 	beq.w	8007866 <_printf_float+0xc2>
 8007a54:	f04f 0900 	mov.w	r9, #0
 8007a58:	f104 0a1a 	add.w	sl, r4, #26
 8007a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a5e:	425b      	negs	r3, r3
 8007a60:	454b      	cmp	r3, r9
 8007a62:	dc01      	bgt.n	8007a68 <_printf_float+0x2c4>
 8007a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a66:	e792      	b.n	800798e <_printf_float+0x1ea>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	4652      	mov	r2, sl
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	4628      	mov	r0, r5
 8007a70:	47b8      	blx	r7
 8007a72:	3001      	adds	r0, #1
 8007a74:	f43f aef7 	beq.w	8007866 <_printf_float+0xc2>
 8007a78:	f109 0901 	add.w	r9, r9, #1
 8007a7c:	e7ee      	b.n	8007a5c <_printf_float+0x2b8>
 8007a7e:	bf00      	nop
 8007a80:	7fefffff 	.word	0x7fefffff
 8007a84:	0800d270 	.word	0x0800d270
 8007a88:	0800d274 	.word	0x0800d274
 8007a8c:	0800d27c 	.word	0x0800d27c
 8007a90:	0800d278 	.word	0x0800d278
 8007a94:	0800d4a1 	.word	0x0800d4a1
 8007a98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	bfa8      	it	ge
 8007aa0:	461a      	movge	r2, r3
 8007aa2:	2a00      	cmp	r2, #0
 8007aa4:	4691      	mov	r9, r2
 8007aa6:	dc37      	bgt.n	8007b18 <_printf_float+0x374>
 8007aa8:	f04f 0b00 	mov.w	fp, #0
 8007aac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ab0:	f104 021a 	add.w	r2, r4, #26
 8007ab4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ab6:	9305      	str	r3, [sp, #20]
 8007ab8:	eba3 0309 	sub.w	r3, r3, r9
 8007abc:	455b      	cmp	r3, fp
 8007abe:	dc33      	bgt.n	8007b28 <_printf_float+0x384>
 8007ac0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	db3b      	blt.n	8007b40 <_printf_float+0x39c>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	07da      	lsls	r2, r3, #31
 8007acc:	d438      	bmi.n	8007b40 <_printf_float+0x39c>
 8007ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad0:	9a05      	ldr	r2, [sp, #20]
 8007ad2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ad4:	1a9a      	subs	r2, r3, r2
 8007ad6:	eba3 0901 	sub.w	r9, r3, r1
 8007ada:	4591      	cmp	r9, r2
 8007adc:	bfa8      	it	ge
 8007ade:	4691      	movge	r9, r2
 8007ae0:	f1b9 0f00 	cmp.w	r9, #0
 8007ae4:	dc35      	bgt.n	8007b52 <_printf_float+0x3ae>
 8007ae6:	f04f 0800 	mov.w	r8, #0
 8007aea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007aee:	f104 0a1a 	add.w	sl, r4, #26
 8007af2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007af6:	1a9b      	subs	r3, r3, r2
 8007af8:	eba3 0309 	sub.w	r3, r3, r9
 8007afc:	4543      	cmp	r3, r8
 8007afe:	f77f af79 	ble.w	80079f4 <_printf_float+0x250>
 8007b02:	2301      	movs	r3, #1
 8007b04:	4652      	mov	r2, sl
 8007b06:	4631      	mov	r1, r6
 8007b08:	4628      	mov	r0, r5
 8007b0a:	47b8      	blx	r7
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	f43f aeaa 	beq.w	8007866 <_printf_float+0xc2>
 8007b12:	f108 0801 	add.w	r8, r8, #1
 8007b16:	e7ec      	b.n	8007af2 <_printf_float+0x34e>
 8007b18:	4613      	mov	r3, r2
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4642      	mov	r2, r8
 8007b1e:	4628      	mov	r0, r5
 8007b20:	47b8      	blx	r7
 8007b22:	3001      	adds	r0, #1
 8007b24:	d1c0      	bne.n	8007aa8 <_printf_float+0x304>
 8007b26:	e69e      	b.n	8007866 <_printf_float+0xc2>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	9205      	str	r2, [sp, #20]
 8007b30:	47b8      	blx	r7
 8007b32:	3001      	adds	r0, #1
 8007b34:	f43f ae97 	beq.w	8007866 <_printf_float+0xc2>
 8007b38:	9a05      	ldr	r2, [sp, #20]
 8007b3a:	f10b 0b01 	add.w	fp, fp, #1
 8007b3e:	e7b9      	b.n	8007ab4 <_printf_float+0x310>
 8007b40:	ee18 3a10 	vmov	r3, s16
 8007b44:	4652      	mov	r2, sl
 8007b46:	4631      	mov	r1, r6
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b8      	blx	r7
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	d1be      	bne.n	8007ace <_printf_float+0x32a>
 8007b50:	e689      	b.n	8007866 <_printf_float+0xc2>
 8007b52:	9a05      	ldr	r2, [sp, #20]
 8007b54:	464b      	mov	r3, r9
 8007b56:	4442      	add	r2, r8
 8007b58:	4631      	mov	r1, r6
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	47b8      	blx	r7
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d1c1      	bne.n	8007ae6 <_printf_float+0x342>
 8007b62:	e680      	b.n	8007866 <_printf_float+0xc2>
 8007b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b66:	2a01      	cmp	r2, #1
 8007b68:	dc01      	bgt.n	8007b6e <_printf_float+0x3ca>
 8007b6a:	07db      	lsls	r3, r3, #31
 8007b6c:	d538      	bpl.n	8007be0 <_printf_float+0x43c>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4642      	mov	r2, r8
 8007b72:	4631      	mov	r1, r6
 8007b74:	4628      	mov	r0, r5
 8007b76:	47b8      	blx	r7
 8007b78:	3001      	adds	r0, #1
 8007b7a:	f43f ae74 	beq.w	8007866 <_printf_float+0xc2>
 8007b7e:	ee18 3a10 	vmov	r3, s16
 8007b82:	4652      	mov	r2, sl
 8007b84:	4631      	mov	r1, r6
 8007b86:	4628      	mov	r0, r5
 8007b88:	47b8      	blx	r7
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	f43f ae6b 	beq.w	8007866 <_printf_float+0xc2>
 8007b90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b94:	2200      	movs	r2, #0
 8007b96:	2300      	movs	r3, #0
 8007b98:	f7f8 ffae 	bl	8000af8 <__aeabi_dcmpeq>
 8007b9c:	b9d8      	cbnz	r0, 8007bd6 <_printf_float+0x432>
 8007b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba0:	f108 0201 	add.w	r2, r8, #1
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	4628      	mov	r0, r5
 8007baa:	47b8      	blx	r7
 8007bac:	3001      	adds	r0, #1
 8007bae:	d10e      	bne.n	8007bce <_printf_float+0x42a>
 8007bb0:	e659      	b.n	8007866 <_printf_float+0xc2>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	4652      	mov	r2, sl
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	4628      	mov	r0, r5
 8007bba:	47b8      	blx	r7
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	f43f ae52 	beq.w	8007866 <_printf_float+0xc2>
 8007bc2:	f108 0801 	add.w	r8, r8, #1
 8007bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	4543      	cmp	r3, r8
 8007bcc:	dcf1      	bgt.n	8007bb2 <_printf_float+0x40e>
 8007bce:	464b      	mov	r3, r9
 8007bd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007bd4:	e6dc      	b.n	8007990 <_printf_float+0x1ec>
 8007bd6:	f04f 0800 	mov.w	r8, #0
 8007bda:	f104 0a1a 	add.w	sl, r4, #26
 8007bde:	e7f2      	b.n	8007bc6 <_printf_float+0x422>
 8007be0:	2301      	movs	r3, #1
 8007be2:	4642      	mov	r2, r8
 8007be4:	e7df      	b.n	8007ba6 <_printf_float+0x402>
 8007be6:	2301      	movs	r3, #1
 8007be8:	464a      	mov	r2, r9
 8007bea:	4631      	mov	r1, r6
 8007bec:	4628      	mov	r0, r5
 8007bee:	47b8      	blx	r7
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	f43f ae38 	beq.w	8007866 <_printf_float+0xc2>
 8007bf6:	f108 0801 	add.w	r8, r8, #1
 8007bfa:	68e3      	ldr	r3, [r4, #12]
 8007bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bfe:	1a5b      	subs	r3, r3, r1
 8007c00:	4543      	cmp	r3, r8
 8007c02:	dcf0      	bgt.n	8007be6 <_printf_float+0x442>
 8007c04:	e6fa      	b.n	80079fc <_printf_float+0x258>
 8007c06:	f04f 0800 	mov.w	r8, #0
 8007c0a:	f104 0919 	add.w	r9, r4, #25
 8007c0e:	e7f4      	b.n	8007bfa <_printf_float+0x456>

08007c10 <_printf_common>:
 8007c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c14:	4616      	mov	r6, r2
 8007c16:	4699      	mov	r9, r3
 8007c18:	688a      	ldr	r2, [r1, #8]
 8007c1a:	690b      	ldr	r3, [r1, #16]
 8007c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c20:	4293      	cmp	r3, r2
 8007c22:	bfb8      	it	lt
 8007c24:	4613      	movlt	r3, r2
 8007c26:	6033      	str	r3, [r6, #0]
 8007c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c2c:	4607      	mov	r7, r0
 8007c2e:	460c      	mov	r4, r1
 8007c30:	b10a      	cbz	r2, 8007c36 <_printf_common+0x26>
 8007c32:	3301      	adds	r3, #1
 8007c34:	6033      	str	r3, [r6, #0]
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	0699      	lsls	r1, r3, #26
 8007c3a:	bf42      	ittt	mi
 8007c3c:	6833      	ldrmi	r3, [r6, #0]
 8007c3e:	3302      	addmi	r3, #2
 8007c40:	6033      	strmi	r3, [r6, #0]
 8007c42:	6825      	ldr	r5, [r4, #0]
 8007c44:	f015 0506 	ands.w	r5, r5, #6
 8007c48:	d106      	bne.n	8007c58 <_printf_common+0x48>
 8007c4a:	f104 0a19 	add.w	sl, r4, #25
 8007c4e:	68e3      	ldr	r3, [r4, #12]
 8007c50:	6832      	ldr	r2, [r6, #0]
 8007c52:	1a9b      	subs	r3, r3, r2
 8007c54:	42ab      	cmp	r3, r5
 8007c56:	dc26      	bgt.n	8007ca6 <_printf_common+0x96>
 8007c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c5c:	1e13      	subs	r3, r2, #0
 8007c5e:	6822      	ldr	r2, [r4, #0]
 8007c60:	bf18      	it	ne
 8007c62:	2301      	movne	r3, #1
 8007c64:	0692      	lsls	r2, r2, #26
 8007c66:	d42b      	bmi.n	8007cc0 <_printf_common+0xb0>
 8007c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	4638      	mov	r0, r7
 8007c70:	47c0      	blx	r8
 8007c72:	3001      	adds	r0, #1
 8007c74:	d01e      	beq.n	8007cb4 <_printf_common+0xa4>
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	68e5      	ldr	r5, [r4, #12]
 8007c7a:	6832      	ldr	r2, [r6, #0]
 8007c7c:	f003 0306 	and.w	r3, r3, #6
 8007c80:	2b04      	cmp	r3, #4
 8007c82:	bf08      	it	eq
 8007c84:	1aad      	subeq	r5, r5, r2
 8007c86:	68a3      	ldr	r3, [r4, #8]
 8007c88:	6922      	ldr	r2, [r4, #16]
 8007c8a:	bf0c      	ite	eq
 8007c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c90:	2500      	movne	r5, #0
 8007c92:	4293      	cmp	r3, r2
 8007c94:	bfc4      	itt	gt
 8007c96:	1a9b      	subgt	r3, r3, r2
 8007c98:	18ed      	addgt	r5, r5, r3
 8007c9a:	2600      	movs	r6, #0
 8007c9c:	341a      	adds	r4, #26
 8007c9e:	42b5      	cmp	r5, r6
 8007ca0:	d11a      	bne.n	8007cd8 <_printf_common+0xc8>
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	e008      	b.n	8007cb8 <_printf_common+0xa8>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	4652      	mov	r2, sl
 8007caa:	4649      	mov	r1, r9
 8007cac:	4638      	mov	r0, r7
 8007cae:	47c0      	blx	r8
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	d103      	bne.n	8007cbc <_printf_common+0xac>
 8007cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cbc:	3501      	adds	r5, #1
 8007cbe:	e7c6      	b.n	8007c4e <_printf_common+0x3e>
 8007cc0:	18e1      	adds	r1, r4, r3
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	2030      	movs	r0, #48	; 0x30
 8007cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cca:	4422      	add	r2, r4
 8007ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cd4:	3302      	adds	r3, #2
 8007cd6:	e7c7      	b.n	8007c68 <_printf_common+0x58>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	4622      	mov	r2, r4
 8007cdc:	4649      	mov	r1, r9
 8007cde:	4638      	mov	r0, r7
 8007ce0:	47c0      	blx	r8
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	d0e6      	beq.n	8007cb4 <_printf_common+0xa4>
 8007ce6:	3601      	adds	r6, #1
 8007ce8:	e7d9      	b.n	8007c9e <_printf_common+0x8e>
	...

08007cec <_printf_i>:
 8007cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf0:	7e0f      	ldrb	r7, [r1, #24]
 8007cf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cf4:	2f78      	cmp	r7, #120	; 0x78
 8007cf6:	4691      	mov	r9, r2
 8007cf8:	4680      	mov	r8, r0
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	469a      	mov	sl, r3
 8007cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d02:	d807      	bhi.n	8007d14 <_printf_i+0x28>
 8007d04:	2f62      	cmp	r7, #98	; 0x62
 8007d06:	d80a      	bhi.n	8007d1e <_printf_i+0x32>
 8007d08:	2f00      	cmp	r7, #0
 8007d0a:	f000 80d8 	beq.w	8007ebe <_printf_i+0x1d2>
 8007d0e:	2f58      	cmp	r7, #88	; 0x58
 8007d10:	f000 80a3 	beq.w	8007e5a <_printf_i+0x16e>
 8007d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d1c:	e03a      	b.n	8007d94 <_printf_i+0xa8>
 8007d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d22:	2b15      	cmp	r3, #21
 8007d24:	d8f6      	bhi.n	8007d14 <_printf_i+0x28>
 8007d26:	a101      	add	r1, pc, #4	; (adr r1, 8007d2c <_printf_i+0x40>)
 8007d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d2c:	08007d85 	.word	0x08007d85
 8007d30:	08007d99 	.word	0x08007d99
 8007d34:	08007d15 	.word	0x08007d15
 8007d38:	08007d15 	.word	0x08007d15
 8007d3c:	08007d15 	.word	0x08007d15
 8007d40:	08007d15 	.word	0x08007d15
 8007d44:	08007d99 	.word	0x08007d99
 8007d48:	08007d15 	.word	0x08007d15
 8007d4c:	08007d15 	.word	0x08007d15
 8007d50:	08007d15 	.word	0x08007d15
 8007d54:	08007d15 	.word	0x08007d15
 8007d58:	08007ea5 	.word	0x08007ea5
 8007d5c:	08007dc9 	.word	0x08007dc9
 8007d60:	08007e87 	.word	0x08007e87
 8007d64:	08007d15 	.word	0x08007d15
 8007d68:	08007d15 	.word	0x08007d15
 8007d6c:	08007ec7 	.word	0x08007ec7
 8007d70:	08007d15 	.word	0x08007d15
 8007d74:	08007dc9 	.word	0x08007dc9
 8007d78:	08007d15 	.word	0x08007d15
 8007d7c:	08007d15 	.word	0x08007d15
 8007d80:	08007e8f 	.word	0x08007e8f
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	1d1a      	adds	r2, r3, #4
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	602a      	str	r2, [r5, #0]
 8007d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d94:	2301      	movs	r3, #1
 8007d96:	e0a3      	b.n	8007ee0 <_printf_i+0x1f4>
 8007d98:	6820      	ldr	r0, [r4, #0]
 8007d9a:	6829      	ldr	r1, [r5, #0]
 8007d9c:	0606      	lsls	r6, r0, #24
 8007d9e:	f101 0304 	add.w	r3, r1, #4
 8007da2:	d50a      	bpl.n	8007dba <_printf_i+0xce>
 8007da4:	680e      	ldr	r6, [r1, #0]
 8007da6:	602b      	str	r3, [r5, #0]
 8007da8:	2e00      	cmp	r6, #0
 8007daa:	da03      	bge.n	8007db4 <_printf_i+0xc8>
 8007dac:	232d      	movs	r3, #45	; 0x2d
 8007dae:	4276      	negs	r6, r6
 8007db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007db4:	485e      	ldr	r0, [pc, #376]	; (8007f30 <_printf_i+0x244>)
 8007db6:	230a      	movs	r3, #10
 8007db8:	e019      	b.n	8007dee <_printf_i+0x102>
 8007dba:	680e      	ldr	r6, [r1, #0]
 8007dbc:	602b      	str	r3, [r5, #0]
 8007dbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dc2:	bf18      	it	ne
 8007dc4:	b236      	sxthne	r6, r6
 8007dc6:	e7ef      	b.n	8007da8 <_printf_i+0xbc>
 8007dc8:	682b      	ldr	r3, [r5, #0]
 8007dca:	6820      	ldr	r0, [r4, #0]
 8007dcc:	1d19      	adds	r1, r3, #4
 8007dce:	6029      	str	r1, [r5, #0]
 8007dd0:	0601      	lsls	r1, r0, #24
 8007dd2:	d501      	bpl.n	8007dd8 <_printf_i+0xec>
 8007dd4:	681e      	ldr	r6, [r3, #0]
 8007dd6:	e002      	b.n	8007dde <_printf_i+0xf2>
 8007dd8:	0646      	lsls	r6, r0, #25
 8007dda:	d5fb      	bpl.n	8007dd4 <_printf_i+0xe8>
 8007ddc:	881e      	ldrh	r6, [r3, #0]
 8007dde:	4854      	ldr	r0, [pc, #336]	; (8007f30 <_printf_i+0x244>)
 8007de0:	2f6f      	cmp	r7, #111	; 0x6f
 8007de2:	bf0c      	ite	eq
 8007de4:	2308      	moveq	r3, #8
 8007de6:	230a      	movne	r3, #10
 8007de8:	2100      	movs	r1, #0
 8007dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dee:	6865      	ldr	r5, [r4, #4]
 8007df0:	60a5      	str	r5, [r4, #8]
 8007df2:	2d00      	cmp	r5, #0
 8007df4:	bfa2      	ittt	ge
 8007df6:	6821      	ldrge	r1, [r4, #0]
 8007df8:	f021 0104 	bicge.w	r1, r1, #4
 8007dfc:	6021      	strge	r1, [r4, #0]
 8007dfe:	b90e      	cbnz	r6, 8007e04 <_printf_i+0x118>
 8007e00:	2d00      	cmp	r5, #0
 8007e02:	d04d      	beq.n	8007ea0 <_printf_i+0x1b4>
 8007e04:	4615      	mov	r5, r2
 8007e06:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e0a:	fb03 6711 	mls	r7, r3, r1, r6
 8007e0e:	5dc7      	ldrb	r7, [r0, r7]
 8007e10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e14:	4637      	mov	r7, r6
 8007e16:	42bb      	cmp	r3, r7
 8007e18:	460e      	mov	r6, r1
 8007e1a:	d9f4      	bls.n	8007e06 <_printf_i+0x11a>
 8007e1c:	2b08      	cmp	r3, #8
 8007e1e:	d10b      	bne.n	8007e38 <_printf_i+0x14c>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	07de      	lsls	r6, r3, #31
 8007e24:	d508      	bpl.n	8007e38 <_printf_i+0x14c>
 8007e26:	6923      	ldr	r3, [r4, #16]
 8007e28:	6861      	ldr	r1, [r4, #4]
 8007e2a:	4299      	cmp	r1, r3
 8007e2c:	bfde      	ittt	le
 8007e2e:	2330      	movle	r3, #48	; 0x30
 8007e30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e38:	1b52      	subs	r2, r2, r5
 8007e3a:	6122      	str	r2, [r4, #16]
 8007e3c:	f8cd a000 	str.w	sl, [sp]
 8007e40:	464b      	mov	r3, r9
 8007e42:	aa03      	add	r2, sp, #12
 8007e44:	4621      	mov	r1, r4
 8007e46:	4640      	mov	r0, r8
 8007e48:	f7ff fee2 	bl	8007c10 <_printf_common>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d14c      	bne.n	8007eea <_printf_i+0x1fe>
 8007e50:	f04f 30ff 	mov.w	r0, #4294967295
 8007e54:	b004      	add	sp, #16
 8007e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5a:	4835      	ldr	r0, [pc, #212]	; (8007f30 <_printf_i+0x244>)
 8007e5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e60:	6829      	ldr	r1, [r5, #0]
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e68:	6029      	str	r1, [r5, #0]
 8007e6a:	061d      	lsls	r5, r3, #24
 8007e6c:	d514      	bpl.n	8007e98 <_printf_i+0x1ac>
 8007e6e:	07df      	lsls	r7, r3, #31
 8007e70:	bf44      	itt	mi
 8007e72:	f043 0320 	orrmi.w	r3, r3, #32
 8007e76:	6023      	strmi	r3, [r4, #0]
 8007e78:	b91e      	cbnz	r6, 8007e82 <_printf_i+0x196>
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	f023 0320 	bic.w	r3, r3, #32
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	2310      	movs	r3, #16
 8007e84:	e7b0      	b.n	8007de8 <_printf_i+0xfc>
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	f043 0320 	orr.w	r3, r3, #32
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	2378      	movs	r3, #120	; 0x78
 8007e90:	4828      	ldr	r0, [pc, #160]	; (8007f34 <_printf_i+0x248>)
 8007e92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e96:	e7e3      	b.n	8007e60 <_printf_i+0x174>
 8007e98:	0659      	lsls	r1, r3, #25
 8007e9a:	bf48      	it	mi
 8007e9c:	b2b6      	uxthmi	r6, r6
 8007e9e:	e7e6      	b.n	8007e6e <_printf_i+0x182>
 8007ea0:	4615      	mov	r5, r2
 8007ea2:	e7bb      	b.n	8007e1c <_printf_i+0x130>
 8007ea4:	682b      	ldr	r3, [r5, #0]
 8007ea6:	6826      	ldr	r6, [r4, #0]
 8007ea8:	6961      	ldr	r1, [r4, #20]
 8007eaa:	1d18      	adds	r0, r3, #4
 8007eac:	6028      	str	r0, [r5, #0]
 8007eae:	0635      	lsls	r5, r6, #24
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	d501      	bpl.n	8007eb8 <_printf_i+0x1cc>
 8007eb4:	6019      	str	r1, [r3, #0]
 8007eb6:	e002      	b.n	8007ebe <_printf_i+0x1d2>
 8007eb8:	0670      	lsls	r0, r6, #25
 8007eba:	d5fb      	bpl.n	8007eb4 <_printf_i+0x1c8>
 8007ebc:	8019      	strh	r1, [r3, #0]
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	6123      	str	r3, [r4, #16]
 8007ec2:	4615      	mov	r5, r2
 8007ec4:	e7ba      	b.n	8007e3c <_printf_i+0x150>
 8007ec6:	682b      	ldr	r3, [r5, #0]
 8007ec8:	1d1a      	adds	r2, r3, #4
 8007eca:	602a      	str	r2, [r5, #0]
 8007ecc:	681d      	ldr	r5, [r3, #0]
 8007ece:	6862      	ldr	r2, [r4, #4]
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f7f8 f99c 	bl	8000210 <memchr>
 8007ed8:	b108      	cbz	r0, 8007ede <_printf_i+0x1f2>
 8007eda:	1b40      	subs	r0, r0, r5
 8007edc:	6060      	str	r0, [r4, #4]
 8007ede:	6863      	ldr	r3, [r4, #4]
 8007ee0:	6123      	str	r3, [r4, #16]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ee8:	e7a8      	b.n	8007e3c <_printf_i+0x150>
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	462a      	mov	r2, r5
 8007eee:	4649      	mov	r1, r9
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	47d0      	blx	sl
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d0ab      	beq.n	8007e50 <_printf_i+0x164>
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	079b      	lsls	r3, r3, #30
 8007efc:	d413      	bmi.n	8007f26 <_printf_i+0x23a>
 8007efe:	68e0      	ldr	r0, [r4, #12]
 8007f00:	9b03      	ldr	r3, [sp, #12]
 8007f02:	4298      	cmp	r0, r3
 8007f04:	bfb8      	it	lt
 8007f06:	4618      	movlt	r0, r3
 8007f08:	e7a4      	b.n	8007e54 <_printf_i+0x168>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	4632      	mov	r2, r6
 8007f0e:	4649      	mov	r1, r9
 8007f10:	4640      	mov	r0, r8
 8007f12:	47d0      	blx	sl
 8007f14:	3001      	adds	r0, #1
 8007f16:	d09b      	beq.n	8007e50 <_printf_i+0x164>
 8007f18:	3501      	adds	r5, #1
 8007f1a:	68e3      	ldr	r3, [r4, #12]
 8007f1c:	9903      	ldr	r1, [sp, #12]
 8007f1e:	1a5b      	subs	r3, r3, r1
 8007f20:	42ab      	cmp	r3, r5
 8007f22:	dcf2      	bgt.n	8007f0a <_printf_i+0x21e>
 8007f24:	e7eb      	b.n	8007efe <_printf_i+0x212>
 8007f26:	2500      	movs	r5, #0
 8007f28:	f104 0619 	add.w	r6, r4, #25
 8007f2c:	e7f5      	b.n	8007f1a <_printf_i+0x22e>
 8007f2e:	bf00      	nop
 8007f30:	0800d280 	.word	0x0800d280
 8007f34:	0800d291 	.word	0x0800d291

08007f38 <_sbrk_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4d06      	ldr	r5, [pc, #24]	; (8007f54 <_sbrk_r+0x1c>)
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4604      	mov	r4, r0
 8007f40:	4608      	mov	r0, r1
 8007f42:	602b      	str	r3, [r5, #0]
 8007f44:	f005 f856 	bl	800cff4 <_sbrk>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <_sbrk_r+0x1a>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	b103      	cbz	r3, 8007f52 <_sbrk_r+0x1a>
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	2000063c 	.word	0x2000063c

08007f58 <siprintf>:
 8007f58:	b40e      	push	{r1, r2, r3}
 8007f5a:	b500      	push	{lr}
 8007f5c:	b09c      	sub	sp, #112	; 0x70
 8007f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8007f60:	9002      	str	r0, [sp, #8]
 8007f62:	9006      	str	r0, [sp, #24]
 8007f64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f68:	4809      	ldr	r0, [pc, #36]	; (8007f90 <siprintf+0x38>)
 8007f6a:	9107      	str	r1, [sp, #28]
 8007f6c:	9104      	str	r1, [sp, #16]
 8007f6e:	4909      	ldr	r1, [pc, #36]	; (8007f94 <siprintf+0x3c>)
 8007f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f74:	9105      	str	r1, [sp, #20]
 8007f76:	6800      	ldr	r0, [r0, #0]
 8007f78:	9301      	str	r3, [sp, #4]
 8007f7a:	a902      	add	r1, sp, #8
 8007f7c:	f001 fb40 	bl	8009600 <_svfiprintf_r>
 8007f80:	9b02      	ldr	r3, [sp, #8]
 8007f82:	2200      	movs	r2, #0
 8007f84:	701a      	strb	r2, [r3, #0]
 8007f86:	b01c      	add	sp, #112	; 0x70
 8007f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f8c:	b003      	add	sp, #12
 8007f8e:	4770      	bx	lr
 8007f90:	20000010 	.word	0x20000010
 8007f94:	ffff0208 	.word	0xffff0208

08007f98 <siscanf>:
 8007f98:	b40e      	push	{r1, r2, r3}
 8007f9a:	b510      	push	{r4, lr}
 8007f9c:	b09f      	sub	sp, #124	; 0x7c
 8007f9e:	ac21      	add	r4, sp, #132	; 0x84
 8007fa0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007fa4:	f854 2b04 	ldr.w	r2, [r4], #4
 8007fa8:	9201      	str	r2, [sp, #4]
 8007faa:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007fae:	9004      	str	r0, [sp, #16]
 8007fb0:	9008      	str	r0, [sp, #32]
 8007fb2:	f7f8 f91f 	bl	80001f4 <strlen>
 8007fb6:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <siscanf+0x50>)
 8007fb8:	9005      	str	r0, [sp, #20]
 8007fba:	9009      	str	r0, [sp, #36]	; 0x24
 8007fbc:	930d      	str	r3, [sp, #52]	; 0x34
 8007fbe:	480b      	ldr	r0, [pc, #44]	; (8007fec <siscanf+0x54>)
 8007fc0:	9a01      	ldr	r2, [sp, #4]
 8007fc2:	6800      	ldr	r0, [r0, #0]
 8007fc4:	9403      	str	r4, [sp, #12]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	9311      	str	r3, [sp, #68]	; 0x44
 8007fca:	9316      	str	r3, [sp, #88]	; 0x58
 8007fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fd0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007fd4:	a904      	add	r1, sp, #16
 8007fd6:	4623      	mov	r3, r4
 8007fd8:	f001 fc6c 	bl	80098b4 <__ssvfiscanf_r>
 8007fdc:	b01f      	add	sp, #124	; 0x7c
 8007fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fe2:	b003      	add	sp, #12
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	08008013 	.word	0x08008013
 8007fec:	20000010 	.word	0x20000010

08007ff0 <__sread>:
 8007ff0:	b510      	push	{r4, lr}
 8007ff2:	460c      	mov	r4, r1
 8007ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff8:	f001 ff26 	bl	8009e48 <_read_r>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	bfab      	itete	ge
 8008000:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008002:	89a3      	ldrhlt	r3, [r4, #12]
 8008004:	181b      	addge	r3, r3, r0
 8008006:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800800a:	bfac      	ite	ge
 800800c:	6563      	strge	r3, [r4, #84]	; 0x54
 800800e:	81a3      	strhlt	r3, [r4, #12]
 8008010:	bd10      	pop	{r4, pc}

08008012 <__seofread>:
 8008012:	2000      	movs	r0, #0
 8008014:	4770      	bx	lr

08008016 <__swrite>:
 8008016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800801a:	461f      	mov	r7, r3
 800801c:	898b      	ldrh	r3, [r1, #12]
 800801e:	05db      	lsls	r3, r3, #23
 8008020:	4605      	mov	r5, r0
 8008022:	460c      	mov	r4, r1
 8008024:	4616      	mov	r6, r2
 8008026:	d505      	bpl.n	8008034 <__swrite+0x1e>
 8008028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800802c:	2302      	movs	r3, #2
 800802e:	2200      	movs	r2, #0
 8008030:	f000 fec4 	bl	8008dbc <_lseek_r>
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800803a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800803e:	81a3      	strh	r3, [r4, #12]
 8008040:	4632      	mov	r2, r6
 8008042:	463b      	mov	r3, r7
 8008044:	4628      	mov	r0, r5
 8008046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800804a:	f000 b817 	b.w	800807c <_write_r>

0800804e <__sseek>:
 800804e:	b510      	push	{r4, lr}
 8008050:	460c      	mov	r4, r1
 8008052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008056:	f000 feb1 	bl	8008dbc <_lseek_r>
 800805a:	1c43      	adds	r3, r0, #1
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	bf15      	itete	ne
 8008060:	6560      	strne	r0, [r4, #84]	; 0x54
 8008062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800806a:	81a3      	strheq	r3, [r4, #12]
 800806c:	bf18      	it	ne
 800806e:	81a3      	strhne	r3, [r4, #12]
 8008070:	bd10      	pop	{r4, pc}

08008072 <__sclose>:
 8008072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008076:	f000 b813 	b.w	80080a0 <_close_r>
	...

0800807c <_write_r>:
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	4d07      	ldr	r5, [pc, #28]	; (800809c <_write_r+0x20>)
 8008080:	4604      	mov	r4, r0
 8008082:	4608      	mov	r0, r1
 8008084:	4611      	mov	r1, r2
 8008086:	2200      	movs	r2, #0
 8008088:	602a      	str	r2, [r5, #0]
 800808a:	461a      	mov	r2, r3
 800808c:	f7fa fef5 	bl	8002e7a <_write>
 8008090:	1c43      	adds	r3, r0, #1
 8008092:	d102      	bne.n	800809a <_write_r+0x1e>
 8008094:	682b      	ldr	r3, [r5, #0]
 8008096:	b103      	cbz	r3, 800809a <_write_r+0x1e>
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	bd38      	pop	{r3, r4, r5, pc}
 800809c:	2000063c 	.word	0x2000063c

080080a0 <_close_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	4d06      	ldr	r5, [pc, #24]	; (80080bc <_close_r+0x1c>)
 80080a4:	2300      	movs	r3, #0
 80080a6:	4604      	mov	r4, r0
 80080a8:	4608      	mov	r0, r1
 80080aa:	602b      	str	r3, [r5, #0]
 80080ac:	f7fa ff01 	bl	8002eb2 <_close>
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	d102      	bne.n	80080ba <_close_r+0x1a>
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	b103      	cbz	r3, 80080ba <_close_r+0x1a>
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	2000063c 	.word	0x2000063c

080080c0 <quorem>:
 80080c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c4:	6903      	ldr	r3, [r0, #16]
 80080c6:	690c      	ldr	r4, [r1, #16]
 80080c8:	42a3      	cmp	r3, r4
 80080ca:	4607      	mov	r7, r0
 80080cc:	f2c0 8081 	blt.w	80081d2 <quorem+0x112>
 80080d0:	3c01      	subs	r4, #1
 80080d2:	f101 0814 	add.w	r8, r1, #20
 80080d6:	f100 0514 	add.w	r5, r0, #20
 80080da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080de:	9301      	str	r3, [sp, #4]
 80080e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080e8:	3301      	adds	r3, #1
 80080ea:	429a      	cmp	r2, r3
 80080ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80080f8:	d331      	bcc.n	800815e <quorem+0x9e>
 80080fa:	f04f 0e00 	mov.w	lr, #0
 80080fe:	4640      	mov	r0, r8
 8008100:	46ac      	mov	ip, r5
 8008102:	46f2      	mov	sl, lr
 8008104:	f850 2b04 	ldr.w	r2, [r0], #4
 8008108:	b293      	uxth	r3, r2
 800810a:	fb06 e303 	mla	r3, r6, r3, lr
 800810e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008112:	b29b      	uxth	r3, r3
 8008114:	ebaa 0303 	sub.w	r3, sl, r3
 8008118:	f8dc a000 	ldr.w	sl, [ip]
 800811c:	0c12      	lsrs	r2, r2, #16
 800811e:	fa13 f38a 	uxtah	r3, r3, sl
 8008122:	fb06 e202 	mla	r2, r6, r2, lr
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	9b00      	ldr	r3, [sp, #0]
 800812a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800812e:	b292      	uxth	r2, r2
 8008130:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008138:	f8bd 3000 	ldrh.w	r3, [sp]
 800813c:	4581      	cmp	r9, r0
 800813e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008142:	f84c 3b04 	str.w	r3, [ip], #4
 8008146:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800814a:	d2db      	bcs.n	8008104 <quorem+0x44>
 800814c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008150:	b92b      	cbnz	r3, 800815e <quorem+0x9e>
 8008152:	9b01      	ldr	r3, [sp, #4]
 8008154:	3b04      	subs	r3, #4
 8008156:	429d      	cmp	r5, r3
 8008158:	461a      	mov	r2, r3
 800815a:	d32e      	bcc.n	80081ba <quorem+0xfa>
 800815c:	613c      	str	r4, [r7, #16]
 800815e:	4638      	mov	r0, r7
 8008160:	f001 f8da 	bl	8009318 <__mcmp>
 8008164:	2800      	cmp	r0, #0
 8008166:	db24      	blt.n	80081b2 <quorem+0xf2>
 8008168:	3601      	adds	r6, #1
 800816a:	4628      	mov	r0, r5
 800816c:	f04f 0c00 	mov.w	ip, #0
 8008170:	f858 2b04 	ldr.w	r2, [r8], #4
 8008174:	f8d0 e000 	ldr.w	lr, [r0]
 8008178:	b293      	uxth	r3, r2
 800817a:	ebac 0303 	sub.w	r3, ip, r3
 800817e:	0c12      	lsrs	r2, r2, #16
 8008180:	fa13 f38e 	uxtah	r3, r3, lr
 8008184:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800818c:	b29b      	uxth	r3, r3
 800818e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008192:	45c1      	cmp	r9, r8
 8008194:	f840 3b04 	str.w	r3, [r0], #4
 8008198:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800819c:	d2e8      	bcs.n	8008170 <quorem+0xb0>
 800819e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081a6:	b922      	cbnz	r2, 80081b2 <quorem+0xf2>
 80081a8:	3b04      	subs	r3, #4
 80081aa:	429d      	cmp	r5, r3
 80081ac:	461a      	mov	r2, r3
 80081ae:	d30a      	bcc.n	80081c6 <quorem+0x106>
 80081b0:	613c      	str	r4, [r7, #16]
 80081b2:	4630      	mov	r0, r6
 80081b4:	b003      	add	sp, #12
 80081b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ba:	6812      	ldr	r2, [r2, #0]
 80081bc:	3b04      	subs	r3, #4
 80081be:	2a00      	cmp	r2, #0
 80081c0:	d1cc      	bne.n	800815c <quorem+0x9c>
 80081c2:	3c01      	subs	r4, #1
 80081c4:	e7c7      	b.n	8008156 <quorem+0x96>
 80081c6:	6812      	ldr	r2, [r2, #0]
 80081c8:	3b04      	subs	r3, #4
 80081ca:	2a00      	cmp	r2, #0
 80081cc:	d1f0      	bne.n	80081b0 <quorem+0xf0>
 80081ce:	3c01      	subs	r4, #1
 80081d0:	e7eb      	b.n	80081aa <quorem+0xea>
 80081d2:	2000      	movs	r0, #0
 80081d4:	e7ee      	b.n	80081b4 <quorem+0xf4>
	...

080081d8 <_dtoa_r>:
 80081d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	ed2d 8b04 	vpush	{d8-d9}
 80081e0:	ec57 6b10 	vmov	r6, r7, d0
 80081e4:	b093      	sub	sp, #76	; 0x4c
 80081e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081ec:	9106      	str	r1, [sp, #24]
 80081ee:	ee10 aa10 	vmov	sl, s0
 80081f2:	4604      	mov	r4, r0
 80081f4:	9209      	str	r2, [sp, #36]	; 0x24
 80081f6:	930c      	str	r3, [sp, #48]	; 0x30
 80081f8:	46bb      	mov	fp, r7
 80081fa:	b975      	cbnz	r5, 800821a <_dtoa_r+0x42>
 80081fc:	2010      	movs	r0, #16
 80081fe:	f7ff f941 	bl	8007484 <malloc>
 8008202:	4602      	mov	r2, r0
 8008204:	6260      	str	r0, [r4, #36]	; 0x24
 8008206:	b920      	cbnz	r0, 8008212 <_dtoa_r+0x3a>
 8008208:	4ba7      	ldr	r3, [pc, #668]	; (80084a8 <_dtoa_r+0x2d0>)
 800820a:	21ea      	movs	r1, #234	; 0xea
 800820c:	48a7      	ldr	r0, [pc, #668]	; (80084ac <_dtoa_r+0x2d4>)
 800820e:	f001 ff97 	bl	800a140 <__assert_func>
 8008212:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008216:	6005      	str	r5, [r0, #0]
 8008218:	60c5      	str	r5, [r0, #12]
 800821a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800821c:	6819      	ldr	r1, [r3, #0]
 800821e:	b151      	cbz	r1, 8008236 <_dtoa_r+0x5e>
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	604a      	str	r2, [r1, #4]
 8008224:	2301      	movs	r3, #1
 8008226:	4093      	lsls	r3, r2
 8008228:	608b      	str	r3, [r1, #8]
 800822a:	4620      	mov	r0, r4
 800822c:	f000 fe32 	bl	8008e94 <_Bfree>
 8008230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	1e3b      	subs	r3, r7, #0
 8008238:	bfaa      	itet	ge
 800823a:	2300      	movge	r3, #0
 800823c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008240:	f8c8 3000 	strge.w	r3, [r8]
 8008244:	4b9a      	ldr	r3, [pc, #616]	; (80084b0 <_dtoa_r+0x2d8>)
 8008246:	bfbc      	itt	lt
 8008248:	2201      	movlt	r2, #1
 800824a:	f8c8 2000 	strlt.w	r2, [r8]
 800824e:	ea33 030b 	bics.w	r3, r3, fp
 8008252:	d11b      	bne.n	800828c <_dtoa_r+0xb4>
 8008254:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008256:	f242 730f 	movw	r3, #9999	; 0x270f
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008260:	4333      	orrs	r3, r6
 8008262:	f000 8592 	beq.w	8008d8a <_dtoa_r+0xbb2>
 8008266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008268:	b963      	cbnz	r3, 8008284 <_dtoa_r+0xac>
 800826a:	4b92      	ldr	r3, [pc, #584]	; (80084b4 <_dtoa_r+0x2dc>)
 800826c:	e022      	b.n	80082b4 <_dtoa_r+0xdc>
 800826e:	4b92      	ldr	r3, [pc, #584]	; (80084b8 <_dtoa_r+0x2e0>)
 8008270:	9301      	str	r3, [sp, #4]
 8008272:	3308      	adds	r3, #8
 8008274:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	9801      	ldr	r0, [sp, #4]
 800827a:	b013      	add	sp, #76	; 0x4c
 800827c:	ecbd 8b04 	vpop	{d8-d9}
 8008280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008284:	4b8b      	ldr	r3, [pc, #556]	; (80084b4 <_dtoa_r+0x2dc>)
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	3303      	adds	r3, #3
 800828a:	e7f3      	b.n	8008274 <_dtoa_r+0x9c>
 800828c:	2200      	movs	r2, #0
 800828e:	2300      	movs	r3, #0
 8008290:	4650      	mov	r0, sl
 8008292:	4659      	mov	r1, fp
 8008294:	f7f8 fc30 	bl	8000af8 <__aeabi_dcmpeq>
 8008298:	ec4b ab19 	vmov	d9, sl, fp
 800829c:	4680      	mov	r8, r0
 800829e:	b158      	cbz	r0, 80082b8 <_dtoa_r+0xe0>
 80082a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082a2:	2301      	movs	r3, #1
 80082a4:	6013      	str	r3, [r2, #0]
 80082a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 856b 	beq.w	8008d84 <_dtoa_r+0xbac>
 80082ae:	4883      	ldr	r0, [pc, #524]	; (80084bc <_dtoa_r+0x2e4>)
 80082b0:	6018      	str	r0, [r3, #0]
 80082b2:	1e43      	subs	r3, r0, #1
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	e7df      	b.n	8008278 <_dtoa_r+0xa0>
 80082b8:	ec4b ab10 	vmov	d0, sl, fp
 80082bc:	aa10      	add	r2, sp, #64	; 0x40
 80082be:	a911      	add	r1, sp, #68	; 0x44
 80082c0:	4620      	mov	r0, r4
 80082c2:	f001 f8cf 	bl	8009464 <__d2b>
 80082c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80082ca:	ee08 0a10 	vmov	s16, r0
 80082ce:	2d00      	cmp	r5, #0
 80082d0:	f000 8084 	beq.w	80083dc <_dtoa_r+0x204>
 80082d4:	ee19 3a90 	vmov	r3, s19
 80082d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80082e0:	4656      	mov	r6, sl
 80082e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80082e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80082ee:	4b74      	ldr	r3, [pc, #464]	; (80084c0 <_dtoa_r+0x2e8>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	4630      	mov	r0, r6
 80082f4:	4639      	mov	r1, r7
 80082f6:	f7f7 ffdf 	bl	80002b8 <__aeabi_dsub>
 80082fa:	a365      	add	r3, pc, #404	; (adr r3, 8008490 <_dtoa_r+0x2b8>)
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	f7f8 f992 	bl	8000628 <__aeabi_dmul>
 8008304:	a364      	add	r3, pc, #400	; (adr r3, 8008498 <_dtoa_r+0x2c0>)
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	f7f7 ffd7 	bl	80002bc <__adddf3>
 800830e:	4606      	mov	r6, r0
 8008310:	4628      	mov	r0, r5
 8008312:	460f      	mov	r7, r1
 8008314:	f7f8 f91e 	bl	8000554 <__aeabi_i2d>
 8008318:	a361      	add	r3, pc, #388	; (adr r3, 80084a0 <_dtoa_r+0x2c8>)
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	f7f8 f983 	bl	8000628 <__aeabi_dmul>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	4630      	mov	r0, r6
 8008328:	4639      	mov	r1, r7
 800832a:	f7f7 ffc7 	bl	80002bc <__adddf3>
 800832e:	4606      	mov	r6, r0
 8008330:	460f      	mov	r7, r1
 8008332:	f7f8 fc29 	bl	8000b88 <__aeabi_d2iz>
 8008336:	2200      	movs	r2, #0
 8008338:	9000      	str	r0, [sp, #0]
 800833a:	2300      	movs	r3, #0
 800833c:	4630      	mov	r0, r6
 800833e:	4639      	mov	r1, r7
 8008340:	f7f8 fbe4 	bl	8000b0c <__aeabi_dcmplt>
 8008344:	b150      	cbz	r0, 800835c <_dtoa_r+0x184>
 8008346:	9800      	ldr	r0, [sp, #0]
 8008348:	f7f8 f904 	bl	8000554 <__aeabi_i2d>
 800834c:	4632      	mov	r2, r6
 800834e:	463b      	mov	r3, r7
 8008350:	f7f8 fbd2 	bl	8000af8 <__aeabi_dcmpeq>
 8008354:	b910      	cbnz	r0, 800835c <_dtoa_r+0x184>
 8008356:	9b00      	ldr	r3, [sp, #0]
 8008358:	3b01      	subs	r3, #1
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	9b00      	ldr	r3, [sp, #0]
 800835e:	2b16      	cmp	r3, #22
 8008360:	d85a      	bhi.n	8008418 <_dtoa_r+0x240>
 8008362:	9a00      	ldr	r2, [sp, #0]
 8008364:	4b57      	ldr	r3, [pc, #348]	; (80084c4 <_dtoa_r+0x2ec>)
 8008366:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836e:	ec51 0b19 	vmov	r0, r1, d9
 8008372:	f7f8 fbcb 	bl	8000b0c <__aeabi_dcmplt>
 8008376:	2800      	cmp	r0, #0
 8008378:	d050      	beq.n	800841c <_dtoa_r+0x244>
 800837a:	9b00      	ldr	r3, [sp, #0]
 800837c:	3b01      	subs	r3, #1
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	2300      	movs	r3, #0
 8008382:	930b      	str	r3, [sp, #44]	; 0x2c
 8008384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008386:	1b5d      	subs	r5, r3, r5
 8008388:	1e6b      	subs	r3, r5, #1
 800838a:	9305      	str	r3, [sp, #20]
 800838c:	bf45      	ittet	mi
 800838e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008392:	9304      	strmi	r3, [sp, #16]
 8008394:	2300      	movpl	r3, #0
 8008396:	2300      	movmi	r3, #0
 8008398:	bf4c      	ite	mi
 800839a:	9305      	strmi	r3, [sp, #20]
 800839c:	9304      	strpl	r3, [sp, #16]
 800839e:	9b00      	ldr	r3, [sp, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	db3d      	blt.n	8008420 <_dtoa_r+0x248>
 80083a4:	9b05      	ldr	r3, [sp, #20]
 80083a6:	9a00      	ldr	r2, [sp, #0]
 80083a8:	920a      	str	r2, [sp, #40]	; 0x28
 80083aa:	4413      	add	r3, r2
 80083ac:	9305      	str	r3, [sp, #20]
 80083ae:	2300      	movs	r3, #0
 80083b0:	9307      	str	r3, [sp, #28]
 80083b2:	9b06      	ldr	r3, [sp, #24]
 80083b4:	2b09      	cmp	r3, #9
 80083b6:	f200 8089 	bhi.w	80084cc <_dtoa_r+0x2f4>
 80083ba:	2b05      	cmp	r3, #5
 80083bc:	bfc4      	itt	gt
 80083be:	3b04      	subgt	r3, #4
 80083c0:	9306      	strgt	r3, [sp, #24]
 80083c2:	9b06      	ldr	r3, [sp, #24]
 80083c4:	f1a3 0302 	sub.w	r3, r3, #2
 80083c8:	bfcc      	ite	gt
 80083ca:	2500      	movgt	r5, #0
 80083cc:	2501      	movle	r5, #1
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	f200 8087 	bhi.w	80084e2 <_dtoa_r+0x30a>
 80083d4:	e8df f003 	tbb	[pc, r3]
 80083d8:	59383a2d 	.word	0x59383a2d
 80083dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80083e0:	441d      	add	r5, r3
 80083e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80083e6:	2b20      	cmp	r3, #32
 80083e8:	bfc1      	itttt	gt
 80083ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80083f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80083f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80083fa:	bfda      	itte	le
 80083fc:	f1c3 0320 	rsble	r3, r3, #32
 8008400:	fa06 f003 	lslle.w	r0, r6, r3
 8008404:	4318      	orrgt	r0, r3
 8008406:	f7f8 f895 	bl	8000534 <__aeabi_ui2d>
 800840a:	2301      	movs	r3, #1
 800840c:	4606      	mov	r6, r0
 800840e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008412:	3d01      	subs	r5, #1
 8008414:	930e      	str	r3, [sp, #56]	; 0x38
 8008416:	e76a      	b.n	80082ee <_dtoa_r+0x116>
 8008418:	2301      	movs	r3, #1
 800841a:	e7b2      	b.n	8008382 <_dtoa_r+0x1aa>
 800841c:	900b      	str	r0, [sp, #44]	; 0x2c
 800841e:	e7b1      	b.n	8008384 <_dtoa_r+0x1ac>
 8008420:	9b04      	ldr	r3, [sp, #16]
 8008422:	9a00      	ldr	r2, [sp, #0]
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	9304      	str	r3, [sp, #16]
 8008428:	4253      	negs	r3, r2
 800842a:	9307      	str	r3, [sp, #28]
 800842c:	2300      	movs	r3, #0
 800842e:	930a      	str	r3, [sp, #40]	; 0x28
 8008430:	e7bf      	b.n	80083b2 <_dtoa_r+0x1da>
 8008432:	2300      	movs	r3, #0
 8008434:	9308      	str	r3, [sp, #32]
 8008436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008438:	2b00      	cmp	r3, #0
 800843a:	dc55      	bgt.n	80084e8 <_dtoa_r+0x310>
 800843c:	2301      	movs	r3, #1
 800843e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008442:	461a      	mov	r2, r3
 8008444:	9209      	str	r2, [sp, #36]	; 0x24
 8008446:	e00c      	b.n	8008462 <_dtoa_r+0x28a>
 8008448:	2301      	movs	r3, #1
 800844a:	e7f3      	b.n	8008434 <_dtoa_r+0x25c>
 800844c:	2300      	movs	r3, #0
 800844e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008450:	9308      	str	r3, [sp, #32]
 8008452:	9b00      	ldr	r3, [sp, #0]
 8008454:	4413      	add	r3, r2
 8008456:	9302      	str	r3, [sp, #8]
 8008458:	3301      	adds	r3, #1
 800845a:	2b01      	cmp	r3, #1
 800845c:	9303      	str	r3, [sp, #12]
 800845e:	bfb8      	it	lt
 8008460:	2301      	movlt	r3, #1
 8008462:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008464:	2200      	movs	r2, #0
 8008466:	6042      	str	r2, [r0, #4]
 8008468:	2204      	movs	r2, #4
 800846a:	f102 0614 	add.w	r6, r2, #20
 800846e:	429e      	cmp	r6, r3
 8008470:	6841      	ldr	r1, [r0, #4]
 8008472:	d93d      	bls.n	80084f0 <_dtoa_r+0x318>
 8008474:	4620      	mov	r0, r4
 8008476:	f000 fccd 	bl	8008e14 <_Balloc>
 800847a:	9001      	str	r0, [sp, #4]
 800847c:	2800      	cmp	r0, #0
 800847e:	d13b      	bne.n	80084f8 <_dtoa_r+0x320>
 8008480:	4b11      	ldr	r3, [pc, #68]	; (80084c8 <_dtoa_r+0x2f0>)
 8008482:	4602      	mov	r2, r0
 8008484:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008488:	e6c0      	b.n	800820c <_dtoa_r+0x34>
 800848a:	2301      	movs	r3, #1
 800848c:	e7df      	b.n	800844e <_dtoa_r+0x276>
 800848e:	bf00      	nop
 8008490:	636f4361 	.word	0x636f4361
 8008494:	3fd287a7 	.word	0x3fd287a7
 8008498:	8b60c8b3 	.word	0x8b60c8b3
 800849c:	3fc68a28 	.word	0x3fc68a28
 80084a0:	509f79fb 	.word	0x509f79fb
 80084a4:	3fd34413 	.word	0x3fd34413
 80084a8:	0800d2af 	.word	0x0800d2af
 80084ac:	0800d2c6 	.word	0x0800d2c6
 80084b0:	7ff00000 	.word	0x7ff00000
 80084b4:	0800d2ab 	.word	0x0800d2ab
 80084b8:	0800d2a2 	.word	0x0800d2a2
 80084bc:	0800d4a2 	.word	0x0800d4a2
 80084c0:	3ff80000 	.word	0x3ff80000
 80084c4:	0800d3b8 	.word	0x0800d3b8
 80084c8:	0800d321 	.word	0x0800d321
 80084cc:	2501      	movs	r5, #1
 80084ce:	2300      	movs	r3, #0
 80084d0:	9306      	str	r3, [sp, #24]
 80084d2:	9508      	str	r5, [sp, #32]
 80084d4:	f04f 33ff 	mov.w	r3, #4294967295
 80084d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084dc:	2200      	movs	r2, #0
 80084de:	2312      	movs	r3, #18
 80084e0:	e7b0      	b.n	8008444 <_dtoa_r+0x26c>
 80084e2:	2301      	movs	r3, #1
 80084e4:	9308      	str	r3, [sp, #32]
 80084e6:	e7f5      	b.n	80084d4 <_dtoa_r+0x2fc>
 80084e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084ee:	e7b8      	b.n	8008462 <_dtoa_r+0x28a>
 80084f0:	3101      	adds	r1, #1
 80084f2:	6041      	str	r1, [r0, #4]
 80084f4:	0052      	lsls	r2, r2, #1
 80084f6:	e7b8      	b.n	800846a <_dtoa_r+0x292>
 80084f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084fa:	9a01      	ldr	r2, [sp, #4]
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	9b03      	ldr	r3, [sp, #12]
 8008500:	2b0e      	cmp	r3, #14
 8008502:	f200 809d 	bhi.w	8008640 <_dtoa_r+0x468>
 8008506:	2d00      	cmp	r5, #0
 8008508:	f000 809a 	beq.w	8008640 <_dtoa_r+0x468>
 800850c:	9b00      	ldr	r3, [sp, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	dd32      	ble.n	8008578 <_dtoa_r+0x3a0>
 8008512:	4ab7      	ldr	r2, [pc, #732]	; (80087f0 <_dtoa_r+0x618>)
 8008514:	f003 030f 	and.w	r3, r3, #15
 8008518:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800851c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008520:	9b00      	ldr	r3, [sp, #0]
 8008522:	05d8      	lsls	r0, r3, #23
 8008524:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008528:	d516      	bpl.n	8008558 <_dtoa_r+0x380>
 800852a:	4bb2      	ldr	r3, [pc, #712]	; (80087f4 <_dtoa_r+0x61c>)
 800852c:	ec51 0b19 	vmov	r0, r1, d9
 8008530:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008534:	f7f8 f9a2 	bl	800087c <__aeabi_ddiv>
 8008538:	f007 070f 	and.w	r7, r7, #15
 800853c:	4682      	mov	sl, r0
 800853e:	468b      	mov	fp, r1
 8008540:	2503      	movs	r5, #3
 8008542:	4eac      	ldr	r6, [pc, #688]	; (80087f4 <_dtoa_r+0x61c>)
 8008544:	b957      	cbnz	r7, 800855c <_dtoa_r+0x384>
 8008546:	4642      	mov	r2, r8
 8008548:	464b      	mov	r3, r9
 800854a:	4650      	mov	r0, sl
 800854c:	4659      	mov	r1, fp
 800854e:	f7f8 f995 	bl	800087c <__aeabi_ddiv>
 8008552:	4682      	mov	sl, r0
 8008554:	468b      	mov	fp, r1
 8008556:	e028      	b.n	80085aa <_dtoa_r+0x3d2>
 8008558:	2502      	movs	r5, #2
 800855a:	e7f2      	b.n	8008542 <_dtoa_r+0x36a>
 800855c:	07f9      	lsls	r1, r7, #31
 800855e:	d508      	bpl.n	8008572 <_dtoa_r+0x39a>
 8008560:	4640      	mov	r0, r8
 8008562:	4649      	mov	r1, r9
 8008564:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008568:	f7f8 f85e 	bl	8000628 <__aeabi_dmul>
 800856c:	3501      	adds	r5, #1
 800856e:	4680      	mov	r8, r0
 8008570:	4689      	mov	r9, r1
 8008572:	107f      	asrs	r7, r7, #1
 8008574:	3608      	adds	r6, #8
 8008576:	e7e5      	b.n	8008544 <_dtoa_r+0x36c>
 8008578:	f000 809b 	beq.w	80086b2 <_dtoa_r+0x4da>
 800857c:	9b00      	ldr	r3, [sp, #0]
 800857e:	4f9d      	ldr	r7, [pc, #628]	; (80087f4 <_dtoa_r+0x61c>)
 8008580:	425e      	negs	r6, r3
 8008582:	4b9b      	ldr	r3, [pc, #620]	; (80087f0 <_dtoa_r+0x618>)
 8008584:	f006 020f 	and.w	r2, r6, #15
 8008588:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	ec51 0b19 	vmov	r0, r1, d9
 8008594:	f7f8 f848 	bl	8000628 <__aeabi_dmul>
 8008598:	1136      	asrs	r6, r6, #4
 800859a:	4682      	mov	sl, r0
 800859c:	468b      	mov	fp, r1
 800859e:	2300      	movs	r3, #0
 80085a0:	2502      	movs	r5, #2
 80085a2:	2e00      	cmp	r6, #0
 80085a4:	d17a      	bne.n	800869c <_dtoa_r+0x4c4>
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1d3      	bne.n	8008552 <_dtoa_r+0x37a>
 80085aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 8082 	beq.w	80086b6 <_dtoa_r+0x4de>
 80085b2:	4b91      	ldr	r3, [pc, #580]	; (80087f8 <_dtoa_r+0x620>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	4650      	mov	r0, sl
 80085b8:	4659      	mov	r1, fp
 80085ba:	f7f8 faa7 	bl	8000b0c <__aeabi_dcmplt>
 80085be:	2800      	cmp	r0, #0
 80085c0:	d079      	beq.n	80086b6 <_dtoa_r+0x4de>
 80085c2:	9b03      	ldr	r3, [sp, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d076      	beq.n	80086b6 <_dtoa_r+0x4de>
 80085c8:	9b02      	ldr	r3, [sp, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	dd36      	ble.n	800863c <_dtoa_r+0x464>
 80085ce:	9b00      	ldr	r3, [sp, #0]
 80085d0:	4650      	mov	r0, sl
 80085d2:	4659      	mov	r1, fp
 80085d4:	1e5f      	subs	r7, r3, #1
 80085d6:	2200      	movs	r2, #0
 80085d8:	4b88      	ldr	r3, [pc, #544]	; (80087fc <_dtoa_r+0x624>)
 80085da:	f7f8 f825 	bl	8000628 <__aeabi_dmul>
 80085de:	9e02      	ldr	r6, [sp, #8]
 80085e0:	4682      	mov	sl, r0
 80085e2:	468b      	mov	fp, r1
 80085e4:	3501      	adds	r5, #1
 80085e6:	4628      	mov	r0, r5
 80085e8:	f7f7 ffb4 	bl	8000554 <__aeabi_i2d>
 80085ec:	4652      	mov	r2, sl
 80085ee:	465b      	mov	r3, fp
 80085f0:	f7f8 f81a 	bl	8000628 <__aeabi_dmul>
 80085f4:	4b82      	ldr	r3, [pc, #520]	; (8008800 <_dtoa_r+0x628>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	f7f7 fe60 	bl	80002bc <__adddf3>
 80085fc:	46d0      	mov	r8, sl
 80085fe:	46d9      	mov	r9, fp
 8008600:	4682      	mov	sl, r0
 8008602:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008606:	2e00      	cmp	r6, #0
 8008608:	d158      	bne.n	80086bc <_dtoa_r+0x4e4>
 800860a:	4b7e      	ldr	r3, [pc, #504]	; (8008804 <_dtoa_r+0x62c>)
 800860c:	2200      	movs	r2, #0
 800860e:	4640      	mov	r0, r8
 8008610:	4649      	mov	r1, r9
 8008612:	f7f7 fe51 	bl	80002b8 <__aeabi_dsub>
 8008616:	4652      	mov	r2, sl
 8008618:	465b      	mov	r3, fp
 800861a:	4680      	mov	r8, r0
 800861c:	4689      	mov	r9, r1
 800861e:	f7f8 fa93 	bl	8000b48 <__aeabi_dcmpgt>
 8008622:	2800      	cmp	r0, #0
 8008624:	f040 8295 	bne.w	8008b52 <_dtoa_r+0x97a>
 8008628:	4652      	mov	r2, sl
 800862a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800862e:	4640      	mov	r0, r8
 8008630:	4649      	mov	r1, r9
 8008632:	f7f8 fa6b 	bl	8000b0c <__aeabi_dcmplt>
 8008636:	2800      	cmp	r0, #0
 8008638:	f040 8289 	bne.w	8008b4e <_dtoa_r+0x976>
 800863c:	ec5b ab19 	vmov	sl, fp, d9
 8008640:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008642:	2b00      	cmp	r3, #0
 8008644:	f2c0 8148 	blt.w	80088d8 <_dtoa_r+0x700>
 8008648:	9a00      	ldr	r2, [sp, #0]
 800864a:	2a0e      	cmp	r2, #14
 800864c:	f300 8144 	bgt.w	80088d8 <_dtoa_r+0x700>
 8008650:	4b67      	ldr	r3, [pc, #412]	; (80087f0 <_dtoa_r+0x618>)
 8008652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008656:	e9d3 8900 	ldrd	r8, r9, [r3]
 800865a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800865c:	2b00      	cmp	r3, #0
 800865e:	f280 80d5 	bge.w	800880c <_dtoa_r+0x634>
 8008662:	9b03      	ldr	r3, [sp, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f300 80d1 	bgt.w	800880c <_dtoa_r+0x634>
 800866a:	f040 826f 	bne.w	8008b4c <_dtoa_r+0x974>
 800866e:	4b65      	ldr	r3, [pc, #404]	; (8008804 <_dtoa_r+0x62c>)
 8008670:	2200      	movs	r2, #0
 8008672:	4640      	mov	r0, r8
 8008674:	4649      	mov	r1, r9
 8008676:	f7f7 ffd7 	bl	8000628 <__aeabi_dmul>
 800867a:	4652      	mov	r2, sl
 800867c:	465b      	mov	r3, fp
 800867e:	f7f8 fa59 	bl	8000b34 <__aeabi_dcmpge>
 8008682:	9e03      	ldr	r6, [sp, #12]
 8008684:	4637      	mov	r7, r6
 8008686:	2800      	cmp	r0, #0
 8008688:	f040 8245 	bne.w	8008b16 <_dtoa_r+0x93e>
 800868c:	9d01      	ldr	r5, [sp, #4]
 800868e:	2331      	movs	r3, #49	; 0x31
 8008690:	f805 3b01 	strb.w	r3, [r5], #1
 8008694:	9b00      	ldr	r3, [sp, #0]
 8008696:	3301      	adds	r3, #1
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	e240      	b.n	8008b1e <_dtoa_r+0x946>
 800869c:	07f2      	lsls	r2, r6, #31
 800869e:	d505      	bpl.n	80086ac <_dtoa_r+0x4d4>
 80086a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086a4:	f7f7 ffc0 	bl	8000628 <__aeabi_dmul>
 80086a8:	3501      	adds	r5, #1
 80086aa:	2301      	movs	r3, #1
 80086ac:	1076      	asrs	r6, r6, #1
 80086ae:	3708      	adds	r7, #8
 80086b0:	e777      	b.n	80085a2 <_dtoa_r+0x3ca>
 80086b2:	2502      	movs	r5, #2
 80086b4:	e779      	b.n	80085aa <_dtoa_r+0x3d2>
 80086b6:	9f00      	ldr	r7, [sp, #0]
 80086b8:	9e03      	ldr	r6, [sp, #12]
 80086ba:	e794      	b.n	80085e6 <_dtoa_r+0x40e>
 80086bc:	9901      	ldr	r1, [sp, #4]
 80086be:	4b4c      	ldr	r3, [pc, #304]	; (80087f0 <_dtoa_r+0x618>)
 80086c0:	4431      	add	r1, r6
 80086c2:	910d      	str	r1, [sp, #52]	; 0x34
 80086c4:	9908      	ldr	r1, [sp, #32]
 80086c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80086ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086ce:	2900      	cmp	r1, #0
 80086d0:	d043      	beq.n	800875a <_dtoa_r+0x582>
 80086d2:	494d      	ldr	r1, [pc, #308]	; (8008808 <_dtoa_r+0x630>)
 80086d4:	2000      	movs	r0, #0
 80086d6:	f7f8 f8d1 	bl	800087c <__aeabi_ddiv>
 80086da:	4652      	mov	r2, sl
 80086dc:	465b      	mov	r3, fp
 80086de:	f7f7 fdeb 	bl	80002b8 <__aeabi_dsub>
 80086e2:	9d01      	ldr	r5, [sp, #4]
 80086e4:	4682      	mov	sl, r0
 80086e6:	468b      	mov	fp, r1
 80086e8:	4649      	mov	r1, r9
 80086ea:	4640      	mov	r0, r8
 80086ec:	f7f8 fa4c 	bl	8000b88 <__aeabi_d2iz>
 80086f0:	4606      	mov	r6, r0
 80086f2:	f7f7 ff2f 	bl	8000554 <__aeabi_i2d>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4640      	mov	r0, r8
 80086fc:	4649      	mov	r1, r9
 80086fe:	f7f7 fddb 	bl	80002b8 <__aeabi_dsub>
 8008702:	3630      	adds	r6, #48	; 0x30
 8008704:	f805 6b01 	strb.w	r6, [r5], #1
 8008708:	4652      	mov	r2, sl
 800870a:	465b      	mov	r3, fp
 800870c:	4680      	mov	r8, r0
 800870e:	4689      	mov	r9, r1
 8008710:	f7f8 f9fc 	bl	8000b0c <__aeabi_dcmplt>
 8008714:	2800      	cmp	r0, #0
 8008716:	d163      	bne.n	80087e0 <_dtoa_r+0x608>
 8008718:	4642      	mov	r2, r8
 800871a:	464b      	mov	r3, r9
 800871c:	4936      	ldr	r1, [pc, #216]	; (80087f8 <_dtoa_r+0x620>)
 800871e:	2000      	movs	r0, #0
 8008720:	f7f7 fdca 	bl	80002b8 <__aeabi_dsub>
 8008724:	4652      	mov	r2, sl
 8008726:	465b      	mov	r3, fp
 8008728:	f7f8 f9f0 	bl	8000b0c <__aeabi_dcmplt>
 800872c:	2800      	cmp	r0, #0
 800872e:	f040 80b5 	bne.w	800889c <_dtoa_r+0x6c4>
 8008732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008734:	429d      	cmp	r5, r3
 8008736:	d081      	beq.n	800863c <_dtoa_r+0x464>
 8008738:	4b30      	ldr	r3, [pc, #192]	; (80087fc <_dtoa_r+0x624>)
 800873a:	2200      	movs	r2, #0
 800873c:	4650      	mov	r0, sl
 800873e:	4659      	mov	r1, fp
 8008740:	f7f7 ff72 	bl	8000628 <__aeabi_dmul>
 8008744:	4b2d      	ldr	r3, [pc, #180]	; (80087fc <_dtoa_r+0x624>)
 8008746:	4682      	mov	sl, r0
 8008748:	468b      	mov	fp, r1
 800874a:	4640      	mov	r0, r8
 800874c:	4649      	mov	r1, r9
 800874e:	2200      	movs	r2, #0
 8008750:	f7f7 ff6a 	bl	8000628 <__aeabi_dmul>
 8008754:	4680      	mov	r8, r0
 8008756:	4689      	mov	r9, r1
 8008758:	e7c6      	b.n	80086e8 <_dtoa_r+0x510>
 800875a:	4650      	mov	r0, sl
 800875c:	4659      	mov	r1, fp
 800875e:	f7f7 ff63 	bl	8000628 <__aeabi_dmul>
 8008762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008764:	9d01      	ldr	r5, [sp, #4]
 8008766:	930f      	str	r3, [sp, #60]	; 0x3c
 8008768:	4682      	mov	sl, r0
 800876a:	468b      	mov	fp, r1
 800876c:	4649      	mov	r1, r9
 800876e:	4640      	mov	r0, r8
 8008770:	f7f8 fa0a 	bl	8000b88 <__aeabi_d2iz>
 8008774:	4606      	mov	r6, r0
 8008776:	f7f7 feed 	bl	8000554 <__aeabi_i2d>
 800877a:	3630      	adds	r6, #48	; 0x30
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	4640      	mov	r0, r8
 8008782:	4649      	mov	r1, r9
 8008784:	f7f7 fd98 	bl	80002b8 <__aeabi_dsub>
 8008788:	f805 6b01 	strb.w	r6, [r5], #1
 800878c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800878e:	429d      	cmp	r5, r3
 8008790:	4680      	mov	r8, r0
 8008792:	4689      	mov	r9, r1
 8008794:	f04f 0200 	mov.w	r2, #0
 8008798:	d124      	bne.n	80087e4 <_dtoa_r+0x60c>
 800879a:	4b1b      	ldr	r3, [pc, #108]	; (8008808 <_dtoa_r+0x630>)
 800879c:	4650      	mov	r0, sl
 800879e:	4659      	mov	r1, fp
 80087a0:	f7f7 fd8c 	bl	80002bc <__adddf3>
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	4640      	mov	r0, r8
 80087aa:	4649      	mov	r1, r9
 80087ac:	f7f8 f9cc 	bl	8000b48 <__aeabi_dcmpgt>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d173      	bne.n	800889c <_dtoa_r+0x6c4>
 80087b4:	4652      	mov	r2, sl
 80087b6:	465b      	mov	r3, fp
 80087b8:	4913      	ldr	r1, [pc, #76]	; (8008808 <_dtoa_r+0x630>)
 80087ba:	2000      	movs	r0, #0
 80087bc:	f7f7 fd7c 	bl	80002b8 <__aeabi_dsub>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4640      	mov	r0, r8
 80087c6:	4649      	mov	r1, r9
 80087c8:	f7f8 f9a0 	bl	8000b0c <__aeabi_dcmplt>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	f43f af35 	beq.w	800863c <_dtoa_r+0x464>
 80087d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80087d4:	1e6b      	subs	r3, r5, #1
 80087d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80087d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087dc:	2b30      	cmp	r3, #48	; 0x30
 80087de:	d0f8      	beq.n	80087d2 <_dtoa_r+0x5fa>
 80087e0:	9700      	str	r7, [sp, #0]
 80087e2:	e049      	b.n	8008878 <_dtoa_r+0x6a0>
 80087e4:	4b05      	ldr	r3, [pc, #20]	; (80087fc <_dtoa_r+0x624>)
 80087e6:	f7f7 ff1f 	bl	8000628 <__aeabi_dmul>
 80087ea:	4680      	mov	r8, r0
 80087ec:	4689      	mov	r9, r1
 80087ee:	e7bd      	b.n	800876c <_dtoa_r+0x594>
 80087f0:	0800d3b8 	.word	0x0800d3b8
 80087f4:	0800d390 	.word	0x0800d390
 80087f8:	3ff00000 	.word	0x3ff00000
 80087fc:	40240000 	.word	0x40240000
 8008800:	401c0000 	.word	0x401c0000
 8008804:	40140000 	.word	0x40140000
 8008808:	3fe00000 	.word	0x3fe00000
 800880c:	9d01      	ldr	r5, [sp, #4]
 800880e:	4656      	mov	r6, sl
 8008810:	465f      	mov	r7, fp
 8008812:	4642      	mov	r2, r8
 8008814:	464b      	mov	r3, r9
 8008816:	4630      	mov	r0, r6
 8008818:	4639      	mov	r1, r7
 800881a:	f7f8 f82f 	bl	800087c <__aeabi_ddiv>
 800881e:	f7f8 f9b3 	bl	8000b88 <__aeabi_d2iz>
 8008822:	4682      	mov	sl, r0
 8008824:	f7f7 fe96 	bl	8000554 <__aeabi_i2d>
 8008828:	4642      	mov	r2, r8
 800882a:	464b      	mov	r3, r9
 800882c:	f7f7 fefc 	bl	8000628 <__aeabi_dmul>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	4630      	mov	r0, r6
 8008836:	4639      	mov	r1, r7
 8008838:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800883c:	f7f7 fd3c 	bl	80002b8 <__aeabi_dsub>
 8008840:	f805 6b01 	strb.w	r6, [r5], #1
 8008844:	9e01      	ldr	r6, [sp, #4]
 8008846:	9f03      	ldr	r7, [sp, #12]
 8008848:	1bae      	subs	r6, r5, r6
 800884a:	42b7      	cmp	r7, r6
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	d135      	bne.n	80088be <_dtoa_r+0x6e6>
 8008852:	f7f7 fd33 	bl	80002bc <__adddf3>
 8008856:	4642      	mov	r2, r8
 8008858:	464b      	mov	r3, r9
 800885a:	4606      	mov	r6, r0
 800885c:	460f      	mov	r7, r1
 800885e:	f7f8 f973 	bl	8000b48 <__aeabi_dcmpgt>
 8008862:	b9d0      	cbnz	r0, 800889a <_dtoa_r+0x6c2>
 8008864:	4642      	mov	r2, r8
 8008866:	464b      	mov	r3, r9
 8008868:	4630      	mov	r0, r6
 800886a:	4639      	mov	r1, r7
 800886c:	f7f8 f944 	bl	8000af8 <__aeabi_dcmpeq>
 8008870:	b110      	cbz	r0, 8008878 <_dtoa_r+0x6a0>
 8008872:	f01a 0f01 	tst.w	sl, #1
 8008876:	d110      	bne.n	800889a <_dtoa_r+0x6c2>
 8008878:	4620      	mov	r0, r4
 800887a:	ee18 1a10 	vmov	r1, s16
 800887e:	f000 fb09 	bl	8008e94 <_Bfree>
 8008882:	2300      	movs	r3, #0
 8008884:	9800      	ldr	r0, [sp, #0]
 8008886:	702b      	strb	r3, [r5, #0]
 8008888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800888a:	3001      	adds	r0, #1
 800888c:	6018      	str	r0, [r3, #0]
 800888e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008890:	2b00      	cmp	r3, #0
 8008892:	f43f acf1 	beq.w	8008278 <_dtoa_r+0xa0>
 8008896:	601d      	str	r5, [r3, #0]
 8008898:	e4ee      	b.n	8008278 <_dtoa_r+0xa0>
 800889a:	9f00      	ldr	r7, [sp, #0]
 800889c:	462b      	mov	r3, r5
 800889e:	461d      	mov	r5, r3
 80088a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088a4:	2a39      	cmp	r2, #57	; 0x39
 80088a6:	d106      	bne.n	80088b6 <_dtoa_r+0x6de>
 80088a8:	9a01      	ldr	r2, [sp, #4]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d1f7      	bne.n	800889e <_dtoa_r+0x6c6>
 80088ae:	9901      	ldr	r1, [sp, #4]
 80088b0:	2230      	movs	r2, #48	; 0x30
 80088b2:	3701      	adds	r7, #1
 80088b4:	700a      	strb	r2, [r1, #0]
 80088b6:	781a      	ldrb	r2, [r3, #0]
 80088b8:	3201      	adds	r2, #1
 80088ba:	701a      	strb	r2, [r3, #0]
 80088bc:	e790      	b.n	80087e0 <_dtoa_r+0x608>
 80088be:	4ba6      	ldr	r3, [pc, #664]	; (8008b58 <_dtoa_r+0x980>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	f7f7 feb1 	bl	8000628 <__aeabi_dmul>
 80088c6:	2200      	movs	r2, #0
 80088c8:	2300      	movs	r3, #0
 80088ca:	4606      	mov	r6, r0
 80088cc:	460f      	mov	r7, r1
 80088ce:	f7f8 f913 	bl	8000af8 <__aeabi_dcmpeq>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	d09d      	beq.n	8008812 <_dtoa_r+0x63a>
 80088d6:	e7cf      	b.n	8008878 <_dtoa_r+0x6a0>
 80088d8:	9a08      	ldr	r2, [sp, #32]
 80088da:	2a00      	cmp	r2, #0
 80088dc:	f000 80d7 	beq.w	8008a8e <_dtoa_r+0x8b6>
 80088e0:	9a06      	ldr	r2, [sp, #24]
 80088e2:	2a01      	cmp	r2, #1
 80088e4:	f300 80ba 	bgt.w	8008a5c <_dtoa_r+0x884>
 80088e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088ea:	2a00      	cmp	r2, #0
 80088ec:	f000 80b2 	beq.w	8008a54 <_dtoa_r+0x87c>
 80088f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088f4:	9e07      	ldr	r6, [sp, #28]
 80088f6:	9d04      	ldr	r5, [sp, #16]
 80088f8:	9a04      	ldr	r2, [sp, #16]
 80088fa:	441a      	add	r2, r3
 80088fc:	9204      	str	r2, [sp, #16]
 80088fe:	9a05      	ldr	r2, [sp, #20]
 8008900:	2101      	movs	r1, #1
 8008902:	441a      	add	r2, r3
 8008904:	4620      	mov	r0, r4
 8008906:	9205      	str	r2, [sp, #20]
 8008908:	f000 fb7c 	bl	8009004 <__i2b>
 800890c:	4607      	mov	r7, r0
 800890e:	2d00      	cmp	r5, #0
 8008910:	dd0c      	ble.n	800892c <_dtoa_r+0x754>
 8008912:	9b05      	ldr	r3, [sp, #20]
 8008914:	2b00      	cmp	r3, #0
 8008916:	dd09      	ble.n	800892c <_dtoa_r+0x754>
 8008918:	42ab      	cmp	r3, r5
 800891a:	9a04      	ldr	r2, [sp, #16]
 800891c:	bfa8      	it	ge
 800891e:	462b      	movge	r3, r5
 8008920:	1ad2      	subs	r2, r2, r3
 8008922:	9204      	str	r2, [sp, #16]
 8008924:	9a05      	ldr	r2, [sp, #20]
 8008926:	1aed      	subs	r5, r5, r3
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	9305      	str	r3, [sp, #20]
 800892c:	9b07      	ldr	r3, [sp, #28]
 800892e:	b31b      	cbz	r3, 8008978 <_dtoa_r+0x7a0>
 8008930:	9b08      	ldr	r3, [sp, #32]
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 80af 	beq.w	8008a96 <_dtoa_r+0x8be>
 8008938:	2e00      	cmp	r6, #0
 800893a:	dd13      	ble.n	8008964 <_dtoa_r+0x78c>
 800893c:	4639      	mov	r1, r7
 800893e:	4632      	mov	r2, r6
 8008940:	4620      	mov	r0, r4
 8008942:	f000 fc1f 	bl	8009184 <__pow5mult>
 8008946:	ee18 2a10 	vmov	r2, s16
 800894a:	4601      	mov	r1, r0
 800894c:	4607      	mov	r7, r0
 800894e:	4620      	mov	r0, r4
 8008950:	f000 fb6e 	bl	8009030 <__multiply>
 8008954:	ee18 1a10 	vmov	r1, s16
 8008958:	4680      	mov	r8, r0
 800895a:	4620      	mov	r0, r4
 800895c:	f000 fa9a 	bl	8008e94 <_Bfree>
 8008960:	ee08 8a10 	vmov	s16, r8
 8008964:	9b07      	ldr	r3, [sp, #28]
 8008966:	1b9a      	subs	r2, r3, r6
 8008968:	d006      	beq.n	8008978 <_dtoa_r+0x7a0>
 800896a:	ee18 1a10 	vmov	r1, s16
 800896e:	4620      	mov	r0, r4
 8008970:	f000 fc08 	bl	8009184 <__pow5mult>
 8008974:	ee08 0a10 	vmov	s16, r0
 8008978:	2101      	movs	r1, #1
 800897a:	4620      	mov	r0, r4
 800897c:	f000 fb42 	bl	8009004 <__i2b>
 8008980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008982:	2b00      	cmp	r3, #0
 8008984:	4606      	mov	r6, r0
 8008986:	f340 8088 	ble.w	8008a9a <_dtoa_r+0x8c2>
 800898a:	461a      	mov	r2, r3
 800898c:	4601      	mov	r1, r0
 800898e:	4620      	mov	r0, r4
 8008990:	f000 fbf8 	bl	8009184 <__pow5mult>
 8008994:	9b06      	ldr	r3, [sp, #24]
 8008996:	2b01      	cmp	r3, #1
 8008998:	4606      	mov	r6, r0
 800899a:	f340 8081 	ble.w	8008aa0 <_dtoa_r+0x8c8>
 800899e:	f04f 0800 	mov.w	r8, #0
 80089a2:	6933      	ldr	r3, [r6, #16]
 80089a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80089a8:	6918      	ldr	r0, [r3, #16]
 80089aa:	f000 fadb 	bl	8008f64 <__hi0bits>
 80089ae:	f1c0 0020 	rsb	r0, r0, #32
 80089b2:	9b05      	ldr	r3, [sp, #20]
 80089b4:	4418      	add	r0, r3
 80089b6:	f010 001f 	ands.w	r0, r0, #31
 80089ba:	f000 8092 	beq.w	8008ae2 <_dtoa_r+0x90a>
 80089be:	f1c0 0320 	rsb	r3, r0, #32
 80089c2:	2b04      	cmp	r3, #4
 80089c4:	f340 808a 	ble.w	8008adc <_dtoa_r+0x904>
 80089c8:	f1c0 001c 	rsb	r0, r0, #28
 80089cc:	9b04      	ldr	r3, [sp, #16]
 80089ce:	4403      	add	r3, r0
 80089d0:	9304      	str	r3, [sp, #16]
 80089d2:	9b05      	ldr	r3, [sp, #20]
 80089d4:	4403      	add	r3, r0
 80089d6:	4405      	add	r5, r0
 80089d8:	9305      	str	r3, [sp, #20]
 80089da:	9b04      	ldr	r3, [sp, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	dd07      	ble.n	80089f0 <_dtoa_r+0x818>
 80089e0:	ee18 1a10 	vmov	r1, s16
 80089e4:	461a      	mov	r2, r3
 80089e6:	4620      	mov	r0, r4
 80089e8:	f000 fc26 	bl	8009238 <__lshift>
 80089ec:	ee08 0a10 	vmov	s16, r0
 80089f0:	9b05      	ldr	r3, [sp, #20]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	dd05      	ble.n	8008a02 <_dtoa_r+0x82a>
 80089f6:	4631      	mov	r1, r6
 80089f8:	461a      	mov	r2, r3
 80089fa:	4620      	mov	r0, r4
 80089fc:	f000 fc1c 	bl	8009238 <__lshift>
 8008a00:	4606      	mov	r6, r0
 8008a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d06e      	beq.n	8008ae6 <_dtoa_r+0x90e>
 8008a08:	ee18 0a10 	vmov	r0, s16
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	f000 fc83 	bl	8009318 <__mcmp>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	da67      	bge.n	8008ae6 <_dtoa_r+0x90e>
 8008a16:	9b00      	ldr	r3, [sp, #0]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	ee18 1a10 	vmov	r1, s16
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	220a      	movs	r2, #10
 8008a22:	2300      	movs	r3, #0
 8008a24:	4620      	mov	r0, r4
 8008a26:	f000 fa57 	bl	8008ed8 <__multadd>
 8008a2a:	9b08      	ldr	r3, [sp, #32]
 8008a2c:	ee08 0a10 	vmov	s16, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 81b1 	beq.w	8008d98 <_dtoa_r+0xbc0>
 8008a36:	2300      	movs	r3, #0
 8008a38:	4639      	mov	r1, r7
 8008a3a:	220a      	movs	r2, #10
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f000 fa4b 	bl	8008ed8 <__multadd>
 8008a42:	9b02      	ldr	r3, [sp, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	4607      	mov	r7, r0
 8008a48:	f300 808e 	bgt.w	8008b68 <_dtoa_r+0x990>
 8008a4c:	9b06      	ldr	r3, [sp, #24]
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	dc51      	bgt.n	8008af6 <_dtoa_r+0x91e>
 8008a52:	e089      	b.n	8008b68 <_dtoa_r+0x990>
 8008a54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a5a:	e74b      	b.n	80088f4 <_dtoa_r+0x71c>
 8008a5c:	9b03      	ldr	r3, [sp, #12]
 8008a5e:	1e5e      	subs	r6, r3, #1
 8008a60:	9b07      	ldr	r3, [sp, #28]
 8008a62:	42b3      	cmp	r3, r6
 8008a64:	bfbf      	itttt	lt
 8008a66:	9b07      	ldrlt	r3, [sp, #28]
 8008a68:	9607      	strlt	r6, [sp, #28]
 8008a6a:	1af2      	sublt	r2, r6, r3
 8008a6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a6e:	bfb6      	itet	lt
 8008a70:	189b      	addlt	r3, r3, r2
 8008a72:	1b9e      	subge	r6, r3, r6
 8008a74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008a76:	9b03      	ldr	r3, [sp, #12]
 8008a78:	bfb8      	it	lt
 8008a7a:	2600      	movlt	r6, #0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	bfb7      	itett	lt
 8008a80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008a84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008a88:	1a9d      	sublt	r5, r3, r2
 8008a8a:	2300      	movlt	r3, #0
 8008a8c:	e734      	b.n	80088f8 <_dtoa_r+0x720>
 8008a8e:	9e07      	ldr	r6, [sp, #28]
 8008a90:	9d04      	ldr	r5, [sp, #16]
 8008a92:	9f08      	ldr	r7, [sp, #32]
 8008a94:	e73b      	b.n	800890e <_dtoa_r+0x736>
 8008a96:	9a07      	ldr	r2, [sp, #28]
 8008a98:	e767      	b.n	800896a <_dtoa_r+0x792>
 8008a9a:	9b06      	ldr	r3, [sp, #24]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	dc18      	bgt.n	8008ad2 <_dtoa_r+0x8fa>
 8008aa0:	f1ba 0f00 	cmp.w	sl, #0
 8008aa4:	d115      	bne.n	8008ad2 <_dtoa_r+0x8fa>
 8008aa6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008aaa:	b993      	cbnz	r3, 8008ad2 <_dtoa_r+0x8fa>
 8008aac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ab0:	0d1b      	lsrs	r3, r3, #20
 8008ab2:	051b      	lsls	r3, r3, #20
 8008ab4:	b183      	cbz	r3, 8008ad8 <_dtoa_r+0x900>
 8008ab6:	9b04      	ldr	r3, [sp, #16]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	9304      	str	r3, [sp, #16]
 8008abc:	9b05      	ldr	r3, [sp, #20]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	9305      	str	r3, [sp, #20]
 8008ac2:	f04f 0801 	mov.w	r8, #1
 8008ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f47f af6a 	bne.w	80089a2 <_dtoa_r+0x7ca>
 8008ace:	2001      	movs	r0, #1
 8008ad0:	e76f      	b.n	80089b2 <_dtoa_r+0x7da>
 8008ad2:	f04f 0800 	mov.w	r8, #0
 8008ad6:	e7f6      	b.n	8008ac6 <_dtoa_r+0x8ee>
 8008ad8:	4698      	mov	r8, r3
 8008ada:	e7f4      	b.n	8008ac6 <_dtoa_r+0x8ee>
 8008adc:	f43f af7d 	beq.w	80089da <_dtoa_r+0x802>
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	301c      	adds	r0, #28
 8008ae4:	e772      	b.n	80089cc <_dtoa_r+0x7f4>
 8008ae6:	9b03      	ldr	r3, [sp, #12]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	dc37      	bgt.n	8008b5c <_dtoa_r+0x984>
 8008aec:	9b06      	ldr	r3, [sp, #24]
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	dd34      	ble.n	8008b5c <_dtoa_r+0x984>
 8008af2:	9b03      	ldr	r3, [sp, #12]
 8008af4:	9302      	str	r3, [sp, #8]
 8008af6:	9b02      	ldr	r3, [sp, #8]
 8008af8:	b96b      	cbnz	r3, 8008b16 <_dtoa_r+0x93e>
 8008afa:	4631      	mov	r1, r6
 8008afc:	2205      	movs	r2, #5
 8008afe:	4620      	mov	r0, r4
 8008b00:	f000 f9ea 	bl	8008ed8 <__multadd>
 8008b04:	4601      	mov	r1, r0
 8008b06:	4606      	mov	r6, r0
 8008b08:	ee18 0a10 	vmov	r0, s16
 8008b0c:	f000 fc04 	bl	8009318 <__mcmp>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	f73f adbb 	bgt.w	800868c <_dtoa_r+0x4b4>
 8008b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b18:	9d01      	ldr	r5, [sp, #4]
 8008b1a:	43db      	mvns	r3, r3
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	f04f 0800 	mov.w	r8, #0
 8008b22:	4631      	mov	r1, r6
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 f9b5 	bl	8008e94 <_Bfree>
 8008b2a:	2f00      	cmp	r7, #0
 8008b2c:	f43f aea4 	beq.w	8008878 <_dtoa_r+0x6a0>
 8008b30:	f1b8 0f00 	cmp.w	r8, #0
 8008b34:	d005      	beq.n	8008b42 <_dtoa_r+0x96a>
 8008b36:	45b8      	cmp	r8, r7
 8008b38:	d003      	beq.n	8008b42 <_dtoa_r+0x96a>
 8008b3a:	4641      	mov	r1, r8
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f000 f9a9 	bl	8008e94 <_Bfree>
 8008b42:	4639      	mov	r1, r7
 8008b44:	4620      	mov	r0, r4
 8008b46:	f000 f9a5 	bl	8008e94 <_Bfree>
 8008b4a:	e695      	b.n	8008878 <_dtoa_r+0x6a0>
 8008b4c:	2600      	movs	r6, #0
 8008b4e:	4637      	mov	r7, r6
 8008b50:	e7e1      	b.n	8008b16 <_dtoa_r+0x93e>
 8008b52:	9700      	str	r7, [sp, #0]
 8008b54:	4637      	mov	r7, r6
 8008b56:	e599      	b.n	800868c <_dtoa_r+0x4b4>
 8008b58:	40240000 	.word	0x40240000
 8008b5c:	9b08      	ldr	r3, [sp, #32]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f000 80ca 	beq.w	8008cf8 <_dtoa_r+0xb20>
 8008b64:	9b03      	ldr	r3, [sp, #12]
 8008b66:	9302      	str	r3, [sp, #8]
 8008b68:	2d00      	cmp	r5, #0
 8008b6a:	dd05      	ble.n	8008b78 <_dtoa_r+0x9a0>
 8008b6c:	4639      	mov	r1, r7
 8008b6e:	462a      	mov	r2, r5
 8008b70:	4620      	mov	r0, r4
 8008b72:	f000 fb61 	bl	8009238 <__lshift>
 8008b76:	4607      	mov	r7, r0
 8008b78:	f1b8 0f00 	cmp.w	r8, #0
 8008b7c:	d05b      	beq.n	8008c36 <_dtoa_r+0xa5e>
 8008b7e:	6879      	ldr	r1, [r7, #4]
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 f947 	bl	8008e14 <_Balloc>
 8008b86:	4605      	mov	r5, r0
 8008b88:	b928      	cbnz	r0, 8008b96 <_dtoa_r+0x9be>
 8008b8a:	4b87      	ldr	r3, [pc, #540]	; (8008da8 <_dtoa_r+0xbd0>)
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b92:	f7ff bb3b 	b.w	800820c <_dtoa_r+0x34>
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	3202      	adds	r2, #2
 8008b9a:	0092      	lsls	r2, r2, #2
 8008b9c:	f107 010c 	add.w	r1, r7, #12
 8008ba0:	300c      	adds	r0, #12
 8008ba2:	f000 f91d 	bl	8008de0 <memcpy>
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	4629      	mov	r1, r5
 8008baa:	4620      	mov	r0, r4
 8008bac:	f000 fb44 	bl	8009238 <__lshift>
 8008bb0:	9b01      	ldr	r3, [sp, #4]
 8008bb2:	f103 0901 	add.w	r9, r3, #1
 8008bb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008bba:	4413      	add	r3, r2
 8008bbc:	9305      	str	r3, [sp, #20]
 8008bbe:	f00a 0301 	and.w	r3, sl, #1
 8008bc2:	46b8      	mov	r8, r7
 8008bc4:	9304      	str	r3, [sp, #16]
 8008bc6:	4607      	mov	r7, r0
 8008bc8:	4631      	mov	r1, r6
 8008bca:	ee18 0a10 	vmov	r0, s16
 8008bce:	f7ff fa77 	bl	80080c0 <quorem>
 8008bd2:	4641      	mov	r1, r8
 8008bd4:	9002      	str	r0, [sp, #8]
 8008bd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008bda:	ee18 0a10 	vmov	r0, s16
 8008bde:	f000 fb9b 	bl	8009318 <__mcmp>
 8008be2:	463a      	mov	r2, r7
 8008be4:	9003      	str	r0, [sp, #12]
 8008be6:	4631      	mov	r1, r6
 8008be8:	4620      	mov	r0, r4
 8008bea:	f000 fbb1 	bl	8009350 <__mdiff>
 8008bee:	68c2      	ldr	r2, [r0, #12]
 8008bf0:	f109 3bff 	add.w	fp, r9, #4294967295
 8008bf4:	4605      	mov	r5, r0
 8008bf6:	bb02      	cbnz	r2, 8008c3a <_dtoa_r+0xa62>
 8008bf8:	4601      	mov	r1, r0
 8008bfa:	ee18 0a10 	vmov	r0, s16
 8008bfe:	f000 fb8b 	bl	8009318 <__mcmp>
 8008c02:	4602      	mov	r2, r0
 8008c04:	4629      	mov	r1, r5
 8008c06:	4620      	mov	r0, r4
 8008c08:	9207      	str	r2, [sp, #28]
 8008c0a:	f000 f943 	bl	8008e94 <_Bfree>
 8008c0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008c12:	ea43 0102 	orr.w	r1, r3, r2
 8008c16:	9b04      	ldr	r3, [sp, #16]
 8008c18:	430b      	orrs	r3, r1
 8008c1a:	464d      	mov	r5, r9
 8008c1c:	d10f      	bne.n	8008c3e <_dtoa_r+0xa66>
 8008c1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c22:	d02a      	beq.n	8008c7a <_dtoa_r+0xaa2>
 8008c24:	9b03      	ldr	r3, [sp, #12]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	dd02      	ble.n	8008c30 <_dtoa_r+0xa58>
 8008c2a:	9b02      	ldr	r3, [sp, #8]
 8008c2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008c30:	f88b a000 	strb.w	sl, [fp]
 8008c34:	e775      	b.n	8008b22 <_dtoa_r+0x94a>
 8008c36:	4638      	mov	r0, r7
 8008c38:	e7ba      	b.n	8008bb0 <_dtoa_r+0x9d8>
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	e7e2      	b.n	8008c04 <_dtoa_r+0xa2c>
 8008c3e:	9b03      	ldr	r3, [sp, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	db04      	blt.n	8008c4e <_dtoa_r+0xa76>
 8008c44:	9906      	ldr	r1, [sp, #24]
 8008c46:	430b      	orrs	r3, r1
 8008c48:	9904      	ldr	r1, [sp, #16]
 8008c4a:	430b      	orrs	r3, r1
 8008c4c:	d122      	bne.n	8008c94 <_dtoa_r+0xabc>
 8008c4e:	2a00      	cmp	r2, #0
 8008c50:	ddee      	ble.n	8008c30 <_dtoa_r+0xa58>
 8008c52:	ee18 1a10 	vmov	r1, s16
 8008c56:	2201      	movs	r2, #1
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f000 faed 	bl	8009238 <__lshift>
 8008c5e:	4631      	mov	r1, r6
 8008c60:	ee08 0a10 	vmov	s16, r0
 8008c64:	f000 fb58 	bl	8009318 <__mcmp>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	dc03      	bgt.n	8008c74 <_dtoa_r+0xa9c>
 8008c6c:	d1e0      	bne.n	8008c30 <_dtoa_r+0xa58>
 8008c6e:	f01a 0f01 	tst.w	sl, #1
 8008c72:	d0dd      	beq.n	8008c30 <_dtoa_r+0xa58>
 8008c74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c78:	d1d7      	bne.n	8008c2a <_dtoa_r+0xa52>
 8008c7a:	2339      	movs	r3, #57	; 0x39
 8008c7c:	f88b 3000 	strb.w	r3, [fp]
 8008c80:	462b      	mov	r3, r5
 8008c82:	461d      	mov	r5, r3
 8008c84:	3b01      	subs	r3, #1
 8008c86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c8a:	2a39      	cmp	r2, #57	; 0x39
 8008c8c:	d071      	beq.n	8008d72 <_dtoa_r+0xb9a>
 8008c8e:	3201      	adds	r2, #1
 8008c90:	701a      	strb	r2, [r3, #0]
 8008c92:	e746      	b.n	8008b22 <_dtoa_r+0x94a>
 8008c94:	2a00      	cmp	r2, #0
 8008c96:	dd07      	ble.n	8008ca8 <_dtoa_r+0xad0>
 8008c98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c9c:	d0ed      	beq.n	8008c7a <_dtoa_r+0xaa2>
 8008c9e:	f10a 0301 	add.w	r3, sl, #1
 8008ca2:	f88b 3000 	strb.w	r3, [fp]
 8008ca6:	e73c      	b.n	8008b22 <_dtoa_r+0x94a>
 8008ca8:	9b05      	ldr	r3, [sp, #20]
 8008caa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008cae:	4599      	cmp	r9, r3
 8008cb0:	d047      	beq.n	8008d42 <_dtoa_r+0xb6a>
 8008cb2:	ee18 1a10 	vmov	r1, s16
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	220a      	movs	r2, #10
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f000 f90c 	bl	8008ed8 <__multadd>
 8008cc0:	45b8      	cmp	r8, r7
 8008cc2:	ee08 0a10 	vmov	s16, r0
 8008cc6:	f04f 0300 	mov.w	r3, #0
 8008cca:	f04f 020a 	mov.w	r2, #10
 8008cce:	4641      	mov	r1, r8
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	d106      	bne.n	8008ce2 <_dtoa_r+0xb0a>
 8008cd4:	f000 f900 	bl	8008ed8 <__multadd>
 8008cd8:	4680      	mov	r8, r0
 8008cda:	4607      	mov	r7, r0
 8008cdc:	f109 0901 	add.w	r9, r9, #1
 8008ce0:	e772      	b.n	8008bc8 <_dtoa_r+0x9f0>
 8008ce2:	f000 f8f9 	bl	8008ed8 <__multadd>
 8008ce6:	4639      	mov	r1, r7
 8008ce8:	4680      	mov	r8, r0
 8008cea:	2300      	movs	r3, #0
 8008cec:	220a      	movs	r2, #10
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f000 f8f2 	bl	8008ed8 <__multadd>
 8008cf4:	4607      	mov	r7, r0
 8008cf6:	e7f1      	b.n	8008cdc <_dtoa_r+0xb04>
 8008cf8:	9b03      	ldr	r3, [sp, #12]
 8008cfa:	9302      	str	r3, [sp, #8]
 8008cfc:	9d01      	ldr	r5, [sp, #4]
 8008cfe:	ee18 0a10 	vmov	r0, s16
 8008d02:	4631      	mov	r1, r6
 8008d04:	f7ff f9dc 	bl	80080c0 <quorem>
 8008d08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d0c:	9b01      	ldr	r3, [sp, #4]
 8008d0e:	f805 ab01 	strb.w	sl, [r5], #1
 8008d12:	1aea      	subs	r2, r5, r3
 8008d14:	9b02      	ldr	r3, [sp, #8]
 8008d16:	4293      	cmp	r3, r2
 8008d18:	dd09      	ble.n	8008d2e <_dtoa_r+0xb56>
 8008d1a:	ee18 1a10 	vmov	r1, s16
 8008d1e:	2300      	movs	r3, #0
 8008d20:	220a      	movs	r2, #10
 8008d22:	4620      	mov	r0, r4
 8008d24:	f000 f8d8 	bl	8008ed8 <__multadd>
 8008d28:	ee08 0a10 	vmov	s16, r0
 8008d2c:	e7e7      	b.n	8008cfe <_dtoa_r+0xb26>
 8008d2e:	9b02      	ldr	r3, [sp, #8]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	bfc8      	it	gt
 8008d34:	461d      	movgt	r5, r3
 8008d36:	9b01      	ldr	r3, [sp, #4]
 8008d38:	bfd8      	it	le
 8008d3a:	2501      	movle	r5, #1
 8008d3c:	441d      	add	r5, r3
 8008d3e:	f04f 0800 	mov.w	r8, #0
 8008d42:	ee18 1a10 	vmov	r1, s16
 8008d46:	2201      	movs	r2, #1
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f000 fa75 	bl	8009238 <__lshift>
 8008d4e:	4631      	mov	r1, r6
 8008d50:	ee08 0a10 	vmov	s16, r0
 8008d54:	f000 fae0 	bl	8009318 <__mcmp>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	dc91      	bgt.n	8008c80 <_dtoa_r+0xaa8>
 8008d5c:	d102      	bne.n	8008d64 <_dtoa_r+0xb8c>
 8008d5e:	f01a 0f01 	tst.w	sl, #1
 8008d62:	d18d      	bne.n	8008c80 <_dtoa_r+0xaa8>
 8008d64:	462b      	mov	r3, r5
 8008d66:	461d      	mov	r5, r3
 8008d68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d6c:	2a30      	cmp	r2, #48	; 0x30
 8008d6e:	d0fa      	beq.n	8008d66 <_dtoa_r+0xb8e>
 8008d70:	e6d7      	b.n	8008b22 <_dtoa_r+0x94a>
 8008d72:	9a01      	ldr	r2, [sp, #4]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d184      	bne.n	8008c82 <_dtoa_r+0xaaa>
 8008d78:	9b00      	ldr	r3, [sp, #0]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	2331      	movs	r3, #49	; 0x31
 8008d80:	7013      	strb	r3, [r2, #0]
 8008d82:	e6ce      	b.n	8008b22 <_dtoa_r+0x94a>
 8008d84:	4b09      	ldr	r3, [pc, #36]	; (8008dac <_dtoa_r+0xbd4>)
 8008d86:	f7ff ba95 	b.w	80082b4 <_dtoa_r+0xdc>
 8008d8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f47f aa6e 	bne.w	800826e <_dtoa_r+0x96>
 8008d92:	4b07      	ldr	r3, [pc, #28]	; (8008db0 <_dtoa_r+0xbd8>)
 8008d94:	f7ff ba8e 	b.w	80082b4 <_dtoa_r+0xdc>
 8008d98:	9b02      	ldr	r3, [sp, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	dcae      	bgt.n	8008cfc <_dtoa_r+0xb24>
 8008d9e:	9b06      	ldr	r3, [sp, #24]
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	f73f aea8 	bgt.w	8008af6 <_dtoa_r+0x91e>
 8008da6:	e7a9      	b.n	8008cfc <_dtoa_r+0xb24>
 8008da8:	0800d321 	.word	0x0800d321
 8008dac:	0800d4a1 	.word	0x0800d4a1
 8008db0:	0800d2a2 	.word	0x0800d2a2

08008db4 <_localeconv_r>:
 8008db4:	4800      	ldr	r0, [pc, #0]	; (8008db8 <_localeconv_r+0x4>)
 8008db6:	4770      	bx	lr
 8008db8:	20000164 	.word	0x20000164

08008dbc <_lseek_r>:
 8008dbc:	b538      	push	{r3, r4, r5, lr}
 8008dbe:	4d07      	ldr	r5, [pc, #28]	; (8008ddc <_lseek_r+0x20>)
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	4608      	mov	r0, r1
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	602a      	str	r2, [r5, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f7fa f898 	bl	8002f00 <_lseek>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d102      	bne.n	8008dda <_lseek_r+0x1e>
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	b103      	cbz	r3, 8008dda <_lseek_r+0x1e>
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	2000063c 	.word	0x2000063c

08008de0 <memcpy>:
 8008de0:	440a      	add	r2, r1
 8008de2:	4291      	cmp	r1, r2
 8008de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008de8:	d100      	bne.n	8008dec <memcpy+0xc>
 8008dea:	4770      	bx	lr
 8008dec:	b510      	push	{r4, lr}
 8008dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008df2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008df6:	4291      	cmp	r1, r2
 8008df8:	d1f9      	bne.n	8008dee <memcpy+0xe>
 8008dfa:	bd10      	pop	{r4, pc}

08008dfc <__malloc_lock>:
 8008dfc:	4801      	ldr	r0, [pc, #4]	; (8008e04 <__malloc_lock+0x8>)
 8008dfe:	f001 bb87 	b.w	800a510 <__retarget_lock_acquire_recursive>
 8008e02:	bf00      	nop
 8008e04:	20000640 	.word	0x20000640

08008e08 <__malloc_unlock>:
 8008e08:	4801      	ldr	r0, [pc, #4]	; (8008e10 <__malloc_unlock+0x8>)
 8008e0a:	f001 bb82 	b.w	800a512 <__retarget_lock_release_recursive>
 8008e0e:	bf00      	nop
 8008e10:	20000640 	.word	0x20000640

08008e14 <_Balloc>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e18:	4604      	mov	r4, r0
 8008e1a:	460d      	mov	r5, r1
 8008e1c:	b976      	cbnz	r6, 8008e3c <_Balloc+0x28>
 8008e1e:	2010      	movs	r0, #16
 8008e20:	f7fe fb30 	bl	8007484 <malloc>
 8008e24:	4602      	mov	r2, r0
 8008e26:	6260      	str	r0, [r4, #36]	; 0x24
 8008e28:	b920      	cbnz	r0, 8008e34 <_Balloc+0x20>
 8008e2a:	4b18      	ldr	r3, [pc, #96]	; (8008e8c <_Balloc+0x78>)
 8008e2c:	4818      	ldr	r0, [pc, #96]	; (8008e90 <_Balloc+0x7c>)
 8008e2e:	2166      	movs	r1, #102	; 0x66
 8008e30:	f001 f986 	bl	800a140 <__assert_func>
 8008e34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e38:	6006      	str	r6, [r0, #0]
 8008e3a:	60c6      	str	r6, [r0, #12]
 8008e3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e3e:	68f3      	ldr	r3, [r6, #12]
 8008e40:	b183      	cbz	r3, 8008e64 <_Balloc+0x50>
 8008e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e4a:	b9b8      	cbnz	r0, 8008e7c <_Balloc+0x68>
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	fa01 f605 	lsl.w	r6, r1, r5
 8008e52:	1d72      	adds	r2, r6, #5
 8008e54:	0092      	lsls	r2, r2, #2
 8008e56:	4620      	mov	r0, r4
 8008e58:	f000 fb60 	bl	800951c <_calloc_r>
 8008e5c:	b160      	cbz	r0, 8008e78 <_Balloc+0x64>
 8008e5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e62:	e00e      	b.n	8008e82 <_Balloc+0x6e>
 8008e64:	2221      	movs	r2, #33	; 0x21
 8008e66:	2104      	movs	r1, #4
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f000 fb57 	bl	800951c <_calloc_r>
 8008e6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e70:	60f0      	str	r0, [r6, #12]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1e4      	bne.n	8008e42 <_Balloc+0x2e>
 8008e78:	2000      	movs	r0, #0
 8008e7a:	bd70      	pop	{r4, r5, r6, pc}
 8008e7c:	6802      	ldr	r2, [r0, #0]
 8008e7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e82:	2300      	movs	r3, #0
 8008e84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e88:	e7f7      	b.n	8008e7a <_Balloc+0x66>
 8008e8a:	bf00      	nop
 8008e8c:	0800d2af 	.word	0x0800d2af
 8008e90:	0800d332 	.word	0x0800d332

08008e94 <_Bfree>:
 8008e94:	b570      	push	{r4, r5, r6, lr}
 8008e96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e98:	4605      	mov	r5, r0
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	b976      	cbnz	r6, 8008ebc <_Bfree+0x28>
 8008e9e:	2010      	movs	r0, #16
 8008ea0:	f7fe faf0 	bl	8007484 <malloc>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	6268      	str	r0, [r5, #36]	; 0x24
 8008ea8:	b920      	cbnz	r0, 8008eb4 <_Bfree+0x20>
 8008eaa:	4b09      	ldr	r3, [pc, #36]	; (8008ed0 <_Bfree+0x3c>)
 8008eac:	4809      	ldr	r0, [pc, #36]	; (8008ed4 <_Bfree+0x40>)
 8008eae:	218a      	movs	r1, #138	; 0x8a
 8008eb0:	f001 f946 	bl	800a140 <__assert_func>
 8008eb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008eb8:	6006      	str	r6, [r0, #0]
 8008eba:	60c6      	str	r6, [r0, #12]
 8008ebc:	b13c      	cbz	r4, 8008ece <_Bfree+0x3a>
 8008ebe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ec0:	6862      	ldr	r2, [r4, #4]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ec8:	6021      	str	r1, [r4, #0]
 8008eca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ece:	bd70      	pop	{r4, r5, r6, pc}
 8008ed0:	0800d2af 	.word	0x0800d2af
 8008ed4:	0800d332 	.word	0x0800d332

08008ed8 <__multadd>:
 8008ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008edc:	690d      	ldr	r5, [r1, #16]
 8008ede:	4607      	mov	r7, r0
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	461e      	mov	r6, r3
 8008ee4:	f101 0c14 	add.w	ip, r1, #20
 8008ee8:	2000      	movs	r0, #0
 8008eea:	f8dc 3000 	ldr.w	r3, [ip]
 8008eee:	b299      	uxth	r1, r3
 8008ef0:	fb02 6101 	mla	r1, r2, r1, r6
 8008ef4:	0c1e      	lsrs	r6, r3, #16
 8008ef6:	0c0b      	lsrs	r3, r1, #16
 8008ef8:	fb02 3306 	mla	r3, r2, r6, r3
 8008efc:	b289      	uxth	r1, r1
 8008efe:	3001      	adds	r0, #1
 8008f00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f04:	4285      	cmp	r5, r0
 8008f06:	f84c 1b04 	str.w	r1, [ip], #4
 8008f0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f0e:	dcec      	bgt.n	8008eea <__multadd+0x12>
 8008f10:	b30e      	cbz	r6, 8008f56 <__multadd+0x7e>
 8008f12:	68a3      	ldr	r3, [r4, #8]
 8008f14:	42ab      	cmp	r3, r5
 8008f16:	dc19      	bgt.n	8008f4c <__multadd+0x74>
 8008f18:	6861      	ldr	r1, [r4, #4]
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	3101      	adds	r1, #1
 8008f1e:	f7ff ff79 	bl	8008e14 <_Balloc>
 8008f22:	4680      	mov	r8, r0
 8008f24:	b928      	cbnz	r0, 8008f32 <__multadd+0x5a>
 8008f26:	4602      	mov	r2, r0
 8008f28:	4b0c      	ldr	r3, [pc, #48]	; (8008f5c <__multadd+0x84>)
 8008f2a:	480d      	ldr	r0, [pc, #52]	; (8008f60 <__multadd+0x88>)
 8008f2c:	21b5      	movs	r1, #181	; 0xb5
 8008f2e:	f001 f907 	bl	800a140 <__assert_func>
 8008f32:	6922      	ldr	r2, [r4, #16]
 8008f34:	3202      	adds	r2, #2
 8008f36:	f104 010c 	add.w	r1, r4, #12
 8008f3a:	0092      	lsls	r2, r2, #2
 8008f3c:	300c      	adds	r0, #12
 8008f3e:	f7ff ff4f 	bl	8008de0 <memcpy>
 8008f42:	4621      	mov	r1, r4
 8008f44:	4638      	mov	r0, r7
 8008f46:	f7ff ffa5 	bl	8008e94 <_Bfree>
 8008f4a:	4644      	mov	r4, r8
 8008f4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f50:	3501      	adds	r5, #1
 8008f52:	615e      	str	r6, [r3, #20]
 8008f54:	6125      	str	r5, [r4, #16]
 8008f56:	4620      	mov	r0, r4
 8008f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f5c:	0800d321 	.word	0x0800d321
 8008f60:	0800d332 	.word	0x0800d332

08008f64 <__hi0bits>:
 8008f64:	0c03      	lsrs	r3, r0, #16
 8008f66:	041b      	lsls	r3, r3, #16
 8008f68:	b9d3      	cbnz	r3, 8008fa0 <__hi0bits+0x3c>
 8008f6a:	0400      	lsls	r0, r0, #16
 8008f6c:	2310      	movs	r3, #16
 8008f6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008f72:	bf04      	itt	eq
 8008f74:	0200      	lsleq	r0, r0, #8
 8008f76:	3308      	addeq	r3, #8
 8008f78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f7c:	bf04      	itt	eq
 8008f7e:	0100      	lsleq	r0, r0, #4
 8008f80:	3304      	addeq	r3, #4
 8008f82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f86:	bf04      	itt	eq
 8008f88:	0080      	lsleq	r0, r0, #2
 8008f8a:	3302      	addeq	r3, #2
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	db05      	blt.n	8008f9c <__hi0bits+0x38>
 8008f90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f94:	f103 0301 	add.w	r3, r3, #1
 8008f98:	bf08      	it	eq
 8008f9a:	2320      	moveq	r3, #32
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	4770      	bx	lr
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	e7e4      	b.n	8008f6e <__hi0bits+0xa>

08008fa4 <__lo0bits>:
 8008fa4:	6803      	ldr	r3, [r0, #0]
 8008fa6:	f013 0207 	ands.w	r2, r3, #7
 8008faa:	4601      	mov	r1, r0
 8008fac:	d00b      	beq.n	8008fc6 <__lo0bits+0x22>
 8008fae:	07da      	lsls	r2, r3, #31
 8008fb0:	d423      	bmi.n	8008ffa <__lo0bits+0x56>
 8008fb2:	0798      	lsls	r0, r3, #30
 8008fb4:	bf49      	itett	mi
 8008fb6:	085b      	lsrmi	r3, r3, #1
 8008fb8:	089b      	lsrpl	r3, r3, #2
 8008fba:	2001      	movmi	r0, #1
 8008fbc:	600b      	strmi	r3, [r1, #0]
 8008fbe:	bf5c      	itt	pl
 8008fc0:	600b      	strpl	r3, [r1, #0]
 8008fc2:	2002      	movpl	r0, #2
 8008fc4:	4770      	bx	lr
 8008fc6:	b298      	uxth	r0, r3
 8008fc8:	b9a8      	cbnz	r0, 8008ff6 <__lo0bits+0x52>
 8008fca:	0c1b      	lsrs	r3, r3, #16
 8008fcc:	2010      	movs	r0, #16
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	b90a      	cbnz	r2, 8008fd6 <__lo0bits+0x32>
 8008fd2:	3008      	adds	r0, #8
 8008fd4:	0a1b      	lsrs	r3, r3, #8
 8008fd6:	071a      	lsls	r2, r3, #28
 8008fd8:	bf04      	itt	eq
 8008fda:	091b      	lsreq	r3, r3, #4
 8008fdc:	3004      	addeq	r0, #4
 8008fde:	079a      	lsls	r2, r3, #30
 8008fe0:	bf04      	itt	eq
 8008fe2:	089b      	lsreq	r3, r3, #2
 8008fe4:	3002      	addeq	r0, #2
 8008fe6:	07da      	lsls	r2, r3, #31
 8008fe8:	d403      	bmi.n	8008ff2 <__lo0bits+0x4e>
 8008fea:	085b      	lsrs	r3, r3, #1
 8008fec:	f100 0001 	add.w	r0, r0, #1
 8008ff0:	d005      	beq.n	8008ffe <__lo0bits+0x5a>
 8008ff2:	600b      	str	r3, [r1, #0]
 8008ff4:	4770      	bx	lr
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	e7e9      	b.n	8008fce <__lo0bits+0x2a>
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	4770      	bx	lr
 8008ffe:	2020      	movs	r0, #32
 8009000:	4770      	bx	lr
	...

08009004 <__i2b>:
 8009004:	b510      	push	{r4, lr}
 8009006:	460c      	mov	r4, r1
 8009008:	2101      	movs	r1, #1
 800900a:	f7ff ff03 	bl	8008e14 <_Balloc>
 800900e:	4602      	mov	r2, r0
 8009010:	b928      	cbnz	r0, 800901e <__i2b+0x1a>
 8009012:	4b05      	ldr	r3, [pc, #20]	; (8009028 <__i2b+0x24>)
 8009014:	4805      	ldr	r0, [pc, #20]	; (800902c <__i2b+0x28>)
 8009016:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800901a:	f001 f891 	bl	800a140 <__assert_func>
 800901e:	2301      	movs	r3, #1
 8009020:	6144      	str	r4, [r0, #20]
 8009022:	6103      	str	r3, [r0, #16]
 8009024:	bd10      	pop	{r4, pc}
 8009026:	bf00      	nop
 8009028:	0800d321 	.word	0x0800d321
 800902c:	0800d332 	.word	0x0800d332

08009030 <__multiply>:
 8009030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	4691      	mov	r9, r2
 8009036:	690a      	ldr	r2, [r1, #16]
 8009038:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800903c:	429a      	cmp	r2, r3
 800903e:	bfb8      	it	lt
 8009040:	460b      	movlt	r3, r1
 8009042:	460c      	mov	r4, r1
 8009044:	bfbc      	itt	lt
 8009046:	464c      	movlt	r4, r9
 8009048:	4699      	movlt	r9, r3
 800904a:	6927      	ldr	r7, [r4, #16]
 800904c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009050:	68a3      	ldr	r3, [r4, #8]
 8009052:	6861      	ldr	r1, [r4, #4]
 8009054:	eb07 060a 	add.w	r6, r7, sl
 8009058:	42b3      	cmp	r3, r6
 800905a:	b085      	sub	sp, #20
 800905c:	bfb8      	it	lt
 800905e:	3101      	addlt	r1, #1
 8009060:	f7ff fed8 	bl	8008e14 <_Balloc>
 8009064:	b930      	cbnz	r0, 8009074 <__multiply+0x44>
 8009066:	4602      	mov	r2, r0
 8009068:	4b44      	ldr	r3, [pc, #272]	; (800917c <__multiply+0x14c>)
 800906a:	4845      	ldr	r0, [pc, #276]	; (8009180 <__multiply+0x150>)
 800906c:	f240 115d 	movw	r1, #349	; 0x15d
 8009070:	f001 f866 	bl	800a140 <__assert_func>
 8009074:	f100 0514 	add.w	r5, r0, #20
 8009078:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800907c:	462b      	mov	r3, r5
 800907e:	2200      	movs	r2, #0
 8009080:	4543      	cmp	r3, r8
 8009082:	d321      	bcc.n	80090c8 <__multiply+0x98>
 8009084:	f104 0314 	add.w	r3, r4, #20
 8009088:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800908c:	f109 0314 	add.w	r3, r9, #20
 8009090:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009094:	9202      	str	r2, [sp, #8]
 8009096:	1b3a      	subs	r2, r7, r4
 8009098:	3a15      	subs	r2, #21
 800909a:	f022 0203 	bic.w	r2, r2, #3
 800909e:	3204      	adds	r2, #4
 80090a0:	f104 0115 	add.w	r1, r4, #21
 80090a4:	428f      	cmp	r7, r1
 80090a6:	bf38      	it	cc
 80090a8:	2204      	movcc	r2, #4
 80090aa:	9201      	str	r2, [sp, #4]
 80090ac:	9a02      	ldr	r2, [sp, #8]
 80090ae:	9303      	str	r3, [sp, #12]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d80c      	bhi.n	80090ce <__multiply+0x9e>
 80090b4:	2e00      	cmp	r6, #0
 80090b6:	dd03      	ble.n	80090c0 <__multiply+0x90>
 80090b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d05a      	beq.n	8009176 <__multiply+0x146>
 80090c0:	6106      	str	r6, [r0, #16]
 80090c2:	b005      	add	sp, #20
 80090c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c8:	f843 2b04 	str.w	r2, [r3], #4
 80090cc:	e7d8      	b.n	8009080 <__multiply+0x50>
 80090ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80090d2:	f1ba 0f00 	cmp.w	sl, #0
 80090d6:	d024      	beq.n	8009122 <__multiply+0xf2>
 80090d8:	f104 0e14 	add.w	lr, r4, #20
 80090dc:	46a9      	mov	r9, r5
 80090de:	f04f 0c00 	mov.w	ip, #0
 80090e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80090e6:	f8d9 1000 	ldr.w	r1, [r9]
 80090ea:	fa1f fb82 	uxth.w	fp, r2
 80090ee:	b289      	uxth	r1, r1
 80090f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80090f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80090f8:	f8d9 2000 	ldr.w	r2, [r9]
 80090fc:	4461      	add	r1, ip
 80090fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009102:	fb0a c20b 	mla	r2, sl, fp, ip
 8009106:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800910a:	b289      	uxth	r1, r1
 800910c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009110:	4577      	cmp	r7, lr
 8009112:	f849 1b04 	str.w	r1, [r9], #4
 8009116:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800911a:	d8e2      	bhi.n	80090e2 <__multiply+0xb2>
 800911c:	9a01      	ldr	r2, [sp, #4]
 800911e:	f845 c002 	str.w	ip, [r5, r2]
 8009122:	9a03      	ldr	r2, [sp, #12]
 8009124:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009128:	3304      	adds	r3, #4
 800912a:	f1b9 0f00 	cmp.w	r9, #0
 800912e:	d020      	beq.n	8009172 <__multiply+0x142>
 8009130:	6829      	ldr	r1, [r5, #0]
 8009132:	f104 0c14 	add.w	ip, r4, #20
 8009136:	46ae      	mov	lr, r5
 8009138:	f04f 0a00 	mov.w	sl, #0
 800913c:	f8bc b000 	ldrh.w	fp, [ip]
 8009140:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009144:	fb09 220b 	mla	r2, r9, fp, r2
 8009148:	4492      	add	sl, r2
 800914a:	b289      	uxth	r1, r1
 800914c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009150:	f84e 1b04 	str.w	r1, [lr], #4
 8009154:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009158:	f8be 1000 	ldrh.w	r1, [lr]
 800915c:	0c12      	lsrs	r2, r2, #16
 800915e:	fb09 1102 	mla	r1, r9, r2, r1
 8009162:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009166:	4567      	cmp	r7, ip
 8009168:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800916c:	d8e6      	bhi.n	800913c <__multiply+0x10c>
 800916e:	9a01      	ldr	r2, [sp, #4]
 8009170:	50a9      	str	r1, [r5, r2]
 8009172:	3504      	adds	r5, #4
 8009174:	e79a      	b.n	80090ac <__multiply+0x7c>
 8009176:	3e01      	subs	r6, #1
 8009178:	e79c      	b.n	80090b4 <__multiply+0x84>
 800917a:	bf00      	nop
 800917c:	0800d321 	.word	0x0800d321
 8009180:	0800d332 	.word	0x0800d332

08009184 <__pow5mult>:
 8009184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009188:	4615      	mov	r5, r2
 800918a:	f012 0203 	ands.w	r2, r2, #3
 800918e:	4606      	mov	r6, r0
 8009190:	460f      	mov	r7, r1
 8009192:	d007      	beq.n	80091a4 <__pow5mult+0x20>
 8009194:	4c25      	ldr	r4, [pc, #148]	; (800922c <__pow5mult+0xa8>)
 8009196:	3a01      	subs	r2, #1
 8009198:	2300      	movs	r3, #0
 800919a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800919e:	f7ff fe9b 	bl	8008ed8 <__multadd>
 80091a2:	4607      	mov	r7, r0
 80091a4:	10ad      	asrs	r5, r5, #2
 80091a6:	d03d      	beq.n	8009224 <__pow5mult+0xa0>
 80091a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80091aa:	b97c      	cbnz	r4, 80091cc <__pow5mult+0x48>
 80091ac:	2010      	movs	r0, #16
 80091ae:	f7fe f969 	bl	8007484 <malloc>
 80091b2:	4602      	mov	r2, r0
 80091b4:	6270      	str	r0, [r6, #36]	; 0x24
 80091b6:	b928      	cbnz	r0, 80091c4 <__pow5mult+0x40>
 80091b8:	4b1d      	ldr	r3, [pc, #116]	; (8009230 <__pow5mult+0xac>)
 80091ba:	481e      	ldr	r0, [pc, #120]	; (8009234 <__pow5mult+0xb0>)
 80091bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80091c0:	f000 ffbe 	bl	800a140 <__assert_func>
 80091c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091c8:	6004      	str	r4, [r0, #0]
 80091ca:	60c4      	str	r4, [r0, #12]
 80091cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80091d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091d4:	b94c      	cbnz	r4, 80091ea <__pow5mult+0x66>
 80091d6:	f240 2171 	movw	r1, #625	; 0x271
 80091da:	4630      	mov	r0, r6
 80091dc:	f7ff ff12 	bl	8009004 <__i2b>
 80091e0:	2300      	movs	r3, #0
 80091e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80091e6:	4604      	mov	r4, r0
 80091e8:	6003      	str	r3, [r0, #0]
 80091ea:	f04f 0900 	mov.w	r9, #0
 80091ee:	07eb      	lsls	r3, r5, #31
 80091f0:	d50a      	bpl.n	8009208 <__pow5mult+0x84>
 80091f2:	4639      	mov	r1, r7
 80091f4:	4622      	mov	r2, r4
 80091f6:	4630      	mov	r0, r6
 80091f8:	f7ff ff1a 	bl	8009030 <__multiply>
 80091fc:	4639      	mov	r1, r7
 80091fe:	4680      	mov	r8, r0
 8009200:	4630      	mov	r0, r6
 8009202:	f7ff fe47 	bl	8008e94 <_Bfree>
 8009206:	4647      	mov	r7, r8
 8009208:	106d      	asrs	r5, r5, #1
 800920a:	d00b      	beq.n	8009224 <__pow5mult+0xa0>
 800920c:	6820      	ldr	r0, [r4, #0]
 800920e:	b938      	cbnz	r0, 8009220 <__pow5mult+0x9c>
 8009210:	4622      	mov	r2, r4
 8009212:	4621      	mov	r1, r4
 8009214:	4630      	mov	r0, r6
 8009216:	f7ff ff0b 	bl	8009030 <__multiply>
 800921a:	6020      	str	r0, [r4, #0]
 800921c:	f8c0 9000 	str.w	r9, [r0]
 8009220:	4604      	mov	r4, r0
 8009222:	e7e4      	b.n	80091ee <__pow5mult+0x6a>
 8009224:	4638      	mov	r0, r7
 8009226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800922a:	bf00      	nop
 800922c:	0800d480 	.word	0x0800d480
 8009230:	0800d2af 	.word	0x0800d2af
 8009234:	0800d332 	.word	0x0800d332

08009238 <__lshift>:
 8009238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800923c:	460c      	mov	r4, r1
 800923e:	6849      	ldr	r1, [r1, #4]
 8009240:	6923      	ldr	r3, [r4, #16]
 8009242:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009246:	68a3      	ldr	r3, [r4, #8]
 8009248:	4607      	mov	r7, r0
 800924a:	4691      	mov	r9, r2
 800924c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009250:	f108 0601 	add.w	r6, r8, #1
 8009254:	42b3      	cmp	r3, r6
 8009256:	db0b      	blt.n	8009270 <__lshift+0x38>
 8009258:	4638      	mov	r0, r7
 800925a:	f7ff fddb 	bl	8008e14 <_Balloc>
 800925e:	4605      	mov	r5, r0
 8009260:	b948      	cbnz	r0, 8009276 <__lshift+0x3e>
 8009262:	4602      	mov	r2, r0
 8009264:	4b2a      	ldr	r3, [pc, #168]	; (8009310 <__lshift+0xd8>)
 8009266:	482b      	ldr	r0, [pc, #172]	; (8009314 <__lshift+0xdc>)
 8009268:	f240 11d9 	movw	r1, #473	; 0x1d9
 800926c:	f000 ff68 	bl	800a140 <__assert_func>
 8009270:	3101      	adds	r1, #1
 8009272:	005b      	lsls	r3, r3, #1
 8009274:	e7ee      	b.n	8009254 <__lshift+0x1c>
 8009276:	2300      	movs	r3, #0
 8009278:	f100 0114 	add.w	r1, r0, #20
 800927c:	f100 0210 	add.w	r2, r0, #16
 8009280:	4618      	mov	r0, r3
 8009282:	4553      	cmp	r3, sl
 8009284:	db37      	blt.n	80092f6 <__lshift+0xbe>
 8009286:	6920      	ldr	r0, [r4, #16]
 8009288:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800928c:	f104 0314 	add.w	r3, r4, #20
 8009290:	f019 091f 	ands.w	r9, r9, #31
 8009294:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009298:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800929c:	d02f      	beq.n	80092fe <__lshift+0xc6>
 800929e:	f1c9 0e20 	rsb	lr, r9, #32
 80092a2:	468a      	mov	sl, r1
 80092a4:	f04f 0c00 	mov.w	ip, #0
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	fa02 f209 	lsl.w	r2, r2, r9
 80092ae:	ea42 020c 	orr.w	r2, r2, ip
 80092b2:	f84a 2b04 	str.w	r2, [sl], #4
 80092b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ba:	4298      	cmp	r0, r3
 80092bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80092c0:	d8f2      	bhi.n	80092a8 <__lshift+0x70>
 80092c2:	1b03      	subs	r3, r0, r4
 80092c4:	3b15      	subs	r3, #21
 80092c6:	f023 0303 	bic.w	r3, r3, #3
 80092ca:	3304      	adds	r3, #4
 80092cc:	f104 0215 	add.w	r2, r4, #21
 80092d0:	4290      	cmp	r0, r2
 80092d2:	bf38      	it	cc
 80092d4:	2304      	movcc	r3, #4
 80092d6:	f841 c003 	str.w	ip, [r1, r3]
 80092da:	f1bc 0f00 	cmp.w	ip, #0
 80092de:	d001      	beq.n	80092e4 <__lshift+0xac>
 80092e0:	f108 0602 	add.w	r6, r8, #2
 80092e4:	3e01      	subs	r6, #1
 80092e6:	4638      	mov	r0, r7
 80092e8:	612e      	str	r6, [r5, #16]
 80092ea:	4621      	mov	r1, r4
 80092ec:	f7ff fdd2 	bl	8008e94 <_Bfree>
 80092f0:	4628      	mov	r0, r5
 80092f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80092fa:	3301      	adds	r3, #1
 80092fc:	e7c1      	b.n	8009282 <__lshift+0x4a>
 80092fe:	3904      	subs	r1, #4
 8009300:	f853 2b04 	ldr.w	r2, [r3], #4
 8009304:	f841 2f04 	str.w	r2, [r1, #4]!
 8009308:	4298      	cmp	r0, r3
 800930a:	d8f9      	bhi.n	8009300 <__lshift+0xc8>
 800930c:	e7ea      	b.n	80092e4 <__lshift+0xac>
 800930e:	bf00      	nop
 8009310:	0800d321 	.word	0x0800d321
 8009314:	0800d332 	.word	0x0800d332

08009318 <__mcmp>:
 8009318:	b530      	push	{r4, r5, lr}
 800931a:	6902      	ldr	r2, [r0, #16]
 800931c:	690c      	ldr	r4, [r1, #16]
 800931e:	1b12      	subs	r2, r2, r4
 8009320:	d10e      	bne.n	8009340 <__mcmp+0x28>
 8009322:	f100 0314 	add.w	r3, r0, #20
 8009326:	3114      	adds	r1, #20
 8009328:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800932c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009330:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009334:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009338:	42a5      	cmp	r5, r4
 800933a:	d003      	beq.n	8009344 <__mcmp+0x2c>
 800933c:	d305      	bcc.n	800934a <__mcmp+0x32>
 800933e:	2201      	movs	r2, #1
 8009340:	4610      	mov	r0, r2
 8009342:	bd30      	pop	{r4, r5, pc}
 8009344:	4283      	cmp	r3, r0
 8009346:	d3f3      	bcc.n	8009330 <__mcmp+0x18>
 8009348:	e7fa      	b.n	8009340 <__mcmp+0x28>
 800934a:	f04f 32ff 	mov.w	r2, #4294967295
 800934e:	e7f7      	b.n	8009340 <__mcmp+0x28>

08009350 <__mdiff>:
 8009350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009354:	460c      	mov	r4, r1
 8009356:	4606      	mov	r6, r0
 8009358:	4611      	mov	r1, r2
 800935a:	4620      	mov	r0, r4
 800935c:	4690      	mov	r8, r2
 800935e:	f7ff ffdb 	bl	8009318 <__mcmp>
 8009362:	1e05      	subs	r5, r0, #0
 8009364:	d110      	bne.n	8009388 <__mdiff+0x38>
 8009366:	4629      	mov	r1, r5
 8009368:	4630      	mov	r0, r6
 800936a:	f7ff fd53 	bl	8008e14 <_Balloc>
 800936e:	b930      	cbnz	r0, 800937e <__mdiff+0x2e>
 8009370:	4b3a      	ldr	r3, [pc, #232]	; (800945c <__mdiff+0x10c>)
 8009372:	4602      	mov	r2, r0
 8009374:	f240 2132 	movw	r1, #562	; 0x232
 8009378:	4839      	ldr	r0, [pc, #228]	; (8009460 <__mdiff+0x110>)
 800937a:	f000 fee1 	bl	800a140 <__assert_func>
 800937e:	2301      	movs	r3, #1
 8009380:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009384:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009388:	bfa4      	itt	ge
 800938a:	4643      	movge	r3, r8
 800938c:	46a0      	movge	r8, r4
 800938e:	4630      	mov	r0, r6
 8009390:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009394:	bfa6      	itte	ge
 8009396:	461c      	movge	r4, r3
 8009398:	2500      	movge	r5, #0
 800939a:	2501      	movlt	r5, #1
 800939c:	f7ff fd3a 	bl	8008e14 <_Balloc>
 80093a0:	b920      	cbnz	r0, 80093ac <__mdiff+0x5c>
 80093a2:	4b2e      	ldr	r3, [pc, #184]	; (800945c <__mdiff+0x10c>)
 80093a4:	4602      	mov	r2, r0
 80093a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80093aa:	e7e5      	b.n	8009378 <__mdiff+0x28>
 80093ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80093b0:	6926      	ldr	r6, [r4, #16]
 80093b2:	60c5      	str	r5, [r0, #12]
 80093b4:	f104 0914 	add.w	r9, r4, #20
 80093b8:	f108 0514 	add.w	r5, r8, #20
 80093bc:	f100 0e14 	add.w	lr, r0, #20
 80093c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80093c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80093c8:	f108 0210 	add.w	r2, r8, #16
 80093cc:	46f2      	mov	sl, lr
 80093ce:	2100      	movs	r1, #0
 80093d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80093d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80093d8:	fa1f f883 	uxth.w	r8, r3
 80093dc:	fa11 f18b 	uxtah	r1, r1, fp
 80093e0:	0c1b      	lsrs	r3, r3, #16
 80093e2:	eba1 0808 	sub.w	r8, r1, r8
 80093e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80093ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80093ee:	fa1f f888 	uxth.w	r8, r8
 80093f2:	1419      	asrs	r1, r3, #16
 80093f4:	454e      	cmp	r6, r9
 80093f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80093fa:	f84a 3b04 	str.w	r3, [sl], #4
 80093fe:	d8e7      	bhi.n	80093d0 <__mdiff+0x80>
 8009400:	1b33      	subs	r3, r6, r4
 8009402:	3b15      	subs	r3, #21
 8009404:	f023 0303 	bic.w	r3, r3, #3
 8009408:	3304      	adds	r3, #4
 800940a:	3415      	adds	r4, #21
 800940c:	42a6      	cmp	r6, r4
 800940e:	bf38      	it	cc
 8009410:	2304      	movcc	r3, #4
 8009412:	441d      	add	r5, r3
 8009414:	4473      	add	r3, lr
 8009416:	469e      	mov	lr, r3
 8009418:	462e      	mov	r6, r5
 800941a:	4566      	cmp	r6, ip
 800941c:	d30e      	bcc.n	800943c <__mdiff+0xec>
 800941e:	f10c 0203 	add.w	r2, ip, #3
 8009422:	1b52      	subs	r2, r2, r5
 8009424:	f022 0203 	bic.w	r2, r2, #3
 8009428:	3d03      	subs	r5, #3
 800942a:	45ac      	cmp	ip, r5
 800942c:	bf38      	it	cc
 800942e:	2200      	movcc	r2, #0
 8009430:	441a      	add	r2, r3
 8009432:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009436:	b17b      	cbz	r3, 8009458 <__mdiff+0x108>
 8009438:	6107      	str	r7, [r0, #16]
 800943a:	e7a3      	b.n	8009384 <__mdiff+0x34>
 800943c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009440:	fa11 f288 	uxtah	r2, r1, r8
 8009444:	1414      	asrs	r4, r2, #16
 8009446:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800944a:	b292      	uxth	r2, r2
 800944c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009450:	f84e 2b04 	str.w	r2, [lr], #4
 8009454:	1421      	asrs	r1, r4, #16
 8009456:	e7e0      	b.n	800941a <__mdiff+0xca>
 8009458:	3f01      	subs	r7, #1
 800945a:	e7ea      	b.n	8009432 <__mdiff+0xe2>
 800945c:	0800d321 	.word	0x0800d321
 8009460:	0800d332 	.word	0x0800d332

08009464 <__d2b>:
 8009464:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009468:	4689      	mov	r9, r1
 800946a:	2101      	movs	r1, #1
 800946c:	ec57 6b10 	vmov	r6, r7, d0
 8009470:	4690      	mov	r8, r2
 8009472:	f7ff fccf 	bl	8008e14 <_Balloc>
 8009476:	4604      	mov	r4, r0
 8009478:	b930      	cbnz	r0, 8009488 <__d2b+0x24>
 800947a:	4602      	mov	r2, r0
 800947c:	4b25      	ldr	r3, [pc, #148]	; (8009514 <__d2b+0xb0>)
 800947e:	4826      	ldr	r0, [pc, #152]	; (8009518 <__d2b+0xb4>)
 8009480:	f240 310a 	movw	r1, #778	; 0x30a
 8009484:	f000 fe5c 	bl	800a140 <__assert_func>
 8009488:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800948c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009490:	bb35      	cbnz	r5, 80094e0 <__d2b+0x7c>
 8009492:	2e00      	cmp	r6, #0
 8009494:	9301      	str	r3, [sp, #4]
 8009496:	d028      	beq.n	80094ea <__d2b+0x86>
 8009498:	4668      	mov	r0, sp
 800949a:	9600      	str	r6, [sp, #0]
 800949c:	f7ff fd82 	bl	8008fa4 <__lo0bits>
 80094a0:	9900      	ldr	r1, [sp, #0]
 80094a2:	b300      	cbz	r0, 80094e6 <__d2b+0x82>
 80094a4:	9a01      	ldr	r2, [sp, #4]
 80094a6:	f1c0 0320 	rsb	r3, r0, #32
 80094aa:	fa02 f303 	lsl.w	r3, r2, r3
 80094ae:	430b      	orrs	r3, r1
 80094b0:	40c2      	lsrs	r2, r0
 80094b2:	6163      	str	r3, [r4, #20]
 80094b4:	9201      	str	r2, [sp, #4]
 80094b6:	9b01      	ldr	r3, [sp, #4]
 80094b8:	61a3      	str	r3, [r4, #24]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	bf14      	ite	ne
 80094be:	2202      	movne	r2, #2
 80094c0:	2201      	moveq	r2, #1
 80094c2:	6122      	str	r2, [r4, #16]
 80094c4:	b1d5      	cbz	r5, 80094fc <__d2b+0x98>
 80094c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80094ca:	4405      	add	r5, r0
 80094cc:	f8c9 5000 	str.w	r5, [r9]
 80094d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094d4:	f8c8 0000 	str.w	r0, [r8]
 80094d8:	4620      	mov	r0, r4
 80094da:	b003      	add	sp, #12
 80094dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094e4:	e7d5      	b.n	8009492 <__d2b+0x2e>
 80094e6:	6161      	str	r1, [r4, #20]
 80094e8:	e7e5      	b.n	80094b6 <__d2b+0x52>
 80094ea:	a801      	add	r0, sp, #4
 80094ec:	f7ff fd5a 	bl	8008fa4 <__lo0bits>
 80094f0:	9b01      	ldr	r3, [sp, #4]
 80094f2:	6163      	str	r3, [r4, #20]
 80094f4:	2201      	movs	r2, #1
 80094f6:	6122      	str	r2, [r4, #16]
 80094f8:	3020      	adds	r0, #32
 80094fa:	e7e3      	b.n	80094c4 <__d2b+0x60>
 80094fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009500:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009504:	f8c9 0000 	str.w	r0, [r9]
 8009508:	6918      	ldr	r0, [r3, #16]
 800950a:	f7ff fd2b 	bl	8008f64 <__hi0bits>
 800950e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009512:	e7df      	b.n	80094d4 <__d2b+0x70>
 8009514:	0800d321 	.word	0x0800d321
 8009518:	0800d332 	.word	0x0800d332

0800951c <_calloc_r>:
 800951c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800951e:	fba1 2402 	umull	r2, r4, r1, r2
 8009522:	b94c      	cbnz	r4, 8009538 <_calloc_r+0x1c>
 8009524:	4611      	mov	r1, r2
 8009526:	9201      	str	r2, [sp, #4]
 8009528:	f7fe f828 	bl	800757c <_malloc_r>
 800952c:	9a01      	ldr	r2, [sp, #4]
 800952e:	4605      	mov	r5, r0
 8009530:	b930      	cbnz	r0, 8009540 <_calloc_r+0x24>
 8009532:	4628      	mov	r0, r5
 8009534:	b003      	add	sp, #12
 8009536:	bd30      	pop	{r4, r5, pc}
 8009538:	220c      	movs	r2, #12
 800953a:	6002      	str	r2, [r0, #0]
 800953c:	2500      	movs	r5, #0
 800953e:	e7f8      	b.n	8009532 <_calloc_r+0x16>
 8009540:	4621      	mov	r1, r4
 8009542:	f7fd ffa7 	bl	8007494 <memset>
 8009546:	e7f4      	b.n	8009532 <_calloc_r+0x16>

08009548 <__ssputs_r>:
 8009548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800954c:	688e      	ldr	r6, [r1, #8]
 800954e:	429e      	cmp	r6, r3
 8009550:	4682      	mov	sl, r0
 8009552:	460c      	mov	r4, r1
 8009554:	4690      	mov	r8, r2
 8009556:	461f      	mov	r7, r3
 8009558:	d838      	bhi.n	80095cc <__ssputs_r+0x84>
 800955a:	898a      	ldrh	r2, [r1, #12]
 800955c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009560:	d032      	beq.n	80095c8 <__ssputs_r+0x80>
 8009562:	6825      	ldr	r5, [r4, #0]
 8009564:	6909      	ldr	r1, [r1, #16]
 8009566:	eba5 0901 	sub.w	r9, r5, r1
 800956a:	6965      	ldr	r5, [r4, #20]
 800956c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009570:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009574:	3301      	adds	r3, #1
 8009576:	444b      	add	r3, r9
 8009578:	106d      	asrs	r5, r5, #1
 800957a:	429d      	cmp	r5, r3
 800957c:	bf38      	it	cc
 800957e:	461d      	movcc	r5, r3
 8009580:	0553      	lsls	r3, r2, #21
 8009582:	d531      	bpl.n	80095e8 <__ssputs_r+0xa0>
 8009584:	4629      	mov	r1, r5
 8009586:	f7fd fff9 	bl	800757c <_malloc_r>
 800958a:	4606      	mov	r6, r0
 800958c:	b950      	cbnz	r0, 80095a4 <__ssputs_r+0x5c>
 800958e:	230c      	movs	r3, #12
 8009590:	f8ca 3000 	str.w	r3, [sl]
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800959a:	81a3      	strh	r3, [r4, #12]
 800959c:	f04f 30ff 	mov.w	r0, #4294967295
 80095a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a4:	6921      	ldr	r1, [r4, #16]
 80095a6:	464a      	mov	r2, r9
 80095a8:	f7ff fc1a 	bl	8008de0 <memcpy>
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095b6:	81a3      	strh	r3, [r4, #12]
 80095b8:	6126      	str	r6, [r4, #16]
 80095ba:	6165      	str	r5, [r4, #20]
 80095bc:	444e      	add	r6, r9
 80095be:	eba5 0509 	sub.w	r5, r5, r9
 80095c2:	6026      	str	r6, [r4, #0]
 80095c4:	60a5      	str	r5, [r4, #8]
 80095c6:	463e      	mov	r6, r7
 80095c8:	42be      	cmp	r6, r7
 80095ca:	d900      	bls.n	80095ce <__ssputs_r+0x86>
 80095cc:	463e      	mov	r6, r7
 80095ce:	6820      	ldr	r0, [r4, #0]
 80095d0:	4632      	mov	r2, r6
 80095d2:	4641      	mov	r1, r8
 80095d4:	f000 ffb0 	bl	800a538 <memmove>
 80095d8:	68a3      	ldr	r3, [r4, #8]
 80095da:	1b9b      	subs	r3, r3, r6
 80095dc:	60a3      	str	r3, [r4, #8]
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	4433      	add	r3, r6
 80095e2:	6023      	str	r3, [r4, #0]
 80095e4:	2000      	movs	r0, #0
 80095e6:	e7db      	b.n	80095a0 <__ssputs_r+0x58>
 80095e8:	462a      	mov	r2, r5
 80095ea:	f000 ffbf 	bl	800a56c <_realloc_r>
 80095ee:	4606      	mov	r6, r0
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d1e1      	bne.n	80095b8 <__ssputs_r+0x70>
 80095f4:	6921      	ldr	r1, [r4, #16]
 80095f6:	4650      	mov	r0, sl
 80095f8:	f7fd ff54 	bl	80074a4 <_free_r>
 80095fc:	e7c7      	b.n	800958e <__ssputs_r+0x46>
	...

08009600 <_svfiprintf_r>:
 8009600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009604:	4698      	mov	r8, r3
 8009606:	898b      	ldrh	r3, [r1, #12]
 8009608:	061b      	lsls	r3, r3, #24
 800960a:	b09d      	sub	sp, #116	; 0x74
 800960c:	4607      	mov	r7, r0
 800960e:	460d      	mov	r5, r1
 8009610:	4614      	mov	r4, r2
 8009612:	d50e      	bpl.n	8009632 <_svfiprintf_r+0x32>
 8009614:	690b      	ldr	r3, [r1, #16]
 8009616:	b963      	cbnz	r3, 8009632 <_svfiprintf_r+0x32>
 8009618:	2140      	movs	r1, #64	; 0x40
 800961a:	f7fd ffaf 	bl	800757c <_malloc_r>
 800961e:	6028      	str	r0, [r5, #0]
 8009620:	6128      	str	r0, [r5, #16]
 8009622:	b920      	cbnz	r0, 800962e <_svfiprintf_r+0x2e>
 8009624:	230c      	movs	r3, #12
 8009626:	603b      	str	r3, [r7, #0]
 8009628:	f04f 30ff 	mov.w	r0, #4294967295
 800962c:	e0d1      	b.n	80097d2 <_svfiprintf_r+0x1d2>
 800962e:	2340      	movs	r3, #64	; 0x40
 8009630:	616b      	str	r3, [r5, #20]
 8009632:	2300      	movs	r3, #0
 8009634:	9309      	str	r3, [sp, #36]	; 0x24
 8009636:	2320      	movs	r3, #32
 8009638:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800963c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009640:	2330      	movs	r3, #48	; 0x30
 8009642:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80097ec <_svfiprintf_r+0x1ec>
 8009646:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800964a:	f04f 0901 	mov.w	r9, #1
 800964e:	4623      	mov	r3, r4
 8009650:	469a      	mov	sl, r3
 8009652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009656:	b10a      	cbz	r2, 800965c <_svfiprintf_r+0x5c>
 8009658:	2a25      	cmp	r2, #37	; 0x25
 800965a:	d1f9      	bne.n	8009650 <_svfiprintf_r+0x50>
 800965c:	ebba 0b04 	subs.w	fp, sl, r4
 8009660:	d00b      	beq.n	800967a <_svfiprintf_r+0x7a>
 8009662:	465b      	mov	r3, fp
 8009664:	4622      	mov	r2, r4
 8009666:	4629      	mov	r1, r5
 8009668:	4638      	mov	r0, r7
 800966a:	f7ff ff6d 	bl	8009548 <__ssputs_r>
 800966e:	3001      	adds	r0, #1
 8009670:	f000 80aa 	beq.w	80097c8 <_svfiprintf_r+0x1c8>
 8009674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009676:	445a      	add	r2, fp
 8009678:	9209      	str	r2, [sp, #36]	; 0x24
 800967a:	f89a 3000 	ldrb.w	r3, [sl]
 800967e:	2b00      	cmp	r3, #0
 8009680:	f000 80a2 	beq.w	80097c8 <_svfiprintf_r+0x1c8>
 8009684:	2300      	movs	r3, #0
 8009686:	f04f 32ff 	mov.w	r2, #4294967295
 800968a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800968e:	f10a 0a01 	add.w	sl, sl, #1
 8009692:	9304      	str	r3, [sp, #16]
 8009694:	9307      	str	r3, [sp, #28]
 8009696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800969a:	931a      	str	r3, [sp, #104]	; 0x68
 800969c:	4654      	mov	r4, sl
 800969e:	2205      	movs	r2, #5
 80096a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a4:	4851      	ldr	r0, [pc, #324]	; (80097ec <_svfiprintf_r+0x1ec>)
 80096a6:	f7f6 fdb3 	bl	8000210 <memchr>
 80096aa:	9a04      	ldr	r2, [sp, #16]
 80096ac:	b9d8      	cbnz	r0, 80096e6 <_svfiprintf_r+0xe6>
 80096ae:	06d0      	lsls	r0, r2, #27
 80096b0:	bf44      	itt	mi
 80096b2:	2320      	movmi	r3, #32
 80096b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096b8:	0711      	lsls	r1, r2, #28
 80096ba:	bf44      	itt	mi
 80096bc:	232b      	movmi	r3, #43	; 0x2b
 80096be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096c2:	f89a 3000 	ldrb.w	r3, [sl]
 80096c6:	2b2a      	cmp	r3, #42	; 0x2a
 80096c8:	d015      	beq.n	80096f6 <_svfiprintf_r+0xf6>
 80096ca:	9a07      	ldr	r2, [sp, #28]
 80096cc:	4654      	mov	r4, sl
 80096ce:	2000      	movs	r0, #0
 80096d0:	f04f 0c0a 	mov.w	ip, #10
 80096d4:	4621      	mov	r1, r4
 80096d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096da:	3b30      	subs	r3, #48	; 0x30
 80096dc:	2b09      	cmp	r3, #9
 80096de:	d94e      	bls.n	800977e <_svfiprintf_r+0x17e>
 80096e0:	b1b0      	cbz	r0, 8009710 <_svfiprintf_r+0x110>
 80096e2:	9207      	str	r2, [sp, #28]
 80096e4:	e014      	b.n	8009710 <_svfiprintf_r+0x110>
 80096e6:	eba0 0308 	sub.w	r3, r0, r8
 80096ea:	fa09 f303 	lsl.w	r3, r9, r3
 80096ee:	4313      	orrs	r3, r2
 80096f0:	9304      	str	r3, [sp, #16]
 80096f2:	46a2      	mov	sl, r4
 80096f4:	e7d2      	b.n	800969c <_svfiprintf_r+0x9c>
 80096f6:	9b03      	ldr	r3, [sp, #12]
 80096f8:	1d19      	adds	r1, r3, #4
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	9103      	str	r1, [sp, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	bfbb      	ittet	lt
 8009702:	425b      	neglt	r3, r3
 8009704:	f042 0202 	orrlt.w	r2, r2, #2
 8009708:	9307      	strge	r3, [sp, #28]
 800970a:	9307      	strlt	r3, [sp, #28]
 800970c:	bfb8      	it	lt
 800970e:	9204      	strlt	r2, [sp, #16]
 8009710:	7823      	ldrb	r3, [r4, #0]
 8009712:	2b2e      	cmp	r3, #46	; 0x2e
 8009714:	d10c      	bne.n	8009730 <_svfiprintf_r+0x130>
 8009716:	7863      	ldrb	r3, [r4, #1]
 8009718:	2b2a      	cmp	r3, #42	; 0x2a
 800971a:	d135      	bne.n	8009788 <_svfiprintf_r+0x188>
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	1d1a      	adds	r2, r3, #4
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	9203      	str	r2, [sp, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	bfb8      	it	lt
 8009728:	f04f 33ff 	movlt.w	r3, #4294967295
 800972c:	3402      	adds	r4, #2
 800972e:	9305      	str	r3, [sp, #20]
 8009730:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097fc <_svfiprintf_r+0x1fc>
 8009734:	7821      	ldrb	r1, [r4, #0]
 8009736:	2203      	movs	r2, #3
 8009738:	4650      	mov	r0, sl
 800973a:	f7f6 fd69 	bl	8000210 <memchr>
 800973e:	b140      	cbz	r0, 8009752 <_svfiprintf_r+0x152>
 8009740:	2340      	movs	r3, #64	; 0x40
 8009742:	eba0 000a 	sub.w	r0, r0, sl
 8009746:	fa03 f000 	lsl.w	r0, r3, r0
 800974a:	9b04      	ldr	r3, [sp, #16]
 800974c:	4303      	orrs	r3, r0
 800974e:	3401      	adds	r4, #1
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009756:	4826      	ldr	r0, [pc, #152]	; (80097f0 <_svfiprintf_r+0x1f0>)
 8009758:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800975c:	2206      	movs	r2, #6
 800975e:	f7f6 fd57 	bl	8000210 <memchr>
 8009762:	2800      	cmp	r0, #0
 8009764:	d038      	beq.n	80097d8 <_svfiprintf_r+0x1d8>
 8009766:	4b23      	ldr	r3, [pc, #140]	; (80097f4 <_svfiprintf_r+0x1f4>)
 8009768:	bb1b      	cbnz	r3, 80097b2 <_svfiprintf_r+0x1b2>
 800976a:	9b03      	ldr	r3, [sp, #12]
 800976c:	3307      	adds	r3, #7
 800976e:	f023 0307 	bic.w	r3, r3, #7
 8009772:	3308      	adds	r3, #8
 8009774:	9303      	str	r3, [sp, #12]
 8009776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009778:	4433      	add	r3, r6
 800977a:	9309      	str	r3, [sp, #36]	; 0x24
 800977c:	e767      	b.n	800964e <_svfiprintf_r+0x4e>
 800977e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009782:	460c      	mov	r4, r1
 8009784:	2001      	movs	r0, #1
 8009786:	e7a5      	b.n	80096d4 <_svfiprintf_r+0xd4>
 8009788:	2300      	movs	r3, #0
 800978a:	3401      	adds	r4, #1
 800978c:	9305      	str	r3, [sp, #20]
 800978e:	4619      	mov	r1, r3
 8009790:	f04f 0c0a 	mov.w	ip, #10
 8009794:	4620      	mov	r0, r4
 8009796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800979a:	3a30      	subs	r2, #48	; 0x30
 800979c:	2a09      	cmp	r2, #9
 800979e:	d903      	bls.n	80097a8 <_svfiprintf_r+0x1a8>
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d0c5      	beq.n	8009730 <_svfiprintf_r+0x130>
 80097a4:	9105      	str	r1, [sp, #20]
 80097a6:	e7c3      	b.n	8009730 <_svfiprintf_r+0x130>
 80097a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ac:	4604      	mov	r4, r0
 80097ae:	2301      	movs	r3, #1
 80097b0:	e7f0      	b.n	8009794 <_svfiprintf_r+0x194>
 80097b2:	ab03      	add	r3, sp, #12
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	462a      	mov	r2, r5
 80097b8:	4b0f      	ldr	r3, [pc, #60]	; (80097f8 <_svfiprintf_r+0x1f8>)
 80097ba:	a904      	add	r1, sp, #16
 80097bc:	4638      	mov	r0, r7
 80097be:	f7fd fff1 	bl	80077a4 <_printf_float>
 80097c2:	1c42      	adds	r2, r0, #1
 80097c4:	4606      	mov	r6, r0
 80097c6:	d1d6      	bne.n	8009776 <_svfiprintf_r+0x176>
 80097c8:	89ab      	ldrh	r3, [r5, #12]
 80097ca:	065b      	lsls	r3, r3, #25
 80097cc:	f53f af2c 	bmi.w	8009628 <_svfiprintf_r+0x28>
 80097d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097d2:	b01d      	add	sp, #116	; 0x74
 80097d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d8:	ab03      	add	r3, sp, #12
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	462a      	mov	r2, r5
 80097de:	4b06      	ldr	r3, [pc, #24]	; (80097f8 <_svfiprintf_r+0x1f8>)
 80097e0:	a904      	add	r1, sp, #16
 80097e2:	4638      	mov	r0, r7
 80097e4:	f7fe fa82 	bl	8007cec <_printf_i>
 80097e8:	e7eb      	b.n	80097c2 <_svfiprintf_r+0x1c2>
 80097ea:	bf00      	nop
 80097ec:	0800d48c 	.word	0x0800d48c
 80097f0:	0800d496 	.word	0x0800d496
 80097f4:	080077a5 	.word	0x080077a5
 80097f8:	08009549 	.word	0x08009549
 80097fc:	0800d492 	.word	0x0800d492

08009800 <_sungetc_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	1c4b      	adds	r3, r1, #1
 8009804:	4614      	mov	r4, r2
 8009806:	d103      	bne.n	8009810 <_sungetc_r+0x10>
 8009808:	f04f 35ff 	mov.w	r5, #4294967295
 800980c:	4628      	mov	r0, r5
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	8993      	ldrh	r3, [r2, #12]
 8009812:	f023 0320 	bic.w	r3, r3, #32
 8009816:	8193      	strh	r3, [r2, #12]
 8009818:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800981a:	6852      	ldr	r2, [r2, #4]
 800981c:	b2cd      	uxtb	r5, r1
 800981e:	b18b      	cbz	r3, 8009844 <_sungetc_r+0x44>
 8009820:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009822:	4293      	cmp	r3, r2
 8009824:	dd08      	ble.n	8009838 <_sungetc_r+0x38>
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	1e5a      	subs	r2, r3, #1
 800982a:	6022      	str	r2, [r4, #0]
 800982c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009830:	6863      	ldr	r3, [r4, #4]
 8009832:	3301      	adds	r3, #1
 8009834:	6063      	str	r3, [r4, #4]
 8009836:	e7e9      	b.n	800980c <_sungetc_r+0xc>
 8009838:	4621      	mov	r1, r4
 800983a:	f000 fc47 	bl	800a0cc <__submore>
 800983e:	2800      	cmp	r0, #0
 8009840:	d0f1      	beq.n	8009826 <_sungetc_r+0x26>
 8009842:	e7e1      	b.n	8009808 <_sungetc_r+0x8>
 8009844:	6921      	ldr	r1, [r4, #16]
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	b151      	cbz	r1, 8009860 <_sungetc_r+0x60>
 800984a:	4299      	cmp	r1, r3
 800984c:	d208      	bcs.n	8009860 <_sungetc_r+0x60>
 800984e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009852:	42a9      	cmp	r1, r5
 8009854:	d104      	bne.n	8009860 <_sungetc_r+0x60>
 8009856:	3b01      	subs	r3, #1
 8009858:	3201      	adds	r2, #1
 800985a:	6023      	str	r3, [r4, #0]
 800985c:	6062      	str	r2, [r4, #4]
 800985e:	e7d5      	b.n	800980c <_sungetc_r+0xc>
 8009860:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009868:	6363      	str	r3, [r4, #52]	; 0x34
 800986a:	2303      	movs	r3, #3
 800986c:	63a3      	str	r3, [r4, #56]	; 0x38
 800986e:	4623      	mov	r3, r4
 8009870:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009874:	6023      	str	r3, [r4, #0]
 8009876:	2301      	movs	r3, #1
 8009878:	e7dc      	b.n	8009834 <_sungetc_r+0x34>

0800987a <__ssrefill_r>:
 800987a:	b510      	push	{r4, lr}
 800987c:	460c      	mov	r4, r1
 800987e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009880:	b169      	cbz	r1, 800989e <__ssrefill_r+0x24>
 8009882:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009886:	4299      	cmp	r1, r3
 8009888:	d001      	beq.n	800988e <__ssrefill_r+0x14>
 800988a:	f7fd fe0b 	bl	80074a4 <_free_r>
 800988e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009890:	6063      	str	r3, [r4, #4]
 8009892:	2000      	movs	r0, #0
 8009894:	6360      	str	r0, [r4, #52]	; 0x34
 8009896:	b113      	cbz	r3, 800989e <__ssrefill_r+0x24>
 8009898:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800989a:	6023      	str	r3, [r4, #0]
 800989c:	bd10      	pop	{r4, pc}
 800989e:	6923      	ldr	r3, [r4, #16]
 80098a0:	6023      	str	r3, [r4, #0]
 80098a2:	2300      	movs	r3, #0
 80098a4:	6063      	str	r3, [r4, #4]
 80098a6:	89a3      	ldrh	r3, [r4, #12]
 80098a8:	f043 0320 	orr.w	r3, r3, #32
 80098ac:	81a3      	strh	r3, [r4, #12]
 80098ae:	f04f 30ff 	mov.w	r0, #4294967295
 80098b2:	e7f3      	b.n	800989c <__ssrefill_r+0x22>

080098b4 <__ssvfiscanf_r>:
 80098b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b8:	460c      	mov	r4, r1
 80098ba:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80098be:	2100      	movs	r1, #0
 80098c0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80098c4:	49a6      	ldr	r1, [pc, #664]	; (8009b60 <__ssvfiscanf_r+0x2ac>)
 80098c6:	91a0      	str	r1, [sp, #640]	; 0x280
 80098c8:	f10d 0804 	add.w	r8, sp, #4
 80098cc:	49a5      	ldr	r1, [pc, #660]	; (8009b64 <__ssvfiscanf_r+0x2b0>)
 80098ce:	4fa6      	ldr	r7, [pc, #664]	; (8009b68 <__ssvfiscanf_r+0x2b4>)
 80098d0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009b6c <__ssvfiscanf_r+0x2b8>
 80098d4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80098d8:	4606      	mov	r6, r0
 80098da:	91a1      	str	r1, [sp, #644]	; 0x284
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	7813      	ldrb	r3, [r2, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f000 815a 	beq.w	8009b9a <__ssvfiscanf_r+0x2e6>
 80098e6:	5dd9      	ldrb	r1, [r3, r7]
 80098e8:	f011 0108 	ands.w	r1, r1, #8
 80098ec:	f102 0501 	add.w	r5, r2, #1
 80098f0:	d019      	beq.n	8009926 <__ssvfiscanf_r+0x72>
 80098f2:	6863      	ldr	r3, [r4, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dd0f      	ble.n	8009918 <__ssvfiscanf_r+0x64>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	781a      	ldrb	r2, [r3, #0]
 80098fc:	5cba      	ldrb	r2, [r7, r2]
 80098fe:	0712      	lsls	r2, r2, #28
 8009900:	d401      	bmi.n	8009906 <__ssvfiscanf_r+0x52>
 8009902:	462a      	mov	r2, r5
 8009904:	e7eb      	b.n	80098de <__ssvfiscanf_r+0x2a>
 8009906:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009908:	3201      	adds	r2, #1
 800990a:	9245      	str	r2, [sp, #276]	; 0x114
 800990c:	6862      	ldr	r2, [r4, #4]
 800990e:	3301      	adds	r3, #1
 8009910:	3a01      	subs	r2, #1
 8009912:	6062      	str	r2, [r4, #4]
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	e7ec      	b.n	80098f2 <__ssvfiscanf_r+0x3e>
 8009918:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800991a:	4621      	mov	r1, r4
 800991c:	4630      	mov	r0, r6
 800991e:	4798      	blx	r3
 8009920:	2800      	cmp	r0, #0
 8009922:	d0e9      	beq.n	80098f8 <__ssvfiscanf_r+0x44>
 8009924:	e7ed      	b.n	8009902 <__ssvfiscanf_r+0x4e>
 8009926:	2b25      	cmp	r3, #37	; 0x25
 8009928:	d012      	beq.n	8009950 <__ssvfiscanf_r+0x9c>
 800992a:	469a      	mov	sl, r3
 800992c:	6863      	ldr	r3, [r4, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	f340 8091 	ble.w	8009a56 <__ssvfiscanf_r+0x1a2>
 8009934:	6822      	ldr	r2, [r4, #0]
 8009936:	7813      	ldrb	r3, [r2, #0]
 8009938:	4553      	cmp	r3, sl
 800993a:	f040 812e 	bne.w	8009b9a <__ssvfiscanf_r+0x2e6>
 800993e:	6863      	ldr	r3, [r4, #4]
 8009940:	3b01      	subs	r3, #1
 8009942:	6063      	str	r3, [r4, #4]
 8009944:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009946:	3201      	adds	r2, #1
 8009948:	3301      	adds	r3, #1
 800994a:	6022      	str	r2, [r4, #0]
 800994c:	9345      	str	r3, [sp, #276]	; 0x114
 800994e:	e7d8      	b.n	8009902 <__ssvfiscanf_r+0x4e>
 8009950:	9141      	str	r1, [sp, #260]	; 0x104
 8009952:	9143      	str	r1, [sp, #268]	; 0x10c
 8009954:	7853      	ldrb	r3, [r2, #1]
 8009956:	2b2a      	cmp	r3, #42	; 0x2a
 8009958:	bf02      	ittt	eq
 800995a:	2310      	moveq	r3, #16
 800995c:	1c95      	addeq	r5, r2, #2
 800995e:	9341      	streq	r3, [sp, #260]	; 0x104
 8009960:	220a      	movs	r2, #10
 8009962:	46aa      	mov	sl, r5
 8009964:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009968:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800996c:	2b09      	cmp	r3, #9
 800996e:	d91d      	bls.n	80099ac <__ssvfiscanf_r+0xf8>
 8009970:	487e      	ldr	r0, [pc, #504]	; (8009b6c <__ssvfiscanf_r+0x2b8>)
 8009972:	2203      	movs	r2, #3
 8009974:	f7f6 fc4c 	bl	8000210 <memchr>
 8009978:	b140      	cbz	r0, 800998c <__ssvfiscanf_r+0xd8>
 800997a:	2301      	movs	r3, #1
 800997c:	eba0 0009 	sub.w	r0, r0, r9
 8009980:	fa03 f000 	lsl.w	r0, r3, r0
 8009984:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009986:	4318      	orrs	r0, r3
 8009988:	9041      	str	r0, [sp, #260]	; 0x104
 800998a:	4655      	mov	r5, sl
 800998c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009990:	2b78      	cmp	r3, #120	; 0x78
 8009992:	d806      	bhi.n	80099a2 <__ssvfiscanf_r+0xee>
 8009994:	2b57      	cmp	r3, #87	; 0x57
 8009996:	d810      	bhi.n	80099ba <__ssvfiscanf_r+0x106>
 8009998:	2b25      	cmp	r3, #37	; 0x25
 800999a:	d0c6      	beq.n	800992a <__ssvfiscanf_r+0x76>
 800999c:	d856      	bhi.n	8009a4c <__ssvfiscanf_r+0x198>
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d064      	beq.n	8009a6c <__ssvfiscanf_r+0x1b8>
 80099a2:	2303      	movs	r3, #3
 80099a4:	9347      	str	r3, [sp, #284]	; 0x11c
 80099a6:	230a      	movs	r3, #10
 80099a8:	9342      	str	r3, [sp, #264]	; 0x108
 80099aa:	e071      	b.n	8009a90 <__ssvfiscanf_r+0x1dc>
 80099ac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80099ae:	fb02 1103 	mla	r1, r2, r3, r1
 80099b2:	3930      	subs	r1, #48	; 0x30
 80099b4:	9143      	str	r1, [sp, #268]	; 0x10c
 80099b6:	4655      	mov	r5, sl
 80099b8:	e7d3      	b.n	8009962 <__ssvfiscanf_r+0xae>
 80099ba:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80099be:	2a20      	cmp	r2, #32
 80099c0:	d8ef      	bhi.n	80099a2 <__ssvfiscanf_r+0xee>
 80099c2:	a101      	add	r1, pc, #4	; (adr r1, 80099c8 <__ssvfiscanf_r+0x114>)
 80099c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80099c8:	08009a7b 	.word	0x08009a7b
 80099cc:	080099a3 	.word	0x080099a3
 80099d0:	080099a3 	.word	0x080099a3
 80099d4:	08009ad9 	.word	0x08009ad9
 80099d8:	080099a3 	.word	0x080099a3
 80099dc:	080099a3 	.word	0x080099a3
 80099e0:	080099a3 	.word	0x080099a3
 80099e4:	080099a3 	.word	0x080099a3
 80099e8:	080099a3 	.word	0x080099a3
 80099ec:	080099a3 	.word	0x080099a3
 80099f0:	080099a3 	.word	0x080099a3
 80099f4:	08009aef 	.word	0x08009aef
 80099f8:	08009ac5 	.word	0x08009ac5
 80099fc:	08009a53 	.word	0x08009a53
 8009a00:	08009a53 	.word	0x08009a53
 8009a04:	08009a53 	.word	0x08009a53
 8009a08:	080099a3 	.word	0x080099a3
 8009a0c:	08009ac9 	.word	0x08009ac9
 8009a10:	080099a3 	.word	0x080099a3
 8009a14:	080099a3 	.word	0x080099a3
 8009a18:	080099a3 	.word	0x080099a3
 8009a1c:	080099a3 	.word	0x080099a3
 8009a20:	08009aff 	.word	0x08009aff
 8009a24:	08009ad1 	.word	0x08009ad1
 8009a28:	08009a73 	.word	0x08009a73
 8009a2c:	080099a3 	.word	0x080099a3
 8009a30:	080099a3 	.word	0x080099a3
 8009a34:	08009afb 	.word	0x08009afb
 8009a38:	080099a3 	.word	0x080099a3
 8009a3c:	08009ac5 	.word	0x08009ac5
 8009a40:	080099a3 	.word	0x080099a3
 8009a44:	080099a3 	.word	0x080099a3
 8009a48:	08009a7b 	.word	0x08009a7b
 8009a4c:	3b45      	subs	r3, #69	; 0x45
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d8a7      	bhi.n	80099a2 <__ssvfiscanf_r+0xee>
 8009a52:	2305      	movs	r3, #5
 8009a54:	e01b      	b.n	8009a8e <__ssvfiscanf_r+0x1da>
 8009a56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009a58:	4621      	mov	r1, r4
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	4798      	blx	r3
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	f43f af68 	beq.w	8009934 <__ssvfiscanf_r+0x80>
 8009a64:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009a66:	2800      	cmp	r0, #0
 8009a68:	f040 808d 	bne.w	8009b86 <__ssvfiscanf_r+0x2d2>
 8009a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a70:	e08f      	b.n	8009b92 <__ssvfiscanf_r+0x2de>
 8009a72:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a74:	f042 0220 	orr.w	r2, r2, #32
 8009a78:	9241      	str	r2, [sp, #260]	; 0x104
 8009a7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a80:	9241      	str	r2, [sp, #260]	; 0x104
 8009a82:	2210      	movs	r2, #16
 8009a84:	2b6f      	cmp	r3, #111	; 0x6f
 8009a86:	9242      	str	r2, [sp, #264]	; 0x108
 8009a88:	bf34      	ite	cc
 8009a8a:	2303      	movcc	r3, #3
 8009a8c:	2304      	movcs	r3, #4
 8009a8e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009a90:	6863      	ldr	r3, [r4, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	dd42      	ble.n	8009b1c <__ssvfiscanf_r+0x268>
 8009a96:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009a98:	0659      	lsls	r1, r3, #25
 8009a9a:	d404      	bmi.n	8009aa6 <__ssvfiscanf_r+0x1f2>
 8009a9c:	6823      	ldr	r3, [r4, #0]
 8009a9e:	781a      	ldrb	r2, [r3, #0]
 8009aa0:	5cba      	ldrb	r2, [r7, r2]
 8009aa2:	0712      	lsls	r2, r2, #28
 8009aa4:	d441      	bmi.n	8009b2a <__ssvfiscanf_r+0x276>
 8009aa6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	dc50      	bgt.n	8009b4e <__ssvfiscanf_r+0x29a>
 8009aac:	466b      	mov	r3, sp
 8009aae:	4622      	mov	r2, r4
 8009ab0:	a941      	add	r1, sp, #260	; 0x104
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f000 f876 	bl	8009ba4 <_scanf_chars>
 8009ab8:	2801      	cmp	r0, #1
 8009aba:	d06e      	beq.n	8009b9a <__ssvfiscanf_r+0x2e6>
 8009abc:	2802      	cmp	r0, #2
 8009abe:	f47f af20 	bne.w	8009902 <__ssvfiscanf_r+0x4e>
 8009ac2:	e7cf      	b.n	8009a64 <__ssvfiscanf_r+0x1b0>
 8009ac4:	220a      	movs	r2, #10
 8009ac6:	e7dd      	b.n	8009a84 <__ssvfiscanf_r+0x1d0>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	9342      	str	r3, [sp, #264]	; 0x108
 8009acc:	2303      	movs	r3, #3
 8009ace:	e7de      	b.n	8009a8e <__ssvfiscanf_r+0x1da>
 8009ad0:	2308      	movs	r3, #8
 8009ad2:	9342      	str	r3, [sp, #264]	; 0x108
 8009ad4:	2304      	movs	r3, #4
 8009ad6:	e7da      	b.n	8009a8e <__ssvfiscanf_r+0x1da>
 8009ad8:	4629      	mov	r1, r5
 8009ada:	4640      	mov	r0, r8
 8009adc:	f000 f9c6 	bl	8009e6c <__sccl>
 8009ae0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ae6:	9341      	str	r3, [sp, #260]	; 0x104
 8009ae8:	4605      	mov	r5, r0
 8009aea:	2301      	movs	r3, #1
 8009aec:	e7cf      	b.n	8009a8e <__ssvfiscanf_r+0x1da>
 8009aee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009af4:	9341      	str	r3, [sp, #260]	; 0x104
 8009af6:	2300      	movs	r3, #0
 8009af8:	e7c9      	b.n	8009a8e <__ssvfiscanf_r+0x1da>
 8009afa:	2302      	movs	r3, #2
 8009afc:	e7c7      	b.n	8009a8e <__ssvfiscanf_r+0x1da>
 8009afe:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009b00:	06c3      	lsls	r3, r0, #27
 8009b02:	f53f aefe 	bmi.w	8009902 <__ssvfiscanf_r+0x4e>
 8009b06:	9b00      	ldr	r3, [sp, #0]
 8009b08:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009b0a:	1d19      	adds	r1, r3, #4
 8009b0c:	9100      	str	r1, [sp, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f010 0f01 	tst.w	r0, #1
 8009b14:	bf14      	ite	ne
 8009b16:	801a      	strhne	r2, [r3, #0]
 8009b18:	601a      	streq	r2, [r3, #0]
 8009b1a:	e6f2      	b.n	8009902 <__ssvfiscanf_r+0x4e>
 8009b1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009b1e:	4621      	mov	r1, r4
 8009b20:	4630      	mov	r0, r6
 8009b22:	4798      	blx	r3
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d0b6      	beq.n	8009a96 <__ssvfiscanf_r+0x1e2>
 8009b28:	e79c      	b.n	8009a64 <__ssvfiscanf_r+0x1b0>
 8009b2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009b2c:	3201      	adds	r2, #1
 8009b2e:	9245      	str	r2, [sp, #276]	; 0x114
 8009b30:	6862      	ldr	r2, [r4, #4]
 8009b32:	3a01      	subs	r2, #1
 8009b34:	2a00      	cmp	r2, #0
 8009b36:	6062      	str	r2, [r4, #4]
 8009b38:	dd02      	ble.n	8009b40 <__ssvfiscanf_r+0x28c>
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	e7ad      	b.n	8009a9c <__ssvfiscanf_r+0x1e8>
 8009b40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009b42:	4621      	mov	r1, r4
 8009b44:	4630      	mov	r0, r6
 8009b46:	4798      	blx	r3
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d0a7      	beq.n	8009a9c <__ssvfiscanf_r+0x1e8>
 8009b4c:	e78a      	b.n	8009a64 <__ssvfiscanf_r+0x1b0>
 8009b4e:	2b04      	cmp	r3, #4
 8009b50:	dc0e      	bgt.n	8009b70 <__ssvfiscanf_r+0x2bc>
 8009b52:	466b      	mov	r3, sp
 8009b54:	4622      	mov	r2, r4
 8009b56:	a941      	add	r1, sp, #260	; 0x104
 8009b58:	4630      	mov	r0, r6
 8009b5a:	f000 f87d 	bl	8009c58 <_scanf_i>
 8009b5e:	e7ab      	b.n	8009ab8 <__ssvfiscanf_r+0x204>
 8009b60:	08009801 	.word	0x08009801
 8009b64:	0800987b 	.word	0x0800987b
 8009b68:	0800d4f5 	.word	0x0800d4f5
 8009b6c:	0800d492 	.word	0x0800d492
 8009b70:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <__ssvfiscanf_r+0x2ec>)
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f43f aec5 	beq.w	8009902 <__ssvfiscanf_r+0x4e>
 8009b78:	466b      	mov	r3, sp
 8009b7a:	4622      	mov	r2, r4
 8009b7c:	a941      	add	r1, sp, #260	; 0x104
 8009b7e:	4630      	mov	r0, r6
 8009b80:	f3af 8000 	nop.w
 8009b84:	e798      	b.n	8009ab8 <__ssvfiscanf_r+0x204>
 8009b86:	89a3      	ldrh	r3, [r4, #12]
 8009b88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009b8c:	bf18      	it	ne
 8009b8e:	f04f 30ff 	movne.w	r0, #4294967295
 8009b92:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b9a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009b9c:	e7f9      	b.n	8009b92 <__ssvfiscanf_r+0x2de>
 8009b9e:	bf00      	nop
 8009ba0:	00000000 	.word	0x00000000

08009ba4 <_scanf_chars>:
 8009ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba8:	4615      	mov	r5, r2
 8009baa:	688a      	ldr	r2, [r1, #8]
 8009bac:	4680      	mov	r8, r0
 8009bae:	460c      	mov	r4, r1
 8009bb0:	b932      	cbnz	r2, 8009bc0 <_scanf_chars+0x1c>
 8009bb2:	698a      	ldr	r2, [r1, #24]
 8009bb4:	2a00      	cmp	r2, #0
 8009bb6:	bf0c      	ite	eq
 8009bb8:	2201      	moveq	r2, #1
 8009bba:	f04f 32ff 	movne.w	r2, #4294967295
 8009bbe:	608a      	str	r2, [r1, #8]
 8009bc0:	6822      	ldr	r2, [r4, #0]
 8009bc2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009c54 <_scanf_chars+0xb0>
 8009bc6:	06d1      	lsls	r1, r2, #27
 8009bc8:	bf5f      	itttt	pl
 8009bca:	681a      	ldrpl	r2, [r3, #0]
 8009bcc:	1d11      	addpl	r1, r2, #4
 8009bce:	6019      	strpl	r1, [r3, #0]
 8009bd0:	6816      	ldrpl	r6, [r2, #0]
 8009bd2:	2700      	movs	r7, #0
 8009bd4:	69a0      	ldr	r0, [r4, #24]
 8009bd6:	b188      	cbz	r0, 8009bfc <_scanf_chars+0x58>
 8009bd8:	2801      	cmp	r0, #1
 8009bda:	d107      	bne.n	8009bec <_scanf_chars+0x48>
 8009bdc:	682a      	ldr	r2, [r5, #0]
 8009bde:	7811      	ldrb	r1, [r2, #0]
 8009be0:	6962      	ldr	r2, [r4, #20]
 8009be2:	5c52      	ldrb	r2, [r2, r1]
 8009be4:	b952      	cbnz	r2, 8009bfc <_scanf_chars+0x58>
 8009be6:	2f00      	cmp	r7, #0
 8009be8:	d031      	beq.n	8009c4e <_scanf_chars+0xaa>
 8009bea:	e022      	b.n	8009c32 <_scanf_chars+0x8e>
 8009bec:	2802      	cmp	r0, #2
 8009bee:	d120      	bne.n	8009c32 <_scanf_chars+0x8e>
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009bf8:	071b      	lsls	r3, r3, #28
 8009bfa:	d41a      	bmi.n	8009c32 <_scanf_chars+0x8e>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	06da      	lsls	r2, r3, #27
 8009c00:	bf5e      	ittt	pl
 8009c02:	682b      	ldrpl	r3, [r5, #0]
 8009c04:	781b      	ldrbpl	r3, [r3, #0]
 8009c06:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009c0a:	682a      	ldr	r2, [r5, #0]
 8009c0c:	686b      	ldr	r3, [r5, #4]
 8009c0e:	3201      	adds	r2, #1
 8009c10:	602a      	str	r2, [r5, #0]
 8009c12:	68a2      	ldr	r2, [r4, #8]
 8009c14:	3b01      	subs	r3, #1
 8009c16:	3a01      	subs	r2, #1
 8009c18:	606b      	str	r3, [r5, #4]
 8009c1a:	3701      	adds	r7, #1
 8009c1c:	60a2      	str	r2, [r4, #8]
 8009c1e:	b142      	cbz	r2, 8009c32 <_scanf_chars+0x8e>
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	dcd7      	bgt.n	8009bd4 <_scanf_chars+0x30>
 8009c24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009c28:	4629      	mov	r1, r5
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	4798      	blx	r3
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	d0d0      	beq.n	8009bd4 <_scanf_chars+0x30>
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	f013 0310 	ands.w	r3, r3, #16
 8009c38:	d105      	bne.n	8009c46 <_scanf_chars+0xa2>
 8009c3a:	68e2      	ldr	r2, [r4, #12]
 8009c3c:	3201      	adds	r2, #1
 8009c3e:	60e2      	str	r2, [r4, #12]
 8009c40:	69a2      	ldr	r2, [r4, #24]
 8009c42:	b102      	cbz	r2, 8009c46 <_scanf_chars+0xa2>
 8009c44:	7033      	strb	r3, [r6, #0]
 8009c46:	6923      	ldr	r3, [r4, #16]
 8009c48:	443b      	add	r3, r7
 8009c4a:	6123      	str	r3, [r4, #16]
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c52:	bf00      	nop
 8009c54:	0800d4f5 	.word	0x0800d4f5

08009c58 <_scanf_i>:
 8009c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	4698      	mov	r8, r3
 8009c5e:	4b76      	ldr	r3, [pc, #472]	; (8009e38 <_scanf_i+0x1e0>)
 8009c60:	460c      	mov	r4, r1
 8009c62:	4682      	mov	sl, r0
 8009c64:	4616      	mov	r6, r2
 8009c66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c6a:	b087      	sub	sp, #28
 8009c6c:	ab03      	add	r3, sp, #12
 8009c6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009c72:	4b72      	ldr	r3, [pc, #456]	; (8009e3c <_scanf_i+0x1e4>)
 8009c74:	69a1      	ldr	r1, [r4, #24]
 8009c76:	4a72      	ldr	r2, [pc, #456]	; (8009e40 <_scanf_i+0x1e8>)
 8009c78:	2903      	cmp	r1, #3
 8009c7a:	bf18      	it	ne
 8009c7c:	461a      	movne	r2, r3
 8009c7e:	68a3      	ldr	r3, [r4, #8]
 8009c80:	9201      	str	r2, [sp, #4]
 8009c82:	1e5a      	subs	r2, r3, #1
 8009c84:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009c88:	bf88      	it	hi
 8009c8a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009c8e:	4627      	mov	r7, r4
 8009c90:	bf82      	ittt	hi
 8009c92:	eb03 0905 	addhi.w	r9, r3, r5
 8009c96:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009c9a:	60a3      	strhi	r3, [r4, #8]
 8009c9c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009ca0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009ca4:	bf98      	it	ls
 8009ca6:	f04f 0900 	movls.w	r9, #0
 8009caa:	6023      	str	r3, [r4, #0]
 8009cac:	463d      	mov	r5, r7
 8009cae:	f04f 0b00 	mov.w	fp, #0
 8009cb2:	6831      	ldr	r1, [r6, #0]
 8009cb4:	ab03      	add	r3, sp, #12
 8009cb6:	7809      	ldrb	r1, [r1, #0]
 8009cb8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009cbc:	2202      	movs	r2, #2
 8009cbe:	f7f6 faa7 	bl	8000210 <memchr>
 8009cc2:	b328      	cbz	r0, 8009d10 <_scanf_i+0xb8>
 8009cc4:	f1bb 0f01 	cmp.w	fp, #1
 8009cc8:	d159      	bne.n	8009d7e <_scanf_i+0x126>
 8009cca:	6862      	ldr	r2, [r4, #4]
 8009ccc:	b92a      	cbnz	r2, 8009cda <_scanf_i+0x82>
 8009cce:	6822      	ldr	r2, [r4, #0]
 8009cd0:	2308      	movs	r3, #8
 8009cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cd6:	6063      	str	r3, [r4, #4]
 8009cd8:	6022      	str	r2, [r4, #0]
 8009cda:	6822      	ldr	r2, [r4, #0]
 8009cdc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009ce0:	6022      	str	r2, [r4, #0]
 8009ce2:	68a2      	ldr	r2, [r4, #8]
 8009ce4:	1e51      	subs	r1, r2, #1
 8009ce6:	60a1      	str	r1, [r4, #8]
 8009ce8:	b192      	cbz	r2, 8009d10 <_scanf_i+0xb8>
 8009cea:	6832      	ldr	r2, [r6, #0]
 8009cec:	1c51      	adds	r1, r2, #1
 8009cee:	6031      	str	r1, [r6, #0]
 8009cf0:	7812      	ldrb	r2, [r2, #0]
 8009cf2:	f805 2b01 	strb.w	r2, [r5], #1
 8009cf6:	6872      	ldr	r2, [r6, #4]
 8009cf8:	3a01      	subs	r2, #1
 8009cfa:	2a00      	cmp	r2, #0
 8009cfc:	6072      	str	r2, [r6, #4]
 8009cfe:	dc07      	bgt.n	8009d10 <_scanf_i+0xb8>
 8009d00:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009d04:	4631      	mov	r1, r6
 8009d06:	4650      	mov	r0, sl
 8009d08:	4790      	blx	r2
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	f040 8085 	bne.w	8009e1a <_scanf_i+0x1c2>
 8009d10:	f10b 0b01 	add.w	fp, fp, #1
 8009d14:	f1bb 0f03 	cmp.w	fp, #3
 8009d18:	d1cb      	bne.n	8009cb2 <_scanf_i+0x5a>
 8009d1a:	6863      	ldr	r3, [r4, #4]
 8009d1c:	b90b      	cbnz	r3, 8009d22 <_scanf_i+0xca>
 8009d1e:	230a      	movs	r3, #10
 8009d20:	6063      	str	r3, [r4, #4]
 8009d22:	6863      	ldr	r3, [r4, #4]
 8009d24:	4947      	ldr	r1, [pc, #284]	; (8009e44 <_scanf_i+0x1ec>)
 8009d26:	6960      	ldr	r0, [r4, #20]
 8009d28:	1ac9      	subs	r1, r1, r3
 8009d2a:	f000 f89f 	bl	8009e6c <__sccl>
 8009d2e:	f04f 0b00 	mov.w	fp, #0
 8009d32:	68a3      	ldr	r3, [r4, #8]
 8009d34:	6822      	ldr	r2, [r4, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d03d      	beq.n	8009db6 <_scanf_i+0x15e>
 8009d3a:	6831      	ldr	r1, [r6, #0]
 8009d3c:	6960      	ldr	r0, [r4, #20]
 8009d3e:	f891 c000 	ldrb.w	ip, [r1]
 8009d42:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d035      	beq.n	8009db6 <_scanf_i+0x15e>
 8009d4a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009d4e:	d124      	bne.n	8009d9a <_scanf_i+0x142>
 8009d50:	0510      	lsls	r0, r2, #20
 8009d52:	d522      	bpl.n	8009d9a <_scanf_i+0x142>
 8009d54:	f10b 0b01 	add.w	fp, fp, #1
 8009d58:	f1b9 0f00 	cmp.w	r9, #0
 8009d5c:	d003      	beq.n	8009d66 <_scanf_i+0x10e>
 8009d5e:	3301      	adds	r3, #1
 8009d60:	f109 39ff 	add.w	r9, r9, #4294967295
 8009d64:	60a3      	str	r3, [r4, #8]
 8009d66:	6873      	ldr	r3, [r6, #4]
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	6073      	str	r3, [r6, #4]
 8009d6e:	dd1b      	ble.n	8009da8 <_scanf_i+0x150>
 8009d70:	6833      	ldr	r3, [r6, #0]
 8009d72:	3301      	adds	r3, #1
 8009d74:	6033      	str	r3, [r6, #0]
 8009d76:	68a3      	ldr	r3, [r4, #8]
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	60a3      	str	r3, [r4, #8]
 8009d7c:	e7d9      	b.n	8009d32 <_scanf_i+0xda>
 8009d7e:	f1bb 0f02 	cmp.w	fp, #2
 8009d82:	d1ae      	bne.n	8009ce2 <_scanf_i+0x8a>
 8009d84:	6822      	ldr	r2, [r4, #0]
 8009d86:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009d8a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009d8e:	d1bf      	bne.n	8009d10 <_scanf_i+0xb8>
 8009d90:	2310      	movs	r3, #16
 8009d92:	6063      	str	r3, [r4, #4]
 8009d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d98:	e7a2      	b.n	8009ce0 <_scanf_i+0x88>
 8009d9a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009d9e:	6022      	str	r2, [r4, #0]
 8009da0:	780b      	ldrb	r3, [r1, #0]
 8009da2:	f805 3b01 	strb.w	r3, [r5], #1
 8009da6:	e7de      	b.n	8009d66 <_scanf_i+0x10e>
 8009da8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009dac:	4631      	mov	r1, r6
 8009dae:	4650      	mov	r0, sl
 8009db0:	4798      	blx	r3
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d0df      	beq.n	8009d76 <_scanf_i+0x11e>
 8009db6:	6823      	ldr	r3, [r4, #0]
 8009db8:	05db      	lsls	r3, r3, #23
 8009dba:	d50d      	bpl.n	8009dd8 <_scanf_i+0x180>
 8009dbc:	42bd      	cmp	r5, r7
 8009dbe:	d909      	bls.n	8009dd4 <_scanf_i+0x17c>
 8009dc0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009dc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009dc8:	4632      	mov	r2, r6
 8009dca:	4650      	mov	r0, sl
 8009dcc:	4798      	blx	r3
 8009dce:	f105 39ff 	add.w	r9, r5, #4294967295
 8009dd2:	464d      	mov	r5, r9
 8009dd4:	42bd      	cmp	r5, r7
 8009dd6:	d02d      	beq.n	8009e34 <_scanf_i+0x1dc>
 8009dd8:	6822      	ldr	r2, [r4, #0]
 8009dda:	f012 0210 	ands.w	r2, r2, #16
 8009dde:	d113      	bne.n	8009e08 <_scanf_i+0x1b0>
 8009de0:	702a      	strb	r2, [r5, #0]
 8009de2:	6863      	ldr	r3, [r4, #4]
 8009de4:	9e01      	ldr	r6, [sp, #4]
 8009de6:	4639      	mov	r1, r7
 8009de8:	4650      	mov	r0, sl
 8009dea:	47b0      	blx	r6
 8009dec:	6821      	ldr	r1, [r4, #0]
 8009dee:	f8d8 3000 	ldr.w	r3, [r8]
 8009df2:	f011 0f20 	tst.w	r1, #32
 8009df6:	d013      	beq.n	8009e20 <_scanf_i+0x1c8>
 8009df8:	1d1a      	adds	r2, r3, #4
 8009dfa:	f8c8 2000 	str.w	r2, [r8]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6018      	str	r0, [r3, #0]
 8009e02:	68e3      	ldr	r3, [r4, #12]
 8009e04:	3301      	adds	r3, #1
 8009e06:	60e3      	str	r3, [r4, #12]
 8009e08:	1bed      	subs	r5, r5, r7
 8009e0a:	44ab      	add	fp, r5
 8009e0c:	6925      	ldr	r5, [r4, #16]
 8009e0e:	445d      	add	r5, fp
 8009e10:	6125      	str	r5, [r4, #16]
 8009e12:	2000      	movs	r0, #0
 8009e14:	b007      	add	sp, #28
 8009e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1a:	f04f 0b00 	mov.w	fp, #0
 8009e1e:	e7ca      	b.n	8009db6 <_scanf_i+0x15e>
 8009e20:	1d1a      	adds	r2, r3, #4
 8009e22:	f8c8 2000 	str.w	r2, [r8]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f011 0f01 	tst.w	r1, #1
 8009e2c:	bf14      	ite	ne
 8009e2e:	8018      	strhne	r0, [r3, #0]
 8009e30:	6018      	streq	r0, [r3, #0]
 8009e32:	e7e6      	b.n	8009e02 <_scanf_i+0x1aa>
 8009e34:	2001      	movs	r0, #1
 8009e36:	e7ed      	b.n	8009e14 <_scanf_i+0x1bc>
 8009e38:	0800d250 	.word	0x0800d250
 8009e3c:	0800a0c9 	.word	0x0800a0c9
 8009e40:	08009fe1 	.word	0x08009fe1
 8009e44:	0800d4b6 	.word	0x0800d4b6

08009e48 <_read_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4d07      	ldr	r5, [pc, #28]	; (8009e68 <_read_r+0x20>)
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	4608      	mov	r0, r1
 8009e50:	4611      	mov	r1, r2
 8009e52:	2200      	movs	r2, #0
 8009e54:	602a      	str	r2, [r5, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	f7f8 fff2 	bl	8002e40 <_read>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	d102      	bne.n	8009e66 <_read_r+0x1e>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	b103      	cbz	r3, 8009e66 <_read_r+0x1e>
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	bd38      	pop	{r3, r4, r5, pc}
 8009e68:	2000063c 	.word	0x2000063c

08009e6c <__sccl>:
 8009e6c:	b570      	push	{r4, r5, r6, lr}
 8009e6e:	780b      	ldrb	r3, [r1, #0]
 8009e70:	4604      	mov	r4, r0
 8009e72:	2b5e      	cmp	r3, #94	; 0x5e
 8009e74:	bf0b      	itete	eq
 8009e76:	784b      	ldrbeq	r3, [r1, #1]
 8009e78:	1c48      	addne	r0, r1, #1
 8009e7a:	1c88      	addeq	r0, r1, #2
 8009e7c:	2200      	movne	r2, #0
 8009e7e:	bf08      	it	eq
 8009e80:	2201      	moveq	r2, #1
 8009e82:	1e61      	subs	r1, r4, #1
 8009e84:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009e88:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009e8c:	42a9      	cmp	r1, r5
 8009e8e:	d1fb      	bne.n	8009e88 <__sccl+0x1c>
 8009e90:	b90b      	cbnz	r3, 8009e96 <__sccl+0x2a>
 8009e92:	3801      	subs	r0, #1
 8009e94:	bd70      	pop	{r4, r5, r6, pc}
 8009e96:	f082 0201 	eor.w	r2, r2, #1
 8009e9a:	54e2      	strb	r2, [r4, r3]
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009ea4:	292d      	cmp	r1, #45	; 0x2d
 8009ea6:	d006      	beq.n	8009eb6 <__sccl+0x4a>
 8009ea8:	295d      	cmp	r1, #93	; 0x5d
 8009eaa:	d0f3      	beq.n	8009e94 <__sccl+0x28>
 8009eac:	b909      	cbnz	r1, 8009eb2 <__sccl+0x46>
 8009eae:	4628      	mov	r0, r5
 8009eb0:	e7f0      	b.n	8009e94 <__sccl+0x28>
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	e7f1      	b.n	8009e9a <__sccl+0x2e>
 8009eb6:	786e      	ldrb	r6, [r5, #1]
 8009eb8:	2e5d      	cmp	r6, #93	; 0x5d
 8009eba:	d0fa      	beq.n	8009eb2 <__sccl+0x46>
 8009ebc:	42b3      	cmp	r3, r6
 8009ebe:	dcf8      	bgt.n	8009eb2 <__sccl+0x46>
 8009ec0:	3502      	adds	r5, #2
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	3101      	adds	r1, #1
 8009ec6:	428e      	cmp	r6, r1
 8009ec8:	5462      	strb	r2, [r4, r1]
 8009eca:	dcfb      	bgt.n	8009ec4 <__sccl+0x58>
 8009ecc:	1af1      	subs	r1, r6, r3
 8009ece:	3901      	subs	r1, #1
 8009ed0:	1c58      	adds	r0, r3, #1
 8009ed2:	42b3      	cmp	r3, r6
 8009ed4:	bfa8      	it	ge
 8009ed6:	2100      	movge	r1, #0
 8009ed8:	1843      	adds	r3, r0, r1
 8009eda:	e7e0      	b.n	8009e9e <__sccl+0x32>

08009edc <_strtol_l.constprop.0>:
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee2:	d001      	beq.n	8009ee8 <_strtol_l.constprop.0+0xc>
 8009ee4:	2b24      	cmp	r3, #36	; 0x24
 8009ee6:	d906      	bls.n	8009ef6 <_strtol_l.constprop.0+0x1a>
 8009ee8:	f7fd faa2 	bl	8007430 <__errno>
 8009eec:	2316      	movs	r3, #22
 8009eee:	6003      	str	r3, [r0, #0]
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ef6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009fdc <_strtol_l.constprop.0+0x100>
 8009efa:	460d      	mov	r5, r1
 8009efc:	462e      	mov	r6, r5
 8009efe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f02:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009f06:	f017 0708 	ands.w	r7, r7, #8
 8009f0a:	d1f7      	bne.n	8009efc <_strtol_l.constprop.0+0x20>
 8009f0c:	2c2d      	cmp	r4, #45	; 0x2d
 8009f0e:	d132      	bne.n	8009f76 <_strtol_l.constprop.0+0x9a>
 8009f10:	782c      	ldrb	r4, [r5, #0]
 8009f12:	2701      	movs	r7, #1
 8009f14:	1cb5      	adds	r5, r6, #2
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d05b      	beq.n	8009fd2 <_strtol_l.constprop.0+0xf6>
 8009f1a:	2b10      	cmp	r3, #16
 8009f1c:	d109      	bne.n	8009f32 <_strtol_l.constprop.0+0x56>
 8009f1e:	2c30      	cmp	r4, #48	; 0x30
 8009f20:	d107      	bne.n	8009f32 <_strtol_l.constprop.0+0x56>
 8009f22:	782c      	ldrb	r4, [r5, #0]
 8009f24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009f28:	2c58      	cmp	r4, #88	; 0x58
 8009f2a:	d14d      	bne.n	8009fc8 <_strtol_l.constprop.0+0xec>
 8009f2c:	786c      	ldrb	r4, [r5, #1]
 8009f2e:	2310      	movs	r3, #16
 8009f30:	3502      	adds	r5, #2
 8009f32:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009f36:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f3a:	f04f 0c00 	mov.w	ip, #0
 8009f3e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009f42:	4666      	mov	r6, ip
 8009f44:	fb03 8a19 	mls	sl, r3, r9, r8
 8009f48:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009f4c:	f1be 0f09 	cmp.w	lr, #9
 8009f50:	d816      	bhi.n	8009f80 <_strtol_l.constprop.0+0xa4>
 8009f52:	4674      	mov	r4, lr
 8009f54:	42a3      	cmp	r3, r4
 8009f56:	dd24      	ble.n	8009fa2 <_strtol_l.constprop.0+0xc6>
 8009f58:	f1bc 0f00 	cmp.w	ip, #0
 8009f5c:	db1e      	blt.n	8009f9c <_strtol_l.constprop.0+0xc0>
 8009f5e:	45b1      	cmp	r9, r6
 8009f60:	d31c      	bcc.n	8009f9c <_strtol_l.constprop.0+0xc0>
 8009f62:	d101      	bne.n	8009f68 <_strtol_l.constprop.0+0x8c>
 8009f64:	45a2      	cmp	sl, r4
 8009f66:	db19      	blt.n	8009f9c <_strtol_l.constprop.0+0xc0>
 8009f68:	fb06 4603 	mla	r6, r6, r3, r4
 8009f6c:	f04f 0c01 	mov.w	ip, #1
 8009f70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f74:	e7e8      	b.n	8009f48 <_strtol_l.constprop.0+0x6c>
 8009f76:	2c2b      	cmp	r4, #43	; 0x2b
 8009f78:	bf04      	itt	eq
 8009f7a:	782c      	ldrbeq	r4, [r5, #0]
 8009f7c:	1cb5      	addeq	r5, r6, #2
 8009f7e:	e7ca      	b.n	8009f16 <_strtol_l.constprop.0+0x3a>
 8009f80:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009f84:	f1be 0f19 	cmp.w	lr, #25
 8009f88:	d801      	bhi.n	8009f8e <_strtol_l.constprop.0+0xb2>
 8009f8a:	3c37      	subs	r4, #55	; 0x37
 8009f8c:	e7e2      	b.n	8009f54 <_strtol_l.constprop.0+0x78>
 8009f8e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009f92:	f1be 0f19 	cmp.w	lr, #25
 8009f96:	d804      	bhi.n	8009fa2 <_strtol_l.constprop.0+0xc6>
 8009f98:	3c57      	subs	r4, #87	; 0x57
 8009f9a:	e7db      	b.n	8009f54 <_strtol_l.constprop.0+0x78>
 8009f9c:	f04f 3cff 	mov.w	ip, #4294967295
 8009fa0:	e7e6      	b.n	8009f70 <_strtol_l.constprop.0+0x94>
 8009fa2:	f1bc 0f00 	cmp.w	ip, #0
 8009fa6:	da05      	bge.n	8009fb4 <_strtol_l.constprop.0+0xd8>
 8009fa8:	2322      	movs	r3, #34	; 0x22
 8009faa:	6003      	str	r3, [r0, #0]
 8009fac:	4646      	mov	r6, r8
 8009fae:	b942      	cbnz	r2, 8009fc2 <_strtol_l.constprop.0+0xe6>
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	e79e      	b.n	8009ef2 <_strtol_l.constprop.0+0x16>
 8009fb4:	b107      	cbz	r7, 8009fb8 <_strtol_l.constprop.0+0xdc>
 8009fb6:	4276      	negs	r6, r6
 8009fb8:	2a00      	cmp	r2, #0
 8009fba:	d0f9      	beq.n	8009fb0 <_strtol_l.constprop.0+0xd4>
 8009fbc:	f1bc 0f00 	cmp.w	ip, #0
 8009fc0:	d000      	beq.n	8009fc4 <_strtol_l.constprop.0+0xe8>
 8009fc2:	1e69      	subs	r1, r5, #1
 8009fc4:	6011      	str	r1, [r2, #0]
 8009fc6:	e7f3      	b.n	8009fb0 <_strtol_l.constprop.0+0xd4>
 8009fc8:	2430      	movs	r4, #48	; 0x30
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1b1      	bne.n	8009f32 <_strtol_l.constprop.0+0x56>
 8009fce:	2308      	movs	r3, #8
 8009fd0:	e7af      	b.n	8009f32 <_strtol_l.constprop.0+0x56>
 8009fd2:	2c30      	cmp	r4, #48	; 0x30
 8009fd4:	d0a5      	beq.n	8009f22 <_strtol_l.constprop.0+0x46>
 8009fd6:	230a      	movs	r3, #10
 8009fd8:	e7ab      	b.n	8009f32 <_strtol_l.constprop.0+0x56>
 8009fda:	bf00      	nop
 8009fdc:	0800d4f5 	.word	0x0800d4f5

08009fe0 <_strtol_r>:
 8009fe0:	f7ff bf7c 	b.w	8009edc <_strtol_l.constprop.0>

08009fe4 <_strtoul_l.constprop.0>:
 8009fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fe8:	4f36      	ldr	r7, [pc, #216]	; (800a0c4 <_strtoul_l.constprop.0+0xe0>)
 8009fea:	4686      	mov	lr, r0
 8009fec:	460d      	mov	r5, r1
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ff4:	5de6      	ldrb	r6, [r4, r7]
 8009ff6:	f016 0608 	ands.w	r6, r6, #8
 8009ffa:	d1f8      	bne.n	8009fee <_strtoul_l.constprop.0+0xa>
 8009ffc:	2c2d      	cmp	r4, #45	; 0x2d
 8009ffe:	d12f      	bne.n	800a060 <_strtoul_l.constprop.0+0x7c>
 800a000:	782c      	ldrb	r4, [r5, #0]
 800a002:	2601      	movs	r6, #1
 800a004:	1c85      	adds	r5, r0, #2
 800a006:	2b00      	cmp	r3, #0
 800a008:	d057      	beq.n	800a0ba <_strtoul_l.constprop.0+0xd6>
 800a00a:	2b10      	cmp	r3, #16
 800a00c:	d109      	bne.n	800a022 <_strtoul_l.constprop.0+0x3e>
 800a00e:	2c30      	cmp	r4, #48	; 0x30
 800a010:	d107      	bne.n	800a022 <_strtoul_l.constprop.0+0x3e>
 800a012:	7828      	ldrb	r0, [r5, #0]
 800a014:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a018:	2858      	cmp	r0, #88	; 0x58
 800a01a:	d149      	bne.n	800a0b0 <_strtoul_l.constprop.0+0xcc>
 800a01c:	786c      	ldrb	r4, [r5, #1]
 800a01e:	2310      	movs	r3, #16
 800a020:	3502      	adds	r5, #2
 800a022:	f04f 38ff 	mov.w	r8, #4294967295
 800a026:	2700      	movs	r7, #0
 800a028:	fbb8 f8f3 	udiv	r8, r8, r3
 800a02c:	fb03 f908 	mul.w	r9, r3, r8
 800a030:	ea6f 0909 	mvn.w	r9, r9
 800a034:	4638      	mov	r0, r7
 800a036:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a03a:	f1bc 0f09 	cmp.w	ip, #9
 800a03e:	d814      	bhi.n	800a06a <_strtoul_l.constprop.0+0x86>
 800a040:	4664      	mov	r4, ip
 800a042:	42a3      	cmp	r3, r4
 800a044:	dd22      	ble.n	800a08c <_strtoul_l.constprop.0+0xa8>
 800a046:	2f00      	cmp	r7, #0
 800a048:	db1d      	blt.n	800a086 <_strtoul_l.constprop.0+0xa2>
 800a04a:	4580      	cmp	r8, r0
 800a04c:	d31b      	bcc.n	800a086 <_strtoul_l.constprop.0+0xa2>
 800a04e:	d101      	bne.n	800a054 <_strtoul_l.constprop.0+0x70>
 800a050:	45a1      	cmp	r9, r4
 800a052:	db18      	blt.n	800a086 <_strtoul_l.constprop.0+0xa2>
 800a054:	fb00 4003 	mla	r0, r0, r3, r4
 800a058:	2701      	movs	r7, #1
 800a05a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a05e:	e7ea      	b.n	800a036 <_strtoul_l.constprop.0+0x52>
 800a060:	2c2b      	cmp	r4, #43	; 0x2b
 800a062:	bf04      	itt	eq
 800a064:	782c      	ldrbeq	r4, [r5, #0]
 800a066:	1c85      	addeq	r5, r0, #2
 800a068:	e7cd      	b.n	800a006 <_strtoul_l.constprop.0+0x22>
 800a06a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a06e:	f1bc 0f19 	cmp.w	ip, #25
 800a072:	d801      	bhi.n	800a078 <_strtoul_l.constprop.0+0x94>
 800a074:	3c37      	subs	r4, #55	; 0x37
 800a076:	e7e4      	b.n	800a042 <_strtoul_l.constprop.0+0x5e>
 800a078:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a07c:	f1bc 0f19 	cmp.w	ip, #25
 800a080:	d804      	bhi.n	800a08c <_strtoul_l.constprop.0+0xa8>
 800a082:	3c57      	subs	r4, #87	; 0x57
 800a084:	e7dd      	b.n	800a042 <_strtoul_l.constprop.0+0x5e>
 800a086:	f04f 37ff 	mov.w	r7, #4294967295
 800a08a:	e7e6      	b.n	800a05a <_strtoul_l.constprop.0+0x76>
 800a08c:	2f00      	cmp	r7, #0
 800a08e:	da07      	bge.n	800a0a0 <_strtoul_l.constprop.0+0xbc>
 800a090:	2322      	movs	r3, #34	; 0x22
 800a092:	f8ce 3000 	str.w	r3, [lr]
 800a096:	f04f 30ff 	mov.w	r0, #4294967295
 800a09a:	b932      	cbnz	r2, 800a0aa <_strtoul_l.constprop.0+0xc6>
 800a09c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0a0:	b106      	cbz	r6, 800a0a4 <_strtoul_l.constprop.0+0xc0>
 800a0a2:	4240      	negs	r0, r0
 800a0a4:	2a00      	cmp	r2, #0
 800a0a6:	d0f9      	beq.n	800a09c <_strtoul_l.constprop.0+0xb8>
 800a0a8:	b107      	cbz	r7, 800a0ac <_strtoul_l.constprop.0+0xc8>
 800a0aa:	1e69      	subs	r1, r5, #1
 800a0ac:	6011      	str	r1, [r2, #0]
 800a0ae:	e7f5      	b.n	800a09c <_strtoul_l.constprop.0+0xb8>
 800a0b0:	2430      	movs	r4, #48	; 0x30
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1b5      	bne.n	800a022 <_strtoul_l.constprop.0+0x3e>
 800a0b6:	2308      	movs	r3, #8
 800a0b8:	e7b3      	b.n	800a022 <_strtoul_l.constprop.0+0x3e>
 800a0ba:	2c30      	cmp	r4, #48	; 0x30
 800a0bc:	d0a9      	beq.n	800a012 <_strtoul_l.constprop.0+0x2e>
 800a0be:	230a      	movs	r3, #10
 800a0c0:	e7af      	b.n	800a022 <_strtoul_l.constprop.0+0x3e>
 800a0c2:	bf00      	nop
 800a0c4:	0800d4f5 	.word	0x0800d4f5

0800a0c8 <_strtoul_r>:
 800a0c8:	f7ff bf8c 	b.w	8009fe4 <_strtoul_l.constprop.0>

0800a0cc <__submore>:
 800a0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a0d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0d8:	4299      	cmp	r1, r3
 800a0da:	d11d      	bne.n	800a118 <__submore+0x4c>
 800a0dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a0e0:	f7fd fa4c 	bl	800757c <_malloc_r>
 800a0e4:	b918      	cbnz	r0, 800a0ee <__submore+0x22>
 800a0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0f2:	63a3      	str	r3, [r4, #56]	; 0x38
 800a0f4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a0f8:	6360      	str	r0, [r4, #52]	; 0x34
 800a0fa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a0fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a102:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a106:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a10a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a10e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a112:	6020      	str	r0, [r4, #0]
 800a114:	2000      	movs	r0, #0
 800a116:	e7e8      	b.n	800a0ea <__submore+0x1e>
 800a118:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a11a:	0077      	lsls	r7, r6, #1
 800a11c:	463a      	mov	r2, r7
 800a11e:	f000 fa25 	bl	800a56c <_realloc_r>
 800a122:	4605      	mov	r5, r0
 800a124:	2800      	cmp	r0, #0
 800a126:	d0de      	beq.n	800a0e6 <__submore+0x1a>
 800a128:	eb00 0806 	add.w	r8, r0, r6
 800a12c:	4601      	mov	r1, r0
 800a12e:	4632      	mov	r2, r6
 800a130:	4640      	mov	r0, r8
 800a132:	f7fe fe55 	bl	8008de0 <memcpy>
 800a136:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a13a:	f8c4 8000 	str.w	r8, [r4]
 800a13e:	e7e9      	b.n	800a114 <__submore+0x48>

0800a140 <__assert_func>:
 800a140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a142:	4614      	mov	r4, r2
 800a144:	461a      	mov	r2, r3
 800a146:	4b09      	ldr	r3, [pc, #36]	; (800a16c <__assert_func+0x2c>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4605      	mov	r5, r0
 800a14c:	68d8      	ldr	r0, [r3, #12]
 800a14e:	b14c      	cbz	r4, 800a164 <__assert_func+0x24>
 800a150:	4b07      	ldr	r3, [pc, #28]	; (800a170 <__assert_func+0x30>)
 800a152:	9100      	str	r1, [sp, #0]
 800a154:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a158:	4906      	ldr	r1, [pc, #24]	; (800a174 <__assert_func+0x34>)
 800a15a:	462b      	mov	r3, r5
 800a15c:	f000 f9a6 	bl	800a4ac <fiprintf>
 800a160:	f000 fc5a 	bl	800aa18 <abort>
 800a164:	4b04      	ldr	r3, [pc, #16]	; (800a178 <__assert_func+0x38>)
 800a166:	461c      	mov	r4, r3
 800a168:	e7f3      	b.n	800a152 <__assert_func+0x12>
 800a16a:	bf00      	nop
 800a16c:	20000010 	.word	0x20000010
 800a170:	0800d4b8 	.word	0x0800d4b8
 800a174:	0800d4c5 	.word	0x0800d4c5
 800a178:	0800d4f3 	.word	0x0800d4f3

0800a17c <__sflush_r>:
 800a17c:	898a      	ldrh	r2, [r1, #12]
 800a17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a182:	4605      	mov	r5, r0
 800a184:	0710      	lsls	r0, r2, #28
 800a186:	460c      	mov	r4, r1
 800a188:	d458      	bmi.n	800a23c <__sflush_r+0xc0>
 800a18a:	684b      	ldr	r3, [r1, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	dc05      	bgt.n	800a19c <__sflush_r+0x20>
 800a190:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a192:	2b00      	cmp	r3, #0
 800a194:	dc02      	bgt.n	800a19c <__sflush_r+0x20>
 800a196:	2000      	movs	r0, #0
 800a198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a19c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a19e:	2e00      	cmp	r6, #0
 800a1a0:	d0f9      	beq.n	800a196 <__sflush_r+0x1a>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1a8:	682f      	ldr	r7, [r5, #0]
 800a1aa:	602b      	str	r3, [r5, #0]
 800a1ac:	d032      	beq.n	800a214 <__sflush_r+0x98>
 800a1ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	075a      	lsls	r2, r3, #29
 800a1b4:	d505      	bpl.n	800a1c2 <__sflush_r+0x46>
 800a1b6:	6863      	ldr	r3, [r4, #4]
 800a1b8:	1ac0      	subs	r0, r0, r3
 800a1ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1bc:	b10b      	cbz	r3, 800a1c2 <__sflush_r+0x46>
 800a1be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1c0:	1ac0      	subs	r0, r0, r3
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1c8:	6a21      	ldr	r1, [r4, #32]
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	47b0      	blx	r6
 800a1ce:	1c43      	adds	r3, r0, #1
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	d106      	bne.n	800a1e2 <__sflush_r+0x66>
 800a1d4:	6829      	ldr	r1, [r5, #0]
 800a1d6:	291d      	cmp	r1, #29
 800a1d8:	d82c      	bhi.n	800a234 <__sflush_r+0xb8>
 800a1da:	4a2a      	ldr	r2, [pc, #168]	; (800a284 <__sflush_r+0x108>)
 800a1dc:	40ca      	lsrs	r2, r1
 800a1de:	07d6      	lsls	r6, r2, #31
 800a1e0:	d528      	bpl.n	800a234 <__sflush_r+0xb8>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	6062      	str	r2, [r4, #4]
 800a1e6:	04d9      	lsls	r1, r3, #19
 800a1e8:	6922      	ldr	r2, [r4, #16]
 800a1ea:	6022      	str	r2, [r4, #0]
 800a1ec:	d504      	bpl.n	800a1f8 <__sflush_r+0x7c>
 800a1ee:	1c42      	adds	r2, r0, #1
 800a1f0:	d101      	bne.n	800a1f6 <__sflush_r+0x7a>
 800a1f2:	682b      	ldr	r3, [r5, #0]
 800a1f4:	b903      	cbnz	r3, 800a1f8 <__sflush_r+0x7c>
 800a1f6:	6560      	str	r0, [r4, #84]	; 0x54
 800a1f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1fa:	602f      	str	r7, [r5, #0]
 800a1fc:	2900      	cmp	r1, #0
 800a1fe:	d0ca      	beq.n	800a196 <__sflush_r+0x1a>
 800a200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a204:	4299      	cmp	r1, r3
 800a206:	d002      	beq.n	800a20e <__sflush_r+0x92>
 800a208:	4628      	mov	r0, r5
 800a20a:	f7fd f94b 	bl	80074a4 <_free_r>
 800a20e:	2000      	movs	r0, #0
 800a210:	6360      	str	r0, [r4, #52]	; 0x34
 800a212:	e7c1      	b.n	800a198 <__sflush_r+0x1c>
 800a214:	6a21      	ldr	r1, [r4, #32]
 800a216:	2301      	movs	r3, #1
 800a218:	4628      	mov	r0, r5
 800a21a:	47b0      	blx	r6
 800a21c:	1c41      	adds	r1, r0, #1
 800a21e:	d1c7      	bne.n	800a1b0 <__sflush_r+0x34>
 800a220:	682b      	ldr	r3, [r5, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d0c4      	beq.n	800a1b0 <__sflush_r+0x34>
 800a226:	2b1d      	cmp	r3, #29
 800a228:	d001      	beq.n	800a22e <__sflush_r+0xb2>
 800a22a:	2b16      	cmp	r3, #22
 800a22c:	d101      	bne.n	800a232 <__sflush_r+0xb6>
 800a22e:	602f      	str	r7, [r5, #0]
 800a230:	e7b1      	b.n	800a196 <__sflush_r+0x1a>
 800a232:	89a3      	ldrh	r3, [r4, #12]
 800a234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a238:	81a3      	strh	r3, [r4, #12]
 800a23a:	e7ad      	b.n	800a198 <__sflush_r+0x1c>
 800a23c:	690f      	ldr	r7, [r1, #16]
 800a23e:	2f00      	cmp	r7, #0
 800a240:	d0a9      	beq.n	800a196 <__sflush_r+0x1a>
 800a242:	0793      	lsls	r3, r2, #30
 800a244:	680e      	ldr	r6, [r1, #0]
 800a246:	bf08      	it	eq
 800a248:	694b      	ldreq	r3, [r1, #20]
 800a24a:	600f      	str	r7, [r1, #0]
 800a24c:	bf18      	it	ne
 800a24e:	2300      	movne	r3, #0
 800a250:	eba6 0807 	sub.w	r8, r6, r7
 800a254:	608b      	str	r3, [r1, #8]
 800a256:	f1b8 0f00 	cmp.w	r8, #0
 800a25a:	dd9c      	ble.n	800a196 <__sflush_r+0x1a>
 800a25c:	6a21      	ldr	r1, [r4, #32]
 800a25e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a260:	4643      	mov	r3, r8
 800a262:	463a      	mov	r2, r7
 800a264:	4628      	mov	r0, r5
 800a266:	47b0      	blx	r6
 800a268:	2800      	cmp	r0, #0
 800a26a:	dc06      	bgt.n	800a27a <__sflush_r+0xfe>
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a272:	81a3      	strh	r3, [r4, #12]
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	e78e      	b.n	800a198 <__sflush_r+0x1c>
 800a27a:	4407      	add	r7, r0
 800a27c:	eba8 0800 	sub.w	r8, r8, r0
 800a280:	e7e9      	b.n	800a256 <__sflush_r+0xda>
 800a282:	bf00      	nop
 800a284:	20400001 	.word	0x20400001

0800a288 <_fflush_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	690b      	ldr	r3, [r1, #16]
 800a28c:	4605      	mov	r5, r0
 800a28e:	460c      	mov	r4, r1
 800a290:	b913      	cbnz	r3, 800a298 <_fflush_r+0x10>
 800a292:	2500      	movs	r5, #0
 800a294:	4628      	mov	r0, r5
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	b118      	cbz	r0, 800a2a2 <_fflush_r+0x1a>
 800a29a:	6983      	ldr	r3, [r0, #24]
 800a29c:	b90b      	cbnz	r3, 800a2a2 <_fflush_r+0x1a>
 800a29e:	f000 f887 	bl	800a3b0 <__sinit>
 800a2a2:	4b14      	ldr	r3, [pc, #80]	; (800a2f4 <_fflush_r+0x6c>)
 800a2a4:	429c      	cmp	r4, r3
 800a2a6:	d11b      	bne.n	800a2e0 <_fflush_r+0x58>
 800a2a8:	686c      	ldr	r4, [r5, #4]
 800a2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0ef      	beq.n	800a292 <_fflush_r+0xa>
 800a2b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2b4:	07d0      	lsls	r0, r2, #31
 800a2b6:	d404      	bmi.n	800a2c2 <_fflush_r+0x3a>
 800a2b8:	0599      	lsls	r1, r3, #22
 800a2ba:	d402      	bmi.n	800a2c2 <_fflush_r+0x3a>
 800a2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2be:	f000 f927 	bl	800a510 <__retarget_lock_acquire_recursive>
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	4621      	mov	r1, r4
 800a2c6:	f7ff ff59 	bl	800a17c <__sflush_r>
 800a2ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2cc:	07da      	lsls	r2, r3, #31
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	d4e0      	bmi.n	800a294 <_fflush_r+0xc>
 800a2d2:	89a3      	ldrh	r3, [r4, #12]
 800a2d4:	059b      	lsls	r3, r3, #22
 800a2d6:	d4dd      	bmi.n	800a294 <_fflush_r+0xc>
 800a2d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2da:	f000 f91a 	bl	800a512 <__retarget_lock_release_recursive>
 800a2de:	e7d9      	b.n	800a294 <_fflush_r+0xc>
 800a2e0:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <_fflush_r+0x70>)
 800a2e2:	429c      	cmp	r4, r3
 800a2e4:	d101      	bne.n	800a2ea <_fflush_r+0x62>
 800a2e6:	68ac      	ldr	r4, [r5, #8]
 800a2e8:	e7df      	b.n	800a2aa <_fflush_r+0x22>
 800a2ea:	4b04      	ldr	r3, [pc, #16]	; (800a2fc <_fflush_r+0x74>)
 800a2ec:	429c      	cmp	r4, r3
 800a2ee:	bf08      	it	eq
 800a2f0:	68ec      	ldreq	r4, [r5, #12]
 800a2f2:	e7da      	b.n	800a2aa <_fflush_r+0x22>
 800a2f4:	0800d618 	.word	0x0800d618
 800a2f8:	0800d638 	.word	0x0800d638
 800a2fc:	0800d5f8 	.word	0x0800d5f8

0800a300 <std>:
 800a300:	2300      	movs	r3, #0
 800a302:	b510      	push	{r4, lr}
 800a304:	4604      	mov	r4, r0
 800a306:	e9c0 3300 	strd	r3, r3, [r0]
 800a30a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a30e:	6083      	str	r3, [r0, #8]
 800a310:	8181      	strh	r1, [r0, #12]
 800a312:	6643      	str	r3, [r0, #100]	; 0x64
 800a314:	81c2      	strh	r2, [r0, #14]
 800a316:	6183      	str	r3, [r0, #24]
 800a318:	4619      	mov	r1, r3
 800a31a:	2208      	movs	r2, #8
 800a31c:	305c      	adds	r0, #92	; 0x5c
 800a31e:	f7fd f8b9 	bl	8007494 <memset>
 800a322:	4b05      	ldr	r3, [pc, #20]	; (800a338 <std+0x38>)
 800a324:	6263      	str	r3, [r4, #36]	; 0x24
 800a326:	4b05      	ldr	r3, [pc, #20]	; (800a33c <std+0x3c>)
 800a328:	62a3      	str	r3, [r4, #40]	; 0x28
 800a32a:	4b05      	ldr	r3, [pc, #20]	; (800a340 <std+0x40>)
 800a32c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a32e:	4b05      	ldr	r3, [pc, #20]	; (800a344 <std+0x44>)
 800a330:	6224      	str	r4, [r4, #32]
 800a332:	6323      	str	r3, [r4, #48]	; 0x30
 800a334:	bd10      	pop	{r4, pc}
 800a336:	bf00      	nop
 800a338:	08007ff1 	.word	0x08007ff1
 800a33c:	08008017 	.word	0x08008017
 800a340:	0800804f 	.word	0x0800804f
 800a344:	08008073 	.word	0x08008073

0800a348 <_cleanup_r>:
 800a348:	4901      	ldr	r1, [pc, #4]	; (800a350 <_cleanup_r+0x8>)
 800a34a:	f000 b8c1 	b.w	800a4d0 <_fwalk_reent>
 800a34e:	bf00      	nop
 800a350:	0800a289 	.word	0x0800a289

0800a354 <__sfmoreglue>:
 800a354:	b570      	push	{r4, r5, r6, lr}
 800a356:	2268      	movs	r2, #104	; 0x68
 800a358:	1e4d      	subs	r5, r1, #1
 800a35a:	4355      	muls	r5, r2
 800a35c:	460e      	mov	r6, r1
 800a35e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a362:	f7fd f90b 	bl	800757c <_malloc_r>
 800a366:	4604      	mov	r4, r0
 800a368:	b140      	cbz	r0, 800a37c <__sfmoreglue+0x28>
 800a36a:	2100      	movs	r1, #0
 800a36c:	e9c0 1600 	strd	r1, r6, [r0]
 800a370:	300c      	adds	r0, #12
 800a372:	60a0      	str	r0, [r4, #8]
 800a374:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a378:	f7fd f88c 	bl	8007494 <memset>
 800a37c:	4620      	mov	r0, r4
 800a37e:	bd70      	pop	{r4, r5, r6, pc}

0800a380 <__sfp_lock_acquire>:
 800a380:	4801      	ldr	r0, [pc, #4]	; (800a388 <__sfp_lock_acquire+0x8>)
 800a382:	f000 b8c5 	b.w	800a510 <__retarget_lock_acquire_recursive>
 800a386:	bf00      	nop
 800a388:	20000641 	.word	0x20000641

0800a38c <__sfp_lock_release>:
 800a38c:	4801      	ldr	r0, [pc, #4]	; (800a394 <__sfp_lock_release+0x8>)
 800a38e:	f000 b8c0 	b.w	800a512 <__retarget_lock_release_recursive>
 800a392:	bf00      	nop
 800a394:	20000641 	.word	0x20000641

0800a398 <__sinit_lock_acquire>:
 800a398:	4801      	ldr	r0, [pc, #4]	; (800a3a0 <__sinit_lock_acquire+0x8>)
 800a39a:	f000 b8b9 	b.w	800a510 <__retarget_lock_acquire_recursive>
 800a39e:	bf00      	nop
 800a3a0:	20000642 	.word	0x20000642

0800a3a4 <__sinit_lock_release>:
 800a3a4:	4801      	ldr	r0, [pc, #4]	; (800a3ac <__sinit_lock_release+0x8>)
 800a3a6:	f000 b8b4 	b.w	800a512 <__retarget_lock_release_recursive>
 800a3aa:	bf00      	nop
 800a3ac:	20000642 	.word	0x20000642

0800a3b0 <__sinit>:
 800a3b0:	b510      	push	{r4, lr}
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	f7ff fff0 	bl	800a398 <__sinit_lock_acquire>
 800a3b8:	69a3      	ldr	r3, [r4, #24]
 800a3ba:	b11b      	cbz	r3, 800a3c4 <__sinit+0x14>
 800a3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3c0:	f7ff bff0 	b.w	800a3a4 <__sinit_lock_release>
 800a3c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a3c8:	6523      	str	r3, [r4, #80]	; 0x50
 800a3ca:	4b13      	ldr	r3, [pc, #76]	; (800a418 <__sinit+0x68>)
 800a3cc:	4a13      	ldr	r2, [pc, #76]	; (800a41c <__sinit+0x6c>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a3d2:	42a3      	cmp	r3, r4
 800a3d4:	bf04      	itt	eq
 800a3d6:	2301      	moveq	r3, #1
 800a3d8:	61a3      	streq	r3, [r4, #24]
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f000 f820 	bl	800a420 <__sfp>
 800a3e0:	6060      	str	r0, [r4, #4]
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f000 f81c 	bl	800a420 <__sfp>
 800a3e8:	60a0      	str	r0, [r4, #8]
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f000 f818 	bl	800a420 <__sfp>
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	60e0      	str	r0, [r4, #12]
 800a3f4:	2104      	movs	r1, #4
 800a3f6:	6860      	ldr	r0, [r4, #4]
 800a3f8:	f7ff ff82 	bl	800a300 <std>
 800a3fc:	68a0      	ldr	r0, [r4, #8]
 800a3fe:	2201      	movs	r2, #1
 800a400:	2109      	movs	r1, #9
 800a402:	f7ff ff7d 	bl	800a300 <std>
 800a406:	68e0      	ldr	r0, [r4, #12]
 800a408:	2202      	movs	r2, #2
 800a40a:	2112      	movs	r1, #18
 800a40c:	f7ff ff78 	bl	800a300 <std>
 800a410:	2301      	movs	r3, #1
 800a412:	61a3      	str	r3, [r4, #24]
 800a414:	e7d2      	b.n	800a3bc <__sinit+0xc>
 800a416:	bf00      	nop
 800a418:	0800d26c 	.word	0x0800d26c
 800a41c:	0800a349 	.word	0x0800a349

0800a420 <__sfp>:
 800a420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a422:	4607      	mov	r7, r0
 800a424:	f7ff ffac 	bl	800a380 <__sfp_lock_acquire>
 800a428:	4b1e      	ldr	r3, [pc, #120]	; (800a4a4 <__sfp+0x84>)
 800a42a:	681e      	ldr	r6, [r3, #0]
 800a42c:	69b3      	ldr	r3, [r6, #24]
 800a42e:	b913      	cbnz	r3, 800a436 <__sfp+0x16>
 800a430:	4630      	mov	r0, r6
 800a432:	f7ff ffbd 	bl	800a3b0 <__sinit>
 800a436:	3648      	adds	r6, #72	; 0x48
 800a438:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	d503      	bpl.n	800a448 <__sfp+0x28>
 800a440:	6833      	ldr	r3, [r6, #0]
 800a442:	b30b      	cbz	r3, 800a488 <__sfp+0x68>
 800a444:	6836      	ldr	r6, [r6, #0]
 800a446:	e7f7      	b.n	800a438 <__sfp+0x18>
 800a448:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a44c:	b9d5      	cbnz	r5, 800a484 <__sfp+0x64>
 800a44e:	4b16      	ldr	r3, [pc, #88]	; (800a4a8 <__sfp+0x88>)
 800a450:	60e3      	str	r3, [r4, #12]
 800a452:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a456:	6665      	str	r5, [r4, #100]	; 0x64
 800a458:	f000 f859 	bl	800a50e <__retarget_lock_init_recursive>
 800a45c:	f7ff ff96 	bl	800a38c <__sfp_lock_release>
 800a460:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a464:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a468:	6025      	str	r5, [r4, #0]
 800a46a:	61a5      	str	r5, [r4, #24]
 800a46c:	2208      	movs	r2, #8
 800a46e:	4629      	mov	r1, r5
 800a470:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a474:	f7fd f80e 	bl	8007494 <memset>
 800a478:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a47c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a480:	4620      	mov	r0, r4
 800a482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a484:	3468      	adds	r4, #104	; 0x68
 800a486:	e7d9      	b.n	800a43c <__sfp+0x1c>
 800a488:	2104      	movs	r1, #4
 800a48a:	4638      	mov	r0, r7
 800a48c:	f7ff ff62 	bl	800a354 <__sfmoreglue>
 800a490:	4604      	mov	r4, r0
 800a492:	6030      	str	r0, [r6, #0]
 800a494:	2800      	cmp	r0, #0
 800a496:	d1d5      	bne.n	800a444 <__sfp+0x24>
 800a498:	f7ff ff78 	bl	800a38c <__sfp_lock_release>
 800a49c:	230c      	movs	r3, #12
 800a49e:	603b      	str	r3, [r7, #0]
 800a4a0:	e7ee      	b.n	800a480 <__sfp+0x60>
 800a4a2:	bf00      	nop
 800a4a4:	0800d26c 	.word	0x0800d26c
 800a4a8:	ffff0001 	.word	0xffff0001

0800a4ac <fiprintf>:
 800a4ac:	b40e      	push	{r1, r2, r3}
 800a4ae:	b503      	push	{r0, r1, lr}
 800a4b0:	4601      	mov	r1, r0
 800a4b2:	ab03      	add	r3, sp, #12
 800a4b4:	4805      	ldr	r0, [pc, #20]	; (800a4cc <fiprintf+0x20>)
 800a4b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ba:	6800      	ldr	r0, [r0, #0]
 800a4bc:	9301      	str	r3, [sp, #4]
 800a4be:	f000 f8ad 	bl	800a61c <_vfiprintf_r>
 800a4c2:	b002      	add	sp, #8
 800a4c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4c8:	b003      	add	sp, #12
 800a4ca:	4770      	bx	lr
 800a4cc:	20000010 	.word	0x20000010

0800a4d0 <_fwalk_reent>:
 800a4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4d4:	4606      	mov	r6, r0
 800a4d6:	4688      	mov	r8, r1
 800a4d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a4dc:	2700      	movs	r7, #0
 800a4de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4e2:	f1b9 0901 	subs.w	r9, r9, #1
 800a4e6:	d505      	bpl.n	800a4f4 <_fwalk_reent+0x24>
 800a4e8:	6824      	ldr	r4, [r4, #0]
 800a4ea:	2c00      	cmp	r4, #0
 800a4ec:	d1f7      	bne.n	800a4de <_fwalk_reent+0xe>
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4f4:	89ab      	ldrh	r3, [r5, #12]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d907      	bls.n	800a50a <_fwalk_reent+0x3a>
 800a4fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4fe:	3301      	adds	r3, #1
 800a500:	d003      	beq.n	800a50a <_fwalk_reent+0x3a>
 800a502:	4629      	mov	r1, r5
 800a504:	4630      	mov	r0, r6
 800a506:	47c0      	blx	r8
 800a508:	4307      	orrs	r7, r0
 800a50a:	3568      	adds	r5, #104	; 0x68
 800a50c:	e7e9      	b.n	800a4e2 <_fwalk_reent+0x12>

0800a50e <__retarget_lock_init_recursive>:
 800a50e:	4770      	bx	lr

0800a510 <__retarget_lock_acquire_recursive>:
 800a510:	4770      	bx	lr

0800a512 <__retarget_lock_release_recursive>:
 800a512:	4770      	bx	lr

0800a514 <__ascii_mbtowc>:
 800a514:	b082      	sub	sp, #8
 800a516:	b901      	cbnz	r1, 800a51a <__ascii_mbtowc+0x6>
 800a518:	a901      	add	r1, sp, #4
 800a51a:	b142      	cbz	r2, 800a52e <__ascii_mbtowc+0x1a>
 800a51c:	b14b      	cbz	r3, 800a532 <__ascii_mbtowc+0x1e>
 800a51e:	7813      	ldrb	r3, [r2, #0]
 800a520:	600b      	str	r3, [r1, #0]
 800a522:	7812      	ldrb	r2, [r2, #0]
 800a524:	1e10      	subs	r0, r2, #0
 800a526:	bf18      	it	ne
 800a528:	2001      	movne	r0, #1
 800a52a:	b002      	add	sp, #8
 800a52c:	4770      	bx	lr
 800a52e:	4610      	mov	r0, r2
 800a530:	e7fb      	b.n	800a52a <__ascii_mbtowc+0x16>
 800a532:	f06f 0001 	mvn.w	r0, #1
 800a536:	e7f8      	b.n	800a52a <__ascii_mbtowc+0x16>

0800a538 <memmove>:
 800a538:	4288      	cmp	r0, r1
 800a53a:	b510      	push	{r4, lr}
 800a53c:	eb01 0402 	add.w	r4, r1, r2
 800a540:	d902      	bls.n	800a548 <memmove+0x10>
 800a542:	4284      	cmp	r4, r0
 800a544:	4623      	mov	r3, r4
 800a546:	d807      	bhi.n	800a558 <memmove+0x20>
 800a548:	1e43      	subs	r3, r0, #1
 800a54a:	42a1      	cmp	r1, r4
 800a54c:	d008      	beq.n	800a560 <memmove+0x28>
 800a54e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a552:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a556:	e7f8      	b.n	800a54a <memmove+0x12>
 800a558:	4402      	add	r2, r0
 800a55a:	4601      	mov	r1, r0
 800a55c:	428a      	cmp	r2, r1
 800a55e:	d100      	bne.n	800a562 <memmove+0x2a>
 800a560:	bd10      	pop	{r4, pc}
 800a562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a56a:	e7f7      	b.n	800a55c <memmove+0x24>

0800a56c <_realloc_r>:
 800a56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a570:	4680      	mov	r8, r0
 800a572:	4614      	mov	r4, r2
 800a574:	460e      	mov	r6, r1
 800a576:	b921      	cbnz	r1, 800a582 <_realloc_r+0x16>
 800a578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a57c:	4611      	mov	r1, r2
 800a57e:	f7fc bffd 	b.w	800757c <_malloc_r>
 800a582:	b92a      	cbnz	r2, 800a590 <_realloc_r+0x24>
 800a584:	f7fc ff8e 	bl	80074a4 <_free_r>
 800a588:	4625      	mov	r5, r4
 800a58a:	4628      	mov	r0, r5
 800a58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a590:	f000 faae 	bl	800aaf0 <_malloc_usable_size_r>
 800a594:	4284      	cmp	r4, r0
 800a596:	4607      	mov	r7, r0
 800a598:	d802      	bhi.n	800a5a0 <_realloc_r+0x34>
 800a59a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a59e:	d812      	bhi.n	800a5c6 <_realloc_r+0x5a>
 800a5a0:	4621      	mov	r1, r4
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	f7fc ffea 	bl	800757c <_malloc_r>
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d0ed      	beq.n	800a58a <_realloc_r+0x1e>
 800a5ae:	42bc      	cmp	r4, r7
 800a5b0:	4622      	mov	r2, r4
 800a5b2:	4631      	mov	r1, r6
 800a5b4:	bf28      	it	cs
 800a5b6:	463a      	movcs	r2, r7
 800a5b8:	f7fe fc12 	bl	8008de0 <memcpy>
 800a5bc:	4631      	mov	r1, r6
 800a5be:	4640      	mov	r0, r8
 800a5c0:	f7fc ff70 	bl	80074a4 <_free_r>
 800a5c4:	e7e1      	b.n	800a58a <_realloc_r+0x1e>
 800a5c6:	4635      	mov	r5, r6
 800a5c8:	e7df      	b.n	800a58a <_realloc_r+0x1e>

0800a5ca <__sfputc_r>:
 800a5ca:	6893      	ldr	r3, [r2, #8]
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	b410      	push	{r4}
 800a5d2:	6093      	str	r3, [r2, #8]
 800a5d4:	da08      	bge.n	800a5e8 <__sfputc_r+0x1e>
 800a5d6:	6994      	ldr	r4, [r2, #24]
 800a5d8:	42a3      	cmp	r3, r4
 800a5da:	db01      	blt.n	800a5e0 <__sfputc_r+0x16>
 800a5dc:	290a      	cmp	r1, #10
 800a5de:	d103      	bne.n	800a5e8 <__sfputc_r+0x1e>
 800a5e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5e4:	f000 b94a 	b.w	800a87c <__swbuf_r>
 800a5e8:	6813      	ldr	r3, [r2, #0]
 800a5ea:	1c58      	adds	r0, r3, #1
 800a5ec:	6010      	str	r0, [r2, #0]
 800a5ee:	7019      	strb	r1, [r3, #0]
 800a5f0:	4608      	mov	r0, r1
 800a5f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <__sfputs_r>:
 800a5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	460f      	mov	r7, r1
 800a5fe:	4614      	mov	r4, r2
 800a600:	18d5      	adds	r5, r2, r3
 800a602:	42ac      	cmp	r4, r5
 800a604:	d101      	bne.n	800a60a <__sfputs_r+0x12>
 800a606:	2000      	movs	r0, #0
 800a608:	e007      	b.n	800a61a <__sfputs_r+0x22>
 800a60a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a60e:	463a      	mov	r2, r7
 800a610:	4630      	mov	r0, r6
 800a612:	f7ff ffda 	bl	800a5ca <__sfputc_r>
 800a616:	1c43      	adds	r3, r0, #1
 800a618:	d1f3      	bne.n	800a602 <__sfputs_r+0xa>
 800a61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a61c <_vfiprintf_r>:
 800a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a620:	460d      	mov	r5, r1
 800a622:	b09d      	sub	sp, #116	; 0x74
 800a624:	4614      	mov	r4, r2
 800a626:	4698      	mov	r8, r3
 800a628:	4606      	mov	r6, r0
 800a62a:	b118      	cbz	r0, 800a634 <_vfiprintf_r+0x18>
 800a62c:	6983      	ldr	r3, [r0, #24]
 800a62e:	b90b      	cbnz	r3, 800a634 <_vfiprintf_r+0x18>
 800a630:	f7ff febe 	bl	800a3b0 <__sinit>
 800a634:	4b89      	ldr	r3, [pc, #548]	; (800a85c <_vfiprintf_r+0x240>)
 800a636:	429d      	cmp	r5, r3
 800a638:	d11b      	bne.n	800a672 <_vfiprintf_r+0x56>
 800a63a:	6875      	ldr	r5, [r6, #4]
 800a63c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a63e:	07d9      	lsls	r1, r3, #31
 800a640:	d405      	bmi.n	800a64e <_vfiprintf_r+0x32>
 800a642:	89ab      	ldrh	r3, [r5, #12]
 800a644:	059a      	lsls	r2, r3, #22
 800a646:	d402      	bmi.n	800a64e <_vfiprintf_r+0x32>
 800a648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a64a:	f7ff ff61 	bl	800a510 <__retarget_lock_acquire_recursive>
 800a64e:	89ab      	ldrh	r3, [r5, #12]
 800a650:	071b      	lsls	r3, r3, #28
 800a652:	d501      	bpl.n	800a658 <_vfiprintf_r+0x3c>
 800a654:	692b      	ldr	r3, [r5, #16]
 800a656:	b9eb      	cbnz	r3, 800a694 <_vfiprintf_r+0x78>
 800a658:	4629      	mov	r1, r5
 800a65a:	4630      	mov	r0, r6
 800a65c:	f000 f96e 	bl	800a93c <__swsetup_r>
 800a660:	b1c0      	cbz	r0, 800a694 <_vfiprintf_r+0x78>
 800a662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a664:	07dc      	lsls	r4, r3, #31
 800a666:	d50e      	bpl.n	800a686 <_vfiprintf_r+0x6a>
 800a668:	f04f 30ff 	mov.w	r0, #4294967295
 800a66c:	b01d      	add	sp, #116	; 0x74
 800a66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a672:	4b7b      	ldr	r3, [pc, #492]	; (800a860 <_vfiprintf_r+0x244>)
 800a674:	429d      	cmp	r5, r3
 800a676:	d101      	bne.n	800a67c <_vfiprintf_r+0x60>
 800a678:	68b5      	ldr	r5, [r6, #8]
 800a67a:	e7df      	b.n	800a63c <_vfiprintf_r+0x20>
 800a67c:	4b79      	ldr	r3, [pc, #484]	; (800a864 <_vfiprintf_r+0x248>)
 800a67e:	429d      	cmp	r5, r3
 800a680:	bf08      	it	eq
 800a682:	68f5      	ldreq	r5, [r6, #12]
 800a684:	e7da      	b.n	800a63c <_vfiprintf_r+0x20>
 800a686:	89ab      	ldrh	r3, [r5, #12]
 800a688:	0598      	lsls	r0, r3, #22
 800a68a:	d4ed      	bmi.n	800a668 <_vfiprintf_r+0x4c>
 800a68c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a68e:	f7ff ff40 	bl	800a512 <__retarget_lock_release_recursive>
 800a692:	e7e9      	b.n	800a668 <_vfiprintf_r+0x4c>
 800a694:	2300      	movs	r3, #0
 800a696:	9309      	str	r3, [sp, #36]	; 0x24
 800a698:	2320      	movs	r3, #32
 800a69a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a69e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6a2:	2330      	movs	r3, #48	; 0x30
 800a6a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a868 <_vfiprintf_r+0x24c>
 800a6a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6ac:	f04f 0901 	mov.w	r9, #1
 800a6b0:	4623      	mov	r3, r4
 800a6b2:	469a      	mov	sl, r3
 800a6b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6b8:	b10a      	cbz	r2, 800a6be <_vfiprintf_r+0xa2>
 800a6ba:	2a25      	cmp	r2, #37	; 0x25
 800a6bc:	d1f9      	bne.n	800a6b2 <_vfiprintf_r+0x96>
 800a6be:	ebba 0b04 	subs.w	fp, sl, r4
 800a6c2:	d00b      	beq.n	800a6dc <_vfiprintf_r+0xc0>
 800a6c4:	465b      	mov	r3, fp
 800a6c6:	4622      	mov	r2, r4
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	f7ff ff94 	bl	800a5f8 <__sfputs_r>
 800a6d0:	3001      	adds	r0, #1
 800a6d2:	f000 80aa 	beq.w	800a82a <_vfiprintf_r+0x20e>
 800a6d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6d8:	445a      	add	r2, fp
 800a6da:	9209      	str	r2, [sp, #36]	; 0x24
 800a6dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f000 80a2 	beq.w	800a82a <_vfiprintf_r+0x20e>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6f0:	f10a 0a01 	add.w	sl, sl, #1
 800a6f4:	9304      	str	r3, [sp, #16]
 800a6f6:	9307      	str	r3, [sp, #28]
 800a6f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6fc:	931a      	str	r3, [sp, #104]	; 0x68
 800a6fe:	4654      	mov	r4, sl
 800a700:	2205      	movs	r2, #5
 800a702:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a706:	4858      	ldr	r0, [pc, #352]	; (800a868 <_vfiprintf_r+0x24c>)
 800a708:	f7f5 fd82 	bl	8000210 <memchr>
 800a70c:	9a04      	ldr	r2, [sp, #16]
 800a70e:	b9d8      	cbnz	r0, 800a748 <_vfiprintf_r+0x12c>
 800a710:	06d1      	lsls	r1, r2, #27
 800a712:	bf44      	itt	mi
 800a714:	2320      	movmi	r3, #32
 800a716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a71a:	0713      	lsls	r3, r2, #28
 800a71c:	bf44      	itt	mi
 800a71e:	232b      	movmi	r3, #43	; 0x2b
 800a720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a724:	f89a 3000 	ldrb.w	r3, [sl]
 800a728:	2b2a      	cmp	r3, #42	; 0x2a
 800a72a:	d015      	beq.n	800a758 <_vfiprintf_r+0x13c>
 800a72c:	9a07      	ldr	r2, [sp, #28]
 800a72e:	4654      	mov	r4, sl
 800a730:	2000      	movs	r0, #0
 800a732:	f04f 0c0a 	mov.w	ip, #10
 800a736:	4621      	mov	r1, r4
 800a738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a73c:	3b30      	subs	r3, #48	; 0x30
 800a73e:	2b09      	cmp	r3, #9
 800a740:	d94e      	bls.n	800a7e0 <_vfiprintf_r+0x1c4>
 800a742:	b1b0      	cbz	r0, 800a772 <_vfiprintf_r+0x156>
 800a744:	9207      	str	r2, [sp, #28]
 800a746:	e014      	b.n	800a772 <_vfiprintf_r+0x156>
 800a748:	eba0 0308 	sub.w	r3, r0, r8
 800a74c:	fa09 f303 	lsl.w	r3, r9, r3
 800a750:	4313      	orrs	r3, r2
 800a752:	9304      	str	r3, [sp, #16]
 800a754:	46a2      	mov	sl, r4
 800a756:	e7d2      	b.n	800a6fe <_vfiprintf_r+0xe2>
 800a758:	9b03      	ldr	r3, [sp, #12]
 800a75a:	1d19      	adds	r1, r3, #4
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	9103      	str	r1, [sp, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	bfbb      	ittet	lt
 800a764:	425b      	neglt	r3, r3
 800a766:	f042 0202 	orrlt.w	r2, r2, #2
 800a76a:	9307      	strge	r3, [sp, #28]
 800a76c:	9307      	strlt	r3, [sp, #28]
 800a76e:	bfb8      	it	lt
 800a770:	9204      	strlt	r2, [sp, #16]
 800a772:	7823      	ldrb	r3, [r4, #0]
 800a774:	2b2e      	cmp	r3, #46	; 0x2e
 800a776:	d10c      	bne.n	800a792 <_vfiprintf_r+0x176>
 800a778:	7863      	ldrb	r3, [r4, #1]
 800a77a:	2b2a      	cmp	r3, #42	; 0x2a
 800a77c:	d135      	bne.n	800a7ea <_vfiprintf_r+0x1ce>
 800a77e:	9b03      	ldr	r3, [sp, #12]
 800a780:	1d1a      	adds	r2, r3, #4
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	9203      	str	r2, [sp, #12]
 800a786:	2b00      	cmp	r3, #0
 800a788:	bfb8      	it	lt
 800a78a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a78e:	3402      	adds	r4, #2
 800a790:	9305      	str	r3, [sp, #20]
 800a792:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a878 <_vfiprintf_r+0x25c>
 800a796:	7821      	ldrb	r1, [r4, #0]
 800a798:	2203      	movs	r2, #3
 800a79a:	4650      	mov	r0, sl
 800a79c:	f7f5 fd38 	bl	8000210 <memchr>
 800a7a0:	b140      	cbz	r0, 800a7b4 <_vfiprintf_r+0x198>
 800a7a2:	2340      	movs	r3, #64	; 0x40
 800a7a4:	eba0 000a 	sub.w	r0, r0, sl
 800a7a8:	fa03 f000 	lsl.w	r0, r3, r0
 800a7ac:	9b04      	ldr	r3, [sp, #16]
 800a7ae:	4303      	orrs	r3, r0
 800a7b0:	3401      	adds	r4, #1
 800a7b2:	9304      	str	r3, [sp, #16]
 800a7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7b8:	482c      	ldr	r0, [pc, #176]	; (800a86c <_vfiprintf_r+0x250>)
 800a7ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7be:	2206      	movs	r2, #6
 800a7c0:	f7f5 fd26 	bl	8000210 <memchr>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d03f      	beq.n	800a848 <_vfiprintf_r+0x22c>
 800a7c8:	4b29      	ldr	r3, [pc, #164]	; (800a870 <_vfiprintf_r+0x254>)
 800a7ca:	bb1b      	cbnz	r3, 800a814 <_vfiprintf_r+0x1f8>
 800a7cc:	9b03      	ldr	r3, [sp, #12]
 800a7ce:	3307      	adds	r3, #7
 800a7d0:	f023 0307 	bic.w	r3, r3, #7
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	9303      	str	r3, [sp, #12]
 800a7d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7da:	443b      	add	r3, r7
 800a7dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a7de:	e767      	b.n	800a6b0 <_vfiprintf_r+0x94>
 800a7e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7e4:	460c      	mov	r4, r1
 800a7e6:	2001      	movs	r0, #1
 800a7e8:	e7a5      	b.n	800a736 <_vfiprintf_r+0x11a>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	3401      	adds	r4, #1
 800a7ee:	9305      	str	r3, [sp, #20]
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	f04f 0c0a 	mov.w	ip, #10
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7fc:	3a30      	subs	r2, #48	; 0x30
 800a7fe:	2a09      	cmp	r2, #9
 800a800:	d903      	bls.n	800a80a <_vfiprintf_r+0x1ee>
 800a802:	2b00      	cmp	r3, #0
 800a804:	d0c5      	beq.n	800a792 <_vfiprintf_r+0x176>
 800a806:	9105      	str	r1, [sp, #20]
 800a808:	e7c3      	b.n	800a792 <_vfiprintf_r+0x176>
 800a80a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a80e:	4604      	mov	r4, r0
 800a810:	2301      	movs	r3, #1
 800a812:	e7f0      	b.n	800a7f6 <_vfiprintf_r+0x1da>
 800a814:	ab03      	add	r3, sp, #12
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	462a      	mov	r2, r5
 800a81a:	4b16      	ldr	r3, [pc, #88]	; (800a874 <_vfiprintf_r+0x258>)
 800a81c:	a904      	add	r1, sp, #16
 800a81e:	4630      	mov	r0, r6
 800a820:	f7fc ffc0 	bl	80077a4 <_printf_float>
 800a824:	4607      	mov	r7, r0
 800a826:	1c78      	adds	r0, r7, #1
 800a828:	d1d6      	bne.n	800a7d8 <_vfiprintf_r+0x1bc>
 800a82a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a82c:	07d9      	lsls	r1, r3, #31
 800a82e:	d405      	bmi.n	800a83c <_vfiprintf_r+0x220>
 800a830:	89ab      	ldrh	r3, [r5, #12]
 800a832:	059a      	lsls	r2, r3, #22
 800a834:	d402      	bmi.n	800a83c <_vfiprintf_r+0x220>
 800a836:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a838:	f7ff fe6b 	bl	800a512 <__retarget_lock_release_recursive>
 800a83c:	89ab      	ldrh	r3, [r5, #12]
 800a83e:	065b      	lsls	r3, r3, #25
 800a840:	f53f af12 	bmi.w	800a668 <_vfiprintf_r+0x4c>
 800a844:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a846:	e711      	b.n	800a66c <_vfiprintf_r+0x50>
 800a848:	ab03      	add	r3, sp, #12
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	462a      	mov	r2, r5
 800a84e:	4b09      	ldr	r3, [pc, #36]	; (800a874 <_vfiprintf_r+0x258>)
 800a850:	a904      	add	r1, sp, #16
 800a852:	4630      	mov	r0, r6
 800a854:	f7fd fa4a 	bl	8007cec <_printf_i>
 800a858:	e7e4      	b.n	800a824 <_vfiprintf_r+0x208>
 800a85a:	bf00      	nop
 800a85c:	0800d618 	.word	0x0800d618
 800a860:	0800d638 	.word	0x0800d638
 800a864:	0800d5f8 	.word	0x0800d5f8
 800a868:	0800d48c 	.word	0x0800d48c
 800a86c:	0800d496 	.word	0x0800d496
 800a870:	080077a5 	.word	0x080077a5
 800a874:	0800a5f9 	.word	0x0800a5f9
 800a878:	0800d492 	.word	0x0800d492

0800a87c <__swbuf_r>:
 800a87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87e:	460e      	mov	r6, r1
 800a880:	4614      	mov	r4, r2
 800a882:	4605      	mov	r5, r0
 800a884:	b118      	cbz	r0, 800a88e <__swbuf_r+0x12>
 800a886:	6983      	ldr	r3, [r0, #24]
 800a888:	b90b      	cbnz	r3, 800a88e <__swbuf_r+0x12>
 800a88a:	f7ff fd91 	bl	800a3b0 <__sinit>
 800a88e:	4b21      	ldr	r3, [pc, #132]	; (800a914 <__swbuf_r+0x98>)
 800a890:	429c      	cmp	r4, r3
 800a892:	d12b      	bne.n	800a8ec <__swbuf_r+0x70>
 800a894:	686c      	ldr	r4, [r5, #4]
 800a896:	69a3      	ldr	r3, [r4, #24]
 800a898:	60a3      	str	r3, [r4, #8]
 800a89a:	89a3      	ldrh	r3, [r4, #12]
 800a89c:	071a      	lsls	r2, r3, #28
 800a89e:	d52f      	bpl.n	800a900 <__swbuf_r+0x84>
 800a8a0:	6923      	ldr	r3, [r4, #16]
 800a8a2:	b36b      	cbz	r3, 800a900 <__swbuf_r+0x84>
 800a8a4:	6923      	ldr	r3, [r4, #16]
 800a8a6:	6820      	ldr	r0, [r4, #0]
 800a8a8:	1ac0      	subs	r0, r0, r3
 800a8aa:	6963      	ldr	r3, [r4, #20]
 800a8ac:	b2f6      	uxtb	r6, r6
 800a8ae:	4283      	cmp	r3, r0
 800a8b0:	4637      	mov	r7, r6
 800a8b2:	dc04      	bgt.n	800a8be <__swbuf_r+0x42>
 800a8b4:	4621      	mov	r1, r4
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f7ff fce6 	bl	800a288 <_fflush_r>
 800a8bc:	bb30      	cbnz	r0, 800a90c <__swbuf_r+0x90>
 800a8be:	68a3      	ldr	r3, [r4, #8]
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	60a3      	str	r3, [r4, #8]
 800a8c4:	6823      	ldr	r3, [r4, #0]
 800a8c6:	1c5a      	adds	r2, r3, #1
 800a8c8:	6022      	str	r2, [r4, #0]
 800a8ca:	701e      	strb	r6, [r3, #0]
 800a8cc:	6963      	ldr	r3, [r4, #20]
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	4283      	cmp	r3, r0
 800a8d2:	d004      	beq.n	800a8de <__swbuf_r+0x62>
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	07db      	lsls	r3, r3, #31
 800a8d8:	d506      	bpl.n	800a8e8 <__swbuf_r+0x6c>
 800a8da:	2e0a      	cmp	r6, #10
 800a8dc:	d104      	bne.n	800a8e8 <__swbuf_r+0x6c>
 800a8de:	4621      	mov	r1, r4
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	f7ff fcd1 	bl	800a288 <_fflush_r>
 800a8e6:	b988      	cbnz	r0, 800a90c <__swbuf_r+0x90>
 800a8e8:	4638      	mov	r0, r7
 800a8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ec:	4b0a      	ldr	r3, [pc, #40]	; (800a918 <__swbuf_r+0x9c>)
 800a8ee:	429c      	cmp	r4, r3
 800a8f0:	d101      	bne.n	800a8f6 <__swbuf_r+0x7a>
 800a8f2:	68ac      	ldr	r4, [r5, #8]
 800a8f4:	e7cf      	b.n	800a896 <__swbuf_r+0x1a>
 800a8f6:	4b09      	ldr	r3, [pc, #36]	; (800a91c <__swbuf_r+0xa0>)
 800a8f8:	429c      	cmp	r4, r3
 800a8fa:	bf08      	it	eq
 800a8fc:	68ec      	ldreq	r4, [r5, #12]
 800a8fe:	e7ca      	b.n	800a896 <__swbuf_r+0x1a>
 800a900:	4621      	mov	r1, r4
 800a902:	4628      	mov	r0, r5
 800a904:	f000 f81a 	bl	800a93c <__swsetup_r>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d0cb      	beq.n	800a8a4 <__swbuf_r+0x28>
 800a90c:	f04f 37ff 	mov.w	r7, #4294967295
 800a910:	e7ea      	b.n	800a8e8 <__swbuf_r+0x6c>
 800a912:	bf00      	nop
 800a914:	0800d618 	.word	0x0800d618
 800a918:	0800d638 	.word	0x0800d638
 800a91c:	0800d5f8 	.word	0x0800d5f8

0800a920 <__ascii_wctomb>:
 800a920:	b149      	cbz	r1, 800a936 <__ascii_wctomb+0x16>
 800a922:	2aff      	cmp	r2, #255	; 0xff
 800a924:	bf85      	ittet	hi
 800a926:	238a      	movhi	r3, #138	; 0x8a
 800a928:	6003      	strhi	r3, [r0, #0]
 800a92a:	700a      	strbls	r2, [r1, #0]
 800a92c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a930:	bf98      	it	ls
 800a932:	2001      	movls	r0, #1
 800a934:	4770      	bx	lr
 800a936:	4608      	mov	r0, r1
 800a938:	4770      	bx	lr
	...

0800a93c <__swsetup_r>:
 800a93c:	4b32      	ldr	r3, [pc, #200]	; (800aa08 <__swsetup_r+0xcc>)
 800a93e:	b570      	push	{r4, r5, r6, lr}
 800a940:	681d      	ldr	r5, [r3, #0]
 800a942:	4606      	mov	r6, r0
 800a944:	460c      	mov	r4, r1
 800a946:	b125      	cbz	r5, 800a952 <__swsetup_r+0x16>
 800a948:	69ab      	ldr	r3, [r5, #24]
 800a94a:	b913      	cbnz	r3, 800a952 <__swsetup_r+0x16>
 800a94c:	4628      	mov	r0, r5
 800a94e:	f7ff fd2f 	bl	800a3b0 <__sinit>
 800a952:	4b2e      	ldr	r3, [pc, #184]	; (800aa0c <__swsetup_r+0xd0>)
 800a954:	429c      	cmp	r4, r3
 800a956:	d10f      	bne.n	800a978 <__swsetup_r+0x3c>
 800a958:	686c      	ldr	r4, [r5, #4]
 800a95a:	89a3      	ldrh	r3, [r4, #12]
 800a95c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a960:	0719      	lsls	r1, r3, #28
 800a962:	d42c      	bmi.n	800a9be <__swsetup_r+0x82>
 800a964:	06dd      	lsls	r5, r3, #27
 800a966:	d411      	bmi.n	800a98c <__swsetup_r+0x50>
 800a968:	2309      	movs	r3, #9
 800a96a:	6033      	str	r3, [r6, #0]
 800a96c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a970:	81a3      	strh	r3, [r4, #12]
 800a972:	f04f 30ff 	mov.w	r0, #4294967295
 800a976:	e03e      	b.n	800a9f6 <__swsetup_r+0xba>
 800a978:	4b25      	ldr	r3, [pc, #148]	; (800aa10 <__swsetup_r+0xd4>)
 800a97a:	429c      	cmp	r4, r3
 800a97c:	d101      	bne.n	800a982 <__swsetup_r+0x46>
 800a97e:	68ac      	ldr	r4, [r5, #8]
 800a980:	e7eb      	b.n	800a95a <__swsetup_r+0x1e>
 800a982:	4b24      	ldr	r3, [pc, #144]	; (800aa14 <__swsetup_r+0xd8>)
 800a984:	429c      	cmp	r4, r3
 800a986:	bf08      	it	eq
 800a988:	68ec      	ldreq	r4, [r5, #12]
 800a98a:	e7e6      	b.n	800a95a <__swsetup_r+0x1e>
 800a98c:	0758      	lsls	r0, r3, #29
 800a98e:	d512      	bpl.n	800a9b6 <__swsetup_r+0x7a>
 800a990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a992:	b141      	cbz	r1, 800a9a6 <__swsetup_r+0x6a>
 800a994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a998:	4299      	cmp	r1, r3
 800a99a:	d002      	beq.n	800a9a2 <__swsetup_r+0x66>
 800a99c:	4630      	mov	r0, r6
 800a99e:	f7fc fd81 	bl	80074a4 <_free_r>
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	6363      	str	r3, [r4, #52]	; 0x34
 800a9a6:	89a3      	ldrh	r3, [r4, #12]
 800a9a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9ac:	81a3      	strh	r3, [r4, #12]
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	6063      	str	r3, [r4, #4]
 800a9b2:	6923      	ldr	r3, [r4, #16]
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	89a3      	ldrh	r3, [r4, #12]
 800a9b8:	f043 0308 	orr.w	r3, r3, #8
 800a9bc:	81a3      	strh	r3, [r4, #12]
 800a9be:	6923      	ldr	r3, [r4, #16]
 800a9c0:	b94b      	cbnz	r3, 800a9d6 <__swsetup_r+0x9a>
 800a9c2:	89a3      	ldrh	r3, [r4, #12]
 800a9c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9cc:	d003      	beq.n	800a9d6 <__swsetup_r+0x9a>
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	f000 f84d 	bl	800aa70 <__smakebuf_r>
 800a9d6:	89a0      	ldrh	r0, [r4, #12]
 800a9d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9dc:	f010 0301 	ands.w	r3, r0, #1
 800a9e0:	d00a      	beq.n	800a9f8 <__swsetup_r+0xbc>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	60a3      	str	r3, [r4, #8]
 800a9e6:	6963      	ldr	r3, [r4, #20]
 800a9e8:	425b      	negs	r3, r3
 800a9ea:	61a3      	str	r3, [r4, #24]
 800a9ec:	6923      	ldr	r3, [r4, #16]
 800a9ee:	b943      	cbnz	r3, 800aa02 <__swsetup_r+0xc6>
 800a9f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9f4:	d1ba      	bne.n	800a96c <__swsetup_r+0x30>
 800a9f6:	bd70      	pop	{r4, r5, r6, pc}
 800a9f8:	0781      	lsls	r1, r0, #30
 800a9fa:	bf58      	it	pl
 800a9fc:	6963      	ldrpl	r3, [r4, #20]
 800a9fe:	60a3      	str	r3, [r4, #8]
 800aa00:	e7f4      	b.n	800a9ec <__swsetup_r+0xb0>
 800aa02:	2000      	movs	r0, #0
 800aa04:	e7f7      	b.n	800a9f6 <__swsetup_r+0xba>
 800aa06:	bf00      	nop
 800aa08:	20000010 	.word	0x20000010
 800aa0c:	0800d618 	.word	0x0800d618
 800aa10:	0800d638 	.word	0x0800d638
 800aa14:	0800d5f8 	.word	0x0800d5f8

0800aa18 <abort>:
 800aa18:	b508      	push	{r3, lr}
 800aa1a:	2006      	movs	r0, #6
 800aa1c:	f000 f898 	bl	800ab50 <raise>
 800aa20:	2001      	movs	r0, #1
 800aa22:	f7f8 fa03 	bl	8002e2c <_exit>

0800aa26 <__swhatbuf_r>:
 800aa26:	b570      	push	{r4, r5, r6, lr}
 800aa28:	460e      	mov	r6, r1
 800aa2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa2e:	2900      	cmp	r1, #0
 800aa30:	b096      	sub	sp, #88	; 0x58
 800aa32:	4614      	mov	r4, r2
 800aa34:	461d      	mov	r5, r3
 800aa36:	da08      	bge.n	800aa4a <__swhatbuf_r+0x24>
 800aa38:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	602a      	str	r2, [r5, #0]
 800aa40:	061a      	lsls	r2, r3, #24
 800aa42:	d410      	bmi.n	800aa66 <__swhatbuf_r+0x40>
 800aa44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa48:	e00e      	b.n	800aa68 <__swhatbuf_r+0x42>
 800aa4a:	466a      	mov	r2, sp
 800aa4c:	f000 f89c 	bl	800ab88 <_fstat_r>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	dbf1      	blt.n	800aa38 <__swhatbuf_r+0x12>
 800aa54:	9a01      	ldr	r2, [sp, #4]
 800aa56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa5e:	425a      	negs	r2, r3
 800aa60:	415a      	adcs	r2, r3
 800aa62:	602a      	str	r2, [r5, #0]
 800aa64:	e7ee      	b.n	800aa44 <__swhatbuf_r+0x1e>
 800aa66:	2340      	movs	r3, #64	; 0x40
 800aa68:	2000      	movs	r0, #0
 800aa6a:	6023      	str	r3, [r4, #0]
 800aa6c:	b016      	add	sp, #88	; 0x58
 800aa6e:	bd70      	pop	{r4, r5, r6, pc}

0800aa70 <__smakebuf_r>:
 800aa70:	898b      	ldrh	r3, [r1, #12]
 800aa72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa74:	079d      	lsls	r5, r3, #30
 800aa76:	4606      	mov	r6, r0
 800aa78:	460c      	mov	r4, r1
 800aa7a:	d507      	bpl.n	800aa8c <__smakebuf_r+0x1c>
 800aa7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	6123      	str	r3, [r4, #16]
 800aa84:	2301      	movs	r3, #1
 800aa86:	6163      	str	r3, [r4, #20]
 800aa88:	b002      	add	sp, #8
 800aa8a:	bd70      	pop	{r4, r5, r6, pc}
 800aa8c:	ab01      	add	r3, sp, #4
 800aa8e:	466a      	mov	r2, sp
 800aa90:	f7ff ffc9 	bl	800aa26 <__swhatbuf_r>
 800aa94:	9900      	ldr	r1, [sp, #0]
 800aa96:	4605      	mov	r5, r0
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f7fc fd6f 	bl	800757c <_malloc_r>
 800aa9e:	b948      	cbnz	r0, 800aab4 <__smakebuf_r+0x44>
 800aaa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaa4:	059a      	lsls	r2, r3, #22
 800aaa6:	d4ef      	bmi.n	800aa88 <__smakebuf_r+0x18>
 800aaa8:	f023 0303 	bic.w	r3, r3, #3
 800aaac:	f043 0302 	orr.w	r3, r3, #2
 800aab0:	81a3      	strh	r3, [r4, #12]
 800aab2:	e7e3      	b.n	800aa7c <__smakebuf_r+0xc>
 800aab4:	4b0d      	ldr	r3, [pc, #52]	; (800aaec <__smakebuf_r+0x7c>)
 800aab6:	62b3      	str	r3, [r6, #40]	; 0x28
 800aab8:	89a3      	ldrh	r3, [r4, #12]
 800aaba:	6020      	str	r0, [r4, #0]
 800aabc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aac0:	81a3      	strh	r3, [r4, #12]
 800aac2:	9b00      	ldr	r3, [sp, #0]
 800aac4:	6163      	str	r3, [r4, #20]
 800aac6:	9b01      	ldr	r3, [sp, #4]
 800aac8:	6120      	str	r0, [r4, #16]
 800aaca:	b15b      	cbz	r3, 800aae4 <__smakebuf_r+0x74>
 800aacc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aad0:	4630      	mov	r0, r6
 800aad2:	f000 f86b 	bl	800abac <_isatty_r>
 800aad6:	b128      	cbz	r0, 800aae4 <__smakebuf_r+0x74>
 800aad8:	89a3      	ldrh	r3, [r4, #12]
 800aada:	f023 0303 	bic.w	r3, r3, #3
 800aade:	f043 0301 	orr.w	r3, r3, #1
 800aae2:	81a3      	strh	r3, [r4, #12]
 800aae4:	89a0      	ldrh	r0, [r4, #12]
 800aae6:	4305      	orrs	r5, r0
 800aae8:	81a5      	strh	r5, [r4, #12]
 800aaea:	e7cd      	b.n	800aa88 <__smakebuf_r+0x18>
 800aaec:	0800a349 	.word	0x0800a349

0800aaf0 <_malloc_usable_size_r>:
 800aaf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaf4:	1f18      	subs	r0, r3, #4
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	bfbc      	itt	lt
 800aafa:	580b      	ldrlt	r3, [r1, r0]
 800aafc:	18c0      	addlt	r0, r0, r3
 800aafe:	4770      	bx	lr

0800ab00 <_raise_r>:
 800ab00:	291f      	cmp	r1, #31
 800ab02:	b538      	push	{r3, r4, r5, lr}
 800ab04:	4604      	mov	r4, r0
 800ab06:	460d      	mov	r5, r1
 800ab08:	d904      	bls.n	800ab14 <_raise_r+0x14>
 800ab0a:	2316      	movs	r3, #22
 800ab0c:	6003      	str	r3, [r0, #0]
 800ab0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab12:	bd38      	pop	{r3, r4, r5, pc}
 800ab14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab16:	b112      	cbz	r2, 800ab1e <_raise_r+0x1e>
 800ab18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab1c:	b94b      	cbnz	r3, 800ab32 <_raise_r+0x32>
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f000 f830 	bl	800ab84 <_getpid_r>
 800ab24:	462a      	mov	r2, r5
 800ab26:	4601      	mov	r1, r0
 800ab28:	4620      	mov	r0, r4
 800ab2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab2e:	f000 b817 	b.w	800ab60 <_kill_r>
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d00a      	beq.n	800ab4c <_raise_r+0x4c>
 800ab36:	1c59      	adds	r1, r3, #1
 800ab38:	d103      	bne.n	800ab42 <_raise_r+0x42>
 800ab3a:	2316      	movs	r3, #22
 800ab3c:	6003      	str	r3, [r0, #0]
 800ab3e:	2001      	movs	r0, #1
 800ab40:	e7e7      	b.n	800ab12 <_raise_r+0x12>
 800ab42:	2400      	movs	r4, #0
 800ab44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab48:	4628      	mov	r0, r5
 800ab4a:	4798      	blx	r3
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	e7e0      	b.n	800ab12 <_raise_r+0x12>

0800ab50 <raise>:
 800ab50:	4b02      	ldr	r3, [pc, #8]	; (800ab5c <raise+0xc>)
 800ab52:	4601      	mov	r1, r0
 800ab54:	6818      	ldr	r0, [r3, #0]
 800ab56:	f7ff bfd3 	b.w	800ab00 <_raise_r>
 800ab5a:	bf00      	nop
 800ab5c:	20000010 	.word	0x20000010

0800ab60 <_kill_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	4d07      	ldr	r5, [pc, #28]	; (800ab80 <_kill_r+0x20>)
 800ab64:	2300      	movs	r3, #0
 800ab66:	4604      	mov	r4, r0
 800ab68:	4608      	mov	r0, r1
 800ab6a:	4611      	mov	r1, r2
 800ab6c:	602b      	str	r3, [r5, #0]
 800ab6e:	f7f8 f94d 	bl	8002e0c <_kill>
 800ab72:	1c43      	adds	r3, r0, #1
 800ab74:	d102      	bne.n	800ab7c <_kill_r+0x1c>
 800ab76:	682b      	ldr	r3, [r5, #0]
 800ab78:	b103      	cbz	r3, 800ab7c <_kill_r+0x1c>
 800ab7a:	6023      	str	r3, [r4, #0]
 800ab7c:	bd38      	pop	{r3, r4, r5, pc}
 800ab7e:	bf00      	nop
 800ab80:	2000063c 	.word	0x2000063c

0800ab84 <_getpid_r>:
 800ab84:	f7f8 b93a 	b.w	8002dfc <_getpid>

0800ab88 <_fstat_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4d07      	ldr	r5, [pc, #28]	; (800aba8 <_fstat_r+0x20>)
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	4604      	mov	r4, r0
 800ab90:	4608      	mov	r0, r1
 800ab92:	4611      	mov	r1, r2
 800ab94:	602b      	str	r3, [r5, #0]
 800ab96:	f7f8 f998 	bl	8002eca <_fstat>
 800ab9a:	1c43      	adds	r3, r0, #1
 800ab9c:	d102      	bne.n	800aba4 <_fstat_r+0x1c>
 800ab9e:	682b      	ldr	r3, [r5, #0]
 800aba0:	b103      	cbz	r3, 800aba4 <_fstat_r+0x1c>
 800aba2:	6023      	str	r3, [r4, #0]
 800aba4:	bd38      	pop	{r3, r4, r5, pc}
 800aba6:	bf00      	nop
 800aba8:	2000063c 	.word	0x2000063c

0800abac <_isatty_r>:
 800abac:	b538      	push	{r3, r4, r5, lr}
 800abae:	4d06      	ldr	r5, [pc, #24]	; (800abc8 <_isatty_r+0x1c>)
 800abb0:	2300      	movs	r3, #0
 800abb2:	4604      	mov	r4, r0
 800abb4:	4608      	mov	r0, r1
 800abb6:	602b      	str	r3, [r5, #0]
 800abb8:	f7f8 f997 	bl	8002eea <_isatty>
 800abbc:	1c43      	adds	r3, r0, #1
 800abbe:	d102      	bne.n	800abc6 <_isatty_r+0x1a>
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	b103      	cbz	r3, 800abc6 <_isatty_r+0x1a>
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	2000063c 	.word	0x2000063c
 800abcc:	00000000 	.word	0x00000000

0800abd0 <cos>:
 800abd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abd2:	ec53 2b10 	vmov	r2, r3, d0
 800abd6:	4826      	ldr	r0, [pc, #152]	; (800ac70 <cos+0xa0>)
 800abd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800abdc:	4281      	cmp	r1, r0
 800abde:	dc06      	bgt.n	800abee <cos+0x1e>
 800abe0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ac68 <cos+0x98>
 800abe4:	b005      	add	sp, #20
 800abe6:	f85d eb04 	ldr.w	lr, [sp], #4
 800abea:	f001 ba41 	b.w	800c070 <__kernel_cos>
 800abee:	4821      	ldr	r0, [pc, #132]	; (800ac74 <cos+0xa4>)
 800abf0:	4281      	cmp	r1, r0
 800abf2:	dd09      	ble.n	800ac08 <cos+0x38>
 800abf4:	ee10 0a10 	vmov	r0, s0
 800abf8:	4619      	mov	r1, r3
 800abfa:	f7f5 fb5d 	bl	80002b8 <__aeabi_dsub>
 800abfe:	ec41 0b10 	vmov	d0, r0, r1
 800ac02:	b005      	add	sp, #20
 800ac04:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac08:	4668      	mov	r0, sp
 800ac0a:	f000 ff71 	bl	800baf0 <__ieee754_rem_pio2>
 800ac0e:	f000 0003 	and.w	r0, r0, #3
 800ac12:	2801      	cmp	r0, #1
 800ac14:	d00b      	beq.n	800ac2e <cos+0x5e>
 800ac16:	2802      	cmp	r0, #2
 800ac18:	d016      	beq.n	800ac48 <cos+0x78>
 800ac1a:	b9e0      	cbnz	r0, 800ac56 <cos+0x86>
 800ac1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ac20:	ed9d 0b00 	vldr	d0, [sp]
 800ac24:	f001 fa24 	bl	800c070 <__kernel_cos>
 800ac28:	ec51 0b10 	vmov	r0, r1, d0
 800ac2c:	e7e7      	b.n	800abfe <cos+0x2e>
 800ac2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ac32:	ed9d 0b00 	vldr	d0, [sp]
 800ac36:	f001 fe33 	bl	800c8a0 <__kernel_sin>
 800ac3a:	ec53 2b10 	vmov	r2, r3, d0
 800ac3e:	ee10 0a10 	vmov	r0, s0
 800ac42:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ac46:	e7da      	b.n	800abfe <cos+0x2e>
 800ac48:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ac4c:	ed9d 0b00 	vldr	d0, [sp]
 800ac50:	f001 fa0e 	bl	800c070 <__kernel_cos>
 800ac54:	e7f1      	b.n	800ac3a <cos+0x6a>
 800ac56:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ac5a:	ed9d 0b00 	vldr	d0, [sp]
 800ac5e:	2001      	movs	r0, #1
 800ac60:	f001 fe1e 	bl	800c8a0 <__kernel_sin>
 800ac64:	e7e0      	b.n	800ac28 <cos+0x58>
 800ac66:	bf00      	nop
	...
 800ac70:	3fe921fb 	.word	0x3fe921fb
 800ac74:	7fefffff 	.word	0x7fefffff

0800ac78 <round>:
 800ac78:	ec51 0b10 	vmov	r0, r1, d0
 800ac7c:	b570      	push	{r4, r5, r6, lr}
 800ac7e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800ac82:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800ac86:	2c13      	cmp	r4, #19
 800ac88:	ee10 2a10 	vmov	r2, s0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	dc19      	bgt.n	800acc4 <round+0x4c>
 800ac90:	2c00      	cmp	r4, #0
 800ac92:	da09      	bge.n	800aca8 <round+0x30>
 800ac94:	3401      	adds	r4, #1
 800ac96:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800ac9a:	d103      	bne.n	800aca4 <round+0x2c>
 800ac9c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aca0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aca4:	2200      	movs	r2, #0
 800aca6:	e028      	b.n	800acfa <round+0x82>
 800aca8:	4d15      	ldr	r5, [pc, #84]	; (800ad00 <round+0x88>)
 800acaa:	4125      	asrs	r5, r4
 800acac:	ea01 0605 	and.w	r6, r1, r5
 800acb0:	4332      	orrs	r2, r6
 800acb2:	d00e      	beq.n	800acd2 <round+0x5a>
 800acb4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800acb8:	fa42 f404 	asr.w	r4, r2, r4
 800acbc:	4423      	add	r3, r4
 800acbe:	ea23 0305 	bic.w	r3, r3, r5
 800acc2:	e7ef      	b.n	800aca4 <round+0x2c>
 800acc4:	2c33      	cmp	r4, #51	; 0x33
 800acc6:	dd07      	ble.n	800acd8 <round+0x60>
 800acc8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800accc:	d101      	bne.n	800acd2 <round+0x5a>
 800acce:	f7f5 faf5 	bl	80002bc <__adddf3>
 800acd2:	ec41 0b10 	vmov	d0, r0, r1
 800acd6:	bd70      	pop	{r4, r5, r6, pc}
 800acd8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800acdc:	f04f 35ff 	mov.w	r5, #4294967295
 800ace0:	40f5      	lsrs	r5, r6
 800ace2:	4228      	tst	r0, r5
 800ace4:	d0f5      	beq.n	800acd2 <round+0x5a>
 800ace6:	2101      	movs	r1, #1
 800ace8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800acec:	fa01 f404 	lsl.w	r4, r1, r4
 800acf0:	1912      	adds	r2, r2, r4
 800acf2:	bf28      	it	cs
 800acf4:	185b      	addcs	r3, r3, r1
 800acf6:	ea22 0205 	bic.w	r2, r2, r5
 800acfa:	4619      	mov	r1, r3
 800acfc:	4610      	mov	r0, r2
 800acfe:	e7e8      	b.n	800acd2 <round+0x5a>
 800ad00:	000fffff 	.word	0x000fffff
 800ad04:	00000000 	.word	0x00000000

0800ad08 <sin>:
 800ad08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad0a:	ec53 2b10 	vmov	r2, r3, d0
 800ad0e:	4828      	ldr	r0, [pc, #160]	; (800adb0 <sin+0xa8>)
 800ad10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ad14:	4281      	cmp	r1, r0
 800ad16:	dc07      	bgt.n	800ad28 <sin+0x20>
 800ad18:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ada8 <sin+0xa0>
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	b005      	add	sp, #20
 800ad20:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad24:	f001 bdbc 	b.w	800c8a0 <__kernel_sin>
 800ad28:	4822      	ldr	r0, [pc, #136]	; (800adb4 <sin+0xac>)
 800ad2a:	4281      	cmp	r1, r0
 800ad2c:	dd09      	ble.n	800ad42 <sin+0x3a>
 800ad2e:	ee10 0a10 	vmov	r0, s0
 800ad32:	4619      	mov	r1, r3
 800ad34:	f7f5 fac0 	bl	80002b8 <__aeabi_dsub>
 800ad38:	ec41 0b10 	vmov	d0, r0, r1
 800ad3c:	b005      	add	sp, #20
 800ad3e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad42:	4668      	mov	r0, sp
 800ad44:	f000 fed4 	bl	800baf0 <__ieee754_rem_pio2>
 800ad48:	f000 0003 	and.w	r0, r0, #3
 800ad4c:	2801      	cmp	r0, #1
 800ad4e:	d00c      	beq.n	800ad6a <sin+0x62>
 800ad50:	2802      	cmp	r0, #2
 800ad52:	d011      	beq.n	800ad78 <sin+0x70>
 800ad54:	b9f0      	cbnz	r0, 800ad94 <sin+0x8c>
 800ad56:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad5a:	ed9d 0b00 	vldr	d0, [sp]
 800ad5e:	2001      	movs	r0, #1
 800ad60:	f001 fd9e 	bl	800c8a0 <__kernel_sin>
 800ad64:	ec51 0b10 	vmov	r0, r1, d0
 800ad68:	e7e6      	b.n	800ad38 <sin+0x30>
 800ad6a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad6e:	ed9d 0b00 	vldr	d0, [sp]
 800ad72:	f001 f97d 	bl	800c070 <__kernel_cos>
 800ad76:	e7f5      	b.n	800ad64 <sin+0x5c>
 800ad78:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad7c:	ed9d 0b00 	vldr	d0, [sp]
 800ad80:	2001      	movs	r0, #1
 800ad82:	f001 fd8d 	bl	800c8a0 <__kernel_sin>
 800ad86:	ec53 2b10 	vmov	r2, r3, d0
 800ad8a:	ee10 0a10 	vmov	r0, s0
 800ad8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ad92:	e7d1      	b.n	800ad38 <sin+0x30>
 800ad94:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad98:	ed9d 0b00 	vldr	d0, [sp]
 800ad9c:	f001 f968 	bl	800c070 <__kernel_cos>
 800ada0:	e7f1      	b.n	800ad86 <sin+0x7e>
 800ada2:	bf00      	nop
 800ada4:	f3af 8000 	nop.w
	...
 800adb0:	3fe921fb 	.word	0x3fe921fb
 800adb4:	7fefffff 	.word	0x7fefffff

0800adb8 <atan2>:
 800adb8:	f000 b89e 	b.w	800aef8 <__ieee754_atan2>

0800adbc <pow>:
 800adbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adbe:	ed2d 8b02 	vpush	{d8}
 800adc2:	eeb0 8a40 	vmov.f32	s16, s0
 800adc6:	eef0 8a60 	vmov.f32	s17, s1
 800adca:	ec55 4b11 	vmov	r4, r5, d1
 800adce:	f000 f95f 	bl	800b090 <__ieee754_pow>
 800add2:	4622      	mov	r2, r4
 800add4:	462b      	mov	r3, r5
 800add6:	4620      	mov	r0, r4
 800add8:	4629      	mov	r1, r5
 800adda:	ec57 6b10 	vmov	r6, r7, d0
 800adde:	f7f5 febd 	bl	8000b5c <__aeabi_dcmpun>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d13b      	bne.n	800ae5e <pow+0xa2>
 800ade6:	ec51 0b18 	vmov	r0, r1, d8
 800adea:	2200      	movs	r2, #0
 800adec:	2300      	movs	r3, #0
 800adee:	f7f5 fe83 	bl	8000af8 <__aeabi_dcmpeq>
 800adf2:	b1b8      	cbz	r0, 800ae24 <pow+0x68>
 800adf4:	2200      	movs	r2, #0
 800adf6:	2300      	movs	r3, #0
 800adf8:	4620      	mov	r0, r4
 800adfa:	4629      	mov	r1, r5
 800adfc:	f7f5 fe7c 	bl	8000af8 <__aeabi_dcmpeq>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d146      	bne.n	800ae92 <pow+0xd6>
 800ae04:	ec45 4b10 	vmov	d0, r4, r5
 800ae08:	f001 ffe3 	bl	800cdd2 <finite>
 800ae0c:	b338      	cbz	r0, 800ae5e <pow+0xa2>
 800ae0e:	2200      	movs	r2, #0
 800ae10:	2300      	movs	r3, #0
 800ae12:	4620      	mov	r0, r4
 800ae14:	4629      	mov	r1, r5
 800ae16:	f7f5 fe79 	bl	8000b0c <__aeabi_dcmplt>
 800ae1a:	b300      	cbz	r0, 800ae5e <pow+0xa2>
 800ae1c:	f7fc fb08 	bl	8007430 <__errno>
 800ae20:	2322      	movs	r3, #34	; 0x22
 800ae22:	e01b      	b.n	800ae5c <pow+0xa0>
 800ae24:	ec47 6b10 	vmov	d0, r6, r7
 800ae28:	f001 ffd3 	bl	800cdd2 <finite>
 800ae2c:	b9e0      	cbnz	r0, 800ae68 <pow+0xac>
 800ae2e:	eeb0 0a48 	vmov.f32	s0, s16
 800ae32:	eef0 0a68 	vmov.f32	s1, s17
 800ae36:	f001 ffcc 	bl	800cdd2 <finite>
 800ae3a:	b1a8      	cbz	r0, 800ae68 <pow+0xac>
 800ae3c:	ec45 4b10 	vmov	d0, r4, r5
 800ae40:	f001 ffc7 	bl	800cdd2 <finite>
 800ae44:	b180      	cbz	r0, 800ae68 <pow+0xac>
 800ae46:	4632      	mov	r2, r6
 800ae48:	463b      	mov	r3, r7
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	4639      	mov	r1, r7
 800ae4e:	f7f5 fe85 	bl	8000b5c <__aeabi_dcmpun>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d0e2      	beq.n	800ae1c <pow+0x60>
 800ae56:	f7fc faeb 	bl	8007430 <__errno>
 800ae5a:	2321      	movs	r3, #33	; 0x21
 800ae5c:	6003      	str	r3, [r0, #0]
 800ae5e:	ecbd 8b02 	vpop	{d8}
 800ae62:	ec47 6b10 	vmov	d0, r6, r7
 800ae66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae68:	2200      	movs	r2, #0
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	4639      	mov	r1, r7
 800ae70:	f7f5 fe42 	bl	8000af8 <__aeabi_dcmpeq>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d0f2      	beq.n	800ae5e <pow+0xa2>
 800ae78:	eeb0 0a48 	vmov.f32	s0, s16
 800ae7c:	eef0 0a68 	vmov.f32	s1, s17
 800ae80:	f001 ffa7 	bl	800cdd2 <finite>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d0ea      	beq.n	800ae5e <pow+0xa2>
 800ae88:	ec45 4b10 	vmov	d0, r4, r5
 800ae8c:	f001 ffa1 	bl	800cdd2 <finite>
 800ae90:	e7c3      	b.n	800ae1a <pow+0x5e>
 800ae92:	4f01      	ldr	r7, [pc, #4]	; (800ae98 <pow+0xdc>)
 800ae94:	2600      	movs	r6, #0
 800ae96:	e7e2      	b.n	800ae5e <pow+0xa2>
 800ae98:	3ff00000 	.word	0x3ff00000

0800ae9c <sqrt>:
 800ae9c:	b538      	push	{r3, r4, r5, lr}
 800ae9e:	ed2d 8b02 	vpush	{d8}
 800aea2:	ec55 4b10 	vmov	r4, r5, d0
 800aea6:	f001 f82f 	bl	800bf08 <__ieee754_sqrt>
 800aeaa:	4622      	mov	r2, r4
 800aeac:	462b      	mov	r3, r5
 800aeae:	4620      	mov	r0, r4
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	eeb0 8a40 	vmov.f32	s16, s0
 800aeb6:	eef0 8a60 	vmov.f32	s17, s1
 800aeba:	f7f5 fe4f 	bl	8000b5c <__aeabi_dcmpun>
 800aebe:	b990      	cbnz	r0, 800aee6 <sqrt+0x4a>
 800aec0:	2200      	movs	r2, #0
 800aec2:	2300      	movs	r3, #0
 800aec4:	4620      	mov	r0, r4
 800aec6:	4629      	mov	r1, r5
 800aec8:	f7f5 fe20 	bl	8000b0c <__aeabi_dcmplt>
 800aecc:	b158      	cbz	r0, 800aee6 <sqrt+0x4a>
 800aece:	f7fc faaf 	bl	8007430 <__errno>
 800aed2:	2321      	movs	r3, #33	; 0x21
 800aed4:	6003      	str	r3, [r0, #0]
 800aed6:	2200      	movs	r2, #0
 800aed8:	2300      	movs	r3, #0
 800aeda:	4610      	mov	r0, r2
 800aedc:	4619      	mov	r1, r3
 800aede:	f7f5 fccd 	bl	800087c <__aeabi_ddiv>
 800aee2:	ec41 0b18 	vmov	d8, r0, r1
 800aee6:	eeb0 0a48 	vmov.f32	s0, s16
 800aeea:	eef0 0a68 	vmov.f32	s1, s17
 800aeee:	ecbd 8b02 	vpop	{d8}
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	0000      	movs	r0, r0
	...

0800aef8 <__ieee754_atan2>:
 800aef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aefc:	ec57 6b11 	vmov	r6, r7, d1
 800af00:	4273      	negs	r3, r6
 800af02:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b088 <__ieee754_atan2+0x190>
 800af06:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800af0a:	4333      	orrs	r3, r6
 800af0c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800af10:	4573      	cmp	r3, lr
 800af12:	ec51 0b10 	vmov	r0, r1, d0
 800af16:	ee11 8a10 	vmov	r8, s2
 800af1a:	d80a      	bhi.n	800af32 <__ieee754_atan2+0x3a>
 800af1c:	4244      	negs	r4, r0
 800af1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af22:	4304      	orrs	r4, r0
 800af24:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800af28:	4574      	cmp	r4, lr
 800af2a:	ee10 9a10 	vmov	r9, s0
 800af2e:	468c      	mov	ip, r1
 800af30:	d907      	bls.n	800af42 <__ieee754_atan2+0x4a>
 800af32:	4632      	mov	r2, r6
 800af34:	463b      	mov	r3, r7
 800af36:	f7f5 f9c1 	bl	80002bc <__adddf3>
 800af3a:	ec41 0b10 	vmov	d0, r0, r1
 800af3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af42:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800af46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800af4a:	4334      	orrs	r4, r6
 800af4c:	d103      	bne.n	800af56 <__ieee754_atan2+0x5e>
 800af4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af52:	f001 bd95 	b.w	800ca80 <atan>
 800af56:	17bc      	asrs	r4, r7, #30
 800af58:	f004 0402 	and.w	r4, r4, #2
 800af5c:	ea53 0909 	orrs.w	r9, r3, r9
 800af60:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800af64:	d107      	bne.n	800af76 <__ieee754_atan2+0x7e>
 800af66:	2c02      	cmp	r4, #2
 800af68:	d060      	beq.n	800b02c <__ieee754_atan2+0x134>
 800af6a:	2c03      	cmp	r4, #3
 800af6c:	d1e5      	bne.n	800af3a <__ieee754_atan2+0x42>
 800af6e:	a142      	add	r1, pc, #264	; (adr r1, 800b078 <__ieee754_atan2+0x180>)
 800af70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af74:	e7e1      	b.n	800af3a <__ieee754_atan2+0x42>
 800af76:	ea52 0808 	orrs.w	r8, r2, r8
 800af7a:	d106      	bne.n	800af8a <__ieee754_atan2+0x92>
 800af7c:	f1bc 0f00 	cmp.w	ip, #0
 800af80:	da5f      	bge.n	800b042 <__ieee754_atan2+0x14a>
 800af82:	a13f      	add	r1, pc, #252	; (adr r1, 800b080 <__ieee754_atan2+0x188>)
 800af84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af88:	e7d7      	b.n	800af3a <__ieee754_atan2+0x42>
 800af8a:	4572      	cmp	r2, lr
 800af8c:	d10f      	bne.n	800afae <__ieee754_atan2+0xb6>
 800af8e:	4293      	cmp	r3, r2
 800af90:	f104 34ff 	add.w	r4, r4, #4294967295
 800af94:	d107      	bne.n	800afa6 <__ieee754_atan2+0xae>
 800af96:	2c02      	cmp	r4, #2
 800af98:	d84c      	bhi.n	800b034 <__ieee754_atan2+0x13c>
 800af9a:	4b35      	ldr	r3, [pc, #212]	; (800b070 <__ieee754_atan2+0x178>)
 800af9c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800afa0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800afa4:	e7c9      	b.n	800af3a <__ieee754_atan2+0x42>
 800afa6:	2c02      	cmp	r4, #2
 800afa8:	d848      	bhi.n	800b03c <__ieee754_atan2+0x144>
 800afaa:	4b32      	ldr	r3, [pc, #200]	; (800b074 <__ieee754_atan2+0x17c>)
 800afac:	e7f6      	b.n	800af9c <__ieee754_atan2+0xa4>
 800afae:	4573      	cmp	r3, lr
 800afb0:	d0e4      	beq.n	800af7c <__ieee754_atan2+0x84>
 800afb2:	1a9b      	subs	r3, r3, r2
 800afb4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800afb8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800afbc:	da1e      	bge.n	800affc <__ieee754_atan2+0x104>
 800afbe:	2f00      	cmp	r7, #0
 800afc0:	da01      	bge.n	800afc6 <__ieee754_atan2+0xce>
 800afc2:	323c      	adds	r2, #60	; 0x3c
 800afc4:	db1e      	blt.n	800b004 <__ieee754_atan2+0x10c>
 800afc6:	4632      	mov	r2, r6
 800afc8:	463b      	mov	r3, r7
 800afca:	f7f5 fc57 	bl	800087c <__aeabi_ddiv>
 800afce:	ec41 0b10 	vmov	d0, r0, r1
 800afd2:	f001 fef5 	bl	800cdc0 <fabs>
 800afd6:	f001 fd53 	bl	800ca80 <atan>
 800afda:	ec51 0b10 	vmov	r0, r1, d0
 800afde:	2c01      	cmp	r4, #1
 800afe0:	d013      	beq.n	800b00a <__ieee754_atan2+0x112>
 800afe2:	2c02      	cmp	r4, #2
 800afe4:	d015      	beq.n	800b012 <__ieee754_atan2+0x11a>
 800afe6:	2c00      	cmp	r4, #0
 800afe8:	d0a7      	beq.n	800af3a <__ieee754_atan2+0x42>
 800afea:	a319      	add	r3, pc, #100	; (adr r3, 800b050 <__ieee754_atan2+0x158>)
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	f7f5 f962 	bl	80002b8 <__aeabi_dsub>
 800aff4:	a318      	add	r3, pc, #96	; (adr r3, 800b058 <__ieee754_atan2+0x160>)
 800aff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affa:	e014      	b.n	800b026 <__ieee754_atan2+0x12e>
 800affc:	a118      	add	r1, pc, #96	; (adr r1, 800b060 <__ieee754_atan2+0x168>)
 800affe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b002:	e7ec      	b.n	800afde <__ieee754_atan2+0xe6>
 800b004:	2000      	movs	r0, #0
 800b006:	2100      	movs	r1, #0
 800b008:	e7e9      	b.n	800afde <__ieee754_atan2+0xe6>
 800b00a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b00e:	4619      	mov	r1, r3
 800b010:	e793      	b.n	800af3a <__ieee754_atan2+0x42>
 800b012:	a30f      	add	r3, pc, #60	; (adr r3, 800b050 <__ieee754_atan2+0x158>)
 800b014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b018:	f7f5 f94e 	bl	80002b8 <__aeabi_dsub>
 800b01c:	4602      	mov	r2, r0
 800b01e:	460b      	mov	r3, r1
 800b020:	a10d      	add	r1, pc, #52	; (adr r1, 800b058 <__ieee754_atan2+0x160>)
 800b022:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b026:	f7f5 f947 	bl	80002b8 <__aeabi_dsub>
 800b02a:	e786      	b.n	800af3a <__ieee754_atan2+0x42>
 800b02c:	a10a      	add	r1, pc, #40	; (adr r1, 800b058 <__ieee754_atan2+0x160>)
 800b02e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b032:	e782      	b.n	800af3a <__ieee754_atan2+0x42>
 800b034:	a10c      	add	r1, pc, #48	; (adr r1, 800b068 <__ieee754_atan2+0x170>)
 800b036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b03a:	e77e      	b.n	800af3a <__ieee754_atan2+0x42>
 800b03c:	2000      	movs	r0, #0
 800b03e:	2100      	movs	r1, #0
 800b040:	e77b      	b.n	800af3a <__ieee754_atan2+0x42>
 800b042:	a107      	add	r1, pc, #28	; (adr r1, 800b060 <__ieee754_atan2+0x168>)
 800b044:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b048:	e777      	b.n	800af3a <__ieee754_atan2+0x42>
 800b04a:	bf00      	nop
 800b04c:	f3af 8000 	nop.w
 800b050:	33145c07 	.word	0x33145c07
 800b054:	3ca1a626 	.word	0x3ca1a626
 800b058:	54442d18 	.word	0x54442d18
 800b05c:	400921fb 	.word	0x400921fb
 800b060:	54442d18 	.word	0x54442d18
 800b064:	3ff921fb 	.word	0x3ff921fb
 800b068:	54442d18 	.word	0x54442d18
 800b06c:	3fe921fb 	.word	0x3fe921fb
 800b070:	0800d668 	.word	0x0800d668
 800b074:	0800d680 	.word	0x0800d680
 800b078:	54442d18 	.word	0x54442d18
 800b07c:	c00921fb 	.word	0xc00921fb
 800b080:	54442d18 	.word	0x54442d18
 800b084:	bff921fb 	.word	0xbff921fb
 800b088:	7ff00000 	.word	0x7ff00000
 800b08c:	00000000 	.word	0x00000000

0800b090 <__ieee754_pow>:
 800b090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b094:	ed2d 8b06 	vpush	{d8-d10}
 800b098:	b089      	sub	sp, #36	; 0x24
 800b09a:	ed8d 1b00 	vstr	d1, [sp]
 800b09e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b0a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b0a6:	ea58 0102 	orrs.w	r1, r8, r2
 800b0aa:	ec57 6b10 	vmov	r6, r7, d0
 800b0ae:	d115      	bne.n	800b0dc <__ieee754_pow+0x4c>
 800b0b0:	19b3      	adds	r3, r6, r6
 800b0b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b0b6:	4152      	adcs	r2, r2
 800b0b8:	4299      	cmp	r1, r3
 800b0ba:	4b89      	ldr	r3, [pc, #548]	; (800b2e0 <__ieee754_pow+0x250>)
 800b0bc:	4193      	sbcs	r3, r2
 800b0be:	f080 84d2 	bcs.w	800ba66 <__ieee754_pow+0x9d6>
 800b0c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	f7f5 f8f7 	bl	80002bc <__adddf3>
 800b0ce:	ec41 0b10 	vmov	d0, r0, r1
 800b0d2:	b009      	add	sp, #36	; 0x24
 800b0d4:	ecbd 8b06 	vpop	{d8-d10}
 800b0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0dc:	4b81      	ldr	r3, [pc, #516]	; (800b2e4 <__ieee754_pow+0x254>)
 800b0de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b0e2:	429c      	cmp	r4, r3
 800b0e4:	ee10 aa10 	vmov	sl, s0
 800b0e8:	463d      	mov	r5, r7
 800b0ea:	dc06      	bgt.n	800b0fa <__ieee754_pow+0x6a>
 800b0ec:	d101      	bne.n	800b0f2 <__ieee754_pow+0x62>
 800b0ee:	2e00      	cmp	r6, #0
 800b0f0:	d1e7      	bne.n	800b0c2 <__ieee754_pow+0x32>
 800b0f2:	4598      	cmp	r8, r3
 800b0f4:	dc01      	bgt.n	800b0fa <__ieee754_pow+0x6a>
 800b0f6:	d10f      	bne.n	800b118 <__ieee754_pow+0x88>
 800b0f8:	b172      	cbz	r2, 800b118 <__ieee754_pow+0x88>
 800b0fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b0fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b102:	ea55 050a 	orrs.w	r5, r5, sl
 800b106:	d1dc      	bne.n	800b0c2 <__ieee754_pow+0x32>
 800b108:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b10c:	18db      	adds	r3, r3, r3
 800b10e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b112:	4152      	adcs	r2, r2
 800b114:	429d      	cmp	r5, r3
 800b116:	e7d0      	b.n	800b0ba <__ieee754_pow+0x2a>
 800b118:	2d00      	cmp	r5, #0
 800b11a:	da3b      	bge.n	800b194 <__ieee754_pow+0x104>
 800b11c:	4b72      	ldr	r3, [pc, #456]	; (800b2e8 <__ieee754_pow+0x258>)
 800b11e:	4598      	cmp	r8, r3
 800b120:	dc51      	bgt.n	800b1c6 <__ieee754_pow+0x136>
 800b122:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b126:	4598      	cmp	r8, r3
 800b128:	f340 84ac 	ble.w	800ba84 <__ieee754_pow+0x9f4>
 800b12c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b130:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b134:	2b14      	cmp	r3, #20
 800b136:	dd0f      	ble.n	800b158 <__ieee754_pow+0xc8>
 800b138:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b13c:	fa22 f103 	lsr.w	r1, r2, r3
 800b140:	fa01 f303 	lsl.w	r3, r1, r3
 800b144:	4293      	cmp	r3, r2
 800b146:	f040 849d 	bne.w	800ba84 <__ieee754_pow+0x9f4>
 800b14a:	f001 0101 	and.w	r1, r1, #1
 800b14e:	f1c1 0302 	rsb	r3, r1, #2
 800b152:	9304      	str	r3, [sp, #16]
 800b154:	b182      	cbz	r2, 800b178 <__ieee754_pow+0xe8>
 800b156:	e05f      	b.n	800b218 <__ieee754_pow+0x188>
 800b158:	2a00      	cmp	r2, #0
 800b15a:	d15b      	bne.n	800b214 <__ieee754_pow+0x184>
 800b15c:	f1c3 0314 	rsb	r3, r3, #20
 800b160:	fa48 f103 	asr.w	r1, r8, r3
 800b164:	fa01 f303 	lsl.w	r3, r1, r3
 800b168:	4543      	cmp	r3, r8
 800b16a:	f040 8488 	bne.w	800ba7e <__ieee754_pow+0x9ee>
 800b16e:	f001 0101 	and.w	r1, r1, #1
 800b172:	f1c1 0302 	rsb	r3, r1, #2
 800b176:	9304      	str	r3, [sp, #16]
 800b178:	4b5c      	ldr	r3, [pc, #368]	; (800b2ec <__ieee754_pow+0x25c>)
 800b17a:	4598      	cmp	r8, r3
 800b17c:	d132      	bne.n	800b1e4 <__ieee754_pow+0x154>
 800b17e:	f1b9 0f00 	cmp.w	r9, #0
 800b182:	f280 8478 	bge.w	800ba76 <__ieee754_pow+0x9e6>
 800b186:	4959      	ldr	r1, [pc, #356]	; (800b2ec <__ieee754_pow+0x25c>)
 800b188:	4632      	mov	r2, r6
 800b18a:	463b      	mov	r3, r7
 800b18c:	2000      	movs	r0, #0
 800b18e:	f7f5 fb75 	bl	800087c <__aeabi_ddiv>
 800b192:	e79c      	b.n	800b0ce <__ieee754_pow+0x3e>
 800b194:	2300      	movs	r3, #0
 800b196:	9304      	str	r3, [sp, #16]
 800b198:	2a00      	cmp	r2, #0
 800b19a:	d13d      	bne.n	800b218 <__ieee754_pow+0x188>
 800b19c:	4b51      	ldr	r3, [pc, #324]	; (800b2e4 <__ieee754_pow+0x254>)
 800b19e:	4598      	cmp	r8, r3
 800b1a0:	d1ea      	bne.n	800b178 <__ieee754_pow+0xe8>
 800b1a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b1a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b1aa:	ea53 030a 	orrs.w	r3, r3, sl
 800b1ae:	f000 845a 	beq.w	800ba66 <__ieee754_pow+0x9d6>
 800b1b2:	4b4f      	ldr	r3, [pc, #316]	; (800b2f0 <__ieee754_pow+0x260>)
 800b1b4:	429c      	cmp	r4, r3
 800b1b6:	dd08      	ble.n	800b1ca <__ieee754_pow+0x13a>
 800b1b8:	f1b9 0f00 	cmp.w	r9, #0
 800b1bc:	f2c0 8457 	blt.w	800ba6e <__ieee754_pow+0x9de>
 800b1c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1c4:	e783      	b.n	800b0ce <__ieee754_pow+0x3e>
 800b1c6:	2302      	movs	r3, #2
 800b1c8:	e7e5      	b.n	800b196 <__ieee754_pow+0x106>
 800b1ca:	f1b9 0f00 	cmp.w	r9, #0
 800b1ce:	f04f 0000 	mov.w	r0, #0
 800b1d2:	f04f 0100 	mov.w	r1, #0
 800b1d6:	f6bf af7a 	bge.w	800b0ce <__ieee754_pow+0x3e>
 800b1da:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b1de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b1e2:	e774      	b.n	800b0ce <__ieee754_pow+0x3e>
 800b1e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b1e8:	d106      	bne.n	800b1f8 <__ieee754_pow+0x168>
 800b1ea:	4632      	mov	r2, r6
 800b1ec:	463b      	mov	r3, r7
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	4639      	mov	r1, r7
 800b1f2:	f7f5 fa19 	bl	8000628 <__aeabi_dmul>
 800b1f6:	e76a      	b.n	800b0ce <__ieee754_pow+0x3e>
 800b1f8:	4b3e      	ldr	r3, [pc, #248]	; (800b2f4 <__ieee754_pow+0x264>)
 800b1fa:	4599      	cmp	r9, r3
 800b1fc:	d10c      	bne.n	800b218 <__ieee754_pow+0x188>
 800b1fe:	2d00      	cmp	r5, #0
 800b200:	db0a      	blt.n	800b218 <__ieee754_pow+0x188>
 800b202:	ec47 6b10 	vmov	d0, r6, r7
 800b206:	b009      	add	sp, #36	; 0x24
 800b208:	ecbd 8b06 	vpop	{d8-d10}
 800b20c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b210:	f000 be7a 	b.w	800bf08 <__ieee754_sqrt>
 800b214:	2300      	movs	r3, #0
 800b216:	9304      	str	r3, [sp, #16]
 800b218:	ec47 6b10 	vmov	d0, r6, r7
 800b21c:	f001 fdd0 	bl	800cdc0 <fabs>
 800b220:	ec51 0b10 	vmov	r0, r1, d0
 800b224:	f1ba 0f00 	cmp.w	sl, #0
 800b228:	d129      	bne.n	800b27e <__ieee754_pow+0x1ee>
 800b22a:	b124      	cbz	r4, 800b236 <__ieee754_pow+0x1a6>
 800b22c:	4b2f      	ldr	r3, [pc, #188]	; (800b2ec <__ieee754_pow+0x25c>)
 800b22e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b232:	429a      	cmp	r2, r3
 800b234:	d123      	bne.n	800b27e <__ieee754_pow+0x1ee>
 800b236:	f1b9 0f00 	cmp.w	r9, #0
 800b23a:	da05      	bge.n	800b248 <__ieee754_pow+0x1b8>
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	2000      	movs	r0, #0
 800b242:	492a      	ldr	r1, [pc, #168]	; (800b2ec <__ieee754_pow+0x25c>)
 800b244:	f7f5 fb1a 	bl	800087c <__aeabi_ddiv>
 800b248:	2d00      	cmp	r5, #0
 800b24a:	f6bf af40 	bge.w	800b0ce <__ieee754_pow+0x3e>
 800b24e:	9b04      	ldr	r3, [sp, #16]
 800b250:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b254:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b258:	4323      	orrs	r3, r4
 800b25a:	d108      	bne.n	800b26e <__ieee754_pow+0x1de>
 800b25c:	4602      	mov	r2, r0
 800b25e:	460b      	mov	r3, r1
 800b260:	4610      	mov	r0, r2
 800b262:	4619      	mov	r1, r3
 800b264:	f7f5 f828 	bl	80002b8 <__aeabi_dsub>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	e78f      	b.n	800b18e <__ieee754_pow+0xfe>
 800b26e:	9b04      	ldr	r3, [sp, #16]
 800b270:	2b01      	cmp	r3, #1
 800b272:	f47f af2c 	bne.w	800b0ce <__ieee754_pow+0x3e>
 800b276:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b27a:	4619      	mov	r1, r3
 800b27c:	e727      	b.n	800b0ce <__ieee754_pow+0x3e>
 800b27e:	0feb      	lsrs	r3, r5, #31
 800b280:	3b01      	subs	r3, #1
 800b282:	9306      	str	r3, [sp, #24]
 800b284:	9a06      	ldr	r2, [sp, #24]
 800b286:	9b04      	ldr	r3, [sp, #16]
 800b288:	4313      	orrs	r3, r2
 800b28a:	d102      	bne.n	800b292 <__ieee754_pow+0x202>
 800b28c:	4632      	mov	r2, r6
 800b28e:	463b      	mov	r3, r7
 800b290:	e7e6      	b.n	800b260 <__ieee754_pow+0x1d0>
 800b292:	4b19      	ldr	r3, [pc, #100]	; (800b2f8 <__ieee754_pow+0x268>)
 800b294:	4598      	cmp	r8, r3
 800b296:	f340 80fb 	ble.w	800b490 <__ieee754_pow+0x400>
 800b29a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b29e:	4598      	cmp	r8, r3
 800b2a0:	4b13      	ldr	r3, [pc, #76]	; (800b2f0 <__ieee754_pow+0x260>)
 800b2a2:	dd0c      	ble.n	800b2be <__ieee754_pow+0x22e>
 800b2a4:	429c      	cmp	r4, r3
 800b2a6:	dc0f      	bgt.n	800b2c8 <__ieee754_pow+0x238>
 800b2a8:	f1b9 0f00 	cmp.w	r9, #0
 800b2ac:	da0f      	bge.n	800b2ce <__ieee754_pow+0x23e>
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	b009      	add	sp, #36	; 0x24
 800b2b2:	ecbd 8b06 	vpop	{d8-d10}
 800b2b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ba:	f001 bbd6 	b.w	800ca6a <__math_oflow>
 800b2be:	429c      	cmp	r4, r3
 800b2c0:	dbf2      	blt.n	800b2a8 <__ieee754_pow+0x218>
 800b2c2:	4b0a      	ldr	r3, [pc, #40]	; (800b2ec <__ieee754_pow+0x25c>)
 800b2c4:	429c      	cmp	r4, r3
 800b2c6:	dd19      	ble.n	800b2fc <__ieee754_pow+0x26c>
 800b2c8:	f1b9 0f00 	cmp.w	r9, #0
 800b2cc:	dcef      	bgt.n	800b2ae <__ieee754_pow+0x21e>
 800b2ce:	2000      	movs	r0, #0
 800b2d0:	b009      	add	sp, #36	; 0x24
 800b2d2:	ecbd 8b06 	vpop	{d8-d10}
 800b2d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2da:	f001 bbbd 	b.w	800ca58 <__math_uflow>
 800b2de:	bf00      	nop
 800b2e0:	fff00000 	.word	0xfff00000
 800b2e4:	7ff00000 	.word	0x7ff00000
 800b2e8:	433fffff 	.word	0x433fffff
 800b2ec:	3ff00000 	.word	0x3ff00000
 800b2f0:	3fefffff 	.word	0x3fefffff
 800b2f4:	3fe00000 	.word	0x3fe00000
 800b2f8:	41e00000 	.word	0x41e00000
 800b2fc:	4b60      	ldr	r3, [pc, #384]	; (800b480 <__ieee754_pow+0x3f0>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	f7f4 ffda 	bl	80002b8 <__aeabi_dsub>
 800b304:	a354      	add	r3, pc, #336	; (adr r3, 800b458 <__ieee754_pow+0x3c8>)
 800b306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30a:	4604      	mov	r4, r0
 800b30c:	460d      	mov	r5, r1
 800b30e:	f7f5 f98b 	bl	8000628 <__aeabi_dmul>
 800b312:	a353      	add	r3, pc, #332	; (adr r3, 800b460 <__ieee754_pow+0x3d0>)
 800b314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b318:	4606      	mov	r6, r0
 800b31a:	460f      	mov	r7, r1
 800b31c:	4620      	mov	r0, r4
 800b31e:	4629      	mov	r1, r5
 800b320:	f7f5 f982 	bl	8000628 <__aeabi_dmul>
 800b324:	4b57      	ldr	r3, [pc, #348]	; (800b484 <__ieee754_pow+0x3f4>)
 800b326:	4682      	mov	sl, r0
 800b328:	468b      	mov	fp, r1
 800b32a:	2200      	movs	r2, #0
 800b32c:	4620      	mov	r0, r4
 800b32e:	4629      	mov	r1, r5
 800b330:	f7f5 f97a 	bl	8000628 <__aeabi_dmul>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	a14b      	add	r1, pc, #300	; (adr r1, 800b468 <__ieee754_pow+0x3d8>)
 800b33a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b33e:	f7f4 ffbb 	bl	80002b8 <__aeabi_dsub>
 800b342:	4622      	mov	r2, r4
 800b344:	462b      	mov	r3, r5
 800b346:	f7f5 f96f 	bl	8000628 <__aeabi_dmul>
 800b34a:	4602      	mov	r2, r0
 800b34c:	460b      	mov	r3, r1
 800b34e:	2000      	movs	r0, #0
 800b350:	494d      	ldr	r1, [pc, #308]	; (800b488 <__ieee754_pow+0x3f8>)
 800b352:	f7f4 ffb1 	bl	80002b8 <__aeabi_dsub>
 800b356:	4622      	mov	r2, r4
 800b358:	4680      	mov	r8, r0
 800b35a:	4689      	mov	r9, r1
 800b35c:	462b      	mov	r3, r5
 800b35e:	4620      	mov	r0, r4
 800b360:	4629      	mov	r1, r5
 800b362:	f7f5 f961 	bl	8000628 <__aeabi_dmul>
 800b366:	4602      	mov	r2, r0
 800b368:	460b      	mov	r3, r1
 800b36a:	4640      	mov	r0, r8
 800b36c:	4649      	mov	r1, r9
 800b36e:	f7f5 f95b 	bl	8000628 <__aeabi_dmul>
 800b372:	a33f      	add	r3, pc, #252	; (adr r3, 800b470 <__ieee754_pow+0x3e0>)
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	f7f5 f956 	bl	8000628 <__aeabi_dmul>
 800b37c:	4602      	mov	r2, r0
 800b37e:	460b      	mov	r3, r1
 800b380:	4650      	mov	r0, sl
 800b382:	4659      	mov	r1, fp
 800b384:	f7f4 ff98 	bl	80002b8 <__aeabi_dsub>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	4680      	mov	r8, r0
 800b38e:	4689      	mov	r9, r1
 800b390:	4630      	mov	r0, r6
 800b392:	4639      	mov	r1, r7
 800b394:	f7f4 ff92 	bl	80002bc <__adddf3>
 800b398:	2000      	movs	r0, #0
 800b39a:	4632      	mov	r2, r6
 800b39c:	463b      	mov	r3, r7
 800b39e:	4604      	mov	r4, r0
 800b3a0:	460d      	mov	r5, r1
 800b3a2:	f7f4 ff89 	bl	80002b8 <__aeabi_dsub>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	4640      	mov	r0, r8
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	f7f4 ff83 	bl	80002b8 <__aeabi_dsub>
 800b3b2:	9b04      	ldr	r3, [sp, #16]
 800b3b4:	9a06      	ldr	r2, [sp, #24]
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	4682      	mov	sl, r0
 800b3bc:	468b      	mov	fp, r1
 800b3be:	f040 81e7 	bne.w	800b790 <__ieee754_pow+0x700>
 800b3c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b478 <__ieee754_pow+0x3e8>
 800b3c6:	eeb0 8a47 	vmov.f32	s16, s14
 800b3ca:	eef0 8a67 	vmov.f32	s17, s15
 800b3ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b3d2:	2600      	movs	r6, #0
 800b3d4:	4632      	mov	r2, r6
 800b3d6:	463b      	mov	r3, r7
 800b3d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3dc:	f7f4 ff6c 	bl	80002b8 <__aeabi_dsub>
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	462b      	mov	r3, r5
 800b3e4:	f7f5 f920 	bl	8000628 <__aeabi_dmul>
 800b3e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3ec:	4680      	mov	r8, r0
 800b3ee:	4689      	mov	r9, r1
 800b3f0:	4650      	mov	r0, sl
 800b3f2:	4659      	mov	r1, fp
 800b3f4:	f7f5 f918 	bl	8000628 <__aeabi_dmul>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	4640      	mov	r0, r8
 800b3fe:	4649      	mov	r1, r9
 800b400:	f7f4 ff5c 	bl	80002bc <__adddf3>
 800b404:	4632      	mov	r2, r6
 800b406:	463b      	mov	r3, r7
 800b408:	4680      	mov	r8, r0
 800b40a:	4689      	mov	r9, r1
 800b40c:	4620      	mov	r0, r4
 800b40e:	4629      	mov	r1, r5
 800b410:	f7f5 f90a 	bl	8000628 <__aeabi_dmul>
 800b414:	460b      	mov	r3, r1
 800b416:	4604      	mov	r4, r0
 800b418:	460d      	mov	r5, r1
 800b41a:	4602      	mov	r2, r0
 800b41c:	4649      	mov	r1, r9
 800b41e:	4640      	mov	r0, r8
 800b420:	f7f4 ff4c 	bl	80002bc <__adddf3>
 800b424:	4b19      	ldr	r3, [pc, #100]	; (800b48c <__ieee754_pow+0x3fc>)
 800b426:	4299      	cmp	r1, r3
 800b428:	ec45 4b19 	vmov	d9, r4, r5
 800b42c:	4606      	mov	r6, r0
 800b42e:	460f      	mov	r7, r1
 800b430:	468b      	mov	fp, r1
 800b432:	f340 82f1 	ble.w	800ba18 <__ieee754_pow+0x988>
 800b436:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b43a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b43e:	4303      	orrs	r3, r0
 800b440:	f000 81e4 	beq.w	800b80c <__ieee754_pow+0x77c>
 800b444:	ec51 0b18 	vmov	r0, r1, d8
 800b448:	2200      	movs	r2, #0
 800b44a:	2300      	movs	r3, #0
 800b44c:	f7f5 fb5e 	bl	8000b0c <__aeabi_dcmplt>
 800b450:	3800      	subs	r0, #0
 800b452:	bf18      	it	ne
 800b454:	2001      	movne	r0, #1
 800b456:	e72b      	b.n	800b2b0 <__ieee754_pow+0x220>
 800b458:	60000000 	.word	0x60000000
 800b45c:	3ff71547 	.word	0x3ff71547
 800b460:	f85ddf44 	.word	0xf85ddf44
 800b464:	3e54ae0b 	.word	0x3e54ae0b
 800b468:	55555555 	.word	0x55555555
 800b46c:	3fd55555 	.word	0x3fd55555
 800b470:	652b82fe 	.word	0x652b82fe
 800b474:	3ff71547 	.word	0x3ff71547
 800b478:	00000000 	.word	0x00000000
 800b47c:	bff00000 	.word	0xbff00000
 800b480:	3ff00000 	.word	0x3ff00000
 800b484:	3fd00000 	.word	0x3fd00000
 800b488:	3fe00000 	.word	0x3fe00000
 800b48c:	408fffff 	.word	0x408fffff
 800b490:	4bd5      	ldr	r3, [pc, #852]	; (800b7e8 <__ieee754_pow+0x758>)
 800b492:	402b      	ands	r3, r5
 800b494:	2200      	movs	r2, #0
 800b496:	b92b      	cbnz	r3, 800b4a4 <__ieee754_pow+0x414>
 800b498:	4bd4      	ldr	r3, [pc, #848]	; (800b7ec <__ieee754_pow+0x75c>)
 800b49a:	f7f5 f8c5 	bl	8000628 <__aeabi_dmul>
 800b49e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	1523      	asrs	r3, r4, #20
 800b4a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b4aa:	4413      	add	r3, r2
 800b4ac:	9305      	str	r3, [sp, #20]
 800b4ae:	4bd0      	ldr	r3, [pc, #832]	; (800b7f0 <__ieee754_pow+0x760>)
 800b4b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b4b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b4b8:	429c      	cmp	r4, r3
 800b4ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b4be:	dd08      	ble.n	800b4d2 <__ieee754_pow+0x442>
 800b4c0:	4bcc      	ldr	r3, [pc, #816]	; (800b7f4 <__ieee754_pow+0x764>)
 800b4c2:	429c      	cmp	r4, r3
 800b4c4:	f340 8162 	ble.w	800b78c <__ieee754_pow+0x6fc>
 800b4c8:	9b05      	ldr	r3, [sp, #20]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	9305      	str	r3, [sp, #20]
 800b4ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b4d2:	2400      	movs	r4, #0
 800b4d4:	00e3      	lsls	r3, r4, #3
 800b4d6:	9307      	str	r3, [sp, #28]
 800b4d8:	4bc7      	ldr	r3, [pc, #796]	; (800b7f8 <__ieee754_pow+0x768>)
 800b4da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4de:	ed93 7b00 	vldr	d7, [r3]
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	ec53 2b17 	vmov	r2, r3, d7
 800b4e8:	eeb0 9a47 	vmov.f32	s18, s14
 800b4ec:	eef0 9a67 	vmov.f32	s19, s15
 800b4f0:	4682      	mov	sl, r0
 800b4f2:	f7f4 fee1 	bl	80002b8 <__aeabi_dsub>
 800b4f6:	4652      	mov	r2, sl
 800b4f8:	4606      	mov	r6, r0
 800b4fa:	460f      	mov	r7, r1
 800b4fc:	462b      	mov	r3, r5
 800b4fe:	ec51 0b19 	vmov	r0, r1, d9
 800b502:	f7f4 fedb 	bl	80002bc <__adddf3>
 800b506:	4602      	mov	r2, r0
 800b508:	460b      	mov	r3, r1
 800b50a:	2000      	movs	r0, #0
 800b50c:	49bb      	ldr	r1, [pc, #748]	; (800b7fc <__ieee754_pow+0x76c>)
 800b50e:	f7f5 f9b5 	bl	800087c <__aeabi_ddiv>
 800b512:	ec41 0b1a 	vmov	d10, r0, r1
 800b516:	4602      	mov	r2, r0
 800b518:	460b      	mov	r3, r1
 800b51a:	4630      	mov	r0, r6
 800b51c:	4639      	mov	r1, r7
 800b51e:	f7f5 f883 	bl	8000628 <__aeabi_dmul>
 800b522:	2300      	movs	r3, #0
 800b524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b528:	9302      	str	r3, [sp, #8]
 800b52a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b52e:	46ab      	mov	fp, r5
 800b530:	106d      	asrs	r5, r5, #1
 800b532:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b536:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b53a:	ec41 0b18 	vmov	d8, r0, r1
 800b53e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b542:	2200      	movs	r2, #0
 800b544:	4640      	mov	r0, r8
 800b546:	4649      	mov	r1, r9
 800b548:	4614      	mov	r4, r2
 800b54a:	461d      	mov	r5, r3
 800b54c:	f7f5 f86c 	bl	8000628 <__aeabi_dmul>
 800b550:	4602      	mov	r2, r0
 800b552:	460b      	mov	r3, r1
 800b554:	4630      	mov	r0, r6
 800b556:	4639      	mov	r1, r7
 800b558:	f7f4 feae 	bl	80002b8 <__aeabi_dsub>
 800b55c:	ec53 2b19 	vmov	r2, r3, d9
 800b560:	4606      	mov	r6, r0
 800b562:	460f      	mov	r7, r1
 800b564:	4620      	mov	r0, r4
 800b566:	4629      	mov	r1, r5
 800b568:	f7f4 fea6 	bl	80002b8 <__aeabi_dsub>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	4650      	mov	r0, sl
 800b572:	4659      	mov	r1, fp
 800b574:	f7f4 fea0 	bl	80002b8 <__aeabi_dsub>
 800b578:	4642      	mov	r2, r8
 800b57a:	464b      	mov	r3, r9
 800b57c:	f7f5 f854 	bl	8000628 <__aeabi_dmul>
 800b580:	4602      	mov	r2, r0
 800b582:	460b      	mov	r3, r1
 800b584:	4630      	mov	r0, r6
 800b586:	4639      	mov	r1, r7
 800b588:	f7f4 fe96 	bl	80002b8 <__aeabi_dsub>
 800b58c:	ec53 2b1a 	vmov	r2, r3, d10
 800b590:	f7f5 f84a 	bl	8000628 <__aeabi_dmul>
 800b594:	ec53 2b18 	vmov	r2, r3, d8
 800b598:	ec41 0b19 	vmov	d9, r0, r1
 800b59c:	ec51 0b18 	vmov	r0, r1, d8
 800b5a0:	f7f5 f842 	bl	8000628 <__aeabi_dmul>
 800b5a4:	a37c      	add	r3, pc, #496	; (adr r3, 800b798 <__ieee754_pow+0x708>)
 800b5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	460d      	mov	r5, r1
 800b5ae:	f7f5 f83b 	bl	8000628 <__aeabi_dmul>
 800b5b2:	a37b      	add	r3, pc, #492	; (adr r3, 800b7a0 <__ieee754_pow+0x710>)
 800b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b8:	f7f4 fe80 	bl	80002bc <__adddf3>
 800b5bc:	4622      	mov	r2, r4
 800b5be:	462b      	mov	r3, r5
 800b5c0:	f7f5 f832 	bl	8000628 <__aeabi_dmul>
 800b5c4:	a378      	add	r3, pc, #480	; (adr r3, 800b7a8 <__ieee754_pow+0x718>)
 800b5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ca:	f7f4 fe77 	bl	80002bc <__adddf3>
 800b5ce:	4622      	mov	r2, r4
 800b5d0:	462b      	mov	r3, r5
 800b5d2:	f7f5 f829 	bl	8000628 <__aeabi_dmul>
 800b5d6:	a376      	add	r3, pc, #472	; (adr r3, 800b7b0 <__ieee754_pow+0x720>)
 800b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5dc:	f7f4 fe6e 	bl	80002bc <__adddf3>
 800b5e0:	4622      	mov	r2, r4
 800b5e2:	462b      	mov	r3, r5
 800b5e4:	f7f5 f820 	bl	8000628 <__aeabi_dmul>
 800b5e8:	a373      	add	r3, pc, #460	; (adr r3, 800b7b8 <__ieee754_pow+0x728>)
 800b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ee:	f7f4 fe65 	bl	80002bc <__adddf3>
 800b5f2:	4622      	mov	r2, r4
 800b5f4:	462b      	mov	r3, r5
 800b5f6:	f7f5 f817 	bl	8000628 <__aeabi_dmul>
 800b5fa:	a371      	add	r3, pc, #452	; (adr r3, 800b7c0 <__ieee754_pow+0x730>)
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	f7f4 fe5c 	bl	80002bc <__adddf3>
 800b604:	4622      	mov	r2, r4
 800b606:	4606      	mov	r6, r0
 800b608:	460f      	mov	r7, r1
 800b60a:	462b      	mov	r3, r5
 800b60c:	4620      	mov	r0, r4
 800b60e:	4629      	mov	r1, r5
 800b610:	f7f5 f80a 	bl	8000628 <__aeabi_dmul>
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	4630      	mov	r0, r6
 800b61a:	4639      	mov	r1, r7
 800b61c:	f7f5 f804 	bl	8000628 <__aeabi_dmul>
 800b620:	4642      	mov	r2, r8
 800b622:	4604      	mov	r4, r0
 800b624:	460d      	mov	r5, r1
 800b626:	464b      	mov	r3, r9
 800b628:	ec51 0b18 	vmov	r0, r1, d8
 800b62c:	f7f4 fe46 	bl	80002bc <__adddf3>
 800b630:	ec53 2b19 	vmov	r2, r3, d9
 800b634:	f7f4 fff8 	bl	8000628 <__aeabi_dmul>
 800b638:	4622      	mov	r2, r4
 800b63a:	462b      	mov	r3, r5
 800b63c:	f7f4 fe3e 	bl	80002bc <__adddf3>
 800b640:	4642      	mov	r2, r8
 800b642:	4682      	mov	sl, r0
 800b644:	468b      	mov	fp, r1
 800b646:	464b      	mov	r3, r9
 800b648:	4640      	mov	r0, r8
 800b64a:	4649      	mov	r1, r9
 800b64c:	f7f4 ffec 	bl	8000628 <__aeabi_dmul>
 800b650:	4b6b      	ldr	r3, [pc, #428]	; (800b800 <__ieee754_pow+0x770>)
 800b652:	2200      	movs	r2, #0
 800b654:	4606      	mov	r6, r0
 800b656:	460f      	mov	r7, r1
 800b658:	f7f4 fe30 	bl	80002bc <__adddf3>
 800b65c:	4652      	mov	r2, sl
 800b65e:	465b      	mov	r3, fp
 800b660:	f7f4 fe2c 	bl	80002bc <__adddf3>
 800b664:	2000      	movs	r0, #0
 800b666:	4604      	mov	r4, r0
 800b668:	460d      	mov	r5, r1
 800b66a:	4602      	mov	r2, r0
 800b66c:	460b      	mov	r3, r1
 800b66e:	4640      	mov	r0, r8
 800b670:	4649      	mov	r1, r9
 800b672:	f7f4 ffd9 	bl	8000628 <__aeabi_dmul>
 800b676:	4b62      	ldr	r3, [pc, #392]	; (800b800 <__ieee754_pow+0x770>)
 800b678:	4680      	mov	r8, r0
 800b67a:	4689      	mov	r9, r1
 800b67c:	2200      	movs	r2, #0
 800b67e:	4620      	mov	r0, r4
 800b680:	4629      	mov	r1, r5
 800b682:	f7f4 fe19 	bl	80002b8 <__aeabi_dsub>
 800b686:	4632      	mov	r2, r6
 800b688:	463b      	mov	r3, r7
 800b68a:	f7f4 fe15 	bl	80002b8 <__aeabi_dsub>
 800b68e:	4602      	mov	r2, r0
 800b690:	460b      	mov	r3, r1
 800b692:	4650      	mov	r0, sl
 800b694:	4659      	mov	r1, fp
 800b696:	f7f4 fe0f 	bl	80002b8 <__aeabi_dsub>
 800b69a:	ec53 2b18 	vmov	r2, r3, d8
 800b69e:	f7f4 ffc3 	bl	8000628 <__aeabi_dmul>
 800b6a2:	4622      	mov	r2, r4
 800b6a4:	4606      	mov	r6, r0
 800b6a6:	460f      	mov	r7, r1
 800b6a8:	462b      	mov	r3, r5
 800b6aa:	ec51 0b19 	vmov	r0, r1, d9
 800b6ae:	f7f4 ffbb 	bl	8000628 <__aeabi_dmul>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	4639      	mov	r1, r7
 800b6ba:	f7f4 fdff 	bl	80002bc <__adddf3>
 800b6be:	4606      	mov	r6, r0
 800b6c0:	460f      	mov	r7, r1
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4640      	mov	r0, r8
 800b6c8:	4649      	mov	r1, r9
 800b6ca:	f7f4 fdf7 	bl	80002bc <__adddf3>
 800b6ce:	a33e      	add	r3, pc, #248	; (adr r3, 800b7c8 <__ieee754_pow+0x738>)
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	2000      	movs	r0, #0
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	460d      	mov	r5, r1
 800b6da:	f7f4 ffa5 	bl	8000628 <__aeabi_dmul>
 800b6de:	4642      	mov	r2, r8
 800b6e0:	ec41 0b18 	vmov	d8, r0, r1
 800b6e4:	464b      	mov	r3, r9
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	4629      	mov	r1, r5
 800b6ea:	f7f4 fde5 	bl	80002b8 <__aeabi_dsub>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	4639      	mov	r1, r7
 800b6f6:	f7f4 fddf 	bl	80002b8 <__aeabi_dsub>
 800b6fa:	a335      	add	r3, pc, #212	; (adr r3, 800b7d0 <__ieee754_pow+0x740>)
 800b6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b700:	f7f4 ff92 	bl	8000628 <__aeabi_dmul>
 800b704:	a334      	add	r3, pc, #208	; (adr r3, 800b7d8 <__ieee754_pow+0x748>)
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	4606      	mov	r6, r0
 800b70c:	460f      	mov	r7, r1
 800b70e:	4620      	mov	r0, r4
 800b710:	4629      	mov	r1, r5
 800b712:	f7f4 ff89 	bl	8000628 <__aeabi_dmul>
 800b716:	4602      	mov	r2, r0
 800b718:	460b      	mov	r3, r1
 800b71a:	4630      	mov	r0, r6
 800b71c:	4639      	mov	r1, r7
 800b71e:	f7f4 fdcd 	bl	80002bc <__adddf3>
 800b722:	9a07      	ldr	r2, [sp, #28]
 800b724:	4b37      	ldr	r3, [pc, #220]	; (800b804 <__ieee754_pow+0x774>)
 800b726:	4413      	add	r3, r2
 800b728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72c:	f7f4 fdc6 	bl	80002bc <__adddf3>
 800b730:	4682      	mov	sl, r0
 800b732:	9805      	ldr	r0, [sp, #20]
 800b734:	468b      	mov	fp, r1
 800b736:	f7f4 ff0d 	bl	8000554 <__aeabi_i2d>
 800b73a:	9a07      	ldr	r2, [sp, #28]
 800b73c:	4b32      	ldr	r3, [pc, #200]	; (800b808 <__ieee754_pow+0x778>)
 800b73e:	4413      	add	r3, r2
 800b740:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b744:	4606      	mov	r6, r0
 800b746:	460f      	mov	r7, r1
 800b748:	4652      	mov	r2, sl
 800b74a:	465b      	mov	r3, fp
 800b74c:	ec51 0b18 	vmov	r0, r1, d8
 800b750:	f7f4 fdb4 	bl	80002bc <__adddf3>
 800b754:	4642      	mov	r2, r8
 800b756:	464b      	mov	r3, r9
 800b758:	f7f4 fdb0 	bl	80002bc <__adddf3>
 800b75c:	4632      	mov	r2, r6
 800b75e:	463b      	mov	r3, r7
 800b760:	f7f4 fdac 	bl	80002bc <__adddf3>
 800b764:	2000      	movs	r0, #0
 800b766:	4632      	mov	r2, r6
 800b768:	463b      	mov	r3, r7
 800b76a:	4604      	mov	r4, r0
 800b76c:	460d      	mov	r5, r1
 800b76e:	f7f4 fda3 	bl	80002b8 <__aeabi_dsub>
 800b772:	4642      	mov	r2, r8
 800b774:	464b      	mov	r3, r9
 800b776:	f7f4 fd9f 	bl	80002b8 <__aeabi_dsub>
 800b77a:	ec53 2b18 	vmov	r2, r3, d8
 800b77e:	f7f4 fd9b 	bl	80002b8 <__aeabi_dsub>
 800b782:	4602      	mov	r2, r0
 800b784:	460b      	mov	r3, r1
 800b786:	4650      	mov	r0, sl
 800b788:	4659      	mov	r1, fp
 800b78a:	e610      	b.n	800b3ae <__ieee754_pow+0x31e>
 800b78c:	2401      	movs	r4, #1
 800b78e:	e6a1      	b.n	800b4d4 <__ieee754_pow+0x444>
 800b790:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b7e0 <__ieee754_pow+0x750>
 800b794:	e617      	b.n	800b3c6 <__ieee754_pow+0x336>
 800b796:	bf00      	nop
 800b798:	4a454eef 	.word	0x4a454eef
 800b79c:	3fca7e28 	.word	0x3fca7e28
 800b7a0:	93c9db65 	.word	0x93c9db65
 800b7a4:	3fcd864a 	.word	0x3fcd864a
 800b7a8:	a91d4101 	.word	0xa91d4101
 800b7ac:	3fd17460 	.word	0x3fd17460
 800b7b0:	518f264d 	.word	0x518f264d
 800b7b4:	3fd55555 	.word	0x3fd55555
 800b7b8:	db6fabff 	.word	0xdb6fabff
 800b7bc:	3fdb6db6 	.word	0x3fdb6db6
 800b7c0:	33333303 	.word	0x33333303
 800b7c4:	3fe33333 	.word	0x3fe33333
 800b7c8:	e0000000 	.word	0xe0000000
 800b7cc:	3feec709 	.word	0x3feec709
 800b7d0:	dc3a03fd 	.word	0xdc3a03fd
 800b7d4:	3feec709 	.word	0x3feec709
 800b7d8:	145b01f5 	.word	0x145b01f5
 800b7dc:	be3e2fe0 	.word	0xbe3e2fe0
 800b7e0:	00000000 	.word	0x00000000
 800b7e4:	3ff00000 	.word	0x3ff00000
 800b7e8:	7ff00000 	.word	0x7ff00000
 800b7ec:	43400000 	.word	0x43400000
 800b7f0:	0003988e 	.word	0x0003988e
 800b7f4:	000bb679 	.word	0x000bb679
 800b7f8:	0800d698 	.word	0x0800d698
 800b7fc:	3ff00000 	.word	0x3ff00000
 800b800:	40080000 	.word	0x40080000
 800b804:	0800d6b8 	.word	0x0800d6b8
 800b808:	0800d6a8 	.word	0x0800d6a8
 800b80c:	a3b5      	add	r3, pc, #724	; (adr r3, 800bae4 <__ieee754_pow+0xa54>)
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	4640      	mov	r0, r8
 800b814:	4649      	mov	r1, r9
 800b816:	f7f4 fd51 	bl	80002bc <__adddf3>
 800b81a:	4622      	mov	r2, r4
 800b81c:	ec41 0b1a 	vmov	d10, r0, r1
 800b820:	462b      	mov	r3, r5
 800b822:	4630      	mov	r0, r6
 800b824:	4639      	mov	r1, r7
 800b826:	f7f4 fd47 	bl	80002b8 <__aeabi_dsub>
 800b82a:	4602      	mov	r2, r0
 800b82c:	460b      	mov	r3, r1
 800b82e:	ec51 0b1a 	vmov	r0, r1, d10
 800b832:	f7f5 f989 	bl	8000b48 <__aeabi_dcmpgt>
 800b836:	2800      	cmp	r0, #0
 800b838:	f47f ae04 	bne.w	800b444 <__ieee754_pow+0x3b4>
 800b83c:	4aa4      	ldr	r2, [pc, #656]	; (800bad0 <__ieee754_pow+0xa40>)
 800b83e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b842:	4293      	cmp	r3, r2
 800b844:	f340 8108 	ble.w	800ba58 <__ieee754_pow+0x9c8>
 800b848:	151b      	asrs	r3, r3, #20
 800b84a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b84e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b852:	fa4a f303 	asr.w	r3, sl, r3
 800b856:	445b      	add	r3, fp
 800b858:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b85c:	4e9d      	ldr	r6, [pc, #628]	; (800bad4 <__ieee754_pow+0xa44>)
 800b85e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b862:	4116      	asrs	r6, r2
 800b864:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b868:	2000      	movs	r0, #0
 800b86a:	ea23 0106 	bic.w	r1, r3, r6
 800b86e:	f1c2 0214 	rsb	r2, r2, #20
 800b872:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b876:	fa4a fa02 	asr.w	sl, sl, r2
 800b87a:	f1bb 0f00 	cmp.w	fp, #0
 800b87e:	4602      	mov	r2, r0
 800b880:	460b      	mov	r3, r1
 800b882:	4620      	mov	r0, r4
 800b884:	4629      	mov	r1, r5
 800b886:	bfb8      	it	lt
 800b888:	f1ca 0a00 	rsblt	sl, sl, #0
 800b88c:	f7f4 fd14 	bl	80002b8 <__aeabi_dsub>
 800b890:	ec41 0b19 	vmov	d9, r0, r1
 800b894:	4642      	mov	r2, r8
 800b896:	464b      	mov	r3, r9
 800b898:	ec51 0b19 	vmov	r0, r1, d9
 800b89c:	f7f4 fd0e 	bl	80002bc <__adddf3>
 800b8a0:	a37b      	add	r3, pc, #492	; (adr r3, 800ba90 <__ieee754_pow+0xa00>)
 800b8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	460d      	mov	r5, r1
 800b8ac:	f7f4 febc 	bl	8000628 <__aeabi_dmul>
 800b8b0:	ec53 2b19 	vmov	r2, r3, d9
 800b8b4:	4606      	mov	r6, r0
 800b8b6:	460f      	mov	r7, r1
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	4629      	mov	r1, r5
 800b8bc:	f7f4 fcfc 	bl	80002b8 <__aeabi_dsub>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	4640      	mov	r0, r8
 800b8c6:	4649      	mov	r1, r9
 800b8c8:	f7f4 fcf6 	bl	80002b8 <__aeabi_dsub>
 800b8cc:	a372      	add	r3, pc, #456	; (adr r3, 800ba98 <__ieee754_pow+0xa08>)
 800b8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d2:	f7f4 fea9 	bl	8000628 <__aeabi_dmul>
 800b8d6:	a372      	add	r3, pc, #456	; (adr r3, 800baa0 <__ieee754_pow+0xa10>)
 800b8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8dc:	4680      	mov	r8, r0
 800b8de:	4689      	mov	r9, r1
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	4629      	mov	r1, r5
 800b8e4:	f7f4 fea0 	bl	8000628 <__aeabi_dmul>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	4640      	mov	r0, r8
 800b8ee:	4649      	mov	r1, r9
 800b8f0:	f7f4 fce4 	bl	80002bc <__adddf3>
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	460d      	mov	r5, r1
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	4639      	mov	r1, r7
 800b900:	f7f4 fcdc 	bl	80002bc <__adddf3>
 800b904:	4632      	mov	r2, r6
 800b906:	463b      	mov	r3, r7
 800b908:	4680      	mov	r8, r0
 800b90a:	4689      	mov	r9, r1
 800b90c:	f7f4 fcd4 	bl	80002b8 <__aeabi_dsub>
 800b910:	4602      	mov	r2, r0
 800b912:	460b      	mov	r3, r1
 800b914:	4620      	mov	r0, r4
 800b916:	4629      	mov	r1, r5
 800b918:	f7f4 fcce 	bl	80002b8 <__aeabi_dsub>
 800b91c:	4642      	mov	r2, r8
 800b91e:	4606      	mov	r6, r0
 800b920:	460f      	mov	r7, r1
 800b922:	464b      	mov	r3, r9
 800b924:	4640      	mov	r0, r8
 800b926:	4649      	mov	r1, r9
 800b928:	f7f4 fe7e 	bl	8000628 <__aeabi_dmul>
 800b92c:	a35e      	add	r3, pc, #376	; (adr r3, 800baa8 <__ieee754_pow+0xa18>)
 800b92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b932:	4604      	mov	r4, r0
 800b934:	460d      	mov	r5, r1
 800b936:	f7f4 fe77 	bl	8000628 <__aeabi_dmul>
 800b93a:	a35d      	add	r3, pc, #372	; (adr r3, 800bab0 <__ieee754_pow+0xa20>)
 800b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b940:	f7f4 fcba 	bl	80002b8 <__aeabi_dsub>
 800b944:	4622      	mov	r2, r4
 800b946:	462b      	mov	r3, r5
 800b948:	f7f4 fe6e 	bl	8000628 <__aeabi_dmul>
 800b94c:	a35a      	add	r3, pc, #360	; (adr r3, 800bab8 <__ieee754_pow+0xa28>)
 800b94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b952:	f7f4 fcb3 	bl	80002bc <__adddf3>
 800b956:	4622      	mov	r2, r4
 800b958:	462b      	mov	r3, r5
 800b95a:	f7f4 fe65 	bl	8000628 <__aeabi_dmul>
 800b95e:	a358      	add	r3, pc, #352	; (adr r3, 800bac0 <__ieee754_pow+0xa30>)
 800b960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b964:	f7f4 fca8 	bl	80002b8 <__aeabi_dsub>
 800b968:	4622      	mov	r2, r4
 800b96a:	462b      	mov	r3, r5
 800b96c:	f7f4 fe5c 	bl	8000628 <__aeabi_dmul>
 800b970:	a355      	add	r3, pc, #340	; (adr r3, 800bac8 <__ieee754_pow+0xa38>)
 800b972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b976:	f7f4 fca1 	bl	80002bc <__adddf3>
 800b97a:	4622      	mov	r2, r4
 800b97c:	462b      	mov	r3, r5
 800b97e:	f7f4 fe53 	bl	8000628 <__aeabi_dmul>
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	4640      	mov	r0, r8
 800b988:	4649      	mov	r1, r9
 800b98a:	f7f4 fc95 	bl	80002b8 <__aeabi_dsub>
 800b98e:	4604      	mov	r4, r0
 800b990:	460d      	mov	r5, r1
 800b992:	4602      	mov	r2, r0
 800b994:	460b      	mov	r3, r1
 800b996:	4640      	mov	r0, r8
 800b998:	4649      	mov	r1, r9
 800b99a:	f7f4 fe45 	bl	8000628 <__aeabi_dmul>
 800b99e:	2200      	movs	r2, #0
 800b9a0:	ec41 0b19 	vmov	d9, r0, r1
 800b9a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	f7f4 fc84 	bl	80002b8 <__aeabi_dsub>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	ec51 0b19 	vmov	r0, r1, d9
 800b9b8:	f7f4 ff60 	bl	800087c <__aeabi_ddiv>
 800b9bc:	4632      	mov	r2, r6
 800b9be:	4604      	mov	r4, r0
 800b9c0:	460d      	mov	r5, r1
 800b9c2:	463b      	mov	r3, r7
 800b9c4:	4640      	mov	r0, r8
 800b9c6:	4649      	mov	r1, r9
 800b9c8:	f7f4 fe2e 	bl	8000628 <__aeabi_dmul>
 800b9cc:	4632      	mov	r2, r6
 800b9ce:	463b      	mov	r3, r7
 800b9d0:	f7f4 fc74 	bl	80002bc <__adddf3>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	4620      	mov	r0, r4
 800b9da:	4629      	mov	r1, r5
 800b9dc:	f7f4 fc6c 	bl	80002b8 <__aeabi_dsub>
 800b9e0:	4642      	mov	r2, r8
 800b9e2:	464b      	mov	r3, r9
 800b9e4:	f7f4 fc68 	bl	80002b8 <__aeabi_dsub>
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	493a      	ldr	r1, [pc, #232]	; (800bad8 <__ieee754_pow+0xa48>)
 800b9ee:	2000      	movs	r0, #0
 800b9f0:	f7f4 fc62 	bl	80002b8 <__aeabi_dsub>
 800b9f4:	ec41 0b10 	vmov	d0, r0, r1
 800b9f8:	ee10 3a90 	vmov	r3, s1
 800b9fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ba00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba04:	da2b      	bge.n	800ba5e <__ieee754_pow+0x9ce>
 800ba06:	4650      	mov	r0, sl
 800ba08:	f001 fa6e 	bl	800cee8 <scalbn>
 800ba0c:	ec51 0b10 	vmov	r0, r1, d0
 800ba10:	ec53 2b18 	vmov	r2, r3, d8
 800ba14:	f7ff bbed 	b.w	800b1f2 <__ieee754_pow+0x162>
 800ba18:	4b30      	ldr	r3, [pc, #192]	; (800badc <__ieee754_pow+0xa4c>)
 800ba1a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ba1e:	429e      	cmp	r6, r3
 800ba20:	f77f af0c 	ble.w	800b83c <__ieee754_pow+0x7ac>
 800ba24:	4b2e      	ldr	r3, [pc, #184]	; (800bae0 <__ieee754_pow+0xa50>)
 800ba26:	440b      	add	r3, r1
 800ba28:	4303      	orrs	r3, r0
 800ba2a:	d009      	beq.n	800ba40 <__ieee754_pow+0x9b0>
 800ba2c:	ec51 0b18 	vmov	r0, r1, d8
 800ba30:	2200      	movs	r2, #0
 800ba32:	2300      	movs	r3, #0
 800ba34:	f7f5 f86a 	bl	8000b0c <__aeabi_dcmplt>
 800ba38:	3800      	subs	r0, #0
 800ba3a:	bf18      	it	ne
 800ba3c:	2001      	movne	r0, #1
 800ba3e:	e447      	b.n	800b2d0 <__ieee754_pow+0x240>
 800ba40:	4622      	mov	r2, r4
 800ba42:	462b      	mov	r3, r5
 800ba44:	f7f4 fc38 	bl	80002b8 <__aeabi_dsub>
 800ba48:	4642      	mov	r2, r8
 800ba4a:	464b      	mov	r3, r9
 800ba4c:	f7f5 f872 	bl	8000b34 <__aeabi_dcmpge>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	f43f aef3 	beq.w	800b83c <__ieee754_pow+0x7ac>
 800ba56:	e7e9      	b.n	800ba2c <__ieee754_pow+0x99c>
 800ba58:	f04f 0a00 	mov.w	sl, #0
 800ba5c:	e71a      	b.n	800b894 <__ieee754_pow+0x804>
 800ba5e:	ec51 0b10 	vmov	r0, r1, d0
 800ba62:	4619      	mov	r1, r3
 800ba64:	e7d4      	b.n	800ba10 <__ieee754_pow+0x980>
 800ba66:	491c      	ldr	r1, [pc, #112]	; (800bad8 <__ieee754_pow+0xa48>)
 800ba68:	2000      	movs	r0, #0
 800ba6a:	f7ff bb30 	b.w	800b0ce <__ieee754_pow+0x3e>
 800ba6e:	2000      	movs	r0, #0
 800ba70:	2100      	movs	r1, #0
 800ba72:	f7ff bb2c 	b.w	800b0ce <__ieee754_pow+0x3e>
 800ba76:	4630      	mov	r0, r6
 800ba78:	4639      	mov	r1, r7
 800ba7a:	f7ff bb28 	b.w	800b0ce <__ieee754_pow+0x3e>
 800ba7e:	9204      	str	r2, [sp, #16]
 800ba80:	f7ff bb7a 	b.w	800b178 <__ieee754_pow+0xe8>
 800ba84:	2300      	movs	r3, #0
 800ba86:	f7ff bb64 	b.w	800b152 <__ieee754_pow+0xc2>
 800ba8a:	bf00      	nop
 800ba8c:	f3af 8000 	nop.w
 800ba90:	00000000 	.word	0x00000000
 800ba94:	3fe62e43 	.word	0x3fe62e43
 800ba98:	fefa39ef 	.word	0xfefa39ef
 800ba9c:	3fe62e42 	.word	0x3fe62e42
 800baa0:	0ca86c39 	.word	0x0ca86c39
 800baa4:	be205c61 	.word	0xbe205c61
 800baa8:	72bea4d0 	.word	0x72bea4d0
 800baac:	3e663769 	.word	0x3e663769
 800bab0:	c5d26bf1 	.word	0xc5d26bf1
 800bab4:	3ebbbd41 	.word	0x3ebbbd41
 800bab8:	af25de2c 	.word	0xaf25de2c
 800babc:	3f11566a 	.word	0x3f11566a
 800bac0:	16bebd93 	.word	0x16bebd93
 800bac4:	3f66c16c 	.word	0x3f66c16c
 800bac8:	5555553e 	.word	0x5555553e
 800bacc:	3fc55555 	.word	0x3fc55555
 800bad0:	3fe00000 	.word	0x3fe00000
 800bad4:	000fffff 	.word	0x000fffff
 800bad8:	3ff00000 	.word	0x3ff00000
 800badc:	4090cbff 	.word	0x4090cbff
 800bae0:	3f6f3400 	.word	0x3f6f3400
 800bae4:	652b82fe 	.word	0x652b82fe
 800bae8:	3c971547 	.word	0x3c971547
 800baec:	00000000 	.word	0x00000000

0800baf0 <__ieee754_rem_pio2>:
 800baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	ed2d 8b02 	vpush	{d8}
 800baf8:	ec55 4b10 	vmov	r4, r5, d0
 800bafc:	4bca      	ldr	r3, [pc, #808]	; (800be28 <__ieee754_rem_pio2+0x338>)
 800bafe:	b08b      	sub	sp, #44	; 0x2c
 800bb00:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800bb04:	4598      	cmp	r8, r3
 800bb06:	4682      	mov	sl, r0
 800bb08:	9502      	str	r5, [sp, #8]
 800bb0a:	dc08      	bgt.n	800bb1e <__ieee754_rem_pio2+0x2e>
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2300      	movs	r3, #0
 800bb10:	ed80 0b00 	vstr	d0, [r0]
 800bb14:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bb18:	f04f 0b00 	mov.w	fp, #0
 800bb1c:	e028      	b.n	800bb70 <__ieee754_rem_pio2+0x80>
 800bb1e:	4bc3      	ldr	r3, [pc, #780]	; (800be2c <__ieee754_rem_pio2+0x33c>)
 800bb20:	4598      	cmp	r8, r3
 800bb22:	dc78      	bgt.n	800bc16 <__ieee754_rem_pio2+0x126>
 800bb24:	9b02      	ldr	r3, [sp, #8]
 800bb26:	4ec2      	ldr	r6, [pc, #776]	; (800be30 <__ieee754_rem_pio2+0x340>)
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	ee10 0a10 	vmov	r0, s0
 800bb2e:	a3b0      	add	r3, pc, #704	; (adr r3, 800bdf0 <__ieee754_rem_pio2+0x300>)
 800bb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb34:	4629      	mov	r1, r5
 800bb36:	dd39      	ble.n	800bbac <__ieee754_rem_pio2+0xbc>
 800bb38:	f7f4 fbbe 	bl	80002b8 <__aeabi_dsub>
 800bb3c:	45b0      	cmp	r8, r6
 800bb3e:	4604      	mov	r4, r0
 800bb40:	460d      	mov	r5, r1
 800bb42:	d01b      	beq.n	800bb7c <__ieee754_rem_pio2+0x8c>
 800bb44:	a3ac      	add	r3, pc, #688	; (adr r3, 800bdf8 <__ieee754_rem_pio2+0x308>)
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	f7f4 fbb5 	bl	80002b8 <__aeabi_dsub>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	460b      	mov	r3, r1
 800bb52:	e9ca 2300 	strd	r2, r3, [sl]
 800bb56:	4620      	mov	r0, r4
 800bb58:	4629      	mov	r1, r5
 800bb5a:	f7f4 fbad 	bl	80002b8 <__aeabi_dsub>
 800bb5e:	a3a6      	add	r3, pc, #664	; (adr r3, 800bdf8 <__ieee754_rem_pio2+0x308>)
 800bb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb64:	f7f4 fba8 	bl	80002b8 <__aeabi_dsub>
 800bb68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bb6c:	f04f 0b01 	mov.w	fp, #1
 800bb70:	4658      	mov	r0, fp
 800bb72:	b00b      	add	sp, #44	; 0x2c
 800bb74:	ecbd 8b02 	vpop	{d8}
 800bb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb7c:	a3a0      	add	r3, pc, #640	; (adr r3, 800be00 <__ieee754_rem_pio2+0x310>)
 800bb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb82:	f7f4 fb99 	bl	80002b8 <__aeabi_dsub>
 800bb86:	a3a0      	add	r3, pc, #640	; (adr r3, 800be08 <__ieee754_rem_pio2+0x318>)
 800bb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	460d      	mov	r5, r1
 800bb90:	f7f4 fb92 	bl	80002b8 <__aeabi_dsub>
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	e9ca 2300 	strd	r2, r3, [sl]
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	4629      	mov	r1, r5
 800bba0:	f7f4 fb8a 	bl	80002b8 <__aeabi_dsub>
 800bba4:	a398      	add	r3, pc, #608	; (adr r3, 800be08 <__ieee754_rem_pio2+0x318>)
 800bba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbaa:	e7db      	b.n	800bb64 <__ieee754_rem_pio2+0x74>
 800bbac:	f7f4 fb86 	bl	80002bc <__adddf3>
 800bbb0:	45b0      	cmp	r8, r6
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	460d      	mov	r5, r1
 800bbb6:	d016      	beq.n	800bbe6 <__ieee754_rem_pio2+0xf6>
 800bbb8:	a38f      	add	r3, pc, #572	; (adr r3, 800bdf8 <__ieee754_rem_pio2+0x308>)
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	f7f4 fb7d 	bl	80002bc <__adddf3>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	e9ca 2300 	strd	r2, r3, [sl]
 800bbca:	4620      	mov	r0, r4
 800bbcc:	4629      	mov	r1, r5
 800bbce:	f7f4 fb73 	bl	80002b8 <__aeabi_dsub>
 800bbd2:	a389      	add	r3, pc, #548	; (adr r3, 800bdf8 <__ieee754_rem_pio2+0x308>)
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	f7f4 fb70 	bl	80002bc <__adddf3>
 800bbdc:	f04f 3bff 	mov.w	fp, #4294967295
 800bbe0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bbe4:	e7c4      	b.n	800bb70 <__ieee754_rem_pio2+0x80>
 800bbe6:	a386      	add	r3, pc, #536	; (adr r3, 800be00 <__ieee754_rem_pio2+0x310>)
 800bbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbec:	f7f4 fb66 	bl	80002bc <__adddf3>
 800bbf0:	a385      	add	r3, pc, #532	; (adr r3, 800be08 <__ieee754_rem_pio2+0x318>)
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	460d      	mov	r5, r1
 800bbfa:	f7f4 fb5f 	bl	80002bc <__adddf3>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	460b      	mov	r3, r1
 800bc02:	e9ca 2300 	strd	r2, r3, [sl]
 800bc06:	4620      	mov	r0, r4
 800bc08:	4629      	mov	r1, r5
 800bc0a:	f7f4 fb55 	bl	80002b8 <__aeabi_dsub>
 800bc0e:	a37e      	add	r3, pc, #504	; (adr r3, 800be08 <__ieee754_rem_pio2+0x318>)
 800bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc14:	e7e0      	b.n	800bbd8 <__ieee754_rem_pio2+0xe8>
 800bc16:	4b87      	ldr	r3, [pc, #540]	; (800be34 <__ieee754_rem_pio2+0x344>)
 800bc18:	4598      	cmp	r8, r3
 800bc1a:	f300 80d9 	bgt.w	800bdd0 <__ieee754_rem_pio2+0x2e0>
 800bc1e:	f001 f8cf 	bl	800cdc0 <fabs>
 800bc22:	ec55 4b10 	vmov	r4, r5, d0
 800bc26:	ee10 0a10 	vmov	r0, s0
 800bc2a:	a379      	add	r3, pc, #484	; (adr r3, 800be10 <__ieee754_rem_pio2+0x320>)
 800bc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc30:	4629      	mov	r1, r5
 800bc32:	f7f4 fcf9 	bl	8000628 <__aeabi_dmul>
 800bc36:	4b80      	ldr	r3, [pc, #512]	; (800be38 <__ieee754_rem_pio2+0x348>)
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f7f4 fb3f 	bl	80002bc <__adddf3>
 800bc3e:	f7f4 ffa3 	bl	8000b88 <__aeabi_d2iz>
 800bc42:	4683      	mov	fp, r0
 800bc44:	f7f4 fc86 	bl	8000554 <__aeabi_i2d>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	ec43 2b18 	vmov	d8, r2, r3
 800bc50:	a367      	add	r3, pc, #412	; (adr r3, 800bdf0 <__ieee754_rem_pio2+0x300>)
 800bc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc56:	f7f4 fce7 	bl	8000628 <__aeabi_dmul>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	4620      	mov	r0, r4
 800bc60:	4629      	mov	r1, r5
 800bc62:	f7f4 fb29 	bl	80002b8 <__aeabi_dsub>
 800bc66:	a364      	add	r3, pc, #400	; (adr r3, 800bdf8 <__ieee754_rem_pio2+0x308>)
 800bc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	460f      	mov	r7, r1
 800bc70:	ec51 0b18 	vmov	r0, r1, d8
 800bc74:	f7f4 fcd8 	bl	8000628 <__aeabi_dmul>
 800bc78:	f1bb 0f1f 	cmp.w	fp, #31
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	460d      	mov	r5, r1
 800bc80:	dc0d      	bgt.n	800bc9e <__ieee754_rem_pio2+0x1ae>
 800bc82:	4b6e      	ldr	r3, [pc, #440]	; (800be3c <__ieee754_rem_pio2+0x34c>)
 800bc84:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bc88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8c:	4543      	cmp	r3, r8
 800bc8e:	d006      	beq.n	800bc9e <__ieee754_rem_pio2+0x1ae>
 800bc90:	4622      	mov	r2, r4
 800bc92:	462b      	mov	r3, r5
 800bc94:	4630      	mov	r0, r6
 800bc96:	4639      	mov	r1, r7
 800bc98:	f7f4 fb0e 	bl	80002b8 <__aeabi_dsub>
 800bc9c:	e00f      	b.n	800bcbe <__ieee754_rem_pio2+0x1ce>
 800bc9e:	462b      	mov	r3, r5
 800bca0:	4622      	mov	r2, r4
 800bca2:	4630      	mov	r0, r6
 800bca4:	4639      	mov	r1, r7
 800bca6:	f7f4 fb07 	bl	80002b8 <__aeabi_dsub>
 800bcaa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bcae:	9303      	str	r3, [sp, #12]
 800bcb0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bcb4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800bcb8:	f1b8 0f10 	cmp.w	r8, #16
 800bcbc:	dc02      	bgt.n	800bcc4 <__ieee754_rem_pio2+0x1d4>
 800bcbe:	e9ca 0100 	strd	r0, r1, [sl]
 800bcc2:	e039      	b.n	800bd38 <__ieee754_rem_pio2+0x248>
 800bcc4:	a34e      	add	r3, pc, #312	; (adr r3, 800be00 <__ieee754_rem_pio2+0x310>)
 800bcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcca:	ec51 0b18 	vmov	r0, r1, d8
 800bcce:	f7f4 fcab 	bl	8000628 <__aeabi_dmul>
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	460b      	mov	r3, r1
 800bcda:	4630      	mov	r0, r6
 800bcdc:	4639      	mov	r1, r7
 800bcde:	f7f4 faeb 	bl	80002b8 <__aeabi_dsub>
 800bce2:	4602      	mov	r2, r0
 800bce4:	460b      	mov	r3, r1
 800bce6:	4680      	mov	r8, r0
 800bce8:	4689      	mov	r9, r1
 800bcea:	4630      	mov	r0, r6
 800bcec:	4639      	mov	r1, r7
 800bcee:	f7f4 fae3 	bl	80002b8 <__aeabi_dsub>
 800bcf2:	4622      	mov	r2, r4
 800bcf4:	462b      	mov	r3, r5
 800bcf6:	f7f4 fadf 	bl	80002b8 <__aeabi_dsub>
 800bcfa:	a343      	add	r3, pc, #268	; (adr r3, 800be08 <__ieee754_rem_pio2+0x318>)
 800bcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd00:	4604      	mov	r4, r0
 800bd02:	460d      	mov	r5, r1
 800bd04:	ec51 0b18 	vmov	r0, r1, d8
 800bd08:	f7f4 fc8e 	bl	8000628 <__aeabi_dmul>
 800bd0c:	4622      	mov	r2, r4
 800bd0e:	462b      	mov	r3, r5
 800bd10:	f7f4 fad2 	bl	80002b8 <__aeabi_dsub>
 800bd14:	4602      	mov	r2, r0
 800bd16:	460b      	mov	r3, r1
 800bd18:	4604      	mov	r4, r0
 800bd1a:	460d      	mov	r5, r1
 800bd1c:	4640      	mov	r0, r8
 800bd1e:	4649      	mov	r1, r9
 800bd20:	f7f4 faca 	bl	80002b8 <__aeabi_dsub>
 800bd24:	9a03      	ldr	r2, [sp, #12]
 800bd26:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bd2a:	1ad3      	subs	r3, r2, r3
 800bd2c:	2b31      	cmp	r3, #49	; 0x31
 800bd2e:	dc24      	bgt.n	800bd7a <__ieee754_rem_pio2+0x28a>
 800bd30:	e9ca 0100 	strd	r0, r1, [sl]
 800bd34:	4646      	mov	r6, r8
 800bd36:	464f      	mov	r7, r9
 800bd38:	e9da 8900 	ldrd	r8, r9, [sl]
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	4642      	mov	r2, r8
 800bd40:	464b      	mov	r3, r9
 800bd42:	4639      	mov	r1, r7
 800bd44:	f7f4 fab8 	bl	80002b8 <__aeabi_dsub>
 800bd48:	462b      	mov	r3, r5
 800bd4a:	4622      	mov	r2, r4
 800bd4c:	f7f4 fab4 	bl	80002b8 <__aeabi_dsub>
 800bd50:	9b02      	ldr	r3, [sp, #8]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bd58:	f6bf af0a 	bge.w	800bb70 <__ieee754_rem_pio2+0x80>
 800bd5c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bd60:	f8ca 3004 	str.w	r3, [sl, #4]
 800bd64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd68:	f8ca 8000 	str.w	r8, [sl]
 800bd6c:	f8ca 0008 	str.w	r0, [sl, #8]
 800bd70:	f8ca 300c 	str.w	r3, [sl, #12]
 800bd74:	f1cb 0b00 	rsb	fp, fp, #0
 800bd78:	e6fa      	b.n	800bb70 <__ieee754_rem_pio2+0x80>
 800bd7a:	a327      	add	r3, pc, #156	; (adr r3, 800be18 <__ieee754_rem_pio2+0x328>)
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	ec51 0b18 	vmov	r0, r1, d8
 800bd84:	f7f4 fc50 	bl	8000628 <__aeabi_dmul>
 800bd88:	4604      	mov	r4, r0
 800bd8a:	460d      	mov	r5, r1
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	4640      	mov	r0, r8
 800bd92:	4649      	mov	r1, r9
 800bd94:	f7f4 fa90 	bl	80002b8 <__aeabi_dsub>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	4606      	mov	r6, r0
 800bd9e:	460f      	mov	r7, r1
 800bda0:	4640      	mov	r0, r8
 800bda2:	4649      	mov	r1, r9
 800bda4:	f7f4 fa88 	bl	80002b8 <__aeabi_dsub>
 800bda8:	4622      	mov	r2, r4
 800bdaa:	462b      	mov	r3, r5
 800bdac:	f7f4 fa84 	bl	80002b8 <__aeabi_dsub>
 800bdb0:	a31b      	add	r3, pc, #108	; (adr r3, 800be20 <__ieee754_rem_pio2+0x330>)
 800bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	460d      	mov	r5, r1
 800bdba:	ec51 0b18 	vmov	r0, r1, d8
 800bdbe:	f7f4 fc33 	bl	8000628 <__aeabi_dmul>
 800bdc2:	4622      	mov	r2, r4
 800bdc4:	462b      	mov	r3, r5
 800bdc6:	f7f4 fa77 	bl	80002b8 <__aeabi_dsub>
 800bdca:	4604      	mov	r4, r0
 800bdcc:	460d      	mov	r5, r1
 800bdce:	e75f      	b.n	800bc90 <__ieee754_rem_pio2+0x1a0>
 800bdd0:	4b1b      	ldr	r3, [pc, #108]	; (800be40 <__ieee754_rem_pio2+0x350>)
 800bdd2:	4598      	cmp	r8, r3
 800bdd4:	dd36      	ble.n	800be44 <__ieee754_rem_pio2+0x354>
 800bdd6:	ee10 2a10 	vmov	r2, s0
 800bdda:	462b      	mov	r3, r5
 800bddc:	4620      	mov	r0, r4
 800bdde:	4629      	mov	r1, r5
 800bde0:	f7f4 fa6a 	bl	80002b8 <__aeabi_dsub>
 800bde4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bde8:	e9ca 0100 	strd	r0, r1, [sl]
 800bdec:	e694      	b.n	800bb18 <__ieee754_rem_pio2+0x28>
 800bdee:	bf00      	nop
 800bdf0:	54400000 	.word	0x54400000
 800bdf4:	3ff921fb 	.word	0x3ff921fb
 800bdf8:	1a626331 	.word	0x1a626331
 800bdfc:	3dd0b461 	.word	0x3dd0b461
 800be00:	1a600000 	.word	0x1a600000
 800be04:	3dd0b461 	.word	0x3dd0b461
 800be08:	2e037073 	.word	0x2e037073
 800be0c:	3ba3198a 	.word	0x3ba3198a
 800be10:	6dc9c883 	.word	0x6dc9c883
 800be14:	3fe45f30 	.word	0x3fe45f30
 800be18:	2e000000 	.word	0x2e000000
 800be1c:	3ba3198a 	.word	0x3ba3198a
 800be20:	252049c1 	.word	0x252049c1
 800be24:	397b839a 	.word	0x397b839a
 800be28:	3fe921fb 	.word	0x3fe921fb
 800be2c:	4002d97b 	.word	0x4002d97b
 800be30:	3ff921fb 	.word	0x3ff921fb
 800be34:	413921fb 	.word	0x413921fb
 800be38:	3fe00000 	.word	0x3fe00000
 800be3c:	0800d6c8 	.word	0x0800d6c8
 800be40:	7fefffff 	.word	0x7fefffff
 800be44:	ea4f 5428 	mov.w	r4, r8, asr #20
 800be48:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800be4c:	ee10 0a10 	vmov	r0, s0
 800be50:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800be54:	ee10 6a10 	vmov	r6, s0
 800be58:	460f      	mov	r7, r1
 800be5a:	f7f4 fe95 	bl	8000b88 <__aeabi_d2iz>
 800be5e:	f7f4 fb79 	bl	8000554 <__aeabi_i2d>
 800be62:	4602      	mov	r2, r0
 800be64:	460b      	mov	r3, r1
 800be66:	4630      	mov	r0, r6
 800be68:	4639      	mov	r1, r7
 800be6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be6e:	f7f4 fa23 	bl	80002b8 <__aeabi_dsub>
 800be72:	4b23      	ldr	r3, [pc, #140]	; (800bf00 <__ieee754_rem_pio2+0x410>)
 800be74:	2200      	movs	r2, #0
 800be76:	f7f4 fbd7 	bl	8000628 <__aeabi_dmul>
 800be7a:	460f      	mov	r7, r1
 800be7c:	4606      	mov	r6, r0
 800be7e:	f7f4 fe83 	bl	8000b88 <__aeabi_d2iz>
 800be82:	f7f4 fb67 	bl	8000554 <__aeabi_i2d>
 800be86:	4602      	mov	r2, r0
 800be88:	460b      	mov	r3, r1
 800be8a:	4630      	mov	r0, r6
 800be8c:	4639      	mov	r1, r7
 800be8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be92:	f7f4 fa11 	bl	80002b8 <__aeabi_dsub>
 800be96:	4b1a      	ldr	r3, [pc, #104]	; (800bf00 <__ieee754_rem_pio2+0x410>)
 800be98:	2200      	movs	r2, #0
 800be9a:	f7f4 fbc5 	bl	8000628 <__aeabi_dmul>
 800be9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bea2:	ad04      	add	r5, sp, #16
 800bea4:	f04f 0803 	mov.w	r8, #3
 800bea8:	46a9      	mov	r9, r5
 800beaa:	2600      	movs	r6, #0
 800beac:	2700      	movs	r7, #0
 800beae:	4632      	mov	r2, r6
 800beb0:	463b      	mov	r3, r7
 800beb2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800beb6:	46c3      	mov	fp, r8
 800beb8:	3d08      	subs	r5, #8
 800beba:	f108 38ff 	add.w	r8, r8, #4294967295
 800bebe:	f7f4 fe1b 	bl	8000af8 <__aeabi_dcmpeq>
 800bec2:	2800      	cmp	r0, #0
 800bec4:	d1f3      	bne.n	800beae <__ieee754_rem_pio2+0x3be>
 800bec6:	4b0f      	ldr	r3, [pc, #60]	; (800bf04 <__ieee754_rem_pio2+0x414>)
 800bec8:	9301      	str	r3, [sp, #4]
 800beca:	2302      	movs	r3, #2
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	4622      	mov	r2, r4
 800bed0:	465b      	mov	r3, fp
 800bed2:	4651      	mov	r1, sl
 800bed4:	4648      	mov	r0, r9
 800bed6:	f000 f993 	bl	800c200 <__kernel_rem_pio2>
 800beda:	9b02      	ldr	r3, [sp, #8]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	4683      	mov	fp, r0
 800bee0:	f6bf ae46 	bge.w	800bb70 <__ieee754_rem_pio2+0x80>
 800bee4:	e9da 2100 	ldrd	r2, r1, [sl]
 800bee8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800beec:	e9ca 2300 	strd	r2, r3, [sl]
 800bef0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800bef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bef8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800befc:	e73a      	b.n	800bd74 <__ieee754_rem_pio2+0x284>
 800befe:	bf00      	nop
 800bf00:	41700000 	.word	0x41700000
 800bf04:	0800d748 	.word	0x0800d748

0800bf08 <__ieee754_sqrt>:
 800bf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf0c:	ec55 4b10 	vmov	r4, r5, d0
 800bf10:	4e55      	ldr	r6, [pc, #340]	; (800c068 <__ieee754_sqrt+0x160>)
 800bf12:	43ae      	bics	r6, r5
 800bf14:	ee10 0a10 	vmov	r0, s0
 800bf18:	ee10 3a10 	vmov	r3, s0
 800bf1c:	462a      	mov	r2, r5
 800bf1e:	4629      	mov	r1, r5
 800bf20:	d110      	bne.n	800bf44 <__ieee754_sqrt+0x3c>
 800bf22:	ee10 2a10 	vmov	r2, s0
 800bf26:	462b      	mov	r3, r5
 800bf28:	f7f4 fb7e 	bl	8000628 <__aeabi_dmul>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	4620      	mov	r0, r4
 800bf32:	4629      	mov	r1, r5
 800bf34:	f7f4 f9c2 	bl	80002bc <__adddf3>
 800bf38:	4604      	mov	r4, r0
 800bf3a:	460d      	mov	r5, r1
 800bf3c:	ec45 4b10 	vmov	d0, r4, r5
 800bf40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf44:	2d00      	cmp	r5, #0
 800bf46:	dc10      	bgt.n	800bf6a <__ieee754_sqrt+0x62>
 800bf48:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bf4c:	4330      	orrs	r0, r6
 800bf4e:	d0f5      	beq.n	800bf3c <__ieee754_sqrt+0x34>
 800bf50:	b15d      	cbz	r5, 800bf6a <__ieee754_sqrt+0x62>
 800bf52:	ee10 2a10 	vmov	r2, s0
 800bf56:	462b      	mov	r3, r5
 800bf58:	ee10 0a10 	vmov	r0, s0
 800bf5c:	f7f4 f9ac 	bl	80002b8 <__aeabi_dsub>
 800bf60:	4602      	mov	r2, r0
 800bf62:	460b      	mov	r3, r1
 800bf64:	f7f4 fc8a 	bl	800087c <__aeabi_ddiv>
 800bf68:	e7e6      	b.n	800bf38 <__ieee754_sqrt+0x30>
 800bf6a:	1512      	asrs	r2, r2, #20
 800bf6c:	d074      	beq.n	800c058 <__ieee754_sqrt+0x150>
 800bf6e:	07d4      	lsls	r4, r2, #31
 800bf70:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bf74:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bf78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bf7c:	bf5e      	ittt	pl
 800bf7e:	0fda      	lsrpl	r2, r3, #31
 800bf80:	005b      	lslpl	r3, r3, #1
 800bf82:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800bf86:	2400      	movs	r4, #0
 800bf88:	0fda      	lsrs	r2, r3, #31
 800bf8a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bf8e:	107f      	asrs	r7, r7, #1
 800bf90:	005b      	lsls	r3, r3, #1
 800bf92:	2516      	movs	r5, #22
 800bf94:	4620      	mov	r0, r4
 800bf96:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bf9a:	1886      	adds	r6, r0, r2
 800bf9c:	428e      	cmp	r6, r1
 800bf9e:	bfde      	ittt	le
 800bfa0:	1b89      	suble	r1, r1, r6
 800bfa2:	18b0      	addle	r0, r6, r2
 800bfa4:	18a4      	addle	r4, r4, r2
 800bfa6:	0049      	lsls	r1, r1, #1
 800bfa8:	3d01      	subs	r5, #1
 800bfaa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800bfae:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bfb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bfb6:	d1f0      	bne.n	800bf9a <__ieee754_sqrt+0x92>
 800bfb8:	462a      	mov	r2, r5
 800bfba:	f04f 0e20 	mov.w	lr, #32
 800bfbe:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bfc2:	4281      	cmp	r1, r0
 800bfc4:	eb06 0c05 	add.w	ip, r6, r5
 800bfc8:	dc02      	bgt.n	800bfd0 <__ieee754_sqrt+0xc8>
 800bfca:	d113      	bne.n	800bff4 <__ieee754_sqrt+0xec>
 800bfcc:	459c      	cmp	ip, r3
 800bfce:	d811      	bhi.n	800bff4 <__ieee754_sqrt+0xec>
 800bfd0:	f1bc 0f00 	cmp.w	ip, #0
 800bfd4:	eb0c 0506 	add.w	r5, ip, r6
 800bfd8:	da43      	bge.n	800c062 <__ieee754_sqrt+0x15a>
 800bfda:	2d00      	cmp	r5, #0
 800bfdc:	db41      	blt.n	800c062 <__ieee754_sqrt+0x15a>
 800bfde:	f100 0801 	add.w	r8, r0, #1
 800bfe2:	1a09      	subs	r1, r1, r0
 800bfe4:	459c      	cmp	ip, r3
 800bfe6:	bf88      	it	hi
 800bfe8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800bfec:	eba3 030c 	sub.w	r3, r3, ip
 800bff0:	4432      	add	r2, r6
 800bff2:	4640      	mov	r0, r8
 800bff4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bff8:	f1be 0e01 	subs.w	lr, lr, #1
 800bffc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c000:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c004:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c008:	d1db      	bne.n	800bfc2 <__ieee754_sqrt+0xba>
 800c00a:	430b      	orrs	r3, r1
 800c00c:	d006      	beq.n	800c01c <__ieee754_sqrt+0x114>
 800c00e:	1c50      	adds	r0, r2, #1
 800c010:	bf13      	iteet	ne
 800c012:	3201      	addne	r2, #1
 800c014:	3401      	addeq	r4, #1
 800c016:	4672      	moveq	r2, lr
 800c018:	f022 0201 	bicne.w	r2, r2, #1
 800c01c:	1063      	asrs	r3, r4, #1
 800c01e:	0852      	lsrs	r2, r2, #1
 800c020:	07e1      	lsls	r1, r4, #31
 800c022:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c026:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c02a:	bf48      	it	mi
 800c02c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c030:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c034:	4614      	mov	r4, r2
 800c036:	e781      	b.n	800bf3c <__ieee754_sqrt+0x34>
 800c038:	0ad9      	lsrs	r1, r3, #11
 800c03a:	3815      	subs	r0, #21
 800c03c:	055b      	lsls	r3, r3, #21
 800c03e:	2900      	cmp	r1, #0
 800c040:	d0fa      	beq.n	800c038 <__ieee754_sqrt+0x130>
 800c042:	02cd      	lsls	r5, r1, #11
 800c044:	d50a      	bpl.n	800c05c <__ieee754_sqrt+0x154>
 800c046:	f1c2 0420 	rsb	r4, r2, #32
 800c04a:	fa23 f404 	lsr.w	r4, r3, r4
 800c04e:	1e55      	subs	r5, r2, #1
 800c050:	4093      	lsls	r3, r2
 800c052:	4321      	orrs	r1, r4
 800c054:	1b42      	subs	r2, r0, r5
 800c056:	e78a      	b.n	800bf6e <__ieee754_sqrt+0x66>
 800c058:	4610      	mov	r0, r2
 800c05a:	e7f0      	b.n	800c03e <__ieee754_sqrt+0x136>
 800c05c:	0049      	lsls	r1, r1, #1
 800c05e:	3201      	adds	r2, #1
 800c060:	e7ef      	b.n	800c042 <__ieee754_sqrt+0x13a>
 800c062:	4680      	mov	r8, r0
 800c064:	e7bd      	b.n	800bfe2 <__ieee754_sqrt+0xda>
 800c066:	bf00      	nop
 800c068:	7ff00000 	.word	0x7ff00000
 800c06c:	00000000 	.word	0x00000000

0800c070 <__kernel_cos>:
 800c070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c074:	ec57 6b10 	vmov	r6, r7, d0
 800c078:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c07c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c080:	ed8d 1b00 	vstr	d1, [sp]
 800c084:	da07      	bge.n	800c096 <__kernel_cos+0x26>
 800c086:	ee10 0a10 	vmov	r0, s0
 800c08a:	4639      	mov	r1, r7
 800c08c:	f7f4 fd7c 	bl	8000b88 <__aeabi_d2iz>
 800c090:	2800      	cmp	r0, #0
 800c092:	f000 8088 	beq.w	800c1a6 <__kernel_cos+0x136>
 800c096:	4632      	mov	r2, r6
 800c098:	463b      	mov	r3, r7
 800c09a:	4630      	mov	r0, r6
 800c09c:	4639      	mov	r1, r7
 800c09e:	f7f4 fac3 	bl	8000628 <__aeabi_dmul>
 800c0a2:	4b51      	ldr	r3, [pc, #324]	; (800c1e8 <__kernel_cos+0x178>)
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	460d      	mov	r5, r1
 800c0aa:	f7f4 fabd 	bl	8000628 <__aeabi_dmul>
 800c0ae:	a340      	add	r3, pc, #256	; (adr r3, 800c1b0 <__kernel_cos+0x140>)
 800c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b4:	4682      	mov	sl, r0
 800c0b6:	468b      	mov	fp, r1
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	4629      	mov	r1, r5
 800c0bc:	f7f4 fab4 	bl	8000628 <__aeabi_dmul>
 800c0c0:	a33d      	add	r3, pc, #244	; (adr r3, 800c1b8 <__kernel_cos+0x148>)
 800c0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c6:	f7f4 f8f9 	bl	80002bc <__adddf3>
 800c0ca:	4622      	mov	r2, r4
 800c0cc:	462b      	mov	r3, r5
 800c0ce:	f7f4 faab 	bl	8000628 <__aeabi_dmul>
 800c0d2:	a33b      	add	r3, pc, #236	; (adr r3, 800c1c0 <__kernel_cos+0x150>)
 800c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d8:	f7f4 f8ee 	bl	80002b8 <__aeabi_dsub>
 800c0dc:	4622      	mov	r2, r4
 800c0de:	462b      	mov	r3, r5
 800c0e0:	f7f4 faa2 	bl	8000628 <__aeabi_dmul>
 800c0e4:	a338      	add	r3, pc, #224	; (adr r3, 800c1c8 <__kernel_cos+0x158>)
 800c0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ea:	f7f4 f8e7 	bl	80002bc <__adddf3>
 800c0ee:	4622      	mov	r2, r4
 800c0f0:	462b      	mov	r3, r5
 800c0f2:	f7f4 fa99 	bl	8000628 <__aeabi_dmul>
 800c0f6:	a336      	add	r3, pc, #216	; (adr r3, 800c1d0 <__kernel_cos+0x160>)
 800c0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fc:	f7f4 f8dc 	bl	80002b8 <__aeabi_dsub>
 800c100:	4622      	mov	r2, r4
 800c102:	462b      	mov	r3, r5
 800c104:	f7f4 fa90 	bl	8000628 <__aeabi_dmul>
 800c108:	a333      	add	r3, pc, #204	; (adr r3, 800c1d8 <__kernel_cos+0x168>)
 800c10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10e:	f7f4 f8d5 	bl	80002bc <__adddf3>
 800c112:	4622      	mov	r2, r4
 800c114:	462b      	mov	r3, r5
 800c116:	f7f4 fa87 	bl	8000628 <__aeabi_dmul>
 800c11a:	4622      	mov	r2, r4
 800c11c:	462b      	mov	r3, r5
 800c11e:	f7f4 fa83 	bl	8000628 <__aeabi_dmul>
 800c122:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c126:	4604      	mov	r4, r0
 800c128:	460d      	mov	r5, r1
 800c12a:	4630      	mov	r0, r6
 800c12c:	4639      	mov	r1, r7
 800c12e:	f7f4 fa7b 	bl	8000628 <__aeabi_dmul>
 800c132:	460b      	mov	r3, r1
 800c134:	4602      	mov	r2, r0
 800c136:	4629      	mov	r1, r5
 800c138:	4620      	mov	r0, r4
 800c13a:	f7f4 f8bd 	bl	80002b8 <__aeabi_dsub>
 800c13e:	4b2b      	ldr	r3, [pc, #172]	; (800c1ec <__kernel_cos+0x17c>)
 800c140:	4598      	cmp	r8, r3
 800c142:	4606      	mov	r6, r0
 800c144:	460f      	mov	r7, r1
 800c146:	dc10      	bgt.n	800c16a <__kernel_cos+0xfa>
 800c148:	4602      	mov	r2, r0
 800c14a:	460b      	mov	r3, r1
 800c14c:	4650      	mov	r0, sl
 800c14e:	4659      	mov	r1, fp
 800c150:	f7f4 f8b2 	bl	80002b8 <__aeabi_dsub>
 800c154:	460b      	mov	r3, r1
 800c156:	4926      	ldr	r1, [pc, #152]	; (800c1f0 <__kernel_cos+0x180>)
 800c158:	4602      	mov	r2, r0
 800c15a:	2000      	movs	r0, #0
 800c15c:	f7f4 f8ac 	bl	80002b8 <__aeabi_dsub>
 800c160:	ec41 0b10 	vmov	d0, r0, r1
 800c164:	b003      	add	sp, #12
 800c166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16a:	4b22      	ldr	r3, [pc, #136]	; (800c1f4 <__kernel_cos+0x184>)
 800c16c:	4920      	ldr	r1, [pc, #128]	; (800c1f0 <__kernel_cos+0x180>)
 800c16e:	4598      	cmp	r8, r3
 800c170:	bfcc      	ite	gt
 800c172:	4d21      	ldrgt	r5, [pc, #132]	; (800c1f8 <__kernel_cos+0x188>)
 800c174:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c178:	2400      	movs	r4, #0
 800c17a:	4622      	mov	r2, r4
 800c17c:	462b      	mov	r3, r5
 800c17e:	2000      	movs	r0, #0
 800c180:	f7f4 f89a 	bl	80002b8 <__aeabi_dsub>
 800c184:	4622      	mov	r2, r4
 800c186:	4680      	mov	r8, r0
 800c188:	4689      	mov	r9, r1
 800c18a:	462b      	mov	r3, r5
 800c18c:	4650      	mov	r0, sl
 800c18e:	4659      	mov	r1, fp
 800c190:	f7f4 f892 	bl	80002b8 <__aeabi_dsub>
 800c194:	4632      	mov	r2, r6
 800c196:	463b      	mov	r3, r7
 800c198:	f7f4 f88e 	bl	80002b8 <__aeabi_dsub>
 800c19c:	4602      	mov	r2, r0
 800c19e:	460b      	mov	r3, r1
 800c1a0:	4640      	mov	r0, r8
 800c1a2:	4649      	mov	r1, r9
 800c1a4:	e7da      	b.n	800c15c <__kernel_cos+0xec>
 800c1a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c1e0 <__kernel_cos+0x170>
 800c1aa:	e7db      	b.n	800c164 <__kernel_cos+0xf4>
 800c1ac:	f3af 8000 	nop.w
 800c1b0:	be8838d4 	.word	0xbe8838d4
 800c1b4:	bda8fae9 	.word	0xbda8fae9
 800c1b8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c1bc:	3e21ee9e 	.word	0x3e21ee9e
 800c1c0:	809c52ad 	.word	0x809c52ad
 800c1c4:	3e927e4f 	.word	0x3e927e4f
 800c1c8:	19cb1590 	.word	0x19cb1590
 800c1cc:	3efa01a0 	.word	0x3efa01a0
 800c1d0:	16c15177 	.word	0x16c15177
 800c1d4:	3f56c16c 	.word	0x3f56c16c
 800c1d8:	5555554c 	.word	0x5555554c
 800c1dc:	3fa55555 	.word	0x3fa55555
 800c1e0:	00000000 	.word	0x00000000
 800c1e4:	3ff00000 	.word	0x3ff00000
 800c1e8:	3fe00000 	.word	0x3fe00000
 800c1ec:	3fd33332 	.word	0x3fd33332
 800c1f0:	3ff00000 	.word	0x3ff00000
 800c1f4:	3fe90000 	.word	0x3fe90000
 800c1f8:	3fd20000 	.word	0x3fd20000
 800c1fc:	00000000 	.word	0x00000000

0800c200 <__kernel_rem_pio2>:
 800c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c204:	ed2d 8b02 	vpush	{d8}
 800c208:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c20c:	f112 0f14 	cmn.w	r2, #20
 800c210:	9308      	str	r3, [sp, #32]
 800c212:	9101      	str	r1, [sp, #4]
 800c214:	4bc4      	ldr	r3, [pc, #784]	; (800c528 <__kernel_rem_pio2+0x328>)
 800c216:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c218:	900b      	str	r0, [sp, #44]	; 0x2c
 800c21a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c21e:	9302      	str	r3, [sp, #8]
 800c220:	9b08      	ldr	r3, [sp, #32]
 800c222:	f103 33ff 	add.w	r3, r3, #4294967295
 800c226:	bfa8      	it	ge
 800c228:	1ed4      	subge	r4, r2, #3
 800c22a:	9306      	str	r3, [sp, #24]
 800c22c:	bfb2      	itee	lt
 800c22e:	2400      	movlt	r4, #0
 800c230:	2318      	movge	r3, #24
 800c232:	fb94 f4f3 	sdivge	r4, r4, r3
 800c236:	f06f 0317 	mvn.w	r3, #23
 800c23a:	fb04 3303 	mla	r3, r4, r3, r3
 800c23e:	eb03 0a02 	add.w	sl, r3, r2
 800c242:	9b02      	ldr	r3, [sp, #8]
 800c244:	9a06      	ldr	r2, [sp, #24]
 800c246:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800c518 <__kernel_rem_pio2+0x318>
 800c24a:	eb03 0802 	add.w	r8, r3, r2
 800c24e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c250:	1aa7      	subs	r7, r4, r2
 800c252:	ae22      	add	r6, sp, #136	; 0x88
 800c254:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c258:	2500      	movs	r5, #0
 800c25a:	4545      	cmp	r5, r8
 800c25c:	dd13      	ble.n	800c286 <__kernel_rem_pio2+0x86>
 800c25e:	9b08      	ldr	r3, [sp, #32]
 800c260:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800c518 <__kernel_rem_pio2+0x318>
 800c264:	aa22      	add	r2, sp, #136	; 0x88
 800c266:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c26a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c26e:	f04f 0800 	mov.w	r8, #0
 800c272:	9b02      	ldr	r3, [sp, #8]
 800c274:	4598      	cmp	r8, r3
 800c276:	dc2f      	bgt.n	800c2d8 <__kernel_rem_pio2+0xd8>
 800c278:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c27c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800c280:	462f      	mov	r7, r5
 800c282:	2600      	movs	r6, #0
 800c284:	e01b      	b.n	800c2be <__kernel_rem_pio2+0xbe>
 800c286:	42ef      	cmn	r7, r5
 800c288:	d407      	bmi.n	800c29a <__kernel_rem_pio2+0x9a>
 800c28a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c28e:	f7f4 f961 	bl	8000554 <__aeabi_i2d>
 800c292:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c296:	3501      	adds	r5, #1
 800c298:	e7df      	b.n	800c25a <__kernel_rem_pio2+0x5a>
 800c29a:	ec51 0b18 	vmov	r0, r1, d8
 800c29e:	e7f8      	b.n	800c292 <__kernel_rem_pio2+0x92>
 800c2a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2a4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c2a8:	f7f4 f9be 	bl	8000628 <__aeabi_dmul>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2b4:	f7f4 f802 	bl	80002bc <__adddf3>
 800c2b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2bc:	3601      	adds	r6, #1
 800c2be:	9b06      	ldr	r3, [sp, #24]
 800c2c0:	429e      	cmp	r6, r3
 800c2c2:	f1a7 0708 	sub.w	r7, r7, #8
 800c2c6:	ddeb      	ble.n	800c2a0 <__kernel_rem_pio2+0xa0>
 800c2c8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c2cc:	f108 0801 	add.w	r8, r8, #1
 800c2d0:	ecab 7b02 	vstmia	fp!, {d7}
 800c2d4:	3508      	adds	r5, #8
 800c2d6:	e7cc      	b.n	800c272 <__kernel_rem_pio2+0x72>
 800c2d8:	9b02      	ldr	r3, [sp, #8]
 800c2da:	aa0e      	add	r2, sp, #56	; 0x38
 800c2dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c2e0:	930d      	str	r3, [sp, #52]	; 0x34
 800c2e2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c2e4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c2e8:	9c02      	ldr	r4, [sp, #8]
 800c2ea:	930c      	str	r3, [sp, #48]	; 0x30
 800c2ec:	00e3      	lsls	r3, r4, #3
 800c2ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c2f0:	ab9a      	add	r3, sp, #616	; 0x268
 800c2f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c2f6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c2fa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800c2fe:	ab72      	add	r3, sp, #456	; 0x1c8
 800c300:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c304:	46c3      	mov	fp, r8
 800c306:	46a1      	mov	r9, r4
 800c308:	f1b9 0f00 	cmp.w	r9, #0
 800c30c:	f1a5 0508 	sub.w	r5, r5, #8
 800c310:	dc77      	bgt.n	800c402 <__kernel_rem_pio2+0x202>
 800c312:	ec47 6b10 	vmov	d0, r6, r7
 800c316:	4650      	mov	r0, sl
 800c318:	f000 fde6 	bl	800cee8 <scalbn>
 800c31c:	ec57 6b10 	vmov	r6, r7, d0
 800c320:	2200      	movs	r2, #0
 800c322:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c326:	ee10 0a10 	vmov	r0, s0
 800c32a:	4639      	mov	r1, r7
 800c32c:	f7f4 f97c 	bl	8000628 <__aeabi_dmul>
 800c330:	ec41 0b10 	vmov	d0, r0, r1
 800c334:	f000 fd58 	bl	800cde8 <floor>
 800c338:	4b7c      	ldr	r3, [pc, #496]	; (800c52c <__kernel_rem_pio2+0x32c>)
 800c33a:	ec51 0b10 	vmov	r0, r1, d0
 800c33e:	2200      	movs	r2, #0
 800c340:	f7f4 f972 	bl	8000628 <__aeabi_dmul>
 800c344:	4602      	mov	r2, r0
 800c346:	460b      	mov	r3, r1
 800c348:	4630      	mov	r0, r6
 800c34a:	4639      	mov	r1, r7
 800c34c:	f7f3 ffb4 	bl	80002b8 <__aeabi_dsub>
 800c350:	460f      	mov	r7, r1
 800c352:	4606      	mov	r6, r0
 800c354:	f7f4 fc18 	bl	8000b88 <__aeabi_d2iz>
 800c358:	9004      	str	r0, [sp, #16]
 800c35a:	f7f4 f8fb 	bl	8000554 <__aeabi_i2d>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	4630      	mov	r0, r6
 800c364:	4639      	mov	r1, r7
 800c366:	f7f3 ffa7 	bl	80002b8 <__aeabi_dsub>
 800c36a:	f1ba 0f00 	cmp.w	sl, #0
 800c36e:	4606      	mov	r6, r0
 800c370:	460f      	mov	r7, r1
 800c372:	dd6d      	ble.n	800c450 <__kernel_rem_pio2+0x250>
 800c374:	1e62      	subs	r2, r4, #1
 800c376:	ab0e      	add	r3, sp, #56	; 0x38
 800c378:	9d04      	ldr	r5, [sp, #16]
 800c37a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c37e:	f1ca 0118 	rsb	r1, sl, #24
 800c382:	fa40 f301 	asr.w	r3, r0, r1
 800c386:	441d      	add	r5, r3
 800c388:	408b      	lsls	r3, r1
 800c38a:	1ac0      	subs	r0, r0, r3
 800c38c:	ab0e      	add	r3, sp, #56	; 0x38
 800c38e:	9504      	str	r5, [sp, #16]
 800c390:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c394:	f1ca 0317 	rsb	r3, sl, #23
 800c398:	fa40 fb03 	asr.w	fp, r0, r3
 800c39c:	f1bb 0f00 	cmp.w	fp, #0
 800c3a0:	dd65      	ble.n	800c46e <__kernel_rem_pio2+0x26e>
 800c3a2:	9b04      	ldr	r3, [sp, #16]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	9304      	str	r3, [sp, #16]
 800c3aa:	4615      	mov	r5, r2
 800c3ac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c3b0:	4294      	cmp	r4, r2
 800c3b2:	f300 809c 	bgt.w	800c4ee <__kernel_rem_pio2+0x2ee>
 800c3b6:	f1ba 0f00 	cmp.w	sl, #0
 800c3ba:	dd07      	ble.n	800c3cc <__kernel_rem_pio2+0x1cc>
 800c3bc:	f1ba 0f01 	cmp.w	sl, #1
 800c3c0:	f000 80c0 	beq.w	800c544 <__kernel_rem_pio2+0x344>
 800c3c4:	f1ba 0f02 	cmp.w	sl, #2
 800c3c8:	f000 80c6 	beq.w	800c558 <__kernel_rem_pio2+0x358>
 800c3cc:	f1bb 0f02 	cmp.w	fp, #2
 800c3d0:	d14d      	bne.n	800c46e <__kernel_rem_pio2+0x26e>
 800c3d2:	4632      	mov	r2, r6
 800c3d4:	463b      	mov	r3, r7
 800c3d6:	4956      	ldr	r1, [pc, #344]	; (800c530 <__kernel_rem_pio2+0x330>)
 800c3d8:	2000      	movs	r0, #0
 800c3da:	f7f3 ff6d 	bl	80002b8 <__aeabi_dsub>
 800c3de:	4606      	mov	r6, r0
 800c3e0:	460f      	mov	r7, r1
 800c3e2:	2d00      	cmp	r5, #0
 800c3e4:	d043      	beq.n	800c46e <__kernel_rem_pio2+0x26e>
 800c3e6:	4650      	mov	r0, sl
 800c3e8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800c520 <__kernel_rem_pio2+0x320>
 800c3ec:	f000 fd7c 	bl	800cee8 <scalbn>
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	4639      	mov	r1, r7
 800c3f4:	ec53 2b10 	vmov	r2, r3, d0
 800c3f8:	f7f3 ff5e 	bl	80002b8 <__aeabi_dsub>
 800c3fc:	4606      	mov	r6, r0
 800c3fe:	460f      	mov	r7, r1
 800c400:	e035      	b.n	800c46e <__kernel_rem_pio2+0x26e>
 800c402:	4b4c      	ldr	r3, [pc, #304]	; (800c534 <__kernel_rem_pio2+0x334>)
 800c404:	2200      	movs	r2, #0
 800c406:	4630      	mov	r0, r6
 800c408:	4639      	mov	r1, r7
 800c40a:	f7f4 f90d 	bl	8000628 <__aeabi_dmul>
 800c40e:	f7f4 fbbb 	bl	8000b88 <__aeabi_d2iz>
 800c412:	f7f4 f89f 	bl	8000554 <__aeabi_i2d>
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
 800c41a:	ec43 2b18 	vmov	d8, r2, r3
 800c41e:	4b46      	ldr	r3, [pc, #280]	; (800c538 <__kernel_rem_pio2+0x338>)
 800c420:	2200      	movs	r2, #0
 800c422:	f7f4 f901 	bl	8000628 <__aeabi_dmul>
 800c426:	4602      	mov	r2, r0
 800c428:	460b      	mov	r3, r1
 800c42a:	4630      	mov	r0, r6
 800c42c:	4639      	mov	r1, r7
 800c42e:	f7f3 ff43 	bl	80002b8 <__aeabi_dsub>
 800c432:	f7f4 fba9 	bl	8000b88 <__aeabi_d2iz>
 800c436:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c43a:	f84b 0b04 	str.w	r0, [fp], #4
 800c43e:	ec51 0b18 	vmov	r0, r1, d8
 800c442:	f7f3 ff3b 	bl	80002bc <__adddf3>
 800c446:	f109 39ff 	add.w	r9, r9, #4294967295
 800c44a:	4606      	mov	r6, r0
 800c44c:	460f      	mov	r7, r1
 800c44e:	e75b      	b.n	800c308 <__kernel_rem_pio2+0x108>
 800c450:	d106      	bne.n	800c460 <__kernel_rem_pio2+0x260>
 800c452:	1e63      	subs	r3, r4, #1
 800c454:	aa0e      	add	r2, sp, #56	; 0x38
 800c456:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c45a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800c45e:	e79d      	b.n	800c39c <__kernel_rem_pio2+0x19c>
 800c460:	4b36      	ldr	r3, [pc, #216]	; (800c53c <__kernel_rem_pio2+0x33c>)
 800c462:	2200      	movs	r2, #0
 800c464:	f7f4 fb66 	bl	8000b34 <__aeabi_dcmpge>
 800c468:	2800      	cmp	r0, #0
 800c46a:	d13d      	bne.n	800c4e8 <__kernel_rem_pio2+0x2e8>
 800c46c:	4683      	mov	fp, r0
 800c46e:	2200      	movs	r2, #0
 800c470:	2300      	movs	r3, #0
 800c472:	4630      	mov	r0, r6
 800c474:	4639      	mov	r1, r7
 800c476:	f7f4 fb3f 	bl	8000af8 <__aeabi_dcmpeq>
 800c47a:	2800      	cmp	r0, #0
 800c47c:	f000 80c0 	beq.w	800c600 <__kernel_rem_pio2+0x400>
 800c480:	1e65      	subs	r5, r4, #1
 800c482:	462b      	mov	r3, r5
 800c484:	2200      	movs	r2, #0
 800c486:	9902      	ldr	r1, [sp, #8]
 800c488:	428b      	cmp	r3, r1
 800c48a:	da6c      	bge.n	800c566 <__kernel_rem_pio2+0x366>
 800c48c:	2a00      	cmp	r2, #0
 800c48e:	f000 8089 	beq.w	800c5a4 <__kernel_rem_pio2+0x3a4>
 800c492:	ab0e      	add	r3, sp, #56	; 0x38
 800c494:	f1aa 0a18 	sub.w	sl, sl, #24
 800c498:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f000 80ad 	beq.w	800c5fc <__kernel_rem_pio2+0x3fc>
 800c4a2:	4650      	mov	r0, sl
 800c4a4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800c520 <__kernel_rem_pio2+0x320>
 800c4a8:	f000 fd1e 	bl	800cee8 <scalbn>
 800c4ac:	ab9a      	add	r3, sp, #616	; 0x268
 800c4ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c4b2:	ec57 6b10 	vmov	r6, r7, d0
 800c4b6:	00ec      	lsls	r4, r5, #3
 800c4b8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800c4bc:	46aa      	mov	sl, r5
 800c4be:	f1ba 0f00 	cmp.w	sl, #0
 800c4c2:	f280 80d6 	bge.w	800c672 <__kernel_rem_pio2+0x472>
 800c4c6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800c518 <__kernel_rem_pio2+0x318>
 800c4ca:	462e      	mov	r6, r5
 800c4cc:	2e00      	cmp	r6, #0
 800c4ce:	f2c0 8104 	blt.w	800c6da <__kernel_rem_pio2+0x4da>
 800c4d2:	ab72      	add	r3, sp, #456	; 0x1c8
 800c4d4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c4d8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800c540 <__kernel_rem_pio2+0x340>
 800c4dc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c4e0:	f04f 0800 	mov.w	r8, #0
 800c4e4:	1baf      	subs	r7, r5, r6
 800c4e6:	e0ea      	b.n	800c6be <__kernel_rem_pio2+0x4be>
 800c4e8:	f04f 0b02 	mov.w	fp, #2
 800c4ec:	e759      	b.n	800c3a2 <__kernel_rem_pio2+0x1a2>
 800c4ee:	f8d8 3000 	ldr.w	r3, [r8]
 800c4f2:	b955      	cbnz	r5, 800c50a <__kernel_rem_pio2+0x30a>
 800c4f4:	b123      	cbz	r3, 800c500 <__kernel_rem_pio2+0x300>
 800c4f6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c4fa:	f8c8 3000 	str.w	r3, [r8]
 800c4fe:	2301      	movs	r3, #1
 800c500:	3201      	adds	r2, #1
 800c502:	f108 0804 	add.w	r8, r8, #4
 800c506:	461d      	mov	r5, r3
 800c508:	e752      	b.n	800c3b0 <__kernel_rem_pio2+0x1b0>
 800c50a:	1acb      	subs	r3, r1, r3
 800c50c:	f8c8 3000 	str.w	r3, [r8]
 800c510:	462b      	mov	r3, r5
 800c512:	e7f5      	b.n	800c500 <__kernel_rem_pio2+0x300>
 800c514:	f3af 8000 	nop.w
	...
 800c524:	3ff00000 	.word	0x3ff00000
 800c528:	0800d890 	.word	0x0800d890
 800c52c:	40200000 	.word	0x40200000
 800c530:	3ff00000 	.word	0x3ff00000
 800c534:	3e700000 	.word	0x3e700000
 800c538:	41700000 	.word	0x41700000
 800c53c:	3fe00000 	.word	0x3fe00000
 800c540:	0800d850 	.word	0x0800d850
 800c544:	1e62      	subs	r2, r4, #1
 800c546:	ab0e      	add	r3, sp, #56	; 0x38
 800c548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c54c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c550:	a90e      	add	r1, sp, #56	; 0x38
 800c552:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c556:	e739      	b.n	800c3cc <__kernel_rem_pio2+0x1cc>
 800c558:	1e62      	subs	r2, r4, #1
 800c55a:	ab0e      	add	r3, sp, #56	; 0x38
 800c55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c560:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c564:	e7f4      	b.n	800c550 <__kernel_rem_pio2+0x350>
 800c566:	a90e      	add	r1, sp, #56	; 0x38
 800c568:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c56c:	3b01      	subs	r3, #1
 800c56e:	430a      	orrs	r2, r1
 800c570:	e789      	b.n	800c486 <__kernel_rem_pio2+0x286>
 800c572:	3301      	adds	r3, #1
 800c574:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c578:	2900      	cmp	r1, #0
 800c57a:	d0fa      	beq.n	800c572 <__kernel_rem_pio2+0x372>
 800c57c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c57e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800c582:	446a      	add	r2, sp
 800c584:	3a98      	subs	r2, #152	; 0x98
 800c586:	920a      	str	r2, [sp, #40]	; 0x28
 800c588:	9a08      	ldr	r2, [sp, #32]
 800c58a:	18e3      	adds	r3, r4, r3
 800c58c:	18a5      	adds	r5, r4, r2
 800c58e:	aa22      	add	r2, sp, #136	; 0x88
 800c590:	f104 0801 	add.w	r8, r4, #1
 800c594:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c598:	9304      	str	r3, [sp, #16]
 800c59a:	9b04      	ldr	r3, [sp, #16]
 800c59c:	4543      	cmp	r3, r8
 800c59e:	da04      	bge.n	800c5aa <__kernel_rem_pio2+0x3aa>
 800c5a0:	461c      	mov	r4, r3
 800c5a2:	e6a3      	b.n	800c2ec <__kernel_rem_pio2+0xec>
 800c5a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e7e4      	b.n	800c574 <__kernel_rem_pio2+0x374>
 800c5aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5ac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c5b0:	f7f3 ffd0 	bl	8000554 <__aeabi_i2d>
 800c5b4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c5b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5ba:	46ab      	mov	fp, r5
 800c5bc:	461c      	mov	r4, r3
 800c5be:	f04f 0900 	mov.w	r9, #0
 800c5c2:	2600      	movs	r6, #0
 800c5c4:	2700      	movs	r7, #0
 800c5c6:	9b06      	ldr	r3, [sp, #24]
 800c5c8:	4599      	cmp	r9, r3
 800c5ca:	dd06      	ble.n	800c5da <__kernel_rem_pio2+0x3da>
 800c5cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ce:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c5d2:	f108 0801 	add.w	r8, r8, #1
 800c5d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c5d8:	e7df      	b.n	800c59a <__kernel_rem_pio2+0x39a>
 800c5da:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c5de:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c5e2:	f7f4 f821 	bl	8000628 <__aeabi_dmul>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	4639      	mov	r1, r7
 800c5ee:	f7f3 fe65 	bl	80002bc <__adddf3>
 800c5f2:	f109 0901 	add.w	r9, r9, #1
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	460f      	mov	r7, r1
 800c5fa:	e7e4      	b.n	800c5c6 <__kernel_rem_pio2+0x3c6>
 800c5fc:	3d01      	subs	r5, #1
 800c5fe:	e748      	b.n	800c492 <__kernel_rem_pio2+0x292>
 800c600:	ec47 6b10 	vmov	d0, r6, r7
 800c604:	f1ca 0000 	rsb	r0, sl, #0
 800c608:	f000 fc6e 	bl	800cee8 <scalbn>
 800c60c:	ec57 6b10 	vmov	r6, r7, d0
 800c610:	4ba0      	ldr	r3, [pc, #640]	; (800c894 <__kernel_rem_pio2+0x694>)
 800c612:	ee10 0a10 	vmov	r0, s0
 800c616:	2200      	movs	r2, #0
 800c618:	4639      	mov	r1, r7
 800c61a:	f7f4 fa8b 	bl	8000b34 <__aeabi_dcmpge>
 800c61e:	b1f8      	cbz	r0, 800c660 <__kernel_rem_pio2+0x460>
 800c620:	4b9d      	ldr	r3, [pc, #628]	; (800c898 <__kernel_rem_pio2+0x698>)
 800c622:	2200      	movs	r2, #0
 800c624:	4630      	mov	r0, r6
 800c626:	4639      	mov	r1, r7
 800c628:	f7f3 fffe 	bl	8000628 <__aeabi_dmul>
 800c62c:	f7f4 faac 	bl	8000b88 <__aeabi_d2iz>
 800c630:	4680      	mov	r8, r0
 800c632:	f7f3 ff8f 	bl	8000554 <__aeabi_i2d>
 800c636:	4b97      	ldr	r3, [pc, #604]	; (800c894 <__kernel_rem_pio2+0x694>)
 800c638:	2200      	movs	r2, #0
 800c63a:	f7f3 fff5 	bl	8000628 <__aeabi_dmul>
 800c63e:	460b      	mov	r3, r1
 800c640:	4602      	mov	r2, r0
 800c642:	4639      	mov	r1, r7
 800c644:	4630      	mov	r0, r6
 800c646:	f7f3 fe37 	bl	80002b8 <__aeabi_dsub>
 800c64a:	f7f4 fa9d 	bl	8000b88 <__aeabi_d2iz>
 800c64e:	1c65      	adds	r5, r4, #1
 800c650:	ab0e      	add	r3, sp, #56	; 0x38
 800c652:	f10a 0a18 	add.w	sl, sl, #24
 800c656:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c65a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c65e:	e720      	b.n	800c4a2 <__kernel_rem_pio2+0x2a2>
 800c660:	4630      	mov	r0, r6
 800c662:	4639      	mov	r1, r7
 800c664:	f7f4 fa90 	bl	8000b88 <__aeabi_d2iz>
 800c668:	ab0e      	add	r3, sp, #56	; 0x38
 800c66a:	4625      	mov	r5, r4
 800c66c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c670:	e717      	b.n	800c4a2 <__kernel_rem_pio2+0x2a2>
 800c672:	ab0e      	add	r3, sp, #56	; 0x38
 800c674:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c678:	f7f3 ff6c 	bl	8000554 <__aeabi_i2d>
 800c67c:	4632      	mov	r2, r6
 800c67e:	463b      	mov	r3, r7
 800c680:	f7f3 ffd2 	bl	8000628 <__aeabi_dmul>
 800c684:	4b84      	ldr	r3, [pc, #528]	; (800c898 <__kernel_rem_pio2+0x698>)
 800c686:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c68a:	2200      	movs	r2, #0
 800c68c:	4630      	mov	r0, r6
 800c68e:	4639      	mov	r1, r7
 800c690:	f7f3 ffca 	bl	8000628 <__aeabi_dmul>
 800c694:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c698:	4606      	mov	r6, r0
 800c69a:	460f      	mov	r7, r1
 800c69c:	e70f      	b.n	800c4be <__kernel_rem_pio2+0x2be>
 800c69e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c6a2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c6a6:	f7f3 ffbf 	bl	8000628 <__aeabi_dmul>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6b2:	f7f3 fe03 	bl	80002bc <__adddf3>
 800c6b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c6ba:	f108 0801 	add.w	r8, r8, #1
 800c6be:	9b02      	ldr	r3, [sp, #8]
 800c6c0:	4598      	cmp	r8, r3
 800c6c2:	dc01      	bgt.n	800c6c8 <__kernel_rem_pio2+0x4c8>
 800c6c4:	45b8      	cmp	r8, r7
 800c6c6:	ddea      	ble.n	800c69e <__kernel_rem_pio2+0x49e>
 800c6c8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c6cc:	ab4a      	add	r3, sp, #296	; 0x128
 800c6ce:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c6d2:	ed87 7b00 	vstr	d7, [r7]
 800c6d6:	3e01      	subs	r6, #1
 800c6d8:	e6f8      	b.n	800c4cc <__kernel_rem_pio2+0x2cc>
 800c6da:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c6dc:	2b02      	cmp	r3, #2
 800c6de:	dc0b      	bgt.n	800c6f8 <__kernel_rem_pio2+0x4f8>
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	dc35      	bgt.n	800c750 <__kernel_rem_pio2+0x550>
 800c6e4:	d059      	beq.n	800c79a <__kernel_rem_pio2+0x59a>
 800c6e6:	9b04      	ldr	r3, [sp, #16]
 800c6e8:	f003 0007 	and.w	r0, r3, #7
 800c6ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c6f0:	ecbd 8b02 	vpop	{d8}
 800c6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c6fa:	2b03      	cmp	r3, #3
 800c6fc:	d1f3      	bne.n	800c6e6 <__kernel_rem_pio2+0x4e6>
 800c6fe:	ab4a      	add	r3, sp, #296	; 0x128
 800c700:	4423      	add	r3, r4
 800c702:	9306      	str	r3, [sp, #24]
 800c704:	461c      	mov	r4, r3
 800c706:	469a      	mov	sl, r3
 800c708:	9502      	str	r5, [sp, #8]
 800c70a:	9b02      	ldr	r3, [sp, #8]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f1aa 0a08 	sub.w	sl, sl, #8
 800c712:	dc6b      	bgt.n	800c7ec <__kernel_rem_pio2+0x5ec>
 800c714:	46aa      	mov	sl, r5
 800c716:	f1ba 0f01 	cmp.w	sl, #1
 800c71a:	f1a4 0408 	sub.w	r4, r4, #8
 800c71e:	f300 8085 	bgt.w	800c82c <__kernel_rem_pio2+0x62c>
 800c722:	9c06      	ldr	r4, [sp, #24]
 800c724:	2000      	movs	r0, #0
 800c726:	3408      	adds	r4, #8
 800c728:	2100      	movs	r1, #0
 800c72a:	2d01      	cmp	r5, #1
 800c72c:	f300 809d 	bgt.w	800c86a <__kernel_rem_pio2+0x66a>
 800c730:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c734:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800c738:	f1bb 0f00 	cmp.w	fp, #0
 800c73c:	f040 809b 	bne.w	800c876 <__kernel_rem_pio2+0x676>
 800c740:	9b01      	ldr	r3, [sp, #4]
 800c742:	e9c3 5600 	strd	r5, r6, [r3]
 800c746:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c74a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c74e:	e7ca      	b.n	800c6e6 <__kernel_rem_pio2+0x4e6>
 800c750:	3408      	adds	r4, #8
 800c752:	ab4a      	add	r3, sp, #296	; 0x128
 800c754:	441c      	add	r4, r3
 800c756:	462e      	mov	r6, r5
 800c758:	2000      	movs	r0, #0
 800c75a:	2100      	movs	r1, #0
 800c75c:	2e00      	cmp	r6, #0
 800c75e:	da36      	bge.n	800c7ce <__kernel_rem_pio2+0x5ce>
 800c760:	f1bb 0f00 	cmp.w	fp, #0
 800c764:	d039      	beq.n	800c7da <__kernel_rem_pio2+0x5da>
 800c766:	4602      	mov	r2, r0
 800c768:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c76c:	9c01      	ldr	r4, [sp, #4]
 800c76e:	e9c4 2300 	strd	r2, r3, [r4]
 800c772:	4602      	mov	r2, r0
 800c774:	460b      	mov	r3, r1
 800c776:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c77a:	f7f3 fd9d 	bl	80002b8 <__aeabi_dsub>
 800c77e:	ae4c      	add	r6, sp, #304	; 0x130
 800c780:	2401      	movs	r4, #1
 800c782:	42a5      	cmp	r5, r4
 800c784:	da2c      	bge.n	800c7e0 <__kernel_rem_pio2+0x5e0>
 800c786:	f1bb 0f00 	cmp.w	fp, #0
 800c78a:	d002      	beq.n	800c792 <__kernel_rem_pio2+0x592>
 800c78c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c790:	4619      	mov	r1, r3
 800c792:	9b01      	ldr	r3, [sp, #4]
 800c794:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c798:	e7a5      	b.n	800c6e6 <__kernel_rem_pio2+0x4e6>
 800c79a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800c79e:	eb0d 0403 	add.w	r4, sp, r3
 800c7a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	2d00      	cmp	r5, #0
 800c7ac:	da09      	bge.n	800c7c2 <__kernel_rem_pio2+0x5c2>
 800c7ae:	f1bb 0f00 	cmp.w	fp, #0
 800c7b2:	d002      	beq.n	800c7ba <__kernel_rem_pio2+0x5ba>
 800c7b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	9b01      	ldr	r3, [sp, #4]
 800c7bc:	e9c3 0100 	strd	r0, r1, [r3]
 800c7c0:	e791      	b.n	800c6e6 <__kernel_rem_pio2+0x4e6>
 800c7c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c7c6:	f7f3 fd79 	bl	80002bc <__adddf3>
 800c7ca:	3d01      	subs	r5, #1
 800c7cc:	e7ed      	b.n	800c7aa <__kernel_rem_pio2+0x5aa>
 800c7ce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c7d2:	f7f3 fd73 	bl	80002bc <__adddf3>
 800c7d6:	3e01      	subs	r6, #1
 800c7d8:	e7c0      	b.n	800c75c <__kernel_rem_pio2+0x55c>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	460b      	mov	r3, r1
 800c7de:	e7c5      	b.n	800c76c <__kernel_rem_pio2+0x56c>
 800c7e0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c7e4:	f7f3 fd6a 	bl	80002bc <__adddf3>
 800c7e8:	3401      	adds	r4, #1
 800c7ea:	e7ca      	b.n	800c782 <__kernel_rem_pio2+0x582>
 800c7ec:	e9da 8900 	ldrd	r8, r9, [sl]
 800c7f0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c7f4:	9b02      	ldr	r3, [sp, #8]
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	9302      	str	r3, [sp, #8]
 800c7fa:	4632      	mov	r2, r6
 800c7fc:	463b      	mov	r3, r7
 800c7fe:	4640      	mov	r0, r8
 800c800:	4649      	mov	r1, r9
 800c802:	f7f3 fd5b 	bl	80002bc <__adddf3>
 800c806:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	4640      	mov	r0, r8
 800c810:	4649      	mov	r1, r9
 800c812:	f7f3 fd51 	bl	80002b8 <__aeabi_dsub>
 800c816:	4632      	mov	r2, r6
 800c818:	463b      	mov	r3, r7
 800c81a:	f7f3 fd4f 	bl	80002bc <__adddf3>
 800c81e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800c822:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c826:	ed8a 7b00 	vstr	d7, [sl]
 800c82a:	e76e      	b.n	800c70a <__kernel_rem_pio2+0x50a>
 800c82c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c830:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c834:	4640      	mov	r0, r8
 800c836:	4632      	mov	r2, r6
 800c838:	463b      	mov	r3, r7
 800c83a:	4649      	mov	r1, r9
 800c83c:	f7f3 fd3e 	bl	80002bc <__adddf3>
 800c840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c844:	4602      	mov	r2, r0
 800c846:	460b      	mov	r3, r1
 800c848:	4640      	mov	r0, r8
 800c84a:	4649      	mov	r1, r9
 800c84c:	f7f3 fd34 	bl	80002b8 <__aeabi_dsub>
 800c850:	4632      	mov	r2, r6
 800c852:	463b      	mov	r3, r7
 800c854:	f7f3 fd32 	bl	80002bc <__adddf3>
 800c858:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c85c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c860:	ed84 7b00 	vstr	d7, [r4]
 800c864:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c868:	e755      	b.n	800c716 <__kernel_rem_pio2+0x516>
 800c86a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c86e:	f7f3 fd25 	bl	80002bc <__adddf3>
 800c872:	3d01      	subs	r5, #1
 800c874:	e759      	b.n	800c72a <__kernel_rem_pio2+0x52a>
 800c876:	9b01      	ldr	r3, [sp, #4]
 800c878:	9a01      	ldr	r2, [sp, #4]
 800c87a:	601d      	str	r5, [r3, #0]
 800c87c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c880:	605c      	str	r4, [r3, #4]
 800c882:	609f      	str	r7, [r3, #8]
 800c884:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c888:	60d3      	str	r3, [r2, #12]
 800c88a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c88e:	6110      	str	r0, [r2, #16]
 800c890:	6153      	str	r3, [r2, #20]
 800c892:	e728      	b.n	800c6e6 <__kernel_rem_pio2+0x4e6>
 800c894:	41700000 	.word	0x41700000
 800c898:	3e700000 	.word	0x3e700000
 800c89c:	00000000 	.word	0x00000000

0800c8a0 <__kernel_sin>:
 800c8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a4:	ed2d 8b04 	vpush	{d8-d9}
 800c8a8:	eeb0 8a41 	vmov.f32	s16, s2
 800c8ac:	eef0 8a61 	vmov.f32	s17, s3
 800c8b0:	ec55 4b10 	vmov	r4, r5, d0
 800c8b4:	b083      	sub	sp, #12
 800c8b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c8ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c8be:	9001      	str	r0, [sp, #4]
 800c8c0:	da06      	bge.n	800c8d0 <__kernel_sin+0x30>
 800c8c2:	ee10 0a10 	vmov	r0, s0
 800c8c6:	4629      	mov	r1, r5
 800c8c8:	f7f4 f95e 	bl	8000b88 <__aeabi_d2iz>
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	d051      	beq.n	800c974 <__kernel_sin+0xd4>
 800c8d0:	4622      	mov	r2, r4
 800c8d2:	462b      	mov	r3, r5
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	f7f3 fea6 	bl	8000628 <__aeabi_dmul>
 800c8dc:	4682      	mov	sl, r0
 800c8de:	468b      	mov	fp, r1
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	f7f3 fe9e 	bl	8000628 <__aeabi_dmul>
 800c8ec:	a341      	add	r3, pc, #260	; (adr r3, 800c9f4 <__kernel_sin+0x154>)
 800c8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f2:	4680      	mov	r8, r0
 800c8f4:	4689      	mov	r9, r1
 800c8f6:	4650      	mov	r0, sl
 800c8f8:	4659      	mov	r1, fp
 800c8fa:	f7f3 fe95 	bl	8000628 <__aeabi_dmul>
 800c8fe:	a33f      	add	r3, pc, #252	; (adr r3, 800c9fc <__kernel_sin+0x15c>)
 800c900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c904:	f7f3 fcd8 	bl	80002b8 <__aeabi_dsub>
 800c908:	4652      	mov	r2, sl
 800c90a:	465b      	mov	r3, fp
 800c90c:	f7f3 fe8c 	bl	8000628 <__aeabi_dmul>
 800c910:	a33c      	add	r3, pc, #240	; (adr r3, 800ca04 <__kernel_sin+0x164>)
 800c912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c916:	f7f3 fcd1 	bl	80002bc <__adddf3>
 800c91a:	4652      	mov	r2, sl
 800c91c:	465b      	mov	r3, fp
 800c91e:	f7f3 fe83 	bl	8000628 <__aeabi_dmul>
 800c922:	a33a      	add	r3, pc, #232	; (adr r3, 800ca0c <__kernel_sin+0x16c>)
 800c924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c928:	f7f3 fcc6 	bl	80002b8 <__aeabi_dsub>
 800c92c:	4652      	mov	r2, sl
 800c92e:	465b      	mov	r3, fp
 800c930:	f7f3 fe7a 	bl	8000628 <__aeabi_dmul>
 800c934:	a337      	add	r3, pc, #220	; (adr r3, 800ca14 <__kernel_sin+0x174>)
 800c936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93a:	f7f3 fcbf 	bl	80002bc <__adddf3>
 800c93e:	9b01      	ldr	r3, [sp, #4]
 800c940:	4606      	mov	r6, r0
 800c942:	460f      	mov	r7, r1
 800c944:	b9eb      	cbnz	r3, 800c982 <__kernel_sin+0xe2>
 800c946:	4602      	mov	r2, r0
 800c948:	460b      	mov	r3, r1
 800c94a:	4650      	mov	r0, sl
 800c94c:	4659      	mov	r1, fp
 800c94e:	f7f3 fe6b 	bl	8000628 <__aeabi_dmul>
 800c952:	a325      	add	r3, pc, #148	; (adr r3, 800c9e8 <__kernel_sin+0x148>)
 800c954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c958:	f7f3 fcae 	bl	80002b8 <__aeabi_dsub>
 800c95c:	4642      	mov	r2, r8
 800c95e:	464b      	mov	r3, r9
 800c960:	f7f3 fe62 	bl	8000628 <__aeabi_dmul>
 800c964:	4602      	mov	r2, r0
 800c966:	460b      	mov	r3, r1
 800c968:	4620      	mov	r0, r4
 800c96a:	4629      	mov	r1, r5
 800c96c:	f7f3 fca6 	bl	80002bc <__adddf3>
 800c970:	4604      	mov	r4, r0
 800c972:	460d      	mov	r5, r1
 800c974:	ec45 4b10 	vmov	d0, r4, r5
 800c978:	b003      	add	sp, #12
 800c97a:	ecbd 8b04 	vpop	{d8-d9}
 800c97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c982:	4b1b      	ldr	r3, [pc, #108]	; (800c9f0 <__kernel_sin+0x150>)
 800c984:	ec51 0b18 	vmov	r0, r1, d8
 800c988:	2200      	movs	r2, #0
 800c98a:	f7f3 fe4d 	bl	8000628 <__aeabi_dmul>
 800c98e:	4632      	mov	r2, r6
 800c990:	ec41 0b19 	vmov	d9, r0, r1
 800c994:	463b      	mov	r3, r7
 800c996:	4640      	mov	r0, r8
 800c998:	4649      	mov	r1, r9
 800c99a:	f7f3 fe45 	bl	8000628 <__aeabi_dmul>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	ec51 0b19 	vmov	r0, r1, d9
 800c9a6:	f7f3 fc87 	bl	80002b8 <__aeabi_dsub>
 800c9aa:	4652      	mov	r2, sl
 800c9ac:	465b      	mov	r3, fp
 800c9ae:	f7f3 fe3b 	bl	8000628 <__aeabi_dmul>
 800c9b2:	ec53 2b18 	vmov	r2, r3, d8
 800c9b6:	f7f3 fc7f 	bl	80002b8 <__aeabi_dsub>
 800c9ba:	a30b      	add	r3, pc, #44	; (adr r3, 800c9e8 <__kernel_sin+0x148>)
 800c9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c0:	4606      	mov	r6, r0
 800c9c2:	460f      	mov	r7, r1
 800c9c4:	4640      	mov	r0, r8
 800c9c6:	4649      	mov	r1, r9
 800c9c8:	f7f3 fe2e 	bl	8000628 <__aeabi_dmul>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	4639      	mov	r1, r7
 800c9d4:	f7f3 fc72 	bl	80002bc <__adddf3>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	4620      	mov	r0, r4
 800c9de:	4629      	mov	r1, r5
 800c9e0:	f7f3 fc6a 	bl	80002b8 <__aeabi_dsub>
 800c9e4:	e7c4      	b.n	800c970 <__kernel_sin+0xd0>
 800c9e6:	bf00      	nop
 800c9e8:	55555549 	.word	0x55555549
 800c9ec:	3fc55555 	.word	0x3fc55555
 800c9f0:	3fe00000 	.word	0x3fe00000
 800c9f4:	5acfd57c 	.word	0x5acfd57c
 800c9f8:	3de5d93a 	.word	0x3de5d93a
 800c9fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800ca00:	3e5ae5e6 	.word	0x3e5ae5e6
 800ca04:	57b1fe7d 	.word	0x57b1fe7d
 800ca08:	3ec71de3 	.word	0x3ec71de3
 800ca0c:	19c161d5 	.word	0x19c161d5
 800ca10:	3f2a01a0 	.word	0x3f2a01a0
 800ca14:	1110f8a6 	.word	0x1110f8a6
 800ca18:	3f811111 	.word	0x3f811111

0800ca1c <with_errno>:
 800ca1c:	b570      	push	{r4, r5, r6, lr}
 800ca1e:	4604      	mov	r4, r0
 800ca20:	460d      	mov	r5, r1
 800ca22:	4616      	mov	r6, r2
 800ca24:	f7fa fd04 	bl	8007430 <__errno>
 800ca28:	4629      	mov	r1, r5
 800ca2a:	6006      	str	r6, [r0, #0]
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	bd70      	pop	{r4, r5, r6, pc}

0800ca30 <xflow>:
 800ca30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca32:	4614      	mov	r4, r2
 800ca34:	461d      	mov	r5, r3
 800ca36:	b108      	cbz	r0, 800ca3c <xflow+0xc>
 800ca38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ca3c:	e9cd 2300 	strd	r2, r3, [sp]
 800ca40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca44:	4620      	mov	r0, r4
 800ca46:	4629      	mov	r1, r5
 800ca48:	f7f3 fdee 	bl	8000628 <__aeabi_dmul>
 800ca4c:	2222      	movs	r2, #34	; 0x22
 800ca4e:	b003      	add	sp, #12
 800ca50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca54:	f7ff bfe2 	b.w	800ca1c <with_errno>

0800ca58 <__math_uflow>:
 800ca58:	b508      	push	{r3, lr}
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ca60:	f7ff ffe6 	bl	800ca30 <xflow>
 800ca64:	ec41 0b10 	vmov	d0, r0, r1
 800ca68:	bd08      	pop	{r3, pc}

0800ca6a <__math_oflow>:
 800ca6a:	b508      	push	{r3, lr}
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ca72:	f7ff ffdd 	bl	800ca30 <xflow>
 800ca76:	ec41 0b10 	vmov	d0, r0, r1
 800ca7a:	bd08      	pop	{r3, pc}
 800ca7c:	0000      	movs	r0, r0
	...

0800ca80 <atan>:
 800ca80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca84:	ec55 4b10 	vmov	r4, r5, d0
 800ca88:	4bc3      	ldr	r3, [pc, #780]	; (800cd98 <atan+0x318>)
 800ca8a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ca8e:	429e      	cmp	r6, r3
 800ca90:	46ab      	mov	fp, r5
 800ca92:	dd18      	ble.n	800cac6 <atan+0x46>
 800ca94:	4bc1      	ldr	r3, [pc, #772]	; (800cd9c <atan+0x31c>)
 800ca96:	429e      	cmp	r6, r3
 800ca98:	dc01      	bgt.n	800ca9e <atan+0x1e>
 800ca9a:	d109      	bne.n	800cab0 <atan+0x30>
 800ca9c:	b144      	cbz	r4, 800cab0 <atan+0x30>
 800ca9e:	4622      	mov	r2, r4
 800caa0:	462b      	mov	r3, r5
 800caa2:	4620      	mov	r0, r4
 800caa4:	4629      	mov	r1, r5
 800caa6:	f7f3 fc09 	bl	80002bc <__adddf3>
 800caaa:	4604      	mov	r4, r0
 800caac:	460d      	mov	r5, r1
 800caae:	e006      	b.n	800cabe <atan+0x3e>
 800cab0:	f1bb 0f00 	cmp.w	fp, #0
 800cab4:	f300 8131 	bgt.w	800cd1a <atan+0x29a>
 800cab8:	a59b      	add	r5, pc, #620	; (adr r5, 800cd28 <atan+0x2a8>)
 800caba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cabe:	ec45 4b10 	vmov	d0, r4, r5
 800cac2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac6:	4bb6      	ldr	r3, [pc, #728]	; (800cda0 <atan+0x320>)
 800cac8:	429e      	cmp	r6, r3
 800caca:	dc14      	bgt.n	800caf6 <atan+0x76>
 800cacc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cad0:	429e      	cmp	r6, r3
 800cad2:	dc0d      	bgt.n	800caf0 <atan+0x70>
 800cad4:	a396      	add	r3, pc, #600	; (adr r3, 800cd30 <atan+0x2b0>)
 800cad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cada:	ee10 0a10 	vmov	r0, s0
 800cade:	4629      	mov	r1, r5
 800cae0:	f7f3 fbec 	bl	80002bc <__adddf3>
 800cae4:	4baf      	ldr	r3, [pc, #700]	; (800cda4 <atan+0x324>)
 800cae6:	2200      	movs	r2, #0
 800cae8:	f7f4 f82e 	bl	8000b48 <__aeabi_dcmpgt>
 800caec:	2800      	cmp	r0, #0
 800caee:	d1e6      	bne.n	800cabe <atan+0x3e>
 800caf0:	f04f 3aff 	mov.w	sl, #4294967295
 800caf4:	e02b      	b.n	800cb4e <atan+0xce>
 800caf6:	f000 f963 	bl	800cdc0 <fabs>
 800cafa:	4bab      	ldr	r3, [pc, #684]	; (800cda8 <atan+0x328>)
 800cafc:	429e      	cmp	r6, r3
 800cafe:	ec55 4b10 	vmov	r4, r5, d0
 800cb02:	f300 80bf 	bgt.w	800cc84 <atan+0x204>
 800cb06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cb0a:	429e      	cmp	r6, r3
 800cb0c:	f300 80a0 	bgt.w	800cc50 <atan+0x1d0>
 800cb10:	ee10 2a10 	vmov	r2, s0
 800cb14:	ee10 0a10 	vmov	r0, s0
 800cb18:	462b      	mov	r3, r5
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	f7f3 fbce 	bl	80002bc <__adddf3>
 800cb20:	4ba0      	ldr	r3, [pc, #640]	; (800cda4 <atan+0x324>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	f7f3 fbc8 	bl	80002b8 <__aeabi_dsub>
 800cb28:	2200      	movs	r2, #0
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	460f      	mov	r7, r1
 800cb2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb32:	4620      	mov	r0, r4
 800cb34:	4629      	mov	r1, r5
 800cb36:	f7f3 fbc1 	bl	80002bc <__adddf3>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	4630      	mov	r0, r6
 800cb40:	4639      	mov	r1, r7
 800cb42:	f7f3 fe9b 	bl	800087c <__aeabi_ddiv>
 800cb46:	f04f 0a00 	mov.w	sl, #0
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	460d      	mov	r5, r1
 800cb4e:	4622      	mov	r2, r4
 800cb50:	462b      	mov	r3, r5
 800cb52:	4620      	mov	r0, r4
 800cb54:	4629      	mov	r1, r5
 800cb56:	f7f3 fd67 	bl	8000628 <__aeabi_dmul>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	460b      	mov	r3, r1
 800cb5e:	4680      	mov	r8, r0
 800cb60:	4689      	mov	r9, r1
 800cb62:	f7f3 fd61 	bl	8000628 <__aeabi_dmul>
 800cb66:	a374      	add	r3, pc, #464	; (adr r3, 800cd38 <atan+0x2b8>)
 800cb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6c:	4606      	mov	r6, r0
 800cb6e:	460f      	mov	r7, r1
 800cb70:	f7f3 fd5a 	bl	8000628 <__aeabi_dmul>
 800cb74:	a372      	add	r3, pc, #456	; (adr r3, 800cd40 <atan+0x2c0>)
 800cb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7a:	f7f3 fb9f 	bl	80002bc <__adddf3>
 800cb7e:	4632      	mov	r2, r6
 800cb80:	463b      	mov	r3, r7
 800cb82:	f7f3 fd51 	bl	8000628 <__aeabi_dmul>
 800cb86:	a370      	add	r3, pc, #448	; (adr r3, 800cd48 <atan+0x2c8>)
 800cb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8c:	f7f3 fb96 	bl	80002bc <__adddf3>
 800cb90:	4632      	mov	r2, r6
 800cb92:	463b      	mov	r3, r7
 800cb94:	f7f3 fd48 	bl	8000628 <__aeabi_dmul>
 800cb98:	a36d      	add	r3, pc, #436	; (adr r3, 800cd50 <atan+0x2d0>)
 800cb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9e:	f7f3 fb8d 	bl	80002bc <__adddf3>
 800cba2:	4632      	mov	r2, r6
 800cba4:	463b      	mov	r3, r7
 800cba6:	f7f3 fd3f 	bl	8000628 <__aeabi_dmul>
 800cbaa:	a36b      	add	r3, pc, #428	; (adr r3, 800cd58 <atan+0x2d8>)
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	f7f3 fb84 	bl	80002bc <__adddf3>
 800cbb4:	4632      	mov	r2, r6
 800cbb6:	463b      	mov	r3, r7
 800cbb8:	f7f3 fd36 	bl	8000628 <__aeabi_dmul>
 800cbbc:	a368      	add	r3, pc, #416	; (adr r3, 800cd60 <atan+0x2e0>)
 800cbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc2:	f7f3 fb7b 	bl	80002bc <__adddf3>
 800cbc6:	4642      	mov	r2, r8
 800cbc8:	464b      	mov	r3, r9
 800cbca:	f7f3 fd2d 	bl	8000628 <__aeabi_dmul>
 800cbce:	a366      	add	r3, pc, #408	; (adr r3, 800cd68 <atan+0x2e8>)
 800cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd4:	4680      	mov	r8, r0
 800cbd6:	4689      	mov	r9, r1
 800cbd8:	4630      	mov	r0, r6
 800cbda:	4639      	mov	r1, r7
 800cbdc:	f7f3 fd24 	bl	8000628 <__aeabi_dmul>
 800cbe0:	a363      	add	r3, pc, #396	; (adr r3, 800cd70 <atan+0x2f0>)
 800cbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe6:	f7f3 fb67 	bl	80002b8 <__aeabi_dsub>
 800cbea:	4632      	mov	r2, r6
 800cbec:	463b      	mov	r3, r7
 800cbee:	f7f3 fd1b 	bl	8000628 <__aeabi_dmul>
 800cbf2:	a361      	add	r3, pc, #388	; (adr r3, 800cd78 <atan+0x2f8>)
 800cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf8:	f7f3 fb5e 	bl	80002b8 <__aeabi_dsub>
 800cbfc:	4632      	mov	r2, r6
 800cbfe:	463b      	mov	r3, r7
 800cc00:	f7f3 fd12 	bl	8000628 <__aeabi_dmul>
 800cc04:	a35e      	add	r3, pc, #376	; (adr r3, 800cd80 <atan+0x300>)
 800cc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0a:	f7f3 fb55 	bl	80002b8 <__aeabi_dsub>
 800cc0e:	4632      	mov	r2, r6
 800cc10:	463b      	mov	r3, r7
 800cc12:	f7f3 fd09 	bl	8000628 <__aeabi_dmul>
 800cc16:	a35c      	add	r3, pc, #368	; (adr r3, 800cd88 <atan+0x308>)
 800cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1c:	f7f3 fb4c 	bl	80002b8 <__aeabi_dsub>
 800cc20:	4632      	mov	r2, r6
 800cc22:	463b      	mov	r3, r7
 800cc24:	f7f3 fd00 	bl	8000628 <__aeabi_dmul>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	4640      	mov	r0, r8
 800cc2e:	4649      	mov	r1, r9
 800cc30:	f7f3 fb44 	bl	80002bc <__adddf3>
 800cc34:	4622      	mov	r2, r4
 800cc36:	462b      	mov	r3, r5
 800cc38:	f7f3 fcf6 	bl	8000628 <__aeabi_dmul>
 800cc3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cc40:	4602      	mov	r2, r0
 800cc42:	460b      	mov	r3, r1
 800cc44:	d14b      	bne.n	800ccde <atan+0x25e>
 800cc46:	4620      	mov	r0, r4
 800cc48:	4629      	mov	r1, r5
 800cc4a:	f7f3 fb35 	bl	80002b8 <__aeabi_dsub>
 800cc4e:	e72c      	b.n	800caaa <atan+0x2a>
 800cc50:	ee10 0a10 	vmov	r0, s0
 800cc54:	4b53      	ldr	r3, [pc, #332]	; (800cda4 <atan+0x324>)
 800cc56:	2200      	movs	r2, #0
 800cc58:	4629      	mov	r1, r5
 800cc5a:	f7f3 fb2d 	bl	80002b8 <__aeabi_dsub>
 800cc5e:	4b51      	ldr	r3, [pc, #324]	; (800cda4 <atan+0x324>)
 800cc60:	4606      	mov	r6, r0
 800cc62:	460f      	mov	r7, r1
 800cc64:	2200      	movs	r2, #0
 800cc66:	4620      	mov	r0, r4
 800cc68:	4629      	mov	r1, r5
 800cc6a:	f7f3 fb27 	bl	80002bc <__adddf3>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	460b      	mov	r3, r1
 800cc72:	4630      	mov	r0, r6
 800cc74:	4639      	mov	r1, r7
 800cc76:	f7f3 fe01 	bl	800087c <__aeabi_ddiv>
 800cc7a:	f04f 0a01 	mov.w	sl, #1
 800cc7e:	4604      	mov	r4, r0
 800cc80:	460d      	mov	r5, r1
 800cc82:	e764      	b.n	800cb4e <atan+0xce>
 800cc84:	4b49      	ldr	r3, [pc, #292]	; (800cdac <atan+0x32c>)
 800cc86:	429e      	cmp	r6, r3
 800cc88:	da1d      	bge.n	800ccc6 <atan+0x246>
 800cc8a:	ee10 0a10 	vmov	r0, s0
 800cc8e:	4b48      	ldr	r3, [pc, #288]	; (800cdb0 <atan+0x330>)
 800cc90:	2200      	movs	r2, #0
 800cc92:	4629      	mov	r1, r5
 800cc94:	f7f3 fb10 	bl	80002b8 <__aeabi_dsub>
 800cc98:	4b45      	ldr	r3, [pc, #276]	; (800cdb0 <atan+0x330>)
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	460f      	mov	r7, r1
 800cc9e:	2200      	movs	r2, #0
 800cca0:	4620      	mov	r0, r4
 800cca2:	4629      	mov	r1, r5
 800cca4:	f7f3 fcc0 	bl	8000628 <__aeabi_dmul>
 800cca8:	4b3e      	ldr	r3, [pc, #248]	; (800cda4 <atan+0x324>)
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f7f3 fb06 	bl	80002bc <__adddf3>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	4639      	mov	r1, r7
 800ccb8:	f7f3 fde0 	bl	800087c <__aeabi_ddiv>
 800ccbc:	f04f 0a02 	mov.w	sl, #2
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	460d      	mov	r5, r1
 800ccc4:	e743      	b.n	800cb4e <atan+0xce>
 800ccc6:	462b      	mov	r3, r5
 800ccc8:	ee10 2a10 	vmov	r2, s0
 800cccc:	4939      	ldr	r1, [pc, #228]	; (800cdb4 <atan+0x334>)
 800ccce:	2000      	movs	r0, #0
 800ccd0:	f7f3 fdd4 	bl	800087c <__aeabi_ddiv>
 800ccd4:	f04f 0a03 	mov.w	sl, #3
 800ccd8:	4604      	mov	r4, r0
 800ccda:	460d      	mov	r5, r1
 800ccdc:	e737      	b.n	800cb4e <atan+0xce>
 800ccde:	4b36      	ldr	r3, [pc, #216]	; (800cdb8 <atan+0x338>)
 800cce0:	4e36      	ldr	r6, [pc, #216]	; (800cdbc <atan+0x33c>)
 800cce2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cce6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ccea:	e9da 2300 	ldrd	r2, r3, [sl]
 800ccee:	f7f3 fae3 	bl	80002b8 <__aeabi_dsub>
 800ccf2:	4622      	mov	r2, r4
 800ccf4:	462b      	mov	r3, r5
 800ccf6:	f7f3 fadf 	bl	80002b8 <__aeabi_dsub>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cd02:	f7f3 fad9 	bl	80002b8 <__aeabi_dsub>
 800cd06:	f1bb 0f00 	cmp.w	fp, #0
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	460d      	mov	r5, r1
 800cd0e:	f6bf aed6 	bge.w	800cabe <atan+0x3e>
 800cd12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd16:	461d      	mov	r5, r3
 800cd18:	e6d1      	b.n	800cabe <atan+0x3e>
 800cd1a:	a51d      	add	r5, pc, #116	; (adr r5, 800cd90 <atan+0x310>)
 800cd1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cd20:	e6cd      	b.n	800cabe <atan+0x3e>
 800cd22:	bf00      	nop
 800cd24:	f3af 8000 	nop.w
 800cd28:	54442d18 	.word	0x54442d18
 800cd2c:	bff921fb 	.word	0xbff921fb
 800cd30:	8800759c 	.word	0x8800759c
 800cd34:	7e37e43c 	.word	0x7e37e43c
 800cd38:	e322da11 	.word	0xe322da11
 800cd3c:	3f90ad3a 	.word	0x3f90ad3a
 800cd40:	24760deb 	.word	0x24760deb
 800cd44:	3fa97b4b 	.word	0x3fa97b4b
 800cd48:	a0d03d51 	.word	0xa0d03d51
 800cd4c:	3fb10d66 	.word	0x3fb10d66
 800cd50:	c54c206e 	.word	0xc54c206e
 800cd54:	3fb745cd 	.word	0x3fb745cd
 800cd58:	920083ff 	.word	0x920083ff
 800cd5c:	3fc24924 	.word	0x3fc24924
 800cd60:	5555550d 	.word	0x5555550d
 800cd64:	3fd55555 	.word	0x3fd55555
 800cd68:	2c6a6c2f 	.word	0x2c6a6c2f
 800cd6c:	bfa2b444 	.word	0xbfa2b444
 800cd70:	52defd9a 	.word	0x52defd9a
 800cd74:	3fadde2d 	.word	0x3fadde2d
 800cd78:	af749a6d 	.word	0xaf749a6d
 800cd7c:	3fb3b0f2 	.word	0x3fb3b0f2
 800cd80:	fe231671 	.word	0xfe231671
 800cd84:	3fbc71c6 	.word	0x3fbc71c6
 800cd88:	9998ebc4 	.word	0x9998ebc4
 800cd8c:	3fc99999 	.word	0x3fc99999
 800cd90:	54442d18 	.word	0x54442d18
 800cd94:	3ff921fb 	.word	0x3ff921fb
 800cd98:	440fffff 	.word	0x440fffff
 800cd9c:	7ff00000 	.word	0x7ff00000
 800cda0:	3fdbffff 	.word	0x3fdbffff
 800cda4:	3ff00000 	.word	0x3ff00000
 800cda8:	3ff2ffff 	.word	0x3ff2ffff
 800cdac:	40038000 	.word	0x40038000
 800cdb0:	3ff80000 	.word	0x3ff80000
 800cdb4:	bff00000 	.word	0xbff00000
 800cdb8:	0800d8c0 	.word	0x0800d8c0
 800cdbc:	0800d8a0 	.word	0x0800d8a0

0800cdc0 <fabs>:
 800cdc0:	ec51 0b10 	vmov	r0, r1, d0
 800cdc4:	ee10 2a10 	vmov	r2, s0
 800cdc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cdcc:	ec43 2b10 	vmov	d0, r2, r3
 800cdd0:	4770      	bx	lr

0800cdd2 <finite>:
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	ed8d 0b00 	vstr	d0, [sp]
 800cdd8:	9801      	ldr	r0, [sp, #4]
 800cdda:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cdde:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cde2:	0fc0      	lsrs	r0, r0, #31
 800cde4:	b002      	add	sp, #8
 800cde6:	4770      	bx	lr

0800cde8 <floor>:
 800cde8:	ec51 0b10 	vmov	r0, r1, d0
 800cdec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdf0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cdf4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cdf8:	2e13      	cmp	r6, #19
 800cdfa:	ee10 5a10 	vmov	r5, s0
 800cdfe:	ee10 8a10 	vmov	r8, s0
 800ce02:	460c      	mov	r4, r1
 800ce04:	dc32      	bgt.n	800ce6c <floor+0x84>
 800ce06:	2e00      	cmp	r6, #0
 800ce08:	da14      	bge.n	800ce34 <floor+0x4c>
 800ce0a:	a333      	add	r3, pc, #204	; (adr r3, 800ced8 <floor+0xf0>)
 800ce0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce10:	f7f3 fa54 	bl	80002bc <__adddf3>
 800ce14:	2200      	movs	r2, #0
 800ce16:	2300      	movs	r3, #0
 800ce18:	f7f3 fe96 	bl	8000b48 <__aeabi_dcmpgt>
 800ce1c:	b138      	cbz	r0, 800ce2e <floor+0x46>
 800ce1e:	2c00      	cmp	r4, #0
 800ce20:	da57      	bge.n	800ced2 <floor+0xea>
 800ce22:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ce26:	431d      	orrs	r5, r3
 800ce28:	d001      	beq.n	800ce2e <floor+0x46>
 800ce2a:	4c2d      	ldr	r4, [pc, #180]	; (800cee0 <floor+0xf8>)
 800ce2c:	2500      	movs	r5, #0
 800ce2e:	4621      	mov	r1, r4
 800ce30:	4628      	mov	r0, r5
 800ce32:	e025      	b.n	800ce80 <floor+0x98>
 800ce34:	4f2b      	ldr	r7, [pc, #172]	; (800cee4 <floor+0xfc>)
 800ce36:	4137      	asrs	r7, r6
 800ce38:	ea01 0307 	and.w	r3, r1, r7
 800ce3c:	4303      	orrs	r3, r0
 800ce3e:	d01f      	beq.n	800ce80 <floor+0x98>
 800ce40:	a325      	add	r3, pc, #148	; (adr r3, 800ced8 <floor+0xf0>)
 800ce42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce46:	f7f3 fa39 	bl	80002bc <__adddf3>
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	f7f3 fe7b 	bl	8000b48 <__aeabi_dcmpgt>
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d0eb      	beq.n	800ce2e <floor+0x46>
 800ce56:	2c00      	cmp	r4, #0
 800ce58:	bfbe      	ittt	lt
 800ce5a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ce5e:	fa43 f606 	asrlt.w	r6, r3, r6
 800ce62:	19a4      	addlt	r4, r4, r6
 800ce64:	ea24 0407 	bic.w	r4, r4, r7
 800ce68:	2500      	movs	r5, #0
 800ce6a:	e7e0      	b.n	800ce2e <floor+0x46>
 800ce6c:	2e33      	cmp	r6, #51	; 0x33
 800ce6e:	dd0b      	ble.n	800ce88 <floor+0xa0>
 800ce70:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ce74:	d104      	bne.n	800ce80 <floor+0x98>
 800ce76:	ee10 2a10 	vmov	r2, s0
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	f7f3 fa1e 	bl	80002bc <__adddf3>
 800ce80:	ec41 0b10 	vmov	d0, r0, r1
 800ce84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce88:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ce8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce90:	fa23 f707 	lsr.w	r7, r3, r7
 800ce94:	4207      	tst	r7, r0
 800ce96:	d0f3      	beq.n	800ce80 <floor+0x98>
 800ce98:	a30f      	add	r3, pc, #60	; (adr r3, 800ced8 <floor+0xf0>)
 800ce9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9e:	f7f3 fa0d 	bl	80002bc <__adddf3>
 800cea2:	2200      	movs	r2, #0
 800cea4:	2300      	movs	r3, #0
 800cea6:	f7f3 fe4f 	bl	8000b48 <__aeabi_dcmpgt>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d0bf      	beq.n	800ce2e <floor+0x46>
 800ceae:	2c00      	cmp	r4, #0
 800ceb0:	da02      	bge.n	800ceb8 <floor+0xd0>
 800ceb2:	2e14      	cmp	r6, #20
 800ceb4:	d103      	bne.n	800cebe <floor+0xd6>
 800ceb6:	3401      	adds	r4, #1
 800ceb8:	ea25 0507 	bic.w	r5, r5, r7
 800cebc:	e7b7      	b.n	800ce2e <floor+0x46>
 800cebe:	2301      	movs	r3, #1
 800cec0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cec4:	fa03 f606 	lsl.w	r6, r3, r6
 800cec8:	4435      	add	r5, r6
 800ceca:	4545      	cmp	r5, r8
 800cecc:	bf38      	it	cc
 800cece:	18e4      	addcc	r4, r4, r3
 800ced0:	e7f2      	b.n	800ceb8 <floor+0xd0>
 800ced2:	2500      	movs	r5, #0
 800ced4:	462c      	mov	r4, r5
 800ced6:	e7aa      	b.n	800ce2e <floor+0x46>
 800ced8:	8800759c 	.word	0x8800759c
 800cedc:	7e37e43c 	.word	0x7e37e43c
 800cee0:	bff00000 	.word	0xbff00000
 800cee4:	000fffff 	.word	0x000fffff

0800cee8 <scalbn>:
 800cee8:	b570      	push	{r4, r5, r6, lr}
 800ceea:	ec55 4b10 	vmov	r4, r5, d0
 800ceee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cef2:	4606      	mov	r6, r0
 800cef4:	462b      	mov	r3, r5
 800cef6:	b99a      	cbnz	r2, 800cf20 <scalbn+0x38>
 800cef8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cefc:	4323      	orrs	r3, r4
 800cefe:	d036      	beq.n	800cf6e <scalbn+0x86>
 800cf00:	4b39      	ldr	r3, [pc, #228]	; (800cfe8 <scalbn+0x100>)
 800cf02:	4629      	mov	r1, r5
 800cf04:	ee10 0a10 	vmov	r0, s0
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f7f3 fb8d 	bl	8000628 <__aeabi_dmul>
 800cf0e:	4b37      	ldr	r3, [pc, #220]	; (800cfec <scalbn+0x104>)
 800cf10:	429e      	cmp	r6, r3
 800cf12:	4604      	mov	r4, r0
 800cf14:	460d      	mov	r5, r1
 800cf16:	da10      	bge.n	800cf3a <scalbn+0x52>
 800cf18:	a32b      	add	r3, pc, #172	; (adr r3, 800cfc8 <scalbn+0xe0>)
 800cf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1e:	e03a      	b.n	800cf96 <scalbn+0xae>
 800cf20:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cf24:	428a      	cmp	r2, r1
 800cf26:	d10c      	bne.n	800cf42 <scalbn+0x5a>
 800cf28:	ee10 2a10 	vmov	r2, s0
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	4629      	mov	r1, r5
 800cf30:	f7f3 f9c4 	bl	80002bc <__adddf3>
 800cf34:	4604      	mov	r4, r0
 800cf36:	460d      	mov	r5, r1
 800cf38:	e019      	b.n	800cf6e <scalbn+0x86>
 800cf3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cf3e:	460b      	mov	r3, r1
 800cf40:	3a36      	subs	r2, #54	; 0x36
 800cf42:	4432      	add	r2, r6
 800cf44:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cf48:	428a      	cmp	r2, r1
 800cf4a:	dd08      	ble.n	800cf5e <scalbn+0x76>
 800cf4c:	2d00      	cmp	r5, #0
 800cf4e:	a120      	add	r1, pc, #128	; (adr r1, 800cfd0 <scalbn+0xe8>)
 800cf50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf54:	da1c      	bge.n	800cf90 <scalbn+0xa8>
 800cf56:	a120      	add	r1, pc, #128	; (adr r1, 800cfd8 <scalbn+0xf0>)
 800cf58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf5c:	e018      	b.n	800cf90 <scalbn+0xa8>
 800cf5e:	2a00      	cmp	r2, #0
 800cf60:	dd08      	ble.n	800cf74 <scalbn+0x8c>
 800cf62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cf66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cf6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cf6e:	ec45 4b10 	vmov	d0, r4, r5
 800cf72:	bd70      	pop	{r4, r5, r6, pc}
 800cf74:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cf78:	da19      	bge.n	800cfae <scalbn+0xc6>
 800cf7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cf7e:	429e      	cmp	r6, r3
 800cf80:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cf84:	dd0a      	ble.n	800cf9c <scalbn+0xb4>
 800cf86:	a112      	add	r1, pc, #72	; (adr r1, 800cfd0 <scalbn+0xe8>)
 800cf88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d1e2      	bne.n	800cf56 <scalbn+0x6e>
 800cf90:	a30f      	add	r3, pc, #60	; (adr r3, 800cfd0 <scalbn+0xe8>)
 800cf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf96:	f7f3 fb47 	bl	8000628 <__aeabi_dmul>
 800cf9a:	e7cb      	b.n	800cf34 <scalbn+0x4c>
 800cf9c:	a10a      	add	r1, pc, #40	; (adr r1, 800cfc8 <scalbn+0xe0>)
 800cf9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d0b8      	beq.n	800cf18 <scalbn+0x30>
 800cfa6:	a10e      	add	r1, pc, #56	; (adr r1, 800cfe0 <scalbn+0xf8>)
 800cfa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfac:	e7b4      	b.n	800cf18 <scalbn+0x30>
 800cfae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cfb2:	3236      	adds	r2, #54	; 0x36
 800cfb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cfb8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cfbc:	4620      	mov	r0, r4
 800cfbe:	4b0c      	ldr	r3, [pc, #48]	; (800cff0 <scalbn+0x108>)
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	e7e8      	b.n	800cf96 <scalbn+0xae>
 800cfc4:	f3af 8000 	nop.w
 800cfc8:	c2f8f359 	.word	0xc2f8f359
 800cfcc:	01a56e1f 	.word	0x01a56e1f
 800cfd0:	8800759c 	.word	0x8800759c
 800cfd4:	7e37e43c 	.word	0x7e37e43c
 800cfd8:	8800759c 	.word	0x8800759c
 800cfdc:	fe37e43c 	.word	0xfe37e43c
 800cfe0:	c2f8f359 	.word	0xc2f8f359
 800cfe4:	81a56e1f 	.word	0x81a56e1f
 800cfe8:	43500000 	.word	0x43500000
 800cfec:	ffff3cb0 	.word	0xffff3cb0
 800cff0:	3c900000 	.word	0x3c900000

0800cff4 <_sbrk>:
 800cff4:	4a04      	ldr	r2, [pc, #16]	; (800d008 <_sbrk+0x14>)
 800cff6:	6811      	ldr	r1, [r2, #0]
 800cff8:	4603      	mov	r3, r0
 800cffa:	b909      	cbnz	r1, 800d000 <_sbrk+0xc>
 800cffc:	4903      	ldr	r1, [pc, #12]	; (800d00c <_sbrk+0x18>)
 800cffe:	6011      	str	r1, [r2, #0]
 800d000:	6810      	ldr	r0, [r2, #0]
 800d002:	4403      	add	r3, r0
 800d004:	6013      	str	r3, [r2, #0]
 800d006:	4770      	bx	lr
 800d008:	20000644 	.word	0x20000644
 800d00c:	20000648 	.word	0x20000648

0800d010 <_init>:
 800d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d012:	bf00      	nop
 800d014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d016:	bc08      	pop	{r3}
 800d018:	469e      	mov	lr, r3
 800d01a:	4770      	bx	lr

0800d01c <_fini>:
 800d01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d01e:	bf00      	nop
 800d020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d022:	bc08      	pop	{r3}
 800d024:	469e      	mov	lr, r3
 800d026:	4770      	bx	lr
