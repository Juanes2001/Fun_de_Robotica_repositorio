
noFree_Oppy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a880  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  0800aa20  0800aa20  0001aa20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b140  0800b140  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b140  0800b140  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b140  0800b140  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b140  0800b140  0001b140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b144  0800b144  0001b144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200001e0  0800b328  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0800b328  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c9f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001554  00000000  00000000  00026eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  00028408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000580  00000000  00000000  00028a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001102c  00000000  00000000  00028fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ca2  00000000  00000000  00039fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058c0f  00000000  00000000  00041c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009a89d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d4c  00000000  00000000  0009a8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aa08 	.word	0x0800aa08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800aa08 	.word	0x0800aa08

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder

int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000c9c:	4b3a      	ldr	r3, [pc, #232]	; (8000d88 <main+0xf0>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a39      	ldr	r2, [pc, #228]	; (8000d88 <main+0xf0>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC_enableMaxFrequencies(RCC_100MHz);
 8000cac:	2008      	movs	r0, #8
 8000cae:	f003 fc91 	bl	80045d4 <RCC_enableMaxFrequencies>
	inSystem ();
 8000cb2:	f000 f88d 	bl	8000dd0 <inSystem>

	//Calculamos el setpoint en la que queremos que el robot controle la velocidad de cada motor
	velSetPoint = (0.00169*fixed_dutty + 0.0619);
 8000cb6:	4b35      	ldr	r3, [pc, #212]	; (8000d8c <main+0xf4>)
 8000cb8:	4a35      	ldr	r2, [pc, #212]	; (8000d90 <main+0xf8>)
 8000cba:	601a      	str	r2, [r3, #0]

	// calibramos el Giroscopio para que tengamos una medida de error controlable
	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z);
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4835      	ldr	r0, [pc, #212]	; (8000d94 <main+0xfc>)
 8000cc0:	f000 fafe 	bl	80012c0 <calibracionGyros>
 8000cc4:	ee10 3a10 	vmov	r3, s0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fc45 	bl	8000558 <__aeabi_f2d>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4931      	ldr	r1, [pc, #196]	; (8000d98 <main+0x100>)
 8000cd4:	e9c1 2300 	strd	r2, r3, [r1]

    /* Loop forever */
	while(1){

		if (rxData != '\0'){
 8000cd8:	4b30      	ldr	r3, [pc, #192]	; (8000d9c <main+0x104>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d030      	beq.n	8000d42 <main+0xaa>
//			writeChar(&handlerUSART, rxData);
			bufferReception[counterReception] = rxData;
 8000ce0:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <main+0x108>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <main+0x104>)
 8000ce8:	7819      	ldrb	r1, [r3, #0]
 8000cea:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <main+0x10c>)
 8000cec:	5499      	strb	r1, [r3, r2]
			counterReception++;
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <main+0x108>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <main+0x108>)
 8000cf8:	701a      	strb	r2, [r3, #0]

			if (rxData == '@'){
 8000cfa:	4b28      	ldr	r3, [pc, #160]	; (8000d9c <main+0x104>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b40      	cmp	r3, #64	; 0x40
 8000d00:	d10c      	bne.n	8000d1c <main+0x84>
				doneTransaction = SET;
 8000d02:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <main+0x110>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]

				bufferReception[counterReception-1] = '\0';
 8000d08:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <main+0x108>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	4a25      	ldr	r2, [pc, #148]	; (8000da4 <main+0x10c>)
 8000d10:	2100      	movs	r1, #0
 8000d12:	54d1      	strb	r1, [r2, r3]

				counterReception = 0;
 8000d14:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <main+0x108>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e012      	b.n	8000d42 <main+0xaa>

			}else if (rxData == 'z'){
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <main+0x104>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b7a      	cmp	r3, #122	; 0x7a
 8000d22:	d10e      	bne.n	8000d42 <main+0xaa>

				memset(bufferReception, 0, sizeof(bufferReception));
 8000d24:	2240      	movs	r2, #64	; 0x40
 8000d26:	2100      	movs	r1, #0
 8000d28:	481e      	ldr	r0, [pc, #120]	; (8000da4 <main+0x10c>)
 8000d2a:	f004 ff63 	bl	8005bf4 <memset>
				counterReception = 0;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <main+0x108>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
				writeMsg(&handlerUSART, "Buffer Vaciado\n \r");
 8000d34:	491d      	ldr	r1, [pc, #116]	; (8000dac <main+0x114>)
 8000d36:	481e      	ldr	r0, [pc, #120]	; (8000db0 <main+0x118>)
 8000d38:	f004 fb80 	bl	800543c <writeMsg>
				rxData = '\0';
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <main+0x104>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]

		////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


		//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
		if (flag_angulo){
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <main+0x11c>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00f      	beq.n	8000d6a <main+0xd2>

			// Medimos el angulo actual
			getAngle(&handler_MPUAccel_6050, 0, cal_Gyro, &parameters_Pos_Robot);
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <main+0x100>)
 8000d4c:	ed93 7b00 	vldr	d7, [r3]
 8000d50:	4919      	ldr	r1, [pc, #100]	; (8000db8 <main+0x120>)
 8000d52:	eeb0 1a47 	vmov.f32	s2, s14
 8000d56:	eef0 1a67 	vmov.f32	s3, s15
 8000d5a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8000dbc <main+0x124>
 8000d5e:	480d      	ldr	r0, [pc, #52]	; (8000d94 <main+0xfc>)
 8000d60:	f000 fb40 	bl	80013e4 <getAngle>
			// bajamos la bandera
			flag_angulo = RESET;
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <main+0x11c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
		}
		// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
		if (flag_measurements){
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <main+0x128>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0b2      	beq.n	8000cd8 <main+0x40>

			// Medimos el angulo actual
			get_measuremets_parameters(&handlerTIM2_PARAMETROS_MOVIMIENTO, handler_Motor_Array, &parameters_Pos_Robot, Mode);
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <main+0x12c>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <main+0x120>)
 8000d78:	4913      	ldr	r1, [pc, #76]	; (8000dc8 <main+0x130>)
 8000d7a:	4814      	ldr	r0, [pc, #80]	; (8000dcc <main+0x134>)
 8000d7c:	f000 fb70 	bl	8001460 <get_measuremets_parameters>
			// bajamos la bandera
			flag_measurements = RESET;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <main+0x128>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
		if (rxData != '\0'){
 8000d86:	e7a7      	b.n	8000cd8 <main+0x40>
 8000d88:	e000ed00 	.word	0xe000ed00
 8000d8c:	200004f8 	.word	0x200004f8
 8000d90:	3ddfaebc 	.word	0x3ddfaebc
 8000d94:	200003b4 	.word	0x200003b4
 8000d98:	200004d8 	.word	0x200004d8
 8000d9c:	20000466 	.word	0x20000466
 8000da0:	20000464 	.word	0x20000464
 8000da4:	20000424 	.word	0x20000424
 8000da8:	20000465 	.word	0x20000465
 8000dac:	0800aa20 	.word	0x0800aa20
 8000db0:	20000314 	.word	0x20000314
 8000db4:	20000469 	.word	0x20000469
 8000db8:	20000490 	.word	0x20000490
 8000dbc:	00000000 	.word	0x00000000
 8000dc0:	2000046a 	.word	0x2000046a
 8000dc4:	20000467 	.word	0x20000467
 8000dc8:	200003c4 	.word	0x200003c4
 8000dcc:	200002bc 	.word	0x200002bc

08000dd0 <inSystem>:

	}
}


void inSystem (void){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000dd4:	4bb0      	ldr	r3, [pc, #704]	; (8001098 <inSystem+0x2c8>)
 8000dd6:	4ab1      	ldr	r2, [pc, #708]	; (800109c <inSystem+0x2cc>)
 8000dd8:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000dda:	4baf      	ldr	r3, [pc, #700]	; (8001098 <inSystem+0x2c8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000de0:	4bad      	ldr	r3, [pc, #692]	; (8001098 <inSystem+0x2c8>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000de6:	4bac      	ldr	r3, [pc, #688]	; (8001098 <inSystem+0x2c8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000dec:	4baa      	ldr	r3, [pc, #680]	; (8001098 <inSystem+0x2c8>)
 8000dee:	2205      	movs	r2, #5
 8000df0:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000df2:	4ba9      	ldr	r3, [pc, #676]	; (8001098 <inSystem+0x2c8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000df8:	4ba7      	ldr	r3, [pc, #668]	; (8001098 <inSystem+0x2c8>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000dfe:	48a6      	ldr	r0, [pc, #664]	; (8001098 <inSystem+0x2c8>)
 8000e00:	f002 fb3e 	bl	8003480 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000e04:	2101      	movs	r1, #1
 8000e06:	48a4      	ldr	r0, [pc, #656]	; (8001098 <inSystem+0x2c8>)
 8000e08:	f002 fc64 	bl	80036d4 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 8000e0c:	4ba4      	ldr	r3, [pc, #656]	; (80010a0 <inSystem+0x2d0>)
 8000e0e:	4aa5      	ldr	r2, [pc, #660]	; (80010a4 <inSystem+0x2d4>)
 8000e10:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8000e12:	4ba3      	ldr	r3, [pc, #652]	; (80010a0 <inSystem+0x2d0>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8000e18:	4ba1      	ldr	r3, [pc, #644]	; (80010a0 <inSystem+0x2d0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8000e1e:	4ba0      	ldr	r3, [pc, #640]	; (80010a0 <inSystem+0x2d0>)
 8000e20:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e24:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 500;
 8000e26:	4b9e      	ldr	r3, [pc, #632]	; (80010a0 <inSystem+0x2d0>)
 8000e28:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e2c:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 8000e2e:	489c      	ldr	r0, [pc, #624]	; (80010a0 <inSystem+0x2d0>)
 8000e30:	f000 feba 	bl	8001ba8 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8000e34:	489a      	ldr	r0, [pc, #616]	; (80010a0 <inSystem+0x2d0>)
 8000e36:	f001 fab3 	bl	80023a0 <startTimer>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 8000e3a:	f000 fe99 	bl	8001b70 <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor();
 8000e3e:	f000 fcd9 	bl	80017f4 <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 8000e42:	4b99      	ldr	r3, [pc, #612]	; (80010a8 <inSystem+0x2d8>)
 8000e44:	4a95      	ldr	r2, [pc, #596]	; (800109c <inSystem+0x2cc>)
 8000e46:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000e48:	4b97      	ldr	r3, [pc, #604]	; (80010a8 <inSystem+0x2d8>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000e4e:	4b96      	ldr	r3, [pc, #600]	; (80010a8 <inSystem+0x2d8>)
 8000e50:	2202      	movs	r2, #2
 8000e52:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000e54:	4b94      	ldr	r3, [pc, #592]	; (80010a8 <inSystem+0x2d8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8000e5a:	4b93      	ldr	r3, [pc, #588]	; (80010a8 <inSystem+0x2d8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000e60:	4b91      	ldr	r3, [pc, #580]	; (80010a8 <inSystem+0x2d8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000e66:	4b90      	ldr	r3, [pc, #576]	; (80010a8 <inSystem+0x2d8>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 8000e6c:	488e      	ldr	r0, [pc, #568]	; (80010a8 <inSystem+0x2d8>)
 8000e6e:	f002 fb07 	bl	8003480 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 8000e72:	4b8e      	ldr	r3, [pc, #568]	; (80010ac <inSystem+0x2dc>)
 8000e74:	4a8e      	ldr	r2, [pc, #568]	; (80010b0 <inSystem+0x2e0>)
 8000e76:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 8000e78:	4b8c      	ldr	r3, [pc, #560]	; (80010ac <inSystem+0x2dc>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 8000e7e:	4b8b      	ldr	r3, [pc, #556]	; (80010ac <inSystem+0x2dc>)
 8000e80:	4a8c      	ldr	r2, [pc, #560]	; (80010b4 <inSystem+0x2e4>)
 8000e82:	611a      	str	r2, [r3, #16]
	counter = fixed_dutty;
 8000e84:	4b8c      	ldr	r3, [pc, #560]	; (80010b8 <inSystem+0x2e8>)
 8000e86:	221c      	movs	r2, #28
 8000e88:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 8000e8a:	4b88      	ldr	r3, [pc, #544]	; (80010ac <inSystem+0x2dc>)
 8000e8c:	2221      	movs	r2, #33	; 0x21
 8000e8e:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8000e90:	4b86      	ldr	r3, [pc, #536]	; (80010ac <inSystem+0x2dc>)
 8000e92:	2264      	movs	r2, #100	; 0x64
 8000e94:	609a      	str	r2, [r3, #8]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8000e96:	4b85      	ldr	r3, [pc, #532]	; (80010ac <inSystem+0x2dc>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	751a      	strb	r2, [r3, #20]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8000e9c:	4b83      	ldr	r3, [pc, #524]	; (80010ac <inSystem+0x2dc>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_1);
 8000ea2:	4882      	ldr	r0, [pc, #520]	; (80010ac <inSystem+0x2dc>)
 8000ea4:	f002 ffc6 	bl	8003e34 <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 8000ea8:	4880      	ldr	r0, [pc, #512]	; (80010ac <inSystem+0x2dc>)
 8000eaa:	f003 f8ad 	bl	8004008 <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 8000eae:	4b83      	ldr	r3, [pc, #524]	; (80010bc <inSystem+0x2ec>)
 8000eb0:	4a7a      	ldr	r2, [pc, #488]	; (800109c <inSystem+0x2cc>)
 8000eb2:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000eb4:	4b81      	ldr	r3, [pc, #516]	; (80010bc <inSystem+0x2ec>)
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000eba:	4b80      	ldr	r3, [pc, #512]	; (80010bc <inSystem+0x2ec>)
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000ec0:	4b7e      	ldr	r3, [pc, #504]	; (80010bc <inSystem+0x2ec>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8000ec6:	4b7d      	ldr	r3, [pc, #500]	; (80010bc <inSystem+0x2ec>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000ecc:	4b7b      	ldr	r3, [pc, #492]	; (80010bc <inSystem+0x2ec>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000ed2:	4b7a      	ldr	r3, [pc, #488]	; (80010bc <inSystem+0x2ec>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 8000ed8:	4878      	ldr	r0, [pc, #480]	; (80010bc <inSystem+0x2ec>)
 8000eda:	f002 fad1 	bl	8003480 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 8000ede:	4b78      	ldr	r3, [pc, #480]	; (80010c0 <inSystem+0x2f0>)
 8000ee0:	4a73      	ldr	r2, [pc, #460]	; (80010b0 <inSystem+0x2e0>)
 8000ee2:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 8000ee4:	4b76      	ldr	r3, [pc, #472]	; (80010c0 <inSystem+0x2f0>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	711a      	strb	r2, [r3, #4]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 8000eea:	4b75      	ldr	r3, [pc, #468]	; (80010c0 <inSystem+0x2f0>)
 8000eec:	4a71      	ldr	r2, [pc, #452]	; (80010b4 <inSystem+0x2e4>)
 8000eee:	611a      	str	r2, [r3, #16]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 8000ef0:	4b73      	ldr	r3, [pc, #460]	; (80010c0 <inSystem+0x2f0>)
 8000ef2:	2221      	movs	r2, #33	; 0x21
 8000ef4:	819a      	strh	r2, [r3, #12]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 8000ef6:	4b72      	ldr	r3, [pc, #456]	; (80010c0 <inSystem+0x2f0>)
 8000ef8:	2264      	movs	r2, #100	; 0x64
 8000efa:	609a      	str	r2, [r3, #8]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 8000efc:	4b70      	ldr	r3, [pc, #448]	; (80010c0 <inSystem+0x2f0>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	751a      	strb	r2, [r3, #20]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8000f02:	4b6f      	ldr	r3, [pc, #444]	; (80010c0 <inSystem+0x2f0>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_2);
 8000f08:	486d      	ldr	r0, [pc, #436]	; (80010c0 <inSystem+0x2f0>)
 8000f0a:	f002 ff93 	bl	8003e34 <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 8000f0e:	486c      	ldr	r0, [pc, #432]	; (80010c0 <inSystem+0x2f0>)
 8000f10:	f003 f87a 	bl	8004008 <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 8000f14:	4b6b      	ldr	r3, [pc, #428]	; (80010c4 <inSystem+0x2f4>)
 8000f16:	4a6c      	ldr	r2, [pc, #432]	; (80010c8 <inSystem+0x2f8>)
 8000f18:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000f1a:	4b6a      	ldr	r3, [pc, #424]	; (80010c4 <inSystem+0x2f4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8000f20:	4b68      	ldr	r3, [pc, #416]	; (80010c4 <inSystem+0x2f4>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 8000f26:	4b67      	ldr	r3, [pc, #412]	; (80010c4 <inSystem+0x2f4>)
 8000f28:	220a      	movs	r2, #10
 8000f2a:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f2c:	4b65      	ldr	r3, [pc, #404]	; (80010c4 <inSystem+0x2f4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f32:	4b64      	ldr	r3, [pc, #400]	; (80010c4 <inSystem+0x2f4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000f38:	4b62      	ldr	r3, [pc, #392]	; (80010c4 <inSystem+0x2f4>)
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 8000f3e:	4861      	ldr	r0, [pc, #388]	; (80010c4 <inSystem+0x2f4>)
 8000f40:	f002 fa9e 	bl	8003480 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 8000f44:	2100      	movs	r1, #0
 8000f46:	485f      	ldr	r0, [pc, #380]	; (80010c4 <inSystem+0x2f4>)
 8000f48:	f002 fbef 	bl	800372a <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 8000f4c:	4b5f      	ldr	r3, [pc, #380]	; (80010cc <inSystem+0x2fc>)
 8000f4e:	4a5e      	ldr	r2, [pc, #376]	; (80010c8 <inSystem+0x2f8>)
 8000f50:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000f52:	4b5e      	ldr	r3, [pc, #376]	; (80010cc <inSystem+0x2fc>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8000f58:	4b5c      	ldr	r3, [pc, #368]	; (80010cc <inSystem+0x2fc>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 8000f5e:	4b5b      	ldr	r3, [pc, #364]	; (80010cc <inSystem+0x2fc>)
 8000f60:	220b      	movs	r2, #11
 8000f62:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f64:	4b59      	ldr	r3, [pc, #356]	; (80010cc <inSystem+0x2fc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f6a:	4b58      	ldr	r3, [pc, #352]	; (80010cc <inSystem+0x2fc>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000f70:	4b56      	ldr	r3, [pc, #344]	; (80010cc <inSystem+0x2fc>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 8000f76:	4855      	ldr	r0, [pc, #340]	; (80010cc <inSystem+0x2fc>)
 8000f78:	f002 fa82 	bl	8003480 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4853      	ldr	r0, [pc, #332]	; (80010cc <inSystem+0x2fc>)
 8000f80:	f002 fbd3 	bl	800372a <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 8000f84:	4b52      	ldr	r3, [pc, #328]	; (80010d0 <inSystem+0x300>)
 8000f86:	4a50      	ldr	r2, [pc, #320]	; (80010c8 <inSystem+0x2f8>)
 8000f88:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000f8a:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <inSystem+0x300>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8000f90:	4b4f      	ldr	r3, [pc, #316]	; (80010d0 <inSystem+0x300>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 8000f96:	4b4e      	ldr	r3, [pc, #312]	; (80010d0 <inSystem+0x300>)
 8000f98:	220c      	movs	r2, #12
 8000f9a:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f9c:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <inSystem+0x300>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fa2:	4b4b      	ldr	r3, [pc, #300]	; (80010d0 <inSystem+0x300>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000fa8:	4b49      	ldr	r3, [pc, #292]	; (80010d0 <inSystem+0x300>)
 8000faa:	2202      	movs	r2, #2
 8000fac:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 8000fae:	4848      	ldr	r0, [pc, #288]	; (80010d0 <inSystem+0x300>)
 8000fb0:	f002 fa66 	bl	8003480 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4846      	ldr	r0, [pc, #280]	; (80010d0 <inSystem+0x300>)
 8000fb8:	f002 fbb7 	bl	800372a <GPIO_WritePin_Afopt>

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 8000fbc:	4b45      	ldr	r3, [pc, #276]	; (80010d4 <inSystem+0x304>)
 8000fbe:	4a46      	ldr	r2, [pc, #280]	; (80010d8 <inSystem+0x308>)
 8000fc0:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000fc2:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <inSystem+0x304>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8000fc8:	4b42      	ldr	r3, [pc, #264]	; (80010d4 <inSystem+0x304>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8000fce:	4b41      	ldr	r3, [pc, #260]	; (80010d4 <inSystem+0x304>)
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000fd4:	4b3f      	ldr	r3, [pc, #252]	; (80010d4 <inSystem+0x304>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fda:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <inSystem+0x304>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000fe0:	4b3c      	ldr	r3, [pc, #240]	; (80010d4 <inSystem+0x304>)
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 8000fe6:	483b      	ldr	r0, [pc, #236]	; (80010d4 <inSystem+0x304>)
 8000fe8:	f002 fa4a 	bl	8003480 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default
 8000fec:	2100      	movs	r1, #0
 8000fee:	4839      	ldr	r0, [pc, #228]	; (80010d4 <inSystem+0x304>)
 8000ff0:	f002 fb9b 	bl	800372a <GPIO_WritePin_Afopt>
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 8000ff4:	4b39      	ldr	r3, [pc, #228]	; (80010dc <inSystem+0x30c>)
 8000ff6:	4a34      	ldr	r2, [pc, #208]	; (80010c8 <inSystem+0x2f8>)
 8000ff8:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000ffa:	4b38      	ldr	r3, [pc, #224]	; (80010dc <inSystem+0x30c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8001000:	4b36      	ldr	r3, [pc, #216]	; (80010dc <inSystem+0x30c>)
 8001002:	2200      	movs	r2, #0
 8001004:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8001006:	4b35      	ldr	r3, [pc, #212]	; (80010dc <inSystem+0x30c>)
 8001008:	2201      	movs	r2, #1
 800100a:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800100c:	4b33      	ldr	r3, [pc, #204]	; (80010dc <inSystem+0x30c>)
 800100e:	2200      	movs	r2, #0
 8001010:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001012:	4b32      	ldr	r3, [pc, #200]	; (80010dc <inSystem+0x30c>)
 8001014:	2200      	movs	r2, #0
 8001016:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001018:	4b30      	ldr	r3, [pc, #192]	; (80010dc <inSystem+0x30c>)
 800101a:	2202      	movs	r2, #2
 800101c:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 800101e:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <inSystem+0x310>)
 8001020:	4a2e      	ldr	r2, [pc, #184]	; (80010dc <inSystem+0x30c>)
 8001022:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001024:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <inSystem+0x310>)
 8001026:	2202      	movs	r2, #2
 8001028:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 800102a:	482d      	ldr	r0, [pc, #180]	; (80010e0 <inSystem+0x310>)
 800102c:	f001 f9fa 	bl	8002424 <extInt_Config>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 8001030:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <inSystem+0x314>)
 8001032:	4a25      	ldr	r2, [pc, #148]	; (80010c8 <inSystem+0x2f8>)
 8001034:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001036:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <inSystem+0x314>)
 8001038:	2200      	movs	r2, #0
 800103a:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 800103c:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <inSystem+0x314>)
 800103e:	2200      	movs	r2, #0
 8001040:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <inSystem+0x314>)
 8001044:	2203      	movs	r2, #3
 8001046:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001048:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <inSystem+0x314>)
 800104a:	2200      	movs	r2, #0
 800104c:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800104e:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <inSystem+0x314>)
 8001050:	2200      	movs	r2, #0
 8001052:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001054:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <inSystem+0x314>)
 8001056:	2202      	movs	r2, #2
 8001058:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <inSystem+0x318>)
 800105c:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <inSystem+0x314>)
 800105e:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001060:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <inSystem+0x318>)
 8001062:	2202      	movs	r2, #2
 8001064:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 8001066:	4820      	ldr	r0, [pc, #128]	; (80010e8 <inSystem+0x318>)
 8001068:	f001 f9dc 	bl	8002424 <extInt_Config>
	///////////////////////////////////////////Comunicación serial para comandos //////////////////////////////////////////////


	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 800106c:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <inSystem+0x31c>)
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <inSystem+0x2cc>)
 8001070:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8001072:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <inSystem+0x31c>)
 8001074:	2207      	movs	r2, #7
 8001076:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <inSystem+0x31c>)
 800107a:	2202      	movs	r2, #2
 800107c:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800107e:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <inSystem+0x31c>)
 8001080:	2200      	movs	r2, #0
 8001082:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <inSystem+0x31c>)
 8001086:	2202      	movs	r2, #2
 8001088:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <inSystem+0x31c>)
 800108c:	2200      	movs	r2, #0
 800108e:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <inSystem+0x31c>)
 8001092:	2203      	movs	r2, #3
 8001094:	719a      	strb	r2, [r3, #6]
 8001096:	e02b      	b.n	80010f0 <inSystem+0x320>
 8001098:	200001fc 	.word	0x200001fc
 800109c:	40020000 	.word	0x40020000
 80010a0:	200002a8 	.word	0x200002a8
 80010a4:	40000400 	.word	0x40000400
 80010a8:	20000208 	.word	0x20000208
 80010ac:	200002e4 	.word	0x200002e4
 80010b0:	40000c00 	.word	0x40000c00
 80010b4:	41e00000 	.word	0x41e00000
 80010b8:	200004fc 	.word	0x200004fc
 80010bc:	20000214 	.word	0x20000214
 80010c0:	200002fc 	.word	0x200002fc
 80010c4:	20000244 	.word	0x20000244
 80010c8:	40020800 	.word	0x40020800
 80010cc:	20000238 	.word	0x20000238
 80010d0:	2000025c 	.word	0x2000025c
 80010d4:	20000250 	.word	0x20000250
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	20000268 	.word	0x20000268
 80010e0:	20000298 	.word	0x20000298
 80010e4:	20000274 	.word	0x20000274
 80010e8:	200002a0 	.word	0x200002a0
 80010ec:	2000022c 	.word	0x2000022c
	GPIO_Config(&handlerPinTx);
 80010f0:	484b      	ldr	r0, [pc, #300]	; (8001220 <inSystem+0x450>)
 80010f2:	f002 f9c5 	bl	8003480 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 80010f6:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <inSystem+0x454>)
 80010f8:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <inSystem+0x458>)
 80010fa:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80010fc:	4b49      	ldr	r3, [pc, #292]	; (8001224 <inSystem+0x454>)
 80010fe:	2207      	movs	r2, #7
 8001100:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001102:	4b48      	ldr	r3, [pc, #288]	; (8001224 <inSystem+0x454>)
 8001104:	2202      	movs	r2, #2
 8001106:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001108:	4b46      	ldr	r3, [pc, #280]	; (8001224 <inSystem+0x454>)
 800110a:	2200      	movs	r2, #0
 800110c:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 800110e:	4b45      	ldr	r3, [pc, #276]	; (8001224 <inSystem+0x454>)
 8001110:	2203      	movs	r2, #3
 8001112:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001114:	4b43      	ldr	r3, [pc, #268]	; (8001224 <inSystem+0x454>)
 8001116:	2200      	movs	r2, #0
 8001118:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <inSystem+0x454>)
 800111c:	2203      	movs	r2, #3
 800111e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 8001120:	4840      	ldr	r0, [pc, #256]	; (8001224 <inSystem+0x454>)
 8001122:	f002 f9ad 	bl	8003480 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 8001126:	4b41      	ldr	r3, [pc, #260]	; (800122c <inSystem+0x45c>)
 8001128:	4a41      	ldr	r2, [pc, #260]	; (8001230 <inSystem+0x460>)
 800112a:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 800112c:	4b3f      	ldr	r3, [pc, #252]	; (800122c <inSystem+0x45c>)
 800112e:	4a41      	ldr	r2, [pc, #260]	; (8001234 <inSystem+0x464>)
 8001130:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8001132:	4b3e      	ldr	r3, [pc, #248]	; (800122c <inSystem+0x45c>)
 8001134:	2201      	movs	r2, #1
 8001136:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8001138:	4b3c      	ldr	r3, [pc, #240]	; (800122c <inSystem+0x45c>)
 800113a:	2201      	movs	r2, #1
 800113c:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 800113e:	4b3b      	ldr	r3, [pc, #236]	; (800122c <inSystem+0x45c>)
 8001140:	2200      	movs	r2, #0
 8001142:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8001144:	4b39      	ldr	r3, [pc, #228]	; (800122c <inSystem+0x45c>)
 8001146:	2202      	movs	r2, #2
 8001148:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 800114a:	4b38      	ldr	r3, [pc, #224]	; (800122c <inSystem+0x45c>)
 800114c:	2200      	movs	r2, #0
 800114e:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8001150:	4b36      	ldr	r3, [pc, #216]	; (800122c <inSystem+0x45c>)
 8001152:	2200      	movs	r2, #0
 8001154:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8001156:	4b35      	ldr	r3, [pc, #212]	; (800122c <inSystem+0x45c>)
 8001158:	2200      	movs	r2, #0
 800115a:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 800115c:	4833      	ldr	r0, [pc, #204]	; (800122c <inSystem+0x45c>)
 800115e:	f003 fd8b 	bl	8004c78 <USART_Config>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 8001162:	4b35      	ldr	r3, [pc, #212]	; (8001238 <inSystem+0x468>)
 8001164:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001168:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 800116a:	4b33      	ldr	r3, [pc, #204]	; (8001238 <inSystem+0x468>)
 800116c:	2201      	movs	r2, #1
 800116e:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8001170:	4b31      	ldr	r3, [pc, #196]	; (8001238 <inSystem+0x468>)
 8001172:	2200      	movs	r2, #0
 8001174:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 8001176:	4b30      	ldr	r3, [pc, #192]	; (8001238 <inSystem+0x468>)
 8001178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800117c:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 800117e:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <inSystem+0x468>)
 8001180:	2210      	movs	r2, #16
 8001182:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 8001184:	482c      	ldr	r0, [pc, #176]	; (8001238 <inSystem+0x468>)
 8001186:	f000 fd0f 	bl	8001ba8 <BasicTimer_Config>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <inSystem+0x46c>)
 800118c:	4a2c      	ldr	r2, [pc, #176]	; (8001240 <inSystem+0x470>)
 800118e:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001190:	4b2a      	ldr	r3, [pc, #168]	; (800123c <inSystem+0x46c>)
 8001192:	2204      	movs	r2, #4
 8001194:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <inSystem+0x46c>)
 8001198:	2202      	movs	r2, #2
 800119a:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 800119c:	4b27      	ldr	r3, [pc, #156]	; (800123c <inSystem+0x46c>)
 800119e:	2208      	movs	r2, #8
 80011a0:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <inSystem+0x46c>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011a8:	4b24      	ldr	r3, [pc, #144]	; (800123c <inSystem+0x46c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <inSystem+0x46c>)
 80011b0:	2202      	movs	r2, #2
 80011b2:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <inSystem+0x474>)
 80011b6:	4a22      	ldr	r2, [pc, #136]	; (8001240 <inSystem+0x470>)
 80011b8:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80011ba:	4b22      	ldr	r3, [pc, #136]	; (8001244 <inSystem+0x474>)
 80011bc:	2204      	movs	r2, #4
 80011be:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80011c0:	4b20      	ldr	r3, [pc, #128]	; (8001244 <inSystem+0x474>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <inSystem+0x474>)
 80011c8:	2209      	movs	r2, #9
 80011ca:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <inSystem+0x474>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <inSystem+0x474>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <inSystem+0x474>)
 80011da:	2202      	movs	r2, #2
 80011dc:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <inSystem+0x478>)
 80011e0:	4a1a      	ldr	r2, [pc, #104]	; (800124c <inSystem+0x47c>)
 80011e2:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <inSystem+0x478>)
 80011e6:	2232      	movs	r2, #50	; 0x32
 80011e8:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <inSystem+0x478>)
 80011ec:	2268      	movs	r2, #104	; 0x68
 80011ee:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <inSystem+0x478>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <inSystem+0x480>)
 80011f8:	4a10      	ldr	r2, [pc, #64]	; (800123c <inSystem+0x46c>)
 80011fa:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <inSystem+0x480>)
 80011fe:	4a11      	ldr	r2, [pc, #68]	; (8001244 <inSystem+0x474>)
 8001200:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <inSystem+0x480>)
 8001204:	4a10      	ldr	r2, [pc, #64]	; (8001248 <inSystem+0x478>)
 8001206:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <inSystem+0x480>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <inSystem+0x480>)
 8001210:	2200      	movs	r2, #0
 8001212:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 8001214:	480e      	ldr	r0, [pc, #56]	; (8001250 <inSystem+0x480>)
 8001216:	f002 faeb 	bl	80037f0 <configMPUAccel>

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000022c 	.word	0x2000022c
 8001224:	20000220 	.word	0x20000220
 8001228:	40020000 	.word	0x40020000
 800122c:	20000314 	.word	0x20000314
 8001230:	40004400 	.word	0x40004400
 8001234:	02faf080 	.word	0x02faf080
 8001238:	200002bc 	.word	0x200002bc
 800123c:	20000280 	.word	0x20000280
 8001240:	40020400 	.word	0x40020400
 8001244:	2000028c 	.word	0x2000028c
 8001248:	200003a8 	.word	0x200003a8
 800124c:	40005400 	.word	0x40005400
 8001250:	200003b4 	.word	0x200003b4

08001254 <usart2Rx_Callback>:




// Interrupcion usart 1
void usart2Rx_Callback(void){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

	rxData = getRxData();
 8001258:	f004 f918 	bl	800548c <getRxData>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	4b01      	ldr	r3, [pc, #4]	; (8001268 <usart2Rx_Callback+0x14>)
 8001262:	701a      	strb	r2, [r3, #0]

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000466 	.word	0x20000466

0800126c <BasicTimer3_Callback>:


//Interrupción Timer 3
void BasicTimer3_Callback(void){
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerPinA5);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <BasicTimer3_Callback+0x10>)
 8001272:	f002 faa6 	bl	80037c2 <GPIOxTooglePin>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200001fc 	.word	0x200001fc

08001280 <BasicTimer2_Callback>:

//Interrupcion Timer 2

void BasicTimer2_Callback(void){
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0


	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <BasicTimer2_Callback+0x1c>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	flag_measurements = SET;
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <BasicTimer2_Callback+0x20>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]

	// EN EL MAIN ESTAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000469 	.word	0x20000469
 80012a0:	2000046a 	.word	0x2000046a

080012a4 <callback_extInt1>:


//Interrupciones de Exti
void callback_extInt1(void){
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0


}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <callback_extInt3>:

void callback_extInt3(void){
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0


}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <calibracionGyros>:
//Definicion de funciones varias


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 80012cc:	23c8      	movs	r3, #200	; 0xc8
 80012ce:	827b      	strh	r3, [r7, #18]
	float    medidas    = 0;
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
	float    suma       = 0;
 80012d6:	f04f 0300 	mov.w	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
	uint8_t  contador   = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	76fb      	strb	r3, [r7, #27]
	float    promedio   = 0;
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]

	switch (axis) {
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d061      	beq.n	80013b0 <calibracionGyros+0xf0>
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	dc70      	bgt.n	80013d2 <calibracionGyros+0x112>
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d015      	beq.n	8001320 <calibracionGyros+0x60>
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d037      	beq.n	8001368 <calibracionGyros+0xa8>
				delay_ms(1); // esperamos 1 milisegundo
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 80012f8:	e06b      	b.n	80013d2 <calibracionGyros+0x112>
				medidas = readGyro_X(ptrMPUAccel);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f002 fc04 	bl	8003b08 <readGyro_X>
 8001300:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001304:	ed97 7a07 	vldr	s14, [r7, #28]
 8001308:	edd7 7a03 	vldr	s15, [r7, #12]
 800130c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001310:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001314:	7efb      	ldrb	r3, [r7, #27]
 8001316:	3301      	adds	r3, #1
 8001318:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 800131a:	2001      	movs	r0, #1
 800131c:	f000 fdca 	bl	8001eb4 <delay_ms>
			while (contador < numMedidas){
 8001320:	7efb      	ldrb	r3, [r7, #27]
 8001322:	b29b      	uxth	r3, r3
 8001324:	8a7a      	ldrh	r2, [r7, #18]
 8001326:	429a      	cmp	r2, r3
 8001328:	d8e7      	bhi.n	80012fa <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 800132a:	8a7b      	ldrh	r3, [r7, #18]
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001334:	edd7 6a07 	vldr	s13, [r7, #28]
 8001338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133c:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001340:	e048      	b.n	80013d4 <calibracionGyros+0x114>
				medidas = readGyro_Y(ptrMPUAccel);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f002 fc68 	bl	8003c18 <readGyro_Y>
 8001348:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 800134c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001350:	edd7 7a03 	vldr	s15, [r7, #12]
 8001354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001358:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 800135c:	7efb      	ldrb	r3, [r7, #27]
 800135e:	3301      	adds	r3, #1
 8001360:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001362:	2001      	movs	r0, #1
 8001364:	f000 fda6 	bl	8001eb4 <delay_ms>
			while (contador < numMedidas){
 8001368:	7efb      	ldrb	r3, [r7, #27]
 800136a:	b29b      	uxth	r3, r3
 800136c:	8a7a      	ldrh	r2, [r7, #18]
 800136e:	429a      	cmp	r2, r3
 8001370:	d8e7      	bhi.n	8001342 <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 8001372:	8a7b      	ldrh	r3, [r7, #18]
 8001374:	ee07 3a90 	vmov	s15, r3
 8001378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800137c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001384:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001388:	e024      	b.n	80013d4 <calibracionGyros+0x114>
				medidas = readGyro_Z(ptrMPUAccel);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f002 fccc 	bl	8003d28 <readGyro_Z>
 8001390:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001394:	ed97 7a07 	vldr	s14, [r7, #28]
 8001398:	edd7 7a03 	vldr	s15, [r7, #12]
 800139c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a0:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 80013a4:	7efb      	ldrb	r3, [r7, #27]
 80013a6:	3301      	adds	r3, #1
 80013a8:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 80013aa:	2001      	movs	r0, #1
 80013ac:	f000 fd82 	bl	8001eb4 <delay_ms>
			while (contador < numMedidas){
 80013b0:	7efb      	ldrb	r3, [r7, #27]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	8a7a      	ldrh	r2, [r7, #18]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d8e7      	bhi.n	800138a <calibracionGyros+0xca>
			promedio = suma / numMedidas;
 80013ba:	8a7b      	ldrh	r3, [r7, #18]
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80013c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013cc:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80013d0:	e000      	b.n	80013d4 <calibracionGyros+0x114>
			break;
 80013d2:	bf00      	nop
		}
	}


	return promedio;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	ee07 3a90 	vmov	s15, r3
}
 80013da:	eeb0 0a67 	vmov.f32	s0, s15
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <getAngle>:


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6178      	str	r0, [r7, #20]
 80013ec:	ed87 0a04 	vstr	s0, [r7, #16]
 80013f0:	ed87 1b02 	vstr	d1, [r7, #8]
 80013f4:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 80013f6:	6978      	ldr	r0, [r7, #20]
 80013f8:	f002 fc96 	bl	8003d28 <readGyro_Z>
 80013fc:	ee10 3a10 	vmov	r3, s0
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8a9 	bl	8000558 <__aeabi_f2d>
 8001406:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800140a:	f7fe ff45 	bl	8000298 <__aeabi_dsub>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fbef 	bl	8000bf8 <__aeabi_d2f>
 800141a:	4603      	mov	r3, r0
 800141c:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 800141e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001422:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001426:	ee27 7a87 	vmul.f32	s14, s15, s14
 800142a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001458 <getAngle+0x74>
 800142e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001432:	ed97 7a04 	vldr	s14, [r7, #16]
 8001436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143a:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 800143e:	69b8      	ldr	r0, [r7, #24]
 8001440:	f7ff f88a 	bl	8000558 <__aeabi_f2d>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800144e:	bf00      	nop
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	447a0000 	.word	0x447a0000
 800145c:	00000000 	.word	0x00000000

08001460 <get_measuremets_parameters>:

void get_measuremets_parameters(BasicTimer_Handler_t *ptrTimer ,Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_t operation_mode){
 8001460:	b580      	push	{r7, lr}
 8001462:	ed2d 8b02 	vpush	{d8}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	70fb      	strb	r3, [r7, #3]

	//Verificamos el modo
	if(operation_mode == sLine){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	2b00      	cmp	r3, #0
 8001476:	f040 80f7 	bne.w	8001668 <get_measuremets_parameters+0x208>



		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 800147a:	4b71      	ldr	r3, [pc, #452]	; (8001640 <get_measuremets_parameters+0x1e0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f86a 	bl	8000558 <__aeabi_f2d>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7fe ff07 	bl	800029c <__adddf3>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fbaf 	bl	8000bf8 <__aeabi_d2f>
 800149a:	4603      	mov	r3, r0
 800149c:	4a68      	ldr	r2, [pc, #416]	; (8001640 <get_measuremets_parameters+0x1e0>)
 800149e:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += ptrTimer->TIMx_Config.TIMx_period;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	4b67      	ldr	r3, [pc, #412]	; (8001644 <get_measuremets_parameters+0x1e4>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b65      	ldr	r3, [pc, #404]	; (8001644 <get_measuremets_parameters+0x1e4>)
 80014b0:	801a      	strh	r2, [r3, #0]

		//----------------Accion a realizar con un tiempo especifico--------------------
		if(counting_action >= timeAction_TIMER_Sampling)
 80014b2:	4b65      	ldr	r3, [pc, #404]	; (8001648 <get_measuremets_parameters+0x1e8>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	4b64      	ldr	r3, [pc, #400]	; (800164c <get_measuremets_parameters+0x1ec>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	f200 80b1 	bhi.w	8001624 <get_measuremets_parameters+0x1c4>
		{
			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 80014c2:	4b60      	ldr	r3, [pc, #384]	; (8001644 <get_measuremets_parameters+0x1e4>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b61      	ldr	r3, [pc, #388]	; (8001650 <get_measuremets_parameters+0x1f0>)
 80014ca:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 80014cc:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <get_measuremets_parameters+0x1e0>)
 80014ce:	edd3 6a00 	vldr	s13, [r3]
 80014d2:	4b5e      	ldr	r3, [pc, #376]	; (800164c <get_measuremets_parameters+0x1ec>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	ee07 3a90 	vmov	s15, r3
 80014da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014e2:	4b5c      	ldr	r3, [pc, #368]	; (8001654 <get_measuremets_parameters+0x1f4>)
 80014e4:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->phi_relativo = (promAng * M_PI) / 180;          //[rad]
 80014e8:	4b5a      	ldr	r3, [pc, #360]	; (8001654 <get_measuremets_parameters+0x1f4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f833 	bl	8000558 <__aeabi_f2d>
 80014f2:	a351      	add	r3, pc, #324	; (adr r3, 8001638 <get_measuremets_parameters+0x1d8>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f886 	bl	8000608 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b53      	ldr	r3, [pc, #332]	; (8001658 <get_measuremets_parameters+0x1f8>)
 800150a:	f7ff f9a7 	bl	800085c <__aeabi_ddiv>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	e9c1 2302 	strd	r2, r3, [r1, #8]
			// Con la siguiente accion lo que hacemos es conseguir un angulo con mucha mas precision decimal debido a la funcion atan2
			ptrParameter_position->phi_relativo = atan2(sin(ptrParameter_position->phi_relativo),cos(ptrParameter_position->phi_relativo));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	ed93 7b02 	vldr	d7, [r3, #8]
 800151e:	eeb0 0a47 	vmov.f32	s0, s14
 8001522:	eef0 0a67 	vmov.f32	s1, s15
 8001526:	f007 f917 	bl	8008758 <sin>
 800152a:	eeb0 8a40 	vmov.f32	s16, s0
 800152e:	eef0 8a60 	vmov.f32	s17, s1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	ed93 7b02 	vldr	d7, [r3, #8]
 8001538:	eeb0 0a47 	vmov.f32	s0, s14
 800153c:	eef0 0a67 	vmov.f32	s1, s15
 8001540:	f007 f86e 	bl	8008620 <cos>
 8001544:	eeb0 7a40 	vmov.f32	s14, s0
 8001548:	eef0 7a60 	vmov.f32	s15, s1
 800154c:	eeb0 1a47 	vmov.f32	s2, s14
 8001550:	eef0 1a67 	vmov.f32	s3, s15
 8001554:	eeb0 0a48 	vmov.f32	s0, s16
 8001558:	eef0 0a68 	vmov.f32	s1, s17
 800155c:	f007 f954 	bl	8008808 <atan2>
 8001560:	eeb0 7a40 	vmov.f32	s14, s0
 8001564:	eef0 7a60 	vmov.f32	s15, s1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	ed83 7b02 	vstr	d7, [r3, #8]
			//Calculamos la velocidad
			ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);      //[mm]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	791b      	ldrb	r3, [r3, #4]
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800157c:	4b37      	ldr	r3, [pc, #220]	; (800165c <get_measuremets_parameters+0x1fc>)
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158a:	edc3 7a03 	vstr	s15, [r3, #12]
			ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);      //[mm]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	3304      	adds	r3, #4
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	791b      	ldrb	r3, [r3, #4]
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800159e:	4b30      	ldr	r3, [pc, #192]	; (8001660 <get_measuremets_parameters+0x200>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	3304      	adds	r3, #4
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ae:	edc3 7a03 	vstr	s15, [r3, #12]
			ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion;      //[m/s]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	edd3 6a03 	vldr	s13, [r3, #12]
 80015ba:	4b25      	ldr	r3, [pc, #148]	; (8001650 <get_measuremets_parameters+0x1f0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	ee07 3a90 	vmov	s15, r3
 80015c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ce:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion;      //[m/s]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	3304      	adds	r3, #4
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	edd3 6a03 	vldr	s13, [r3, #12]
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <get_measuremets_parameters+0x1f0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	3304      	adds	r3, #4
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f2:	edc3 7a02 	vstr	s15, [r3, #8]
			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2200      	movs	r2, #0
 80015fc:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	3304      	adds	r3, #4
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2200      	movs	r2, #0
 8001606:	711a      	strb	r2, [r3, #4]
			//Reiniciamos variable
			sum_ang = 0;
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <get_measuremets_parameters+0x1e0>)
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
			//Reiniciamos tiempo
			time_accumulated = 0;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <get_measuremets_parameters+0x1e4>)
 8001612:	2200      	movs	r2, #0
 8001614:	801a      	strh	r2, [r3, #0]
			//Reiniciamos el contador de accion
			counting_action = 0;
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <get_measuremets_parameters+0x1ec>)
 8001618:	2200      	movs	r2, #0
 800161a:	801a      	strh	r2, [r3, #0]
			//Levantamos bandera
			flag_action = 1;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <get_measuremets_parameters+0x204>)
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
		//Combinar ambos ángulos
		ang_complementary = ptrParameter_position->grad_relativo + ang_for_Displament;
	}
	else{  __NOP(); }

}
 8001622:	e0c6      	b.n	80017b2 <get_measuremets_parameters+0x352>
		else{ counting_action++; }
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <get_measuremets_parameters+0x1ec>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	b29a      	uxth	r2, r3
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <get_measuremets_parameters+0x1ec>)
 800162e:	801a      	strh	r2, [r3, #0]
}
 8001630:	e0bf      	b.n	80017b2 <get_measuremets_parameters+0x352>
 8001632:	bf00      	nop
 8001634:	f3af 8000 	nop.w
 8001638:	54442d18 	.word	0x54442d18
 800163c:	400921fb 	.word	0x400921fb
 8001640:	200004e0 	.word	0x200004e0
 8001644:	2000046c 	.word	0x2000046c
 8001648:	20000000 	.word	0x20000000
 800164c:	2000046e 	.word	0x2000046e
 8001650:	20000470 	.word	0x20000470
 8001654:	200004e4 	.word	0x200004e4
 8001658:	40668000 	.word	0x40668000
 800165c:	20000004 	.word	0x20000004
 8001660:	20000008 	.word	0x20000008
 8001664:	20000468 	.word	0x20000468
	else if(Mode == sRoll)
 8001668:	4b57      	ldr	r3, [pc, #348]	; (80017c8 <get_measuremets_parameters+0x368>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	f040 809f 	bne.w	80017b0 <get_measuremets_parameters+0x350>
		if(counting_action>=timeAction_TIMER_Sampling)
 8001672:	4b56      	ldr	r3, [pc, #344]	; (80017cc <get_measuremets_parameters+0x36c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b55      	ldr	r3, [pc, #340]	; (80017d0 <get_measuremets_parameters+0x370>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	f200 8083 	bhi.w	8001788 <get_measuremets_parameters+0x328>
			time_accion = time_accumulated;
 8001682:	4b54      	ldr	r3, [pc, #336]	; (80017d4 <get_measuremets_parameters+0x374>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <get_measuremets_parameters+0x378>)
 800168a:	601a      	str	r2, [r3, #0]
			ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	791b      	ldrb	r3, [r3, #4]
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169a:	4b50      	ldr	r3, [pc, #320]	; (80017dc <get_measuremets_parameters+0x37c>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a8:	edc3 7a03 	vstr	s15, [r3, #12]
			ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	3304      	adds	r3, #4
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	791b      	ldrb	r3, [r3, #4]
 80016b4:	ee07 3a90 	vmov	s15, r3
 80016b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016bc:	4b48      	ldr	r3, [pc, #288]	; (80017e0 <get_measuremets_parameters+0x380>)
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	3304      	adds	r3, #4
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016cc:	edc3 7a03 	vstr	s15, [r3, #12]
			ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	edd3 6a03 	vldr	s13, [r3, #12]
 80016d8:	4b3f      	ldr	r3, [pc, #252]	; (80017d8 <get_measuremets_parameters+0x378>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	ee07 3a90 	vmov	s15, r3
 80016e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ec:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	3304      	adds	r3, #4
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	edd3 6a03 	vldr	s13, [r3, #12]
 80016fa:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <get_measuremets_parameters+0x378>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3304      	adds	r3, #4
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001710:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2200      	movs	r2, #0
 800171a:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	3304      	adds	r3, #4
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2200      	movs	r2, #0
 8001724:	711a      	strb	r2, [r3, #4]
			ang_for_Displament += (((ptrMotorHandler[1]->parametersMotor.dis - ptrMotorHandler[0]->parametersMotor.dis) * 100)/ distanceBetweenWheels)*(180/M_PI); //[°]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	3304      	adds	r3, #4
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	edd3 7a03 	vldr	s15, [r3, #12]
 8001738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80017e4 <get_measuremets_parameters+0x384>
 8001740:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001744:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80017e8 <get_measuremets_parameters+0x388>
 8001748:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800174c:	ee16 0a90 	vmov	r0, s13
 8001750:	f7fe ff02 	bl	8000558 <__aeabi_f2d>
 8001754:	a31a      	add	r3, pc, #104	; (adr r3, 80017c0 <get_measuremets_parameters+0x360>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	f7fe ff55 	bl	8000608 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	4b21      	ldr	r3, [pc, #132]	; (80017ec <get_measuremets_parameters+0x38c>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	f7fe fd96 	bl	800029c <__adddf3>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	491d      	ldr	r1, [pc, #116]	; (80017ec <get_measuremets_parameters+0x38c>)
 8001776:	e9c1 2300 	strd	r2, r3, [r1]
			time_accumulated = 0;
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <get_measuremets_parameters+0x374>)
 800177c:	2200      	movs	r2, #0
 800177e:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <get_measuremets_parameters+0x370>)
 8001782:	2200      	movs	r2, #0
 8001784:	801a      	strh	r2, [r3, #0]
 8001786:	e005      	b.n	8001794 <get_measuremets_parameters+0x334>
		else{counting_action++;}
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <get_measuremets_parameters+0x370>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	b29a      	uxth	r2, r3
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <get_measuremets_parameters+0x370>)
 8001792:	801a      	strh	r2, [r3, #0]
		ang_complementary = ptrParameter_position->grad_relativo + ang_for_Displament;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <get_measuremets_parameters+0x38c>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7fe fd7c 	bl	800029c <__adddf3>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4911      	ldr	r1, [pc, #68]	; (80017f0 <get_measuremets_parameters+0x390>)
 80017aa:	e9c1 2300 	strd	r2, r3, [r1]
}
 80017ae:	e000      	b.n	80017b2 <get_measuremets_parameters+0x352>
	else{  __NOP(); }
 80017b0:	bf00      	nop
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	ecbd 8b02 	vpop	{d8}
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	1a63c1f8 	.word	0x1a63c1f8
 80017c4:	404ca5dc 	.word	0x404ca5dc
 80017c8:	20000467 	.word	0x20000467
 80017cc:	20000000 	.word	0x20000000
 80017d0:	2000046e 	.word	0x2000046e
 80017d4:	2000046c 	.word	0x2000046c
 80017d8:	20000470 	.word	0x20000470
 80017dc:	20000004 	.word	0x20000004
 80017e0:	20000008 	.word	0x20000008
 80017e4:	42c80000 	.word	0x42c80000
 80017e8:	4625a000 	.word	0x4625a000
 80017ec:	200004e8 	.word	0x200004e8
 80017f0:	200004f0 	.word	0x200004f0

080017f4 <int_Config_Motor>:


}


void int_Config_Motor(void){
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

	//---------------Motor Izquierdo----------------
	handler_Motor_Array[0] = &handlerMotor1_t;
 80017f8:	4b4e      	ldr	r3, [pc, #312]	; (8001934 <int_Config_Motor+0x140>)
 80017fa:	4a4f      	ldr	r2, [pc, #316]	; (8001938 <int_Config_Motor+0x144>)
 80017fc:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	handler_Motor_Array[0]->configMotor.dutty =  fixed_dutty;
 80017fe:	4b4d      	ldr	r3, [pc, #308]	; (8001934 <int_Config_Motor+0x140>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a4e      	ldr	r2, [pc, #312]	; (800193c <int_Config_Motor+0x148>)
 8001804:	619a      	str	r2, [r3, #24]
	handler_Motor_Array[0]->configMotor.dir = SET; // Por defecto dejamos el bit de direccion en SET
 8001806:	4b4b      	ldr	r3, [pc, #300]	; (8001934 <int_Config_Motor+0x140>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2201      	movs	r2, #1
 800180c:	771a      	strb	r2, [r3, #28]
	//handler de los perifericos
	handler_Motor_Array[0]->phandlerGPIOEN = &handlerEn1PinC10;
 800180e:	4b49      	ldr	r3, [pc, #292]	; (8001934 <int_Config_Motor+0x140>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a4b      	ldr	r2, [pc, #300]	; (8001940 <int_Config_Motor+0x14c>)
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
	handler_Motor_Array[0]->phandlerGPIOIN = &handlerIn1PinC12;
 8001816:	4b47      	ldr	r3, [pc, #284]	; (8001934 <int_Config_Motor+0x140>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a4a      	ldr	r2, [pc, #296]	; (8001944 <int_Config_Motor+0x150>)
 800181c:	621a      	str	r2, [r3, #32]
	handler_Motor_Array[0]->phandlerPWM = &handlerPWM_1;
 800181e:	4b45      	ldr	r3, [pc, #276]	; (8001934 <int_Config_Motor+0x140>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a49      	ldr	r2, [pc, #292]	; (8001948 <int_Config_Motor+0x154>)
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	handler_Motor_Array[0]->parametersMotor.pid->e0 = 0;
 8001826:	4b43      	ldr	r3, [pc, #268]	; (8001934 <int_Config_Motor+0x140>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	605a      	str	r2, [r3, #4]
	handler_Motor_Array[0]->parametersMotor.pid->e_prev = 0;
 8001832:	4b40      	ldr	r3, [pc, #256]	; (8001934 <int_Config_Motor+0x140>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
	handler_Motor_Array[0]->parametersMotor.pid->u = 0;
 800183e:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <int_Config_Motor+0x140>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
	handler_Motor_Array[0]->parametersMotor.pid->e_int = 0;
 800184a:	4b3a      	ldr	r3, [pc, #232]	; (8001934 <int_Config_Motor+0x140>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	handler_Motor_Array[0]->parametersMotor.pid->kp = 250;
 8001856:	4b37      	ldr	r3, [pc, #220]	; (8001934 <int_Config_Motor+0x140>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a3b      	ldr	r2, [pc, #236]	; (800194c <int_Config_Motor+0x158>)
 800185e:	611a      	str	r2, [r3, #16]
	handler_Motor_Array[0]->parametersMotor.pid->ki = 0;
 8001860:	4b34      	ldr	r3, [pc, #208]	; (8001934 <int_Config_Motor+0x140>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
	handler_Motor_Array[0]->parametersMotor.pid->kd = 100;
 800186c:	4b31      	ldr	r3, [pc, #196]	; (8001934 <int_Config_Motor+0x140>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a37      	ldr	r2, [pc, #220]	; (8001950 <int_Config_Motor+0x15c>)
 8001874:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_Array[1] = &handlerMotor2_t;
 8001876:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <int_Config_Motor+0x140>)
 8001878:	4a36      	ldr	r2, [pc, #216]	; (8001954 <int_Config_Motor+0x160>)
 800187a:	605a      	str	r2, [r3, #4]

	handler_Motor_Array[1]->configMotor.dutty =  fixed_dutty;
 800187c:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <int_Config_Motor+0x140>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4a2e      	ldr	r2, [pc, #184]	; (800193c <int_Config_Motor+0x148>)
 8001882:	619a      	str	r2, [r3, #24]
	handler_Motor_Array[1]->configMotor.dir = SET; // Por defecto dejamos el bit de direccion en SET
 8001884:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <int_Config_Motor+0x140>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	771a      	strb	r2, [r3, #28]
	//handler de los perifericos
	handler_Motor_Array[1]->phandlerGPIOEN = &handlerEn2PinC11;
 800188c:	4b29      	ldr	r3, [pc, #164]	; (8001934 <int_Config_Motor+0x140>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4a31      	ldr	r2, [pc, #196]	; (8001958 <int_Config_Motor+0x164>)
 8001892:	625a      	str	r2, [r3, #36]	; 0x24
	handler_Motor_Array[1]->phandlerGPIOIN = &handlerIn2PinD2;
 8001894:	4b27      	ldr	r3, [pc, #156]	; (8001934 <int_Config_Motor+0x140>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a30      	ldr	r2, [pc, #192]	; (800195c <int_Config_Motor+0x168>)
 800189a:	621a      	str	r2, [r3, #32]
	handler_Motor_Array[1]->phandlerPWM = &handlerPWM_2;
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <int_Config_Motor+0x140>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4a2f      	ldr	r2, [pc, #188]	; (8001960 <int_Config_Motor+0x16c>)
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	handler_Motor_Array[1]->parametersMotor.pid->e0 =  0;
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <int_Config_Motor+0x140>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	605a      	str	r2, [r3, #4]
	handler_Motor_Array[1]->parametersMotor.pid->e_prev = 0;
 80018b0:	4b20      	ldr	r3, [pc, #128]	; (8001934 <int_Config_Motor+0x140>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]
	handler_Motor_Array[1]->parametersMotor.pid->u =  0;
 80018bc:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <int_Config_Motor+0x140>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
	handler_Motor_Array[1]->parametersMotor.pid->e_int = 0;
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <int_Config_Motor+0x140>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	handler_Motor_Array[1]->parametersMotor.pid->kp = 250;
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <int_Config_Motor+0x140>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a1c      	ldr	r2, [pc, #112]	; (800194c <int_Config_Motor+0x158>)
 80018dc:	611a      	str	r2, [r3, #16]
	handler_Motor_Array[1]->parametersMotor.pid->ki = 0;
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <int_Config_Motor+0x140>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
	handler_Motor_Array[1]->parametersMotor.pid->kd = 100;
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <int_Config_Motor+0x140>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a17      	ldr	r2, [pc, #92]	; (8001950 <int_Config_Motor+0x15c>)
 80018f2:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	parameter_PID_distace.e0 = parameter_PID_distace.e_prev = 0;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <int_Config_Motor+0x170>)
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <int_Config_Motor+0x170>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	4a18      	ldr	r2, [pc, #96]	; (8001964 <int_Config_Motor+0x170>)
 8001902:	6053      	str	r3, [r2, #4]
	parameter_PID_distace.u =  parameter_PID_distace.e_int = 0;
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <int_Config_Motor+0x170>)
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <int_Config_Motor+0x170>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <int_Config_Motor+0x170>)
 8001912:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	parameter_PID_distace.kp = 1.0;
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <int_Config_Motor+0x170>)
 8001916:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800191a:	611a      	str	r2, [r3, #16]
	parameter_PID_distace.ki = 0.1;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <int_Config_Motor+0x170>)
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <int_Config_Motor+0x174>)
 8001920:	615a      	str	r2, [r3, #20]
	parameter_PID_distace.kd = 0.8;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <int_Config_Motor+0x170>)
 8001924:	4a11      	ldr	r2, [pc, #68]	; (800196c <int_Config_Motor+0x178>)
 8001926:	619a      	str	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	200003c4 	.word	0x200003c4
 8001938:	200003cc 	.word	0x200003cc
 800193c:	41e00000 	.word	0x41e00000
 8001940:	20000244 	.word	0x20000244
 8001944:	2000025c 	.word	0x2000025c
 8001948:	200002e4 	.word	0x200002e4
 800194c:	437a0000 	.word	0x437a0000
 8001950:	42c80000 	.word	0x42c80000
 8001954:	200003f8 	.word	0x200003f8
 8001958:	20000238 	.word	0x20000238
 800195c:	20000250 	.word	0x20000250
 8001960:	200002fc 	.word	0x200002fc
 8001964:	20000474 	.word	0x20000474
 8001968:	3dcccccd 	.word	0x3dcccccd
 800196c:	3f4ccccd 	.word	0x3f4ccccd

08001970 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <ITM_SendChar+0x48>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <ITM_SendChar+0x48>)
 8001980:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001984:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001986:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <ITM_SendChar+0x4c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <ITM_SendChar+0x4c>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001992:	bf00      	nop
 8001994:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f8      	beq.n	8001994 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80019a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	6013      	str	r3, [r2, #0]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000edfc 	.word	0xe000edfc
 80019bc:	e0000e00 	.word	0xe0000e00

080019c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
	return 1;
 80019c4:	2301      	movs	r3, #1
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_kill>:

int _kill(int pid, int sig)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019da:	f004 f8d9 	bl	8005b90 <__errno>
 80019de:	4603      	mov	r3, r0
 80019e0:	2216      	movs	r2, #22
 80019e2:	601a      	str	r2, [r3, #0]
	return -1;
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_exit>:

void _exit (int status)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ffe7 	bl	80019d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a02:	e7fe      	b.n	8001a02 <_exit+0x12>

08001a04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e00a      	b.n	8001a2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a16:	f3af 8000 	nop.w
 8001a1a:	4601      	mov	r1, r0
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	60ba      	str	r2, [r7, #8]
 8001a22:	b2ca      	uxtb	r2, r1
 8001a24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	dbf0      	blt.n	8001a16 <_read+0x12>
	}

return len;
 8001a34:	687b      	ldr	r3, [r7, #4]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	e009      	b.n	8001a64 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	60ba      	str	r2, [r7, #8]
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff89 	bl	8001970 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dbf1      	blt.n	8001a50 <_write+0x12>
	}
	return len;
 8001a6c:	687b      	ldr	r3, [r7, #4]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <_close>:

int _close(int file)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a9e:	605a      	str	r2, [r3, #4]
	return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <_isatty>:

int _isatty(int file)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
	return 0;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ae0:	480d      	ldr	r0, [pc, #52]	; (8001b18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ae2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ae4:	f003 fd70 	bl	80055c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <LoopForever+0x6>)
  ldr r1, =_edata
 8001aea:	490d      	ldr	r1, [pc, #52]	; (8001b20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aec:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <LoopForever+0xe>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b00:	4c0a      	ldr	r4, [pc, #40]	; (8001b2c <LoopForever+0x16>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b0e:	f004 f845 	bl	8005b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b12:	f7ff f8c1 	bl	8000c98 <main>

08001b16 <LoopForever>:

LoopForever:
    b LoopForever
 8001b16:	e7fe      	b.n	8001b16 <LoopForever>
  ldr   r0, =_estack
 8001b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b20:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b24:	0800b148 	.word	0x0800b148
  ldr r2, =_sbss
 8001b28:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b2c:	20000530 	.word	0x20000530

08001b30 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC_IRQHandler>
	...

08001b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	db0b      	blt.n	8001b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	4907      	ldr	r1, [pc, #28]	; (8001b6c <__NVIC_EnableIRQ+0x38>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	2001      	movs	r0, #1
 8001b56:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000e100 	.word	0xe000e100

08001b70 <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <inTIM4+0x30>)
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <inTIM4+0x34>)
 8001b78:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <inTIM4+0x30>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <inTIM4+0x30>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <inTIM4+0x30>)
 8001b88:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b8c:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <inTIM4+0x30>)
 8001b90:	220a      	movs	r2, #10
 8001b92:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <inTIM4+0x30>)
 8001b96:	f000 f807 	bl	8001ba8 <BasicTimer_Config>

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200002d0 	.word	0x200002d0
 8001ba4:	40000800 	.word	0x40000800

08001ba8 <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb8:	b672      	cpsid	i
}
 8001bba:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a85      	ldr	r2, [pc, #532]	; (8001dd8 <BasicTimer_Config+0x230>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d106      	bne.n	8001bd4 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001bc6:	4b85      	ldr	r3, [pc, #532]	; (8001ddc <BasicTimer_Config+0x234>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	4a84      	ldr	r2, [pc, #528]	; (8001ddc <BasicTimer_Config+0x234>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd2:	e030      	b.n	8001c36 <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bdc:	d106      	bne.n	8001bec <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001bde:	4b7f      	ldr	r3, [pc, #508]	; (8001ddc <BasicTimer_Config+0x234>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a7e      	ldr	r2, [pc, #504]	; (8001ddc <BasicTimer_Config+0x234>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	e024      	b.n	8001c36 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a7b      	ldr	r2, [pc, #492]	; (8001de0 <BasicTimer_Config+0x238>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d106      	bne.n	8001c04 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001bf6:	4b79      	ldr	r3, [pc, #484]	; (8001ddc <BasicTimer_Config+0x234>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a78      	ldr	r2, [pc, #480]	; (8001ddc <BasicTimer_Config+0x234>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
 8001c02:	e018      	b.n	8001c36 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a76      	ldr	r2, [pc, #472]	; (8001de4 <BasicTimer_Config+0x23c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d106      	bne.n	8001c1c <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001c0e:	4b73      	ldr	r3, [pc, #460]	; (8001ddc <BasicTimer_Config+0x234>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a72      	ldr	r2, [pc, #456]	; (8001ddc <BasicTimer_Config+0x234>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	e00c      	b.n	8001c36 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a71      	ldr	r2, [pc, #452]	; (8001de8 <BasicTimer_Config+0x240>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d106      	bne.n	8001c34 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001c26:	4b6d      	ldr	r3, [pc, #436]	; (8001ddc <BasicTimer_Config+0x234>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a6c      	ldr	r2, [pc, #432]	; (8001ddc <BasicTimer_Config+0x234>)
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	e000      	b.n	8001c36 <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8001c34:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001c44:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6892      	ldr	r2, [r2, #8]
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	791b      	ldrb	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f040 80d3 	bne.w	8001e00 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0210 	bic.w	r2, r2, #16
 8001c68:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2ba0      	cmp	r3, #160	; 0xa0
 8001c74:	d022      	beq.n	8001cbc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2bc8      	cmp	r3, #200	; 0xc8
 8001c7a:	d01f      	beq.n	8001cbc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c82:	d01b      	beq.n	8001cbc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001c8a:	d017      	beq.n	8001cbc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c92:	d013      	beq.n	8001cbc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001c9a:	d00f      	beq.n	8001cbc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001ca2:	d00b      	beq.n	8001cbc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001caa:	d007      	beq.n	8001cbc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001cb2:	d003      	beq.n	8001cbc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cba:	d10b      	bne.n	8001cd4 <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2264      	movs	r2, #100	; 0x64
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	3a01      	subs	r2, #1
 8001cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cd2:	e07c      	b.n	8001dce <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001cda:	d029      	beq.n	8001d30 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ce2:	d025      	beq.n	8001d30 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d020      	beq.n	8001d30 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001cf4:	d01c      	beq.n	8001d30 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d017      	beq.n	8001d30 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f241 7270 	movw	r2, #6000	; 0x1770
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d012      	beq.n	8001d30 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d00d      	beq.n	8001d30 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001d1a:	d009      	beq.n	8001d30 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f242 3228 	movw	r2, #9000	; 0x2328
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d004      	beq.n	8001d30 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d10c      	bne.n	8001d4a <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	3a01      	subs	r2, #1
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d48:	e041      	b.n	8001dce <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001d50:	d028      	beq.n	8001da4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d023      	beq.n	8001da4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f247 5230 	movw	r2, #30000	; 0x7530
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d01e      	beq.n	8001da4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d019      	beq.n	8001da4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d014      	beq.n	8001da4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d00f      	beq.n	8001da4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4a19      	ldr	r2, [pc, #100]	; (8001dec <BasicTimer_Config+0x244>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00b      	beq.n	8001da4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <BasicTimer_Config+0x248>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d007      	beq.n	8001da4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	4a17      	ldr	r2, [pc, #92]	; (8001df4 <BasicTimer_Config+0x24c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d003      	beq.n	8001da4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4a16      	ldr	r2, [pc, #88]	; (8001df8 <BasicTimer_Config+0x250>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d108      	bne.n	8001db6 <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	3a01      	subs	r2, #1
 8001db2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001db4:	e00b      	b.n	8001dce <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <BasicTimer_Config+0x254>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	3a01      	subs	r2, #1
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24
 8001dd6:	e027      	b.n	8001e28 <BasicTimer_Config+0x280>
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40000400 	.word	0x40000400
 8001de4:	40000800 	.word	0x40000800
 8001de8:	40000c00 	.word	0x40000c00
 8001dec:	00011170 	.word	0x00011170
 8001df0:	00013880 	.word	0x00013880
 8001df4:	00015f90 	.word	0x00015f90
 8001df8:	000186a0 	.word	0x000186a0
 8001dfc:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0210 	orr.w	r2, r2, #16
 8001e0e:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	3a01      	subs	r2, #1
 8001e1a:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	3a01      	subs	r2, #1
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7c1b      	ldrb	r3, [r3, #16]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d12d      	bne.n	8001e8c <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e48:	d103      	bne.n	8001e52 <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 8001e4a:	201c      	movs	r0, #28
 8001e4c:	f7ff fe72 	bl	8001b34 <__NVIC_EnableIRQ>
 8001e50:	e024      	b.n	8001e9c <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a14      	ldr	r2, [pc, #80]	; (8001ea8 <BasicTimer_Config+0x300>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d103      	bne.n	8001e64 <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8001e5c:	201d      	movs	r0, #29
 8001e5e:	f7ff fe69 	bl	8001b34 <__NVIC_EnableIRQ>
 8001e62:	e01b      	b.n	8001e9c <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a10      	ldr	r2, [pc, #64]	; (8001eac <BasicTimer_Config+0x304>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d103      	bne.n	8001e76 <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 8001e6e:	201e      	movs	r0, #30
 8001e70:	f7ff fe60 	bl	8001b34 <__NVIC_EnableIRQ>
 8001e74:	e012      	b.n	8001e9c <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <BasicTimer_Config+0x308>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d103      	bne.n	8001e88 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 8001e80:	2032      	movs	r0, #50	; 0x32
 8001e82:	f7ff fe57 	bl	8001b34 <__NVIC_EnableIRQ>
 8001e86:	e009      	b.n	8001e9c <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 8001e88:	bf00      	nop
 8001e8a:	e007      	b.n	8001e9c <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e9c:	b662      	cpsie	i
}
 8001e9e:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	40000800 	.word	0x40000800
 8001eb0:	40000c00 	.word	0x40000c00

08001eb4 <delay_ms>:

void delay_ms(uint16_t time_to_wait_ms){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 8001ebe:	4818      	ldr	r0, [pc, #96]	; (8001f20 <delay_ms+0x6c>)
 8001ec0:	f000 fa6e 	bl	80023a0 <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	0092      	lsls	r2, r2, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 8001ed8:	e016      	b.n	8001f08 <delay_ms+0x54>
		if (handlerTIM4_time.ptrTIMx->SR & TIM_SR_UIF)  {
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <delay_ms+0x6c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00f      	beq.n	8001f08 <delay_ms+0x54>
			CNT += handlerTIM4_time.ptrTIMx->ARR + 1;
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <delay_ms+0x6c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	3301      	adds	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	89fb      	ldrh	r3, [r7, #14]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	81fb      	strh	r3, [r7, #14]
			handlerTIM4_time.ptrTIMx->SR &= ~TIM_SR_UIF;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <delay_ms+0x6c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <delay_ms+0x6c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	611a      	str	r2, [r3, #16]
	while (CNT < limit){
 8001f08:	89fa      	ldrh	r2, [r7, #14]
 8001f0a:	89bb      	ldrh	r3, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d3e4      	bcc.n	8001eda <delay_ms+0x26>
		}
	}
	stopTimer(&handlerTIM4_time);
 8001f10:	4803      	ldr	r0, [pc, #12]	; (8001f20 <delay_ms+0x6c>)
 8001f12:	f000 fa57 	bl	80023c4 <stopTimer>
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200002d0 	.word	0x200002d0

08001f24 <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f28:	bf00      	nop
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f38:	bf00      	nop
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f48:	bf00      	nop
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f58:	bf00      	nop
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f68:	bf00      	nop
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f78:	bf00      	nop
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f88:	bf00      	nop
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f98:	bf00      	nop
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001fa8:	bf00      	nop
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001fb8:	bf00      	nop
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001fc8:	bf00      	nop
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001fd8:	bf00      	nop
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001fe8:	bf00      	nop
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001ff8:	bf00      	nop
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002008:	bf00      	nop
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002018:	bf00      	nop
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002028:	bf00      	nop
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8002038:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8002046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 8002056:	f7ff f913 	bl	8001280 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 800205a:	e066      	b.n	800212a <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 800205c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d012      	beq.n	8002090 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 800206a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002074:	f023 0302 	bic.w	r3, r3, #2
 8002078:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 800207a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002088:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 800208a:	f7ff ff5b 	bl	8001f44 <Capture_TIM2_Ch1_Callback>
}
 800208e:	e04c      	b.n	800212a <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8002090:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d012      	beq.n	80020c4 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 800209e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020a8:	f023 0304 	bic.w	r3, r3, #4
 80020ac:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 80020ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020bc:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 80020be:	f7ff ff49 	bl	8001f54 <Capture_TIM2_Ch2_Callback>
}
 80020c2:	e032      	b.n	800212a <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 80020c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d012      	beq.n	80020f8 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 80020d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020dc:	f023 0308 	bic.w	r3, r3, #8
 80020e0:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 80020e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020f0:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 80020f2:	f7ff ff37 	bl	8001f64 <Capture_TIM2_Ch3_Callback>
}
 80020f6:	e018      	b.n	800212a <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 80020f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	d011      	beq.n	800212a <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8002106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002110:	f023 0310 	bic.w	r3, r3, #16
 8002114:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8002116:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002124:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8002126:	f7ff ff25 	bl	8001f74 <Capture_TIM2_Ch4_Callback>
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8002134:	4b31      	ldr	r3, [pc, #196]	; (80021fc <TIM3_IRQHandler+0xcc>)
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 8002140:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <TIM3_IRQHandler+0xcc>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	4a2d      	ldr	r2, [pc, #180]	; (80021fc <TIM3_IRQHandler+0xcc>)
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 800214c:	f7ff f88e 	bl	800126c <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 8002150:	e052      	b.n	80021f8 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 8002152:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <TIM3_IRQHandler+0xcc>)
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00e      	beq.n	800217c <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 800215e:	4b27      	ldr	r3, [pc, #156]	; (80021fc <TIM3_IRQHandler+0xcc>)
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	4a26      	ldr	r2, [pc, #152]	; (80021fc <TIM3_IRQHandler+0xcc>)
 8002164:	f023 0302 	bic.w	r3, r3, #2
 8002168:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <TIM3_IRQHandler+0xcc>)
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	4a23      	ldr	r2, [pc, #140]	; (80021fc <TIM3_IRQHandler+0xcc>)
 8002170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002174:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 8002176:	f7ff ff05 	bl	8001f84 <Capture_TIM3_Ch1_Callback>
}
 800217a:	e03d      	b.n	80021f8 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 800217c:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <TIM3_IRQHandler+0xcc>)
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00e      	beq.n	80021a6 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <TIM3_IRQHandler+0xcc>)
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <TIM3_IRQHandler+0xcc>)
 800218e:	f023 0304 	bic.w	r3, r3, #4
 8002192:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <TIM3_IRQHandler+0xcc>)
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	4a18      	ldr	r2, [pc, #96]	; (80021fc <TIM3_IRQHandler+0xcc>)
 800219a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800219e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 80021a0:	f7ff fef8 	bl	8001f94 <Capture_TIM3_Ch2_Callback>
}
 80021a4:	e028      	b.n	80021f8 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <TIM3_IRQHandler+0xcc>)
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00e      	beq.n	80021d0 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <TIM3_IRQHandler+0xcc>)
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	4a11      	ldr	r2, [pc, #68]	; (80021fc <TIM3_IRQHandler+0xcc>)
 80021b8:	f023 0308 	bic.w	r3, r3, #8
 80021bc:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <TIM3_IRQHandler+0xcc>)
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	4a0e      	ldr	r2, [pc, #56]	; (80021fc <TIM3_IRQHandler+0xcc>)
 80021c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021c8:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 80021ca:	f7ff feeb 	bl	8001fa4 <Capture_TIM3_Ch3_Callback>
}
 80021ce:	e013      	b.n	80021f8 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <TIM3_IRQHandler+0xcc>)
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00d      	beq.n	80021f8 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 80021dc:	4b07      	ldr	r3, [pc, #28]	; (80021fc <TIM3_IRQHandler+0xcc>)
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <TIM3_IRQHandler+0xcc>)
 80021e2:	f023 0310 	bic.w	r3, r3, #16
 80021e6:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 80021e8:	4b04      	ldr	r3, [pc, #16]	; (80021fc <TIM3_IRQHandler+0xcc>)
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	4a03      	ldr	r2, [pc, #12]	; (80021fc <TIM3_IRQHandler+0xcc>)
 80021ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021f2:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 80021f4:	f7ff fede 	bl	8001fb4 <Capture_TIM3_Ch4_Callback>
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40000400 	.word	0x40000400

08002200 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8002204:	4b31      	ldr	r3, [pc, #196]	; (80022cc <TIM4_IRQHandler+0xcc>)
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 8002210:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <TIM4_IRQHandler+0xcc>)
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	4a2d      	ldr	r2, [pc, #180]	; (80022cc <TIM4_IRQHandler+0xcc>)
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 800221c:	f7ff fe82 	bl	8001f24 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 8002220:	e052      	b.n	80022c8 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 8002222:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <TIM4_IRQHandler+0xcc>)
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00e      	beq.n	800224c <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 800222e:	4b27      	ldr	r3, [pc, #156]	; (80022cc <TIM4_IRQHandler+0xcc>)
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	4a26      	ldr	r2, [pc, #152]	; (80022cc <TIM4_IRQHandler+0xcc>)
 8002234:	f023 0302 	bic.w	r3, r3, #2
 8002238:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <TIM4_IRQHandler+0xcc>)
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	4a23      	ldr	r2, [pc, #140]	; (80022cc <TIM4_IRQHandler+0xcc>)
 8002240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002244:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8002246:	f7ff febd 	bl	8001fc4 <Capture_TIM4_Ch1_Callback>
}
 800224a:	e03d      	b.n	80022c8 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <TIM4_IRQHandler+0xcc>)
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00e      	beq.n	8002276 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8002258:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <TIM4_IRQHandler+0xcc>)
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <TIM4_IRQHandler+0xcc>)
 800225e:	f023 0304 	bic.w	r3, r3, #4
 8002262:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <TIM4_IRQHandler+0xcc>)
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	4a18      	ldr	r2, [pc, #96]	; (80022cc <TIM4_IRQHandler+0xcc>)
 800226a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800226e:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8002270:	f7ff fec8 	bl	8002004 <Capture_TIM5_Ch2_Callback>
}
 8002274:	e028      	b.n	80022c8 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <TIM4_IRQHandler+0xcc>)
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00e      	beq.n	80022a0 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <TIM4_IRQHandler+0xcc>)
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	4a11      	ldr	r2, [pc, #68]	; (80022cc <TIM4_IRQHandler+0xcc>)
 8002288:	f023 0308 	bic.w	r3, r3, #8
 800228c:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <TIM4_IRQHandler+0xcc>)
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <TIM4_IRQHandler+0xcc>)
 8002294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002298:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 800229a:	f7ff fe9b 	bl	8001fd4 <Capture_TIM4_Ch3_Callback>
}
 800229e:	e013      	b.n	80022c8 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <TIM4_IRQHandler+0xcc>)
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00d      	beq.n	80022c8 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 80022ac:	4b07      	ldr	r3, [pc, #28]	; (80022cc <TIM4_IRQHandler+0xcc>)
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	4a06      	ldr	r2, [pc, #24]	; (80022cc <TIM4_IRQHandler+0xcc>)
 80022b2:	f023 0310 	bic.w	r3, r3, #16
 80022b6:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <TIM4_IRQHandler+0xcc>)
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	4a03      	ldr	r2, [pc, #12]	; (80022cc <TIM4_IRQHandler+0xcc>)
 80022be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022c2:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 80022c4:	f7ff fe8e 	bl	8001fe4 <Capture_TIM4_Ch4_Callback>
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40000800 	.word	0x40000800

080022d0 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 80022d4:	4b31      	ldr	r3, [pc, #196]	; (800239c <TIM5_IRQHandler+0xcc>)
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 80022e0:	4b2e      	ldr	r3, [pc, #184]	; (800239c <TIM5_IRQHandler+0xcc>)
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	4a2d      	ldr	r2, [pc, #180]	; (800239c <TIM5_IRQHandler+0xcc>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 80022ec:	f7ff fe22 	bl	8001f34 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 80022f0:	e052      	b.n	8002398 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 80022f2:	4b2a      	ldr	r3, [pc, #168]	; (800239c <TIM5_IRQHandler+0xcc>)
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00e      	beq.n	800231c <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 80022fe:	4b27      	ldr	r3, [pc, #156]	; (800239c <TIM5_IRQHandler+0xcc>)
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	4a26      	ldr	r2, [pc, #152]	; (800239c <TIM5_IRQHandler+0xcc>)
 8002304:	f023 0302 	bic.w	r3, r3, #2
 8002308:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 800230a:	4b24      	ldr	r3, [pc, #144]	; (800239c <TIM5_IRQHandler+0xcc>)
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	4a23      	ldr	r2, [pc, #140]	; (800239c <TIM5_IRQHandler+0xcc>)
 8002310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002314:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8002316:	f7ff fe6d 	bl	8001ff4 <Capture_TIM5_Ch1_Callback>
}
 800231a:	e03d      	b.n	8002398 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 800231c:	4b1f      	ldr	r3, [pc, #124]	; (800239c <TIM5_IRQHandler+0xcc>)
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00e      	beq.n	8002346 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8002328:	4b1c      	ldr	r3, [pc, #112]	; (800239c <TIM5_IRQHandler+0xcc>)
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	4a1b      	ldr	r2, [pc, #108]	; (800239c <TIM5_IRQHandler+0xcc>)
 800232e:	f023 0304 	bic.w	r3, r3, #4
 8002332:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <TIM5_IRQHandler+0xcc>)
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	4a18      	ldr	r2, [pc, #96]	; (800239c <TIM5_IRQHandler+0xcc>)
 800233a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800233e:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8002340:	f7ff fe60 	bl	8002004 <Capture_TIM5_Ch2_Callback>
}
 8002344:	e028      	b.n	8002398 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <TIM5_IRQHandler+0xcc>)
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00e      	beq.n	8002370 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <TIM5_IRQHandler+0xcc>)
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	4a11      	ldr	r2, [pc, #68]	; (800239c <TIM5_IRQHandler+0xcc>)
 8002358:	f023 0308 	bic.w	r3, r3, #8
 800235c:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <TIM5_IRQHandler+0xcc>)
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	4a0e      	ldr	r2, [pc, #56]	; (800239c <TIM5_IRQHandler+0xcc>)
 8002364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002368:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 800236a:	f7ff fe53 	bl	8002014 <Capture_TIM5_Ch3_Callback>
}
 800236e:	e013      	b.n	8002398 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <TIM5_IRQHandler+0xcc>)
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00d      	beq.n	8002398 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <TIM5_IRQHandler+0xcc>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <TIM5_IRQHandler+0xcc>)
 8002382:	f023 0310 	bic.w	r3, r3, #16
 8002386:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <TIM5_IRQHandler+0xcc>)
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	4a03      	ldr	r2, [pc, #12]	; (800239c <TIM5_IRQHandler+0xcc>)
 800238e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002392:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8002394:	f7ff fe46 	bl	8002024 <Capture_TIM5_Ch4_Callback>
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40000c00 	.word	0x40000c00

080023a0 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <__NVIC_EnableIRQ>:
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db0b      	blt.n	8002412 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4907      	ldr	r1, [pc, #28]	; (8002420 <__NVIC_EnableIRQ+0x38>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000e100 	.word	0xe000e100

08002424 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f001 f825 	bl	8003480 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 8002436:	4b96      	ldr	r3, [pc, #600]	; (8002690 <extInt_Config+0x26c>)
 8002438:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800243c:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	791b      	ldrb	r3, [r3, #4]
 8002444:	2b0f      	cmp	r3, #15
 8002446:	f200 85cd 	bhi.w	8002fe4 <extInt_Config+0xbc0>
 800244a:	a201      	add	r2, pc, #4	; (adr r2, 8002450 <extInt_Config+0x2c>)
 800244c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002450:	08002491 	.word	0x08002491
 8002454:	08002547 	.word	0x08002547
 8002458:	080025fd 	.word	0x080025fd
 800245c:	080026d3 	.word	0x080026d3
 8002460:	08002789 	.word	0x08002789
 8002464:	08002837 	.word	0x08002837
 8002468:	080028fd 	.word	0x080028fd
 800246c:	080029a5 	.word	0x080029a5
 8002470:	08002a4d 	.word	0x08002a4d
 8002474:	08002af5 	.word	0x08002af5
 8002478:	08002bbb 	.word	0x08002bbb
 800247c:	08002c63 	.word	0x08002c63
 8002480:	08002d0b 	.word	0x08002d0b
 8002484:	08002dd1 	.word	0x08002dd1
 8002488:	08002e77 	.word	0x08002e77
 800248c:	08002f1f 	.word	0x08002f1f
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8002490:	4b80      	ldr	r3, [pc, #512]	; (8002694 <extInt_Config+0x270>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4a7f      	ldr	r2, [pc, #508]	; (8002694 <extInt_Config+0x270>)
 8002496:	f023 030f 	bic.w	r3, r3, #15
 800249a:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a7d      	ldr	r2, [pc, #500]	; (8002698 <extInt_Config+0x274>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d105      	bne.n	80024b4 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80024a8:	4b7a      	ldr	r3, [pc, #488]	; (8002694 <extInt_Config+0x270>)
 80024aa:	4a7a      	ldr	r2, [pc, #488]	; (8002694 <extInt_Config+0x270>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80024b0:	f000 bd9a 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a78      	ldr	r2, [pc, #480]	; (800269c <extInt_Config+0x278>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d107      	bne.n	80024d0 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80024c0:	4b74      	ldr	r3, [pc, #464]	; (8002694 <extInt_Config+0x270>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4a73      	ldr	r2, [pc, #460]	; (8002694 <extInt_Config+0x270>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6093      	str	r3, [r2, #8]
					break;
 80024cc:	f000 bd8c 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a72      	ldr	r2, [pc, #456]	; (80026a0 <extInt_Config+0x27c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d107      	bne.n	80024ec <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 80024dc:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <extInt_Config+0x270>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4a6c      	ldr	r2, [pc, #432]	; (8002694 <extInt_Config+0x270>)
 80024e2:	f043 0302 	orr.w	r3, r3, #2
 80024e6:	6093      	str	r3, [r2, #8]
					break;
 80024e8:	f000 bd7e 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6c      	ldr	r2, [pc, #432]	; (80026a4 <extInt_Config+0x280>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d107      	bne.n	8002508 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 80024f8:	4b66      	ldr	r3, [pc, #408]	; (8002694 <extInt_Config+0x270>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a65      	ldr	r2, [pc, #404]	; (8002694 <extInt_Config+0x270>)
 80024fe:	f043 0303 	orr.w	r3, r3, #3
 8002502:	6093      	str	r3, [r2, #8]
					break;
 8002504:	f000 bd70 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a66      	ldr	r2, [pc, #408]	; (80026a8 <extInt_Config+0x284>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d107      	bne.n	8002524 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8002514:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <extInt_Config+0x270>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	4a5e      	ldr	r2, [pc, #376]	; (8002694 <extInt_Config+0x270>)
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	6093      	str	r3, [r2, #8]
					break;
 8002520:	f000 bd62 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a60      	ldr	r2, [pc, #384]	; (80026ac <extInt_Config+0x288>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d107      	bne.n	8002540 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8002530:	4b58      	ldr	r3, [pc, #352]	; (8002694 <extInt_Config+0x270>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a57      	ldr	r2, [pc, #348]	; (8002694 <extInt_Config+0x270>)
 8002536:	f043 0307 	orr.w	r3, r3, #7
 800253a:	6093      	str	r3, [r2, #8]
					break;
 800253c:	f000 bd54 	b.w	8002fe8 <extInt_Config+0xbc4>
						__NOP();
 8002540:	bf00      	nop
					break;
 8002542:	f000 bd51 	b.w	8002fe8 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8002546:	4b53      	ldr	r3, [pc, #332]	; (8002694 <extInt_Config+0x270>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	4a52      	ldr	r2, [pc, #328]	; (8002694 <extInt_Config+0x270>)
 800254c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002550:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a4f      	ldr	r2, [pc, #316]	; (8002698 <extInt_Config+0x274>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d105      	bne.n	800256a <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 800255e:	4b4d      	ldr	r3, [pc, #308]	; (8002694 <extInt_Config+0x270>)
 8002560:	4a4c      	ldr	r2, [pc, #304]	; (8002694 <extInt_Config+0x270>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8002566:	f000 bd3f 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a4a      	ldr	r2, [pc, #296]	; (800269c <extInt_Config+0x278>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d107      	bne.n	8002586 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8002576:	4b47      	ldr	r3, [pc, #284]	; (8002694 <extInt_Config+0x270>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	4a46      	ldr	r2, [pc, #280]	; (8002694 <extInt_Config+0x270>)
 800257c:	f043 0310 	orr.w	r3, r3, #16
 8002580:	6093      	str	r3, [r2, #8]
					break;
 8002582:	f000 bd31 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a44      	ldr	r2, [pc, #272]	; (80026a0 <extInt_Config+0x27c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d107      	bne.n	80025a2 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8002592:	4b40      	ldr	r3, [pc, #256]	; (8002694 <extInt_Config+0x270>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	4a3f      	ldr	r2, [pc, #252]	; (8002694 <extInt_Config+0x270>)
 8002598:	f043 0320 	orr.w	r3, r3, #32
 800259c:	6093      	str	r3, [r2, #8]
					break;
 800259e:	f000 bd23 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a3e      	ldr	r2, [pc, #248]	; (80026a4 <extInt_Config+0x280>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d107      	bne.n	80025be <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80025ae:	4b39      	ldr	r3, [pc, #228]	; (8002694 <extInt_Config+0x270>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	4a38      	ldr	r2, [pc, #224]	; (8002694 <extInt_Config+0x270>)
 80025b4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80025b8:	6093      	str	r3, [r2, #8]
					break;
 80025ba:	f000 bd15 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a38      	ldr	r2, [pc, #224]	; (80026a8 <extInt_Config+0x284>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d107      	bne.n	80025da <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 80025ca:	4b32      	ldr	r3, [pc, #200]	; (8002694 <extInt_Config+0x270>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	4a31      	ldr	r2, [pc, #196]	; (8002694 <extInt_Config+0x270>)
 80025d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025d4:	6093      	str	r3, [r2, #8]
					break;
 80025d6:	f000 bd07 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a32      	ldr	r2, [pc, #200]	; (80026ac <extInt_Config+0x288>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d107      	bne.n	80025f6 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 80025e6:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <extInt_Config+0x270>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	4a2a      	ldr	r2, [pc, #168]	; (8002694 <extInt_Config+0x270>)
 80025ec:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80025f0:	6093      	str	r3, [r2, #8]
					break;
 80025f2:	f000 bcf9 	b.w	8002fe8 <extInt_Config+0xbc4>
						__NOP();
 80025f6:	bf00      	nop
					break;
 80025f8:	f000 bcf6 	b.w	8002fe8 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <extInt_Config+0x270>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a24      	ldr	r2, [pc, #144]	; (8002694 <extInt_Config+0x270>)
 8002602:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002606:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a22      	ldr	r2, [pc, #136]	; (8002698 <extInt_Config+0x274>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d105      	bne.n	8002620 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8002614:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <extInt_Config+0x270>)
 8002616:	4a1f      	ldr	r2, [pc, #124]	; (8002694 <extInt_Config+0x270>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 800261c:	f000 bce4 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1d      	ldr	r2, [pc, #116]	; (800269c <extInt_Config+0x278>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d107      	bne.n	800263c <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 800262c:	4b19      	ldr	r3, [pc, #100]	; (8002694 <extInt_Config+0x270>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4a18      	ldr	r2, [pc, #96]	; (8002694 <extInt_Config+0x270>)
 8002632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002636:	6093      	str	r3, [r2, #8]
					break;
 8002638:	f000 bcd6 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a17      	ldr	r2, [pc, #92]	; (80026a0 <extInt_Config+0x27c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d107      	bne.n	8002658 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <extInt_Config+0x270>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4a11      	ldr	r2, [pc, #68]	; (8002694 <extInt_Config+0x270>)
 800264e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002652:	6093      	str	r3, [r2, #8]
					break;
 8002654:	f000 bcc8 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a11      	ldr	r2, [pc, #68]	; (80026a4 <extInt_Config+0x280>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d107      	bne.n	8002674 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <extInt_Config+0x270>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <extInt_Config+0x270>)
 800266a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800266e:	6093      	str	r3, [r2, #8]
					break;
 8002670:	f000 bcba 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <extInt_Config+0x284>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d117      	bne.n	80026b0 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <extInt_Config+0x270>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a03      	ldr	r2, [pc, #12]	; (8002694 <extInt_Config+0x270>)
 8002686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800268a:	6093      	str	r3, [r2, #8]
					break;
 800268c:	f000 bcac 	b.w	8002fe8 <extInt_Config+0xbc4>
 8002690:	40023800 	.word	0x40023800
 8002694:	40013800 	.word	0x40013800
 8002698:	40020000 	.word	0x40020000
 800269c:	40020400 	.word	0x40020400
 80026a0:	40020800 	.word	0x40020800
 80026a4:	40020c00 	.word	0x40020c00
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a8a      	ldr	r2, [pc, #552]	; (80028e0 <extInt_Config+0x4bc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d107      	bne.n	80026cc <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80026bc:	4b89      	ldr	r3, [pc, #548]	; (80028e4 <extInt_Config+0x4c0>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a88      	ldr	r2, [pc, #544]	; (80028e4 <extInt_Config+0x4c0>)
 80026c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026c6:	6093      	str	r3, [r2, #8]
					break;
 80026c8:	f000 bc8e 	b.w	8002fe8 <extInt_Config+0xbc4>
						__NOP();
 80026cc:	bf00      	nop
					break;
 80026ce:	f000 bc8b 	b.w	8002fe8 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 80026d2:	4b84      	ldr	r3, [pc, #528]	; (80028e4 <extInt_Config+0x4c0>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	4a83      	ldr	r2, [pc, #524]	; (80028e4 <extInt_Config+0x4c0>)
 80026d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026dc:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a80      	ldr	r2, [pc, #512]	; (80028e8 <extInt_Config+0x4c4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d105      	bne.n	80026f6 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 80026ea:	4b7e      	ldr	r3, [pc, #504]	; (80028e4 <extInt_Config+0x4c0>)
 80026ec:	4a7d      	ldr	r2, [pc, #500]	; (80028e4 <extInt_Config+0x4c0>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80026f2:	f000 bc79 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a7b      	ldr	r2, [pc, #492]	; (80028ec <extInt_Config+0x4c8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d107      	bne.n	8002712 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8002702:	4b78      	ldr	r3, [pc, #480]	; (80028e4 <extInt_Config+0x4c0>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	4a77      	ldr	r2, [pc, #476]	; (80028e4 <extInt_Config+0x4c0>)
 8002708:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800270c:	6093      	str	r3, [r2, #8]
					break;
 800270e:	f000 bc6b 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a75      	ldr	r2, [pc, #468]	; (80028f0 <extInt_Config+0x4cc>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d107      	bne.n	800272e <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 800271e:	4b71      	ldr	r3, [pc, #452]	; (80028e4 <extInt_Config+0x4c0>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	4a70      	ldr	r2, [pc, #448]	; (80028e4 <extInt_Config+0x4c0>)
 8002724:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002728:	6093      	str	r3, [r2, #8]
					break;
 800272a:	f000 bc5d 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a6f      	ldr	r2, [pc, #444]	; (80028f4 <extInt_Config+0x4d0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d107      	bne.n	800274a <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 800273a:	4b6a      	ldr	r3, [pc, #424]	; (80028e4 <extInt_Config+0x4c0>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	4a69      	ldr	r2, [pc, #420]	; (80028e4 <extInt_Config+0x4c0>)
 8002740:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002744:	6093      	str	r3, [r2, #8]
					break;
 8002746:	f000 bc4f 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a69      	ldr	r2, [pc, #420]	; (80028f8 <extInt_Config+0x4d4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d107      	bne.n	8002766 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8002756:	4b63      	ldr	r3, [pc, #396]	; (80028e4 <extInt_Config+0x4c0>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	4a62      	ldr	r2, [pc, #392]	; (80028e4 <extInt_Config+0x4c0>)
 800275c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002760:	6093      	str	r3, [r2, #8]
					break;
 8002762:	f000 bc41 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a5c      	ldr	r2, [pc, #368]	; (80028e0 <extInt_Config+0x4bc>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d107      	bne.n	8002782 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8002772:	4b5c      	ldr	r3, [pc, #368]	; (80028e4 <extInt_Config+0x4c0>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4a5b      	ldr	r2, [pc, #364]	; (80028e4 <extInt_Config+0x4c0>)
 8002778:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800277c:	6093      	str	r3, [r2, #8]
					break;
 800277e:	f000 bc33 	b.w	8002fe8 <extInt_Config+0xbc4>
						__NOP();
 8002782:	bf00      	nop
					break;
 8002784:	f000 bc30 	b.w	8002fe8 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8002788:	4b56      	ldr	r3, [pc, #344]	; (80028e4 <extInt_Config+0x4c0>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a55      	ldr	r2, [pc, #340]	; (80028e4 <extInt_Config+0x4c0>)
 800278e:	f023 030f 	bic.w	r3, r3, #15
 8002792:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a53      	ldr	r2, [pc, #332]	; (80028e8 <extInt_Config+0x4c4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d105      	bne.n	80027ac <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80027a0:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <extInt_Config+0x4c0>)
 80027a2:	4a50      	ldr	r2, [pc, #320]	; (80028e4 <extInt_Config+0x4c0>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80027a8:	f000 bc1e 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a4e      	ldr	r2, [pc, #312]	; (80028ec <extInt_Config+0x4c8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d107      	bne.n	80027c8 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80027b8:	4b4a      	ldr	r3, [pc, #296]	; (80028e4 <extInt_Config+0x4c0>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a49      	ldr	r2, [pc, #292]	; (80028e4 <extInt_Config+0x4c0>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	60d3      	str	r3, [r2, #12]
					break;
 80027c4:	f000 bc10 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a48      	ldr	r2, [pc, #288]	; (80028f0 <extInt_Config+0x4cc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d107      	bne.n	80027e4 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 80027d4:	4b43      	ldr	r3, [pc, #268]	; (80028e4 <extInt_Config+0x4c0>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a42      	ldr	r2, [pc, #264]	; (80028e4 <extInt_Config+0x4c0>)
 80027da:	f043 0302 	orr.w	r3, r3, #2
 80027de:	60d3      	str	r3, [r2, #12]
					break;
 80027e0:	f000 bc02 	b.w	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a42      	ldr	r2, [pc, #264]	; (80028f4 <extInt_Config+0x4d0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d106      	bne.n	80027fe <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 80027f0:	4b3c      	ldr	r3, [pc, #240]	; (80028e4 <extInt_Config+0x4c0>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a3b      	ldr	r2, [pc, #236]	; (80028e4 <extInt_Config+0x4c0>)
 80027f6:	f043 0303 	orr.w	r3, r3, #3
 80027fa:	60d3      	str	r3, [r2, #12]
					break;
 80027fc:	e3f4      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a3c      	ldr	r2, [pc, #240]	; (80028f8 <extInt_Config+0x4d4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d106      	bne.n	8002818 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 800280a:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <extInt_Config+0x4c0>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	4a35      	ldr	r2, [pc, #212]	; (80028e4 <extInt_Config+0x4c0>)
 8002810:	f043 0304 	orr.w	r3, r3, #4
 8002814:	60d3      	str	r3, [r2, #12]
					break;
 8002816:	e3e7      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a30      	ldr	r2, [pc, #192]	; (80028e0 <extInt_Config+0x4bc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d106      	bne.n	8002832 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8002824:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <extInt_Config+0x4c0>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4a2e      	ldr	r2, [pc, #184]	; (80028e4 <extInt_Config+0x4c0>)
 800282a:	f043 0307 	orr.w	r3, r3, #7
 800282e:	60d3      	str	r3, [r2, #12]
					break;
 8002830:	e3da      	b.n	8002fe8 <extInt_Config+0xbc4>
						__NOP();
 8002832:	bf00      	nop
					break;
 8002834:	e3d8      	b.n	8002fe8 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8002836:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <extInt_Config+0x4c0>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	4a2a      	ldr	r2, [pc, #168]	; (80028e4 <extInt_Config+0x4c0>)
 800283c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002840:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a27      	ldr	r2, [pc, #156]	; (80028e8 <extInt_Config+0x4c4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d104      	bne.n	8002858 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 800284e:	4b25      	ldr	r3, [pc, #148]	; (80028e4 <extInt_Config+0x4c0>)
 8002850:	4a24      	ldr	r2, [pc, #144]	; (80028e4 <extInt_Config+0x4c0>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8002856:	e3c7      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a23      	ldr	r2, [pc, #140]	; (80028ec <extInt_Config+0x4c8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d106      	bne.n	8002872 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8002864:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <extInt_Config+0x4c0>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a1e      	ldr	r2, [pc, #120]	; (80028e4 <extInt_Config+0x4c0>)
 800286a:	f043 0310 	orr.w	r3, r3, #16
 800286e:	60d3      	str	r3, [r2, #12]
					break;
 8002870:	e3ba      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <extInt_Config+0x4cc>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d106      	bne.n	800288c <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 800287e:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <extInt_Config+0x4c0>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	4a18      	ldr	r2, [pc, #96]	; (80028e4 <extInt_Config+0x4c0>)
 8002884:	f043 0320 	orr.w	r3, r3, #32
 8002888:	60d3      	str	r3, [r2, #12]
					break;
 800288a:	e3ad      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a18      	ldr	r2, [pc, #96]	; (80028f4 <extInt_Config+0x4d0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d106      	bne.n	80028a6 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <extInt_Config+0x4c0>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a11      	ldr	r2, [pc, #68]	; (80028e4 <extInt_Config+0x4c0>)
 800289e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80028a2:	60d3      	str	r3, [r2, #12]
					break;
 80028a4:	e3a0      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <extInt_Config+0x4d4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d106      	bne.n	80028c0 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80028b2:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <extInt_Config+0x4c0>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <extInt_Config+0x4c0>)
 80028b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028bc:	60d3      	str	r3, [r2, #12]
					break;
 80028be:	e393      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a06      	ldr	r2, [pc, #24]	; (80028e0 <extInt_Config+0x4bc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d106      	bne.n	80028da <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <extInt_Config+0x4c0>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <extInt_Config+0x4c0>)
 80028d2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80028d6:	60d3      	str	r3, [r2, #12]
					break;
 80028d8:	e386      	b.n	8002fe8 <extInt_Config+0xbc4>
						__NOP();
 80028da:	bf00      	nop
					break;
 80028dc:	e384      	b.n	8002fe8 <extInt_Config+0xbc4>
 80028de:	bf00      	nop
 80028e0:	40021c00 	.word	0x40021c00
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40020000 	.word	0x40020000
 80028ec:	40020400 	.word	0x40020400
 80028f0:	40020800 	.word	0x40020800
 80028f4:	40020c00 	.word	0x40020c00
 80028f8:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 80028fc:	4b86      	ldr	r3, [pc, #536]	; (8002b18 <extInt_Config+0x6f4>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a85      	ldr	r2, [pc, #532]	; (8002b18 <extInt_Config+0x6f4>)
 8002902:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002906:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a83      	ldr	r2, [pc, #524]	; (8002b1c <extInt_Config+0x6f8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d104      	bne.n	800291e <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8002914:	4b80      	ldr	r3, [pc, #512]	; (8002b18 <extInt_Config+0x6f4>)
 8002916:	4a80      	ldr	r2, [pc, #512]	; (8002b18 <extInt_Config+0x6f4>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 800291c:	e364      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a7e      	ldr	r2, [pc, #504]	; (8002b20 <extInt_Config+0x6fc>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d106      	bne.n	8002938 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 800292a:	4b7b      	ldr	r3, [pc, #492]	; (8002b18 <extInt_Config+0x6f4>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	4a7a      	ldr	r2, [pc, #488]	; (8002b18 <extInt_Config+0x6f4>)
 8002930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002934:	60d3      	str	r3, [r2, #12]
					break;
 8002936:	e357      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a79      	ldr	r2, [pc, #484]	; (8002b24 <extInt_Config+0x700>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d106      	bne.n	8002952 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8002944:	4b74      	ldr	r3, [pc, #464]	; (8002b18 <extInt_Config+0x6f4>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a73      	ldr	r2, [pc, #460]	; (8002b18 <extInt_Config+0x6f4>)
 800294a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800294e:	60d3      	str	r3, [r2, #12]
					break;
 8002950:	e34a      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a73      	ldr	r2, [pc, #460]	; (8002b28 <extInt_Config+0x704>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d106      	bne.n	800296c <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800295e:	4b6e      	ldr	r3, [pc, #440]	; (8002b18 <extInt_Config+0x6f4>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	4a6d      	ldr	r2, [pc, #436]	; (8002b18 <extInt_Config+0x6f4>)
 8002964:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002968:	60d3      	str	r3, [r2, #12]
					break;
 800296a:	e33d      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a6e      	ldr	r2, [pc, #440]	; (8002b2c <extInt_Config+0x708>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d106      	bne.n	8002986 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8002978:	4b67      	ldr	r3, [pc, #412]	; (8002b18 <extInt_Config+0x6f4>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4a66      	ldr	r2, [pc, #408]	; (8002b18 <extInt_Config+0x6f4>)
 800297e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002982:	60d3      	str	r3, [r2, #12]
					break;
 8002984:	e330      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a68      	ldr	r2, [pc, #416]	; (8002b30 <extInt_Config+0x70c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d106      	bne.n	80029a0 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8002992:	4b61      	ldr	r3, [pc, #388]	; (8002b18 <extInt_Config+0x6f4>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	4a60      	ldr	r2, [pc, #384]	; (8002b18 <extInt_Config+0x6f4>)
 8002998:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800299c:	60d3      	str	r3, [r2, #12]
					break;
 800299e:	e323      	b.n	8002fe8 <extInt_Config+0xbc4>
						__NOP();
 80029a0:	bf00      	nop
					break;
 80029a2:	e321      	b.n	8002fe8 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 80029a4:	4b5c      	ldr	r3, [pc, #368]	; (8002b18 <extInt_Config+0x6f4>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4a5b      	ldr	r2, [pc, #364]	; (8002b18 <extInt_Config+0x6f4>)
 80029aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029ae:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a59      	ldr	r2, [pc, #356]	; (8002b1c <extInt_Config+0x6f8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d104      	bne.n	80029c6 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80029bc:	4b56      	ldr	r3, [pc, #344]	; (8002b18 <extInt_Config+0x6f4>)
 80029be:	4a56      	ldr	r2, [pc, #344]	; (8002b18 <extInt_Config+0x6f4>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80029c4:	e310      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a54      	ldr	r2, [pc, #336]	; (8002b20 <extInt_Config+0x6fc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d106      	bne.n	80029e0 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 80029d2:	4b51      	ldr	r3, [pc, #324]	; (8002b18 <extInt_Config+0x6f4>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	4a50      	ldr	r2, [pc, #320]	; (8002b18 <extInt_Config+0x6f4>)
 80029d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029dc:	60d3      	str	r3, [r2, #12]
					break;
 80029de:	e303      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a4f      	ldr	r2, [pc, #316]	; (8002b24 <extInt_Config+0x700>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d106      	bne.n	80029fa <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 80029ec:	4b4a      	ldr	r3, [pc, #296]	; (8002b18 <extInt_Config+0x6f4>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a49      	ldr	r2, [pc, #292]	; (8002b18 <extInt_Config+0x6f4>)
 80029f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029f6:	60d3      	str	r3, [r2, #12]
					break;
 80029f8:	e2f6      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a49      	ldr	r2, [pc, #292]	; (8002b28 <extInt_Config+0x704>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d106      	bne.n	8002a14 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8002a06:	4b44      	ldr	r3, [pc, #272]	; (8002b18 <extInt_Config+0x6f4>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	4a43      	ldr	r2, [pc, #268]	; (8002b18 <extInt_Config+0x6f4>)
 8002a0c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002a10:	60d3      	str	r3, [r2, #12]
					break;
 8002a12:	e2e9      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a44      	ldr	r2, [pc, #272]	; (8002b2c <extInt_Config+0x708>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d106      	bne.n	8002a2e <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8002a20:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <extInt_Config+0x6f4>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a3c      	ldr	r2, [pc, #240]	; (8002b18 <extInt_Config+0x6f4>)
 8002a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a2a:	60d3      	str	r3, [r2, #12]
					break;
 8002a2c:	e2dc      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a3e      	ldr	r2, [pc, #248]	; (8002b30 <extInt_Config+0x70c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d106      	bne.n	8002a48 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8002a3a:	4b37      	ldr	r3, [pc, #220]	; (8002b18 <extInt_Config+0x6f4>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	4a36      	ldr	r2, [pc, #216]	; (8002b18 <extInt_Config+0x6f4>)
 8002a40:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002a44:	60d3      	str	r3, [r2, #12]
					break;
 8002a46:	e2cf      	b.n	8002fe8 <extInt_Config+0xbc4>
						__NOP();
 8002a48:	bf00      	nop
					break;
 8002a4a:	e2cd      	b.n	8002fe8 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8002a4c:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <extInt_Config+0x6f4>)
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	4a31      	ldr	r2, [pc, #196]	; (8002b18 <extInt_Config+0x6f4>)
 8002a52:	f023 030f 	bic.w	r3, r3, #15
 8002a56:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a2f      	ldr	r2, [pc, #188]	; (8002b1c <extInt_Config+0x6f8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d104      	bne.n	8002a6e <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8002a64:	4b2c      	ldr	r3, [pc, #176]	; (8002b18 <extInt_Config+0x6f4>)
 8002a66:	4a2c      	ldr	r2, [pc, #176]	; (8002b18 <extInt_Config+0x6f4>)
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002a6c:	e2bc      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a2a      	ldr	r2, [pc, #168]	; (8002b20 <extInt_Config+0x6fc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d106      	bne.n	8002a88 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8002a7a:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <extInt_Config+0x6f4>)
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	4a26      	ldr	r2, [pc, #152]	; (8002b18 <extInt_Config+0x6f4>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6113      	str	r3, [r2, #16]
					break;
 8002a86:	e2af      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a25      	ldr	r2, [pc, #148]	; (8002b24 <extInt_Config+0x700>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d106      	bne.n	8002aa2 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <extInt_Config+0x6f4>)
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	4a1f      	ldr	r2, [pc, #124]	; (8002b18 <extInt_Config+0x6f4>)
 8002a9a:	f043 0302 	orr.w	r3, r3, #2
 8002a9e:	6113      	str	r3, [r2, #16]
					break;
 8002aa0:	e2a2      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <extInt_Config+0x704>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d106      	bne.n	8002abc <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8002aae:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <extInt_Config+0x6f4>)
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	4a19      	ldr	r2, [pc, #100]	; (8002b18 <extInt_Config+0x6f4>)
 8002ab4:	f043 0303 	orr.w	r3, r3, #3
 8002ab8:	6113      	str	r3, [r2, #16]
					break;
 8002aba:	e295      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <extInt_Config+0x708>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d106      	bne.n	8002ad6 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8002ac8:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <extInt_Config+0x6f4>)
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	4a12      	ldr	r2, [pc, #72]	; (8002b18 <extInt_Config+0x6f4>)
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	6113      	str	r3, [r2, #16]
					break;
 8002ad4:	e288      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <extInt_Config+0x70c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d106      	bne.n	8002af0 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <extInt_Config+0x6f4>)
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	; (8002b18 <extInt_Config+0x6f4>)
 8002ae8:	f043 0307 	orr.w	r3, r3, #7
 8002aec:	6113      	str	r3, [r2, #16]
					break;
 8002aee:	e27b      	b.n	8002fe8 <extInt_Config+0xbc4>
						__NOP();
 8002af0:	bf00      	nop
					break;
 8002af2:	e279      	b.n	8002fe8 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <extInt_Config+0x6f4>)
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <extInt_Config+0x6f4>)
 8002afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002afe:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a05      	ldr	r2, [pc, #20]	; (8002b1c <extInt_Config+0x6f8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d113      	bne.n	8002b34 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8002b0c:	4b02      	ldr	r3, [pc, #8]	; (8002b18 <extInt_Config+0x6f4>)
 8002b0e:	4a02      	ldr	r2, [pc, #8]	; (8002b18 <extInt_Config+0x6f4>)
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002b14:	e268      	b.n	8002fe8 <extInt_Config+0xbc4>
 8002b16:	bf00      	nop
 8002b18:	40013800 	.word	0x40013800
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	40020400 	.word	0x40020400
 8002b24:	40020800 	.word	0x40020800
 8002b28:	40020c00 	.word	0x40020c00
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a83      	ldr	r2, [pc, #524]	; (8002d48 <extInt_Config+0x924>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d106      	bne.n	8002b4e <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8002b40:	4b82      	ldr	r3, [pc, #520]	; (8002d4c <extInt_Config+0x928>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	4a81      	ldr	r2, [pc, #516]	; (8002d4c <extInt_Config+0x928>)
 8002b46:	f043 0310 	orr.w	r3, r3, #16
 8002b4a:	6113      	str	r3, [r2, #16]
					break;
 8002b4c:	e24c      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a7e      	ldr	r2, [pc, #504]	; (8002d50 <extInt_Config+0x92c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d106      	bne.n	8002b68 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8002b5a:	4b7c      	ldr	r3, [pc, #496]	; (8002d4c <extInt_Config+0x928>)
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	4a7b      	ldr	r2, [pc, #492]	; (8002d4c <extInt_Config+0x928>)
 8002b60:	f043 0320 	orr.w	r3, r3, #32
 8002b64:	6113      	str	r3, [r2, #16]
					break;
 8002b66:	e23f      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a79      	ldr	r2, [pc, #484]	; (8002d54 <extInt_Config+0x930>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d106      	bne.n	8002b82 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8002b74:	4b75      	ldr	r3, [pc, #468]	; (8002d4c <extInt_Config+0x928>)
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	4a74      	ldr	r2, [pc, #464]	; (8002d4c <extInt_Config+0x928>)
 8002b7a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002b7e:	6113      	str	r3, [r2, #16]
					break;
 8002b80:	e232      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a73      	ldr	r2, [pc, #460]	; (8002d58 <extInt_Config+0x934>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d106      	bne.n	8002b9c <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8002b8e:	4b6f      	ldr	r3, [pc, #444]	; (8002d4c <extInt_Config+0x928>)
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	4a6e      	ldr	r2, [pc, #440]	; (8002d4c <extInt_Config+0x928>)
 8002b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b98:	6113      	str	r3, [r2, #16]
					break;
 8002b9a:	e225      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a6e      	ldr	r2, [pc, #440]	; (8002d5c <extInt_Config+0x938>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d106      	bne.n	8002bb6 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8002ba8:	4b68      	ldr	r3, [pc, #416]	; (8002d4c <extInt_Config+0x928>)
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	4a67      	ldr	r2, [pc, #412]	; (8002d4c <extInt_Config+0x928>)
 8002bae:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002bb2:	6113      	str	r3, [r2, #16]
					break;
 8002bb4:	e218      	b.n	8002fe8 <extInt_Config+0xbc4>
						__NOP();
 8002bb6:	bf00      	nop
					break;
 8002bb8:	e216      	b.n	8002fe8 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8002bba:	4b64      	ldr	r3, [pc, #400]	; (8002d4c <extInt_Config+0x928>)
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	4a63      	ldr	r2, [pc, #396]	; (8002d4c <extInt_Config+0x928>)
 8002bc0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bc4:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a64      	ldr	r2, [pc, #400]	; (8002d60 <extInt_Config+0x93c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d104      	bne.n	8002bdc <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8002bd2:	4b5e      	ldr	r3, [pc, #376]	; (8002d4c <extInt_Config+0x928>)
 8002bd4:	4a5d      	ldr	r2, [pc, #372]	; (8002d4c <extInt_Config+0x928>)
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002bda:	e205      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a59      	ldr	r2, [pc, #356]	; (8002d48 <extInt_Config+0x924>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d106      	bne.n	8002bf6 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8002be8:	4b58      	ldr	r3, [pc, #352]	; (8002d4c <extInt_Config+0x928>)
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	4a57      	ldr	r2, [pc, #348]	; (8002d4c <extInt_Config+0x928>)
 8002bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf2:	6113      	str	r3, [r2, #16]
					break;
 8002bf4:	e1f8      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a54      	ldr	r2, [pc, #336]	; (8002d50 <extInt_Config+0x92c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d106      	bne.n	8002c10 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8002c02:	4b52      	ldr	r3, [pc, #328]	; (8002d4c <extInt_Config+0x928>)
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	4a51      	ldr	r2, [pc, #324]	; (8002d4c <extInt_Config+0x928>)
 8002c08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c0c:	6113      	str	r3, [r2, #16]
					break;
 8002c0e:	e1eb      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a4f      	ldr	r2, [pc, #316]	; (8002d54 <extInt_Config+0x930>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d106      	bne.n	8002c2a <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8002c1c:	4b4b      	ldr	r3, [pc, #300]	; (8002d4c <extInt_Config+0x928>)
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	4a4a      	ldr	r2, [pc, #296]	; (8002d4c <extInt_Config+0x928>)
 8002c22:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002c26:	6113      	str	r3, [r2, #16]
					break;
 8002c28:	e1de      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a49      	ldr	r2, [pc, #292]	; (8002d58 <extInt_Config+0x934>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d106      	bne.n	8002c44 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8002c36:	4b45      	ldr	r3, [pc, #276]	; (8002d4c <extInt_Config+0x928>)
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	4a44      	ldr	r2, [pc, #272]	; (8002d4c <extInt_Config+0x928>)
 8002c3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c40:	6113      	str	r3, [r2, #16]
					break;
 8002c42:	e1d1      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a44      	ldr	r2, [pc, #272]	; (8002d5c <extInt_Config+0x938>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d106      	bne.n	8002c5e <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8002c50:	4b3e      	ldr	r3, [pc, #248]	; (8002d4c <extInt_Config+0x928>)
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	4a3d      	ldr	r2, [pc, #244]	; (8002d4c <extInt_Config+0x928>)
 8002c56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c5a:	6113      	str	r3, [r2, #16]
					break;
 8002c5c:	e1c4      	b.n	8002fe8 <extInt_Config+0xbc4>
						__NOP();
 8002c5e:	bf00      	nop
					break;
 8002c60:	e1c2      	b.n	8002fe8 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8002c62:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <extInt_Config+0x928>)
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	4a39      	ldr	r2, [pc, #228]	; (8002d4c <extInt_Config+0x928>)
 8002c68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c6c:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a3a      	ldr	r2, [pc, #232]	; (8002d60 <extInt_Config+0x93c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d104      	bne.n	8002c84 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8002c7a:	4b34      	ldr	r3, [pc, #208]	; (8002d4c <extInt_Config+0x928>)
 8002c7c:	4a33      	ldr	r2, [pc, #204]	; (8002d4c <extInt_Config+0x928>)
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002c82:	e1b1      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <extInt_Config+0x924>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d106      	bne.n	8002c9e <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8002c90:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <extInt_Config+0x928>)
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	4a2d      	ldr	r2, [pc, #180]	; (8002d4c <extInt_Config+0x928>)
 8002c96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c9a:	6113      	str	r3, [r2, #16]
					break;
 8002c9c:	e1a4      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a2a      	ldr	r2, [pc, #168]	; (8002d50 <extInt_Config+0x92c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d106      	bne.n	8002cb8 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8002caa:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <extInt_Config+0x928>)
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	4a27      	ldr	r2, [pc, #156]	; (8002d4c <extInt_Config+0x928>)
 8002cb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cb4:	6113      	str	r3, [r2, #16]
					break;
 8002cb6:	e197      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a25      	ldr	r2, [pc, #148]	; (8002d54 <extInt_Config+0x930>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d106      	bne.n	8002cd2 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8002cc4:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <extInt_Config+0x928>)
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	4a20      	ldr	r2, [pc, #128]	; (8002d4c <extInt_Config+0x928>)
 8002cca:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002cce:	6113      	str	r3, [r2, #16]
					break;
 8002cd0:	e18a      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1f      	ldr	r2, [pc, #124]	; (8002d58 <extInt_Config+0x934>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d106      	bne.n	8002cec <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8002cde:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <extInt_Config+0x928>)
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	4a1a      	ldr	r2, [pc, #104]	; (8002d4c <extInt_Config+0x928>)
 8002ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce8:	6113      	str	r3, [r2, #16]
					break;
 8002cea:	e17d      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1a      	ldr	r2, [pc, #104]	; (8002d5c <extInt_Config+0x938>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d106      	bne.n	8002d06 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <extInt_Config+0x928>)
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <extInt_Config+0x928>)
 8002cfe:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002d02:	6113      	str	r3, [r2, #16]
					break;
 8002d04:	e170      	b.n	8002fe8 <extInt_Config+0xbc4>
						__NOP();
 8002d06:	bf00      	nop
					break;
 8002d08:	e16e      	b.n	8002fe8 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <extInt_Config+0x928>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	4a0f      	ldr	r2, [pc, #60]	; (8002d4c <extInt_Config+0x928>)
 8002d10:	f023 030f 	bic.w	r3, r3, #15
 8002d14:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a10      	ldr	r2, [pc, #64]	; (8002d60 <extInt_Config+0x93c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d104      	bne.n	8002d2c <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <extInt_Config+0x928>)
 8002d24:	4a09      	ldr	r2, [pc, #36]	; (8002d4c <extInt_Config+0x928>)
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8002d2a:	e15d      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <extInt_Config+0x924>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d115      	bne.n	8002d64 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8002d38:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <extInt_Config+0x928>)
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	4a03      	ldr	r2, [pc, #12]	; (8002d4c <extInt_Config+0x928>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6153      	str	r3, [r2, #20]
					break;
 8002d44:	e150      	b.n	8002fe8 <extInt_Config+0xbc4>
 8002d46:	bf00      	nop
 8002d48:	40020400 	.word	0x40020400
 8002d4c:	40013800 	.word	0x40013800
 8002d50:	40020800 	.word	0x40020800
 8002d54:	40020c00 	.word	0x40020c00
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40021c00 	.word	0x40021c00
 8002d60:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a89      	ldr	r2, [pc, #548]	; (8002f90 <extInt_Config+0xb6c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d106      	bne.n	8002d7e <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8002d70:	4b88      	ldr	r3, [pc, #544]	; (8002f94 <extInt_Config+0xb70>)
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	4a87      	ldr	r2, [pc, #540]	; (8002f94 <extInt_Config+0xb70>)
 8002d76:	f043 0302 	orr.w	r3, r3, #2
 8002d7a:	6153      	str	r3, [r2, #20]
					break;
 8002d7c:	e134      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a84      	ldr	r2, [pc, #528]	; (8002f98 <extInt_Config+0xb74>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d106      	bne.n	8002d98 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8002d8a:	4b82      	ldr	r3, [pc, #520]	; (8002f94 <extInt_Config+0xb70>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4a81      	ldr	r2, [pc, #516]	; (8002f94 <extInt_Config+0xb70>)
 8002d90:	f043 0303 	orr.w	r3, r3, #3
 8002d94:	6153      	str	r3, [r2, #20]
					break;
 8002d96:	e127      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a7f      	ldr	r2, [pc, #508]	; (8002f9c <extInt_Config+0xb78>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d106      	bne.n	8002db2 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8002da4:	4b7b      	ldr	r3, [pc, #492]	; (8002f94 <extInt_Config+0xb70>)
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	4a7a      	ldr	r2, [pc, #488]	; (8002f94 <extInt_Config+0xb70>)
 8002daa:	f043 0304 	orr.w	r3, r3, #4
 8002dae:	6153      	str	r3, [r2, #20]
					break;
 8002db0:	e11a      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a79      	ldr	r2, [pc, #484]	; (8002fa0 <extInt_Config+0xb7c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d106      	bne.n	8002dcc <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8002dbe:	4b75      	ldr	r3, [pc, #468]	; (8002f94 <extInt_Config+0xb70>)
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	4a74      	ldr	r2, [pc, #464]	; (8002f94 <extInt_Config+0xb70>)
 8002dc4:	f043 0307 	orr.w	r3, r3, #7
 8002dc8:	6153      	str	r3, [r2, #20]
					break;
 8002dca:	e10d      	b.n	8002fe8 <extInt_Config+0xbc4>
						__NOP();
 8002dcc:	bf00      	nop
					break;
 8002dce:	e10b      	b.n	8002fe8 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8002dd0:	4b70      	ldr	r3, [pc, #448]	; (8002f94 <extInt_Config+0xb70>)
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	4a6f      	ldr	r2, [pc, #444]	; (8002f94 <extInt_Config+0xb70>)
 8002dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dda:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a70      	ldr	r2, [pc, #448]	; (8002fa4 <extInt_Config+0xb80>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d104      	bne.n	8002df2 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8002de8:	4b6a      	ldr	r3, [pc, #424]	; (8002f94 <extInt_Config+0xb70>)
 8002dea:	4a6a      	ldr	r2, [pc, #424]	; (8002f94 <extInt_Config+0xb70>)
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	6153      	str	r3, [r2, #20]
 8002df0:	e041      	b.n	8002e76 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a6b      	ldr	r2, [pc, #428]	; (8002fa8 <extInt_Config+0xb84>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d106      	bne.n	8002e0c <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8002dfe:	4b65      	ldr	r3, [pc, #404]	; (8002f94 <extInt_Config+0xb70>)
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	4a64      	ldr	r2, [pc, #400]	; (8002f94 <extInt_Config+0xb70>)
 8002e04:	f043 0310 	orr.w	r3, r3, #16
 8002e08:	6153      	str	r3, [r2, #20]
 8002e0a:	e034      	b.n	8002e76 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a5f      	ldr	r2, [pc, #380]	; (8002f90 <extInt_Config+0xb6c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d106      	bne.n	8002e26 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8002e18:	4b5e      	ldr	r3, [pc, #376]	; (8002f94 <extInt_Config+0xb70>)
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	4a5d      	ldr	r2, [pc, #372]	; (8002f94 <extInt_Config+0xb70>)
 8002e1e:	f043 0320 	orr.w	r3, r3, #32
 8002e22:	6153      	str	r3, [r2, #20]
 8002e24:	e027      	b.n	8002e76 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a5a      	ldr	r2, [pc, #360]	; (8002f98 <extInt_Config+0xb74>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d106      	bne.n	8002e40 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8002e32:	4b58      	ldr	r3, [pc, #352]	; (8002f94 <extInt_Config+0xb70>)
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	4a57      	ldr	r2, [pc, #348]	; (8002f94 <extInt_Config+0xb70>)
 8002e38:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002e3c:	6153      	str	r3, [r2, #20]
 8002e3e:	e01a      	b.n	8002e76 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a55      	ldr	r2, [pc, #340]	; (8002f9c <extInt_Config+0xb78>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d106      	bne.n	8002e5a <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8002e4c:	4b51      	ldr	r3, [pc, #324]	; (8002f94 <extInt_Config+0xb70>)
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	4a50      	ldr	r2, [pc, #320]	; (8002f94 <extInt_Config+0xb70>)
 8002e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e56:	6153      	str	r3, [r2, #20]
 8002e58:	e00d      	b.n	8002e76 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a4f      	ldr	r2, [pc, #316]	; (8002fa0 <extInt_Config+0xb7c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d106      	bne.n	8002e74 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8002e66:	4b4b      	ldr	r3, [pc, #300]	; (8002f94 <extInt_Config+0xb70>)
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	4a4a      	ldr	r2, [pc, #296]	; (8002f94 <extInt_Config+0xb70>)
 8002e6c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002e70:	6153      	str	r3, [r2, #20]
 8002e72:	e000      	b.n	8002e76 <extInt_Config+0xa52>

					} else {
						__NOP();
 8002e74:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8002e76:	4b47      	ldr	r3, [pc, #284]	; (8002f94 <extInt_Config+0xb70>)
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	4a46      	ldr	r2, [pc, #280]	; (8002f94 <extInt_Config+0xb70>)
 8002e7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e80:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a46      	ldr	r2, [pc, #280]	; (8002fa4 <extInt_Config+0xb80>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d104      	bne.n	8002e98 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8002e8e:	4b41      	ldr	r3, [pc, #260]	; (8002f94 <extInt_Config+0xb70>)
 8002e90:	4a40      	ldr	r2, [pc, #256]	; (8002f94 <extInt_Config+0xb70>)
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8002e96:	e0a7      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a42      	ldr	r2, [pc, #264]	; (8002fa8 <extInt_Config+0xb84>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d106      	bne.n	8002eb2 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8002ea4:	4b3b      	ldr	r3, [pc, #236]	; (8002f94 <extInt_Config+0xb70>)
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	4a3a      	ldr	r2, [pc, #232]	; (8002f94 <extInt_Config+0xb70>)
 8002eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eae:	6153      	str	r3, [r2, #20]
					break;
 8002eb0:	e09a      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a35      	ldr	r2, [pc, #212]	; (8002f90 <extInt_Config+0xb6c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d106      	bne.n	8002ecc <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8002ebe:	4b35      	ldr	r3, [pc, #212]	; (8002f94 <extInt_Config+0xb70>)
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	4a34      	ldr	r2, [pc, #208]	; (8002f94 <extInt_Config+0xb70>)
 8002ec4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ec8:	6153      	str	r3, [r2, #20]
					break;
 8002eca:	e08d      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a31      	ldr	r2, [pc, #196]	; (8002f98 <extInt_Config+0xb74>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d106      	bne.n	8002ee6 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8002ed8:	4b2e      	ldr	r3, [pc, #184]	; (8002f94 <extInt_Config+0xb70>)
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	4a2d      	ldr	r2, [pc, #180]	; (8002f94 <extInt_Config+0xb70>)
 8002ede:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002ee2:	6153      	str	r3, [r2, #20]
					break;
 8002ee4:	e080      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2b      	ldr	r2, [pc, #172]	; (8002f9c <extInt_Config+0xb78>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d106      	bne.n	8002f00 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8002ef2:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <extInt_Config+0xb70>)
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	4a27      	ldr	r2, [pc, #156]	; (8002f94 <extInt_Config+0xb70>)
 8002ef8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002efc:	6153      	str	r3, [r2, #20]
					break;
 8002efe:	e073      	b.n	8002fe8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a26      	ldr	r2, [pc, #152]	; (8002fa0 <extInt_Config+0xb7c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d106      	bne.n	8002f1a <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8002f0c:	4b21      	ldr	r3, [pc, #132]	; (8002f94 <extInt_Config+0xb70>)
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	4a20      	ldr	r2, [pc, #128]	; (8002f94 <extInt_Config+0xb70>)
 8002f12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f16:	6153      	str	r3, [r2, #20]
					break;
 8002f18:	e066      	b.n	8002fe8 <extInt_Config+0xbc4>
						__NOP();
 8002f1a:	bf00      	nop
					break;
 8002f1c:	e064      	b.n	8002fe8 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <extInt_Config+0xb70>)
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4a1c      	ldr	r2, [pc, #112]	; (8002f94 <extInt_Config+0xb70>)
 8002f24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f28:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1c      	ldr	r2, [pc, #112]	; (8002fa4 <extInt_Config+0xb80>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d104      	bne.n	8002f40 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8002f36:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <extInt_Config+0xb70>)
 8002f38:	4a16      	ldr	r2, [pc, #88]	; (8002f94 <extInt_Config+0xb70>)
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 8002f3e:	e053      	b.n	8002fe8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <extInt_Config+0xb84>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d106      	bne.n	8002f5a <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <extInt_Config+0xb70>)
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	4a10      	ldr	r2, [pc, #64]	; (8002f94 <extInt_Config+0xb70>)
 8002f52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f56:	6153      	str	r3, [r2, #20]
						break;
 8002f58:	e046      	b.n	8002fe8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <extInt_Config+0xb6c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d106      	bne.n	8002f74 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <extInt_Config+0xb70>)
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <extInt_Config+0xb70>)
 8002f6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f70:	6153      	str	r3, [r2, #20]
						break;
 8002f72:	e039      	b.n	8002fe8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a07      	ldr	r2, [pc, #28]	; (8002f98 <extInt_Config+0xb74>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d115      	bne.n	8002fac <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <extInt_Config+0xb70>)
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	4a03      	ldr	r2, [pc, #12]	; (8002f94 <extInt_Config+0xb70>)
 8002f86:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002f8a:	6153      	str	r3, [r2, #20]
						break;
 8002f8c:	e02c      	b.n	8002fe8 <extInt_Config+0xbc4>
 8002f8e:	bf00      	nop
 8002f90:	40020800 	.word	0x40020800
 8002f94:	40013800 	.word	0x40013800
 8002f98:	40020c00 	.word	0x40020c00
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40021c00 	.word	0x40021c00
 8002fa4:	40020000 	.word	0x40020000
 8002fa8:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6c      	ldr	r2, [pc, #432]	; (8003164 <extInt_Config+0xd40>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d106      	bne.n	8002fc6 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8002fb8:	4b6b      	ldr	r3, [pc, #428]	; (8003168 <extInt_Config+0xd44>)
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	4a6a      	ldr	r2, [pc, #424]	; (8003168 <extInt_Config+0xd44>)
 8002fbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc2:	6153      	str	r3, [r2, #20]
						break;
 8002fc4:	e010      	b.n	8002fe8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a67      	ldr	r2, [pc, #412]	; (800316c <extInt_Config+0xd48>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d106      	bne.n	8002fe0 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8002fd2:	4b65      	ldr	r3, [pc, #404]	; (8003168 <extInt_Config+0xd44>)
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	4a64      	ldr	r2, [pc, #400]	; (8003168 <extInt_Config+0xd44>)
 8002fd8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002fdc:	6153      	str	r3, [r2, #20]
						break;
 8002fde:	e003      	b.n	8002fe8 <extInt_Config+0xbc4>
							__NOP();
 8002fe0:	bf00      	nop
						break;
 8002fe2:	e001      	b.n	8002fe8 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8002fe4:	bf00      	nop
						break;
 8002fe6:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	791b      	ldrb	r3, [r3, #4]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d020      	beq.n	8003032 <extInt_Config+0xc0e>
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	dc37      	bgt.n	8003064 <extInt_Config+0xc40>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <extInt_Config+0xbda>
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d00d      	beq.n	8003018 <extInt_Config+0xbf4>
 8002ffc:	e032      	b.n	8003064 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002ffe:	4b5c      	ldr	r3, [pc, #368]	; (8003170 <extInt_Config+0xd4c>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6812      	ldr	r2, [r2, #0]
 8003006:	7912      	ldrb	r2, [r2, #4]
 8003008:	4611      	mov	r1, r2
 800300a:	2201      	movs	r2, #1
 800300c:	408a      	lsls	r2, r1
 800300e:	4611      	mov	r1, r2
 8003010:	4a57      	ldr	r2, [pc, #348]	; (8003170 <extInt_Config+0xd4c>)
 8003012:	430b      	orrs	r3, r1
 8003014:	60d3      	str	r3, [r2, #12]

		break;
 8003016:	e027      	b.n	8003068 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003018:	4b55      	ldr	r3, [pc, #340]	; (8003170 <extInt_Config+0xd4c>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	7912      	ldrb	r2, [r2, #4]
 8003022:	4611      	mov	r1, r2
 8003024:	2201      	movs	r2, #1
 8003026:	408a      	lsls	r2, r1
 8003028:	4611      	mov	r1, r2
 800302a:	4a51      	ldr	r2, [pc, #324]	; (8003170 <extInt_Config+0xd4c>)
 800302c:	430b      	orrs	r3, r1
 800302e:	6093      	str	r3, [r2, #8]

		break;
 8003030:	e01a      	b.n	8003068 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003032:	4b4f      	ldr	r3, [pc, #316]	; (8003170 <extInt_Config+0xd4c>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	7912      	ldrb	r2, [r2, #4]
 800303c:	4611      	mov	r1, r2
 800303e:	2201      	movs	r2, #1
 8003040:	408a      	lsls	r2, r1
 8003042:	4611      	mov	r1, r2
 8003044:	4a4a      	ldr	r2, [pc, #296]	; (8003170 <extInt_Config+0xd4c>)
 8003046:	430b      	orrs	r3, r1
 8003048:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800304a:	4b49      	ldr	r3, [pc, #292]	; (8003170 <extInt_Config+0xd4c>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6812      	ldr	r2, [r2, #0]
 8003052:	7912      	ldrb	r2, [r2, #4]
 8003054:	4611      	mov	r1, r2
 8003056:	2201      	movs	r2, #1
 8003058:	408a      	lsls	r2, r1
 800305a:	4611      	mov	r1, r2
 800305c:	4a44      	ldr	r2, [pc, #272]	; (8003170 <extInt_Config+0xd4c>)
 800305e:	430b      	orrs	r3, r1
 8003060:	6093      	str	r3, [r2, #8]

		break;
 8003062:	e001      	b.n	8003068 <extInt_Config+0xc44>

	}default :{

		__NOP();
 8003064:	bf00      	nop
		break;
 8003066:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8003068:	b672      	cpsid	i
}
 800306a:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800306c:	4b40      	ldr	r3, [pc, #256]	; (8003170 <extInt_Config+0xd4c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	7912      	ldrb	r2, [r2, #4]
 8003076:	4611      	mov	r1, r2
 8003078:	2201      	movs	r2, #1
 800307a:	408a      	lsls	r2, r1
 800307c:	4611      	mov	r1, r2
 800307e:	4a3c      	ldr	r2, [pc, #240]	; (8003170 <extInt_Config+0xd4c>)
 8003080:	430b      	orrs	r3, r1
 8003082:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	791b      	ldrb	r3, [r3, #4]
 800308a:	2b0f      	cmp	r3, #15
 800308c:	d862      	bhi.n	8003154 <extInt_Config+0xd30>
 800308e:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <extInt_Config+0xc70>)
 8003090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003094:	080030d5 	.word	0x080030d5
 8003098:	080030dd 	.word	0x080030dd
 800309c:	080030e5 	.word	0x080030e5
 80030a0:	080030ed 	.word	0x080030ed
 80030a4:	080030f5 	.word	0x080030f5
 80030a8:	080030fd 	.word	0x080030fd
 80030ac:	08003105 	.word	0x08003105
 80030b0:	0800310d 	.word	0x0800310d
 80030b4:	08003115 	.word	0x08003115
 80030b8:	0800311d 	.word	0x0800311d
 80030bc:	08003125 	.word	0x08003125
 80030c0:	0800312d 	.word	0x0800312d
 80030c4:	08003135 	.word	0x08003135
 80030c8:	0800313d 	.word	0x0800313d
 80030cc:	08003145 	.word	0x08003145
 80030d0:	0800314d 	.word	0x0800314d
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 80030d4:	2006      	movs	r0, #6
 80030d6:	f7ff f987 	bl	80023e8 <__NVIC_EnableIRQ>
			break;
 80030da:	e03d      	b.n	8003158 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 80030dc:	2007      	movs	r0, #7
 80030de:	f7ff f983 	bl	80023e8 <__NVIC_EnableIRQ>
			break;
 80030e2:	e039      	b.n	8003158 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 80030e4:	2008      	movs	r0, #8
 80030e6:	f7ff f97f 	bl	80023e8 <__NVIC_EnableIRQ>
			break;
 80030ea:	e035      	b.n	8003158 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 80030ec:	2009      	movs	r0, #9
 80030ee:	f7ff f97b 	bl	80023e8 <__NVIC_EnableIRQ>
			break;
 80030f2:	e031      	b.n	8003158 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 80030f4:	200a      	movs	r0, #10
 80030f6:	f7ff f977 	bl	80023e8 <__NVIC_EnableIRQ>
			break;
 80030fa:	e02d      	b.n	8003158 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030fc:	2017      	movs	r0, #23
 80030fe:	f7ff f973 	bl	80023e8 <__NVIC_EnableIRQ>
			break;
 8003102:	e029      	b.n	8003158 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003104:	2017      	movs	r0, #23
 8003106:	f7ff f96f 	bl	80023e8 <__NVIC_EnableIRQ>
			break;
 800310a:	e025      	b.n	8003158 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800310c:	2017      	movs	r0, #23
 800310e:	f7ff f96b 	bl	80023e8 <__NVIC_EnableIRQ>
			break;
 8003112:	e021      	b.n	8003158 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003114:	2017      	movs	r0, #23
 8003116:	f7ff f967 	bl	80023e8 <__NVIC_EnableIRQ>
			break;
 800311a:	e01d      	b.n	8003158 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800311c:	2017      	movs	r0, #23
 800311e:	f7ff f963 	bl	80023e8 <__NVIC_EnableIRQ>
			break;
 8003122:	e019      	b.n	8003158 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003124:	2028      	movs	r0, #40	; 0x28
 8003126:	f7ff f95f 	bl	80023e8 <__NVIC_EnableIRQ>
			break;
 800312a:	e015      	b.n	8003158 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800312c:	2028      	movs	r0, #40	; 0x28
 800312e:	f7ff f95b 	bl	80023e8 <__NVIC_EnableIRQ>
			break;
 8003132:	e011      	b.n	8003158 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003134:	2028      	movs	r0, #40	; 0x28
 8003136:	f7ff f957 	bl	80023e8 <__NVIC_EnableIRQ>
			break;
 800313a:	e00d      	b.n	8003158 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800313c:	2028      	movs	r0, #40	; 0x28
 800313e:	f7ff f953 	bl	80023e8 <__NVIC_EnableIRQ>
			break;
 8003142:	e009      	b.n	8003158 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003144:	2028      	movs	r0, #40	; 0x28
 8003146:	f7ff f94f 	bl	80023e8 <__NVIC_EnableIRQ>
			break;
 800314a:	e005      	b.n	8003158 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800314c:	2028      	movs	r0, #40	; 0x28
 800314e:	f7ff f94b 	bl	80023e8 <__NVIC_EnableIRQ>
			break;
 8003152:	e001      	b.n	8003158 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 8003154:	bf00      	nop
			break;
 8003156:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003158:	b662      	cpsie	i
}
 800315a:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 800315c:	bf00      	nop
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40021000 	.word	0x40021000
 8003168:	40013800 	.word	0x40013800
 800316c:	40021c00 	.word	0x40021c00
 8003170:	40013c00 	.word	0x40013c00

08003174 <callback_extInt0>:
	__enable_irq();

}

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
	__NOP();
 8003178:	bf00      	nop
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
	__NOP();
 8003188:	bf00      	nop
}
 800318a:	bf00      	nop
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
	__NOP();
 8003198:	bf00      	nop
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
	__NOP();
 80031a8:	bf00      	nop
}
 80031aa:	bf00      	nop
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
	__NOP();
 80031b8:	bf00      	nop
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
	__NOP();
 80031c8:	bf00      	nop
}
 80031ca:	bf00      	nop
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
	__NOP();
 80031d8:	bf00      	nop
}
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
	__NOP();
 80031e8:	bf00      	nop
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
	__NOP();
 80031f8:	bf00      	nop
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
	__NOP();
 8003208:	bf00      	nop
}
 800320a:	bf00      	nop
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
	__NOP();
 8003218:	bf00      	nop
}
 800321a:	bf00      	nop
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
	__NOP();
 8003228:	bf00      	nop
}
 800322a:	bf00      	nop
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
	__NOP();
 8003238:	bf00      	nop
}
 800323a:	bf00      	nop
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
	__NOP();
 8003248:	bf00      	nop
}
 800324a:	bf00      	nop
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8003258:	4b07      	ldr	r3, [pc, #28]	; (8003278 <EXTI0_IRQHandler+0x24>)
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <EXTI0_IRQHandler+0x24>)
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	4a03      	ldr	r2, [pc, #12]	; (8003278 <EXTI0_IRQHandler+0x24>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8003270:	f7ff ff80 	bl	8003174 <callback_extInt0>
	}
}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40013c00 	.word	0x40013c00

0800327c <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8003280:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <EXTI1_IRQHandler+0x24>)
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <EXTI1_IRQHandler+0x24>)
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	4a03      	ldr	r2, [pc, #12]	; (80032a0 <EXTI1_IRQHandler+0x24>)
 8003292:	f043 0302 	orr.w	r3, r3, #2
 8003296:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 8003298:	f7fe f804 	bl	80012a4 <callback_extInt1>
	}
}
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40013c00 	.word	0x40013c00

080032a4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <EXTI2_IRQHandler+0x24>)
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 80032b4:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <EXTI2_IRQHandler+0x24>)
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	4a03      	ldr	r2, [pc, #12]	; (80032c8 <EXTI2_IRQHandler+0x24>)
 80032ba:	f043 0304 	orr.w	r3, r3, #4
 80032be:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 80032c0:	f7ff ff60 	bl	8003184 <callback_extInt2>
	}
}
 80032c4:	bf00      	nop
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40013c00 	.word	0x40013c00

080032cc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <EXTI3_IRQHandler+0x24>)
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <EXTI3_IRQHandler+0x24>)
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	4a03      	ldr	r2, [pc, #12]	; (80032f0 <EXTI3_IRQHandler+0x24>)
 80032e2:	f043 0308 	orr.w	r3, r3, #8
 80032e6:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 80032e8:	f7fd ffe3 	bl	80012b2 <callback_extInt3>
	}
}
 80032ec:	bf00      	nop
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40013c00 	.word	0x40013c00

080032f4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 80032f8:	4b07      	ldr	r3, [pc, #28]	; (8003318 <EXTI4_IRQHandler+0x24>)
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b00      	cmp	r3, #0
 8003302:	d007      	beq.n	8003314 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <EXTI4_IRQHandler+0x24>)
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	4a03      	ldr	r2, [pc, #12]	; (8003318 <EXTI4_IRQHandler+0x24>)
 800330a:	f043 0310 	orr.w	r3, r3, #16
 800330e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 8003310:	f7ff ff40 	bl	8003194 <callback_extInt4>
	}
}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40013c00 	.word	0x40013c00

0800331c <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 8003320:	4b26      	ldr	r3, [pc, #152]	; (80033bc <EXTI9_5_IRQHandler+0xa0>)
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 800332c:	4b23      	ldr	r3, [pc, #140]	; (80033bc <EXTI9_5_IRQHandler+0xa0>)
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	4a22      	ldr	r2, [pc, #136]	; (80033bc <EXTI9_5_IRQHandler+0xa0>)
 8003332:	f043 0320 	orr.w	r3, r3, #32
 8003336:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 8003338:	f7ff ff34 	bl	80031a4 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 800333c:	e03c      	b.n	80033b8 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 800333e:	4b1f      	ldr	r3, [pc, #124]	; (80033bc <EXTI9_5_IRQHandler+0xa0>)
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 800334a:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <EXTI9_5_IRQHandler+0xa0>)
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <EXTI9_5_IRQHandler+0xa0>)
 8003350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003354:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 8003356:	f7ff ff2d 	bl	80031b4 <callback_extInt6>
}
 800335a:	e02d      	b.n	80033b8 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 800335c:	4b17      	ldr	r3, [pc, #92]	; (80033bc <EXTI9_5_IRQHandler+0xa0>)
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8003368:	4b14      	ldr	r3, [pc, #80]	; (80033bc <EXTI9_5_IRQHandler+0xa0>)
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	4a13      	ldr	r2, [pc, #76]	; (80033bc <EXTI9_5_IRQHandler+0xa0>)
 800336e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003372:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8003374:	f7ff ff26 	bl	80031c4 <callback_extInt7>
}
 8003378:	e01e      	b.n	80033b8 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <EXTI9_5_IRQHandler+0xa0>)
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8003386:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <EXTI9_5_IRQHandler+0xa0>)
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	4a0c      	ldr	r2, [pc, #48]	; (80033bc <EXTI9_5_IRQHandler+0xa0>)
 800338c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003390:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 8003392:	f7ff ff1f 	bl	80031d4 <callback_extInt8>
}
 8003396:	e00f      	b.n	80033b8 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 8003398:	4b08      	ldr	r3, [pc, #32]	; (80033bc <EXTI9_5_IRQHandler+0xa0>)
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <EXTI9_5_IRQHandler+0xa0>)
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	4a04      	ldr	r2, [pc, #16]	; (80033bc <EXTI9_5_IRQHandler+0xa0>)
 80033aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ae:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 80033b0:	f7ff ff18 	bl	80031e4 <callback_extInt9>
}
 80033b4:	e000      	b.n	80033b8 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 80033b6:	bf00      	nop
}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40013c00 	.word	0x40013c00

080033c0 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 80033c4:	4b2d      	ldr	r3, [pc, #180]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 80033d0:	4b2a      	ldr	r3, [pc, #168]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	4a29      	ldr	r2, [pc, #164]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 80033d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033da:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 80033dc:	f7ff ff0a 	bl	80031f4 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 80033e0:	e049      	b.n	8003476 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 80033e2:	4b26      	ldr	r3, [pc, #152]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d008      	beq.n	8003400 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 80033ee:	4b23      	ldr	r3, [pc, #140]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	4a22      	ldr	r2, [pc, #136]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 80033f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033f8:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 80033fa:	f7ff ff03 	bl	8003204 <callback_extInt11>
}
 80033fe:	e03a      	b.n	8003476 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 8003400:	4b1e      	ldr	r3, [pc, #120]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	4a1a      	ldr	r2, [pc, #104]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 8003412:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003416:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 8003418:	f7ff fefc 	bl	8003214 <callback_extInt12>
}
 800341c:	e02b      	b.n	8003476 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 800341e:	4b17      	ldr	r3, [pc, #92]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	4a13      	ldr	r2, [pc, #76]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 8003430:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003434:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 8003436:	f7ff fef5 	bl	8003224 <callback_extInt13>
}
 800343a:	e01c      	b.n	8003476 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	4a0b      	ldr	r2, [pc, #44]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 800344e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003452:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8003454:	f7ff feee 	bl	8003234 <callback_extInt14>
}
 8003458:	e00d      	b.n	8003476 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 800345a:	4b08      	ldr	r3, [pc, #32]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 8003466:	4b05      	ldr	r3, [pc, #20]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	4a04      	ldr	r2, [pc, #16]	; (800347c <EXTI15_10_IRQHandler+0xbc>)
 800346c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003470:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 8003472:	f7ff fee7 	bl	8003244 <callback_extInt15>
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40013c00 	.word	0x40013c00

08003480 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a88      	ldr	r2, [pc, #544]	; (80036b8 <GPIO_Config+0x238>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d106      	bne.n	80034a8 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 800349a:	4b88      	ldr	r3, [pc, #544]	; (80036bc <GPIO_Config+0x23c>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4a87      	ldr	r2, [pc, #540]	; (80036bc <GPIO_Config+0x23c>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6313      	str	r3, [r2, #48]	; 0x30
 80034a6:	e03a      	b.n	800351e <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a84      	ldr	r2, [pc, #528]	; (80036c0 <GPIO_Config+0x240>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d106      	bne.n	80034c0 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 80034b2:	4b82      	ldr	r3, [pc, #520]	; (80036bc <GPIO_Config+0x23c>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	4a81      	ldr	r2, [pc, #516]	; (80036bc <GPIO_Config+0x23c>)
 80034b8:	f043 0302 	orr.w	r3, r3, #2
 80034bc:	6313      	str	r3, [r2, #48]	; 0x30
 80034be:	e02e      	b.n	800351e <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a7f      	ldr	r2, [pc, #508]	; (80036c4 <GPIO_Config+0x244>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d106      	bne.n	80034d8 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 80034ca:	4b7c      	ldr	r3, [pc, #496]	; (80036bc <GPIO_Config+0x23c>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4a7b      	ldr	r2, [pc, #492]	; (80036bc <GPIO_Config+0x23c>)
 80034d0:	f043 0304 	orr.w	r3, r3, #4
 80034d4:	6313      	str	r3, [r2, #48]	; 0x30
 80034d6:	e022      	b.n	800351e <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a7a      	ldr	r2, [pc, #488]	; (80036c8 <GPIO_Config+0x248>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d106      	bne.n	80034f0 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 80034e2:	4b76      	ldr	r3, [pc, #472]	; (80036bc <GPIO_Config+0x23c>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	4a75      	ldr	r2, [pc, #468]	; (80036bc <GPIO_Config+0x23c>)
 80034e8:	f043 0308 	orr.w	r3, r3, #8
 80034ec:	6313      	str	r3, [r2, #48]	; 0x30
 80034ee:	e016      	b.n	800351e <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a75      	ldr	r2, [pc, #468]	; (80036cc <GPIO_Config+0x24c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d106      	bne.n	8003508 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 80034fa:	4b70      	ldr	r3, [pc, #448]	; (80036bc <GPIO_Config+0x23c>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a6f      	ldr	r2, [pc, #444]	; (80036bc <GPIO_Config+0x23c>)
 8003500:	f043 0310 	orr.w	r3, r3, #16
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	e00a      	b.n	800351e <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a70      	ldr	r2, [pc, #448]	; (80036d0 <GPIO_Config+0x250>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d105      	bne.n	800351e <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8003512:	4b6a      	ldr	r3, [pc, #424]	; (80036bc <GPIO_Config+0x23c>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	4a69      	ldr	r2, [pc, #420]	; (80036bc <GPIO_Config+0x23c>)
 8003518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	795b      	ldrb	r3, [r3, #5]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d143      	bne.n	80035ae <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	791b      	ldrb	r3, [r3, #4]
 800352a:	2b07      	cmp	r3, #7
 800352c:	d81f      	bhi.n	800356e <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	791b      	ldrb	r3, [r3, #4]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6a1a      	ldr	r2, [r3, #32]
 800353c:	210f      	movs	r1, #15
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	fa01 f303 	lsl.w	r3, r1, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	4619      	mov	r1, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	400a      	ands	r2, r1
 800354e:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6a1a      	ldr	r2, [r3, #32]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	7a5b      	ldrb	r3, [r3, #9]
 800355a:	4619      	mov	r1, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	4619      	mov	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	621a      	str	r2, [r3, #32]
 800356c:	e01f      	b.n	80035ae <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	791b      	ldrb	r3, [r3, #4]
 8003572:	3b08      	subs	r3, #8
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800357e:	210f      	movs	r1, #15
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	4619      	mov	r1, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	400a      	ands	r2, r1
 8003590:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	7a5b      	ldrb	r3, [r3, #9]
 800359c:	4619      	mov	r1, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	4619      	mov	r1, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	795b      	ldrb	r3, [r3, #5]
 80035b2:	461a      	mov	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	791b      	ldrb	r3, [r3, #4]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	791b      	ldrb	r3, [r3, #4]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	2103      	movs	r1, #3
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	4619      	mov	r1, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	400a      	ands	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7a1b      	ldrb	r3, [r3, #8]
 80035f2:	461a      	mov	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	791b      	ldrb	r3, [r3, #4]
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	791b      	ldrb	r3, [r3, #4]
 8003608:	4619      	mov	r1, r3
 800360a:	2301      	movs	r3, #1
 800360c:	408b      	lsls	r3, r1
 800360e:	43db      	mvns	r3, r3
 8003610:	4619      	mov	r1, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	400a      	ands	r2, r1
 8003618:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	799b      	ldrb	r3, [r3, #6]
 800362e:	461a      	mov	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	791b      	ldrb	r3, [r3, #4]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	791b      	ldrb	r3, [r3, #4]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	2103      	movs	r1, #3
 800364a:	fa01 f303 	lsl.w	r3, r1, r3
 800364e:	43db      	mvns	r3, r3
 8003650:	4619      	mov	r1, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	400a      	ands	r2, r1
 8003658:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6899      	ldr	r1, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	430a      	orrs	r2, r1
 8003668:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	79db      	ldrb	r3, [r3, #7]
 800366e:	461a      	mov	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	791b      	ldrb	r3, [r3, #4]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	791b      	ldrb	r3, [r3, #4]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	2103      	movs	r1, #3
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	4619      	mov	r1, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	400a      	ands	r2, r1
 8003698:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68d9      	ldr	r1, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40020000 	.word	0x40020000
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40020400 	.word	0x40020400
 80036c4:	40020800 	.word	0x40020800
 80036c8:	40020c00 	.word	0x40020c00
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40021c00 	.word	0x40021c00

080036d4 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d10d      	bne.n	8003702 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699a      	ldr	r2, [r3, #24]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	791b      	ldrb	r3, [r3, #4]
 80036f0:	4619      	mov	r1, r3
 80036f2:	2301      	movs	r3, #1
 80036f4:	408b      	lsls	r3, r1
 80036f6:	4619      	mov	r1, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8003700:	e00d      	b.n	800371e <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699a      	ldr	r2, [r3, #24]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	791b      	ldrb	r3, [r3, #4]
 800370c:	3310      	adds	r3, #16
 800370e:	2101      	movs	r1, #1
 8003710:	fa01 f303 	lsl.w	r3, r1, r3
 8003714:	4619      	mov	r1, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	619a      	str	r2, [r3, #24]
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	460b      	mov	r3, r1
 8003734:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 8003736:	78fb      	ldrb	r3, [r7, #3]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10d      	bne.n	8003758 <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	791b      	ldrb	r3, [r3, #4]
 8003746:	4619      	mov	r1, r3
 8003748:	2301      	movs	r3, #1
 800374a:	408b      	lsls	r3, r1
 800374c:	4619      	mov	r1, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 8003756:	e00d      	b.n	8003774 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	791b      	ldrb	r3, [r3, #4]
 8003762:	3310      	adds	r3, #16
 8003764:	2101      	movs	r1, #1
 8003766:	fa01 f303 	lsl.w	r3, r1, r3
 800376a:	4619      	mov	r1, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	619a      	str	r2, [r3, #24]
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	791b      	ldrb	r3, [r3, #4]
 8003790:	461a      	mov	r2, r3
 8003792:	2301      	movs	r3, #1
 8003794:	4093      	lsls	r3, r2
 8003796:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 80037a0:	897b      	ldrh	r3, [r7, #10]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4013      	ands	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	791b      	ldrb	r3, [r3, #4]
 80037ac:	461a      	mov	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	40d3      	lsrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]

	return pinValue;
 80037b4:	68fb      	ldr	r3, [r7, #12]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff ffd8 	bl	8003780 <GPIO_ReadPin>
 80037d0:	4603      	mov	r3, r0
 80037d2:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bf0c      	ite	eq
 80037da:	2301      	moveq	r3, #1
 80037dc:	2300      	movne	r3, #0
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	4619      	mov	r1, r3
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff ff76 	bl	80036d4 <GPIO_WritePin>
}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <configMPUAccel>:
#include "I2CDriver.h"
#include "GPIOxDriver.h"
#include "BasicTimer.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff fe3b 	bl	8003480 <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fe36 	bl	8003480 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4618      	mov	r0, r3
 800381a:	f001 ff67 	bl	80056ec <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 800381e:	e004      	b.n	800382a <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f94f 	bl	8003ac4 <WHOIAM>
 8003826:	4603      	mov	r3, r0
 8003828:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f7      	beq.n	8003820 <configMPUAccel+0x30>
	}


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 8003830:	216b      	movs	r1, #107	; 0x6b
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8f1 	bl	8003a1a <readData>
 8003838:	4603      	mov	r3, r0
 800383a:	73bb      	strb	r3, [r7, #14]

	byte &=  ~byte;
 800383c:	2300      	movs	r3, #0
 800383e:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 8003840:	7bbb      	ldrb	r3, [r7, #14]
 8003842:	461a      	mov	r2, r3
 8003844:	216b      	movs	r1, #107	; 0x6b
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f89c 	bl	8003984 <writeData>

	byte = readData(ptrMPUAccel, 0x6B);
 800384c:	216b      	movs	r1, #107	; 0x6b
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f8e3 	bl	8003a1a <readData>
 8003854:	4603      	mov	r3, r0
 8003856:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 8003858:	211c      	movs	r1, #28
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8dd 	bl	8003a1a <readData>
 8003860:	4603      	mov	r3, r0
 8003862:	73bb      	strb	r3, [r7, #14]

		byte &= ~(0b00011000) ;
 8003864:	7bbb      	ldrb	r3, [r7, #14]
 8003866:	f023 0318 	bic.w	r3, r3, #24
 800386a:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d833      	bhi.n	80038dc <configMPUAccel+0xec>
 8003874:	a201      	add	r2, pc, #4	; (adr r2, 800387c <configMPUAccel+0x8c>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	0800388d 	.word	0x0800388d
 8003880:	0800389b 	.word	0x0800389b
 8003884:	080038b1 	.word	0x080038b1
 8003888:	080038c7 	.word	0x080038c7
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 800388c:	7bbb      	ldrb	r3, [r7, #14]
 800388e:	461a      	mov	r2, r3
 8003890:	211c      	movs	r1, #28
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f876 	bl	8003984 <writeData>


				break;
 8003898:	e021      	b.n	80038de <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 800389a:	7bbb      	ldrb	r3, [r7, #14]
 800389c:	f043 0308 	orr.w	r3, r3, #8
 80038a0:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80038a2:	7bbb      	ldrb	r3, [r7, #14]
 80038a4:	461a      	mov	r2, r3
 80038a6:	211c      	movs	r1, #28
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f86b 	bl	8003984 <writeData>


				break;
 80038ae:	e016      	b.n	80038de <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 80038b0:	7bbb      	ldrb	r3, [r7, #14]
 80038b2:	f043 0310 	orr.w	r3, r3, #16
 80038b6:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80038b8:	7bbb      	ldrb	r3, [r7, #14]
 80038ba:	461a      	mov	r2, r3
 80038bc:	211c      	movs	r1, #28
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f860 	bl	8003984 <writeData>


				break;
 80038c4:	e00b      	b.n	80038de <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 80038c6:	7bbb      	ldrb	r3, [r7, #14]
 80038c8:	f043 0318 	orr.w	r3, r3, #24
 80038cc:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80038ce:	7bbb      	ldrb	r3, [r7, #14]
 80038d0:	461a      	mov	r2, r3
 80038d2:	211c      	movs	r1, #28
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f855 	bl	8003984 <writeData>


				break;
 80038da:	e000      	b.n	80038de <configMPUAccel+0xee>
			}default:{
				break;
 80038dc:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 80038de:	211c      	movs	r1, #28
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f89a 	bl	8003a1a <readData>
 80038e6:	4603      	mov	r3, r0
 80038e8:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 80038ea:	211b      	movs	r1, #27
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f894 	bl	8003a1a <readData>
 80038f2:	4603      	mov	r3, r0
 80038f4:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 80038f6:	7bbb      	ldrb	r3, [r7, #14]
 80038f8:	f023 0318 	bic.w	r3, r3, #24
 80038fc:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	785b      	ldrb	r3, [r3, #1]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d832      	bhi.n	800396c <configMPUAccel+0x17c>
 8003906:	a201      	add	r2, pc, #4	; (adr r2, 800390c <configMPUAccel+0x11c>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	0800391d 	.word	0x0800391d
 8003910:	0800392b 	.word	0x0800392b
 8003914:	08003941 	.word	0x08003941
 8003918:	08003957 	.word	0x08003957
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 800391c:	7bbb      	ldrb	r3, [r7, #14]
 800391e:	461a      	mov	r2, r3
 8003920:	211b      	movs	r1, #27
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f82e 	bl	8003984 <writeData>


				break;
 8003928:	e021      	b.n	800396e <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 800392a:	7bbb      	ldrb	r3, [r7, #14]
 800392c:	f043 0308 	orr.w	r3, r3, #8
 8003930:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8003932:	7bbb      	ldrb	r3, [r7, #14]
 8003934:	461a      	mov	r2, r3
 8003936:	211b      	movs	r1, #27
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f823 	bl	8003984 <writeData>


				break;
 800393e:	e016      	b.n	800396e <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 8003940:	7bbb      	ldrb	r3, [r7, #14]
 8003942:	f043 0310 	orr.w	r3, r3, #16
 8003946:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8003948:	7bbb      	ldrb	r3, [r7, #14]
 800394a:	461a      	mov	r2, r3
 800394c:	211b      	movs	r1, #27
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f818 	bl	8003984 <writeData>


				break;
 8003954:	e00b      	b.n	800396e <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 8003956:	7bbb      	ldrb	r3, [r7, #14]
 8003958:	f043 0318 	orr.w	r3, r3, #24
 800395c:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800395e:	7bbb      	ldrb	r3, [r7, #14]
 8003960:	461a      	mov	r2, r3
 8003962:	211b      	movs	r1, #27
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f80d 	bl	8003984 <writeData>


				break;
 800396a:	e000      	b.n	800396e <configMPUAccel+0x17e>
			}default:{
				break;
 800396c:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 800396e:	211b      	movs	r1, #27
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f852 	bl	8003a1a <readData>
 8003976:	4603      	mov	r3, r0
 8003978:	73bb      	strb	r3, [r7, #14]


}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop

08003984 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	70fb      	strb	r3, [r7, #3]
 8003990:	4613      	mov	r3, r2
 8003992:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a6:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f002 f80d 	bl	80059cc <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68d8      	ldr	r0, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	791b      	ldrb	r3, [r3, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	4619      	mov	r1, r3
 80039c0:	f002 f86f 	bl	8005aa2 <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f002 f890 	bl	8005af2 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80039d2:	e000      	b.n	80039d6 <writeData+0x52>
		__NOP();
 80039d4:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f6      	bne.n	80039d4 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	78ba      	ldrb	r2, [r7, #2]
 80039ec:	4611      	mov	r1, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f002 f899 	bl	8005b26 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80039f4:	e000      	b.n	80039f8 <writeData+0x74>
		__NOP();
 80039f6:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f6      	bne.n	80039f6 <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f001 ffcb 	bl	80059a8 <i2c_stopTransaction>



}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3c:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 ffc2 	bl	80059cc <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68d8      	ldr	r0, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	791b      	ldrb	r3, [r3, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	4619      	mov	r1, r3
 8003a56:	f002 f824 	bl	8005aa2 <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f002 f845 	bl	8005af2 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003a68:	e000      	b.n	8003a6c <readData+0x52>
		__NOP();
 8003a6a:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f6      	bne.n	8003a6a <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 ffd4 	bl	8005a2e <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68d8      	ldr	r0, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	791b      	ldrb	r3, [r3, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	4619      	mov	r1, r3
 8003a94:	f002 f805 	bl	8005aa2 <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f001 ffee 	bl	8005a7e <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f001 ff7e 	bl	80059a8 <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f002 f852 	bl	8005b5a <i2c_readDataByte>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 8003ad4:	2175      	movs	r1, #117	; 0x75
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff ff9f 	bl	8003a1a <readData>
 8003adc:	4603      	mov	r3, r0
 8003ade:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003ae6:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	bf14      	ite	ne
 8003af2:	2301      	movne	r3, #1
 8003af4:	2300      	moveq	r3, #0
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8003afa:	7bbb      	ldrb	r3, [r7, #14]

}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	0000      	movs	r0, r0
	...

08003b08 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 8003b28:	2143      	movs	r1, #67	; 0x43
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff ff75 	bl	8003a1a <readData>
 8003b30:	4603      	mov	r3, r0
 8003b32:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 8003b34:	2144      	movs	r1, #68	; 0x44
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff ff6f 	bl	8003a1a <readData>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 8003b40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	b21a      	sxth	r2, r3
 8003b48:	89bb      	ldrh	r3, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	785b      	ldrb	r3, [r3, #1]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d846      	bhi.n	8003be4 <readGyro_X+0xdc>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <readGyro_X+0x54>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b6d 	.word	0x08003b6d
 8003b60:	08003b8b 	.word	0x08003b8b
 8003b64:	08003ba9 	.word	0x08003ba9
 8003b68:	08003bc7 	.word	0x08003bc7
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 8003b6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fc fcdf 	bl	8000534 <__aeabi_i2d>
 8003b76:	a325      	add	r3, pc, #148	; (adr r3, 8003c0c <readGyro_X+0x104>)
 8003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7c:	f7fc fe6e 	bl	800085c <__aeabi_ddiv>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003b88:	e02d      	b.n	8003be6 <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 8003b8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fc fcd0 	bl	8000534 <__aeabi_i2d>
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	4b19      	ldr	r3, [pc, #100]	; (8003c00 <readGyro_X+0xf8>)
 8003b9a:	f7fc fe5f 	bl	800085c <__aeabi_ddiv>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003ba6:	e01e      	b.n	8003be6 <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 8003ba8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fc fcc1 	bl	8000534 <__aeabi_i2d>
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <readGyro_X+0xfc>)
 8003bb8:	f7fc fe50 	bl	800085c <__aeabi_ddiv>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003bc4:	e00f      	b.n	8003be6 <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 8003bc6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fc fcb2 	bl	8000534 <__aeabi_i2d>
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <readGyro_X+0x100>)
 8003bd6:	f7fc fe41 	bl	800085c <__aeabi_ddiv>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003be2:	e000      	b.n	8003be6 <readGyro_X+0xde>
		}default:{
			break;
 8003be4:	bf00      	nop
		}

	}

	return GYROX_R;
 8003be6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bea:	f7fd f805 	bl	8000bf8 <__aeabi_d2f>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	ee07 3a90 	vmov	s15, r3

}
 8003bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40508000 	.word	0x40508000
 8003c04:	40408000 	.word	0x40408000
 8003c08:	40300000 	.word	0x40300000
 8003c0c:	00000000 	.word	0x00000000
 8003c10:	40606000 	.word	0x40606000
 8003c14:	00000000 	.word	0x00000000

08003c18 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 8003c38:	2145      	movs	r1, #69	; 0x45
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff feed 	bl	8003a1a <readData>
 8003c40:	4603      	mov	r3, r0
 8003c42:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 8003c44:	2146      	movs	r1, #70	; 0x46
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff fee7 	bl	8003a1a <readData>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 8003c50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	b21a      	sxth	r2, r3
 8003c58:	89bb      	ldrh	r3, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	785b      	ldrb	r3, [r3, #1]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d846      	bhi.n	8003cf4 <readGyro_Y+0xdc>
 8003c66:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <readGyro_Y+0x54>)
 8003c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6c:	08003c7d 	.word	0x08003c7d
 8003c70:	08003c9b 	.word	0x08003c9b
 8003c74:	08003cb9 	.word	0x08003cb9
 8003c78:	08003cd7 	.word	0x08003cd7
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 8003c7c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fc fc57 	bl	8000534 <__aeabi_i2d>
 8003c86:	a325      	add	r3, pc, #148	; (adr r3, 8003d1c <readGyro_Y+0x104>)
 8003c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8c:	f7fc fde6 	bl	800085c <__aeabi_ddiv>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003c98:	e02d      	b.n	8003cf6 <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 8003c9a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fc fc48 	bl	8000534 <__aeabi_i2d>
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <readGyro_Y+0xf8>)
 8003caa:	f7fc fdd7 	bl	800085c <__aeabi_ddiv>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003cb6:	e01e      	b.n	8003cf6 <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 8003cb8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fc fc39 	bl	8000534 <__aeabi_i2d>
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <readGyro_Y+0xfc>)
 8003cc8:	f7fc fdc8 	bl	800085c <__aeabi_ddiv>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003cd4:	e00f      	b.n	8003cf6 <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 8003cd6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fc fc2a 	bl	8000534 <__aeabi_i2d>
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <readGyro_Y+0x100>)
 8003ce6:	f7fc fdb9 	bl	800085c <__aeabi_ddiv>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003cf2:	e000      	b.n	8003cf6 <readGyro_Y+0xde>
		}default:{
			break;
 8003cf4:	bf00      	nop
		}

	}

	return GYROY_R;
 8003cf6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003cfa:	f7fc ff7d 	bl	8000bf8 <__aeabi_d2f>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	ee07 3a90 	vmov	s15, r3

}
 8003d04:	eeb0 0a67 	vmov.f32	s0, s15
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40508000 	.word	0x40508000
 8003d14:	40408000 	.word	0x40408000
 8003d18:	40300000 	.word	0x40300000
 8003d1c:	00000000 	.word	0x00000000
 8003d20:	40606000 	.word	0x40606000
 8003d24:	00000000 	.word	0x00000000

08003d28 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8003d48:	2147      	movs	r1, #71	; 0x47
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff fe65 	bl	8003a1a <readData>
 8003d50:	4603      	mov	r3, r0
 8003d52:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 8003d54:	2148      	movs	r1, #72	; 0x48
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff fe5f 	bl	8003a1a <readData>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8003d60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	b21a      	sxth	r2, r3
 8003d68:	89bb      	ldrh	r3, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	785b      	ldrb	r3, [r3, #1]
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d846      	bhi.n	8003e04 <readGyro_Z+0xdc>
 8003d76:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <readGyro_Z+0x54>)
 8003d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7c:	08003d8d 	.word	0x08003d8d
 8003d80:	08003dab 	.word	0x08003dab
 8003d84:	08003dc9 	.word	0x08003dc9
 8003d88:	08003de7 	.word	0x08003de7
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 8003d8c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fc fbcf 	bl	8000534 <__aeabi_i2d>
 8003d96:	a325      	add	r3, pc, #148	; (adr r3, 8003e2c <readGyro_Z+0x104>)
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	f7fc fd5e 	bl	800085c <__aeabi_ddiv>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003da8:	e02d      	b.n	8003e06 <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 8003daa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fc fbc0 	bl	8000534 <__aeabi_i2d>
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <readGyro_Z+0xf8>)
 8003dba:	f7fc fd4f 	bl	800085c <__aeabi_ddiv>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003dc6:	e01e      	b.n	8003e06 <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 8003dc8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fc fbb1 	bl	8000534 <__aeabi_i2d>
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <readGyro_Z+0xfc>)
 8003dd8:	f7fc fd40 	bl	800085c <__aeabi_ddiv>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003de4:	e00f      	b.n	8003e06 <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 8003de6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fc fba2 	bl	8000534 <__aeabi_i2d>
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <readGyro_Z+0x100>)
 8003df6:	f7fc fd31 	bl	800085c <__aeabi_ddiv>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003e02:	e000      	b.n	8003e06 <readGyro_Z+0xde>
		}default:{
			break;
 8003e04:	bf00      	nop
		}

	}

	return GYROZ_R;
 8003e06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e0a:	f7fc fef5 	bl	8000bf8 <__aeabi_d2f>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	ee07 3a90 	vmov	s15, r3

}
 8003e14:	eeb0 0a67 	vmov.f32	s0, s15
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40508000 	.word	0x40508000
 8003e24:	40408000 	.word	0x40408000
 8003e28:	40300000 	.word	0x40300000
 8003e2c:	00000000 	.word	0x00000000
 8003e30:	40606000 	.word	0x40606000

08003e34 <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a6c      	ldr	r2, [pc, #432]	; (8003ff4 <pwm_Config+0x1c0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d106      	bne.n	8003e54 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8003e46:	4b6c      	ldr	r3, [pc, #432]	; (8003ff8 <pwm_Config+0x1c4>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	4a6b      	ldr	r2, [pc, #428]	; (8003ff8 <pwm_Config+0x1c4>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	6453      	str	r3, [r2, #68]	; 0x44
 8003e52:	e030      	b.n	8003eb6 <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5c:	d106      	bne.n	8003e6c <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8003e5e:	4b66      	ldr	r3, [pc, #408]	; (8003ff8 <pwm_Config+0x1c4>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	4a65      	ldr	r2, [pc, #404]	; (8003ff8 <pwm_Config+0x1c4>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6a:	e024      	b.n	8003eb6 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a62      	ldr	r2, [pc, #392]	; (8003ffc <pwm_Config+0x1c8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d106      	bne.n	8003e84 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8003e76:	4b60      	ldr	r3, [pc, #384]	; (8003ff8 <pwm_Config+0x1c4>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	4a5f      	ldr	r2, [pc, #380]	; (8003ff8 <pwm_Config+0x1c4>)
 8003e7c:	f043 0302 	orr.w	r3, r3, #2
 8003e80:	6413      	str	r3, [r2, #64]	; 0x40
 8003e82:	e018      	b.n	8003eb6 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a5d      	ldr	r2, [pc, #372]	; (8004000 <pwm_Config+0x1cc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d106      	bne.n	8003e9c <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8003e8e:	4b5a      	ldr	r3, [pc, #360]	; (8003ff8 <pwm_Config+0x1c4>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	4a59      	ldr	r2, [pc, #356]	; (8003ff8 <pwm_Config+0x1c4>)
 8003e94:	f043 0304 	orr.w	r3, r3, #4
 8003e98:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9a:	e00c      	b.n	8003eb6 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a58      	ldr	r2, [pc, #352]	; (8004004 <pwm_Config+0x1d0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d106      	bne.n	8003eb4 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8003ea6:	4b54      	ldr	r3, [pc, #336]	; (8003ff8 <pwm_Config+0x1c4>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a53      	ldr	r2, [pc, #332]	; (8003ff8 <pwm_Config+0x1c4>)
 8003eac:	f043 0308 	orr.w	r3, r3, #8
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb2:	e000      	b.n	8003eb6 <pwm_Config+0x82>
	}
	else{
		__NOP();
 8003eb4:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ec4:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	7d5b      	ldrb	r3, [r3, #21]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f8ac 	bl	800402c <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f9bb 	bl	8004250 <setDuttyCycle>
 8003eda:	e005      	b.n	8003ee8 <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f8a5 	bl	800402c <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fa8c 	bl	8004400 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0210 	bic.w	r2, r2, #16
 8003ef6:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2200      	movs	r2, #0
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	791b      	ldrb	r3, [r3, #4]
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d86f      	bhi.n	8003fe8 <pwm_Config+0x1b4>
 8003f08:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <pwm_Config+0xdc>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003f21 	.word	0x08003f21
 8003f14:	08003f53 	.word	0x08003f53
 8003f18:	08003f85 	.word	0x08003f85
 8003f1c:	08003fb7 	.word	0x08003fb7
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0203 	bic.w	r2, r2, #3
 8003f2e:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003f3e:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0208 	orr.w	r2, r2, #8
 8003f4e:	619a      	str	r2, [r3, #24]


		break;
 8003f50:	e04b      	b.n	8003fea <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699a      	ldr	r2, [r3, #24]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f60:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699a      	ldr	r2, [r3, #24]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003f70:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699a      	ldr	r2, [r3, #24]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f80:	619a      	str	r2, [r3, #24]

		break;
 8003f82:	e032      	b.n	8003fea <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69da      	ldr	r2, [r3, #28]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0203 	bic.w	r2, r2, #3
 8003f92:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003fa2:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0208 	orr.w	r2, r2, #8
 8003fb2:	61da      	str	r2, [r3, #28]

		break;
 8003fb4:	e019      	b.n	8003fea <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69da      	ldr	r2, [r3, #28]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003fc4:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003fd4:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69da      	ldr	r2, [r3, #28]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fe4:	61da      	str	r2, [r3, #28]

		break;
 8003fe6:	e000      	b.n	8003fea <pwm_Config+0x1b6>
	}

	default:{
		break;
 8003fe8:	bf00      	nop
	}// fin del switch-case




}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	40000400 	.word	0x40000400
 8004000:	40000800 	.word	0x40000800
 8004004:	40000c00 	.word	0x40000c00

08004008 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6892      	ldr	r2, [r2, #8]
 8004040:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b10      	cmp	r3, #16
 800404c:	d01a      	beq.n	8004084 <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b14      	cmp	r3, #20
 8004052:	d017      	beq.n	8004084 <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b1e      	cmp	r3, #30
 8004058:	d014      	beq.n	8004084 <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b28      	cmp	r3, #40	; 0x28
 800405e:	d011      	beq.n	8004084 <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b32      	cmp	r3, #50	; 0x32
 8004064:	d00e      	beq.n	8004084 <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b3c      	cmp	r3, #60	; 0x3c
 800406a:	d00b      	beq.n	8004084 <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b46      	cmp	r3, #70	; 0x46
 8004070:	d008      	beq.n	8004084 <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b50      	cmp	r3, #80	; 0x50
 8004076:	d005      	beq.n	8004084 <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b5a      	cmp	r3, #90	; 0x5a
 800407c:	d002      	beq.n	8004084 <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b64      	cmp	r3, #100	; 0x64
 8004082:	d111      	bne.n	80040a8 <setFrequency+0x7c>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	899b      	ldrh	r3, [r3, #12]
 8004088:	461a      	mov	r2, r3
 800408a:	0152      	lsls	r2, r2, #5
 800408c:	1ad2      	subs	r2, r2, r3
 800408e:	0092      	lsls	r2, r2, #2
 8004090:	4413      	add	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	b29a      	uxth	r2, r3
 8004096:	4b68      	ldr	r3, [pc, #416]	; (8004238 <setFrequency+0x20c>)
 8004098:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800409a:	4b67      	ldr	r3, [pc, #412]	; (8004238 <setFrequency+0x20c>)
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	1e5a      	subs	r2, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80040a6:	e0c0      	b.n	800422a <setFrequency+0x1fe>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2ba0      	cmp	r3, #160	; 0xa0
 80040ac:	d022      	beq.n	80040f4 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_20MHz_10us)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2bc8      	cmp	r3, #200	; 0xc8
 80040b2:	d01f      	beq.n	80040f4 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_30MHz_10us)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80040ba:	d01b      	beq.n	80040f4 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_40MHz_10us)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80040c2:	d017      	beq.n	80040f4 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_50MHz_10us)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040ca:	d013      	beq.n	80040f4 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_60MHz_10us)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80040d2:	d00f      	beq.n	80040f4 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_70MHz_10us)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80040da:	d00b      	beq.n	80040f4 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_80MHz_10us)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80040e2:	d007      	beq.n	80040f4 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_90MHz_10us)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80040ea:	d003      	beq.n	80040f4 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040f2:	d114      	bne.n	800411e <setFrequency+0xf2>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	899b      	ldrh	r3, [r3, #12]
 80040f8:	461a      	mov	r2, r3
 80040fa:	0092      	lsls	r2, r2, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	461a      	mov	r2, r3
 8004100:	0091      	lsls	r1, r2, #2
 8004102:	461a      	mov	r2, r3
 8004104:	460b      	mov	r3, r1
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	b29a      	uxth	r2, r3
 800410c:	4b4a      	ldr	r3, [pc, #296]	; (8004238 <setFrequency+0x20c>)
 800410e:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8004110:	4b49      	ldr	r3, [pc, #292]	; (8004238 <setFrequency+0x20c>)
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	1e5a      	subs	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	62da      	str	r2, [r3, #44]	; 0x2c
 800411c:	e085      	b.n	800422a <setFrequency+0x1fe>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004124:	d029      	beq.n	800417a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_20MHz_100us)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800412c:	d025      	beq.n	800417a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_30MHz_100us)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004134:	4293      	cmp	r3, r2
 8004136:	d020      	beq.n	800417a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_40MHz_100us)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800413e:	d01c      	beq.n	800417a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_50MHz_100us)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f241 3288 	movw	r2, #5000	; 0x1388
 8004146:	4293      	cmp	r3, r2
 8004148:	d017      	beq.n	800417a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_60MHz_100us)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004150:	4293      	cmp	r3, r2
 8004152:	d012      	beq.n	800417a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_70MHz_100us)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f641 3258 	movw	r2, #7000	; 0x1b58
 800415a:	4293      	cmp	r3, r2
 800415c:	d00d      	beq.n	800417a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_80MHz_100us)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004164:	d009      	beq.n	800417a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_90MHz_100us)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f242 3228 	movw	r2, #9000	; 0x2328
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <setFrequency+0x14e>
		   || (speed == PWM_SPEED_100MHz_100us)){
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f242 7210 	movw	r2, #10000	; 0x2710
 8004176:	4293      	cmp	r3, r2
 8004178:	d10f      	bne.n	800419a <setFrequency+0x16e>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	899b      	ldrh	r3, [r3, #12]
 800417e:	461a      	mov	r2, r3
 8004180:	0092      	lsls	r2, r2, #2
 8004182:	4413      	add	r3, r2
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <setFrequency+0x20c>)
 800418a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800418c:	4b2a      	ldr	r3, [pc, #168]	; (8004238 <setFrequency+0x20c>)
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	1e5a      	subs	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	62da      	str	r2, [r3, #44]	; 0x2c
 8004198:	e047      	b.n	800422a <setFrequency+0x1fe>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80041a0:	d028      	beq.n	80041f4 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_20MHz_1ms)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d023      	beq.n	80041f4 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_30MHz_1ms)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f247 5230 	movw	r2, #30000	; 0x7530
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01e      	beq.n	80041f4 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_40MHz_1ms)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f649 4240 	movw	r2, #40000	; 0x9c40
 80041bc:	4293      	cmp	r3, r2
 80041be:	d019      	beq.n	80041f4 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_50MHz_1ms)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d014      	beq.n	80041f4 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_60MHz_1ms)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f64e 2260 	movw	r2, #60000	; 0xea60
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00f      	beq.n	80041f4 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_70MHz_1ms)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4a19      	ldr	r2, [pc, #100]	; (800423c <setFrequency+0x210>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00b      	beq.n	80041f4 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_80MHz_1ms)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4a18      	ldr	r2, [pc, #96]	; (8004240 <setFrequency+0x214>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_90MHz_1ms)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4a17      	ldr	r2, [pc, #92]	; (8004244 <setFrequency+0x218>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4a16      	ldr	r2, [pc, #88]	; (8004248 <setFrequency+0x21c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d10a      	bne.n	800420a <setFrequency+0x1de>

		periodo = ptrPwmHandler->config.periodo;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	899a      	ldrh	r2, [r3, #12]
 80041f8:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <setFrequency+0x20c>)
 80041fa:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80041fc:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <setFrequency+0x20c>)
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	1e5a      	subs	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	62da      	str	r2, [r3, #44]	; 0x2c
 8004208:	e00f      	b.n	800422a <setFrequency+0x1fe>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	899b      	ldrh	r3, [r3, #12]
 800420e:	4a0f      	ldr	r2, [pc, #60]	; (800424c <setFrequency+0x220>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	b29a      	uxth	r2, r3
 8004218:	4b07      	ldr	r3, [pc, #28]	; (8004238 <setFrequency+0x20c>)
 800421a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800421c:	4b06      	ldr	r3, [pc, #24]	; (8004238 <setFrequency+0x20c>)
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	1e5a      	subs	r2, r3, #1
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8004228:	bf00      	nop
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	20000500 	.word	0x20000500
 800423c:	00011170 	.word	0x00011170
 8004240:	00013880 	.word	0x00013880
 8004244:	00015f90 	.word	0x00015f90
 8004248:	000186a0 	.word	0x000186a0
 800424c:	cccccccd 	.word	0xcccccccd

08004250 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b08b      	sub	sp, #44	; 0x2c
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	791b      	ldrb	r3, [r3, #4]
 800425c:	2b03      	cmp	r3, #3
 800425e:	f200 80c3 	bhi.w	80043e8 <setDuttyCycle+0x198>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <setDuttyCycle+0x18>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	08004279 	.word	0x08004279
 800426c:	080042d5 	.word	0x080042d5
 8004270:	08004331 	.word	0x08004331
 8004274:	0800438d 	.word	0x0800438d
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	ed93 7a04 	vldr	s14, [r3, #16]
 800427e:	4b5d      	ldr	r3, [pc, #372]	; (80043f4 <setDuttyCycle+0x1a4>)
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800428a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428e:	ee17 0a90 	vmov	r0, s15
 8004292:	f7fc f961 	bl	8000558 <__aeabi_f2d>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	4b55      	ldr	r3, [pc, #340]	; (80043f8 <setDuttyCycle+0x1a8>)
 80042a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042a8:	f7fc fad8 	bl	800085c <__aeabi_ddiv>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4610      	mov	r0, r2
 80042b2:	4619      	mov	r1, r3
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	4b50      	ldr	r3, [pc, #320]	; (80043fc <setDuttyCycle+0x1ac>)
 80042ba:	f7fb ffed 	bl	8000298 <__aeabi_dsub>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4610      	mov	r0, r2
 80042c4:	4619      	mov	r1, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681c      	ldr	r4, [r3, #0]
 80042ca:	f7fc fc75 	bl	8000bb8 <__aeabi_d2uiz>
 80042ce:	4603      	mov	r3, r0
 80042d0:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 80042d2:	e08a      	b.n	80043ea <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	ed93 7a04 	vldr	s14, [r3, #16]
 80042da:	4b46      	ldr	r3, [pc, #280]	; (80043f4 <setDuttyCycle+0x1a4>)
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ea:	ee17 0a90 	vmov	r0, s15
 80042ee:	f7fc f933 	bl	8000558 <__aeabi_f2d>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	4b3e      	ldr	r3, [pc, #248]	; (80043f8 <setDuttyCycle+0x1a8>)
 8004300:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004304:	f7fc faaa 	bl	800085c <__aeabi_ddiv>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4610      	mov	r0, r2
 800430e:	4619      	mov	r1, r3
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	4b39      	ldr	r3, [pc, #228]	; (80043fc <setDuttyCycle+0x1ac>)
 8004316:	f7fb ffbf 	bl	8000298 <__aeabi_dsub>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4610      	mov	r0, r2
 8004320:	4619      	mov	r1, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681c      	ldr	r4, [r3, #0]
 8004326:	f7fc fc47 	bl	8000bb8 <__aeabi_d2uiz>
 800432a:	4603      	mov	r3, r0
 800432c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800432e:	e05c      	b.n	80043ea <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	ed93 7a04 	vldr	s14, [r3, #16]
 8004336:	4b2f      	ldr	r3, [pc, #188]	; (80043f4 <setDuttyCycle+0x1a4>)
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004346:	ee17 0a90 	vmov	r0, s15
 800434a:	f7fc f905 	bl	8000558 <__aeabi_f2d>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	4b27      	ldr	r3, [pc, #156]	; (80043f8 <setDuttyCycle+0x1a8>)
 800435c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004360:	f7fc fa7c 	bl	800085c <__aeabi_ddiv>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	4b22      	ldr	r3, [pc, #136]	; (80043fc <setDuttyCycle+0x1ac>)
 8004372:	f7fb ff91 	bl	8000298 <__aeabi_dsub>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4610      	mov	r0, r2
 800437c:	4619      	mov	r1, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681c      	ldr	r4, [r3, #0]
 8004382:	f7fc fc19 	bl	8000bb8 <__aeabi_d2uiz>
 8004386:	4603      	mov	r3, r0
 8004388:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800438a:	e02e      	b.n	80043ea <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	ed93 7a04 	vldr	s14, [r3, #16]
 8004392:	4b18      	ldr	r3, [pc, #96]	; (80043f4 <setDuttyCycle+0x1a4>)
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800439e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a2:	ee17 0a90 	vmov	r0, s15
 80043a6:	f7fc f8d7 	bl	8000558 <__aeabi_f2d>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <setDuttyCycle+0x1a8>)
 80043b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80043bc:	f7fc fa4e 	bl	800085c <__aeabi_ddiv>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4610      	mov	r0, r2
 80043c6:	4619      	mov	r1, r3
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <setDuttyCycle+0x1ac>)
 80043ce:	f7fb ff63 	bl	8000298 <__aeabi_dsub>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4610      	mov	r0, r2
 80043d8:	4619      	mov	r1, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681c      	ldr	r4, [r3, #0]
 80043de:	f7fc fbeb 	bl	8000bb8 <__aeabi_d2uiz>
 80043e2:	4603      	mov	r3, r0
 80043e4:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 80043e6:	e000      	b.n	80043ea <setDuttyCycle+0x19a>
	}

	default:{
		break;
 80043e8:	bf00      	nop
	}

	}// fin del switch-case

}
 80043ea:	bf00      	nop
 80043ec:	372c      	adds	r7, #44	; 0x2c
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd90      	pop	{r4, r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000500 	.word	0x20000500
 80043f8:	40590000 	.word	0x40590000
 80043fc:	3ff00000 	.word	0x3ff00000

08004400 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8004400:	b590      	push	{r4, r7, lr}
 8004402:	b08b      	sub	sp, #44	; 0x2c
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	791b      	ldrb	r3, [r3, #4]
 800440c:	2b03      	cmp	r3, #3
 800440e:	f200 80d3 	bhi.w	80045b8 <setDuttyCycleAfOpt+0x1b8>
 8004412:	a201      	add	r2, pc, #4	; (adr r2, 8004418 <setDuttyCycleAfOpt+0x18>)
 8004414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004418:	08004429 	.word	0x08004429
 800441c:	0800448d 	.word	0x0800448d
 8004420:	080044f1 	.word	0x080044f1
 8004424:	08004555 	.word	0x08004555
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	edd3 7a04 	vldr	s15, [r3, #16]
 800442e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80045c4 <setDuttyCycleAfOpt+0x1c4>
 8004432:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004436:	4b64      	ldr	r3, [pc, #400]	; (80045c8 <setDuttyCycleAfOpt+0x1c8>)
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004446:	ee17 0a90 	vmov	r0, s15
 800444a:	f7fc f885 	bl	8000558 <__aeabi_f2d>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	4b5c      	ldr	r3, [pc, #368]	; (80045cc <setDuttyCycleAfOpt+0x1cc>)
 800445c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004460:	f7fc f9fc 	bl	800085c <__aeabi_ddiv>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4610      	mov	r0, r2
 800446a:	4619      	mov	r1, r3
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	4b57      	ldr	r3, [pc, #348]	; (80045d0 <setDuttyCycleAfOpt+0x1d0>)
 8004472:	f7fb ff11 	bl	8000298 <__aeabi_dsub>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4610      	mov	r0, r2
 800447c:	4619      	mov	r1, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681c      	ldr	r4, [r3, #0]
 8004482:	f7fc fb99 	bl	8000bb8 <__aeabi_d2uiz>
 8004486:	4603      	mov	r3, r0
 8004488:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 800448a:	e096      	b.n	80045ba <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004492:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80045c4 <setDuttyCycleAfOpt+0x1c4>
 8004496:	ee37 7a67 	vsub.f32	s14, s14, s15
 800449a:	4b4b      	ldr	r3, [pc, #300]	; (80045c8 <setDuttyCycleAfOpt+0x1c8>)
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044aa:	ee17 0a90 	vmov	r0, s15
 80044ae:	f7fc f853 	bl	8000558 <__aeabi_f2d>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	4b43      	ldr	r3, [pc, #268]	; (80045cc <setDuttyCycleAfOpt+0x1cc>)
 80044c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044c4:	f7fc f9ca 	bl	800085c <__aeabi_ddiv>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	4b3e      	ldr	r3, [pc, #248]	; (80045d0 <setDuttyCycleAfOpt+0x1d0>)
 80044d6:	f7fb fedf 	bl	8000298 <__aeabi_dsub>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4610      	mov	r0, r2
 80044e0:	4619      	mov	r1, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681c      	ldr	r4, [r3, #0]
 80044e6:	f7fc fb67 	bl	8000bb8 <__aeabi_d2uiz>
 80044ea:	4603      	mov	r3, r0
 80044ec:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 80044ee:	e064      	b.n	80045ba <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80044f6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80045c4 <setDuttyCycleAfOpt+0x1c4>
 80044fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044fe:	4b32      	ldr	r3, [pc, #200]	; (80045c8 <setDuttyCycleAfOpt+0x1c8>)
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800450a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800450e:	ee17 0a90 	vmov	r0, s15
 8004512:	f7fc f821 	bl	8000558 <__aeabi_f2d>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <setDuttyCycleAfOpt+0x1cc>)
 8004524:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004528:	f7fc f998 	bl	800085c <__aeabi_ddiv>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	4b25      	ldr	r3, [pc, #148]	; (80045d0 <setDuttyCycleAfOpt+0x1d0>)
 800453a:	f7fb fead 	bl	8000298 <__aeabi_dsub>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4610      	mov	r0, r2
 8004544:	4619      	mov	r1, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681c      	ldr	r4, [r3, #0]
 800454a:	f7fc fb35 	bl	8000bb8 <__aeabi_d2uiz>
 800454e:	4603      	mov	r3, r0
 8004550:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8004552:	e032      	b.n	80045ba <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	edd3 7a04 	vldr	s15, [r3, #16]
 800455a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80045c4 <setDuttyCycleAfOpt+0x1c4>
 800455e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004562:	4b19      	ldr	r3, [pc, #100]	; (80045c8 <setDuttyCycleAfOpt+0x1c8>)
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800456e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004572:	ee17 0a90 	vmov	r0, s15
 8004576:	f7fb ffef 	bl	8000558 <__aeabi_f2d>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	4b11      	ldr	r3, [pc, #68]	; (80045cc <setDuttyCycleAfOpt+0x1cc>)
 8004588:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800458c:	f7fc f966 	bl	800085c <__aeabi_ddiv>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4610      	mov	r0, r2
 8004596:	4619      	mov	r1, r3
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <setDuttyCycleAfOpt+0x1d0>)
 800459e:	f7fb fe7b 	bl	8000298 <__aeabi_dsub>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681c      	ldr	r4, [r3, #0]
 80045ae:	f7fc fb03 	bl	8000bb8 <__aeabi_d2uiz>
 80045b2:	4603      	mov	r3, r0
 80045b4:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 80045b6:	e000      	b.n	80045ba <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 80045b8:	bf00      	nop
	}

	}// fin del switch-case


}
 80045ba:	bf00      	nop
 80045bc:	372c      	adds	r7, #44	; 0x2c
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd90      	pop	{r4, r7, pc}
 80045c2:	bf00      	nop
 80045c4:	42c80000 	.word	0x42c80000
 80045c8:	20000500 	.word	0x20000500
 80045cc:	40590000 	.word	0x40590000
 80045d0:	3ff00000 	.word	0x3ff00000

080045d4 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 80045de:	4b92      	ldr	r3, [pc, #584]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a91      	ldr	r2, [pc, #580]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80045e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e8:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80045ea:	4b8f      	ldr	r3, [pc, #572]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80045ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 80045f2:	4b8e      	ldr	r3, [pc, #568]	; (800482c <RCC_enableMaxFrequencies+0x258>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a8d      	ldr	r2, [pc, #564]	; (800482c <RCC_enableMaxFrequencies+0x258>)
 80045f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045fc:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 80045fe:	4b8a      	ldr	r3, [pc, #552]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	4a89      	ldr	r2, [pc, #548]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004604:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004608:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	2b08      	cmp	r3, #8
 800460e:	f200 82fc 	bhi.w	8004c0a <RCC_enableMaxFrequencies+0x636>
 8004612:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <RCC_enableMaxFrequencies+0x44>)
 8004614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004618:	0800463d 	.word	0x0800463d
 800461c:	080046df 	.word	0x080046df
 8004620:	08004781 	.word	0x08004781
 8004624:	08004835 	.word	0x08004835
 8004628:	080048d7 	.word	0x080048d7
 800462c:	08004979 	.word	0x08004979
 8004630:	08004a25 	.word	0x08004a25
 8004634:	08004ac7 	.word	0x08004ac7
 8004638:	08004b69 	.word	0x08004b69
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800463c:	4b7a      	ldr	r3, [pc, #488]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4a79      	ldr	r2, [pc, #484]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004646:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8004648:	4b77      	ldr	r3, [pc, #476]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	4a76      	ldr	r2, [pc, #472]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 800464e:	f043 0310 	orr.w	r3, r3, #16
 8004652:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8004654:	4b74      	ldr	r3, [pc, #464]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4a73      	ldr	r2, [pc, #460]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 800465a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800465e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004662:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8004664:	4b70      	ldr	r3, [pc, #448]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	4a6f      	ldr	r2, [pc, #444]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 800466a:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800466e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8004670:	4b6d      	ldr	r3, [pc, #436]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	4a6c      	ldr	r2, [pc, #432]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004676:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800467a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 800467c:	4b6a      	ldr	r3, [pc, #424]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4a69      	ldr	r2, [pc, #420]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004686:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8004688:	4b67      	ldr	r3, [pc, #412]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	4a66      	ldr	r2, [pc, #408]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 800468e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004692:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8004694:	4b64      	ldr	r3, [pc, #400]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	4a63      	ldr	r2, [pc, #396]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 800469a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800469e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80046a0:	4b61      	ldr	r3, [pc, #388]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4a60      	ldr	r2, [pc, #384]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80046a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046aa:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80046ac:	4b5e      	ldr	r3, [pc, #376]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a5d      	ldr	r2, [pc, #372]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80046b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046b6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80046b8:	e000      	b.n	80046bc <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 80046ba:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80046bc:	4b5a      	ldr	r3, [pc, #360]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f8      	beq.n	80046ba <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80046c8:	4b59      	ldr	r3, [pc, #356]	; (8004830 <RCC_enableMaxFrequencies+0x25c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a58      	ldr	r2, [pc, #352]	; (8004830 <RCC_enableMaxFrequencies+0x25c>)
 80046ce:	f023 030f 	bic.w	r3, r3, #15
 80046d2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 80046d4:	4b56      	ldr	r3, [pc, #344]	; (8004830 <RCC_enableMaxFrequencies+0x25c>)
 80046d6:	4a56      	ldr	r2, [pc, #344]	; (8004830 <RCC_enableMaxFrequencies+0x25c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6013      	str	r3, [r2, #0]

			break;
 80046dc:	e296      	b.n	8004c0c <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80046de:	4b52      	ldr	r3, [pc, #328]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4a51      	ldr	r2, [pc, #324]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80046e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046e8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80046ea:	4b4f      	ldr	r3, [pc, #316]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	4a4e      	ldr	r2, [pc, #312]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80046f0:	f043 0310 	orr.w	r3, r3, #16
 80046f4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80046f6:	4b4c      	ldr	r3, [pc, #304]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	4a4b      	ldr	r2, [pc, #300]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80046fc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004704:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8004706:	4b48      	ldr	r3, [pc, #288]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4a47      	ldr	r2, [pc, #284]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 800470c:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8004710:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8004712:	4b45      	ldr	r3, [pc, #276]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	4a44      	ldr	r2, [pc, #272]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004718:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800471c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 800471e:	4b42      	ldr	r3, [pc, #264]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	4a41      	ldr	r2, [pc, #260]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004728:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800472a:	4b3f      	ldr	r3, [pc, #252]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	4a3e      	ldr	r2, [pc, #248]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004734:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8004736:	4b3c      	ldr	r3, [pc, #240]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	4a3b      	ldr	r2, [pc, #236]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 800473c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004740:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8004742:	4b39      	ldr	r3, [pc, #228]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	4a38      	ldr	r2, [pc, #224]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004748:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800474c:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800474e:	4b36      	ldr	r3, [pc, #216]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a35      	ldr	r2, [pc, #212]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004754:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004758:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800475a:	e000      	b.n	800475e <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 800475c:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800475e:	4b32      	ldr	r3, [pc, #200]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f8      	beq.n	800475c <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800476a:	4b31      	ldr	r3, [pc, #196]	; (8004830 <RCC_enableMaxFrequencies+0x25c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a30      	ldr	r2, [pc, #192]	; (8004830 <RCC_enableMaxFrequencies+0x25c>)
 8004770:	f023 030f 	bic.w	r3, r3, #15
 8004774:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8004776:	4b2e      	ldr	r3, [pc, #184]	; (8004830 <RCC_enableMaxFrequencies+0x25c>)
 8004778:	4a2d      	ldr	r2, [pc, #180]	; (8004830 <RCC_enableMaxFrequencies+0x25c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6013      	str	r3, [r2, #0]

			break;
 800477e:	e245      	b.n	8004c0c <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8004780:	4b29      	ldr	r3, [pc, #164]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4a28      	ldr	r2, [pc, #160]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004786:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800478a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800478c:	4b26      	ldr	r3, [pc, #152]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4a25      	ldr	r2, [pc, #148]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004792:	f043 0310 	orr.w	r3, r3, #16
 8004796:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8004798:	4b23      	ldr	r3, [pc, #140]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4a22      	ldr	r2, [pc, #136]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 800479e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80047a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 80047a8:	4b1f      	ldr	r3, [pc, #124]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	4a1e      	ldr	r2, [pc, #120]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80047ae:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 80047b2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80047b4:	4b1c      	ldr	r3, [pc, #112]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	4a1b      	ldr	r2, [pc, #108]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80047ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80047be:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 80047c0:	4b19      	ldr	r3, [pc, #100]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	4a18      	ldr	r2, [pc, #96]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80047c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ca:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80047cc:	4b16      	ldr	r3, [pc, #88]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a15      	ldr	r2, [pc, #84]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80047d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80047d8:	4b13      	ldr	r3, [pc, #76]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4a12      	ldr	r2, [pc, #72]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80047de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047e2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80047e4:	4b10      	ldr	r3, [pc, #64]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a0f      	ldr	r2, [pc, #60]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80047ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047ee:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80047f0:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a0c      	ldr	r2, [pc, #48]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 80047f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047fa:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80047fc:	e000      	b.n	8004800 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 80047fe:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004800:	4b09      	ldr	r3, [pc, #36]	; (8004828 <RCC_enableMaxFrequencies+0x254>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f8      	beq.n	80047fe <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800480c:	4b08      	ldr	r3, [pc, #32]	; (8004830 <RCC_enableMaxFrequencies+0x25c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a07      	ldr	r2, [pc, #28]	; (8004830 <RCC_enableMaxFrequencies+0x25c>)
 8004812:	f023 030f 	bic.w	r3, r3, #15
 8004816:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8004818:	4b05      	ldr	r3, [pc, #20]	; (8004830 <RCC_enableMaxFrequencies+0x25c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a04      	ldr	r2, [pc, #16]	; (8004830 <RCC_enableMaxFrequencies+0x25c>)
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	6013      	str	r3, [r2, #0]


			break;
 8004824:	e1f2      	b.n	8004c0c <RCC_enableMaxFrequencies+0x638>
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800
 800482c:	40007000 	.word	0x40007000
 8004830:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8004834:	4b79      	ldr	r3, [pc, #484]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	4a78      	ldr	r2, [pc, #480]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 800483a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800483e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8004840:	4b76      	ldr	r3, [pc, #472]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	4a75      	ldr	r2, [pc, #468]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004846:	f043 0310 	orr.w	r3, r3, #16
 800484a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800484c:	4b73      	ldr	r3, [pc, #460]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	4a72      	ldr	r2, [pc, #456]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004852:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800485a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 800485c:	4b6f      	ldr	r3, [pc, #444]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4a6e      	ldr	r2, [pc, #440]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004862:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8004866:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8004868:	4b6c      	ldr	r3, [pc, #432]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	4a6b      	ldr	r2, [pc, #428]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 800486e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004872:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8004874:	4b69      	ldr	r3, [pc, #420]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004876:	4a69      	ldr	r2, [pc, #420]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800487c:	4b67      	ldr	r3, [pc, #412]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4a66      	ldr	r2, [pc, #408]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004886:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8004888:	4b64      	ldr	r3, [pc, #400]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4a63      	ldr	r2, [pc, #396]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 800488e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004892:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8004894:	4b61      	ldr	r3, [pc, #388]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4a60      	ldr	r2, [pc, #384]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 800489a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800489e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80048a0:	4b5e      	ldr	r3, [pc, #376]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a5d      	ldr	r2, [pc, #372]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80048a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048aa:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80048ac:	e000      	b.n	80048b0 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 80048ae:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80048b0:	4b5a      	ldr	r3, [pc, #360]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0f8      	beq.n	80048ae <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80048bc:	4b58      	ldr	r3, [pc, #352]	; (8004a20 <RCC_enableMaxFrequencies+0x44c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a57      	ldr	r2, [pc, #348]	; (8004a20 <RCC_enableMaxFrequencies+0x44c>)
 80048c2:	f023 030f 	bic.w	r3, r3, #15
 80048c6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80048c8:	4b55      	ldr	r3, [pc, #340]	; (8004a20 <RCC_enableMaxFrequencies+0x44c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a54      	ldr	r2, [pc, #336]	; (8004a20 <RCC_enableMaxFrequencies+0x44c>)
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	6013      	str	r3, [r2, #0]

			break;
 80048d4:	e19a      	b.n	8004c0c <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80048d6:	4b51      	ldr	r3, [pc, #324]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	4a50      	ldr	r2, [pc, #320]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80048dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048e0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80048e2:	4b4e      	ldr	r3, [pc, #312]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	4a4d      	ldr	r2, [pc, #308]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80048e8:	f043 0310 	orr.w	r3, r3, #16
 80048ec:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80048ee:	4b4b      	ldr	r3, [pc, #300]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	4a4a      	ldr	r2, [pc, #296]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80048f4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80048f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048fc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 80048fe:	4b47      	ldr	r3, [pc, #284]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	4a46      	ldr	r2, [pc, #280]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004904:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8004908:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800490a:	4b44      	ldr	r3, [pc, #272]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4a43      	ldr	r2, [pc, #268]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004910:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004914:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8004916:	4b41      	ldr	r3, [pc, #260]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004918:	4a40      	ldr	r2, [pc, #256]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800491e:	4b3f      	ldr	r3, [pc, #252]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	4a3e      	ldr	r2, [pc, #248]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004928:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800492a:	4b3c      	ldr	r3, [pc, #240]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	4a3b      	ldr	r2, [pc, #236]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004930:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004934:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8004936:	4b39      	ldr	r3, [pc, #228]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	4a38      	ldr	r2, [pc, #224]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 800493c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004940:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8004942:	4b36      	ldr	r3, [pc, #216]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a35      	ldr	r2, [pc, #212]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004948:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800494c:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800494e:	e000      	b.n	8004952 <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 8004950:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004952:	4b32      	ldr	r3, [pc, #200]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f8      	beq.n	8004950 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800495e:	4b30      	ldr	r3, [pc, #192]	; (8004a20 <RCC_enableMaxFrequencies+0x44c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a2f      	ldr	r2, [pc, #188]	; (8004a20 <RCC_enableMaxFrequencies+0x44c>)
 8004964:	f023 030f 	bic.w	r3, r3, #15
 8004968:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800496a:	4b2d      	ldr	r3, [pc, #180]	; (8004a20 <RCC_enableMaxFrequencies+0x44c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2c      	ldr	r2, [pc, #176]	; (8004a20 <RCC_enableMaxFrequencies+0x44c>)
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	6013      	str	r3, [r2, #0]

			break;
 8004976:	e149      	b.n	8004c0c <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8004978:	4b28      	ldr	r3, [pc, #160]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4a27      	ldr	r2, [pc, #156]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 800497e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004982:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8004984:	4b25      	ldr	r3, [pc, #148]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4a24      	ldr	r2, [pc, #144]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 800498a:	f043 0310 	orr.w	r3, r3, #16
 800498e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8004990:	4b22      	ldr	r3, [pc, #136]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	4a21      	ldr	r2, [pc, #132]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 8004996:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800499a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800499e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 80049a0:	4b1e      	ldr	r3, [pc, #120]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4a1d      	ldr	r2, [pc, #116]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80049a6:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 80049aa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80049ac:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a1a      	ldr	r2, [pc, #104]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80049b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80049b6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80049b8:	4b18      	ldr	r3, [pc, #96]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80049ba:	4a18      	ldr	r2, [pc, #96]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80049c0:	4b16      	ldr	r3, [pc, #88]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4a15      	ldr	r2, [pc, #84]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80049c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ca:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80049cc:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80049d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049d6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80049d8:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4a0f      	ldr	r2, [pc, #60]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80049de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049e2:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80049e4:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80049ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ee:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80049f0:	e000      	b.n	80049f4 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 80049f2:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80049f4:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <RCC_enableMaxFrequencies+0x448>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f8      	beq.n	80049f2 <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <RCC_enableMaxFrequencies+0x44c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a06      	ldr	r2, [pc, #24]	; (8004a20 <RCC_enableMaxFrequencies+0x44c>)
 8004a06:	f023 030f 	bic.w	r3, r3, #15
 8004a0a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8004a0c:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <RCC_enableMaxFrequencies+0x44c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a03      	ldr	r2, [pc, #12]	; (8004a20 <RCC_enableMaxFrequencies+0x44c>)
 8004a12:	f043 0302 	orr.w	r3, r3, #2
 8004a16:	6013      	str	r3, [r2, #0]

			break;
 8004a18:	e0f8      	b.n	8004c0c <RCC_enableMaxFrequencies+0x638>
 8004a1a:	bf00      	nop
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8004a24:	4b83      	ldr	r3, [pc, #524]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	4a82      	ldr	r2, [pc, #520]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a2e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8004a30:	4b80      	ldr	r3, [pc, #512]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4a7f      	ldr	r2, [pc, #508]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a36:	f043 0310 	orr.w	r3, r3, #16
 8004a3a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8004a3c:	4b7d      	ldr	r3, [pc, #500]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a7c      	ldr	r2, [pc, #496]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a4a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 8004a4c:	4b79      	ldr	r3, [pc, #484]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	4a78      	ldr	r2, [pc, #480]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a52:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004a56:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8004a58:	4b76      	ldr	r3, [pc, #472]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	4a75      	ldr	r2, [pc, #468]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a5e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004a62:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8004a64:	4b73      	ldr	r3, [pc, #460]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a66:	4a73      	ldr	r2, [pc, #460]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8004a6c:	4b71      	ldr	r3, [pc, #452]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4a70      	ldr	r2, [pc, #448]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a76:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8004a78:	4b6e      	ldr	r3, [pc, #440]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	4a6d      	ldr	r2, [pc, #436]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a82:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8004a84:	4b6b      	ldr	r3, [pc, #428]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	4a6a      	ldr	r2, [pc, #424]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a8e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8004a90:	4b68      	ldr	r3, [pc, #416]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a67      	ldr	r2, [pc, #412]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a9a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004a9c:	e000      	b.n	8004aa0 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 8004a9e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004aa0:	4b64      	ldr	r3, [pc, #400]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f8      	beq.n	8004a9e <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8004aac:	4b62      	ldr	r3, [pc, #392]	; (8004c38 <RCC_enableMaxFrequencies+0x664>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a61      	ldr	r2, [pc, #388]	; (8004c38 <RCC_enableMaxFrequencies+0x664>)
 8004ab2:	f023 030f 	bic.w	r3, r3, #15
 8004ab6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8004ab8:	4b5f      	ldr	r3, [pc, #380]	; (8004c38 <RCC_enableMaxFrequencies+0x664>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a5e      	ldr	r2, [pc, #376]	; (8004c38 <RCC_enableMaxFrequencies+0x664>)
 8004abe:	f043 0302 	orr.w	r3, r3, #2
 8004ac2:	6013      	str	r3, [r2, #0]

			break;
 8004ac4:	e0a2      	b.n	8004c0c <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8004ac6:	4b5b      	ldr	r3, [pc, #364]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4a5a      	ldr	r2, [pc, #360]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004acc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ad0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8004ad2:	4b58      	ldr	r3, [pc, #352]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	4a57      	ldr	r2, [pc, #348]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004ad8:	f043 0310 	orr.w	r3, r3, #16
 8004adc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8004ade:	4b55      	ldr	r3, [pc, #340]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	4a54      	ldr	r2, [pc, #336]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004ae4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aec:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8004aee:	4b51      	ldr	r3, [pc, #324]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	4a50      	ldr	r2, [pc, #320]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004af4:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8004af8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8004afa:	4b4e      	ldr	r3, [pc, #312]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4a4d      	ldr	r2, [pc, #308]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b00:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004b04:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8004b06:	4b4b      	ldr	r3, [pc, #300]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b08:	4a4a      	ldr	r2, [pc, #296]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8004b0e:	4b49      	ldr	r3, [pc, #292]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	4a48      	ldr	r2, [pc, #288]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b18:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8004b1a:	4b46      	ldr	r3, [pc, #280]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	4a45      	ldr	r2, [pc, #276]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b24:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8004b26:	4b43      	ldr	r3, [pc, #268]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	4a42      	ldr	r2, [pc, #264]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b30:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8004b32:	4b40      	ldr	r3, [pc, #256]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a3f      	ldr	r2, [pc, #252]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b3c:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004b3e:	e000      	b.n	8004b42 <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 8004b40:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004b42:	4b3c      	ldr	r3, [pc, #240]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f8      	beq.n	8004b40 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8004b4e:	4b3a      	ldr	r3, [pc, #232]	; (8004c38 <RCC_enableMaxFrequencies+0x664>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a39      	ldr	r2, [pc, #228]	; (8004c38 <RCC_enableMaxFrequencies+0x664>)
 8004b54:	f023 030f 	bic.w	r3, r3, #15
 8004b58:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8004b5a:	4b37      	ldr	r3, [pc, #220]	; (8004c38 <RCC_enableMaxFrequencies+0x664>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a36      	ldr	r2, [pc, #216]	; (8004c38 <RCC_enableMaxFrequencies+0x664>)
 8004b60:	f043 0302 	orr.w	r3, r3, #2
 8004b64:	6013      	str	r3, [r2, #0]

			break;
 8004b66:	e051      	b.n	8004c0c <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8004b68:	4b32      	ldr	r3, [pc, #200]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4a31      	ldr	r2, [pc, #196]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b72:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8004b74:	4b2f      	ldr	r3, [pc, #188]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	4a2e      	ldr	r2, [pc, #184]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b7a:	f043 0308 	orr.w	r3, r3, #8
 8004b7e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8004b80:	4b2c      	ldr	r3, [pc, #176]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	4a2b      	ldr	r2, [pc, #172]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8004b90:	4b28      	ldr	r3, [pc, #160]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	4a27      	ldr	r2, [pc, #156]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b96:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8004b9a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8004b9c:	4b25      	ldr	r3, [pc, #148]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4a24      	ldr	r2, [pc, #144]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004ba2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004ba6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8004ba8:	4b22      	ldr	r3, [pc, #136]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004baa:	4a22      	ldr	r2, [pc, #136]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8004bb0:	4b20      	ldr	r3, [pc, #128]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bba:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8004bbc:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4a1c      	ldr	r2, [pc, #112]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004bc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bc6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8004bc8:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4a19      	ldr	r2, [pc, #100]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004bce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bd2:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8004bd4:	4b17      	ldr	r3, [pc, #92]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a16      	ldr	r2, [pc, #88]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bde:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004be0:	e000      	b.n	8004be4 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 8004be2:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004be4:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f8      	beq.n	8004be2 <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8004bf0:	4b11      	ldr	r3, [pc, #68]	; (8004c38 <RCC_enableMaxFrequencies+0x664>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a10      	ldr	r2, [pc, #64]	; (8004c38 <RCC_enableMaxFrequencies+0x664>)
 8004bf6:	f023 030f 	bic.w	r3, r3, #15
 8004bfa:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8004bfc:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <RCC_enableMaxFrequencies+0x664>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a0d      	ldr	r2, [pc, #52]	; (8004c38 <RCC_enableMaxFrequencies+0x664>)
 8004c02:	f043 0303 	orr.w	r3, r3, #3
 8004c06:	6013      	str	r3, [r2, #0]

			break;
 8004c08:	e000      	b.n	8004c0c <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 8004c0a:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004c0c:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004c12:	f043 0302 	orr.w	r3, r3, #2
 8004c16:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8004c18:	e000      	b.n	8004c1c <RCC_enableMaxFrequencies+0x648>
		__NOP();
 8004c1a:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <RCC_enableMaxFrequencies+0x660>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0f8      	beq.n	8004c1a <RCC_enableMaxFrequencies+0x646>
	}

	SystemCoreClockUpdate();
 8004c28:	f000 fce0 	bl	80055ec <SystemCoreClockUpdate>

}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40023800 	.word	0x40023800
 8004c38:	40023c00 	.word	0x40023c00

08004c3c <__NVIC_EnableIRQ>:
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	db0b      	blt.n	8004c66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	f003 021f 	and.w	r2, r3, #31
 8004c54:	4907      	ldr	r1, [pc, #28]	; (8004c74 <__NVIC_EnableIRQ+0x38>)
 8004c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5a:	095b      	lsrs	r3, r3, #5
 8004c5c:	2001      	movs	r0, #1
 8004c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	e000e100 	.word	0xe000e100

08004c78 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8004c78:	b590      	push	{r4, r7, lr}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c80:	b672      	cpsid	i
}
 8004c82:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a8f      	ldr	r2, [pc, #572]	; (8004ec8 <USART_Config+0x250>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d106      	bne.n	8004c9c <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8004c8e:	4b8f      	ldr	r3, [pc, #572]	; (8004ecc <USART_Config+0x254>)
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	4a8e      	ldr	r2, [pc, #568]	; (8004ecc <USART_Config+0x254>)
 8004c94:	f043 0310 	orr.w	r3, r3, #16
 8004c98:	6453      	str	r3, [r2, #68]	; 0x44
 8004c9a:	e018      	b.n	8004cce <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a8b      	ldr	r2, [pc, #556]	; (8004ed0 <USART_Config+0x258>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d106      	bne.n	8004cb4 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8004ca6:	4b89      	ldr	r3, [pc, #548]	; (8004ecc <USART_Config+0x254>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	4a88      	ldr	r2, [pc, #544]	; (8004ecc <USART_Config+0x254>)
 8004cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004cb2:	e00c      	b.n	8004cce <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a86      	ldr	r2, [pc, #536]	; (8004ed4 <USART_Config+0x25c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d106      	bne.n	8004ccc <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8004cbe:	4b83      	ldr	r3, [pc, #524]	; (8004ecc <USART_Config+0x254>)
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	4a82      	ldr	r2, [pc, #520]	; (8004ecc <USART_Config+0x254>)
 8004cc4:	f043 0320 	orr.w	r3, r3, #32
 8004cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8004cca:	e000      	b.n	8004cce <USART_Config+0x56>
	}
	else{
		__NOP();
 8004ccc:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	7a5b      	ldrb	r3, [r3, #9]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d025      	beq.n	8004d32 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	7a5b      	ldrb	r3, [r3, #9]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d110      	bne.n	8004d10 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cfc:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d0c:	60da      	str	r2, [r3, #12]
 8004d0e:	e018      	b.n	8004d42 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1e:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d2e:	60da      	str	r2, [r3, #12]
 8004d30:	e007      	b.n	8004d42 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d40:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	7a1b      	ldrb	r3, [r3, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d108      	bne.n	8004d5c <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d58:	60da      	str	r2, [r3, #12]
 8004d5a:	e007      	b.n	8004d6c <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d6a:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	7a9b      	ldrb	r3, [r3, #10]
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d82f      	bhi.n	8004dd4 <USART_Config+0x15c>
 8004d74:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <USART_Config+0x104>)
 8004d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7a:	bf00      	nop
 8004d7c:	08004d8d 	.word	0x08004d8d
 8004d80:	08004d9f 	.word	0x08004d9f
 8004d84:	08004db1 	.word	0x08004db1
 8004d88:	08004dc3 	.word	0x08004dc3
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004d9a:	611a      	str	r2, [r3, #16]
			break;
 8004d9c:	e023      	b.n	8004de6 <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dac:	611a      	str	r2, [r3, #16]
			break;
 8004dae:	e01a      	b.n	8004de6 <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dbe:	611a      	str	r2, [r3, #16]
			break;
 8004dc0:	e011      	b.n	8004de6 <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004dd0:	611a      	str	r2, [r3, #16]
			break;
 8004dd2:	e008      	b.n	8004de6 <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004de2:	611a      	str	r2, [r3, #16]
			break;
 8004de4:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681c      	ldr	r4, [r3, #0]
 8004dee:	4611      	mov	r1, r2
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f8cd 	bl	8004f90 <brrCalculus>
 8004df6:	4603      	mov	r3, r0
 8004df8:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	799b      	ldrb	r3, [r3, #6]
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d82e      	bhi.n	8004e60 <USART_Config+0x1e8>
 8004e02:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <USART_Config+0x190>)
 8004e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e08:	08004e19 	.word	0x08004e19
 8004e0c:	08004e2b 	.word	0x08004e2b
 8004e10:	08004e3d 	.word	0x08004e3d
 8004e14:	08004e4f 	.word	0x08004e4f
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0208 	orr.w	r2, r2, #8
 8004e26:	60da      	str	r2, [r3, #12]
			break;
 8004e28:	e023      	b.n	8004e72 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0204 	orr.w	r2, r2, #4
 8004e38:	60da      	str	r2, [r3, #12]
			break;
 8004e3a:	e01a      	b.n	8004e72 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 020c 	orr.w	r2, r2, #12
 8004e4a:	60da      	str	r2, [r3, #12]
			break;
 8004e4c:	e011      	b.n	8004e72 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68da      	ldr	r2, [r3, #12]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 020c 	bic.w	r2, r2, #12
 8004e5c:	60da      	str	r2, [r3, #12]
			break;
 8004e5e:	e008      	b.n	8004e72 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 020c 	bic.w	r2, r2, #12
 8004e6e:	60da      	str	r2, [r3, #12]
			break;
 8004e70:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	799b      	ldrb	r3, [r3, #6]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d008      	beq.n	8004e8c <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e88:	60da      	str	r2, [r3, #12]
 8004e8a:	e007      	b.n	8004e9c <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e9a:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	795b      	ldrb	r3, [r3, #5]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d12d      	bne.n	8004f00 <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0220 	orr.w	r2, r2, #32
 8004eb2:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a03      	ldr	r2, [pc, #12]	; (8004ec8 <USART_Config+0x250>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d10c      	bne.n	8004ed8 <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8004ebe:	2025      	movs	r0, #37	; 0x25
 8004ec0:	f7ff febc 	bl	8004c3c <__NVIC_EnableIRQ>
 8004ec4:	e024      	b.n	8004f10 <USART_Config+0x298>
 8004ec6:	bf00      	nop
 8004ec8:	40011000 	.word	0x40011000
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	40004400 	.word	0x40004400
 8004ed4:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a28      	ldr	r2, [pc, #160]	; (8004f80 <USART_Config+0x308>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d103      	bne.n	8004eea <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8004ee2:	2026      	movs	r0, #38	; 0x26
 8004ee4:	f7ff feaa 	bl	8004c3c <__NVIC_EnableIRQ>
 8004ee8:	e012      	b.n	8004f10 <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a25      	ldr	r2, [pc, #148]	; (8004f84 <USART_Config+0x30c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d103      	bne.n	8004efc <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8004ef4:	2047      	movs	r0, #71	; 0x47
 8004ef6:	f7ff fea1 	bl	8004c3c <__NVIC_EnableIRQ>
 8004efa:	e009      	b.n	8004f10 <USART_Config+0x298>
		}
		else{
				__NOP();
 8004efc:	bf00      	nop
 8004efe:	e007      	b.n	8004f10 <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0220 	bic.w	r2, r2, #32
 8004f0e:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	791b      	ldrb	r3, [r3, #4]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d124      	bne.n	8004f62 <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f26:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a16      	ldr	r2, [pc, #88]	; (8004f88 <USART_Config+0x310>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d103      	bne.n	8004f3a <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8004f32:	2025      	movs	r0, #37	; 0x25
 8004f34:	f7ff fe82 	bl	8004c3c <__NVIC_EnableIRQ>
 8004f38:	e01b      	b.n	8004f72 <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a10      	ldr	r2, [pc, #64]	; (8004f80 <USART_Config+0x308>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d103      	bne.n	8004f4c <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8004f44:	2026      	movs	r0, #38	; 0x26
 8004f46:	f7ff fe79 	bl	8004c3c <__NVIC_EnableIRQ>
 8004f4a:	e012      	b.n	8004f72 <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a0c      	ldr	r2, [pc, #48]	; (8004f84 <USART_Config+0x30c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d103      	bne.n	8004f5e <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8004f56:	2047      	movs	r0, #71	; 0x47
 8004f58:	f7ff fe70 	bl	8004c3c <__NVIC_EnableIRQ>
 8004f5c:	e009      	b.n	8004f72 <USART_Config+0x2fa>
		}
		else{
				__NOP();
 8004f5e:	bf00      	nop
 8004f60:	e007      	b.n	8004f72 <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f70:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f72:	b662      	cpsie	i
}
 8004f74:	bf00      	nop
	}

	__enable_irq();
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd90      	pop	{r4, r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40004400 	.word	0x40004400
 8004f84:	40011400 	.word	0x40011400
 8004f88:	40011000 	.word	0x40011000
 8004f8c:	00000000 	.word	0x00000000

08004f90 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8004f90:	b5b0      	push	{r4, r5, r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	79db      	ldrb	r3, [r3, #7]
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	f200 8217 	bhi.w	80053d2 <brrCalculus+0x442>
 8004fa4:	a201      	add	r2, pc, #4	; (adr r2, 8004fac <brrCalculus+0x1c>)
 8004fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004faa:	bf00      	nop
 8004fac:	08004fbd 	.word	0x08004fbd
 8004fb0:	080050b7 	.word	0x080050b7
 8004fb4:	080051d1 	.word	0x080051d1
 8004fb8:	080052d9 	.word	0x080052d9

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8004fbc:	4980      	ldr	r1, [pc, #512]	; (80051c0 <brrCalculus+0x230>)
 8004fbe:	a37c      	add	r3, pc, #496	; (adr r3, 80051b0 <brrCalculus+0x220>)
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd2:	ee17 0a90 	vmov	r0, s15
 8004fd6:	f7fb fabf 	bl	8000558 <__aeabi_f2d>
 8004fda:	4b79      	ldr	r3, [pc, #484]	; (80051c0 <brrCalculus+0x230>)
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	f7fb fb12 	bl	8000608 <__aeabi_dmul>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4975      	ldr	r1, [pc, #468]	; (80051c0 <brrCalculus+0x230>)
 8004fea:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8004fee:	4b74      	ldr	r3, [pc, #464]	; (80051c0 <brrCalculus+0x230>)
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	f7fb fdb6 	bl	8000b68 <__aeabi_d2iz>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	4b70      	ldr	r3, [pc, #448]	; (80051c4 <brrCalculus+0x234>)
 8005002:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8005004:	4b6e      	ldr	r3, [pc, #440]	; (80051c0 <brrCalculus+0x230>)
 8005006:	e9d3 4500 	ldrd	r4, r5, [r3]
 800500a:	4b6d      	ldr	r3, [pc, #436]	; (80051c0 <brrCalculus+0x230>)
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	4610      	mov	r0, r2
 8005012:	4619      	mov	r1, r3
 8005014:	f7fb fda8 	bl	8000b68 <__aeabi_d2iz>
 8005018:	4603      	mov	r3, r0
 800501a:	4618      	mov	r0, r3
 800501c:	f7fb fa8a 	bl	8000534 <__aeabi_i2d>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4620      	mov	r0, r4
 8005026:	4629      	mov	r1, r5
 8005028:	f7fb f936 	bl	8000298 <__aeabi_dsub>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4610      	mov	r0, r2
 8005032:	4619      	mov	r1, r3
 8005034:	f7fb fde0 	bl	8000bf8 <__aeabi_d2f>
 8005038:	4603      	mov	r3, r0
 800503a:	4a63      	ldr	r2, [pc, #396]	; (80051c8 <brrCalculus+0x238>)
 800503c:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800503e:	4b62      	ldr	r3, [pc, #392]	; (80051c8 <brrCalculus+0x238>)
 8005040:	edd3 7a00 	vldr	s15, [r3]
 8005044:	2004      	movs	r0, #4
 8005046:	eeb0 0a67 	vmov.f32	s0, s15
 800504a:	f000 fa6d 	bl	8005528 <roundToNDecimals>
 800504e:	eef0 7a40 	vmov.f32	s15, s0
 8005052:	4b5d      	ldr	r3, [pc, #372]	; (80051c8 <brrCalculus+0x238>)
 8005054:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8005058:	4b5b      	ldr	r3, [pc, #364]	; (80051c8 <brrCalculus+0x238>)
 800505a:	edd3 7a00 	vldr	s15, [r3]
 800505e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8005062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005066:	4b58      	ldr	r3, [pc, #352]	; (80051c8 <brrCalculus+0x238>)
 8005068:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800506c:	4b56      	ldr	r3, [pc, #344]	; (80051c8 <brrCalculus+0x238>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f7fb fa71 	bl	8000558 <__aeabi_f2d>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	ec43 2b10 	vmov	d0, r2, r3
 800507e:	f003 fb23 	bl	80086c8 <round>
 8005082:	ec53 2b10 	vmov	r2, r3, d0
 8005086:	4610      	mov	r0, r2
 8005088:	4619      	mov	r1, r3
 800508a:	f7fb fdb5 	bl	8000bf8 <__aeabi_d2f>
 800508e:	4603      	mov	r3, r0
 8005090:	4a4d      	ldr	r2, [pc, #308]	; (80051c8 <brrCalculus+0x238>)
 8005092:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8005094:	4b4b      	ldr	r3, [pc, #300]	; (80051c4 <brrCalculus+0x234>)
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	b29a      	uxth	r2, r3
 800509c:	4b4a      	ldr	r3, [pc, #296]	; (80051c8 <brrCalculus+0x238>)
 800509e:	edd3 7a00 	vldr	s15, [r3]
 80050a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050a6:	ee17 3a90 	vmov	r3, s15
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	4313      	orrs	r3, r2
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	4b46      	ldr	r3, [pc, #280]	; (80051cc <brrCalculus+0x23c>)
 80050b2:	801a      	strh	r2, [r3, #0]


		break;
 80050b4:	e18f      	b.n	80053d6 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 80050b6:	4942      	ldr	r1, [pc, #264]	; (80051c0 <brrCalculus+0x230>)
 80050b8:	a33f      	add	r3, pc, #252	; (adr r3, 80051b8 <brrCalculus+0x228>)
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	ee07 3a90 	vmov	s15, r3
 80050c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050cc:	ee17 0a90 	vmov	r0, s15
 80050d0:	f7fb fa42 	bl	8000558 <__aeabi_f2d>
 80050d4:	4b3a      	ldr	r3, [pc, #232]	; (80051c0 <brrCalculus+0x230>)
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	f7fb fa95 	bl	8000608 <__aeabi_dmul>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	4937      	ldr	r1, [pc, #220]	; (80051c0 <brrCalculus+0x230>)
 80050e4:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80050e8:	4b35      	ldr	r3, [pc, #212]	; (80051c0 <brrCalculus+0x230>)
 80050ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ee:	4610      	mov	r0, r2
 80050f0:	4619      	mov	r1, r3
 80050f2:	f7fb fd39 	bl	8000b68 <__aeabi_d2iz>
 80050f6:	4603      	mov	r3, r0
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	4b32      	ldr	r3, [pc, #200]	; (80051c4 <brrCalculus+0x234>)
 80050fc:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80050fe:	4b30      	ldr	r3, [pc, #192]	; (80051c0 <brrCalculus+0x230>)
 8005100:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005104:	4b2e      	ldr	r3, [pc, #184]	; (80051c0 <brrCalculus+0x230>)
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	4610      	mov	r0, r2
 800510c:	4619      	mov	r1, r3
 800510e:	f7fb fd2b 	bl	8000b68 <__aeabi_d2iz>
 8005112:	4603      	mov	r3, r0
 8005114:	4618      	mov	r0, r3
 8005116:	f7fb fa0d 	bl	8000534 <__aeabi_i2d>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4620      	mov	r0, r4
 8005120:	4629      	mov	r1, r5
 8005122:	f7fb f8b9 	bl	8000298 <__aeabi_dsub>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4610      	mov	r0, r2
 800512c:	4619      	mov	r1, r3
 800512e:	f7fb fd63 	bl	8000bf8 <__aeabi_d2f>
 8005132:	4603      	mov	r3, r0
 8005134:	4a24      	ldr	r2, [pc, #144]	; (80051c8 <brrCalculus+0x238>)
 8005136:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8005138:	4b23      	ldr	r3, [pc, #140]	; (80051c8 <brrCalculus+0x238>)
 800513a:	edd3 7a00 	vldr	s15, [r3]
 800513e:	2004      	movs	r0, #4
 8005140:	eeb0 0a67 	vmov.f32	s0, s15
 8005144:	f000 f9f0 	bl	8005528 <roundToNDecimals>
 8005148:	eef0 7a40 	vmov.f32	s15, s0
 800514c:	4b1e      	ldr	r3, [pc, #120]	; (80051c8 <brrCalculus+0x238>)
 800514e:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8005152:	4b1d      	ldr	r3, [pc, #116]	; (80051c8 <brrCalculus+0x238>)
 8005154:	edd3 7a00 	vldr	s15, [r3]
 8005158:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800515c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005160:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <brrCalculus+0x238>)
 8005162:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8005166:	4b18      	ldr	r3, [pc, #96]	; (80051c8 <brrCalculus+0x238>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f7fb f9f4 	bl	8000558 <__aeabi_f2d>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	ec43 2b10 	vmov	d0, r2, r3
 8005178:	f003 faa6 	bl	80086c8 <round>
 800517c:	ec53 2b10 	vmov	r2, r3, d0
 8005180:	4610      	mov	r0, r2
 8005182:	4619      	mov	r1, r3
 8005184:	f7fb fd38 	bl	8000bf8 <__aeabi_d2f>
 8005188:	4603      	mov	r3, r0
 800518a:	4a0f      	ldr	r2, [pc, #60]	; (80051c8 <brrCalculus+0x238>)
 800518c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800518e:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <brrCalculus+0x234>)
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	b29a      	uxth	r2, r3
 8005196:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <brrCalculus+0x238>)
 8005198:	edd3 7a00 	vldr	s15, [r3]
 800519c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051a0:	ee17 3a90 	vmov	r3, s15
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	4313      	orrs	r3, r2
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	4b08      	ldr	r3, [pc, #32]	; (80051cc <brrCalculus+0x23c>)
 80051ac:	801a      	strh	r2, [r3, #0]


		break;
 80051ae:	e112      	b.n	80053d6 <brrCalculus+0x446>
 80051b0:	b4e81b4f 	.word	0xb4e81b4f
 80051b4:	3edb4e81 	.word	0x3edb4e81
 80051b8:	b4e81b4f 	.word	0xb4e81b4f
 80051bc:	3ecb4e81 	.word	0x3ecb4e81
 80051c0:	20000510 	.word	0x20000510
 80051c4:	20000504 	.word	0x20000504
 80051c8:	20000508 	.word	0x20000508
 80051cc:	20000502 	.word	0x20000502
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 80051d0:	4989      	ldr	r1, [pc, #548]	; (80053f8 <brrCalculus+0x468>)
 80051d2:	a385      	add	r3, pc, #532	; (adr r3, 80053e8 <brrCalculus+0x458>)
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e6:	ee17 0a90 	vmov	r0, s15
 80051ea:	f7fb f9b5 	bl	8000558 <__aeabi_f2d>
 80051ee:	4b82      	ldr	r3, [pc, #520]	; (80053f8 <brrCalculus+0x468>)
 80051f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f4:	f7fb fa08 	bl	8000608 <__aeabi_dmul>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	497e      	ldr	r1, [pc, #504]	; (80053f8 <brrCalculus+0x468>)
 80051fe:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8005202:	4b7d      	ldr	r3, [pc, #500]	; (80053f8 <brrCalculus+0x468>)
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	4610      	mov	r0, r2
 800520a:	4619      	mov	r1, r3
 800520c:	f7fb fcac 	bl	8000b68 <__aeabi_d2iz>
 8005210:	4603      	mov	r3, r0
 8005212:	b29a      	uxth	r2, r3
 8005214:	4b79      	ldr	r3, [pc, #484]	; (80053fc <brrCalculus+0x46c>)
 8005216:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8005218:	4b77      	ldr	r3, [pc, #476]	; (80053f8 <brrCalculus+0x468>)
 800521a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800521e:	4b76      	ldr	r3, [pc, #472]	; (80053f8 <brrCalculus+0x468>)
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	4610      	mov	r0, r2
 8005226:	4619      	mov	r1, r3
 8005228:	f7fb fc9e 	bl	8000b68 <__aeabi_d2iz>
 800522c:	4603      	mov	r3, r0
 800522e:	4618      	mov	r0, r3
 8005230:	f7fb f980 	bl	8000534 <__aeabi_i2d>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4620      	mov	r0, r4
 800523a:	4629      	mov	r1, r5
 800523c:	f7fb f82c 	bl	8000298 <__aeabi_dsub>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4610      	mov	r0, r2
 8005246:	4619      	mov	r1, r3
 8005248:	f7fb fcd6 	bl	8000bf8 <__aeabi_d2f>
 800524c:	4603      	mov	r3, r0
 800524e:	4a6c      	ldr	r2, [pc, #432]	; (8005400 <brrCalculus+0x470>)
 8005250:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8005252:	4b6b      	ldr	r3, [pc, #428]	; (8005400 <brrCalculus+0x470>)
 8005254:	edd3 7a00 	vldr	s15, [r3]
 8005258:	2004      	movs	r0, #4
 800525a:	eeb0 0a67 	vmov.f32	s0, s15
 800525e:	f000 f963 	bl	8005528 <roundToNDecimals>
 8005262:	eef0 7a40 	vmov.f32	s15, s0
 8005266:	4b66      	ldr	r3, [pc, #408]	; (8005400 <brrCalculus+0x470>)
 8005268:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800526c:	4b64      	ldr	r3, [pc, #400]	; (8005400 <brrCalculus+0x470>)
 800526e:	edd3 7a00 	vldr	s15, [r3]
 8005272:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8005276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800527a:	4b61      	ldr	r3, [pc, #388]	; (8005400 <brrCalculus+0x470>)
 800527c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8005280:	4b5f      	ldr	r3, [pc, #380]	; (8005400 <brrCalculus+0x470>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f7fb f967 	bl	8000558 <__aeabi_f2d>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	ec43 2b10 	vmov	d0, r2, r3
 8005292:	f003 fa19 	bl	80086c8 <round>
 8005296:	ec51 0b10 	vmov	r0, r1, d0
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	4b59      	ldr	r3, [pc, #356]	; (8005404 <brrCalculus+0x474>)
 80052a0:	f7fa fffc 	bl	800029c <__adddf3>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4610      	mov	r0, r2
 80052aa:	4619      	mov	r1, r3
 80052ac:	f7fb fca4 	bl	8000bf8 <__aeabi_d2f>
 80052b0:	4603      	mov	r3, r0
 80052b2:	4a53      	ldr	r2, [pc, #332]	; (8005400 <brrCalculus+0x470>)
 80052b4:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80052b6:	4b51      	ldr	r3, [pc, #324]	; (80053fc <brrCalculus+0x46c>)
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	b29a      	uxth	r2, r3
 80052be:	4b50      	ldr	r3, [pc, #320]	; (8005400 <brrCalculus+0x470>)
 80052c0:	edd3 7a00 	vldr	s15, [r3]
 80052c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052c8:	ee17 3a90 	vmov	r3, s15
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	4313      	orrs	r3, r2
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	4b4d      	ldr	r3, [pc, #308]	; (8005408 <brrCalculus+0x478>)
 80052d4:	801a      	strh	r2, [r3, #0]


		break;
 80052d6:	e07e      	b.n	80053d6 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 80052d8:	4947      	ldr	r1, [pc, #284]	; (80053f8 <brrCalculus+0x468>)
 80052da:	a345      	add	r3, pc, #276	; (adr r3, 80053f0 <brrCalculus+0x460>)
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ee:	ee17 0a90 	vmov	r0, s15
 80052f2:	f7fb f931 	bl	8000558 <__aeabi_f2d>
 80052f6:	4b40      	ldr	r3, [pc, #256]	; (80053f8 <brrCalculus+0x468>)
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f7fb f984 	bl	8000608 <__aeabi_dmul>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	493c      	ldr	r1, [pc, #240]	; (80053f8 <brrCalculus+0x468>)
 8005306:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800530a:	4b3b      	ldr	r3, [pc, #236]	; (80053f8 <brrCalculus+0x468>)
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	4610      	mov	r0, r2
 8005312:	4619      	mov	r1, r3
 8005314:	f7fb fc28 	bl	8000b68 <__aeabi_d2iz>
 8005318:	4603      	mov	r3, r0
 800531a:	b29a      	uxth	r2, r3
 800531c:	4b37      	ldr	r3, [pc, #220]	; (80053fc <brrCalculus+0x46c>)
 800531e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8005320:	4b35      	ldr	r3, [pc, #212]	; (80053f8 <brrCalculus+0x468>)
 8005322:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005326:	4b34      	ldr	r3, [pc, #208]	; (80053f8 <brrCalculus+0x468>)
 8005328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532c:	4610      	mov	r0, r2
 800532e:	4619      	mov	r1, r3
 8005330:	f7fb fc1a 	bl	8000b68 <__aeabi_d2iz>
 8005334:	4603      	mov	r3, r0
 8005336:	4618      	mov	r0, r3
 8005338:	f7fb f8fc 	bl	8000534 <__aeabi_i2d>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4620      	mov	r0, r4
 8005342:	4629      	mov	r1, r5
 8005344:	f7fa ffa8 	bl	8000298 <__aeabi_dsub>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4610      	mov	r0, r2
 800534e:	4619      	mov	r1, r3
 8005350:	f7fb fc52 	bl	8000bf8 <__aeabi_d2f>
 8005354:	4603      	mov	r3, r0
 8005356:	4a2a      	ldr	r2, [pc, #168]	; (8005400 <brrCalculus+0x470>)
 8005358:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800535a:	4b29      	ldr	r3, [pc, #164]	; (8005400 <brrCalculus+0x470>)
 800535c:	edd3 7a00 	vldr	s15, [r3]
 8005360:	2004      	movs	r0, #4
 8005362:	eeb0 0a67 	vmov.f32	s0, s15
 8005366:	f000 f8df 	bl	8005528 <roundToNDecimals>
 800536a:	eef0 7a40 	vmov.f32	s15, s0
 800536e:	4b24      	ldr	r3, [pc, #144]	; (8005400 <brrCalculus+0x470>)
 8005370:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8005374:	4b22      	ldr	r3, [pc, #136]	; (8005400 <brrCalculus+0x470>)
 8005376:	edd3 7a00 	vldr	s15, [r3]
 800537a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800537e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005382:	4b1f      	ldr	r3, [pc, #124]	; (8005400 <brrCalculus+0x470>)
 8005384:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8005388:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <brrCalculus+0x470>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4618      	mov	r0, r3
 800538e:	f7fb f8e3 	bl	8000558 <__aeabi_f2d>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	ec43 2b10 	vmov	d0, r2, r3
 800539a:	f003 f995 	bl	80086c8 <round>
 800539e:	ec53 2b10 	vmov	r2, r3, d0
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	f7fb fc27 	bl	8000bf8 <__aeabi_d2f>
 80053aa:	4603      	mov	r3, r0
 80053ac:	4a14      	ldr	r2, [pc, #80]	; (8005400 <brrCalculus+0x470>)
 80053ae:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80053b0:	4b12      	ldr	r3, [pc, #72]	; (80053fc <brrCalculus+0x46c>)
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	4b11      	ldr	r3, [pc, #68]	; (8005400 <brrCalculus+0x470>)
 80053ba:	edd3 7a00 	vldr	s15, [r3]
 80053be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c2:	ee17 3a90 	vmov	r3, s15
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	4313      	orrs	r3, r2
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <brrCalculus+0x478>)
 80053ce:	801a      	strh	r2, [r3, #0]


		break;
 80053d0:	e001      	b.n	80053d6 <brrCalculus+0x446>
	}
	default:{

		__NOP();
 80053d2:	bf00      	nop
		break;
 80053d4:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 80053d6:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <brrCalculus+0x478>)
 80053d8:	881b      	ldrh	r3, [r3, #0]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bdb0      	pop	{r4, r5, r7, pc}
 80053e2:	bf00      	nop
 80053e4:	f3af 8000 	nop.w
 80053e8:	789abcdf 	.word	0x789abcdf
 80053ec:	3ec23456 	.word	0x3ec23456
 80053f0:	789abcdf 	.word	0x789abcdf
 80053f4:	3ea23456 	.word	0x3ea23456
 80053f8:	20000510 	.word	0x20000510
 80053fc:	20000504 	.word	0x20000504
 8005400:	20000508 	.word	0x20000508
 8005404:	3ff00000 	.word	0x3ff00000
 8005408:	20000502 	.word	0x20000502

0800540c <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8005416:	e000      	b.n	800541a <writeChar+0xe>
		__NOP();
 8005418:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0f7      	beq.n	8005418 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	605a      	str	r2, [r3, #4]

}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 8005446:	e008      	b.n	800545a <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff ffdc 	bl	800540c <writeChar>
		msgToSend ++ ;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	3301      	adds	r3, #1
 8005458:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f2      	bne.n	8005448 <writeMsg+0xc>
	}
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
	__NOP();
 8005470:	bf00      	nop
}
 8005472:	bf00      	nop
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
	__NOP();
 8005480:	bf00      	nop
}
 8005482:	bf00      	nop
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
	return auxRxData;
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <getRxData+0x14>)
 8005492:	781b      	ldrb	r3, [r3, #0]
}
 8005494:	4618      	mov	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20000518 	.word	0x20000518

080054a4 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 80054a8:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <USART2_IRQHandler+0x24>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d006      	beq.n	80054c2 <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 80054b4:	4b04      	ldr	r3, [pc, #16]	; (80054c8 <USART2_IRQHandler+0x24>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	4b04      	ldr	r3, [pc, #16]	; (80054cc <USART2_IRQHandler+0x28>)
 80054bc:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 80054be:	f7fb fec9 	bl	8001254 <usart2Rx_Callback>
	}

}
 80054c2:	bf00      	nop
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	40004400 	.word	0x40004400
 80054cc:	20000518 	.word	0x20000518

080054d0 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 80054d4:	4b07      	ldr	r3, [pc, #28]	; (80054f4 <USART1_IRQHandler+0x24>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d006      	beq.n	80054ee <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 80054e0:	4b04      	ldr	r3, [pc, #16]	; (80054f4 <USART1_IRQHandler+0x24>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	4b04      	ldr	r3, [pc, #16]	; (80054f8 <USART1_IRQHandler+0x28>)
 80054e8:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 80054ea:	f7ff ffbf 	bl	800546c <usart1Rx_Callback>
	}
}
 80054ee:	bf00      	nop
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40011000 	.word	0x40011000
 80054f8:	20000518 	.word	0x20000518

080054fc <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <USART6_IRQHandler+0x24>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0320 	and.w	r3, r3, #32
 8005508:	2b00      	cmp	r3, #0
 800550a:	d006      	beq.n	800551a <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 800550c:	4b04      	ldr	r3, [pc, #16]	; (8005520 <USART6_IRQHandler+0x24>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	b2da      	uxtb	r2, r3
 8005512:	4b04      	ldr	r3, [pc, #16]	; (8005524 <USART6_IRQHandler+0x28>)
 8005514:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8005516:	f7ff ffb1 	bl	800547c <usart6Rx_Callback>
	}

}
 800551a:	bf00      	nop
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40011400 	.word	0x40011400
 8005524:	20000518 	.word	0x20000518

08005528 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005532:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 8005534:	6838      	ldr	r0, [r7, #0]
 8005536:	f7fa fffd 	bl	8000534 <__aeabi_i2d>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	ec43 2b11 	vmov	d1, r2, r3
 8005542:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 80055c0 <roundToNDecimals+0x98>
 8005546:	f003 f961 	bl	800880c <pow>
 800554a:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fb f802 	bl	8000558 <__aeabi_f2d>
 8005554:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005558:	f7fb f856 	bl	8000608 <__aeabi_dmul>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4610      	mov	r0, r2
 8005562:	4619      	mov	r1, r3
 8005564:	f7fb fb48 	bl	8000bf8 <__aeabi_d2f>
 8005568:	4603      	mov	r3, r0
 800556a:	607b      	str	r3, [r7, #4]

    number = round(number);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fa fff3 	bl	8000558 <__aeabi_f2d>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	ec43 2b10 	vmov	d0, r2, r3
 800557a:	f003 f8a5 	bl	80086c8 <round>
 800557e:	ec53 2b10 	vmov	r2, r3, d0
 8005582:	4610      	mov	r0, r2
 8005584:	4619      	mov	r1, r3
 8005586:	f7fb fb37 	bl	8000bf8 <__aeabi_d2f>
 800558a:	4603      	mov	r3, r0
 800558c:	607b      	str	r3, [r7, #4]

    number /= factor;
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fa ffe2 	bl	8000558 <__aeabi_f2d>
 8005594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005598:	f7fb f960 	bl	800085c <__aeabi_ddiv>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4610      	mov	r0, r2
 80055a2:	4619      	mov	r1, r3
 80055a4:	f7fb fb28 	bl	8000bf8 <__aeabi_d2f>
 80055a8:	4603      	mov	r3, r0
 80055aa:	607b      	str	r3, [r7, #4]

    return number;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	ee07 3a90 	vmov	s15, r3
}
 80055b2:	eeb0 0a67 	vmov.f32	s0, s15
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	f3af 8000 	nop.w
 80055c0:	00000000 	.word	0x00000000
 80055c4:	40240000 	.word	0x40240000

080055c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055cc:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <SystemInit+0x20>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d2:	4a05      	ldr	r2, [pc, #20]	; (80055e8 <SystemInit+0x20>)
 80055d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055dc:	bf00      	nop
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	e000ed00 	.word	0xe000ed00

080055ec <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80055f2:	2300      	movs	r3, #0
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	2302      	movs	r3, #2
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	2300      	movs	r3, #0
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	2302      	movs	r3, #2
 8005604:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005606:	4b34      	ldr	r3, [pc, #208]	; (80056d8 <SystemCoreClockUpdate+0xec>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 030c 	and.w	r3, r3, #12
 800560e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2b08      	cmp	r3, #8
 8005614:	d011      	beq.n	800563a <SystemCoreClockUpdate+0x4e>
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b08      	cmp	r3, #8
 800561a:	d844      	bhi.n	80056a6 <SystemCoreClockUpdate+0xba>
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <SystemCoreClockUpdate+0x3e>
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b04      	cmp	r3, #4
 8005626:	d004      	beq.n	8005632 <SystemCoreClockUpdate+0x46>
 8005628:	e03d      	b.n	80056a6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800562a:	4b2c      	ldr	r3, [pc, #176]	; (80056dc <SystemCoreClockUpdate+0xf0>)
 800562c:	4a2c      	ldr	r2, [pc, #176]	; (80056e0 <SystemCoreClockUpdate+0xf4>)
 800562e:	601a      	str	r2, [r3, #0]
      break;
 8005630:	e03d      	b.n	80056ae <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005632:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <SystemCoreClockUpdate+0xf0>)
 8005634:	4a2b      	ldr	r2, [pc, #172]	; (80056e4 <SystemCoreClockUpdate+0xf8>)
 8005636:	601a      	str	r2, [r3, #0]
      break;
 8005638:	e039      	b.n	80056ae <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800563a:	4b27      	ldr	r3, [pc, #156]	; (80056d8 <SystemCoreClockUpdate+0xec>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	0d9b      	lsrs	r3, r3, #22
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005646:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <SystemCoreClockUpdate+0xec>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800564e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00c      	beq.n	8005670 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005656:	4a23      	ldr	r2, [pc, #140]	; (80056e4 <SystemCoreClockUpdate+0xf8>)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	fbb2 f3f3 	udiv	r3, r2, r3
 800565e:	4a1e      	ldr	r2, [pc, #120]	; (80056d8 <SystemCoreClockUpdate+0xec>)
 8005660:	6852      	ldr	r2, [r2, #4]
 8005662:	0992      	lsrs	r2, r2, #6
 8005664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005668:	fb02 f303 	mul.w	r3, r2, r3
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	e00b      	b.n	8005688 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005670:	4a1b      	ldr	r2, [pc, #108]	; (80056e0 <SystemCoreClockUpdate+0xf4>)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	fbb2 f3f3 	udiv	r3, r2, r3
 8005678:	4a17      	ldr	r2, [pc, #92]	; (80056d8 <SystemCoreClockUpdate+0xec>)
 800567a:	6852      	ldr	r2, [r2, #4]
 800567c:	0992      	lsrs	r2, r2, #6
 800567e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005682:	fb02 f303 	mul.w	r3, r2, r3
 8005686:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005688:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <SystemCoreClockUpdate+0xec>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	0c1b      	lsrs	r3, r3, #16
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	3301      	adds	r3, #1
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a0:	4a0e      	ldr	r2, [pc, #56]	; (80056dc <SystemCoreClockUpdate+0xf0>)
 80056a2:	6013      	str	r3, [r2, #0]
      break;
 80056a4:	e003      	b.n	80056ae <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80056a6:	4b0d      	ldr	r3, [pc, #52]	; (80056dc <SystemCoreClockUpdate+0xf0>)
 80056a8:	4a0d      	ldr	r2, [pc, #52]	; (80056e0 <SystemCoreClockUpdate+0xf4>)
 80056aa:	601a      	str	r2, [r3, #0]
      break;
 80056ac:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80056ae:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <SystemCoreClockUpdate+0xec>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	091b      	lsrs	r3, r3, #4
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	4a0b      	ldr	r2, [pc, #44]	; (80056e8 <SystemCoreClockUpdate+0xfc>)
 80056ba:	5cd3      	ldrb	r3, [r2, r3]
 80056bc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80056be:	4b07      	ldr	r3, [pc, #28]	; (80056dc <SystemCoreClockUpdate+0xf0>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	fa22 f303 	lsr.w	r3, r2, r3
 80056c8:	4a04      	ldr	r2, [pc, #16]	; (80056dc <SystemCoreClockUpdate+0xf0>)
 80056ca:	6013      	str	r3, [r2, #0]
}
 80056cc:	bf00      	nop
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	40023800 	.word	0x40023800
 80056dc:	2000000c 	.word	0x2000000c
 80056e0:	00f42400 	.word	0x00f42400
 80056e4:	017d7840 	.word	0x017d7840
 80056e8:	0800aadc 	.word	0x0800aadc

080056ec <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
//
//	ptrDMA_handler[1]->ptrDMAType = DMA1;
//	ptrDMA_handler[1]->ptrDMAStream = DMA1_Stream6;

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a89      	ldr	r2, [pc, #548]	; (8005920 <i2c_config+0x234>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d106      	bne.n	800570c <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 80056fe:	4b89      	ldr	r3, [pc, #548]	; (8005924 <i2c_config+0x238>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	4a88      	ldr	r2, [pc, #544]	; (8005924 <i2c_config+0x238>)
 8005704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005708:	6413      	str	r3, [r2, #64]	; 0x40
 800570a:	e016      	b.n	800573a <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a85      	ldr	r2, [pc, #532]	; (8005928 <i2c_config+0x23c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d106      	bne.n	8005724 <i2c_config+0x38>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 8005716:	4b83      	ldr	r3, [pc, #524]	; (8005924 <i2c_config+0x238>)
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	4a82      	ldr	r2, [pc, #520]	; (8005924 <i2c_config+0x238>)
 800571c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005720:	6413      	str	r3, [r2, #64]	; 0x40
 8005722:	e00a      	b.n	800573a <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a80      	ldr	r2, [pc, #512]	; (800592c <i2c_config+0x240>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d105      	bne.n	800573a <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 800572e:	4b7d      	ldr	r3, [pc, #500]	; (8005924 <i2c_config+0x238>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	4a7c      	ldr	r2, [pc, #496]	; (8005924 <i2c_config+0x238>)
 8005734:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005738:	6413      	str	r3, [r2, #64]	; 0x40
	}



	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0201 	bic.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800574a:	e000      	b.n	800574e <i2c_config+0x62>
		__NOP();
 800574c:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f7      	bne.n	800574c <i2c_config+0x60>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800576a:	601a      	str	r2, [r3, #0]

	__NOP();
 800576c:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800577c:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800578c:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	79db      	ldrb	r3, [r3, #7]
 8005792:	2b10      	cmp	r3, #16
 8005794:	d108      	bne.n	80057a8 <i2c_config+0xbc>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0210 	orr.w	r2, r2, #16
 80057a4:	605a      	str	r2, [r3, #4]
 80057a6:	e018      	b.n	80057da <i2c_config+0xee>

	}else if(ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_25_MHz_FOR_I2C){
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	79db      	ldrb	r3, [r3, #7]
 80057ac:	2b19      	cmp	r3, #25
 80057ae:	d108      	bne.n	80057c2 <i2c_config+0xd6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_25_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0219 	orr.w	r2, r2, #25
 80057be:	605a      	str	r2, [r3, #4]
 80057c0:	e00b      	b.n	80057da <i2c_config+0xee>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	79db      	ldrb	r3, [r3, #7]
 80057c6:	2b32      	cmp	r3, #50	; 0x32
 80057c8:	d107      	bne.n	80057da <i2c_config+0xee>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 80057d8:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2200      	movs	r2, #0
 80057e0:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2200      	movs	r2, #0
 80057e8:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	795b      	ldrb	r3, [r3, #5]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d15c      	bne.n	80058ac <i2c_config+0x1c0>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005800:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	79db      	ldrb	r3, [r3, #7]
 8005806:	2b32      	cmp	r3, #50	; 0x32
 8005808:	d03f      	beq.n	800588a <i2c_config+0x19e>
 800580a:	2b32      	cmp	r3, #50	; 0x32
 800580c:	f300 80b2 	bgt.w	8005974 <i2c_config+0x288>
 8005810:	2b19      	cmp	r3, #25
 8005812:	d029      	beq.n	8005868 <i2c_config+0x17c>
 8005814:	2b19      	cmp	r3, #25
 8005816:	f300 80ad 	bgt.w	8005974 <i2c_config+0x288>
 800581a:	2b04      	cmp	r3, #4
 800581c:	d002      	beq.n	8005824 <i2c_config+0x138>
 800581e:	2b10      	cmp	r3, #16
 8005820:	d011      	beq.n	8005846 <i2c_config+0x15a>


				break;
			}default:{

				break;
 8005822:	e0a7      	b.n	8005974 <i2c_config+0x288>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69da      	ldr	r2, [r3, #28]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0214 	orr.w	r2, r2, #20
 8005832:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6a1a      	ldr	r2, [r3, #32]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0205 	orr.w	r2, r2, #5
 8005842:	621a      	str	r2, [r3, #32]
				break;
 8005844:	e099      	b.n	800597a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69da      	ldr	r2, [r3, #28]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8005854:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0211 	orr.w	r2, r2, #17
 8005864:	621a      	str	r2, [r3, #32]
				break;
 8005866:	e088      	b.n	800597a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_25MHz << I2C_CCR_CCR_Pos);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69da      	ldr	r2, [r3, #28]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8005876:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_25MHz;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6a1a      	ldr	r2, [r3, #32]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0215 	orr.w	r2, r2, #21
 8005886:	621a      	str	r2, [r3, #32]
				break;
 8005888:	e077      	b.n	800597a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 8005898:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a1a      	ldr	r2, [r3, #32]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 80058a8:	621a      	str	r2, [r3, #32]
				break;
 80058aa:	e066      	b.n	800597a <i2c_config+0x28e>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69da      	ldr	r2, [r3, #28]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058ba:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	79db      	ldrb	r3, [r3, #7]
 80058c0:	2b32      	cmp	r3, #50	; 0x32
 80058c2:	d046      	beq.n	8005952 <i2c_config+0x266>
 80058c4:	2b32      	cmp	r3, #50	; 0x32
 80058c6:	dc57      	bgt.n	8005978 <i2c_config+0x28c>
 80058c8:	2b19      	cmp	r3, #25
 80058ca:	d031      	beq.n	8005930 <i2c_config+0x244>
 80058cc:	2b19      	cmp	r3, #25
 80058ce:	dc53      	bgt.n	8005978 <i2c_config+0x28c>
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d002      	beq.n	80058da <i2c_config+0x1ee>
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d011      	beq.n	80058fc <i2c_config+0x210>


				break;
			}default:{

				break;
 80058d8:	e04e      	b.n	8005978 <i2c_config+0x28c>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0203 	orr.w	r2, r2, #3
 80058e8:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6a1a      	ldr	r2, [r3, #32]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0202 	orr.w	r2, r2, #2
 80058f8:	621a      	str	r2, [r3, #32]
				break;
 80058fa:	e03e      	b.n	800597a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69da      	ldr	r2, [r3, #28]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 020d 	orr.w	r2, r2, #13
 800590a:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6a1a      	ldr	r2, [r3, #32]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0206 	orr.w	r2, r2, #6
 800591a:	621a      	str	r2, [r3, #32]
				break;
 800591c:	e02d      	b.n	800597a <i2c_config+0x28e>
 800591e:	bf00      	nop
 8005920:	40005400 	.word	0x40005400
 8005924:	40023800 	.word	0x40023800
 8005928:	40005800 	.word	0x40005800
 800592c:	40005c00 	.word	0x40005c00
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_25MHz << I2C_CCR_CCR_Pos);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69da      	ldr	r2, [r3, #28]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0215 	orr.w	r2, r2, #21
 800593e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_25MHz;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6a1a      	ldr	r2, [r3, #32]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0208 	orr.w	r2, r2, #8
 800594e:	621a      	str	r2, [r3, #32]
				break;
 8005950:	e013      	b.n	800597a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69da      	ldr	r2, [r3, #28]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8005960:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6a1a      	ldr	r2, [r3, #32]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0210 	orr.w	r2, r2, #16
 8005970:	621a      	str	r2, [r3, #32]
				break;
 8005972:	e002      	b.n	800597a <i2c_config+0x28e>
				break;
 8005974:	bf00      	nop
 8005976:	e002      	b.n	800597e <i2c_config+0x292>
				break;
 8005978:	bf00      	nop

		}

	}

	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800597a:	e000      	b.n	800597e <i2c_config+0x292>
		__NOP();
 800597c:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1f7      	bne.n	800597c <i2c_config+0x290>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]


}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059be:	601a      	str	r2, [r3, #0]
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	7a1b      	ldrb	r3, [r3, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d009      	beq.n	80059f0 <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ea:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80059ec:	e000      	b.n	80059f0 <i2c_startTransaction+0x24>
		__NOP();
 80059ee:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f7      	bne.n	80059ee <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a0c:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8005a0e:	e000      	b.n	8005a12 <i2c_startTransaction+0x46>
		__NOP();
 8005a10:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0f7      	beq.n	8005a10 <i2c_startTransaction+0x44>
	}
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	7a1b      	ldrb	r3, [r3, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a4c:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a5c:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8005a5e:	e000      	b.n	8005a62 <i2c_reStartTransaction+0x34>
		__NOP();
 8005a60:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0f7      	beq.n	8005a60 <i2c_reStartTransaction+0x32>
	}
}
 8005a70:	bf00      	nop
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a94:	601a      	str	r2, [r3, #0]
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	70fb      	strb	r3, [r7, #3]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	005a      	lsls	r2, r3, #1
 8005aba:	78bb      	ldrb	r3, [r7, #2]
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8005ac4:	e000      	b.n	8005ac8 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8005ac6:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0f7      	beq.n	8005ac6 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	73fb      	strb	r3, [r7, #15]

}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	460b      	mov	r3, r1
 8005afc:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	78fa      	ldrb	r2, [r7, #3]
 8005b04:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8005b06:	e000      	b.n	8005b0a <i2c_sendMemoryAddress+0x18>
		__NOP();
 8005b08:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0f7      	beq.n	8005b08 <i2c_sendMemoryAddress+0x16>
	}
}
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	78fa      	ldrb	r2, [r7, #3]
 8005b38:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8005b3a:	e000      	b.n	8005b3e <i2c_sendDataByte+0x18>
		__NOP();
 8005b3c:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0f7      	beq.n	8005b3c <i2c_sendDataByte+0x16>
	}
}
 8005b4c:	bf00      	nop
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8005b62:	e000      	b.n	8005b66 <i2c_readDataByte+0xc>
		__NOP();
 8005b64:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f7      	beq.n	8005b64 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	799b      	ldrb	r3, [r3, #6]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <__errno>:
 8005b90:	4b01      	ldr	r3, [pc, #4]	; (8005b98 <__errno+0x8>)
 8005b92:	6818      	ldr	r0, [r3, #0]
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	20000010 	.word	0x20000010

08005b9c <__libc_init_array>:
 8005b9c:	b570      	push	{r4, r5, r6, lr}
 8005b9e:	4d0d      	ldr	r5, [pc, #52]	; (8005bd4 <__libc_init_array+0x38>)
 8005ba0:	4c0d      	ldr	r4, [pc, #52]	; (8005bd8 <__libc_init_array+0x3c>)
 8005ba2:	1b64      	subs	r4, r4, r5
 8005ba4:	10a4      	asrs	r4, r4, #2
 8005ba6:	2600      	movs	r6, #0
 8005ba8:	42a6      	cmp	r6, r4
 8005baa:	d109      	bne.n	8005bc0 <__libc_init_array+0x24>
 8005bac:	4d0b      	ldr	r5, [pc, #44]	; (8005bdc <__libc_init_array+0x40>)
 8005bae:	4c0c      	ldr	r4, [pc, #48]	; (8005be0 <__libc_init_array+0x44>)
 8005bb0:	f004 ff2a 	bl	800aa08 <_init>
 8005bb4:	1b64      	subs	r4, r4, r5
 8005bb6:	10a4      	asrs	r4, r4, #2
 8005bb8:	2600      	movs	r6, #0
 8005bba:	42a6      	cmp	r6, r4
 8005bbc:	d105      	bne.n	8005bca <__libc_init_array+0x2e>
 8005bbe:	bd70      	pop	{r4, r5, r6, pc}
 8005bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc4:	4798      	blx	r3
 8005bc6:	3601      	adds	r6, #1
 8005bc8:	e7ee      	b.n	8005ba8 <__libc_init_array+0xc>
 8005bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bce:	4798      	blx	r3
 8005bd0:	3601      	adds	r6, #1
 8005bd2:	e7f2      	b.n	8005bba <__libc_init_array+0x1e>
 8005bd4:	0800b140 	.word	0x0800b140
 8005bd8:	0800b140 	.word	0x0800b140
 8005bdc:	0800b140 	.word	0x0800b140
 8005be0:	0800b144 	.word	0x0800b144

08005be4 <malloc>:
 8005be4:	4b02      	ldr	r3, [pc, #8]	; (8005bf0 <malloc+0xc>)
 8005be6:	4601      	mov	r1, r0
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	f000 b877 	b.w	8005cdc <_malloc_r>
 8005bee:	bf00      	nop
 8005bf0:	20000010 	.word	0x20000010

08005bf4 <memset>:
 8005bf4:	4402      	add	r2, r0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d100      	bne.n	8005bfe <memset+0xa>
 8005bfc:	4770      	bx	lr
 8005bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005c02:	e7f9      	b.n	8005bf8 <memset+0x4>

08005c04 <_free_r>:
 8005c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c06:	2900      	cmp	r1, #0
 8005c08:	d044      	beq.n	8005c94 <_free_r+0x90>
 8005c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c0e:	9001      	str	r0, [sp, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f1a1 0404 	sub.w	r4, r1, #4
 8005c16:	bfb8      	it	lt
 8005c18:	18e4      	addlt	r4, r4, r3
 8005c1a:	f001 fc53 	bl	80074c4 <__malloc_lock>
 8005c1e:	4a1e      	ldr	r2, [pc, #120]	; (8005c98 <_free_r+0x94>)
 8005c20:	9801      	ldr	r0, [sp, #4]
 8005c22:	6813      	ldr	r3, [r2, #0]
 8005c24:	b933      	cbnz	r3, 8005c34 <_free_r+0x30>
 8005c26:	6063      	str	r3, [r4, #4]
 8005c28:	6014      	str	r4, [r2, #0]
 8005c2a:	b003      	add	sp, #12
 8005c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c30:	f001 bc4e 	b.w	80074d0 <__malloc_unlock>
 8005c34:	42a3      	cmp	r3, r4
 8005c36:	d908      	bls.n	8005c4a <_free_r+0x46>
 8005c38:	6825      	ldr	r5, [r4, #0]
 8005c3a:	1961      	adds	r1, r4, r5
 8005c3c:	428b      	cmp	r3, r1
 8005c3e:	bf01      	itttt	eq
 8005c40:	6819      	ldreq	r1, [r3, #0]
 8005c42:	685b      	ldreq	r3, [r3, #4]
 8005c44:	1949      	addeq	r1, r1, r5
 8005c46:	6021      	streq	r1, [r4, #0]
 8005c48:	e7ed      	b.n	8005c26 <_free_r+0x22>
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	b10b      	cbz	r3, 8005c54 <_free_r+0x50>
 8005c50:	42a3      	cmp	r3, r4
 8005c52:	d9fa      	bls.n	8005c4a <_free_r+0x46>
 8005c54:	6811      	ldr	r1, [r2, #0]
 8005c56:	1855      	adds	r5, r2, r1
 8005c58:	42a5      	cmp	r5, r4
 8005c5a:	d10b      	bne.n	8005c74 <_free_r+0x70>
 8005c5c:	6824      	ldr	r4, [r4, #0]
 8005c5e:	4421      	add	r1, r4
 8005c60:	1854      	adds	r4, r2, r1
 8005c62:	42a3      	cmp	r3, r4
 8005c64:	6011      	str	r1, [r2, #0]
 8005c66:	d1e0      	bne.n	8005c2a <_free_r+0x26>
 8005c68:	681c      	ldr	r4, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	6053      	str	r3, [r2, #4]
 8005c6e:	4421      	add	r1, r4
 8005c70:	6011      	str	r1, [r2, #0]
 8005c72:	e7da      	b.n	8005c2a <_free_r+0x26>
 8005c74:	d902      	bls.n	8005c7c <_free_r+0x78>
 8005c76:	230c      	movs	r3, #12
 8005c78:	6003      	str	r3, [r0, #0]
 8005c7a:	e7d6      	b.n	8005c2a <_free_r+0x26>
 8005c7c:	6825      	ldr	r5, [r4, #0]
 8005c7e:	1961      	adds	r1, r4, r5
 8005c80:	428b      	cmp	r3, r1
 8005c82:	bf04      	itt	eq
 8005c84:	6819      	ldreq	r1, [r3, #0]
 8005c86:	685b      	ldreq	r3, [r3, #4]
 8005c88:	6063      	str	r3, [r4, #4]
 8005c8a:	bf04      	itt	eq
 8005c8c:	1949      	addeq	r1, r1, r5
 8005c8e:	6021      	streq	r1, [r4, #0]
 8005c90:	6054      	str	r4, [r2, #4]
 8005c92:	e7ca      	b.n	8005c2a <_free_r+0x26>
 8005c94:	b003      	add	sp, #12
 8005c96:	bd30      	pop	{r4, r5, pc}
 8005c98:	2000051c 	.word	0x2000051c

08005c9c <sbrk_aligned>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	4e0e      	ldr	r6, [pc, #56]	; (8005cd8 <sbrk_aligned+0x3c>)
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	6831      	ldr	r1, [r6, #0]
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	b911      	cbnz	r1, 8005cae <sbrk_aligned+0x12>
 8005ca8:	f000 fcf6 	bl	8006698 <_sbrk_r>
 8005cac:	6030      	str	r0, [r6, #0]
 8005cae:	4621      	mov	r1, r4
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	f000 fcf1 	bl	8006698 <_sbrk_r>
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	d00a      	beq.n	8005cd0 <sbrk_aligned+0x34>
 8005cba:	1cc4      	adds	r4, r0, #3
 8005cbc:	f024 0403 	bic.w	r4, r4, #3
 8005cc0:	42a0      	cmp	r0, r4
 8005cc2:	d007      	beq.n	8005cd4 <sbrk_aligned+0x38>
 8005cc4:	1a21      	subs	r1, r4, r0
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f000 fce6 	bl	8006698 <_sbrk_r>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d101      	bne.n	8005cd4 <sbrk_aligned+0x38>
 8005cd0:	f04f 34ff 	mov.w	r4, #4294967295
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}
 8005cd8:	20000520 	.word	0x20000520

08005cdc <_malloc_r>:
 8005cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce0:	1ccd      	adds	r5, r1, #3
 8005ce2:	f025 0503 	bic.w	r5, r5, #3
 8005ce6:	3508      	adds	r5, #8
 8005ce8:	2d0c      	cmp	r5, #12
 8005cea:	bf38      	it	cc
 8005cec:	250c      	movcc	r5, #12
 8005cee:	2d00      	cmp	r5, #0
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	db01      	blt.n	8005cf8 <_malloc_r+0x1c>
 8005cf4:	42a9      	cmp	r1, r5
 8005cf6:	d905      	bls.n	8005d04 <_malloc_r+0x28>
 8005cf8:	230c      	movs	r3, #12
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	2600      	movs	r6, #0
 8005cfe:	4630      	mov	r0, r6
 8005d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d04:	4e2e      	ldr	r6, [pc, #184]	; (8005dc0 <_malloc_r+0xe4>)
 8005d06:	f001 fbdd 	bl	80074c4 <__malloc_lock>
 8005d0a:	6833      	ldr	r3, [r6, #0]
 8005d0c:	461c      	mov	r4, r3
 8005d0e:	bb34      	cbnz	r4, 8005d5e <_malloc_r+0x82>
 8005d10:	4629      	mov	r1, r5
 8005d12:	4638      	mov	r0, r7
 8005d14:	f7ff ffc2 	bl	8005c9c <sbrk_aligned>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	d14d      	bne.n	8005dba <_malloc_r+0xde>
 8005d1e:	6834      	ldr	r4, [r6, #0]
 8005d20:	4626      	mov	r6, r4
 8005d22:	2e00      	cmp	r6, #0
 8005d24:	d140      	bne.n	8005da8 <_malloc_r+0xcc>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	eb04 0803 	add.w	r8, r4, r3
 8005d30:	f000 fcb2 	bl	8006698 <_sbrk_r>
 8005d34:	4580      	cmp	r8, r0
 8005d36:	d13a      	bne.n	8005dae <_malloc_r+0xd2>
 8005d38:	6821      	ldr	r1, [r4, #0]
 8005d3a:	3503      	adds	r5, #3
 8005d3c:	1a6d      	subs	r5, r5, r1
 8005d3e:	f025 0503 	bic.w	r5, r5, #3
 8005d42:	3508      	adds	r5, #8
 8005d44:	2d0c      	cmp	r5, #12
 8005d46:	bf38      	it	cc
 8005d48:	250c      	movcc	r5, #12
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	f7ff ffa5 	bl	8005c9c <sbrk_aligned>
 8005d52:	3001      	adds	r0, #1
 8005d54:	d02b      	beq.n	8005dae <_malloc_r+0xd2>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	442b      	add	r3, r5
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	e00e      	b.n	8005d7c <_malloc_r+0xa0>
 8005d5e:	6822      	ldr	r2, [r4, #0]
 8005d60:	1b52      	subs	r2, r2, r5
 8005d62:	d41e      	bmi.n	8005da2 <_malloc_r+0xc6>
 8005d64:	2a0b      	cmp	r2, #11
 8005d66:	d916      	bls.n	8005d96 <_malloc_r+0xba>
 8005d68:	1961      	adds	r1, r4, r5
 8005d6a:	42a3      	cmp	r3, r4
 8005d6c:	6025      	str	r5, [r4, #0]
 8005d6e:	bf18      	it	ne
 8005d70:	6059      	strne	r1, [r3, #4]
 8005d72:	6863      	ldr	r3, [r4, #4]
 8005d74:	bf08      	it	eq
 8005d76:	6031      	streq	r1, [r6, #0]
 8005d78:	5162      	str	r2, [r4, r5]
 8005d7a:	604b      	str	r3, [r1, #4]
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	f104 060b 	add.w	r6, r4, #11
 8005d82:	f001 fba5 	bl	80074d0 <__malloc_unlock>
 8005d86:	f026 0607 	bic.w	r6, r6, #7
 8005d8a:	1d23      	adds	r3, r4, #4
 8005d8c:	1af2      	subs	r2, r6, r3
 8005d8e:	d0b6      	beq.n	8005cfe <_malloc_r+0x22>
 8005d90:	1b9b      	subs	r3, r3, r6
 8005d92:	50a3      	str	r3, [r4, r2]
 8005d94:	e7b3      	b.n	8005cfe <_malloc_r+0x22>
 8005d96:	6862      	ldr	r2, [r4, #4]
 8005d98:	42a3      	cmp	r3, r4
 8005d9a:	bf0c      	ite	eq
 8005d9c:	6032      	streq	r2, [r6, #0]
 8005d9e:	605a      	strne	r2, [r3, #4]
 8005da0:	e7ec      	b.n	8005d7c <_malloc_r+0xa0>
 8005da2:	4623      	mov	r3, r4
 8005da4:	6864      	ldr	r4, [r4, #4]
 8005da6:	e7b2      	b.n	8005d0e <_malloc_r+0x32>
 8005da8:	4634      	mov	r4, r6
 8005daa:	6876      	ldr	r6, [r6, #4]
 8005dac:	e7b9      	b.n	8005d22 <_malloc_r+0x46>
 8005dae:	230c      	movs	r3, #12
 8005db0:	603b      	str	r3, [r7, #0]
 8005db2:	4638      	mov	r0, r7
 8005db4:	f001 fb8c 	bl	80074d0 <__malloc_unlock>
 8005db8:	e7a1      	b.n	8005cfe <_malloc_r+0x22>
 8005dba:	6025      	str	r5, [r4, #0]
 8005dbc:	e7de      	b.n	8005d7c <_malloc_r+0xa0>
 8005dbe:	bf00      	nop
 8005dc0:	2000051c 	.word	0x2000051c

08005dc4 <__cvt>:
 8005dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc8:	ec55 4b10 	vmov	r4, r5, d0
 8005dcc:	2d00      	cmp	r5, #0
 8005dce:	460e      	mov	r6, r1
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	462b      	mov	r3, r5
 8005dd4:	bfbb      	ittet	lt
 8005dd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005dda:	461d      	movlt	r5, r3
 8005ddc:	2300      	movge	r3, #0
 8005dde:	232d      	movlt	r3, #45	; 0x2d
 8005de0:	700b      	strb	r3, [r1, #0]
 8005de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005de4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005de8:	4691      	mov	r9, r2
 8005dea:	f023 0820 	bic.w	r8, r3, #32
 8005dee:	bfbc      	itt	lt
 8005df0:	4622      	movlt	r2, r4
 8005df2:	4614      	movlt	r4, r2
 8005df4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005df8:	d005      	beq.n	8005e06 <__cvt+0x42>
 8005dfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005dfe:	d100      	bne.n	8005e02 <__cvt+0x3e>
 8005e00:	3601      	adds	r6, #1
 8005e02:	2102      	movs	r1, #2
 8005e04:	e000      	b.n	8005e08 <__cvt+0x44>
 8005e06:	2103      	movs	r1, #3
 8005e08:	ab03      	add	r3, sp, #12
 8005e0a:	9301      	str	r3, [sp, #4]
 8005e0c:	ab02      	add	r3, sp, #8
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	ec45 4b10 	vmov	d0, r4, r5
 8005e14:	4653      	mov	r3, sl
 8005e16:	4632      	mov	r2, r6
 8005e18:	f000 fd42 	bl	80068a0 <_dtoa_r>
 8005e1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e20:	4607      	mov	r7, r0
 8005e22:	d102      	bne.n	8005e2a <__cvt+0x66>
 8005e24:	f019 0f01 	tst.w	r9, #1
 8005e28:	d022      	beq.n	8005e70 <__cvt+0xac>
 8005e2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e2e:	eb07 0906 	add.w	r9, r7, r6
 8005e32:	d110      	bne.n	8005e56 <__cvt+0x92>
 8005e34:	783b      	ldrb	r3, [r7, #0]
 8005e36:	2b30      	cmp	r3, #48	; 0x30
 8005e38:	d10a      	bne.n	8005e50 <__cvt+0x8c>
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	4620      	mov	r0, r4
 8005e40:	4629      	mov	r1, r5
 8005e42:	f7fa fe49 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e46:	b918      	cbnz	r0, 8005e50 <__cvt+0x8c>
 8005e48:	f1c6 0601 	rsb	r6, r6, #1
 8005e4c:	f8ca 6000 	str.w	r6, [sl]
 8005e50:	f8da 3000 	ldr.w	r3, [sl]
 8005e54:	4499      	add	r9, r3
 8005e56:	2200      	movs	r2, #0
 8005e58:	2300      	movs	r3, #0
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	f7fa fe3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e62:	b108      	cbz	r0, 8005e68 <__cvt+0xa4>
 8005e64:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e68:	2230      	movs	r2, #48	; 0x30
 8005e6a:	9b03      	ldr	r3, [sp, #12]
 8005e6c:	454b      	cmp	r3, r9
 8005e6e:	d307      	bcc.n	8005e80 <__cvt+0xbc>
 8005e70:	9b03      	ldr	r3, [sp, #12]
 8005e72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e74:	1bdb      	subs	r3, r3, r7
 8005e76:	4638      	mov	r0, r7
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	b004      	add	sp, #16
 8005e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e80:	1c59      	adds	r1, r3, #1
 8005e82:	9103      	str	r1, [sp, #12]
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	e7f0      	b.n	8005e6a <__cvt+0xa6>

08005e88 <__exponent>:
 8005e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2900      	cmp	r1, #0
 8005e8e:	bfb8      	it	lt
 8005e90:	4249      	neglt	r1, r1
 8005e92:	f803 2b02 	strb.w	r2, [r3], #2
 8005e96:	bfb4      	ite	lt
 8005e98:	222d      	movlt	r2, #45	; 0x2d
 8005e9a:	222b      	movge	r2, #43	; 0x2b
 8005e9c:	2909      	cmp	r1, #9
 8005e9e:	7042      	strb	r2, [r0, #1]
 8005ea0:	dd2a      	ble.n	8005ef8 <__exponent+0x70>
 8005ea2:	f10d 0407 	add.w	r4, sp, #7
 8005ea6:	46a4      	mov	ip, r4
 8005ea8:	270a      	movs	r7, #10
 8005eaa:	46a6      	mov	lr, r4
 8005eac:	460a      	mov	r2, r1
 8005eae:	fb91 f6f7 	sdiv	r6, r1, r7
 8005eb2:	fb07 1516 	mls	r5, r7, r6, r1
 8005eb6:	3530      	adds	r5, #48	; 0x30
 8005eb8:	2a63      	cmp	r2, #99	; 0x63
 8005eba:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ebe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	dcf1      	bgt.n	8005eaa <__exponent+0x22>
 8005ec6:	3130      	adds	r1, #48	; 0x30
 8005ec8:	f1ae 0502 	sub.w	r5, lr, #2
 8005ecc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ed0:	1c44      	adds	r4, r0, #1
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	4561      	cmp	r1, ip
 8005ed6:	d30a      	bcc.n	8005eee <__exponent+0x66>
 8005ed8:	f10d 0209 	add.w	r2, sp, #9
 8005edc:	eba2 020e 	sub.w	r2, r2, lr
 8005ee0:	4565      	cmp	r5, ip
 8005ee2:	bf88      	it	hi
 8005ee4:	2200      	movhi	r2, #0
 8005ee6:	4413      	add	r3, r2
 8005ee8:	1a18      	subs	r0, r3, r0
 8005eea:	b003      	add	sp, #12
 8005eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ef2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005ef6:	e7ed      	b.n	8005ed4 <__exponent+0x4c>
 8005ef8:	2330      	movs	r3, #48	; 0x30
 8005efa:	3130      	adds	r1, #48	; 0x30
 8005efc:	7083      	strb	r3, [r0, #2]
 8005efe:	70c1      	strb	r1, [r0, #3]
 8005f00:	1d03      	adds	r3, r0, #4
 8005f02:	e7f1      	b.n	8005ee8 <__exponent+0x60>

08005f04 <_printf_float>:
 8005f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f08:	ed2d 8b02 	vpush	{d8}
 8005f0c:	b08d      	sub	sp, #52	; 0x34
 8005f0e:	460c      	mov	r4, r1
 8005f10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f14:	4616      	mov	r6, r2
 8005f16:	461f      	mov	r7, r3
 8005f18:	4605      	mov	r5, r0
 8005f1a:	f001 faaf 	bl	800747c <_localeconv_r>
 8005f1e:	f8d0 a000 	ldr.w	sl, [r0]
 8005f22:	4650      	mov	r0, sl
 8005f24:	f7fa f95c 	bl	80001e0 <strlen>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	9305      	str	r3, [sp, #20]
 8005f30:	f8d8 3000 	ldr.w	r3, [r8]
 8005f34:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005f38:	3307      	adds	r3, #7
 8005f3a:	f023 0307 	bic.w	r3, r3, #7
 8005f3e:	f103 0208 	add.w	r2, r3, #8
 8005f42:	f8c8 2000 	str.w	r2, [r8]
 8005f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f56:	9307      	str	r3, [sp, #28]
 8005f58:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f5c:	ee08 0a10 	vmov	s16, r0
 8005f60:	4b9f      	ldr	r3, [pc, #636]	; (80061e0 <_printf_float+0x2dc>)
 8005f62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f66:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6a:	f7fa fde7 	bl	8000b3c <__aeabi_dcmpun>
 8005f6e:	bb88      	cbnz	r0, 8005fd4 <_printf_float+0xd0>
 8005f70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f74:	4b9a      	ldr	r3, [pc, #616]	; (80061e0 <_printf_float+0x2dc>)
 8005f76:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7a:	f7fa fdc1 	bl	8000b00 <__aeabi_dcmple>
 8005f7e:	bb48      	cbnz	r0, 8005fd4 <_printf_float+0xd0>
 8005f80:	2200      	movs	r2, #0
 8005f82:	2300      	movs	r3, #0
 8005f84:	4640      	mov	r0, r8
 8005f86:	4649      	mov	r1, r9
 8005f88:	f7fa fdb0 	bl	8000aec <__aeabi_dcmplt>
 8005f8c:	b110      	cbz	r0, 8005f94 <_printf_float+0x90>
 8005f8e:	232d      	movs	r3, #45	; 0x2d
 8005f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f94:	4b93      	ldr	r3, [pc, #588]	; (80061e4 <_printf_float+0x2e0>)
 8005f96:	4894      	ldr	r0, [pc, #592]	; (80061e8 <_printf_float+0x2e4>)
 8005f98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f9c:	bf94      	ite	ls
 8005f9e:	4698      	movls	r8, r3
 8005fa0:	4680      	movhi	r8, r0
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	6123      	str	r3, [r4, #16]
 8005fa6:	9b05      	ldr	r3, [sp, #20]
 8005fa8:	f023 0204 	bic.w	r2, r3, #4
 8005fac:	6022      	str	r2, [r4, #0]
 8005fae:	f04f 0900 	mov.w	r9, #0
 8005fb2:	9700      	str	r7, [sp, #0]
 8005fb4:	4633      	mov	r3, r6
 8005fb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8005fb8:	4621      	mov	r1, r4
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f000 f9d8 	bl	8006370 <_printf_common>
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	f040 8090 	bne.w	80060e6 <_printf_float+0x1e2>
 8005fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fca:	b00d      	add	sp, #52	; 0x34
 8005fcc:	ecbd 8b02 	vpop	{d8}
 8005fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd4:	4642      	mov	r2, r8
 8005fd6:	464b      	mov	r3, r9
 8005fd8:	4640      	mov	r0, r8
 8005fda:	4649      	mov	r1, r9
 8005fdc:	f7fa fdae 	bl	8000b3c <__aeabi_dcmpun>
 8005fe0:	b140      	cbz	r0, 8005ff4 <_printf_float+0xf0>
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	bfbc      	itt	lt
 8005fe8:	232d      	movlt	r3, #45	; 0x2d
 8005fea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005fee:	487f      	ldr	r0, [pc, #508]	; (80061ec <_printf_float+0x2e8>)
 8005ff0:	4b7f      	ldr	r3, [pc, #508]	; (80061f0 <_printf_float+0x2ec>)
 8005ff2:	e7d1      	b.n	8005f98 <_printf_float+0x94>
 8005ff4:	6863      	ldr	r3, [r4, #4]
 8005ff6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ffa:	9206      	str	r2, [sp, #24]
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	d13f      	bne.n	8006080 <_printf_float+0x17c>
 8006000:	2306      	movs	r3, #6
 8006002:	6063      	str	r3, [r4, #4]
 8006004:	9b05      	ldr	r3, [sp, #20]
 8006006:	6861      	ldr	r1, [r4, #4]
 8006008:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800600c:	2300      	movs	r3, #0
 800600e:	9303      	str	r3, [sp, #12]
 8006010:	ab0a      	add	r3, sp, #40	; 0x28
 8006012:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006016:	ab09      	add	r3, sp, #36	; 0x24
 8006018:	ec49 8b10 	vmov	d0, r8, r9
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	6022      	str	r2, [r4, #0]
 8006020:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006024:	4628      	mov	r0, r5
 8006026:	f7ff fecd 	bl	8005dc4 <__cvt>
 800602a:	9b06      	ldr	r3, [sp, #24]
 800602c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800602e:	2b47      	cmp	r3, #71	; 0x47
 8006030:	4680      	mov	r8, r0
 8006032:	d108      	bne.n	8006046 <_printf_float+0x142>
 8006034:	1cc8      	adds	r0, r1, #3
 8006036:	db02      	blt.n	800603e <_printf_float+0x13a>
 8006038:	6863      	ldr	r3, [r4, #4]
 800603a:	4299      	cmp	r1, r3
 800603c:	dd41      	ble.n	80060c2 <_printf_float+0x1be>
 800603e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006042:	fa5f fb8b 	uxtb.w	fp, fp
 8006046:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800604a:	d820      	bhi.n	800608e <_printf_float+0x18a>
 800604c:	3901      	subs	r1, #1
 800604e:	465a      	mov	r2, fp
 8006050:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006054:	9109      	str	r1, [sp, #36]	; 0x24
 8006056:	f7ff ff17 	bl	8005e88 <__exponent>
 800605a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800605c:	1813      	adds	r3, r2, r0
 800605e:	2a01      	cmp	r2, #1
 8006060:	4681      	mov	r9, r0
 8006062:	6123      	str	r3, [r4, #16]
 8006064:	dc02      	bgt.n	800606c <_printf_float+0x168>
 8006066:	6822      	ldr	r2, [r4, #0]
 8006068:	07d2      	lsls	r2, r2, #31
 800606a:	d501      	bpl.n	8006070 <_printf_float+0x16c>
 800606c:	3301      	adds	r3, #1
 800606e:	6123      	str	r3, [r4, #16]
 8006070:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006074:	2b00      	cmp	r3, #0
 8006076:	d09c      	beq.n	8005fb2 <_printf_float+0xae>
 8006078:	232d      	movs	r3, #45	; 0x2d
 800607a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800607e:	e798      	b.n	8005fb2 <_printf_float+0xae>
 8006080:	9a06      	ldr	r2, [sp, #24]
 8006082:	2a47      	cmp	r2, #71	; 0x47
 8006084:	d1be      	bne.n	8006004 <_printf_float+0x100>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1bc      	bne.n	8006004 <_printf_float+0x100>
 800608a:	2301      	movs	r3, #1
 800608c:	e7b9      	b.n	8006002 <_printf_float+0xfe>
 800608e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006092:	d118      	bne.n	80060c6 <_printf_float+0x1c2>
 8006094:	2900      	cmp	r1, #0
 8006096:	6863      	ldr	r3, [r4, #4]
 8006098:	dd0b      	ble.n	80060b2 <_printf_float+0x1ae>
 800609a:	6121      	str	r1, [r4, #16]
 800609c:	b913      	cbnz	r3, 80060a4 <_printf_float+0x1a0>
 800609e:	6822      	ldr	r2, [r4, #0]
 80060a0:	07d0      	lsls	r0, r2, #31
 80060a2:	d502      	bpl.n	80060aa <_printf_float+0x1a6>
 80060a4:	3301      	adds	r3, #1
 80060a6:	440b      	add	r3, r1
 80060a8:	6123      	str	r3, [r4, #16]
 80060aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80060ac:	f04f 0900 	mov.w	r9, #0
 80060b0:	e7de      	b.n	8006070 <_printf_float+0x16c>
 80060b2:	b913      	cbnz	r3, 80060ba <_printf_float+0x1b6>
 80060b4:	6822      	ldr	r2, [r4, #0]
 80060b6:	07d2      	lsls	r2, r2, #31
 80060b8:	d501      	bpl.n	80060be <_printf_float+0x1ba>
 80060ba:	3302      	adds	r3, #2
 80060bc:	e7f4      	b.n	80060a8 <_printf_float+0x1a4>
 80060be:	2301      	movs	r3, #1
 80060c0:	e7f2      	b.n	80060a8 <_printf_float+0x1a4>
 80060c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80060c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c8:	4299      	cmp	r1, r3
 80060ca:	db05      	blt.n	80060d8 <_printf_float+0x1d4>
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	6121      	str	r1, [r4, #16]
 80060d0:	07d8      	lsls	r0, r3, #31
 80060d2:	d5ea      	bpl.n	80060aa <_printf_float+0x1a6>
 80060d4:	1c4b      	adds	r3, r1, #1
 80060d6:	e7e7      	b.n	80060a8 <_printf_float+0x1a4>
 80060d8:	2900      	cmp	r1, #0
 80060da:	bfd4      	ite	le
 80060dc:	f1c1 0202 	rsble	r2, r1, #2
 80060e0:	2201      	movgt	r2, #1
 80060e2:	4413      	add	r3, r2
 80060e4:	e7e0      	b.n	80060a8 <_printf_float+0x1a4>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	055a      	lsls	r2, r3, #21
 80060ea:	d407      	bmi.n	80060fc <_printf_float+0x1f8>
 80060ec:	6923      	ldr	r3, [r4, #16]
 80060ee:	4642      	mov	r2, r8
 80060f0:	4631      	mov	r1, r6
 80060f2:	4628      	mov	r0, r5
 80060f4:	47b8      	blx	r7
 80060f6:	3001      	adds	r0, #1
 80060f8:	d12c      	bne.n	8006154 <_printf_float+0x250>
 80060fa:	e764      	b.n	8005fc6 <_printf_float+0xc2>
 80060fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006100:	f240 80e0 	bls.w	80062c4 <_printf_float+0x3c0>
 8006104:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006108:	2200      	movs	r2, #0
 800610a:	2300      	movs	r3, #0
 800610c:	f7fa fce4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006110:	2800      	cmp	r0, #0
 8006112:	d034      	beq.n	800617e <_printf_float+0x27a>
 8006114:	4a37      	ldr	r2, [pc, #220]	; (80061f4 <_printf_float+0x2f0>)
 8006116:	2301      	movs	r3, #1
 8006118:	4631      	mov	r1, r6
 800611a:	4628      	mov	r0, r5
 800611c:	47b8      	blx	r7
 800611e:	3001      	adds	r0, #1
 8006120:	f43f af51 	beq.w	8005fc6 <_printf_float+0xc2>
 8006124:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006128:	429a      	cmp	r2, r3
 800612a:	db02      	blt.n	8006132 <_printf_float+0x22e>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	07d8      	lsls	r0, r3, #31
 8006130:	d510      	bpl.n	8006154 <_printf_float+0x250>
 8006132:	ee18 3a10 	vmov	r3, s16
 8006136:	4652      	mov	r2, sl
 8006138:	4631      	mov	r1, r6
 800613a:	4628      	mov	r0, r5
 800613c:	47b8      	blx	r7
 800613e:	3001      	adds	r0, #1
 8006140:	f43f af41 	beq.w	8005fc6 <_printf_float+0xc2>
 8006144:	f04f 0800 	mov.w	r8, #0
 8006148:	f104 091a 	add.w	r9, r4, #26
 800614c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800614e:	3b01      	subs	r3, #1
 8006150:	4543      	cmp	r3, r8
 8006152:	dc09      	bgt.n	8006168 <_printf_float+0x264>
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	079b      	lsls	r3, r3, #30
 8006158:	f100 8105 	bmi.w	8006366 <_printf_float+0x462>
 800615c:	68e0      	ldr	r0, [r4, #12]
 800615e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006160:	4298      	cmp	r0, r3
 8006162:	bfb8      	it	lt
 8006164:	4618      	movlt	r0, r3
 8006166:	e730      	b.n	8005fca <_printf_float+0xc6>
 8006168:	2301      	movs	r3, #1
 800616a:	464a      	mov	r2, r9
 800616c:	4631      	mov	r1, r6
 800616e:	4628      	mov	r0, r5
 8006170:	47b8      	blx	r7
 8006172:	3001      	adds	r0, #1
 8006174:	f43f af27 	beq.w	8005fc6 <_printf_float+0xc2>
 8006178:	f108 0801 	add.w	r8, r8, #1
 800617c:	e7e6      	b.n	800614c <_printf_float+0x248>
 800617e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006180:	2b00      	cmp	r3, #0
 8006182:	dc39      	bgt.n	80061f8 <_printf_float+0x2f4>
 8006184:	4a1b      	ldr	r2, [pc, #108]	; (80061f4 <_printf_float+0x2f0>)
 8006186:	2301      	movs	r3, #1
 8006188:	4631      	mov	r1, r6
 800618a:	4628      	mov	r0, r5
 800618c:	47b8      	blx	r7
 800618e:	3001      	adds	r0, #1
 8006190:	f43f af19 	beq.w	8005fc6 <_printf_float+0xc2>
 8006194:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006198:	4313      	orrs	r3, r2
 800619a:	d102      	bne.n	80061a2 <_printf_float+0x29e>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	07d9      	lsls	r1, r3, #31
 80061a0:	d5d8      	bpl.n	8006154 <_printf_float+0x250>
 80061a2:	ee18 3a10 	vmov	r3, s16
 80061a6:	4652      	mov	r2, sl
 80061a8:	4631      	mov	r1, r6
 80061aa:	4628      	mov	r0, r5
 80061ac:	47b8      	blx	r7
 80061ae:	3001      	adds	r0, #1
 80061b0:	f43f af09 	beq.w	8005fc6 <_printf_float+0xc2>
 80061b4:	f04f 0900 	mov.w	r9, #0
 80061b8:	f104 0a1a 	add.w	sl, r4, #26
 80061bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061be:	425b      	negs	r3, r3
 80061c0:	454b      	cmp	r3, r9
 80061c2:	dc01      	bgt.n	80061c8 <_printf_float+0x2c4>
 80061c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061c6:	e792      	b.n	80060ee <_printf_float+0x1ea>
 80061c8:	2301      	movs	r3, #1
 80061ca:	4652      	mov	r2, sl
 80061cc:	4631      	mov	r1, r6
 80061ce:	4628      	mov	r0, r5
 80061d0:	47b8      	blx	r7
 80061d2:	3001      	adds	r0, #1
 80061d4:	f43f aef7 	beq.w	8005fc6 <_printf_float+0xc2>
 80061d8:	f109 0901 	add.w	r9, r9, #1
 80061dc:	e7ee      	b.n	80061bc <_printf_float+0x2b8>
 80061de:	bf00      	nop
 80061e0:	7fefffff 	.word	0x7fefffff
 80061e4:	0800aaf0 	.word	0x0800aaf0
 80061e8:	0800aaf4 	.word	0x0800aaf4
 80061ec:	0800aafc 	.word	0x0800aafc
 80061f0:	0800aaf8 	.word	0x0800aaf8
 80061f4:	0800ab00 	.word	0x0800ab00
 80061f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061fc:	429a      	cmp	r2, r3
 80061fe:	bfa8      	it	ge
 8006200:	461a      	movge	r2, r3
 8006202:	2a00      	cmp	r2, #0
 8006204:	4691      	mov	r9, r2
 8006206:	dc37      	bgt.n	8006278 <_printf_float+0x374>
 8006208:	f04f 0b00 	mov.w	fp, #0
 800620c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006210:	f104 021a 	add.w	r2, r4, #26
 8006214:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006216:	9305      	str	r3, [sp, #20]
 8006218:	eba3 0309 	sub.w	r3, r3, r9
 800621c:	455b      	cmp	r3, fp
 800621e:	dc33      	bgt.n	8006288 <_printf_float+0x384>
 8006220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006224:	429a      	cmp	r2, r3
 8006226:	db3b      	blt.n	80062a0 <_printf_float+0x39c>
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	07da      	lsls	r2, r3, #31
 800622c:	d438      	bmi.n	80062a0 <_printf_float+0x39c>
 800622e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006230:	9a05      	ldr	r2, [sp, #20]
 8006232:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006234:	1a9a      	subs	r2, r3, r2
 8006236:	eba3 0901 	sub.w	r9, r3, r1
 800623a:	4591      	cmp	r9, r2
 800623c:	bfa8      	it	ge
 800623e:	4691      	movge	r9, r2
 8006240:	f1b9 0f00 	cmp.w	r9, #0
 8006244:	dc35      	bgt.n	80062b2 <_printf_float+0x3ae>
 8006246:	f04f 0800 	mov.w	r8, #0
 800624a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800624e:	f104 0a1a 	add.w	sl, r4, #26
 8006252:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006256:	1a9b      	subs	r3, r3, r2
 8006258:	eba3 0309 	sub.w	r3, r3, r9
 800625c:	4543      	cmp	r3, r8
 800625e:	f77f af79 	ble.w	8006154 <_printf_float+0x250>
 8006262:	2301      	movs	r3, #1
 8006264:	4652      	mov	r2, sl
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	f43f aeaa 	beq.w	8005fc6 <_printf_float+0xc2>
 8006272:	f108 0801 	add.w	r8, r8, #1
 8006276:	e7ec      	b.n	8006252 <_printf_float+0x34e>
 8006278:	4613      	mov	r3, r2
 800627a:	4631      	mov	r1, r6
 800627c:	4642      	mov	r2, r8
 800627e:	4628      	mov	r0, r5
 8006280:	47b8      	blx	r7
 8006282:	3001      	adds	r0, #1
 8006284:	d1c0      	bne.n	8006208 <_printf_float+0x304>
 8006286:	e69e      	b.n	8005fc6 <_printf_float+0xc2>
 8006288:	2301      	movs	r3, #1
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	9205      	str	r2, [sp, #20]
 8006290:	47b8      	blx	r7
 8006292:	3001      	adds	r0, #1
 8006294:	f43f ae97 	beq.w	8005fc6 <_printf_float+0xc2>
 8006298:	9a05      	ldr	r2, [sp, #20]
 800629a:	f10b 0b01 	add.w	fp, fp, #1
 800629e:	e7b9      	b.n	8006214 <_printf_float+0x310>
 80062a0:	ee18 3a10 	vmov	r3, s16
 80062a4:	4652      	mov	r2, sl
 80062a6:	4631      	mov	r1, r6
 80062a8:	4628      	mov	r0, r5
 80062aa:	47b8      	blx	r7
 80062ac:	3001      	adds	r0, #1
 80062ae:	d1be      	bne.n	800622e <_printf_float+0x32a>
 80062b0:	e689      	b.n	8005fc6 <_printf_float+0xc2>
 80062b2:	9a05      	ldr	r2, [sp, #20]
 80062b4:	464b      	mov	r3, r9
 80062b6:	4442      	add	r2, r8
 80062b8:	4631      	mov	r1, r6
 80062ba:	4628      	mov	r0, r5
 80062bc:	47b8      	blx	r7
 80062be:	3001      	adds	r0, #1
 80062c0:	d1c1      	bne.n	8006246 <_printf_float+0x342>
 80062c2:	e680      	b.n	8005fc6 <_printf_float+0xc2>
 80062c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062c6:	2a01      	cmp	r2, #1
 80062c8:	dc01      	bgt.n	80062ce <_printf_float+0x3ca>
 80062ca:	07db      	lsls	r3, r3, #31
 80062cc:	d538      	bpl.n	8006340 <_printf_float+0x43c>
 80062ce:	2301      	movs	r3, #1
 80062d0:	4642      	mov	r2, r8
 80062d2:	4631      	mov	r1, r6
 80062d4:	4628      	mov	r0, r5
 80062d6:	47b8      	blx	r7
 80062d8:	3001      	adds	r0, #1
 80062da:	f43f ae74 	beq.w	8005fc6 <_printf_float+0xc2>
 80062de:	ee18 3a10 	vmov	r3, s16
 80062e2:	4652      	mov	r2, sl
 80062e4:	4631      	mov	r1, r6
 80062e6:	4628      	mov	r0, r5
 80062e8:	47b8      	blx	r7
 80062ea:	3001      	adds	r0, #1
 80062ec:	f43f ae6b 	beq.w	8005fc6 <_printf_float+0xc2>
 80062f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062f4:	2200      	movs	r2, #0
 80062f6:	2300      	movs	r3, #0
 80062f8:	f7fa fbee 	bl	8000ad8 <__aeabi_dcmpeq>
 80062fc:	b9d8      	cbnz	r0, 8006336 <_printf_float+0x432>
 80062fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006300:	f108 0201 	add.w	r2, r8, #1
 8006304:	3b01      	subs	r3, #1
 8006306:	4631      	mov	r1, r6
 8006308:	4628      	mov	r0, r5
 800630a:	47b8      	blx	r7
 800630c:	3001      	adds	r0, #1
 800630e:	d10e      	bne.n	800632e <_printf_float+0x42a>
 8006310:	e659      	b.n	8005fc6 <_printf_float+0xc2>
 8006312:	2301      	movs	r3, #1
 8006314:	4652      	mov	r2, sl
 8006316:	4631      	mov	r1, r6
 8006318:	4628      	mov	r0, r5
 800631a:	47b8      	blx	r7
 800631c:	3001      	adds	r0, #1
 800631e:	f43f ae52 	beq.w	8005fc6 <_printf_float+0xc2>
 8006322:	f108 0801 	add.w	r8, r8, #1
 8006326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006328:	3b01      	subs	r3, #1
 800632a:	4543      	cmp	r3, r8
 800632c:	dcf1      	bgt.n	8006312 <_printf_float+0x40e>
 800632e:	464b      	mov	r3, r9
 8006330:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006334:	e6dc      	b.n	80060f0 <_printf_float+0x1ec>
 8006336:	f04f 0800 	mov.w	r8, #0
 800633a:	f104 0a1a 	add.w	sl, r4, #26
 800633e:	e7f2      	b.n	8006326 <_printf_float+0x422>
 8006340:	2301      	movs	r3, #1
 8006342:	4642      	mov	r2, r8
 8006344:	e7df      	b.n	8006306 <_printf_float+0x402>
 8006346:	2301      	movs	r3, #1
 8006348:	464a      	mov	r2, r9
 800634a:	4631      	mov	r1, r6
 800634c:	4628      	mov	r0, r5
 800634e:	47b8      	blx	r7
 8006350:	3001      	adds	r0, #1
 8006352:	f43f ae38 	beq.w	8005fc6 <_printf_float+0xc2>
 8006356:	f108 0801 	add.w	r8, r8, #1
 800635a:	68e3      	ldr	r3, [r4, #12]
 800635c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800635e:	1a5b      	subs	r3, r3, r1
 8006360:	4543      	cmp	r3, r8
 8006362:	dcf0      	bgt.n	8006346 <_printf_float+0x442>
 8006364:	e6fa      	b.n	800615c <_printf_float+0x258>
 8006366:	f04f 0800 	mov.w	r8, #0
 800636a:	f104 0919 	add.w	r9, r4, #25
 800636e:	e7f4      	b.n	800635a <_printf_float+0x456>

08006370 <_printf_common>:
 8006370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006374:	4616      	mov	r6, r2
 8006376:	4699      	mov	r9, r3
 8006378:	688a      	ldr	r2, [r1, #8]
 800637a:	690b      	ldr	r3, [r1, #16]
 800637c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006380:	4293      	cmp	r3, r2
 8006382:	bfb8      	it	lt
 8006384:	4613      	movlt	r3, r2
 8006386:	6033      	str	r3, [r6, #0]
 8006388:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800638c:	4607      	mov	r7, r0
 800638e:	460c      	mov	r4, r1
 8006390:	b10a      	cbz	r2, 8006396 <_printf_common+0x26>
 8006392:	3301      	adds	r3, #1
 8006394:	6033      	str	r3, [r6, #0]
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	0699      	lsls	r1, r3, #26
 800639a:	bf42      	ittt	mi
 800639c:	6833      	ldrmi	r3, [r6, #0]
 800639e:	3302      	addmi	r3, #2
 80063a0:	6033      	strmi	r3, [r6, #0]
 80063a2:	6825      	ldr	r5, [r4, #0]
 80063a4:	f015 0506 	ands.w	r5, r5, #6
 80063a8:	d106      	bne.n	80063b8 <_printf_common+0x48>
 80063aa:	f104 0a19 	add.w	sl, r4, #25
 80063ae:	68e3      	ldr	r3, [r4, #12]
 80063b0:	6832      	ldr	r2, [r6, #0]
 80063b2:	1a9b      	subs	r3, r3, r2
 80063b4:	42ab      	cmp	r3, r5
 80063b6:	dc26      	bgt.n	8006406 <_printf_common+0x96>
 80063b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063bc:	1e13      	subs	r3, r2, #0
 80063be:	6822      	ldr	r2, [r4, #0]
 80063c0:	bf18      	it	ne
 80063c2:	2301      	movne	r3, #1
 80063c4:	0692      	lsls	r2, r2, #26
 80063c6:	d42b      	bmi.n	8006420 <_printf_common+0xb0>
 80063c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063cc:	4649      	mov	r1, r9
 80063ce:	4638      	mov	r0, r7
 80063d0:	47c0      	blx	r8
 80063d2:	3001      	adds	r0, #1
 80063d4:	d01e      	beq.n	8006414 <_printf_common+0xa4>
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	68e5      	ldr	r5, [r4, #12]
 80063da:	6832      	ldr	r2, [r6, #0]
 80063dc:	f003 0306 	and.w	r3, r3, #6
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	bf08      	it	eq
 80063e4:	1aad      	subeq	r5, r5, r2
 80063e6:	68a3      	ldr	r3, [r4, #8]
 80063e8:	6922      	ldr	r2, [r4, #16]
 80063ea:	bf0c      	ite	eq
 80063ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063f0:	2500      	movne	r5, #0
 80063f2:	4293      	cmp	r3, r2
 80063f4:	bfc4      	itt	gt
 80063f6:	1a9b      	subgt	r3, r3, r2
 80063f8:	18ed      	addgt	r5, r5, r3
 80063fa:	2600      	movs	r6, #0
 80063fc:	341a      	adds	r4, #26
 80063fe:	42b5      	cmp	r5, r6
 8006400:	d11a      	bne.n	8006438 <_printf_common+0xc8>
 8006402:	2000      	movs	r0, #0
 8006404:	e008      	b.n	8006418 <_printf_common+0xa8>
 8006406:	2301      	movs	r3, #1
 8006408:	4652      	mov	r2, sl
 800640a:	4649      	mov	r1, r9
 800640c:	4638      	mov	r0, r7
 800640e:	47c0      	blx	r8
 8006410:	3001      	adds	r0, #1
 8006412:	d103      	bne.n	800641c <_printf_common+0xac>
 8006414:	f04f 30ff 	mov.w	r0, #4294967295
 8006418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800641c:	3501      	adds	r5, #1
 800641e:	e7c6      	b.n	80063ae <_printf_common+0x3e>
 8006420:	18e1      	adds	r1, r4, r3
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	2030      	movs	r0, #48	; 0x30
 8006426:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800642a:	4422      	add	r2, r4
 800642c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006430:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006434:	3302      	adds	r3, #2
 8006436:	e7c7      	b.n	80063c8 <_printf_common+0x58>
 8006438:	2301      	movs	r3, #1
 800643a:	4622      	mov	r2, r4
 800643c:	4649      	mov	r1, r9
 800643e:	4638      	mov	r0, r7
 8006440:	47c0      	blx	r8
 8006442:	3001      	adds	r0, #1
 8006444:	d0e6      	beq.n	8006414 <_printf_common+0xa4>
 8006446:	3601      	adds	r6, #1
 8006448:	e7d9      	b.n	80063fe <_printf_common+0x8e>
	...

0800644c <_printf_i>:
 800644c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006450:	7e0f      	ldrb	r7, [r1, #24]
 8006452:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006454:	2f78      	cmp	r7, #120	; 0x78
 8006456:	4691      	mov	r9, r2
 8006458:	4680      	mov	r8, r0
 800645a:	460c      	mov	r4, r1
 800645c:	469a      	mov	sl, r3
 800645e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006462:	d807      	bhi.n	8006474 <_printf_i+0x28>
 8006464:	2f62      	cmp	r7, #98	; 0x62
 8006466:	d80a      	bhi.n	800647e <_printf_i+0x32>
 8006468:	2f00      	cmp	r7, #0
 800646a:	f000 80d8 	beq.w	800661e <_printf_i+0x1d2>
 800646e:	2f58      	cmp	r7, #88	; 0x58
 8006470:	f000 80a3 	beq.w	80065ba <_printf_i+0x16e>
 8006474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800647c:	e03a      	b.n	80064f4 <_printf_i+0xa8>
 800647e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006482:	2b15      	cmp	r3, #21
 8006484:	d8f6      	bhi.n	8006474 <_printf_i+0x28>
 8006486:	a101      	add	r1, pc, #4	; (adr r1, 800648c <_printf_i+0x40>)
 8006488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800648c:	080064e5 	.word	0x080064e5
 8006490:	080064f9 	.word	0x080064f9
 8006494:	08006475 	.word	0x08006475
 8006498:	08006475 	.word	0x08006475
 800649c:	08006475 	.word	0x08006475
 80064a0:	08006475 	.word	0x08006475
 80064a4:	080064f9 	.word	0x080064f9
 80064a8:	08006475 	.word	0x08006475
 80064ac:	08006475 	.word	0x08006475
 80064b0:	08006475 	.word	0x08006475
 80064b4:	08006475 	.word	0x08006475
 80064b8:	08006605 	.word	0x08006605
 80064bc:	08006529 	.word	0x08006529
 80064c0:	080065e7 	.word	0x080065e7
 80064c4:	08006475 	.word	0x08006475
 80064c8:	08006475 	.word	0x08006475
 80064cc:	08006627 	.word	0x08006627
 80064d0:	08006475 	.word	0x08006475
 80064d4:	08006529 	.word	0x08006529
 80064d8:	08006475 	.word	0x08006475
 80064dc:	08006475 	.word	0x08006475
 80064e0:	080065ef 	.word	0x080065ef
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	1d1a      	adds	r2, r3, #4
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	602a      	str	r2, [r5, #0]
 80064ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0a3      	b.n	8006640 <_printf_i+0x1f4>
 80064f8:	6820      	ldr	r0, [r4, #0]
 80064fa:	6829      	ldr	r1, [r5, #0]
 80064fc:	0606      	lsls	r6, r0, #24
 80064fe:	f101 0304 	add.w	r3, r1, #4
 8006502:	d50a      	bpl.n	800651a <_printf_i+0xce>
 8006504:	680e      	ldr	r6, [r1, #0]
 8006506:	602b      	str	r3, [r5, #0]
 8006508:	2e00      	cmp	r6, #0
 800650a:	da03      	bge.n	8006514 <_printf_i+0xc8>
 800650c:	232d      	movs	r3, #45	; 0x2d
 800650e:	4276      	negs	r6, r6
 8006510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006514:	485e      	ldr	r0, [pc, #376]	; (8006690 <_printf_i+0x244>)
 8006516:	230a      	movs	r3, #10
 8006518:	e019      	b.n	800654e <_printf_i+0x102>
 800651a:	680e      	ldr	r6, [r1, #0]
 800651c:	602b      	str	r3, [r5, #0]
 800651e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006522:	bf18      	it	ne
 8006524:	b236      	sxthne	r6, r6
 8006526:	e7ef      	b.n	8006508 <_printf_i+0xbc>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	6820      	ldr	r0, [r4, #0]
 800652c:	1d19      	adds	r1, r3, #4
 800652e:	6029      	str	r1, [r5, #0]
 8006530:	0601      	lsls	r1, r0, #24
 8006532:	d501      	bpl.n	8006538 <_printf_i+0xec>
 8006534:	681e      	ldr	r6, [r3, #0]
 8006536:	e002      	b.n	800653e <_printf_i+0xf2>
 8006538:	0646      	lsls	r6, r0, #25
 800653a:	d5fb      	bpl.n	8006534 <_printf_i+0xe8>
 800653c:	881e      	ldrh	r6, [r3, #0]
 800653e:	4854      	ldr	r0, [pc, #336]	; (8006690 <_printf_i+0x244>)
 8006540:	2f6f      	cmp	r7, #111	; 0x6f
 8006542:	bf0c      	ite	eq
 8006544:	2308      	moveq	r3, #8
 8006546:	230a      	movne	r3, #10
 8006548:	2100      	movs	r1, #0
 800654a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800654e:	6865      	ldr	r5, [r4, #4]
 8006550:	60a5      	str	r5, [r4, #8]
 8006552:	2d00      	cmp	r5, #0
 8006554:	bfa2      	ittt	ge
 8006556:	6821      	ldrge	r1, [r4, #0]
 8006558:	f021 0104 	bicge.w	r1, r1, #4
 800655c:	6021      	strge	r1, [r4, #0]
 800655e:	b90e      	cbnz	r6, 8006564 <_printf_i+0x118>
 8006560:	2d00      	cmp	r5, #0
 8006562:	d04d      	beq.n	8006600 <_printf_i+0x1b4>
 8006564:	4615      	mov	r5, r2
 8006566:	fbb6 f1f3 	udiv	r1, r6, r3
 800656a:	fb03 6711 	mls	r7, r3, r1, r6
 800656e:	5dc7      	ldrb	r7, [r0, r7]
 8006570:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006574:	4637      	mov	r7, r6
 8006576:	42bb      	cmp	r3, r7
 8006578:	460e      	mov	r6, r1
 800657a:	d9f4      	bls.n	8006566 <_printf_i+0x11a>
 800657c:	2b08      	cmp	r3, #8
 800657e:	d10b      	bne.n	8006598 <_printf_i+0x14c>
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	07de      	lsls	r6, r3, #31
 8006584:	d508      	bpl.n	8006598 <_printf_i+0x14c>
 8006586:	6923      	ldr	r3, [r4, #16]
 8006588:	6861      	ldr	r1, [r4, #4]
 800658a:	4299      	cmp	r1, r3
 800658c:	bfde      	ittt	le
 800658e:	2330      	movle	r3, #48	; 0x30
 8006590:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006594:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006598:	1b52      	subs	r2, r2, r5
 800659a:	6122      	str	r2, [r4, #16]
 800659c:	f8cd a000 	str.w	sl, [sp]
 80065a0:	464b      	mov	r3, r9
 80065a2:	aa03      	add	r2, sp, #12
 80065a4:	4621      	mov	r1, r4
 80065a6:	4640      	mov	r0, r8
 80065a8:	f7ff fee2 	bl	8006370 <_printf_common>
 80065ac:	3001      	adds	r0, #1
 80065ae:	d14c      	bne.n	800664a <_printf_i+0x1fe>
 80065b0:	f04f 30ff 	mov.w	r0, #4294967295
 80065b4:	b004      	add	sp, #16
 80065b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ba:	4835      	ldr	r0, [pc, #212]	; (8006690 <_printf_i+0x244>)
 80065bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065c0:	6829      	ldr	r1, [r5, #0]
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80065c8:	6029      	str	r1, [r5, #0]
 80065ca:	061d      	lsls	r5, r3, #24
 80065cc:	d514      	bpl.n	80065f8 <_printf_i+0x1ac>
 80065ce:	07df      	lsls	r7, r3, #31
 80065d0:	bf44      	itt	mi
 80065d2:	f043 0320 	orrmi.w	r3, r3, #32
 80065d6:	6023      	strmi	r3, [r4, #0]
 80065d8:	b91e      	cbnz	r6, 80065e2 <_printf_i+0x196>
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	f023 0320 	bic.w	r3, r3, #32
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	2310      	movs	r3, #16
 80065e4:	e7b0      	b.n	8006548 <_printf_i+0xfc>
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	f043 0320 	orr.w	r3, r3, #32
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	2378      	movs	r3, #120	; 0x78
 80065f0:	4828      	ldr	r0, [pc, #160]	; (8006694 <_printf_i+0x248>)
 80065f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065f6:	e7e3      	b.n	80065c0 <_printf_i+0x174>
 80065f8:	0659      	lsls	r1, r3, #25
 80065fa:	bf48      	it	mi
 80065fc:	b2b6      	uxthmi	r6, r6
 80065fe:	e7e6      	b.n	80065ce <_printf_i+0x182>
 8006600:	4615      	mov	r5, r2
 8006602:	e7bb      	b.n	800657c <_printf_i+0x130>
 8006604:	682b      	ldr	r3, [r5, #0]
 8006606:	6826      	ldr	r6, [r4, #0]
 8006608:	6961      	ldr	r1, [r4, #20]
 800660a:	1d18      	adds	r0, r3, #4
 800660c:	6028      	str	r0, [r5, #0]
 800660e:	0635      	lsls	r5, r6, #24
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	d501      	bpl.n	8006618 <_printf_i+0x1cc>
 8006614:	6019      	str	r1, [r3, #0]
 8006616:	e002      	b.n	800661e <_printf_i+0x1d2>
 8006618:	0670      	lsls	r0, r6, #25
 800661a:	d5fb      	bpl.n	8006614 <_printf_i+0x1c8>
 800661c:	8019      	strh	r1, [r3, #0]
 800661e:	2300      	movs	r3, #0
 8006620:	6123      	str	r3, [r4, #16]
 8006622:	4615      	mov	r5, r2
 8006624:	e7ba      	b.n	800659c <_printf_i+0x150>
 8006626:	682b      	ldr	r3, [r5, #0]
 8006628:	1d1a      	adds	r2, r3, #4
 800662a:	602a      	str	r2, [r5, #0]
 800662c:	681d      	ldr	r5, [r3, #0]
 800662e:	6862      	ldr	r2, [r4, #4]
 8006630:	2100      	movs	r1, #0
 8006632:	4628      	mov	r0, r5
 8006634:	f7f9 fddc 	bl	80001f0 <memchr>
 8006638:	b108      	cbz	r0, 800663e <_printf_i+0x1f2>
 800663a:	1b40      	subs	r0, r0, r5
 800663c:	6060      	str	r0, [r4, #4]
 800663e:	6863      	ldr	r3, [r4, #4]
 8006640:	6123      	str	r3, [r4, #16]
 8006642:	2300      	movs	r3, #0
 8006644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006648:	e7a8      	b.n	800659c <_printf_i+0x150>
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	462a      	mov	r2, r5
 800664e:	4649      	mov	r1, r9
 8006650:	4640      	mov	r0, r8
 8006652:	47d0      	blx	sl
 8006654:	3001      	adds	r0, #1
 8006656:	d0ab      	beq.n	80065b0 <_printf_i+0x164>
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	079b      	lsls	r3, r3, #30
 800665c:	d413      	bmi.n	8006686 <_printf_i+0x23a>
 800665e:	68e0      	ldr	r0, [r4, #12]
 8006660:	9b03      	ldr	r3, [sp, #12]
 8006662:	4298      	cmp	r0, r3
 8006664:	bfb8      	it	lt
 8006666:	4618      	movlt	r0, r3
 8006668:	e7a4      	b.n	80065b4 <_printf_i+0x168>
 800666a:	2301      	movs	r3, #1
 800666c:	4632      	mov	r2, r6
 800666e:	4649      	mov	r1, r9
 8006670:	4640      	mov	r0, r8
 8006672:	47d0      	blx	sl
 8006674:	3001      	adds	r0, #1
 8006676:	d09b      	beq.n	80065b0 <_printf_i+0x164>
 8006678:	3501      	adds	r5, #1
 800667a:	68e3      	ldr	r3, [r4, #12]
 800667c:	9903      	ldr	r1, [sp, #12]
 800667e:	1a5b      	subs	r3, r3, r1
 8006680:	42ab      	cmp	r3, r5
 8006682:	dcf2      	bgt.n	800666a <_printf_i+0x21e>
 8006684:	e7eb      	b.n	800665e <_printf_i+0x212>
 8006686:	2500      	movs	r5, #0
 8006688:	f104 0619 	add.w	r6, r4, #25
 800668c:	e7f5      	b.n	800667a <_printf_i+0x22e>
 800668e:	bf00      	nop
 8006690:	0800ab02 	.word	0x0800ab02
 8006694:	0800ab13 	.word	0x0800ab13

08006698 <_sbrk_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	4d06      	ldr	r5, [pc, #24]	; (80066b4 <_sbrk_r+0x1c>)
 800669c:	2300      	movs	r3, #0
 800669e:	4604      	mov	r4, r0
 80066a0:	4608      	mov	r0, r1
 80066a2:	602b      	str	r3, [r5, #0]
 80066a4:	f004 f9a2 	bl	800a9ec <_sbrk>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d102      	bne.n	80066b2 <_sbrk_r+0x1a>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	b103      	cbz	r3, 80066b2 <_sbrk_r+0x1a>
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	20000524 	.word	0x20000524

080066b8 <__sread>:
 80066b8:	b510      	push	{r4, lr}
 80066ba:	460c      	mov	r4, r1
 80066bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c0:	f001 faa6 	bl	8007c10 <_read_r>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	bfab      	itete	ge
 80066c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066ca:	89a3      	ldrhlt	r3, [r4, #12]
 80066cc:	181b      	addge	r3, r3, r0
 80066ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066d2:	bfac      	ite	ge
 80066d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80066d6:	81a3      	strhlt	r3, [r4, #12]
 80066d8:	bd10      	pop	{r4, pc}

080066da <__swrite>:
 80066da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066de:	461f      	mov	r7, r3
 80066e0:	898b      	ldrh	r3, [r1, #12]
 80066e2:	05db      	lsls	r3, r3, #23
 80066e4:	4605      	mov	r5, r0
 80066e6:	460c      	mov	r4, r1
 80066e8:	4616      	mov	r6, r2
 80066ea:	d505      	bpl.n	80066f8 <__swrite+0x1e>
 80066ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f0:	2302      	movs	r3, #2
 80066f2:	2200      	movs	r2, #0
 80066f4:	f000 fec6 	bl	8007484 <_lseek_r>
 80066f8:	89a3      	ldrh	r3, [r4, #12]
 80066fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006702:	81a3      	strh	r3, [r4, #12]
 8006704:	4632      	mov	r2, r6
 8006706:	463b      	mov	r3, r7
 8006708:	4628      	mov	r0, r5
 800670a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800670e:	f000 b817 	b.w	8006740 <_write_r>

08006712 <__sseek>:
 8006712:	b510      	push	{r4, lr}
 8006714:	460c      	mov	r4, r1
 8006716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800671a:	f000 feb3 	bl	8007484 <_lseek_r>
 800671e:	1c43      	adds	r3, r0, #1
 8006720:	89a3      	ldrh	r3, [r4, #12]
 8006722:	bf15      	itete	ne
 8006724:	6560      	strne	r0, [r4, #84]	; 0x54
 8006726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800672a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800672e:	81a3      	strheq	r3, [r4, #12]
 8006730:	bf18      	it	ne
 8006732:	81a3      	strhne	r3, [r4, #12]
 8006734:	bd10      	pop	{r4, pc}

08006736 <__sclose>:
 8006736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800673a:	f000 b813 	b.w	8006764 <_close_r>
	...

08006740 <_write_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4d07      	ldr	r5, [pc, #28]	; (8006760 <_write_r+0x20>)
 8006744:	4604      	mov	r4, r0
 8006746:	4608      	mov	r0, r1
 8006748:	4611      	mov	r1, r2
 800674a:	2200      	movs	r2, #0
 800674c:	602a      	str	r2, [r5, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	f7fb f975 	bl	8001a3e <_write>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d102      	bne.n	800675e <_write_r+0x1e>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	b103      	cbz	r3, 800675e <_write_r+0x1e>
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	bd38      	pop	{r3, r4, r5, pc}
 8006760:	20000524 	.word	0x20000524

08006764 <_close_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4d06      	ldr	r5, [pc, #24]	; (8006780 <_close_r+0x1c>)
 8006768:	2300      	movs	r3, #0
 800676a:	4604      	mov	r4, r0
 800676c:	4608      	mov	r0, r1
 800676e:	602b      	str	r3, [r5, #0]
 8006770:	f7fb f981 	bl	8001a76 <_close>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d102      	bne.n	800677e <_close_r+0x1a>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	b103      	cbz	r3, 800677e <_close_r+0x1a>
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	bd38      	pop	{r3, r4, r5, pc}
 8006780:	20000524 	.word	0x20000524

08006784 <quorem>:
 8006784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006788:	6903      	ldr	r3, [r0, #16]
 800678a:	690c      	ldr	r4, [r1, #16]
 800678c:	42a3      	cmp	r3, r4
 800678e:	4607      	mov	r7, r0
 8006790:	f2c0 8081 	blt.w	8006896 <quorem+0x112>
 8006794:	3c01      	subs	r4, #1
 8006796:	f101 0814 	add.w	r8, r1, #20
 800679a:	f100 0514 	add.w	r5, r0, #20
 800679e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067ac:	3301      	adds	r3, #1
 80067ae:	429a      	cmp	r2, r3
 80067b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80067b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80067bc:	d331      	bcc.n	8006822 <quorem+0x9e>
 80067be:	f04f 0e00 	mov.w	lr, #0
 80067c2:	4640      	mov	r0, r8
 80067c4:	46ac      	mov	ip, r5
 80067c6:	46f2      	mov	sl, lr
 80067c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80067cc:	b293      	uxth	r3, r2
 80067ce:	fb06 e303 	mla	r3, r6, r3, lr
 80067d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	ebaa 0303 	sub.w	r3, sl, r3
 80067dc:	f8dc a000 	ldr.w	sl, [ip]
 80067e0:	0c12      	lsrs	r2, r2, #16
 80067e2:	fa13 f38a 	uxtah	r3, r3, sl
 80067e6:	fb06 e202 	mla	r2, r6, r2, lr
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	9b00      	ldr	r3, [sp, #0]
 80067ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067f2:	b292      	uxth	r2, r2
 80067f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80067f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8006800:	4581      	cmp	r9, r0
 8006802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006806:	f84c 3b04 	str.w	r3, [ip], #4
 800680a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800680e:	d2db      	bcs.n	80067c8 <quorem+0x44>
 8006810:	f855 300b 	ldr.w	r3, [r5, fp]
 8006814:	b92b      	cbnz	r3, 8006822 <quorem+0x9e>
 8006816:	9b01      	ldr	r3, [sp, #4]
 8006818:	3b04      	subs	r3, #4
 800681a:	429d      	cmp	r5, r3
 800681c:	461a      	mov	r2, r3
 800681e:	d32e      	bcc.n	800687e <quorem+0xfa>
 8006820:	613c      	str	r4, [r7, #16]
 8006822:	4638      	mov	r0, r7
 8006824:	f001 f8dc 	bl	80079e0 <__mcmp>
 8006828:	2800      	cmp	r0, #0
 800682a:	db24      	blt.n	8006876 <quorem+0xf2>
 800682c:	3601      	adds	r6, #1
 800682e:	4628      	mov	r0, r5
 8006830:	f04f 0c00 	mov.w	ip, #0
 8006834:	f858 2b04 	ldr.w	r2, [r8], #4
 8006838:	f8d0 e000 	ldr.w	lr, [r0]
 800683c:	b293      	uxth	r3, r2
 800683e:	ebac 0303 	sub.w	r3, ip, r3
 8006842:	0c12      	lsrs	r2, r2, #16
 8006844:	fa13 f38e 	uxtah	r3, r3, lr
 8006848:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800684c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006850:	b29b      	uxth	r3, r3
 8006852:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006856:	45c1      	cmp	r9, r8
 8006858:	f840 3b04 	str.w	r3, [r0], #4
 800685c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006860:	d2e8      	bcs.n	8006834 <quorem+0xb0>
 8006862:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006866:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800686a:	b922      	cbnz	r2, 8006876 <quorem+0xf2>
 800686c:	3b04      	subs	r3, #4
 800686e:	429d      	cmp	r5, r3
 8006870:	461a      	mov	r2, r3
 8006872:	d30a      	bcc.n	800688a <quorem+0x106>
 8006874:	613c      	str	r4, [r7, #16]
 8006876:	4630      	mov	r0, r6
 8006878:	b003      	add	sp, #12
 800687a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800687e:	6812      	ldr	r2, [r2, #0]
 8006880:	3b04      	subs	r3, #4
 8006882:	2a00      	cmp	r2, #0
 8006884:	d1cc      	bne.n	8006820 <quorem+0x9c>
 8006886:	3c01      	subs	r4, #1
 8006888:	e7c7      	b.n	800681a <quorem+0x96>
 800688a:	6812      	ldr	r2, [r2, #0]
 800688c:	3b04      	subs	r3, #4
 800688e:	2a00      	cmp	r2, #0
 8006890:	d1f0      	bne.n	8006874 <quorem+0xf0>
 8006892:	3c01      	subs	r4, #1
 8006894:	e7eb      	b.n	800686e <quorem+0xea>
 8006896:	2000      	movs	r0, #0
 8006898:	e7ee      	b.n	8006878 <quorem+0xf4>
 800689a:	0000      	movs	r0, r0
 800689c:	0000      	movs	r0, r0
	...

080068a0 <_dtoa_r>:
 80068a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a4:	ed2d 8b04 	vpush	{d8-d9}
 80068a8:	ec57 6b10 	vmov	r6, r7, d0
 80068ac:	b093      	sub	sp, #76	; 0x4c
 80068ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80068b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80068b4:	9106      	str	r1, [sp, #24]
 80068b6:	ee10 aa10 	vmov	sl, s0
 80068ba:	4604      	mov	r4, r0
 80068bc:	9209      	str	r2, [sp, #36]	; 0x24
 80068be:	930c      	str	r3, [sp, #48]	; 0x30
 80068c0:	46bb      	mov	fp, r7
 80068c2:	b975      	cbnz	r5, 80068e2 <_dtoa_r+0x42>
 80068c4:	2010      	movs	r0, #16
 80068c6:	f7ff f98d 	bl	8005be4 <malloc>
 80068ca:	4602      	mov	r2, r0
 80068cc:	6260      	str	r0, [r4, #36]	; 0x24
 80068ce:	b920      	cbnz	r0, 80068da <_dtoa_r+0x3a>
 80068d0:	4ba7      	ldr	r3, [pc, #668]	; (8006b70 <_dtoa_r+0x2d0>)
 80068d2:	21ea      	movs	r1, #234	; 0xea
 80068d4:	48a7      	ldr	r0, [pc, #668]	; (8006b74 <_dtoa_r+0x2d4>)
 80068d6:	f001 f9ad 	bl	8007c34 <__assert_func>
 80068da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80068de:	6005      	str	r5, [r0, #0]
 80068e0:	60c5      	str	r5, [r0, #12]
 80068e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068e4:	6819      	ldr	r1, [r3, #0]
 80068e6:	b151      	cbz	r1, 80068fe <_dtoa_r+0x5e>
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	604a      	str	r2, [r1, #4]
 80068ec:	2301      	movs	r3, #1
 80068ee:	4093      	lsls	r3, r2
 80068f0:	608b      	str	r3, [r1, #8]
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 fe32 	bl	800755c <_Bfree>
 80068f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	1e3b      	subs	r3, r7, #0
 8006900:	bfaa      	itet	ge
 8006902:	2300      	movge	r3, #0
 8006904:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006908:	f8c8 3000 	strge.w	r3, [r8]
 800690c:	4b9a      	ldr	r3, [pc, #616]	; (8006b78 <_dtoa_r+0x2d8>)
 800690e:	bfbc      	itt	lt
 8006910:	2201      	movlt	r2, #1
 8006912:	f8c8 2000 	strlt.w	r2, [r8]
 8006916:	ea33 030b 	bics.w	r3, r3, fp
 800691a:	d11b      	bne.n	8006954 <_dtoa_r+0xb4>
 800691c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800691e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006928:	4333      	orrs	r3, r6
 800692a:	f000 8592 	beq.w	8007452 <_dtoa_r+0xbb2>
 800692e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006930:	b963      	cbnz	r3, 800694c <_dtoa_r+0xac>
 8006932:	4b92      	ldr	r3, [pc, #584]	; (8006b7c <_dtoa_r+0x2dc>)
 8006934:	e022      	b.n	800697c <_dtoa_r+0xdc>
 8006936:	4b92      	ldr	r3, [pc, #584]	; (8006b80 <_dtoa_r+0x2e0>)
 8006938:	9301      	str	r3, [sp, #4]
 800693a:	3308      	adds	r3, #8
 800693c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	9801      	ldr	r0, [sp, #4]
 8006942:	b013      	add	sp, #76	; 0x4c
 8006944:	ecbd 8b04 	vpop	{d8-d9}
 8006948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800694c:	4b8b      	ldr	r3, [pc, #556]	; (8006b7c <_dtoa_r+0x2dc>)
 800694e:	9301      	str	r3, [sp, #4]
 8006950:	3303      	adds	r3, #3
 8006952:	e7f3      	b.n	800693c <_dtoa_r+0x9c>
 8006954:	2200      	movs	r2, #0
 8006956:	2300      	movs	r3, #0
 8006958:	4650      	mov	r0, sl
 800695a:	4659      	mov	r1, fp
 800695c:	f7fa f8bc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006960:	ec4b ab19 	vmov	d9, sl, fp
 8006964:	4680      	mov	r8, r0
 8006966:	b158      	cbz	r0, 8006980 <_dtoa_r+0xe0>
 8006968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800696a:	2301      	movs	r3, #1
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 856b 	beq.w	800744c <_dtoa_r+0xbac>
 8006976:	4883      	ldr	r0, [pc, #524]	; (8006b84 <_dtoa_r+0x2e4>)
 8006978:	6018      	str	r0, [r3, #0]
 800697a:	1e43      	subs	r3, r0, #1
 800697c:	9301      	str	r3, [sp, #4]
 800697e:	e7df      	b.n	8006940 <_dtoa_r+0xa0>
 8006980:	ec4b ab10 	vmov	d0, sl, fp
 8006984:	aa10      	add	r2, sp, #64	; 0x40
 8006986:	a911      	add	r1, sp, #68	; 0x44
 8006988:	4620      	mov	r0, r4
 800698a:	f001 f8cf 	bl	8007b2c <__d2b>
 800698e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006992:	ee08 0a10 	vmov	s16, r0
 8006996:	2d00      	cmp	r5, #0
 8006998:	f000 8084 	beq.w	8006aa4 <_dtoa_r+0x204>
 800699c:	ee19 3a90 	vmov	r3, s19
 80069a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80069a8:	4656      	mov	r6, sl
 80069aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80069ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80069b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80069b6:	4b74      	ldr	r3, [pc, #464]	; (8006b88 <_dtoa_r+0x2e8>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	4630      	mov	r0, r6
 80069bc:	4639      	mov	r1, r7
 80069be:	f7f9 fc6b 	bl	8000298 <__aeabi_dsub>
 80069c2:	a365      	add	r3, pc, #404	; (adr r3, 8006b58 <_dtoa_r+0x2b8>)
 80069c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c8:	f7f9 fe1e 	bl	8000608 <__aeabi_dmul>
 80069cc:	a364      	add	r3, pc, #400	; (adr r3, 8006b60 <_dtoa_r+0x2c0>)
 80069ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d2:	f7f9 fc63 	bl	800029c <__adddf3>
 80069d6:	4606      	mov	r6, r0
 80069d8:	4628      	mov	r0, r5
 80069da:	460f      	mov	r7, r1
 80069dc:	f7f9 fdaa 	bl	8000534 <__aeabi_i2d>
 80069e0:	a361      	add	r3, pc, #388	; (adr r3, 8006b68 <_dtoa_r+0x2c8>)
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	f7f9 fe0f 	bl	8000608 <__aeabi_dmul>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	4630      	mov	r0, r6
 80069f0:	4639      	mov	r1, r7
 80069f2:	f7f9 fc53 	bl	800029c <__adddf3>
 80069f6:	4606      	mov	r6, r0
 80069f8:	460f      	mov	r7, r1
 80069fa:	f7fa f8b5 	bl	8000b68 <__aeabi_d2iz>
 80069fe:	2200      	movs	r2, #0
 8006a00:	9000      	str	r0, [sp, #0]
 8006a02:	2300      	movs	r3, #0
 8006a04:	4630      	mov	r0, r6
 8006a06:	4639      	mov	r1, r7
 8006a08:	f7fa f870 	bl	8000aec <__aeabi_dcmplt>
 8006a0c:	b150      	cbz	r0, 8006a24 <_dtoa_r+0x184>
 8006a0e:	9800      	ldr	r0, [sp, #0]
 8006a10:	f7f9 fd90 	bl	8000534 <__aeabi_i2d>
 8006a14:	4632      	mov	r2, r6
 8006a16:	463b      	mov	r3, r7
 8006a18:	f7fa f85e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a1c:	b910      	cbnz	r0, 8006a24 <_dtoa_r+0x184>
 8006a1e:	9b00      	ldr	r3, [sp, #0]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	9b00      	ldr	r3, [sp, #0]
 8006a26:	2b16      	cmp	r3, #22
 8006a28:	d85a      	bhi.n	8006ae0 <_dtoa_r+0x240>
 8006a2a:	9a00      	ldr	r2, [sp, #0]
 8006a2c:	4b57      	ldr	r3, [pc, #348]	; (8006b8c <_dtoa_r+0x2ec>)
 8006a2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	ec51 0b19 	vmov	r0, r1, d9
 8006a3a:	f7fa f857 	bl	8000aec <__aeabi_dcmplt>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d050      	beq.n	8006ae4 <_dtoa_r+0x244>
 8006a42:	9b00      	ldr	r3, [sp, #0]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	2300      	movs	r3, #0
 8006a4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a4e:	1b5d      	subs	r5, r3, r5
 8006a50:	1e6b      	subs	r3, r5, #1
 8006a52:	9305      	str	r3, [sp, #20]
 8006a54:	bf45      	ittet	mi
 8006a56:	f1c5 0301 	rsbmi	r3, r5, #1
 8006a5a:	9304      	strmi	r3, [sp, #16]
 8006a5c:	2300      	movpl	r3, #0
 8006a5e:	2300      	movmi	r3, #0
 8006a60:	bf4c      	ite	mi
 8006a62:	9305      	strmi	r3, [sp, #20]
 8006a64:	9304      	strpl	r3, [sp, #16]
 8006a66:	9b00      	ldr	r3, [sp, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	db3d      	blt.n	8006ae8 <_dtoa_r+0x248>
 8006a6c:	9b05      	ldr	r3, [sp, #20]
 8006a6e:	9a00      	ldr	r2, [sp, #0]
 8006a70:	920a      	str	r2, [sp, #40]	; 0x28
 8006a72:	4413      	add	r3, r2
 8006a74:	9305      	str	r3, [sp, #20]
 8006a76:	2300      	movs	r3, #0
 8006a78:	9307      	str	r3, [sp, #28]
 8006a7a:	9b06      	ldr	r3, [sp, #24]
 8006a7c:	2b09      	cmp	r3, #9
 8006a7e:	f200 8089 	bhi.w	8006b94 <_dtoa_r+0x2f4>
 8006a82:	2b05      	cmp	r3, #5
 8006a84:	bfc4      	itt	gt
 8006a86:	3b04      	subgt	r3, #4
 8006a88:	9306      	strgt	r3, [sp, #24]
 8006a8a:	9b06      	ldr	r3, [sp, #24]
 8006a8c:	f1a3 0302 	sub.w	r3, r3, #2
 8006a90:	bfcc      	ite	gt
 8006a92:	2500      	movgt	r5, #0
 8006a94:	2501      	movle	r5, #1
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	f200 8087 	bhi.w	8006baa <_dtoa_r+0x30a>
 8006a9c:	e8df f003 	tbb	[pc, r3]
 8006aa0:	59383a2d 	.word	0x59383a2d
 8006aa4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006aa8:	441d      	add	r5, r3
 8006aaa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	bfc1      	itttt	gt
 8006ab2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ab6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006aba:	fa0b f303 	lslgt.w	r3, fp, r3
 8006abe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006ac2:	bfda      	itte	le
 8006ac4:	f1c3 0320 	rsble	r3, r3, #32
 8006ac8:	fa06 f003 	lslle.w	r0, r6, r3
 8006acc:	4318      	orrgt	r0, r3
 8006ace:	f7f9 fd21 	bl	8000514 <__aeabi_ui2d>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006ada:	3d01      	subs	r5, #1
 8006adc:	930e      	str	r3, [sp, #56]	; 0x38
 8006ade:	e76a      	b.n	80069b6 <_dtoa_r+0x116>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e7b2      	b.n	8006a4a <_dtoa_r+0x1aa>
 8006ae4:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ae6:	e7b1      	b.n	8006a4c <_dtoa_r+0x1ac>
 8006ae8:	9b04      	ldr	r3, [sp, #16]
 8006aea:	9a00      	ldr	r2, [sp, #0]
 8006aec:	1a9b      	subs	r3, r3, r2
 8006aee:	9304      	str	r3, [sp, #16]
 8006af0:	4253      	negs	r3, r2
 8006af2:	9307      	str	r3, [sp, #28]
 8006af4:	2300      	movs	r3, #0
 8006af6:	930a      	str	r3, [sp, #40]	; 0x28
 8006af8:	e7bf      	b.n	8006a7a <_dtoa_r+0x1da>
 8006afa:	2300      	movs	r3, #0
 8006afc:	9308      	str	r3, [sp, #32]
 8006afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	dc55      	bgt.n	8006bb0 <_dtoa_r+0x310>
 8006b04:	2301      	movs	r3, #1
 8006b06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b0e:	e00c      	b.n	8006b2a <_dtoa_r+0x28a>
 8006b10:	2301      	movs	r3, #1
 8006b12:	e7f3      	b.n	8006afc <_dtoa_r+0x25c>
 8006b14:	2300      	movs	r3, #0
 8006b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b18:	9308      	str	r3, [sp, #32]
 8006b1a:	9b00      	ldr	r3, [sp, #0]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	9302      	str	r3, [sp, #8]
 8006b20:	3301      	adds	r3, #1
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	9303      	str	r3, [sp, #12]
 8006b26:	bfb8      	it	lt
 8006b28:	2301      	movlt	r3, #1
 8006b2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	6042      	str	r2, [r0, #4]
 8006b30:	2204      	movs	r2, #4
 8006b32:	f102 0614 	add.w	r6, r2, #20
 8006b36:	429e      	cmp	r6, r3
 8006b38:	6841      	ldr	r1, [r0, #4]
 8006b3a:	d93d      	bls.n	8006bb8 <_dtoa_r+0x318>
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 fccd 	bl	80074dc <_Balloc>
 8006b42:	9001      	str	r0, [sp, #4]
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d13b      	bne.n	8006bc0 <_dtoa_r+0x320>
 8006b48:	4b11      	ldr	r3, [pc, #68]	; (8006b90 <_dtoa_r+0x2f0>)
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b50:	e6c0      	b.n	80068d4 <_dtoa_r+0x34>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e7df      	b.n	8006b16 <_dtoa_r+0x276>
 8006b56:	bf00      	nop
 8006b58:	636f4361 	.word	0x636f4361
 8006b5c:	3fd287a7 	.word	0x3fd287a7
 8006b60:	8b60c8b3 	.word	0x8b60c8b3
 8006b64:	3fc68a28 	.word	0x3fc68a28
 8006b68:	509f79fb 	.word	0x509f79fb
 8006b6c:	3fd34413 	.word	0x3fd34413
 8006b70:	0800ab31 	.word	0x0800ab31
 8006b74:	0800ab48 	.word	0x0800ab48
 8006b78:	7ff00000 	.word	0x7ff00000
 8006b7c:	0800ab2d 	.word	0x0800ab2d
 8006b80:	0800ab24 	.word	0x0800ab24
 8006b84:	0800ab01 	.word	0x0800ab01
 8006b88:	3ff80000 	.word	0x3ff80000
 8006b8c:	0800ac38 	.word	0x0800ac38
 8006b90:	0800aba3 	.word	0x0800aba3
 8006b94:	2501      	movs	r5, #1
 8006b96:	2300      	movs	r3, #0
 8006b98:	9306      	str	r3, [sp, #24]
 8006b9a:	9508      	str	r5, [sp, #32]
 8006b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2312      	movs	r3, #18
 8006ba8:	e7b0      	b.n	8006b0c <_dtoa_r+0x26c>
 8006baa:	2301      	movs	r3, #1
 8006bac:	9308      	str	r3, [sp, #32]
 8006bae:	e7f5      	b.n	8006b9c <_dtoa_r+0x2fc>
 8006bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006bb6:	e7b8      	b.n	8006b2a <_dtoa_r+0x28a>
 8006bb8:	3101      	adds	r1, #1
 8006bba:	6041      	str	r1, [r0, #4]
 8006bbc:	0052      	lsls	r2, r2, #1
 8006bbe:	e7b8      	b.n	8006b32 <_dtoa_r+0x292>
 8006bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bc2:	9a01      	ldr	r2, [sp, #4]
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	9b03      	ldr	r3, [sp, #12]
 8006bc8:	2b0e      	cmp	r3, #14
 8006bca:	f200 809d 	bhi.w	8006d08 <_dtoa_r+0x468>
 8006bce:	2d00      	cmp	r5, #0
 8006bd0:	f000 809a 	beq.w	8006d08 <_dtoa_r+0x468>
 8006bd4:	9b00      	ldr	r3, [sp, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	dd32      	ble.n	8006c40 <_dtoa_r+0x3a0>
 8006bda:	4ab7      	ldr	r2, [pc, #732]	; (8006eb8 <_dtoa_r+0x618>)
 8006bdc:	f003 030f 	and.w	r3, r3, #15
 8006be0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006be4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006be8:	9b00      	ldr	r3, [sp, #0]
 8006bea:	05d8      	lsls	r0, r3, #23
 8006bec:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006bf0:	d516      	bpl.n	8006c20 <_dtoa_r+0x380>
 8006bf2:	4bb2      	ldr	r3, [pc, #712]	; (8006ebc <_dtoa_r+0x61c>)
 8006bf4:	ec51 0b19 	vmov	r0, r1, d9
 8006bf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bfc:	f7f9 fe2e 	bl	800085c <__aeabi_ddiv>
 8006c00:	f007 070f 	and.w	r7, r7, #15
 8006c04:	4682      	mov	sl, r0
 8006c06:	468b      	mov	fp, r1
 8006c08:	2503      	movs	r5, #3
 8006c0a:	4eac      	ldr	r6, [pc, #688]	; (8006ebc <_dtoa_r+0x61c>)
 8006c0c:	b957      	cbnz	r7, 8006c24 <_dtoa_r+0x384>
 8006c0e:	4642      	mov	r2, r8
 8006c10:	464b      	mov	r3, r9
 8006c12:	4650      	mov	r0, sl
 8006c14:	4659      	mov	r1, fp
 8006c16:	f7f9 fe21 	bl	800085c <__aeabi_ddiv>
 8006c1a:	4682      	mov	sl, r0
 8006c1c:	468b      	mov	fp, r1
 8006c1e:	e028      	b.n	8006c72 <_dtoa_r+0x3d2>
 8006c20:	2502      	movs	r5, #2
 8006c22:	e7f2      	b.n	8006c0a <_dtoa_r+0x36a>
 8006c24:	07f9      	lsls	r1, r7, #31
 8006c26:	d508      	bpl.n	8006c3a <_dtoa_r+0x39a>
 8006c28:	4640      	mov	r0, r8
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c30:	f7f9 fcea 	bl	8000608 <__aeabi_dmul>
 8006c34:	3501      	adds	r5, #1
 8006c36:	4680      	mov	r8, r0
 8006c38:	4689      	mov	r9, r1
 8006c3a:	107f      	asrs	r7, r7, #1
 8006c3c:	3608      	adds	r6, #8
 8006c3e:	e7e5      	b.n	8006c0c <_dtoa_r+0x36c>
 8006c40:	f000 809b 	beq.w	8006d7a <_dtoa_r+0x4da>
 8006c44:	9b00      	ldr	r3, [sp, #0]
 8006c46:	4f9d      	ldr	r7, [pc, #628]	; (8006ebc <_dtoa_r+0x61c>)
 8006c48:	425e      	negs	r6, r3
 8006c4a:	4b9b      	ldr	r3, [pc, #620]	; (8006eb8 <_dtoa_r+0x618>)
 8006c4c:	f006 020f 	and.w	r2, r6, #15
 8006c50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	ec51 0b19 	vmov	r0, r1, d9
 8006c5c:	f7f9 fcd4 	bl	8000608 <__aeabi_dmul>
 8006c60:	1136      	asrs	r6, r6, #4
 8006c62:	4682      	mov	sl, r0
 8006c64:	468b      	mov	fp, r1
 8006c66:	2300      	movs	r3, #0
 8006c68:	2502      	movs	r5, #2
 8006c6a:	2e00      	cmp	r6, #0
 8006c6c:	d17a      	bne.n	8006d64 <_dtoa_r+0x4c4>
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1d3      	bne.n	8006c1a <_dtoa_r+0x37a>
 8006c72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 8082 	beq.w	8006d7e <_dtoa_r+0x4de>
 8006c7a:	4b91      	ldr	r3, [pc, #580]	; (8006ec0 <_dtoa_r+0x620>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	4650      	mov	r0, sl
 8006c80:	4659      	mov	r1, fp
 8006c82:	f7f9 ff33 	bl	8000aec <__aeabi_dcmplt>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d079      	beq.n	8006d7e <_dtoa_r+0x4de>
 8006c8a:	9b03      	ldr	r3, [sp, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d076      	beq.n	8006d7e <_dtoa_r+0x4de>
 8006c90:	9b02      	ldr	r3, [sp, #8]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	dd36      	ble.n	8006d04 <_dtoa_r+0x464>
 8006c96:	9b00      	ldr	r3, [sp, #0]
 8006c98:	4650      	mov	r0, sl
 8006c9a:	4659      	mov	r1, fp
 8006c9c:	1e5f      	subs	r7, r3, #1
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	4b88      	ldr	r3, [pc, #544]	; (8006ec4 <_dtoa_r+0x624>)
 8006ca2:	f7f9 fcb1 	bl	8000608 <__aeabi_dmul>
 8006ca6:	9e02      	ldr	r6, [sp, #8]
 8006ca8:	4682      	mov	sl, r0
 8006caa:	468b      	mov	fp, r1
 8006cac:	3501      	adds	r5, #1
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f7f9 fc40 	bl	8000534 <__aeabi_i2d>
 8006cb4:	4652      	mov	r2, sl
 8006cb6:	465b      	mov	r3, fp
 8006cb8:	f7f9 fca6 	bl	8000608 <__aeabi_dmul>
 8006cbc:	4b82      	ldr	r3, [pc, #520]	; (8006ec8 <_dtoa_r+0x628>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f7f9 faec 	bl	800029c <__adddf3>
 8006cc4:	46d0      	mov	r8, sl
 8006cc6:	46d9      	mov	r9, fp
 8006cc8:	4682      	mov	sl, r0
 8006cca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006cce:	2e00      	cmp	r6, #0
 8006cd0:	d158      	bne.n	8006d84 <_dtoa_r+0x4e4>
 8006cd2:	4b7e      	ldr	r3, [pc, #504]	; (8006ecc <_dtoa_r+0x62c>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4640      	mov	r0, r8
 8006cd8:	4649      	mov	r1, r9
 8006cda:	f7f9 fadd 	bl	8000298 <__aeabi_dsub>
 8006cde:	4652      	mov	r2, sl
 8006ce0:	465b      	mov	r3, fp
 8006ce2:	4680      	mov	r8, r0
 8006ce4:	4689      	mov	r9, r1
 8006ce6:	f7f9 ff1f 	bl	8000b28 <__aeabi_dcmpgt>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	f040 8295 	bne.w	800721a <_dtoa_r+0x97a>
 8006cf0:	4652      	mov	r2, sl
 8006cf2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	f7f9 fef7 	bl	8000aec <__aeabi_dcmplt>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	f040 8289 	bne.w	8007216 <_dtoa_r+0x976>
 8006d04:	ec5b ab19 	vmov	sl, fp, d9
 8006d08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f2c0 8148 	blt.w	8006fa0 <_dtoa_r+0x700>
 8006d10:	9a00      	ldr	r2, [sp, #0]
 8006d12:	2a0e      	cmp	r2, #14
 8006d14:	f300 8144 	bgt.w	8006fa0 <_dtoa_r+0x700>
 8006d18:	4b67      	ldr	r3, [pc, #412]	; (8006eb8 <_dtoa_r+0x618>)
 8006d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f280 80d5 	bge.w	8006ed4 <_dtoa_r+0x634>
 8006d2a:	9b03      	ldr	r3, [sp, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f300 80d1 	bgt.w	8006ed4 <_dtoa_r+0x634>
 8006d32:	f040 826f 	bne.w	8007214 <_dtoa_r+0x974>
 8006d36:	4b65      	ldr	r3, [pc, #404]	; (8006ecc <_dtoa_r+0x62c>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	4649      	mov	r1, r9
 8006d3e:	f7f9 fc63 	bl	8000608 <__aeabi_dmul>
 8006d42:	4652      	mov	r2, sl
 8006d44:	465b      	mov	r3, fp
 8006d46:	f7f9 fee5 	bl	8000b14 <__aeabi_dcmpge>
 8006d4a:	9e03      	ldr	r6, [sp, #12]
 8006d4c:	4637      	mov	r7, r6
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	f040 8245 	bne.w	80071de <_dtoa_r+0x93e>
 8006d54:	9d01      	ldr	r5, [sp, #4]
 8006d56:	2331      	movs	r3, #49	; 0x31
 8006d58:	f805 3b01 	strb.w	r3, [r5], #1
 8006d5c:	9b00      	ldr	r3, [sp, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	e240      	b.n	80071e6 <_dtoa_r+0x946>
 8006d64:	07f2      	lsls	r2, r6, #31
 8006d66:	d505      	bpl.n	8006d74 <_dtoa_r+0x4d4>
 8006d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d6c:	f7f9 fc4c 	bl	8000608 <__aeabi_dmul>
 8006d70:	3501      	adds	r5, #1
 8006d72:	2301      	movs	r3, #1
 8006d74:	1076      	asrs	r6, r6, #1
 8006d76:	3708      	adds	r7, #8
 8006d78:	e777      	b.n	8006c6a <_dtoa_r+0x3ca>
 8006d7a:	2502      	movs	r5, #2
 8006d7c:	e779      	b.n	8006c72 <_dtoa_r+0x3d2>
 8006d7e:	9f00      	ldr	r7, [sp, #0]
 8006d80:	9e03      	ldr	r6, [sp, #12]
 8006d82:	e794      	b.n	8006cae <_dtoa_r+0x40e>
 8006d84:	9901      	ldr	r1, [sp, #4]
 8006d86:	4b4c      	ldr	r3, [pc, #304]	; (8006eb8 <_dtoa_r+0x618>)
 8006d88:	4431      	add	r1, r6
 8006d8a:	910d      	str	r1, [sp, #52]	; 0x34
 8006d8c:	9908      	ldr	r1, [sp, #32]
 8006d8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006d92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d96:	2900      	cmp	r1, #0
 8006d98:	d043      	beq.n	8006e22 <_dtoa_r+0x582>
 8006d9a:	494d      	ldr	r1, [pc, #308]	; (8006ed0 <_dtoa_r+0x630>)
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	f7f9 fd5d 	bl	800085c <__aeabi_ddiv>
 8006da2:	4652      	mov	r2, sl
 8006da4:	465b      	mov	r3, fp
 8006da6:	f7f9 fa77 	bl	8000298 <__aeabi_dsub>
 8006daa:	9d01      	ldr	r5, [sp, #4]
 8006dac:	4682      	mov	sl, r0
 8006dae:	468b      	mov	fp, r1
 8006db0:	4649      	mov	r1, r9
 8006db2:	4640      	mov	r0, r8
 8006db4:	f7f9 fed8 	bl	8000b68 <__aeabi_d2iz>
 8006db8:	4606      	mov	r6, r0
 8006dba:	f7f9 fbbb 	bl	8000534 <__aeabi_i2d>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	f7f9 fa67 	bl	8000298 <__aeabi_dsub>
 8006dca:	3630      	adds	r6, #48	; 0x30
 8006dcc:	f805 6b01 	strb.w	r6, [r5], #1
 8006dd0:	4652      	mov	r2, sl
 8006dd2:	465b      	mov	r3, fp
 8006dd4:	4680      	mov	r8, r0
 8006dd6:	4689      	mov	r9, r1
 8006dd8:	f7f9 fe88 	bl	8000aec <__aeabi_dcmplt>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d163      	bne.n	8006ea8 <_dtoa_r+0x608>
 8006de0:	4642      	mov	r2, r8
 8006de2:	464b      	mov	r3, r9
 8006de4:	4936      	ldr	r1, [pc, #216]	; (8006ec0 <_dtoa_r+0x620>)
 8006de6:	2000      	movs	r0, #0
 8006de8:	f7f9 fa56 	bl	8000298 <__aeabi_dsub>
 8006dec:	4652      	mov	r2, sl
 8006dee:	465b      	mov	r3, fp
 8006df0:	f7f9 fe7c 	bl	8000aec <__aeabi_dcmplt>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	f040 80b5 	bne.w	8006f64 <_dtoa_r+0x6c4>
 8006dfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dfc:	429d      	cmp	r5, r3
 8006dfe:	d081      	beq.n	8006d04 <_dtoa_r+0x464>
 8006e00:	4b30      	ldr	r3, [pc, #192]	; (8006ec4 <_dtoa_r+0x624>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	4650      	mov	r0, sl
 8006e06:	4659      	mov	r1, fp
 8006e08:	f7f9 fbfe 	bl	8000608 <__aeabi_dmul>
 8006e0c:	4b2d      	ldr	r3, [pc, #180]	; (8006ec4 <_dtoa_r+0x624>)
 8006e0e:	4682      	mov	sl, r0
 8006e10:	468b      	mov	fp, r1
 8006e12:	4640      	mov	r0, r8
 8006e14:	4649      	mov	r1, r9
 8006e16:	2200      	movs	r2, #0
 8006e18:	f7f9 fbf6 	bl	8000608 <__aeabi_dmul>
 8006e1c:	4680      	mov	r8, r0
 8006e1e:	4689      	mov	r9, r1
 8006e20:	e7c6      	b.n	8006db0 <_dtoa_r+0x510>
 8006e22:	4650      	mov	r0, sl
 8006e24:	4659      	mov	r1, fp
 8006e26:	f7f9 fbef 	bl	8000608 <__aeabi_dmul>
 8006e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e2c:	9d01      	ldr	r5, [sp, #4]
 8006e2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e30:	4682      	mov	sl, r0
 8006e32:	468b      	mov	fp, r1
 8006e34:	4649      	mov	r1, r9
 8006e36:	4640      	mov	r0, r8
 8006e38:	f7f9 fe96 	bl	8000b68 <__aeabi_d2iz>
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	f7f9 fb79 	bl	8000534 <__aeabi_i2d>
 8006e42:	3630      	adds	r6, #48	; 0x30
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4640      	mov	r0, r8
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	f7f9 fa24 	bl	8000298 <__aeabi_dsub>
 8006e50:	f805 6b01 	strb.w	r6, [r5], #1
 8006e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e56:	429d      	cmp	r5, r3
 8006e58:	4680      	mov	r8, r0
 8006e5a:	4689      	mov	r9, r1
 8006e5c:	f04f 0200 	mov.w	r2, #0
 8006e60:	d124      	bne.n	8006eac <_dtoa_r+0x60c>
 8006e62:	4b1b      	ldr	r3, [pc, #108]	; (8006ed0 <_dtoa_r+0x630>)
 8006e64:	4650      	mov	r0, sl
 8006e66:	4659      	mov	r1, fp
 8006e68:	f7f9 fa18 	bl	800029c <__adddf3>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4640      	mov	r0, r8
 8006e72:	4649      	mov	r1, r9
 8006e74:	f7f9 fe58 	bl	8000b28 <__aeabi_dcmpgt>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d173      	bne.n	8006f64 <_dtoa_r+0x6c4>
 8006e7c:	4652      	mov	r2, sl
 8006e7e:	465b      	mov	r3, fp
 8006e80:	4913      	ldr	r1, [pc, #76]	; (8006ed0 <_dtoa_r+0x630>)
 8006e82:	2000      	movs	r0, #0
 8006e84:	f7f9 fa08 	bl	8000298 <__aeabi_dsub>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	4649      	mov	r1, r9
 8006e90:	f7f9 fe2c 	bl	8000aec <__aeabi_dcmplt>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	f43f af35 	beq.w	8006d04 <_dtoa_r+0x464>
 8006e9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006e9c:	1e6b      	subs	r3, r5, #1
 8006e9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ea0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ea4:	2b30      	cmp	r3, #48	; 0x30
 8006ea6:	d0f8      	beq.n	8006e9a <_dtoa_r+0x5fa>
 8006ea8:	9700      	str	r7, [sp, #0]
 8006eaa:	e049      	b.n	8006f40 <_dtoa_r+0x6a0>
 8006eac:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <_dtoa_r+0x624>)
 8006eae:	f7f9 fbab 	bl	8000608 <__aeabi_dmul>
 8006eb2:	4680      	mov	r8, r0
 8006eb4:	4689      	mov	r9, r1
 8006eb6:	e7bd      	b.n	8006e34 <_dtoa_r+0x594>
 8006eb8:	0800ac38 	.word	0x0800ac38
 8006ebc:	0800ac10 	.word	0x0800ac10
 8006ec0:	3ff00000 	.word	0x3ff00000
 8006ec4:	40240000 	.word	0x40240000
 8006ec8:	401c0000 	.word	0x401c0000
 8006ecc:	40140000 	.word	0x40140000
 8006ed0:	3fe00000 	.word	0x3fe00000
 8006ed4:	9d01      	ldr	r5, [sp, #4]
 8006ed6:	4656      	mov	r6, sl
 8006ed8:	465f      	mov	r7, fp
 8006eda:	4642      	mov	r2, r8
 8006edc:	464b      	mov	r3, r9
 8006ede:	4630      	mov	r0, r6
 8006ee0:	4639      	mov	r1, r7
 8006ee2:	f7f9 fcbb 	bl	800085c <__aeabi_ddiv>
 8006ee6:	f7f9 fe3f 	bl	8000b68 <__aeabi_d2iz>
 8006eea:	4682      	mov	sl, r0
 8006eec:	f7f9 fb22 	bl	8000534 <__aeabi_i2d>
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	464b      	mov	r3, r9
 8006ef4:	f7f9 fb88 	bl	8000608 <__aeabi_dmul>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4630      	mov	r0, r6
 8006efe:	4639      	mov	r1, r7
 8006f00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006f04:	f7f9 f9c8 	bl	8000298 <__aeabi_dsub>
 8006f08:	f805 6b01 	strb.w	r6, [r5], #1
 8006f0c:	9e01      	ldr	r6, [sp, #4]
 8006f0e:	9f03      	ldr	r7, [sp, #12]
 8006f10:	1bae      	subs	r6, r5, r6
 8006f12:	42b7      	cmp	r7, r6
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	d135      	bne.n	8006f86 <_dtoa_r+0x6e6>
 8006f1a:	f7f9 f9bf 	bl	800029c <__adddf3>
 8006f1e:	4642      	mov	r2, r8
 8006f20:	464b      	mov	r3, r9
 8006f22:	4606      	mov	r6, r0
 8006f24:	460f      	mov	r7, r1
 8006f26:	f7f9 fdff 	bl	8000b28 <__aeabi_dcmpgt>
 8006f2a:	b9d0      	cbnz	r0, 8006f62 <_dtoa_r+0x6c2>
 8006f2c:	4642      	mov	r2, r8
 8006f2e:	464b      	mov	r3, r9
 8006f30:	4630      	mov	r0, r6
 8006f32:	4639      	mov	r1, r7
 8006f34:	f7f9 fdd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f38:	b110      	cbz	r0, 8006f40 <_dtoa_r+0x6a0>
 8006f3a:	f01a 0f01 	tst.w	sl, #1
 8006f3e:	d110      	bne.n	8006f62 <_dtoa_r+0x6c2>
 8006f40:	4620      	mov	r0, r4
 8006f42:	ee18 1a10 	vmov	r1, s16
 8006f46:	f000 fb09 	bl	800755c <_Bfree>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9800      	ldr	r0, [sp, #0]
 8006f4e:	702b      	strb	r3, [r5, #0]
 8006f50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f52:	3001      	adds	r0, #1
 8006f54:	6018      	str	r0, [r3, #0]
 8006f56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f43f acf1 	beq.w	8006940 <_dtoa_r+0xa0>
 8006f5e:	601d      	str	r5, [r3, #0]
 8006f60:	e4ee      	b.n	8006940 <_dtoa_r+0xa0>
 8006f62:	9f00      	ldr	r7, [sp, #0]
 8006f64:	462b      	mov	r3, r5
 8006f66:	461d      	mov	r5, r3
 8006f68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f6c:	2a39      	cmp	r2, #57	; 0x39
 8006f6e:	d106      	bne.n	8006f7e <_dtoa_r+0x6de>
 8006f70:	9a01      	ldr	r2, [sp, #4]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d1f7      	bne.n	8006f66 <_dtoa_r+0x6c6>
 8006f76:	9901      	ldr	r1, [sp, #4]
 8006f78:	2230      	movs	r2, #48	; 0x30
 8006f7a:	3701      	adds	r7, #1
 8006f7c:	700a      	strb	r2, [r1, #0]
 8006f7e:	781a      	ldrb	r2, [r3, #0]
 8006f80:	3201      	adds	r2, #1
 8006f82:	701a      	strb	r2, [r3, #0]
 8006f84:	e790      	b.n	8006ea8 <_dtoa_r+0x608>
 8006f86:	4ba6      	ldr	r3, [pc, #664]	; (8007220 <_dtoa_r+0x980>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f7f9 fb3d 	bl	8000608 <__aeabi_dmul>
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2300      	movs	r3, #0
 8006f92:	4606      	mov	r6, r0
 8006f94:	460f      	mov	r7, r1
 8006f96:	f7f9 fd9f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d09d      	beq.n	8006eda <_dtoa_r+0x63a>
 8006f9e:	e7cf      	b.n	8006f40 <_dtoa_r+0x6a0>
 8006fa0:	9a08      	ldr	r2, [sp, #32]
 8006fa2:	2a00      	cmp	r2, #0
 8006fa4:	f000 80d7 	beq.w	8007156 <_dtoa_r+0x8b6>
 8006fa8:	9a06      	ldr	r2, [sp, #24]
 8006faa:	2a01      	cmp	r2, #1
 8006fac:	f300 80ba 	bgt.w	8007124 <_dtoa_r+0x884>
 8006fb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fb2:	2a00      	cmp	r2, #0
 8006fb4:	f000 80b2 	beq.w	800711c <_dtoa_r+0x87c>
 8006fb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fbc:	9e07      	ldr	r6, [sp, #28]
 8006fbe:	9d04      	ldr	r5, [sp, #16]
 8006fc0:	9a04      	ldr	r2, [sp, #16]
 8006fc2:	441a      	add	r2, r3
 8006fc4:	9204      	str	r2, [sp, #16]
 8006fc6:	9a05      	ldr	r2, [sp, #20]
 8006fc8:	2101      	movs	r1, #1
 8006fca:	441a      	add	r2, r3
 8006fcc:	4620      	mov	r0, r4
 8006fce:	9205      	str	r2, [sp, #20]
 8006fd0:	f000 fb7c 	bl	80076cc <__i2b>
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	dd0c      	ble.n	8006ff4 <_dtoa_r+0x754>
 8006fda:	9b05      	ldr	r3, [sp, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	dd09      	ble.n	8006ff4 <_dtoa_r+0x754>
 8006fe0:	42ab      	cmp	r3, r5
 8006fe2:	9a04      	ldr	r2, [sp, #16]
 8006fe4:	bfa8      	it	ge
 8006fe6:	462b      	movge	r3, r5
 8006fe8:	1ad2      	subs	r2, r2, r3
 8006fea:	9204      	str	r2, [sp, #16]
 8006fec:	9a05      	ldr	r2, [sp, #20]
 8006fee:	1aed      	subs	r5, r5, r3
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	9305      	str	r3, [sp, #20]
 8006ff4:	9b07      	ldr	r3, [sp, #28]
 8006ff6:	b31b      	cbz	r3, 8007040 <_dtoa_r+0x7a0>
 8006ff8:	9b08      	ldr	r3, [sp, #32]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 80af 	beq.w	800715e <_dtoa_r+0x8be>
 8007000:	2e00      	cmp	r6, #0
 8007002:	dd13      	ble.n	800702c <_dtoa_r+0x78c>
 8007004:	4639      	mov	r1, r7
 8007006:	4632      	mov	r2, r6
 8007008:	4620      	mov	r0, r4
 800700a:	f000 fc1f 	bl	800784c <__pow5mult>
 800700e:	ee18 2a10 	vmov	r2, s16
 8007012:	4601      	mov	r1, r0
 8007014:	4607      	mov	r7, r0
 8007016:	4620      	mov	r0, r4
 8007018:	f000 fb6e 	bl	80076f8 <__multiply>
 800701c:	ee18 1a10 	vmov	r1, s16
 8007020:	4680      	mov	r8, r0
 8007022:	4620      	mov	r0, r4
 8007024:	f000 fa9a 	bl	800755c <_Bfree>
 8007028:	ee08 8a10 	vmov	s16, r8
 800702c:	9b07      	ldr	r3, [sp, #28]
 800702e:	1b9a      	subs	r2, r3, r6
 8007030:	d006      	beq.n	8007040 <_dtoa_r+0x7a0>
 8007032:	ee18 1a10 	vmov	r1, s16
 8007036:	4620      	mov	r0, r4
 8007038:	f000 fc08 	bl	800784c <__pow5mult>
 800703c:	ee08 0a10 	vmov	s16, r0
 8007040:	2101      	movs	r1, #1
 8007042:	4620      	mov	r0, r4
 8007044:	f000 fb42 	bl	80076cc <__i2b>
 8007048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800704a:	2b00      	cmp	r3, #0
 800704c:	4606      	mov	r6, r0
 800704e:	f340 8088 	ble.w	8007162 <_dtoa_r+0x8c2>
 8007052:	461a      	mov	r2, r3
 8007054:	4601      	mov	r1, r0
 8007056:	4620      	mov	r0, r4
 8007058:	f000 fbf8 	bl	800784c <__pow5mult>
 800705c:	9b06      	ldr	r3, [sp, #24]
 800705e:	2b01      	cmp	r3, #1
 8007060:	4606      	mov	r6, r0
 8007062:	f340 8081 	ble.w	8007168 <_dtoa_r+0x8c8>
 8007066:	f04f 0800 	mov.w	r8, #0
 800706a:	6933      	ldr	r3, [r6, #16]
 800706c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007070:	6918      	ldr	r0, [r3, #16]
 8007072:	f000 fadb 	bl	800762c <__hi0bits>
 8007076:	f1c0 0020 	rsb	r0, r0, #32
 800707a:	9b05      	ldr	r3, [sp, #20]
 800707c:	4418      	add	r0, r3
 800707e:	f010 001f 	ands.w	r0, r0, #31
 8007082:	f000 8092 	beq.w	80071aa <_dtoa_r+0x90a>
 8007086:	f1c0 0320 	rsb	r3, r0, #32
 800708a:	2b04      	cmp	r3, #4
 800708c:	f340 808a 	ble.w	80071a4 <_dtoa_r+0x904>
 8007090:	f1c0 001c 	rsb	r0, r0, #28
 8007094:	9b04      	ldr	r3, [sp, #16]
 8007096:	4403      	add	r3, r0
 8007098:	9304      	str	r3, [sp, #16]
 800709a:	9b05      	ldr	r3, [sp, #20]
 800709c:	4403      	add	r3, r0
 800709e:	4405      	add	r5, r0
 80070a0:	9305      	str	r3, [sp, #20]
 80070a2:	9b04      	ldr	r3, [sp, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	dd07      	ble.n	80070b8 <_dtoa_r+0x818>
 80070a8:	ee18 1a10 	vmov	r1, s16
 80070ac:	461a      	mov	r2, r3
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 fc26 	bl	8007900 <__lshift>
 80070b4:	ee08 0a10 	vmov	s16, r0
 80070b8:	9b05      	ldr	r3, [sp, #20]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	dd05      	ble.n	80070ca <_dtoa_r+0x82a>
 80070be:	4631      	mov	r1, r6
 80070c0:	461a      	mov	r2, r3
 80070c2:	4620      	mov	r0, r4
 80070c4:	f000 fc1c 	bl	8007900 <__lshift>
 80070c8:	4606      	mov	r6, r0
 80070ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d06e      	beq.n	80071ae <_dtoa_r+0x90e>
 80070d0:	ee18 0a10 	vmov	r0, s16
 80070d4:	4631      	mov	r1, r6
 80070d6:	f000 fc83 	bl	80079e0 <__mcmp>
 80070da:	2800      	cmp	r0, #0
 80070dc:	da67      	bge.n	80071ae <_dtoa_r+0x90e>
 80070de:	9b00      	ldr	r3, [sp, #0]
 80070e0:	3b01      	subs	r3, #1
 80070e2:	ee18 1a10 	vmov	r1, s16
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	220a      	movs	r2, #10
 80070ea:	2300      	movs	r3, #0
 80070ec:	4620      	mov	r0, r4
 80070ee:	f000 fa57 	bl	80075a0 <__multadd>
 80070f2:	9b08      	ldr	r3, [sp, #32]
 80070f4:	ee08 0a10 	vmov	s16, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 81b1 	beq.w	8007460 <_dtoa_r+0xbc0>
 80070fe:	2300      	movs	r3, #0
 8007100:	4639      	mov	r1, r7
 8007102:	220a      	movs	r2, #10
 8007104:	4620      	mov	r0, r4
 8007106:	f000 fa4b 	bl	80075a0 <__multadd>
 800710a:	9b02      	ldr	r3, [sp, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	4607      	mov	r7, r0
 8007110:	f300 808e 	bgt.w	8007230 <_dtoa_r+0x990>
 8007114:	9b06      	ldr	r3, [sp, #24]
 8007116:	2b02      	cmp	r3, #2
 8007118:	dc51      	bgt.n	80071be <_dtoa_r+0x91e>
 800711a:	e089      	b.n	8007230 <_dtoa_r+0x990>
 800711c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800711e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007122:	e74b      	b.n	8006fbc <_dtoa_r+0x71c>
 8007124:	9b03      	ldr	r3, [sp, #12]
 8007126:	1e5e      	subs	r6, r3, #1
 8007128:	9b07      	ldr	r3, [sp, #28]
 800712a:	42b3      	cmp	r3, r6
 800712c:	bfbf      	itttt	lt
 800712e:	9b07      	ldrlt	r3, [sp, #28]
 8007130:	9607      	strlt	r6, [sp, #28]
 8007132:	1af2      	sublt	r2, r6, r3
 8007134:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007136:	bfb6      	itet	lt
 8007138:	189b      	addlt	r3, r3, r2
 800713a:	1b9e      	subge	r6, r3, r6
 800713c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800713e:	9b03      	ldr	r3, [sp, #12]
 8007140:	bfb8      	it	lt
 8007142:	2600      	movlt	r6, #0
 8007144:	2b00      	cmp	r3, #0
 8007146:	bfb7      	itett	lt
 8007148:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800714c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007150:	1a9d      	sublt	r5, r3, r2
 8007152:	2300      	movlt	r3, #0
 8007154:	e734      	b.n	8006fc0 <_dtoa_r+0x720>
 8007156:	9e07      	ldr	r6, [sp, #28]
 8007158:	9d04      	ldr	r5, [sp, #16]
 800715a:	9f08      	ldr	r7, [sp, #32]
 800715c:	e73b      	b.n	8006fd6 <_dtoa_r+0x736>
 800715e:	9a07      	ldr	r2, [sp, #28]
 8007160:	e767      	b.n	8007032 <_dtoa_r+0x792>
 8007162:	9b06      	ldr	r3, [sp, #24]
 8007164:	2b01      	cmp	r3, #1
 8007166:	dc18      	bgt.n	800719a <_dtoa_r+0x8fa>
 8007168:	f1ba 0f00 	cmp.w	sl, #0
 800716c:	d115      	bne.n	800719a <_dtoa_r+0x8fa>
 800716e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007172:	b993      	cbnz	r3, 800719a <_dtoa_r+0x8fa>
 8007174:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007178:	0d1b      	lsrs	r3, r3, #20
 800717a:	051b      	lsls	r3, r3, #20
 800717c:	b183      	cbz	r3, 80071a0 <_dtoa_r+0x900>
 800717e:	9b04      	ldr	r3, [sp, #16]
 8007180:	3301      	adds	r3, #1
 8007182:	9304      	str	r3, [sp, #16]
 8007184:	9b05      	ldr	r3, [sp, #20]
 8007186:	3301      	adds	r3, #1
 8007188:	9305      	str	r3, [sp, #20]
 800718a:	f04f 0801 	mov.w	r8, #1
 800718e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007190:	2b00      	cmp	r3, #0
 8007192:	f47f af6a 	bne.w	800706a <_dtoa_r+0x7ca>
 8007196:	2001      	movs	r0, #1
 8007198:	e76f      	b.n	800707a <_dtoa_r+0x7da>
 800719a:	f04f 0800 	mov.w	r8, #0
 800719e:	e7f6      	b.n	800718e <_dtoa_r+0x8ee>
 80071a0:	4698      	mov	r8, r3
 80071a2:	e7f4      	b.n	800718e <_dtoa_r+0x8ee>
 80071a4:	f43f af7d 	beq.w	80070a2 <_dtoa_r+0x802>
 80071a8:	4618      	mov	r0, r3
 80071aa:	301c      	adds	r0, #28
 80071ac:	e772      	b.n	8007094 <_dtoa_r+0x7f4>
 80071ae:	9b03      	ldr	r3, [sp, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	dc37      	bgt.n	8007224 <_dtoa_r+0x984>
 80071b4:	9b06      	ldr	r3, [sp, #24]
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	dd34      	ble.n	8007224 <_dtoa_r+0x984>
 80071ba:	9b03      	ldr	r3, [sp, #12]
 80071bc:	9302      	str	r3, [sp, #8]
 80071be:	9b02      	ldr	r3, [sp, #8]
 80071c0:	b96b      	cbnz	r3, 80071de <_dtoa_r+0x93e>
 80071c2:	4631      	mov	r1, r6
 80071c4:	2205      	movs	r2, #5
 80071c6:	4620      	mov	r0, r4
 80071c8:	f000 f9ea 	bl	80075a0 <__multadd>
 80071cc:	4601      	mov	r1, r0
 80071ce:	4606      	mov	r6, r0
 80071d0:	ee18 0a10 	vmov	r0, s16
 80071d4:	f000 fc04 	bl	80079e0 <__mcmp>
 80071d8:	2800      	cmp	r0, #0
 80071da:	f73f adbb 	bgt.w	8006d54 <_dtoa_r+0x4b4>
 80071de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e0:	9d01      	ldr	r5, [sp, #4]
 80071e2:	43db      	mvns	r3, r3
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	f04f 0800 	mov.w	r8, #0
 80071ea:	4631      	mov	r1, r6
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 f9b5 	bl	800755c <_Bfree>
 80071f2:	2f00      	cmp	r7, #0
 80071f4:	f43f aea4 	beq.w	8006f40 <_dtoa_r+0x6a0>
 80071f8:	f1b8 0f00 	cmp.w	r8, #0
 80071fc:	d005      	beq.n	800720a <_dtoa_r+0x96a>
 80071fe:	45b8      	cmp	r8, r7
 8007200:	d003      	beq.n	800720a <_dtoa_r+0x96a>
 8007202:	4641      	mov	r1, r8
 8007204:	4620      	mov	r0, r4
 8007206:	f000 f9a9 	bl	800755c <_Bfree>
 800720a:	4639      	mov	r1, r7
 800720c:	4620      	mov	r0, r4
 800720e:	f000 f9a5 	bl	800755c <_Bfree>
 8007212:	e695      	b.n	8006f40 <_dtoa_r+0x6a0>
 8007214:	2600      	movs	r6, #0
 8007216:	4637      	mov	r7, r6
 8007218:	e7e1      	b.n	80071de <_dtoa_r+0x93e>
 800721a:	9700      	str	r7, [sp, #0]
 800721c:	4637      	mov	r7, r6
 800721e:	e599      	b.n	8006d54 <_dtoa_r+0x4b4>
 8007220:	40240000 	.word	0x40240000
 8007224:	9b08      	ldr	r3, [sp, #32]
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 80ca 	beq.w	80073c0 <_dtoa_r+0xb20>
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	9302      	str	r3, [sp, #8]
 8007230:	2d00      	cmp	r5, #0
 8007232:	dd05      	ble.n	8007240 <_dtoa_r+0x9a0>
 8007234:	4639      	mov	r1, r7
 8007236:	462a      	mov	r2, r5
 8007238:	4620      	mov	r0, r4
 800723a:	f000 fb61 	bl	8007900 <__lshift>
 800723e:	4607      	mov	r7, r0
 8007240:	f1b8 0f00 	cmp.w	r8, #0
 8007244:	d05b      	beq.n	80072fe <_dtoa_r+0xa5e>
 8007246:	6879      	ldr	r1, [r7, #4]
 8007248:	4620      	mov	r0, r4
 800724a:	f000 f947 	bl	80074dc <_Balloc>
 800724e:	4605      	mov	r5, r0
 8007250:	b928      	cbnz	r0, 800725e <_dtoa_r+0x9be>
 8007252:	4b87      	ldr	r3, [pc, #540]	; (8007470 <_dtoa_r+0xbd0>)
 8007254:	4602      	mov	r2, r0
 8007256:	f240 21ea 	movw	r1, #746	; 0x2ea
 800725a:	f7ff bb3b 	b.w	80068d4 <_dtoa_r+0x34>
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	3202      	adds	r2, #2
 8007262:	0092      	lsls	r2, r2, #2
 8007264:	f107 010c 	add.w	r1, r7, #12
 8007268:	300c      	adds	r0, #12
 800726a:	f000 f91d 	bl	80074a8 <memcpy>
 800726e:	2201      	movs	r2, #1
 8007270:	4629      	mov	r1, r5
 8007272:	4620      	mov	r0, r4
 8007274:	f000 fb44 	bl	8007900 <__lshift>
 8007278:	9b01      	ldr	r3, [sp, #4]
 800727a:	f103 0901 	add.w	r9, r3, #1
 800727e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007282:	4413      	add	r3, r2
 8007284:	9305      	str	r3, [sp, #20]
 8007286:	f00a 0301 	and.w	r3, sl, #1
 800728a:	46b8      	mov	r8, r7
 800728c:	9304      	str	r3, [sp, #16]
 800728e:	4607      	mov	r7, r0
 8007290:	4631      	mov	r1, r6
 8007292:	ee18 0a10 	vmov	r0, s16
 8007296:	f7ff fa75 	bl	8006784 <quorem>
 800729a:	4641      	mov	r1, r8
 800729c:	9002      	str	r0, [sp, #8]
 800729e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80072a2:	ee18 0a10 	vmov	r0, s16
 80072a6:	f000 fb9b 	bl	80079e0 <__mcmp>
 80072aa:	463a      	mov	r2, r7
 80072ac:	9003      	str	r0, [sp, #12]
 80072ae:	4631      	mov	r1, r6
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 fbb1 	bl	8007a18 <__mdiff>
 80072b6:	68c2      	ldr	r2, [r0, #12]
 80072b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80072bc:	4605      	mov	r5, r0
 80072be:	bb02      	cbnz	r2, 8007302 <_dtoa_r+0xa62>
 80072c0:	4601      	mov	r1, r0
 80072c2:	ee18 0a10 	vmov	r0, s16
 80072c6:	f000 fb8b 	bl	80079e0 <__mcmp>
 80072ca:	4602      	mov	r2, r0
 80072cc:	4629      	mov	r1, r5
 80072ce:	4620      	mov	r0, r4
 80072d0:	9207      	str	r2, [sp, #28]
 80072d2:	f000 f943 	bl	800755c <_Bfree>
 80072d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80072da:	ea43 0102 	orr.w	r1, r3, r2
 80072de:	9b04      	ldr	r3, [sp, #16]
 80072e0:	430b      	orrs	r3, r1
 80072e2:	464d      	mov	r5, r9
 80072e4:	d10f      	bne.n	8007306 <_dtoa_r+0xa66>
 80072e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80072ea:	d02a      	beq.n	8007342 <_dtoa_r+0xaa2>
 80072ec:	9b03      	ldr	r3, [sp, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	dd02      	ble.n	80072f8 <_dtoa_r+0xa58>
 80072f2:	9b02      	ldr	r3, [sp, #8]
 80072f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80072f8:	f88b a000 	strb.w	sl, [fp]
 80072fc:	e775      	b.n	80071ea <_dtoa_r+0x94a>
 80072fe:	4638      	mov	r0, r7
 8007300:	e7ba      	b.n	8007278 <_dtoa_r+0x9d8>
 8007302:	2201      	movs	r2, #1
 8007304:	e7e2      	b.n	80072cc <_dtoa_r+0xa2c>
 8007306:	9b03      	ldr	r3, [sp, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	db04      	blt.n	8007316 <_dtoa_r+0xa76>
 800730c:	9906      	ldr	r1, [sp, #24]
 800730e:	430b      	orrs	r3, r1
 8007310:	9904      	ldr	r1, [sp, #16]
 8007312:	430b      	orrs	r3, r1
 8007314:	d122      	bne.n	800735c <_dtoa_r+0xabc>
 8007316:	2a00      	cmp	r2, #0
 8007318:	ddee      	ble.n	80072f8 <_dtoa_r+0xa58>
 800731a:	ee18 1a10 	vmov	r1, s16
 800731e:	2201      	movs	r2, #1
 8007320:	4620      	mov	r0, r4
 8007322:	f000 faed 	bl	8007900 <__lshift>
 8007326:	4631      	mov	r1, r6
 8007328:	ee08 0a10 	vmov	s16, r0
 800732c:	f000 fb58 	bl	80079e0 <__mcmp>
 8007330:	2800      	cmp	r0, #0
 8007332:	dc03      	bgt.n	800733c <_dtoa_r+0xa9c>
 8007334:	d1e0      	bne.n	80072f8 <_dtoa_r+0xa58>
 8007336:	f01a 0f01 	tst.w	sl, #1
 800733a:	d0dd      	beq.n	80072f8 <_dtoa_r+0xa58>
 800733c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007340:	d1d7      	bne.n	80072f2 <_dtoa_r+0xa52>
 8007342:	2339      	movs	r3, #57	; 0x39
 8007344:	f88b 3000 	strb.w	r3, [fp]
 8007348:	462b      	mov	r3, r5
 800734a:	461d      	mov	r5, r3
 800734c:	3b01      	subs	r3, #1
 800734e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007352:	2a39      	cmp	r2, #57	; 0x39
 8007354:	d071      	beq.n	800743a <_dtoa_r+0xb9a>
 8007356:	3201      	adds	r2, #1
 8007358:	701a      	strb	r2, [r3, #0]
 800735a:	e746      	b.n	80071ea <_dtoa_r+0x94a>
 800735c:	2a00      	cmp	r2, #0
 800735e:	dd07      	ble.n	8007370 <_dtoa_r+0xad0>
 8007360:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007364:	d0ed      	beq.n	8007342 <_dtoa_r+0xaa2>
 8007366:	f10a 0301 	add.w	r3, sl, #1
 800736a:	f88b 3000 	strb.w	r3, [fp]
 800736e:	e73c      	b.n	80071ea <_dtoa_r+0x94a>
 8007370:	9b05      	ldr	r3, [sp, #20]
 8007372:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007376:	4599      	cmp	r9, r3
 8007378:	d047      	beq.n	800740a <_dtoa_r+0xb6a>
 800737a:	ee18 1a10 	vmov	r1, s16
 800737e:	2300      	movs	r3, #0
 8007380:	220a      	movs	r2, #10
 8007382:	4620      	mov	r0, r4
 8007384:	f000 f90c 	bl	80075a0 <__multadd>
 8007388:	45b8      	cmp	r8, r7
 800738a:	ee08 0a10 	vmov	s16, r0
 800738e:	f04f 0300 	mov.w	r3, #0
 8007392:	f04f 020a 	mov.w	r2, #10
 8007396:	4641      	mov	r1, r8
 8007398:	4620      	mov	r0, r4
 800739a:	d106      	bne.n	80073aa <_dtoa_r+0xb0a>
 800739c:	f000 f900 	bl	80075a0 <__multadd>
 80073a0:	4680      	mov	r8, r0
 80073a2:	4607      	mov	r7, r0
 80073a4:	f109 0901 	add.w	r9, r9, #1
 80073a8:	e772      	b.n	8007290 <_dtoa_r+0x9f0>
 80073aa:	f000 f8f9 	bl	80075a0 <__multadd>
 80073ae:	4639      	mov	r1, r7
 80073b0:	4680      	mov	r8, r0
 80073b2:	2300      	movs	r3, #0
 80073b4:	220a      	movs	r2, #10
 80073b6:	4620      	mov	r0, r4
 80073b8:	f000 f8f2 	bl	80075a0 <__multadd>
 80073bc:	4607      	mov	r7, r0
 80073be:	e7f1      	b.n	80073a4 <_dtoa_r+0xb04>
 80073c0:	9b03      	ldr	r3, [sp, #12]
 80073c2:	9302      	str	r3, [sp, #8]
 80073c4:	9d01      	ldr	r5, [sp, #4]
 80073c6:	ee18 0a10 	vmov	r0, s16
 80073ca:	4631      	mov	r1, r6
 80073cc:	f7ff f9da 	bl	8006784 <quorem>
 80073d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80073d4:	9b01      	ldr	r3, [sp, #4]
 80073d6:	f805 ab01 	strb.w	sl, [r5], #1
 80073da:	1aea      	subs	r2, r5, r3
 80073dc:	9b02      	ldr	r3, [sp, #8]
 80073de:	4293      	cmp	r3, r2
 80073e0:	dd09      	ble.n	80073f6 <_dtoa_r+0xb56>
 80073e2:	ee18 1a10 	vmov	r1, s16
 80073e6:	2300      	movs	r3, #0
 80073e8:	220a      	movs	r2, #10
 80073ea:	4620      	mov	r0, r4
 80073ec:	f000 f8d8 	bl	80075a0 <__multadd>
 80073f0:	ee08 0a10 	vmov	s16, r0
 80073f4:	e7e7      	b.n	80073c6 <_dtoa_r+0xb26>
 80073f6:	9b02      	ldr	r3, [sp, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	bfc8      	it	gt
 80073fc:	461d      	movgt	r5, r3
 80073fe:	9b01      	ldr	r3, [sp, #4]
 8007400:	bfd8      	it	le
 8007402:	2501      	movle	r5, #1
 8007404:	441d      	add	r5, r3
 8007406:	f04f 0800 	mov.w	r8, #0
 800740a:	ee18 1a10 	vmov	r1, s16
 800740e:	2201      	movs	r2, #1
 8007410:	4620      	mov	r0, r4
 8007412:	f000 fa75 	bl	8007900 <__lshift>
 8007416:	4631      	mov	r1, r6
 8007418:	ee08 0a10 	vmov	s16, r0
 800741c:	f000 fae0 	bl	80079e0 <__mcmp>
 8007420:	2800      	cmp	r0, #0
 8007422:	dc91      	bgt.n	8007348 <_dtoa_r+0xaa8>
 8007424:	d102      	bne.n	800742c <_dtoa_r+0xb8c>
 8007426:	f01a 0f01 	tst.w	sl, #1
 800742a:	d18d      	bne.n	8007348 <_dtoa_r+0xaa8>
 800742c:	462b      	mov	r3, r5
 800742e:	461d      	mov	r5, r3
 8007430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007434:	2a30      	cmp	r2, #48	; 0x30
 8007436:	d0fa      	beq.n	800742e <_dtoa_r+0xb8e>
 8007438:	e6d7      	b.n	80071ea <_dtoa_r+0x94a>
 800743a:	9a01      	ldr	r2, [sp, #4]
 800743c:	429a      	cmp	r2, r3
 800743e:	d184      	bne.n	800734a <_dtoa_r+0xaaa>
 8007440:	9b00      	ldr	r3, [sp, #0]
 8007442:	3301      	adds	r3, #1
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	2331      	movs	r3, #49	; 0x31
 8007448:	7013      	strb	r3, [r2, #0]
 800744a:	e6ce      	b.n	80071ea <_dtoa_r+0x94a>
 800744c:	4b09      	ldr	r3, [pc, #36]	; (8007474 <_dtoa_r+0xbd4>)
 800744e:	f7ff ba95 	b.w	800697c <_dtoa_r+0xdc>
 8007452:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007454:	2b00      	cmp	r3, #0
 8007456:	f47f aa6e 	bne.w	8006936 <_dtoa_r+0x96>
 800745a:	4b07      	ldr	r3, [pc, #28]	; (8007478 <_dtoa_r+0xbd8>)
 800745c:	f7ff ba8e 	b.w	800697c <_dtoa_r+0xdc>
 8007460:	9b02      	ldr	r3, [sp, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	dcae      	bgt.n	80073c4 <_dtoa_r+0xb24>
 8007466:	9b06      	ldr	r3, [sp, #24]
 8007468:	2b02      	cmp	r3, #2
 800746a:	f73f aea8 	bgt.w	80071be <_dtoa_r+0x91e>
 800746e:	e7a9      	b.n	80073c4 <_dtoa_r+0xb24>
 8007470:	0800aba3 	.word	0x0800aba3
 8007474:	0800ab00 	.word	0x0800ab00
 8007478:	0800ab24 	.word	0x0800ab24

0800747c <_localeconv_r>:
 800747c:	4800      	ldr	r0, [pc, #0]	; (8007480 <_localeconv_r+0x4>)
 800747e:	4770      	bx	lr
 8007480:	20000164 	.word	0x20000164

08007484 <_lseek_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4d07      	ldr	r5, [pc, #28]	; (80074a4 <_lseek_r+0x20>)
 8007488:	4604      	mov	r4, r0
 800748a:	4608      	mov	r0, r1
 800748c:	4611      	mov	r1, r2
 800748e:	2200      	movs	r2, #0
 8007490:	602a      	str	r2, [r5, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	f7fa fb16 	bl	8001ac4 <_lseek>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d102      	bne.n	80074a2 <_lseek_r+0x1e>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b103      	cbz	r3, 80074a2 <_lseek_r+0x1e>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	20000524 	.word	0x20000524

080074a8 <memcpy>:
 80074a8:	440a      	add	r2, r1
 80074aa:	4291      	cmp	r1, r2
 80074ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80074b0:	d100      	bne.n	80074b4 <memcpy+0xc>
 80074b2:	4770      	bx	lr
 80074b4:	b510      	push	{r4, lr}
 80074b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074be:	4291      	cmp	r1, r2
 80074c0:	d1f9      	bne.n	80074b6 <memcpy+0xe>
 80074c2:	bd10      	pop	{r4, pc}

080074c4 <__malloc_lock>:
 80074c4:	4801      	ldr	r0, [pc, #4]	; (80074cc <__malloc_lock+0x8>)
 80074c6:	f000 bd9d 	b.w	8008004 <__retarget_lock_acquire_recursive>
 80074ca:	bf00      	nop
 80074cc:	20000528 	.word	0x20000528

080074d0 <__malloc_unlock>:
 80074d0:	4801      	ldr	r0, [pc, #4]	; (80074d8 <__malloc_unlock+0x8>)
 80074d2:	f000 bd98 	b.w	8008006 <__retarget_lock_release_recursive>
 80074d6:	bf00      	nop
 80074d8:	20000528 	.word	0x20000528

080074dc <_Balloc>:
 80074dc:	b570      	push	{r4, r5, r6, lr}
 80074de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074e0:	4604      	mov	r4, r0
 80074e2:	460d      	mov	r5, r1
 80074e4:	b976      	cbnz	r6, 8007504 <_Balloc+0x28>
 80074e6:	2010      	movs	r0, #16
 80074e8:	f7fe fb7c 	bl	8005be4 <malloc>
 80074ec:	4602      	mov	r2, r0
 80074ee:	6260      	str	r0, [r4, #36]	; 0x24
 80074f0:	b920      	cbnz	r0, 80074fc <_Balloc+0x20>
 80074f2:	4b18      	ldr	r3, [pc, #96]	; (8007554 <_Balloc+0x78>)
 80074f4:	4818      	ldr	r0, [pc, #96]	; (8007558 <_Balloc+0x7c>)
 80074f6:	2166      	movs	r1, #102	; 0x66
 80074f8:	f000 fb9c 	bl	8007c34 <__assert_func>
 80074fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007500:	6006      	str	r6, [r0, #0]
 8007502:	60c6      	str	r6, [r0, #12]
 8007504:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007506:	68f3      	ldr	r3, [r6, #12]
 8007508:	b183      	cbz	r3, 800752c <_Balloc+0x50>
 800750a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007512:	b9b8      	cbnz	r0, 8007544 <_Balloc+0x68>
 8007514:	2101      	movs	r1, #1
 8007516:	fa01 f605 	lsl.w	r6, r1, r5
 800751a:	1d72      	adds	r2, r6, #5
 800751c:	0092      	lsls	r2, r2, #2
 800751e:	4620      	mov	r0, r4
 8007520:	f000 fb60 	bl	8007be4 <_calloc_r>
 8007524:	b160      	cbz	r0, 8007540 <_Balloc+0x64>
 8007526:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800752a:	e00e      	b.n	800754a <_Balloc+0x6e>
 800752c:	2221      	movs	r2, #33	; 0x21
 800752e:	2104      	movs	r1, #4
 8007530:	4620      	mov	r0, r4
 8007532:	f000 fb57 	bl	8007be4 <_calloc_r>
 8007536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007538:	60f0      	str	r0, [r6, #12]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e4      	bne.n	800750a <_Balloc+0x2e>
 8007540:	2000      	movs	r0, #0
 8007542:	bd70      	pop	{r4, r5, r6, pc}
 8007544:	6802      	ldr	r2, [r0, #0]
 8007546:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800754a:	2300      	movs	r3, #0
 800754c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007550:	e7f7      	b.n	8007542 <_Balloc+0x66>
 8007552:	bf00      	nop
 8007554:	0800ab31 	.word	0x0800ab31
 8007558:	0800abb4 	.word	0x0800abb4

0800755c <_Bfree>:
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007560:	4605      	mov	r5, r0
 8007562:	460c      	mov	r4, r1
 8007564:	b976      	cbnz	r6, 8007584 <_Bfree+0x28>
 8007566:	2010      	movs	r0, #16
 8007568:	f7fe fb3c 	bl	8005be4 <malloc>
 800756c:	4602      	mov	r2, r0
 800756e:	6268      	str	r0, [r5, #36]	; 0x24
 8007570:	b920      	cbnz	r0, 800757c <_Bfree+0x20>
 8007572:	4b09      	ldr	r3, [pc, #36]	; (8007598 <_Bfree+0x3c>)
 8007574:	4809      	ldr	r0, [pc, #36]	; (800759c <_Bfree+0x40>)
 8007576:	218a      	movs	r1, #138	; 0x8a
 8007578:	f000 fb5c 	bl	8007c34 <__assert_func>
 800757c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007580:	6006      	str	r6, [r0, #0]
 8007582:	60c6      	str	r6, [r0, #12]
 8007584:	b13c      	cbz	r4, 8007596 <_Bfree+0x3a>
 8007586:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007588:	6862      	ldr	r2, [r4, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007590:	6021      	str	r1, [r4, #0]
 8007592:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007596:	bd70      	pop	{r4, r5, r6, pc}
 8007598:	0800ab31 	.word	0x0800ab31
 800759c:	0800abb4 	.word	0x0800abb4

080075a0 <__multadd>:
 80075a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a4:	690d      	ldr	r5, [r1, #16]
 80075a6:	4607      	mov	r7, r0
 80075a8:	460c      	mov	r4, r1
 80075aa:	461e      	mov	r6, r3
 80075ac:	f101 0c14 	add.w	ip, r1, #20
 80075b0:	2000      	movs	r0, #0
 80075b2:	f8dc 3000 	ldr.w	r3, [ip]
 80075b6:	b299      	uxth	r1, r3
 80075b8:	fb02 6101 	mla	r1, r2, r1, r6
 80075bc:	0c1e      	lsrs	r6, r3, #16
 80075be:	0c0b      	lsrs	r3, r1, #16
 80075c0:	fb02 3306 	mla	r3, r2, r6, r3
 80075c4:	b289      	uxth	r1, r1
 80075c6:	3001      	adds	r0, #1
 80075c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075cc:	4285      	cmp	r5, r0
 80075ce:	f84c 1b04 	str.w	r1, [ip], #4
 80075d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075d6:	dcec      	bgt.n	80075b2 <__multadd+0x12>
 80075d8:	b30e      	cbz	r6, 800761e <__multadd+0x7e>
 80075da:	68a3      	ldr	r3, [r4, #8]
 80075dc:	42ab      	cmp	r3, r5
 80075de:	dc19      	bgt.n	8007614 <__multadd+0x74>
 80075e0:	6861      	ldr	r1, [r4, #4]
 80075e2:	4638      	mov	r0, r7
 80075e4:	3101      	adds	r1, #1
 80075e6:	f7ff ff79 	bl	80074dc <_Balloc>
 80075ea:	4680      	mov	r8, r0
 80075ec:	b928      	cbnz	r0, 80075fa <__multadd+0x5a>
 80075ee:	4602      	mov	r2, r0
 80075f0:	4b0c      	ldr	r3, [pc, #48]	; (8007624 <__multadd+0x84>)
 80075f2:	480d      	ldr	r0, [pc, #52]	; (8007628 <__multadd+0x88>)
 80075f4:	21b5      	movs	r1, #181	; 0xb5
 80075f6:	f000 fb1d 	bl	8007c34 <__assert_func>
 80075fa:	6922      	ldr	r2, [r4, #16]
 80075fc:	3202      	adds	r2, #2
 80075fe:	f104 010c 	add.w	r1, r4, #12
 8007602:	0092      	lsls	r2, r2, #2
 8007604:	300c      	adds	r0, #12
 8007606:	f7ff ff4f 	bl	80074a8 <memcpy>
 800760a:	4621      	mov	r1, r4
 800760c:	4638      	mov	r0, r7
 800760e:	f7ff ffa5 	bl	800755c <_Bfree>
 8007612:	4644      	mov	r4, r8
 8007614:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007618:	3501      	adds	r5, #1
 800761a:	615e      	str	r6, [r3, #20]
 800761c:	6125      	str	r5, [r4, #16]
 800761e:	4620      	mov	r0, r4
 8007620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007624:	0800aba3 	.word	0x0800aba3
 8007628:	0800abb4 	.word	0x0800abb4

0800762c <__hi0bits>:
 800762c:	0c03      	lsrs	r3, r0, #16
 800762e:	041b      	lsls	r3, r3, #16
 8007630:	b9d3      	cbnz	r3, 8007668 <__hi0bits+0x3c>
 8007632:	0400      	lsls	r0, r0, #16
 8007634:	2310      	movs	r3, #16
 8007636:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800763a:	bf04      	itt	eq
 800763c:	0200      	lsleq	r0, r0, #8
 800763e:	3308      	addeq	r3, #8
 8007640:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007644:	bf04      	itt	eq
 8007646:	0100      	lsleq	r0, r0, #4
 8007648:	3304      	addeq	r3, #4
 800764a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800764e:	bf04      	itt	eq
 8007650:	0080      	lsleq	r0, r0, #2
 8007652:	3302      	addeq	r3, #2
 8007654:	2800      	cmp	r0, #0
 8007656:	db05      	blt.n	8007664 <__hi0bits+0x38>
 8007658:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800765c:	f103 0301 	add.w	r3, r3, #1
 8007660:	bf08      	it	eq
 8007662:	2320      	moveq	r3, #32
 8007664:	4618      	mov	r0, r3
 8007666:	4770      	bx	lr
 8007668:	2300      	movs	r3, #0
 800766a:	e7e4      	b.n	8007636 <__hi0bits+0xa>

0800766c <__lo0bits>:
 800766c:	6803      	ldr	r3, [r0, #0]
 800766e:	f013 0207 	ands.w	r2, r3, #7
 8007672:	4601      	mov	r1, r0
 8007674:	d00b      	beq.n	800768e <__lo0bits+0x22>
 8007676:	07da      	lsls	r2, r3, #31
 8007678:	d423      	bmi.n	80076c2 <__lo0bits+0x56>
 800767a:	0798      	lsls	r0, r3, #30
 800767c:	bf49      	itett	mi
 800767e:	085b      	lsrmi	r3, r3, #1
 8007680:	089b      	lsrpl	r3, r3, #2
 8007682:	2001      	movmi	r0, #1
 8007684:	600b      	strmi	r3, [r1, #0]
 8007686:	bf5c      	itt	pl
 8007688:	600b      	strpl	r3, [r1, #0]
 800768a:	2002      	movpl	r0, #2
 800768c:	4770      	bx	lr
 800768e:	b298      	uxth	r0, r3
 8007690:	b9a8      	cbnz	r0, 80076be <__lo0bits+0x52>
 8007692:	0c1b      	lsrs	r3, r3, #16
 8007694:	2010      	movs	r0, #16
 8007696:	b2da      	uxtb	r2, r3
 8007698:	b90a      	cbnz	r2, 800769e <__lo0bits+0x32>
 800769a:	3008      	adds	r0, #8
 800769c:	0a1b      	lsrs	r3, r3, #8
 800769e:	071a      	lsls	r2, r3, #28
 80076a0:	bf04      	itt	eq
 80076a2:	091b      	lsreq	r3, r3, #4
 80076a4:	3004      	addeq	r0, #4
 80076a6:	079a      	lsls	r2, r3, #30
 80076a8:	bf04      	itt	eq
 80076aa:	089b      	lsreq	r3, r3, #2
 80076ac:	3002      	addeq	r0, #2
 80076ae:	07da      	lsls	r2, r3, #31
 80076b0:	d403      	bmi.n	80076ba <__lo0bits+0x4e>
 80076b2:	085b      	lsrs	r3, r3, #1
 80076b4:	f100 0001 	add.w	r0, r0, #1
 80076b8:	d005      	beq.n	80076c6 <__lo0bits+0x5a>
 80076ba:	600b      	str	r3, [r1, #0]
 80076bc:	4770      	bx	lr
 80076be:	4610      	mov	r0, r2
 80076c0:	e7e9      	b.n	8007696 <__lo0bits+0x2a>
 80076c2:	2000      	movs	r0, #0
 80076c4:	4770      	bx	lr
 80076c6:	2020      	movs	r0, #32
 80076c8:	4770      	bx	lr
	...

080076cc <__i2b>:
 80076cc:	b510      	push	{r4, lr}
 80076ce:	460c      	mov	r4, r1
 80076d0:	2101      	movs	r1, #1
 80076d2:	f7ff ff03 	bl	80074dc <_Balloc>
 80076d6:	4602      	mov	r2, r0
 80076d8:	b928      	cbnz	r0, 80076e6 <__i2b+0x1a>
 80076da:	4b05      	ldr	r3, [pc, #20]	; (80076f0 <__i2b+0x24>)
 80076dc:	4805      	ldr	r0, [pc, #20]	; (80076f4 <__i2b+0x28>)
 80076de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80076e2:	f000 faa7 	bl	8007c34 <__assert_func>
 80076e6:	2301      	movs	r3, #1
 80076e8:	6144      	str	r4, [r0, #20]
 80076ea:	6103      	str	r3, [r0, #16]
 80076ec:	bd10      	pop	{r4, pc}
 80076ee:	bf00      	nop
 80076f0:	0800aba3 	.word	0x0800aba3
 80076f4:	0800abb4 	.word	0x0800abb4

080076f8 <__multiply>:
 80076f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fc:	4691      	mov	r9, r2
 80076fe:	690a      	ldr	r2, [r1, #16]
 8007700:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007704:	429a      	cmp	r2, r3
 8007706:	bfb8      	it	lt
 8007708:	460b      	movlt	r3, r1
 800770a:	460c      	mov	r4, r1
 800770c:	bfbc      	itt	lt
 800770e:	464c      	movlt	r4, r9
 8007710:	4699      	movlt	r9, r3
 8007712:	6927      	ldr	r7, [r4, #16]
 8007714:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007718:	68a3      	ldr	r3, [r4, #8]
 800771a:	6861      	ldr	r1, [r4, #4]
 800771c:	eb07 060a 	add.w	r6, r7, sl
 8007720:	42b3      	cmp	r3, r6
 8007722:	b085      	sub	sp, #20
 8007724:	bfb8      	it	lt
 8007726:	3101      	addlt	r1, #1
 8007728:	f7ff fed8 	bl	80074dc <_Balloc>
 800772c:	b930      	cbnz	r0, 800773c <__multiply+0x44>
 800772e:	4602      	mov	r2, r0
 8007730:	4b44      	ldr	r3, [pc, #272]	; (8007844 <__multiply+0x14c>)
 8007732:	4845      	ldr	r0, [pc, #276]	; (8007848 <__multiply+0x150>)
 8007734:	f240 115d 	movw	r1, #349	; 0x15d
 8007738:	f000 fa7c 	bl	8007c34 <__assert_func>
 800773c:	f100 0514 	add.w	r5, r0, #20
 8007740:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007744:	462b      	mov	r3, r5
 8007746:	2200      	movs	r2, #0
 8007748:	4543      	cmp	r3, r8
 800774a:	d321      	bcc.n	8007790 <__multiply+0x98>
 800774c:	f104 0314 	add.w	r3, r4, #20
 8007750:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007754:	f109 0314 	add.w	r3, r9, #20
 8007758:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800775c:	9202      	str	r2, [sp, #8]
 800775e:	1b3a      	subs	r2, r7, r4
 8007760:	3a15      	subs	r2, #21
 8007762:	f022 0203 	bic.w	r2, r2, #3
 8007766:	3204      	adds	r2, #4
 8007768:	f104 0115 	add.w	r1, r4, #21
 800776c:	428f      	cmp	r7, r1
 800776e:	bf38      	it	cc
 8007770:	2204      	movcc	r2, #4
 8007772:	9201      	str	r2, [sp, #4]
 8007774:	9a02      	ldr	r2, [sp, #8]
 8007776:	9303      	str	r3, [sp, #12]
 8007778:	429a      	cmp	r2, r3
 800777a:	d80c      	bhi.n	8007796 <__multiply+0x9e>
 800777c:	2e00      	cmp	r6, #0
 800777e:	dd03      	ble.n	8007788 <__multiply+0x90>
 8007780:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007784:	2b00      	cmp	r3, #0
 8007786:	d05a      	beq.n	800783e <__multiply+0x146>
 8007788:	6106      	str	r6, [r0, #16]
 800778a:	b005      	add	sp, #20
 800778c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007790:	f843 2b04 	str.w	r2, [r3], #4
 8007794:	e7d8      	b.n	8007748 <__multiply+0x50>
 8007796:	f8b3 a000 	ldrh.w	sl, [r3]
 800779a:	f1ba 0f00 	cmp.w	sl, #0
 800779e:	d024      	beq.n	80077ea <__multiply+0xf2>
 80077a0:	f104 0e14 	add.w	lr, r4, #20
 80077a4:	46a9      	mov	r9, r5
 80077a6:	f04f 0c00 	mov.w	ip, #0
 80077aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80077ae:	f8d9 1000 	ldr.w	r1, [r9]
 80077b2:	fa1f fb82 	uxth.w	fp, r2
 80077b6:	b289      	uxth	r1, r1
 80077b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80077bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80077c0:	f8d9 2000 	ldr.w	r2, [r9]
 80077c4:	4461      	add	r1, ip
 80077c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80077ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80077d2:	b289      	uxth	r1, r1
 80077d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80077d8:	4577      	cmp	r7, lr
 80077da:	f849 1b04 	str.w	r1, [r9], #4
 80077de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077e2:	d8e2      	bhi.n	80077aa <__multiply+0xb2>
 80077e4:	9a01      	ldr	r2, [sp, #4]
 80077e6:	f845 c002 	str.w	ip, [r5, r2]
 80077ea:	9a03      	ldr	r2, [sp, #12]
 80077ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077f0:	3304      	adds	r3, #4
 80077f2:	f1b9 0f00 	cmp.w	r9, #0
 80077f6:	d020      	beq.n	800783a <__multiply+0x142>
 80077f8:	6829      	ldr	r1, [r5, #0]
 80077fa:	f104 0c14 	add.w	ip, r4, #20
 80077fe:	46ae      	mov	lr, r5
 8007800:	f04f 0a00 	mov.w	sl, #0
 8007804:	f8bc b000 	ldrh.w	fp, [ip]
 8007808:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800780c:	fb09 220b 	mla	r2, r9, fp, r2
 8007810:	4492      	add	sl, r2
 8007812:	b289      	uxth	r1, r1
 8007814:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007818:	f84e 1b04 	str.w	r1, [lr], #4
 800781c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007820:	f8be 1000 	ldrh.w	r1, [lr]
 8007824:	0c12      	lsrs	r2, r2, #16
 8007826:	fb09 1102 	mla	r1, r9, r2, r1
 800782a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800782e:	4567      	cmp	r7, ip
 8007830:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007834:	d8e6      	bhi.n	8007804 <__multiply+0x10c>
 8007836:	9a01      	ldr	r2, [sp, #4]
 8007838:	50a9      	str	r1, [r5, r2]
 800783a:	3504      	adds	r5, #4
 800783c:	e79a      	b.n	8007774 <__multiply+0x7c>
 800783e:	3e01      	subs	r6, #1
 8007840:	e79c      	b.n	800777c <__multiply+0x84>
 8007842:	bf00      	nop
 8007844:	0800aba3 	.word	0x0800aba3
 8007848:	0800abb4 	.word	0x0800abb4

0800784c <__pow5mult>:
 800784c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007850:	4615      	mov	r5, r2
 8007852:	f012 0203 	ands.w	r2, r2, #3
 8007856:	4606      	mov	r6, r0
 8007858:	460f      	mov	r7, r1
 800785a:	d007      	beq.n	800786c <__pow5mult+0x20>
 800785c:	4c25      	ldr	r4, [pc, #148]	; (80078f4 <__pow5mult+0xa8>)
 800785e:	3a01      	subs	r2, #1
 8007860:	2300      	movs	r3, #0
 8007862:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007866:	f7ff fe9b 	bl	80075a0 <__multadd>
 800786a:	4607      	mov	r7, r0
 800786c:	10ad      	asrs	r5, r5, #2
 800786e:	d03d      	beq.n	80078ec <__pow5mult+0xa0>
 8007870:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007872:	b97c      	cbnz	r4, 8007894 <__pow5mult+0x48>
 8007874:	2010      	movs	r0, #16
 8007876:	f7fe f9b5 	bl	8005be4 <malloc>
 800787a:	4602      	mov	r2, r0
 800787c:	6270      	str	r0, [r6, #36]	; 0x24
 800787e:	b928      	cbnz	r0, 800788c <__pow5mult+0x40>
 8007880:	4b1d      	ldr	r3, [pc, #116]	; (80078f8 <__pow5mult+0xac>)
 8007882:	481e      	ldr	r0, [pc, #120]	; (80078fc <__pow5mult+0xb0>)
 8007884:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007888:	f000 f9d4 	bl	8007c34 <__assert_func>
 800788c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007890:	6004      	str	r4, [r0, #0]
 8007892:	60c4      	str	r4, [r0, #12]
 8007894:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007898:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800789c:	b94c      	cbnz	r4, 80078b2 <__pow5mult+0x66>
 800789e:	f240 2171 	movw	r1, #625	; 0x271
 80078a2:	4630      	mov	r0, r6
 80078a4:	f7ff ff12 	bl	80076cc <__i2b>
 80078a8:	2300      	movs	r3, #0
 80078aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80078ae:	4604      	mov	r4, r0
 80078b0:	6003      	str	r3, [r0, #0]
 80078b2:	f04f 0900 	mov.w	r9, #0
 80078b6:	07eb      	lsls	r3, r5, #31
 80078b8:	d50a      	bpl.n	80078d0 <__pow5mult+0x84>
 80078ba:	4639      	mov	r1, r7
 80078bc:	4622      	mov	r2, r4
 80078be:	4630      	mov	r0, r6
 80078c0:	f7ff ff1a 	bl	80076f8 <__multiply>
 80078c4:	4639      	mov	r1, r7
 80078c6:	4680      	mov	r8, r0
 80078c8:	4630      	mov	r0, r6
 80078ca:	f7ff fe47 	bl	800755c <_Bfree>
 80078ce:	4647      	mov	r7, r8
 80078d0:	106d      	asrs	r5, r5, #1
 80078d2:	d00b      	beq.n	80078ec <__pow5mult+0xa0>
 80078d4:	6820      	ldr	r0, [r4, #0]
 80078d6:	b938      	cbnz	r0, 80078e8 <__pow5mult+0x9c>
 80078d8:	4622      	mov	r2, r4
 80078da:	4621      	mov	r1, r4
 80078dc:	4630      	mov	r0, r6
 80078de:	f7ff ff0b 	bl	80076f8 <__multiply>
 80078e2:	6020      	str	r0, [r4, #0]
 80078e4:	f8c0 9000 	str.w	r9, [r0]
 80078e8:	4604      	mov	r4, r0
 80078ea:	e7e4      	b.n	80078b6 <__pow5mult+0x6a>
 80078ec:	4638      	mov	r0, r7
 80078ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f2:	bf00      	nop
 80078f4:	0800ad00 	.word	0x0800ad00
 80078f8:	0800ab31 	.word	0x0800ab31
 80078fc:	0800abb4 	.word	0x0800abb4

08007900 <__lshift>:
 8007900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007904:	460c      	mov	r4, r1
 8007906:	6849      	ldr	r1, [r1, #4]
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800790e:	68a3      	ldr	r3, [r4, #8]
 8007910:	4607      	mov	r7, r0
 8007912:	4691      	mov	r9, r2
 8007914:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007918:	f108 0601 	add.w	r6, r8, #1
 800791c:	42b3      	cmp	r3, r6
 800791e:	db0b      	blt.n	8007938 <__lshift+0x38>
 8007920:	4638      	mov	r0, r7
 8007922:	f7ff fddb 	bl	80074dc <_Balloc>
 8007926:	4605      	mov	r5, r0
 8007928:	b948      	cbnz	r0, 800793e <__lshift+0x3e>
 800792a:	4602      	mov	r2, r0
 800792c:	4b2a      	ldr	r3, [pc, #168]	; (80079d8 <__lshift+0xd8>)
 800792e:	482b      	ldr	r0, [pc, #172]	; (80079dc <__lshift+0xdc>)
 8007930:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007934:	f000 f97e 	bl	8007c34 <__assert_func>
 8007938:	3101      	adds	r1, #1
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	e7ee      	b.n	800791c <__lshift+0x1c>
 800793e:	2300      	movs	r3, #0
 8007940:	f100 0114 	add.w	r1, r0, #20
 8007944:	f100 0210 	add.w	r2, r0, #16
 8007948:	4618      	mov	r0, r3
 800794a:	4553      	cmp	r3, sl
 800794c:	db37      	blt.n	80079be <__lshift+0xbe>
 800794e:	6920      	ldr	r0, [r4, #16]
 8007950:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007954:	f104 0314 	add.w	r3, r4, #20
 8007958:	f019 091f 	ands.w	r9, r9, #31
 800795c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007960:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007964:	d02f      	beq.n	80079c6 <__lshift+0xc6>
 8007966:	f1c9 0e20 	rsb	lr, r9, #32
 800796a:	468a      	mov	sl, r1
 800796c:	f04f 0c00 	mov.w	ip, #0
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	fa02 f209 	lsl.w	r2, r2, r9
 8007976:	ea42 020c 	orr.w	r2, r2, ip
 800797a:	f84a 2b04 	str.w	r2, [sl], #4
 800797e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007982:	4298      	cmp	r0, r3
 8007984:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007988:	d8f2      	bhi.n	8007970 <__lshift+0x70>
 800798a:	1b03      	subs	r3, r0, r4
 800798c:	3b15      	subs	r3, #21
 800798e:	f023 0303 	bic.w	r3, r3, #3
 8007992:	3304      	adds	r3, #4
 8007994:	f104 0215 	add.w	r2, r4, #21
 8007998:	4290      	cmp	r0, r2
 800799a:	bf38      	it	cc
 800799c:	2304      	movcc	r3, #4
 800799e:	f841 c003 	str.w	ip, [r1, r3]
 80079a2:	f1bc 0f00 	cmp.w	ip, #0
 80079a6:	d001      	beq.n	80079ac <__lshift+0xac>
 80079a8:	f108 0602 	add.w	r6, r8, #2
 80079ac:	3e01      	subs	r6, #1
 80079ae:	4638      	mov	r0, r7
 80079b0:	612e      	str	r6, [r5, #16]
 80079b2:	4621      	mov	r1, r4
 80079b4:	f7ff fdd2 	bl	800755c <_Bfree>
 80079b8:	4628      	mov	r0, r5
 80079ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079be:	f842 0f04 	str.w	r0, [r2, #4]!
 80079c2:	3301      	adds	r3, #1
 80079c4:	e7c1      	b.n	800794a <__lshift+0x4a>
 80079c6:	3904      	subs	r1, #4
 80079c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80079cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80079d0:	4298      	cmp	r0, r3
 80079d2:	d8f9      	bhi.n	80079c8 <__lshift+0xc8>
 80079d4:	e7ea      	b.n	80079ac <__lshift+0xac>
 80079d6:	bf00      	nop
 80079d8:	0800aba3 	.word	0x0800aba3
 80079dc:	0800abb4 	.word	0x0800abb4

080079e0 <__mcmp>:
 80079e0:	b530      	push	{r4, r5, lr}
 80079e2:	6902      	ldr	r2, [r0, #16]
 80079e4:	690c      	ldr	r4, [r1, #16]
 80079e6:	1b12      	subs	r2, r2, r4
 80079e8:	d10e      	bne.n	8007a08 <__mcmp+0x28>
 80079ea:	f100 0314 	add.w	r3, r0, #20
 80079ee:	3114      	adds	r1, #20
 80079f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80079f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80079f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80079fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a00:	42a5      	cmp	r5, r4
 8007a02:	d003      	beq.n	8007a0c <__mcmp+0x2c>
 8007a04:	d305      	bcc.n	8007a12 <__mcmp+0x32>
 8007a06:	2201      	movs	r2, #1
 8007a08:	4610      	mov	r0, r2
 8007a0a:	bd30      	pop	{r4, r5, pc}
 8007a0c:	4283      	cmp	r3, r0
 8007a0e:	d3f3      	bcc.n	80079f8 <__mcmp+0x18>
 8007a10:	e7fa      	b.n	8007a08 <__mcmp+0x28>
 8007a12:	f04f 32ff 	mov.w	r2, #4294967295
 8007a16:	e7f7      	b.n	8007a08 <__mcmp+0x28>

08007a18 <__mdiff>:
 8007a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	4606      	mov	r6, r0
 8007a20:	4611      	mov	r1, r2
 8007a22:	4620      	mov	r0, r4
 8007a24:	4690      	mov	r8, r2
 8007a26:	f7ff ffdb 	bl	80079e0 <__mcmp>
 8007a2a:	1e05      	subs	r5, r0, #0
 8007a2c:	d110      	bne.n	8007a50 <__mdiff+0x38>
 8007a2e:	4629      	mov	r1, r5
 8007a30:	4630      	mov	r0, r6
 8007a32:	f7ff fd53 	bl	80074dc <_Balloc>
 8007a36:	b930      	cbnz	r0, 8007a46 <__mdiff+0x2e>
 8007a38:	4b3a      	ldr	r3, [pc, #232]	; (8007b24 <__mdiff+0x10c>)
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	f240 2132 	movw	r1, #562	; 0x232
 8007a40:	4839      	ldr	r0, [pc, #228]	; (8007b28 <__mdiff+0x110>)
 8007a42:	f000 f8f7 	bl	8007c34 <__assert_func>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a50:	bfa4      	itt	ge
 8007a52:	4643      	movge	r3, r8
 8007a54:	46a0      	movge	r8, r4
 8007a56:	4630      	mov	r0, r6
 8007a58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a5c:	bfa6      	itte	ge
 8007a5e:	461c      	movge	r4, r3
 8007a60:	2500      	movge	r5, #0
 8007a62:	2501      	movlt	r5, #1
 8007a64:	f7ff fd3a 	bl	80074dc <_Balloc>
 8007a68:	b920      	cbnz	r0, 8007a74 <__mdiff+0x5c>
 8007a6a:	4b2e      	ldr	r3, [pc, #184]	; (8007b24 <__mdiff+0x10c>)
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a72:	e7e5      	b.n	8007a40 <__mdiff+0x28>
 8007a74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a78:	6926      	ldr	r6, [r4, #16]
 8007a7a:	60c5      	str	r5, [r0, #12]
 8007a7c:	f104 0914 	add.w	r9, r4, #20
 8007a80:	f108 0514 	add.w	r5, r8, #20
 8007a84:	f100 0e14 	add.w	lr, r0, #20
 8007a88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007a8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a90:	f108 0210 	add.w	r2, r8, #16
 8007a94:	46f2      	mov	sl, lr
 8007a96:	2100      	movs	r1, #0
 8007a98:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007aa0:	fa1f f883 	uxth.w	r8, r3
 8007aa4:	fa11 f18b 	uxtah	r1, r1, fp
 8007aa8:	0c1b      	lsrs	r3, r3, #16
 8007aaa:	eba1 0808 	sub.w	r8, r1, r8
 8007aae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ab2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ab6:	fa1f f888 	uxth.w	r8, r8
 8007aba:	1419      	asrs	r1, r3, #16
 8007abc:	454e      	cmp	r6, r9
 8007abe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ac2:	f84a 3b04 	str.w	r3, [sl], #4
 8007ac6:	d8e7      	bhi.n	8007a98 <__mdiff+0x80>
 8007ac8:	1b33      	subs	r3, r6, r4
 8007aca:	3b15      	subs	r3, #21
 8007acc:	f023 0303 	bic.w	r3, r3, #3
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	3415      	adds	r4, #21
 8007ad4:	42a6      	cmp	r6, r4
 8007ad6:	bf38      	it	cc
 8007ad8:	2304      	movcc	r3, #4
 8007ada:	441d      	add	r5, r3
 8007adc:	4473      	add	r3, lr
 8007ade:	469e      	mov	lr, r3
 8007ae0:	462e      	mov	r6, r5
 8007ae2:	4566      	cmp	r6, ip
 8007ae4:	d30e      	bcc.n	8007b04 <__mdiff+0xec>
 8007ae6:	f10c 0203 	add.w	r2, ip, #3
 8007aea:	1b52      	subs	r2, r2, r5
 8007aec:	f022 0203 	bic.w	r2, r2, #3
 8007af0:	3d03      	subs	r5, #3
 8007af2:	45ac      	cmp	ip, r5
 8007af4:	bf38      	it	cc
 8007af6:	2200      	movcc	r2, #0
 8007af8:	441a      	add	r2, r3
 8007afa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007afe:	b17b      	cbz	r3, 8007b20 <__mdiff+0x108>
 8007b00:	6107      	str	r7, [r0, #16]
 8007b02:	e7a3      	b.n	8007a4c <__mdiff+0x34>
 8007b04:	f856 8b04 	ldr.w	r8, [r6], #4
 8007b08:	fa11 f288 	uxtah	r2, r1, r8
 8007b0c:	1414      	asrs	r4, r2, #16
 8007b0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007b12:	b292      	uxth	r2, r2
 8007b14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007b18:	f84e 2b04 	str.w	r2, [lr], #4
 8007b1c:	1421      	asrs	r1, r4, #16
 8007b1e:	e7e0      	b.n	8007ae2 <__mdiff+0xca>
 8007b20:	3f01      	subs	r7, #1
 8007b22:	e7ea      	b.n	8007afa <__mdiff+0xe2>
 8007b24:	0800aba3 	.word	0x0800aba3
 8007b28:	0800abb4 	.word	0x0800abb4

08007b2c <__d2b>:
 8007b2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b30:	4689      	mov	r9, r1
 8007b32:	2101      	movs	r1, #1
 8007b34:	ec57 6b10 	vmov	r6, r7, d0
 8007b38:	4690      	mov	r8, r2
 8007b3a:	f7ff fccf 	bl	80074dc <_Balloc>
 8007b3e:	4604      	mov	r4, r0
 8007b40:	b930      	cbnz	r0, 8007b50 <__d2b+0x24>
 8007b42:	4602      	mov	r2, r0
 8007b44:	4b25      	ldr	r3, [pc, #148]	; (8007bdc <__d2b+0xb0>)
 8007b46:	4826      	ldr	r0, [pc, #152]	; (8007be0 <__d2b+0xb4>)
 8007b48:	f240 310a 	movw	r1, #778	; 0x30a
 8007b4c:	f000 f872 	bl	8007c34 <__assert_func>
 8007b50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007b54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b58:	bb35      	cbnz	r5, 8007ba8 <__d2b+0x7c>
 8007b5a:	2e00      	cmp	r6, #0
 8007b5c:	9301      	str	r3, [sp, #4]
 8007b5e:	d028      	beq.n	8007bb2 <__d2b+0x86>
 8007b60:	4668      	mov	r0, sp
 8007b62:	9600      	str	r6, [sp, #0]
 8007b64:	f7ff fd82 	bl	800766c <__lo0bits>
 8007b68:	9900      	ldr	r1, [sp, #0]
 8007b6a:	b300      	cbz	r0, 8007bae <__d2b+0x82>
 8007b6c:	9a01      	ldr	r2, [sp, #4]
 8007b6e:	f1c0 0320 	rsb	r3, r0, #32
 8007b72:	fa02 f303 	lsl.w	r3, r2, r3
 8007b76:	430b      	orrs	r3, r1
 8007b78:	40c2      	lsrs	r2, r0
 8007b7a:	6163      	str	r3, [r4, #20]
 8007b7c:	9201      	str	r2, [sp, #4]
 8007b7e:	9b01      	ldr	r3, [sp, #4]
 8007b80:	61a3      	str	r3, [r4, #24]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bf14      	ite	ne
 8007b86:	2202      	movne	r2, #2
 8007b88:	2201      	moveq	r2, #1
 8007b8a:	6122      	str	r2, [r4, #16]
 8007b8c:	b1d5      	cbz	r5, 8007bc4 <__d2b+0x98>
 8007b8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b92:	4405      	add	r5, r0
 8007b94:	f8c9 5000 	str.w	r5, [r9]
 8007b98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b9c:	f8c8 0000 	str.w	r0, [r8]
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	b003      	add	sp, #12
 8007ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ba8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bac:	e7d5      	b.n	8007b5a <__d2b+0x2e>
 8007bae:	6161      	str	r1, [r4, #20]
 8007bb0:	e7e5      	b.n	8007b7e <__d2b+0x52>
 8007bb2:	a801      	add	r0, sp, #4
 8007bb4:	f7ff fd5a 	bl	800766c <__lo0bits>
 8007bb8:	9b01      	ldr	r3, [sp, #4]
 8007bba:	6163      	str	r3, [r4, #20]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	6122      	str	r2, [r4, #16]
 8007bc0:	3020      	adds	r0, #32
 8007bc2:	e7e3      	b.n	8007b8c <__d2b+0x60>
 8007bc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007bcc:	f8c9 0000 	str.w	r0, [r9]
 8007bd0:	6918      	ldr	r0, [r3, #16]
 8007bd2:	f7ff fd2b 	bl	800762c <__hi0bits>
 8007bd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bda:	e7df      	b.n	8007b9c <__d2b+0x70>
 8007bdc:	0800aba3 	.word	0x0800aba3
 8007be0:	0800abb4 	.word	0x0800abb4

08007be4 <_calloc_r>:
 8007be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007be6:	fba1 2402 	umull	r2, r4, r1, r2
 8007bea:	b94c      	cbnz	r4, 8007c00 <_calloc_r+0x1c>
 8007bec:	4611      	mov	r1, r2
 8007bee:	9201      	str	r2, [sp, #4]
 8007bf0:	f7fe f874 	bl	8005cdc <_malloc_r>
 8007bf4:	9a01      	ldr	r2, [sp, #4]
 8007bf6:	4605      	mov	r5, r0
 8007bf8:	b930      	cbnz	r0, 8007c08 <_calloc_r+0x24>
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	b003      	add	sp, #12
 8007bfe:	bd30      	pop	{r4, r5, pc}
 8007c00:	220c      	movs	r2, #12
 8007c02:	6002      	str	r2, [r0, #0]
 8007c04:	2500      	movs	r5, #0
 8007c06:	e7f8      	b.n	8007bfa <_calloc_r+0x16>
 8007c08:	4621      	mov	r1, r4
 8007c0a:	f7fd fff3 	bl	8005bf4 <memset>
 8007c0e:	e7f4      	b.n	8007bfa <_calloc_r+0x16>

08007c10 <_read_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4d07      	ldr	r5, [pc, #28]	; (8007c30 <_read_r+0x20>)
 8007c14:	4604      	mov	r4, r0
 8007c16:	4608      	mov	r0, r1
 8007c18:	4611      	mov	r1, r2
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	602a      	str	r2, [r5, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f7f9 fef0 	bl	8001a04 <_read>
 8007c24:	1c43      	adds	r3, r0, #1
 8007c26:	d102      	bne.n	8007c2e <_read_r+0x1e>
 8007c28:	682b      	ldr	r3, [r5, #0]
 8007c2a:	b103      	cbz	r3, 8007c2e <_read_r+0x1e>
 8007c2c:	6023      	str	r3, [r4, #0]
 8007c2e:	bd38      	pop	{r3, r4, r5, pc}
 8007c30:	20000524 	.word	0x20000524

08007c34 <__assert_func>:
 8007c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c36:	4614      	mov	r4, r2
 8007c38:	461a      	mov	r2, r3
 8007c3a:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <__assert_func+0x2c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4605      	mov	r5, r0
 8007c40:	68d8      	ldr	r0, [r3, #12]
 8007c42:	b14c      	cbz	r4, 8007c58 <__assert_func+0x24>
 8007c44:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <__assert_func+0x30>)
 8007c46:	9100      	str	r1, [sp, #0]
 8007c48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c4c:	4906      	ldr	r1, [pc, #24]	; (8007c68 <__assert_func+0x34>)
 8007c4e:	462b      	mov	r3, r5
 8007c50:	f000 f9a6 	bl	8007fa0 <fiprintf>
 8007c54:	f000 fc12 	bl	800847c <abort>
 8007c58:	4b04      	ldr	r3, [pc, #16]	; (8007c6c <__assert_func+0x38>)
 8007c5a:	461c      	mov	r4, r3
 8007c5c:	e7f3      	b.n	8007c46 <__assert_func+0x12>
 8007c5e:	bf00      	nop
 8007c60:	20000010 	.word	0x20000010
 8007c64:	0800ad0c 	.word	0x0800ad0c
 8007c68:	0800ad19 	.word	0x0800ad19
 8007c6c:	0800ad47 	.word	0x0800ad47

08007c70 <__sflush_r>:
 8007c70:	898a      	ldrh	r2, [r1, #12]
 8007c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c76:	4605      	mov	r5, r0
 8007c78:	0710      	lsls	r0, r2, #28
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	d458      	bmi.n	8007d30 <__sflush_r+0xc0>
 8007c7e:	684b      	ldr	r3, [r1, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	dc05      	bgt.n	8007c90 <__sflush_r+0x20>
 8007c84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	dc02      	bgt.n	8007c90 <__sflush_r+0x20>
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c92:	2e00      	cmp	r6, #0
 8007c94:	d0f9      	beq.n	8007c8a <__sflush_r+0x1a>
 8007c96:	2300      	movs	r3, #0
 8007c98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c9c:	682f      	ldr	r7, [r5, #0]
 8007c9e:	602b      	str	r3, [r5, #0]
 8007ca0:	d032      	beq.n	8007d08 <__sflush_r+0x98>
 8007ca2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	075a      	lsls	r2, r3, #29
 8007ca8:	d505      	bpl.n	8007cb6 <__sflush_r+0x46>
 8007caa:	6863      	ldr	r3, [r4, #4]
 8007cac:	1ac0      	subs	r0, r0, r3
 8007cae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cb0:	b10b      	cbz	r3, 8007cb6 <__sflush_r+0x46>
 8007cb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cb4:	1ac0      	subs	r0, r0, r3
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4602      	mov	r2, r0
 8007cba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cbc:	6a21      	ldr	r1, [r4, #32]
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	47b0      	blx	r6
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	89a3      	ldrh	r3, [r4, #12]
 8007cc6:	d106      	bne.n	8007cd6 <__sflush_r+0x66>
 8007cc8:	6829      	ldr	r1, [r5, #0]
 8007cca:	291d      	cmp	r1, #29
 8007ccc:	d82c      	bhi.n	8007d28 <__sflush_r+0xb8>
 8007cce:	4a2a      	ldr	r2, [pc, #168]	; (8007d78 <__sflush_r+0x108>)
 8007cd0:	40ca      	lsrs	r2, r1
 8007cd2:	07d6      	lsls	r6, r2, #31
 8007cd4:	d528      	bpl.n	8007d28 <__sflush_r+0xb8>
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	6062      	str	r2, [r4, #4]
 8007cda:	04d9      	lsls	r1, r3, #19
 8007cdc:	6922      	ldr	r2, [r4, #16]
 8007cde:	6022      	str	r2, [r4, #0]
 8007ce0:	d504      	bpl.n	8007cec <__sflush_r+0x7c>
 8007ce2:	1c42      	adds	r2, r0, #1
 8007ce4:	d101      	bne.n	8007cea <__sflush_r+0x7a>
 8007ce6:	682b      	ldr	r3, [r5, #0]
 8007ce8:	b903      	cbnz	r3, 8007cec <__sflush_r+0x7c>
 8007cea:	6560      	str	r0, [r4, #84]	; 0x54
 8007cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cee:	602f      	str	r7, [r5, #0]
 8007cf0:	2900      	cmp	r1, #0
 8007cf2:	d0ca      	beq.n	8007c8a <__sflush_r+0x1a>
 8007cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cf8:	4299      	cmp	r1, r3
 8007cfa:	d002      	beq.n	8007d02 <__sflush_r+0x92>
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	f7fd ff81 	bl	8005c04 <_free_r>
 8007d02:	2000      	movs	r0, #0
 8007d04:	6360      	str	r0, [r4, #52]	; 0x34
 8007d06:	e7c1      	b.n	8007c8c <__sflush_r+0x1c>
 8007d08:	6a21      	ldr	r1, [r4, #32]
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	47b0      	blx	r6
 8007d10:	1c41      	adds	r1, r0, #1
 8007d12:	d1c7      	bne.n	8007ca4 <__sflush_r+0x34>
 8007d14:	682b      	ldr	r3, [r5, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0c4      	beq.n	8007ca4 <__sflush_r+0x34>
 8007d1a:	2b1d      	cmp	r3, #29
 8007d1c:	d001      	beq.n	8007d22 <__sflush_r+0xb2>
 8007d1e:	2b16      	cmp	r3, #22
 8007d20:	d101      	bne.n	8007d26 <__sflush_r+0xb6>
 8007d22:	602f      	str	r7, [r5, #0]
 8007d24:	e7b1      	b.n	8007c8a <__sflush_r+0x1a>
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d2c:	81a3      	strh	r3, [r4, #12]
 8007d2e:	e7ad      	b.n	8007c8c <__sflush_r+0x1c>
 8007d30:	690f      	ldr	r7, [r1, #16]
 8007d32:	2f00      	cmp	r7, #0
 8007d34:	d0a9      	beq.n	8007c8a <__sflush_r+0x1a>
 8007d36:	0793      	lsls	r3, r2, #30
 8007d38:	680e      	ldr	r6, [r1, #0]
 8007d3a:	bf08      	it	eq
 8007d3c:	694b      	ldreq	r3, [r1, #20]
 8007d3e:	600f      	str	r7, [r1, #0]
 8007d40:	bf18      	it	ne
 8007d42:	2300      	movne	r3, #0
 8007d44:	eba6 0807 	sub.w	r8, r6, r7
 8007d48:	608b      	str	r3, [r1, #8]
 8007d4a:	f1b8 0f00 	cmp.w	r8, #0
 8007d4e:	dd9c      	ble.n	8007c8a <__sflush_r+0x1a>
 8007d50:	6a21      	ldr	r1, [r4, #32]
 8007d52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d54:	4643      	mov	r3, r8
 8007d56:	463a      	mov	r2, r7
 8007d58:	4628      	mov	r0, r5
 8007d5a:	47b0      	blx	r6
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	dc06      	bgt.n	8007d6e <__sflush_r+0xfe>
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d66:	81a3      	strh	r3, [r4, #12]
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6c:	e78e      	b.n	8007c8c <__sflush_r+0x1c>
 8007d6e:	4407      	add	r7, r0
 8007d70:	eba8 0800 	sub.w	r8, r8, r0
 8007d74:	e7e9      	b.n	8007d4a <__sflush_r+0xda>
 8007d76:	bf00      	nop
 8007d78:	20400001 	.word	0x20400001

08007d7c <_fflush_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	690b      	ldr	r3, [r1, #16]
 8007d80:	4605      	mov	r5, r0
 8007d82:	460c      	mov	r4, r1
 8007d84:	b913      	cbnz	r3, 8007d8c <_fflush_r+0x10>
 8007d86:	2500      	movs	r5, #0
 8007d88:	4628      	mov	r0, r5
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
 8007d8c:	b118      	cbz	r0, 8007d96 <_fflush_r+0x1a>
 8007d8e:	6983      	ldr	r3, [r0, #24]
 8007d90:	b90b      	cbnz	r3, 8007d96 <_fflush_r+0x1a>
 8007d92:	f000 f887 	bl	8007ea4 <__sinit>
 8007d96:	4b14      	ldr	r3, [pc, #80]	; (8007de8 <_fflush_r+0x6c>)
 8007d98:	429c      	cmp	r4, r3
 8007d9a:	d11b      	bne.n	8007dd4 <_fflush_r+0x58>
 8007d9c:	686c      	ldr	r4, [r5, #4]
 8007d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0ef      	beq.n	8007d86 <_fflush_r+0xa>
 8007da6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007da8:	07d0      	lsls	r0, r2, #31
 8007daa:	d404      	bmi.n	8007db6 <_fflush_r+0x3a>
 8007dac:	0599      	lsls	r1, r3, #22
 8007dae:	d402      	bmi.n	8007db6 <_fflush_r+0x3a>
 8007db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007db2:	f000 f927 	bl	8008004 <__retarget_lock_acquire_recursive>
 8007db6:	4628      	mov	r0, r5
 8007db8:	4621      	mov	r1, r4
 8007dba:	f7ff ff59 	bl	8007c70 <__sflush_r>
 8007dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dc0:	07da      	lsls	r2, r3, #31
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	d4e0      	bmi.n	8007d88 <_fflush_r+0xc>
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	059b      	lsls	r3, r3, #22
 8007dca:	d4dd      	bmi.n	8007d88 <_fflush_r+0xc>
 8007dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dce:	f000 f91a 	bl	8008006 <__retarget_lock_release_recursive>
 8007dd2:	e7d9      	b.n	8007d88 <_fflush_r+0xc>
 8007dd4:	4b05      	ldr	r3, [pc, #20]	; (8007dec <_fflush_r+0x70>)
 8007dd6:	429c      	cmp	r4, r3
 8007dd8:	d101      	bne.n	8007dde <_fflush_r+0x62>
 8007dda:	68ac      	ldr	r4, [r5, #8]
 8007ddc:	e7df      	b.n	8007d9e <_fflush_r+0x22>
 8007dde:	4b04      	ldr	r3, [pc, #16]	; (8007df0 <_fflush_r+0x74>)
 8007de0:	429c      	cmp	r4, r3
 8007de2:	bf08      	it	eq
 8007de4:	68ec      	ldreq	r4, [r5, #12]
 8007de6:	e7da      	b.n	8007d9e <_fflush_r+0x22>
 8007de8:	0800ae6c 	.word	0x0800ae6c
 8007dec:	0800ae8c 	.word	0x0800ae8c
 8007df0:	0800ae4c 	.word	0x0800ae4c

08007df4 <std>:
 8007df4:	2300      	movs	r3, #0
 8007df6:	b510      	push	{r4, lr}
 8007df8:	4604      	mov	r4, r0
 8007dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8007dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e02:	6083      	str	r3, [r0, #8]
 8007e04:	8181      	strh	r1, [r0, #12]
 8007e06:	6643      	str	r3, [r0, #100]	; 0x64
 8007e08:	81c2      	strh	r2, [r0, #14]
 8007e0a:	6183      	str	r3, [r0, #24]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	2208      	movs	r2, #8
 8007e10:	305c      	adds	r0, #92	; 0x5c
 8007e12:	f7fd feef 	bl	8005bf4 <memset>
 8007e16:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <std+0x38>)
 8007e18:	6263      	str	r3, [r4, #36]	; 0x24
 8007e1a:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <std+0x3c>)
 8007e1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e1e:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <std+0x40>)
 8007e20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e22:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <std+0x44>)
 8007e24:	6224      	str	r4, [r4, #32]
 8007e26:	6323      	str	r3, [r4, #48]	; 0x30
 8007e28:	bd10      	pop	{r4, pc}
 8007e2a:	bf00      	nop
 8007e2c:	080066b9 	.word	0x080066b9
 8007e30:	080066db 	.word	0x080066db
 8007e34:	08006713 	.word	0x08006713
 8007e38:	08006737 	.word	0x08006737

08007e3c <_cleanup_r>:
 8007e3c:	4901      	ldr	r1, [pc, #4]	; (8007e44 <_cleanup_r+0x8>)
 8007e3e:	f000 b8c1 	b.w	8007fc4 <_fwalk_reent>
 8007e42:	bf00      	nop
 8007e44:	08007d7d 	.word	0x08007d7d

08007e48 <__sfmoreglue>:
 8007e48:	b570      	push	{r4, r5, r6, lr}
 8007e4a:	2268      	movs	r2, #104	; 0x68
 8007e4c:	1e4d      	subs	r5, r1, #1
 8007e4e:	4355      	muls	r5, r2
 8007e50:	460e      	mov	r6, r1
 8007e52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e56:	f7fd ff41 	bl	8005cdc <_malloc_r>
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	b140      	cbz	r0, 8007e70 <__sfmoreglue+0x28>
 8007e5e:	2100      	movs	r1, #0
 8007e60:	e9c0 1600 	strd	r1, r6, [r0]
 8007e64:	300c      	adds	r0, #12
 8007e66:	60a0      	str	r0, [r4, #8]
 8007e68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e6c:	f7fd fec2 	bl	8005bf4 <memset>
 8007e70:	4620      	mov	r0, r4
 8007e72:	bd70      	pop	{r4, r5, r6, pc}

08007e74 <__sfp_lock_acquire>:
 8007e74:	4801      	ldr	r0, [pc, #4]	; (8007e7c <__sfp_lock_acquire+0x8>)
 8007e76:	f000 b8c5 	b.w	8008004 <__retarget_lock_acquire_recursive>
 8007e7a:	bf00      	nop
 8007e7c:	20000529 	.word	0x20000529

08007e80 <__sfp_lock_release>:
 8007e80:	4801      	ldr	r0, [pc, #4]	; (8007e88 <__sfp_lock_release+0x8>)
 8007e82:	f000 b8c0 	b.w	8008006 <__retarget_lock_release_recursive>
 8007e86:	bf00      	nop
 8007e88:	20000529 	.word	0x20000529

08007e8c <__sinit_lock_acquire>:
 8007e8c:	4801      	ldr	r0, [pc, #4]	; (8007e94 <__sinit_lock_acquire+0x8>)
 8007e8e:	f000 b8b9 	b.w	8008004 <__retarget_lock_acquire_recursive>
 8007e92:	bf00      	nop
 8007e94:	2000052a 	.word	0x2000052a

08007e98 <__sinit_lock_release>:
 8007e98:	4801      	ldr	r0, [pc, #4]	; (8007ea0 <__sinit_lock_release+0x8>)
 8007e9a:	f000 b8b4 	b.w	8008006 <__retarget_lock_release_recursive>
 8007e9e:	bf00      	nop
 8007ea0:	2000052a 	.word	0x2000052a

08007ea4 <__sinit>:
 8007ea4:	b510      	push	{r4, lr}
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	f7ff fff0 	bl	8007e8c <__sinit_lock_acquire>
 8007eac:	69a3      	ldr	r3, [r4, #24]
 8007eae:	b11b      	cbz	r3, 8007eb8 <__sinit+0x14>
 8007eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eb4:	f7ff bff0 	b.w	8007e98 <__sinit_lock_release>
 8007eb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ebc:	6523      	str	r3, [r4, #80]	; 0x50
 8007ebe:	4b13      	ldr	r3, [pc, #76]	; (8007f0c <__sinit+0x68>)
 8007ec0:	4a13      	ldr	r2, [pc, #76]	; (8007f10 <__sinit+0x6c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ec6:	42a3      	cmp	r3, r4
 8007ec8:	bf04      	itt	eq
 8007eca:	2301      	moveq	r3, #1
 8007ecc:	61a3      	streq	r3, [r4, #24]
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f000 f820 	bl	8007f14 <__sfp>
 8007ed4:	6060      	str	r0, [r4, #4]
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f000 f81c 	bl	8007f14 <__sfp>
 8007edc:	60a0      	str	r0, [r4, #8]
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f000 f818 	bl	8007f14 <__sfp>
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	60e0      	str	r0, [r4, #12]
 8007ee8:	2104      	movs	r1, #4
 8007eea:	6860      	ldr	r0, [r4, #4]
 8007eec:	f7ff ff82 	bl	8007df4 <std>
 8007ef0:	68a0      	ldr	r0, [r4, #8]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	2109      	movs	r1, #9
 8007ef6:	f7ff ff7d 	bl	8007df4 <std>
 8007efa:	68e0      	ldr	r0, [r4, #12]
 8007efc:	2202      	movs	r2, #2
 8007efe:	2112      	movs	r1, #18
 8007f00:	f7ff ff78 	bl	8007df4 <std>
 8007f04:	2301      	movs	r3, #1
 8007f06:	61a3      	str	r3, [r4, #24]
 8007f08:	e7d2      	b.n	8007eb0 <__sinit+0xc>
 8007f0a:	bf00      	nop
 8007f0c:	0800aaec 	.word	0x0800aaec
 8007f10:	08007e3d 	.word	0x08007e3d

08007f14 <__sfp>:
 8007f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f16:	4607      	mov	r7, r0
 8007f18:	f7ff ffac 	bl	8007e74 <__sfp_lock_acquire>
 8007f1c:	4b1e      	ldr	r3, [pc, #120]	; (8007f98 <__sfp+0x84>)
 8007f1e:	681e      	ldr	r6, [r3, #0]
 8007f20:	69b3      	ldr	r3, [r6, #24]
 8007f22:	b913      	cbnz	r3, 8007f2a <__sfp+0x16>
 8007f24:	4630      	mov	r0, r6
 8007f26:	f7ff ffbd 	bl	8007ea4 <__sinit>
 8007f2a:	3648      	adds	r6, #72	; 0x48
 8007f2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	d503      	bpl.n	8007f3c <__sfp+0x28>
 8007f34:	6833      	ldr	r3, [r6, #0]
 8007f36:	b30b      	cbz	r3, 8007f7c <__sfp+0x68>
 8007f38:	6836      	ldr	r6, [r6, #0]
 8007f3a:	e7f7      	b.n	8007f2c <__sfp+0x18>
 8007f3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f40:	b9d5      	cbnz	r5, 8007f78 <__sfp+0x64>
 8007f42:	4b16      	ldr	r3, [pc, #88]	; (8007f9c <__sfp+0x88>)
 8007f44:	60e3      	str	r3, [r4, #12]
 8007f46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f4a:	6665      	str	r5, [r4, #100]	; 0x64
 8007f4c:	f000 f859 	bl	8008002 <__retarget_lock_init_recursive>
 8007f50:	f7ff ff96 	bl	8007e80 <__sfp_lock_release>
 8007f54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f5c:	6025      	str	r5, [r4, #0]
 8007f5e:	61a5      	str	r5, [r4, #24]
 8007f60:	2208      	movs	r2, #8
 8007f62:	4629      	mov	r1, r5
 8007f64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f68:	f7fd fe44 	bl	8005bf4 <memset>
 8007f6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f74:	4620      	mov	r0, r4
 8007f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f78:	3468      	adds	r4, #104	; 0x68
 8007f7a:	e7d9      	b.n	8007f30 <__sfp+0x1c>
 8007f7c:	2104      	movs	r1, #4
 8007f7e:	4638      	mov	r0, r7
 8007f80:	f7ff ff62 	bl	8007e48 <__sfmoreglue>
 8007f84:	4604      	mov	r4, r0
 8007f86:	6030      	str	r0, [r6, #0]
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d1d5      	bne.n	8007f38 <__sfp+0x24>
 8007f8c:	f7ff ff78 	bl	8007e80 <__sfp_lock_release>
 8007f90:	230c      	movs	r3, #12
 8007f92:	603b      	str	r3, [r7, #0]
 8007f94:	e7ee      	b.n	8007f74 <__sfp+0x60>
 8007f96:	bf00      	nop
 8007f98:	0800aaec 	.word	0x0800aaec
 8007f9c:	ffff0001 	.word	0xffff0001

08007fa0 <fiprintf>:
 8007fa0:	b40e      	push	{r1, r2, r3}
 8007fa2:	b503      	push	{r0, r1, lr}
 8007fa4:	4601      	mov	r1, r0
 8007fa6:	ab03      	add	r3, sp, #12
 8007fa8:	4805      	ldr	r0, [pc, #20]	; (8007fc0 <fiprintf+0x20>)
 8007faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fae:	6800      	ldr	r0, [r0, #0]
 8007fb0:	9301      	str	r3, [sp, #4]
 8007fb2:	f000 f865 	bl	8008080 <_vfiprintf_r>
 8007fb6:	b002      	add	sp, #8
 8007fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fbc:	b003      	add	sp, #12
 8007fbe:	4770      	bx	lr
 8007fc0:	20000010 	.word	0x20000010

08007fc4 <_fwalk_reent>:
 8007fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc8:	4606      	mov	r6, r0
 8007fca:	4688      	mov	r8, r1
 8007fcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fd0:	2700      	movs	r7, #0
 8007fd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fd6:	f1b9 0901 	subs.w	r9, r9, #1
 8007fda:	d505      	bpl.n	8007fe8 <_fwalk_reent+0x24>
 8007fdc:	6824      	ldr	r4, [r4, #0]
 8007fde:	2c00      	cmp	r4, #0
 8007fe0:	d1f7      	bne.n	8007fd2 <_fwalk_reent+0xe>
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fe8:	89ab      	ldrh	r3, [r5, #12]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d907      	bls.n	8007ffe <_fwalk_reent+0x3a>
 8007fee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	d003      	beq.n	8007ffe <_fwalk_reent+0x3a>
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	47c0      	blx	r8
 8007ffc:	4307      	orrs	r7, r0
 8007ffe:	3568      	adds	r5, #104	; 0x68
 8008000:	e7e9      	b.n	8007fd6 <_fwalk_reent+0x12>

08008002 <__retarget_lock_init_recursive>:
 8008002:	4770      	bx	lr

08008004 <__retarget_lock_acquire_recursive>:
 8008004:	4770      	bx	lr

08008006 <__retarget_lock_release_recursive>:
 8008006:	4770      	bx	lr

08008008 <__ascii_mbtowc>:
 8008008:	b082      	sub	sp, #8
 800800a:	b901      	cbnz	r1, 800800e <__ascii_mbtowc+0x6>
 800800c:	a901      	add	r1, sp, #4
 800800e:	b142      	cbz	r2, 8008022 <__ascii_mbtowc+0x1a>
 8008010:	b14b      	cbz	r3, 8008026 <__ascii_mbtowc+0x1e>
 8008012:	7813      	ldrb	r3, [r2, #0]
 8008014:	600b      	str	r3, [r1, #0]
 8008016:	7812      	ldrb	r2, [r2, #0]
 8008018:	1e10      	subs	r0, r2, #0
 800801a:	bf18      	it	ne
 800801c:	2001      	movne	r0, #1
 800801e:	b002      	add	sp, #8
 8008020:	4770      	bx	lr
 8008022:	4610      	mov	r0, r2
 8008024:	e7fb      	b.n	800801e <__ascii_mbtowc+0x16>
 8008026:	f06f 0001 	mvn.w	r0, #1
 800802a:	e7f8      	b.n	800801e <__ascii_mbtowc+0x16>

0800802c <__sfputc_r>:
 800802c:	6893      	ldr	r3, [r2, #8]
 800802e:	3b01      	subs	r3, #1
 8008030:	2b00      	cmp	r3, #0
 8008032:	b410      	push	{r4}
 8008034:	6093      	str	r3, [r2, #8]
 8008036:	da08      	bge.n	800804a <__sfputc_r+0x1e>
 8008038:	6994      	ldr	r4, [r2, #24]
 800803a:	42a3      	cmp	r3, r4
 800803c:	db01      	blt.n	8008042 <__sfputc_r+0x16>
 800803e:	290a      	cmp	r1, #10
 8008040:	d103      	bne.n	800804a <__sfputc_r+0x1e>
 8008042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008046:	f000 b94b 	b.w	80082e0 <__swbuf_r>
 800804a:	6813      	ldr	r3, [r2, #0]
 800804c:	1c58      	adds	r0, r3, #1
 800804e:	6010      	str	r0, [r2, #0]
 8008050:	7019      	strb	r1, [r3, #0]
 8008052:	4608      	mov	r0, r1
 8008054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008058:	4770      	bx	lr

0800805a <__sfputs_r>:
 800805a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805c:	4606      	mov	r6, r0
 800805e:	460f      	mov	r7, r1
 8008060:	4614      	mov	r4, r2
 8008062:	18d5      	adds	r5, r2, r3
 8008064:	42ac      	cmp	r4, r5
 8008066:	d101      	bne.n	800806c <__sfputs_r+0x12>
 8008068:	2000      	movs	r0, #0
 800806a:	e007      	b.n	800807c <__sfputs_r+0x22>
 800806c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008070:	463a      	mov	r2, r7
 8008072:	4630      	mov	r0, r6
 8008074:	f7ff ffda 	bl	800802c <__sfputc_r>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d1f3      	bne.n	8008064 <__sfputs_r+0xa>
 800807c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008080 <_vfiprintf_r>:
 8008080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	460d      	mov	r5, r1
 8008086:	b09d      	sub	sp, #116	; 0x74
 8008088:	4614      	mov	r4, r2
 800808a:	4698      	mov	r8, r3
 800808c:	4606      	mov	r6, r0
 800808e:	b118      	cbz	r0, 8008098 <_vfiprintf_r+0x18>
 8008090:	6983      	ldr	r3, [r0, #24]
 8008092:	b90b      	cbnz	r3, 8008098 <_vfiprintf_r+0x18>
 8008094:	f7ff ff06 	bl	8007ea4 <__sinit>
 8008098:	4b89      	ldr	r3, [pc, #548]	; (80082c0 <_vfiprintf_r+0x240>)
 800809a:	429d      	cmp	r5, r3
 800809c:	d11b      	bne.n	80080d6 <_vfiprintf_r+0x56>
 800809e:	6875      	ldr	r5, [r6, #4]
 80080a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080a2:	07d9      	lsls	r1, r3, #31
 80080a4:	d405      	bmi.n	80080b2 <_vfiprintf_r+0x32>
 80080a6:	89ab      	ldrh	r3, [r5, #12]
 80080a8:	059a      	lsls	r2, r3, #22
 80080aa:	d402      	bmi.n	80080b2 <_vfiprintf_r+0x32>
 80080ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080ae:	f7ff ffa9 	bl	8008004 <__retarget_lock_acquire_recursive>
 80080b2:	89ab      	ldrh	r3, [r5, #12]
 80080b4:	071b      	lsls	r3, r3, #28
 80080b6:	d501      	bpl.n	80080bc <_vfiprintf_r+0x3c>
 80080b8:	692b      	ldr	r3, [r5, #16]
 80080ba:	b9eb      	cbnz	r3, 80080f8 <_vfiprintf_r+0x78>
 80080bc:	4629      	mov	r1, r5
 80080be:	4630      	mov	r0, r6
 80080c0:	f000 f96e 	bl	80083a0 <__swsetup_r>
 80080c4:	b1c0      	cbz	r0, 80080f8 <_vfiprintf_r+0x78>
 80080c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080c8:	07dc      	lsls	r4, r3, #31
 80080ca:	d50e      	bpl.n	80080ea <_vfiprintf_r+0x6a>
 80080cc:	f04f 30ff 	mov.w	r0, #4294967295
 80080d0:	b01d      	add	sp, #116	; 0x74
 80080d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d6:	4b7b      	ldr	r3, [pc, #492]	; (80082c4 <_vfiprintf_r+0x244>)
 80080d8:	429d      	cmp	r5, r3
 80080da:	d101      	bne.n	80080e0 <_vfiprintf_r+0x60>
 80080dc:	68b5      	ldr	r5, [r6, #8]
 80080de:	e7df      	b.n	80080a0 <_vfiprintf_r+0x20>
 80080e0:	4b79      	ldr	r3, [pc, #484]	; (80082c8 <_vfiprintf_r+0x248>)
 80080e2:	429d      	cmp	r5, r3
 80080e4:	bf08      	it	eq
 80080e6:	68f5      	ldreq	r5, [r6, #12]
 80080e8:	e7da      	b.n	80080a0 <_vfiprintf_r+0x20>
 80080ea:	89ab      	ldrh	r3, [r5, #12]
 80080ec:	0598      	lsls	r0, r3, #22
 80080ee:	d4ed      	bmi.n	80080cc <_vfiprintf_r+0x4c>
 80080f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080f2:	f7ff ff88 	bl	8008006 <__retarget_lock_release_recursive>
 80080f6:	e7e9      	b.n	80080cc <_vfiprintf_r+0x4c>
 80080f8:	2300      	movs	r3, #0
 80080fa:	9309      	str	r3, [sp, #36]	; 0x24
 80080fc:	2320      	movs	r3, #32
 80080fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008102:	f8cd 800c 	str.w	r8, [sp, #12]
 8008106:	2330      	movs	r3, #48	; 0x30
 8008108:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80082cc <_vfiprintf_r+0x24c>
 800810c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008110:	f04f 0901 	mov.w	r9, #1
 8008114:	4623      	mov	r3, r4
 8008116:	469a      	mov	sl, r3
 8008118:	f813 2b01 	ldrb.w	r2, [r3], #1
 800811c:	b10a      	cbz	r2, 8008122 <_vfiprintf_r+0xa2>
 800811e:	2a25      	cmp	r2, #37	; 0x25
 8008120:	d1f9      	bne.n	8008116 <_vfiprintf_r+0x96>
 8008122:	ebba 0b04 	subs.w	fp, sl, r4
 8008126:	d00b      	beq.n	8008140 <_vfiprintf_r+0xc0>
 8008128:	465b      	mov	r3, fp
 800812a:	4622      	mov	r2, r4
 800812c:	4629      	mov	r1, r5
 800812e:	4630      	mov	r0, r6
 8008130:	f7ff ff93 	bl	800805a <__sfputs_r>
 8008134:	3001      	adds	r0, #1
 8008136:	f000 80aa 	beq.w	800828e <_vfiprintf_r+0x20e>
 800813a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800813c:	445a      	add	r2, fp
 800813e:	9209      	str	r2, [sp, #36]	; 0x24
 8008140:	f89a 3000 	ldrb.w	r3, [sl]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 80a2 	beq.w	800828e <_vfiprintf_r+0x20e>
 800814a:	2300      	movs	r3, #0
 800814c:	f04f 32ff 	mov.w	r2, #4294967295
 8008150:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008154:	f10a 0a01 	add.w	sl, sl, #1
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	9307      	str	r3, [sp, #28]
 800815c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008160:	931a      	str	r3, [sp, #104]	; 0x68
 8008162:	4654      	mov	r4, sl
 8008164:	2205      	movs	r2, #5
 8008166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800816a:	4858      	ldr	r0, [pc, #352]	; (80082cc <_vfiprintf_r+0x24c>)
 800816c:	f7f8 f840 	bl	80001f0 <memchr>
 8008170:	9a04      	ldr	r2, [sp, #16]
 8008172:	b9d8      	cbnz	r0, 80081ac <_vfiprintf_r+0x12c>
 8008174:	06d1      	lsls	r1, r2, #27
 8008176:	bf44      	itt	mi
 8008178:	2320      	movmi	r3, #32
 800817a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800817e:	0713      	lsls	r3, r2, #28
 8008180:	bf44      	itt	mi
 8008182:	232b      	movmi	r3, #43	; 0x2b
 8008184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008188:	f89a 3000 	ldrb.w	r3, [sl]
 800818c:	2b2a      	cmp	r3, #42	; 0x2a
 800818e:	d015      	beq.n	80081bc <_vfiprintf_r+0x13c>
 8008190:	9a07      	ldr	r2, [sp, #28]
 8008192:	4654      	mov	r4, sl
 8008194:	2000      	movs	r0, #0
 8008196:	f04f 0c0a 	mov.w	ip, #10
 800819a:	4621      	mov	r1, r4
 800819c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081a0:	3b30      	subs	r3, #48	; 0x30
 80081a2:	2b09      	cmp	r3, #9
 80081a4:	d94e      	bls.n	8008244 <_vfiprintf_r+0x1c4>
 80081a6:	b1b0      	cbz	r0, 80081d6 <_vfiprintf_r+0x156>
 80081a8:	9207      	str	r2, [sp, #28]
 80081aa:	e014      	b.n	80081d6 <_vfiprintf_r+0x156>
 80081ac:	eba0 0308 	sub.w	r3, r0, r8
 80081b0:	fa09 f303 	lsl.w	r3, r9, r3
 80081b4:	4313      	orrs	r3, r2
 80081b6:	9304      	str	r3, [sp, #16]
 80081b8:	46a2      	mov	sl, r4
 80081ba:	e7d2      	b.n	8008162 <_vfiprintf_r+0xe2>
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	1d19      	adds	r1, r3, #4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	9103      	str	r1, [sp, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	bfbb      	ittet	lt
 80081c8:	425b      	neglt	r3, r3
 80081ca:	f042 0202 	orrlt.w	r2, r2, #2
 80081ce:	9307      	strge	r3, [sp, #28]
 80081d0:	9307      	strlt	r3, [sp, #28]
 80081d2:	bfb8      	it	lt
 80081d4:	9204      	strlt	r2, [sp, #16]
 80081d6:	7823      	ldrb	r3, [r4, #0]
 80081d8:	2b2e      	cmp	r3, #46	; 0x2e
 80081da:	d10c      	bne.n	80081f6 <_vfiprintf_r+0x176>
 80081dc:	7863      	ldrb	r3, [r4, #1]
 80081de:	2b2a      	cmp	r3, #42	; 0x2a
 80081e0:	d135      	bne.n	800824e <_vfiprintf_r+0x1ce>
 80081e2:	9b03      	ldr	r3, [sp, #12]
 80081e4:	1d1a      	adds	r2, r3, #4
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	9203      	str	r2, [sp, #12]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	bfb8      	it	lt
 80081ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80081f2:	3402      	adds	r4, #2
 80081f4:	9305      	str	r3, [sp, #20]
 80081f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80082dc <_vfiprintf_r+0x25c>
 80081fa:	7821      	ldrb	r1, [r4, #0]
 80081fc:	2203      	movs	r2, #3
 80081fe:	4650      	mov	r0, sl
 8008200:	f7f7 fff6 	bl	80001f0 <memchr>
 8008204:	b140      	cbz	r0, 8008218 <_vfiprintf_r+0x198>
 8008206:	2340      	movs	r3, #64	; 0x40
 8008208:	eba0 000a 	sub.w	r0, r0, sl
 800820c:	fa03 f000 	lsl.w	r0, r3, r0
 8008210:	9b04      	ldr	r3, [sp, #16]
 8008212:	4303      	orrs	r3, r0
 8008214:	3401      	adds	r4, #1
 8008216:	9304      	str	r3, [sp, #16]
 8008218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800821c:	482c      	ldr	r0, [pc, #176]	; (80082d0 <_vfiprintf_r+0x250>)
 800821e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008222:	2206      	movs	r2, #6
 8008224:	f7f7 ffe4 	bl	80001f0 <memchr>
 8008228:	2800      	cmp	r0, #0
 800822a:	d03f      	beq.n	80082ac <_vfiprintf_r+0x22c>
 800822c:	4b29      	ldr	r3, [pc, #164]	; (80082d4 <_vfiprintf_r+0x254>)
 800822e:	bb1b      	cbnz	r3, 8008278 <_vfiprintf_r+0x1f8>
 8008230:	9b03      	ldr	r3, [sp, #12]
 8008232:	3307      	adds	r3, #7
 8008234:	f023 0307 	bic.w	r3, r3, #7
 8008238:	3308      	adds	r3, #8
 800823a:	9303      	str	r3, [sp, #12]
 800823c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800823e:	443b      	add	r3, r7
 8008240:	9309      	str	r3, [sp, #36]	; 0x24
 8008242:	e767      	b.n	8008114 <_vfiprintf_r+0x94>
 8008244:	fb0c 3202 	mla	r2, ip, r2, r3
 8008248:	460c      	mov	r4, r1
 800824a:	2001      	movs	r0, #1
 800824c:	e7a5      	b.n	800819a <_vfiprintf_r+0x11a>
 800824e:	2300      	movs	r3, #0
 8008250:	3401      	adds	r4, #1
 8008252:	9305      	str	r3, [sp, #20]
 8008254:	4619      	mov	r1, r3
 8008256:	f04f 0c0a 	mov.w	ip, #10
 800825a:	4620      	mov	r0, r4
 800825c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008260:	3a30      	subs	r2, #48	; 0x30
 8008262:	2a09      	cmp	r2, #9
 8008264:	d903      	bls.n	800826e <_vfiprintf_r+0x1ee>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0c5      	beq.n	80081f6 <_vfiprintf_r+0x176>
 800826a:	9105      	str	r1, [sp, #20]
 800826c:	e7c3      	b.n	80081f6 <_vfiprintf_r+0x176>
 800826e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008272:	4604      	mov	r4, r0
 8008274:	2301      	movs	r3, #1
 8008276:	e7f0      	b.n	800825a <_vfiprintf_r+0x1da>
 8008278:	ab03      	add	r3, sp, #12
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	462a      	mov	r2, r5
 800827e:	4b16      	ldr	r3, [pc, #88]	; (80082d8 <_vfiprintf_r+0x258>)
 8008280:	a904      	add	r1, sp, #16
 8008282:	4630      	mov	r0, r6
 8008284:	f7fd fe3e 	bl	8005f04 <_printf_float>
 8008288:	4607      	mov	r7, r0
 800828a:	1c78      	adds	r0, r7, #1
 800828c:	d1d6      	bne.n	800823c <_vfiprintf_r+0x1bc>
 800828e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008290:	07d9      	lsls	r1, r3, #31
 8008292:	d405      	bmi.n	80082a0 <_vfiprintf_r+0x220>
 8008294:	89ab      	ldrh	r3, [r5, #12]
 8008296:	059a      	lsls	r2, r3, #22
 8008298:	d402      	bmi.n	80082a0 <_vfiprintf_r+0x220>
 800829a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800829c:	f7ff feb3 	bl	8008006 <__retarget_lock_release_recursive>
 80082a0:	89ab      	ldrh	r3, [r5, #12]
 80082a2:	065b      	lsls	r3, r3, #25
 80082a4:	f53f af12 	bmi.w	80080cc <_vfiprintf_r+0x4c>
 80082a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082aa:	e711      	b.n	80080d0 <_vfiprintf_r+0x50>
 80082ac:	ab03      	add	r3, sp, #12
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	462a      	mov	r2, r5
 80082b2:	4b09      	ldr	r3, [pc, #36]	; (80082d8 <_vfiprintf_r+0x258>)
 80082b4:	a904      	add	r1, sp, #16
 80082b6:	4630      	mov	r0, r6
 80082b8:	f7fe f8c8 	bl	800644c <_printf_i>
 80082bc:	e7e4      	b.n	8008288 <_vfiprintf_r+0x208>
 80082be:	bf00      	nop
 80082c0:	0800ae6c 	.word	0x0800ae6c
 80082c4:	0800ae8c 	.word	0x0800ae8c
 80082c8:	0800ae4c 	.word	0x0800ae4c
 80082cc:	0800aeb6 	.word	0x0800aeb6
 80082d0:	0800aec0 	.word	0x0800aec0
 80082d4:	08005f05 	.word	0x08005f05
 80082d8:	0800805b 	.word	0x0800805b
 80082dc:	0800aebc 	.word	0x0800aebc

080082e0 <__swbuf_r>:
 80082e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e2:	460e      	mov	r6, r1
 80082e4:	4614      	mov	r4, r2
 80082e6:	4605      	mov	r5, r0
 80082e8:	b118      	cbz	r0, 80082f2 <__swbuf_r+0x12>
 80082ea:	6983      	ldr	r3, [r0, #24]
 80082ec:	b90b      	cbnz	r3, 80082f2 <__swbuf_r+0x12>
 80082ee:	f7ff fdd9 	bl	8007ea4 <__sinit>
 80082f2:	4b21      	ldr	r3, [pc, #132]	; (8008378 <__swbuf_r+0x98>)
 80082f4:	429c      	cmp	r4, r3
 80082f6:	d12b      	bne.n	8008350 <__swbuf_r+0x70>
 80082f8:	686c      	ldr	r4, [r5, #4]
 80082fa:	69a3      	ldr	r3, [r4, #24]
 80082fc:	60a3      	str	r3, [r4, #8]
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	071a      	lsls	r2, r3, #28
 8008302:	d52f      	bpl.n	8008364 <__swbuf_r+0x84>
 8008304:	6923      	ldr	r3, [r4, #16]
 8008306:	b36b      	cbz	r3, 8008364 <__swbuf_r+0x84>
 8008308:	6923      	ldr	r3, [r4, #16]
 800830a:	6820      	ldr	r0, [r4, #0]
 800830c:	1ac0      	subs	r0, r0, r3
 800830e:	6963      	ldr	r3, [r4, #20]
 8008310:	b2f6      	uxtb	r6, r6
 8008312:	4283      	cmp	r3, r0
 8008314:	4637      	mov	r7, r6
 8008316:	dc04      	bgt.n	8008322 <__swbuf_r+0x42>
 8008318:	4621      	mov	r1, r4
 800831a:	4628      	mov	r0, r5
 800831c:	f7ff fd2e 	bl	8007d7c <_fflush_r>
 8008320:	bb30      	cbnz	r0, 8008370 <__swbuf_r+0x90>
 8008322:	68a3      	ldr	r3, [r4, #8]
 8008324:	3b01      	subs	r3, #1
 8008326:	60a3      	str	r3, [r4, #8]
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	1c5a      	adds	r2, r3, #1
 800832c:	6022      	str	r2, [r4, #0]
 800832e:	701e      	strb	r6, [r3, #0]
 8008330:	6963      	ldr	r3, [r4, #20]
 8008332:	3001      	adds	r0, #1
 8008334:	4283      	cmp	r3, r0
 8008336:	d004      	beq.n	8008342 <__swbuf_r+0x62>
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	07db      	lsls	r3, r3, #31
 800833c:	d506      	bpl.n	800834c <__swbuf_r+0x6c>
 800833e:	2e0a      	cmp	r6, #10
 8008340:	d104      	bne.n	800834c <__swbuf_r+0x6c>
 8008342:	4621      	mov	r1, r4
 8008344:	4628      	mov	r0, r5
 8008346:	f7ff fd19 	bl	8007d7c <_fflush_r>
 800834a:	b988      	cbnz	r0, 8008370 <__swbuf_r+0x90>
 800834c:	4638      	mov	r0, r7
 800834e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008350:	4b0a      	ldr	r3, [pc, #40]	; (800837c <__swbuf_r+0x9c>)
 8008352:	429c      	cmp	r4, r3
 8008354:	d101      	bne.n	800835a <__swbuf_r+0x7a>
 8008356:	68ac      	ldr	r4, [r5, #8]
 8008358:	e7cf      	b.n	80082fa <__swbuf_r+0x1a>
 800835a:	4b09      	ldr	r3, [pc, #36]	; (8008380 <__swbuf_r+0xa0>)
 800835c:	429c      	cmp	r4, r3
 800835e:	bf08      	it	eq
 8008360:	68ec      	ldreq	r4, [r5, #12]
 8008362:	e7ca      	b.n	80082fa <__swbuf_r+0x1a>
 8008364:	4621      	mov	r1, r4
 8008366:	4628      	mov	r0, r5
 8008368:	f000 f81a 	bl	80083a0 <__swsetup_r>
 800836c:	2800      	cmp	r0, #0
 800836e:	d0cb      	beq.n	8008308 <__swbuf_r+0x28>
 8008370:	f04f 37ff 	mov.w	r7, #4294967295
 8008374:	e7ea      	b.n	800834c <__swbuf_r+0x6c>
 8008376:	bf00      	nop
 8008378:	0800ae6c 	.word	0x0800ae6c
 800837c:	0800ae8c 	.word	0x0800ae8c
 8008380:	0800ae4c 	.word	0x0800ae4c

08008384 <__ascii_wctomb>:
 8008384:	b149      	cbz	r1, 800839a <__ascii_wctomb+0x16>
 8008386:	2aff      	cmp	r2, #255	; 0xff
 8008388:	bf85      	ittet	hi
 800838a:	238a      	movhi	r3, #138	; 0x8a
 800838c:	6003      	strhi	r3, [r0, #0]
 800838e:	700a      	strbls	r2, [r1, #0]
 8008390:	f04f 30ff 	movhi.w	r0, #4294967295
 8008394:	bf98      	it	ls
 8008396:	2001      	movls	r0, #1
 8008398:	4770      	bx	lr
 800839a:	4608      	mov	r0, r1
 800839c:	4770      	bx	lr
	...

080083a0 <__swsetup_r>:
 80083a0:	4b32      	ldr	r3, [pc, #200]	; (800846c <__swsetup_r+0xcc>)
 80083a2:	b570      	push	{r4, r5, r6, lr}
 80083a4:	681d      	ldr	r5, [r3, #0]
 80083a6:	4606      	mov	r6, r0
 80083a8:	460c      	mov	r4, r1
 80083aa:	b125      	cbz	r5, 80083b6 <__swsetup_r+0x16>
 80083ac:	69ab      	ldr	r3, [r5, #24]
 80083ae:	b913      	cbnz	r3, 80083b6 <__swsetup_r+0x16>
 80083b0:	4628      	mov	r0, r5
 80083b2:	f7ff fd77 	bl	8007ea4 <__sinit>
 80083b6:	4b2e      	ldr	r3, [pc, #184]	; (8008470 <__swsetup_r+0xd0>)
 80083b8:	429c      	cmp	r4, r3
 80083ba:	d10f      	bne.n	80083dc <__swsetup_r+0x3c>
 80083bc:	686c      	ldr	r4, [r5, #4]
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083c4:	0719      	lsls	r1, r3, #28
 80083c6:	d42c      	bmi.n	8008422 <__swsetup_r+0x82>
 80083c8:	06dd      	lsls	r5, r3, #27
 80083ca:	d411      	bmi.n	80083f0 <__swsetup_r+0x50>
 80083cc:	2309      	movs	r3, #9
 80083ce:	6033      	str	r3, [r6, #0]
 80083d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083d4:	81a3      	strh	r3, [r4, #12]
 80083d6:	f04f 30ff 	mov.w	r0, #4294967295
 80083da:	e03e      	b.n	800845a <__swsetup_r+0xba>
 80083dc:	4b25      	ldr	r3, [pc, #148]	; (8008474 <__swsetup_r+0xd4>)
 80083de:	429c      	cmp	r4, r3
 80083e0:	d101      	bne.n	80083e6 <__swsetup_r+0x46>
 80083e2:	68ac      	ldr	r4, [r5, #8]
 80083e4:	e7eb      	b.n	80083be <__swsetup_r+0x1e>
 80083e6:	4b24      	ldr	r3, [pc, #144]	; (8008478 <__swsetup_r+0xd8>)
 80083e8:	429c      	cmp	r4, r3
 80083ea:	bf08      	it	eq
 80083ec:	68ec      	ldreq	r4, [r5, #12]
 80083ee:	e7e6      	b.n	80083be <__swsetup_r+0x1e>
 80083f0:	0758      	lsls	r0, r3, #29
 80083f2:	d512      	bpl.n	800841a <__swsetup_r+0x7a>
 80083f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083f6:	b141      	cbz	r1, 800840a <__swsetup_r+0x6a>
 80083f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083fc:	4299      	cmp	r1, r3
 80083fe:	d002      	beq.n	8008406 <__swsetup_r+0x66>
 8008400:	4630      	mov	r0, r6
 8008402:	f7fd fbff 	bl	8005c04 <_free_r>
 8008406:	2300      	movs	r3, #0
 8008408:	6363      	str	r3, [r4, #52]	; 0x34
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008410:	81a3      	strh	r3, [r4, #12]
 8008412:	2300      	movs	r3, #0
 8008414:	6063      	str	r3, [r4, #4]
 8008416:	6923      	ldr	r3, [r4, #16]
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	f043 0308 	orr.w	r3, r3, #8
 8008420:	81a3      	strh	r3, [r4, #12]
 8008422:	6923      	ldr	r3, [r4, #16]
 8008424:	b94b      	cbnz	r3, 800843a <__swsetup_r+0x9a>
 8008426:	89a3      	ldrh	r3, [r4, #12]
 8008428:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800842c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008430:	d003      	beq.n	800843a <__swsetup_r+0x9a>
 8008432:	4621      	mov	r1, r4
 8008434:	4630      	mov	r0, r6
 8008436:	f000 f84d 	bl	80084d4 <__smakebuf_r>
 800843a:	89a0      	ldrh	r0, [r4, #12]
 800843c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008440:	f010 0301 	ands.w	r3, r0, #1
 8008444:	d00a      	beq.n	800845c <__swsetup_r+0xbc>
 8008446:	2300      	movs	r3, #0
 8008448:	60a3      	str	r3, [r4, #8]
 800844a:	6963      	ldr	r3, [r4, #20]
 800844c:	425b      	negs	r3, r3
 800844e:	61a3      	str	r3, [r4, #24]
 8008450:	6923      	ldr	r3, [r4, #16]
 8008452:	b943      	cbnz	r3, 8008466 <__swsetup_r+0xc6>
 8008454:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008458:	d1ba      	bne.n	80083d0 <__swsetup_r+0x30>
 800845a:	bd70      	pop	{r4, r5, r6, pc}
 800845c:	0781      	lsls	r1, r0, #30
 800845e:	bf58      	it	pl
 8008460:	6963      	ldrpl	r3, [r4, #20]
 8008462:	60a3      	str	r3, [r4, #8]
 8008464:	e7f4      	b.n	8008450 <__swsetup_r+0xb0>
 8008466:	2000      	movs	r0, #0
 8008468:	e7f7      	b.n	800845a <__swsetup_r+0xba>
 800846a:	bf00      	nop
 800846c:	20000010 	.word	0x20000010
 8008470:	0800ae6c 	.word	0x0800ae6c
 8008474:	0800ae8c 	.word	0x0800ae8c
 8008478:	0800ae4c 	.word	0x0800ae4c

0800847c <abort>:
 800847c:	b508      	push	{r3, lr}
 800847e:	2006      	movs	r0, #6
 8008480:	f000 f890 	bl	80085a4 <raise>
 8008484:	2001      	movs	r0, #1
 8008486:	f7f9 fab3 	bl	80019f0 <_exit>

0800848a <__swhatbuf_r>:
 800848a:	b570      	push	{r4, r5, r6, lr}
 800848c:	460e      	mov	r6, r1
 800848e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008492:	2900      	cmp	r1, #0
 8008494:	b096      	sub	sp, #88	; 0x58
 8008496:	4614      	mov	r4, r2
 8008498:	461d      	mov	r5, r3
 800849a:	da08      	bge.n	80084ae <__swhatbuf_r+0x24>
 800849c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	602a      	str	r2, [r5, #0]
 80084a4:	061a      	lsls	r2, r3, #24
 80084a6:	d410      	bmi.n	80084ca <__swhatbuf_r+0x40>
 80084a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ac:	e00e      	b.n	80084cc <__swhatbuf_r+0x42>
 80084ae:	466a      	mov	r2, sp
 80084b0:	f000 f894 	bl	80085dc <_fstat_r>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	dbf1      	blt.n	800849c <__swhatbuf_r+0x12>
 80084b8:	9a01      	ldr	r2, [sp, #4]
 80084ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084c2:	425a      	negs	r2, r3
 80084c4:	415a      	adcs	r2, r3
 80084c6:	602a      	str	r2, [r5, #0]
 80084c8:	e7ee      	b.n	80084a8 <__swhatbuf_r+0x1e>
 80084ca:	2340      	movs	r3, #64	; 0x40
 80084cc:	2000      	movs	r0, #0
 80084ce:	6023      	str	r3, [r4, #0]
 80084d0:	b016      	add	sp, #88	; 0x58
 80084d2:	bd70      	pop	{r4, r5, r6, pc}

080084d4 <__smakebuf_r>:
 80084d4:	898b      	ldrh	r3, [r1, #12]
 80084d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084d8:	079d      	lsls	r5, r3, #30
 80084da:	4606      	mov	r6, r0
 80084dc:	460c      	mov	r4, r1
 80084de:	d507      	bpl.n	80084f0 <__smakebuf_r+0x1c>
 80084e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	6123      	str	r3, [r4, #16]
 80084e8:	2301      	movs	r3, #1
 80084ea:	6163      	str	r3, [r4, #20]
 80084ec:	b002      	add	sp, #8
 80084ee:	bd70      	pop	{r4, r5, r6, pc}
 80084f0:	ab01      	add	r3, sp, #4
 80084f2:	466a      	mov	r2, sp
 80084f4:	f7ff ffc9 	bl	800848a <__swhatbuf_r>
 80084f8:	9900      	ldr	r1, [sp, #0]
 80084fa:	4605      	mov	r5, r0
 80084fc:	4630      	mov	r0, r6
 80084fe:	f7fd fbed 	bl	8005cdc <_malloc_r>
 8008502:	b948      	cbnz	r0, 8008518 <__smakebuf_r+0x44>
 8008504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008508:	059a      	lsls	r2, r3, #22
 800850a:	d4ef      	bmi.n	80084ec <__smakebuf_r+0x18>
 800850c:	f023 0303 	bic.w	r3, r3, #3
 8008510:	f043 0302 	orr.w	r3, r3, #2
 8008514:	81a3      	strh	r3, [r4, #12]
 8008516:	e7e3      	b.n	80084e0 <__smakebuf_r+0xc>
 8008518:	4b0d      	ldr	r3, [pc, #52]	; (8008550 <__smakebuf_r+0x7c>)
 800851a:	62b3      	str	r3, [r6, #40]	; 0x28
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	6020      	str	r0, [r4, #0]
 8008520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008524:	81a3      	strh	r3, [r4, #12]
 8008526:	9b00      	ldr	r3, [sp, #0]
 8008528:	6163      	str	r3, [r4, #20]
 800852a:	9b01      	ldr	r3, [sp, #4]
 800852c:	6120      	str	r0, [r4, #16]
 800852e:	b15b      	cbz	r3, 8008548 <__smakebuf_r+0x74>
 8008530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008534:	4630      	mov	r0, r6
 8008536:	f000 f863 	bl	8008600 <_isatty_r>
 800853a:	b128      	cbz	r0, 8008548 <__smakebuf_r+0x74>
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	f023 0303 	bic.w	r3, r3, #3
 8008542:	f043 0301 	orr.w	r3, r3, #1
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	89a0      	ldrh	r0, [r4, #12]
 800854a:	4305      	orrs	r5, r0
 800854c:	81a5      	strh	r5, [r4, #12]
 800854e:	e7cd      	b.n	80084ec <__smakebuf_r+0x18>
 8008550:	08007e3d 	.word	0x08007e3d

08008554 <_raise_r>:
 8008554:	291f      	cmp	r1, #31
 8008556:	b538      	push	{r3, r4, r5, lr}
 8008558:	4604      	mov	r4, r0
 800855a:	460d      	mov	r5, r1
 800855c:	d904      	bls.n	8008568 <_raise_r+0x14>
 800855e:	2316      	movs	r3, #22
 8008560:	6003      	str	r3, [r0, #0]
 8008562:	f04f 30ff 	mov.w	r0, #4294967295
 8008566:	bd38      	pop	{r3, r4, r5, pc}
 8008568:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800856a:	b112      	cbz	r2, 8008572 <_raise_r+0x1e>
 800856c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008570:	b94b      	cbnz	r3, 8008586 <_raise_r+0x32>
 8008572:	4620      	mov	r0, r4
 8008574:	f000 f830 	bl	80085d8 <_getpid_r>
 8008578:	462a      	mov	r2, r5
 800857a:	4601      	mov	r1, r0
 800857c:	4620      	mov	r0, r4
 800857e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008582:	f000 b817 	b.w	80085b4 <_kill_r>
 8008586:	2b01      	cmp	r3, #1
 8008588:	d00a      	beq.n	80085a0 <_raise_r+0x4c>
 800858a:	1c59      	adds	r1, r3, #1
 800858c:	d103      	bne.n	8008596 <_raise_r+0x42>
 800858e:	2316      	movs	r3, #22
 8008590:	6003      	str	r3, [r0, #0]
 8008592:	2001      	movs	r0, #1
 8008594:	e7e7      	b.n	8008566 <_raise_r+0x12>
 8008596:	2400      	movs	r4, #0
 8008598:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800859c:	4628      	mov	r0, r5
 800859e:	4798      	blx	r3
 80085a0:	2000      	movs	r0, #0
 80085a2:	e7e0      	b.n	8008566 <_raise_r+0x12>

080085a4 <raise>:
 80085a4:	4b02      	ldr	r3, [pc, #8]	; (80085b0 <raise+0xc>)
 80085a6:	4601      	mov	r1, r0
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	f7ff bfd3 	b.w	8008554 <_raise_r>
 80085ae:	bf00      	nop
 80085b0:	20000010 	.word	0x20000010

080085b4 <_kill_r>:
 80085b4:	b538      	push	{r3, r4, r5, lr}
 80085b6:	4d07      	ldr	r5, [pc, #28]	; (80085d4 <_kill_r+0x20>)
 80085b8:	2300      	movs	r3, #0
 80085ba:	4604      	mov	r4, r0
 80085bc:	4608      	mov	r0, r1
 80085be:	4611      	mov	r1, r2
 80085c0:	602b      	str	r3, [r5, #0]
 80085c2:	f7f9 fa05 	bl	80019d0 <_kill>
 80085c6:	1c43      	adds	r3, r0, #1
 80085c8:	d102      	bne.n	80085d0 <_kill_r+0x1c>
 80085ca:	682b      	ldr	r3, [r5, #0]
 80085cc:	b103      	cbz	r3, 80085d0 <_kill_r+0x1c>
 80085ce:	6023      	str	r3, [r4, #0]
 80085d0:	bd38      	pop	{r3, r4, r5, pc}
 80085d2:	bf00      	nop
 80085d4:	20000524 	.word	0x20000524

080085d8 <_getpid_r>:
 80085d8:	f7f9 b9f2 	b.w	80019c0 <_getpid>

080085dc <_fstat_r>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	4d07      	ldr	r5, [pc, #28]	; (80085fc <_fstat_r+0x20>)
 80085e0:	2300      	movs	r3, #0
 80085e2:	4604      	mov	r4, r0
 80085e4:	4608      	mov	r0, r1
 80085e6:	4611      	mov	r1, r2
 80085e8:	602b      	str	r3, [r5, #0]
 80085ea:	f7f9 fa50 	bl	8001a8e <_fstat>
 80085ee:	1c43      	adds	r3, r0, #1
 80085f0:	d102      	bne.n	80085f8 <_fstat_r+0x1c>
 80085f2:	682b      	ldr	r3, [r5, #0]
 80085f4:	b103      	cbz	r3, 80085f8 <_fstat_r+0x1c>
 80085f6:	6023      	str	r3, [r4, #0]
 80085f8:	bd38      	pop	{r3, r4, r5, pc}
 80085fa:	bf00      	nop
 80085fc:	20000524 	.word	0x20000524

08008600 <_isatty_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4d06      	ldr	r5, [pc, #24]	; (800861c <_isatty_r+0x1c>)
 8008604:	2300      	movs	r3, #0
 8008606:	4604      	mov	r4, r0
 8008608:	4608      	mov	r0, r1
 800860a:	602b      	str	r3, [r5, #0]
 800860c:	f7f9 fa4f 	bl	8001aae <_isatty>
 8008610:	1c43      	adds	r3, r0, #1
 8008612:	d102      	bne.n	800861a <_isatty_r+0x1a>
 8008614:	682b      	ldr	r3, [r5, #0]
 8008616:	b103      	cbz	r3, 800861a <_isatty_r+0x1a>
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	bd38      	pop	{r3, r4, r5, pc}
 800861c:	20000524 	.word	0x20000524

08008620 <cos>:
 8008620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008622:	ec53 2b10 	vmov	r2, r3, d0
 8008626:	4826      	ldr	r0, [pc, #152]	; (80086c0 <cos+0xa0>)
 8008628:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800862c:	4281      	cmp	r1, r0
 800862e:	dc06      	bgt.n	800863e <cos+0x1e>
 8008630:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80086b8 <cos+0x98>
 8008634:	b005      	add	sp, #20
 8008636:	f85d eb04 	ldr.w	lr, [sp], #4
 800863a:	f001 ba15 	b.w	8009a68 <__kernel_cos>
 800863e:	4821      	ldr	r0, [pc, #132]	; (80086c4 <cos+0xa4>)
 8008640:	4281      	cmp	r1, r0
 8008642:	dd09      	ble.n	8008658 <cos+0x38>
 8008644:	ee10 0a10 	vmov	r0, s0
 8008648:	4619      	mov	r1, r3
 800864a:	f7f7 fe25 	bl	8000298 <__aeabi_dsub>
 800864e:	ec41 0b10 	vmov	d0, r0, r1
 8008652:	b005      	add	sp, #20
 8008654:	f85d fb04 	ldr.w	pc, [sp], #4
 8008658:	4668      	mov	r0, sp
 800865a:	f000 ff45 	bl	80094e8 <__ieee754_rem_pio2>
 800865e:	f000 0003 	and.w	r0, r0, #3
 8008662:	2801      	cmp	r0, #1
 8008664:	d00b      	beq.n	800867e <cos+0x5e>
 8008666:	2802      	cmp	r0, #2
 8008668:	d016      	beq.n	8008698 <cos+0x78>
 800866a:	b9e0      	cbnz	r0, 80086a6 <cos+0x86>
 800866c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008670:	ed9d 0b00 	vldr	d0, [sp]
 8008674:	f001 f9f8 	bl	8009a68 <__kernel_cos>
 8008678:	ec51 0b10 	vmov	r0, r1, d0
 800867c:	e7e7      	b.n	800864e <cos+0x2e>
 800867e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008682:	ed9d 0b00 	vldr	d0, [sp]
 8008686:	f001 fe07 	bl	800a298 <__kernel_sin>
 800868a:	ec53 2b10 	vmov	r2, r3, d0
 800868e:	ee10 0a10 	vmov	r0, s0
 8008692:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008696:	e7da      	b.n	800864e <cos+0x2e>
 8008698:	ed9d 1b02 	vldr	d1, [sp, #8]
 800869c:	ed9d 0b00 	vldr	d0, [sp]
 80086a0:	f001 f9e2 	bl	8009a68 <__kernel_cos>
 80086a4:	e7f1      	b.n	800868a <cos+0x6a>
 80086a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80086aa:	ed9d 0b00 	vldr	d0, [sp]
 80086ae:	2001      	movs	r0, #1
 80086b0:	f001 fdf2 	bl	800a298 <__kernel_sin>
 80086b4:	e7e0      	b.n	8008678 <cos+0x58>
 80086b6:	bf00      	nop
	...
 80086c0:	3fe921fb 	.word	0x3fe921fb
 80086c4:	7fefffff 	.word	0x7fefffff

080086c8 <round>:
 80086c8:	ec51 0b10 	vmov	r0, r1, d0
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80086d2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80086d6:	2c13      	cmp	r4, #19
 80086d8:	ee10 2a10 	vmov	r2, s0
 80086dc:	460b      	mov	r3, r1
 80086de:	dc19      	bgt.n	8008714 <round+0x4c>
 80086e0:	2c00      	cmp	r4, #0
 80086e2:	da09      	bge.n	80086f8 <round+0x30>
 80086e4:	3401      	adds	r4, #1
 80086e6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80086ea:	d103      	bne.n	80086f4 <round+0x2c>
 80086ec:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80086f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80086f4:	2200      	movs	r2, #0
 80086f6:	e028      	b.n	800874a <round+0x82>
 80086f8:	4d15      	ldr	r5, [pc, #84]	; (8008750 <round+0x88>)
 80086fa:	4125      	asrs	r5, r4
 80086fc:	ea01 0605 	and.w	r6, r1, r5
 8008700:	4332      	orrs	r2, r6
 8008702:	d00e      	beq.n	8008722 <round+0x5a>
 8008704:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008708:	fa42 f404 	asr.w	r4, r2, r4
 800870c:	4423      	add	r3, r4
 800870e:	ea23 0305 	bic.w	r3, r3, r5
 8008712:	e7ef      	b.n	80086f4 <round+0x2c>
 8008714:	2c33      	cmp	r4, #51	; 0x33
 8008716:	dd07      	ble.n	8008728 <round+0x60>
 8008718:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800871c:	d101      	bne.n	8008722 <round+0x5a>
 800871e:	f7f7 fdbd 	bl	800029c <__adddf3>
 8008722:	ec41 0b10 	vmov	d0, r0, r1
 8008726:	bd70      	pop	{r4, r5, r6, pc}
 8008728:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800872c:	f04f 35ff 	mov.w	r5, #4294967295
 8008730:	40f5      	lsrs	r5, r6
 8008732:	4228      	tst	r0, r5
 8008734:	d0f5      	beq.n	8008722 <round+0x5a>
 8008736:	2101      	movs	r1, #1
 8008738:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800873c:	fa01 f404 	lsl.w	r4, r1, r4
 8008740:	1912      	adds	r2, r2, r4
 8008742:	bf28      	it	cs
 8008744:	185b      	addcs	r3, r3, r1
 8008746:	ea22 0205 	bic.w	r2, r2, r5
 800874a:	4619      	mov	r1, r3
 800874c:	4610      	mov	r0, r2
 800874e:	e7e8      	b.n	8008722 <round+0x5a>
 8008750:	000fffff 	.word	0x000fffff
 8008754:	00000000 	.word	0x00000000

08008758 <sin>:
 8008758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800875a:	ec53 2b10 	vmov	r2, r3, d0
 800875e:	4828      	ldr	r0, [pc, #160]	; (8008800 <sin+0xa8>)
 8008760:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008764:	4281      	cmp	r1, r0
 8008766:	dc07      	bgt.n	8008778 <sin+0x20>
 8008768:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80087f8 <sin+0xa0>
 800876c:	2000      	movs	r0, #0
 800876e:	b005      	add	sp, #20
 8008770:	f85d eb04 	ldr.w	lr, [sp], #4
 8008774:	f001 bd90 	b.w	800a298 <__kernel_sin>
 8008778:	4822      	ldr	r0, [pc, #136]	; (8008804 <sin+0xac>)
 800877a:	4281      	cmp	r1, r0
 800877c:	dd09      	ble.n	8008792 <sin+0x3a>
 800877e:	ee10 0a10 	vmov	r0, s0
 8008782:	4619      	mov	r1, r3
 8008784:	f7f7 fd88 	bl	8000298 <__aeabi_dsub>
 8008788:	ec41 0b10 	vmov	d0, r0, r1
 800878c:	b005      	add	sp, #20
 800878e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008792:	4668      	mov	r0, sp
 8008794:	f000 fea8 	bl	80094e8 <__ieee754_rem_pio2>
 8008798:	f000 0003 	and.w	r0, r0, #3
 800879c:	2801      	cmp	r0, #1
 800879e:	d00c      	beq.n	80087ba <sin+0x62>
 80087a0:	2802      	cmp	r0, #2
 80087a2:	d011      	beq.n	80087c8 <sin+0x70>
 80087a4:	b9f0      	cbnz	r0, 80087e4 <sin+0x8c>
 80087a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80087aa:	ed9d 0b00 	vldr	d0, [sp]
 80087ae:	2001      	movs	r0, #1
 80087b0:	f001 fd72 	bl	800a298 <__kernel_sin>
 80087b4:	ec51 0b10 	vmov	r0, r1, d0
 80087b8:	e7e6      	b.n	8008788 <sin+0x30>
 80087ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 80087be:	ed9d 0b00 	vldr	d0, [sp]
 80087c2:	f001 f951 	bl	8009a68 <__kernel_cos>
 80087c6:	e7f5      	b.n	80087b4 <sin+0x5c>
 80087c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80087cc:	ed9d 0b00 	vldr	d0, [sp]
 80087d0:	2001      	movs	r0, #1
 80087d2:	f001 fd61 	bl	800a298 <__kernel_sin>
 80087d6:	ec53 2b10 	vmov	r2, r3, d0
 80087da:	ee10 0a10 	vmov	r0, s0
 80087de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80087e2:	e7d1      	b.n	8008788 <sin+0x30>
 80087e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80087e8:	ed9d 0b00 	vldr	d0, [sp]
 80087ec:	f001 f93c 	bl	8009a68 <__kernel_cos>
 80087f0:	e7f1      	b.n	80087d6 <sin+0x7e>
 80087f2:	bf00      	nop
 80087f4:	f3af 8000 	nop.w
	...
 8008800:	3fe921fb 	.word	0x3fe921fb
 8008804:	7fefffff 	.word	0x7fefffff

08008808 <atan2>:
 8008808:	f000 b872 	b.w	80088f0 <__ieee754_atan2>

0800880c <pow>:
 800880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880e:	ed2d 8b02 	vpush	{d8}
 8008812:	eeb0 8a40 	vmov.f32	s16, s0
 8008816:	eef0 8a60 	vmov.f32	s17, s1
 800881a:	ec55 4b11 	vmov	r4, r5, d1
 800881e:	f000 f933 	bl	8008a88 <__ieee754_pow>
 8008822:	4622      	mov	r2, r4
 8008824:	462b      	mov	r3, r5
 8008826:	4620      	mov	r0, r4
 8008828:	4629      	mov	r1, r5
 800882a:	ec57 6b10 	vmov	r6, r7, d0
 800882e:	f7f8 f985 	bl	8000b3c <__aeabi_dcmpun>
 8008832:	2800      	cmp	r0, #0
 8008834:	d13b      	bne.n	80088ae <pow+0xa2>
 8008836:	ec51 0b18 	vmov	r0, r1, d8
 800883a:	2200      	movs	r2, #0
 800883c:	2300      	movs	r3, #0
 800883e:	f7f8 f94b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008842:	b1b8      	cbz	r0, 8008874 <pow+0x68>
 8008844:	2200      	movs	r2, #0
 8008846:	2300      	movs	r3, #0
 8008848:	4620      	mov	r0, r4
 800884a:	4629      	mov	r1, r5
 800884c:	f7f8 f944 	bl	8000ad8 <__aeabi_dcmpeq>
 8008850:	2800      	cmp	r0, #0
 8008852:	d146      	bne.n	80088e2 <pow+0xd6>
 8008854:	ec45 4b10 	vmov	d0, r4, r5
 8008858:	f001 ffb7 	bl	800a7ca <finite>
 800885c:	b338      	cbz	r0, 80088ae <pow+0xa2>
 800885e:	2200      	movs	r2, #0
 8008860:	2300      	movs	r3, #0
 8008862:	4620      	mov	r0, r4
 8008864:	4629      	mov	r1, r5
 8008866:	f7f8 f941 	bl	8000aec <__aeabi_dcmplt>
 800886a:	b300      	cbz	r0, 80088ae <pow+0xa2>
 800886c:	f7fd f990 	bl	8005b90 <__errno>
 8008870:	2322      	movs	r3, #34	; 0x22
 8008872:	e01b      	b.n	80088ac <pow+0xa0>
 8008874:	ec47 6b10 	vmov	d0, r6, r7
 8008878:	f001 ffa7 	bl	800a7ca <finite>
 800887c:	b9e0      	cbnz	r0, 80088b8 <pow+0xac>
 800887e:	eeb0 0a48 	vmov.f32	s0, s16
 8008882:	eef0 0a68 	vmov.f32	s1, s17
 8008886:	f001 ffa0 	bl	800a7ca <finite>
 800888a:	b1a8      	cbz	r0, 80088b8 <pow+0xac>
 800888c:	ec45 4b10 	vmov	d0, r4, r5
 8008890:	f001 ff9b 	bl	800a7ca <finite>
 8008894:	b180      	cbz	r0, 80088b8 <pow+0xac>
 8008896:	4632      	mov	r2, r6
 8008898:	463b      	mov	r3, r7
 800889a:	4630      	mov	r0, r6
 800889c:	4639      	mov	r1, r7
 800889e:	f7f8 f94d 	bl	8000b3c <__aeabi_dcmpun>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d0e2      	beq.n	800886c <pow+0x60>
 80088a6:	f7fd f973 	bl	8005b90 <__errno>
 80088aa:	2321      	movs	r3, #33	; 0x21
 80088ac:	6003      	str	r3, [r0, #0]
 80088ae:	ecbd 8b02 	vpop	{d8}
 80088b2:	ec47 6b10 	vmov	d0, r6, r7
 80088b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088b8:	2200      	movs	r2, #0
 80088ba:	2300      	movs	r3, #0
 80088bc:	4630      	mov	r0, r6
 80088be:	4639      	mov	r1, r7
 80088c0:	f7f8 f90a 	bl	8000ad8 <__aeabi_dcmpeq>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d0f2      	beq.n	80088ae <pow+0xa2>
 80088c8:	eeb0 0a48 	vmov.f32	s0, s16
 80088cc:	eef0 0a68 	vmov.f32	s1, s17
 80088d0:	f001 ff7b 	bl	800a7ca <finite>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d0ea      	beq.n	80088ae <pow+0xa2>
 80088d8:	ec45 4b10 	vmov	d0, r4, r5
 80088dc:	f001 ff75 	bl	800a7ca <finite>
 80088e0:	e7c3      	b.n	800886a <pow+0x5e>
 80088e2:	4f01      	ldr	r7, [pc, #4]	; (80088e8 <pow+0xdc>)
 80088e4:	2600      	movs	r6, #0
 80088e6:	e7e2      	b.n	80088ae <pow+0xa2>
 80088e8:	3ff00000 	.word	0x3ff00000
 80088ec:	00000000 	.word	0x00000000

080088f0 <__ieee754_atan2>:
 80088f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f4:	ec57 6b11 	vmov	r6, r7, d1
 80088f8:	4273      	negs	r3, r6
 80088fa:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008a80 <__ieee754_atan2+0x190>
 80088fe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008902:	4333      	orrs	r3, r6
 8008904:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008908:	4573      	cmp	r3, lr
 800890a:	ec51 0b10 	vmov	r0, r1, d0
 800890e:	ee11 8a10 	vmov	r8, s2
 8008912:	d80a      	bhi.n	800892a <__ieee754_atan2+0x3a>
 8008914:	4244      	negs	r4, r0
 8008916:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800891a:	4304      	orrs	r4, r0
 800891c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008920:	4574      	cmp	r4, lr
 8008922:	ee10 9a10 	vmov	r9, s0
 8008926:	468c      	mov	ip, r1
 8008928:	d907      	bls.n	800893a <__ieee754_atan2+0x4a>
 800892a:	4632      	mov	r2, r6
 800892c:	463b      	mov	r3, r7
 800892e:	f7f7 fcb5 	bl	800029c <__adddf3>
 8008932:	ec41 0b10 	vmov	d0, r0, r1
 8008936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800893a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800893e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008942:	4334      	orrs	r4, r6
 8008944:	d103      	bne.n	800894e <__ieee754_atan2+0x5e>
 8008946:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800894a:	f001 bd95 	b.w	800a478 <atan>
 800894e:	17bc      	asrs	r4, r7, #30
 8008950:	f004 0402 	and.w	r4, r4, #2
 8008954:	ea53 0909 	orrs.w	r9, r3, r9
 8008958:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800895c:	d107      	bne.n	800896e <__ieee754_atan2+0x7e>
 800895e:	2c02      	cmp	r4, #2
 8008960:	d060      	beq.n	8008a24 <__ieee754_atan2+0x134>
 8008962:	2c03      	cmp	r4, #3
 8008964:	d1e5      	bne.n	8008932 <__ieee754_atan2+0x42>
 8008966:	a142      	add	r1, pc, #264	; (adr r1, 8008a70 <__ieee754_atan2+0x180>)
 8008968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800896c:	e7e1      	b.n	8008932 <__ieee754_atan2+0x42>
 800896e:	ea52 0808 	orrs.w	r8, r2, r8
 8008972:	d106      	bne.n	8008982 <__ieee754_atan2+0x92>
 8008974:	f1bc 0f00 	cmp.w	ip, #0
 8008978:	da5f      	bge.n	8008a3a <__ieee754_atan2+0x14a>
 800897a:	a13f      	add	r1, pc, #252	; (adr r1, 8008a78 <__ieee754_atan2+0x188>)
 800897c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008980:	e7d7      	b.n	8008932 <__ieee754_atan2+0x42>
 8008982:	4572      	cmp	r2, lr
 8008984:	d10f      	bne.n	80089a6 <__ieee754_atan2+0xb6>
 8008986:	4293      	cmp	r3, r2
 8008988:	f104 34ff 	add.w	r4, r4, #4294967295
 800898c:	d107      	bne.n	800899e <__ieee754_atan2+0xae>
 800898e:	2c02      	cmp	r4, #2
 8008990:	d84c      	bhi.n	8008a2c <__ieee754_atan2+0x13c>
 8008992:	4b35      	ldr	r3, [pc, #212]	; (8008a68 <__ieee754_atan2+0x178>)
 8008994:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008998:	e9d4 0100 	ldrd	r0, r1, [r4]
 800899c:	e7c9      	b.n	8008932 <__ieee754_atan2+0x42>
 800899e:	2c02      	cmp	r4, #2
 80089a0:	d848      	bhi.n	8008a34 <__ieee754_atan2+0x144>
 80089a2:	4b32      	ldr	r3, [pc, #200]	; (8008a6c <__ieee754_atan2+0x17c>)
 80089a4:	e7f6      	b.n	8008994 <__ieee754_atan2+0xa4>
 80089a6:	4573      	cmp	r3, lr
 80089a8:	d0e4      	beq.n	8008974 <__ieee754_atan2+0x84>
 80089aa:	1a9b      	subs	r3, r3, r2
 80089ac:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80089b0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80089b4:	da1e      	bge.n	80089f4 <__ieee754_atan2+0x104>
 80089b6:	2f00      	cmp	r7, #0
 80089b8:	da01      	bge.n	80089be <__ieee754_atan2+0xce>
 80089ba:	323c      	adds	r2, #60	; 0x3c
 80089bc:	db1e      	blt.n	80089fc <__ieee754_atan2+0x10c>
 80089be:	4632      	mov	r2, r6
 80089c0:	463b      	mov	r3, r7
 80089c2:	f7f7 ff4b 	bl	800085c <__aeabi_ddiv>
 80089c6:	ec41 0b10 	vmov	d0, r0, r1
 80089ca:	f001 fef5 	bl	800a7b8 <fabs>
 80089ce:	f001 fd53 	bl	800a478 <atan>
 80089d2:	ec51 0b10 	vmov	r0, r1, d0
 80089d6:	2c01      	cmp	r4, #1
 80089d8:	d013      	beq.n	8008a02 <__ieee754_atan2+0x112>
 80089da:	2c02      	cmp	r4, #2
 80089dc:	d015      	beq.n	8008a0a <__ieee754_atan2+0x11a>
 80089de:	2c00      	cmp	r4, #0
 80089e0:	d0a7      	beq.n	8008932 <__ieee754_atan2+0x42>
 80089e2:	a319      	add	r3, pc, #100	; (adr r3, 8008a48 <__ieee754_atan2+0x158>)
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	f7f7 fc56 	bl	8000298 <__aeabi_dsub>
 80089ec:	a318      	add	r3, pc, #96	; (adr r3, 8008a50 <__ieee754_atan2+0x160>)
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	e014      	b.n	8008a1e <__ieee754_atan2+0x12e>
 80089f4:	a118      	add	r1, pc, #96	; (adr r1, 8008a58 <__ieee754_atan2+0x168>)
 80089f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089fa:	e7ec      	b.n	80089d6 <__ieee754_atan2+0xe6>
 80089fc:	2000      	movs	r0, #0
 80089fe:	2100      	movs	r1, #0
 8008a00:	e7e9      	b.n	80089d6 <__ieee754_atan2+0xe6>
 8008a02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a06:	4619      	mov	r1, r3
 8008a08:	e793      	b.n	8008932 <__ieee754_atan2+0x42>
 8008a0a:	a30f      	add	r3, pc, #60	; (adr r3, 8008a48 <__ieee754_atan2+0x158>)
 8008a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a10:	f7f7 fc42 	bl	8000298 <__aeabi_dsub>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	a10d      	add	r1, pc, #52	; (adr r1, 8008a50 <__ieee754_atan2+0x160>)
 8008a1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a1e:	f7f7 fc3b 	bl	8000298 <__aeabi_dsub>
 8008a22:	e786      	b.n	8008932 <__ieee754_atan2+0x42>
 8008a24:	a10a      	add	r1, pc, #40	; (adr r1, 8008a50 <__ieee754_atan2+0x160>)
 8008a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a2a:	e782      	b.n	8008932 <__ieee754_atan2+0x42>
 8008a2c:	a10c      	add	r1, pc, #48	; (adr r1, 8008a60 <__ieee754_atan2+0x170>)
 8008a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a32:	e77e      	b.n	8008932 <__ieee754_atan2+0x42>
 8008a34:	2000      	movs	r0, #0
 8008a36:	2100      	movs	r1, #0
 8008a38:	e77b      	b.n	8008932 <__ieee754_atan2+0x42>
 8008a3a:	a107      	add	r1, pc, #28	; (adr r1, 8008a58 <__ieee754_atan2+0x168>)
 8008a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a40:	e777      	b.n	8008932 <__ieee754_atan2+0x42>
 8008a42:	bf00      	nop
 8008a44:	f3af 8000 	nop.w
 8008a48:	33145c07 	.word	0x33145c07
 8008a4c:	3ca1a626 	.word	0x3ca1a626
 8008a50:	54442d18 	.word	0x54442d18
 8008a54:	400921fb 	.word	0x400921fb
 8008a58:	54442d18 	.word	0x54442d18
 8008a5c:	3ff921fb 	.word	0x3ff921fb
 8008a60:	54442d18 	.word	0x54442d18
 8008a64:	3fe921fb 	.word	0x3fe921fb
 8008a68:	0800aec8 	.word	0x0800aec8
 8008a6c:	0800aee0 	.word	0x0800aee0
 8008a70:	54442d18 	.word	0x54442d18
 8008a74:	c00921fb 	.word	0xc00921fb
 8008a78:	54442d18 	.word	0x54442d18
 8008a7c:	bff921fb 	.word	0xbff921fb
 8008a80:	7ff00000 	.word	0x7ff00000
 8008a84:	00000000 	.word	0x00000000

08008a88 <__ieee754_pow>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	ed2d 8b06 	vpush	{d8-d10}
 8008a90:	b089      	sub	sp, #36	; 0x24
 8008a92:	ed8d 1b00 	vstr	d1, [sp]
 8008a96:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008a9a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008a9e:	ea58 0102 	orrs.w	r1, r8, r2
 8008aa2:	ec57 6b10 	vmov	r6, r7, d0
 8008aa6:	d115      	bne.n	8008ad4 <__ieee754_pow+0x4c>
 8008aa8:	19b3      	adds	r3, r6, r6
 8008aaa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008aae:	4152      	adcs	r2, r2
 8008ab0:	4299      	cmp	r1, r3
 8008ab2:	4b89      	ldr	r3, [pc, #548]	; (8008cd8 <__ieee754_pow+0x250>)
 8008ab4:	4193      	sbcs	r3, r2
 8008ab6:	f080 84d2 	bcs.w	800945e <__ieee754_pow+0x9d6>
 8008aba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008abe:	4630      	mov	r0, r6
 8008ac0:	4639      	mov	r1, r7
 8008ac2:	f7f7 fbeb 	bl	800029c <__adddf3>
 8008ac6:	ec41 0b10 	vmov	d0, r0, r1
 8008aca:	b009      	add	sp, #36	; 0x24
 8008acc:	ecbd 8b06 	vpop	{d8-d10}
 8008ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad4:	4b81      	ldr	r3, [pc, #516]	; (8008cdc <__ieee754_pow+0x254>)
 8008ad6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008ada:	429c      	cmp	r4, r3
 8008adc:	ee10 aa10 	vmov	sl, s0
 8008ae0:	463d      	mov	r5, r7
 8008ae2:	dc06      	bgt.n	8008af2 <__ieee754_pow+0x6a>
 8008ae4:	d101      	bne.n	8008aea <__ieee754_pow+0x62>
 8008ae6:	2e00      	cmp	r6, #0
 8008ae8:	d1e7      	bne.n	8008aba <__ieee754_pow+0x32>
 8008aea:	4598      	cmp	r8, r3
 8008aec:	dc01      	bgt.n	8008af2 <__ieee754_pow+0x6a>
 8008aee:	d10f      	bne.n	8008b10 <__ieee754_pow+0x88>
 8008af0:	b172      	cbz	r2, 8008b10 <__ieee754_pow+0x88>
 8008af2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008af6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008afa:	ea55 050a 	orrs.w	r5, r5, sl
 8008afe:	d1dc      	bne.n	8008aba <__ieee754_pow+0x32>
 8008b00:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008b04:	18db      	adds	r3, r3, r3
 8008b06:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008b0a:	4152      	adcs	r2, r2
 8008b0c:	429d      	cmp	r5, r3
 8008b0e:	e7d0      	b.n	8008ab2 <__ieee754_pow+0x2a>
 8008b10:	2d00      	cmp	r5, #0
 8008b12:	da3b      	bge.n	8008b8c <__ieee754_pow+0x104>
 8008b14:	4b72      	ldr	r3, [pc, #456]	; (8008ce0 <__ieee754_pow+0x258>)
 8008b16:	4598      	cmp	r8, r3
 8008b18:	dc51      	bgt.n	8008bbe <__ieee754_pow+0x136>
 8008b1a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008b1e:	4598      	cmp	r8, r3
 8008b20:	f340 84ac 	ble.w	800947c <__ieee754_pow+0x9f4>
 8008b24:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008b28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008b2c:	2b14      	cmp	r3, #20
 8008b2e:	dd0f      	ble.n	8008b50 <__ieee754_pow+0xc8>
 8008b30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008b34:	fa22 f103 	lsr.w	r1, r2, r3
 8008b38:	fa01 f303 	lsl.w	r3, r1, r3
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	f040 849d 	bne.w	800947c <__ieee754_pow+0x9f4>
 8008b42:	f001 0101 	and.w	r1, r1, #1
 8008b46:	f1c1 0302 	rsb	r3, r1, #2
 8008b4a:	9304      	str	r3, [sp, #16]
 8008b4c:	b182      	cbz	r2, 8008b70 <__ieee754_pow+0xe8>
 8008b4e:	e05f      	b.n	8008c10 <__ieee754_pow+0x188>
 8008b50:	2a00      	cmp	r2, #0
 8008b52:	d15b      	bne.n	8008c0c <__ieee754_pow+0x184>
 8008b54:	f1c3 0314 	rsb	r3, r3, #20
 8008b58:	fa48 f103 	asr.w	r1, r8, r3
 8008b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b60:	4543      	cmp	r3, r8
 8008b62:	f040 8488 	bne.w	8009476 <__ieee754_pow+0x9ee>
 8008b66:	f001 0101 	and.w	r1, r1, #1
 8008b6a:	f1c1 0302 	rsb	r3, r1, #2
 8008b6e:	9304      	str	r3, [sp, #16]
 8008b70:	4b5c      	ldr	r3, [pc, #368]	; (8008ce4 <__ieee754_pow+0x25c>)
 8008b72:	4598      	cmp	r8, r3
 8008b74:	d132      	bne.n	8008bdc <__ieee754_pow+0x154>
 8008b76:	f1b9 0f00 	cmp.w	r9, #0
 8008b7a:	f280 8478 	bge.w	800946e <__ieee754_pow+0x9e6>
 8008b7e:	4959      	ldr	r1, [pc, #356]	; (8008ce4 <__ieee754_pow+0x25c>)
 8008b80:	4632      	mov	r2, r6
 8008b82:	463b      	mov	r3, r7
 8008b84:	2000      	movs	r0, #0
 8008b86:	f7f7 fe69 	bl	800085c <__aeabi_ddiv>
 8008b8a:	e79c      	b.n	8008ac6 <__ieee754_pow+0x3e>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	9304      	str	r3, [sp, #16]
 8008b90:	2a00      	cmp	r2, #0
 8008b92:	d13d      	bne.n	8008c10 <__ieee754_pow+0x188>
 8008b94:	4b51      	ldr	r3, [pc, #324]	; (8008cdc <__ieee754_pow+0x254>)
 8008b96:	4598      	cmp	r8, r3
 8008b98:	d1ea      	bne.n	8008b70 <__ieee754_pow+0xe8>
 8008b9a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008b9e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008ba2:	ea53 030a 	orrs.w	r3, r3, sl
 8008ba6:	f000 845a 	beq.w	800945e <__ieee754_pow+0x9d6>
 8008baa:	4b4f      	ldr	r3, [pc, #316]	; (8008ce8 <__ieee754_pow+0x260>)
 8008bac:	429c      	cmp	r4, r3
 8008bae:	dd08      	ble.n	8008bc2 <__ieee754_pow+0x13a>
 8008bb0:	f1b9 0f00 	cmp.w	r9, #0
 8008bb4:	f2c0 8457 	blt.w	8009466 <__ieee754_pow+0x9de>
 8008bb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bbc:	e783      	b.n	8008ac6 <__ieee754_pow+0x3e>
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	e7e5      	b.n	8008b8e <__ieee754_pow+0x106>
 8008bc2:	f1b9 0f00 	cmp.w	r9, #0
 8008bc6:	f04f 0000 	mov.w	r0, #0
 8008bca:	f04f 0100 	mov.w	r1, #0
 8008bce:	f6bf af7a 	bge.w	8008ac6 <__ieee754_pow+0x3e>
 8008bd2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008bd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008bda:	e774      	b.n	8008ac6 <__ieee754_pow+0x3e>
 8008bdc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008be0:	d106      	bne.n	8008bf0 <__ieee754_pow+0x168>
 8008be2:	4632      	mov	r2, r6
 8008be4:	463b      	mov	r3, r7
 8008be6:	4630      	mov	r0, r6
 8008be8:	4639      	mov	r1, r7
 8008bea:	f7f7 fd0d 	bl	8000608 <__aeabi_dmul>
 8008bee:	e76a      	b.n	8008ac6 <__ieee754_pow+0x3e>
 8008bf0:	4b3e      	ldr	r3, [pc, #248]	; (8008cec <__ieee754_pow+0x264>)
 8008bf2:	4599      	cmp	r9, r3
 8008bf4:	d10c      	bne.n	8008c10 <__ieee754_pow+0x188>
 8008bf6:	2d00      	cmp	r5, #0
 8008bf8:	db0a      	blt.n	8008c10 <__ieee754_pow+0x188>
 8008bfa:	ec47 6b10 	vmov	d0, r6, r7
 8008bfe:	b009      	add	sp, #36	; 0x24
 8008c00:	ecbd 8b06 	vpop	{d8-d10}
 8008c04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c08:	f000 be7a 	b.w	8009900 <__ieee754_sqrt>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	9304      	str	r3, [sp, #16]
 8008c10:	ec47 6b10 	vmov	d0, r6, r7
 8008c14:	f001 fdd0 	bl	800a7b8 <fabs>
 8008c18:	ec51 0b10 	vmov	r0, r1, d0
 8008c1c:	f1ba 0f00 	cmp.w	sl, #0
 8008c20:	d129      	bne.n	8008c76 <__ieee754_pow+0x1ee>
 8008c22:	b124      	cbz	r4, 8008c2e <__ieee754_pow+0x1a6>
 8008c24:	4b2f      	ldr	r3, [pc, #188]	; (8008ce4 <__ieee754_pow+0x25c>)
 8008c26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d123      	bne.n	8008c76 <__ieee754_pow+0x1ee>
 8008c2e:	f1b9 0f00 	cmp.w	r9, #0
 8008c32:	da05      	bge.n	8008c40 <__ieee754_pow+0x1b8>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	2000      	movs	r0, #0
 8008c3a:	492a      	ldr	r1, [pc, #168]	; (8008ce4 <__ieee754_pow+0x25c>)
 8008c3c:	f7f7 fe0e 	bl	800085c <__aeabi_ddiv>
 8008c40:	2d00      	cmp	r5, #0
 8008c42:	f6bf af40 	bge.w	8008ac6 <__ieee754_pow+0x3e>
 8008c46:	9b04      	ldr	r3, [sp, #16]
 8008c48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008c4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008c50:	4323      	orrs	r3, r4
 8008c52:	d108      	bne.n	8008c66 <__ieee754_pow+0x1de>
 8008c54:	4602      	mov	r2, r0
 8008c56:	460b      	mov	r3, r1
 8008c58:	4610      	mov	r0, r2
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	f7f7 fb1c 	bl	8000298 <__aeabi_dsub>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	e78f      	b.n	8008b86 <__ieee754_pow+0xfe>
 8008c66:	9b04      	ldr	r3, [sp, #16]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	f47f af2c 	bne.w	8008ac6 <__ieee754_pow+0x3e>
 8008c6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c72:	4619      	mov	r1, r3
 8008c74:	e727      	b.n	8008ac6 <__ieee754_pow+0x3e>
 8008c76:	0feb      	lsrs	r3, r5, #31
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	9306      	str	r3, [sp, #24]
 8008c7c:	9a06      	ldr	r2, [sp, #24]
 8008c7e:	9b04      	ldr	r3, [sp, #16]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	d102      	bne.n	8008c8a <__ieee754_pow+0x202>
 8008c84:	4632      	mov	r2, r6
 8008c86:	463b      	mov	r3, r7
 8008c88:	e7e6      	b.n	8008c58 <__ieee754_pow+0x1d0>
 8008c8a:	4b19      	ldr	r3, [pc, #100]	; (8008cf0 <__ieee754_pow+0x268>)
 8008c8c:	4598      	cmp	r8, r3
 8008c8e:	f340 80fb 	ble.w	8008e88 <__ieee754_pow+0x400>
 8008c92:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008c96:	4598      	cmp	r8, r3
 8008c98:	4b13      	ldr	r3, [pc, #76]	; (8008ce8 <__ieee754_pow+0x260>)
 8008c9a:	dd0c      	ble.n	8008cb6 <__ieee754_pow+0x22e>
 8008c9c:	429c      	cmp	r4, r3
 8008c9e:	dc0f      	bgt.n	8008cc0 <__ieee754_pow+0x238>
 8008ca0:	f1b9 0f00 	cmp.w	r9, #0
 8008ca4:	da0f      	bge.n	8008cc6 <__ieee754_pow+0x23e>
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	b009      	add	sp, #36	; 0x24
 8008caa:	ecbd 8b06 	vpop	{d8-d10}
 8008cae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb2:	f001 bbd6 	b.w	800a462 <__math_oflow>
 8008cb6:	429c      	cmp	r4, r3
 8008cb8:	dbf2      	blt.n	8008ca0 <__ieee754_pow+0x218>
 8008cba:	4b0a      	ldr	r3, [pc, #40]	; (8008ce4 <__ieee754_pow+0x25c>)
 8008cbc:	429c      	cmp	r4, r3
 8008cbe:	dd19      	ble.n	8008cf4 <__ieee754_pow+0x26c>
 8008cc0:	f1b9 0f00 	cmp.w	r9, #0
 8008cc4:	dcef      	bgt.n	8008ca6 <__ieee754_pow+0x21e>
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	b009      	add	sp, #36	; 0x24
 8008cca:	ecbd 8b06 	vpop	{d8-d10}
 8008cce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd2:	f001 bbbd 	b.w	800a450 <__math_uflow>
 8008cd6:	bf00      	nop
 8008cd8:	fff00000 	.word	0xfff00000
 8008cdc:	7ff00000 	.word	0x7ff00000
 8008ce0:	433fffff 	.word	0x433fffff
 8008ce4:	3ff00000 	.word	0x3ff00000
 8008ce8:	3fefffff 	.word	0x3fefffff
 8008cec:	3fe00000 	.word	0x3fe00000
 8008cf0:	41e00000 	.word	0x41e00000
 8008cf4:	4b60      	ldr	r3, [pc, #384]	; (8008e78 <__ieee754_pow+0x3f0>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f7f7 face 	bl	8000298 <__aeabi_dsub>
 8008cfc:	a354      	add	r3, pc, #336	; (adr r3, 8008e50 <__ieee754_pow+0x3c8>)
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	4604      	mov	r4, r0
 8008d04:	460d      	mov	r5, r1
 8008d06:	f7f7 fc7f 	bl	8000608 <__aeabi_dmul>
 8008d0a:	a353      	add	r3, pc, #332	; (adr r3, 8008e58 <__ieee754_pow+0x3d0>)
 8008d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d10:	4606      	mov	r6, r0
 8008d12:	460f      	mov	r7, r1
 8008d14:	4620      	mov	r0, r4
 8008d16:	4629      	mov	r1, r5
 8008d18:	f7f7 fc76 	bl	8000608 <__aeabi_dmul>
 8008d1c:	4b57      	ldr	r3, [pc, #348]	; (8008e7c <__ieee754_pow+0x3f4>)
 8008d1e:	4682      	mov	sl, r0
 8008d20:	468b      	mov	fp, r1
 8008d22:	2200      	movs	r2, #0
 8008d24:	4620      	mov	r0, r4
 8008d26:	4629      	mov	r1, r5
 8008d28:	f7f7 fc6e 	bl	8000608 <__aeabi_dmul>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	a14b      	add	r1, pc, #300	; (adr r1, 8008e60 <__ieee754_pow+0x3d8>)
 8008d32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d36:	f7f7 faaf 	bl	8000298 <__aeabi_dsub>
 8008d3a:	4622      	mov	r2, r4
 8008d3c:	462b      	mov	r3, r5
 8008d3e:	f7f7 fc63 	bl	8000608 <__aeabi_dmul>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	2000      	movs	r0, #0
 8008d48:	494d      	ldr	r1, [pc, #308]	; (8008e80 <__ieee754_pow+0x3f8>)
 8008d4a:	f7f7 faa5 	bl	8000298 <__aeabi_dsub>
 8008d4e:	4622      	mov	r2, r4
 8008d50:	4680      	mov	r8, r0
 8008d52:	4689      	mov	r9, r1
 8008d54:	462b      	mov	r3, r5
 8008d56:	4620      	mov	r0, r4
 8008d58:	4629      	mov	r1, r5
 8008d5a:	f7f7 fc55 	bl	8000608 <__aeabi_dmul>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	4640      	mov	r0, r8
 8008d64:	4649      	mov	r1, r9
 8008d66:	f7f7 fc4f 	bl	8000608 <__aeabi_dmul>
 8008d6a:	a33f      	add	r3, pc, #252	; (adr r3, 8008e68 <__ieee754_pow+0x3e0>)
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f7f7 fc4a 	bl	8000608 <__aeabi_dmul>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	4650      	mov	r0, sl
 8008d7a:	4659      	mov	r1, fp
 8008d7c:	f7f7 fa8c 	bl	8000298 <__aeabi_dsub>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4680      	mov	r8, r0
 8008d86:	4689      	mov	r9, r1
 8008d88:	4630      	mov	r0, r6
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	f7f7 fa86 	bl	800029c <__adddf3>
 8008d90:	2000      	movs	r0, #0
 8008d92:	4632      	mov	r2, r6
 8008d94:	463b      	mov	r3, r7
 8008d96:	4604      	mov	r4, r0
 8008d98:	460d      	mov	r5, r1
 8008d9a:	f7f7 fa7d 	bl	8000298 <__aeabi_dsub>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	4640      	mov	r0, r8
 8008da4:	4649      	mov	r1, r9
 8008da6:	f7f7 fa77 	bl	8000298 <__aeabi_dsub>
 8008daa:	9b04      	ldr	r3, [sp, #16]
 8008dac:	9a06      	ldr	r2, [sp, #24]
 8008dae:	3b01      	subs	r3, #1
 8008db0:	4313      	orrs	r3, r2
 8008db2:	4682      	mov	sl, r0
 8008db4:	468b      	mov	fp, r1
 8008db6:	f040 81e7 	bne.w	8009188 <__ieee754_pow+0x700>
 8008dba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008e70 <__ieee754_pow+0x3e8>
 8008dbe:	eeb0 8a47 	vmov.f32	s16, s14
 8008dc2:	eef0 8a67 	vmov.f32	s17, s15
 8008dc6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008dca:	2600      	movs	r6, #0
 8008dcc:	4632      	mov	r2, r6
 8008dce:	463b      	mov	r3, r7
 8008dd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dd4:	f7f7 fa60 	bl	8000298 <__aeabi_dsub>
 8008dd8:	4622      	mov	r2, r4
 8008dda:	462b      	mov	r3, r5
 8008ddc:	f7f7 fc14 	bl	8000608 <__aeabi_dmul>
 8008de0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008de4:	4680      	mov	r8, r0
 8008de6:	4689      	mov	r9, r1
 8008de8:	4650      	mov	r0, sl
 8008dea:	4659      	mov	r1, fp
 8008dec:	f7f7 fc0c 	bl	8000608 <__aeabi_dmul>
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	4640      	mov	r0, r8
 8008df6:	4649      	mov	r1, r9
 8008df8:	f7f7 fa50 	bl	800029c <__adddf3>
 8008dfc:	4632      	mov	r2, r6
 8008dfe:	463b      	mov	r3, r7
 8008e00:	4680      	mov	r8, r0
 8008e02:	4689      	mov	r9, r1
 8008e04:	4620      	mov	r0, r4
 8008e06:	4629      	mov	r1, r5
 8008e08:	f7f7 fbfe 	bl	8000608 <__aeabi_dmul>
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4604      	mov	r4, r0
 8008e10:	460d      	mov	r5, r1
 8008e12:	4602      	mov	r2, r0
 8008e14:	4649      	mov	r1, r9
 8008e16:	4640      	mov	r0, r8
 8008e18:	f7f7 fa40 	bl	800029c <__adddf3>
 8008e1c:	4b19      	ldr	r3, [pc, #100]	; (8008e84 <__ieee754_pow+0x3fc>)
 8008e1e:	4299      	cmp	r1, r3
 8008e20:	ec45 4b19 	vmov	d9, r4, r5
 8008e24:	4606      	mov	r6, r0
 8008e26:	460f      	mov	r7, r1
 8008e28:	468b      	mov	fp, r1
 8008e2a:	f340 82f1 	ble.w	8009410 <__ieee754_pow+0x988>
 8008e2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008e32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008e36:	4303      	orrs	r3, r0
 8008e38:	f000 81e4 	beq.w	8009204 <__ieee754_pow+0x77c>
 8008e3c:	ec51 0b18 	vmov	r0, r1, d8
 8008e40:	2200      	movs	r2, #0
 8008e42:	2300      	movs	r3, #0
 8008e44:	f7f7 fe52 	bl	8000aec <__aeabi_dcmplt>
 8008e48:	3800      	subs	r0, #0
 8008e4a:	bf18      	it	ne
 8008e4c:	2001      	movne	r0, #1
 8008e4e:	e72b      	b.n	8008ca8 <__ieee754_pow+0x220>
 8008e50:	60000000 	.word	0x60000000
 8008e54:	3ff71547 	.word	0x3ff71547
 8008e58:	f85ddf44 	.word	0xf85ddf44
 8008e5c:	3e54ae0b 	.word	0x3e54ae0b
 8008e60:	55555555 	.word	0x55555555
 8008e64:	3fd55555 	.word	0x3fd55555
 8008e68:	652b82fe 	.word	0x652b82fe
 8008e6c:	3ff71547 	.word	0x3ff71547
 8008e70:	00000000 	.word	0x00000000
 8008e74:	bff00000 	.word	0xbff00000
 8008e78:	3ff00000 	.word	0x3ff00000
 8008e7c:	3fd00000 	.word	0x3fd00000
 8008e80:	3fe00000 	.word	0x3fe00000
 8008e84:	408fffff 	.word	0x408fffff
 8008e88:	4bd5      	ldr	r3, [pc, #852]	; (80091e0 <__ieee754_pow+0x758>)
 8008e8a:	402b      	ands	r3, r5
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	b92b      	cbnz	r3, 8008e9c <__ieee754_pow+0x414>
 8008e90:	4bd4      	ldr	r3, [pc, #848]	; (80091e4 <__ieee754_pow+0x75c>)
 8008e92:	f7f7 fbb9 	bl	8000608 <__aeabi_dmul>
 8008e96:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	1523      	asrs	r3, r4, #20
 8008e9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008ea2:	4413      	add	r3, r2
 8008ea4:	9305      	str	r3, [sp, #20]
 8008ea6:	4bd0      	ldr	r3, [pc, #832]	; (80091e8 <__ieee754_pow+0x760>)
 8008ea8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008eac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008eb0:	429c      	cmp	r4, r3
 8008eb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008eb6:	dd08      	ble.n	8008eca <__ieee754_pow+0x442>
 8008eb8:	4bcc      	ldr	r3, [pc, #816]	; (80091ec <__ieee754_pow+0x764>)
 8008eba:	429c      	cmp	r4, r3
 8008ebc:	f340 8162 	ble.w	8009184 <__ieee754_pow+0x6fc>
 8008ec0:	9b05      	ldr	r3, [sp, #20]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	9305      	str	r3, [sp, #20]
 8008ec6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008eca:	2400      	movs	r4, #0
 8008ecc:	00e3      	lsls	r3, r4, #3
 8008ece:	9307      	str	r3, [sp, #28]
 8008ed0:	4bc7      	ldr	r3, [pc, #796]	; (80091f0 <__ieee754_pow+0x768>)
 8008ed2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ed6:	ed93 7b00 	vldr	d7, [r3]
 8008eda:	4629      	mov	r1, r5
 8008edc:	ec53 2b17 	vmov	r2, r3, d7
 8008ee0:	eeb0 9a47 	vmov.f32	s18, s14
 8008ee4:	eef0 9a67 	vmov.f32	s19, s15
 8008ee8:	4682      	mov	sl, r0
 8008eea:	f7f7 f9d5 	bl	8000298 <__aeabi_dsub>
 8008eee:	4652      	mov	r2, sl
 8008ef0:	4606      	mov	r6, r0
 8008ef2:	460f      	mov	r7, r1
 8008ef4:	462b      	mov	r3, r5
 8008ef6:	ec51 0b19 	vmov	r0, r1, d9
 8008efa:	f7f7 f9cf 	bl	800029c <__adddf3>
 8008efe:	4602      	mov	r2, r0
 8008f00:	460b      	mov	r3, r1
 8008f02:	2000      	movs	r0, #0
 8008f04:	49bb      	ldr	r1, [pc, #748]	; (80091f4 <__ieee754_pow+0x76c>)
 8008f06:	f7f7 fca9 	bl	800085c <__aeabi_ddiv>
 8008f0a:	ec41 0b1a 	vmov	d10, r0, r1
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	4630      	mov	r0, r6
 8008f14:	4639      	mov	r1, r7
 8008f16:	f7f7 fb77 	bl	8000608 <__aeabi_dmul>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f20:	9302      	str	r3, [sp, #8]
 8008f22:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f26:	46ab      	mov	fp, r5
 8008f28:	106d      	asrs	r5, r5, #1
 8008f2a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008f2e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008f32:	ec41 0b18 	vmov	d8, r0, r1
 8008f36:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	4640      	mov	r0, r8
 8008f3e:	4649      	mov	r1, r9
 8008f40:	4614      	mov	r4, r2
 8008f42:	461d      	mov	r5, r3
 8008f44:	f7f7 fb60 	bl	8000608 <__aeabi_dmul>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	4639      	mov	r1, r7
 8008f50:	f7f7 f9a2 	bl	8000298 <__aeabi_dsub>
 8008f54:	ec53 2b19 	vmov	r2, r3, d9
 8008f58:	4606      	mov	r6, r0
 8008f5a:	460f      	mov	r7, r1
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	4629      	mov	r1, r5
 8008f60:	f7f7 f99a 	bl	8000298 <__aeabi_dsub>
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	4650      	mov	r0, sl
 8008f6a:	4659      	mov	r1, fp
 8008f6c:	f7f7 f994 	bl	8000298 <__aeabi_dsub>
 8008f70:	4642      	mov	r2, r8
 8008f72:	464b      	mov	r3, r9
 8008f74:	f7f7 fb48 	bl	8000608 <__aeabi_dmul>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	4639      	mov	r1, r7
 8008f80:	f7f7 f98a 	bl	8000298 <__aeabi_dsub>
 8008f84:	ec53 2b1a 	vmov	r2, r3, d10
 8008f88:	f7f7 fb3e 	bl	8000608 <__aeabi_dmul>
 8008f8c:	ec53 2b18 	vmov	r2, r3, d8
 8008f90:	ec41 0b19 	vmov	d9, r0, r1
 8008f94:	ec51 0b18 	vmov	r0, r1, d8
 8008f98:	f7f7 fb36 	bl	8000608 <__aeabi_dmul>
 8008f9c:	a37c      	add	r3, pc, #496	; (adr r3, 8009190 <__ieee754_pow+0x708>)
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	460d      	mov	r5, r1
 8008fa6:	f7f7 fb2f 	bl	8000608 <__aeabi_dmul>
 8008faa:	a37b      	add	r3, pc, #492	; (adr r3, 8009198 <__ieee754_pow+0x710>)
 8008fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb0:	f7f7 f974 	bl	800029c <__adddf3>
 8008fb4:	4622      	mov	r2, r4
 8008fb6:	462b      	mov	r3, r5
 8008fb8:	f7f7 fb26 	bl	8000608 <__aeabi_dmul>
 8008fbc:	a378      	add	r3, pc, #480	; (adr r3, 80091a0 <__ieee754_pow+0x718>)
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	f7f7 f96b 	bl	800029c <__adddf3>
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	462b      	mov	r3, r5
 8008fca:	f7f7 fb1d 	bl	8000608 <__aeabi_dmul>
 8008fce:	a376      	add	r3, pc, #472	; (adr r3, 80091a8 <__ieee754_pow+0x720>)
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	f7f7 f962 	bl	800029c <__adddf3>
 8008fd8:	4622      	mov	r2, r4
 8008fda:	462b      	mov	r3, r5
 8008fdc:	f7f7 fb14 	bl	8000608 <__aeabi_dmul>
 8008fe0:	a373      	add	r3, pc, #460	; (adr r3, 80091b0 <__ieee754_pow+0x728>)
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	f7f7 f959 	bl	800029c <__adddf3>
 8008fea:	4622      	mov	r2, r4
 8008fec:	462b      	mov	r3, r5
 8008fee:	f7f7 fb0b 	bl	8000608 <__aeabi_dmul>
 8008ff2:	a371      	add	r3, pc, #452	; (adr r3, 80091b8 <__ieee754_pow+0x730>)
 8008ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff8:	f7f7 f950 	bl	800029c <__adddf3>
 8008ffc:	4622      	mov	r2, r4
 8008ffe:	4606      	mov	r6, r0
 8009000:	460f      	mov	r7, r1
 8009002:	462b      	mov	r3, r5
 8009004:	4620      	mov	r0, r4
 8009006:	4629      	mov	r1, r5
 8009008:	f7f7 fafe 	bl	8000608 <__aeabi_dmul>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	4630      	mov	r0, r6
 8009012:	4639      	mov	r1, r7
 8009014:	f7f7 faf8 	bl	8000608 <__aeabi_dmul>
 8009018:	4642      	mov	r2, r8
 800901a:	4604      	mov	r4, r0
 800901c:	460d      	mov	r5, r1
 800901e:	464b      	mov	r3, r9
 8009020:	ec51 0b18 	vmov	r0, r1, d8
 8009024:	f7f7 f93a 	bl	800029c <__adddf3>
 8009028:	ec53 2b19 	vmov	r2, r3, d9
 800902c:	f7f7 faec 	bl	8000608 <__aeabi_dmul>
 8009030:	4622      	mov	r2, r4
 8009032:	462b      	mov	r3, r5
 8009034:	f7f7 f932 	bl	800029c <__adddf3>
 8009038:	4642      	mov	r2, r8
 800903a:	4682      	mov	sl, r0
 800903c:	468b      	mov	fp, r1
 800903e:	464b      	mov	r3, r9
 8009040:	4640      	mov	r0, r8
 8009042:	4649      	mov	r1, r9
 8009044:	f7f7 fae0 	bl	8000608 <__aeabi_dmul>
 8009048:	4b6b      	ldr	r3, [pc, #428]	; (80091f8 <__ieee754_pow+0x770>)
 800904a:	2200      	movs	r2, #0
 800904c:	4606      	mov	r6, r0
 800904e:	460f      	mov	r7, r1
 8009050:	f7f7 f924 	bl	800029c <__adddf3>
 8009054:	4652      	mov	r2, sl
 8009056:	465b      	mov	r3, fp
 8009058:	f7f7 f920 	bl	800029c <__adddf3>
 800905c:	2000      	movs	r0, #0
 800905e:	4604      	mov	r4, r0
 8009060:	460d      	mov	r5, r1
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	4640      	mov	r0, r8
 8009068:	4649      	mov	r1, r9
 800906a:	f7f7 facd 	bl	8000608 <__aeabi_dmul>
 800906e:	4b62      	ldr	r3, [pc, #392]	; (80091f8 <__ieee754_pow+0x770>)
 8009070:	4680      	mov	r8, r0
 8009072:	4689      	mov	r9, r1
 8009074:	2200      	movs	r2, #0
 8009076:	4620      	mov	r0, r4
 8009078:	4629      	mov	r1, r5
 800907a:	f7f7 f90d 	bl	8000298 <__aeabi_dsub>
 800907e:	4632      	mov	r2, r6
 8009080:	463b      	mov	r3, r7
 8009082:	f7f7 f909 	bl	8000298 <__aeabi_dsub>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	4650      	mov	r0, sl
 800908c:	4659      	mov	r1, fp
 800908e:	f7f7 f903 	bl	8000298 <__aeabi_dsub>
 8009092:	ec53 2b18 	vmov	r2, r3, d8
 8009096:	f7f7 fab7 	bl	8000608 <__aeabi_dmul>
 800909a:	4622      	mov	r2, r4
 800909c:	4606      	mov	r6, r0
 800909e:	460f      	mov	r7, r1
 80090a0:	462b      	mov	r3, r5
 80090a2:	ec51 0b19 	vmov	r0, r1, d9
 80090a6:	f7f7 faaf 	bl	8000608 <__aeabi_dmul>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	4630      	mov	r0, r6
 80090b0:	4639      	mov	r1, r7
 80090b2:	f7f7 f8f3 	bl	800029c <__adddf3>
 80090b6:	4606      	mov	r6, r0
 80090b8:	460f      	mov	r7, r1
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	4640      	mov	r0, r8
 80090c0:	4649      	mov	r1, r9
 80090c2:	f7f7 f8eb 	bl	800029c <__adddf3>
 80090c6:	a33e      	add	r3, pc, #248	; (adr r3, 80091c0 <__ieee754_pow+0x738>)
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	2000      	movs	r0, #0
 80090ce:	4604      	mov	r4, r0
 80090d0:	460d      	mov	r5, r1
 80090d2:	f7f7 fa99 	bl	8000608 <__aeabi_dmul>
 80090d6:	4642      	mov	r2, r8
 80090d8:	ec41 0b18 	vmov	d8, r0, r1
 80090dc:	464b      	mov	r3, r9
 80090de:	4620      	mov	r0, r4
 80090e0:	4629      	mov	r1, r5
 80090e2:	f7f7 f8d9 	bl	8000298 <__aeabi_dsub>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	4630      	mov	r0, r6
 80090ec:	4639      	mov	r1, r7
 80090ee:	f7f7 f8d3 	bl	8000298 <__aeabi_dsub>
 80090f2:	a335      	add	r3, pc, #212	; (adr r3, 80091c8 <__ieee754_pow+0x740>)
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f7f7 fa86 	bl	8000608 <__aeabi_dmul>
 80090fc:	a334      	add	r3, pc, #208	; (adr r3, 80091d0 <__ieee754_pow+0x748>)
 80090fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009102:	4606      	mov	r6, r0
 8009104:	460f      	mov	r7, r1
 8009106:	4620      	mov	r0, r4
 8009108:	4629      	mov	r1, r5
 800910a:	f7f7 fa7d 	bl	8000608 <__aeabi_dmul>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4630      	mov	r0, r6
 8009114:	4639      	mov	r1, r7
 8009116:	f7f7 f8c1 	bl	800029c <__adddf3>
 800911a:	9a07      	ldr	r2, [sp, #28]
 800911c:	4b37      	ldr	r3, [pc, #220]	; (80091fc <__ieee754_pow+0x774>)
 800911e:	4413      	add	r3, r2
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	f7f7 f8ba 	bl	800029c <__adddf3>
 8009128:	4682      	mov	sl, r0
 800912a:	9805      	ldr	r0, [sp, #20]
 800912c:	468b      	mov	fp, r1
 800912e:	f7f7 fa01 	bl	8000534 <__aeabi_i2d>
 8009132:	9a07      	ldr	r2, [sp, #28]
 8009134:	4b32      	ldr	r3, [pc, #200]	; (8009200 <__ieee754_pow+0x778>)
 8009136:	4413      	add	r3, r2
 8009138:	e9d3 8900 	ldrd	r8, r9, [r3]
 800913c:	4606      	mov	r6, r0
 800913e:	460f      	mov	r7, r1
 8009140:	4652      	mov	r2, sl
 8009142:	465b      	mov	r3, fp
 8009144:	ec51 0b18 	vmov	r0, r1, d8
 8009148:	f7f7 f8a8 	bl	800029c <__adddf3>
 800914c:	4642      	mov	r2, r8
 800914e:	464b      	mov	r3, r9
 8009150:	f7f7 f8a4 	bl	800029c <__adddf3>
 8009154:	4632      	mov	r2, r6
 8009156:	463b      	mov	r3, r7
 8009158:	f7f7 f8a0 	bl	800029c <__adddf3>
 800915c:	2000      	movs	r0, #0
 800915e:	4632      	mov	r2, r6
 8009160:	463b      	mov	r3, r7
 8009162:	4604      	mov	r4, r0
 8009164:	460d      	mov	r5, r1
 8009166:	f7f7 f897 	bl	8000298 <__aeabi_dsub>
 800916a:	4642      	mov	r2, r8
 800916c:	464b      	mov	r3, r9
 800916e:	f7f7 f893 	bl	8000298 <__aeabi_dsub>
 8009172:	ec53 2b18 	vmov	r2, r3, d8
 8009176:	f7f7 f88f 	bl	8000298 <__aeabi_dsub>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4650      	mov	r0, sl
 8009180:	4659      	mov	r1, fp
 8009182:	e610      	b.n	8008da6 <__ieee754_pow+0x31e>
 8009184:	2401      	movs	r4, #1
 8009186:	e6a1      	b.n	8008ecc <__ieee754_pow+0x444>
 8009188:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80091d8 <__ieee754_pow+0x750>
 800918c:	e617      	b.n	8008dbe <__ieee754_pow+0x336>
 800918e:	bf00      	nop
 8009190:	4a454eef 	.word	0x4a454eef
 8009194:	3fca7e28 	.word	0x3fca7e28
 8009198:	93c9db65 	.word	0x93c9db65
 800919c:	3fcd864a 	.word	0x3fcd864a
 80091a0:	a91d4101 	.word	0xa91d4101
 80091a4:	3fd17460 	.word	0x3fd17460
 80091a8:	518f264d 	.word	0x518f264d
 80091ac:	3fd55555 	.word	0x3fd55555
 80091b0:	db6fabff 	.word	0xdb6fabff
 80091b4:	3fdb6db6 	.word	0x3fdb6db6
 80091b8:	33333303 	.word	0x33333303
 80091bc:	3fe33333 	.word	0x3fe33333
 80091c0:	e0000000 	.word	0xe0000000
 80091c4:	3feec709 	.word	0x3feec709
 80091c8:	dc3a03fd 	.word	0xdc3a03fd
 80091cc:	3feec709 	.word	0x3feec709
 80091d0:	145b01f5 	.word	0x145b01f5
 80091d4:	be3e2fe0 	.word	0xbe3e2fe0
 80091d8:	00000000 	.word	0x00000000
 80091dc:	3ff00000 	.word	0x3ff00000
 80091e0:	7ff00000 	.word	0x7ff00000
 80091e4:	43400000 	.word	0x43400000
 80091e8:	0003988e 	.word	0x0003988e
 80091ec:	000bb679 	.word	0x000bb679
 80091f0:	0800aef8 	.word	0x0800aef8
 80091f4:	3ff00000 	.word	0x3ff00000
 80091f8:	40080000 	.word	0x40080000
 80091fc:	0800af18 	.word	0x0800af18
 8009200:	0800af08 	.word	0x0800af08
 8009204:	a3b5      	add	r3, pc, #724	; (adr r3, 80094dc <__ieee754_pow+0xa54>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	4640      	mov	r0, r8
 800920c:	4649      	mov	r1, r9
 800920e:	f7f7 f845 	bl	800029c <__adddf3>
 8009212:	4622      	mov	r2, r4
 8009214:	ec41 0b1a 	vmov	d10, r0, r1
 8009218:	462b      	mov	r3, r5
 800921a:	4630      	mov	r0, r6
 800921c:	4639      	mov	r1, r7
 800921e:	f7f7 f83b 	bl	8000298 <__aeabi_dsub>
 8009222:	4602      	mov	r2, r0
 8009224:	460b      	mov	r3, r1
 8009226:	ec51 0b1a 	vmov	r0, r1, d10
 800922a:	f7f7 fc7d 	bl	8000b28 <__aeabi_dcmpgt>
 800922e:	2800      	cmp	r0, #0
 8009230:	f47f ae04 	bne.w	8008e3c <__ieee754_pow+0x3b4>
 8009234:	4aa4      	ldr	r2, [pc, #656]	; (80094c8 <__ieee754_pow+0xa40>)
 8009236:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800923a:	4293      	cmp	r3, r2
 800923c:	f340 8108 	ble.w	8009450 <__ieee754_pow+0x9c8>
 8009240:	151b      	asrs	r3, r3, #20
 8009242:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009246:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800924a:	fa4a f303 	asr.w	r3, sl, r3
 800924e:	445b      	add	r3, fp
 8009250:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009254:	4e9d      	ldr	r6, [pc, #628]	; (80094cc <__ieee754_pow+0xa44>)
 8009256:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800925a:	4116      	asrs	r6, r2
 800925c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009260:	2000      	movs	r0, #0
 8009262:	ea23 0106 	bic.w	r1, r3, r6
 8009266:	f1c2 0214 	rsb	r2, r2, #20
 800926a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800926e:	fa4a fa02 	asr.w	sl, sl, r2
 8009272:	f1bb 0f00 	cmp.w	fp, #0
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	4620      	mov	r0, r4
 800927c:	4629      	mov	r1, r5
 800927e:	bfb8      	it	lt
 8009280:	f1ca 0a00 	rsblt	sl, sl, #0
 8009284:	f7f7 f808 	bl	8000298 <__aeabi_dsub>
 8009288:	ec41 0b19 	vmov	d9, r0, r1
 800928c:	4642      	mov	r2, r8
 800928e:	464b      	mov	r3, r9
 8009290:	ec51 0b19 	vmov	r0, r1, d9
 8009294:	f7f7 f802 	bl	800029c <__adddf3>
 8009298:	a37b      	add	r3, pc, #492	; (adr r3, 8009488 <__ieee754_pow+0xa00>)
 800929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929e:	2000      	movs	r0, #0
 80092a0:	4604      	mov	r4, r0
 80092a2:	460d      	mov	r5, r1
 80092a4:	f7f7 f9b0 	bl	8000608 <__aeabi_dmul>
 80092a8:	ec53 2b19 	vmov	r2, r3, d9
 80092ac:	4606      	mov	r6, r0
 80092ae:	460f      	mov	r7, r1
 80092b0:	4620      	mov	r0, r4
 80092b2:	4629      	mov	r1, r5
 80092b4:	f7f6 fff0 	bl	8000298 <__aeabi_dsub>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4640      	mov	r0, r8
 80092be:	4649      	mov	r1, r9
 80092c0:	f7f6 ffea 	bl	8000298 <__aeabi_dsub>
 80092c4:	a372      	add	r3, pc, #456	; (adr r3, 8009490 <__ieee754_pow+0xa08>)
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	f7f7 f99d 	bl	8000608 <__aeabi_dmul>
 80092ce:	a372      	add	r3, pc, #456	; (adr r3, 8009498 <__ieee754_pow+0xa10>)
 80092d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d4:	4680      	mov	r8, r0
 80092d6:	4689      	mov	r9, r1
 80092d8:	4620      	mov	r0, r4
 80092da:	4629      	mov	r1, r5
 80092dc:	f7f7 f994 	bl	8000608 <__aeabi_dmul>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4640      	mov	r0, r8
 80092e6:	4649      	mov	r1, r9
 80092e8:	f7f6 ffd8 	bl	800029c <__adddf3>
 80092ec:	4604      	mov	r4, r0
 80092ee:	460d      	mov	r5, r1
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	4630      	mov	r0, r6
 80092f6:	4639      	mov	r1, r7
 80092f8:	f7f6 ffd0 	bl	800029c <__adddf3>
 80092fc:	4632      	mov	r2, r6
 80092fe:	463b      	mov	r3, r7
 8009300:	4680      	mov	r8, r0
 8009302:	4689      	mov	r9, r1
 8009304:	f7f6 ffc8 	bl	8000298 <__aeabi_dsub>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	4620      	mov	r0, r4
 800930e:	4629      	mov	r1, r5
 8009310:	f7f6 ffc2 	bl	8000298 <__aeabi_dsub>
 8009314:	4642      	mov	r2, r8
 8009316:	4606      	mov	r6, r0
 8009318:	460f      	mov	r7, r1
 800931a:	464b      	mov	r3, r9
 800931c:	4640      	mov	r0, r8
 800931e:	4649      	mov	r1, r9
 8009320:	f7f7 f972 	bl	8000608 <__aeabi_dmul>
 8009324:	a35e      	add	r3, pc, #376	; (adr r3, 80094a0 <__ieee754_pow+0xa18>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	4604      	mov	r4, r0
 800932c:	460d      	mov	r5, r1
 800932e:	f7f7 f96b 	bl	8000608 <__aeabi_dmul>
 8009332:	a35d      	add	r3, pc, #372	; (adr r3, 80094a8 <__ieee754_pow+0xa20>)
 8009334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009338:	f7f6 ffae 	bl	8000298 <__aeabi_dsub>
 800933c:	4622      	mov	r2, r4
 800933e:	462b      	mov	r3, r5
 8009340:	f7f7 f962 	bl	8000608 <__aeabi_dmul>
 8009344:	a35a      	add	r3, pc, #360	; (adr r3, 80094b0 <__ieee754_pow+0xa28>)
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	f7f6 ffa7 	bl	800029c <__adddf3>
 800934e:	4622      	mov	r2, r4
 8009350:	462b      	mov	r3, r5
 8009352:	f7f7 f959 	bl	8000608 <__aeabi_dmul>
 8009356:	a358      	add	r3, pc, #352	; (adr r3, 80094b8 <__ieee754_pow+0xa30>)
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	f7f6 ff9c 	bl	8000298 <__aeabi_dsub>
 8009360:	4622      	mov	r2, r4
 8009362:	462b      	mov	r3, r5
 8009364:	f7f7 f950 	bl	8000608 <__aeabi_dmul>
 8009368:	a355      	add	r3, pc, #340	; (adr r3, 80094c0 <__ieee754_pow+0xa38>)
 800936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936e:	f7f6 ff95 	bl	800029c <__adddf3>
 8009372:	4622      	mov	r2, r4
 8009374:	462b      	mov	r3, r5
 8009376:	f7f7 f947 	bl	8000608 <__aeabi_dmul>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	4640      	mov	r0, r8
 8009380:	4649      	mov	r1, r9
 8009382:	f7f6 ff89 	bl	8000298 <__aeabi_dsub>
 8009386:	4604      	mov	r4, r0
 8009388:	460d      	mov	r5, r1
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	4640      	mov	r0, r8
 8009390:	4649      	mov	r1, r9
 8009392:	f7f7 f939 	bl	8000608 <__aeabi_dmul>
 8009396:	2200      	movs	r2, #0
 8009398:	ec41 0b19 	vmov	d9, r0, r1
 800939c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093a0:	4620      	mov	r0, r4
 80093a2:	4629      	mov	r1, r5
 80093a4:	f7f6 ff78 	bl	8000298 <__aeabi_dsub>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	ec51 0b19 	vmov	r0, r1, d9
 80093b0:	f7f7 fa54 	bl	800085c <__aeabi_ddiv>
 80093b4:	4632      	mov	r2, r6
 80093b6:	4604      	mov	r4, r0
 80093b8:	460d      	mov	r5, r1
 80093ba:	463b      	mov	r3, r7
 80093bc:	4640      	mov	r0, r8
 80093be:	4649      	mov	r1, r9
 80093c0:	f7f7 f922 	bl	8000608 <__aeabi_dmul>
 80093c4:	4632      	mov	r2, r6
 80093c6:	463b      	mov	r3, r7
 80093c8:	f7f6 ff68 	bl	800029c <__adddf3>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4620      	mov	r0, r4
 80093d2:	4629      	mov	r1, r5
 80093d4:	f7f6 ff60 	bl	8000298 <__aeabi_dsub>
 80093d8:	4642      	mov	r2, r8
 80093da:	464b      	mov	r3, r9
 80093dc:	f7f6 ff5c 	bl	8000298 <__aeabi_dsub>
 80093e0:	460b      	mov	r3, r1
 80093e2:	4602      	mov	r2, r0
 80093e4:	493a      	ldr	r1, [pc, #232]	; (80094d0 <__ieee754_pow+0xa48>)
 80093e6:	2000      	movs	r0, #0
 80093e8:	f7f6 ff56 	bl	8000298 <__aeabi_dsub>
 80093ec:	ec41 0b10 	vmov	d0, r0, r1
 80093f0:	ee10 3a90 	vmov	r3, s1
 80093f4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80093f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093fc:	da2b      	bge.n	8009456 <__ieee754_pow+0x9ce>
 80093fe:	4650      	mov	r0, sl
 8009400:	f001 fa6e 	bl	800a8e0 <scalbn>
 8009404:	ec51 0b10 	vmov	r0, r1, d0
 8009408:	ec53 2b18 	vmov	r2, r3, d8
 800940c:	f7ff bbed 	b.w	8008bea <__ieee754_pow+0x162>
 8009410:	4b30      	ldr	r3, [pc, #192]	; (80094d4 <__ieee754_pow+0xa4c>)
 8009412:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009416:	429e      	cmp	r6, r3
 8009418:	f77f af0c 	ble.w	8009234 <__ieee754_pow+0x7ac>
 800941c:	4b2e      	ldr	r3, [pc, #184]	; (80094d8 <__ieee754_pow+0xa50>)
 800941e:	440b      	add	r3, r1
 8009420:	4303      	orrs	r3, r0
 8009422:	d009      	beq.n	8009438 <__ieee754_pow+0x9b0>
 8009424:	ec51 0b18 	vmov	r0, r1, d8
 8009428:	2200      	movs	r2, #0
 800942a:	2300      	movs	r3, #0
 800942c:	f7f7 fb5e 	bl	8000aec <__aeabi_dcmplt>
 8009430:	3800      	subs	r0, #0
 8009432:	bf18      	it	ne
 8009434:	2001      	movne	r0, #1
 8009436:	e447      	b.n	8008cc8 <__ieee754_pow+0x240>
 8009438:	4622      	mov	r2, r4
 800943a:	462b      	mov	r3, r5
 800943c:	f7f6 ff2c 	bl	8000298 <__aeabi_dsub>
 8009440:	4642      	mov	r2, r8
 8009442:	464b      	mov	r3, r9
 8009444:	f7f7 fb66 	bl	8000b14 <__aeabi_dcmpge>
 8009448:	2800      	cmp	r0, #0
 800944a:	f43f aef3 	beq.w	8009234 <__ieee754_pow+0x7ac>
 800944e:	e7e9      	b.n	8009424 <__ieee754_pow+0x99c>
 8009450:	f04f 0a00 	mov.w	sl, #0
 8009454:	e71a      	b.n	800928c <__ieee754_pow+0x804>
 8009456:	ec51 0b10 	vmov	r0, r1, d0
 800945a:	4619      	mov	r1, r3
 800945c:	e7d4      	b.n	8009408 <__ieee754_pow+0x980>
 800945e:	491c      	ldr	r1, [pc, #112]	; (80094d0 <__ieee754_pow+0xa48>)
 8009460:	2000      	movs	r0, #0
 8009462:	f7ff bb30 	b.w	8008ac6 <__ieee754_pow+0x3e>
 8009466:	2000      	movs	r0, #0
 8009468:	2100      	movs	r1, #0
 800946a:	f7ff bb2c 	b.w	8008ac6 <__ieee754_pow+0x3e>
 800946e:	4630      	mov	r0, r6
 8009470:	4639      	mov	r1, r7
 8009472:	f7ff bb28 	b.w	8008ac6 <__ieee754_pow+0x3e>
 8009476:	9204      	str	r2, [sp, #16]
 8009478:	f7ff bb7a 	b.w	8008b70 <__ieee754_pow+0xe8>
 800947c:	2300      	movs	r3, #0
 800947e:	f7ff bb64 	b.w	8008b4a <__ieee754_pow+0xc2>
 8009482:	bf00      	nop
 8009484:	f3af 8000 	nop.w
 8009488:	00000000 	.word	0x00000000
 800948c:	3fe62e43 	.word	0x3fe62e43
 8009490:	fefa39ef 	.word	0xfefa39ef
 8009494:	3fe62e42 	.word	0x3fe62e42
 8009498:	0ca86c39 	.word	0x0ca86c39
 800949c:	be205c61 	.word	0xbe205c61
 80094a0:	72bea4d0 	.word	0x72bea4d0
 80094a4:	3e663769 	.word	0x3e663769
 80094a8:	c5d26bf1 	.word	0xc5d26bf1
 80094ac:	3ebbbd41 	.word	0x3ebbbd41
 80094b0:	af25de2c 	.word	0xaf25de2c
 80094b4:	3f11566a 	.word	0x3f11566a
 80094b8:	16bebd93 	.word	0x16bebd93
 80094bc:	3f66c16c 	.word	0x3f66c16c
 80094c0:	5555553e 	.word	0x5555553e
 80094c4:	3fc55555 	.word	0x3fc55555
 80094c8:	3fe00000 	.word	0x3fe00000
 80094cc:	000fffff 	.word	0x000fffff
 80094d0:	3ff00000 	.word	0x3ff00000
 80094d4:	4090cbff 	.word	0x4090cbff
 80094d8:	3f6f3400 	.word	0x3f6f3400
 80094dc:	652b82fe 	.word	0x652b82fe
 80094e0:	3c971547 	.word	0x3c971547
 80094e4:	00000000 	.word	0x00000000

080094e8 <__ieee754_rem_pio2>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	ed2d 8b02 	vpush	{d8}
 80094f0:	ec55 4b10 	vmov	r4, r5, d0
 80094f4:	4bca      	ldr	r3, [pc, #808]	; (8009820 <__ieee754_rem_pio2+0x338>)
 80094f6:	b08b      	sub	sp, #44	; 0x2c
 80094f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80094fc:	4598      	cmp	r8, r3
 80094fe:	4682      	mov	sl, r0
 8009500:	9502      	str	r5, [sp, #8]
 8009502:	dc08      	bgt.n	8009516 <__ieee754_rem_pio2+0x2e>
 8009504:	2200      	movs	r2, #0
 8009506:	2300      	movs	r3, #0
 8009508:	ed80 0b00 	vstr	d0, [r0]
 800950c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009510:	f04f 0b00 	mov.w	fp, #0
 8009514:	e028      	b.n	8009568 <__ieee754_rem_pio2+0x80>
 8009516:	4bc3      	ldr	r3, [pc, #780]	; (8009824 <__ieee754_rem_pio2+0x33c>)
 8009518:	4598      	cmp	r8, r3
 800951a:	dc78      	bgt.n	800960e <__ieee754_rem_pio2+0x126>
 800951c:	9b02      	ldr	r3, [sp, #8]
 800951e:	4ec2      	ldr	r6, [pc, #776]	; (8009828 <__ieee754_rem_pio2+0x340>)
 8009520:	2b00      	cmp	r3, #0
 8009522:	ee10 0a10 	vmov	r0, s0
 8009526:	a3b0      	add	r3, pc, #704	; (adr r3, 80097e8 <__ieee754_rem_pio2+0x300>)
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	4629      	mov	r1, r5
 800952e:	dd39      	ble.n	80095a4 <__ieee754_rem_pio2+0xbc>
 8009530:	f7f6 feb2 	bl	8000298 <__aeabi_dsub>
 8009534:	45b0      	cmp	r8, r6
 8009536:	4604      	mov	r4, r0
 8009538:	460d      	mov	r5, r1
 800953a:	d01b      	beq.n	8009574 <__ieee754_rem_pio2+0x8c>
 800953c:	a3ac      	add	r3, pc, #688	; (adr r3, 80097f0 <__ieee754_rem_pio2+0x308>)
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	f7f6 fea9 	bl	8000298 <__aeabi_dsub>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	e9ca 2300 	strd	r2, r3, [sl]
 800954e:	4620      	mov	r0, r4
 8009550:	4629      	mov	r1, r5
 8009552:	f7f6 fea1 	bl	8000298 <__aeabi_dsub>
 8009556:	a3a6      	add	r3, pc, #664	; (adr r3, 80097f0 <__ieee754_rem_pio2+0x308>)
 8009558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955c:	f7f6 fe9c 	bl	8000298 <__aeabi_dsub>
 8009560:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009564:	f04f 0b01 	mov.w	fp, #1
 8009568:	4658      	mov	r0, fp
 800956a:	b00b      	add	sp, #44	; 0x2c
 800956c:	ecbd 8b02 	vpop	{d8}
 8009570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009574:	a3a0      	add	r3, pc, #640	; (adr r3, 80097f8 <__ieee754_rem_pio2+0x310>)
 8009576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957a:	f7f6 fe8d 	bl	8000298 <__aeabi_dsub>
 800957e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009800 <__ieee754_rem_pio2+0x318>)
 8009580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009584:	4604      	mov	r4, r0
 8009586:	460d      	mov	r5, r1
 8009588:	f7f6 fe86 	bl	8000298 <__aeabi_dsub>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	e9ca 2300 	strd	r2, r3, [sl]
 8009594:	4620      	mov	r0, r4
 8009596:	4629      	mov	r1, r5
 8009598:	f7f6 fe7e 	bl	8000298 <__aeabi_dsub>
 800959c:	a398      	add	r3, pc, #608	; (adr r3, 8009800 <__ieee754_rem_pio2+0x318>)
 800959e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a2:	e7db      	b.n	800955c <__ieee754_rem_pio2+0x74>
 80095a4:	f7f6 fe7a 	bl	800029c <__adddf3>
 80095a8:	45b0      	cmp	r8, r6
 80095aa:	4604      	mov	r4, r0
 80095ac:	460d      	mov	r5, r1
 80095ae:	d016      	beq.n	80095de <__ieee754_rem_pio2+0xf6>
 80095b0:	a38f      	add	r3, pc, #572	; (adr r3, 80097f0 <__ieee754_rem_pio2+0x308>)
 80095b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b6:	f7f6 fe71 	bl	800029c <__adddf3>
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	e9ca 2300 	strd	r2, r3, [sl]
 80095c2:	4620      	mov	r0, r4
 80095c4:	4629      	mov	r1, r5
 80095c6:	f7f6 fe67 	bl	8000298 <__aeabi_dsub>
 80095ca:	a389      	add	r3, pc, #548	; (adr r3, 80097f0 <__ieee754_rem_pio2+0x308>)
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	f7f6 fe64 	bl	800029c <__adddf3>
 80095d4:	f04f 3bff 	mov.w	fp, #4294967295
 80095d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80095dc:	e7c4      	b.n	8009568 <__ieee754_rem_pio2+0x80>
 80095de:	a386      	add	r3, pc, #536	; (adr r3, 80097f8 <__ieee754_rem_pio2+0x310>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	f7f6 fe5a 	bl	800029c <__adddf3>
 80095e8:	a385      	add	r3, pc, #532	; (adr r3, 8009800 <__ieee754_rem_pio2+0x318>)
 80095ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ee:	4604      	mov	r4, r0
 80095f0:	460d      	mov	r5, r1
 80095f2:	f7f6 fe53 	bl	800029c <__adddf3>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	e9ca 2300 	strd	r2, r3, [sl]
 80095fe:	4620      	mov	r0, r4
 8009600:	4629      	mov	r1, r5
 8009602:	f7f6 fe49 	bl	8000298 <__aeabi_dsub>
 8009606:	a37e      	add	r3, pc, #504	; (adr r3, 8009800 <__ieee754_rem_pio2+0x318>)
 8009608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960c:	e7e0      	b.n	80095d0 <__ieee754_rem_pio2+0xe8>
 800960e:	4b87      	ldr	r3, [pc, #540]	; (800982c <__ieee754_rem_pio2+0x344>)
 8009610:	4598      	cmp	r8, r3
 8009612:	f300 80d9 	bgt.w	80097c8 <__ieee754_rem_pio2+0x2e0>
 8009616:	f001 f8cf 	bl	800a7b8 <fabs>
 800961a:	ec55 4b10 	vmov	r4, r5, d0
 800961e:	ee10 0a10 	vmov	r0, s0
 8009622:	a379      	add	r3, pc, #484	; (adr r3, 8009808 <__ieee754_rem_pio2+0x320>)
 8009624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009628:	4629      	mov	r1, r5
 800962a:	f7f6 ffed 	bl	8000608 <__aeabi_dmul>
 800962e:	4b80      	ldr	r3, [pc, #512]	; (8009830 <__ieee754_rem_pio2+0x348>)
 8009630:	2200      	movs	r2, #0
 8009632:	f7f6 fe33 	bl	800029c <__adddf3>
 8009636:	f7f7 fa97 	bl	8000b68 <__aeabi_d2iz>
 800963a:	4683      	mov	fp, r0
 800963c:	f7f6 ff7a 	bl	8000534 <__aeabi_i2d>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	ec43 2b18 	vmov	d8, r2, r3
 8009648:	a367      	add	r3, pc, #412	; (adr r3, 80097e8 <__ieee754_rem_pio2+0x300>)
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f7f6 ffdb 	bl	8000608 <__aeabi_dmul>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	4620      	mov	r0, r4
 8009658:	4629      	mov	r1, r5
 800965a:	f7f6 fe1d 	bl	8000298 <__aeabi_dsub>
 800965e:	a364      	add	r3, pc, #400	; (adr r3, 80097f0 <__ieee754_rem_pio2+0x308>)
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	4606      	mov	r6, r0
 8009666:	460f      	mov	r7, r1
 8009668:	ec51 0b18 	vmov	r0, r1, d8
 800966c:	f7f6 ffcc 	bl	8000608 <__aeabi_dmul>
 8009670:	f1bb 0f1f 	cmp.w	fp, #31
 8009674:	4604      	mov	r4, r0
 8009676:	460d      	mov	r5, r1
 8009678:	dc0d      	bgt.n	8009696 <__ieee754_rem_pio2+0x1ae>
 800967a:	4b6e      	ldr	r3, [pc, #440]	; (8009834 <__ieee754_rem_pio2+0x34c>)
 800967c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009684:	4543      	cmp	r3, r8
 8009686:	d006      	beq.n	8009696 <__ieee754_rem_pio2+0x1ae>
 8009688:	4622      	mov	r2, r4
 800968a:	462b      	mov	r3, r5
 800968c:	4630      	mov	r0, r6
 800968e:	4639      	mov	r1, r7
 8009690:	f7f6 fe02 	bl	8000298 <__aeabi_dsub>
 8009694:	e00f      	b.n	80096b6 <__ieee754_rem_pio2+0x1ce>
 8009696:	462b      	mov	r3, r5
 8009698:	4622      	mov	r2, r4
 800969a:	4630      	mov	r0, r6
 800969c:	4639      	mov	r1, r7
 800969e:	f7f6 fdfb 	bl	8000298 <__aeabi_dsub>
 80096a2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80096a6:	9303      	str	r3, [sp, #12]
 80096a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80096ac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80096b0:	f1b8 0f10 	cmp.w	r8, #16
 80096b4:	dc02      	bgt.n	80096bc <__ieee754_rem_pio2+0x1d4>
 80096b6:	e9ca 0100 	strd	r0, r1, [sl]
 80096ba:	e039      	b.n	8009730 <__ieee754_rem_pio2+0x248>
 80096bc:	a34e      	add	r3, pc, #312	; (adr r3, 80097f8 <__ieee754_rem_pio2+0x310>)
 80096be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c2:	ec51 0b18 	vmov	r0, r1, d8
 80096c6:	f7f6 ff9f 	bl	8000608 <__aeabi_dmul>
 80096ca:	4604      	mov	r4, r0
 80096cc:	460d      	mov	r5, r1
 80096ce:	4602      	mov	r2, r0
 80096d0:	460b      	mov	r3, r1
 80096d2:	4630      	mov	r0, r6
 80096d4:	4639      	mov	r1, r7
 80096d6:	f7f6 fddf 	bl	8000298 <__aeabi_dsub>
 80096da:	4602      	mov	r2, r0
 80096dc:	460b      	mov	r3, r1
 80096de:	4680      	mov	r8, r0
 80096e0:	4689      	mov	r9, r1
 80096e2:	4630      	mov	r0, r6
 80096e4:	4639      	mov	r1, r7
 80096e6:	f7f6 fdd7 	bl	8000298 <__aeabi_dsub>
 80096ea:	4622      	mov	r2, r4
 80096ec:	462b      	mov	r3, r5
 80096ee:	f7f6 fdd3 	bl	8000298 <__aeabi_dsub>
 80096f2:	a343      	add	r3, pc, #268	; (adr r3, 8009800 <__ieee754_rem_pio2+0x318>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	4604      	mov	r4, r0
 80096fa:	460d      	mov	r5, r1
 80096fc:	ec51 0b18 	vmov	r0, r1, d8
 8009700:	f7f6 ff82 	bl	8000608 <__aeabi_dmul>
 8009704:	4622      	mov	r2, r4
 8009706:	462b      	mov	r3, r5
 8009708:	f7f6 fdc6 	bl	8000298 <__aeabi_dsub>
 800970c:	4602      	mov	r2, r0
 800970e:	460b      	mov	r3, r1
 8009710:	4604      	mov	r4, r0
 8009712:	460d      	mov	r5, r1
 8009714:	4640      	mov	r0, r8
 8009716:	4649      	mov	r1, r9
 8009718:	f7f6 fdbe 	bl	8000298 <__aeabi_dsub>
 800971c:	9a03      	ldr	r2, [sp, #12]
 800971e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	2b31      	cmp	r3, #49	; 0x31
 8009726:	dc24      	bgt.n	8009772 <__ieee754_rem_pio2+0x28a>
 8009728:	e9ca 0100 	strd	r0, r1, [sl]
 800972c:	4646      	mov	r6, r8
 800972e:	464f      	mov	r7, r9
 8009730:	e9da 8900 	ldrd	r8, r9, [sl]
 8009734:	4630      	mov	r0, r6
 8009736:	4642      	mov	r2, r8
 8009738:	464b      	mov	r3, r9
 800973a:	4639      	mov	r1, r7
 800973c:	f7f6 fdac 	bl	8000298 <__aeabi_dsub>
 8009740:	462b      	mov	r3, r5
 8009742:	4622      	mov	r2, r4
 8009744:	f7f6 fda8 	bl	8000298 <__aeabi_dsub>
 8009748:	9b02      	ldr	r3, [sp, #8]
 800974a:	2b00      	cmp	r3, #0
 800974c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009750:	f6bf af0a 	bge.w	8009568 <__ieee754_rem_pio2+0x80>
 8009754:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009758:	f8ca 3004 	str.w	r3, [sl, #4]
 800975c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009760:	f8ca 8000 	str.w	r8, [sl]
 8009764:	f8ca 0008 	str.w	r0, [sl, #8]
 8009768:	f8ca 300c 	str.w	r3, [sl, #12]
 800976c:	f1cb 0b00 	rsb	fp, fp, #0
 8009770:	e6fa      	b.n	8009568 <__ieee754_rem_pio2+0x80>
 8009772:	a327      	add	r3, pc, #156	; (adr r3, 8009810 <__ieee754_rem_pio2+0x328>)
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	ec51 0b18 	vmov	r0, r1, d8
 800977c:	f7f6 ff44 	bl	8000608 <__aeabi_dmul>
 8009780:	4604      	mov	r4, r0
 8009782:	460d      	mov	r5, r1
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	4640      	mov	r0, r8
 800978a:	4649      	mov	r1, r9
 800978c:	f7f6 fd84 	bl	8000298 <__aeabi_dsub>
 8009790:	4602      	mov	r2, r0
 8009792:	460b      	mov	r3, r1
 8009794:	4606      	mov	r6, r0
 8009796:	460f      	mov	r7, r1
 8009798:	4640      	mov	r0, r8
 800979a:	4649      	mov	r1, r9
 800979c:	f7f6 fd7c 	bl	8000298 <__aeabi_dsub>
 80097a0:	4622      	mov	r2, r4
 80097a2:	462b      	mov	r3, r5
 80097a4:	f7f6 fd78 	bl	8000298 <__aeabi_dsub>
 80097a8:	a31b      	add	r3, pc, #108	; (adr r3, 8009818 <__ieee754_rem_pio2+0x330>)
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	4604      	mov	r4, r0
 80097b0:	460d      	mov	r5, r1
 80097b2:	ec51 0b18 	vmov	r0, r1, d8
 80097b6:	f7f6 ff27 	bl	8000608 <__aeabi_dmul>
 80097ba:	4622      	mov	r2, r4
 80097bc:	462b      	mov	r3, r5
 80097be:	f7f6 fd6b 	bl	8000298 <__aeabi_dsub>
 80097c2:	4604      	mov	r4, r0
 80097c4:	460d      	mov	r5, r1
 80097c6:	e75f      	b.n	8009688 <__ieee754_rem_pio2+0x1a0>
 80097c8:	4b1b      	ldr	r3, [pc, #108]	; (8009838 <__ieee754_rem_pio2+0x350>)
 80097ca:	4598      	cmp	r8, r3
 80097cc:	dd36      	ble.n	800983c <__ieee754_rem_pio2+0x354>
 80097ce:	ee10 2a10 	vmov	r2, s0
 80097d2:	462b      	mov	r3, r5
 80097d4:	4620      	mov	r0, r4
 80097d6:	4629      	mov	r1, r5
 80097d8:	f7f6 fd5e 	bl	8000298 <__aeabi_dsub>
 80097dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80097e0:	e9ca 0100 	strd	r0, r1, [sl]
 80097e4:	e694      	b.n	8009510 <__ieee754_rem_pio2+0x28>
 80097e6:	bf00      	nop
 80097e8:	54400000 	.word	0x54400000
 80097ec:	3ff921fb 	.word	0x3ff921fb
 80097f0:	1a626331 	.word	0x1a626331
 80097f4:	3dd0b461 	.word	0x3dd0b461
 80097f8:	1a600000 	.word	0x1a600000
 80097fc:	3dd0b461 	.word	0x3dd0b461
 8009800:	2e037073 	.word	0x2e037073
 8009804:	3ba3198a 	.word	0x3ba3198a
 8009808:	6dc9c883 	.word	0x6dc9c883
 800980c:	3fe45f30 	.word	0x3fe45f30
 8009810:	2e000000 	.word	0x2e000000
 8009814:	3ba3198a 	.word	0x3ba3198a
 8009818:	252049c1 	.word	0x252049c1
 800981c:	397b839a 	.word	0x397b839a
 8009820:	3fe921fb 	.word	0x3fe921fb
 8009824:	4002d97b 	.word	0x4002d97b
 8009828:	3ff921fb 	.word	0x3ff921fb
 800982c:	413921fb 	.word	0x413921fb
 8009830:	3fe00000 	.word	0x3fe00000
 8009834:	0800af28 	.word	0x0800af28
 8009838:	7fefffff 	.word	0x7fefffff
 800983c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009840:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009844:	ee10 0a10 	vmov	r0, s0
 8009848:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800984c:	ee10 6a10 	vmov	r6, s0
 8009850:	460f      	mov	r7, r1
 8009852:	f7f7 f989 	bl	8000b68 <__aeabi_d2iz>
 8009856:	f7f6 fe6d 	bl	8000534 <__aeabi_i2d>
 800985a:	4602      	mov	r2, r0
 800985c:	460b      	mov	r3, r1
 800985e:	4630      	mov	r0, r6
 8009860:	4639      	mov	r1, r7
 8009862:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009866:	f7f6 fd17 	bl	8000298 <__aeabi_dsub>
 800986a:	4b23      	ldr	r3, [pc, #140]	; (80098f8 <__ieee754_rem_pio2+0x410>)
 800986c:	2200      	movs	r2, #0
 800986e:	f7f6 fecb 	bl	8000608 <__aeabi_dmul>
 8009872:	460f      	mov	r7, r1
 8009874:	4606      	mov	r6, r0
 8009876:	f7f7 f977 	bl	8000b68 <__aeabi_d2iz>
 800987a:	f7f6 fe5b 	bl	8000534 <__aeabi_i2d>
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	4630      	mov	r0, r6
 8009884:	4639      	mov	r1, r7
 8009886:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800988a:	f7f6 fd05 	bl	8000298 <__aeabi_dsub>
 800988e:	4b1a      	ldr	r3, [pc, #104]	; (80098f8 <__ieee754_rem_pio2+0x410>)
 8009890:	2200      	movs	r2, #0
 8009892:	f7f6 feb9 	bl	8000608 <__aeabi_dmul>
 8009896:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800989a:	ad04      	add	r5, sp, #16
 800989c:	f04f 0803 	mov.w	r8, #3
 80098a0:	46a9      	mov	r9, r5
 80098a2:	2600      	movs	r6, #0
 80098a4:	2700      	movs	r7, #0
 80098a6:	4632      	mov	r2, r6
 80098a8:	463b      	mov	r3, r7
 80098aa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80098ae:	46c3      	mov	fp, r8
 80098b0:	3d08      	subs	r5, #8
 80098b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80098b6:	f7f7 f90f 	bl	8000ad8 <__aeabi_dcmpeq>
 80098ba:	2800      	cmp	r0, #0
 80098bc:	d1f3      	bne.n	80098a6 <__ieee754_rem_pio2+0x3be>
 80098be:	4b0f      	ldr	r3, [pc, #60]	; (80098fc <__ieee754_rem_pio2+0x414>)
 80098c0:	9301      	str	r3, [sp, #4]
 80098c2:	2302      	movs	r3, #2
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	4622      	mov	r2, r4
 80098c8:	465b      	mov	r3, fp
 80098ca:	4651      	mov	r1, sl
 80098cc:	4648      	mov	r0, r9
 80098ce:	f000 f993 	bl	8009bf8 <__kernel_rem_pio2>
 80098d2:	9b02      	ldr	r3, [sp, #8]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	4683      	mov	fp, r0
 80098d8:	f6bf ae46 	bge.w	8009568 <__ieee754_rem_pio2+0x80>
 80098dc:	e9da 2100 	ldrd	r2, r1, [sl]
 80098e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098e4:	e9ca 2300 	strd	r2, r3, [sl]
 80098e8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80098ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098f0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80098f4:	e73a      	b.n	800976c <__ieee754_rem_pio2+0x284>
 80098f6:	bf00      	nop
 80098f8:	41700000 	.word	0x41700000
 80098fc:	0800afa8 	.word	0x0800afa8

08009900 <__ieee754_sqrt>:
 8009900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009904:	ec55 4b10 	vmov	r4, r5, d0
 8009908:	4e55      	ldr	r6, [pc, #340]	; (8009a60 <__ieee754_sqrt+0x160>)
 800990a:	43ae      	bics	r6, r5
 800990c:	ee10 0a10 	vmov	r0, s0
 8009910:	ee10 3a10 	vmov	r3, s0
 8009914:	462a      	mov	r2, r5
 8009916:	4629      	mov	r1, r5
 8009918:	d110      	bne.n	800993c <__ieee754_sqrt+0x3c>
 800991a:	ee10 2a10 	vmov	r2, s0
 800991e:	462b      	mov	r3, r5
 8009920:	f7f6 fe72 	bl	8000608 <__aeabi_dmul>
 8009924:	4602      	mov	r2, r0
 8009926:	460b      	mov	r3, r1
 8009928:	4620      	mov	r0, r4
 800992a:	4629      	mov	r1, r5
 800992c:	f7f6 fcb6 	bl	800029c <__adddf3>
 8009930:	4604      	mov	r4, r0
 8009932:	460d      	mov	r5, r1
 8009934:	ec45 4b10 	vmov	d0, r4, r5
 8009938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800993c:	2d00      	cmp	r5, #0
 800993e:	dc10      	bgt.n	8009962 <__ieee754_sqrt+0x62>
 8009940:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009944:	4330      	orrs	r0, r6
 8009946:	d0f5      	beq.n	8009934 <__ieee754_sqrt+0x34>
 8009948:	b15d      	cbz	r5, 8009962 <__ieee754_sqrt+0x62>
 800994a:	ee10 2a10 	vmov	r2, s0
 800994e:	462b      	mov	r3, r5
 8009950:	ee10 0a10 	vmov	r0, s0
 8009954:	f7f6 fca0 	bl	8000298 <__aeabi_dsub>
 8009958:	4602      	mov	r2, r0
 800995a:	460b      	mov	r3, r1
 800995c:	f7f6 ff7e 	bl	800085c <__aeabi_ddiv>
 8009960:	e7e6      	b.n	8009930 <__ieee754_sqrt+0x30>
 8009962:	1512      	asrs	r2, r2, #20
 8009964:	d074      	beq.n	8009a50 <__ieee754_sqrt+0x150>
 8009966:	07d4      	lsls	r4, r2, #31
 8009968:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800996c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009974:	bf5e      	ittt	pl
 8009976:	0fda      	lsrpl	r2, r3, #31
 8009978:	005b      	lslpl	r3, r3, #1
 800997a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800997e:	2400      	movs	r4, #0
 8009980:	0fda      	lsrs	r2, r3, #31
 8009982:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009986:	107f      	asrs	r7, r7, #1
 8009988:	005b      	lsls	r3, r3, #1
 800998a:	2516      	movs	r5, #22
 800998c:	4620      	mov	r0, r4
 800998e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009992:	1886      	adds	r6, r0, r2
 8009994:	428e      	cmp	r6, r1
 8009996:	bfde      	ittt	le
 8009998:	1b89      	suble	r1, r1, r6
 800999a:	18b0      	addle	r0, r6, r2
 800999c:	18a4      	addle	r4, r4, r2
 800999e:	0049      	lsls	r1, r1, #1
 80099a0:	3d01      	subs	r5, #1
 80099a2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80099a6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80099aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80099ae:	d1f0      	bne.n	8009992 <__ieee754_sqrt+0x92>
 80099b0:	462a      	mov	r2, r5
 80099b2:	f04f 0e20 	mov.w	lr, #32
 80099b6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80099ba:	4281      	cmp	r1, r0
 80099bc:	eb06 0c05 	add.w	ip, r6, r5
 80099c0:	dc02      	bgt.n	80099c8 <__ieee754_sqrt+0xc8>
 80099c2:	d113      	bne.n	80099ec <__ieee754_sqrt+0xec>
 80099c4:	459c      	cmp	ip, r3
 80099c6:	d811      	bhi.n	80099ec <__ieee754_sqrt+0xec>
 80099c8:	f1bc 0f00 	cmp.w	ip, #0
 80099cc:	eb0c 0506 	add.w	r5, ip, r6
 80099d0:	da43      	bge.n	8009a5a <__ieee754_sqrt+0x15a>
 80099d2:	2d00      	cmp	r5, #0
 80099d4:	db41      	blt.n	8009a5a <__ieee754_sqrt+0x15a>
 80099d6:	f100 0801 	add.w	r8, r0, #1
 80099da:	1a09      	subs	r1, r1, r0
 80099dc:	459c      	cmp	ip, r3
 80099de:	bf88      	it	hi
 80099e0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80099e4:	eba3 030c 	sub.w	r3, r3, ip
 80099e8:	4432      	add	r2, r6
 80099ea:	4640      	mov	r0, r8
 80099ec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80099f0:	f1be 0e01 	subs.w	lr, lr, #1
 80099f4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80099f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80099fc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009a00:	d1db      	bne.n	80099ba <__ieee754_sqrt+0xba>
 8009a02:	430b      	orrs	r3, r1
 8009a04:	d006      	beq.n	8009a14 <__ieee754_sqrt+0x114>
 8009a06:	1c50      	adds	r0, r2, #1
 8009a08:	bf13      	iteet	ne
 8009a0a:	3201      	addne	r2, #1
 8009a0c:	3401      	addeq	r4, #1
 8009a0e:	4672      	moveq	r2, lr
 8009a10:	f022 0201 	bicne.w	r2, r2, #1
 8009a14:	1063      	asrs	r3, r4, #1
 8009a16:	0852      	lsrs	r2, r2, #1
 8009a18:	07e1      	lsls	r1, r4, #31
 8009a1a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009a1e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009a22:	bf48      	it	mi
 8009a24:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009a28:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009a2c:	4614      	mov	r4, r2
 8009a2e:	e781      	b.n	8009934 <__ieee754_sqrt+0x34>
 8009a30:	0ad9      	lsrs	r1, r3, #11
 8009a32:	3815      	subs	r0, #21
 8009a34:	055b      	lsls	r3, r3, #21
 8009a36:	2900      	cmp	r1, #0
 8009a38:	d0fa      	beq.n	8009a30 <__ieee754_sqrt+0x130>
 8009a3a:	02cd      	lsls	r5, r1, #11
 8009a3c:	d50a      	bpl.n	8009a54 <__ieee754_sqrt+0x154>
 8009a3e:	f1c2 0420 	rsb	r4, r2, #32
 8009a42:	fa23 f404 	lsr.w	r4, r3, r4
 8009a46:	1e55      	subs	r5, r2, #1
 8009a48:	4093      	lsls	r3, r2
 8009a4a:	4321      	orrs	r1, r4
 8009a4c:	1b42      	subs	r2, r0, r5
 8009a4e:	e78a      	b.n	8009966 <__ieee754_sqrt+0x66>
 8009a50:	4610      	mov	r0, r2
 8009a52:	e7f0      	b.n	8009a36 <__ieee754_sqrt+0x136>
 8009a54:	0049      	lsls	r1, r1, #1
 8009a56:	3201      	adds	r2, #1
 8009a58:	e7ef      	b.n	8009a3a <__ieee754_sqrt+0x13a>
 8009a5a:	4680      	mov	r8, r0
 8009a5c:	e7bd      	b.n	80099da <__ieee754_sqrt+0xda>
 8009a5e:	bf00      	nop
 8009a60:	7ff00000 	.word	0x7ff00000
 8009a64:	00000000 	.word	0x00000000

08009a68 <__kernel_cos>:
 8009a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6c:	ec57 6b10 	vmov	r6, r7, d0
 8009a70:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009a74:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009a78:	ed8d 1b00 	vstr	d1, [sp]
 8009a7c:	da07      	bge.n	8009a8e <__kernel_cos+0x26>
 8009a7e:	ee10 0a10 	vmov	r0, s0
 8009a82:	4639      	mov	r1, r7
 8009a84:	f7f7 f870 	bl	8000b68 <__aeabi_d2iz>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	f000 8088 	beq.w	8009b9e <__kernel_cos+0x136>
 8009a8e:	4632      	mov	r2, r6
 8009a90:	463b      	mov	r3, r7
 8009a92:	4630      	mov	r0, r6
 8009a94:	4639      	mov	r1, r7
 8009a96:	f7f6 fdb7 	bl	8000608 <__aeabi_dmul>
 8009a9a:	4b51      	ldr	r3, [pc, #324]	; (8009be0 <__kernel_cos+0x178>)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	460d      	mov	r5, r1
 8009aa2:	f7f6 fdb1 	bl	8000608 <__aeabi_dmul>
 8009aa6:	a340      	add	r3, pc, #256	; (adr r3, 8009ba8 <__kernel_cos+0x140>)
 8009aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aac:	4682      	mov	sl, r0
 8009aae:	468b      	mov	fp, r1
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	4629      	mov	r1, r5
 8009ab4:	f7f6 fda8 	bl	8000608 <__aeabi_dmul>
 8009ab8:	a33d      	add	r3, pc, #244	; (adr r3, 8009bb0 <__kernel_cos+0x148>)
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f7f6 fbed 	bl	800029c <__adddf3>
 8009ac2:	4622      	mov	r2, r4
 8009ac4:	462b      	mov	r3, r5
 8009ac6:	f7f6 fd9f 	bl	8000608 <__aeabi_dmul>
 8009aca:	a33b      	add	r3, pc, #236	; (adr r3, 8009bb8 <__kernel_cos+0x150>)
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	f7f6 fbe2 	bl	8000298 <__aeabi_dsub>
 8009ad4:	4622      	mov	r2, r4
 8009ad6:	462b      	mov	r3, r5
 8009ad8:	f7f6 fd96 	bl	8000608 <__aeabi_dmul>
 8009adc:	a338      	add	r3, pc, #224	; (adr r3, 8009bc0 <__kernel_cos+0x158>)
 8009ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae2:	f7f6 fbdb 	bl	800029c <__adddf3>
 8009ae6:	4622      	mov	r2, r4
 8009ae8:	462b      	mov	r3, r5
 8009aea:	f7f6 fd8d 	bl	8000608 <__aeabi_dmul>
 8009aee:	a336      	add	r3, pc, #216	; (adr r3, 8009bc8 <__kernel_cos+0x160>)
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	f7f6 fbd0 	bl	8000298 <__aeabi_dsub>
 8009af8:	4622      	mov	r2, r4
 8009afa:	462b      	mov	r3, r5
 8009afc:	f7f6 fd84 	bl	8000608 <__aeabi_dmul>
 8009b00:	a333      	add	r3, pc, #204	; (adr r3, 8009bd0 <__kernel_cos+0x168>)
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	f7f6 fbc9 	bl	800029c <__adddf3>
 8009b0a:	4622      	mov	r2, r4
 8009b0c:	462b      	mov	r3, r5
 8009b0e:	f7f6 fd7b 	bl	8000608 <__aeabi_dmul>
 8009b12:	4622      	mov	r2, r4
 8009b14:	462b      	mov	r3, r5
 8009b16:	f7f6 fd77 	bl	8000608 <__aeabi_dmul>
 8009b1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b1e:	4604      	mov	r4, r0
 8009b20:	460d      	mov	r5, r1
 8009b22:	4630      	mov	r0, r6
 8009b24:	4639      	mov	r1, r7
 8009b26:	f7f6 fd6f 	bl	8000608 <__aeabi_dmul>
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	4629      	mov	r1, r5
 8009b30:	4620      	mov	r0, r4
 8009b32:	f7f6 fbb1 	bl	8000298 <__aeabi_dsub>
 8009b36:	4b2b      	ldr	r3, [pc, #172]	; (8009be4 <__kernel_cos+0x17c>)
 8009b38:	4598      	cmp	r8, r3
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	460f      	mov	r7, r1
 8009b3e:	dc10      	bgt.n	8009b62 <__kernel_cos+0xfa>
 8009b40:	4602      	mov	r2, r0
 8009b42:	460b      	mov	r3, r1
 8009b44:	4650      	mov	r0, sl
 8009b46:	4659      	mov	r1, fp
 8009b48:	f7f6 fba6 	bl	8000298 <__aeabi_dsub>
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4926      	ldr	r1, [pc, #152]	; (8009be8 <__kernel_cos+0x180>)
 8009b50:	4602      	mov	r2, r0
 8009b52:	2000      	movs	r0, #0
 8009b54:	f7f6 fba0 	bl	8000298 <__aeabi_dsub>
 8009b58:	ec41 0b10 	vmov	d0, r0, r1
 8009b5c:	b003      	add	sp, #12
 8009b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b62:	4b22      	ldr	r3, [pc, #136]	; (8009bec <__kernel_cos+0x184>)
 8009b64:	4920      	ldr	r1, [pc, #128]	; (8009be8 <__kernel_cos+0x180>)
 8009b66:	4598      	cmp	r8, r3
 8009b68:	bfcc      	ite	gt
 8009b6a:	4d21      	ldrgt	r5, [pc, #132]	; (8009bf0 <__kernel_cos+0x188>)
 8009b6c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009b70:	2400      	movs	r4, #0
 8009b72:	4622      	mov	r2, r4
 8009b74:	462b      	mov	r3, r5
 8009b76:	2000      	movs	r0, #0
 8009b78:	f7f6 fb8e 	bl	8000298 <__aeabi_dsub>
 8009b7c:	4622      	mov	r2, r4
 8009b7e:	4680      	mov	r8, r0
 8009b80:	4689      	mov	r9, r1
 8009b82:	462b      	mov	r3, r5
 8009b84:	4650      	mov	r0, sl
 8009b86:	4659      	mov	r1, fp
 8009b88:	f7f6 fb86 	bl	8000298 <__aeabi_dsub>
 8009b8c:	4632      	mov	r2, r6
 8009b8e:	463b      	mov	r3, r7
 8009b90:	f7f6 fb82 	bl	8000298 <__aeabi_dsub>
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	4640      	mov	r0, r8
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	e7da      	b.n	8009b54 <__kernel_cos+0xec>
 8009b9e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009bd8 <__kernel_cos+0x170>
 8009ba2:	e7db      	b.n	8009b5c <__kernel_cos+0xf4>
 8009ba4:	f3af 8000 	nop.w
 8009ba8:	be8838d4 	.word	0xbe8838d4
 8009bac:	bda8fae9 	.word	0xbda8fae9
 8009bb0:	bdb4b1c4 	.word	0xbdb4b1c4
 8009bb4:	3e21ee9e 	.word	0x3e21ee9e
 8009bb8:	809c52ad 	.word	0x809c52ad
 8009bbc:	3e927e4f 	.word	0x3e927e4f
 8009bc0:	19cb1590 	.word	0x19cb1590
 8009bc4:	3efa01a0 	.word	0x3efa01a0
 8009bc8:	16c15177 	.word	0x16c15177
 8009bcc:	3f56c16c 	.word	0x3f56c16c
 8009bd0:	5555554c 	.word	0x5555554c
 8009bd4:	3fa55555 	.word	0x3fa55555
 8009bd8:	00000000 	.word	0x00000000
 8009bdc:	3ff00000 	.word	0x3ff00000
 8009be0:	3fe00000 	.word	0x3fe00000
 8009be4:	3fd33332 	.word	0x3fd33332
 8009be8:	3ff00000 	.word	0x3ff00000
 8009bec:	3fe90000 	.word	0x3fe90000
 8009bf0:	3fd20000 	.word	0x3fd20000
 8009bf4:	00000000 	.word	0x00000000

08009bf8 <__kernel_rem_pio2>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	ed2d 8b02 	vpush	{d8}
 8009c00:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009c04:	f112 0f14 	cmn.w	r2, #20
 8009c08:	9308      	str	r3, [sp, #32]
 8009c0a:	9101      	str	r1, [sp, #4]
 8009c0c:	4bc4      	ldr	r3, [pc, #784]	; (8009f20 <__kernel_rem_pio2+0x328>)
 8009c0e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009c10:	900b      	str	r0, [sp, #44]	; 0x2c
 8009c12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c16:	9302      	str	r3, [sp, #8]
 8009c18:	9b08      	ldr	r3, [sp, #32]
 8009c1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c1e:	bfa8      	it	ge
 8009c20:	1ed4      	subge	r4, r2, #3
 8009c22:	9306      	str	r3, [sp, #24]
 8009c24:	bfb2      	itee	lt
 8009c26:	2400      	movlt	r4, #0
 8009c28:	2318      	movge	r3, #24
 8009c2a:	fb94 f4f3 	sdivge	r4, r4, r3
 8009c2e:	f06f 0317 	mvn.w	r3, #23
 8009c32:	fb04 3303 	mla	r3, r4, r3, r3
 8009c36:	eb03 0a02 	add.w	sl, r3, r2
 8009c3a:	9b02      	ldr	r3, [sp, #8]
 8009c3c:	9a06      	ldr	r2, [sp, #24]
 8009c3e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8009f10 <__kernel_rem_pio2+0x318>
 8009c42:	eb03 0802 	add.w	r8, r3, r2
 8009c46:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009c48:	1aa7      	subs	r7, r4, r2
 8009c4a:	ae22      	add	r6, sp, #136	; 0x88
 8009c4c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009c50:	2500      	movs	r5, #0
 8009c52:	4545      	cmp	r5, r8
 8009c54:	dd13      	ble.n	8009c7e <__kernel_rem_pio2+0x86>
 8009c56:	9b08      	ldr	r3, [sp, #32]
 8009c58:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8009f10 <__kernel_rem_pio2+0x318>
 8009c5c:	aa22      	add	r2, sp, #136	; 0x88
 8009c5e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009c62:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009c66:	f04f 0800 	mov.w	r8, #0
 8009c6a:	9b02      	ldr	r3, [sp, #8]
 8009c6c:	4598      	cmp	r8, r3
 8009c6e:	dc2f      	bgt.n	8009cd0 <__kernel_rem_pio2+0xd8>
 8009c70:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009c74:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009c78:	462f      	mov	r7, r5
 8009c7a:	2600      	movs	r6, #0
 8009c7c:	e01b      	b.n	8009cb6 <__kernel_rem_pio2+0xbe>
 8009c7e:	42ef      	cmn	r7, r5
 8009c80:	d407      	bmi.n	8009c92 <__kernel_rem_pio2+0x9a>
 8009c82:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009c86:	f7f6 fc55 	bl	8000534 <__aeabi_i2d>
 8009c8a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009c8e:	3501      	adds	r5, #1
 8009c90:	e7df      	b.n	8009c52 <__kernel_rem_pio2+0x5a>
 8009c92:	ec51 0b18 	vmov	r0, r1, d8
 8009c96:	e7f8      	b.n	8009c8a <__kernel_rem_pio2+0x92>
 8009c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c9c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009ca0:	f7f6 fcb2 	bl	8000608 <__aeabi_dmul>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cac:	f7f6 faf6 	bl	800029c <__adddf3>
 8009cb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cb4:	3601      	adds	r6, #1
 8009cb6:	9b06      	ldr	r3, [sp, #24]
 8009cb8:	429e      	cmp	r6, r3
 8009cba:	f1a7 0708 	sub.w	r7, r7, #8
 8009cbe:	ddeb      	ble.n	8009c98 <__kernel_rem_pio2+0xa0>
 8009cc0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009cc4:	f108 0801 	add.w	r8, r8, #1
 8009cc8:	ecab 7b02 	vstmia	fp!, {d7}
 8009ccc:	3508      	adds	r5, #8
 8009cce:	e7cc      	b.n	8009c6a <__kernel_rem_pio2+0x72>
 8009cd0:	9b02      	ldr	r3, [sp, #8]
 8009cd2:	aa0e      	add	r2, sp, #56	; 0x38
 8009cd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009cd8:	930d      	str	r3, [sp, #52]	; 0x34
 8009cda:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009cdc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009ce0:	9c02      	ldr	r4, [sp, #8]
 8009ce2:	930c      	str	r3, [sp, #48]	; 0x30
 8009ce4:	00e3      	lsls	r3, r4, #3
 8009ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ce8:	ab9a      	add	r3, sp, #616	; 0x268
 8009cea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009cee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009cf2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8009cf6:	ab72      	add	r3, sp, #456	; 0x1c8
 8009cf8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8009cfc:	46c3      	mov	fp, r8
 8009cfe:	46a1      	mov	r9, r4
 8009d00:	f1b9 0f00 	cmp.w	r9, #0
 8009d04:	f1a5 0508 	sub.w	r5, r5, #8
 8009d08:	dc77      	bgt.n	8009dfa <__kernel_rem_pio2+0x202>
 8009d0a:	ec47 6b10 	vmov	d0, r6, r7
 8009d0e:	4650      	mov	r0, sl
 8009d10:	f000 fde6 	bl	800a8e0 <scalbn>
 8009d14:	ec57 6b10 	vmov	r6, r7, d0
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009d1e:	ee10 0a10 	vmov	r0, s0
 8009d22:	4639      	mov	r1, r7
 8009d24:	f7f6 fc70 	bl	8000608 <__aeabi_dmul>
 8009d28:	ec41 0b10 	vmov	d0, r0, r1
 8009d2c:	f000 fd58 	bl	800a7e0 <floor>
 8009d30:	4b7c      	ldr	r3, [pc, #496]	; (8009f24 <__kernel_rem_pio2+0x32c>)
 8009d32:	ec51 0b10 	vmov	r0, r1, d0
 8009d36:	2200      	movs	r2, #0
 8009d38:	f7f6 fc66 	bl	8000608 <__aeabi_dmul>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4630      	mov	r0, r6
 8009d42:	4639      	mov	r1, r7
 8009d44:	f7f6 faa8 	bl	8000298 <__aeabi_dsub>
 8009d48:	460f      	mov	r7, r1
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	f7f6 ff0c 	bl	8000b68 <__aeabi_d2iz>
 8009d50:	9004      	str	r0, [sp, #16]
 8009d52:	f7f6 fbef 	bl	8000534 <__aeabi_i2d>
 8009d56:	4602      	mov	r2, r0
 8009d58:	460b      	mov	r3, r1
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	4639      	mov	r1, r7
 8009d5e:	f7f6 fa9b 	bl	8000298 <__aeabi_dsub>
 8009d62:	f1ba 0f00 	cmp.w	sl, #0
 8009d66:	4606      	mov	r6, r0
 8009d68:	460f      	mov	r7, r1
 8009d6a:	dd6d      	ble.n	8009e48 <__kernel_rem_pio2+0x250>
 8009d6c:	1e62      	subs	r2, r4, #1
 8009d6e:	ab0e      	add	r3, sp, #56	; 0x38
 8009d70:	9d04      	ldr	r5, [sp, #16]
 8009d72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009d76:	f1ca 0118 	rsb	r1, sl, #24
 8009d7a:	fa40 f301 	asr.w	r3, r0, r1
 8009d7e:	441d      	add	r5, r3
 8009d80:	408b      	lsls	r3, r1
 8009d82:	1ac0      	subs	r0, r0, r3
 8009d84:	ab0e      	add	r3, sp, #56	; 0x38
 8009d86:	9504      	str	r5, [sp, #16]
 8009d88:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009d8c:	f1ca 0317 	rsb	r3, sl, #23
 8009d90:	fa40 fb03 	asr.w	fp, r0, r3
 8009d94:	f1bb 0f00 	cmp.w	fp, #0
 8009d98:	dd65      	ble.n	8009e66 <__kernel_rem_pio2+0x26e>
 8009d9a:	9b04      	ldr	r3, [sp, #16]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	3301      	adds	r3, #1
 8009da0:	9304      	str	r3, [sp, #16]
 8009da2:	4615      	mov	r5, r2
 8009da4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009da8:	4294      	cmp	r4, r2
 8009daa:	f300 809c 	bgt.w	8009ee6 <__kernel_rem_pio2+0x2ee>
 8009dae:	f1ba 0f00 	cmp.w	sl, #0
 8009db2:	dd07      	ble.n	8009dc4 <__kernel_rem_pio2+0x1cc>
 8009db4:	f1ba 0f01 	cmp.w	sl, #1
 8009db8:	f000 80c0 	beq.w	8009f3c <__kernel_rem_pio2+0x344>
 8009dbc:	f1ba 0f02 	cmp.w	sl, #2
 8009dc0:	f000 80c6 	beq.w	8009f50 <__kernel_rem_pio2+0x358>
 8009dc4:	f1bb 0f02 	cmp.w	fp, #2
 8009dc8:	d14d      	bne.n	8009e66 <__kernel_rem_pio2+0x26e>
 8009dca:	4632      	mov	r2, r6
 8009dcc:	463b      	mov	r3, r7
 8009dce:	4956      	ldr	r1, [pc, #344]	; (8009f28 <__kernel_rem_pio2+0x330>)
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	f7f6 fa61 	bl	8000298 <__aeabi_dsub>
 8009dd6:	4606      	mov	r6, r0
 8009dd8:	460f      	mov	r7, r1
 8009dda:	2d00      	cmp	r5, #0
 8009ddc:	d043      	beq.n	8009e66 <__kernel_rem_pio2+0x26e>
 8009dde:	4650      	mov	r0, sl
 8009de0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009f18 <__kernel_rem_pio2+0x320>
 8009de4:	f000 fd7c 	bl	800a8e0 <scalbn>
 8009de8:	4630      	mov	r0, r6
 8009dea:	4639      	mov	r1, r7
 8009dec:	ec53 2b10 	vmov	r2, r3, d0
 8009df0:	f7f6 fa52 	bl	8000298 <__aeabi_dsub>
 8009df4:	4606      	mov	r6, r0
 8009df6:	460f      	mov	r7, r1
 8009df8:	e035      	b.n	8009e66 <__kernel_rem_pio2+0x26e>
 8009dfa:	4b4c      	ldr	r3, [pc, #304]	; (8009f2c <__kernel_rem_pio2+0x334>)
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	4630      	mov	r0, r6
 8009e00:	4639      	mov	r1, r7
 8009e02:	f7f6 fc01 	bl	8000608 <__aeabi_dmul>
 8009e06:	f7f6 feaf 	bl	8000b68 <__aeabi_d2iz>
 8009e0a:	f7f6 fb93 	bl	8000534 <__aeabi_i2d>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	460b      	mov	r3, r1
 8009e12:	ec43 2b18 	vmov	d8, r2, r3
 8009e16:	4b46      	ldr	r3, [pc, #280]	; (8009f30 <__kernel_rem_pio2+0x338>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f7f6 fbf5 	bl	8000608 <__aeabi_dmul>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	4630      	mov	r0, r6
 8009e24:	4639      	mov	r1, r7
 8009e26:	f7f6 fa37 	bl	8000298 <__aeabi_dsub>
 8009e2a:	f7f6 fe9d 	bl	8000b68 <__aeabi_d2iz>
 8009e2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e32:	f84b 0b04 	str.w	r0, [fp], #4
 8009e36:	ec51 0b18 	vmov	r0, r1, d8
 8009e3a:	f7f6 fa2f 	bl	800029c <__adddf3>
 8009e3e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009e42:	4606      	mov	r6, r0
 8009e44:	460f      	mov	r7, r1
 8009e46:	e75b      	b.n	8009d00 <__kernel_rem_pio2+0x108>
 8009e48:	d106      	bne.n	8009e58 <__kernel_rem_pio2+0x260>
 8009e4a:	1e63      	subs	r3, r4, #1
 8009e4c:	aa0e      	add	r2, sp, #56	; 0x38
 8009e4e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009e52:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009e56:	e79d      	b.n	8009d94 <__kernel_rem_pio2+0x19c>
 8009e58:	4b36      	ldr	r3, [pc, #216]	; (8009f34 <__kernel_rem_pio2+0x33c>)
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f7f6 fe5a 	bl	8000b14 <__aeabi_dcmpge>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d13d      	bne.n	8009ee0 <__kernel_rem_pio2+0x2e8>
 8009e64:	4683      	mov	fp, r0
 8009e66:	2200      	movs	r2, #0
 8009e68:	2300      	movs	r3, #0
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	4639      	mov	r1, r7
 8009e6e:	f7f6 fe33 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	f000 80c0 	beq.w	8009ff8 <__kernel_rem_pio2+0x400>
 8009e78:	1e65      	subs	r5, r4, #1
 8009e7a:	462b      	mov	r3, r5
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	9902      	ldr	r1, [sp, #8]
 8009e80:	428b      	cmp	r3, r1
 8009e82:	da6c      	bge.n	8009f5e <__kernel_rem_pio2+0x366>
 8009e84:	2a00      	cmp	r2, #0
 8009e86:	f000 8089 	beq.w	8009f9c <__kernel_rem_pio2+0x3a4>
 8009e8a:	ab0e      	add	r3, sp, #56	; 0x38
 8009e8c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009e90:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f000 80ad 	beq.w	8009ff4 <__kernel_rem_pio2+0x3fc>
 8009e9a:	4650      	mov	r0, sl
 8009e9c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8009f18 <__kernel_rem_pio2+0x320>
 8009ea0:	f000 fd1e 	bl	800a8e0 <scalbn>
 8009ea4:	ab9a      	add	r3, sp, #616	; 0x268
 8009ea6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009eaa:	ec57 6b10 	vmov	r6, r7, d0
 8009eae:	00ec      	lsls	r4, r5, #3
 8009eb0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8009eb4:	46aa      	mov	sl, r5
 8009eb6:	f1ba 0f00 	cmp.w	sl, #0
 8009eba:	f280 80d6 	bge.w	800a06a <__kernel_rem_pio2+0x472>
 8009ebe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8009f10 <__kernel_rem_pio2+0x318>
 8009ec2:	462e      	mov	r6, r5
 8009ec4:	2e00      	cmp	r6, #0
 8009ec6:	f2c0 8104 	blt.w	800a0d2 <__kernel_rem_pio2+0x4da>
 8009eca:	ab72      	add	r3, sp, #456	; 0x1c8
 8009ecc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009ed0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009f38 <__kernel_rem_pio2+0x340>
 8009ed4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009ed8:	f04f 0800 	mov.w	r8, #0
 8009edc:	1baf      	subs	r7, r5, r6
 8009ede:	e0ea      	b.n	800a0b6 <__kernel_rem_pio2+0x4be>
 8009ee0:	f04f 0b02 	mov.w	fp, #2
 8009ee4:	e759      	b.n	8009d9a <__kernel_rem_pio2+0x1a2>
 8009ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8009eea:	b955      	cbnz	r5, 8009f02 <__kernel_rem_pio2+0x30a>
 8009eec:	b123      	cbz	r3, 8009ef8 <__kernel_rem_pio2+0x300>
 8009eee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009ef2:	f8c8 3000 	str.w	r3, [r8]
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	3201      	adds	r2, #1
 8009efa:	f108 0804 	add.w	r8, r8, #4
 8009efe:	461d      	mov	r5, r3
 8009f00:	e752      	b.n	8009da8 <__kernel_rem_pio2+0x1b0>
 8009f02:	1acb      	subs	r3, r1, r3
 8009f04:	f8c8 3000 	str.w	r3, [r8]
 8009f08:	462b      	mov	r3, r5
 8009f0a:	e7f5      	b.n	8009ef8 <__kernel_rem_pio2+0x300>
 8009f0c:	f3af 8000 	nop.w
	...
 8009f1c:	3ff00000 	.word	0x3ff00000
 8009f20:	0800b0f0 	.word	0x0800b0f0
 8009f24:	40200000 	.word	0x40200000
 8009f28:	3ff00000 	.word	0x3ff00000
 8009f2c:	3e700000 	.word	0x3e700000
 8009f30:	41700000 	.word	0x41700000
 8009f34:	3fe00000 	.word	0x3fe00000
 8009f38:	0800b0b0 	.word	0x0800b0b0
 8009f3c:	1e62      	subs	r2, r4, #1
 8009f3e:	ab0e      	add	r3, sp, #56	; 0x38
 8009f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009f48:	a90e      	add	r1, sp, #56	; 0x38
 8009f4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009f4e:	e739      	b.n	8009dc4 <__kernel_rem_pio2+0x1cc>
 8009f50:	1e62      	subs	r2, r4, #1
 8009f52:	ab0e      	add	r3, sp, #56	; 0x38
 8009f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009f5c:	e7f4      	b.n	8009f48 <__kernel_rem_pio2+0x350>
 8009f5e:	a90e      	add	r1, sp, #56	; 0x38
 8009f60:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009f64:	3b01      	subs	r3, #1
 8009f66:	430a      	orrs	r2, r1
 8009f68:	e789      	b.n	8009e7e <__kernel_rem_pio2+0x286>
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009f70:	2900      	cmp	r1, #0
 8009f72:	d0fa      	beq.n	8009f6a <__kernel_rem_pio2+0x372>
 8009f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f76:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8009f7a:	446a      	add	r2, sp
 8009f7c:	3a98      	subs	r2, #152	; 0x98
 8009f7e:	920a      	str	r2, [sp, #40]	; 0x28
 8009f80:	9a08      	ldr	r2, [sp, #32]
 8009f82:	18e3      	adds	r3, r4, r3
 8009f84:	18a5      	adds	r5, r4, r2
 8009f86:	aa22      	add	r2, sp, #136	; 0x88
 8009f88:	f104 0801 	add.w	r8, r4, #1
 8009f8c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009f90:	9304      	str	r3, [sp, #16]
 8009f92:	9b04      	ldr	r3, [sp, #16]
 8009f94:	4543      	cmp	r3, r8
 8009f96:	da04      	bge.n	8009fa2 <__kernel_rem_pio2+0x3aa>
 8009f98:	461c      	mov	r4, r3
 8009f9a:	e6a3      	b.n	8009ce4 <__kernel_rem_pio2+0xec>
 8009f9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e7e4      	b.n	8009f6c <__kernel_rem_pio2+0x374>
 8009fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fa4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009fa8:	f7f6 fac4 	bl	8000534 <__aeabi_i2d>
 8009fac:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fb2:	46ab      	mov	fp, r5
 8009fb4:	461c      	mov	r4, r3
 8009fb6:	f04f 0900 	mov.w	r9, #0
 8009fba:	2600      	movs	r6, #0
 8009fbc:	2700      	movs	r7, #0
 8009fbe:	9b06      	ldr	r3, [sp, #24]
 8009fc0:	4599      	cmp	r9, r3
 8009fc2:	dd06      	ble.n	8009fd2 <__kernel_rem_pio2+0x3da>
 8009fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fc6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009fca:	f108 0801 	add.w	r8, r8, #1
 8009fce:	930a      	str	r3, [sp, #40]	; 0x28
 8009fd0:	e7df      	b.n	8009f92 <__kernel_rem_pio2+0x39a>
 8009fd2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009fd6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009fda:	f7f6 fb15 	bl	8000608 <__aeabi_dmul>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	4639      	mov	r1, r7
 8009fe6:	f7f6 f959 	bl	800029c <__adddf3>
 8009fea:	f109 0901 	add.w	r9, r9, #1
 8009fee:	4606      	mov	r6, r0
 8009ff0:	460f      	mov	r7, r1
 8009ff2:	e7e4      	b.n	8009fbe <__kernel_rem_pio2+0x3c6>
 8009ff4:	3d01      	subs	r5, #1
 8009ff6:	e748      	b.n	8009e8a <__kernel_rem_pio2+0x292>
 8009ff8:	ec47 6b10 	vmov	d0, r6, r7
 8009ffc:	f1ca 0000 	rsb	r0, sl, #0
 800a000:	f000 fc6e 	bl	800a8e0 <scalbn>
 800a004:	ec57 6b10 	vmov	r6, r7, d0
 800a008:	4ba0      	ldr	r3, [pc, #640]	; (800a28c <__kernel_rem_pio2+0x694>)
 800a00a:	ee10 0a10 	vmov	r0, s0
 800a00e:	2200      	movs	r2, #0
 800a010:	4639      	mov	r1, r7
 800a012:	f7f6 fd7f 	bl	8000b14 <__aeabi_dcmpge>
 800a016:	b1f8      	cbz	r0, 800a058 <__kernel_rem_pio2+0x460>
 800a018:	4b9d      	ldr	r3, [pc, #628]	; (800a290 <__kernel_rem_pio2+0x698>)
 800a01a:	2200      	movs	r2, #0
 800a01c:	4630      	mov	r0, r6
 800a01e:	4639      	mov	r1, r7
 800a020:	f7f6 faf2 	bl	8000608 <__aeabi_dmul>
 800a024:	f7f6 fda0 	bl	8000b68 <__aeabi_d2iz>
 800a028:	4680      	mov	r8, r0
 800a02a:	f7f6 fa83 	bl	8000534 <__aeabi_i2d>
 800a02e:	4b97      	ldr	r3, [pc, #604]	; (800a28c <__kernel_rem_pio2+0x694>)
 800a030:	2200      	movs	r2, #0
 800a032:	f7f6 fae9 	bl	8000608 <__aeabi_dmul>
 800a036:	460b      	mov	r3, r1
 800a038:	4602      	mov	r2, r0
 800a03a:	4639      	mov	r1, r7
 800a03c:	4630      	mov	r0, r6
 800a03e:	f7f6 f92b 	bl	8000298 <__aeabi_dsub>
 800a042:	f7f6 fd91 	bl	8000b68 <__aeabi_d2iz>
 800a046:	1c65      	adds	r5, r4, #1
 800a048:	ab0e      	add	r3, sp, #56	; 0x38
 800a04a:	f10a 0a18 	add.w	sl, sl, #24
 800a04e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a052:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a056:	e720      	b.n	8009e9a <__kernel_rem_pio2+0x2a2>
 800a058:	4630      	mov	r0, r6
 800a05a:	4639      	mov	r1, r7
 800a05c:	f7f6 fd84 	bl	8000b68 <__aeabi_d2iz>
 800a060:	ab0e      	add	r3, sp, #56	; 0x38
 800a062:	4625      	mov	r5, r4
 800a064:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a068:	e717      	b.n	8009e9a <__kernel_rem_pio2+0x2a2>
 800a06a:	ab0e      	add	r3, sp, #56	; 0x38
 800a06c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a070:	f7f6 fa60 	bl	8000534 <__aeabi_i2d>
 800a074:	4632      	mov	r2, r6
 800a076:	463b      	mov	r3, r7
 800a078:	f7f6 fac6 	bl	8000608 <__aeabi_dmul>
 800a07c:	4b84      	ldr	r3, [pc, #528]	; (800a290 <__kernel_rem_pio2+0x698>)
 800a07e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a082:	2200      	movs	r2, #0
 800a084:	4630      	mov	r0, r6
 800a086:	4639      	mov	r1, r7
 800a088:	f7f6 fabe 	bl	8000608 <__aeabi_dmul>
 800a08c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a090:	4606      	mov	r6, r0
 800a092:	460f      	mov	r7, r1
 800a094:	e70f      	b.n	8009eb6 <__kernel_rem_pio2+0x2be>
 800a096:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a09a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a09e:	f7f6 fab3 	bl	8000608 <__aeabi_dmul>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0aa:	f7f6 f8f7 	bl	800029c <__adddf3>
 800a0ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a0b2:	f108 0801 	add.w	r8, r8, #1
 800a0b6:	9b02      	ldr	r3, [sp, #8]
 800a0b8:	4598      	cmp	r8, r3
 800a0ba:	dc01      	bgt.n	800a0c0 <__kernel_rem_pio2+0x4c8>
 800a0bc:	45b8      	cmp	r8, r7
 800a0be:	ddea      	ble.n	800a096 <__kernel_rem_pio2+0x49e>
 800a0c0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a0c4:	ab4a      	add	r3, sp, #296	; 0x128
 800a0c6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a0ca:	ed87 7b00 	vstr	d7, [r7]
 800a0ce:	3e01      	subs	r6, #1
 800a0d0:	e6f8      	b.n	8009ec4 <__kernel_rem_pio2+0x2cc>
 800a0d2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	dc0b      	bgt.n	800a0f0 <__kernel_rem_pio2+0x4f8>
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	dc35      	bgt.n	800a148 <__kernel_rem_pio2+0x550>
 800a0dc:	d059      	beq.n	800a192 <__kernel_rem_pio2+0x59a>
 800a0de:	9b04      	ldr	r3, [sp, #16]
 800a0e0:	f003 0007 	and.w	r0, r3, #7
 800a0e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a0e8:	ecbd 8b02 	vpop	{d8}
 800a0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a0f2:	2b03      	cmp	r3, #3
 800a0f4:	d1f3      	bne.n	800a0de <__kernel_rem_pio2+0x4e6>
 800a0f6:	ab4a      	add	r3, sp, #296	; 0x128
 800a0f8:	4423      	add	r3, r4
 800a0fa:	9306      	str	r3, [sp, #24]
 800a0fc:	461c      	mov	r4, r3
 800a0fe:	469a      	mov	sl, r3
 800a100:	9502      	str	r5, [sp, #8]
 800a102:	9b02      	ldr	r3, [sp, #8]
 800a104:	2b00      	cmp	r3, #0
 800a106:	f1aa 0a08 	sub.w	sl, sl, #8
 800a10a:	dc6b      	bgt.n	800a1e4 <__kernel_rem_pio2+0x5ec>
 800a10c:	46aa      	mov	sl, r5
 800a10e:	f1ba 0f01 	cmp.w	sl, #1
 800a112:	f1a4 0408 	sub.w	r4, r4, #8
 800a116:	f300 8085 	bgt.w	800a224 <__kernel_rem_pio2+0x62c>
 800a11a:	9c06      	ldr	r4, [sp, #24]
 800a11c:	2000      	movs	r0, #0
 800a11e:	3408      	adds	r4, #8
 800a120:	2100      	movs	r1, #0
 800a122:	2d01      	cmp	r5, #1
 800a124:	f300 809d 	bgt.w	800a262 <__kernel_rem_pio2+0x66a>
 800a128:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a12c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a130:	f1bb 0f00 	cmp.w	fp, #0
 800a134:	f040 809b 	bne.w	800a26e <__kernel_rem_pio2+0x676>
 800a138:	9b01      	ldr	r3, [sp, #4]
 800a13a:	e9c3 5600 	strd	r5, r6, [r3]
 800a13e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a142:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a146:	e7ca      	b.n	800a0de <__kernel_rem_pio2+0x4e6>
 800a148:	3408      	adds	r4, #8
 800a14a:	ab4a      	add	r3, sp, #296	; 0x128
 800a14c:	441c      	add	r4, r3
 800a14e:	462e      	mov	r6, r5
 800a150:	2000      	movs	r0, #0
 800a152:	2100      	movs	r1, #0
 800a154:	2e00      	cmp	r6, #0
 800a156:	da36      	bge.n	800a1c6 <__kernel_rem_pio2+0x5ce>
 800a158:	f1bb 0f00 	cmp.w	fp, #0
 800a15c:	d039      	beq.n	800a1d2 <__kernel_rem_pio2+0x5da>
 800a15e:	4602      	mov	r2, r0
 800a160:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a164:	9c01      	ldr	r4, [sp, #4]
 800a166:	e9c4 2300 	strd	r2, r3, [r4]
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a172:	f7f6 f891 	bl	8000298 <__aeabi_dsub>
 800a176:	ae4c      	add	r6, sp, #304	; 0x130
 800a178:	2401      	movs	r4, #1
 800a17a:	42a5      	cmp	r5, r4
 800a17c:	da2c      	bge.n	800a1d8 <__kernel_rem_pio2+0x5e0>
 800a17e:	f1bb 0f00 	cmp.w	fp, #0
 800a182:	d002      	beq.n	800a18a <__kernel_rem_pio2+0x592>
 800a184:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a188:	4619      	mov	r1, r3
 800a18a:	9b01      	ldr	r3, [sp, #4]
 800a18c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a190:	e7a5      	b.n	800a0de <__kernel_rem_pio2+0x4e6>
 800a192:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a196:	eb0d 0403 	add.w	r4, sp, r3
 800a19a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a19e:	2000      	movs	r0, #0
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	2d00      	cmp	r5, #0
 800a1a4:	da09      	bge.n	800a1ba <__kernel_rem_pio2+0x5c2>
 800a1a6:	f1bb 0f00 	cmp.w	fp, #0
 800a1aa:	d002      	beq.n	800a1b2 <__kernel_rem_pio2+0x5ba>
 800a1ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	9b01      	ldr	r3, [sp, #4]
 800a1b4:	e9c3 0100 	strd	r0, r1, [r3]
 800a1b8:	e791      	b.n	800a0de <__kernel_rem_pio2+0x4e6>
 800a1ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a1be:	f7f6 f86d 	bl	800029c <__adddf3>
 800a1c2:	3d01      	subs	r5, #1
 800a1c4:	e7ed      	b.n	800a1a2 <__kernel_rem_pio2+0x5aa>
 800a1c6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a1ca:	f7f6 f867 	bl	800029c <__adddf3>
 800a1ce:	3e01      	subs	r6, #1
 800a1d0:	e7c0      	b.n	800a154 <__kernel_rem_pio2+0x55c>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	e7c5      	b.n	800a164 <__kernel_rem_pio2+0x56c>
 800a1d8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a1dc:	f7f6 f85e 	bl	800029c <__adddf3>
 800a1e0:	3401      	adds	r4, #1
 800a1e2:	e7ca      	b.n	800a17a <__kernel_rem_pio2+0x582>
 800a1e4:	e9da 8900 	ldrd	r8, r9, [sl]
 800a1e8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a1ec:	9b02      	ldr	r3, [sp, #8]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	9302      	str	r3, [sp, #8]
 800a1f2:	4632      	mov	r2, r6
 800a1f4:	463b      	mov	r3, r7
 800a1f6:	4640      	mov	r0, r8
 800a1f8:	4649      	mov	r1, r9
 800a1fa:	f7f6 f84f 	bl	800029c <__adddf3>
 800a1fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	4640      	mov	r0, r8
 800a208:	4649      	mov	r1, r9
 800a20a:	f7f6 f845 	bl	8000298 <__aeabi_dsub>
 800a20e:	4632      	mov	r2, r6
 800a210:	463b      	mov	r3, r7
 800a212:	f7f6 f843 	bl	800029c <__adddf3>
 800a216:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a21a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a21e:	ed8a 7b00 	vstr	d7, [sl]
 800a222:	e76e      	b.n	800a102 <__kernel_rem_pio2+0x50a>
 800a224:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a228:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a22c:	4640      	mov	r0, r8
 800a22e:	4632      	mov	r2, r6
 800a230:	463b      	mov	r3, r7
 800a232:	4649      	mov	r1, r9
 800a234:	f7f6 f832 	bl	800029c <__adddf3>
 800a238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	4640      	mov	r0, r8
 800a242:	4649      	mov	r1, r9
 800a244:	f7f6 f828 	bl	8000298 <__aeabi_dsub>
 800a248:	4632      	mov	r2, r6
 800a24a:	463b      	mov	r3, r7
 800a24c:	f7f6 f826 	bl	800029c <__adddf3>
 800a250:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a254:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a258:	ed84 7b00 	vstr	d7, [r4]
 800a25c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a260:	e755      	b.n	800a10e <__kernel_rem_pio2+0x516>
 800a262:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a266:	f7f6 f819 	bl	800029c <__adddf3>
 800a26a:	3d01      	subs	r5, #1
 800a26c:	e759      	b.n	800a122 <__kernel_rem_pio2+0x52a>
 800a26e:	9b01      	ldr	r3, [sp, #4]
 800a270:	9a01      	ldr	r2, [sp, #4]
 800a272:	601d      	str	r5, [r3, #0]
 800a274:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a278:	605c      	str	r4, [r3, #4]
 800a27a:	609f      	str	r7, [r3, #8]
 800a27c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a280:	60d3      	str	r3, [r2, #12]
 800a282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a286:	6110      	str	r0, [r2, #16]
 800a288:	6153      	str	r3, [r2, #20]
 800a28a:	e728      	b.n	800a0de <__kernel_rem_pio2+0x4e6>
 800a28c:	41700000 	.word	0x41700000
 800a290:	3e700000 	.word	0x3e700000
 800a294:	00000000 	.word	0x00000000

0800a298 <__kernel_sin>:
 800a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29c:	ed2d 8b04 	vpush	{d8-d9}
 800a2a0:	eeb0 8a41 	vmov.f32	s16, s2
 800a2a4:	eef0 8a61 	vmov.f32	s17, s3
 800a2a8:	ec55 4b10 	vmov	r4, r5, d0
 800a2ac:	b083      	sub	sp, #12
 800a2ae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a2b2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a2b6:	9001      	str	r0, [sp, #4]
 800a2b8:	da06      	bge.n	800a2c8 <__kernel_sin+0x30>
 800a2ba:	ee10 0a10 	vmov	r0, s0
 800a2be:	4629      	mov	r1, r5
 800a2c0:	f7f6 fc52 	bl	8000b68 <__aeabi_d2iz>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d051      	beq.n	800a36c <__kernel_sin+0xd4>
 800a2c8:	4622      	mov	r2, r4
 800a2ca:	462b      	mov	r3, r5
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	f7f6 f99a 	bl	8000608 <__aeabi_dmul>
 800a2d4:	4682      	mov	sl, r0
 800a2d6:	468b      	mov	fp, r1
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4620      	mov	r0, r4
 800a2de:	4629      	mov	r1, r5
 800a2e0:	f7f6 f992 	bl	8000608 <__aeabi_dmul>
 800a2e4:	a341      	add	r3, pc, #260	; (adr r3, 800a3ec <__kernel_sin+0x154>)
 800a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ea:	4680      	mov	r8, r0
 800a2ec:	4689      	mov	r9, r1
 800a2ee:	4650      	mov	r0, sl
 800a2f0:	4659      	mov	r1, fp
 800a2f2:	f7f6 f989 	bl	8000608 <__aeabi_dmul>
 800a2f6:	a33f      	add	r3, pc, #252	; (adr r3, 800a3f4 <__kernel_sin+0x15c>)
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f7f5 ffcc 	bl	8000298 <__aeabi_dsub>
 800a300:	4652      	mov	r2, sl
 800a302:	465b      	mov	r3, fp
 800a304:	f7f6 f980 	bl	8000608 <__aeabi_dmul>
 800a308:	a33c      	add	r3, pc, #240	; (adr r3, 800a3fc <__kernel_sin+0x164>)
 800a30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30e:	f7f5 ffc5 	bl	800029c <__adddf3>
 800a312:	4652      	mov	r2, sl
 800a314:	465b      	mov	r3, fp
 800a316:	f7f6 f977 	bl	8000608 <__aeabi_dmul>
 800a31a:	a33a      	add	r3, pc, #232	; (adr r3, 800a404 <__kernel_sin+0x16c>)
 800a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a320:	f7f5 ffba 	bl	8000298 <__aeabi_dsub>
 800a324:	4652      	mov	r2, sl
 800a326:	465b      	mov	r3, fp
 800a328:	f7f6 f96e 	bl	8000608 <__aeabi_dmul>
 800a32c:	a337      	add	r3, pc, #220	; (adr r3, 800a40c <__kernel_sin+0x174>)
 800a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a332:	f7f5 ffb3 	bl	800029c <__adddf3>
 800a336:	9b01      	ldr	r3, [sp, #4]
 800a338:	4606      	mov	r6, r0
 800a33a:	460f      	mov	r7, r1
 800a33c:	b9eb      	cbnz	r3, 800a37a <__kernel_sin+0xe2>
 800a33e:	4602      	mov	r2, r0
 800a340:	460b      	mov	r3, r1
 800a342:	4650      	mov	r0, sl
 800a344:	4659      	mov	r1, fp
 800a346:	f7f6 f95f 	bl	8000608 <__aeabi_dmul>
 800a34a:	a325      	add	r3, pc, #148	; (adr r3, 800a3e0 <__kernel_sin+0x148>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f5 ffa2 	bl	8000298 <__aeabi_dsub>
 800a354:	4642      	mov	r2, r8
 800a356:	464b      	mov	r3, r9
 800a358:	f7f6 f956 	bl	8000608 <__aeabi_dmul>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	4620      	mov	r0, r4
 800a362:	4629      	mov	r1, r5
 800a364:	f7f5 ff9a 	bl	800029c <__adddf3>
 800a368:	4604      	mov	r4, r0
 800a36a:	460d      	mov	r5, r1
 800a36c:	ec45 4b10 	vmov	d0, r4, r5
 800a370:	b003      	add	sp, #12
 800a372:	ecbd 8b04 	vpop	{d8-d9}
 800a376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37a:	4b1b      	ldr	r3, [pc, #108]	; (800a3e8 <__kernel_sin+0x150>)
 800a37c:	ec51 0b18 	vmov	r0, r1, d8
 800a380:	2200      	movs	r2, #0
 800a382:	f7f6 f941 	bl	8000608 <__aeabi_dmul>
 800a386:	4632      	mov	r2, r6
 800a388:	ec41 0b19 	vmov	d9, r0, r1
 800a38c:	463b      	mov	r3, r7
 800a38e:	4640      	mov	r0, r8
 800a390:	4649      	mov	r1, r9
 800a392:	f7f6 f939 	bl	8000608 <__aeabi_dmul>
 800a396:	4602      	mov	r2, r0
 800a398:	460b      	mov	r3, r1
 800a39a:	ec51 0b19 	vmov	r0, r1, d9
 800a39e:	f7f5 ff7b 	bl	8000298 <__aeabi_dsub>
 800a3a2:	4652      	mov	r2, sl
 800a3a4:	465b      	mov	r3, fp
 800a3a6:	f7f6 f92f 	bl	8000608 <__aeabi_dmul>
 800a3aa:	ec53 2b18 	vmov	r2, r3, d8
 800a3ae:	f7f5 ff73 	bl	8000298 <__aeabi_dsub>
 800a3b2:	a30b      	add	r3, pc, #44	; (adr r3, 800a3e0 <__kernel_sin+0x148>)
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	460f      	mov	r7, r1
 800a3bc:	4640      	mov	r0, r8
 800a3be:	4649      	mov	r1, r9
 800a3c0:	f7f6 f922 	bl	8000608 <__aeabi_dmul>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	f7f5 ff66 	bl	800029c <__adddf3>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	f7f5 ff5e 	bl	8000298 <__aeabi_dsub>
 800a3dc:	e7c4      	b.n	800a368 <__kernel_sin+0xd0>
 800a3de:	bf00      	nop
 800a3e0:	55555549 	.word	0x55555549
 800a3e4:	3fc55555 	.word	0x3fc55555
 800a3e8:	3fe00000 	.word	0x3fe00000
 800a3ec:	5acfd57c 	.word	0x5acfd57c
 800a3f0:	3de5d93a 	.word	0x3de5d93a
 800a3f4:	8a2b9ceb 	.word	0x8a2b9ceb
 800a3f8:	3e5ae5e6 	.word	0x3e5ae5e6
 800a3fc:	57b1fe7d 	.word	0x57b1fe7d
 800a400:	3ec71de3 	.word	0x3ec71de3
 800a404:	19c161d5 	.word	0x19c161d5
 800a408:	3f2a01a0 	.word	0x3f2a01a0
 800a40c:	1110f8a6 	.word	0x1110f8a6
 800a410:	3f811111 	.word	0x3f811111

0800a414 <with_errno>:
 800a414:	b570      	push	{r4, r5, r6, lr}
 800a416:	4604      	mov	r4, r0
 800a418:	460d      	mov	r5, r1
 800a41a:	4616      	mov	r6, r2
 800a41c:	f7fb fbb8 	bl	8005b90 <__errno>
 800a420:	4629      	mov	r1, r5
 800a422:	6006      	str	r6, [r0, #0]
 800a424:	4620      	mov	r0, r4
 800a426:	bd70      	pop	{r4, r5, r6, pc}

0800a428 <xflow>:
 800a428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a42a:	4614      	mov	r4, r2
 800a42c:	461d      	mov	r5, r3
 800a42e:	b108      	cbz	r0, 800a434 <xflow+0xc>
 800a430:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a434:	e9cd 2300 	strd	r2, r3, [sp]
 800a438:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a43c:	4620      	mov	r0, r4
 800a43e:	4629      	mov	r1, r5
 800a440:	f7f6 f8e2 	bl	8000608 <__aeabi_dmul>
 800a444:	2222      	movs	r2, #34	; 0x22
 800a446:	b003      	add	sp, #12
 800a448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a44c:	f7ff bfe2 	b.w	800a414 <with_errno>

0800a450 <__math_uflow>:
 800a450:	b508      	push	{r3, lr}
 800a452:	2200      	movs	r2, #0
 800a454:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a458:	f7ff ffe6 	bl	800a428 <xflow>
 800a45c:	ec41 0b10 	vmov	d0, r0, r1
 800a460:	bd08      	pop	{r3, pc}

0800a462 <__math_oflow>:
 800a462:	b508      	push	{r3, lr}
 800a464:	2200      	movs	r2, #0
 800a466:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a46a:	f7ff ffdd 	bl	800a428 <xflow>
 800a46e:	ec41 0b10 	vmov	d0, r0, r1
 800a472:	bd08      	pop	{r3, pc}
 800a474:	0000      	movs	r0, r0
	...

0800a478 <atan>:
 800a478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	ec55 4b10 	vmov	r4, r5, d0
 800a480:	4bc3      	ldr	r3, [pc, #780]	; (800a790 <atan+0x318>)
 800a482:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a486:	429e      	cmp	r6, r3
 800a488:	46ab      	mov	fp, r5
 800a48a:	dd18      	ble.n	800a4be <atan+0x46>
 800a48c:	4bc1      	ldr	r3, [pc, #772]	; (800a794 <atan+0x31c>)
 800a48e:	429e      	cmp	r6, r3
 800a490:	dc01      	bgt.n	800a496 <atan+0x1e>
 800a492:	d109      	bne.n	800a4a8 <atan+0x30>
 800a494:	b144      	cbz	r4, 800a4a8 <atan+0x30>
 800a496:	4622      	mov	r2, r4
 800a498:	462b      	mov	r3, r5
 800a49a:	4620      	mov	r0, r4
 800a49c:	4629      	mov	r1, r5
 800a49e:	f7f5 fefd 	bl	800029c <__adddf3>
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	460d      	mov	r5, r1
 800a4a6:	e006      	b.n	800a4b6 <atan+0x3e>
 800a4a8:	f1bb 0f00 	cmp.w	fp, #0
 800a4ac:	f300 8131 	bgt.w	800a712 <atan+0x29a>
 800a4b0:	a59b      	add	r5, pc, #620	; (adr r5, 800a720 <atan+0x2a8>)
 800a4b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a4b6:	ec45 4b10 	vmov	d0, r4, r5
 800a4ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4be:	4bb6      	ldr	r3, [pc, #728]	; (800a798 <atan+0x320>)
 800a4c0:	429e      	cmp	r6, r3
 800a4c2:	dc14      	bgt.n	800a4ee <atan+0x76>
 800a4c4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a4c8:	429e      	cmp	r6, r3
 800a4ca:	dc0d      	bgt.n	800a4e8 <atan+0x70>
 800a4cc:	a396      	add	r3, pc, #600	; (adr r3, 800a728 <atan+0x2b0>)
 800a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d2:	ee10 0a10 	vmov	r0, s0
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	f7f5 fee0 	bl	800029c <__adddf3>
 800a4dc:	4baf      	ldr	r3, [pc, #700]	; (800a79c <atan+0x324>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f7f6 fb22 	bl	8000b28 <__aeabi_dcmpgt>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d1e6      	bne.n	800a4b6 <atan+0x3e>
 800a4e8:	f04f 3aff 	mov.w	sl, #4294967295
 800a4ec:	e02b      	b.n	800a546 <atan+0xce>
 800a4ee:	f000 f963 	bl	800a7b8 <fabs>
 800a4f2:	4bab      	ldr	r3, [pc, #684]	; (800a7a0 <atan+0x328>)
 800a4f4:	429e      	cmp	r6, r3
 800a4f6:	ec55 4b10 	vmov	r4, r5, d0
 800a4fa:	f300 80bf 	bgt.w	800a67c <atan+0x204>
 800a4fe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a502:	429e      	cmp	r6, r3
 800a504:	f300 80a0 	bgt.w	800a648 <atan+0x1d0>
 800a508:	ee10 2a10 	vmov	r2, s0
 800a50c:	ee10 0a10 	vmov	r0, s0
 800a510:	462b      	mov	r3, r5
 800a512:	4629      	mov	r1, r5
 800a514:	f7f5 fec2 	bl	800029c <__adddf3>
 800a518:	4ba0      	ldr	r3, [pc, #640]	; (800a79c <atan+0x324>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	f7f5 febc 	bl	8000298 <__aeabi_dsub>
 800a520:	2200      	movs	r2, #0
 800a522:	4606      	mov	r6, r0
 800a524:	460f      	mov	r7, r1
 800a526:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a52a:	4620      	mov	r0, r4
 800a52c:	4629      	mov	r1, r5
 800a52e:	f7f5 feb5 	bl	800029c <__adddf3>
 800a532:	4602      	mov	r2, r0
 800a534:	460b      	mov	r3, r1
 800a536:	4630      	mov	r0, r6
 800a538:	4639      	mov	r1, r7
 800a53a:	f7f6 f98f 	bl	800085c <__aeabi_ddiv>
 800a53e:	f04f 0a00 	mov.w	sl, #0
 800a542:	4604      	mov	r4, r0
 800a544:	460d      	mov	r5, r1
 800a546:	4622      	mov	r2, r4
 800a548:	462b      	mov	r3, r5
 800a54a:	4620      	mov	r0, r4
 800a54c:	4629      	mov	r1, r5
 800a54e:	f7f6 f85b 	bl	8000608 <__aeabi_dmul>
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	4680      	mov	r8, r0
 800a558:	4689      	mov	r9, r1
 800a55a:	f7f6 f855 	bl	8000608 <__aeabi_dmul>
 800a55e:	a374      	add	r3, pc, #464	; (adr r3, 800a730 <atan+0x2b8>)
 800a560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a564:	4606      	mov	r6, r0
 800a566:	460f      	mov	r7, r1
 800a568:	f7f6 f84e 	bl	8000608 <__aeabi_dmul>
 800a56c:	a372      	add	r3, pc, #456	; (adr r3, 800a738 <atan+0x2c0>)
 800a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a572:	f7f5 fe93 	bl	800029c <__adddf3>
 800a576:	4632      	mov	r2, r6
 800a578:	463b      	mov	r3, r7
 800a57a:	f7f6 f845 	bl	8000608 <__aeabi_dmul>
 800a57e:	a370      	add	r3, pc, #448	; (adr r3, 800a740 <atan+0x2c8>)
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	f7f5 fe8a 	bl	800029c <__adddf3>
 800a588:	4632      	mov	r2, r6
 800a58a:	463b      	mov	r3, r7
 800a58c:	f7f6 f83c 	bl	8000608 <__aeabi_dmul>
 800a590:	a36d      	add	r3, pc, #436	; (adr r3, 800a748 <atan+0x2d0>)
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	f7f5 fe81 	bl	800029c <__adddf3>
 800a59a:	4632      	mov	r2, r6
 800a59c:	463b      	mov	r3, r7
 800a59e:	f7f6 f833 	bl	8000608 <__aeabi_dmul>
 800a5a2:	a36b      	add	r3, pc, #428	; (adr r3, 800a750 <atan+0x2d8>)
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	f7f5 fe78 	bl	800029c <__adddf3>
 800a5ac:	4632      	mov	r2, r6
 800a5ae:	463b      	mov	r3, r7
 800a5b0:	f7f6 f82a 	bl	8000608 <__aeabi_dmul>
 800a5b4:	a368      	add	r3, pc, #416	; (adr r3, 800a758 <atan+0x2e0>)
 800a5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ba:	f7f5 fe6f 	bl	800029c <__adddf3>
 800a5be:	4642      	mov	r2, r8
 800a5c0:	464b      	mov	r3, r9
 800a5c2:	f7f6 f821 	bl	8000608 <__aeabi_dmul>
 800a5c6:	a366      	add	r3, pc, #408	; (adr r3, 800a760 <atan+0x2e8>)
 800a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5cc:	4680      	mov	r8, r0
 800a5ce:	4689      	mov	r9, r1
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	4639      	mov	r1, r7
 800a5d4:	f7f6 f818 	bl	8000608 <__aeabi_dmul>
 800a5d8:	a363      	add	r3, pc, #396	; (adr r3, 800a768 <atan+0x2f0>)
 800a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5de:	f7f5 fe5b 	bl	8000298 <__aeabi_dsub>
 800a5e2:	4632      	mov	r2, r6
 800a5e4:	463b      	mov	r3, r7
 800a5e6:	f7f6 f80f 	bl	8000608 <__aeabi_dmul>
 800a5ea:	a361      	add	r3, pc, #388	; (adr r3, 800a770 <atan+0x2f8>)
 800a5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f0:	f7f5 fe52 	bl	8000298 <__aeabi_dsub>
 800a5f4:	4632      	mov	r2, r6
 800a5f6:	463b      	mov	r3, r7
 800a5f8:	f7f6 f806 	bl	8000608 <__aeabi_dmul>
 800a5fc:	a35e      	add	r3, pc, #376	; (adr r3, 800a778 <atan+0x300>)
 800a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a602:	f7f5 fe49 	bl	8000298 <__aeabi_dsub>
 800a606:	4632      	mov	r2, r6
 800a608:	463b      	mov	r3, r7
 800a60a:	f7f5 fffd 	bl	8000608 <__aeabi_dmul>
 800a60e:	a35c      	add	r3, pc, #368	; (adr r3, 800a780 <atan+0x308>)
 800a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a614:	f7f5 fe40 	bl	8000298 <__aeabi_dsub>
 800a618:	4632      	mov	r2, r6
 800a61a:	463b      	mov	r3, r7
 800a61c:	f7f5 fff4 	bl	8000608 <__aeabi_dmul>
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4640      	mov	r0, r8
 800a626:	4649      	mov	r1, r9
 800a628:	f7f5 fe38 	bl	800029c <__adddf3>
 800a62c:	4622      	mov	r2, r4
 800a62e:	462b      	mov	r3, r5
 800a630:	f7f5 ffea 	bl	8000608 <__aeabi_dmul>
 800a634:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	d14b      	bne.n	800a6d6 <atan+0x25e>
 800a63e:	4620      	mov	r0, r4
 800a640:	4629      	mov	r1, r5
 800a642:	f7f5 fe29 	bl	8000298 <__aeabi_dsub>
 800a646:	e72c      	b.n	800a4a2 <atan+0x2a>
 800a648:	ee10 0a10 	vmov	r0, s0
 800a64c:	4b53      	ldr	r3, [pc, #332]	; (800a79c <atan+0x324>)
 800a64e:	2200      	movs	r2, #0
 800a650:	4629      	mov	r1, r5
 800a652:	f7f5 fe21 	bl	8000298 <__aeabi_dsub>
 800a656:	4b51      	ldr	r3, [pc, #324]	; (800a79c <atan+0x324>)
 800a658:	4606      	mov	r6, r0
 800a65a:	460f      	mov	r7, r1
 800a65c:	2200      	movs	r2, #0
 800a65e:	4620      	mov	r0, r4
 800a660:	4629      	mov	r1, r5
 800a662:	f7f5 fe1b 	bl	800029c <__adddf3>
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	4630      	mov	r0, r6
 800a66c:	4639      	mov	r1, r7
 800a66e:	f7f6 f8f5 	bl	800085c <__aeabi_ddiv>
 800a672:	f04f 0a01 	mov.w	sl, #1
 800a676:	4604      	mov	r4, r0
 800a678:	460d      	mov	r5, r1
 800a67a:	e764      	b.n	800a546 <atan+0xce>
 800a67c:	4b49      	ldr	r3, [pc, #292]	; (800a7a4 <atan+0x32c>)
 800a67e:	429e      	cmp	r6, r3
 800a680:	da1d      	bge.n	800a6be <atan+0x246>
 800a682:	ee10 0a10 	vmov	r0, s0
 800a686:	4b48      	ldr	r3, [pc, #288]	; (800a7a8 <atan+0x330>)
 800a688:	2200      	movs	r2, #0
 800a68a:	4629      	mov	r1, r5
 800a68c:	f7f5 fe04 	bl	8000298 <__aeabi_dsub>
 800a690:	4b45      	ldr	r3, [pc, #276]	; (800a7a8 <atan+0x330>)
 800a692:	4606      	mov	r6, r0
 800a694:	460f      	mov	r7, r1
 800a696:	2200      	movs	r2, #0
 800a698:	4620      	mov	r0, r4
 800a69a:	4629      	mov	r1, r5
 800a69c:	f7f5 ffb4 	bl	8000608 <__aeabi_dmul>
 800a6a0:	4b3e      	ldr	r3, [pc, #248]	; (800a79c <atan+0x324>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f7f5 fdfa 	bl	800029c <__adddf3>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	f7f6 f8d4 	bl	800085c <__aeabi_ddiv>
 800a6b4:	f04f 0a02 	mov.w	sl, #2
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	460d      	mov	r5, r1
 800a6bc:	e743      	b.n	800a546 <atan+0xce>
 800a6be:	462b      	mov	r3, r5
 800a6c0:	ee10 2a10 	vmov	r2, s0
 800a6c4:	4939      	ldr	r1, [pc, #228]	; (800a7ac <atan+0x334>)
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	f7f6 f8c8 	bl	800085c <__aeabi_ddiv>
 800a6cc:	f04f 0a03 	mov.w	sl, #3
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	460d      	mov	r5, r1
 800a6d4:	e737      	b.n	800a546 <atan+0xce>
 800a6d6:	4b36      	ldr	r3, [pc, #216]	; (800a7b0 <atan+0x338>)
 800a6d8:	4e36      	ldr	r6, [pc, #216]	; (800a7b4 <atan+0x33c>)
 800a6da:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a6de:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a6e2:	e9da 2300 	ldrd	r2, r3, [sl]
 800a6e6:	f7f5 fdd7 	bl	8000298 <__aeabi_dsub>
 800a6ea:	4622      	mov	r2, r4
 800a6ec:	462b      	mov	r3, r5
 800a6ee:	f7f5 fdd3 	bl	8000298 <__aeabi_dsub>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a6fa:	f7f5 fdcd 	bl	8000298 <__aeabi_dsub>
 800a6fe:	f1bb 0f00 	cmp.w	fp, #0
 800a702:	4604      	mov	r4, r0
 800a704:	460d      	mov	r5, r1
 800a706:	f6bf aed6 	bge.w	800a4b6 <atan+0x3e>
 800a70a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a70e:	461d      	mov	r5, r3
 800a710:	e6d1      	b.n	800a4b6 <atan+0x3e>
 800a712:	a51d      	add	r5, pc, #116	; (adr r5, 800a788 <atan+0x310>)
 800a714:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a718:	e6cd      	b.n	800a4b6 <atan+0x3e>
 800a71a:	bf00      	nop
 800a71c:	f3af 8000 	nop.w
 800a720:	54442d18 	.word	0x54442d18
 800a724:	bff921fb 	.word	0xbff921fb
 800a728:	8800759c 	.word	0x8800759c
 800a72c:	7e37e43c 	.word	0x7e37e43c
 800a730:	e322da11 	.word	0xe322da11
 800a734:	3f90ad3a 	.word	0x3f90ad3a
 800a738:	24760deb 	.word	0x24760deb
 800a73c:	3fa97b4b 	.word	0x3fa97b4b
 800a740:	a0d03d51 	.word	0xa0d03d51
 800a744:	3fb10d66 	.word	0x3fb10d66
 800a748:	c54c206e 	.word	0xc54c206e
 800a74c:	3fb745cd 	.word	0x3fb745cd
 800a750:	920083ff 	.word	0x920083ff
 800a754:	3fc24924 	.word	0x3fc24924
 800a758:	5555550d 	.word	0x5555550d
 800a75c:	3fd55555 	.word	0x3fd55555
 800a760:	2c6a6c2f 	.word	0x2c6a6c2f
 800a764:	bfa2b444 	.word	0xbfa2b444
 800a768:	52defd9a 	.word	0x52defd9a
 800a76c:	3fadde2d 	.word	0x3fadde2d
 800a770:	af749a6d 	.word	0xaf749a6d
 800a774:	3fb3b0f2 	.word	0x3fb3b0f2
 800a778:	fe231671 	.word	0xfe231671
 800a77c:	3fbc71c6 	.word	0x3fbc71c6
 800a780:	9998ebc4 	.word	0x9998ebc4
 800a784:	3fc99999 	.word	0x3fc99999
 800a788:	54442d18 	.word	0x54442d18
 800a78c:	3ff921fb 	.word	0x3ff921fb
 800a790:	440fffff 	.word	0x440fffff
 800a794:	7ff00000 	.word	0x7ff00000
 800a798:	3fdbffff 	.word	0x3fdbffff
 800a79c:	3ff00000 	.word	0x3ff00000
 800a7a0:	3ff2ffff 	.word	0x3ff2ffff
 800a7a4:	40038000 	.word	0x40038000
 800a7a8:	3ff80000 	.word	0x3ff80000
 800a7ac:	bff00000 	.word	0xbff00000
 800a7b0:	0800b120 	.word	0x0800b120
 800a7b4:	0800b100 	.word	0x0800b100

0800a7b8 <fabs>:
 800a7b8:	ec51 0b10 	vmov	r0, r1, d0
 800a7bc:	ee10 2a10 	vmov	r2, s0
 800a7c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7c4:	ec43 2b10 	vmov	d0, r2, r3
 800a7c8:	4770      	bx	lr

0800a7ca <finite>:
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	ed8d 0b00 	vstr	d0, [sp]
 800a7d0:	9801      	ldr	r0, [sp, #4]
 800a7d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a7d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a7da:	0fc0      	lsrs	r0, r0, #31
 800a7dc:	b002      	add	sp, #8
 800a7de:	4770      	bx	lr

0800a7e0 <floor>:
 800a7e0:	ec51 0b10 	vmov	r0, r1, d0
 800a7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a7ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a7f0:	2e13      	cmp	r6, #19
 800a7f2:	ee10 5a10 	vmov	r5, s0
 800a7f6:	ee10 8a10 	vmov	r8, s0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	dc32      	bgt.n	800a864 <floor+0x84>
 800a7fe:	2e00      	cmp	r6, #0
 800a800:	da14      	bge.n	800a82c <floor+0x4c>
 800a802:	a333      	add	r3, pc, #204	; (adr r3, 800a8d0 <floor+0xf0>)
 800a804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a808:	f7f5 fd48 	bl	800029c <__adddf3>
 800a80c:	2200      	movs	r2, #0
 800a80e:	2300      	movs	r3, #0
 800a810:	f7f6 f98a 	bl	8000b28 <__aeabi_dcmpgt>
 800a814:	b138      	cbz	r0, 800a826 <floor+0x46>
 800a816:	2c00      	cmp	r4, #0
 800a818:	da57      	bge.n	800a8ca <floor+0xea>
 800a81a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a81e:	431d      	orrs	r5, r3
 800a820:	d001      	beq.n	800a826 <floor+0x46>
 800a822:	4c2d      	ldr	r4, [pc, #180]	; (800a8d8 <floor+0xf8>)
 800a824:	2500      	movs	r5, #0
 800a826:	4621      	mov	r1, r4
 800a828:	4628      	mov	r0, r5
 800a82a:	e025      	b.n	800a878 <floor+0x98>
 800a82c:	4f2b      	ldr	r7, [pc, #172]	; (800a8dc <floor+0xfc>)
 800a82e:	4137      	asrs	r7, r6
 800a830:	ea01 0307 	and.w	r3, r1, r7
 800a834:	4303      	orrs	r3, r0
 800a836:	d01f      	beq.n	800a878 <floor+0x98>
 800a838:	a325      	add	r3, pc, #148	; (adr r3, 800a8d0 <floor+0xf0>)
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	f7f5 fd2d 	bl	800029c <__adddf3>
 800a842:	2200      	movs	r2, #0
 800a844:	2300      	movs	r3, #0
 800a846:	f7f6 f96f 	bl	8000b28 <__aeabi_dcmpgt>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d0eb      	beq.n	800a826 <floor+0x46>
 800a84e:	2c00      	cmp	r4, #0
 800a850:	bfbe      	ittt	lt
 800a852:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a856:	fa43 f606 	asrlt.w	r6, r3, r6
 800a85a:	19a4      	addlt	r4, r4, r6
 800a85c:	ea24 0407 	bic.w	r4, r4, r7
 800a860:	2500      	movs	r5, #0
 800a862:	e7e0      	b.n	800a826 <floor+0x46>
 800a864:	2e33      	cmp	r6, #51	; 0x33
 800a866:	dd0b      	ble.n	800a880 <floor+0xa0>
 800a868:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a86c:	d104      	bne.n	800a878 <floor+0x98>
 800a86e:	ee10 2a10 	vmov	r2, s0
 800a872:	460b      	mov	r3, r1
 800a874:	f7f5 fd12 	bl	800029c <__adddf3>
 800a878:	ec41 0b10 	vmov	d0, r0, r1
 800a87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a880:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a884:	f04f 33ff 	mov.w	r3, #4294967295
 800a888:	fa23 f707 	lsr.w	r7, r3, r7
 800a88c:	4207      	tst	r7, r0
 800a88e:	d0f3      	beq.n	800a878 <floor+0x98>
 800a890:	a30f      	add	r3, pc, #60	; (adr r3, 800a8d0 <floor+0xf0>)
 800a892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a896:	f7f5 fd01 	bl	800029c <__adddf3>
 800a89a:	2200      	movs	r2, #0
 800a89c:	2300      	movs	r3, #0
 800a89e:	f7f6 f943 	bl	8000b28 <__aeabi_dcmpgt>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d0bf      	beq.n	800a826 <floor+0x46>
 800a8a6:	2c00      	cmp	r4, #0
 800a8a8:	da02      	bge.n	800a8b0 <floor+0xd0>
 800a8aa:	2e14      	cmp	r6, #20
 800a8ac:	d103      	bne.n	800a8b6 <floor+0xd6>
 800a8ae:	3401      	adds	r4, #1
 800a8b0:	ea25 0507 	bic.w	r5, r5, r7
 800a8b4:	e7b7      	b.n	800a826 <floor+0x46>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a8bc:	fa03 f606 	lsl.w	r6, r3, r6
 800a8c0:	4435      	add	r5, r6
 800a8c2:	4545      	cmp	r5, r8
 800a8c4:	bf38      	it	cc
 800a8c6:	18e4      	addcc	r4, r4, r3
 800a8c8:	e7f2      	b.n	800a8b0 <floor+0xd0>
 800a8ca:	2500      	movs	r5, #0
 800a8cc:	462c      	mov	r4, r5
 800a8ce:	e7aa      	b.n	800a826 <floor+0x46>
 800a8d0:	8800759c 	.word	0x8800759c
 800a8d4:	7e37e43c 	.word	0x7e37e43c
 800a8d8:	bff00000 	.word	0xbff00000
 800a8dc:	000fffff 	.word	0x000fffff

0800a8e0 <scalbn>:
 800a8e0:	b570      	push	{r4, r5, r6, lr}
 800a8e2:	ec55 4b10 	vmov	r4, r5, d0
 800a8e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	462b      	mov	r3, r5
 800a8ee:	b99a      	cbnz	r2, 800a918 <scalbn+0x38>
 800a8f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a8f4:	4323      	orrs	r3, r4
 800a8f6:	d036      	beq.n	800a966 <scalbn+0x86>
 800a8f8:	4b39      	ldr	r3, [pc, #228]	; (800a9e0 <scalbn+0x100>)
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	ee10 0a10 	vmov	r0, s0
 800a900:	2200      	movs	r2, #0
 800a902:	f7f5 fe81 	bl	8000608 <__aeabi_dmul>
 800a906:	4b37      	ldr	r3, [pc, #220]	; (800a9e4 <scalbn+0x104>)
 800a908:	429e      	cmp	r6, r3
 800a90a:	4604      	mov	r4, r0
 800a90c:	460d      	mov	r5, r1
 800a90e:	da10      	bge.n	800a932 <scalbn+0x52>
 800a910:	a32b      	add	r3, pc, #172	; (adr r3, 800a9c0 <scalbn+0xe0>)
 800a912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a916:	e03a      	b.n	800a98e <scalbn+0xae>
 800a918:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a91c:	428a      	cmp	r2, r1
 800a91e:	d10c      	bne.n	800a93a <scalbn+0x5a>
 800a920:	ee10 2a10 	vmov	r2, s0
 800a924:	4620      	mov	r0, r4
 800a926:	4629      	mov	r1, r5
 800a928:	f7f5 fcb8 	bl	800029c <__adddf3>
 800a92c:	4604      	mov	r4, r0
 800a92e:	460d      	mov	r5, r1
 800a930:	e019      	b.n	800a966 <scalbn+0x86>
 800a932:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a936:	460b      	mov	r3, r1
 800a938:	3a36      	subs	r2, #54	; 0x36
 800a93a:	4432      	add	r2, r6
 800a93c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a940:	428a      	cmp	r2, r1
 800a942:	dd08      	ble.n	800a956 <scalbn+0x76>
 800a944:	2d00      	cmp	r5, #0
 800a946:	a120      	add	r1, pc, #128	; (adr r1, 800a9c8 <scalbn+0xe8>)
 800a948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a94c:	da1c      	bge.n	800a988 <scalbn+0xa8>
 800a94e:	a120      	add	r1, pc, #128	; (adr r1, 800a9d0 <scalbn+0xf0>)
 800a950:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a954:	e018      	b.n	800a988 <scalbn+0xa8>
 800a956:	2a00      	cmp	r2, #0
 800a958:	dd08      	ble.n	800a96c <scalbn+0x8c>
 800a95a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a95e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a962:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a966:	ec45 4b10 	vmov	d0, r4, r5
 800a96a:	bd70      	pop	{r4, r5, r6, pc}
 800a96c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a970:	da19      	bge.n	800a9a6 <scalbn+0xc6>
 800a972:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a976:	429e      	cmp	r6, r3
 800a978:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a97c:	dd0a      	ble.n	800a994 <scalbn+0xb4>
 800a97e:	a112      	add	r1, pc, #72	; (adr r1, 800a9c8 <scalbn+0xe8>)
 800a980:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1e2      	bne.n	800a94e <scalbn+0x6e>
 800a988:	a30f      	add	r3, pc, #60	; (adr r3, 800a9c8 <scalbn+0xe8>)
 800a98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98e:	f7f5 fe3b 	bl	8000608 <__aeabi_dmul>
 800a992:	e7cb      	b.n	800a92c <scalbn+0x4c>
 800a994:	a10a      	add	r1, pc, #40	; (adr r1, 800a9c0 <scalbn+0xe0>)
 800a996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d0b8      	beq.n	800a910 <scalbn+0x30>
 800a99e:	a10e      	add	r1, pc, #56	; (adr r1, 800a9d8 <scalbn+0xf8>)
 800a9a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9a4:	e7b4      	b.n	800a910 <scalbn+0x30>
 800a9a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a9aa:	3236      	adds	r2, #54	; 0x36
 800a9ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a9b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	4b0c      	ldr	r3, [pc, #48]	; (800a9e8 <scalbn+0x108>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	e7e8      	b.n	800a98e <scalbn+0xae>
 800a9bc:	f3af 8000 	nop.w
 800a9c0:	c2f8f359 	.word	0xc2f8f359
 800a9c4:	01a56e1f 	.word	0x01a56e1f
 800a9c8:	8800759c 	.word	0x8800759c
 800a9cc:	7e37e43c 	.word	0x7e37e43c
 800a9d0:	8800759c 	.word	0x8800759c
 800a9d4:	fe37e43c 	.word	0xfe37e43c
 800a9d8:	c2f8f359 	.word	0xc2f8f359
 800a9dc:	81a56e1f 	.word	0x81a56e1f
 800a9e0:	43500000 	.word	0x43500000
 800a9e4:	ffff3cb0 	.word	0xffff3cb0
 800a9e8:	3c900000 	.word	0x3c900000

0800a9ec <_sbrk>:
 800a9ec:	4a04      	ldr	r2, [pc, #16]	; (800aa00 <_sbrk+0x14>)
 800a9ee:	6811      	ldr	r1, [r2, #0]
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	b909      	cbnz	r1, 800a9f8 <_sbrk+0xc>
 800a9f4:	4903      	ldr	r1, [pc, #12]	; (800aa04 <_sbrk+0x18>)
 800a9f6:	6011      	str	r1, [r2, #0]
 800a9f8:	6810      	ldr	r0, [r2, #0]
 800a9fa:	4403      	add	r3, r0
 800a9fc:	6013      	str	r3, [r2, #0]
 800a9fe:	4770      	bx	lr
 800aa00:	2000052c 	.word	0x2000052c
 800aa04:	20000530 	.word	0x20000530

0800aa08 <_init>:
 800aa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0a:	bf00      	nop
 800aa0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa0e:	bc08      	pop	{r3}
 800aa10:	469e      	mov	lr, r3
 800aa12:	4770      	bx	lr

0800aa14 <_fini>:
 800aa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa16:	bf00      	nop
 800aa18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa1a:	bc08      	pop	{r3}
 800aa1c:	469e      	mov	lr, r3
 800aa1e:	4770      	bx	lr
